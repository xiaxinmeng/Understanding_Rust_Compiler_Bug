{"sha": "009403e6f03f53353ded4c57c40e72bf74d5f0e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA5NDAzZTZmMDNmNTMzNTNkZWQ0YzU3YzQwZTcyYmY3NGQ1ZjBlOA==", "commit": {"author": {"name": "Kyle Galloway", "email": "kgallowa@redhat.com", "date": "2007-03-06T21:09:22Z"}, "committer": {"name": "Kyle Galloway", "email": "kgallowa@gcc.gnu.org", "date": "2007-03-06T21:09:22Z"}, "message": "AbsentInformationException.java: New file.\n\n2007-03-06  Kyle Galloway  <kgallowa@redhat.com>\n\n\t* classpath/gnu/classpath/jdwp/exception/AbsentInformationException.java: New file.\n\t* classpath/lib/gnu/classpath/jdwp/exception/AbsentInformationException.class: Ditto.\n\t* gnu/classpath/jdwp/exception/AbsentInformationException.h: Ditto.\n\t* gnu/classpath/jdwp/natVMMethod.cc: Add CHECK_INTERP_CLASS macro.\n\t(VMMethod::getLineTable): Use new macro.\n\t(VMMethod::getVariableTable): Implement.\n\t* sources.am: Regenerated.\n\t* Makefile.in: Ditto.\n\nFrom-SVN: r122639", "tree": {"sha": "25678aef2a45acd45c767382e46815681d2d1b06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25678aef2a45acd45c767382e46815681d2d1b06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/009403e6f03f53353ded4c57c40e72bf74d5f0e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009403e6f03f53353ded4c57c40e72bf74d5f0e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/009403e6f03f53353ded4c57c40e72bf74d5f0e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009403e6f03f53353ded4c57c40e72bf74d5f0e8/comments", "author": null, "committer": null, "parents": [{"sha": "205dcd71cdb44b74068fb4a655faf2fcdba1f894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/205dcd71cdb44b74068fb4a655faf2fcdba1f894", "html_url": "https://github.com/Rust-GCC/gccrs/commit/205dcd71cdb44b74068fb4a655faf2fcdba1f894"}], "stats": {"total": 201, "additions": 194, "deletions": 7}, "files": [{"sha": "278642f62f4588335b8d8c27bd5ec013a1f061e3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009403e6f03f53353ded4c57c40e72bf74d5f0e8/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009403e6f03f53353ded4c57c40e72bf74d5f0e8/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=009403e6f03f53353ded4c57c40e72bf74d5f0e8", "patch": "@@ -1,3 +1,14 @@\n+2007-03-06  Kyle Galloway  <kgallowa@redhat.com>\n+\n+\t* classpath/gnu/classpath/jdwp/exception/AbsentInformationException.java: New file.\n+\t* classpath/lib/gnu/classpath/jdwp/exception/AbsentInformationException.class: Ditto.\n+\t* gnu/classpath/jdwp/exception/AbsentInformationException.h: Ditto.\n+\t* gnu/classpath/jdwp/natVMMethod.cc: Add CHECK_INTERP_CLASS macro.\n+\t(VMMethod::getLineTable): Use new macro.\n+\t(VMMethod::getVariableTable): Implement.\n+\t* sources.am: Regenerated.\n+\t* Makefile.in: Ditto.\n+\n 2007-03-06  Tom Tromey  <tromey@redhat.com>\n \n \t* Makefile.in: Rebuilt."}, {"sha": "a7ba68c44ee5746e0fe5b345bc245b7f6d02b713", "filename": "libjava/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009403e6f03f53353ded4c57c40e72bf74d5f0e8/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009403e6f03f53353ded4c57c40e72bf74d5f0e8/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=009403e6f03f53353ded4c57c40e72bf74d5f0e8", "patch": "@@ -1208,6 +1208,7 @@ classpath/gnu/classpath/jdwp/event/filters/ThreadOnlyFilter.java\n \n gnu_classpath_jdwp_event_filters_header_files = $(patsubst classpath/%,%,$(patsubst %.java,%.h,$(gnu_classpath_jdwp_event_filters_source_files)))\n gnu_classpath_jdwp_exception_source_files = \\\n+classpath/gnu/classpath/jdwp/exception/AbsentInformationException.java \\\n classpath/gnu/classpath/jdwp/exception/InvalidClassException.java \\\n classpath/gnu/classpath/jdwp/exception/InvalidClassLoaderException.java \\\n classpath/gnu/classpath/jdwp/exception/InvalidCountException.java \\"}, {"sha": "5bf383f58416e8ed31033c538ab320a9404cbea1", "filename": "libjava/classpath/gnu/classpath/jdwp/exception/AbsentInformationException.java", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009403e6f03f53353ded4c57c40e72bf74d5f0e8/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FAbsentInformationException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009403e6f03f53353ded4c57c40e72bf74d5f0e8/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FAbsentInformationException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FAbsentInformationException.java?ref=009403e6f03f53353ded4c57c40e72bf74d5f0e8", "patch": "@@ -0,0 +1,56 @@\n+/* AbsentInformationException.java -- information not present exception\n+   Copyright (C) 2007 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.exception;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+\n+/**\n+ * An exception thrown when the requested information is not available.\n+ *\n+ * @author Kyle Galloway  (kgallowa@redhat.com)\n+ */\n+public class AbsentInformationException\n+  extends JdwpException\n+{\n+  public AbsentInformationException(String str)\n+  {\n+    super(JdwpConstants.Error.ABSENT_INFORMATION, str);\n+  }\n+}"}, {"sha": "19de3378fefac104739a0e3de6c63b1d26f16090", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/exception/AbsentInformationException.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009403e6f03f53353ded4c57c40e72bf74d5f0e8/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FAbsentInformationException.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009403e6f03f53353ded4c57c40e72bf74d5f0e8/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FAbsentInformationException.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FAbsentInformationException.class?ref=009403e6f03f53353ded4c57c40e72bf74d5f0e8"}, {"sha": "bb4c699553d539b09f2c927c5e4b55c6e6bd80cc", "filename": "libjava/gnu/classpath/jdwp/exception/AbsentInformationException.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009403e6f03f53353ded4c57c40e72bf74d5f0e8/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FAbsentInformationException.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009403e6f03f53353ded4c57c40e72bf74d5f0e8/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FAbsentInformationException.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FAbsentInformationException.h?ref=009403e6f03f53353ded4c57c40e72bf74d5f0e8", "patch": "@@ -0,0 +1,35 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_classpath_jdwp_exception_AbsentInformationException__\n+#define __gnu_classpath_jdwp_exception_AbsentInformationException__\n+\n+#pragma interface\n+\n+#include <gnu/classpath/jdwp/exception/JdwpException.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace classpath\n+    {\n+      namespace jdwp\n+      {\n+        namespace exception\n+        {\n+            class AbsentInformationException;\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::classpath::jdwp::exception::AbsentInformationException : public ::gnu::classpath::jdwp::exception::JdwpException\n+{\n+\n+public:\n+  AbsentInformationException(::java::lang::String *);\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_classpath_jdwp_exception_AbsentInformationException__"}, {"sha": "76fd0a64168077b5d83d4493aabb59b2c64bf430", "filename": "libjava/gnu/classpath/jdwp/natVMMethod.cc", "status": "modified", "additions": 90, "deletions": 7, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009403e6f03f53353ded4c57c40e72bf74d5f0e8/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMMethod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009403e6f03f53353ded4c57c40e72bf74d5f0e8/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMMethod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMMethod.cc?ref=009403e6f03f53353ded4c57c40e72bf74d5f0e8", "patch": "@@ -15,10 +15,25 @@ details.  */\n #include \"jvmti-int.h\"\n \n #include <gnu/classpath/jdwp/VMMethod.h>\n+#include <gnu/classpath/jdwp/exception/AbsentInformationException.h>\n+#include <gnu/classpath/jdwp/exception/InvalidMethodException.h>\n #include <gnu/classpath/jdwp/exception/JdwpInternalErrorException.h>\n #include <gnu/classpath/jdwp/util/LineTable.h>\n #include <gnu/classpath/jdwp/util/VariableTable.h>\n \n+using namespace java::lang;\n+\n+#define CHECK_INTERP_CLASS()\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    if (!_Jv_IsInterpretedClass (getDeclaringClass ()))\t\\\n+      {\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n+        ::java::lang::String *msg = JvNewStringLatin1 (\"native class\"); \\\n+        throw new exception::JdwpInternalErrorException (msg); \t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n jstring\n gnu::classpath::jdwp::VMMethod::getName ()\n {\n@@ -56,12 +71,7 @@ gnu::classpath::jdwp::VMMethod::getModifiers ()\n gnu::classpath::jdwp::util::LineTable *\n gnu::classpath::jdwp::VMMethod::getLineTable ()\n {\n-  if (!_Jv_IsInterpretedClass (getDeclaringClass ()))\n-    {\n-      // this should not happen\n-      ::java::lang::String *msg = JvNewStringLatin1 (\"native class\");\n-      throw new exception::JdwpInternalErrorException (msg);\n-    }\n+  CHECK_INTERP_CLASS ();\n \n   jmethodID desired_method = reinterpret_cast<jmethodID> (_methodId);\n \n@@ -97,5 +107,78 @@ gnu::classpath::jdwp::VMMethod::getLineTable ()\n gnu::classpath::jdwp::util::VariableTable*\n gnu::classpath::jdwp::VMMethod::getVariableTable ()\n {\n-  return NULL;\n+  using namespace gnu::classpath::jdwp::util;\n+  \n+  jvmtiEnv *env = _Jv_GetJDWP_JVMTIEnv ();\n+\t\n+  CHECK_INTERP_CLASS ();\n+  \n+  jmethodID meth = reinterpret_cast<jmethodID> (_methodId);\n+  jvmtiLocalVariableEntry *var_table;\n+  jint num_slots, args_len;\n+  \n+  jvmtiError jerr = env->GetLocalVariableTable (meth, &num_slots, &var_table);\n+  \n+  if (jerr != JVMTI_ERROR_NONE)\n+    goto error;\n+  \n+  jerr = env->GetArgumentsSize (meth, &args_len);\n+  \n+  if (jerr != JVMTI_ERROR_NONE)\n+    {\n+    error:\n+      using namespace gnu::classpath::jdwp::exception;\n+      char *error;\n+      env->GetErrorName (jerr, &error);\n+      String *msg = JvNewStringUTF (error);\n+      env->Deallocate (reinterpret_cast<unsigned char *> (error));\n+      \n+      if (jerr == JVMTI_ERROR_NATIVE_METHOD)\n+        throw new AbsentInformationException (msg);\n+      else if (jerr == JVMTI_ERROR_INVALID_METHODID)\n+        throw new InvalidMethodException (_methodId);\n+      else\n+        throw new JdwpInternalErrorException (msg);\n+    }\n+  \n+  jlongArray start_pcs = JvNewLongArray (num_slots);\n+  jlong *start_pcs_ptr = elements (start_pcs);\n+  jintArray lengths = JvNewIntArray (num_slots);\n+  jint *lengths_ptr = elements (lengths);\n+  jintArray slots = JvNewIntArray (num_slots);\n+  jint *slots_ptr = elements (slots);\n+  JArray<String *> *names = reinterpret_cast<JArray<String *> *> \n+                              (JvNewObjectArray (num_slots, \n+                                                 &String::class$, NULL));\n+  jstring *names_ptr = elements (names);\n+  JArray<String *> *signatures = reinterpret_cast<JArray<String *> *>\n+                                   (JvNewObjectArray (num_slots, \n+                                                      &String::class$, NULL));\n+  jstring *signatures_ptr = elements (signatures);\n+  \n+  // Get the information out of the JVMTI strucutre and Deallocate the strings.\n+  for (int i = 0; i < num_slots; i++)\n+    {\n+      start_pcs_ptr[i] = var_table[i].start_location;\n+      lengths_ptr[i] = var_table[i].length;\n+      slots_ptr[i] = var_table[i].slot;\n+      names_ptr[i] = JvNewStringUTF (var_table[i].name);\n+      env->Deallocate (reinterpret_cast<unsigned char *> \n+                         (var_table[i].name));\n+      signatures_ptr[i] = JvNewStringUTF (var_table[i].signature);\n+      env->Deallocate (reinterpret_cast<unsigned char *> \n+                         (var_table[i].signature));\n+      env->Deallocate (reinterpret_cast<unsigned char *>\n+                         (var_table[i].generic_signature));\n+    }\n+  \n+  // Now Deallocate the table since it's strings have already been freed.\n+  env->Deallocate (reinterpret_cast<unsigned char *> (var_table));\n+  \n+  // Create the new JDWP VariableTable to return with the now filled arrays.\n+  VariableTable* jdwp_vtable = new VariableTable (args_len, num_slots,\n+                                                  start_pcs, names, signatures,\n+                                                  lengths, slots);\n+  \n+  return jdwp_vtable;\n }"}, {"sha": "e1e8aed5603185b181a8f4ff38a18c3c229a0a1d", "filename": "libjava/sources.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009403e6f03f53353ded4c57c40e72bf74d5f0e8/libjava%2Fsources.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009403e6f03f53353ded4c57c40e72bf74d5f0e8/libjava%2Fsources.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsources.am?ref=009403e6f03f53353ded4c57c40e72bf74d5f0e8", "patch": "@@ -326,6 +326,7 @@ gnu/classpath/jdwp/event/filters.list: $(gnu_classpath_jdwp_event_filters_source\n \n \n gnu_classpath_jdwp_exception_source_files = \\\n+classpath/gnu/classpath/jdwp/exception/AbsentInformationException.java \\\n classpath/gnu/classpath/jdwp/exception/InvalidClassException.java \\\n classpath/gnu/classpath/jdwp/exception/InvalidClassLoaderException.java \\\n classpath/gnu/classpath/jdwp/exception/InvalidCountException.java \\"}]}