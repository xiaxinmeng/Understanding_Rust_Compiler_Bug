{"sha": "36fcf362ce30d24b353f5ece90fb8d760af8626c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZmY2YzNjJjZTMwZDI0YjM1M2Y1ZWNlOTBmYjhkNzYwYWY4NjI2Yw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-12-13T10:26:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-13T10:26:56Z"}, "message": "exp_prag.adb (Expand_Pragma_Assert): Recognize new warning flag for assert fail\n\n2007-12-06  Robert Dewar  <dewar@adacore.com>\n\t    Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_prag.adb (Expand_Pragma_Assert): Recognize new warning flag for\n\tassert fail\n\n\t* ug_words: Add entries for -gnatw.a -gnatw.A\n\n\t* sem_res.adb (Set_String_Literal_Subtype): If the context of the\n\tliteral is a subtype with non-static constraints, use the base type of\n\tthe context as the base of the string subtype, to prevent type\n\tmismatches in gigi.\n\t(Resolve_Actuals): If the actual is an entity name, generate a\n\treference before the actual is resolved and expanded, to prevent\n\tspurious warnings on formals of enclosing protected operations.\n\t(Analyze_Overloaded_Selected_Component): If type of prefix if\n\tclass-wide, use visible components of base type.\n\t(Resolve_Selected_Component): Ditto.\n\t(Resolve_Short_Circuit): Detect case of pragma Assert argument\n\tevaluating to False, and issue warning message.\n\n\t* usage.adb: Add lines for -gnatw.a and -gnatw.A\n\nFrom-SVN: r130838", "tree": {"sha": "6fafce247886d6e5a58f5c2bc6f8f0bd92df7c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fafce247886d6e5a58f5c2bc6f8f0bd92df7c43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36fcf362ce30d24b353f5ece90fb8d760af8626c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36fcf362ce30d24b353f5ece90fb8d760af8626c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36fcf362ce30d24b353f5ece90fb8d760af8626c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36fcf362ce30d24b353f5ece90fb8d760af8626c/comments", "author": null, "committer": null, "parents": [{"sha": "c8b92217c730612a4e07b1c351fa21ce7e102d21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b92217c730612a4e07b1c351fa21ce7e102d21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8b92217c730612a4e07b1c351fa21ce7e102d21"}], "stats": {"total": 158, "additions": 125, "deletions": 33}, "files": [{"sha": "27869a838271338ee5ec084f6a6344640c3141c0", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fcf362ce30d24b353f5ece90fb8d760af8626c/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fcf362ce30d24b353f5ece90fb8d760af8626c/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=36fcf362ce30d24b353f5ece90fb8d760af8626c", "patch": "@@ -323,7 +323,8 @@ package body Exp_Prag is\n \n       --  If new condition is always false, give a warning\n \n-      if Nkind (N) = N_Procedure_Call_Statement\n+      if Warn_On_Assertion_Failure\n+        and then Nkind (N) = N_Procedure_Call_Statement\n         and then Is_RTE (Entity (Name (N)), RE_Raise_Assert_Failure)\n       then\n          --  If original condition was a Standard.False, we assume that this is"}, {"sha": "523a883ae45206bcf3ffebc4d9a6e5b5f9230fc9", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 117, "deletions": 30, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fcf362ce30d24b353f5ece90fb8d760af8626c/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fcf362ce30d24b353f5ece90fb8d760af8626c/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=36fcf362ce30d24b353f5ece90fb8d760af8626c", "patch": "@@ -2846,6 +2846,30 @@ package body Sem_Res is\n \n          --  Case where actual is present\n \n+         --  If the actual is an entity,  generate a reference to it now. We\n+         --  do this before the actual is resolved, because a formal of some\n+         --  protected subprogram, or a task discriminant, will be rewritten\n+         --  during expansion, and the reference to the source entity may\n+         --  be lost.\n+\n+         if Present (A)\n+           and then Is_Entity_Name (A)\n+           and then Comes_From_Source (N)\n+         then\n+            Orig_A := Entity (A);\n+\n+            if Present (Orig_A) then\n+               if Is_Formal (Orig_A)\n+                 and then Ekind (F) /= E_In_Parameter\n+               then\n+                  Generate_Reference (Orig_A, A, 'm');\n+\n+               elsif not Is_Overloaded (A) then\n+                  Generate_Reference (Orig_A, A);\n+               end if;\n+            end if;\n+         end if;\n+\n          if Present (A)\n            and then (Nkind (Parent (A)) /= N_Parameter_Association\n                        or else\n@@ -3043,43 +3067,38 @@ package body Sem_Res is\n                end if;\n             end if;\n \n-            --  For IN parameter, this is where we generate a reference after\n-            --  resolution is complete.\n-\n-            if Ekind (F) = E_In_Parameter then\n-               Orig_A := Original_Node (A);\n-\n-               if Is_Entity_Name (Orig_A)\n-                 and then Present (Entity (Orig_A))\n-               then\n-                  Generate_Reference (Entity (Orig_A), Orig_A);\n-               end if;\n-\n             --  Case of OUT or IN OUT parameter\n \n-            else\n-               --  Validate the form of the actual. Note that the call to\n-               --  Is_OK_Variable_For_Out_Formal generates the required\n-               --  reference in this case.\n-\n-               if not Is_OK_Variable_For_Out_Formal (A) then\n-                  Error_Msg_NE (\"actual for& must be a variable\", A, F);\n-               end if;\n+            if Ekind (F) /= E_In_Parameter then\n \n                --  For an Out parameter, check for useless assignment. Note\n                --  that we can't set Last_Assignment this early, because we\n                --  may kill current values in Resolve_Call, and that call\n                --  would clobber the Last_Assignment field.\n \n+               --  Note: call Warn_On_Useless_Assignment before doing the\n+               --  check below for Is_OK_Variable_For_Out_Formal so that the\n+               --  setting of Referenced_As_LHS/Referenced_As_Out_Formal\n+               --  properly reflects the last assignment, not this one!\n+\n                if Ekind (F) = E_Out_Parameter then\n-                  if Warn_On_Out_Parameter_Unread\n+                  if Warn_On_Modified_As_Out_Parameter (F)\n                     and then Is_Entity_Name (A)\n                     and then Present (Entity (A))\n+                    and then Comes_From_Source (N)\n                   then\n-                     Warn_On_Useless_Assignment (Entity (A), Sloc (A));\n+                     Warn_On_Useless_Assignment (Entity (A), A);\n                   end if;\n                end if;\n \n+               --  Validate the form of the actual. Note that the call to\n+               --  Is_OK_Variable_For_Out_Formal generates the required\n+               --  reference in this case.\n+\n+               if not Is_OK_Variable_For_Out_Formal (A) then\n+                  Error_Msg_NE (\"actual for& must be a variable\", A, F);\n+               end if;\n+\n                --  What's the following about???\n \n                if Is_Entity_Name (A) then\n@@ -4718,7 +4737,7 @@ package body Sem_Res is\n       --  for it, precisely because we will not do it within the init proc\n       --  itself.\n \n-      --  If the subprogram is marked Inlined_Always, then even if it returns\n+      --  If the subprogram is marked Inline_Always, then even if it returns\n       --  an unconstrained type the call does not require use of the secondary\n       --  stack.\n \n@@ -4809,12 +4828,12 @@ package body Sem_Res is\n          Kill_Current_Values;\n       end if;\n \n-      --  If we are warning about unread out parameters, this is the place to\n-      --  set Last_Assignment for out parameters. We have to do this after the\n-      --  above call to Kill_Current_Values (since that call clears the\n-      --  Last_Assignment field of all local variables).\n+      --  If we are warning about unread OUT parameters, this is the place to\n+      --  set Last_Assignment for OUT and IN OUT parameters. We have to do this\n+      --  after the above call to Kill_Current_Values (since that call clears\n+      --  the Last_Assignment field of all local variables).\n \n-      if Warn_On_Out_Parameter_Unread\n+      if (Warn_On_Modified_Unread or Warn_On_All_Unread_Out_Parameters)\n         and then Comes_From_Source (N)\n         and then In_Extended_Main_Source_Unit (N)\n       then\n@@ -4826,9 +4845,12 @@ package body Sem_Res is\n             F := First_Formal (Nam);\n             A := First_Actual (N);\n             while Present (F) and then Present (A) loop\n-               if Ekind (F) = E_Out_Parameter\n+               if (Ekind (F) = E_Out_Parameter\n+                     or else Ekind (F) = E_In_Out_Parameter)\n+                 and then Warn_On_Modified_As_Out_Parameter (F)\n                  and then Is_Entity_Name (A)\n                  and then Present (Entity (A))\n+                 and then Comes_From_Source (N)\n                  and then Safe_To_Capture_Value (N, Entity (A))\n                then\n                   Set_Last_Assignment (Entity (A), A);\n@@ -6930,6 +6952,14 @@ package body Sem_Res is\n             end if;\n \n             if Is_Record_Type (T) then\n+\n+               --  The visible components of a class-wide type are those of\n+               --  the root type.\n+\n+               if Is_Class_Wide_Type (T) then\n+                  T := Etype (T);\n+               end if;\n+\n                Comp := First_Entity (T);\n                while Present (Comp) loop\n                   if Chars (Comp) = Chars (S)\n@@ -7090,6 +7120,58 @@ package body Sem_Res is\n       Resolve (L, B_Typ);\n       Resolve (R, B_Typ);\n \n+      --  Check for issuing warning for always False assert, this happens\n+      --  when assertions are turned off, in which case the pragma Assert\n+      --  was transformed into:\n+\n+      --     if False and then <condition> then ...\n+\n+      --  and we detect this pattern\n+\n+      if Warn_On_Assertion_Failure\n+        and then Is_Entity_Name (R)\n+        and then Entity (R) = Standard_False\n+        and then Nkind (Parent (N)) = N_If_Statement\n+        and then Nkind (N) = N_And_Then\n+        and then Is_Entity_Name (L)\n+        and then Entity (L) = Standard_False\n+      then\n+         declare\n+            Orig : constant Node_Id := Original_Node (Parent (N));\n+         begin\n+            if Nkind (Orig) = N_Pragma\n+              and then Chars (Orig) = Name_Assert\n+            then\n+               --  Don't want to warn if original condition is explicit False\n+\n+               declare\n+                  Expr : constant Node_Id :=\n+                           Original_Node\n+                             (Expression\n+                               (First (Pragma_Argument_Associations (Orig))));\n+               begin\n+                  if Is_Entity_Name (Expr)\n+                    and then Entity (Expr) = Standard_False\n+                  then\n+                     null;\n+                  else\n+                     --  Issue warning. Note that we don't want to make this\n+                     --  an unconditional warning, because if the assert is\n+                     --  within deleted code we do not want the warning. But\n+                     --  we do not want the deletion of the IF/AND-THEN to\n+                     --  take this message with it. We achieve this by making\n+                     --  sure that the expanded code points to the Sloc of\n+                     --  the expression, not the original pragma.\n+\n+                     Error_Msg_N (\"?assertion would fail at run-time\", Orig);\n+                  end if;\n+               end;\n+            end if;\n+         end;\n+      end if;\n+\n+      --  Continue with processing of short circuit\n+\n       Check_Unset_Reference (L);\n       Check_Unset_Reference (R);\n \n@@ -8232,7 +8314,12 @@ package body Sem_Res is\n             Set_Parent (Drange, N);\n             Analyze_And_Resolve (Drange, Index_Type);\n \n-            Set_Etype        (Index_Subtype, Index_Type);\n+            --  In the context, the Index_Type may already have a constraint,\n+            --  so use common base type on string subtype. The base type may\n+            --  be used when generating attributes of the string, for example\n+            --  in the context of a slice assignment.\n+\n+            Set_Etype        (Index_Subtype, Base_Type (Index_Type));\n             Set_Size_Info    (Index_Subtype, Index_Type);\n             Set_RM_Size      (Index_Subtype, RM_Size (Index_Type));\n "}, {"sha": "270289bd5f82266db2bc4bfcaeebf40cdb355849", "filename": "gcc/ada/ug_words", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fcf362ce30d24b353f5ece90fb8d760af8626c/gcc%2Fada%2Fug_words", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fcf362ce30d24b353f5ece90fb8d760af8626c/gcc%2Fada%2Fug_words", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fug_words?ref=36fcf362ce30d24b353f5ece90fb8d760af8626c", "patch": "@@ -112,6 +112,8 @@ gcc -c          ^ GNAT COMPILE\n -gnatw          ^ /WARNINGS\n -gnatwa         ^ /WARNINGS=OPTIONAL\n -gnatwA         ^ /WARNINGS=NOOPTIONAL\n+-gnatw.a        ^ /WARNINGS=FAILING_ASSERTIONS\n+-gnatw.A        ^ /WARNINGS=NO_FAILING_ASSERTIONS\n -gnatwb         ^ /WARNINGS=BAD_FIXED_VALUES\n -gnatwB         ^ /WARNINGS=NO_BAD_FIXED_VALUES\n -gnatwc         ^ /WARNINGS=CONDITIONALS"}, {"sha": "07735903f34229f4db5744cc6297653ee1aadb8d", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fcf362ce30d24b353f5ece90fb8d760af8626c/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fcf362ce30d24b353f5ece90fb8d760af8626c/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=36fcf362ce30d24b353f5ece90fb8d760af8626c", "patch": "@@ -364,6 +364,8 @@ begin\n    Write_Line (\"Enable selected warning modes, xx = list of parameters:\");\n    Write_Line (\"        a    turn on all optional warnings (except d h l .o)\");\n    Write_Line (\"        A    turn off all optional warnings\");\n+   Write_Line (\"        .a*  turn on warnings for failing assertions\");\n+   Write_Line (\"        .A   turn off warnings for failing assertions\");\n    Write_Line (\"        b    turn on warnings for bad fixed value \" &\n                                                   \"(not multiple of small)\");\n    Write_Line (\"        B*   turn off warnings for bad fixed value \" &\n@@ -400,9 +402,9 @@ begin\n    Write_Line (\"        n*   normal warning mode (cancels -gnatws/-gnatwe)\");\n    Write_Line (\"        o*   turn on warnings for address clause overlay\");\n    Write_Line (\"        O    turn off warnings for address clause overlay\");\n-   Write_Line (\"        .o   turn on warnings for out parameter assigned \" &\n+   Write_Line (\"        .o   turn on warnings for out parameters assigned \" &\n                                                   \"but not read\");\n-   Write_Line (\"        .O*  turn off warnings for out parameter assigned \" &\n+   Write_Line (\"        .O*  turn off warnings for out parameters assigned \" &\n                                                   \"but not read\");\n    Write_Line (\"        p    turn on warnings for ineffective pragma \" &\n                                              \"Inline in frontend\");"}]}