{"sha": "39836f8324d819459cb21198e95b993588c6a2b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk4MzZmODMyNGQ4MTk0NTljYjIxMTk4ZTk1Yjk5MzU4OGM2YTJiMQ==", "commit": {"author": {"name": "Michael Weghorn", "email": "m.weghorn@posteo.de", "date": "2020-12-01T21:19:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-01T21:35:32Z"}, "message": "libstdc++: Pretty printers for _Bit_reference and _Bit_iterator\n\n'std::_Bit_iterator' and 'std::_Bit_const_iterator' are the iterators\nused by 'std::vector<bool>'.\n'std::_Bit_reference' is e.g. used in range-based for loops over\n'std::vector<bool>'  like\n\n    std::vector<bool> vb {true, false, false};\n    for (auto b : vb) {\n        // b is of type std::_Bit_reference here\n        // ...\n    }\n\nLike iterators of vectors for other types, the actual value is printed.\n\nlibstdc++-v3/ChangeLog:\n\n\t* python/libstdcxx/v6/printers.py (StdBitIteratorPrinter)\n\t(StdBitReferencePrinter): Add pretty-printers for\n\t_Bit_reference, _Bit_iterator and _Bit_const_iterator.\n\t* testsuite/libstdc++-prettyprinters/simple.cc: Test\n\tstd::_Bit_reference, std::_Bit_iterator and\n\tstd::_Bit_const_iterator.\n\t* testsuite/libstdc++-prettyprinters/simple11.cc: Likewise.", "tree": {"sha": "09a17861418986fb85ef54d6e737ba047b16bc3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09a17861418986fb85ef54d6e737ba047b16bc3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39836f8324d819459cb21198e95b993588c6a2b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39836f8324d819459cb21198e95b993588c6a2b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39836f8324d819459cb21198e95b993588c6a2b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39836f8324d819459cb21198e95b993588c6a2b1/comments", "author": {"login": "michaelweghorn", "id": 6560939, "node_id": "MDQ6VXNlcjY1NjA5Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/6560939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelweghorn", "html_url": "https://github.com/michaelweghorn", "followers_url": "https://api.github.com/users/michaelweghorn/followers", "following_url": "https://api.github.com/users/michaelweghorn/following{/other_user}", "gists_url": "https://api.github.com/users/michaelweghorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelweghorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelweghorn/subscriptions", "organizations_url": "https://api.github.com/users/michaelweghorn/orgs", "repos_url": "https://api.github.com/users/michaelweghorn/repos", "events_url": "https://api.github.com/users/michaelweghorn/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelweghorn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "968666a011b904f70d12e52180d361faaedfd3a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/968666a011b904f70d12e52180d361faaedfd3a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/968666a011b904f70d12e52180d361faaedfd3a2"}], "stats": {"total": 90, "additions": 89, "deletions": 1}, "files": [{"sha": "478e44eefdfde02d9b1980f7a7513299298ee9df", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39836f8324d819459cb21198e95b993588c6a2b1/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39836f8324d819459cb21198e95b993588c6a2b1/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=39836f8324d819459cb21198e95b993588c6a2b1", "patch": "@@ -479,7 +479,27 @@ def to_string(self):\n             return 'non-dereferenceable iterator for std::vector'\n         return str(self.val['_M_current'].dereference())\n \n-# TODO add printer for vector<bool>'s _Bit_iterator and _Bit_const_iterator\n+class StdBitIteratorPrinter:\n+    \"Print std::vector<bool>'s _Bit_iterator and _Bit_const_iterator\"\n+\n+    def __init__(self, typename, val):\n+        self.val = val\n+\n+    def to_string(self):\n+        if not self.val['_M_p']:\n+            return 'non-dereferenceable iterator for std::vector<bool>'\n+        return bool(self.val['_M_p'].dereference() & (1 << self.val['_M_offset']))\n+\n+class StdBitReferencePrinter:\n+    \"Print std::_Bit_reference\"\n+\n+    def __init__(self, typename, val):\n+        self.val = val\n+\n+    def to_string(self):\n+        if not self.val['_M_p']:\n+            return 'invalid std::_Bit_reference'\n+        return bool(self.val['_M_p'].dereference() & (self.val['_M_mask']))\n \n class StdTuplePrinter:\n     \"Print a std::tuple\"\n@@ -1965,6 +1985,12 @@ def build_libstdcxx_dictionary ():\n                                         StdDequeIteratorPrinter)\n         libstdcxx_printer.add_version('__gnu_cxx::', '__normal_iterator',\n                                       StdVectorIteratorPrinter)\n+        libstdcxx_printer.add_version('std::', '_Bit_iterator',\n+                                      StdBitIteratorPrinter)\n+        libstdcxx_printer.add_version('std::', '_Bit_const_iterator',\n+                                      StdBitIteratorPrinter)\n+        libstdcxx_printer.add_version('std::', '_Bit_reference',\n+                                      StdBitReferencePrinter)\n         libstdcxx_printer.add_version('__gnu_cxx::', '_Slist_iterator',\n                                       StdSlistIteratorPrinter)\n         libstdcxx_printer.add_container('std::', '_Fwd_list_iterator',"}, {"sha": "9821d1805cf1968771a1a08f8bfc22c4aad457eb", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/simple.cc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39836f8324d819459cb21198e95b993588c6a2b1/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39836f8324d819459cb21198e95b993588c6a2b1/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc?ref=39836f8324d819459cb21198e95b993588c6a2b1", "patch": "@@ -127,6 +127,37 @@ main()\n   vb.erase(vb.begin());\n // { dg-final { regexp-test vb {std::(__debug::)?vector<bool> of length 5, capacity 128 = \\\\{true, true, false, false, true\\\\}} } }\n \n+  std::vector<bool>::iterator vbIt = vb.begin();\n+// { dg-final { note-test vbIt {true} } }\n+  std::vector<bool>::iterator vbIt2 = ++vbIt;\n+// { dg-final { note-test vbIt2 {true} } }\n+  std::vector<bool>::iterator vbIt3 = ++vbIt;\n+// { dg-final { note-test vbIt3 {false} } }\n+  std::vector<bool>::iterator vbIt4 = ++vbIt;\n+// { dg-final { note-test vbIt4 {false} } }\n+  std::vector<bool>::iterator vbIt5 = ++vbIt;\n+// { dg-final { note-test vbIt5 {true} } }\n+\n+  std::vector<bool>::const_iterator vbcIt = vb.begin();\n+// { dg-final { note-test vbcIt {true} } }\n+\n+  std::vector<bool>::iterator vbIt0;\n+// { dg-final { note-test vbIt0 {non-dereferenceable iterator for std::vector<bool>} } }\n+\n+  std::_Bit_reference br = *vb.begin();\n+// { dg-final { note-test br {true} } }\n+  std::_Bit_reference br2 = *vbIt2;\n+// { dg-final { note-test br2 {true} } }\n+  std::_Bit_reference br3 = *vbIt3;\n+// { dg-final { note-test br3 {false} } }\n+  std::_Bit_reference br4 = *vbIt4;\n+// { dg-final { note-test br4 {false} } }\n+  std::_Bit_reference br5 = *vbIt5;\n+// { dg-final { note-test br5 {true} } }\n+\n+ std::_Bit_reference br0;\n+// { dg-final { note-test br0 {invalid std::_Bit_reference} } }\n+\n   __gnu_cxx::slist<int> sll;\n   sll.push_front(23);\n   sll.push_front(47);"}, {"sha": "519565693b75c6173e8eb8b04f58fc3612ea3187", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/simple11.cc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39836f8324d819459cb21198e95b993588c6a2b1/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39836f8324d819459cb21198e95b993588c6a2b1/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc?ref=39836f8324d819459cb21198e95b993588c6a2b1", "patch": "@@ -120,6 +120,37 @@ main()\n   vb.erase(vb.begin());\n // { dg-final { regexp-test vb {std::(__debug::)?vector<bool> of length 5, capacity 128 = \\\\{true, true, false, false, true\\\\}} } }\n \n+  std::vector<bool>::iterator vbIt = vb.begin();\n+// { dg-final { note-test vbIt {true} } }\n+  std::vector<bool>::iterator vbIt2 = ++vbIt;\n+// { dg-final { note-test vbIt2 {true} } }\n+  std::vector<bool>::iterator vbIt3 = ++vbIt;\n+// { dg-final { note-test vbIt3 {false} } }\n+  std::vector<bool>::iterator vbIt4 = ++vbIt;\n+// { dg-final { note-test vbIt4 {false} } }\n+  std::vector<bool>::iterator vbIt5 = ++vbIt;\n+// { dg-final { note-test vbIt5 {true} } }\n+\n+  std::vector<bool>::const_iterator vbcIt = vb.cbegin();\n+// { dg-final { note-test vbcIt {true} } }\n+\n+  std::vector<bool>::iterator vbIt0;\n+// { dg-final { note-test vbIt0 {non-dereferenceable iterator for std::vector<bool>} } }\n+\n+  std::_Bit_reference br = *vb.begin();\n+// { dg-final { note-test br {true} } }\n+  std::_Bit_reference br2 = *vbIt2;\n+// { dg-final { note-test br2 {true} } }\n+  std::_Bit_reference br3 = *vbIt3;\n+// { dg-final { note-test br3 {false} } }\n+  std::_Bit_reference br4 = *vbIt4;\n+// { dg-final { note-test br4 {false} } }\n+  std::_Bit_reference br5 = *vbIt5;\n+// { dg-final { note-test br5 {true} } }\n+\n+ std::_Bit_reference br0;\n+// { dg-final { note-test br0 {invalid std::_Bit_reference} } }\n+\n   __gnu_cxx::slist<int> sll;\n   sll.push_front(23);\n   sll.push_front(47);"}]}