{"sha": "c878765bbf32e3c3505417771f94015da69a33b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg3ODc2NWJiZjMyZTNjMzUwNTQxNzc3MWY5NDAxNWRhNjlhMzNiOA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-08-16T10:17:07Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-08-16T10:17:07Z"}, "message": "options.texi (NoDriverArg): Document.\n\n\t* doc/options.texi (NoDriverArg): Document.\n\t* gcc.c (cpp_unique_options): Generate -MD and -MMD instead of\n\t-MDX and -MMDX.\n\t* opt-functions.awk (switch_flags): Handle NoDriverArg.\n\t* opts-common.c (decode_cmdline_option): Ignore CL_SEPARATE\n\tmarking for CL_NO_DRIVER_ARG options when in the driver.\n\t* opts.h (CL_NO_DRIVER_ARG): Define.\n\t(CL_PARAMS, CL_WARNING, CL_OPTIMIZATION, CL_DRIVER, CL_TARGET,\n\tCL_COMMON): Update values.\n\nc-family:\n\t* c.opt (MDX): Change back to MD.  Mark NoDriverArg instead of\n\tRejectDriver.\n\t(MMDX): Change back to MMD.  Mark NoDriverArg instead of\n\tRejectDriver.\n\t* c-opts.c (c_common_handle_option): Use OPT_MD and OPT_MMD\n\tinstead of OPT_MDX and OPT_MMDX.\n\nfortran:\n\t* lang.opt (MDX): Change back to MD.  Mark NoDriverArg instead of\n\tRejectDriver.\n\t(MMDX): Change back to MMD.  Mark NoDriverArg instead of\n\tRejectDriver.\n\t* cpp.c (gfc_cpp_handle_option): Use OPT_MD and OPT_MMD instead of\n\tOPT_MDX and OPT_MMDX.\n\nFrom-SVN: r163280", "tree": {"sha": "62c0d7f7821118115c0a4344974133ad19963247", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62c0d7f7821118115c0a4344974133ad19963247"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c878765bbf32e3c3505417771f94015da69a33b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c878765bbf32e3c3505417771f94015da69a33b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c878765bbf32e3c3505417771f94015da69a33b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c878765bbf32e3c3505417771f94015da69a33b8/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "603349bf3ddd56a90ad8091a41038f0c38eb4838", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603349bf3ddd56a90ad8091a41038f0c38eb4838", "html_url": "https://github.com/Rust-GCC/gccrs/commit/603349bf3ddd56a90ad8091a41038f0c38eb4838"}], "stats": {"total": 101, "additions": 74, "deletions": 27}, "files": [{"sha": "540d210b4a71eed5f4217c7569fa2629c29a5ced", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c878765bbf32e3c3505417771f94015da69a33b8", "patch": "@@ -1,3 +1,15 @@\n+2010-08-16  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* doc/options.texi (NoDriverArg): Document.\n+\t* gcc.c (cpp_unique_options): Generate -MD and -MMD instead of\n+\t-MDX and -MMDX.\n+\t* opt-functions.awk (switch_flags): Handle NoDriverArg.\n+\t* opts-common.c (decode_cmdline_option): Ignore CL_SEPARATE\n+\tmarking for CL_NO_DRIVER_ARG options when in the driver.\n+\t* opts.h (CL_NO_DRIVER_ARG): Define.\n+\t(CL_PARAMS, CL_WARNING, CL_OPTIMIZATION, CL_DRIVER, CL_TARGET,\n+\tCL_COMMON): Update values.\n+\n 2010-08-16  Joseph Myers  <joseph@codesourcery.com>\n \n \t* common.opt: Add driver options."}, {"sha": "b88684a62b8075099aa50d6140b7a238a0c9009c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c878765bbf32e3c3505417771f94015da69a33b8", "patch": "@@ -1,3 +1,12 @@\n+2010-08-16  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c.opt (MDX): Change back to MD.  Mark NoDriverArg instead of\n+\tRejectDriver.\n+\t(MMDX): Change back to MMD.  Mark NoDriverArg instead of\n+\tRejectDriver.\n+\t* c-opts.c (c_common_handle_option): Use OPT_MD and OPT_MMD\n+\tinstead of OPT_MDX and OPT_MMDX.\n+\n 2010-08-16  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c.opt (MDX, MMDX, lang-asm): Mark RejectDriver."}, {"sha": "b46b0a04908ff505ffb66581d2af9ded8698e093", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=c878765bbf32e3c3505417771f94015da69a33b8", "patch": "@@ -398,9 +398,9 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       flag_no_output = 1;\n       break;\n \n-    case OPT_MDX:\n-    case OPT_MMDX:\n-      cpp_opts->deps.style = (code == OPT_MDX ? DEPS_SYSTEM: DEPS_USER);\n+    case OPT_MD:\n+    case OPT_MMD:\n+      cpp_opts->deps.style = (code == OPT_MD ? DEPS_SYSTEM: DEPS_USER);\n       cpp_opts->deps.need_preprocessor_output = true;\n       deps_file = arg;\n       break;"}, {"sha": "05fedd66f027c55d683d02af364fe120be0f3342", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=c878765bbf32e3c3505417771f94015da69a33b8", "patch": "@@ -72,9 +72,9 @@ M\n C ObjC C++ ObjC++\n Generate make dependencies\n \n-MDX\n-C ObjC C++ ObjC++ RejectDriver Separate MissingArgError(missing filename after %qs)\n--MD\tGenerate make dependencies and compile\n+MD\n+C ObjC C++ ObjC++ NoDriverArg Separate MissingArgError(missing filename after %qs)\n+Generate make dependencies and compile\n \n MF\n C ObjC C++ ObjC++ Joined Separate MissingArgError(missing filename after %qs)\n@@ -88,9 +88,9 @@ MM\n C ObjC C++ ObjC++\n Like -M but ignore system header files\n \n-MMDX\n-C ObjC C++ ObjC++ RejectDriver Separate MissingArgError(missing filename after %qs)\n--MMD\tLike -MD but ignore system header files\n+MMD\n+C ObjC C++ ObjC++ NoDriverArg Separate MissingArgError(missing filename after %qs)\n+Like -MD but ignore system header files\n \n MP\n C ObjC C++ ObjC++"}, {"sha": "aac638bd1feac98e854353cca03fefdead94fc2e", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=c878765bbf32e3c3505417771f94015da69a33b8", "patch": "@@ -159,6 +159,12 @@ option handler.  @code{UInteger} should also be used on options like\n @code{-falign-loops}=@var{n} are supported to make sure the saved\n options are given a full integer.\n \n+@item NoDriverArg\n+For an option marked @code{Separate}, the option only takes an\n+argument in the compiler proper, not in the driver.  This is for\n+compatibility with existing options that are used both directly and\n+via @option{-Wp,}; new options should not have this property.\n+\n @item Var(@var{var})\n The state of this option should be stored in variable @var{var}.\n The way that the state is stored depends on the type of option:"}, {"sha": "a0b5c2421b990c3c665b89467473d434036e818f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c878765bbf32e3c3505417771f94015da69a33b8", "patch": "@@ -1,3 +1,12 @@\n+2010-08-16  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lang.opt (MDX): Change back to MD.  Mark NoDriverArg instead of\n+\tRejectDriver.\n+\t(MMDX): Change back to MMD.  Mark NoDriverArg instead of\n+\tRejectDriver.\n+\t* cpp.c (gfc_cpp_handle_option): Use OPT_MD and OPT_MMD instead of\n+\tOPT_MDX and OPT_MMDX.\n+\n 2010-08-16  Joseph Myers  <joseph@codesourcery.com>\n \n \t* lang.opt (MDX, MMDX): Mark RejectDriver."}, {"sha": "a6a922f0ff91267e7b27d4ac97745e2fc7eb99af", "filename": "gcc/fortran/cpp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2Ffortran%2Fcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2Ffortran%2Fcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.c?ref=c878765bbf32e3c3505417771f94015da69a33b8", "patch": "@@ -456,11 +456,11 @@ gfc_cpp_handle_option (size_t scode, const char *arg, int value ATTRIBUTE_UNUSED\n       gfc_cpp_option.deps = 1;\n       break;\n \n-    case OPT_MMDX:\n+    case OPT_MMD:\n       gfc_cpp_option.deps_skip_system = 1;\n       /* fall through */\n \n-    case OPT_MDX:\n+    case OPT_MD:\n       gfc_cpp_option.deps = 1;\n       gfc_cpp_option.deps_filename = arg;\n       break;"}, {"sha": "82804a4b7db87700aa6671dbbf610c47b9e75db5", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=c878765bbf32e3c3505417771f94015da69a33b8", "patch": "@@ -60,8 +60,8 @@ M\n Fortran\n ; Documented in C\n \n-MDX\n-Fortran Separate RejectDriver\n+MD\n+Fortran Separate NoArgDriver\n ; Documented in C\n \n MF\n@@ -76,8 +76,8 @@ MM\n Fortran\n ; Documented in C\n \n-MMDX\n-Fortran Separate RejectDriver\n+MMD\n+Fortran Separate NoArgDriver\n ; Documented in C\n \n MP"}, {"sha": "c2c87fe0d859bfec91b690685e51350eba3137ce", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=c878765bbf32e3c3505417771f94015da69a33b8", "patch": "@@ -767,8 +767,8 @@ static const char *trad_capable_cpp =\n    file that happens to exist is up-to-date.  */\n static const char *cpp_unique_options =\n \"%{!Q:-quiet} %{nostdinc*} %{C} %{CC} %{v} %{I*&F*} %{P} %I\\\n- %{MD:-MDX %{!o:%b.d}%{o*:%.d%*}}\\\n- %{MMD:-MMDX %{!o:%b.d}%{o*:%.d%*}}\\\n+ %{MD:-MD %{!o:%b.d}%{o*:%.d%*}}\\\n+ %{MMD:-MMD %{!o:%b.d}%{o*:%.d%*}}\\\n  %{M} %{MM} %{MF*} %{MG} %{MP} %{MQ*} %{MT*}\\\n  %{!E:%{!M:%{!MM:%{!MT:%{!MQ:%{MD|MMD:%{o*:-MQ %*}}}}}}}\\\n  %{remap} %{g3|ggdb3|gstabs3|gcoff3|gxcoff3|gvms3:-dD}\\"}, {"sha": "01a06e84f56d06caa8467c76a93ee860fa3a2a92", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=c878765bbf32e3c3505417771f94015da69a33b8", "patch": "@@ -80,6 +80,7 @@ function switch_flags (flags)\n \t  test_flag(\"Target\", flags, \" | CL_TARGET\") \\\n \t  test_flag(\"Driver\", flags, \" | CL_DRIVER\") \\\n \t  test_flag(\"RejectDriver\", flags, \" | CL_REJECT_DRIVER\") \\\n+\t  test_flag(\"NoDriverArg\", flags, \" | CL_NO_DRIVER_ARG\") \\\n \t  test_flag(\"Save\", flags, \" | CL_SAVE\") \\\n \t  test_flag(\"Joined\", flags, \" | CL_JOINED\") \\\n \t  test_flag(\"JoinedOrMissing\", flags, \" | CL_JOINED | CL_MISSING_OK\") \\"}, {"sha": "1296653ece54495342282bf1caa733d1a31110fa", "filename": "gcc/opts-common.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=c878765bbf32e3c3505417771f94015da69a33b8", "patch": "@@ -145,6 +145,8 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n   char *p;\n   const struct cl_option *option;\n   int errors = 0;\n+  bool separate_arg_flag;\n+  bool joined_arg_flag;\n \n   opt = argv[0];\n \n@@ -186,8 +188,15 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n   if (option->flags & CL_DISABLED)\n     errors |= CL_ERR_DISABLED;\n \n+  /* Determine whether there may be a separate argument based on\n+     whether this option is being processed for the driver.  */\n+  separate_arg_flag = ((option->flags & CL_SEPARATE)\n+\t\t       && !((option->flags & CL_NO_DRIVER_ARG)\n+\t\t\t    && (lang_mask & CL_DRIVER)));\n+  joined_arg_flag = (option->flags & CL_JOINED) != 0;\n+\n   /* Sort out any argument the switch takes.  */\n-  if (option->flags & CL_JOINED)\n+  if (joined_arg_flag)\n     {\n       /* Have arg point to the original switch.  This is because\n \t some code, such as disable_builtin_function, expects its\n@@ -198,7 +207,7 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n \n       if (*arg == '\\0' && !(option->flags & CL_MISSING_OK))\n \t{\n-\t  if (option->flags & CL_SEPARATE)\n+\t  if (separate_arg_flag)\n \t    {\n \t      arg = argv[1];\n \t      result = 2;\n@@ -210,7 +219,7 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n \t    arg = NULL;\n \t}\n     }\n-  else if (option->flags & CL_SEPARATE)\n+  else if (separate_arg_flag)\n     {\n       arg = argv[1];\n       result = 2;\n@@ -228,7 +237,7 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n        are specified.  */\n       errors |= CL_ERR_WRONG_LANG;\n \n-  if (arg == NULL && (option->flags & (CL_JOINED | CL_SEPARATE)))\n+  if (arg == NULL && (separate_arg_flag || joined_arg_flag))\n     errors |= CL_ERR_MISSING_ARG;\n \n   /* If the switch takes an integer, convert it.  */"}, {"sha": "4bfa7c1fb3603e2802bbe9a1a4c45881014a6b48", "filename": "gcc/opts.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878765bbf32e3c3505417771f94015da69a33b8/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=c878765bbf32e3c3505417771f94015da69a33b8", "patch": "@@ -67,12 +67,12 @@ extern const unsigned int cl_options_count;\n extern const char *const lang_names[];\n extern const unsigned int cl_lang_count;\n \n-#define CL_PARAMS               (1 << 15) /* Fake entry.  Used to display --param info with --help.  */\n-#define CL_WARNING\t\t(1 << 16) /* Enables an (optional) warning message.  */\n-#define CL_OPTIMIZATION\t\t(1 << 17) /* Enables an (optional) optimization.  */\n-#define CL_DRIVER\t\t(1 << 18) /* Driver option.  */\n-#define CL_TARGET\t\t(1 << 19) /* Target-specific option.  */\n-#define CL_COMMON\t\t(1 << 20) /* Language-independent.  */\n+#define CL_PARAMS               (1 << 14) /* Fake entry.  Used to display --param info with --help.  */\n+#define CL_WARNING\t\t(1 << 15) /* Enables an (optional) warning message.  */\n+#define CL_OPTIMIZATION\t\t(1 << 16) /* Enables an (optional) optimization.  */\n+#define CL_DRIVER\t\t(1 << 17) /* Driver option.  */\n+#define CL_TARGET\t\t(1 << 18) /* Target-specific option.  */\n+#define CL_COMMON\t\t(1 << 19) /* Language-independent.  */\n \n #define CL_MIN_OPTION_CLASS\tCL_PARAMS\n #define CL_MAX_OPTION_CLASS\tCL_COMMON\n@@ -82,6 +82,7 @@ extern const unsigned int cl_lang_count;\n    This distinction is important because --help will not list options\n    which only have these higher bits set.  */\n \n+#define CL_NO_DRIVER_ARG\t(1 << 20) /* Option takes no argument in the driver.  */\n #define CL_REJECT_DRIVER\t(1 << 21) /* Reject this option in the driver.  */\n #define CL_SAVE\t\t\t(1 << 22) /* Target-specific option for attribute.  */\n #define CL_DISABLED\t\t(1 << 23) /* Disabled in this configuration.  */"}]}