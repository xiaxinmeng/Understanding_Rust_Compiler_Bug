{"sha": "ebd5a2087cf3c7e1d2f8d005ef6a1d14c7cdc6e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJkNWEyMDg3Y2YzYzdlMWQyZjhkMDA1ZWY2YTFkMTRjN2NkYzZlMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2004-07-05T15:09:06Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-07-05T15:09:06Z"}, "message": "expr.c (expand_expr_real_1, [...]): Don't check against bounds if bounds aren't constant.\n\n\t* expr.c (expand_expr_real_1, case SWITCH_EXPR): Don't check against\n\tbounds if bounds aren't constant.\n\nFrom-SVN: r84117", "tree": {"sha": "0053914a182dbe72587756537a694ee69c19a1c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0053914a182dbe72587756537a694ee69c19a1c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebd5a2087cf3c7e1d2f8d005ef6a1d14c7cdc6e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebd5a2087cf3c7e1d2f8d005ef6a1d14c7cdc6e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebd5a2087cf3c7e1d2f8d005ef6a1d14c7cdc6e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebd5a2087cf3c7e1d2f8d005ef6a1d14c7cdc6e1/comments", "author": null, "committer": null, "parents": [{"sha": "6f70e46e0daf8965e8026ec7302afda9efc04a4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f70e46e0daf8965e8026ec7302afda9efc04a4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f70e46e0daf8965e8026ec7302afda9efc04a4d"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "a8e9522dbf814f9895bc3d9e350c4fd36e5bc313", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebd5a2087cf3c7e1d2f8d005ef6a1d14c7cdc6e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebd5a2087cf3c7e1d2f8d005ef6a1d14c7cdc6e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebd5a2087cf3c7e1d2f8d005ef6a1d14c7cdc6e1", "patch": "@@ -5,6 +5,9 @@\n \n 2004-07-05  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* expr.c (expand_expr_real_1, case SWITCH_EXPR): Don't check against\n+\tbounds if bounds aren't constant.\n+\n \t* tree-cfg.c (verify_expr): Use CHECK_OP in binary case.\n \n \t* function.c, langhooks-def.h, langhooks.h: Move max_size hook"}, {"sha": "efca348f547dcfe7f644d8e8d31b6ab9d0924552", "filename": "gcc/expr.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebd5a2087cf3c7e1d2f8d005ef6a1d14c7cdc6e1/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebd5a2087cf3c7e1d2f8d005ef6a1d14c7cdc6e1/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ebd5a2087cf3c7e1d2f8d005ef6a1d14c7cdc6e1", "patch": "@@ -9221,35 +9221,39 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t      if (case_low && case_high)\n \t\t{\n \t\t  /* Case label is less than minimum for type.  */\n-\t\t  if ((tree_int_cst_compare (case_low, min_value) < 0)\n-\t\t      && (tree_int_cst_compare (case_high, min_value) < 0))\n+\t\t  if (TREE_CODE (min_value) == INTEGER_CST\n+\t\t      && tree_int_cst_compare (case_low, min_value) < 0\n+\t\t      && tree_int_cst_compare (case_high, min_value) < 0)\n \t\t    {\n \t\t      warning (\"case label value %d is less than minimum value for type\",\n \t\t\t       TREE_INT_CST (case_low));\n \t\t      continue;\n \t\t    }\n \t\t  \n \t\t  /* Case value is greater than maximum for type.  */\n-\t\t  if ((tree_int_cst_compare (case_low, max_value) > 0)\n-\t\t      && (tree_int_cst_compare (case_high, max_value) > 0))\n+\t\t  if (TREE_CODE (max_value) == INTEGER_CST\n+\t\t      && tree_int_cst_compare (case_low, max_value) > 0\n+\t\t      && tree_int_cst_compare (case_high, max_value) > 0)\n \t\t    {\n \t\t      warning (\"case label value %d exceeds maximum value for type\",\n \t\t\t       TREE_INT_CST (case_high));\n \t\t      continue;\n \t\t    }\n \t\t  \n \t\t  /* Saturate lower case label value to minimum.  */\n-\t\t  if ((tree_int_cst_compare (case_high, min_value) >= 0)\n-\t\t      && (tree_int_cst_compare (case_low, min_value) < 0))\n+\t\t  if (TREE_CODE (min_value) == INTEGER_CST\n+\t\t      && tree_int_cst_compare (case_high, min_value) >= 0\n+\t\t      && tree_int_cst_compare (case_low, min_value) < 0)\n \t\t    {\n \t\t      warning (\"lower value %d in case label range less than minimum value for type\",\n \t\t\t       TREE_INT_CST (case_low));\n \t\t      case_low = min_value;\n \t\t    }\n \t\t  \n \t\t  /* Saturate upper case label value to maximum.  */\n-\t\t  if ((tree_int_cst_compare (case_low, max_value) <= 0)\n-\t\t      && (tree_int_cst_compare (case_high, max_value) > 0))\n+\t\t  if (TREE_CODE (max_value) == INTEGER_CST\n+\t\t      && tree_int_cst_compare (case_low, max_value) <= 0\n+\t\t      && tree_int_cst_compare (case_high, max_value) > 0)\n \t\t    {\n \t\t      warning (\"upper value %d in case label range exceeds maximum value for type\",\n \t\t\t       TREE_INT_CST (case_high));"}]}