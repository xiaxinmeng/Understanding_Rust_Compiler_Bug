{"sha": "c8af1197bae33a8770fbab304ef87b668f61978d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhhZjExOTdiYWUzM2E4NzcwZmJhYjMwNGVmODdiNjY4ZjYxOTc4ZA==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@il.ibm.com", "date": "2005-07-24T10:10:49Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2005-07-24T10:10:49Z"}, "message": "re PR tree-optimization/22526 (vectorizer produces mis-match types in conditionals)\n\n        PR tree-optimization/22526\n        * tree-vectorizer.c (slpeel_tree_peel_loop_to_edge): Match the type\n        of the zero node.\n\nFrom-SVN: r102332", "tree": {"sha": "55e4313039d93ee1a74792e5a0a86c84023cf17d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55e4313039d93ee1a74792e5a0a86c84023cf17d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8af1197bae33a8770fbab304ef87b668f61978d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8af1197bae33a8770fbab304ef87b668f61978d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8af1197bae33a8770fbab304ef87b668f61978d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8af1197bae33a8770fbab304ef87b668f61978d/comments", "author": {"login": "irar2", "id": 16818592, "node_id": "MDQ6VXNlcjE2ODE4NTky", "avatar_url": "https://avatars.githubusercontent.com/u/16818592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irar2", "html_url": "https://github.com/irar2", "followers_url": "https://api.github.com/users/irar2/followers", "following_url": "https://api.github.com/users/irar2/following{/other_user}", "gists_url": "https://api.github.com/users/irar2/gists{/gist_id}", "starred_url": "https://api.github.com/users/irar2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irar2/subscriptions", "organizations_url": "https://api.github.com/users/irar2/orgs", "repos_url": "https://api.github.com/users/irar2/repos", "events_url": "https://api.github.com/users/irar2/events{/privacy}", "received_events_url": "https://api.github.com/users/irar2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b135aa53eb59159bd29be331d083756b98329c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b135aa53eb59159bd29be331d083756b98329c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b135aa53eb59159bd29be331d083756b98329c4"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "ca336b37758ffce814fd9388233a3f671fba3fb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af1197bae33a8770fbab304ef87b668f61978d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af1197bae33a8770fbab304ef87b668f61978d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8af1197bae33a8770fbab304ef87b668f61978d", "patch": "@@ -1,3 +1,9 @@\n+2005-07-24  Ira Rosen  <irar@il.ibm.com>\n+\n+        PR tree-optimization/22526\n+        * tree-vectorizer.c (slpeel_tree_peel_loop_to_edge): Match the type\n+        of the zero node.\n+\n 2005-07-24  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \t* builtins.def: Add DEF_EXT_C99RES_BUILTIN to define builtins"}, {"sha": "af5382cd735165b955e9da8a25678f1d7deef092", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8af1197bae33a8770fbab304ef87b668f61978d/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8af1197bae33a8770fbab304ef87b668f61978d/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=c8af1197bae33a8770fbab304ef87b668f61978d", "patch": "@@ -1142,7 +1142,8 @@ slpeel_tree_peel_loop_to_edge (struct loop *loop, struct loops *loops,\n   add_bb_to_loop (bb_before_second_loop, first_loop->outer);\n \n   pre_condition =\n-    fold_build2 (LE_EXPR, boolean_type_node, first_niters, integer_zero_node);\n+    fold_build2 (LE_EXPR, boolean_type_node, first_niters, \n+                 build_int_cst (TREE_TYPE (first_niters), 0));\n   skip_e = slpeel_add_loop_guard (bb_before_first_loop, pre_condition,\n                                   bb_before_second_loop, bb_before_first_loop);\n   slpeel_update_phi_nodes_for_guard1 (skip_e, first_loop,"}]}