{"sha": "83325a9db8348c3ba5e9c871d106ee1b76d40526", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMzMjVhOWRiODM0OGMzYmE1ZTljODcxZDEwNmVlMWI3NmQ0MDUyNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-27T10:38:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-27T10:38:31Z"}, "message": "tree-ssanames: Allow non-SSA_NAME arguments to get_range_info\n\nMy recent match.pd change required quite a lot of code due to the separate\nneed to handle INTEGER_CSTs and SSA_NAMEs, and after all, I didn't even\nhandle one case there, when in x * y / y the x is INTEGER_CST and y is\nSSA_NAME.\nThe following patch allows to simplify it, by allowing non-SSA_NAME argument\nto get_range_info, for INTEGER_CSTs it will return VR_RANGE with *min == *max\nequal to the constnat, and for non-INTEGER_CST/SSA_NAMEs it will just return\nVR_VARYING.\n\nThis allows not to simplify just the match.pd, but some other spots too.\n\n2020-11-27  Jakub Jelinek  <jakub@redhat.com>\n\n\t* tree-ssanames.c (get_range_info): Handle INTEGER_CST by returning\n\tVR_RANGE with both *min and *max set to the wide_int value of the\n\tINTEGER_CST.  Return VR_VARYING for non-SSA_NAMEs.\n\t* match.pd ((t * 2) / 2) -> t): Handle also @0 being INTEGER_CST.\n\tSimplify by calling get_range_info on everything.\n\t* tree-ssa-strlen.c (maybe_diag_stxncpy_trunc): Simplify by calling\n\tget_range_info on everything.\n\t* tree-scalar-evolution.c (iv_can_overflow_p): Likewise.", "tree": {"sha": "d9cb52e1652545a0940f7fa917380bd0059e2734", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9cb52e1652545a0940f7fa917380bd0059e2734"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83325a9db8348c3ba5e9c871d106ee1b76d40526", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83325a9db8348c3ba5e9c871d106ee1b76d40526", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83325a9db8348c3ba5e9c871d106ee1b76d40526", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83325a9db8348c3ba5e9c871d106ee1b76d40526/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf0a63a1f47525d1c466dbb84616dcb72010affa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf0a63a1f47525d1c466dbb84616dcb72010affa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf0a63a1f47525d1c466dbb84616dcb72010affa"}], "stats": {"total": 132, "additions": 56, "deletions": 76}, "files": [{"sha": "1726c186daabf59af49fd177b0f32f2e1d256d68", "filename": "gcc/match.pd", "status": "modified", "additions": 24, "deletions": 36, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83325a9db8348c3ba5e9c871d106ee1b76d40526/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83325a9db8348c3ba5e9c871d106ee1b76d40526/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=83325a9db8348c3ba5e9c871d106ee1b76d40526", "patch": "@@ -654,42 +654,30 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (if (TYPE_OVERFLOW_UNDEFINED (type))\n     @0\n #if GIMPLE\n-    (if (TREE_CODE (@0) == SSA_NAME\n-\t && (TREE_CODE (@1) == SSA_NAME || TREE_CODE (@1) == INTEGER_CST))\n-     (with\n-      {\n-\tbool overflowed = true;\n-\twide_int wmin0, wmax0;\n-\tif (get_range_info (@0, &wmin0, &wmax0) == VR_RANGE)\n-\t  {\n-\t    /* If the multiplication can't overflow/wrap around, then\n-\t       it can be optimized too.  */\n-\t    wide_int wmin1, wmax1;\n-\t    wi::overflow_type min_ovf, max_ovf;\n-\t    if (TREE_CODE (@1) == INTEGER_CST)\n-\t      {\n-\t\twmin1 = wi::to_wide (@1);\n-\t\twi::mul (wmin0, wmin1, TYPE_SIGN (type), &min_ovf);\n-\t\twi::mul (wmax0, wmin1, TYPE_SIGN (type), &max_ovf);\n-\t\tif (min_ovf == wi::OVF_NONE && max_ovf == wi::OVF_NONE)\n-\t\t  overflowed = false;\n-\t      }\n-\t    else if (get_range_info (@1, &wmin1, &wmax1) == VR_RANGE)\n-\t      {\n-\t\twi::mul (wmin0, wmin1, TYPE_SIGN (type), &min_ovf);\n-\t\twi::mul (wmax0, wmax1, TYPE_SIGN (type), &max_ovf);\n-\t\tif (min_ovf == wi::OVF_NONE && max_ovf == wi::OVF_NONE)\n-\t\t  {\n-\t\t    wi::mul (wmin0, wmax1, TYPE_SIGN (type), &min_ovf);\n-\t\t    wi::mul (wmax0, wmin1, TYPE_SIGN (type), &max_ovf);\n-\t\t    if (min_ovf == wi::OVF_NONE && max_ovf == wi::OVF_NONE)\n-\t\t      overflowed = false;\n-\t\t  }\n-\t      }\n-\t  }\n-      }\n-     (if (!overflowed)\n-      @0)))\n+    (with\n+     {\n+       bool overflowed = true;\n+       wide_int wmin0, wmax0, wmin1, wmax1;\n+       if (INTEGRAL_TYPE_P (type)\n+\t   && get_range_info (@0, &wmin0, &wmax0) == VR_RANGE\n+\t   && get_range_info (@1, &wmin1, &wmax1) == VR_RANGE)\n+\t {\n+\t   /* If the multiplication can't overflow/wrap around, then\n+\t      it can be optimized too.  */\n+\t   wi::overflow_type min_ovf, max_ovf;\n+\t   wi::mul (wmin0, wmin1, TYPE_SIGN (type), &min_ovf);\n+\t   wi::mul (wmax0, wmax1, TYPE_SIGN (type), &max_ovf);\n+\t   if (min_ovf == wi::OVF_NONE && max_ovf == wi::OVF_NONE)\n+\t     {\n+\t       wi::mul (wmin0, wmax1, TYPE_SIGN (type), &min_ovf);\n+\t       wi::mul (wmax0, wmin1, TYPE_SIGN (type), &max_ovf);\n+\t       if (min_ovf == wi::OVF_NONE && max_ovf == wi::OVF_NONE)\n+\t\t overflowed = false;\n+\t     }\n+\t }\n+     }\n+    (if (!overflowed)\n+     @0))\n #endif\n    ))))\n "}, {"sha": "2c7923d742b3d8ddce0e0da74d3b6d726817135c", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83325a9db8348c3ba5e9c871d106ee1b76d40526/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83325a9db8348c3ba5e9c871d106ee1b76d40526/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=83325a9db8348c3ba5e9c871d106ee1b76d40526", "patch": "@@ -3043,22 +3043,12 @@ iv_can_overflow_p (class loop *loop, tree type, tree base, tree step)\n   if (integer_zerop (step))\n     return false;\n \n-  if (TREE_CODE (base) == INTEGER_CST)\n-    base_min = base_max = wi::to_wide (base);\n-  else if (TREE_CODE (base) == SSA_NAME\n-\t   && INTEGRAL_TYPE_P (TREE_TYPE (base))\n-\t   && get_range_info (base, &base_min, &base_max) == VR_RANGE)\n-    ;\n-  else\n+  if (!INTEGRAL_TYPE_P (TREE_TYPE (base))\n+      || get_range_info (base, &base_min, &base_max) != VR_RANGE)\n     return true;\n \n-  if (TREE_CODE (step) == INTEGER_CST)\n-    step_min = step_max = wi::to_wide (step);\n-  else if (TREE_CODE (step) == SSA_NAME\n-\t   && INTEGRAL_TYPE_P (TREE_TYPE (step))\n-\t   && get_range_info (step, &step_min, &step_max) == VR_RANGE)\n-    ;\n-  else\n+  if (!INTEGRAL_TYPE_P (TREE_TYPE (step))\n+      || get_range_info (step, &step_min, &step_max) != VR_RANGE)\n     return true;\n \n   if (!get_max_loop_iterations (loop, &nit))"}, {"sha": "f365c2d0c4543a17570229da47ad4639016cdb4c", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83325a9db8348c3ba5e9c871d106ee1b76d40526/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83325a9db8348c3ba5e9c871d106ee1b76d40526/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=83325a9db8348c3ba5e9c871d106ee1b76d40526", "patch": "@@ -3038,31 +3038,24 @@ maybe_diag_stxncpy_trunc (gimple_stmt_iterator gsi, tree src, tree cnt)\n \n   wide_int cntrange[2];\n \n-  if (TREE_CODE (cnt) == INTEGER_CST)\n-    cntrange[0] = cntrange[1] = wi::to_wide (cnt);\n-  else if (TREE_CODE (cnt) == SSA_NAME)\n+  // FIXME: Use range_query instead of global ranges.\n+  enum value_range_kind rng = get_range_info (cnt, cntrange, cntrange + 1);\n+  if (rng == VR_RANGE)\n+    ;\n+  else if (rng == VR_ANTI_RANGE)\n     {\n-      // FIXME: Use range_query instead of global ranges.\n-      enum value_range_kind rng = get_range_info (cnt, cntrange, cntrange + 1);\n-      if (rng == VR_RANGE)\n-\t;\n-      else if (rng == VR_ANTI_RANGE)\n-\t{\n-\t  wide_int maxobjsize = wi::to_wide (TYPE_MAX_VALUE (ptrdiff_type_node));\n+      wide_int maxobjsize = wi::to_wide (TYPE_MAX_VALUE (ptrdiff_type_node));\n \n-\t  if (wi::ltu_p (cntrange[1], maxobjsize))\n-\t    {\n-\t      cntrange[0] = cntrange[1] + 1;\n-\t      cntrange[1] = maxobjsize;\n-\t    }\n-\t  else\n-\t    {\n-\t      cntrange[1] = cntrange[0] - 1;\n-\t      cntrange[0] = wi::zero (TYPE_PRECISION (TREE_TYPE (cnt)));\n-\t    }\n+      if (wi::ltu_p (cntrange[1], maxobjsize))\n+\t{\n+\t  cntrange[0] = cntrange[1] + 1;\n+\t  cntrange[1] = maxobjsize;\n \t}\n       else\n-\treturn false;\n+\t{\n+\t  cntrange[1] = cntrange[0] - 1;\n+\t  cntrange[0] = wi::zero (TYPE_PRECISION (TREE_TYPE (cnt)));\n+\t}\n     }\n   else\n     return false;"}, {"sha": "1b9dcececb40d2cd9f2aa9e40a89dd03abe99e3d", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83325a9db8348c3ba5e9c871d106ee1b76d40526/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83325a9db8348c3ba5e9c871d106ee1b76d40526/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=83325a9db8348c3ba5e9c871d106ee1b76d40526", "patch": "@@ -420,21 +420,30 @@ set_range_info (tree name, const value_range &vr)\n    is used to determine if MIN and MAX are valid values.  */\n \n enum value_range_kind\n-get_range_info (const_tree name, wide_int *min, wide_int *max)\n+get_range_info (const_tree expr, wide_int *min, wide_int *max)\n {\n-  gcc_assert (!POINTER_TYPE_P (TREE_TYPE (name)));\n+  gcc_assert (!POINTER_TYPE_P (TREE_TYPE (expr)));\n   gcc_assert (min && max);\n-  range_info_def *ri = SSA_NAME_RANGE_INFO (name);\n+  if (TREE_CODE (expr) == INTEGER_CST)\n+    {\n+      *min = wi::to_wide (expr);\n+      *max = *min;\n+      return VR_RANGE;\n+    }\n+  if (TREE_CODE (expr) != SSA_NAME)\n+    return VR_VARYING;\n+\n+  range_info_def *ri = SSA_NAME_RANGE_INFO (expr);\n \n   /* Return VR_VARYING for SSA_NAMEs with NULL RANGE_INFO or SSA_NAMEs\n      with integral types width > 2 * HOST_BITS_PER_WIDE_INT precision.  */\n-  if (!ri || (GET_MODE_PRECISION (SCALAR_INT_TYPE_MODE (TREE_TYPE (name)))\n+  if (!ri || (GET_MODE_PRECISION (SCALAR_INT_TYPE_MODE (TREE_TYPE (expr)))\n \t      > 2 * HOST_BITS_PER_WIDE_INT))\n     return VR_VARYING;\n \n   *min = ri->get_min ();\n   *max = ri->get_max ();\n-  return SSA_NAME_RANGE_TYPE (name);\n+  return SSA_NAME_RANGE_TYPE (expr);\n }\n \n /* Gets range information corresponding to ssa_name NAME and stores it"}]}