{"sha": "1759c760db915101087a28efb4329fa6490eaef8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc1OWM3NjBkYjkxNTEwMTA4N2EyOGVmYjQzMjlmYTY0OTBlYWVmOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2004-01-11T19:05:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2004-01-11T19:05:34Z"}, "message": "re PR middle-end/13392 (ICE in convert_from_eh_region_ranges_1, at except.c:1133)\n\n\tPR middle-end/13392\n\t* builtins.c (expand_builtin_expect_jump): Handle conditional jumps\n\tto drop through label.  Don't fall back to SCC even when conditional\n\tjump has not been found.\n\n\t* g++.dg/opt/expect2.C: New test.\n\nFrom-SVN: r75684", "tree": {"sha": "f8df1ff5a1cf6f5e7d38cc52a45a081d1bab8229", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8df1ff5a1cf6f5e7d38cc52a45a081d1bab8229"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1759c760db915101087a28efb4329fa6490eaef8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1759c760db915101087a28efb4329fa6490eaef8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1759c760db915101087a28efb4329fa6490eaef8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1759c760db915101087a28efb4329fa6490eaef8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b74a685105cac1e0f92628a8f8db16dbc84619b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74a685105cac1e0f92628a8f8db16dbc84619b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b74a685105cac1e0f92628a8f8db16dbc84619b2"}], "stats": {"total": 69, "additions": 34, "deletions": 35}, "files": [{"sha": "1904cf6f230b699969575664807af6502faacaaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1759c760db915101087a28efb4329fa6490eaef8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1759c760db915101087a28efb4329fa6490eaef8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1759c760db915101087a28efb4329fa6490eaef8", "patch": "@@ -1,3 +1,10 @@\n+2004-01-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/13392\n+\t* builtins.c (expand_builtin_expect_jump): Handle conditional jumps\n+\tto drop through label.  Don't fall back to SCC even when conditional\n+\tjump has not been found.\n+\n 2004-01-11  Jan Hubicka  <jh@suse.cz>\n \n \t* invoke.texi: Fix syntax error in previous patch."}, {"sha": "10c753b82106f9a7f537c1abe54c02f531d4cf4b", "filename": "gcc/builtins.c", "status": "modified", "additions": 11, "deletions": 35, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1759c760db915101087a28efb4329fa6490eaef8/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1759c760db915101087a28efb4329fa6490eaef8/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=1759c760db915101087a28efb4329fa6490eaef8", "patch": "@@ -4441,39 +4441,24 @@ expand_builtin_expect_jump (tree exp, rtx if_false_label, rtx if_true_label)\n   if (TREE_CODE (TREE_TYPE (arg1)) == INTEGER_TYPE\n       && (integer_zerop (arg1) || integer_onep (arg1)))\n     {\n-      int num_jumps = 0;\n-      int save_pending_stack_adjust = pending_stack_adjust;\n-      rtx insn;\n-\n-      /* If we fail to locate an appropriate conditional jump, we'll\n-\t fall back to normal evaluation.  Ensure that the expression\n-\t can be re-evaluated.  */\n-      switch (unsafe_for_reeval (arg0))\n-\t{\n-\tcase 0: /* Safe.  */\n-\t  break;\n-\n-\tcase 1: /* Mildly unsafe.  */\n-\t  arg0 = unsave_expr (arg0);\n-\t  break;\n-\n-\tcase 2: /* Wildly unsafe.  */\n-\t  return NULL_RTX;\n-\t}\n+      rtx insn, drop_through_label;\n \n       /* Expand the jump insns.  */\n       start_sequence ();\n       do_jump (arg0, if_false_label, if_true_label);\n       ret = get_insns ();\n+\n+      drop_through_label = get_last_insn ();\n+      if (drop_through_label && GET_CODE (drop_through_label) == NOTE)\n+\tdrop_through_label = prev_nonnote_insn (drop_through_label);\n+      if (drop_through_label && GET_CODE (drop_through_label) != CODE_LABEL)\n+\tdrop_through_label = NULL_RTX;\n       end_sequence ();\n \n-      /* For mildly unsafe builtin jump's, if unsave_expr_now\n-\t creates a new tree instead of changing the old one\n-\t TREE_VALUE (arglist) needs to be updated.  */\n-      if (arg0 != TREE_VALUE (arglist)\n-\t  && TREE_CODE (arg0) == UNSAVE_EXPR\n-\t  && TREE_OPERAND (arg0, 0) != TREE_VALUE (arglist))\n-\tTREE_VALUE (arglist) = TREE_OPERAND (arg0, 0);\n+      if (! if_true_label)\n+\tif_true_label = drop_through_label;\n+      if (! if_false_label)\n+\tif_false_label = drop_through_label;\n \n       /* Now that the __builtin_expect has been validated, go through and add\n \t the expect's to each of the conditional jumps.  If we run into an\n@@ -4531,21 +4516,12 @@ expand_builtin_expect_jump (tree exp, rtx if_false_label, rtx if_true_label)\n \t      else if (label != if_true_label)\n \t\tgoto do_next_insn;\n \n-\t      num_jumps++;\n \t      predict_insn_def (insn, PRED_BUILTIN_EXPECT, taken);\n \t    }\n \n \tdo_next_insn:\n \t  insn = next;\n \t}\n-\n-      /* If no jumps were modified, fail and do __builtin_expect the normal\n-\t way.  */\n-      if (num_jumps == 0)\n-\t{\n-\t  ret = NULL_RTX;\n-\t  pending_stack_adjust = save_pending_stack_adjust;\n-\t}\n     }\n \n   return ret;"}, {"sha": "4aa8241db6343a82edbf751a1193e850dc7c3c8b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1759c760db915101087a28efb4329fa6490eaef8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1759c760db915101087a28efb4329fa6490eaef8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1759c760db915101087a28efb4329fa6490eaef8", "patch": "@@ -1,3 +1,8 @@\n+2004-01-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/13392\n+\t* g++.dg/opt/expect2.C: New test.\n+\n 2004-01-10  Zack Weinberg  <zack@codesourcery.com>\n \n \t* gcc.dg/Wshadow-1.c, gcc.dg/attr-noinline.c, gcc.dg/decl3.c"}, {"sha": "1bb5d8331f089aaf6d47dc1f77e4db509ee7654d", "filename": "gcc/testsuite/g++.dg/opt/expect2.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1759c760db915101087a28efb4329fa6490eaef8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fexpect2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1759c760db915101087a28efb4329fa6490eaef8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fexpect2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fexpect2.C?ref=1759c760db915101087a28efb4329fa6490eaef8", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/13392\n+// { dg-do compile }\n+// { dg-options \"-O0\" }\n+\n+extern \"C\" void abort (void);\n+struct X { ~X () throw() {} };\n+bool foo (X s = X ()) { return false; }\n+void bar ()\n+{\n+  __builtin_expect (foo () && true, 1) ? 0 : (abort (), 0);\n+}"}]}