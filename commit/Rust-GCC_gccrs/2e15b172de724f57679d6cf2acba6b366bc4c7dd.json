{"sha": "2e15b172de724f57679d6cf2acba6b366bc4c7dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUxNWIxNzJkZTcyNGY1NzY3OWQ2Y2YyYWNiYTZiMzY2YmM0YzdkZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-13T13:34:34Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-13T13:34:34Z"}, "message": "Add OVERFLOW operand to CHECK_FLOAT_VALUE.\n\nFrom-SVN: r6770", "tree": {"sha": "05c3b0be279a8809c40e15d47e4422915783d3f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05c3b0be279a8809c40e15d47e4422915783d3f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e15b172de724f57679d6cf2acba6b366bc4c7dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e15b172de724f57679d6cf2acba6b366bc4c7dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e15b172de724f57679d6cf2acba6b366bc4c7dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e15b172de724f57679d6cf2acba6b366bc4c7dd/comments", "author": null, "committer": null, "parents": [{"sha": "c05f751c24182e733cb986b7660ec1223be52428", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05f751c24182e733cb986b7660ec1223be52428", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c05f751c24182e733cb986b7660ec1223be52428"}], "stats": {"total": 111, "additions": 64, "deletions": 47}, "files": [{"sha": "ce1b7561f71ed642fbeea306bb74beb17d769343", "filename": "gcc/config/convex/convex.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e15b172de724f57679d6cf2acba6b366bc4c7dd/gcc%2Fconfig%2Fconvex%2Fconvex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e15b172de724f57679d6cf2acba6b366bc4c7dd/gcc%2Fconfig%2Fconvex%2Fconvex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.c?ref=2e15b172de724f57679d6cf2acba6b366bc4c7dd", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Convex.\n-   Copyright (C) 1988, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1993, 1994 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -413,31 +413,40 @@ expand_movstr_call (operands)\n #define MIN_FLOAT 2.9387358770557188e-39\n #endif\n \n-void\n-check_float_value (mode, dp)\n+int\n+check_float_value (mode, dp, overflow)\n      enum machine_mode mode;\n      REAL_VALUE_TYPE *dp;\n+     int overflow;\n {\n   REAL_VALUE_TYPE d = *dp;\n \n+  if (overflow)\n+    {\n+      *dp = MAX_FLOAT;\n+      return 1;\n+    }\n+\n   if (mode == SFmode)\n     {\n       if (d > MAX_FLOAT)\n \t{\n-\t  error (\"magnitude of constant too large for `float'\");\n \t  *dp = MAX_FLOAT;\n+\t  return 1;\n \t}\n       else if (d < -MAX_FLOAT)\n \t{\n-\t  error (\"magnitude of constant too large for `float'\");\n \t  *dp = -MAX_FLOAT;\n+\t  return 1;\n \t}\t\n       else if ((d > 0 && d < MIN_FLOAT) || (d < 0 && d > -MIN_FLOAT))\n \t{\n-\t  warning (\"`float' constant truncated to zero\");\n \t  *dp = 0.0;\n+\t  return 1;\n \t}\n     }\n+\n+  return 0;\n }\n \f\n /* Output the label at the start of a function."}, {"sha": "af1a0f5213c7b7dd80be4a36cfa5f11ca5f49927", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e15b172de724f57679d6cf2acba6b366bc4c7dd/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e15b172de724f57679d6cf2acba6b366bc4c7dd/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=2e15b172de724f57679d6cf2acba6b366bc4c7dd", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Convex version.\n-   Copyright (C) 1988, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1993, 1994 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1180,8 +1180,8 @@ enum reg_class {\n extern double atof();\n \n /* Check a `double' value for validity for a particular machine mode.  */\n-#define CHECK_FLOAT_VALUE(mode, d) \\\n-    check_float_value ((mode), &(d))\n+#define CHECK_FLOAT_VALUE(MODE, D, OVERFLOW) \\\n+   overflow = check_float_value (MODE, &D, OVERFLOW)\n \f\n /* Tell final.c how to eliminate redundant test instructions.  */\n "}, {"sha": "d8c1bce1b923db44635e4674b4df53b278a6bf6e", "filename": "gcc/config/fx80/fx80.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e15b172de724f57679d6cf2acba6b366bc4c7dd/gcc%2Fconfig%2Ffx80%2Ffx80.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e15b172de724f57679d6cf2acba6b366bc4c7dd/gcc%2Fconfig%2Ffx80%2Ffx80.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffx80%2Ffx80.h?ref=2e15b172de724f57679d6cf2acba6b366bc4c7dd", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Alliant FX version.\n-   Copyright (C) 1989, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 1993, 1994 Free Software Foundation, Inc.\n    Adapted from m68k.h by Paul Petersen (petersen@uicsrd.csrd.uiuc.edu)\n    and Joe Weening (weening@gang-of-four.stanford.edu).\n \n@@ -887,19 +887,19 @@ extern enum reg_class regno_reg_class[];\n /* Check a `double' value for validity for a particular machine mode.\n    This is defined to avoid crashes outputting certain constants.  */\n \n-#define CHECK_FLOAT_VALUE(mode, d)\t\t\t\t\t\\\n-  if ((mode) == SFmode)\t\t\t\t\t\t\t\\\n+#define CHECK_FLOAT_VALUE(MODE, D, OVERFLOW)\t\t\t\t\\\n+  if (OVERFLOW)\t\t\t\t\t\t\t\t\\\n+    (D) = 3.4028234663852890e+38;\t\t\t\t\t\\\n+  else if ((MODE) == SFmode)\t\t\t\t\t\t\\\n     { \t\t\t\t\t\t\t\t\t\\\n       if ((d) > 3.4028234663852890e+38)\t\t\t\t\t\\\n-\t{ warning (\"magnitude of value too large for `float'\");\t\t\\\n-\t  (d) = 3.4028234663852890e+38; }\t\t\t\t\\\n-      else if ((d) < -3.4028234663852890e+38)\t\t\t\t\\\n-\t{ warning (\"magnitude of value too large for `float'\");\t\t\\\n-\t  (d) = -3.4028234663852890e+38; }\t\t\t\t\\\n-      else if (((d) > 0) && ((d) < 1.1754943508222873e-38))\t\t\\\n-\t(d) = 0.0;\t\t\t\t\t\t\t\\\n+\t(OVERFLOW) = 1, (D) = 3.4028234663852890e+38;\t\t\t\\\n+      else if ((D) < -3.4028234663852890e+38)\t\t\t\t\\\n+\t(OVERFLOW) = 1, (D) = -3.4028234663852890e+38;\t\t\t\\\n+      else if (((D) > 0) && ((D) < 1.1754943508222873e-38))\t\t\\\n+\t(OVERFLOW) = 1, (D) = 0.0;\t\t\t\t\t\\\n       else if (((d) < 0) && ((d) > -1.1754943508222873e-38))\t\t\\\n-\t(d) = 0.0;\t\t\t\t\t\t\t\\\n+\t(OVEFLOW) = 1, (D) = 0.0;\t\t\t\t\t\\\n     }\n \f\n /* Tell final.c how to eliminate redundant test instructions.  */"}, {"sha": "4e42c220edd21cacf3c188f2a48fed4d42b4b960", "filename": "gcc/config/tahoe/tahoe.h", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e15b172de724f57679d6cf2acba6b366bc4c7dd/gcc%2Fconfig%2Ftahoe%2Ftahoe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e15b172de724f57679d6cf2acba6b366bc4c7dd/gcc%2Fconfig%2Ftahoe%2Ftahoe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftahoe%2Ftahoe.h?ref=2e15b172de724f57679d6cf2acba6b366bc4c7dd", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Tahoe version.\n-   Copyright (C) 1989, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 1993, 1994 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -135,21 +135,19 @@ extern int target_flags;\n /* this section is borrowed from the vax version since the */\n /* formats are the same in both of the architectures\t   */\n \n-#define CHECK_FLOAT_VALUE(mode, d) \\\n-  if ((mode) == SFmode) \\\n-    { \\\n-      if ((d) > 1.7014117331926443e+38) \\\n-\t{ error (\"magnitude of constant too large for `float'\"); \\\n-\t  (d) = 1.7014117331926443e+38; } \\\n-      else if ((d) < -1.7014117331926443e+38) \\\n-\t{ error (\"magnitude of constant too large for `float'\"); \\\n-\t  (d) = -1.7014117331926443e+38; } \\\n-      else if (((d) > 0) && ((d) < 2.9387358770557188e-39)) \\\n-\t{ warning (\"`float' constant truncated to zero\"); \\\n-\t  (d) = 0.0; } \\\n-      else if (((d) < 0) && ((d) > -2.9387358770557188e-39)) \\\n-\t{ warning (\"`float' constant truncated to zero\"); \\\n-\t  (d) = 0.0; } \\\n+#define CHECK_FLOAT_VALUE(MODE, D, OVEFLOW) \\\n+  if (OVERFLOW)\t\t\t\t\t\t\t\t\\\n+    (D) = 1.7014117331926443e+38;\t\t\t\t\t\\\n+  else if ((MODE) == SFmode)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if ((D) > 1.7014117331926443e+38)\t\t\t\t\t\\\n+\t(OVERFLOW) = 1, (D) = 1.7014117331926443e+38;\t\t\t\\\n+      else if ((D) < -1.7014117331926443e+38)\t\t\t\t\\\n+\t(OVERFLOW) = 1, (D) = -1.7014117331926443e+38;\t\t\t\\\n+      else if (((D) > 0) && ((D) < 2.9387358770557188e-39))\t\t\\\n+\t(OVERFLOW) = 1, (D) = 0.0;\t\t\t\t\t\\\n+      else if (((D) < 0) && ((D) > -2.9387358770557188e-39))\t\t\\\n+\t(OVERFLOW) = 1, (D) = 0.0;\t\t\t\t\t\\\n     }\n \n "}, {"sha": "4174477c99a0545b1378857c069342e723cac6a3", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e15b172de724f57679d6cf2acba6b366bc4c7dd/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e15b172de724f57679d6cf2acba6b366bc4c7dd/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=2e15b172de724f57679d6cf2acba6b366bc4c7dd", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Vax.\n-   Copyright (C) 1987 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1994 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -593,20 +593,27 @@ static REAL_VALUE_TYPE float_values[4];\n static int inited_float_values = 0;\n \n \n-void\n-check_float_value (mode, d)\n+int\n+check_float_value (mode, d, overflow)\n      enum machine_mode mode;\n      REAL_VALUE_TYPE *d;\n+     int overflow;\n {\n-\n   if (inited_float_values == 0)\n     {\n       int i;\n       for (i = 0; i < 4; i++)\n \t{\n \t  float_values[i] = REAL_VALUE_ATOF (float_strings[i], DFmode);\n \t}\n-    inited_float_values = 1;\n+\n+      inited_float_values = 1;\n+    }\n+\n+  if (overflow)\n+    {\n+      bcopy (&float_values[0], d, sizeof (REAL_VALUE_TYPE));\n+      return 1;\n     }\n \n   if ((mode) == SFmode)\n@@ -615,27 +622,29 @@ check_float_value (mode, d)\n       bcopy (d, &r, sizeof (REAL_VALUE_TYPE));\n       if (REAL_VALUES_LESS (float_values[0], r))\n \t{\n-\t  error (\"magnitude of constant too large for `float'\");\n \t  bcopy (&float_values[0], d, sizeof (REAL_VALUE_TYPE));\n+\t  return 1;\n \t}\n       else if (REAL_VALUES_LESS (r, float_values[1]))\n \t{\n-\t  error (\"magnitude of constant too large for `float'\");\n \t  bcopy (&float_values[1], d, sizeof (REAL_VALUE_TYPE));\n+\t  return 1;\n \t}\n       else if (REAL_VALUES_LESS (dconst0, r)\n \t\t&& REAL_VALUES_LESS (r, float_values[2]))\n \t{\n-\t  warning (\"`float' constant truncated to zero\");\n \t  bcopy (&dconst0, d, sizeof (REAL_VALUE_TYPE));\n+\t  return 1;\n \t}\n       else if (REAL_VALUES_LESS (r, dconst0)\n \t\t&& REAL_VALUES_LESS (float_values[3], r))\n \t{\n-\t  warning (\"`float' constant truncated to zero\");\n \t  bcopy (&dconst0, d, sizeof (REAL_VALUE_TYPE));\n+\t  return 1;\n \t}\n     }\n+\n+  return 0;\n }\n \f\n /* Linked list of all externals that are to be emitted when optimizing"}, {"sha": "fce5b69e92daf520ca4643be905e2b605fe94188", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e15b172de724f57679d6cf2acba6b366bc4c7dd/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e15b172de724f57679d6cf2acba6b366bc4c7dd/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=2e15b172de724f57679d6cf2acba6b366bc4c7dd", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Vax version.\n-   Copyright (C) 1987, 1988, 1991, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1988, 1991, 1993, 1994 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -912,7 +912,8 @@ gen_rtx (PLUS, Pmode, frame, gen_rtx (CONST_INT, VOIDmode, 12))\n /* note that it is very hard to accidentally create a number that fits in a\n    double but not in a float, since their ranges are almost the same */\n \n-#define CHECK_FLOAT_VALUE(mode, d) (check_float_value (mode, &d))\n+#define CHECK_FLOAT_VALUE(MODE, D, OVERFLOW)\n+  ((OVERFLOW) = check_float_value (MODE, &D, OVERFLOW))\n \n /* For future reference:\n    D Float: 9 bit, sign magnitude, excess 128 binary exponent"}]}