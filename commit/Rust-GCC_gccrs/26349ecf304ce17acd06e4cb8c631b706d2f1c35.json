{"sha": "26349ecf304ce17acd06e4cb8c631b706d2f1c35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYzNDllY2YzMDRjZTE3YWNkMDZlNGNiOGM2MzFiNzA2ZDJmMWMzNQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2017-02-07T21:28:08Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2017-02-07T21:28:08Z"}, "message": "trans-types.c (gfc_get_int_kind_from_width_isofortranen): Choose REAL type with the widest precision if...\n\n2017-02-04  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\t* trans-types.c\t(gfc_get_int_kind_from_width_isofortranen):  Choose\n\tREAL type with the widest precision if two (or more) have the same\n\tstorage size.\n\nFrom-SVN: r245255", "tree": {"sha": "c2fad090dcb3b8787bc1b5d56c39255ede69d8ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2fad090dcb3b8787bc1b5d56c39255ede69d8ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26349ecf304ce17acd06e4cb8c631b706d2f1c35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26349ecf304ce17acd06e4cb8c631b706d2f1c35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26349ecf304ce17acd06e4cb8c631b706d2f1c35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26349ecf304ce17acd06e4cb8c631b706d2f1c35/comments", "author": null, "committer": null, "parents": [{"sha": "2ad31830bf2ede2def722037cd467d124f012086", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ad31830bf2ede2def722037cd467d124f012086", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ad31830bf2ede2def722037cd467d124f012086"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "0b3279667dd11e8384ca2bdccea00e1c5ee860de", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349ecf304ce17acd06e4cb8c631b706d2f1c35/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349ecf304ce17acd06e4cb8c631b706d2f1c35/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=26349ecf304ce17acd06e4cb8c631b706d2f1c35", "patch": "@@ -1,3 +1,9 @@\n+2017-02-07  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\t* trans-types.c\t(gfc_get_int_kind_from_width_isofortranen):  Choose\n+\tREAL type with the widest precision if two (or more) have the same\n+\tstorage size.\n+\n 2017-02-05  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/79344"}, {"sha": "fc5e486379f9bf067c85f6e0dcb32e47ba792077", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349ecf304ce17acd06e4cb8c631b706d2f1c35/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349ecf304ce17acd06e4cb8c631b706d2f1c35/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=26349ecf304ce17acd06e4cb8c631b706d2f1c35", "patch": "@@ -234,27 +234,42 @@ gfc_get_int_kind_from_width_isofortranenv (int size)\n   return -1;\n }\n \n-/* Get the kind number corresponding to a real of given storage size,\n-   following the required return values for ISO_FORTRAN_ENV REAL* constants:\n-   -2 is returned if we support a kind of larger size, -1 otherwise.  */\n+\n+/* Get the kind number corresponding to a real of a given storage size.\n+   If two real's have the same storage size, then choose the real with\n+   the largest precision.  If a kind type is unavailable and a real\n+   exists with wider storage, then return -2; otherwise, return -1.  */\n+\n int\n gfc_get_real_kind_from_width_isofortranenv (int size)\n {\n-  int i;\n+  int digits, i, kind;\n \n   size /= 8;\n \n+  kind = -1;\n+  digits = 0;\n+\n   /* Look for a kind with matching storage size.  */\n   for (i = 0; gfc_real_kinds[i].kind != 0; i++)\n     if (int_size_in_bytes (gfc_get_real_type (gfc_real_kinds[i].kind)) == size)\n-      return gfc_real_kinds[i].kind;\n+      {\n+\tif (gfc_real_kinds[i].digits > digits)\n+\t  {\n+\t    digits = gfc_real_kinds[i].digits;\n+\t    kind = gfc_real_kinds[i].kind;\n+\t  }\n+      }\n+\n+  if (kind != -1)\n+    return kind;\n \n   /* Look for a kind with larger storage size.  */\n   for (i = 0; gfc_real_kinds[i].kind != 0; i++)\n     if (int_size_in_bytes (gfc_get_real_type (gfc_real_kinds[i].kind)) > size)\n-      return -2;\n+      kind = -2;\n \n-  return -1;\n+  return kind;\n }\n \n "}]}