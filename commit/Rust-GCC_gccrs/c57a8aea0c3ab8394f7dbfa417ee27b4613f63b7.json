{"sha": "c57a8aea0c3ab8394f7dbfa417ee27b4613f63b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU3YThhZWEwYzNhYjgzOTRmN2RiZmE0MTdlZTI3YjQ2MTNmNjNiNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-29T06:32:00Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-29T08:02:59Z"}, "message": "middle-end/38474 - speedup PTA constraint solving\n\nIn testcases like PR38474 and PR99912 we're seeing very slow\nPTA solving.  One can observe an excessive amount of forwarding,\nmostly during sd constraint solving.  The way we solve the graph\ndoes not avoid forwarding the same bits through multiple paths,\nand especially when such alternate path involves ESCAPED as\nintermediate this causes the ESCAPED solution to be expanded\nin receivers.\n\nThe following adds heuristic to add_graph_edge which adds\nforwarding edges but also guards the initial solution forwarding\n(which is the expensive part) to detect the case of ESCAPED\nreceiving the same set and the destination already containing\nESCAPED.\n\nThis speeds up the PTA solving process by more than 50%.\n\n2021-04-29  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/38474\n\t* tree-ssa-structalias.c (add_graph_edge): Avoid direct\n\tforwarding when indirect forwarding through ESCAPED\n\talread happens.", "tree": {"sha": "4d498411bb34de7ba9c037734e507cabab92b093", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d498411bb34de7ba9c037734e507cabab92b093"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c57a8aea0c3ab8394f7dbfa417ee27b4613f63b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c57a8aea0c3ab8394f7dbfa417ee27b4613f63b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c57a8aea0c3ab8394f7dbfa417ee27b4613f63b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c57a8aea0c3ab8394f7dbfa417ee27b4613f63b7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e8ee0a364ac7dc9959b1caac7d7145afedd1eaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e8ee0a364ac7dc9959b1caac7d7145afedd1eaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e8ee0a364ac7dc9959b1caac7d7145afedd1eaa"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "a0238710e7215ac0b36945b6cfa90fe850ffc9e5", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c57a8aea0c3ab8394f7dbfa417ee27b4613f63b7/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c57a8aea0c3ab8394f7dbfa417ee27b4613f63b7/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=c57a8aea0c3ab8394f7dbfa417ee27b4613f63b7", "patch": "@@ -1195,6 +1195,22 @@ add_graph_edge (constraint_graph_t graph, unsigned int to,\n \n       if (!graph->succs[from])\n \tgraph->succs[from] = BITMAP_ALLOC (&pta_obstack);\n+\n+      /* The graph solving process does not avoid \"triangles\", thus\n+\t there can be multiple paths from a node to another involving\n+\t intermediate other nodes.  That causes extra copying which is\n+\t most difficult to avoid when the intermediate node is ESCAPED\n+\t because there are no edges added from ESCAPED.  Avoid\n+\t adding the direct edge FROM -> TO when we have FROM -> ESCAPED\n+\t and TO contains ESCAPED.\n+\t ???  Note this is only a heuristic, it does not prevent the\n+\t situation from occuring.  The heuristic helps PR38474 and\n+\t PR99912 significantly.  */\n+      if (to < FIRST_REF_NODE\n+\t  && bitmap_bit_p (graph->succs[from], find (escaped_id))\n+\t  && bitmap_bit_p (get_varinfo (find (to))->solution, escaped_id))\n+\treturn false;\n+\n       if (bitmap_set_bit (graph->succs[from], to))\n \t{\n \t  r = true;"}]}