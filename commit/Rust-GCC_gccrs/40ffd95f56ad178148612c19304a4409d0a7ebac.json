{"sha": "40ffd95f56ad178148612c19304a4409d0a7ebac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBmZmQ5NWY1NmFkMTc4MTQ4NjEyYzE5MzA0YTQ0MDlkMGE3ZWJhYw==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2017-06-02T04:06:59Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2017-06-02T04:06:59Z"}, "message": "invoke.texi: Document the -Wsizeof-pointer-div warning.\n\ngcc:\n2017-06-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * doc/invoke.texi: Document the -Wsizeof-pointer-div warning.\n\ngcc/c-family:\n2017-06-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * c.opt (Wsizeof-pointer-div): New warning option.\n\ngcc/c:\n2017-06-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * c-parser.c (c_parser_binary_expression): Implement the\n        -Wsizeof_pointer_div warning.\n        (c_parser_postfix_expression): Allow SIZEOF_EXPR as expr.original_code\n        from a parenthesized expression.\n        (c_parser_expr_list): Use c_last_sizeof_loc.\n        * c-tree.h (c_last_sizeof_loc): New external.\n        * c-typeck.c (c_last_sizeof_loc): New variable.\n        (c_expr_sizeof_expr, c_expr_sizeof_type): Assign c_last_sizeof_loc.\n\ngcc/cp:\n2017-06-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * typeck.c (cp_build_binary_op): Implement the -Wsizeof_pointer_div\n        warning.\n\ngcc/testsuite:\n2017-06-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * c-c++-common/Wsizeof-pointer-div.c: New test. \n        * gcc.dg/Wsizeof-pointer-memaccess1.c: Add test cases with parens.\n        * gcc.dg/torture/Wsizeof-pointer-memaccess1.c: Likewise.\n        * gcc.target/i386/sse-init-v4hi-1.c: Fix test case.\n        * gcc.target/i386/sse-init-v4sf-1.c: Likewise.\n        * gcc.target/i386/sse-set-ps-1.c: Likewise.\n        * gcc.target/i386/sse2-init-v16qi-1.c: Likewise.\n        * gcc.target/i386/sse2-init-v2di-1.c: Likewise.\n        * gcc.target/i386/sse2-init-v4si-1.c: Likewise.\n        * gcc.target/i386/sse2-init-v8hi-1.c: Likewise.\n        * gcc.target/i386/sse2-set-epi32-1.c: Likewise.\n        * gcc.target/i386/sse2-set-epi64x-1.c: Likewise.\n        * gcc.target/i386/sse4_1-init-v16qi-1.c: Likewise.\n        * gcc.target/i386/sse4_1-init-v2di-1.c: Likewise.\n        * gcc.target/i386/sse4_1-init-v4sf-1.c: Likewise.\n        * gcc.target/i386/sse4_1-init-v4si-1.c: Likewise.\n        * gcc.target/i386/sse4_1-set-epi32-1.c: Likewise.\n        * gcc.target/i386/sse4_1-set-epi64x-1.c: Likewise.\n        * gcc.target/i386/sse4_1-set-ps-1.c: Likewise.\n        * libgomp.c/pr39591-2.c: Likewise.\n        * libgomp.c/pr39591-3.c: Likewise.\n\nFrom-SVN: r248811", "tree": {"sha": "29d5e4f52493dd00dab2bb7847d93038918e9f81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29d5e4f52493dd00dab2bb7847d93038918e9f81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40ffd95f56ad178148612c19304a4409d0a7ebac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40ffd95f56ad178148612c19304a4409d0a7ebac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40ffd95f56ad178148612c19304a4409d0a7ebac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40ffd95f56ad178148612c19304a4409d0a7ebac/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "616dbacbac0a0d88551a2acafd0d84cf20f91d17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/616dbacbac0a0d88551a2acafd0d84cf20f91d17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/616dbacbac0a0d88551a2acafd0d84cf20f91d17"}], "stats": {"total": 239, "additions": 205, "deletions": 34}, "files": [{"sha": "3700ebc087a5bf567cd1da3f8a393fa924560c2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -1,3 +1,7 @@\n+2017-06-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* doc/invoke.texi: Document the -Wsizeof-pointer-div warning.\n+\n 2017-06-01  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* config/i386/i386.c (x86_64_ms_sysv_extra_clobbered_registers): Make"}, {"sha": "0d54c903d6eba9c70c459048441a952d8d86b871", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -1,3 +1,7 @@\n+2017-06-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* c.opt (Wsizeof-pointer-div): New warning option.\n+\n 2017-06-01  Volker Reichelt  <v.reichelt@netcologne.de>\n \n \t* c.opt (Wcatch-value): New shortcut for Wcatch-value=1."}, {"sha": "37bb236eb9757d7d5403ab084025e9931a8e2cde", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -710,6 +710,10 @@ Wsized-deallocation\n C++ ObjC++ Var(warn_sized_deallocation) Warning EnabledBy(Wextra)\n Warn about missing sized deallocation functions.\n \n+Wsizeof-pointer-div\n+C ObjC C++ ObjC++ Var(warn_sizeof_pointer_div) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n+Warn about suspicious divisions of two sizeof expressions that don't work correctly with pointers.\n+\n Wsizeof-pointer-memaccess\n C ObjC C++ ObjC++ Var(warn_sizeof_pointer_memaccess) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn about suspicious length parameters to certain string functions if the argument uses sizeof."}, {"sha": "d849b014fec258abc233939396f678e239212ccc", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -1,3 +1,14 @@\n+2017-06-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* c-parser.c (c_parser_binary_expression): Implement the\n+\t-Wsizeof_pointer_div warning.\n+\t(c_parser_postfix_expression): Allow SIZEOF_EXPR as expr.original_code\n+\tfrom a parenthesized expression.\n+\t(c_parser_expr_list): Use c_last_sizeof_loc.\n+\t* c-tree.h (c_last_sizeof_loc): New external.\n+\t* c-typeck.c (c_last_sizeof_loc): New variable.\n+\t(c_expr_sizeof_expr, c_expr_sizeof_type): Assign c_last_sizeof_loc.\n+\n 2017-05-31  Mikhail Maltsev  <maltsevm@gmail.com>\n \n \tPR testsuite/80580"}, {"sha": "6f954f21fa2a7e1174ff1cb9274ff76bab379a2f", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -6657,6 +6657,8 @@ c_parser_binary_expression (c_parser *parser, struct c_expr *after,\n     enum tree_code op;\n     /* The source location of this operation.  */\n     location_t loc;\n+    /* The sizeof argument if expr.original_code == SIZEOF_EXPR.  */\n+    tree sizeof_arg;\n   } stack[NUM_PRECS];\n   int sp;\n   /* Location of the binary operator.  */\n@@ -6673,6 +6675,31 @@ c_parser_binary_expression (c_parser *parser, struct c_expr *after,\n \tc_inhibit_evaluation_warnings -= (stack[sp - 1].expr.value\t      \\\n \t\t\t\t\t  == truthvalue_true_node);\t      \\\n \tbreak;\t\t\t\t\t\t\t\t      \\\n+      case TRUNC_DIV_EXPR: \t\t\t\t\t\t      \\\n+\tif (stack[sp - 1].expr.original_code == SIZEOF_EXPR\t\t      \\\n+\t    && stack[sp].expr.original_code == SIZEOF_EXPR)\t\t      \\\n+\t  {\t\t\t\t\t\t\t\t      \\\n+\t    tree type0 = stack[sp - 1].sizeof_arg;\t\t\t      \\\n+\t    tree type1 = stack[sp].sizeof_arg;\t\t\t\t      \\\n+\t    tree first_arg = type0;\t\t\t\t\t      \\\n+\t    if (!TYPE_P (type0))\t\t\t\t\t      \\\n+\t      type0 = TREE_TYPE (type0);\t\t\t\t      \\\n+\t    if (!TYPE_P (type1))\t\t\t\t\t      \\\n+\t      type1 = TREE_TYPE (type1);\t\t\t\t      \\\n+\t    if (POINTER_TYPE_P (type0)\t\t\t\t\t      \\\n+\t\t&& comptypes (TREE_TYPE (type0), type1)\t\t\t      \\\n+\t\t&& !(TREE_CODE (first_arg) == PARM_DECL\t\t\t      \\\n+\t\t     && C_ARRAY_PARAMETER (first_arg)\t\t\t      \\\n+\t\t     && warn_sizeof_array_argument))\t\t\t      \\\n+\t      if (warning_at (stack[sp].loc, OPT_Wsizeof_pointer_div,\t      \\\n+\t\t\t      \"division %<sizeof (%T) / sizeof (%T)%> does \"  \\\n+\t\t\t      \"not compute the number of array elements\",     \\\n+\t\t\t      type0, type1))\t\t\t\t      \\\n+\t\tif (DECL_P (first_arg))\t\t\t\t\t      \\\n+\t\t  inform (DECL_SOURCE_LOCATION (first_arg),\t\t      \\\n+\t\t\t  \"first %<sizeof%> operand was declared here\");      \\\n+\t  }\t\t\t\t\t\t\t\t      \\\n+\tbreak;\t\t\t\t\t\t\t\t      \\\n       default:\t\t\t\t\t\t\t\t      \\\n \tbreak;\t\t\t\t\t\t\t\t      \\\n       }\t\t\t\t\t\t\t\t\t      \\\n@@ -6706,6 +6733,7 @@ c_parser_binary_expression (c_parser *parser, struct c_expr *after,\n   stack[0].loc = c_parser_peek_token (parser)->location;\n   stack[0].expr = c_parser_cast_expression (parser, after);\n   stack[0].prec = PREC_NONE;\n+  stack[0].sizeof_arg = c_last_sizeof_arg;\n   sp = 0;\n   while (true)\n     {\n@@ -6829,6 +6857,7 @@ c_parser_binary_expression (c_parser *parser, struct c_expr *after,\n       stack[sp].expr = c_parser_cast_expression (parser, NULL);\n       stack[sp].prec = oprec;\n       stack[sp].op = ocode;\n+      stack[sp].sizeof_arg = c_last_sizeof_arg;\n     }\n  out:\n   while (sp > 0)\n@@ -7720,7 +7749,8 @@ c_parser_postfix_expression (c_parser *parser)\n \t  expr = c_parser_expression (parser);\n \t  if (TREE_CODE (expr.value) == MODIFY_EXPR)\n \t    TREE_NO_WARNING (expr.value) = 1;\n-\t  if (expr.original_code != C_MAYBE_CONST_EXPR)\n+\t  if (expr.original_code != C_MAYBE_CONST_EXPR\n+\t      && expr.original_code != SIZEOF_EXPR)\n \t    expr.original_code = ERROR_MARK;\n \t  /* Don't change EXPR.ORIGINAL_TYPE.  */\n \t  location_t loc_close_paren = c_parser_peek_token (parser)->location;\n@@ -8679,7 +8709,6 @@ c_parser_expr_list (c_parser *parser, bool convert_p, bool fold_p,\n   vec<tree, va_gc> *orig_types;\n   struct c_expr expr;\n   location_t loc = c_parser_peek_token (parser)->location;\n-  location_t cur_sizeof_arg_loc = UNKNOWN_LOCATION;\n   unsigned int idx = 0;\n \n   ret = make_tree_vector ();\n@@ -8688,9 +8717,6 @@ c_parser_expr_list (c_parser *parser, bool convert_p, bool fold_p,\n   else\n     orig_types = make_tree_vector ();\n \n-  if (sizeof_arg != NULL\n-      && c_parser_next_token_is_keyword (parser, RID_SIZEOF))\n-    cur_sizeof_arg_loc = c_parser_peek_2nd_token (parser)->location;\n   if (literal_zero_mask)\n     c_parser_check_literal_zero (parser, literal_zero_mask, 0);\n   expr = c_parser_expr_no_commas (parser, NULL);\n@@ -8704,21 +8730,15 @@ c_parser_expr_list (c_parser *parser, bool convert_p, bool fold_p,\n   if (locations)\n     locations->safe_push (loc);\n   if (sizeof_arg != NULL\n-      && cur_sizeof_arg_loc != UNKNOWN_LOCATION\n       && expr.original_code == SIZEOF_EXPR)\n     {\n       sizeof_arg[0] = c_last_sizeof_arg;\n-      sizeof_arg_loc[0] = cur_sizeof_arg_loc;\n+      sizeof_arg_loc[0] = c_last_sizeof_loc;\n     }\n   while (c_parser_next_token_is (parser, CPP_COMMA))\n     {\n       c_parser_consume_token (parser);\n       loc = c_parser_peek_token (parser)->location;\n-      if (sizeof_arg != NULL\n-\t  && c_parser_next_token_is_keyword (parser, RID_SIZEOF))\n-\tcur_sizeof_arg_loc = c_parser_peek_2nd_token (parser)->location;\n-      else\n-\tcur_sizeof_arg_loc = UNKNOWN_LOCATION;\n       if (literal_zero_mask)\n \tc_parser_check_literal_zero (parser, literal_zero_mask, idx + 1);\n       expr = c_parser_expr_no_commas (parser, NULL);\n@@ -8733,11 +8753,10 @@ c_parser_expr_list (c_parser *parser, bool convert_p, bool fold_p,\n \tlocations->safe_push (loc);\n       if (++idx < 3\n \t  && sizeof_arg != NULL\n-\t  && cur_sizeof_arg_loc != UNKNOWN_LOCATION\n \t  && expr.original_code == SIZEOF_EXPR)\n \t{\n \t  sizeof_arg[idx] = c_last_sizeof_arg;\n-\t  sizeof_arg_loc[idx] = cur_sizeof_arg_loc;\n+\t  sizeof_arg_loc[idx] = c_last_sizeof_loc;\n \t}\n     }\n   if (orig_types)"}, {"sha": "ce25fae0b877ab0f369e950096fe072ebc53759f", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -611,6 +611,7 @@ extern int in_sizeof;\n extern int in_typeof;\n \n extern tree c_last_sizeof_arg;\n+extern location_t c_last_sizeof_loc;\n \n extern struct c_switch *c_switch_stack;\n "}, {"sha": "467552cef4be01d5a97311f8a2835cab3f66e348", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -72,6 +72,7 @@ int in_typeof;\n /* The argument of last parsed sizeof expression, only to be tested\n    if expr.original_code == SIZEOF_EXPR.  */\n tree c_last_sizeof_arg;\n+location_t c_last_sizeof_loc;\n \n /* Nonzero if we might need to print a \"missing braces around\n    initializer\" message within this initializer.  */\n@@ -2910,6 +2911,7 @@ c_expr_sizeof_expr (location_t loc, struct c_expr expr)\n \t\t\t\t       &expr_const_operands);\n       ret.value = c_sizeof (loc, TREE_TYPE (folded_expr));\n       c_last_sizeof_arg = expr.value;\n+      c_last_sizeof_loc = loc;\n       ret.original_code = SIZEOF_EXPR;\n       ret.original_type = NULL;\n       if (c_vla_type_p (TREE_TYPE (folded_expr)))\n@@ -2939,6 +2941,7 @@ c_expr_sizeof_type (location_t loc, struct c_type_name *t)\n   type = groktypename (t, &type_expr, &type_expr_const);\n   ret.value = c_sizeof (loc, type);\n   c_last_sizeof_arg = type;\n+  c_last_sizeof_loc = loc;\n   ret.original_code = SIZEOF_EXPR;\n   ret.original_type = NULL;\n   if ((type_expr || TREE_CODE (ret.value) == INTEGER_CST)"}, {"sha": "03392caaea1b7c01483e643f85fab0e6d3a92a48", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -1,3 +1,8 @@\n+2017-06-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* typeck.c (cp_build_binary_op): Implement the -Wsizeof_pointer_div\n+\twarning.\n+\n 2017-06-01  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR c++/80812"}, {"sha": "334a6f5938bbffe61b3bb505865fa9d5786a8179", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -4357,6 +4357,29 @@ cp_build_binary_op (location_t location,\n     case FLOOR_DIV_EXPR:\n     case ROUND_DIV_EXPR:\n     case EXACT_DIV_EXPR:\n+      if (TREE_CODE (op0) == SIZEOF_EXPR && TREE_CODE (op1) == SIZEOF_EXPR)\n+\t{\n+\t  tree type0 = TREE_OPERAND (op0, 0);\n+\t  tree type1 = TREE_OPERAND (op1, 0);\n+\t  tree first_arg = type0;\n+\t  if (!TYPE_P (type0))\n+\t    type0 = TREE_TYPE (type0);\n+\t  if (!TYPE_P (type1))\n+\t    type1 = TREE_TYPE (type1);\n+\t  if (POINTER_TYPE_P (type0) && same_type_p (TREE_TYPE (type0), type1)\n+\t      && !(TREE_CODE (first_arg) == PARM_DECL\n+\t\t   && DECL_ARRAY_PARAMETER_P (first_arg)\n+\t\t   && warn_sizeof_array_argument)\n+\t      && (complain & tf_warning))\n+\t    if (warning_at (location, OPT_Wsizeof_pointer_div,\n+\t\t\t    \"division %<sizeof (%T) / sizeof (%T)%> does \"\n+\t\t\t    \"not compute the number of array elements\",\n+\t\t\t    type0, type1))\n+\t      if (DECL_P (first_arg))\n+\t\tinform (DECL_SOURCE_LOCATION (first_arg),\n+\t\t\t\"first %<sizeof%> operand was declared here\");\n+\t}\n+\n       if ((code0 == INTEGER_TYPE || code0 == REAL_TYPE\n \t   || code0 == COMPLEX_TYPE || code0 == VECTOR_TYPE)\n \t  && (code1 == INTEGER_TYPE || code1 == REAL_TYPE"}, {"sha": "819e80070cddb41645377a24e37a665e914dfe10", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -306,7 +306,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wshift-overflow  -Wshift-overflow=@var{n} @gol\n -Wshift-count-negative  -Wshift-count-overflow  -Wshift-negative-value @gol\n -Wsign-compare  -Wsign-conversion  -Wfloat-conversion @gol\n--Wno-scalar-storage-order @gol\n+-Wno-scalar-storage-order  -Wsizeof-pointer-div @gol\n -Wsizeof-pointer-memaccess  -Wsizeof-array-argument @gol\n -Wstack-protector  -Wstack-usage=@var{len}  -Wstrict-aliasing @gol\n -Wstrict-aliasing=n  -Wstrict-overflow  -Wstrict-overflow=@var{n} @gol\n@@ -3832,6 +3832,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n -Wreturn-type  @gol\n -Wsequence-point  @gol\n -Wsign-compare @r{(only in C++)}  @gol\n+-Wsizeof-pointer-div @gol\n -Wsizeof-pointer-memaccess @gol\n -Wstrict-aliasing  @gol\n -Wstrict-overflow=1  @gol\n@@ -6093,6 +6094,15 @@ void operator delete[] (void *, std::size_t) noexcept;\n or vice versa.  Enabled by @option{-Wextra} along with\n @option{-fsized-deallocation}.\n \n+@item -Wsizeof-pointer-div\n+@opindex Wsizeof-pointer-div\n+@opindex Wno-sizeof-pointer-div\n+Warn for suspicious divisions of two sizeof expressions that divide\n+the pointer size by the element size, which is the usual way to compute\n+the array size but won't work out correctly with pointers.  This warning\n+warns e.g.@: about @code{sizeof (ptr) / sizeof (ptr[0])} if @code{ptr} is\n+not an array, but a pointer.  This warning is enabled by @option{-Wall}.\n+\n @item -Wsizeof-pointer-memaccess\n @opindex Wsizeof-pointer-memaccess\n @opindex Wno-sizeof-pointer-memaccess"}, {"sha": "a4f3bc933fba04dd24b6fe8e0a885f6463a66313", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -1,3 +1,25 @@\n+2017-06-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* c-c++-common/Wsizeof-pointer-div.c: New test.\n+\t* gcc.dg/Wsizeof-pointer-memaccess1.c: Add test cases with parens.\n+\t* gcc.dg/torture/Wsizeof-pointer-memaccess1.c: Likewise.\n+\t* gcc.target/i386/sse-init-v4hi-1.c: Fix test case.\n+\t* gcc.target/i386/sse-init-v4sf-1.c: Likewise.\n+\t* gcc.target/i386/sse-set-ps-1.c: Likewise.\n+\t* gcc.target/i386/sse2-init-v16qi-1.c: Likewise.\n+\t* gcc.target/i386/sse2-init-v2di-1.c: Likewise.\n+\t* gcc.target/i386/sse2-init-v4si-1.c: Likewise.\n+\t* gcc.target/i386/sse2-init-v8hi-1.c: Likewise.\n+\t* gcc.target/i386/sse2-set-epi32-1.c: Likewise.\n+\t* gcc.target/i386/sse2-set-epi64x-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-init-v16qi-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-init-v2di-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-init-v4sf-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-init-v4si-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-set-epi32-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-set-epi64x-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-set-ps-1.c: Likewise.\n+\n 2017-06-01  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* gcc.target/powerpc/fold-vec-logical-ors-longlong.c:"}, {"sha": "83116183902896eab41fa9cefc32034a29325096", "filename": "gcc/testsuite/c-c++-common/Wsizeof-pointer-div.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsizeof-pointer-div.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsizeof-pointer-div.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsizeof-pointer-div.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -0,0 +1,42 @@\n+/* Test -Wsizeof-pointer-div warnings.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+int\n+f1 (int *array)\n+{\n+  int i;\n+  i = sizeof array / sizeof *array;\t\t/* { dg-warning \"does not compute the number of array elements\" } */\n+  i += sizeof array / sizeof array[0];\t\t/* { dg-warning \"does not compute the number of array elements\" } */\n+  i += sizeof(array) / sizeof(*array);\t\t/* { dg-warning \"does not compute the number of array elements\" } */\n+  i += sizeof(array) / sizeof(array[0]);\t/* { dg-warning \"does not compute the number of array elements\" } */\n+  i += (sizeof(array)) / (sizeof(array[0]));\t/* { dg-warning \"does not compute the number of array elements\" } */\n+  i += sizeof(array) / sizeof(int);\t\t/* { dg-warning \"does not compute the number of array elements\" } */\n+  i += sizeof(array) / sizeof(char);\n+  i += sizeof(*array) / sizeof(char);\n+  i += sizeof(array[0]) / sizeof(char);\n+  return i;\n+}\n+\n+int\n+f2 (void)\n+{\n+  int array[10];\n+  int i;\n+  i = sizeof array / sizeof *array;\n+  i += sizeof array / sizeof array[0];\n+  i += sizeof(array) / sizeof(*array);\n+  i += sizeof(array) / sizeof(array[0]);\n+  i += (sizeof(array)) / (sizeof(array[0]));\n+  i += sizeof(array) / sizeof(int);\n+  i += sizeof(array) / sizeof(char);\n+  i += sizeof(*array) / sizeof(char);\n+  i += sizeof(array[0]) / sizeof(char);\n+  return i;\n+}\n+\n+int\n+f3 (int a[])\n+{\n+  return sizeof a / sizeof *a;\t\t\t/* { dg-warning \"Wsizeof-array-argument\" } */\n+}"}, {"sha": "7feb122b553ba402ee392979e50324cee522a91d", "filename": "gcc/testsuite/gcc.dg/Wsizeof-pointer-memaccess1.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.dg%2FWsizeof-pointer-memaccess1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.dg%2FWsizeof-pointer-memaccess1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWsizeof-pointer-memaccess1.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -73,6 +73,15 @@ f1 (void *x, int z)\n   z += bcmp (x, pa2, sizeof (PTA));\t    /* { dg-warning \"call is the same pointer type \\[^\\n\\r\\]* as the second source; expected \\[^\\n\\r\\]* or an explicit length\" } */\n   z += bcmp (x, pa3, sizeof (PA));\t    /* { dg-warning \"call is the same pointer type \\[^\\n\\r\\]* as the second source; expected \\[^\\n\\r\\]* or an explicit length\" } */\n \n+  z += bcmp (x, (&a), (sizeof (&a)));\t    /* { dg-warning \"call is the same expression as the second source; did you mean to remove the addressof\" } */\n+  z += bcmp (x, (pa1), (sizeof (pa1)));\t    /* { dg-warning \"call is the same expression as the second source; did you mean to dereference it\" } */\n+  z += bcmp (x, (pa2), (sizeof pa2));\t    /* { dg-warning \"call is the same expression as the second source; did you mean to dereference it\" } */\n+  z += bcmp (x, (pa3), (sizeof (pa3)));\t    /* { dg-warning \"call is the same expression as the second source; did you mean to dereference it\" } */\n+  z += bcmp (x, (pa4), (sizeof pa4));\t    /* { dg-warning \"call is the same expression as the second source; did you mean to dereference it\" } */\n+  z += bcmp (x, (pa1), (sizeof (struct A *)));/* { dg-warning \"call is the same pointer type \\[^\\n\\r\\]* as the second source; expected \\[^\\n\\r\\]* or an explicit length\" } */\n+  z += bcmp (x, (pa2), (sizeof (PTA)));\t    /* { dg-warning \"call is the same pointer type \\[^\\n\\r\\]* as the second source; expected \\[^\\n\\r\\]* or an explicit length\" } */\n+  z += bcmp (x, (pa3), (sizeof (PA)));\t    /* { dg-warning \"call is the same pointer type \\[^\\n\\r\\]* as the second source; expected \\[^\\n\\r\\]* or an explicit length\" } */\n+\n   /* These are correct, no warning.  */\n   bzero (&a, sizeof a);\n   bzero (&a, sizeof (a));"}, {"sha": "f9bc57c4e86c65fb1c6d2ff382d99c622c1f0efb", "filename": "gcc/testsuite/gcc.dg/torture/Wsizeof-pointer-memaccess1.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2FWsizeof-pointer-memaccess1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2FWsizeof-pointer-memaccess1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2FWsizeof-pointer-memaccess1.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -150,6 +150,15 @@ f1 (void *x, int z)\n   z += memcmp (x, pa2, sizeof (PTA));       /* { dg-warning \"call is the same pointer type \\[^\\n\\r\\]* as the second source; expected \\[^\\n\\r\\]* or an explicit length\" } */\n   z += memcmp (x, pa3, sizeof (PA));\t    /* { dg-warning \"call is the same pointer type \\[^\\n\\r\\]* as the second source; expected \\[^\\n\\r\\]* or an explicit length\" } */\n \n+  z += memcmp (x, (&a), (sizeof (&a)));\t    /* { dg-warning \"call is the same expression as the second source; did you mean to remove the addressof\" } */\n+  z += memcmp (x, (pa1), (sizeof (pa1)));   /* { dg-warning \"call is the same expression as the second source; did you mean to dereference it\" } */\n+  z += memcmp (x, (pa2), (sizeof pa2));\t    /* { dg-warning \"call is the same expression as the second source; did you mean to dereference it\" } */\n+  z += memcmp (x, (pa3), (sizeof (pa3)));   /* { dg-warning \"call is the same expression as the second source; did you mean to dereference it\" } */\n+  z += memcmp (x, (pa4), (sizeof pa4));\t    /* { dg-warning \"call is the same expression as the second source; did you mean to dereference it\" } */\n+  z += memcmp (x, (pa1), (sizeof (struct A *)));/* { dg-warning \"call is the same pointer type \\[^\\n\\r\\]* as the second source; expected \\[^\\n\\r\\]* or an explicit length\" } */\n+  z += memcmp (x, (pa2), (sizeof (PTA)));   /* { dg-warning \"call is the same pointer type \\[^\\n\\r\\]* as the second source; expected \\[^\\n\\r\\]* or an explicit length\" } */\n+  z += memcmp (x, (pa3), (sizeof (PA)));    /* { dg-warning \"call is the same pointer type \\[^\\n\\r\\]* as the second source; expected \\[^\\n\\r\\]* or an explicit length\" } */\n+\n   /* These are correct, no warning.  */\n   memset (&a, 0, sizeof a);\n   memset (&a, 0, sizeof (a));"}, {"sha": "1a9b11f4dd53d9fa285796b585d38a8b4ddcd853", "filename": "gcc/testsuite/gcc.target/i386/sse-init-v4hi-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-init-v4hi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-init-v4hi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-init-v4hi-1.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -17,13 +17,13 @@ check (__m64 x, unsigned short *v, int j)\n   union\n     {\n       __m64 x;\n-      unsigned short i[8];\n+      unsigned short i[4];\n     } u;\n   unsigned int i;\n \n   u.x = x;\n   \n-  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+  for (i = 0; i < sizeof (u) / sizeof (v[0]); i++)\n     if (i == j)\n       {\n \tif (v[i] != u.i[i])"}, {"sha": "2e9d53e6d753a789aad66994950ff06cdfabfbad", "filename": "gcc/testsuite/gcc.target/i386/sse-init-v4sf-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-init-v4sf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-init-v4sf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-init-v4sf-1.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -23,7 +23,7 @@ check (__m128 x, float *v, int j)\n \n   u.x = x;\n   \n-  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+  for (i = 0; i < sizeof (u) / sizeof (v[0]); i++)\n     if (i == j)\n       {\n \tif (v[i] != u.f[i])"}, {"sha": "a14351555f757f70be2cdf3770fbf74a6b3a34e9", "filename": "gcc/testsuite/gcc.target/i386/sse-set-ps-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-set-ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-set-ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-set-ps-1.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -23,7 +23,7 @@ test (float *v)\n   \n   u.x = _mm_set_ps (v[3], v[2], v[1], v[0]);\n \n-  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+  for (i = 0; i < sizeof (u) / sizeof (v[0]); i++)\n     if (v[i] != u.f[i])\n       {\n #ifdef DEBUG"}, {"sha": "6dcb4fffa21bda63c4674998e08b7fa80fdf7717", "filename": "gcc/testsuite/gcc.target/i386/sse2-init-v16qi-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v16qi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v16qi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v16qi-1.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -23,7 +23,7 @@ check (__m128i x, unsigned char *v, int j)\n \n   u.x = x;\n   \n-  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+  for (i = 0; i < sizeof (u) / sizeof (v[0]); i++)\n     if (i == j)\n       {\n \tif (v[i] != u.i[i])"}, {"sha": "07c625b2e7fe30a587829c4375439abca066fb07", "filename": "gcc/testsuite/gcc.target/i386/sse2-init-v2di-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v2di-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v2di-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v2di-1.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -23,7 +23,7 @@ check (__m128i x, unsigned long long *v, int j)\n \n   u.x = x;\n   \n-  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+  for (i = 0; i < sizeof (u) / sizeof (v[0]); i++)\n     if (i == j)\n       {\n \tif (v[i] != u.i[i])"}, {"sha": "359744a842a08b48bfe3a3dbe511d61741397020", "filename": "gcc/testsuite/gcc.target/i386/sse2-init-v4si-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v4si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v4si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v4si-1.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -23,7 +23,7 @@ check (__m128i x, unsigned int *v, int j)\n \n   u.x = x;\n   \n-  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+  for (i = 0; i < sizeof (u) / sizeof (v[0]); i++)\n     if (i == j)\n       {\n \tif (v[i] != u.i[i])"}, {"sha": "cc6ff6840e62f18c0285b0aefb3e5076963f6d94", "filename": "gcc/testsuite/gcc.target/i386/sse2-init-v8hi-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v8hi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v8hi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v8hi-1.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -23,7 +23,7 @@ check (__m128i x, unsigned short *v, int j)\n \n   u.x = x;\n   \n-  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+  for (i = 0; i < sizeof (u) / sizeof (v[0]); i++)\n     if (i == j)\n       {\n \tif (v[i] != u.i[i])"}, {"sha": "e7bbe2dfbed0a4afe8dfe148e4cc08af060b8b8d", "filename": "gcc/testsuite/gcc.target/i386/sse2-set-epi32-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-epi32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-epi32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-epi32-1.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -23,7 +23,7 @@ test (unsigned int *v)\n   \n   u.x = _mm_set_epi32 (v[3], v[2], v[1], v[0]);\n \n-  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+  for (i = 0; i < sizeof (u) / sizeof (v[0]); i++)\n     if (v[i] != u.i[i])\n       {\n #ifdef DEBUG"}, {"sha": "0d88f9862bf201970f9b641ad0734dc6e0c9b87f", "filename": "gcc/testsuite/gcc.target/i386/sse2-set-epi64x-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-epi64x-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-epi64x-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-epi64x-1.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -23,7 +23,7 @@ test (unsigned long long *v)\n   \n   u.x = _mm_set_epi64x (v[1], v[0]);\n \n-  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+  for (i = 0; i < sizeof (u) / sizeof (v[0]); i++)\n     if (v[i] != u.i[i])\n       {\n #ifdef DEBUG"}, {"sha": "43c1d6232d6795c966c4aaf85f8b186f82d5dfc0", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-init-v16qi-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v16qi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v16qi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v16qi-1.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -23,7 +23,7 @@ check (__m128i x, unsigned char *v, int j)\n \n   u.x = x;\n   \n-  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+  for (i = 0; i < sizeof (u) / sizeof (v[0]); i++)\n     if (i == j)\n       {\n \tif (v[i] != u.i[i])"}, {"sha": "25d9a66167bfc3beb80f5969ddaea1e24b732238", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-init-v2di-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v2di-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v2di-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v2di-1.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -23,7 +23,7 @@ check (__m128i x, unsigned long long *v, int j)\n \n   u.x = x;\n   \n-  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+  for (i = 0; i < sizeof (u) / sizeof (v[0]); i++)\n     if (i == j)\n       {\n \tif (v[i] != u.i[i])"}, {"sha": "1be2e62da143162ab073718299a096559ec156e3", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-init-v4sf-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v4sf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v4sf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v4sf-1.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -23,7 +23,7 @@ check (__m128 x, float *v, int j)\n \n   u.x = x;\n   \n-  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+  for (i = 0; i < sizeof (u) / sizeof (v[0]); i++)\n     if (i == j)\n       {\n \tif (v[i] != u.f[i])"}, {"sha": "ae7142b3ad6cfa44f08bb2f9ef05dff7a0d3af7d", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-init-v4si-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v4si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v4si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v4si-1.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -23,7 +23,7 @@ check (__m128i x, unsigned int *v, int j)\n \n   u.x = x;\n   \n-  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+  for (i = 0; i < sizeof (u) / sizeof (v[0]); i++)\n     if (i == j)\n       {\n \tif (v[i] != u.i[i])"}, {"sha": "75d7aec85ebeb10f7424e5e028cc77456743ad50", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-set-epi32-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-epi32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-epi32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-epi32-1.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -23,7 +23,7 @@ test (unsigned int *v)\n   \n   u.x = _mm_set_epi32 (v[3], v[2], v[1], v[0]);\n \n-  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+  for (i = 0; i < sizeof (u) / sizeof (v[0]); i++)\n     if (v[i] != u.i[i])\n       {\n #ifdef DEBUG"}, {"sha": "068d0a79c70669015f0c26dd81c85cdb6699f414", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-set-epi64x-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-epi64x-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-epi64x-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-epi64x-1.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -23,7 +23,7 @@ test (unsigned long long *v)\n   \n   u.x = _mm_set_epi64x (v[1], v[0]);\n \n-  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+  for (i = 0; i < sizeof (u) / sizeof (v[0]); i++)\n     if (v[i] != u.i[i])\n       {\n #ifdef DEBUG"}, {"sha": "aab1e51a02c4cbc90083a25c00a67c28aec37012", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-set-ps-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-ps-1.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -23,7 +23,7 @@ test (float *v)\n   \n   u.x = _mm_set_ps (v[3], v[2], v[1], v[0]);\n \n-  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+  for (i = 0; i < sizeof (u) / sizeof (v[0]); i++)\n     if (v[i] != u.f[i])\n       {\n #ifdef DEBUG"}, {"sha": "f9f60264af0ef23ef45ab7d75a577b486917abef", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -1,3 +1,8 @@\n+2017-06-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* testsuite/libgomp.c/pr39591-2.c: Fix test case.\n+\t* testsuite/libgomp.c/pr39591-3.c: Likewise.\n+\n 2017-05-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libgomp/80822"}, {"sha": "2fe6421aef4e83008ec020f7f560faba20efc71b", "filename": "libgomp/testsuite/libgomp.c/pr39591-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-2.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -11,7 +11,7 @@ foo (int *array)\n #pragma omp task\n   {\n     int j;\n-    for (j = 0; j < sizeof array / sizeof array[0]; j++)\n+    for (j = 0; j < 40; j++)\n       if (array[j] != 0x55555555)\n #pragma omp atomic\n \terr++;"}, {"sha": "81e8ca8e497f8dae47f856ede3f6bff604d42f3a", "filename": "libgomp/testsuite/libgomp.c/pr39591-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ffd95f56ad178148612c19304a4409d0a7ebac/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ffd95f56ad178148612c19304a4409d0a7ebac/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr39591-3.c?ref=40ffd95f56ad178148612c19304a4409d0a7ebac", "patch": "@@ -11,7 +11,7 @@ foo (int *array)\n #pragma omp task\n   {\n     int j;\n-    for (j = 0; j < sizeof array / sizeof array[0]; j++)\n+    for (j = 0; j < 40; j++)\n       if (array[j] != 0x55555555)\n #pragma omp atomic\n \terr++;"}]}