{"sha": "b10e031458d541f794dfaa08ba606487603a4bb6", "node_id": "C_kwDOANBUbNoAKGIxMGUwMzE0NThkNTQxZjc5NGRmYWEwOGJhNjA2NDg3NjAzYTRiYjY", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-05T22:01:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-07T00:25:43Z"}, "message": "c++: destroy retval on throwing cleanup in try [PR33799]\n\nMy earlier attempt to fix this bug didn't handle the case where both the\nreturn and the throwing cleanup are within a try-block that catches and\ndiscards the exception.  Fixed by adding the retval cleanup to any\ntry-blocks as well as the function body.  PR102191 pointed out that we also\nweren't handling templates properly, so I moved the call out of the parser.\n\n\tPR c++/33799\n\tPR c++/102191\n\ngcc/cp/ChangeLog:\n\n\t* except.c (maybe_splice_retval_cleanup): Check\n\tcurrent_binding_level.\n\t* semantics.c (do_poplevel): Call it here.\n\t* parser.c (cp_parser_compound_statement): Not here.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/eh/return1.C: Add temporary in try block case.\n\t* g++.dg/cpp2a/constexpr-dtor11.C: New test.", "tree": {"sha": "84098539237e443920e3c21668370bb63a27c841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84098539237e443920e3c21668370bb63a27c841"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b10e031458d541f794dfaa08ba606487603a4bb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b10e031458d541f794dfaa08ba606487603a4bb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b10e031458d541f794dfaa08ba606487603a4bb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b10e031458d541f794dfaa08ba606487603a4bb6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c6afbbd48f0c40ddf949bc403d9bd5f5e14204f"}], "stats": {"total": 102, "additions": 84, "deletions": 18}, "files": [{"sha": "bcd9f84431ba3a6a653fa51ba4670aa75430dce8", "filename": "gcc/cp/except.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10e031458d541f794dfaa08ba606487603a4bb6/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10e031458d541f794dfaa08ba606487603a4bb6/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=b10e031458d541f794dfaa08ba606487603a4bb6", "patch": "@@ -1294,26 +1294,35 @@ maybe_set_retval_sentinel ()\n \t\t current_retval_sentinel, boolean_true_node);\n }\n \n-/* COMPOUND_STMT is the STATEMENT_LIST for the current function body.  If\n-   current_retval_sentinel was set in this function, wrap the body in a\n-   CLEANUP_STMT to destroy the return value on throw.  */\n+/* COMPOUND_STMT is the STATEMENT_LIST for some block.  If COMPOUND_STMT is the\n+   current function body or a try block, and current_retval_sentinel was set in\n+   this function, wrap the block in a CLEANUP_STMT to destroy the return value\n+   on throw.  */\n \n void\n maybe_splice_retval_cleanup (tree compound_stmt)\n {\n-  /* If need_retval_cleanup set current_retval_sentinel, wrap the function body\n-     in a CLEANUP_STMT to handle destroying the return value.  */\n-  if (!DECL_CONSTRUCTOR_P (current_function_decl)\n+  /* If we need a cleanup for the return value, add it in at the same level as\n+     pushdecl_outermost_localscope.  And also in try blocks.  */\n+  bool function_body\n+    = (current_binding_level->level_chain\n+       && current_binding_level->level_chain->kind == sk_function_parms);\n+\n+  if ((function_body || current_binding_level->kind == sk_try)\n+      && !DECL_CONSTRUCTOR_P (current_function_decl)\n       && !DECL_DESTRUCTOR_P (current_function_decl)\n       && current_retval_sentinel)\n     {\n       location_t loc = DECL_SOURCE_LOCATION (current_function_decl);\n-\n-      /* Add a DECL_EXPR for current_retval_sentinel.  */\n       tree_stmt_iterator iter = tsi_start (compound_stmt);\n       tree retval = DECL_RESULT (current_function_decl);\n-      tree decl_expr = build_stmt (loc, DECL_EXPR, current_retval_sentinel);\n-      tsi_link_before (&iter, decl_expr, TSI_SAME_STMT);\n+\n+      if (function_body)\n+\t{\n+\t  /* Add a DECL_EXPR for current_retval_sentinel.  */\n+\t  tree decl_expr = build_stmt (loc, DECL_EXPR, current_retval_sentinel);\n+\t  tsi_link_before (&iter, decl_expr, TSI_SAME_STMT);\n+\t}\n \n       /* Skip past other decls, they can't contain a return.  */\n       while (TREE_CODE (tsi_stmt (iter)) == DECL_EXPR)"}, {"sha": "f40e707d47c2df0868711670940f4a4b97b65fd7", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10e031458d541f794dfaa08ba606487603a4bb6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10e031458d541f794dfaa08ba606487603a4bb6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b10e031458d541f794dfaa08ba606487603a4bb6", "patch": "@@ -12751,9 +12751,6 @@ cp_parser_compound_statement (cp_parser *parser, tree in_statement_expr,\n   /* Parse an (optional) statement-seq.  */\n   cp_parser_statement_seq_opt (parser, in_statement_expr);\n \n-  if (function_body)\n-    maybe_splice_retval_cleanup (compound_stmt);\n-\n   /* Consume the `}'.  */\n   braces.require_close (parser);\n "}, {"sha": "645654768e37f64a0afe5c4f29d55eb59bcd4c02", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10e031458d541f794dfaa08ba606487603a4bb6/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10e031458d541f794dfaa08ba606487603a4bb6/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=b10e031458d541f794dfaa08ba606487603a4bb6", "patch": "@@ -624,6 +624,8 @@ do_poplevel (tree stmt_list)\n {\n   tree block = NULL;\n \n+  maybe_splice_retval_cleanup (stmt_list);\n+\n   if (stmts_are_full_exprs_p ())\n     block = poplevel (kept_level_p (), 1, 0);\n "}, {"sha": "e371f89a10efe826b070b676ed0d1a2e16f3d0c7", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dtor11.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10e031458d541f794dfaa08ba606487603a4bb6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10e031458d541f794dfaa08ba606487603a4bb6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor11.C?ref=b10e031458d541f794dfaa08ba606487603a4bb6", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/102191\n+// { dg-do compile { target c++20 } }\n+\n+struct X {\n+  struct A {\n+    constexpr ~A() noexcept(false) { }\n+  };\n+\n+  constexpr A operator()(auto...) { return {}; }\n+};\n+\n+void f() { []() consteval { X{}(); }(); }"}, {"sha": "ac2225405da70409128d7ab97bfca03d1c9af310", "filename": "gcc/testsuite/g++.dg/eh/return1.C", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10e031458d541f794dfaa08ba606487603a4bb6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Freturn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10e031458d541f794dfaa08ba606487603a4bb6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Freturn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Freturn1.C?ref=b10e031458d541f794dfaa08ba606487603a4bb6", "patch": "@@ -11,13 +11,16 @@ int c, d;\n #define THROWS\n #endif\n \n+extern \"C\" int printf (const char *, ...);\n+#define DEBUG // printf (\"%p %s\\n\", this, __PRETTY_FUNCTION__)\n+\n struct X\n {\n-  X(bool throws) : throws_(throws) { ++c; }\n-  X(const X& x) : throws_(x.throws_) { ++c; }\n+  X(bool throws) : throws_(throws) { ++c; DEBUG; }\n+  X(const X& x); // not defined\n   ~X() THROWS\n   {\n-    ++d;\n+    ++d; DEBUG;\n     if (throws_) { throw 1; }\n   }\n private:\n@@ -42,6 +45,40 @@ void h()\n #endif\n }\n \n+X i()\n+{\n+  try {\n+    X x(true);\n+    return X(false);\n+  } catch(...) {}\n+  return X(false);\n+}\n+\n+X j()\n+{\n+  try {\n+    return X(true),X(false);\n+  } catch(...) {}\n+  return X(false);\n+}\n+\n+template <class T>\n+T k()\n+{\n+  try {\n+    return T(true),T(false);\n+  } catch (...) {}\n+  return T(true),T(false);\n+}\n+\n+X l() try { return X(true),X(false); }\n+  catch (...) { return X(true),X(false); }\n+\n+template <class T>\n+T m()\n+  try { return T(true),T(false); }\n+  catch (...) { return T(true),T(false); }\n+\n int main()\n {\n   try { f(); }\n@@ -53,6 +90,15 @@ int main()\n   try { h(); }\n   catch (...) {}\n \n-  if (c != d)\n-    throw;\n+  try { i(); }\n+  catch (...) {}\n+\n+  try { j(); } catch (...) {}\n+\n+  try { k<X>(); } catch (...) {}\n+\n+  try { l(); } catch (...) {}\n+  try { m<X>(); } catch (...) {}\n+\n+  return c - d;\n }"}]}