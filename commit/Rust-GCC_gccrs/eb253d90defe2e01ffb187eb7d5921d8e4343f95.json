{"sha": "eb253d90defe2e01ffb187eb7d5921d8e4343f95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIyNTNkOTBkZWZlMmUwMWZmYjE4N2ViN2Q1OTIxZDhlNDM0M2Y5NQ==", "commit": {"author": {"name": "Herman A.J. ten Brugge", "email": "Haj.Ten.Brugge@net.HCC.nl", "date": "2001-01-23T05:28:15Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2001-01-23T05:28:15Z"}, "message": "c4x-protos.h (c4x_legitimize_reload_address): Remove.\n\n\t* c4x-protos.h (c4x_legitimize_reload_address): Remove.\n\t* c4x.c (c4x_legitimize_reload_address): Remove.\n\t* c4x.h (LEGITIMIZE_RELOAD_ADDRESS): Rewrite to generate correct\n\treload address for ldp(k) insn.\n\nFrom-SVN: r39194", "tree": {"sha": "e06dab1c78963214db9f3b554081d79ffabc5dc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e06dab1c78963214db9f3b554081d79ffabc5dc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb253d90defe2e01ffb187eb7d5921d8e4343f95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb253d90defe2e01ffb187eb7d5921d8e4343f95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb253d90defe2e01ffb187eb7d5921d8e4343f95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb253d90defe2e01ffb187eb7d5921d8e4343f95/comments", "author": null, "committer": null, "parents": [{"sha": "2caa0ddfc92ef326520e9e2467297435ecdf99e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2caa0ddfc92ef326520e9e2467297435ecdf99e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2caa0ddfc92ef326520e9e2467297435ecdf99e5"}], "stats": {"total": 92, "additions": 54, "deletions": 38}, "files": [{"sha": "7b17a864e3843a9966ac3d8a1a0855e3d6fedac4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb253d90defe2e01ffb187eb7d5921d8e4343f95/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb253d90defe2e01ffb187eb7d5921d8e4343f95/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb253d90defe2e01ffb187eb7d5921d8e4343f95", "patch": "@@ -1,3 +1,10 @@\n+2001-01-23  Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n+\n+\t* c4x-protos.h (c4x_legitimize_reload_address): Remove.\n+\t* c4x.c (c4x_legitimize_reload_address): Remove.\n+\t* c4x.h (LEGITIMIZE_RELOAD_ADDRESS): Rewrite to generate correct\n+\treload address for ldp(k) insn.\n+\n Mon Jan 22 20:53:47 2001  Jeffrey A Law  (law@cygnus.com)\n \n \t* pa.md (return_internal): Add a USE of the PIC register to ensure"}, {"sha": "9685f3915dcdbcaafecd354d7edbf6846f3ab3b5", "filename": "gcc/config/c4x/c4x-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb253d90defe2e01ffb187eb7d5921d8e4343f95/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb253d90defe2e01ffb187eb7d5921d8e4343f95/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h?ref=eb253d90defe2e01ffb187eb7d5921d8e4343f95", "patch": "@@ -91,8 +91,6 @@ extern int c4x_hard_regno_mode_ok PARAMS ((unsigned int, enum machine_mode));\n extern struct rtx_def *c4x_legitimize_address PARAMS ((rtx,\n \t\t\t\t\t\t       enum machine_mode));\n \n-extern struct rtx_def *c4x_legitimize_reload_address PARAMS ((rtx, enum machine_mode, rtx));\n-\n extern int c4x_address_cost PARAMS ((rtx));\n \n extern void c4x_print_operand PARAMS ((FILE *, rtx, int));"}, {"sha": "346459f0d071d2da1149af8e644d17ffdd2d258d", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb253d90defe2e01ffb187eb7d5921d8e4343f95/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb253d90defe2e01ffb187eb7d5921d8e4343f95/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=eb253d90defe2e01ffb187eb7d5921d8e4343f95", "patch": "@@ -1679,32 +1679,6 @@ c4x_legitimize_address (orig, mode)\n }\n \n \n-rtx\n-c4x_legitimize_reload_address (orig, mode, insn)\n-     rtx orig ATTRIBUTE_UNUSED;\n-     enum machine_mode mode;\n-     rtx insn;\n-{                                                                    \t\n-  if (mode != HImode \n-      && mode != HFmode\n-      && GET_MODE (orig) != HImode\n-      && GET_MODE (orig) != HFmode\n-      && (GET_CODE (orig) == CONST\t\t\t\t\t\n-          || GET_CODE (orig) == SYMBOL_REF\t\t\t\t\n-          || GET_CODE (orig) == LABEL_REF))\n-    {                                                                   \n-      rtx dp_reg = gen_rtx_REG (Pmode, DP_REGNO);\t\t\t\n-      if (! TARGET_SMALL)\t\t\t\t\t\t\n-        emit_insn_before (gen_rtx_SET (VOIDmode, dp_reg, \t\t\n-\t\t\t\t       gen_rtx_HIGH (Pmode, orig)),\t\n-\t\t\t  insn);\n-      return gen_rtx_LO_SUM (Pmode, dp_reg, orig);\n-    }\n-\n-  return NULL_RTX;\n-}\n-\n-\n /* Provide the costs of an addressing mode that contains ADDR.\n    If ADDR is not a valid address, its cost is irrelevant.  \n    This is used in cse and loop optimisation to determine"}, {"sha": "ce1493debd13e0d96c5a72d4f15237189f5cb8b5", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 47, "deletions": 10, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb253d90defe2e01ffb187eb7d5921d8e4343f95/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb253d90defe2e01ffb187eb7d5921d8e4343f95/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=eb253d90defe2e01ffb187eb7d5921d8e4343f95", "patch": "@@ -1705,18 +1705,55 @@ CUMULATIVE_ARGS;\n \n #define LEGITIMIZE_RELOAD_ADDRESS(X,MODE,OPNUM,TYPE,IND_LEVELS,WIN)     \\\n {\t\t\t\t\t\t\t\t\t\\\n-  rtx new;\t\t\t\t\t\t\t\t\\\n-  new = c4x_legitimize_reload_address (X, MODE, insn);\t\t\t\\\n-  if (new != NULL_RTX)\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    (X) = new;\t\t\t\t\t\t\t\t\\\n-   /* We do not have to call push_reload because we do not require      \\\n-      any more reloads.  */\t\t\t\t\t\t\\\n-    goto WIN;\t\t\t\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n+  if (MODE != HImode\t\t\t\t\t\t\t\\\n+      && MODE != HFmode\t\t\t\t\t\t\t\\\n+      && GET_MODE (X) != HImode\t\t\t\t\t\t\\\n+      && GET_MODE (X) != HFmode\t\t\t\t\t\t\\\n+      && (GET_CODE (X) == CONST\t\t\t\t\t\t\\\n+          || GET_CODE (X) == SYMBOL_REF\t\t\t\t\t\\\n+          || GET_CODE (X) == LABEL_REF))\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (! TARGET_SMALL)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+          int i;\t\t\t\t\t\t\t\\\n+      \t  X = gen_rtx_LO_SUM (GET_MODE (X),\t\t\t\t\\\n+\t\t\t      gen_rtx_HIGH (GET_MODE (X), X), X);\t\\\n+          i = push_reload (XEXP (X, 0), NULL_RTX,\t\t\t\\\n+\t\t\t   &XEXP (X, 0), NULL_PTR,\t\t\t\\\n+\t\t           DP_REG, GET_MODE (X), VOIDmode, 0, 0,\t\\\n+\t\t           OPNUM, TYPE);\t\t\t\t\\\n+          /* The only valid reg is DP. This is a fixed reg and will\t\\\n+\t     normally not be used so force it.  */\t\t\t\\\n+          rld[i].reg_rtx = gen_rtx_REG (Pmode, DP_REGNO); \t\t\\\n+          rld[i].nocombine = 1; \t\t\t\t\t\\\n+        }\t\t\t\t\t\t\t\t\\\n+      goto WIN;\t\t\t\t\t\t\t\t\\\n+   }\t\t\t\t\t\t\t\t\t\\\n+  else if (MODE != HImode\t\t\t\t\t\t\\\n+           && MODE != HFmode\t\t\t\t\t\t\\\n+           && GET_MODE (X) != HImode\t\t\t\t\t\\\n+           && GET_MODE (X) != HFmode\t\t\t\t\t\\\n+           && GET_CODE (X) == LO_SUM\t\t\t\t\t\\\n+           && GET_CODE (XEXP (X,0)) == HIGH\t\t\t\t\\\n+           && (GET_CODE (XEXP (XEXP (X,0),0)) == CONST\t\t\t\\\n+               || GET_CODE (XEXP (XEXP (X,0),0)) == SYMBOL_REF\t\t\\\n+               || GET_CODE (XEXP (XEXP (X,0),0)) == LABEL_REF))\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (! TARGET_SMALL)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+          int i = push_reload (XEXP (X, 0), NULL_RTX,\t\t\t\\\n+\t\t\t       &XEXP (X, 0), NULL_PTR,\t\t\t\\\n+\t\t               DP_REG, GET_MODE (X), VOIDmode, 0, 0,\t\\\n+\t\t               OPNUM, TYPE);\t\t\t\t\\\n+          /* The only valid reg is DP. This is a fixed reg and will\t\\\n+\t     normally not be used so force it.  */\t\t\t\\\n+          rld[i].reg_rtx = gen_rtx_REG (Pmode, DP_REGNO); \t\t\\\n+          rld[i].nocombine = 1; \t\t\t\t\t\\\n+        }\t\t\t\t\t\t\t\t\\\n+      goto WIN;\t\t\t\t\t\t\t\t\\\n+   }\t\t\t\t\t\t\t\t\t\\\n }\n \n-\n /* No mode-dependent addresses on the C4x are autoincrements.  */\n \n #define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\t\\"}]}