{"sha": "9ee02b5c40bc7191e7bcfff58170689d1d9a06e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVlMDJiNWM0MGJjNzE5MWU3YmNmZmY1ODE3MDY4OWQxZDlhMDZlMQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-04-10T00:45:43Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-04-10T00:45:43Z"}, "message": "* cplus-dem.c: Sync with gcc.\n\nFrom-SVN: r19077", "tree": {"sha": "1c9d7327adff0a1d6357926cbe94a5642649dadd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c9d7327adff0a1d6357926cbe94a5642649dadd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ee02b5c40bc7191e7bcfff58170689d1d9a06e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee02b5c40bc7191e7bcfff58170689d1d9a06e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ee02b5c40bc7191e7bcfff58170689d1d9a06e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee02b5c40bc7191e7bcfff58170689d1d9a06e1/comments", "author": null, "committer": null, "parents": [{"sha": "963686319f012d2a346adf7f38c35ea55378a024", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/963686319f012d2a346adf7f38c35ea55378a024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/963686319f012d2a346adf7f38c35ea55378a024"}], "stats": {"total": 183, "additions": 162, "deletions": 21}, "files": [{"sha": "1acd2f3f4a5a79f3cb205ae492cca868f5e8445b", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee02b5c40bc7191e7bcfff58170689d1d9a06e1/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee02b5c40bc7191e7bcfff58170689d1d9a06e1/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=9ee02b5c40bc7191e7bcfff58170689d1d9a06e1", "patch": "@@ -1,3 +1,7 @@\n+Fri Apr 10 01:45:09 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* cplus-dem.c: Sync with gcc.\n+\n Thu Apr  2 13:53:54 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* choose-temp.c: Include system.h when IN_GCC."}, {"sha": "acdbfa897e2e090aaf3250456aecbdb2ae4a6f2e", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 158, "deletions": 21, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee02b5c40bc7191e7bcfff58170689d1d9a06e1/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee02b5c40bc7191e7bcfff58170689d1d9a06e1/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=9ee02b5c40bc7191e7bcfff58170689d1d9a06e1", "patch": "@@ -29,9 +29,14 @@ Boston, MA 02111-1307, USA.  */\n    try not to break either.  */\n \n #include <ctype.h>\n+#include <sys/types.h>\n #include <string.h>\n #include <stdio.h>\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n #include <demangle.h>\n #undef CURRENT_DEMANGLING_STYLE\n #define CURRENT_DEMANGLING_STYLE work->options\n@@ -223,6 +228,10 @@ static int\n demangle_method_args PARAMS ((struct work_stuff *work, const char **, string *));\n #endif\n \n+static int\n+demangle_template_template_parm PARAMS ((struct work_stuff *work, \n+\t\t\t\t\t const char **, string *));\n+\n static int\n demangle_template PARAMS ((struct work_stuff *work, const char **, string *,\n \t\t\t   string *, int));\n@@ -257,7 +266,7 @@ static int\n gnu_special PARAMS ((struct work_stuff *, const char **, string *));\n \n static int\n-arm_special PARAMS ((struct work_stuff *, const char **, string *));\n+arm_special PARAMS ((const char **, string *));\n \n static void\n string_need PARAMS ((string *, int));\n@@ -347,7 +356,7 @@ consume_count (type)\n }\n \n \n-/* Like consume_count, but for counts that are preceeded and followed\n+/* Like consume_count, but for counts that are preceded and followed\n    by '_' if they are greater than 10.  Also, -1 is returned for\n    failure, since 0 can be a valid value.  */\n \n@@ -843,7 +852,7 @@ demangle_signature (work, mangled, declp)\n \t    }\n \t  else\n \t    /* fall through */\n-\t    ;\n+\t    {;}\n \n \tdefault:\n \t  if (AUTO_DEMANGLING || GNU_DEMANGLING)\n@@ -927,6 +936,70 @@ demangle_method_args (work, mangled, declp)\n \n #endif\n \n+static int\n+demangle_template_template_parm (work, mangled, tname)\n+     struct work_stuff *work;\n+     const char **mangled;\n+     string *tname;\n+{\n+  int i;\n+  int r;\n+  int need_comma = 0;\n+  int success = 1;\n+  string temp;\n+\n+  string_append (tname, \"template <\");\n+  /* get size of template parameter list */\n+  if (get_count (mangled, &r))\n+    {\n+      for (i = 0; i < r; i++)\n+\t{\n+\t  if (need_comma)\n+\t    {\n+\t      string_append (tname, \", \");\n+\t    }\n+\n+\t    /* Z for type parameters */\n+\t    if (**mangled == 'Z')\n+\t      {\n+\t\t(*mangled)++;\n+\t\tstring_append (tname, \"class\");\n+\t      }\n+\t      /* z for template parameters */\n+\t    else if (**mangled == 'z')\n+\t      {\n+\t\t(*mangled)++;\n+\t\tsuccess = \n+\t\t  demangle_template_template_parm (work, mangled, tname);\n+\t\tif (!success)\n+\t\t  {\n+\t\t    break;\n+\t\t  }\n+\t      }\n+\t    else\n+\t      {\n+\t\t/* temp is initialized in do_type */\n+\t\tsuccess = do_type (work, mangled, &temp);\n+\t\tif (success)\n+\t\t  {\n+\t\t    string_appends (tname, &temp);\n+\t\t  }\n+\t\tstring_delete(&temp);\n+\t\tif (!success)\n+\t\t  {\n+\t\t    break;\n+\t\t  }\n+\t      }\n+\t  need_comma = 1;\n+\t}\n+\n+    }\n+  if (tname->p[-1] == '>')\n+    string_append (tname, \" \");\n+  string_append (tname, \"> class\");\n+  return (success);\n+}\n+\n static int\n demangle_integral_value (work, mangled, s)\n      struct work_stuff *work;\n@@ -1212,19 +1285,50 @@ demangle_template (work, mangled, tname, trawname, is_type)\n     {\n       start = *mangled;\n       /* get template name */\n-      if ((r = consume_count (mangled)) == 0 || strlen (*mangled) < r)\n+      if (**mangled == 'z')\n \t{\n-\t  return (0);\n+\t  int idx;\n+\t  (*mangled)++;\n+\t  (*mangled)++;\n+\n+\t  idx = consume_count_with_underscores (mangled);\n+\t  if (idx == -1 \n+\t      || (work->tmpl_argvec && idx >= work->ntmpl_args)\n+\t      || consume_count_with_underscores (mangled) == -1)\n+\t    {\n+\t      return (0);\n+\t    }\n+\t  if (work->tmpl_argvec)\n+\t    {\n+\t      string_append (tname, work->tmpl_argvec[idx]);\n+\t      if (trawname)\n+\t\tstring_append (trawname, work->tmpl_argvec[idx]);\n+\t    }\n+\t  else\n+\t    {\n+\t      char buf[10];\n+\t      sprintf(buf, \"T%d\", idx);\n+\t      string_append (tname, buf);\n+\t      if (trawname)\n+\t\tstring_append (trawname, work->tmpl_argvec[idx]);\n+\t    }\n \t}\n-      if (trawname)\n-\tstring_appendn (trawname, *mangled, r);\n-      is_java_array = (work -> options & DMGL_JAVA)\n-\t&& strncmp (*mangled, \"JArray1Z\", 8) == 0;\n-      if (! is_java_array)\n+      else\n \t{\n-\t  string_appendn (tname, *mangled, r);\n+\t  if ((r = consume_count (mangled)) == 0 || strlen (*mangled) < r)\n+\t    {\n+\t      return (0);\n+\t    }\n+\t  if (trawname)\n+\t    string_appendn (trawname, *mangled, r);\n+\t  is_java_array = (work -> options & DMGL_JAVA)\n+\t    && strncmp (*mangled, \"JArray1Z\", 8) == 0;\n+\t  if (! is_java_array)\n+\t    {\n+\t      string_appendn (tname, *mangled, r);\n+\t    }\n+\t  *mangled += r;\n \t}\n-      *mangled += r;\n     }\n   if (!is_java_array)\n     string_append (tname, \"<\");\n@@ -1272,6 +1376,33 @@ demangle_template (work, mangled, tname, trawname, is_type)\n \t      break;\n \t    }\n \t}\n+      /* z for template parameters */\n+      else if (**mangled == 'z')\n+\t{\n+\t  int r2;\n+\t  (*mangled)++;\n+\t  success = demangle_template_template_parm (work, mangled, tname);\n+\t  \n+\t  if (success\n+\t      && (r2 = consume_count (mangled)) > 0 && strlen (*mangled) >= r2)\n+\t    {\n+\t      string_append (tname, \" \");\n+\t      string_appendn (tname, *mangled, r2);\n+\t      if (!is_type)\n+\t\t{\n+\t\t  /* Save the template argument. */\n+\t\t  int len = r2;\n+\t\t  work->tmpl_argvec[i] = xmalloc (len + 1);\n+\t\t  memcpy (work->tmpl_argvec[i], *mangled, len);\n+\t\t  work->tmpl_argvec[i][len] = '\\0';\n+\t\t}\n+\t      *mangled += r2;\n+\t    }\n+\t  if (!success)\n+\t    {\n+\t      break;\n+\t    }\n+\t}\n       else\n \t{\n \t  string  param;\n@@ -1644,7 +1775,7 @@ demangle_prefix (work, mangled, declp)\n \t then find the next \"__\" that separates the prefix from the signature.\n \t */\n       if (!(ARM_DEMANGLING || LUCID_DEMANGLING)\n-\t  || (arm_special (work, mangled, declp) == 0))\n+\t  || (arm_special (mangled, declp) == 0))\n \t{\n \t  while (*scan == '_')\n \t    {\n@@ -1897,8 +2028,8 @@ LOCAL FUNCTION\n SYNOPSIS\n \n \tstatic int\n-\tarm_special (struct work_stuff *work, const char **mangled,\n-\t\t\tstring *declp);\n+\tarm_special (const char **mangled,\n+\t\t     string *declp);\n \n \n DESCRIPTION\n@@ -1912,8 +2043,7 @@ DESCRIPTION\n  */\n \n static int\n-arm_special (work, mangled, declp)\n-     struct work_stuff *work;\n+arm_special (mangled, declp)\n      const char **mangled;\n      string *declp;\n {\n@@ -2409,7 +2539,6 @@ do_type (work, mangled, result)\n       /* A template parm.  We substitute the corresponding argument. */\n       {\n \tint idx;\n-\tint lvl;\n \n \t(*mangled)++;\n \tidx = consume_count_with_underscores (mangled);\n@@ -2865,8 +2994,7 @@ demangle_function_name (work, mangled, declp, scan)\n      string *declp;\n      const char *scan;\n {\n-  int i;\n-  int len;\n+  size_t i;\n   string type;\n   const char *tem;\n \n@@ -2913,7 +3041,7 @@ demangle_function_name (work, mangled, declp, scan)\n \t{\n \t  for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n \t    {\n-\t      len = declp->p - declp->b - 10;\n+\t      int len = declp->p - declp->b - 10;\n \t      if (strlen (optable[i].in) == len\n \t\t  && memcmp (optable[i].in, declp->b + 10, len) == 0)\n \t\t{\n@@ -3223,6 +3351,15 @@ static struct option long_options[] = {\n   {0, no_argument, 0, 0}\n };\n \n+/* More 'friendly' abort that prints the line and file.\n+   config.h can #define abort fancy_abort if you like that sort of thing.  */\n+\n+void\n+fancy_abort ()\n+{\n+  fatal (\"Internal gcc abort.\");\n+}\n+\n int\n main (argc, argv)\n      int argc;"}]}