{"sha": "f981395c220c9afd73be138294946e085e64af78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk4MTM5NWMyMjBjOWFmZDczYmUxMzgyOTQ5NDZlMDg1ZTY0YWY3OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-11T19:39:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-11T19:40:16Z"}, "message": "c++: Use of 'this' in parameter declaration [PR90748]\n\nWe were incorrectly accepting the use of 'this' at parse time and then\ncrashing when we tried to instantiate it.  It is invalid because 'this' is\nnot in scope until after the function-cv-quals.  So let's hoist setting\ncurrent_class_ptr up from cp_parser_late_return_type_opt into\ncp_parser_direct_declarator where it can work for noexcept as well.\n\ngcc/cp/ChangeLog\n2020-05-11  Jason Merrill  <jason@redhat.com>\n\n\tPR c++/90748\n\t* parser.c (inject_parm_decls): Set current_class_ptr here.\n\t(cp_parser_direct_declarator): And here.\n\t(cp_parser_late_return_type_opt): Not here.\n\t(cp_parser_noexcept_specification_opt): Nor here.\n\t(cp_parser_exception_specification_opt)\n\t(cp_parser_late_noexcept_specifier): Remove unneeded parameters.", "tree": {"sha": "03be94f1b7216f85b1fdebd157144d0f95685e5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03be94f1b7216f85b1fdebd157144d0f95685e5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f981395c220c9afd73be138294946e085e64af78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f981395c220c9afd73be138294946e085e64af78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f981395c220c9afd73be138294946e085e64af78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f981395c220c9afd73be138294946e085e64af78/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1422c2e4462c9b7c44aa035ac56af77565556181", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1422c2e4462c9b7c44aa035ac56af77565556181", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1422c2e4462c9b7c44aa035ac56af77565556181"}], "stats": {"total": 107, "additions": 56, "deletions": 51}, "files": [{"sha": "3f1350648871c4a4e8ae60dab2d8883f417216e9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f981395c220c9afd73be138294946e085e64af78/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f981395c220c9afd73be138294946e085e64af78/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f981395c220c9afd73be138294946e085e64af78", "patch": "@@ -1,3 +1,13 @@\n+2020-05-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/90748\n+\t* parser.c (inject_parm_decls): Set current_class_ptr here.\n+\t(cp_parser_direct_declarator): And here.\n+\t(cp_parser_late_return_type_opt): Not here.\n+\t(cp_parser_noexcept_specification_opt): Nor here.\n+\t(cp_parser_exception_specification_opt)\n+\t(cp_parser_late_noexcept_specifier): Remove unneeded parameters.\n+\n 2020-05-11  Jason Merrill  <jason@redhat.com>\n \n \t* decl.c (cxx_init_decl_processing): Call declare_weak for"}, {"sha": "10627cb1c92dcc186ed2a86beff7ee474ef82f1b", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 36, "deletions": 51, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f981395c220c9afd73be138294946e085e64af78/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f981395c220c9afd73be138294946e085e64af78/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=f981395c220c9afd73be138294946e085e64af78", "patch": "@@ -246,7 +246,7 @@ static void cp_lexer_stop_debugging\n static cp_token_cache *cp_token_cache_new\n   (cp_token *, cp_token *);\n static tree cp_parser_late_noexcept_specifier\n-  (cp_parser *, tree, tree);\n+  (cp_parser *, tree);\n static void noexcept_override_late_checks\n   (tree, tree);\n \n@@ -2246,7 +2246,7 @@ static cp_ref_qualifier cp_parser_ref_qualifier_opt\n static tree cp_parser_tx_qualifier_opt\n   (cp_parser *);\n static tree cp_parser_late_return_type_opt\n-  (cp_parser *, cp_declarator *, tree &, cp_cv_quals);\n+  (cp_parser *, cp_declarator *, tree &);\n static tree cp_parser_declarator_id\n   (cp_parser *, bool);\n static tree cp_parser_type_id\n@@ -2385,11 +2385,11 @@ static tree cp_parser_exception_declaration\n static tree cp_parser_throw_expression\n   (cp_parser *);\n static tree cp_parser_exception_specification_opt\n-  (cp_parser *, cp_parser_flags, cp_cv_quals);\n+  (cp_parser *, cp_parser_flags);\n static tree cp_parser_type_id_list\n   (cp_parser *);\n static tree cp_parser_noexcept_specification_opt\n-  (cp_parser *, cp_parser_flags, bool, bool *, bool, cp_cv_quals);\n+  (cp_parser *, cp_parser_flags, bool, bool *, bool);\n \n /* GNU Extensions */\n \n@@ -11082,8 +11082,7 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n \n       /* Parse optional exception specification.  */\n       exception_spec\n-\t= cp_parser_exception_specification_opt (parser, CP_PARSER_FLAGS_NONE,\n-\t\t\t\t\t\t quals);\n+\t= cp_parser_exception_specification_opt (parser, CP_PARSER_FLAGS_NONE);\n \n       std_attrs = cp_parser_std_attribute_spec_seq (parser);\n \n@@ -21227,11 +21226,17 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t  ref_qual = cp_parser_ref_qualifier_opt (parser);\n \t\t  /* Parse the tx-qualifier.  */\n \t\t  tree tx_qual = cp_parser_tx_qualifier_opt (parser);\n-\t\t  /* And the exception-specification.  */\n+\n+\t\t  tree save_ccp = current_class_ptr;\n+\t\t  tree save_ccr = current_class_ref;\n+\t\t  if (memfn)\n+\t\t    /* DR 1207: 'this' is in scope after the cv-quals.  */\n+\t\t    inject_this_parameter (current_class_type, cv_quals);\n+\n+\t\t  /* Parse the exception-specification.  */\n \t\t  exception_specification\n \t\t    = cp_parser_exception_specification_opt (parser,\n-\t\t\t\t\t\t\t     flags,\n-\t\t\t\t\t\t\t     cv_quals);\n+\t\t\t\t\t\t\t     flags);\n \n \t\t  attrs = cp_parser_std_attribute_spec_seq (parser);\n \n@@ -21241,8 +21246,7 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t  tree gnu_attrs = NULL_TREE;\n \t\t  tree requires_clause = NULL_TREE;\n \t\t  late_return = (cp_parser_late_return_type_opt\n-\t\t\t\t (parser, declarator, requires_clause,\n-\t\t\t\t  memfn ? cv_quals : -1));\n+\t\t\t\t (parser, declarator, requires_clause));\n \n \t\t  /* Parse the virt-specifier-seq.  */\n \t\t  virt_specifiers = cp_parser_virt_specifier_seq_opt (parser);\n@@ -21264,6 +21268,9 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t     function.  */\n \t\t  parser->default_arg_ok_p = false;\n \n+\t\t  current_class_ptr = save_ccp;\n+\t\t  current_class_ref = save_ccr;\n+\n \t\t  /* Restore the state of local_variables_forbidden_p.  */\n \t\t  parser->local_variables_forbidden_p\n \t\t    = local_variables_forbidden_p;\n@@ -22077,7 +22084,7 @@ parsing_nsdmi (void)\n \n static tree\n cp_parser_late_return_type_opt (cp_parser* parser, cp_declarator *declarator,\n-\t\t\t\ttree& requires_clause, cp_cv_quals quals)\n+\t\t\t\ttree& requires_clause)\n {\n   cp_token *token;\n   tree type = NULL_TREE;\n@@ -22099,14 +22106,6 @@ cp_parser_late_return_type_opt (cp_parser* parser, cp_declarator *declarator,\n       && !(declare_simd_p || oacc_routine_p))\n     return NULL_TREE;\n \n-  tree save_ccp = current_class_ptr;\n-  tree save_ccr = current_class_ref;\n-  if (quals >= 0)\n-    {\n-      /* DR 1207: 'this' is in scope in the trailing return type.  */\n-      inject_this_parameter (current_class_type, quals);\n-    }\n-\n   if (token->type == CPP_DEREF)\n     {\n       /* Consume the ->.  */\n@@ -22128,12 +22127,6 @@ cp_parser_late_return_type_opt (cp_parser* parser, cp_declarator *declarator,\n       = cp_parser_late_parsing_oacc_routine (parser,\n \t\t\t\t\t     declarator->attributes);\n \n-  if (quals >= 0)\n-    {\n-      current_class_ptr = save_ccp;\n-      current_class_ref = save_ccr;\n-    }\n-\n   return type;\n }\n \n@@ -23782,6 +23775,14 @@ inject_parm_decls (tree decl)\n   tree args = DECL_ARGUMENTS (decl);\n \n   do_push_parm_decls (decl, args, /*nonparms=*/NULL);\n+\n+  if (args && is_this_parameter (args))\n+    {\n+      gcc_checking_assert (current_class_ptr == NULL_TREE);\n+      current_class_ptr = NULL_TREE;\n+      current_class_ref = cp_build_fold_indirect_ref (args);\n+      current_class_ptr = args;\n+    }\n }\n \n /* Undo the effects of inject_parm_decls.  */\n@@ -23790,6 +23791,7 @@ static void\n pop_injected_parms (void)\n {\n   pop_bindings_and_leave_scope ();\n+  current_class_ptr = current_class_ref = NULL_TREE;\n }\n \n /* Parse a class-specifier.\n@@ -24131,7 +24133,7 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n \t    parser->local_variables_forbidden_p |= THIS_FORBIDDEN;\n \n \t  /* Now we can parse the noexcept-specifier.  */\n-\t  spec = cp_parser_late_noexcept_specifier (parser, spec, decl);\n+\t  spec = cp_parser_late_noexcept_specifier (parser, spec);\n \n \t  if (spec != error_mark_node)\n \t    TREE_TYPE (decl) = build_exception_variant (TREE_TYPE (decl), spec);\n@@ -25762,8 +25764,7 @@ cp_parser_save_noexcept (cp_parser *parser)\n    member function.  */\n \n static tree\n-cp_parser_late_noexcept_specifier (cp_parser *parser, tree default_arg,\n-\t\t\t\t   tree decl)\n+cp_parser_late_noexcept_specifier (cp_parser *parser, tree default_arg)\n {\n   /* Make sure we've gotten something that hasn't been parsed yet.  */\n   gcc_assert (TREE_CODE (default_arg) == DEFERRED_PARSE);\n@@ -25775,16 +25776,13 @@ cp_parser_late_noexcept_specifier (cp_parser *parser, tree default_arg,\n   cp_token_cache *tokens = DEFPARSE_TOKENS (default_arg);\n   cp_parser_push_lexer_for_tokens (parser, tokens);\n \n-  /* We need to know if this member function was declared `const'.  Look\n-     at the this parameter to figure that out.  */\n-  cp_cv_quals quals = type_memfn_quals (TREE_TYPE (decl));\n   /* Parse the cached noexcept-specifier.  */\n   tree parsed_arg\n     = cp_parser_noexcept_specification_opt (parser,\n \t\t\t\t\t    CP_PARSER_FLAGS_NONE,\n \t\t\t\t\t    /*require_constexpr=*/true,\n \t\t\t\t\t    /*consumed_expr=*/NULL,\n-\t\t\t\t\t    /*return_cond=*/false, quals);\n+\t\t\t\t\t    /*return_cond=*/false);\n \n   /* Revert to the main lexer.  */\n   cp_parser_pop_lexer (parser);\n@@ -25842,8 +25840,7 @@ cp_parser_noexcept_specification_opt (cp_parser* parser,\n \t\t\t\t      cp_parser_flags flags,\n \t\t\t\t      bool require_constexpr,\n \t\t\t\t      bool* consumed_expr,\n-\t\t\t\t      bool return_cond,\n-\t\t\t\t      cp_cv_quals quals)\n+\t\t\t\t      bool return_cond)\n {\n   cp_token *token;\n   const char *saved_message;\n@@ -25885,12 +25882,6 @@ cp_parser_noexcept_specification_opt (cp_parser* parser,\n \t  matching_parens parens;\n \t  parens.consume_open (parser);\n \n-\t  tree save_ccp = current_class_ptr;\n-\t  tree save_ccr = current_class_ref;\n-\n-\t  if (current_class_type)\n-\t    inject_this_parameter (current_class_type, quals);\n-\n \t  if (require_constexpr)\n \t    {\n \t      /* Types may not be defined in an exception-specification.  */\n@@ -25920,9 +25911,6 @@ cp_parser_noexcept_specification_opt (cp_parser* parser,\n \t    }\n \n \t  parens.require_close (parser);\n-\n-\t  current_class_ptr = save_ccp;\n-\t  current_class_ref = save_ccr;\n \t}\n       else\n \t{\n@@ -25954,8 +25942,7 @@ cp_parser_noexcept_specification_opt (cp_parser* parser,\n \n static tree\n cp_parser_exception_specification_opt (cp_parser* parser,\n-\t\t\t\t       cp_parser_flags flags,\n-\t\t\t\t       cp_cv_quals quals)\n+\t\t\t\t       cp_parser_flags flags)\n {\n   cp_token *token;\n   tree type_id_list;\n@@ -25969,7 +25956,7 @@ cp_parser_exception_specification_opt (cp_parser* parser,\n     = cp_parser_noexcept_specification_opt (parser, flags,\n \t\t\t\t\t    /*require_constexpr=*/true,\n \t\t\t\t\t    /*consumed_expr=*/NULL,\n-\t\t\t\t\t    /*return_cond=*/false, quals);\n+\t\t\t\t\t    /*return_cond=*/false);\n   if (type_id_list != NULL_TREE)\n     return type_id_list;\n \n@@ -43293,8 +43280,7 @@ cp_parser_transaction (cp_parser *parser, cp_token *token)\n \t\t\t\t\t\t CP_PARSER_FLAGS_NONE,\n \t\t\t\t\t\t /*require_constexpr=*/true,\n \t\t\t\t\t\t /*consumed_expr=*/NULL,\n-\t\t\t\t\t\t /*return_cond=*/true,\n-\t\t\t\t\t\t TYPE_UNQUALIFIED);\n+\t\t\t\t\t\t /*return_cond=*/true);\n \n   /* Keep track if we're in the lexical scope of an outer transaction.  */\n   new_in = this_in | (old_in & TM_STMT_ATTR_OUTER);\n@@ -43358,8 +43344,7 @@ cp_parser_transaction_expression (cp_parser *parser, enum rid keyword)\n \t\t\t\t\t       CP_PARSER_FLAGS_NONE,\n \t\t\t\t\t       /*require_constexpr=*/false,\n \t\t\t\t\t       &noex_expr,\n-\t\t\t\t\t       /*return_cond=*/true,\n-\t\t\t\t\t       TYPE_UNQUALIFIED);\n+\t\t\t\t\t       /*return_cond=*/true);\n \n   if (!noex || !noex_expr\n       || cp_lexer_peek_token (parser->lexer)->type == CPP_OPEN_PAREN)"}, {"sha": "c752601ba09e751ee3ef522443afc82a3ca69947", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept59.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f981395c220c9afd73be138294946e085e64af78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept59.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f981395c220c9afd73be138294946e085e64af78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept59.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept59.C?ref=f981395c220c9afd73be138294946e085e64af78", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/90748\n+// { dg-do compile { target c++11 } }\n+\n+template <class ...Ts> class A\n+{\n+  void e ();\n+  bool f (int() noexcept(this->e())); // { dg-error \"this\" }\n+  bool g (int() noexcept(e()));\t      // { dg-error \"without object\" }\n+};\n+A<> b;"}]}