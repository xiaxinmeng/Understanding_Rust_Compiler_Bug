{"sha": "1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFmNGViZjU5ODVlZjJhYWFjMTM4NjI2NTQwNDRkODRhM2NkN2FlNA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2017-11-21T18:23:56Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2017-11-21T18:23:56Z"}, "message": "New POINTER_DIFF_EXPR\n\n2017-11-21  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/c/\n\t* c-fold.c (c_fully_fold_internal): Handle POINTER_DIFF_EXPR.\n\t* c-typeck.c (pointer_diff): Use POINTER_DIFF_EXPR.\n\ngcc/c-family/\n\t* c-pretty-print.c (pp_c_additive_expression,\n\tc_pretty_printer::expression): Handle POINTER_DIFF_EXPR.\n\ngcc/cp/\n\t* constexpr.c (cxx_eval_constant_expression,\n\tpotential_constant_expression_1): Handle POINTER_DIFF_EXPR.\n\t* cp-gimplify.c (cp_fold): Likewise.\n\t* error.c (dump_expr): Likewise.\n\t* typeck.c (pointer_diff): Use POINTER_DIFF_EXPR.\n\ngcc/\n\t* doc/generic.texi: Document POINTER_DIFF_EXPR, update\n\tPOINTER_PLUS_EXPR.\n\t* cfgexpand.c (expand_debug_expr): Handle POINTER_DIFF_EXPR.\n\t* expr.c (expand_expr_real_2): Likewise.\n\t* fold-const.c (const_binop, fold_addr_of_array_ref_difference,\n\tfold_binary_loc): Likewise.\n\t* match.pd (X-X, P+(Q-P), &D-P, (P+N)-P, P-(P+N), (P+M)-(P+N),\n\tP-Q==0, -(A-B), X-Z<Y-Z, (X-Z)-(Y-Z), Z-X<Z-Y, (Z-X)-(Z-Y),\n\t(A-B)+(C-A)): New transformations for POINTER_DIFF_EXPR, based on\n\tMINUS_EXPR transformations.\n\t* optabs-tree.c (optab_for_tree_code): Handle POINTER_DIFF_EXPR.\n\t* tree-cfg.c (verify_expr, verify_gimple_assign_binary): Likewise.\n\t* tree-inline.c (estimate_operator_cost): Likewise.\n\t* tree-pretty-print.c (dump_generic_node, op_code_prio,\n\top_symbol_code): Likewise.\n\t* tree-vect-stmts.c (vectorizable_operation): Likewise.\n\t* vr-values.c (extract_range_from_binary_expr): Likewise.\n\t* varasm.c (initializer_constant_valid_p_1): Likewise.\n\t* tree.def: New tree code POINTER_DIFF_EXPR.\n\nFrom-SVN: r255021", "tree": {"sha": "6136f270e536b46d7d9de96d28e38794684035dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6136f270e536b46d7d9de96d28e38794684035dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ffb41aab7a9b8475e773b75fdebd194f4491c9db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb41aab7a9b8475e773b75fdebd194f4491c9db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffb41aab7a9b8475e773b75fdebd194f4491c9db"}], "stats": {"total": 334, "additions": 284, "deletions": 50}, "files": [{"sha": "a34c125d429f6d5471b0cc200aa89e9b9bf893b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -1,3 +1,25 @@\n+2017-11-21  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* doc/generic.texi: Document POINTER_DIFF_EXPR, update\n+\tPOINTER_PLUS_EXPR.\n+\t* cfgexpand.c (expand_debug_expr): Handle POINTER_DIFF_EXPR.\n+\t* expr.c (expand_expr_real_2): Likewise.\n+\t* fold-const.c (const_binop, fold_addr_of_array_ref_difference,\n+\tfold_binary_loc): Likewise.\n+\t* match.pd (X-X, P+(Q-P), &D-P, (P+N)-P, P-(P+N), (P+M)-(P+N),\n+\tP-Q==0, -(A-B), X-Z<Y-Z, (X-Z)-(Y-Z), Z-X<Z-Y, (Z-X)-(Z-Y),\n+\t(A-B)+(C-A)): New transformations for POINTER_DIFF_EXPR, based on\n+\tMINUS_EXPR transformations.\n+\t* optabs-tree.c (optab_for_tree_code): Handle POINTER_DIFF_EXPR.\n+\t* tree-cfg.c (verify_expr, verify_gimple_assign_binary): Likewise.\n+\t* tree-inline.c (estimate_operator_cost): Likewise.\n+\t* tree-pretty-print.c (dump_generic_node, op_code_prio,\n+\top_symbol_code): Likewise.\n+\t* tree-vect-stmts.c (vectorizable_operation): Likewise.\n+\t* vr-values.c (extract_range_from_binary_expr): Likewise.\n+\t* varasm.c (initializer_constant_valid_p_1): Likewise.\n+\t* tree.def: New tree code POINTER_DIFF_EXPR.\n+\n 2017-11-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*bswap<mode>2_movbe): Add"}, {"sha": "08d8cec9443090dac4b0ddb24f3daaa8f5a274c6", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -1,3 +1,8 @@\n+2017-11-21  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* c-pretty-print.c (pp_c_additive_expression,\n+\tc_pretty_printer::expression): Handle POINTER_DIFF_EXPR.\n+\n 2017-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-common.c (get_nonnull_operand): Use tree_to_uhwi."}, {"sha": "15e13ea5a2f207e75bed635440d566dd97ad8e6a", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -1876,6 +1876,7 @@ pp_c_additive_expression (c_pretty_printer *pp, tree e)\n     {\n     case POINTER_PLUS_EXPR:\n     case PLUS_EXPR:\n+    case POINTER_DIFF_EXPR:\n     case MINUS_EXPR:\n       pp_c_additive_expression (pp, TREE_OPERAND (e, 0));\n       pp_c_whitespace (pp);\n@@ -2292,6 +2293,7 @@ c_pretty_printer::expression (tree e)\n \n     case POINTER_PLUS_EXPR:\n     case PLUS_EXPR:\n+    case POINTER_DIFF_EXPR:\n     case MINUS_EXPR:\n       pp_c_additive_expression (this, e);\n       break;"}, {"sha": "a2773b0956f343c1e747fb0045c91f408ec05445", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -1,3 +1,8 @@\n+2017-11-21  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* c-fold.c (c_fully_fold_internal): Handle POINTER_DIFF_EXPR.\n+\t* c-typeck.c (pointer_diff): Use POINTER_DIFF_EXPR.\n+\n 2017-11-20  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/81404"}, {"sha": "889546271597c0660f539288f31188a6e349b749", "filename": "gcc/c/c-fold.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fc%2Fc-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fc%2Fc-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-fold.c?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -306,6 +306,7 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n     case MINUS_EXPR:\n     case MULT_EXPR:\n     case POINTER_PLUS_EXPR:\n+    case POINTER_DIFF_EXPR:\n     case TRUNC_DIV_EXPR:\n     case CEIL_DIV_EXPR:\n     case FLOOR_DIV_EXPR:"}, {"sha": "7f85c6b216e0de8b5b408a167eb5fa146c70e556", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -3778,7 +3778,7 @@ parser_build_binary_op (location_t location, enum tree_code code,\n }\n \f\n /* Return a tree for the difference of pointers OP0 and OP1.\n-   The resulting tree has type int.  */\n+   The resulting tree has type ptrdiff_t.  */\n \n static tree\n pointer_diff (location_t loc, tree op0, tree op1)\n@@ -3810,7 +3810,7 @@ pointer_diff (location_t loc, tree op0, tree op1)\n       op1 = convert (common_type, op1);\n     }\n \n-  /* Determine integer type to perform computations in.  This will usually\n+  /* Determine integer type result of the subtraction.  This will usually\n      be the same as the result type (ptrdiff_t), but may need to be a wider\n      type if pointers for the address space are wider than ptrdiff_t.  */\n   if (TYPE_PRECISION (restype) < TYPE_PRECISION (TREE_TYPE (op0)))\n@@ -3825,14 +3825,21 @@ pointer_diff (location_t loc, tree op0, tree op1)\n     pedwarn (loc, OPT_Wpointer_arith,\n \t     \"pointer to a function used in subtraction\");\n \n-  /* First do the subtraction as integers;\n-     then drop through to build the divide operator.\n-     Do not do default conversions on the minus operator\n-     in case restype is a short type.  */\n+  /* First do the subtraction, then build the divide operator\n+     and only convert at the very end.\n+     Do not do default conversions in case restype is a short type.  */\n+\n+  /* POINTER_DIFF_EXPR requires a signed integer type of the same size as\n+     pointers.  If some platform cannot provide that, or has a larger\n+     ptrdiff_type to support differences larger than half the address\n+     space, cast the pointers to some larger integer type and do the\n+     computations in that type.  */\n+  if (TYPE_PRECISION (inttype) > TYPE_PRECISION (TREE_TYPE (op0)))\n+       op0 = build_binary_op (loc, MINUS_EXPR, convert (inttype, op0),\n+\t\t\t      convert (inttype, op1), false);\n+  else\n+    op0 = build2_loc (loc, POINTER_DIFF_EXPR, inttype, op0, op1);\n \n-  op0 = build_binary_op (loc,\n-\t\t\t MINUS_EXPR, convert (inttype, op0),\n-\t\t\t convert (inttype, op1), false);\n   /* This generates an error if op1 is pointer to incomplete type.  */\n   if (!COMPLETE_OR_VOID_TYPE_P (TREE_TYPE (TREE_TYPE (orig_op1))))\n     error_at (loc, \"arithmetic on pointer to an incomplete type\");"}, {"sha": "a63b414520f143f25989c00ffa6cbb81e8f0dff8", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -4623,6 +4623,7 @@ expand_debug_expr (tree exp)\n       return simplify_gen_binary (PLUS, mode, op0, op1);\n \n     case MINUS_EXPR:\n+    case POINTER_DIFF_EXPR:\n       return simplify_gen_binary (MINUS, mode, op0, op1);\n \n     case MULT_EXPR:"}, {"sha": "8a6328a8bffdac6cd64acf353d1511d3b75a436d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -1,3 +1,11 @@\n+2017-11-21  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* constexpr.c (cxx_eval_constant_expression,\n+\tpotential_constant_expression_1): Handle POINTER_DIFF_EXPR.\n+\t* cp-gimplify.c (cp_fold): Likewise.\n+\t* error.c (dump_expr): Likewise.\n+\t* typeck.c (pointer_diff): Use POINTER_DIFF_EXPR.\n+\n 2017-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tP0428R2 - familiar template syntax for generic lambdas"}, {"sha": "34a9c6b9d507cf0149d08f9bfad68c420645685c", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -4336,6 +4336,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       break;\n \n     case POINTER_PLUS_EXPR:\n+    case POINTER_DIFF_EXPR:\n     case PLUS_EXPR:\n     case MINUS_EXPR:\n     case MULT_EXPR:\n@@ -5590,6 +5591,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n         return true;\n       }\n \n+    case POINTER_DIFF_EXPR:\n     case MINUS_EXPR:\n       want_rval = true;\n       goto binary;"}, {"sha": "d597ed99009ab1311db09a9f4c55fe0be742b373", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -2227,6 +2227,7 @@ cp_fold (tree x)\n       /* FALLTHRU */\n     case POINTER_PLUS_EXPR:\n     case PLUS_EXPR:\n+    case POINTER_DIFF_EXPR:\n     case MINUS_EXPR:\n     case MULT_EXPR:\n     case TRUNC_DIV_EXPR:"}, {"sha": "7125b88e29e529a1adb33248d949f54802b7390f", "filename": "gcc/cp/error.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -2227,6 +2227,10 @@ dump_expr (cxx_pretty_printer *pp, tree t, int flags)\n       dump_binary_op (pp, \"+\", t, flags);\n       break;\n \n+    case POINTER_DIFF_EXPR:\n+      dump_binary_op (pp, \"-\", t, flags);\n+      break;\n+\n     case INIT_EXPR:\n     case MODIFY_EXPR:\n       dump_binary_op (pp, OVL_OP_INFO (true, NOP_EXPR)->name, t, flags);"}, {"sha": "8ba6a124aa9896aadfac1db5e9a6bded8c3e8d26", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -5396,7 +5396,7 @@ static tree\n pointer_diff (location_t loc, tree op0, tree op1, tree ptrtype,\n \t      tsubst_flags_t complain)\n {\n-  tree result;\n+  tree result, inttype;\n   tree restype = ptrdiff_type_node;\n   tree target_type = TREE_TYPE (ptrtype);\n \n@@ -5428,14 +5428,31 @@ pointer_diff (location_t loc, tree op0, tree op1, tree ptrtype,\n \treturn error_mark_node;\n     }\n \n-  /* First do the subtraction as integers;\n-     then drop through to build the divide operator.  */\n-\n-  op0 = cp_build_binary_op (loc,\n-\t\t\t    MINUS_EXPR,\n-\t\t\t    cp_convert (restype, op0, complain),\n-\t\t\t    cp_convert (restype, op1, complain),\n-\t\t\t    complain);\n+  /* Determine integer type result of the subtraction.  This will usually\n+     be the same as the result type (ptrdiff_t), but may need to be a wider\n+     type if pointers for the address space are wider than ptrdiff_t.  */\n+  if (TYPE_PRECISION (restype) < TYPE_PRECISION (TREE_TYPE (op0)))\n+    inttype = c_common_type_for_size (TYPE_PRECISION (TREE_TYPE (op0)), 0);\n+  else\n+    inttype = restype;\n+\n+  /* First do the subtraction, then build the divide operator\n+     and only convert at the very end.\n+     Do not do default conversions in case restype is a short type.  */\n+\n+  /* POINTER_DIFF_EXPR requires a signed integer type of the same size as\n+     pointers.  If some platform cannot provide that, or has a larger\n+     ptrdiff_type to support differences larger than half the address\n+     space, cast the pointers to some larger integer type and do the\n+     computations in that type.  */\n+  if (TYPE_PRECISION (inttype) > TYPE_PRECISION (TREE_TYPE (op0)))\n+    op0 = cp_build_binary_op (loc,\n+\t\t\t      MINUS_EXPR,\n+\t\t\t      cp_convert (inttype, op0, complain),\n+\t\t\t      cp_convert (inttype, op1, complain),\n+\t\t\t      complain);\n+  else\n+    op0 = build2_loc (loc, POINTER_DIFF_EXPR, inttype, op0, op1);\n \n   /* This generates an error if op1 is a pointer to an incomplete type.  */\n   if (!COMPLETE_TYPE_P (TREE_TYPE (TREE_TYPE (op1))))\n@@ -5461,9 +5478,9 @@ pointer_diff (location_t loc, tree op0, tree op1, tree ptrtype,\n \n   /* Do the division.  */\n \n-  result = build2_loc (loc, EXACT_DIV_EXPR, restype, op0,\n-\t\t       cp_convert (restype, op1, complain));\n-  return result;\n+  result = build2_loc (loc, EXACT_DIV_EXPR, inttype, op0,\n+\t\t       cp_convert (inttype, op1, complain));\n+  return cp_convert (restype, result, complain);\n }\n \f\n /* Construct and perhaps optimize a tree representation"}, {"sha": "b03970f74cc926992687db01c1aac0b057353798", "filename": "gcc/doc/generic.texi", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fdoc%2Fgeneric.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fdoc%2Fgeneric.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgeneric.texi?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -1224,6 +1224,7 @@ the byte offset of the field, but should not be used directly; call\n @tindex TRUTH_OR_EXPR\n @tindex TRUTH_XOR_EXPR\n @tindex POINTER_PLUS_EXPR\n+@tindex POINTER_DIFF_EXPR\n @tindex PLUS_EXPR\n @tindex MINUS_EXPR\n @tindex MULT_EXPR\n@@ -1413,8 +1414,16 @@ always of @code{BOOLEAN_TYPE} or @code{INTEGER_TYPE}.\n @item POINTER_PLUS_EXPR\n This node represents pointer arithmetic.  The first operand is always\n a pointer/reference type.  The second operand is always an unsigned\n-integer type compatible with sizetype.  This is the only binary\n-arithmetic operand that can operate on pointer types.\n+integer type compatible with sizetype.  This and POINTER_DIFF_EXPR are\n+the only binary arithmetic operators that can operate on pointer types.\n+\n+@item POINTER_DIFF_EXPR\n+This node represents pointer subtraction.  The two operands always\n+have pointer/reference type.  It returns a signed integer of the same\n+precision as the pointers.  The behavior is undefined if the difference\n+of the two pointers, seen as infinite precision non-negative integers,\n+does not fit in the result type.  The result does not depend on the\n+pointer type, it is not divided by the size of the pointed-to type.\n \n @item PLUS_EXPR\n @itemx MINUS_EXPR"}, {"sha": "3341e94d6f0873a412affaa31eabd6921ae56c86", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -8555,6 +8555,7 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n       return REDUCE_BIT_FIELD (simplify_gen_binary (PLUS, mode, op0, op1));\n \n     case MINUS_EXPR:\n+    case POINTER_DIFF_EXPR:\n     do_minus:\n       /* For initializers, we are allowed to return a MINUS of two\n \t symbolic constants.  Here we handle all cases when both operands"}, {"sha": "9fe346243dd46cb9fe14420cd91a3731de302b31", "filename": "gcc/fold-const.c", "status": "modified", "additions": 43, "deletions": 19, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -1483,6 +1483,16 @@ const_binop (enum tree_code code, tree type, tree arg1, tree arg2)\n \treturn build_complex (type, arg1, arg2);\n       return NULL_TREE;\n \n+    case POINTER_DIFF_EXPR:\n+      if (TREE_CODE (arg1) == INTEGER_CST && TREE_CODE (arg2) == INTEGER_CST)\n+\t{\n+\t  offset_int res = wi::sub (wi::to_offset (arg1),\n+\t\t\t\t    wi::to_offset (arg2));\n+\t  return force_fit_type (type, res, 1,\n+\t\t\t\t TREE_OVERFLOW (arg1) | TREE_OVERFLOW (arg2));\n+\t}\n+      return NULL_TREE;\n+\n     case VEC_PACK_TRUNC_EXPR:\n     case VEC_PACK_FIX_TRUNC_EXPR:\n       {\n@@ -8801,7 +8811,8 @@ fold_vec_perm (tree type, tree arg0, tree arg1, vec_perm_indices sel)\n \n static tree\n fold_addr_of_array_ref_difference (location_t loc, tree type,\n-\t\t\t\t   tree aref0, tree aref1)\n+\t\t\t\t   tree aref0, tree aref1,\n+\t\t\t\t   bool use_pointer_diff)\n {\n   tree base0 = TREE_OPERAND (aref0, 0);\n   tree base1 = TREE_OPERAND (aref1, 0);\n@@ -8813,14 +8824,20 @@ fold_addr_of_array_ref_difference (location_t loc, tree type,\n   if ((TREE_CODE (base0) == ARRAY_REF\n        && TREE_CODE (base1) == ARRAY_REF\n        && (base_offset\n-\t   = fold_addr_of_array_ref_difference (loc, type, base0, base1)))\n+\t   = fold_addr_of_array_ref_difference (loc, type, base0, base1,\n+\t\t\t\t\t\tuse_pointer_diff)))\n       || (INDIRECT_REF_P (base0)\n \t  && INDIRECT_REF_P (base1)\n \t  && (base_offset\n-\t        = fold_binary_loc (loc, MINUS_EXPR, type,\n-\t\t\t\t   fold_convert (type, TREE_OPERAND (base0, 0)),\n-\t\t\t\t   fold_convert (type,\n-\t\t\t\t\t\t TREE_OPERAND (base1, 0)))))\n+\t        = use_pointer_diff\n+\t\t  ? fold_binary_loc (loc, POINTER_DIFF_EXPR, type,\n+\t\t\t\t     TREE_OPERAND (base0, 0),\n+\t\t\t\t     TREE_OPERAND (base1, 0))\n+\t\t  : fold_binary_loc (loc, MINUS_EXPR, type,\n+\t\t\t\t     fold_convert (type,\n+\t\t\t\t\t\t   TREE_OPERAND (base0, 0)),\n+\t\t\t\t     fold_convert (type,\n+\t\t\t\t\t\t   TREE_OPERAND (base1, 0)))))\n       || operand_equal_p (base0, base1, OEP_ADDRESS_OF))\n     {\n       tree op0 = fold_convert_loc (loc, type, TREE_OPERAND (aref0, 1));\n@@ -9694,7 +9711,27 @@ fold_binary_loc (location_t loc,\n \n       return NULL_TREE;\n \n+    case POINTER_DIFF_EXPR:\n     case MINUS_EXPR:\n+      /* Fold &a[i] - &a[j] to i-j.  */\n+      if (TREE_CODE (arg0) == ADDR_EXPR\n+\t  && TREE_CODE (TREE_OPERAND (arg0, 0)) == ARRAY_REF\n+\t  && TREE_CODE (arg1) == ADDR_EXPR\n+\t  && TREE_CODE (TREE_OPERAND (arg1, 0)) == ARRAY_REF)\n+        {\n+\t  tree tem = fold_addr_of_array_ref_difference (loc, type,\n+\t\t\t\t\t\t\tTREE_OPERAND (arg0, 0),\n+\t\t\t\t\t\t\tTREE_OPERAND (arg1, 0),\n+\t\t\t\t\t\t\tcode\n+\t\t\t\t\t\t\t== POINTER_DIFF_EXPR);\n+\t  if (tem)\n+\t    return tem;\n+\t}\n+\n+      /* Further transformations are not for pointers.  */\n+      if (code == POINTER_DIFF_EXPR)\n+\treturn NULL_TREE;\n+\n       /* (-A) - B -> (-B) - A  where B is easily negated and we can swap.  */\n       if (TREE_CODE (arg0) == NEGATE_EXPR\n \t  && negate_expr_p (op1))\n@@ -9752,19 +9789,6 @@ fold_binary_loc (location_t loc,\n \t\t\t\tfold_convert_loc (loc, type, arg0),\n \t\t\t\tnegate_expr (op1));\n \n-      /* Fold &a[i] - &a[j] to i-j.  */\n-      if (TREE_CODE (arg0) == ADDR_EXPR\n-\t  && TREE_CODE (TREE_OPERAND (arg0, 0)) == ARRAY_REF\n-\t  && TREE_CODE (arg1) == ADDR_EXPR\n-\t  && TREE_CODE (TREE_OPERAND (arg1, 0)) == ARRAY_REF)\n-        {\n-\t  tree tem = fold_addr_of_array_ref_difference (loc, type,\n-\t\t\t\t\t\t\tTREE_OPERAND (arg0, 0),\n-\t\t\t\t\t\t\tTREE_OPERAND (arg1, 0));\n-\t  if (tem)\n-\t    return tem;\n-\t}\n-\n       /* Handle (A1 * C1) - (A2 * C2) with A1, A2 or C1, C2 being the same or\n \t one.  Make sure the type is not saturating and has the signedness of\n \t the stripped operands, as fold_plusminus_mult_expr will re-associate."}, {"sha": "0949a9bcd2c9ea6164f23b8c3d9b7843afa6e485", "filename": "gcc/match.pd", "status": "modified", "additions": 75, "deletions": 4, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -124,6 +124,9 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (minus @0 @0)\n  (if (!FLOAT_TYPE_P (type) || !HONOR_NANS (type))\n   { build_zero_cst (type); }))\n+(simplify\n+ (pointer_diff @@0 @0)\n+ { build_zero_cst (type); })\n \n (simplify\n  (mult @0 integer_zerop@1)\n@@ -1040,6 +1043,10 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t  && !HONOR_SIGN_DEPENDENT_ROUNDING (type)\n \t  && !HONOR_SIGNED_ZEROS (type)))\n   (minus @1 @0)))\n+(simplify\n+ (negate (pointer_diff @0 @1))\n+ (if (TYPE_OVERFLOW_UNDEFINED (type))\n+  (pointer_diff @1 @0)))\n \n /* A - B -> A + (-B) if B is easily negatable.  */\n (simplify\n@@ -1342,6 +1349,17 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        && (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0))\n \t   || TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0))))\n    (op @0 @1))))\n+/* And for pointers...  */\n+(for op (simple_comparison)\n+ (simplify\n+  (op (pointer_diff@3 @0 @2) (pointer_diff @1 @2))\n+  (if (!TYPE_OVERFLOW_SANITIZED (TREE_TYPE (@2)))\n+   (op @0 @1))))\n+(simplify\n+ (minus (pointer_diff@3 @0 @2) (pointer_diff @1 @2))\n+ (if (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@3))\n+      && !TYPE_OVERFLOW_SANITIZED (TREE_TYPE (@2)))\n+  (pointer_diff @0 @1)))\n \n /* Z - X < Z - Y is the same as Y < X when there is no overflow.  */\n (for op (lt le ge gt)\n@@ -1358,6 +1376,17 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        && (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0))\n \t   || TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0))))\n    (op @1 @0))))\n+/* And for pointers...  */\n+(for op (simple_comparison)\n+ (simplify\n+  (op (pointer_diff@3 @2 @0) (pointer_diff @2 @1))\n+  (if (!TYPE_OVERFLOW_SANITIZED (TREE_TYPE (@2)))\n+   (op @1 @0))))\n+(simplify\n+ (minus (pointer_diff@3 @2 @0) (pointer_diff @2 @1))\n+ (if (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@3))\n+      && !TYPE_OVERFLOW_SANITIZED (TREE_TYPE (@2)))\n+  (pointer_diff @1 @0)))\n \n /* X + Y < Y is the same as X < 0 when there is no overflow.  */\n (for op (lt le gt ge)\n@@ -1506,6 +1535,10 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        && ((GIMPLE && useless_type_conversion_p (type, TREE_TYPE (@1)))\n \t    || (GENERIC && type == TREE_TYPE (@1))))\n    @1))\n+(simplify\n+  (pointer_plus @0 (convert?@2 (pointer_diff@3 @1 @@0)))\n+  (if (TYPE_PRECISION (TREE_TYPE (@2)) >= TYPE_PRECISION (TREE_TYPE (@3)))\n+   (convert @1)))\n \n /* Pattern match\n      tem = (sizetype) ptr;\n@@ -1532,6 +1565,20 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (with { HOST_WIDE_INT diff; }\n    (if (ptr_difference_const (@0, @1, &diff))\n     { build_int_cst_type (type, diff); }))))\n+(simplify\n+ (pointer_diff (convert?@2 ADDR_EXPR@0) (convert?@3 @1))\n+ (if (tree_nop_conversion_p (TREE_TYPE(@2), TREE_TYPE (@0))\n+      && tree_nop_conversion_p (TREE_TYPE(@3), TREE_TYPE (@1)))\n+  (with { HOST_WIDE_INT diff; }\n+   (if (ptr_difference_const (@0, @1, &diff))\n+    { build_int_cst_type (type, diff); }))))\n+(simplify\n+ (pointer_diff (convert?@2 @0) (convert?@3 ADDR_EXPR@1))\n+ (if (tree_nop_conversion_p (TREE_TYPE(@2), TREE_TYPE (@0))\n+      && tree_nop_conversion_p (TREE_TYPE(@3), TREE_TYPE (@1)))\n+  (with { HOST_WIDE_INT diff; }\n+   (if (ptr_difference_const (@0, @1, &diff))\n+    { build_int_cst_type (type, diff); }))))\n \n /* If arg0 is derived from the address of an object or function, we may\n    be able to fold this expression using the object or function's\n@@ -1643,6 +1690,11 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (simplify\n    (plus:c (minus @0 @1) (minus @2 @0))\n    (minus @2 @1))\n+  (simplify\n+   (plus:c (pointer_diff @0 @1) (pointer_diff @2 @0))\n+   (if (TYPE_OVERFLOW_UNDEFINED (type)\n+\t&& !TYPE_OVERFLOW_SANITIZED (TREE_TYPE (@0)))\n+    (pointer_diff @2 @1)))\n   (simplify\n    (minus (plus:c @0 @1) (minus @0 @2))\n    (plus @1 @2))\n@@ -1748,6 +1800,12 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t     && TREE_CODE (@1) == INTEGER_CST\n \t     && tree_int_cst_sign_bit (@1) == 0))\n      (convert @1))))\n+   (simplify\n+    (pointer_diff (pointer_plus @@0 @1) @0)\n+    /* The second argument of pointer_plus must be interpreted as signed, and\n+       thus sign-extended if necessary.  */\n+    (with { tree stype = signed_type_for (TREE_TYPE (@1)); }\n+     (convert (convert:stype @1))))\n \n   /* (T)P - (T)(P + A) -> -(T) A */\n   (for add (plus pointer_plus)\n@@ -1772,6 +1830,12 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t     && TREE_CODE (@1) == INTEGER_CST\n \t     && tree_int_cst_sign_bit (@1) == 0))\n      (negate (convert @1)))))\n+   (simplify\n+    (pointer_diff @0 (pointer_plus @@0 @1))\n+    /* The second argument of pointer_plus must be interpreted as signed, and\n+       thus sign-extended if necessary.  */\n+    (with { tree stype = signed_type_for (TREE_TYPE (@1)); }\n+     (negate (convert (convert:stype @1)))))\n \n   /* (T)(P + A) - (T)(P + B) -> (T)A - (T)B */\n   (for add (plus pointer_plus)\n@@ -1798,6 +1862,12 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t     && TREE_CODE (@2) == INTEGER_CST\n \t     && tree_int_cst_sign_bit (@2) == 0))\n      (minus (convert @1) (convert @2)))))))\n+   (simplify\n+    (pointer_diff (pointer_plus @@0 @1) (pointer_plus @0 @2))\n+    /* The second argument of pointer_plus must be interpreted as signed, and\n+       thus sign-extended if necessary.  */\n+    (with { tree stype = signed_type_for (TREE_TYPE (@1)); }\n+     (minus (convert (convert:stype @1)) (convert (convert:stype @2)))))\n \n \n /* Simplifications of MIN_EXPR, MAX_EXPR, fmin() and fmax().  */\n@@ -2797,10 +2867,11 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    with the transformation in fold_cond_expr_with_comparison which\n    attempts to synthetize ABS_EXPR.  */\n (for cmp (eq ne)\n- (simplify\n-  (cmp (minus@2 @0 @1) integer_zerop)\n-  (if (single_use (@2))\n-   (cmp @0 @1))))\n+ (for sub (minus pointer_diff)\n+  (simplify\n+   (cmp (sub@2 @0 @1) integer_zerop)\n+   (if (single_use (@2))\n+    (cmp @0 @1)))))\n \n /* Transform comparisons of the form X * C1 CMP 0 to X CMP 0 in the\n    signed arithmetic case.  That form is created by the compiler"}, {"sha": "47a2aefd63e330ad61a2ae13595bf34d1cf72b8a", "filename": "gcc/optabs-tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Foptabs-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Foptabs-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-tree.c?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -223,6 +223,7 @@ optab_for_tree_code (enum tree_code code, const_tree type,\n \treturn TYPE_UNSIGNED (type) ? usadd_optab : ssadd_optab;\n       return trapv ? addv_optab : add_optab;\n \n+    case POINTER_DIFF_EXPR:\n     case MINUS_EXPR:\n       if (TYPE_SATURATING (type))\n \treturn TYPE_UNSIGNED (type) ? ussub_optab : sssub_optab;"}, {"sha": "b06c3f3b964fa2eb363bfa5a8d4a339e52494b9b", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -3142,6 +3142,25 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n       CHECK_OP (1, \"invalid operand to binary operator\");\n       break;\n \n+    case POINTER_DIFF_EXPR:\n+      if (!POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (t, 0)))\n+\t  || !POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (t, 1))))\n+\t{\n+\t  error (\"invalid operand to pointer diff, operand is not a pointer\");\n+\t  return t;\n+\t}\n+      if (TREE_CODE (TREE_TYPE (t)) != INTEGER_TYPE\n+\t  || TYPE_UNSIGNED (TREE_TYPE (t))\n+\t  || (TYPE_PRECISION (TREE_TYPE (t))\n+\t      != TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (t, 0)))))\n+\t{\n+\t  error (\"invalid type for pointer diff\");\n+\t  return t;\n+\t}\n+      CHECK_OP (0, \"invalid operand to pointer diff\");\n+      CHECK_OP (1, \"invalid operand to pointer diff\");\n+      break;\n+\n     case POINTER_PLUS_EXPR:\n       /* Check to make sure the first operand is a pointer or reference type. */\n       if (!POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (t, 0))))\n@@ -3977,6 +3996,25 @@ verify_gimple_assign_binary (gassign *stmt)\n \treturn false;\n       }\n \n+    case POINTER_DIFF_EXPR:\n+      {\n+\tif (!POINTER_TYPE_P (rhs1_type)\n+\t    || !POINTER_TYPE_P (rhs2_type)\n+\t    || !types_compatible_p (rhs1_type, rhs2_type)\n+\t    || TREE_CODE (lhs_type) != INTEGER_TYPE\n+\t    || TYPE_UNSIGNED (lhs_type)\n+\t    || TYPE_PRECISION (lhs_type) != TYPE_PRECISION (rhs1_type))\n+\t  {\n+\t    error (\"type mismatch in pointer diff expression\");\n+\t    debug_generic_stmt (lhs_type);\n+\t    debug_generic_stmt (rhs1_type);\n+\t    debug_generic_stmt (rhs2_type);\n+\t    return true;\n+\t  }\n+\n+\treturn false;\n+      }\n+\n     case TRUTH_ANDIF_EXPR:\n     case TRUTH_ORIF_EXPR:\n     case TRUTH_AND_EXPR:"}, {"sha": "b51f13cc07609e10ea30c03a82dd80f54b206a46", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -3819,6 +3819,7 @@ estimate_operator_cost (enum tree_code code, eni_weights *weights,\n \n     case PLUS_EXPR:\n     case POINTER_PLUS_EXPR:\n+    case POINTER_DIFF_EXPR:\n     case MINUS_EXPR:\n     case MULT_EXPR:\n     case MULT_HIGHPART_EXPR:"}, {"sha": "373332d97ddd3497ff3870f0ac86f38c5e6eb57f", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -2308,6 +2308,7 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n     case MULT_HIGHPART_EXPR:\n     case PLUS_EXPR:\n     case POINTER_PLUS_EXPR:\n+    case POINTER_DIFF_EXPR:\n     case MINUS_EXPR:\n     case TRUNC_DIV_EXPR:\n     case CEIL_DIV_EXPR:\n@@ -3553,6 +3554,7 @@ op_code_prio (enum tree_code code)\n     case WIDEN_SUM_EXPR:\n     case PLUS_EXPR:\n     case POINTER_PLUS_EXPR:\n+    case POINTER_DIFF_EXPR:\n     case MINUS_EXPR:\n       return 12;\n \n@@ -3739,6 +3741,7 @@ op_symbol_code (enum tree_code code)\n \n     case NEGATE_EXPR:\n     case MINUS_EXPR:\n+    case POINTER_DIFF_EXPR:\n       return \"-\";\n \n     case BIT_NOT_EXPR:"}, {"sha": "0b9f4e60fe1b2f485ed38e59ae7d3f422f19fed9", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -5265,10 +5265,12 @@ vectorizable_operation (gimple *stmt, gimple_stmt_iterator *gsi,\n \n   code = gimple_assign_rhs_code (stmt);\n \n-  /* For pointer addition, we should use the normal plus for\n-     the vector addition.  */\n+  /* For pointer addition and subtraction, we should use the normal\n+     plus and minus for the vector operation.  */\n   if (code == POINTER_PLUS_EXPR)\n     code = PLUS_EXPR;\n+  if (code == POINTER_DIFF_EXPR)\n+    code = MINUS_EXPR;\n \n   /* Support only unary or binary operations.  */\n   op_type = TREE_CODE_LENGTH (code);"}, {"sha": "56558589337217bb86932d9dd08251194805809f", "filename": "gcc/tree.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -676,6 +676,14 @@ DEFTREECODE (MULT_EXPR, \"mult_expr\", tcc_binary, 2)\n    second operand is an integer of type sizetype.  */\n DEFTREECODE (POINTER_PLUS_EXPR, \"pointer_plus_expr\", tcc_binary, 2)\n \n+/* Pointer subtraction.  The two arguments are pointers, and the result\n+   is a signed integer of the same precision.  Pointers are interpreted\n+   as unsigned, the difference is computed as if in infinite signed\n+   precision.  Behavior is undefined if the difference does not fit in\n+   the result type.  The result does not depend on the pointer type,\n+   it is not divided by the size of the pointed-to type.  */\n+DEFTREECODE (POINTER_DIFF_EXPR, \"pointer_diff_expr\", tcc_binary, 2)\n+\n /* Highpart multiplication.  For an integral type with precision B,\n    returns bits [2B-1, B] of the full 2*B product.  */\n DEFTREECODE (MULT_HIGHPART_EXPR, \"mult_highpart_expr\", tcc_binary, 2)"}, {"sha": "923399d71a46ff6858f4c9d1f62f265af222531e", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -4615,6 +4615,7 @@ initializer_constant_valid_p_1 (tree value, tree endtype, tree *cache)\n \t}\n       return ret;\n \n+    case POINTER_DIFF_EXPR:\n     case MINUS_EXPR:\n       if (TREE_CODE (endtype) == REAL_TYPE)\n \treturn NULL_TREE;"}, {"sha": "7b9c5ad6c4b24858bf7f161a4ba5018c4a3520f6", "filename": "gcc/vr-values.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4ebf5985ef2aaac13862654044d84a3cd7ae4/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=1af4ebf5985ef2aaac13862654044d84a3cd7ae4", "patch": "@@ -850,15 +850,15 @@ vr_values::extract_range_from_binary_expr (value_range *vr,\n      can derive a non-null range.  This happens often for\n      pointer subtraction.  */\n   if (vr->type == VR_VARYING\n-      && code == MINUS_EXPR\n+      && (code == MINUS_EXPR || code == POINTER_DIFF_EXPR)\n       && TREE_CODE (op0) == SSA_NAME\n       && ((vr0.type == VR_ANTI_RANGE\n \t   && vr0.min == op1\n \t   && vr0.min == vr0.max)\n \t  || (vr1.type == VR_ANTI_RANGE\n \t      && vr1.min == op0\n \t      && vr1.min == vr1.max)))\n-      set_value_range_to_nonnull (vr, TREE_TYPE (op0));\n+      set_value_range_to_nonnull (vr, expr_type);\n }\n \n /* Extract range information from a unary expression CODE OP0 based on"}]}