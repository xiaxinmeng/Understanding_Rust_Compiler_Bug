{"sha": "81ae598bbd9f3faa1f0d7e16acfba9e6c914f94c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFhZTU5OGJiZDlmM2ZhYTFmMGQ3ZTE2YWNmYmE5ZTZjOTE0Zjk0Yw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-05-28T02:21:30Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-05-28T02:21:30Z"}, "message": "re PR c++/21614 (wrong code when calling member function of undefined class)\n\n\tPR c++/21614\n\t* typeck.c (get_member_function_from_ptrfunc): Do not attempt\n\tconversions to base classes of incomplete types.\n\n\tPR c++/21614\n\t* g++.dg/expr/ptrmem6.C: New test.\n\t* g++.dg/expr/ptrmem6a.C: Likewise.\n\nFrom-SVN: r100291", "tree": {"sha": "2c493fd519439e6384e6dab99f5bf53a36dada1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c493fd519439e6384e6dab99f5bf53a36dada1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81ae598bbd9f3faa1f0d7e16acfba9e6c914f94c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81ae598bbd9f3faa1f0d7e16acfba9e6c914f94c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81ae598bbd9f3faa1f0d7e16acfba9e6c914f94c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81ae598bbd9f3faa1f0d7e16acfba9e6c914f94c/comments", "author": null, "committer": null, "parents": [{"sha": "ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622"}], "stats": {"total": 56, "additions": 49, "deletions": 7}, "files": [{"sha": "24dc95819b6fb29ac23be37e4728677705bd9fe4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81ae598bbd9f3faa1f0d7e16acfba9e6c914f94c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81ae598bbd9f3faa1f0d7e16acfba9e6c914f94c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=81ae598bbd9f3faa1f0d7e16acfba9e6c914f94c", "patch": "@@ -1,3 +1,9 @@\n+2005-05-27  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/21614\n+\t* typeck.c (get_member_function_from_ptrfunc): Do not attempt\n+\tconversions to base classes of incomplete types.\n+\n 2005-05-27  Ian Lance Taylor  <ian@airs.com>\n \n \t* semantics.c (add_stmt): Add C++ frontend specific version."}, {"sha": "73bb514f4992b008875105fa37edf45bafefe348", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81ae598bbd9f3faa1f0d7e16acfba9e6c914f94c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81ae598bbd9f3faa1f0d7e16acfba9e6c914f94c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=81ae598bbd9f3faa1f0d7e16acfba9e6c914f94c", "patch": "@@ -2346,14 +2346,23 @@ get_member_function_from_ptrfunc (tree *instance_ptrptr, tree function)\n \t  gcc_unreachable ();\n \t}\n \n-      /* Convert down to the right base before using the instance.  First\n-         use the type...  */\n+      /* Convert down to the right base before using the instance.  A\n+\t special case is that in a pointer to member of class C, C may\n+\t be incomplete.  In that case, the function will of course be\n+\t a member of C, and no conversion is required.  In fact,\n+\t lookup_base will fail in that case, because incomplete\n+\t classes do not have BINFOs.  */ \n       basetype = TYPE_METHOD_BASETYPE (TREE_TYPE (fntype));\n-      basetype = lookup_base (TREE_TYPE (TREE_TYPE (instance_ptr)),\n-\t\t\t      basetype, ba_check, NULL);\n-      instance_ptr = build_base_path (PLUS_EXPR, instance_ptr, basetype, 1);\n-      if (instance_ptr == error_mark_node)\n-\treturn error_mark_node;\n+      if (!same_type_ignoring_top_level_qualifiers_p \n+\t  (basetype, TREE_TYPE (TREE_TYPE (instance_ptr))))\n+\t{\n+\t  basetype = lookup_base (TREE_TYPE (TREE_TYPE (instance_ptr)),\n+\t\t\t\t  basetype, ba_check, NULL);\n+\t  instance_ptr = build_base_path (PLUS_EXPR, instance_ptr, basetype, \n+\t\t\t\t\t  1);\n+\t  if (instance_ptr == error_mark_node)\n+\t    return error_mark_node;\n+\t}\n       /* ...and then the delta in the PMF.  */\n       instance_ptr = build2 (PLUS_EXPR, TREE_TYPE (instance_ptr),\n \t\t\t     instance_ptr, delta);"}, {"sha": "a6d54b3a4fca94c809ad23eb7c6bbe9e3c45b287", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81ae598bbd9f3faa1f0d7e16acfba9e6c914f94c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81ae598bbd9f3faa1f0d7e16acfba9e6c914f94c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=81ae598bbd9f3faa1f0d7e16acfba9e6c914f94c", "patch": "@@ -1,3 +1,9 @@\n+2005-05-27  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/21614\n+\t* g++.dg/expr/ptrmem6.C: New test.\n+\t* g++.dg/expr/ptrmem6a.C: Likewise.\n+\n 2005-05-27  Kazu Hirata  <kazu@cs.umass.edu>\n \n \tPR tree-optimization/21658"}, {"sha": "0c75385fbd0feb99f5665d2c919106ae38949447", "filename": "gcc/testsuite/g++.dg/expr/ptrmem6.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81ae598bbd9f3faa1f0d7e16acfba9e6c914f94c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fptrmem6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81ae598bbd9f3faa1f0d7e16acfba9e6c914f94c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fptrmem6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fptrmem6.C?ref=81ae598bbd9f3faa1f0d7e16acfba9e6c914f94c", "patch": "@@ -0,0 +1,12 @@\n+// PR C++/21614\n+// { dg-additional-sources \"ptrmem6a.C\" }\n+// { dg-do run }\n+\n+extern struct Z *p; \n+extern int (Z::*m) (); \n+ \n+int main () { \n+  if ((p->*m)() == 7)\n+    return 0;\n+  return 1;\n+}"}, {"sha": "8dad81c5889afddb7a5dff45568427f292c2de7d", "filename": "gcc/testsuite/g++.dg/expr/ptrmem6a.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81ae598bbd9f3faa1f0d7e16acfba9e6c914f94c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fptrmem6a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81ae598bbd9f3faa1f0d7e16acfba9e6c914f94c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fptrmem6a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fptrmem6a.C?ref=81ae598bbd9f3faa1f0d7e16acfba9e6c914f94c", "patch": "@@ -0,0 +1,9 @@\n+struct Z {\n+  int f();\n+};\n+\n+int Z::f() { return 7; }\n+\n+struct Z z;\n+int (Z::*m)() = &Z::f;\n+struct Z*p = &z;"}]}