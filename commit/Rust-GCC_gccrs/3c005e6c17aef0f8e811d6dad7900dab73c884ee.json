{"sha": "3c005e6c17aef0f8e811d6dad7900dab73c884ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MwMDVlNmMxN2FlZjBmOGU4MTFkNmRhZDc5MDBkYWI3M2M4ODRlZQ==", "commit": {"author": {"name": "Philipp Tomsich", "email": "philipp.tomsich@theobroma-systems.com", "date": "2010-06-28T13:22:47Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2010-06-28T13:22:47Z"}, "message": "config.gcc (powerpc*-*-*): Handle titan.\n\n2010-06-28  Philipp Tomsich <philipp.tomsich@theobroma-systems.com>\n\n        * config.gcc (powerpc*-*-*): Handle titan.\n        * config/rs6000/rs6000.c (titan_cost): New costs.\n        (rs6000_override_options): Add \"titan\" to processor_target_table.\n        Add Titan to branch alignment logic.\n        Correctly set rs6000_cost for titan.\n        * config/rs6000/rs6000.md (cpu): Add titan.  Include \"titan.md\".\n        * config/rs6000/titan.md: New file.\n        * doc/invoke.texi (RS/6000 and PowerPC Options): Document -mcpu=titan.\n\nFrom-SVN: r161491", "tree": {"sha": "6618882baaf1e25d7241e95a77f9018968ee0f9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6618882baaf1e25d7241e95a77f9018968ee0f9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c005e6c17aef0f8e811d6dad7900dab73c884ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c005e6c17aef0f8e811d6dad7900dab73c884ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c005e6c17aef0f8e811d6dad7900dab73c884ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c005e6c17aef0f8e811d6dad7900dab73c884ee/comments", "author": null, "committer": null, "parents": [{"sha": "4052358138f792121cc1a2610fc9d7abc172f7d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4052358138f792121cc1a2610fc9d7abc172f7d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4052358138f792121cc1a2610fc9d7abc172f7d9"}], "stats": {"total": 227, "additions": 222, "deletions": 5}, "files": [{"sha": "3c34fe9d180f599436bf5811f0aed13979d41b38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c005e6c17aef0f8e811d6dad7900dab73c884ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c005e6c17aef0f8e811d6dad7900dab73c884ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c005e6c17aef0f8e811d6dad7900dab73c884ee", "patch": "@@ -1,3 +1,14 @@\n+2010-06-28  Philipp Tomsich <philipp.tomsich@theobroma-systems.com>\n+\n+\t* config.gcc (powerpc*-*-*): Handle titan.\n+\t* config/rs6000/rs6000.c (titan_cost): New costs.\n+\t(rs6000_override_options): Add \"titan\" to processor_target_table.\n+\tAdd Titan to branch alignment logic.\n+\tCorrectly set rs6000_cost for titan.\n+\t* config/rs6000/rs6000.md (cpu): Add titan.  Include \"titan.md\".\n+\t* config/rs6000/titan.md: New file.\n+\t* doc/invoke.texi (RS/6000 and PowerPC Options): Document -mcpu=titan.\n+\t\n 2010-06-28  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* tree-browser.c (TB_history_stack): Convert to a VEC."}, {"sha": "6dc074d8a8874f596e65348835c74930503671b4", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c005e6c17aef0f8e811d6dad7900dab73c884ee/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c005e6c17aef0f8e811d6dad7900dab73c884ee/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=3c005e6c17aef0f8e811d6dad7900dab73c884ee", "patch": "@@ -3286,7 +3286,7 @@ case \"${target}\" in\n \t\t\t| 401 | 403 | 405 | 405fp | 440 | 440fp | 464 | 464fp \\\n \t\t\t| 476 | 476fp | 505 | 601 | 602 | 603 | 603e | ec603e \\\n \t\t\t| 604 | 604e | 620 | 630 | 740 | 750 | 7400 | 7450 \\\n-\t\t\t| a2 | e300c[23] | 854[08] | e500mc | e500mc64 \\\n+\t\t\t| a2 | e300c[23] | 854[08] | e500mc | e500mc64 | titan\\\n \t\t\t| 801 | 821 | 823 | 860 | 970 | G3 | G4 | G5 | cell)\n \t\t\t\t# OK\n \t\t\t\t;;"}, {"sha": "a09374079cae5905914d6b1fad789b0cc531a7bb", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c005e6c17aef0f8e811d6dad7900dab73c884ee/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c005e6c17aef0f8e811d6dad7900dab73c884ee/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3c005e6c17aef0f8e811d6dad7900dab73c884ee", "patch": "@@ -838,6 +838,25 @@ struct processor_costs ppce500mc64_cost = {\n   1,\t\t\t/* prefetch streams /*/\n };\n \n+/* Instruction costs on AppliedMicro Titan processors.  */\n+static const\n+struct processor_costs titan_cost = {\n+  COSTS_N_INSNS (5),    /* mulsi */\n+  COSTS_N_INSNS (5),    /* mulsi_const */\n+  COSTS_N_INSNS (5),    /* mulsi_const9 */\n+  COSTS_N_INSNS (5),    /* muldi */\n+  COSTS_N_INSNS (18),   /* divsi */\n+  COSTS_N_INSNS (18),   /* divdi */\n+  COSTS_N_INSNS (10),   /* fp */\n+  COSTS_N_INSNS (10),   /* dmul */\n+  COSTS_N_INSNS (46),   /* sdiv */\n+  COSTS_N_INSNS (72),   /* ddiv */\n+  32,\t\t\t/* cache line size */\n+  32,\t\t\t/* l1 cache */\n+  512,\t\t\t/* l2 cache */\n+  1,\t\t\t/* prefetch streams /*/\n+};\n+\n /* Instruction costs on POWER4 and POWER5 processors.  */\n static const\n struct processor_costs power4_cost = {\n@@ -2439,6 +2458,8 @@ rs6000_override_options (const char *default_cpu)\n \t {\"G4\",  PROCESSOR_PPC7450, POWERPC_7400_MASK},\n \t {\"G5\", PROCESSOR_POWER4,\n \t  POWERPC_7400_MASK | MASK_PPC_GPOPT | MASK_MFCRF | MASK_POWERPC64},\n+\t {\"titan\", PROCESSOR_TITAN,\n+\t  POWERPC_BASE_MASK | MASK_MULHW | MASK_DLMZB},\n \t {\"power\", PROCESSOR_POWER, MASK_POWER | MASK_MULTIPLE | MASK_STRING},\n \t {\"power2\", PROCESSOR_POWER,\n \t  MASK_POWER | MASK_POWER2 | MASK_MULTIPLE | MASK_STRING},\n@@ -2882,6 +2903,12 @@ rs6000_override_options (const char *default_cpu)\n   if (!rs6000_explicit_options.aix_struct_ret)\n     aix_struct_return = (DEFAULT_ABI != ABI_V4 || DRAFT_V4_STRUCT_RET);\n \n+#if 0\n+  /* IBM XL compiler defaults to unsigned bitfields.  */\n+  if (TARGET_XL_COMPAT)\n+    flag_signed_bitfields = 0;\n+#endif\n+\n   if (TARGET_LONG_DOUBLE_128 && !TARGET_IEEEQUAD)\n     REAL_MODE_FORMAT (TFmode) = &ibm_extended_format;\n \n@@ -2899,8 +2926,10 @@ rs6000_override_options (const char *default_cpu)\n   /* Set branch target alignment, if not optimizing for size.  */\n   if (!optimize_size)\n     {\n-      /* Cell wants to be aligned 8byte for dual issue. */\n-      if (rs6000_cpu == PROCESSOR_CELL)\n+      /* Cell wants to be aligned 8byte for dual issue.  Titan wants to be\n+\t aligned 8byte to avoid misprediction by the branch predictor.  */\n+      if (rs6000_cpu == PROCESSOR_TITAN\n+\t  || rs6000_cpu == PROCESSOR_CELL)\n \t{\n \t  if (align_functions <= 0)\n \t    align_functions = 8;\n@@ -3024,6 +3053,10 @@ rs6000_override_options (const char *default_cpu)\n \trs6000_cost = &ppce500mc64_cost;\n \tbreak;\n \n+      case PROCESSOR_TITAN:\n+\trs6000_cost = &titan_cost;\n+\tbreak;\n+\n       case PROCESSOR_POWER4:\n       case PROCESSOR_POWER5:\n \trs6000_cost = &power4_cost;\n@@ -22514,6 +22547,7 @@ rs6000_issue_rate (void)\n   case CPU_PPCE300C3:\n   case CPU_PPCE500MC:\n   case CPU_PPCE500MC64:\n+  case CPU_TITAN:\n     return 2;\n   case CPU_RIOS2:\n   case CPU_PPC476:"}, {"sha": "02602a1f661c9b3b81efe23856425a2974f4dbb7", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c005e6c17aef0f8e811d6dad7900dab73c884ee/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c005e6c17aef0f8e811d6dad7900dab73c884ee/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=3c005e6c17aef0f8e811d6dad7900dab73c884ee", "patch": "@@ -140,7 +140,7 @@\n ;; Processor type -- this attribute must exactly match the processor_type\n ;; enumeration in rs6000.h.\n \n-(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc405,ppc440,ppc476,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450,ppc8540,ppce300c2,ppce300c3,ppce500mc,ppce500mc64,power4,power5,power6,power7,cell,ppca2\"\n+(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc405,ppc440,ppc476,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450,ppc8540,ppce300c2,ppce300c3,ppce500mc,ppce500mc64,power4,power5,power6,power7,cell,ppca2,titan\"\n   (const (symbol_ref \"rs6000_cpu_attr\")))\n \n \n@@ -175,6 +175,7 @@\n (include \"cell.md\")\n (include \"xfpu.md\")\n (include \"a2.md\")\n+(include \"titan.md\")\n \n (include \"predicates.md\")\n (include \"constraints.md\")"}, {"sha": "744d7770f280e1445b7e13cf47d672cedf456d69", "filename": "gcc/config/rs6000/titan.md", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c005e6c17aef0f8e811d6dad7900dab73c884ee/gcc%2Fconfig%2Frs6000%2Ftitan.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c005e6c17aef0f8e811d6dad7900dab73c884ee/gcc%2Fconfig%2Frs6000%2Ftitan.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ftitan.md?ref=3c005e6c17aef0f8e811d6dad7900dab73c884ee", "patch": "@@ -0,0 +1,171 @@\n+;; Pipeline description for the AppliedMicro Titan core.\n+;;   Copyright (C) 2010 Free Software Foundation, Inc.\n+;;   Contributed by Theobroma Systems Design und Consulting GmbH\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; AppliedMicro Titan core complex\n+\n+(automata_option \"progress\")\n+\n+(define_automaton \"titan_core,titan_fpu,titan_fxu,titan_bpu,titan_lsu\")\n+(define_cpu_unit \"titan_issue_0,titan_issue_1\" \"titan_core\")\n+\n+;; Some useful abbreviations.\n+(define_reservation \"titan_issue\" \"titan_issue_0|titan_issue_1\")\n+\n+;; === FXU scheduling ===\n+\n+(define_cpu_unit \"titan_fxu_sh,titan_fxu_wb\" \"titan_fxu\")\n+\n+;; The 1-cycle adder executes add, addi, subf, neg, compare and trap\n+;; instructions. It provides its own, dedicated result-bus, so we\n+;; don't need the titan_fxu_wb reservation to complete.\n+(define_insn_reservation \"titan_fxu_adder\" 1\n+  (and (eq_attr \"type\" \"cmp,fast_compare,trap\")\n+       (eq_attr \"cpu\" \"titan\"))\n+  \"titan_issue,titan_fxu_sh\")\n+\n+;; Keep the titan_imul and titan_mulhw (half-word) rules in order, to\n+;; ensure the proper match: the half-word instructions are tagged as\n+;; imul3 only, whereas regular multiplys will always carry a imul tag.\n+\n+(define_insn_reservation \"titan_imul\" 5\n+  (and (eq_attr \"type\" \"imul,imul2,imul_compare\")\n+       (eq_attr \"cpu\" \"titan\"))       \n+  \"titan_issue,titan_fxu_sh,nothing*5,titan_fxu_wb\")  \n+\n+(define_insn_reservation \"titan_mulhw\" 4\n+  (and (eq_attr \"type\" \"imul3\")\n+       (eq_attr \"cpu\" \"titan\"))\n+  \"titan_issue,titan_fxu_sh,nothing*4,titan_fxu_wb\")\n+\n+(define_bypass 2 \"titan_mulhw\" \"titan_mulhw\")\n+\n+(define_insn_reservation \"titan_fxu_shift_and_rotate\" 2\n+  (and (eq_attr \"type\" \"insert_word,shift,var_shift_rotate,cntlz\")\n+       (eq_attr \"cpu\" \"titan\"))\n+  \"titan_issue,titan_fxu_sh,nothing*2,titan_fxu_wb\")\n+\n+;; We model the divider for the worst-case (i.e. a full 32-bit\n+;; divide).  To model the bypass for byte-wise completion, a\n+;; define_bypass with a guard-function could be used... however, this\n+;; would be an optimization of doubtful value, as a large number of\n+;; divides will operate on 32-bit variables.\n+\n+;; To avoid an unmanagably large automata (generating the automata\n+;; would require well over 2GB in memory), we don't model the shared\n+;; result bus on this one. The divider-pipeline is thus modeled\n+;; through its latency and initial disptach bottlenecks (i.e. issue\n+;; slots and fxu scheduler availability)\n+(define_insn_reservation \"titan_fxu_div\" 34\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"titan\"))\n+  \"titan_issue,titan_fxu_sh\")\n+\n+(define_insn_reservation \"titan_fxu_alu\" 1\n+  (and (eq_attr \"type\" \"integer,exts\")\n+       (eq_attr \"cpu\" \"titan\"))\n+  \"titan_issue,titan_fxu_sh,nothing,titan_fxu_wb\")\n+\n+;; === BPU scheduling ===\n+\n+(define_cpu_unit \"titan_bpu_sh\" \"titan_bpu\")\n+\n+(define_insn_reservation \"titan_bpu\" 2\n+  (and (eq_attr \"type\" \"branch,jmpreg,cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"titan\"))\n+  \"titan_issue,titan_bpu_sh\")\n+\n+;; === LSU scheduling ===\n+\n+(define_cpu_unit \"titan_lsu_sh\" \"titan_lsu\")\n+\n+;; Loads.\n+(define_insn_reservation \"titan_lsu_load\" 3\n+  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,\\\n+\t\t\tload_l,sync\")\n+       (eq_attr \"cpu\" \"titan\"))\n+  \"titan_issue,titan_lsu_sh\")\n+\n+(define_insn_reservation \"titan_lsu_fpload\" 12\n+  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+       (eq_attr \"cpu\" \"titan\"))\n+  \"titan_issue,titan_lsu_sh\")\n+\n+;; Note that the isync is not clearly placed within any execution\n+;; unit. We've made the assumption that it will be running out of the\n+;; LSU, as msync is also executed within the LSU.\n+(define_insn_reservation \"titan_lsu_sync\" 20\n+  (and (eq_attr \"type\" \"sync\")\n+       (eq_attr \"cpu\" \"titan\"))\n+  \"titan_issue,titan_lsu_sh*20\")\n+\n+;; Stores.\n+(define_insn_reservation \"titan_lsu_store\" 12\n+  (and (eq_attr \"type\" \"store,store_ux,store_u,store_c\")\n+       (eq_attr \"cpu\" \"titan\"))\n+  \"titan_issue,titan_lsu_sh\")\n+\n+(define_insn_reservation \"titan_lsu_fpstore\" 12\n+  (and (eq_attr \"type\" \"fpstore,fpstore_ux,fpstore_u\")\n+       (eq_attr \"cpu\" \"titan\"))\n+  \"titan_issue,titan_lsu_sh\")\n+\n+;; === FPU scheduling ===\n+\n+;; In order to keep the automaton for the Titan FPU efficient and\n+;; maintainable, we've kept in as concise as possible and created a\n+;; mapping for the main \"choke points\" only instead of modelling the\n+;; overall flow of instructions through the FP-pipeline(s).\n+\n+;; The key elements modelled are:\n+;;  * each FP-instruction takes up one of the two issue slots \n+;;  * the FPU runs at half the core frequency\n+;;  * divides are not pipelined (but execute in a separate unit)\n+;;  * the FPU has a shared result bus for all its units\n+\n+(define_cpu_unit \"titan_fp0,titan_fpdiv,titan_fpwb\" \"titan_fpu\")\n+\n+(define_insn_reservation \"titan_fp_div_double\" 72\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"titan\"))\n+  \"titan_issue,titan_fpdiv*72,titan_fpwb\")\n+\n+(define_insn_reservation \"titan_fp_div_single\" 46\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"titan\"))\n+  \"titan_issue,titan_fpdiv*46,titan_fpwb\")\n+\n+(define_insn_reservation \"titan_fp_single\" 12\n+  (and (eq_attr \"fp_type\" \"fp_addsub_s,fp_mul_s,fp_maddsub_s\")       \n+       (eq_attr \"cpu\" \"titan\"))\n+  \"titan_issue,titan_fp0*2,nothing*10,titan_fpwb\")\n+\n+;; Make sure the \"titan_fp\" rule stays last, as it's a catch all for\n+;; double-precision and unclassified (e.g. fsel) FP-instructions\n+(define_insn_reservation \"titan_fp\" 10\n+  (and (eq_attr \"type\" \"fpcompare,fp,dmul\")\n+       (eq_attr \"cpu\" \"titan\"))\n+  \"titan_issue,titan_fp0*2,nothing*8,titan_fpwb\")\n+\n+;; Please note, that the non-pipelined FP-instructions \"mcrfs\",\n+;; \"mtfsb0[.]\", \"mtfsb1[.]\", \"mtfsf[.]\", \"mtfsfi[.]\" are not\n+;; accessible from regular language constructs (i.e. they are not used\n+;; by the code generator, except for special purpose sequences defined\n+;; in rs6000.md), no special provisions are made for these.\n+"}, {"sha": "21740c1523cb948d6f63ba9fc9a4e96daab77562", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c005e6c17aef0f8e811d6dad7900dab73c884ee/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c005e6c17aef0f8e811d6dad7900dab73c884ee/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3c005e6c17aef0f8e811d6dad7900dab73c884ee", "patch": "@@ -14940,7 +14940,7 @@ Supported values for @var{cpu_type} are @samp{401}, @samp{403},\n @samp{7400}, @samp{7450}, @samp{750}, @samp{801}, @samp{821}, @samp{823},\n @samp{860}, @samp{970}, @samp{8540}, @samp{a2}, @samp{e300c2},\n @samp{e300c3}, @samp{e500mc}, @samp{e500mc64}, @samp{ec603e}, @samp{G3},\n-@samp{G4}, @samp{G5}, @samp{power}, @samp{power2}, @samp{power3},\n+@samp{G4}, @samp{G5}, @samp{titan}, @samp{power}, @samp{power2}, @samp{power3},\n @samp{power4}, @samp{power5}, @samp{power5+}, @samp{power6}, @samp{power6x},\n @samp{power7}, @samp{common}, @samp{powerpc}, @samp{powerpc64}, @samp{rios},\n @samp{rios1}, @samp{rios2}, @samp{rsc}, and @samp{rs64}."}]}