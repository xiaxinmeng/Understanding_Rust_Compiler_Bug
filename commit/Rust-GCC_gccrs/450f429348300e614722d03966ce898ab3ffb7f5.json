{"sha": "450f429348300e614722d03966ce898ab3ffb7f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUwZjQyOTM0ODMwMGU2MTQ3MjJkMDM5NjZjZTg5OGFiM2ZmYjdmNQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-05-30T03:03:14Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-05-30T03:03:14Z"}, "message": "cp-tree.h (cp_build_function_call_nary): Declare.\n\n\t* cp-tree.h (cp_build_function_call_nary): Declare.\n\t* typeck.c (cp_build_function_call_nary): Define.\n\t* decl.c (register_dtor_fn): Use it instead of\n\tcp_build_function_call.\n\t(cxx_maybe_build_cleanup): Likewise.\n\t* decl2.c (generate_ctor_or_dtor_function): Likewise.\n\t* except.c (do_get_exception_ptr): Likewise.\n\t(do_begin_catch): Likewise.\n\t(do_allocate_exception): Likewise.\n\t(do_free_exception): Likewise.\n\t(build_throw): Likewise.  Use cp_build_function_call_vec instead\n\tof cp_build_function_call.\n\t(do_end_catch): Likewise.\n\nFrom-SVN: r160045", "tree": {"sha": "84131f99052527c90f0168a49f3799ddf508f502", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84131f99052527c90f0168a49f3799ddf508f502"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/450f429348300e614722d03966ce898ab3ffb7f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/450f429348300e614722d03966ce898ab3ffb7f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/450f429348300e614722d03966ce898ab3ffb7f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/450f429348300e614722d03966ce898ab3ffb7f5/comments", "author": null, "committer": null, "parents": [{"sha": "d79b77598e0280140e099c07877986cb4a93e01f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d79b77598e0280140e099c07877986cb4a93e01f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d79b77598e0280140e099c07877986cb4a93e01f"}], "stats": {"total": 115, "additions": 71, "deletions": 44}, "files": [{"sha": "84b3bb447e7da4ff4e376aa87037821c02d3b32e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450f429348300e614722d03966ce898ab3ffb7f5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450f429348300e614722d03966ce898ab3ffb7f5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=450f429348300e614722d03966ce898ab3ffb7f5", "patch": "@@ -1,3 +1,19 @@\n+2010-05-29  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* cp-tree.h (cp_build_function_call_nary): Declare.\n+\t* typeck.c (cp_build_function_call_nary): Define.\n+\t* decl.c (register_dtor_fn): Use it instead of\n+\tcp_build_function_call.\n+\t(cxx_maybe_build_cleanup): Likewise.\n+\t* decl2.c (generate_ctor_or_dtor_function): Likewise.\n+\t* except.c (do_get_exception_ptr): Likewise.\n+\t(do_begin_catch): Likewise.\n+\t(do_allocate_exception): Likewise.\n+\t(do_free_exception): Likewise.\n+\t(build_throw): Likewise.  Use cp_build_function_call_vec instead\n+\tof cp_build_function_call.\n+\t(do_end_catch): Likewise.\n+\n 2010-05-29  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* cp-tree.h (struct cp_decl_specifier_seq): Move type_location field up."}, {"sha": "da8293f7b5206bd9687f1166596f0c5bf3001fc4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450f429348300e614722d03966ce898ab3ffb7f5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450f429348300e614722d03966ce898ab3ffb7f5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=450f429348300e614722d03966ce898ab3ffb7f5", "patch": "@@ -5371,6 +5371,8 @@ extern tree cp_build_array_ref\t\t\t(location_t, tree, tree,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree get_member_function_from_ptrfunc\t(tree *, tree);\n extern tree cp_build_function_call              (tree, tree, tsubst_flags_t);\n+extern tree cp_build_function_call_nary         (tree, tsubst_flags_t, ...)\n+\t\t\t\t\t\tATTRIBUTE_SENTINEL;\n extern tree cp_build_function_call_vec\t\t(tree, VEC(tree,gc) **,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree build_x_binary_op\t\t\t(enum tree_code, tree,"}, {"sha": "b9f3ea84643bae0c24faa33826b892da61dcb5c4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450f429348300e614722d03966ce898ab3ffb7f5/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450f429348300e614722d03966ce898ab3ffb7f5/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=450f429348300e614722d03966ce898ab3ffb7f5", "patch": "@@ -6240,10 +6240,10 @@ register_dtor_fn (tree decl)\n {\n   tree cleanup;\n   tree compound_stmt;\n-  tree args;\n   tree fcall;\n   tree type;\n   bool use_dtor;\n+  tree arg0, arg1 = NULL_TREE, arg2 = NULL_TREE;\n \n   type = TREE_TYPE (decl);\n   if (TYPE_HAS_TRIVIAL_DESTRUCTOR (type))\n@@ -6321,25 +6321,23 @@ register_dtor_fn (tree decl)\n \t   in, and, in general, it's cheaper to pass NULL than any\n \t   other value.  */\n \taddr = null_pointer_node;\n-      args = tree_cons (NULL_TREE,\n-\t\t\tcp_build_unary_op (ADDR_EXPR, get_dso_handle_node (), 0,\n-                                        tf_warning_or_error),\n-\t\t\tNULL_TREE);\n+      arg2 = cp_build_unary_op (ADDR_EXPR, get_dso_handle_node (), 0,\n+                                tf_warning_or_error);\n       if (targetm.cxx.use_aeabi_atexit ())\n \t{\n-\t  args = tree_cons (NULL_TREE, cleanup, args);\n-\t  args = tree_cons (NULL_TREE, addr, args);\n+\t  arg1 = cleanup;\n+\t  arg0 = addr;\n \t}\n       else\n \t{\n-\t  args = tree_cons (NULL_TREE, addr, args);\n-\t  args = tree_cons (NULL_TREE, cleanup, args);\n+\t  arg1 = addr;\n+\t  arg0 = cleanup;\n \t}\n     }\n   else\n-    args = tree_cons (NULL_TREE, cleanup, NULL_TREE);\n-  return cp_build_function_call (get_atexit_node (), args, \n-\t\t\t\t tf_warning_or_error);\n+    arg0 = cleanup;\n+  return cp_build_function_call_nary (get_atexit_node (), tf_warning_or_error,\n+\t\t\t\t      arg0, arg1, arg2, NULL_TREE);\n }\n \n /* DECL is a VAR_DECL with static storage duration.  INIT, if present,\n@@ -12936,9 +12934,8 @@ cxx_maybe_build_cleanup (tree decl)\n       fn = lookup_name (id);\n       arg = build_address (decl);\n       mark_used (decl);\n-      cleanup = cp_build_function_call (fn, build_tree_list (NULL_TREE,\n-\t\t\t\t\t\t\t     arg),\n-\t\t\t\t\ttf_warning_or_error);\n+      cleanup = cp_build_function_call_nary (fn, tf_warning_or_error,\n+\t\t\t\t\t     arg, NULL_TREE);\n     }\n   /* Handle ordinary C++ destructors.  */\n   type = TREE_TYPE (decl);"}, {"sha": "0692e1a229fcb0c6ace0ea76a1477acf57064862", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450f429348300e614722d03966ce898ab3ffb7f5/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450f429348300e614722d03966ce898ab3ffb7f5/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=450f429348300e614722d03966ce898ab3ffb7f5", "patch": "@@ -3275,7 +3275,6 @@ generate_ctor_or_dtor_function (bool constructor_p, int priority,\n \t\t\t\tlocation_t *locus)\n {\n   char function_key;\n-  tree arguments;\n   tree fndecl;\n   tree body;\n   size_t i;\n@@ -3308,17 +3307,18 @@ generate_ctor_or_dtor_function (bool constructor_p, int priority,\n       /* Calls to pure or const functions will expand to nothing.  */\n       if (! (flags_from_decl_or_type (fndecl) & (ECF_CONST | ECF_PURE)))\n \t{\n+\t  tree call;\n+\n \t  if (! body)\n \t    body = start_objects (function_key, priority);\n \n-\t  arguments = tree_cons (NULL_TREE,\n-\t\t\t\t build_int_cst (NULL_TREE, priority),\n-\t\t\t\t NULL_TREE);\n-\t  arguments = tree_cons (NULL_TREE,\n-\t\t\t\t build_int_cst (NULL_TREE, constructor_p),\n-\t\t\t\t arguments);\n-\t  finish_expr_stmt (cp_build_function_call (fndecl, arguments,\n-\t\t\t\t\t\t    tf_warning_or_error));\n+\t  call = cp_build_function_call_nary (fndecl, tf_warning_or_error,\n+\t\t\t\t\t      build_int_cst (NULL_TREE,\n+\t\t\t\t\t\t\t     constructor_p),\n+\t\t\t\t\t      build_int_cst (NULL_TREE,\n+\t\t\t\t\t\t\t     priority),\n+\t\t\t\t\t      NULL_TREE);\n+\t  finish_expr_stmt (call);\n \t}\n     }\n "}, {"sha": "6f7f70ad80433329d723d3c7fb6b3b70bba5425e", "filename": "gcc/cp/except.c", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450f429348300e614722d03966ce898ab3ffb7f5/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450f429348300e614722d03966ce898ab3ffb7f5/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=450f429348300e614722d03966ce898ab3ffb7f5", "patch": "@@ -180,9 +180,8 @@ do_get_exception_ptr (void)\n       fn = declare_nothrow_library_fn (fn, ptr_type_node, ptr_type_node);\n     }\n \n-  return cp_build_function_call (fn, tree_cons (NULL_TREE, build_exc_ptr (),\n-\t\t\t\t\t\tNULL_TREE),\n-\t\t\t\t tf_warning_or_error);\n+  return cp_build_function_call_nary (fn, tf_warning_or_error,\n+\t\t\t\t      build_exc_ptr (), NULL_TREE);\n }\n \n /* Build up a call to __cxa_begin_catch, to tell the runtime that the\n@@ -200,9 +199,8 @@ do_begin_catch (void)\n       fn = declare_nothrow_library_fn (fn, ptr_type_node, ptr_type_node);\n     }\n \n-  return cp_build_function_call (fn, tree_cons (NULL_TREE, build_exc_ptr (),\n-\t\t\t\t\t\tNULL_TREE),\n-\t\t\t\t tf_warning_or_error);\n+  return cp_build_function_call_nary (fn, tf_warning_or_error,\n+\t\t\t\t      build_exc_ptr (), NULL_TREE);\n }\n \n /* Returns nonzero if cleaning up an exception of type TYPE (which can be\n@@ -240,7 +238,7 @@ do_end_catch (tree type)\n       TREE_NOTHROW (fn) = 0;\n     }\n \n-  cleanup = cp_build_function_call (fn, NULL_TREE, tf_warning_or_error);\n+  cleanup = cp_build_function_call_vec (fn, NULL, tf_warning_or_error);\n   TREE_NOTHROW (cleanup) = dtor_nothrow (type);\n \n   return cleanup;\n@@ -565,10 +563,8 @@ do_allocate_exception (tree type)\n       fn = declare_nothrow_library_fn (fn, ptr_type_node, size_type_node);\n     }\n \n-  return cp_build_function_call (fn, \n-\t\t\t\t tree_cons (NULL_TREE, size_in_bytes (type),\n-\t\t\t\t\t    NULL_TREE),\n-\t\t\t\t tf_warning_or_error);\n+  return cp_build_function_call_nary (fn, tf_warning_or_error,\n+\t\t\t\t      size_in_bytes (type), NULL_TREE);\n }\n \n /* Call __cxa_free_exception from a cleanup.  This is never invoked\n@@ -586,8 +582,7 @@ do_free_exception (tree ptr)\n       fn = declare_nothrow_library_fn (fn, void_type_node, ptr_type_node);\n     }\n \n-  return cp_build_function_call (fn, tree_cons (NULL_TREE, ptr, NULL_TREE),\n-\t\t\t\t tf_warning_or_error);\n+  return cp_build_function_call_nary (fn, tf_warning_or_error, ptr, NULL_TREE);\n }\n \n /* Wrap all cleanups for TARGET_EXPRs in MUST_NOT_THROW_EXPR.\n@@ -665,8 +660,8 @@ build_throw (tree exp)\n \t  return error_mark_node;\n \t}\n       fn = OVL_CURRENT (fn);\n-      exp = cp_build_function_call (fn, tree_cons (NULL_TREE, exp, NULL_TREE),\n-\t\t\t\t    tf_warning_or_error);\n+      exp = cp_build_function_call_nary (fn, tf_warning_or_error,\n+\t\t\t\t\t exp, NULL_TREE);\n     }\n   else if (exp)\n     {\n@@ -797,11 +792,9 @@ build_throw (tree exp)\n       else\n \tcleanup = build_int_cst (cleanup_type, 0);\n \n-      tmp = tree_cons (NULL_TREE, cleanup, NULL_TREE);\n-      tmp = tree_cons (NULL_TREE, throw_type, tmp);\n-      tmp = tree_cons (NULL_TREE, ptr, tmp);\n       /* ??? Indicate that this function call throws throw_type.  */\n-      tmp = cp_build_function_call (fn, tmp, tf_warning_or_error);\n+      tmp = cp_build_function_call_nary (fn, tf_warning_or_error,\n+\t\t\t\t\t ptr, throw_type, cleanup, NULL_TREE);\n \n       /* Tack on the initialization stuff.  */\n       exp = build2 (COMPOUND_EXPR, TREE_TYPE (tmp), exp, tmp);\n@@ -820,7 +813,7 @@ build_throw (tree exp)\n \n       /* ??? Indicate that this function call allows exceptions of the type\n \t of the enclosing catch block (if known).  */\n-      exp = cp_build_function_call (fn, NULL_TREE, tf_warning_or_error);\n+      exp = cp_build_function_call_vec (fn, NULL, tf_warning_or_error);\n     }\n \n   exp = build1 (THROW_EXPR, void_type_node, exp);"}, {"sha": "a7d04ddbc5b7f4d9e2301e156908ea15c5dcf166", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450f429348300e614722d03966ce898ab3ffb7f5/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450f429348300e614722d03966ce898ab3ffb7f5/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=450f429348300e614722d03966ce898ab3ffb7f5", "patch": "@@ -3225,6 +3225,25 @@ cp_build_function_call (tree function, tree params, tsubst_flags_t complain)\n   return ret;\n }\n \n+/* Build a function call using varargs.  */\n+\n+tree\n+cp_build_function_call_nary (tree function, tsubst_flags_t complain, ...)\n+{\n+  VEC(tree,gc) *vec;\n+  va_list args;\n+  tree ret, t;\n+\n+  vec = make_tree_vector ();\n+  va_start (args, complain);\n+  for (t = va_arg (args, tree); t != NULL_TREE; t = va_arg (args, tree))\n+    VEC_safe_push (tree, gc, vec, t);\n+  va_end (args);\n+  ret = cp_build_function_call_vec (function, &vec, complain);\n+  release_tree_vector (vec);\n+  return ret;\n+}\n+\n /* Build a function call using a vector of arguments.  PARAMS may be\n    NULL if there are no parameters.  This changes the contents of\n    PARAMS.  */"}]}