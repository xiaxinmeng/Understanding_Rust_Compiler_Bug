{"sha": "f187980b5e132d0b5d36b5ade6a42ef8cfdb5560", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE4Nzk4MGI1ZTEzMmQwYjVkMzZiNWFkZTZhNDJlZjhjZmRiNTU2MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-12-04T08:52:24Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-12-04T08:52:24Z"}, "message": "c-tree.h (c_build_va_arg): Adjust prototype.\n\n\t* c-tree.h (c_build_va_arg): Adjust prototype.\n\t* c-parser.c (c_parser_postfix_expression): Adjust call to above.\n\t* c-typeck.c (c_build_va_arg): Rename LOC parameter to LOC2, add LOC1\n\tparameter, adjust throughout and issue an error if EXPR is a component\n\twith reverse storage order.\n\nFrom-SVN: r231250", "tree": {"sha": "b16a2c27bac9f26c0ff11a13cad8c6b616765564", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b16a2c27bac9f26c0ff11a13cad8c6b616765564"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f187980b5e132d0b5d36b5ade6a42ef8cfdb5560", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f187980b5e132d0b5d36b5ade6a42ef8cfdb5560", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f187980b5e132d0b5d36b5ade6a42ef8cfdb5560", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f187980b5e132d0b5d36b5ade6a42ef8cfdb5560/comments", "author": null, "committer": null, "parents": [{"sha": "e315eea9d086ffef705ae96a04ef1b15cfec7745", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e315eea9d086ffef705ae96a04ef1b15cfec7745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e315eea9d086ffef705ae96a04ef1b15cfec7745"}], "stats": {"total": 59, "additions": 53, "deletions": 6}, "files": [{"sha": "468ef9398be6367879831e73bea8fb09d7b53181", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f187980b5e132d0b5d36b5ade6a42ef8cfdb5560/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f187980b5e132d0b5d36b5ade6a42ef8cfdb5560/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=f187980b5e132d0b5d36b5ade6a42ef8cfdb5560", "patch": "@@ -1,3 +1,11 @@\n+2015-12-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-tree.h (c_build_va_arg): Adjust prototype.\n+\t* c-parser.c (c_parser_postfix_expression): Adjust call to above.\n+\t* c-typeck.c (c_build_va_arg): Rename LOC parameter to LOC2, add LOC1\n+\tparameter, adjust throughout and issue an error if EXPR is a component\n+\twith reverse storage order.\n+\n 2015-12-02  Jason Merrill  <jason@redhat.com>\n \n \t* c-fold.c (c_disable_warnings, c_enable_warnings, c_fully_fold)"}, {"sha": "c7d15f9fc380005f35e560c6c181e27a262f9506", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f187980b5e132d0b5d36b5ade6a42ef8cfdb5560/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f187980b5e132d0b5d36b5ade6a42ef8cfdb5560/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=f187980b5e132d0b5d36b5ade6a42ef8cfdb5560", "patch": "@@ -7485,7 +7485,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t    else\n \t      {\n \t\ttree type_expr = NULL_TREE;\n-\t\texpr.value = c_build_va_arg (loc, e1.value,\n+\t\texpr.value = c_build_va_arg (start_loc, e1.value, loc,\n \t\t\t\t\t     groktypename (t1, &type_expr, NULL));\n \t\tif (type_expr)\n \t\t  {"}, {"sha": "00e72b115ca108ac55c205fa70a74c995c7663d5", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f187980b5e132d0b5d36b5ade6a42ef8cfdb5560/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f187980b5e132d0b5d36b5ade6a42ef8cfdb5560/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=f187980b5e132d0b5d36b5ade6a42ef8cfdb5560", "patch": "@@ -661,7 +661,7 @@ extern tree c_finish_omp_task (location_t, tree, tree);\n extern void c_finish_omp_cancel (location_t, tree);\n extern void c_finish_omp_cancellation_point (location_t, tree);\n extern tree c_finish_omp_clauses (tree, bool, bool = false);\n-extern tree c_build_va_arg (location_t, tree, tree);\n+extern tree c_build_va_arg (location_t, tree, location_t, tree);\n extern tree c_finish_transaction (location_t, tree, int);\n extern bool c_tree_equal (tree, tree);\n extern tree c_build_function_call_vec (location_t, vec<location_t>, tree,"}, {"sha": "b691072caa932c4fd60c771065e8dc1824eddfb1", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f187980b5e132d0b5d36b5ade6a42ef8cfdb5560/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f187980b5e132d0b5d36b5ade6a42ef8cfdb5560/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=f187980b5e132d0b5d36b5ade6a42ef8cfdb5560", "patch": "@@ -13426,20 +13426,28 @@ c_build_qualified_type (tree type, int type_quals, tree orig_qual_type,\n /* Build a VA_ARG_EXPR for the C parser.  */\n \n tree\n-c_build_va_arg (location_t loc, tree expr, tree type)\n+c_build_va_arg (location_t loc1, tree expr, location_t loc2, tree type)\n {\n   if (error_operand_p (type))\n     return error_mark_node;\n+  /* VA_ARG_EXPR cannot be used for a scalar va_list with reverse storage\n+     order because it takes the address of the expression.  */\n+  else if (handled_component_p (expr)\n+\t   && reverse_storage_order_for_component_p (expr))\n+    {\n+      error_at (loc1, \"cannot use %<va_arg%> with reverse storage order\");\n+      return error_mark_node;\n+    }\n   else if (!COMPLETE_TYPE_P (type))\n     {\n-      error_at (loc, \"second argument to %<va_arg%> is of incomplete \"\n+      error_at (loc2, \"second argument to %<va_arg%> is of incomplete \"\n \t\t\"type %qT\", type);\n       return error_mark_node;\n     }\n   else if (warn_cxx_compat && TREE_CODE (type) == ENUMERAL_TYPE)\n-    warning_at (loc, OPT_Wc___compat,\n+    warning_at (loc2, OPT_Wc___compat,\n \t\t\"C++ requires promoted type, not enum type, in %<va_arg%>\");\n-  return build_va_arg (loc, expr, type);\n+  return build_va_arg (loc2, expr, type);\n }\n \n /* Return truthvalue of whether T1 is the same tree structure as T2."}, {"sha": "ca604d26b4c7374db9659a3030f4b74ab585d130", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f187980b5e132d0b5d36b5ade6a42ef8cfdb5560/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f187980b5e132d0b5d36b5ade6a42ef8cfdb5560/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f187980b5e132d0b5d36b5ade6a42ef8cfdb5560", "patch": "@@ -1,3 +1,7 @@\n+2015-12-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/sso-9.c: New test.\n+\n 2015-12-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/68655"}, {"sha": "6e767462e4dbe4c75f163527cc6aeaf29faf374e", "filename": "gcc/testsuite/gcc.dg/sso-9.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f187980b5e132d0b5d36b5ade6a42ef8cfdb5560/gcc%2Ftestsuite%2Fgcc.dg%2Fsso-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f187980b5e132d0b5d36b5ade6a42ef8cfdb5560/gcc%2Ftestsuite%2Fgcc.dg%2Fsso-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsso-9.c?ref=f187980b5e132d0b5d36b5ade6a42ef8cfdb5560", "patch": "@@ -0,0 +1,27 @@\n+/* Test support of scalar_storage_order attribute */\n+\n+/* { dg-do compile } */\n+\n+#include <stdarg.h>\n+\n+int x;\n+\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+struct __attribute__((scalar_storage_order(\"big-endian\"))) Rec\n+{\n+  va_list v;\n+};\n+#else\n+struct __attribute__((scalar_storage_order(\"little-endian\"))) Rec\n+{\n+  va_list v;\n+};\n+#endif\n+\n+void foo (int i, ...)\n+{\n+  struct Rec a;\n+  va_start (a.v, i);\n+  a.v = a.v, x = va_arg (a.v, int); /* { dg-error \"array type|reverse storage order\" } */\n+  va_end (a.v);\n+}"}]}