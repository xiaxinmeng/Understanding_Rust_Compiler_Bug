{"sha": "f9622ab1437942c5173dfbb694556b51ffc04d89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk2MjJhYjE0Mzc5NDJjNTE3M2RmYmI2OTQ1NTZiNTFmZmMwNGQ4OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T08:55:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T08:55:26Z"}, "message": "exp_atag.adb (Build_Inherit_Prims): Addition of a new formal.\n\n\t* exp_atag.adb (Build_Inherit_Prims): Addition of a new formal.\n\t(Build_Inherit_Predefined_Prims): Replace occurrences of Default_\n\tPrim_Op_Count by Max_Predef_Prims.\n\nFrom-SVN: r127468", "tree": {"sha": "12fda0dec2ab9a39cad521e90c61ed44c2b987fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12fda0dec2ab9a39cad521e90c61ed44c2b987fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9622ab1437942c5173dfbb694556b51ffc04d89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9622ab1437942c5173dfbb694556b51ffc04d89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9622ab1437942c5173dfbb694556b51ffc04d89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9622ab1437942c5173dfbb694556b51ffc04d89/comments", "author": null, "committer": null, "parents": [{"sha": "33c423c8b24c3f68cb92f95b6d2e1b9dde16ab5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33c423c8b24c3f68cb92f95b6d2e1b9dde16ab5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33c423c8b24c3f68cb92f95b6d2e1b9dde16ab5d"}], "stats": {"total": 179, "additions": 116, "deletions": 63}, "files": [{"sha": "a2c0ee90954e67707bde87cf4179261f203910d9", "filename": "gcc/ada/exp_atag.adb", "status": "modified", "additions": 116, "deletions": 63, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9622ab1437942c5173dfbb694556b51ffc04d89/gcc%2Fada%2Fexp_atag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9622ab1437942c5173dfbb694556b51ffc04d89/gcc%2Fada%2Fexp_atag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_atag.adb?ref=f9622ab1437942c5173dfbb694556b51ffc04d89", "patch": "@@ -30,6 +30,7 @@ with Exp_Util; use Exp_Util;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n with Rtsfind;  use Rtsfind;\n+with Sem_Util; use Sem_Util;\n with Stand;    use Stand;\n with Snames;   use Snames;\n with Tbuild;   use Tbuild;\n@@ -139,7 +140,7 @@ package body Exp_Atag is\n               Make_Assignment_Statement (Loc,\n                 Name       => Make_Identifier (Loc, Name_uF),\n                 Expression => New_Reference_To (Standard_True, Loc)),\n-              Make_Return_Statement (Loc))));\n+              Make_Simple_Return_Statement (Loc))));\n    end Build_Common_Dispatching_Select_Statements;\n \n    -------------------------\n@@ -253,40 +254,67 @@ package body Exp_Atag is\n \n    function Build_Inherit_Prims\n      (Loc          : Source_Ptr;\n+      Typ          : Entity_Id;\n       Old_Tag_Node : Node_Id;\n       New_Tag_Node : Node_Id;\n       Num_Prims    : Nat) return Node_Id\n    is\n    begin\n-      return\n-        Make_Assignment_Statement (Loc,\n-          Name =>\n-            Make_Slice (Loc,\n-              Prefix =>\n-                Make_Selected_Component (Loc,\n-                  Prefix =>\n-                    Build_DT (Loc, New_Tag_Node),\n-                  Selector_Name =>\n-                    New_Reference_To\n-                      (RTE_Record_Component (RE_Prims_Ptr), Loc)),\n-              Discrete_Range =>\n-                Make_Range (Loc,\n-                Low_Bound  => Make_Integer_Literal (Loc, 1),\n-                High_Bound => Make_Integer_Literal (Loc, Num_Prims))),\n-\n-          Expression =>\n-            Make_Slice (Loc,\n-              Prefix =>\n-                Make_Selected_Component (Loc,\n-                  Prefix =>\n-                    Build_DT (Loc, Old_Tag_Node),\n-                  Selector_Name =>\n-                    New_Reference_To\n-                      (RTE_Record_Component (RE_Prims_Ptr), Loc)),\n-              Discrete_Range =>\n-                Make_Range (Loc,\n-                Low_Bound  => Make_Integer_Literal (Loc, 1),\n-                High_Bound => Make_Integer_Literal (Loc, Num_Prims))));\n+      if RTE_Available (RE_DT) then\n+         return\n+           Make_Assignment_Statement (Loc,\n+             Name =>\n+               Make_Slice (Loc,\n+                 Prefix =>\n+                   Make_Selected_Component (Loc,\n+                     Prefix =>\n+                       Build_DT (Loc, New_Tag_Node),\n+                     Selector_Name =>\n+                       New_Reference_To\n+                         (RTE_Record_Component (RE_Prims_Ptr), Loc)),\n+                 Discrete_Range =>\n+                   Make_Range (Loc,\n+                   Low_Bound  => Make_Integer_Literal (Loc, 1),\n+                   High_Bound => Make_Integer_Literal (Loc, Num_Prims))),\n+\n+             Expression =>\n+               Make_Slice (Loc,\n+                 Prefix =>\n+                   Make_Selected_Component (Loc,\n+                     Prefix =>\n+                       Build_DT (Loc, Old_Tag_Node),\n+                     Selector_Name =>\n+                       New_Reference_To\n+                         (RTE_Record_Component (RE_Prims_Ptr), Loc)),\n+                 Discrete_Range =>\n+                   Make_Range (Loc,\n+                     Low_Bound  => Make_Integer_Literal (Loc, 1),\n+                     High_Bound => Make_Integer_Literal (Loc, Num_Prims))));\n+      else\n+         return\n+           Make_Assignment_Statement (Loc,\n+             Name =>\n+               Make_Slice (Loc,\n+                 Prefix =>\n+                   Unchecked_Convert_To\n+                     (Node (Last_Elmt (Access_Disp_Table (Typ))),\n+                      New_Tag_Node),\n+                 Discrete_Range =>\n+                   Make_Range (Loc,\n+                   Low_Bound  => Make_Integer_Literal (Loc, 1),\n+                   High_Bound => Make_Integer_Literal (Loc, Num_Prims))),\n+\n+             Expression =>\n+               Make_Slice (Loc,\n+                 Prefix =>\n+                   Unchecked_Convert_To\n+                     (Node (Last_Elmt (Access_Disp_Table (Typ))),\n+                      Old_Tag_Node),\n+                 Discrete_Range =>\n+                   Make_Range (Loc,\n+                     Low_Bound  => Make_Integer_Literal (Loc, 1),\n+                     High_Bound => Make_Integer_Literal (Loc, Num_Prims))));\n+      end if;\n    end Build_Inherit_Prims;\n \n    -------------------------------\n@@ -342,39 +370,64 @@ package body Exp_Atag is\n       New_Tag_Node : Node_Id) return Node_Id\n    is\n    begin\n-      return\n-        Make_Assignment_Statement (Loc,\n-          Name =>\n-            Make_Slice (Loc,\n-              Prefix =>\n-                Make_Explicit_Dereference (Loc,\n-                  Unchecked_Convert_To (RTE (RE_Predef_Prims_Table_Ptr),\n-                    Make_Selected_Component (Loc,\n-                      Prefix =>\n-                        Build_DT (Loc, New_Tag_Node),\n-                      Selector_Name =>\n-                        New_Reference_To\n-                          (RTE_Record_Component (RE_Predef_Prims), Loc)))),\n-              Discrete_Range => Make_Range (Loc,\n-                Make_Integer_Literal (Loc, Uint_1),\n-                New_Reference_To (RTE (RE_Default_Prim_Op_Count), Loc))),\n-\n-          Expression =>\n-            Make_Slice (Loc,\n-              Prefix =>\n-                Make_Explicit_Dereference (Loc,\n-                  Unchecked_Convert_To (RTE (RE_Predef_Prims_Table_Ptr),\n-                    Make_Selected_Component (Loc,\n-                      Prefix =>\n-                        Build_DT (Loc, Old_Tag_Node),\n-                      Selector_Name =>\n-                        New_Reference_To\n-                          (RTE_Record_Component (RE_Predef_Prims), Loc)))),\n-              Discrete_Range =>\n-                Make_Range (Loc,\n-                  Low_Bound  => Make_Integer_Literal (Loc, 1),\n-                  High_Bound =>\n-                    New_Reference_To (RTE (RE_Default_Prim_Op_Count), Loc))));\n+      if RTE_Available (RE_DT) then\n+         return\n+           Make_Assignment_Statement (Loc,\n+             Name =>\n+               Make_Slice (Loc,\n+                 Prefix =>\n+                   Make_Explicit_Dereference (Loc,\n+                     Unchecked_Convert_To (RTE (RE_Predef_Prims_Table_Ptr),\n+                       Make_Selected_Component (Loc,\n+                         Prefix =>\n+                           Build_DT (Loc, New_Tag_Node),\n+                         Selector_Name =>\n+                           New_Reference_To\n+                             (RTE_Record_Component (RE_Predef_Prims), Loc)))),\n+                 Discrete_Range => Make_Range (Loc,\n+                   Make_Integer_Literal (Loc, Uint_1),\n+                   New_Reference_To (RTE (RE_Max_Predef_Prims), Loc))),\n+\n+             Expression =>\n+               Make_Slice (Loc,\n+                 Prefix =>\n+                   Make_Explicit_Dereference (Loc,\n+                     Unchecked_Convert_To (RTE (RE_Predef_Prims_Table_Ptr),\n+                       Make_Selected_Component (Loc,\n+                         Prefix =>\n+                           Build_DT (Loc, Old_Tag_Node),\n+                         Selector_Name =>\n+                           New_Reference_To\n+                             (RTE_Record_Component (RE_Predef_Prims), Loc)))),\n+\n+                 Discrete_Range =>\n+                   Make_Range (Loc,\n+                     Low_Bound  => Make_Integer_Literal (Loc, 1),\n+                     High_Bound =>\n+                       New_Reference_To (RTE (RE_Max_Predef_Prims), Loc))));\n+      else\n+         return\n+           Make_Assignment_Statement (Loc,\n+             Name =>\n+               Make_Slice (Loc,\n+                 Prefix =>\n+                   Make_Explicit_Dereference (Loc,\n+                     Build_Predef_Prims (Loc, New_Tag_Node)),\n+                 Discrete_Range => Make_Range (Loc,\n+                   Make_Integer_Literal (Loc, Uint_1),\n+                   New_Reference_To (RTE (RE_Max_Predef_Prims), Loc))),\n+\n+             Expression =>\n+               Make_Slice (Loc,\n+                 Prefix =>\n+                   Make_Explicit_Dereference (Loc,\n+                     Build_Predef_Prims (Loc, Old_Tag_Node)),\n+                 Discrete_Range =>\n+                   Make_Range (Loc,\n+                     Low_Bound  => Make_Integer_Literal (Loc, 1),\n+                     High_Bound =>\n+                       New_Reference_To (RTE (RE_Max_Predef_Prims), Loc))));\n+      end if;\n    end Build_Inherit_Predefined_Prims;\n \n    ------------------------"}]}