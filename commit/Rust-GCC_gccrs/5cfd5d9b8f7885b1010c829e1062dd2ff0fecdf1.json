{"sha": "5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNmZDVkOWI4Zjc4ODViMTAxMGM4MjllMTA2MmRkMmZmMGZlY2RmMQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2009-05-19T23:14:10Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2009-05-19T23:14:10Z"}, "message": "c-typeck.c (build_binary_op): Allow % on integal vectors.\n\n2009-05-19  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        * c-typeck.c (build_binary_op): Allow % on integal vectors.\n        * doc/extend.texi (Vector Extension): Document that % is allowed too.\n\n009-05-19  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        * typeck.c (build_binary_op): Allow % on integal vectors.\n\n2009-05-19  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        * gcc.dg/vector-4.c: New testcase.\n        * gcc.dg/simd-1b.c: % is now allowed for integer vectors.\n        * g++.dg/ext/vector16.C: New testcase.\n\nFrom-SVN: r147722", "tree": {"sha": "b8154d36e2f96a8f40d569b0ad6bf21baf23422d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8154d36e2f96a8f40d569b0ad6bf21baf23422d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1/comments", "author": null, "committer": null, "parents": [{"sha": "dae279f018e31acdf2b50acff91b416b5b97645e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dae279f018e31acdf2b50acff91b416b5b97645e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dae279f018e31acdf2b50acff91b416b5b97645e"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "698537fee5f85f02586b745d644f2b4a5759ce6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1", "patch": "@@ -1,3 +1,8 @@\n+2009-05-19  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\t* c-typeck.c (build_binary_op): Allow % on integal vectors.\n+\t* doc/extend.texi (Vector Extension): Document that % is allowed too.\n+\n 2009-05-19  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (ix86_avoid_jump_mispredicts): Check"}, {"sha": "ee1853a0f739a95dfcb79bab6e9fa4b74a6d6e3f", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1", "patch": "@@ -8988,7 +8988,11 @@ build_binary_op (location_t location, enum tree_code code,\n     case FLOOR_MOD_EXPR:\n       warn_for_div_by_zero (location, op1);\n \n-      if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n+      if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE\n+\t  && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE\n+\t  && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE)\n+\tcommon = 1;\n+      else if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n \t{\n \t  /* Although it would be tempting to shorten always here, that loses\n \t     on some targets, since the modulo instruction is undefined if the"}, {"sha": "bd81af6b406abf5136e1e9fe9da8e44374c40af1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1", "patch": "@@ -1,3 +1,7 @@\n+2009-05-19  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\t* typeck.c (build_binary_op): Allow % on integal vectors.\n+\n 2009-05-18  Jason Merrill  <jason@redhat.com>\n \n \tImplement explicit conversions ops as specified in N2437."}, {"sha": "a5f36188f77c9fbabdd501e26ece5cf01b099402", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1", "patch": "@@ -3492,7 +3492,11 @@ cp_build_binary_op (location_t location,\n     case FLOOR_MOD_EXPR:\n       warn_for_div_by_zero (location, op1);\n \n-      if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n+      if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE\n+\t  && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE\n+\t  && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE)\n+\tcommon = 1;\n+      else if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n \t{\n \t  /* Although it would be tempting to shorten always here, that loses\n \t     on some targets, since the modulo instruction is undefined if the"}, {"sha": "98df9d59447ce078e50d834e4323070c75f25e91", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1", "patch": "@@ -5746,7 +5746,7 @@ produce code that uses 4 @code{SIs}.\n \n The types defined in this manner can be used with a subset of normal C\n operations.  Currently, GCC will allow using the following operators\n-on these types: @code{+, -, *, /, unary minus, ^, |, &, ~}@.\n+on these types: @code{+, -, *, /, unary minus, ^, |, &, ~, %}@.\n \n The operations behave like C++ @code{valarrays}.  Addition is defined as\n the addition of the corresponding elements of the operands.  For"}, {"sha": "df16058cf36049992e79b9fb35ce10ebff4d197c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1", "patch": "@@ -1,3 +1,9 @@\n+2009-05-19  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\t* gcc.dg/vector-4.c: New testcase.\n+\t* gcc.dg/simd-1b.c: % is now allowed for integer vectors.\n+\t* g++.dg/ext/vector16.C: New testcase.\n+\n 2009-05-19  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR c/40172"}, {"sha": "7964a881f4a367e0cf41ca337be76805a934e08a", "filename": "gcc/testsuite/g++.dg/ext/vector16.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector16.C?ref=5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+#define vector __attribute__((vector_size(4*sizeof(int)) ))\n+\n+vector int a, b, c;\n+\n+\n+/* Test that remainder works for vectors. */\n+void f(void)\n+{\n+  a = b % c;\n+}"}, {"sha": "1e2b597b56518fce85a5cc3d6a81f65a490ec990", "filename": "gcc/testsuite/gcc.dg/simd-1b.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1b.c?ref=5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1", "patch": "@@ -14,7 +14,7 @@ void\n hanneke ()\n {\n   /* Operators on compatible SIMD types.  */\n-  a %= b; /* { dg-error \"invalid operands to binary %\" } */\n+  a %= b;\n   c &= d;\n   a |= b;\n   c ^= d;"}, {"sha": "7964a881f4a367e0cf41ca337be76805a934e08a", "filename": "gcc/testsuite/gcc.dg/vector-4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-4.c?ref=5cfd5d9b8f7885b1010c829e1062dd2ff0fecdf1", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+#define vector __attribute__((vector_size(4*sizeof(int)) ))\n+\n+vector int a, b, c;\n+\n+\n+/* Test that remainder works for vectors. */\n+void f(void)\n+{\n+  a = b % c;\n+}"}]}