{"sha": "46bfe1b0e11c4797c5926e0754fae2848026376c", "node_id": "C_kwDOANBUbNoAKDQ2YmZlMWIwZTExYzQ3OTdjNTkyNmUwNzU0ZmFlMjg0ODAyNjM3NmM", "commit": {"author": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-12-21T03:10:09Z"}, "committer": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-12-21T03:10:46Z"}, "message": "Fix incorrect loop exit edge probability [PR103270]\n\nr12-4526 cancelled jump thread path rotates loop. It exposes a issue in\nprofile-estimate when predict_extra_loop_exits, outer loop's exit edge\nis marked as inner loop's extra loop exit and set with incorrect\nprediction, then a hot inner loop will become cold loop finally through\noptimizations, this patch add loop check when searching extra exit edges\nto avoid unexpected predict_edge from predict_paths_for_bb.\n\nRegression tested on P8LE.\n\ngcc/ChangeLog:\n\n2021-12-21  Xionghu Luo  <luoxhu@linux.ibm.com>\n\n\tPR middle-end/103270\n\t* predict.c (predict_extra_loop_exits): Add loop parameter.\n\t(predict_loops): Call with loop argument.\n\ngcc/testsuite/ChangeLog:\n\n2021-12-21  Xionghu Luo  <luoxhu@linux.ibm.com>\n\n\tPR middle-end/103270\n\t* gcc.dg/pr103270.c: New test.", "tree": {"sha": "5beec987ad5bc59b1bf4b2ef7f84aec397aaef6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5beec987ad5bc59b1bf4b2ef7f84aec397aaef6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46bfe1b0e11c4797c5926e0754fae2848026376c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46bfe1b0e11c4797c5926e0754fae2848026376c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46bfe1b0e11c4797c5926e0754fae2848026376c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46bfe1b0e11c4797c5926e0754fae2848026376c/comments", "author": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "460d53f816fe30093653cb22ef0feeb4bddc0895", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/460d53f816fe30093653cb22ef0feeb4bddc0895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/460d53f816fe30093653cb22ef0feeb4bddc0895"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "1316ca88e204f1cfea46469b6c735edd414d7a77", "filename": "gcc/predict.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46bfe1b0e11c4797c5926e0754fae2848026376c/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46bfe1b0e11c4797c5926e0754fae2848026376c/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=46bfe1b0e11c4797c5926e0754fae2848026376c", "patch": "@@ -1859,7 +1859,7 @@ predict_iv_comparison (class loop *loop, basic_block bb,\n    exits to predict them using PRED_LOOP_EXTRA_EXIT.  */\n \n static void\n-predict_extra_loop_exits (edge exit_edge)\n+predict_extra_loop_exits (class loop *loop, edge exit_edge)\n {\n   unsigned i;\n   bool check_value_one;\n@@ -1912,12 +1912,14 @@ predict_extra_loop_exits (edge exit_edge)\n \tcontinue;\n       if (EDGE_COUNT (e->src->succs) != 1)\n \t{\n-\t  predict_paths_leading_to_edge (e, PRED_LOOP_EXTRA_EXIT, NOT_TAKEN);\n+\t  predict_paths_leading_to_edge (e, PRED_LOOP_EXTRA_EXIT, NOT_TAKEN,\n+\t\t\t\t\t loop);\n \t  continue;\n \t}\n \n       FOR_EACH_EDGE (e1, ei, e->src->preds)\n-\tpredict_paths_leading_to_edge (e1, PRED_LOOP_EXTRA_EXIT, NOT_TAKEN);\n+\tpredict_paths_leading_to_edge (e1, PRED_LOOP_EXTRA_EXIT, NOT_TAKEN,\n+\t\t\t\t       loop);\n     }\n }\n \n@@ -2008,7 +2010,7 @@ predict_loops (void)\n \t\t\t ex->src->index, ex->dest->index);\n \t      continue;\n \t    }\n-\t  predict_extra_loop_exits (ex);\n+\t  predict_extra_loop_exits (loop, ex);\n \n \t  if (number_of_iterations_exit (loop, ex, &niter_desc, false, false))\n \t    niter = niter_desc.niter;"}, {"sha": "819310e360e56ac67dba6e07cb15ddc4a8c9db31", "filename": "gcc/testsuite/gcc.dg/pr103270.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46bfe1b0e11c4797c5926e0754fae2848026376c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103270.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46bfe1b0e11c4797c5926e0754fae2848026376c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103270.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103270.c?ref=46bfe1b0e11c4797c5926e0754fae2848026376c", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-profile_estimate\" } */\n+\n+void test(int a, int* i)\n+{\n+  for (; a < 5; ++a)\n+    {\n+      int b = 0;\n+      int c = 0;\n+      for (; b != -11; b--)\n+\tfor (int d = 0; d ==0; d++)\n+\t  {\n+\t    *i += c & a;\n+\t    c = b;\n+\t  }\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"extra loop exit heuristics of edge\\[^:\\]*:\" \"profile_estimate\"} } */"}]}