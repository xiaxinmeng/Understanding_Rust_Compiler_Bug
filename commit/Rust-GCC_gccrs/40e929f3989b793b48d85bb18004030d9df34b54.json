{"sha": "40e929f3989b793b48d85bb18004030d9df34b54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBlOTI5ZjM5ODliNzkzYjQ4ZDg1YmIxODAwNDAzMGQ5ZGYzNGI1NA==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2004-05-23T16:07:42Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-05-23T16:07:42Z"}, "message": "re PR fortran/13773 (Incorrect diagnosis of restricted function)\n\n\tPR fortran/13773\n\t* expr.c (restricted_args): Remove redundant checks/argument.\n\t(external_spec_function): Update to match.\n\t(restricted_intrinsic): Rewrite.\n\nFrom-SVN: r82166", "tree": {"sha": "bd4bb37dafbff37b7aa0cfc2ca8dfdc872d9b217", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd4bb37dafbff37b7aa0cfc2ca8dfdc872d9b217"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40e929f3989b793b48d85bb18004030d9df34b54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40e929f3989b793b48d85bb18004030d9df34b54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40e929f3989b793b48d85bb18004030d9df34b54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40e929f3989b793b48d85bb18004030d9df34b54/comments", "author": null, "committer": null, "parents": [{"sha": "5291e69adedd50438763fcaf9c2bfd05d75ca5ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5291e69adedd50438763fcaf9c2bfd05d75ca5ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5291e69adedd50438763fcaf9c2bfd05d75ca5ff"}], "stats": {"total": 103, "additions": 14, "deletions": 89}, "files": [{"sha": "8338de9bc6c76d118124ec8a427afe96195a2947", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e929f3989b793b48d85bb18004030d9df34b54/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e929f3989b793b48d85bb18004030d9df34b54/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=40e929f3989b793b48d85bb18004030d9df34b54", "patch": "@@ -1,3 +1,10 @@\n+2004-05-23  Paul Brook  <paul@codesourcery.com>\n+\n+\tPR fortran/13773\n+\t* expr.c (restricted_args): Remove redundant checks/argument.\n+\t(external_spec_function): Update to match.\n+\t(restricted_intrinsic): Rewrite.\n+\n 2004-05-23  Paul Brook  <paul@codesourcery.com>\n \tVictor Leikehman  <lei@haifasphere.co.il>\n "}, {"sha": "1546dec2e0909e8f97c818d8b9a9af6f99c45345", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 7, "deletions": 89, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e929f3989b793b48d85bb18004030d9df34b54/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e929f3989b793b48d85bb18004030d9df34b54/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=40e929f3989b793b48d85bb18004030d9df34b54", "patch": "@@ -1478,26 +1478,12 @@ static try check_restricted (gfc_expr *);\n    integer or character.  */\n \n static try\n-restricted_args (gfc_actual_arglist * a, int check_type)\n+restricted_args (gfc_actual_arglist * a)\n {\n-  bt type;\n-\n   for (; a; a = a->next)\n     {\n       if (check_restricted (a->expr) == FAILURE)\n \treturn FAILURE;\n-\n-      if (!check_type)\n-\tcontinue;\n-\n-      type = a->expr->ts.type;\n-      if (type != BT_CHARACTER && type != BT_INTEGER)\n-\t{\n-\t  gfc_error\n-\t    (\"Function argument at %L must be of type INTEGER or CHARACTER\",\n-\t     &a->expr->where);\n-\t  return FAILURE;\n-\t}\n     }\n \n   return SUCCESS;\n@@ -1544,89 +1530,21 @@ external_spec_function (gfc_expr * e)\n       return FAILURE;\n     }\n \n-  return restricted_args (e->value.function.actual, 0);\n+  return restricted_args (e->value.function.actual);\n }\n \n \n /* Check to see that a function reference to an intrinsic is a\n-   restricted expression.  Some functions required by the standard are\n-   omitted because references to them have already been simplified.\n-   Strictly speaking, a lot of these checks are redundant with other\n-   checks.  If a function is indeed a particular intrinsic, then the\n-   type of its argument have already been checked and passed.  */\n+   restricted expression.  */\n \n static try\n restricted_intrinsic (gfc_expr * e)\n {\n-  gfc_intrinsic_sym *sym;\n-\n-  static struct\n-  {\n-    const char *name;\n-    int case_number;\n-  }\n-   const *cp, cases[] =\n-  {\n-    {\"repeat\", 0},\n-    {\"reshape\", 0},\n-    {\"selected_int_kind\", 0},\n-    {\"selected_real_kind\", 0},\n-    {\"transfer\", 0},\n-    {\"trim\", 0},\n-    {\"null\", 1},\n-    {\"lbound\", 2},\n-    {\"shape\", 2},\n-    {\"size\", 2},\n-    {\"ubound\", 2},\n-    /* bit_size() has already been reduced */\n-    {\"len\", 0},\n-    /* kind() has already been reduced */\n-    /* Numeric inquiry functions have been reduced */\n-    { NULL, 0}\n-  };\n-\n-  try t;\n-\n-  sym = e->value.function.isym;\n-  if (!sym)\n-    return FAILURE;\n-\n-  if (sym->elemental)\n-    return restricted_args (e->value.function.actual, 1);\n-\n-  for (cp = cases; cp->name; cp++)\n-    if (strcmp (cp->name, sym->name) == 0)\n-      break;\n-\n-  if (cp->name == NULL)\n-    {\n-      gfc_error (\"Intrinsic function '%s' at %L is not a restricted function\",\n-\t\t sym->name, &e->where);\n-      return FAILURE;\n-    }\n-\n-  switch (cp->case_number)\n-    {\n-    case 0:\n-      /* Functions that are restricted if they have character/integer args.  */\n-      t = restricted_args (e->value.function.actual, 1);\n-      break;\n-\n-    case 1:\t\t\t/* NULL() */\n-      t = SUCCESS;\n-      break;\n-\n-    case 2:\n-      /* Functions that could be checking the bounds of an assumed-size array.  */\n-      t = SUCCESS;\n-      /* TODO: implement checks from 7.1.6.2 (10) */\n-      break;\n-\n-    default:\n-      gfc_internal_error (\"restricted_intrinsic(): Bad case\");\n-    }\n+  /* TODO: Check constraints on inquiry functions.  7.1.6.2 (7).  */\n+  if (check_inquiry (e) == SUCCESS)\n+    return SUCCESS;\n \n-  return t;\n+  return restricted_args (e->value.function.actual);\n }\n \n "}]}