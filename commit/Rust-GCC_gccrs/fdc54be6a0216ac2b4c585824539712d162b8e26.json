{"sha": "fdc54be6a0216ac2b4c585824539712d162b8e26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRjNTRiZTZhMDIxNmFjMmI0YzU4NTgyNDUzOTcxMmQxNjJiOGUyNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-18T10:53:39Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-18T10:53:39Z"}, "message": "[multiple changes]\n\n2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* atree.adb (Elist11): New routine.\n\t(Set_Elist11): New routine.\n\t* atree.ads (Elist11): New routine.\n\t(Set_Elist11): New routine.\n\t* atree.h: Define Elist11.\n\t* contracts.adb (Analyze_Object_Contract): Verify the legality\n\tof all references to a variable given that the variable is a\n\tconstituent of a single protected/task type.\n\t* einfo.adb: Part_Of_References now utilizes Elist11.\n\t(Part_Of_References): New routine.\n\t(Set_Part_Of_References): New routine.\n\t(Write_Field11_Name): Add output for Part_Of_References.\n\t* einfo.ads New attribute Part_Of_References along with usage\n\tin entities.\n\t(Part_Of_References): New routine along with\n\tpragma Inline.\n\t(Set_Part_Of_References): New routine along with pragma Inline.\n\t* sem_prag.adb (Analyze_Constituent): Record a possible\n\treference to a concurrent constituent.\n\t(Analyze_Global_Item): Record a possible reference to a concurrent\n\tconstituent.\n\t(Analyze_Input_Output): Record a possible reference to a\n\tconcurrent constituent.\n\t* sem_res.adb (Resolve_Entity_Name): Record a possible reference\n\tto a concurrent constituent.\n\t* sem_util.adb (Check_Part_Of_Reference): New routine.\n\t(Record_Possible_Part_Of_Reference): New routine.\n\t* sem_util.ads (Check_Part_Of_Reference): New routine.\n\t(Record_Possible_Part_Of_Reference): New routine.\n\n2015-11-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* checks.adb (Apply_Arithmetic_Overflow_Minimized_Eliminated):\n\tAn if_expression is the proper place to apply the overflow\n\tminimization procedure if its context is not an enclosing\n\tarithmetic expression.\n\nFrom-SVN: r230540", "tree": {"sha": "34ba584a7a250519b5af1e0804a532ecbb456e43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34ba584a7a250519b5af1e0804a532ecbb456e43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdc54be6a0216ac2b4c585824539712d162b8e26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdc54be6a0216ac2b4c585824539712d162b8e26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdc54be6a0216ac2b4c585824539712d162b8e26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdc54be6a0216ac2b4c585824539712d162b8e26/comments", "author": null, "committer": null, "parents": [{"sha": "3f8d242bd3ad399b3ce685c154780d2da9dd51b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8d242bd3ad399b3ce685c154780d2da9dd51b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f8d242bd3ad399b3ce685c154780d2da9dd51b7"}], "stats": {"total": 341, "additions": 334, "deletions": 7}, "files": [{"sha": "c1b77c7f55f874a2c9573962a0be8ac0951f3762", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fdc54be6a0216ac2b4c585824539712d162b8e26", "patch": "@@ -1,3 +1,42 @@\n+2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* atree.adb (Elist11): New routine.\n+\t(Set_Elist11): New routine.\n+\t* atree.ads (Elist11): New routine.\n+\t(Set_Elist11): New routine.\n+\t* atree.h: Define Elist11.\n+\t* contracts.adb (Analyze_Object_Contract): Verify the legality\n+\tof all references to a variable given that the variable is a\n+\tconstituent of a single protected/task type.\n+\t* einfo.adb: Part_Of_References now utilizes Elist11.\n+\t(Part_Of_References): New routine.\n+\t(Set_Part_Of_References): New routine.\n+\t(Write_Field11_Name): Add output for Part_Of_References.\n+\t* einfo.ads New attribute Part_Of_References along with usage\n+\tin entities.\n+\t(Part_Of_References): New routine along with\n+\tpragma Inline.\n+\t(Set_Part_Of_References): New routine along with pragma Inline.\n+\t* sem_prag.adb (Analyze_Constituent): Record a possible\n+\treference to a concurrent constituent.\n+\t(Analyze_Global_Item): Record a possible reference to a concurrent\n+\tconstituent.\n+\t(Analyze_Input_Output): Record a possible reference to a\n+\tconcurrent constituent.\n+\t* sem_res.adb (Resolve_Entity_Name): Record a possible reference\n+\tto a concurrent constituent.\n+\t* sem_util.adb (Check_Part_Of_Reference): New routine.\n+\t(Record_Possible_Part_Of_Reference): New routine.\n+\t* sem_util.ads (Check_Part_Of_Reference): New routine.\n+\t(Record_Possible_Part_Of_Reference): New routine.\n+\n+2015-11-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* checks.adb (Apply_Arithmetic_Overflow_Minimized_Eliminated):\n+\tAn if_expression is the proper place to apply the overflow\n+\tminimization procedure if its context is not an enclosing\n+\tarithmetic expression.\n+\n 2015-11-18  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gnat_ugn/gnat_project_manager.rst,"}, {"sha": "5ae768a41eaba65af1138d8d8e2106b78782d609", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=fdc54be6a0216ac2b4c585824539712d162b8e26", "patch": "@@ -3093,6 +3093,17 @@ package body Atree is\n          end if;\n       end Elist10;\n \n+      function Elist11 (N : Node_Id) return Elist_Id is\n+         pragma Assert (Nkind (N) in N_Entity);\n+         Value : constant Union_Id := Nodes.Table (N + 1).Field11;\n+      begin\n+         if Value = 0 then\n+            return No_Elist;\n+         else\n+            return Elist_Id (Value);\n+         end if;\n+      end Elist11;\n+\n       function Elist13 (N : Node_Id) return Elist_Id is\n          pragma Assert (Nkind (N) in N_Entity);\n          Value : constant Union_Id := Nodes.Table (N + 2).Field6;\n@@ -5924,6 +5935,12 @@ package body Atree is\n          Nodes.Table (N + 1).Field10 := Union_Id (Val);\n       end Set_Elist10;\n \n+      procedure Set_Elist11 (N : Node_Id; Val : Elist_Id) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         Nodes.Table (N + 1).Field11 := Union_Id (Val);\n+      end Set_Elist11;\n+\n       procedure Set_Elist13 (N : Node_Id; Val : Elist_Id) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);"}, {"sha": "0f5b51225df695b4a56e6f3a60280361aec7f58c", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=fdc54be6a0216ac2b4c585824539712d162b8e26", "patch": "@@ -1439,6 +1439,9 @@ package Atree is\n       function Elist10 (N : Node_Id) return Elist_Id;\n       pragma Inline (Elist10);\n \n+      function Elist11 (N : Node_Id) return Elist_Id;\n+      pragma Inline (Elist11);\n+\n       function Elist13 (N : Node_Id) return Elist_Id;\n       pragma Inline (Elist13);\n \n@@ -2799,6 +2802,9 @@ package Atree is\n       procedure Set_Elist10 (N : Node_Id; Val : Elist_Id);\n       pragma Inline (Set_Elist10);\n \n+      procedure Set_Elist11 (N : Node_Id; Val : Elist_Id);\n+      pragma Inline (Set_Elist11);\n+\n       procedure Set_Elist13 (N : Node_Id; Val : Elist_Id);\n       pragma Inline (Set_Elist13);\n "}, {"sha": "a2159c837778285bde89b084e8012d0e0de7b5c4", "filename": "gcc/ada/atree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2Fatree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2Fatree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.h?ref=fdc54be6a0216ac2b4c585824539712d162b8e26", "patch": "@@ -516,6 +516,7 @@ extern Node_Id Current_Error_Node;\n #define Elist8(N)     Field8  (N)\n #define Elist9(N)     Field9  (N)\n #define Elist10(N)    Field10 (N)\n+#define Elist11(N)    Field11 (N)\n #define Elist13(N)    Field13 (N)\n #define Elist15(N)    Field15 (N)\n #define Elist16(N)    Field16 (N)"}, {"sha": "07a9dac3abc04e91b440a3ac59f785ec4ead1e12", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=fdc54be6a0216ac2b4c585824539712d162b8e26", "patch": "@@ -1208,7 +1208,18 @@ package body Checks is\n         or else (Nkind (P) = N_Range\n                   and then Nkind (Parent (P)) in N_Membership_Test)\n       then\n-         return;\n+         --  If_Expressions and Case_Expressions are treated as arithmetic\n+         --  ops, but if they appear in an assignment or similar contexts\n+         --  there is no overflow check that starts from that parent node,\n+         --  so apply check now.\n+\n+         if Nkind_In (P, N_If_Expression, N_Case_Expression)\n+           and then not Is_Signed_Integer_Arithmetic_Op (Parent (P))\n+         then\n+            null;\n+         else\n+            return;\n+         end if;\n       end if;\n \n       --  Otherwise, we have a top level arithmetic operation node, and this\n@@ -1302,7 +1313,7 @@ package body Checks is\n             Analyze_And_Resolve (Op);\n          end;\n \n-      --  Here we know the result is Long_Long_Integer'Base, of that it has\n+      --  Here we know the result is Long_Long_Integer'Base, or that it has\n       --  been rewritten because the parent operation is a conversion. See\n       --  Apply_Arithmetic_Overflow_Strict.Conversion_Optimization.\n "}, {"sha": "bc1691175f3b333fb29f5557dc000dd35eb6c1c2", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=fdc54be6a0216ac2b4c585824539712d162b8e26", "patch": "@@ -634,6 +634,7 @@ package body Contracts is\n       Items        : Node_Id;\n       Mode         : SPARK_Mode_Type;\n       Prag         : Node_Id;\n+      Ref_Elmt     : Elmt_Id;\n       Restore_Mode : Boolean := False;\n       Seen         : Boolean := False;\n \n@@ -770,6 +771,23 @@ package body Contracts is\n          if Present (Prag) then\n             Analyze_Part_Of_In_Decl_Part (Prag);\n \n+            --  The variable is a constituent of a single protected/task type\n+            --  and behaves as a component of the type. Verify that references\n+            --  to the variable occur within the definition or body of the type\n+            --  (SPARK RM 9.3).\n+\n+            if Present (Encapsulating_State (Obj_Id))\n+              and then Is_Single_Concurrent_Object\n+                         (Encapsulating_State (Obj_Id))\n+              and then Present (Part_Of_References (Obj_Id))\n+            then\n+               Ref_Elmt := First_Elmt (Part_Of_References (Obj_Id));\n+               while Present (Ref_Elmt) loop\n+                  Check_Part_Of_Reference (Obj_Id, Node (Ref_Elmt));\n+                  Next_Elmt (Ref_Elmt);\n+               end loop;\n+            end if;\n+\n          --  Otherwise check whether the lack of indicator Part_Of agrees with\n          --  the placement of the variable with respect to the state space.\n "}, {"sha": "b252e8c0b96eb3912359f2c23e8cd3342536e1d6", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=fdc54be6a0216ac2b4c585824539712d162b8e26", "patch": "@@ -95,13 +95,14 @@ package body Einfo is\n    --    Normalized_Position_Max         Uint10\n    --    Part_Of_Constituents            Elist10\n \n+   --    Block_Node                      Node11\n    --    Component_Bit_Offset            Uint11\n    --    Full_View                       Node11\n    --    Entry_Component                 Node11\n    --    Enumeration_Pos                 Uint11\n    --    Generic_Homonym                 Node11\n+   --    Part_Of_References              Elist11\n    --    Protected_Body_Subprogram       Node11\n-   --    Block_Node                      Node11\n \n    --    Barrier_Function                Node12\n    --    Enumeration_Rep                 Uint12\n@@ -2861,6 +2862,12 @@ package body Einfo is\n       return Elist10 (Id);\n    end Part_Of_Constituents;\n \n+   function Part_Of_References (Id : E) return L is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Variable);\n+      return Elist11 (Id);\n+   end Part_Of_References;\n+\n    function Partial_View_Has_Unknown_Discr (Id : E) return B is\n    begin\n       pragma Assert (Is_Type (Id));\n@@ -5897,6 +5904,12 @@ package body Einfo is\n       Set_Elist10 (Id, V);\n    end Set_Part_Of_Constituents;\n \n+   procedure Set_Part_Of_References (Id : E; V : L) is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Variable);\n+      Set_Elist11 (Id, V);\n+   end Set_Part_Of_References;\n+\n    procedure Set_Partial_View_Has_Unknown_Discr (Id : E; V : B := True) is\n    begin\n       pragma Assert (Is_Type (Id));\n@@ -9363,10 +9376,13 @@ package body Einfo is\n          when E_Generic_Package                            =>\n             Write_Str (\"Generic_Homonym\");\n \n-         when E_Function                                   |\n-              E_Procedure                                  |\n-              E_Entry                                      |\n-              E_Entry_Family                               =>\n+         when E_Variable                                   =>\n+            Write_Str (\"Part_Of_References\");\n+\n+         when E_Entry                                      |\n+              E_Entry_Family                               |\n+              E_Function                                   |\n+              E_Procedure                                  =>\n             Write_Str (\"Protected_Body_Subprogram\");\n \n          when others                                       =>"}, {"sha": "cd5a4fb25440a69a7fc8fd496bddedc99a68ef89", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=fdc54be6a0216ac2b4c585824539712d162b8e26", "patch": "@@ -3696,6 +3696,12 @@ package Einfo is\n --       constituents that are subject to indicator Part_Of (both aspect and\n --       option variants).\n \n+--    Part_Of_References (Elist11)\n+--       Present in variable entities. Contains all references to the variable\n+--       when it is subject to pragma Part_Of. If the variable is a constituent\n+--       of a single protected/task type, the references are examined as they\n+--       must appear only within the type defintion and the corresponding body.\n+\n --    Partial_View_Has_Unknown_Discr (Flag280)\n --       Present in all types. Set to Indicate that the partial view of a type\n --       has unknown discriminants. A default initialization of an object of\n@@ -6431,6 +6437,7 @@ package Einfo is\n    --    Hiding_Loop_Variable                (Node8)\n    --    Current_Value                       (Node9)\n    --    Part_Of_Constituents                (Elist10)\n+   --    Part_Of_References                  (Elist11)\n    --    Esize                               (Uint12)\n    --    Extra_Accessibility                 (Node13)\n    --    Alignment                           (Uint14)\n@@ -7089,6 +7096,7 @@ package Einfo is\n    function Packed_Array_Impl_Type              (Id : E) return E;\n    function Parent_Subtype                      (Id : E) return E;\n    function Part_Of_Constituents                (Id : E) return L;\n+   function Part_Of_References                  (Id : E) return L;\n    function Partial_View_Has_Unknown_Discr      (Id : E) return B;\n    function Pending_Access_Types                (Id : E) return L;\n    function Postconditions_Proc                 (Id : E) return E;\n@@ -7756,6 +7764,7 @@ package Einfo is\n    procedure Set_Packed_Array_Impl_Type          (Id : E; V : E);\n    procedure Set_Parent_Subtype                  (Id : E; V : E);\n    procedure Set_Part_Of_Constituents            (Id : E; V : L);\n+   procedure Set_Part_Of_References              (Id : E; V : L);\n    procedure Set_Partial_View_Has_Unknown_Discr  (Id : E; V : B := True);\n    procedure Set_Pending_Access_Types            (Id : E; V : L);\n    procedure Set_Postconditions_Proc             (Id : E; V : E);\n@@ -8582,6 +8591,7 @@ package Einfo is\n    pragma Inline (Parameter_Mode);\n    pragma Inline (Parent_Subtype);\n    pragma Inline (Part_Of_Constituents);\n+   pragma Inline (Part_Of_References);\n    pragma Inline (Partial_View_Has_Unknown_Discr);\n    pragma Inline (Pending_Access_Types);\n    pragma Inline (Postconditions_Proc);\n@@ -9043,6 +9053,7 @@ package Einfo is\n    pragma Inline (Set_Packed_Array_Impl_Type);\n    pragma Inline (Set_Parent_Subtype);\n    pragma Inline (Set_Part_Of_Constituents);\n+   pragma Inline (Set_Part_Of_References);\n    pragma Inline (Set_Partial_View_Has_Unknown_Discr);\n    pragma Inline (Set_Pending_Access_Types);\n    pragma Inline (Set_Postconditions_Proc);"}, {"sha": "dd4621993783a9de8f63b24edb4c4bf337cf90b9", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=fdc54be6a0216ac2b4c585824539712d162b8e26", "patch": "@@ -957,6 +957,16 @@ package body Sem_Prag is\n \n                      if Ekind (Item_Id) = E_Abstract_State then\n                         Append_New_Elmt (Item_Id, States_Seen);\n+\n+                     --  The variable may eventually become a constituent of a\n+                     --  single protected/task type. Record the reference now\n+                     --  and verify its legality when analyzing the contract of\n+                     --  the variable (SPARK RM 9.3).\n+\n+                     elsif Ekind (Item_Id) = E_Variable then\n+                        Record_Possible_Part_Of_Reference\n+                          (Var_Id => Item_Id,\n+                           Ref    => Item);\n                      end if;\n \n                      if Ekind_In (Item_Id, E_Abstract_State,\n@@ -2209,6 +2219,16 @@ package body Sem_Prag is\n \n                if Ekind (Item_Id) = E_Abstract_State then\n                   Append_New_Elmt (Item_Id, States_Seen);\n+\n+               --  The variable may eventually become a constituent of a single\n+               --  protected/task type. Record the reference now and verify its\n+               --  legality when analyzing the contract of the variable\n+               --  (SPARK RM 9.3).\n+\n+               elsif Ekind (Item_Id) = E_Variable then\n+                  Record_Possible_Part_Of_Reference\n+                    (Var_Id => Item_Id,\n+                     Ref    => Item);\n                end if;\n \n                if Ekind_In (Item_Id, E_Abstract_State, E_Constant, E_Variable)\n@@ -25452,6 +25472,17 @@ package body Sem_Prag is\n                   then\n                      Match_Constituent (Constit_Id);\n \n+                     --  The variable may eventually become a constituent of a\n+                     --  single protected/task type. Record the reference now\n+                     --  and verify its legality when analyzing the contract of\n+                     --  the variable (SPARK RM 9.3).\n+\n+                     if Ekind (Constit_Id) = E_Variable then\n+                        Record_Possible_Part_Of_Reference\n+                          (Var_Id => Constit_Id,\n+                           Ref    => Constit);\n+                     end if;\n+\n                   --  Otherwise the constituent is illegal\n \n                   else"}, {"sha": "f551c5e71c20501f09a7eb2bab1eca85563e617e", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=fdc54be6a0216ac2b4c585824539712d162b8e26", "patch": "@@ -7240,6 +7240,15 @@ package body Sem_Res is\n             then\n                Check_Elab_Call (N);\n             end if;\n+\n+            --  The variable may eventually become a constituent of a single\n+            --  protected/task type. Record the reference now and verify its\n+            --  legality when analyzing the contract of the variable\n+            --  (SPARK RM 9.3).\n+\n+            if Ekind (E) = E_Variable then\n+               Record_Possible_Part_Of_Reference (E, N);\n+            end if;\n          end if;\n \n          --  A Ghost entity must appear in a specific context"}, {"sha": "47ad601c5781a25a683025f047440dd54b31b218", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=fdc54be6a0216ac2b4c585824539712d162b8e26", "patch": "@@ -1916,6 +1916,126 @@ package body Sem_Util is\n       end if;\n    end Cannot_Raise_Constraint_Error;\n \n+   -----------------------------\n+   -- Check_Part_Of_Reference --\n+   -----------------------------\n+\n+   procedure Check_Part_Of_Reference (Var_Id : Entity_Id; Ref : Node_Id) is\n+      Conc_Typ : constant Entity_Id := Encapsulating_State (Var_Id);\n+      Decl     : Node_Id;\n+      OK_Use   : Boolean := False;\n+      Par      : Node_Id;\n+      Prag_Nam : Name_Id;\n+      Spec_Id  : Entity_Id;\n+\n+   begin\n+      --  Traverse the parent chain looking for a suitable context for the\n+      --  reference to the concurrent constituent.\n+\n+      Par := Parent (Ref);\n+      while Present (Par) loop\n+         if Nkind (Par) = N_Pragma then\n+            Prag_Nam := Pragma_Name (Par);\n+\n+            --  A concurrent constituent is allowed to appear in pragmas\n+            --  Initial_Condition and Initializes as this is part of the\n+            --  elaboration checks for the constituent (SPARK RM 9.3).\n+\n+            if Nam_In (Prag_Nam, Name_Initial_Condition, Name_Initializes) then\n+               OK_Use := True;\n+               exit;\n+\n+            --  When the reference appears within pragma Depends or Global,\n+            --  check whether the pragma applies to a single task type. Note\n+            --  that the pragma is not encapsulated by the type definition,\n+            --  but this is still a valid context.\n+\n+            elsif Nam_In (Prag_Nam, Name_Depends, Name_Global) then\n+               Decl := Find_Related_Declaration_Or_Body (Par);\n+\n+               if Nkind (Decl) = N_Object_Declaration\n+                 and then Defining_Entity (Decl) = Conc_Typ\n+               then\n+                  OK_Use := True;\n+                  exit;\n+               end if;\n+            end if;\n+\n+         --  The reference appears somewhere in the definition of the single\n+         --  protected/task type (SPARK RM 9.3).\n+\n+         elsif Nkind_In (Par, N_Single_Protected_Declaration,\n+                              N_Single_Task_Declaration)\n+           and then Defining_Entity (Par) = Conc_Typ\n+         then\n+            OK_Use := True;\n+            exit;\n+\n+         --  The reference appears within the expanded declaration or the body\n+         --  of the single protected/task type (SPARK RM 9.3).\n+\n+         elsif Nkind_In (Par, N_Protected_Body,\n+                              N_Protected_Type_Declaration,\n+                              N_Task_Body,\n+                              N_Task_Type_Declaration)\n+         then\n+            Spec_Id := Unique_Defining_Entity (Par);\n+\n+            if Present (Anonymous_Object (Spec_Id))\n+              and then Anonymous_Object (Spec_Id) = Conc_Typ\n+            then\n+               OK_Use := True;\n+               exit;\n+            end if;\n+\n+         --  The reference has been relocated within an internally generated\n+         --  package or subprogram. Assume that the reference is legal as the\n+         --  real check was already performed in the original context of the\n+         --  reference.\n+\n+         elsif Nkind_In (Par, N_Package_Body,\n+                              N_Package_Declaration,\n+                              N_Subprogram_Body,\n+                              N_Subprogram_Declaration)\n+           and then not Comes_From_Source (Par)\n+         then\n+            OK_Use := True;\n+            exit;\n+\n+         --  The reference has been relocated to an inlined body for GNATprove.\n+         --  Assume that the reference is legal as the real check was already\n+         --  performed in the original context of the reference.\n+\n+         elsif GNATprove_Mode\n+           and then Nkind (Par) = N_Subprogram_Body\n+           and then Chars (Defining_Entity (Par)) = Name_uParent\n+         then\n+            OK_Use := True;\n+            exit;\n+         end if;\n+\n+         Par := Parent (Par);\n+      end loop;\n+\n+      --  The reference is illegal as it appears outside the definition or\n+      --  body of the single protected/task type.\n+\n+      if not OK_Use then\n+         Error_Msg_NE\n+           (\"reference to variable & cannot appear in this context\",\n+            Ref, Var_Id);\n+         Error_Msg_Name_1 := Chars (Var_Id);\n+\n+         if Ekind (Conc_Typ) = E_Protected_Type then\n+            Error_Msg_NE\n+              (\"\\% is constituent of single protected type &\", Ref, Conc_Typ);\n+         else\n+            Error_Msg_NE\n+              (\"\\% is constituent of single task type &\", Ref, Conc_Typ);\n+         end if;\n+      end if;\n+   end Check_Part_Of_Reference;\n+\n    -----------------------------------------\n    -- Check_Dynamically_Tagged_Expression --\n    -----------------------------------------\n@@ -17255,6 +17375,42 @@ package body Sem_Util is\n       Set_Sloc (Endl, Loc);\n    end Process_End_Label;\n \n+   ---------------------------------------\n+   -- Record_Possible_Part_Of_Reference --\n+   ---------------------------------------\n+\n+   procedure Record_Possible_Part_Of_Reference\n+     (Var_Id : Entity_Id;\n+      Ref    : Node_Id)\n+   is\n+      Encap : constant Entity_Id := Encapsulating_State (Var_Id);\n+      Refs  : Elist_Id;\n+\n+   begin\n+      --  The variable is a constituent of a single protected/task type. Such\n+      --  a variable acts as a component of the type and must appear within a\n+      --  specific region (SPARK RM 9.3). Instead of recording the reference,\n+      --  verify its legality now.\n+\n+      if Present (Encap) and then Is_Single_Concurrent_Object (Encap) then\n+         Check_Part_Of_Reference (Var_Id, Ref);\n+\n+      --  The variable is subject to pragma Part_Of and may eventually become a\n+      --  constituent of a single protected/task type. Record the reference to\n+      --  verify its placement when the contract of the variable is analyzed.\n+\n+      elsif Present (Get_Pragma (Var_Id, Pragma_Part_Of)) then\n+         Refs := Part_Of_References (Var_Id);\n+\n+         if No (Refs) then\n+            Refs := New_Elmt_List;\n+            Set_Part_Of_References (Var_Id, Refs);\n+         end if;\n+\n+         Append_Elmt (Ref, Refs);\n+      end if;\n+   end Record_Possible_Part_Of_Reference;\n+\n    ----------------\n    -- Referenced --\n    ----------------"}, {"sha": "91c5d85a518d46b3117431fac4cd3e7bb95c1a83", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc54be6a0216ac2b4c585824539712d162b8e26/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=fdc54be6a0216ac2b4c585824539712d162b8e26", "patch": "@@ -252,6 +252,10 @@ package Sem_Util is\n    --  not necessarily mean that CE could be raised, but a response of True\n    --  means that for sure CE cannot be raised.\n \n+   procedure Check_Part_Of_Reference (Var_Id : Entity_Id; Ref : Node_Id);\n+   --  Verify the legality of reference Ref to variable Var_Id when the\n+   --  variable is a constituent of a single protected/task type.\n+\n    procedure Check_Dynamically_Tagged_Expression\n      (Expr        : Node_Id;\n       Typ         : Entity_Id;\n@@ -1922,6 +1926,14 @@ package Sem_Util is\n    --  parameter Ent gives the entity to which the End_Label refers,\n    --  and to which cross-references are to be generated.\n \n+   procedure Record_Possible_Part_Of_Reference\n+     (Var_Id : Entity_Id;\n+      Ref    : Node_Id);\n+   --  Save reference Ref to variable Var_Id when the variable is subject to\n+   --  pragma Part_Of. If the variable is known to be a constituent of a single\n+   --  protected/task type, the legality of the reference is verified and the\n+   --  save does not take place.\n+\n    function Referenced (Id : Entity_Id; Expr : Node_Id) return Boolean;\n    --  Determine whether entity Id is referenced within expression Expr\n "}]}