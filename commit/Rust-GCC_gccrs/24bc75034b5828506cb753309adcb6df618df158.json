{"sha": "24bc75034b5828506cb753309adcb6df618df158", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRiYzc1MDM0YjU4Mjg1MDZjYjc1MzMwOWFkY2I2ZGY2MThkZjE1OA==", "commit": {"author": {"name": "Aditya Kumar", "email": "aditya.k7@samsung.com", "date": "2015-11-04T20:59:18Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2015-11-04T20:59:18Z"}, "message": "remove parameter_rename_map\n\nThis map was used in the transition to the new scop detection: with the new scop\ndetection, we do not need this map anymore.\n\n       * graphite-isl-ast-to-gimple.c (gcc_expression_from_isl_ast_expr_id):\n       Remove use of parameter_rename_map.\n       (copy_def): Remove.\n       (copy_internal_parameters): Remove.\n       (graphite_regenerate_ast_isl): Remove call to copy_internal_parameters.\n       * sese.c (new_sese_info): Do not initialize parameter_rename_map.\n       (free_sese_info): Do not free parameter_rename_map.\n       (set_rename): Do not use parameter_rename_map.\n       (rename_uses): Update call to set_rename.\n       (graphite_copy_stmts_from_block): Do not use parameter_rename_map.\n       * sese.h (parameter_rename_map_t): Remove.\n       (struct sese_info_t): Remove field parameter_rename_map.\n\nCo-Authored-By: Sebastian Pop <s.pop@samsung.com>\n\nFrom-SVN: r229783", "tree": {"sha": "850eea85a1b48f59f6d6d684c118eb1533ccd8d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/850eea85a1b48f59f6d6d684c118eb1533ccd8d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24bc75034b5828506cb753309adcb6df618df158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24bc75034b5828506cb753309adcb6df618df158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24bc75034b5828506cb753309adcb6df618df158", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24bc75034b5828506cb753309adcb6df618df158/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b38d3ecfe83db1237281b2f5074289895fd5cfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b38d3ecfe83db1237281b2f5074289895fd5cfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b38d3ecfe83db1237281b2f5074289895fd5cfd"}], "stats": {"total": 138, "additions": 20, "deletions": 118}, "files": [{"sha": "99ad1589cabbad007790a53f1cd91b1ffe2c1f63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24bc75034b5828506cb753309adcb6df618df158/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24bc75034b5828506cb753309adcb6df618df158/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24bc75034b5828506cb753309adcb6df618df158", "patch": "@@ -1,3 +1,19 @@\n+2015-11-04  Aditya Kumar  <aditya.k7@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* graphite-isl-ast-to-gimple.c (gcc_expression_from_isl_ast_expr_id):\n+\tRemove use of parameter_rename_map.\n+\t(copy_def): Remove.\n+\t(copy_internal_parameters): Remove.\n+\t(graphite_regenerate_ast_isl): Remove call to copy_internal_parameters.\n+\t* sese.c (new_sese_info): Do not initialize parameter_rename_map.\n+\t(free_sese_info): Do not free parameter_rename_map.\n+\t(set_rename): Do not use parameter_rename_map.\n+\t(rename_uses): Update call to set_rename.\n+\t(graphite_copy_stmts_from_block): Do not use parameter_rename_map.\n+\t* sese.h (parameter_rename_map_t): Remove.\n+\t(struct sese_info_t): Remove field parameter_rename_map.\n+\n 2015-11-04  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "628fc90f7b23bfaa0262a955c05e33608512c66a", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 1, "deletions": 72, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24bc75034b5828506cb753309adcb6df618df158/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24bc75034b5828506cb753309adcb6df618df158/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=24bc75034b5828506cb753309adcb6df618df158", "patch": "@@ -288,11 +288,7 @@ gcc_expression_from_isl_ast_expr_id (tree type,\n \t      \"Could not map isl_id to tree expression\");\n   isl_ast_expr_free (expr_id);\n   tree t = res->second;\n-  tree *val = region->parameter_rename_map->get(t);\n-\n-  if (!val)\n-   val = &t;\n-  return fold_convert (type, *val);\n+  return fold_convert (type, t);\n }\n \n /* Converts an isl_ast_expr_int expression E to a GCC expression tree of\n@@ -1089,70 +1085,6 @@ scop_to_isl_ast (scop_p scop, ivs_params &ip)\n   return ast_isl;\n }\n \n-/* Copy def from sese REGION to the newly created TO_REGION. TR is defined by\n-   DEF_STMT. GSI points to entry basic block of the TO_REGION.  */\n-\n-static void\n-copy_def (tree tr, gimple *def_stmt, sese_info_p region, sese_info_p to_region,\n-\t  gimple_stmt_iterator *gsi)\n-{\n-  if (!defined_in_sese_p (tr, region->region))\n-    return;\n-\n-  ssa_op_iter iter;\n-  use_operand_p use_p;\n-  FOR_EACH_SSA_USE_OPERAND (use_p, def_stmt, iter, SSA_OP_USE)\n-    {\n-      tree use_tr = USE_FROM_PTR (use_p);\n-\n-      /* Do not copy parameters that have been generated in the header of the\n-\t scop.  */\n-      if (region->parameter_rename_map->get(use_tr))\n-\tcontinue;\n-\n-      gimple *def_of_use = SSA_NAME_DEF_STMT (use_tr);\n-      if (!def_of_use)\n-\tcontinue;\n-\n-      copy_def (use_tr, def_of_use, region, to_region, gsi);\n-    }\n-\n-  gimple *copy = gimple_copy (def_stmt);\n-  gsi_insert_after (gsi, copy, GSI_NEW_STMT);\n-\n-  /* Create new names for all the definitions created by COPY and\n-     add replacement mappings for each new name.  */\n-  def_operand_p def_p;\n-  ssa_op_iter op_iter;\n-  FOR_EACH_SSA_DEF_OPERAND (def_p, copy, op_iter, SSA_OP_ALL_DEFS)\n-    {\n-      tree old_name = DEF_FROM_PTR (def_p);\n-      tree new_name = create_new_def_for (old_name, copy, def_p);\n-      region->parameter_rename_map->put(old_name, new_name);\n-    }\n-\n-  update_stmt (copy);\n-}\n-\n-static void\n-copy_internal_parameters (sese_info_p region, sese_info_p to_region)\n-{\n-  /* For all the parameters which definitino is in the if_region->false_region,\n-     insert code on true_region (if_region->true_region->entry). */\n-\n-  int i;\n-  tree tr;\n-  gimple_stmt_iterator gsi = gsi_start_bb(to_region->region.entry->dest);\n-\n-  FOR_EACH_VEC_ELT (region->params, i, tr)\n-    {\n-      // If def is not in region.\n-      gimple *def_stmt = SSA_NAME_DEF_STMT (tr);\n-      if (def_stmt)\n-\tcopy_def (tr, def_stmt, region, to_region, &gsi);\n-    }\n-}\n-\n /* GIMPLE Loop Generator: generates loops from STMT in GIMPLE form for\n    the given SCOP.  Return true if code generation succeeded.\n \n@@ -1192,9 +1124,6 @@ graphite_regenerate_ast_isl (scop_p scop)\n \n   context_loop = region->region.entry->src->loop_father;\n \n-  /* Copy all the parameters which are defined in the region.  */\n-  copy_internal_parameters(if_region->false_region, if_region->true_region);\n-\n   translate_isl_ast_to_gimple t(region);\n   edge e = single_succ_edge (if_region->true_region->region.entry->dest);\n   split_edge (e);"}, {"sha": "644c87cf39fdaf5b84e0ef7fcbacba45d7c5d1f6", "filename": "gcc/sese.c", "status": "modified", "additions": 3, "deletions": 41, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24bc75034b5828506cb753309adcb6df618df158/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24bc75034b5828506cb753309adcb6df618df158/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=24bc75034b5828506cb753309adcb6df618df158", "patch": "@@ -259,7 +259,6 @@ new_sese_info (edge entry, edge exit)\n   SESE_LOOPS (region) = BITMAP_ALLOC (NULL);\n   SESE_LOOP_NEST (region).create (3);\n   SESE_PARAMS (region).create (3);\n-  region->parameter_rename_map = new parameter_rename_map_t;\n   region->bbs.create (3);\n \n   return region;\n@@ -275,8 +274,6 @@ free_sese_info (sese_info_p region)\n \n   SESE_PARAMS (region).release ();\n   SESE_LOOP_NEST (region).release ();\n-  delete region->parameter_rename_map;\n-  region->parameter_rename_map = NULL;\n \n   XDELETE (region);\n }\n@@ -370,8 +367,7 @@ get_rename (rename_map_type *rename_map, tree old_name)\n /* Register in RENAME_MAP the rename tuple (OLD_NAME, EXPR).  */\n \n static void\n-set_rename (rename_map_type *rename_map, tree old_name, tree expr,\n-\t    sese_info_p region)\n+set_rename (rename_map_type *rename_map, tree old_name, tree expr)\n {\n   if (dump_file)\n     {\n@@ -386,13 +382,6 @@ set_rename (rename_map_type *rename_map, tree old_name, tree expr,\n     return;\n \n   rename_map->put (old_name, expr);\n-\n-  tree t;\n-  int i;\n-  /* For a parameter of a scop we dont want to rename it.  */\n-  FOR_EACH_VEC_ELT (SESE_PARAMS (region), i, t)\n-    if (old_name == t)\n-      region->parameter_rename_map->put(old_name, expr);\n }\n \n /* Renames the scalar uses of the statement COPY, using the\n@@ -498,7 +487,7 @@ rename_uses (gimple *copy, rename_map_type *rename_map,\n \t    recompute_tree_invariant_for_addr_expr (rhs);\n \t}\n \n-      set_rename (rename_map, old_name, new_expr, region);\n+      set_rename (rename_map, old_name, new_expr);\n     }\n \n   return changed;\n@@ -539,14 +528,6 @@ graphite_copy_stmts_from_block (basic_block bb, basic_block new_bb,\n \t  && scev_analyzable_p (lhs, region->region))\n \tcontinue;\n \n-      /* Do not copy parameters that have been generated in the header of the\n-\t scop.  */\n-      if (is_gimple_assign (stmt)\n-\t  && (lhs = gimple_assign_lhs (stmt))\n-\t  && TREE_CODE (lhs) == SSA_NAME\n-\t  && region->parameter_rename_map->get(lhs))\n-\tcontinue;\n-\n       /* Create a new copy of STMT and duplicate STMT's virtual\n \t operands.  */\n       copy = gimple_copy (stmt);\n@@ -561,7 +542,7 @@ graphite_copy_stmts_from_block (basic_block bb, basic_block new_bb,\n  \t{\n  \t  tree old_name = DEF_FROM_PTR (def_p);\n  \t  tree new_name = create_new_def_for (old_name, copy, def_p);\n-\t  set_rename (rename_map, old_name, new_name, region);\n+\t  set_rename (rename_map, old_name, new_name);\n  \t}\n \n       if (rename_uses (copy, rename_map, &gsi_tgt, region, loop, iv_map,\n@@ -571,25 +552,6 @@ graphite_copy_stmts_from_block (basic_block bb, basic_block new_bb,\n \t  fold_stmt_inplace (&gsi_tgt);\n \t}\n \n-      /* For each SSA_NAME in the parameter_rename_map rename their usage.  */\n-      ssa_op_iter iter;\n-      use_operand_p use_p;\n-      if (!is_gimple_debug (copy))\n-\tFOR_EACH_SSA_USE_OPERAND (use_p, copy, iter, SSA_OP_USE)\n-\t  {\n-\t    tree old_name = USE_FROM_PTR (use_p);\n-\n-\t    if (TREE_CODE (old_name) != SSA_NAME\n-\t\t|| SSA_NAME_IS_DEFAULT_DEF (old_name))\n-\t      continue;\n-\n-\t    tree *new_expr = region->parameter_rename_map->get (old_name);\n-\t    if (!new_expr)\n-\t      continue;\n-\n-\t    replace_exp (use_p, *new_expr);\n-\t  }\n-\n       update_stmt (copy);\n     }\n }"}, {"sha": "b3d48b9d4218ccbf3a8132b49dca121dd29ab885", "filename": "gcc/sese.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24bc75034b5828506cb753309adcb6df618df158/gcc%2Fsese.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24bc75034b5828506cb753309adcb6df618df158/gcc%2Fsese.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.h?ref=24bc75034b5828506cb753309adcb6df618df158", "patch": "@@ -22,8 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_SESE_H\n #define GCC_SESE_H\n \n-typedef hash_map<tree, tree> parameter_rename_map_t;\n-\n /* A Single Entry, Single Exit region is a part of the CFG delimited\n    by two edges.  */\n struct sese_l\n@@ -61,9 +59,6 @@ typedef struct sese_info_t\n   /* Parameters used within the SCOP.  */\n   vec<tree> params;\n \n-  /* Parameters to be renamed.  */\n-  parameter_rename_map_t *parameter_rename_map;\n-\n   /* Loops completely contained in this SESE.  */\n   bitmap loops;\n   vec<loop_p> loop_nest;"}]}