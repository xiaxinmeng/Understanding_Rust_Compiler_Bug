{"sha": "1ec9bf8aa0d0b2375e43668f4a6c186856c9dbc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVjOWJmOGFhMGQwYjIzNzVlNDM2NjhmNGE2YzE4Njg1NmM5ZGJjOQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2001-12-08T22:29:03Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2001-12-08T22:29:03Z"}, "message": "builtin-types-compatible-p.c: New.\n\n2001-10-08  Aldy Hernandez  <aldyh@redhat.com>\n\n        * testsuite/gcc.c-torture/execute/builtin-types-compatible-p.c: New.\n\n        * testsuite/gcc.c-torture/gcc.dg/builtin-choose-expr.c: New.\n\nFrom-SVN: r47797", "tree": {"sha": "5eae308c903e4276f6f8ba94e5407354ed462b7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5eae308c903e4276f6f8ba94e5407354ed462b7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ec9bf8aa0d0b2375e43668f4a6c186856c9dbc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ec9bf8aa0d0b2375e43668f4a6c186856c9dbc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ec9bf8aa0d0b2375e43668f4a6c186856c9dbc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ec9bf8aa0d0b2375e43668f4a6c186856c9dbc9/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "79dc3d44fbb3e5461396f95725eab5b442c7d9a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79dc3d44fbb3e5461396f95725eab5b442c7d9a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79dc3d44fbb3e5461396f95725eab5b442c7d9a8"}], "stats": {"total": 133, "additions": 133, "deletions": 0}, "files": [{"sha": "1320d3cedc99cffd26203c1fff40eca8c2e301d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec9bf8aa0d0b2375e43668f4a6c186856c9dbc9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec9bf8aa0d0b2375e43668f4a6c186856c9dbc9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1ec9bf8aa0d0b2375e43668f4a6c186856c9dbc9", "patch": "@@ -1,3 +1,13 @@\n+2001-10-08  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * gcc.c-torture/execute/builtin-types-compatible-p.c: New.\n+\n+        * gcc.dg/builtin-choose-expr.c: New.\n+\n+2001-12-07  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * gcc.dg/altivec-2.c: New.\n+\n 2001-12-07  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.dg/cpp/ucs.c: Adjust expected warning for 64-bit hosts."}, {"sha": "a901c725f792e5966e9595e4a74bbef17e0e833d", "filename": "gcc/testsuite/gcc.c-torture/execute/builtin-types-compatible-p.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec9bf8aa0d0b2375e43668f4a6c186856c9dbc9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-types-compatible-p.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec9bf8aa0d0b2375e43668f4a6c186856c9dbc9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-types-compatible-p.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-types-compatible-p.c?ref=1ec9bf8aa0d0b2375e43668f4a6c186856c9dbc9", "patch": "@@ -0,0 +1,35 @@\n+int i;\n+double d;\n+\n+/* Make sure we return a constant.  */\n+float rootbeer[__builtin_types_compatible_p (int, typeof(i))];\n+\n+typedef enum { hot, dog, poo, bear } dingos;\n+typedef enum { janette, laura, amanda } cranberry;\n+\n+typedef float same1;\n+typedef float same2;\n+\n+int main (void);\n+\n+int main (void)\n+{\n+  /* Compatible types.  */\n+  if (!(__builtin_types_compatible_p (int, const int)\n+\t&& __builtin_types_compatible_p (typeof (hot), int)\n+\t&& __builtin_types_compatible_p (typeof (hot), typeof (laura))\n+\t&& __builtin_types_compatible_p (int[5], int[])\n+\t&& __builtin_types_compatible_p (typeof (dingos), typeof (cranberry))\n+\t&& __builtin_types_compatible_p (same1, same2)))\n+    abort ();\n+\n+  /* Incompatible types.  */\n+  if (__builtin_types_compatible_p (char *, int)\n+      || __builtin_types_compatible_p (char *, const char *)\n+      || __builtin_types_compatible_p (long double, double)\n+      || __builtin_types_compatible_p (typeof (i), typeof (d))\n+      || __builtin_types_compatible_p (char, int)\n+      || __builtin_types_compatible_p (char *, char **))\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "045dc6c41ff31eac76a6e9ff7c08dde449de0bd8", "filename": "gcc/testsuite/gcc.dg/builtin-choose-expr.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ec9bf8aa0d0b2375e43668f4a6c186856c9dbc9/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-choose-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ec9bf8aa0d0b2375e43668f4a6c186856c9dbc9/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-choose-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-choose-expr.c?ref=1ec9bf8aa0d0b2375e43668f4a6c186856c9dbc9", "patch": "@@ -0,0 +1,88 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -Wall\" } */\n+\n+#define choose __builtin_choose_expr\n+\n+/* Check the type of __builtin_choose_expr between E1 and E2, both\n+   ways round and with both 0 and 1 as the condition.  */\n+#define ASSERT_COND_TYPE(E1, E2)\t\t\t\t\\\n+        do {\t\t\t\t\t\t\t\\\n+          typedef __typeof(E1) T1;\t\t\t\t\\\n+          typedef __typeof(E2) T2;\t\t\t\t\\\n+          typedef T1 **T1pp;\t\t\t\t\t\\\n+          typedef T2 **T2pp;\t\t\t\t\t\\\n+          typedef __typeof(choose (1, (E1), (E2))) T1a;\t\t\\\n+          typedef __typeof(choose (0, (E2), (E1))) T1b;\t\t\\\n+          typedef __typeof(choose (1, (E2), (E1))) T2a;\t\t\\\n+          typedef __typeof(choose (0, (E1), (E2))) T2b;\t\t\\\n+          typedef T1a **T1app;\t\t\t\t\t\\\n+          typedef T1b **T1bpp;\t\t\t\t\t\\\n+          typedef T2a **T2app;\t\t\t\t\t\\\n+          typedef T2b **T2bpp;\t\t\t\t\t\\\n+          T1pp t1 = 0;\t\t\t\t\t\t\\\n+          T2pp t2 = 0;\t\t\t\t\t\t\\\n+          T1app t1a = 0;\t\t\t\t\t\\\n+          T1bpp t1b = 0;\t\t\t\t\t\\\n+          T2app t2a = 0;\t\t\t\t\t\\\n+          T2bpp t2b = 0;\t\t\t\t\t\\\n+          t1 = t1a;\t\t\t\t\t\t\\\n+          t1 = t1b;\t\t\t\t\t\t\\\n+          t2 = t2a;\t\t\t\t\t\t\\\n+          t2 = t2b;\t\t\t\t\t\t\\\n+        } while (0)\n+\n+\n+extern void abort ();\n+extern void exit ();\n+\n+void bad ()\n+{\n+  abort ();\n+}\n+\n+void good ()\n+{\n+  exit (0);\n+}\n+\n+int main (void)\n+{\n+  signed char sc1, sc2;\n+  void *v1;\n+  int i, j;\n+  double dd;\n+  float f;\n+  typedef void (*fpt)(void);\n+  fpt triple;\n+  struct S { int x, y; } pour, some, sugar;\n+  union u { int p; } united, nations;\n+\n+  if (__builtin_choose_expr (0, 12, 0)\n+      || !__builtin_choose_expr (45, 5, 0)\n+      || !__builtin_choose_expr (45, 3, 0))\n+    abort ();\n+\n+  ASSERT_COND_TYPE (sc1, sc2);\n+  ASSERT_COND_TYPE (v1, sc1);\n+  ASSERT_COND_TYPE (i, j);\n+  ASSERT_COND_TYPE (dd, main);\n+  ASSERT_COND_TYPE ((float)dd, i);\n+  ASSERT_COND_TYPE (4, f);\n+  ASSERT_COND_TYPE (triple, some);\n+  ASSERT_COND_TYPE (united, nations);\n+  ASSERT_COND_TYPE (nations, main);\n+\n+  pour.y = 69;\n+  __builtin_choose_expr (0, bad (), sugar) = pour;\n+  if (sugar.y != 69)\n+    abort ();\n+\n+  __builtin_choose_expr (sizeof (int), f, bad ()) = 3.5F;\n+\n+  if (f != 3.5F)\n+    abort ();\n+\n+  __builtin_choose_expr (1, good, bad)();\n+\n+  exit (0);\n+}"}]}