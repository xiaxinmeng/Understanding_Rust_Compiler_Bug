{"sha": "7e717196997438ed21b6866df4d49cd2a4e98174", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U3MTcxOTY5OTc0MzhlZDIxYjY4NjZkZjRkNDljZDJhNGU5ODE3NA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-05-18T01:24:26Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-05-18T01:24:26Z"}, "message": "Makefile.in (TARGET_TOOLPREFIX): No longer define.\n\n        * Makefile.in (TARGET_TOOLPREFIX): No longer define.\n        (AR_FOR_TARGET, RANLIB_FOR_TARGET): Define to use versions in\n        the build tree if they exist.\n        (AR, AR_FLAGS, OLDAR, OLDAR_FLAGS, RANLIB, RANLIB_TEST): Update\n        appropriately.\n        (objdir): Let configure substitute value.\n        (FLOAT_H): Let configure select a pre-built version from the\n        config subdir.\n        * build-make (INSTALL_TARGET, ALL): Disable, no longer needed.\n        * configure.in: Substitute for objdir.\n\t* cp/Makefile.in (program_transform_name, objdir): Define.\n\nFrom-SVN: r19828", "tree": {"sha": "94ae2f48c3fa488c7e0354280cb8c1c3d77278e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94ae2f48c3fa488c7e0354280cb8c1c3d77278e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e717196997438ed21b6866df4d49cd2a4e98174", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e717196997438ed21b6866df4d49cd2a4e98174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e717196997438ed21b6866df4d49cd2a4e98174", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e717196997438ed21b6866df4d49cd2a4e98174/comments", "author": null, "committer": null, "parents": [{"sha": "88111b2691b56a8637ae053a4eeb7aec9597180c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88111b2691b56a8637ae053a4eeb7aec9597180c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88111b2691b56a8637ae053a4eeb7aec9597180c"}], "stats": {"total": 82, "additions": 75, "deletions": 7}, "files": [{"sha": "c4dca038bf713e38506be9c5066a1e2f44170587", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e717196997438ed21b6866df4d49cd2a4e98174/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e717196997438ed21b6866df4d49cd2a4e98174/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e717196997438ed21b6866df4d49cd2a4e98174", "patch": "@@ -1,5 +1,16 @@\n Mon May 18 01:23:33 1998  Jeffrey A Law  (law@cygnus.com)\n \n+\t* Makefile.in (TARGET_TOOLPREFIX): No longer define.\n+\t(AR_FOR_TARGET, RANLIB_FOR_TARGET): Define to use versions in\n+\tthe build tree if they exist.\n+\t(AR, AR_FLAGS, OLDAR, OLDAR_FLAGS, RANLIB, RANLIB_TEST): Update\n+\tappropriately.\n+\t(objdir): Let configure substitute value.\n+\t(FLOAT_H): Let configure select a pre-built version from the\n+\tconfig subdir.\n+\t* build-make (INSTALL_TARGET, ALL): Disable, no longer needed.\n+\t* configure.in: Substitute for objdir.\n+\n \t* Makefile.in (build_canonical, host_canonical): Let configure\n \tsubstitute values for these variables.\n \t* configure.in: Substitute for build_canonical, host_canonical"}, {"sha": "fc580666773803e6b18c24792310002ab4e2423d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 45, "deletions": 5, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e717196997438ed21b6866df4d49cd2a4e98174/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e717196997438ed21b6866df4d49cd2a4e98174/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7e717196997438ed21b6866df4d49cd2a4e98174", "patch": "@@ -177,12 +177,49 @@ host_canonical = @host_canonical@\n # These are used because `configure' appends `cross-make'\n # to the makefile when making a cross-compiler.\n \n-TARGET_TOOLPREFIX = $(tooldir)/bin/\n-AR_FOR_TARGET = $(TARGET_TOOLPREFIX)ar\n+# Use the tools from the build tree, if they are available.\n+\n+# objdir is set by configure.\n+objdir = @objdir@\n+\n+AR_FOR_TARGET = ` \\\n+  if [ -f $(objdir)/../binutils/ar ] ; then \\\n+    echo $(objdir)/../binutils/ar ; \\\n+  else \\\n+    if [ \"$(host_canonical)\" = \"$(target)\" ] ; then \\\n+      echo ar; \\\n+    else \\\n+       t='$(program_transform_name)'; echo ar | sed -e $$t ; \\\n+    fi; \\\n+  fi`\n AR_FOR_TARGET_FLAGS = rc\n-RANLIB_FOR_TARGET = $(TARGET_TOOLPREFIX)ranlib\n-RANLIB_TEST_FOR_TARGET = [ -f $(TARGET_TOOLPREFIX)ranlib ]\n-\n+RANLIB_FOR_TARGET = ` \\\n+  if [ -f $(objdir)/../binutils/ranlib ] ; then \\\n+    echo $(objdir)/../binutils/ranlib ; \\\n+  else \\\n+    if [ \"$(host_canonical)\" = \"$(target)\" ] ; then \\\n+      echo ranlib; \\\n+    else \\\n+       t='$(program_transform_name)'; echo ranlib | sed -e $$t ; \\\n+    fi; \\\n+  fi`\n+RANLIB_TEST_FOR_TARGET = \\\n+  [ -f $(RANLIB_FOR_TARGET) ] \\\n+  || ( [ \"$(host_canonical)\" = \"$(target)\" ] \\\n+       && [ -f /usr/bin/ranlib -o -f /bin/ranlib ] )\n+\n+# We always act like a cross-compiler, even when we're\n+# compiling native.  This is because we want to use our own tools if\n+# we can.  We don't just set RANLIB to a complicated expression,\n+# because the top level Makefile.in might override RANLIB_FOR_TARGET.\n+# These are from the FSF file \"cross-make\".\n+AR = $(AR_FOR_TARGET)\n+AR_FLAGS = $(AR_FOR_TARGET_FLAGS)\n+OLDAR = $(AR_FOR_TARGET)\n+OLDAR_FLAGS = $(AR_FOR_TARGET_FLAGS)\n+RANLIB = $(RANLIB_FOR_TARGET)\n+RANLIB_TEST = $(RANLIB_TEST_FOR_TARGET)\n+  \n # Dir to search for system headers.  Overridden by cross-make.\n SYSTEM_HEADER_DIR = /usr/include\n \n@@ -440,6 +477,9 @@ INSTALL_TARGET=install-normal\n \n # Source for float.h.  Overridden by cross-make.\n FLOAT_H=float.h-nat\n+# We do not try to build float.h anymore.  Let configure select the\n+# appropriate pre-built float.h file for the target.\n+FLOAT_H=$(srcdir)/config/float-@float_format@.h\n \n # Setup the testing framework, if you have one\n EXPECT = `if [ -f $${rootme}/../expect/expect ] ; then \\"}, {"sha": "f9049ae0db96142d04d8af64582585b9d5f4461b", "filename": "gcc/build-make", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e717196997438ed21b6866df4d49cd2a4e98174/gcc%2Fbuild-make", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e717196997438ed21b6866df4d49cd2a4e98174/gcc%2Fbuild-make", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuild-make?ref=7e717196997438ed21b6866df4d49cd2a4e98174", "patch": "@@ -28,8 +28,8 @@ FIXINCLUDES=Makefile.in\n STMP_FIXPROTO =\n \n # Cause installation using install-build. We do nothing here.\n-INSTALL_TARGET = install-build\n+#INSTALL_TARGET = install-build\n \n # Don't try to compile the things we can't compile or we have made\n # while making gcc with the cross-compiler.\n-ALL = all.build\n+#ALL = all.build"}, {"sha": "0fad95147ef99f123d6630b45febc43406ce43ff", "filename": "gcc/configure", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e717196997438ed21b6866df4d49cd2a4e98174/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e717196997438ed21b6866df4d49cd2a4e98174/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=7e717196997438ed21b6866df4d49cd2a4e98174", "patch": "@@ -5254,6 +5254,10 @@ if [ x$enable_haifa != x ]; then\n     done\n fi\n \n+# Nothing to do for FLOAT_H, float_format already handled.\n+objdir=`pwd`\n+\n+\n # Process the language and host/target makefile fragments.\n ${CONFIG_SHELL-/bin/sh} $srcdir/configure.frag $srcdir \"$subdirs\" \"$dep_host_xmake_file\" \"$dep_tmake_file\"\n \n@@ -5515,6 +5519,7 @@ s%@target_subdir@%$target_subdir%g\n s%@inhibit_libc@%$inhibit_libc%g\n s%@sched_prefix@%$sched_prefix%g\n s%@sched_cflags@%$sched_cflags%g\n+s%@objdir@%$objdir%g\n s%@subdirs@%$subdirs%g\n s%@all_languages@%$all_languages%g\n s%@all_boot_languages@%$all_boot_languages%g"}, {"sha": "41917f4472c34bf3391985f72939bafe6417cda3", "filename": "gcc/configure.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e717196997438ed21b6866df4d49cd2a4e98174/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e717196997438ed21b6866df4d49cd2a4e98174/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=7e717196997438ed21b6866df4d49cd2a4e98174", "patch": "@@ -3410,6 +3410,10 @@ if [[ x$enable_haifa != x ]]; then\n     done\n fi\n \n+# Nothing to do for FLOAT_H, float_format already handled.\n+objdir=`pwd`\n+AC_SUBST(objdir)\n+\n # Process the language and host/target makefile fragments.\n ${CONFIG_SHELL-/bin/sh} $srcdir/configure.frag $srcdir \"$subdirs\" \"$dep_host_xmake_file\" \"$dep_tmake_file\"\n "}, {"sha": "17701ecf1ac6bc76ae83ff98ddc6d2916505aa01", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e717196997438ed21b6866df4d49cd2a4e98174/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e717196997438ed21b6866df4d49cd2a4e98174/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7e717196997438ed21b6866df4d49cd2a4e98174", "patch": "@@ -1,5 +1,7 @@\n Mon May 18 01:24:08 1998  Jeffrey A Law  (law@cygnus.com)\n \n+\t* Makefile.in (program_transform_name, objdir): Define.\n+\n \t* Makefile.in (BISON): Use bison from the build tree if it exists.\n \t(FLEX): Similarly.\n "}, {"sha": "0a53c69e3d95e806a555bae893a220b469f31970", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e717196997438ed21b6866df4d49cd2a4e98174/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e717196997438ed21b6866df4d49cd2a4e98174/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=7e717196997438ed21b6866df4d49cd2a4e98174", "patch": "@@ -83,6 +83,12 @@ GCC_CFLAGS=$(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS)\n # These are used because `configure' appends `cross-make'\n # to the makefile when making a cross-compiler.\n \n+# We don't use cross-make.  Instead we use the tools\n+# from the build tree, if they are available.\n+# program_transform_name and objdir are set by configure.in.\n+program_transform_name =\n+objdir = .\n+\n target=@target@\n xmake_file=@dep_host_xmake_file@\n tmake_file=@dep_tmake_file@"}]}