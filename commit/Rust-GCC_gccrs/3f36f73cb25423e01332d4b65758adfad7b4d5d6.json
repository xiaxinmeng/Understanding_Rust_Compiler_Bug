{"sha": "3f36f73cb25423e01332d4b65758adfad7b4d5d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YzNmY3M2NiMjU0MjNlMDEzMzJkNGI2NTc1OGFkZmFkN2I0ZDVkNg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2008-05-26T09:40:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-26T09:40:47Z"}, "message": "s-carun8.ads: Minor reformatting\n\n2008-05-26  Robert Dewar  <dewar@adacore.com>\n\n\t* s-carun8.ads: Minor reformatting\n\nFrom-SVN: r135902", "tree": {"sha": "8982f335f5f1a2fda3dc8e2036ea792091859bba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8982f335f5f1a2fda3dc8e2036ea792091859bba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f36f73cb25423e01332d4b65758adfad7b4d5d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f36f73cb25423e01332d4b65758adfad7b4d5d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f36f73cb25423e01332d4b65758adfad7b4d5d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f36f73cb25423e01332d4b65758adfad7b4d5d6/comments", "author": null, "committer": null, "parents": [{"sha": "e23fbee49be46ac7f2627a99f8f06ca9d204b1ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23fbee49be46ac7f2627a99f8f06ca9d204b1ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e23fbee49be46ac7f2627a99f8f06ca9d204b1ef"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "fde805b45d31a762be68e082a39b7c0d90d6396e", "filename": "gcc/ada/s-carun8.ads", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f36f73cb25423e01332d4b65758adfad7b4d5d6/gcc%2Fada%2Fs-carun8.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f36f73cb25423e01332d4b65758adfad7b4d5d6/gcc%2Fada%2Fs-carun8.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-carun8.ads?ref=3f36f73cb25423e01332d4b65758adfad7b4d5d6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2002-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2002-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -49,20 +49,20 @@ package System.Compare_Array_Unsigned_8 is\n       Right     : System.Address;\n       Left_Len  : Natural;\n       Right_Len : Natural) return Integer;\n-   --  Compare the array starting at address Left of length Left_Len\n-   --  with the array starting at address Right of length Right_Len.\n-   --  The comparison is in the normal Ada semantic sense of array\n-   --  comparison. The result is -1,0,+1 for Left<Right, Left=Right,\n-   --  Left>Right respectively. This function works with 4 byte words\n-   --  if the operands are aligned on 4-byte boundaries and long enough.\n+   --  Compare the array starting at address Left of length Left_Len with the\n+   --  array starting at address Right of length Right_Len. The comparison is\n+   --  in the normal Ada semantic sense of array comparison. The result is -1,\n+   --  0, +1 for Left < Right, Left = Right, Left > Right respectively. This\n+   --  function works with 4 byte words if the operands are aligned on 4-byte\n+   --  boundaries and long enough.\n \n    function Compare_Array_U8_Unaligned\n      (Left      : System.Address;\n       Right     : System.Address;\n       Left_Len  : Natural;\n       Right_Len : Natural) return Integer;\n-   --  Same functionality as Compare_Array_U8 but always proceeds by\n-   --  bytes. Used when the caller knows that the operands are unaligned,\n-   --  or short enough that it makes no sense to go by words.\n+   --  Same functionality as Compare_Array_U8 but always proceeds by bytes.\n+   --  Used when the caller knows that the operands are unaligned, or short\n+   --  enough that it makes no sense to go by words.\n \n end System.Compare_Array_Unsigned_8;"}]}