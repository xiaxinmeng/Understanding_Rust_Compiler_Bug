{"sha": "52a64bd38e2af65bef3c1c4f4d93e0477c56ec15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJhNjRiZDM4ZTJhZjY1YmVmM2MxYzRmNGQ5M2UwNDc3YzU2ZWMxNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-01-30T14:17:49Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-01-30T14:17:49Z"}, "message": "cinttypes: New.\n\n2006-01-30  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/cinttypes: New.\n\t* include/Makefile.am: Add.\n\t* testsuite/tr1/8_c_compatibility/cinttypes/functions: New.\t\n\t* testsuite/tr1/8_c_compatibility/cinttypes/types: Likewise.\n\t* acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): Add <inttypes.h> checks.\n\t* docs/html/ext/tr1.html: Update.\n\t* include/Makefile.in: Regenerate.\n\t* config.h.in: Likewise.\n\t* configure: Likewise.\n\n\t* testsuite/tr1/8_c_compatibility/cfenv/functions.cc: Cosmetic tweak.\n\t* testsuite/tr1/8_c_compatibility/cfenv/types.cc: Likewise.\n\n\t* testsuite/tr1/8_c_compatibility/cstdint/types.cc: Fix, check in\n\tstd::tr1.\n\nFrom-SVN: r110397", "tree": {"sha": "8d7707f10409beae3b55bc76f1fd23c16f043bc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d7707f10409beae3b55bc76f1fd23c16f043bc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/comments", "author": null, "committer": null, "parents": [{"sha": "eb73a69a1538e24fcf39f108d22d324ae8cd1d90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb73a69a1538e24fcf39f108d22d324ae8cd1d90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb73a69a1538e24fcf39f108d22d324ae8cd1d90"}], "stats": {"total": 388, "additions": 342, "deletions": 46}, "files": [{"sha": "07b96bcb3185f97865d83dd42626bd56cbd36ba0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=52a64bd38e2af65bef3c1c4f4d93e0477c56ec15", "patch": "@@ -1,3 +1,21 @@\n+2006-01-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/cinttypes: New.\n+\t* include/Makefile.am: Add.\n+\t* testsuite/tr1/8_c_compatibility/cinttypes/functions: New.\t\n+\t* testsuite/tr1/8_c_compatibility/cinttypes/types: Likewise.\n+\t* acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): Add <inttypes.h> checks.\n+\t* docs/html/ext/tr1.html: Update.\n+\t* include/Makefile.in: Regenerate.\n+\t* config.h.in: Likewise.\n+\t* configure: Likewise.\n+\n+\t* testsuite/tr1/8_c_compatibility/cfenv/functions.cc: Cosmetic tweak.\n+\t* testsuite/tr1/8_c_compatibility/cfenv/types.cc: Likewise.\n+\n+\t* testsuite/tr1/8_c_compatibility/cstdint/types.cc: Fix, check in\n+\tstd::tr1.\n+\n 2006-01-29  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/cstdint: New."}, {"sha": "22b94d1273d7b279576e9a9578992a13b2a7e2cd", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=52a64bd38e2af65bef3c1c4f4d93e0477c56ec15", "patch": "@@ -1181,6 +1181,29 @@ AC_DEFUN([GLIBCXX_CHECK_C99_TR1], [\n \t      <tr1/cstdint> in namespace std::tr1.])\n   fi\n \n+  # Check for the existence of <inttypes.h> functions.\n+  AC_MSG_CHECKING([for ISO C99 support to TR1 in <inttypes.h>])\n+  AC_CACHE_VAL(ac_c99_inttypes_tr1, [\n+  AC_TRY_COMPILE([#include <inttypes.h>],\n+\t         [intmax_t i, numer, denom, base;\n+\t          const char* s;\n+\t          char** endptr;\n+\t          intmax_t ret;\n+\t          uintmax_t uret;\n+\t          imaxdiv_t dret;\n+\t          ret = imaxabs(i);\n+\t          dret = imaxdiv(numer, denom);\n+\t          ret = strtoimax(s, endptr, base);\n+\t          uret = strtoumax(s, endptr, base);\n+\t\t ],[ac_c99_inttypes_tr1=yes], [ac_c99_inttypes_tr1=no])\n+  ])\n+  AC_MSG_RESULT($ac_c99_inttypes_tr1)\n+  if test x\"$ac_c99_inttypes_tr1\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCXX_USE_C99_INTTYPES_TR1, 1,\n+              [Define if C99 functions in <inttypes.h> should be imported in\n+\t      <tr1/cinttypes> in namespace std::tr1.])\n+  fi\n+\n   AC_LANG_RESTORE\n ])\n "}, {"sha": "d940e6189c753848c441ca906623e7c64a6c3ec8", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=52a64bd38e2af65bef3c1c4f4d93e0477c56ec15", "patch": "@@ -707,6 +707,10 @@\n    namespace std::tr1. */\n #undef _GLIBCXX_USE_C99_FENV_TR1\n \n+/* Define if C99 functions in <inttypes.h> should be imported in\n+   <tr1/cinttypes> in namespace std::tr1. */\n+#undef _GLIBCXX_USE_C99_INTTYPES_TR1\n+\n /* Define if C99 functions or macros in <math.h> should be imported in <cmath>\n    in namespace std. */\n #undef _GLIBCXX_USE_C99_MATH"}, {"sha": "2b8a85c8637eda4de573acd2badd3df5af73cd8a", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=52a64bd38e2af65bef3c1c4f4d93e0477c56ec15", "patch": "@@ -30610,6 +30610,81 @@ _ACEOF\n \n   fi\n \n+  # Check for the existence of <inttypes.h> functions.\n+  echo \"$as_me:$LINENO: checking for ISO C99 support to TR1 in <inttypes.h>\" >&5\n+echo $ECHO_N \"checking for ISO C99 support to TR1 in <inttypes.h>... $ECHO_C\" >&6\n+  if test \"${ac_c99_inttypes_tr1+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <inttypes.h>\n+int\n+main ()\n+{\n+intmax_t i, numer, denom, base;\n+\t          const char* s;\n+\t          char** endptr;\n+\t          intmax_t ret;\n+\t          uintmax_t uret;\n+\t          imaxdiv_t dret;\n+\t          ret = imaxabs(i);\n+\t          dret = imaxdiv(numer, denom);\n+\t          ret = strtoimax(s, endptr, base);\n+\t          uret = strtoumax(s, endptr, base);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_c99_inttypes_tr1=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_c99_inttypes_tr1=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+\n+  echo \"$as_me:$LINENO: result: $ac_c99_inttypes_tr1\" >&5\n+echo \"${ECHO_T}$ac_c99_inttypes_tr1\" >&6\n+  if test x\"$ac_c99_inttypes_tr1\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_USE_C99_INTTYPES_TR1 1\n+_ACEOF\n+\n+  fi\n+\n   ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'\n ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'"}, {"sha": "88055a1baf49d731cfd15eb9fb2617e757877fd6", "filename": "libstdc++-v3/docs/html/ext/tr1.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html?ref=52a64bd38e2af65bef3c1c4f4d93e0477c56ec15", "patch": "@@ -1907,25 +1907,25 @@ <h1 align=\"center\">\n     <tr>\n       <td>8.11</td>\n       <td>Header <code>&lt;cinttypes&gt;</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.11.1</td>\n       <td>Synopsis</td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.11.2</td>\n       <td>Definitions</td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>"}, {"sha": "8014124ddcc57941065ed35845cffdaf304a34ba", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=52a64bd38e2af65bef3c1c4f4d93e0477c56ec15", "patch": "@@ -486,6 +486,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/boost_shared_ptr.h \\\n \t${tr1_srcdir}/cctype \\\n \t${tr1_srcdir}/cfenv \\\n+\t${tr1_srcdir}/cinttypes \\\n \t${tr1_srcdir}/common.h \\\n \t${tr1_srcdir}/complex \\\n \t${tr1_srcdir}/cstdint \\"}, {"sha": "08f2dce33fb21436764ddbb31331464d36f4c793", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=52a64bd38e2af65bef3c1c4f4d93e0477c56ec15", "patch": "@@ -703,6 +703,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/boost_shared_ptr.h \\\n \t${tr1_srcdir}/cctype \\\n \t${tr1_srcdir}/cfenv \\\n+\t${tr1_srcdir}/cinttypes \\\n \t${tr1_srcdir}/common.h \\\n \t${tr1_srcdir}/complex \\\n \t${tr1_srcdir}/cstdint \\"}, {"sha": "2e0e9d83a4bf4021a08706c4ed11b67f1b18769e", "filename": "libstdc++-v3/include/tr1/cinttypes", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcinttypes", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcinttypes", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcinttypes?ref=52a64bd38e2af65bef3c1c4f4d93e0477c56ec15", "patch": "@@ -0,0 +1,83 @@\n+// TR1 cinttypes -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file \n+ *  This is a TR1 C++ Library header. \n+ */\n+\n+#ifndef _TR1_CINTTYPES\n+#define _TR1_CINTTYPES 1\n+\n+#include <bits/c++config.h>\n+\n+#include <tr1/cstdint>\n+\n+#if _GLIBCXX_HAVE_INTTYPES_H\n+// For 8.11.1/1 (see C99, Note 184) \n+#define __STDC_FORMAT_MACROS\n+#include <inttypes.h>\n+#endif\n+\n+#if _GLIBCXX_USE_C99_INTTYPES_TR1\n+\n+// namespace std::tr1\n+namespace std\n+{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n+  // types\n+  using ::imaxdiv_t;\n+\n+  // functions\n+  using ::imaxabs;\n+  \n+  inline intmax_t\n+  abs(intmax_t __i)\n+  { return imaxabs(__i); }\n+\n+  using ::imaxdiv;\n+  \n+  inline imaxdiv_t\n+  div(intmax_t __numer, intmax_t __denom)\n+  { return imaxdiv(__numer, __denom); }\n+\n+  using ::strtoimax;\n+  using ::strtoumax;\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  using ::wcstoimax;\n+  using ::wcstoumax;\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE\n+}\n+\n+#endif\n+\n+#endif"}, {"sha": "abe56c5072db9628d09ca975607bb6099afeba2c", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cfenv/functions.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcfenv%2Ffunctions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcfenv%2Ffunctions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcfenv%2Ffunctions.cc?ref=52a64bd38e2af65bef3c1c4f4d93e0477c56ec15", "patch": "@@ -32,21 +32,21 @@ void test01()\n   std::tr1::fexcept_t* pflag = 0;\n   std::tr1::fenv_t* penv = 0;\n \n-  int r;\n+  int ret;\n \n-  r = std::tr1::feclearexcept(except);\n-  r = std::tr1::fegetexceptflag(pflag, except);\n-  r = std::tr1::feraiseexcept(except);\n-  r = std::tr1::fesetexceptflag(pflag, except);\n-  r = std::tr1::fetestexcept(except);\n+  ret = std::tr1::feclearexcept(except);\n+  ret = std::tr1::fegetexceptflag(pflag, except);\n+  ret = std::tr1::feraiseexcept(except);\n+  ret = std::tr1::fesetexceptflag(pflag, except);\n+  ret = std::tr1::fetestexcept(except);\n \n-  r = std::tr1::fegetround();\n-  r = std::tr1::fesetround(mode);\n+  ret = std::tr1::fegetround();\n+  ret = std::tr1::fesetround(mode);\n \n-  r = std::tr1::fegetenv(penv);\n-  r = std::tr1::feholdexcept(penv);\n-  r = std::tr1::fesetenv(penv);\n-  r = std::tr1::feupdateenv(penv);\n+  ret = std::tr1::fegetenv(penv);\n+  ret = std::tr1::feholdexcept(penv);\n+  ret = std::tr1::fesetenv(penv);\n+  ret = std::tr1::feupdateenv(penv);\n \n #endif\n }"}, {"sha": "24fcfa4f633e0247b2127ac1b48efa38df0f988a", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cfenv/types.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcfenv%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcfenv%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcfenv%2Ftypes.cc?ref=52a64bd38e2af65bef3c1c4f4d93e0477c56ec15", "patch": "@@ -28,9 +28,8 @@ void test01()\n {\n #if _GLIBCXX_USE_C99_FENV_TR1\n \n-  // Check for required typedefs\n-  typedef std::tr1::fenv_t    my_fenv_t;\n-  typedef std::tr1::fexcept_t my_fexcept_t;\n+  typedef std::tr1::fenv_t     my_fenv_t;\n+  typedef std::tr1::fexcept_t  my_fexcept_t;\n   \n #endif\n }"}, {"sha": "353bf628c66864a9276947e0d3f69ccb28458f50", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cinttypes/functions.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcinttypes%2Ffunctions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcinttypes%2Ffunctions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcinttypes%2Ffunctions.cc?ref=52a64bd38e2af65bef3c1c4f4d93e0477c56ec15", "patch": "@@ -0,0 +1,58 @@\n+// { dg-do compile }\n+\n+// 2006-01-30  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 8.11 Header <cinttypes>\n+\n+#include <tr1/cinttypes>\n+\n+void test01()\n+{\n+#if _GLIBCXX_USE_C99_INTTYPES_TR1\n+\n+  std::tr1::intmax_t i = 0, numer = 0, denom = 0, base = 0;\n+  const char* s = 0;\n+  char** endptr = 0;\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  const wchar_t* ws = 0;\n+  wchar_t** wendptr = 0;\n+#endif  \n+\n+  std::tr1::intmax_t  ret;\n+  std::tr1::uintmax_t uret;\n+  std::tr1::imaxdiv_t dret;\n+\n+  ret = std::tr1::imaxabs(i);\n+  ret = std::tr1::abs(i);\n+\n+  dret = std::tr1::imaxdiv(numer, denom);\n+  dret = std::tr1::div(numer, denom);\n+\n+  ret = std::tr1::strtoimax(s, endptr, base);\n+  uret = std::tr1::strtoumax(s, endptr, base);\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  ret = std::tr1::wcstoimax(ws, wendptr, base);\n+  uret = std::tr1::wcstoumax(ws, wendptr, base);\n+#endif\n+\n+#endif\n+}"}, {"sha": "2d557c9212f7dca80a5e144763793f890dd0527a", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cinttypes/types.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcinttypes%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcinttypes%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcinttypes%2Ftypes.cc?ref=52a64bd38e2af65bef3c1c4f4d93e0477c56ec15", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+\n+// 2006-01-30  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 8.11 Header <cinttypes>\n+\n+#include <tr1/cinttypes>\n+\n+void test01()\n+{\n+#if _GLIBCXX_USE_C99_INTTYPES_TR1\n+\n+  typedef std::tr1::imaxdiv_t  my_imaxdiv_t;\n+  \n+#endif\n+}"}, {"sha": "d715973980339230de8bf2ccfc7c3c0d83a54337", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cstdint/types.cc", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdint%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a64bd38e2af65bef3c1c4f4d93e0477c56ec15/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdint%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdint%2Ftypes.cc?ref=52a64bd38e2af65bef3c1c4f4d93e0477c56ec15", "patch": "@@ -28,34 +28,34 @@ void test01()\n {\n #if _GLIBCXX_USE_C99_STDINT_TR1\n \n-  typedef int8_t          my_int8_t;\n-  typedef int16_t         my_int16_t;\n-  typedef int32_t         my_int32_t;\n-  typedef int64_t         my_int64_t;\n-  typedef int_fast8_t     my_int_fast8_t;\n-  typedef int_fast16_t    my_int_fast16_t;\n-  typedef int_fast32_t    my_int_fast32_t;\n-  typedef int_fast64_t    my_int_fast64_t;\t\n-  typedef int_least8_t    my_int_least8_t;\n-  typedef int_least16_t   my_int_least16_t;\n-  typedef int_least32_t   my_int_least32_t;\n-  typedef int_least64_t   my_int_least64_t;\n-  typedef intmax_t        my_intmax_t;\n-  typedef intptr_t        my_intptr_t;\n-  typedef uint8_t         my_uint8_t;\n-  typedef uint16_t        my_uint16_t;\n-  typedef uint32_t        my_uint32_t;\n-  typedef uint64_t        my_uint64_t;\n-  typedef uint_fast8_t    my_uint_fast8_t;\n-  typedef uint_fast16_t   my_uint_fast16_t;\n-  typedef uint_fast32_t   my_uint_fast32_t;\n-  typedef uint_fast64_t   my_uint_fast64_t;\t\n-  typedef uint_least8_t   my_uint_least8_t;\n-  typedef uint_least16_t  my_uint_least16_t;\n-  typedef uint_least32_t  my_uint_least32_t;\n-  typedef uint_least64_t  my_uint_least64_t;\n-  typedef uintmax_t       my_uintmax_t;\n-  typedef uintptr_t       my_uintptr_t;\n+  typedef std::tr1::int8_t          my_int8_t;\n+  typedef std::tr1::int16_t         my_int16_t;\n+  typedef std::tr1::int32_t         my_int32_t;\n+  typedef std::tr1::int64_t         my_int64_t;\n+  typedef std::tr1::int_fast8_t     my_int_fast8_t;\n+  typedef std::tr1::int_fast16_t    my_int_fast16_t;\n+  typedef std::tr1::int_fast32_t    my_int_fast32_t;\n+  typedef std::tr1::int_fast64_t    my_int_fast64_t;\t\n+  typedef std::tr1::int_least8_t    my_int_least8_t;\n+  typedef std::tr1::int_least16_t   my_int_least16_t;\n+  typedef std::tr1::int_least32_t   my_int_least32_t;\n+  typedef std::tr1::int_least64_t   my_int_least64_t;\n+  typedef std::tr1::intmax_t        my_intmax_t;\n+  typedef std::tr1::intptr_t        my_intptr_t;\n+  typedef std::tr1::uint8_t         my_uint8_t;\n+  typedef std::tr1::uint16_t        my_uint16_t;\n+  typedef std::tr1::uint32_t        my_uint32_t;\n+  typedef std::tr1::uint64_t        my_uint64_t;\n+  typedef std::tr1::uint_fast8_t    my_uint_fast8_t;\n+  typedef std::tr1::uint_fast16_t   my_uint_fast16_t;\n+  typedef std::tr1::uint_fast32_t   my_uint_fast32_t;\n+  typedef std::tr1::uint_fast64_t   my_uint_fast64_t;\t\n+  typedef std::tr1::uint_least8_t   my_uint_least8_t;\n+  typedef std::tr1::uint_least16_t  my_uint_least16_t;\n+  typedef std::tr1::uint_least32_t  my_uint_least32_t;\n+  typedef std::tr1::uint_least64_t  my_uint_least64_t;\n+  typedef std::tr1::uintmax_t       my_uintmax_t;\n+  typedef std::tr1::uintptr_t       my_uintptr_t;\n   \n #endif\n }"}]}