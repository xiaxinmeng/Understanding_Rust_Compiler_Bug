{"sha": "91e50b2d845b94111154551527ffec34d5a883ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFlNTBiMmQ4NDViOTQxMTExNTQ1NTE1MjdmZmVjMzRkNWE4ODNjZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-10-03T20:18:52Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-10-03T20:18:52Z"}, "message": "ipa-polymorphic-call.c (decl_maybe_in_construction_p): Be ready for BASE and OUTER_TYPE being NULL.\n\n\n\t* ipa-polymorphic-call.c (decl_maybe_in_construction_p): Be ready\n\tfor BASE and OUTER_TYPE being NULL.\n\t(ipa_polymorphic_call_context::possible_dynamic_type_change): Add\n\tin_poly_cdtor parameter.\n\nFrom-SVN: r215876", "tree": {"sha": "506f070d7f1610320b2329034e10834cbb211133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/506f070d7f1610320b2329034e10834cbb211133"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91e50b2d845b94111154551527ffec34d5a883ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91e50b2d845b94111154551527ffec34d5a883ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91e50b2d845b94111154551527ffec34d5a883ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91e50b2d845b94111154551527ffec34d5a883ce/comments", "author": null, "committer": null, "parents": [{"sha": "bbdb509856d39eedf5bfff25f845060a965d592a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbdb509856d39eedf5bfff25f845060a965d592a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbdb509856d39eedf5bfff25f845060a965d592a"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "f352625fc78e1f754873b560fe6ca7c3061fcfff", "filename": "gcc/ipa-polymorphic-call.c", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e50b2d845b94111154551527ffec34d5a883ce/gcc%2Fipa-polymorphic-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e50b2d845b94111154551527ffec34d5a883ce/gcc%2Fipa-polymorphic-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-polymorphic-call.c?ref=91e50b2d845b94111154551527ffec34d5a883ce", "patch": "@@ -475,6 +475,11 @@ contains_type_p (tree outer_type, HOST_WIDE_INT offset,\n    (not dynamically allocated) and we want to disprove the fact\n    that it may be in construction at invocation of CALL.\n \n+   BASE represents memory location where instance is stored.\n+   If BASE is NULL, it is assumed to be global memory.\n+   OUTER_TYPE is known type of the instance or NULL if not\n+   known.\n+\n    For the variable to be in construction we actually need to\n    be in constructor of corresponding global variable or\n    the inline stack of CALL must contain the constructor.\n@@ -486,8 +491,9 @@ bool\n decl_maybe_in_construction_p (tree base, tree outer_type,\n \t\t\t      gimple call, tree function)\n {\n-  outer_type = TYPE_MAIN_VARIANT (outer_type);\n-  gcc_assert (DECL_P (base));\n+  if (outer_type)\n+    outer_type = TYPE_MAIN_VARIANT (outer_type);\n+  gcc_assert (!base || DECL_P (base));\n \n   /* After inlining the code unification optimizations may invalidate\n      inline stacks.  Also we need to give up on global variables after\n@@ -498,7 +504,7 @@ decl_maybe_in_construction_p (tree base, tree outer_type,\n \n   /* Pure functions can not do any changes on the dynamic type;\n      that require writting to memory.  */\n-  if (!auto_var_in_fn_p (base, function)\n+  if ((!base || !auto_var_in_fn_p (base, function))\n       && flags_from_decl_or_type (function) & (ECF_PURE | ECF_CONST))\n     return false;\n \n@@ -517,7 +523,7 @@ decl_maybe_in_construction_p (tree base, tree outer_type,\n \t       argument (pointer to the instance).  */\n \t    fn = DECL_ABSTRACT_ORIGIN (fn);\n \t    if (!fn\n-\t\t|| !is_global_var (base)\n+\t\t|| (base && !is_global_var (base))\n \t        || TREE_CODE (TREE_TYPE (fn)) != METHOD_TYPE\n \t\t|| (!DECL_CXX_CONSTRUCTOR_P (fn)\n \t\t    && !DECL_CXX_DESTRUCTOR_P (fn)))\n@@ -526,17 +532,20 @@ decl_maybe_in_construction_p (tree base, tree outer_type,\n \tif (flags_from_decl_or_type (fn) & (ECF_PURE | ECF_CONST))\n \t  continue;\n \n-\t/* FIXME: this can go away once we have ODR types equivalency on\n-\t   LTO level.  */\n-\tif (in_lto_p && !polymorphic_type_binfo_p (TYPE_BINFO (outer_type)))\n-\t  return true;\n \ttree type = TYPE_MAIN_VARIANT (method_class_type (TREE_TYPE (fn)));\n-\tif (types_same_for_odr (type, outer_type))\n+\n+\tif (!outer_type || !types_odr_comparable (type, outer_type))\n+\t  {\n+\t    if (TREE_CODE (type) == RECORD_TYPE\n+\t\t&& TYPE_BINFO (type)\n+\t\t&& polymorphic_type_binfo_p (TYPE_BINFO (type)))\n+\t      return true;\n+\t  }\n+ \telse if (types_same_for_odr (type, outer_type))\n \t  return true;\n       }\n \n-  if (TREE_CODE (base) == VAR_DECL\n-      && is_global_var (base))\n+  if (!base || (TREE_CODE (base) == VAR_DECL && is_global_var (base)))\n     {\n       if (TREE_CODE (TREE_TYPE (function)) != METHOD_TYPE\n \t  || (!DECL_CXX_CONSTRUCTOR_P (function)\n@@ -553,12 +562,15 @@ decl_maybe_in_construction_p (tree base, tree outer_type,\n \t\t  && !DECL_CXX_DESTRUCTOR_P (function)))\n \t    return false;\n \t}\n-      /* FIXME: this can go away once we have ODR types equivalency on\n-\t LTO level.  */\n-      if (in_lto_p && !polymorphic_type_binfo_p (TYPE_BINFO (outer_type)))\n-\treturn true;\n       tree type = TYPE_MAIN_VARIANT (method_class_type (TREE_TYPE (function)));\n-      if (types_same_for_odr (type, outer_type))\n+      if (!outer_type || !types_odr_comparable (type, outer_type))\n+\t{\n+\t  if (TREE_CODE (type) == RECORD_TYPE\n+\t      && TYPE_BINFO (type)\n+\t      && polymorphic_type_binfo_p (TYPE_BINFO (type)))\n+\t    return true;\n+\t}\n+      else if (types_same_for_odr (type, outer_type))\n \treturn true;\n     }\n   return false;\n@@ -2009,10 +2021,11 @@ ipa_polymorphic_call_context::make_speculative (tree otr_type)\n    type change is not happening.  */\n \n void\n-ipa_polymorphic_call_context::possible_dynamic_type_change (tree otr_type)\n+ipa_polymorphic_call_context::possible_dynamic_type_change (bool in_poly_cdtor,\n+\t\t\t\t\t\t\t    tree otr_type)\n {\n   if (dynamic)\n     make_speculative (otr_type);\n-  else\n+  else if (in_poly_cdtor)\n     maybe_in_construction = true;\n }"}]}