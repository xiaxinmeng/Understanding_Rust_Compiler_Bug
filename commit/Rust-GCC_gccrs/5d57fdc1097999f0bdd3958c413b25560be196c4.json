{"sha": "5d57fdc1097999f0bdd3958c413b25560be196c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ1N2ZkYzEwOTc5OTlmMGJkZDM5NThjNDEzYjI1NTYwYmUxOTZjNA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2015-12-28T16:37:03Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2015-12-28T16:37:03Z"}, "message": "rs6000.c (rs6000_emit_le_vsx_move): Verify that this is never called when lxvx/stxvx are available.\n\n[gcc]\n\n2015-12-28  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (rs6000_emit_le_vsx_move): Verify that\n\tthis is never called when lxvx/stxvx are available.\n\t(pass_analyze_swaps::gate): Don't perform swap optimization when\n\tlxvx/stxvx are available.\n\t* config/rs6000/vector.md (mov<mode>): Don't call\n\trs6000_emit_le_vsx_move when lxvx/stxvx are available.\n\t* config/rs6000/vsx.md (*p9_vecload_<mode>): New define_insn.\n\t(*p9_vecstore_<mode>): Likewise.\n\t(*vsx_le_perm_load_<mode>:VSX_LE): Disable when lxvx/stxvx are\n\tavailable.\n\t(*vsx_le_perm_load_<mode>:VSX_W): Likewise.\n\t(*vsx_le_perm_load_v8hi): Likewise.\n\t(*vsx_le_perm_load_v16qi): Likewise.\n\t(*vsx_le_perm_store_<mode>:VSX_LE): Likewise.\n\t([related define_splits]): Likewise.\n\t(*vsx_le_perm_store_<mode>:VSX_W): Likewise.\n\t([related define_splits]): Likewise.\n\t(*vsx_le_perm_store_v8hi): Likewise.\n\t([related define_splits]): Likewise.\n\t(*vsx_le_perm_store_v16qi): Likewise.\n\t([related define_splits]): Likewise.\n\t(*vsx_lxvd2x2_le_<mode>): Likewise.\n\t(*vsx_lxvd2x4_le_<mode>): Likewise.\n\t(*vsx_lxvd2x8_le_V8HI): Likewise.\n\t(*vsx_lvxd2x16_le_V16QI): Likewise.\n\t(*vsx_stxvd2x2_le_<mode>): Likewise.\n\t(*vsx_stxvd2x4_le_<mode>): Likewise.\n\t(*vsx_stxvd2x8_le_V8HI): Likewise.\n\t(*vsx_stxvdx16_le_V16QI): Likewise.\n\t([define_peepholes for vector load fusion]): Likewise.\n\n[gcc/testsuite]\n\n2015-12-28  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/p9-lxvx-stxvx-1.c: New.\n\t* gcc.target/powerpc/p9-lxvx-stxvx-2.c: New.\n\nFrom-SVN: r231974", "tree": {"sha": "7da6c3837fe4e7c831f895223b0ac2295ff1b741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7da6c3837fe4e7c831f895223b0ac2295ff1b741"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d57fdc1097999f0bdd3958c413b25560be196c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d57fdc1097999f0bdd3958c413b25560be196c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d57fdc1097999f0bdd3958c413b25560be196c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d57fdc1097999f0bdd3958c413b25560be196c4/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a02d84b6f82e3be7241fb0643ca5f46476af2506", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a02d84b6f82e3be7241fb0643ca5f46476af2506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a02d84b6f82e3be7241fb0643ca5f46476af2506"}], "stats": {"total": 161, "additions": 130, "deletions": 31}, "files": [{"sha": "5f7e0009d84c58ca8126e9d99176a107c2bcad93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d57fdc1097999f0bdd3958c413b25560be196c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d57fdc1097999f0bdd3958c413b25560be196c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d57fdc1097999f0bdd3958c413b25560be196c4", "patch": "@@ -1,3 +1,36 @@\n+2015-12-28  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_emit_le_vsx_move): Verify that\n+\tthis is never called when lxvx/stxvx are available.\n+\t(pass_analyze_swaps::gate): Don't perform swap optimization when\n+\tlxvx/stxvx are available.\n+\t* config/rs6000/vector.md (mov<mode>): Don't call\n+\trs6000_emit_le_vsx_move when lxvx/stxvx are available.\n+\t* config/rs6000/vsx.md (*p9_vecload_<mode>): New define_insn.\n+\t(*p9_vecstore_<mode>): Likewise.\n+\t(*vsx_le_perm_load_<mode>:VSX_LE): Disable when lxvx/stxvx are\n+\tavailable.\n+\t(*vsx_le_perm_load_<mode>:VSX_W): Likewise.\n+\t(*vsx_le_perm_load_v8hi): Likewise.\n+\t(*vsx_le_perm_load_v16qi): Likewise.\n+\t(*vsx_le_perm_store_<mode>:VSX_LE): Likewise.\n+\t([related define_splits]): Likewise.\n+\t(*vsx_le_perm_store_<mode>:VSX_W): Likewise.\n+\t([related define_splits]): Likewise.\n+\t(*vsx_le_perm_store_v8hi): Likewise.\n+\t([related define_splits]): Likewise.\n+\t(*vsx_le_perm_store_v16qi): Likewise.\n+\t([related define_splits]): Likewise.\n+\t(*vsx_lxvd2x2_le_<mode>): Likewise.\n+\t(*vsx_lxvd2x4_le_<mode>): Likewise.\n+\t(*vsx_lxvd2x8_le_V8HI): Likewise.\n+\t(*vsx_lvxd2x16_le_V16QI): Likewise.\n+\t(*vsx_stxvd2x2_le_<mode>): Likewise.\n+\t(*vsx_stxvd2x4_le_<mode>): Likewise.\n+\t(*vsx_stxvd2x8_le_V8HI): Likewise.\n+\t(*vsx_stxvdx16_le_V16QI): Likewise.\n+\t([define_peepholes for vector load fusion]): Likewise.\n+\n 2015-12-28  Nathan Sidwell  <nathan@acm.org>\n \n \t* config/nvptx/nvptx.c (nvptx_output_call_insn): Expect hard regs."}, {"sha": "a97e47a72ba8addc4fb65bbd7b02a4cf62e7c6ae", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d57fdc1097999f0bdd3958c413b25560be196c4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d57fdc1097999f0bdd3958c413b25560be196c4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5d57fdc1097999f0bdd3958c413b25560be196c4", "patch": "@@ -8904,6 +8904,7 @@ rs6000_emit_le_vsx_move (rtx dest, rtx source, machine_mode mode)\n {\n   gcc_assert (!BYTES_BIG_ENDIAN\n \t      && VECTOR_MEM_VSX_P (mode)\n+\t      && !TARGET_P9_VECTOR\n \t      && !gpr_or_gpr_p (dest, source)\n \t      && (MEM_P (source) ^ MEM_P (dest)));\n \n@@ -37793,7 +37794,7 @@ class pass_analyze_swaps : public rtl_opt_pass\n   virtual bool gate (function *)\n     {\n       return (optimize > 0 && !BYTES_BIG_ENDIAN && TARGET_VSX\n-\t      && rs6000_optimize_swaps);\n+\t      && !TARGET_P9_VECTOR && rs6000_optimize_swaps);\n     }\n \n   virtual unsigned int execute (function *fun)"}, {"sha": "1759390d25a4be2d5be9700ca5d45ab543e704fc", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d57fdc1097999f0bdd3958c413b25560be196c4/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d57fdc1097999f0bdd3958c413b25560be196c4/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=5d57fdc1097999f0bdd3958c413b25560be196c4", "patch": "@@ -113,6 +113,7 @@\n     }\n   if (!BYTES_BIG_ENDIAN\n       && VECTOR_MEM_VSX_P (<MODE>mode)\n+      && !TARGET_P9_VECTOR\n       && !gpr_or_gpr_p (operands[0], operands[1])\n       && (memory_operand (operands[0], <MODE>mode)\n           ^ memory_operand (operands[1], <MODE>mode)))"}, {"sha": "cf5ea568ef6df030e6a2d6cc37641110d3f3c9c8", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 48, "deletions": 30, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d57fdc1097999f0bdd3958c413b25560be196c4/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d57fdc1097999f0bdd3958c413b25560be196c4/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=5d57fdc1097999f0bdd3958c413b25560be196c4", "patch": "@@ -301,16 +301,34 @@\n    UNSPEC_VSX_XVCVDPUXDS\n   ])\n \n+;; VSX (P9) moves\n+\n+(define_insn \"*p9_vecload_<mode>\"\n+  [(set (match_operand:VSX_M 0 \"vsx_register_operand\" \"=<VSa>\")\n+        (match_operand:VSX_M 1 \"memory_operand\" \"Z\"))]\n+  \"TARGET_P9_VECTOR\"\n+  \"lxvx %x0,%y1\"\n+  [(set_attr \"type\" \"vecload\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*p9_vecstore_<mode>\"\n+  [(set (match_operand:VSX_M 0 \"memory_operand\" \"=Z\")\n+        (match_operand:VSX_M 1 \"vsx_register_operand\" \"<VSa>\"))]\n+  \"TARGET_P9_VECTOR\"\n+  \"stxvx %x1,%y0\"\n+  [(set_attr \"type\" \"vecstore\")\n+   (set_attr \"length\" \"4\")])\n+\n ;; VSX moves\n \n ;; The patterns for LE permuted loads and stores come before the general\n ;; VSX moves so they match first.\n (define_insn_and_split \"*vsx_le_perm_load_<mode>\"\n   [(set (match_operand:VSX_LE 0 \"vsx_register_operand\" \"=<VSa>\")\n         (match_operand:VSX_LE 1 \"memory_operand\" \"Z\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"#\"\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   [(set (match_dup 2)\n         (vec_select:<MODE>\n           (match_dup 1)\n@@ -331,9 +349,9 @@\n (define_insn_and_split \"*vsx_le_perm_load_<mode>\"\n   [(set (match_operand:VSX_W 0 \"vsx_register_operand\" \"=<VSa>\")\n         (match_operand:VSX_W 1 \"memory_operand\" \"Z\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"#\"\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   [(set (match_dup 2)\n         (vec_select:<MODE>\n           (match_dup 1)\n@@ -356,9 +374,9 @@\n (define_insn_and_split \"*vsx_le_perm_load_v8hi\"\n   [(set (match_operand:V8HI 0 \"vsx_register_operand\" \"=wa\")\n         (match_operand:V8HI 1 \"memory_operand\" \"Z\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"#\"\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   [(set (match_dup 2)\n         (vec_select:V8HI\n           (match_dup 1)\n@@ -385,9 +403,9 @@\n (define_insn_and_split \"*vsx_le_perm_load_v16qi\"\n   [(set (match_operand:V16QI 0 \"vsx_register_operand\" \"=wa\")\n         (match_operand:V16QI 1 \"memory_operand\" \"Z\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"#\"\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   [(set (match_dup 2)\n         (vec_select:V16QI\n           (match_dup 1)\n@@ -422,15 +440,15 @@\n (define_insn \"*vsx_le_perm_store_<mode>\"\n   [(set (match_operand:VSX_LE 0 \"memory_operand\" \"=Z\")\n         (match_operand:VSX_LE 1 \"vsx_register_operand\" \"+<VSa>\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"#\"\n   [(set_attr \"type\" \"vecstore\")\n    (set_attr \"length\" \"12\")])\n \n (define_split\n   [(set (match_operand:VSX_LE 0 \"memory_operand\" \"\")\n         (match_operand:VSX_LE 1 \"vsx_register_operand\" \"\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !reload_completed\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && !reload_completed\"\n   [(set (match_dup 2)\n         (vec_select:<MODE>\n           (match_dup 1)\n@@ -449,7 +467,7 @@\n (define_split\n   [(set (match_operand:VSX_LE 0 \"memory_operand\" \"\")\n         (match_operand:VSX_LE 1 \"vsx_register_operand\" \"\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX && reload_completed\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && reload_completed\"\n   [(set (match_dup 1)\n         (vec_select:<MODE>\n           (match_dup 1)\n@@ -467,15 +485,15 @@\n (define_insn \"*vsx_le_perm_store_<mode>\"\n   [(set (match_operand:VSX_W 0 \"memory_operand\" \"=Z\")\n         (match_operand:VSX_W 1 \"vsx_register_operand\" \"+<VSa>\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"#\"\n   [(set_attr \"type\" \"vecstore\")\n    (set_attr \"length\" \"12\")])\n \n (define_split\n   [(set (match_operand:VSX_W 0 \"memory_operand\" \"\")\n         (match_operand:VSX_W 1 \"vsx_register_operand\" \"\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !reload_completed\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && !reload_completed\"\n   [(set (match_dup 2)\n         (vec_select:<MODE>\n           (match_dup 1)\n@@ -496,7 +514,7 @@\n (define_split\n   [(set (match_operand:VSX_W 0 \"memory_operand\" \"\")\n         (match_operand:VSX_W 1 \"vsx_register_operand\" \"\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX && reload_completed\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && reload_completed\"\n   [(set (match_dup 1)\n         (vec_select:<MODE>\n           (match_dup 1)\n@@ -517,15 +535,15 @@\n (define_insn \"*vsx_le_perm_store_v8hi\"\n   [(set (match_operand:V8HI 0 \"memory_operand\" \"=Z\")\n         (match_operand:V8HI 1 \"vsx_register_operand\" \"+wa\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"#\"\n   [(set_attr \"type\" \"vecstore\")\n    (set_attr \"length\" \"12\")])\n \n (define_split\n   [(set (match_operand:V8HI 0 \"memory_operand\" \"\")\n         (match_operand:V8HI 1 \"vsx_register_operand\" \"\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !reload_completed\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && !reload_completed\"\n   [(set (match_dup 2)\n         (vec_select:V8HI\n           (match_dup 1)\n@@ -550,7 +568,7 @@\n (define_split\n   [(set (match_operand:V8HI 0 \"memory_operand\" \"\")\n         (match_operand:V8HI 1 \"vsx_register_operand\" \"\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX && reload_completed\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && reload_completed\"\n   [(set (match_dup 1)\n         (vec_select:V8HI\n           (match_dup 1)\n@@ -577,15 +595,15 @@\n (define_insn \"*vsx_le_perm_store_v16qi\"\n   [(set (match_operand:V16QI 0 \"memory_operand\" \"=Z\")\n         (match_operand:V16QI 1 \"vsx_register_operand\" \"+wa\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"#\"\n   [(set_attr \"type\" \"vecstore\")\n    (set_attr \"length\" \"12\")])\n \n (define_split\n   [(set (match_operand:V16QI 0 \"memory_operand\" \"\")\n         (match_operand:V16QI 1 \"vsx_register_operand\" \"\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !reload_completed\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && !reload_completed\"\n   [(set (match_dup 2)\n         (vec_select:V16QI\n           (match_dup 1)\n@@ -618,7 +636,7 @@\n (define_split\n   [(set (match_operand:V16QI 0 \"memory_operand\" \"\")\n         (match_operand:V16QI 1 \"vsx_register_operand\" \"\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX && reload_completed\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && reload_completed\"\n   [(set (match_dup 1)\n         (vec_select:V16QI\n           (match_dup 1)\n@@ -1781,7 +1799,7 @@\n         (vec_select:VSX_LE\n           (match_operand:VSX_LE 1 \"memory_operand\" \"Z\")\n           (parallel [(const_int 1) (const_int 0)])))]\n-  \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (<MODE>mode)\"\n+  \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (<MODE>mode) && !TARGET_P9_VECTOR\"\n   \"lxvd2x %x0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n@@ -1791,7 +1809,7 @@\n           (match_operand:VSX_W 1 \"memory_operand\" \"Z\")\n           (parallel [(const_int 2) (const_int 3)\n                      (const_int 0) (const_int 1)])))]\n-  \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (<MODE>mode)\"\n+  \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (<MODE>mode) && !TARGET_P9_VECTOR\"\n   \"lxvd2x %x0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n@@ -1803,7 +1821,7 @@\n                      (const_int 6) (const_int 7)\n                      (const_int 0) (const_int 1)\n                      (const_int 2) (const_int 3)])))]\n-  \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (V8HImode)\"\n+  \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (V8HImode) && !TARGET_P9_VECTOR\"\n   \"lxvd2x %x0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n@@ -1819,7 +1837,7 @@\n                      (const_int 2) (const_int 3)\n                      (const_int 4) (const_int 5)\n                      (const_int 6) (const_int 7)])))]\n-  \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (V16QImode)\"\n+  \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (V16QImode) && !TARGET_P9_VECTOR\"\n   \"lxvd2x %x0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n@@ -1830,7 +1848,7 @@\n         (vec_select:VSX_LE\n           (match_operand:VSX_LE 1 \"vsx_register_operand\" \"<VSa>\")\n           (parallel [(const_int 1) (const_int 0)])))]\n-  \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (<MODE>mode)\"\n+  \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (<MODE>mode) && !TARGET_P9_VECTOR\"\n   \"stxvd2x %x1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n@@ -1840,7 +1858,7 @@\n           (match_operand:VSX_W 1 \"vsx_register_operand\" \"<VSa>\")\n           (parallel [(const_int 2) (const_int 3)\n                      (const_int 0) (const_int 1)])))]\n-  \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (<MODE>mode)\"\n+  \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (<MODE>mode) && !TARGET_P9_VECTOR\"\n   \"stxvd2x %x1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n@@ -1852,7 +1870,7 @@\n                      (const_int 6) (const_int 7)\n                      (const_int 0) (const_int 1)\n                      (const_int 2) (const_int 3)])))]\n-  \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (V8HImode)\"\n+  \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (V8HImode) && !TARGET_P9_VECTOR\"\n   \"stxvd2x %x1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n@@ -1868,7 +1886,7 @@\n                      (const_int 2) (const_int 3)\n                      (const_int 4) (const_int 5)\n                      (const_int 6) (const_int 7)])))]\n-  \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (V16QImode)\"\n+  \"!BYTES_BIG_ENDIAN && VECTOR_MEM_VSX_P (V16QImode) && !TARGET_P9_VECTOR\"\n   \"stxvd2x %x1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n@@ -2456,7 +2474,7 @@\n    (set (match_operand:VSX_M2 2 \"vsx_register_operand\" \"\")\n \t(mem:VSX_M2 (plus:P (match_dup 0)\n \t\t\t    (match_operand:P 3 \"int_reg_operand\" \"\"))))]\n-  \"TARGET_VSX && TARGET_P8_FUSION\"\n+  \"TARGET_VSX && TARGET_P8_FUSION && !TARGET_P9_VECTOR\"\n   \"li %0,%1\\t\\t\\t# vector load fusion\\;lx<VSX_M2:VSm>x %x2,%0,%3\"  \n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"vecload\")])\n@@ -2467,7 +2485,7 @@\n    (set (match_operand:VSX_M2 2 \"vsx_register_operand\" \"\")\n \t(mem:VSX_M2 (plus:P (match_operand:P 3 \"int_reg_operand\" \"\")\n \t\t\t    (match_dup 0))))]\n-  \"TARGET_VSX && TARGET_P8_FUSION\"\n+  \"TARGET_VSX && TARGET_P8_FUSION && !TARGET_P9_VECTOR\"\n   \"li %0,%1\\t\\t\\t# vector load fusion\\;lx<VSX_M2:VSm>x %x2,%0,%3\"  \n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"vecload\")])"}, {"sha": "949eeea5b29a2250c8254bc0c7df76587249bcca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d57fdc1097999f0bdd3958c413b25560be196c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d57fdc1097999f0bdd3958c413b25560be196c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d57fdc1097999f0bdd3958c413b25560be196c4", "patch": "@@ -1,3 +1,8 @@\n+2015-12-28  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/p9-lxvx-stxvx-1.c: New.\n+\t* gcc.target/powerpc/p9-lxvx-stxvx-2.c: New.\n+\n 2015-12-24  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* g++.dg/other/i386-2.C: Add -mpku."}, {"sha": "df25d55e75104ac8ae872518cbc4e0691b3b746e", "filename": "gcc/testsuite/gcc.target/powerpc/p9-lxvx-stxvx-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d57fdc1097999f0bdd3958c413b25560be196c4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-lxvx-stxvx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d57fdc1097999f0bdd3958c413b25560be196c4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-lxvx-stxvx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-lxvx-stxvx-1.c?ref=5d57fdc1097999f0bdd3958c413b25560be196c4", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile { target { powerpc64le-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9 -O3\" } */\n+/* { dg-final { scan-assembler \"lxvx\" } } */\n+/* { dg-final { scan-assembler \"stxvx\" } } */\n+/* { dg-final { scan-assembler-not \"lxvd2x\" } } */\n+/* { dg-final { scan-assembler-not \"stxvd2x\" } } */\n+/* { dg-final { scan-assembler-not \"xxpermdi\" } } */\n+\n+/* Verify P9 vector loads and stores are used rather than the\n+   load-swap/swap-store workarounds for P8.  */\n+#define N 16\n+\n+signed char ca[N] __attribute__((aligned(16)));\n+signed char cb[] __attribute__((aligned(16)))\n+  = {8, 7, 6, 5, 4, 3, 2,  1,  0, -1, -2, -3, -4, -5, -6, -7};\n+signed char cc[] __attribute__((aligned(16)))\n+  = {1, 1, 2, 2, 3, 3, 2,  2,  1,  1,  0,  0, -1, -1, -2, -2};\n+\n+__attribute__((noinline)) void foo ()\n+{\n+  int i;\n+  for (i = 0; i < N; i++) {\n+    ca[i] = cb[i] - cc[i];\n+  }\n+}"}, {"sha": "853a45657df56ad51595dbcdc791bab537eebb5d", "filename": "gcc/testsuite/gcc.target/powerpc/p9-lxvx-stxvx-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d57fdc1097999f0bdd3958c413b25560be196c4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-lxvx-stxvx-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d57fdc1097999f0bdd3958c413b25560be196c4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-lxvx-stxvx-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-lxvx-stxvx-2.c?ref=5d57fdc1097999f0bdd3958c413b25560be196c4", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc64le-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9 -O1\" } */\n+/* { dg-final { scan-assembler \"lxvx\" } } */\n+/* { dg-final { scan-assembler \"stvewx\" } } */\n+/* { dg-final { scan-assembler-not \"lxvd2x\" } } */\n+\n+/* Verify we don't perform P8 load-vector fusion on P9.  */\n+#include <altivec.h>\n+\n+void f (void *p)\n+{\n+  vector unsigned int u32 = vec_vsx_ld (1, (const unsigned int *)p);\n+  vec_ste (u32, 1, (unsigned int *)p);\n+}"}]}