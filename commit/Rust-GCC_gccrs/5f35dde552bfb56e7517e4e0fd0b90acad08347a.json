{"sha": "5f35dde552bfb56e7517e4e0fd0b90acad08347a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYzNWRkZTU1MmJmYjU2ZTc1MTdlNGUwZmQwYjkwYWNhZDA4MzQ3YQ==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2014-05-14T21:27:21Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2014-05-14T21:27:21Z"}, "message": "msp430.c (msp430_builtin): Add MSP430_BUILTIN_DELAY_CYCLES.\n\n* config/msp430/msp430.c (msp430_builtin): Add\nMSP430_BUILTIN_DELAY_CYCLES.\n(msp430_init_builtins): Register void __delay_cycles(long long).\n(msp430_builtin_decl): Add it.\n(cg_magic_constant): New.\n(msp430_expand_delay_cycles): New.\n(msp430_expand_builtin): Call it.\n(msp430_print_operand_raw): Change integer printing from \"int\" to\nHOST_WIDE_INT.\n* config/msp430/msp430.md (define_constants): Add delay_cycles tags.\n(delay_cycles_start): New.\n(delay_cycles_end): New.\n(delay_cycles_32): New.\n(delay_cycles_32x): New.\n(delay_cycles_16): New.\n(delay_cycles_16x): New.\n(delay_cycles_2): New.\n(delay_cycles_1): New.\n* doc/extend.texi: Document __delay_cycles().\n\nFrom-SVN: r210441", "tree": {"sha": "6164dc3c18ebd6f66884acadd7a0ee343469b3ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6164dc3c18ebd6f66884acadd7a0ee343469b3ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f35dde552bfb56e7517e4e0fd0b90acad08347a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f35dde552bfb56e7517e4e0fd0b90acad08347a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f35dde552bfb56e7517e4e0fd0b90acad08347a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f35dde552bfb56e7517e4e0fd0b90acad08347a/comments", "author": null, "committer": null, "parents": [{"sha": "5d40b20f6efeace2533cd594fa782d55859b1d9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d40b20f6efeace2533cd594fa782d55859b1d9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d40b20f6efeace2533cd594fa782d55859b1d9f"}], "stats": {"total": 247, "additions": 247, "deletions": 0}, "files": [{"sha": "228f0e96ba7ba700018ff308dd48a87c3672843d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f35dde552bfb56e7517e4e0fd0b90acad08347a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f35dde552bfb56e7517e4e0fd0b90acad08347a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f35dde552bfb56e7517e4e0fd0b90acad08347a", "patch": "@@ -1,3 +1,25 @@\n+2014-05-14  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/msp430/msp430.c (msp430_builtin): Add\n+\tMSP430_BUILTIN_DELAY_CYCLES.\n+\t(msp430_init_builtins): Register void __delay_cycles(long long).\n+\t(msp430_builtin_decl): Add it.\n+\t(cg_magic_constant): New.\n+\t(msp430_expand_delay_cycles): New.\n+\t(msp430_expand_builtin): Call it.\n+\t(msp430_print_operand_raw): Change integer printing from \"int\" to\n+\tHOST_WIDE_INT.\n+\t* config/msp430/msp430.md (define_constants): Add delay_cycles tags.\n+\t(delay_cycles_start): New.\n+\t(delay_cycles_end): New.\n+\t(delay_cycles_32): New.\n+\t(delay_cycles_32x): New.\n+\t(delay_cycles_16): New.\n+\t(delay_cycles_16x): New.\n+\t(delay_cycles_2): New.\n+\t(delay_cycles_1): New.\n+\t* doc/extend.texi: Document __delay_cycles().\n+\n 2014-05-14  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* config/nios2/nios2.md (nios2_cbranch): Fix paste-o in"}, {"sha": "55b6f0be6b17e5a552bd0f889b4a57b0eff6c793", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f35dde552bfb56e7517e4e0fd0b90acad08347a/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f35dde552bfb56e7517e4e0fd0b90acad08347a/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=5f35dde552bfb56e7517e4e0fd0b90acad08347a", "patch": "@@ -1194,6 +1194,7 @@ enum msp430_builtin\n {\n   MSP430_BUILTIN_BIC_SR,\n   MSP430_BUILTIN_BIS_SR,\n+  MSP430_BUILTIN_DELAY_CYCLES,\n   MSP430_BUILTIN_max\n };\n \n@@ -1203,6 +1204,7 @@ static void\n msp430_init_builtins (void)\n {\n   tree void_ftype_int = build_function_type_list (void_type_node, integer_type_node, NULL);\n+  tree void_ftype_longlong = build_function_type_list (void_type_node, long_long_integer_type_node, NULL);\n \n   msp430_builtins[MSP430_BUILTIN_BIC_SR] =\n     add_builtin_function ( \"__bic_SR_register_on_exit\", void_ftype_int,\n@@ -1211,6 +1213,10 @@ msp430_init_builtins (void)\n   msp430_builtins[MSP430_BUILTIN_BIS_SR] =\n     add_builtin_function ( \"__bis_SR_register_on_exit\", void_ftype_int,\n \t\t\t   MSP430_BUILTIN_BIS_SR, BUILT_IN_MD, NULL, NULL_TREE);\n+\n+  msp430_builtins[MSP430_BUILTIN_DELAY_CYCLES] =\n+    add_builtin_function ( \"__delay_cycles\", void_ftype_longlong,\n+\t\t\t   MSP430_BUILTIN_DELAY_CYCLES, BUILT_IN_MD, NULL, NULL_TREE);\n }\n \n static tree\n@@ -1220,12 +1226,126 @@ msp430_builtin_decl (unsigned code, bool initialize ATTRIBUTE_UNUSED)\n     {\n     case MSP430_BUILTIN_BIC_SR:\n     case MSP430_BUILTIN_BIS_SR:\n+    case MSP430_BUILTIN_DELAY_CYCLES:\n       return msp430_builtins[code];\n     default:\n       return error_mark_node;\n     }\n }\n \n+/* These constants are really register reads, which are faster than\n+   regular constants.  */\n+static int\n+cg_magic_constant (HOST_WIDE_INT c)\n+{\n+  switch (c)\n+    {\n+    case 0xffff:\n+    case -1:\n+    case 0:\n+    case 1:\n+    case 2:\n+    case 4:\n+    case 8:\n+      return 1;\n+    default:\n+      return 0;\n+    }\n+}\n+\n+static rtx\n+msp430_expand_delay_cycles (rtx arg)\n+{\n+  HOST_WIDE_INT i, c, n;\n+  /* extra cycles for MSP430X instructions */\n+#define CYCX(M,X) (msp430x ? (X) : (M))\n+\n+  if (GET_CODE (arg) != CONST_INT)\n+    {\n+      error (\"__delay_cycles() only takes constant arguments\");\n+      return NULL_RTX;\n+    }\n+\n+  c = INTVAL (arg);\n+\n+  if (HOST_BITS_PER_WIDE_INT > 32)\n+    {\n+      if (c < 0)\n+\t{\n+\t  error (\"__delay_cycles only takes non-negative cycle counts.\");\n+\t  return NULL_RTX;\n+\t}\n+    }\n+\n+  emit_insn (gen_delay_cycles_start (arg));\n+\n+  /* For 32-bit loops, there's 13(16) + 5(min(x,0x10000) + 6x cycles.  */\n+  if (c > 3 * 0xffff + CYCX (7, 10))\n+    {\n+      n = c;\n+      /* There's 4 cycles in the short (i>0xffff) loop and 7 in the long (x<=0xffff) loop */\n+      if (c >= 0x10000 * 7 + CYCX (14, 16))\n+\t{\n+\t  i = 0x10000;\n+\t  c -= CYCX (14, 16) + 7 * 0x10000;\n+\t  i += c / 4;\n+\t  c %= 4;\n+\t  if ((unsigned long long) i > 0xffffffffULL)\n+\t    {\n+\t      error (\"__delay_cycles is limited to 32-bit loop counts.\");\n+\t      return NULL_RTX;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  i = (c - CYCX (14, 16)) / 7;\n+\t  c -= CYCX (14, 16) + i * 7;\n+\t}\n+\n+      if (cg_magic_constant (i & 0xffff))\n+\tc ++;\n+      if (cg_magic_constant ((i >> 16) & 0xffff))\n+\tc ++;\n+\n+      if (msp430x)\n+\temit_insn (gen_delay_cycles_32x (GEN_INT (i), GEN_INT (n - c)));\n+      else\n+\temit_insn (gen_delay_cycles_32 (GEN_INT (i), GEN_INT (n - c)));\n+    }\n+\n+  /* For 16-bit loops, there's 7(10) + 3x cycles - so the max cycles is 0x30004(7).  */\n+  if (c > 12)\n+    {\n+      n = c;\n+      i = (c - CYCX (7, 10)) / 3;\n+      c -= CYCX (7, 10) + i * 3;\n+\n+      if (cg_magic_constant (i))\n+\tc ++;\n+\n+      if (msp430x)\n+\temit_insn (gen_delay_cycles_16x (GEN_INT (i), GEN_INT (n - c)));\n+      else\n+\temit_insn (gen_delay_cycles_16 (GEN_INT (i), GEN_INT (n - c)));\n+    }\n+\n+  while (c > 1)\n+    {\n+      emit_insn (gen_delay_cycles_2 ());\n+      c -= 2;\n+    }\n+\n+  if (c)\n+    {\n+      emit_insn (gen_delay_cycles_1 ());\n+      c -= 1;\n+    }\n+\n+  emit_insn (gen_delay_cycles_end (arg));\n+\n+  return NULL_RTX;\n+}\n+\n static rtx\n msp430_expand_builtin (tree exp,\n \t\t       rtx target ATTRIBUTE_UNUSED,\n@@ -1237,6 +1357,9 @@ msp430_expand_builtin (tree exp,\n   unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n   rtx arg1 = expand_normal (CALL_EXPR_ARG (exp, 0));\n \n+  if (fcode == MSP430_BUILTIN_DELAY_CYCLES)\n+    return msp430_expand_delay_cycles (arg1);\n+\n   if (! msp430_is_interrupt_func ())\n     {\n       error (\"MSP430 builtin functions only work inside interrupt handlers\");"}, {"sha": "ceff537c31db7401fecd39f005ec7a6652eee265", "filename": "gcc/config/msp430/msp430.md", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f35dde552bfb56e7517e4e0fd0b90acad08347a/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f35dde552bfb56e7517e4e0fd0b90acad08347a/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.md?ref=5f35dde552bfb56e7517e4e0fd0b90acad08347a", "patch": "@@ -47,6 +47,15 @@\n    UNS_BIS_SR\n \n    UNS_REFSYM_NEED_EXIT\n+\n+   UNS_DELAY_32\n+   UNS_DELAY_32X\n+   UNS_DELAY_16\n+   UNS_DELAY_16X\n+   UNS_DELAY_2\n+   UNS_DELAY_1\n+   UNS_DELAY_START\n+   UNS_DELAY_END\n   ])\n \n (include \"predicates.md\")\n@@ -1317,6 +1326,90 @@\n   \"\n   )\n \n+(define_insn \"delay_cycles_start\"\n+  [(unspec_volatile [(match_operand 0 \"immediate_operand\" \"i\")]\n+\t\t    UNS_DELAY_START)]\n+  \"\"\n+  \"; Begin %J0 cycle delay\"\n+  )\n+\n+(define_insn \"delay_cycles_end\"\n+  [(unspec_volatile [(match_operand 0 \"immediate_operand\" \"i\")]\n+\t\t    UNS_DELAY_END)]\n+  \"\"\n+  \"; End %J0 cycle delay\"\n+  )\n+\n+(define_insn \"delay_cycles_32\"\n+  [(unspec_volatile [(match_operand 0 \"immediate_operand\" \"i\")\n+\t\t     (match_operand 1 \"immediate_operand\" \"i\")\n+\t\t     ] UNS_DELAY_32)]\n+  \"\"\n+  \"PUSH\tr13\n+\tPUSH\tr14\n+\tMOV.W\t%A0, r13\n+\tMOV.W\t%B0, r14\n+1:\tSUB.W\t#1, r13\n+\tSUBC.W\t#0, r14\n+\tJNE\t1b\n+\tTST.W\tr13\n+\tJNE\t1b\n+\tPOP\tr14\n+\tPOP\tr13\"\n+  )\n+\n+(define_insn \"delay_cycles_32x\"\n+  [(unspec_volatile [(match_operand 0 \"immediate_operand\" \"i\")\n+\t\t     (match_operand 1 \"immediate_operand\" \"i\")\n+\t\t     ] UNS_DELAY_32X)]\n+  \"\"\n+  \"PUSHM.A\t#2,r13\n+\tMOV.W\t%A0, r13\n+\tMOV.W\t%B0, r14\n+1:\tSUB.W\t#1, r13\n+\tSUBC.W\t#0, r14\n+\tJNE\t1b\n+\tTST.W\tr13\n+\tJNE\t1b\n+\tPOPM.A\t#2,r13\"\n+  )\n+\n+(define_insn \"delay_cycles_16\"\n+  [(unspec_volatile [(match_operand 0 \"immediate_operand\" \"i\")\n+\t\t     (match_operand 1 \"immediate_operand\" \"i\")\n+\t\t     ] UNS_DELAY_16)]\n+  \"\"\n+  \"PUSH\tr13\n+\tMOV.W\t%0, r13\n+1:\tSUB.W\t#1, r13\n+\tJNE\t1b\n+\tPOP\tr13\"\n+  )\n+\n+(define_insn \"delay_cycles_16x\"\n+  [(unspec_volatile [(match_operand 0 \"immediate_operand\" \"i\")\n+\t\t     (match_operand 1 \"immediate_operand\" \"i\")\n+\t\t     ] UNS_DELAY_16X)]\n+  \"\"\n+  \"PUSHM.A\t#1,r13\n+\tMOV.W\t%0, r13\n+1:\tSUB.W\t#1, r13\n+\tJNE\t1b\n+\tPOPM.A\t#1,r13\"\n+  )\n+\n+(define_insn \"delay_cycles_2\"\n+  [(unspec_volatile [(const_int 0) ] UNS_DELAY_2)]\n+  \"\"\n+  \"JMP\t.+2\"\n+  )\n+\n+(define_insn \"delay_cycles_1\"\n+  [(unspec_volatile [(const_int 0) ] UNS_DELAY_1)]\n+  \"\"\n+  \"NOP\"\n+  )\n+\n (define_insn \"mulhisi3\"\n   [(set (match_operand:SI                          0 \"register_operand\" \"=r\")\n \t(mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"%0\"))"}, {"sha": "6e99d81f509a67ca36e94fac29a64b098118acfe", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f35dde552bfb56e7517e4e0fd0b90acad08347a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f35dde552bfb56e7517e4e0fd0b90acad08347a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=5f35dde552bfb56e7517e4e0fd0b90acad08347a", "patch": "@@ -13194,6 +13194,15 @@ This sets the indicated bits in the saved copy of the status register\n currently residing on the stack.  This only works inside interrupt\n handlers and the changes to the status register will only take affect\n once the handler returns.\n+\n+@item __delay_cycles (long long @var{cycles})\n+This inserts an instruction sequence that takes exactly @var{cycles}\n+cycles (between 0 and about 17E9) to complete.  The inserted sequence\n+may use jumps, loops, or no-ops, and does not interfere with any other\n+instructions.  Note that @var{cycles} must be a compile-time constant\n+integer - that is, you must pass a number, not a variable that may be\n+optimized to a constant later.  The number of cycles delayed by this\n+builtin is exact.\n @end table\n \n @node NDS32 Built-in Functions"}]}