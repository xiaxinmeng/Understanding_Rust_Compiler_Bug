{"sha": "ebfc180f46036e2505997f5fbee93f716e5259d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJmYzE4MGY0NjAzNmUyNTA1OTk3ZjVmYmVlOTNmNzE2ZTUyNTlkOQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1995-10-23T22:25:44Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1995-10-23T22:25:44Z"}, "message": "FSF local junk\n\nFrom-SVN: r10508", "tree": {"sha": "7085db60bb4bf83f64810c563cf46ce3e6ef77c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7085db60bb4bf83f64810c563cf46ce3e6ef77c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebfc180f46036e2505997f5fbee93f716e5259d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebfc180f46036e2505997f5fbee93f716e5259d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebfc180f46036e2505997f5fbee93f716e5259d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebfc180f46036e2505997f5fbee93f716e5259d9/comments", "author": null, "committer": null, "parents": [{"sha": "c77bb813b842a4cb611f88a8eb22ffe6daca8b9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77bb813b842a4cb611f88a8eb22ffe6daca8b9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c77bb813b842a4cb611f88a8eb22ffe6daca8b9d"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "103cb0de2c56bbd692e5825f2504ba3ee1eda1b2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfc180f46036e2505997f5fbee93f716e5259d9/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfc180f46036e2505997f5fbee93f716e5259d9/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ebfc180f46036e2505997f5fbee93f716e5259d9", "patch": "@@ -12782,3 +12782,97 @@ pop_cp_function_context (context)\n \n   free (p);\n }\n+\n+/* FSF LOCAL dje prefix attributes */\n+/* Split SPECS_ATTRS, a list of declspecs and prefix attributes, into two\n+   lists.  SPECS_ATTRS may also be just a typespec (eg: RECORD_TYPE).\n+\n+   The head of the declspec list is stored in DECLSPECS.\n+   The head of the attribute list is stored in PREFIX_ATTRIBUTES.\n+\n+   Note that attributes in SPECS_ATTRS are stored in the TREE_PURPOSE of\n+   the list elements.  We drop the containing TREE_LIST nodes and link the\n+   resulting attributes together the way decl_attributes expects them.  */\n+\n+void\n+split_specs_attrs (specs_attrs, declspecs, prefix_attributes)\n+     tree specs_attrs;\n+     tree *declspecs, *prefix_attributes;\n+{\n+  tree t, s, a, next, specs, attrs;\n+\n+  /* This can happen in c++ (eg: decl: typespec initdecls ';').  */\n+  if (specs_attrs != NULL_TREE\n+      && TREE_CODE (specs_attrs) != TREE_LIST)\n+    {\n+      *declspecs = specs_attrs;\n+      *prefix_attributes = NULL_TREE;\n+      return;\n+    }\n+\n+  /* Remember to keep the lists in the same order, element-wise.  */\n+\n+  specs = s = NULL_TREE;\n+  attrs = a = NULL_TREE;\n+  for (t = specs_attrs; t; t = next)\n+    {\n+      next = TREE_CHAIN (t);\n+      /* Declspecs have a non-NULL TREE_VALUE.  */\n+      if (TREE_VALUE (t) != NULL_TREE)\n+\t{\n+\t  if (specs == NULL_TREE)\n+\t    specs = s = t;\n+\t  else\n+\t    {\n+\t      TREE_CHAIN (s) = t;\n+\t      s = t;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  if (attrs == NULL_TREE)\n+\t    attrs = a = TREE_PURPOSE (t);\n+\t  else\n+\t    {\n+\t      TREE_CHAIN (a) = TREE_PURPOSE (t);\n+\t      a = TREE_PURPOSE (t);\n+\t    }\n+\t}\n+    }\n+\n+  /* Terminate the lists.  */\n+  if (s != NULL_TREE)\n+    TREE_CHAIN (s) = NULL_TREE;\n+  if (a != NULL_TREE)\n+    TREE_CHAIN (a) = NULL_TREE;\n+\n+  /* All done.  */\n+  *declspecs = specs;\n+  *prefix_attributes = attrs;\n+}\n+\n+/* Strip attributes from SPECS_ATTRS, a list of declspecs and attributes.\n+   This function is used by the parser when a rule will accept attributes\n+   in a particular position, but we don't want to support that just yet.\n+\n+   A warning is issued for every ignored attribute.  */\n+\n+tree\n+strip_attrs (specs_attrs)\n+     tree specs_attrs;\n+{\n+  tree specs, attrs;\n+\n+  split_specs_attrs (specs_attrs, &specs, &attrs);\n+\n+  while (attrs)\n+    {\n+      warning (\"`%s' attribute ignored\",\n+\t       IDENTIFIER_POINTER (TREE_PURPOSE (attrs)));\n+      attrs = TREE_CHAIN (attrs);\n+    }\n+\n+  return specs;\n+}\n+/* END FSF LOCAL */\n+"}]}