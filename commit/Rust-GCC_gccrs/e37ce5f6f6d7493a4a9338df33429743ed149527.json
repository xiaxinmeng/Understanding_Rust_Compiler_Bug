{"sha": "e37ce5f6f6d7493a4a9338df33429743ed149527", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM3Y2U1ZjZmNmQ3NDkzYTRhOTMzOGRmMzM0Mjk3NDNlZDE0OTUyNw==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1992-11-16T13:52:13Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1992-11-16T13:52:13Z"}, "message": "pa.c (output_move_double): Handle indirect stores to memory via an auto-incremented/auto-decremented...\n\n\t* pa.c (output_move_double): Handle indirect stores to memory\n\tvia an auto-incremented/auto-decremented register in the same\n\tmanner in which loads are handled.\n\nFrom-SVN: r2751", "tree": {"sha": "4d8257c82481e4abee1354f0b8a372f7c2d7c527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d8257c82481e4abee1354f0b8a372f7c2d7c527"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e37ce5f6f6d7493a4a9338df33429743ed149527", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e37ce5f6f6d7493a4a9338df33429743ed149527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e37ce5f6f6d7493a4a9338df33429743ed149527", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e37ce5f6f6d7493a4a9338df33429743ed149527/comments", "author": null, "committer": null, "parents": [{"sha": "143f1945b92e9592f0e3e322a59d5347a6ebe86e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/143f1945b92e9592f0e3e322a59d5347a6ebe86e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/143f1945b92e9592f0e3e322a59d5347a6ebe86e"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "8b32e194429c21980885e83a4955ae9c38d26b09", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37ce5f6f6d7493a4a9338df33429743ed149527/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37ce5f6f6d7493a4a9338df33429743ed149527/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=e37ce5f6f6d7493a4a9338df33429743ed149527", "patch": "@@ -798,16 +798,49 @@ output_move_double (operands)\n \n   if (optype0 == MEMOP)\n     {\n+      /* We have to output the address syntax ourselves, since print_operand\n+\t doesn't deal with the addresses we want to use.  Fix this later.  */\n+\n       rtx addr = XEXP (operands[0], 0);\n-      if (GET_CODE (addr) == POST_INC || GET_CODE (addr) == PRE_INC)\n+      if (GET_CODE (addr) == POST_INC || GET_CODE (addr) == POST_DEC)\n \t{\n-\t  operands[0] = gen_rtx (MEM, SImode, addr);\n-\t  return \"stw%M0 %1,%0\\n\\tstw%M0 %R1,%0\";\n+\t  rtx high_reg = gen_rtx (SUBREG, SImode, operands[1], 0);\n+\n+\t  operands[0] = XEXP (addr, 0);\n+\t  if (GET_CODE (operands[1]) != REG || GET_CODE (operands[0]) != REG)\n+\t    abort ();\n+\n+\t  if (!reg_overlap_mentioned_p (high_reg, addr))\n+\t    {\n+\t      /* No overlap between high target register and address\n+\t\t register.  (We do this in a non-obvious way to\n+\t\t save a register file writeback)  */\n+\t      if (GET_CODE (addr) == POST_INC)\n+\t\treturn \"stws,ma %1,8(0,%0)\\n\\tstw %R1,-4(0,%0)\";\n+\t      return \"stws,ma %1,-8(0,%0)\\n\\tstw %R1,12(0,%0)\";\n+\t    }\n+\t  else\n+\t    abort();\n \t}\n-      else if (GET_CODE (addr) == POST_DEC || GET_CODE (addr) == PRE_DEC)\n+      else if (GET_CODE (addr) == PRE_INC || GET_CODE (addr) == PRE_DEC)\n \t{\n-\t  operands[0] = gen_rtx (MEM, SImode, addr);\n-\t  return \"stw%M0 %R1,%0\\n\\tstw%M0 %1,%0\";\n+\t  rtx high_reg = gen_rtx (SUBREG, SImode, operands[1], 0);\n+\n+\t  operands[0] = XEXP (addr, 0);\n+\t  if (GET_CODE (operands[1]) != REG || GET_CODE (operands[0]) != REG)\n+\t    abort ();\n+\n+\t  if (!reg_overlap_mentioned_p (high_reg, addr))\n+\t    {\n+\t      /* No overlap between high target register and address\n+\t\t register.  (We do this in a non-obvious way to\n+\t\t save a register file writeback)  */\n+\t      if (GET_CODE (addr) == PRE_INC)\n+\t\treturn \"stws,mb %1,8(0,%0)\\n\\tstw %R1,4(0,%0)\";\n+\t      return \"stws,mb %1,-8(0,%0)\\n\\tstw %R1,4(0,%0)\";\n+\t    }\n+\t  else\n+\t    abort();\n \t}\n     }\n   if (optype1 == MEMOP)"}]}