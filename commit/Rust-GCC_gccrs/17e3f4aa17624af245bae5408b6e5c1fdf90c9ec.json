{"sha": "17e3f4aa17624af245bae5408b6e5c1fdf90c9ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdlM2Y0YWExNzYyNGFmMjQ1YmFlNTQwOGI2ZTVjMWZkZjkwYzllYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-11-07T15:15:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-11-07T15:15:28Z"}, "message": "bitset: Do not derive from _Safe_sequence_base in C++0x mode...\n\n2010-11-07  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/debug/bitset: Do not derive from _Safe_sequence_base in\n\tC++0x mode, otherwise std::bitset isn't a literal type anymore;\n\tadjust everywhere.\n\n\t* include/debug/bitset (bitset<>::bitset(), bitset<>::\n\tbitset(unsigned long long)):  Add missing constexpr specifier.\n\nFrom-SVN: r166416", "tree": {"sha": "8c7afc0305ad1af6678872992d187092916a020e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c7afc0305ad1af6678872992d187092916a020e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17e3f4aa17624af245bae5408b6e5c1fdf90c9ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17e3f4aa17624af245bae5408b6e5c1fdf90c9ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17e3f4aa17624af245bae5408b6e5c1fdf90c9ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17e3f4aa17624af245bae5408b6e5c1fdf90c9ec/comments", "author": null, "committer": null, "parents": [{"sha": "c50bcc13cbab9a0451d74ba13f70437c5fcf69ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c50bcc13cbab9a0451d74ba13f70437c5fcf69ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c50bcc13cbab9a0451d74ba13f70437c5fcf69ad"}], "stats": {"total": 50, "additions": 40, "deletions": 10}, "files": [{"sha": "fa9a9bb898fdea4dd24a646f3403a41950720521", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17e3f4aa17624af245bae5408b6e5c1fdf90c9ec/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17e3f4aa17624af245bae5408b6e5c1fdf90c9ec/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=17e3f4aa17624af245bae5408b6e5c1fdf90c9ec", "patch": "@@ -1,3 +1,12 @@\n+2010-11-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/debug/bitset: Do not derive from _Safe_sequence_base in\n+\tC++0x mode, otherwise std::bitset isn't a literal type anymore;\n+\tadjust everywhere.\n+\n+\t* include/debug/bitset (bitset<>::bitset(), bitset<>::\n+\tbitset(unsigned long long)):  Add missing constexpr specifier.\n+\n 2010-11-05  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/doxygen/user.cfg.in: Add typeindex."}, {"sha": "abbd8413a2b19800cfbab90439ef76689ea5454a", "filename": "libstdc++-v3/include/debug/bitset", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17e3f4aa17624af245bae5408b6e5c1fdf90c9ec/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17e3f4aa17624af245bae5408b6e5c1fdf90c9ec/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset?ref=17e3f4aa17624af245bae5408b6e5c1fdf90c9ec", "patch": "@@ -41,87 +41,108 @@ namespace __debug\n   /// Class std::bitset with additional safety/checking/debug instrumentation.\n   template<size_t _Nb>\n     class bitset\n-    : public _GLIBCXX_STD_D::bitset<_Nb>, \n-      public __gnu_debug::_Safe_sequence_base\n+    : public _GLIBCXX_STD_D::bitset<_Nb>\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+    , public __gnu_debug::_Safe_sequence_base\n+#endif\n     {\n       typedef _GLIBCXX_STD_D::bitset<_Nb> _Base;\n-      typedef __gnu_debug::_Safe_sequence_base  _Safe_base;\n \n     public:\n       // bit reference:\n       class reference\n-      : private _Base::reference, public __gnu_debug::_Safe_iterator_base\n+      : private _Base::reference\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+        , public __gnu_debug::_Safe_iterator_base\n+#endif\n       {\n \ttypedef typename _Base::reference _Base_ref;\n \n \tfriend class bitset;\n \treference();\n \n-\treference(const _Base_ref& __base, bitset* __seq)\n-\t: _Base_ref(__base), _Safe_iterator_base(__seq, false)\n+\treference(const _Base_ref& __base,\n+\t\t  bitset* __seq __attribute__((__unused__)))\n+\t: _Base_ref(__base)\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+\t, _Safe_iterator_base(__seq, false)\n+#endif\n \t{ }\n \n       public:\n \treference(const reference& __x)\n-\t: _Base_ref(__x), _Safe_iterator_base(__x, false)\n+\t: _Base_ref(__x)\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+\t, _Safe_iterator_base(__x, false)\n+#endif\n \t{ }\n \n \treference&\n \toperator=(bool __x)\n \t{\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n \t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n \t\t\t      _M_message(__gnu_debug::__msg_bad_bitset_write)\n \t\t\t\t._M_iterator(*this));\n+#endif\n \t  *static_cast<_Base_ref*>(this) = __x;\n \t  return *this;\n \t}\n \n \treference&\n \toperator=(const reference& __x)\n \t{\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n \t  _GLIBCXX_DEBUG_VERIFY(! __x._M_singular(),\n \t\t\t       _M_message(__gnu_debug::__msg_bad_bitset_read)\n \t\t\t\t._M_iterator(__x));\n \t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n \t\t\t      _M_message(__gnu_debug::__msg_bad_bitset_write)\n \t\t\t\t._M_iterator(*this));\n+#endif\n \t  *static_cast<_Base_ref*>(this) = __x;\n \t  return *this;\n \t}\n \n \tbool\n \toperator~() const\n \t{\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n \t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n \t\t\t       _M_message(__gnu_debug::__msg_bad_bitset_read)\n \t\t\t\t._M_iterator(*this));\n+#endif\n \t  return ~(*static_cast<const _Base_ref*>(this));\n \t}\n \n \toperator bool() const\n \t{\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n \t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n \t\t\t      _M_message(__gnu_debug::__msg_bad_bitset_read)\n \t\t\t\t._M_iterator(*this));\n+#endif\n \t  return *static_cast<const _Base_ref*>(this);\n \t}\n \n \treference&\n \tflip()\n \t{\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n \t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n \t\t\t      _M_message(__gnu_debug::__msg_bad_bitset_flip)\n \t\t\t\t._M_iterator(*this));\n+#endif\n \t  _Base_ref::flip();\n \t  return *this;\n \t}\n       };\n \n       // 23.3.5.1 constructors:\n-      bitset() : _Base() { }\n+      _GLIBCXX_CONSTEXPR bitset() : _Base() { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      bitset(unsigned long long __val)\n+      constexpr bitset(unsigned long long __val)\n #else\n       bitset(unsigned long __val)\n #endif\n@@ -147,7 +168,7 @@ namespace __debug\n \t       _CharT __zero, _CharT __one = _CharT('1'))\n \t: _Base(__str, __pos, __n, __zero, __one) { }\n \n-      bitset(const _Base& __x) : _Base(__x), _Safe_base() { }\n+      bitset(const _Base& __x) : _Base(__x) { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       template<typename _CharT>"}]}