{"sha": "c497db75bae31d76a5402644ef247c2dc48ad801", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ5N2RiNzViYWUzMWQ3NmE1NDAyNjQ0ZWYyNDdjMmRjNDhhZDgwMQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2006-05-14T20:37:56Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2006-05-14T20:37:56Z"}, "message": "pt.c (build_non_dependent_expr): Leave ADDR_EXPR of COMPONENT_REF alone.\n\ngcc/cp/ChangeLog:\n* pt.c (build_non_dependent_expr): Leave ADDR_EXPR of\nCOMPONENT_REF alone.\ngcc/testsuite/ChangeLog:\n* g++.dg/template/dependent-expr5.C: New test.\n\nFrom-SVN: r113765", "tree": {"sha": "d2c3f8b2f287aaa758f45c7def17dd6b5475546e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2c3f8b2f287aaa758f45c7def17dd6b5475546e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c497db75bae31d76a5402644ef247c2dc48ad801", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c497db75bae31d76a5402644ef247c2dc48ad801", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c497db75bae31d76a5402644ef247c2dc48ad801", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c497db75bae31d76a5402644ef247c2dc48ad801/comments", "author": null, "committer": null, "parents": [{"sha": "faf32f4aa5df7a44d5566884150fcf910cc647a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faf32f4aa5df7a44d5566884150fcf910cc647a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faf32f4aa5df7a44d5566884150fcf910cc647a5"}], "stats": {"total": 132, "additions": 128, "deletions": 4}, "files": [{"sha": "0af68ec773d1a464604c61774f3bb32073f39190", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c497db75bae31d76a5402644ef247c2dc48ad801/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c497db75bae31d76a5402644ef247c2dc48ad801/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c497db75bae31d76a5402644ef247c2dc48ad801", "patch": "@@ -1,3 +1,8 @@\n+2006-05-14  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* pt.c (build_non_dependent_expr): Leave ADDR_EXPR of\n+\tCOMPONENT_REF alone.\n+\n 2006-05-11  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/27547"}, {"sha": "c1530fb120ff985392f8cf65b96b26d3d0cbde48", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c497db75bae31d76a5402644ef247c2dc48ad801/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c497db75bae31d76a5402644ef247c2dc48ad801/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c497db75bae31d76a5402644ef247c2dc48ad801", "patch": "@@ -12903,10 +12903,11 @@ build_non_dependent_expr (tree expr)\n     return expr;\n   /* Preserve OVERLOADs; the functions must be available to resolve\n      types.  */\n-  inner_expr = (TREE_CODE (expr) == ADDR_EXPR ?\n-\t\tTREE_OPERAND (expr, 0) :\n-\t\tTREE_CODE (expr) == COMPONENT_REF ?\n-\t\tTREE_OPERAND (expr, 1) : expr);\n+  inner_expr = expr;\n+  if (TREE_CODE (inner_expr) == ADDR_EXPR)\n+    inner_expr = TREE_OPERAND (inner_expr, 0);\n+  if (TREE_CODE (inner_expr) == COMPONENT_REF)\n+    inner_expr = TREE_OPERAND (inner_expr, 1);\n   if (is_overloaded_fn (inner_expr)\n       || TREE_CODE (inner_expr) == OFFSET_REF)\n     return expr;"}, {"sha": "a2a2ae5edf4532691af1b4d825d76f1f6cd70071", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c497db75bae31d76a5402644ef247c2dc48ad801/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c497db75bae31d76a5402644ef247c2dc48ad801/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c497db75bae31d76a5402644ef247c2dc48ad801", "patch": "@@ -1,3 +1,7 @@\n+2006-05-14  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* g++.dg/template/dependent-expr5.C: New test.\n+\n 2006-05-14  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/26729"}, {"sha": "023f433da5da0d6f0674d759b6c38af42ab3e320", "filename": "gcc/testsuite/g++.dg/template/dependent-expr5.C", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c497db75bae31d76a5402644ef247c2dc48ad801/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c497db75bae31d76a5402644ef247c2dc48ad801/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr5.C?ref=c497db75bae31d76a5402644ef247c2dc48ad801", "patch": "@@ -0,0 +1,114 @@\n+// { dg-do compile }\n+\n+// Copyright 2005 Free Software Foundation\n+// contributed by Alexandre Oliva <aoliva@redhat.com>\n+// inspired in the failure reported in Red Hat bugzilla #168260.\n+\n+template<class F> void bind(F f) {}\n+\n+template<class F> void bindm(F f) {}\n+template<class F, class T> void bindm(F (T::*f)(void)) {} // { dg-error \"note\" }\n+\n+template<class F> void bindn(F f) {}\n+template<class F, class T> void bindn(F (*f)(T)) {}\n+\n+template<class F> void bindb(F f) {}\n+template<class F, class T> void bindb(F (*f)(T)) {} // { dg-error \"note\" }\n+template<class F, class T> void bindb(F (T::*f)(void)) {} // { dg-error \"note\" }\n+\n+struct foo {\n+  static int baist;\n+  int bait;\n+  void barf ();\n+  static void barf (int);\n+\n+  struct bar {\n+    static int baikst;\n+    int baikt;\n+    void bark ();\n+    static void bark (int);\n+\n+    bar() {\n+      bind (&baist);\n+      bind (&foo::baist);\n+      bind (&bait); // { dg-error \"nonstatic data member\" }\n+      bind (&foo::bait);\n+\n+      bind (&baikst);\n+      bind (&bar::baikst);\n+      bind (&baikt); // ok, this->baikt\n+      bind (&bar::baikt);\n+\n+      bind (&barf); // { dg-error \"no matching function\" }\n+      bind (&foo::barf); // { dg-error \"no matching function\" }\n+\n+      bindm (&barf); // { dg-error \"no matching function\" }\n+      bindm (&foo::barf);\n+\n+      bindn (&barf);\n+      bindn (&foo::barf);\n+\n+      bindb (&barf);\n+      bindb (&foo::barf); // { dg-error \"ambiguous\" }\n+\n+      bind (&bark); // { dg-error \"no matching function\" }\n+      bind (&bar::bark); // { dg-error \"no matching function\" }\n+\n+      bindm (&bark); // { dg-error \"no matching function\" }\n+      bindm (&bar::bark);\n+\n+      bindn (&bark);\n+      bindn (&bar::bark);\n+\n+      bindb (&bark);\n+      bindb (&bar::bark); // { dg-error \"ambiguous\" }\n+    }\n+  };\n+\n+  template <typename T>\n+  struct barT {\n+    static int baikst;\n+    int baikt;\n+    void bark ();\n+    static void bark (int);\n+\n+    barT() {\n+      bind (&baist);\n+      bind (&foo::baist);\n+      bind (&bait); // { dg-error \"nonstatic data member\" }\n+      bind (&foo::bait);\n+\n+      bind (&baikst);\n+      bind (&barT::baikst);\n+      bind (&baikt); // ok, this->baikt\n+      bind (&barT::baikt);\n+\n+      bind (&barf); // { dg-error \"no matching function\" }\n+      bind (&foo::barf); // { dg-error \"no matching function\" }\n+\n+      bindm (&barf); // { dg-error \"no matching function\" }\n+      bindm (&foo::barf);\n+\n+      bindn (&barf);\n+      bindn (&foo::barf);\n+\n+      bindb (&barf);\n+      bindb (&foo::barf); // { dg-error \"ambiguous\" }\n+\n+      bind (&bark); // { dg-error \"no matching function\" }\n+      bind (&barT::bark); // { dg-error \"no matching function\" }\n+\n+      bindm (&bark); // { dg-error \"no matching function\" }\n+      bindm (&barT::bark);\n+\n+      bindn (&bark);\n+      bindn (&barT::bark);\n+\n+      bindb (&bark);\n+      bindb (&barT::bark); // { dg-error \"ambiguous\" }\n+    }\n+  };\n+\n+  bar bard;\n+  barT<void> bart;\n+} bad;"}]}