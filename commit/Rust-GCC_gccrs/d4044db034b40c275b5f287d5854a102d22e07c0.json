{"sha": "d4044db034b40c275b5f287d5854a102d22e07c0", "node_id": "C_kwDOANBUbNoAKGQ0MDQ0ZGIwMzRiNDBjMjc1YjVmMjg3ZDU4NTRhMTAyZDIyZTA3YzA", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-10-20T06:32:16Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-10-20T06:47:59Z"}, "message": "gfortran.dg/bind-c-contiguous-5.c: Big-endian fix\n\ngcc/testsuite/\n\n\tPR fortran/102815\n\t* gfortran.dg/bind-c-contiguous-5.c (do_call, reset_var): Handle\n\tbig andian.", "tree": {"sha": "20b469d3174c5647dab5d0d1eec64128011eb999", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20b469d3174c5647dab5d0d1eec64128011eb999"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4044db034b40c275b5f287d5854a102d22e07c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4044db034b40c275b5f287d5854a102d22e07c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4044db034b40c275b5f287d5854a102d22e07c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4044db034b40c275b5f287d5854a102d22e07c0/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "424945258d1778617b5d3d5273f6e1c10e718f80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/424945258d1778617b5d3d5273f6e1c10e718f80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/424945258d1778617b5d3d5273f6e1c10e718f80"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "0b7bae8a3817c3ea7d5e33ddc006a4355fec7f98", "filename": "gcc/testsuite/gfortran.dg/bind-c-contiguous-5.c", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4044db034b40c275b5f287d5854a102d22e07c0/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind-c-contiguous-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4044db034b40c275b5f287d5854a102d22e07c0/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind-c-contiguous-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind-c-contiguous-5.c?ref=d4044db034b40c275b5f287d5854a102d22e07c0", "patch": "@@ -88,6 +88,7 @@ do_call (CFI_cdesc_t *x, CFI_cdesc_t *y, CFI_cdesc_t *z,\n   basic_check (z, is_cont || num == 2);\n   if (!is_cont && num == 1)\n     {\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n       check_str (x, \"a\\0\\0\\0b\\0\\0\\0c\\0\\0\\0\", 3*4, zero);\n       check_str (x, \"g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0\", 3*4, one);\n       check_str (x, \"n\\0\\0\\0o\\0\\0\\0p\\0\\0\\0\", 3*4, two);\n@@ -97,24 +98,55 @@ do_call (CFI_cdesc_t *x, CFI_cdesc_t *y, CFI_cdesc_t *z,\n       check_str (z, \"a\\0\\0\\0b\\0\\0\\0c\\0\\0\\0\", 3*4, zero);\n       check_str (z, \"g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0\", 3*4, one);\n       check_str (z, \"n\\0\\0\\0o\\0\\0\\0p\\0\\0\\0\", 3*4, two);\n+#elif __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n+      check_str (x, \"\\0\\0\\0a\\0\\0\\0b\\0\\0\\0c\", 3*4, zero);\n+      check_str (x, \"\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\", 3*4, one);\n+      check_str (x, \"\\0\\0\\0n\\0\\0\\0o\\0\\0\\0p\", 3*4, two);\n+      check_str (y, \"\\0\\0\\0a\\0\\0\\0b\\0\\0\\0c\", 3*4, zero);\n+      check_str (y, \"\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\", 3*4, one);\n+      check_str (y, \"\\0\\0\\0n\\0\\0\\0o\\0\\0\\0p\", 3*4, two);\n+      check_str (z, \"\\0\\0\\0a\\0\\0\\0b\\0\\0\\0c\", 3*4, zero);\n+      check_str (z, \"\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\", 3*4, one);\n+      check_str (z, \"\\0\\0\\0n\\0\\0\\0o\\0\\0\\0p\", 3*4, two);\n+#else\n+#error \"Unsupported __BYTE_ORDER__\"\n+#endif\n     }\n   else if (num == 1)\n     {\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n       if (memcmp ((const char*) x->base_addr, \"a\\0\\0\\0b\\0\\0\\0c\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0n\\0\\0\\0o\\0\\0\\0p\\0\\0\\0\", 9*4) != 0)\n \t__builtin_abort ();\n       if (memcmp ((const char*) y->base_addr, \"a\\0\\0\\0b\\0\\0\\0c\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0n\\0\\0\\0o\\0\\0\\0p\\0\\0\\0\", 9*4) != 0)\n \t__builtin_abort ();\n       if (memcmp ((const char*) z->base_addr, \"a\\0\\0\\0b\\0\\0\\0c\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0n\\0\\0\\0o\\0\\0\\0p\\0\\0\\0\", 9*4) != 0)\n \t__builtin_abort ();\n+#else\n+      if (memcmp ((const char*) x->base_addr, \"\\0\\0\\0a\\0\\0\\0b\\0\\0\\0c\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0n\\0\\0\\0o\\0\\0\\0p\", 9*4) != 0)\n+\t__builtin_abort ();\n+      if (memcmp ((const char*) y->base_addr, \"\\0\\0\\0a\\0\\0\\0b\\0\\0\\0c\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0n\\0\\0\\0o\\0\\0\\0p\", 9*4) != 0)\n+\t__builtin_abort ();\n+      if (memcmp ((const char*) z->base_addr, \"\\0\\0\\0a\\0\\0\\0b\\0\\0\\0c\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0n\\0\\0\\0o\\0\\0\\0p\", 9*4) != 0)\n+\t__builtin_abort ();\n+#endif\n     }\n   else if (num == 2)\n     {\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n       if (memcmp ((const char*) x->base_addr, \"d\\0\\0\\0e\\0\\0\\0f\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0j\\0\\0\\0l\\0\\0\\0m\\0\\0\\0\", 9*4) != 0)\n \t__builtin_abort ();\n       if (memcmp ((const char*) y->base_addr, \"d\\0\\0\\0e\\0\\0\\0f\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0j\\0\\0\\0l\\0\\0\\0m\\0\\0\\0\", 9*4) != 0)\n \t__builtin_abort ();\n       if (memcmp ((const char*) z->base_addr, \"d\\0\\0\\0e\\0\\0\\0f\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0j\\0\\0\\0l\\0\\0\\0m\\0\\0\\0\", 9*4) != 0)\n \t__builtin_abort ();\n+#else\n+      if (memcmp ((const char*) x->base_addr, \"\\0\\0\\0d\\0\\0\\0e\\0\\0\\0f\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0j\\0\\0\\0l\\0\\0\\0m\", 9*4) != 0)\n+\t__builtin_abort ();\n+      if (memcmp ((const char*) y->base_addr, \"\\0\\0\\0d\\0\\0\\0e\\0\\0\\0f\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0j\\0\\0\\0l\\0\\0\\0m\", 9*4) != 0)\n+\t__builtin_abort ();\n+      if (memcmp ((const char*) z->base_addr, \"\\0\\0\\0d\\0\\0\\0e\\0\\0\\0f\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0j\\0\\0\\0l\\0\\0\\0m\", 9*4) != 0)\n+\t__builtin_abort ();\n+#endif\n     }\n   else\n     __builtin_abort ();\n@@ -144,6 +176,7 @@ do_call (CFI_cdesc_t *x, CFI_cdesc_t *y, CFI_cdesc_t *z,\n   // intent_in\n   if (intent_in && !is_cont && num == 1)\n     {\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n       check_str (x, \"a\\0\\0\\0b\\0\\0\\0c\\0\\0\\0\", 3*4, zero);\n       check_str (x, \"g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0\", 3*4, one);\n       check_str (x, \"n\\0\\0\\0o\\0\\0\\0p\\0\\0\\0\", 3*4, two);\n@@ -153,24 +186,53 @@ do_call (CFI_cdesc_t *x, CFI_cdesc_t *y, CFI_cdesc_t *z,\n       check_str (z, \"a\\0\\0\\0b\\0\\0\\0c\\0\\0\\0\", 3*4, zero);\n       check_str (z, \"g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0\", 3*4, one);\n       check_str (z, \"n\\0\\0\\0o\\0\\0\\0p\\0\\0\\0\", 3*4, two);\n+#else\n+      check_str (x, \"\\0\\0\\0a\\0\\0\\0b\\0\\0\\0c\", 3*4, zero);\n+      check_str (x, \"\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\", 3*4, one);\n+      check_str (x, \"\\0\\0\\0n\\0\\0\\0o\\0\\0\\0p\", 3*4, two);\n+      check_str (y, \"\\0\\0\\0a\\0\\0\\0b\\0\\0\\0c\", 3*4, zero);\n+      check_str (y, \"\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\", 3*4, one);\n+      check_str (y, \"\\0\\0\\0n\\0\\0\\0o\\0\\0\\0p\", 3*4, two);\n+      check_str (z, \"\\0\\0\\0a\\0\\0\\0b\\0\\0\\0c\", 3*4, zero);\n+      check_str (z, \"\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\", 3*4, one);\n+      check_str (z, \"\\0\\0\\0n\\0\\0\\0o\\0\\0\\0p\", 3*4, two);\n+#endif\n     }\n   else if (intent_in && num == 1)\n     {\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n       if (memcmp ((const char*) x->base_addr, \"a\\0\\0\\0b\\0\\0\\0c\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0n\\0\\0\\0o\\0\\0\\0p\\0\\0\\0\", 9*4) != 0)\n \t__builtin_abort ();\n       if (memcmp ((const char*) y->base_addr, \"a\\0\\0\\0b\\0\\0\\0c\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0n\\0\\0\\0o\\0\\0\\0p\\0\\0\\0\", 9*4) != 0)\n \t__builtin_abort ();\n       if (memcmp ((const char*) z->base_addr, \"a\\0\\0\\0b\\0\\0\\0c\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0n\\0\\0\\0o\\0\\0\\0p\\0\\0\\0\", 9*4) != 0)\n \t__builtin_abort ();\n+#else\n+      if (memcmp ((const char*) x->base_addr, \"\\0\\0\\0a\\0\\0\\0b\\0\\0\\0c\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0n\\0\\0\\0o\\0\\0\\0p\", 9*4) != 0)\n+\t__builtin_abort ();\n+      if (memcmp ((const char*) y->base_addr, \"\\0\\0\\0a\\0\\0\\0b\\0\\0\\0c\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0n\\0\\0\\0o\\0\\0\\0p\", 9*4) != 0)\n+\t__builtin_abort ();\n+      if (memcmp ((const char*) z->base_addr, \"\\0\\0\\0a\\0\\0\\0b\\0\\0\\0c\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0n\\0\\0\\0o\\0\\0\\0p\", 9*4) != 0)\n+\t__builtin_abort ();\n+#endif\n     }\n   else if (intent_in && num == 2)\n     {\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n       if (memcmp ((const char*) x->base_addr, \"d\\0\\0\\0e\\0\\0\\0f\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0j\\0\\0\\0l\\0\\0\\0m\\0\\0\\0\", 9) != 0)\n \t__builtin_abort ();\n       if (memcmp ((const char*) y->base_addr, \"d\\0\\0\\0e\\0\\0\\0f\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0j\\0\\0\\0l\\0\\0\\0m\\0\\0\\0\", 9) != 0)\n \t__builtin_abort ();\n       if (memcmp ((const char*) z->base_addr, \"d\\0\\0\\0e\\0\\0\\0f\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0j\\0\\0\\0l\\0\\0\\0m\\0\\0\\0\", 9) != 0)\n \t__builtin_abort ();\n+#else\n+      if (memcmp ((const char*) x->base_addr, \"\\0\\0\\0d\\0\\0\\0e\\0\\0\\0f\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0j\\0\\0\\0l\\0\\0\\0m\", 9) != 0)\n+\t__builtin_abort ();\n+      if (memcmp ((const char*) y->base_addr, \"\\0\\0\\0d\\0\\0\\0e\\0\\0\\0f\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0j\\0\\0\\0l\\0\\0\\0m\", 9) != 0)\n+\t__builtin_abort ();\n+      if (memcmp ((const char*) z->base_addr, \"\\0\\0\\0d\\0\\0\\0e\\0\\0\\0f\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0j\\0\\0\\0l\\0\\0\\0m\", 9) != 0)\n+\t__builtin_abort ();\n+#endif\n     }\n   else if (intent_in)\n     __builtin_abort ();\n@@ -179,15 +241,22 @@ do_call (CFI_cdesc_t *x, CFI_cdesc_t *y, CFI_cdesc_t *z,\n       if (is_cont && num == 1)\n         {\n \t  /* Copy in - set the value to check that no copy out is done. */\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n \t  memcpy ((char*) x->base_addr, \"1\\0\\0\\0\"\"2\\0\\0\\0\"\"3\\0\\0\\0\"\"4\\0\\0\\0\"\"5\\0\\0\\0\"\"6\\0\\0\\0\"\"7\\0\\0\\0\"\"8\\0\\0\\0\"\"9\\0\\0\\0\", 9*4);\n \t  memcpy ((char*) y->base_addr, \"1\\0\\0\\0\"\"2\\0\\0\\0\"\"3\\0\\0\\0\"\"4\\0\\0\\0\"\"5\\0\\0\\0\"\"6\\0\\0\\0\"\"7\\0\\0\\0\"\"8\\0\\0\\0\"\"9\\0\\0\\0\", 9*4);\n \t  memcpy ((char*) z->base_addr, \"1\\0\\0\\0\"\"2\\0\\0\\0\"\"3\\0\\0\\0\"\"4\\0\\0\\0\"\"5\\0\\0\\0\"\"6\\0\\0\\0\"\"7\\0\\0\\0\"\"8\\0\\0\\0\"\"9\\0\\0\\0\", 9*4);\n+#else\n+\t  memcpy ((char*) x->base_addr, \"\\0\\0\\0\"\"1\\0\\0\\0\"\"2\\0\\0\\0\"\"3\\0\\0\\0\"\"4\\0\\0\\0\"\"5\\0\\0\\0\"\"6\\0\\0\\0\"\"7\\0\\0\\0\"\"8\\0\\0\\0\"\"9\", 9*4);\n+\t  memcpy ((char*) y->base_addr, \"\\0\\0\\0\"\"1\\0\\0\\0\"\"2\\0\\0\\0\"\"3\\0\\0\\0\"\"4\\0\\0\\0\"\"5\\0\\0\\0\"\"6\\0\\0\\0\"\"7\\0\\0\\0\"\"8\\0\\0\\0\"\"9\", 9*4);\n+\t  memcpy ((char*) z->base_addr, \"\\0\\0\\0\"\"1\\0\\0\\0\"\"2\\0\\0\\0\"\"3\\0\\0\\0\"\"4\\0\\0\\0\"\"5\\0\\0\\0\"\"6\\0\\0\\0\"\"7\\0\\0\\0\"\"8\\0\\0\\0\"\"9\", 9*4);\n+#endif\n         }\n       return addr1;\n     }\n   // !intent_in\n   if (!is_cont && num == 1)\n     {\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n       check_str (x, \"A\\0\\0\\0B\\0\\0\\0C\\0\\0\\0\", 3*4, zero);\n       check_str (x, \"D\\0\\0\\0E\\0\\0\\0F\\0\\0\\0\", 3*4, one);\n       check_str (x, \"G\\0\\0\\0H\\0\\0\\0I\\0\\0\\0\", 3*4, two);\n@@ -197,15 +266,35 @@ do_call (CFI_cdesc_t *x, CFI_cdesc_t *y, CFI_cdesc_t *z,\n       check_str (z, \"A\\0\\0\\0B\\0\\0\\0C\\0\\0\\0\", 3*4, zero);\n       check_str (z, \"D\\0\\0\\0E\\0\\0\\0F\\0\\0\\0\", 3*4, one);\n       check_str (z, \"G\\0\\0\\0H\\0\\0\\0I\\0\\0\\0\", 3*4, two);\n+#else\n+      check_str (x, \"\\0\\0\\0A\\0\\0\\0B\\0\\0\\0C\", 3*4, zero);\n+      check_str (x, \"\\0\\0\\0D\\0\\0\\0E\\0\\0\\0F\", 3*4, one);\n+      check_str (x, \"\\0\\0\\0G\\0\\0\\0H\\0\\0\\0I\", 3*4, two);\n+      check_str (y, \"\\0\\0\\0A\\0\\0\\0B\\0\\0\\0C\", 3*4, zero);\n+      check_str (y, \"\\0\\0\\0D\\0\\0\\0E\\0\\0\\0F\", 3*4, one);\n+      check_str (y, \"\\0\\0\\0G\\0\\0\\0H\\0\\0\\0I\", 3*4, two);\n+      check_str (z, \"\\0\\0\\0A\\0\\0\\0B\\0\\0\\0C\", 3*4, zero);\n+      check_str (z, \"\\0\\0\\0D\\0\\0\\0E\\0\\0\\0F\", 3*4, one);\n+      check_str (z, \"\\0\\0\\0G\\0\\0\\0H\\0\\0\\0I\", 3*4, two);\n+#endif\n     }\n   else\n     {\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n       if (memcmp ((const char*) x->base_addr, \"A\\0\\0\\0B\\0\\0\\0C\\0\\0\\0D\\0\\0\\0E\\0\\0\\0F\\0\\0\\0G\\0\\0\\0H\\0\\0\\0I\\0\\0\\0\", 9*4) != 0)\n \t__builtin_abort ();\n       if (memcmp ((const char*) y->base_addr, \"A\\0\\0\\0B\\0\\0\\0C\\0\\0\\0D\\0\\0\\0E\\0\\0\\0F\\0\\0\\0G\\0\\0\\0H\\0\\0\\0I\\0\\0\\0\", 9*4) != 0)\n \t__builtin_abort ();\n       if (memcmp ((const char*) z->base_addr, \"A\\0\\0\\0B\\0\\0\\0C\\0\\0\\0D\\0\\0\\0E\\0\\0\\0F\\0\\0\\0G\\0\\0\\0H\\0\\0\\0I\\0\\0\\0\", 9*4) != 0)\n \t__builtin_abort ();\n+#else\n+      if (memcmp ((const char*) x->base_addr, \"\\0\\0\\0A\\0\\0\\0B\\0\\0\\0C\\0\\0\\0D\\0\\0\\0E\\0\\0\\0F\\0\\0\\0G\\0\\0\\0H\\0\\0\\0I\", 9*4) != 0)\n+\t__builtin_abort ();\n+      if (memcmp ((const char*) y->base_addr, \"\\0\\0\\0A\\0\\0\\0B\\0\\0\\0C\\0\\0\\0D\\0\\0\\0E\\0\\0\\0F\\0\\0\\0G\\0\\0\\0H\\0\\0\\0I\", 9*4) != 0)\n+\t__builtin_abort ();\n+      if (memcmp ((const char*) z->base_addr, \"\\0\\0\\0A\\0\\0\\0B\\0\\0\\0C\\0\\0\\0D\\0\\0\\0E\\0\\0\\0F\\0\\0\\0G\\0\\0\\0H\\0\\0\\0I\", 9*4) != 0)\n+\t__builtin_abort ();\n+#endif\n     }\n   return addr1;\n }\n@@ -275,15 +364,27 @@ reset_var (CFI_cdesc_t *x, int num)\n \n   if (num == 1)\n     {\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n       set_str (x, \"a\\0\\0\\0b\\0\\0\\0c\\0\\0\\0\", 3*4, zero);\n       set_str (x, \"g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0\", 3*4, one);\n       set_str (x, \"n\\0\\0\\0o\\0\\0\\0p\\0\\0\\0\", 3*4, two);\n+#else\n+      set_str (x, \"\\0\\0\\0a\\0\\0\\0b\\0\\0\\0c\", 3*4, zero);\n+      set_str (x, \"\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\", 3*4, one);\n+      set_str (x, \"\\0\\0\\0n\\0\\0\\0o\\0\\0\\0p\", 3*4, two);\n+#endif\n     }\n   else if (num == 2)\n     {\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n       set_str (x, \"d\\0\\0\\0e\\0\\0\\0f\\0\\0\\0\", 3*4, zero);\n       set_str (x, \"g\\0\\0\\0h\\0\\0\\0i\\0\\0\\0\", 3*4, one);\n       set_str (x, \"j\\0\\0\\0l\\0\\0\\0m\\0\\0\\0\", 3*4, two);\n+#else\n+      set_str (x, \"\\0\\0\\0d\\0\\0\\0e\\0\\0\\0f\", 3*4, zero);\n+      set_str (x, \"\\0\\0\\0g\\0\\0\\0h\\0\\0\\0i\", 3*4, one);\n+      set_str (x, \"\\0\\0\\0j\\0\\0\\0l\\0\\0\\0m\", 3*4, two);\n+#endif\n     }\n   else\n     __builtin_abort ();"}]}