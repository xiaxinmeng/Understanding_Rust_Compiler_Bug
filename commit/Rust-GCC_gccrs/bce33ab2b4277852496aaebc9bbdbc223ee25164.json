{"sha": "bce33ab2b4277852496aaebc9bbdbc223ee25164", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNlMzNhYjJiNDI3Nzg1MjQ5NmFhZWJjOWJiZGJjMjIzZWUyNTE2NA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-05-20T20:01:46Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-05-20T20:01:46Z"}, "message": "remove TYPE_ARG_TYPES from godump.c\n\nremove TYPE_ARG_TYPES from godump.c\n\t* godump.c (go_format_type): Don't use TYPE_ARG_TYPES.\n\nFrom-SVN: r173980", "tree": {"sha": "8d87fbeb87c8d61f38d06eb309b205d542e88b3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d87fbeb87c8d61f38d06eb309b205d542e88b3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bce33ab2b4277852496aaebc9bbdbc223ee25164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce33ab2b4277852496aaebc9bbdbc223ee25164", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bce33ab2b4277852496aaebc9bbdbc223ee25164", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce33ab2b4277852496aaebc9bbdbc223ee25164/comments", "author": null, "committer": null, "parents": [{"sha": "769b55b24fa8db8cbe084203d2ed4354bbb6b060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/769b55b24fa8db8cbe084203d2ed4354bbb6b060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/769b55b24fa8db8cbe084203d2ed4354bbb6b060"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "f9c65da2546c93ba2bcc43859ac6cb7ec37c6d64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce33ab2b4277852496aaebc9bbdbc223ee25164/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce33ab2b4277852496aaebc9bbdbc223ee25164/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bce33ab2b4277852496aaebc9bbdbc223ee25164", "patch": "@@ -1,3 +1,7 @@\n+2011-05-20  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* godump.c (go_format_type): Don't use TYPE_ARG_TYPES.\n+\n 2011-05-20  Tom de Vries  <tom@codesourcery.com>\n \n \tPR target/45098"}, {"sha": "1ef5e1722921458f367730d05093a4886f5e59ed", "filename": "gcc/godump.c", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce33ab2b4277852496aaebc9bbdbc223ee25164/gcc%2Fgodump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce33ab2b4277852496aaebc9bbdbc223ee25164/gcc%2Fgodump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgodump.c?ref=bce33ab2b4277852496aaebc9bbdbc223ee25164", "patch": "@@ -741,9 +741,11 @@ go_format_type (struct godump_container *container, tree type,\n \n     case FUNCTION_TYPE:\n       {\n-\ttree args;\n+\ttree arg_type;\n \tbool is_varargs;\n \ttree result;\n+\tfunction_args_iterator iter;\n+\tbool seen_arg;\n \n \t/* Go has no way to write a type which is a function but not a\n \t   pointer to a function.  */\n@@ -754,25 +756,21 @@ go_format_type (struct godump_container *container, tree type,\n \t  }\n \n \tobstack_1grow (ob, '(');\n-\tis_varargs = true;\n-\tfor (args = TYPE_ARG_TYPES (type);\n-\t     args != NULL_TREE;\n-\t     args = TREE_CHAIN (args))\n+\tis_varargs = stdarg_p (type);\n+\tseen_arg = false;\n+\tFOREACH_FUNCTION_ARGS (type, arg_type, iter)\n \t  {\n-\t    if (VOID_TYPE_P (TREE_VALUE (args)))\n-\t      {\n-\t\tgcc_assert (TREE_CHAIN (args) == NULL);\n-\t\tis_varargs = false;\n-\t\tbreak;\n-\t      }\n-\t    if (args != TYPE_ARG_TYPES (type))\n+\t    if (VOID_TYPE_P (arg_type))\n+\t      break;\n+\t    if (seen_arg)\n \t      obstack_grow (ob, \", \", 2);\n-\t    if (!go_format_type (container, TREE_VALUE (args), true, false))\n+\t    if (!go_format_type (container, arg_type, true, false))\n \t      ret = false;\n+\t    seen_arg = true;\n \t  }\n \tif (is_varargs)\n \t  {\n-\t    if (TYPE_ARG_TYPES (type) != NULL_TREE)\n+\t    if (prototype_p (type))\n \t      obstack_grow (ob, \", \", 2);\n \t    obstack_grow (ob, \"...interface{}\", 14);\n \t  }"}]}