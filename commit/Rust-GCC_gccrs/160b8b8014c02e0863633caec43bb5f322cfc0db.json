{"sha": "160b8b8014c02e0863633caec43bb5f322cfc0db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYwYjhiODAxNGMwMmUwODYzNjMzY2FlYzQzYmI1ZjMyMmNmYzBkYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2008-01-24T14:41:32Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-01-24T14:41:32Z"}, "message": "re PR c++/34913 (ICE vector in template)\n\n        PR c++/34913\n        * decl2.c (is_late_template_attribute): Defer any attribute with\n        dependent args.  Also defer type attributes if the type is dependent.\n\nFrom-SVN: r131779", "tree": {"sha": "744a3147c6bfa7e64ba5a4159c09675fbe49a5c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/744a3147c6bfa7e64ba5a4159c09675fbe49a5c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/160b8b8014c02e0863633caec43bb5f322cfc0db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/160b8b8014c02e0863633caec43bb5f322cfc0db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/160b8b8014c02e0863633caec43bb5f322cfc0db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/160b8b8014c02e0863633caec43bb5f322cfc0db/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "89bf8683d7ff4ae7bf3071d49d50d7f60f809577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89bf8683d7ff4ae7bf3071d49d50d7f60f809577", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89bf8683d7ff4ae7bf3071d49d50d7f60f809577"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "b6593cfa04a2a053c719ffe4d75c5e8eb861eadd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/160b8b8014c02e0863633caec43bb5f322cfc0db/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/160b8b8014c02e0863633caec43bb5f322cfc0db/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=160b8b8014c02e0863633caec43bb5f322cfc0db", "patch": "@@ -1,3 +1,9 @@\n+2008-01-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/34913\n+\t* decl2.c (is_late_template_attribute): Defer any attribute with \n+\tdependent args.  Also defer type attributes if the type is dependent.\n+\n 2008-01-22  Jakub Jelinek  <jakub@redhat.com>, Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR c++/33984"}, {"sha": "550d0bcebab7f275eea2d4a6577a074b92dab060", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/160b8b8014c02e0863633caec43bb5f322cfc0db/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/160b8b8014c02e0863633caec43bb5f322cfc0db/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=160b8b8014c02e0863633caec43bb5f322cfc0db", "patch": "@@ -985,17 +985,25 @@ is_late_template_attribute (tree attr, tree decl)\n   tree name = TREE_PURPOSE (attr);\n   tree args = TREE_VALUE (attr);\n   const struct attribute_spec *spec = lookup_attribute_spec (name);\n+  tree arg;\n \n   if (!spec)\n     /* Unknown attribute.  */\n     return false;\n \n-  if (is_attribute_p (\"aligned\", name)\n-      && args\n-      && value_dependent_expression_p (TREE_VALUE (args)))\n-    /* Can't apply this until we know the desired alignment.  */\n-    return true;\n-  else if (TREE_CODE (decl) == TYPE_DECL || spec->type_required)\n+  /* If any of the arguments are dependent expressions, we can't evaluate\n+     the attribute until instantiation time.  */\n+  for (arg = args; arg; arg = TREE_CHAIN (arg))\n+    {\n+      tree t = TREE_VALUE (arg);\n+      if (value_dependent_expression_p (t)\n+\t  || type_dependent_expression_p (t))\n+\treturn true;\n+    }\n+\n+  if (TREE_CODE (decl) == TYPE_DECL\n+      || TYPE_P (decl)\n+      || spec->type_required)\n     {\n       tree type = TYPE_P (decl) ? decl : TREE_TYPE (decl);\n \n@@ -1006,6 +1014,10 @@ is_late_template_attribute (tree attr, tree decl)\n \t  || code == BOUND_TEMPLATE_TEMPLATE_PARM\n \t  || code == TYPENAME_TYPE)\n \treturn true;\n+      /* Also defer attributes on dependent types.  This is not necessary\n+\t in all cases, but is the better default.  */\n+      else if (dependent_type_p (type))\n+\treturn true;\n       else\n \treturn false;\n     }"}, {"sha": "a3213522bf5863b1e07b0bcb14a78930135acc96", "filename": "gcc/testsuite/g++.dg/ext/vector11.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/160b8b8014c02e0863633caec43bb5f322cfc0db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/160b8b8014c02e0863633caec43bb5f322cfc0db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector11.C?ref=160b8b8014c02e0863633caec43bb5f322cfc0db", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/34913\n+\n+template<typename T> struct A\n+{\n+  int x[sizeof(T)] __attribute((vector_size(8)));\n+};"}]}