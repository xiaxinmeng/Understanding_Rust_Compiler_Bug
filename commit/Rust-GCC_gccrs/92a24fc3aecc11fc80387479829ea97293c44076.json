{"sha": "92a24fc3aecc11fc80387479829ea97293c44076", "node_id": "C_kwDOANBUbNoAKDkyYTI0ZmMzYWVjYzExZmM4MDM4NzQ3OTgyOWVhOTcyOTNjNDQwNzY", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-05T11:04:28Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-05T11:12:51Z"}, "message": "Enforce the is_concrete inferface to start cleaning up the needs_substitution helpers", "tree": {"sha": "e9168c480b2bac77fd435163a3bf02ef0c26708f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9168c480b2bac77fd435163a3bf02ef0c26708f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92a24fc3aecc11fc80387479829ea97293c44076", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92a24fc3aecc11fc80387479829ea97293c44076", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92a24fc3aecc11fc80387479829ea97293c44076", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92a24fc3aecc11fc80387479829ea97293c44076/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7520628b49d5516c517b70bb04043dd91dd2a5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7520628b49d5516c517b70bb04043dd91dd2a5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7520628b49d5516c517b70bb04043dd91dd2a5e"}], "stats": {"total": 126, "additions": 112, "deletions": 14}, "files": [{"sha": "184922857aa9a811df6a91dad9caa805d0d015cd", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a24fc3aecc11fc80387479829ea97293c44076/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a24fc3aecc11fc80387479829ea97293c44076/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=92a24fc3aecc11fc80387479829ea97293c44076", "patch": "@@ -333,6 +333,16 @@ StructFieldType::clone () const\n \t\t\t      get_field_type ()->clone ());\n }\n \n+bool\n+SubstitutionParamMapping::need_substitution () const\n+{\n+  if (!param->can_resolve ())\n+    return true;\n+\n+  auto resolved = param->resolve ();\n+  return !resolved->is_concrete ();\n+}\n+\n bool\n SubstitutionParamMapping::fill_param_ty (BaseType &type, Location locus)\n {"}, {"sha": "5e26b3af549d6b71ae6ab9a3af6d82cd5b7f9057", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 102, "deletions": 14, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a24fc3aecc11fc80387479829ea97293c44076/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a24fc3aecc11fc80387479829ea97293c44076/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=92a24fc3aecc11fc80387479829ea97293c44076", "patch": "@@ -340,7 +340,7 @@ class BaseType : public TypeBoundsMappings\n \n   virtual bool is_unit () const { return false; }\n \n-  virtual bool is_concrete () const { return true; }\n+  virtual bool is_concrete () const = 0;\n \n   TypeKind get_kind () const { return kind; }\n \n@@ -470,7 +470,7 @@ class InferType : public BaseType\n \n   bool default_type (BaseType **type) const;\n \n-  bool is_concrete () const final override { return false; }\n+  bool is_concrete () const final override { return true; }\n \n private:\n   InferTypeKind infer_kind;\n@@ -503,6 +503,8 @@ class ErrorType : public BaseType\n   BaseType *clone () const final override;\n \n   std::string get_name () const override final { return as_string (); }\n+\n+  bool is_concrete () const final override { return false; }\n };\n \n class SubstitutionArgumentMappings;\n@@ -559,6 +561,11 @@ class ParamType : public BaseType\n     return true;\n   }\n \n+  bool is_concrete () const override final\n+  {\n+    return !contains_type_parameters ();\n+  }\n+\n   ParamType *handle_substitions (SubstitutionArgumentMappings mappings);\n \n private:\n@@ -587,6 +594,8 @@ class StructFieldType\n \n   StructFieldType *clone () const;\n \n+  bool is_concrete () const { return ty->is_concrete (); }\n+\n   void debug () const { rust_debug (\"%s\", as_string ().c_str ()); }\n \n private:\n@@ -717,6 +726,8 @@ class SubstitutionParamMapping\n     return var.get_tyty ();\n   }\n \n+  bool need_substitution () const;\n+\n private:\n   const HIR::TypeParam &generic;\n   ParamType *param;\n@@ -750,8 +761,13 @@ class SubstitutionArg\n \n   bool is_conrete () const\n   {\n-    return argument != nullptr && argument->get_kind () != TyTy::TypeKind::ERROR\n-\t   && argument->get_kind () != TyTy::TypeKind::PARAM;\n+    if (argument != nullptr)\n+      return true;\n+\n+    if (argument->get_kind () == TyTy::TypeKind::PARAM)\n+      return false;\n+\n+    return argument->is_concrete ();\n   }\n \n   std::string as_string () const\n@@ -905,16 +921,12 @@ class SubstitutionRef\n \n   bool needs_substitution () const\n   {\n-    if (!has_substitutions ())\n-      return false;\n-\n-    if (used_arguments.is_error ())\n-      return true;\n-\n-    if (used_arguments.size () != get_num_substitutions ())\n-      return true;\n-\n-    return !used_arguments.is_concrete ();\n+    for (auto &sub : substitutions)\n+      {\n+\tif (sub.need_substitution ())\n+\t  return true;\n+      }\n+    return false;\n   }\n \n   bool was_substituted () const { return !needs_substitution (); }\n@@ -1224,6 +1236,19 @@ class ADTType : public BaseType, public SubstitutionRef\n     return identifier + subst_as_string ();\n   }\n \n+  bool is_concrete () const override final\n+  {\n+    for (auto &variant : variants)\n+      {\n+\tfor (auto &field : variant->get_fields ())\n+\t  {\n+\t    if (!field->is_concrete ())\n+\t      return false;\n+\t  }\n+      }\n+    return true;\n+  }\n+\n   BaseType *clone () const final override;\n \n   bool needs_generic_substitutions () const override final\n@@ -1356,6 +1381,17 @@ class FnType : public BaseType, public SubstitutionRef\n     return param_at (0).second;\n   }\n \n+  bool is_concrete () const override final\n+  {\n+    for (const auto &param : params)\n+      {\n+\tconst BaseType *p = param.second;\n+\tif (!p->is_concrete ())\n+\t  return false;\n+      }\n+    return get_return_type ()->is_concrete ();\n+  }\n+\n   std::vector<std::pair<HIR::Pattern *, BaseType *>> &get_params ()\n   {\n     return params;\n@@ -1453,6 +1489,16 @@ class FnPtr : public BaseType\n       }\n   }\n \n+  bool is_concrete () const override final\n+  {\n+    for (auto &p : params)\n+      {\n+\tif (!p.get_tyty ()->is_concrete ())\n+\t  return false;\n+      }\n+    return result_type.get_tyty ()->is_concrete ();\n+  }\n+\n private:\n   std::vector<TyVar> params;\n   TyVar result_type;\n@@ -1505,6 +1551,17 @@ class ClosureType : public BaseType, public SubstitutionRef\n \n   BaseType *clone () const final override;\n \n+  bool is_concrete () const override final\n+  {\n+    for (auto &param : parameter_types)\n+      {\n+\tauto p = param.get_tyty ();\n+\tif (!p->is_concrete ())\n+\t  return false;\n+      }\n+    return result_type.get_tyty ()->is_concrete ();\n+  }\n+\n   bool needs_generic_substitutions () const override final\n   {\n     return needs_substitution ();\n@@ -1598,6 +1655,7 @@ class BoolType : public BaseType\n   BaseType *cast (BaseType *other) override;\n \n   BaseType *clone () const final override;\n+  bool is_concrete () const override final { return true; }\n };\n \n class IntType : public BaseType\n@@ -1639,6 +1697,7 @@ class IntType : public BaseType\n   BaseType *clone () const final override;\n \n   bool is_equal (const BaseType &other) const override;\n+  bool is_concrete () const override final { return true; }\n \n private:\n   IntKind int_kind;\n@@ -1683,6 +1742,7 @@ class UintType : public BaseType\n   BaseType *clone () const final override;\n \n   bool is_equal (const BaseType &other) const override;\n+  bool is_concrete () const override final { return true; }\n \n private:\n   UintKind uint_kind;\n@@ -1725,6 +1785,7 @@ class FloatType : public BaseType\n   BaseType *clone () const final override;\n \n   bool is_equal (const BaseType &other) const override;\n+  bool is_concrete () const override final { return true; }\n \n private:\n   FloatKind float_kind;\n@@ -1755,6 +1816,7 @@ class USizeType : public BaseType\n   BaseType *cast (BaseType *other) override;\n \n   BaseType *clone () const final override;\n+  bool is_concrete () const override final { return true; }\n };\n \n class ISizeType : public BaseType\n@@ -1782,6 +1844,7 @@ class ISizeType : public BaseType\n   BaseType *cast (BaseType *other) override;\n \n   BaseType *clone () const final override;\n+  bool is_concrete () const override final { return true; }\n };\n \n class CharType : public BaseType\n@@ -1809,6 +1872,7 @@ class CharType : public BaseType\n   BaseType *cast (BaseType *other) override;\n \n   BaseType *clone () const final override;\n+  bool is_concrete () const override final { return true; }\n };\n \n class ReferenceType : public BaseType\n@@ -1848,6 +1912,11 @@ class ReferenceType : public BaseType\n     return get_base ()->contains_type_parameters ();\n   }\n \n+  bool is_concrete () const override final\n+  {\n+    return !contains_type_parameters ();\n+  }\n+\n   ReferenceType *handle_substitions (SubstitutionArgumentMappings mappings);\n \n   Mutability mutability () const { return mut; }\n@@ -1896,6 +1965,11 @@ class PointerType : public BaseType\n     return get_base ()->contains_type_parameters ();\n   }\n \n+  bool is_concrete () const override final\n+  {\n+    return !contains_type_parameters ();\n+  }\n+\n   PointerType *handle_substitions (SubstitutionArgumentMappings mappings);\n \n   Mutability mutability () const { return mut; }\n@@ -1936,6 +2010,7 @@ class StrType : public BaseType\n   bool is_equal (const BaseType &other) const override;\n \n   BaseType *clone () const final override;\n+  bool is_concrete () const override final { return true; }\n };\n \n // https://doc.rust-lang.org/std/primitive.never.html\n@@ -1975,6 +2050,7 @@ class NeverType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n   bool is_unit () const override { return true; }\n+  bool is_concrete () const override final { return true; }\n };\n \n // used at the type in associated types in traits\n@@ -2034,6 +2110,11 @@ class PlaceholderType : public BaseType\n     return resolve ()->contains_type_parameters ();\n   }\n \n+  bool is_concrete () const override final\n+  {\n+    return !contains_type_parameters ();\n+  }\n+\n private:\n   std::string symbol;\n };\n@@ -2099,6 +2180,11 @@ class ProjectionType : public BaseType, public SubstitutionRef\n     return base->contains_type_parameters ();\n   }\n \n+  bool is_concrete () const override final\n+  {\n+    return !contains_type_parameters ();\n+  }\n+\n   ProjectionType *\n   handle_substitions (SubstitutionArgumentMappings mappings) override final;\n \n@@ -2139,6 +2225,8 @@ class DynamicObjectType : public BaseType\n \n   std::string get_name () const override final;\n \n+  bool is_concrete () const override final { return true; }\n+\n   // this returns a flat list of items including super trait bounds\n   const std::vector<const Resolver::TraitItemReference *>\n   get_object_items () const;"}]}