{"sha": "79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzllZTk4MjZiM2QxMTMyM2ViNWIyZTZiMmRmYzg5MmZlZmVlYjJiNw==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2013-06-27T13:49:28Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2013-06-27T13:49:28Z"}, "message": "re PR c++/57208 (Latest chromium compilation fails with enabled LTO)\n\n2013-06-27  Martin Jambor  <mjambor@suse.cz>\n\n\tPR lto/57208\n\t* ipa-ref.h (ipa_maybe_record_reference): Declare.\n\t* ipa-ref.c (ipa_maybe_record_reference): New function.\n\t* cgraphclones.c (cgraph_create_virtual_clone): Use it.\n\t* ipa-cp.c (create_specialized_node): Record potential references from\n\taggvals.\n\t* Makefile.in (ipa-ref.o): Add IPA_REF_H to dependencies.\n\nFrom-SVN: r200468", "tree": {"sha": "c4683ccba1c2ba8180759aa2dbf98cf9ef9d90d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4683ccba1c2ba8180759aa2dbf98cf9ef9d90d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e18b4a817c072f787e1a7c1c971f90752cb16e9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e18b4a817c072f787e1a7c1c971f90752cb16e9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e18b4a817c072f787e1a7c1c971f90752cb16e9f"}], "stats": {"total": 68, "additions": 46, "deletions": 22}, "files": [{"sha": "1ecbfda1f62ef6a10a98df8ccfad9bee05c0b694", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7", "patch": "@@ -1,3 +1,13 @@\n+2013-06-27  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR lto/57208\n+\t* ipa-ref.h (ipa_maybe_record_reference): Declare.\n+\t* ipa-ref.c (ipa_maybe_record_reference): New function.\n+\t* cgraphclones.c (cgraph_create_virtual_clone): Use it.\n+\t* ipa-cp.c (create_specialized_node): Record potential references from\n+\taggvals.\n+\t* Makefile.in (ipa-ref.o): Add IPA_REF_H to dependencies.\n+\n 2013-06-27  Yufeng Zhang  <yufeng.zhang@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_force_temporary): Add an extra"}, {"sha": "ffd85e76f0310477568f3075dcae06f0eb6a527e", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7", "patch": "@@ -2933,7 +2933,8 @@ ipa-prop.o : ipa-prop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(DATA_STREAMER_H) $(TREE_STREAMER_H) $(PARAMS_H)\n ipa-ref.o : ipa-ref.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    langhooks.h $(GGC_H) $(TARGET_H) $(CGRAPH_H)  $(TREE_H) $(TARGET_H) \\\n-   $(TREE_FLOW_H) $(TM_H) $(TREE_PASS_H) $(FLAGS_H) $(TREE_H) $(GGC_H) \n+   $(TREE_FLOW_H) $(TM_H) $(TREE_PASS_H) $(FLAGS_H) $(TREE_H) $(GGC_H) \\\n+   $(IPA_UTILS_H)\n ipa-cp.o : ipa-cp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h  \\\n    $(TREE_H) $(TARGET_H) $(GIMPLE_H) $(CGRAPH_H) $(IPA_PROP_H) $(TREE_FLOW_H) \\\n    $(TREE_PASS_H) $(FLAGS_H) $(DIAGNOSTIC_H) \\"}, {"sha": "5c328b7055e5e22df15f175a7304a477cf8eac3d", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7", "patch": "@@ -341,27 +341,8 @@ cgraph_create_virtual_clone (struct cgraph_node *old_node,\n       || in_lto_p)\n     new_node->symbol.unique_name = true;\n   FOR_EACH_VEC_SAFE_ELT (tree_map, i, map)\n-    {\n-      tree var = map->new_tree;\n-      symtab_node ref_node;\n-\n-      STRIP_NOPS (var);\n-      if (TREE_CODE (var) != ADDR_EXPR)\n-\tcontinue;\n-      var = get_base_var (var);\n-      if (!var)\n-\tcontinue;\n-      if (TREE_CODE (var) != FUNCTION_DECL\n-\t  && TREE_CODE (var) != VAR_DECL)\n-\tcontinue;\n-\n-      /* Record references of the future statement initializing the constant\n-\t argument.  */\n-      ref_node = symtab_get_node (var);\n-      gcc_checking_assert (ref_node);\n-      ipa_record_reference ((symtab_node)new_node, (symtab_node)ref_node,\n-\t\t\t    IPA_REF_ADDR, NULL);\n-    }\n+    ipa_maybe_record_reference ((symtab_node) new_node, map->new_tree,\n+\t\t\t\tIPA_REF_ADDR, NULL);\n   if (!args_to_skip)\n     new_node->clone.combined_args_to_skip = old_node->clone.combined_args_to_skip;\n   else if (old_node->clone.combined_args_to_skip)"}, {"sha": "05c6e74d195e1ccf0c7f91936b8c97f42d910dc8", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7", "patch": "@@ -2663,6 +2663,7 @@ create_specialized_node (struct cgraph_node *node,\n {\n   struct ipa_node_params *new_info, *info = IPA_NODE_REF (node);\n   vec<ipa_replace_map_p, va_gc> *replace_trees = NULL;\n+  struct ipa_agg_replacement_value *av;\n   struct cgraph_node *new_node;\n   int i, count = ipa_get_param_count (info);\n   bitmap args_to_skip;\n@@ -2704,6 +2705,10 @@ create_specialized_node (struct cgraph_node *node,\n   new_node = cgraph_create_virtual_clone (node, callers, replace_trees,\n \t\t\t\t\t  args_to_skip, \"constprop\");\n   ipa_set_node_agg_value_chain (new_node, aggvals);\n+  for (av = aggvals; av; av = av->next)\n+    ipa_maybe_record_reference ((symtab_node) new_node, av->value,\n+\t\t\t\tIPA_REF_ADDR, NULL);\n+\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"     the new node is %s/%i.\\n\","}, {"sha": "a6ffdf3e5bbdc75afeca0db01517bd1c78cee1d2", "filename": "gcc/ipa-ref.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7/gcc%2Fipa-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7/gcc%2Fipa-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-ref.c?ref=79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ggc.h\"\n #include \"target.h\"\n #include \"cgraph.h\"\n+#include \"ipa-utils.h\"\n \n static const char *ipa_ref_use_name[] = {\"read\",\"write\",\"addr\",\"alias\"};\n \n@@ -67,6 +68,30 @@ ipa_record_reference (symtab_node referring_node,\n   return ref;\n }\n \n+/* If VAL is a reference to a function or a variable, add a reference from\n+   REFERRING_NODE to the corresponding symbol table node.  USE_TYPE specify\n+   type of the use and STMT the statement (if it exists).  Return the new\n+   reference or NULL if none was created.  */\n+\n+struct ipa_ref *\n+ipa_maybe_record_reference (symtab_node referring_node, tree val,\n+\t\t\t    enum ipa_ref_use use_type, gimple stmt)\n+{\n+  STRIP_NOPS (val);\n+  if (TREE_CODE (val) != ADDR_EXPR)\n+    return NULL;\n+  val = get_base_var (val);\n+  if (val && (TREE_CODE (val) == FUNCTION_DECL\n+\t       || TREE_CODE (val) == VAR_DECL))\n+    {\n+      symtab_node referred = symtab_get_node (val);\n+      gcc_checking_assert (referred);\n+      return ipa_record_reference (referring_node, referred,\n+\t\t\t\t   use_type, stmt);\n+    }\n+  return NULL;\n+}\n+\n /* Remove reference REF.  */\n \n void"}, {"sha": "c25e4e46f9da98c12eb2017cea3035afb0dff6e9", "filename": "gcc/ipa-ref.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7/gcc%2Fipa-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7/gcc%2Fipa-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-ref.h?ref=79ee9826b3d11323eb5b2e6b2dfc892fefeeb2b7", "patch": "@@ -61,6 +61,8 @@ struct GTY(()) ipa_ref_list\n struct ipa_ref * ipa_record_reference (symtab_node,\n \t\t\t\t       symtab_node,\n \t\t\t\t       enum ipa_ref_use, gimple);\n+struct ipa_ref * ipa_maybe_record_reference (symtab_node, tree,\n+\t\t\t\t\t     enum ipa_ref_use, gimple);\n \n void ipa_remove_reference (struct ipa_ref *);\n void ipa_remove_all_references (struct ipa_ref_list *);"}]}