{"sha": "6d2b71997e784ec8fc63de0844c52a113c1482b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQyYjcxOTk3ZTc4NGVjOGZjNjNkZTA4NDRjNTJhMTEzYzE0ODJiNw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2015-02-21T00:06:53Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2015-02-21T00:06:53Z"}, "message": "tree-streamer-in.c (unpack_ts_decl_common_value_fields, [...]): If ACCEL_COMPILER, restrict alignments to absolute_biggest_alignment.\n\n\t* tree-streamer-in.c (unpack_ts_decl_common_value_fields,\n\tunpack_ts_type_common_value_fields): If ACCEL_COMPILER,\n\trestrict alignments to absolute_biggest_alignment.\n\t* config/i386/i386.c (TARGET_ABSOLUTE_BIGGEST_ALIGNMENT):\n\tDefine.\n\t* doc/tm.texi.in (TARGET_ABSOLUTE_BIGGEST_ALIGNMENT): Add.\n\t* doc/tm.texi: Regenerate.\n\t* target.def (absolute_biggest_alignment): New DEFHOOKPOD.\n\nFrom-SVN: r220882", "tree": {"sha": "c6a8b3a34b2171dafac01246049225405321ae9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6a8b3a34b2171dafac01246049225405321ae9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d2b71997e784ec8fc63de0844c52a113c1482b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d2b71997e784ec8fc63de0844c52a113c1482b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d2b71997e784ec8fc63de0844c52a113c1482b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d2b71997e784ec8fc63de0844c52a113c1482b7/comments", "author": null, "committer": null, "parents": [{"sha": "b56ac9d5f41fc799b25397d2236e76c47893e128", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b56ac9d5f41fc799b25397d2236e76c47893e128", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b56ac9d5f41fc799b25397d2236e76c47893e128"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "9febcbd5ffdee82c36f50d4dcc4f0233b5f69e75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d2b71997e784ec8fc63de0844c52a113c1482b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d2b71997e784ec8fc63de0844c52a113c1482b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d2b71997e784ec8fc63de0844c52a113c1482b7", "patch": "@@ -1,3 +1,14 @@\n+2015-02-20  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* tree-streamer-in.c (unpack_ts_decl_common_value_fields,\n+\tunpack_ts_type_common_value_fields): If ACCEL_COMPILER,\n+\trestrict alignments to absolute_biggest_alignment.\n+\t* config/i386/i386.c (TARGET_ABSOLUTE_BIGGEST_ALIGNMENT):\n+\tDefine.\n+\t* doc/tm.texi.in (TARGET_ABSOLUTE_BIGGEST_ALIGNMENT): Add.\n+\t* doc/tm.texi: Regenerate.\n+\t* target.def (absolute_biggest_alignment): New DEFHOOKPOD.\n+\n 2015-02-20  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/64172"}, {"sha": "66200216d3fe7200963daddef2bcb744ea1b9387", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d2b71997e784ec8fc63de0844c52a113c1482b7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d2b71997e784ec8fc63de0844c52a113c1482b7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6d2b71997e784ec8fc63de0844c52a113c1482b7", "patch": "@@ -52131,6 +52131,9 @@ ix86_initialize_bounds (tree var, tree lb, tree ub, tree *stmts)\n #define TARGET_OFFLOAD_OPTIONS \\\n   ix86_offload_options\n \n+#undef TARGET_ABSOLUTE_BIGGEST_ALIGNMENT\n+#define TARGET_ABSOLUTE_BIGGEST_ALIGNMENT 512\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-i386.h\""}, {"sha": "1e755d3a35ecda5154b9d7a2f42510a9d5f88202", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d2b71997e784ec8fc63de0844c52a113c1482b7/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d2b71997e784ec8fc63de0844c52a113c1482b7/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6d2b71997e784ec8fc63de0844c52a113c1482b7", "patch": "@@ -795,7 +795,10 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    rounder than this.\n \n    Pentium+ prefers DFmode values to be aligned to 64 bit boundary\n-   and Pentium Pro XFmode values at 128 bit boundaries.  */\n+   and Pentium Pro XFmode values at 128 bit boundaries.\n+\n+   When increasing the maximum, also update\n+   TARGET_ABSOLUTE_BIGGEST_ALIGNMENT.  */\n \n #define BIGGEST_ALIGNMENT \\\n   (TARGET_AVX512F ? 512 : (TARGET_AVX ? 256 : 128))"}, {"sha": "6f36ec624d2008dcf017d1e48e2caffbd451d7fb", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d2b71997e784ec8fc63de0844c52a113c1482b7/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d2b71997e784ec8fc63de0844c52a113c1482b7/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=6d2b71997e784ec8fc63de0844c52a113c1482b7", "patch": "@@ -1003,6 +1003,12 @@ bits.  Note that this is not the biggest alignment that is supported,\n just the biggest alignment that, when violated, may cause a fault.\n @end defmac\n \n+@deftypevr {Target Hook} HOST_WIDE_INT TARGET_ABSOLUTE_BIGGEST_ALIGNMENT\n+If defined, this target hook specifies the absolute biggest alignment\n+that a type or variable can have on this machine, otherwise,\n+@code{BIGGEST_ALIGNMENT} is used.\n+@end deftypevr\n+\n @defmac MALLOC_ABI_ALIGNMENT\n Alignment, in bits, a C conformant malloc implementation has to\n provide.  If not defined, the default value is @code{BITS_PER_WORD}."}, {"sha": "121c3057ba2e9f179a45850e81df16e053acb4c3", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d2b71997e784ec8fc63de0844c52a113c1482b7/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d2b71997e784ec8fc63de0844c52a113c1482b7/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=6d2b71997e784ec8fc63de0844c52a113c1482b7", "patch": "@@ -957,6 +957,8 @@ bits.  Note that this is not the biggest alignment that is supported,\n just the biggest alignment that, when violated, may cause a fault.\n @end defmac\n \n+@hook TARGET_ABSOLUTE_BIGGEST_ALIGNMENT\n+\n @defmac MALLOC_ABI_ALIGNMENT\n Alignment, in bits, a C conformant malloc implementation has to\n provide.  If not defined, the default value is @code{BITS_PER_WORD}."}, {"sha": "035dece8fa5d615b8e5a452236eebfb9a6e1e395", "filename": "gcc/target.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d2b71997e784ec8fc63de0844c52a113c1482b7/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d2b71997e784ec8fc63de0844c52a113c1482b7/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=6d2b71997e784ec8fc63de0844c52a113c1482b7", "patch": "@@ -1868,6 +1868,13 @@ recorded in the offload function and variable table.\",\n  void, (tree),\n  hook_void_tree)\n \n+DEFHOOKPOD\n+(absolute_biggest_alignment,\n+ \"If defined, this target hook specifies the absolute biggest alignment\\n\\\n+that a type or variable can have on this machine, otherwise,\\n\\\n+@code{BIGGEST_ALIGNMENT} is used.\",\n+ HOST_WIDE_INT, BIGGEST_ALIGNMENT)\n+\n /* Allow target specific overriding of option settings after options have\n   been changed by an attribute or pragma or when it is reset at the\n   end of the code affected by an attribute or pragma.  */"}, {"sha": "b4b648238519fbbe0213f3abd25e67a818e45913", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d2b71997e784ec8fc63de0844c52a113c1482b7/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d2b71997e784ec8fc63de0844c52a113c1482b7/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=6d2b71997e784ec8fc63de0844c52a113c1482b7", "patch": "@@ -247,7 +247,10 @@ unpack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n   DECL_EXTERNAL (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_GIMPLE_REG_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_ALIGN (expr) = (unsigned) bp_unpack_var_len_unsigned (bp);\n-\n+#ifdef ACCEL_COMPILER\n+  if (DECL_ALIGN (expr) > targetm.absolute_biggest_alignment)\n+    DECL_ALIGN (expr) = targetm.absolute_biggest_alignment;\n+#endif\n   if (TREE_CODE (expr) == LABEL_DECL)\n     {\n       EH_LANDING_PAD_NR (expr) = (int) bp_unpack_var_len_unsigned (bp);\n@@ -391,6 +394,10 @@ unpack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n   TYPE_READONLY (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TYPE_PRECISION (expr) = bp_unpack_var_len_unsigned (bp);\n   TYPE_ALIGN (expr) = bp_unpack_var_len_unsigned (bp);\n+#ifdef ACCEL_COMPILER\n+  if (TYPE_ALIGN (expr) > targetm.absolute_biggest_alignment)\n+    TYPE_ALIGN (expr) = targetm.absolute_biggest_alignment;\n+#endif\n   TYPE_ALIAS_SET (expr) = bp_unpack_var_len_int (bp);\n }\n "}]}