{"sha": "d286e1e304ce158464cea88ae2defec0dbce12d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI4NmUxZTMwNGNlMTU4NDY0Y2VhODhhZTJkZWZlYzBkYmNlMTJkNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-02-23T15:19:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-02-23T15:19:17Z"}, "message": "alloc-pool.h (struct allocation_object): Make id member conditional on CHECKING_P again.\n\n2016-02-23  Richard Biener  <rguenther@suse.de>\n\n\t* alloc-pool.h (struct allocation_object): Make id member\n\tconditional on CHECKING_P again.\n\t(get_instance): Adjust.\n\t(base_pool_allocator): Likewise.\n\nFrom-SVN: r233635", "tree": {"sha": "cc64992fdaf261e074681a3e73e3d3f761077bd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc64992fdaf261e074681a3e73e3d3f761077bd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d286e1e304ce158464cea88ae2defec0dbce12d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d286e1e304ce158464cea88ae2defec0dbce12d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d286e1e304ce158464cea88ae2defec0dbce12d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d286e1e304ce158464cea88ae2defec0dbce12d7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f99c355797e5abf81ebad09eaa8ec0e2af224756", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99c355797e5abf81ebad09eaa8ec0e2af224756", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f99c355797e5abf81ebad09eaa8ec0e2af224756"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "54b3f6b5b64410e06b84f8a527daa7b8f874dd5f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d286e1e304ce158464cea88ae2defec0dbce12d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d286e1e304ce158464cea88ae2defec0dbce12d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d286e1e304ce158464cea88ae2defec0dbce12d7", "patch": "@@ -1,3 +1,10 @@\n+2016-02-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* alloc-pool.h (struct allocation_object): Make id member\n+\tconditional on CHECKING_P again.\n+\t(get_instance): Adjust.\n+\t(base_pool_allocator): Likewise.\n+\n 2016-02-23  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* tree-parloops.c (create_parallel_loop, gen_parallel_loop)"}, {"sha": "8ccf089d60c9ab2de2933352b05bc5a64ecf0e06", "filename": "gcc/alloc-pool.h", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d286e1e304ce158464cea88ae2defec0dbce12d7/gcc%2Falloc-pool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d286e1e304ce158464cea88ae2defec0dbce12d7/gcc%2Falloc-pool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.h?ref=d286e1e304ce158464cea88ae2defec0dbce12d7", "patch": "@@ -156,8 +156,10 @@ class base_pool_allocator\n \n   struct allocation_object\n   {\n+#if CHECKING_P\n     /* The ID of alloc pool which the object was allocated from.  */\n     ALLOC_POOL_ID_TYPE id;\n+#endif\n \n     union\n       {\n@@ -172,13 +174,15 @@ class base_pool_allocator\n \tint64_t align_i;\n       } u;\n \n+#if CHECKING_P\n     static inline allocation_object*\n     get_instance (void *data_ptr)\n     {\n       return (allocation_object *)(((char *)(data_ptr))\n \t\t\t\t      - offsetof (allocation_object,\n \t\t\t\t\t\t  u.data));\n     }\n+#endif\n \n     static inline void*\n     get_data (void *instance_ptr)\n@@ -388,7 +392,9 @@ base_pool_allocator <TBlockAllocator>::allocate ()\n       header->next = NULL;\n \n       /* Mark the element to be free.  */\n+#if CHECKING_P\n       ((allocation_object*) block)->id = 0;\n+#endif\n       VALGRIND_DISCARD (VALGRIND_MAKE_MEM_NOACCESS (header,size));\n       m_returned_free_list = header;\n       m_virgin_free_list += m_elt_size;\n@@ -403,7 +409,9 @@ base_pool_allocator <TBlockAllocator>::allocate ()\n   m_elts_free--;\n \n   /* Set the ID for element.  */\n+#if CHECKING_P\n   allocation_object::get_instance (header)->id = m_id;\n+#endif\n   VALGRIND_DISCARD (VALGRIND_MAKE_MEM_UNDEFINED (header, size));\n \n   return (void *)(header);\n@@ -420,16 +428,20 @@ base_pool_allocator <TBlockAllocator>::remove (void *object)\n     {\n       gcc_assert (m_initialized);\n       gcc_assert (object\n-\t      /* Check if we free more than we allocated, which is Bad (TM).  */\n-\t      && m_elts_free < m_elts_allocated\n-\t      /* Check whether the PTR was allocated from POOL.  */\n-\t      && m_id == allocation_object::get_instance (object)->id);\n+\t\t  /* Check if we free more than we allocated.  */\n+\t\t  && m_elts_free < m_elts_allocated);\n+#if CHECKING_P\n+      /* Check whether the PTR was allocated from POOL.  */\n+      gcc_assert (m_id == allocation_object::get_instance (object)->id);\n+#endif\n \n       memset (object, 0xaf, size);\n     }\n \n+#if CHECKING_P \n   /* Mark the element to be free.  */\n   allocation_object::get_instance (object)->id = 0;\n+#endif\n \n   allocation_pool_list *header = new (object) allocation_pool_list;\n   header->next = m_returned_free_list;"}]}