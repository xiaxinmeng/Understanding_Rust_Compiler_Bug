{"sha": "f60ed6be98bde80360b8a61e40ca3d5774f0ea49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYwZWQ2YmU5OGJkZTgwMzYwYjhhNjFlNDBjYTNkNTc3NGYwZWE0OQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-06-29T09:10:04Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-06-29T09:10:04Z"}, "message": "crtdll.h: Define EXTRA_OS_CPP_BUILTINS.\n\n\t* config/i386/crtdll.h: Define EXTRA_OS_CPP_BUILTINS.\n\tDon't use CPP_PREDEFINES.\n\t* config/i386/cygwin.h (EXTRA_OS_CPP_BUILTINS): New.\n\tUsed TARGET_OS_CPP_BUILTINS in preference to CPP_PREDEFINES.\n\t* config/i386/djgpp.h, config/i386/i386-coff.h,\n\tconfig/i386/i386-interix.h, config/i386/i386-interix3.h,\n\tconfig/i386/lynx-ng.h, config/i386/lynx.h, config/i386/mingw32.h,\n\tconfig/i386/openbsd.h, config/i386/ptx4-i.h, config/i386/sysv3.h,\n\tconfig/i386/uwin.h: Similarly.\n\nFrom-SVN: r55101", "tree": {"sha": "b417396258a07532ce868c3671f51d726d8c7f9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b417396258a07532ce868c3671f51d726d8c7f9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f60ed6be98bde80360b8a61e40ca3d5774f0ea49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f60ed6be98bde80360b8a61e40ca3d5774f0ea49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f60ed6be98bde80360b8a61e40ca3d5774f0ea49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/comments", "author": null, "committer": null, "parents": [{"sha": "ddd9819e57b6ab14a95d75e831bf768dca27a19c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd9819e57b6ab14a95d75e831bf768dca27a19c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddd9819e57b6ab14a95d75e831bf768dca27a19c"}], "stats": {"total": 243, "additions": 158, "deletions": 85}, "files": [{"sha": "d2775fd9751368cfe2f717dc38dbc7b512c1d39d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f60ed6be98bde80360b8a61e40ca3d5774f0ea49", "patch": "@@ -1,3 +1,15 @@\n+2002-06-29  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* config/i386/crtdll.h: Define EXTRA_OS_CPP_BUILTINS.\n+\tDon't use CPP_PREDEFINES.\n+\t* config/i386/cygwin.h (EXTRA_OS_CPP_BUILTINS): New.\n+\tUsed TARGET_OS_CPP_BUILTINS in preference to CPP_PREDEFINES.\n+\t* config/i386/djgpp.h, config/i386/i386-coff.h,\n+\tconfig/i386/i386-interix.h, config/i386/i386-interix3.h,\n+\tconfig/i386/lynx-ng.h, config/i386/lynx.h, config/i386/mingw32.h,\n+\tconfig/i386/openbsd.h, config/i386/ptx4-i.h, config/i386/sysv3.h,\n+\tconfig/i386/uwin.h: Similarly.\n+\n 2002-06-29  Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n \n         * c4x.h: (TARGET_CPU_CPP_BUILTINS): Check flag_inline_functions and"}, {"sha": "dab60c19ca2380ab46e5ac684a3f2596107f9ed7", "filename": "gcc/config/i386/crtdll.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Fcrtdll.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Fcrtdll.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcrtdll.h?ref=f60ed6be98bde80360b8a61e40ca3d5774f0ea49", "patch": "@@ -20,10 +20,9 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-D_WIN32 -DWIN32 \\\n-  -D__MINGW32__=0.2 -DWINNT  -D_X86_=1 \\\n-  -Asystem=winnt\"\n+#undef EXTRA_OS_CPP_BUILTINS\n+#define EXTRA_OS_CPP_BUILTINS() \\\n+  do { builtin_define (\"__MINGW32__=0.2\"); } while (0)\n \n #undef LIBGCC_SPEC\n #define LIBGCC_SPEC \\"}, {"sha": "e849c9b800d48b18cc3b72047907ec980208c06b", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=f60ed6be98bde80360b8a61e40ca3d5774f0ea49", "patch": "@@ -54,8 +54,23 @@ Boston, MA 02111-1307, USA.  */\n { \"no-nop-fun-dllimport\", -MASK_NOP_FUN_DLLIMPORT, \"\" },\t\\\n { \"threads\",\t\t  0, N_(\"Use Mingw-specific thread support\") },\n \n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-D_X86_=1 -Asystem=winnt\"\n+#define MAYBE_UWIN_CPP_BUILTINS() /* Nothing.  */\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+\tbuiltin_define (\"_X86_=1\");\t\t\t\t\t\\\n+\tbuiltin_assert (\"system=winnt\");\t\t\t\t\\\n+\tbuiltin_define (\"__stdcall=__attribute__((__stdcall__))\");\t\\\n+\tbuiltin_define (\"__cdecl=__attribute__((__cdecl__))\");\t\t\\\n+\tbuiltin_define (\"__declspec(x)=__attribute__((x))\");\t\t\\\n+\tif (!flag_iso)\t\t\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\t\\\n+\t    builtin_define (\"_stdcall=__attribute__((__stdcall__))\");\t\\\n+\t    builtin_define (\"_cdecl=__attribute__((__cdecl__))\");\t\\\n+\t  }\t\t\t\t\t\t\t\t\\\n+\tMAYBE_UWIN_CPP_BUILTINS ();\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n \n #ifdef CROSS_COMPILE\n #define CYGWIN_INCLUDES \"%{!nostdinc:-idirafter \" CYGWIN_CROSS_DIR \"/include}\"\n@@ -97,12 +112,6 @@ Boston, MA 02111-1307, USA.  */\n \n #undef CPP_SPEC\n #define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} \\\n-  -D__stdcall=__attribute__((__stdcall__)) \\\n-  -D__cdecl=__attribute__((__cdecl__)) \\\n-  %{!ansi:-D_stdcall=__attribute__((__stdcall__)) \\\n-    -D_cdecl=__attribute__((__cdecl__))} \\\n-  -D__declspec(x)=__attribute__((x)) \\\n-  -D__i386__ -D__i386 \\\n   %{mno-win32:%{mno-cygwin: %emno-cygwin and mno-win32 are not compatible}} \\\n   %{mno-cygwin:-D__MSVCRT__ -D__MINGW32__ %{mthreads:-D_MT} \"\\\n     MINGW_INCLUDES \"} \\"}, {"sha": "3afafd0ae3c7e81720482898f954c18bc0572d29", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=f60ed6be98bde80360b8a61e40ca3d5774f0ea49", "patch": "@@ -82,13 +82,18 @@ Boston, MA 02111-1307, USA.  */\n         (((NAME)[0] == '/') || ((NAME)[0] == '\\\\') || \\\n         (((NAME)[0] >= 'A') && ((NAME)[0] <= 'z') && ((NAME)[1] == ':')))\n \n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-D__MSDOS__ -D__GO32__ -Asystem=msdos\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+\tbuiltin_define_std (\"MSDOS\");\t\t\\\n+\tbuiltin_define_std (\"GO32\");\t\t\\\n+\tbuiltin_assert (\"system=msdos\");\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n \n /* Include <sys/version.h> so __DJGPP__ and __DJGPP_MINOR__ are defined.  */\n #undef CPP_SPEC\n #define CPP_SPEC \"-remap %{posix:-D_POSIX_SOURCE} \\\n-  %{!ansi:%{!std=c*:%{!std=i*:-DMSDOS}}} %{!ansi:%{!std=c*:%{!std=i*:-DGO32}}} \\\n   -imacros %s../include/sys/version.h\"\n \n /* We need to override link_command_spec in gcc.c so support -Tdjgpp.djl."}, {"sha": "d4d155323e5672ef1c84323e678e2660c7203e2c", "filename": "gcc/config/i386/i386-coff.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Fi386-coff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Fi386-coff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-coff.h?ref=f60ed6be98bde80360b8a61e40ca3d5774f0ea49", "patch": "@@ -21,12 +21,9 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n \n-#define TARGET_VERSION fprintf (stderr, \" (80386, COFF BSD syntax)\"); \n+#define TARGET_VERSION fprintf (stderr, \" (80386, COFF BSD syntax)\");\n \n-/* Specify predefined symbols in preprocessor.  */\n-\n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"\"\n+#define TARGET_OS_CPP_BUILTINS() /* Sweet FA.  */\n \n /* We want to be able to get DBX debugging information via -gstabs.  */\n "}, {"sha": "6d74150d704a2f4b8653f8d86a4b1cdb5213190b", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=f60ed6be98bde80360b8a61e40ca3d5774f0ea49", "patch": "@@ -53,30 +53,37 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_LOAD_ADDR(loc, reg)   \"     leal \" #loc \",\" #reg \"\\n\"\n \n /* cpp handles __STDC__ */\n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \" \\\n-  -D__INTERIX \\\n-  -D__OPENNT \\\n-  -D_M_IX86=300 -D_X86_=1 \\\n-  -D__stdcall=__attribute__((__stdcall__)) \\\n-  -D__cdecl=__attribute__((__cdecl__)) \\\n-  -D__declspec(x)=__attribute__((x)) \\\n-  -Asystem=unix -Asystem=interix\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__INTERIX\");\t\t\t\t\t\\\n+\tbuiltin_define (\"__OPENNT\");\t\t\t\t\t\\\n+\tbuiltin_define (\"_M_IX86=300\");\t\t\t\t\t\\\n+\tbuiltin_define (\"_X86_=1\");\t\t\t\t\t\\\n+\tbuiltin_define (\"__stdcall=__attribute__((__stdcall__))\");\t\\\n+\tbuiltin_define (\"__cdecl=__attribute__((__cdecl__))\");\t\t\\\n+\tbuiltin_define (\"__declspec(x)=__attribute__((x))\");\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\t\t\t\\\n+\tbuiltin_assert (\"system=interix\");\t\t\t\t\\\n+\tif (preprocessing_asm_p ())\t\t\t\t\t\\\n+\t  builtin_define_std (\"LANGUAGE_ASSEMBLY\");\t\t\t\\\n+\telse\t\t\t\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\t\\\n+\t     builtin_define_std (\"LANGUAGE_C\");\t\t\t\t\\\n+\t     if (c_language == clk_cplusplus)\t\t\t\t\\\n+\t       builtin_define_std (\"LANGUAGE_C_PLUS_PLUS\");\t\t\\\n+\t     else if (c_language == clk_objective_c)\t\t\t\\\n+\t       builtin_define_std (\"LANGUAGE_OBJECTIVE_C\");\t\t\\\n+\t  } \t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n \n #undef CPP_SPEC\n /* Write out the correct language type definition for the header files.  \n    Unless we have assembler language, write out the symbols for C.\n    mieee is an Alpha specific variant.  Cross polination a bad idea.\n    */\n-#define CPP_SPEC \"\\\n-%{!.S:\t-D__LANGUAGE_C__ -D__LANGUAGE_C %{!ansi:-DLANGUAGE_C}}  \\\n-%{.S:\t-D__LANGUAGE_ASSEMBLY__ -D__LANGUAGE_ASSEMBLY %{!ansi:-DLANGUAGE_ASSEMBLY}} \\\n-%{.cc:\t-D__LANGUAGE_C_PLUS_PLUS__ -D__LANGUAGE_C_PLUS_PLUS -D__cplusplus} \\\n-%{.cxx:\t-D__LANGUAGE_C_PLUS_PLUS__ -D__LANGUAGE_C_PLUS_PLUS -D__cplusplus} \\\n-%{.C:\t-D__LANGUAGE_C_PLUS_PLUS__ -D__LANGUAGE_C_PLUS_PLUS -D__cplusplus} \\\n-%{.m:\t-D__LANGUAGE_OBJECTIVE_C__ -D__LANGUAGE_OBJECTIVE_C} \\\n--remap \\\n-%{posix:-D_POSIX_SOURCE} \\\n+#define CPP_SPEC \"-remap %{posix:-D_POSIX_SOURCE} \\\n -isystem %$INTERIX_ROOT/usr/include\"\n \n #define TARGET_VERSION fprintf (stderr, \" (i386 Interix)\");"}, {"sha": "aafe57fa24d987fc613b4ec53fbc13678e418e9d", "filename": "gcc/config/i386/i386-interix3.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Fi386-interix3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Fi386-interix3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix3.h?ref=f60ed6be98bde80360b8a61e40ca3d5774f0ea49", "patch": "@@ -20,12 +20,5 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #undef CPP_SPEC\n-#define CPP_SPEC \"\\\n-%{!.S:\t-D__LANGUAGE_C__ -D__LANGUAGE_C %{!ansi:-DLANGUAGE_C}}  \\\n-%{.S:\t-D__LANGUAGE_ASSEMBLY__ -D__LANGUAGE_ASSEMBLY %{!ansi:-DLANGUAGE_ASSEMBLY}} \\\n-%{.cc:\t-D__LANGUAGE_C_PLUS_PLUS__ -D__LANGUAGE_C_PLUS_PLUS -D__cplusplus} \\\n-%{.cxx:\t-D__LANGUAGE_C_PLUS_PLUS__ -D__LANGUAGE_C_PLUS_PLUS -D__cplusplus} \\\n-%{.C:\t-D__LANGUAGE_C_PLUS_PLUS__ -D__LANGUAGE_C_PLUS_PLUS -D__cplusplus} \\\n-%{.m:\t-D__LANGUAGE_OBJECTIVE_C__ -D__LANGUAGE_OBJECTIVE_C} \\\n-%{posix:-D_POSIX_SOURCE}\"\n+#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE}\"\n "}, {"sha": "08fa60f430ca4300f8e46ff89990f0f279104908", "filename": "gcc/config/i386/lynx-ng.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Flynx-ng.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Flynx-ng.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flynx-ng.h?ref=f60ed6be98bde80360b8a61e40ca3d5774f0ea49", "patch": "@@ -20,9 +20,17 @@ Boston, MA 02111-1307, USA.  */\n \n #define TARGET_VERSION fprintf (stderr, \" (80386, LYNX BSD syntax)\"); \n \n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dunix -DI386 -DLynx -DIBITS32 \\\n-  -Asystem=unix -Asystem=lynx\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+\tbuiltin_define_std (\"unix\");\t\t\\\n+\tbuiltin_define_std (\"I386\");\t\t\\\n+\tbuiltin_define_std (\"Lynx\");\t\t\\\n+\tbuiltin_define_std (\"IBITS32\");\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\\\n+\tbuiltin_assert (\"system=lynx\");\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n \n /* Provide required defaults for linker switches.  */\n "}, {"sha": "7835f2713f276cbb1cab6f5446293d27fc52daa7", "filename": "gcc/config/i386/lynx.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flynx.h?ref=f60ed6be98bde80360b8a61e40ca3d5774f0ea49", "patch": "@@ -20,8 +20,16 @@ Boston, MA 02111-1307, USA.  */\n \n #define TARGET_VERSION fprintf (stderr, \" (80386, LYNX BSD syntax)\"); \n \n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-DI386 -DLynx -DIBITS32 -Asystem=unix -Asystem=lynx\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+\tbuiltin_define_std (\"I386\");\t\t\\\n+\tbuiltin_define_std (\"Lynx\");\t\t\\\n+\tbuiltin_define_std (\"IBITS32\");\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\\\n+\tbuiltin_assert (\"system=lynx\");\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n \n /* The prefix to add to user-visible assembler symbols.  */\n "}, {"sha": "6b367eba314de4ff8f87e0690d73ec6701d4f62d", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=f60ed6be98bde80360b8a61e40ca3d5774f0ea49", "patch": "@@ -32,13 +32,35 @@ Boston, MA 02111-1307, USA.  */\n \n #define TARGET_EXECUTABLE_SUFFIX \".exe\"\n \n-/* Please keep changes to CPP_PREDEFINES in sync with i386/crtdll. The\n-   only difference between the two should be __MSVCRT__ needed to \n-   distinguish MSVC from CRTDLL runtime in mingw headers.  */\n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-D_WIN32 -D__WIN32 -D__WIN32__ -DWIN32 \\\n-  -D__MINGW32__ -D__MSVCRT__ -DWINNT -D_X86_=1 \\\n-  -Asystem=winnt\"\n+/* See i386/crtdll.h for an altervative definition.  */\n+#define EXTRA_OS_CPP_BUILTINS()\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      builtin_define (\"__MSVCRT__\");\t\t\t\t\\\n+      builtin_define (\"__MINGW32__\");\t\t\t   \t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef TARGET_OS_CPP_BUILTINS\t/* From cygwin.h.  */\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+\tbuiltin_define (\"_WIN32\");\t\t\t\t\t\\\n+\tbuiltin_define_std (\"WIN32\");\t\t\t\t\t\\\n+\tbuiltin_define_std (\"WINNT\");\t\t\t\t\t\\\n+\tbuiltin_define (\"_X86_=1\");\t\t\t\t\t\\\n+\tbuiltin_define (\"__stdcall=__attribute__((__stdcall__))\");\t\\\n+\tbuiltin_define (\"__cdecl=__attribute__((__cdecl__))\");\t\t\\\n+\tbuiltin_define (\"__declspec(x)=__attribute__((x))\");\t\t\\\n+\tif (!flag_iso)\t\t\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\t\\\n+\t    builtin_define (\"_stdcall=__attribute__((__stdcall__))\");\t\\\n+\t    builtin_define (\"_cdecl=__attribute__((__cdecl__))\");\t\\\n+\t  }\t\t\t\t\t\t\t\t\\\n+\tEXTRA_OS_CPP_BUILTINS ();\t\t\t\t\t\\\n+\tbuiltin_assert (\"system=winnt\");\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n \n /* Specific a different directory for the standard include files.  */\n #undef STANDARD_INCLUDE_DIR\n@@ -47,14 +69,7 @@ Boston, MA 02111-1307, USA.  */\n #define STANDARD_INCLUDE_COMPONENT \"MINGW\"\n \n #undef CPP_SPEC\n-#define CPP_SPEC \\\n-  \"%{posix:-D_POSIX_SOURCE} %{mthreads:-D_MT} \\\n-  -D__stdcall=__attribute__((__stdcall__)) \\\n-  -D__cdecl=__attribute__((__cdecl__)) \\\n-  %{!ansi:-D_stdcall=__attribute__((__stdcall__)) \\\n-    -D_cdecl=__attribute__((__cdecl__))} \\\n-  -D__declspec(x)=__attribute__((x))\"\n-\n+#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{mthreads:-D_MT}\"\n \n /* For Windows applications, include more libraries, but always include\n    kernel32.  */"}, {"sha": "8f54026539b001a6a3c5188b529820eacaeced36", "filename": "gcc/config/i386/openbsd.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fopenbsd.h?ref=f60ed6be98bde80360b8a61e40ca3d5774f0ea49", "patch": "@@ -26,9 +26,16 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_SUBTARGET_DEFAULT \\\n   (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_NO_FANCY_MATH_387)\n \n-/* Run-time target specifications */\n-#define CPP_PREDEFINES \"-D__unix__ -D__OpenBSD__ \\\n- -Asystem=unix -Asystem=bsd -Asystem=OpenBSD\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__unix__\");\t\t\\\n+\tbuiltin_define (\"__OpenBSD__\");\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\\\n+\tbuiltin_assert (\"system=bsd\");\t\t\\\n+\tbuiltin_assert (\"system=OpenBSD\");\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n \n /* Layout of source language data types.  */\n "}, {"sha": "a7d571067628baf9bdd9903a10bae3a2fa52baa6", "filename": "gcc/config/i386/ptx4-i.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Fptx4-i.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Fptx4-i.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fptx4-i.h?ref=f60ed6be98bde80360b8a61e40ca3d5774f0ea49", "patch": "@@ -33,11 +33,15 @@ Boston, MA 02111-1307, USA.  */\n   (TYPE_MODE (TYPE) == BLKmode \\\n    || (VECTOR_MODE_P (TYPE_MODE (TYPE)) && int_size_in_bytes (TYPE) == 8))\n \n-/* Define which macros to predefine.  _SEQUENT_ is our extension.  */\n-/* This used to define X86, but james@bigtex.cactus.org says that\n-   is supposed to be defined optionally by user programs--not by default.  */\n-#define CPP_PREDEFINES \\\n-  \"-Dunix -D_SEQUENT_ -Asystem=unix -Asystem=ptx4\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+\tbuiltin_define_std (\"unix\");\t\t\\\n+\tbuiltin_define (\"_SEQUENT_\");\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\\\n+\tbuiltin_assert (\"system=ptx4\");\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n \n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(n)  svr4_dbx_register_map[n]"}, {"sha": "67194f4acc57811bf0724a841d3f0de6420e031d", "filename": "gcc/config/i386/sysv3.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Fsysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Fsysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv3.h?ref=f60ed6be98bde80360b8a61e40ca3d5774f0ea49", "patch": "@@ -32,7 +32,13 @@ Boston, MA 02111-1307, USA.  */\n \n /* Specify predefined symbols in preprocessor.  */\n \n-#define CPP_PREDEFINES \"-Dunix -Asystem=svr3\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+\tbuiltin_define_std (\"unix\");\t\t\\\n+\tbuiltin_assert (\"system=svr3\");\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n \n #define CPP_SPEC \"%{posix:-D_POSIX_SOURCE}\"\n "}, {"sha": "121051064e4f7dd4ed567ced835fd8f38ec5ed07", "filename": "gcc/config/i386/uwin.h", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Fuwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60ed6be98bde80360b8a61e40ca3d5774f0ea49/gcc%2Fconfig%2Fi386%2Fuwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fuwin.h?ref=f60ed6be98bde80360b8a61e40ca3d5774f0ea49", "patch": "@@ -30,16 +30,19 @@ Boston, MA 02111-1307, USA.  */\n #undef MD_STARTFILE_PREFIX\n #define MD_STARTFILE_PREFIX \"/usr/gnu/lib/\"\n \n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-D_WIN32 -D__WIN32__ \\\n-  -D_UWIN -DWINNT  -D_X86_=1 -D__STDC__=1 \\\n-  -D__UWIN__ -D__MSVCRT__ \\\n-  -D_STD_INCLUDE_DIR=mingw32 \\\n-  -D__stdcall=__attribute__((__stdcall__)) \\\n-  _D_stdcall=__attribute__((__stdcall__)) \\\n-  -D__cdecl=__attribute__((__cdecl__)) \\\n-  -D__declspec(x)=__attribute__((x)) \\\n-  -Asystem=winnt\"\n+#undef MAYBE_UWIN_CPP_BUILTINS\n+#define MAYBE_UWIN_CPP_BUILTINS()\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+\tbuiltin_define_std (\"WINNT\");\t\t\t\\\n+\tbuiltin_define (\"_WIN32\");\t\t\t\\\n+\tbuiltin_define (\"__WIN32__\");\t\t\t\\\n+\tbuiltin_define (\"_UWIN\");\t\t\t\\\n+\tbuiltin_define (\"__UWIN__\");\t\t\t\\\n+\tbuiltin_define (\"__MSVCRT__\");\t\t\t\\\n+\tbuiltin_define (\"_STD_INCLUDE_DIR=mingw32\");\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n \n #undef CPP_SPEC\n #define CPP_SPEC \"-remap %{posix:-D_POSIX_SOURCE} \\"}]}