{"sha": "587870645c87fd2c898c6ef9e4048f04cadbf79f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg3ODcwNjQ1Yzg3ZmQyYzg5OGM2ZWY5ZTQwNDhmMDRjYWRiZjc5Zg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-07-30T18:59:56Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-07-30T18:59:56Z"}, "message": "* i386.md (*lea_general_[123]) New insns and splits.\n\n\t(addsi3 to lea splitter): Handle other modes too.\n\t(shlsi3 to lea splitter): Likewise.\n\t(addhi_1_lea, shlhi_1_lea): New patterns.\n\t(addhi_1, shlhi_1): Conditionize by PARTIAL_REG_STALL.\n\nFrom-SVN: r35351", "tree": {"sha": "5c77df3c7f1a3b16186f59f8a8bf96e45a6bca95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c77df3c7f1a3b16186f59f8a8bf96e45a6bca95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/587870645c87fd2c898c6ef9e4048f04cadbf79f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/587870645c87fd2c898c6ef9e4048f04cadbf79f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/587870645c87fd2c898c6ef9e4048f04cadbf79f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/587870645c87fd2c898c6ef9e4048f04cadbf79f/comments", "author": null, "committer": null, "parents": [{"sha": "8acb2f2414c3026135f0d6f3e3ce91822c3c8459", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8acb2f2414c3026135f0d6f3e3ce91822c3c8459", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8acb2f2414c3026135f0d6f3e3ce91822c3c8459"}], "stats": {"total": 369, "additions": 347, "deletions": 22}, "files": [{"sha": "bbbfc0a15d5253a16cb14d1dad237aaca8232b34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587870645c87fd2c898c6ef9e4048f04cadbf79f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587870645c87fd2c898c6ef9e4048f04cadbf79f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=587870645c87fd2c898c6ef9e4048f04cadbf79f", "patch": "@@ -1,3 +1,11 @@\n+Sun Jul 30 20:58:34 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (*lea_general_[123]) New insns and splits.\n+\t(addsi3 to lea splitter): Handle other modes too.\n+\t(shlsi3 to lea splitter): Likewise.\n+\t(addhi_1_lea, shlhi_1_lea): New patterns.\n+\t(addhi_1, shlhi_1): Conditionize by PARTIAL_REG_STALL.\n+\n Sun Jul 30 20:51:25 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* recog.c (general_operand, nonimmediate_operand): Accept"}, {"sha": "eecb151db8aefd46605f369f622d17327555685b", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 339, "deletions": 22, "changes": 361, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587870645c87fd2c898c6ef9e4048f04cadbf79f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587870645c87fd2c898c6ef9e4048f04cadbf79f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=587870645c87fd2c898c6ef9e4048f04cadbf79f", "patch": "@@ -3740,6 +3740,102 @@\n   [(set_attr \"type\" \"lea\")\n    (set_attr \"mode\" \"SI\")])\n \n+;; The lea patterns for non-Pmodes needs to be matched by several\n+;; insns converted to real lea by splitters.\n+\n+(define_insn_and_split \"*lea_general_1\"\n+  [(set (match_operand 0 \"register_operand\" \"=r\")\n+\t(plus (plus (match_operand 1 \"register_operand\" \"r\")\n+\t\t    (match_operand 2 \"register_operand\" \"r\"))\n+\t      (match_operand 3 \"immediate_operand\" \"i\")))]\n+  \"(GET_MODE (operands[0]) == QImode || GET_MODE (operands[0]) == HImode)\n+   && (!TARGET_PARTIAL_REG_STALL || optimize_size)\n+   && GET_MODE (operands[0]) == GET_MODE (operands[1])\n+   && GET_MODE (operands[0]) == GET_MODE (operands[2])\n+   && (GET_MODE (operands[0]) == GET_MODE (operands[3])\n+       || GET_MODE (operands[3]) == VOIDmode)\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  \"\n+{\n+  rtx pat;\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = gen_lowpart (Pmode, operands[1]);\n+  operands[2] = gen_lowpart (Pmode, operands[2]);\n+  operands[3] = gen_lowpart (Pmode, operands[3]);\n+  pat = gen_rtx_PLUS (Pmode, gen_rtx_PLUS (Pmode, operands[1], operands[2]),\n+  \t\t      operands[3]);\n+  if (Pmode != SImode)\n+    pat = gen_rtx_SUBREG (SImode, pat, 0);\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], pat));\n+  DONE;\n+}\"\n+  [(set_attr \"type\" \"lea\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn_and_split \"*lea_general_2\"\n+  [(set (match_operand 0 \"register_operand\" \"=r\")\n+\t(plus (mult (match_operand 1 \"register_operand\" \"r\")\n+\t\t    (match_operand 2 \"const248_operand\" \"i\"))\n+\t      (match_operand 3 \"nonmemory_operand\" \"ri\")))]\n+  \"(GET_MODE (operands[0]) == QImode || GET_MODE (operands[0]) == HImode)\n+   && (!TARGET_PARTIAL_REG_STALL || optimize_size)\n+   && GET_MODE (operands[0]) == GET_MODE (operands[1])\n+   && (GET_MODE (operands[0]) == GET_MODE (operands[3])\n+       || GET_MODE (operands[3]) == VOIDmode)\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  \"\n+{\n+  rtx pat;\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = gen_lowpart (Pmode, operands[1]);\n+  operands[3] = gen_lowpart (Pmode, operands[3]);\n+  pat = gen_rtx_PLUS (Pmode, gen_rtx_MULT (Pmode, operands[1], operands[2]),\n+  \t\t      operands[3]);\n+  if (Pmode != SImode)\n+    pat = gen_rtx_SUBREG (SImode, pat, 0);\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], pat));\n+  DONE;\n+}\"\n+  [(set_attr \"type\" \"lea\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn_and_split \"*lea_general_3\"\n+  [(set (match_operand 0 \"register_operand\" \"=r\")\n+\t(plus (plus (mult (match_operand 1 \"register_operand\" \"r\")\n+\t\t\t  (match_operand 2 \"const248_operand\" \"i\"))\n+\t\t    (match_operand 3 \"register_operand\" \"r\"))\n+\t      (match_operand 4 \"immediate_operand\" \"i\")))]\n+  \"(GET_MODE (operands[0]) == QImode || GET_MODE (operands[0]) == HImode)\n+   && (!TARGET_PARTIAL_REG_STALL || optimize_size)\n+   && GET_MODE (operands[0]) == GET_MODE (operands[1])\n+   && GET_MODE (operands[0]) == GET_MODE (operands[3])\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  \"\n+{\n+  rtx pat;\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = gen_lowpart (Pmode, operands[1]);\n+  operands[3] = gen_lowpart (Pmode, operands[3]);\n+  operands[4] = gen_lowpart (Pmode, operands[4]);\n+  pat = gen_rtx_PLUS (Pmode,\n+  \t\t      gen_rtx_PLUS (Pmode, gen_rtx_MULT (Pmode, operands[1],\n+\t\t      \t\t\t\t\t operands[2]),\n+\t\t\t\t    operands[3]),\n+  \t\t      operands[4]);\n+  if (Pmode != SImode)\n+    pat = gen_rtx_SUBREG (SImode, pat, 0);\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], pat));\n+  DONE;\n+}\"\n+  [(set_attr \"type\" \"lea\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"*addsi_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,rm,r\")\n \t(plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,r\")\n@@ -3796,16 +3892,29 @@\n \n ;; Convert lea to the lea pattern to avoid flags dependency.\n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t (match_operand:SI 2 \"nonmemory_operand\" \"\")))\n+  [(set (match_operand 0 \"register_operand\" \"\")\n+\t(plus (match_operand 1 \"register_operand\" \"\")\n+              (match_operand 2 \"nonmemory_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"reload_completed\n-   && true_regnum (operands[0]) != true_regnum (operands[1])\"\n-  [(set (match_dup 0)\n-\t(plus:SI (match_dup 1)\n-\t\t (match_dup 2)))]\n-  \"\")\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  \"\n+{\n+  rtx pat;\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  /* In -fPIC mode the constructs like (const (unspec [symbol_ref]))\n+     may confuse gen_lowpart.  */\n+  if (GET_MODE (operands[0]) != Pmode)\n+    {\n+      operands[1] = gen_lowpart (Pmode, operands[1]);\n+      operands[2] = gen_lowpart (Pmode, operands[2]);\n+    }\n+  pat = gen_rtx_PLUS (Pmode, operands[1], operands[2]);\n+  if (Pmode != SImode)\n+    pat = gen_rtx_SUBREG (SImode, pat, 0);\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], pat));\n+  DONE;\n+}\")\n \n (define_insn \"*addsi_2\"\n   [(set (reg 17)\n@@ -3883,12 +3992,57 @@\n ;; type optimizations enabled by define-splits.  This is not important\n ;; for PII, and in fact harmful because of partial register stalls.\n \n+(define_insn \"*addhi_1_lea\"\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r,r\")\n+\t(plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,r\")\n+\t\t (match_operand:HI 2 \"general_operand\" \"ri,rm,rni\")))\n+   (clobber (reg:CC 17))]\n+  \"!TARGET_PARTIAL_REG_STALL\n+   && ix86_binary_operator_ok (PLUS, HImode, operands)\"\n+  \"*\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_LEA:\n+      return \\\"#\\\";\n+    case TYPE_INCDEC:\n+      if (operands[2] == const1_rtx)\n+\treturn \\\"inc{w}\\\\t%0\\\";\n+      else if (operands[2] == constm1_rtx\n+\t       || (GET_CODE (operands[2]) == CONST_INT\n+\t\t   && INTVAL (operands[2]) == 65535))\n+\treturn \\\"dec{w}\\\\t%0\\\";\n+      abort();\n+\n+    default:\n+      /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n+\t Exceptions: -128 encodes smaller than 128, so swap sign and op.  */\n+      if (GET_CODE (operands[2]) == CONST_INT\n+          && (INTVAL (operands[2]) == 128\n+\t      || (INTVAL (operands[2]) < 0\n+\t\t  && INTVAL (operands[2]) != -128)))\n+\t{\n+\t  operands[2] = GEN_INT (-INTVAL (operands[2]));\n+\t  return \\\"sub{w}\\\\t{%2, %0|%0, %2}\\\";\n+\t}\n+      return \\\"add{w}\\\\t{%2, %0|%0, %2}\\\";\n+    }\n+}\"\n+  [(set (attr \"type\")\n+     (if_then_else (eq_attr \"alternative\" \"2\")\n+\t(const_string \"lea\")\n+\t(if_then_else (match_operand:HI 2 \"incdec_operand\" \"\")\n+\t   (const_string \"incdec\")\n+\t   (const_string \"alu\"))))\n+   (set_attr \"mode\" \"HI,HI,SI\")])\n+\n (define_insn \"*addhi_1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r\")\n \t(plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t (match_operand:HI 2 \"general_operand\" \"ri,rm\")))\n    (clobber (reg:CC 17))]\n-  \"ix86_binary_operator_ok (PLUS, HImode, operands)\"\n+  \"TARGET_PARTIAL_REG_STALL\n+   && ix86_binary_operator_ok (PLUS, HImode, operands)\"\n   \"*\n {\n   switch (get_attr_type (insn))\n@@ -3986,12 +4140,64 @@\n   \"ix86_expand_binary_operator (PLUS, QImode, operands); DONE;\")\n \n ;; %%% Potential partial reg stall on alternative 2.  What to do?\n+(define_insn \"*addqi_1_lea\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,r,r\")\n+\t(plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0,r\")\n+\t\t (match_operand:QI 2 \"general_operand\" \"qn,qmn,rn,rn\")))\n+   (clobber (reg:CC 17))]\n+  \"!TARGET_PARTIAL_REG_STALL\n+   && ix86_binary_operator_ok (PLUS, QImode, operands)\"\n+  \"*\n+{\n+  int widen = (which_alternative == 2);\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_LEA:\n+      return \\\"#\\\";\n+    case TYPE_INCDEC:\n+      if (operands[2] == const1_rtx)\n+\treturn widen ? \\\"inc{l}\\\\t%k0\\\" : \\\"inc{b}\\\\t%0\\\";\n+      else if (operands[2] == constm1_rtx\n+\t       || (GET_CODE (operands[2]) == CONST_INT\n+\t\t   && INTVAL (operands[2]) == 255))\n+\treturn widen ? \\\"dec{l}\\\\t%k0\\\" : \\\"dec{b}\\\\t%0\\\";\n+      abort();\n+\n+    default:\n+      /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n+\t Exceptions: -128 encodes smaller than 128, so swap sign and op.  */\n+      if (GET_CODE (operands[2]) == CONST_INT\n+          && (INTVAL (operands[2]) == 128\n+\t      || (INTVAL (operands[2]) < 0\n+\t\t  && INTVAL (operands[2]) != -128)))\n+\t{\n+\t  operands[2] = GEN_INT (-INTVAL (operands[2]));\n+\t  if (widen)\n+\t    return \\\"sub{l}\\\\t{%2, %k0|%k0, %2}\\\";\n+\t  else\n+\t    return \\\"sub{b}\\\\t{%2, %0|%0, %2}\\\";\n+\t}\n+      if (widen)\n+        return \\\"add{l}\\\\t{%k2, %k0|%k0, %k2}\\\";\n+      else\n+        return \\\"add{b}\\\\t{%2, %0|%0, %2}\\\";\n+    }\n+}\"\n+  [(set (attr \"type\")\n+     (if_then_else (eq_attr \"alternative\" \"3\")\n+\t(const_string \"lea\")\n+\t(if_then_else (match_operand:HI 2 \"incdec_operand\" \"\")\n+\t   (const_string \"incdec\")\n+\t   (const_string \"alu\"))))\n+   (set_attr \"mode\" \"HI,HI,SI,SI\")])\n+\n (define_insn \"*addqi_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,r\")\n \t(plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0\")\n \t\t (match_operand:QI 2 \"general_operand\" \"qn,qmn,rn\")))\n    (clobber (reg:CC 17))]\n-  \"ix86_binary_operator_ok (PLUS, QImode, operands)\"\n+  \"TARGET_PARTIAL_REG_STALL\n+   && ix86_binary_operator_ok (PLUS, QImode, operands)\"\n   \"*\n {\n   int widen = (which_alternative == 2);\n@@ -6279,16 +6485,24 @@\n \n ;; Convert lea to the lea pattern to avoid flags dependency.\n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(ashift:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:QI 2 \"immediate_operand\" \"\")))\n+  [(set (match_operand 0 \"register_operand\" \"\")\n+\t(ashift (match_operand 1 \"register_operand\" \"\")\n+                (match_operand:QI 2 \"const_int_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"reload_completed\n-   && true_regnum (operands[0]) != true_regnum (operands[1])\"\n-  [(set (match_dup 0)\n-\t(mult:SI (match_dup 1)\n-\t\t (match_dup 2)))]\n-  \"operands[2] = GEN_INT (1 << INTVAL (operands[2]));\")\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  \"\n+{\n+  rtx pat;\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = gen_lowpart (Pmode, operands[1]);\n+  operands[2] = GEN_INT (1 << INTVAL (operands[2]));\n+  pat = gen_rtx_MULT (Pmode, operands[1], operands[2]);\n+  if (Pmode != SImode)\n+    pat = gen_rtx_SUBREG (SImode, pat, 0);\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], pat));\n+  DONE;\n+}\")\n \n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n@@ -6341,12 +6555,54 @@\n   \"TARGET_HIMODE_MATH\"\n   \"ix86_expand_binary_operator (ASHIFT, HImode, operands); DONE;\")\n \n+(define_insn \"*ashlhi3_1_lea\"\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r\")\n+\t(ashift:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0,r\")\n+\t\t   (match_operand:QI 2 \"nonmemory_operand\" \"cI,M\")))\n+   (clobber (reg:CC 17))]\n+  \"!TARGET_PARTIAL_REG_STALL\n+   && ix86_binary_operator_ok (ASHIFT, HImode, operands)\"\n+  \"*\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_LEA:\n+      return \\\"#\\\";\n+    case TYPE_ALU:\n+      if (operands[2] != const1_rtx)\n+\tabort ();\n+      return \\\"add{w}\\\\t{%0, %0|%0, %0}\\\";\n+\n+    default:\n+      if (REG_P (operands[2]))\n+\treturn \\\"sal{w}\\\\t{%b2, %0|%0, %b2}\\\";\n+      else if (GET_CODE (operands[2]) == CONST_INT\n+\t       && INTVAL (operands[2]) == 1\n+\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\treturn \\\"sal{w}\\\\t%0\\\";\n+      else\n+\treturn \\\"sal{w}\\\\t{%2, %0|%0, %2}\\\";\n+    }\n+}\"\n+  [(set (attr \"type\")\n+     (cond [(eq_attr \"alternative\" \"1\")\n+\t      (const_string \"lea\")\n+            (and (and (ne (symbol_ref \"TARGET_DOUBLE_WITH_ADD\")\n+\t\t          (const_int 0))\n+\t\t      (match_operand 0 \"register_operand\" \"\"))\n+\t\t (match_operand 2 \"const1_operand\" \"\"))\n+\t      (const_string \"alu\")\n+\t   ]\n+\t   (const_string \"ishift\")))\n+   (set_attr \"mode\" \"HI,SI\")])\n+\n (define_insn \"*ashlhi3_1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashift:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t   (match_operand:QI 2 \"nonmemory_operand\" \"cI\")))\n    (clobber (reg:CC 17))]\n-  \"ix86_binary_operator_ok (ASHIFT, HImode, operands)\"\n+  \"TARGET_PARTIAL_REG_STALL\n+   && ix86_binary_operator_ok (ASHIFT, HImode, operands)\"\n   \"*\n {\n   switch (get_attr_type (insn))\n@@ -6429,12 +6685,73 @@\n   \"ix86_expand_binary_operator (ASHIFT, QImode, operands); DONE;\")\n \n ;; %%% Potential partial reg stall on alternative 2.  What to do?\n+\n+(define_insn \"*ashlqi3_1_lea\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,r,r\")\n+\t(ashift:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0,r\")\n+\t\t   (match_operand:QI 2 \"nonmemory_operand\" \"cI,cI,r\")))\n+   (clobber (reg:CC 17))]\n+  \"!TARGET_PARTIAL_REG_STALL\n+   && ix86_binary_operator_ok (ASHIFT, QImode, operands)\"\n+  \"*\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_LEA:\n+      return \\\"#\\\";\n+    case TYPE_ALU:\n+      if (operands[2] != const1_rtx)\n+\tabort ();\n+      if (NON_QI_REG_P (operands[1]))\n+        return \\\"add{l}\\\\t{%k0, %k0|%k0, %k0}\\\";\n+      else\n+        return \\\"add{b}\\\\t{%0, %0|%0, %0}\\\";\n+\n+    default:\n+      if (REG_P (operands[2]))\n+\t{\n+\t  if (get_attr_mode (insn) == MODE_SI)\n+\t    return \\\"sal{l}\\\\t{%b2, %k0|%k0, %b2}\\\";\n+\t  else\n+\t    return \\\"sal{b}\\\\t{%b2, %0|%0, %b2}\\\";\n+\t}\n+      else if (GET_CODE (operands[2]) == CONST_INT\n+\t       && INTVAL (operands[2]) == 1\n+\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\t{\n+\t  if (get_attr_mode (insn) == MODE_SI)\n+\t    return \\\"sal{l}\\\\t%0\\\";\n+\t  else\n+\t    return \\\"sal{b}\\\\t%0\\\";\n+\t}\n+      else\n+\t{\n+\t  if (get_attr_mode (insn) == MODE_SI)\n+\t    return \\\"sal{l}\\\\t{%2, %k0|%k0, %2}\\\";\n+\t  else\n+\t    return \\\"sal{b}\\\\t{%2, %0|%0, %2}\\\";\n+\t}\n+    }\n+}\"\n+  [(set (attr \"type\")\n+     (cond [(eq_attr \"alternative\" \"2\")\n+\t      (const_string \"lea\")\n+            (and (and (ne (symbol_ref \"TARGET_DOUBLE_WITH_ADD\")\n+\t\t          (const_int 0))\n+\t\t      (match_operand 0 \"register_operand\" \"\"))\n+\t\t (match_operand 2 \"const1_operand\" \"\"))\n+\t      (const_string \"alu\")\n+\t   ]\n+\t   (const_string \"ishift\")))\n+   (set_attr \"mode\" \"QI,SI,SI\")])\n+\n (define_insn \"*ashlqi3_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,r\")\n \t(ashift:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n \t\t   (match_operand:QI 2 \"nonmemory_operand\" \"cI,cI\")))\n    (clobber (reg:CC 17))]\n-  \"ix86_binary_operator_ok (ASHIFT, QImode, operands)\"\n+  \"TARGET_PARTIAL_REG_STALL\n+   && ix86_binary_operator_ok (ASHIFT, QImode, operands)\"\n   \"*\n {\n   switch (get_attr_type (insn))"}]}