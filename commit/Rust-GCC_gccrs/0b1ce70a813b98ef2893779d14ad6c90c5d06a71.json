{"sha": "0b1ce70a813b98ef2893779d14ad6c90c5d06a71", "node_id": "C_kwDOANBUbNoAKDBiMWNlNzBhODEzYjk4ZWYyODkzNzc5ZDE0YWQ2YzkwYzVkMDZhNzE", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2023-02-03T10:31:53Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2023-02-03T10:31:53Z"}, "message": "libgomp: Fix reverse offload issues\n\nIf there is nothing to map, skip the mapping and avoid attempting to\ncopy 0 bytes from addrs, sizes and kinds.\n\nAdditionally, it could happen that a non-allocated address was deallocated,\nsuch as a pointer set, leading to a free for the actual data.\n\nlibgomp/\n\t* target.c (gomp_target_rev): Handle mapnum == 0 and avoid\n\tfreeing not allocated memory.\n\t* testsuite/libgomp.fortran/reverse-offload-6.f90: New test.", "tree": {"sha": "dd44ee568730e0a2c18152a7737b8a68b63e9a4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd44ee568730e0a2c18152a7737b8a68b63e9a4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b1ce70a813b98ef2893779d14ad6c90c5d06a71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1ce70a813b98ef2893779d14ad6c90c5d06a71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b1ce70a813b98ef2893779d14ad6c90c5d06a71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1ce70a813b98ef2893779d14ad6c90c5d06a71/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f84fdb134dec02f68fd9a39a58e726023470e537", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f84fdb134dec02f68fd9a39a58e726023470e537", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f84fdb134dec02f68fd9a39a58e726023470e537"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "c1682caea13b51ba6020fb1aa783ae64d6d2b84b", "filename": "libgomp/target.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1ce70a813b98ef2893779d14ad6c90c5d06a71/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1ce70a813b98ef2893779d14ad6c90c5d06a71/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=0b1ce70a813b98ef2893779d14ad6c90c5d06a71", "patch": "@@ -3324,7 +3324,7 @@ gomp_target_rev (uint64_t fn_ptr, uint64_t mapnum, uint64_t devaddrs_ptr,\n     gomp_fatal (\"Cannot find reverse-offload function\");\n   void (*host_fn)() = (void (*)()) n->k->host_start;\n \n-  if (devicep->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM)\n+  if ((devicep->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM) || mapnum == 0)\n     {\n       devaddrs = (uint64_t *) (uintptr_t) devaddrs_ptr;\n       sizes = (uint64_t *) (uintptr_t) sizes_ptr;\n@@ -3402,7 +3402,7 @@ gomp_target_rev (uint64_t fn_ptr, uint64_t mapnum, uint64_t devaddrs_ptr,\n \t  }\n     }\n \n-  if (!(devicep->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM))\n+  if (!(devicep->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM) && mapnum > 0)\n     {\n       size_t j, struct_cpy = 0;\n       splay_tree_key n2;\n@@ -3638,7 +3638,7 @@ gomp_target_rev (uint64_t fn_ptr, uint64_t mapnum, uint64_t devaddrs_ptr,\n \n   host_fn (devaddrs);\n \n-  if (!(devicep->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM))\n+  if (!(devicep->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM) && mapnum > 0)\n     {\n       uint64_t struct_cpy = 0;\n       bool clean_struct = false;\n@@ -3680,7 +3680,7 @@ gomp_target_rev (uint64_t fn_ptr, uint64_t mapnum, uint64_t devaddrs_ptr,\n \t      clean_struct = true;\n \t      struct_cpy = sizes[i];\n \t    }\n-\t  else if (cdata[i].aligned)\n+\t  else if (!cdata[i].present && cdata[i].aligned)\n \t    gomp_aligned_free ((void *) (uintptr_t) devaddrs[i]);\n \t  else if (!cdata[i].present)\n \t    free ((void *) (uintptr_t) devaddrs[i]);"}, {"sha": "04866edbba7da23df5182a261a8d44546e080745", "filename": "libgomp/testsuite/libgomp.fortran/reverse-offload-6.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1ce70a813b98ef2893779d14ad6c90c5d06a71/libgomp%2Ftestsuite%2Flibgomp.fortran%2Freverse-offload-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1ce70a813b98ef2893779d14ad6c90c5d06a71/libgomp%2Ftestsuite%2Flibgomp.fortran%2Freverse-offload-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Freverse-offload-6.f90?ref=0b1ce70a813b98ef2893779d14ad6c90c5d06a71", "patch": "@@ -0,0 +1,32 @@\n+!\n+! Ensure that a mapping with no argument works\n+!\n+\n+module m\n+  implicit none (type, external)\n+  integer :: x = 32\n+  integer :: dev_num2 = -1\n+contains\n+subroutine  foo()\n+  use omp_lib, only: omp_get_device_num\n+  x = x + 10\n+  dev_num2 = omp_get_device_num()\n+end\n+end module m\n+\n+use m\n+use omp_lib\n+!$omp requires reverse_offload\n+implicit none (type, external)\n+integer :: dev_num = -1\n+!$omp target map(from:dev_num)\n+  dev_num = omp_get_device_num()\n+  ! This calls GOMP_target_ext with number of maps = 0\n+  !$omp target device(ancestor:1)\n+    call foo\n+  !$omp end target\n+!$omp end target\n+\n+if (omp_get_num_devices() > 0 .and.  dev_num2 == dev_num) stop 1\n+if (x /= 42) stop 2\n+end"}]}