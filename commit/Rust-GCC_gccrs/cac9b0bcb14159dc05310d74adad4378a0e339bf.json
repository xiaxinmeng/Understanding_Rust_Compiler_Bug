{"sha": "cac9b0bcb14159dc05310d74adad4378a0e339bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FjOWIwYmNiMTQxNTlkYzA1MzEwZDc0YWRhZDQzNzhhMGUzMzliZg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-04-29T09:26:29Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-04-29T09:26:29Z"}, "message": "AbstractListModel.java, [...]: New Versions from classpath.\n\n2003-04-29  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/swing/AbstractListModel.java,\n\tjavax/swing/DefaultBoundedRangeModel.java,\n\tjavax/swing/DefaultSingleSelectionModel.java:\n\tNew Versions from classpath.\n\nFrom-SVN: r66212", "tree": {"sha": "fd553118dbf7dedb7aaf77964f83aa6880900415", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd553118dbf7dedb7aaf77964f83aa6880900415"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cac9b0bcb14159dc05310d74adad4378a0e339bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cac9b0bcb14159dc05310d74adad4378a0e339bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cac9b0bcb14159dc05310d74adad4378a0e339bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cac9b0bcb14159dc05310d74adad4378a0e339bf/comments", "author": null, "committer": null, "parents": [{"sha": "7e89296c0b9f89ccfbd4c3dd12b64b6d2096fe60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e89296c0b9f89ccfbd4c3dd12b64b6d2096fe60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e89296c0b9f89ccfbd4c3dd12b64b6d2096fe60"}], "stats": {"total": 1183, "additions": 582, "deletions": 601}, "files": [{"sha": "930212c7bb630a9c5b725fd28af3874151946482", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac9b0bcb14159dc05310d74adad4378a0e339bf/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac9b0bcb14159dc05310d74adad4378a0e339bf/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=cac9b0bcb14159dc05310d74adad4378a0e339bf", "patch": "@@ -1,3 +1,10 @@\n+2003-04-29  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/swing/AbstractListModel.java,\n+\tjavax/swing/DefaultBoundedRangeModel.java,\n+\tjavax/swing/DefaultSingleSelectionModel.java:\n+\tNew Versions from classpath.\n+\n 2003-04-29  Michael Koch  <konqueror@gmx.de>\n \n \t* java/awt/Window.java"}, {"sha": "4e227b4dda7f7139ab1c86da86548b61eb4c2e6b", "filename": "libjava/javax/swing/AbstractListModel.java", "status": "modified", "additions": 154, "deletions": 165, "changes": 319, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac9b0bcb14159dc05310d74adad4378a0e339bf/libjava%2Fjavax%2Fswing%2FAbstractListModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac9b0bcb14159dc05310d74adad4378a0e339bf/libjava%2Fjavax%2Fswing%2FAbstractListModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FAbstractListModel.java?ref=cac9b0bcb14159dc05310d74adad4378a0e339bf", "patch": "@@ -37,10 +37,11 @@\n \n package javax.swing;\n \n-// Imports\n-import java.io.*;\n-import java.util.*;\n-import javax.swing.event.*;\n+import java.io.Serializable;\n+import java.util.EventListener;\n+import javax.swing.event.EventListenerList;\n+import javax.swing.event.ListDataListener;\n+import javax.swing.event.ListDataEvent;\n \n /**\n  * AbstractListModel\n@@ -53,164 +54,152 @@\n {\n   static final long serialVersionUID = -3285184064379168730L;\n \n-\t//-------------------------------------------------------------\n-\t// Variables --------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * listenerList\n-\t */\n-\tprotected EventListenerList listenerList = new EventListenerList();\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Constructor AbstractListModel\n-\t */\n-\tpublic AbstractListModel() {\n-\t} // AbstractListModel()\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Methods ----------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * addListDataListener\n-\t * @param listener TODO\n-\t */\n-\tpublic void addListDataListener(ListDataListener listener) {\n-\t\tlistenerList.add(ListDataListener.class, (EventListener) listener);\n-\t} // addListDataListener()\n-\n-\t/**\n-\t * removeListDataListener\n-\t * @param listener TODO\n-\t */\n-\tpublic void removeListDataListener(ListDataListener listener) {\n-\t\tlistenerList.remove(ListDataListener.class, (EventListener) listener);\n-\t} // removeListDataListener()\n-\n-\t/**\n-\t * fireContentsChanged\n-\t * @param source TODO\n-\t * @param startIndex TODO\n-\t * @param endIndex TODO\n-\t */\n-\tprotected void fireContentsChanged(Object source, int startIndex, int endIndex) {\n-\n-\t\t// Variables\n-\t\tListDataEvent\tevent;\n-\t\tEventListener[]\t\tlisteners;\n-\t\tListDataListener\tlistener;\n-\t\tint\t\t\t\t\tindex;\n-\n-\t\t// Create Event\n-\t\tevent = new ListDataEvent(source, ListDataEvent.CONTENTS_CHANGED,\n-\t\t\t\t\tstartIndex, endIndex);\n-\n-\t\t// Get Listeners\n-\t\tlisteners = listenerList.getListeners(ListDataListener.class);\n-\n-\t\t// Process Listeners\n-\t\tfor (index = 0; index < listeners.length; index++) {\n-\t\t\tlistener = (ListDataListener) listeners[index];\n-\t\t\tlistener.contentsChanged(event);\n-\t\t} // for\n-\n-\t} // fireContentsChanged()\n-\n-\t/**\n-\t * fireIntervalAdded\n-\t * @param source TODO\n-\t * @param startIndex TODO\n-\t * @param endIndex TODO\n-\t */\n-\tprotected void fireIntervalAdded(Object source, int startIndex, int endIndex) {\n-\n-\t\t// Variables\n-\t\tListDataEvent\tevent;\n-\t\tEventListener[]\t\tlisteners;\n-\t\tListDataListener\tlistener;\n-\t\tint\t\t\t\t\tindex;\n-\n-\t\t// Create Event\n-\t\tevent = new ListDataEvent(source, ListDataEvent.INTERVAL_ADDED,\n-\t\t\t\t\tstartIndex, endIndex);\n-\n-\t\t// Get Listeners\n-\t\tlisteners = listenerList.getListeners(ListDataListener.class);\n-\n-\t\t// Process Listeners\n-\t\tfor (index = 0; index < listeners.length; index++) {\n-\t\t\tlistener = (ListDataListener) listeners[index];\n-\t\t\tlistener.intervalAdded(event);\n-\t\t} // for\n-\n-\t} // fireIntervalAdded()\n-\n-\t/**\n-\t * fireIntervalRemoved\n-\t * @param source TODO\n-\t * @param startIndex TODO\n-\t * @param endIndex TODO\n-\t */\n-\tprotected void fireIntervalRemoved(Object source, int startIndex, int endIndex) {\n-\n-\t\t// Variables\n-\t\tListDataEvent\t\tevent;\n-\t\tEventListener[]\t\tlisteners;\n-\t\tListDataListener\tlistener;\n-\t\tint\t\t\t\t\tindex;\n-\n-\t\t// Create Event\n-\t\tevent = new ListDataEvent(source, ListDataEvent.INTERVAL_REMOVED,\n-\t\t\t\t\tstartIndex, endIndex);\n-\n-\t\t// Get Listeners\n-\t\tlisteners = listenerList.getListeners(ListDataListener.class);\n-\n-\t\t// Process Listeners\n-\t\tfor (index = 0; index < listeners.length; index++) {\n-\t\t\tlistener = (ListDataListener) listeners[index];\n-\t\t\tlistener.intervalRemoved(event);\n-\t\t} // for\n-\n-\t} // fireIntervalRemoved()\n-\n-\t/**\n-\t * getListeners\n-\t * @param listenerType TODO\n-\t * @returns EventListener[]\n-\t */\n-\tpublic EventListener[] getListeners(Class listenerType) {\n-\t\treturn listenerList.getListeners(listenerType);\n-\t} // getListeners()\n-\n-\t/**\n-\t * getListDataListeners\n-\t */\n-\tpublic ListDataListener[] getListDataListeners()\n-\t{\n-          // FIXME: implement this\n-\t  return null;\n-\t}\n-\n-\t/**\n-\t * getElementAt\n-\t * @param index TODO\n-\t * @returns Object\n-\t */\n-\tpublic abstract Object getElementAt(int index);\n-\n-\t/**\n-\t * getSize\n-\t * @returns int\n-\t */\n-\tpublic abstract int getSize();\n-\n-\n-} // AbstractListModel\n+  /**\n+   * listenerList\n+   */\n+  protected EventListenerList listenerList = new EventListenerList ();\n+  \n+  /**\n+   * Constructor AbstractListModel\n+   */\n+  public AbstractListModel ()\n+  {\n+  }\n+\n+  /**\n+   * addListDataListener\n+   * @param listener TODO\n+   */\n+  public void addListDataListener(ListDataListener listener) \n+  {\n+    listenerList.add (ListDataListener.class, listener);\n+  }\n+\n+  /**\n+   * removeListDataListener\n+   * @param listener TODO\n+   */\n+  public void removeListDataListener(ListDataListener listener)\n+  {\n+    listenerList.remove (ListDataListener.class, listener);\n+  }\n+\n+  /**\n+   * fireContentsChanged\n+   * @param source TODO\n+   * @param startIndex TODO\n+   * @param endIndex TODO\n+   */\n+  protected void fireContentsChanged(Object source, int startIndex, int endIndex)\n+  {\n+    // Variables\n+    ListDataEvent event;\n+    ListDataListener[] listeners;\n+    ListDataListener listener;\n+    int index;\n+\n+    // Create Event\n+    event = new ListDataEvent(source, ListDataEvent.CONTENTS_CHANGED,\n+    startIndex, endIndex);\n+\n+    // Get Listeners\n+    listeners = getListDataListeners ();\n+\n+    // Process Listeners\n+    for (index = 0; index < listeners.length; index++)\n+      {\n+        listener = (ListDataListener) listeners[index];\n+        listener.contentsChanged(event);\n+      }\n+  }\n+\n+  /**\n+   * fireIntervalAdded\n+   * @param source TODO\n+   * @param startIndex TODO\n+   * @param endIndex TODO\n+   */\n+  protected void fireIntervalAdded (Object source, int startIndex, int endIndex)\n+  {\n+    // Variables\n+    ListDataEvent event;\n+    ListDataListener[] listeners;\n+    ListDataListener listener;\n+    int index;\n+\n+    // Create Event\n+    event = new ListDataEvent (source, ListDataEvent.INTERVAL_ADDED, startIndex,\n+                               endIndex);\n+\n+    // Get Listeners\n+    listeners = getListDataListeners ();\n+\n+    // Process Listeners\n+    for (index = 0; index < listeners.length; index++)\n+      {\n+        listener = listeners [index];\n+        listener.intervalAdded (event);\n+      }\n+  }\n+\n+  /**\n+   * fireIntervalRemoved\n+   * @param source TODO\n+   * @param startIndex TODO\n+   * @param endIndex TODO\n+   */\n+  protected void fireIntervalRemoved (Object source, int startIndex,\n+                                     int endIndex)\n+  {\n+    // Variables\n+    ListDataEvent event;\n+    ListDataListener[] listeners;\n+    ListDataListener listener;\n+    int index;\n+\n+    // Create Event\n+    event = new ListDataEvent (source, ListDataEvent.INTERVAL_REMOVED,\n+                               startIndex, endIndex);\n+\n+    // Get Listeners\n+    listeners = getListDataListeners ();\n+\n+    // Process Listeners\n+    for (index = 0; index < listeners.length; index++)\n+      {\n+        listener = listeners [index];\n+        listener.intervalRemoved (event);\n+      }\n+  }\n+\n+  /**\n+   * getListeners\n+   * @param listenerType TODO\n+   * @returns EventListener[]\n+   */\n+  public EventListener[] getListeners (Class listenerType)\n+  {\n+    return listenerList.getListeners (listenerType);\n+  }\n+\n+  /**\n+   * getListDataListeners\n+   */\n+  public ListDataListener[] getListDataListeners ()\n+  {\n+    return (ListDataListener[]) getListeners (ListDataListener.class);\n+  }\n+\n+  /**\n+   * getElementAt\n+   * @param index TODO\n+   * @returns Object\n+   */\n+  public abstract Object getElementAt (int index);\n+\n+  /**\n+   * getSize\n+   * @returns int\n+   */\n+  public abstract int getSize ();\n+}"}, {"sha": "128a97a975902bd82d5ba81d78197d857ed26690", "filename": "libjava/javax/swing/DefaultBoundedRangeModel.java", "status": "modified", "additions": 292, "deletions": 294, "changes": 586, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac9b0bcb14159dc05310d74adad4378a0e339bf/libjava%2Fjavax%2Fswing%2FDefaultBoundedRangeModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac9b0bcb14159dc05310d74adad4378a0e339bf/libjava%2Fjavax%2Fswing%2FDefaultBoundedRangeModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FDefaultBoundedRangeModel.java?ref=cac9b0bcb14159dc05310d74adad4378a0e339bf", "patch": "@@ -37,10 +37,11 @@\n \n package javax.swing;\n \n-// Imports\n-import java.io.*;\n-import java.util.*;\n-import javax.swing.event.*;\n+import java.io.Serializable;\n+import java.util.EventListener;\n+import javax.swing.event.ChangeEvent;\n+import javax.swing.event.ChangeListener;\n+import javax.swing.event.EventListenerList;\n \n /**\n  * DefaultBoundedRangeModel\n@@ -52,299 +53,296 @@\n {\n   static final long serialVersionUID = 5034068491295259790L;\n \n-\t//-------------------------------------------------------------\n-\t// Variables --------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * changeEvent\n-\t */\n-\tprotected transient ChangeEvent changeEvent = new ChangeEvent(this);\n-\n-\t/**\n-\t * listenerList\n-\t */\n-\tprotected EventListenerList listenerList = new EventListenerList();\n-\n-\t/**\n-\t * value\n-\t */\n-\tprivate int value;\n-\n-\t/**\n-\t * extent\n-\t */\n-\tprivate int extent;\n-\n-\t/**\n-\t * minimum\n-\t */\n-\tprivate int minimum;\n-\n-\t/**\n-\t * maximum\n-\t */\n-\tprivate int maximum;\n-\n-\t/**\n-\t * isAdjusting\n-\t */\n-\tprivate boolean isAdjusting;\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Constructor DefaultBoundedRangeModel\n-\t */\n-\tpublic DefaultBoundedRangeModel() {\n-\t\tsetRangeProperties(0, 0, 0, 100, false);\n-\t} // DefaultBoundedRangeModel()\n-\n-\t/**\n-\t * Constructor DefaultBoundedRangeModel\n-\t * @param value TODO\n-\t * @param extent TODO\n-\t * @param minimum TODO\n-\t * @param maximum TODO\n-\t */\n-\tpublic DefaultBoundedRangeModel(int value, int extent,\n-\t\t\t\tint minimum, int maximum) {\n-\t\tsetRangeProperties(value, extent, minimum, maximum, false);\n-\t} // DefaultBoundedRangeModel()\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Methods ----------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * toString\n-\t * @returns String\n-\t */\n-\tpublic String toString() {\n-\t\treturn null; // TODO\n-\t} // toString()\n-\n-\t/**\n-\t * getValue\n-\t * @returns int\n-\t */\n-\tpublic int getValue() {\n-\t\treturn value;\n-\t} // getValue()\n-\n-\t/**\n-\t * setValue\n-\t * @param value TODO\n-\t */\n-\tpublic void setValue(int value) {\n-\t\n-\t\t// Validate Constraints\n-\t\tif (minimum > value || value > (value + extent) ||\n-\t\t\t(value + extent) > maximum) {\n-\t\t\tthrow new IllegalArgumentException(\"Invalid value property set\");\n-\t\t} // if\n+  /**\n+   * changeEvent\n+   */\n+  protected transient ChangeEvent changeEvent = new ChangeEvent (this);\n+\n+  /**\n+   * listenerList\n+   */\n+  protected EventListenerList listenerList = new EventListenerList ();\n+\n+  /**\n+   * value\n+   */\n+  private int value;\n+\n+  /**\n+   * extent\n+   */\n+  private int extent;\n+\n+  /**\n+   * minimum\n+   */\n+  private int minimum;\n+\n+  /**\n+   * maximum\n+   */\n+  private int maximum;\n+\n+  /**\n+   * isAdjusting\n+   */\n+  private boolean isAdjusting;\n+\n+  /**\n+   * Constructor DefaultBoundedRangeModel\n+   */\n+  public DefaultBoundedRangeModel ()\n+  {\n+    setRangeProperties (0, 0, 0, 100, false);\n+  }\n+\n+  /**\n+   * Constructor DefaultBoundedRangeModel\n+   * @param value TODO\n+   * @param extent TODO\n+   * @param minimum TODO\n+   * @param maximum TODO\n+   */\n+  public DefaultBoundedRangeModel (int value, int extent, int minimum,\n+                                  int maximum)\n+  {\n+    setRangeProperties(value, extent, minimum, maximum, false);\n+  }\n+\n+  /**\n+   * toString\n+   * @returns String\n+   */\n+  public String toString ()\n+  {\n+    return null; // TODO\n+  }\n+\n+  /**\n+   * getValue\n+   * @returns int\n+   */\n+  public int getValue ()\n+  {\n+    return value;\n+  }\n+\n+  /**\n+   * setValue\n+   * @param value TODO\n+   */\n+  public void setValue (int value)\n+  {\n+    // Validate Constraints\n+    if (minimum > value ||\n+        value > (value + extent) ||\n+        (value + extent) > maximum)\n+      {\n+        throw new IllegalArgumentException (\"Invalid value property set\");\n+      }\n \t\t\n-\t\t// Set Value\n-\t\tthis.value = value;\n-\n-\t\t// Notification\n-\t\tfireStateChanged();\n-\n-\t} // setValue()\n-\n-\t/**\n-\t * getExtent\n-\t * @returns int\n-\t */\n-\tpublic int getExtent() {\n-\t\treturn extent;\n-\t} // getExtent()\n-\n-\t/**\n-\t * setExtent\n-\t * @param extent TODO\n-\t */\n-\tpublic void setExtent(int extent) {\n-\n-\t\t// Validate Constraints\n-\t\tif (minimum > value || value > (value + extent) ||\n-\t\t\t(value + extent) > maximum) {\n-\t\t\tthrow new IllegalArgumentException(\"Invalid extent property set\");\n-\t\t} // if\n+    // Set Value\n+    this.value = value;\n+\n+    // Notification\n+    fireStateChanged ();\n+  }\n+\n+  /**\n+   * getExtent\n+   * @returns int\n+   */\n+  public int getExtent ()\n+  {\n+    return extent;\n+  }\n+\n+  /**\n+   * setExtent\n+   * @param extent TODO\n+   */\n+  public void setExtent (int extent)\n+  {\n+    // Validate Constraints\n+    if (minimum > value ||\n+        value > (value + extent) ||\n+        (value + extent) > maximum)\n+      {\n+        throw new IllegalArgumentException(\"Invalid extent property set\");\n+      }\n+\n+    // Set Extent\n+    this.extent = extent;\n \t\t\n-\t\t// Set Extent\n-\t\tthis.extent = extent;\n+    // Notification\n+    fireStateChanged ();\n+  }\n+\n+  /**\n+   * getMinimum\n+   * @returns int\n+   */\n+  public int getMinimum ()\n+  {\n+    return minimum;\n+  }\n+\n+  /**\n+   * setMinimum\n+   * @param minimum TODO\n+   */\n+  public void setMinimum (int minimum)\n+  {\n+    // Validate Constraints\n+    if (minimum > value ||\n+        value > (value + extent) ||\n+        (value + extent) > maximum)\n+      {\n+        throw new IllegalArgumentException(\"Invalid minimum property set\");\n+      }\n \t\t\n-\t\t// Notification\n-\t\tfireStateChanged();\n-\n-\t} // setExtent()\n-\n-\t/**\n-\t * getMinimum\n-\t * @returns int\n-\t */\n-\tpublic int getMinimum() {\n-\t\treturn minimum;\n-\t} // getMinimum()\n-\n-\t/**\n-\t * setMinimum\n-\t * @param minimum TODO\n-\t */\n-\tpublic void setMinimum(int minimum) {\n-\t\n-\t\t// Validate Constraints\n-\t\tif (minimum > value || value > (value + extent) ||\n-\t\t\t(value + extent) > maximum) {\n-\t\t\tthrow new IllegalArgumentException(\"Invalid minimum property set\");\n-\t\t} // if\n+    // Set Minimum\n+    this.minimum = minimum;\n \t\t\n-\t\t// Set Minimum\n-\t\tthis.minimum = minimum;\n-\t\t\n-\t\t// Notification\n-\t\tfireStateChanged();\n-\n-\t} // setMinimum()\n-\n-\t/**\n-\t * getMaximum\n-\t * @returns int\n-\t */\n-\tpublic int getMaximum() {\n+    // Notification\n+    fireStateChanged ();\n+  }\n+\n+  /**\n+   * getMaximum\n+   * @returns int\n+   */\n+  public int getMaximum() {\n \t\treturn maximum;\n-\t} // getMaximum()\n-\n-\t/**\n-\t * setMaximum\n-\t * @param maximum TODO\n-\t */\n-\tpublic void setMaximum(int maximum) {\n-\t\n-\t\t// Validate Constraints\n-\t\tif (minimum > value || value > (value + extent) ||\n-\t\t\t(value + extent) > maximum) {\n-\t\t\tthrow new IllegalArgumentException(\"Invalid maximum property set\");\n-\t\t} // if\n-\n-\t\t// Set Maximum\n-\t\tthis.maximum = maximum;\n-\n-\t\t// Notification\n-\t\tfireStateChanged();\n-\n-\t} // setMaximum()\n-\n-\t/**\n-\t * getValueIsAdjusting\n-\t * @returns boolean\n-\t */\n-\tpublic boolean getValueIsAdjusting() {\n-\t\treturn isAdjusting;\n-\t} // getValueIsAdjusting()\n-\n-\t/**\n-\t * setValueIsAdjusting\n-\t * @param isAdjusting TODO\n-\t */\n-\tpublic void setValueIsAdjusting(boolean isAdjusting) {\n-\t\n-\t\t// Set isAdjusting\n-\t\tthis.isAdjusting = isAdjusting;\n-\n-\t\t// Notification\n-\t\tfireStateChanged();\n-\n-\t} // setValueIsAdjusting()\n-\n-\t/**\n-\t * setRangeProperties\n-\t * @param value TODO\n-\t * @param extent TODO\n-\t * @param minimum TODO\n-\t * @param maximum TODO\n-\t * @param isAdjusting TODO\n-\t */\n-\tpublic void setRangeProperties(int value, int extent, int minimum,\n-\t\t\tint maximum, boolean isAdjusting) {\n-\t\t\t\n-\t\t// Validate Constraints\n-\t\tif (minimum > value || value > (value + extent) ||\n-\t\t\t(value + extent) > maximum) {\n-\t\t\tthrow new IllegalArgumentException(\"Invalid property set\");\n-\t\t} // if\n-\n-\t\t// Set Data\n-\t\tthis.value = value;\n-\t\tthis.extent = extent;\n-\t\tthis.minimum = minimum;\n-\t\tthis.maximum = maximum;\n-\t\tthis.isAdjusting = isAdjusting;\n+  }\n+\n+  /**\n+   * setMaximum\n+   * @param maximum TODO\n+   */\n+  public void setMaximum (int maximum)\n+  {\n+    // Validate Constraints\n+    if (minimum > value ||\n+        value > (value + extent) ||\n+        (value + extent) > maximum)\n+      {\n+        throw new IllegalArgumentException (\"Invalid maximum property set\");\n+      }\n+\n+    // Set Maximum\n+    this.maximum = maximum;\n+\n+    // Notification\n+    fireStateChanged ();\n+  }\n+\n+  /**\n+   * getValueIsAdjusting\n+   * @returns boolean\n+   */\n+  public boolean getValueIsAdjusting ()\n+  {\n+    return isAdjusting;\n+  }\n+\n+  /**\n+   * setValueIsAdjusting\n+   * @param isAdjusting TODO\n+   */\n+  public void setValueIsAdjusting (boolean isAdjusting)\n+  {\n+    // Set isAdjusting\n+    this.isAdjusting = isAdjusting;\n+\n+    // Notification\n+    fireStateChanged();\n+  }\n+\n+  /**\n+   * setRangeProperties\n+   * @param value TODO\n+   * @param extent TODO\n+   * @param minimum TODO\n+   * @param maximum TODO\n+   * @param isAdjusting TODO\n+   */\n+  public void setRangeProperties (int value, int extent, int minimum,\n+                                  int maximum, boolean isAdjusting)\n+  {\n+    // Validate Constraints\n+    if (minimum > value ||\n+        value > (value + extent) ||\n+        (value + extent) > maximum)\n+      {\n+        throw new IllegalArgumentException (\"Invalid property set\");\n+      }\n+\n+    // Set Data\n+    this.value = value;\n+    this.extent = extent;\n+    this.minimum = minimum;\n+    this.maximum = maximum;\n+    this.isAdjusting = isAdjusting;\n \t\t\n-\t\t// Notification\n-\t\tfireStateChanged();\n-\n-\t} // setRangeProperties()\n-\n-\t/**\n-\t * addChangeListener\n-\t * @param listener TODO\n-\t */\n-\tpublic void addChangeListener(ChangeListener listener) {\n-\t\tlistenerList.add(ChangeListener.class, listener);\n-\t} // addChangeListener()\n-\n-\t/**\n-\t * removeChangeListener\n-\t * @param listener TODO\n-\t */\n-\tpublic void removeChangeListener(ChangeListener listener) {\n-\t\tlistenerList.remove(ChangeListener.class, listener);\n-\t} // removeChangeListener()\n-\n-\t/**\n-\t * fireStateChanged\n-\t */\n-\tprotected void fireStateChanged() {\n-\n-\t\t// Variables\n-\t\tChangeListener\t\t\tlistener;\n-\t\tEventListener[]\t\t\tlisteners;\n-\t\tint\t\t\t\t\t\tindex;\n-\n-\t\t// Get Listeners\n-\t\tlisteners = listenerList.getListeners(ChangeListener.class);\n-\n-\t\t// Process Listeners\n-\t\tfor (index = 0; index < listeners.length; index++) {\n-\t\t\tlistener = (ChangeListener) listeners[index];\n-\t\t\tlistener.stateChanged(changeEvent);\n-\t\t} // for\n-\n-\t} // fireStateChanged()\n-\n-\t/**\n-\t * getListeners\n-\t * @param c TODO\n-\t * @returns EventListener[]\n-\t */\n-\tpublic EventListener[] getListeners(Class c) {\n-\t\treturn listenerList.getListeners(c);\n-\t} // getListeners()\n-\n-\t/**\n-\t * getChangeListeners\n-\t */\n-\tpublic ChangeListener[] getChangeListeners()\n-\t{\n-\t  // FIXME: implement this\n-\t  return null;\n-\t}\n-\n-\n-} // DefaultBoundedRangeModel\n+    // Notification\n+    fireStateChanged ();\n+  }\n+\n+  /**\n+   * addChangeListener\n+   * @param listener TODO\n+   */\n+  public void addChangeListener (ChangeListener listener)\n+  {\n+    listenerList.add (ChangeListener.class, listener);\n+  }\n+\n+  /**\n+   * removeChangeListener\n+   * @param listener TODO\n+   */\n+  public void removeChangeListener (ChangeListener listener)\n+  {\n+    listenerList.remove (ChangeListener.class, listener);\n+  }\n+\n+  /**\n+   * fireStateChanged\n+   */\n+  protected void fireStateChanged ()\n+  {\n+    // Variables\n+    ChangeListener listener;\n+    ChangeListener[] listeners;\n+    int index;\n+\n+    // Get Listeners\n+    listeners = getChangeListeners ();\n+\n+    // Process Listeners\n+    for (index = 0; index < listeners.length; index++)\n+    {\n+      listener = listeners [index];\n+      listener.stateChanged (changeEvent);\n+    }\n+  }\n+\n+  /**\n+   * getListeners\n+   * @param c TODO\n+   * @returns EventListener[]\n+   */\n+  public EventListener[] getListeners (Class listenerType)\n+  {\n+    return listenerList.getListeners (listenerType);\n+  }\n+\n+  /**\n+   * getChangeListeners\n+   */\n+  public ChangeListener[] getChangeListeners ()\n+  {\n+    return (ChangeListener[]) getListeners (ChangeListener.class);\n+  }\n+}"}, {"sha": "86e43e1ac8cfa131d22c0ca3e8807e89b64c871a", "filename": "libjava/javax/swing/DefaultSingleSelectionModel.java", "status": "modified", "additions": 129, "deletions": 142, "changes": 271, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac9b0bcb14159dc05310d74adad4378a0e339bf/libjava%2Fjavax%2Fswing%2FDefaultSingleSelectionModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac9b0bcb14159dc05310d74adad4378a0e339bf/libjava%2Fjavax%2Fswing%2FDefaultSingleSelectionModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FDefaultSingleSelectionModel.java?ref=cac9b0bcb14159dc05310d74adad4378a0e339bf", "patch": "@@ -37,154 +37,141 @@\n \n package javax.swing;\n \n-// Imports\n-import java.io.*;\n-import java.util.*;\n-import javax.swing.event.*;\n+import java.io.Serializable;\n+import java.util.EventListener;\n+import javax.swing.event.ChangeEvent;\n+import javax.swing.event.ChangeListener;\n+import javax.swing.event.EventListenerList;\n \n /**\n  * DefaultSingleSelectionModel\n  * @author\tAndrew Selkirk\n  * @version\t1.0\n  */\n-public class DefaultSingleSelectionModel implements \n-\t\tSingleSelectionModel, Serializable\n+public class DefaultSingleSelectionModel\n+  implements SingleSelectionModel, Serializable\n {\n   static final long serialVersionUID = 3676229404753786004L;\n \n-\t//-------------------------------------------------------------\n-\t// Variables --------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * changeEvent\n-\t */\n-\tprotected transient ChangeEvent changeEvent = new ChangeEvent(this);\n-\n-\t/**\n-\t * listenerList\n-\t */\n-\tprotected EventListenerList listenerList= new EventListenerList();\n-\n-\t/**\n-\t * index\n-\t */\n-\tprivate int index = -1;\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Constructor DefaultSingleSelectionModel\n-\t */\n-\tpublic DefaultSingleSelectionModel() {\n-\t\t// TODO\n-\t} // DefaultSingleSelectionModel()\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Methods ----------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * getSelectedIndex\n-\t * @returns int\n-\t */\n-\tpublic int getSelectedIndex() {\n-\t\treturn index;\n-\t} // getSelectedIndex()\n-\n-\t/**\n-\t * setSelectedIndex\n-\t * @param index TODO\n-\t */\n-\tpublic void setSelectedIndex(int index) {\n-\n-\t\t// Set Data\n-\t\tthis.index = index;\n-\n-\t\t// Notify Listeners\n-\t\tfireStateChanged();\n-\n-\t} // setSelectedIndex()\n-\n-\t/**\n-\t * clearSelection\n-\t */\n-\tpublic void clearSelection() {\n-\n-\t\t// Set Data\n-\t\tindex = -1;\n-\n-\t\t// Notify Listeners\n-\t\tfireStateChanged();\n-\n-\t} // clearSelection()\n-\n-\t/**\n-\t * isSelected\n-\t * @returns boolean\n-\t */\n-\tpublic boolean isSelected() {\n-\t\treturn (index == -1);\n-\t} // isSelected()\n-\n-\t/**\n-\t * addChangeListener\n-\t * @param listener TODO\n-\t */\n-\tpublic void addChangeListener(ChangeListener listener) {\n-\t\tlistenerList.add(ChangeListener.class, listener);\n-\t} // addChangeListener()\n-\n-\t/**\n-\t * removeChangeListener\n-\t * @param listener TODO\n-\t */\n-\tpublic void removeChangeListener(ChangeListener listener) {\n-\t\tlistenerList.remove(ChangeListener.class, listener);\n-\t} // removeChangeListener()\n-\n-\t/**\n-\t * fireStateChanged\n-\t */\n-\tprotected void fireStateChanged() {\n-\n-\t\t// Variables\n-\t\tChangeListener\tlistener;\n-\t\tEventListener[]\tlisteners;\n-\t\tint\t\t\t\tindex;\n-\n-\t\t// Get Listeners\n-\t\tlisteners = listenerList.getListeners(ChangeListener.class);\n-\n-\t\t// Process Listeners\n-\t\tfor (index = 0; index < listeners.length; index++) {\n-\t\t\tlistener = (ChangeListener) listeners[index];\n-\t\t\tlistener.stateChanged(changeEvent);\n-\t\t} // for\n-\n-\t} // fireStateChanged()\n-\n-\t/**\n-\t * getListeners\n-\t * @param listenerClass TODO\n-\t * @returns EventListener[]\n-\t */\n-\tpublic EventListener[] getListeners(Class listenerClass) {\n-\t\treturn listenerList.getListeners(listenerClass);\n-\t} // getListeners()\n-\n-\t/**\n-\t * getChangeListeners\n-\t */\n-\tpublic ChangeListener[] getChangeListeners()\n-\t{\n-\t  // FIXME: implement this\n-\t  return null;\n-\t}\n-\n-\n-} // DefaultSingleSelectionModel\n+  /**\n+   * changeEvent\n+   */\n+  protected transient ChangeEvent changeEvent = new ChangeEvent (this);\n+\n+  /**\n+   * listenerList\n+   */\n+  protected EventListenerList listenerList= new EventListenerList ();\n+\n+  /**\n+   * index\n+   */\n+  private int index = -1;\n+\n+  /**\n+   * Constructor DefaultSingleSelectionModel\n+   */\n+  public DefaultSingleSelectionModel ()\n+  {\n+  }\n+\n+  /**\n+   * getSelectedIndex\n+   * @returns int\n+   */\n+  public int getSelectedIndex ()\n+  {\n+    return index;\n+  }\n+\n+  /**\n+   * setSelectedIndex\n+   * @param index TODO\n+   */\n+  public void setSelectedIndex (int index)\n+  {\n+    // Set Data\n+    this.index = index;\n+\n+    // Notify Listeners\n+    fireStateChanged ();\n+  }\n+\n+  /**\n+   * clearSelection\n+   */\n+  public void clearSelection ()\n+  {\n+    // Set Data\n+    index = -1;\n+\n+    // Notify Listeners\n+    fireStateChanged ();\n+  }\n+\n+  /**\n+   * isSelected\n+   * @returns boolean\n+   */\n+  public boolean isSelected ()\n+  {\n+    return (index == -1);\n+  }\n+\n+  /**\n+   * addChangeListener\n+   * @param listener TODO\n+   */\n+  public void addChangeListener (ChangeListener listener)\n+  {\n+    listenerList.add (ChangeListener.class, listener);\n+  }\n+\n+  /**\n+   * removeChangeListener\n+   * @param listener TODO\n+   */\n+  public void removeChangeListener (ChangeListener listener)\n+  {\n+    listenerList.remove (ChangeListener.class, listener);\n+  }\n+\n+  /**\n+   * fireStateChanged\n+   */\n+  protected void fireStateChanged ()\n+  {\n+    // Variables\n+    ChangeListener listener;\n+    ChangeListener[] listeners;\n+    int index;\n+\n+    // Get Listeners\n+    listeners = getChangeListeners ();\n+\n+    // Process Listeners\n+    for (index = 0; index < listeners.length; index++)\n+      {\n+        listener = listeners [index];\n+        listener.stateChanged (changeEvent);\n+      }\n+  }\n+\n+  /**\n+   * getListeners\n+   * @param listenerClass TODO\n+   * @returns EventListener[]\n+   */\n+  public EventListener[] getListeners (Class listenerClass)\n+  {\n+    return listenerList.getListeners (listenerClass);\n+  }\n+\n+  /**\n+   * getChangeListeners\n+   */\n+  public ChangeListener[] getChangeListeners ()\n+  {\n+    return (ChangeListener[]) getListeners (ChangeListener.class);\n+  }\n+}"}]}