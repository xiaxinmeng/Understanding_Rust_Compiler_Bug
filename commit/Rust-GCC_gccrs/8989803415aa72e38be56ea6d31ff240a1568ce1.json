{"sha": "8989803415aa72e38be56ea6d31ff240a1568ce1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk4OTgwMzQxNWFhNzJlMzhiZTU2ZWE2ZDMxZmYyNDBhMTU2OGNlMQ==", "commit": {"author": {"name": "Daniel Kruegler", "email": "daniel.kruegler@gmail.com", "date": "2013-06-13T23:18:27Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-06-13T23:18:27Z"}, "message": "type_traits (is_function): Support ref-qualified functions.\n\n2013-06-13  Daniel Krugler  <daniel.kruegler@gmail.com>\n\n\t* include/std/type_traits (is_function): Support ref-qualified\n\tfunctions.\n\t(is_copy_constructible, is_move_constructible, is_copy_assignable,\n\tis_move_assignable, is_nothrow_copy_constructible,\n\tis_nothrow_move_constructible, is_nothrow_copy_assignable,\n\tis_nothrow_move_assignable): Implement LWG 2196.\n\t(add_lvalue_reference, add_rvalue_reference, add_pointer): Implement\n\tLWG 2101.\n\t(__strip_reference_wrapper<<const reference_wrapper<_Tp>>): Remove,\n\tunused.\n\t* testsuite/20_util/add_lvalue_reference/value.cc: Extend.\n\t* testsuite/20_util/add_rvalue_reference/value.cc: Likewise.\n\t* testsuite/20_util/decay/requirements/typedefs.cc: Likewise.\n\t* testsuite/20_util/is_assignable/value.cc: Likewise.\n\t* testsuite/20_util/is_constructible/value-2.cc: Likewise.\n\t* testsuite/20_util/is_copy_assignable/value.cc: Likewise.\n\t* testsuite/20_util/is_copy_constructible/value.cc: Likewise.\n\t* testsuite/20_util/is_function/value.cc: Likewise.\n\t* testsuite/20_util/is_move_assignable/value.cc: Likewise.\n\t* testsuite/20_util/is_move_constructible/value.cc: Likewise.\n\t* testsuite/20_util/is_nothrow_copy_assignable/value.cc: Likewise.\n\t* testsuite/20_util/is_nothrow_copy_constructible/value.cc: Likewise.\n\t* testsuite/20_util/is_nothrow_move_assignable/value.cc: Likewise.\n\t* testsuite/20_util/is_nothrow_move_constructible/value.cc: Likewise.\n\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust dg-error\n\tline number.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n\tLikewise.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\nFrom-SVN: r200080", "tree": {"sha": "41568700afc1e3357414f602caaee3f83b7a35b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41568700afc1e3357414f602caaee3f83b7a35b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8989803415aa72e38be56ea6d31ff240a1568ce1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8989803415aa72e38be56ea6d31ff240a1568ce1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8989803415aa72e38be56ea6d31ff240a1568ce1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8989803415aa72e38be56ea6d31ff240a1568ce1/comments", "author": {"login": "Dani-Hub", "id": 431432, "node_id": "MDQ6VXNlcjQzMTQzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/431432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dani-Hub", "html_url": "https://github.com/Dani-Hub", "followers_url": "https://api.github.com/users/Dani-Hub/followers", "following_url": "https://api.github.com/users/Dani-Hub/following{/other_user}", "gists_url": "https://api.github.com/users/Dani-Hub/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dani-Hub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dani-Hub/subscriptions", "organizations_url": "https://api.github.com/users/Dani-Hub/orgs", "repos_url": "https://api.github.com/users/Dani-Hub/repos", "events_url": "https://api.github.com/users/Dani-Hub/events{/privacy}", "received_events_url": "https://api.github.com/users/Dani-Hub/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "135faab69ac610c1c9d2e0228ed682222094b6ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/135faab69ac610c1c9d2e0228ed682222094b6ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/135faab69ac610c1c9d2e0228ed682222094b6ac"}], "stats": {"total": 348, "additions": 270, "deletions": 78}, "files": [{"sha": "d90525d2c8a7fe407df91a3efebedf582bbb728e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8989803415aa72e38be56ea6d31ff240a1568ce1", "patch": "@@ -1,3 +1,37 @@\n+2013-06-13  Daniel Krugler  <daniel.kruegler@gmail.com>\n+\n+\t* include/std/type_traits (is_function): Support ref-qualified\n+\tfunctions.\n+\t(is_copy_constructible, is_move_constructible, is_copy_assignable,\n+\tis_move_assignable, is_nothrow_copy_constructible,\n+\tis_nothrow_move_constructible, is_nothrow_copy_assignable,\n+\tis_nothrow_move_assignable): Implement LWG 2196.\n+\t(add_lvalue_reference, add_rvalue_reference, add_pointer): Implement\n+\tLWG 2101.\n+\t(__strip_reference_wrapper<<const reference_wrapper<_Tp>>): Remove,\n+\tunused.\n+\t* testsuite/20_util/add_lvalue_reference/value.cc: Extend.\n+\t* testsuite/20_util/add_rvalue_reference/value.cc: Likewise.\n+\t* testsuite/20_util/decay/requirements/typedefs.cc: Likewise.\n+\t* testsuite/20_util/is_assignable/value.cc: Likewise.\n+\t* testsuite/20_util/is_constructible/value-2.cc: Likewise.\n+\t* testsuite/20_util/is_copy_assignable/value.cc: Likewise.\n+\t* testsuite/20_util/is_copy_constructible/value.cc: Likewise.\n+\t* testsuite/20_util/is_function/value.cc: Likewise.\n+\t* testsuite/20_util/is_move_assignable/value.cc: Likewise.\n+\t* testsuite/20_util/is_move_constructible/value.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_copy_assignable/value.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_copy_constructible/value.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_move_assignable/value.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_move_constructible/value.cc: Likewise.\n+\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust dg-error\n+\tline number.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\n 2013-06-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/tr1/modified_bessel_func.tcc (__gnu_cxx::__airy_ai(),"}, {"sha": "eef9df6998c1487736808deb62509905cc198d1b", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 119, "deletions": 43, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=8989803415aa72e38be56ea6d31ff240a1568ce1", "patch": "@@ -376,34 +376,98 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct is_function<_Res(_ArgTypes...)>\n     : public true_type { };\n \n+  template<typename _Res, typename... _ArgTypes>\n+    struct is_function<_Res(_ArgTypes...) &>\n+    : public true_type { };\n+\n+  template<typename _Res, typename... _ArgTypes>\n+    struct is_function<_Res(_ArgTypes...) &&>\n+    : public true_type { };\n+\n   template<typename _Res, typename... _ArgTypes>\n     struct is_function<_Res(_ArgTypes......)>\n     : public true_type { };\n \n+  template<typename _Res, typename... _ArgTypes>\n+    struct is_function<_Res(_ArgTypes......) &>\n+    : public true_type { };\n+\n+  template<typename _Res, typename... _ArgTypes>\n+    struct is_function<_Res(_ArgTypes......) &&>\n+    : public true_type { };\n+\n   template<typename _Res, typename... _ArgTypes>\n     struct is_function<_Res(_ArgTypes...) const>\n     : public true_type { };\n \n+  template<typename _Res, typename... _ArgTypes>\n+    struct is_function<_Res(_ArgTypes...) const &>\n+    : public true_type { };\n+\n+  template<typename _Res, typename... _ArgTypes>\n+    struct is_function<_Res(_ArgTypes...) const &&>\n+    : public true_type { };\n+\n   template<typename _Res, typename... _ArgTypes>\n     struct is_function<_Res(_ArgTypes......) const>\n     : public true_type { };\n \n+  template<typename _Res, typename... _ArgTypes>\n+    struct is_function<_Res(_ArgTypes......) const &>\n+    : public true_type { };\n+\n+  template<typename _Res, typename... _ArgTypes>\n+    struct is_function<_Res(_ArgTypes......) const &&>\n+    : public true_type { };\n+\n   template<typename _Res, typename... _ArgTypes>\n     struct is_function<_Res(_ArgTypes...) volatile>\n     : public true_type { };\n \n+  template<typename _Res, typename... _ArgTypes>\n+    struct is_function<_Res(_ArgTypes...) volatile &>\n+    : public true_type { };\n+\n+  template<typename _Res, typename... _ArgTypes>\n+    struct is_function<_Res(_ArgTypes...) volatile &&>\n+    : public true_type { };\n+\n   template<typename _Res, typename... _ArgTypes>\n     struct is_function<_Res(_ArgTypes......) volatile>\n     : public true_type { };\n \n+  template<typename _Res, typename... _ArgTypes>\n+    struct is_function<_Res(_ArgTypes......) volatile &>\n+    : public true_type { };\n+\n+  template<typename _Res, typename... _ArgTypes>\n+    struct is_function<_Res(_ArgTypes......) volatile &&>\n+    : public true_type { };\n+\n   template<typename _Res, typename... _ArgTypes>\n     struct is_function<_Res(_ArgTypes...) const volatile>\n     : public true_type { };\n \n+  template<typename _Res, typename... _ArgTypes>\n+    struct is_function<_Res(_ArgTypes...) const volatile &>\n+    : public true_type { };\n+\n+  template<typename _Res, typename... _ArgTypes>\n+    struct is_function<_Res(_ArgTypes...) const volatile &&>\n+    : public true_type { };\n+\n   template<typename _Res, typename... _ArgTypes>\n     struct is_function<_Res(_ArgTypes......) const volatile>\n     : public true_type { };\n \n+  template<typename _Res, typename... _ArgTypes>\n+    struct is_function<_Res(_ArgTypes......) const volatile &>\n+    : public true_type { };\n+\n+  template<typename _Res, typename... _ArgTypes>\n+    struct is_function<_Res(_ArgTypes......) const volatile &&>\n+    : public true_type { };\n+\n   template<typename>\n     struct __is_null_pointer_helper\n     : public false_type { };\n@@ -482,6 +546,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __is_member_pointer_helper<typename remove_cv<_Tp>::type>::type\n     { };\n \n+  // Utility to detect referenceable types ([defns.referenceable]).\n+\n+  template<typename _Tp>\n+    struct __is_referenceable\n+    : public __or_<is_object<_Tp>, is_reference<_Tp>>::type\n+    { };\n+\n+  template<typename _Res, typename... _Args>\n+    struct __is_referenceable<_Res(_Args...)>\n+    : public true_type\n+    { };\n+\n+  template<typename _Res, typename... _Args>\n+    struct __is_referenceable<_Res(_Args......)>\n+    : public true_type\n+    { };\n+\n   // Type properties.\n \n   /// is_const\n@@ -947,15 +1028,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __is_constructible_impl<_Tp, _Args...>::type\n     { };\n \n-  template<typename _Tp, bool = is_void<_Tp>::value>\n+  template<typename _Tp, bool = __is_referenceable<_Tp>::value>\n     struct __is_copy_constructible_impl;\n \n   template<typename _Tp>\n-    struct __is_copy_constructible_impl<_Tp, true>\n+    struct __is_copy_constructible_impl<_Tp, false>\n     : public false_type { };\n \n   template<typename _Tp>\n-    struct __is_copy_constructible_impl<_Tp, false>\n+    struct __is_copy_constructible_impl<_Tp, true>\n     : public is_constructible<_Tp, const _Tp&>\n     { };\n \n@@ -965,15 +1046,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __is_copy_constructible_impl<_Tp>\n     { };\n \n-  template<typename _Tp, bool = is_void<_Tp>::value>\n+  template<typename _Tp, bool = __is_referenceable<_Tp>::value>\n     struct __is_move_constructible_impl;\n \n   template<typename _Tp>\n-    struct __is_move_constructible_impl<_Tp, true>\n+    struct __is_move_constructible_impl<_Tp, false>\n     : public false_type { };\n \n   template<typename _Tp>\n-    struct __is_move_constructible_impl<_Tp, false>\n+    struct __is_move_constructible_impl<_Tp, true>\n     : public is_constructible<_Tp, _Tp&&>\n     { };\n \n@@ -1033,15 +1114,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t    __is_nt_constructible_impl<_Tp, _Args...>>::type\n     { };\n \n-  template<typename _Tp, bool = is_void<_Tp>::value>\n+  template<typename _Tp, bool = __is_referenceable<_Tp>::value>\n     struct __is_nothrow_copy_constructible_impl;\n \n   template<typename _Tp>\n-    struct __is_nothrow_copy_constructible_impl<_Tp, true>\n+    struct __is_nothrow_copy_constructible_impl<_Tp, false>\n     : public false_type { };\n \n   template<typename _Tp>\n-    struct __is_nothrow_copy_constructible_impl<_Tp, false>\n+    struct __is_nothrow_copy_constructible_impl<_Tp, true>\n     : public is_nothrow_constructible<_Tp, const _Tp&>\n     { };\n \n@@ -1051,15 +1132,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __is_nothrow_copy_constructible_impl<_Tp>\n     { };\n \n-  template<typename _Tp, bool = is_void<_Tp>::value>\n+  template<typename _Tp, bool = __is_referenceable<_Tp>::value>\n     struct __is_nothrow_move_constructible_impl;\n \n   template<typename _Tp>\n-    struct __is_nothrow_move_constructible_impl<_Tp, true>\n+    struct __is_nothrow_move_constructible_impl<_Tp, false>\n     : public false_type { };\n \n   template<typename _Tp>\n-    struct __is_nothrow_move_constructible_impl<_Tp, false>\n+    struct __is_nothrow_move_constructible_impl<_Tp, true>\n     : public is_nothrow_constructible<_Tp, _Tp&&>\n     { };\n \n@@ -1091,15 +1172,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : public __is_assignable_helper<_Tp, _Up>::type\n     { };\n \n-  template<typename _Tp, bool = is_void<_Tp>::value>\n+  template<typename _Tp, bool = __is_referenceable<_Tp>::value>\n     struct __is_copy_assignable_impl;\n \n   template<typename _Tp>\n-    struct __is_copy_assignable_impl<_Tp, true>\n+    struct __is_copy_assignable_impl<_Tp, false>\n     : public false_type { };\n \n   template<typename _Tp>\n-    struct __is_copy_assignable_impl<_Tp, false>\n+    struct __is_copy_assignable_impl<_Tp, true>\n     : public is_assignable<_Tp&, const _Tp&>\n     { };\n \n@@ -1109,15 +1190,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __is_copy_assignable_impl<_Tp>\n     { };\n \n-  template<typename _Tp, bool = is_void<_Tp>::value>\n+  template<typename _Tp, bool = __is_referenceable<_Tp>::value>\n     struct __is_move_assignable_impl;\n \n   template<typename _Tp>\n-    struct __is_move_assignable_impl<_Tp, true>\n+    struct __is_move_assignable_impl<_Tp, false>\n     : public false_type { };\n \n   template<typename _Tp>\n-    struct __is_move_assignable_impl<_Tp, false>\n+    struct __is_move_assignable_impl<_Tp, true>\n     : public is_assignable<_Tp&, _Tp&&>\n     { };\n \n@@ -1139,15 +1220,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t    __is_nt_assignable_impl<_Tp, _Up>>::type\n     { };\n \n-  template<typename _Tp, bool = is_void<_Tp>::value>\n+  template<typename _Tp, bool = __is_referenceable<_Tp>::value>\n     struct __is_nt_copy_assignable_impl;\n \n   template<typename _Tp>\n-    struct __is_nt_copy_assignable_impl<_Tp, true>\n+    struct __is_nt_copy_assignable_impl<_Tp, false>\n     : public false_type { };\n \n   template<typename _Tp>\n-    struct __is_nt_copy_assignable_impl<_Tp, false>\n+    struct __is_nt_copy_assignable_impl<_Tp, true>\n     : public is_nothrow_assignable<_Tp&, const _Tp&>\n     { };\n \n@@ -1157,15 +1238,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __is_nt_copy_assignable_impl<_Tp>\n     { };\n \n-  template<typename _Tp, bool = is_void<_Tp>::value>\n+  template<typename _Tp, bool = __is_referenceable<_Tp>::value>\n     struct __is_nt_move_assignable_impl;\n \n   template<typename _Tp>\n-    struct __is_nt_move_assignable_impl<_Tp, true>\n+    struct __is_nt_move_assignable_impl<_Tp, false>\n     : public false_type { };\n \n   template<typename _Tp>\n-    struct __is_nt_move_assignable_impl<_Tp, false>\n+    struct __is_nt_move_assignable_impl<_Tp, true>\n     : public is_nothrow_assignable<_Tp&, _Tp&&>\n     { };\n \n@@ -1373,30 +1454,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct remove_reference<_Tp&&>\n     { typedef _Tp   type; };\n \n-  template<typename _Tp,\n-\t   bool = __and_<__not_<is_reference<_Tp>>,\n-                         __not_<is_void<_Tp>>>::value,\n-\t   bool = is_rvalue_reference<_Tp>::value>\n+  template<typename _Tp, bool = __is_referenceable<_Tp>::value>\n     struct __add_lvalue_reference_helper\n     { typedef _Tp   type; };\n \n   template<typename _Tp>\n-    struct __add_lvalue_reference_helper<_Tp, true, false>\n+    struct __add_lvalue_reference_helper<_Tp, true>\n     { typedef _Tp&   type; };\n \n-  template<typename _Tp>\n-    struct __add_lvalue_reference_helper<_Tp, false, true>\n-    { typedef typename remove_reference<_Tp>::type&   type; };\n-\n   /// add_lvalue_reference\n   template<typename _Tp>\n     struct add_lvalue_reference\n     : public __add_lvalue_reference_helper<_Tp>\n     { };\n \n-  template<typename _Tp,\n-           bool = __and_<__not_<is_reference<_Tp>>,\n-                         __not_<is_void<_Tp>>>::value>\n+  template<typename _Tp, bool = __is_referenceable<_Tp>::value>\n     struct __add_rvalue_reference_helper\n     { typedef _Tp   type; };\n \n@@ -1654,10 +1726,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n \n   /// add_pointer\n+  template<typename _Tp, bool = __or_<__is_referenceable<_Tp>,\n+\t\t\t\t      is_void<_Tp>>::value>\n+    struct __add_pointer_helper\n+    { typedef _Tp     type; };\n+\n   template<typename _Tp>\n-    struct add_pointer\n+    struct __add_pointer_helper<_Tp, true>\n     { typedef typename remove_reference<_Tp>::type*     type; };\n \n+  template<typename _Tp>\n+    struct add_pointer \n+    : public __add_pointer_helper<_Tp>\n+    { };\n+\n \n   template<std::size_t _Len>\n     struct __aligned_storage_msa\n@@ -1737,12 +1819,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Tp& __type;\n     };\n \n-  template<typename _Tp>\n-    struct __strip_reference_wrapper<const reference_wrapper<_Tp> >\n-    {\n-      typedef _Tp& __type;\n-    };\n-\n   template<typename _Tp>\n     struct __decay_and_strip\n     {"}, {"sha": "152f03a6cb1434a4a5c5b0338a9931af5e9c3f57", "filename": "libstdc++-v3/testsuite/20_util/add_lvalue_reference/value.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_lvalue_reference%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_lvalue_reference%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_lvalue_reference%2Fvalue.cc?ref=8989803415aa72e38be56ea6d31ff240a1568ce1", "patch": "@@ -40,6 +40,10 @@ void test01()\n   VERIFY( (is_same<add_lvalue_reference<ClassType&&>::type, ClassType&>::value) );\n   VERIFY( (is_same<add_lvalue_reference<void>::type, void>::value) );\n   VERIFY( (is_same<add_lvalue_reference<const void>::type, const void>::value) );  \n+  VERIFY( (is_same<add_lvalue_reference<bool(int) const>::type, bool(int) const>::value) );  \n+  VERIFY( (is_same<add_lvalue_reference<bool(int) &>::type, bool(int) &>::value) );  \n+  VERIFY( (is_same<add_lvalue_reference<bool(int) const &&>::type, bool(int) const &&>::value) );  \n+  VERIFY( (is_same<add_lvalue_reference<bool(int)>::type, bool(&)(int)>::value) );  \n }\n \n int main()"}, {"sha": "7dcb1dcec986a3826bf3feaec56757c3985b10c6", "filename": "libstdc++-v3/testsuite/20_util/add_rvalue_reference/value.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_rvalue_reference%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_rvalue_reference%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_rvalue_reference%2Fvalue.cc?ref=8989803415aa72e38be56ea6d31ff240a1568ce1", "patch": "@@ -31,13 +31,18 @@ void test01()\n \n   VERIFY( (is_same<add_rvalue_reference<int>::type, int&&>::value) );\n   VERIFY( (is_same<add_rvalue_reference<int&&>::type, int&&>::value) );\n+  VERIFY( (is_same<add_rvalue_reference<int&>::type, int&>::value) );\n   VERIFY( (is_same<add_rvalue_reference<const int>::type, const int&&>::value) );\n   VERIFY( (is_same<add_rvalue_reference<int*>::type, int*&&>::value) );\n   VERIFY( (is_same<add_rvalue_reference<ClassType&&>::type, ClassType&&>::value) );\n   VERIFY( (is_same<add_rvalue_reference<ClassType>::type, ClassType&&>::value) );\n   VERIFY( (is_same<add_rvalue_reference<int(int)>::type, int(&&)(int)>::value) );\n   VERIFY( (is_same<add_rvalue_reference<void>::type, void>::value) );\n   VERIFY( (is_same<add_rvalue_reference<const void>::type, const void>::value) );  \n+  VERIFY( (is_same<add_rvalue_reference<bool(int) const>::type, bool(int) const>::value) );  \n+  VERIFY( (is_same<add_rvalue_reference<bool(int) &>::type, bool(int) &>::value) );  \n+  VERIFY( (is_same<add_rvalue_reference<bool(int) const &&>::type, bool(int) const &&>::value) );  \n+  VERIFY( (is_same<add_rvalue_reference<bool(int)>::type, bool(&&)(int)>::value) );  \n }\n \n int main()"}, {"sha": "51b2c5fa0c4efc5a79e11f9c7125911e70f6f7dd", "filename": "libstdc++-v3/testsuite/20_util/decay/requirements/typedefs.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdecay%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdecay%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdecay%2Frequirements%2Ftypedefs.cc?ref=8989803415aa72e38be56ea6d31ff240a1568ce1", "patch": "@@ -43,6 +43,10 @@ void test01()\n   typedef void (fn_type) ();\n   typedef decay<fn_type>::type  \ttest4_type;\n   VERIFY( (is_same<test4_type, std::add_pointer<fn_type>::type>::value) );\n+\n+  typedef void (cfn_type) () const;\n+  typedef decay<cfn_type>::type  \ttest5_type;\n+  VERIFY( (is_same<test5_type, cfn_type>::value) );\n }\n \n int main()"}, {"sha": "1aeba824ec5ee96769d9580cd136266eb031039e", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=8989803415aa72e38be56ea6d31ff240a1568ce1", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 1862 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 1938 }\n \n #include <utility>\n "}, {"sha": "396b2452c8764eb0b541ad38bf7b7bfcae0bef1a", "filename": "libstdc++-v3/testsuite/20_util/is_assignable/value.cc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_assignable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_assignable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_assignable%2Fvalue.cc?ref=8989803415aa72e38be56ea6d31ff240a1568ce1", "patch": "@@ -277,8 +277,8 @@ static_assert(!std::is_assignable<DelAnyAssign&, int&>::value, \"Error\");\n static_assert(!std::is_assignable<DelAnyAssign&, const int&>::value, \"Error\");\n static_assert(!std::is_assignable<DelAnyAssign&, void>::value, \"Error\");\n static_assert(!std::is_assignable<DelAnyAssign&, void()>::value, \"Error\");\n-// static_assert(!std::is_assignable<DelAnyAssign&, void()\n-// const>::value, \"Error\");\n+static_assert(!std::is_assignable<DelAnyAssign&, \n+  void() const>::value, \"Error\");\n static_assert(!std::is_assignable<DelAnyAssign&, void(&)()>::value, \"Error\");\n static_assert(!std::is_assignable<DelAnyAssign&, void(&&)()>::value, \"Error\");\n static_assert(!std::is_assignable<DelAnyAssign&,\n@@ -580,6 +580,9 @@ static_assert(!std::is_assignable<const UAssignAll&,\n UAssignAll&>::value, \"Error\");\n static_assert(!std::is_assignable<const UAssignAll&, const\n UAssignAll&>::value, \"Error\");\n+static_assert(!std::is_assignable<UAssignAll&, void() const>::value, \"Error\");\n+static_assert(!std::is_assignable<UAssignAll&, void() &>::value, \"Error\");\n+static_assert(!std::is_assignable<UAssignAll&, void() const volatile &&>::value, \"Error\");\n \n static_assert(std::is_assignable<UAssignAll&, int>::value, \"Error\");\n static_assert(std::is_assignable<UAssignAll&, int&>::value, \"Error\");\n@@ -600,7 +603,6 @@ static_assert(std::is_assignable<UAssignAll&,\n std::nullptr_t&>::value, \"Error\");\n static_assert(std::is_assignable<UAssignAll&, void()>::value, \"Error\");\n static_assert(std::is_assignable<UAssignAll&, void(&)()>::value, \"Error\");\n-//static_assert(std::is_assignable<UAssignAll&, void() const>::value, \"Error\");\n static_assert(std::is_assignable<UAssignAll&, void(*)()>::value, \"Error\");\n static_assert(std::is_assignable<UAssignAll&, void(*&)()>::value, \"Error\");\n static_assert(std::is_assignable<UAssignAll&, int*>::value, \"Error\");\n@@ -636,8 +638,8 @@ static_assert(!std::is_assignable<UDelAssignAll&,\n std::nullptr_t&>::value, \"Error\");\n static_assert(!std::is_assignable<UDelAssignAll&, void()>::value, \"Error\");\n static_assert(!std::is_assignable<UDelAssignAll&, void(&)()>::value, \"Error\");\n-// static_assert(!std::is_assignable<UDelAssignAll&, void()\n-// const>::value, \"Error\");\n+static_assert(!std::is_assignable<UDelAssignAll&, void()\n+ const>::value, \"Error\");\n static_assert(!std::is_assignable<UDelAssignAll&, void(*)()>::value, \"Error\");\n static_assert(!std::is_assignable<UDelAssignAll&, void(*&)()>::value, \"Error\");\n static_assert(!std::is_assignable<UDelAssignAll&, int*>::value, \"Error\");"}, {"sha": "1a6f264c243527cfd5ad2887b8e550ca0a0ec9be", "filename": "libstdc++-v3/testsuite/20_util/is_constructible/value-2.cc", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue-2.cc?ref=8989803415aa72e38be56ea6d31ff240a1568ce1", "patch": "@@ -72,8 +72,8 @@ static_assert(!std::is_constructible<DelEllipsis, SE>::value, \"Error\");\n static_assert(!std::is_constructible<DelEllipsis, OpE>::value, \"Error\");\n static_assert(!std::is_constructible<DelEllipsis, OpSE>::value, \"Error\");\n static_assert(!std::is_constructible<DelEllipsis, void()>::value, \"Error\");\n-// static_assert(!std::is_constructible<DelEllipsis, void() const>::value,\n-// \t      \"Error\");\n+static_assert(!std::is_constructible<DelEllipsis, void() const>::value,\n+ \t      \"Error\");\n static_assert(!std::is_constructible<DelEllipsis, int[1]>::value, \"Error\");\n static_assert(!std::is_constructible<DelEllipsis, int[]>::value, \"Error\");\n static_assert(!std::is_constructible<DelEllipsis, int*>::value, \"Error\");\n@@ -461,20 +461,20 @@ static_assert(!std::is_constructible<OpSE, void()>::value, \"Error\");\n static_assert(!std::is_constructible<int[], void()>::value, \"Error\");\n static_assert(!std::is_constructible<int[1], void()>::value, \"Error\");\n \n-// static_assert(!std::is_constructible<void(int) const,\n-// \t      void() const>::value, \"Error\");\n-// static_assert(!std::is_constructible<int, void() const>::value, \"Error\");\n-// static_assert(!std::is_constructible<Abstract, void() const>::value, \"Error\");\n-// static_assert(!std::is_constructible<std::nullptr_t, void() const>::value,\n-// \t      \"Error\");\n-// static_assert(!std::is_constructible<Empty, void() const>::value, \"Error\");\n-// static_assert(!std::is_constructible<U, void() const>::value, \"Error\");\n-// static_assert(!std::is_constructible<E, void() const>::value, \"Error\");\n-// static_assert(!std::is_constructible<SE, void() const>::value, \"Error\");\n-// static_assert(!std::is_constructible<OpE, void() const>::value, \"Error\");\n-// static_assert(!std::is_constructible<OpSE, void() const>::value, \"Error\");\n-// static_assert(!std::is_constructible<int[], void() const>::value, \"Error\");\n-// static_assert(!std::is_constructible<int[1], void() const>::value, \"Error\");\n+static_assert(!std::is_constructible<void(int) const,\n+      void() const>::value, \"Error\");\n+static_assert(!std::is_constructible<int, void() const>::value, \"Error\");\n+static_assert(!std::is_constructible<Abstract, void() const>::value, \"Error\");\n+static_assert(!std::is_constructible<std::nullptr_t, void() const>::value,\n+      \"Error\");\n+static_assert(!std::is_constructible<Empty, void() const>::value, \"Error\");\n+static_assert(!std::is_constructible<U, void() const>::value, \"Error\");\n+static_assert(!std::is_constructible<E, void() const>::value, \"Error\");\n+static_assert(!std::is_constructible<SE, void() const>::value, \"Error\");\n+static_assert(!std::is_constructible<OpE, void() const>::value, \"Error\");\n+static_assert(!std::is_constructible<OpSE, void() const>::value, \"Error\");\n+static_assert(!std::is_constructible<int[], void() const>::value, \"Error\");\n+static_assert(!std::is_constructible<int[1], void() const>::value, \"Error\");\n \n static_assert(!std::is_constructible<void, int, int>::value, \"Error\");\n static_assert(!std::is_constructible<void, Empty, B>::value, \"Error\");\n@@ -488,8 +488,8 @@ static_assert(!std::is_constructible<void, int[], int[]>::value, \"Error\");\n static_assert(!std::is_constructible<void, void, int>::value, \"Error\");\n static_assert(!std::is_constructible<void, void, void>::value, \"Error\");\n static_assert(!std::is_constructible<void, void(), void()>::value, \"Error\");\n-// static_assert(!std::is_constructible<void, void() const,\n-// \t      void() volatile>::value, \"Error\");\n+static_assert(!std::is_constructible<void, void() const,\n+\t      void() volatile>::value, \"Error\");\n \n static_assert(!std::is_constructible<int, int, int>::value, \"Error\");\n static_assert(!std::is_constructible<const int, int, int>::value, \"Error\");\n@@ -651,13 +651,13 @@ static_assert(!std::is_constructible<void(), void, void>::value, \"Error\");\n static_assert(!std::is_constructible<void(), void(), int>::value, \"Error\");\n static_assert(!std::is_constructible<void(), void(), void()>::value, \"Error\");\n \n-// static_assert(!std::is_constructible<void() const, int, int>::value, \"Error\");\n-// static_assert(!std::is_constructible<void() const, void, int>::value, \"Error\");\n-// static_assert(!std::is_constructible<void() const, void, void>::value, \"Error\");\n-// static_assert(!std::is_constructible<void() const, void() volatile,\n-// \t      int>::value, \"Error\");\n-// static_assert(!std::is_constructible<void() const, void() volatile const,\n-// \t      void() const>::value, \"Error\");\n+static_assert(!std::is_constructible<void() const, int, int>::value, \"Error\");\n+static_assert(!std::is_constructible<void() const, void, int>::value, \"Error\");\n+static_assert(!std::is_constructible<void() const, void, void>::value, \"Error\");\n+static_assert(!std::is_constructible<void() const, void() volatile,\n+\t      int>::value, \"Error\");\n+static_assert(!std::is_constructible<void() const, void() volatile const,\n+ \t      void() const>::value, \"Error\");\n \n static_assert(!std::is_constructible<FromArgs<int>, int, int>::value, \"Error\");\n static_assert(!std::is_constructible<const FromArgs<int>, int, int>::value,"}, {"sha": "af5e3ba777a9739f9e3428881f8fbd2fda15e88c", "filename": "libstdc++-v3/testsuite/20_util/is_copy_assignable/value.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_copy_assignable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_copy_assignable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_copy_assignable%2Fvalue.cc?ref=8989803415aa72e38be56ea6d31ff240a1568ce1", "patch": "@@ -52,6 +52,14 @@ void test01()\n \t   int (ClassType::*[2][3])>(false)) );\n   VERIFY( (test_property<is_copy_assignable, \n \t   int (ClassType::*[][2][3]) (int)>(false)) );\n+  VERIFY( (test_property<is_copy_assignable, \n+       ClassType(unsigned) const &>(false)) );\n+  VERIFY( (test_property<is_copy_assignable, \n+       bool(ClassType) const>(false)) );\n+  VERIFY( (test_property<is_copy_assignable, \n+       bool(...) &&>(false)) );\n+  VERIFY( (test_property<is_copy_assignable, \n+       EnumType(int, ...)>(false)) );\n \n   VERIFY( (test_property<is_copy_assignable, NoexceptMoveAssignClass>(false)) );\n   VERIFY( (test_property<is_copy_assignable, ExceptMoveAssignClass>(false)) );"}, {"sha": "0a9686d67e1754c61607b58c59bc120d8d438120", "filename": "libstdc++-v3/testsuite/20_util/is_copy_constructible/value.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_copy_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_copy_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_copy_constructible%2Fvalue.cc?ref=8989803415aa72e38be56ea6d31ff240a1568ce1", "patch": "@@ -61,6 +61,14 @@ void test01()\n \t   int (ClassType::*[2][3])>(false)) );\n   VERIFY( (test_category<is_copy_constructible,\n \t   int (ClassType::*[][2][3]) (int)>(false)) );\n+  VERIFY( (test_category<is_copy_constructible, \n+       ClassType(unsigned) const &>(false)) );\n+  VERIFY( (test_category<is_copy_constructible, \n+       bool(ClassType) const>(false)) );\n+  VERIFY( (test_category<is_copy_constructible, \n+       bool(...) &&>(false)) );\n+  VERIFY( (test_category<is_copy_constructible, \n+       EnumType(int, ...)>(false)) );\n \n   VERIFY( (test_property<is_copy_constructible,\n \t   volatile NoexceptCopyConsClass>(false)) );"}, {"sha": "ce52ac9872d1e865fe81a4585297ee582e3c41fc", "filename": "libstdc++-v3/testsuite/20_util/is_function/value.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_function%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_function%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_function%2Fvalue.cc?ref=8989803415aa72e38be56ea6d31ff240a1568ce1", "patch": "@@ -32,6 +32,9 @@ void test01()\n   VERIFY( (test_category<is_function, ClassType (ClassType)>(true)) );\n   VERIFY( (test_category<is_function, float (int, float, int[], int&)>(true)) );\n   VERIFY( (test_category<is_function, int (int, ...)>(true)) );\n+  VERIFY( (test_category<is_function, bool (ClassType) const>(true)) );\n+  VERIFY( (test_category<is_function, ClassType () &>(true)) );\n+  VERIFY( (test_category<is_function, char (int, ClassType) const volatile &&>(true)) );\n \n   // Negative tests.\n   VERIFY( (test_category<is_function, int&>(false)) );"}, {"sha": "c96f739a63550ea8af33a2c3bc3b12d9a1485859", "filename": "libstdc++-v3/testsuite/20_util/is_move_assignable/value.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_move_assignable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_move_assignable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_move_assignable%2Fvalue.cc?ref=8989803415aa72e38be56ea6d31ff240a1568ce1", "patch": "@@ -54,6 +54,14 @@ void test01()\n \t   int (ClassType::*[2][3])>(false)) );\n   VERIFY( (test_property<is_move_assignable, \n \t   int (ClassType::*[][2][3]) (int)>(false)) );\n+  VERIFY( (test_property<is_move_assignable, \n+       ClassType(unsigned) const &>(false)) );\n+  VERIFY( (test_property<is_move_assignable, \n+       bool(ClassType) const>(false)) );\n+  VERIFY( (test_property<is_move_assignable, \n+       bool(...) &&>(false)) );\n+  VERIFY( (test_property<is_move_assignable, \n+       EnumType(int, ...)>(false)) );\n \n   VERIFY( (test_property<is_move_assignable, DeletedCopyAssignClass>(false)) );\n   VERIFY( (test_property<is_move_assignable, DeletedMoveAssignClass>(false)) );"}, {"sha": "94af3e1ba14d16d92a71f7162afb20d98b05e419", "filename": "libstdc++-v3/testsuite/20_util/is_move_constructible/value.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_move_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_move_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_move_constructible%2Fvalue.cc?ref=8989803415aa72e38be56ea6d31ff240a1568ce1", "patch": "@@ -59,6 +59,14 @@ void test01()\n \t   int (ClassType::*[2][3])>(false)) );\n   VERIFY( (test_category<is_move_constructible,\n \t   int (ClassType::*[][2][3]) (int)>(false)) );\n+  VERIFY( (test_category<is_move_constructible, \n+       ClassType(unsigned) const &>(false)) );\n+  VERIFY( (test_category<is_move_constructible, \n+       bool(ClassType) const>(false)) );\n+  VERIFY( (test_category<is_move_constructible, \n+       bool(...) &&>(false)) );\n+  VERIFY( (test_category<is_move_constructible, \n+       EnumType(int, ...)>(false)) );\n \n   VERIFY( (test_property<is_move_constructible,\n \t   const NoexceptMoveConsClass>(false)) );"}, {"sha": "72ce0a069f1c11768fef5408aa176ee0be0dac0e", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_copy_assignable/value.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_copy_assignable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_copy_assignable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_copy_assignable%2Fvalue.cc?ref=8989803415aa72e38be56ea6d31ff240a1568ce1", "patch": "@@ -55,6 +55,14 @@ void test01()\n \t   int (ClassType::*[2][3])>(false)) );\n   VERIFY( (test_property<is_nothrow_copy_assignable, \n \t   int (ClassType::*[][2][3]) (int)>(false)) );\n+  VERIFY( (test_property<is_nothrow_copy_assignable, \n+       ClassType(unsigned) const &>(false)) );\n+  VERIFY( (test_property<is_nothrow_copy_assignable, \n+       bool(ClassType) const>(false)) );\n+  VERIFY( (test_property<is_nothrow_copy_assignable, \n+       bool(...) &&>(false)) );\n+  VERIFY( (test_property<is_nothrow_copy_assignable, \n+       EnumType(int, ...)>(false)) );\n \n   VERIFY( (test_property<is_nothrow_copy_assignable,\n \t   ExceptCopyAssignClass>(false)) );"}, {"sha": "33d82af54e95e3e047f6d1728a9df0657ea5dbc1", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_copy_constructible/value.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_copy_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_copy_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_copy_constructible%2Fvalue.cc?ref=8989803415aa72e38be56ea6d31ff240a1568ce1", "patch": "@@ -58,6 +58,14 @@ void test01()\n \t   int (ClassType::*[2][3])>(false)) );\n   VERIFY( (test_category<is_nothrow_copy_constructible,\n \t   int (ClassType::*[][2][3]) (int)>(false)) );\n+  VERIFY( (test_category<is_nothrow_copy_constructible, \n+       ClassType(unsigned) const &>(false)) );\n+  VERIFY( (test_category<is_nothrow_copy_constructible, \n+       bool(ClassType) const>(false)) );\n+  VERIFY( (test_category<is_nothrow_copy_constructible, \n+       bool(...) &&>(false)) );\n+  VERIFY( (test_category<is_nothrow_copy_constructible, \n+       EnumType(int, ...)>(false)) );\n \n   VERIFY( (test_property<is_nothrow_copy_constructible,\n \t   volatile NoexceptCopyConsClass>(false)) );"}, {"sha": "54d94c2f234629e5fd578c5b841f157a6ade28d8", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_move_assignable/value.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_move_assignable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_move_assignable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_move_assignable%2Fvalue.cc?ref=8989803415aa72e38be56ea6d31ff240a1568ce1", "patch": "@@ -57,6 +57,14 @@ void test01()\n \t   int (ClassType::*[2][3])>(false)) );\n   VERIFY( (test_property<is_nothrow_move_assignable, \n \t   int (ClassType::*[][2][3]) (int)>(false)) );\n+  VERIFY( (test_property<is_nothrow_move_assignable, \n+       ClassType(unsigned) const &>(false)) );\n+  VERIFY( (test_property<is_nothrow_move_assignable, \n+       bool(ClassType) const>(false)) );\n+  VERIFY( (test_property<is_nothrow_move_assignable, \n+       bool(...) &&>(false)) );\n+  VERIFY( (test_property<is_nothrow_move_assignable, \n+       EnumType(int, ...)>(false)) );\n \n   VERIFY( (test_property<is_nothrow_move_assignable,\n \t   ExceptMoveAssignClass>(false)) );"}, {"sha": "9afe428f7658f517c85c2b3e60264df3b1b41a0a", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_move_constructible/value.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_move_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_move_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_move_constructible%2Fvalue.cc?ref=8989803415aa72e38be56ea6d31ff240a1568ce1", "patch": "@@ -55,6 +55,14 @@ void test01()\n \t   int (ClassType::*[2][3])>(false)) );\n   VERIFY( (test_category<is_nothrow_move_constructible,\n \t   int (ClassType::*[][2][3]) (int)>(false)) );\n+  VERIFY( (test_category<is_nothrow_move_constructible, \n+       ClassType(unsigned) const &>(false)) );\n+  VERIFY( (test_category<is_nothrow_move_constructible, \n+       bool(ClassType) const>(false)) );\n+  VERIFY( (test_category<is_nothrow_move_constructible, \n+       bool(...) &&>(false)) );\n+  VERIFY( (test_category<is_nothrow_move_constructible, \n+       EnumType(int, ...)>(false)) );\n \n   VERIFY( (test_property<is_nothrow_move_constructible,\n \t   const NoexceptMoveConsClass>(false)) );"}, {"sha": "53090b345642b25a330cc1ac2e9af341370721ff", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=8989803415aa72e38be56ea6d31ff240a1568ce1", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1604 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1568 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1676 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1640 }"}, {"sha": "7b7e59911f45f72b4ffb1d75bcc59b2fba6e7ca3", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8989803415aa72e38be56ea6d31ff240a1568ce1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=8989803415aa72e38be56ea6d31ff240a1568ce1", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1522 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1486 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1594 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1558 }"}]}