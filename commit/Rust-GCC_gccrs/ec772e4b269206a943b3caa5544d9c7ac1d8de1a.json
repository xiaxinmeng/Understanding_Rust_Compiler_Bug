{"sha": "ec772e4b269206a943b3caa5544d9c7ac1d8de1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM3NzJlNGIyNjkyMDZhOTQzYjNjYWE1NTQ0ZDljN2FjMWQ4ZGUxYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-03-20T22:00:32Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-12T08:29:15Z"}, "message": "[Ada] Implement AI12-0175 Preelaborable packages with address clauses\n\n2020-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* rtsfind.ads (RTU_Id): Add System_Address_To_Access_Conversions.\n\t* sem_elab.adb (Elaboration_Phase_Active): Alphabetize.\n\t(Finalize_All_Data_Structures): Likewise.\n\t(Error_Preelaborated_Call): New procedure.\n\t(Build_Call_Marker): Set Is_Preelaborable_Call flag in marker.\n\t(Build_Access_Marker): Likewise.\n\t(Build_Subprogram_Invocation): Likewise.\n\t(Build_Task_Activation): Likewise.\n\t(Check_Preelaborated_Call): Return when the call is preelaborable.\n\tCall Error_Preelaborated_Call to give the error otherwise.\n\t(Check_Elab_Call): Likewise.\n\t* sem_util.adb (Is_Preelaborable_Function): New predicate.\n\t(Is_Non_Preelaborable_Construct.Visit): Recurse on the\n\tExplicit_Actual_Parameter field of N_Parameter_Association.\n\t(Is_Non_Preelaborable_Construct.Visit_Subexpression): In Ada 2020,\n\tfor a call to a preelaborable function, visit the parameter list;\n\totherwise, raise Non_Preelaborable exception.\n\t(Is_Preelaborable_Construct): Likewise, but recursively check the\n\tparameters instead and return false upon failure, otherwise true.\n\t* sinfo.ads (Is_Preelaborable_Call): New flag in call marker nodes.\n\t(Is_Preelaborable_Call): New inline function.\n\t(Set_Is_Preelaborable_Call): New inline procedure.\n\t* sinfo.adb (Is_Preelaborable_Call): New inline function.\n\t(Set_Is_Preelaborable_Call): New inline procedure.", "tree": {"sha": "2e4f88df493177cf8b9d464d87e8045c9450b5b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e4f88df493177cf8b9d464d87e8045c9450b5b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec772e4b269206a943b3caa5544d9c7ac1d8de1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec772e4b269206a943b3caa5544d9c7ac1d8de1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec772e4b269206a943b3caa5544d9c7ac1d8de1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec772e4b269206a943b3caa5544d9c7ac1d8de1a/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f6f89a494e3b9b2d9ed73589f04b54c3282a5ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f6f89a494e3b9b2d9ed73589f04b54c3282a5ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f6f89a494e3b9b2d9ed73589f04b54c3282a5ef"}], "stats": {"total": 200, "additions": 181, "deletions": 19}, "files": [{"sha": "ad113fd72444e8de4f50786d649e94a8bdc10f74", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec772e4b269206a943b3caa5544d9c7ac1d8de1a/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec772e4b269206a943b3caa5544d9c7ac1d8de1a/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=ec772e4b269206a943b3caa5544d9c7ac1d8de1a", "patch": "@@ -173,6 +173,7 @@ package Rtsfind is\n       --  Children of System\n \n       System_Address_Image,\n+      System_Address_To_Access_Conversions,\n       System_Arith_64,\n       System_AST_Handling,\n       System_Assertions,"}, {"sha": "8aa1ca7b15618022dfdd0fa188a1bcc14c878469", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 61, "deletions": 19, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec772e4b269206a943b3caa5544d9c7ac1d8de1a/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec772e4b269206a943b3caa5544d9c7ac1d8de1a/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=ec772e4b269206a943b3caa5544d9c7ac1d8de1a", "patch": "@@ -1952,6 +1952,18 @@ package body Sem_Elab is\n    pragma Inline (Compilation_Unit);\n    --  Return the N_Compilation_Unit node of unit Unit_Id\n \n+   function Elaboration_Phase_Active return Boolean;\n+   pragma Inline (Elaboration_Phase_Active);\n+   --  Determine whether the elaboration phase of the compilation has started\n+\n+   procedure Error_Preelaborated_Call (N : Node_Id);\n+   --  Give an error or warning for a non-static/non-preelaborable call in a\n+   --  preelaborated unit.\n+\n+   procedure Finalize_All_Data_Structures;\n+   pragma Inline (Finalize_All_Data_Structures);\n+   --  Destroy all internal data structures\n+\n    function Find_Enclosing_Instance (N : Node_Id) return Node_Id;\n    pragma Inline (Find_Enclosing_Instance);\n    --  Find the declaration or body of the nearest expanded instance which\n@@ -1972,14 +1984,6 @@ package body Sem_Elab is\n    --  Return the type of subprogram Subp_Id's first formal parameter. If the\n    --  subprogram lacks formal parameters, return Empty.\n \n-   function Elaboration_Phase_Active return Boolean;\n-   pragma Inline (Elaboration_Phase_Active);\n-   --  Determine whether the elaboration phase of the compilation has started\n-\n-   procedure Finalize_All_Data_Structures;\n-   pragma Inline (Finalize_All_Data_Structures);\n-   --  Destroy all internal data structures\n-\n    function Has_Body (Pack_Decl : Node_Id) return Boolean;\n    pragma Inline (Has_Body);\n    --  Determine whether package declaration Pack_Decl has a corresponding body\n@@ -3745,6 +3749,15 @@ package body Sem_Elab is\n       Set_Is_SPARK_Mode_On_Node (Marker, Is_SPARK_Mode_On_Node (N));\n       Set_Target                (Marker, Subp_Id);\n \n+      --  Ada 2020 (AI12-0175): Calls to certain functions that are essentially\n+      --  unchecked conversions are preelaborable.\n+\n+      if Ada_Version >= Ada_2020 then\n+         Set_Is_Preelaborable_Call (Marker, Is_Preelaborable_Construct (N));\n+      else\n+         Set_Is_Preelaborable_Call (Marker, False);\n+      end if;\n+\n       --  The marker is inserted prior to the original call. This placement has\n       --  several desirable effects:\n \n@@ -4878,6 +4891,8 @@ package body Sem_Elab is\n                        (Marker, Elaboration_Checks_OK (Attr_Rep));\n             Set_Is_Elaboration_Warnings_OK_Node\n                        (Marker, Elaboration_Warnings_OK (Attr_Rep));\n+            Set_Is_Preelaborable_Call\n+                       (Marker, False);\n             Set_Is_Source_Call\n                        (Marker, Comes_From_Source (Attr));\n             Set_Is_SPARK_Mode_On_Node\n@@ -8838,6 +8853,29 @@ package body Sem_Elab is\n       return Elaboration_Phase = Active;\n    end Elaboration_Phase_Active;\n \n+   ------------------------------\n+   -- Error_Preelaborated_Call --\n+   ------------------------------\n+\n+   procedure Error_Preelaborated_Call (N : Node_Id) is\n+   begin\n+      --  This is a warning in GNAT mode allowing such calls to be used in the\n+      --  predefined library units with appropriate care.\n+\n+      Error_Msg_Warn := GNAT_Mode;\n+\n+      --  Ada 2020 (AI12-0175): Calls to certain functions that are essentially\n+      --  unchecked conversions are preelaborable.\n+\n+      if Ada_Version >= Ada_2020 then\n+         Error_Msg_N\n+           (\"<<non-preelaborable call not allowed in preelaborated unit\", N);\n+      else\n+         Error_Msg_N\n+           (\"<<non-static call not allowed in preelaborated unit\", N);\n+      end if;\n+   end Error_Preelaborated_Call;\n+\n    ----------------------------------\n    -- Finalize_All_Data_Structures --\n    ----------------------------------\n@@ -11894,6 +11932,7 @@ package body Sem_Elab is\n          Set_Is_Elaboration_Checks_OK_Node   (Marker, False);\n          Set_Is_Elaboration_Warnings_OK_Node (Marker, False);\n          Set_Is_Ignored_Ghost_Node           (Marker, False);\n+         Set_Is_Preelaborable_Call           (Marker, False);\n          Set_Is_Source_Call                  (Marker, False);\n          Set_Is_SPARK_Mode_On_Node           (Marker, False);\n \n@@ -11933,6 +11972,7 @@ package body Sem_Elab is\n          Set_Is_Elaboration_Checks_OK_Node   (Marker, False);\n          Set_Is_Elaboration_Warnings_OK_Node (Marker, False);\n          Set_Is_Ignored_Ghost_Node           (Marker, False);\n+         Set_Is_Preelaborable_Call           (Marker, False);\n          Set_Is_Source_Call                  (Marker, False);\n          Set_Is_SPARK_Mode_On_Node           (Marker, False);\n \n@@ -13758,6 +13798,11 @@ package body Sem_Elab is\n          if not Is_Source_Call (Call) then\n             return;\n \n+         --  Nothing to do when the call is preelaborable by definition\n+\n+         elsif Is_Preelaborable_Call (Call) then\n+            return;\n+\n          --  Library-level calls are always considered because they are part of\n          --  the associated unit's elaboration actions.\n \n@@ -13779,13 +13824,10 @@ package body Sem_Elab is\n             return;\n          end if;\n \n-         --  The call appears within a preelaborated unit. Emit a warning only\n-         --  for internal uses, otherwise this is an error.\n+         --  If the call appears within a preelaborated unit, give an error\n \n          if In_Preelaborated_Context (Call) then\n-            Error_Msg_Warn := GNAT_Mode;\n-            Error_Msg_N\n-              (\"<<non-static call not allowed in preelaborated unit\", Call);\n+            Error_Preelaborated_Call (Call);\n          end if;\n       end Check_Preelaborated_Call;\n \n@@ -17506,17 +17548,17 @@ package body Sem_Elab is\n             --  Complain if ref that comes from source in preelaborated unit\n             --  and we are not inside a subprogram (i.e. we are in elab code).\n \n+            --  Ada 2020 (AI12-0175): Calls to certain functions that are\n+            --  essentially unchecked conversions are preelaborable.\n+\n             if Comes_From_Source (N)\n               and then In_Preelaborated_Unit\n               and then not In_Inlined_Body\n               and then Nkind (N) /= N_Attribute_Reference\n+              and then not (Ada_Version >= Ada_2020\n+                             and then Is_Preelaborable_Construct (N))\n             then\n-               --  This is a warning in GNAT mode allowing such calls to be\n-               --  used in the predefined library with appropriate care.\n-\n-               Error_Msg_Warn := GNAT_Mode;\n-               Error_Msg_N\n-                 (\"<<non-static call not allowed in preelaborated unit\", N);\n+               Error_Preelaborated_Call (N);\n                return;\n             end if;\n "}, {"sha": "0a62b10e568164a84a80b284e2753b29e19a0be1", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec772e4b269206a943b3caa5544d9c7ac1d8de1a/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec772e4b269206a943b3caa5544d9c7ac1d8de1a/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=ec772e4b269206a943b3caa5544d9c7ac1d8de1a", "patch": "@@ -133,6 +133,10 @@ package body Sem_Util is\n    --  components in the selected variant to determine whether all of them\n    --  have a default.\n \n+   function Is_Preelaborable_Function (Id : Entity_Id) return Boolean;\n+   --  Ada 2020: Determine whether the specified function is suitable as the\n+   --  name of a call in a preelaborable construct (RM 10.2.1(7/5)).\n+\n    type Null_Status_Kind is\n      (Is_Null,\n       --  This value indicates that a subexpression is known to have a null\n@@ -16485,6 +16489,9 @@ package body Sem_Util is\n \n                Visit (Discrete_Subtype_Definition (Nod));\n \n+            when N_Parameter_Association =>\n+               Visit (Explicit_Actual_Parameter (N));\n+\n             when N_Protected_Definition =>\n \n                --  End_Label is left out because it is not relevant for\n@@ -16650,6 +16657,21 @@ package body Sem_Util is\n                Visit_List (Actions (Expr));\n                Visit (Expression (Expr));\n \n+            when N_Function_Call =>\n+\n+               --  Ada 2020 (AI12-0175): Calls to certain functions that are\n+               --  essentially unchecked conversions are preelaborable.\n+\n+               if Ada_Version >= Ada_2020\n+                 and then Nkind (Expr) = N_Function_Call\n+                 and then Is_Entity_Name (Name (Expr))\n+                 and then Is_Preelaborable_Function (Entity (Name (Expr)))\n+               then\n+                  Visit_List (Parameter_Associations (Expr));\n+               else\n+                  raise Non_Preelaborable;\n+               end if;\n+\n             when N_If_Expression =>\n                Visit_List (Expressions (Expr));\n \n@@ -17781,13 +17803,81 @@ package body Sem_Util is\n       elsif Nkind (N) = N_Null then\n          return True;\n \n+      --  Ada 2020 (AI12-0175): Calls to certain functions that are essentially\n+      --  unchecked conversions are preelaborable.\n+\n+      elsif Ada_Version >= Ada_2020\n+        and then Nkind (N) = N_Function_Call\n+        and then Is_Entity_Name (Name (N))\n+        and then Is_Preelaborable_Function (Entity (Name (N)))\n+      then\n+         declare\n+            A : Node_Id;\n+         begin\n+            A := First_Actual (N);\n+\n+            while Present (A) loop\n+               if not Is_Preelaborable_Construct (A) then\n+                  return False;\n+               end if;\n+\n+               Next_Actual (A);\n+            end loop;\n+         end;\n+\n+         return True;\n+\n       --  Otherwise the construct is not preelaborable\n \n       else\n          return False;\n       end if;\n    end Is_Preelaborable_Construct;\n \n+   -------------------------------\n+   -- Is_Preelaborable_Function --\n+   -------------------------------\n+\n+   function Is_Preelaborable_Function (Id : Entity_Id) return Boolean is\n+      SATAC : constant Rtsfind.RTU_Id := System_Address_To_Access_Conversions;\n+      Scop  : constant Entity_Id := Scope (Id);\n+\n+   begin\n+      --  Small optimization: every allowed function has convention Intrinsic\n+      --  (see Analyze_Subprogram_Instantiation for the subtlety in the test).\n+\n+      if not Is_Intrinsic_Subprogram (Id)\n+        and then Convention (Id) /= Convention_Intrinsic\n+      then\n+         return False;\n+      end if;\n+\n+      --  An instance of Unchecked_Conversion\n+\n+      if Is_Unchecked_Conversion_Instance (Id) then\n+         return True;\n+      end if;\n+\n+      --  A function declared in System.Storage_Elements\n+\n+      if Is_RTU (Scop, System_Storage_Elements) then\n+         return True;\n+      end if;\n+\n+      --  The functions To_Pointer and To_Address declared in an instance of\n+      --  System.Address_To_Access_Conversions (they are the only ones).\n+\n+      if Ekind (Scop) = E_Package\n+        and then Nkind (Parent (Scop)) = N_Package_Specification\n+        and then Present (Generic_Parent (Parent (Scop)))\n+        and then Is_RTU (Generic_Parent (Parent (Scop)), SATAC)\n+      then\n+         return True;\n+      end if;\n+\n+      return False;\n+   end Is_Preelaborable_Function;\n+\n    ---------------------------------\n    -- Is_Protected_Self_Reference --\n    ---------------------------------"}, {"sha": "642e859a5e89d3552619296aaea20fff463f2f10", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec772e4b269206a943b3caa5544d9c7ac1d8de1a/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec772e4b269206a943b3caa5544d9c7ac1d8de1a/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=ec772e4b269206a943b3caa5544d9c7ac1d8de1a", "patch": "@@ -2096,6 +2096,14 @@ package body Sinfo is\n       return Flag13 (N);\n    end Is_Power_Of_2_For_Shift;\n \n+   function Is_Preelaborable_Call\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Call_Marker);\n+      return Flag7 (N);\n+   end Is_Preelaborable_Call;\n+\n    function Is_Prefixed_Call\n       (N : Node_Id) return Boolean is\n    begin\n@@ -5563,6 +5571,14 @@ package body Sinfo is\n       Set_Flag13 (N, Val);\n    end Set_Is_Power_Of_2_For_Shift;\n \n+   procedure Set_Is_Preelaborable_Call\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Call_Marker);\n+      Set_Flag7 (N, Val);\n+   end Set_Is_Preelaborable_Call;\n+\n    procedure Set_Is_Prefixed_Call\n       (N : Node_Id; Val : Boolean := True) is\n    begin"}, {"sha": "d0739b8443a2927feb2868ad887ba7586da10955", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec772e4b269206a943b3caa5544d9c7ac1d8de1a/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec772e4b269206a943b3caa5544d9c7ac1d8de1a/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=ec772e4b269206a943b3caa5544d9c7ac1d8de1a", "patch": "@@ -1849,6 +1849,10 @@ package Sinfo is\n    --    conditions holds, and the flag is set, then the division or\n    --    multiplication can be (and is) converted to a shift.\n \n+   --  Is_Preelaborable_Call (Flag7-Sem)\n+   --    Present in call marker nodes. Set when the related call is non-static\n+   --    but preelaborable.\n+\n    --  Is_Prefixed_Call (Flag17-Sem)\n    --    This flag is set in a selected component within a generic unit, if\n    --    it resolves to a prefixed call to a primitive operation. The flag\n@@ -7830,6 +7834,7 @@ package Sinfo is\n       --  Is_Source_Call (Flag4-Sem)\n       --  Is_Declaration_Level_Node (Flag5-Sem)\n       --  Is_Dispatching_Call (Flag6-Sem)\n+      --  Is_Preelaborable_Call (Flag7-Sem)\n       --  Is_Known_Guaranteed_ABE (Flag18-Sem)\n \n       ------------------------\n@@ -9767,6 +9772,9 @@ package Sinfo is\n    function Is_Power_Of_2_For_Shift\n      (N : Node_Id) return Boolean;    -- Flag13\n \n+   function Is_Preelaborable_Call\n+     (N : Node_Id) return Boolean;    -- Flag7\n+\n    function Is_Prefixed_Call\n      (N : Node_Id) return Boolean;    -- Flag17\n \n@@ -10870,6 +10878,9 @@ package Sinfo is\n    procedure Set_Is_Power_Of_2_For_Shift\n      (N : Node_Id; Val : Boolean := True);    -- Flag13\n \n+   procedure Set_Is_Preelaborable_Call\n+     (N : Node_Id; Val : Boolean := True);    -- Flag7\n+\n    procedure Set_Is_Prefixed_Call\n      (N : Node_Id; Val : Boolean := True);    -- Flag17\n \n@@ -13395,6 +13406,7 @@ package Sinfo is\n    pragma Inline (Is_Null_Loop);\n    pragma Inline (Is_Overloaded);\n    pragma Inline (Is_Power_Of_2_For_Shift);\n+   pragma Inline (Is_Preelaborable_Call);\n    pragma Inline (Is_Prefixed_Call);\n    pragma Inline (Is_Protected_Subprogram_Body);\n    pragma Inline (Is_Qualified_Universal_Literal);\n@@ -13758,6 +13770,7 @@ package Sinfo is\n    pragma Inline (Set_Is_Null_Loop);\n    pragma Inline (Set_Is_Overloaded);\n    pragma Inline (Set_Is_Power_Of_2_For_Shift);\n+   pragma Inline (Set_Is_Preelaborable_Call);\n    pragma Inline (Set_Is_Prefixed_Call);\n    pragma Inline (Set_Is_Protected_Subprogram_Body);\n    pragma Inline (Set_Is_Qualified_Universal_Literal);"}]}