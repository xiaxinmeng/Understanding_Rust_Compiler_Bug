{"sha": "bcbbac264c104c997e3361588fefb5480933d31e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNiYmFjMjY0YzEwNGM5OTdlMzM2MTU4OGZlZmI1NDgwOTMzZDMxZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1997-12-15T18:33:21Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1997-12-15T18:33:21Z"}, "message": "alpha.c (alpha_cpu_name): New variable.\n\n* alpha.c (alpha_cpu_name): New variable.\n(alpha_mlat_string): Likewise.\n(alpha_memory_latency): Likewise.\n(override_options): Handle -mmemory-latency.\n(alpha_adjust_cost): Adjust load cost for latency.\n* alpha.h (TARGET_OPTIONS): Add meory-latency.\n(REGISTER_MOVE_COST): Define in terms of memory_latency.  Take\nTARGET_CIX into account.\n(MEMORY_MOVE_COST): Define in terms of memory_latency.\n* invoke.texi (DEC Alpha Options): Document -mmemory-latency.\n* alpha.h (ASM_COMMENT_START): New macro.\n\nFrom-SVN: r17106", "tree": {"sha": "d6572355b00bf18e9cabf95ea5464ebffc8f1e60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6572355b00bf18e9cabf95ea5464ebffc8f1e60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcbbac264c104c997e3361588fefb5480933d31e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcbbac264c104c997e3361588fefb5480933d31e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcbbac264c104c997e3361588fefb5480933d31e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcbbac264c104c997e3361588fefb5480933d31e/comments", "author": null, "committer": null, "parents": [{"sha": "1914f5da249e2785a8b18d96b026ea9d94a89fe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1914f5da249e2785a8b18d96b026ea9d94a89fe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1914f5da249e2785a8b18d96b026ea9d94a89fe3"}], "stats": {"total": 104, "additions": 95, "deletions": 9}, "files": [{"sha": "275d6c73483360983198eff44b1f4f066756a953", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcbbac264c104c997e3361588fefb5480933d31e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcbbac264c104c997e3361588fefb5480933d31e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcbbac264c104c997e3361588fefb5480933d31e", "patch": "@@ -1,4 +1,19 @@\n-Mon Dec 15 17:48:05 1997  Ricahrd Henderson  <rth@cygnus.com>\n+Mon Dec 15 18:31:43 1997  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.c (alpha_cpu_name): New variable.\n+\t(alpha_mlat_string): Likewise.\n+\t(alpha_memory_latency): Likewise.\n+\t(override_options): Handle -mmemory-latency.\n+\t(alpha_adjust_cost): Adjust load cost for latency.\n+\t* alpha.h (TARGET_OPTIONS): Add meory-latency.\n+\t(REGISTER_MOVE_COST): Define in terms of memory_latency.  Take\n+\tTARGET_CIX into account.\n+\t(MEMORY_MOVE_COST): Define in terms of memory_latency.\n+\t* invoke.texi (DEC Alpha Options): Document -mmemory-latency.\n+\n+\t* alpha.h (ASM_COMMENT_START): New macro.\n+\n+Mon Dec 15 17:48:05 1997  Richard Henderson  <rth@cygnus.com>\n \n \t* reload.h, reload1.c (eliminate_regs), caller-save.c, dbxout.c,\n \tdwarfout.c, dwarf2out.c, reload.c, sdbout.c: Revert March 15 change."}, {"sha": "6b28bda2011c38dce2f42eba31af23be91aae18b", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcbbac264c104c997e3361588fefb5480933d31e/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcbbac264c104c997e3361588fefb5480933d31e/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=bcbbac264c104c997e3361588fefb5480933d31e", "patch": "@@ -22,6 +22,7 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include <stdio.h>\n+#include <ctype.h>\n #include \"rtl.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n@@ -47,6 +48,10 @@ extern int rtx_equal_function_value_matters;\n /* Specify which cpu to schedule for. */\n \n enum processor_type alpha_cpu;\n+static char* const alpha_cpu_name[] = \n+{\n+  \"ev4\", \"ev5\", \"ev6\"\n+};\n \n /* Specify how accurate floating-point traps need to be.  */\n \n@@ -62,10 +67,11 @@ enum alpha_fp_trap_mode alpha_fptm;\n \n /* Strings decoded into the above options.  */\n \n-char *alpha_cpu_string;\t\t/* -mcpu=ev[4|5] */\n+char *alpha_cpu_string;\t\t/* -mcpu= */\n char *alpha_tp_string;\t\t/* -mtrap-precision=[p|s|i] */\n char *alpha_fprm_string;\t/* -mfp-rounding-mode=[n|m|c|d] */\n char *alpha_fptm_string;\t/* -mfp-trap-mode=[n|u|su|sui] */\n+char *alpha_mlat_string;\t/* -mmemory-latency= */\n \n /* Save information from a \"cmpxx\" operation until the branch or scc is\n    emitted.  */\n@@ -91,6 +97,10 @@ int alpha_function_needs_gp;\n \n static rtx alpha_return_addr_rtx;\n \n+/* The number of cycles of latency we should assume on memory reads.  */\n+\n+int alpha_memory_latency = 3;\n+\n /* Declarations of static functions.  */\n static void alpha_set_memflags_1  PROTO((rtx, int, int, int));\n static rtx alpha_emit_set_const_1 PROTO((rtx, enum machine_mode,\n@@ -243,6 +253,52 @@ override_options ()\n \t  alpha_fptm = ALPHA_FPTM_SU;\n \t}\n     }\n+\n+  {\n+    char *end;\n+    int lat;\n+\n+    if (!alpha_mlat_string)\n+      alpha_mlat_string = \"L1\";\n+\n+    if (isdigit (alpha_mlat_string[0])\n+\t&& (lat = strtol (alpha_mlat_string, &end, 10), *end == '\\0'))\n+      ;\n+    else if ((alpha_mlat_string[0] == 'L' || alpha_mlat_string[0] == 'l')\n+\t     && isdigit (alpha_mlat_string[1])\n+\t     && alpha_mlat_string[2] == '\\0')\n+      {\n+\tstatic int const cache_latency[][4] = \n+\t{\n+\t  { 3, 30, -1 },\t/* ev4 -- Bcache is a guess */\n+\t  { 2, 12, 38 },\t/* ev5 -- Bcache from PC164 LMbench numbers */\n+\t  { 3, 12, -1 },\t/* ev6 -- Ho hum, doesn't exist yet */\n+\t};\n+\n+\tlat = alpha_mlat_string[1] - '0';\n+\tif (lat < 0 || lat > 3 || cache_latency[alpha_cpu][lat-1] == -1)\n+\t  {\n+\t    warning (\"L%d cache latency unknown for %s\",\n+\t\t     lat, alpha_cpu_name[alpha_cpu]);\n+\t    lat = 3;\n+\t  }\n+\telse\n+\t  lat = cache_latency[alpha_cpu][lat-1];\n+      }\n+    else if (! strcmp (alpha_mlat_string, \"main\"))\n+      {\n+\t/* Most current memories have about 370ns latency.  This is\n+\t   a reasonable guess for a fast cpu.  */\n+\tlat = 150;\n+      }\n+    else\n+      {\n+\twarning (\"bad value `%s' for -mmemory-latency\", alpha_mlat_string);\n+\tlat = 3;\n+      }\n+\n+    alpha_memory_latency = lat;\n+  }\n }\n \f\n /* Returns 1 if VALUE is a mask that contains full bytes of zero or ones.  */\n@@ -1217,6 +1273,10 @@ alpha_adjust_cost (insn, link, dep_insn, cost)\n   insn_type = get_attr_type (insn);\n   dep_insn_type = get_attr_type (dep_insn);\n \n+  /* Bring in the user-defined memory latency.  */\n+  if (dep_insn_type == TYPE_LD || dep_insn_type == TYPE_LDSYM)\n+    cost += alpha_memory_latency-1;\n+\n   if (alpha_cpu == PROCESSOR_EV5)\n     {\n       /* And the lord DEC saith:  \"A special bypass provides an effective"}, {"sha": "2c45a7373ab0d0b9522f4b774179db62493c8a99", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcbbac264c104c997e3361588fefb5480933d31e/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcbbac264c104c997e3361588fefb5480933d31e/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=bcbbac264c104c997e3361588fefb5480933d31e", "patch": "@@ -245,17 +245,19 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n \textern char *m88k_short_data;\n \t#define TARGET_OPTIONS { { \"short-data-\", &m88k_short_data } }  */\n \n-extern char *alpha_cpu_string;  /* For -mcpu=ev[4|5] */\n+extern char *alpha_cpu_string;  /* For -mcpu= */\n extern char *alpha_fprm_string;\t/* For -mfp-rounding-mode=[n|m|c|d] */\n extern char *alpha_fptm_string;\t/* For -mfp-trap-mode=[n|u|su|sui]  */\n extern char *alpha_tp_string;\t/* For -mtrap-precision=[p|f|i] */\n+extern char *alpha_mlat_string;\t/* For -mmemory-latency= */\n \n #define TARGET_OPTIONS\t\t\t\t\\\n {\t\t\t\t\t\t\\\n   {\"cpu=\",\t\t&alpha_cpu_string},\t\\\n   {\"fp-rounding-mode=\",\t&alpha_fprm_string},\t\\\n   {\"fp-trap-mode=\",\t&alpha_fptm_string},\t\\\n   {\"trap-precision=\",\t&alpha_tp_string},\t\\\n+  {\"memory-latency=\",\t&alpha_mlat_string},\t\\\n }\n \n /* Sometimes certain combinations of command options do not make sense\n@@ -792,15 +794,17 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, ALL_REGS,\n    reduce the impact of not being able to allocate a pseudo to a\n    hard register.  */\n \n-#define REGISTER_MOVE_COST(CLASS1, CLASS2)\t\\\n-  (((CLASS1) == FLOAT_REGS) == ((CLASS2) == FLOAT_REGS) ? 2 : 20)\n+#define REGISTER_MOVE_COST(CLASS1, CLASS2)\t\t\t\t\\\n+  (TARGET_CIX || ((CLASS1) == FLOAT_REGS) == ((CLASS2) == FLOAT_REGS)\t\\\n+   ? 2 : 4+2*alpha_memory_latency)\n \n /* A C expressions returning the cost of moving data of MODE from a register to\n    or from memory.\n \n    On the Alpha, bump this up a bit.  */\n \n-#define MEMORY_MOVE_COST(MODE)  6\n+extern int alpha_memory_latency;\n+#define MEMORY_MOVE_COST(MODE)  (2*alpha_memory_latency)\n \n /* Provide the cost of a branch.  Exact meaning under development.  */\n #define BRANCH_COST 5\n@@ -1107,6 +1111,10 @@ extern int alpha_compare_fp_p;\n    IS_LOCAL is 0 if name is used in call, 1 if name is used in definition.  */\n extern void alpha_need_linkage ();\n \n+/* This macro defines the start of an assembly comment.  */\n+\n+#define ASM_COMMENT_START \" #\"\n+\n /* This macro produces the initial definition of a function name.  On the\n    Alpha, we need to save the function name for the prologue and epilogue.  */\n "}, {"sha": "c6e234ed48db9fc3b1b8f0791892ce9b1f4da3d2", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcbbac264c104c997e3361588fefb5480933d31e/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcbbac264c104c997e3361588fefb5480933d31e/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=bcbbac264c104c997e3361588fefb5480933d31e", "patch": "@@ -45,11 +45,13 @@\n ;; the address, BBOX, used for branches, EBOX, used for integer\n ;; operations, and FBOX, used for FP operations.\n \n-;; Memory delivers its result in three cycles.\n+;; Memory delivers its result in three cycles.  Actually return one and\n+;; take care of this in adjust_cost, since we want to handle user-defined\n+;; memory latencies.\n (define_function_unit \"ev4_abox\" 1 0\n   (and (eq_attr \"cpu\" \"ev4\")\n        (eq_attr \"type\" \"ld,ldsym,st\"))\n-  3 1)\n+  1 1)\n \n ;; Branches have no delay cost, but do tie up the unit for two cycles.\n (define_function_unit \"ev4_bbox\" 1 1\n@@ -127,10 +129,11 @@\n   1 1)\n \n ;; Memory takes at least 2 clocks, and load cannot dual issue with stores.\n+;; Return one from here and fix up with user-defined latencies in adjust_cost.\n (define_function_unit \"ev5_ebox\" 2 0\n   (and (eq_attr \"cpu\" \"ev5\")\n        (eq_attr \"type\" \"ld,ldsym\"))\n-  2 1)\n+  1 1)\n \n (define_function_unit \"ev5_e0\" 1 0\n   (and (eq_attr \"cpu\" \"ev5\")"}]}