{"sha": "2bfa88dc7944a6275dd2bd28b01a095311d6c2ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJmYTg4ZGM3OTQ0YTYyNzVkZDJiZDI4YjAxYTA5NTMxMWQ2YzJmZg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "1999-09-03T16:27:57Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "1999-09-03T16:27:57Z"}, "message": "arm.c (note_invalid_constants): No need to ignore ASMs, we can now rework these too.\n\n* arm.c (note_invalid_constants): No need to ignore ASMs, we can\nnow rework these too.\n(arm_reorg): If an insn can't reach the end of the current pool,\nensure that we emit that pool before the insn.\n\nFrom-SVN: r29084", "tree": {"sha": "c5d5774096f7468fbe7925a24837bece5fe302d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5d5774096f7468fbe7925a24837bece5fe302d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bfa88dc7944a6275dd2bd28b01a095311d6c2ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bfa88dc7944a6275dd2bd28b01a095311d6c2ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bfa88dc7944a6275dd2bd28b01a095311d6c2ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bfa88dc7944a6275dd2bd28b01a095311d6c2ff/comments", "author": null, "committer": null, "parents": [{"sha": "9c5b50b30ad2289a542816faf9de5fa2f9a6d79e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c5b50b30ad2289a542816faf9de5fa2f9a6d79e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c5b50b30ad2289a542816faf9de5fa2f9a6d79e"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "da0b2045511e233a6072510a56a13bf9ac897055", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfa88dc7944a6275dd2bd28b01a095311d6c2ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfa88dc7944a6275dd2bd28b01a095311d6c2ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2bfa88dc7944a6275dd2bd28b01a095311d6c2ff", "patch": "@@ -1,3 +1,10 @@\n+Fri Sep  3 17:24:31 1999  Richard Earnshaw <rearnsha@arm.com>\n+\n+\t* arm.c (note_invalid_constants): No need to ignore ASMs, we can\n+\tnow rework these too.\n+\t(arm_reorg): If an insn can't reach the end of the current pool,\n+\tensure that we emit that pool before the insn.\n+\n Fri Sep  3 09:14:32 1999  Marc Espie <espie@tetto.liafa.jussieu.fr>\n \n \t* tlink.c (scan_linker_output): Skip the initial underscore in"}, {"sha": "69ec6fd847877cf2460723a8906eb4309fdca288", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfa88dc7944a6275dd2bd28b01a095311d6c2ff/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfa88dc7944a6275dd2bd28b01a095311d6c2ff/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=2bfa88dc7944a6275dd2bd28b01a095311d6c2ff", "patch": "@@ -4236,10 +4236,6 @@ note_invalid_constants (insn, address)\n   /* Extract the operands of the insn */\n   extract_insn(insn);\n \n-  /* If this is an asm, we can't do anything about it (or can we?) */\n-  if (INSN_CODE (insn) < 0)\n-    return;\n-\n   /* Find the alternative selected */\n   if (! constrain_operands (1))\n     fatal_insn_not_found (insn);\n@@ -4375,11 +4371,20 @@ arm_reorg (first)\n \t  barrier = last_barrier->insn;\n \t  ftmp = last_barrier;\n \t}\n+      /* ftmp is last fix that we can fit into this pool and we\n+\t failed to find a barrier that we could use.  Insert a new\n+\t barrier in the code and arrange to jump around it.  */\n       else\n-\t/* ftmp is last fix that we can fit into this pool and we\n-\t   failed to find a barrier that we could use.  Insert a new\n-\t   barrier in the code and arrange to jump around it.  */\n-\tbarrier = find_barrier (ftmp->insn, max_range - ftmp->address);\n+        {\n+\t  /* Check that there isn't another fix that is in range that\n+\t     we couldn't fit into this pool because the pool was\n+\t     already too large: we need to put the pool before such an\n+\t     instruction.  */\n+\t  if (ftmp->next && ftmp->next->address < max_range)\n+\t    max_range = ftmp->address;\n+\n+\t  barrier = find_barrier (ftmp->insn, max_range - ftmp->address);\n+\t}\n \n       /* Scan over the fixes we have identified for this pool, fixing them\n \t up and adding the constants to the pool itself.  */"}]}