{"sha": "ef8b01f3d979cfea88da6add1c4d096b4355849a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY4YjAxZjNkOTc5Y2ZlYTg4ZGE2YWRkMWM0ZDA5NmI0MzU1ODQ5YQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2000-04-19T12:47:53Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-04-19T12:47:53Z"}, "message": "Makefile.am, [...]: irix_threads.c is now hpux_irix_threads.c.\n\n        * Makefile.am, Makefile.in: irix_threads.c is now\n        hpux_irix_threads.c.\n        * Makefile.orig: Updated from gc distribution Makefile.\n\nFrom-SVN: r33255", "tree": {"sha": "1cfe7155109ddaa8b41c9ea1a02cad4d9091676f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cfe7155109ddaa8b41c9ea1a02cad4d9091676f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef8b01f3d979cfea88da6add1c4d096b4355849a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8b01f3d979cfea88da6add1c4d096b4355849a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef8b01f3d979cfea88da6add1c4d096b4355849a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8b01f3d979cfea88da6add1c4d096b4355849a/comments", "author": null, "committer": null, "parents": [{"sha": "82ee5e63a0e0d33db937b5b3ee94e10fcb4cbf5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82ee5e63a0e0d33db937b5b3ee94e10fcb4cbf5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82ee5e63a0e0d33db937b5b3ee94e10fcb4cbf5d"}], "stats": {"total": 218, "additions": 145, "deletions": 73}, "files": [{"sha": "6f27b76aaf9b450d8dfab3967238c03e6264c044", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8b01f3d979cfea88da6add1c4d096b4355849a/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8b01f3d979cfea88da6add1c4d096b4355849a/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=ef8b01f3d979cfea88da6add1c4d096b4355849a", "patch": "@@ -5,6 +5,9 @@\n \t* configure.in: Don't use alpha_mach_dep.s.\n \t* include/private/config.h, irix_threads.c gc_watcom.asm: Delete \n \tobsolete files.\n+\t* Makefile.am, Makefile.in: irix_threads.c is now\n+\thpux_irix_threads.c.\n+\t* Makefile.orig: Updated from gc distribution Makefile.\n \n 2000-03-26  Anthony Green  <green@redhat.com>\n "}, {"sha": "f4839819bf430c29f826bba035b7617e7503d0db", "filename": "boehm-gc/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8b01f3d979cfea88da6add1c4d096b4355849a/boehm-gc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8b01f3d979cfea88da6add1c4d096b4355849a/boehm-gc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FMakefile.am?ref=ef8b01f3d979cfea88da6add1c4d096b4355849a", "patch": "@@ -28,7 +28,7 @@ EXTRA_LTLIBRARIES = libgcjgc.la\n libgcjgc_la_SOURCES = allchblk.c alloc.c blacklst.c checksums.c\t\\\n gcconfig.h dbg_mlc.c dyn_load.c finalize.c gc.h gc_alloc.h gc_cpp.h \\\n gc_hdrs.h gc_mark.h gc_priv.h gc_private.h gc_typed.h headers.c\t\\\n-irix_threads.c linux_threads.c malloc.c mallocx.c mark.c mark_rts.c \\\n+hpux_irix_threads.c linux_threads.c malloc.c mallocx.c mark.c mark_rts.c \\\n misc.c new_hblk.c obj_map.c os_dep.c pcr_interface.c ptr_chck.c\t\\\n real_malloc.c reclaim.c solaris_pthreads.c solaris_threads.c \\\n solaris_threads.h stubborn.c typd_mlc.c version.h weakpointer.h"}, {"sha": "fb671a9e4b05d338613ae9466d91d0e7c66a1934", "filename": "boehm-gc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8b01f3d979cfea88da6add1c4d096b4355849a/boehm-gc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8b01f3d979cfea88da6add1c4d096b4355849a/boehm-gc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FMakefile.in?ref=ef8b01f3d979cfea88da6add1c4d096b4355849a", "patch": "@@ -111,7 +111,7 @@ EXTRA_LTLIBRARIES = libgcjgc.la\n libgcjgc_la_SOURCES = allchblk.c alloc.c blacklst.c checksums.c\t\\\n gcconfig.h dbg_mlc.c dyn_load.c finalize.c gc.h gc_alloc.h gc_cpp.h \\\n gc_hdrs.h gc_mark.h gc_priv.h gc_private.h gc_typed.h headers.c\t\\\n-irix_threads.c linux_threads.c malloc.c mallocx.c mark.c mark_rts.c \\\n+hpux_irix_threads.c linux_threads.c malloc.c mallocx.c mark.c mark_rts.c \\\n misc.c new_hblk.c obj_map.c os_dep.c pcr_interface.c ptr_chck.c\t\\\n real_malloc.c reclaim.c solaris_pthreads.c solaris_threads.c \\\n solaris_threads.h stubborn.c typd_mlc.c version.h weakpointer.h\n@@ -199,7 +199,7 @@ CPPFLAGS = @CPPFLAGS@\n LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@\n libgcjgc_la_OBJECTS =  allchblk.lo alloc.lo blacklst.lo checksums.lo \\\n-dbg_mlc.lo dyn_load.lo finalize.lo headers.lo irix_threads.lo \\\n+dbg_mlc.lo dyn_load.lo finalize.lo headers.lo hpux_irix_threads.lo \\\n linux_threads.lo malloc.lo mallocx.lo mark.lo mark_rts.lo misc.lo \\\n new_hblk.lo obj_map.lo os_dep.lo pcr_interface.lo ptr_chck.lo \\\n real_malloc.lo reclaim.lo solaris_pthreads.lo solaris_threads.lo \\"}, {"sha": "d3a3482d25bc2fe4fe671dbffc4907c69c1c7a72", "filename": "boehm-gc/Makefile.orig", "status": "modified", "additions": 139, "deletions": 70, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8b01f3d979cfea88da6add1c4d096b4355849a/boehm-gc%2FMakefile.orig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8b01f3d979cfea88da6add1c4d096b4355849a/boehm-gc%2FMakefile.orig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FMakefile.orig?ref=ef8b01f3d979cfea88da6add1c4d096b4355849a", "patch": "@@ -7,33 +7,39 @@\n #      \t and runs some tests of collector and cords.  Does not add cords or\n #\t c++ interface to gc.a\n # cord/de - builds dumb editor based on cords.\n-ABI_FLAG=\n+ABI_FLAG= \n CC=cc $(ABI_FLAG)\n-CXX=CC $(ABI_FLAG)\n+HOSTCC=$(CC)\n+CXX=g++ $(ABI_FLAG)\n AS=as $(ABI_FLAG)\n #  The above doesn't work with gas, which doesn't run cpp.\n #  Define AS as `gcc -c -x assembler-with-cpp' instead.\n-#  Under Irix 6, you will have to specify the ABI for as if you specify\n-#  it for the C compiler.\n+#  Under Irix 6, you will have to specify the ABI (-o32, -n32, or -64)\n+#  if you use something other than the default ABI on your machine.\n \n-CFLAGS= -O -DATOMIC_UNCOLLECTABLE -DNO_SIGNALS -DALL_INTERIOR_POINTERS -DNO_EXECUTE_PERMISSION -DSILENT\n+CFLAGS= -O -DATOMIC_UNCOLLECTABLE -DNO_SIGNALS -DNO_EXECUTE_PERMISSION -DALL_INTERIOR_POINTERS -DSILENT\n+\n+# For dynamic library builds, it may be necessary to add flags to generate\n+# PIC code, e.g. -fPIC on Linux.\n \n # Setjmp_test may yield overly optimistic results when compiled\n # without optimization.\n # -DSILENT disables statistics printing, and improves performance.\n-# -DCHECKSUMS reports on erroneously clear dirty bits, and unexpectedly\n-#   altered stubborn objects, at substantial performance cost.\n-#   Use only for incremental collector debugging.\n-# -DFIND_LEAK causes the collector to assume that all inaccessible\n+# -DFIND_LEAK causes GC_find_leak to be initially set.\n+#   This causes the collector to assume that all inaccessible\n #   objects should have been explicitly deallocated, and reports exceptions.\n #   Finalization and the test program are not usable in this mode.\n # -DSOLARIS_THREADS enables support for Solaris (thr_) threads.\n #   (Clients should also define SOLARIS_THREADS and then include\n #   gc.h before performing thr_ or dl* or GC_ operations.)\n-#   Must also define -D_REENTRANT\n+#   Must also define -D_REENTRANT.\n # -D_SOLARIS_PTHREADS enables support for Solaris pthreads.\n #   Define SOLARIS_THREADS as well.\n # -DIRIX_THREADS enables support for Irix pthreads.  See README.irix.\n+# -DHPUX_THREADS enables support for HP/UX 11 pthreads.\n+#  Also requires -D_REENTRANT. See README.hp.\n+# -DLINUX_THREADS enables support for Xavier Leroy's Linux threads.\n+#   see README.linux.  -D_REENTRANT may also be required.\n # -DALL_INTERIOR_POINTERS allows all pointers to the interior\n #   of objects to be recognized.  (See gc_priv.h for consequences.)\n # -DSMALL_CONFIG tries to tune the collector for small heap sizes,\n@@ -53,6 +59,8 @@ CFLAGS= -O -DATOMIC_UNCOLLECTABLE -DNO_SIGNALS -DALL_INTERIOR_POINTERS -DNO_EXEC\n #   implementations, and it sometimes has a significant performance\n #   impact.  However, it is dangerous for many not-quite-ANSI C\n #   programs that call things like printf in asynchronous signal handlers.\n+#   This is on by default.  Turning it off has not been extensively tested with\n+#   compilers that reorder stores.  It should have been.\n # -DNO_EXECUTE_PERMISSION may cause some or all of the heap to not\n #   have execute permission, i.e. it may be impossible to execute\n #   code from the heap.  Currently this only affects the incremental\n@@ -80,9 +88,12 @@ CFLAGS= -O -DATOMIC_UNCOLLECTABLE -DNO_SIGNALS -DALL_INTERIOR_POINTERS -DNO_EXEC\n #   finalize.c).  Objects reachable from finalizable objects will be marked\n #   in a sepearte postpass, and hence their memory won't be reclaimed.\n #   Not recommended unless you are implementing a language that specifies\n-#   these semantics.\n+#   these semantics.  Since 5.0, determines only only the initial value\n+#   of GC_java_finalization variable.\n # -DFINALIZE_ON_DEMAND causes finalizers to be run only in response\n #   to explicit GC_invoke_finalizers() calls.\n+#   In 5.0 this became runtime adjustable, and this only determines the\n+#   initial value of GC_finalize_on_demand.\n # -DATOMIC_UNCOLLECTABLE includes code for GC_malloc_atomic_uncollectable.\n #   This is useful if either the vendor malloc implementation is poor,\n #   or if REDIRECT_MALLOC is used.\n@@ -93,21 +104,52 @@ CFLAGS= -O -DATOMIC_UNCOLLECTABLE -DNO_SIGNALS -DALL_INTERIOR_POINTERS -DNO_EXEC\n #   fragmentation, but generally better performance for large heaps.\n # -DUSE_MMAP use MMAP instead of sbrk to get new memory.\n #   Works for Solaris and Irix.\n+# -DUSE_MUNMAP causes memory to be returned to the OS under the right\n+#   circumstances.  This currently disables VM-based incremental collection.\n+#   This is currently experimental, and works only under some Unix and\n+#   Linux versions.\n # -DMMAP_STACKS (for Solaris threads) Use mmap from /dev/zero rather than\n #   GC_scratch_alloc() to get stack memory.\n # -DPRINT_BLACK_LIST Whenever a black list entry is added, i.e. whenever\n #   the garbage collector detects a value that looks almost, but not quite,\n #   like a pointer, print both the address containing the value, and the\n #   value of the near-bogus-pointer.  Can be used to identifiy regions of\n #   memory that are likely to contribute misidentified pointers.\n-# -DOLD_BLOCK_ALLOC Use the old, possibly faster, large block\n-#   allocation strategy.  The new strategy tries harder to minimize\n-#   fragmentation, sometimes at the expense of spending more time in the\n-#   large block allocator and/or collecting more frequently.\n+# -DKEEP_BACK_PTRS Add code to save back pointers in debugging headers\n+#   for objects allocated with the debugging allocator.  If all objects\n+#   through GC_MALLOC with GC_DEBUG defined, this allows the client\n+#   to determine how particular or randomly chosen objects are reachable\n+#   for debugging/profiling purposes.  The backptr.h interface is\n+#   implemented only if this is defined.\n+# -DGC_ASSERTIONS Enable some internal GC assertion checking.  Currently\n+#   this facility is only used in a few places.  It is intended primarily\n+#   for debugging of the garbage collector itself, but could also\n+#   occasionally be useful for debugging of client code.  Slows down the\n+#   collector somewhat, but not drastically.\n+# -DCHECKSUMS reports on erroneously clear dirty bits, and unexpectedly\n+#   altered stubborn objects, at substantial performance cost.\n+#   Use only for debugging of the incremental collector.\n+# -DGC_GCJ_SUPPORT includes support for gcj (and possibly other systems\n+#   that include a pointer to a type descriptor in each allocated object).\n+#   Building this way requires an ANSI C compiler.\n+# -DUSE_I686_PREFETCH causes the collector to issue Pentium III style\n+#   prefetch instructions.  No effect except on X86 Linux platforms.\n+#   Assumes a very recent gcc-compatible compiler and assembler.\n+#   (Gas prefetcht0 support was added around May 1999.)\n+#   Empirically the code appears to still run correctly on Pentium II\n+#   processors, though with no performance benefit.  May not run on other\n+#   X86 processors?  In some cases this improves performance by\n+#   15% or so.\n+# -DUSE_3DNOW_PREFETCH causes the collector to issue AMD 3DNow style\n+#   prefetch instructions.  Same restrictions as USE_I686_PREFETCH.\n+#   UNTESTED!!\n+# -DUSE_LD_WRAP in combination with the gld flags listed in README.linux\n+#   causes the collector some system and pthread calls in a more transparent\n+#   fashion than the usual macro-based approach.  Requires GNU ld, and\n+#   currently probably works only with Linux.\n #\n \n \n-\n LIBGC_CFLAGS= -O -DNO_SIGNALS -DSILENT \\\n     -DREDIRECT_MALLOC=GC_malloc_uncollectable \\\n     -DDONT_ADD_BYTE_AT_END -DALL_INTERIOR_POINTERS\n@@ -124,37 +166,40 @@ RANLIB= ranlib\n srcdir = .\n VPATH = $(srcdir)\n \n-OBJS= alloc.o reclaim.o allchblk.o misc.o mach_dep.o os_dep.o mark_rts.o headers.o mark.o obj_map.o blacklst.o finalize.o new_hblk.o dbg_mlc.o malloc.o stubborn.o checksums.o solaris_threads.o irix_threads.o linux_threads.o typd_mlc.o ptr_chck.o mallocx.o solaris_pthreads.o\n+OBJS= alloc.o reclaim.o allchblk.o misc.o mach_dep.o os_dep.o mark_rts.o headers.o mark.o obj_map.o blacklst.o finalize.o new_hblk.o dbg_mlc.o malloc.o stubborn.o checksums.o solaris_threads.o hpux_irix_threads.o linux_threads.o typd_mlc.o ptr_chck.o mallocx.o solaris_pthreads.o gcj_mlc.o\n \n-CSRCS= reclaim.c allchblk.c misc.c alloc.c mach_dep.c os_dep.c mark_rts.c headers.c mark.c obj_map.c pcr_interface.c blacklst.c finalize.c new_hblk.c real_malloc.c dyn_load.c dbg_mlc.c malloc.c stubborn.c checksums.c solaris_threads.c irix_threads.c linux_threads.c typd_mlc.c ptr_chck.c mallocx.c solaris_pthreads.c\n+CSRCS= reclaim.c allchblk.c misc.c alloc.c mach_dep.c os_dep.c mark_rts.c headers.c mark.c obj_map.c pcr_interface.c blacklst.c finalize.c new_hblk.c real_malloc.c dyn_load.c dbg_mlc.c malloc.c stubborn.c checksums.c solaris_threads.c hpux_irix_threads.c linux_threads.c typd_mlc.c ptr_chck.c mallocx.c solaris_pthreads.c gcj_mlc.c\n \n CORD_SRCS=  cord/cordbscs.c cord/cordxtra.c cord/cordprnt.c cord/de.c cord/cordtest.c cord/cord.h cord/ec.h cord/private/cord_pos.h cord/de_win.c cord/de_win.h cord/de_cmds.h cord/de_win.ICO cord/de_win.RC cord/SCOPTIONS.amiga cord/SMakefile.amiga\n \n CORD_OBJS=  cord/cordbscs.o cord/cordxtra.o cord/cordprnt.o\n \n SRCS= $(CSRCS) mips_sgi_mach_dep.s rs6000_mach_dep.s alpha_mach_dep.s \\\n     sparc_mach_dep.s gc.h gc_typed.h gc_hdrs.h gc_priv.h gc_private.h \\\n-    config.h gc_mark.h include/gc_inl.h include/gc_inline.h gc.man \\\n+    gcconfig.h gc_mark.h include/gc_inl.h include/gc_inline.h gc.man \\\n     threadlibs.c if_mach.c if_not_there.c gc_cpp.cc gc_cpp.h weakpointer.h \\\n     gcc_support.c mips_ultrix_mach_dep.s include/gc_alloc.h gc_alloc.h \\\n-    sparc_sunos4_mach_dep.s solaris_threads.h $(CORD_SRCS)\n+    include/new_gc_alloc.h include/javaxfc.h sparc_sunos4_mach_dep.s \\\n+    solaris_threads.h backptr.h hpux_test_and_clear.s include/gc_gcj.h \\\n+    dbg_mlc.h $(CORD_SRCS)\n \n OTHER_FILES= Makefile PCR-Makefile OS2_MAKEFILE NT_MAKEFILE BCC_MAKEFILE \\\n            README test.c test_cpp.cc setjmp_t.c SMakefile.amiga \\\n            SCoptions.amiga README.amiga README.win32 cord/README \\\n            cord/gc.h include/gc.h include/gc_typed.h include/cord.h \\\n-           include/ec.h include/private/cord_pos.h include/private/config.h \\\n+           include/ec.h include/private/cord_pos.h include/private/gcconfig.h \\\n            include/private/gc_hdrs.h include/private/gc_priv.h \\\n-\t   include/gc_cpp.h README.rs6000 \\\n+\t   include/gc_cpp.h README.rs6000 include/backptr.h \\\n            include/weakpointer.h README.QUICK callprocs pc_excludes \\\n            barrett_diagram README.OS2 README.Mac MacProjects.sit.hqx \\\n            MacOS.c EMX_MAKEFILE makefile.depend README.debugging \\\n            include/gc_cpp.h Mac_files/datastart.c Mac_files/dataend.c \\\n            Mac_files/MacOS_config.h Mac_files/MacOS_Test_config.h \\\n            add_gc_prefix.c README.solaris2 README.sgi README.hp README.uts \\\n \t   win32_threads.c NT_THREADS_MAKEFILE gc.mak README.dj Makefile.dj \\\n-\t   README.alpha README.linux version.h Makefile.DLLs gc_watcom.asm \\\n-\t   WCC_MAKEFILE\n+\t   README.alpha README.linux version.h Makefile.DLLs \\\n+\t   WCC_MAKEFILE nursery.c include/gc_nursery.h include/gc_copy_descr.h \\\n+\t   include/leak_detector.h\n \n CORD_INCLUDE_FILES= $(srcdir)/gc.h $(srcdir)/cord/cord.h $(srcdir)/cord/ec.h \\\n            $(srcdir)/cord/private/cord_pos.h\n@@ -177,12 +222,12 @@ SPECIALCFLAGS =\n \n all: gc.a gctest\n \n-pcr: PCR-Makefile gc_private.h gc_hdrs.h gc.h config.h mach_dep.o $(SRCS)\n+pcr: PCR-Makefile gc_private.h gc_hdrs.h gc.h gcconfig.h mach_dep.o $(SRCS)\n \tmake -f PCR-Makefile depend\n \tmake -f PCR-Makefile\n \n $(OBJS) test.o dyn_load.o dyn_load_sunos53.o: $(srcdir)/gc_priv.h $(srcdir)/gc_hdrs.h $(srcdir)/gc.h \\\n-    $(srcdir)/config.h $(srcdir)/gc_typed.h Makefile\n+    $(srcdir)/gcconfig.h $(srcdir)/gc_typed.h Makefile\n # The dependency on Makefile is needed.  Changing\n # options such as -DSILENT affects the size of GC_arrays,\n # invalidating all .o files that rely on gc_priv.h\n@@ -191,53 +236,51 @@ mark.o typd_mlc.o finalize.o: $(srcdir)/gc_mark.h\n \n base_lib gc.a: $(OBJS) dyn_load.o $(UTILS)\n \techo > base_lib\n-\trm -f on_sparc_sunos5\n-\t./if_mach SPARC SUNOS5 touch on_sparc_sunos5\n+\trm -f dont_ar_1\n+\t./if_mach SPARC SUNOS5 touch dont_ar_1\n \t./if_mach SPARC SUNOS5 $(AR) rus gc.a $(OBJS) dyn_load.o\n-\t./if_not_there on_sparc_sunos5 $(AR) ru gc.a $(OBJS) dyn_load.o\n-\t./if_not_there on_sparc_sunos5 $(RANLIB) gc.a || cat /dev/null\n+\t./if_mach M68K AMIGA touch dont_ar_1\n+\t./if_mach M68K AMIGA $(AR) -vrus gc.a $(OBJS) dyn_load.o\n+\t./if_not_there dont_ar_1 $(AR) ru gc.a $(OBJS) dyn_load.o\n+\t./if_not_there dont_ar_1 $(RANLIB) gc.a || cat /dev/null\n #\tignore ranlib failure; that usually means it doesn't exist, and isn't needed\n \n-libgc.a: \n-\tmake CFLAGS=\"$(LIBGC_CFLAGS)\" clean gc.a gcc_support.o\n-\tmv gc.a libgc.a\n-\trm -f on_sparc_sunos5\n-\t./if_mach SPARC SUNOS5 touch on_sparc_sunos5\n-\t./if_mach SPARC SUNOS5 $(AR) rus libgc.a gcc_support.o\n-\t./if_not_there on_sparc_sunos5 $(AR) ru libgc.a gcc_support.o\n-\t./if_not_there on_sparc_sunos5 $(RANLIB) libgc.a || cat /dev/null\n-\n cords: $(CORD_OBJS) cord/cordtest $(UTILS)\n-\trm -f on_sparc_sunos5\n-\t./if_mach SPARC SUNOS5 touch on_sparc_sunos5\n+\trm -f dont_ar_3\n+\t./if_mach SPARC SUNOS5 touch dont_ar_3\n \t./if_mach SPARC SUNOS5 $(AR) rus gc.a $(CORD_OBJS)\n-\t./if_not_there on_sparc_sunos5 $(AR) ru gc.a $(CORD_OBJS)\n-\t./if_not_there on_sparc_sunos5 $(RANLIB) gc.a || cat /dev/null\n+\t./if_mach M68K AMIGA touch dont_ar_3\n+\t./if_mach M68K AMIGA $(AR) -vrus gc.a $(CORD_OBJS)\n+\t./if_not_there dont_ar_3 $(AR) ru gc.a $(CORD_OBJS)\n+\t./if_not_there dont_ar_3 $(RANLIB) gc.a || cat /dev/null\n \n gc_cpp.o: $(srcdir)/gc_cpp.cc $(srcdir)/gc_cpp.h $(srcdir)/gc.h Makefile\n \t$(CXX) -c $(CXXFLAGS) $(srcdir)/gc_cpp.cc\n \n test_cpp: $(srcdir)/test_cpp.cc $(srcdir)/gc_cpp.h gc_cpp.o $(srcdir)/gc.h \\\n base_lib $(UTILS)\n \trm -f test_cpp\n-\t./if_mach HP_PA \"\" $(CXX) $(CXXFLAGS) -o test_cpp $(srcdir)/test_cpp.cc gc_cpp.o gc.a -ldld\n+\t./if_mach HP_PA HPUX $(CXX) $(CXXFLAGS) -o test_cpp $(srcdir)/test_cpp.cc gc_cpp.o gc.a -ldld `./threadlibs`\n \t./if_not_there test_cpp $(CXX) $(CXXFLAGS) -o test_cpp $(srcdir)/test_cpp.cc gc_cpp.o gc.a `./threadlibs`\n \n c++: gc_cpp.o $(srcdir)/gc_cpp.h test_cpp\n-\trm -f on_sparc_sunos5\n-\t./if_mach SPARC SUNOS5 touch on_sparc_sunos5\n+\trm -f dont_ar_4\n+\t./if_mach SPARC SUNOS5 touch dont_ar_4\n \t./if_mach SPARC SUNOS5 $(AR) rus gc.a gc_cpp.o\n-\t./if_not_there on_sparc_sunos5 $(AR) ru gc.a gc_cpp.o\n-\t./if_not_there on_sparc_sunos5 $(RANLIB) gc.a || cat /dev/null\n+\t./if_mach M68K AMIGA touch dont_ar_4\n+\t./if_mach M68K AMIGA $(AR) -vrus gc.a gc_cpp.o\n+\t./if_not_there dont_ar_4 $(AR) ru gc.a gc_cpp.o\n+\t./if_not_there dont_ar_4 $(RANLIB) gc.a || cat /dev/null\n \t./test_cpp 1\n \techo > c++\n \n dyn_load_sunos53.o: dyn_load.c\n \t$(CC) $(CFLAGS) -DSUNOS53_SHARED_LIB -c $(srcdir)/dyn_load.c -o $@\n \n # SunOS5 shared library version of the collector\n-libgc.so: $(OBJS) dyn_load_sunos53.o\n-\t$(CC) -G -o libgc.so $(OBJS) dyn_load_sunos53.o -ldl\n+sunos5gc.so: $(OBJS) dyn_load_sunos53.o\n+\t$(CC) -G -o sunos5gc.so $(OBJS) dyn_load_sunos53.o -ldl\n+\tln sunos5gc.so libgc.so\n \n # Alpha/OSF shared library version of the collector\n libalphagc.so: $(OBJS)\n@@ -249,18 +292,42 @@ libirixgc.so: $(OBJS) dyn_load.o\n \tld -shared $(ABI_FLAG) -o libirixgc.so $(OBJS) dyn_load.o -lc\n \tln libirixgc.so libgc.so\n \n+# Linux shared library version of the collector\n+liblinuxgc.so: $(OBJS) dyn_load.o\n+\tgcc -shared -o liblinuxgc.so $(OBJS) dyn_load.o -lo\n+\tln liblinuxgc.so libgc.so\n+\n+# Alternative Linux rule.  This is preferable, but is likely to break the\n+# Makefile for some non-linux platforms.\n+# LIBOBJS= $(patsubst %.o, %.lo, $(OBJS))\n+#\n+#.SUFFIXES: .lo $(SUFFIXES)\n+#\n+#.c.lo:\n+#\t$(CC) $(CFLAGS) $(CPPFLAGS) -fPIC -c $< -o $@\n+#\n+# liblinuxgc.so: $(LIBOBJS) dyn_load.lo\n+# \tgcc -shared -Wl,-soname=libgc.so.0 -o libgc.so.0 $(LIBOBJS) dyn_load.lo\n+#\ttouch liblinuxgc.so\n+\n mach_dep.o: $(srcdir)/mach_dep.c $(srcdir)/mips_sgi_mach_dep.s $(srcdir)/mips_ultrix_mach_dep.s $(srcdir)/rs6000_mach_dep.s $(UTILS)\n \trm -f mach_dep.o\n \t./if_mach MIPS IRIX5 $(AS) -o mach_dep.o $(srcdir)/mips_sgi_mach_dep.s\n \t./if_mach MIPS RISCOS $(AS) -o mach_dep.o $(srcdir)/mips_ultrix_mach_dep.s\n \t./if_mach MIPS ULTRIX $(AS) -o mach_dep.o $(srcdir)/mips_ultrix_mach_dep.s\n \t./if_mach RS6000 \"\" $(AS) -o mach_dep.o $(srcdir)/rs6000_mach_dep.s\n-\t./if_mach ALPHA \"\" $(AS) -o mach_dep.o $(srcdir)/alpha_mach_dep.s\n+#\t./if_mach ALPHA \"\" $(AS) -o mach_dep.o $(srcdir)/alpha_mach_dep.s\n+#\talpha_mach_dep.s assumes that pointers are not saved in fp registers.\n+#\tGcc on a 21264 can spill pointers to fp registers.  Oops.\n \t./if_mach SPARC SUNOS5 $(AS) -o mach_dep.o $(srcdir)/sparc_mach_dep.s\n \t./if_mach SPARC SUNOS4 $(AS) -o mach_dep.o $(srcdir)/sparc_sunos4_mach_dep.s\n+\t./if_mach SPARC OPENBSD $(AS) -o mach_dep.o $(srcdir)/sparc_sunos4_mach_dep.s\n+\t./if_mach HP_PA HPUX $(AS) -o hpux_test_and_clear.o $(srcdir)/hpux_test_and_clear.s\n+\t./if_mach HP_PA HPUX $(CC) -c -o md_tmp.o $(SPECIALCFLAGS) $(srcdir)/mach_dep.c\n+\t./if_mach HP_PA HPUX ld -r -o mach_dep.o md_tmp.o hpux_test_and_clear.o\n \t./if_not_there mach_dep.o $(CC) -c $(SPECIALCFLAGS) $(srcdir)/mach_dep.c\n \n-mark_rts.o: $(srcdir)/mark_rts.c if_mach if_not_there $(UTILS)\n+mark_rts.o: $(srcdir)/mark_rts.c $(UTILS)\n \trm -f mark_rts.o\n \t-./if_mach ALPHA OSF1 $(CC) -c $(CFLAGS) -Wo,-notail $(srcdir)/mark_rts.c\n \t./if_not_there mark_rts.o $(CC) -c $(CFLAGS) $(srcdir)/mark_rts.c\n@@ -270,58 +337,60 @@ mark_rts.o: $(srcdir)/mark_rts.c if_mach if_not_there $(UTILS)\n alloc.o: version.h\n \n cord/cordbscs.o: $(srcdir)/cord/cordbscs.c $(CORD_INCLUDE_FILES)\n-\t$(CC) $(CFLAGS) -c $(srcdir)/cord/cordbscs.c\n+\t$(CC) $(CFLAGS) -c -I$(srcdir) $(srcdir)/cord/cordbscs.c\n \tmv cordbscs.o cord/cordbscs.o\n #  not all compilers understand -o filename\n \n cord/cordxtra.o: $(srcdir)/cord/cordxtra.c $(CORD_INCLUDE_FILES)\n-\t$(CC) $(CFLAGS) -c $(srcdir)/cord/cordxtra.c\n+\t$(CC) $(CFLAGS) -c -I$(srcdir) $(srcdir)/cord/cordxtra.c\n \tmv cordxtra.o cord/cordxtra.o\n \n cord/cordprnt.o: $(srcdir)/cord/cordprnt.c $(CORD_INCLUDE_FILES)\n-\t$(CC) $(CFLAGS) -c $(srcdir)/cord/cordprnt.c\n+\t$(CC) $(CFLAGS) -c -I$(srcdir) $(srcdir)/cord/cordprnt.c\n \tmv cordprnt.o cord/cordprnt.o\n \n cord/cordtest: $(srcdir)/cord/cordtest.c $(CORD_OBJS) gc.a $(UTILS)\n \trm -f cord/cordtest\n \t./if_mach SPARC DRSNX $(CC) $(CFLAGS) -o cord/cordtest $(srcdir)/cord/cordtest.c $(CORD_OBJS) gc.a -lucb\n-\t./if_mach HP_PA \"\" $(CC) $(CFLAGS) -o cord/cordtest $(srcdir)/cord/cordtest.c $(CORD_OBJS) gc.a -ldld\n+\t./if_mach HP_PA HPUX $(CC) $(CFLAGS) -o cord/cordtest $(srcdir)/cord/cordtest.c $(CORD_OBJS) gc.a -ldld `./threadlibs`\n \t./if_not_there cord/cordtest $(CC) $(CFLAGS) -o cord/cordtest $(srcdir)/cord/cordtest.c $(CORD_OBJS) gc.a `./threadlibs`\n \n cord/de: $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a $(UTILS)\n \trm -f cord/de\n-\t./if_mach SPARC DRSNX $(CC) $(CFLAGS) -o cord/de $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a $(CURSES) -lucb\n-\t./if_mach HP_PA \"\" $(CC) $(CFLAGS) -o cord/de $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a $(CURSES) -ldld\n+\t./if_mach SPARC DRSNX $(CC) $(CFLAGS) -o cord/de $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a $(CURSES) -lucb `./threadlibs`\n+\t./if_mach HP_PA HPUX $(CC) $(CFLAGS) -o cord/de $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a $(CURSES) -ldld `./threadlibs`\n \t./if_mach RS6000 \"\" $(CC) $(CFLAGS) -o cord/de $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a -lcurses\n-\t./if_mach I386 LINUX $(CC) $(CFLAGS) -o cord/de $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a -lcurses\n-\t./if_mach ALPHA LINUX $(CC) $(CFLAGS) -o cord/de $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a -lcurses\n+\t./if_mach I386 LINUX $(CC) $(CFLAGS) -o cord/de $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a -lcurses `./threadlibs`\n+\t./if_mach ALPHA LINUX $(CC) $(CFLAGS) -o cord/de $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a -lcurses `./threadlibs`\n+\t./if_mach IA64 LINUX $(CC) $(CFLAGS) -o cord/de $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a -lcurses `./threadlibs`\n+\t./if_mach M68K AMIGA $(CC) $(CFLAGS) -o cord/de $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a -lcurses\n \t./if_not_there cord/de $(CC) $(CFLAGS) -o cord/de $(srcdir)/cord/de.c cord/cordbscs.o cord/cordxtra.o gc.a $(CURSES) `./threadlibs`\n \n-if_mach: $(srcdir)/if_mach.c $(srcdir)/config.h\n-\t$(CC) $(CFLAGS) -o if_mach $(srcdir)/if_mach.c\n+if_mach: $(srcdir)/if_mach.c $(srcdir)/gcconfig.h\n+\t$(HOSTCC) $(CFLAGS) -o if_mach $(srcdir)/if_mach.c\n \n-threadlibs: $(srcdir)/threadlibs.c $(srcdir)/config.h Makefile\n-\t$(CC) $(CFLAGS) -o threadlibs $(srcdir)/threadlibs.c\n+threadlibs: $(srcdir)/threadlibs.c $(srcdir)/gcconfig.h Makefile\n+\t$(HOSTCC) $(CFLAGS) -o threadlibs $(srcdir)/threadlibs.c\n \n if_not_there: $(srcdir)/if_not_there.c\n-\t$(CC) $(CFLAGS) -o if_not_there $(srcdir)/if_not_there.c\n+\t$(HOSTCC) $(CFLAGS) -o if_not_there $(srcdir)/if_not_there.c\n \n clean: \n \trm -f gc.a *.o gctest gctest_dyn_link test_cpp \\\n \t      setjmp_test  mon.out gmon.out a.out core if_not_there if_mach \\\n \t      threadlibs $(CORD_OBJS) cord/cordtest cord/de\n \t-rm -f *~\n \n-gctest: test.o gc.a if_mach if_not_there\n+gctest: test.o gc.a $(UTILS)\n \trm -f gctest\n \t./if_mach SPARC DRSNX $(CC) $(CFLAGS) -o gctest  test.o gc.a -lucb\n-\t./if_mach HP_PA \"\" $(CC) $(CFLAGS) -o gctest  test.o gc.a -ldld\n+\t./if_mach HP_PA HPUX $(CC) $(CFLAGS) -o gctest  test.o gc.a -ldld `./threadlibs`\n \t./if_not_there gctest $(CC) $(CFLAGS) -o gctest test.o gc.a `./threadlibs`\n \n # If an optimized setjmp_test generates a segmentation fault,\n # odds are your compiler is broken.  Gctest may still work.\n # Try compiling setjmp_t.c unoptimized.\n-setjmp_test: $(srcdir)/setjmp_t.c $(srcdir)/gc.h if_mach if_not_there\n+setjmp_test: $(srcdir)/setjmp_t.c $(srcdir)/gc.h $(UTILS)\n \t$(CC) $(CFLAGS) -o setjmp_test $(srcdir)/setjmp_t.c\n \n test:  KandRtest cord/cordtest\n@@ -337,7 +406,7 @@ add_gc_prefix: add_gc_prefix.c\n \n gc.tar: $(SRCS) $(OTHER_FILES) add_gc_prefix\n \t./add_gc_prefix $(SRCS) $(OTHER_FILES) > /tmp/gc.tar-files\n-\t(cd $(srcdir)/.. ; tar cvfh - `cat /tmp/gc.tar-files`) > gc.tar\n+\ttar cvfh gc.tar `cat /tmp/gc.tar-files`\n \n pc_gc.tar: $(SRCS) $(OTHER_FILES)\n \ttar cvfX pc_gc.tar pc_excludes $(SRCS) $(OTHER_FILES)\n@@ -364,7 +433,7 @@ gc.tar.gz: gc.tar\n \tgzip gc.tar\n \n lint: $(CSRCS) test.c\n-\tlint -DLINT $(CSRCS) test.c | egrep -v \"possible pointer alignment problem|abort|exit|sbrk|mprotect|syscall\"\n+\tlint -DLINT $(CSRCS) test.c | egrep -v \"possible pointer alignment problem|abort|exit|sbrk|mprotect|syscall|change in ANSI|improper alignment\"\n \n # BTL: added to test shared library version of collector.\n # Currently works only under SunOS5.  Requires GC_INIT call from statically"}]}