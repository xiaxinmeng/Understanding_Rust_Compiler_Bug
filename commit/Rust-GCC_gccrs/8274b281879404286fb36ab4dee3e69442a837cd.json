{"sha": "8274b281879404286fb36ab4dee3e69442a837cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI3NGIyODE4Nzk0MDQyODZmYjM2YWI0ZGVlM2U2OTQ0MmE4MzdjZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-06-27T20:03:26Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-06-27T20:03:26Z"}, "message": "2014-06-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* Revert r212046 and r212054.\n\nFrom-SVN: r212085", "tree": {"sha": "292cadbeca9fdc793674e2be2399b6b56eb62ad3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/292cadbeca9fdc793674e2be2399b6b56eb62ad3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8274b281879404286fb36ab4dee3e69442a837cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8274b281879404286fb36ab4dee3e69442a837cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8274b281879404286fb36ab4dee3e69442a837cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8274b281879404286fb36ab4dee3e69442a837cd/comments", "author": null, "committer": null, "parents": [{"sha": "840bb6acfa167e0ca571dc48ab8f5eba1de612dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/840bb6acfa167e0ca571dc48ab8f5eba1de612dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/840bb6acfa167e0ca571dc48ab8f5eba1de612dd"}], "stats": {"total": 386, "additions": 164, "deletions": 222}, "files": [{"sha": "ba61134f7bdec1b2d92100714e146e7bac283481", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8274b281879404286fb36ab4dee3e69442a837cd", "patch": "@@ -1,30 +1,3 @@\n-2014-06-26  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n-\n-\t* testsuite/util/testsuite_allocator.h\n-\t(tracker_allocator_counter::allocate): Remove new invocation, only\n-\tcollect information.\n-\t(tracker_allocator_counter::deallocate): Remove delete invocation, only\n-\tcollect information.\n-\t(check_inconsistent_alloc_value_type): New.\n-\t(tracker_allocator): Transform as a facade for any allocator type.\n-\t(uneq_allocator): Likewise.\n-\t(propagating_allocator): Likewise.\n-\t* testsuite/23_containers/forward_list/debug/move_assign_neg.cc: Use an\n-\texplicitly non propagating allocator.\n-\t* testsuite/23_containers/map/debug/move_assign_neg.cc: Likewise.\n-\t* testsuite/23_containers/multimap/debug/move_assign_neg.cc: likewise.\n-\t* testsuite/23_containers/multiset/debug/move_assign_neg.cc: Likewise.\n-\t* testsuite/23_containers/set/debug/move_assign_neg.cc: Likewise.\n-\t* testsuite/23_containers/unordered_map/debug/move_assign_neg.cc:\n-\tLikewise.\n-\t* testsuite/23_containers/unordered_multimap/debug/move_assign_neg.cc:\n-\tLikewise.\n-\t* testsuite/23_containers/unordered_multiset/debug/move_assign_neg.cc:\n-\tLikewise.\n-\t* testsuite/23_containers/unordered_set/debug/move_assign_neg.cc:\n-\tLikewise.\n-\t* testsuite/23_containers/vector/debug/move_assign_neg.cc: Likewise.\n-\n 2014-06-26  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/shared_ptr_base.h (__shared_ptr::_Deleter): Fix"}, {"sha": "91e459fd3c3ad2f7d3e38fc0cf41b516b1069b9f", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/debug/move_assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2Fmove_assign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2Fmove_assign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2Fmove_assign_neg.cc?ref=8274b281879404286fb36ab4dee3e69442a837cd", "patch": "@@ -25,7 +25,7 @@ void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  typedef __gnu_test::propagating_allocator<int, false> alloc_type;\n+  typedef __gnu_test::uneq_allocator<int> alloc_type;\n   typedef __gnu_debug::forward_list<int, alloc_type> test_type;\n \n   test_type v1(alloc_type(1));"}, {"sha": "0d63fe944bf0645d9d9296bb7cb138b358172eda", "filename": "libstdc++-v3/testsuite/23_containers/map/debug/move_assign_neg.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fdebug%2Fmove_assign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fdebug%2Fmove_assign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fdebug%2Fmove_assign_neg.cc?ref=8274b281879404286fb36ab4dee3e69442a837cd", "patch": "@@ -25,8 +25,7 @@ void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  typedef __gnu_test::propagating_allocator<std::pair<const int, int>,\n-\t\t\t\t\t    false> alloc_type;\n+  typedef __gnu_test::uneq_allocator<std::pair<const int, int> > alloc_type;\n   typedef __gnu_debug::map<int, int, std::less<int>, alloc_type> test_type;\n \n   test_type v1(alloc_type(1));"}, {"sha": "e514a28dbed704cbbd970592f37d7351a238c820", "filename": "libstdc++-v3/testsuite/23_containers/multimap/debug/move_assign_neg.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fdebug%2Fmove_assign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fdebug%2Fmove_assign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fdebug%2Fmove_assign_neg.cc?ref=8274b281879404286fb36ab4dee3e69442a837cd", "patch": "@@ -25,8 +25,7 @@ void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  typedef __gnu_test::propagating_allocator<std::pair<const int, int>,\n-\t\t\t\t\t    false> alloc_type;\n+  typedef __gnu_test::uneq_allocator<std::pair<const int, int> > alloc_type;\n   typedef __gnu_debug::multimap<int, int, std::less<int>, alloc_type> test_type;\n \n   test_type v1(alloc_type(1));"}, {"sha": "af879d94dadb0ff93380842b135e79e9c8a8b5af", "filename": "libstdc++-v3/testsuite/23_containers/multiset/debug/move_assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fdebug%2Fmove_assign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fdebug%2Fmove_assign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fdebug%2Fmove_assign_neg.cc?ref=8274b281879404286fb36ab4dee3e69442a837cd", "patch": "@@ -25,7 +25,7 @@ void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  typedef __gnu_test::propagating_allocator<int, false> alloc_type;\n+  typedef __gnu_test::uneq_allocator<int> alloc_type;\n   typedef __gnu_debug::multiset<int, std::less<int>, alloc_type> test_type;\n \n   test_type v1(alloc_type(1));"}, {"sha": "b7f51efd3933f305daf298f4966d0b6567cec28c", "filename": "libstdc++-v3/testsuite/23_containers/set/debug/move_assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fdebug%2Fmove_assign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fdebug%2Fmove_assign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fdebug%2Fmove_assign_neg.cc?ref=8274b281879404286fb36ab4dee3e69442a837cd", "patch": "@@ -25,7 +25,7 @@ void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  typedef __gnu_test::propagating_allocator<int, false> alloc_type;\n+  typedef __gnu_test::uneq_allocator<int> alloc_type;\n   typedef __gnu_debug::set<int, std::less<int>, alloc_type> test_type;\n \n   test_type v1(alloc_type(1));"}, {"sha": "ef5db1165f397c82c9debafc7b05f3f893b1b9ef", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/debug/move_assign_neg.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2Fmove_assign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2Fmove_assign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2Fmove_assign_neg.cc?ref=8274b281879404286fb36ab4dee3e69442a837cd", "patch": "@@ -25,8 +25,7 @@ void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  typedef __gnu_test::propagating_allocator<std::pair<const int, int>,\n-\t\t\t\t\t    false> alloc_type;\n+  typedef __gnu_test::uneq_allocator<std::pair<const int, int> > alloc_type;\n   typedef __gnu_debug::unordered_map<int, int,\n \t\t\t\t     std::hash<int>, std::equal_to<int>,\n \t\t\t\t     alloc_type> test_type;"}, {"sha": "b6de1eef581e7fb30ba744ec80517e7bf1aded81", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/debug/move_assign_neg.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fdebug%2Fmove_assign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fdebug%2Fmove_assign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fdebug%2Fmove_assign_neg.cc?ref=8274b281879404286fb36ab4dee3e69442a837cd", "patch": "@@ -25,8 +25,7 @@ void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  typedef __gnu_test::propagating_allocator<std::pair<const int, int>,\n-\t\t\t\t\t    false> alloc_type;\n+  typedef __gnu_test::uneq_allocator<std::pair<const int, int>> alloc_type;\n   typedef __gnu_debug::unordered_multimap<int, int, std::hash<int>,\n \t\t\t\t\t  std::equal_to<int>,\n \t\t\t\t\t  alloc_type> test_type;"}, {"sha": "52a8df2a9f2ca4144f096155311cf48aa854028b", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/debug/move_assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fdebug%2Fmove_assign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fdebug%2Fmove_assign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fdebug%2Fmove_assign_neg.cc?ref=8274b281879404286fb36ab4dee3e69442a837cd", "patch": "@@ -25,7 +25,7 @@ void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  typedef __gnu_test::propagating_allocator<int, false> alloc_type;\n+  typedef __gnu_test::uneq_allocator<int> alloc_type;\n   typedef __gnu_debug::unordered_multiset<int, std::hash<int>,\n \t\t\t\t\t  std::equal_to<int>,\n \t\t\t\t\t  alloc_type> test_type;"}, {"sha": "9d2a8abc4254ce013145de8feb9a2022cd82c567", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/debug/move_assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2Fmove_assign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2Fmove_assign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2Fmove_assign_neg.cc?ref=8274b281879404286fb36ab4dee3e69442a837cd", "patch": "@@ -25,7 +25,7 @@ void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  typedef __gnu_test::propagating_allocator<int, false> alloc_type;\n+  typedef __gnu_test::uneq_allocator<int> alloc_type;\n   typedef __gnu_debug::unordered_set<int, std::hash<int>,\n \t\t\t\t     std::equal_to<int>,\n \t\t\t\t     alloc_type> test_type;"}, {"sha": "eb2233b35fe1e80687690b89772186368e430306", "filename": "libstdc++-v3/testsuite/23_containers/vector/debug/move_assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fmove_assign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fmove_assign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fmove_assign_neg.cc?ref=8274b281879404286fb36ab4dee3e69442a837cd", "patch": "@@ -27,7 +27,7 @@ void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  typedef __gnu_test::propagating_allocator<int, false> alloc_type;\n+  typedef __gnu_test::uneq_allocator<int> alloc_type;\n   typedef __gnu_debug::vector<int, alloc_type> test_type;\n \n   test_type v1(alloc_type(1));"}, {"sha": "822a025f4fa25428cf2b274074e57506b032227e", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 154, "deletions": 181, "changes": 335, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8274b281879404286fb36ab4dee3e69442a837cd/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=8274b281879404286fb36ab4dee3e69442a837cd", "patch": "@@ -29,7 +29,6 @@\n #include <tr1/unordered_map>\n #include <bits/move.h>\n #include <ext/pointer.h>\n-#include <ext/alloc_traits.h>\n #include <testsuite_hooks.h>\n \n namespace __gnu_test\n@@ -39,19 +38,26 @@ namespace __gnu_test\n   public:\n     typedef std::size_t    size_type; \n \n-    static void\n+    static void*\n     allocate(size_type blocksize)\n-    { allocationCount_ += blocksize; }\n+    {\n+      void* p = ::operator new(blocksize);\n+      allocationCount_ += blocksize;\n+      return p;\n+    }\n \n     static void\n-    construct() { ++constructCount_; }\n+    construct() { constructCount_++; }\n \n     static void\n-    destroy() { ++destructCount_; }\n+    destroy() { destructCount_++; }\n \n     static void\n-    deallocate(size_type blocksize)\n-    { deallocationCount_ += blocksize; }\n+    deallocate(void* p, size_type blocksize)\n+    {\n+      ::operator delete(p);\n+      deallocationCount_ += blocksize;\n+    }\n \n     static size_type\n     get_allocation_count() { return allocationCount_; }\n@@ -81,142 +87,103 @@ namespace __gnu_test\n     static int        destructCount_;\n   };\n \n-  // Helper to detect inconsistency between type used to instantiate an\n-  // allocator and the underlying allocator value_type.\n-  template<typename T, typename Alloc,\n-\t   typename = typename Alloc::value_type>\n-    struct check_consistent_alloc_value_type;\n-\n-  template<typename T, typename Alloc>\n-    struct check_consistent_alloc_value_type<T, Alloc, T>\n-    { typedef T value_type; };\n-\n-  // An allocator facade that intercepts allocate/deallocate/construct/destroy\n-  // calls and track them through the tracker_allocator_counter class. This\n-  // class is templated on the target object type, but tracker isn't.\n-  template<typename T, typename Alloc = std::allocator<T> >\n-    class tracker_allocator : public Alloc\n-    {\n-    private:\n-      typedef tracker_allocator_counter counter_type;\n-\n-      typedef __gnu_cxx::__alloc_traits<Alloc> AllocTraits;\n+  // A simple basic allocator that just forwards to the\n+  // tracker_allocator_counter to fulfill memory requests.  This class\n+  // is templated on the target object type, but tracker isn't.\n+  template<class T>\n+  class tracker_allocator\n+  {\n+  private:\n+    typedef tracker_allocator_counter counter_type;\n \n-    public:\n-      typedef typename\n-      check_consistent_alloc_value_type<T, Alloc>::value_type value_type;\n-      typedef typename AllocTraits::pointer pointer;\n-      typedef typename AllocTraits::size_type size_type;\n+  public:\n+    typedef T              value_type;\n+    typedef T*             pointer;\n+    typedef const T*       const_pointer;\n+    typedef T&             reference;\n+    typedef const T&       const_reference;\n+    typedef std::size_t    size_type; \n+    typedef std::ptrdiff_t difference_type; \n     \n-      template<class U>\n-\tstruct rebind\n-\t{\n-\t  typedef tracker_allocator<U,\n-\t\ttypename AllocTraits::template rebind<U>::other> other;\n-\t};\n+    template<class U> struct rebind { typedef tracker_allocator<U> other; };\n     \n-#if __cplusplus >= 201103L\n-      tracker_allocator() = default;\n-      tracker_allocator(const tracker_allocator&) = default;\n-      tracker_allocator(tracker_allocator&&) = default;\n-\n-      // Perfect forwarding constructor.\n-      template<typename... _Args>\n-\ttracker_allocator(_Args&&... __args)\n-\t  : Alloc(std::forward<_Args>(__args)...)\n-\t{ }\n-#else\n-      tracker_allocator()\n-      { }\n+    pointer\n+    address(reference value) const _GLIBCXX_NOEXCEPT\n+    { return std::__addressof(value); }\n \n-      tracker_allocator(const tracker_allocator&)\n-      { }\n+    const_pointer\n+    address(const_reference value) const _GLIBCXX_NOEXCEPT\n+    { return std::__addressof(value); }\n+\n+    tracker_allocator() _GLIBCXX_USE_NOEXCEPT\n+    { }\n \n-      ~tracker_allocator()\n+    tracker_allocator(const tracker_allocator&) _GLIBCXX_USE_NOEXCEPT\n+    { }\n+\n+    template<class U>\n+      tracker_allocator(const tracker_allocator<U>&) _GLIBCXX_USE_NOEXCEPT\n       { }\n-#endif\n \n-      template<class U>\n-\ttracker_allocator(const tracker_allocator<U,\n-\t  typename AllocTraits::template rebind<U>::other>& alloc)\n-\t    _GLIBCXX_USE_NOEXCEPT\n-\t  : Alloc(alloc)\n-\t{ }\n+    ~tracker_allocator() _GLIBCXX_USE_NOEXCEPT\n+    { }\n \n-      pointer\n-      allocate(size_type n, const void* = 0)\n-      {\n-\tpointer p = AllocTraits::allocate(*this, n);\n-\tcounter_type::allocate(n * sizeof(T));\n-\treturn p;\n-      }\n+    size_type\n+    max_size() const _GLIBCXX_USE_NOEXCEPT\n+    { return size_type(-1) / sizeof(T); }\n \n-#if __cplusplus >= 201103L\n-      template<typename U, typename... Args>\n-\tvoid\n-\tconstruct(U* p, Args&&... args) \n-\t{\n-\t  AllocTraits::construct(*this, p, std::forward<Args>(args)...);\n-\t  counter_type::construct();\n-\t}\n+    pointer\n+    allocate(size_type n, const void* = 0)\n+    { return static_cast<pointer>(counter_type::allocate(n * sizeof(T))); }\n \n-      template<typename U>\n-\tvoid\n-\tdestroy(U* p)\n-\t{\n-\t  AllocTraits::destroy(*this, p);\n-\t  counter_type::destroy();\n-\t}\n-#else\n+#if __cplusplus >= 201103L\n+    template<typename U, typename... Args>\n       void\n-      construct(pointer p, const T& value)\n+      construct(U* p, Args&&... args) \n       {\n-\tAllocTraits::construct(*this, p, value);\n+\t::new((void *)p) U(std::forward<Args>(args)...);\n \tcounter_type::construct();\n       }\n \n+    template<typename U>\n       void\n-      destroy(pointer p)\n+      destroy(U* p)\n       {\n-\tAllocTraits::destroy(*this, p);\n+\tp->~U();\n \tcounter_type::destroy();\n       }\n-#endif\n-\n-      void\n-      deallocate(pointer p, size_type num)\n-      {\n-\tcounter_type::deallocate(num * sizeof(T));\n-\tAllocTraits::deallocate(*this, p, num);\n-      }\n+#else\n+    void\n+    construct(pointer p, const T& value)\n+    {\n+      ::new ((void *)p) T(value);\n+      counter_type::construct();\n+    }\n \n-      // Implement swap for underlying allocators that might need it.\n-      friend inline void\n-      swap(tracker_allocator& a, tracker_allocator& b)\n-      {\n-\tusing std::swap;\n+    void\n+    destroy(pointer p)\n+    {\n+      p->~T();\n+      counter_type::destroy();\n+    }\n+#endif\n \n-\tAlloc& aa = a;\n-\tAlloc& ab = b;\n-\tswap(aa, ab);\n-      } \n-    };\n+    void\n+    deallocate(pointer p, size_type num)\n+    { counter_type::deallocate(p, num * sizeof(T)); }\n+  };\n \n-  template<class T1, class Alloc1, class T2, class Alloc2>\n+  template<class T1, class T2>\n     bool\n-    operator==(const tracker_allocator<T1, Alloc1>& lhs, \n-\t       const tracker_allocator<T2, Alloc2>& rhs) throw()\n-    {\n-      const Alloc1& alloc1 = lhs;\n-      const Alloc2& alloc2 = rhs;\n-      return lhs == rhs;\n-    }\n+    operator==(const tracker_allocator<T1>&, \n+\t       const tracker_allocator<T2>&) throw()\n+    { return true; }\n \n-  template<class T1, class Alloc1, class T2, class Alloc2>\n+  template<class T1, class T2>\n     bool\n-    operator!=(const tracker_allocator<T1, Alloc1>& lhs, \n-\t       const tracker_allocator<T2, Alloc2>& rhs) throw()\n-    { return !(lhs == rhs); }\n+    operator!=(const tracker_allocator<T1>&, \n+\t       const tracker_allocator<T2>&) throw()\n+    { return false; }\n \n   bool\n   check_construct_destroy(const char* tag, int expected_c, int expected_d);\n@@ -226,7 +193,7 @@ namespace __gnu_test\n     check_deallocate_null()\n     {\n       // Let's not core here...\n-      Alloc a;\n+      Alloc  a;\n       a.deallocate(0, 1);\n       a.deallocate(0, 10);\n       return true;\n@@ -252,14 +219,15 @@ namespace __gnu_test\n       throw;\n     }\n \n+\n   // A simple allocator which can be constructed endowed of a given\n   // \"personality\" (an integer), queried in operator== to simulate the\n   // behavior of realworld \"unequal\" allocators (i.e., not exploiting\n   // the provision in 20.1.5/4, first bullet).  A global unordered_map,\n   // filled at allocation time with (pointer, personality) pairs, is\n   // then consulted to enforce the requirements in Table 32 about\n   // deallocation vs allocator equality.  Note that this allocator is\n-  // swappable, not copy assignable, consistently with Option 3 of DR 431\n+  // swappable, not assignable, consistently with Option 3 of DR 431\n   // (see N1599).\n   struct uneq_allocator_base\n   {\n@@ -276,33 +244,26 @@ namespace __gnu_test\n     }\n   };\n \n-  template<typename Tp, typename Alloc = std::allocator<Tp> >\n+  template<typename Tp>\n     class uneq_allocator\n-    : private uneq_allocator_base,\n-      public Alloc\n+    : private uneq_allocator_base\n     {\n-      typedef __gnu_cxx::__alloc_traits<Alloc> AllocTraits;\n-\n-      Alloc& base() { return *this; }\n-      const Alloc& base() const  { return *this; }\n-      void swap_base(Alloc& b) { swap(b, this->base()); }\n-\n     public:\n-      typedef typename check_consistent_alloc_value_type<Tp, Alloc>::value_type\n-\tvalue_type;\n-      typedef typename AllocTraits::size_type\tsize_type;\n-      typedef typename AllocTraits::pointer\tpointer;\n+      typedef std::size_t                         size_type;\n+      typedef std::ptrdiff_t                      difference_type;\n+      typedef Tp*                                 pointer;\n+      typedef const Tp*                           const_pointer;\n+      typedef Tp&                                 reference;\n+      typedef const Tp&                           const_reference;\n+      typedef Tp                                  value_type;\n \n #if __cplusplus >= 201103L\n-      typedef std::true_type\t\t\tpropagate_on_container_swap;\n+      typedef std::true_type                      propagate_on_container_swap;\n #endif\n \n       template<typename Tp1>\n-\tstruct rebind\n-\t{\n-\t  typedef uneq_allocator<Tp1,\n-\t\ttypename AllocTraits::template rebind<Tp1>::other> other;\n-\t};\n+        struct rebind\n+\t{ typedef uneq_allocator<Tp1> other; };\n \n       uneq_allocator() _GLIBCXX_USE_NOEXCEPT\n       : personality(0) { }\n@@ -311,9 +272,7 @@ namespace __gnu_test\n       : personality(person) { }\n       \n       template<typename Tp1>\n-\tuneq_allocator(const uneq_allocator<Tp1,\n-\t\t       typename AllocTraits::template rebind<Tp1>::other>& b)\n-\t_GLIBCXX_USE_NOEXCEPT\n+        uneq_allocator(const uneq_allocator<Tp1>& b) _GLIBCXX_USE_NOEXCEPT\n \t: personality(b.get_personality()) { }\n \n       ~uneq_allocator() _GLIBCXX_USE_NOEXCEPT\n@@ -322,24 +281,35 @@ namespace __gnu_test\n       int get_personality() const { return personality; }\n       \n       pointer\n-      allocate(size_type n, const void* hint = 0)\n+      address(reference x) const _GLIBCXX_NOEXCEPT\n+      { return std::__addressof(x); }\n+    \n+      const_pointer\n+      address(const_reference x) const _GLIBCXX_NOEXCEPT\n+      { return std::__addressof(x); }\n+\n+      pointer\n+      allocate(size_type n, const void* = 0)\n       { \n-\tpointer p = AllocTraits::allocate(*this, n);\n+\tif (__builtin_expect(n > this->max_size(), false))\n+\t  std::__throw_bad_alloc();\n+\t\n+\tpointer p = static_cast<Tp*>(::operator new(n * sizeof(Tp)));\n \ttry\n \t  {\n \t    get_map().insert(map_type::value_type(reinterpret_cast<void*>(p),\n \t\t\t\t\t\t  personality));\n \t  }\n \tcatch(...)\n \t  {\n-\t    AllocTraits::deallocate(*this, p, n);\n+\t    ::operator delete(p);\n \t    __throw_exception_again;\n \t  }\n \treturn p;\n       }\n \n       void\n-      deallocate(pointer p, size_type n)\n+      deallocate(pointer p, size_type)\n       {\n \tbool test __attribute__((unused)) = true;\n \n@@ -353,58 +323,66 @@ namespace __gnu_test\n \tVERIFY( it->second == personality );\n \n \tget_map().erase(it);\n-\tAllocTraits::deallocate(*this, p, n);\n+\t::operator delete(p);\n       }\n \n+      size_type\n+      max_size() const _GLIBCXX_USE_NOEXCEPT \n+      { return size_type(-1) / sizeof(Tp); }\n+\n #if __cplusplus >= 201103L\n+      template<typename U, typename... Args>\n+        void\n+        construct(U* p, Args&&... args) \n+\t{ ::new((void *)p) U(std::forward<Args>(args)...); }\n+\n+      template<typename U>\n+\tvoid \n+\tdestroy(U* p) { p->~U(); }\n+\n       // Not copy assignable...\n       uneq_allocator&\n       operator=(const uneq_allocator&) = delete;\n-\n-      // ... but still moveable if base allocator is.\n-      uneq_allocator&\n-      operator=(uneq_allocator&&) = default;\n #else\n+      void \n+      construct(pointer p, const Tp& val) \n+      { ::new((void *)p) Tp(val); }\n+\n+      void \n+      destroy(pointer p) { p->~Tp(); }\n+\n     private:\n       // Not assignable...\n       uneq_allocator&\n       operator=(const uneq_allocator&);\n #endif\n \n     private:\n+\n       // ... yet swappable!\n       friend inline void\n       swap(uneq_allocator& a, uneq_allocator& b)\n-      {\n-\tstd::swap(a.personality, b.personality);\n-\ta.swap_base(b);\n-      } \n-\n+      { std::swap(a.personality, b.personality); } \n+      \n       template<typename Tp1>\n-\tfriend inline bool\n-\toperator==(const uneq_allocator& a,\n-\t\t   const uneq_allocator<Tp1,\n-\t\t   typename AllocTraits::template rebind<Tp1>::other>& b)\n-\t{ return a.personality == b.personality; }\n+        friend inline bool\n+        operator==(const uneq_allocator& a, const uneq_allocator<Tp1>& b)\n+        { return a.personality == b.personality; }\n \n       template<typename Tp1>\n-\tfriend inline bool\n-\toperator!=(const uneq_allocator& a,\n-\t\t   const uneq_allocator<Tp1,\n-\t\t   typename AllocTraits::template rebind<Tp1>::other>& b)\n-\t{ return !(a == b); }\n+        friend inline bool\n+        operator!=(const uneq_allocator& a, const uneq_allocator<Tp1>& b)\n+        { return !(a == b); }\n       \n       int personality;\n     };\n \n #if __cplusplus >= 201103L\n   // An uneq_allocator which can be used to test allocator propagation.\n-  template<typename Tp, bool Propagate, typename Alloc = std::allocator<Tp>>\n-    class propagating_allocator : public uneq_allocator<Tp, Alloc>\n+  template<typename Tp, bool Propagate>\n+    class propagating_allocator : public uneq_allocator<Tp>\n     {\n-      typedef __gnu_cxx::__alloc_traits<Alloc> AllocTraits;\n-\n-      typedef uneq_allocator<Tp, Alloc> base_alloc;\n+      typedef uneq_allocator<Tp> base_alloc;\n       base_alloc& base() { return *this; }\n       const base_alloc& base() const  { return *this; }\n       void swap_base(base_alloc& b) { swap(b, this->base()); }\n@@ -415,20 +393,15 @@ namespace __gnu_test\n       // default allocator_traits::rebind_alloc would select\n       // uneq_allocator::rebind so we must define rebind here\n       template<typename Up>\n-\tstruct rebind\n-\t{\n-\t  typedef propagating_allocator<Up, Propagate,\n-\t\ttypename AllocTraits::template rebind<Up>::other> other;\n-\t};\n+\tstruct rebind { typedef propagating_allocator<Up, Propagate> other; };\n \n       propagating_allocator(int i) noexcept\n       : base_alloc(i)\n       { }\n \n       template<typename Up>\n-\tpropagating_allocator(const propagating_allocator<Up, Propagate,\n-\t\t\t      typename AllocTraits::template rebind<Up>::other>& a)\n-\tnoexcept\n+\tpropagating_allocator(const propagating_allocator<Up, Propagate>& a)\n+       \tnoexcept\n \t: base_alloc(a)\n \t{ }\n \n@@ -445,8 +418,8 @@ namespace __gnu_test\n       }\n \n       template<bool P2>\n-\tpropagating_allocator&\n-\toperator=(const propagating_allocator<Tp, P2, Alloc>& a) noexcept\n+  \tpropagating_allocator&\n+  \toperator=(const propagating_allocator<Tp, P2>& a) noexcept\n   \t{\n \t  static_assert(P2, \"assigning propagating_allocator<T, true>\");\n \t  propagating_allocator(a).swap_base(*this);"}]}