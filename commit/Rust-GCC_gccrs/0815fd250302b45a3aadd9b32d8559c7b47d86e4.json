{"sha": "0815fd250302b45a3aadd9b32d8559c7b47d86e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgxNWZkMjUwMzAyYjQ1YTNhYWRkOWIzMmQ4NTU5YzdiNDdkODZlNA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-09-10T15:22:20Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-09-10T15:22:20Z"}, "message": "re PR fortran/66993 (Spurious ambiguous symbol error with submodules)\n\n2015-09-10  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/66993\n\t* module.c (read_module): If a symtree exists and the symbol has\n\tbeen associated in a submodule from a parent (sub)module, attach\n\tthe symbol to a 'unique symtree' and the new symbol to the\n\texisting symtree.\n\n2015-09-10  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/66993\n\t* gfortran.dg/submodule_11.f08: New test.\n\nFrom-SVN: r227648", "tree": {"sha": "cbbed0ba7f05f01338b8fe7595098c5464e234d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbbed0ba7f05f01338b8fe7595098c5464e234d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0815fd250302b45a3aadd9b32d8559c7b47d86e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0815fd250302b45a3aadd9b32d8559c7b47d86e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0815fd250302b45a3aadd9b32d8559c7b47d86e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0815fd250302b45a3aadd9b32d8559c7b47d86e4/comments", "author": null, "committer": null, "parents": [{"sha": "c661ca7956246394a9e440d14d5e57a195cc6eb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c661ca7956246394a9e440d14d5e57a195cc6eb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c661ca7956246394a9e440d14d5e57a195cc6eb9"}], "stats": {"total": 88, "additions": 78, "deletions": 10}, "files": [{"sha": "4e0d38ff0d1860621d37d76df4d5a5418b4d20da", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0815fd250302b45a3aadd9b32d8559c7b47d86e4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0815fd250302b45a3aadd9b32d8559c7b47d86e4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0815fd250302b45a3aadd9b32d8559c7b47d86e4", "patch": "@@ -1,3 +1,11 @@\n+2015-09-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/66993\n+\t* module.c (read_module): If a symtree exists and the symbol has\n+\tbeen associated in a submodule from a parent (sub)module, attach\n+\tthe symbol to a 'unique symtree' and the new symbol to the\n+\texisting symtree.\n+\n 2015-09-04  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* intrinsic.h (gfc_simplify_mvbits): Remove."}, {"sha": "d88969e7d5d24ce23b69e04dfef2a11105b84308", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0815fd250302b45a3aadd9b32d8559c7b47d86e4/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0815fd250302b45a3aadd9b32d8559c7b47d86e4/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=0815fd250302b45a3aadd9b32d8559c7b47d86e4", "patch": "@@ -5132,7 +5132,8 @@ read_module (void)\n \n \t  st = gfc_find_symtree (gfc_current_ns->sym_root, p);\n \n-\t  if (st != NULL)\n+\t  if (st != NULL\n+\t      && !(st->n.sym && st->n.sym->attr.used_in_submodule))\n \t    {\n \t      /* Check for ambiguous symbols.  */\n \t      if (check_for_ambiguous (st, info))\n@@ -5142,14 +5143,23 @@ read_module (void)\n \t    }\n \t  else\n \t    {\n-\t      st = gfc_find_symtree (gfc_current_ns->sym_root, name);\n-\n-\t      /* Create a symtree node in the current namespace for this\n-\t\t symbol.  */\n-\t      st = check_unique_name (p)\n-\t\t   ? gfc_get_unique_symtree (gfc_current_ns)\n-\t\t   : gfc_new_symtree (&gfc_current_ns->sym_root, p);\n-\t      st->ambiguous = ambiguous;\n+\t      if (st)\n+\t\t{\n+\t\t  /* This symbol is host associated from a module in a\n+\t\t     submodule.  Hide it with a unique symtree.  */\n+\t\t  gfc_symtree *s = gfc_get_unique_symtree (gfc_current_ns);\n+\t\t  s->n.sym = st->n.sym;\n+\t\t  st->n.sym = NULL;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  /* Create a symtree node in the current namespace for this\n+\t\t     symbol.  */\n+\t\t  st = check_unique_name (p)\n+\t\t       ? gfc_get_unique_symtree (gfc_current_ns)\n+\t\t       : gfc_new_symtree (&gfc_current_ns->sym_root, p);\n+\t\t  st->ambiguous = ambiguous;\n+\t\t}\n \n \t      sym = info->u.rsym.sym;\n "}, {"sha": "1671b4c11ff5accc6d54b772f3ca00bee4c81ff7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0815fd250302b45a3aadd9b32d8559c7b47d86e4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0815fd250302b45a3aadd9b32d8559c7b47d86e4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0815fd250302b45a3aadd9b32d8559c7b47d86e4", "patch": "@@ -1,3 +1,8 @@\n+2015-09-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/66993\n+\t* gfortran.dg/submodule_11.f08: New test.\n+\n 2015-09-10  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/67506\n@@ -476,7 +481,7 @@\n \n 2015-08-28  Andrew Bennett  <andrew.bennett@imgtec.com>\n \n-\t* gcc.target/mips/madd-8.c: Add lo register to clobber list. \n+\t* gcc.target/mips/madd-8.c: Add lo register to clobber list.\n \t* gcc.target/mips/msub-8.c: Ditto\n \n 2015-08-27  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>"}, {"sha": "20367a9d19d15afd98c3f84f02fa5541a99d73dc", "filename": "gcc/testsuite/gfortran.dg/submodule_11.f08", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0815fd250302b45a3aadd9b32d8559c7b47d86e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubmodule_11.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0815fd250302b45a3aadd9b32d8559c7b47d86e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubmodule_11.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubmodule_11.f08?ref=0815fd250302b45a3aadd9b32d8559c7b47d86e4", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do run }\n+! Test the fix for PR66993, in which the use associated version of 'i'\n+! was incorrectly determined to be ambiguous with the 'i', host associated\n+! in submodule 'sm' from the module 'm'. The principle has been tested with\n+! the function 'time_two' in addition.\n+!\n+! Contributed by Mikael Morin  <mikael.morin@sfr.fr>\n+!\n+module m\n+  integer, parameter :: i = -1\n+  interface\n+    module subroutine show_i\n+    end subroutine show_i\n+  end interface\n+contains\n+  integer function times_two (arg)\n+    integer :: arg\n+    times_two = -2*arg\n+  end function\n+end module m\n+\n+module n\n+  integer, parameter :: i = 2\n+contains\n+  integer function times_two (arg)\n+    integer :: arg\n+    times_two = 2*arg\n+  end function\n+end module n\n+\n+submodule (m) sm\n+  use n\n+contains\n+  module subroutine show_i\n+    if (i .ne. 2) call abort\n+    if (times_two (i) .ne. 4) call abort\n+  end subroutine show_i\n+end submodule sm\n+\n+program p\n+  use m\n+  call show_i\n+  if (i .ne. -1) call abort\n+  if (times_two (i) .ne. 2) call abort\n+end program"}]}