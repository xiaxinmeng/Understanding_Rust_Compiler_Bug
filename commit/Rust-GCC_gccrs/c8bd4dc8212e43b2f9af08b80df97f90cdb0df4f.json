{"sha": "c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f", "node_id": "C_kwDOANBUbNoAKGM4YmQ0ZGM4MjEyZTQzYjJmOWFmMDhiODBkZjk3ZjkwY2RiMGRmNGY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-23T21:45:16Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-25T21:05:15Z"}, "message": "libstdc++: Avoid symlink race in filesystem::remove_all [PR104161]\n\nThis adds a new internal flag to the filesystem::directory_iterator\nconstructor that makes it fail if the path is a symlink that resolves to\na directory. This prevents filesystem::remove_all from following a\nsymlink to a directory, rather than deleting the symlink itself.\n\nWe can also use that new flag in recursive_directory_iterator to ensure\nthat we don't follow symlinks if the follow_directory_symlink option is\nnot set.\n\nThis also moves an error check in filesystem::remove_all after the while\nloop, so that errors from the directory_iterator constructor are\nreproted, instead of continuing to the filesystem::remove call below.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/104161\n\t* acinclude.m4 (GLIBCXX_CHECK_FILESYSTEM_DEPS): Check for\n\tfdopendir.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* src/c++17/fs_dir.cc (_Dir): Add nofollow flag to constructor\n\tand pass it to base class constructor.\n\t(directory_iterator): Pass nofollow flag to _Dir constructor.\n\t(fs::recursive_directory_iterator::increment): Likewise.\n\t* src/c++17/fs_ops.cc (do_remove_all): Use nofollow option for\n\tdirectory_iterator constructor. Move error check outside loop.\n\t* src/filesystem/dir-common.h (_Dir_base): Add nofollow flag to\n\tconstructor and when it's set use ::open with O_NOFOLLOW and\n\tO_DIRECTORY.\n\t* src/filesystem/dir.cc (_Dir): Add nofollow flag to constructor\n\tand pass it to base class constructor.\n\t(directory_iterator): Pass nofollow flag to _Dir constructor.\n\t(fs::recursive_directory_iterator::increment): Likewise.\n\t* src/filesystem/ops.cc (remove_all): Use nofollow option for\n\tdirectory_iterator constructor. Move error check outside loop.", "tree": {"sha": "23b7500bdfc19a2ec62157cd271d06a39da098cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23b7500bdfc19a2ec62157cd271d06a39da098cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec543c9833c2d9283c035cd8430849eb4ec04406", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec543c9833c2d9283c035cd8430849eb4ec04406", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec543c9833c2d9283c035cd8430849eb4ec04406"}], "stats": {"total": 162, "additions": 134, "deletions": 28}, "files": [{"sha": "7b6b807114a42ddce98d11d657c1c3d0e3d7fcd2", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f", "patch": "@@ -4735,6 +4735,18 @@ dnl\n   if test $glibcxx_cv_truncate = yes; then\n     AC_DEFINE(HAVE_TRUNCATE, 1, [Define if truncate is available in <unistd.h>.])\n   fi\n+dnl\n+  AC_CACHE_CHECK([for fdopendir],\n+    glibcxx_cv_fdopendir, [dnl\n+    GCC_TRY_COMPILE_OR_LINK(\n+      [#include <dirent.h>],\n+      [::fdopendir(1);],\n+      [glibcxx_cv_fdopendir=yes],\n+      [glibcxx_cv_fdopendir=no])\n+  ])\n+  if test $glibcxx_cv_truncate = yes; then\n+    AC_DEFINE(HAVE_FDOPENDIR, 1, [Define if fdopendir is available in <dirent.h>.])\n+  fi\n dnl\n   CXXFLAGS=\"$ac_save_CXXFLAGS\"\n   AC_LANG_RESTORE"}, {"sha": "e25b7de318f79bf125bad9e32abaaab388bdf013", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f", "patch": "@@ -100,6 +100,9 @@\n /* Define to 1 if you have the <fcntl.h> header file. */\n #undef HAVE_FCNTL_H\n \n+/* Define if fdopendir is available in <dirent.h>. */\n+#undef HAVE_FDOPENDIR\n+\n /* Define to 1 if you have the <fenv.h> header file. */\n #undef HAVE_FENV_H\n "}, {"sha": "5c6e51f5c11266ef60c7b7b9924abde6c9fb70e6", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f", "patch": "@@ -77029,6 +77029,61 @@ $as_echo \"$glibcxx_cv_truncate\" >&6; }\n \n $as_echo \"#define HAVE_TRUNCATE 1\" >>confdefs.h\n \n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for fdopendir\" >&5\n+$as_echo_n \"checking for fdopendir... \" >&6; }\n+if ${glibcxx_cv_fdopendir+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+      if test x$gcc_no_link = xyes; then\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <dirent.h>\n+int\n+main ()\n+{\n+::fdopendir(1);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_fdopendir=yes\n+else\n+  glibcxx_cv_fdopendir=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <dirent.h>\n+int\n+main ()\n+{\n+::fdopendir(1);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  glibcxx_cv_fdopendir=yes\n+else\n+  glibcxx_cv_fdopendir=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_fdopendir\" >&5\n+$as_echo \"$glibcxx_cv_fdopendir\" >&6; }\n+  if test $glibcxx_cv_truncate = yes; then\n+\n+$as_echo \"#define HAVE_FDOPENDIR 1\" >>confdefs.h\n+\n   fi\n   CXXFLAGS=\"$ac_save_CXXFLAGS\"\n   ac_ext=c"}, {"sha": "e050304c19ac6999d121d9275db344ceb735090a", "filename": "libstdc++-v3/src/c++17/fs_dir.cc", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_dir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_dir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_dir.cc?ref=c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f", "patch": "@@ -44,8 +44,9 @@ template class std::__shared_ptr<fs::recursive_directory_iterator::_Dir_stack>;\n \n struct fs::_Dir : _Dir_base\n {\n-  _Dir(const fs::path& p, bool skip_permission_denied, error_code& ec)\n-  : _Dir_base(p.c_str(), skip_permission_denied, ec)\n+  _Dir(const fs::path& p, bool skip_permission_denied, bool nofollow,\n+       error_code& ec)\n+  : _Dir_base(p.c_str(), skip_permission_denied, nofollow, ec)\n   {\n     if (!ec)\n       path = p;\n@@ -128,11 +129,15 @@ namespace\n fs::directory_iterator::\n directory_iterator(const path& p, directory_options options, error_code* ecptr)\n {\n+  // Do not report an error for permission denied errors.\n   const bool skip_permission_denied\n     = is_set(options, directory_options::skip_permission_denied);\n+  // Do not allow opening a symlink (used by filesystem::remove_all)\n+  const bool nofollow\n+     = is_set(options, __directory_iterator_nofollow);\n \n   error_code ec;\n-  _Dir dir(p, skip_permission_denied, ec);\n+  _Dir dir(p, skip_permission_denied, nofollow, ec);\n \n   if (dir.dirp)\n     {\n@@ -287,7 +292,7 @@ fs::recursive_directory_iterator::increment(error_code& ec)\n \n   if (std::exchange(_M_dirs->pending, true) && top.should_recurse(follow, ec))\n     {\n-      _Dir dir(top.entry.path(), skip_permission_denied, ec);\n+      _Dir dir(top.entry.path(), skip_permission_denied, !follow, ec);\n       if (ec)\n \t{\n \t  _M_dirs.reset();"}, {"sha": "1d3693af06ca479086c46d1f079078adf0995db5", "filename": "libstdc++-v3/src/c++17/fs_ops.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc?ref=c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f", "patch": "@@ -1332,7 +1332,7 @@ namespace\n     uintmax_t count = 0;\n     if (s.type() == file_type::directory)\n       {\n-\tdirectory_iterator d(p, ec), end;\n+\tdirectory_iterator d(p, directory_options{99}, ec), end;\n \twhile (d != end)\n \t  {\n \t    const auto removed = fs::do_remove_all(d->path(), err);\n@@ -1341,11 +1341,11 @@ namespace\n \t    count += removed;\n \n \t    d.increment(ec);\n-\t    if (ec)\n-\t      {\n-\t\terr.report(ec, p);\n-\t\treturn -1;\n-\t      }\n+\t  }\n+\tif (ec)\n+\t  {\n+\t    err.report(ec, p);\n+\t    return -1;\n \t  }\n       }\n "}, {"sha": "4bfdae4e5a2badf83ef5fa19867282129c715803", "filename": "libstdc++-v3/src/filesystem/dir-common.h", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir-common.h?ref=c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f", "patch": "@@ -36,6 +36,10 @@\n # endif\n # include <dirent.h>\n #endif\n+#ifdef _GLIBCXX_HAVE_FCNTL_H\n+# include <fcntl.h> // O_NOFOLLOW, O_DIRECTORY\n+# include <unistd.h> // close\n+#endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -76,21 +80,40 @@ struct _Dir_base\n   _Dir_base(posix::DIR* dirp = nullptr) : dirp(dirp) { }\n \n   // If no error occurs then dirp is non-null,\n-  // otherwise null (whether error ignored or not).\n+  // otherwise null (even if an EACCES error is ignored).\n   _Dir_base(const posix::char_type* pathname, bool skip_permission_denied,\n-\t    error_code& ec) noexcept\n-  : dirp(posix::opendir(pathname))\n+\t    [[maybe_unused]] bool nofollow, error_code& ec) noexcept\n+  : dirp(nullptr)\n   {\n-    if (dirp)\n+#if defined O_RDONLY && O_NOFOLLOW && defined O_DIRECTORY && defined O_CLOEXEC \\\n+    && defined _GLIBCXX_HAVE_FDOPENDIR && !_GLIBCXX_FILESYSTEM_IS_WINDOWS\n+    if (nofollow)\n+      {\n+\t// Do not allow opening a symlink (used by filesystem::remove_all)\n+\tconst int flags = O_RDONLY | O_NOFOLLOW | O_DIRECTORY | O_CLOEXEC;\n+\tint fd = ::open(pathname, flags);\n+\tif (fd != -1)\n+\t  {\n+\t    if ((dirp = ::fdopendir(fd)))\n+\t      {\n+\t\tec.clear();\n+\t\treturn;\n+\t      }\n+\t  }\n+\tif (errno == EACCES && skip_permission_denied)\n+\t  ec.clear();\n+\telse\n+\t  ec.assign(errno, std::generic_category());\n+\treturn;\n+      }\n+#endif\n+\n+    if ((dirp = posix::opendir(pathname)))\n+      ec.clear();\n+    else if (errno == EACCES && skip_permission_denied)\n       ec.clear();\n     else\n-    {\n-      const int err = errno;\n-      if (err == EACCES && skip_permission_denied)\n-\tec.clear();\n-      else\n-\tec.assign(err, std::generic_category());\n-    }\n+      ec.assign(errno, std::generic_category());\n   }\n \n   _Dir_base(_Dir_base&& d) : dirp(std::exchange(d.dirp, nullptr)) { }\n@@ -187,6 +210,9 @@ get_file_type(const std::filesystem::__gnu_posix::dirent& d [[gnu::unused]])\n   return file_type::none;\n #endif\n }\n+\n+constexpr directory_options __directory_iterator_nofollow{99};\n+\n _GLIBCXX_END_NAMESPACE_FILESYSTEM\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "f1bf96aab5076195cfc5c5362dd8a7858c8d9ad6", "filename": "libstdc++-v3/src/filesystem/dir.cc", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc?ref=c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f", "patch": "@@ -47,8 +47,9 @@ namespace posix = std::filesystem::__gnu_posix;\n \n struct fs::_Dir : std::filesystem::_Dir_base\n {\n-  _Dir(const fs::path& p, bool skip_permission_denied, error_code& ec)\n-  : _Dir_base(p.c_str(), skip_permission_denied, ec)\n+  _Dir(const fs::path& p, bool skip_permission_denied, bool nofollow,\n+       error_code& ec)\n+  : _Dir_base(p.c_str(), skip_permission_denied, nofollow, ec)\n   {\n     if (!ec)\n       path = p;\n@@ -126,11 +127,15 @@ namespace\n fs::directory_iterator::\n directory_iterator(const path& p, directory_options options, error_code* ecptr)\n {\n+  // Do not report an error for permission denied errors.\n   const bool skip_permission_denied\n     = is_set(options, directory_options::skip_permission_denied);\n+  // Do not allow opening a symlink (used by filesystem::remove_all)\n+  const bool nofollow\n+     = is_set(options, __directory_iterator_nofollow);\n \n   error_code ec;\n-  _Dir dir(p, skip_permission_denied, ec);\n+  _Dir dir(p, skip_permission_denied, nofollow, ec);\n \n   if (dir.dirp)\n     {\n@@ -270,7 +275,7 @@ fs::recursive_directory_iterator::increment(error_code& ec) noexcept\n \n   if (std::exchange(_M_pending, true) && top.should_recurse(follow, ec))\n     {\n-      _Dir dir(top.entry.path(), skip_permission_denied, ec);\n+      _Dir dir(top.entry.path(), skip_permission_denied, !follow, ec);\n       if (ec)\n \t{\n \t  _M_dirs.reset();"}, {"sha": "324c6afc7a937a5eee42c09bf7b96159e64c3273", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=c8bd4dc8212e43b2f9af08b80df97f90cdb0df4f", "patch": "@@ -1105,17 +1105,17 @@ fs::remove_all(const path& p, error_code& ec) noexcept\n   uintmax_t count = 0;\n   if (s.type() == file_type::directory)\n     {\n-      directory_iterator d(p, ec), end;\n+      directory_iterator d(p, directory_options{99}, ec), end;\n       while (!ec && d != end)\n \t{\n \t  const auto removed = fs::remove_all(d->path(), ec);\n \t  if (removed == numeric_limits<uintmax_t>::max())\n \t    return -1;\n \t  count += removed;\n \t  d.increment(ec);\n-\t  if (ec)\n-\t    return -1;\n \t}\n+      if (ec)\n+\treturn -1;\n     }\n \n   if (fs::remove(p, ec))"}]}