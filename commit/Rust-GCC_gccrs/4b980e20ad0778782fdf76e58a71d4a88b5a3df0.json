{"sha": "4b980e20ad0778782fdf76e58a71d4a88b5a3df0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI5ODBlMjBhZDA3Nzg3ODJmZGY3NmU1OGE3MWQ0YTg4YjVhM2RmMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-06-28T10:10:54Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-06-28T10:10:54Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1318", "tree": {"sha": "b215796c829e5f18a18e35ba251206bb77efe9af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b215796c829e5f18a18e35ba251206bb77efe9af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b980e20ad0778782fdf76e58a71d4a88b5a3df0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b980e20ad0778782fdf76e58a71d4a88b5a3df0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b980e20ad0778782fdf76e58a71d4a88b5a3df0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/comments", "author": null, "committer": null, "parents": [{"sha": "ca3c6eae463a45719741d379a9c52fec613fd2fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3c6eae463a45719741d379a9c52fec613fd2fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca3c6eae463a45719741d379a9c52fec613fd2fd"}], "stats": {"total": 82, "additions": 52, "deletions": 30}, "files": [{"sha": "334d899ef429b9c0df6667313f46459b47b67599", "filename": "gcc/cse.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=4b980e20ad0778782fdf76e58a71d4a88b5a3df0", "patch": "@@ -4327,10 +4327,32 @@ fold_rtx (x, insn)\n \t  || (new = lookup_as_function (x, CONST_DOUBLE)) != 0)\n \treturn new;\n \n-      /* If this is a paradoxical SUBREG, we can't do anything with\n-\t it because we have no idea what value the extra bits would have.  */\n+      /* If this is a paradoxical SUBREG, we have no idea what value the\n+\t extra bits would have.  However, if the operand is equivalent\n+\t to a SUBREG whose operand is the same as our mode, and all the\n+\t modes are within a word, we can just use the inner operand\n+\t because these SUBREGs just say how to treat the register.  */\n+\n       if (GET_MODE_SIZE (mode) > GET_MODE_SIZE (GET_MODE (SUBREG_REG (x))))\n-\treturn x;\n+\t{\n+\t  enum machine_mode imode = GET_MODE (SUBREG_REG (x));\n+\t  struct table_elt *elt;\n+\n+\t  if (GET_MODE_SIZE (mode) <= UNITS_PER_WORD\n+\t      && GET_MODE_SIZE (imode) <= UNITS_PER_WORD\n+\t      && (elt = lookup (SUBREG_REG (x), HASH (SUBREG_REG (x), imode),\n+\t\t\t\timode)) != 0)\n+\t    {\n+\t      for (elt = elt->first_same_value;\n+\t\t   elt; elt = elt->next_same_value)\n+\t\tif (GET_CODE (elt->exp) == SUBREG\n+\t\t    && GET_MODE (SUBREG_REG (elt->exp)) == mode\n+\t\t    && exp_equiv_p (elt->exp, elt->exp, 1))\n+\t\t  return copy_rtx (SUBREG_REG (elt->exp));\n+\t    }\n+\n+\t  return x;\n+\t}\n \n       /* Fold SUBREG_REG.  If it changed, see if we can simplify the SUBREG.\n \t We might be able to if the SUBREG is extracting a single word in an\n@@ -4364,7 +4386,12 @@ fold_rtx (x, insn)\n \t extra bits will be.  But we can find an equivalence for this SUBREG\n \t by folding that operation is the narrow mode.  This allows us to\n \t fold arithmetic in narrow modes when the machine only supports\n-\t word-sized arithmetic.  */\n+\t word-sized arithmetic.  \n+\n+\t Also look for a case where we have a SUBREG whose operand is the\n+\t same as our result.  If both modes are smaller than a word, we\n+\t are simply interpreting a register in different modes and we\n+\t can use the inner value.  */\n \n       if (GET_CODE (folded_arg0) == REG\n \t  && GET_MODE_SIZE (mode) < GET_MODE_SIZE (GET_MODE (folded_arg0)))\n@@ -4430,6 +4457,13 @@ fold_rtx (x, insn)\n \t\t\t\t\t\t     op0, op1);\n \t\t}\n \n+\t      else if (GET_CODE (elt->exp) == SUBREG\n+\t\t       && GET_MODE (SUBREG_REG (elt->exp)) == mode\n+\t\t       && (GET_MODE_SIZE (GET_MODE (folded_arg0))\n+\t\t\t   <= UNITS_PER_WORD)\n+\t\t       && exp_equiv_p (elt->exp, elt->exp, 1))\n+\t\tnew = copy_rtx (SUBREG_REG (elt->exp));\n+\n \t      if (new)\n \t\treturn new;\n \t    }"}, {"sha": "a251644669e3e7083fb175613b7e590fabe61c6e", "filename": "gcc/expmed.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=4b980e20ad0778782fdf76e58a71d4a88b5a3df0", "patch": "@@ -2782,6 +2782,12 @@ emit_store_flag (target, code, op0, op1, mode, unsignedp, normalizep)\n \t  else\n \t    op0 = subtarget;\n \n+\t  /* If we want to keep subexpressions around, don't reuse our\n+\t     last target.  */\n+\n+\t  if (preserve_subexpressions_p ())\n+\t    subtarget = 0;\n+\n \t  /* Now normalize to the proper value in COMPARE_MODE.  Sometimes\n \t     we don't have to do anything.  */\n \t  if (normalizep == 0 || normalizep == STORE_FLAG_VALUE)"}, {"sha": "bc036dd15d8c5a5a8bd85961dd2f3158f1ed5c61", "filename": "gcc/flow.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=4b980e20ad0778782fdf76e58a71d4a88b5a3df0", "patch": "@@ -121,9 +121,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-extern int xmalloc ();\n-extern void free ();\n-\n /* List of labels that must never be deleted.  */\n extern rtx forced_labels;\n "}, {"sha": "31a62bea438b255bea3232757c10db2830398918", "filename": "gcc/integrate.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=4b980e20ad0778782fdf76e58a71d4a88b5a3df0", "patch": "@@ -36,8 +36,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"obstack.h\"\n #define\tobstack_chunk_alloc\txmalloc\n #define\tobstack_chunk_free\tfree\n-extern int xmalloc ();\n-extern void free ();\n \n extern struct obstack *function_maybepermanent_obstack;\n "}, {"sha": "13bdcd89609290ca66faee01871bb3c4c03a5f9d", "filename": "gcc/loop.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=4b980e20ad0778782fdf76e58a71d4a88b5a3df0", "patch": "@@ -193,8 +193,6 @@ extern struct obstack *rtl_obstack;\n #define obstack_chunk_free free\n \n extern char *oballoc ();\n-extern int xmalloc ();\n-extern void free ();\n \f\n /* During the analysis of a loop, a chain of `struct movable's\n    is made to record all the movable insns found."}, {"sha": "26768dc7e2ded443cc781351a0bca8a180863287", "filename": "gcc/reload1.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=4b980e20ad0778782fdf76e58a71d4a88b5a3df0", "patch": "@@ -246,9 +246,6 @@ char *reload_firstobj;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-extern int xmalloc ();\n-extern void free ();\n-\n /* List of labels that must never be deleted.  */\n extern rtx forced_labels;\n \f"}, {"sha": "afdbb098063f80b6bc5f2b980f9fbe25242741d8", "filename": "gcc/reorg.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=4b980e20ad0778782fdf76e58a71d4a88b5a3df0", "patch": "@@ -129,9 +129,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-extern int xmalloc ();\n-extern void free ();\n-\n #ifndef ANNUL_IFTRUE_SLOTS\n #define eligible_for_annul_true(INSN, SLOTS, TRIAL) 0\n #endif"}, {"sha": "c3f03575aeed091cae3ef96918f0f10e84a62191", "filename": "gcc/rtl.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=4b980e20ad0778782fdf76e58a71d4a88b5a3df0", "patch": "@@ -26,8 +26,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"obstack.h\"\n #define\tobstack_chunk_alloc\txmalloc\n #define\tobstack_chunk_free\tfree\n-extern int xmalloc ();\n-extern void free ();\n \n /* Obstack used for allocating RTL objects.\n    Between functions, this is the permanent_obstack."}, {"sha": "923786f9942203613ae5335826aa00cc5ea4d915", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=4b980e20ad0778782fdf76e58a71d4a88b5a3df0", "patch": "@@ -526,6 +526,8 @@ extern char *note_insn_name[];\n \f\n /* Generally useful functions.  */\n \n+extern char *xmalloc ();\n+extern void free ();\n extern rtx rtx_alloc ();\n extern rtvec rtvec_alloc ();\n extern rtx find_reg_note ();"}, {"sha": "a6d98e64f4df6125fb736d46c41304e263793e80", "filename": "gcc/stmt.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=4b980e20ad0778782fdf76e58a71d4a88b5a3df0", "patch": "@@ -54,9 +54,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define obstack_chunk_free free\n struct obstack stmt_obstack;\n \n-extern int xmalloc ();\n-extern void free ();\n-\n /* Filename and line number of last line-number note,\n    whether we actually emitted it or not.  */\n char *emit_filename;"}, {"sha": "ab51d2f09c2dbf01e905b911fcf0333757f1b795", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=4b980e20ad0778782fdf76e58a71d4a88b5a3df0", "patch": "@@ -1161,24 +1161,24 @@ botch (s)\n \n /* Same as `malloc' but report error if no memory available.  */\n \n-int\n+char *\n xmalloc (size)\n      unsigned size;\n {\n-  register int value = (int) malloc (size);\n+  register char *value = (char *) malloc (size);\n   if (value == 0)\n     fatal (\"virtual memory exhausted\");\n   return value;\n }\n \n /* Same as `realloc' but report error if no memory available.  */\n \n-int\n+char *\n xrealloc (ptr, size)\n      char *ptr;\n      int size;\n {\n-  int result = realloc (ptr, size);\n+  char *result = (char *) realloc (ptr, size);\n   if (!result)\n     fatal (\"virtual memory exhausted\");\n   return result;"}, {"sha": "3d3149c0417be4a9bf13b7e8dfec5e1dbe08bcb5", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=4b980e20ad0778782fdf76e58a71d4a88b5a3df0", "patch": "@@ -43,9 +43,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-extern int xmalloc ();\n-extern void free ();\n-\n /* Tree nodes of permanent duration are allocated in this obstack.\n    They are the identifier nodes, and everything outside of\n    the bodies and parameters of function definitions.  */"}, {"sha": "a64826c04a2a3e625fee6797204d2e6c764c5f3f", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=4b980e20ad0778782fdf76e58a71d4a88b5a3df0", "patch": "@@ -855,6 +855,8 @@ union tree_node\n extern char *oballoc ();\n extern char *permalloc ();\n extern char *savealloc ();\n+extern char *xmalloc ();\n+extern void free ();\n \n /* Lowest level primitive for allocating a node.\n    The TREE_CODE is the only argument.  Contents are initialized"}, {"sha": "6c25b9282b2c66b3c7335457e32a4015622bf747", "filename": "gcc/varasm.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b980e20ad0778782fdf76e58a71d4a88b5a3df0/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=4b980e20ad0778782fdf76e58a71d4a88b5a3df0", "patch": "@@ -58,7 +58,6 @@ extern struct obstack *current_obstack;\n extern struct obstack *saveable_obstack;\n extern struct obstack permanent_obstack;\n #define obstack_chunk_alloc xmalloc\n-extern int xmalloc ();\n \n /* Number for making the label on the next\n    constant that is stored in memory.  */"}]}