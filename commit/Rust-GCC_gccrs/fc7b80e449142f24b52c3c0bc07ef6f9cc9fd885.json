{"sha": "fc7b80e449142f24b52c3c0bc07ef6f9cc9fd885", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM3YjgwZTQ0OTE0MmYyNGI1MmMzYzBiYzA3ZWY2ZjljYzlmZDg4NQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2004-03-05T00:27:56Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2004-03-05T00:27:56Z"}, "message": "fp-bit.c (_fpdiv_parts): Do not round when pack_d would round the same.\n\n\t* config/fp-bit.c (_fpdiv_parts): Do not round when pack_d would\n\tround the same.  When rounding, clear bits that would cause a\n\tsecond rounding in pack_d.\n\t(_fpmul_parts): Ditto.  Remove #if 0:d code.\n\nFrom-SVN: r78951", "tree": {"sha": "ab74d69e13d3cadd84e08112a07e4556de4d9a09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab74d69e13d3cadd84e08112a07e4556de4d9a09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc7b80e449142f24b52c3c0bc07ef6f9cc9fd885", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc7b80e449142f24b52c3c0bc07ef6f9cc9fd885", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc7b80e449142f24b52c3c0bc07ef6f9cc9fd885", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc7b80e449142f24b52c3c0bc07ef6f9cc9fd885/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5fd200f17fa09d56e1972a1d8dbfb913df4f601c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fd200f17fa09d56e1972a1d8dbfb913df4f601c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fd200f17fa09d56e1972a1d8dbfb913df4f601c"}], "stats": {"total": 53, "additions": 32, "deletions": 21}, "files": [{"sha": "73f0f1f325bb15c2d322e7b77253f0bd84ce2711", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7b80e449142f24b52c3c0bc07ef6f9cc9fd885/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7b80e449142f24b52c3c0bc07ef6f9cc9fd885/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc7b80e449142f24b52c3c0bc07ef6f9cc9fd885", "patch": "@@ -1,3 +1,10 @@\n+2004-03-05  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/fp-bit.c (_fpdiv_parts): Do not round when pack_d would\n+\tround the same.  When rounding, clear bits that would cause a\n+\tsecond rounding in pack_d.\n+\t(_fpmul_parts): Ditto.  Remove #if 0:d code.\n+\n 2004-03-04  Ziemowit Laski  <zlaski@apple.com>\n \n \tPR c++/14425, c++/14426"}, {"sha": "0de191da28fb04923fff27789ccf3849cb455c7e", "filename": "gcc/config/fp-bit.c", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7b80e449142f24b52c3c0bc07ef6f9cc9fd885/gcc%2Fconfig%2Ffp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7b80e449142f24b52c3c0bc07ef6f9cc9fd885/gcc%2Fconfig%2Ffp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffp-bit.c?ref=fc7b80e449142f24b52c3c0bc07ef6f9cc9fd885", "patch": "@@ -899,32 +899,28 @@ _fpmul_parts ( fp_number_type *  a,\n \thigh |= 1;\n       low <<= 1;\n     }\n-  /* rounding is tricky. if we only round if it won't make us round later.  */\n-#if 0\n-  if (low & FRACHIGH2)\n-    {\n-      if (((high & GARDMASK) != GARDMSB)\n-\t  && (((high + 1) & GARDMASK) == GARDMSB))\n-\t{\n-\t  /* don't round, it gets done again later.  */\n-\t}\n-      else\n-\t{\n-\t  high++;\n-\t}\n-    }\n-#endif\n+\n   if (!ROUND_TOWARDS_ZERO && (high & GARDMASK) == GARDMSB)\n     {\n       if (high & (1 << NGARDS))\n \t{\n-\t  /* half way, so round to even */\n-\t  high += GARDROUND + 1;\n+\t  /* Because we're half way, we would round to even by adding\n+\t     GARDROUND + 1, except that's also done in the packing\n+\t     function, and rounding twice will lose precision and cause\n+\t     the result to be too far off.  Example: 32-bit floats with\n+\t     bit patterns 0xfff * 0x3f800400 ~= 0xfff (less than 0.5ulp\n+\t     off), not 0x1000 (more than 0.5ulp off).  */\n \t}\n       else if (low)\n \t{\n-\t  /* but we really weren't half way */\n+\t  /* We're a further than half way by a small amount corresponding\n+\t     to the bits set in \"low\".  Knowing that, we round here and\n+\t     not in pack_d, because there we don't have \"low\" avaliable\n+\t     anymore.  */\n \t  high += GARDROUND + 1;\n+\n+\t  /* Avoid further rounding in pack_d.  */\n+\t  high &= ~(fractype) GARDMASK;\n \t}\n     }\n   tmp->fraction.ll = high;\n@@ -1028,13 +1024,21 @@ _fpdiv_parts (fp_number_type * a,\n       {\n \tif (quotient & (1 << NGARDS))\n \t  {\n-\t    /* half way, so round to even */\n-\t    quotient += GARDROUND + 1;\n+\t    /* Because we're half way, we would round to even by adding\n+\t       GARDROUND + 1, except that's also done in the packing\n+\t       function, and rounding twice will lose precision and cause\n+\t       the result to be too far off.  */\n \t  }\n \telse if (numerator)\n \t  {\n-\t    /* but we really weren't half way, more bits exist */\n+\t    /* We're a further than half way by the small amount\n+\t       corresponding to the bits set in \"numerator\".  Knowing\n+\t       that, we round here and not in pack_d, because there we\n+\t       don't have \"numerator\" avaliable anymore.  */\n \t    quotient += GARDROUND + 1;\n+\n+\t    /* Avoid further rounding in pack_d.  */\n+\t    quotient &= ~(fractype) GARDMASK;\n \t  }\n       }\n "}]}