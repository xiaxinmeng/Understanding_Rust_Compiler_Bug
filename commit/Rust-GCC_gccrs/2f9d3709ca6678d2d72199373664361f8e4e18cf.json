{"sha": "2f9d3709ca6678d2d72199373664361f8e4e18cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY5ZDM3MDljYTY2NzhkMmQ3MjE5OTM3MzY2NDM2MWY4ZTRlMThjZg==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2015-01-11T17:32:00Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2015-01-11T17:32:00Z"}, "message": "[Patch Docs] Copy edit the text in \"Everything about patterns\"\n\n\t* doc/md.texi (Instruction Patterns): Copy edit text for\n\tclarity and correctness.\n\t(Example): Likewise.\n\nFrom-SVN: r219432", "tree": {"sha": "cae6e5f766195d9aa0718fff9f6caa996f2bc044", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cae6e5f766195d9aa0718fff9f6caa996f2bc044"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f9d3709ca6678d2d72199373664361f8e4e18cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f9d3709ca6678d2d72199373664361f8e4e18cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f9d3709ca6678d2d72199373664361f8e4e18cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f9d3709ca6678d2d72199373664361f8e4e18cf/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c0ba546b828cd8f59f250830abaf4fa9f0d881b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c0ba546b828cd8f59f250830abaf4fa9f0d881b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c0ba546b828cd8f59f250830abaf4fa9f0d881b"}], "stats": {"total": 80, "additions": 45, "deletions": 35}, "files": [{"sha": "7e6d41b47bf7b389adbb3922f7809c443c8eb086", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9d3709ca6678d2d72199373664361f8e4e18cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9d3709ca6678d2d72199373664361f8e4e18cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f9d3709ca6678d2d72199373664361f8e4e18cf", "patch": "@@ -1,3 +1,9 @@\n+2015-01-11  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* doc/md.texi (Instruction Patterns): Rewrite text for\n+\tclarity.\n+\t(Example): Likewise.\n+\n 2015-01-10  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/invoke.texi (Option Summary): Break long lines."}, {"sha": "4fcd84050f6e247e12c146fd09450f0ce9f438df", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 39, "deletions": 35, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f9d3709ca6678d2d72199373664361f8e4e18cf/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f9d3709ca6678d2d72199373664361f8e4e18cf/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=2f9d3709ca6678d2d72199373664361f8e4e18cf", "patch": "@@ -105,10 +105,11 @@ acts like it's unnamed, since the names are ignored.\n @cindex instruction patterns\n \n @findex define_insn\n-Each instruction pattern contains an incomplete RTL expression, with pieces\n-to be filled in later, operand constraints that restrict how the pieces can\n-be filled in, and an output pattern or C code to generate the assembler\n-output, all wrapped up in a @code{define_insn} expression.\n+A @code{define_insn} expression is used to define instruction patterns\n+to which insns may be matched.  A @code{define_insn} expression contains\n+an incomplete RTL expression, with pieces to be filled in later, operand\n+constraints that restrict how the pieces can be filled in, and an output\n+template or C code to generate the assembler output.\n \n A @code{define_insn} is an RTL expression containing four or five operands:\n \n@@ -130,60 +131,63 @@ effect; they are equivalent to no name at all.\n \n For the purpose of debugging the compiler, you may also specify a\n name beginning with the @samp{*} character.  Such a name is used only\n-for identifying the instruction in RTL dumps; it is entirely equivalent\n-to having a nameless pattern for all other purposes.\n+for identifying the instruction in RTL dumps; it is equivalent to having\n+a nameless pattern for all other purposes.  Names beginning with the\n+@samp{*} character are not required to be unique.\n \n @item\n-The @dfn{RTL template} (@pxref{RTL Template}) is a vector of incomplete\n-RTL expressions which show what the instruction should look like.  It is\n-incomplete because it may contain @code{match_operand},\n+The @dfn{RTL template}: This is a vector of incomplete RTL expressions\n+which describe the semantics of the instruction (@pxref{RTL Template}).\n+It is incomplete because it may contain @code{match_operand},\n @code{match_operator}, and @code{match_dup} expressions that stand for\n operands of the instruction.\n \n-If the vector has only one element, that element is the template for the\n-instruction pattern.  If the vector has multiple elements, then the\n-instruction pattern is a @code{parallel} expression containing the\n-elements described.\n+If the vector has multiple elements, the RTL template is treated as a\n+@code{parallel} expression.\n \n @item\n @cindex pattern conditions\n @cindex conditions, in patterns\n-A condition.  This is a string which contains a C expression that is\n-the final test to decide whether an insn body matches this pattern.\n+The condition: This is a string which contains a C expression.  When the\n+compiler attempts to match RTL against a pattern, the condition is\n+evaluated.  If the condition evaluates to @code{true}, the match is\n+permitted.  The condition may be an empty string, which is treated\n+as always @code{true}.\n \n @cindex named patterns and conditions\n-For a named pattern, the condition (if present) may not depend on\n-the data in the insn being matched, but only the target-machine-type\n-flags.  The compiler needs to test these conditions during\n-initialization in order to learn exactly which named instructions are\n-available in a particular run.\n+For a named pattern, the condition may not depend on the data in the\n+insn being matched, but only the target-machine-type flags.  The compiler\n+needs to test these conditions during initialization in order to learn\n+exactly which named instructions are available in a particular run.\n \n @findex operands\n For nameless patterns, the condition is applied only when matching an\n individual insn, and only after the insn has matched the pattern's\n recognition template.  The insn's operands may be found in the vector\n-@code{operands}.  For an insn where the condition has once matched, it\n-can't be used to control register allocation, for example by excluding\n-certain hard registers or hard register combinations.\n+@code{operands}.\n+\n+For an insn where the condition has once matched, it\n+cannot later be used to control register allocation by excluding\n+certain register or value combinations.\n \n @item\n-The @dfn{output template}: a string that says how to output matching\n-insns as assembler code.  @samp{%} in this string specifies where\n-to substitute the value of an operand.  @xref{Output Template}.\n+The @dfn{output template} or @dfn{output statement}: This is either\n+a string, or a fragment of C code which returns a string.\n \n When simple substitution isn't general enough, you can specify a piece\n of C code to compute the output.  @xref{Output Statement}.\n \n @item\n-Optionally, a vector containing the values of attributes for insns matching\n-this pattern.  @xref{Insn Attributes}.\n+The @dfn{insn attributes}: This is an optional vector containing the values of\n+attributes for insns matching this pattern (@pxref{Insn Attributes}).\n @end enumerate\n \n @node Example\n @section Example of @code{define_insn}\n @cindex @code{define_insn} example\n \n-Here is an actual example of an instruction pattern, for the 68000/68020.\n+Here is an example of an instruction pattern, taken from the machine\n+description for the 68000/68020.\n \n @smallexample\n (define_insn \"tstsi\"\n@@ -213,12 +217,12 @@ This can also be written using braced strings:\n @})\n @end smallexample\n \n-This is an instruction that sets the condition codes based on the value of\n-a general operand.  It has no condition, so any insn whose RTL description\n-has the form shown may be handled according to this pattern.  The name\n-@samp{tstsi} means ``test a @code{SImode} value'' and tells the RTL generation\n-pass that, when it is necessary to test such a value, an insn to do so\n-can be constructed using this pattern.\n+This describes an instruction which sets the condition codes based on the\n+value of a general operand.  It has no condition, so any insn with an RTL\n+description of the form shown may be matched to this pattern.  The name\n+@samp{tstsi} means ``test a @code{SImode} value'' and tells the RTL\n+generation pass that, when it is necessary to test such a value, an insn\n+to do so can be constructed using this pattern.\n \n The output control string is a piece of C code which chooses which\n output template to return based on the kind of operand and the specific"}]}