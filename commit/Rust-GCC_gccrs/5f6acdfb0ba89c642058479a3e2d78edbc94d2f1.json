{"sha": "5f6acdfb0ba89c642058479a3e2d78edbc94d2f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY2YWNkZmIwYmE4OWM2NDIwNTg0NzlhM2UyZDc4ZWRiYzk0ZDJmMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-08-05T13:52:59Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-08-05T13:52:59Z"}, "message": "Implement C++17 rounding functions for std::chrono (P0092R1)\n\n\t* include/std/chrono (floor, ceil, round, abs): New for C++17.\n\t* testsuite/20_util/duration_cast/rounding.cc: New test.\n\t* testsuite/20_util/time_point_cast/rounding.cc: New test.\n\t* doc/xml/manual/status_cxx2017.xml: Update status table.\n\t* doc/html/manual/status.html: Regenerate.\n\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Adjust\n\tdg-error lineno.\n\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Likewise.\n\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Likewise.\n\t* testsuite/20_util/duration/literals/range.cc: Likewise.\n\nFrom-SVN: r239170", "tree": {"sha": "f6ce94aae8f245f477ba0df6a4ea83fe617ead9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6ce94aae8f245f477ba0df6a4ea83fe617ead9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24bc5921a89095e3d1b89f7b9fd7d1c3a448a735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24bc5921a89095e3d1b89f7b9fd7d1c3a448a735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24bc5921a89095e3d1b89f7b9fd7d1c3a448a735"}], "stats": {"total": 235, "additions": 225, "deletions": 10}, "files": [{"sha": "b5516d6745fa8f14925591d9ea4d4c7cc0dd68b1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5f6acdfb0ba89c642058479a3e2d78edbc94d2f1", "patch": "@@ -1,5 +1,16 @@\n 2016-08-05  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/chrono (floor, ceil, round, abs): New for C++17.\n+\t* testsuite/20_util/duration_cast/rounding.cc: New test.\n+\t* testsuite/20_util/time_point_cast/rounding.cc: New test.\n+\t* doc/xml/manual/status_cxx2017.xml: Update status table.\n+\t* doc/html/manual/status.html: Regenerate.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Adjust\n+\tdg-error lineno.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Likewise.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Likewise.\n+\t* testsuite/20_util/duration/literals/range.cc: Likewise.\n+\n \t* include/std/functional (__callable_functor): Remove.\n \t(_Function_handler::_M_invoke): Use __invoke instead of\n \t__callable_functor or mem_fn."}, {"sha": "ada3d688ac93a030cb8e93cfc60dcc925293841b", "filename": "libstdc++-v3/doc/html/manual/status.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html?ref=5f6acdfb0ba89c642058479a3e2d78edbc94d2f1", "patch": "@@ -606,23 +606,23 @@\n \t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0185r1.html\" target=\"_top\">\n \tP0185R1\n \t</a>\n-      </td><td align=\"center\"> 7 (<code class=\"code\">__is_swappable</code> available since 6.1)</td><td align=\"left\"><code class=\"code\"> __cpp_lib_is_swappable &gt;= 201603 </code></td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\"> <code class=\"code\">is_callable</code>, the missing INVOKE related trait</td><td align=\"left\">\n+      </td><td align=\"center\"> 7 (<code class=\"code\">__is_swappable</code> available since 6.1)</td><td align=\"left\"><code class=\"code\"> __cpp_lib_is_swappable &gt;= 201603 </code></td></tr><tr><td align=\"left\"> <code class=\"code\">is_callable</code>, the missing INVOKE related trait</td><td align=\"left\">\n \t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0077r2.html\" target=\"_top\">\n \tP0077R2\n \t</a>\n-      </td><td align=\"center\"> No </td><td align=\"left\"><code class=\"code\"> __cpp_lib_is_callable &gt;= 201603 </code></td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\"> has_unique_object_representations </td><td align=\"left\">\n+      </td><td align=\"center\"> 7 </td><td align=\"left\"><code class=\"code\"> __cpp_lib_is_callable &gt;= 201603 </code></td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\"> has_unique_object_representations </td><td align=\"left\">\n \t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0258r2.html\" target=\"_top\">\n \tP0258R2\n \t</a>\n       </td><td align=\"center\"> No </td><td align=\"left\"><code class=\"code\"> __cpp_lib_has_unique_object_representations &gt;= 201606 </code></td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\"> Ordered by default </td><td align=\"left\">\n \t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0181r1.html\" target=\"_top\">\n \tP0181R1\n \t</a>\n-      </td><td align=\"center\"> No </td><td align=\"left\"><code class=\"code\"> __cpp_lib_default_order &gt;= 201606</code></td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\"> Polishing <code class=\"code\">&lt;chrono&gt;</code> </td><td align=\"left\">\n+      </td><td align=\"center\"> No </td><td align=\"left\"><code class=\"code\"> __cpp_lib_default_order &gt;= 201606</code></td></tr><tr><td align=\"left\"> Polishing <code class=\"code\">&lt;chrono&gt;</code> </td><td align=\"left\">\n \t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0092r1.html\" target=\"_top\">\n \tP0092R1\n \t</a>\n-      </td><td align=\"center\"> No </td><td align=\"left\"><code class=\"code\"> __cpp_lib_chrono &gt;= 201510 </code></td></tr><tr><td align=\"left\"> Integrating <code class=\"code\">std::string_view</code> and <code class=\"code\">std::string</code> </td><td align=\"left\">\n+      </td><td align=\"center\"> 7 </td><td align=\"left\"><code class=\"code\"> __cpp_lib_chrono &gt;= 201510 </code></td></tr><tr><td align=\"left\"> Integrating <code class=\"code\">std::string_view</code> and <code class=\"code\">std::string</code> </td><td align=\"left\">\n \t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf\" target=\"_top\">\n \tP0254R2\n \t</a>"}, {"sha": "4d098d16baf2bfa8bd40fd8d4e3443484f534017", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2017.xml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml?ref=5f6acdfb0ba89c642058479a3e2d78edbc94d2f1", "patch": "@@ -437,14 +437,13 @@ Feature-testing recommendations for C++</link>.\n     </row>\n \n     <row>\n-      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n       <entry> Polishing <code>&lt;chrono&gt;</code> </entry>\n       <entry>\n \t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0092r1.html\">\n \tP0092R1\n \t</link>\n       </entry>\n-      <entry align=\"center\"> No </entry>\n+      <entry align=\"center\"> 7 </entry>\n       <entry><code> __cpp_lib_chrono >= 201510 </code></entry>\n     </row>\n "}, {"sha": "f29d8e1adbcdb6fdcc7134e88cac3be79ef3a356", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=5f6acdfb0ba89c642058479a3e2d78edbc94d2f1", "patch": "@@ -208,11 +208,69 @@ _GLIBCXX_END_NAMESPACE_VERSION\n       struct treat_as_floating_point\n       : is_floating_point<_Rep>\n       { };\n+\n #if __cplusplus > 201402L\n     template <typename _Rep>\n       constexpr bool treat_as_floating_point_v =\n         treat_as_floating_point<_Rep>::value;\n #endif // C++17\n+\n+#if __cplusplus > 201402L\n+# define __cpp_lib_chrono 201510\n+\n+    template<typename _ToDur, typename _Rep, typename _Period>\n+      constexpr enable_if_t<__is_duration<_ToDur>::value, _ToDur>\n+      floor(const duration<_Rep, _Period>& __d)\n+      {\n+\tauto __to = chrono::duration_cast<_ToDur>(__d);\n+\tif (__to > __d)\n+\t  --__to;\n+\treturn __to;\n+      }\n+\n+    template<typename _ToDur, typename _Rep, typename _Period>\n+      constexpr enable_if_t<__is_duration<_ToDur>::value, _ToDur>\n+      ceil(const duration<_Rep, _Period>& __d)\n+      {\n+\tauto __to = chrono::duration_cast<_ToDur>(__d);\n+\tif (__to < __d)\n+\t  return __to + _ToDur{1};\n+\treturn __to;\n+      }\n+\n+    template <typename _ToDur, typename _Rep, typename _Period>\n+      constexpr enable_if_t<\n+\t__and_<__is_duration<_ToDur>,\n+\t       __not_<treat_as_floating_point<typename _ToDur::rep>>>::value,\n+\t_ToDur>\n+      round(const duration<_Rep, _Period>& __d)\n+      {\n+\t_ToDur __t0 = chrono::floor<_ToDur>(__d);\n+\t_ToDur __t1 = __t0 + _ToDur{1};\n+\tauto __diff0 = __d - __t0;\n+\tauto __diff1 = __t1 - __d;\n+\tif (__diff0 == __diff1)\n+\t{\n+\t    if (__t0.count() & 1)\n+\t\treturn __t1;\n+\t    return __t0;\n+\t}\n+\telse if (__diff0 < __diff1)\n+\t    return __t0;\n+\treturn __t1;\n+      }\n+\n+    template<typename _Rep, typename _Period>\n+      constexpr\n+      enable_if_t<numeric_limits<_Rep>::is_signed, duration<_Rep, _Period>>\n+      abs(duration<_Rep, _Period> __d)\n+      {\n+\tif (__d >= __d.zero())\n+\t  return __d;\n+\treturn -__d;\n+      }\n+#endif // C++17\n+\n     /// duration_values\n     template<typename _Rep>\n       struct duration_values\n@@ -610,6 +668,37 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \treturn __time_point(duration_cast<_ToDur>(__t.time_since_epoch()));\n       }\n \n+#if __cplusplus > 201402L\n+    template<typename _ToDur, typename _Clock, typename _Dur>\n+      constexpr\n+      enable_if_t<__is_duration<_ToDur>::value, time_point<_Clock, _ToDur>>\n+      floor(const time_point<_Clock, _Dur>& __tp)\n+      {\n+\treturn time_point<_Clock, _ToDur>{\n+\t    chrono::floor<_ToDur>(__tp.time_since_epoch())};\n+      }\n+\n+    template<typename _ToDur, typename _Clock, typename _Dur>\n+      constexpr\n+      enable_if_t<__is_duration<_ToDur>::value, time_point<_Clock, _ToDur>>\n+      ceil(const time_point<_Clock, _Dur>& __tp)\n+      {\n+\treturn time_point<_Clock, _ToDur>{\n+\t    chrono::ceil<_ToDur>(__tp.time_since_epoch())};\n+      }\n+\n+    template<typename _ToDur, typename _Clock, typename _Dur>\n+      constexpr enable_if_t<\n+\t__and_<__is_duration<_ToDur>,\n+\t       __not_<treat_as_floating_point<typename _ToDur::rep>>>::value,\n+\ttime_point<_Clock, _ToDur>>\n+      round(const time_point<_Clock, _Dur>& __tp)\n+      {\n+\treturn time_point<_Clock, _ToDur>{\n+\t    chrono::round<_ToDur>(__tp.time_since_epoch())};\n+      }\n+#endif // C++17\n+\n     template<typename _Clock, typename _Dur1,\n \t     typename _Rep2, typename _Period2>\n       constexpr time_point<_Clock,"}, {"sha": "940236ce646600fe543826b894bdb145173fc7a6", "filename": "libstdc++-v3/testsuite/20_util/duration/literals/range.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc?ref=5f6acdfb0ba89c642058479a3e2d78edbc94d2f1", "patch": "@@ -27,5 +27,5 @@ test01()\n \n   // std::numeric_limits<int64_t>::max() == 9223372036854775807;\n   auto h = 9223372036854775808h;\n-  // { dg-error \"cannot be represented\" \"\" { target *-*-* } 800 }\n+  // { dg-error \"cannot be represented\" \"\" { target *-*-* } 889 }\n }"}, {"sha": "db9a4f5bc023e0c894d4b9537b02e6e54859706c", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc?ref=5f6acdfb0ba89c642058479a3e2d78edbc94d2f1", "patch": "@@ -31,5 +31,5 @@ void test01()\n   test_type d;\n }\n \n-// { dg-error \"rep cannot be a duration\" \"\" { target *-*-* } 250 }\n+// { dg-error \"rep cannot be a duration\" \"\" { target *-*-* } 308 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 31 }"}, {"sha": "e562134ffcb806506fcd43368c6d1ff71304834c", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc?ref=5f6acdfb0ba89c642058479a3e2d78edbc94d2f1", "patch": "@@ -32,5 +32,5 @@ void test01()\n   test_type d;\t\t\t// { dg-error \"required from here\" }\n }\n \n-// { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 251 }\n+// { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 309 }\n // { dg-prune-output \"not a member\" }"}, {"sha": "a71d5b120397d03c72a617e6b6c2e1391a53c4d6", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc?ref=5f6acdfb0ba89c642058479a3e2d78edbc94d2f1", "patch": "@@ -33,4 +33,4 @@ void test01()\n   test_type d;  // { dg-error \"required from here\" }\n }\n \n-// { dg-error \"period must be positive\" \"\" { target *-*-* } 253 }\n+// { dg-error \"period must be positive\" \"\" { target *-*-* } 311 }"}, {"sha": "a753323027349b186154cfef8edca609be610c06", "filename": "libstdc++-v3/testsuite/20_util/duration_cast/rounding.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration_cast%2Frounding.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration_cast%2Frounding.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration_cast%2Frounding.cc?ref=5f6acdfb0ba89c642058479a3e2d78edbc94d2f1", "patch": "@@ -0,0 +1,57 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+#include <chrono>\n+\n+#if __cpp_lib_chrono < 201510\n+# error \"__cpp_lib_chrono < 201510\"\n+#endif\n+\n+using namespace std::chrono_literals;\n+using std::chrono::seconds;\n+\n+static_assert( std::chrono::floor<seconds>(1000ms) == 1s );\n+static_assert( std::chrono::floor<seconds>(1001ms) == 1s );\n+static_assert( std::chrono::floor<seconds>(1500ms) == 1s );\n+static_assert( std::chrono::floor<seconds>(1999ms) == 1s );\n+static_assert( std::chrono::floor<seconds>(2000ms) == 2s );\n+static_assert( std::chrono::floor<seconds>(2001ms) == 2s );\n+static_assert( std::chrono::floor<seconds>(2500ms) == 2s );\n+\n+static_assert( std::chrono::ceil<seconds>(1000ms) == 1s );\n+static_assert( std::chrono::ceil<seconds>(1001ms) == 2s );\n+static_assert( std::chrono::ceil<seconds>(1500ms) == 2s );\n+static_assert( std::chrono::ceil<seconds>(1999ms) == 2s );\n+static_assert( std::chrono::ceil<seconds>(2000ms) == 2s );\n+static_assert( std::chrono::ceil<seconds>(2001ms) == 3s );\n+static_assert( std::chrono::ceil<seconds>(2500ms) == 3s );\n+\n+static_assert( std::chrono::round<seconds>(1000ms) == 1s );\n+static_assert( std::chrono::round<seconds>(1001ms) == 1s );\n+static_assert( std::chrono::round<seconds>(1499ms) == 1s );\n+static_assert( std::chrono::round<seconds>(1500ms) == 2s );\n+static_assert( std::chrono::round<seconds>(1999ms) == 2s );\n+static_assert( std::chrono::round<seconds>(2000ms) == 2s );\n+static_assert( std::chrono::round<seconds>(2001ms) == 2s );\n+static_assert( std::chrono::round<seconds>(2500ms) == 2s );\n+static_assert( std::chrono::round<seconds>(2501ms) == 3s );\n+\n+static_assert( std::chrono::abs(100ms) == 100ms );\n+static_assert( std::chrono::abs(-100ms) == 100ms );"}, {"sha": "bf596e92fc1a4587d3354618f137505e8ba7155c", "filename": "libstdc++-v3/testsuite/20_util/time_point_cast/rounding.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point_cast%2Frounding.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6acdfb0ba89c642058479a3e2d78edbc94d2f1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point_cast%2Frounding.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point_cast%2Frounding.cc?ref=5f6acdfb0ba89c642058479a3e2d78edbc94d2f1", "patch": "@@ -0,0 +1,59 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+#include <chrono>\n+\n+#if __cpp_lib_chrono < 201510\n+# error \"__cpp_lib_chrono < 201510\"\n+#endif\n+\n+using namespace std::chrono_literals;\n+using std::chrono::seconds;\n+using std::chrono::milliseconds;\n+\n+constexpr std::chrono::system_clock::time_point base{};\n+\n+static_assert( std::chrono::floor<seconds>(base + 1000ms) == (base + 1s) );\n+static_assert( std::chrono::floor<seconds>(base + 1001ms) == (base + 1s) );\n+static_assert( std::chrono::floor<seconds>(base + 1500ms) == (base + 1s) );\n+static_assert( std::chrono::floor<seconds>(base + 1999ms) == (base + 1s) );\n+static_assert( std::chrono::floor<seconds>(base + 2000ms) == (base + 2s) );\n+static_assert( std::chrono::floor<seconds>(base + 2001ms) == (base + 2s) );\n+static_assert( std::chrono::floor<seconds>(base + 2500ms) == (base + 2s) );\n+\n+static_assert( std::chrono::ceil<seconds>(base + 1000ms) == (base + 1s) );\n+static_assert( std::chrono::ceil<seconds>(base + 1001ms) == (base + 2s) );\n+static_assert( std::chrono::ceil<seconds>(base + 1500ms) == (base + 2s) );\n+static_assert( std::chrono::ceil<seconds>(base + 1999ms) == (base + 2s) );\n+static_assert( std::chrono::ceil<seconds>(base + 2000ms) == (base + 2s) );\n+static_assert( std::chrono::ceil<seconds>(base + 2001ms) == (base + 3s) );\n+static_assert( std::chrono::ceil<seconds>(base + 2500ms) == (base + 3s) );\n+\n+static_assert( std::chrono::round<seconds>(base + 1000ms) == (base + 1s) );\n+static_assert( std::chrono::round<seconds>(base + 1001ms) == (base + 1s) );\n+static_assert( std::chrono::round<seconds>(base + 1499ms) == (base + 1s) );\n+static_assert( std::chrono::round<seconds>(base + 1500ms) == (base + 2s) );\n+static_assert( std::chrono::round<seconds>(base + 1999ms) == (base + 2s) );\n+static_assert( std::chrono::round<seconds>(base + 2000ms) == (base + 2s) );\n+static_assert( std::chrono::round<seconds>(base + 2001ms) == (base + 2s) );\n+static_assert( std::chrono::round<seconds>(base + 2500ms) == (base + 2s) );\n+static_assert( std::chrono::round<seconds>(base + 2501ms) == (base + 3s) );"}]}