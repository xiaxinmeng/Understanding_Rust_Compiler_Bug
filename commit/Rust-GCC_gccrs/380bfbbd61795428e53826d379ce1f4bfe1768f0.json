{"sha": "380bfbbd61795428e53826d379ce1f4bfe1768f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgwYmZiYmQ2MTc5NTQyOGU1MzgyNmQzNzljZTFmNGJmZTE3NjhmMA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-09-10T17:17:57Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-09-10T17:17:57Z"}, "message": "re PR fortran/28959 (ICE on derived type with host association)\n\n2006-09-10  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/28959\n\ttrans-types.c (gfc_get_derived_type): Use the parent namespace of\n\tthe procedure if the type's own namespace does not have a parent.\n\n\n2006-09-10  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/28959\n\tgfortran.dg/used_types_10: New test.\n\nFrom-SVN: r116816", "tree": {"sha": "852eefcc3400d2e2027106084cca7ca4f03cd93f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/852eefcc3400d2e2027106084cca7ca4f03cd93f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/380bfbbd61795428e53826d379ce1f4bfe1768f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/380bfbbd61795428e53826d379ce1f4bfe1768f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/380bfbbd61795428e53826d379ce1f4bfe1768f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/380bfbbd61795428e53826d379ce1f4bfe1768f0/comments", "author": null, "committer": null, "parents": [{"sha": "c71d6a561e249d1fe07fcbd97e348b0849247d42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c71d6a561e249d1fe07fcbd97e348b0849247d42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c71d6a561e249d1fe07fcbd97e348b0849247d42"}], "stats": {"total": 92, "additions": 90, "deletions": 2}, "files": [{"sha": "159b4d13a49f960af9b321ed8ff6ef44995e9d3e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380bfbbd61795428e53826d379ce1f4bfe1768f0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380bfbbd61795428e53826d379ce1f4bfe1768f0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=380bfbbd61795428e53826d379ce1f4bfe1768f0", "patch": "@@ -1,3 +1,9 @@\n+2006-09-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/28959\n+\ttrans-types.c (gfc_get_derived_type): Use the parent namespace of\n+\tthe procedure if the type's own namespace does not have a parent.\n+\n 2006-09-10  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/28923"}, {"sha": "377a5af9fa0ec3c1a8f17be270627a83bd152530", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380bfbbd61795428e53826d379ce1f4bfe1768f0/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380bfbbd61795428e53826d379ce1f4bfe1768f0/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=380bfbbd61795428e53826d379ce1f4bfe1768f0", "patch": "@@ -1483,7 +1483,12 @@ gfc_get_derived_type (gfc_symbol * derived)\n \t same TREE_TYPE.  If an equal type is found without a backend_decl,\n \t build the parent version and use it in the current namespace.  */\n \n-      for (ns = derived->ns->parent; ns; ns = ns->parent)\n+      /* Derived types in an interface body obtain their parent reference\n+\t through the proc_name symbol.  */\n+      ns = derived->ns->parent ? derived->ns->parent\n+\t\t\t       : derived->ns->proc_name->ns->parent;\n+\n+      for (; ns; ns = ns->parent)\n \t{\n \t  for (dt = ns->derived_types; dt; dt = dt->next)\n \t    {"}, {"sha": "c482122901d617fa7b737b7c86cf5997a51ed36d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380bfbbd61795428e53826d379ce1f4bfe1768f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380bfbbd61795428e53826d379ce1f4bfe1768f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=380bfbbd61795428e53826d379ce1f4bfe1768f0", "patch": "@@ -1,4 +1,9 @@\n-2006-09-09  Paul Thomas  <pault@gcc.gnu.org>\n+2006-09-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/28959\n+\tgfortran.dg/used_types_10: New test.\n+\n+2006-09-10  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR libfortran/28923\n \tgfortran.dg/array_initializer_2.f90: Fill in missing index start value."}, {"sha": "c35fb58e617ec1a6757ac5fb5f9b017ad6c5e4d6", "filename": "gcc/testsuite/gfortran.dg/used_types_10.f90", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380bfbbd61795428e53826d379ce1f4bfe1768f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380bfbbd61795428e53826d379ce1f4bfe1768f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_10.f90?ref=380bfbbd61795428e53826d379ce1f4bfe1768f0", "patch": "@@ -0,0 +1,72 @@\n+! { dg-do compile }\n+! Tests the fix for PR28959 in which interface derived types were\n+! not always being associated.\n+!\n+! Contributed by Salvatore Filippone  <sfilippone@uniroma2.it>\n+!\n+module derived_type_mod\n+\n+  type foo_dtype\n+    integer, pointer :: v1(:)=>null()\n+  end type foo_dtype\n+  \n+\n+end module derived_type_mod\n+\n+\n+Module tools\n+\n+  interface foo_d_sub\n+     subroutine cdalv(m, v, i, desc_a, info, flag)\n+       use derived_type_mod\n+       Integer, intent(in)               :: m,i, v(:)\n+       integer, intent(in), optional     :: flag\n+       integer, intent(out)              :: info\n+       Type(foo_dtype), intent(out)  :: desc_a\n+     end subroutine cdalv\n+  end interface\n+\n+end module tools\n+\n+\n+\n+subroutine foo_bar(a,p,info)\n+  use derived_type_mod\n+  implicit none\n+\n+  type(foo_dtype), intent(in)            :: a\n+  type(foo_dtype), intent(inout)         :: p\n+  integer, intent(out)                   :: info\n+\n+  info=0\n+\n+  call inner_sub(info)\n+    \n+\n+  return\n+\n+\n+contains\n+\n+  subroutine inner_sub(info)\n+    use tools\n+    implicit none \n+\n+    integer, intent(out)   :: info\n+\n+    integer :: i, nt,iv(10)\n+    \n+    i  = 0\n+    nt = 1\n+    \n+    call foo_d_sub(nt,iv,i,p,info,flag=1)\n+    \n+    return\n+\n+\n+  end subroutine inner_sub\n+\n+\n+\n+end subroutine foo_bar\n+! { dg-final { cleanup-modules \"derived_type_mod tools\" } }"}]}