{"sha": "7c755fd9018821b79ddc32ee507897860510986c", "node_id": "C_kwDOANBUbNoAKDdjNzU1ZmQ5MDE4ODIxYjc5ZGRjMzJlZTUwNzg5Nzg2MDUxMDk4NmM", "commit": {"author": {"name": "Christoph M\u00fcllner", "email": "christoph.muellner@vrull.eu", "date": "2022-12-05T03:26:03Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-12-27T19:49:50Z"}, "message": "riscv: Restructure callee-saved register save/restore code\n\nThis patch restructures the loop over the GP registers\nwhich saves/restores then as part of the prologue/epilogue.\nNo functional change is intended by this patch, but it\noffers the possibility to use load-pair/store-pair instructions.\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv.cc (riscv_next_saved_reg): New function.\n\t(riscv_is_eh_return_data_register): New function.\n\t(riscv_for_each_saved_reg): Restructure loop.\n\nSigned-off-by: Christoph M\u00fcllner <christoph.muellner@vrull.eu>", "tree": {"sha": "dfa796817ca72a1d5501d9fb8de6d69d355441bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfa796817ca72a1d5501d9fb8de6d69d355441bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c755fd9018821b79ddc32ee507897860510986c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c755fd9018821b79ddc32ee507897860510986c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c755fd9018821b79ddc32ee507897860510986c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c755fd9018821b79ddc32ee507897860510986c/comments", "author": {"login": "cmuellner", "id": 92810, "node_id": "MDQ6VXNlcjkyODEw", "avatar_url": "https://avatars.githubusercontent.com/u/92810?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmuellner", "html_url": "https://github.com/cmuellner", "followers_url": "https://api.github.com/users/cmuellner/followers", "following_url": "https://api.github.com/users/cmuellner/following{/other_user}", "gists_url": "https://api.github.com/users/cmuellner/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmuellner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmuellner/subscriptions", "organizations_url": "https://api.github.com/users/cmuellner/orgs", "repos_url": "https://api.github.com/users/cmuellner/repos", "events_url": "https://api.github.com/users/cmuellner/events{/privacy}", "received_events_url": "https://api.github.com/users/cmuellner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3895dd7675197167789e3b346057be417eede943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3895dd7675197167789e3b346057be417eede943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3895dd7675197167789e3b346057be417eede943"}], "stats": {"total": 95, "additions": 67, "deletions": 28}, "files": [{"sha": "9a53999a39decea39a2a5a3ee195d88996d07819", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 67, "deletions": 28, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c755fd9018821b79ddc32ee507897860510986c/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c755fd9018821b79ddc32ee507897860510986c/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=7c755fd9018821b79ddc32ee507897860510986c", "patch": "@@ -4839,6 +4839,50 @@ riscv_save_restore_reg (machine_mode mode, int regno,\n   fn (gen_rtx_REG (mode, regno), mem);\n }\n \n+/* Return the next register up from REGNO up to LIMIT for the callee\n+   to save or restore.  OFFSET will be adjusted accordingly.\n+   If INC is set, then REGNO will be incremented first.\n+   Returns INVALID_REGNUM if there is no such next register.  */\n+\n+static unsigned int\n+riscv_next_saved_reg (unsigned int regno, unsigned int limit,\n+\t\t      HOST_WIDE_INT *offset, bool inc = true)\n+{\n+  if (inc)\n+    regno++;\n+\n+  while (regno <= limit)\n+    {\n+      if (BITSET_P (cfun->machine->frame.mask, regno - GP_REG_FIRST))\n+\t{\n+\t  *offset = *offset - UNITS_PER_WORD;\n+\t  return regno;\n+\t}\n+\n+      regno++;\n+    }\n+  return INVALID_REGNUM;\n+}\n+\n+/* Return TRUE if provided REGNO is eh return data register.  */\n+\n+static bool\n+riscv_is_eh_return_data_register (unsigned int regno)\n+{\n+  unsigned int i, regnum;\n+\n+  if (!crtl->calls_eh_return)\n+    return false;\n+\n+  for (i = 0; (regnum = EH_RETURN_DATA_REGNO (i)) != INVALID_REGNUM; i++)\n+    if (regno == regnum)\n+      {\n+\treturn true;\n+      }\n+\n+  return false;\n+}\n+\n /* Call FN for each register that is saved by the current function.\n    SP_OFFSET is the offset of the current stack pointer from the start\n    of the frame.  */\n@@ -4848,36 +4892,31 @@ riscv_for_each_saved_reg (poly_int64 sp_offset, riscv_save_restore_fn fn,\n \t\t\t  bool epilogue, bool maybe_eh_return)\n {\n   HOST_WIDE_INT offset;\n+  unsigned int regno;\n+  unsigned int start = GP_REG_FIRST;\n+  unsigned int limit = GP_REG_LAST;\n \n   /* Save the link register and s-registers. */\n-  offset = (cfun->machine->frame.gp_sp_offset - sp_offset).to_constant ();\n-  for (unsigned int regno = GP_REG_FIRST; regno <= GP_REG_LAST; regno++)\n-    if (BITSET_P (cfun->machine->frame.mask, regno - GP_REG_FIRST))\n-      {\n-\tbool handle_reg = !cfun->machine->reg_is_wrapped_separately[regno];\n-\n-\t/* If this is a normal return in a function that calls the eh_return\n-\t   builtin, then do not restore the eh return data registers as that\n-\t   would clobber the return value.  But we do still need to save them\n-\t   in the prologue, and restore them for an exception return, so we\n-\t   need special handling here.  */\n-\tif (epilogue && !maybe_eh_return && crtl->calls_eh_return)\n-\t  {\n-\t    unsigned int i, regnum;\n-\n-\t    for (i = 0; (regnum = EH_RETURN_DATA_REGNO (i)) != INVALID_REGNUM;\n-\t\t i++)\n-\t      if (regno == regnum)\n-\t\t{\n-\t\t  handle_reg = FALSE;\n-\t\t  break;\n-\t\t}\n-\t  }\n-\n-\tif (handle_reg)\n-\t  riscv_save_restore_reg (word_mode, regno, offset, fn);\n-\toffset -= UNITS_PER_WORD;\n-      }\n+  offset = (cfun->machine->frame.gp_sp_offset - sp_offset).to_constant ()\n+\t   + UNITS_PER_WORD;\n+  for (regno = riscv_next_saved_reg (start, limit, &offset, false);\n+       regno != INVALID_REGNUM;\n+       regno = riscv_next_saved_reg (regno, limit, &offset))\n+    {\n+      if (cfun->machine->reg_is_wrapped_separately[regno])\n+\tcontinue;\n+\n+      /* If this is a normal return in a function that calls the eh_return\n+\t builtin, then do not restore the eh return data registers as that\n+\t would clobber the return value.  But we do still need to save them\n+\t in the prologue, and restore them for an exception return, so we\n+\t need special handling here.  */\n+      if (epilogue && !maybe_eh_return\n+\t  && riscv_is_eh_return_data_register (regno))\n+\tcontinue;\n+\n+      riscv_save_restore_reg (word_mode, regno, offset, fn);\n+    }\n \n   /* This loop must iterate over the same space as its companion in\n      riscv_compute_frame_info.  */"}]}