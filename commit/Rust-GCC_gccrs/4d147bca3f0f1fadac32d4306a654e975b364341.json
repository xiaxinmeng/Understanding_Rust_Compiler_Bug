{"sha": "4d147bca3f0f1fadac32d4306a654e975b364341", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQxNDdiY2EzZjBmMWZhZGFjMzJkNDMwNmE2NTRlOTc1YjM2NDM0MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-05-04T13:29:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-05-04T13:29:08Z"}, "message": "tree-ssa-alias.c (get_continuation_for_phi): Improve looking for the last VUSE which def dominates the PHI.\n\n2017-05-04  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-alias.c (get_continuation_for_phi): Improve looking\n\tfor the last VUSE which def dominates the PHI.  Directly call\n\tmaybe_skip_until.\n\t(get_continuation_for_phi_1): Remove.\n\n\t* gcc.dg/tree-ssa/ssa-fre-58.c: New testcase.\n\nFrom-SVN: r247596", "tree": {"sha": "6fd37d14e0bb29d83611af005e02f4128f9ce4ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fd37d14e0bb29d83611af005e02f4128f9ce4ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d147bca3f0f1fadac32d4306a654e975b364341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d147bca3f0f1fadac32d4306a654e975b364341", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d147bca3f0f1fadac32d4306a654e975b364341", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d147bca3f0f1fadac32d4306a654e975b364341/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b655c31048e115ba4fc42072533de4de2c8f8821", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b655c31048e115ba4fc42072533de4de2c8f8821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b655c31048e115ba4fc42072533de4de2c8f8821"}], "stats": {"total": 201, "additions": 107, "deletions": 94}, "files": [{"sha": "b87dc25a4c597799c0f0af676c8900ba66eddc3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d147bca3f0f1fadac32d4306a654e975b364341/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d147bca3f0f1fadac32d4306a654e975b364341/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d147bca3f0f1fadac32d4306a654e975b364341", "patch": "@@ -1,3 +1,10 @@\n+2017-05-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-alias.c (get_continuation_for_phi): Improve looking\n+\tfor the last VUSE which def dominates the PHI.  Directly call\n+\tmaybe_skip_until.\n+\t(get_continuation_for_phi_1): Remove.\n+\n 2017-05-04  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* tree-ssa-loop-manip.c (niter_for_unrolled_loop): Add commentary"}, {"sha": "edf2247543ad7d9b107cbcd67df5c4ceb97eb754", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d147bca3f0f1fadac32d4306a654e975b364341/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d147bca3f0f1fadac32d4306a654e975b364341/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d147bca3f0f1fadac32d4306a654e975b364341", "patch": "@@ -1,3 +1,7 @@\n+2017-05-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-fre-58.c: New testcase.\n+\n 2017-05-04  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* gcc.dg/vect/vect-profile-1.c: New test."}, {"sha": "7f30ad41728f692edf5af0a86cac6ca0329214aa", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-58.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d147bca3f0f1fadac32d4306a654e975b364341/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-58.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d147bca3f0f1fadac32d4306a654e975b364341/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-58.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-58.c?ref=4d147bca3f0f1fadac32d4306a654e975b364341", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target int32plus } */\n+/* { dg-options \"-O2 -fdump-tree-fre1\" } */\n+\n+long long int a = -465274079317386463LL;\n+int b = 856872806;\n+int c = -1940894202;\n+int d = 1718449211;\n+int e = -392681565;\n+unsigned long long int f = 13521452247506316486ULL;\n+int g = -13194608;\n+\n+__attribute__((noinline, noclone))\n+void foo ()\n+{\n+  if (!a - a)\n+    c = b = 0;\n+  else\n+    d = 3UL * a == 0;\n+  if (g / a)\n+    e = 0 < -a + 500849970701012771LL + (unsigned long) -a;\n+  else\n+    f = 4081116982543369LL & a;\n+}\n+\n+int\n+main ()\n+{\n+  asm volatile (\"\" : : : \"memory\");\n+  foo ();\n+  if (f != 2818598057803777LL)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* Should CSE all loads of a.  */\n+/* { dg-final { scan-tree-dump-times \" = a;\" 1 \"fre1\" } } */"}, {"sha": "74ee2b0a0cc448135fa5c7c5c561673d6439a401", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 59, "deletions": 94, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d147bca3f0f1fadac32d4306a654e975b364341/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d147bca3f0f1fadac32d4306a654e975b364341/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=4d147bca3f0f1fadac32d4306a654e975b364341", "patch": "@@ -2663,70 +2663,6 @@ maybe_skip_until (gimple *phi, tree target, ao_ref *ref,\n   return true;\n }\n \n-/* For two PHI arguments ARG0 and ARG1 try to skip non-aliasing code\n-   until we hit the phi argument definition that dominates the other one.\n-   Return that, or NULL_TREE if there is no such definition.  */\n-\n-static tree\n-get_continuation_for_phi_1 (gimple *phi, tree arg0, tree arg1,\n-\t\t\t    ao_ref *ref, unsigned int *cnt,\n-\t\t\t    bitmap *visited, bool abort_on_visited,\n-\t\t\t    void *(*translate)(ao_ref *, tree, void *, bool *),\n-\t\t\t    void *data)\n-{\n-  gimple *def0 = SSA_NAME_DEF_STMT (arg0);\n-  gimple *def1 = SSA_NAME_DEF_STMT (arg1);\n-  tree common_vuse;\n-\n-  if (arg0 == arg1)\n-    return arg0;\n-  else if (gimple_nop_p (def0)\n-\t   || (!gimple_nop_p (def1)\n-\t       && dominated_by_p (CDI_DOMINATORS,\n-\t\t\t\t  gimple_bb (def1), gimple_bb (def0))))\n-    {\n-      if (maybe_skip_until (phi, arg0, ref, arg1, cnt,\n-\t\t\t    visited, abort_on_visited, translate, data))\n-\treturn arg0;\n-    }\n-  else if (gimple_nop_p (def1)\n-\t   || dominated_by_p (CDI_DOMINATORS,\n-\t\t\t      gimple_bb (def0), gimple_bb (def1)))\n-    {\n-      if (maybe_skip_until (phi, arg1, ref, arg0, cnt,\n-\t\t\t    visited, abort_on_visited, translate, data))\n-\treturn arg1;\n-    }\n-  /* Special case of a diamond:\n-       MEM_1 = ...\n-       goto (cond) ? L1 : L2\n-       L1: store1 = ...    #MEM_2 = vuse(MEM_1)\n-\t   goto L3\n-       L2: store2 = ...    #MEM_3 = vuse(MEM_1)\n-       L3: MEM_4 = PHI<MEM_2, MEM_3>\n-     We were called with the PHI at L3, MEM_2 and MEM_3 don't\n-     dominate each other, but still we can easily skip this PHI node\n-     if we recognize that the vuse MEM operand is the same for both,\n-     and that we can skip both statements (they don't clobber us).\n-     This is still linear.  Don't use maybe_skip_until, that might\n-     potentially be slow.  */\n-  else if ((common_vuse = gimple_vuse (def0))\n-\t   && common_vuse == gimple_vuse (def1))\n-    {\n-      bool disambiguate_only = true;\n-      *cnt += 2;\n-      if ((!stmt_may_clobber_ref_p_1 (def0, ref)\n-\t   || (translate\n-\t       && (*translate) (ref, arg0, data, &disambiguate_only) == NULL))\n-\t  && (!stmt_may_clobber_ref_p_1 (def1, ref)\n-\t      || (translate\n-\t\t  && (*translate) (ref, arg1, data, &disambiguate_only) == NULL)))\n-\treturn common_vuse;\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n \n /* Starting from a PHI node for the virtual operand of the memory reference\n    REF find a continuation virtual operand that allows to continue walking\n@@ -2749,44 +2685,73 @@ get_continuation_for_phi (gimple *phi, ao_ref *ref,\n \n   /* For two or more arguments try to pairwise skip non-aliasing code\n      until we hit the phi argument definition that dominates the other one.  */\n-  else if (nargs >= 2)\n+  basic_block phi_bb = gimple_bb (phi);\n+  tree arg0, arg1;\n+  unsigned i;\n+\n+  /* Find a candidate for the virtual operand which definition\n+     dominates those of all others.  */\n+  /* First look if any of the args themselves satisfy this.  */\n+  for (i = 0; i < nargs; ++i)\n     {\n-      tree arg0, arg1;\n-      unsigned i;\n-\n-      /* Find a candidate for the virtual operand which definition\n-\t dominates those of all others.  */\n-      arg0 = PHI_ARG_DEF (phi, 0);\n-      if (!SSA_NAME_IS_DEFAULT_DEF (arg0))\n-\tfor (i = 1; i < nargs; ++i)\n+      arg0 = PHI_ARG_DEF (phi, i);\n+      if (SSA_NAME_IS_DEFAULT_DEF (arg0))\n+\tbreak;\n+      basic_block def_bb = gimple_bb (SSA_NAME_DEF_STMT (arg0));\n+      if (def_bb != phi_bb\n+\t  && dominated_by_p (CDI_DOMINATORS, phi_bb, def_bb))\n+\tbreak;\n+      arg0 = NULL_TREE;\n+    }\n+  /* If not, look if we can reach such candidate by walking defs\n+     of a PHI arg without crossing other PHIs.  */\n+  if (! arg0)\n+    for (i = 0; i < nargs; ++i)\n+      {\n+\targ0 = PHI_ARG_DEF (phi, i);\n+\tgimple *def = SSA_NAME_DEF_STMT (arg0);\n+\t/* Backedges can't work.  */\n+\tif (dominated_by_p (CDI_DOMINATORS,\n+\t\t\t    gimple_bb (def), phi_bb))\n+\t  continue;\n+\t/* See below.  */\n+\tif (gimple_code (def) == GIMPLE_PHI)\n+\t  continue;\n+\twhile (! dominated_by_p (CDI_DOMINATORS,\n+\t\t\t\t phi_bb, gimple_bb (def)))\n \t  {\n-\t    arg1 = PHI_ARG_DEF (phi, i);\n-\t    if (SSA_NAME_IS_DEFAULT_DEF (arg1))\n+\t    arg0 = gimple_vuse (def);\n+\t    if (SSA_NAME_IS_DEFAULT_DEF (arg0))\n+\t      break;\n+\t    def = SSA_NAME_DEF_STMT (arg0);\n+\t    if (gimple_code (def) == GIMPLE_PHI)\n \t      {\n-\t\targ0 = arg1;\n-\t\tbreak;\n+\t\t/* Do not try to look through arbitrarily complicated\n+\t\t   CFGs.  For those looking for the first VUSE starting\n+\t\t   from the end of the immediate dominator of phi_bb\n+\t\t   is likely faster.  */\n+\t\targ0 = NULL_TREE;\n+\t\tgoto next;\n \t      }\n-\t    if (dominated_by_p (CDI_DOMINATORS,\n-\t\t\t\tgimple_bb (SSA_NAME_DEF_STMT (arg0)),\n-\t\t\t\tgimple_bb (SSA_NAME_DEF_STMT (arg1))))\n-\t      arg0 = arg1;\n \t  }\n+\tbreak;\n+next:;\n+      }\n+  if (! arg0)\n+    return NULL_TREE;\n \n-      /* Then pairwise reduce against the found candidate.  */\n-      for (i = 0; i < nargs; ++i)\n-\t{\n-\t  arg1 = PHI_ARG_DEF (phi, i);\n-\t  arg0 = get_continuation_for_phi_1 (phi, arg0, arg1, ref,\n-\t\t\t\t\t     cnt, visited, abort_on_visited,\n-\t\t\t\t\t     translate, data);\n-\t  if (!arg0)\n-\t    return NULL_TREE;\n-\t}\n-\n-      return arg0;\n+  /* Then check against the found candidate.  */\n+  for (i = 0; i < nargs; ++i)\n+    {\n+      arg1 = PHI_ARG_DEF (phi, i);\n+      if (arg1 == arg0)\n+\t;\n+      else if (! maybe_skip_until (phi, arg0, ref, arg1, cnt, visited,\n+\t\t\t\t   abort_on_visited, translate, data))\n+\treturn NULL_TREE;\n     }\n \n-  return NULL_TREE;\n+  return arg0;\n }\n \n /* Based on the memory reference REF and its virtual use VUSE call"}]}