{"sha": "88b470b80c827f069c516ceeeaf65a174a843480", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhiNDcwYjgwYzgyN2YwNjljNTE2Y2VlZWFmNjVhMTc0YTg0MzQ4MA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2011-06-06T22:46:58Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2011-06-06T22:46:58Z"}, "message": "In gcc/testsuite/: 2011-06-06 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/testsuite/:\n2011-06-06  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\tUpdated all testcases in the ObjC/ObjC++ testsuites to use the\n\tModern Objective-C runtime API.\n\t* objc/execute/next_mapping.h: Removed.\n\t* objc-obj-c++-shared/next-mapping.h: Removed.\n\t* objc-obj-c++-shared/Object1.h: Removed.\n\t* objc-obj-c++-shared/Object1.m: Removed.\n\t* objc-obj-c++-shared/Object1.mm: Removed.\n\t* objc-obj-c++-shared/Object1-implementation.h: Removed.\n\t* objc-obj-c++-shared/Protocol1.h: Removed.\n\t* objc-obj-c++-shared/objc-test-suite-types.h: Removed definition\n\tof ProtoBool, IVAR_T and METHOD.\n\t* objc-obj-c++-shared/runtime.h: New.\n\t* objc-obj-c++-shared/TestsuiteObject.h: New.\n\t* objc-obj-c++-shared/TestsuiteObject.m: New.\n\t\n\t* objc/compile/trivial.m: Use TestsuiteObject instead of Object.\t\n\t* objc/execute/IMP.m: Include ../../objc-obj-c++-shared/runtime.h.\n\tUse the Modern Objective-C runtime API. ([TestClass -next:]): Made\n\tit a class method.\n\t* objc/execute/_cmd.m: Include\n\t../../objc-obj-c++-shared/runtime.h.  Use the Modern Objective-C\n\truntime API.  ([TestClass +initialize]): Include this method also\n\twith the GNU runtime.\n\t* objc/execute/accessing_ivars.m: Use TestsuiteObject instead of\n\tObject.  ([-setValue:]): Return void.\n\t* objc/execute/bf-common.h: Do not include objc/objc-encoding.h\n\twith the GNU runtime.  Include\n\t../../objc-obj-c++-shared/runtime.h.  Do not define objc_get_class\n\tfor the NeXT runtime.  Use the existing print_ivars() and\n\tcompare_structures() implementations for the old NeXT runtime.\n\tAdded new implementations for the Modern GNU and NeXT runtimes.\n\tEnable the testcase (and hence all the bf-* ones) for __OBJC2__ as\n\twell.  (main): Use objc_getClass().  Use return instead of exit.\n\t* objc/execute/bycopy-1.m: Include objc/objc.h instead of\n\t../../objc-obj-c++-shared/Protocol1.h.  (main): Use return instead\n\tof exit().\n\t* objc/execute/bycopy-2.m: Include objc/objc.h instead of\n\t../../objc-obj-c++-shared/Protocol1.h.  Use TestsuiteObject\n\tinstead of Object.  (main): Use return instead of exit().\n\t* objc/execute/bycopy-3.m: Updated includes.  Use TestsuiteObject\n\tinstead of Object.  Removed prototype for exit().  (main): Use\n\treturn instead of exit().  Use the Modern Objective-C runtime API.\n\t* objc/execute/cascading-1.m: Use TestsuiteObject instead of\n\tObject.\n\t* objc/execute/class-tests-1.h: Include\n\t../../objc-obj-c++-shared/runtime.h.  Use the Modern Objective-C\n\truntime API.  (test_class_with_superclass): Do not call [Object\n\tclass].  There is no need to with the current libobjc.\n\t* objc/execute/class-tests-2.h: Include\n\t../../objc-obj-c++-shared/runtime.h.  Use the Modern Objective-C\n\truntime API.\n\t* objc/execute/class-1.m: Do not include <objc/objc-api.h> and\n\t../../objc-obj-c++-shared/next-mapping.h.\n\t* objc/execute/class-2.m: Likewise.\n\t* objc/execute/class-3.m: Likewise.\n\t* objc/execute/class-4.m: Do not include <objc/objc-api.h> and\n\t../../objc-obj-c++-shared/next-mapping.h.  ([RootClass\n\t+initialize]): Include this method also with the GNU\n\truntime. (main): Use the Modern Objective-C runtime API.\n\t* objc/execute/class-5.m: Likewise.\n\t* objc/execute/class-6.m: Likewise.\n\t* objc/execute/class-7.m: Likewise.\n\t* objc/execute/class-8.m: Likewise.\n\t* objc/execute/class-9.m: Likewise.\n\t* objc/execute/class-10.m: Likewise.\n\t* objc/execute/class-11.m: Likewise.\n\t* objc/execute/class-12.m: Likewise.\n\t* objc/execute/class-13.m: Likewise.\n\t* objc/execute/class-14.m: Likewise.\n\t* objc/execute/class_self-1.m ([TestClass +initialize]): Include\n\tthis method also with the GNU runtime.\n\t* objc/execute/class_self-2.m: ([TestClass +initialize], [ClassA\n\t+initialize]): Include this method also with the GNU runtime.\n\t* objc/execute/compatibility_alias.m: Use TestsuiteObject instead\n\tof Object.\n\t* objc/execute/encode-1.m: Likewise.\n\t* objc/execute/enumeration-1.m: Likewise.\n\t* objc/execute/enumeration-2.m: Likewise.\n\t* objc/execute/exceptions/catchall-1.m: Likewise.\n\t* objc/execute/exceptions/finally-1.m: Likewise.\n\t* objc/execute/exceptions/foward-1.m: Likewise.\n\t* objc/execute/exceptions/local-variables-1.m: Likewise.\t\n\t* objc/execute/exceptions/throw-nil.m: Likewise.\n\t* objc/execute/exceptions/trivial.m: Likewise.\n\t* objc/execute/exceptions/handler-1.m: Use TestsuiteObject instead\n\tof Object. Include objc/runtime.h instead of objc/objc-api.h.\n\t* objc/execute/exceptions/matcher-1.m: Likewise.\n\t* objc/execute/formal_protocol-1.m: Use TestsuiteObject instead of\n\tObject.\n\t* objc/execute/formal_protocol-2.m: Likewise.\n\t* objc/execute/formal_protocol-3.m: Likewise.\n\t* objc/execute/formal_protocol-4.m: Likewise.\n\t* objc/execute/formal_protocol-5.m: Include\n\t../../objc-obj-c++-shared/runtime.h. (main): Always use\n\tprotocol_getName().\n\t* objc/execute/formal_protocol-6.m: Likewise.\n\t* objc/execute/formal_protocol-7.m: Use TestsuiteObject instead of\n\tObject.  Include <objc/Protocol.h> instead of\n\t../../objc-obj-c++-shared/Protocol1.h.\n\t* objc/execute/function-message-1.m: Use TestsuiteObject intead of\n\tObject.\n\t* objc/execute/informal_protocol.m: Likewise.\n\t* objc/execute/load-3.m: Likewise.\n\t* objc/execute/many_args_method.m ([TestClass +initialize]):\n\tInclude this method with the GNU runtime as well.\n\t* objc/execute/nested-3.m ([Test +initialize]): Likewise.\n\t* objc/execute/nested-func-1.m: Use TestsuiteObject\n\tinstead of Object.\n\t* objc/execute/nil_method-1.m: Likewise.\n\t* objc/execute/no_clash.m: Likewise.\n\t* objc/execute/np-1.m: Do not include\n\t../../objc-obj-c++-shared/Protocol1.h.\n\t(main): Use return instead of exit().\n\t* objc/execute/np-2.m: Do not include\n\t../../objc-obj-c++-shared/Protocol1.h.\n\t([MyObject +initialize]): Include this method also with the GNU\n\truntime.  (main): Use return instead of exit().\n\t* objc/execute/object_is_class.m: Include\n\t../../objc-obj-c++-shared/runtime.h.  Use TestsuiteObject instead\n\tof Object.  (main): Use the Modern Objective-C runtime API.\n\t* objc/execute/object_is_meta_class.m: Likewise.\n\t* objc/execute/private.m: Use TestsuiteObject instead of Object.\n\t* objc/execute/protocol-isEqual-1.m: Include objc/Protocol.h\n\tinstead of ../objc-obj-c++-shared/Protocol1.h.  Include\n\t../../objc-obj-c++-shared/runtime.h.  (main): Use the Modern\n\tObjective-C runtime API.\n\t* objc/execute/protocol-isEqual-2.m: Likewise.\n\t* objc/execute/protocol-isEqual-3.m: Likewise.\n\t* objc/execute/protocol-isEqual-4.m: Likewise.\n\t* objc/execute/redefining_self.m ([TestClass +initialize]):\n\tInclude this method with the GNU runtime as well.\n\t* objc/execute/root_methods.m: Include\n\t../../objc-obj-c++-shared/runtime.h.  ([RootClass +initialize]):\n\tInclude this method with the GNU runtime as well.\n\t(main): Use the Modern Objective-C runtime API.\n\t* objc/execute/selector-1.m: Include\n\t../../objc-obj-c++-shared/runtime.h.  Use TestsuiteObject instead\n\tof Object.  (main): Use the Modern Objective-C runtime API.\n\t* objc/execute/static-1.m ([Test +initialize]): Include this\n\tmethod with the GNU runtime as well.\n\t* objc/execute/static-2.m: Likewise.\n\t* objc/execute/trivial.m: Use TestsuiteObject instead of Object.\n\t* objc/execute/va_method.m: Do not include objc/objc-api.h.\n\t([MathClass +initialize]): Include this method with the GNU\n\truntime as well.\n\t* objc.dg/attributes/categ-attribute-1.m: Use TestsuiteObject\n\tinstead of Object.\n\t* obj-c++.dg/attributes/categ-attribute-1.mm: Likewise.\t\n\t* objc.dg/attributes/categ-attributes-2.m: Likewise.\n\t* obj-c++.dg/attributes/categ-attributes-2.mm: Likewise.\n\t* objc.dg/attributes/method-attribute-1.m: Likewise.\n\t* obj-c++.dg/attributes/method-attribute-1.mm: Likewise.\t\n\t* objc.dg/attributes/method-attribute-2.m: Likewise.\n\t* obj-c++.dg/attributes/method-attribute-2.mm: Likewise.\t\n\t* objc.dg/attributes/method-attribute-3.m: Likewise.\n\t* obj-c++.dg/attributes/method-attribute-3.mm: Likewise.\t\n\t* obj-c++.dg/basic.mm: Use TestsuiteObject instead of Object.\n\t* objc.dg/bitfield-1.m: Use TestsuiteObject instead of Object.\n\t* obj-c++.dg/bitfield-1.mm: Likewise.\n\t* obj-c++.dg/bitfield-2.mm: Likewise\n\t* objc.dg/bitfield-3.m: Likewise.\n\t* obj-c++.dg/bitfield-4.mm: Likewise.\n\t* objc.dg/bitfield-5.m: Likewise\n\t* objc.dg/call-super-1.m: Likewise.\n\t* objc.dg/call-super-2.m: Use TestsuiteObject instead of Object.\n\tUse objc_getClass() instead of objc_get_class(), but for the GNU\n\truntime redefine objc_getClass as objc_get_class.  Include\n\t../objc-obj-c++-shared/runtime.h.\n\t* objc.dg/call-super-3.m: Use TestsuiteObject instead of Object.\n\t* objc.dg/category-1.m: Use TestsuiteObject instead of Object.\n\tUse the Modern Objective-C runtime API.\t\n\t* objc.dg/class-protocol-1.m: Include\n\t../objc-obj-c++-shared/runtime.h instead of objc/objc-api.h.\n\t* obj-c++.dg/class-protocol-1.mm: Likewise.\t\n\t* objc.dg/comp-types-8.m: Use TestsuiteObject instead of Object.\n\t* objc.dg/comp-types-10.m: Likewise.\n\t* objc.dg/comp-types-11.m: Likewise.\n\t* objc.dg/comp-types-12.m: Likewise.\n\t* obj-c++.dg/comp-types-9.mm: Likewise.\n\t* obj-c++.dg/comp-types-11.mm: Likewise.\n\t* obj-c++.dg/comp-types-12.mm: Likewise.\n\t* obj-c++.dg/comp-types-13.mm: Likewise.\n\t* obj-c++.dg/cxx-ivars-1.mm: Likewise.\n\t* obj-c++.dg/cxx-ivars-2.mm: Likewise.\n\t* obj-c++.dg/cxx-scope-1.mm: Likewise.\n\t* obj-c++.dg/cxx-scope-2.mm: Likewise.\n\t* objc.dg/defs.m: Use TestsuiteObject instead of Object.\n\t* objc.dg/desig-init-1.m: Likewise.\n\t* obj-c++.dg/defs.mm: Likewise.\n\t* objc.dg/exceptions-2.m: Likewise.\n\t* obj-c++.dg/except-1.mm: Likewise.\n\t* obj-c++.dg/exceptions-2.mm: Likewise.\n\t* objc.dg/encode-2.m: Use TestsuiteObject instead of Object.\n\tUse the Modern Objective-C runtime API.\n\t* objc.dg/encode-3.m: Use TestsuiteObject instead of Object.  Use\n\tthe Modern Objective-C runtime API.  Do not include\n\t../objc-obj-c++-shared/objc-test-suite-types.h.  Define ProtoBool.\n\t* objc.dg/encode-4.m: Use TestsuiteObject instead of Object.  Use\n\tthe Modern Objective-C runtime API except when using an older NeXT\n\truntime.\n\t* objc.dg/encode-5.m: Use TestsuiteObject instead of Object.  Use\n\tthe Modern Objective-C runtime API.\n\t* objc.dg/encode-7.m: Include objc/runtime.h instead of\n\tobjc/encoding.h.\t\n\t* objc.dg/encode-7-next.m: Use TestsuiteObject instead of Object.\n\t* objc.dg/encode-7-next-64bit.m: Updated include.\n\t* objc.dg/encode-8.m: Include objc/runtime.h instead of\n\tobjc/encoding.h.\n\t* obj-c++.dg/encode-4.mm: Use TestsuiteObject instead of Object.  Use\n\tthe Modern Objective-C runtime API.\n\t* obj-c++.dg/encode-5.mm: Use TestsuiteObject instead of Object.\n\tUse the Modern Objective-C runtime API.  Include objc/Protocol.h\n\tinstead of ../objc-obj-c++-shared/Protocol1.h.\n\t* obj-c++.dg/encode-6.mm: Use TestsuiteObject instead of Object.  Use\n\tthe Modern Objective-C runtime API except when using an older NeXT\n\truntime.\n\t* obj-c++.dg/encode-7.mm:  Use TestsuiteObject instead of Object.  Use\n\tthe Modern Objective-C runtime API.\t\n\t* objc.dg/fix-and-continue-1.m: Use TestsuiteObject instead of\n\tObject.\n\t* obj-c++.dg/fix-and-continue-2.mm: Likewise.\n\t* objc.dg/fix-and-continue-2.m: Likewise.\n\t* objc.dg/foreach-1.m: Likewise.\n\t* objc.dg/foreach-2.m: Likewise.\n\t* objc.dg/foreach-3.m: Likewise.\n\t* objc.dg/foreach-4.m: Likewise.\n\t* objc.dg/foreach-5.m: Likewise.\n\t* objc.dg/foreach-6.m: Likewise.\n\t* objc.dg/foreach-7.m: Likewise.\n\t* objc.dg/func-ptr-1.m:  Use TestsuiteObject instead of\n\tObject.\n\t* objc.dg/func-ptr-2.m: Likewise.\n\t* objc.dg/fsf-package-0.m: Use TestsuiteObject instead of Object.\n\tDo not include objc/objc-api.h.\n\t* obj-c++.dg/fsf-package-0.mm: Likewise.\n\t* objc.dg/gnu-encoding/struct-layout-encoding-1_generate.c (switchfiles):\n\tInclude objc/runtime.h instead of objc/encoding.h.\t\n\t* objc.dg/gnu-runtime-1.m: Updated to use TestsuiteObject instead\n\tof Object.\n\t* obj-c++.dg/gnu-runtime-1.mm: Likewise.\n\t* objc.dg/gnu-runtime-3.m: Likewise.\n\t* obj-c++.dg/gnu-runtime-3.mm: Likewise.\n\t* objc.dg/headers.m: Include objc/runtime.h instead of\n\tobjc/encoding.h for the GNU runtime.  Include objc/objc-api.h only\n\tfor the NeXT runtime.\n\t* objc.dg/isa-field-1.m: Use TestsuiteObject instead of Object.\n\t* obj-c++.dg/isa-field-1.mm: Likewise.\n\t* obj-c++.dg/ivar-list-semi.mm: Likewise.\n\t* objc.dg/layout-1.m: Likewise.\n\t* objc.dg/layout-2.m: Likewise.\n\t* objc.dg/local-decl-2.m: Likewise.\n\t* objc.dg/lookup-1.m: Use TestsuiteObject instead of\n\tObject.  ([Container +elementForView:]): Use\n\tclass_conformsToProtocol().\n\t* obj-c++.dg/lookup-2.mm: Likewise.\n\t* obj-c++.dg/layout-1.mm: Use TestsuiteObject instead of Object.\n\t* obj-c++.dg/local-decl-1.mm: Likewise.\n\t* objc.dg/method-3.m: Likewise.\n\t* objc.dg/method-4.m: Likewise.\n\t* objc.dg/method-6.m: Include objc/Protocol.h instead of\n\t../objc-obj-c++-shared/Protocol1.h.\n\t* objc.dg/method-7.m: Use TestsuiteObject instead of Object.\n\t* objc.dg/method-9.m: Likewise.\n\t* objc.dg/method-10.m: Likewise.\n\t* objc.dg/method-13.m ([Root +initialize]): Include this method\n\talso for the GNU runtime.  (main): Use objc_getClass() also for\n\tthe GNU runtime.\n\t* objc.dg/method-15.m: Use TestsuiteObject instead of Object.\n\t* objc.dg/method-17.m: Likewise.\n\t* objc.dg/method-19.m: Likewise.\n\t* objc.dg/method-20b.m: Likewise.\n\t* obj-c++.dg/method-2.mm: Likewise.\n\t* obj-c++.dg/method-6.mm: Likewise.\n\t* obj-c++.dg/method-10.mm: Likewise.\n\t* obj-c++.dg/method-11.mm: Likewise.\n\t* obj-c++.dg/method-12.mm: Include objc/Protocol.h instead of\n\t../objc-obj-c++-shared/Protocol1.h.\n\t* obj-c++.dg/method-13.mm: Use TestsuiteObject instead of Object.\n\t* obj-c++.dg/method-15.mm: Likewise.\n\t* obj-c++.dg/method-17.mm: Likewise.\n\t* obj-c++.dg/method-19.mm: Updated includes.  ([Root\n\t+initialize]): Include this method also for the GNU\n\truntime.  (main): Use objc_getClass() also for the GNU runtime.\n\t* obj-c++.dg/method-21.mm: Use TestsuiteObject instead of Object.\n\t* obj-c++.dg/method-22.mm: Likewise.\n\t* obj-c++.dg/method-23.mm: Likewise.\n\t* obj-c++.dg/no-extra-load.mm: Likewise.\n\t* objc.dg/objc-fast-4.m: Likewise.\n\t* objc.dg/objc-gc-4.m: Likewise.\n\t* obj-c++.dg/objc-gc-3.mm: Likewise.\n\t* objc.dg/pr18255.m: Include objc/runtime.h.  (main): Use\n\tprotocol_getMethodDescription() instead of [Protocol\n\t-descriptionForInstanceMethod].\n\t* objc.dg/pr23214.m ([Object(TS_CAT) -class]): Renamed to test.\n\tMade it available with all runtimes.  (main): Call -test instead\n\tof -class.\n\t* objc.dg/pr45878.m ([Object -isEqual:]): Renamed to testIsEqual,\n\tand put into a category.\n\t* objc.dg/proto-lossage-2.m: Use TestsuiteObject instead of\n\tObject.  Include objc/objc.h.\n\t* obj-c++.dg/proto-lossage-2.mm: Likewise.\n\t* objc.dg/proto-lossage-3.m: Updated includes.  (MyClass):\n\tNew. (main): Use protocol_getMethodDescription() instead\n\tof [Protocol -descriptionForInstanceMethod] and [Protocol\n\t-descriptionForClassMethod].\n\t* obj-c++.dg/proto-lossage-3.mm: Likewise.\n\t* objc.dg/proto-qual-1.m: Updated includes.  Use the Modern\n\tObjective-C runtime API.\n\t* obj-c++.dg/proto-qual-1.mm: Likewise.\t\n\t* objc.dg/property/property-1.m: Use TestsuiteObject instead of\n\tObject.\n\t* obj-c++.dg/property/property-1.mm: Likewise.\n\t* obj-c++.dg/qual-types-1.mm: Likewise.\n\t* objc.dg/selector-2.m: Include objc/objc.h instead of\n\t../objc-obj-c++-shared/Object1.h.\n\t* obj-c++.dg/selector-2.mm: Likewise.\n\t* obj-c++.dg/selector-5.mm: Likewise.\n\t* obj-c++.dg/selector-6.mm: Likewise.\n\t* objc.dg/set-not-used-1.m: Use TestsuiteObject instead of\n\tObject.  Do not include objc/objc-api.h.\n\t* obj-c++.dg/set-not-used-1.mm: Likewise.\n\t* objc.dg/sizeof-1.m: Use TestsuiteObject instead of Object.\n\t* objc.dg/stret-1.m: Likewise.\n\t* objc.dg/stret-2.m: Likewise.\n\t* obj-c++.dg/super-class-2.mm: Likewise.\n\t* objc.dg/super-class-3.m: Likewise.\n\t* objc.dg/super-class-4.m: Likewise.\n\t* objc.dg/sync-2.m: Likewise.\n\t* obj-c++.dg/sync-2.mm: Likewise.\n\t* objc.dg/sync-1.m: Include objc/objc.h instead of\n\t../objc-obj-c++-shared/Object1.h.\n\t* objc.dg/special/unclaimed-category-1.h (TestClass): Always use\n\t'Class' as the type of 'isa'.\n\t* objc.dg/special/unclaimed-category-1.m: Use the Modern\n\tObjective-C runtime API.  ([TestClass +initialize]): Include this\n\tmethod with the GNU runtime as well.\n\t* objc.dg/strings/strings-1.m: Updated includes.\n\t* obj-c++.dg/strings/strings-1.mm: Likewise.\n\t* obj-c++.dg/strings/const-str-12.mm: Updated to be identical to\n\tobjc.dg/strings/const-str-12b.m.\n\t* obj-c++.dg/template-1.mm: Use TestsuiteObject intead of Object.\n\t* obj-c++.dg/template-3.mm: Likewise.\n\t* obj-c++.dg/template-4.mm: Likewise.\n\t* objc.dg/threedotthree-abi-1.m: Updated includes.  Use Modern\n\tObjective-C runtime API.\n\t* obj-c++.dg/threedotthree-abi-1.mm: Likewise.\n\t* objc.dg/try-catch-1.m: Use TestsuiteObject instead of Object.\n\t* obj-c++.dg/try-catch-1.mm: Likewise.\n\t* obj-c++.dg/try-catch-2.mm: Likewise.\n\t* objc.dg/try-catch-3.m: Likewise.\n\t* obj-c++.dg/try-catch-3.mm: Likewise.\n\t* objc.dg/try-catch-6.m: Likewise.\n\t* objc.dg/try-catch-7.m: Likewise.\n\t* obj-c++.dg/try-catch-7.mm: Likewise.\n\t* obj-c++.dg/try-catch-8.mm: Likewise.\n\t* obj-c++.dg/try-catch-9.mm: Likewise.\n\t* objc.dg/try-catch-10.m: Likewise.\n\t* obj-c++.dg/try-catch-11.mm: Likewise.\n\t* objc.dg/typedef-alias-1.m: Use TestsuiteObject instead of\n\tObject.  Include objc/objc.h.\n\t* obj-c++.dg/typedef-alias-1.mm: Likewise.\n\t* objc.dg/type-size-2.m: Use the Modern Objective-C runtime API.\n\t* objc.dg/torture/forward-1.m: Use TestsuiteObject intead of\n\tObject.  Use Modern Objective-C runtime API.  Do not use\n\tperformv::.\n\t* objc.dg/torture/trivial.m: Use TestsuiteObject intead of Object.\n\t* obj-c++.dg/torture/trivial.mm: Likewise.\t\n\t* objc.dg/torture/strings/const-str-10.m: Include objc/Object.h\n\tinstead of ../objc-obj-c++-shared/Object1.h.  Include\n\t../objc-obj-c++-shared/runtime.h.\n\t* obj-c++.dg/torture/strings/const-str-10.mm: Likewise.\n\t* objc.dg/torture/strings/const-str-11.m: Likewise.\n\t* obj-c++.dg/torture/strings/const-str-11.mm: Likewise.\n\t* objc.dg/torture/strings/const-str-9.m: Likewise.\n\t* obj-c++.dg/torture/strings/const-str-9.mm: Likewise.\n\t* objc.dg/torture/strings/const-str-7.m: Use TestsuiteObject\n\tinstead of Object. Only add _FooClassReference if\n\t__NEXT_RUNTIME__.\n\t* obj-c++.dg/torture/strings/const-str-7.mm: Likewise.\n\t* objc.dg/torture/strings/const-str-8.m: Likewise.\n\t* obj-c++.dg/torture/strings/const-str-8.mm: Likewise.\n\t* obj-c++.dg/torture/strings/string1.mm: Updated includes and\n\tadditional sources.\n\t* objc.dg/torture/tls/thr-init-3.m: Use TestsuiteObject instead of\n\tObject.\n\t* obj-c++.dg/torture/tls/thr-init-3.mm: Likewise.\n\t* objc.dg/va-meth-1.m: Use TestsuiteObject instead of Object.\n\t* obj-c++.dg/va-meth-1.mm: Likewise.\n\t* objc.dg/zero-link-1.m: Include objc/Object.h instead of\n\t../objc-obj-c++-shared/Object1.h.\n\t* objc.dg/zero-link-3.m: Likewise.\t\n\t\n2011-06-06  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* obj-c++.dg/try-catch-2.mm: Fixed unterminated comment.\n\nFrom-SVN: r174727", "tree": {"sha": "059bb43db4c6e79cbfc2b53aad3fae44ac932bdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/059bb43db4c6e79cbfc2b53aad3fae44ac932bdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88b470b80c827f069c516ceeeaf65a174a843480", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b470b80c827f069c516ceeeaf65a174a843480", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88b470b80c827f069c516ceeeaf65a174a843480", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b470b80c827f069c516ceeeaf65a174a843480/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "889ec77132ca388f1d4a3349db729564969feac2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/889ec77132ca388f1d4a3349db729564969feac2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/889ec77132ca388f1d4a3349db729564969feac2"}], "stats": {"total": 4285, "additions": 1607, "deletions": 2678}, "files": [{"sha": "14e98b12ab89c92e16103ab1aad861eb9ad26db1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 398, "deletions": 0, "changes": 398, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,3 +1,401 @@\n+2011-06-06  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tUpdated all testcases in the ObjC/ObjC++ testsuites to use the\n+\tModern Objective-C runtime API.\n+\t* objc/execute/next_mapping.h: Removed.\n+\t* objc-obj-c++-shared/next-mapping.h: Removed.\n+\t* objc-obj-c++-shared/Object1.h: Removed.\n+\t* objc-obj-c++-shared/Object1.m: Removed.\n+\t* objc-obj-c++-shared/Object1.mm: Removed.\n+\t* objc-obj-c++-shared/Object1-implementation.h: Removed.\n+\t* objc-obj-c++-shared/Protocol1.h: Removed.\n+\t* objc-obj-c++-shared/objc-test-suite-types.h: Removed definition\n+\tof ProtoBool, IVAR_T and METHOD.\n+\t* objc-obj-c++-shared/runtime.h: New.\n+\t* objc-obj-c++-shared/TestsuiteObject.h: New.\n+\t* objc-obj-c++-shared/TestsuiteObject.m: New.\n+\t\n+\t* objc/compile/trivial.m: Use TestsuiteObject instead of Object.\t\n+\t* objc/execute/IMP.m: Include ../../objc-obj-c++-shared/runtime.h.\n+\tUse the Modern Objective-C runtime API. ([TestClass -next:]): Made\n+\tit a class method.\n+\t* objc/execute/_cmd.m: Include\n+\t../../objc-obj-c++-shared/runtime.h.  Use the Modern Objective-C\n+\truntime API.  ([TestClass +initialize]): Include this method also\n+\twith the GNU runtime.\n+\t* objc/execute/accessing_ivars.m: Use TestsuiteObject instead of\n+\tObject.  ([-setValue:]): Return void.\n+\t* objc/execute/bf-common.h: Do not include objc/objc-encoding.h\n+\twith the GNU runtime.  Include\n+\t../../objc-obj-c++-shared/runtime.h.  Do not define objc_get_class\n+\tfor the NeXT runtime.  Use the existing print_ivars() and\n+\tcompare_structures() implementations for the old NeXT runtime.\n+\tAdded new implementations for the Modern GNU and NeXT runtimes.\n+\tEnable the testcase (and hence all the bf-* ones) for __OBJC2__ as\n+\twell.  (main): Use objc_getClass().  Use return instead of exit.\n+\t* objc/execute/bycopy-1.m: Include objc/objc.h instead of\n+\t../../objc-obj-c++-shared/Protocol1.h.  (main): Use return instead\n+\tof exit().\n+\t* objc/execute/bycopy-2.m: Include objc/objc.h instead of\n+\t../../objc-obj-c++-shared/Protocol1.h.  Use TestsuiteObject\n+\tinstead of Object.  (main): Use return instead of exit().\n+\t* objc/execute/bycopy-3.m: Updated includes.  Use TestsuiteObject\n+\tinstead of Object.  Removed prototype for exit().  (main): Use\n+\treturn instead of exit().  Use the Modern Objective-C runtime API.\n+\t* objc/execute/cascading-1.m: Use TestsuiteObject instead of\n+\tObject.\n+\t* objc/execute/class-tests-1.h: Include\n+\t../../objc-obj-c++-shared/runtime.h.  Use the Modern Objective-C\n+\truntime API.  (test_class_with_superclass): Do not call [Object\n+\tclass].  There is no need to with the current libobjc.\n+\t* objc/execute/class-tests-2.h: Include\n+\t../../objc-obj-c++-shared/runtime.h.  Use the Modern Objective-C\n+\truntime API.\n+\t* objc/execute/class-1.m: Do not include <objc/objc-api.h> and\n+\t../../objc-obj-c++-shared/next-mapping.h.\n+\t* objc/execute/class-2.m: Likewise.\n+\t* objc/execute/class-3.m: Likewise.\n+\t* objc/execute/class-4.m: Do not include <objc/objc-api.h> and\n+\t../../objc-obj-c++-shared/next-mapping.h.  ([RootClass\n+\t+initialize]): Include this method also with the GNU\n+\truntime. (main): Use the Modern Objective-C runtime API.\n+\t* objc/execute/class-5.m: Likewise.\n+\t* objc/execute/class-6.m: Likewise.\n+\t* objc/execute/class-7.m: Likewise.\n+\t* objc/execute/class-8.m: Likewise.\n+\t* objc/execute/class-9.m: Likewise.\n+\t* objc/execute/class-10.m: Likewise.\n+\t* objc/execute/class-11.m: Likewise.\n+\t* objc/execute/class-12.m: Likewise.\n+\t* objc/execute/class-13.m: Likewise.\n+\t* objc/execute/class-14.m: Likewise.\n+\t* objc/execute/class_self-1.m ([TestClass +initialize]): Include\n+\tthis method also with the GNU runtime.\n+\t* objc/execute/class_self-2.m: ([TestClass +initialize], [ClassA\n+\t+initialize]): Include this method also with the GNU runtime.\n+\t* objc/execute/compatibility_alias.m: Use TestsuiteObject instead\n+\tof Object.\n+\t* objc/execute/encode-1.m: Likewise.\n+\t* objc/execute/enumeration-1.m: Likewise.\n+\t* objc/execute/enumeration-2.m: Likewise.\n+\t* objc/execute/exceptions/catchall-1.m: Likewise.\n+\t* objc/execute/exceptions/finally-1.m: Likewise.\n+\t* objc/execute/exceptions/foward-1.m: Likewise.\n+\t* objc/execute/exceptions/local-variables-1.m: Likewise.\t\n+\t* objc/execute/exceptions/throw-nil.m: Likewise.\n+\t* objc/execute/exceptions/trivial.m: Likewise.\n+\t* objc/execute/exceptions/handler-1.m: Use TestsuiteObject instead\n+\tof Object. Include objc/runtime.h instead of objc/objc-api.h.\n+\t* objc/execute/exceptions/matcher-1.m: Likewise.\n+\t* objc/execute/formal_protocol-1.m: Use TestsuiteObject instead of\n+\tObject.\n+\t* objc/execute/formal_protocol-2.m: Likewise.\n+\t* objc/execute/formal_protocol-3.m: Likewise.\n+\t* objc/execute/formal_protocol-4.m: Likewise.\n+\t* objc/execute/formal_protocol-5.m: Include\n+\t../../objc-obj-c++-shared/runtime.h. (main): Always use\n+\tprotocol_getName().\n+\t* objc/execute/formal_protocol-6.m: Likewise.\n+\t* objc/execute/formal_protocol-7.m: Use TestsuiteObject instead of\n+\tObject.  Include <objc/Protocol.h> instead of\n+\t../../objc-obj-c++-shared/Protocol1.h.\n+\t* objc/execute/function-message-1.m: Use TestsuiteObject intead of\n+\tObject.\n+\t* objc/execute/informal_protocol.m: Likewise.\n+\t* objc/execute/load-3.m: Likewise.\n+\t* objc/execute/many_args_method.m ([TestClass +initialize]):\n+\tInclude this method with the GNU runtime as well.\n+\t* objc/execute/nested-3.m ([Test +initialize]): Likewise.\n+\t* objc/execute/nested-func-1.m: Use TestsuiteObject\n+\tinstead of Object.\n+\t* objc/execute/nil_method-1.m: Likewise.\n+\t* objc/execute/no_clash.m: Likewise.\n+\t* objc/execute/np-1.m: Do not include\n+\t../../objc-obj-c++-shared/Protocol1.h.\n+\t(main): Use return instead of exit().\n+\t* objc/execute/np-2.m: Do not include\n+\t../../objc-obj-c++-shared/Protocol1.h.\n+\t([MyObject +initialize]): Include this method also with the GNU\n+\truntime.  (main): Use return instead of exit().\n+\t* objc/execute/object_is_class.m: Include\n+\t../../objc-obj-c++-shared/runtime.h.  Use TestsuiteObject instead\n+\tof Object.  (main): Use the Modern Objective-C runtime API.\n+\t* objc/execute/object_is_meta_class.m: Likewise.\n+\t* objc/execute/private.m: Use TestsuiteObject instead of Object.\n+\t* objc/execute/protocol-isEqual-1.m: Include objc/Protocol.h\n+\tinstead of ../objc-obj-c++-shared/Protocol1.h.  Include\n+\t../../objc-obj-c++-shared/runtime.h.  (main): Use the Modern\n+\tObjective-C runtime API.\n+\t* objc/execute/protocol-isEqual-2.m: Likewise.\n+\t* objc/execute/protocol-isEqual-3.m: Likewise.\n+\t* objc/execute/protocol-isEqual-4.m: Likewise.\n+\t* objc/execute/redefining_self.m ([TestClass +initialize]):\n+\tInclude this method with the GNU runtime as well.\n+\t* objc/execute/root_methods.m: Include\n+\t../../objc-obj-c++-shared/runtime.h.  ([RootClass +initialize]):\n+\tInclude this method with the GNU runtime as well.\n+\t(main): Use the Modern Objective-C runtime API.\n+\t* objc/execute/selector-1.m: Include\n+\t../../objc-obj-c++-shared/runtime.h.  Use TestsuiteObject instead\n+\tof Object.  (main): Use the Modern Objective-C runtime API.\n+\t* objc/execute/static-1.m ([Test +initialize]): Include this\n+\tmethod with the GNU runtime as well.\n+\t* objc/execute/static-2.m: Likewise.\n+\t* objc/execute/trivial.m: Use TestsuiteObject instead of Object.\n+\t* objc/execute/va_method.m: Do not include objc/objc-api.h.\n+\t([MathClass +initialize]): Include this method with the GNU\n+\truntime as well.\n+\t* objc.dg/attributes/categ-attribute-1.m: Use TestsuiteObject\n+\tinstead of Object.\n+\t* obj-c++.dg/attributes/categ-attribute-1.mm: Likewise.\t\n+\t* objc.dg/attributes/categ-attributes-2.m: Likewise.\n+\t* obj-c++.dg/attributes/categ-attributes-2.mm: Likewise.\n+\t* objc.dg/attributes/method-attribute-1.m: Likewise.\n+\t* obj-c++.dg/attributes/method-attribute-1.mm: Likewise.\t\n+\t* objc.dg/attributes/method-attribute-2.m: Likewise.\n+\t* obj-c++.dg/attributes/method-attribute-2.mm: Likewise.\t\n+\t* objc.dg/attributes/method-attribute-3.m: Likewise.\n+\t* obj-c++.dg/attributes/method-attribute-3.mm: Likewise.\t\n+\t* obj-c++.dg/basic.mm: Use TestsuiteObject instead of Object.\n+\t* objc.dg/bitfield-1.m: Use TestsuiteObject instead of Object.\n+\t* obj-c++.dg/bitfield-1.mm: Likewise.\n+\t* obj-c++.dg/bitfield-2.mm: Likewise\n+\t* objc.dg/bitfield-3.m: Likewise.\n+\t* obj-c++.dg/bitfield-4.mm: Likewise.\n+\t* objc.dg/bitfield-5.m: Likewise\n+\t* objc.dg/call-super-1.m: Likewise.\n+\t* objc.dg/call-super-2.m: Use TestsuiteObject instead of Object.\n+\tUse objc_getClass() instead of objc_get_class(), but for the GNU\n+\truntime redefine objc_getClass as objc_get_class.  Include\n+\t../objc-obj-c++-shared/runtime.h.\n+\t* objc.dg/call-super-3.m: Use TestsuiteObject instead of Object.\n+\t* objc.dg/category-1.m: Use TestsuiteObject instead of Object.\n+\tUse the Modern Objective-C runtime API.\t\n+\t* objc.dg/class-protocol-1.m: Include\n+\t../objc-obj-c++-shared/runtime.h instead of objc/objc-api.h.\n+\t* obj-c++.dg/class-protocol-1.mm: Likewise.\t\n+\t* objc.dg/comp-types-8.m: Use TestsuiteObject instead of Object.\n+\t* objc.dg/comp-types-10.m: Likewise.\n+\t* objc.dg/comp-types-11.m: Likewise.\n+\t* objc.dg/comp-types-12.m: Likewise.\n+\t* obj-c++.dg/comp-types-9.mm: Likewise.\n+\t* obj-c++.dg/comp-types-11.mm: Likewise.\n+\t* obj-c++.dg/comp-types-12.mm: Likewise.\n+\t* obj-c++.dg/comp-types-13.mm: Likewise.\n+\t* obj-c++.dg/cxx-ivars-1.mm: Likewise.\n+\t* obj-c++.dg/cxx-ivars-2.mm: Likewise.\n+\t* obj-c++.dg/cxx-scope-1.mm: Likewise.\n+\t* obj-c++.dg/cxx-scope-2.mm: Likewise.\n+\t* objc.dg/defs.m: Use TestsuiteObject instead of Object.\n+\t* objc.dg/desig-init-1.m: Likewise.\n+\t* obj-c++.dg/defs.mm: Likewise.\n+\t* objc.dg/exceptions-2.m: Likewise.\n+\t* obj-c++.dg/except-1.mm: Likewise.\n+\t* obj-c++.dg/exceptions-2.mm: Likewise.\n+\t* objc.dg/encode-2.m: Use TestsuiteObject instead of Object.\n+\tUse the Modern Objective-C runtime API.\n+\t* objc.dg/encode-3.m: Use TestsuiteObject instead of Object.  Use\n+\tthe Modern Objective-C runtime API.  Do not include\n+\t../objc-obj-c++-shared/objc-test-suite-types.h.  Define ProtoBool.\n+\t* objc.dg/encode-4.m: Use TestsuiteObject instead of Object.  Use\n+\tthe Modern Objective-C runtime API except when using an older NeXT\n+\truntime.\n+\t* objc.dg/encode-5.m: Use TestsuiteObject instead of Object.  Use\n+\tthe Modern Objective-C runtime API.\n+\t* objc.dg/encode-7.m: Include objc/runtime.h instead of\n+\tobjc/encoding.h.\t\n+\t* objc.dg/encode-7-next.m: Use TestsuiteObject instead of Object.\n+\t* objc.dg/encode-7-next-64bit.m: Updated include.\n+\t* objc.dg/encode-8.m: Include objc/runtime.h instead of\n+\tobjc/encoding.h.\n+\t* obj-c++.dg/encode-4.mm: Use TestsuiteObject instead of Object.  Use\n+\tthe Modern Objective-C runtime API.\n+\t* obj-c++.dg/encode-5.mm: Use TestsuiteObject instead of Object.\n+\tUse the Modern Objective-C runtime API.  Include objc/Protocol.h\n+\tinstead of ../objc-obj-c++-shared/Protocol1.h.\n+\t* obj-c++.dg/encode-6.mm: Use TestsuiteObject instead of Object.  Use\n+\tthe Modern Objective-C runtime API except when using an older NeXT\n+\truntime.\n+\t* obj-c++.dg/encode-7.mm:  Use TestsuiteObject instead of Object.  Use\n+\tthe Modern Objective-C runtime API.\t\n+\t* objc.dg/fix-and-continue-1.m: Use TestsuiteObject instead of\n+\tObject.\n+\t* obj-c++.dg/fix-and-continue-2.mm: Likewise.\n+\t* objc.dg/fix-and-continue-2.m: Likewise.\n+\t* objc.dg/foreach-1.m: Likewise.\n+\t* objc.dg/foreach-2.m: Likewise.\n+\t* objc.dg/foreach-3.m: Likewise.\n+\t* objc.dg/foreach-4.m: Likewise.\n+\t* objc.dg/foreach-5.m: Likewise.\n+\t* objc.dg/foreach-6.m: Likewise.\n+\t* objc.dg/foreach-7.m: Likewise.\n+\t* objc.dg/func-ptr-1.m:  Use TestsuiteObject instead of\n+\tObject.\n+\t* objc.dg/func-ptr-2.m: Likewise.\n+\t* objc.dg/fsf-package-0.m: Use TestsuiteObject instead of Object.\n+\tDo not include objc/objc-api.h.\n+\t* obj-c++.dg/fsf-package-0.mm: Likewise.\n+\t* objc.dg/gnu-encoding/struct-layout-encoding-1_generate.c (switchfiles):\n+\tInclude objc/runtime.h instead of objc/encoding.h.\t\n+\t* objc.dg/gnu-runtime-1.m: Updated to use TestsuiteObject instead\n+\tof Object.\n+\t* obj-c++.dg/gnu-runtime-1.mm: Likewise.\n+\t* objc.dg/gnu-runtime-3.m: Likewise.\n+\t* obj-c++.dg/gnu-runtime-3.mm: Likewise.\n+\t* objc.dg/headers.m: Include objc/runtime.h instead of\n+\tobjc/encoding.h for the GNU runtime.  Include objc/objc-api.h only\n+\tfor the NeXT runtime.\n+\t* objc.dg/isa-field-1.m: Use TestsuiteObject instead of Object.\n+\t* obj-c++.dg/isa-field-1.mm: Likewise.\n+\t* obj-c++.dg/ivar-list-semi.mm: Likewise.\n+\t* objc.dg/layout-1.m: Likewise.\n+\t* objc.dg/layout-2.m: Likewise.\n+\t* objc.dg/local-decl-2.m: Likewise.\n+\t* objc.dg/lookup-1.m: Use TestsuiteObject instead of\n+\tObject.  ([Container +elementForView:]): Use\n+\tclass_conformsToProtocol().\n+\t* obj-c++.dg/lookup-2.mm: Likewise.\n+\t* obj-c++.dg/layout-1.mm: Use TestsuiteObject instead of Object.\n+\t* obj-c++.dg/local-decl-1.mm: Likewise.\n+\t* objc.dg/method-3.m: Likewise.\n+\t* objc.dg/method-4.m: Likewise.\n+\t* objc.dg/method-6.m: Include objc/Protocol.h instead of\n+\t../objc-obj-c++-shared/Protocol1.h.\n+\t* objc.dg/method-7.m: Use TestsuiteObject instead of Object.\n+\t* objc.dg/method-9.m: Likewise.\n+\t* objc.dg/method-10.m: Likewise.\n+\t* objc.dg/method-13.m ([Root +initialize]): Include this method\n+\talso for the GNU runtime.  (main): Use objc_getClass() also for\n+\tthe GNU runtime.\n+\t* objc.dg/method-15.m: Use TestsuiteObject instead of Object.\n+\t* objc.dg/method-17.m: Likewise.\n+\t* objc.dg/method-19.m: Likewise.\n+\t* objc.dg/method-20b.m: Likewise.\n+\t* obj-c++.dg/method-2.mm: Likewise.\n+\t* obj-c++.dg/method-6.mm: Likewise.\n+\t* obj-c++.dg/method-10.mm: Likewise.\n+\t* obj-c++.dg/method-11.mm: Likewise.\n+\t* obj-c++.dg/method-12.mm: Include objc/Protocol.h instead of\n+\t../objc-obj-c++-shared/Protocol1.h.\n+\t* obj-c++.dg/method-13.mm: Use TestsuiteObject instead of Object.\n+\t* obj-c++.dg/method-15.mm: Likewise.\n+\t* obj-c++.dg/method-17.mm: Likewise.\n+\t* obj-c++.dg/method-19.mm: Updated includes.  ([Root\n+\t+initialize]): Include this method also for the GNU\n+\truntime.  (main): Use objc_getClass() also for the GNU runtime.\n+\t* obj-c++.dg/method-21.mm: Use TestsuiteObject instead of Object.\n+\t* obj-c++.dg/method-22.mm: Likewise.\n+\t* obj-c++.dg/method-23.mm: Likewise.\n+\t* obj-c++.dg/no-extra-load.mm: Likewise.\n+\t* objc.dg/objc-fast-4.m: Likewise.\n+\t* objc.dg/objc-gc-4.m: Likewise.\n+\t* obj-c++.dg/objc-gc-3.mm: Likewise.\n+\t* objc.dg/pr18255.m: Include objc/runtime.h.  (main): Use\n+\tprotocol_getMethodDescription() instead of [Protocol\n+\t-descriptionForInstanceMethod].\n+\t* objc.dg/pr23214.m ([Object(TS_CAT) -class]): Renamed to test.\n+\tMade it available with all runtimes.  (main): Call -test instead\n+\tof -class.\n+\t* objc.dg/pr45878.m ([Object -isEqual:]): Renamed to testIsEqual,\n+\tand put into a category.\n+\t* objc.dg/proto-lossage-2.m: Use TestsuiteObject instead of\n+\tObject.  Include objc/objc.h.\n+\t* obj-c++.dg/proto-lossage-2.mm: Likewise.\n+\t* objc.dg/proto-lossage-3.m: Updated includes.  (MyClass):\n+\tNew. (main): Use protocol_getMethodDescription() instead\n+\tof [Protocol -descriptionForInstanceMethod] and [Protocol\n+\t-descriptionForClassMethod].\n+\t* obj-c++.dg/proto-lossage-3.mm: Likewise.\n+\t* objc.dg/proto-qual-1.m: Updated includes.  Use the Modern\n+\tObjective-C runtime API.\n+\t* obj-c++.dg/proto-qual-1.mm: Likewise.\t\n+\t* objc.dg/property/property-1.m: Use TestsuiteObject instead of\n+\tObject.\n+\t* obj-c++.dg/property/property-1.mm: Likewise.\n+\t* obj-c++.dg/qual-types-1.mm: Likewise.\n+\t* objc.dg/selector-2.m: Include objc/objc.h instead of\n+\t../objc-obj-c++-shared/Object1.h.\n+\t* obj-c++.dg/selector-2.mm: Likewise.\n+\t* obj-c++.dg/selector-5.mm: Likewise.\n+\t* obj-c++.dg/selector-6.mm: Likewise.\n+\t* objc.dg/set-not-used-1.m: Use TestsuiteObject instead of\n+\tObject.  Do not include objc/objc-api.h.\n+\t* obj-c++.dg/set-not-used-1.mm: Likewise.\n+\t* objc.dg/sizeof-1.m: Use TestsuiteObject instead of Object.\n+\t* objc.dg/stret-1.m: Likewise.\n+\t* objc.dg/stret-2.m: Likewise.\n+\t* obj-c++.dg/super-class-2.mm: Likewise.\n+\t* objc.dg/super-class-3.m: Likewise.\n+\t* objc.dg/super-class-4.m: Likewise.\n+\t* objc.dg/sync-2.m: Likewise.\n+\t* obj-c++.dg/sync-2.mm: Likewise.\n+\t* objc.dg/sync-1.m: Include objc/objc.h instead of\n+\t../objc-obj-c++-shared/Object1.h.\n+\t* objc.dg/special/unclaimed-category-1.h (TestClass): Always use\n+\t'Class' as the type of 'isa'.\n+\t* objc.dg/special/unclaimed-category-1.m: Use the Modern\n+\tObjective-C runtime API.  ([TestClass +initialize]): Include this\n+\tmethod with the GNU runtime as well.\n+\t* objc.dg/strings/strings-1.m: Updated includes.\n+\t* obj-c++.dg/strings/strings-1.mm: Likewise.\n+\t* obj-c++.dg/strings/const-str-12.mm: Updated to be identical to\n+\tobjc.dg/strings/const-str-12b.m.\n+\t* obj-c++.dg/template-1.mm: Use TestsuiteObject intead of Object.\n+\t* obj-c++.dg/template-3.mm: Likewise.\n+\t* obj-c++.dg/template-4.mm: Likewise.\n+\t* objc.dg/threedotthree-abi-1.m: Updated includes.  Use Modern\n+\tObjective-C runtime API.\n+\t* obj-c++.dg/threedotthree-abi-1.mm: Likewise.\n+\t* objc.dg/try-catch-1.m: Use TestsuiteObject instead of Object.\n+\t* obj-c++.dg/try-catch-1.mm: Likewise.\n+\t* obj-c++.dg/try-catch-2.mm: Likewise.\n+\t* objc.dg/try-catch-3.m: Likewise.\n+\t* obj-c++.dg/try-catch-3.mm: Likewise.\n+\t* objc.dg/try-catch-6.m: Likewise.\n+\t* objc.dg/try-catch-7.m: Likewise.\n+\t* obj-c++.dg/try-catch-7.mm: Likewise.\n+\t* obj-c++.dg/try-catch-8.mm: Likewise.\n+\t* obj-c++.dg/try-catch-9.mm: Likewise.\n+\t* objc.dg/try-catch-10.m: Likewise.\n+\t* obj-c++.dg/try-catch-11.mm: Likewise.\n+\t* objc.dg/typedef-alias-1.m: Use TestsuiteObject instead of\n+\tObject.  Include objc/objc.h.\n+\t* obj-c++.dg/typedef-alias-1.mm: Likewise.\n+\t* objc.dg/type-size-2.m: Use the Modern Objective-C runtime API.\n+\t* objc.dg/torture/forward-1.m: Use TestsuiteObject intead of\n+\tObject.  Use Modern Objective-C runtime API.  Do not use\n+\tperformv::.\n+\t* objc.dg/torture/trivial.m: Use TestsuiteObject intead of Object.\n+\t* obj-c++.dg/torture/trivial.mm: Likewise.\t\n+\t* objc.dg/torture/strings/const-str-10.m: Include objc/Object.h\n+\tinstead of ../objc-obj-c++-shared/Object1.h.  Include\n+\t../objc-obj-c++-shared/runtime.h.\n+\t* obj-c++.dg/torture/strings/const-str-10.mm: Likewise.\n+\t* objc.dg/torture/strings/const-str-11.m: Likewise.\n+\t* obj-c++.dg/torture/strings/const-str-11.mm: Likewise.\n+\t* objc.dg/torture/strings/const-str-9.m: Likewise.\n+\t* obj-c++.dg/torture/strings/const-str-9.mm: Likewise.\n+\t* objc.dg/torture/strings/const-str-7.m: Use TestsuiteObject\n+\tinstead of Object. Only add _FooClassReference if\n+\t__NEXT_RUNTIME__.\n+\t* obj-c++.dg/torture/strings/const-str-7.mm: Likewise.\n+\t* objc.dg/torture/strings/const-str-8.m: Likewise.\n+\t* obj-c++.dg/torture/strings/const-str-8.mm: Likewise.\n+\t* obj-c++.dg/torture/strings/string1.mm: Updated includes and\n+\tadditional sources.\n+\t* objc.dg/torture/tls/thr-init-3.m: Use TestsuiteObject instead of\n+\tObject.\n+\t* obj-c++.dg/torture/tls/thr-init-3.mm: Likewise.\n+\t* objc.dg/va-meth-1.m: Use TestsuiteObject instead of Object.\n+\t* obj-c++.dg/va-meth-1.mm: Likewise.\n+\t* objc.dg/zero-link-1.m: Include objc/Object.h instead of\n+\t../objc-obj-c++-shared/Object1.h.\n+\t* objc.dg/zero-link-3.m: Likewise.\t\n+\t\n+2011-06-06  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* obj-c++.dg/try-catch-2.mm: Fixed unterminated comment.\n+\t\n 2011-06-06  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tPR objc-++/48275"}, {"sha": "63d837fb6bcc617a07ea3ae688a52cbee2aaeeeb", "filename": "gcc/testsuite/obj-c++.dg/attributes/categ-attribute-1.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fcateg-attribute-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fcateg-attribute-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fcateg-attribute-1.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n \n #include <objc/objc.h>\n-#include \"../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface obj : Object { \n+@interface obj : TestsuiteObject { \n @public \n   int var; \n } "}, {"sha": "934279ecafd77328503ed3094c40e91208d2e4c4", "filename": "gcc/testsuite/obj-c++.dg/attributes/categ-attribute-2.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fcateg-attribute-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fcateg-attribute-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fcateg-attribute-2.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n \n #include <objc/objc.h>\n-#include \"../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface obj : Object { \n+@interface obj : TestsuiteObject { \n @public \n   int var; \n } "}, {"sha": "60d7822f09bf3a2dbdb4dfbd5ace8339e80d9b57", "filename": "gcc/testsuite/obj-c++.dg/attributes/method-attribute-1.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-1.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n \n #include <objc/objc.h>\n-#include \"../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface obj : Object {\n+@interface obj : TestsuiteObject {\n @public \n   int var; \n } "}, {"sha": "90369cc66c0169430953edc871065872d7bc4130", "filename": "gcc/testsuite/obj-c++.dg/attributes/method-attribute-2.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-2.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n \n #include <objc/objc.h>\n-#include \"../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface obj : Object {\n+@interface obj : TestsuiteObject {\n @public \n   int var; \n } "}, {"sha": "3993c5f17653a45e3f52f9d89dc33186a7840a63", "filename": "gcc/testsuite/obj-c++.dg/attributes/method-attribute-3.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-3.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n \n-#include \"../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface obj : Object {\n+@interface obj : TestsuiteObject {\n @public \n   int var;\n }"}, {"sha": "668be27308d0e8778a421484fb3a2203629ad5a9", "filename": "gcc/testsuite/obj-c++.dg/basic.mm", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbasic.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbasic.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbasic.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,27 +2,10 @@\n // { dg-do run }\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-//#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <iostream>\n \n-#include <objc/Object.h>\n-\n-#ifdef __OBJC2__\n-@interface Object (ADDITIONS)\n-+ initialize;\n-- init;\n-+ alloc;\n-+ new;\n-@end\n-@implementation Object (ADDITIONS)\n-+ initialize  { return self; }\n-- init  { return self; }\n-+ alloc { return class_createInstance (self, 0); }\n-+ new  { return [[self alloc] init]; }\n-@end\n-#endif\n-\n-@interface Greeter : Object\n+@interface Greeter : TestsuiteObject\n - (void) greet: (const char *)msg;\n @end\n \n@@ -38,4 +21,4 @@ - (void) greet: (const char *)msg\n   Greeter *obj = [Greeter new];\n   [obj greet: \"Hello from Objective-C++\"];\n }\n-//#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "92aaae4cfdadf30dbae590395b57e5306bc0d857", "filename": "gcc/testsuite/obj-c++.dg/bitfield-1.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-1.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -9,15 +9,15 @@ were defined at once (i.e., any padding introduced for\n \n /* Leave blank lines here to keep warnings on the same lines.  */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <objc/objc.h>\n #include <stdlib.h>\n \n #define CHECK_IF(expr) if(!(expr)) abort()\n \n enum Enum { zero, one, two, three, four };\n \n-@interface Base: Object {\n+@interface Base: TestsuiteObject {\n @public\n   unsigned a: 2;\n   int b: 3;"}, {"sha": "e88811ee5b72a193a6f7be6855b02ebf6a578702", "filename": "gcc/testsuite/obj-c++.dg/bitfield-2.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-2.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,12 +4,12 @@\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdlib.h>\n \n #define CHECK_IF(expr) if(!(expr)) abort();\n \n-@interface Base: Object \n+@interface Base: TestsuiteObject \n {\n     int full;\n     int full2: 32;\n@@ -77,4 +77,4 @@ int main(void) {\n \n   return 0;\n }\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "9ffa398989c0e9bab416cb88fc5114b4f3c26105", "filename": "gcc/testsuite/obj-c++.dg/bitfield-4.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-4.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,7 +4,7 @@\n /* { dg-do run } */\n /* { dg-options \"-Wpadded\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n \n #include <stdlib.h>\n #include <string.h>\n@@ -13,7 +13,7 @@\n \n enum Enum { one, two, three, four };\n \n-@interface Base: Object {\n+@interface Base: TestsuiteObject {\n   unsigned a: 2;\n   int b: 3;\n   enum Enum c: 4;"}, {"sha": "9e68c2ba6e5108a99fbd178653b6e045e49a0ed6", "filename": "gcc/testsuite/obj-c++.dg/class-protocol-1.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fclass-protocol-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fclass-protocol-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fclass-protocol-1.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do compile } */\n \n #include <objc/objc.h>\n-#include <objc/objc-api.h>\n+#include \"../objc-obj-c++-shared/runtime.h\"\n \n @protocol MyProto1\n +(void)doItClass1;"}, {"sha": "b95af5de1bc6cf1630f24ea506ff3217f2f8ca07", "filename": "gcc/testsuite/obj-c++.dg/comp-types-11.mm", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-11.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-11.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-11.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,22 +1,22 @@\n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n @protocol Foo\n - (id)meth1;\n - (id)meth2:(int)arg;\n @end\n \n-@interface Derived1: Object\n+@interface Derived1: TestsuiteObject\n @end\n \n-@interface Derived2: Object\n+@interface Derived2: TestsuiteObject\n + (Derived1 *)new;\n @end\n \n id<Foo> func(void) {\n-  Object *o = [Object new];\n-  return o;  /* { dg-warning \"class .Object. does not implement the .Foo. protocol\" } */\n+  TestsuiteObject *o = [TestsuiteObject new];\n+  return o;  /* { dg-warning \"class .TestsuiteObject. does not implement the .Foo. protocol\" } */\n }\n \n @implementation Derived2"}, {"sha": "1585937cb50cbbacb092b203c3668c9b39a342c2", "filename": "gcc/testsuite/obj-c++.dg/comp-types-12.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-12.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-12.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-12.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,10 +1,10 @@\n /* { dg-do compile } */\n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface Derived: Object\n+@interface Derived: TestsuiteObject\n @end\n \n-extern Object* foo(void);\n+extern TestsuiteObject* foo(void);\n static Derived *test(void)\n {\n    Derived *m = foo();   /* { dg-warning \"initialization from distinct Objective\\\\-C type\" } */"}, {"sha": "5e32cfe92338539d40e8d1d81a2daada23a695cb", "filename": "gcc/testsuite/obj-c++.dg/comp-types-13.mm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-13.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-13.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-13.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,14 +1,14 @@\n /* When assigning function pointers, allow for covariant return types\n    and contravariant argument types.  */\n /* { dg-do compile } */\n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n @class Derived;\n \n-Object *ExternFunc (Object *filePath, Object *key);\n-typedef id FuncSignature (Object *arg1, Derived *arg2);\n+TestsuiteObject *ExternFunc (TestsuiteObject *filePath, TestsuiteObject *key);\n+typedef id FuncSignature (TestsuiteObject *arg1, Derived *arg2);\n \n-@interface Derived: Object\n+@interface Derived: TestsuiteObject\n + (void)registerFunc:(FuncSignature *)function;\n @end\n "}, {"sha": "6c571325ad85e1b96215ca8d6616e54514f3f734", "filename": "gcc/testsuite/obj-c++.dg/comp-types-9.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-9.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-9.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-9.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,9 +2,9 @@\n \n /* Another gimplifier ICE... */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface MyView: Object {\n+@interface MyView: TestsuiteObject {\n   int _frame;\n }\n - (void)_finalize;"}, {"sha": "129215087eb0ff4dd27864aed20708b074225835", "filename": "gcc/testsuite/obj-c++.dg/cxx-ivars-1.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-1.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,7 +3,7 @@\n // { dg-options \"-fno-objc-call-cxx-cdtors\" }\n // { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } \n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdlib.h>\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n@@ -17,7 +17,7 @@ void set_values (int _a, int _b = 3) {\n   }\n };\n \n-@interface Manip : Object {\n+@interface Manip : TestsuiteObject {\n   int c;\n   cxx_struct s;   // { dg-warning \"user-defined destructor\" }\n                   // { dg-warning \"constructors and destructors will not be invoked\" \"\" { target *-*-* } 22 }\n@@ -40,4 +40,4 @@ int main (void)\n   [obj manipulate_ivars];\n   [obj free];\n }\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "22ab118df822baa67599dc26f19239a7d03faf0f", "filename": "gcc/testsuite/obj-c++.dg/cxx-ivars-2.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-2.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -6,7 +6,7 @@\n // { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } }\n // { dg-options \"-fobjc-call-cxx-cdtors\" }\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdlib.h>\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n@@ -31,7 +31,7 @@\n   }\n };\n \n-@interface Baz: Object {\n+@interface Baz: TestsuiteObject {\n @public\n   bar aa;\n }\n@@ -76,4 +76,4 @@ int main (void)\n   [foo free];\n   CHECK_IF(!ctor1_called && !ctor2_called && dtor1_called);\n }\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "eb0c377dad9b57811a951f063027ff2baa649ccc", "filename": "gcc/testsuite/obj-c++.dg/cxx-scope-1.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-scope-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-scope-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-scope-1.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,7 +3,7 @@\n \n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdlib.h>\n \n @class Derived;\n@@ -18,7 +18,7 @@\n   return inst[offs];\n }\n \n-@interface Derived: Object {\n+@interface Derived: TestsuiteObject {\n   int value;\n }\n -(id)initWithValue:(int)val;\n@@ -51,4 +51,4 @@ int main(void) {\n \n   return 0;\n }\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "6444ebc3aadb8d35e46e4878b7c842a414c41b50", "filename": "gcc/testsuite/obj-c++.dg/cxx-scope-2.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-scope-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-scope-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-scope-2.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,11 +3,11 @@\n \n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n #include <iostream>\n #include <string>\n \n-@interface iostream: Object\n+@interface iostream: TestsuiteObject\n @end\n \n int main(void) {"}, {"sha": "23ba8f91ef602e468b56d84b9c17cb004d9896db", "filename": "gcc/testsuite/obj-c++.dg/defs.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdefs.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdefs.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdefs.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,13 +3,13 @@\n /* { dg-options \"\" } */\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdlib.h>\n #include <objc/objc.h>\n \n extern \"C\" void abort(void);\n \n-@interface A : Object\n+@interface A : TestsuiteObject\n {\n   @public\n     int a;\n@@ -40,4 +40,4 @@ int main()\n   \n   return 0;\n }\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "4f34644481e4c981bef6d12e5cb44eab5bc51c0a", "filename": "gcc/testsuite/obj-c++.dg/encode-4.mm", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-4.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -16,23 +16,15 @@ to the actual placement of parameters (relative to 'self')\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-#include \"../objc-obj-c++-shared/Object1.h\"\n-#include \"../objc-obj-c++-shared/next-mapping.h\"\n-\n-#ifdef __NEXT_RUNTIME__\n-#define METHOD Method\n-#else\n-#include <objc/objc-api.h>\n-#define METHOD Method_t\n-#define method_get_types(M) (M)->method_types\n-#endif\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n+#include \"../objc-obj-c++-shared/runtime.h\"\n \n #include <stdio.h>\n #include <stdlib.h>\n \n #define CHECK_IF(expr) if(!(expr)) abort()\n \n-@interface Foo: Object\n+@interface Foo: TestsuiteObject\n typedef struct { float x, y; } XXPoint;\n typedef struct { float width, height; } XXSize;\n typedef struct _XXRect { XXPoint origin; XXSize size; } XXRect;\n@@ -74,28 +66,28 @@ -(void) char:(signed char)c float:(float)f double:(double)d long:(long)l {\n \n int main(void) {\n   Foo *foo = [[Foo alloc] init];\n-  Class fooClass = objc_get_class(\"Foo\");\n-  METHOD meth;\n+  Class fooClass = objc_getClass(\"Foo\");\n+  Method meth;\n   const char *string;\n \n-  meth = class_get_instance_method(fooClass, @selector(setRect:withInt:));\n+  meth = class_getInstanceMethod(fooClass, @selector(setRect:withInt:));\n   offs2 = 9999;\n-  sscanf(method_get_types(meth), \"@%u@%u:%u{_XXRect={?=ff}{?=ff}}%ui%u\", &offs1, &offs2, &offs3,\n+  sscanf(method_getTypeEncoding(meth), \"@%u@%u:%u{_XXRect={?=ff}{?=ff}}%ui%u\", &offs1, &offs2, &offs3,\n       &offs4, &offs5);\n   CHECK_IF(!offs2);\n   [foo setRect:my_rect withInt:123];\n \n-  meth = class_get_instance_method(fooClass, @selector(char:float:double:long:));\n+  meth = class_getInstanceMethod(fooClass, @selector(char:float:double:long:));\n   offs2 = 9999;\n   if (sizeof (long) == 8)\n     string = \"v%u@%u:%uc%uf%ud%uq%u\";\n   else\n     string = \"v%u@%u:%uc%uf%ud%ul%u\";\n-  sscanf(method_get_types(meth), string, &offs1, &offs2, &offs3,  \n+  sscanf(method_getTypeEncoding(meth), string, &offs1, &offs2, &offs3,  \n \t &offs4, &offs5, &offs6, &offs7);\n   CHECK_IF(!offs2);\n   [foo char:'c' float:2.3 double:3.5 long:2345L];\n \n   return 0;\n }  \n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "2924e50261161f952f49510265bcd207379c69c2", "filename": "gcc/testsuite/obj-c++.dg/encode-5.mm", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-5.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,26 +2,19 @@\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-#include \"../objc-obj-c++-shared/Object1.h\"\n-#include \"../objc-obj-c++-shared/next-mapping.h\"\n-#include \"../objc-obj-c++-shared/Protocol1.h\"\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include \"../objc-obj-c++-shared/runtime.h\"\n+#include <objc/Protocol.h>\n+\n #ifdef __cplusplus\n #define ProtoBool bool\n #else\n #define ProtoBool _Bool\n #endif\n \n-#ifdef __NEXT_RUNTIME__\n-#define METHOD Method\n-#else\n-#include <objc/objc-api.h>\n-#define METHOD Method_t\n-#define method_get_types(M) (M)->method_types\n-#endif\n-\n-#include <stdio.h>\n-#include <stdlib.h>\n-\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n enum Enum {\n@@ -43,7 +36,7 @@ + (ProtoBool **)getBool:(ObjCBool **)b;\n \n Protocol *proto = @protocol(Proto);\n struct objc_method_description *meth;\n-\n+struct objc_method_description meth_object;\n unsigned totsize, offs0, offs1, offs2, offs3, offs4, offs5, offs6, offs7;\n \n static void scan_initial(const char *pattern) {\n@@ -56,7 +49,9 @@ static void scan_initial(const char *pattern) {\n int main(void) {\n   const char *string;\n \n-  meth = [proto descriptionForInstanceMethod: @selector(char:float:double:unsigned:short:long:)];\n+  meth_object = protocol_getMethodDescription (proto,\n+\t\t   @selector(char:float:double:unsigned:short:long:), YES, YES);\n+  meth = &meth_object;\n   if (sizeof (long) == 8)\n     string = \"v%u@%u:%uc%uf%ud%uI%us%uq%u\";\n   else\n@@ -65,11 +60,16 @@ int main(void) {\n   CHECK_IF(offs3 == offs2 + sizeof(int) && offs4 == offs3 + sizeof(float));\n   CHECK_IF(offs5 == offs4 + sizeof(double) && offs6 == offs5 + sizeof(unsigned));\n   CHECK_IF(offs7 == offs6 + sizeof(int) && totsize == offs7 + sizeof(long));\n-  meth = [proto descriptionForInstanceMethod: @selector(setRect:withBool:withInt:)];\n+  meth_object = protocol_getMethodDescription (proto,\n+\t\t  @selector(setRect:withBool:withInt:), YES, YES);\n+  meth = &meth_object;\n   scan_initial(\"^v%u@%u:%u{_XXRect={?=ff(__XXAngle=II)}{?=dd}^{_XXRect}}%uB%ui%u\");\n   CHECK_IF(offs3 == offs2 + sizeof(XXRect) && offs4 == offs3 + sizeof(int));\n   CHECK_IF(totsize == offs4 + sizeof(int));\n-  meth = [proto descriptionForClassMethod: @selector(getEnum:enum:bool:)];\n+  meth_object = protocol_getMethodDescription (proto,\n+\t\t  @selector(getEnum:enum:bool:), YES, NO);\n+  meth = &meth_object; \n+\n   /* Here we have the complication that 'enum Enum' could be encoded\n      as 'i' on __NEXT_RUNTIME_, and (most likely) as 'I' on the GNU\n      runtime.  So we get the @encode(enum Enum), then put it into the\n@@ -80,16 +80,17 @@ int main(void) {\n     char pattern[1024];\n \n     sprintf (pattern, \"^%s%%u@%%u:%%u^{?=ff(__XXAngle=II)}%%u%s%%uc%%u\",\n-            @encode(enum Enum), @encode(enum Enum));\n+\t     @encode(enum Enum), @encode(enum Enum));\n     scan_initial(pattern);\n   }\n \n-\n   CHECK_IF(offs3 == offs2 + sizeof(XXPoint *) && offs4 == offs3 + sizeof(enum Enum));\n   CHECK_IF(totsize == offs4 + sizeof(int));  /* 'ObjCBool' is really 'char' */\n-  meth = [proto descriptionForClassMethod: @selector(getBool:)];         \n+  meth_object = protocol_getMethodDescription (proto,\n+\t\t  @selector(getBool:), YES, NO);\n+  meth = &meth_object;\n   scan_initial(\"^^B%u@%u:%u^*%u\");\n   CHECK_IF(totsize == offs2 + sizeof(ObjCBool **));\n   return 0;\n }\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "9a1e65f92766ae50d422b759bbe2b6690b63e1bf", "filename": "gcc/testsuite/obj-c++.dg/encode-6.mm", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-6.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-6.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-6.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,11 +3,8 @@\n /* { dg-options \"\" } */\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-#include \"../objc-obj-c++-shared/Object1.h\"\n-#include \"../objc-obj-c++-shared/next-mapping.h\"\n-#ifndef __NEXT_RUNTIME__\n-#include <objc/objc-api.h>\n-#endif\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n+#include \"../objc-obj-c++-shared/runtime.h\"\n \n #include <stdlib.h>\n #include <string.h>\n@@ -28,7 +25,7 @@\n   struct Innermost innermost;\n };\n \n-@interface Int1: Object {\n+@interface Int1: TestsuiteObject {\n   signed char a, b;\n   Int2 *int2;\n   struct Nested nested;\n@@ -47,43 +44,43 @@ @implementation Int1\n @implementation Int2\n @end\n \n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-Ivar *ivar;\n-#else\n+#if defined(__NEXT_RUNTIME__) && !defined(NEXT_OBJC_USE_NEW_INTERFACE)\n struct objc_ivar *ivar;\n+#else\n+Ivar *ivar;\n #endif\n \n static void check_ivar(const char *name, const char *type) {\n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-  CHECK_IF(!strcmp(ivar_getName(*ivar), name));\n-  CHECK_IF(!strcmp(ivar_getTypeEncoding(*ivar), type));\n-#else\n+#if defined(__NEXT_RUNTIME__) && !defined(NEXT_OBJC_USE_NEW_INTERFACE)\n   CHECK_IF(!strcmp(ivar->ivar_name, name));\n   CHECK_IF(!strcmp(ivar->ivar_type, type));\n+#else\n+  CHECK_IF(!strcmp(ivar_getName(*ivar), name));\n+  CHECK_IF(!strcmp(ivar_getTypeEncoding(*ivar), type));\n #endif\n   ivar++;\n }\n \n int main(void) {\n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-  ivar = class_copyIvarList ((Class)objc_get_class(\"Int1\"), NULL);\n+#if defined(__NEXT_RUNTIME__) && !defined(NEXT_OBJC_USE_NEW_INTERFACE)\n+  ivar = ((Class)objc_getClass(\"Int1\"))->ivars->ivar_list;\n #else\n-  ivar = ((Class)objc_get_class(\"Int1\"))->ivars->ivar_list;\n+  ivar = class_copyIvarList ((Class)objc_getClass(\"Int1\"), NULL);\n #endif\n   check_ivar(\"a\", \"c\");\n   check_ivar(\"b\", \"c\");\n   check_ivar(\"int2\", \"@\\\"Int2\\\"\");\n   check_ivar(\"nested\", \n     \"{Nested=\\\"a\\\"f\\\"b\\\"f\\\"next\\\"@\\\"Int1\\\"\\\"innermost\\\"{Innermost=\\\"a\\\"C\\\"b\\\"C\\\"encl\\\"^{Nested}}}\");\n     \n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-  ivar = class_copyIvarList ((Class)objc_get_class(\"Int2\"), NULL);\n+#if defined(__NEXT_RUNTIME__) && !defined(NEXT_OBJC_USE_NEW_INTERFACE)\n+  ivar = ((Class)objc_getClass(\"Int2\"))->ivars->ivar_list;\n #else\n-  ivar = ((Class)objc_get_class(\"Int2\"))->ivars->ivar_list;\n+  ivar = class_copyIvarList ((Class)objc_getClass(\"Int2\"), NULL);\n #endif\n   check_ivar(\"innermost\", \"^{Innermost=CC^{Nested}}\");\n   check_ivar(\"base\", \"@\\\"Int1\\\"\");\n   \n   return 0;\n }\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "74c58ab95c8679815be12ffe6be5f3629f5acfa6", "filename": "gcc/testsuite/obj-c++.dg/encode-7.mm", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-7.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-7.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-7.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -9,21 +9,13 @@ we need to decay the arrays into pointers (as C does).\n \n /* Contributed by Alexander Malmberg <alexander@malmberg.org>  */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n-#include \"../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n+#include \"../objc-obj-c++-shared/runtime.h\"\n #include <stdlib.h>\n #include <stdio.h>\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n-#ifdef __NEXT_RUNTIME__\n-#define METHOD Method\n-#else\n-#include <objc/objc-api.h>\n-#define METHOD Method_t\n-#define method_get_types(M) (M)->method_types\n-#endif\n-\n-@interface Test : Object\n+@interface Test : TestsuiteObject\n { float j; }\n -(void) test2: (int [5])a with: (int [])b;\n -(id) test3: (Test **)b; /* { dg-message \"previous declaration of .\\\\-\\\\(id\\\\)test3:\\\\(Test \\\\*\\\\*\\\\)b.\" } */\n@@ -47,8 +39,8 @@ -(void) test3: (Test [3][4])b {  /* { dg-warning \"conflicting types for .\\\\-\\\\(v\n \n int main(int argc, char **argv)\n {\n-  Class testClass = objc_get_class(\"Test\");\n-  METHOD meth;\n+  Class testClass = objc_getClass(\"Test\");\n+  Method meth;\n \n   cc[0] = [Test new];\n   CHECK_IF (bb[3] == 3);\n@@ -58,16 +50,16 @@ int main(int argc, char **argv)\n   [*c test2: bb with: bb + 5];\n   CHECK_IF (bb[3] == 5);\n \n-  meth = class_get_instance_method(testClass, @selector(test2:with:));\n+  meth = class_getInstanceMethod(testClass, @selector(test2:with:));\n   offs1 = offs2 = offs3 = offs4 = offs5 = offs6 = -1;\n-  sscanf(method_get_types(meth), \"v%d@%d:%d[%di]%d^i%d\", &offs1, &offs2, &offs3,\n+  sscanf(method_getTypeEncoding(meth), \"v%d@%d:%d[%di]%d^i%d\", &offs1, &offs2, &offs3,\n       &offs4, &offs5, &offs6);\n   CHECK_IF (!offs2 && offs4 == 5 && offs3 > 0);\n   CHECK_IF (offs5 == 2 * offs3 && offs6 == 3 * offs3 && offs1 == 4 * offs3);\n   \n-  meth = class_get_instance_method(testClass, @selector(test3:));\n+  meth = class_getInstanceMethod(testClass, @selector(test3:));\n   offs1 = offs2 = offs3 = offs4 = offs5 = offs6 = -1;\n-  sscanf(method_get_types(meth), \"v%d@%d:%d[%d[%d{Test=#f}]]%d\", &offs1, &offs2, &offs3,\n+  sscanf(method_getTypeEncoding(meth), \"v%d@%d:%d[%d[%d{Test=#f}]]%d\", &offs1, &offs2, &offs3,\n       &offs4, &offs5, &offs6);\n   CHECK_IF (!offs2 && offs4 == 3 && offs5 == 4 && offs3 > 0);\n   CHECK_IF (offs6 == 2 * offs3 && offs1 == 3 * offs3);"}, {"sha": "fbce2f2721133002d361bc5269836a9d1c281997", "filename": "gcc/testsuite/obj-c++.dg/except-1.mm", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexcept-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexcept-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexcept-1.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -9,10 +9,10 @@\n \n #include <stdio.h>\n #include <stdlib.h>\n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n \n // ObjectiveC class header\n-@interface ObjCclass : Object {\n+@interface ObjCclass : TestsuiteObject {\n }\n -(void)method1;\n -(void)method2;\n@@ -64,4 +64,3 @@ -(void) method2\n \tabort ();\n }\n \n-#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "c66d39ebca2cd98abe9c1990212e300ee4be232c", "filename": "gcc/testsuite/obj-c++.dg/exceptions-2.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-2.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -9,10 +9,10 @@\n /* This test checks the syntax @catch (...) which catches any\n    exceptions.  Check that code using it runs correctly.  */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdlib.h>\n \n-@interface MyObject : Object\n+@interface MyObject : TestsuiteObject\n @end\n \n @implementation MyObject\n@@ -47,7 +47,7 @@ int main (void)\n   if (test ([MyObject new]) != 5)\n     abort ();\n \n-  if (test ([Object new]) != 6)\n+  if (test ([TestsuiteObject new]) != 6)\n     abort ();\n \n   return 0;"}, {"sha": "03ae9ebd9cc268629d337423a7fd6905d1a61007", "filename": "gcc/testsuite/obj-c++.dg/fix-and-continue-2.mm", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffix-and-continue-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffix-and-continue-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffix-and-continue-2.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -6,18 +6,18 @@\n /* { dg-do assemble { target *-*-darwin* } } */\n /* { dg-options \"-mfix-and-continue\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface Foo: Object\n-+ (Object *)indexableFileTypes;\n+@interface Foo: TestsuiteObject\n++ (TestsuiteObject *)indexableFileTypes;\n @end\n \n @implementation Foo\n-+ (Object *)indexableFileTypes\n++ (TestsuiteObject *)indexableFileTypes\n {\n-  static Object *fileTypes = 0;\n+  static TestsuiteObject *fileTypes = 0;\n   if(!fileTypes) {\n-    fileTypes = [Object new];\n+    fileTypes = [TestsuiteObject new];\n   }\n   return fileTypes;\n }"}, {"sha": "812989a42b2426ce5c1feefa2d56723a2a72c3be", "filename": "gcc/testsuite/obj-c++.dg/fsf-package-0.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffsf-package-0.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffsf-package-0.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffsf-package-0.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,9 +1,8 @@\n /* { dg-do compile } */\n \n-#import \"../objc-obj-c++-shared/Object1.h\"\n-#include <objc/objc-api.h>\n+#import \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface obj : Object\n+@interface obj : TestsuiteObject\n {\n @public\n   int v1;"}, {"sha": "c73cd384c412fc9fc2dba1db45b127b353a23a52", "filename": "gcc/testsuite/obj-c++.dg/gnu-runtime-1.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-runtime-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-runtime-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-runtime-1.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,9 +4,9 @@\n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface FooBar: Object\n+@interface FooBar: TestsuiteObject\n - (void)boo;\n @end\n "}, {"sha": "56e48d791d4d90ba7ed6b1c908c933c45344d30b", "filename": "gcc/testsuite/obj-c++.dg/gnu-runtime-3.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-runtime-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-runtime-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-runtime-3.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,10 +4,10 @@\n /* { dg-do run } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdlib.h>\n \n-@interface FooBar: Object\n+@interface FooBar: TestsuiteObject\n - (void)boo;\n @end\n "}, {"sha": "4501d01a11e605d36771671817b0aa5aa7b035a6", "filename": "gcc/testsuite/obj-c++.dg/isa-field-1.mm", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fisa-field-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fisa-field-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fisa-field-1.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,47 +1,64 @@\n-/* Ensure there are no bizarre difficulties with accessing the 'isa' field of\n-  objects.  This field is named differently between GNU and NeXT runtimes so\n-  accessed via the CLASSPTRFIELD() macro defined in next-mapping.h */\n+/* Ensure there are no bizarre difficulties with accessing the 'isa' field of objects.  */\n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n-#include \"../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n+#include \"../objc-obj-c++-shared/runtime.h\"\n \n-@interface Object (Test)\n+@interface TestsuiteObject (Test)\n - (Class) test1: (id)object;\n @end\n \n-@interface Derived: Object\n+@interface Derived: TestsuiteObject\n - (Class) test2: (id)object;\n @end\n \n-@implementation Object (Test)\n+@implementation TestsuiteObject (Test)\n \n Class test1(id object) {\n-  Class cls = CLASSPTRFIELD(object);\n-  return cls;\n+#ifdef __NEXT_RUNTIME__\n+    Class cls = object->isa;\n+#else\n+    Class cls = object->class_pointer;\n+#endif\n+    return cls;\n }\n - (Class) test1: (id)object {\n-  Class cls = CLASSPTRFIELD(object);\n-  return cls;\n+#ifdef __NEXT_RUNTIME__\n+    Class cls = object->isa;\n+#else\n+    Class cls = object->class_pointer;\n+#endif\n+    return cls;\n }\n \n @end\n \n @implementation Derived\n \n Class test2(id object) {\n-  Class cls = CLASSPTRFIELD(object);\n-  return cls;\n+#ifdef __NEXT_RUNTIME__\n+    Class cls = object->isa;\n+#else\n+    Class cls = object->class_pointer;\n+#endif\n+    return cls;\n }\n - (Class) test2: (id)object {\n-  Class cls = CLASSPTRFIELD(object);\n-  return cls;\n+#ifdef __NEXT_RUNTIME__\n+    Class cls = object->isa;\n+#else\n+    Class cls = object->class_pointer;\n+#endif\n+    return cls;\n }\n \n @end\n \n Class test3(id object) {\n-  Class cls = CLASSPTRFIELD(object);\n-  return cls;\n+#ifdef __NEXT_RUNTIME__\n+    Class cls = object->isa;\n+#else\n+    Class cls = object->class_pointer;\n+#endif\n+    return cls;\n }\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "00b336626bdbe211af977ac152ae994cab69a2ad", "filename": "gcc/testsuite/obj-c++.dg/ivar-list-semi.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fivar-list-semi.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fivar-list-semi.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fivar-list-semi.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,9 +1,9 @@\n /* Allow for an optional semicolon following the ivar block.  */\n /* Contributed by: Ziemowit Laski <zlaski@apple.com>.  */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface Tink : Object {\n+@interface Tink : TestsuiteObject {\n @private\n  unsigned long mCode[4];\n };"}, {"sha": "33879ad17a4c9ae67cf7032146047e7e8beb8700", "filename": "gcc/testsuite/obj-c++.dg/layout-1.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flayout-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flayout-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flayout-1.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,13 +3,13 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wpadded -Wpacked -Wabi\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface Derived1: Object\n+@interface Derived1: TestsuiteObject\n { }\n @end\n \n-@interface Derived2: Object\n+@interface Derived2: TestsuiteObject\n - (id) foo;\n @end\n "}, {"sha": "f1c39b1c340baa94f000b772a3b4aae54a74b922", "filename": "gcc/testsuite/obj-c++.dg/local-decl-1.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flocal-decl-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flocal-decl-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flocal-decl-1.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -5,9 +5,9 @@\n \n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface Sprite: Object {\n+@interface Sprite: TestsuiteObject {\n   int sprite, spree;\n }\n + (void)setFoo:(int)foo;"}, {"sha": "6b969249e06841674218567079c83bf3412b0867", "filename": "gcc/testsuite/obj-c++.dg/lookup-2.mm", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flookup-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flookup-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flookup-2.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdlib.h>\n \n class MyWidget {\n@@ -15,13 +15,13 @@ @protocol MyProto\n - (MyWidget *)widget;\n @end\n \n-@interface Foo: Object\n+@interface Foo: TestsuiteObject\n @end\n \n @interface Bar: Foo <MyProto>\n @end\n \n-@interface Container: Object\n+@interface Container: TestsuiteObject\n + (MyWidget *)elementForView:(Foo *)view;\n @end\n \n@@ -38,7 +38,8 @@ @implementation Container\n + (MyWidget *)elementForView:(Foo *)view\n {\n     MyWidget *widget = 0;\n-    if ([view conformsTo:@protocol(MyProto)]) {\n+    if (class_conformsToProtocol (object_getClass (view),\n+\t\t\t\t  @protocol(MyProto))) {\n         widget = [(Foo <MyProto> *)view widget];\n     }\n     return widget;\n@@ -55,4 +56,3 @@ int main(void) {\n   return 0;\n }\n \n-#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "0c4ce56d3433c0cbc4c03a98543fcda73a48ff64", "filename": "gcc/testsuite/obj-c++.dg/method-10.mm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-10.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-10.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-10.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,17 +3,17 @@\n /* { dg-options \"\" } */\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdlib.h>\n \n #define CHECK_IF(expr) if(!(expr)) abort()\n \n-@interface Int1: Object\n+@interface Int1: TestsuiteObject\n + (int) classMeth;\n - (int) instanceMeth;\n @end\n \n-@interface Int2: Object\n+@interface Int2: TestsuiteObject\n + (int) classMeth;      \n - (int) instanceMeth;\n @end\n@@ -43,4 +43,4 @@ int main(void) {\n   CHECK_IF([(Int1Alias *)int2typedef instanceMeth] == 1697);\n   return 0;\n }\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "29e739a9128f649fbd12ee8b0482a4e7e1ebba4d", "filename": "gcc/testsuite/obj-c++.dg/method-11.mm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-11.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-11.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-11.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -5,16 +5,16 @@\n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-typedef Object ObjectTypedef1;\n+typedef TestsuiteObject ObjectTypedef1;\n typedef ObjectTypedef1 ObjectTypedef2;\n @compatibility_alias ObjectAlias1 ObjectTypedef2;\n @compatibility_alias ObjectAlias2 ObjectAlias1;\n typedef ObjectAlias2 ObjectTypedef3;\n \n void foo(void) {\n-  id obj = [Object new];\n+  id obj = [TestsuiteObject new];\n   obj = [ObjectTypedef1 new];\n   obj = [ObjectTypedef2 new];\n   obj = [ObjectTypedef3 new];\n@@ -23,7 +23,7 @@ void foo(void) {\n }\n \n /* { dg-final { scan-assembler \"_OBJC_ClassRefs_0\"  { target { *-*-darwin* && { ! lp64 } } } } } */\n-/* { dg-final { scan-assembler \"_OBJC_ClassRef_Object\"  { target { *-*-darwin* && { lp64 } } } } } */\n+/* { dg-final { scan-assembler \"_OBJC_ClassRef_TestsuiteObject\"  { target { *-*-darwin* && { lp64 } } } } } */\n /* { dg-final { scan-assembler-not \"_OBJC_ClassRefs_1\" { target { *-*-darwin* && { ! lp64 } } } } } */\n /* { dg-final { scan-assembler-not \"_OBJC_ClassRef_ObjectTypedef\" { target { *-*-darwin* && { lp64 } } } } } */\n /* { dg-final { scan-assembler-not \"_OBJC_ClassRef_ObjectAlias\" { target { *-*-darwin* && { lp64 } } } } } */"}, {"sha": "c1f2a39dfa7f9a31761a6d138c6afd81a57f2a19", "filename": "gcc/testsuite/obj-c++.dg/method-12.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-12.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-12.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-12.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,7 +3,7 @@\n /* { dg-options \"-Wstrict-selector-match\" } */\n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Protocol1.h\"\n+#include <objc/Protocol.h>\n \n @interface Base\n - (unsigned)port;"}, {"sha": "ee167bde36ff75d4c94dc674a4e02db53b4a56a6", "filename": "gcc/testsuite/obj-c++.dg/method-13.mm", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-13.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-13.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-13.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,26 +1,26 @@\n /* Check if finding multiple signatures for a method is handled gracefully.  Author:  Ziemowit Laski <zlaski@apple.com>  */\n /* { dg-options \"-Wstrict-selector-match\" } */\n /* { dg-do compile } */\n-\n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include <objc/objc.h>\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n @interface Class1\n-- (void)setWindow:(Object *)wdw;\n+- (void)setWindow:(TestsuiteObject *)wdw;\n @end\n \n @interface Class2\n - (void)setWindow:(Class1 *)window;\n @end\n \n id foo(void) {\n-  Object *obj = [[Object alloc] init];\n+  TestsuiteObject *obj = [[TestsuiteObject alloc] init];\n   id obj2 = obj;\n-  [obj setWindow:nil];  /* { dg-warning \".Object. may not respond to .\\\\-setWindow:.\" } */\n+  [obj setWindow:nil];  /* { dg-warning \".TestsuiteObject. may not respond to .\\\\-setWindow:.\" } */\n        /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 18 } */\n        /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 18 } */\n        /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 18 } */\n   [obj2 setWindow:nil]; /* { dg-warning \"multiple methods named .\\\\-setWindow:. found\" } */\n-       /* { dg-message \"using .\\\\-\\\\(void\\\\)setWindow:\\\\(Object \\\\*\\\\)wdw.\" \"\" { target *-*-* } 8 } */\n+       /* { dg-message \"using .\\\\-\\\\(void\\\\)setWindow:\\\\(TestsuiteObject \\\\*\\\\)wdw.\" \"\" { target *-*-* } 8 } */\n        /* { dg-message \"also found .\\\\-\\\\(void\\\\)setWindow:\\\\(Class1 \\\\*\\\\)window.\" \"\" { target *-*-* } 12 } */\n \n   return obj;"}, {"sha": "f3cef2565a82e1a4d6f5f4742620a1ce7b998aca", "filename": "gcc/testsuite/obj-c++.dg/method-15.mm", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-15.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-15.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-15.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,10 +3,10 @@\n /* { dg-options \"-Wstrict-selector-match\" } */\n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n @protocol MyObject\n-- (id)initWithData:(Object *)data;\n+- (id)initWithData:(TestsuiteObject *)data;\n @end\n \n @protocol SomeOther\n@@ -17,9 +17,9 @@ @protocol MyCoding\n - (id)initWithData:(id<MyObject, MyCoding>)data;\n @end\n \n-@interface NTGridDataObject: Object <MyCoding>\n+@interface NTGridDataObject: TestsuiteObject <MyCoding>\n {\n-    Object<MyCoding> *_data;\n+    TestsuiteObject<MyCoding> *_data;\n }\n + (NTGridDataObject*)dataObject:(id<MyObject, MyCoding>)data;\n @end\n@@ -32,7 +32,7 @@ + (NTGridDataObject*)dataObject:(id<MyObject, MyCoding>)data\n {\n     NTGridDataObject *result = [[NTGridDataObject alloc] initWithData:data];\n      /* { dg-warning \"multiple methods named .\\\\-initWithData:. found\" \"\" { target *-*-* } 33 } */\n-     /* { dg-message \"using .\\\\-\\\\(id\\\\)initWithData:\\\\(Object \\\\*\\\\)data.\" \"\" { target *-*-* } 9 } */\n+     /* { dg-message \"using .\\\\-\\\\(id\\\\)initWithData:\\\\(TestsuiteObject \\\\*\\\\)data.\" \"\" { target *-*-* } 9 } */\n      /* { dg-message \"also found .\\\\-\\\\(id\\\\)initWithData:\\\\(id <MyObject, MyCoding>\\\\)data.\" \"\" { target *-*-* } 17 } */\n      /* { dg-message \"also found .\\\\-\\\\(id\\\\)initWithData:\\\\(int\\\\)data.\" \"\" { target *-*-* } 13 } */\n "}, {"sha": "3566a652bc23105a0a7f6f25fae99192d469108d", "filename": "gcc/testsuite/obj-c++.dg/method-17.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-17.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-17.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-17.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,14 +4,14 @@ message sends (so that proper C/C++ argument conversions may\n    take place).  */\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdlib.h>\n \n #define CHECK_IF(expr) if(!(expr)) abort()\n \n static double d = 4.5920234e2;\n \n-@interface Foo : Object\n+@interface Foo : TestsuiteObject\n -(void) brokenType: (int)x floatingPoint: (double)y;\n @end\n \n@@ -30,4 +30,4 @@ int main(void)\n \t[foo brokenType: (int)d floatingPoint: d];\n \treturn 0;\n }\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "225becae0f1586ff22f32e135f356dc77960905d", "filename": "gcc/testsuite/obj-c++.dg/method-19.mm", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-19.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-19.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-19.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,12 +4,8 @@\n /* Author: Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-#include \"../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n-\n-#ifndef __NEXT_RUNTIME__\n-#include <objc/objc-api.h>\n-#endif\n+#include \"../objc-obj-c++-shared/runtime.h\"\n \n #include <stdlib.h>\n #include <string.h>\n@@ -47,16 +43,14 @@ - (const char *) method3 { return \"Derived::-method3\"; }\n @end\n \n @implementation Root\n-#ifdef __NEXT_RUNTIME__\n + initialize { return self; }\n-#endif\n - (const char *) method1 { return \"Root::-method1\"; }\n + (const char *) method2 { return \"Root::+method2\"; }\n @end\n \n int main(void)\n {\n-  Class obj = objc_get_class(\"Derived\");\n+  Class obj = objc_getClass(\"Derived\");\n \n   /* None of the following should elicit compiler-time warnings.  */\n \n@@ -75,4 +69,4 @@ int main(void)\n \n   return 0;\n }\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "e4973c34e7df45b11cb61b18e96b247e08ca61e4", "filename": "gcc/testsuite/obj-c++.dg/method-2.mm", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-2.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,7 +4,8 @@\n \n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n+#include \"../objc-obj-c++-shared/runtime.h\"\n \n @class NSString;\n \n@@ -13,19 +14,19 @@ + (void)setUsesUserKeyEquivalents:(BOOL)flag;\n + (BOOL)usesUserKeyEquivalents;\n @end\n \n-@interface NSMenuItem : Object <NSMenuItem> {\n+@interface NSMenuItem : TestsuiteObject <NSMenuItem> {\n   @private\n   id _menu;\n }\n @end\n \n-@interface NSResponder : Object <NSMenuItem>\n+@interface NSResponder : TestsuiteObject <NSMenuItem>\n {\n   id _nextResponder;\n }\n @end\n \n-@interface Object(NSMenuValidation)\n+@interface TestsuiteObject(NSMenuValidation)\n - (BOOL)validateMenuItem:(id <NSMenuItem>)menuItem;\n @end\n "}, {"sha": "d9332beb073347860a7cf5c38d85b9cdaeae5f32", "filename": "gcc/testsuite/obj-c++.dg/method-21.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-21.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-21.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-21.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,9 +2,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wreturn-type -Wextra\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface Foo: Object\n+@interface Foo: TestsuiteObject\n - (id) meth1;\n - (void) meth2;\n @end\n@@ -14,7 +14,7 @@ - (void) meth2;\n @implementation Foo\n - (id) meth1 {\n   if (bar)\n-    return [Object new];\n+    return [TestsuiteObject new];\n   return; /* { dg-error \"return.statement with no value\" } */\n }\n - (void) meth2 {"}, {"sha": "587f3bbb9a3e462a8ec863cbe9f52a68a843d9ce", "filename": "gcc/testsuite/obj-c++.dg/method-22.mm", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-22.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-22.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-22.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,15 +1,14 @@\n /* Ensure that overload resolution does not produce warnings as\n    side-effects.  */\n /* { dg-do run } */\n-/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.mm\" } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdlib.h>\n \n #define CHECK_IF(E) if(!(E)) abort ()\n \n-@interface MyCursor: Object\n+@interface MyCursor: TestsuiteObject\n + (MyCursor *)crosshairCursor;\n @end\n "}, {"sha": "de8de844c45172ece21e3a442809b61847a6dbc4", "filename": "gcc/testsuite/obj-c++.dg/method-23.mm", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-23.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-23.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-23.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,10 +2,9 @@\n    they should.  */\n /* { dg-do run } */\n /* { dg-options \"-O2\" } */\n-/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.mm\" } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <string.h>\n #include <stdlib.h>\n \n@@ -19,7 +18,7 @@\n typedef char io_string_t[512];\n typedef char *(func_type)(const char *);\n \n-@interface DeviceObject: Object\n+@interface DeviceObject: TestsuiteObject\n - (void) func:(func_type)func stucPathInIORegistry:(io_string_t)ioRegPath;\n @end\n @implementation DeviceObject"}, {"sha": "9cc99995bde667f2e23af1c07cfc3682bc3034d8", "filename": "gcc/testsuite/obj-c++.dg/method-6.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-6.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-6.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-6.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,7 +3,7 @@\n \n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n @class NotKnown;\n "}, {"sha": "815ee789e412883508270bb251b2345f2400d4b9", "filename": "gcc/testsuite/obj-c++.dg/no-extra-load.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fno-extra-load.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fno-extra-load.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fno-extra-load.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,10 +2,10 @@\n \n // { dg-do compile }\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n #include <iostream>\n \n-@interface Greeter : Object\n+@interface Greeter : TestsuiteObject\n - (void) greet: (const char *)msg;\n @end\n "}, {"sha": "430e5832eb6c02e5be2d250be227f4cf2a827cf8", "filename": "gcc/testsuite/obj-c++.dg/objc-gc-3.mm", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fobjc-gc-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fobjc-gc-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fobjc-gc-3.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -6,11 +6,12 @@\n /* { dg-options \"-fobjc-gc\" } */\n /* { dg-prune-output \"cc1objplus: warning: '-fobjc-gc' is ignored for '-fgnu-runtime'\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n+#include \"../objc-obj-c++-shared/runtime.h\"\n \n @class MyWindow;\n \n-@interface MyDocument : Object {\n+@interface MyDocument : TestsuiteObject {\n     MyWindow *_window;\n }\n @end\n@@ -29,7 +30,7 @@ @interface MyFileDocument : MyDocument {\n @end\n \n @interface MyTextFileDocument : MyFileDocument {\n-    Object *_textStorage;\n+    TestsuiteObject *_textStorage;\n     struct __tfdFlags {\n         unsigned int immutable:1;\n         unsigned int lineEnding:2;"}, {"sha": "57a171337c6209538924b496525867466cf50577", "filename": "gcc/testsuite/obj-c++.dg/property/property-1.mm", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-1.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,11 +1,10 @@\n /* This program tests use of property provided setter/getter functions. */\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-/* { dg-additional-sources \"../../objc-obj-c++-shared/Object1.mm\" } */\n \n-#import \"../../objc-obj-c++-shared/Object1.h\"\n+#import \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n-@interface Bar : Object\n+@interface Bar : TestsuiteObject\n {\n   int iVar;\n }"}, {"sha": "c1447ca85db2bbe3e3a87a5782e305bf1fb7ae70", "filename": "gcc/testsuite/obj-c++.dg/proto-lossage-2.mm", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-2.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,13 +2,14 @@\n    provide a suitable method.  */\n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n+#include <objc/objc.h>\n \n @protocol Zot\n -(void) zot;\n @end\n \n-@interface Foo : Object <Zot>\n+@interface Foo : TestsuiteObject <Zot>\n @end\n \n int foo()"}, {"sha": "9c08f07e4d9702eda3a8114f273540e4985d920d", "filename": "gcc/testsuite/obj-c++.dg/proto-lossage-3.mm", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-3.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,10 +3,12 @@\n    Problem report and original fix by richard@brainstorm.co.uk.  */\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.mm\" } */\n+#include <objc/Protocol.h>\n+#include \"../objc-obj-c++-shared/runtime.h\"\n \n-#include \"../objc-obj-c++-shared/next-mapping.h\"\n-#include \"../objc-obj-c++-shared/Protocol1.h\"\n+@interface MyClass\n+- name;\n+@end\n \n @protocol NoInstanceMethods\n + testMethod;\n@@ -19,16 +21,9 @@ @protocol NoClassMethods\n int\n main()\n {\n-#ifdef __OBJC2__\n-protocol_getMethodDescription(@protocol(NoInstanceMethods), @selector(name), NO, YES);\n-protocol_getMethodDescription(@protocol(NoInstanceMethods), @selector(name), NO, NO);\n-protocol_getMethodDescription(@protocol(NoClassMethods), @selector(name), NO, YES);\n-protocol_getMethodDescription(@protocol(NoClassMethods), @selector(name), NO, NO);\n-#else\n-[@protocol(NoInstanceMethods) descriptionForInstanceMethod: @selector(name)];\n-[@protocol(NoInstanceMethods) descriptionForClassMethod: @selector(name)];\n-[@protocol(NoClassMethods) descriptionForInstanceMethod: @selector(name)];\n-[@protocol(NoClassMethods) descriptionForClassMethod: @selector(name)];\n-#endif\n+protocol_getMethodDescription (@protocol(NoInstanceMethods), @selector(name), YES, YES);\n+protocol_getMethodDescription (@protocol(NoInstanceMethods), @selector(name), YES, NO);\n+protocol_getMethodDescription (@protocol(NoClassMethods), @selector(name), YES, YES);\n+protocol_getMethodDescription (@protocol(NoClassMethods), @selector(name), YES, NO);\n return 0;\n }"}, {"sha": "7ef0e9a98ef570902ab52c03f42d8cc1322ce187", "filename": "gcc/testsuite/obj-c++.dg/proto-qual-1.mm", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-qual-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-qual-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-qual-1.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -6,10 +6,7 @@\n \n #include <stdio.h>\n #include <stdlib.h>\n-#ifndef __NEXT_RUNTIME__\n-#include <objc/objc-api.h>\n-#endif\n-#include \"../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../objc-obj-c++-shared/runtime.h\"\n #include <objc/Protocol.h>\n \n /* The encoded parameter sizes will be rounded up to match pointer alignment.  */\n@@ -34,9 +31,7 @@ - (bycopy) address:(byref inout id)location with:(out short unsigned **)arg2 { r\n \n Protocol *proto;\n struct objc_method_description *meth;\n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n struct objc_method_description meth_object;\n-#endif\n unsigned totsize, offs0, offs1, offs2, offs3, offs4, offs5, offs6, offs7;\n \n static void scan_initial(const char *pattern) {\n@@ -48,22 +43,18 @@ static void scan_initial(const char *pattern) {\n \n int main(void) {\n   proto = @protocol(Retain);\n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-  meth_object = protocol_getMethodDescription (proto, @selector(address:with:),\n-\t\t\t\t\t\tYES, YES);\n+\n+  meth_object = protocol_getMethodDescription (proto,\n+\t\t  @selector(address:with:), YES, YES);\n   meth = &meth_object;\n-#else\n-  meth = [proto descriptionForInstanceMethod: @selector(address:with:)];\n-#endif\n+\n   scan_initial(\"O@%u@%u:%uNR@%uo^^S%u\");\n   CHECK_IF(offs3 == offs2 + aligned_sizeof(id) && totsize == offs3 + aligned_sizeof(unsigned));\n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-  meth_object = protocol_getMethodDescription (proto,  @selector(retainArgument:with:),\n-\t\t\t\t\t\tYES, NO);\n+\n+  meth_object = protocol_getMethodDescription (proto,\n+\t\t  @selector(retainArgument:with:), YES, NO);\n   meth = &meth_object;\n-#else\n-  meth = [proto descriptionForClassMethod: @selector(retainArgument:with:)];\n-#endif\n+\n   scan_initial(\"Vv%u@%u:%uOo@%un^*%u\");\n   CHECK_IF(offs3 == offs2 + aligned_sizeof(id) && totsize == offs3 + aligned_sizeof(char **));\n   return 0;"}, {"sha": "dd0eb42bc4f00528b5931fd905c3f01ccd49217e", "filename": "gcc/testsuite/obj-c++.dg/qual-types-1.mm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fqual-types-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fqual-types-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fqual-types-1.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,7 +4,7 @@\n \n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdlib.h>\n \n #define CHECK_IF(expr) if(!(expr)) abort()\n@@ -19,7 +19,7 @@ @protocol Init <Zone>\n - init; \n @end\n \n-@interface Foo: Object\n+@interface Foo: TestsuiteObject\n { @public int val; }\n - init;\n @end\n@@ -37,7 +37,7 @@ @interface Foo: Object\n   Holder(void) { obj = [[T alloc] init]; }\n   ~Holder(void) { [obj free]; --counter; }\n   id <Init, Zone> getObjId(void) { return obj; }\n-  Object <Zone, Init> *getObj(void) { return obj; }\n+  TestsuiteObject <Zone, Init> *getObj(void) { return obj; }\n };\n \n typedef Holder <Foo <Init, Zone> > FooHolder;\n@@ -66,4 +66,4 @@ int main (void) {\n   CHECK_IF(FooHolder::counter == 0);\n   return 0;\n }\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "840ee19fee480663a4ec09836f4886175fc5d503", "filename": "gcc/testsuite/obj-c++.dg/selector-2.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fselector-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fselector-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fselector-2.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-Wselector\" } */\n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include <objc/objc.h>\n \n @interface Foo\n @end"}, {"sha": "64e82200da8d3094cbfcafbbcb9ebbb552a28931", "filename": "gcc/testsuite/obj-c++.dg/selector-5.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fselector-5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fselector-5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fselector-5.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,7 +1,7 @@\n /* { dg-options \"\" } */\n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include <objc/objc.h>\n \n int main()\n {"}, {"sha": "9ec37fa8e9173f6225da3486e2a7e517d88a5ef5", "filename": "gcc/testsuite/obj-c++.dg/selector-6.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fselector-6.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fselector-6.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fselector-6.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,7 +1,7 @@\n /* { dg-options \"\" } */\n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include <objc/objc.h>\n \n int main()\n {"}, {"sha": "21ce962e8166f231d0555b63c1462cf425a18aaa", "filename": "gcc/testsuite/obj-c++.dg/set-not-used-1.mm", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fset-not-used-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fset-not-used-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fset-not-used-1.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,18 +2,17 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wunused-but-set-variable\" } */\n \n-#import \"../objc-obj-c++-shared/Object1.h\"\n-#include <objc/objc-api.h>\n+#import \"../objc-obj-c++-shared/TestsuiteObject.m\"\n \n-@interface obj : Object\n+@interface obj : TestsuiteObject\n {\n   int value;\n }\n - (int) value;\n - (void) setValue: (int)number;\n @end\n \n-@implementation obj : Object\n+@implementation obj : TestsuiteObject\n \n - (int) value { return value; }\n - (void) setValue: (int)number { value = number; }"}, {"sha": "430ab5db2d60d849264c6ea2f6460497709cb7f9", "filename": "gcc/testsuite/obj-c++.dg/strings/const-str-12.mm", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-str-12.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-str-12.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-str-12.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -5,7 +5,8 @@\n /* { dg-options \"-fconstant-string-class=Foo\" } */\n /* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=Foo\" { target *-*-darwin* } } */\n \n-#include \"../../objc-obj-c++-shared/Object1.h\"\n+#include <objc/Object.h>\n+#include \"../../objc-obj-c++-shared/objc-test-suite-types.h\"\n \n @interface Foo: Object {\n   char *cString;\n@@ -18,11 +19,7 @@ @interface Bar: Object\n + (Foo *) getString: (int) which;\n @end\n \n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-Class _FooClassReference;\n-#else\n-struct objc_class _FooClassReference;\n-#endif\n+TNS_STRING_REF_T _FooClassReference;  /* Only used by NeXT.  */\n \n @implementation Bar\n + (Foo *) getString: (int) which {"}, {"sha": "408392fd5a069a93d9b24dd6368d0203d2297eee", "filename": "gcc/testsuite/obj-c++.dg/strings/strings-1.mm", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fstrings-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fstrings-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fstrings-1.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,7 @@\n /* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n /* { dg-do compile } */\n \n-#include \"../../objc-obj-c++-shared/Object1.h\"\n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../../objc-obj-c++-shared/runtime.h\"\n #ifndef __NEXT_RUNTIME__\n #include <objc/NXConstStr.h>\n #endif\n@@ -30,4 +29,4 @@\n id test_invalid8          = @\"te\" @@\"s\" @\"t\";    /* { dg-error \"repeated .@. before Objective-C string\" } */\n id test_invalid9          = @\"te\" @\"s\" @\"t\" @;   /* { dg-error \"stray .@. in program\" } */\n id test_invalidA          = @\"te\" @ st;          /* { dg-error \"stray .@. in program\" } */\n-                                                 /* { dg-error \"expected\" \"\" { target *-*-* } 32 } */\n+                                                 /* { dg-error \"expected\" \"\" { target *-*-* } 31 } */"}, {"sha": "efc72b8192781baa0bce183344d9783bd38da016", "filename": "gcc/testsuite/obj-c++.dg/super-class-2.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsuper-class-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsuper-class-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsuper-class-2.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,11 +4,11 @@\n \n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n @class MyWpModule;\n \n-@compatibility_alias MyObject Object;\n+@compatibility_alias MyObject TestsuiteObject;\n @compatibility_alias FictitiousModule MyWpModule;\n \n @protocol MySelTarget"}, {"sha": "c73bbd92fbc728d1ae18253bee16c90c64177174", "filename": "gcc/testsuite/obj-c++.dg/sync-2.mm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsync-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsync-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsync-2.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,13 +1,13 @@\n /* Make sure that @synchronized parses and a very basic test runs.  */\n /* { dg-options \"-fobjc-exceptions -fgnu-runtime\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n int main (void)\n {\n-  Object *a = [Object new];\n-  Object *b = [Object new];\n-  Object *c = [Object new];\n+  TestsuiteObject *a = [TestsuiteObject new];\n+  TestsuiteObject *b = [TestsuiteObject new];\n+  TestsuiteObject *c = [TestsuiteObject new];\n \n   /* This single-threaded test just checks that @synchronized() uses a\n      recursive mutex, and that the runtime at least doesn't crash"}, {"sha": "434c52707c5a1b5623cf7bb0a6020fdcc1dba7a1", "filename": "gcc/testsuite/obj-c++.dg/template-1.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-1.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,12 +3,12 @@\n \n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdlib.h>\n \n #define CHECK_IF(expr) if(!(expr)) abort()\n \n-@interface Base: Object\n+@interface Base: TestsuiteObject\n - (int) meth;\n @end\n \n@@ -47,4 +47,4 @@ int main (void) {\n   CHECK_IF(count == 0);\n   return 0;\n }\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "c564733cf7405c6ad8383792be28587285416248", "filename": "gcc/testsuite/obj-c++.dg/template-3.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-3.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,12 +4,12 @@\n \n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdlib.h>\n \n #define CHECK_IF(expr) if(!(expr)) abort()\n \n-@interface ObjCClass : Object\n+@interface ObjCClass : TestsuiteObject\n {\n @public\n   int info;\n@@ -78,4 +78,4 @@ int main(void) {\n   \n   return 0;\n }\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "5301df5c0e0a6ee89913ba4b2983739f824dc103", "filename": "gcc/testsuite/obj-c++.dg/template-4.mm", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftemplate-4.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n /* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n-/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.mm ../objc-obj-c++-shared/nsconstantstring-class-impl.mm\" } */\n+/* { dg-additional-sources \"../objc-obj-c++-shared/nsconstantstring-class-impl.mm\" } */\n \n #include <stdarg.h>\n #include <stdlib.h>\n@@ -15,8 +15,8 @@\n #include \"../objc-obj-c++-shared/nsconstantstring-class.h\"\n #endif\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n-#include \"../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n+#include \"../objc-obj-c++-shared/runtime.h\"\n \n #define CHECK_IF(expr) if(!(expr)) abort()\n \n@@ -42,7 +42,7 @@ int abc(TYPE *xyz, Array *array) {\n   return [xyz count] + [array count];\n }\n \n-@interface Array: Object {\n+@interface Array: TestsuiteObject {\n   id *arr;\n   int count;\n }\n@@ -72,7 +72,7 @@ - (int)count {\n @end\n \n int main(void) {\n-  CHECK_IF(!strcmp ([@\"Object\" cString], getDesc<Object>()));\n+  CHECK_IF(!strcmp ([@\"TestsuiteObject\" cString], getDesc<TestsuiteObject>()));\n   CHECK_IF(!strcmp ([@\"Array\" cString], getDesc<Array>()));\n \n   Array* a1 = [Array arrayWithObjects:@\"One\", @\"Two\", @\"Three\", nil];"}, {"sha": "c48181049f1f5579d49818f49d82573114e1635c", "filename": "gcc/testsuite/obj-c++.dg/threedotthree-abi-1.mm", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fthreedotthree-abi-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fthreedotthree-abi-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fthreedotthree-abi-1.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -6,14 +6,10 @@\n \n #include <stdio.h>\n #include <string.h>\n-#include \"../objc-obj-c++-shared/Protocol1.h\"\n-#ifndef __NEXT_RUNTIME__\n-#include <objc/objc-api.h>\n-#endif\n+#include \"../objc-obj-c++-shared/runtime.h\"\n \n extern \"C\" void abort();\n \n-\n @protocol CommonProtocol\n \n -(oneway void)methodCall_On:(in bycopy id)someValue_On;\n@@ -48,25 +44,32 @@ -(oneway void)methodCall_oOn:(in bycopy out id)someValue_oOn { }\n \n Protocol *proto = @protocol(CommonProtocol);\n struct objc_method_description *meth;\n+struct objc_method_description meth_object;\n \n int main()\n {\n-        meth = [proto descriptionForInstanceMethod: @selector(methodCall_On:)];\n+        meth_object = protocol_getMethodDescription (proto, @selector(methodCall_On:), YES, YES);\n+        meth = &meth_object;\n \tif (strcmp (meth->types, \"Vv12@0:4On@8\"))\n \t  abort();\n-        meth = [proto descriptionForInstanceMethod: @selector(methodCall_nO:)];\n+        meth_object = protocol_getMethodDescription (proto, @selector(methodCall_nO:), YES, YES);\n+        meth = &meth_object;\n \tif (strcmp (meth->types, \"Vv12@0:4nO@8\"))\n \t  abort();\n-        meth = [proto descriptionForInstanceMethod: @selector(methodCall_Oo:)];\n+        meth_object = protocol_getMethodDescription (proto, @selector(methodCall_Oo:), YES, YES);\n+        meth = &meth_object;\n \tif (strcmp (meth->types, \"Vv12@0:4Oo@8\"))\n \t  abort();\n-        meth = [proto descriptionForInstanceMethod: @selector(methodCall_oO:)];\n+        meth_object = protocol_getMethodDescription (proto, @selector(methodCall_oO:), YES, YES);\n+        meth = &meth_object;\n \tif (strcmp (meth->types, \"Vv12@0:4oO@8\"))\n \t  abort();\n-        meth = [proto descriptionForInstanceMethod: @selector(methodCall_rn:)];\n+        meth_object = protocol_getMethodDescription (proto, @selector(methodCall_rn:), YES, YES);\n+        meth = &meth_object;\n \tif (strcmp (meth->types, \"Vv12@0:4rn@8\"))\n \t  abort();\n-        meth = [proto descriptionForInstanceMethod: @selector(methodCall_oOn:)];\n+        meth_object = protocol_getMethodDescription (proto, @selector(methodCall_oOn:), YES, YES);\n+        meth = &meth_object;\n \tif (strcmp (meth->types, \"Vv12@0:4oOn@8\"))\n \t  abort();\n \treturn 0;"}, {"sha": "cba188b70e365735b6d46a2eae5150a4f6156782", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/const-str-10.mm", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-10.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-10.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-10.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -6,7 +6,8 @@\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n \n-#include \"../../../objc-obj-c++-shared/Object1.h\"\n+#include <objc/Object.h>\n+#include \"../../../objc-obj-c++-shared/runtime.h\" /* For NEXT_OBJC_USE_NEW_INTERFACE.  */\n \n @interface NSString: Object\n @end"}, {"sha": "c54f89bd8c8f62a1ed57d6f9fa9368f3d014e029", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/const-str-11.mm", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-11.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-11.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-11.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -7,7 +7,8 @@\n /* { dg-options \"-fconstant-string-class=XStr\" } */\n /* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=XStr\" { target *-*-darwin* } } */\n \n-#include \"../../../objc-obj-c++-shared/Object1.h\"\n+#include <objc/Object.h>\n+#include \"../../../objc-obj-c++-shared/runtime.h\" /* For NEXT_OBJC_USE_NEW_INTERFACE.  */\n \n @interface XString: Object {\n @protected"}, {"sha": "a44845b0462a83cf3e7838dc4d79cdde270d03f4", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/const-str-7.mm", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-7.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-7.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-7.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -5,28 +5,29 @@\n /* { dg-do run } */\n /* { dg-options \"-fconstant-string-class=Foo\" } */\n /* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=Foo\" { target *-*-darwin* } } */\n-/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.mm\" } */\n \n-#include \"../../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdio.h>\n #include <stdlib.h>\n #include <string.h>\n #include <objc/objc.h>\n \n-@interface Foo: Object {\n+@interface Foo: TestsuiteObject {\n   char *cString;\n   unsigned int len;\n }\n - (char *)customString;\n @end\n \n+#ifdef __NEXT_RUNTIME__\n #ifdef NEXT_OBJC_USE_NEW_INTERFACE\n Class  _FooClassReference;\n #else\n struct objc_class _FooClassReference;\n #endif\n+#endif\n \n-@implementation Foo : Object\n+@implementation Foo : TestsuiteObject\n - (char *)customString {\n   return cString;\n }"}, {"sha": "1949a6e65235debdfb37d5aff350b49ef390d6de", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/const-str-8.mm", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-8.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-8.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-8.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,24 +4,25 @@\n /* { dg-do run { target *-*-darwin* } } */\n /* { dg-options \"-fconstant-string-class=Foo\" } */\n /* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=Foo\" { target *-*-darwin* } } */\n-/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.mm\" } */\n \n-#include \"../../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdlib.h>\n \n-@interface Foo: Object {\n+@interface Foo: TestsuiteObject {\n   char *cString;\n   unsigned int len;\n }\n @end\n \n+#ifdef __NEXT_RUNTIME__\n #ifdef NEXT_OBJC_USE_NEW_INTERFACE\n Class _FooClassReference;\n #else\n struct objc_class _FooClassReference;\n #endif\n+#endif\n \n-@implementation Foo : Object\n+@implementation Foo : TestsuiteObject\n - (char *)customString {\n   return cString;\n }"}, {"sha": "b4f15fdcdd606be5a486e6f98719d82fe4ab9b5f", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/const-str-9.mm", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-9.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-9.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-9.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -5,7 +5,8 @@\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n \n-#include \"../../../objc-obj-c++-shared/Object1.h\"\n+#include <objc/Object.h>\n+#include \"../../../objc-obj-c++-shared/runtime.h\" /* For NEXT_OBJC_USE_NEW_INTERFACE.  */\n \n @interface NSConstantString: Object {\n   char *cString;"}, {"sha": "e76eaa244da132f8ca29824fc1d5eb99b03b7b13", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/string1.mm", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fstring1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fstring1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fstring1.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,10 +3,7 @@\n /* { dg-do run } */\n /* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.mm ../../../objc-obj-c++-shared/nsconstantstring-class-impl.mm\" } */\n-\n-#include \"../../../objc-obj-c++-shared/Object1.h\"\n-#include \"../../../objc-obj-c++-shared/next-mapping.h\"\n+/* { dg-additional-sources \"../../../objc-obj-c++-shared/nsconstantstring-class-impl.mm\" } */\n \n #include <string.h>\n #include <stdlib.h>"}, {"sha": "a3d66089e31ac7621c3d477fab12cca7d3846050", "filename": "gcc/testsuite/obj-c++.dg/torture/tls/thr-init-3.mm", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fthr-init-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fthr-init-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fthr-init-3.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,14 +2,13 @@\n /* { dg-require-effective-target tls } */\n /* { dg-add-options tls } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.mm\" } */\n \n-#include \"../../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../../objc-obj-c++-shared/TestsuiteObject.m\"\n extern \"C\" {\n extern void abort ();\n }\n \n-@interface tsObj: Object {\n+@interface tsObj: TestsuiteObject {\n   int ai ;\n }\n "}, {"sha": "85f675144306954148f955d9d2a2005b7901bf90", "filename": "gcc/testsuite/obj-c++.dg/torture/trivial.mm", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftrivial.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftrivial.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftrivial.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,12 +1,11 @@\n // { dg-do run }\n \n // { dg-xfail-run-if \"OBJC2 runtime\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\"  } { \"-fgnu-runtime\" } }\n-// { dg-additional-sources \"../../objc-obj-c++-shared/Object1.mm\" }\n \n-#import \"../../objc-obj-c++-shared/Object1.h\"\n+#import \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n int main(void)\n {\n-  [Object class];\n+  [TestsuiteObject class];\n   return 0;\n }"}, {"sha": "cbdace62d43ccad1af98ef85dbbd3207246e691b", "filename": "gcc/testsuite/obj-c++.dg/try-catch-1.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-1.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,14 +4,14 @@\n /* { dg-options \"-fobjc-exceptions\" } */\n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n #include <stdio.h>\n #include <setjmp.h>\n \n-@interface Frob: Object\n+@interface Frob: TestsuiteObject\n @end\n \n-@implementation Frob: Object\n+@implementation Frob: TestsuiteObject\n @end\n \n static int exc_control = 0;"}, {"sha": "320185fe0b3411f90744587b18c7c3377a64436d", "filename": "gcc/testsuite/obj-c++.dg/try-catch-11.mm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-11.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-11.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-11.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,7 +4,7 @@ local objects (other than their volatile bits).  */\n /* { dg-options \"-fobjc-exceptions\" } */\n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n @protocol Proto1\n - (int)meth1;\n@@ -14,11 +14,11 @@ @protocol Proto2\n - (int)meth2;\n @end\n \n-@interface MyClass: Object <Proto2> {\n+@interface MyClass: TestsuiteObject <Proto2> {\n   int a;\n }\n - (int)meth2;\n-- (Object *)parm1: (id)p1 parm2: (id<Proto1>)p2;\n+- (TestsuiteObject *)parm1: (id)p1 parm2: (id<Proto1>)p2;\n @end\n \n MyClass *mc1, *mc2;\n@@ -27,7 +27,7 @@ @implementation MyClass\n - (int)meth2 {\n   return a;\n }\n-- (Object *)parm1: (id)p1 parm2: (id<Proto1>)p2 {\n+- (TestsuiteObject *)parm1: (id)p1 parm2: (id<Proto1>)p2 {\n   @try {\n     mc2 = p2;   /* { dg-warning \"type .id <Proto1>. does not conform to the .Proto2. protocol\" } */\n   }"}, {"sha": "d214fa70d9abb92f11bdffbba14b50eaf1bdbc3c", "filename": "gcc/testsuite/obj-c++.dg/try-catch-2.mm", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-2.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,10 +4,10 @@\n \n /* { dg-do run } */\n /* { dg-xfail-run-if \"PR23616\" { *-*-* } { \"-fgnu-runtime\" } { \"-fnext-runtime\" } } */\n-/* { dg-xfail-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" \"-fgnu-runtime\" } { \"\" } } \n+/* { dg-xfail-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-options \"-fobjc-exceptions\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdio.h>\n #include <stdlib.h>\n \n@@ -18,18 +18,18 @@\n \n #define CHECK_IF(expr) if(!(expr)) abort()\n \n-@interface Frob: Object\n+@interface Frob: TestsuiteObject\n @end\n \n-@implementation Frob: Object\n+@implementation Frob: TestsuiteObject\n @end\n \n static Frob* _connection = nil;\n \n //--------------------------------------------------------------------\n \n \n-void test (Object* sendPort)\n+void test (TestsuiteObject* sendPort)\n {\n   int cleanupPorts = 1;\n   Frob* receivePort = nil;\n@@ -56,7 +56,7 @@ void test (Object* sendPort)\n     printf (\"cleanupPorts = %d\\n\", cleanupPorts);\n     printf (\"---\\n\");\t\t\n \t\t\n-    @throw [Object new];\n+    @throw [TestsuiteObject new];\n   }\n   @catch(Frob *obj) {\n     printf (\"Exception caught by incorrect handler!\\n\");\n@@ -75,7 +75,7 @@ void test (Object* sendPort)\n }\n \n int main (void) {\n-  test((Object *)-1);\n+  test((TestsuiteObject *)-1);\n   return 0;\n }\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "b0822d3d7c7d342fde9b09cf7e6c45f0b74c97a3", "filename": "gcc/testsuite/obj-c++.dg/try-catch-3.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-3.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -5,14 +5,14 @@\n /* { dg-do compile } */\n /* { dg-options \"-fobjc-exceptions\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n const char *foo(void)\n {\n   @try {\n     return \"foo\";\n   }\n-  @catch (Object* theException) {\n+  @catch (TestsuiteObject* theException) {\n     return [theException name];\n   }\n }"}, {"sha": "ecab4e6e366cd20012e47f99dd257772300332fe", "filename": "gcc/testsuite/obj-c++.dg/try-catch-7.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-7.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-7.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-7.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,17 +1,17 @@\n /* { dg-do compile } */\n /* { dg-options \"-fobjc-exceptions\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n int main (int argc, const char * argv[]) {\n-  Object * pool = [Object new];\n+  TestsuiteObject * pool = [TestsuiteObject new];\n   int a;\n \n   if ( 1 ) {\n     @try {\n       a = 1;\n     }\n-    @catch (Object *e) {\n+    @catch (TestsuiteObject *e) {\n       a = 2;\n     }\n     @finally {"}, {"sha": "7adf2f9e3262ce55504ccea3740571a196f4fa56", "filename": "gcc/testsuite/obj-c++.dg/try-catch-8.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-8.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-8.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-8.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,9 +3,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-fobjc-exceptions\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface Derived: Object\n+@interface Derived: TestsuiteObject\n - (id) meth;\n @end\n "}, {"sha": "73c7c991709d9c800d8cc42db3839c4840992c2f", "filename": "gcc/testsuite/obj-c++.dg/try-catch-9.mm", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-9.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-9.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-9.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -8,7 +8,7 @@\n /* { dg-prune-output \".*internal compiler error.*\" } */\n /* { dg-options \"-fobjc-exceptions -O2\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdlib.h>\n #include <stdio.h>\n \n@@ -35,13 +35,13 @@ void foo (int arg1, float *arg2)\n     local6 = 18.0;\n     pi = &gi2;\n     pf = &gf2;\n-    obj2 = obj1 = [Object new];\n+    obj2 = obj1 = [TestsuiteObject new];\n     arg1 = 17;\n     arg2 = &gf2;\n     \n-    @throw [Object new];\n+    @throw [TestsuiteObject new];\n   }\n-  @catch (Object *obj) {\n+  @catch (TestsuiteObject *obj) {\n    if (local1 != 123 || local2 != 345 || local3 != 5.0\n        || local4 != 6.0 || local5 != 17 || local6 != 18.0) {\n      printf(\"Abort 1\\n\");\n@@ -66,4 +66,4 @@ int main(void) {\n   foo(15, &gf1);\n   return 0;\n }\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "263ce010af050ed2429747d01118987dc6469b64", "filename": "gcc/testsuite/obj-c++.dg/typedef-alias-1.mm", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftypedef-alias-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftypedef-alias-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftypedef-alias-1.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,15 +1,16 @@\n /* Typedefs of ObjC types should work without any bogus warnings. */\n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n+#include <objc/objc.h>\n \n-typedef Object MyObject;\n+typedef TestsuiteObject MyObject;\n \n int main (int argc, const char * argv[])\n {\n-    Object* a = nil;\n+    TestsuiteObject* a = nil;\n     MyObject* b = a;\n-    Object* c = b;\n+    TestsuiteObject* c = b;\n \n     return 0;\n }"}, {"sha": "2a120ee5cc2171689411b6349a8cd21a8a545832", "filename": "gcc/testsuite/obj-c++.dg/va-meth-1.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fva-meth-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fva-meth-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fva-meth-1.mm?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,13 +2,13 @@\n \n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdarg.h>\n #include <stdlib.h>\n \n /* Test methods with \"C-style\" trailing arguments, with or without ellipsis. */\n \n-@interface MathClass: Object\n+@interface MathClass: TestsuiteObject\n /* sum positive numbers; -1 ends the list */\n + (int) sum: (int) firstNumber, int secondNumber, ...;\n + (int) prod: (int) firstNumber, int secondNumber, int thirdNumber;\n@@ -72,4 +72,4 @@ int main (void)\n   \n   return 0;\n }\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "0dc36b10c0fbef369491ff75a753b864d505df26", "filename": "gcc/testsuite/objc-obj-c++-shared/Object1-implementation.h", "status": "removed", "additions": 0, "deletions": 169, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/889ec77132ca388f1d4a3349db729564969feac2/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1-implementation.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/889ec77132ca388f1d4a3349db729564969feac2/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1-implementation.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1-implementation.h?ref=889ec77132ca388f1d4a3349db729564969feac2", "patch": "@@ -1,169 +0,0 @@\n-/* Compatibility code between APIs and ABIs for the objc test suite.\n-   Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n-   Contributed by Iain Sandoe \n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* \n- * Implementation of a compatibility layer for the ObjC* test-suite.\n- *\n- * Four cases:\n- *   GNU \n- *      Uses the 'old' Object with API and ABI = 0.\n- *      Compatibility methods are added.\n- *   NeXT pre-Darwin9\n- *      Uses the 'old' Object with API and ABI = 0.\n- *   NeXT Darwin >= 9 with no implementation of ABI 2\n- *      Uses API 2 and ABI 0 for m32, uses the 'old' Object'\n- *      Uses API 2 for m64 but only compile tests can be expected to work.\n- *   NeXT Darwin >= 9 with __OBJC2__\n- *      Uses API 2 and ABI 0 for m32, uses the 'old' Object'\n- *      Uses API 2 and ABI 2 - the libobjc implementation of Object is very\n- *      basic, and we add a category to expand this for test-suite use.\n- */\n-\n-#ifndef _OBJC_OBJECT1_IMPLEMENTATION_H_\n-#define _OBJC_OBJECT1_IMPLEMENTATION_H_\n-\n-#include \"Object1.h\"\n-\n-#ifndef __NEXT_RUNTIME__\n-\n-/* Save us from repeating this.  */\n-@implementation Object (TEST_SUITE_ADDITIONS)\n-+ initialize \n-{\n-  return self;\n-}\n-@end\n-\n-#else\n-\n-/* For NeXT pre-Darwin 9 or m32 we need do nothing.  */\n-\n-#  if NEXT_OBJC_ABI_VERSION >= 2 \n-\n-/* Pick up the API=2 header.  */\n-#    include <objc/runtime.h>\n-\n-#    ifndef __OBJC2__\n-\n-/* On a Darwin system >= 9 when there is no __OBJC2__ compiler, the testcases\n-   will not link.  So we provide a dummy Object for this purpose.  */\n-\n-@implementation Object\n-\n-+ (Class) class \n-{\n-  return self;\n-}\n-\n-- (BOOL)isEqual: (id)anObject\n-{\n-  return self == anObject;\n-}\n-\n-@end\n-#    endif  /* __OBJC2__ */\n-\n-/* In any case, since the library does not provide a complete (enough) \n-   implementation we need to provide the additions.  */\n-\n-@implementation Object (TEST_SUITE_ADDITIONS)\n-\n-+ initialize \n-{\n-  return self;\n-}\n-\n-- init \n-{\n-  return self;\n-}\n-\n-- (Class) class \n-{\n-  return isa;\n-}\n-\n-+ (Class) superclass\n-{\n-  return class_getSuperclass(object_getClass(self));\n-}\n-\n-+ new \n-{\n-  return [[self alloc] init];\n-}\n-\n-+ free \n-{\n-  return nil;\n-}\n-\n-- free \n-{\n-  return object_dispose(self);\n-}\n-\n-+ alloc \n-{\n-  return class_createInstance (self, 0);\n-}\n-\n-- (Class) superclass {\n-  return class_getSuperclass([self class]);\n-}\n-\n-- (const char *) name {\n-  return class_getName([self class]);\n-}\n-\n--(BOOL)conformsTo:(Protocol *)protocol {\n-  Class cls;\n-  for (cls = [self class]; cls; cls = [cls superclass]) \n-    {\n-      if (class_conformsToProtocol(cls, protocol)) \n-\treturn YES;\n-    }\n-  return NO;\n-}\n-\n-#ifdef __cplusplus\n-extern \"C\" {\n-#endif\n-extern int printf (const char *, ...);\n-extern void abort (void);\n-#ifdef __cplusplus\n-}\n-#endif\n-\n-/* This is a helper to catch cases where we need to add more functionality\n-   to our test-suite category - more informative than fail with 'does not \n-   respond to forward:'  */\n-- forward: (SEL)sel : (marg_list)args\n-{\n-  const char * onam = object_getClassName (self);\n-  const char * snam = sel_getName (sel);\n-  printf (\"%s: tried to forward: %s\\n\", onam, snam);\n-  abort ();\n-}\n-@end\n-\n-#   endif /* NEXT_OBJC_ABI_VERSION >= 2  */\n-#  endif /* __NEXT_RUNTIME__ */\n-#endif /* _OBJC_OBJECT1_IMPLEMENTATION_H_ */"}, {"sha": "293d0468ff7abd4e397c80da230808c551d884d6", "filename": "gcc/testsuite/objc-obj-c++-shared/Object1.h", "status": "removed", "additions": 0, "deletions": 175, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/889ec77132ca388f1d4a3349db729564969feac2/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/889ec77132ca388f1d4a3349db729564969feac2/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.h?ref=889ec77132ca388f1d4a3349db729564969feac2", "patch": "@@ -1,175 +0,0 @@\n-/* Compatibility code between APIs and ABIs for the objc test suite.\n-   Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n-   Contributed by Iain Sandoe \n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* \n- * Compatibility header.\n- *\n- * Four cases:\n- *   GNU \n- *      Uses the 'old' Object with API and ABI = 0.\n- *      Compatibility methods are added.\n- *   NeXT pre-Darwin9\n- *      Uses the 'old' Object with API and ABI = 0.\n- *   NeXT Darwin >= 9 with no implementation of ABI 2\n- *      Uses API 2 and ABI 0 for m32, uses the 'old' Object'\n- *      Uses API 2 for m64 but only compile tests can be expected to work.\n- *   NeXT Darwin >= 9 with __OBJC2__\n- *      Uses API 2 and ABI 0 for m32, uses the 'old' Object'\n- *      Uses API 2 and ABI 2 - the libobjc implementation of Object is very\n- *      basic, and we add a category to expand this for test-suite use.\n- */\n-#ifndef _OBJC_OBJECT1_H_\n-#define _OBJC_OBJECT1_H_\n-\n-#ifndef __NEXT_RUNTIME__ \n-/* Case 1 = GNU. */\n-#  include <objc/Object.h>\n-/* NeXT requires a +initialize (or forward:) method, and it makes testcases more\n-   readable if the conditional code can be reduced, so we add one to the GNU tests \n-   too.  This saves us from having to introduce it every time.  */\n-@interface Object (TEST_SUITE_ADDITIONS)\n-+ initialize;\n-@end\n-\n-#else /* NeXT */\n-\n-#  include \"next-abi.h\"\n-#  if !defined(NEXT_OBJC_ABI_VERSION) || (NEXT_OBJC_ABI_VERSION < 2)\n-/* Cases 2, Case 3/m32 and 4/m32 are handled as default.  */\n-#    include <objc/Object.h>\n-#  else\n-#    include <objc/objc.h>\n-\n-/* This is a cut-down Object with only the methods currently required\n-   by the testsuite declared.  The implementation is provided in \n-   Object1-implementation.h\n-*/\n-\n-/* The m64 libobjc implementation of Object provides only the 'class' and\n-   isEqual: methods.  \n-   \n-   We add the others required as a test-suite category. \n-   \n-   Please leave the unimplemented methods as comments - so that they can\n-   be inserted as required by future tests.  */\n-\n-@interface Object\n-{\n-  Class isa;\n-}\n-+ (Class) class;\n-- (BOOL)isEqual: (id)anObject;\n-@end\n-\n-/* Dummy definition.  */\n-typedef void * marg_list;\n-\n-@interface Object (TEST_SUITE_ADDITIONS)\n-\n-+ initialize;\n-- init;\n-\n-+ new;\n-+ free;\n-- free;\n-+ alloc;\n-//- copy;\n-//+ allocFromZone:(void *)zone;\n-//- copyFromZone:(void *)zone;\n-//- (void *)zone;\n-\n-- (Class) class;\n-+ (Class) superclass;\n-//+ (const char *) name;\n-//- superclass;\n-- (const char *) name;\n-\n-//- self;\n-//- (unsigned int) hash;\n-\n-/* Testing inheritance relationships */\n-\n-//- (BOOL) isKindOf: aClassObject;\n-//- (BOOL) isMemberOf: aClassObject;\n-//- (BOOL) isKindOfClassNamed: (const char *)aClassName;\n-//- (BOOL) isMemberOfClassNamed: (const char *)aClassName;\n-\n-/* Testing class functionality */\n-\n-//+ (BOOL) instancesRespondTo:(SEL)aSelector;\n-//- (BOOL) respondsTo:(SEL)aSelector;\n-\n-/* Testing protocol conformance */\n-\n-- (BOOL) conformsTo: (Protocol *)aProtocolObject;\n-//+ (BOOL) conformsTo: (Protocol *)aProtocolObject;\n-\n-/* Obtaining method descriptors from protocols */\n-\n-//- (struct objc_method_description *) descriptionForMethod:(SEL)aSel;\n-//+ (struct objc_method_description *) descriptionForInstanceMethod:(SEL)aSel;\n-\n-/* Obtaining method handles */\n-\n-//- (IMP) methodFor:(SEL)aSelector;\n-//+ (IMP) instanceMethodFor:(SEL)aSelector;\n-\n-/* Sending messages determined at run time */\n-\n-//- perform:(SEL)aSelector;\n-//- perform:(SEL)aSelector with:anObject;\n-//- perform:(SEL)aSelector with:object1 with:object2;\n-\n-/* Posing */\n-\n-//+ poseAs: aClassObject;\n-\n-/* Enforcing intentions */\n- \n-//- subclassResponsibility:(SEL)aSelector;\n-//- notImplemented:(SEL)aSelector;\n-\n-/* Error handling */\n-\n-//- doesNotRecognize:(SEL)aSelector;\n-//- error:(const char *)aString, ...;\n-\n-/* Debugging */\n-\n-//- (void) printForDebugger:(void *)stream;\n-\n-/* Archiving */\n-\n-//- awake;\n-//- write:(void *)stream;\n-//- read:(void *)stream;\n-//+ (int) version;\n-//+ setVersion: (int) aVersion;\n-\n-/* Forwarding */\n-\n-- forward: (SEL)sel : (marg_list)args;\n-//- performv: (SEL)sel : (marg_list)args;\n-\n-@end\n-\n-#    endif /* NeXT case 3 & 4 m64 */\n-#  endif /* NEXT */\n-#endif /* _OBJC_OBJECT1_H_ */"}, {"sha": "d5fe4c086117ebb09695d377ff6f90190f7b3ec6", "filename": "gcc/testsuite/objc-obj-c++-shared/Object1.m", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/889ec77132ca388f1d4a3349db729564969feac2/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/889ec77132ca388f1d4a3349db729564969feac2/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.m?ref=889ec77132ca388f1d4a3349db729564969feac2", "patch": "@@ -1,4 +0,0 @@\n-/* This will generate compatibility code for the test-suite provided as a\n-   category on Object.\n-*/\n-#include \"Object1-implementation.h\""}, {"sha": "04fdd0562a30239f68a8c37bf582e6fcd0045738", "filename": "gcc/testsuite/objc-obj-c++-shared/Object1.mm", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/889ec77132ca388f1d4a3349db729564969feac2/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/889ec77132ca388f1d4a3349db729564969feac2/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.mm?ref=889ec77132ca388f1d4a3349db729564969feac2", "patch": "@@ -1,4 +0,0 @@\n-/* This will generate compatibility code for the test-suite provided as a\n-   category on Object.\n-*/\n-#import \"Object1-implementation.h\""}, {"sha": "d375ac0d530c1ae1aa69e5eaa0974f503c4725db", "filename": "gcc/testsuite/objc-obj-c++-shared/Protocol1.h", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/889ec77132ca388f1d4a3349db729564969feac2/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FProtocol1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/889ec77132ca388f1d4a3349db729564969feac2/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FProtocol1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FProtocol1.h?ref=889ec77132ca388f1d4a3349db729564969feac2", "patch": "@@ -1,52 +0,0 @@\n-/* \n- * Temporary work-around to avoid the need for method attributes in\n- * the NeXT Runtime Protocol header.\n- */\n-#ifndef _OBJC_PROTOCOL1_H_\n-#define _OBJC_PROTOCOL1_H_\n-\n-#  ifndef __NEXT_RUNTIME__\n-#    include <objc/Protocol.h>\n-#  else\n-#    include \"next-abi.h\"\n-#    ifndef NEXT_OBJC_USE_NEW_INTERFACE\n-/* We are on a NeXT version without method __attributes__ */\n-#      import <objc/Protocol.h>\n-#    else\n-/* We make our own interface without the deprecation messages \n- * This is essentially <objc/Protocol.h> without the OBJC2\n- * flags.\n- * \n- */\n-#      ifndef _OBJC_PROTOCOL_H_\n-#      define _OBJC_PROTOCOL_H_\n-#      import \"Object1.h\"\n-\n-@interface Protocol : Object\n-{\n-@private\n-    char *protocol_name ;\n-    struct objc_protocol_list *protocol_list ;\n-    struct objc_method_description_list *instance_methods ;\n-    struct objc_method_description_list *class_methods ;\n-}\n-\n-/* Obtaining attributes intrinsic to the protocol */\n-#if (NEXT_OBJC_ABI_VERSION==0)\n-- (const char *)name ; /* Not avail in v2, deprecated in prior */\n-/* Testing protocol conformance */\n-- (BOOL) conformsTo: (Protocol *)aProtocolObject ; /* Not avail in v2 */\n-#endif\n-\n-/* Looking up information specific to a protocol */\n-/* Deprecated, but available */\n-\n-- (struct objc_method_description *) descriptionForInstanceMethod:(SEL)aSel ;\n-- (struct objc_method_description *) descriptionForClassMethod:(SEL)aSel ;\n-\n-@end\n-\n-#      endif /* __NEXT_RUNTIME__ */\n-#    endif /* _OBJC_PROTOCOL_H_ */\n-#  endif /* NEXT_OBJC_ABI_VERSION */\n-#endif /* _OBJC_PROTOCOL1_H_ */"}, {"sha": "b6acd91f156d6197bd732bb5faac4423ff232fb6", "filename": "gcc/testsuite/objc-obj-c++-shared/TestsuiteObject.h", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FTestsuiteObject.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FTestsuiteObject.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FTestsuiteObject.h?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -0,0 +1,47 @@\n+/* Very simple root class for writing testcases.\n+   Copyright (C) 2011 Free Software Foundation, Inc.\n+   Contributed by Nicola Pero\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _TESTSUITE_OBJECT_H_\n+#define _TESTSUITE_OBJECT_H_\n+\n+/* We use this root class instead of Object to keep the tests\n+   independent of the runtime being used.  Keep it simple.  */\n+\n+@interface TestsuiteObject\n+{\n+  Class isa;\n+}\n+/* Required by the NeXT runtime.  Does nothing.  */\n++ (id) initialize;\n+\n+/* Creating instances.  */\n++ (id) new;\n++ (id) alloc;\n+- (id) init;\n+- (void) free;\n+\n+/* Auxiliary methods.  */\n++ (Class) class;\n++ (Class) superclass;\n++ (const char *)name;\n+- (const char *)name;\n+@end\n+\n+#endif /* _TESTSUITE_OBJECT_H_ */"}, {"sha": "1b033af33058fe20363c8e6e9ed2d55d3fd3bd71", "filename": "gcc/testsuite/objc-obj-c++-shared/TestsuiteObject.m", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FTestsuiteObject.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FTestsuiteObject.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FTestsuiteObject.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -0,0 +1,64 @@\n+/* Very simple root class for writing testcases.\n+   Copyright (C) 2011 Free Software Foundation, Inc.\n+   Contributed by Nicola Pero\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* This is the implementation, but in all simple testcases we\n+   recommend simply including it in the testcase.  */\n+\n+#include \"TestsuiteObject.h\"\n+#include \"runtime.h\"\n+\n+@implementation TestsuiteObject\n++ (id) initialize\n+{\n+  return self;\n+}\n++ (id) new\n+{\n+  return [[self alloc] init];\n+}\n++ (id) alloc\n+{\n+  return class_createInstance (self, 0);\n+}\n+- (id) init\n+{\n+  return self;\n+}\n+- (void) free\n+{\n+  object_dispose (self);\n+}\n++ (Class) class\n+{\n+  return self;\n+}\n++ (Class) superclass\n+{\n+  return class_getSuperclass (self);\n+}\n++ (const char *)name\n+{\n+  return class_getName (self);\n+}\n+- (const char *)name\n+{\n+  return class_getName (isa);\n+}\n+@end"}, {"sha": "d2ae8e9e6797c13d390f8cb3661f08d365e19dbc", "filename": "gcc/testsuite/objc-obj-c++-shared/next-mapping.h", "status": "removed", "additions": 0, "deletions": 109, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/889ec77132ca388f1d4a3349db729564969feac2/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnext-mapping.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/889ec77132ca388f1d4a3349db729564969feac2/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnext-mapping.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fnext-mapping.h?ref=889ec77132ca388f1d4a3349db729564969feac2", "patch": "@@ -1,109 +0,0 @@\n-/* Compatibility header between runtimes and APIs.\n-   Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n-\n-   Original Authors: Ziemowit Laski <zlaski@apple.com>\n-\t\t     David Ayers <d.ayers@inode.at>\n-\t\t     \n-   re-work for ObjC2 by Iain Sandoe <iains@gcc.gnu.org>\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#ifndef _OBJC_NEXT_MAPPING_H_\n-#define _OBJC_NEXT_MAPPING_H_\n-\n-/* This file provides a two-way mapping of API names for the original \n-   GNU & NeXT APIs. \n-   \n-   It is being expanded to provide mapping (where possible) between between the\n-   older API and API-2.\n-*/\n-\n-#include \"objc-test-suite-types.h\"\n-\n-#ifndef __NEXT_RUNTIME__\n-\n-# define CLASSFIELD class_pointer\n-# define CLASSPTRFIELD(x) (x)->class_pointer\n-# define SUPERCLASS superClass\n-# define OBJC_GETCLASS objc_get_class\n-\n-# ifdef __objc_api_INCLUDE_GNU\n-#  define class_createInstance(C, S) class_create_instance(C)\n-# endif\n-# define method_get_types(M) (M)->method_types\n-\n-#else /* NeXT */\n-\n-/* Include next-abi.h to set NEXT_OBJC_USE_NEW_INTERFACE etc.*/\n-# include \"next-abi.h\"\n-\n-# ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-   /* API=2. */\n-#  include <objc/runtime.h>\n-# else\n-   /* API=0. */\n-#  include <objc/objc-class.h>\n-# endif\n-\n-# define CLASSPTRFIELD(x) (x)->isa\n-# define SUPERCLASS superclass\n-# define OBJC_GETCLASS objc_getClass\n-\n-# define objc_get_class(C) objc_getClass(C)\n-# define objc_get_meta_class(C) objc_getMetaClass(C)\n-# define class_get_class_method(C, S) class_getClassMethod(C, S)\n-# define class_get_instance_method(C, S) class_getInstanceMethod(C, S)\n-# define sel_get_name(S) sel_getName(S)\n-# define class_create_instance(C) class_createInstance(C, 0)\n-# define class_get_class_name(C) object_getClassName(C)\n-# define objc_lookup_class(N) objc_lookUpClass(N)\n-\n-# ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-\n-#  define object_class_name(O) (object_getClassName(O)) \n-#  define object_get_class(O) (object_getClass((id)O))\n-#  define object_get_super_class(O) class_get_super_class(object_get_class(O))\n-#  define object_is_class(O) class_is_meta_class(object_get_class(O))\n-#  define object_is_meta_class(O) (object_is_class(O) && class_is_meta_class(O) \\\n-\t\t\t\t\t\t && class_is_meta_class(object_get_class(O)))\n-\n-#  define method_get_imp(M) (method_getImplementation((Method)M))\n-#  define method_get_types(M) (method_getTypeEncoding((Method)M))\n-\n-#  define class_get_super_class(C) (class_getSuperclass((Class)C))\n-#  define class_is_meta_class(C) (class_isMetaClass((Class)C) ? YES: NO)\n-#  define class_is_class(C) (class_is_meta_class(C) == NO)\n-\n-# else /* OLD API */\n-\n-#  define object_class_name(O) (O->name) \n-#  define object_get_super_class(O) class_get_super_class(*(struct objc_class **)O)\n-#  define object_get_class(O) (*(struct objc_class **)O)\n-#  define object_is_class(O) class_is_meta_class(*(struct objc_class **)O)\n-#  define object_is_meta_class(O) (class_is_meta_class(O) && class_is_meta_class(*(struct objc_class **)O))\n-\n-#  define method_get_imp(M) (((Method)M)->method_imp)\n-#  define method_get_types(M) (((Method)M)->method_types)\n-\n-#  define class_get_super_class(C) (((struct objc_class *)C)->super_class)\n-#  define class_is_meta_class(C) (CLS_GETINFO((struct objc_class *)C, CLS_META)? YES: NO)\n-#  define class_is_class(C) (CLS_GETINFO((struct objc_class *)C, CLS_CLASS)? YES: NO)\n-\n-# endif /* NEXT_OBJC_USE_NEW_INTERFACE */\n-\n-# endif  /*__NEXT_RUNTIME__ */\n-#endif /* _OBJC_NEXT_MAPPING_H_ */\n\\ No newline at end of file"}, {"sha": "edff8cb020792042e49541415a3e17a9890a5886", "filename": "gcc/testsuite/objc-obj-c++-shared/objc-test-suite-types.h", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fobjc-test-suite-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fobjc-test-suite-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fobjc-test-suite-types.h?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -21,17 +21,8 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef _OBJC_TEST_SUITE_TYPES_H_\n #define _OBJC_TEST_SUITE_TYPES_H_\n \n-#ifdef __cplusplus\n-#define ProtoBool bool\n-#else\n-#define ProtoBool _Bool\n-#endif\n-\n #ifndef __NEXT_RUNTIME__\n \n-#define METHOD Method_t\n-#define IVAR_T struct objc_ivar\n-\n /* dummy const string class ref. */\n typedef void * TNS_STRING_REF_T;\n \n@@ -52,16 +43,12 @@ typedef void * TNS_STRING_REF_T;\n #define NULL 0\n #endif\n \n-#define METHOD Method\n-\n /* Where there are equivalent interfaces between APIs we substitute\n    a macro or typedef.  */\n #ifdef NEXT_OBJC_USE_NEW_INTERFACE\n typedef void * PMETH;\n-#define IVAR_T Ivar \n #else\n typedef struct objc_method * PMETH;\n-#define IVAR_T struct objc_ivar \n #endif\n \n #ifdef __OBJC2__\n@@ -77,4 +64,4 @@ typedef struct objc_class TNS_STRING_REF_T;\n #endif\n \n #endif  /*__NEXT_RUNTIME__ */\n-#endif /* _OBJC_TEST_SUITE_TYPES_H_ */\n\\ No newline at end of file\n+#endif /* _OBJC_TEST_SUITE_TYPES_H_ */"}, {"sha": "bdc2bff620f8795bc2a451523b77681a5f02d650", "filename": "gcc/testsuite/objc-obj-c++-shared/runtime.h", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fruntime.h?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -0,0 +1,114 @@\n+/* Wrapper around <objc/runtime.h>\n+   Copyright (C) 2011 Free Software Foundation, Inc.\n+   Contributed by Nicola Pero\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _TESTSUITE_RUNTIME_H_\n+#define _TESTSUITE_RUNTIME_H_\n+\n+/* Include this file where you'd normally include <objc/runtime.h>.\n+\n+   Older versions of the NeXT runtime do not have <objc/runtime.h> and\n+   you need to include <objc/objc-runtime.h> instead.  This file takes\n+   care of figuring out if that's the case.  */\n+\n+#ifndef __NEXT_RUNTIME__\n+\n+/*\n+  GNU Objective-C runtime (libobjc).\n+*/\n+# include <objc/runtime.h>\n+\n+#else\n+\n+/*\n+  NeXT Objective-C runtime.\n+*/\n+\n+/* Include next-abi.h to determine which version of the runtime we are\n+   dealing with.  TODO: If this is the only place including it, maybe\n+   it could be copied here ?  */\n+# include \"next-abi.h\"\n+\n+# ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+\n+/* New NeXT runtime, with an API that should be basically identical to\n+   the GNU Objective-C one.  */\n+#  include <objc/runtime.h>\n+\n+# else\n+\n+/* Old NeXT runtime, with an API similar, but not identical to the new\n+   one.  To start with, different headers need to be included.  */\n+#  include <objc/objc-class.h>\n+#  include <objc/objc-runtime.h>\n+\n+/* Not all functions are available in the old NeXT runtime.  A few\n+   that we need are not, and here we provide an implementation on top\n+   of the old NeXT API.  */\n+\n+#  define class_isMetaClass(C) (CLS_GETINFO((struct objc_class *)C, CLS_META)? YES: NO)\n+#  define class_getName(C) object_getClassName(C)\n+#  define class_getSuperclass(C)  (((struct objc_class *)C)->super_class)\n+#  define method_getImplementation(M) (((Method)M)->method_imp)\n+#  define method_getTypeEncoding(M) (((Method)M)->method_types)\n+#  define object_getClass(O) (*(struct objc_class **)O)\n+\n+#include <objc/Protocol.h>\n+BOOL class_conformsToProtocol (Class class_, Protocol *protocol)\n+{\n+  struct objc_protocol_list *p;\n+  int i;\n+  for (p = class_->protocols; p; p = p->next)\n+    for (i = 0; i < p->count; i++)\n+      if ([p->list[i] conformsTo: protocol])\n+\treturn YES;\n+  return NO;\n+}\n+\n+#define protocol_getName(P) [P name]\n+#define protocol_isEqual(P,Q) [P isEqual: Q]\n+\n+struct objc_method_description protocol_getMethodDescription (Protocol *protocol, \n+\t\t\t\t\t\t\t      SEL selector,\n+\t\t\t\t\t\t\t      BOOL requiredMethod,\n+\t\t\t\t\t\t\t      BOOL instanceMethod)\n+{\n+  struct objc_method_description *tmp;\n+  struct objc_method_description result;\n+\n+  if (instanceMethod)\n+    {\n+      tmp = [protocol descriptionForInstanceMethod: selector];\n+      result = *tmp;\n+    }\n+  else\n+    {\n+      tmp = [protocol descriptionForClassMethod: selector];\n+      result = *tmp;      \n+    }\n+\n+  return result;\n+}\n+\n+#  endif /* NEXT_OBJC_USE_NEW_INTERFACE */\n+\n+# endif /* __NEXT_RUNTIME__ */\n+\n+#endif /* _TESTSUITE_RUNTIME_H_ */\n+"}, {"sha": "1f59aef35b2acc61adf6a3b2ad9dbe050910d39a", "filename": "gcc/testsuite/objc.dg/attributes/categ-attribute-1.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fcateg-attribute-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fcateg-attribute-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fcateg-attribute-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n \n #include <objc/objc.h>\n-#include \"../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface obj : Object { \n+@interface obj : TestsuiteObject { \n @public \n   int var; \n } "}, {"sha": "d6ce0b0f20f0e717f02d07bbaa2718638c258382", "filename": "gcc/testsuite/objc.dg/attributes/categ-attribute-2.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fcateg-attribute-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fcateg-attribute-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fcateg-attribute-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n \n #include <objc/objc.h>\n-#include \"../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface obj : Object { \n+@interface obj : TestsuiteObject { \n @public \n   int var; \n } "}, {"sha": "9ae31e05a85dfef3ed2f42843778a1c000d1ec50", "filename": "gcc/testsuite/objc.dg/attributes/method-attribute-1.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n \n #include <objc/objc.h>\n-#include \"../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface obj : Object {\n+@interface obj : TestsuiteObject {\n @public \n   int var; \n } "}, {"sha": "90369cc66c0169430953edc871065872d7bc4130", "filename": "gcc/testsuite/objc.dg/attributes/method-attribute-2.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n \n #include <objc/objc.h>\n-#include \"../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface obj : Object {\n+@interface obj : TestsuiteObject {\n @public \n   int var; \n } "}, {"sha": "1af1d117db4fd2f6a981db41fcf40aaf2871588b", "filename": "gcc/testsuite/objc.dg/attributes/method-attribute-3.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-3.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n \n-#include \"../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface obj : Object {\n+@interface obj : TestsuiteObject {\n @public \n   int var;\n }"}, {"sha": "c232bb9db7dedd5b4da429fff710385885291870", "filename": "gcc/testsuite/objc.dg/bitfield-1.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,14 +4,14 @@\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <objc/objc.h>\n \n extern void abort(void);\n \n #define CHECK_IF(expr) if(!(expr)) abort();\n \n-@interface Base: Object \n+@interface Base: TestsuiteObject \n {\n     int full;\n     int full2: 32;\n@@ -80,4 +80,3 @@ int main(void) {\n   return 0;\n }\n \n-#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "0eb49b83b6f651f502b66e0fa67408752b61d038", "filename": "gcc/testsuite/objc.dg/bitfield-3.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-3.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,15 +4,15 @@\n /* { dg-options \"-Wpadded\" } */\n /* { dg-do run } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n \n extern void abort(void);\n extern int strcmp(const char *str1, const char *str2);\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n enum Enum { one, two, three, four };\n \n-@interface Base: Object {\n+@interface Base: TestsuiteObject {\n   unsigned a: 2;\n   int b: 3;\n   enum Enum c: 4;"}, {"sha": "58d939b9d6d58d77e6c10add71abdf44b7f61e77", "filename": "gcc/testsuite/objc.dg/bitfield-5.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-5.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -7,15 +7,15 @@ were defined at once (i.e., any padding introduced for\n /* { dg-options \"-Wpadded\" } */\n /* { dg-do run } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <objc/objc.h>\n #include <stdlib.h>\n \n #define CHECK_IF(expr) if(!(expr)) abort()\n \n enum Enum { zero, one, two, three, four };\n \n-@interface Base: Object {\n+@interface Base: TestsuiteObject {\n @public\n   unsigned a: 2;\n   int b: 3;"}, {"sha": "cdc94ef21c5721bb701fe814855a4e574c0d12b1", "filename": "gcc/testsuite/objc.dg/call-super-1.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -5,7 +5,7 @@\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n \n extern void abort(void);\n \n@@ -23,7 +23,7 @@ Point MakePoint ( float x , float y ) {\n   return p; \n } \n \n-@interface Base: Object \n+@interface Base: TestsuiteObject \n - ( void ) translateOriginToPoint : ( Point ) translation ; \n @end\n \n@@ -75,4 +75,4 @@ int main(void) {\n   return 0;\n }\n \n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "10c625272526e9d1790636fb24c8aa1c245aa64e", "filename": "gcc/testsuite/objc.dg/call-super-2.m", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,16 +2,24 @@\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n-#include \"../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n+#include \"../objc-obj-c++-shared/runtime.h\"\n #include <stddef.h>\n \n+/* FIXME: This is temporary.  At the moment, the compiler, when\n+   compiling for the GNU runtime and doing method checks, only\n+   recognizes objc_get_class(), and not objc_getClass().  So\n+   temporarily force objc_get_class() to be used.  */\n+#ifndef __NEXT_RUNTIME__\n+# define objc_getClass(C) objc_get_class(C)\n+#endif\n+\n @protocol Func\n + (int) class_func0;\n - (int) instance_func0;\n @end\n \n-@interface Derived: Object\n+@interface Derived: TestsuiteObject\n + (int) class_func1;\n + (int) class_func2;\n + (int) class_func3;\n@@ -39,7 +47,7 @@ @implementation Derived\n + (int) class_func1\n {\n    int i = (size_t)[self class_func0];       /* { dg-warning \".Derived. may not respond to .\\\\+class_func0.\" } */\n-   return i + (size_t)[super class_func0];   /* { dg-warning \".Object. may not respond to .\\\\+class_func0.\" } */\n+   return i + (size_t)[super class_func0];   /* { dg-warning \".TestsuiteObject. may not respond to .\\\\+class_func0.\" } */\n }\n + (int) class_func2\n {\n@@ -50,7 +58,7 @@ + (int) class_func2\n }\n + (int) class_func3\n {\n-   return [(Object <Func> *)super class_func0];\n+   return [(TestsuiteObject <Func> *)super class_func0];\n }\n + (int) class_func4\n {\n@@ -59,28 +67,28 @@ + (int) class_func4\n + (int) class_func5\n {\n    int i = (size_t)[Derived class_func0];    /* { dg-warning \".Derived. may not respond to .\\\\+class_func0.\" } */\n-   return i + (size_t)[Object class_func0];  /* { dg-warning \".Object. may not respond to .\\\\+class_func0.\" } */\n+   return i + (size_t)[TestsuiteObject class_func0];  /* { dg-warning \".TestsuiteObject. may not respond to .\\\\+class_func0.\" } */\n }\n + (int) class_func6\n {\n-   return (size_t)[objc_get_class(\"Object\") class_func1];  /* { dg-warning \".Object. may not respond to .\\\\+class_func1.\" } */\n+   return (size_t)[objc_getClass(\"TestsuiteObject\") class_func1];  /* { dg-warning \".TestsuiteObject. may not respond to .\\\\+class_func1.\" } */\n }\n + (int) class_func7\n {\n-   return [objc_get_class(\"Derived\") class_func1];\n+   return [objc_getClass(\"Derived\") class_func1];\n }\n - (int) instance_func1\n {\n    int i = (size_t)[self instance_func0];     /* { dg-warning \".Derived. may not respond to .\\\\-instance_func0.\" } */\n-   return i + (size_t)[super instance_func0]; /* { dg-warning \".Object. may not respond to .\\\\-instance_func0.\" } */\n+   return i + (size_t)[super instance_func0]; /* { dg-warning \".TestsuiteObject. may not respond to .\\\\-instance_func0.\" } */\n }\n - (int) instance_func2\n {\n    return [(id <Func>)super instance_func0];\n }\n - (int) instance_func3\n {\n-   return [(Object <Func> *)super instance_func0];\n+   return [(TestsuiteObject <Func> *)super instance_func0];\n }\n - (int) instance_func4\n {\n@@ -89,15 +97,15 @@ - (int) instance_func4\n - (int) instance_func5\n {\n    int i = (size_t)[Derived instance_func1]; /* { dg-warning \".Derived. may not respond to .\\\\+instance_func1.\" } */\n-   return i + (size_t)[Object instance_func1]; /* { dg-warning \".Object. may not respond to .\\\\+instance_func1.\" } */\n+   return i + (size_t)[TestsuiteObject instance_func1]; /* { dg-warning \".TestsuiteObject. may not respond to .\\\\+instance_func1.\" } */\n }\n - (int) instance_func6\n {\n-   return (size_t)[objc_get_class(\"Object\") class_func1]; /* { dg-warning \".Object. may not respond to .\\\\+class_func1.\" } */\n+   return (size_t)[objc_getClass(\"TestsuiteObject\") class_func1]; /* { dg-warning \".TestsuiteObject. may not respond to .\\\\+class_func1.\" } */\n }\n - (int) instance_func7\n {\n-   return [objc_get_class(\"Derived\") class_func1];\n+   return [objc_getClass(\"Derived\") class_func1];\n }\n @end\n \n@@ -108,7 +116,7 @@ + (int) categ_class_func1\n    i += [self class_func1];\n    i += [self categ_class_func2];\n    i += (size_t)[self categ_instance_func1]; /* { dg-warning \".Derived. may not respond to .\\\\+categ_instance_func1.\" } */\n-   return i + (size_t)[super class_func0];   /* { dg-warning \".Object. may not respond to .\\\\+class_func0.\" } */\n+   return i + (size_t)[super class_func0];   /* { dg-warning \".TestsuiteObject. may not respond to .\\\\+class_func0.\" } */\n }\n + (int) categ_class_func2\n {\n@@ -121,11 +129,11 @@ - (int) categ_instance_func1\n {\n    int i = (size_t)[self instance_func0];    /* { dg-warning \".Derived. may not respond to .\\\\-instance_func0.\" } */\n    i += [(Derived <Func> *)self categ_instance_func2];\n-   i += (size_t)[(Object <Func> *)self categ_instance_func2]; /* { dg-warning \".Object. may not respond to .\\\\-categ_instance_func2.\" } */\n-   /* { dg-warning \".\\\\-categ_instance_func2. not found in protocol\" \"\" { target *-*-* } 124 } */\n+   i += (size_t)[(TestsuiteObject <Func> *)self categ_instance_func2]; /* { dg-warning \".TestsuiteObject. may not respond to .\\\\-categ_instance_func2.\" } */\n+   /* { dg-warning \".\\\\-categ_instance_func2. not found in protocol\" \"\" { target *-*-* } 132 } */\n    i += (size_t)[(id <Func>)self categ_instance_func2];  /* { dg-warning \".\\\\-categ_instance_func2. not found in protocol\" } */\n    i += [(id)self categ_instance_func2];\n-   return i + (size_t)[super instance_func0];   /* { dg-warning \".Object. may not respond to .\\\\-instance_func0.\" } */\n+   return i + (size_t)[super instance_func0];   /* { dg-warning \".TestsuiteObject. may not respond to .\\\\-instance_func0.\" } */\n }\n - (int) categ_instance_func2\n {"}, {"sha": "20c220edb38cb2130a945781c7fbf9b2a07476f8", "filename": "gcc/testsuite/objc.dg/call-super-3.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-3.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -5,12 +5,12 @@\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n \n extern void abort(void);\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n-@interface Base: Object\n+@interface Base: TestsuiteObject\n + (int) class_func1;\n - (int) instance_func1;\n @end\n@@ -54,4 +54,3 @@ int main(void) {\n   return 0;\n }\n \n-#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "92e631fc61992e0b2dca89256a4e6de6239142c9", "filename": "gcc/testsuite/objc.dg/category-1.m", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fcategory-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fcategory-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcategory-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,48 +4,36 @@\n /* { dg-do run } */\n /* { dg-xfail-run-if \"need OBJC2 ABI\" { *-*-darwin* && { lp64 &&  { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n extern int strcmp(const char *s1, const char *s2);\n extern void abort(void);\n \n-#ifdef __NEXT_RUNTIME__\n-#define SUPERCLASS superclass\n-#else\n-#define SUPERCLASS superClass\n-#endif\n-\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n-@interface MyObject: Object\n+@interface MyObject: TestsuiteObject\n + (Class)whatever1;\n @end\n \n @implementation MyObject\n-+ (Class)whatever1 { return [super SUPERCLASS]; }\n++ (Class)whatever1 { return [super superclass]; }\n @end\n \n @interface MyObject (ThisWontCompile)\n +(Class)whatever2;\n @end\n  \n @implementation MyObject (ThisWontCompile)\n-+(Class)whatever2 { return [super SUPERCLASS]; }\n++(Class)whatever2 { return [super superclass]; }\n @end\n \n int main (int argc, const char * argv[])\n {\n   Class w1 = [MyObject whatever1];\n   Class w2 = [MyObject whatever2];\n \n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-  CHECK_IF(!strcmp( object_getClassName( w1 ), \"Object\"));\n-  CHECK_IF(!strcmp( object_getClassName( w2 ), \"Object\"));\n-#else\n-  CHECK_IF(!strcmp(w1->name, \"Object\"));\n-  CHECK_IF(!strcmp(w2->name, \"Object\"));\n-#endif\n+  CHECK_IF(!strcmp( object_getClassName( w1 ), \"TestsuiteObject\"));\n+  CHECK_IF(!strcmp( object_getClassName( w2 ), \"TestsuiteObject\"));\n \n   return 0;\n }\n \n-#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "4dfb3b8670854b7e38029e625606dc4d014d9932", "filename": "gcc/testsuite/objc.dg/class-protocol-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-protocol-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-protocol-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-protocol-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do compile } */\n \n #include <objc/objc.h>\n-#include <objc/objc-api.h>\n+#include \"../objc-obj-c++-shared/runtime.h\"\n \n @protocol MyProto1\n +(void)doItClass1;"}, {"sha": "b95af5de1bc6cf1630f24ea506ff3217f2f8ca07", "filename": "gcc/testsuite/objc.dg/comp-types-10.m", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-10.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,22 +1,22 @@\n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n @protocol Foo\n - (id)meth1;\n - (id)meth2:(int)arg;\n @end\n \n-@interface Derived1: Object\n+@interface Derived1: TestsuiteObject\n @end\n \n-@interface Derived2: Object\n+@interface Derived2: TestsuiteObject\n + (Derived1 *)new;\n @end\n \n id<Foo> func(void) {\n-  Object *o = [Object new];\n-  return o;  /* { dg-warning \"class .Object. does not implement the .Foo. protocol\" } */\n+  TestsuiteObject *o = [TestsuiteObject new];\n+  return o;  /* { dg-warning \"class .TestsuiteObject. does not implement the .Foo. protocol\" } */\n }\n \n @implementation Derived2"}, {"sha": "9de3cee64d9e49c07cbba9d6a1730a2160eda2e4", "filename": "gcc/testsuite/objc.dg/comp-types-11.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-11.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-11.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-11.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,10 +1,10 @@\n /* { dg-do compile } */\n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface Derived: Object\n+@interface Derived: TestsuiteObject\n @end\n \n-extern Object* foo(void);\n+extern TestsuiteObject* foo(void);\n static Derived *test(void)\n {\n    Derived *m = foo();   /* { dg-warning \"initialization from distinct Objective\\\\-C type\" } */"}, {"sha": "5e32cfe92338539d40e8d1d81a2daada23a695cb", "filename": "gcc/testsuite/objc.dg/comp-types-12.m", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-12.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-12.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-12.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,14 +1,14 @@\n /* When assigning function pointers, allow for covariant return types\n    and contravariant argument types.  */\n /* { dg-do compile } */\n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n @class Derived;\n \n-Object *ExternFunc (Object *filePath, Object *key);\n-typedef id FuncSignature (Object *arg1, Derived *arg2);\n+TestsuiteObject *ExternFunc (TestsuiteObject *filePath, TestsuiteObject *key);\n+typedef id FuncSignature (TestsuiteObject *arg1, Derived *arg2);\n \n-@interface Derived: Object\n+@interface Derived: TestsuiteObject\n + (void)registerFunc:(FuncSignature *)function;\n @end\n "}, {"sha": "dcf3476c5314cc7d6c57f2095a1ca3c24dc4e296", "filename": "gcc/testsuite/objc.dg/comp-types-8.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-8.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-8.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-8.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* Another gimplifier ICE... */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface MyView: Object {\n+@interface MyView: TestsuiteObject {\n   int _frame;\n }\n - (void)_finalize;"}, {"sha": "5ea1f34b6d29c40565db50cab9fafd80b1119b05", "filename": "gcc/testsuite/objc.dg/defs.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fdefs.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fdefs.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fdefs.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -5,14 +5,14 @@\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n //#include <objc/objc.h>\n \n extern void abort(void);\n \n #define CHECK_IF(expr) if(!(expr)) abort();\n \n-@interface Base: Object {\n+@interface Base: TestsuiteObject {\n @public\n   int a;\n   float b;\n@@ -67,4 +67,4 @@ int main(void) {\n   return 0;\n }\n \n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "187e5483e2192c6fa0e5a693f0be2f355602479c", "filename": "gcc/testsuite/objc.dg/desig-init-1.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fdesig-init-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fdesig-init-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fdesig-init-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -5,11 +5,11 @@\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdio.h> \n #include <stdlib.h>\n \n-@interface Cls : Object\n+@interface Cls : TestsuiteObject\n + (int) meth1;\n + (int) meth2;\n + (void) doTests;\n@@ -48,4 +48,4 @@ int main(void) {\n /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */\n \n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "a57a3d3211b66e5df20ae2607bd9bb9f2cd93e16", "filename": "gcc/testsuite/objc.dg/encode-2.m", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -17,22 +17,14 @@ to the actual placement of parameters (relative to 'self')\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n-#include \"../objc-obj-c++-shared/next-mapping.h\"\n-\n-#ifdef __NEXT_RUNTIME__\n-#define METHOD Method\n-#else\n-#include <objc/objc-api.h>\n-#define METHOD Method_t\n-#define method_get_types(M) (M)->method_types\n-#endif\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n+#include \"../objc-obj-c++-shared/runtime.h\"\n \n extern int sscanf(const char *str, const char *format, ...);\n extern void abort(void);\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n-@interface Foo: Object\n+@interface Foo: TestsuiteObject\n typedef struct { float x, y; } XXPoint;\n typedef struct { float width, height; } XXSize;\n typedef struct _XXRect { XXPoint origin; XXSize size; } XXRect;\n@@ -74,31 +66,29 @@ -(void) char:(signed char)c float:(float)f double:(double)d long:(long)l {\n \n int main(void) {\n   Foo *foo = [[Foo alloc] init];\n-  Class fooClass = objc_get_class(\"Foo\");\n-  METHOD meth;\n+  Class fooClass = objc_getClass(\"Foo\");\n+  Method meth;\n   const char *string;\n \n-  meth = class_get_instance_method(fooClass, @selector(setRect:withInt:));\n+  meth = class_getInstanceMethod(fooClass, @selector(setRect:withInt:));\n   offs2 = 9999;\n \n-  sscanf(method_get_types(meth), \"@%u@%u:%u{_XXRect={?=ff}{?=ff}}%ui%u\", &offs1, &offs2, &offs3,\n+  sscanf(method_getTypeEncoding(meth), \"@%u@%u:%u{_XXRect={?=ff}{?=ff}}%ui%u\", &offs1, &offs2, &offs3,\n       &offs4, &offs5);\n    \n   CHECK_IF(!offs2);\n   [foo setRect:my_rect withInt:123];\n \n-  meth = class_get_instance_method(fooClass, @selector(char:float:double:long:));\n+  meth = class_getInstanceMethod(fooClass, @selector(char:float:double:long:));\n   offs2 = 9999;\n   if (sizeof (long) == 8)\n     string = \"v%u@%u:%uc%uf%ud%uq%u\";\n   else\n     string = \"v%u@%u:%uc%uf%ud%ul%u\";\n-  sscanf(method_get_types(meth), string, &offs1, &offs2, &offs3,  \n+  sscanf(method_getTypeEncoding(meth), string, &offs1, &offs2, &offs3,  \n \t &offs4, &offs5, &offs6, &offs7);\n   CHECK_IF(!offs2);\n   [foo char:'c' float:2.3 double:3.5 long:2345L];\n \n   return 0;\n }  \n-\n-#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "9ce6d834f475b881220a7f3920ded053810ab2f0", "filename": "gcc/testsuite/objc.dg/encode-3.m", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-3.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -6,12 +6,13 @@\n #include <stdio.h>\n #include <stdlib.h>\n \n-#ifndef __NEXT_RUNTIME__\n-#  include <objc/objc-api.h>\n+#include \"../objc-obj-c++-shared/runtime.h\"\n+\n+#ifdef __cplusplus\n+#define ProtoBool bool\n+#else\n+#define ProtoBool _Bool\n #endif\n-#include \"../objc-obj-c++-shared/objc-test-suite-types.h\"\n-#include \"../objc-obj-c++-shared/next-mapping.h\"\n-#include <objc/Protocol.h>\n \n extern int sscanf(const char *str, const char *format, ...);\n extern void abort(void);\n@@ -36,9 +37,7 @@ + (ProtoBool **)getBool:(ObjCBool **)b;\n \n Protocol *proto;\n struct objc_method_description *meth;\n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n struct objc_method_description meth_object;\n-#endif\n unsigned totsize, offs0, offs1, offs2, offs3, offs4, offs5, offs6, offs7;\n \n static void scan_initial(const char *pattern) {\n@@ -51,13 +50,9 @@ static void scan_initial(const char *pattern) {\n int main(void) {\n   const char *string;\n   proto = @protocol(Proto);\n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n   meth_object = protocol_getMethodDescription (proto,\n \t\t   @selector(char:float:double:unsigned:short:long:), YES, YES);\n   meth = &meth_object;\n-#else\n-  meth = [proto descriptionForInstanceMethod: @selector(char:float:double:unsigned:short:long:)];\n-#endif\n   if (sizeof (long) == 8)\n     string = \"v%u@%u:%uc%uf%ud%uI%us%uq%u\";\n   else\n@@ -66,23 +61,15 @@ int main(void) {\n   CHECK_IF(offs3 == offs2 + sizeof(int) && offs4 == offs3 + sizeof(float));\n   CHECK_IF(offs5 == offs4 + sizeof(double) && offs6 == offs5 + sizeof(unsigned));\n   CHECK_IF(offs7 == offs6 + sizeof(int) && totsize == offs7 + sizeof(long));\n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n   meth_object = protocol_getMethodDescription (proto,\n \t\t  @selector(setRect:withBool:withInt:), YES, YES);\n   meth = &meth_object;\n-#else\n-  meth = [proto descriptionForInstanceMethod: @selector(setRect:withBool:withInt:)];\n-#endif\n   scan_initial(\"^v%u@%u:%u{_XXRect={?=ff(__XXAngle=II)}{?=dd}^{_XXRect}}%uB%ui%u\");\n   CHECK_IF(offs3 == offs2 + sizeof(XXRect) && offs4 == offs3 + sizeof(int));\n   CHECK_IF(totsize == offs4 + sizeof(int));\n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n   meth_object = protocol_getMethodDescription (proto,\n \t\t  @selector(getEnum:enum:bool:), YES, NO);\n   meth = &meth_object; \n-#else\n-  meth = [proto descriptionForClassMethod: @selector(getEnum:enum:bool:)];\n-#endif\n \n   /* Here we have the complication that 'enum Enum' could be encoded\n      as 'i' on __NEXT_RUNTIME_, and (most likely) as 'I' on the GNU\n@@ -100,13 +87,9 @@ int main(void) {\n \n   CHECK_IF(offs3 == offs2 + sizeof(XXPoint *) && offs4 == offs3 + sizeof(enum Enum));\n   CHECK_IF(totsize == offs4 + sizeof(int));  /* 'ObjCBool' is really 'char' */\n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n   meth_object = protocol_getMethodDescription (proto,\n \t\t  @selector(getBool:), YES, NO);\n   meth = &meth_object;\n-#else\n-  meth = [proto descriptionForClassMethod: @selector(getBool:)];         \n-#endif\n   scan_initial(\"^^B%u@%u:%u^*%u\");\n   CHECK_IF(totsize == offs2 + sizeof(ObjCBool **));\n   return 0;"}, {"sha": "17639e8c19f90eb32cbdacf23168c2076ee747c9", "filename": "gcc/testsuite/objc.dg/encode-4.m", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-4.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,13 +4,8 @@\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n-#include \"../objc-obj-c++-shared/next-mapping.h\"\n-#ifdef __NEXT_RUNTIME__\n-#include <objc/objc-class.h>\n-#else\n-#include <objc/objc-api.h>\n-#endif\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n+#include \"../objc-obj-c++-shared/runtime.h\"\n \n extern void abort(void);\n extern int strcmp(const char *s1, const char *s2);\n@@ -31,7 +26,7 @@\n   struct Innermost innermost;\n };\n \n-@interface Int1: Object {\n+@interface Int1: TestsuiteObject {\n   signed char a, b;\n   Int2 *int2;\n   struct Nested nested;\n@@ -50,44 +45,43 @@ @implementation Int1\n @implementation Int2\n @end\n \n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-Ivar *ivar;\n-#else\n+#if defined(__NEXT_RUNTIME__) && !defined(NEXT_OBJC_USE_NEW_INTERFACE)\n struct objc_ivar *ivar;\n+#else\n+Ivar *ivar;\n #endif\n \n static void check_ivar(const char *name, const char *type) {\n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-  CHECK_IF(!strcmp(ivar_getName(*ivar), name));\n-  CHECK_IF(!strcmp(ivar_getTypeEncoding(*ivar), type));\n-#else\n+#if defined(__NEXT_RUNTIME__) && !defined(NEXT_OBJC_USE_NEW_INTERFACE)\n   CHECK_IF(!strcmp(ivar->ivar_name, name));\n   CHECK_IF(!strcmp(ivar->ivar_type, type));\n+#else\n+  CHECK_IF(!strcmp(ivar_getName(*ivar), name));\n+  CHECK_IF(!strcmp(ivar_getTypeEncoding(*ivar), type));\n #endif\n   ivar++;\n }\n \n int main(void) {\n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-  ivar = class_copyIvarList ((Class)objc_get_class(\"Int1\"), NULL);\n+#if defined(__NEXT_RUNTIME__) && !defined(NEXT_OBJC_USE_NEW_INTERFACE)\n+  ivar = ((Class)objc_getClass(\"Int1\"))->ivars->ivar_list;\n #else\n-  ivar = ((Class)objc_get_class(\"Int1\"))->ivars->ivar_list;\n+  ivar = class_copyIvarList ((Class)objc_getClass(\"Int1\"), NULL);\n #endif\n   check_ivar(\"a\", \"c\");\n   check_ivar(\"b\", \"c\");\n   check_ivar(\"int2\", \"@\\\"Int2\\\"\");\n   check_ivar(\"nested\", \n     \"{Nested=\\\"a\\\"f\\\"b\\\"f\\\"next\\\"@\\\"Int1\\\"\\\"innermost\\\"{Innermost=\\\"a\\\"C\\\"b\\\"C\\\"encl\\\"^{Nested}}}\");\n     \n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-  ivar = class_copyIvarList ((Class)objc_get_class(\"Int2\"), NULL);\n+#if defined(__NEXT_RUNTIME__) && !defined(NEXT_OBJC_USE_NEW_INTERFACE)\n+  ivar = ((Class)objc_getClass(\"Int2\"))->ivars->ivar_list;\n #else\n-  ivar = ((Class)objc_get_class(\"Int2\"))->ivars->ivar_list;\n+  ivar = class_copyIvarList ((Class)objc_getClass(\"Int2\"), NULL);\n #endif\n   check_ivar(\"innermost\", \"^{Innermost=CC^{Nested}}\");\n   check_ivar(\"base\", \"@\\\"Int1\\\"\");\n   \n   return 0;\n }\n \n-#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "74c58ab95c8679815be12ffe6be5f3629f5acfa6", "filename": "gcc/testsuite/objc.dg/encode-5.m", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-5.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -9,21 +9,13 @@ we need to decay the arrays into pointers (as C does).\n \n /* Contributed by Alexander Malmberg <alexander@malmberg.org>  */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n-#include \"../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n+#include \"../objc-obj-c++-shared/runtime.h\"\n #include <stdlib.h>\n #include <stdio.h>\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n-#ifdef __NEXT_RUNTIME__\n-#define METHOD Method\n-#else\n-#include <objc/objc-api.h>\n-#define METHOD Method_t\n-#define method_get_types(M) (M)->method_types\n-#endif\n-\n-@interface Test : Object\n+@interface Test : TestsuiteObject\n { float j; }\n -(void) test2: (int [5])a with: (int [])b;\n -(id) test3: (Test **)b; /* { dg-message \"previous declaration of .\\\\-\\\\(id\\\\)test3:\\\\(Test \\\\*\\\\*\\\\)b.\" } */\n@@ -47,8 +39,8 @@ -(void) test3: (Test [3][4])b {  /* { dg-warning \"conflicting types for .\\\\-\\\\(v\n \n int main(int argc, char **argv)\n {\n-  Class testClass = objc_get_class(\"Test\");\n-  METHOD meth;\n+  Class testClass = objc_getClass(\"Test\");\n+  Method meth;\n \n   cc[0] = [Test new];\n   CHECK_IF (bb[3] == 3);\n@@ -58,16 +50,16 @@ int main(int argc, char **argv)\n   [*c test2: bb with: bb + 5];\n   CHECK_IF (bb[3] == 5);\n \n-  meth = class_get_instance_method(testClass, @selector(test2:with:));\n+  meth = class_getInstanceMethod(testClass, @selector(test2:with:));\n   offs1 = offs2 = offs3 = offs4 = offs5 = offs6 = -1;\n-  sscanf(method_get_types(meth), \"v%d@%d:%d[%di]%d^i%d\", &offs1, &offs2, &offs3,\n+  sscanf(method_getTypeEncoding(meth), \"v%d@%d:%d[%di]%d^i%d\", &offs1, &offs2, &offs3,\n       &offs4, &offs5, &offs6);\n   CHECK_IF (!offs2 && offs4 == 5 && offs3 > 0);\n   CHECK_IF (offs5 == 2 * offs3 && offs6 == 3 * offs3 && offs1 == 4 * offs3);\n   \n-  meth = class_get_instance_method(testClass, @selector(test3:));\n+  meth = class_getInstanceMethod(testClass, @selector(test3:));\n   offs1 = offs2 = offs3 = offs4 = offs5 = offs6 = -1;\n-  sscanf(method_get_types(meth), \"v%d@%d:%d[%d[%d{Test=#f}]]%d\", &offs1, &offs2, &offs3,\n+  sscanf(method_getTypeEncoding(meth), \"v%d@%d:%d[%d[%d{Test=#f}]]%d\", &offs1, &offs2, &offs3,\n       &offs4, &offs5, &offs6);\n   CHECK_IF (!offs2 && offs4 == 3 && offs5 == 4 && offs3 > 0);\n   CHECK_IF (offs6 == 2 * offs3 && offs1 == 3 * offs3);"}, {"sha": "20cd400df51af88d79e85f520bda52d218cc3fc3", "filename": "gcc/testsuite/objc.dg/encode-7-next-64bit.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-7-next-64bit.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-7-next-64bit.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-7-next-64bit.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -9,7 +9,7 @@\n #include <string.h>\n #include <stdlib.h>\n #include <objc/Object.h>\n-#include \"../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../objc-obj-c++-shared/runtime.h\"\n \n #define CHECK_IF(E) if (!(E)) abort ()\n "}, {"sha": "2ba83d57510e9dfe88831ccccf03bbaa8bbccaa4", "filename": "gcc/testsuite/objc.dg/encode-7-next.m", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-7-next.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-7-next.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-7-next.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -6,8 +6,8 @@\n /* { dg-options \"-Wno-deprecated-declarations\" } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n-#include \"../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n+#include \"../objc-obj-c++-shared/runtime.h\"\n #include <stdbool.h>\n #include <string.h>\n #include <stdlib.h>\n@@ -99,10 +99,10 @@\n   unsigned int parameterMask;\n } NSErrorUserInfoFormatter;\n \n-typedef Object MyObj;\n-typedef Object *MyPtr;\n+typedef TestsuiteObject MyObj;\n+typedef TestsuiteObject *MyPtr;\n \n-@interface Foo: Object {\n+@interface Foo: TestsuiteObject {\n   NSATSGlyphStorageRun r;\n }\n - (NSError *)_errorWithOSStatus:(OSStatus)inOSStatus ref1:(const FSRef *)inRef1 ref2:(const struct FSRef *)inRef2\n@@ -114,7 +114,7 @@ - (const id)anotherMeth:(const SEL)sel and:(const Foo *)foo and:(const struct ob\n - (id)str1:(const char *)str1 str2:(char *)str2 str3:(char *const)str3 str4:(const char *const)str4;\n - (oneway void)foo1:(Foo *)foo1 foo2:(const Foo *)foo2 foo3:(Foo *const)foo3 foo4:(const Foo *const)foo4;\n - (in const char *)sel1:(const SEL)sel1 id1:(const id)id1;\n-- (inout id)obj1:(const MyPtr)obj1 obj2:(Object *const)obj2 obj3:(MyObj *const)obj3;\n+- (inout id)obj1:(const MyPtr)obj1 obj2:(TestsuiteObject *const)obj2 obj3:(MyObj *const)obj3;\n + (ComponentInstance)_defaultScriptingComponent;\n - (NSString *)_formatCocoaErrorString:(NSString *)formatString parameters:(const char *)parameters \n   applicableFormatters:(NSErrorUserInfoFormatter **)formatters count:(int)numFormatters;\n@@ -156,7 +156,7 @@ - (oneway void)foo1:(Foo *)foo1 foo2:(const Foo *)foo2 foo3:(Foo *const)foo3 foo\n - (in const char *)sel1:(const SEL)sel1 id1:(const id)id1 {\n   return \"Hello\";\n }  \n-- (inout id)obj1:(const MyPtr)obj1 obj2:(Object *const)obj2 obj3:(MyObj *const)obj3 {\n+- (inout id)obj1:(const MyPtr)obj1 obj2:(TestsuiteObject *const)obj2 obj3:(MyObj *const)obj3 {\n   return self;\n }\n + (ComponentInstance)_defaultScriptingComponent {\n@@ -222,7 +222,7 @@ int main(void) {\n   CHECK_IF (!strcmp (meth->method_types, \"rn*16@0:4r:8r@12\"));\n \n   meth = class_getInstanceMethod (fooClass, @selector(obj1:obj2:obj3:));\n-  CHECK_IF (!strcmp (meth->method_types, \"N@20@0:4r@8@12^{Object=#}16\"));\n+  CHECK_IF (!strcmp (meth->method_types, \"N@20@0:4r@8@12^{TestsuiteObject=#}16\"));\n \n   meth = class_getClassMethod (fooClass, @selector(_defaultScriptingComponent));\n   CHECK_IF (!strcmp (meth->method_types, \"^{ComponentInstanceRecord=[1l]}8@0:4\"));"}, {"sha": "0cea9356b71e7a992d386e32753c009c0ad88fcb", "filename": "gcc/testsuite/objc.dg/encode-7.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-7.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include <objc/encoding.h>\n+#include <objc/runtime.h>\n #include <stdlib.h>\n \n struct f"}, {"sha": "a10e4e9663a9488adbcee7ea82876a56108bdf47", "filename": "gcc/testsuite/objc.dg/encode-8.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-8.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-8.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-8.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include <objc/encoding.h>\n+#include <objc/runtime.h>\n #include <stdlib.h>\n \n union f"}, {"sha": "77dd35a1075de9b8d1dcfc21c83ca82cbe796775", "filename": "gcc/testsuite/objc.dg/exceptions-2.m", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,15 +2,14 @@\n /* { dg-do run } */\n /* { dg-options \"-fobjc-exceptions\" } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.m\" } */\n \n /* This test checks the syntax @catch (...) which catches any\n    exceptions.  Check that code using it runs correctly.  */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdlib.h>\n \n-@interface MyObject : Object\n+@interface MyObject : TestsuiteObject\n @end\n \n @implementation MyObject\n@@ -45,7 +44,7 @@ int main (void)\n   if (test ([MyObject new]) != 5)\n     abort ();\n \n-  if (test ([Object new]) != 6)\n+  if (test ([TestsuiteObject new]) != 6)\n     abort ();\n \n   return 0;"}, {"sha": "ed97e156bd017a4822a76e169400daf689dbc308", "filename": "gcc/testsuite/objc.dg/fix-and-continue-1.m", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ffix-and-continue-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ffix-and-continue-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ffix-and-continue-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -6,14 +6,14 @@\n /* { dg-options \"-mfix-and-continue\" } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdlib.h>\n \n @class MyTarget, MySet;\n \n int global_value = 0;\n \n-@interface MyTargetBuildContext : Object\n+@interface MyTargetBuildContext : TestsuiteObject\n {\n   MyTarget * _target;\n   unsigned _cacheInvalDisableCount;\n@@ -31,7 +31,7 @@ @interface MyTargetBuildContext (PrivateMethods)\n + (MySet *)_headerFileExtensions;\n @end\n \n-@interface MyCountedSet: Object {\n+@interface MyCountedSet: TestsuiteObject {\n @public\n   int cardinality;\n }\n@@ -52,7 +52,7 @@ - (id)sortedArrayUsingFunction:(int (*)(id, id, void *))comparator with:(int)val\n }  \n @end\n \n-@implementation MyTargetBuildContext : Object\n+@implementation MyTargetBuildContext : TestsuiteObject\n - (id)initWithTarget:(MyTarget *)target\n {\n   self = [super init];\n@@ -90,4 +90,3 @@ int main(void) {\n   return 0;\n }\n \n-#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "03ae9ebd9cc268629d337423a7fd6905d1a61007", "filename": "gcc/testsuite/objc.dg/fix-and-continue-2.m", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ffix-and-continue-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ffix-and-continue-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ffix-and-continue-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -6,18 +6,18 @@\n /* { dg-do assemble { target *-*-darwin* } } */\n /* { dg-options \"-mfix-and-continue\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface Foo: Object\n-+ (Object *)indexableFileTypes;\n+@interface Foo: TestsuiteObject\n++ (TestsuiteObject *)indexableFileTypes;\n @end\n \n @implementation Foo\n-+ (Object *)indexableFileTypes\n++ (TestsuiteObject *)indexableFileTypes\n {\n-  static Object *fileTypes = 0;\n+  static TestsuiteObject *fileTypes = 0;\n   if(!fileTypes) {\n-    fileTypes = [Object new];\n+    fileTypes = [TestsuiteObject new];\n   }\n   return fileTypes;\n }"}, {"sha": "b8df5879dae1d8b191f2ae393d82eaa720d15178", "filename": "gcc/testsuite/objc.dg/foreach-1.m", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,10 +4,9 @@\n /* { dg-do run } */\n /* { dg-skip-if \"No NeXT fast enum. pre-Darwin9\" { *-*-darwin[5-8]* } { \"-fnext-runtime\" } { \"\" } } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.m\" } */\n /* { dg-options \"-Wall\" } */\n \n-#import \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n \n extern void abort (void);\n /*\n@@ -19,7 +18,7 @@\n   unsigned long extra[5];\n };\n */\n-@interface Object (NSFastEnumeration)\n+@interface TestsuiteObject (NSFastEnumeration)\n - (unsigned long)countByEnumeratingWithState: (struct __objcFastEnumerationState *)state\n                                      objects:(id *)stackbuf \n                                        count:(unsigned int)len;\n@@ -44,7 +43,7 @@ int main (void)\n     abort ();\n \n   /* Test that if nothing is done, object is set to nil.  */\n-  object = [Object new];\n+  object = [TestsuiteObject new];\n \n   for (object in array)\n     ;"}, {"sha": "93bc9028463f4288f71eae74df255260f0d13da9", "filename": "gcc/testsuite/objc.dg/foreach-2.m", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -5,10 +5,9 @@\n /* { dg-skip-if \"No NeXT fast enum. pre-Darwin9\" { *-*-darwin[5-8]* } { \"-fnext-runtime\" } { \"\" } } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n /* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n-/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.m ../objc-obj-c++-shared/nsconstantstring-class-impl.m\" } */\n+/* { dg-additional-sources \"../objc-obj-c++-shared/nsconstantstring-class-impl.m\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n-#include \"../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #ifndef __NEXT_RUNTIME__\n #include <objc/NXConstStr.h>\n #else\n@@ -32,7 +31,7 @@\n     enumeration.  You create the array with some objects; you can\n     mutate the array, and you can fast-enumerate it.\n  */\n-@interface MyArray : Object\n+@interface MyArray : TestsuiteObject\n {\n   unsigned int length;\n   id *objects;\n@@ -45,7 +44,7 @@ - (unsigned long)countByEnumeratingWithState: (struct __objcFastEnumerationState\n                                        count:(unsigned long)len;\n @end\n \n-@implementation MyArray : Object\n+@implementation MyArray : TestsuiteObject\n - (id) initWithLength: (unsigned int)l\n \t      objects: (id *)o\n {\n@@ -90,7 +89,7 @@ - (unsigned long)countByEnumeratingWithState: (struct __objcFastEnumerationState\n int main (void)\n {\n   MyArray *array;\n-  Object *object;\n+  TestsuiteObject *object;\n   int test_variable, counter, i;\n   id *objects;\n "}, {"sha": "ba94797427e69c08c742c982e4f1635c72872740", "filename": "gcc/testsuite/objc.dg/foreach-3.m", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-3.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -7,8 +7,7 @@ aborts at the right time (when the mutation happens).  It currently\n    works, but how do we tell the testsuite to test for it ?\n */\n \n-#import \"../objc-obj-c++-shared/Object1.h\"\n-#import \"../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #ifndef __NEXT_RUNTIME__\n #include <objc/NXConstStr.h>\n #endif\n@@ -30,7 +29,7 @@ aborts at the right time (when the mutation happens).  It currently\n     enumeration.  You create the array with some objects; you can\n     mutate the array, and you can fast-enumerate it.\n  */\n-@interface MyArray : Object\n+@interface MyArray : TestsuiteObject\n {\n   unsigned int length;\n   id *objects;\n@@ -43,7 +42,7 @@ - (unsigned long)countByEnumeratingWithState: (struct __objcFastEnumerationState\n                                        count:(unsigned long)len;\n @end\n \n-@implementation MyArray : Object\n+@implementation MyArray : TestsuiteObject\n - (id) initWithLength: (unsigned int)l\n \t      objects: (id *)o\n {\n@@ -90,7 +89,7 @@ - (unsigned long)countByEnumeratingWithState: (struct __objcFastEnumerationState\n int main (void)\n {\n   MyArray *array;\n-  Object *object;\n+  TestsuiteObject *object;\n   int counter, i;\n   id *objects;\n "}, {"sha": "faee73b82234d8f3abd2e4957abf1273daee60e2", "filename": "gcc/testsuite/objc.dg/foreach-4.m", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-4.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -5,10 +5,9 @@\n /* { dg-skip-if \"No NeXT fast enum. pre-Darwin9\" { *-*-darwin[5-8]* } { \"-fnext-runtime\" } { \"\" } } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n /* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n-/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.m ../objc-obj-c++-shared/nsconstantstring-class-impl.m\" } */\n+/* { dg-additional-sources \"../objc-obj-c++-shared/nsconstantstring-class-impl.m\" } */\n \n-#import \"../objc-obj-c++-shared/Object1.h\"\n-#import \"../objc-obj-c++-shared/next-mapping.h\"\n+#import \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #ifndef __NEXT_RUNTIME__\n #include <objc/NXConstStr.h>\n #else\n@@ -32,7 +31,7 @@\n     enumeration.  You create the array with some objects; you can\n     mutate the array, and you can fast-enumerate it.\n  */\n-@interface MyArray : Object\n+@interface MyArray : TestsuiteObject\n {\n   unsigned int length;\n   id *objects;\n@@ -45,7 +44,7 @@ - (unsigned long)countByEnumeratingWithState: (struct __objcFastEnumerationState\n                                        count:(unsigned long)len;\n @end\n \n-@implementation MyArray : Object\n+@implementation MyArray : TestsuiteObject\n - (id) initWithLength: (unsigned int)l\n \t      objects: (id *)o\n {"}, {"sha": "dce26fa3e9395e4769f249384d6ffaf8413e8960", "filename": "gcc/testsuite/objc.dg/foreach-5.m", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-5.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -5,10 +5,9 @@\n /* { dg-skip-if \"No NeXT fast enum. pre-Darwin9\" { *-*-darwin[5-8]* } { \"-fnext-runtime\" } { \"\" } } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n /* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n-/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.m ../objc-obj-c++-shared/nsconstantstring-class-impl.m\" } */\n+/* { dg-additional-sources \"../objc-obj-c++-shared/nsconstantstring-class-impl.m\" } */\n \n-#import \"../objc-obj-c++-shared/Object1.h\"\n-#import \"../objc-obj-c++-shared/next-mapping.h\"\n+#import \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #ifndef __NEXT_RUNTIME__\n #include <objc/NXConstStr.h>\n #else\n@@ -30,7 +29,7 @@\n    enumeration.  You create the array with some objects; you can\n    mutate the array, and you can fast-enumerate it.\n */\n-@interface MyArray : Object\n+@interface MyArray : TestsuiteObject\n {\n   unsigned int length;\n   id *objects;\n@@ -43,7 +42,7 @@ - (unsigned long)countByEnumeratingWithState: (NSFastEnumerationState *)state\n                                        count:(unsigned long)len;\n @end\n \n-@implementation MyArray : Object\n+@implementation MyArray : TestsuiteObject\n - (id) initWithLength: (unsigned int)l\n \t      objects: (id *)o\n {"}, {"sha": "b0a927be09593f3810297e7c20391002714fd3f5", "filename": "gcc/testsuite/objc.dg/foreach-6.m", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-6.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,10 @@\n /* Test basic Objective-C foreach syntax.  This tests warnings and errors.  */\n /* { dg-do compile } */\n \n-#import \"../objc-obj-c++-shared/Object1.h\"\n-#import \"../objc-obj-c++-shared/next-mapping.h\"\n+#import \"../objc-obj-c++-shared/TestsuiteObject.h\"\n+#import <objc/objc.h>\n+#undef  nil\n+#define nil ((id)0)\n \n /*\n struct __objcFastEnumerationState\n@@ -13,7 +15,7 @@\n   unsigned long extra[5];\n };\n */\n-@interface Object (NSFastEnumeration)\n+@interface TestsuiteObject (NSFastEnumeration)\n - (unsigned long)countByEnumeratingWithState: (struct __objcFastEnumerationState *)state\n                                      objects:(id *)stackbuf \n                                        count:(unsigned int)len;\n@@ -46,7 +48,7 @@ int main (void)\n     ;\n \n   for (12 in array) /* { dg-error \"invalid iterating variable in fast enumeration\" } */\n-    ;               /* { dg-error \"iterating variable in fast enumeration is not an object\" \"\" { target *-*-* } 48 } */\n+    ;               /* { dg-error \"iterating variable in fast enumeration is not an object\" \"\" { target *-*-* } 50 } */\n \n   for (object in 12) /* { dg-error \"collection in fast enumeration is not an object\" } */\n     ;"}, {"sha": "c56521172df74e28fea83d7771742e53ff58e65c", "filename": "gcc/testsuite/objc.dg/foreach-7.m", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fforeach-7.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,9 +1,10 @@\n /* Test basic Objective-C foreach syntax.  This tests warnings and errors.  */\n /* { dg-do compile } */\n \n-#import \"../objc-obj-c++-shared/Object1.h\"\n-#import \"../objc-obj-c++-shared/next-mapping.h\"\n-\n+#import \"../objc-obj-c++-shared/TestsuiteObject.h\"\n+#import <objc/objc.h>\n+#undef  nil\n+#define nil ((id)0)\n /*\n struct __objcFastEnumerationState\n {\n@@ -13,7 +14,7 @@\n   unsigned long extra[5];\n };\n */\n-@interface Object (NSFastEnumeration)\n+@interface TestsuiteObject (NSFastEnumeration)\n - (unsigned long)countByEnumeratingWithState: (struct __objcFastEnumerationState *)state\n                                      objects:(id *)stackbuf \n                                        count:(unsigned int)len;\n@@ -36,10 +37,10 @@ int main (void)\n   id object = nil;\n \n   for (typedef int my_typedef in array) /* { dg-error \"declaration of non-variable\" } */\n-    ;                                   /* { dg-error \"iterating variable in fast enumeration is not an object\" \"\" { target *-*-* } 38 } */\n+    ;                                   /* { dg-error \"iterating variable in fast enumeration is not an object\" \"\" { target *-*-* } 39 } */\n \n   for (function () in nil) /* { dg-error \"invalid iterating variable in fast enumeration\" } */\n-    ;                      /* { dg-error \"iterating variable in fast enumeration is not an object\" \"\" { target *-*-* } 41 } */\n+    ;                      /* { dg-error \"iterating variable in fast enumeration is not an object\" \"\" { target *-*-* } 42 } */\n \n   for (object_function () in nil) /* { dg-error \"invalid iterating variable in fast enumeration\" } */\n     ;"}, {"sha": "7c6ea9a85e70259832e387199656288f92cf5a02", "filename": "gcc/testsuite/objc.dg/fsf-package-0.m", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ffsf-package-0.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ffsf-package-0.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ffsf-package-0.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,9 +1,8 @@\n /* { dg-do compile } */\n \n-#import \"../objc-obj-c++-shared/Object1.h\"\n-#include <objc/objc-api.h>\n+#import \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface obj : Object\n+@interface obj : TestsuiteObject\n {\n @public\n   int v1;\n@@ -18,7 +17,7 @@ - (int) value;\n - (void) setValue: (int)number;\n @end\n \n-@implementation obj : Object\n+@implementation obj : TestsuiteObject\n \n - (int) value { return v1; }\n - (void) setValue: (int)number { v1 = number; }\n@@ -33,5 +32,5 @@ void foo (void)\n   a->v2 = 1;\n   a->v3 = [a value] - a->v2;\t/* { dg-warning \".v3. is @protected\" } */\n   a->v4 = a->v3 - 1;\t\t/* { dg-warning \".v4. is @private\" } */\n-  \t\t\t\t/* { dg-warning \".v3. is @protected\" \"\" { target *-*-* } 35 } */\n+  \t\t\t\t/* { dg-warning \".v3. is @protected\" \"\" { target *-*-* } 34 } */\n }"}, {"sha": "1c03dabeeace42533bcaf6e54a67963178f601f8", "filename": "gcc/testsuite/objc.dg/func-ptr-1.m", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ffunc-ptr-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ffunc-ptr-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ffunc-ptr-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,15 +2,15 @@\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n \n extern int strcmp(const char *, const char *);\n extern void abort(void);\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n typedef float (*floatfunc)(float, float);\n \n-@interface MyObject : Object\n+@interface MyObject : TestsuiteObject\n {\n @public\n   int (*ivar)(int, int, int);\n@@ -47,5 +47,3 @@ int main ()\n   return(0);\n }\n \n-#include \"../objc-obj-c++-shared/Object1-implementation.h\"\n-"}, {"sha": "20db39d3cc2316e5bc7f0ec427ae0da6ea657130", "filename": "gcc/testsuite/objc.dg/func-ptr-2.m", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ffunc-ptr-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ffunc-ptr-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ffunc-ptr-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -5,10 +5,9 @@\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n #include <stdlib.h>\n-/* provide an Object class for NeXT runtimes 10.5 and above */\n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n \n-@interface Func: Object\n+@interface Func: TestsuiteObject\n + (int) processNumber:(int)a and:(int)b usingFunction:(int(int,int))func;\n @end\n \n@@ -38,4 +37,3 @@ int main(void) {\n   return 0;\n }\n \n-#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "824e4ba6503a8b7f960e1faf6a1d2aa7e4bb39a8", "filename": "gcc/testsuite/objc.dg/gnu-encoding/struct-layout-encoding-1_generate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-encoding%2Fstruct-layout-encoding-1_generate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-encoding%2Fstruct-layout-encoding-1_generate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-encoding%2Fstruct-layout-encoding-1_generate.c?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -261,7 +261,7 @@ switchfiles (int fields)\n /* { dg-do run } */\\n\\\n /* { dg-options \\\"-w -I%s -fgnu-runtime\\\" } */\\n\", srcdir);\n     }\n-  fprintf(outfile, \"#include <objc/encoding.h> \\n\\\n+  fprintf(outfile, \"#include <objc/runtime.h> \\n\\\n #include \\\"struct-layout-1.h\\\"\\n\\\n \\n\\\n int fails; \\n\\"}, {"sha": "c73cd384c412fc9fc2dba1db45b127b353a23a52", "filename": "gcc/testsuite/objc.dg/gnu-runtime-1.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-runtime-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-runtime-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-runtime-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,9 +4,9 @@\n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface FooBar: Object\n+@interface FooBar: TestsuiteObject\n - (void)boo;\n @end\n "}, {"sha": "d26f48cf9801a146e98dce0e121ac9e3382ca504", "filename": "gcc/testsuite/objc.dg/gnu-runtime-3.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-runtime-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-runtime-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-runtime-3.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,12 +3,12 @@\n /* { dg-do run } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include <objc/Object.h>\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <string.h>\n #include <stdlib.h>\n \n int main(int argc, void **args)\n {\n-  [Object new];\n+  [TestsuiteObject new];\n   return 0;\n }"}, {"sha": "355c2cf3c60d7d9d741c52b8220f95c458c5174d", "filename": "gcc/testsuite/objc.dg/headers.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fheaders.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fheaders.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fheaders.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -12,11 +12,11 @@\n #include <objc/Protocol.h>\n #ifdef __NEXT_RUNTIME__\n #include <objc/objc-runtime.h>\n+#include <objc/objc-api.h>\n #else\n-#include <objc/encoding.h>\n+#include <objc/runtime.h>\n #endif\n \n-#include <objc/objc-api.h>\n #include <objc/objc.h>\n \n #ifndef __NEXT_RUNTIME__"}, {"sha": "4501d01a11e605d36771671817b0aa5aa7b035a6", "filename": "gcc/testsuite/objc.dg/isa-field-1.m", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fisa-field-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fisa-field-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fisa-field-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,17 +1,18 @@\n /* Ensure there are no bizarre difficulties with accessing the 'isa' field of objects.  */\n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n+#include \"../objc-obj-c++-shared/runtime.h\"\n \n-@interface Object (Test)\n+@interface TestsuiteObject (Test)\n - (Class) test1: (id)object;\n @end\n \n-@interface Derived: Object\n+@interface Derived: TestsuiteObject\n - (Class) test2: (id)object;\n @end\n \n-@implementation Object (Test)\n+@implementation TestsuiteObject (Test)\n \n Class test1(id object) {\n #ifdef __NEXT_RUNTIME__"}, {"sha": "61aeced408a28e99e0900614bd81d9f3cb4bc0d8", "filename": "gcc/testsuite/objc.dg/layout-1.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Flayout-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Flayout-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Flayout-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,13 +3,13 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wpadded -Wpacked\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface Derived1: Object\n+@interface Derived1: TestsuiteObject\n { }\n @end\n \n-@interface Derived2: Object\n+@interface Derived2: TestsuiteObject\n - (id) foo;\n @end\n "}, {"sha": "0880b2eee482aefb1a8fcd9e2a4f51c95ca99462", "filename": "gcc/testsuite/objc.dg/layout-2.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Flayout-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Flayout-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Flayout-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,10 +4,10 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wpadded\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n /* Implement a class, so that the metadata generation happens.  */\n-@interface MyClass : Object\n+@interface MyClass : TestsuiteObject\n @end\n \n @implementation MyClass"}, {"sha": "80ae0637c63ed9416e74b527f10335f13ca9f028", "filename": "gcc/testsuite/objc.dg/local-decl-2.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Flocal-decl-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Flocal-decl-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Flocal-decl-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,9 +3,9 @@\n /* Author: Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface Sprite: Object {\n+@interface Sprite: TestsuiteObject {\n   int sprite, spree;\n }\n + (void)setFoo:(int)foo;"}, {"sha": "1b6bf379fef46b9ca39fea265a1a9cf6f6c10511", "filename": "gcc/testsuite/objc.dg/lookup-1.m", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Flookup-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Flookup-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Flookup-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,9 +1,8 @@\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.m\" } */\n \n #include <stdlib.h>\n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n \n typedef struct MyWidget {\n   int a;\n@@ -15,13 +14,13 @@ @protocol MyProto\n - (MyWidget *)widget;\n @end\n \n-@interface Foo: Object\n+@interface Foo: TestsuiteObject\n @end\n \n @interface Bar: Foo <MyProto>\n @end\n \n-@interface Container: Object\n+@interface Container: TestsuiteObject\n + (MyWidget *)elementForView:(Foo *)view;\n @end\n \n@@ -38,7 +37,8 @@ @implementation Container\n + (MyWidget *)elementForView:(Foo *)view\n {\n   MyWidget *widget = (MyWidget *) nil;\n-  if ([view conformsTo:@protocol(MyProto)]) {\n+  if (class_conformsToProtocol (object_getClass (view),\n+\t\t\t\t@protocol(MyProto))) {\n     widget = [(Foo <MyProto> *)view widget];\n   }\n   return widget;"}, {"sha": "311fc3b910e786f7f227f0b02d456bb96bc63ce3", "filename": "gcc/testsuite/objc.dg/method-10.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-10.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -5,14 +5,14 @@ message sends (so that proper C/C++ argument conversions may\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n \n extern void abort(void);\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n static double d = 4.5920234e2;\n \n-@interface Foo : Object\n+@interface Foo : TestsuiteObject\n -(void) brokenType: (int)x floatingPoint: (double)y;\n @end\n \n@@ -32,4 +32,3 @@ int main(void)\n \treturn 0;\n }\n \n-#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "592038b9d9364dfd8ace75f5d4400c77ac89dea2", "filename": "gcc/testsuite/objc.dg/method-13.m", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-13.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-13.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-13.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -6,12 +6,7 @@\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n #include <objc/objc.h>\n-\n-#ifdef __NEXT_RUNTIME__\n-#define OBJC_GETCLASS objc_getClass\n-#else\n-#define OBJC_GETCLASS objc_get_class\n-#endif\n+#include \"../objc-obj-c++-shared/runtime.h\"\n \n extern void abort(void);\n extern int strcmp(const char *, const char *);\n@@ -48,16 +43,14 @@ - (const char *) method3 { return \"Derived::-method3\"; }\n @end\n \n @implementation Root\n-#ifdef __NEXT_RUNTIME__\n + initialize { return self; }\n-#endif\n - (const char *) method1 { return \"Root::-method1\"; }\n + (const char *) method2 { return \"Root::+method2\"; }\n @end\n \n int main(void)\n {\n-  Class obj = OBJC_GETCLASS(\"Derived\");\n+  Class obj = objc_getClass(\"Derived\");\n \n   /* None of the following should elicit compiler-time warnings.  */\n "}, {"sha": "d1a675e72cd5a4d316f2a6e8b46d07711fd4b61b", "filename": "gcc/testsuite/objc.dg/method-15.m", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-15.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-15.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-15.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,7 +4,9 @@\n \n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n+#include <objc/objc.h>\n+#include \"../objc-obj-c++-shared/runtime.h\"\n \n @class NSString;\n \n@@ -13,19 +15,19 @@ + (void)setUsesUserKeyEquivalents:(BOOL)flag;\n + (BOOL)usesUserKeyEquivalents;\n @end\n \n-@interface NSMenuItem : Object <NSMenuItem> {\n+@interface NSMenuItem : TestsuiteObject <NSMenuItem> {\n   @private\n   id _menu;\n }\n @end\n \n-@interface NSResponder : Object <NSMenuItem>\n+@interface NSResponder : TestsuiteObject <NSMenuItem>\n {\n   id _nextResponder;\n }\n @end\n \n-@interface Object(NSMenuValidation)\n+@interface TestsuiteObject(NSMenuValidation)\n - (BOOL)validateMenuItem:(id <NSMenuItem>)menuItem;\n @end\n "}, {"sha": "2eac939107055c7c2a6363553504495328091d21", "filename": "gcc/testsuite/objc.dg/method-17.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-17.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-17.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-17.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,9 +3,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wreturn-type -Wextra\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface Foo: Object\n+@interface Foo: TestsuiteObject\n - (id) meth1;\n - (void) meth2;\n @end\n@@ -15,7 +15,7 @@ - (void) meth2;\n @implementation Foo\n - (id) meth1 {\n   if (bar)\n-    return [Object new];\n+    return [TestsuiteObject new];\n   return; /* { dg-warning \"'return' with no value, in function returning non-void\" } */\n } \n - (void) meth2 {"}, {"sha": "9cc99995bde667f2e23af1c07cfc3682bc3034d8", "filename": "gcc/testsuite/objc.dg/method-19.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-19.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-19.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-19.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,7 +3,7 @@\n \n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n @class NotKnown;\n "}, {"sha": "de8de844c45172ece21e3a442809b61847a6dbc4", "filename": "gcc/testsuite/objc.dg/method-20b.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-20b.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-20b.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-20b.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,10 +2,9 @@\n    they should.  */\n /* { dg-do run } */\n /* { dg-options \"-O2\" } */\n-/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.m\" } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <string.h>\n #include <stdlib.h>\n \n@@ -19,7 +18,7 @@\n typedef char io_string_t[512];\n typedef char *(func_type)(const char *);\n \n-@interface DeviceObject: Object\n+@interface DeviceObject: TestsuiteObject\n - (void) func:(func_type)func stucPathInIORegistry:(io_string_t)ioRegPath;\n @end\n @implementation DeviceObject"}, {"sha": "6bf24ee275811ced0778299b77a4462ad158c715", "filename": "gcc/testsuite/objc.dg/method-3.m", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-3.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,17 +4,17 @@\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n \n extern void abort(void);\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n-@interface Int1: Object\n+@interface Int1: TestsuiteObject\n + (int) classMeth;\n - (int) instanceMeth;\n @end\n \n-@interface Int2: Object\n+@interface Int2: TestsuiteObject\n + (int) classMeth;      \n - (int) instanceMeth;\n @end\n@@ -45,4 +45,3 @@ int main(void) {\n   return 0;\n }\n \n-#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "8bd50ea825ebfaa9e7344d825ad5ac98111d9517", "filename": "gcc/testsuite/objc.dg/method-4.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-4.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -5,16 +5,16 @@\n /* { dg-do compile { target { *-*-darwin* && { ! lp64 } } } } */\n /* { dg-skip-if \"\" { *-*-darwin* } { \"-fgnu-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-typedef Object ObjectTypedef1;\n+typedef TestsuiteObject ObjectTypedef1;\n typedef ObjectTypedef1 ObjectTypedef2;\n @compatibility_alias ObjectAlias1 ObjectTypedef2;\n @compatibility_alias ObjectAlias2 ObjectAlias1;\n typedef ObjectAlias2 ObjectTypedef3;\n \n void foo(void) {\n-  id obj = [Object new];\n+  id obj = [TestsuiteObject new];\n   obj = [ObjectTypedef1 new];\n   obj = [ObjectTypedef2 new];\n   obj = [ObjectTypedef3 new];"}, {"sha": "8d868d13cc9f1e6345af035cd3d9f79f26f42432", "filename": "gcc/testsuite/objc.dg/method-6.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-6.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,7 +4,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wstrict-selector-match\" } */\n \n-#include \"../objc-obj-c++-shared/Protocol1.h\"\n+#include <objc/Protocol.h>\n \n @interface Base\n - (unsigned)port;"}, {"sha": "f0ea1d5f8e9d16b63e459d4825b6e010b1bbd409", "filename": "gcc/testsuite/objc.dg/method-7.m", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-7.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,26 +3,26 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wstrict-selector-match\" } */\n \n-\n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include <objc/objc.h>\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n @interface Class1\n-- (void)setWindow:(Object *)wdw;\n+- (void)setWindow:(TestsuiteObject *)wdw;\n @end\n \n @interface Class2\n - (void)setWindow:(Class1 *)window;\n @end\n \n id foo(void) {\n-  Object *obj = [[Object alloc] init];\n+  TestsuiteObject *obj = [[TestsuiteObject alloc] init];\n   id obj2 = obj;\n-  [obj setWindow:nil];  /* { dg-warning \".Object. may not respond to .\\\\-setWindow:.\" } */\n+  [obj setWindow:nil];  /* { dg-warning \".TestsuiteObject. may not respond to .\\\\-setWindow:.\" } */\n   /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 20 } */\n   /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 20 } */\n   /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 20 } */\n   [obj2 setWindow:nil]; /* { dg-warning \"multiple methods named .\\\\-setWindow:. found\" } */\n-  /* { dg-message \"using .\\\\-\\\\(void\\\\)setWindow:\\\\(Object \\\\*\\\\)wdw.\" \"\" { target *-*-* } 10 } */\n+  /* { dg-message \"using .\\\\-\\\\(void\\\\)setWindow:\\\\(TestsuiteObject \\\\*\\\\)wdw.\" \"\" { target *-*-* } 10 } */\n   /* { dg-message \"also found .\\\\-\\\\(void\\\\)setWindow:\\\\(Class1 \\\\*\\\\)window.\" \"\" { target *-*-* } 14 } */\n \n   return obj;"}, {"sha": "36f26f0e1885e99217633070add6077bfda23943", "filename": "gcc/testsuite/objc.dg/method-9.m", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-9.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-9.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-9.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -5,10 +5,10 @@ when method lookup succeeds (see also method-7.m).  */\n /* { dg-options \"-Wstrict-selector-match\" } */\n \n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n @protocol MyObject\n-- (id)initWithData:(Object *)data;\n+- (id)initWithData:(TestsuiteObject *)data;\n @end\n \n @protocol SomeOther\n@@ -19,9 +19,9 @@ @protocol MyCoding\n - (id)initWithData:(id<MyObject, MyCoding>)data;\n @end\n \n-@interface NTGridDataObject: Object <MyCoding>\n+@interface NTGridDataObject: TestsuiteObject <MyCoding>\n {\n-    Object<MyCoding> *_data;\n+    TestsuiteObject<MyCoding> *_data;\n }\n + (NTGridDataObject*)dataObject:(id<MyObject, MyCoding>)data;\n @end\n@@ -34,7 +34,7 @@ + (NTGridDataObject*)dataObject:(id<MyObject, MyCoding>)data\n {\n     NTGridDataObject *result = [[NTGridDataObject alloc] initWithData:data];\n     /* { dg-warning \"multiple methods named .\\\\-initWithData:. found\" \"\" { target *-*-* } 35 } */\n-    /* { dg-message \"using .\\\\-\\\\(id\\\\)initWithData:\\\\(Object \\\\*\\\\)data.\" \"\" { target *-*-* } 11 } */\n+    /* { dg-message \"using .\\\\-\\\\(id\\\\)initWithData:\\\\(TestsuiteObject \\\\*\\\\)data.\" \"\" { target *-*-* } 11 } */\n     /* { dg-message \"also found .\\\\-\\\\(id\\\\)initWithData:\\\\(id <MyObject, MyCoding>\\\\)data.\" \"\" { target *-*-* } 19 } */\n     /* { dg-message \"also found .\\\\-\\\\(id\\\\)initWithData:\\\\(int\\\\)data.\" \"\" { target *-*-* } 15 } */\n "}, {"sha": "12c0f640c36d4a339652d950081f79390becdbd8", "filename": "gcc/testsuite/objc.dg/objc-fast-4.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fobjc-fast-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fobjc-fast-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fobjc-fast-4.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,10 +3,10 @@\n /* { dg-options \"-O0\" } */\n /* Radar 4015820 */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n void foo(void) {\n-  Object *o;\n+  TestsuiteObject *o;\n   [o++ free];\n }\n /* { dg-final { scan-assembler-not \"L_objc_msgSend\\\\\\$non_lazy_ptr\" } } */"}, {"sha": "747da4d5199cee7b47852269ba4f87cd94ad9367", "filename": "gcc/testsuite/objc.dg/objc-gc-4.m", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fobjc-gc-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fobjc-gc-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fobjc-gc-4.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -6,11 +6,12 @@\n /* { dg-options \"-fobjc-gc\" } */\n /* { dg-prune-output \"cc1obj: warning: '-fobjc-gc' is ignored for '-fgnu-runtime'\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n+#include <objc/objc.h>\n \n @class MyWindow;\n \n-@interface MyDocument : Object {\n+@interface MyDocument : TestsuiteObject {\n     MyWindow *_window;\n }\n @end\n@@ -29,7 +30,7 @@ @interface MyFileDocument : MyDocument {\n @end\n \n @interface MyTextFileDocument : MyFileDocument {\n-    Object *_textStorage;\n+    TestsuiteObject *_textStorage;\n     struct __tfdFlags {\n         unsigned int immutable:1;\n         unsigned int lineEnding:2;"}, {"sha": "d8afd839c80012ff292bf0a05f36555a3d2ae006", "filename": "gcc/testsuite/objc.dg/pr18255.m", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fpr18255.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fpr18255.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fpr18255.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,6 +2,7 @@\n /* { dg-do run } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n \n+#include <objc/runtime.h>\n #include <objc/Protocol.h>\n #include <stdlib.h>\n \n@@ -17,7 +18,15 @@ @protocol b <a>\n \n int main (int argc, char **argv)\n {\n-  if ([@protocol(b) descriptionForInstanceMethod: @selector(aMethod)] == NULL)\n+  struct objc_method_description m;\n+  m = protocol_getMethodDescription (@protocol(b), @selector(aMethod), YES, YES);\n+\n+  if (m.name != NULL)\n+    abort ();\n+\n+  m = protocol_getMethodDescription (@protocol(a), @selector(aMethod), YES, YES);\n+\n+  if (m.name == NULL)\n     abort ();\n \n   return 0;"}, {"sha": "cf2631c9561433f7ffe792aa6d187b0b7213d619", "filename": "gcc/testsuite/objc.dg/pr23214.m", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fpr23214.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fpr23214.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fpr23214.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -6,16 +6,13 @@\n \n #include <objc/Protocol.h>\n  \n-#ifdef __OBJC2__\n-/* The ObjC V2 \"Object\" does not provide -class.  */\n @interface Object (TS_CAT)\n-- class;\n+- test;\n @end\n \n @implementation Object (TS_CAT)\n-- class { return isa; }\n+- test { return self; }\n @end\n-#endif\n \n @protocol A\n @end\n@@ -28,8 +25,8 @@ @interface Dummy : Object <B>\n \n int main ()\n {\n-  [@protocol(A) class];\n-  [@protocol(B) class];\n+  [@protocol(A) test];\n+  [@protocol(B) test];\n \n   return 0;\n }"}, {"sha": "60db350c0c1ed04f15ea5b3b0b8b03eef4aa7ea3", "filename": "gcc/testsuite/objc.dg/pr45878.m", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fpr45878.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fpr45878.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fpr45878.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -8,7 +8,17 @@ @interface Object\n {\n   Class isa;\n }\n-- (BOOL)isEqual:anObject;\n+@end\n+\n+@interface Object (Test)\n+- (BOOL)testIsEqual:anObject;\n+@end\n+\n+@implementation Object (Test)\n+- (BOOL)testIsEqual:anObject\n+{\n+  return self == anObject;\n+}\n @end\n \n #ifdef __NEXT_RUNTIME__\n@@ -30,7 +40,7 @@ @interface NXConstantString: Object\n \n void function (void)\n {\n-  if ([@\"strings\" isEqual: (id)0])\n+  if ([@\"strings\" testIsEqual: (id)0])\n     {\n       ;\n     }"}, {"sha": "60d34de53d15d2b48c57ae942870518089774475", "filename": "gcc/testsuite/objc.dg/property/property-1.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,12 +1,11 @@\n /* This program tests use of property provided setter/getter functions. */\n /* { dg-options \"-std=c99\" } */\n /* { dg-do run } */\n-/* { dg-additional-sources \"../../objc-obj-c++-shared/Object1.m\" } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#import \"../../objc-obj-c++-shared/Object1.h\"\n+#import \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n-@interface Bar : Object\n+@interface Bar : TestsuiteObject\n {\n   int iVar;\n }"}, {"sha": "c1447ca85db2bbe3e3a87a5782e305bf1fb7ae70", "filename": "gcc/testsuite/objc.dg/proto-lossage-2.m", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,13 +2,14 @@\n    provide a suitable method.  */\n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n+#include <objc/objc.h>\n \n @protocol Zot\n -(void) zot;\n @end\n \n-@interface Foo : Object <Zot>\n+@interface Foo : TestsuiteObject <Zot>\n @end\n \n int foo()"}, {"sha": "edbcb74f4376d836d6e0572b00600cee80f4a4a7", "filename": "gcc/testsuite/objc.dg/proto-lossage-3.m", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-3.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,9 +3,12 @@\n    Problem report and original fix by richard@brainstorm.co.uk.  */\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-#include \"../objc-obj-c++-shared/Protocol1.h\"\n-#include \"../objc-obj-c++-shared/Object1.h\"\n #include <objc/objc.h>\n+#include \"../objc-obj-c++-shared/runtime.h\"\n+\n+@interface MyClass\n+- name;\n+@end\n \n @protocol NoInstanceMethods\n + testMethod;\n@@ -18,9 +21,9 @@ @protocol NoClassMethods\n int\n main()\n {\n-[@protocol(NoInstanceMethods) descriptionForInstanceMethod: @selector(name)];\n-[@protocol(NoInstanceMethods) descriptionForClassMethod: @selector(name)];\n-[@protocol(NoClassMethods) descriptionForInstanceMethod: @selector(name)];\n-[@protocol(NoClassMethods) descriptionForClassMethod: @selector(name)];\n+protocol_getMethodDescription (@protocol(NoInstanceMethods), @selector(name), YES, YES);\n+protocol_getMethodDescription (@protocol(NoInstanceMethods), @selector(name), YES, NO);\n+protocol_getMethodDescription (@protocol(NoClassMethods), @selector(name), YES, YES);\n+protocol_getMethodDescription (@protocol(NoClassMethods), @selector(name), YES, NO);\n return 0;\n }"}, {"sha": "40eb0f9f5c5a544ab7b8a63b0a15cb9f513b8c8e", "filename": "gcc/testsuite/objc.dg/proto-qual-1.m", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-qual-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-qual-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-qual-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,11 +4,8 @@\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n+#include \"../objc-obj-c++-shared/runtime.h\"\n #include <objc/Protocol.h>\n-#ifndef __NEXT_RUNTIME__\n-#include <objc/objc-api.h>\n-#endif\n-#include \"../objc-obj-c++-shared/next-mapping.h\"\n \n /* The encoded parameter sizes will be rounded up to match pointer alignment.  */\n #define ROUND(s,a) (a * ((s + a - 1) / a))\n@@ -34,9 +31,7 @@ - (bycopy) address:(byref inout id)location with:(out short unsigned **)arg2 { r\n \n Protocol *proto;\n struct objc_method_description *meth;\n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n struct objc_method_description meth_object;\n-#endif\n unsigned totsize, offs0, offs1, offs2, offs3, offs4, offs5, offs6, offs7;\n \n static void scan_initial(const char *pattern) {\n@@ -48,22 +43,18 @@ static void scan_initial(const char *pattern) {\n \n int main(void) {\n   proto = @protocol(Retain);\n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+\n   meth_object = protocol_getMethodDescription (proto,\n \t\t  @selector(address:with:), YES, YES);\n   meth = &meth_object;\n-#else\n-  meth = [proto descriptionForInstanceMethod: @selector(address:with:)];\n-#endif\n+\n   scan_initial(\"O@%u@%u:%uNR@%uo^^S%u\");\n   CHECK_IF(offs3 == offs2 + aligned_sizeof(id) && totsize == offs3 + aligned_sizeof(unsigned));\n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n+\n   meth_object = protocol_getMethodDescription (proto,\n \t\t  @selector(retainArgument:with:), YES, NO);\n   meth = &meth_object;\n-#else\n-  meth = [proto descriptionForClassMethod: @selector(retainArgument:with:)];\n-#endif\n+\n   scan_initial(\"Vv%u@%u:%uOo@%un^*%u\");\n   CHECK_IF(offs3 == offs2 + aligned_sizeof(id) && totsize == offs3 + aligned_sizeof(char **));\n   return 0;"}, {"sha": "6cad2ffb092e29efcfd2232f07dbd68b7c74787c", "filename": "gcc/testsuite/objc.dg/selector-2.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fselector-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fselector-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fselector-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-Wselector\" } */\n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include <objc/objc.h>\n \n @interface Foo\n @end"}, {"sha": "21ce962e8166f231d0555b63c1462cf425a18aaa", "filename": "gcc/testsuite/objc.dg/set-not-used-1.m", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fset-not-used-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fset-not-used-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fset-not-used-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,18 +2,17 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wunused-but-set-variable\" } */\n \n-#import \"../objc-obj-c++-shared/Object1.h\"\n-#include <objc/objc-api.h>\n+#import \"../objc-obj-c++-shared/TestsuiteObject.m\"\n \n-@interface obj : Object\n+@interface obj : TestsuiteObject\n {\n   int value;\n }\n - (int) value;\n - (void) setValue: (int)number;\n @end\n \n-@implementation obj : Object\n+@implementation obj : TestsuiteObject\n \n - (int) value { return value; }\n - (void) setValue: (int)number { value = number; }"}, {"sha": "bf1623830a66a85689ab7657ea694e2ba42ed409", "filename": "gcc/testsuite/objc.dg/sizeof-1.m", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fsizeof-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fsizeof-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fsizeof-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,13 +3,13 @@\n /* { dg-options \"\" } */\n /* { dg-do run } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <objc/objc.h>\n \n extern void abort(void);\n #define CHECK_IF(expr) if(!(expr)) abort();\n \n-@interface Foo: Object {\n+@interface Foo: TestsuiteObject {\n   int a, b;\n   float c, d;\n }\n@@ -18,17 +18,16 @@ @interface Foo: Object {\n @implementation Foo\n @end\n \n-typedef Object MyObject;\n+typedef TestsuiteObject MyObject;\n typedef struct Foo Foo_type;\n \n-@compatibility_alias AliasObject Object;\n+@compatibility_alias AliasObject TestsuiteObject;\n \n int main(void) {\n-  CHECK_IF(sizeof(Foo) > sizeof(Object) && sizeof(Object) > 0);\n+  CHECK_IF(sizeof(Foo) > sizeof(TestsuiteObject) && sizeof(TestsuiteObject) > 0);\n   CHECK_IF(sizeof(Foo) == sizeof(Foo_type));\n-  CHECK_IF(sizeof(Object) == sizeof(MyObject));\n-  CHECK_IF(sizeof(Object) == sizeof(AliasObject));\n+  CHECK_IF(sizeof(TestsuiteObject) == sizeof(MyObject));\n+  CHECK_IF(sizeof(TestsuiteObject) == sizeof(AliasObject));\n   return 0;\n }\n \n-#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "a32024df59f317d8525b7672b9325ccdd966237e", "filename": "gcc/testsuite/objc.dg/special/unclaimed-category-1.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Funclaimed-category-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Funclaimed-category-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Funclaimed-category-1.h?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -5,11 +5,7 @@\n \n @interface TestClass\n {\n-#ifdef __OBJC2__\n   Class isa;\n-#else\n-  id isa;\n-#endif\n }\n - (int)D;\n @end"}, {"sha": "7b434b4db54b3ec6eb0457325065bf12fc04da51", "filename": "gcc/testsuite/objc.dg/special/unclaimed-category-1.m", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Funclaimed-category-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Funclaimed-category-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Funclaimed-category-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,10 +3,7 @@\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n #include <objc/objc.h>\n-#ifndef __NEXT_RUNTIME__\n-#include <objc/objc-api.h>\n-#endif\n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../../objc-obj-c++-shared/runtime.h\"\n \n extern void abort (void);\n \n@@ -27,9 +24,7 @@ - (int)D\n {\n   return 4;\n }\n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n \n@@ -38,13 +33,13 @@ int main (void)\n   TestClass *test;\n   Class testClass;\n \n-  testClass = objc_get_class (\"TestClass\");\n+  testClass = objc_getClass (\"TestClass\");\n   if (testClass == Nil)\n     {\n       abort ();\n     }\n   \n-  test = (TestClass *)(class_create_instance (testClass));\n+  test = (TestClass *)(class_createInstance (testClass, 0));\n   if (test == nil)\n     {\n       abort ();"}, {"sha": "ef8b1923079c73f0f67aac6d9c1a70e0e7b450ae", "filename": "gcc/testsuite/objc.dg/stret-1.m", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fstret-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fstret-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstret-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n \n extern void abort(void);\n #define CHECK_IF(expr) if(!(expr)) abort()\n@@ -16,12 +16,12 @@\n   float a, b, c, d, e, f;\n } globb = { 1, 2, 3, 4, 5, 6 };\n \n-@interface foo : Object\n+@interface foo : TestsuiteObject\n - (struct astruct) stret;\n - (struct bstruct) stretb;\n @end\n \n-@implementation foo : Object\n+@implementation foo : TestsuiteObject\n - (struct astruct) stret { return globa; }\n - (struct bstruct) stretb { return globb; }\n @end\n@@ -62,4 +62,3 @@ int main(void)\n   return 0;\n }\n \n-#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "3086ad9d0a6df1b9b0698d57a410d5e20ce1cd01", "filename": "gcc/testsuite/objc.dg/stret-2.m", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fstret-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fstret-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstret-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -6,7 +6,7 @@\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-require-effective-target ilp32 } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n struct astruct {\n   float a, b;\n@@ -17,12 +17,12 @@\n   float a, b, c, d, e, f;\n } globb = { 1, 2, 3, 4, 5, 6 };\n \n-@interface foo : Object\n+@interface foo : TestsuiteObject\n - (struct astruct) stret;\n - (struct bstruct) stretb;\n @end\n \n-@implementation foo : Object\n+@implementation foo : TestsuiteObject\n - (struct astruct) stret { return glob; }\n - (struct bstruct) stretb { return globb; }\n @end\n@@ -46,4 +46,3 @@ struct astruct afunc(foo *foo_obj) {\n \n /* { dg-final { scan-assembler-not \"objc_msgSend\\[^_S\\]\" } } */\n /* { dg-final { scan-assembler-not \"objc_msgSendSuper\\[^_\\]\" } } */\n-"}, {"sha": "408392fd5a069a93d9b24dd6368d0203d2297eee", "filename": "gcc/testsuite/objc.dg/strings/strings-1.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fstrings-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fstrings-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fstrings-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,7 @@\n /* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n /* { dg-do compile } */\n \n-#include \"../../objc-obj-c++-shared/Object1.h\"\n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../../objc-obj-c++-shared/runtime.h\"\n #ifndef __NEXT_RUNTIME__\n #include <objc/NXConstStr.h>\n #endif\n@@ -30,4 +29,4 @@\n id test_invalid8          = @\"te\" @@\"s\" @\"t\";    /* { dg-error \"repeated .@. before Objective-C string\" } */\n id test_invalid9          = @\"te\" @\"s\" @\"t\" @;   /* { dg-error \"stray .@. in program\" } */\n id test_invalidA          = @\"te\" @ st;          /* { dg-error \"stray .@. in program\" } */\n-                                                 /* { dg-error \"expected\" \"\" { target *-*-* } 32 } */\n+                                                 /* { dg-error \"expected\" \"\" { target *-*-* } 31 } */"}, {"sha": "b78cd8be3e2f43cadceea94054ccf580811f4d43", "filename": "gcc/testsuite/objc.dg/super-class-3.m", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-class-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-class-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-class-3.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,12 +4,12 @@\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n \n #include <stdlib.h>\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n-@interface _Child: Object\n+@interface _Child: TestsuiteObject\n + (int) flashCache;\n @end\n \n@@ -21,10 +21,10 @@ @interface Child (Categ)\n + (int) flushCache2;\n @end\n \n-int _Object = 23;  /* Should not conflict with @interface Object.  */\n+int _TestsuiteObject = 23;  /* Should not conflict with @interface TestsuiteObject.  */\n \n @implementation _Child\n-+ (int) flashCache { return 12 + _Object; }\n++ (int) flashCache { return 12 + _TestsuiteObject; }\n @end\n \n @implementation Child\n@@ -43,4 +43,3 @@ int main(void) {\n   return 0; \n }\n \n-#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "a1bafc0a7306a72f52a01064ee31439774e84097", "filename": "gcc/testsuite/objc.dg/super-class-4.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-class-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-class-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-class-4.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,11 +3,11 @@\n    should be traversed to find the @interface.  */\n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n @class MyWpModule;\n \n-@compatibility_alias MyObject Object;\n+@compatibility_alias MyObject TestsuiteObject;\n @compatibility_alias FictitiousModule MyWpModule;\n \n @protocol MySelTarget"}, {"sha": "e0f439359730ee63bde356f95a349f855ad10254", "filename": "gcc/testsuite/objc.dg/sync-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fsync-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fsync-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fsync-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-fobjc-exceptions\" } */\n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include <objc/objc.h>\n \n void foo(id sem)\n {"}, {"sha": "c73bbd92fbc728d1ae18253bee16c90c64177174", "filename": "gcc/testsuite/objc.dg/sync-2.m", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fsync-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fsync-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fsync-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,13 +1,13 @@\n /* Make sure that @synchronized parses and a very basic test runs.  */\n /* { dg-options \"-fobjc-exceptions -fgnu-runtime\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n int main (void)\n {\n-  Object *a = [Object new];\n-  Object *b = [Object new];\n-  Object *c = [Object new];\n+  TestsuiteObject *a = [TestsuiteObject new];\n+  TestsuiteObject *b = [TestsuiteObject new];\n+  TestsuiteObject *c = [TestsuiteObject new];\n \n   /* This single-threaded test just checks that @synchronized() uses a\n      recursive mutex, and that the runtime at least doesn't crash"}, {"sha": "53154d321baf7d5d6abc4cd0da7a870715a2c78d", "filename": "gcc/testsuite/objc.dg/threedotthree-abi-1.m", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fthreedotthree-abi-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fthreedotthree-abi-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fthreedotthree-abi-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,9 +4,9 @@\n /* { dg-require-effective-target ilp32 } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Protocol1.h\"\n #include <stdio.h>\n #include <string.h>\n+#include \"../objc-obj-c++-shared/runtime.h\"\n \n extern void abort();\n \n@@ -44,25 +44,32 @@ -(oneway void)methodCall_oOn:(in bycopy out id)someValue_oOn { }\n \n Protocol *proto = @protocol(CommonProtocol);\n struct objc_method_description *meth;\n+struct objc_method_description meth_object;\n \n int main()\n {\n-        meth = [proto descriptionForInstanceMethod: @selector(methodCall_On:)];\n+        meth_object = protocol_getMethodDescription (proto, @selector(methodCall_On:), YES, YES);\n+        meth = &meth_object;\n \tif (strcmp (meth->types, \"Vv12@0:4On@8\"))\n \t  abort();\n-        meth = [proto descriptionForInstanceMethod: @selector(methodCall_nO:)];\n+        meth_object = protocol_getMethodDescription (proto, @selector(methodCall_nO:), YES, YES);\n+        meth = &meth_object;\n \tif (strcmp (meth->types, \"Vv12@0:4nO@8\"))\n \t  abort();\n-        meth = [proto descriptionForInstanceMethod: @selector(methodCall_Oo:)];\n+        meth_object = protocol_getMethodDescription (proto, @selector(methodCall_Oo:), YES, YES);\n+        meth = &meth_object;\n \tif (strcmp (meth->types, \"Vv12@0:4Oo@8\"))\n \t  abort();\n-        meth = [proto descriptionForInstanceMethod: @selector(methodCall_oO:)];\n+        meth_object = protocol_getMethodDescription (proto, @selector(methodCall_oO:), YES, YES);\n+        meth = &meth_object;\n \tif (strcmp (meth->types, \"Vv12@0:4oO@8\"))\n \t  abort();\n-        meth = [proto descriptionForInstanceMethod: @selector(methodCall_rn:)];\n+        meth_object = protocol_getMethodDescription (proto, @selector(methodCall_rn:), YES, YES);\n+        meth = &meth_object;\n \tif (strcmp (meth->types, \"Vv12@0:4rn@8\"))\n \t  abort();\n-        meth = [proto descriptionForInstanceMethod: @selector(methodCall_oOn:)];\n+        meth_object = protocol_getMethodDescription (proto, @selector(methodCall_oOn:), YES, YES);\n+        meth = &meth_object;\n \tif (strcmp (meth->types, \"Vv12@0:4oOn@8\"))\n \t  abort();\n \treturn 0;"}, {"sha": "14db9269edfb61f1c221c5f16c60318f789b706d", "filename": "gcc/testsuite/objc.dg/torture/forward-1.m", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fforward-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fforward-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fforward-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,24 +1,18 @@\n /* { dg-do run } */\n-/* See if -forward::/-performv:: is able to work. */\n+/* See if -forward:: is able to work. */\n /* { dg-xfail-run-if \"PR36610\" { ! { { i?86-*-* x86_64-*-* } && ilp32 } } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-skip-if \"Needs OBJC2 Implementation\" { *-*-darwin* && { lp64 } } { \"-fnext-runtime\" } { \"\" } } */\n-/* There is no implementation of forward: in the NeXT m64 libobjc/Object\n-   neither have we implemented this in our extensions - so we have to skip it\n-   for now.  */\n \n #include <stdio.h>\n #include <stdlib.h>\n \n-#ifndef __NEXT_RUNTIME__\n-#  include <objc/objc-api.h>\n-#endif\n-#include <objc/Object.h>\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n #define VALUETOUSE 1234567890\n \n id forwarder, receiver;\n \n-@interface Forwarder: Object\n+@interface Forwarder: TestsuiteObject\n {\n     id receiver;\n }\n@@ -27,7 +21,7 @@ @interface Forwarder: Object\n \n @end\n \n-@interface Receiver:Object\n+@interface Receiver:TestsuiteObject\n {\n     int foo;\n }\n@@ -44,6 +38,7 @@ @implementation Receiver\n \n -display\n {\n+  printf (\"Executing display\\n\");\n     /* Check to see if we are really the reciever. */\n     if (self != receiver)\n         abort ();\n@@ -62,18 +57,24 @@ @implementation Forwarder\n     receiver = theReceiver;\n     return self;\n }\n-#ifdef __NEXT_RUNTIME__\n-- forward: (SEL)theSel: (marg_list)theArgFrame\n-#else\n--(retval_t) forward: (SEL)theSel: (arglist_t)theArgFrame\n-#endif\n+-(void *) forward: (SEL)theSel: (void *)theArgFrame\n {\n   /* If we have a reciever try to perform on that object */\n     if (receiver)\n-        return [receiver performv: theSel: theArgFrame];\n+      {\n+\t/* Simple forward that works for methods with no\n+\t   arguments.  */\n+\ttypedef id (*method_with_no_args) (id receiver, SEL _cmd);\n+\tMethod method = class_getInstanceMethod (object_getClass (receiver),\n+\t\t\t\t\t\t theSel);\n+\tmethod_with_no_args imp = (method_with_no_args)(method_getImplementation\n+\t\t\t\t\t\t\t(method));\n+\treturn (*imp)(receiver, theSel);\n+      }\n \n     /* Normally you'd emit an error here.  */\n     printf (\"Unrecognized selector\\n\");\n+    return NULL;\n }\n @end\n int main()"}, {"sha": "e35b83bdc37f25859ff16c5f639f89ad3bd10dc4", "filename": "gcc/testsuite/objc.dg/torture/strings/const-str-10.m", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-10.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -6,7 +6,8 @@\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n \n-#include \"../../../objc-obj-c++-shared/Object1.h\"\n+#include <objc/Object.h>\n+#include \"../../../objc-obj-c++-shared/runtime.h\" /* For NEXT_OBJC_USE_NEW_INTERFACE.  */\n \n @interface NSString: Object\n @end"}, {"sha": "765f6489fbb477e0d21d02e52eee81f375f02b00", "filename": "gcc/testsuite/objc.dg/torture/strings/const-str-11.m", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-11.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-11.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-11.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -7,7 +7,8 @@\n /* { dg-options \"-fconstant-string-class=XStr\" } */\n /* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=XStr\" { target *-*-darwin* } } */\n \n-#include \"../../../objc-obj-c++-shared/Object1.h\"\n+#include <objc/Object.h>\n+#include \"../../../objc-obj-c++-shared/runtime.h\" /* For NEXT_OBJC_USE_NEW_INTERFACE.  */\n \n @interface XString: Object {\n @protected"}, {"sha": "4c190904a797d64aa9f4f65800e84e9cb8131b8e", "filename": "gcc/testsuite/objc.dg/torture/strings/const-str-7.m", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-7.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,27 +3,28 @@\n /* { dg-do run } */\n /* { dg-options \"-fconstant-string-class=Foo \" } */\n /* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=Foo\" { target *-*-darwin* } } */\n-/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.m\" } */\n \n-#include \"../../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdio.h>\n #include <stdlib.h>\n #include <string.h>\n \n-@interface Foo: Object {\n+@interface Foo: TestsuiteObject {\n   char *cString;\n   unsigned int len;\n }\n - (char *)customString;\n @end\n \n+#ifdef __NEXT_RUNTIME__\n #ifdef NEXT_OBJC_USE_NEW_INTERFACE\n Class _FooClassReference;\n #else\n struct objc_class _FooClassReference;\n #endif\n+#endif\n \n-@implementation Foo : Object\n+@implementation Foo : TestsuiteObject\n - (char *)customString {\n   return cString;\n }"}, {"sha": "9b6d23fbf3ff2b5d0d12cb5565299d3d8410a7eb", "filename": "gcc/testsuite/objc.dg/torture/strings/const-str-8.m", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-8.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-8.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-8.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,24 +3,25 @@\n /* { dg-do run } */\n /* { dg-options \"-fconstant-string-class=Foo\" } */\n /* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=Foo\" { target *-*-darwin* } } */\n-/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.m\" } */\n \n-#include \"../../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdlib.h>\n \n-@interface Foo: Object {\n+@interface Foo: TestsuiteObject {\n   char *cString;\n   unsigned int len;\n }\n @end\n \n+#ifdef __NEXT_RUNTIME__\n #ifdef NEXT_OBJC_USE_NEW_INTERFACE\n Class _FooClassReference;\n #else\n struct objc_class _FooClassReference;\n #endif\n+#endif\n \n-@implementation Foo : Object\n+@implementation Foo : TestsuiteObject\n - (char *)customString {\n   return cString;\n }"}, {"sha": "e69fb018078c65d7d259a1b42a075da098246b97", "filename": "gcc/testsuite/objc.dg/torture/strings/const-str-9.m", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-9.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-9.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-9.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -5,7 +5,8 @@\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n \n-#include \"../../../objc-obj-c++-shared/Object1.h\"\n+#include <objc/Object.h>\n+#include \"../../../objc-obj-c++-shared/runtime.h\" /* For NEXT_OBJC_USE_NEW_INTERFACE.  */\n \n @interface NSConstantString: Object {\n   char *cString;"}, {"sha": "5fd29a84d513ce78417129026a9d23f9a49f2e3f", "filename": "gcc/testsuite/objc.dg/torture/tls/thr-init-3.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fthr-init-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fthr-init-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fthr-init-3.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,12 +2,11 @@\n /* { dg-require-effective-target tls_runtime } */\n /* { dg-add-options tls } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.m\" } */\n \n-#include \"../../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../../objc-obj-c++-shared/TestsuiteObject.m\"\n extern void _exit(int);\n \n-@interface tsObj: Object {\n+@interface tsObj: TestsuiteObject {\n   int ai ;\n }\n "}, {"sha": "8ca4b3c325aec875a234b41feed60c8dc7338346", "filename": "gcc/testsuite/objc.dg/torture/trivial.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftrivial.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftrivial.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftrivial.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,11 +1,10 @@\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-/* { dg-additional-sources \"../../objc-obj-c++-shared/Object1.m\" } */\n \n-#import \"../../objc-obj-c++-shared/Object1.h\"\n+#import \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n int main(void)\n {\n-  [Object class];\n+  [TestsuiteObject class];\n   return 0;\n }"}, {"sha": "387a1b6f8ba8777bce605dffe7e8c5e9154efaa5", "filename": "gcc/testsuite/objc.dg/try-catch-1.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,14 +3,14 @@\n /* { dg-options \"-fobjc-exceptions\" } */\n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n #include <stdio.h>\n #include <setjmp.h>\n \n-@interface Frob: Object\n+@interface Frob: TestsuiteObject\n @end\n \n-@implementation Frob: Object\n+@implementation Frob: TestsuiteObject\n @end\n \n static int exc_control = 0;"}, {"sha": "320185fe0b3411f90744587b18c7c3377a64436d", "filename": "gcc/testsuite/objc.dg/try-catch-10.m", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-10.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,7 +4,7 @@ local objects (other than their volatile bits).  */\n /* { dg-options \"-fobjc-exceptions\" } */\n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n @protocol Proto1\n - (int)meth1;\n@@ -14,11 +14,11 @@ @protocol Proto2\n - (int)meth2;\n @end\n \n-@interface MyClass: Object <Proto2> {\n+@interface MyClass: TestsuiteObject <Proto2> {\n   int a;\n }\n - (int)meth2;\n-- (Object *)parm1: (id)p1 parm2: (id<Proto1>)p2;\n+- (TestsuiteObject *)parm1: (id)p1 parm2: (id<Proto1>)p2;\n @end\n \n MyClass *mc1, *mc2;\n@@ -27,7 +27,7 @@ @implementation MyClass\n - (int)meth2 {\n   return a;\n }\n-- (Object *)parm1: (id)p1 parm2: (id<Proto1>)p2 {\n+- (TestsuiteObject *)parm1: (id)p1 parm2: (id<Proto1>)p2 {\n   @try {\n     mc2 = p2;   /* { dg-warning \"type .id <Proto1>. does not conform to the .Proto2. protocol\" } */\n   }"}, {"sha": "c9087b33147e25e43af394e3c46ed133951886fc", "filename": "gcc/testsuite/objc.dg/try-catch-3.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-3.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -5,14 +5,14 @@\n /* { dg-do compile } */\n /* { dg-options \"-fobjc-exceptions\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n const char *foo(void)\n {\n     @try {\n         return \"foo\";\n     }\n-    @catch (Object* theException) {\n+    @catch (TestsuiteObject* theException) {\n           return [theException name];\n     }\n }"}, {"sha": "9d71e793d2b49dd5c4981506efaa71dc1b5f124c", "filename": "gcc/testsuite/objc.dg/try-catch-6.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-6.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,18 +1,18 @@\n /* { dg-do compile } */\n /* { dg-options \"-fobjc-exceptions\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n int main (int argc, const char * argv[]) {\n-  Object * pool = [Object new];\n+  TestsuiteObject * pool = [TestsuiteObject new];\n   int a;\n \n   if ( 1 ) {\n     \n     @try {\n       a = 1;\n     }\n-    @catch (Object *e) {\n+    @catch (TestsuiteObject *e) {\n       a = 2;\n     }\n     @finally {"}, {"sha": "7adf2f9e3262ce55504ccea3740571a196f4fa56", "filename": "gcc/testsuite/objc.dg/try-catch-7.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-7.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,9 +3,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-fobjc-exceptions\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n \n-@interface Derived: Object\n+@interface Derived: TestsuiteObject\n - (id) meth;\n @end\n "}, {"sha": "d02a8af219e14dd37069edc676b3c12d8e4f627f", "filename": "gcc/testsuite/objc.dg/type-size-2.m", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,20 +4,10 @@\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n-/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.m\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n-#include \"../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../objc-obj-c++-shared/runtime.h\"\n #include <stdio.h>\n #include <stdlib.h>\n-#ifdef __NEXT_RUNTIME__\n-#include <objc/objc-runtime.h>\n-#define METHOD Method\n-#else\n-#include <objc/objc-api.h>\n-#define METHOD Method_t\n-#define method_get_types(M) (M)->method_types\n-#endif\n \n extern int sscanf(const char *str, const char *format, ...);\n extern void abort(void);\n@@ -36,21 +26,21 @@ - (const char *)str:(signed char [])arg1 with:(unsigned char *)arg2 and:(enum En\n @end\n \n Class cls;\n-METHOD meth ;\n+Method meth ;\n \n unsigned totsize, offs0, offs1, offs2, offs3, offs4, offs5, offs6, offs7;\n \n static void scan_initial(const char *pattern) {\n   totsize = offs0 = offs1 = offs2 = offs3 = offs4 = offs5 = offs6 = offs7 = (unsigned)-1;\n-  sscanf(method_get_types(meth), pattern, &totsize, &offs0, &offs1, &offs2, &offs3,\n+  sscanf(method_getTypeEncoding(meth), pattern, &totsize, &offs0, &offs1, &offs2, &offs3,\n       &offs4, &offs5, &offs6, &offs7);\n   CHECK_IF(!offs0 && offs1 == sizeof(id) && offs2 == offs1 + sizeof(SEL) && totsize >= offs2);\n }\n \n int main(void) {\n-  cls = objc_get_class(\"ArrayTest\");\n+  cls = objc_getClass(\"ArrayTest\");\n \n-  meth = class_get_instance_method(cls, @selector(str:with:and:));\n+  meth = class_getInstanceMethod(cls, @selector(str:with:and:));\n \n   /* Here we have the complication that 'enum Enum' could be encoded\n      as 'i' on __NEXT_RUNTIME_, and (most likely) as 'I' on the GNU\n@@ -67,7 +57,7 @@ int main(void) {\n \n   CHECK_IF(offs3 == offs2 + sizeof(signed char *) && offs4 == offs3 + sizeof(unsigned char *));\n   CHECK_IF(totsize == offs4 + sizeof(enum Enum *));\n-  meth = class_get_instance_method(cls, @selector(meth1:with:with:));\n+  meth = class_getInstanceMethod(cls, @selector(meth1:with:with:));\n   scan_initial(\"i%u@%u:%u^i%u[0i]%u[2i]%u\");\n   CHECK_IF(offs3 == offs2 + sizeof(int *) && offs4 == offs3 + sizeof(int *));\n   CHECK_IF(totsize == offs4 + sizeof(int *));                                           "}, {"sha": "263ce010af050ed2429747d01118987dc6469b64", "filename": "gcc/testsuite/objc.dg/typedef-alias-1.m", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftypedef-alias-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Ftypedef-alias-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftypedef-alias-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,15 +1,16 @@\n /* Typedefs of ObjC types should work without any bogus warnings. */\n /* { dg-do compile } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.h\"\n+#include <objc/objc.h>\n \n-typedef Object MyObject;\n+typedef TestsuiteObject MyObject;\n \n int main (int argc, const char * argv[])\n {\n-    Object* a = nil;\n+    TestsuiteObject* a = nil;\n     MyObject* b = a;\n-    Object* c = b;\n+    TestsuiteObject* c = b;\n \n     return 0;\n }"}, {"sha": "11f8d415fc311576b4b9ba0441185bc36316689b", "filename": "gcc/testsuite/objc.dg/va-meth-1.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fva-meth-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fva-meth-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fva-meth-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,14 +2,14 @@\n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/TestsuiteObject.m\"\n \n #include <stdarg.h>\n #include <stdlib.h>\n \n /* Test methods with \"C-style\" trailing arguments, with or without ellipsis. */\n \n-@interface MathClass: Object\n+@interface MathClass: TestsuiteObject\n /* sum positive numbers; -1 ends the list */\n + (int) sum: (int)firstNumber, int secondNumber, ...;\n + (int) prod: (int) firstNumber, int secondNumber, int thirdNumber;\n@@ -70,4 +70,3 @@ int main (void)\n   return 0;\n }\n \n-#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "4917495aff8ea2e4656d0a8c0eabb4bb2ba1f4ef", "filename": "gcc/testsuite/objc.dg/zero-link-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -5,7 +5,7 @@\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-options \"-fzero-link\" } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n+#include <objc/Object.h>\n #include <objc/objc.h>\n \n extern void abort(void);"}, {"sha": "5da7422b8e4d42e63c7311f37c3f395ecbd9659d", "filename": "gcc/testsuite/objc.dg/zero-link-3.m", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-3.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -5,8 +5,7 @@\n /* { dg-options \"-fzero-link\" } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n-#include \"../objc-obj-c++-shared/Object1.h\"\n-//#import <objc/objc.h>\n+#include <objc/Object.h>\n \n extern void abort(void);\n #define CHECK_IF(expr) if(!(expr)) abort();\n@@ -25,4 +24,3 @@ int main(void) {\n   return 0;\n }\n \n-#include \"../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "b0639d4594d5623ae7c3137b6b119e712c93b19c", "filename": "gcc/testsuite/objc/compile/trivial.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fcompile%2Ftrivial.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fcompile%2Ftrivial.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fcompile%2Ftrivial.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,6 +1,6 @@\n-#import \"../../objc-obj-c++-shared/Object1.h\"\n+#import \"../../objc-obj-c++-shared/TestsuiteObject.h\"\n \n int main(void)\n {\n-  [Object class];\n+  [TestsuiteObject class];\n }"}, {"sha": "a2372cba7657654937c5b628a129d9447bbea171", "filename": "gcc/testsuite/objc/execute/IMP.m", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2FIMP.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2FIMP.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2FIMP.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,21 +1,19 @@\n /* Contributed by Nicola Pero - Fri Mar  9 19:39:15 CET 2001 */\n \n #include <stdlib.h>\n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n-#include <objc/objc.h>\n-#include <objc/objc-api.h>\n+#include \"../../objc-obj-c++-shared/runtime.h\"\n \n /* Test getting and calling the IMP of a method */\n \n @interface TestClass\n {\n   Class isa;\n }\n-- (int) next: (int)a;\n++ (int) next: (int)a;\n @end\n \n @implementation TestClass\n-- (int) next: (int)a\n++ (int) next: (int)a\n {\n   return a + 1;\n }\n@@ -27,10 +25,10 @@ int main (void)\n   SEL selector;\n   int (* imp) (id, SEL, int);\n   \n-  class = objc_get_class (\"TestClass\");\n+  class = objc_getClass (\"TestClass\");\n   selector = @selector (next:);\n-  imp = (int (*)(id, SEL, int))method_get_imp \n-    (class_get_class_method (class, selector));\n+  imp = (int (*)(id, SEL, int))method_getImplementation\n+    (class_getClassMethod (class, selector));\n   \n   if (imp (class, selector, 5) != 6)\n     {"}, {"sha": "7e176e9916c7f4dd9f0aa07023d29136052469e2", "filename": "gcc/testsuite/objc/execute/_cmd.m", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2F_cmd.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2F_cmd.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2F_cmd.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,7 @@\n /* Contributed by Nicola Pero - Fri Mar  9 19:39:15 CET 2001 */\n \n #include <stdlib.h>\n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n-#include <objc/objc-api.h>\n+#include \"../../objc-obj-c++-shared/runtime.h\"\n \n /* Test the hidden argument _cmd to method calls */\n \n@@ -16,11 +15,9 @@ + (const char*) method;\n @implementation TestClass\n + (const char*) method\n {\n-  return sel_get_name (_cmd);\n+  return sel_getName (_cmd);\n }\n-#ifdef __NEXT_RUNTIME__\n + initialize { return self; }\n-#endif\n @end\n \n "}, {"sha": "964c378b4ab51a574f499c9ff5d9238ca481475d", "filename": "gcc/testsuite/objc/execute/accessing_ivars.m", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Faccessing_ivars.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Faccessing_ivars.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Faccessing_ivars.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,33 +1,30 @@\n /* Contributed by Nicola Pero - Thu Mar  8 16:27:46 CET 2001 */\n #include <stdlib.h>\n-#ifndef __NEXT_RUNTIME__\n-#include <objc/objc-api.h>\n-#endif\n-#include \"../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n /* Test that by using -> we can access ivars of other objects of the same \n    class */\n \n-@interface TestClass : Object\n+@interface TestClass : TestsuiteObject\n {\n   int value;\n }\n - (int) value;\n-- (int) setValue: (int)number;\n+- (void) setValue: (int)number;\n - (void) takeValueFrom: (TestClass *)object;\n @end\n \n-@implementation TestClass : Object\n+@implementation TestClass : TestsuiteObject\n {\n   int value;\n }\n - (int) value\n { \n   return value;\n }\n-- (int) setValue: (int)number\n+- (void) setValue: (int)number\n {\n-  value = number; \n+  value = number;\n }\n - (void) takeValueFrom: (TestClass *)object\n {\n@@ -55,4 +52,4 @@ int main (void)\n \n   return 0;\n }\n-#include \"../../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "43b0d32b7d6a9509a6928af48955282e7367e0b4", "filename": "gcc/testsuite/objc/execute/bf-common.h", "status": "modified", "additions": 56, "deletions": 12, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-common.h?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,17 +1,14 @@\n #include <stdio.h>\n #include <stdlib.h>\n \n-#ifndef __NEXT_RUNTIME__\n-#include <objc/encoding.h>\n-#else\n+#include \"../../objc-obj-c++-shared/runtime.h\"\n+\n /* The following header, together with the implementation included below,\n    emulate functionality provided by the GNU runtime but not available from\n    the NeXT runtime.  */\n #include \"../../objc-obj-c++-shared/objc-test-suite-next-encode-assist.h\"\n-#define objc_get_class(C) objc_getClass(C)\n-#endif\n \n-#ifndef __OBJC2__\n+#if defined(__NEXT_RUNTIME__) && !defined(NEXT_OBJC_USE_NEW_INTERFACE)\n void print_ivars (Class class)\n {\n   struct objc_ivar_list* ivars = class->ivars;\n@@ -62,17 +59,67 @@ void compare_structures (Class class, const char* type)\n   \n   printf (\"%d ivars checked\\n\", i);\n }\n+#else\n+void print_ivars (Class class)\n+{\n+  unsigned int count, i;\n+  Ivar *list = class_copyIvarList (class, &count);\n+\n+  for (i = 0; i < count; i++) {\n+    printf (\"ivar '%s', type '%s', offset %ud\\n\",\n+\t    ivar_getName (list[i]),\n+\t    ivar_getTypeEncoding (list[i]),\n+\t    (unsigned int)ivar_getOffset (list[i]));\n+  }\n+}\n+\n+void compare_structures (Class class, const char* type)\n+{\n+  struct objc_struct_layout layout;\n+  unsigned int count;\n+  Ivar *list = class_copyIvarList (class, &count);\n+  int i = 0;\n+  int position;\n+\n+  objc_layout_structure (type, &layout);\n+\n+  while (objc_layout_structure_next_member (&layout))\n+    {\n+      const char *ivar_type;\n+\n+      if (i > count)\n+        {\n+          printf (\"too many ivars in type %s, layout = %s\\n\",\n+                  type, layout.type);\n+          exit (1);\n+        }\n+\n+      objc_layout_structure_get_info (&layout, &position, NULL, &ivar_type);\n+      printf (\"real ivar '%s' offset %ud\\n\",\n+              ivar_getName (list[i]), (unsigned int)ivar_getOffset (list[i]));\n+      printf (\"computed type '%s' offset %d\\n\", ivar_type, position);\n+      if ((unsigned int)position != (unsigned int)ivar_getOffset (list[i]))\n+        {\n+          printf (\"offset %ud and computed position %d don't match on ivar '%s'\"\n+                  \" (i = %d)\\n\",\n+                  (unsigned int)ivar_getOffset (list[i]), position, ivar_getName (list[i]), i);\n+          exit (1);\n+        }\n+      i++;\n+    }\n+  \n+  printf (\"%d ivars checked\\n\", i);\n+}\n #endif\n \n int main ()\n {\n-#ifndef __OBJC2__\n   struct class_vars\n     {\n       @defs (MyObject);\n     };\n   int size1, size2;\n-  Class class = objc_get_class (\"MyObject\");\n+  Class class = objc_getClass (\"MyObject\");\n   printf (\"type = %s\\n\", @encode (struct class_vars));\n   print_ivars (class);\n \n@@ -83,10 +130,7 @@ int main ()\n       printf (\"sizes don't match (computed %d, exact %d)\\n\", size1, size2);\n       abort ();\n     }\n-#endif\n   \n-  exit (0);\n+  return 0;\n }\n-#ifndef __OBJC2__\n #include \"../../objc-obj-c++-shared/objc-test-suite-next-encode-assist-impl.h\"\n-#endif"}, {"sha": "358b6f92b32c912fe2ca7f52babb7fa8effe7195", "filename": "gcc/testsuite/objc/execute/bycopy-1.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbycopy-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbycopy-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbycopy-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,8 +2,7 @@\n  * Contributed by Nicola Pero <nicola@brainstorm.co.uk>\n  * Fri Feb  2 11:48:01 GMT 2001\n  */\n-\n-#include \"../../objc-obj-c++-shared/Protocol1.h\"\n+#include <objc/objc.h>\n \n @protocol MyProtocol\n - (bycopy id) bycopyMethod;\n@@ -13,7 +12,7 @@ int main (void)\n {\n   [nil bycopyMethod];\n \n-   exit (0);\n+  return 0;\n }\n \n "}, {"sha": "b42659106b16e04ce0a3a532b4712bb4d8f9f6ea", "filename": "gcc/testsuite/objc/execute/bycopy-2.m", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbycopy-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbycopy-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbycopy-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,14 +2,14 @@\n  * Contributed by Nicola Pero <nicola@brainstorm.co.uk>\n  * Fri Feb  2 11:48:01 GMT 2001\n  */\n-\n-#include \"../../objc-obj-c++-shared/Protocol1.h\"\n+#include <objc/objc.h>\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n @protocol MyProtocol\n + (bycopy id<MyProtocol>) bycopyMethod;\n @end\n \n-@interface MyObject : Object <MyProtocol> \n+@interface MyObject : TestsuiteObject <MyProtocol> \n @end\n \n @implementation MyObject\n@@ -25,6 +25,6 @@ int main (void)\n \n   object = [MyObject bycopyMethod];\n \n-   exit (0);\n+  return 0;\n }\n-#include \"../../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "e96d39594832085a4bb96d47a7679dced90b9a1e", "filename": "gcc/testsuite/objc/execute/bycopy-3.m", "status": "modified", "additions": 15, "deletions": 28, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbycopy-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbycopy-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbycopy-3.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -9,40 +9,25 @@\n  * interfere with what we are testing, which is that the `bycopy'\n  * keyword generates the _F_BYCOPY qualifier for the return type.  */\n \n-extern void exit (int) __attribute__ ((noreturn));\n extern int printf (const char *, ...);\n \n-#include <objc/Protocol.h>\n-\n-#ifndef __NEXT_RUNTIME__\n-#include <objc/encoding.h>\n-#endif\n+#include <objc/objc.h>\n+#include \"../../objc-obj-c++-shared/runtime.h\"\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n @protocol MyProtocol\n + (bycopy id<MyProtocol>) bycopyMethod;\n @end\n \n /* This no-op class to keep it compile under broken gcc 3.x */\n-@interface MyObject : Object <MyProtocol> \n-#ifdef __OBJC2__\n-+ (id) initialize;\n-+ (id) alloc;\n-+ new;\n-- init;\n-#endif\n+@interface MyObject : TestsuiteObject <MyProtocol> \n @end\n \n @implementation MyObject\n + (bycopy id<MyProtocol>) bycopyMethod\n {\n   return [MyObject alloc];\n }\n-#ifdef __OBJC2__\n-+ initialize {return self;}\n-+ alloc { return class_createInstance (self, 0);}\n-+ new { return [[self alloc] init]; }\n-- init {return self;}\n-#endif\n @end\n \n /* The following header, together with the implementation included below,\n@@ -52,7 +37,7 @@ @implementation MyObject\n \n int main (void)\n {\n-  struct objc_method_description *method;\n+  struct objc_method_description method;\n   const char *method_types;\n   unsigned qualifiers;\n   Protocol *protocol;\n@@ -64,16 +49,18 @@ int main (void)\n   protocol = @protocol (MyProtocol);\n \n   /* Ask to the protocol for the description of the method bycopyMethod */\n-  method = [protocol descriptionForClassMethod: @selector (bycopyMethod)];\n-  if (method == NULL)\n-    {\n-      printf (\"Could not find method bycopyMethod in protocol!\\n\");\n-      exit (1);\n-    }\n+  method = protocol_getMethodDescription (protocol, @selector (bycopyMethod),\n+\t\t\t\t\t  YES, NO);\n \n   /* Get the method types for the method - which encode return type,\n      arguments etc. */\n-  method_types = method->types;\n+  method_types = method.types;\n+\n+  if (method_types == NULL)\n+    {\n+      printf (\"Could not find method bycopyMethod in protocol!\\n\");\n+      return 1;\n+    }\n \n   /* Get the qualifiers for the return type */\n   qualifiers = objc_get_type_qualifiers (method_types);\n@@ -82,7 +69,7 @@ int main (void)\n   if (! (qualifiers & _F_BYCOPY))\n     {\n       printf (\"Failed - selector does not contain _F_BYCOPY qualifier!\\n\");\n-      exit (1);\n+      return 1;\n     }\n \n   /* Else, happy end */"}, {"sha": "0e4ea31b7d10f31e684005953855d29c1f985be7", "filename": "gcc/testsuite/objc/execute/cascading-1.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fcascading-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fcascading-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fcascading-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,7 +1,7 @@\n #include <stdlib.h>\n-#import \"../../objc-obj-c++-shared/Object1.h\"\n+#import \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n-@interface Foo : Object\n+@interface Foo : TestsuiteObject\n + foo;\n + bar;\n @end"}, {"sha": "6ce262095631fc96b03efa215c29b4cfc3e6cde3", "filename": "gcc/testsuite/objc/execute/class-1.m", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,6 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n \n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n-#include <objc/objc-api.h>\n \n /* Tests creating a RootClass */\n "}, {"sha": "fba1a38a0b053ddf956e760e1f817b3875be341e", "filename": "gcc/testsuite/objc/execute/class-10.m", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-10.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,6 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n \n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n-#include <objc/objc-api.h>\n \n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods and a subclass overriding the superclass'\n@@ -15,9 +13,7 @@ @interface RootClass\n @end\n \n @implementation RootClass\n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n @interface SubClass : RootClass\n@@ -72,10 +68,10 @@ int main (void)\n   test_that_class_has_instance_method (\"SubSubClass\", @selector (state));\n   test_that_class_has_instance_method (\"SubSubClass\", @selector (shift));\n   \n-  object = class_create_instance (objc_lookup_class (\"SubClass\"));\n+  object = class_createInstance (objc_getClass (\"SubClass\"), 0);\n   test_accessor_method (object, 0, -1, -1, 1, 1);\n \n-  sub_object = class_create_instance (objc_lookup_class (\"SubSubClass\"));\n+  sub_object = class_createInstance (objc_getClass (\"SubSubClass\"), 0);\n   test_accessor_method (sub_object, 1, -1, 0, 1, 2);\n \n   return 0;"}, {"sha": "2cd6017d4607bf3a3eae6709e6206d5a49890348", "filename": "gcc/testsuite/objc/execute/class-11.m", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-11.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-11.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-11.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,6 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n \n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n-#include <objc/objc-api.h>\n \n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods and a subclass overriding the superclass'\n@@ -16,9 +14,7 @@ @interface RootClass\n @end\n \n @implementation RootClass\n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n @interface SubClass : RootClass\n@@ -76,10 +72,10 @@ int main (void)\n   test_that_class_has_instance_method (\"SubSubClass\", @selector (state));\n   test_that_class_has_instance_method (\"SubSubClass\", @selector (shift));\n   \n-  object = class_create_instance (objc_lookup_class (\"SubClass\"));\n+  object = class_createInstance (objc_getClass (\"SubClass\"), 0);\n   test_accessor_method (object, 0, -1, -1, 1, 1);\n \n-  sub_object = class_create_instance (objc_lookup_class (\"SubSubClass\"));\n+  sub_object = class_createInstance (objc_getClass (\"SubSubClass\"), 0);\n   test_accessor_method (sub_object, 1, -1, 0, 1, 2);\n \n   return 0;"}, {"sha": "d3116e8cc40426f9af4f5b466952b4d79ed4029c", "filename": "gcc/testsuite/objc/execute/class-12.m", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-12.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-12.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-12.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,6 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n \n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n-#include <objc/objc-api.h>\n \n /* Tests creating a root class and a subclass with a class methods */\n \n@@ -13,9 +11,7 @@ @interface RootClass\n @end\n \n @implementation RootClass\n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n static int class_variable = 0;\n@@ -48,7 +44,7 @@ int main (void)\n   test_that_class_has_class_method (\"SubClass\", @selector (setState:));\n   test_that_class_has_class_method (\"SubClass\", @selector (state));\n \n-  class = objc_lookup_class (\"SubClass\");\n+  class = objc_getClass (\"SubClass\");\n   test_accessor_method (class, 0, -1, -1, 1, 1);\n \n   return 0;"}, {"sha": "1d685e3a797f09d85fcbf1a4bc14bb92d9d633ba", "filename": "gcc/testsuite/objc/execute/class-13.m", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-13.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-13.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-13.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,6 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n \n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n-#include <objc/objc-api.h>\n \n /* Tests creating a root class and a subclass with a class accessor\n    methods and a subclass overriding the superclass' implementation\n@@ -15,9 +13,7 @@ @interface RootClass\n @end\n \n @implementation RootClass\n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n static int class_variable = 0;\n@@ -65,10 +61,10 @@ int main (void)\n   test_that_class_has_class_method (\"SubSubClass\", @selector (setState:));\n   test_that_class_has_class_method (\"SubSubClass\", @selector (state));\n   \n-  class = objc_lookup_class (\"SubClass\");\n+  class = objc_getClass (\"SubClass\");\n   test_accessor_method (class, 0, -1, -1, 1, 1);\n \n-  sub_class = objc_lookup_class (\"SubSubClass\");\n+  sub_class = objc_getClass (\"SubSubClass\");\n   class_variable = 0;\n   test_accessor_method (sub_class, 1, -1, 0, 1, 2);\n "}, {"sha": "3ab0982c6f3c80508c35f442d2c7abd5bb102491", "filename": "gcc/testsuite/objc/execute/class-14.m", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-14.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-14.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-14.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,6 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n \n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n-#include <objc/objc-api.h>\n \n /* Tests creating a root class and a subclass with a class accessor\n    methods and a subclass overriding the superclass' implementation,\n@@ -15,9 +13,7 @@ @interface RootClass\n @end\n \n @implementation RootClass\n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n static int class_variable = 0;\n@@ -70,10 +66,10 @@ int main (void)\n   test_that_class_has_class_method (\"SubSubClass\", @selector (state));\n   test_that_class_has_class_method (\"SubSubClass\", @selector (shift));\n   \n-  class = objc_lookup_class (\"SubClass\");\n+  class = objc_getClass (\"SubClass\");\n   test_accessor_method (class, 0, -1, -1, 1, 1);\n \n-  sub_class = objc_lookup_class (\"SubSubClass\");\n+  sub_class = objc_getClass (\"SubSubClass\");\n   class_variable = 0;\n   test_accessor_method (sub_class, 1, -1, 0, 1, 2);\n "}, {"sha": "88378e1d4a8032c2ea8da930067d61e4c2d38c69", "filename": "gcc/testsuite/objc/execute/class-2.m", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,6 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n \n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n-#include <objc/objc-api.h>\n \n /* Tests creating a root class and a subclass */\n "}, {"sha": "071708a6e6811c824bcaf6695104b5e5904a749d", "filename": "gcc/testsuite/objc/execute/class-3.m", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-3.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,6 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n \n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n-#include <objc/objc-api.h>\n \n /* Tests creating a root class and a minimal subclass tree */\n "}, {"sha": "a862191636cb87aa5beff2f2266c2ff047b15b6c", "filename": "gcc/testsuite/objc/execute/class-4.m", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-4.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,6 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n \n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n-#include <objc/objc-api.h>\n \n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods */\n@@ -14,9 +12,7 @@ @interface RootClass\n @end\n \n @implementation RootClass\n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n @interface SubClass : RootClass\n@@ -50,7 +46,7 @@ int main (void)\n   test_that_class_has_instance_method (\"SubClass\", @selector (setState:));\n   test_that_class_has_instance_method (\"SubClass\", @selector (state));\n \n-  object = class_create_instance (objc_lookup_class (\"SubClass\"));\n+  object = class_createInstance (objc_getClass (\"SubClass\"), 0);\n   test_accessor_method (object, 0, 1, 1, -3, -3);\n \n   return 0;"}, {"sha": "d0dc97a5bf3b6f3fc900ce392a63c68861434f57", "filename": "gcc/testsuite/objc/execute/class-5.m", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-5.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,6 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n \n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n-#include <objc/objc-api.h>\n \n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods and a subclass overriding the superclass'\n@@ -15,9 +13,7 @@ @interface RootClass\n @end\n \n @implementation RootClass\n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n @interface SubClass : RootClass\n@@ -66,10 +62,10 @@ int main (void)\n   test_that_class_has_instance_method (\"SubSubClass\", @selector (setState:));\n   test_that_class_has_instance_method (\"SubSubClass\", @selector (state));\n   \n-  object = class_create_instance (objc_lookup_class (\"SubClass\"));\n+  object = class_createInstance (objc_getClass (\"SubClass\"), 0);\n   test_accessor_method (object, 0, -1, -1, 1, 1);\n \n-  sub_object = class_create_instance (objc_lookup_class (\"SubSubClass\"));\n+  sub_object = class_createInstance (objc_getClass (\"SubSubClass\"), 0);\n   test_accessor_method (sub_object, 1, -1, 0, 1, 2);\n \n   return 0;"}, {"sha": "e178f6193945515cf26e19bd92bb08eb8bcc100f", "filename": "gcc/testsuite/objc/execute/class-6.m", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-6.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,6 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n \n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n-#include <objc/objc-api.h>\n \n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods and a subclass overriding the superclass'\n@@ -15,9 +13,7 @@ @interface RootClass\n @end\n \n @implementation RootClass\n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n @interface SubClass : RootClass\n@@ -66,10 +62,10 @@ int main (void)\n   test_that_class_has_instance_method (\"SubSubClass\", @selector (setState:));\n   test_that_class_has_instance_method (\"SubSubClass\", @selector (state));\n   \n-  object = class_create_instance (objc_lookup_class (\"SubClass\"));\n+  object = class_createInstance (objc_getClass (\"SubClass\"), 0);\n   test_accessor_method (object, 0, -1, -1, 1, 1);\n \n-  sub_object = class_create_instance (objc_lookup_class (\"SubSubClass\"));\n+  sub_object = class_createInstance (objc_getClass (\"SubSubClass\"), 0);\n   test_accessor_method (sub_object, 1, -1, 0, 1, 2);\n \n   return 0;"}, {"sha": "31e240945bb320e2bd77a24a58145d93187cc28d", "filename": "gcc/testsuite/objc/execute/class-7.m", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-7.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,6 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n \n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n-#include <objc/objc-api.h>\n \n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods; accessor methods implemented in a separate\n@@ -15,9 +13,7 @@ @interface RootClass\n @end\n \n @implementation RootClass\n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n @interface SubClass : RootClass\n@@ -64,7 +60,7 @@ to classes until the class is initialized (at +initialize time).  */\n   test_that_class_has_instance_method (\"SubClass\", @selector (setState:));\n   test_that_class_has_instance_method (\"SubClass\", @selector (state));\n \n-  object = class_create_instance (objc_lookup_class (\"SubClass\"));\n+  object = class_createInstance (objc_getClass (\"SubClass\"), 0);\n   test_accessor_method (object, 0, 1, 1, -3, -3);\n \n   return 0;"}, {"sha": "ef4c2a3c8f3af6f716d8492320fb056a7abf5de9", "filename": "gcc/testsuite/objc/execute/class-8.m", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-8.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-8.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-8.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,6 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n \n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n-#include <objc/objc-api.h>\n \n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods and a subclass overriding the superclass'\n@@ -15,9 +13,7 @@ @interface RootClass\n @end\n \n @implementation RootClass\n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n @interface SubClass : RootClass\n@@ -69,10 +65,10 @@ int main (void)\n   test_that_class_has_instance_method (\"SubSubClass\", @selector (setState:));\n   test_that_class_has_instance_method (\"SubSubClass\", @selector (state));\n   \n-  object = class_create_instance (objc_lookup_class (\"SubClass\"));\n+  object = class_createInstance (objc_getClass (\"SubClass\"), 0);\n   test_accessor_method (object, 0, -1, -1, 1, 1);\n \n-  sub_object = class_create_instance (objc_lookup_class (\"SubSubClass\"));\n+  sub_object = class_createInstance (objc_getClass (\"SubSubClass\"), 0);\n   test_accessor_method (sub_object, 1, -1, 0, 1, 2);\n \n   return 0;"}, {"sha": "d27d345388182ecca95bfcd2647c5525c5f71b0e", "filename": "gcc/testsuite/objc/execute/class-9.m", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-9.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-9.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-9.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,6 @@\n /* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n \n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n #include <objc/objc.h>\n-#include <objc/objc-api.h>\n \n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods and a subclass overriding the superclass'\n@@ -15,9 +13,7 @@ @interface RootClass\n @end\n \n @implementation RootClass\n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n @interface SubClass : RootClass\n@@ -69,10 +65,10 @@ int main (void)\n   test_that_class_has_instance_method (\"SubSubClass\", @selector (setState:));\n   test_that_class_has_instance_method (\"SubSubClass\", @selector (state));\n   \n-  object = class_create_instance (objc_lookup_class (\"SubClass\"));\n+  object = class_createInstance (objc_getClass (\"SubClass\"), 0);\n   test_accessor_method (object, 0, -1, -1, 1, 1);\n \n-  sub_object = class_create_instance (objc_lookup_class (\"SubSubClass\"));\n+  sub_object = class_createInstance (objc_getClass (\"SubSubClass\"), 0);\n   test_accessor_method (sub_object, 1, -1, 0, 1, 2);\n \n   return 0;"}, {"sha": "cfdd72b4748a1f35e8c2f49d585d473b697fbd39", "filename": "gcc/testsuite/objc/execute/class-tests-1.h", "status": "modified", "additions": 12, "deletions": 37, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-tests-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-tests-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-tests-1.h?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,9 +2,7 @@\n \n #include <stdio.h>\n #include <stdlib.h>\n-#include \"../../objc-obj-c++-shared/Object1.h\"\n-#include <objc/objc.h>\n-#include <objc/objc-api.h>\n+#include \"../../objc-obj-c++-shared/runtime.h\"\n \n /*\n  * Standard Tests For Classes and Objects - abort upon failing; return\n@@ -14,13 +12,7 @@\n /* Test that `class' is a Class */\n static void test_is_class (Class class)\n {\n-  if (object_is_class (class) == NO)\n-    {\n-      printf (\"test_is_class failed\\n\");\n-      abort ();\n-    }\n-\n-  if (class_is_class (class) == NO)\n+  if (class_isMetaClass (object_getClass (class)) == NO)\n     {\n       printf (\"test_is_class failed\\n\");\n       abort ();\n@@ -30,7 +22,7 @@ static void test_is_class (Class class)\n /* Test that the superclass of `class' is `superclass' */\n static void test_superclass (Class class, Class superclass)\n {\n-  if (class_get_super_class (class) != superclass) \n+  if (class_getSuperclass (class) != superclass)\n     {\n       printf (\"test_superclass failed\\n\");\n       abort ();\n@@ -40,7 +32,7 @@ static void test_superclass (Class class, Class superclass)\n /* Test that the classname of `class' is `classname' */\n static void test_class_name (Class class, const char *classname)\n {\n-  if (strcmp (class_get_class_name (class), classname))\n+  if (strcmp (class_getName (class), classname))\n     {\n       printf (\"test_class_name failed\\n\");\n       abort ();\n@@ -51,7 +43,7 @@ static void test_class_name (Class class, const char *classname)\n static void test_allocate (Class class)\n {\n   /* The object we create is leaked but who cares, this is only a test */\n-  id object = class_create_instance (class);\n+  id object = class_createInstance (class, 0);\n \n   if (object == nil)\n     {\n@@ -63,9 +55,9 @@ static void test_allocate (Class class)\n /* Test that instances of `class' are instances and not classes */\n static void test_instances (Class class)\n {\n-  id object = class_create_instance (class);\n+  id object = class_createInstance (class, 0);\n \n-  if (object_is_class (object) == YES)\n+  if (class_isMetaClass (object_getClass (object)) == YES)\n     {\n       printf (\"test_instances failed\\n\");\n       abort ();\n@@ -75,35 +67,23 @@ static void test_instances (Class class)\n /* Test that we can deallocate instances of `class' */\n static void test_deallocate (Class class)\n {\n-  id object = class_create_instance (class);\n+  id object = class_createInstance (class, 0);\n \n   object_dispose (object);\n }\n \n /* Test that the object and the class agree on what the class is */\n static void test_object_class (Class class)\n {\n-  id object = class_create_instance (class);\n+  id object = class_createInstance (class, 0);\n \n-  if (object_get_class (object) != class)\n+  if (object_getClass (object) != class)\n     {\n       printf (\"test_object_class failed\\n\");\n       abort ();\n     }\n }\n \n-/* Test that the object and the class agree on what the superclass is */\n-static void test_object_super_class (Class class)\n-{\n-  id object = class_create_instance (class);\n-\n-  if (object_get_super_class (object) != class_get_super_class (class))\n-    {\n-      printf (\"test_object_super_class failed\\n\");\n-      abort ();\n-    }\n-}\n-\n /* \n  *  Runs all the tests in this file for the specified class \n  */\n@@ -113,16 +93,12 @@ void test_class_with_superclass (const char *class_name,\n   Class class; \n   Class superclass; \n \n-  /* We need at least a method call before playing with the internals, \n-     so that the runtime will call __objc_resolve_class_links () */\n-  [Object class];\n-\n   /* class_name must be an existing class */\n-  class = objc_lookup_class (class_name);\n+  class = objc_getClass (class_name);\n   test_is_class (class);\n \n   /* But superclass_name can be \"\", which means `Nil' */\n-  superclass = objc_lookup_class (superclass_name);  \n+  superclass = objc_getClass (superclass_name);  \n   if (superclass != Nil)\n     {\n       test_is_class (superclass);\n@@ -135,5 +111,4 @@ void test_class_with_superclass (const char *class_name,\n   test_instances (class);\n   test_deallocate (class);\n   test_object_class (class);\n-  test_object_super_class (class);\n }"}, {"sha": "7f6f54000f73da98f9fa8ee4baa84642b08dc52b", "filename": "gcc/testsuite/objc/execute/class-tests-2.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-tests-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-tests-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-tests-2.h?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,7 @@\n /* Contributed by Nicola Pero on Tue Mar  6 23:05:53 CET 2001 */\n-#include <objc/objc.h>\n-#include <objc/objc-api.h>\n #include <stdio.h>\n #include <stdlib.h>\n+#include \"../../objc-obj-c++-shared/runtime.h\"\n \n /*\n  * Standard Tests For Methods of Classes and Objects - abort upon\n@@ -13,9 +12,9 @@\n void test_that_class_has_instance_method (const char *class_name, \n \t\t\t\t\t  SEL selector)\n {\n-  Class class = objc_lookup_class (class_name);\n+  Class class = objc_getClass (class_name);\n \n-  if (class_get_instance_method (class, selector) == NULL)\n+  if (class_getInstanceMethod (class, selector) == NULL)\n     {\n       printf (\"test_class_has_instance_method failed\\n\");\n       abort ();\n@@ -26,9 +25,9 @@ void test_that_class_has_instance_method (const char *class_name,\n void test_that_class_has_class_method (const char *class_name, \n \t\t\t\t       SEL selector)\n {\n-  Class meta_class = objc_get_meta_class (class_name);\n+  Class class = objc_getClass (class_name);\n \n-  if (class_get_class_method (meta_class, selector) == NULL)\n+  if (class_getClassMethod (class, selector) == NULL)\n     {\n       printf (\"test_class_has_class_method failed\\n\");\n       abort ();"}, {"sha": "9045305e59c953e2ad6285873f5b17efdb30387b", "filename": "gcc/testsuite/objc/execute/class_self-1.m", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass_self-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass_self-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass_self-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -51,9 +51,7 @@ + (int) method\n {\n   return 4;\n }\n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n "}, {"sha": "070c4c1a5edc192afd74679ec05b48b36ce471d5", "filename": "gcc/testsuite/objc/execute/class_self-2.m", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass_self-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass_self-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass_self-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -33,9 +33,7 @@ + (struct d) method\n   \n   return u;\n }\n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n /* The second class */\n@@ -58,9 +56,7 @@ + (void) test\n     }\n }\n \n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n "}, {"sha": "8009a03d8ddcafa887e49be367a6654192502da2", "filename": "gcc/testsuite/objc/execute/compatibility_alias.m", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fcompatibility_alias.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fcompatibility_alias.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fcompatibility_alias.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,13 +1,12 @@\n /* Contributed by Nicola Pero - Thu Mar  8 17:23:59 CET 2001 */\n-#import \"../../objc-obj-c++-shared/Object1.h\"\n-#include <objc/objc.h>\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n-@compatibility_alias MyObject Object;\n+@compatibility_alias MyObject TestsuiteObject;\n \n int main (void)\n {\n   MyObject *object = [MyObject alloc];\n \n   return 0;\n }\n-#include \"../../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "4c4f2babfdb19b40ca824cdae4d1bee3f727398a", "filename": "gcc/testsuite/objc/execute/encode-1.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fencode-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fencode-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fencode-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,7 @@\n /* Contributed by Nicola Pero - Thu Mar  8 16:27:46 CET 2001 */\n #include <stdlib.h>\n-#import \"../../objc-obj-c++-shared/Object1.h\"\n+#import \"../../objc-obj-c++-shared/TestsuiteObject.h\"\n #include <objc/objc.h>\n-#include <objc/objc-api.h>\n \n /* Test very simple @encode */\n \n@@ -18,7 +17,7 @@ int main (void)\n       abort ();\n     }\n \n-  if (strcmp (\"@\", @encode (Object *)))\n+  if (strcmp (\"@\", @encode (TestsuiteObject *)))\n     {\n       abort ();\n     }"}, {"sha": "c380291b5a1124474229a883d93334091137149a", "filename": "gcc/testsuite/objc/execute/enumeration-1.m", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fenumeration-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fenumeration-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fenumeration-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,7 +1,6 @@\n /* Contributed by Nicola Pero -  Wed Dec  5 17:12:40 GMT 2001 */\n #include <stdlib.h>\n-#import \"../../objc-obj-c++-shared/Object1.h\"\n-#include <objc/objc.h>\n+#import \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n /* Test using a bitfield enumeration ivar.  */\n \n@@ -11,7 +10,7 @@\n   white\n } color;\n \n-@interface TestClass: Object\n+@interface TestClass: TestsuiteObject\n {\n   color c:2;\n }\n@@ -48,4 +47,4 @@ int main (void)\n \n   return 0;\n }\n-#include \"../../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "3ce0504ffa0003bedecf031e44049c931755856c", "filename": "gcc/testsuite/objc/execute/enumeration-2.m", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fenumeration-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fenumeration-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fenumeration-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,7 +1,6 @@\n /* Contributed by Nicola Pero -  Wed Dec  5 17:12:40 GMT 2001 */\n #include <stdlib.h>\n-#import \"../../objc-obj-c++-shared/Object1.h\"\n-#include <objc/objc.h>\n+#import \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n typedef enum { black, white } color;\n \n@@ -11,7 +10,7 @@\n   color b:2;\n } color_couple;\n \n-@interface TestClass: Object\n+@interface TestClass: TestsuiteObject\n {\n   color_couple *c;\n }\n@@ -50,4 +49,4 @@ int main (void)\n \n   return 0;\n }\n-#include \"../../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "ea8ef39936e7e0b77bd8c14c7ff625ada7b7a6fd", "filename": "gcc/testsuite/objc/execute/exceptions/catchall-1.m", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fcatchall-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fcatchall-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fcatchall-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,7 +4,7 @@\n \n #include <stdio.h>\n #include <stdlib.h>\n-#import \"../../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n /* The following is not required in actual user code; we include it\n    here to check that the compiler generates an internal definition of\n@@ -13,18 +13,18 @@\n \n #define CHECK_IF(expr) if(!(expr)) abort()\n \n-@interface Frob: Object\n+@interface Frob: TestsuiteObject\n @end\n \n-@implementation Frob: Object\n+@implementation Frob: TestsuiteObject\n @end\n \n static Frob* _connection = nil;\n \n //--------------------------------------------------------------------\n \n \n-void test (Object* sendPort)\n+void test (TestsuiteObject* sendPort)\n {\n \tint cleanupPorts = 1;\n \tFrob* receivePort = nil;\n@@ -51,7 +51,7 @@ void test (Object* sendPort)\n \t\tprintf (\"cleanupPorts = %d\\n\", cleanupPorts);\n \t\tprintf (\"---\\n\");\t\t\n \t\t\n-\t\t@throw [Object new];\n+\t\t@throw [TestsuiteObject new];\n \t}\n \t@catch(Frob *obj) {\n \t\tprintf (\"Exception caught by incorrect handler!\\n\");\n@@ -71,7 +71,7 @@ void test (Object* sendPort)\n \n int main (void) {\n \n-\ttest((Object *)-1);\n+\ttest((TestsuiteObject *)-1);\n \treturn 0;\n }\n-#import \"../../../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "30ec7b2d12a6b257d87ead37d0394ad00b13df42", "filename": "gcc/testsuite/objc/execute/exceptions/finally-1.m", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Ffinally-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Ffinally-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Ffinally-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,22 +1,6 @@\n #include <stdio.h>\n #include <stdlib.h>\n-//#import \"../../../objc-obj-c++-shared/Object1.h\"\n-#ifdef __OBJC2__\n-#include <objc/runtime.h>\n-@interface Object\n-+ initialize;\n-+ new;\n-- free;\n-@end\n-@implementation Object\n-+ initialize { return self; }\n-+ new  { return class_createInstance (self, 0); }\n-- free { return object_dispose(self);}\n-@end\n-\n-#else\n-#import \"../../../objc-obj-c++-shared/Object1.h\"\n-#endif\n+#include \"../../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n static int made_try = 0;\n \n@@ -42,7 +26,7 @@ @implementation Object\n   @try\n   {\n     thrower_try_body();\n-    @throw [Object new];\n+    @throw [TestsuiteObject new];\n   }\n   @finally\n   {\n@@ -73,4 +57,4 @@ @implementation Object\n     abort ();\n   return 0;\n }\n-//#import \"../../../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "5738b225e23e9307a0e2660c1a38c05082406657", "filename": "gcc/testsuite/objc/execute/exceptions/foward-1.m", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Ffoward-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Ffoward-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Ffoward-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,42 +1,22 @@\n /* Check that throwing an exception from a -forward:: works.  */\n /* Developed by Marcin Koziej <creep@desk.pl>.  */\n \n+#include <stdio.h>\n #include <stdlib.h>\n-#include <objc/Object.h>\n-#ifndef __NEXT_RUNTIME__\n-#import <objc/objc-api.h>\n-#endif\n-\n-#ifdef __OBJC2__\n-@interface Object (TEST_SUITE_ADDITIONS)\n-+ initialize;\n-+ alloc;\n-+ new;\n-- init;\n-- free;\n-@end\n-\n-@implementation Object (TEST_SUITE_ADDITIONS)\n-+ initialize { return self; }\n-+ alloc { return class_createInstance (self, 0); }\n-+ new { return [[self alloc] init]; }\n-- init { return self; }\n-- free { return object_dispose(self); }\n-@end\n-#endif\n+#include \"../../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n static int i;\n \n __attribute__((objc_exception)) \n-@interface Thrower : Object \n+@interface Thrower : TestsuiteObject \n - forward: (SEL) s : (void*) a;\n @end\n \n @implementation Thrower\n - forward: (SEL) s : (void*) a\n {\n   i++;\n-  @throw [Object new];\n+  @throw [TestsuiteObject new];\n   return nil;\n }\n @end"}, {"sha": "2127f44e288ef778d5049e34797e65348b33904d", "filename": "gcc/testsuite/objc/execute/exceptions/handler-1.m", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fhandler-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fhandler-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fhandler-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -13,9 +13,9 @@ int main(void)\n \n #else\n \n-#include <objc/objc-api.h>\n+#include <objc/runtime.h>\n #include <objc/objc-exception.h>\n-#include <objc/Object.h>\n+#include \"../../../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdlib.h>\n \n static unsigned int handlerExpected = 0;\n@@ -37,14 +37,14 @@ int main(void)\n \n   @try\n     {\n-      @throw [Object new];\n+      @throw [TestsuiteObject new];\n     }\n   @catch (id exc)\n     {\n       handlerExpected = 1;\n     }\n \n-  @throw [Object new];\n+  @throw [TestsuiteObject new];\n   abort();\n   return 0;\n }"}, {"sha": "700df97608464f34888d9726bf8cbe14060ddb93", "filename": "gcc/testsuite/objc/execute/exceptions/local-variables-1.m", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Flocal-variables-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Flocal-variables-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Flocal-variables-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -4,7 +4,7 @@\n \n #include <stdlib.h>\n #include <stdio.h>\n-#import \"../../../objc-obj-c++-shared/Object1.h\"\n+#import \"../../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n int gi1 = 9, gi2 = 19;\n float gf1 = 9.0, gf2 = 19.0;\n@@ -29,13 +29,13 @@ void foo (int arg1, float *arg2)\n     local6 = 18.0;\n     pi = &gi2;\n     pf = &gf2;\n-    obj2 = obj1 = [Object new];\n+    obj2 = obj1 = [TestsuiteObject new];\n     arg1 = 17;\n     arg2 = &gf2;\n     \n-    @throw [Object new];\n+    @throw [TestsuiteObject new];\n   }\n-  @catch (Object *obj) {\n+  @catch (TestsuiteObject *obj) {\n     if (local1 != 123 || local2 != 345 || local3 != 5.0 || local4 != 6.0\n        || local5 != 17 || local6 != 18.0) {\n       printf(\"Abort 1\\n\");\n@@ -60,4 +60,4 @@ int main(void) {\n   foo(15, &gf1);\n   return 0;\n }\n-#import \"../../../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "cbe4365da9006f60ba967025a85304f037970905", "filename": "gcc/testsuite/objc/execute/exceptions/matcher-1.m", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fmatcher-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fmatcher-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fmatcher-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -13,9 +13,9 @@ int main(void)\n \n #else\n \n-#include <objc/objc-api.h>\n+#include <objc/runtime.h>\n #include <objc/objc-exception.h>\n-#include <objc/Object.h>\n+#include \"../../../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <stdlib.h>\n \n static unsigned int handlerExpected = 0;\n@@ -27,13 +27,13 @@ int main(void)\n   return 1;\n }\n \n-@interface A : Object\n+@interface A : TestsuiteObject\n @end\n \n @implementation A\n @end\n \n-@interface B : Object\n+@interface B : TestsuiteObject\n @end\n \n @implementation B"}, {"sha": "b6e7b8bb306975ae37e2a5e167d07bc3219831e1", "filename": "gcc/testsuite/objc/execute/exceptions/throw-nil.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fthrow-nil.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fthrow-nil.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fthrow-nil.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,5 +1,5 @@\n #include <objc/objc.h>\n-#include <objc/Object.h>\n+#include \"../../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n #ifdef __NEXT_RUNTIME__\n /* This test only runs for the GNU runtime.  */\n@@ -24,7 +24,7 @@ int main (void)\n     {\n       @throw nil;\n     }\n-  @catch (Object *exc)\n+  @catch (TestsuiteObject *exc)\n     {\n       abort ();\n     }"}, {"sha": "d218183f3418e6e4f9544ae123f8a41771191b0d", "filename": "gcc/testsuite/objc/execute/exceptions/trivial.m", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Ftrivial.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Ftrivial.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Ftrivial.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,5 +1,5 @@\n #include <stdlib.h>\n-#import \"../../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n /* do nothing except prove we can compile and link code calling the\n    ecceptions mechanism */\n@@ -8,12 +8,10 @@ int main(void)\n {\n     @try {\n \tint a = 1 ;\n-\t@throw [Object new];\n+\t@throw [TestsuiteObject new];\n     }\n-    @catch (Object *obj) {\n+    @catch (TestsuiteObject *obj) {\n   \treturn 0;\n     }\n     abort();\n }\n-\n-#import \"../../../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "f0b5853876ac62d00fe41ed482c1e4f4a5aa4306", "filename": "gcc/testsuite/objc/execute/formal_protocol-1.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,7 +1,7 @@\n /* Contributed by Nicola Pero - Fri Mar  9 21:35:47 CET 2001 */\n \n #include <stdlib.h>\n-#import \"../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n /* Tests defining a protocol and a class adopting it */\n \n@@ -10,7 +10,7 @@ - (BOOL) isEnabled;\n - (void) setEnabled: (BOOL)flag;\n @end\n \n-@interface Feature : Object <Enabling>\n+@interface Feature : TestsuiteObject <Enabling>\n {\n   const char *name;\n   BOOL isEnabled;\n@@ -42,4 +42,4 @@ int main (void)\n \n   return 0;\n }\n-#include \"../../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "e3c9db1fbef44f5834c22623042221c3bf536fc2", "filename": "gcc/testsuite/objc/execute/formal_protocol-2.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,7 +1,7 @@\n /* Contributed by Nicola Pero - Fri Mar  9 21:35:47 CET 2001 */\n \n #include <stdlib.h>\n-#import \"../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n /* Test defining a protocol, a class adopting it, and using an object\n    of type `id <protocol>'. */\n@@ -11,7 +11,7 @@ - (BOOL) isEnabled;\n - (void) setEnabled: (BOOL)flag;\n @end\n \n-@interface Feature : Object <Enabling>\n+@interface Feature : TestsuiteObject <Enabling>\n {\n   const char *name;\n   BOOL isEnabled;\n@@ -43,4 +43,4 @@ int main (void)\n \n   return 0;\n }\n-#include \"../../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "0339b9548387cf8a19d6c89fafa6b14c90edc030", "filename": "gcc/testsuite/objc/execute/formal_protocol-3.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-3.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,7 +1,7 @@\n /* Contributed by Nicola Pero - Fri Mar  9 21:35:47 CET 2001 */\n \n #include <stdlib.h>\n-#import \"../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n /* Test defining two protocol, a class adopting both of them, \n    and using an object of type `id <Protocol1, Protocol2>' */ \n@@ -15,7 +15,7 @@ @protocol Evaluating\n - (int) importance;\n @end\n \n-@interface Feature : Object <Enabling, Evaluating>\n+@interface Feature : TestsuiteObject <Enabling, Evaluating>\n {\n   const char *name;\n   BOOL isEnabled;\n@@ -56,4 +56,4 @@ int main (void)\n \n   return 0;\n }\n-#include \"../../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "a416c4a0c09679730908733a430cd3433c5c3566", "filename": "gcc/testsuite/objc/execute/formal_protocol-4.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-4.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,15 +1,15 @@\n /* Contributed by Nicola Pero - Fri Mar  9 21:35:47 CET 2001 */\n \n #include <stdlib.h>\n-#import \"../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n /* Test defining a protocol, a class adopting it in a category */\n \n @protocol Evaluating\n - (int) importance;\n @end\n \n-@interface Feature : Object\n+@interface Feature : TestsuiteObject\n @end\n \n @implementation Feature\n@@ -38,4 +38,4 @@ int main (void)\n \n   return 0;\n }\n-#include \"../../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "73ec02f7e0b58914cfa0c493d28f2f488d82784f", "filename": "gcc/testsuite/objc/execute/formal_protocol-5.m", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-5.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,7 +2,7 @@\n \n #include <stdlib.h>\n #include <objc/Protocol.h>\n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../../objc-obj-c++-shared/runtime.h\"\n \n /* Test defining a protocol, and accessing it using @protocol */\n \n@@ -25,11 +25,7 @@ int main (void)\n {\n   Protocol *protocol = @protocol (Evaluating);\n \n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n   if (strcmp (protocol_getName(protocol), \"Evaluating\"))\n-#else\n-  if (strcmp ([protocol name], \"Evaluating\"))\n-#endif\n     {\n       abort ();\n     }"}, {"sha": "6677963274d50e396485169fffa0bd9d04180847", "filename": "gcc/testsuite/objc/execute/formal_protocol-6.m", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-6.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,7 +2,7 @@\n \n #include <stdlib.h>\n #include <objc/Protocol.h>\n-#include \"../../objc-obj-c++-shared/next-mapping.h\"\n+#include \"../../objc-obj-c++-shared/runtime.h\"\n \n /* Test defining a protocol, and accessing it using @protocol */\n \n@@ -17,11 +17,7 @@ int main (void)\n {\n   Protocol *protocol = @protocol (Evaluating);\n \n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n   if (strcmp (protocol_getName(protocol), \"Evaluating\"))\n-#else\n-  if (strcmp ([protocol name], \"Evaluating\"))\n-#endif\n     {\n       abort ();\n     }"}, {"sha": "9e9e730ff70bf539b86ae08e95f33cc07d4ab89d", "filename": "gcc/testsuite/objc/execute/formal_protocol-7.m", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-7.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,7 +1,8 @@\n /* Contributed by Nicola Pero - Fri Mar  9 21:35:47 CET 2001 */\n \n #include <stdlib.h>\n-#import \"../../objc-obj-c++-shared/Protocol1.h\"\n+#include <objc/Protocol.h>\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n /* Test defining two protocols, one incorporating the other one. */\n \n@@ -14,7 +15,7 @@ - (void) process;\n @end\n \n /* A class adopting the protocol */\n-@interface Test : Object <Processing>\n+@interface Test : TestsuiteObject <Processing>\n {\n   BOOL didConfigure;\n   BOOL didProcess;\n@@ -41,4 +42,4 @@ int main (void)\n \n   return 0;\n }\n-#include \"../../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "f676dd9a06a663db8934fb00ff619c7a844832ee", "filename": "gcc/testsuite/objc/execute/function-message-1.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Ffunction-message-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Ffunction-message-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Ffunction-message-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,6 +1,6 @@\n-#import \"../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n-@interface Foo : Object\n+@interface Foo : TestsuiteObject\n + bar;\n @end\n "}, {"sha": "e21a750ee58ab75344b2c5f75c784baa53aa48c8", "filename": "gcc/testsuite/objc/execute/informal_protocol.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Finformal_protocol.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Finformal_protocol.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Finformal_protocol.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,8 +1,8 @@\n /* Contributed by Nicola Pero - Fri Mar  9 21:35:47 CET 2001 */\n-#import \"../../objc-obj-c++-shared/Object1.h\"\n+#import \"../../objc-obj-c++-shared/TestsuiteObject.h\"\n #include <objc/objc.h>\n \n-@interface Object (StopProtocol)\n+@interface TestsuiteObject (StopProtocol)\n - (void) stop;\n @end\n "}, {"sha": "d27b3c97c69bb098c9e6ee8fe28bfbcbe8cc7c47", "filename": "gcc/testsuite/objc/execute/load-3.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fload-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fload-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fload-3.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -9,10 +9,10 @@\n  */\n \n #include <stdlib.h>\n-#import \"../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <objc/objc.h>\n \n-@interface A : Object\n+@interface A : TestsuiteObject\n @end\n \n @interface B : A"}, {"sha": "0c2166945a11c57a091bad6cfc1c2c2f5bd8f157", "filename": "gcc/testsuite/objc/execute/many_args_method.m", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fmany_args_method.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fmany_args_method.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fmany_args_method.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -30,9 +30,7 @@ + (int) sum: (int)a   : (int)b  : (int)c\n {\n   return [self sumInteger: a  withInteger: b  withInteger: c];\n }\n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n "}, {"sha": "1ca0c48362f31ef057936bb54b1a53a011db3d82", "filename": "gcc/testsuite/objc/execute/nested-3.m", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnested-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnested-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnested-3.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -22,9 +22,7 @@ int test (void)\n   return test ();\n }\n \n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n int main (void)"}, {"sha": "fbe9e25241a773a0d3f8e7c8cabc912ac739b529", "filename": "gcc/testsuite/objc/execute/nested-func-1.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnested-func-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnested-func-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnested-func-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,15 +3,15 @@\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n #include <stdio.h>\n #include <stdlib.h>\n-#import \"../../objc-obj-c++-shared/Object1.h\"\n+#import \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <objc/objc.h>\n \n int bappy (int (*blargh) (int a, int b, int c))\n {\n   return blargh (4, 7, 2) + 3;\n }\n \n-@interface Foo: Object\n+@interface Foo: TestsuiteObject\n + (int)foo;\n @end\n "}, {"sha": "c28f173ce1a296b632405c4bdb5c4efd0baee3ce", "filename": "gcc/testsuite/objc/execute/next_mapping.h", "status": "removed", "additions": 0, "deletions": 906, "changes": 906, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/889ec77132ca388f1d4a3349db729564969feac2/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnext_mapping.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/889ec77132ca388f1d4a3349db729564969feac2/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnext_mapping.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnext_mapping.h?ref=889ec77132ca388f1d4a3349db729564969feac2", "patch": "@@ -1,906 +0,0 @@\n-/* This file \"renames\" various ObjC GNU runtime entry points\n-   (and fakes the existence of several others)\n-   if the NeXT runtime is being used.  */\n-/* Authors: Ziemowit Laski <zlaski@apple.com>  */\n-/*\t    David Ayers <d.ayers@inode.at>  */\n-\n-#ifdef __NEXT_RUNTIME__\n-#include <objc/objc-class.h>\n-#include <objc/Object.h>\n-#include <ctype.h>\n-#include <stdlib.h>\n-#include <string.h>\n-\n-#define objc_get_class(C)\t\t\tobjc_getClass(C)\n-#define objc_get_meta_class(C)\t\t\tobjc_getMetaClass(C)\n-#define class_get_class_method(C, S)\t\tclass_getClassMethod(C, S)\n-#define class_get_instance_method(C, S)\t\tclass_getInstanceMethod(C, S)\n-#define method_get_imp(M)\t\t\t(((Method)M)->method_imp)\n-#define sel_get_name(S)\t\t\t\tsel_getName(S)\n-#define class_create_instance(C)\t\tclass_createInstance(C, 0)\n-#define\tclass_get_class_name(C)\t\t\tobject_getClassName(C)\n-#define class_get_super_class(C)\t\t(((struct objc_class *)C)->super_class)\n-#define object_get_super_class(O)\t\tclass_get_super_class(*(struct objc_class **)O)\n-#define objc_lookup_class(N)\t\t\tobjc_lookUpClass(N)\n-#define object_get_class(O)\t\t\t(*(struct objc_class **)O)\n-#define class_is_class(C)\t\t\t(CLS_GETINFO((struct objc_class *)C, CLS_CLASS)? YES: NO)\n-#define class_is_meta_class(C)\t\t\t(CLS_GETINFO((struct objc_class *)C, CLS_META)? YES: NO)\n-#define object_is_class(O)\t\t\tclass_is_meta_class(*(struct objc_class **)O)\n-#define object_is_meta_class(O)\t\t\t(class_is_meta_class(O) && class_is_meta_class(*(struct objc_class **)O))\n-\n-/* You need either an empty +initialize method or an empty -forward:: method. \n-   The NeXT runtime unconditionally sends +initialize to classes when they are \n-   first used, and unconditionally tries to forward methods that the class \n-   doesn't understand (including +initialize). If you have neither +initialize \n-   nor -forward::, the runtime complains.  \n-\n-   The simplest workaround is to add\n-\n-      + initialize { return self; }\n-\n-   to every root class @implementation.  */\n-\n-#ifndef NULL\n-#define NULL 0\n-#endif\n-\n-/* The following is necessary to \"cover\" the bf*.m test cases on NeXT.  */\n-\n-#undef  MAX\n-#undef  MIN\n-#undef  ROUND\n-\n-#ifdef __cplusplus\n-#define MAX(X, Y) ((X > Y) ? X : Y)\n-#define MIN(X, Y) ((X < Y) ? X : Y)\n-#define ROUND(V, A) (A * ((V + A - 1) / A))\n-#else\n-#define MAX(X, Y)                    \\\n-  ({ typeof (X) __x = (X), __y = (Y); \\\n-     (__x > __y ? __x : __y); })\n-#define MIN(X, Y)                    \\\n-  ({ typeof (X) __x = (X), __y = (Y); \\\n-     (__x < __y ? __x : __y); })\n-#define ROUND(V, A) \\\n-  ({ typeof (V) __v = (V); typeof (A) __a = (A); \\\n-     __a * ((__v+__a - 1)/__a); })\n-#endif\n-\n-#define BITS_PER_UNIT __CHAR_BIT__\n-typedef struct{ char a; } __small_struct;\n-#define STRUCTURE_SIZE_BOUNDARY (BITS_PER_UNIT * sizeof (__small_struct))\n-\n-/* Not sure why the following are missing from NeXT objc headers... */\n-\n-#ifndef _C_LNG_LNG\n-#define _C_LNG_LNG  'q'\n-#endif\n-#ifndef _C_ULNG_LNG\n-#define _C_ULNG_LNG 'Q'\n-#endif\n-#ifndef _C_ATOM\n-#define _C_ATOM     '%'\n-#endif\n-#ifndef _C_BOOL\n-#define _C_BOOL     'B'\n-#endif\n-\n-#define _C_CONST        'r'\n-#define _C_IN           'n'\n-#define _C_INOUT        'N'\n-#define _C_OUT          'o'\n-#define _C_BYCOPY       'O'\n-#define _C_BYREF        'R'\n-#define _C_ONEWAY       'V'\n-#define _C_GCINVISIBLE  '!'\n-   \n-#define _F_CONST        0x01\n-#define _F_IN           0x01\n-#define _F_OUT          0x02\n-#define _F_INOUT        0x03\n-#define _F_BYCOPY       0x04  \n-#define _F_BYREF        0x08  \n-#define _F_ONEWAY       0x10\n-#define _F_GCINVISIBLE  0x20\n-\n-struct objc_struct_layout\n-{\n-  const char *original_type;\n-  const char *type;\n-  const char *prev_type;\n-  unsigned int record_size; \n-  unsigned int record_align;\n-};\n-\n-typedef union arglist {\n-  char *arg_ptr;\n-  char arg_regs[sizeof (char*)];\n-} *arglist_t;                   /* argument frame */\n-\n-const char *objc_skip_typespec (const char *type);\n-void objc_layout_structure_get_info (struct objc_struct_layout *layout,\n-    unsigned int *offset, unsigned int *align, const char **type);\n-void objc_layout_structure (const char *type,\n-    struct objc_struct_layout *layout);\n-BOOL objc_layout_structure_next_member (struct objc_struct_layout *layout);\n-void objc_layout_finish_structure (struct objc_struct_layout *layout,\n-    unsigned int *size, unsigned int *align);\n-int objc_aligned_size (const char *type);\n-\n-/*\n-  return the size of an object specified by type\n-*/\n-\n-int\n-objc_sizeof_type (const char *type)\n-{\n-  /* Skip the variable name if any */\n-  if (*type == '\"')\n-    {\n-      for (type++; *type++ != '\"';)\n-\t/* do nothing */;\n-    }\n-\n-  switch (*type) {\n-  case _C_ID:\n-    return sizeof (id);\n-    break;\n-\n-  case _C_CLASS:\n-    return sizeof (Class);\n-    break;\n-\n-  case _C_SEL:\n-    return sizeof (SEL);\n-    break;\n-\n-  case _C_CHR:\n-    return sizeof (char);\n-    break;\n-\n-  case _C_UCHR:\n-    return sizeof (unsigned char);\n-    break;\n-\n-  case _C_SHT:\n-    return sizeof (short);\n-    break;\n-\n-  case _C_USHT:\n-    return sizeof (unsigned short);\n-    break;\n-\n-  case _C_INT:\n-    return sizeof (int);\n-    break;\n-\n-  case _C_UINT:\n-    return sizeof (unsigned int);\n-    break;\n-\n-  case _C_LNG:\n-    return sizeof (long);\n-    break;\n-\n-  case _C_ULNG:\n-    return sizeof (unsigned long);\n-    break;\n-\n-  case _C_LNG_LNG:\n-    return sizeof (long long);\n-    break;\n-\n-  case _C_ULNG_LNG:\n-    return sizeof (unsigned long long);\n-    break;\n-\n-  case _C_FLT:\n-    return sizeof (float);\n-    break;\n-\n-  case _C_DBL:\n-    return sizeof (double);\n-    break;\n-\n-  case _C_PTR:\n-  case _C_ATOM:\n-  case _C_CHARPTR:\n-    return sizeof (char *);\n-    break;\n-\n-  case _C_ARY_B:\n-    {\n-      int len = atoi (type + 1);\n-      while (isdigit ((unsigned char)*++type))\n-\t;\n-      return len * objc_aligned_size (type);\n-    }\n-    break;\n-\n-  case _C_BFLD:\n-    {\n-      /* The NeXT encoding of bitfields is _still_: b 'size' */\n-      int size = atoi (type + 1);\n-      /* Return an upper bound on byte size */\n-      return (size + BITS_PER_UNIT - 1) / BITS_PER_UNIT;\n-    }\n-\n-  case _C_STRUCT_B:\n-    {\n-      struct objc_struct_layout layout;\n-      unsigned int size;\n-\n-      objc_layout_structure (type, &layout);\n-      while (objc_layout_structure_next_member (&layout))\n-        /* do nothing */ ;\n-      objc_layout_finish_structure (&layout, &size, NULL);\n-\n-      return size;\n-    }\n-\n-  case _C_UNION_B:\n-    {\n-      int max_size = 0;\n-      while (*type != _C_UNION_E && *type++ != '=')\n-\t/* do nothing */;\n-      while (*type != _C_UNION_E)\n-\t{\n-\t  /* Skip the variable name if any */\n-\t  if (*type == '\"')\n-\t    {\n-\t      for (type++; *type++ != '\"';)\n-\t\t/* do nothing */;\n-\t    }\n-\t  max_size = MAX (max_size, objc_sizeof_type (type));\n-\t  type = objc_skip_typespec (type);\n-\t}\n-      return max_size;\n-    }\n-  }\n-  return 0; /* error */\n-}\n-\n-\n-/*\n-  Return the alignment of an object specified by type\n-*/\n-\n-int\n-objc_alignof_type (const char *type)\n-{\n-  /* Skip the variable name if any */\n-  if (*type == '\"')\n-    {\n-      for (type++; *type++ != '\"';)\n-\t/* do nothing */;\n-    }\n-  switch (*type) {\n-  case _C_ID:\n-    return __alignof__ (id);\n-    break;\n-\n-  case _C_CLASS:\n-    return __alignof__ (Class);\n-    break;\n-\n-  case _C_SEL:\n-    return __alignof__ (SEL);\n-    break;\n-\n-  case _C_CHR:\n-    return __alignof__ (char);\n-    break;\n-\n-  case _C_UCHR:\n-    return __alignof__ (unsigned char);\n-    break;\n-\n-  case _C_SHT:\n-    return __alignof__ (short);\n-    break;\n-\n-  case _C_USHT:\n-    return __alignof__ (unsigned short);\n-    break;\n-\n-  case _C_INT:\n-  case _C_BFLD: /* This is for the NeXT only */\n-    return __alignof__ (int);\n-    break;\n-\n-  case _C_UINT:\n-    return __alignof__ (unsigned int);\n-    break;\n-\n-  case _C_LNG:\n-    return __alignof__ (long);\n-    break;\n-\n-  case _C_ULNG:\n-    return __alignof__ (unsigned long);\n-    break;\n-\n-  case _C_LNG_LNG:\n-    return __alignof__ (long long);\n-    break;\n-\n-  case _C_ULNG_LNG:\n-    return __alignof__ (unsigned long long);\n-    break;\n-\n-  case _C_FLT:\n-    return __alignof__ (float);\n-    break;\n-\n-  case _C_DBL:\n-    return __alignof__ (double);\n-    break;\n-\n-  case _C_PTR:\n-  case _C_ATOM:\n-  case _C_CHARPTR:\n-    return __alignof__ (char *);\n-    break;\n-\n-  case _C_ARY_B:\n-    while (isdigit ((unsigned char)*++type))\n-      /* do nothing */;\n-    return objc_alignof_type (type);\n-\n-  case _C_STRUCT_B:\n-    {\n-      struct objc_struct_layout layout;\n-      unsigned int align;\n-\n-      objc_layout_structure (type, &layout);\n-      while (objc_layout_structure_next_member (&layout))\n-        /* do nothing */;\n-      objc_layout_finish_structure (&layout, NULL, &align);\n-\n-      return align;\n-    }\n-\n-  case _C_UNION_B:\n-    {\n-      int maxalign = 0;\n-      while (*type != _C_UNION_E && *type++ != '=')\n-\t/* do nothing */;\n-      while (*type != _C_UNION_E)\n-\t{\n-\t  /* Skip the variable name if any */\n-\t  if (*type == '\"')\n-\t    {\n-\t      for (type++; *type++ != '\"';)\n-\t\t/* do nothing */;\n-\t    }\n-\t  maxalign = MAX (maxalign, objc_alignof_type (type));\n-\t  type = objc_skip_typespec (type);\n-\t}\n-      return maxalign;\n-    }\n-  }\n-  return 0; /* error */\n-}\n-\n-/*\n-  The aligned size if the size rounded up to the nearest alignment.\n-*/\n-\n-int\n-objc_aligned_size (const char *type)\n-{\n-  int size, align;\n-\n-  /* Skip the variable name */\n-  if (*type == '\"')\n-    {\n-      for (type++; *type++ != '\"';)\n-\t/* do nothing */;\n-    }\n-\n-  size = objc_sizeof_type (type);\n-  align = objc_alignof_type (type);\n-\n-  return ROUND (size, align);\n-}\n-\n-/*\n-  The size rounded up to the nearest integral of the wordsize, taken\n-  to be the size of a void *.\n-*/\n-\n-int\n-objc_promoted_size (const char *type)\n-{\n-  int size, wordsize;\n-\n-  /* Skip the variable name */\n-  if (*type == '\"')\n-    {\n-      for (type++; *type++ != '\"';)\n-\t/* do nothing */;\n-    }\n-\n-  size = objc_sizeof_type (type);\n-  wordsize = sizeof (void *);\n-\n-  return ROUND (size, wordsize);\n-}\n-\n-/*\n-  Skip type qualifiers.  These may eventually precede typespecs\n-  occurring in method prototype encodings.\n-*/\n-\n-inline const char *\n-objc_skip_type_qualifiers (const char *type)\n-{\n-  while (*type == _C_CONST\n-\t || *type == _C_IN\n-\t || *type == _C_INOUT\n-\t || *type == _C_OUT\n-\t || *type == _C_BYCOPY\n-         || *type == _C_BYREF\n-\t || *type == _C_ONEWAY\n-\t || *type == _C_GCINVISIBLE)\n-    {\n-      type += 1;\n-    }\n-  return type;\n-}\n-\n-\n-/*\n-  Skip one typespec element.  If the typespec is prepended by type\n-  qualifiers, these are skipped as well.\n-*/\n-\n-const char *\n-objc_skip_typespec (const char *type)\n-{\n-  /* Skip the variable name if any */\n-  if (*type == '\"')\n-    {\n-      for (type++; *type++ != '\"';)\n-\t/* do nothing */;\n-    }\n-\n-  type = objc_skip_type_qualifiers (type);\n-\n-  switch (*type) {\n-\n-  case _C_ID:\n-    /* An id may be annotated by the actual type if it is known\n-       with the @\"ClassName\" syntax */\n-\n-    if (*++type != '\"')\n-      return type;\n-    else\n-      {\n-\twhile (*++type != '\"')\n-\t  /* do nothing */;\n-\treturn type + 1;\n-      }\n-\n-    /* The following are one character type codes */\n-  case _C_CLASS:\n-  case _C_SEL:\n-  case _C_CHR:\n-  case _C_UCHR:\n-  case _C_CHARPTR:\n-  case _C_ATOM:\n-  case _C_SHT:\n-  case _C_USHT:\n-  case _C_INT:\n-  case _C_UINT:\n-  case _C_LNG:\n-  case _C_ULNG:\n-  case _C_LNG_LNG:\n-  case _C_ULNG_LNG:\n-  case _C_FLT:\n-  case _C_DBL:\n-  case _C_VOID:\n-  case _C_UNDEF:\n-    return ++type;\n-    break;\n-\n-  case _C_ARY_B:\n-    /* skip digits, typespec and closing ']' */\n-\n-    while (isdigit ((unsigned char)*++type))\n-      ;\n-    type = objc_skip_typespec (type);\n-    if (*type == _C_ARY_E)\n-      return ++type;\n-    else\n-      break; /* error */\n-\n-  case _C_BFLD:\n-      /* The NeXT encoding for bitfields is _still_: b 'size' */\n-    while (isdigit ((unsigned char)*++type))\n-      ;\t/* skip type and size */\n-    return type;\n-\n-  case _C_STRUCT_B:\n-    /* skip name, and elements until closing '}'  */\n-\n-    while (*type != _C_STRUCT_E && *type++ != '=')\n-      ;\n-    while (*type != _C_STRUCT_E)\n-      {\n-\ttype = objc_skip_typespec (type);\n-      }\n-    return ++type;\n-\n-  case _C_UNION_B:\n-    /* skip name, and elements until closing ')'  */\n-\n-    while (*type != _C_UNION_E && *type++ != '=')\n-      ;\n-    while (*type != _C_UNION_E)\n-      {\n-\ttype = objc_skip_typespec (type);\n-      }\n-    return ++type;\n-\n-  case _C_PTR:\n-    /* Just skip the following typespec */\n-\n-    return objc_skip_typespec (++type);\n-  }\n-  return 0; /* error */\n-}\n-\n-/*\n-  Skip an offset as part of a method encoding.  This is prepended by a\n-  '+' if the argument is passed in registers.\n-*/\n-inline const char *\n-objc_skip_offset (const char *type)\n-{\n-  if (*type == '+')\n-    type++;\n-  while (isdigit ((unsigned char) *++type))\n-    ;\n-  return type;\n-}\n-\n-/*\n-  Skip an argument specification of a method encoding.\n-*/\n-const char *\n-objc_skip_argspec (const char *type)\n-{\n-  type = objc_skip_typespec (type);\n-  type = objc_skip_offset (type);\n-  return type;\n-}\n-\n-/*\n-  Return the number of arguments that the method MTH expects.\n-  Note that all methods need two implicit arguments `self' and\n-  `_cmd'.\n-*/\n-int\n-method_get_number_of_arguments (struct objc_method *mth)\n-{\n-  int i = 0;\n-  const char *type = mth->method_types;\n-  while (*type)\n-    {\n-      type = objc_skip_argspec (type);\n-      i += 1;\n-    }\n-  return i - 1;\n-}\n-\n-/*\n-  Return the size of the argument block needed on the stack to invoke\n-  the method MTH.  This may be zero, if all arguments are passed in\n-  registers.\n-*/\n-\n-int\n-method_get_sizeof_arguments (struct objc_method *mth)\n-{\n-  const char *type = objc_skip_typespec (mth->method_types);\n-  return atoi (type);\n-}\n-\n-/*\n-  Return a pointer to the next argument of ARGFRAME.  type points to\n-  the last argument.  Typical use of this look like:\n-\n-  {\n-    char *datum, *type;\n-    for (datum = method_get_first_argument (method, argframe, &type);\n-         datum; datum = method_get_next_argument (argframe, &type))\n-      {\n-        unsigned flags = objc_get_type_qualifiers (type);\n-        type = objc_skip_type_qualifiers (type);\n-\tif (*type != _C_PTR)\n-          [portal encodeData: datum ofType: type];\n-\telse\n-\t  {\n-\t    if ((flags & _F_IN) == _F_IN)\n-              [portal encodeData: *(char **) datum ofType: ++type];\n-\t  }\n-      }\n-  }\n-*/\n-\n-char *\n-method_get_next_argument (arglist_t argframe, const char **type)\n-{\n-  const char *t = objc_skip_argspec (*type);\n-\n-  if (*t == '\\0')\n-    return 0;\n-\n-  *type = t;\n-  t = objc_skip_typespec (t);\n-\n-  if (*t == '+')\n-    return argframe->arg_regs + atoi (++t);\n-  else\n-    return argframe->arg_ptr + atoi (t);\n-}\n-\n-/*\n-  Return a pointer to the value of the first argument of the method\n-  described in M with the given argumentframe ARGFRAME.  The type\n-  is returned in TYPE.  type must be passed to successive calls of\n-  method_get_next_argument.\n-*/\n-char *\n-method_get_first_argument (struct objc_method *m,\n-\t\t\t   arglist_t argframe,\n-\t\t\t   const char **type)\n-{\n-  *type = m->method_types;\n-  return method_get_next_argument (argframe, type);\n-}\n-\n-/*\n-   Return a pointer to the ARGth argument of the method\n-   M from the frame ARGFRAME.  The type of the argument\n-   is returned in the value-result argument TYPE\n-*/\n-\n-char *\n-method_get_nth_argument (struct objc_method *m,\n-\t\t\t arglist_t argframe, int arg,\n-\t\t\t const char **type)\n-{\n-  const char *t = objc_skip_argspec (m->method_types);\n-\n-  if (arg > method_get_number_of_arguments (m))\n-    return 0;\n-\n-  while (arg--)\n-    t = objc_skip_argspec (t);\n-\n-  *type = t;\n-  t = objc_skip_typespec (t);\n-\n-  if (*t == '+')\n-    return argframe->arg_regs + atoi (++t);\n-  else\n-    return argframe->arg_ptr + atoi (t);\n-}\n-\n-unsigned\n-objc_get_type_qualifiers (const char *type)\n-{\n-  unsigned res = 0;\n-  BOOL flag = YES;\n-\n-  while (flag)\n-    switch (*type++)\n-      {\n-      case _C_CONST:\tres |= _F_CONST; break;\n-      case _C_IN:\tres |= _F_IN; break;\n-      case _C_INOUT:\tres |= _F_INOUT; break;\n-      case _C_OUT:\tres |= _F_OUT; break;\n-      case _C_BYCOPY:\tres |= _F_BYCOPY; break;\n-      case _C_BYREF:  res |= _F_BYREF; break;\n-      case _C_ONEWAY:\tres |= _F_ONEWAY; break;\n-      case _C_GCINVISIBLE: res |= _F_GCINVISIBLE; break;\n-      default: flag = NO;\n-    }\n-\n-  return res;\n-}\n-\n-\n-/* The following three functions can be used to determine how a\n-   structure is laid out by the compiler. For example:\n-\n-  struct objc_struct_layout layout;\n-  int i;\n-\n-  objc_layout_structure (type, &layout);\n-  while (objc_layout_structure_next_member (&layout))\n-    {\n-      int position, align;\n-      const char *type;\n-\n-      objc_layout_structure_get_info (&layout, &position, &align, &type);\n-      printf (\"element %d has offset %d, alignment %d\\n\",\n-              i++, position, align);\n-    }\n-\n-  These functions are used by objc_sizeof_type and objc_alignof_type\n-  functions to compute the size and alignment of structures. The\n-  previous method of computing the size and alignment of a structure\n-  was not working on some architectures, particulary on AIX, and in\n-  the presence of bitfields inside the structure. */\n-void\n-objc_layout_structure (const char *type,\n-                           struct objc_struct_layout *layout)\n-{\n-  const char *ntype;\n-\n-  layout->original_type = ++type;\n-\n-  /* Skip \"<name>=\" if any. Avoid embedded structures and unions. */\n-  ntype = type;\n-  while (*ntype != _C_STRUCT_E && *ntype != _C_STRUCT_B && *ntype != _C_UNION_B\n-         && *ntype++ != '=')\n-    /* do nothing */;\n-\n-  /* If there's a \"<name>=\", ntype - 1 points to '='; skip the name */\n-  if (*(ntype - 1) == '=')\n-    type = ntype;\n-\n-  layout->type = type;\n-  layout->prev_type = NULL;\n-  layout->record_size = 0;\n-  layout->record_align = MAX (BITS_PER_UNIT, STRUCTURE_SIZE_BOUNDARY);\n-}\n-\n-\n-BOOL\n-objc_layout_structure_next_member (struct objc_struct_layout *layout)\n-{\n-  register int desired_align = 0;\n-\n-  /* The current type without the type qualifiers */\n-  const char *type;\n-\n-  /* Add the size of the previous field to the size of the record.  */\n-  if (layout->prev_type)\n-    {\n-      type = objc_skip_type_qualifiers (layout->prev_type);\n-\n-      if (*type != _C_BFLD)\n-        layout->record_size += objc_sizeof_type (type) * BITS_PER_UNIT;\n-      else\n-\tlayout->record_size += atoi (++type);\n-    }\n-\n-  if (*layout->type == _C_STRUCT_E)\n-    return NO;\n-\n-  /* Skip the variable name if any */\n-  if (*layout->type == '\"')\n-    {\n-      for (layout->type++; *layout->type++ != '\"';)\n-        /* do nothing */;\n-    }\n-\n-  type = objc_skip_type_qualifiers (layout->type);\n-\n-  desired_align = objc_alignof_type (type) * BITS_PER_UNIT;\n-\n-  /* Record must have at least as much alignment as any field.\n-     Otherwise, the alignment of the field within the record\n-     is meaningless.  */\n-  layout->record_align = MAX (layout->record_align, desired_align);\n-\n-  if (*type == _C_BFLD)\n-    {\n-      int bfld_size = atoi (++type);\n-      int int_align = __alignof__ (int) * BITS_PER_UNIT;\n-      /* If this bitfield would traverse a word alignment boundary, push it out \n-\t to that boundary instead.  */\n-      if (layout->record_size % int_align\n-\t  && (layout->record_size / int_align\n-\t      < (layout->record_size + bfld_size - 1) / int_align))\n-\tlayout->record_size = ROUND (layout->record_size, int_align);\n-    }\n-  else if (layout->record_size % desired_align != 0)\n-    {\n-      /* We need to skip space before this field.\n-         Bump the cumulative size to multiple of field alignment.  */\n-      layout->record_size = ROUND (layout->record_size, desired_align);\n-    }\n-\n-  /* Jump to the next field in record. */\n-\n-  layout->prev_type = layout->type;\n-  layout->type = objc_skip_typespec (layout->type);      /* skip component */\n-\n-  return YES;\n-}\n-\n-\n-void objc_layout_finish_structure (struct objc_struct_layout *layout,\n-                                   unsigned int *size,\n-                                   unsigned int *align)\n-{\n-  if (layout->type && *layout->type == _C_STRUCT_E)\n-    {\n-      /* Round the size up to be a multiple of the required alignment */\n-      layout->record_size = ROUND (layout->record_size, layout->record_align);\n-      layout->type = NULL;\n-    }\n-  if (size)\n-    *size = layout->record_size / BITS_PER_UNIT;\n-  if (align)\n-    *align = layout->record_align / BITS_PER_UNIT;\n-}\n-\n-\n-void objc_layout_structure_get_info (struct objc_struct_layout *layout,\n-                                     unsigned int *offset,\n-                                     unsigned int *align,\n-                                     const char **type)\n-{\n-  if (offset)\n-    *offset = layout->record_size / BITS_PER_UNIT;\n-  if (align)\n-    *align = layout->record_align / BITS_PER_UNIT;\n-  if (type)\n-    *type = layout->prev_type;\n-}\n-\n-/* A small, portable NSConstantString implementation for use with the NeXT\n-   runtime.\n-   \n-   On full-fledged Mac OS X systems, NSConstantString is provided\n-   as part of the Foundation framework.  However, on bare Darwin systems,\n-   Foundation is not included, and hence there is no NSConstantString \n-   implementation to link against.\n-\n-   This code is derived from the GNU runtime's NXConstantString implementation.\n-*/\n-\n-struct objc_class _NSConstantStringClassReference;\n-\n-@interface NSConstantString : Object\n-{\n-  char *c_string;\n-  unsigned int len;\n-}\n-\n--(const char *) cString;\n--(unsigned int) length;\n-\n-@end\n-\n-@implementation NSConstantString\n-\n--(const char *) cString\n-{\n-  return (c_string);\n-}\n-\n--(unsigned int) length\n-{\n-  return (len);\n-}\n-\n-@end\n-\n-/* The NSConstantString metaclass will need to be initialized before we can\n-   send messages to strings.  */\n-\n-void objc_constant_string_init (void) __attribute__((constructor));\n-void objc_constant_string_init (void) {\n-  memcpy (&_NSConstantStringClassReference,\n-\t  objc_getClass (\"NSConstantString\"),\n-\t  sizeof (_NSConstantStringClassReference));\n-}\n-\n-#endif  /* #ifdef __NEXT_RUNTIME__ */"}, {"sha": "3835f2fece434e59c4318b6b17711e1d726e9246", "filename": "gcc/testsuite/objc/execute/nil_method-1.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnil_method-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnil_method-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnil_method-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,12 +1,12 @@\n /* Contributed by Nicola Pero - Fri Aug 30 12:55:37 2002 */ \n #include <objc/objc.h>\n-#include <objc/Object.h>\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n /* Test that calling a method of a nil object results in\n    nothing to happen (but not a crash), and nil to be\n    returned.  */\n \n-@interface TestClass : Object\n+@interface TestClass : TestsuiteObject\n \n - (void) testVoid;\n - (id) testId;"}, {"sha": "5db6a57b80151dd7e9c48bd841f45a50096efd01", "filename": "gcc/testsuite/objc/execute/no_clash.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fno_clash.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fno_clash.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fno_clash.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,11 +1,11 @@\n /* Contributed by Nicola Pero - Fri Mar  9 19:39:15 CET 2001 */\n-#import \"../../objc-obj-c++-shared/Object1.h\"\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n #import <objc/objc.h>\n \n /* Test that using the same name for different things makes no \n    problem */\n \n-@interface TestClass : Object\n+@interface TestClass : TestsuiteObject\n {\n   int test;\n }\n@@ -39,4 +39,4 @@ int main (void)\n \n   return 0;\n }\n-#include \"../../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "a14fcc3e6382204183c6c57ac3ee5628e60f652c", "filename": "gcc/testsuite/objc/execute/np-1.m", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnp-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnp-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnp-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -3,7 +3,6 @@\n  * Tue Sep 19 4:29AM\n  */\n \n-#include \"../../objc-obj-c++-shared/Protocol1.h\"\n #include <objc/objc.h>\n \n @protocol MyProtocol\n@@ -25,7 +24,7 @@ int main (void)\n \n   [object methodA];\n \n-   exit (0);\n+  return 0;\n }\n \n "}, {"sha": "af973cf9d942d195c38da09f61cc7d1e7151d80c", "filename": "gcc/testsuite/objc/execute/np-2.m", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnp-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnp-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnp-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -2,7 +2,7 @@\n  * Contributed by Nicola Pero <n.pero@mi.flashnet.it>\n  * Tue Sep 19 4:34AM\n  */\n-#include \"../../objc-obj-c++-shared/Protocol1.h\"\n+\n #include <objc/objc.h>\n \n @protocol MyProtocol\n@@ -17,16 +17,14 @@ + (oneway void) methodA\n {\n   printf (\"methodA\\n\");\n }\n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n int main (void)\n {\n   [MyObject methodA];\n \n-   exit (0);\n+  return 0;\n }\n \n "}, {"sha": "483c38712d6cabb1466bde16e507f83db929fe7b", "filename": "gcc/testsuite/objc/execute/object_is_class.m", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_class.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_class.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_class.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,16 +1,13 @@\n /* Contributed by Nicola Pero - Tue Jul  3 10:55:21 BST 2001 */\n-#ifdef __NEXT_RUNTIME__\n-#  include \"../../objc-obj-c++-shared/next-mapping.h\"\n-#else\n-#  include <objc/objc-api.h>\n-#endif\n-#include \"../../objc-obj-c++-shared/Object1.h\"\n+\n+#include \"../../objc-obj-c++-shared/runtime.h\"\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n /* This test demonstrate a failure in object_is_class which was fixed */\n \n /* Create a class whose instance variables mirror the struct used for\n    Class structures in the runtime ... yes we're feeling evil today */\n-@interface EvilClass : Object\n+@interface EvilClass : TestsuiteObject\n {\n   Class super_class;\n   const char* name;\n@@ -35,12 +32,11 @@ int main (void)\n   EvilClass *evilObject = [EvilClass new];\n   \n   /* Now check that the object is not a class object */\n-  if (object_is_class (evilObject))\n+  if (class_isMetaClass (object_getClass (evilObject)))\n     {\n       printf (\"object_is_class failed\\n\");\n       abort ();\n     }\n \n   return 0;\n }\n-#include \"../../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "217873f53edc219715c139bd4f07b2f68f60d34b", "filename": "gcc/testsuite/objc/execute/object_is_meta_class.m", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_meta_class.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_meta_class.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_meta_class.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,14 +1,11 @@\n /* Contributed by Nicola Pero - Tue Jul  3 10:55:21 BST 2001 */\n-#ifdef __NEXT_RUNTIME__\n-#  include \"../../objc-obj-c++-shared/next-mapping.h\"\n-#else\n-#  include <objc/objc-api.h>\n-#endif\n-#include \"../../objc-obj-c++-shared/Object1.h\"\n+\n+#include \"../../objc-obj-c++-shared/runtime.h\"\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n /* This test demonstrate a failure in object_is_meta_class which was fixed */\n \n-@interface EvilClass : Object\n+@interface EvilClass : TestsuiteObject\n {\n   Class super_class;\n   const char* name;\n@@ -33,12 +30,13 @@ int main (void)\n   EvilClass *evilObject = [EvilClass new];\n   \n   /* Now check that the object is not a meta class object */\n-  if (object_is_meta_class (evilObject))\n+  if (class_isMetaClass (object_getClass (evilObject))\n+      && class_isMetaClass (evilObject))\n     {\n       printf (\"object_is_meta_class failed\\n\");\n       abort ();\n     }\n \n   return 0;\n }\n-#include \"../../objc-obj-c++-shared/Object1-implementation.h\"\n+"}, {"sha": "c1959efe7a660d7ac423e22bb7f41e253c5ca32f", "filename": "gcc/testsuite/objc/execute/private.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprivate.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprivate.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprivate.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,11 +1,11 @@\n /* Contributed by Nicola Pero - Fri Mar  9 19:39:15 CET 2001 */\n-#import \"../../objc-obj-c++-shared/Object1.h\"\n+#import \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n #include <objc/objc.h>\n \n /* Test the @private, @protected, @public keyworks for ivars.  We only\n    check syntax. */\n \n-@interface TestClass : Object\n+@interface TestClass : TestsuiteObject\n {\n   int a;\n "}, {"sha": "b928337aa10ae9ca0d36db6920372e89d378cfdd", "filename": "gcc/testsuite/objc/execute/protocol-isEqual-1.m", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,6 +1,7 @@\n /* Contributed by Nicola Pero - Fri Jun  4 03:16:17 BST 2004 */\n /* Test that a protocol is equal to itself.  */\n-#include \"../../objc-obj-c++-shared/Protocol1.h\"\n+#include <objc/Protocol.h>\n+#include \"../../objc-obj-c++-shared/runtime.h\"\n \n @protocol Foo\n - (void)foo;\n@@ -10,11 +11,7 @@ int main (void)\n {\n   Protocol *protocol = @protocol(Foo);\n \n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-  if ( !protocol_isEqual (protocol, protocol))\n-#else\n-  if (! [protocol isEqual: protocol])\n-#endif\n+  if (!protocol_isEqual (protocol, protocol))\n     {\n       abort ();\n     }"}, {"sha": "cc135766367f2144ebaa9988e90d7f85aa9bd5ec", "filename": "gcc/testsuite/objc/execute/protocol-isEqual-2.m", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,7 +1,7 @@\n /* Contributed by Nicola Pero - Fri Jun  4 03:16:17 BST 2004 */\n /* Test that protocols with different names are different.  */\n-\n-#include \"../../objc-obj-c++-shared/Protocol1.h\"\n+#include \"../../objc-obj-c++-shared/runtime.h\"\n+#include <objc/Protocol.h>\n \n @protocol Foo1\n - (void)foo1;\n@@ -13,11 +13,7 @@ - (void)foo2;\n \n int main (void)\n {\n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n   if (protocol_isEqual (@protocol(Foo1), @protocol(Foo2)))\n-#else\n-  if ([@protocol(Foo1) isEqual: @protocol(Foo2)])\n-#endif\n     {\n       abort ();\n     }"}, {"sha": "70d450fd8479729aefbce2d505e690406fb25174", "filename": "gcc/testsuite/objc/execute/protocol-isEqual-3.m", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-3.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,19 +1,15 @@\n /* Contributed by Nicola Pero - Fri Jun  4 03:16:17 BST 2004 */\n /* Test that a protocol is not equal to nil.  */\n-\n-#include \"../../objc-obj-c++-shared/Protocol1.h\"\n+#include \"../../objc-obj-c++-shared/runtime.h\"\n+#include <objc/Protocol.h>\n \n @protocol Foo\n - (void)foo;\n @end\n \n int main (void)\n {\n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n   if (protocol_isEqual (@protocol(Foo), nil))\n-#else\n-  if ([@protocol(Foo) isEqual: nil])\n-#endif\n     {\n       abort ();\n     }"}, {"sha": "3d14fb263b789c59ba4beb408131636fc014d55c", "filename": "gcc/testsuite/objc/execute/protocol-isEqual-4.m", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprotocol-isEqual-4.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,7 +1,7 @@\n /* Contributed by David Ayers - Fri Jun  4 03:16:17 BST 2004 */\n /* Test that a protocol is not equal to something which is not a protocol.  */\n-\n-#include \"../../objc-obj-c++-shared/Protocol1.h\"\n+#include \"../../objc-obj-c++-shared/runtime.h\"\n+#include <objc/Protocol.h>\n \n @protocol Foo\n - (void)foo;\n@@ -10,11 +10,7 @@ - (void)foo;\n int main (void)\n {\n   /* A Protocol object should not be equal to a Class object.  */\n-#ifdef NEXT_OBJC_USE_NEW_INTERFACE\n-  if (protocol_isEqual (@protocol(Foo), objc_getClass(\"Protocol\")))\n-#else\n-  if ([@protocol(Foo) isEqual: [Protocol class]])\n-#endif\n+  if (protocol_isEqual (@protocol(Foo), (id)objc_getClass(\"Protocol\")))\n     {\n       abort ();\n     }"}, {"sha": "f22ca927fe8eb66d4b5e626f5a7360764be636c2", "filename": "gcc/testsuite/objc/execute/redefining_self.m", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fredefining_self.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fredefining_self.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fredefining_self.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -17,9 +17,7 @@ + (Class) class\n \n   return self;\n }\n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n "}, {"sha": "e75640ce7c59e697c3b27c3382471c571a803768", "filename": "gcc/testsuite/objc/execute/root_methods.m", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Froot_methods.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Froot_methods.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Froot_methods.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,6 +1,6 @@\n /* Contributed by Nicola Pero - Thu Mar  8 16:27:46 CET 2001 */\n \n-#import \"../../objc-obj-c++-shared/next-mapping.h\"\n+#import \"../../objc-obj-c++-shared/runtime.h\"\n #import <objc/objc.h>\n \n /* Test that instance methods of root classes are available as class \n@@ -18,9 +18,7 @@ - (id) self\n {\n   return self;\n }\n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n @interface NormalClass : RootClass\n@@ -31,7 +29,7 @@ @implementation NormalClass : RootClass\n \n int main (void)\n {\n-  Class normal = objc_get_class (\"NormalClass\");\n+  Class normal = objc_getClass (\"NormalClass\");\n \n   if (normal == Nil)\n     {"}, {"sha": "66eee67c024e89ca3127a824b4b6401cfb1289e3", "filename": "gcc/testsuite/objc/execute/selector-1.m", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fselector-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fselector-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fselector-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,19 +1,15 @@\n /* Contributed by Nicola Pero - Thu Mar  8 16:27:46 CET 2001 */\n #include <objc/objc.h>\n-#include <objc/objc-api.h>\n-#include <objc/Object.h>\n+#include \"../../objc-obj-c++-shared/runtime.h\"\n+#include \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n int main (void)\n {\n   SEL selector;\n   char *selname;\n \n   selector = @selector (alloc);\n-#ifdef __NEXT_RUNTIME__\n   selname = sel_getName (selector);\n-#else\n-  selname = sel_get_name (selector);\n-#endif\n   if (strcmp (selname, \"alloc\"))\n     abort ();\n "}, {"sha": "460f64cc1864a4a75f7664efde44bb6c0c13736f", "filename": "gcc/testsuite/objc/execute/static-1.m", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstatic-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstatic-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstatic-1.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -19,9 +19,7 @@ + (int) test\n   return test;\n }\n \n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n int main (void)"}, {"sha": "6cdbf5b775bd8e92e5f3b43d9af14fafee77b57c", "filename": "gcc/testsuite/objc/execute/static-2.m", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstatic-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstatic-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstatic-2.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -22,9 +22,7 @@ + (int) test\n   return test ();\n }\n \n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n int main (void)"}, {"sha": "b660a8ffb6787c1eab6e7bd3960b5177ec87e9e6", "filename": "gcc/testsuite/objc/execute/trivial.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Ftrivial.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Ftrivial.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Ftrivial.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,9 +1,8 @@\n-#import \"../../objc-obj-c++-shared/Object1.h\"\n+#import \"../../objc-obj-c++-shared/TestsuiteObject.m\"\n \n int main(void)\n {\n-  [Object class];\n+  [TestsuiteObject class];\n   return 0;\n }\n \n-#import \"../../objc-obj-c++-shared/Object1-implementation.h\""}, {"sha": "190548bac444029df48d9a60e00251a9ddce425a", "filename": "gcc/testsuite/objc/execute/va_method.m", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fva_method.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b470b80c827f069c516ceeeaf65a174a843480/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fva_method.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fva_method.m?ref=88b470b80c827f069c516ceeeaf65a174a843480", "patch": "@@ -1,6 +1,5 @@\n /* Contributed by Nicola Pero - Thu Mar  8 16:27:46 CET 2001 */\n #include <objc/objc.h>\n-#include <objc/objc-api.h>\n #include <stdarg.h>\n \n /* Test method with variable number of arguments */\n@@ -32,9 +31,7 @@ + (int) sum: (int)firstNumber, ...\n \n   return sum;\n }\n-#ifdef __NEXT_RUNTIME__                                   \n + initialize { return self; }\n-#endif\n @end\n \n int main (void)"}]}