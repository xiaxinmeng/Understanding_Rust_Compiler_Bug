{"sha": "43fa0f09d933559e09925b054dace39b83f12076", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNmYTBmMDlkOTMzNTU5ZTA5OTI1YjA1NGRhY2UzOWI4M2YxMjA3Ng==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-07-19T19:28:09Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-07-19T19:28:09Z"}, "message": "re PR c++/16623 (g++ ICE in tsubst_decl:6081)\n\n\tPR c++/16623\n\t* cp-tree.h (lang_type_class): Add lazy_assignment_op.\n\t(CLASSTYPE_LAZY_ASSIGNMENT_OP): New macro.\n\t* class.c (add_implicitly_declared_members): Use\n\tCLASSTYPE_LAZY_ASSIGNMENT_OP.\n\t* method.c (lazily_declare_fn): Clear\n\tCLASSTYPE_LAZY_ASSIGNMENT_OP.\n\t* search.c (lookup_fnfields_1): Check it.\n\n\tPR c++/16623\n\t* g++.dg/template/assign1.C: New test.\n\nFrom-SVN: r84928", "tree": {"sha": "fa2e55ca24d17194496f15f5099abd3034cf20f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa2e55ca24d17194496f15f5099abd3034cf20f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43fa0f09d933559e09925b054dace39b83f12076", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43fa0f09d933559e09925b054dace39b83f12076", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43fa0f09d933559e09925b054dace39b83f12076", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43fa0f09d933559e09925b054dace39b83f12076/comments", "author": null, "committer": null, "parents": [{"sha": "28c008bb89e0ab798c2d16c68f51fb01fdccb135", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28c008bb89e0ab798c2d16c68f51fb01fdccb135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28c008bb89e0ab798c2d16c68f51fb01fdccb135"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "4038747763734f76a93707b41ce90aade66523ef", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fa0f09d933559e09925b054dace39b83f12076/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fa0f09d933559e09925b054dace39b83f12076/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=43fa0f09d933559e09925b054dace39b83f12076", "patch": "@@ -1,3 +1,14 @@\n+2004-07-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/16623\n+\t* cp-tree.h (lang_type_class): Add lazy_assignment_op.\n+\t(CLASSTYPE_LAZY_ASSIGNMENT_OP): New macro.\n+\t* class.c (add_implicitly_declared_members): Use\n+\tCLASSTYPE_LAZY_ASSIGNMENT_OP.\n+\t* method.c (lazily_declare_fn): Clear\n+\tCLASSTYPE_LAZY_ASSIGNMENT_OP.\n+\t* search.c (lookup_fnfields_1): Check it.\n+\n 2004-07-19  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* class.c (add_method): Delay adding the slot until the end."}, {"sha": "75f7152d4004b2531c1648db339e24768d221490", "filename": "gcc/cp/class.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fa0f09d933559e09925b054dace39b83f12076/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fa0f09d933559e09925b054dace39b83f12076/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=43fa0f09d933559e09925b054dace39b83f12076", "patch": "@@ -2558,7 +2558,11 @@ add_implicitly_declared_members (tree t,\n      of the parameter to the assignment operator will be a const or\n      non-const reference.  */\n   if (!TYPE_HAS_ASSIGN_REF (t) && !TYPE_FOR_JAVA (t))\n-    TYPE_HAS_CONST_ASSIGN_REF (t) = !cant_have_const_assignment;\n+    {\n+      TYPE_HAS_ASSIGN_REF (t) = 1;\n+      TYPE_HAS_CONST_ASSIGN_REF (t) = !cant_have_const_assignment;\n+      CLASSTYPE_LAZY_ASSIGNMENT_OP (t) = 1;\n+    }\n   \n   /* Now, hook all of the new functions on to TYPE_METHODS,\n      and add them to the CLASSTYPE_METHOD_VEC.  */"}, {"sha": "ad8e8dd2d64634fa009aacbd98b95ee61fab3bec", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fa0f09d933559e09925b054dace39b83f12076/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fa0f09d933559e09925b054dace39b83f12076/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=43fa0f09d933559e09925b054dace39b83f12076", "patch": "@@ -989,6 +989,7 @@ struct lang_type_class GTY(())\n \n   unsigned lazy_default_ctor : 1;\n   unsigned lazy_copy_ctor : 1;\n+  unsigned lazy_assignment_op : 1;\n   unsigned has_const_init_ref : 1;\n   unsigned has_complex_init_ref : 1;\n   unsigned has_complex_assign_ref : 1;\n@@ -1002,7 +1003,7 @@ struct lang_type_class GTY(())\n   /* There are some bits left to fill out a 32-bit word.  Keep track\n      of this by updating the size of this bitfield whenever you add or\n      remove a flag.  */\n-  unsigned dummy : 9;\n+  unsigned dummy : 8;\n \n   tree primary_base;\n   tree vfields;\n@@ -1097,6 +1098,11 @@ struct lang_type GTY(())\n #define CLASSTYPE_LAZY_COPY_CTOR(NODE) \\\n   (LANG_TYPE_CLASS_CHECK (NODE)->lazy_copy_ctor)\n \n+/* Nonzero means that NODE (a class type) has an assignment operator\n+   -- but that it has not yet been declared.  */\n+#define CLASSTYPE_LAZY_ASSIGNMENT_OP(NODE) \\\n+  (LANG_TYPE_CLASS_CHECK (NODE)->lazy_assignment_op)\n+\n /* Nonzero means that this _CLASSTYPE node overloads operator=(X&).  */\n #define TYPE_HAS_ASSIGN_REF(NODE) (LANG_TYPE_CLASS_CHECK (NODE)->has_assign_ref)\n "}, {"sha": "e3c65f8ab85fd8da13929d74a22d81c79adc936c", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fa0f09d933559e09925b054dace39b83f12076/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fa0f09d933559e09925b054dace39b83f12076/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=43fa0f09d933559e09925b054dace39b83f12076", "patch": "@@ -1068,6 +1068,8 @@ lazily_declare_fn (special_function_kind sfk, tree type)\n       /* Create appropriate clones.  */\n       clone_function_decl (fn, /*update_method_vec=*/true);\n     }\n+  else if (sfk == sfk_assignment_operator)\n+    CLASSTYPE_LAZY_ASSIGNMENT_OP (type) = 0;\n \n   return fn;\n }"}, {"sha": "b5a322c39e16d569f5defa30a5639f10b1979403", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fa0f09d933559e09925b054dace39b83f12076/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fa0f09d933559e09925b054dace39b83f12076/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43fa0f09d933559e09925b054dace39b83f12076", "patch": "@@ -1,3 +1,8 @@\n+2004-07-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/16623\n+\t* g++.dg/template/assign1.C: New test.\n+\n 2004-07-19  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/12170"}, {"sha": "d0e134a477b035a34cc1cf92b4e39da7985ac0f2", "filename": "gcc/testsuite/g++.dg/template/assign1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fa0f09d933559e09925b054dace39b83f12076/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fassign1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fa0f09d933559e09925b054dace39b83f12076/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fassign1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fassign1.C?ref=43fa0f09d933559e09925b054dace39b83f12076", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/16623\n+\n+template <int N>\n+struct C\n+{\n+  C& operator= (int);\n+};\n+\n+template <int N>\n+C<N>& C<N>::operator= (int)\n+{\n+  return *this;\n+}\n+\n+C<0> a;"}]}