{"sha": "9fa543a540946002e2304feb4cffb698a933d7a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZhNTQzYTU0MDk0NjAwMmUyMzA0ZmViNGNmZmI2OThhOTMzZDdhOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-06-10T19:53:44Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-06-10T19:53:44Z"}, "message": "1.cc: Remove.\n\n2003-06-10  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* testsuite/27_io/basic_filebuf/sputbackc/char/1.cc: Remove.\n\nFrom-SVN: r67730", "tree": {"sha": "28972db22a1f9832014963bf326413af5c84ce42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28972db22a1f9832014963bf326413af5c84ce42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fa543a540946002e2304feb4cffb698a933d7a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa543a540946002e2304feb4cffb698a933d7a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fa543a540946002e2304feb4cffb698a933d7a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa543a540946002e2304feb4cffb698a933d7a9/comments", "author": null, "committer": null, "parents": [{"sha": "e2ce66a9d1551dfd8259efa512baa1b79548f42c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2ce66a9d1551dfd8259efa512baa1b79548f42c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2ce66a9d1551dfd8259efa512baa1b79548f42c"}], "stats": {"total": 155, "additions": 0, "deletions": 155}, "files": [{"sha": "61fc0b54b0efae4937cb3640d2caf2d0c360542a", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputbackc/char/1.cc", "status": "removed", "additions": 0, "deletions": 155, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ce66a9d1551dfd8259efa512baa1b79548f42c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ce66a9d1551dfd8259efa512baa1b79548f42c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1.cc?ref=e2ce66a9d1551dfd8259efa512baa1b79548f42c", "patch": "@@ -1,155 +0,0 @@\n-// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n-\n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 27.8.1.4 Overridden virtual functions\n-\n-#include <fstream>\n-#include <testsuite_hooks.h>\n-\n-// @require@ %-*.tst %-*.txt\n-// @diff@ %-*.tst %*.txt\n-\n-// NB: This test assumes that _M_buf_size == 40, and not the usual\n-// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n-// simulated a bit more readily.\n-// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n-const int buffer_size = 8192;\n-//const int buffer_size = 40;\n-\n-const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n-const char name_02[] = \"filebuf_virtuals-2.txt\"; // empty file, need to create\n-const char name_03[] = \"filebuf_virtuals-3.txt\"; // empty file, need to create\n-\n-class derived_filebuf: public std::filebuf\n-{\n- public:\n-  void\n-  set_size(int_type __size) { _M_buf_size = __size; }\n-};\n-\n-derived_filebuf fb_01; // in \n-derived_filebuf fb_02; // out\n-derived_filebuf fb_03; // in | out\n-\n-// Initialize filebufs to be the same size regardless of platform.\n-void test03()\n-{\n-  fb_01.set_size(buffer_size);\n-  fb_02.set_size(buffer_size);\n-  fb_03.set_size(buffer_size);\n-}\n-\n-// Test overloaded virtual functions.\n-void test05() \n-{\n-  typedef std::filebuf::int_type \tint_type;\n-  typedef std::filebuf::traits_type \ttraits_type;\n-  typedef std::filebuf::pos_type \tpos_type;\n-  typedef std::filebuf::off_type \toff_type;\n-  typedef size_t \t\t\tsize_type;\n-\n-  bool \t\t\t\t\ttest = true;\n-  std::filebuf \t\t\t\tf_tmp;\n-  std::streamsize \t\t\tstrmsz_1, strmsz_2;\n-  std::streamoff  \t\t\tstrmof_1, strmof_2;\n-  int \t\t\t\t\ti = 0, j = 0, k = 0;\n-\n-  fb_01.open(name_01, std::ios_base::in);\n-  fb_02.open(name_02, std::ios_base::out | std::ios_base::trunc);\n-  fb_03.open(name_03, std::ios_base::out | std::ios_base::in | std::ios_base::trunc);\n-\n-  int_type c1 = fb_01.sbumpc();\n-  int_type c2 = fb_02.sbumpc();\n-  int_type c3 = fb_01.sbumpc();\n-  int_type c4 = fb_02.sbumpc();\n-  int_type c5 = fb_03.sbumpc();\n-  int_type c6 = fb_01.sgetc();\n-  int_type c7 = fb_02.sgetc();\n-  int_type c8 = fb_01.sgetc();\n-  int_type c9 = fb_02.sgetc();\n-\n-  // PUT\n-  strmsz_1 = fb_03.sputn(\"racadabras\", 10);//\"abracadabras or what?\"\n-  strmsz_2 = fb_03.sputn(\", i wanna reach out and\", 10);\n-  strmsz_1 = fb_02.sputn(\"racadabras\", 10);\n-  strmsz_1 = fb_01.sputn(\"racadabra\", 10);\n-\n-  // PUTBACK\n-  // int_type pbfail(int_type c)\n-  // called when gptr() null, gptr() == eback(), or traits::eq(*gptr, c) false\n-  // \"pending sequence\" is:\n-  //\t1) everything as defined in underflow\n-  // \t2) + if (traits::eq_int_type(c, traits::eof()), then input\n-  // \tsequence is backed up one char before the pending sequence is\n-  // \tdetermined.\n-  //\t3) + if (not 2) then c is prepended. Left unspecified is\n-  //\twhether the input sequence is backedup or modified in any way\n-  // returns traits::eof() for failure, unspecified other value for success\n-\n-  // int_type sputbackc(char_type c)\n-  // if in_cur not avail || ! traits::eq(c, gptr() [-1]), return pbfail\n-  // otherwise decrements in_cur and returns *gptr()\n-  c1 = fb_03.sgetc(); // -1\n-  c2 = fb_03.sputbackc('z');\n-  strmsz_2 = fb_03.in_avail();\n-  c3 = fb_03.sgetc();\n-  VERIFY( c3 == c2 );\n-  VERIFY( c1 != c3 );\n-  VERIFY( 1 == strmsz_2 );\n-  //test for _in_cur == _in_beg\n-  // fb_03._M_out_beg = \"bd23456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZracada\" etc\n-  fb_03.pubseekoff(10, std::ios_base::beg, \n-\t\t   std::ios_base::in | std::ios_base::out);\n-  fb_03.sputc('m');\n-  strmsz_1 = fb_03.in_avail(); \n-  c1 = fb_03.sgetc(); \n-  fb_03.snextc();\n-  c2 = fb_03.sputbackc('z');  \n-  strmsz_2 = fb_03.in_avail(); \n-  c3 = fb_03.sgetc();  \n-  VERIFY( c1 != c2 );\n-  VERIFY( c3 == c2 );\n-  VERIFY( c1 != c3 );\n-  VERIFY( c2 == 'z' );\n-  //  VERIFY( strmsz_1 == strmsz_2 );\n-  // test for replacing char with identical one\n-  fb_03.snextc();\n-  fb_03.sputc('u');\n-  fb_03.sputc('v');\n-  fb_03.sputc('a');\n-  strmsz_1 = fb_03.in_avail();\n-  c2 = fb_03.sputbackc('a');\n-  strmsz_2 = fb_03.in_avail();\n-  c3 = fb_03.sgetc();\n-  VERIFY( c3 == c2 );\n-  VERIFY( strmsz_1 + 1 == strmsz_2 );\n-  //test for ios_base::out\n-  c1 = fb_02.sgetc(); // undefined\n-  c2 = fb_02.sputbackc('a');\n-  VERIFY( c1 == c2 );\n-  VERIFY( c1 == -1 );\n-}\n-\n-main() \n-{\n-  test03();\n-  test05();\n-  return 0;\n-}"}]}