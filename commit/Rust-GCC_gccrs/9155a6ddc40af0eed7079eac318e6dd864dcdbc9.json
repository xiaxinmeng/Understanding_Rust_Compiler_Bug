{"sha": "9155a6ddc40af0eed7079eac318e6dd864dcdbc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE1NWE2ZGRjNDBhZjBlZWQ3MDc5ZWFjMzE4ZTZkZDg2NGRjZGJjOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-07-25T14:56:57Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-07-25T14:56:57Z"}, "message": "re PR c++/54020 ([c++0x] incorrectly accepted constexpr functions)\n\n\tPR c++/54020\n\t* semantics.c (potential_constant_expression_1) [COND_EXPR]: Call\n\tmaybe_constant_value.\n\nFrom-SVN: r189851", "tree": {"sha": "8e81ba95c15901f6fa7c5c5c1581d3192ee2fcd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e81ba95c15901f6fa7c5c5c1581d3192ee2fcd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9155a6ddc40af0eed7079eac318e6dd864dcdbc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9155a6ddc40af0eed7079eac318e6dd864dcdbc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9155a6ddc40af0eed7079eac318e6dd864dcdbc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9155a6ddc40af0eed7079eac318e6dd864dcdbc9/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e7b9f609af51eb9e5523f19e3faea764f634657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e7b9f609af51eb9e5523f19e3faea764f634657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e7b9f609af51eb9e5523f19e3faea764f634657"}], "stats": {"total": 50, "additions": 45, "deletions": 5}, "files": [{"sha": "f5fbb5cf7db4859db17f090c0ec0fa3bae1bc11a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9155a6ddc40af0eed7079eac318e6dd864dcdbc9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9155a6ddc40af0eed7079eac318e6dd864dcdbc9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9155a6ddc40af0eed7079eac318e6dd864dcdbc9", "patch": "@@ -1,5 +1,9 @@\n 2012-07-25  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/54020\n+\t* semantics.c (potential_constant_expression_1) [COND_EXPR]: Call\n+\tmaybe_constant_value.\n+\n \t* cp-tree.h (tsubst_flags): Remove tf_no_access_control.\n \t* call.c (standard_conversion): Don't set it.\n \t* class.c (resolve_address_of_overloaded_function): Don't check it."}, {"sha": "b27e8ab128b74e49a8040c632d9a6e9f798d0fb6", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9155a6ddc40af0eed7079eac318e6dd864dcdbc9/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9155a6ddc40af0eed7079eac318e6dd864dcdbc9/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9155a6ddc40af0eed7079eac318e6dd864dcdbc9", "patch": "@@ -8497,10 +8497,17 @@ potential_constant_expression_1 (tree t, bool want_rval, tsubst_flags_t flags)\n     case TRUTH_ORIF_EXPR:\n       tmp = boolean_false_node;\n     truth:\n-      if (TREE_OPERAND (t, 0) == tmp)\n-\treturn potential_constant_expression_1 (TREE_OPERAND (t, 1), rval, flags);\n-      else\n-\treturn potential_constant_expression_1 (TREE_OPERAND (t, 0), rval, flags);\n+      {\n+\ttree op = TREE_OPERAND (t, 0);\n+\tif (!potential_constant_expression_1 (op, rval, flags))\n+\t  return false;\n+\tif (!processing_template_decl)\n+\t  op = maybe_constant_value (op);\n+\tif (tree_int_cst_equal (op, tmp))\n+\t  return potential_constant_expression_1 (TREE_OPERAND (t, 1), rval, flags);\n+\telse\n+\t  return true;\n+      }\n \n     case PLUS_EXPR:\n     case MULT_EXPR:\n@@ -8556,7 +8563,9 @@ potential_constant_expression_1 (tree t, bool want_rval, tsubst_flags_t flags)\n       tmp = TREE_OPERAND (t, 0);\n       if (!potential_constant_expression_1 (tmp, rval, flags))\n \treturn false;\n-      else if (integer_zerop (tmp))\n+      if (!processing_template_decl)\n+\ttmp = maybe_constant_value (tmp);\n+      if (integer_zerop (tmp))\n \treturn potential_constant_expression_1 (TREE_OPERAND (t, 2),\n \t\t\t\t\t\twant_rval, flags);\n       else if (TREE_CODE (tmp) == INTEGER_CST)"}, {"sha": "793b4c3f5d3583293489cfaadd1e6cee4ac34652", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-neg2.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9155a6ddc40af0eed7079eac318e6dd864dcdbc9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-neg2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9155a6ddc40af0eed7079eac318e6dd864dcdbc9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-neg2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-neg2.C?ref=9155a6ddc40af0eed7079eac318e6dd864dcdbc9", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/54020\n+// { dg-do compile { target c++11 } }\n+\n+// Preliminaries.\n+extern int nonconst_func(int);\n+constexpr int identity(int x) { return x; }\n+constexpr int zero() { return identity(0); }\n+constexpr int one() { return identity(1); }\n+\n+// Correctly accepted.\n+constexpr int three = one() ? 3 : nonconst_func(0);\n+\n+// Incorrectly accepted.  See [dcl.constexpr] #5:\n+//   For a constexpr function, if no function argument values exist\n+//   such that the function invocation sub-stitution would produce a\n+//   constant expression (5.19), the program is ill-formed; no diagnostic\n+//   required.\n+constexpr int bogus() { return zero () ? 3 : nonconst_func(0); } // { dg-error \"nonconst_func\" }\n+\n+// Correctly rejected (not sure why).\n+constexpr int correct_error() { return nonconst_func(0); } // { dg-error \"nonconst_func\" }\n+\n+// Correctly rejected.\n+constexpr int z = bogus();\t// { dg-error \"\" }\n+\n+// This is also correctly rejected.\n+constexpr int correct_failure() { return 0 ? 3 : nonconst_func(0); } // { dg-error \"nonconst_func\" }"}]}