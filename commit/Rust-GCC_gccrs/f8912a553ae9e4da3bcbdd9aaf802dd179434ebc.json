{"sha": "f8912a553ae9e4da3bcbdd9aaf802dd179434ebc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg5MTJhNTUzYWU5ZTRkYTNiY2JkZDlhYWY4MDJkZDE3OTQzNGViYw==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-05-17T09:55:44Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-05-17T09:55:44Z"}, "message": "Makefile.in: Add tree-ssa-math-opts.c.\n\ngcc:\n2005-05-17  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* Makefile.in: Add tree-ssa-math-opts.c.\n\t* expr.c (expand_expr_real_1) <case RDIV_EXPR>: Never emit as a*(1/b).\n\t* fold-const.c (distribute_real_division): New.\n\t(fold_binary) <case PLUS_EXPR, case MINUS_EXPR>: Use it.\n\t* tree-pass.h (pass_cse_reciprocals): New.\n\t* tree-optimize.c (init_tree_optimization_passes): Run it.\n\t* tree-ssa-math-opts.c: New file.\n\t* doc/passes.texi: Document the new pass.\n\ngcc/testsuite:\n2005-05-17  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* gcc.dg/fold-div-1.c, gcc.dg/recip-1.c, gcc.dg/recip-2.c: New.\n\nFrom-SVN: r99826", "tree": {"sha": "8e47af6adacdca86c18a58438d78923a88ce610b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e47af6adacdca86c18a58438d78923a88ce610b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/comments", "author": null, "committer": null, "parents": [{"sha": "fb664a2cba8002496836cffe6381ad3f834df6cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb664a2cba8002496836cffe6381ad3f834df6cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb664a2cba8002496836cffe6381ad3f834df6cc"}], "stats": {"total": 166, "additions": 149, "deletions": 17}, "files": [{"sha": "a456ec1256a01cbcb54b9045b989e732cbde8e60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8912a553ae9e4da3bcbdd9aaf802dd179434ebc", "patch": "@@ -1,3 +1,14 @@\n+2005-05-17  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* Makefile.in: Add tree-ssa-math-opts.c.\n+\t* expr.c (expand_expr_real_1) <case RDIV_EXPR>: Never emit as a*(1/b).\n+\t* fold-const.c (distribute_real_division): New.\n+\t(fold_binary) <case PLUS_EXPR, case MINUS_EXPR>: Use it.\n+\t* tree-pass.h (pass_cse_reciprocals): New.\n+\t* tree-optimize.c (init_tree_optimization_passes): Run it.\n+\t* tree-ssa-math-opts.c: New file.\n+\t* doc/passes.texi: Document the new pass.\n+\n 2005-05-17  Richard Guenther  <rguenth@gcc.gnu.org>\n \n \tPR middle-end/21595\n@@ -21,7 +32,7 @@\n 2005-05-17  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config/cris/cris.md: Unquote preparation and output statements.\n- \t(BWD, WD, BW): New, mode-macros.\n+\t(BWD, WD, BW): New, mode-macros.\n \t(S, s, m, mm, nbitsm1): New, mode-attrs.\n \t(szext, shift, shiftrt, ncond, ocond, rcond): New, code-macros.\n \t(u, su, shlr, slr, ncond, ocond, rcond, rCC, oCC, roCC): New,"}, {"sha": "f9ed2e871b5cc490b21bda22833fdf66d43c92c5", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f8912a553ae9e4da3bcbdd9aaf802dd179434ebc", "patch": "@@ -934,7 +934,7 @@ OBJS-common = \\\n  tree-phinodes.o tree-ssanames.o tree-sra.o tree-complex.o tree-ssa-loop.o \\\n  tree-ssa-loop-niter.o tree-ssa-loop-manip.o tree-ssa-threadupdate.o\t   \\\n  tree-vectorizer.o tree-vect-analyze.o tree-vect-transform.o\t\t   \\\n- tree-ssa-loop-ivcanon.o tree-ssa-propagate.o\t \t   \t\t   \\\n+ tree-ssa-loop-ivcanon.o tree-ssa-propagate.o tree-ssa-math-opts.o\t   \\\n  tree-ssa-loop-ivopts.o tree-if-conv.o tree-ssa-loop-unswitch.o\t\t   \\\n  alias.o bb-reorder.o bitmap.o builtins.o caller-save.o calls.o\t  \t   \\\n  cfg.o cfganal.o cfgbuild.o cfgcleanup.o cfglayout.o cfgloop.o\t\t   \\\n@@ -1803,6 +1803,8 @@ tree-ssa-loop-im.o : tree-ssa-loop-im.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(PARAMS_H) output.h $(DIAGNOSTIC_H) $(TIMEVAR_H) $(TM_H) coretypes.h \\\n    $(TREE_DUMP_H) tree-pass.h $(FLAGS_H) real.h $(BASIC_BLOCK_H) \\\n    hard-reg-set.h\n+tree-ssa-math-opts.o : tree-ssa-math-opts.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+   $(SYSTEM_H) $(TREE_H) $(TIMEVAR_H) tree-pass.h $(TM_H) $(FLAGS_H)\n tree-ssa-alias.o : tree-ssa-alias.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) tree-inline.h $(FLAGS_H) \\\n    function.h $(TIMEVAR_H) convert.h $(TM_H) coretypes.h langhooks.h \\"}, {"sha": "ad6110e7312cf98dc08556172006cae644488d9b", "filename": "gcc/doc/passes.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/gcc%2Fdoc%2Fpasses.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/gcc%2Fdoc%2Fpasses.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fpasses.texi?ref=f8912a553ae9e4da3bcbdd9aaf802dd179434ebc", "patch": "@@ -354,14 +354,20 @@ This pass transforms tail recursion into a loop.  It is located in\n \n This pass sinks stores and assignments down the flowgraph closer to it's\n use point.  The pass is located in @file{tree-ssa-sink.c} and is\n-described by @code{pass_sink_code}\n+described by @code{pass_sink_code}.\n \n @item Partial redundancy elimination\n \n This pass eliminates partially redundant computations, as well as\n performing load motion.  The pass is located in @file{tree-ssa-pre.c}\n and is described by @code{pass_pre}.\n \n+Just before partial redundancy elimination, if\n+@option{-funsafe-math-optimizations} is on, GCC tries to convert\n+divisions to multiplications by the reciprocal.  The pass is located\n+in @file{tree-ssa-math-opts.c} and is described by\n+@code{pass_cse_reciprocal}.\n+\n @item Loop optimization\n \n The main driver of the pass is placed in @file{tree-ssa-loop.c}"}, {"sha": "459c248f420bf64e84bd36a85f22640f47e1df73", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f8912a553ae9e4da3bcbdd9aaf802dd179434ebc", "patch": "@@ -7806,18 +7806,6 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       return expand_divmod (0, code, mode, op0, op1, target, unsignedp);\n \n     case RDIV_EXPR:\n-      /* Emit a/b as a*(1/b).  Later we may manage CSE the reciprocal saving\n-         expensive divide.  If not, combine will rebuild the original\n-         computation.  */\n-      if (flag_unsafe_math_optimizations && optimize && !optimize_size\n-\t  && TREE_CODE (type) == REAL_TYPE\n-\t  && !real_onep (TREE_OPERAND (exp, 0)))\n-        return expand_expr (build2 (MULT_EXPR, type, TREE_OPERAND (exp, 0),\n-\t\t\t\t    build2 (RDIV_EXPR, type,\n-\t\t\t\t\t    build_real (type, dconst1),\n-\t\t\t\t\t    TREE_OPERAND (exp, 1))),\n-\t\t\t    target, tmode, modifier);\n-\n       goto binop;\n \n     case TRUNC_MOD_EXPR:"}, {"sha": "050d45c6069c2ab6b4d7482d2b2d1d9186d7c191", "filename": "gcc/fold-const.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=f8912a553ae9e4da3bcbdd9aaf802dd179434ebc", "patch": "@@ -3103,6 +3103,46 @@ distribute_bit_expr (enum tree_code code, tree type, tree arg0, tree arg1)\n   return fold_build2 (TREE_CODE (arg0), type, common,\n \t\t      fold_build2 (code, type, left, right));\n }\n+\n+/* Knowing that ARG0 and ARG1 are both RDIV_EXPRs, simplify a binary operation\n+   with code CODE.  This optimization is unsafe.  */\n+static tree\n+distribute_real_division (enum tree_code code, tree type, tree arg0, tree arg1)\n+{\n+  bool mul0 = TREE_CODE (arg0) == MULT_EXPR;\n+  bool mul1 = TREE_CODE (arg1) == MULT_EXPR;\n+\n+  /* (A / C) +- (B / C) -> (A +- B) / C.  */\n+  if (mul0 == mul1\n+      && operand_equal_p (TREE_OPERAND (arg0, 1),\n+\t\t       TREE_OPERAND (arg1, 1), 0))\n+    return fold_build2 (mul0 ? MULT_EXPR : RDIV_EXPR, type,\n+\t\t\tfold_build2 (code, type,\n+\t\t\t\t     TREE_OPERAND (arg0, 0),\n+\t\t\t\t     TREE_OPERAND (arg1, 0)),\n+\t\t\tTREE_OPERAND (arg0, 1));\n+\n+  /* (A / C1) +- (A / C2) -> A * (1 / C1 +- 1 / C2).  */\n+  if (operand_equal_p (TREE_OPERAND (arg0, 0),\n+\t\t       TREE_OPERAND (arg1, 0), 0)\n+      && TREE_CODE (TREE_OPERAND (arg0, 1)) == REAL_CST\n+      && TREE_CODE (TREE_OPERAND (arg1, 1)) == REAL_CST)\n+    {\n+      REAL_VALUE_TYPE r0, r1;\n+      r0 = TREE_REAL_CST (TREE_OPERAND (arg0, 1));\n+      r1 = TREE_REAL_CST (TREE_OPERAND (arg1, 1));\n+      if (!mul0)\n+\treal_arithmetic (&r0, RDIV_EXPR, &dconst1, &r0);\n+      if (!mul1)\n+        real_arithmetic (&r1, RDIV_EXPR, &dconst1, &r1);\n+      real_arithmetic (&r0, code, &r0, &r1);\n+      return fold_build2 (MULT_EXPR, type,\n+\t\t\t  TREE_OPERAND (arg0, 0),\n+\t\t\t  build_real (type, r0));\n+    }\n+\n+  return NULL_TREE;\n+}\n \f\n /* Return a BIT_FIELD_REF of type TYPE to refer to BITSIZE bits of INNER\n    starting at BITPOS.  The field is unsigned if UNSIGNEDP is nonzero.  */\n@@ -7528,6 +7568,12 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t\t\t    fold_convert (type, tem));\n \t    }\n \n+          if (flag_unsafe_math_optimizations\n+\t      && (TREE_CODE (arg0) == RDIV_EXPR || TREE_CODE (arg0) == MULT_EXPR)\n+\t      && (TREE_CODE (arg1) == RDIV_EXPR || TREE_CODE (arg1) == MULT_EXPR)\n+\t      && (tem = distribute_real_division (code, type, arg0, arg1)))\n+\t    return tem;\n+\n \t  /* Convert x+x into x*2.0.  */\n \t  if (operand_equal_p (arg0, arg1, 0)\n \t      && SCALAR_FLOAT_TYPE_P (type))\n@@ -7925,6 +7971,12 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t    return fold_convert (type, fold (tem));\n \t}\n \n+      if (flag_unsafe_math_optimizations\n+\t  && (TREE_CODE (arg0) == RDIV_EXPR || TREE_CODE (arg0) == MULT_EXPR)\n+\t  && (TREE_CODE (arg1) == RDIV_EXPR || TREE_CODE (arg1) == MULT_EXPR)\n+\t  && (tem = distribute_real_division (code, type, arg0, arg1)))\n+\treturn tem;\n+\n       if (TREE_CODE (arg0) == MULT_EXPR\n \t  && TREE_CODE (arg1) == MULT_EXPR\n \t  && (!FLOAT_TYPE_P (type) || flag_unsafe_math_optimizations))"}, {"sha": "6fcfe370eeb1e850ab0dccb329f6e79a331fa4f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8912a553ae9e4da3bcbdd9aaf802dd179434ebc", "patch": "@@ -1,3 +1,7 @@\n+2005-05-17  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* gcc.dg/fold-div-1.c, gcc.dg/recip-1.c, gcc.dg/recip-2.c: New.\n+\n 2005-05-17  Richard Guenther  <rguenth@gcc.gnu.org>\n \n \tPR middle-end/21595\n@@ -319,8 +323,8 @@\n \n 2005-05-02  Paolo Bonzini  <bonzini@gnu.org>\n \n-        * gcc.dg/altivec-3.c (vec_store): Do not use the old\n-        __builtin_altivec_st_internal_4si built-in.\n+\t* gcc.dg/altivec-3.c (vec_store): Do not use the old\n+\t__builtin_altivec_st_internal_4si built-in.\n \n 2005-05-02  Mark Mitchell  <mark@codesourcery.com>\n "}, {"sha": "533908c300cd06f5b14873109fd7e768e62481d6", "filename": "gcc/testsuite/gcc.dg/fold-div-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-div-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-div-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-div-1.c?ref=f8912a553ae9e4da3bcbdd9aaf802dd179434ebc", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-funsafe-math-optimizations -fdump-tree-gimple\" } */\n+\n+float f(float x)\n+{\n+  return x/2 + x/3;\n+}\n+\n+float g(float x)\n+{\n+  return 2/x + 3/x;\n+}\n+\n+float h(float x)\n+{\n+  return x/2 - x/3;\n+}\n+\n+float i(float x)\n+{\n+  return 2/x - 3/x;\n+}\n+\n+/* f and h should be turned into multiplications,\n+   the divisions in g and i should be grouped together.  */\n+\n+/* { dg-final { scan-tree-dump-times \" \\\\* \" 2 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-times \" / \" 2 \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */\n+"}, {"sha": "36f2c23ded76f3636cffbb67cfb85be64137412e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/recip-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frecip-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frecip-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frecip-1.c?ref=f8912a553ae9e4da3bcbdd9aaf802dd179434ebc", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -funsafe-math-optimizations -fdump-tree-recip\" } */\n+\n+float e(float *x, float *y, float *z)\n+{\n+  float m = __builtin_sqrt (*x * *x + *y * *y + *z * *z);\n+  *x /= m;\n+  *y /= m;\n+  *z /= m;\n+}\n+\n+/* Look for only one division.  */\n+/* { dg-final { scan-tree-dump-times \"= .* /\" 1 \"recip\" } } */\n+/* { dg-final { cleanup-tree-dump \"recip\" } } */"}, {"sha": "7d0e97ae3711f6fd20bf7f842de745bbd98d6fad", "filename": "gcc/testsuite/gcc.dg/tree-ssa/recip-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frecip-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frecip-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frecip-2.c?ref=f8912a553ae9e4da3bcbdd9aaf802dd179434ebc", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -funsafe-math-optimizations -fdump-tree-recip\" } */\n+\n+float e(float a, float b, float c, float d, float e, float f)\n+{\n+  if (a < b)\n+    {\n+      a = a + b;\n+      c = c + d;\n+    }\n+\n+  /* The PHI nodes for these divisions should be combined.  */\n+  e = e / a;\n+  f = f / a;\n+  \n+  a = a / c;\n+  b = b / c;\n+\n+  return a + b + e + f;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \" / \" 2 \"recip\" } } */\n+/* { dg-final { cleanup-tree-dump \"recip\" } } */"}, {"sha": "ec873fbb2509130dcc0d4643670b4a02262b6c14", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=f8912a553ae9e4da3bcbdd9aaf802dd179434ebc", "patch": "@@ -383,6 +383,7 @@ init_tree_optimization_passes (void)\n      we add may_alias right after fold builtins\n      which can create arbitrary GIMPLE.  */\n   NEXT_PASS (pass_may_alias);\n+  NEXT_PASS (pass_cse_reciprocals);\n   NEXT_PASS (pass_split_crit_edges);\n   NEXT_PASS (pass_pre);\n   NEXT_PASS (pass_sink_code);"}, {"sha": "0806822a9c4c48081a3c0f1dee7e75f51a837178", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8912a553ae9e4da3bcbdd9aaf802dd179434ebc/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=f8912a553ae9e4da3bcbdd9aaf802dd179434ebc", "patch": "@@ -196,6 +196,7 @@ extern struct tree_opt_pass pass_fold_builtins;\n extern struct tree_opt_pass pass_stdarg;\n extern struct tree_opt_pass pass_early_warn_uninitialized;\n extern struct tree_opt_pass pass_late_warn_uninitialized;\n+extern struct tree_opt_pass pass_cse_reciprocals;\n extern struct tree_opt_pass pass_warn_function_return;\n extern struct tree_opt_pass pass_warn_function_noreturn;\n extern struct tree_opt_pass pass_phiopt;"}]}