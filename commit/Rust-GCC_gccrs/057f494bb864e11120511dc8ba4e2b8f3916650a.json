{"sha": "057f494bb864e11120511dc8ba4e2b8f3916650a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU3ZjQ5NGJiODY0ZTExMTIwNTExZGM4YmE0ZTJiOGYzOTE2NjUwYQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-18T05:30:48Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-18T05:30:48Z"}, "message": "(all.build): New rule for making gcc with a cross-compiler.\n\n(install.build): New target.\n(line 271): Add `####build overrides'.\n(gen*.o): Depend on hconfig.h, not config.h.\n($(HOST_PREFIX_1)rtl.o, $(HOST_PREFIX_1)print-rtl.o,\n $(HOST_PREFIX_1)rtlanal.o, $(HOST_PREFIX_1)obstack.o,\n $(HOST_PREFIX_1)malloc.o): Add final `h' to the regexp to replace.\n\n(gcc.xtar): Fix typo in last change.\n(mostlyclean): Don't use $(MAKEFLAGS) for objc subdir stuff.\n\nFrom-SVN: r2505", "tree": {"sha": "5e1e10ad82ab5e941ad54773b1fe623ac6ef22d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e1e10ad82ab5e941ad54773b1fe623ac6ef22d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/057f494bb864e11120511dc8ba4e2b8f3916650a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/057f494bb864e11120511dc8ba4e2b8f3916650a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/057f494bb864e11120511dc8ba4e2b8f3916650a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/057f494bb864e11120511dc8ba4e2b8f3916650a/comments", "author": null, "committer": null, "parents": [{"sha": "5c4d7cfb47ccf707b4398c7cb5dd51d4a4b260d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c4d7cfb47ccf707b4398c7cb5dd51d4a4b260d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c4d7cfb47ccf707b4398c7cb5dd51d4a4b260d5"}], "stats": {"total": 45, "additions": 28, "deletions": 17}, "files": [{"sha": "1232ffdda642826e113f243403c5ae8d87ee75e1", "filename": "gcc/Makefile.in", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/057f494bb864e11120511dc8ba4e2b8f3916650a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/057f494bb864e11120511dc8ba4e2b8f3916650a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=057f494bb864e11120511dc8ba4e2b8f3916650a", "patch": "@@ -268,6 +268,7 @@ all: all.indirect\n ####target overrides\n ####host overrides\n ####cross overrides\n+####build overrides\n \f\n # Now figure out from those variables how to compile and link.\n \n@@ -422,6 +423,8 @@ Makefile: $(srcdir)/Makefile.in $(srcdir)/configure $(srcdir)/version.c \\\n all.internal: start.encap rest.encap\n # This is what to compile if making a cross-compiler.\n all.cross: native gcc-cross libgcc.a cross-test $(EXTRA_PARTS)\n+# This is what to compile if making gcc with a cross-compiler.\n+all.build: native $(EXTRA_PARTS)\n # This is what must be made before installing GCC and converting libraries.\n start.encap: native xgcc specs $(LIBGCC1) xlimits.h\n # Use this to make a GCC that will be used only to recompile GCC.\n@@ -765,6 +768,8 @@ ld: collect2\n \tln collect2 ld\n \n collect2 : collect2.o version.o $(LIBDEPS)\n+# Don't try modifying collect2 (aka ld) in place--it might be linking this.\n+\t-rm -f collect2\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o collect2 collect2.o version.o $(LIBS)\n \n collect2.o : collect2.c $(CONFIG_H) gstab.h\n@@ -1035,70 +1040,70 @@ genconfig : genconfig.o $(HOST_RTL) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o genconfig \\\n \t  genconfig.o $(HOST_RTL) $(HOST_LIBS)\n \n-genconfig.o : genconfig.c $(RTL_H) config.h\n+genconfig.o : genconfig.c $(RTL_H) hconfig.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genconfig.c\n \n genflags : genflags.o $(HOST_RTL) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o genflags \\\n \t genflags.o $(HOST_RTL) $(HOST_LIBS)\n \n-genflags.o : genflags.c $(RTL_H) config.h\n+genflags.o : genflags.c $(RTL_H) hconfig.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genflags.c\n \n gencodes : gencodes.o $(HOST_RTL) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o gencodes \\\n \t gencodes.o $(HOST_RTL) $(HOST_LIBS)\n \n-gencodes.o : gencodes.c $(RTL_H) config.h\n+gencodes.o : gencodes.c $(RTL_H) hconfig.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/gencodes.c\n \n genemit : genemit.o $(HOST_RTL) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o genemit \\\n \t genemit.o $(HOST_RTL) $(HOST_LIBS)\n \n-genemit.o : genemit.c $(RTL_H) config.h\n+genemit.o : genemit.c $(RTL_H) hconfig.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genemit.c\n \n genrecog : genrecog.o $(HOST_RTL) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o genrecog \\\n \t genrecog.o $(HOST_RTL) $(HOST_LIBS)\n \n-genrecog.o : genrecog.c $(RTL_H) config.h\n+genrecog.o : genrecog.c $(RTL_H) hconfig.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genrecog.c\n \n genextract : genextract.o $(HOST_RTL) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o genextract \\\n \t genextract.o $(HOST_RTL) $(HOST_LIBS)\n \n-genextract.o : genextract.c $(RTL_H) config.h insn-config.h\n+genextract.o : genextract.c $(RTL_H) hconfig.h insn-config.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genextract.c\n \n genpeep : genpeep.o $(HOST_RTL) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o genpeep \\\n \t genpeep.o $(HOST_RTL) $(HOST_LIBS)\n \n-genpeep.o : genpeep.c $(RTL_H) config.h\n+genpeep.o : genpeep.c $(RTL_H) hconfig.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genpeep.c\n \n genattr : genattr.o $(HOST_RTL) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o genattr \\\n \t genattr.o $(HOST_RTL) $(HOST_LIBS)\n \n-genattr.o : genattr.c $(RTL_H) config.h\n+genattr.o : genattr.c $(RTL_H) hconfig.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genattr.c\n \n genattrtab : genattrtab.o $(HOST_RTL) $(HOST_PRINT) $(HOST_RTLANAL) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o genattrtab \\\n \t genattrtab.o $(HOST_RTL) $(HOST_PRINT) $(HOST_RTLANAL) $(HOST_LIBS)\n \n-genattrtab.o : genattrtab.c $(RTL_H) config.h insn-config.h\n+genattrtab.o : genattrtab.c $(RTL_H) hconfig.h insn-config.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genattrtab.c\n \n genoutput : genoutput.o $(HOST_RTL) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o genoutput \\\n \t genoutput.o $(HOST_RTL) $(HOST_LIBS)\n \n-genoutput.o : genoutput.c $(RTL_H) config.h\n+genoutput.o : genoutput.c $(RTL_H) hconfig.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genoutput.c\n \f\n # Compile the libraries to be used by gen*.\n@@ -1107,17 +1112,17 @@ genoutput.o : genoutput.c $(RTL_H) config.h\n # with the rules for rtl.o, alloca.o, etc.\n $(HOST_PREFIX_1)rtl.o: $(srcdir)/rtl.c $(CONFIG_H) $(RTL_H)\n \trm -f $(HOST_PREFIX)rtl.c\n-\tsed -e 's/config[.]/hconfig.h/' $(srcdir)/rtl.c > $(HOST_PREFIX)rtl.c\n+\tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/rtl.c > $(HOST_PREFIX)rtl.c\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)rtl.c\n \n $(HOST_PREFIX_1)print-rtl.o: $(srcdir)/print-rtl.c $(CONFIG_H) $(RTL_H)\n \trm -f $(HOST_PREFIX)print-rtl.c\n-\tsed -e 's/config[.]/hconfig.h/' $(srcdir)/print-rtl.c > $(HOST_PREFIX)print-rtl.c\n+\tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/print-rtl.c > $(HOST_PREFIX)print-rtl.c\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)print-rtl.c\n \n $(HOST_PREFIX_1)rtlanal.o: $(srcdir)/rtlanal.c $(CONFIG_H) $(RTL_H)\n \trm -f $(HOST_PREFIX)rtlanal.c\n-\tsed -e 's/config[.]/hconfig.h/' $(srcdir)/rtlanal.c > $(HOST_PREFIX)rtlanal.c\n+\tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/rtlanal.c > $(HOST_PREFIX)rtlanal.c\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)rtlanal.c\n \n $(HOST_PREFIX_1)alloca.o: alloca.c\n@@ -1127,12 +1132,12 @@ $(HOST_PREFIX_1)alloca.o: alloca.c\n \n $(HOST_PREFIX_1)obstack.o: obstack.c\n \trm -f $(HOST_PREFIX)obstack.c\n-\tsed -e 's/config[.]/hconfig.h/' $(srcdir)/obstack.c > $(HOST_PREFIX)obstack.c\n+\tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/obstack.c > $(HOST_PREFIX)obstack.c\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)obstack.c\n \n $(HOST_PREFIX_1)malloc.o: malloc.c\n \trm -f $(HOST_PREFIX)malloc.c\n-\tsed -e 's/config[.]/hconfig.h/' $(srcdir)/malloc.c > $(HOST_PREFIX)malloc.c\n+\tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/malloc.c > $(HOST_PREFIX)malloc.c\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)malloc.c\n \n # This satisfies the dependency that we get if you cross-compile a compiler\n@@ -1261,7 +1266,7 @@ mostlyclean:\n \t-rm -f $(STAGESTUFF)\n # Clean the objc subdir.\n \tsrcdir1=`cd $(srcdir); pwd`; \\\n-\tcd objc; $(MAKE) $(MAKEFLAGS) -f $$srcdir1/objc/Makefile mostlyclean\n+\tcd objc; $(MAKE) -f $$srcdir1/objc/Makefile mostlyclean\n # Delete the temporary source copies for cross compilation.\n \t-rm -f $(HOST_PREFIX_1)rtl.c $(HOST_PREFIX_1)rtlanal.c\n \t-rm -f $(HOST_PREFIX_1)alloca.c $(HOST_PREFIX_1)malloc.c\n@@ -1340,6 +1345,12 @@ install-native: install-common install-libgcc $(INSTALL_HEADERS) \\\n install-cross: install-common install-common-headers \\\n    install-man install-cross-tools install-libgcc\n \n+# Do nothing while making gcc with a cross-compiler. The person who\n+# makes gcc for the target machine has to know how to put a complete\n+# gcc together by hand.\n+install-build: force\n+\t@echo You have to install gcc on your target machine by hand.\n+\n # Install the tools, libraries and header files for the target machine\n # where cross-compilation will look for them.\n # Use tooldir to find them.\n@@ -1655,7 +1666,7 @@ gcc.xtar: doc c-parse.y objc-parse.y\n \tdone\n \tcd objc; \\\n \tfor file in *[0-9a-zA-Z+]; do \\\n-\t  ln $$file ../tmp/config >/dev/null 2>&1 || cp $$file ../tmp/config; \\\n+\t  ln $$file ../tmp/objc >/dev/null 2>&1 || cp $$file ../tmp/objc; \\\n \tdone\n \tln .gdbinit tmp\n \tmv tmp gcc-$(version)"}]}