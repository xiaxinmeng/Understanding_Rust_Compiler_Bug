{"sha": "ce276b614cde941ac9bbc481e7ffd29e5e53b74d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UyNzZiNjE0Y2RlOTQxYWM5YmJjNDgxZTdmZmQyOWU1ZTUzYjc0ZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-30T21:10:53Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-30T21:10:53Z"}, "message": "tree-ssa-loop-ivopts.c (may_be_unaligned_p): Check the alignment of the variable part of the offset as well.\n\n\t* tree-ssa-loop-ivopts.c (may_be_unaligned_p): Check the alignment of\n\tthe variable part of the offset as well.  Use highest_pow2_factor for\n\tall alignment checks.\n\nFrom-SVN: r158948", "tree": {"sha": "8b95fc1b108384f4752ddbc500a0c367f241fee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b95fc1b108384f4752ddbc500a0c367f241fee9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce276b614cde941ac9bbc481e7ffd29e5e53b74d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce276b614cde941ac9bbc481e7ffd29e5e53b74d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce276b614cde941ac9bbc481e7ffd29e5e53b74d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce276b614cde941ac9bbc481e7ffd29e5e53b74d/comments", "author": null, "committer": null, "parents": [{"sha": "5cb6410a270421888033a4489c9f46d979324877", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cb6410a270421888033a4489c9f46d979324877", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cb6410a270421888033a4489c9f46d979324877"}], "stats": {"total": 77, "additions": 70, "deletions": 7}, "files": [{"sha": "9829562456bfda8c627488d7172727f0210b9497", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce276b614cde941ac9bbc481e7ffd29e5e53b74d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce276b614cde941ac9bbc481e7ffd29e5e53b74d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce276b614cde941ac9bbc481e7ffd29e5e53b74d", "patch": "@@ -1,3 +1,9 @@\n+2010-04-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-ssa-loop-ivopts.c (may_be_unaligned_p): Check the alignment of\n+\tthe variable part of the offset as well.  Use highest_pow2_factor for\n+\tall alignment checks.\n+\n 2010-04-30  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/43879"}, {"sha": "0fa5ee74e0465de9eee7ce7be6443c9fd40b036a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce276b614cde941ac9bbc481e7ffd29e5e53b74d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce276b614cde941ac9bbc481e7ffd29e5e53b74d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ce276b614cde941ac9bbc481e7ffd29e5e53b74d", "patch": "@@ -1,3 +1,7 @@\n+2010-04-30  DJ Delorie  <dj@redhat.com>\n+\n+\t* gcc.c-torture/execute/20100430-1.c: New test.\n+\n 2010-04-30  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/43868"}, {"sha": "d29c6fa1a37c53cd1a721f8a752e2e64dd9eb69a", "filename": "gcc/testsuite/gcc.c-torture/execute/20100430-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce276b614cde941ac9bbc481e7ffd29e5e53b74d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20100430-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce276b614cde941ac9bbc481e7ffd29e5e53b74d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20100430-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20100430-1.c?ref=ce276b614cde941ac9bbc481e7ffd29e5e53b74d", "patch": "@@ -0,0 +1,51 @@\n+/* This used to generate unaligned accesses at -O2 because of IVOPTS.  */\n+\n+struct packed_struct\n+{\n+  struct packed_struct1\n+  {\n+    unsigned char cc11;\n+    unsigned char cc12;\n+  } __attribute__ ((packed)) pst1;\n+  struct packed_struct2\n+  {\n+    unsigned char cc21;\n+    unsigned char cc22;\n+    unsigned short ss[104];\n+    unsigned char cc23[13];\n+  } __attribute__ ((packed)) pst2[4];\n+} __attribute__ ((packed));\n+\n+typedef struct\n+{\n+  int ii;\n+  struct packed_struct buf;\n+} info_t;\n+\n+static unsigned short g;\n+\n+static void __attribute__((noinline))\n+dummy (unsigned short s)\n+{\n+  g = s;\n+}\n+\n+static int\n+foo (info_t *info)\n+{\n+  int i, j;\n+\n+  for (i = 0; i < info->buf.pst1.cc11; i++)\n+    for (j = 0; j < info->buf.pst2[i].cc22; j++)\n+      dummy (info->buf.pst2[i].ss[j]);\n+\n+  return 0;\n+}\n+\n+int main(void)\n+{\n+  info_t info;\n+  info.buf.pst1.cc11 = 2;\n+  info.buf.pst2[0].cc22 = info.buf.pst2[1].cc22 = 8;\n+  return foo (&info);\n+}"}, {"sha": "8662f4ce30d377f68c8df59ba3d9cbf30d4a6f35", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce276b614cde941ac9bbc481e7ffd29e5e53b74d/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce276b614cde941ac9bbc481e7ffd29e5e53b74d/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=ce276b614cde941ac9bbc481e7ffd29e5e53b74d", "patch": "@@ -1536,16 +1536,18 @@ may_be_unaligned_p (tree ref, tree step)\n \n   if (mode != BLKmode)\n     {\n-      double_int mul;\n-      tree al = build_int_cst (TREE_TYPE (step),\n-\t\t\t       GET_MODE_ALIGNMENT (mode) / BITS_PER_UNIT);\n+      unsigned mode_align = GET_MODE_ALIGNMENT (mode);\n \n-      if (base_align < GET_MODE_ALIGNMENT (mode)\n-\t  || bitpos % GET_MODE_ALIGNMENT (mode) != 0\n-\t  || bitpos % BITS_PER_UNIT != 0)\n+      if (base_align < mode_align\n+\t  || (bitpos % mode_align) != 0\n+\t  || (bitpos % BITS_PER_UNIT) != 0)\n \treturn true;\n \n-      if (!constant_multiple_of (step, al, &mul))\n+      if (toffset\n+\t  && (highest_pow2_factor (toffset) * BITS_PER_UNIT) < mode_align)\n+\treturn true;\n+\n+      if ((highest_pow2_factor (step) * BITS_PER_UNIT) < mode_align)\n \treturn true;\n     }\n "}]}