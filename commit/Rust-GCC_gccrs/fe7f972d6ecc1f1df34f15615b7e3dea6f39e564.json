{"sha": "fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU3Zjk3MmQ2ZWNjMWYxZGYzNGYxNTYxNWI3ZTNkZWE2ZjM5ZTU2NA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-10-21T20:24:50Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-10-21T20:24:50Z"}, "message": "Enable AVX512 memory broadcast for FMSUB\n\nMany AVX512 vector operations can broadcast from a scalar memory source.\nThis patch enables memory broadcast for FMSUB operations.  In order to\nsupport AVX512 memory broadcast for FMSUB, FMSUB builtin functions are\nalso added, instead of passing the negated value to FMA builtin functions.\n\ngcc/\n\n\tPR target/72782\n\t* config/i386/avx512fintrin.h (_mm512_fmsub_round_pd): Use\n\t__builtin_ia32_vfmsubpd512_mask.\n\t(_mm512_mask_fmsub_round_pd): Likewise.\n\t(_mm512_fmsub_pd): Likewise.\n\t(_mm512_mask_fmsub_pd): Likewise.\n\t(_mm512_maskz_fmsub_round_pd): Use\n\t__builtin_ia32_vfmsubpd512_maskz.\n\t(_mm512_maskz_fmsub_pd): Likewise.\n\t(_mm512_fmsub_round_ps): Use __builtin_ia32_vfmsubps512_mask.\n\t(_mm512_mask_fmsub_round_ps): Likewise.\n\t(_mm512_fmsub_ps): Likewise.\n\t(_mm512_mask_fmsub_ps): Likewise.\n\t(_mm512_maskz_fmsub_round_ps): Use\n\t__builtin_ia32_vfmsubps512_maskz.\n\t(_mm512_maskz_fmsub_ps): Likewise.\n\t* config/i386/avx512vlintrin.h (_mm256_mask_fmsub_pd): Use\n\t__builtin_ia32_vfmsubpd256_mask.\n\t(_mm256_maskz_fmsub_pd): Use __builtin_ia32_vfmsubpd256_maskz.\n\t(_mm_mask_fmsub_pd): Use __builtin_ia32_vfmaddpd128_mask\n\t(_mm_maskz_fmsub_pd): Use __builtin_ia32_vfmsubpd128_maskz.\n\t(_mm256_mask_fmsub_ps): Use __builtin_ia32_vfmsubps256_mask.\n\t(_mm256_mask_fmsub_ps): Use __builtin_ia32_vfmsubps256_mask.\n\t(_mm256_maskz_fmsub_ps): Use __builtin_ia32_vfmsubps256_maskz.\n\t(_mm_mask_fmsub_ps): Use __builtin_ia32_vfmsubps128_mask.\n\t(_mm_maskz_fmsub_ps): Use __builtin_ia32_vfmsubps128_maskz.\n\t* config/i386/fmaintrin.h (_mm_fmsub_pd): Use\n\t__builtin_ia32_vfmsubpd.\n\t(_mm256_fmsub_pd): Use __builtin_ia32_vfmsubpd256.\n\t(_mm_fmsub_ps): Use __builtin_ia32_vfmsubps.\n\t(_mm256_fmsub_ps): Use __builtin_ia32_vfmsubps256.\n\t(_mm_fmsub_sd): Use __builtin_ia32_vfmsubsd3.\n\t(_mm_fmsub_ss): Use __builtin_ia32_vfmsubss3.\n\t* config/i386/i386-builtin.def: Add\n\t__builtin_ia32_vfmsubpd256_mask,\n\t__builtin_ia32_vfmsubpd256_maskz,\n\t__builtin_ia32_vfmsubpd128_mask,\n\t__builtin_ia32_vfmsubpd128_maskz,\n\t__builtin_ia32_vfmsubps256_mask,\n\t__builtin_ia32_vfmsubps256_maskz,\n\t__builtin_ia32_vfmsubps128_mask,\n\t__builtin_ia32_vfmsubps128_maskz,\n\t__builtin_ia32_vfmsubpd512_mask,\n\t__builtin_ia32_vfmsubpd512_maskz,\n\t__builtin_ia32_vfmsubps512_mask,\n\t__builtin_ia32_vfmsubps512_maskz, __builtin_ia32_vfmsubss3,\n\t__builtin_ia32_vfmsubsd3, __builtin_ia32_vfmsubps,\n\t__builtin_ia32_vfmsubpd, __builtin_ia32_vfmsubps256 and.\n\t__builtin_ia32_vfmsubpd256.\n\t* config/i386/sse.md (fma4i_fmsub_<mode>): New.\n\t(<avx512>_fmsub_<mode>_maskz<round_expand_name>): Likewise.\n\t(*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_1):\n\tLikewise.\n\t(*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_2):\n\tLikewise.\n\t(*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_3):\n\tLikewise.\n\t(fmai_vmfmsub_<mode><round_name>): Likewise.\n\ngcc/testsuite/\n\n\tPR target/72782\n\t* gcc.target/i386/avx512f-fmsub-df-zmm-1.c: New test.\n\t* gcc.target/i386/avx512f-fmsub-sf-zmm-1.c: Likewise.\n\t* gcc.target/i386/avx512f-fmsub-sf-zmm-2.c: Likewise.\n\t* gcc.target/i386/avx512f-fmsub-sf-zmm-3.c: Likewise.\n\t* gcc.target/i386/avx512f-fmsub-sf-zmm-4.c: Likewise.\n\t* gcc.target/i386/avx512f-fmsub-sf-zmm-5.c: Likewise.\n\t* gcc.target/i386/avx512f-fmsub-sf-zmm-6.c: Likewise.\n\t* gcc.target/i386/avx512f-fmsub-sf-zmm-7.c: Likewise.\n\t* gcc.target/i386/avx512f-fmsub-sf-zmm-8.c: Likewise.\n\t* gcc.target/i386/avx512vl-fmsub-sf-xmm-1.c: Likewise.\n\t* gcc.target/i386/avx512vl-fmsub-sf-ymm-1.c: Likewise.\n\nFrom-SVN: r265356", "tree": {"sha": "e1eb0e9ceeeaffb0ac1c74cebe434dcc0f271985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1eb0e9ceeeaffb0ac1c74cebe434dcc0f271985"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "88c08ac43c47bb5d21734be744df913dd568d108", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88c08ac43c47bb5d21734be744df913dd568d108", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88c08ac43c47bb5d21734be744df913dd568d108"}], "stats": {"total": 419, "additions": 361, "deletions": 58}, "files": [{"sha": "11d05f7e9606d001389e641463b11dd50d494f05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "patch": "@@ -1,3 +1,64 @@\n+2018-10-21  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/72782\n+\t* config/i386/avx512fintrin.h (_mm512_fmsub_round_pd): Use\n+\t__builtin_ia32_vfmsubpd512_mask.\n+\t(_mm512_mask_fmsub_round_pd): Likewise.\n+\t(_mm512_fmsub_pd): Likewise.\n+\t(_mm512_mask_fmsub_pd): Likewise.\n+\t(_mm512_maskz_fmsub_round_pd): Use\n+\t__builtin_ia32_vfmsubpd512_maskz.\n+\t(_mm512_maskz_fmsub_pd): Likewise.\n+\t(_mm512_fmsub_round_ps): Use __builtin_ia32_vfmsubps512_mask.\n+\t(_mm512_mask_fmsub_round_ps): Likewise.\n+\t(_mm512_fmsub_ps): Likewise.\n+\t(_mm512_mask_fmsub_ps): Likewise.\n+\t(_mm512_maskz_fmsub_round_ps): Use\n+\t__builtin_ia32_vfmsubps512_maskz.\n+\t(_mm512_maskz_fmsub_ps): Likewise.\n+\t* config/i386/avx512vlintrin.h (_mm256_mask_fmsub_pd): Use\n+\t__builtin_ia32_vfmsubpd256_mask.\n+\t(_mm256_maskz_fmsub_pd): Use __builtin_ia32_vfmsubpd256_maskz.\n+\t(_mm_mask_fmsub_pd): Use __builtin_ia32_vfmaddpd128_mask\n+\t(_mm_maskz_fmsub_pd): Use __builtin_ia32_vfmsubpd128_maskz.\n+\t(_mm256_mask_fmsub_ps): Use __builtin_ia32_vfmsubps256_mask.\n+\t(_mm256_mask_fmsub_ps): Use __builtin_ia32_vfmsubps256_mask.\n+\t(_mm256_maskz_fmsub_ps): Use __builtin_ia32_vfmsubps256_maskz.\n+\t(_mm_mask_fmsub_ps): Use __builtin_ia32_vfmsubps128_mask.\n+\t(_mm_maskz_fmsub_ps): Use __builtin_ia32_vfmsubps128_maskz.\n+\t* config/i386/fmaintrin.h (_mm_fmsub_pd): Use\n+\t__builtin_ia32_vfmsubpd.\n+\t(_mm256_fmsub_pd): Use __builtin_ia32_vfmsubpd256.\n+\t(_mm_fmsub_ps): Use __builtin_ia32_vfmsubps.\n+\t(_mm256_fmsub_ps): Use __builtin_ia32_vfmsubps256.\n+\t(_mm_fmsub_sd): Use __builtin_ia32_vfmsubsd3.\n+\t(_mm_fmsub_ss): Use __builtin_ia32_vfmsubss3.\n+\t* config/i386/i386-builtin.def: Add\n+\t__builtin_ia32_vfmsubpd256_mask,\n+\t__builtin_ia32_vfmsubpd256_maskz,\n+\t__builtin_ia32_vfmsubpd128_mask,\n+\t__builtin_ia32_vfmsubpd128_maskz,\n+\t__builtin_ia32_vfmsubps256_mask,\n+\t__builtin_ia32_vfmsubps256_maskz,\n+\t__builtin_ia32_vfmsubps128_mask,\n+\t__builtin_ia32_vfmsubps128_maskz,\n+\t__builtin_ia32_vfmsubpd512_mask,\n+\t__builtin_ia32_vfmsubpd512_maskz,\n+\t__builtin_ia32_vfmsubps512_mask,\n+\t__builtin_ia32_vfmsubps512_maskz, __builtin_ia32_vfmsubss3,\n+\t__builtin_ia32_vfmsubsd3, __builtin_ia32_vfmsubps,\n+\t__builtin_ia32_vfmsubpd, __builtin_ia32_vfmsubps256 and.\n+\t__builtin_ia32_vfmsubpd256.\n+\t* config/i386/sse.md (fma4i_fmsub_<mode>): New.\n+\t(<avx512>_fmsub_<mode>_maskz<round_expand_name>): Likewise.\n+\t(*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_1):\n+\tLikewise.\n+\t(*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_2):\n+\tLikewise.\n+\t(*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_3):\n+\tLikewise.\n+\t(fmai_vmfmsub_<mode><round_name>): Likewise.\n+\n 2018-10-21  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/sse.md (*<plusminus_insn><mode>3<mask_name>_bcst_1):"}, {"sha": "c0c8fa1efd040a6052da12c9d21e576d9ce2c5a1", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "patch": "@@ -3355,9 +3355,9 @@ extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_fmsub_round_pd (__m512d __A, __m512d __B, __m512d __C, const int __R)\n {\n-  return (__m512d) __builtin_ia32_vfmaddpd512_mask ((__v8df) __A,\n+  return (__m512d) __builtin_ia32_vfmsubpd512_mask ((__v8df) __A,\n \t\t\t\t\t\t    (__v8df) __B,\n-\t\t\t\t\t\t    -(__v8df) __C,\n+\t\t\t\t\t\t    (__v8df) __C,\n \t\t\t\t\t\t    (__mmask8) -1, __R);\n }\n \n@@ -3366,9 +3366,9 @@ __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_fmsub_round_pd (__m512d __A, __mmask8 __U, __m512d __B,\n \t\t\t    __m512d __C, const int __R)\n {\n-  return (__m512d) __builtin_ia32_vfmaddpd512_mask ((__v8df) __A,\n+  return (__m512d) __builtin_ia32_vfmsubpd512_mask ((__v8df) __A,\n \t\t\t\t\t\t    (__v8df) __B,\n-\t\t\t\t\t\t    -(__v8df) __C,\n+\t\t\t\t\t\t    (__v8df) __C,\n \t\t\t\t\t\t    (__mmask8) __U, __R);\n }\n \n@@ -3388,19 +3388,19 @@ __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_maskz_fmsub_round_pd (__mmask8 __U, __m512d __A, __m512d __B,\n \t\t\t     __m512d __C, const int __R)\n {\n-  return (__m512d) __builtin_ia32_vfmaddpd512_maskz ((__v8df) __A,\n+  return (__m512d) __builtin_ia32_vfmsubpd512_maskz ((__v8df) __A,\n \t\t\t\t\t\t     (__v8df) __B,\n-\t\t\t\t\t\t     -(__v8df) __C,\n+\t\t\t\t\t\t     (__v8df) __C,\n \t\t\t\t\t\t     (__mmask8) __U, __R);\n }\n \n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_fmsub_round_ps (__m512 __A, __m512 __B, __m512 __C, const int __R)\n {\n-  return (__m512) __builtin_ia32_vfmaddps512_mask ((__v16sf) __A,\n+  return (__m512) __builtin_ia32_vfmsubps512_mask ((__v16sf) __A,\n \t\t\t\t\t\t   (__v16sf) __B,\n-\t\t\t\t\t\t   -(__v16sf) __C,\n+\t\t\t\t\t\t   (__v16sf) __C,\n \t\t\t\t\t\t   (__mmask16) -1, __R);\n }\n \n@@ -3409,9 +3409,9 @@ __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_fmsub_round_ps (__m512 __A, __mmask16 __U, __m512 __B,\n \t\t\t    __m512 __C, const int __R)\n {\n-  return (__m512) __builtin_ia32_vfmaddps512_mask ((__v16sf) __A,\n+  return (__m512) __builtin_ia32_vfmsubps512_mask ((__v16sf) __A,\n \t\t\t\t\t\t   (__v16sf) __B,\n-\t\t\t\t\t\t   -(__v16sf) __C,\n+\t\t\t\t\t\t   (__v16sf) __C,\n \t\t\t\t\t\t   (__mmask16) __U, __R);\n }\n \n@@ -3431,9 +3431,9 @@ __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_maskz_fmsub_round_ps (__mmask16 __U, __m512 __A, __m512 __B,\n \t\t\t     __m512 __C, const int __R)\n {\n-  return (__m512) __builtin_ia32_vfmaddps512_maskz ((__v16sf) __A,\n+  return (__m512) __builtin_ia32_vfmsubps512_maskz ((__v16sf) __A,\n \t\t\t\t\t\t    (__v16sf) __B,\n-\t\t\t\t\t\t    -(__v16sf) __C,\n+\t\t\t\t\t\t    (__v16sf) __C,\n \t\t\t\t\t\t    (__mmask16) __U, __R);\n }\n \n@@ -3806,28 +3806,28 @@ _mm512_maskz_fnmsub_round_ps (__mmask16 __U, __m512 __A, __m512 __B,\n     (__m512)__builtin_ia32_vfmaddps512_maskz(A, B, C, U, R)\n \n #define _mm512_fmsub_round_pd(A, B, C, R)            \\\n-    (__m512d)__builtin_ia32_vfmaddpd512_mask(A, B, -(C), -1, R)\n+    (__m512d)__builtin_ia32_vfmsubpd512_mask(A, B, C, -1, R)\n \n #define _mm512_mask_fmsub_round_pd(A, U, B, C, R)    \\\n-    (__m512d)__builtin_ia32_vfmaddpd512_mask(A, B, -(C), U, R)\n+    (__m512d)__builtin_ia32_vfmsubpd512_mask(A, B, C, U, R)\n \n #define _mm512_mask3_fmsub_round_pd(A, B, C, U, R)   \\\n     (__m512d)__builtin_ia32_vfmsubpd512_mask3(A, B, C, U, R)\n \n #define _mm512_maskz_fmsub_round_pd(U, A, B, C, R)   \\\n-    (__m512d)__builtin_ia32_vfmaddpd512_maskz(A, B, -(C), U, R)\n+    (__m512d)__builtin_ia32_vfmsubpd512_maskz(A, B, C, U, R)\n \n #define _mm512_fmsub_round_ps(A, B, C, R)            \\\n-    (__m512)__builtin_ia32_vfmaddps512_mask(A, B, -(C), -1, R)\n+    (__m512)__builtin_ia32_vfmsubps512_mask(A, B, C, -1, R)\n \n #define _mm512_mask_fmsub_round_ps(A, U, B, C, R)    \\\n-    (__m512)__builtin_ia32_vfmaddps512_mask(A, B, -(C), U, R)\n+    (__m512)__builtin_ia32_vfmsubps512_mask(A, B, C, U, R)\n \n #define _mm512_mask3_fmsub_round_ps(A, B, C, U, R)   \\\n     (__m512)__builtin_ia32_vfmsubps512_mask3(A, B, C, U, R)\n \n #define _mm512_maskz_fmsub_round_ps(U, A, B, C, R)   \\\n-    (__m512)__builtin_ia32_vfmaddps512_maskz(A, B, -(C), U, R)\n+    (__m512)__builtin_ia32_vfmsubps512_maskz(A, B, C, U, R)\n \n #define _mm512_fmaddsub_round_pd(A, B, C, R)            \\\n     (__m512d)__builtin_ia32_vfmaddsubpd512_mask(A, B, C, -1, R)\n@@ -12416,9 +12416,9 @@ extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_fmsub_pd (__m512d __A, __m512d __B, __m512d __C)\n {\n-  return (__m512d) __builtin_ia32_vfmaddpd512_mask ((__v8df) __A,\n+  return (__m512d) __builtin_ia32_vfmsubpd512_mask ((__v8df) __A,\n \t\t\t\t\t\t    (__v8df) __B,\n-\t\t\t\t\t\t    -(__v8df) __C,\n+\t\t\t\t\t\t    (__v8df) __C,\n \t\t\t\t\t\t    (__mmask8) -1,\n \t\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n }\n@@ -12427,9 +12427,9 @@ extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_fmsub_pd (__m512d __A, __mmask8 __U, __m512d __B, __m512d __C)\n {\n-  return (__m512d) __builtin_ia32_vfmaddpd512_mask ((__v8df) __A,\n+  return (__m512d) __builtin_ia32_vfmsubpd512_mask ((__v8df) __A,\n \t\t\t\t\t\t    (__v8df) __B,\n-\t\t\t\t\t\t    -(__v8df) __C,\n+\t\t\t\t\t\t    (__v8df) __C,\n \t\t\t\t\t\t    (__mmask8) __U,\n \t\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n }\n@@ -12449,9 +12449,9 @@ extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_maskz_fmsub_pd (__mmask8 __U, __m512d __A, __m512d __B, __m512d __C)\n {\n-  return (__m512d) __builtin_ia32_vfmaddpd512_maskz ((__v8df) __A,\n+  return (__m512d) __builtin_ia32_vfmsubpd512_maskz ((__v8df) __A,\n \t\t\t\t\t\t     (__v8df) __B,\n-\t\t\t\t\t\t     -(__v8df) __C,\n+\t\t\t\t\t\t     (__v8df) __C,\n \t\t\t\t\t\t     (__mmask8) __U,\n \t\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n }\n@@ -12460,9 +12460,9 @@ extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_fmsub_ps (__m512 __A, __m512 __B, __m512 __C)\n {\n-  return (__m512) __builtin_ia32_vfmaddps512_mask ((__v16sf) __A,\n+  return (__m512) __builtin_ia32_vfmsubps512_mask ((__v16sf) __A,\n \t\t\t\t\t\t   (__v16sf) __B,\n-\t\t\t\t\t\t   -(__v16sf) __C,\n+\t\t\t\t\t\t   (__v16sf) __C,\n \t\t\t\t\t\t   (__mmask16) -1,\n \t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n }\n@@ -12471,9 +12471,9 @@ extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_fmsub_ps (__m512 __A, __mmask16 __U, __m512 __B, __m512 __C)\n {\n-  return (__m512) __builtin_ia32_vfmaddps512_mask ((__v16sf) __A,\n+  return (__m512) __builtin_ia32_vfmsubps512_mask ((__v16sf) __A,\n \t\t\t\t\t\t   (__v16sf) __B,\n-\t\t\t\t\t\t   -(__v16sf) __C,\n+\t\t\t\t\t\t   (__v16sf) __C,\n \t\t\t\t\t\t   (__mmask16) __U,\n \t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n }\n@@ -12493,9 +12493,9 @@ extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_maskz_fmsub_ps (__mmask16 __U, __m512 __A, __m512 __B, __m512 __C)\n {\n-  return (__m512) __builtin_ia32_vfmaddps512_maskz ((__v16sf) __A,\n+  return (__m512) __builtin_ia32_vfmsubps512_maskz ((__v16sf) __A,\n \t\t\t\t\t\t    (__v16sf) __B,\n-\t\t\t\t\t\t    -(__v16sf) __C,\n+\t\t\t\t\t\t    (__v16sf) __C,\n \t\t\t\t\t\t    (__mmask16) __U,\n \t\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n }"}, {"sha": "fcc35c30076f302e80af4c38f0a11c061725a3f2", "filename": "gcc/config/i386/avx512vlintrin.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h?ref=fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "patch": "@@ -4117,9 +4117,9 @@ __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_fmsub_pd (__m256d __A, __mmask8 __U, __m256d __B,\n \t\t      __m256d __C)\n {\n-  return (__m256d) __builtin_ia32_vfmaddpd256_mask ((__v4df) __A,\n+  return (__m256d) __builtin_ia32_vfmsubpd256_mask ((__v4df) __A,\n \t\t\t\t\t\t    (__v4df) __B,\n-\t\t\t\t\t\t    -(__v4df) __C,\n+\t\t\t\t\t\t    (__v4df) __C,\n \t\t\t\t\t\t    (__mmask8) __U);\n }\n \n@@ -4139,19 +4139,19 @@ __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_maskz_fmsub_pd (__mmask8 __U, __m256d __A, __m256d __B,\n \t\t       __m256d __C)\n {\n-  return (__m256d) __builtin_ia32_vfmaddpd256_maskz ((__v4df) __A,\n+  return (__m256d) __builtin_ia32_vfmsubpd256_maskz ((__v4df) __A,\n \t\t\t\t\t\t     (__v4df) __B,\n-\t\t\t\t\t\t     -(__v4df) __C,\n+\t\t\t\t\t\t     (__v4df) __C,\n \t\t\t\t\t\t     (__mmask8) __U);\n }\n \n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_fmsub_pd (__m128d __A, __mmask8 __U, __m128d __B, __m128d __C)\n {\n-  return (__m128d) __builtin_ia32_vfmaddpd128_mask ((__v2df) __A,\n+  return (__m128d) __builtin_ia32_vfmsubpd128_mask ((__v2df) __A,\n \t\t\t\t\t\t    (__v2df) __B,\n-\t\t\t\t\t\t    -(__v2df) __C,\n+\t\t\t\t\t\t    (__v2df) __C,\n \t\t\t\t\t\t    (__mmask8) __U);\n }\n \n@@ -4171,19 +4171,19 @@ __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_maskz_fmsub_pd (__mmask8 __U, __m128d __A, __m128d __B,\n \t\t    __m128d __C)\n {\n-  return (__m128d) __builtin_ia32_vfmaddpd128_maskz ((__v2df) __A,\n+  return (__m128d) __builtin_ia32_vfmsubpd128_maskz ((__v2df) __A,\n \t\t\t\t\t\t     (__v2df) __B,\n-\t\t\t\t\t\t     -(__v2df) __C,\n+\t\t\t\t\t\t     (__v2df) __C,\n \t\t\t\t\t\t     (__mmask8) __U);\n }\n \n extern __inline __m256\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_fmsub_ps (__m256 __A, __mmask8 __U, __m256 __B, __m256 __C)\n {\n-  return (__m256) __builtin_ia32_vfmaddps256_mask ((__v8sf) __A,\n+  return (__m256) __builtin_ia32_vfmsubps256_mask ((__v8sf) __A,\n \t\t\t\t\t\t   (__v8sf) __B,\n-\t\t\t\t\t\t   -(__v8sf) __C,\n+\t\t\t\t\t\t   (__v8sf) __C,\n \t\t\t\t\t\t   (__mmask8) __U);\n }\n \n@@ -4203,19 +4203,19 @@ __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_maskz_fmsub_ps (__mmask8 __U, __m256 __A, __m256 __B,\n \t\t       __m256 __C)\n {\n-  return (__m256) __builtin_ia32_vfmaddps256_maskz ((__v8sf) __A,\n+  return (__m256) __builtin_ia32_vfmsubps256_maskz ((__v8sf) __A,\n \t\t\t\t\t\t    (__v8sf) __B,\n-\t\t\t\t\t\t    -(__v8sf) __C,\n+\t\t\t\t\t\t    (__v8sf) __C,\n \t\t\t\t\t\t    (__mmask8) __U);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_fmsub_ps (__m128 __A, __mmask8 __U, __m128 __B, __m128 __C)\n {\n-  return (__m128) __builtin_ia32_vfmaddps128_mask ((__v4sf) __A,\n+  return (__m128) __builtin_ia32_vfmsubps128_mask ((__v4sf) __A,\n \t\t\t\t\t\t   (__v4sf) __B,\n-\t\t\t\t\t\t   -(__v4sf) __C,\n+\t\t\t\t\t\t   (__v4sf) __C,\n \t\t\t\t\t\t   (__mmask8) __U);\n }\n \n@@ -4233,9 +4233,9 @@ extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_maskz_fmsub_ps (__mmask8 __U, __m128 __A, __m128 __B, __m128 __C)\n {\n-  return (__m128) __builtin_ia32_vfmaddps128_maskz ((__v4sf) __A,\n+  return (__m128) __builtin_ia32_vfmsubps128_maskz ((__v4sf) __A,\n \t\t\t\t\t\t    (__v4sf) __B,\n-\t\t\t\t\t\t    -(__v4sf) __C,\n+\t\t\t\t\t\t    (__v4sf) __C,\n \t\t\t\t\t\t    (__mmask8) __U);\n }\n "}, {"sha": "2eddd896579905585e5d896392da4d34cccf7133", "filename": "gcc/config/i386/fmaintrin.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Fconfig%2Fi386%2Ffmaintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Fconfig%2Fi386%2Ffmaintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffmaintrin.h?ref=fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "patch": "@@ -86,48 +86,48 @@ extern __inline __m128d\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_fmsub_pd (__m128d __A, __m128d __B, __m128d __C)\n {\n-  return (__m128d)__builtin_ia32_vfmaddpd ((__v2df)__A, (__v2df)__B,\n-                                           -(__v2df)__C);\n+  return (__m128d)__builtin_ia32_vfmsubpd ((__v2df)__A, (__v2df)__B,\n+                                           (__v2df)__C);\n }\n \n extern __inline __m256d\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_fmsub_pd (__m256d __A, __m256d __B, __m256d __C)\n {\n-  return (__m256d)__builtin_ia32_vfmaddpd256 ((__v4df)__A, (__v4df)__B,\n-                                              -(__v4df)__C);\n+  return (__m256d)__builtin_ia32_vfmsubpd256 ((__v4df)__A, (__v4df)__B,\n+                                              (__v4df)__C);\n }\n \n extern __inline __m128\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_fmsub_ps (__m128 __A, __m128 __B, __m128 __C)\n {\n-  return (__m128)__builtin_ia32_vfmaddps ((__v4sf)__A, (__v4sf)__B,\n-                                          -(__v4sf)__C);\n+  return (__m128)__builtin_ia32_vfmsubps ((__v4sf)__A, (__v4sf)__B,\n+                                          (__v4sf)__C);\n }\n \n extern __inline __m256\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_fmsub_ps (__m256 __A, __m256 __B, __m256 __C)\n {\n-  return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,\n-                                             -(__v8sf)__C);\n+  return (__m256)__builtin_ia32_vfmsubps256 ((__v8sf)__A, (__v8sf)__B,\n+                                             (__v8sf)__C);\n }\n \n extern __inline __m128d\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_fmsub_sd (__m128d __A, __m128d __B, __m128d __C)\n {\n-  return (__m128d)__builtin_ia32_vfmaddsd3 ((__v2df)__A, (__v2df)__B,\n-                                            -(__v2df)__C);\n+  return (__m128d)__builtin_ia32_vfmsubsd3 ((__v2df)__A, (__v2df)__B,\n+                                            (__v2df)__C);\n }\n \n extern __inline __m128\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_fmsub_ss (__m128 __A, __m128 __B, __m128 __C)\n {\n-  return (__m128)__builtin_ia32_vfmaddss3 ((__v4sf)__A, (__v4sf)__B,\n-                                           -(__v4sf)__C);\n+  return (__m128)__builtin_ia32_vfmsubss3 ((__v4sf)__A, (__v4sf)__B,\n+                                           (__v4sf)__C);\n }\n \n extern __inline __m128d"}, {"sha": "f5b5e56a01cf8d9517649cd7c7c377166529eb24", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "patch": "@@ -1903,10 +1903,18 @@ BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fmadd_v8sf_maskz, \"__builtin_\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fmadd_v4sf_mask, \"__builtin_ia32_vfmaddps128_mask\", IX86_BUILTIN_VFMADDPS128_MASK, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fmadd_v4sf_mask3, \"__builtin_ia32_vfmaddps128_mask3\", IX86_BUILTIN_VFMADDPS128_MASK3, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fmadd_v4sf_maskz, \"__builtin_ia32_vfmaddps128_maskz\", IX86_BUILTIN_VFMADDPS128_MASKZ, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fmsub_v4df_mask, \"__builtin_ia32_vfmsubpd256_mask\", IX86_BUILTIN_VFMSUBPD256_MASK, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF_V4DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fmsub_v4df_mask3, \"__builtin_ia32_vfmsubpd256_mask3\", IX86_BUILTIN_VFMSUBPD256_MASK3, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF_V4DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fmsub_v4df_maskz, \"__builtin_ia32_vfmsubpd256_maskz\", IX86_BUILTIN_VFMSUBPD256_MASKZ, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF_V4DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fmsub_v2df_mask, \"__builtin_ia32_vfmsubpd128_mask\", IX86_BUILTIN_VFMSUBPD128_MASK, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fmsub_v2df_mask3, \"__builtin_ia32_vfmsubpd128_mask3\", IX86_BUILTIN_VFMSUBPD128_MASK3, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fmsub_v2df_maskz, \"__builtin_ia32_vfmsubpd128_maskz\", IX86_BUILTIN_VFMSUBPD128_MASKZ, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fmsub_v8sf_mask, \"__builtin_ia32_vfmsubps256_mask\", IX86_BUILTIN_VFMSUBPS256_MASK, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF_V8SF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fmsub_v8sf_mask3, \"__builtin_ia32_vfmsubps256_mask3\", IX86_BUILTIN_VFMSUBPS256_MASK3, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF_V8SF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fmsub_v8sf_maskz, \"__builtin_ia32_vfmsubps256_maskz\", IX86_BUILTIN_VFMSUBPS256_MASKZ, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF_V8SF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fmsub_v4sf_mask, \"__builtin_ia32_vfmsubps128_mask\", IX86_BUILTIN_VFMSUBPS128_MASK, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fmsub_v4sf_mask3, \"__builtin_ia32_vfmsubps128_mask3\", IX86_BUILTIN_VFMSUBPS128_MASK3, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fmsub_v4sf_maskz, \"__builtin_ia32_vfmsubps128_maskz\", IX86_BUILTIN_VFMSUBPS128_MASKZ, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fnmadd_v4df_mask, \"__builtin_ia32_vfnmaddpd256_mask\", IX86_BUILTIN_VFNMADDPD256_MASK, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF_V4DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fnmadd_v2df_mask, \"__builtin_ia32_vfnmaddpd128_mask\", IX86_BUILTIN_VFNMADDPD128_MASK, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_fnmadd_v8sf_mask, \"__builtin_ia32_vfnmaddps256_mask\", IX86_BUILTIN_VFNMADDPS256_MASK, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF_V8SF_UQI)\n@@ -2768,8 +2776,12 @@ BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fmaddsub_v16sf_mask3_round, \"__\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fmaddsub_v16sf_maskz_round, \"__builtin_ia32_vfmaddsubps512_maskz\", IX86_BUILTIN_VFMADDSUBPS512_MASKZ, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fmsubadd_v8df_mask3_round, \"__builtin_ia32_vfmsubaddpd512_mask3\", IX86_BUILTIN_VFMSUBADDPD512_MASK3, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fmsubadd_v16sf_mask3_round, \"__builtin_ia32_vfmsubaddps512_mask3\", IX86_BUILTIN_VFMSUBADDPS512_MASK3, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fmsub_v8df_mask_round, \"__builtin_ia32_vfmsubpd512_mask\", IX86_BUILTIN_VFMSUBPD512_MASK, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fmsub_v8df_mask3_round, \"__builtin_ia32_vfmsubpd512_mask3\", IX86_BUILTIN_VFMSUBPD512_MASK3, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fmsub_v8df_maskz_round, \"__builtin_ia32_vfmsubpd512_maskz\", IX86_BUILTIN_VFMSUBPD512_MASKZ, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fmsub_v16sf_mask_round, \"__builtin_ia32_vfmsubps512_mask\", IX86_BUILTIN_VFMSUBPS512_MASK, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fmsub_v16sf_mask3_round, \"__builtin_ia32_vfmsubps512_mask3\", IX86_BUILTIN_VFMSUBPS512_MASK3, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fmsub_v16sf_maskz_round, \"__builtin_ia32_vfmsubps512_maskz\", IX86_BUILTIN_VFMSUBPS512_MASKZ, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fnmadd_v8df_mask_round, \"__builtin_ia32_vfnmaddpd512_mask\", IX86_BUILTIN_VFNMADDPD512_MASK, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fnmadd_v16sf_mask_round, \"__builtin_ia32_vfnmaddps512_mask\", IX86_BUILTIN_VFNMADDPS512_MASK, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fnmsub_v8df_mask_round, \"__builtin_ia32_vfnmsubpd512_mask\", IX86_BUILTIN_VFNMSUBPD512_MASK, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_UQI_INT)\n@@ -2855,11 +2867,17 @@ BDESC_FIRST (multi_arg, MULTI_ARG,\n BDESC (OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_vmfmadd_v2df, \"__builtin_ia32_vfmaddsd\", IX86_BUILTIN_VFMADDSD, UNKNOWN, (int)MULTI_ARG_3_DF)\n BDESC (OPTION_MASK_ISA_FMA, CODE_FOR_fmai_vmfmadd_v4sf, \"__builtin_ia32_vfmaddss3\", IX86_BUILTIN_VFMADDSS3, UNKNOWN, (int)MULTI_ARG_3_SF)\n BDESC (OPTION_MASK_ISA_FMA, CODE_FOR_fmai_vmfmadd_v2df, \"__builtin_ia32_vfmaddsd3\", IX86_BUILTIN_VFMADDSD3, UNKNOWN, (int)MULTI_ARG_3_DF)\n+BDESC (OPTION_MASK_ISA_FMA, CODE_FOR_fmai_vmfmsub_v4sf, \"__builtin_ia32_vfmsubss3\", IX86_BUILTIN_VFMSUBSS3, UNKNOWN, (int)MULTI_ARG_3_SF)\n+BDESC (OPTION_MASK_ISA_FMA, CODE_FOR_fmai_vmfmsub_v2df, \"__builtin_ia32_vfmsubsd3\", IX86_BUILTIN_VFMSUBSD3, UNKNOWN, (int)MULTI_ARG_3_DF)\n \n BDESC (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmadd_v4sf, \"__builtin_ia32_vfmaddps\", IX86_BUILTIN_VFMADDPS, UNKNOWN, (int)MULTI_ARG_3_SF)\n BDESC (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmadd_v2df, \"__builtin_ia32_vfmaddpd\", IX86_BUILTIN_VFMADDPD, UNKNOWN, (int)MULTI_ARG_3_DF)\n BDESC (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmadd_v8sf, \"__builtin_ia32_vfmaddps256\", IX86_BUILTIN_VFMADDPS256, UNKNOWN, (int)MULTI_ARG_3_SF2)\n BDESC (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmadd_v4df, \"__builtin_ia32_vfmaddpd256\", IX86_BUILTIN_VFMADDPD256, UNKNOWN, (int)MULTI_ARG_3_DF2)\n+BDESC (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmsub_v4sf, \"__builtin_ia32_vfmsubps\", IX86_BUILTIN_VFMSUBPS, UNKNOWN, (int)MULTI_ARG_3_SF)\n+BDESC (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmsub_v2df, \"__builtin_ia32_vfmsubpd\", IX86_BUILTIN_VFMSUBPD, UNKNOWN, (int)MULTI_ARG_3_DF)\n+BDESC (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmsub_v8sf, \"__builtin_ia32_vfmsubps256\", IX86_BUILTIN_VFMSUBPS256, UNKNOWN, (int)MULTI_ARG_3_SF2)\n+BDESC (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmsub_v4df, \"__builtin_ia32_vfmsubpd256\", IX86_BUILTIN_VFMSUBPD256, UNKNOWN, (int)MULTI_ARG_3_DF2)\n \n BDESC (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fmaddsub_v4sf, \"__builtin_ia32_vfmaddsubps\", IX86_BUILTIN_VFMADDSUBPS, UNKNOWN, (int)MULTI_ARG_3_SF)\n BDESC (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fmaddsub_v2df, \"__builtin_ia32_vfmaddsubpd\", IX86_BUILTIN_VFMADDSUBPD, UNKNOWN, (int)MULTI_ARG_3_DF)"}, {"sha": "0fdaaed04aa50d2bafcd98e73e6879d01811d816", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "patch": "@@ -3748,6 +3748,14 @@\n \t  (match_operand:FMAMODE_AVX512 2 \"nonimmediate_operand\")\n \t  (match_operand:FMAMODE_AVX512 3 \"nonimmediate_operand\")))])\n \n+(define_expand \"fma4i_fmsub_<mode>\"\n+  [(set (match_operand:FMAMODE_AVX512 0 \"register_operand\")\n+\t(fma:FMAMODE_AVX512\n+\t  (match_operand:FMAMODE_AVX512 1 \"nonimmediate_operand\")\n+\t  (match_operand:FMAMODE_AVX512 2 \"nonimmediate_operand\")\n+\t  (neg:FMAMODE_AVX512\n+\t    (match_operand:FMAMODE_AVX512 3 \"nonimmediate_operand\"))))])\n+\n (define_expand \"<avx512>_fmadd_<mode>_maskz<round_expand_name>\"\n   [(match_operand:VF_AVX512VL 0 \"register_operand\")\n    (match_operand:VF_AVX512VL 1 \"<round_expand_nimm_predicate>\")\n@@ -3886,6 +3894,20 @@\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_expand \"<avx512>_fmsub_<mode>_maskz<round_expand_name>\"\n+  [(match_operand:VF_AVX512VL 0 \"register_operand\")\n+   (match_operand:VF_AVX512VL 1 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VF_AVX512VL 2 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VF_AVX512VL 3 \"<round_expand_nimm_predicate>\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n+  \"TARGET_AVX512F && <round_mode512bit_condition>\"\n+{\n+  emit_insn (gen_fma_fmsub_<mode>_maskz_1<round_expand_name> (\n+    operands[0], operands[1], operands[2], operands[3],\n+    CONST0_RTX (<MODE>mode), operands[4]<round_expand_operand>));\n+  DONE;\n+})\n+\n (define_insn \"<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name><round_name>\"\n   [(set (match_operand:VF_SF_AVX512VL 0 \"register_operand\" \"=v,v,v\")\n \t(fma:VF_SF_AVX512VL\n@@ -3901,6 +3923,49 @@\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_1\"\n+  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v,v\")\n+\t(fma:VF_AVX512\n+\t  (match_operand:VF_AVX512 1 \"register_operand\" \"0,v\")\n+\t  (match_operand:VF_AVX512 2 \"register_operand\" \"v,0\")\n+\t  (neg:VF_AVX512\n+\t    (vec_duplicate:VF_AVX512\n+\t      (match_operand:<ssescalarmode> 3 \"memory_operand\" \"m,m\")))))]\n+  \"TARGET_AVX512F && <sd_mask_mode512bit_condition>\"\n+  \"vfmsub213<ssemodesuffix>\\t{%3<avx512bcst>, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<avx512bcst>}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_2\"\n+  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v,v\")\n+\t(fma:VF_AVX512\n+\t  (vec_duplicate:VF_AVX512\n+\t    (match_operand:<ssescalarmode> 1 \"memory_operand\" \"m,m\"))\n+\t  (match_operand:VF_AVX512 2 \"register_operand\" \"0,v\")\n+\t  (neg:VF_AVX512\n+\t    (match_operand:VF_AVX512 3 \"register_operand\" \"v,0\"))))]\n+  \"TARGET_AVX512F && <sd_mask_mode512bit_condition>\"\n+  \"@\n+   vfmsub132<ssemodesuffix>\\t{%1<avx512bcst>, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %1<avx512bcst>}\n+   vfmsub231<ssemodesuffix>\\t{%1<avx512bcst>, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %1<avx512bcst>}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_3\"\n+  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v,v\")\n+\t(fma:VF_AVX512\n+\t  (match_operand:VF_AVX512 1 \"register_operand\" \"0,v\")\n+\t  (vec_duplicate:VF_AVX512\n+\t    (match_operand:<ssescalarmode> 2 \"memory_operand\" \"m,m\"))\n+\t  (neg:VF_AVX512\n+\t    (match_operand:VF_AVX512 3 \"nonimmediate_operand\" \"v,0\"))))]\n+  \"TARGET_AVX512F && <sd_mask_mode512bit_condition>\"\n+  \"@\n+   vfmsub132<ssemodesuffix>\\t{%2<avx512bcst>, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<avx512bcst>}\n+   vfmsub231<ssemodesuffix>\\t{%2<avx512bcst>, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<avx512bcst>}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"<avx512>_fmsub_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VF_AVX512VL\n@@ -4249,6 +4314,18 @@\n \t  (const_int 1)))]\n   \"TARGET_FMA\")\n \n+(define_expand \"fmai_vmfmsub_<mode><round_name>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\")\n+\t(vec_merge:VF_128\n+\t  (fma:VF_128\n+\t    (match_operand:VF_128 1 \"<round_nimm_predicate>\")\n+\t    (match_operand:VF_128 2 \"<round_nimm_predicate>\")\n+\t    (neg:VF_128\n+\t      (match_operand:VF_128 3 \"<round_nimm_predicate>\")))\n+\t  (match_dup 1)\n+\t  (const_int 1)))]\n+  \"TARGET_FMA\")\n+\n (define_insn \"*fmai_fmadd_<mode>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n         (vec_merge:VF_128"}, {"sha": "a1d22409d1b55a23c68422418ca540fee4724ba6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "patch": "@@ -1,3 +1,18 @@\n+2018-10-21  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/72782\n+\t* gcc.target/i386/avx512f-fmsub-df-zmm-1.c: New test.\n+\t* gcc.target/i386/avx512f-fmsub-sf-zmm-1.c: Likewise.\n+\t* gcc.target/i386/avx512f-fmsub-sf-zmm-2.c: Likewise.\n+\t* gcc.target/i386/avx512f-fmsub-sf-zmm-3.c: Likewise.\n+\t* gcc.target/i386/avx512f-fmsub-sf-zmm-4.c: Likewise.\n+\t* gcc.target/i386/avx512f-fmsub-sf-zmm-5.c: Likewise.\n+\t* gcc.target/i386/avx512f-fmsub-sf-zmm-6.c: Likewise.\n+\t* gcc.target/i386/avx512f-fmsub-sf-zmm-7.c: Likewise.\n+\t* gcc.target/i386/avx512f-fmsub-sf-zmm-8.c: Likewise.\n+\t* gcc.target/i386/avx512vl-fmsub-sf-xmm-1.c: Likewise.\n+\t* gcc.target/i386/avx512vl-fmsub-sf-ymm-1.c: Likewise.\n+\n 2018-10-21  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/71880"}, {"sha": "840888a2d8100610b34481a8f20b6ed90a7255b9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-fmsub-df-zmm-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-df-zmm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-df-zmm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-df-zmm-1.c?ref=fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmsub...pd\\[ \\\\t\\]+\\\\(%(?:eax|rdi|edi)\\\\)\\\\\\{1to\\[1-8\\]+\\\\\\}, %zmm\\[0-9\\]+, %zmm0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vbroadcastsd\\[^\\n\\]*%zmm\\[0-9\\]+\" } } */\n+\n+#define type __m512d\n+#define vec 512\n+#define op fmsub\n+#define suffix pd\n+#define SCALAR double\n+\n+#include \"avx512-fma-1.h\""}, {"sha": "0cb675b7628d7e69cff7d456d26d72dad43041a4", "filename": "gcc/testsuite/gcc.target/i386/avx512f-fmsub-sf-zmm-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-1.c?ref=fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ps\\[ \\\\t\\]+\\\\(%(?:eax|rdi|edi)\\\\)\\\\\\{1to\\[1-8\\]+\\\\\\}, %zmm\\[0-9\\]+, %zmm0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vbroadcastss\\[^\\n\\]*%zmm\\[0-9\\]+\" } } */\n+\n+#define type __m512\n+#define vec 512\n+#define op fmsub\n+#define suffix ps\n+#define SCALAR float\n+\n+#include \"avx512-fma-1.h\""}, {"sha": "10212d471b104cf9ce797dc429c1c38c13a45164", "filename": "gcc/testsuite/gcc.target/i386/avx512f-fmsub-sf-zmm-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-2.c?ref=fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ps\\[ \\\\t\\]+\\\\(%(?:eax|rdi|edi)\\\\)\\\\\\{1to\\[1-8\\]+\\\\\\}, %zmm\\[0-9\\]+, %zmm0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vbroadcastss\\[^\\n\\]*%zmm\\[0-9\\]+\" } } */\n+\n+#define type __m512\n+#define vec 512\n+#define op fmsub\n+#define suffix ps\n+#define SCALAR float\n+\n+#include \"avx512-fma-2.h\""}, {"sha": "feb34077085dba2401297f4ce4e8cc802e32f0b9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-fmsub-sf-zmm-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-3.c?ref=fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ps\\[ \\\\t\\]+\\\\(%(?:eax|rdi|edi)\\\\)\\\\\\{1to\\[1-8\\]+\\\\\\}, %zmm\\[0-9\\]+, %zmm0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vbroadcastss\\[^\\n\\]*%zmm\\[0-9\\]+\" } } */\n+\n+#define type __m512\n+#define vec 512\n+#define op fmsub\n+#define suffix ps\n+#define SCALAR float\n+\n+#include \"avx512-fma-3.h\""}, {"sha": "4305fffe628144c342d06df31270187544610857", "filename": "gcc/testsuite/gcc.target/i386/avx512f-fmsub-sf-zmm-4.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-4.c?ref=fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ps\\[ \\\\t\\]+\\\\(%(?:eax|rdi|edi)\\\\)\\\\\\{1to\\[1-8\\]+\\\\\\}, %zmm\\[0-9\\]+, %zmm0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vbroadcastss\\[^\\n\\]*%zmm\\[0-9\\]+\" } } */\n+\n+#define type __m512\n+#define vec 512\n+#define op fmsub\n+#define suffix ps\n+#define SCALAR float\n+\n+#include \"avx512-fma-4.h\""}, {"sha": "d57251f83be30a6184fe6263a94191947efd1a3e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-fmsub-sf-zmm-5.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-5.c?ref=fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ps\\[ \\\\t\\]+\\\\(%(?:eax|rdi|edi)\\\\)\\\\\\{1to\\[1-8\\]+\\\\\\}, %zmm\\[0-9\\]+, %zmm0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vbroadcastss\\[^\\n\\]*%zmm\\[0-9\\]+\" } } */\n+\n+#define type __m512\n+#define vec 512\n+#define op fmsub\n+#define suffix ps\n+#define SCALAR float\n+\n+#include \"avx512-fma-5.h\""}, {"sha": "b26a9ee7eeb93cc9dac369d8236e6dea38532678", "filename": "gcc/testsuite/gcc.target/i386/avx512f-fmsub-sf-zmm-6.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-6.c?ref=fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ps\\[ \\\\t\\]+\\\\(%(?:eax|rdi|edi)\\\\)\\\\\\{1to\\[1-8\\]+\\\\\\}, %zmm\\[0-9\\]+, %zmm0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vbroadcastss\\[^\\n\\]*%zmm\\[0-9\\]+\" } } */\n+\n+#define type __m512\n+#define vec 512\n+#define op fmsub\n+#define suffix ps\n+#define SCALAR float\n+\n+#include \"avx512-fma-6.h\""}, {"sha": "cc705af8ea5290a01a1c88bf997eee8ff3617f56", "filename": "gcc/testsuite/gcc.target/i386/avx512f-fmsub-sf-zmm-7.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-7.c?ref=fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vbroadcastss\\[^\\n\\]*%zmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ps\\[^\\n\\]*%zmm\\[0-9\\]+\" 1 } } */\n+\n+#define type __m512\n+#define vec 512\n+#define op fmsub\n+#define suffix ps\n+#define SCALAR float\n+\n+#include \"avx512-fma-7.h\""}, {"sha": "2b929fa11e8e6e81fdef5c9d0c6acfa220799269", "filename": "gcc/testsuite/gcc.target/i386/avx512f-fmsub-sf-zmm-8.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-fmsub-sf-zmm-8.c?ref=fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vbroadcastss\\[^\\n\\]*%zmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ps\\[ \\\\t\\]+%zmm\\[0-9\\]+, %zmm\\[0-9\\]+, %zmm0\" 1 } } */\n+\n+#define type __m512\n+#define vec 512\n+#define op fmsub\n+#define suffix ps\n+#define SCALAR float\n+\n+#include \"avx512-fma-8.h\""}, {"sha": "70efbcc98f92002444562ccd2d8f524eec7ed60b", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-fmsub-sf-xmm-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-fmsub-sf-xmm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-fmsub-sf-xmm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-fmsub-sf-xmm-1.c?ref=fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfma -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ps\\[ \\\\t\\]+\\\\(%(?:eax|rdi|edi)\\\\)\\\\\\{1to\\[1-8\\]+\\\\\\}, %xmm\\[0-9\\]+, %xmm0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vbroadcastss\\[^\\n\\]*%xmm\\[0-9\\]+\" } } */\n+\n+#define type __m128\n+#define vec\n+#define op fmsub\n+#define suffix ps\n+#define SCALAR float\n+\n+#include \"avx512-fma-1.h\""}, {"sha": "a7c1b370b74085d92efd42b2774c4e2f517680e6", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-fmsub-sf-ymm-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-fmsub-sf-ymm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7f972d6ecc1f1df34f15615b7e3dea6f39e564/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-fmsub-sf-ymm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-fmsub-sf-ymm-1.c?ref=fe7f972d6ecc1f1df34f15615b7e3dea6f39e564", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfma -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ps\\[ \\\\t\\]+\\\\(%(?:eax|rdi|edi)\\\\)\\\\\\{1to\\[1-8\\]+\\\\\\}, %ymm\\[0-9\\]+, %ymm0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vbroadcastss\\[^\\n\\]*%ymm\\[0-9\\]+\" } } */\n+\n+#define type __m256\n+#define vec 256\n+#define op fmsub\n+#define suffix ps\n+#define SCALAR float\n+\n+#include \"avx512-fma-1.h\""}]}