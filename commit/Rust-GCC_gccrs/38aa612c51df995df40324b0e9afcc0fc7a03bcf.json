{"sha": "38aa612c51df995df40324b0e9afcc0fc7a03bcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhhYTYxMmM1MWRmOTk1ZGY0MDMyNGIwZTlhZmNjMGZjN2EwM2JjZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T09:05:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T09:05:23Z"}, "message": "Minor reformatting.\n\nUpdate comments.\n\nFrom-SVN: r127475", "tree": {"sha": "bb35111f12e456c355aa3af1ccaeea7734adc296", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb35111f12e456c355aa3af1ccaeea7734adc296"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38aa612c51df995df40324b0e9afcc0fc7a03bcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38aa612c51df995df40324b0e9afcc0fc7a03bcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38aa612c51df995df40324b0e9afcc0fc7a03bcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38aa612c51df995df40324b0e9afcc0fc7a03bcf/comments", "author": null, "committer": null, "parents": [{"sha": "762031177e3e03ef37f8c1fb6c928bed3538bf7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/762031177e3e03ef37f8c1fb6c928bed3538bf7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/762031177e3e03ef37f8c1fb6c928bed3538bf7e"}], "stats": {"total": 40, "additions": 17, "deletions": 23}, "files": [{"sha": "d4b8cff88f32f4426bc01fedd4e90324c76d53c2", "filename": "gcc/ada/a-cohama.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38aa612c51df995df40324b0e9afcc0fc7a03bcf/gcc%2Fada%2Fa-cohama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38aa612c51df995df40324b0e9afcc0fc7a03bcf/gcc%2Fada%2Fa-cohama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.adb?ref=38aa612c51df995df40324b0e9afcc0fc7a03bcf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "ae64b8589c187a33848c26c74db8fa4cfe0bf7e5", "filename": "gcc/ada/g-table.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38aa612c51df995df40324b0e9afcc0fc7a03bcf/gcc%2Fada%2Fg-table.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38aa612c51df995df40324b0e9afcc0fc7a03bcf/gcc%2Fada%2Fg-table.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-table.ads?ref=38aa612c51df995df40324b0e9afcc0fc7a03bcf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 1998-2005, AdaCore                     --\n+--                     Copyright (C) 1998-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -151,7 +151,7 @@ package GNAT.Table is\n    --  array value. Current array values are not affected by this call.\n \n    procedure Free;\n-   --  Free all allocated memory for the table. A call to init is required\n+   --  Free all allocated memory for the table. A call to Init is required\n    --  before any use of this table after calling Free.\n \n    First : constant Table_Index_Type := Table_Low_Bound;"}, {"sha": "c1f3732c2ba0133c0a1fde94c80e0f8ebed53cbe", "filename": "gcc/ada/gnatls.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38aa612c51df995df40324b0e9afcc0fc7a03bcf/gcc%2Fada%2Fgnatls.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38aa612c51df995df40324b0e9afcc0fc7a03bcf/gcc%2Fada%2Fgnatls.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatls.ads?ref=38aa612c51df995df40324b0e9afcc0fc7a03bcf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                S p e c                                   --\n --                                                                          --\n---           Copyright (C) 1992-1997 Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -24,6 +24,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  GNAT Library browser.\n+--  GNAT Library browser\n \n procedure Gnatls;"}, {"sha": "5cee6255e40c9d8b8b6aeeaf8d48a27fcef689f9", "filename": "gcc/ada/s-inmaop-posix.adb", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38aa612c51df995df40324b0e9afcc0fc7a03bcf/gcc%2Fada%2Fs-inmaop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38aa612c51df995df40324b0e9afcc0fc7a03bcf/gcc%2Fada%2Fs-inmaop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-inmaop-posix.adb?ref=38aa612c51df995df40324b0e9afcc0fc7a03bcf", "patch": "@@ -8,7 +8,7 @@\n --                                  B o d y                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2006, AdaCore                     --\n+--                     Copyright (C) 1995-2007, AdaCore                     --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -316,12 +316,7 @@ begin\n           (Storage_Elements.Integer_Address (SIG_IGN));\n \n       for J in Interrupt_ID loop\n-\n-         --  We need to check whether J is in Keep_Unmasked because\n-         --  the index type of the Keep_Unmasked array is not always\n-         --  Interrupt_ID; it may be a subtype of Interrupt_ID.\n-\n-         if J in Keep_Unmasked'Range and then Keep_Unmasked (J) then\n+         if Keep_Unmasked (J) then\n             Result := sigaddset (mask'Access, Signal (J));\n             pragma Assert (Result = 0);\n             Result := sigdelset (allmask'Access, Signal (J));"}, {"sha": "29c0e7f9b653aa3c8cb5c4887cf3e9006278c04c", "filename": "gcc/ada/s-interr-vms.adb", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38aa612c51df995df40324b0e9afcc0fc7a03bcf/gcc%2Fada%2Fs-interr-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38aa612c51df995df40324b0e9afcc0fc7a03bcf/gcc%2Fada%2Fs-interr-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr-vms.adb?ref=38aa612c51df995df40324b0e9afcc0fc7a03bcf", "patch": "@@ -250,7 +250,7 @@ package body System.Interrupts is\n    Registered_Handler_Tail : R_Link := null;\n \n    Access_Hold : Server_Task_Access;\n-   --  variable used to allocate Server_Task using \"new\".\n+   --  variable used to allocate Server_Task using \"new\"\n \n    -----------------------\n    -- Local Subprograms --\n@@ -266,6 +266,7 @@ package body System.Interrupts is\n \n    procedure Register_Interrupt_Handler (Handler_Addr : System.Address) is\n       New_Node_Ptr : R_Link;\n+\n    begin\n       --  This routine registers the Handler as usable for Dynamic\n       --  Interrupt Handler. Routines attaching and detaching Handler\n@@ -677,8 +678,7 @@ package body System.Interrupts is\n               \"dynamic Handler\");\n          end if;\n \n-         --  The interrupt should no longer be ingnored if\n-         --  it was ever ignored.\n+         --  The interrupt should no longer be ingnored if it was ever ignored\n \n          Ignored (Interrupt) := False;\n \n@@ -692,7 +692,7 @@ package body System.Interrupts is\n \n          if New_Handler = null then\n \n-            --  The null handler means we are detaching the handler.\n+            --  The null handler means we are detaching the handler\n \n             User_Handler (Interrupt).Static := False;\n \n@@ -898,7 +898,7 @@ package body System.Interrupts is\n                   end if;\n                end loop;\n \n-               --  Indicate in ATCB that no Interrupt Entries are attached.\n+               --  Indicate in ATCB that no Interrupt Entries are attached\n \n                T.Interrupt_Entry := False;\n             end Detach_Interrupt_Entries;\n@@ -956,7 +956,7 @@ package body System.Interrupts is\n \n       System.Tasking.Utilities.Make_Independent;\n \n-      --  Install default action in system level.\n+      --  Install default action in system level\n \n       IMOP.Install_Default_Action (IMNG.Interrupt_ID (Interrupt));\n \n@@ -966,7 +966,7 @@ package body System.Interrupts is\n       IMOP.Add_To_Interrupt_Mask\n         (Intwait_Mask'Access, IMNG.Interrupt_ID (Interrupt));\n \n-      --  Remember the Interrupt_ID for Abort_Task.\n+      --  Remember the Interrupt_ID for Abort_Task\n \n       PIO.Set_Interrupt_ID (IMNG.Interrupt_ID (Interrupt), Self_ID);\n \n@@ -1014,7 +1014,7 @@ package body System.Interrupts is\n                if User_Handler (Interrupt).H /= null then\n                   Tmp_Handler := User_Handler (Interrupt).H;\n \n-                  --  RTS calls should not be made with self being locked.\n+                  --  RTS calls should not be made with self being locked\n \n                   POP.Unlock (Self_ID);\n \n@@ -1034,7 +1034,7 @@ package body System.Interrupts is\n                   Tmp_ID := User_Entry (Interrupt).T;\n                   Tmp_Entry_Index := User_Entry (Interrupt).E;\n \n-                  --  RTS calls should not be made with self being locked.\n+                  --  RTS calls should not be made with self being locked\n \n                   POP.Unlock (Self_ID);\n \n@@ -1146,8 +1146,7 @@ package body System.Interrupts is\n --  Elaboration code for package System.Interrupts\n \n begin\n-\n-   --  Get Interrupt_Manager's ID so that Abort_Interrupt can be sent.\n+   --  Get Interrupt_Manager's ID so that Abort_Interrupt can be sent\n \n    Interrupt_Manager_ID := To_System (Interrupt_Manager'Identity);\n "}]}