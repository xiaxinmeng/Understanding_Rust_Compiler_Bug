{"sha": "e49efc14a17f32b2801dfa481081a0cabc083fe7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ5ZWZjMTRhMTdmMzJiMjgwMWRmYTQ4MTA4MWEwY2FiYzA4M2ZlNw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-06-09T11:37:41Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-06-09T11:37:41Z"}, "message": "Add edge predictions pruning\n\n\t* analyze_brprob.py: Cover new dump output format.\n\t* predict.c (dump_prediction): Add new argument.\n\t(enum predictor_reason): New enum.\n\t(struct predictor_hash): New struct.\n\t(predictor_hash::hash): New function.\n\t(predictor_hash::equal): Likewise.\n\t(not_removed_prediction_p): New function.\n\t(prune_predictions_for_bb): Likewise.\n\t(combine_predictions_for_bb): Prune predictions.\n\t* g++.dg/predict-loop-exit-1.C: Scan for a new dump format.\n\t* g++.dg/predict-loop-exit-2.C: Likewise.\n\t* g++.dg/predict-loop-exit-3.C: Likewise.\n\t* gcc.dg/predict-1.c: Likewise.\n\t* gcc.dg/predict-2.c: Likewise.\n\t* gcc.dg/predict-3.c: Likewise.\n\t* gcc.dg/predict-4.c: Likewise.\n\t* gcc.dg/predict-5.c: Likewise.\n\t* gcc.dg/predict-6.c: Likewise.\n\t* gcc.dg/predict-7.c: Likewise.\n\nFrom-SVN: r237255", "tree": {"sha": "e3753f419888a5394694e152cd1c15fd95083483", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3753f419888a5394694e152cd1c15fd95083483"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e49efc14a17f32b2801dfa481081a0cabc083fe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49efc14a17f32b2801dfa481081a0cabc083fe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e49efc14a17f32b2801dfa481081a0cabc083fe7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49efc14a17f32b2801dfa481081a0cabc083fe7/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36d579866680fd2b45800b072527a9cce93235d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d579866680fd2b45800b072527a9cce93235d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36d579866680fd2b45800b072527a9cce93235d0"}], "stats": {"total": 248, "additions": 210, "deletions": 38}, "files": [{"sha": "6c80c1edbe3f8978324d642fa944c274ab9f24d3", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49efc14a17f32b2801dfa481081a0cabc083fe7/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49efc14a17f32b2801dfa481081a0cabc083fe7/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=e49efc14a17f32b2801dfa481081a0cabc083fe7", "patch": "@@ -1,3 +1,7 @@\n+2016-06-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* analyze_brprob.py: Cover new dump output format.\n+\n 2016-06-07  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* update-copyright.py (LibMudflapFilter): Remove."}, {"sha": "9416eed3b44bfa7f5bb38fecd88c7e3c004dcecc", "filename": "contrib/analyze_brprob.py", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49efc14a17f32b2801dfa481081a0cabc083fe7/contrib%2Fanalyze_brprob.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49efc14a17f32b2801dfa481081a0cabc083fe7/contrib%2Fanalyze_brprob.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fanalyze_brprob.py?ref=e49efc14a17f32b2801dfa481081a0cabc083fe7", "patch": "@@ -122,14 +122,14 @@ def dump(self):\n     exit(1)\n \n profile = Profile(sys.argv[1])\n-r = re.compile('  (.*) heuristics: (.*)%.*exec ([0-9]*) hit ([0-9]*)')\n+r = re.compile('  (.*) heuristics( of edge [0-9]*->[0-9]*)?( \\\\(.*\\\\))?: (.*)%.*exec ([0-9]*) hit ([0-9]*)')\n for l in open(profile.filename).readlines():\n     m = r.match(l)\n-    if m != None:\n+    if m != None and m.group(3) == None:\n         name = m.group(1)\n-        prediction = float(m.group(2))\n-        count = int(m.group(3))\n-        hits = int(m.group(4))\n+        prediction = float(m.group(4))\n+        count = int(m.group(5))\n+        hits = int(m.group(6))\n \n         profile.add(name, prediction, count, hits)\n "}, {"sha": "9c7a0b42c7d52b53f55ef1ce67a3e1702b094613", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e49efc14a17f32b2801dfa481081a0cabc083fe7", "patch": "@@ -4,6 +4,17 @@\n \t* tree-ssa-loop-manip.c (find_uses_to_rename): Guard against\n \tremoved blocks.\n \n+2016-06-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* predict.c (dump_prediction): Add new argument.\n+\t(enum predictor_reason): New enum.\n+\t(struct predictor_hash): New struct.\n+\t(predictor_hash::hash): New function.\n+\t(predictor_hash::equal): Likewise.\n+\t(not_removed_prediction_p): New function.\n+\t(prune_predictions_for_bb): Likewise.\n+\t(combine_predictions_for_bb): Prune predictions.\n+\n 2016-06-09  Martin Liska  <mliska@suse.cz>\n \n \t* predict.c (filter_predictions): New function."}, {"sha": "0fa8c5b09e36422a13fba4dd983b71ba9536cc49", "filename": "gcc/predict.c", "status": "modified", "additions": 164, "deletions": 20, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=e49efc14a17f32b2801dfa481081a0cabc083fe7", "patch": "@@ -55,13 +55,29 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-loop.h\"\n #include \"tree-scalar-evolution.h\"\n \n+/* Enum with reasons why a predictor is ignored.  */\n+\n+enum predictor_reason\n+{\n+  NONE,\n+  IGNORED,\n+  SINGLE_EDGE_DUPLICATE,\n+  EDGE_PAIR_DUPLICATE\n+};\n+\n+/* String messages for the aforementioned enum.  */\n+\n+static const char *reason_messages[] = {\"\", \" (ignored)\",\n+    \" (single edge duplicate)\", \" (edge pair duplicate)\"};\n+\n /* real constants: 0, 1, 1-1/REG_BR_PROB_BASE, REG_BR_PROB_BASE,\n \t\t   1/REG_BR_PROB_BASE, 0.5, BB_FREQ_MAX.  */\n static sreal real_almost_one, real_br_prob_base,\n \t     real_inv_br_prob_base, real_one_half, real_bb_freq_max;\n \n static void combine_predictions_for_insn (rtx_insn *, basic_block);\n-static void dump_prediction (FILE *, enum br_predictor, int, basic_block, int);\n+static void dump_prediction (FILE *, enum br_predictor, int, basic_block,\n+\t\t\t     enum predictor_reason, edge);\n static void predict_paths_leading_to (basic_block, enum br_predictor, enum prediction);\n static void predict_paths_leading_to_edge (edge, enum br_predictor, enum prediction);\n static bool can_predict_insn_p (const rtx_insn *);\n@@ -723,21 +739,31 @@ invert_br_probabilities (rtx insn)\n \n static void\n dump_prediction (FILE *file, enum br_predictor predictor, int probability,\n-\t\t basic_block bb, int used)\n+\t\t basic_block bb, enum predictor_reason reason = NONE,\n+\t\t edge ep_edge = NULL)\n {\n-  edge e;\n+  edge e = ep_edge;\n   edge_iterator ei;\n \n   if (!file)\n     return;\n \n-  FOR_EACH_EDGE (e, ei, bb->succs)\n-    if (! (e->flags & EDGE_FALLTHRU))\n-      break;\n+  if (e == NULL)\n+    FOR_EACH_EDGE (e, ei, bb->succs)\n+      if (! (e->flags & EDGE_FALLTHRU))\n+\tbreak;\n+\n+  char edge_info_str[128];\n+  if (ep_edge)\n+    sprintf (edge_info_str, \" of edge %d->%d\", ep_edge->src->index,\n+\t     ep_edge->dest->index);\n+  else\n+    edge_info_str[0] = '\\0';\n \n-  fprintf (file, \"  %s heuristics%s: %.1f%%\",\n+  fprintf (file, \"  %s heuristics%s%s: %.1f%%\",\n \t   predictor_info[predictor].name,\n-\t   used ? \"\" : \" (ignored)\", probability * 100.0 / REG_BR_PROB_BASE);\n+\t   edge_info_str, reason_messages[reason],\n+\t   probability * 100.0 / REG_BR_PROB_BASE);\n \n   if (bb->count)\n     {\n@@ -834,18 +860,18 @@ combine_predictions_for_insn (rtx_insn *insn, basic_block bb)\n \n   if (!found)\n     dump_prediction (dump_file, PRED_NO_PREDICTION,\n-\t\t     combined_probability, bb, true);\n+\t\t     combined_probability, bb);\n   else\n     {\n       dump_prediction (dump_file, PRED_DS_THEORY, combined_probability,\n-\t\t       bb, !first_match);\n+\t\t       bb, !first_match ? NONE : IGNORED);\n       dump_prediction (dump_file, PRED_FIRST_MATCH, best_probability,\n-\t\t       bb, first_match);\n+\t\t       bb, first_match ? NONE: IGNORED);\n     }\n \n   if (first_match)\n     combined_probability = best_probability;\n-  dump_prediction (dump_file, PRED_COMBINED, combined_probability, bb, true);\n+  dump_prediction (dump_file, PRED_COMBINED, combined_probability, bb);\n \n   while (*pnote)\n     {\n@@ -856,7 +882,8 @@ combine_predictions_for_insn (rtx_insn *insn, basic_block bb)\n \t  int probability = INTVAL (XEXP (XEXP (*pnote, 0), 1));\n \n \t  dump_prediction (dump_file, predictor, probability, bb,\n-\t\t\t   !first_match || best_predictor == predictor);\n+\t\t\t   (!first_match || best_predictor == predictor)\n+\t\t\t   ? NONE : IGNORED);\n \t  *pnote = XEXP (*pnote, 1);\n \t}\n       else\n@@ -887,6 +914,121 @@ combine_predictions_for_insn (rtx_insn *insn, basic_block bb)\n     single_succ_edge (bb)->probability = REG_BR_PROB_BASE;\n }\n \n+/* Edge prediction hash traits.  */\n+\n+struct predictor_hash: pointer_hash <edge_prediction>\n+{\n+\n+  static inline hashval_t hash (const edge_prediction *);\n+  static inline bool equal (const edge_prediction *, const edge_prediction *);\n+};\n+\n+/* Calculate hash value of an edge prediction P based on predictor and\n+   normalized probability.  */\n+\n+inline hashval_t\n+predictor_hash::hash (const edge_prediction *p)\n+{\n+  inchash::hash hstate;\n+  hstate.add_int (p->ep_predictor);\n+\n+  int prob = p->ep_probability;\n+  if (prob > REG_BR_PROB_BASE / 2)\n+    prob = REG_BR_PROB_BASE - prob;\n+\n+  hstate.add_int (prob);\n+\n+  return hstate.end ();\n+}\n+\n+/* Return true whether edge predictions P1 and P2 use the same predictor and\n+   have equal (or opposed probability).  */\n+\n+inline bool\n+predictor_hash::equal (const edge_prediction *p1, const edge_prediction *p2)\n+{\n+  return (p1->ep_predictor == p2->ep_predictor\n+\t  && (p1->ep_probability == p2->ep_probability\n+\t      || p1->ep_probability == REG_BR_PROB_BASE - p2->ep_probability));\n+}\n+\n+struct predictor_hash_traits: predictor_hash,\n+  typed_noop_remove <edge_prediction *> {};\n+\n+/* Return true if edge prediction P is not in DATA hash set.  */\n+\n+static bool\n+not_removed_prediction_p (edge_prediction *p, void *data)\n+{\n+  hash_set<edge_prediction *> *remove = (hash_set<edge_prediction *> *) data;\n+  return !remove->contains (p);\n+}\n+\n+/* Prune predictions for a basic block BB.  Currently we do following\n+   clean-up steps:\n+\n+   1) remove duplicate prediction that is guessed with the same probability\n+      (different than 1/2) to both edge\n+   2) remove duplicates for a prediction that belongs with the same probability\n+      to a single edge\n+\n+  */\n+\n+static void\n+prune_predictions_for_bb (basic_block bb)\n+{\n+  edge_prediction **preds = bb_predictions->get (bb);\n+\n+  if (preds)\n+    {\n+      hash_table <predictor_hash_traits> s (13);\n+      hash_set <edge_prediction *> remove;\n+\n+      /* Step 1: identify predictors that should be removed.  */\n+      for (edge_prediction *pred = *preds; pred; pred = pred->ep_next)\n+\t{\n+\t  edge_prediction *existing = s.find (pred);\n+\t  if (existing)\n+\t    {\n+\t      if (pred->ep_edge == existing->ep_edge\n+\t\t  && pred->ep_probability == existing->ep_probability)\n+\t\t{\n+\t\t  /* Remove a duplicate predictor.  */\n+\t\t  dump_prediction (dump_file, pred->ep_predictor,\n+\t\t\t\t   pred->ep_probability, bb,\n+\t\t\t\t   SINGLE_EDGE_DUPLICATE, pred->ep_edge);\n+\n+\t\t  remove.add (pred);\n+\t\t}\n+\t      else if (pred->ep_edge != existing->ep_edge\n+\t\t       && pred->ep_probability == existing->ep_probability\n+\t\t       && pred->ep_probability != REG_BR_PROB_BASE / 2)\n+\t\t{\n+\t\t  /* Remove both predictors as they predict the same\n+\t\t     for both edges.  */\n+\t\t  dump_prediction (dump_file, existing->ep_predictor,\n+\t\t\t\t   pred->ep_probability, bb,\n+\t\t\t\t   EDGE_PAIR_DUPLICATE,\n+\t\t\t\t   existing->ep_edge);\n+\t\t  dump_prediction (dump_file, pred->ep_predictor,\n+\t\t\t\t   pred->ep_probability, bb,\n+\t\t\t\t   EDGE_PAIR_DUPLICATE,\n+\t\t\t\t   pred->ep_edge);\n+\n+\t\t  remove.add (existing);\n+\t\t  remove.add (pred);\n+\t\t}\n+\t    }\n+\n+\t  edge_prediction **slot2 = s.find_slot (pred, INSERT);\n+\t  *slot2 = pred;\n+\t}\n+\n+      /* Step 2: Remove predictors.  */\n+      filter_predictions (preds, not_removed_prediction_p, &remove);\n+    }\n+}\n+\n /* Combine predictions into single probability and store them into CFG.\n    Remove now useless prediction entries.\n    If DRY_RUN is set, only produce dumps and do not modify profile.  */\n@@ -935,7 +1077,10 @@ combine_predictions_for_bb (basic_block bb, bool dry_run)\n   if (dump_file)\n     fprintf (dump_file, \"Predictions for bb %i\\n\", bb->index);\n \n+  prune_predictions_for_bb (bb);\n+\n   edge_prediction **preds = bb_predictions->get (bb);\n+\n   if (preds)\n     {\n       /* We implement \"first match\" heuristics and use probability guessed\n@@ -1001,18 +1146,18 @@ combine_predictions_for_bb (basic_block bb, bool dry_run)\n     first_match = true;\n \n   if (!found)\n-    dump_prediction (dump_file, PRED_NO_PREDICTION, combined_probability, bb, true);\n+    dump_prediction (dump_file, PRED_NO_PREDICTION, combined_probability, bb);\n   else\n     {\n       dump_prediction (dump_file, PRED_DS_THEORY, combined_probability, bb,\n-\t\t       !first_match);\n+\t\t       !first_match ? NONE : IGNORED);\n       dump_prediction (dump_file, PRED_FIRST_MATCH, best_probability, bb,\n-\t\t       first_match);\n+\t\t       first_match ? NONE : IGNORED);\n     }\n \n   if (first_match)\n     combined_probability = best_probability;\n-  dump_prediction (dump_file, PRED_COMBINED, combined_probability, bb, true);\n+  dump_prediction (dump_file, PRED_COMBINED, combined_probability, bb);\n \n   if (preds)\n     {\n@@ -1021,10 +1166,9 @@ combine_predictions_for_bb (basic_block bb, bool dry_run)\n \t  enum br_predictor predictor = pred->ep_predictor;\n \t  int probability = pred->ep_probability;\n \n-\t  if (pred->ep_edge != EDGE_SUCC (bb, 0))\n-\t    probability = REG_BR_PROB_BASE - probability;\n \t  dump_prediction (dump_file, predictor, probability, bb,\n-\t\t\t   !first_match || best_predictor == predictor);\n+\t\t\t   (!first_match || best_predictor == predictor)\n+\t\t\t   ? NONE : IGNORED, pred->ep_edge);\n \t}\n     }\n   clear_bb_predictions (bb);"}, {"sha": "155dc1144fece78c2259cc74b518d23384e4ec70", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e49efc14a17f32b2801dfa481081a0cabc083fe7", "patch": "@@ -1,3 +1,16 @@\n+2016-06-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* g++.dg/predict-loop-exit-1.C: Scan for a new dump format.\n+\t* g++.dg/predict-loop-exit-2.C: Likewise.\n+\t* g++.dg/predict-loop-exit-3.C: Likewise.\n+\t* gcc.dg/predict-1.c: Likewise.\n+\t* gcc.dg/predict-2.c: Likewise.\n+\t* gcc.dg/predict-3.c: Likewise.\n+\t* gcc.dg/predict-4.c: Likewise.\n+\t* gcc.dg/predict-5.c: Likewise.\n+\t* gcc.dg/predict-6.c: Likewise.\n+\t* gcc.dg/predict-7.c: Likewise.\n+\n 2016-06-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71462"}, {"sha": "88262eb9d00c10f1a812a34c866ce2042560bd28", "filename": "gcc/testsuite/g++.dg/predict-loop-exit-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-1.C?ref=e49efc14a17f32b2801dfa481081a0cabc083fe7", "patch": "@@ -9,5 +9,5 @@ void test() {\n   return;\n }\n \n-/* { dg-final { scan-tree-dump-times \"extra loop exit heuristics:\" 2 \"profile_estimate\"} } */\n-/* { dg-final { scan-tree-dump-times \"loop exit heuristics:\" 3 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"extra loop exit heuristics of edge\\[^:\\]*:\" 2 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"loop exit heuristics of edge\\[^:\\]*:\" 3 \"profile_estimate\"} } */"}, {"sha": "15e9866d897efa4fa7b39eb7118c94229b1822c0", "filename": "gcc/testsuite/g++.dg/predict-loop-exit-2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-2.C?ref=e49efc14a17f32b2801dfa481081a0cabc083fe7", "patch": "@@ -9,5 +9,5 @@ void test() {\n   return;\n }\n \n-/* { dg-final { scan-tree-dump-times \"extra loop exit heuristics:\" 1 \"profile_estimate\"} } */\n-/* { dg-final { scan-tree-dump-times \"loop exit heuristics:\" 2 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"extra loop exit heuristics of edge\\[^:\\]*:\" 1 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"loop exit heuristics of edge\\[^:\\]*:\" 2 \"profile_estimate\"} } */"}, {"sha": "61af84b6f56eb8fcd3db58e5c12aa378e7edfb66", "filename": "gcc/testsuite/g++.dg/predict-loop-exit-3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-3.C?ref=e49efc14a17f32b2801dfa481081a0cabc083fe7", "patch": "@@ -9,5 +9,5 @@ void test() {\n   return;\n }\n \n-/* { dg-final { scan-tree-dump-times \"extra loop exit heuristics:\" 2 \"profile_estimate\"} } */\n-/* { dg-final { scan-tree-dump-times \"loop exit heuristics:\" 3 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"extra loop exit heuristics of edge\\[^:\\]*:\" 2 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"loop exit heuristics of edge\\[^:\\]*:\" 3 \"profile_estimate\"} } */"}, {"sha": "d0924f27bdf8106bd3c26b0811cf96ca3f9a6dad", "filename": "gcc/testsuite/gcc.dg/predict-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-1.c?ref=e49efc14a17f32b2801dfa481081a0cabc083fe7", "patch": "@@ -23,4 +23,4 @@ void foo (int bound)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"loop iv compare heuristics: 2.0%\" 5 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"loop iv compare heuristics of edge\\[^:\\]*: 2.0%\" 5 \"profile_estimate\"} } */"}, {"sha": "30116864d5df3dcb6a21588f785833b3b24caf1c", "filename": "gcc/testsuite/gcc.dg/predict-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-2.c?ref=e49efc14a17f32b2801dfa481081a0cabc083fe7", "patch": "@@ -23,4 +23,4 @@ void foo (int base, int bound)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-not \"loop iv compare heuristics\" \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-not \"loop iv compare heuristics of edge\\[^:\\]*:\" \"profile_estimate\"} } */"}, {"sha": "663f1411025aaced05b9472ad9e90dd16f439250", "filename": "gcc/testsuite/gcc.dg/predict-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-3.c?ref=e49efc14a17f32b2801dfa481081a0cabc083fe7", "patch": "@@ -25,4 +25,4 @@ void foo (int bound)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"loop iv compare heuristics: 98.0%\" 3 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"loop iv compare heuristics of edge\\[^:\\]*: 98.0%\" 3 \"profile_estimate\"} } */"}, {"sha": "5779da36ee9810587de516579db9ecc0fdaf88d4", "filename": "gcc/testsuite/gcc.dg/predict-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-4.c?ref=e49efc14a17f32b2801dfa481081a0cabc083fe7", "patch": "@@ -15,4 +15,4 @@ void foo (int bound)\n     }\n }\n \n-/* { dg-final { scan-tree-dump \"loop iv compare heuristics: 50.0%\" \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump \"loop iv compare heuristics of edge\\[^:\\]*: 50.0%\" \"profile_estimate\"} } */"}, {"sha": "56ada306b9787988c6814e89eee44d1f86fac56a", "filename": "gcc/testsuite/gcc.dg/predict-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-5.c?ref=e49efc14a17f32b2801dfa481081a0cabc083fe7", "patch": "@@ -21,4 +21,4 @@ void foo (int base, int bound)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"loop iv compare heuristics: 98.0%\" 4 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"loop iv compare heuristics of edge\\[^:\\]*: 98.0%\" 4 \"profile_estimate\"} } */"}, {"sha": "9ed41ed0d92384865a4524f046db81814e8c14ae", "filename": "gcc/testsuite/gcc.dg/predict-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-6.c?ref=e49efc14a17f32b2801dfa481081a0cabc083fe7", "patch": "@@ -21,4 +21,4 @@ void foo (int base, int bound)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"loop iv compare heuristics: 2.0%\" 4 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"loop iv compare heuristics of edge\\[^:\\]*: 2.0%\" 4 \"profile_estimate\"} } */"}, {"sha": "fe34ca5f74426341196f277cb18f3e36c58aa713", "filename": "gcc/testsuite/gcc.dg/predict-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49efc14a17f32b2801dfa481081a0cabc083fe7/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-7.c?ref=e49efc14a17f32b2801dfa481081a0cabc083fe7", "patch": "@@ -13,4 +13,4 @@ void foo (int base)\n       bar (i);\n }\n \n-/* { dg-final { scan-tree-dump-times \"loop branch heuristics\" 0 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"loop branch heuristics of edge\\[^:\\]*\" 0 \"profile_estimate\"} } */"}]}