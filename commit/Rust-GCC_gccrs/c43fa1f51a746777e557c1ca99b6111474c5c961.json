{"sha": "c43fa1f51a746777e557c1ca99b6111474c5c961", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQzZmExZjUxYTc0Njc3N2U1NTdjMWNhOTliNjExMTQ3NGM1Yzk2MQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-10-11T21:11:29Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-10-11T21:11:29Z"}, "message": "builtins.c (expand_builtin_strcmp): Defend against the possibility that gen_cmpstrsi may fail...\n\n\n\t* builtins.c (expand_builtin_strcmp): Defend against the possibility\n\tthat gen_cmpstrsi may fail: Stabilize the argument list against\n\tre-evaluation and expand the library call directly using this saved\n\targument list if a cmpstrsi sequence can't be generated.\n\t(expand_builtin_strncmp): Likewise.\n\n\t* config/i386/i386.md (cmpstrsi, movstrsi): Disable with -Os.\n\n\t* gcc.c-torture/execute/string-opt-8.c: Don't test optimizations\n\tthat inline strncmp as cmpstrsi on i386 when compiled with -Os.\n\nFrom-SVN: r72380", "tree": {"sha": "3038c6d3362d74076b56b1b91ed777dad3dc5708", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3038c6d3362d74076b56b1b91ed777dad3dc5708"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c43fa1f51a746777e557c1ca99b6111474c5c961", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c43fa1f51a746777e557c1ca99b6111474c5c961", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c43fa1f51a746777e557c1ca99b6111474c5c961", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c43fa1f51a746777e557c1ca99b6111474c5c961/comments", "author": null, "committer": null, "parents": [{"sha": "c877353c907f31f7af74452d4eb2c44b6900493d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c877353c907f31f7af74452d4eb2c44b6900493d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c877353c907f31f7af74452d4eb2c44b6900493d"}], "stats": {"total": 97, "additions": 70, "deletions": 27}, "files": [{"sha": "a05b7260498b2780241297e2f4c9966ae781d3d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c43fa1f51a746777e557c1ca99b6111474c5c961/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c43fa1f51a746777e557c1ca99b6111474c5c961/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c43fa1f51a746777e557c1ca99b6111474c5c961", "patch": "@@ -1,3 +1,13 @@\n+2003-10-11  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.c (expand_builtin_strcmp): Defend against the possibility\n+\tthat gen_cmpstrsi may fail: Stabilize the argument list against\n+\tre-evaluation and expand the library call directly using this saved\n+\targument list if a cmpstrsi sequence can't be generated.\n+\t(expand_builtin_strncmp): Likewise.\n+\n+\t* config/i386/i386.md (cmpstrsi, movstrsi): Disable with -Os.\n+\n 2003-10-11  Roger Sayle  <roger@eyesopen.com>\n \n \tPR optimization/12260"}, {"sha": "0214edf41986219bc99be602c4c62f583336a921", "filename": "gcc/builtins.c", "status": "modified", "additions": 52, "deletions": 24, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c43fa1f51a746777e557c1ca99b6111474c5c961/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c43fa1f51a746777e557c1ca99b6111474c5c961/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c43fa1f51a746777e557c1ca99b6111474c5c961", "patch": "@@ -3281,6 +3281,7 @@ expand_builtin_strcmp (tree exp, rtx target, enum machine_mode mode)\n     tree len, len1, len2;\n     rtx arg1_rtx, arg2_rtx, arg3_rtx;\n     rtx result, insn;\n+    tree fndecl;\n \n     int arg1_align\n       = get_pointer_alignment (arg1, BIGGEST_ALIGNMENT) / BITS_PER_UNIT;\n@@ -3336,24 +3337,36 @@ expand_builtin_strcmp (tree exp, rtx target, enum machine_mode mode)\n \t   && REGNO (result) >= FIRST_PSEUDO_REGISTER))\n       result = gen_reg_rtx (insn_mode);\n \n+    /* Stabilize the arguments in case gen_cmpstrsi fails.  */\n+    arg1 = save_expr (arg1);\n+    arg2 = save_expr (arg2);\n+\n     arg1_rtx = get_memory_rtx (arg1);\n     arg2_rtx = get_memory_rtx (arg2);\n     arg3_rtx = expand_expr (len, NULL_RTX, VOIDmode, 0);\n     insn = gen_cmpstrsi (result, arg1_rtx, arg2_rtx, arg3_rtx,\n \t\t\t GEN_INT (MIN (arg1_align, arg2_align)));\n-    if (!insn)\n-      return 0;\n-\n-    emit_insn (insn);\n+    if (insn)\n+      {\n+\temit_insn (insn);\n+\n+\t/* Return the value in the proper mode for this function.  */\n+\tmode = TYPE_MODE (TREE_TYPE (exp));\n+\tif (GET_MODE (result) == mode)\n+\t  return result;\n+\tif (target == 0)\n+\t  return convert_to_mode (mode, result, 0);\n+\tconvert_move (target, result, 0);\n+\treturn target;\n+      }\n \n-    /* Return the value in the proper mode for this function.  */\n-    mode = TYPE_MODE (TREE_TYPE (exp));\n-    if (GET_MODE (result) == mode)\n-      return result;\n-    if (target == 0)\n-      return convert_to_mode (mode, result, 0);\n-    convert_move (target, result, 0);\n-    return target;\n+    /* Expand the library call ourselves using a stabilized argument\n+       list to avoid re-evaluating the function's arguments twice.  */\n+    arglist = build_tree_list (NULL_TREE, arg2);\n+    arglist = tree_cons (NULL_TREE, arg1, arglist);\n+    fndecl = get_callee_fndecl (exp);\n+    exp = build_function_call_expr (fndecl, arglist);\n+    return expand_call (exp, target, target == const0_rtx);\n   }\n #endif\n   return 0;\n@@ -3436,6 +3449,7 @@ expand_builtin_strncmp (tree exp, rtx target, enum machine_mode mode)\n     tree len, len1, len2;\n     rtx arg1_rtx, arg2_rtx, arg3_rtx;\n     rtx result, insn;\n+    tree fndecl;\n \n     int arg1_align\n       = get_pointer_alignment (arg1, BIGGEST_ALIGNMENT) / BITS_PER_UNIT;\n@@ -3494,24 +3508,38 @@ expand_builtin_strncmp (tree exp, rtx target, enum machine_mode mode)\n \t   && REGNO (result) >= FIRST_PSEUDO_REGISTER))\n       result = gen_reg_rtx (insn_mode);\n \n+    /* Stabilize the arguments in case gen_cmpstrsi fails.  */\n+    arg1 = save_expr (arg1);\n+    arg2 = save_expr (arg2);\n+    len = save_expr (len);\n+\n     arg1_rtx = get_memory_rtx (arg1);\n     arg2_rtx = get_memory_rtx (arg2);\n     arg3_rtx = expand_expr (len, NULL_RTX, VOIDmode, 0);\n     insn = gen_cmpstrsi (result, arg1_rtx, arg2_rtx, arg3_rtx,\n \t\t\t GEN_INT (MIN (arg1_align, arg2_align)));\n-    if (!insn)\n-      return 0;\n-\n-    emit_insn (insn);\n+    if (insn)\n+      {\n+\temit_insn (insn);\n+\n+\t/* Return the value in the proper mode for this function.  */\n+\tmode = TYPE_MODE (TREE_TYPE (exp));\n+\tif (GET_MODE (result) == mode)\n+\t  return result;\n+\tif (target == 0)\n+\t  return convert_to_mode (mode, result, 0);\n+\tconvert_move (target, result, 0);\n+\treturn target;\n+      }\n \n-    /* Return the value in the proper mode for this function.  */\n-    mode = TYPE_MODE (TREE_TYPE (exp));\n-    if (GET_MODE (result) == mode)\n-      return result;\n-    if (target == 0)\n-      return convert_to_mode (mode, result, 0);\n-    convert_move (target, result, 0);\n-    return target;\n+    /* Expand the library call ourselves using a stabilized argument\n+       list to avoid re-evaluating the function's arguments twice.  */\n+    arglist = build_tree_list (NULL_TREE, len);\n+    arglist = tree_cons (NULL_TREE, arg2, arglist);\n+    arglist = tree_cons (NULL_TREE, arg1, arglist);\n+    fndecl = get_callee_fndecl (exp);\n+    exp = build_function_call_expr (fndecl, arglist);\n+    return expand_call (exp, target, target == const0_rtx);\n   }\n #endif\n   return 0;"}, {"sha": "39a8a2cc8c70b93fea67f7fd1d12ddc3e48c0f8f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c43fa1f51a746777e557c1ca99b6111474c5c961/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c43fa1f51a746777e557c1ca99b6111474c5c961/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c43fa1f51a746777e557c1ca99b6111474c5c961", "patch": "@@ -16129,7 +16129,7 @@\n    (use (match_operand:BLK 1 \"memory_operand\" \"\"))\n    (use (match_operand:SI 2 \"nonmemory_operand\" \"\"))\n    (use (match_operand:SI 3 \"const_int_operand\" \"\"))]\n-  \"\"\n+  \"! optimize_size\"\n {\n  if (ix86_expand_movstr (operands[0], operands[1], operands[2], operands[3]))\n    DONE;\n@@ -16849,7 +16849,7 @@\n \t\t    (match_operand:BLK 2 \"general_operand\" \"\")))\n    (use (match_operand 3 \"general_operand\" \"\"))\n    (use (match_operand 4 \"immediate_operand\" \"\"))]\n-  \"\"\n+  \"! optimize_size\"\n {\n   rtx addr1, addr2, out, outlow, count, countreg, align;\n "}, {"sha": "92b96a26ddf7088b81b81d5cb480439568d6bbf2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c43fa1f51a746777e557c1ca99b6111474c5c961/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c43fa1f51a746777e557c1ca99b6111474c5c961/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c43fa1f51a746777e557c1ca99b6111474c5c961", "patch": "@@ -1,3 +1,8 @@\n+2003-10-11  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.c-torture/execute/string-opt-8.c: Don't test optimizations\n+\tthat inline strncmp as cmpstrsi on i386 when compiled with -Os.\n+\n 2003-10-11  Roger Sayle  <roger@eyesopen.com>\n \n \tPR optimization/12260"}, {"sha": "2316fce87cab3a0ec34efd8b6a42872dca4e04cf", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c43fa1f51a746777e557c1ca99b6111474c5c961/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c43fa1f51a746777e557c1ca99b6111474c5c961/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-8.c?ref=c43fa1f51a746777e557c1ca99b6111474c5c961", "patch": "@@ -65,7 +65,7 @@ int main ()\n   s2 = s1; s3 = s1+4;\n   if (strncmp (++s2, ++s3+2, 1) >= 0 || s2 != s1+1 || s3 != s1+5)\n     abort();\n-#if !defined(__OPTIMIZE__) || defined(__i386__)\n+#if !defined(__OPTIMIZE__) || (defined(__i386__) && !defined(__OPTIMIZE_SIZE__))\n   /* These tests work on platforms which support cmpstrsi.  We test it\n      at -O0 on all platforms to ensure the strncmp logic is correct.  */\n   s2 = s1;"}]}