{"sha": "32fdfa2dfadae6448ed8a7229952120aa3b005bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJmZGZhMmRmYWRhZTY0NDhlZDhhNzIyOTk1MjEyMGFhM2IwMDViYg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-06-24T13:04:37Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-06-24T13:04:37Z"}, "message": "re PR fortran/28118 (ICE calling subroutine defined via explicit interface)\n\n2006-06-24  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/28118\n\t* trans-array.c (gfc_conv_expr_descriptor): When building temp,\n\tuse the substring reference to calculate the length if the\n\texpression does not have a charlen.\n\n2006-06-24  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/28118\n\t* gfortran.dg/actual_array_substr_1.f90: New test.\n\nFrom-SVN: r114964", "tree": {"sha": "51380b5f1c5f43b3507b40c0d72285be2606774c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51380b5f1c5f43b3507b40c0d72285be2606774c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32fdfa2dfadae6448ed8a7229952120aa3b005bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32fdfa2dfadae6448ed8a7229952120aa3b005bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32fdfa2dfadae6448ed8a7229952120aa3b005bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32fdfa2dfadae6448ed8a7229952120aa3b005bb/comments", "author": null, "committer": null, "parents": [{"sha": "61c25908fdbf3b6c29334ff84b30fcfaa2e29880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c25908fdbf3b6c29334ff84b30fcfaa2e29880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61c25908fdbf3b6c29334ff84b30fcfaa2e29880"}], "stats": {"total": 68, "additions": 65, "deletions": 3}, "files": [{"sha": "39e02091b0231149e1b186c8ca62b270cfded9b7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fdfa2dfadae6448ed8a7229952120aa3b005bb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fdfa2dfadae6448ed8a7229952120aa3b005bb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=32fdfa2dfadae6448ed8a7229952120aa3b005bb", "patch": "@@ -1,3 +1,10 @@\n+2006-06-24  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/28118\n+\t* trans-array.c (gfc_conv_expr_descriptor): When building temp,\n+\tuse the substring reference to calculate the length if the\n+\texpression does not have a charlen.\n+\n 2006-06-24  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/28094"}, {"sha": "6a2c2de3275dd6ad912a2433860307e18d9c2221", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fdfa2dfadae6448ed8a7229952120aa3b005bb/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fdfa2dfadae6448ed8a7229952120aa3b005bb/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=32fdfa2dfadae6448ed8a7229952120aa3b005bb", "patch": "@@ -4184,9 +4184,37 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n       loop.temp_ss->next = gfc_ss_terminator;\n       if (expr->ts.type == BT_CHARACTER)\n \t{\n-\t  if (expr->ts.cl\n-\t      && expr->ts.cl->length\n-\t      && expr->ts.cl->length->expr_type == EXPR_CONSTANT)\n+\t  if (expr->ts.cl == NULL)\n+\t    {\n+\t      /* This had better be a substring reference!  */\n+\t      gfc_ref *char_ref = expr->ref;\n+\t      for (; char_ref; char_ref = char_ref->next)\n+\t\tif (char_ref->type == REF_SUBSTRING)\n+\t\t  {\n+\t\t    mpz_t char_len;\n+\t\t    expr->ts.cl = char_ref->u.ss.length;\n+\t\t    mpz_init_set_ui (char_len, 1);\n+\t\t    mpz_add (char_len, char_len,\n+\t\t\t     char_ref->u.ss.end->value.integer);\n+\t\t    mpz_sub (char_len, char_len,\n+\t\t\t     char_ref->u.ss.start->value.integer);\n+\t\t    expr->ts.cl->backend_decl\n+\t\t\t= gfc_conv_mpz_to_tree (char_len,\n+\t\t\t\t\tgfc_default_character_kind);\n+\t\t    /* Cast is necessary for *-charlen refs.  */\n+\t\t    expr->ts.cl->backend_decl\n+\t\t\t= convert (gfc_charlen_type_node,\n+\t\t\t\t   expr->ts.cl->backend_decl);\n+\t\t    mpz_clear (char_len);\n+\t\t      break;\n+\t\t  }\n+\t      gcc_assert (char_ref != NULL);\n+\t      loop.temp_ss->data.temp.type\n+\t\t= gfc_typenode_for_spec (&expr->ts);\n+\t      loop.temp_ss->string_length = expr->ts.cl->backend_decl;\n+\t    }\n+\t  else if (expr->ts.cl->length\n+\t\t     && expr->ts.cl->length->expr_type == EXPR_CONSTANT)\n \t    {\n \t      expr->ts.cl->backend_decl\n \t\t= gfc_conv_mpz_to_tree (expr->ts.cl->length->value.integer,"}, {"sha": "2db5a7c6c7860c6c88f75d2ff56caefd25c8ee5a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fdfa2dfadae6448ed8a7229952120aa3b005bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fdfa2dfadae6448ed8a7229952120aa3b005bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=32fdfa2dfadae6448ed8a7229952120aa3b005bb", "patch": "@@ -1,3 +1,8 @@\n+2006-06-24  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/28118\n+\t* gfortran.dg/actual_array_substr_1.f90: New test.\n+\n 2006-06-24  Olivier Hainque  <hainque@adacore.com>\n \n \t* gnat.dg/scalar_mode_agg_compare_loop.adb: New test."}, {"sha": "90108ec35cbbcfdcb21ceec5feed249a2a4d9462", "filename": "gcc/testsuite/gfortran.dg/actual_array_substr_1.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fdfa2dfadae6448ed8a7229952120aa3b005bb/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_substr_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fdfa2dfadae6448ed8a7229952120aa3b005bb/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_substr_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_substr_1.f90?ref=32fdfa2dfadae6448ed8a7229952120aa3b005bb", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do run }\n+! Test fix of PR28118, in which a substring reference to an\n+! actual argument with an array reference would cause a segfault.\n+!\n+! Contributed by Paul Thomas  <pault@gcc.gnu.org>\n+!\n+program gfcbug33\r\n+  character(12) :: a(2)\n+  a(1) = \"abcdefghijkl\"\n+  a(2) = \"mnopqrstuvwx\"\n+  call foo ((a(2:1:-1)(6:)))\n+  call bar ((a(:)(7:11)))\n+contains\n+  subroutine foo (chr)\n+    character(7) :: chr(:)\n+    if (chr(1)//chr(2) .ne. \"rstuvwxfghijkl\") call abort ()\n+  end subroutine foo\r\n+  subroutine bar (chr)\n+    character(*) :: chr(:)\n+    if (trim(chr(1))//trim(chr(2)) .ne. \"ghijkstuvw\") call abort ()\n+  end subroutine bar\r\n+end program gfcbug33\r"}]}