{"sha": "48ff383f0d9e917bcb7bcc091af413bcae07b440", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhmZjM4M2YwZDllOTE3YmNiN2JjYzA5MWFmNDEzYmNhZTA3YjQ0MA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-03-12T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-03-12T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "e07bcbf1da6f573aa16952e0c985b19e17ffaf1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e07bcbf1da6f573aa16952e0c985b19e17ffaf1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48ff383f0d9e917bcb7bcc091af413bcae07b440", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48ff383f0d9e917bcb7bcc091af413bcae07b440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48ff383f0d9e917bcb7bcc091af413bcae07b440", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48ff383f0d9e917bcb7bcc091af413bcae07b440/comments", "author": null, "committer": null, "parents": [{"sha": "7ad5a72c8bc6aa71a0d195ddfa207db01265fe0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ad5a72c8bc6aa71a0d195ddfa207db01265fe0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ad5a72c8bc6aa71a0d195ddfa207db01265fe0b"}], "stats": {"total": 285, "additions": 284, "deletions": 1}, "files": [{"sha": "d033682fc225ca53270f8038b42f502b19b53d43", "filename": "ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48ff383f0d9e917bcb7bcc091af413bcae07b440/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48ff383f0d9e917bcb7bcc091af413bcae07b440/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=48ff383f0d9e917bcb7bcc091af413bcae07b440", "patch": "@@ -1,3 +1,12 @@\n+2021-03-11  Jeff Law  <law@redhat.com>\n+\n+\t* MAINTAINERS: Update entries for a few ex-ImgTec employees\n+\n+2021-03-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* Makefile.tpl: The change was done Makefile.in which\n+\tis generated file.\n+\n 2021-03-08  Jeff Law  <law@redhat.com>\n \n \t* MAINTAINERS: Update my email address"}, {"sha": "5c7dd7ea7e526db4871714084e306881b1a45e59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48ff383f0d9e917bcb7bcc091af413bcae07b440/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48ff383f0d9e917bcb7bcc091af413bcae07b440/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48ff383f0d9e917bcb7bcc091af413bcae07b440", "patch": "@@ -1,3 +1,79 @@\n+2021-03-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96374\n+\t* Makefile.in (ANALYZER_OBJS): Add analyzer/feasible-graph.o and\n+\tanalyzer/trimmed-graph.o.\n+\t* doc/analyzer.texi (Analyzer Paths): Rewrite description of\n+\tfeasibility checking to reflect new implementation.\n+\t* doc/invoke.texi (-fdump-analyzer-feasibility): Document new\n+\toption.\n+\t* shortest-paths.h (shortest_paths::get_shortest_distance): New.\n+\n+2021-03-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* digraph.cc (selftest::test_shortest_paths): Update\n+\tshortest_paths init for new param.  Add test of\n+\tSPS_TO_GIVEN_TARGET.\n+\t* shortest-paths.h (enum shortest_path_sense): New.\n+\t(shortest_paths::shortest_paths): Add \"sense\" param.\n+\tUpdate for renamings.  Generalize to use \"sense\" param.\n+\t(shortest_paths::get_shortest_path): Rename param.\n+\t(shortest_paths::m_sense): New field.\n+\t(shortest_paths::m_prev): Rename...\n+\t(shortest_paths::m_best_edge): ...to this.\n+\t(shortest_paths::get_shortest_path): Update for renamings.\n+\tConditionalize flipping of path on sense of traversal.\n+\n+2021-03-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* digraph.cc (selftest::test_shortest_paths): Add test coverage\n+\tfor paths from B and C.\n+\t* shortest-paths.h (shortest_paths::shortest_paths): Handle\n+\tunreachable nodes, rather than asserting.\n+\n+2021-03-11  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\tPR target/99094\n+\t* config/rs6000/rs6000.c (rs6000_xcoff_file_start): Don't create\n+\txcoff_tbss_section_name.\n+\t* config/rs6000/xcoff.h (ASM_OUTPUT_TLS_COMMON): Use .lcomm.\n+\t* xcoffout.c (xcoff_tbss_section_name): Delete.\n+\t* xcoffout.h (xcoff_tbss_section_name): Delete.\n+\n+2021-03-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99523\n+\t* tree-cfg.c (dump_function_to_file): Dump SSA names\n+\tw/o identifier to the decls section as well, not only those\n+\twithout a VAR_DECL.\n+\n+2021-03-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR ipa/99517\n+\t* ipa-icf-gimple.c (func_checker::compare_gimple_call): For internal\n+\tfunction calls with lhs fail if the lhs don't have compatible types.\n+\n+2021-03-11  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/cris.h (HARD_FRAME_POINTER_REGNUM): Define.\n+\tChange FRAME_POINTER_REGNUM to correspond to a new faked\n+\tregister faked_fp, part of GENNONACR_REGS like faked_ap.\n+\t(CRIS_FAKED_REGS_CONTENTS): New helper macro.\n+\t(FIRST_PSEUDO_REGISTER, FIXED_REGISTERS, CALL_USED_REGISTERS):\n+\t(REG_ALLOC_ORDER, REG_CLASS_CONTENTS, REGNO_OK_FOR_BASE_P)\n+\t(ELIMINABLE_REGS, REGISTER_NAMES): Adjust accordingly.\n+\t* config/cris/cris.md (CRIS_FP_REGNUM): Renumber to new faked\n+\tregister.\n+\t(CRIS_REAL_FP_REGNUM): New constant.\n+\t* config/cris/cris.c (cris_reg_saved_in_regsave_area): Check\n+\tfor HARD_FRAME_POINTER_REGNUM instead of FRAME_POINTER_REGNUM.\n+\t(cris_initial_elimination_offset): Handle elimination changes\n+\tto HARD_FRAME_POINTER_REGNUM instead of FRAME_POINTER_REGNUM\n+\tand add one from FRAME_POINTER_REGNUM to\n+\tHARD_FRAME_POINTER_REGNUM.\n+\t(cris_expand_prologue, cris_expand_epilogue): Emit code for\n+\thard_frame_pointer_rtx instead of frame_pointer_rtx.\n+\n 2021-03-10  David Edelsohn  <dje.gcc@gmail.com>\n \n \tPR target/99492"}, {"sha": "448fb4ace5b894bb28d0139f3462724952d09f0b", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48ff383f0d9e917bcb7bcc091af413bcae07b440/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48ff383f0d9e917bcb7bcc091af413bcae07b440/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=48ff383f0d9e917bcb7bcc091af413bcae07b440", "patch": "@@ -1 +1 @@\n-20210311\n+20210312"}, {"sha": "94e87f6bcdeb772ec488a8c021f94ff77b94cc03", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48ff383f0d9e917bcb7bcc091af413bcae07b440/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48ff383f0d9e917bcb7bcc091af413bcae07b440/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=48ff383f0d9e917bcb7bcc091af413bcae07b440", "patch": "@@ -1,3 +1,59 @@\n+2021-03-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96374\n+\t* analyzer.opt (-param=analyzer-max-infeasible-edges=): New param.\n+\t(fdump-analyzer-feasibility): New flag.\n+\t* diagnostic-manager.cc: Include \"analyzer/trimmed-graph.h\" and\n+\t\"analyzer/feasible-graph.h\".\n+\t(epath_finder::epath_finder): Convert m_sep to a pointer and\n+\tonly create it if !flag_analyzer_feasibility.\n+\t(epath_finder::~epath_finder): New.\n+\t(epath_finder::m_sep): Convert to a pointer.\n+\t(epath_finder::get_best_epath): Add param \"diag_idx\" and use it\n+\twhen logging.  Rather than finding the shortest path and then\n+\tchecking feasibility, instead use explore_feasible_paths unless\n+\t!flag_analyzer_feasibility, in which case simply use the shortest\n+\tpath, and note if it is infeasible.  Update for m_sep becoming a\n+\tpointer.\n+\t(class feasible_worklist): New.\n+\t(epath_finder::explore_feasible_paths): New.\n+\t(epath_finder::process_worklist_item): New.\n+\t(class dump_eg_with_shortest_path): New.\n+\t(epath_finder::dump_trimmed_graph): New.\n+\t(epath_finder::dump_feasible_graph): New.\n+\t(saved_diagnostic::saved_diagnostic): Add \"idx\" param, using it\n+\ton new field m_idx.\n+\t(saved_diagnostic::to_json): Dump m_idx.\n+\t(saved_diagnostic::calc_best_epath): Pass m_idx to get_best_epath.\n+\tRemove assertion that m_problem was set when m_best_epath is NULL.\n+\t(diagnostic_manager::add_diagnostic): Pass an index when created\n+\tsaved_diagnostic instances.\n+\t* diagnostic-manager.h (saved_diagnostic::saved_diagnostic): Add\n+\t\"idx\" param.\n+\t(saved_diagnostic::get_index): New accessor.\n+\t(saved_diagnostic::m_idx): New field.\n+\t* engine.cc (exploded_node::dump_dot): Call args.dump_extra_info.\n+\tMove code to...\n+\t(exploded_node::dump_processed_stmts): ...this new function and...\n+\t(exploded_node::dump_saved_diagnostics): ...this new function.\n+\tAdd index of each diagnostic.\n+\t(exploded_edge::dump_dot):  Move bulk of code to...\n+\t(exploded_edge::dump_dot_label): ...this new function.\n+\t* exploded-graph.h (eg_traits::dump_args_t::dump_extra_info): New\n+\tvfunc.\n+\t(exploded_node::dump_processed_stmts): New decl.\n+\t(exploded_node::dump_saved_diagnostics): New decl.\n+\t(exploded_edge::dump_dot_label): New decl.\n+\t* feasible-graph.cc: New file.\n+\t* feasible-graph.h: New file.\n+\t* trimmed-graph.cc: New file.\n+\t* trimmed-graph.h: New file.\n+\n+2021-03-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-manager.cc (epath_finder::epath_finder):\n+\tUpdate shortest_paths init for new param.\n+\n 2021-03-10  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/96374"}, {"sha": "6fb7bcf2eb67f240a12cc23cdfbe1033d41f8d90", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48ff383f0d9e917bcb7bcc091af413bcae07b440/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48ff383f0d9e917bcb7bcc091af413bcae07b440/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=48ff383f0d9e917bcb7bcc091af413bcae07b440", "patch": "@@ -1,3 +1,21 @@\n+2021-03-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99248\n+\t* name-lookup.c (lookup_elaborated_type_1): Access slot not bind\n+\twhen there's a binding vector.\n+\t* ptree.c (cxx_print_xnode): Lazy flags are no longer a thing.\n+\n+2021-03-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99528\n+\t* module.cc (enum merge_kind): Delete MK_type_tmpl_spec,\n+\tMK_decl_tmpl_spec.\n+\t(trees_in::decl_value): Adjust add_mergeable_specialization call.\n+\t(trees_out::get_merge_kind): Adjust detecting a partial template\n+\tinstantiation.\n+\t(trees_out::key_mergeable): Adjust handling same.\n+\t(trees_in::key_mergeabvle): Likewise.\n+\n 2021-03-10  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/99423"}, {"sha": "4a59263bdeb47b75e53774df3930c05ef8f5c1eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48ff383f0d9e917bcb7bcc091af413bcae07b440/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48ff383f0d9e917bcb7bcc091af413bcae07b440/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=48ff383f0d9e917bcb7bcc091af413bcae07b440", "patch": "@@ -1,3 +1,59 @@\n+2021-03-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96374\n+\t* gcc.dg/analyzer/dot-output.c: Add -fdump-analyzer-feasibility\n+\tto options.\n+\t* gcc.dg/analyzer/feasibility-1.c (test_6): Remove xfail.\n+\t(test_7): New.\n+\t* gcc.dg/analyzer/pr93355-localealias-feasibility-2.c: Remove xfail.\n+\t* gcc.dg/analyzer/pr93355-localealias-feasibility-3.c: Remove xfails.\n+\t* gcc.dg/analyzer/pr93355-localealias-feasibility.c: Remove\n+\t-fno-analyzer-feasibility from options.\n+\t* gcc.dg/analyzer/pr93355-localealias.c: Likewise.\n+\t* gcc.dg/analyzer/unknown-fns-4.c: Remove xfail.\n+\n+2021-03-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99248\n+\t* g++.dg/modules/pr99248.h: New.\n+\t* g++.dg/modules/pr99248_a.H: New.\n+\t* g++.dg/modules/pr99248_b.H: New.\n+\n+2021-03-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99528\n+\t* g++.dg/modules/pr99528.h: New.\n+\t* g++.dg/modules/pr99528_a.H: New.\n+\t* g++.dg/modules/pr99528_b.H: New.\n+\t* g++.dg/modules/pr99528_c.C: New.\n+\n+2021-03-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/98245\n+\t* gcc.dg/vect/bb-slp-46.c: Scan for the scalar compute\n+\tinstead of verifying the total number of adds.\n+\n+2021-03-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/97494\n+\t* gcc.dg/vect/pr97428.c: XFAIL on !vect_hw_misalign.\n+\n+2021-03-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/97494\n+\t* gcc.dg/vect/vect-complex-5.c: XFAIL on !vect_hw_misalign.\n+\n+2021-03-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/97494\n+\t* gcc.dg/vect/slp-21.c: Adjust for powerpc64*-*-*.\n+\n+2021-03-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR ipa/99517\n+\t* gcc.target/i386/avx2-pr99517-1.c: New test.\n+\t* gcc.target/i386/avx2-pr99517-2.c: New test.\n+\n 2021-03-10  David Edelsohn  <dje.gcc@gmail.com>\n \n \tPR target/99492"}, {"sha": "6834a90ff9e92eaa5a31eaf4f2978417bf39a236", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48ff383f0d9e917bcb7bcc091af413bcae07b440/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48ff383f0d9e917bcb7bcc091af413bcae07b440/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=48ff383f0d9e917bcb7bcc091af413bcae07b440", "patch": "@@ -1,3 +1,71 @@\n+2021-03-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* src/c++17/floating_to_chars.cc: Simplify the file as if\n+\t__SIZEOF_INT128__ is always defined.\n+\t[!defined __SIZEOF_INT128__]: Include \"uint128_t.h\".  Define\n+\ta base-10 to_chars overload for the uint128_t class type.\n+\t* src/c++17/uint128_t.h: New file.\n+\t* testsuite/20_util/to_chars/long_double.cc: No longer expect an\n+\texecution FAIL on targets that have a large long double type\n+\tbut lack __int128.\n+\n+2021-03-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* src/c++17/ryu/LOCAL_PATCHES: Update.\n+\t* src/c++17/ryu/d2s_intrinsics.h: Don't define uint128_t.\n+\t* src/c++17/ryu/generic_128.h: Likewise.\n+\t* src/c++17/ryu/ryu_generic_128.h (struct floating_decimal_128):\n+\tUse uint128_t instead of __uint128_t.\n+\t(generic_binary_to_decimal): Likewise.\n+\n+2021-03-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* src/c++17/ryu/LOCAL_PATCHES: New file.\n+\n+2021-03-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* src/c++17/floating_to_chars.cc (uint128_t): New conditionally\n+\tdefined alias of unsigned __int128.\n+\t(floating_type_traits_binary128::mantissa_t): Use uint128_t\n+\tinstead of unsigned __int128.\n+\t(floating_type_traits<long double>::mantissa_t)\n+\t[LONG_DOUBLE_KIND == LDK_IBM128]: Likewise.\n+\t(get_ieee_repr): Likewise.  Make casts from uint_t to mantissa_t\n+\tand uint32_t explicit.  Simplify the extraction of mantissa,\n+\texponent and sign bit.\n+\n+2021-03-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/barrier (barrier::arrival_token): New move-only\n+\tclass that encapsulates the underlying token value.\n+\n+2021-03-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* python/libstdcxx/v6/printers.py (find_type): Use tag attribute\n+\tinstead of unqualified() method.\n+\n+2021-03-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/99537\n+\t* include/std/stop_token (_Stop_state_t::_M_release_ownership):\n+\tUse acq_rel memory ordering.\n+\n+2021-03-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/99537\n+\t* src/c++17/fs_dir.cc (recursive_directory_iterator): Use new\n+\thelper function to check for permission denied errors.\n+\t* src/filesystem/dir.cc (recursive_directory_iterator):\n+\tLikewise.\n+\t* src/filesystem/dir-common.h (is_permission_denied_error): New\n+\thelper function.\n+\n+2021-03-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/99536\n+\t* include/bits/random.h (normal_distribution): Use\n+\tdefault-initializer for _M_saved and _M_saved_available.\n+\n 2021-03-10  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* testsuite/29_atomics/atomic/wait_notify/bool.cc: Add options to"}]}