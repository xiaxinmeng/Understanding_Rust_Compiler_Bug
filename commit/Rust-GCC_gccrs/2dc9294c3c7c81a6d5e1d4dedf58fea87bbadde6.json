{"sha": "2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRjOTI5NGMzYzdjODFhNmQ1ZTFkNGRlZGY1OGZlYTg3YmJhZGRlNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-15T07:59:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-15T07:59:14Z"}, "message": "openmp: Reject requires directives not at file or namespace scope [PR94593]\n\nThis change started with a bugreport about a typo in one requires testcase\n(diagnosed with -Wunknown-pragmas only), but following discussion lead to\nnoting that we do not diagnose restriction that requires directives in\nC/C++ may only appear at file or namespace scope; and several our tests\nviolated that.\n\n2020-04-15  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/94593\n\t* c-parser.c (c_parser_pragma) <case PRAGMA_OMP_REQUIRES>: Reject\n\trequires directive when not at file scope.\n\n\t* parser.c (cp_parser_pragma) <case PRAGMA_OMP_REQUIRES>: Reject\n\trequires directive when not at file or namespace scope.\n\n\t* c-c++-common/gomp/requires-1.c: Fix a typo, requries -> requires.\n\tMove directives to file scope.\n\t(i): Remove.\n\t* c-c++-common/gomp/requires-2.c: Move directives to file scope.\n\t(i, foo): Remove.\n\t* c-c++-common/gomp/requires-4.c: Move directives to file scope.\n\t* c-c++-common/gomp/atomic-19.c: Move requires directive to file scope.\n\t* c-c++-common/gomp/atomic-20.c: Likewise.\n\t* c-c++-common/gomp/atomic-21.c: Likewise.\n\t* c-c++-common/gomp/atomic-22.c: Likewise.\n\t* gcc.dg/gomp/requires-1.c: New test.\n\t* g++.dg/gomp/requires-1.C: New test.\n\t* g++.dg/gomp/requires-2.C: New test.\n\t* g++.dg/gomp/atomic-18.C: Move requires directive to file scope.", "tree": {"sha": "e5020dd979b8eb5897157a8c3adfd2ec55f78159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5020dd979b8eb5897157a8c3adfd2ec55f78159"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e71b408aa242ffc76ffd19ebcdbd40279a1d9349", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e71b408aa242ffc76ffd19ebcdbd40279a1d9349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e71b408aa242ffc76ffd19ebcdbd40279a1d9349"}], "stats": {"total": 163, "additions": 136, "deletions": 27}, "files": [{"sha": "a1831d46f12004b9dfa47c087d1174b760b07f78", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6", "patch": "@@ -1,3 +1,9 @@\n+2020-04-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/94593\n+\t* c-parser.c (c_parser_pragma) <case PRAGMA_OMP_REQUIRES>: Reject\n+\trequires directive when not at file scope.\n+\n 2020-04-08  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR middle-end/94120"}, {"sha": "679c14db29cda07cbd18590b304d1cd0813e338c", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6", "patch": "@@ -12402,6 +12402,13 @@ c_parser_pragma (c_parser *parser, enum pragma_context context, bool *if_p)\n       return false;\n \n     case PRAGMA_OMP_REQUIRES:\n+      if (context != pragma_external)\n+\t{\n+\t  error_at (c_parser_peek_token (parser)->location,\n+\t\t    \"%<#pragma omp requires%> may only be used at file scope\");\n+\t  c_parser_skip_until_found (parser, CPP_PRAGMA_EOL, NULL);\n+\t  return false;\n+\t}\n       c_parser_omp_requires (parser);\n       return false;\n "}, {"sha": "0f53923e76800a6478cedab55eda2df97ef90222", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6", "patch": "@@ -1,3 +1,9 @@\n+2020-04-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/94593\n+\t* parser.c (cp_parser_pragma) <case PRAGMA_OMP_REQUIRES>: Reject\n+\trequires directive when not at file or namespace scope.\n+\n 2020-04-14  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR c++/94359"}, {"sha": "3855416a85471ff79ec95b5cc4aa90867cd30034", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6", "patch": "@@ -43801,6 +43801,13 @@ cp_parser_pragma (cp_parser *parser, enum pragma_context context, bool *if_p)\n       return true;\n \n     case PRAGMA_OMP_REQUIRES:\n+      if (context != pragma_external)\n+\t{\n+\t  error_at (pragma_tok->location,\n+\t\t    \"%<#pragma omp requires%> may only be used at file or \"\n+\t\t    \"namespace scope\");\n+\t  break;\n+\t}\n       return cp_parser_omp_requires (parser, pragma_tok);\n \n     case PRAGMA_OMP_ORDERED:"}, {"sha": "0804bf57457765a488b4dd39b09e633b4556e543", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6", "patch": "@@ -1,3 +1,16 @@\n+2020-04-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/94593\n+\t* c-c++-common/gomp/requires-1.c: Fix a typo, requries -> requires.\n+\tMove directives to file scope.\n+\t(i): Remove.\n+\t* c-c++-common/gomp/requires-2.c: Move directives to file scope.\n+\t(i, foo): Remove.\n+\t* c-c++-common/gomp/requires-4.c: Move directives to file scope.\n+\t* gcc.dg/gomp/requires-1.c: New test.\n+\t* g++.dg/gomp/requires-1.C: New test.\n+\t* g++.dg/gomp/requires-2.C: New test.\n+\n 2020-04-15  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/94539"}, {"sha": "c428262cfe0f85da45b8d84cae5f706028927e5c", "filename": "gcc/testsuite/c-c++-common/gomp/atomic-19.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-19.c?ref=2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6", "patch": "@@ -10,10 +10,16 @@ int i, j, k, l, m, n;\n void\n foo ()\n {\n-  int v;\n   #pragma omp atomic release\n   i = i + 1;\n-  #pragma omp requires atomic_default_mem_order (relaxed)\n+}\n+\n+#pragma omp requires atomic_default_mem_order (relaxed)\n+\n+void\n+bar ()\n+{\n+  int v;\n   #pragma omp atomic\n   j = j + 1;\n   #pragma omp atomic update"}, {"sha": "d5059f4bb4ab35b751c9275b7b0f54c41a94bac1", "filename": "gcc/testsuite/c-c++-common/gomp/atomic-20.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-20.c?ref=2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6", "patch": "@@ -10,10 +10,16 @@ int i, j, k, l, m, n;\n void\n foo ()\n {\n-  int v;\n   #pragma omp atomic release\n   i = i + 1;\n-  #pragma omp requires atomic_default_mem_order (seq_cst)\n+}\n+\n+#pragma omp requires atomic_default_mem_order (seq_cst)\n+\n+void\n+bar ()\n+{\n+  int v;\n   #pragma omp atomic\n   j = j + 1;\n   #pragma omp atomic update"}, {"sha": "8d052ae7bc710a9bbe765faca89f1b10c5411c81", "filename": "gcc/testsuite/c-c++-common/gomp/atomic-21.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-21.c?ref=2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6", "patch": "@@ -9,10 +9,16 @@ int i, j, k, l, m, n;\n void\n foo ()\n {\n-  int v;\n   #pragma omp atomic release\n   i = i + 1;\n-  #pragma omp requires atomic_default_mem_order (acq_rel)\n+}\n+\n+#pragma omp requires atomic_default_mem_order (acq_rel)\n+\n+void\n+bar ()\n+{\n+  int v;\n   #pragma omp atomic\n   j = j + 1;\n   #pragma omp atomic update"}, {"sha": "e1db3645ce0719ee9e8e9b20bdda889f2a9e25f0", "filename": "gcc/testsuite/c-c++-common/gomp/atomic-22.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-22.c?ref=2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6", "patch": "@@ -8,5 +8,6 @@ foo ()\n   i = i + 1;\n   #pragma omp atomic read\n   v = j;\n-  #pragma omp requires atomic_default_mem_order (acq_rel)\t/* { dg-error \"'atomic_default_mem_order' clause used lexically after first 'atomic' construct without memory order clause\" } */\n }\n+\n+#pragma omp requires atomic_default_mem_order (acq_rel)\t/* { dg-error \"'atomic_default_mem_order' clause used lexically after first 'atomic' construct without memory order clause\" } */"}, {"sha": "e1f2e3a503fb9405e3b152fc5781dd8b233b6260", "filename": "gcc/testsuite/c-c++-common/gomp/requires-1.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Frequires-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Frequires-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Frequires-1.c?ref=2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6", "patch": "@@ -3,15 +3,12 @@\n #pragma omp requires unified_shared_memory unified_address\n #pragma omp requires dynamic_allocators,reverse_offload\n \n-int i;\n-\n void\n foo ()\n {\n-  if (0)\n-    #pragma omp requires unified_shared_memory unified_address\n-    i++;\n-  #pragma omp requries atomic_default_mem_order(seq_cst)\n }\n \n+#pragma omp requires unified_shared_memory unified_address\n+#pragma omp requires atomic_default_mem_order(seq_cst)\n+\n /* { dg-prune-output \"not supported yet\" } */"}, {"sha": "717b65caeea021149408d66c8973b54718cde08f", "filename": "gcc/testsuite/c-c++-common/gomp/requires-2.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Frequires-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Frequires-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Frequires-2.c?ref=2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6", "patch": "@@ -3,18 +3,8 @@\n #pragma omp requires unified_address\tunified_address\t/* { dg-error \"too many 'unified_address' clauses\" } */\n #pragma omp requires reverse_offload reverse_offload\t/* { dg-error \"too many 'reverse_offload' clauses\" } */\n #pragma omp requires foobarbaz\t/* { dg-error \"expected 'unified_address', 'unified_shared_memory', 'dynamic_allocators', 'reverse_offload' or 'atomic_default_mem_order' clause\" } */\n-\n-int i;\n-\n-void\n-foo ()\n-{\n-  #pragma omp requires dynamic_allocators , dynamic_allocators\t/* { dg-error \"too many 'dynamic_allocators' clauses\" } */\n-  if (0)\n-    #pragma omp requires atomic_default_mem_order(seq_cst) atomic_default_mem_order(seq_cst)\t/* { dg-error \"too many 'atomic_default_mem_order' clauses\" } */\n-    i++;\n-}\n-\n+#pragma omp requires dynamic_allocators , dynamic_allocators\t/* { dg-error \"too many 'dynamic_allocators' clauses\" } */\n+#pragma omp requires atomic_default_mem_order(seq_cst) atomic_default_mem_order(seq_cst)\t/* { dg-error \"too many 'atomic_default_mem_order' clauses\" } */\n #pragma omp requires atomic_default_mem_order (seq_cst)\t/* { dg-error \"more than one 'atomic_default_mem_order' clause in a single compilation unit\" } */\n \n /* { dg-prune-output \"not supported yet\" } */"}, {"sha": "88ba7746cf81698c3aeb3f9ed877448fd5ca43e0", "filename": "gcc/testsuite/c-c++-common/gomp/requires-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Frequires-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Frequires-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Frequires-4.c?ref=2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6", "patch": "@@ -4,9 +4,9 @@ foo (void)\n {\n   #pragma omp target\n   ;\n-  #pragma omp requires unified_shared_memory\t/* { dg-error \"'unified_shared_memory' clause used lexically after first target construct or offloading API\" } */\n }\n \n+#pragma omp requires unified_shared_memory\t/* { dg-error \"'unified_shared_memory' clause used lexically after first target construct or offloading API\" } */\n #pragma omp requires unified_address\t/* { dg-error \"'unified_address' clause used lexically after first target construct or offloading API\" } */\n #pragma omp requires reverse_offload\t/* { dg-error \"'reverse_offload' clause used lexically after first target construct or offloading API\" } */\n "}, {"sha": "896cf468a0707979e6ff07e2d8d51ef0b50a9764", "filename": "gcc/testsuite/g++.dg/gomp/atomic-18.C", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fatomic-18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fatomic-18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fatomic-18.C?ref=2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6", "patch": "@@ -36,7 +36,14 @@ foo (T *p)\n   i = v;\n   #pragma omp atomic hint(1),update,release\n   f = f + 2.0;\n-  #pragma omp requires atomic_default_mem_order (acq_rel)\n+}\n+\n+#pragma omp requires atomic_default_mem_order (acq_rel)\n+\n+template <int N, int M, typename T>\n+void\n+baz (T *p)\n+{\n   #pragma omp atomic hint (M - 1) update\n   *p += 1;\n   #pragma omp atomic capture, hint (M)\n@@ -47,4 +54,5 @@ void\n bar ()\n {\n   foo <0, 1, int> (&i);\n+  baz <0, 1, int> (&i);\n }"}, {"sha": "aefeb288dadadf0e6d7f598b22384a378af75c9f", "filename": "gcc/testsuite/g++.dg/gomp/requires-1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Frequires-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Frequires-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Frequires-1.C?ref=2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6", "patch": "@@ -0,0 +1,12 @@\n+namespace N {\n+namespace M {\n+#pragma omp requires unified_address\n+#pragma omp requires unified_shared_memory\n+#pragma omp requires unified_shared_memory unified_address\n+#pragma omp requires dynamic_allocators,reverse_offload\n+#pragma omp requires unified_shared_memory unified_address\n+#pragma omp requires atomic_default_mem_order(seq_cst)\n+}\n+}\n+\n+/* { dg-prune-output \"not supported yet\" } */"}, {"sha": "c044e5ee82a52b413fda94617fa9f4ff7d87736d", "filename": "gcc/testsuite/g++.dg/gomp/requires-2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Frequires-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Frequires-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Frequires-2.C?ref=2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6", "patch": "@@ -0,0 +1,22 @@\n+int i;\n+\n+void\n+foo ()\n+{\n+  #pragma omp requires unified_address\t\t\t\t// { dg-error \"may only be used at file or namespace scope\" }\n+  #pragma omp requires unified_shared_memory\t\t\t// { dg-error \"may only be used at file or namespace scope\" }\n+  #pragma omp requires unified_shared_memory unified_address\t// { dg-error \"may only be used at file or namespace scope\" }\n+  #pragma omp requires dynamic_allocators,reverse_offload\t// { dg-error \"may only be used at file or namespace scope\" }\n+  #pragma omp requires atomic_default_mem_order(seq_cst)\t// { dg-error \"may only be used at file or namespace scope\" }\n+  if (0)\n+    #pragma omp requires unified_address\t\t\t// { dg-error \"may only be used at file or namespace scope\" }\n+    i++;\n+  if (0)\n+    #pragma omp requires atomic_default_mem_order(seq_cst)\t// { dg-error \"may only be used at file or namespace scope\" }\n+    i++;\n+}\n+\n+struct S {\n+  int s;\n+  #pragma omp requires unified_address\t\t\t\t// { dg-error \"may only be used at file or namespace scope\" }\n+};"}, {"sha": "9f8d0541d8a249d1774c00d91989f18c1bb88065", "filename": "gcc/testsuite/gcc.dg/gomp/requires-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Frequires-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Frequires-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Frequires-1.c?ref=2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6", "patch": "@@ -0,0 +1,22 @@\n+int i;\n+\n+void\n+foo ()\n+{\n+  #pragma omp requires unified_address\t\t\t\t/* { dg-error \"may only be used at file scope\" } */\n+  #pragma omp requires unified_shared_memory\t\t\t/* { dg-error \"may only be used at file scope\" } */\n+  #pragma omp requires unified_shared_memory unified_address\t/* { dg-error \"may only be used at file scope\" } */\n+  #pragma omp requires dynamic_allocators,reverse_offload\t/* { dg-error \"may only be used at file scope\" } */\n+  #pragma omp requires atomic_default_mem_order(seq_cst)\t/* { dg-error \"may only be used at file scope\" } */\n+  if (0)\n+    #pragma omp requires unified_address\t\t\t/* { dg-error \"may only be used at file scope\" } */\n+    i++;\n+  if (0)\n+    #pragma omp requires atomic_default_mem_order(seq_cst)\t/* { dg-error \"may only be used at file scope\" } */\n+    i++;\n+}\n+\n+struct S {\n+  int s;\n+  #pragma omp requires unified_address\t\t\t\t/* { dg-error \"may only be used at file scope\" } */\n+};"}]}