{"sha": "22692f3ce9d00eac18d5582de90dda5ae5c07c77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI2OTJmM2NlOWQwMGVhYzE4ZDU1ODJkZTkwZGRhNWFlNWMwN2M3Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-11-15T13:42:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-11-15T13:42:13Z"}, "message": "re PR tree-optimization/88031 (ICE in vectorizable_reduction, at tree-vect-loop.c:6953)\n\n2018-11-15  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/88031\n\t* tree-vect-loop.c (vectorizable_reduction): Move check\n\tfor multiple types earlier so we get the expected dump.\n\tSimplify calls to vectorizable_condition.\n\t* tree-vect-stmts.h (vectorizable_condition): Update prototype.\n\t* tree-vect-stmts.c (vectorizable_condition): Instead of\n\treduc_def and reduc_index take just a flag.  Simplify\n\tcode-generation now that we can rely on the defs being set up.\n\t(vectorizable_comparison): Remove unused argument.\n\n\t* gcc.dg/pr88031.c: New testcase.\n\nFrom-SVN: r266182", "tree": {"sha": "5b45430049bf1f43c56112e905e467089f9e5027", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b45430049bf1f43c56112e905e467089f9e5027"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22692f3ce9d00eac18d5582de90dda5ae5c07c77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22692f3ce9d00eac18d5582de90dda5ae5c07c77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22692f3ce9d00eac18d5582de90dda5ae5c07c77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22692f3ce9d00eac18d5582de90dda5ae5c07c77/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f5a0fdefbb4bd69547b7275da08f712b18a972e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f5a0fdefbb4bd69547b7275da08f712b18a972e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f5a0fdefbb4bd69547b7275da08f712b18a972e"}], "stats": {"total": 128, "additions": 71, "deletions": 57}, "files": [{"sha": "df863230c1c54ac93e42c8cd115ed0f2d431388f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22692f3ce9d00eac18d5582de90dda5ae5c07c77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22692f3ce9d00eac18d5582de90dda5ae5c07c77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22692f3ce9d00eac18d5582de90dda5ae5c07c77", "patch": "@@ -1,3 +1,15 @@\n+2018-11-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88031\n+\t* tree-vect-loop.c (vectorizable_reduction): Move check\n+\tfor multiple types earlier so we get the expected dump.\n+\tSimplify calls to vectorizable_condition.\n+\t* tree-vect-stmts.h (vectorizable_condition): Update prototype.\n+\t* tree-vect-stmts.c (vectorizable_condition): Instead of\n+\treduc_def and reduc_index take just a flag.  Simplify\n+\tcode-generation now that we can rely on the defs being set up.\n+\t(vectorizable_comparison): Remove unused argument.\n+\n 2018-11-15  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/88030"}, {"sha": "ee0d920c73e4cbe882745eb2c7113d894f708ec4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22692f3ce9d00eac18d5582de90dda5ae5c07c77/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22692f3ce9d00eac18d5582de90dda5ae5c07c77/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=22692f3ce9d00eac18d5582de90dda5ae5c07c77", "patch": "@@ -1,3 +1,8 @@\n+2018-11-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88031\n+\t* gcc.dg/pr88031.c: New testcase.\n+\n 2018-11-15  Wilco Dijkstra  <wdijkstr@arm.com>  \n \n \t* gcc.target/aarch64/pr62178.c: Fix spaces."}, {"sha": "2c1d1c1391d713a2e34180dcc2f2529d5cfbe137", "filename": "gcc/testsuite/gcc.dg/pr88031.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22692f3ce9d00eac18d5582de90dda5ae5c07c77/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88031.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22692f3ce9d00eac18d5582de90dda5ae5c07c77/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88031.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88031.c?ref=22692f3ce9d00eac18d5582de90dda5ae5c07c77", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+int a[512];\n+int b;\n+void d()\n+{\n+  unsigned char c;\n+  for (; b; b++) {\n+      c = 1;\n+      for (; c; c <<= 1) {\n+\t  a[b] <<= 8;\n+\t  if (b & c)\n+\t    a[b] = 1;\n+      }\n+  }\n+}"}, {"sha": "f2d9d8ac2bc44398f955650591eea20dc7fca8a5", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22692f3ce9d00eac18d5582de90dda5ae5c07c77/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22692f3ce9d00eac18d5582de90dda5ae5c07c77/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=22692f3ce9d00eac18d5582de90dda5ae5c07c77", "patch": "@@ -6491,14 +6491,24 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n         double_reduc = true;\n     }\n \n+  vect_reduction_type reduction_type\n+    = STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info);\n+  if ((double_reduc || reduction_type != TREE_CODE_REDUCTION)\n+      && ncopies > 1)\n+    {\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t \"multiple types in double reduction or condition \"\n+\t\t\t \"reduction.\\n\");\n+      return false;\n+    }\n+\n   if (code == COND_EXPR)\n     {\n       /* Only call during the analysis stage, otherwise we'll lose\n-\t STMT_VINFO_TYPE.  We'll pass ops[0] as reduc_op, it's only\n-\t used as a flag during analysis.  */\n+\t STMT_VINFO_TYPE.  */\n       if (!vec_stmt && !vectorizable_condition (stmt_info, gsi, NULL,\n-\t\t\t\t\t\tops[0], 0, NULL,\n-\t\t\t\t\t\tcost_vec))\n+\t\t\t\t\t\ttrue, NULL, cost_vec))\n         {\n           if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n@@ -6598,8 +6608,6 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n           (and also the same tree-code) when generating the epilog code and\n           when generating the code inside the loop.  */\n \n-  vect_reduction_type reduction_type\n-    = STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info);\n   if (orig_stmt_info\n       && (reduction_type == TREE_CODE_REDUCTION\n \t  || reduction_type == FOLD_LEFT_REDUCTION))\n@@ -6689,16 +6697,6 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n       return false;\n     }\n \n-  if ((double_reduc || reduction_type != TREE_CODE_REDUCTION)\n-      && ncopies > 1)\n-    {\n-      if (dump_enabled_p ())\n-\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t \"multiple types in double reduction or condition \"\n-\t\t\t \"reduction.\\n\");\n-      return false;\n-    }\n-\n   /* For SLP reductions, see if there is a neutral value we can use.  */\n   tree neutral_op = NULL_TREE;\n   if (slp_node)\n@@ -6963,7 +6961,7 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n     {\n       gcc_assert (!slp_node);\n       return vectorizable_condition (stmt_info, gsi, vec_stmt,\n-\t\t\t\t     NULL, reduc_index, NULL, NULL);\n+\t\t\t\t     true, NULL, NULL);\n     }\n \n   /* Create the destination vector  */\n@@ -6995,9 +6993,7 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n         {\n           gcc_assert (!slp_node);\n \t  vectorizable_condition (stmt_info, gsi, vec_stmt,\n-\t\t\t\t  PHI_RESULT (phis[0]->stmt),\n-\t\t\t\t  reduc_index, NULL, NULL);\n-          /* Multiple types are not supported for condition.  */\n+\t\t\t\t  true, NULL, NULL);\n           break;\n         }\n       if (code == LSHIFT_EXPR"}, {"sha": "a67a7f4e34848fba52201d90e31ffe632eb78a0b", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 20, "deletions": 36, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22692f3ce9d00eac18d5582de90dda5ae5c07c77/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22692f3ce9d00eac18d5582de90dda5ae5c07c77/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=22692f3ce9d00eac18d5582de90dda5ae5c07c77", "patch": "@@ -8675,17 +8675,14 @@ vect_is_simple_cond (tree cond, vec_info *vinfo,\n    stmt using VEC_COND_EXPR  to replace it, put it in VEC_STMT, and insert it\n    at GSI.\n \n-   When STMT_INFO is vectorized as a nested cycle, REDUC_DEF is the vector\n-   variable to be used at REDUC_INDEX (in then clause if REDUC_INDEX is 1,\n-   and in else clause if it is 2).\n+   When STMT_INFO is vectorized as a nested cycle, for_reduction is true.\n \n    Return true if STMT_INFO is vectorizable in this way.  */\n \n bool\n vectorizable_condition (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n-\t\t\tstmt_vec_info *vec_stmt, tree reduc_def,\n-\t\t\tint reduc_index, slp_tree slp_node,\n-\t\t\tstmt_vector_for_cost *cost_vec)\n+\t\t\tstmt_vec_info *vec_stmt, bool for_reduction,\n+\t\t\tslp_tree slp_node, stmt_vector_for_cost *cost_vec)\n {\n   vec_info *vinfo = stmt_info->vinfo;\n   tree scalar_dest = NULL_TREE;\n@@ -8714,7 +8711,7 @@ vectorizable_condition (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   tree vec_cmp_type;\n   bool masked = false;\n \n-  if (reduc_index && STMT_SLP_TYPE (stmt_info))\n+  if (for_reduction && STMT_SLP_TYPE (stmt_info))\n     return false;\n \n   vect_reduction_type reduction_type\n@@ -8726,7 +8723,7 @@ vectorizable_condition (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \n       if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_internal_def\n \t  && !(STMT_VINFO_DEF_TYPE (stmt_info) == vect_nested_cycle\n-\t       && reduc_def))\n+\t       && for_reduction))\n \treturn false;\n \n       /* FORNOW: not yet supported.  */\n@@ -8758,7 +8755,7 @@ vectorizable_condition (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n     ncopies = vect_get_num_copies (loop_vinfo, vectype);\n \n   gcc_assert (ncopies >= 1);\n-  if (reduc_index && ncopies > 1)\n+  if (for_reduction && ncopies > 1)\n     return false; /* FORNOW */\n \n   cond_expr = gimple_assign_rhs1 (stmt);\n@@ -8928,22 +8925,12 @@ vectorizable_condition (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t\t\t\t\t\t    stmt_info, comp_vectype);\n \t\t  vect_is_simple_use (cond_expr1, loop_vinfo, &dts[1]);\n \t\t}\n-\t      if (reduc_index == 1)\n-\t\tvec_then_clause = reduc_def;\n-\t      else\n-\t\t{\n-\t\t  vec_then_clause = vect_get_vec_def_for_operand (then_clause,\n-\t\t\t\t\t\t\t\t  stmt_info);\n-\t\t  vect_is_simple_use (then_clause, loop_vinfo, &dts[2]);\n-\t\t}\n-\t      if (reduc_index == 2)\n-\t\tvec_else_clause = reduc_def;\n-\t      else\n-\t\t{\n-\t\t  vec_else_clause = vect_get_vec_def_for_operand (else_clause,\n-\t\t\t\t\t\t\t\t  stmt_info);\n-\t\t  vect_is_simple_use (else_clause, loop_vinfo, &dts[3]);\n-\t\t}\n+\t      vec_then_clause = vect_get_vec_def_for_operand (then_clause,\n+\t\t\t\t\t\t\t      stmt_info);\n+\t      vect_is_simple_use (then_clause, loop_vinfo, &dts[2]);\n+\t      vec_else_clause = vect_get_vec_def_for_operand (else_clause,\n+\t\t\t\t\t\t\t      stmt_info);\n+\t      vect_is_simple_use (else_clause, loop_vinfo, &dts[3]);\n \t    }\n \t}\n       else\n@@ -9023,7 +9010,6 @@ vectorizable_condition (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t\t  vect_finish_stmt_generation (stmt_info, new_stmt, gsi);\n \t\t  vec_compare = vec_compare_name;\n \t\t}\n-\t      gcc_assert (reduc_index == 2);\n \t      gcall *new_stmt = gimple_build_call_internal\n \t\t(IFN_FOLD_EXTRACT_LAST, 3, else_clause, vec_compare,\n \t\t vec_then_clause);\n@@ -9085,7 +9071,7 @@ vectorizable_condition (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \n static bool\n vectorizable_comparison (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n-\t\t\t stmt_vec_info *vec_stmt, tree reduc_def,\n+\t\t\t stmt_vec_info *vec_stmt,\n \t\t\t slp_tree slp_node, stmt_vector_for_cost *cost_vec)\n {\n   vec_info *vinfo = stmt_info->vinfo;\n@@ -9123,9 +9109,7 @@ vectorizable_comparison (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n     ncopies = vect_get_num_copies (loop_vinfo, vectype);\n \n   gcc_assert (ncopies >= 1);\n-  if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_internal_def\n-      && !(STMT_VINFO_DEF_TYPE (stmt_info) == vect_nested_cycle\n-\t   && reduc_def))\n+  if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_internal_def)\n     return false;\n \n   if (STMT_VINFO_LIVE_P (stmt_info))\n@@ -9556,9 +9540,9 @@ vect_analyze_stmt (stmt_vec_info stmt_info, bool *need_to_vectorize,\n \t\t\t\t     node_instance, cost_vec)\n \t  || vectorizable_induction (stmt_info, NULL, NULL, node, cost_vec)\n \t  || vectorizable_shift (stmt_info, NULL, NULL, node, cost_vec)\n-\t  || vectorizable_condition (stmt_info, NULL, NULL, NULL, 0, node,\n+\t  || vectorizable_condition (stmt_info, NULL, NULL, false, node,\n \t\t\t\t     cost_vec)\n-\t  || vectorizable_comparison (stmt_info, NULL, NULL, NULL, node,\n+\t  || vectorizable_comparison (stmt_info, NULL, NULL, node,\n \t\t\t\t      cost_vec));\n   else\n     {\n@@ -9575,9 +9559,9 @@ vect_analyze_stmt (stmt_vec_info stmt_info, bool *need_to_vectorize,\n \t      || vectorizable_load (stmt_info, NULL, NULL, node, node_instance,\n \t\t\t\t    cost_vec)\n \t      || vectorizable_store (stmt_info, NULL, NULL, node, cost_vec)\n-\t      || vectorizable_condition (stmt_info, NULL, NULL, NULL, 0, node,\n+\t      || vectorizable_condition (stmt_info, NULL, NULL, false, node,\n \t\t\t\t\t cost_vec)\n-\t      || vectorizable_comparison (stmt_info, NULL, NULL, NULL, node,\n+\t      || vectorizable_comparison (stmt_info, NULL, NULL, node,\n \t\t\t\t\t  cost_vec));\n     }\n \n@@ -9680,13 +9664,13 @@ vect_transform_stmt (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n       break;\n \n     case condition_vec_info_type:\n-      done = vectorizable_condition (stmt_info, gsi, &vec_stmt, NULL, 0,\n+      done = vectorizable_condition (stmt_info, gsi, &vec_stmt, false,\n \t\t\t\t     slp_node, NULL);\n       gcc_assert (done);\n       break;\n \n     case comparison_vec_info_type:\n-      done = vectorizable_comparison (stmt_info, gsi, &vec_stmt, NULL,\n+      done = vectorizable_comparison (stmt_info, gsi, &vec_stmt,\n \t\t\t\t      slp_node, NULL);\n       gcc_assert (done);\n       break;"}, {"sha": "f1c186b8af5fc62478853dcb61ef84fe8f900936", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22692f3ce9d00eac18d5582de90dda5ae5c07c77/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22692f3ce9d00eac18d5582de90dda5ae5c07c77/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=22692f3ce9d00eac18d5582de90dda5ae5c07c77", "patch": "@@ -1481,7 +1481,7 @@ extern void vect_remove_stores (stmt_vec_info);\n extern opt_result vect_analyze_stmt (stmt_vec_info, bool *, slp_tree,\n \t\t\t\t     slp_instance, stmt_vector_for_cost *);\n extern bool vectorizable_condition (stmt_vec_info, gimple_stmt_iterator *,\n-\t\t\t\t    stmt_vec_info *, tree, int, slp_tree,\n+\t\t\t\t    stmt_vec_info *, bool, slp_tree,\n \t\t\t\t    stmt_vector_for_cost *);\n extern bool vectorizable_shift (stmt_vec_info, gimple_stmt_iterator *,\n \t\t\t\tstmt_vec_info *, slp_tree,"}]}