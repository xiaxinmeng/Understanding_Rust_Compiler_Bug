{"sha": "5fa9abc3e9676702f2c1699ee4283773b1bf8de1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZhOWFiYzNlOTY3NjcwMmYyYzE2OTllZTQyODM3NzNiMWJmOGRlMQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-03-27T03:48:17Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-03-27T03:48:17Z"}, "message": "basic_file.h (get_fileno): Remove.\n\n\n2001-03-26  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/basic_file.h (get_fileno): Remove.\n\t(_M_fileno): Remove.\n\t(_M_cfile_created): Add.\n\t(basic_file::basic_file(__c_file_type*, openmode): Add.\n\t(basic_file::basic_file(int, const char*, openmode): Remove.\n\t* include/bits/fstream.tcc (basic_fstream::basic_filebuf(int __fd,\n\tconst char*, ios_base::openmode): Don't allocate\n\tinternal buffers. Turn off internal buffers.\n\t(basic_filebuf::overflow): Remove test for null buffer.\n\t(basic_filebuf::_M_really_overflow): Same. Allow unbuffered use.\n\t* include/bits/streambuf.cc: Tweak.\n\t* include/bits/std_ostream.h: Tweak.\n\t* config/basic_file_libio.h: Same.\n\t* config/basic_file_stdio.h: Same.\n\t* src/ios.cc (ios_base::Init::Init()): Unbuffer stdout by default.\n\t* testsuite/27_io/filebuf_members.cc: Tweaks.\n\t* testsuite/27_io/ios_base_members_static.cc: Tweaks.\n\nFrom-SVN: r40863", "tree": {"sha": "35a6806f2434fa0e8a5d6d48a62cf488d0fb826c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35a6806f2434fa0e8a5d6d48a62cf488d0fb826c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fa9abc3e9676702f2c1699ee4283773b1bf8de1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fa9abc3e9676702f2c1699ee4283773b1bf8de1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fa9abc3e9676702f2c1699ee4283773b1bf8de1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/comments", "author": null, "committer": null, "parents": [{"sha": "7c5b92c45918f8070db926d4004b4f9ce89a4830", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c5b92c45918f8070db926d4004b4f9ce89a4830", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c5b92c45918f8070db926d4004b4f9ce89a4830"}], "stats": {"total": 185, "additions": 85, "deletions": 100}, "files": [{"sha": "76ad08d1a59016691dc128e25fe4a93769157a08", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5fa9abc3e9676702f2c1699ee4283773b1bf8de1", "patch": "@@ -1,3 +1,23 @@\n+2001-03-26  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/basic_file.h (get_fileno): Remove.\n+\t(_M_fileno): Remove.\n+\t(_M_cfile_created): Add.\n+\t(basic_file::basic_file(__c_file_type*, openmode): Add.\n+\t(basic_file::basic_file(int, const char*, openmode): Remove.\n+\t* include/bits/fstream.tcc (basic_fstream::basic_filebuf(int __fd,\n+\tconst char*, ios_base::openmode): Don't allocate\n+\tinternal buffers. Turn off internal buffers.\n+\t(basic_filebuf::overflow): Remove test for null buffer.\n+\t(basic_filebuf::_M_really_overflow): Same. Allow unbuffered use.\n+\t* include/bits/streambuf.cc: Tweak.\n+\t* include/bits/std_ostream.h: Tweak.\n+\t* config/basic_file_libio.h: Same.\n+\t* config/basic_file_stdio.h: Same.\n+\t* src/ios.cc (ios_base::Init::Init()): Unbuffer stdout by default.\n+\t* testsuite/27_io/filebuf_members.cc: Tweaks.\n+\t* testsuite/27_io/ios_base_members_static.cc: Tweaks.\t\n+\t\n 2001-03-24  Phil Edwards  <pme@sources.redhat.com>\n \n \t* Makefile.am:  New targets, doxygen and doxygen-maint."}, {"sha": "4c6591fd9f64813a5caec269d5cd029b26207cdf", "filename": "libstdc++-v3/config/basic_file_libio.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_libio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_libio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_libio.h?ref=5fa9abc3e9676702f2c1699ee4283773b1bf8de1", "patch": "@@ -127,12 +127,6 @@ namespace std\n     __basic_file<wchar_t>::doallocate();\n #endif\n \n-  // Generic definitions for __basic_file\n-  template<typename _CharT>\n-    int \n-    __basic_file<_CharT>::get_fileno(void)\n-    { return _fileno; }\n- \n   template<typename _CharT>\n     __basic_file<_CharT>::~__basic_file()\n     { _IO_file_finish(this, 0); }\n@@ -189,9 +183,11 @@ namespace std\n   \n   template<typename _CharT>\n     __basic_file<_CharT>*\n-    __basic_file<_CharT>::sys_open(int __fd, ios_base::openmode __mode) \n+    __basic_file<_CharT>::sys_open(__c_file_type* __f, \n+\t\t\t\t   ios_base::openmode __mode) \n     {\n       __basic_file* __ret = NULL;\n+      int __fd = fileno(__f);\n       int __p_mode = 0;\n       int __rw_mode = _IO_NO_READS + _IO_NO_WRITES; \n       char __c_mode[4];\n@@ -201,7 +197,7 @@ namespace std\n       if (!_IO_file_is_open(this))\n \t{\n \t  _fileno = __fd;\n-\t  _flags &= ~(_IO_NO_READS+_IO_NO_WRITES);\n+\t  _flags &= ~(_IO_NO_READS + _IO_NO_WRITES);\n \t  _flags |= _IO_DELETE_DONT_CLOSE;\n \t  _offset = _IO_pos_BAD;\n \t  int __mask = _IO_NO_READS + _IO_NO_WRITES + _IO_IS_APPENDING;"}, {"sha": "920a7d36ccf7cf4e328d906966f3612795bbfefa", "filename": "libstdc++-v3/config/basic_file_stdio.h", "status": "modified", "additions": 10, "deletions": 28, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_stdio.h?ref=5fa9abc3e9676702f2c1699ee4283773b1bf8de1", "patch": "@@ -38,13 +38,8 @@ namespace std\n   // Generic definitions for __basic_file\n   template<typename _CharT>\n     __basic_file<_CharT>::__basic_file(__c_lock* /*__lock*/) \n-    : _M_fileno(-1), _M_cfile(NULL) { }\n+    : _M_cfile(NULL), _M_cfile_created(false) { }\n \n-  template<typename _CharT>\n-    int \n-    __basic_file<_CharT>::get_fileno(void)\n-    { return _M_fileno; }\n- \n   template<typename _CharT>\n     __basic_file<_CharT>::~__basic_file()\n     {\n@@ -85,24 +80,15 @@ namespace std\n   \n   template<typename _CharT>\n     __basic_file<_CharT>*\n-    __basic_file<_CharT>::sys_open(int __fd, ios_base::openmode __mode) \n+    __basic_file<_CharT>::sys_open(__c_file_type* __file, ios_base::openmode) \n     {\n       __basic_file* __ret = NULL;\n-      int __p_mode = 0;\n-      int __rw_mode = 0;\n-      char __c_mode[4];\n \n-      _M_open_mode(__mode, __p_mode, __rw_mode, __c_mode);\n-\n-      int __dupfd = dup(__fd);\n-\n-      if (__dupfd != -1 && !this->is_open())\n+      if (!this->is_open() && __file)\n \t{\n-\t  if ((_M_cfile = fdopen(__dupfd, __c_mode)))\n-\t    {\n-\t      _M_fileno = __dupfd;\n-\t      __ret = this;\n-\t    }\n+\t  _M_cfile = __file;\n+\t  _M_cfile_created = false;\n+\t  __ret = this;\n \t}\n \n       return __ret;\n@@ -124,7 +110,7 @@ namespace std\n \t{\n \t  if ((_M_cfile = fopen(__name, __c_mode)))\n \t    {\n-\t      _M_fileno = fileno(_M_cfile);\n+\t      _M_cfile_created = true;\n \t      __ret = this;\n \t    }\n \t}\n@@ -133,19 +119,15 @@ namespace std\n   \n   template<typename _CharT>\n     bool \n-    __basic_file<_CharT>::is_open() { return _M_fileno >= 0; }\n+    __basic_file<_CharT>::is_open() { return _M_cfile != 0; }\n   \n   template<typename _CharT>\n     __basic_file<_CharT>* \n     __basic_file<_CharT>::close()\n     { \n       __basic_file* __retval = static_cast<__basic_file*>(NULL);\n-      bool __testopen = fclose(_M_cfile);\n-      if (!__testopen)\n-\t{\n-\t  __retval = this;\n-\t  _M_fileno = -1;\n-\t}  \n+      if (_M_cfile_created && fclose(_M_cfile))\n+\t__retval = this;\n       return __retval;\n     }\n  "}, {"sha": "cc41d5bb71d5cfb0f73326c0149751e523106156", "filename": "libstdc++-v3/include/bits/basic_file.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h?ref=5fa9abc3e9676702f2c1699ee4283773b1bf8de1", "patch": "@@ -121,8 +121,8 @@ namespace std\n #endif\n     {\n #if _GLIBCPP_BASIC_FILE_ENCAPSULATION\n-      int \t\t_M_fileno;\n       __c_file_type* \t_M_cfile;\n+      bool \t\t_M_cfile_created;\n #else\n # ifdef _GLIBCPP_USE_WCHAR_T\n       __c_wfile_type\t_M_wfile;\n@@ -145,17 +145,14 @@ namespace std\n       // just sets __c_file_type->_fileno and the respective _flags bits, and\n       // returns.\n       __basic_file*\n-      sys_open(int __fd, ios_base::openmode __mode);\n+      sys_open(__c_file_type* __file, ios_base::openmode __mode);\n \n       __basic_file* \n       close(); \n \n       bool \n       is_open();\n \n-      // Needed by ios_base::sync_with_stdio.\n-      int get_fileno(void);\n-\n       // NB: Must match FILE specific jump table starting here--this\n       // means all virtual functions starting with the dtor must match,\n       // slot by slot. For glibc-based dystems, this means the _IO_FILE\n@@ -247,4 +244,3 @@ namespace std\n #include <bits/basic_file_model.h>\n \n #endif\t// _CPP_BASIC_FILE\n-"}, {"sha": "93fe7a1680513ed816303fe28c6dae187e110ddb", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=5fa9abc3e9676702f2c1699ee4283773b1bf8de1", "patch": "@@ -90,24 +90,14 @@ namespace std\n \n   template<typename _CharT, typename _Traits>\n     basic_filebuf<_CharT, _Traits>::\n-    basic_filebuf(int __fd, const char* /*__name*/, ios_base::openmode __mode)\n+    basic_filebuf(__c_file_type* __f, ios_base::openmode __mode)\n     : __streambuf_type(),  _M_file(NULL), _M_state_cur(__state_type()), \n     _M_state_beg(__state_type()), _M_last_overflowed(false)\n     {\n       _M_filebuf_init();\n-      _M_file->sys_open(__fd, __mode);\n+      _M_file->sys_open(__f, __mode);\n       if (this->is_open())\n-\t{\n-\t  _M_allocate_buffers();\n-\t  _M_mode = __mode;\n-\n-\t  // XXX So that istream::getc() will only need to get 1 char,\n-\t  // as opposed to BUF_SIZE.\n-\t  if (__fd == 0)\n-\t    _M_buf_size = 1;\n-\n-\t  this->_M_set_indeterminate();\n-\t}\n+\t_M_mode = __mode;\n    }\n \n   template<typename _CharT, typename _Traits>\n@@ -382,12 +372,12 @@ namespace std\n     overflow(int_type __c)\n     {\n       int_type __ret = traits_type::eof();\n-      bool __testpos = _M_out_cur && _M_out_cur >= _M_buf + _M_buf_size;\n+      bool __testput = _M_out_cur && _M_out_cur < _M_buf + _M_buf_size;\n       bool __testout = _M_mode & ios_base::out;\n       \n       if (__testout)\n \t{\n-\t  if (!__testpos)\n+\t  if (__testput)\n \t    {\n \t      *_M_out_cur = traits_type::to_char_type(__c);\n \t      _M_out_cur_move(1);\n@@ -408,20 +398,24 @@ namespace std\n     {\n       int_type __ret = traits_type::eof();\n       bool __testput = _M_out_cur && _M_out_beg < _M_out_end;\n-      \n-      if (__testput)\n+      bool __testunbuffered = _M_file && !_M_buf_size;\n+\n+      if (__testput || __testunbuffered)\n \t{\n-\t  bool __testeof = traits_type::eq_int_type(__c, traits_type::eof());\n #if 1\n \t  int __plen = _M_out_end - _M_out_beg;\n-\t  streamsize __len = _M_file->xsputn(_M_out_beg, __plen);\n-\t  if (!__testeof)\n+\t  streamsize __len = 0;\n+\n+\t  if (__plen)\n+\t    __len = _M_file->xsputn(_M_out_beg, __plen);\n+\n+\t  if (__c !=traits_type::eof())\n \t    {\n-\t      char_type __pending = traits_type::to_char_type(__c);\n-\t      __len += _M_file->xsputn(&__pending, 1);\n-\t      ++__plen;\n+ \t      char_type __pending = traits_type::to_char_type(__c);\n+ \t      __len += _M_file->xsputn(&__pending, 1);\n+  \t      ++__plen;\n \t    }\n-\t  traits_type::to_char_type(__c);\n+\n \t  // NB: Need this so that external byte sequence reflects\n \t  // internal buffer.\n \t  _M_file->sync();"}, {"sha": "d715c23c6ad5e171a0052ee952ef6776306ce300", "filename": "libstdc++-v3/include/bits/std_fstream.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_fstream.h?ref=5fa9abc3e9676702f2c1699ee4283773b1bf8de1", "patch": "@@ -42,8 +42,8 @@\n #include <bits/std_locale.h>\t// For codecvt\n #include <bits/c++threads.h>\t// For __mutext_type\n \n-namespace std {\n-\n+namespace std \n+{\n   template<typename _CharT, typename _Traits>\n     class basic_filebuf : public basic_streambuf<_CharT, _Traits>\n     {\n@@ -86,8 +86,8 @@ namespace std {\n       basic_filebuf();\n \n       // Non-standard ctor:\n-      basic_filebuf(int __fd, const char* __name, ios_base::openmode __mode);\n-\n+      basic_filebuf(__c_file_type* __f, ios_base::openmode __mode);\n+ \n       virtual \n       ~basic_filebuf() \n       { \n@@ -399,7 +399,6 @@ namespace std {\n \t  setstate (ios_base::failbit); \n       }\n     };\n-\n } // namespace std\n \n \n@@ -410,5 +409,5 @@ namespace std {\n #endif\n #endif\n \n-#endif\t/* _CPP_FSTREAM */\n+#endif\t\n "}, {"sha": "5719854ea545f8b00f70aa1ed1fe0d9d314c544a", "filename": "libstdc++-v3/include/bits/std_ostream.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ostream.h?ref=5fa9abc3e9676702f2c1699ee4283773b1bf8de1", "patch": "@@ -281,3 +281,4 @@ namespace std\n #endif\n \n #endif\t/* _CPP_OSTREAM */\n+"}, {"sha": "fc26232a32cb5e61c69c05d86471fdbc791ac0e9", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=5fa9abc3e9676702f2c1699ee4283773b1bf8de1", "patch": "@@ -131,10 +131,13 @@ namespace std {\n \t  if (__ret < __n)\n \t    {\n \t      int_type __c = this->uflow();  \n-\t      if (traits_type::eq_int_type(__c, traits_type::eof()))\n+\t      if (__c != traits_type::eof())\n+\t\t{\n+\t\t  traits_type::assign(*__s++, traits_type::to_char_type(__c));\n+\t\t  ++__ret;\n+\t\t}\n+\t      else\n \t\tbreak;\n-\t      traits_type::assign(*__s++, traits_type::to_char_type(__c));\n-\t      ++__ret;\n \t    }\n \t}\n       return __ret;\n@@ -166,12 +169,14 @@ namespace std {\n \n \t  if (__ret < __n)\n \t    {\n-\t      int_type __c = traits_type::to_int_type(*__s);\n-\t      int_type __overfc = this->overflow(__c);\n-\t      if (traits_type::eq_int_type(__overfc, traits_type::eof()))\n+\t      int_type __c = this->overflow(traits_type::to_int_type(*__s));\n+\t      if (__c != traits_type::eof())\n+\t\t{\n+\t\t  ++__ret;\n+\t\t  ++__s;\n+\t\t}\n+\t      else\n \t\tbreak;\n-\t      ++__ret;\n-\t      ++__s;\n \t    }\n \t}\n       return __ret;"}, {"sha": "89264014820a1229f6d0b0c3e026b2a0de6ed2e8", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=5fa9abc3e9676702f2c1699ee4283773b1bf8de1", "patch": "@@ -140,9 +140,9 @@ namespace std\n \t// NB: std_iostream.h creates the four standard files with\n \t// NULL buffers. At this point, we swap out these placeholder\n \t// objects for the properly-constructed ones\n-       \t_M_cout = new filebuf(1, \"stdout\", ios_base::out);\n-\t_M_cin = new filebuf(0, \"stdin\", ios_base::in);\n-\t_M_cerr = new filebuf(2, \"stderr\", ios_base::out);\n+       \t_M_cout = new filebuf(stdout, ios_base::out);\n+\t_M_cin = new filebuf(stdin, ios_base::in);\n+\t_M_cerr = new filebuf(stderr, ios_base::out);\n \tnew (&cout) ostream(_M_cout);\n \tnew (&cin) istream(_M_cin);\n \tnew (&cerr) ostream(_M_cerr);\n@@ -151,9 +151,9 @@ namespace std\n \tcerr.flags(ios_base::unitbuf);\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n-\t_M_wcout = new wfilebuf(1, \"stdout\", ios_base::out);\n-\t_M_wcin = new wfilebuf(0, \"stdin\", ios_base::in);\n-\t_M_wcerr = new wfilebuf(2, \"stderr\", ios_base::out);\n+\t_M_wcout = new wfilebuf(stdout, ios_base::out);\n+\t_M_wcin = new wfilebuf(stdin, ios_base::in);\n+\t_M_wcerr = new wfilebuf(stderr, ios_base::out);\n \tnew (&wcout) wostream(_M_wcout);\n \tnew (&wcin) wistream(_M_wcin);\n \tnew (&wcerr) wostream(_M_wcerr);"}, {"sha": "ecb5ae02dd3f907244aa20ee6d9dba13f456eb7d", "filename": "libstdc++-v3/testsuite/27_io/filebuf_members.cc", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc?ref=5fa9abc3e9676702f2c1699ee4283773b1bf8de1", "patch": "@@ -49,28 +49,24 @@ test_01()\n   int close_num;\n \n   // read (ext)\n-  int fd = open(name_01, O_RDONLY);\n-  VERIFY( fd >= 0 );\n-\n+  FILE* f2 = fopen(name_01, \"r\");\n+  VERIFY( f2 != NULL );\n   {\n-    std::filebuf fb(fd, \"double_read\", std::ios_base::in);\n+    std::filebuf fb(f2, std::ios_base::in);\n   }\n-  \n-  close_num = close(fd);\n+  close_num = fclose(f2);\n   VERIFY( close_num == 0 );\n \n \n   // read (standard)\n   FILE* f = fopen(name_01, \"r\");\n   VERIFY( f != NULL );\n-\n   {\n     std::ifstream ifstream1(name_01);\n     VERIFY( ifstream1.is_open() );\n     std::ios_base::iostate st01 = ifstream1.rdstate();\n     VERIFY( st01 == std::ios_base::goodbit );\n   }\n-  \n   close_num = fclose(f);\n   VERIFY( close_num == 0 );\n "}, {"sha": "ab6d48e26a2b74e48851ab20d09d058d90355e60", "filename": "libstdc++-v3/testsuite/27_io/ios_base_members_static.cc", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base_members_static.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa9abc3e9676702f2c1699ee4283773b1bf8de1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base_members_static.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base_members_static.cc?ref=5fa9abc3e9676702f2c1699ee4283773b1bf8de1", "patch": "@@ -36,23 +36,19 @@ void\n test01()\n {\n   std::ios_base::sync_with_stdio();\n- \n   std::freopen(\"ios_base_members_static-1.txt\", \"w\", stdout);\n  \n   for (int i = 0; i < 2; i++)\n     {\n       std::printf(\"1\");\n       std::cout << \"2\";\n-      std::putc('3', stdout); // std::stdout doesn't work here\n+      std::putc('3', stdout); \n       std::cout << '4';\n       std::fputs(\"5\", stdout);\n       std::cout << 6;\n       std::putchar('7');\n       std::cout << 8 << '9';\n-      if (i)\n-\tstd::printf (\"0\\n\");\n-      else\n-\tstd::cout << \"0\" << std::endl;\n+      std::printf(\"0\\n\");\n     }\n }\n "}]}