{"sha": "c93fa3ca7e35769e5ca2fb13240d4a13f7f12cbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkzZmEzY2E3ZTM1NzY5ZTVjYTJmYjEzMjQwZDRhMTNmN2YxMmNiZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-01-19T23:42:55Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-01-19T23:42:55Z"}, "message": "re PR libstdc++/55861 ([C++11] `std::shared_future::get' is not const-qualified)\n\n\tPR libstdc++/55861\n\t* include/std/future (_State_base::_S_check(const shared_ptr<T>&)):\n\tFix return type.\n\t(__basic_future::_M_get_result()): Const qualify.\n\t(shared_future::get()): Likewise.\n\t* testsuite/30_threads/shared_future/members/get.cc: Use const\n\tobjects.\n\nFrom-SVN: r195314", "tree": {"sha": "c75d5146bb87cbb6490b36276caa5a46692e2159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c75d5146bb87cbb6490b36276caa5a46692e2159"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c93fa3ca7e35769e5ca2fb13240d4a13f7f12cbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c93fa3ca7e35769e5ca2fb13240d4a13f7f12cbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c93fa3ca7e35769e5ca2fb13240d4a13f7f12cbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c93fa3ca7e35769e5ca2fb13240d4a13f7f12cbf/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3122f3b1b8ca6df1ddf839b1f91b4d3034a14cde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3122f3b1b8ca6df1ddf839b1f91b4d3034a14cde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3122f3b1b8ca6df1ddf839b1f91b4d3034a14cde"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "e8ccef0b5ebad8c4296707012132dde340d890cf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c93fa3ca7e35769e5ca2fb13240d4a13f7f12cbf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c93fa3ca7e35769e5ca2fb13240d4a13f7f12cbf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c93fa3ca7e35769e5ca2fb13240d4a13f7f12cbf", "patch": "@@ -1,3 +1,13 @@\n+2013-01-19  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/55861\n+\t* include/std/future (_State_base::_S_check(const shared_ptr<T>&)):\n+\tFix return type.\n+\t(__basic_future::_M_get_result()): Const qualify.\n+\t(shared_future::get()): Likewise.\n+\t* testsuite/30_threads/shared_future/members/get.cc: Use const\n+\tobjects.\n+\n 2013-01-16  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/55043 (again)"}, {"sha": "6cccd3d3f2a17983da8edd62466ba8f7c75c0e3e", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c93fa3ca7e35769e5ca2fb13240d4a13f7f12cbf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c93fa3ca7e35769e5ca2fb13240d4a13f7f12cbf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=c93fa3ca7e35769e5ca2fb13240d4a13f7f12cbf", "patch": "@@ -1,6 +1,6 @@\n // <future> -*- C++ -*-\n \n-// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2013 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -447,7 +447,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __setter(promise<void>* __prom);\n \n       template<typename _Tp>\n-        static bool\n+        static void\n         _S_check(const shared_ptr<_Tp>& __p)\n         {\n           if (!static_cast<bool>(__p))\n@@ -583,7 +583,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     protected:\n       /// Wait for the state to be ready and rethrow any stored exception\n       __result_type\n-      _M_get_result()\n+      _M_get_result() const\n       {\n         _State_base::_S_check(_M_state);\n         _Result_base& __res = _M_state->wait();\n@@ -794,12 +794,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /// Retrieving the value\n       const _Res&\n-      get()\n-      {\n-\ttypename _Base_type::__result_type __r = this->_M_get_result();\n-\t_Res& __rs(__r._M_value());\n-\treturn __rs;\n-      }\n+      get() const { return this->_M_get_result()._M_value(); }\n     };\n \n   /// Partial specialization for shared_future<R&>\n@@ -838,7 +833,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /// Retrieving the value\n       _Res&\n-      get() { return this->_M_get_result()._M_get(); }\n+      get() const { return this->_M_get_result()._M_get(); }\n     };\n \n   /// Explicit specialization for shared_future<void>\n@@ -877,7 +872,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Retrieving the value\n       void\n-      get() { this->_M_get_result(); }\n+      get() const { this->_M_get_result(); }\n     };\n \n   // Now we can define the protected __basic_future constructors."}, {"sha": "9d2628dff62310f16a9b634889280aedff4aa163", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/members/get.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c93fa3ca7e35769e5ca2fb13240d4a13f7f12cbf/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fget.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c93fa3ca7e35769e5ca2fb13240d4a13f7f12cbf/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fget.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fget.cc?ref=c93fa3ca7e35769e5ca2fb13240d4a13f7f12cbf", "patch": "@@ -6,7 +6,7 @@\n // { dg-require-gthreads \"\" }\n // { dg-require-atomic-builtins \"\" }\n \n-// Copyright (C) 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2013 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,7 +34,7 @@ void test01()\n   bool test __attribute__((unused)) = true;\n \n   std::promise<int> p1;\n-  std::shared_future<int> f1(p1.get_future());\n+  const std::shared_future<int> f1(p1.get_future());\n   std::shared_future<int> f2(f1);\n \n   p1.set_value(value);\n@@ -47,7 +47,7 @@ void test02()\n   bool test __attribute__((unused)) = true;\n \n   std::promise<int&> p1;\n-  std::shared_future<int&> f1(p1.get_future());\n+  const std::shared_future<int&> f1(p1.get_future());\n   std::shared_future<int&> f2(f1);\n \n   p1.set_value(value);\n@@ -60,7 +60,7 @@ void test03()\n   bool test __attribute__((unused)) = true;\n \n   std::promise<void> p1;\n-  std::shared_future<void> f1(p1.get_future());\n+  const std::shared_future<void> f1(p1.get_future());\n   std::shared_future<void> f2(f1);\n \n   p1.set_value();"}]}