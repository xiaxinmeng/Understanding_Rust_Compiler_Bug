{"sha": "679be32e66428f0ba81d1c1b55f7bd47f01cb295", "node_id": "C_kwDOANBUbNoAKDY3OWJlMzJlNjY0MjhmMGJhODFkMWMxYjU1ZjdiZDQ3ZjAxY2IyOTU", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-04T09:20:46Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-04T14:18:18Z"}, "message": "Set nonzero bits for multiplication and divisions by a power of 2.\n\nWe're missing a lot of TLC in keeping track of nonzero bits across\nrange-ops.  It isn't an oversight, but just limited amount of hours to\nimplement stuff.\n\nThis patch keeps better track of the nonzero mask (really\nmaybe_nonzero bits as discussed) across multiplication and division\nwhen the RHS is a power of 2.\n\nIt fixes PR107342 and also touches on PR55157.  In the latter, the\nnonzero mask is being set quite late (CCP2) but could be set by evrp\ntime if we enhanced range-ops.  I have added tests from both PRs.\n\nTested\n\n\tPR tree-optimization/107342\n\ngcc/ChangeLog:\n\n\t* range-op.cc (operator_mult::fold_range): New.\n\t(operator_div::fold_range): New.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/tree-ssa/vrp122.c: New test.\n\t* gcc.dg/tree-ssa/vrp123.c: New test.", "tree": {"sha": "1f0f72dae83381e8c67ce106a470fef92043f39b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f0f72dae83381e8c67ce106a470fef92043f39b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/679be32e66428f0ba81d1c1b55f7bd47f01cb295", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/679be32e66428f0ba81d1c1b55f7bd47f01cb295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/679be32e66428f0ba81d1c1b55f7bd47f01cb295", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/679be32e66428f0ba81d1c1b55f7bd47f01cb295/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "25c004d8287d6b2fc9422f9e5dca079f1c6c4fb8", "filename": "gcc/range-op.cc", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/679be32e66428f0ba81d1c1b55f7bd47f01cb295/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/679be32e66428f0ba81d1c1b55f7bd47f01cb295/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=679be32e66428f0ba81d1c1b55f7bd47f01cb295", "patch": "@@ -1742,9 +1742,13 @@ cross_product_operator::wi_cross_product (irange &r, tree type,\n \n class operator_mult : public cross_product_operator\n {\n+  using range_operator::fold_range;\n   using range_operator::op1_range;\n   using range_operator::op2_range;\n public:\n+  virtual bool fold_range (irange &r, tree type,\n+\t\t\t   const irange &lh, const irange &rh,\n+\t\t\t   relation_trio = TRIO_VARYING) const final override;\n   virtual void wi_fold (irange &r, tree type,\n \t\t        const wide_int &lh_lb,\n \t\t        const wide_int &lh_ub,\n@@ -1762,6 +1766,32 @@ class operator_mult : public cross_product_operator\n \t\t\t  relation_trio) const;\n } op_mult;\n \n+bool\n+operator_mult::fold_range (irange &r, tree type,\n+\t\t\t   const irange &lh, const irange &rh,\n+\t\t\t   relation_trio trio) const\n+{\n+  if (!cross_product_operator::fold_range (r, type, lh, rh, trio))\n+    return false;\n+\n+  if (lh.undefined_p ())\n+    return true;\n+\n+  tree t;\n+  if (rh.singleton_p (&t))\n+    {\n+      wide_int w = wi::to_wide (t);\n+      int shift = wi::exact_log2 (w);\n+      if (shift != -1)\n+\t{\n+\t  wide_int nz = lh.get_nonzero_bits ();\n+\t  nz = wi::lshift (nz, shift);\n+\t  r.set_nonzero_bits (nz);\n+\t}\n+    }\n+  return true;\n+}\n+\n bool\n operator_mult::op1_range (irange &r, tree type,\n \t\t\t  const irange &lhs, const irange &op2,\n@@ -1902,10 +1932,39 @@ class operator_div : public cross_product_operator\n \t\t        const wide_int &rh_ub) const;\n   virtual bool wi_op_overflows (wide_int &res, tree type,\n \t\t\t\tconst wide_int &, const wide_int &) const;\n+  virtual bool fold_range (irange &r, tree type,\n+\t\t\t   const irange &lh, const irange &rh,\n+\t\t\t   relation_trio trio) const final override;\n private:\n   enum tree_code code;\n };\n \n+bool\n+operator_div::fold_range (irange &r, tree type,\n+\t\t\t  const irange &lh, const irange &rh,\n+\t\t\t  relation_trio trio) const\n+{\n+  if (!cross_product_operator::fold_range (r, type, lh, rh, trio))\n+    return false;\n+\n+  if (lh.undefined_p ())\n+    return true;\n+\n+  tree t;\n+  if (rh.singleton_p (&t))\n+    {\n+      wide_int wi = wi::to_wide (t);\n+      int shift = wi::exact_log2 (wi);\n+      if (shift != -1)\n+\t{\n+\t  wide_int nz = lh.get_nonzero_bits ();\n+\t  nz = wi::rshift (nz, shift, TYPE_SIGN (type));\n+\t  r.set_nonzero_bits (nz);\n+\t}\n+    }\n+  return true;\n+}\n+\n bool\n operator_div::wi_op_overflows (wide_int &res, tree type,\n \t\t\t       const wide_int &w0, const wide_int &w1) const"}, {"sha": "b2ddcda023c3a5490fe91a00a4b0c72a97b63040", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp122.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/679be32e66428f0ba81d1c1b55f7bd47f01cb295/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp122.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/679be32e66428f0ba81d1c1b55f7bd47f01cb295/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp122.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp122.c?ref=679be32e66428f0ba81d1c1b55f7bd47f01cb295", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -fdump-tree-evrp-details\" }\n+\n+void gg(void);\n+int f(unsigned t)\n+{\n+  unsigned g = t*16;\n+  if (g==0)  return 1;\n+  gg();\n+  gg();\n+  gg();\n+  gg();\n+  gg();\n+  gg();\n+  if (g<=4)  return 1;\n+  return 0;\n+}\n+\n+// { dg-final { scan-tree-dump \"Global Exported: g_.* NONZERO 0x.*fff0\" \"evrp\" } }"}, {"sha": "1ad3caa43841a6d8fbeb320d3a124c5ee616d258", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp123.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/679be32e66428f0ba81d1c1b55f7bd47f01cb295/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp123.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/679be32e66428f0ba81d1c1b55f7bd47f01cb295/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp123.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp123.c?ref=679be32e66428f0ba81d1c1b55f7bd47f01cb295", "patch": "@@ -0,0 +1,18 @@\n+// { dg-options \"-O1 -fdump-tree-dom3-raw\" }\n+\n+extern int\n+__attribute__((const))\n+foo4b (int);\n+\n+int f4b (unsigned int r)\n+{\n+  if (foo4b (r))\n+    r *= 8U;\n+\n+  if ((r / 2U) & 2U)\n+    r += foo4b (r);\n+\n+  return r;\n+}\n+\n+// { dg-final { scan-tree-dump-times {gimple_call <foo4b,} 1 dom3 } }"}]}