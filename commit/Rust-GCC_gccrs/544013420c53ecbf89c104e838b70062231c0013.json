{"sha": "544013420c53ecbf89c104e838b70062231c0013", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ0MDEzNDIwYzUzZWNiZjg5YzEwNGU4MzhiNzAwNjIyMzFjMDAxMw==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2002-03-16T08:00:45Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2002-03-16T08:00:45Z"}, "message": "mips.md (movdf_internal2): Add two new move constraints.\n\n2002-03-15  Eric Christopher  <echristo@redhat.com>\n\n\t* config/mips/mips.md (movdf_internal2): Add two new move constraints.\n\tFix register preference on last change.\n\t* config/mips/mips.c (mips_return_in_memory): New function.\n\t* config/mips/mips.h (RETURN_IN_MEMORY): Use.\n\t* config/mips/mips-protos.h: Declare.\n\t* config/mips/abi64.h (RETURN_IN_MEMORY): Remove. Add to above.\n\t* config/mips/elf64.h: Add #ifndef/#endif brackets around defaults.\n\nFrom-SVN: r50869", "tree": {"sha": "34c13e144ae365f962c9a689a613a4820b9b0e6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34c13e144ae365f962c9a689a613a4820b9b0e6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/544013420c53ecbf89c104e838b70062231c0013", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/544013420c53ecbf89c104e838b70062231c0013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/544013420c53ecbf89c104e838b70062231c0013", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/544013420c53ecbf89c104e838b70062231c0013/comments", "author": null, "committer": null, "parents": [{"sha": "1ac458d486151d10d80e8db73c768b49a00f3680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ac458d486151d10d80e8db73c768b49a00f3680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ac458d486151d10d80e8db73c768b49a00f3680"}], "stats": {"total": 49, "additions": 32, "deletions": 17}, "files": [{"sha": "42ea208855a6421f3d1a9e58c1e3cadb8db91108", "filename": "gcc/config/mips/abi64.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544013420c53ecbf89c104e838b70062231c0013/gcc%2Fconfig%2Fmips%2Fabi64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544013420c53ecbf89c104e838b70062231c0013/gcc%2Fconfig%2Fmips%2Fabi64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fabi64.h?ref=544013420c53ecbf89c104e838b70062231c0013", "patch": "@@ -99,18 +99,6 @@ Boston, MA 02111-1307, USA.  */\n \t   && (FUNCTION_ARG_PADDING (MODE, TYPE)\t\\\n \t       == (BYTES_BIG_ENDIAN ? upward : downward)))))\n \n-/* Under the old (i.e., 32 and O64 ABIs) all BLKmode objects are\n-   returned in memory.  Under the new (N32 and 64-bit MIPS ABIs) small\n-   structures are returned in a register.  Objects with varying size\n-   must still be returned in memory, of course.  */\n-#undef RETURN_IN_MEMORY\n-#define RETURN_IN_MEMORY(TYPE)\t\t\t\t\t\t \\\n-  ((mips_abi == ABI_32 || mips_abi == ABI_O64)\t\t\t\t \\\n-   ? TYPE_MODE (TYPE) == BLKmode\t\t\t\t\t \\\n-   : ((int_size_in_bytes (TYPE)\t\t\t\t\t\t \\\n-       > (2 * UNITS_PER_WORD)) \t\t\t\t\t\t \\\n-      || (int_size_in_bytes (TYPE) == -1)))\n-\n #undef FUNCTION_VALUE\n #define FUNCTION_VALUE(VALTYPE, FUNC)\tmips_function_value (VALTYPE, FUNC)\n "}, {"sha": "f0ac8133cfe1a783518371c1a417b12bd5924daa", "filename": "gcc/config/mips/elf64.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544013420c53ecbf89c104e838b70062231c0013/gcc%2Fconfig%2Fmips%2Felf64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544013420c53ecbf89c104e838b70062231c0013/gcc%2Fconfig%2Fmips%2Felf64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf64.h?ref=544013420c53ecbf89c104e838b70062231c0013", "patch": "@@ -22,11 +22,18 @@ Boston, MA 02111-1307, USA.  */\n #define OBJECT_FORMAT_ELF\n \n /* Default to -mips3.  */\n+#ifndef TARGET_DEFAULT\n #define TARGET_DEFAULT MASK_FLOAT64|MASK_64BIT\n+#endif\n+\n+#ifndef MIPS_ISA_DEFAULT\n #define MIPS_ISA_DEFAULT 3\n+#endif\n \n /* This should change to n32 when it is supported in gas.  */\n+#ifndef MIPS_ABI_DEFAULT\n #define MIPS_ABI_DEFAULT ABI_O64\n+#endif\n \n /* Until we figure out what MIPS ELF targets normally use, just do\n    stabs in ELF.  */"}, {"sha": "e8b83bc13953c49e36e421889f15dccd60add805", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544013420c53ecbf89c104e838b70062231c0013/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544013420c53ecbf89c104e838b70062231c0013/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=544013420c53ecbf89c104e838b70062231c0013", "patch": "@@ -53,6 +53,8 @@ extern struct rtx_def  *mips_function_value PARAMS ((tree, tree));\n \n extern unsigned int\tmips_hard_regno_nregs PARAMS ((int,\n \t\t\t\t\t\t       enum machine_mode));\n+extern int              mips_return_in_memory PARAMS ((tree));\n+\n extern struct rtx_def  *function_arg PARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t      enum machine_mode, tree, int));\n extern void\t\tfunction_arg_advance PARAMS ((CUMULATIVE_ARGS *,"}, {"sha": "536f683a3127d37881d1dec430a4c39df39f38bc", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544013420c53ecbf89c104e838b70062231c0013/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544013420c53ecbf89c104e838b70062231c0013/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=544013420c53ecbf89c104e838b70062231c0013", "patch": "@@ -10035,6 +10035,24 @@ mips_hard_regno_nregs (regno, mode)\n     return ((GET_MODE_SIZE (mode) + UNITS_PER_FPREG - 1) / UNITS_PER_FPREG);\n }\n \n+int\n+mips_return_in_memory (type)\n+     tree type;\n+{\n+  /* Under the old (i.e., 32 and O64 ABIs) all BLKmode objects are\n+     returned in memory.  Under the new (N32 and 64-bit MIPS ABIs) small\n+     structures are returned in a register.  Objects with varying size\n+     must still be returned in memory, of course.  */\n+\n+  if (mips_abi == ABI_32 || mips_abi == ABI_O64)\n+    return (TYPE_MODE (type) == BLKmode);\n+  else\n+    return ((int_size_in_bytes (type) > (2 * UNITS_PER_WORD))\n+\t    || (int_size_in_bytes (type) == -1));\n+}\n+\n+\n+\n \f\n #ifdef TARGET_IRIX6\n /* Output assembly to switch to section NAME with attribute FLAGS.  */"}, {"sha": "28ab83c2123531a70b5f447ff872ba289c25c9b5", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544013420c53ecbf89c104e838b70062231c0013/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544013420c53ecbf89c104e838b70062231c0013/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=544013420c53ecbf89c104e838b70062231c0013", "patch": "@@ -2751,7 +2751,7 @@ extern struct mips_frame_info current_frame_info;\n    to give us MIPS cc compatibility.  */\n \n #define RETURN_IN_MEMORY(TYPE)\t\\\n-  (TYPE_MODE (TYPE) == BLKmode)\n+\tmips_return_in_memory (TYPE)\n \f\n \n #define TARGET_FLOAT_FORMAT IEEE_FLOAT_FORMAT"}, {"sha": "c31bc70a28ad1401afbc3c045e8da90828dac904", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544013420c53ecbf89c104e838b70062231c0013/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544013420c53ecbf89c104e838b70062231c0013/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=544013420c53ecbf89c104e838b70062231c0013", "patch": "@@ -6286,17 +6286,17 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set_attr \"length\"\t\"4,8,4,4,8,8,8,8,4,8,4,4\")])\n \n (define_insn \"movdf_internal2\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=d,d,d,R,To,*d\")\n-\t(match_operand:DF 1 \"general_operand\" \"dG,R,ToF,d,d,*f\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=d,d,d,R,To,d,f,f\")\n+\t(match_operand:DF 1 \"general_operand\" \"dG,R,ToF,d,d,f,d,f\"))]\n   \"(TARGET_SOFT_FLOAT || TARGET_SINGLE_FLOAT) && !TARGET_MIPS16\n    && (register_operand (operands[0], DFmode)\n        || register_operand (operands[1], DFmode)\n        || (GET_CODE (operands[1]) == CONST_INT && INTVAL (operands[1]) == 0)\n        || operands[1] == CONST0_RTX (DFmode))\"\n   \"* return mips_move_2words (operands, insn); \"\n-  [(set_attr \"type\"\t\"move,load,load,store,store,xfer\")\n+  [(set_attr \"type\"\t\"move,load,load,store,store,xfer,load,move\")\n    (set_attr \"mode\"\t\"DF\")\n-   (set_attr \"length\"\t\"8,8,16,8,16,8\")])\n+   (set_attr \"length\"\t\"8,8,16,8,16,8,8,4\")])\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=d,y,d,d,d,R,To\")"}]}