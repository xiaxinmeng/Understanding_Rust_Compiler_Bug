{"sha": "9479ded4471394acb96ecc73c58b90e8825d2380", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ3OWRlZDQ0NzEzOTRhY2I5NmVjYzczYzU4YjkwZTg4MjVkMjM4MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-04T09:18:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-04T09:18:55Z"}, "message": "[multiple changes]\n\n2012-10-04  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_eval.adb (Fold_Str, Fold_Uint, Fold_Ureal): Reset static\n\texpression state after Resolve call.\n\n2012-10-04  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma. case Warnngs): Don't make entry\n\tin the table for Warnings Off pragmas if within an instance.\n\n2012-10-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch9.adb (Analyze_Entry_Body): Transfer\n\tHas_Pragma_Unreferenced flag from entry formal to corresponding\n\tentity in body, to prevent spurious warnings when pragma is\n\tpresent.\n\n2012-10-04  Robert Dewar  <dewar@adacore.com>\n\n\t* s-bignum.adb (Big_Exp): Raise Storage_Error for ludicrously\n\tlarge results.\n\n2012-10-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Check_Duplicate_Aspects): Diagnose properly\n\taspects that appear in the partial and the full view of a type.\n\n2012-10-04  Robert Dewar  <dewar@adacore.com>\n\n\t* sinfo.ads (N_Return_Statement): Removed.\n\n2012-10-04  Tristan Gingold  <gingold@adacore.com>\n\n\t* init.c (__gl_zero_cost_exceptions): Comment it as not used\n\tanymore.\n\t* bindgen.adb (Gen_Adainit): Do not emit Zero_Cost_Exceptions\n\tanymore.\n\n2012-10-04  Thomas Quinot  <quinot@adacore.com>\n\n\t* prep.adb, prepcomp.adb, gprep.adb, opt.ads: New preprocessor switch\n\t-a (all source text preserved).\n\nFrom-SVN: r192072", "tree": {"sha": "478cd1822976f56c843ab7a4356e4072945b9902", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/478cd1822976f56c843ab7a4356e4072945b9902"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9479ded4471394acb96ecc73c58b90e8825d2380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9479ded4471394acb96ecc73c58b90e8825d2380", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9479ded4471394acb96ecc73c58b90e8825d2380", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9479ded4471394acb96ecc73c58b90e8825d2380/comments", "author": null, "committer": null, "parents": [{"sha": "65f7ed64ca282f4c084499723a96c47085faaab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f7ed64ca282f4c084499723a96c47085faaab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65f7ed64ca282f4c084499723a96c47085faaab8"}], "stats": {"total": 226, "additions": 173, "deletions": 53}, "files": [{"sha": "ac7e28586670f51802af25cb76caa3d4ec132c6e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9479ded4471394acb96ecc73c58b90e8825d2380", "patch": "@@ -1,3 +1,46 @@\n+2012-10-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_eval.adb (Fold_Str, Fold_Uint, Fold_Ureal): Reset static\n+\texpression state after Resolve call.\n+\n+2012-10-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma. case Warnngs): Don't make entry\n+\tin the table for Warnings Off pragmas if within an instance.\n+\n+2012-10-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch9.adb (Analyze_Entry_Body): Transfer\n+\tHas_Pragma_Unreferenced flag from entry formal to corresponding\n+\tentity in body, to prevent spurious warnings when pragma is\n+\tpresent.\n+\n+2012-10-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-bignum.adb (Big_Exp): Raise Storage_Error for ludicrously\n+\tlarge results.\n+\n+2012-10-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Check_Duplicate_Aspects): Diagnose properly\n+\taspects that appear in the partial and the full view of a type.\n+\n+2012-10-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sinfo.ads (N_Return_Statement): Removed.\n+\n+2012-10-04  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* init.c (__gl_zero_cost_exceptions): Comment it as not used\n+\tanymore.\n+\t* bindgen.adb (Gen_Adainit): Do not emit Zero_Cost_Exceptions\n+\tanymore.\n+\n+2012-10-04  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* prep.adb, prepcomp.adb, gprep.adb, opt.ads: New preprocessor switch\n+\t-a (all source text preserved).\n+\n 2012-10-04  Vincent Celier  <celier@adacore.com>\n \n \t* prj-proc.adb (Recursive_Process): Use project directory"}, {"sha": "bb5a0aac9065b8f26521e56ecbbf9fe04a949710", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=9479ded4471394acb96ecc73c58b90e8825d2380", "patch": "@@ -137,7 +137,6 @@ package body Bindgen is\n    --     Num_Interrupt_States          : Integer;\n    --     Unreserve_All_Interrupts      : Integer;\n    --     Exception_Tracebacks          : Integer;\n-   --     Zero_Cost_Exceptions          : Integer;\n    --     Detect_Blocking               : Integer;\n    --     Default_Stack_Size            : Integer;\n    --     Leap_Seconds_Support          : Integer;\n@@ -216,9 +215,6 @@ package body Bindgen is\n    --  tracebacks are provided by default, so a value of zero for this\n    --  parameter does not necessarily mean no trace backs are available.\n \n-   --  Zero_Cost_Exceptions is set to one if zero cost exceptions are used for\n-   --  this partition, and to zero if longjmp/setjmp exceptions are used.\n-\n    --  Detect_Blocking indicates whether pragma Detect_Blocking is active or\n    --  not. A value of zero indicates that the pragma is not present, while a\n    --  value of 1 signals its presence in the partition.\n@@ -607,9 +603,6 @@ package body Bindgen is\n                  \"\"\"__gl_exception_tracebacks\"\");\");\n          end if;\n \n-         WBI (\"      Zero_Cost_Exceptions : Integer;\");\n-         WBI (\"      pragma Import (C, Zero_Cost_Exceptions, \" &\n-              \"\"\"__gl_zero_cost_exceptions\"\");\");\n          WBI (\"      Detect_Blocking : Integer;\");\n          WBI (\"      pragma Import (C, Detect_Blocking, \" &\n               \"\"\"__gl_detect_blocking\"\");\");\n@@ -803,17 +796,6 @@ package body Bindgen is\n             WBI (\"      Exception_Tracebacks := 1;\");\n          end if;\n \n-         Set_String (\"      Zero_Cost_Exceptions := \");\n-\n-         if Zero_Cost_Exceptions_Specified then\n-            Set_String (\"1\");\n-         else\n-            Set_String (\"0\");\n-         end if;\n-\n-         Set_String (\";\");\n-         Write_Statement_Buffer;\n-\n          Set_String (\"      Detect_Blocking := \");\n \n          if Detect_Blocking then"}, {"sha": "0fad22bf7a738c8dac8dc492135c8023408bf2d2", "filename": "gcc/ada/gprep.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Fgprep.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Fgprep.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgprep.adb?ref=9479ded4471394acb96ecc73c58b90e8825d2380", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2002-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2002-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -720,7 +720,7 @@ package body GPrep is\n \n       loop\n          begin\n-            Switch := GNAT.Command_Line.Getopt (\"D: b c C r s T u v\");\n+            Switch := GNAT.Command_Line.Getopt (\"D: a b c C r s T u v\");\n \n             case Switch is\n \n@@ -731,6 +731,10 @@ package body GPrep is\n                   Process_Command_Line_Symbol_Definition\n                     (S => GNAT.Command_Line.Parameter);\n \n+               when 'a' =>\n+                  Opt.No_Deletion := True;\n+                  Opt.Undefined_Symbols_Are_False := True;\n+\n                when 'b' =>\n                   Opt.Blank_Deleted_Lines := True;\n "}, {"sha": "ad00e148fcca7cdbadd7d10aa62ff5f4467b4d21", "filename": "gcc/ada/init.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=9479ded4471394acb96ecc73c58b90e8825d2380", "patch": "@@ -103,12 +103,14 @@ char *__gl_interrupt_states              = 0;\n int   __gl_num_interrupt_states          = 0;\n int   __gl_unreserve_all_interrupts      = 0;\n int   __gl_exception_tracebacks          = 0;\n-int   __gl_zero_cost_exceptions          = 0;\n int   __gl_detect_blocking               = 0;\n int   __gl_default_stack_size            = -1;\n int   __gl_leap_seconds_support          = 0;\n int   __gl_canonical_streams             = 0;\n \n+/* This value is not used anymore, but kept for bootstrapping purpose.  */\n+int   __gl_zero_cost_exceptions          = 0;\n+\n /* Indication of whether synchronous signal handler has already been\n    installed by a previous call to adainit.  */\n int  __gnat_handler_installed      = 0;"}, {"sha": "88194b3023b46c509a6b93726b5a05124f025f79", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=9479ded4471394acb96ecc73c58b90e8825d2380", "patch": "@@ -968,6 +968,12 @@ package Opt is\n    --  in this variable (e.g. 2 = select second unit in file). A value of\n    --  zero indicates that we are in normal (one unit per file) mode.\n \n+   No_Deletion : Boolean := False;\n+   --  GNATPREP\n+   --  Set by preprocessor switch -a. Do not eliminate any source text. Implies\n+   --  Undefined_Symbols_Are_False. Useful to perform a syntax check on all\n+   --  branches of #if constructs.\n+\n    No_Main_Subprogram : Boolean := False;\n    --  GNATMAKE, GNATBIND\n    --  Set to True if compilation/binding of a program without main"}, {"sha": "3ec2087926a0a7fd068752794e72a29b89998b50", "filename": "gcc/ada/prep.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Fprep.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Fprep.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprep.adb?ref=9479ded4471394acb96ecc73c58b90e8825d2380", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2002-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2002-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -292,8 +292,8 @@ package body Prep is\n          Result.Value := End_String;\n       end if;\n \n-      --  Now, check the syntax of the symbol (we don't allow accented and\n-      --  wide characters)\n+      --  Now, check the syntax of the symbol (we don't allow accented or\n+      --  wide characters).\n \n       if Name_Buffer (1) not in 'a' .. 'z'\n         and then Name_Buffer (1) not in 'A' .. 'Z'\n@@ -356,7 +356,7 @@ package body Prep is\n    begin\n       --  Always return False when not inside an #if statement\n \n-      if Pp_States.Last = Ground then\n+      if Opt.No_Deletion or else Pp_States.Last = Ground then\n          return False;\n       else\n          return Pp_States.Table (Pp_States.Last).Deleting;"}, {"sha": "dd64bcb714b2329aa13752d3d2d359f29f9b0da9", "filename": "gcc/ada/prepcomp.adb", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Fprepcomp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Fprepcomp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprepcomp.adb?ref=9479ded4471394acb96ecc73c58b90e8825d2380", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2003-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2003-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -60,6 +60,7 @@ package body Prepcomp is\n       Undef_False  : Boolean        := False;\n       Always_Blank : Boolean        := False;\n       Comments     : Boolean        := False;\n+      No_Deletion  : Boolean        := False;\n       List_Symbols : Boolean        := False;\n       Processed    : Boolean        := False;\n    end record;\n@@ -73,6 +74,7 @@ package body Prepcomp is\n       Undef_False  => False,\n       Always_Blank => False,\n       Comments     => False,\n+      No_Deletion  => False,\n       List_Symbols => False,\n       Processed    => False);\n \n@@ -330,6 +332,16 @@ package body Prepcomp is\n                --  significant.\n \n                case Sinput.Source (Token_Ptr) is\n+                  when 'a' =>\n+\n+                     --  All source text preserved (also implies -u)\n+\n+                     if Name_Len = 1 then\n+                        Current_Data.No_Deletion := True;\n+                        Current_Data.Undef_False := True;\n+                        OK := True;\n+                     end if;\n+\n                   when 'u' =>\n \n                      --  Undefined symbol are False\n@@ -581,15 +593,15 @@ package body Prepcomp is\n \n       --  Set the preprocessing flags according to the preprocessing data\n \n-      if Current_Data.Comments and then not Current_Data.Always_Blank then\n+      if Current_Data.Comments and not Current_Data.Always_Blank then\n          Comment_Deleted_Lines := True;\n          Blank_Deleted_Lines   := False;\n-\n       else\n          Comment_Deleted_Lines := False;\n          Blank_Deleted_Lines   := True;\n       end if;\n \n+      No_Deletion                 := Current_Data.No_Deletion;\n       Undefined_Symbols_Are_False := Current_Data.Undef_False;\n       List_Preprocessing_Symbols  := Current_Data.List_Symbols;\n "}, {"sha": "b3af47961364157accf71c6a7df4fe7ddd28e8a4", "filename": "gcc/ada/s-bignum.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Fs-bignum.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Fs-bignum.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-bignum.adb?ref=9479ded4471394acb96ecc73c58b90e8825d2380", "patch": "@@ -341,6 +341,17 @@ package body System.Bignums is\n                begin\n                   Free_Bignum (XY2);\n \n+                  --  Raise storage error if intermediate value is getting too\n+                  --  large, which we arbitrarily define as 200 words for now!\n+\n+                  if XY2S.Len > 200 then\n+                     Free_Bignum (XY2S);\n+                     raise Storage_Error with\n+                       \"exponentiation result is too large\";\n+                  end if;\n+\n+                  --  Otherwise take care of even/odd cases\n+\n                   if (Y and 1) = 0 then\n                      return XY2S;\n "}, {"sha": "7dd808c0d0d62f5f1b20b4cdc589d4460dc9e348", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=9479ded4471394acb96ecc73c58b90e8825d2380", "patch": "@@ -23,6 +23,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Aspects;  use Aspects;\n with Atree;    use Atree;\n with Checks;   use Checks;\n with Debug;    use Debug;\n@@ -14805,6 +14806,11 @@ package body Sem_Ch3 is\n       New_Id   : Entity_Id;\n       Prev_Par : Node_Id;\n \n+      procedure Check_Duplicate_Aspects;\n+      --  Check that aspects specified in a completion have not been specified\n+      --  already in the partial view. Type_Invariant and others can be\n+      --  specified on either view but never on both.\n+\n       procedure Tag_Mismatch;\n       --  Diagnose a tagged partial view whose full view is untagged.\n       --  We post the message on the full view, with a reference to\n@@ -14813,6 +14819,38 @@ package body Sem_Ch3 is\n       --  so we determine the position of the error message from the\n       --  respective slocs of both.\n \n+      -----------------------------\n+      -- Check_Duplicate_Aspects --\n+      -----------------------------\n+      procedure Check_Duplicate_Aspects is\n+         Prev_Aspects   : constant List_Id := Aspect_Specifications (Prev_Par);\n+         Full_Aspects   : constant List_Id := Aspect_Specifications (N);\n+         F_Spec, P_Spec : Node_Id;\n+\n+      begin\n+         if Present (Prev_Aspects) and then Present (Full_Aspects) then\n+            F_Spec := First (Full_Aspects);\n+            while Present (F_Spec) loop\n+               P_Spec := First (Prev_Aspects);\n+               while Present (P_Spec) loop\n+                  if\n+                    Chars (Identifier (P_Spec)) = Chars (Identifier (F_Spec))\n+                  then\n+                     Error_Msg_N\n+                       (\"aspect already specified in private declaration\",\n+                         F_Spec);\n+                     Remove (F_Spec);\n+                     return;\n+                  end if;\n+\n+                  Next (P_Spec);\n+               end loop;\n+\n+               Next (F_Spec);\n+            end loop;\n+         end if;\n+      end Check_Duplicate_Aspects;\n+\n       ------------------\n       -- Tag_Mismatch --\n       ------------------\n@@ -15022,6 +15060,10 @@ package body Sem_Ch3 is\n                  (\"declaration of full view must appear in private part\", N);\n             end if;\n \n+            if Ada_Version >= Ada_2012 then\n+               Check_Duplicate_Aspects;\n+            end if;\n+\n             Copy_And_Swap (Prev, Id);\n             Set_Has_Private_Declaration (Prev);\n             Set_Has_Private_Declaration (Id);"}, {"sha": "a81ea5c6148c3ac7c78f4aec0e7a55b2f9ed6eb9", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=9479ded4471394acb96ecc73c58b90e8825d2380", "patch": "@@ -1345,9 +1345,10 @@ package body Sem_Ch9 is\n       --  Check for unreferenced variables etc. Before the Check_References\n       --  call, we transfer Never_Set_In_Source and Referenced flags from\n       --  parameters in the spec to the corresponding entities in the body,\n-      --  since we want the warnings on the body entities. Note that we do\n-      --  not have to transfer Referenced_As_LHS, since that flag can only\n-      --  be set for simple variables.\n+      --  since we want the warnings on the body entities. Note that we do not\n+      --  have to transfer Referenced_As_LHS, since that flag can only be set\n+      --  for simple variables, but we include Has_Pragma_Unreferenced,\n+      --  which may have been specified for a formal in the body.\n \n       --  At the same time, we set the flags on the spec entities to suppress\n       --  any warnings on the spec formals, since we also scan the spec.\n@@ -1382,6 +1383,7 @@ package body Sem_Ch9 is\n \n             Set_Referenced (E2, Referenced (E1));\n             Set_Referenced (E1);\n+            Set_Has_Pragma_Unreferenced (E2, Has_Pragma_Unreferenced (E1));\n             Set_Entry_Component (E2, Entry_Component (E1));\n \n          <<Continue>>"}, {"sha": "f7e774308fbfb167c083b2269a7a84c5344d35d8", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=9479ded4471394acb96ecc73c58b90e8825d2380", "patch": "@@ -199,7 +199,7 @@ package body Sem_Eval is\n    --  Tests to see if expression N whose single operand is Op1 is foldable,\n    --  i.e. the operand value is known at compile time. If the operation is\n    --  foldable, then Fold is True on return, and Stat indicates whether\n-   --  the result is static (i.e. both operands were static). Note that it\n+   --  the result is static (i.e. the operand was static). Note that it\n    --  is quite possible for Fold to be True, and Stat to be False, since\n    --  there are cases in which we know the value of an operand even though\n    --  it is not technically static (e.g. the static lower bound of a range\n@@ -233,19 +233,19 @@ package body Sem_Eval is\n       Stat : out Boolean;\n       Fold : out Boolean);\n    --  Same processing, except applies to an expression N with two operands\n-   --  Op1 and Op2.\n+   --  Op1 and Op2. The result is static only if both operands are static.\n \n    function Test_In_Range\n      (N            : Node_Id;\n       Typ          : Entity_Id;\n       Assume_Valid : Boolean;\n       Fixed_Int    : Boolean;\n       Int_Real     : Boolean) return Range_Membership;\n-   --  Common processing for Is_In_Range and Is_Out_Of_Range:\n-   --  Returns In_Range or Out_Of_Range if it can be guaranteed at compile time\n-   --  that expression N is known to be in or out of range of the subtype Typ.\n-   --  If not compile time known, Unknown is returned.\n-   --  See documentation of Is_In_Range for complete description of parameters.\n+   --  Common processing for Is_In_Range and Is_Out_Of_Range: Returns In_Range\n+   --  or Out_Of_Range if it can be guaranteed at compile time that expression\n+   --  N is known to be in or out of range of the subtype Typ. If not compile\n+   --  time known, Unknown is returned. See documentation of Is_In_Range for\n+   --  complete description of parameters.\n \n    procedure To_Bits (U : Uint; B : out Bits);\n    --  Converts a Uint value to a bit string of length B'Length\n@@ -4046,12 +4046,18 @@ package body Sem_Eval is\n \n       --  We now have the literal with the right value, both the actual type\n       --  and the expected type of this literal are taken from the expression\n-      --  that was evaluated.\n+      --  that was evaluated. So now we do the Analyze and Resolve.\n+\n+      --  Note that we have to reset Is_Static_Expression both after the\n+      --  analyze step (because Resolve will evaluate the literal, which\n+      --  will cause semantic errors if it is marked as static), and after\n+      --  the Resolve step (since Resolve in some cases sets this flag).\n \n       Analyze (N);\n       Set_Is_Static_Expression (N, Static);\n       Set_Etype (N, Typ);\n       Resolve (N);\n+      Set_Is_Static_Expression (N, Static);\n    end Fold_Str;\n \n    ---------------\n@@ -4100,12 +4106,18 @@ package body Sem_Eval is\n \n       --  We now have the literal with the right value, both the actual type\n       --  and the expected type of this literal are taken from the expression\n-      --  that was evaluated.\n+      --  that was evaluated. So now we do the Analyze and Resolve.\n+\n+      --  Note that we have to reset Is_Static_Expression both after the\n+      --  analyze step (because Resolve will evaluate the literal, which\n+      --  will cause semantic errors if it is marked as static), and after\n+      --  the Resolve step (since Resolve in some cases sets this flag).\n \n       Analyze (N);\n       Set_Is_Static_Expression (N, Static);\n       Set_Etype (N, Typ);\n       Resolve (N);\n+      Set_Is_Static_Expression (N, Static);\n    end Fold_Uint;\n \n    ----------------\n@@ -4135,12 +4147,20 @@ package body Sem_Eval is\n \n       Set_Original_Entity (N, Ent);\n \n-      --  Both the actual and expected type comes from the original expression\n+      --  We now have the literal with the right value, both the actual type\n+      --  and the expected type of this literal are taken from the expression\n+      --  that was evaluated. So now we do the Analyze and Resolve.\n+\n+      --  Note that we have to reset Is_Static_Expression both after the\n+      --  analyze step (because Resolve will evaluate the literal, which\n+      --  will cause semantic errors if it is marked as static), and after\n+      --  the Resolve step (since Resolve in some cases sets this flag).\n \n       Analyze (N);\n       Set_Is_Static_Expression (N, Static);\n       Set_Etype (N, Typ);\n       Resolve (N);\n+      Set_Is_Static_Expression (N, Static);\n    end Fold_Ureal;\n \n    ---------------"}, {"sha": "258ec5b1685bb4f333714794b95ec6f5b06ab5ab", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=9479ded4471394acb96ecc73c58b90e8825d2380", "patch": "@@ -14802,10 +14802,17 @@ package body Sem_Prag is\n                            loop\n                               Set_Warnings_Off\n                                 (E, (Chars (Get_Pragma_Arg (Arg1)) =\n-                                                              Name_Off));\n+                                      Name_Off));\n+\n+                              --  For OFF case, make entry in warnings off\n+                              --  pragma table for later processing. But we do\n+                              --  not do that within an instance, since these\n+                              --  warnings are about what is needed in the\n+                              --  template, not an instance of it.\n \n                               if Chars (Get_Pragma_Arg (Arg1)) = Name_Off\n                                 and then Warn_On_Warnings_Off\n+                                and then not In_Instance\n                               then\n                                  Warnings_Off_Pragmas.Append ((N, E));\n                               end if;"}, {"sha": "39e9acba8242ad79f0fc664f7cc19490a051c5c9", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9479ded4471394acb96ecc73c58b90e8825d2380/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=9479ded4471394acb96ecc73c58b90e8825d2380", "patch": "@@ -12419,15 +12419,4 @@ package Sinfo is\n    pragma Inline (Set_Was_Originally_Stub);\n    pragma Inline (Set_Withed_Body);\n \n-   --------------\n-   -- Synonyms --\n-   --------------\n-\n-   --  These synonyms are to aid in transition, they should eventually be\n-   --  removed when all remaining references to the obsolete name are gone.\n-\n-   N_Return_Statement : constant Node_Kind := N_Simple_Return_Statement;\n-   --  Rename N_Simple_Return_Statement to be N_Return_Statement. Clients\n-   --  should refer to N_Simple_Return_Statement.\n-\n end Sinfo;"}]}