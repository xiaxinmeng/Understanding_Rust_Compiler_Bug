{"sha": "c92bcccb955acf88560d86494889b49c0c757ee0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkyYmNjY2I5NTVhY2Y4ODU2MGQ4NjQ5NDg4OWI0OWMwYzc1N2VlMA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2002-06-13T12:40:54Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-06-13T12:40:54Z"}, "message": "diagnostic.c (output_format): Recognize \"%H\" as a format specifier for a location_t.\n\n\t* diagnostic.c (output_format): Recognize \"%H\" as a format\n\tspecifier for a location_t.\n\t(text_specifies_location): New function.\n\t(diagnostic_set_info): Use it.\n\nFrom-SVN: r54584", "tree": {"sha": "64a8739961836d221cb8ccf2f243ac4fa21f4b00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64a8739961836d221cb8ccf2f243ac4fa21f4b00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c92bcccb955acf88560d86494889b49c0c757ee0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c92bcccb955acf88560d86494889b49c0c757ee0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c92bcccb955acf88560d86494889b49c0c757ee0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c92bcccb955acf88560d86494889b49c0c757ee0/comments", "author": null, "committer": null, "parents": [{"sha": "110b3faa60ed4c40c5107c07b8f9470623d980a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/110b3faa60ed4c40c5107c07b8f9470623d980a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/110b3faa60ed4c40c5107c07b8f9470623d980a4"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "f89e38770fb8ef284d5f34ef0e567c22c5bf8758", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c92bcccb955acf88560d86494889b49c0c757ee0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c92bcccb955acf88560d86494889b49c0c757ee0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c92bcccb955acf88560d86494889b49c0c757ee0", "patch": "@@ -1,3 +1,10 @@\n+2002-06-13  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* diagnostic.c (output_format): Recognize \"%H\" as a format\n+\tspecifier for a location_t.\n+\t(text_specifies_location): New function.\n+\t(diagnostic_set_info): Use it.\n+\n 2002-06-13  Jeffrey Law  <law@redhat.com>\n \n \t* i386.md (extenddfxf2, extenddftf2): Fix typo/thinko."}, {"sha": "3132a3d61060f1df9a83415bd988256cbdae0953", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c92bcccb955acf88560d86494889b49c0c757ee0/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c92bcccb955acf88560d86494889b49c0c757ee0/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=c92bcccb955acf88560d86494889b49c0c757ee0", "patch": "@@ -89,6 +89,7 @@ static void default_diagnostic_finalizer PARAMS ((diagnostic_context *,\n                                                   diagnostic_info *));\n \n static void error_recursion PARAMS ((diagnostic_context *)) ATTRIBUTE_NORETURN;\n+static bool text_specifies_location PARAMS ((text_info *, location_t *));\n \n extern int rtl_dump_and_exit;\n extern int warnings_are_errors;\n@@ -495,7 +496,8 @@ output_buffer_to_stream (buffer)\n    %c: character.\n    %s: string.\n    %%: `%'.\n-   %*.s: a substring the length of which is specified by an integer.  */\n+   %*.s: a substring the length of which is specified by an integer.\n+   %H: location_t.  */\n static void\n output_format (buffer, text)\n      output_buffer *buffer;\n@@ -576,6 +578,16 @@ output_format (buffer, text)\n \t  output_add_character (buffer, '%');\n \t  break;\n \n+        case 'H':\n+          {\n+            const location_t *locus = va_arg (*text->args_ptr, location_t *);\n+            output_add_string (buffer, \"file '\");\n+            output_add_string (buffer, locus->file);\n+            output_add_string (buffer, \"', line \");\n+            output_decimal (buffer, locus->file);\n+          }\n+          break;\n+\n \tcase '.':\n \t  {\n \t    int n;\n@@ -769,6 +781,30 @@ diagnostic_initialize (context)\n   context->warnings_are_errors_message = warnings_are_errors;\n }\n \n+/* Returns true if the next format specifier in TEXT is a format specifier\n+   for a location_t.  If so, update the object pointed by LOCUS to reflect\n+   the specified location in *TEXT->args_ptr.  */\n+static bool\n+text_specifies_location (text, locus)\n+     text_info *text;\n+     location_t *locus;\n+{\n+  const char *p;\n+  /* Skip any leading text.  */\n+  for (p = text->format_spec; *p && *p != '%'; ++p)\n+    ;\n+\n+  /* Extract the location information if any.  */\n+  if (*p == '%' && *++p == 'H')\n+    {\n+      *locus = *va_arg (*text->args_ptr, location_t *);\n+      text->format_spec = p + 1;\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n void\n diagnostic_set_info (diagnostic, msgid, args, file, line, kind)\n      diagnostic_info *diagnostic;\n@@ -780,8 +816,13 @@ diagnostic_set_info (diagnostic, msgid, args, file, line, kind)\n {\n   diagnostic->message.format_spec = msgid;\n   diagnostic->message.args_ptr = args;\n-  diagnostic->location.file = file;\n-  diagnostic->location.line = line;\n+  /* If the diagnostic message doesn't specify a loccation,\n+     use FILE and LINE.  */\n+  if (!text_specifies_location (&diagnostic->message, &diagnostic->location))\n+    {\n+      diagnostic->location.file = file;\n+      diagnostic->location.line = line;\n+    }\n   diagnostic->kind = kind;\n }\n "}]}