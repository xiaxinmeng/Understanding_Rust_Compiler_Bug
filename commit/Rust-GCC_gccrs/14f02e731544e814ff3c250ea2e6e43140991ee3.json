{"sha": "14f02e731544e814ff3c250ea2e6e43140991ee3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRmMDJlNzMxNTQ0ZTgxNGZmM2MyNTBlYTJlNmU0MzE0MDk5MWVlMw==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-03-21T14:38:01Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-03-21T14:38:01Z"}, "message": "combine.c (combine_simplify_rtx, [...]): Adjust calls to reverse_comparison.\n\n2005-03-21  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* combine.c (combine_simplify_rtx, simplify_if_then_else,\n\tsimplify_logical, if_then_else_cond, known_cond,\n\tsimplify_comparison): Adjust calls to reverse_comparison.\n\tDon't use combine_reversed_comparison_code).\n\t(combine_reversed_comparison_code): Remove.\n\t(reversed_comparison): Using reversed_comparison_code, move it...\n\t* jump.c (reversed_comparison): ... here.\n\t* rtl.h (reversed_comparison): Add prototype.\n\nFrom-SVN: r96801", "tree": {"sha": "11d1dc2d20769a88c452555a826eb05acdb56978", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11d1dc2d20769a88c452555a826eb05acdb56978"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14f02e731544e814ff3c250ea2e6e43140991ee3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f02e731544e814ff3c250ea2e6e43140991ee3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14f02e731544e814ff3c250ea2e6e43140991ee3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f02e731544e814ff3c250ea2e6e43140991ee3/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49d1af8985e7f1a889faa67f42937b1aee354ebd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49d1af8985e7f1a889faa67f42937b1aee354ebd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49d1af8985e7f1a889faa67f42937b1aee354ebd"}], "stats": {"total": 99, "additions": 40, "deletions": 59}, "files": [{"sha": "429d32c4528ce41b349a67e59616a97e6de159ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f02e731544e814ff3c250ea2e6e43140991ee3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f02e731544e814ff3c250ea2e6e43140991ee3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14f02e731544e814ff3c250ea2e6e43140991ee3", "patch": "@@ -1,3 +1,14 @@\n+2005-03-21  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* combine.c (combine_simplify_rtx, simplify_if_then_else,\n+\tsimplify_logical, if_then_else_cond, known_cond,\n+\tsimplify_comparison): Adjust calls to reverse_comparison.\n+\tDon't use combine_reversed_comparison_code).\n+\t(combine_reversed_comparison_code): Remove.\n+\t(reversed_comparison): Using reversed_comparison_code, move it...\n+\t* jump.c (reversed_comparison): ... here.\n+\t* rtl.h (reversed_comparison): Add prototype.\n+\n 2005-03-21  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* builtins.c (fold_builtin): Take decomposed arguments of\n@@ -271,7 +282,6 @@\n \tscale_bbs_frequencies_int.\n \t* tree-ssa-loop-ch.c (copy_loop_headers): Fix profiling info.\n \n->>>>>>> 2.7929\n 2005-03-18  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/m32r/m32r-protos.h: Remove the prototypes for"}, {"sha": "5981403eea907e43c6e611a4a7bbd600919cb038", "filename": "gcc/combine.c", "status": "modified", "additions": 14, "deletions": 58, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f02e731544e814ff3c250ea2e6e43140991ee3/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f02e731544e814ff3c250ea2e6e43140991ee3/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=14f02e731544e814ff3c250ea2e6e43140991ee3", "patch": "@@ -413,8 +413,6 @@ static void distribute_links (rtx);\n static void mark_used_regs_combine (rtx);\n static int insn_cuid (rtx);\n static void record_promoted_value (rtx, rtx);\n-static rtx reversed_comparison (rtx, enum machine_mode, rtx, rtx);\n-static enum rtx_code combine_reversed_comparison_code (rtx);\n static int unmentioned_reg_p_1 (rtx *, void *);\n static bool unmentioned_reg_p (rtx, rtx);\n \f\n@@ -4377,9 +4375,7 @@ combine_simplify_rtx (rtx x, enum machine_mode op0_mode, int in_dest)\n       if (COMPARISON_P (XEXP (x, 0))\n \t  && ((STORE_FLAG_VALUE == -1 && XEXP (x, 1) == const1_rtx)\n \t      || (STORE_FLAG_VALUE == 1 && XEXP (x, 1) == constm1_rtx))\n-\t  && (reversed = reversed_comparison (XEXP (x, 0), mode,\n-\t\t\t\t\t      XEXP (XEXP (x, 0), 0),\n-\t\t\t\t\t      XEXP (XEXP (x, 0), 1))))\n+\t  && (reversed = reversed_comparison (XEXP (x, 0), mode)))\n \treturn\n \t  simplify_gen_unary (NEG, mode, reversed, mode);\n \n@@ -4425,9 +4421,7 @@ combine_simplify_rtx (rtx x, enum machine_mode op0_mode, int in_dest)\n       if (STORE_FLAG_VALUE == 1\n \t  && XEXP (x, 0) == const1_rtx\n \t  && COMPARISON_P (XEXP (x, 1))\n-\t  && (reversed = reversed_comparison (XEXP (x, 1), mode,\n-\t\t\t\t\t      XEXP (XEXP (x, 1), 0),\n-\t\t\t\t\t      XEXP (XEXP (x, 1), 1))))\n+\t  && (reversed = reversed_comparison (XEXP (x, 1), mode)))\n \treturn reversed;\n \n       /* (minus <foo> (and <foo> (const_int -pow2))) becomes\n@@ -4829,16 +4823,15 @@ simplify_if_then_else (rtx x)\n   /* Also when the truth value has to be reversed.  */\n   if (comparison_p\n       && true_rtx == const0_rtx && false_rtx == const_true_rtx\n-      && (reversed = reversed_comparison (cond, mode, XEXP (cond, 0),\n-\t\t\t\t\t  XEXP (cond, 1))))\n+      && (reversed = reversed_comparison (cond, mode)))\n     return reversed;\n \n   /* Sometimes we can simplify the arm of an IF_THEN_ELSE if a register used\n      in it is being compared against certain values.  Get the true and false\n      comparisons and see if that says anything about the value of each arm.  */\n \n   if (comparison_p\n-      && ((false_code = combine_reversed_comparison_code (cond))\n+      && ((false_code = reversed_comparison_code (cond, NULL))\n \t  != UNKNOWN)\n       && REG_P (XEXP (cond, 0)))\n     {\n@@ -4896,7 +4889,7 @@ simplify_if_then_else (rtx x)\n      the false arm is more complicated than the true arm.  */\n \n   if (comparison_p\n-      && combine_reversed_comparison_code (cond) != UNKNOWN\n+      && reversed_comparison_code (cond, NULL) != UNKNOWN\n       && (true_rtx == pc_rtx\n \t  || (CONSTANT_P (true_rtx)\n \t      && GET_CODE (false_rtx) != CONST_INT && false_rtx != pc_rtx)\n@@ -4908,10 +4901,7 @@ simplify_if_then_else (rtx x)\n \t  || rtx_equal_p (false_rtx, XEXP (cond, 0))))\n     {\n       true_code = reversed_comparison_code (cond, NULL);\n-      SUBST (XEXP (x, 0),\n-\t     reversed_comparison (cond, GET_MODE (cond), XEXP (cond, 0),\n-\t\t\t\t  XEXP (cond, 1)));\n-\n+      SUBST (XEXP (x, 0), reversed_comparison (cond, GET_MODE (cond)));\n       SUBST (XEXP (x, 1), false_rtx);\n       SUBST (XEXP (x, 2), true_rtx);\n \n@@ -5710,8 +5700,7 @@ simplify_logical (rtx x)\n       if (STORE_FLAG_VALUE == 1\n \t  && op1 == const1_rtx\n \t  && COMPARISON_P (op0)\n-\t  && (reversed = reversed_comparison (op0, mode, XEXP (op0, 0),\n-\t\t\t\t\t      XEXP (op0, 1))))\n+\t  && (reversed = reversed_comparison (op0, mode)))\n \treturn reversed;\n \n       /* (lshiftrt foo C) where C is the number of bits in FOO minus 1\n@@ -5732,8 +5721,7 @@ simplify_logical (rtx x)\n \t      == (unsigned HOST_WIDE_INT) 1 << (GET_MODE_BITSIZE (mode) - 1))\n \t  && op1 == const_true_rtx\n \t  && COMPARISON_P (op0)\n-\t  && (reversed = reversed_comparison (op0, mode, XEXP (op0, 0),\n-\t\t\t\t\t      XEXP (op0, 1))))\n+\t  && (reversed = reversed_comparison (op0, mode)))\n \treturn reversed;\n \n       break;\n@@ -7505,11 +7493,11 @@ if_then_else_cond (rtx x, rtx *ptrue, rtx *pfalse)\n \n \t  if (COMPARISON_P (cond0)\n \t      && COMPARISON_P (cond1)\n-\t      && ((GET_CODE (cond0) == combine_reversed_comparison_code (cond1)\n+\t      && ((GET_CODE (cond0) == reversed_comparison_code (cond1, NULL)\n \t\t   && rtx_equal_p (XEXP (cond0, 0), XEXP (cond1, 0))\n \t\t   && rtx_equal_p (XEXP (cond0, 1), XEXP (cond1, 1)))\n \t\t  || ((swap_condition (GET_CODE (cond0))\n-\t\t       == combine_reversed_comparison_code (cond1))\n+\t\t       == reversed_comparison_code (cond1, NULL))\n \t\t      && rtx_equal_p (XEXP (cond0, 0), XEXP (cond1, 1))\n \t\t      && rtx_equal_p (XEXP (cond0, 1), XEXP (cond1, 0))))\n \t      && ! side_effects_p (x))\n@@ -7536,11 +7524,11 @@ if_then_else_cond (rtx x, rtx *ptrue, rtx *pfalse)\n \n \t  if (COMPARISON_P (cond0)\n \t      && COMPARISON_P (cond1)\n-\t      && ((GET_CODE (cond0) == combine_reversed_comparison_code (cond1)\n+\t      && ((GET_CODE (cond0) == reversed_comparison_code (cond1, NULL)\n \t\t   && rtx_equal_p (XEXP (cond0, 0), XEXP (cond1, 0))\n \t\t   && rtx_equal_p (XEXP (cond0, 1), XEXP (cond1, 1)))\n \t\t  || ((swap_condition (GET_CODE (cond0))\n-\t\t       == combine_reversed_comparison_code (cond1))\n+\t\t       == reversed_comparison_code (cond1, NULL))\n \t\t      && rtx_equal_p (XEXP (cond0, 0), XEXP (cond1, 1))\n \t\t      && rtx_equal_p (XEXP (cond0, 1), XEXP (cond1, 0))))\n \t      && ! side_effects_p (x))\n@@ -7685,7 +7673,7 @@ known_cond (rtx x, enum rtx_code cond, rtx reg, rtx val)\n \t      if (comparison_dominates_p (cond, code))\n \t\treturn const_true_rtx;\n \n-\t      code = combine_reversed_comparison_code (x);\n+\t      code = reversed_comparison_code (x, NULL);\n \t      if (code != UNKNOWN\n \t\t  && comparison_dominates_p (cond, code))\n \t\treturn const0_rtx;\n@@ -10324,7 +10312,7 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \t      if (code == LT || code == NE)\n \t\tnew_code = GET_CODE (op0);\n \t      else\n-\t\tnew_code = combine_reversed_comparison_code (op0);\n+\t\tnew_code = reversed_comparison_code (op0, NULL);\n \n \t      if (new_code != UNKNOWN)\n \t\t{\n@@ -10796,38 +10784,6 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n   return code;\n }\n \f\n-/* Like jump.c' reversed_comparison_code, but use combine infrastructure for\n-   searching backward.  */\n-static enum rtx_code\n-combine_reversed_comparison_code (rtx exp)\n-{\n-  enum rtx_code code1 = reversed_comparison_code (exp, NULL);\n-  rtx x;\n-\n-  if (code1 != UNKNOWN\n-      || GET_MODE_CLASS (GET_MODE (XEXP (exp, 0))) != MODE_CC)\n-    return code1;\n-  /* Otherwise try and find where the condition codes were last set and\n-     use that.  */\n-  x = get_last_value (XEXP (exp, 0));\n-  if (!x || GET_CODE (x) != COMPARE)\n-    return UNKNOWN;\n-  return reversed_comparison_code_parts (GET_CODE (exp),\n-\t\t\t\t\t XEXP (x, 0), XEXP (x, 1), NULL);\n-}\n-\n-/* Return comparison with reversed code of EXP and operands OP0 and OP1.\n-   Return NULL_RTX in case we fail to do the reversal.  */\n-static rtx\n-reversed_comparison (rtx exp, enum machine_mode mode, rtx op0, rtx op1)\n-{\n-  enum rtx_code reversed_code = combine_reversed_comparison_code (exp);\n-  if (reversed_code == UNKNOWN)\n-    return NULL_RTX;\n-  else\n-    return simplify_gen_relational (reversed_code, mode, VOIDmode, op0, op1);\n-}\n-\f\n /* Utility function for record_value_for_reg.  Count number of\n    rtxs in X.  */\n static int"}, {"sha": "dc81c52185147cc1bde376804e111ddf6eaa315d", "filename": "gcc/jump.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f02e731544e814ff3c250ea2e6e43140991ee3/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f02e731544e814ff3c250ea2e6e43140991ee3/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=14f02e731544e814ff3c250ea2e6e43140991ee3", "patch": "@@ -449,6 +449,20 @@ reversed_comparison_code (rtx comparison, rtx insn)\n \t\t\t\t\t XEXP (comparison, 0),\n \t\t\t\t\t XEXP (comparison, 1), insn);\n }\n+\n+/* Return comparison with reversed code of EXP.\n+   Return NULL_RTX in case we fail to do the reversal.  */\n+rtx\n+reversed_comparison (rtx exp, enum machine_mode mode)\n+{\n+  enum rtx_code reversed_code = reversed_comparison_code (exp, NULL_RTX);\n+  if (reversed_code == UNKNOWN)\n+    return NULL_RTX;\n+  else\n+    return simplify_gen_relational (reversed_code, mode, VOIDmode,\n+                                    XEXP (exp, 0), XEXP (exp, 1));\n+}\n+\n \f\n /* Given an rtx-code for a comparison, return the code for the negated\n    comparison.  If no such code exists, return UNKNOWN."}, {"sha": "0d507ccba7760f9c6f60a8e05941cd9d4a2e5a4a", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f02e731544e814ff3c250ea2e6e43140991ee3/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f02e731544e814ff3c250ea2e6e43140991ee3/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=14f02e731544e814ff3c250ea2e6e43140991ee3", "patch": "@@ -1915,6 +1915,7 @@ extern int redirect_jump_1 (rtx, rtx);\n extern void redirect_jump_2 (rtx, rtx, rtx, int, int);\n extern int redirect_jump (rtx, rtx, int);\n extern void rebuild_jump_labels (rtx);\n+extern rtx reversed_comparison (rtx, enum machine_mode);\n extern enum rtx_code reversed_comparison_code (rtx, rtx);\n extern enum rtx_code reversed_comparison_code_parts (enum rtx_code,\n \t\t\t\t\t\t     rtx, rtx, rtx);"}]}