{"sha": "7be50fd30fa08028f2ea7ac281cd0a310151d3b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JlNTBmZDMwZmEwODAyOGYyZWE3YWMyODFjZDBhMzEwMTUxZDNiOQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@cygnus.com", "date": "2000-07-21T00:06:51Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-07-21T00:06:51Z"}, "message": "[multiple changes]\n\n\n2000-07-20  Benjamin Kosnik  <bkoz@cygnus.com>\n\n\t* bits/std_streambuf.h: Add bits for pback buffers here, so that\n\tin_avail, etc can use them.\n\t* bits/std_fstream.h: Ditto.\n\t* bits/fstream.tcc: Ditto.\n\t* testsuite/27_io/filebuf.cc: Tweaks.\n\t* testsuite/27_io/filebuf-3.tst: Correct for pbackfail bits.\n\n2000-07-19  Benjamin Kosnik  <bkoz@cygnus.com>\n\n\t* src/localename.cc: Same.\n\t* src/locale.cc: Same.\n\t* bits/localefwd.h: _M_init_facet to _M_facet_init.\n\n\t* bits/locale_facets.h: _M_init_boolnames to _M_boolnames_init.\n\n\t* bits/std_sstream.h: Change _M_init_stringbuf to _M_stringbuf_init.\n\n\t* bits/fstream.tcc: Change _M_init_filebuf to _M_filebuf_init.\n\t* bits/std_fstream.h: Same.\n\n\t* bits/basic_string.h: Tweaks.\n\nFrom-SVN: r35157", "tree": {"sha": "86a931a543012a803c455f39850cd161f1c52185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86a931a543012a803c455f39850cd161f1c52185"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7be50fd30fa08028f2ea7ac281cd0a310151d3b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7be50fd30fa08028f2ea7ac281cd0a310151d3b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7be50fd30fa08028f2ea7ac281cd0a310151d3b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/comments", "author": null, "committer": null, "parents": [{"sha": "4dbf4496573255460757de76bb8347669196587c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dbf4496573255460757de76bb8347669196587c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dbf4496573255460757de76bb8347669196587c"}], "stats": {"total": 496, "additions": 302, "deletions": 194}, "files": [{"sha": "d2e2e536c634b038ce75034440e6bfef03b7ce22", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7be50fd30fa08028f2ea7ac281cd0a310151d3b9", "patch": "@@ -1,3 +1,27 @@\n+2000-07-20  Benjamin Kosnik  <bkoz@cygnus.com>\n+\n+\t* bits/std_streambuf.h: Add bits for pback buffers here, so that\n+\tin_avail, etc can use them.\n+\t* bits/std_fstream.h: Ditto.\n+\t* bits/fstream.tcc: Ditto.\n+\t* testsuite/27_io/filebuf.cc: Tweaks.\n+\t* testsuite/27_io/filebuf-3.tst: Correct for pbackfail bits.\n+\n+2000-07-19  Benjamin Kosnik  <bkoz@cygnus.com>\n+\n+\t* src/localename.cc: Same.\n+\t* src/locale.cc: Same.\n+\t* bits/localefwd.h: _M_init_facet to _M_facet_init.\n+\n+\t* bits/locale_facets.h: _M_init_boolnames to _M_boolnames_init.\n+\n+\t* bits/std_sstream.h: Change _M_init_stringbuf to _M_stringbuf_init.\n+\n+\t* bits/fstream.tcc: Change _M_init_filebuf to _M_filebuf_init.\n+\t* bits/std_fstream.h: Same.\n+\n+\t* bits/basic_string.h: Tweaks.\n+\t\n 2000-07-19  Phil Edwards  <pme@sourceware.cygnus.com>\n \n \t* docs/18_support/howto.html:  Update."}, {"sha": "0d21c2d9a2f32740bb922aa13376d4e1e41b95ae", "filename": "libstdc++-v3/bits/basic_string.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fbasic_string.h?ref=7be50fd30fa08028f2ea7ac281cd0a310151d3b9", "patch": "@@ -221,11 +221,11 @@ namespace std {\n       // Data Members (public):\n       // NB: This is an unsigned type, and thus represents the maximum\n       // size that the allocator can hold.\n-      static const size_type npos = static_cast<size_type>(-1);\n+      static const size_type \tnpos = static_cast<size_type>(-1);\n \n     private:\n       // Data Members (private):\n-      mutable _Alloc_hider _M_dataplus;\n+      mutable _Alloc_hider \t_M_dataplus;\n \n       // The following storage is init'd to 0 by the linker, resulting\n       // (carefully) in an empty string with one reference."}, {"sha": "7f334524458fc8140b172180751bc1061cb4d9bd", "filename": "libstdc++-v3/bits/fstream.tcc", "status": "modified", "additions": 99, "deletions": 120, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Ffstream.tcc?ref=7be50fd30fa08028f2ea7ac281cd0a310151d3b9", "patch": "@@ -39,7 +39,7 @@ namespace std\n   template<typename _CharT, typename _Traits>\n     void\n     basic_filebuf<_CharT, _Traits>::\n-    _M_init_filebuf(void)\n+    _M_filebuf_init()\n     {\n       _M_buf_unified = true; // Tie input to output for basic_filebuf.\n       _M_buf_size = _M_buf_size_opt;\n@@ -50,6 +50,30 @@ namespace std\n \tdelete _M_file;\n \tthrow;\n       }\n+     }\n+\n+  template<typename _CharT, typename _Traits>\n+    void\n+    basic_filebuf<_CharT, _Traits>::\n+    _M_allocate_buffers()\n+    {\n+      // Allocate internal buffer.\n+      try {\n+\t_M_buf = new char_type[_M_buf_size];\n+      }\n+      catch(...) {\n+\tdelete [] _M_buf;\n+\tthrow;\n+      }\n+      \n+      // Allocate pback buffer.\n+      try {\n+\t_M_pback = new char_type[_M_pback_size];\n+      }\n+      catch(...) {\n+\tdelete [] _M_pback;\n+\tthrow;\n+      }\n     }\n \n   template<typename _CharT, typename _Traits>\n@@ -66,24 +90,18 @@ namespace std\n     _M_last_overflowed(false)\n     {\n       _M_fcvt = &use_facet<__codecvt_type>(this->getloc());\n-      _M_init_filebuf();\n+      _M_filebuf_init();\n       _M_file->sys_open(__fd, __mode);\n       if (this->is_open() && _M_buf_size)\n \t{\n+\t  _M_allocate_buffers();\n \t  _M_mode = __mode;\n+\n \t  // XXX So that istream::getc() will only need to get 1 char,\n \t  // as opposed to BUF_SIZE.\n \t  if (__fd == 0)\n \t    _M_buf_size = 1;\n \n-\t  try {\n-\t    _M_buf = new char_type[_M_buf_size];\n-\t  }\n-\t  catch(...) {\n-\t    delete [] _M_buf;\n-\t    throw;\n-\t  }\n-\n \t  this->_M_set_indeterminate();\n \t}\n    }\n@@ -96,19 +114,12 @@ namespace std\n       __filebuf_type *__retval = NULL;\n       if (!this->is_open())\n \t{\n-\t  _M_init_filebuf();\n+\t  _M_filebuf_init();\n \t  _M_file->open(__s, __mode);\n \t  if (this->is_open() && _M_buf_size)\n \t    {\n+\t      _M_allocate_buffers();\n \t      _M_mode = __mode;\n-\n-\t      try {\n-\t\t_M_buf = new char_type[_M_buf_size];\n-\t      }\n-\t      catch(...) {\n-\t\tdelete [] _M_buf;\n-\t\tthrow;\n-\t      }\n \t      \n \t      // For time being, set both (in/out) sets  of pointers.\n \t      _M_set_indeterminate();\n@@ -132,7 +143,10 @@ namespace std\n \t  bool __testput = _M_out_cur && _M_out_beg < _M_out_end;\n \t  if (__testput)\n \t    _M_really_overflow(traits_type::eof());\n-\t  \n+\n+\t  // NB: Do this here so that re-opened filebufs will be cool...\n+\t  _M_pback_destroy();\n+\n #if 0\n \t  // XXX not done\n \t  if (_M_last_overflowed)\n@@ -142,18 +156,23 @@ namespace std\n \t    }\n #endif\n \n-\t  if (_M_file)\n-\t    {\n-\t      delete _M_file;\n-\t      _M_file = NULL;\n-\t      _M_mode = ios_base::openmode(0);\n-\t      if (_M_buf_size)\n-\t\tdelete [] _M_buf;\n-\t      _M_buf = NULL;\n-\t      this->setg(NULL, NULL, NULL);\n-\t      this->setp(NULL, NULL);\n-\t      __retval = this;\n-\t    }\n+\t  _M_mode = ios_base::openmode(0);\n+\t  if (_M_buf_size)\n+\t    delete [] _M_buf;\n+\t  _M_buf = NULL;\n+\t  delete [] _M_pback;\n+\t  _M_pback = NULL;\n+\t  this->setg(NULL, NULL, NULL);\n+\t  this->setp(NULL, NULL);\n+\t  __retval = this;\n+\t}\n+\n+      // Can actually allocate this file as part of an open and never\n+      // have it be opened.....\n+      if (_M_file)\n+\t{\n+\t  delete _M_file;\n+\t  _M_file = NULL;\n \t}\n       _M_last_overflowed = false;\t\n       return __retval;\n@@ -173,7 +192,7 @@ namespace std\n \t  if (_M_in_cur >= _M_in_end)\n \t    __testeof = this->underflow() == traits_type::eof();\n \t  if (!__testeof)\n-\t    __retval = (_M_in_end - _M_in_cur) / sizeof(char_type);\n+\t    __retval = _M_in_end - _M_in_cur;\n \t}\n       _M_last_overflowed = false;\t\n       return __retval;\n@@ -185,13 +204,24 @@ namespace std\n     underflow()\n     {\n       int_type __retval = traits_type::eof();\n-      bool __testget = _M_in_cur && _M_in_beg < _M_in_cur;\n-      bool __testinit = _M_is_indeterminate();\n-      bool __testout = _M_mode & ios_base::out;\n       bool __testin = _M_mode & ios_base::in;\n       \n       if (__testin)\n \t{\n+\t  // Check for pback madness, and if so swich back to the\n+\t  // normal buffers and jet outta here before expensive\n+\t  // fileops happen...\n+\t  if (_M_pback_init)\n+\t    {\n+\t      _M_pback_destroy();\n+\t      if (_M_in_cur < _M_in_end)\n+\t\treturn traits_type::to_int_type(*_M_in_cur);\n+\t    }\n+\n+\t  bool __testget = _M_in_cur && _M_in_beg < _M_in_cur;\n+\t  bool __testinit = _M_is_indeterminate();\n+\t  bool __testout = _M_mode & ios_base::out;\n+\n \t  // Sync internal and external buffers.\n \t  // NB: __testget -> __testput as _M_buf_unified here.\n \t  if (__testget)\n@@ -260,56 +290,63 @@ namespace std\n     pbackfail(int_type __i)\n     {\n       int_type __retval = traits_type::eof();\n-      char_type __c = traits_type::to_char_type(__i);\n-      bool __testeof = traits_type::eq_int_type(__i, traits_type::eof());\n-      bool __testout = _M_mode & ios_base::out;\n       bool __testin = _M_mode & ios_base::in;\n \n       if (__testin)\n \t{\n-\t  if (!_M_is_indeterminate())\t  \n+\t  bool __testpb = _M_in_beg < _M_in_cur;\n+\t  char_type __c = traits_type::to_char_type(__i);\n+\t  bool __testeof = traits_type::eq_int_type(__i, __retval);\n+\n+\t  if (__testpb)\n \t    {\n-\t      bool __testpb = _M_in_beg < _M_in_cur;\n+\t      bool __testout = _M_mode & ios_base::out;\n \t      bool __testeq = traits_type::eq(__c, this->gptr()[-1]);\n \n \t      // Try to put back __c into input sequence in one of three ways.\n \t      // Order these tests done in is unspecified by the standard.\n-\t      if (!__testeof && __testpb && __testeq)\n+\t      if (!__testeof && __testeq)\n \t\t{\n \t\t  --_M_in_cur;\n \t\t  if (__testout)\n \t\t    --_M_out_cur;\n \t\t  __retval = __i;\n \t\t}\n-\t      else if (!__testeof && __testpb && __testout)\n+\t      else if (__testeof)\n \t\t{\n \t\t  --_M_in_cur;\n \t\t  if (__testout)\n \t\t    --_M_out_cur;\n-\t\t  *_M_in_cur = __c;\n-\t\t  __retval = __i;\n+\t\t  __retval = traits_type::not_eof(__i);\n \t\t}\n-\t      else if (__testeof && __testpb)\n+\t      else if (!__testeof)\n \t\t{\n \t\t  --_M_in_cur;\n \t\t  if (__testout)\n \t\t    --_M_out_cur;\n-\t\t  __retval = traits_type::not_eof(__i);\n+\t\t  _M_pback_create();\n+\t\t  *_M_in_cur = __c; \n+\t\t  __retval = __i;\n \t\t}\n \t    }\n \t  else\n-\t    {\n-\t      // Need to make a putback position available.\n+\t    {\t \n+ \t      // At the beginning of the buffer, need to make a\n+\t      // putback position available.\n \t      this->seekoff(-1, ios_base::cur);\n \t      this->underflow();\n-\t      if (!__testeof)\n-\t\t{\n-\t\t  *_M_in_cur = __c;\n-\t\t  __retval = __c;\n-\t\t}\n-\t      else\n-\t\t__retval = traits_type::not_eof(__i);\n-\t    }\n+ \t      if (!__testeof)\n+ \t\t{\n+\t\t  if (!traits_type::eq(__c, *_M_in_cur))\n+\t\t    {\n+\t\t      _M_pback_create();\n+\t\t      *_M_in_cur = __c;\n+\t\t    }\n+ \t\t  __retval = __i;\n+ \t\t}\n+ \t      else\n+ \t\t__retval = traits_type::not_eof(__i);\n+ \t    }\n \t}\n       _M_last_overflowed = false;\t\n       return __retval;\n@@ -355,7 +392,7 @@ namespace std\n \t  // stack. Convert internal buffer plus __c (ie,\n \t  // \"pending sequence\") to temporary conversion buffer.\n \t  int __plen = _M_out_end - _M_out_beg;\n-\t  char_type __pbuf[__plen + sizeof(char_type)];\t      \n+\t  char_type __pbuf[__plen + 1];\t      \n \t  traits_type::copy(__pbuf, this->pbase(), __plen);\n \t  if (!__testeof)\n \t    {\n@@ -411,6 +448,9 @@ namespace std\n       \n       if (__testopen && !__testfail && (__testin || __testout))\n \t{\n+\t  // Ditch any pback buffers to avoid confusion.\n+\t  _M_pback_destroy();\n+\n \t  if (__way != ios_base::cur || __off != 0)\n \t    { \n \t      off_type __computed_off = __width * __off;\n@@ -464,68 +504,7 @@ namespace std\n     void \n     basic_filebuf<_CharT, _Traits>::\n     _M_output_unshift()\n-    {\n-#if 0\n-      // XXX Not complete, or correct.\n-      int __width = _M_fcvt->encoding();\n-      \n-      if (__width < 0)\n-\t{\n-\t  // Part one: call codecvt::unshift\n-\t  int __unsft_len = 0;\n-\t  char_type __unsft_buf[_M_buf_size];\n-\t    char_type* __unsft_cur; // XXX Set to external buf.\n-\t    _M_state_beg = _M_state_cur;\n-\t    __res_type __r = _M_fcvt->unshift(_M_state_cur, \n-\t\t\t\t\t      __unsft_buf,\n-\t\t\t\t\t      __unsft_buf + _M_buf_size,\n-\t\t\t\t\t      __unsft_cur);\n-\t    \n-\t    // Note, for char_type == char, wchar_t unshift\n-\t    // should store no charachers.\n-\t    if (__r == codecvt_base::ok || __r == codecvt_base::noconv)\n-\t      __unsft_len = __unsft_cur - __unsft_buf;\n-\t    \n-\t    // \"Output the resulting sequence.\"\n-\t    if (__unsft_len)\n-\t      {\n-\t\tint __plen = _M_out_cur - _M_out_beg;\n-\t\tint __rlen = __plen  + __unsft_len;\n-\t\tchar_type __rbuf[__rlen];\n-\t\tchar_type* __rend;\n-\t\ttraits_type::copy(__rbuf, this->pbase(), __plen);\n-\t\ttraits_type::copy(__rbuf + __plen, __unsft_buf, \n-\t\t\t\t  __unsft_len);\n-\n-\t\tchar __conv_buf[__rlen];\n-\t\tchar* __conv_end;\n-\t\t\n-\t\t_M_state_beg = _M_state_cur; // XXX Needed?\n-\t\t__r = _M_fcvt->out(_M_state_cur, \n-\t\t\t\t  __rbuf, __rbuf + __rlen,\n-\t\t\t\t  const_cast<const char_type*&>(__rend),\n-\t\t\t\t  __conv_buf, \n-\t\t\t\t  __conv_buf + __rlen,\n-\t\t\t\t  __conv_end);\n-\t\t\n-\t\tif (__r != codecvt_base::error)\n-\t\t  {\n-\t\t    streamsize __r = _M_file->xsputn(__conv_buf, __rlen);\n-\t\t    if (__r == __rlen)\n-\t\t      {\n-\t\t\t_M_out_cur = _M_out_beg;\n-\t\t\tif (_M_mode & ios_base::in)\n-\t\t\t  _M_in_cur = _M_out_cur;\n-\t\t      }\n-\t\t    else\n-\t\t      {\n-\t\t\t// XXX Throw \"wig out and die exception?\"\n-\t\t      }\n-\t\t  }\n-\t      }\n-\t  }\n-#endif\n-    }\n+    { }\n \n   template<typename _CharT, typename _Traits>\n     void"}, {"sha": "14be3f25c56a303b547af166643590715a186701", "filename": "libstdc++-v3/bits/locale_facets.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.h?ref=7be50fd30fa08028f2ea7ac281cd0a310151d3b9", "patch": "@@ -1268,7 +1268,7 @@ namespace std\n     protected:\n       // For use only during construction\n       void \n-      _M_init_boolnames(const string_type& __t, const string_type& __f)\n+      _M_boolnames_init(const string_type& __t, const string_type& __f)\n       {\n \t_M_truename = __t;\n \t_M_falsename = __f;\n@@ -1297,15 +1297,15 @@ namespace std\n     numpunct<char>::numpunct(size_t __refs): _Numpunct<char>(__refs)\n     {\n       _M_init('.', ',', \"\");\n-      _M_init_boolnames(\"true\", \"false\");\n+      _M_boolnames_init(\"true\", \"false\");\n     }\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<> \n     numpunct<wchar_t>::numpunct(size_t __refs): _Numpunct<wchar_t>(__refs)\n     {\n       _M_init(L'.', L',', \"\");\n-      _M_init_boolnames(L\"true\", L\"false\");\n+      _M_boolnames_init(L\"true\", L\"false\");\n     }\n #endif\n "}, {"sha": "ceb376c02b667392b311ff7cbd97bf9565b10979", "filename": "libstdc++-v3/bits/localefwd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Flocalefwd.h?ref=7be50fd30fa08028f2ea7ac281cd0a310151d3b9", "patch": "@@ -370,7 +370,7 @@ namespace std\n \n     template<typename _Facet>\n       inline void \n-      _M_init_facet(_Facet* __facet)\n+      _M_facet_init(_Facet* __facet)\n       { _M_install_facet(&_Facet::id, __facet);  }\n \n     void "}, {"sha": "4ffbb245447efe8965347f8842a6bc78fd907e32", "filename": "libstdc++-v3/bits/std_fstream.h", "status": "modified", "additions": 49, "deletions": 8, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2Fbits%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2Fbits%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fstd_fstream.h?ref=7be50fd30fa08028f2ea7ac281cd0a310151d3b9", "patch": "@@ -52,7 +52,7 @@ namespace std {\n       typedef typename traits_type::int_type \t\tint_type;\n       typedef typename traits_type::pos_type \t\tpos_type;\n       typedef typename traits_type::off_type \t\toff_type;\n-\n+      \n       // Non-standard Types:\n       typedef basic_streambuf<char_type, traits_type>  \t__streambuf_type;\n       typedef basic_filebuf<char_type, traits_type>     __filebuf_type;\n@@ -65,13 +65,22 @@ namespace std {\n \n     private:\n       // Data Members:\n+      // External buffer.\n       __file_type* \t\t_M_file;\n-      __state_type\t\t_M_state_cur;// Current state type for codecvt.\n+\n+      // Current and beginning state type for codecvt.\n+      __state_type\t\t_M_state_cur;\n       __state_type \t\t_M_state_beg; \t\n-      const __codecvt_type*\t_M_fcvt;       // Cached value from use_facet.\n+\n+      // Cached value from use_facet.\n+      const __codecvt_type*\t_M_fcvt;       \n+      \n+      // MT lock inherited from libio or other low-level io library.\n       __c_lock          \t_M_lock;\n-      bool\t\t\t_M_last_overflowed;  // XXX Needed?\n- \n+\n+      // XXX Needed? \n+      bool\t\t\t_M_last_overflowed;  \n+  \n     public:\n       // Constructors/destructor:\n       basic_filebuf();\n@@ -98,9 +107,13 @@ namespace std {\n       close(void);\n \n     protected:\n-      // Common initialization code for both ctors goes here.\n+      // Allocate up pback and internal buffers.\n+      void \n+      _M_allocate_buffers();\n+\n+      // Create __file_type object and initialize it properly.\n       void\n-      _M_init_filebuf(void);\n+      _M_filebuf_init();\n \n       // Overridden virtual functions:\n       virtual streamsize \n@@ -173,7 +186,7 @@ namespace std {\n \t    // (_M_out_beg - _M_out_cur)\n \t    streamoff __cur = _M_file->seekoff(0, ios_base::cur);\n \t    off_type __off = _M_out_cur - _M_out_beg;\n-\t    this->_M_really_overflow();\n+\t    _M_really_overflow();\n \t    _M_file->seekpos(__cur + __off);\n \t  }\n \t_M_last_overflowed = false;\t\n@@ -183,6 +196,34 @@ namespace std {\n       virtual void \n       imbue(const locale& __loc);\n \n+      virtual streamsize \n+      xsgetn(char_type* __s, streamsize __n)\n+      {\n+\tstreamsize __retval = 0;\n+\t// Clear out pback buffer before going on to the real deal...\n+\tif (_M_pback_init)\n+\t  {\n+\t    while (__retval < __n && _M_in_cur < _M_in_end)\n+\t      {\n+\t\t*__s = *_M_in_cur;\n+\t\t++__retval;\n+\t\t++__s;\n+\t\t++_M_in_cur;\n+\t      }\n+\t    _M_pback_destroy();\n+\t  }\n+\tif (__retval < __n)\n+\t  __retval += __streambuf_type::xsgetn(__s, __n - __retval);\n+\treturn __retval;\n+      }\n+ \n+      virtual streamsize \n+      xsputn(const char_type* __s, streamsize __n)\n+      {\n+\t_M_pback_destroy();\n+\treturn __streambuf_type::xsputn(__s, __n);\n+      }\n+       \n       void\n       _M_output_unshift();\n     };"}, {"sha": "343919c68c2f788283b3fced44d63f2728b23d08", "filename": "libstdc++-v3/bits/std_sstream.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2Fbits%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2Fbits%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fstd_sstream.h?ref=7be50fd30fa08028f2ea7ac281cd0a310151d3b9", "patch": "@@ -64,13 +64,13 @@ namespace std {\n       explicit \n       basic_stringbuf(ios_base::openmode __mode = ios_base::in | ios_base::out)\n       : __streambuf_type(), _M_string()\n-      { _M_init_stringbuf(__mode); }\n+      { _M_stringbuf_init(__mode); }\n \n       explicit \n       basic_stringbuf(const __string_type& __str,\n \t\t      ios_base::openmode __mode = ios_base::in | ios_base::out)\n       : __streambuf_type(), _M_string(__str)\n-      { _M_init_stringbuf(__mode); }\n+      { _M_stringbuf_init(__mode); }\n \n       // Get and set:\n       __string_type \n@@ -95,13 +95,13 @@ namespace std {\n       str(const __string_type& __s)\n       {\n \t_M_string = __s;\n-\t_M_init_stringbuf(_M_mode);\n+\t_M_stringbuf_init(_M_mode);\n       }\n \n     protected:\n       // Common initialization code for both ctors goes here.\n       void\n-      _M_init_stringbuf(ios_base::openmode __mode)\n+      _M_stringbuf_init(ios_base::openmode __mode)\n       {\n \t// _M_buf_size is a convenient alias for \"what the streambuf\n \t// thinks the allocated size of the string really is.\" This is"}, {"sha": "35e214c9123c03e7ac58cfc33b2c898e286eb778", "filename": "libstdc++-v3/bits/std_streambuf.h", "status": "modified", "additions": 74, "deletions": 10, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2Fbits%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2Fbits%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fstd_streambuf.h?ref=7be50fd30fa08028f2ea7ac281cd0a310151d3b9", "patch": "@@ -98,11 +98,11 @@ namespace std {\n       // for an internal buffer.\n       // get == input == read\n       // put == output == write\n-      char_type* \t\t_M_in_cur;\t// Current read area. \n       char_type* \t\t_M_in_beg;  \t// Start of get area. \n+      char_type* \t\t_M_in_cur;\t// Current read area. \n       char_type* \t\t_M_in_end;\t// End of get area. \n-      char_type* \t\t_M_out_cur;  \t// Current put area. \n       char_type* \t\t_M_out_beg; \t// Start of put area. \n+      char_type* \t\t_M_out_cur;  \t// Current put area. \n       char_type* \t\t_M_out_end;  \t// End of put area. \n \n       // Place to stash in || out || in | out settings for current streambuf.\n@@ -117,6 +117,61 @@ namespace std {\n       // Cached use_facet<ctype>, which is based on the current locale info.\n       const __ctype_type*\t_M_buf_fctype;      \n \n+      // Necessary bits for putback buffer management. Only used in\n+      // the basic_filebuf class, as necessary for the standard\n+      // requirements. The only basic_streambuf member function that\n+      // needs access to these data members is in_avail...\n+      // NB: pbacks of over one character are not currently supported.\n+      int_type    \t\t_M_pback_size; \n+      char_type*\t\t_M_pback; \n+      char_type*\t\t_M_pback_cur_save;\n+      char_type*\t\t_M_pback_end_save;\n+      bool\t\t\t_M_pback_init; \n+\n+      // Initializes pback buffers, and moves normal buffers to safety.\n+      // Assumptions:\n+      // _M_in_cur has already been moved back\n+      void\n+      _M_pback_create()\n+      {\n+\tif (!_M_pback_init)\n+\t  {\n+\t    int_type __dist = _M_in_end - _M_in_cur;\n+\t    int_type __len = min(_M_pback_size, __dist);\n+\t    traits_type::copy(_M_pback, _M_in_cur, __len);\n+\t    _M_pback_cur_save = _M_in_cur;\n+\t    _M_pback_end_save = _M_in_end;\n+\t    this->setg(_M_pback, _M_pback, _M_pback + __len);\n+\t    _M_pback_init = true;\n+\t  }\n+      }\n+\n+      // Deactivates pback buffer contents, and restores normal buffer.\n+      // Assumptions:\n+      // The pback buffer has only moved forward.\n+      void\n+      _M_pback_destroy()\n+      {\n+\tif (_M_pback_init)\n+\t  {\n+\t    // Length _M_in_cur moved in the pback buffer.\n+\t    int_type __off_cur = _M_in_cur - _M_pback;\n+\t    \n+\t    // For in | out buffers, the end can be pushed back...\n+\t    int_type __off_end = 0;\n+\t    int_type __pback_len = _M_in_end - _M_pback;\n+\t    int_type __save_len = _M_pback_end_save - _M_buf;\n+\t    if (__pback_len > __save_len)\n+\t      __off_end = __pback_len - __save_len;\n+\n+\t    this->setg(_M_buf, _M_pback_cur_save + __off_cur, \n+\t\t       _M_pback_end_save + __off_end);\n+\t    _M_pback_cur_save = NULL;\n+\t    _M_pback_end_save = NULL;\n+\t    _M_pback_init = false;\n+\t  }\n+      }\n+\n       // Correctly sets the _M_out_cur pointer, and bumps the\n       // appropriate _M_*_end pointers as well. Necessary for the\n       // un-tied stringbufs, in in|out mode.\n@@ -195,6 +250,7 @@ namespace std {\n \t_M_mode = ios_base::openmode(0);\n \t_M_buf_fctype = NULL;\n \t_M_buf_locale_init = false;\n+\n       }\n \n       // Locales:\n@@ -240,7 +296,16 @@ namespace std {\n       { \n \tstreamsize __retval;\n \tif (_M_in_cur && _M_in_cur < _M_in_end)\n-\t  __retval = this->egptr() - this->gptr();\n+\t  {\n+\t    if (_M_pback_init)\n+\t      {\n+\t\tint_type __save_len =  _M_pback_end_save - _M_pback_cur_save;\n+\t\tint_type __pback_len = _M_in_cur - _M_pback;\n+\t\t__retval = __save_len - __pback_len;\n+\t      }\n+\t    else\n+\t      __retval = this->egptr() - this->gptr();\n+\t  }\n \telse\n \t  __retval = this->showmanyc();\n \treturn __retval;\n@@ -289,13 +354,12 @@ namespace std {\n     protected:\n       basic_streambuf()\n       : _M_buf(NULL), _M_buf_size(0), \n-\t_M_buf_size_opt(static_cast<int_type>(BUFSIZ * sizeof(char_type))),\n-\t_M_buf_unified(false), _M_in_cur(0), _M_in_beg(0), _M_in_end(0), \n-\t_M_out_cur(0), _M_out_beg(0), _M_out_end(0), \n-\t_M_mode(ios_base::openmode(0)), _M_buf_locale(locale()), \n-\t_M_buf_locale_init(false) \n-\n-      { _M_buf_fctype =  &use_facet<__ctype_type>(this->getloc()); }\n+      _M_buf_size_opt(static_cast<int_type>(BUFSIZ)), _M_buf_unified(false), \n+      _M_in_beg(0), _M_in_cur(0), _M_in_end(0), _M_out_beg(0), _M_out_cur(0), \n+      _M_out_end(0), _M_mode(ios_base::openmode(0)), _M_buf_locale(locale()), \n+      _M_buf_locale_init(false), _M_pback_size(1), _M_pback(NULL), \n+      _M_pback_cur_save(NULL), _M_pback_end_save(NULL), _M_pback_init(false)\n+      { _M_buf_fctype = &use_facet<__ctype_type>(this->getloc()); }\n \n       // Get area:\n       char_type* "}, {"sha": "15dcf996ca8823b4d88c028b9037f4a85cfe32a2", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=7be50fd30fa08028f2ea7ac281cd0a310151d3b9", "patch": "@@ -338,44 +338,44 @@ namespace std {\n \t  // (constructor for (*the_classic_locale) adds a third)\n \t    \n \t  // collate category\n-\t  _S_classic->_M_init_facet(new std::collate<char>);\n+\t  _S_classic->_M_facet_init(new std::collate<char>);\n \t  \n \t  // ctype category\n-\t  _S_classic->_M_init_facet(new std::ctype<char>);\n-\t  _S_classic->_M_init_facet(new codecvt<char, char, mbstate_t>);\n+\t  _S_classic->_M_facet_init(new std::ctype<char>);\n+\t  _S_classic->_M_facet_init(new codecvt<char, char, mbstate_t>);\n \n \t  // monetary category\n-\t  _S_classic->_M_init_facet(new moneypunct<char, false>);\n-\t  _S_classic->_M_init_facet(new moneypunct<char,true >);\n-\t  _S_classic->_M_init_facet(new money_get<char>);\n-\t  _S_classic->_M_init_facet(new money_put<char>);\n+\t  _S_classic->_M_facet_init(new moneypunct<char, false>);\n+\t  _S_classic->_M_facet_init(new moneypunct<char,true >);\n+\t  _S_classic->_M_facet_init(new money_get<char>);\n+\t  _S_classic->_M_facet_init(new money_put<char>);\n \t  \n \t  // numeric category\n-\t  _S_classic->_M_init_facet(new numpunct<char>);\n-\t  _S_classic->_M_init_facet(new num_get<char>);\n-\t  _S_classic->_M_init_facet(new num_put<char>);\n+\t  _S_classic->_M_facet_init(new numpunct<char>);\n+\t  _S_classic->_M_facet_init(new num_get<char>);\n+\t  _S_classic->_M_facet_init(new num_put<char>);\n \t  \n \t  // time category\n-\t  _S_classic->_M_init_facet(new time_get<char>);\n-\t  _S_classic->_M_init_facet(new time_put<char>);\n+\t  _S_classic->_M_facet_init(new time_get<char>);\n+\t  _S_classic->_M_facet_init(new time_put<char>);\n \t  \n \t  // messages category\n-\t  _S_classic->_M_init_facet(new std::messages<char>);\n+\t  _S_classic->_M_facet_init(new std::messages<char>);\n \n #ifdef  _GLIBCPP_USE_WCHAR_T\n-\t  _S_classic->_M_init_facet(new std::collate<wchar_t>);\n-\t  _S_classic->_M_init_facet(new std::ctype<wchar_t>);\n-\t  _S_classic->_M_init_facet(new codecvt<wchar_t, char, mbstate_t>);\n-\t  _S_classic->_M_init_facet(new moneypunct<wchar_t, false>);\n-\t  _S_classic->_M_init_facet(new moneypunct<wchar_t,true >);\n-\t  _S_classic->_M_init_facet(new money_get<wchar_t>);\n-\t  _S_classic->_M_init_facet(new money_put<wchar_t>);\n-\t  _S_classic->_M_init_facet(new numpunct<wchar_t>);\n-\t  _S_classic->_M_init_facet(new num_get<wchar_t>);\n-\t  _S_classic->_M_init_facet(new num_put<wchar_t>);\n-\t  _S_classic->_M_init_facet(new time_get<wchar_t>);\n-\t  _S_classic->_M_init_facet(new time_put<wchar_t>);\n-\t  _S_classic->_M_init_facet(new std::messages<wchar_t>);\n+\t  _S_classic->_M_facet_init(new std::collate<wchar_t>);\n+\t  _S_classic->_M_facet_init(new std::ctype<wchar_t>);\n+\t  _S_classic->_M_facet_init(new codecvt<wchar_t, char, mbstate_t>);\n+\t  _S_classic->_M_facet_init(new moneypunct<wchar_t, false>);\n+\t  _S_classic->_M_facet_init(new moneypunct<wchar_t,true >);\n+\t  _S_classic->_M_facet_init(new money_get<wchar_t>);\n+\t  _S_classic->_M_facet_init(new money_put<wchar_t>);\n+\t  _S_classic->_M_facet_init(new numpunct<wchar_t>);\n+\t  _S_classic->_M_facet_init(new num_get<wchar_t>);\n+\t  _S_classic->_M_facet_init(new num_put<wchar_t>);\n+\t  _S_classic->_M_facet_init(new time_get<wchar_t>);\n+\t  _S_classic->_M_facet_init(new time_put<wchar_t>);\n+\t  _S_classic->_M_facet_init(new std::messages<wchar_t>);\n #endif\t  \n \n \t  // finesse static init order hassles"}, {"sha": "200346930c9c303c570860a4cefd5793e28bd7ef", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=7be50fd30fa08028f2ea7ac281cd0a310151d3b9", "patch": "@@ -147,30 +147,30 @@ namespace std {\n   locale::_Impl::_M_construct_collate(const char* /*name*/)\n   {\n #if 0\n-    _M_init_facet(new std::collate_byname<char>(name));\n-    _M_init_facet(new std::collate_byname<wchar_t>(name));\n+    _M_facet_init(new std::collate_byname<char>(name));\n+    _M_facet_init(new std::collate_byname<wchar_t>(name));\n #endif\n   }\n \n   void \n   locale::_Impl::_M_construct_ctype(const char* /*name*/)\n   {\n #if 0\n-    _M_init_facet(new std::ctype_byname<char>(name));\n-    _M_init_facet(new std::ctype_byname<wchar_t>(name));\n-    _M_init_facet(new std::codecvt_byname<char,char,mbstate_t>(name));\n-    _M_init_facet(new std::codecvt_byname<wchar_t,char,mbstate_t>(name));\n+    _M_facet_init(new std::ctype_byname<char>(name));\n+    _M_facet_init(new std::ctype_byname<wchar_t>(name));\n+    _M_facet_init(new std::codecvt_byname<char,char,mbstate_t>(name));\n+    _M_facet_init(new std::codecvt_byname<wchar_t,char,mbstate_t>(name));\n #endif\n   }\n     \n   void \n   locale::_Impl::_M_construct_monetary(const char* /*name*/)\n   {\n #if 0\n-    _M_init_facet(new std::moneypunct_byname<char,false>(name));\n-    _M_init_facet(new std::moneypunct_byname<wchar_t,false>(name));\n-    _M_init_facet(new std::moneypunct_byname<char,true >(name));\n-    _M_init_facet(new std::moneypunct_byname<wchar_t,true >(name));\n+    _M_facet_init(new std::moneypunct_byname<char,false>(name));\n+    _M_facet_init(new std::moneypunct_byname<wchar_t,false>(name));\n+    _M_facet_init(new std::moneypunct_byname<char,true >(name));\n+    _M_facet_init(new std::moneypunct_byname<wchar_t,true >(name));\n \n     locale::_M_initialize();\n     _M_replace_facet(locale::_S_classic, &std::money_get<char>(name)::id);\n@@ -184,8 +184,8 @@ namespace std {\n   locale::_Impl::_M_construct_numeric(const char* /*name*/)\n   {\n #if 0\n-    _M_init_facet(new std::numpunct_byname<char>(name));\n-    _M_init_facet(new std::numpunct_byname<wchar_t>(name));\n+    _M_facet_init(new std::numpunct_byname<char>(name));\n+    _M_facet_init(new std::numpunct_byname<wchar_t>(name));\n \n     locale::_M_initialize();\n     _M_replace_facet(locale::_S_classic, &std::num_get<char>::id);\n@@ -199,19 +199,19 @@ namespace std {\n   locale::_Impl::_M_construct_time(const char* /*name*/)\n   {\n #if 0\n-    _M_init_facet(new std::time_get_byname<char>(name));\n-    _M_init_facet(new std::time_get_byname<wchar_t>(name));\n-    _M_init_facet(new std::time_put_byname<char>(name));\n-    _M_init_facet(new std::time_put_byname<wchar_t>(name));\n+    _M_facet_init(new std::time_get_byname<char>(name));\n+    _M_facet_init(new std::time_get_byname<wchar_t>(name));\n+    _M_facet_init(new std::time_put_byname<char>(name));\n+    _M_facet_init(new std::time_put_byname<wchar_t>(name));\n #endif\n   }\n     \n   void \n   locale::_Impl::_M_construct_messages(const char* /*name*/)\n   {\n #if 0\n-    _M_init_facet(new std::messages_byname<char>(name));\n-    _M_init_facet(new std::messages_byname<wchar_t>(name));\n+    _M_facet_init(new std::messages_byname<char>(name));\n+    _M_facet_init(new std::messages_byname<wchar_t>(name));\n #endif\n   }\n "}, {"sha": "0a81f51129010b2252bec02b5d237dfe4f89b2bf", "filename": "libstdc++-v3/testsuite/27_io/filebuf-3.tst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf-3.tst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf-3.tst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf-3.tst?ref=7be50fd30fa08028f2ea7ac281cd0a310151d3b9", "patch": "@@ -1,6 +1,6 @@\n bd2\n 456x\n-9mzuva?@ABCDEFGHIJKLMNOPQRSTUVWXYZracadabras, i wannaz\n+9m;uva?@ABCDEFGHIJKLMNOPQRSTUVWXYZracadabras, i wanna \n because because\n because. . .\n of the wonderful things he does!!"}, {"sha": "3e0450e388ffd5569ad17d4346b15a86cc54d058", "filename": "libstdc++-v3/testsuite/27_io/filebuf.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be50fd30fa08028f2ea7ac281cd0a310151d3b9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf.cc?ref=7be50fd30fa08028f2ea7ac281cd0a310151d3b9", "patch": "@@ -337,7 +337,7 @@ bool test03() {\n   strmsz_1 = fb_03.in_avail();\n   c2 = fb_03.sungetc(); // delete the 'a'\n   strmsz_2 = fb_03.in_avail();\n-  test &= c2 == 'v';\n+  test &= c2 == 'v'; //  test &= c2 != traits_type::eof();\n   test &= strmsz_1 + 1 == strmsz_2;\n   //test for _in_cur == _in_beg\n   for (int i = 50; i < 32 + 29; ++i)"}]}