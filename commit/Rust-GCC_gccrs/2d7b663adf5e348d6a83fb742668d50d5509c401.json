{"sha": "2d7b663adf5e348d6a83fb742668d50d5509c401", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ3YjY2M2FkZjVlMzQ4ZDZhODNmYjc0MjY2OGQ1MGQ1NTA5YzQwMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-22T15:11:45Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-22T15:11:45Z"}, "message": "alpha.c (alpha_trampoline_init): Rename from alpha_initialize_trampoline.\n\n        * config/alpha/alpha.c (alpha_trampoline_init): Rename from\n        alpha_initialize_trampoline.  Make static.  Merge VMS parameter\n        differences into the TARGET_ABI_OPEN_VMS code block.\n        (TARGET_TRAMPOLINE_INIT): New.\n        * config/alpha/alpha.h (TRAMPOLINE_TEMPLATE): Remove.\n        (TRAMPOLINE_SECTION, INITIALIZE_TRAMPOLINE): Remove.\n        * config/alpha/vms.h (TRAMPOLINE_SIZE, TRAMPOLINE_ALIGNMENT):\n        * Remove.\n        (INITIALIZE_TRAMPOLINE): Remove.\n\nFrom-SVN: r151984", "tree": {"sha": "ce428d08b140bbc34ad3527d62a04ece98de812d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce428d08b140bbc34ad3527d62a04ece98de812d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d7b663adf5e348d6a83fb742668d50d5509c401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7b663adf5e348d6a83fb742668d50d5509c401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d7b663adf5e348d6a83fb742668d50d5509c401", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7b663adf5e348d6a83fb742668d50d5509c401/comments", "author": null, "committer": null, "parents": [{"sha": "531ca746f972a758565b0623288ea24162442248", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/531ca746f972a758565b0623288ea24162442248", "html_url": "https://github.com/Rust-GCC/gccrs/commit/531ca746f972a758565b0623288ea24162442248"}], "stats": {"total": 148, "additions": 55, "deletions": 93}, "files": [{"sha": "999f019067ddc24c6b41bdf247cc8d7ba2dc811c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7b663adf5e348d6a83fb742668d50d5509c401/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7b663adf5e348d6a83fb742668d50d5509c401/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d7b663adf5e348d6a83fb742668d50d5509c401", "patch": "@@ -35,6 +35,15 @@\n \ttargetm.asm_out.trampoline_template.  Make the memory block const\n \tand set its size.\n \n+        * config/alpha/alpha.c (alpha_trampoline_init): Rename from\n+        alpha_initialize_trampoline.  Make static.  Merge VMS parameter\n+        differences into the TARGET_ABI_OPEN_VMS code block.\n+\t(TARGET_TRAMPOLINE_INIT): New.\n+        * config/alpha/alpha.h (TRAMPOLINE_TEMPLATE): Remove.\n+        (TRAMPOLINE_SECTION, INITIALIZE_TRAMPOLINE): Remove.\n+        * config/alpha/vms.h (TRAMPOLINE_SIZE, TRAMPOLINE_ALIGNMENT): Remove.\n+        (INITIALIZE_TRAMPOLINE): Remove.\n+\n 2009-09-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/41395"}, {"sha": "86fd1ee5599bb9e39e99ed47cb820d4706229a49", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 45, "deletions": 43, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7b663adf5e348d6a83fb742668d50d5509c401/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7b663adf5e348d6a83fb742668d50d5509c401/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=2d7b663adf5e348d6a83fb742668d50d5509c401", "patch": "@@ -5541,34 +5541,23 @@ print_operand_address (FILE *file, rtx addr)\n }\n \f\n /* Emit RTL insns to initialize the variable parts of a trampoline at\n-   TRAMP. FNADDR is an RTX for the address of the function's pure\n-   code.  CXT is an RTX for the static chain value for the function.\n+   M_TRAMP.  FNDECL is target function's decl.  CHAIN_VALUE is an rtx\n+   for the static chain value for the function.  */\n \n-   The three offset parameters are for the individual template's\n-   layout.  A JMPOFS < 0 indicates that the trampoline does not\n-   contain instructions at all.\n-\n-   We assume here that a function will be called many more times than\n-   its address is taken (e.g., it might be passed to qsort), so we\n-   take the trouble to initialize the \"hint\" field in the JMP insn.\n-   Note that the hint field is PC (new) + 4 * bits 13:0.  */\n-\n-void\n-alpha_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt,\n-\t\t\t     int fnofs, int cxtofs, int jmpofs)\n+static void\n+alpha_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n {\n-  rtx addr;\n-  /* VMS really uses DImode pointers in memory at this point.  */\n-  enum machine_mode mode = TARGET_ABI_OPEN_VMS ? Pmode : ptr_mode;\n+  rtx fnaddr, mem, word1, word2;\n+\n+  fnaddr = XEXP (DECL_RTL (fndecl), 0);\n \n #ifdef POINTERS_EXTEND_UNSIGNED\n-  fnaddr = convert_memory_address (mode, fnaddr);\n-  cxt = convert_memory_address (mode, cxt);\n+  fnaddr = convert_memory_address (Pmode, fnaddr);\n+  chain_value = convert_memory_address (Pmode, chain_value);\n #endif\n \n   if (TARGET_ABI_OPEN_VMS)\n     {\n-      rtx temp1, traddr;\n       const char *fnname;\n       char *trname;\n \n@@ -5577,37 +5566,48 @@ alpha_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt,\n       trname = (char *) alloca (strlen (fnname) + 5);\n       strcpy (trname, fnname);\n       strcat (trname, \"..tr\");\n-      traddr = gen_rtx_SYMBOL_REF\n-\t(mode, ggc_alloc_string (trname, strlen (trname) + 1));\n+      fnname = ggc_alloc_string (trname, strlen (trname) + 1);\n+      word2 = gen_rtx_SYMBOL_REF (Pmode, fnname);\n \n       /* Trampoline (or \"bounded\") procedure descriptor is constructed from\n \t the function's procedure descriptor with certain fields zeroed IAW\n \t the VMS calling standard. This is stored in the first quadword.  */\n-      temp1 = force_reg (DImode, gen_rtx_MEM (DImode, fnaddr));\n-      temp1 = expand_and (DImode, temp1,\n-\t\t\t  GEN_INT (0xffff0fff0000fff0), NULL_RTX);\n-      addr = memory_address (mode, plus_constant (tramp, 0));\n-      emit_move_insn (gen_rtx_MEM (DImode, addr), temp1);\n-\n-      /* Trampoline transfer address is stored in the second quadword\n-\t of the trampoline.  */\n-      addr = memory_address (mode, plus_constant (tramp, 8));\n-      emit_move_insn (gen_rtx_MEM (mode, addr), traddr);\n+      word1 = force_reg (DImode, gen_const_mem (DImode, fnaddr));\n+      word1 = expand_and (DImode, word1, GEN_INT (0xffff0fff0000fff0), NULL);\n     }\n+  else\n+    {\n+      /* These 4 instructions are:\n+\t    ldq $1,24($27)\n+\t    ldq $27,16($27)\n+\t    jmp $31,($27),0\n+\t    nop\n+\t We don't bother setting the HINT field of the jump; the nop\n+\t is merely there for padding.  */\n+      word1 = GEN_INT (0xa77b0010a43b0018);\n+      word2 = GEN_INT (0x47ff041f6bfb0000);\n+    }\n+\n+  /* Store the first two words, as computed above.  */\n+  mem = adjust_address (m_tramp, DImode, 0);\n+  emit_move_insn (mem, word1);\n+  mem = adjust_address (m_tramp, DImode, 8);\n+  emit_move_insn (mem, word2);\n+\n+  /* Store function address and static chain value.  */\n+  mem = adjust_address (m_tramp, Pmode, 16);\n+  emit_move_insn (mem, fnaddr);\n+  mem = adjust_address (m_tramp, Pmode, 24);\n+  emit_move_insn (mem, chain_value);\n \n-  /* Store function address and CXT.  */\n-  addr = memory_address (mode, plus_constant (tramp, fnofs));\n-  emit_move_insn (gen_rtx_MEM (mode, addr), fnaddr);\n-  addr = memory_address (mode, plus_constant (tramp, cxtofs));\n-  emit_move_insn (gen_rtx_MEM (mode, addr), cxt);\n-\n+  if (!TARGET_ABI_OPEN_VMS)\n+    {\n+      emit_insn (gen_imb ());\n #ifdef ENABLE_EXECUTE_STACK\n-  emit_library_call (init_one_libfunc (\"__enable_execute_stack\"),\n-\t\t     LCT_NORMAL, VOIDmode, 1, tramp, Pmode);\n+      emit_library_call (init_one_libfunc (\"__enable_execute_stack\"),\n+\t\t\t LCT_NORMAL, VOIDmode, 1, XEXP (m_tramp, 0), Pmode);\n #endif\n-\n-  if (jmpofs >= 0)\n-    emit_insn (gen_imb ());\n+    }\n }\n \f\n /* Determine where to put an argument to a function.\n@@ -11114,6 +11114,8 @@ alpha_init_libfuncs (void)\n #define TARGET_GIMPLIFY_VA_ARG_EXPR alpha_gimplify_va_arg\n #undef TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES alpha_arg_partial_bytes\n+#undef TARGET_TRAMPOLINE_INIT\n+#define TARGET_TRAMPOLINE_INIT alpha_trampoline_init\n \n #undef TARGET_SECONDARY_RELOAD\n #define TARGET_SECONDARY_RELOAD alpha_secondary_reload"}, {"sha": "6235d9ff90af47ebb3eed6674a2e8d091b181368", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7b663adf5e348d6a83fb742668d50d5509c401/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7b663adf5e348d6a83fb742668d50d5509c401/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=2d7b663adf5e348d6a83fb742668d50d5509c401", "patch": "@@ -838,28 +838,6 @@ extern int alpha_memory_latency;\n \n #define EPILOGUE_USES(REGNO)\t((REGNO) == 26)\n \f\n-/* Output assembler code for a block containing the constant parts\n-   of a trampoline, leaving space for the variable parts.\n-\n-   The trampoline should set the static chain pointer to value placed\n-   into the trampoline and should branch to the specified routine.\n-   Note that $27 has been set to the address of the trampoline, so we can\n-   use it for addressability of the two data items.  */\n-\n-#define TRAMPOLINE_TEMPLATE(FILE)\t\t\\\n-do {\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tldq $1,24($27)\\n\");\t\t\\\n-  fprintf (FILE, \"\\tldq $27,16($27)\\n\");\t\\\n-  fprintf (FILE, \"\\tjmp $31,($27),0\\n\");\t\\\n-  fprintf (FILE, \"\\tnop\\n\");\t\t\t\\\n-  fprintf (FILE, \"\\t.quad 0,0\\n\");\t\t\\\n-} while (0)\n-\n-/* Section in which to place the trampoline.  On Alpha, instructions\n-   may only be placed in a text segment.  */\n-\n-#define TRAMPOLINE_SECTION text_section\n-\n /* Length in units of the trampoline for entering a nested function.  */\n \n #define TRAMPOLINE_SIZE    32\n@@ -868,13 +846,6 @@ do {\t\t\t\t\t\t\\\n \n #define TRAMPOLINE_ALIGNMENT  64\n \n-/* Emit RTL insns to initialize the variable parts of a trampoline.\n-   FNADDR is an RTX for the address of the function's pure code.\n-   CXT is an RTX for the static chain value for the function.  */\n-\n-#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) \\\n-  alpha_initialize_trampoline (TRAMP, FNADDR, CXT, 16, 24, 8)\n-\n /* A C expression whose value is RTL representing the value of the return\n    address for the frame COUNT steps up from the current frame.\n    FRAMEADDR is the frame pointer of the COUNT frame, or the frame pointer of"}, {"sha": "277300828c98dc8750ae3b0e946ca4bf3cb2e784", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7b663adf5e348d6a83fb742668d50d5509c401/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7b663adf5e348d6a83fb742668d50d5509c401/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=2d7b663adf5e348d6a83fb742668d50d5509c401", "patch": "@@ -4869,7 +4869,7 @@\n   \"jmp $31,(%0),0\"\n   [(set_attr \"type\" \"ibr\")])\n \n-;; Cache flush.  Used by INITIALIZE_TRAMPOLINE.  0x86 is PAL_imb, but we don't\n+;; Cache flush.  Used by alpha_trampoline_init.  0x86 is PAL_imb, but we don't\n ;; want to have to include pal.h in our .s file.\n (define_insn \"imb\"\n   [(unspec_volatile [(const_int 0)] UNSPECV_IMB)]"}, {"sha": "c0b20f89d61b1bfc3eaa50cfa85697aed15265d6", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7b663adf5e348d6a83fb742668d50d5509c401/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7b663adf5e348d6a83fb742668d50d5509c401/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=2d7b663adf5e348d6a83fb742668d50d5509c401", "patch": "@@ -225,26 +225,6 @@ typedef struct {int num_args; enum avms_arg_type atypes[6];} avms_arg_info;\n #define ASM_OUTPUT_ALIGNED_DECL_COMMON(FILE, DECL, NAME, SIZE, ALIGN) \\\n   vms_output_aligned_decl_common (FILE, DECL, NAME, SIZE, ALIGN)\n \f\n-#undef TRAMPOLINE_TEMPLATE\n-\n-/* Length in units of the trampoline for entering a nested function.  */\n-\n-#undef TRAMPOLINE_SIZE\n-#define TRAMPOLINE_SIZE    32\n-\n-/* The alignment of a trampoline, in bits.  */\n-\n-#undef TRAMPOLINE_ALIGNMENT\n-#define TRAMPOLINE_ALIGNMENT  64\n-\n-/* Emit RTL insns to initialize the variable parts of a trampoline.\n-   FNADDR is an RTX for the address of the function's pure code.\n-   CXT is an RTX for the static chain value for the function.  */\n-\n-#undef INITIALIZE_TRAMPOLINE\n-#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) \\\n-  alpha_initialize_trampoline (TRAMP, FNADDR, CXT, 16, 24, -1)\n-\n /* Control how constructors and destructors are emitted.  */\n #define TARGET_ASM_CONSTRUCTOR  vms_asm_out_constructor\n #define TARGET_ASM_DESTRUCTOR   vms_asm_out_destructor"}]}