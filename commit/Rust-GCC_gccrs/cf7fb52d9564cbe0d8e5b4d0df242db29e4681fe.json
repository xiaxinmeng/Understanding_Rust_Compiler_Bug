{"sha": "cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y3ZmI1MmQ5NTY0Y2JlMGQ4ZTViNGQwZGYyNDJkYjI5ZTQ2ODFmZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-07-25T16:47:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-07-25T16:47:18Z"}, "message": "cp-tree.h (enum cp_tree_index): Add CPTI_{ABI_TAG,ALIGNED,BEGIN,END,GET,TUPLE_{ELEMENT,SIZE}}_IDENTIFIER and...\n\n\t* cp-tree.h (enum cp_tree_index): Add\n\tCPTI_{ABI_TAG,ALIGNED,BEGIN,END,GET,TUPLE_{ELEMENT,SIZE}}_IDENTIFIER\n\tand CPTI_{GNU,TYPE,VALUE,FUN,CLOSURE}_IDENTIFIER.\n\t(abi_tag_identifier, aligned_identifier, begin_identifier,\n\tend_identifier, get__identifier, gnu_identifier,\n\ttuple_element_identifier, tuple_size_identifier, type_identifier,\n\tvalue_identifier, fun_identifier, closure_identifier): Define.\n\t* decl.c (initialize_predefined_identifiers): Initialize the above\n\tidentifiers.\n\t(get_tuple_size): Use tuple_size_identifier instead of\n\tget_identifier (\"tuple_size\") and value_identifier instead of\n\tget_identifier (\"value\").\n\t(get_tuple_element_type): Use tuple_element_identifier instead of\n\tget_identifier (\"tuple_element\") and type_identifier instead of\n\tget_identifier (\"type\").\n\t(get_tuple_decomp_init): Use get__identifier instead of\n\tget_identifier (\"get\").\n\t* lambda.c (maybe_add_lambda_conv_op): Use fun_identifier instead of\n\tget_identifier (\"_FUN\").\n\t* parser.c (cp_parser_lambda_declarator_opt): Use closure_identifier\n\tinstead of get_identifier (\"__closure\").\n\t(cp_parser_std_attribute): Use gnu_identifier instead of\n\tget_identifier (\"gnu\").\n\t(cp_parser_std_attribute_spec): Likewise.  Use aligned_identifier\n\tinstead of get_identifier (\"aligned\").\n\t* class.c (check_abi_tags, inherit_targ_abi_tags): Use\n\tabi_tag_identifier instead of get_identifier (\"abi_tag\").\n\nFrom-SVN: r262976", "tree": {"sha": "a90e9515d42626fbb89e23c142acb42c5d207992", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a90e9515d42626fbb89e23c142acb42c5d207992"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "213f5e8accc3e6dad179eafd48c920e524b56be2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/213f5e8accc3e6dad179eafd48c920e524b56be2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/213f5e8accc3e6dad179eafd48c920e524b56be2"}], "stats": {"total": 103, "additions": 81, "deletions": 22}, "files": [{"sha": "4edb661a384f1b60d3a624d3ec02663c43dd04aa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe", "patch": "@@ -1,5 +1,33 @@\n 2018-07-25  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* cp-tree.h (enum cp_tree_index): Add\n+\tCPTI_{ABI_TAG,ALIGNED,BEGIN,END,GET,TUPLE_{ELEMENT,SIZE}}_IDENTIFIER\n+\tand CPTI_{GNU,TYPE,VALUE,FUN,CLOSURE}_IDENTIFIER.\n+\t(abi_tag_identifier, aligned_identifier, begin_identifier,\n+\tend_identifier, get__identifier, gnu_identifier,\n+\ttuple_element_identifier, tuple_size_identifier, type_identifier,\n+\tvalue_identifier, fun_identifier, closure_identifier): Define.\n+\t* decl.c (initialize_predefined_identifiers): Initialize the above\n+\tidentifiers.\n+\t(get_tuple_size): Use tuple_size_identifier instead of\n+\tget_identifier (\"tuple_size\") and value_identifier instead of\n+\tget_identifier (\"value\").\n+\t(get_tuple_element_type): Use tuple_element_identifier instead of\n+\tget_identifier (\"tuple_element\") and type_identifier instead of\n+\tget_identifier (\"type\").\n+\t(get_tuple_decomp_init): Use get__identifier instead of\n+\tget_identifier (\"get\").\n+\t* lambda.c (maybe_add_lambda_conv_op): Use fun_identifier instead of\n+\tget_identifier (\"_FUN\").\n+\t* parser.c (cp_parser_lambda_declarator_opt): Use closure_identifier\n+\tinstead of get_identifier (\"__closure\").\n+\t(cp_parser_std_attribute): Use gnu_identifier instead of\n+\tget_identifier (\"gnu\").\n+\t(cp_parser_std_attribute_spec): Likewise.  Use aligned_identifier\n+\tinstead of get_identifier (\"aligned\").\n+\t* class.c (check_abi_tags, inherit_targ_abi_tags): Use\n+\tabi_tag_identifier instead of get_identifier (\"abi_tag\").\n+\n \tPR c++/85515\n \t* cp-tree.h (enum cp_tree_index): Add\n \tCPTI_FOR_{RANGE,BEGIN,END}{,_}_IDENTIFIER."}, {"sha": "d2f78088b949217ce78ffc3bc53a3736032ad100", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe", "patch": "@@ -1517,8 +1517,7 @@ check_abi_tags (tree t, tree subob, bool just_checking = false)\n \tTREE_VALUE (attr) = chainon (data.tags, TREE_VALUE (attr));\n       else\n \tDECL_ATTRIBUTES (t)\n-\t  = tree_cons (get_identifier (\"abi_tag\"), data.tags,\n-\t\t       DECL_ATTRIBUTES (t));\n+\t  = tree_cons (abi_tag_identifier, data.tags, DECL_ATTRIBUTES (t));\n     }\n \n   mark_abi_tags (t, false);\n@@ -1590,8 +1589,7 @@ inherit_targ_abi_tags (tree t)\n \tTREE_VALUE (attr) = chainon (data.tags, TREE_VALUE (attr));\n       else\n \tTYPE_ATTRIBUTES (t)\n-\t  = tree_cons (get_identifier (\"abi_tag\"), data.tags,\n-\t\t       TYPE_ATTRIBUTES (t));\n+\t  = tree_cons (abi_tag_identifier, data.tags, TYPE_ATTRIBUTES (t));\n     }\n \n   mark_abi_tags (t, false);"}, {"sha": "d225702e42fc700bde50c58da604ec94d92856c5", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe", "patch": "@@ -160,6 +160,18 @@ enum cp_tree_index\n     CPTI_FOR_RANGE_IDENTIFIER,\n     CPTI_FOR_BEGIN_IDENTIFIER,\n     CPTI_FOR_END_IDENTIFIER,\n+    CPTI_ABI_TAG_IDENTIFIER,\n+    CPTI_ALIGNED_IDENTIFIER,\n+    CPTI_BEGIN_IDENTIFIER,\n+    CPTI_END_IDENTIFIER,\n+    CPTI_GET_IDENTIFIER,\n+    CPTI_GNU_IDENTIFIER,\n+    CPTI_TUPLE_ELEMENT_IDENTIFIER,\n+    CPTI_TUPLE_SIZE_IDENTIFIER,\n+    CPTI_TYPE_IDENTIFIER,\n+    CPTI_VALUE_IDENTIFIER,\n+    CPTI_FUN_IDENTIFIER,\n+    CPTI_CLOSURE_IDENTIFIER,\n \n     CPTI_LANG_NAME_C,\n     CPTI_LANG_NAME_CPLUSPLUS,\n@@ -286,6 +298,18 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n #define for_range_identifier\t\tcp_global_trees[CPTI_FOR_RANGE_IDENTIFIER]\n #define for_begin_identifier\t\tcp_global_trees[CPTI_FOR_BEGIN_IDENTIFIER]\n #define for_end_identifier\t\tcp_global_trees[CPTI_FOR_END_IDENTIFIER]\n+#define abi_tag_identifier\t\tcp_global_trees[CPTI_ABI_TAG_IDENTIFIER]\n+#define aligned_identifier\t\tcp_global_trees[CPTI_ALIGNED_IDENTIFIER]\n+#define begin_identifier\t\tcp_global_trees[CPTI_BEGIN_IDENTIFIER]\n+#define end_identifier\t\t\tcp_global_trees[CPTI_END_IDENTIFIER]\n+#define get__identifier\t\t\tcp_global_trees[CPTI_GET_IDENTIFIER]\n+#define gnu_identifier\t\t\tcp_global_trees[CPTI_GNU_IDENTIFIER]\n+#define tuple_element_identifier\tcp_global_trees[CPTI_TUPLE_ELEMENT_IDENTIFIER]\n+#define tuple_size_identifier\t\tcp_global_trees[CPTI_TUPLE_SIZE_IDENTIFIER]\n+#define type_identifier\t\t\tcp_global_trees[CPTI_TYPE_IDENTIFIER]\n+#define value_identifier\t\tcp_global_trees[CPTI_VALUE_IDENTIFIER]\n+#define fun_identifier\t\t\tcp_global_trees[CPTI_FUN_IDENTIFIER]\n+#define closure_identifier\t\tcp_global_trees[CPTI_CLOSURE_IDENTIFIER]\n #define lang_name_c\t\t\tcp_global_trees[CPTI_LANG_NAME_C]\n #define lang_name_cplusplus\t\tcp_global_trees[CPTI_LANG_NAME_CPLUSPLUS]\n "}, {"sha": "1206ddb3abe47d047ecc19bb1875bcc154f2a716", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe", "patch": "@@ -4050,6 +4050,18 @@ initialize_predefined_identifiers (void)\n     {\"__for_range\", &for_range_identifier, cik_normal},\n     {\"__for_begin\", &for_begin_identifier, cik_normal},\n     {\"__for_end\", &for_end_identifier, cik_normal},\n+    {\"abi_tag\", &abi_tag_identifier, cik_normal},\n+    {\"aligned\", &aligned_identifier, cik_normal},\n+    {\"begin\", &begin_identifier, cik_normal},\n+    {\"end\", &end_identifier, cik_normal},\n+    {\"get\", &get__identifier, cik_normal},\n+    {\"gnu\", &gnu_identifier, cik_normal},\n+    {\"tuple_element\", &tuple_element_identifier, cik_normal},\n+    {\"tuple_size\", &tuple_size_identifier, cik_normal},\n+    {\"type\", &type_identifier, cik_normal},\n+    {\"value\", &value_identifier, cik_normal},\n+    {\"_FUN\", &fun_identifier, cik_normal},\n+    {\"__closure\", &closure_identifier, cik_normal},\n     {NULL, NULL, cik_normal}\n   };\n \n@@ -7334,14 +7346,14 @@ get_tuple_size (tree type)\n {\n   tree args = make_tree_vec (1);\n   TREE_VEC_ELT (args, 0) = type;\n-  tree inst = lookup_template_class (get_identifier (\"tuple_size\"), args,\n+  tree inst = lookup_template_class (tuple_size_identifier, args,\n \t\t\t\t     /*in_decl*/NULL_TREE,\n \t\t\t\t     /*context*/std_node,\n \t\t\t\t     /*entering_scope*/false, tf_none);\n   inst = complete_type (inst);\n   if (inst == error_mark_node || !COMPLETE_TYPE_P (inst))\n     return NULL_TREE;\n-  tree val = lookup_qualified_name (inst, get_identifier (\"value\"),\n+  tree val = lookup_qualified_name (inst, value_identifier,\n \t\t\t\t    /*type*/false, /*complain*/false);\n   if (TREE_CODE (val) == VAR_DECL || TREE_CODE (val) == CONST_DECL)\n     val = maybe_constant_value (val);\n@@ -7359,12 +7371,12 @@ get_tuple_element_type (tree type, unsigned i)\n   tree args = make_tree_vec (2);\n   TREE_VEC_ELT (args, 0) = build_int_cst (integer_type_node, i);\n   TREE_VEC_ELT (args, 1) = type;\n-  tree inst = lookup_template_class (get_identifier (\"tuple_element\"), args,\n+  tree inst = lookup_template_class (tuple_element_identifier, args,\n \t\t\t\t     /*in_decl*/NULL_TREE,\n \t\t\t\t     /*context*/std_node,\n \t\t\t\t     /*entering_scope*/false,\n \t\t\t\t     tf_warning_or_error);\n-  return make_typename_type (inst, get_identifier (\"type\"),\n+  return make_typename_type (inst, type_identifier,\n \t\t\t     none_type, tf_warning_or_error);\n }\n \n@@ -7373,7 +7385,6 @@ get_tuple_element_type (tree type, unsigned i)\n static tree\n get_tuple_decomp_init (tree decl, unsigned i)\n {\n-  tree get_id = get_identifier (\"get\");\n   tree targs = make_tree_vec (1);\n   TREE_VEC_ELT (targs, 0) = build_int_cst (integer_type_node, i);\n \n@@ -7386,7 +7397,7 @@ get_tuple_decomp_init (tree decl, unsigned i)\n       || TYPE_REF_IS_RVALUE (etype))\n     e = move (e);\n \n-  tree fns = lookup_qualified_name (TREE_TYPE (e), get_id,\n+  tree fns = lookup_qualified_name (TREE_TYPE (e), get__identifier,\n \t\t\t\t    /*type*/false, /*complain*/false);\n   bool use_member_get = false;\n \n@@ -7418,7 +7429,7 @@ get_tuple_decomp_init (tree decl, unsigned i)\n   else\n     {\n       vec<tree,va_gc> *args = make_tree_vector_single (e);\n-      fns = lookup_template_function (get_id, targs);\n+      fns = lookup_template_function (get__identifier, targs);\n       fns = perform_koenig_lookup (fns, args, tf_warning_or_error);\n       return finish_call_expr (fns, &args, /*novirt*/false,\n \t\t\t       /*koenig*/true, tf_warning_or_error);"}, {"sha": "54fc3ee85c30691d204bafd293e39159f33c7ccb", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe", "patch": "@@ -1214,8 +1214,7 @@ maybe_add_lambda_conv_op (tree type)\n \n   /* Now build up the thunk to be returned.  */\n \n-  name = get_identifier (\"_FUN\");\n-  tree statfn = build_lang_decl (FUNCTION_DECL, name, stattype);\n+  tree statfn = build_lang_decl (FUNCTION_DECL, fun_identifier, stattype);\n   SET_DECL_LANGUAGE (statfn, lang_cplusplus);\n   fn = statfn;\n   DECL_SOURCE_LOCATION (fn) = DECL_SOURCE_LOCATION (callop);"}, {"sha": "d44a6b8802885d1a17fa3ae7c29af58ca678e214", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=cf7fb52d9564cbe0d8e5b4d0df242db29e4681fe", "patch": "@@ -10638,7 +10638,7 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n \tDECL_INITIALIZED_IN_CLASS_P (fco) = 1;\n \tDECL_ARTIFICIAL (fco) = 1;\n \t/* Give the object parameter a different name.  */\n-\tDECL_NAME (DECL_ARGUMENTS (fco)) = get_identifier (\"__closure\");\n+\tDECL_NAME (DECL_ARGUMENTS (fco)) = closure_identifier;\n       }\n     if (template_param_list)\n       {\n@@ -25341,13 +25341,13 @@ cp_parser_std_attribute (cp_parser *parser, tree attr_ns)\n \t\t\t\t   NULL_TREE);\n       /* C++11 noreturn attribute is equivalent to GNU's.  */\n       if (is_attribute_p (\"noreturn\", attr_id))\n-\tTREE_PURPOSE (TREE_PURPOSE (attribute)) = get_identifier (\"gnu\");\n+\tTREE_PURPOSE (TREE_PURPOSE (attribute)) = gnu_identifier;\n       /* C++14 deprecated attribute is equivalent to GNU's.  */\n       else if (is_attribute_p (\"deprecated\", attr_id))\n-\tTREE_PURPOSE (TREE_PURPOSE (attribute)) = get_identifier (\"gnu\");\n+\tTREE_PURPOSE (TREE_PURPOSE (attribute)) = gnu_identifier;\n       /* C++17 fallthrough attribute is equivalent to GNU's.  */\n       else if (is_attribute_p (\"fallthrough\", attr_id))\n-\tTREE_PURPOSE (TREE_PURPOSE (attribute)) = get_identifier (\"gnu\");\n+\tTREE_PURPOSE (TREE_PURPOSE (attribute)) = gnu_identifier;\n       /* Transactional Memory TS optimize_for_synchronized attribute is\n \t equivalent to GNU transaction_callable.  */\n       else if (is_attribute_p (\"optimize_for_synchronized\", attr_id))\n@@ -25367,7 +25367,7 @@ cp_parser_std_attribute (cp_parser *parser, tree attr_ns)\n     vec<tree, va_gc> *vec;\n     int attr_flag = normal_attr;\n \n-    if (attr_ns == get_identifier (\"gnu\")\n+    if (attr_ns == gnu_identifier\n \t&& attribute_takes_identifier_p (attr_id))\n       /* A GNU attribute that takes an identifier in parameter.  */\n       attr_flag = id_attr;\n@@ -25580,10 +25580,9 @@ cp_parser_std_attribute_spec (cp_parser *parser)\n \n       /* Build the C++-11 representation of an 'aligned'\n \t attribute.  */\n-      attributes =\n-\tbuild_tree_list (build_tree_list (get_identifier (\"gnu\"),\n-\t\t\t\t\t  get_identifier (\"aligned\")),\n-\t\t\t alignas_expr);\n+      attributes\n+\t= build_tree_list (build_tree_list (gnu_identifier,\n+\t\t\t\t\t    aligned_identifier), alignas_expr);\n     }\n \n   return attributes;"}]}