{"sha": "5a1218970f65f132de4d0ddc77a5d68768d19424", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWExMjE4OTcwZjY1ZjEzMmRlNGQwZGRjNzdhNWQ2ODc2OGQxOTQyNA==", "commit": {"author": {"name": "Ranjit Mathew", "email": "rmathew@gcc.gnu.org", "date": "2006-07-05T02:15:51Z"}, "committer": {"name": "Ranjit Mathew", "email": "rmathew@gcc.gnu.org", "date": "2006-07-05T02:15:51Z"}, "message": "libgcj.spec.in: Use THREADSTARTFILESPEC to affect the spec for startfile.\n\n\t* libgcj.spec.in: Use THREADSTARTFILESPEC to affect the spec for\n\tstartfile.\n\t* configure.ac: Allow targets to affect the spec for startfile\n\tby specifying a THREADSTARTFILESPEC variable.  Define this for\n\tthe win32 threads package to include crtmt.o.\n\t* configure: Regenerate.\n\t* win32.cc (_CRT_MT): Remove definition.\n\t(__mingwthr_key_dtor): Likewise.\n\n\nCo-Authored-By: Danny Smith <dannysmith@users.sourceforge.net>\n\nFrom-SVN: r115196", "tree": {"sha": "0a98e27f40c056a0c593499932dea332859cbd04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a98e27f40c056a0c593499932dea332859cbd04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a1218970f65f132de4d0ddc77a5d68768d19424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a1218970f65f132de4d0ddc77a5d68768d19424", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a1218970f65f132de4d0ddc77a5d68768d19424", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a1218970f65f132de4d0ddc77a5d68768d19424/comments", "author": null, "committer": null, "parents": [{"sha": "d2ab4cf72b60d8a81aea2a7e09e1b06a04a5c402", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2ab4cf72b60d8a81aea2a7e09e1b06a04a5c402", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2ab4cf72b60d8a81aea2a7e09e1b06a04a5c402"}], "stats": {"total": 75, "additions": 54, "deletions": 21}, "files": [{"sha": "60a8fdab10788362a8815f3fd02f779d7558b58e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1218970f65f132de4d0ddc77a5d68768d19424/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1218970f65f132de4d0ddc77a5d68768d19424/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=5a1218970f65f132de4d0ddc77a5d68768d19424", "patch": "@@ -1,3 +1,15 @@\n+2006-07-05  Ranjit Mathew  <rmathew@gcc.gnu.org>\n+            Danny Smith  <dannysmith@users.sourceforge.net>\n+\n+\t* libgcj.spec.in: Use THREADSTARTFILESPEC to affect the spec for\n+\tstartfile.\n+\t* configure.ac: Allow targets to affect the spec for startfile\n+\tby specifying a THREADSTARTFILESPEC variable.  Define this for\n+\tthe win32 threads package to include crtmt.o.\n+\t* configure: Regenerate.\n+\t* win32.cc (_CRT_MT): Remove definition.\n+\t(__mingwthr_key_dtor): Likewise.\n+\n 2006-07-04  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* testsuite/lib/libjava.exp (libjava_init): Call the GCJ_UNDER_TEST with"}, {"sha": "ed4bc3563410fae0e79b78e2791472ccb4fe7c18", "filename": "libjava/configure", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1218970f65f132de4d0ddc77a5d68768d19424/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1218970f65f132de4d0ddc77a5d68768d19424/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=5a1218970f65f132de4d0ddc77a5d68768d19424", "patch": "@@ -310,7 +310,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os build_subdir host_subdir target_subdir libgcj_basedir host host_cpu host_vendor host_os target target_cpu target_vendor target_os target_noncanonical LN_S mkinstalldirs CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LDFLAGS INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar DEPDIR am__include am__quote AMDEP_TRUE AMDEP_FALSE AMDEPBACKSLASH CCDEPMODE am__fastdepCC_TRUE am__fastdepCC_FALSE CXXDEPMODE am__fastdepCXX_TRUE am__fastdepCXX_FALSE AS ac_ct_AS LD ac_ct_LD AR ac_ct_AR RANLIB ac_ct_RANLIB JAR ZIP UNZIP BASH_JAR_TRUE BASH_JAR_FALSE MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBGCJ_CFLAGS LIBGCJ_CXXFLAGS LIBGCJ_JAVAFLAGS LIBGCJ_LD_SYMBOLIC LIBGCJDEBUG TOOLKIT XLIB_AWT_TRUE XLIB_AWT_FALSE GCJH INCLTDL LIBLTDL DIRLTDL LIBTOOL CXXCPP CPPFLAGS GCJ GCJFLAGS GCJDEPMODE am__fastdepGCJ_TRUE am__fastdepGCJ_FALSE subdirs TESTSUBDIR_TRUE TESTSUBDIR_FALSE JAVA_HOME_SET_TRUE JAVA_HOME_SET_FALSE JAVA_HOME INTERPRETER LIBFFI LIBFFIINCS PLATFORM_INNER_NAT_HDRS CPP EGREP USING_WIN32_PLATFORM_TRUE USING_WIN32_PLATFORM_FALSE USING_POSIX_PLATFORM_TRUE USING_POSIX_PLATFORM_FALSE USING_DARWIN_CRT_TRUE USING_DARWIN_CRT_FALSE SYSTEMSPEC LIBGCJTESTSPEC ZLIBSPEC ZLIBTESTSPEC X_CFLAGS X_PRE_LIBS X_LIBS X_EXTRA_LIBS extra_ldflags_libjava GCLIBS GCINCS GCDEPS GCSPEC JC1GCSPEC GCTESTSPEC USING_BOEHMGC_TRUE USING_BOEHMGC_FALSE USING_NOGC_TRUE USING_NOGC_FALSE THREADLIBS THREADINCS THREADDEPS THREADSPEC THREADLDFLAGS THREADCXXFLAGS USING_POSIX_THREADS_TRUE USING_POSIX_THREADS_FALSE USING_WIN32_THREADS_TRUE USING_WIN32_THREADS_FALSE USING_NO_THREADS_TRUE USING_NO_THREADS_FALSE HASH_SYNC_SPEC USING_GCC_TRUE USING_GCC_FALSE LIBICONV LTLIBICONV PKG_CONFIG GTK_CFLAGS GTK_LIBS GLIB_CFLAGS GLIB_LIBS LIBART_CFLAGS LIBART_LIBS CLASSPATH_SEPARATOR ac_ct_GCJ ZLIBS SYS_ZLIBS ZINCS DIVIDESPEC CHECKREFSPEC EXCEPTIONSPEC BACKTRACESPEC IEEESPEC NATIVE_TRUE NATIVE_FALSE NEEDS_DATA_START_TRUE NEEDS_DATA_START_FALSE GCC_UNWIND_INCLUDE toolexecdir toolexecmainlibdir toolexeclibdir dbexecdir GCJVERSION gxx_include_dir libstdcxx_incdir ALLOCA PERL SYSDEP_SOURCES LD_START_STATIC_SPEC LD_FINISH_STATIC_SPEC here LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os build_subdir host_subdir target_subdir libgcj_basedir host host_cpu host_vendor host_os target target_cpu target_vendor target_os target_noncanonical LN_S mkinstalldirs CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LDFLAGS INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar DEPDIR am__include am__quote AMDEP_TRUE AMDEP_FALSE AMDEPBACKSLASH CCDEPMODE am__fastdepCC_TRUE am__fastdepCC_FALSE CXXDEPMODE am__fastdepCXX_TRUE am__fastdepCXX_FALSE AS ac_ct_AS LD ac_ct_LD AR ac_ct_AR RANLIB ac_ct_RANLIB JAR ZIP UNZIP BASH_JAR_TRUE BASH_JAR_FALSE MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBGCJ_CFLAGS LIBGCJ_CXXFLAGS LIBGCJ_JAVAFLAGS LIBGCJ_LD_SYMBOLIC LIBGCJDEBUG TOOLKIT XLIB_AWT_TRUE XLIB_AWT_FALSE GCJH INCLTDL LIBLTDL DIRLTDL LIBTOOL CXXCPP CPPFLAGS GCJ GCJFLAGS GCJDEPMODE am__fastdepGCJ_TRUE am__fastdepGCJ_FALSE subdirs TESTSUBDIR_TRUE TESTSUBDIR_FALSE JAVA_HOME_SET_TRUE JAVA_HOME_SET_FALSE JAVA_HOME INTERPRETER LIBFFI LIBFFIINCS PLATFORM_INNER_NAT_HDRS CPP EGREP USING_WIN32_PLATFORM_TRUE USING_WIN32_PLATFORM_FALSE USING_POSIX_PLATFORM_TRUE USING_POSIX_PLATFORM_FALSE USING_DARWIN_CRT_TRUE USING_DARWIN_CRT_FALSE SYSTEMSPEC LIBGCJTESTSPEC ZLIBSPEC ZLIBTESTSPEC X_CFLAGS X_PRE_LIBS X_LIBS X_EXTRA_LIBS extra_ldflags_libjava GCLIBS GCINCS GCDEPS GCSPEC JC1GCSPEC GCTESTSPEC USING_BOEHMGC_TRUE USING_BOEHMGC_FALSE USING_NOGC_TRUE USING_NOGC_FALSE THREADLIBS THREADINCS THREADDEPS THREADSPEC THREADSTARTFILESPEC THREADLDFLAGS THREADCXXFLAGS USING_POSIX_THREADS_TRUE USING_POSIX_THREADS_FALSE USING_WIN32_THREADS_TRUE USING_WIN32_THREADS_FALSE USING_NO_THREADS_TRUE USING_NO_THREADS_FALSE HASH_SYNC_SPEC USING_GCC_TRUE USING_GCC_FALSE LIBICONV LTLIBICONV PKG_CONFIG GTK_CFLAGS GTK_LIBS GLIB_CFLAGS GLIB_LIBS LIBART_CFLAGS LIBART_LIBS CLASSPATH_SEPARATOR ac_ct_GCJ ZLIBS SYS_ZLIBS ZINCS DIVIDESPEC CHECKREFSPEC EXCEPTIONSPEC BACKTRACESPEC IEEESPEC NATIVE_TRUE NATIVE_FALSE NEEDS_DATA_START_TRUE NEEDS_DATA_START_FALSE GCC_UNWIND_INCLUDE toolexecdir toolexecmainlibdir toolexeclibdir dbexecdir GCJVERSION gxx_include_dir libstdcxx_incdir ALLOCA PERL SYSDEP_SOURCES LD_START_STATIC_SPEC LD_FINISH_STATIC_SPEC here LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -7595,15 +7595,15 @@ ac_x_header_dirs='\n /usr/openwin/share/include'\n \n if test \"$ac_x_includes\" = no; then\n-  # Guess where to find include files, by looking for Xlib.h.\n+  # Guess where to find include files, by looking for Intrinsic.h.\n   # First, try using that file with no special directory specified.\n   cat >conftest.$ac_ext <<_ACEOF\n /* confdefs.h.  */\n _ACEOF\n cat confdefs.h >>conftest.$ac_ext\n cat >>conftest.$ac_ext <<_ACEOF\n /* end confdefs.h.  */\n-#include <X11/Xlib.h>\n+#include <X11/Intrinsic.h>\n _ACEOF\n if { (eval echo \"$as_me:$LINENO: \\\"$ac_cpp conftest.$ac_ext\\\"\") >&5\n   (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1\n@@ -7630,7 +7630,7 @@ else\n sed 's/^/| /' conftest.$ac_ext >&5\n \n   for ac_dir in $ac_x_header_dirs; do\n-  if test -r \"$ac_dir/X11/Xlib.h\"; then\n+  if test -r \"$ac_dir/X11/Intrinsic.h\"; then\n     ac_x_includes=$ac_dir\n     break\n   fi\n@@ -7656,11 +7656,11 @@ _ACEOF\n cat confdefs.h >>conftest.$ac_ext\n cat >>conftest.$ac_ext <<_ACEOF\n /* end confdefs.h.  */\n-#include <X11/Xlib.h>\n+#include <X11/Intrinsic.h>\n int\n main ()\n {\n-XrmInitialize ()\n+XtMalloc (0)\n   ;\n   return 0;\n }\n@@ -9100,6 +9100,7 @@ THREADINCS=\n THREADDEPS=\n THREADH=\n THREADSPEC=\n+THREADSTARTFILESPEC=\n case \"$THREADS\" in\n  posix)\n     case \"$host\" in\n@@ -9163,6 +9164,20 @@ _ACEOF\n \n  win32)\n     THREADH=win32-threads.h\n+    THREADCXXFLAGS=-mthreads\n+    # We need thread-safe exception handling so _CRT_MT should be set to 1.\n+    # But we do not want the executables created to be dependent on\n+    # mingwm10.dll which provides a __mingwthr_key_dtor() that cleans up\n+    # exception handling contexts.  The following kludge achieves this effect\n+    # and causes a dummy __mingwthr_key_dtor() to be linked in from\n+    # libmingw32.a.  This causes a memory leak of about 24 bytes per thread.\n+    # A workaround is to explicitly use -mthreads while linking Java programs.\n+    # See PR libgcj/28263.\n+    #\n+    # FIXME: In Java we are able to detect thread death at the end of\n+    # Thread.run() so we should be able to clean up the exception handling\n+    # contexts ourselves.\n+    THREADSTARTFILESPEC='crtmt%O%s'\n     ;;\n \n  none)\n@@ -9179,6 +9194,7 @@ esac\n \n \n \n+\n if test \"$THREADS\" = posix; then\n   USING_POSIX_THREADS_TRUE=\n   USING_POSIX_THREADS_FALSE='#'\n@@ -17541,6 +17557,7 @@ s,@THREADLIBS@,$THREADLIBS,;t t\n s,@THREADINCS@,$THREADINCS,;t t\n s,@THREADDEPS@,$THREADDEPS,;t t\n s,@THREADSPEC@,$THREADSPEC,;t t\n+s,@THREADSTARTFILESPEC@,$THREADSTARTFILESPEC,;t t\n s,@THREADLDFLAGS@,$THREADLDFLAGS,;t t\n s,@THREADCXXFLAGS@,$THREADCXXFLAGS,;t t\n s,@USING_POSIX_THREADS_TRUE@,$USING_POSIX_THREADS_TRUE,;t t"}, {"sha": "fab026467017f75756638d8079e2b7d2905d4312", "filename": "libjava/configure.ac", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1218970f65f132de4d0ddc77a5d68768d19424/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1218970f65f132de4d0ddc77a5d68768d19424/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=5a1218970f65f132de4d0ddc77a5d68768d19424", "patch": "@@ -783,6 +783,7 @@ THREADINCS=\n THREADDEPS=\n THREADH=\n THREADSPEC=\n+THREADSTARTFILESPEC=\n case \"$THREADS\" in\n  posix)\n     case \"$host\" in\n@@ -834,6 +835,20 @@ case \"$THREADS\" in\n \n  win32)\n     THREADH=win32-threads.h\n+    THREADCXXFLAGS=-mthreads\n+    # We need thread-safe exception handling so _CRT_MT should be set to 1.\n+    # But we do not want the executables created to be dependent on\n+    # mingwm10.dll which provides a __mingwthr_key_dtor() that cleans up\n+    # exception handling contexts.  The following kludge achieves this effect\n+    # and causes a dummy __mingwthr_key_dtor() to be linked in from\n+    # libmingw32.a.  This causes a memory leak of about 24 bytes per thread.\n+    # A workaround is to explicitly use -mthreads while linking Java programs.\n+    # See PR libgcj/28263.\n+    #\n+    # FIXME: In Java we are able to detect thread death at the end of\n+    # Thread.run() so we should be able to clean up the exception handling\n+    # contexts ourselves.\n+    THREADSTARTFILESPEC='crtmt%O%s'\n     ;;\n \n  none)\n@@ -845,6 +860,7 @@ AC_SUBST(THREADLIBS)\n AC_SUBST(THREADINCS)\n AC_SUBST(THREADDEPS)\n AC_SUBST(THREADSPEC)\n+AC_SUBST(THREADSTARTFILESPEC)\n AC_SUBST(THREADLDFLAGS)\n AC_SUBST(THREADCXXFLAGS)\n AM_CONDITIONAL(USING_POSIX_THREADS, test \"$THREADS\" = posix)"}, {"sha": "f48212509bf21ac50f1ed643bbe003ee25cd1add", "filename": "libjava/libgcj.spec.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1218970f65f132de4d0ddc77a5d68768d19424/libjava%2Flibgcj.spec.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1218970f65f132de4d0ddc77a5d68768d19424/libjava%2Flibgcj.spec.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flibgcj.spec.in?ref=5a1218970f65f132de4d0ddc77a5d68768d19424", "patch": "@@ -3,6 +3,9 @@\n # It is used to specify the standard libraries we need in order\n # to link with libgcj.\n #\n+%rename startfile startfileorig\n+*startfile: @THREADSTARTFILESPEC@ %(startfileorig)\n+\n %rename lib liborig\n *lib: @LD_START_STATIC_SPEC@ -lgcj @LD_FINISH_STATIC_SPEC@ -lm @LIBICONV@ @GCSPEC@ @THREADSPEC@ @ZLIBSPEC@ @SYSTEMSPEC@ %(libgcc) %(liborig)\n "}, {"sha": "6a1c2c736defb31ca398cbf77ad19075bd5bc458", "filename": "libjava/win32.cc", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1218970f65f132de4d0ddc77a5d68768d19424/libjava%2Fwin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1218970f65f132de4d0ddc77a5d68768d19424/libjava%2Fwin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fwin32.cc?ref=5a1218970f65f132de4d0ddc77a5d68768d19424", "patch": "@@ -288,21 +288,6 @@ _Jv_platform_nanotime ()\n   return _Jv_platform_gettimeofday () * 1000LL;\n }\n \n-// The following definitions \"fake out\" mingw to think that -mthreads\n-// was enabled and that mingwthr.dll was linked. GCJ-compiled\n-// applications don't need this helper library because we can safely\n-// detect thread death (return from Thread.run()).\n-\n-int _CRT_MT = 1;\n-\n-extern \"C\" int\n-__mingwthr_key_dtor (DWORD, void (*) (void *))\n-{\n-  // FIXME: for now we do nothing; this causes a memory leak of\n-  //        approximately 24 bytes per thread created.\n-  return 0;\n-}\n-\n static bool dirExists (LPCTSTR dir)\n {\n   DWORD dwAttrs = ::GetFileAttributes (dir);"}]}