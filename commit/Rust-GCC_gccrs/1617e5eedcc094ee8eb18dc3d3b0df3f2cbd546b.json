{"sha": "1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYxN2U1ZWVkY2MwOTRlZThlYjE4ZGMzZDNiMGRmM2YyY2JkNTQ2Yg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2007-07-13T06:12:51Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2007-07-13T06:12:51Z"}, "message": "Index: gcc/ChangeLog\n2007-07-12  Geoffrey Keating  <geoffk@apple.com>\n\n\t* ginclude/tgmath.h: New.\n\t* config.gcc: Use GCC's tgmath.h on non-glibc systems.\n\t* doc/sourcebuild.texi (Headers): Document use_gcc_tgmath.\n\t* configure.ac (STMP_FIXPROTO): Honor use_gcc_tgmath.\n\t* configure: Regenerate.\n\nIndex: gcc/testsuite/ChangeLog\n2007-07-11  Geoffrey Keating  <geoffk@apple.com>\n\n\t* gcc.dg/c99-tgmath-1.c: New.\n\t* gcc.dg/c99-tgmath-2.c: New.\n\t* gcc.dg/c99-tgmath-3.c: New.\n\t* gcc.dg/c99-tgmath-4.c: New.\n\nFrom-SVN: r126613", "tree": {"sha": "5725393fda59464c6afb4405cdb5de32243d799e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5725393fda59464c6afb4405cdb5de32243d799e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "192c543cd420fb63220f72759ce76c0477cee984", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/192c543cd420fb63220f72759ce76c0477cee984", "html_url": "https://github.com/Rust-GCC/gccrs/commit/192c543cd420fb63220f72759ce76c0477cee984"}], "stats": {"total": 497, "additions": 497, "deletions": 0}, "files": [{"sha": "462bbb0d0ab4b60574761d9f79bdfc91f7ec3942", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b", "patch": "@@ -1,3 +1,11 @@\n+2007-07-12  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* ginclude/tgmath.h: New.\n+\t* config.gcc: Use GCC's tgmath.h on non-glibc systems.\n+\t* doc/sourcebuild.texi (Headers): Document use_gcc_tgmath.\n+\t* configure.ac (STMP_FIXPROTO): Honor use_gcc_tgmath.\n+\t* configure: Regenerate.\n+\n 2007-07-13  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/linux-unwind.h (sh_fallback_frame_state): Use"}, {"sha": "085222e297f8e0fdd4e89799601cc8a6932f0590", "filename": "gcc/config.gcc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b", "patch": "@@ -98,6 +98,9 @@\n #  extra_headers\tList of used header files from the directory\n #\t\t\tconfig/${cpu_type}.\n #\n+#  use_gcc_tgmath\tIf set, add tgmath.h to the list of used header\n+#\t\t\tfiles.\n+#\n #  extra_passes\t\tList of extra executables compiled for this target\n #\t\t\tmachine, used for compiling from source to object.\n #\n@@ -156,6 +159,7 @@\n out_file=\n tmake_file=\n extra_headers=\n+use_gcc_tgmath=yes\n extra_passes=\n extra_parts=\n extra_programs=\n@@ -493,6 +497,7 @@ case ${target} in\n   esac\n   # Assume that glibc or uClibc are being used and so __cxa_atexit is provided.\n   default_use_cxa_atexit=yes\n+  use_gcc_tgmath=no\n   ;;\n *-*-gnu*)\n   # On the Hurd, the setup is just about the same on\n@@ -516,6 +521,7 @@ case ${target} in\n   esac\n   # Assume that glibc is being used and so __cxa_atexit is provided.\n   default_use_cxa_atexit=yes\n+  use_gcc_tgmath=no\n   ;;\n *-*-netbsd*)\n   tmake_file=\"t-slibgcc-elf-ver t-libc-ok t-netbsd t-libgcc-pic\""}, {"sha": "1b72cdb94423dd866425611f288fbe6f45391135", "filename": "gcc/configure", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b", "patch": "@@ -13202,6 +13202,11 @@ for file in ${extra_headers} ; do\n   extra_headers_list=\"${extra_headers_list} \\$(srcdir)/config/${cpu_type}/${file}\"\n done\n \n+# If use_gcc_tgmath is set, append ginclude/tgmath.h.\n+if test x\"$use_gcc_tgmath\" = xyes\n+then extra_headers_list=\"${extra_headers_list} \\$(srcdir)/ginclude/tgmath.h\"\n+fi\n+\n # Define collect2 in Makefile.\n case $host_can_use_collect2 in\n   no) collect2= ;;"}, {"sha": "33d9518491ebf6da622d8094565b52e3d8b4545a", "filename": "gcc/configure.ac", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b", "patch": "@@ -1739,6 +1739,11 @@ for file in ${extra_headers} ; do\n   extra_headers_list=\"${extra_headers_list} \\$(srcdir)/config/${cpu_type}/${file}\"\n done\n \n+# If use_gcc_tgmath is set, append ginclude/tgmath.h.\n+if test x\"$use_gcc_tgmath\" = xyes\n+then extra_headers_list=\"${extra_headers_list} \\$(srcdir)/ginclude/tgmath.h\"\n+fi\n+\n # Define collect2 in Makefile.\n case $host_can_use_collect2 in\n   no) collect2= ;;"}, {"sha": "fc564908efb24ab1d62a232b769636651c147a6c", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b", "patch": "@@ -301,6 +301,9 @@ such as POSIX specify additional values to be defined in\n @file{gsyslimits.h} if it does not need fixing to work with GCC; if it\n needs fixing, @file{syslimits.h} is the fixed copy.\n \n+GCC can also install @code{<tgmath.h>}.  It will do this when\n+@file{config.gcc} sets @code{use_gcc_tgmath} to @code{yes}.\n+\n @node Documentation\n @subsection Building Documentation\n "}, {"sha": "2327556f1a69ed8258b9419a0fdad3ace0579cc3", "filename": "gcc/ginclude/tgmath.h", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/gcc%2Fginclude%2Ftgmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/gcc%2Fginclude%2Ftgmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Ftgmath.h?ref=1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b", "patch": "@@ -0,0 +1,174 @@\n+/* Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+   Contributed by Apple, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* As a special exception, if you include this header file into source\n+   files compiled by GCC, this header file does not by itself cause\n+   the resulting executable to be covered by the GNU General Public\n+   License.  This exception does not however invalidate any other\n+   reasons why the executable file might be covered by the GNU General\n+   Public License.  */\n+\n+/*\n+ * ISO C Standard:  7.22  Type-generic math <tgmath.h>\n+ */\n+\n+#ifndef _TGMATH_H\n+#define _TGMATH_H\n+\n+#include <math.h>\n+\n+#ifndef __cplusplus\n+#include <complex.h>\n+\n+/* Naming convention: generic macros are defining using\n+   __TGMATH_CPLX*, __TGMATH_REAL*, and __TGMATH_CPLX_ONLY.  _CPLX\n+   means the generic argument(s) may be real or complex, _REAL means\n+   real only, _CPLX means complex only.  If there is no suffix, we are\n+   defining a function of one generic argument.  If the suffix is _n\n+   it is a function of n generic arguments.  If the suffix is _m_n it\n+   is a function of n arguments, the first m of which are generic.  We\n+   only define these macros for values of n and/or m that are needed. */\n+\n+/* The general rules for generic macros are given in 7.22 paragraphs 1 and 2.\n+   If any generic parameter is complex, we use a complex version.  Otherwise\n+   we use a real version.  If the real part of any generic parameter is long\n+   double, we use the long double version.  Otherwise if the real part of any\n+   generic paramter is double or of integer type, we use the double version.\n+   Otherwise we use the float version. */\n+\n+#define __tg_cplx(expr) \\\n+  __builtin_classify_type(expr) == 9\n+\n+#define __tg_ldbl(expr) \\\n+  __builtin_types_compatible_p(__typeof__(expr), long double)\n+\n+#define __tg_dbl(expr)                                       \\\n+  (__builtin_types_compatible_p(__typeof__(expr), double)    \\\n+   || __builtin_classify_type(expr) == 1)\n+\n+#define __tg_choose(x,f,d,l)                                  \\\n+  __builtin_choose_expr(__tg_ldbl(x), l,                      \\\n+                        __builtin_choose_expr(__tg_dbl(x), d, \\\n+                                              f))\n+\n+#define __tg_choose_2(x,y,f,d,l)                                             \\\n+  __builtin_choose_expr(__tg_ldbl(x) || __tg_ldbl(y), l,                     \\\n+                        __builtin_choose_expr(__tg_dbl(x) || __tg_dbl(y), d, \\\n+                                              f))\n+\n+#define __tg_choose_3(x,y,z,f,d,l)                                        \\\n+   __builtin_choose_expr(__tg_ldbl(x) || __tg_ldbl(y) || __tg_ldbl(z), l, \\\n+                        __builtin_choose_expr(__tg_dbl(x) || __tg_dbl(y)  \\\n+                                              || __tg_dbl(z), d,          \\\n+                                              f))\n+\n+#define __TGMATH_CPLX(z,R,C)                                                  \\\n+  __builtin_choose_expr (__tg_cplx(z),                                        \\\n+                         __tg_choose (__real__(z), C##f(z), (C)(z), C##l(z)), \\\n+                         __tg_choose (z, R##f(z), (R)(z), R##l(z)))\n+\n+#define __TGMATH_CPLX_2(z1,z2,R,C)                                             \\\n+  __builtin_choose_expr (__tg_cplx(z1) || __tg_cplx(z2),                       \\\n+                         __tg_choose_2 (__real__(z1), __real__(z2),            \\\n+                                        C##f(z1,z2), (C)(z1,z2), C##l(z1,z2)), \\\n+                         __tg_choose_2 (z1, z2,                                \\\n+                                        R##f(z1,z2), (R)(z1,z2), R##l(z1,z2)))\n+\n+#define __TGMATH_REAL(x,R) \\\n+  __tg_choose (x, R##f(x), (R)(x), R##l(x))\n+#define __TGMATH_REAL_2(x,y,R) \\\n+  __tg_choose_2 (x, y, R##f(x,y), (R)(x,y), R##l(x,y))\n+#define __TGMATH_REAL_3(x,y,z,R) \\\n+  __tg_choose_3 (x, y, z, R##f(x,y,z), (R)(x,y,z), R##l(x,y,z))\n+#define __TGMATH_REAL_1_2(x,y,R) \\\n+  __tg_choose (x, R##f(x,y), (R)(x,y), R##l(x,y))\n+#define __TGMATH_REAL_2_3(x,y,z,R) \\\n+  __tg_choose_2 (x, y, R##f(x,y,z), (R)(x,y,z), R##l(x,y,z))\n+#define __TGMATH_CPLX_ONLY(z,C) \\\n+  __tg_choose (__real__(z), C##f(z), (C)(z), C##l(z))\n+\n+/* Functions defined in both <math.h> and <complex.h> (7.22p4) */\n+#define acos(z)          __TGMATH_CPLX(z, acos, cacos)\n+#define asin(z)          __TGMATH_CPLX(z, asin, casin)\n+#define atan(z)          __TGMATH_CPLX(z, atan, catan)\n+#define acosh(z)         __TGMATH_CPLX(z, acosh, cacosh)\n+#define asinh(z)         __TGMATH_CPLX(z, asinh, casinh)\n+#define atanh(z)         __TGMATH_CPLX(z, atanh, catanh)\n+#define cos(z)           __TGMATH_CPLX(z, cos, ccos)\n+#define sin(z)           __TGMATH_CPLX(z, sin, csin)\n+#define tan(z)           __TGMATH_CPLX(z, tan, ctan)\n+#define cosh(z)          __TGMATH_CPLX(z, cosh, ccosh)\n+#define sinh(z)          __TGMATH_CPLX(z, sinh, csinh)\n+#define tanh(z)          __TGMATH_CPLX(z, tanh, ctanh)\n+#define exp(z)           __TGMATH_CPLX(z, exp, cexp)\n+#define log(z)           __TGMATH_CPLX(z, log, clog)\n+#define pow(z1,z2)       __TGMATH_CPLX_2(z1, z2, pow, cpow)\n+#define sqrt(z)          __TGMATH_CPLX(z, sqrt, csqrt)\n+#define fabs(z)          __TGMATH_CPLX(z, fabs, cabs)\n+\n+/* Functions defined in <math.h> only (7.22p5) */\n+#define atan2(x,y)       __TGMATH_REAL_2(x, y, atan2)\n+#define cbrt(x)          __TGMATH_REAL(x, cbrt)\n+#define ceil(x)          __TGMATH_REAL(x, ceil)\n+#define copysign(x,y)    __TGMATH_REAL_2(x, y, copysign)\n+#define erf(x)           __TGMATH_REAL(x, erf)\n+#define erfc(x)          __TGMATH_REAL(x, erfc)\n+#define exp2(x)          __TGMATH_REAL(x, exp2)\n+#define expm1(x)         __TGMATH_REAL(x, expm1)\n+#define fdim(x,y)        __TGMATH_REAL_2(x, y, fdim)\n+#define floor(x)         __TGMATH_REAL(x, floor)\n+#define fma(x,y,z)       __TGMATH_REAL_3(x, y, z, fma)\n+#define fmax(x,y)        __TGMATH_REAL_2(x, y, fmax)\n+#define fmin(x,y)        __TGMATH_REAL_2(x, y, fmin)\n+#define fmod(x,y)        __TGMATH_REAL_2(x, y, fmod)\n+#define frexp(x,y)       __TGMATH_REAL_1_2(x, y, frexp)\n+#define hypot(x,y)       __TGMATH_REAL_2(x, y, hypot)\n+#define ilogb(x)         __TGMATH_REAL(x, ilogb)\n+#define ldexp(x,y)       __TGMATH_REAL_1_2(x, y, ldexp)\n+#define lgamma(x)        __TGMATH_REAL(x, lgamma)\n+#define llrint(x)        __TGMATH_REAL(x, llrint)\n+#define llround(x)       __TGMATH_REAL(x, llround)\n+#define log10(x)         __TGMATH_REAL(x, log10)\n+#define log1p(x)         __TGMATH_REAL(x, log1p)\n+#define log2(x)          __TGMATH_REAL(x, log2)\n+#define logb(x)          __TGMATH_REAL(x, logb)\n+#define lrint(x)         __TGMATH_REAL(x, lrint)\n+#define lround(x)        __TGMATH_REAL(x, lround)\n+#define nearbyint(x)     __TGMATH_REAL(x, nearbyint)\n+#define nextafter(x,y)   __TGMATH_REAL_2(x, y, nextafter)\n+#define nexttoward(x,y)  __TGMATH_REAL_1_2(x, y, nexttoward)\n+#define remainder(x,y)   __TGMATH_REAL_2(x, y, remainder)\n+#define remquo(x,y,z)    __TGMATH_REAL_2_3(x, y, z, remquo)\n+#define rint(x)          __TGMATH_REAL(x, rint)\n+#define round(x)         __TGMATH_REAL(x, round)\n+#define scalbn(x,y)      __TGMATH_REAL_1_2(x, y, scalbn)\n+#define scalbln(x,y)     __TGMATH_REAL_1_2(x, y, scalbln)\n+#define tgamma(x)        __TGMATH_REAL(x, tgamma)\n+#define trunc(x)         __TGMATH_REAL(x, trunc)\n+\n+/* Functions defined in <complex.h> only (7.22p6) */\n+#define carg(z)          __TGMATH_CPLX_ONLY(z, carg)\n+#define cimag(z)         __TGMATH_CPLX_ONLY(z, cimag)\n+#define conj(z)          __TGMATH_CPLX_ONLY(z, conj)\n+#define cproj(z)         __TGMATH_CPLX_ONLY(z, cproj)\n+#define creal(z)         __TGMATH_CPLX_ONLY(z, creal)\n+\n+#endif /* __cplusplus */\n+#endif /* _TGMATH_H */"}, {"sha": "e6a5cf411ab614bc3538f4c3e114b53b33912fb2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b", "patch": "@@ -1,3 +1,10 @@\n+2007-07-12  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* gcc.dg/c99-tgmath-1.c: New.\n+\t* gcc.dg/c99-tgmath-2.c: New.\n+\t* gcc.dg/c99-tgmath-3.c: New.\n+\t* gcc.dg/c99-tgmath-4.c: New.\n+\n 2007-07-12  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \t    Janis Johnson  <janis187@us.ibm.com>\n "}, {"sha": "bef6ab1b918821fea337987b2e8991901511677d", "filename": "gcc/testsuite/gcc.dg/c99-tgmath-1.c", "status": "added", "additions": 247, "deletions": 0, "changes": 247, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tgmath-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tgmath-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tgmath-1.c?ref=1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b", "patch": "@@ -0,0 +1,247 @@\n+/* Test for <tgmath.h> in C99. */\n+/* Origin: Matt Austern <austern@apple.com>\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=iso9899:1999\" } */\n+\n+/* Test that tgmath defines the macros it's supposed to. */\n+#include <tgmath.h>\n+\n+#ifndef acos\n+#error acos undefined\n+#endif\n+\n+#ifndef asin\n+#error asin undefined\n+#endif\n+\n+#ifndef atan\n+#error atan undefined\n+#endif\n+\n+#ifndef acosh\n+#error acosh undefined\n+#endif\n+\n+#ifndef asinh\n+#error asinh undefined\n+#endif\n+\n+#ifndef atanh\n+#error atanh undefined\n+#endif\n+\n+#ifndef cos\n+#error cos undefined\n+#endif\n+\n+#ifndef sin\n+#error sin undefined\n+#endif\n+\n+#ifndef tan\n+#error tan undefined\n+#endif\n+\n+#ifndef cosh\n+#error cosh undefined\n+#endif\n+\n+#ifndef sinh\n+#error sinh undefined\n+#endif\n+\n+#ifndef tanh\n+#error tanh undefined\n+#endif\n+\n+#ifndef exp\n+#error exp undefined\n+#endif\n+\n+#ifndef log\n+#error log undefined\n+#endif\n+\n+#ifndef pow\n+#error pow undefined\n+#endif\n+\n+#ifndef sqrt\n+#error sqrt undefined\n+#endif\n+\n+#ifndef fabs\n+#error fabs undefined\n+#endif\n+\n+#ifndef atan2\n+#error atan2 undefined\n+#endif\n+\n+#ifndef cbrt\n+#error cbrt undefined\n+#endif\n+\n+#ifndef ceil\n+#error ceil undefined\n+#endif\n+\n+#ifndef copysign\n+#error copysign undefined\n+#endif\n+\n+#ifndef erf\n+#error erf undefined\n+#endif\n+\n+#ifndef erfc\n+#error erfc undefined\n+#endif\n+\n+#ifndef exp2\n+#error exp2 undefined\n+#endif\n+\n+#ifndef expm1\n+#error expm1 undefined\n+#endif\n+\n+#ifndef fdim\n+#error fdim undefined\n+#endif\n+\n+#ifndef floor\n+#error floor undefined\n+#endif\n+\n+#ifndef fma\n+#error fma undefined\n+#endif\n+\n+#ifndef fmax\n+#error fmax undefined\n+#endif\n+\n+#ifndef fmin\n+#error fmin undefined\n+#endif\n+\n+#ifndef fmod\n+#error fmod undefined\n+#endif\n+\n+#ifndef frexp\n+#error frexp undefined\n+#endif\n+\n+#ifndef hypot\n+#error hypot undefined\n+#endif\n+\n+#ifndef ilogb\n+#error ilogb undefined\n+#endif\n+\n+#ifndef ldexp\n+#error ldexp undefined\n+#endif\n+\n+#ifndef lgamma\n+#error lgamma undefined\n+#endif\n+\n+#ifndef llrint\n+#error llrint undefined\n+#endif\n+\n+#ifndef llround\n+#error llround undefined\n+#endif\n+\n+#ifndef log10\n+#error log10 undefined\n+#endif\n+\n+#ifndef log1p\n+#error log1p undefined\n+#endif\n+\n+#ifndef log2\n+#error log2 undefined\n+#endif\n+\n+#ifndef logb\n+#error logb undefined\n+#endif\n+\n+#ifndef lrint\n+#error lrint undefined\n+#endif\n+\n+#ifndef lround\n+#error lround undefined\n+#endif\n+\n+#ifndef nearbyint\n+#error nearbyint undefined\n+#endif\n+\n+#ifndef nextafter\n+#error nextafter undefined\n+#endif\n+\n+#ifndef nexttoward\n+#error nexttoward undefined\n+#endif\n+\n+#ifndef remainder\n+#error remainder undefined\n+#endif\n+\n+#ifndef remquo\n+#error remquo undefined\n+#endif\n+\n+#ifndef rint\n+#error rint undefined\n+#endif\n+\n+#ifndef round\n+#error round undefined\n+#endif\n+\n+#ifndef scalbn\n+#error scalbn undefined\n+#endif\n+\n+#ifndef scalbln\n+#error scalbln undefined\n+#endif\n+\n+#ifndef tgamma\n+#error tgamma undefined\n+#endif\n+\n+#ifndef trunc\n+#error trunc undefined\n+#endif\n+\n+#ifndef carg\n+#error carg undefined\n+#endif\n+\n+#ifndef cimag\n+#error cimag undefined\n+#endif\n+\n+#ifndef conj\n+#error conj undefined\n+#endif\n+\n+#ifndef cproj\n+#error cproj undefined\n+#endif\n+\n+#ifndef creal\n+#error creal undefined\n+#endif"}, {"sha": "d162d4ac9ad3bf94ca7031811b3223af574991f2", "filename": "gcc/testsuite/gcc.dg/c99-tgmath-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tgmath-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tgmath-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tgmath-2.c?ref=1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b", "patch": "@@ -0,0 +1,14 @@\n+/* Test for <tgmath.h> in C99. */\n+/* Origin: Matt Austern <austern@apple.com>\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999\" } */\n+\n+/* Test that invoking type-generic sin on a float invokes sinf. */\n+#include <tgmath.h>\n+\n+float foo(float x)\n+{\n+  return sin(x);\n+}\n+\n+/* {dg-final {scan-assembler \"sinf\" } } */"}, {"sha": "4d0de1ee56b0f6bd206e67b8228aec7b297d780b", "filename": "gcc/testsuite/gcc.dg/c99-tgmath-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tgmath-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tgmath-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tgmath-3.c?ref=1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b", "patch": "@@ -0,0 +1,14 @@\n+/* Test for <tgmath.h> in C99. */\n+/* Origin: Matt Austern <austern@apple.com>\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999\" } */\n+\n+/* Test that invoking type-generic exp on a complex invokes cexp. */\n+#include <tgmath.h>\n+\n+complex double foo(complex double x)\n+{\n+  return exp(x);\n+}\n+\n+/* {dg-final {scan-assembler \"cexp\" } } */"}, {"sha": "e9e490bdec70de0b64a18b8160e96951b3ea90e6", "filename": "gcc/testsuite/gcc.dg/c99-tgmath-4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tgmath-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tgmath-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tgmath-4.c?ref=1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b", "patch": "@@ -0,0 +1,14 @@\n+/* Test for <tgmath.h> in C99. */\n+/* Origin: Matt Austern <austern@apple.com>\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999\" } */\n+\n+/* Test that invoking type-generic pow on complex float invokes cpowf. */\n+#include <tgmath.h>\n+\n+complex double foo(complex float x, float y)\n+{\n+  return pow(x, y);\n+}\n+\n+/* {dg-final {scan-assembler \"cpowf\" } } */"}]}