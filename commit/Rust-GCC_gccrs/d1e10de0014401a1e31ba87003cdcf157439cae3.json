{"sha": "d1e10de0014401a1e31ba87003cdcf157439cae3", "node_id": "C_kwDOANBUbNoAKGQxZTEwZGUwMDE0NDAxYTFlMzFiYTg3MDAzY2RjZjE1NzQzOWNhZTM", "commit": {"author": {"name": "tieway59", "email": "tieway59@foxmail.com", "date": "2023-06-14T06:22:34Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-06-14T11:10:20Z"}, "message": "fixup: Remove old typecheck dump\n\nfixes https://github.com/Rust-GCC/gccrs/issues/2020\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-tycheck-dump.h: Delete this file\n\t* rust-session-manager.cc: Remove `Session::dump_type_resolution`\n\tand `TYPE_RESOLUTION_DUMP`\n\t* rust-session-manager.h: Likewise\n\nSigned-off-by: Taiwei Wu tieway59@foxmail.com", "tree": {"sha": "e9e8eb14aa99b5b4d59ff2669692b9f3c070f0b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9e8eb14aa99b5b4d59ff2669692b9f3c070f0b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1e10de0014401a1e31ba87003cdcf157439cae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1e10de0014401a1e31ba87003cdcf157439cae3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1e10de0014401a1e31ba87003cdcf157439cae3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1e10de0014401a1e31ba87003cdcf157439cae3/comments", "author": {"login": "TieWay59", "id": 40034603, "node_id": "MDQ6VXNlcjQwMDM0NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/40034603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TieWay59", "html_url": "https://github.com/TieWay59", "followers_url": "https://api.github.com/users/TieWay59/followers", "following_url": "https://api.github.com/users/TieWay59/following{/other_user}", "gists_url": "https://api.github.com/users/TieWay59/gists{/gist_id}", "starred_url": "https://api.github.com/users/TieWay59/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TieWay59/subscriptions", "organizations_url": "https://api.github.com/users/TieWay59/orgs", "repos_url": "https://api.github.com/users/TieWay59/repos", "events_url": "https://api.github.com/users/TieWay59/events{/privacy}", "received_events_url": "https://api.github.com/users/TieWay59/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "706341acbd5ae8c2651cc16cd7c8eb34eec7c9a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/706341acbd5ae8c2651cc16cd7c8eb34eec7c9a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/706341acbd5ae8c2651cc16cd7c8eb34eec7c9a3"}], "stats": {"total": 258, "additions": 0, "deletions": 258}, "files": [{"sha": "c5533db750b3ff11119a365141f374be1def86be", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e10de0014401a1e31ba87003cdcf157439cae3/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e10de0014401a1e31ba87003cdcf157439cae3/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=d1e10de0014401a1e31ba87003cdcf157439cae3", "patch": "@@ -28,7 +28,6 @@\n #include \"rust-privacy-check.h\"\n #include \"rust-const-checker.h\"\n #include \"rust-feature-gate.h\"\n-#include \"rust-tycheck-dump.h\"\n #include \"rust-compile.h\"\n #include \"rust-cfg-parser.h\"\n #include \"rust-lint-scan-deadcode.h\"\n@@ -630,10 +629,6 @@ Session::compile_crate (const char *filename)\n \n   // type resolve\n   Resolver::TypeResolution::Resolve (hir);\n-  if (options.dump_option_enabled (CompileOptions::TYPE_RESOLUTION_DUMP))\n-    {\n-      dump_type_resolution (hir);\n-    }\n \n   if (saw_errors ())\n     return;\n@@ -978,22 +973,6 @@ Session::dump_hir_pretty (HIR::Crate &crate) const\n   out.close ();\n }\n \n-void\n-Session::dump_type_resolution (HIR::Crate &hir) const\n-{\n-  std::ofstream out;\n-  out.open (kHIRTypeResolutionDumpFile);\n-  if (out.fail ())\n-    {\n-      rust_error_at (Linemap::unknown_location (), \"cannot open %s:%m; ignored\",\n-\t\t     kHIRTypeResolutionDumpFile);\n-      return;\n-    }\n-\n-  Resolver::TypeResolverDump::go (hir, out);\n-  out.close ();\n-}\n-\n // imports\n \n NodeId"}, {"sha": "4f934597bcf482afb29117b7d28f13a1dbba92f9", "filename": "gcc/rust/rust-session-manager.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e10de0014401a1e31ba87003cdcf157439cae3/gcc%2Frust%2Frust-session-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e10de0014401a1e31ba87003cdcf157439cae3/gcc%2Frust%2Frust-session-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.h?ref=d1e10de0014401a1e31ba87003cdcf157439cae3", "patch": "@@ -202,7 +202,6 @@ struct CompileOptions\n     TARGET_OPTION_DUMP,\n     HIR_DUMP,\n     HIR_DUMP_PRETTY,\n-    TYPE_RESOLUTION_DUMP,\n   };\n \n   std::set<DumpOption> dump_options;\n@@ -261,7 +260,6 @@ struct CompileOptions\n     enable_dump_option (DumpOption::TARGET_OPTION_DUMP);\n     enable_dump_option (DumpOption::HIR_DUMP);\n     enable_dump_option (DumpOption::HIR_DUMP_PRETTY);\n-    enable_dump_option (DumpOption::TYPE_RESOLUTION_DUMP);\n   }\n \n   void set_crate_name (std::string name)\n@@ -373,7 +371,6 @@ struct Session\n   void dump_tokenstream (AST::Crate &crate) const;\n   void dump_hir (HIR::Crate &crate) const;\n   void dump_hir_pretty (HIR::Crate &crate) const;\n-  void dump_type_resolution (HIR::Crate &crate) const;\n \n   // pipeline stages - TODO maybe move?\n   /* Register plugins pipeline stage. TODO maybe move to another object?"}, {"sha": "f6f239f0c72152ce6e87493800c22ccef554834d", "filename": "gcc/rust/typecheck/rust-tycheck-dump.h", "status": "removed", "additions": 0, "deletions": 234, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706341acbd5ae8c2651cc16cd7c8eb34eec7c9a3/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706341acbd5ae8c2651cc16cd7c8eb34eec7c9a3/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h?ref=706341acbd5ae8c2651cc16cd7c8eb34eec7c9a3", "patch": "@@ -1,234 +0,0 @@\n-// Copyright (C) 2020-2023 Free Software Foundation, Inc.\n-\n-// This file is part of GCC.\n-\n-// GCC is free software; you can redistribute it and/or modify it under\n-// the terms of the GNU General Public License as published by the Free\n-// Software Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-// for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with GCC; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-#ifndef RUST_TYCHECK_DUMP\n-#define RUST_TYCHECK_DUMP\n-\n-#include \"rust-hir-type-check-base.h\"\n-#include \"rust-hir-full.h\"\n-\n-namespace Rust {\n-namespace Resolver {\n-\n-class TypeResolverDump : private TypeCheckBase, private HIR::HIRFullVisitorBase\n-{\n-  using HIR::HIRFullVisitorBase::visit;\n-\n-public:\n-  static void go (HIR::Crate &crate, std::ofstream &out)\n-  {\n-    TypeResolverDump dumper;\n-    for (auto &item : crate.items)\n-      {\n-\titem->accept_vis (dumper);\n-\tdumper.dump += \"\\n\";\n-      }\n-\n-    out << dumper.dump;\n-  }\n-\n-  void visit (HIR::StructStruct &struct_decl) override\n-  {\n-    dump += indent () + \"struct \" + type_string (struct_decl.get_mappings ())\n-\t    + \"\\n\";\n-  }\n-\n-  void visit (HIR::Union &union_decl) override\n-  {\n-    dump\n-      += indent () + \"union \" + type_string (union_decl.get_mappings ()) + \"\\n\";\n-  }\n-\n-  void visit (HIR::TupleStruct &struct_decl) override\n-  {\n-    dump += indent () + \"struct\" + type_string (struct_decl.get_mappings ())\n-\t    + \"\\n\";\n-  }\n-\n-  void visit (HIR::ImplBlock &impl_block) override\n-  {\n-    dump += indent () + \"impl \"\n-\t    + type_string (impl_block.get_type ()->get_mappings ()) + \" {\\n\";\n-    indentation_level++;\n-\n-    for (auto &impl_item : impl_block.get_impl_items ())\n-      {\n-\timpl_item->accept_vis (*this);\n-\tdump += \"\\n\";\n-      }\n-\n-    indentation_level--;\n-    dump += indent () + \"}\\n\";\n-  }\n-\n-  void visit (HIR::ConstantItem &constant) override\n-  {\n-    dump += indent () + \"constant \" + constant.get_identifier () + \":\"\n-\t    + type_string (constant.get_mappings ()) + \" = \";\n-    constant.get_expr ()->accept_vis (*this);\n-    dump += \";\\n\";\n-  }\n-\n-  void visit (HIR::Function &function) override\n-  {\n-    dump += indent () + \"fn \" + function.get_function_name () + \" \"\n-\t    + type_string (function.get_mappings ()) + \"\\n\";\n-    dump += indent () + \"{\\n\";\n-\n-    HIR::BlockExpr *function_body = function.get_definition ().get ();\n-    function_body->accept_vis (*this);\n-\n-    dump += indent () + \"}\\n\";\n-  }\n-\n-  void visit (HIR::BlockExpr &expr) override\n-  {\n-    dump += \"{\\n\";\n-    indentation_level++;\n-\n-    for (auto &s : expr.get_statements ())\n-      {\n-\tdump += indent ();\n-\ts->accept_vis (*this);\n-\tdump += \";\\n\";\n-      }\n-\n-    if (expr.has_expr ())\n-      {\n-\tdump += indent ();\n-\texpr.expr->accept_vis (*this);\n-\tdump += \";\\n\";\n-      }\n-\n-    indentation_level--;\n-    dump += \"}\\n\";\n-  }\n-\n-  void visit (HIR::UnsafeBlockExpr &expr) override\n-  {\n-    dump += \"unsafe \";\n-    expr.get_block_expr ()->accept_vis (*this);\n-  }\n-\n-  void visit (HIR::LetStmt &stmt) override\n-  {\n-    dump += \"let \" + stmt.get_pattern ()->as_string () + \":\"\n-\t    + type_string (stmt.get_pattern ()->get_pattern_mappings ());\n-    if (stmt.has_init_expr ())\n-      {\n-\tdump += \" = \";\n-\tstmt.get_init_expr ()->accept_vis (*this);\n-      }\n-  }\n-\n-  void visit (HIR::ExprStmt &stmt) override\n-  {\n-    stmt.get_expr ()->accept_vis (*this);\n-  }\n-\n-  void visit (HIR::AssignmentExpr &expr) override\n-  {\n-    expr.get_lhs ()->accept_vis (*this);\n-    dump += \" = \";\n-    expr.get_rhs ()->accept_vis (*this);\n-  }\n-\n-  void visit (HIR::LiteralExpr &expr) override\n-  {\n-    dump += expr.get_literal ().as_string () + \":\"\n-\t    + type_string (expr.get_mappings ());\n-  }\n-\n-  void visit (HIR::ArrayExpr &expr) override\n-  {\n-    dump += type_string (expr.get_mappings ()) + \":[\";\n-\n-    HIR::ArrayElems *elements = expr.get_internal_elements ();\n-    elements->accept_vis (*this);\n-\n-    dump += \"]\";\n-  }\n-\n-  void visit (HIR::ArrayElemsValues &elems) override\n-  {\n-    for (auto &elem : elems.get_values ())\n-      {\n-\telem->accept_vis (*this);\n-\tdump += \",\";\n-      }\n-  }\n-\n-  void visit (HIR::GroupedExpr &expr) override\n-  {\n-    HIR::Expr *paren_expr = expr.get_expr_in_parens ().get ();\n-    dump += \"(\";\n-    paren_expr->accept_vis (*this);\n-    dump += \")\";\n-  }\n-\n-  void visit (HIR::PathInExpression &expr) override\n-  {\n-    dump += type_string (expr.get_mappings ());\n-  }\n-\n-  void visit (HIR::StructExprStructFields &expr) override\n-  {\n-    dump += \"ctor: \" + type_string (expr.get_mappings ());\n-  }\n-\n-protected:\n-  std::string type_string (const Analysis::NodeMapping &mappings)\n-  {\n-    TyTy::BaseType *lookup = nullptr;\n-    if (!context->lookup_type (mappings.get_hirid (), &lookup))\n-      return \"<error>\";\n-\n-    std::string buf = \"[\";\n-    for (auto &ref : lookup->get_combined_refs ())\n-      {\n-\tbuf += std::to_string (ref);\n-\tbuf += \", \";\n-      }\n-    buf += \"]\";\n-\n-    std::string repr = lookup->as_string ();\n-    return \"<\" + repr + \" HIRID: \" + std::to_string (mappings.get_hirid ())\n-\t   + \" RF:\" + std::to_string (lookup->get_ref ()) + \" TF:\"\n-\t   + std::to_string (lookup->get_ty_ref ()) + +\" - \" + buf + \">\";\n-  }\n-\n-  std::string indent ()\n-  {\n-    std::string buf;\n-    for (size_t i = 0; i < indentation_level; ++i)\n-      buf += \"    \";\n-\n-    return buf;\n-  }\n-\n-private:\n-  TypeResolverDump () : TypeCheckBase (), indentation_level (0) {}\n-\n-  std::string dump;\n-  size_t indentation_level;\n-};\n-\n-} // namespace Resolver\n-} // namespace Rust\n-\n-#endif // RUST_TYCHECK_DUMP"}]}