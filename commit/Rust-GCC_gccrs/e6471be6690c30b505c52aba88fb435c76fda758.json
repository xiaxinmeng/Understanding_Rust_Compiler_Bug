{"sha": "e6471be6690c30b505c52aba88fb435c76fda758", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY0NzFiZTY2OTBjMzBiNTA1YzUyYWJhODhmYjQzNWM3NmZkYTc1OA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-05-14T17:35:50Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-05-14T17:35:50Z"}, "message": "arm.h (TARGET_CPU_CPP_BUILTINS): Define.\n\nconfig:\n\t* arm/arm.h (TARGET_CPU_CPP_BUILTINS): Define.\n\t(CPP_SPEC): Update.\n\t(CPP_APCS_PC_SPEC, CPP_APCS_PC_DEFAULT_SPEC,\n\tCPP_FLOAT_SPEC, CPP_FLOAT_DEFAULT_SPEC, CPP_ENDIAN_SPEC,\n\tCPP_ENDIAN_DEFAULT_SPEC, CPP_INTERWORK_DEFAULT_SPEC,\n\tCPP_INTERWORK_SPEC, CPP_PREDEFINES): Remove.\n\t(EXTRA_SPECS): Update.\n\t* arm/conix-elf.h, arm/linux-elf.h, arm/netbsd.h, arm/riscix.h,\n\tarm/riscix1-1.h, arm/rtems-elf.h, arm/semiaof.h, arm/unknown-elf.h,\n\tarm/unknown-elf-oabi.h, arm/vxarm.h: Remove CPP_PREDEFINES and\n\tdefine TARGET_OS_CPP_BUILTINS if necessary.\n\nFrom-SVN: r53463", "tree": {"sha": "8fd048b8eae94e9369d43091de33cea447c776b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fd048b8eae94e9369d43091de33cea447c776b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6471be6690c30b505c52aba88fb435c76fda758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6471be6690c30b505c52aba88fb435c76fda758", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6471be6690c30b505c52aba88fb435c76fda758", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6471be6690c30b505c52aba88fb435c76fda758/comments", "author": null, "committer": null, "parents": [{"sha": "5bf5c5cb5294b21e2ac4496663d81e8f832964ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bf5c5cb5294b21e2ac4496663d81e8f832964ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bf5c5cb5294b21e2ac4496663d81e8f832964ad"}], "stats": {"total": 218, "additions": 119, "deletions": 99}, "files": [{"sha": "66186b54efdd6efd2d69426d18982fec2a40bed2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6471be6690c30b505c52aba88fb435c76fda758", "patch": "@@ -1,3 +1,18 @@\n+2002-05-14  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+config:\n+\t* arm/arm.h (TARGET_CPU_CPP_BUILTINS): Define.\n+\t(CPP_SPEC): Update.\n+\t(CPP_APCS_PC_SPEC, CPP_APCS_PC_DEFAULT_SPEC,\n+\tCPP_FLOAT_SPEC, CPP_FLOAT_DEFAULT_SPEC, CPP_ENDIAN_SPEC,\n+\tCPP_ENDIAN_DEFAULT_SPEC, CPP_INTERWORK_DEFAULT_SPEC,\n+\tCPP_INTERWORK_SPEC, CPP_PREDEFINES): Remove.\n+\t(EXTRA_SPECS): Update.\n+\t* arm/conix-elf.h, arm/linux-elf.h, arm/netbsd.h, arm/riscix.h,\n+\tarm/riscix1-1.h, arm/rtems-elf.h, arm/semiaof.h, arm/unknown-elf.h,\n+\tarm/unknown-elf-oabi.h, arm/vxarm.h: Remove CPP_PREDEFINES and\n+\tdefine TARGET_OS_CPP_BUILTINS if necessary.\n+\n 2002-05-14  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* gcc.c (cpp_options): Must pass -m* and -f* options\n@@ -44,6 +59,10 @@ Tue May 14 12:38:30 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \t* config/i386/i386.md: Use define_constants for unspec numbers.\n \t* config/i386/i386.c: Likewise.\n \n+2002-05-13  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* doc/contrib.texi: Update my entry.\n+\n 2002-05-13  Mark Mitchell  <mark@codesourcery.com>\n \n \t* fixinc/inclhack.def (winidss_valist): Limit applicability."}, {"sha": "b5a848aae131244110fba241b90be27491a256cf", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 48, "deletions": 67, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=e6471be6690c30b505c52aba88fb435c76fda758", "patch": "@@ -26,6 +26,47 @@ Boston, MA 02111-1307, USA.  */\n #ifndef GCC_ARM_H\n #define GCC_ARM_H\n \n+/* Target CPU builtins.  */\n+#define TARGET_CPU_CPP_BUILTINS()\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+\tif (TARGET_THUMB)\t\t\t\t\\\n+\t  builtin_define (\"__arm__\");\t\t\t\\\n+\telse\t\t\t\t\t\t\\\n+\t  builtin_define (\"__thumb__\");\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+\tif (TARGET_BIG_END)\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\\\n+\t    builtin_define (\"__ARMEB__\");\t\t\\\n+\t    if (TARGET_THUMB)\t\t\t\t\\\n+\t      builtin_define (\"__THUMBEB__\");\t\t\\\n+\t    if (TARGET_LITTLE_WORDS)\t\t\t\\\n+\t      builtin_define (\"__ARMWEL__\");\t\t\\\n+\t  }\t\t\t\t\t\t\\\n+        else\t\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\\\n+\t    builtin_define (\"__ARMEL__\");\t\t\\\n+\t    if (TARGET_THUMB)\t\t\t\t\\\n+\t      builtin_define (\"__THUMBEL__\");\t\t\\\n+\t  }\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+\tif (TARGET_APCS_32)\t\t\t\t\\\n+\t  builtin_define (\"__APCS_32__\");\t\t\\\n+\telse\t\t\t\t\t\t\\\n+\t  builtin_define (\"__APCS_26__\");\t\t\\\n+\t\t\t\t\t\t\t\\\n+\tif (TARGET_SOFT_FLOAT)\t\t\t\t\\\n+\t  builtin_define (\"__SOFTFP__\");\t\t\\\n+\t\t\t\t\t\t\t\\\n+\t/* Add a define for interworking.\t\t\\\n+\t   Needed when building libgcc.a.  */\t\t\\\n+\tif (TARGET_INTERWORK)\t\t\t\t\\\n+\t  builtin_define (\"__THUMB_INTERWORK__\");\t\\\n+\t\t\t\t\t\t\t\\\n+\tbuiltin_assert (\"cpu=arm\");\t\t\t\\\n+\tbuiltin_assert (\"machine=arm\");\t\t\t\\\n+    } while (0)\n+\n #define TARGET_CPU_arm2\t\t0x0000\n #define TARGET_CPU_arm250\t0x0000\n #define TARGET_CPU_arm3\t\t0x0000\n@@ -126,16 +167,17 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n #endif\n \n #undef  CPP_SPEC\n-#define CPP_SPEC \"\\\n-%(cpp_cpu_arch) %(cpp_apcs_pc) %(cpp_float) \\\n-%(cpp_endian) %(subtarget_cpp_spec) %(cpp_isa) %(cpp_interwork)\"\n-\n-#define CPP_ISA_SPEC \"%{mthumb:-D__thumb__} %{!mthumb:-D__arm__}\"\n+#define CPP_SPEC \"%(cpp_cpu_arch) %(subtarget_cpp_spec)\t\t\t\\\n+%{mapcs-32:%{mapcs-26:\t\t\t\t\t\t\t\\\n+\t%e-mapcs-26 and -mapcs-32 may not be used together}}\t\t\\\n+%{msoft-float:%{mhard-float:\t\t\t\t\t\t\\\n+\t%e-msoft-float and -mhard_float may not be used together}}\t\\\n+%{mbig-endian:%{mlittle-endian:\t\t\t\t\t\t\\\n+\t%e-mbig-endian and -mlittle-endian may not be used together}}\"\n \n /* Set the architecture define -- if -march= is set, then it overrides\n    the -mcpu= setting.  */\n #define CPP_CPU_ARCH_SPEC \"\\\n--Acpu=arm -Amachine=arm \\\n %{march=arm2:-D__ARM_ARCH_2__} \\\n %{march=arm250:-D__ARM_ARCH_2__} \\\n %{march=arm3:-D__ARM_ARCH_2__} \\\n@@ -206,58 +248,6 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n  %{!mcpu*:%(cpp_cpu_arch_default)}} \\\n \"\n \n-/* Define __APCS_26__ if the PC also contains the PSR */\n-#define CPP_APCS_PC_SPEC \"\\\n-%{mapcs-32:%{mapcs-26:%e-mapcs-26 and -mapcs-32 may not be used together} \\\n- -D__APCS_32__} \\\n-%{mapcs-26:-D__APCS_26__} \\\n-%{!mapcs-32: %{!mapcs-26:%(cpp_apcs_pc_default)}} \\\n-\"\n-\n-#ifndef CPP_APCS_PC_DEFAULT_SPEC\n-#define CPP_APCS_PC_DEFAULT_SPEC \"-D__APCS_26__\"\n-#endif\n-\n-#define CPP_FLOAT_SPEC \"\\\n-%{msoft-float:\\\n-  %{mhard-float:%e-msoft-float and -mhard_float may not be used together} \\\n-  -D__SOFTFP__} \\\n-%{!mhard-float:%{!msoft-float:%(cpp_float_default)}} \\\n-\"\n-\n-/* Default is hard float, which doesn't define anything */\n-#define CPP_FLOAT_DEFAULT_SPEC \"\"\n-\n-#define CPP_ENDIAN_SPEC \"\\\n-%{mbig-endian:\t\t\t\t\t\t\t\t\\\n-  %{mlittle-endian:\t\t\t\t\t\t\t\\\n-    %e-mbig-endian and -mlittle-endian may not be used together}\t\\\n-  -D__ARMEB__ %{mwords-little-endian:-D__ARMWEL__} %{mthumb:-D__THUMBEB__}}\\\n-%{mlittle-endian:-D__ARMEL__ %{mthumb:-D__THUMBEL__}}\t\t\t\\\n-%{!mlittle-endian:%{!mbig-endian:%(cpp_endian_default)}}\t\t\\\n-\"\n-\n-/* Default is little endian.  */\n-#define CPP_ENDIAN_DEFAULT_SPEC \"-D__ARMEL__ %{mthumb:-D__THUMBEL__}\"\n-\n-/* Add a define for interworking.  Needed when building libgcc.a.  \n-   This must define __THUMB_INTERWORK__ to the pre-processor if\n-   interworking is enabled by default.  */\n-#ifndef CPP_INTERWORK_DEFAULT_SPEC\n-#define CPP_INTERWORK_DEFAULT_SPEC \"\"\n-#endif\n-\n-#define CPP_INTERWORK_SPEC \"\t\t\t\t\t\t\\\n-%{mthumb-interwork:\t\t\t\t\t\t\t\\\n-  %{mno-thumb-interwork: %eincompatible interworking options}\t\t\\\n-  -D__THUMB_INTERWORK__}\t\t\t\t\t\t\\\n-%{!mthumb-interwork:%{!mno-thumb-interwork:%(cpp_interwork_default)}}\t\\\n-\"\n-\n-#ifndef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"\"\n-#endif\n-\n #ifndef CC1_SPEC\n #define CC1_SPEC \"\"\n #endif\n@@ -274,15 +264,6 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n #define EXTRA_SPECS\t\t\t\t\t\t\\\n   { \"cpp_cpu_arch\",\t\tCPP_CPU_ARCH_SPEC },\t\t\\\n   { \"cpp_cpu_arch_default\",\tCPP_ARCH_DEFAULT_SPEC },\t\\\n-  { \"cpp_apcs_pc\",\t\tCPP_APCS_PC_SPEC },\t\t\\\n-  { \"cpp_apcs_pc_default\",\tCPP_APCS_PC_DEFAULT_SPEC },\t\\\n-  { \"cpp_float\",\t\tCPP_FLOAT_SPEC },\t\t\\\n-  { \"cpp_float_default\",\tCPP_FLOAT_DEFAULT_SPEC },\t\\\n-  { \"cpp_endian\",\t\tCPP_ENDIAN_SPEC },\t\t\\\n-  { \"cpp_endian_default\",\tCPP_ENDIAN_DEFAULT_SPEC },\t\\\n-  { \"cpp_isa\",\t\t\tCPP_ISA_SPEC },\t\t\t\\\n-  { \"cpp_interwork\",\t\tCPP_INTERWORK_SPEC },\t\t\\\n-  { \"cpp_interwork_default\",\tCPP_INTERWORK_DEFAULT_SPEC },\t\\\n   { \"subtarget_cpp_spec\",\tSUBTARGET_CPP_SPEC },           \\\n   SUBTARGET_EXTRA_SPECS\n "}, {"sha": "4a137d61b958d72d1e2ecd7d9ee2c3151026abe9", "filename": "gcc/config/arm/conix-elf.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2Fconfig%2Farm%2Fconix-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2Fconfig%2Farm%2Fconix-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconix-elf.h?ref=e6471be6690c30b505c52aba88fb435c76fda758", "patch": "@@ -39,6 +39,8 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n #define SUBTARGET_CPU_DEFAULT \t\tTARGET_CPU_arm7tdmi\n #endif\n      \n-#undef  CPP_PREDEFINES\n-#define CPP_PREDEFINES \\\n-  \"-D__arm__ -D__CONIX__ -D__ELF__\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+    do {\t\t\t\t\t\\\n+\tbuiltin_define (\"__CONIX__\");\t\t\\\n+\tbuiltin_define (\"__ELF__\");\t\t\\\n+    } while (0)"}, {"sha": "6733564044d981d044510dbf3f15b4aa99be56e7", "filename": "gcc/config/arm/linux-elf.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2Fconfig%2Farm%2Flinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2Fconfig%2Farm%2Flinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-elf.h?ref=e6471be6690c30b505c52aba88fb435c76fda758", "patch": "@@ -89,10 +89,15 @@ Boston, MA 02111-1307, USA.  */\n    %{mbig-endian:-EB}\" \\\n    SUBTARGET_EXTRA_LINK_SPEC\n \n-#undef  CPP_PREDEFINES\n-#define CPP_PREDEFINES \\\n-\"-Dunix -D__gnu_linux__ -Dlinux -D__ELF__ \\\n--Asystem=unix -Asystem=posix\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+    do {\t\t\t\t\t\\\n+\tbuiltin_define_std (\"unix\");\t\t\\\n+\tbuiltin_define_std (\"linux\");\t\t\\\n+\tbuiltin_define (\"__gnu_linux__\");\t\\\n+\tbuiltin_define (\"__ELF__\");\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\\\n+\tbuiltin_assert (\"system=posix\");\t\\\n+    } while (0)\n \n /* Allow #sccs in preprocessor.  */\n #define SCCS_DIRECTIVE"}, {"sha": "17d3d2c93cec732fea66ca981d9b05bc0d6a0068", "filename": "gcc/config/arm/netbsd.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2Fconfig%2Farm%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2Fconfig%2Farm%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fnetbsd.h?ref=e6471be6690c30b505c52aba88fb435c76fda758", "patch": "@@ -44,10 +44,15 @@ Boston, MA 02111-1307, USA.  */\n \n /* Some defines for CPP.\n    arm32 is the NetBSD port name, so we always define arm32 and __arm32__.  */\n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"\\\n--Dunix -Driscbsd -Darm32 -D__arm32__ -D__arm__ -D__NetBSD__ \\\n--Asystem=unix -Asystem=NetBSD\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+    do {\t\t\t\t\t\\\n+\tbuiltin_define_std (\"arm32\");\t\t\\\n+\tbuiltin_define_std (\"unix\");\t\t\\\n+\tbuiltin_define_std (\"riscbsd\");\t\t\\\n+\tbuiltin_define (\"__NetBSD__\");\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\\\n+\tbuiltin_assert (\"system=NetBSD\");\t\\\n+    } while (0)\n \n /* Define _POSIX_SOURCE if necessary.  */\n #undef CPP_SPEC"}, {"sha": "46f52e19cdc7e9d81afbf25dac72e4a4e6c405fd", "filename": "gcc/config/arm/riscix.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2Fconfig%2Farm%2Friscix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2Fconfig%2Farm%2Friscix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Friscix.h?ref=e6471be6690c30b505c52aba88fb435c76fda758", "patch": "@@ -47,11 +47,13 @@ Boston, MA 02111-1307, USA.  */\n #define LINK_SPEC \"-X\"\n #endif\n \n-#ifndef CPP_PREDEFINES\n-#define CPP_PREDEFINES  \\\n-    \"-Darm -Driscix -Dunix -Asystem=unix\"\n-#endif\n-\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+    do {\t\t\t\t\t\\\n+\tbuiltin_define_std (\"arm\");\t\t\\\n+\tbuiltin_define_std (\"unix\");\t\t\\\n+\tbuiltin_define_std (\"riscix\");\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\\\n+    } while (0)\n \n /* RISCiX has some weird symbol name munging, that is done to the object module\n    after assembly, which enables multiple libraries to be supported within"}, {"sha": "aadbc6c3b1b6d2d856e683c34767cf3c8502875c", "filename": "gcc/config/arm/riscix1-1.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2Fconfig%2Farm%2Friscix1-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2Fconfig%2Farm%2Friscix1-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Friscix1-1.h?ref=e6471be6690c30b505c52aba88fb435c76fda758", "patch": "@@ -29,9 +29,13 @@ Boston, MA 02111-1307, USA.  */\n #define STARTFILE_SPEC  \\\n   \"%{pg:/usr/lib/gcrt0.o%s}%{!pg:%{p:mcrt0.o%s}%{!p:crt0.o%s}}\"\n \n-#ifndef CPP_PREDEFINES\n-#define CPP_PREDEFINES  \"-Darm -Driscix -Dunix -Asystem=unix\"\n-#endif\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+    do {\t\t\t\t\t\\\n+\tbuiltin_define_std (\"arm\");\t\t\\\n+\tbuiltin_define_std (\"unix\");\t\t\\\n+\tbuiltin_define_std (\"riscix\");\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\\\n+    } while (0)\n \n /* Riscix 1.1 doesn't have X/OPEN support, so only accept -mbsd (but ignore\n    it).  "}, {"sha": "27928db54896ddd1a4b94287e0bd14721db7700c", "filename": "gcc/config/arm/rtems-elf.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2Fconfig%2Farm%2Frtems-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2Fconfig%2Farm%2Frtems-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Frtems-elf.h?ref=e6471be6690c30b505c52aba88fb435c76fda758", "patch": "@@ -24,5 +24,9 @@ Boston, MA 02111-1307, USA.  */\n \n #define HAS_INIT_SECTION\n \n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-D__rtems__ -D__ELF__ -Asystem=rtems\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+    do {\t\t\t\t\t\\\n+\tbuiltin_define (\"__rtems__\");\t\t\\\n+\tbuiltin_define (\"__ELF__\");\t\t\\\n+\tbuiltin_assert (\"system=rtems\");\t\\\n+    } while (0)"}, {"sha": "6ee17ef01ce6317a8005df292e1d6f3748c82fa6", "filename": "gcc/config/arm/semiaof.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2Fconfig%2Farm%2Fsemiaof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2Fconfig%2Farm%2Fsemiaof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsemiaof.h?ref=e6471be6690c30b505c52aba88fb435c76fda758", "patch": "@@ -20,8 +20,11 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#define CPP_PREDEFINES \\\n-    \"-Darm -Dsemi\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+    do {\t\t\t\t\t\\\n+\tbuiltin_define_std (\"arm\");\t\t\\\n+\tbuiltin_define_std (\"semi\");\t\t\\\n+    } while (0)\n \n #define ASM_SPEC \"%{g -g} -arch 4 \\\n -apcs 3%{mapcs-32:/32bit}%{mapcs-26:/26bit}%{!mapcs-26:%{!macps-32:/32bit}}\""}, {"sha": "8322508a232b1cd08d0922930b51017cab8b634b", "filename": "gcc/config/arm/unknown-elf-oabi.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2Fconfig%2Farm%2Funknown-elf-oabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2Fconfig%2Farm%2Funknown-elf-oabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funknown-elf-oabi.h?ref=e6471be6690c30b505c52aba88fb435c76fda758", "patch": "@@ -23,9 +23,6 @@ Boston, MA 02111-1307, USA.  */\n #undef  TARGET_VERSION\n #define TARGET_VERSION\tfputs (\" (ARM/ELF non-Linux old abi)\", stderr);\n \n-#undef  CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Darm_oabi -Darm -Darm_elf -Acpu=arm -Amachine=arm -D__ELF__\"\n-\n #undef  ASM_SPEC\n #define ASM_SPEC \"-moabi %{mbig-endian:-EB} %{mcpu=*:-m%*} %{march=*:-m%*} \\\n  %{mapcs-*:-mapcs-%*} %{mthumb-interwork:-mthumb-interwork}\""}, {"sha": "df3977c1c5673fcc7cfcfa705a18c2eea228b27d", "filename": "gcc/config/arm/unknown-elf.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2Fconfig%2Farm%2Funknown-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2Fconfig%2Farm%2Funknown-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funknown-elf.h?ref=e6471be6690c30b505c52aba88fb435c76fda758", "patch": "@@ -86,10 +86,6 @@ Boston, MA 02111-1307, USA.  */\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#ifndef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-D__ELF__\"\n-#endif\n-\n #ifndef CPP_APCS_PC_DEFAULT_SPEC\n #define CPP_APCS_PC_DEFAULT_SPEC\t\"-D__APCS_32__\"\n #endif"}, {"sha": "473362e4332d8fb18339a9fda6c506b603a0a4d5", "filename": "gcc/config/arm/vxarm.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2Fconfig%2Farm%2Fvxarm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6471be6690c30b505c52aba88fb435c76fda758/gcc%2Fconfig%2Farm%2Fvxarm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvxarm.h?ref=e6471be6690c30b505c52aba88fb435c76fda758", "patch": "@@ -37,8 +37,10 @@ Boston, MA 02111-1307, USA.  */\n   %{!mcpu*:%{!march=*:-DCPU=ARM710A}}\t\\\n \"\n \n-#undef  CPP_PREDEFINES\n-#define CPP_PREDEFINES  \"-D__vxworks -Acpu=arm -Amachine=arm\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+    do {\t\t\t\t\t\\\n+\tbuiltin_define (\"__vxworks\");\t\t\\\n+    } while (0)\n \n /* VxWorks does all the library stuff itself.  */\n #undef  LIB_SPEC"}]}