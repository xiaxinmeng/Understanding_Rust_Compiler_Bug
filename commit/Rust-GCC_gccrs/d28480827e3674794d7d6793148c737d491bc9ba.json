{"sha": "d28480827e3674794d7d6793148c737d491bc9ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI4NDgwODI3ZTM2NzQ3OTRkN2Q2NzkzMTQ4YzczN2Q0OTFiYzliYQ==", "commit": {"author": {"name": "Daniel Kraft", "email": "d@domob.eu", "date": "2008-06-18T13:53:32Z"}, "committer": {"name": "Daniel Kraft", "email": "domob@gcc.gnu.org", "date": "2008-06-18T13:53:32Z"}, "message": "PR fortran/36517, fortran/36492\n\n2008-06-18  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/36517, fortran/36492\n\t* gfortran.dg/array_constructor_25.f03:  New test.\n\t* gfortran.dg/array_constructor_26.f03:  New test.\n\t* gfortran.dg/array_constructor_27.f03:  New test.\n\t* gfortran.dg/array_constructor_28.f03:  New test.\n\t* gfortran.dg/array_constructor_29.f03:  New test.\n\t* gfortran.dg/array_constructor_30.f03:  New test.\n\t* gfortran.dg/array_constructor_type_19.f03:  New test.\n\t* gfortran.dg/array_constructor_type_20.f03:  New test.\n\t* gfortran.dg/array_constructor_type_21.f03:  New test.\n\n2008-06-18  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/36517, fortran/36492\n\t* array.c (gfc_resolve_character_array_constructor):  Call\n\tgfc_set_constant_character_len with changed length-chec argument.\n\t* decl.c (gfc_set_constant_character_len):  Changed array argument to\n\tbe a generic length-checking argument that can be used for correct\n\tchecking with typespec and in special cases where the should-be length\n\tis different from the target length.\n\t(build_struct):  Call gfc_set_constant_character_len with changed length\n\tchecking argument and introduced additional checks for exceptional\n\tconditions on invalid code.\n\t(add_init_expr_to_sym), (do_parm):  Call gfc_set_constant_character_len\n\twith changed argument.\n\t* match.h (gfc_set_constant_character_len):  Changed third argument to\n\tint for the should-be length rather than bool.\n\nFrom-SVN: r136894", "tree": {"sha": "639abee5a18c067cde88b601cac41a076983e196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/639abee5a18c067cde88b601cac41a076983e196"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d28480827e3674794d7d6793148c737d491bc9ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d28480827e3674794d7d6793148c737d491bc9ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d28480827e3674794d7d6793148c737d491bc9ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d28480827e3674794d7d6793148c737d491bc9ba/comments", "author": {"login": "domob1812", "id": 4943644, "node_id": "MDQ6VXNlcjQ5NDM2NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domob1812", "html_url": "https://github.com/domob1812", "followers_url": "https://api.github.com/users/domob1812/followers", "following_url": "https://api.github.com/users/domob1812/following{/other_user}", "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}", "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions", "organizations_url": "https://api.github.com/users/domob1812/orgs", "repos_url": "https://api.github.com/users/domob1812/repos", "events_url": "https://api.github.com/users/domob1812/events{/privacy}", "received_events_url": "https://api.github.com/users/domob1812/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f0c882ab6fcf7595b5d12203a9840202167d45f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0c882ab6fcf7595b5d12203a9840202167d45f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0c882ab6fcf7595b5d12203a9840202167d45f1"}], "stats": {"total": 248, "additions": 215, "deletions": 33}, "files": [{"sha": "6362039389877bd9fd45939f06a45b30d11f51db", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d28480827e3674794d7d6793148c737d491bc9ba", "patch": "@@ -1,3 +1,20 @@\n+2008-06-18  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/36517, fortran/36492\n+\t* array.c (gfc_resolve_character_array_constructor):  Call\n+\tgfc_set_constant_character_len with changed length-chec argument.\n+\t* decl.c (gfc_set_constant_character_len):  Changed array argument to\n+\tbe a generic length-checking argument that can be used for correct\n+\tchecking with typespec and in special cases where the should-be length\n+\tis different from the target length.\n+\t(build_struct):  Call gfc_set_constant_character_len with changed length\n+\tchecking argument and introduced additional checks for exceptional\n+\tconditions on invalid code.\n+\t(add_init_expr_to_sym), (do_parm):  Call gfc_set_constant_character_len\n+\twith changed argument.\n+\t* match.h (gfc_set_constant_character_len):  Changed third argument to\n+\tint for the should-be length rather than bool.\n+\n 2008-06-17  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/36112"}, {"sha": "a34695e42419607ee6596aaf7aa5e31ce9d57bf0", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=d28480827e3674794d7d6793148c737d491bc9ba", "patch": "@@ -1680,25 +1680,29 @@ gfc_resolve_character_array_constructor (gfc_expr *expr)\n \t (without typespec) all elements are verified to have the same length\n \t anyway.  */\n       if (found_length != -1)\n-        for (p = expr->value.constructor; p; p = p->next)\n-          if (p->expr->expr_type == EXPR_CONSTANT)\n-            {\n-              gfc_expr *cl = NULL;\n-              int current_length = -1;\n-\n-              if (p->expr->ts.cl && p->expr->ts.cl->length)\n-              {\n-                cl = p->expr->ts.cl->length;\n-                gfc_extract_int (cl, &current_length);\n-              }\n-\n-              /* If gfc_extract_int above set current_length, we implicitly\n-                 know the type is BT_INTEGER and it's EXPR_CONSTANT.  */\n-\n-              if (! cl\n-                  || (current_length != -1 && current_length < found_length))\n-                gfc_set_constant_character_len (found_length, p->expr, true);\n-            }\n+\tfor (p = expr->value.constructor; p; p = p->next)\n+\t  if (p->expr->expr_type == EXPR_CONSTANT)\n+\t    {\n+\t      gfc_expr *cl = NULL;\n+\t      int current_length = -1;\n+\t      bool has_ts;\n+\n+\t      if (p->expr->ts.cl && p->expr->ts.cl->length)\n+\t      {\n+\t\tcl = p->expr->ts.cl->length;\n+\t\tgfc_extract_int (cl, &current_length);\n+\t      }\n+\n+\t      /* If gfc_extract_int above set current_length, we implicitly\n+\t\t know the type is BT_INTEGER and it's EXPR_CONSTANT.  */\n+\n+\t      has_ts = (expr->ts.cl && expr->ts.cl->length_from_typespec);\n+\n+\t      if (! cl\n+\t\t  || (current_length != -1 && current_length < found_length))\n+\t\tgfc_set_constant_character_len (found_length, p->expr,\n+\t\t\t\t\t\thas_ts ? -1 : found_length);\n+\t    }\n     }\n \n   return SUCCESS;"}, {"sha": "57db93fd8e1e289590aa1e390468945f2fc3b44e", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 45, "deletions": 13, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=d28480827e3674794d7d6793148c737d491bc9ba", "patch": "@@ -1084,10 +1084,12 @@ build_sym (const char *name, gfc_charlen *cl,\n \n \n /* Set character constant to the given length. The constant will be padded or\n-   truncated.  */\n+   truncated.  If we're inside an array constructor without a typespec, we\n+   additionally check that all elements have the same length; check_len -1\n+   means no checking.  */\n \n void\n-gfc_set_constant_character_len (int len, gfc_expr *expr, bool array)\n+gfc_set_constant_character_len (int len, gfc_expr *expr, int check_len)\n {\n   gfc_char_t *s;\n   int slen;\n@@ -1110,10 +1112,11 @@ gfc_set_constant_character_len (int len, gfc_expr *expr, bool array)\n \n       /* Apply the standard by 'hand' otherwise it gets cleared for\n \t initializers.  */\n-      if (array && slen < len && !(gfc_option.allow_std & GFC_STD_GNU))\n+      if (check_len != -1 && slen != check_len\n+          && !(gfc_option.allow_std & GFC_STD_GNU))\n \tgfc_error_now (\"The CHARACTER elements of the array constructor \"\n \t\t       \"at %L must have the same length (%d/%d)\",\n-\t\t\t&expr->where, slen, len);\n+\t\t\t&expr->where, slen, check_len);\n \n       s[len] = '\\0';\n       gfc_free (expr->value.character.string);\n@@ -1269,7 +1272,7 @@ add_init_expr_to_sym (const char *name, gfc_expr **initp, locus *var_locus)\n \t      gfc_constructor * p;\n \n \t      if (init->expr_type == EXPR_CONSTANT)\n-\t\tgfc_set_constant_character_len (len, init, false);\n+\t\tgfc_set_constant_character_len (len, init, -1);\n \t      else if (init->expr_type == EXPR_ARRAY)\n \t\t{\n \t\t  /* Build a new charlen to prevent simplification from\n@@ -1280,7 +1283,7 @@ add_init_expr_to_sym (const char *name, gfc_expr **initp, locus *var_locus)\n \t\t  init->ts.cl->length = gfc_copy_expr (sym->ts.cl->length);\n \n \t\t  for (p = init->value.constructor; p; p = p->next)\n-\t\t    gfc_set_constant_character_len (len, p->expr, false);\n+\t\t    gfc_set_constant_character_len (len, p->expr, -1);\n \t\t}\n \t    }\n \t}\n@@ -1402,19 +1405,48 @@ build_struct (const char *name, gfc_charlen *cl, gfc_expr **init,\n \n   /* Should this ever get more complicated, combine with similar section\n      in add_init_expr_to_sym into a separate function.  */\n-  if (c->ts.type == BT_CHARACTER && !c->pointer && c->initializer)\n+  if (c->ts.type == BT_CHARACTER && !c->pointer && c->initializer && c->ts.cl\n+      && c->ts.cl->length && c->ts.cl->length->expr_type == EXPR_CONSTANT)\n     {\n-      int len = mpz_get_si (c->ts.cl->length->value.integer);\n+      int len;\n+\n+      gcc_assert (c->ts.cl && c->ts.cl->length);\n+      gcc_assert (c->ts.cl->length->expr_type == EXPR_CONSTANT);\n+      gcc_assert (c->ts.cl->length->ts.type == BT_INTEGER);\n+\n+      len = mpz_get_si (c->ts.cl->length->value.integer);\n \n       if (c->initializer->expr_type == EXPR_CONSTANT)\n-\tgfc_set_constant_character_len (len, c->initializer, false);\n+\tgfc_set_constant_character_len (len, c->initializer, -1);\n       else if (mpz_cmp (c->ts.cl->length->value.integer,\n \t\t\tc->initializer->ts.cl->length->value.integer))\n \t{\n+\t  bool has_ts;\n \t  gfc_constructor *ctor = c->initializer->value.constructor;\n-\t  for (;ctor ; ctor = ctor->next)\n-\t    if (ctor->expr->expr_type == EXPR_CONSTANT)\n-\t      gfc_set_constant_character_len (len, ctor->expr, true);\n+\n+\t  bool first = true;\n+\t  int first_len;\n+\n+\t  has_ts = (c->initializer->ts.cl\n+\t\t    && c->initializer->ts.cl->length_from_typespec);\n+\n+\t  for (; ctor; ctor = ctor->next)\n+\t    {\n+\t      /* Remember the length of the first element for checking that\n+\t\t all elements *in the constructor* have the same length.  This\n+\t\t need not be the length of the LHS!  */\n+\t      if (first)\n+\t\t{\n+\t\t  gcc_assert (ctor->expr->expr_type == EXPR_CONSTANT);\n+\t\t  gcc_assert (ctor->expr->ts.type == BT_CHARACTER);\n+\t\t  first_len = ctor->expr->value.character.length;\n+\t\t  first = false;\n+\t\t}\n+\n+\t      if (ctor->expr->expr_type == EXPR_CONSTANT)\n+\t\tgfc_set_constant_character_len (len, ctor->expr,\n+\t\t\t\t\t\thas_ts ? -1 : first_len);\n+\t    }\n \t}\n     }\n \n@@ -5822,7 +5854,7 @@ do_parm (void)\n       && init->expr_type == EXPR_CONSTANT\n       && init->ts.type == BT_CHARACTER)\n     gfc_set_constant_character_len (\n-      mpz_get_si (sym->ts.cl->length->value.integer), init, false);\n+      mpz_get_si (sym->ts.cl->length->value.integer), init, -1);\n   else if (sym->ts.type == BT_CHARACTER && sym->ts.cl != NULL\n \t   && sym->ts.cl->length == NULL)\n \t{"}, {"sha": "cf30b2730dc143854318104eb9030d36c5c0a541", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=d28480827e3674794d7d6793148c737d491bc9ba", "patch": "@@ -147,7 +147,7 @@ match gfc_match_final_decl (void);\n match gfc_match_implicit_none (void);\n match gfc_match_implicit (void);\n \n-void gfc_set_constant_character_len (int, gfc_expr *, bool);\n+void gfc_set_constant_character_len (int, gfc_expr *, int);\n \n /* Matchers for attribute declarations.  */\n match gfc_match_allocatable (void);"}, {"sha": "ff03e2f966802e86fe206c6c76e2edcd231b5bc1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d28480827e3674794d7d6793148c737d491bc9ba", "patch": "@@ -1,3 +1,16 @@\n+2008-06-18  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/36517, fortran/36492\n+\t* gfortran.dg/array_constructor_25.f03:  New test.\n+\t* gfortran.dg/array_constructor_26.f03:  New test.\n+\t* gfortran.dg/array_constructor_27.f03:  New test.\n+\t* gfortran.dg/array_constructor_28.f03:  New test.\n+\t* gfortran.dg/array_constructor_29.f03:  New test.\n+\t* gfortran.dg/array_constructor_30.f03:  New test.\n+\t* gfortran.dg/array_constructor_type_19.f03:  New test.\n+\t* gfortran.dg/array_constructor_type_20.f03:  New test.\n+\t* gfortran.dg/array_constructor_type_21.f03:  New test.\n+\n 2008-06-17  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/36112"}, {"sha": "b18746815c5880c7258da99886898ee1d25c1bf0", "filename": "gcc/testsuite/gfortran.dg/array_constructor_25.f03", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_25.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_25.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_25.f03?ref=d28480827e3674794d7d6793148c737d491bc9ba", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+\n+! PR fortran/36492\n+! Check for incorrect error message with -std=f2003.\n+! Reduced test based on the one from comment #4, PR 36492.\n+\n+type t\n+  character (2) :: arr (1) = [ \"a\" ]\n+end type t\n+\n+end"}, {"sha": "a226f6ae00c3053fcaf3251ce56cd211e464e568", "filename": "gcc/testsuite/gfortran.dg/array_constructor_26.f03", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_26.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_26.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_26.f03?ref=d28480827e3674794d7d6793148c737d491bc9ba", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+\n+! PR fortran/36492\n+! Check for incorrect error message with -std=f2003.\n+! Test from comment #4, PR 36492 causing ICE.\n+\n+MODULE WinData\n+  IMPLICIT NONE\n+  INTEGER (1), PARAMETER :: MAXFLD = 25_1, MAXHED = 5_1, MAXCHR = 80_1\n+  integer :: i\n+  TYPE TWindowData\n+    CHARACTER (MAX_FLD_HED, 1) :: DWFdHd(MAXFLD) = [(\" \", i = 1, MAXFLD)]\n+    ! { dg-error \"no IMPLICIT type\" \"\" { target *-*-* } 12 }\n+    ! { dg-error \"specification expression\" \"\" { target *-*-* } 12 }\n+  END TYPE TWindowData\n+END MODULE WinData\n+\n+! { dg-final { cleanup-modules \"WinData\" } }"}, {"sha": "6cd4d62dac73842d841595e19abee45d2170b9e4", "filename": "gcc/testsuite/gfortran.dg/array_constructor_27.f03", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_27.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_27.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_27.f03?ref=d28480827e3674794d7d6793148c737d491bc9ba", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+\n+! PR fortran/36492\n+! Check for incorrect error message with -std=f2003.\n+! Reduced test triggering the ICE mentioned in comment #4, PR 36492.\n+\n+implicit none\n+\n+type t\n+  character (a) :: arr (1) = [ \"a\" ]\n+  ! { dg-error \"no IMPLICIT type\" \"\" { target *-*-* } 10 }\n+  ! { dg-error \"specification expression\" \"\" { target *-*-* } 10 }\n+end type t\n+\n+end"}, {"sha": "382e49aef886f230b8d1df6d13c148104343c771", "filename": "gcc/testsuite/gfortran.dg/array_constructor_28.f03", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_28.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_28.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_28.f03?ref=d28480827e3674794d7d6793148c737d491bc9ba", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+\n+! PR fortran/36492\n+! Check that the error is still emitted for really incorrect constructor.\n+\n+type t\n+  character (2) :: arr (2) = [ \"a\", \"ab\" ] ! { dg-error \"Different CHARACTER\" }\n+end type t\n+\n+end"}, {"sha": "03534fa81ed7d3823db12a6ce4edffb016ce4d3c", "filename": "gcc/testsuite/gfortran.dg/array_constructor_29.f03", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_29.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_29.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_29.f03?ref=d28480827e3674794d7d6793148c737d491bc9ba", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+\n+! PR fortran/36492\n+! Similar to the ICE-test, but now test it works for real constants.\n+\n+implicit none\n+\n+integer, parameter :: a = 42\n+type t\n+  character (a) :: arr (1) = [ \"a\" ]\n+end type t\n+\n+end"}, {"sha": "587ce03977dc123e9767bc79f7e541014dd3e34e", "filename": "gcc/testsuite/gfortran.dg/array_constructor_30.f03", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_30.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_30.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_30.f03?ref=d28480827e3674794d7d6793148c737d491bc9ba", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+\n+! PR fortran/36492\n+! Similar to the ICE-test, but now test for complaint about constant\n+! specification expression.\n+\n+implicit none\n+\n+integer :: a = 42\n+type t\n+  character (a) :: arr (1) = [ \"a\" ]\n+  ! { dg-error \"in the expression\" \"\" { target *-*-* } 11 }\n+  ! { dg-error \"specification expression\" \"\" { target *-*-* } 11 }\n+end type t\n+\n+end"}, {"sha": "f3c8fd5ef4fb54b246ec9b093ed7714109b8ec19", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_19.f03", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_19.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_19.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_19.f03?ref=d28480827e3674794d7d6793148c737d491bc9ba", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+\n+! PR fortran/36517\n+! Check for incorrect error message with -std=f2003.\n+! This is the test of comment #1, PR 36517.\n+\n+print *, [ character(len=2) :: 'a', 'bb' ]\n+end"}, {"sha": "9702669d4a8c42cf11c42300dc92defab28d4049", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_20.f03", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_20.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_20.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_20.f03?ref=d28480827e3674794d7d6793148c737d491bc9ba", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+\n+! PR fortran/36517\n+! Check for incorrect error message with -std=f2003.\n+! This is the original test from PR 36517.\n+\n+CHARACTER (len=*) MY_STRING(1:3)\n+PARAMETER ( MY_STRING = (/ CHARACTER (len=3) :: \"AC\", \"B\", \"C\" /) )\n+CHARACTER (len=*), PARAMETER :: str(2) = [ CHARACTER (len=3) :: 'A', 'cc' ]\n+END"}, {"sha": "41e4da346c93ee0f3c7ab5fc4f401e022c631536", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_21.f03", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_21.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28480827e3674794d7d6793148c737d491bc9ba/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_21.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_21.f03?ref=d28480827e3674794d7d6793148c737d491bc9ba", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+\n+! PR fortran/36492\n+! Check that it works with a typespec even for not-the-same-length elements.\n+\n+type t\n+  character (1) :: arr (2) = [ character(len=2) :: \"a\", \"ab\" ]\n+end type t\n+\n+end"}]}