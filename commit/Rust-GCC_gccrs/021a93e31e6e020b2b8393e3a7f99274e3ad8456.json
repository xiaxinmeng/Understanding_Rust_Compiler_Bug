{"sha": "021a93e31e6e020b2b8393e3a7f99274e3ad8456", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIxYTkzZTMxZTZlMDIwYjJiODM5M2UzYTdmOTkyNzRlM2FkODQ1Ng==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2007-02-22T13:10:49Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2007-02-22T13:10:49Z"}, "message": "* tree-data-ref.c (ptr_ptr_may_alias_p): Take alias sets into account.\n\nFrom-SVN: r122226", "tree": {"sha": "11bbc10f68c15a604e8b77a8dac5135a2a899cb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11bbc10f68c15a604e8b77a8dac5135a2a899cb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/021a93e31e6e020b2b8393e3a7f99274e3ad8456", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021a93e31e6e020b2b8393e3a7f99274e3ad8456", "html_url": "https://github.com/Rust-GCC/gccrs/commit/021a93e31e6e020b2b8393e3a7f99274e3ad8456", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021a93e31e6e020b2b8393e3a7f99274e3ad8456/comments", "author": null, "committer": null, "parents": [{"sha": "8fca6de5641592fdaa5e03a415b1727f5e1ddcaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fca6de5641592fdaa5e03a415b1727f5e1ddcaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fca6de5641592fdaa5e03a415b1727f5e1ddcaf"}], "stats": {"total": 97, "additions": 96, "deletions": 1}, "files": [{"sha": "d7f0f498a6ab134d9b7de594c2e43076ebda74af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021a93e31e6e020b2b8393e3a7f99274e3ad8456/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021a93e31e6e020b2b8393e3a7f99274e3ad8456/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=021a93e31e6e020b2b8393e3a7f99274e3ad8456", "patch": "@@ -1,3 +1,8 @@\n+2007-02-22  Zdenek Dvorak  <dvorakz@suse.cz>\n+            Ira Rosen  <irar@il.ibm.com>\n+\n+\t* tree-data-ref.c (ptr_ptr_may_alias_p): Take alias sets into account.\n+\n 2007-02-22  Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-optimization/30843"}, {"sha": "1e52e49d836b7c1501b1eb6ba39d67f3cf6aaa53", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021a93e31e6e020b2b8393e3a7f99274e3ad8456/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021a93e31e6e020b2b8393e3a7f99274e3ad8456/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=021a93e31e6e020b2b8393e3a7f99274e3ad8456", "patch": "@@ -1,3 +1,7 @@\n+2007-02-22  Ira Rosen  <irar@il.ibm.com>\n+\n+\t* gcc.dg/vect/vect-106.c: New test.\n+\n 2007-02-22  Dorit Nuzman  <dorit@il.ibm.com>\n             Ira Rosen  <irar@il.ibm.com> \n "}, {"sha": "04a9f6c1c6806094d070b5b8eab895c47655fd42", "filename": "gcc/testsuite/gcc.dg/vect/vect-106.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021a93e31e6e020b2b8393e3a7f99274e3ad8456/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-106.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021a93e31e6e020b2b8393e3a7f99274e3ad8456/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-106.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-106.c?ref=021a93e31e6e020b2b8393e3a7f99274e3ad8456", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdlib.h>\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 9\n+\n+static int a[N] = {1,2,3,4,5,6,7,8,9};\n+static int b[N] = {2,3,4,5,6,7,8,9,0};\n+\n+int main1 () {\n+  int i;\n+  int *p, *q, *p1, *q1;\n+  p = (unsigned int *) malloc (sizeof (unsigned int) * N);\n+  q = (unsigned int *) malloc (sizeof (unsigned int) * N);\n+\n+  p1 = p; q1 = q;\n+\n+  /* Not vectorizable: because of the redundant cast (caused by ponter\n+     arithmetics), alias analysis fails to distinguish between \n+     the pointers.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      *(q + i) = a[i];\n+      *(p + i) = b[i];\n+    }\n+\n+  /* check results: */\n+  for (i = 0; i < N; i++)\n+    {\n+       if (*q != a[i] || *p != b[i])\n+         abort();\n+       q++; \n+       p++;\n+    }\n+  \n+  q = q1;\n+  p = p1;\n+  /* Vectorizable.  */ \n+  for (i = 0; i < N; i++)\n+    {\n+      *q = b[i];\n+      *p = a[i];\n+      q++;\n+      p++;\n+    }\n+\n+  q = q1;\n+  p = p1;\n+  /* check results: */\n+  for (i = 0; i < N; i++)\n+    {\n+       if (*q != b[i] || *p != a[i])\n+         abort();\n+       q++;\n+       p++;\n+    }\n+\n+  return 0; \n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"can't determine dependence\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "2f57c4f02036e851a93b4839629c9166a94bb273", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021a93e31e6e020b2b8393e3a7f99274e3ad8456/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021a93e31e6e020b2b8393e3a7f99274e3ad8456/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=021a93e31e6e020b2b8393e3a7f99274e3ad8456", "patch": "@@ -172,6 +172,7 @@ ptr_ptr_may_alias_p (tree ptr_a, tree ptr_b,\n   tree tag_a = NULL_TREE, tag_b = NULL_TREE;\n   struct ptr_info_def *pi_a = DR_PTR_INFO (dra);  \n   struct ptr_info_def *pi_b = DR_PTR_INFO (drb);  \n+  bitmap bal1, bal2;\n \n   if (pi_a && pi_a->name_mem_tag && pi_b && pi_b->name_mem_tag)\n     {\n@@ -192,7 +193,19 @@ ptr_ptr_may_alias_p (tree ptr_a, tree ptr_b,\n       if (!tag_b)\n \treturn false;\n     }\n-  *aliased = (tag_a == tag_b);\n+  bal1 = BITMAP_ALLOC (NULL);\n+  bitmap_set_bit (bal1, DECL_UID (tag_a));\n+  if (MTAG_P (tag_a) && MTAG_ALIASES (tag_a))\n+    bitmap_ior_into (bal1, MTAG_ALIASES (tag_a));\n+\n+  bal2 = BITMAP_ALLOC (NULL);\n+  bitmap_set_bit (bal2, DECL_UID (tag_b));\n+  if (MTAG_P (tag_b) && MTAG_ALIASES (tag_b))\n+    bitmap_ior_into (bal2, MTAG_ALIASES (tag_b));\n+  *aliased = bitmap_intersect_p (bal1, bal2);\n+\n+  BITMAP_FREE (bal1);\n+  BITMAP_FREE (bal2);\n   return true;\n }\n "}]}