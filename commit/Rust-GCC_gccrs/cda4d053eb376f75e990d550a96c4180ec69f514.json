{"sha": "cda4d053eb376f75e990d550a96c4180ec69f514", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RhNGQwNTNlYjM3NmY3NWU5OTBkNTUwYTk2YzQxODBlYzY5ZjUxNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-03-23T08:33:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-03-23T08:33:41Z"}, "message": "re PR tree-optimization/80032 (C++ excessive stack usage (no stack reuse))\n\n2017-03-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/80032\n\t* gimplify.c (gimple_push_cleanup): Forced unconditional\n\tcleanups still have to go to the conditional_cleanups\n\tsequence.\n\nFrom-SVN: r246414", "tree": {"sha": "e3de8f5339854801966d9afe66e53b0f1bf6da3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3de8f5339854801966d9afe66e53b0f1bf6da3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cda4d053eb376f75e990d550a96c4180ec69f514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cda4d053eb376f75e990d550a96c4180ec69f514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cda4d053eb376f75e990d550a96c4180ec69f514", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cda4d053eb376f75e990d550a96c4180ec69f514/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d1b8f791643e83e95d49740e1061356216d5cc7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1b8f791643e83e95d49740e1061356216d5cc7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1b8f791643e83e95d49740e1061356216d5cc7c"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "ddf90e5cd67e59811bc73b792ae6408d24429bbb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda4d053eb376f75e990d550a96c4180ec69f514/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda4d053eb376f75e990d550a96c4180ec69f514/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cda4d053eb376f75e990d550a96c4180ec69f514", "patch": "@@ -1,3 +1,10 @@\n+2017-03-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80032\n+\t* gimplify.c (gimple_push_cleanup): Forced unconditional\n+\tcleanups still have to go to the conditional_cleanups\n+\tsequence.\n+\n 2017-03-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/80072"}, {"sha": "6deac4a987adaac580b404fa9a34b40de615144e", "filename": "gcc/gimplify.c", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda4d053eb376f75e990d550a96c4180ec69f514/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda4d053eb376f75e990d550a96c4180ec69f514/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=cda4d053eb376f75e990d550a96c4180ec69f514", "patch": "@@ -6312,7 +6312,7 @@ gimple_push_cleanup (tree var, tree cleanup, bool eh_only, gimple_seq *pre_p,\n   if (seen_error ())\n     return;\n \n-  if (gimple_conditional_context () && ! force_uncond)\n+  if (gimple_conditional_context ())\n     {\n       /* If we're in a conditional context, this is more complex.  We only\n \t want to run the cleanup if we actually ran the initialization that\n@@ -6334,22 +6334,31 @@ gimple_push_cleanup (tree var, tree cleanup, bool eh_only, gimple_seq *pre_p,\n \t   }\n \t   val\n       */\n-      tree flag = create_tmp_var (boolean_type_node, \"cleanup\");\n-      gassign *ffalse = gimple_build_assign (flag, boolean_false_node);\n-      gassign *ftrue = gimple_build_assign (flag, boolean_true_node);\n+      if (force_uncond)\n+\t{\n+\t  gimplify_stmt (&cleanup, &cleanup_stmts);\n+\t  wce = gimple_build_wce (cleanup_stmts);\n+\t  gimplify_seq_add_stmt (&gimplify_ctxp->conditional_cleanups, wce);\n+\t}\n+      else\n+\t{\n+\t  tree flag = create_tmp_var (boolean_type_node, \"cleanup\");\n+\t  gassign *ffalse = gimple_build_assign (flag, boolean_false_node);\n+\t  gassign *ftrue = gimple_build_assign (flag, boolean_true_node);\n \n-      cleanup = build3 (COND_EXPR, void_type_node, flag, cleanup, NULL);\n-      gimplify_stmt (&cleanup, &cleanup_stmts);\n-      wce = gimple_build_wce (cleanup_stmts);\n+\t  cleanup = build3 (COND_EXPR, void_type_node, flag, cleanup, NULL);\n+\t  gimplify_stmt (&cleanup, &cleanup_stmts);\n+\t  wce = gimple_build_wce (cleanup_stmts);\n \n-      gimplify_seq_add_stmt (&gimplify_ctxp->conditional_cleanups, ffalse);\n-      gimplify_seq_add_stmt (&gimplify_ctxp->conditional_cleanups, wce);\n-      gimplify_seq_add_stmt (pre_p, ftrue);\n+\t  gimplify_seq_add_stmt (&gimplify_ctxp->conditional_cleanups, ffalse);\n+\t  gimplify_seq_add_stmt (&gimplify_ctxp->conditional_cleanups, wce);\n+\t  gimplify_seq_add_stmt (pre_p, ftrue);\n \n-      /* Because of this manipulation, and the EH edges that jump\n-\t threading cannot redirect, the temporary (VAR) will appear\n-\t to be used uninitialized.  Don't warn.  */\n-      TREE_NO_WARNING (var) = 1;\n+\t  /* Because of this manipulation, and the EH edges that jump\n+\t     threading cannot redirect, the temporary (VAR) will appear\n+\t     to be used uninitialized.  Don't warn.  */\n+\t  TREE_NO_WARNING (var) = 1;\n+\t}\n     }\n   else\n     {"}]}