{"sha": "57905c2bb3dc00409591f58a8e335cd16c2940ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc5MDVjMmJiM2RjMDA0MDk1OTFmNThhOGUzMzVjZDE2YzI5NDBmZg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-11-08T16:47:58Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-11-08T16:47:58Z"}, "message": "re PR fortran/68196 (ICE on function result with procedure pointer component)\n\n2015-11-08  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/68196\n\t* class.c (has_finalizer_component): Prevent infinite recursion\n\tthrough this function if the derived type and that of its\n\tcomponent are the same.\n\t* trans-types.c (gfc_get_derived_type): Do the same for proc\n\tpointers by ignoring the explicit interface for the component.\n\n\tPR fortran/66465\n\t* check.c (same_type_check): If either of the expressions is\n\tBT_PROCEDURE, use the typespec from the symbol, rather than the\n\texpression.\n\n2015-11-08  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/68196\n\t* gfortran.dg/proc_ptr_47.f90: New test.\n\n\tPR fortran/66465\n\t* gfortran.dg/pr66465.f90: New test.\n\nFrom-SVN: r229954", "tree": {"sha": "7720d688995fe86e6ff242df8dbbe7f19bf73554", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7720d688995fe86e6ff242df8dbbe7f19bf73554"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57905c2bb3dc00409591f58a8e335cd16c2940ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57905c2bb3dc00409591f58a8e335cd16c2940ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57905c2bb3dc00409591f58a8e335cd16c2940ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57905c2bb3dc00409591f58a8e335cd16c2940ff/comments", "author": null, "committer": null, "parents": [{"sha": "210172f47dac16f21001d617e9175c563f2fdfd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/210172f47dac16f21001d617e9175c563f2fdfd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/210172f47dac16f21001d617e9175c563f2fdfd1"}], "stats": {"total": 114, "additions": 110, "deletions": 4}, "files": [{"sha": "ce3d7d03410deb8afb8ed6ab33fa26e91ccf7049", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57905c2bb3dc00409591f58a8e335cd16c2940ff/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57905c2bb3dc00409591f58a8e335cd16c2940ff/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=57905c2bb3dc00409591f58a8e335cd16c2940ff", "patch": "@@ -1,3 +1,17 @@\n+2015-11-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/68196\n+\t* class.c (has_finalizer_component): Prevent infinite recursion\n+\tthrough this function if the derived type and that of its\n+\tcomponent are the same.\n+\t* trans-types.c (gfc_get_derived_type): Do the same for proc\n+\tpointers by ignoring the explicit interface for the component.\n+\n+\tPR fortran/66465\n+\t* check.c (same_type_check): If either of the expressions is\n+\tBT_PROCEDURE, use the typespec from the symbol, rather than the\n+\texpression.\n+\n 2015-11-07  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/68153\n@@ -111,7 +125,7 @@\n \n \tPR fortran/68154\n \t* decl.c (add_init_expr_to_sym): if the char length in the typespec\n-\tis NULL, check for and use a constructor. \n+\tis NULL, check for and use a constructor.\n \n 2015-10-30  Steven G. Kargl  <kargl@gcc.gnu.org>\n "}, {"sha": "038ee218d9450207301ace67386bec1d785eae9f", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57905c2bb3dc00409591f58a8e335cd16c2940ff/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57905c2bb3dc00409591f58a8e335cd16c2940ff/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=57905c2bb3dc00409591f58a8e335cd16c2940ff", "patch": "@@ -399,7 +399,15 @@ less_than_bitsize2 (const char *arg1, gfc_expr *expr1, const char *arg2,\n static bool\n same_type_check (gfc_expr *e, int n, gfc_expr *f, int m)\n {\n-  if (gfc_compare_types (&e->ts, &f->ts))\n+  gfc_typespec *ets = &e->ts;\n+  gfc_typespec *fts = &f->ts;\n+\n+  if (e->ts.type == BT_PROCEDURE && e->symtree->n.sym)\n+    ets = &e->symtree->n.sym->ts;\n+  if (f->ts.type == BT_PROCEDURE && f->symtree->n.sym)\n+    fts = &f->symtree->n.sym->ts;\n+\n+  if (gfc_compare_types (ets, fts))\n     return true;\n \n   gfc_error (\"%qs argument of %qs intrinsic at %L must be the same type \""}, {"sha": "8b49ae95a2069cfb05786a33b1932efa4725f6c5", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57905c2bb3dc00409591f58a8e335cd16c2940ff/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57905c2bb3dc00409591f58a8e335cd16c2940ff/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=57905c2bb3dc00409591f58a8e335cd16c2940ff", "patch": "@@ -843,7 +843,11 @@ has_finalizer_component (gfc_symbol *derived)\n \t  && c->ts.u.derived->f2k_derived->finalizers)\n \treturn true;\n \n+      /* Stop infinite recursion through this function by inhibiting\n+\t calls when the derived type and that of the component are\n+\t the same.  */\n       if (c->ts.type == BT_DERIVED\n+\t  && !gfc_compare_derived_types (derived, c->ts.u.derived)\n \t  && !c->attr.pointer && !c->attr.allocatable\n \t  && has_finalizer_component (c->ts.u.derived))\n \treturn true;"}, {"sha": "ad6cee876069107b192e04505151b206f40976e8", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57905c2bb3dc00409591f58a8e335cd16c2940ff/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57905c2bb3dc00409591f58a8e335cd16c2940ff/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=57905c2bb3dc00409591f58a8e335cd16c2940ff", "patch": "@@ -2366,6 +2366,7 @@ gfc_get_derived_type (gfc_symbol * derived)\n   gfc_component *c;\n   gfc_dt_list *dt;\n   gfc_namespace *ns;\n+  tree tmp;\n \n   if (derived->attr.unlimited_polymorphic\n       || (flag_coarray == GFC_FCOARRAY_LIB\n@@ -2517,8 +2518,19 @@ gfc_get_derived_type (gfc_symbol * derived)\n      node as DECL_CONTEXT of each FIELD_DECL.  */\n   for (c = derived->components; c; c = c->next)\n     {\n-      if (c->attr.proc_pointer)\n+      /* Prevent infinite recursion, when the procedure pointer type is\n+\t the same as derived, by forcing the procedure pointer component to\n+\t be built as if the explicit interface does not exist.  */\n+      if (c->attr.proc_pointer\n+\t  && ((c->ts.type != BT_DERIVED && c->ts.type != BT_CLASS)\n+\t       || (c->ts.u.derived\n+\t\t   && !gfc_compare_derived_types (derived, c->ts.u.derived))))\n \tfield_type = gfc_get_ppc_type (c);\n+      else if (c->attr.proc_pointer && derived->backend_decl)\n+\t{\n+\t  tmp = build_function_type_list (derived->backend_decl, NULL_TREE);\n+\t  field_type = build_pointer_type (tmp);\n+\t}\n       else if (c->ts.type == BT_DERIVED || c->ts.type == BT_CLASS)\n         field_type = c->ts.u.derived->backend_decl;\n       else"}, {"sha": "2801c946fe7171180b057a225a56373ee5a313c0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57905c2bb3dc00409591f58a8e335cd16c2940ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57905c2bb3dc00409591f58a8e335cd16c2940ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=57905c2bb3dc00409591f58a8e335cd16c2940ff", "patch": "@@ -1,3 +1,11 @@\n+2015-11-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/68196\n+\t* gfortran.dg/proc_ptr_47.f90: New test.\n+\n+\tPR fortran/66465\n+\t* gfortran.dg/pr66465.f90: New test.\n+\n 2015-11-07  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* gcc.dg/Wno-frame-address.c: Skip on hppa*-*-*.\n@@ -36,7 +44,7 @@\n 2015-11-06  Dominique d'Humieres <dominiq@lps.ens.fr>\n \n \tPR fortran/54224\n-\t* gfortran.dg/warn_unused_function_2.f90: Add two new \n+\t* gfortran.dg/warn_unused_function_2.f90: Add two new\n \t\"defined but not used\" subroutines.\n \n 2015-11-06  Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "ab8683050511e277f869a2ab2d8c6b16974ac0d8", "filename": "gcc/testsuite/gfortran.dg/pr66465.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57905c2bb3dc00409591f58a8e335cd16c2940ff/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr66465.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57905c2bb3dc00409591f58a8e335cd16c2940ff/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr66465.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr66465.f90?ref=57905c2bb3dc00409591f58a8e335cd16c2940ff", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do compile }\n+!\n+! Tests the fix for PR66465, in which the arguments of the call to\n+! ASSOCIATED were falsly detected to have different type/kind.\n+!\n+! Contributed by Damian Rouson  <damian@sourceryinstitute.org>\n+!\n+  interface\n+     real function HandlerInterface (arg)\n+       real :: arg\n+     end\n+  end interface\n+\n+  type TextHandlerTestCase\n+     procedure (HandlerInterface), nopass, pointer :: handlerOut=>null()\n+  end type\n+\n+  type(TextHandlerTestCase) this\n+\n+  procedure (HandlerInterface), pointer :: procPtr=>null()\n+\n+  print*, associated(procPtr, this%handlerOut)\n+end"}, {"sha": "43084f67e40141541a20058164ff5e3a83a2b14c", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_47.f90", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57905c2bb3dc00409591f58a8e335cd16c2940ff/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_47.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57905c2bb3dc00409591f58a8e335cd16c2940ff/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_47.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_47.f90?ref=57905c2bb3dc00409591f58a8e335cd16c2940ff", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do run }\n+! Tests the fix for PR68196\n+!\n+! Contributed by Damian Rouson  <damian@sourceryinstitute.org>\n+!\n+  type AA\n+    integer :: i\n+    procedure(foo), pointer :: funct\n+  end type\n+  class(AA), allocatable :: my_AA\n+  type(AA) :: res\n+\n+  allocate (my_AA, source = AA (1, foo))\n+\n+  res = my_AA%funct ()\n+\n+  if (res%i .ne. 3) call abort\n+  if (.not.associated (res%funct)) call abort\n+  if (my_AA%i .ne. 4) call abort\n+  if (associated (my_AA%funct)) call abort\n+\n+contains\n+  function foo(A)\n+    class(AA), allocatable :: A\n+    type(AA) foo\n+\n+    if (.not.allocated (A)) then\n+      allocate (A, source = AA (2, foo))\n+    endif\n+\n+    select type (A)\n+      type is (AA)\n+        foo = AA (3, foo)\n+        A = AA (4, NULL ())\n+    end select\n+  end function\n+end"}]}