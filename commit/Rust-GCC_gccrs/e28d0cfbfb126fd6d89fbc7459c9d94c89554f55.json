{"sha": "e28d0cfbfb126fd6d89fbc7459c9d94c89554f55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI4ZDBjZmJmYjEyNmZkNmQ4OWZiYzc0NTljOWQ5NGM4OTU1NGY1NQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-13T20:48:45Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-13T20:48:45Z"}, "message": "bitmap.c, [...]: Fix comment formatting.\n\n\t* bitmap.c, bitmap.h, expmed.c, tree-cfg.c: Fix comment\n\tformatting.\n\nFrom-SVN: r90595", "tree": {"sha": "4c9cf84aa5561d6c6759debacb43b9ee62741ed2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c9cf84aa5561d6c6759debacb43b9ee62741ed2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e28d0cfbfb126fd6d89fbc7459c9d94c89554f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e28d0cfbfb126fd6d89fbc7459c9d94c89554f55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e28d0cfbfb126fd6d89fbc7459c9d94c89554f55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e28d0cfbfb126fd6d89fbc7459c9d94c89554f55/comments", "author": null, "committer": null, "parents": [{"sha": "68f674e990c0035f008ff0cc67f711ef7912e4f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68f674e990c0035f008ff0cc67f711ef7912e4f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68f674e990c0035f008ff0cc67f711ef7912e4f8"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "481d95261f3dd8c7b384f1475c799aa13c322b1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e28d0cfbfb126fd6d89fbc7459c9d94c89554f55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e28d0cfbfb126fd6d89fbc7459c9d94c89554f55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e28d0cfbfb126fd6d89fbc7459c9d94c89554f55", "patch": "@@ -1,3 +1,8 @@\n+2004-11-13  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* bitmap.c, bitmap.h, expmed.c, tree-cfg.c: Fix comment\n+\tformatting.\n+\n 2004-11-13  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* doc/install.texi (automake): Correctly document that everything now "}, {"sha": "6ab194f154889d77c1d8b670db71e0f6b195fad9", "filename": "gcc/bitmap.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e28d0cfbfb126fd6d89fbc7459c9d94c89554f55/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e28d0cfbfb126fd6d89fbc7459c9d94c89554f55/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=e28d0cfbfb126fd6d89fbc7459c9d94c89554f55", "patch": "@@ -496,7 +496,7 @@ bitmap_first_set_bit (bitmap a)\n }\n \f\n \n-/* DST = A & B. */\n+/* DST = A & B.  */\n \n void\n bitmap_and (bitmap dst, bitmap a, bitmap b)\n@@ -606,7 +606,7 @@ bitmap_and_compl (bitmap dst, bitmap a, bitmap b)\n     {\n       if (!b_elt || a_elt->indx < b_elt->indx)\n \t{\n-\t  /* Copy a_elt. */\n+\t  /* Copy a_elt.  */\n \t  if (!dst_elt)\n \t    dst_elt = bitmap_elt_insert_after (dst, dst_prev);\n \t  "}, {"sha": "fb466dcae9eb015533542b5426574d4ab5055139", "filename": "gcc/bitmap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e28d0cfbfb126fd6d89fbc7459c9d94c89554f55/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e28d0cfbfb126fd6d89fbc7459c9d94c89554f55/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=e28d0cfbfb126fd6d89fbc7459c9d94c89554f55", "patch": "@@ -266,7 +266,7 @@ bmp_iter_and_init (bitmap_iterator *bi, bitmap map1, bitmap map2,\n       bi->elt2 = bi->elt2->next;\n     }\n \n-  /* If we're at the same index, then we have some intersecting bits.   */\n+  /* If we're at the same index, then we have some intersecting bits.  */\n   if (bi->elt1->indx == bi->elt2->indx)\n     {\n       /* We might have advanced beyond the start_bit, so reinitialize"}, {"sha": "d9a400103a814568b5519edaf3cdec54507c1efd", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e28d0cfbfb126fd6d89fbc7459c9d94c89554f55/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e28d0cfbfb126fd6d89fbc7459c9d94c89554f55/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=e28d0cfbfb126fd6d89fbc7459c9d94c89554f55", "patch": "@@ -1870,7 +1870,7 @@ extract_force_align_mem_bit_field (rtx op0, unsigned HOST_WIDE_INT bitsize,\n   unsigned int sign_shift_up, sign_shift_dn;\n   rtx base, a1, a2, v1, v2, comb, shift, result, start;\n \n-  /* Choose a mode that will fit BITSIZE.    */\n+  /* Choose a mode that will fit BITSIZE.  */\n   mode = smallest_mode_for_size (bitsize, MODE_INT);\n   m_size = GET_MODE_SIZE (mode);\n   m_bitsize = GET_MODE_BITSIZE (mode);"}, {"sha": "9136efee7bab4a521eb9d843c14ebbef2c24017e", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e28d0cfbfb126fd6d89fbc7459c9d94c89554f55/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e28d0cfbfb126fd6d89fbc7459c9d94c89554f55/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=e28d0cfbfb126fd6d89fbc7459c9d94c89554f55", "patch": "@@ -2934,7 +2934,7 @@ tree_find_edge_insert_loc (edge e, block_stmt_iterator *bsi,\n \n      The requirement for no PHI nodes could be relaxed.  Basically we\n      would have to examine the PHIs to prove that none of them used\n-     the value set by the statement we want to insert on E.   That\n+     the value set by the statement we want to insert on E.  That\n      hardly seems worth the effort.  */\n   if (EDGE_COUNT (dest->preds) == 1\n       && ! phi_nodes (dest)\n@@ -4297,12 +4297,12 @@ tree_redirect_edge_and_branch (edge e, basic_block dest)\n \n \t   There is precisely one CASE_LABEL_EXPR in the switch vector\n \t   which needs updating.  Either its label needs to be updated\n-\t   or it needs to be directed to a new case leader.   */\n+\t   or it needs to be directed to a new case leader.  */\n \te2 = find_edge (e->src, dest);\n \tif (e2)\n \t  {\n \t    /* In this case we need to change the case leader for the\n-\t       current leader of E to be the case leader for E2.   */\n+\t       current leader of E to be the case leader for E2.  */\n \t    tree e_leader = get_case_leader_for_edge (e);\n \t    tree e2_leader = get_case_leader_for_edge (e2);\n \t    CASE_LEADER_OR_LABEL (e_leader) = e2_leader;"}]}