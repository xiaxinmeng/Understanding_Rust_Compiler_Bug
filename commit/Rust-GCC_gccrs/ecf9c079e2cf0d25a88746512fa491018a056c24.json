{"sha": "ecf9c079e2cf0d25a88746512fa491018a056c24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNmOWMwNzllMmNmMGQyNWE4ODc0NjUxMmZhNDkxMDE4YTA1NmMyNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-04-10T06:27:12Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-04-10T06:27:12Z"}, "message": "combine.c (combine_simplify_rtx): Remove a transformation that relies on an invalid assumption about rtl...\n\n\t* combine.c (combine_simplify_rtx): Remove a transformation that\n\trelies on an invalid assumption about rtl sign-extension semantics.\n\nFrom-SVN: r97941", "tree": {"sha": "a9a24b1030863f3808ef6e7469755b503a3c1c5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9a24b1030863f3808ef6e7469755b503a3c1c5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecf9c079e2cf0d25a88746512fa491018a056c24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecf9c079e2cf0d25a88746512fa491018a056c24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecf9c079e2cf0d25a88746512fa491018a056c24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecf9c079e2cf0d25a88746512fa491018a056c24/comments", "author": null, "committer": null, "parents": [{"sha": "f1ac52cd09a623f1f6f9894b10b0cf5337d8491b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ac52cd09a623f1f6f9894b10b0cf5337d8491b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1ac52cd09a623f1f6f9894b10b0cf5337d8491b"}], "stats": {"total": 63, "additions": 22, "deletions": 41}, "files": [{"sha": "bd836f3cd15264fda19bfeb917b66a94f56a1f7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecf9c079e2cf0d25a88746512fa491018a056c24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecf9c079e2cf0d25a88746512fa491018a056c24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ecf9c079e2cf0d25a88746512fa491018a056c24", "patch": "@@ -1,3 +1,8 @@\n+2005-04-10  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* combine.c (combine_simplify_rtx): Remove a transformation that\n+\trelies on an invalid assumption about rtl sign-extension semantics.\n+\n 2005-04-10  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* value-prof.c (tree_divmod_fixed_value_transform): Fix arguments"}, {"sha": "89866e0fa3d7d1c0eb3f5baa21e61948fb8eb8cb", "filename": "gcc/combine.c", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecf9c079e2cf0d25a88746512fa491018a056c24/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecf9c079e2cf0d25a88746512fa491018a056c24/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=ecf9c079e2cf0d25a88746512fa491018a056c24", "patch": "@@ -3768,47 +3768,6 @@ combine_simplify_rtx (rtx x, enum machine_mode op0_mode, int in_dest)\n       SUBST (XEXP (x, 1), temp);\n     }\n \n-  /* If this is a PLUS, MINUS, or MULT, and the first operand is the\n-     sign extension of a PLUS with a constant, reverse the order of the sign\n-     extension and the addition. Note that this not the same as the original\n-     code, but overflow is undefined for signed values.  Also note that the\n-     PLUS will have been partially moved \"inside\" the sign-extension, so that\n-     the first operand of X will really look like:\n-         (ashiftrt (plus (ashift A C4) C5) C4).\n-     We convert this to\n-         (plus (ashiftrt (ashift A C4) C2) C4)\n-     and replace the first operand of X with that expression.  Later parts\n-     of this function may simplify the expression further.\n-\n-     For example, if we start with (mult (sign_extend (plus A C1)) C2),\n-     we swap the SIGN_EXTEND and PLUS.  Later code will apply the\n-     distributive law to produce (plus (mult (sign_extend X) C1) C3).\n-\n-     We do this to simplify address expressions.  */\n-\n-  if ((code == PLUS || code == MINUS || code == MULT)\n-      && GET_CODE (XEXP (x, 0)) == ASHIFTRT\n-      && GET_CODE (XEXP (XEXP (x, 0), 0)) == PLUS\n-      && GET_CODE (XEXP (XEXP (XEXP (x, 0), 0), 0)) == ASHIFT\n-      && GET_CODE (XEXP (XEXP (XEXP (XEXP (x, 0), 0), 0), 1)) == CONST_INT\n-      && GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT\n-      && XEXP (XEXP (XEXP (XEXP (x, 0), 0), 0), 1) == XEXP (XEXP (x, 0), 1)\n-      && GET_CODE (XEXP (XEXP (XEXP (x, 0), 0), 1)) == CONST_INT\n-      && (temp = simplify_binary_operation (ASHIFTRT, mode,\n-\t\t\t\t\t    XEXP (XEXP (XEXP (x, 0), 0), 1),\n-\t\t\t\t\t    XEXP (XEXP (x, 0), 1))) != 0)\n-    {\n-      rtx new\n-\t= simplify_shift_const (NULL_RTX, ASHIFT, mode,\n-\t\t\t\tXEXP (XEXP (XEXP (XEXP (x, 0), 0), 0), 0),\n-\t\t\t\tINTVAL (XEXP (XEXP (x, 0), 1)));\n-\n-      new = simplify_shift_const (NULL_RTX, ASHIFTRT, mode, new,\n-\t\t\t\t  INTVAL (XEXP (XEXP (x, 0), 1)));\n-\n-      SUBST (XEXP (x, 0), simplify_gen_binary (PLUS, mode, new, temp));\n-    }\n-\n   /* If this is a simple operation applied to an IF_THEN_ELSE, try\n      applying it to the arms of the IF_THEN_ELSE.  This often simplifies\n      things.  Check for cases where both arms are testing the same"}, {"sha": "59255c0a50c23ee06194f5d4756e4e7e913c5b92", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecf9c079e2cf0d25a88746512fa491018a056c24/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecf9c079e2cf0d25a88746512fa491018a056c24/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ecf9c079e2cf0d25a88746512fa491018a056c24", "patch": "@@ -1,3 +1,7 @@\n+2005-04-10  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* gcc.c-torture/execute/20050410-1.c: New test.\n+\n 2005-04-09  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* gcc.dg/pr20126.c: New."}, {"sha": "c4cd85279a97b24b958ba92314007c62345e105f", "filename": "gcc/testsuite/gcc.c-torture/execute/20050410-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecf9c079e2cf0d25a88746512fa491018a056c24/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050410-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecf9c079e2cf0d25a88746512fa491018a056c24/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050410-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050410-1.c?ref=ecf9c079e2cf0d25a88746512fa491018a056c24", "patch": "@@ -0,0 +1,13 @@\n+int s = 200;\n+int __attribute__((noinline))\n+foo (void)\n+{\n+  return (signed char) (s - 100) - 5;\n+}\n+int\n+main (void)\n+{\n+  if (foo () != 95)\n+    abort ();\n+  exit (0);\n+}"}]}