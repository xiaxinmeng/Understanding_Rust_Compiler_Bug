{"sha": "ba75fe35b53d7531464cf73a4ed52257fe176a1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE3NWZlMzViNTNkNzUzMTQ2NGNmNzNhNGVkNTIyNTdmZTE3NmExZQ==", "commit": {"author": {"name": "Michael Karcher", "email": "debian@mkarcher.dialup.fu-berlin.de", "date": "2021-08-07T17:50:53Z"}, "committer": {"name": "Michael Karcher", "email": "debian@mkarcher.dialup.fu-berlin.de", "date": "2021-08-07T18:27:41Z"}, "message": "rust to gcc glue layer: Remove excess precision when done\n\nSigned-off-by: Michael Karcher <debian@mkarcher.dialup.fu-berlin.de>", "tree": {"sha": "9b14894b6e1d258c17f0ad8f95e6276ef0970111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b14894b6e1d258c17f0ad8f95e6276ef0970111"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba75fe35b53d7531464cf73a4ed52257fe176a1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba75fe35b53d7531464cf73a4ed52257fe176a1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba75fe35b53d7531464cf73a4ed52257fe176a1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba75fe35b53d7531464cf73a4ed52257fe176a1e/comments", "author": {"login": "karcherm", "id": 2553687, "node_id": "MDQ6VXNlcjI1NTM2ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/2553687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karcherm", "html_url": "https://github.com/karcherm", "followers_url": "https://api.github.com/users/karcherm/followers", "following_url": "https://api.github.com/users/karcherm/following{/other_user}", "gists_url": "https://api.github.com/users/karcherm/gists{/gist_id}", "starred_url": "https://api.github.com/users/karcherm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karcherm/subscriptions", "organizations_url": "https://api.github.com/users/karcherm/orgs", "repos_url": "https://api.github.com/users/karcherm/repos", "events_url": "https://api.github.com/users/karcherm/events{/privacy}", "received_events_url": "https://api.github.com/users/karcherm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "karcherm", "id": 2553687, "node_id": "MDQ6VXNlcjI1NTM2ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/2553687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karcherm", "html_url": "https://github.com/karcherm", "followers_url": "https://api.github.com/users/karcherm/followers", "following_url": "https://api.github.com/users/karcherm/following{/other_user}", "gists_url": "https://api.github.com/users/karcherm/gists{/gist_id}", "starred_url": "https://api.github.com/users/karcherm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karcherm/subscriptions", "organizations_url": "https://api.github.com/users/karcherm/orgs", "repos_url": "https://api.github.com/users/karcherm/repos", "events_url": "https://api.github.com/users/karcherm/events{/privacy}", "received_events_url": "https://api.github.com/users/karcherm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41e3fb5d2018690243a38c79a60fcc32eb73b013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e3fb5d2018690243a38c79a60fcc32eb73b013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41e3fb5d2018690243a38c79a60fcc32eb73b013"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "7cb1d52cbefa816870046ec574960e4d046307d9", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba75fe35b53d7531464cf73a4ed52257fe176a1e/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba75fe35b53d7531464cf73a4ed52257fe176a1e/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=ba75fe35b53d7531464cf73a4ed52257fe176a1e", "patch": "@@ -1940,14 +1940,16 @@ Gcc_backend::negation_expression (NegationOperator op, Bexpression *expr,\n   /* For negation operators, the resulting type should be the same as its\n      operand. */\n   auto tree_type = TREE_TYPE (expr_tree);\n+  auto original_type = tree_type;\n   auto tree_code = operator_to_tree_code (op);\n \n   /* For floating point operations we may need to extend the precision of type.\n      For example, a 64-bit machine may not support operations on float32. */\n   bool floating_point = is_floating_point (expr_tree);\n+  auto extended_type = NULL_TREE;\n   if (floating_point)\n     {\n-      auto extended_type = excess_precision_type (tree_type);\n+      extended_type = excess_precision_type (tree_type);\n       if (extended_type != NULL_TREE)\n \t{\n \t  expr_tree = convert (extended_type, expr_tree);\n@@ -1958,6 +1960,8 @@ Gcc_backend::negation_expression (NegationOperator op, Bexpression *expr,\n   /* Construct a new tree and build an expression from it. */\n   auto new_tree = fold_build1_loc (location.gcc_location (), tree_code,\n \t\t\t\t   tree_type, expr_tree);\n+  if (floating_point && extended_type != NULL_TREE)\n+    new_tree = convert (original_type, expr_tree);\n   return this->make_expression (new_tree);\n }\n \n@@ -1982,13 +1986,15 @@ Gcc_backend::arithmetic_or_logical_expression (ArithmeticOrLogicalOperator op,\n   /* For arithmetic or logical operators, the resulting type should be the same\n      as the lhs operand. */\n   auto tree_type = TREE_TYPE (left_tree);\n+  auto original_type = tree_type;\n   auto tree_code = operator_to_tree_code (op, floating_point);\n \n   /* For floating point operations we may need to extend the precision of type.\n      For example, a 64-bit machine may not support operations on float32. */\n+  auto extended_type = NULL_TREE;\n   if (floating_point)\n     {\n-      auto extended_type = excess_precision_type (tree_type);\n+      extended_type = excess_precision_type (tree_type);\n       if (extended_type != NULL_TREE)\n \t{\n \t  left_tree = convert (extended_type, left_tree);\n@@ -2000,6 +2006,8 @@ Gcc_backend::arithmetic_or_logical_expression (ArithmeticOrLogicalOperator op,\n   /* Construct a new tree and build an expression from it. */\n   auto new_tree = fold_build2_loc (location.gcc_location (), tree_code,\n \t\t\t\t   tree_type, left_tree, right_tree);\n+  if (floating_point && extended_type != NULL_TREE)\n+    new_tree = convert (original_type, new_tree);\n   return this->make_expression (new_tree);\n }\n "}]}