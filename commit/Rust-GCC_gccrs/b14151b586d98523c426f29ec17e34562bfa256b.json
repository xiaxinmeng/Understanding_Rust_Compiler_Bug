{"sha": "b14151b586d98523c426f29ec17e34562bfa256b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE0MTUxYjU4NmQ5ODUyM2M0MjZmMjllYzE3ZTM0NTYyYmZhMjU2Yg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-06-24T23:30:28Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-06-24T23:30:28Z"}, "message": "ira-int.h (struct live_range, [...]): Renamed from struct ira_allocno_live_range and allocno_live_range_t...\n\n\t* ira-int.h (struct live_range, live_range_t): Renamed from struct\n\tira_allocno_live_range and allocno_live_range_t; all uses changed.\n\t* ira-build.c (live_range_pool): Renamed from allocno_live_range_pool.\n\tAll uses changed.\n\nFrom-SVN: r161350", "tree": {"sha": "06f56773d3beb8f2f1d91323ee9fc873de49767c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06f56773d3beb8f2f1d91323ee9fc873de49767c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b14151b586d98523c426f29ec17e34562bfa256b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b14151b586d98523c426f29ec17e34562bfa256b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b14151b586d98523c426f29ec17e34562bfa256b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b14151b586d98523c426f29ec17e34562bfa256b/comments", "author": null, "committer": null, "parents": [{"sha": "42ce1cc4e1bf88c755842a40c6cfcd54f6582e0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42ce1cc4e1bf88c755842a40c6cfcd54f6582e0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42ce1cc4e1bf88c755842a40c6cfcd54f6582e0b"}], "stats": {"total": 147, "additions": 73, "deletions": 74}, "files": [{"sha": "22f1ca82764f8988fdf56f370f498deb23d6b355", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b14151b586d98523c426f29ec17e34562bfa256b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b14151b586d98523c426f29ec17e34562bfa256b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b14151b586d98523c426f29ec17e34562bfa256b", "patch": "@@ -45,6 +45,11 @@\n \tira_allocno_set_iter_Next and FOR_EACH_ALLOCNO_IN_ALLOCNO_SET.  All\n \tuses changed.\n \n+\t* ira-int.h (struct live_range, live_range_t): Renamed from struct\n+\tira_allocno_live_range and allocno_live_range_t; all uses changed.\n+\t* ira-build.c (live_range_pool): Renamed from allocno_live_range_pool.\n+\tAll uses changed.\n+\n 2010-06-24  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* thumb2.md (thumb2_tlobits_cbranch): Delete."}, {"sha": "6936cec30480cf9d8dccc85586efd2f49794d291", "filename": "gcc/ira-build.c", "status": "modified", "additions": 32, "deletions": 34, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b14151b586d98523c426f29ec17e34562bfa256b/gcc%2Fira-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b14151b586d98523c426f29ec17e34562bfa256b/gcc%2Fira-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-build.c?ref=b14151b586d98523c426f29ec17e34562bfa256b", "patch": "@@ -383,8 +383,8 @@ rebuild_regno_allocno_maps (void)\n \n \f\n \n-/* Pools for allocnos and allocno live ranges.  */\n-static alloc_pool allocno_pool, allocno_live_range_pool;\n+/* Pools for allocnos and live ranges.  */\n+static alloc_pool allocno_pool, live_range_pool;\n \n /* Vec containing references to all created allocnos.  It is a\n    container of array allocnos.  */\n@@ -398,9 +398,9 @@ static VEC(ira_allocno_t,heap) *ira_conflict_id_allocno_map_vec;\n static void\n initiate_allocnos (void)\n {\n-  allocno_live_range_pool\n-    = create_alloc_pool (\"allocno live ranges\",\n-\t\t\t sizeof (struct ira_allocno_live_range), 100);\n+  live_range_pool\n+    = create_alloc_pool (\"live ranges\",\n+\t\t\t sizeof (struct live_range), 100);\n   allocno_pool\n     = create_alloc_pool (\"allocnos\", sizeof (struct ira_allocno), 100);\n   allocno_vec = VEC_alloc (ira_allocno_t, heap, max_reg_num () * 2);\n@@ -812,13 +812,13 @@ create_cap_allocno (ira_allocno_t a)\n }\n \n /* Create and return allocno live range with given attributes.  */\n-allocno_live_range_t\n+live_range_t\n ira_create_allocno_live_range (ira_allocno_t a, int start, int finish,\n-\t\t\t       allocno_live_range_t next)\n+\t\t\t       live_range_t next)\n {\n-  allocno_live_range_t p;\n+  live_range_t p;\n \n-  p = (allocno_live_range_t) pool_alloc (allocno_live_range_pool);\n+  p = (live_range_t) pool_alloc (live_range_pool);\n   p->allocno = a;\n   p->start = start;\n   p->finish = finish;\n@@ -827,22 +827,22 @@ ira_create_allocno_live_range (ira_allocno_t a, int start, int finish,\n }\n \n /* Copy allocno live range R and return the result.  */\n-static allocno_live_range_t\n-copy_allocno_live_range (allocno_live_range_t r)\n+static live_range_t\n+copy_allocno_live_range (live_range_t r)\n {\n-  allocno_live_range_t p;\n+  live_range_t p;\n \n-  p = (allocno_live_range_t) pool_alloc (allocno_live_range_pool);\n+  p = (live_range_t) pool_alloc (live_range_pool);\n   *p = *r;\n   return p;\n }\n \n /* Copy allocno live range list given by its head R and return the\n    result.  */\n-allocno_live_range_t\n-ira_copy_allocno_live_range_list (allocno_live_range_t r)\n+live_range_t\n+ira_copy_allocno_live_range_list (live_range_t r)\n {\n-  allocno_live_range_t p, first, last;\n+  live_range_t p, first, last;\n \n   if (r == NULL)\n     return NULL;\n@@ -861,11 +861,10 @@ ira_copy_allocno_live_range_list (allocno_live_range_t r)\n /* Merge ranges R1 and R2 and returns the result.  The function\n    maintains the order of ranges and tries to minimize number of the\n    result ranges.  */\n-allocno_live_range_t\n-ira_merge_allocno_live_ranges (allocno_live_range_t r1,\n-\t\t\t       allocno_live_range_t r2)\n+live_range_t\n+ira_merge_allocno_live_ranges (live_range_t r1, live_range_t r2)\n {\n-  allocno_live_range_t first, last, temp;\n+  live_range_t first, last, temp;\n \n   if (r1 == NULL)\n     return r2;\n@@ -939,8 +938,7 @@ ira_merge_allocno_live_ranges (allocno_live_range_t r1,\n \n /* Return TRUE if live ranges R1 and R2 intersect.  */\n bool\n-ira_allocno_live_ranges_intersect_p (allocno_live_range_t r1,\n-\t\t\t\t     allocno_live_range_t r2)\n+ira_allocno_live_ranges_intersect_p (live_range_t r1, live_range_t r2)\n {\n   /* Remember the live ranges are always kept ordered.  */\n   while (r1 != NULL && r2 != NULL)\n@@ -957,16 +955,16 @@ ira_allocno_live_ranges_intersect_p (allocno_live_range_t r1,\n \n /* Free allocno live range R.  */\n void\n-ira_finish_allocno_live_range (allocno_live_range_t r)\n+ira_finish_allocno_live_range (live_range_t r)\n {\n-  pool_free (allocno_live_range_pool, r);\n+  pool_free (live_range_pool, r);\n }\n \n /* Free list of allocno live ranges starting with R.  */\n void\n-ira_finish_allocno_live_range_list (allocno_live_range_t r)\n+ira_finish_allocno_live_range_list (live_range_t r)\n {\n-  allocno_live_range_t next_r;\n+  live_range_t next_r;\n \n   for (; r != NULL; r = next_r)\n     {\n@@ -1027,7 +1025,7 @@ finish_allocnos (void)\n   VEC_free (ira_allocno_t, heap, ira_conflict_id_allocno_map_vec);\n   VEC_free (ira_allocno_t, heap, allocno_vec);\n   free_alloc_pool (allocno_pool);\n-  free_alloc_pool (allocno_live_range_pool);\n+  free_alloc_pool (live_range_pool);\n }\n \n \f\n@@ -1658,7 +1656,7 @@ create_allocnos (void)\n \n /* The function changes allocno in range list given by R onto A.  */\n static void\n-change_allocno_in_range_list (allocno_live_range_t r, ira_allocno_t a)\n+change_allocno_in_range_list (live_range_t r, ira_allocno_t a)\n {\n   for (; r != NULL; r = r->next)\n     r->allocno = a;\n@@ -1668,7 +1666,7 @@ change_allocno_in_range_list (allocno_live_range_t r, ira_allocno_t a)\n static void\n move_allocno_live_ranges (ira_allocno_t from, ira_allocno_t to)\n {\n-  allocno_live_range_t lr = ALLOCNO_LIVE_RANGES (from);\n+  live_range_t lr = ALLOCNO_LIVE_RANGES (from);\n \n   if (internal_flag_ira_verbose > 4 && ira_dump_file != NULL)\n     {\n@@ -1688,7 +1686,7 @@ move_allocno_live_ranges (ira_allocno_t from, ira_allocno_t to)\n static void\n copy_allocno_live_ranges (ira_allocno_t from, ira_allocno_t to)\n {\n-  allocno_live_range_t lr = ALLOCNO_LIVE_RANGES (from);\n+  live_range_t lr = ALLOCNO_LIVE_RANGES (from);\n \n   if (internal_flag_ira_verbose > 4 && ira_dump_file != NULL)\n     {\n@@ -2148,7 +2146,7 @@ update_bad_spill_attribute (void)\n   int i;\n   ira_allocno_t a;\n   ira_allocno_iterator ai;\n-  allocno_live_range_t r;\n+  live_range_t r;\n   enum reg_class cover_class;\n   bitmap_head dead_points[N_REG_CLASSES];\n \n@@ -2199,7 +2197,7 @@ setup_min_max_allocno_live_range_point (void)\n   int i;\n   ira_allocno_t a, parent_a, cap;\n   ira_allocno_iterator ai;\n-  allocno_live_range_t r;\n+  live_range_t r;\n   ira_loop_tree_node_t parent;\n \n   FOR_EACH_ALLOCNO (a, ai)\n@@ -2507,7 +2505,7 @@ ira_flattening (int max_regno_before_emit, int ira_max_point_before_emit)\n   ira_allocno_t a, parent_a, first, second, node_first, node_second;\n   ira_copy_t cp;\n   ira_loop_tree_node_t node;\n-  allocno_live_range_t r;\n+  live_range_t r;\n   ira_allocno_iterator ai;\n   ira_copy_iterator ci;\n   sparseset allocnos_live;\n@@ -2875,7 +2873,7 @@ ira_build (bool loops_p)\n     {\n       int n, nr;\n       ira_allocno_t a;\n-      allocno_live_range_t r;\n+      live_range_t r;\n       ira_allocno_iterator ai;\n \n       n = 0;"}, {"sha": "4a841d787d93def2e5449ea62b69898da9cbe73f", "filename": "gcc/ira-color.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b14151b586d98523c426f29ec17e34562bfa256b/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b14151b586d98523c426f29ec17e34562bfa256b/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=b14151b586d98523c426f29ec17e34562bfa256b", "patch": "@@ -2493,7 +2493,7 @@ collect_spilled_coalesced_allocnos (int *pseudo_regnos, int n,\n /* Array of live ranges of size IRA_ALLOCNOS_NUM.  Live range for\n    given slot contains live ranges of coalesced allocnos assigned to\n    given slot.  */\n-static allocno_live_range_t *slot_coalesced_allocnos_live_ranges;\n+static live_range_t *slot_coalesced_allocnos_live_ranges;\n \n /* Return TRUE if coalesced allocnos represented by ALLOCNO has live\n    ranges intersected with live ranges of coalesced allocnos assigned\n@@ -2522,7 +2522,7 @@ setup_slot_coalesced_allocno_live_ranges (ira_allocno_t allocno)\n {\n   int n;\n   ira_allocno_t a;\n-  allocno_live_range_t r;\n+  live_range_t r;\n \n   n = ALLOCNO_TEMP (allocno);\n   for (a = ALLOCNO_NEXT_COALESCED_ALLOCNO (allocno);;\n@@ -2551,10 +2551,9 @@ coalesce_spill_slots (ira_allocno_t *spilled_coalesced_allocnos, int num)\n   bitmap set_jump_crosses = regstat_get_setjmp_crosses ();\n \n   slot_coalesced_allocnos_live_ranges\n-    = (allocno_live_range_t *) ira_allocate (sizeof (allocno_live_range_t)\n-\t\t\t\t\t     * ira_allocnos_num);\n+    = (live_range_t *) ira_allocate (sizeof (live_range_t) * ira_allocnos_num);\n   memset (slot_coalesced_allocnos_live_ranges, 0,\n-\t  sizeof (allocno_live_range_t) * ira_allocnos_num);\n+\t  sizeof (live_range_t) * ira_allocnos_num);\n   last_coalesced_allocno_num = 0;\n   /* Coalesce non-conflicting spilled allocnos preferring most\n      frequently used.  */\n@@ -3244,7 +3243,7 @@ fast_allocation (void)\n   enum machine_mode mode;\n   ira_allocno_t a;\n   ira_allocno_iterator ai;\n-  allocno_live_range_t r;\n+  live_range_t r;\n   HARD_REG_SET conflict_hard_regs, *used_hard_regs;\n \n   sorted_allocnos = (ira_allocno_t *) ira_allocate (sizeof (ira_allocno_t)"}, {"sha": "9e9927a90594db14db1b9ea4a143eadaca5a59ed", "filename": "gcc/ira-conflicts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b14151b586d98523c426f29ec17e34562bfa256b/gcc%2Fira-conflicts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b14151b586d98523c426f29ec17e34562bfa256b/gcc%2Fira-conflicts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-conflicts.c?ref=b14151b586d98523c426f29ec17e34562bfa256b", "patch": "@@ -71,7 +71,7 @@ build_conflict_bit_table (void)\n   unsigned int j;\n   enum reg_class cover_class;\n   ira_allocno_t allocno, live_a;\n-  allocno_live_range_t r;\n+  live_range_t r;\n   ira_allocno_iterator ai;\n   sparseset allocnos_live;\n   int allocno_set_words;"}, {"sha": "705a306654ce867de419c12599e47778b8823ca4", "filename": "gcc/ira-emit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b14151b586d98523c426f29ec17e34562bfa256b/gcc%2Fira-emit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b14151b586d98523c426f29ec17e34562bfa256b/gcc%2Fira-emit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-emit.c?ref=b14151b586d98523c426f29ec17e34562bfa256b", "patch": "@@ -913,7 +913,7 @@ add_range_and_copies_from_move_list (move_t list, ira_loop_tree_node_t node,\n   move_t move;\n   ira_allocno_t to, from, a;\n   ira_copy_t cp;\n-  allocno_live_range_t r;\n+  live_range_t r;\n   bitmap_iterator bi;\n   HARD_REG_SET hard_regs_live;\n "}, {"sha": "fd5ffb8cae4702b732a8cddcb3ae2ff9dcada661", "filename": "gcc/ira-int.h", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b14151b586d98523c426f29ec17e34562bfa256b/gcc%2Fira-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b14151b586d98523c426f29ec17e34562bfa256b/gcc%2Fira-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-int.h?ref=b14151b586d98523c426f29ec17e34562bfa256b", "patch": "@@ -59,7 +59,7 @@ extern FILE *ira_dump_file;\n \n /* Typedefs for pointers to allocno live range, allocno, and copy of\n    allocnos.  */\n-typedef struct ira_allocno_live_range *allocno_live_range_t;\n+typedef struct live_range *live_range_t;\n typedef struct ira_allocno *ira_allocno_t;\n typedef struct ira_allocno_copy *ira_copy_t;\n \n@@ -196,17 +196,17 @@ extern ira_loop_tree_node_t ira_loop_nodes;\n    conflicts for other allocnos (e.g. to assign stack memory slot) we\n    use the live ranges.  If the live ranges of two allocnos are\n    intersected, the allocnos are in conflict.  */\n-struct ira_allocno_live_range\n+struct live_range\n {\n   /* Allocno whose live range is described by given structure.  */\n   ira_allocno_t allocno;\n   /* Program point range.  */\n   int start, finish;\n   /* Next structure describing program points where the allocno\n      lives.  */\n-  allocno_live_range_t next;\n+  live_range_t next;\n   /* Pointer to structures with the same start/finish.  */\n-  allocno_live_range_t start_next, finish_next;\n+  live_range_t start_next, finish_next;\n };\n \n /* Program points are enumerated by numbers from range\n@@ -220,7 +220,7 @@ extern int ira_max_point;\n \n /* Arrays of size IRA_MAX_POINT mapping a program point to the allocno\n    live ranges with given start/finish point.  */\n-extern allocno_live_range_t *ira_start_point_ranges, *ira_finish_point_ranges;\n+extern live_range_t *ira_start_point_ranges, *ira_finish_point_ranges;\n \n /* A structure representing an allocno (allocation entity).  Allocno\n    represents a pseudo-register in an allocation region.  If\n@@ -305,7 +305,7 @@ struct ira_allocno\n      allocno lives.  We always maintain the list in such way that *the\n      ranges in the list are not intersected and ordered by decreasing\n      their program points*.  */\n-  allocno_live_range_t live_ranges;\n+  live_range_t live_ranges;\n   /* Before building conflicts the two member values are\n      correspondingly minimal and maximal points of the accumulated\n      allocno live ranges.  After building conflicts the values are\n@@ -852,16 +852,13 @@ extern void ira_allocate_allocno_conflict_vec (ira_allocno_t, int);\n extern void ira_allocate_allocno_conflicts (ira_allocno_t, int);\n extern void ira_add_allocno_conflict (ira_allocno_t, ira_allocno_t);\n extern void ira_print_expanded_allocno (ira_allocno_t);\n-extern allocno_live_range_t ira_create_allocno_live_range\n-\t                    (ira_allocno_t, int, int, allocno_live_range_t);\n-extern allocno_live_range_t ira_copy_allocno_live_range_list\n-                            (allocno_live_range_t);\n-extern allocno_live_range_t ira_merge_allocno_live_ranges\n-                            (allocno_live_range_t, allocno_live_range_t);\n-extern bool ira_allocno_live_ranges_intersect_p (allocno_live_range_t,\n-\t\t\t\t\t\t allocno_live_range_t);\n-extern void ira_finish_allocno_live_range (allocno_live_range_t);\n-extern void ira_finish_allocno_live_range_list (allocno_live_range_t);\n+extern live_range_t ira_create_allocno_live_range (ira_allocno_t, int, int,\n+\t\t\t\t\t\t   live_range_t);\n+extern live_range_t ira_copy_allocno_live_range_list (live_range_t);\n+extern live_range_t ira_merge_allocno_live_ranges (live_range_t, live_range_t);\n+extern bool ira_allocno_live_ranges_intersect_p (live_range_t, live_range_t);\n+extern void ira_finish_allocno_live_range (live_range_t);\n+extern void ira_finish_allocno_live_range_list (live_range_t);\n extern void ira_free_allocno_updated_costs (ira_allocno_t);\n extern ira_copy_t ira_create_copy (ira_allocno_t, ira_allocno_t,\n \t\t\t\t   int, bool, rtx, ira_loop_tree_node_t);\n@@ -888,8 +885,8 @@ extern void ira_tune_allocno_costs_and_cover_classes (void);\n /* ira-lives.c */\n \n extern void ira_rebuild_start_finish_chains (void);\n-extern void ira_print_live_range_list (FILE *, allocno_live_range_t);\n-extern void ira_debug_live_range_list (allocno_live_range_t);\n+extern void ira_print_live_range_list (FILE *, live_range_t);\n+extern void ira_debug_live_range_list (live_range_t);\n extern void ira_debug_allocno_live_ranges (ira_allocno_t);\n extern void ira_debug_live_ranges (void);\n extern void ira_create_allocno_live_ranges (void);"}, {"sha": "f879068aa5e9ce0b4d6b6eddb6d66c862b3d8fdf", "filename": "gcc/ira-lives.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b14151b586d98523c426f29ec17e34562bfa256b/gcc%2Fira-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b14151b586d98523c426f29ec17e34562bfa256b/gcc%2Fira-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-lives.c?ref=b14151b586d98523c426f29ec17e34562bfa256b", "patch": "@@ -54,7 +54,7 @@ int ira_max_point;\n \n /* Arrays of size IRA_MAX_POINT mapping a program point to the allocno\n    live ranges with given start/finish point.  */\n-allocno_live_range_t *ira_start_point_ranges, *ira_finish_point_ranges;\n+live_range_t *ira_start_point_ranges, *ira_finish_point_ranges;\n \n /* Number of the current program point.  */\n static int curr_point;\n@@ -112,7 +112,7 @@ make_hard_regno_dead (int regno)\n static void\n make_allocno_born (ira_allocno_t a)\n {\n-  allocno_live_range_t p = ALLOCNO_LIVE_RANGES (a);\n+  live_range_t p = ALLOCNO_LIVE_RANGES (a);\n \n   sparseset_set_bit (allocnos_live, ALLOCNO_NUM (a));\n   IOR_HARD_REG_SET (ALLOCNO_CONFLICT_HARD_REGS (a), hard_regs_live);\n@@ -131,7 +131,7 @@ update_allocno_pressure_excess_length (ira_allocno_t a)\n {\n   int start, i;\n   enum reg_class cover_class, cl;\n-  allocno_live_range_t p;\n+  live_range_t p;\n \n   cover_class = ALLOCNO_COVER_CLASS (a);\n   for (i = 0;\n@@ -153,7 +153,7 @@ update_allocno_pressure_excess_length (ira_allocno_t a)\n static void\n make_allocno_dead (ira_allocno_t a)\n {\n-  allocno_live_range_t p;\n+  live_range_t p;\n \n   p = ALLOCNO_LIVE_RANGES (a);\n   ira_assert (p != NULL);\n@@ -1140,18 +1140,18 @@ create_start_finish_chains (void)\n {\n   ira_allocno_t a;\n   ira_allocno_iterator ai;\n-  allocno_live_range_t r;\n+  live_range_t r;\n \n   ira_start_point_ranges\n-    = (allocno_live_range_t *) ira_allocate (ira_max_point\n-\t\t\t\t\t     * sizeof (allocno_live_range_t));\n+    = (live_range_t *) ira_allocate (ira_max_point\n+\t\t\t\t\t     * sizeof (live_range_t));\n   memset (ira_start_point_ranges, 0,\n-\t  ira_max_point * sizeof (allocno_live_range_t));\n+\t  ira_max_point * sizeof (live_range_t));\n   ira_finish_point_ranges\n-    = (allocno_live_range_t *) ira_allocate (ira_max_point\n-\t\t\t\t\t     * sizeof (allocno_live_range_t));\n+    = (live_range_t *) ira_allocate (ira_max_point\n+\t\t\t\t\t     * sizeof (live_range_t));\n   memset (ira_finish_point_ranges, 0,\n-\t  ira_max_point * sizeof (allocno_live_range_t));\n+\t  ira_max_point * sizeof (live_range_t));\n   FOR_EACH_ALLOCNO (a, ai)\n     {\n       for (r = ALLOCNO_LIVE_RANGES (a); r != NULL; r = r->next)\n@@ -1185,7 +1185,7 @@ remove_some_program_points_and_update_live_ranges (void)\n   int *map;\n   ira_allocno_t a;\n   ira_allocno_iterator ai;\n-  allocno_live_range_t r;\n+  live_range_t r;\n   bitmap born_or_died;\n   bitmap_iterator bi;\n \n@@ -1223,7 +1223,7 @@ remove_some_program_points_and_update_live_ranges (void)\n \n /* Print live ranges R to file F.  */\n void\n-ira_print_live_range_list (FILE *f, allocno_live_range_t r)\n+ira_print_live_range_list (FILE *f, live_range_t r)\n {\n   for (; r != NULL; r = r->next)\n     fprintf (f, \" [%d..%d]\", r->start, r->finish);\n@@ -1232,7 +1232,7 @@ ira_print_live_range_list (FILE *f, allocno_live_range_t r)\n \n /* Print live ranges R to stderr.  */\n void\n-ira_debug_live_range_list (allocno_live_range_t r)\n+ira_debug_live_range_list (live_range_t r)\n {\n   ira_print_live_range_list (stderr, r);\n }"}]}