{"sha": "0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFjMWI4ODk1Mzg1M2Y0YWUxY2QyZmQwOWQ0MGZiODVmZTBkM2RlNQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2005-12-02T11:21:28Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2005-12-02T11:21:28Z"}, "message": "decl2.c (get_priority_info): Use XNEW, not xmalloc.\n\n\n        * decl2.c (get_priority_info): Use XNEW, not xmalloc.\n        * decl.c (push_switch): Likewise.\n        * lex.c (handle_pragma_implementation): Likewise.\n        * cp-objcp-common.c (decl_shadowed_for_var_insert): Use GGC_NEW,\n        not ggc_alloc.\n        (cxx_initialize_diagnostics): Use XNEW, not xmalloc.\n        * class.c (init_class_processing): Use XNEWVEC, not xmalloc.\n        * g++spec.c (lang_specific_driver): Likewise.\n        * mangle.c (save_partially_mangled_name): Likewise.\n        * parser.c (cp_lexer_new_main): Use GGC_NEWVEC, not ggc_alloc.\n        (cp_parser_template_argument_list): Use XNEWVEC, nto xmalloc.\n        (cp_parser_sizeof_operand): Likewise.\n        * repo.c (open_repo_file, open_repo_file): Likewise.\n\nFrom-SVN: r107884", "tree": {"sha": "02a2773c1a28cc03c9c2382a37b5628b733a02d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02a2773c1a28cc03c9c2382a37b5628b733a02d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20186b381aae5e99159239091457eac4ca66a5c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20186b381aae5e99159239091457eac4ca66a5c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20186b381aae5e99159239091457eac4ca66a5c8"}], "stats": {"total": 40, "additions": 28, "deletions": 12}, "files": [{"sha": "b0ba117ae1ae6674de1a2338ba46a80aa659422b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5", "patch": "@@ -1,3 +1,19 @@\n+2005-12-02  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* decl2.c (get_priority_info): Use XNEW, not xmalloc.\n+\t* decl.c (push_switch): Likewise.\n+\t* lex.c (handle_pragma_implementation): Likewise.\n+\t* cp-objcp-common.c (decl_shadowed_for_var_insert): Use GGC_NEW,\n+\tnot ggc_alloc.\n+\t(cxx_initialize_diagnostics): Use XNEW, not xmalloc.\n+\t* class.c (init_class_processing): Use XNEWVEC, not xmalloc.\n+\t* g++spec.c (lang_specific_driver): Likewise.\n+\t* mangle.c (save_partially_mangled_name): Likewise.\n+\t* parser.c (cp_lexer_new_main): Use GGC_NEWVEC, not ggc_alloc.\n+\t(cp_parser_template_argument_list): Use XNEWVEC, nto xmalloc.\n+\t(cp_parser_sizeof_operand): Likewise.\n+\t* repo.c (open_repo_file, open_repo_file): Likewise.\n+\t\n 2005-12-01  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* parser.c (cp_parser_make_typename_type): Call make_typename_type"}, {"sha": "5c1b9e11582c240a4cc5cd0e2f9c6ec610862592", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5", "patch": "@@ -5334,7 +5334,7 @@ init_class_processing (void)\n   current_class_depth = 0;\n   current_class_stack_size = 10;\n   current_class_stack\n-    = xmalloc (current_class_stack_size * sizeof (struct class_stack_node));\n+    = XNEWVEC (struct class_stack_node, current_class_stack_size);\n   local_classes = VEC_alloc (tree, gc, 8);\n   sizeof_biggest_empty_class = size_zero_node;\n "}, {"sha": "7a4d862336c82a1b03e15cbf1c507376c3fd5184", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5", "patch": "@@ -154,7 +154,7 @@ void\n cxx_initialize_diagnostics (diagnostic_context *context)\n {\n   pretty_printer *base = context->printer;\n-  cxx_pretty_printer *pp = xmalloc (sizeof (cxx_pretty_printer));\n+  cxx_pretty_printer *pp = XNEW (cxx_pretty_printer);\n   memcpy (pp_base (pp), base, sizeof (pretty_printer));\n   pp_cxx_pretty_printer_init (pp);\n   context->printer = (pretty_printer *) pp;\n@@ -229,7 +229,7 @@ decl_shadowed_for_var_insert (tree from, tree to)\n   struct tree_map *h;\n   void **loc;\n \n-  h = ggc_alloc (sizeof (struct tree_map));\n+  h = GGC_NEW (struct tree_map);\n   h->hash = htab_hash_pointer (from);\n   h->from = from;\n   h->to = to;"}, {"sha": "71aac1a1717d5fbb04744e8c028ebf15678b696d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5", "patch": "@@ -2431,7 +2431,7 @@ static struct cp_switch *switch_stack;\n void\n push_switch (tree switch_stmt)\n {\n-  struct cp_switch *p = xmalloc (sizeof (struct cp_switch));\n+  struct cp_switch *p = XNEW (struct cp_switch);\n   p->level = current_binding_level;\n   p->next = switch_stack;\n   p->switch_stmt = switch_stmt;"}, {"sha": "8c65d946a97206c4f48769c9cb0408ebf4ca52b8", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5", "patch": "@@ -2301,7 +2301,7 @@ get_priority_info (int priority)\n     {\n       /* Create a new priority information structure, and insert it\n \t into the map.  */\n-      pi = xmalloc (sizeof (struct priority_info_s));\n+      pi = XNEW (struct priority_info_s);\n       pi->initializations_p = 0;\n       pi->destructions_p = 0;\n       splay_tree_insert (priority_info_map,"}, {"sha": "ec7cefcb3e6d34a6427b2a09fb2b81ddb4ba20a9", "filename": "gcc/cp/g++spec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5/gcc%2Fcp%2Fg%2B%2Bspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5/gcc%2Fcp%2Fg%2B%2Bspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2Bspec.c?ref=0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5", "patch": "@@ -252,7 +252,7 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n \n   /* Make sure to have room for the trailing NULL argument.  */\n   num_args = argc + added + need_math + shared_libgcc + (library > 0) + 1;\n-  arglist = xmalloc (num_args * sizeof (char *));\n+  arglist = XNEWVEC (const char *, num_args);\n \n   i = 0;\n   j = 0;"}, {"sha": "469efc83971e5a5d00ae3dd153b74eaac694d251", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5", "patch": "@@ -571,7 +571,7 @@ handle_pragma_implementation (cpp_reader* dfile ATTRIBUTE_UNUSED )\n     }\n   if (ifiles == 0)\n     {\n-      ifiles = xmalloc (sizeof (struct impl_files));\n+      ifiles = XNEW (struct impl_files);\n       ifiles->filename = filename;\n       ifiles->next = impl_file_chain;\n       impl_file_chain = ifiles;"}, {"sha": "c654d764bbd33c6126c397f78833d2ed0762300b", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5", "patch": "@@ -276,7 +276,7 @@ save_partially_mangled_name (void)\n     {\n       gcc_assert (!partially_mangled_name);\n       partially_mangled_name_len = obstack_object_size (mangle_obstack);\n-      partially_mangled_name = xmalloc (partially_mangled_name_len);\n+      partially_mangled_name = XNEWVEC (char, partially_mangled_name_len);\n       memcpy (partially_mangled_name, obstack_base (mangle_obstack),\n \t      partially_mangled_name_len);\n       obstack_free (mangle_obstack, obstack_finish (mangle_obstack));"}, {"sha": "431642255c5a557e595587da904f4853fdb0e9be", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5", "patch": "@@ -271,7 +271,7 @@ cp_lexer_new_main (void)\n \n   /* Create the buffer.  */\n   alloc = CP_LEXER_BUFFER_SIZE;\n-  buffer = ggc_alloc (alloc * sizeof (cp_token));\n+  buffer = GGC_NEWVEC (cp_token, alloc);\n \n   /* Put the first token in the buffer.  */\n   space = alloc;\n@@ -8930,7 +8930,7 @@ cp_parser_template_argument_list (cp_parser* parser)\n \n \t  if (arg_ary == fixed_args)\n \t    {\n-\t      arg_ary = xmalloc (sizeof (tree) * alloced);\n+\t      arg_ary = XNEWVEC (tree, alloced);\n \t      memcpy (arg_ary, fixed_args, sizeof (tree) * n_args);\n \t    }\n \t  else\n@@ -15770,7 +15770,7 @@ cp_parser_sizeof_operand (cp_parser* parser, enum rid keyword)\n   saved_message = parser->type_definition_forbidden_message;\n   /* And create the new one.  */\n   parser->type_definition_forbidden_message\n-    = xmalloc (strlen (format)\n+    = XNEWVEC (const char, strlen (format)\n \t       + strlen (IDENTIFIER_POINTER (ridpointers[keyword]))\n \t       + 1 /* `\\0' */);\n   sprintf ((char *) parser->type_definition_forbidden_message,"}, {"sha": "d2fae3e0a17ce847879a5a5a7e173cdcac9ea5de", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=0ac1b88953853f4ae1cd2fd09d40fb85fe0d3de5", "patch": "@@ -132,7 +132,7 @@ open_repo_file (const char *filename)\n   if (! p)\n     p = s + strlen (s);\n \n-  repo_name = xmalloc (p - s + 5);\n+  repo_name = XNEWVEC (char, p - s + 5);\n   memcpy (repo_name, s, p - s);\n   memcpy (repo_name + (p - s), \".rpo\", 5);\n "}]}