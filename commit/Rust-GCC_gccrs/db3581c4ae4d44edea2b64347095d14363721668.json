{"sha": "db3581c4ae4d44edea2b64347095d14363721668", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIzNTgxYzRhZTRkNDRlZGVhMmI2NDM0NzA5NWQxNDM2MzcyMTY2OA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-04-17T15:44:37Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-04-26T16:21:02Z"}, "message": "Cache irange::num_pairs() for non-legacy code.\n\nThis does for num_pairs() what my previous patch did for VR_UNDEFINED\nand VR_VARYING.\n\nNote that VR_ANTI_RANGE for legacy is always set to 2 ranges.  There\nis only one way of representing a range, so a range that can be\nrepresented as a VR_RANGE will never have a kind of VR_ANTI_RANGE.\nAlso legacy symbolics can also use VR_ANTI_RANGE, but no one will ever\nask for the bounds of such range, so m_num_ranges is irrelevant.\n\ngcc/ChangeLog:\n\n\t* value-range.cc (irange::legacy_num_pairs): Remove.\n\t(irange::invert): Change gcc_assert to gcc_checking_assert.\n\t* value-range.h (irange::num_pairs): Adjust for a cached\n\tnum_pairs().  Also, rename all gcc_assert's to\n\tgcc_checking_assert's.", "tree": {"sha": "76e5c19deffe47516e2e0dbfeaa4b7354001c2a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76e5c19deffe47516e2e0dbfeaa4b7354001c2a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db3581c4ae4d44edea2b64347095d14363721668", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3581c4ae4d44edea2b64347095d14363721668", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db3581c4ae4d44edea2b64347095d14363721668", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3581c4ae4d44edea2b64347095d14363721668/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc80d5e887ea4fa0e1e950db5f6bdd765c960c22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc80d5e887ea4fa0e1e950db5f6bdd765c960c22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc80d5e887ea4fa0e1e950db5f6bdd765c960c22"}], "stats": {"total": 48, "additions": 9, "deletions": 39}, "files": [{"sha": "dc76ed7d036544ce6edb7b7b42e326e1c21f490c", "filename": "gcc/value-range.cc", "status": "modified", "additions": 6, "deletions": 35, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3581c4ae4d44edea2b64347095d14363721668/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3581c4ae4d44edea2b64347095d14363721668/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=db3581c4ae4d44edea2b64347095d14363721668", "patch": "@@ -369,11 +369,9 @@ irange::verify_range ()\n {\n   if (m_kind == VR_UNDEFINED)\n     {\n-      gcc_assert (m_num_ranges == 0);\n+      gcc_checking_assert (m_num_ranges == 0);\n       return;\n     }\n-  gcc_assert (m_num_ranges != 0);\n-\n   if (m_kind == VR_VARYING)\n     {\n       gcc_checking_assert (m_num_ranges == 1);\n@@ -382,50 +380,23 @@ irange::verify_range ()\n     }\n   if (!legacy_mode_p ())\n     {\n+      gcc_checking_assert (m_num_ranges != 0);\n       gcc_checking_assert (!varying_compatible_p ());\n       for (unsigned i = 0; i < m_num_ranges; ++i)\n \t{\n \t  tree lb = tree_lower_bound (i);\n \t  tree ub = tree_upper_bound (i);\n \t  int c = compare_values (lb, ub);\n-\t  gcc_assert (c == 0 || c == -1);\n+\t  gcc_checking_assert (c == 0 || c == -1);\n \t}\n       return;\n     }\n   if (m_kind == VR_RANGE || m_kind == VR_ANTI_RANGE)\n     {\n-      gcc_assert (m_num_ranges == 1);\n+      gcc_checking_assert (m_num_ranges == 1);\n       int cmp = compare_values (tree_lower_bound (0), tree_upper_bound (0));\n-      gcc_assert (cmp == 0 || cmp == -1 || cmp == -2);\n-    }\n-}\n-\n-unsigned\n-irange::legacy_num_pairs () const\n-{\n-  gcc_checking_assert (legacy_mode_p ());\n-\n-  if (undefined_p ())\n-    return 0;\n-  if (varying_p ())\n-    return 1;\n-  // Inlined symbolic_p for performance:\n-  if (!is_gimple_min_invariant (min ()) || !is_gimple_min_invariant (max ()))\n-    {\n-      value_range numeric_range (*this);\n-      numeric_range.normalize_symbolics ();\n-      return numeric_range.num_pairs ();\n-    }\n-  if (m_kind == VR_ANTI_RANGE)\n-    {\n-      // ~[MIN, X] has one sub-range of [X+1, MAX], and\n-      // ~[X, MAX] has one sub-range of [MIN, X-1].\n-      if (vrp_val_is_min (min ()) || vrp_val_is_max (max ()))\n-\treturn 1;\n-      return 2;\n+      gcc_checking_assert (cmp == 0 || cmp == -1 || cmp == -2);\n     }\n-  gcc_checking_assert (m_num_ranges == 1);\n-  return 1;\n }\n \n // Return the lower bound for a sub-range.  PAIR is the sub-range in\n@@ -1810,7 +1781,7 @@ irange::invert ()\n       return;\n     }\n \n-  gcc_assert (!undefined_p () && !varying_p ());\n+  gcc_checking_assert (!undefined_p () && !varying_p ());\n \n   // We always need one more set of bounds to represent an inverse, so\n   // if we're at the limit, we can't properly represent things."}, {"sha": "7e36e211de2f80936c7b234760106ba0fbb9f4b1", "filename": "gcc/value-range.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3581c4ae4d44edea2b64347095d14363721668/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3581c4ae4d44edea2b64347095d14363721668/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=db3581c4ae4d44edea2b64347095d14363721668", "patch": "@@ -118,7 +118,6 @@ class irange\n   void legacy_union (irange *, const irange *);\n   void legacy_intersect (irange *, const irange *);\n   void verify_range ();\n-  unsigned legacy_num_pairs () const;\n   wide_int legacy_lower_bound (unsigned = 0) const;\n   wide_int legacy_upper_bound (unsigned) const;\n   int value_inside_range (tree) const;\n@@ -207,10 +206,10 @@ irange::kind () const\n inline unsigned\n irange::num_pairs () const\n {\n-  if (!legacy_mode_p ())\n-    return m_num_ranges;\n+  if (m_kind == VR_ANTI_RANGE)\n+    return constant_p () ? 2 : 1;\n   else\n-    return legacy_num_pairs ();\n+    return m_num_ranges;\n }\n \n inline tree"}]}