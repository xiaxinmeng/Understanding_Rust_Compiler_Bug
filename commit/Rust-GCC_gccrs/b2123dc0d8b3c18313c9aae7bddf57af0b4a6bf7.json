{"sha": "b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIxMjNkYzBkOGIzYzE4MzEzYzlhYWU3YmRkZjU3YWYwYjRhNmJmNw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-04-17T01:47:36Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-04-17T01:47:36Z"}, "message": "c-common.h (STMT_EXPR_NO_SCOPE): New macro.\n\n\t* c-common.h (STMT_EXPR_NO_SCOPE): New macro.\n\t* c-common.c (c_expand_expr): Respect STMT_EXPR_NO_SCOPE.\n\t* tree.h (expand_start_stmt_expr): Update prototype.\n\t* stmt.c (expand_start_stmt_expr): Add has_scope parameter.\n\t* tree-inline.c (expand_call_inline): Set STMT_EXPR_NO_SCOPE\n\ton the STMT_EXPR created for the inline function.\n\n\t* trans.c (tree_transform): Add has_scope argument to\n\texpand_start_stmt_expr.\n\n\t* com.c (ffecom_expr_power_integer): Add has_scope argument to\n\tcall to expand_start_stmt_expr.\n\n\t* init.c (begin_init_stmts): Remove commented out code.\n\t(finish_init_stmts): Set STMT_EXPR_NO_SCOPE.\n\t* semantics.c (begin_gobal_stmt_expr): Adjust call to\n\texpand_start_stmt_expr.\n\nFrom-SVN: r52395", "tree": {"sha": "945ba924fcaf4c9312b124d4f9724e8c510bc166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/945ba924fcaf4c9312b124d4f9724e8c510bc166"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/comments", "author": null, "committer": null, "parents": [{"sha": "f0871dfe8ff3366c0404f151a722fc5de3f614c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0871dfe8ff3366c0404f151a722fc5de3f614c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0871dfe8ff3366c0404f151a722fc5de3f614c7"}], "stats": {"total": 75, "additions": 60, "deletions": 15}, "files": [{"sha": "f846e68d530dacde2b0b12e0384390a52c2a38a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7", "patch": "@@ -90,6 +90,15 @@\n \t* config/alpha/gnu.h: New file for it.\n \t* config/gnu.h (TARGET_MEM_FUNCTIONS): #undef before #define.\n \n+2002-04-16  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* c-common.h (STMT_EXPR_NO_SCOPE): New macro.\n+\t* c-common.c (c_expand_expr): Respect STMT_EXPR_NO_SCOPE.\n+\t* tree.h (expand_start_stmt_expr): Update prototype.\n+\t* stmt.c (expand_start_stmt_expr): Add has_scope parameter.\n+\t* tree-inline.c (expand_call_inline): Set STMT_EXPR_NO_SCOPE\n+\ton the STMT_EXPR created for the inline function.\n+\t\n 2002-04-15  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/linux.h, config/arm/linux-elf.h, config/i370/linux.h,"}, {"sha": "ebea5078dd169820494d99c04e6f3765a74c7597", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7", "patch": "@@ -1,3 +1,8 @@\n+2002-04-16  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* trans.c (tree_transform): Add has_scope argument to\n+\texpand_start_stmt_expr.\n+\n 2002-04-04  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* gigi.h (truthvalue_conversion): Rename."}, {"sha": "63aafe4a62eb72dd7ed02fcc6f6015a44abbaf21", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7", "patch": "@@ -1770,7 +1770,7 @@ tree_transform (gnat_node)\n \t   we need to make sure it gets executed after the LHS.  */\n \tgnu_lhs = gnat_to_gnu (Left_Opnd (gnat_node));\n \tclear_last_expr ();\n-\tgnu_rhs_side = expand_start_stmt_expr ();\n+\tgnu_rhs_side = expand_start_stmt_expr (/*has_scope=*/1);\n \tgnu_rhs = gnat_to_gnu (Right_Opnd (gnat_node));\n \texpand_end_stmt_expr (gnu_rhs_side);\n \tgnu_result_type = get_unpadded_type (Etype (gnat_node));"}, {"sha": "1e7a0656c5532de3e1003177eb1b1270c13b1d3b", "filename": "gcc/c-common.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7", "patch": "@@ -3666,7 +3666,7 @@ c_expand_expr (exp, target, tmode, modifier)\n \t   out-of-scope after the first EXPR_STMT from within the\n \t   STMT_EXPR.  */\n \tpush_temp_slots ();\n-\trtl_expr = expand_start_stmt_expr ();\n+\trtl_expr = expand_start_stmt_expr (!STMT_EXPR_NO_SCOPE (exp));\n \n \t/* If we want the result of this expression, find the last\n            EXPR_STMT in the COMPOUND_STMT and mark it as addressable.  */\n@@ -3703,6 +3703,12 @@ c_expand_expr (exp, target, tmode, modifier)\n \t      preserve_temp_slots (result);\n \t  }\n \n+\t/* If the statment-expression does not have a scope, then the\n+\t   new temporaries we created within it must live beyond the\n+\t   statement-expression.  */\n+\tif (STMT_EXPR_NO_SCOPE (exp))\n+\t  preserve_temp_slots (NULL_RTX);\n+\n \tpop_temp_slots ();\n \treturn result;\n       }"}, {"sha": "f0b92ed48ddb5a00113675aa57280c78a0957f60", "filename": "gcc/c-common.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7", "patch": "@@ -33,6 +33,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n       DECL_PRETTY_FUNCTION_P (in VAR_DECL)\n       NEW_FOR_SCOPE_P (in FOR_STMT)\n       ASM_INPUT_P (in ASM_STMT)\n+      STMT_EXPR_NO_SCOPE (in STMT_EXPR)\n    1: C_DECLARED_LABEL_FLAG (in LABEL_DECL)\n       STMT_IS_FULL_EXPR_P (in _STMT)\n    2: STMT_LINENO_FOR_FN_P (in _STMT)\n@@ -654,6 +655,10 @@ extern tree strip_array_types                   PARAMS ((tree));\n /* STMT_EXPR accessor.  */\n #define STMT_EXPR_STMT(NODE)    TREE_OPERAND (STMT_EXPR_CHECK (NODE), 0)\n \n+/* Nonzero if this statement-expression does not have an associated scope.  */\n+#define STMT_EXPR_NO_SCOPE(NODE) \\\n+   TREE_LANG_FLAG_0 (STMT_EXPR_CHECK (NODE))\n+\n /* LABEL_STMT accessor. This gives access to the label associated with\n    the given label statement.  */\n #define LABEL_STMT_LABEL(NODE)  TREE_OPERAND (LABEL_STMT_CHECK (NODE), 0)"}, {"sha": "4f41e4f58a3409df8aa2f1e890d400ced1650faa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7", "patch": "@@ -1,3 +1,10 @@\n+2002-04-16  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* init.c (begin_init_stmts): Remove commented out code.\n+\t(finish_init_stmts): Set STMT_EXPR_NO_SCOPE.\n+\t* semantics.c (begin_gobal_stmt_expr): Adjust call to\n+\texpand_start_stmt_expr.\n+\t\n 2002-04-15  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (register_dtor_fn): Pass the address of dso_handle, not"}, {"sha": "49ecf7cc4b334a33ba9bac99ea3eb38f140b04aa", "filename": "gcc/cp/init.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7", "patch": "@@ -77,10 +77,6 @@ begin_init_stmts (stmt_expr_p, compound_stmt_p)\n   \n   if (building_stmt_tree ())\n     *compound_stmt_p = begin_compound_stmt (/*has_no_scope=*/1);\n-  /*\n-  else \n-    *compound_stmt_p = genrtl_begin_compound_stmt (has_no_scope=1);\n-  */\n }\n \n /* Finish out the statement-expression begun by the previous call to\n@@ -96,7 +92,10 @@ finish_init_stmts (stmt_expr, compound_stmt)\n     finish_compound_stmt (/*has_no_scope=*/1, compound_stmt);\n   \n   if (building_stmt_tree ())\n-    stmt_expr = finish_stmt_expr (stmt_expr);\n+    {\n+      stmt_expr = finish_stmt_expr (stmt_expr);\n+      STMT_EXPR_NO_SCOPE (stmt_expr) = true;\n+    }\n   else\n     stmt_expr = finish_global_stmt_expr (stmt_expr);\n   "}, {"sha": "0f53f6b1ece069c559c9e99cec0854d5f180ce7b", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7", "patch": "@@ -1186,7 +1186,7 @@ begin_global_stmt_expr ()\n \n   keep_next_level (1);\n   \n-  return (last_tree != NULL_TREE) ? last_tree : expand_start_stmt_expr(); \n+  return last_tree ? last_tree : expand_start_stmt_expr(/*has_scope=*/1); \n }\n \n /* Finish the STMT_EXPR last begun with begin_global_stmt_expr.  */"}, {"sha": "f8eedebab791127755eeb48baf62c8703ac82440", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7", "patch": "@@ -1,3 +1,8 @@\n+Tue Apr 16 14:55:47 2002  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* com.c (ffecom_expr_power_integer): Add has_scope argument to\n+\tcall to expand_start_stmt_expr.\n+\n Mon Apr 15 10:59:14 2002  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g77.texi: Remove Chill reference."}, {"sha": "d0257855b10fc936c15d911f485379c21622d9d1", "filename": "gcc/f/com.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7", "patch": "@@ -5603,7 +5603,7 @@ ffecom_expr_power_integer_ (ffebld expr)\n     basetypeof_l_is_int\n       = build_int_2 ((TREE_CODE (ltype) == INTEGER_TYPE), 0);\n \n-    se = expand_start_stmt_expr ();\n+    se = expand_start_stmt_expr (/*has_scope=*/1);\n \n     ffecom_start_compstmt ();\n "}, {"sha": "fe0e718faa66ba7387605db190e10b940b334c6c", "filename": "gcc/stmt.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7", "patch": "@@ -2405,20 +2405,27 @@ clear_last_expr ()\n   last_expr_type = 0;\n }\n \n-/* Begin a statement which will return a value.\n-   Return the RTL_EXPR for this statement expr.\n-   The caller must save that value and pass it to expand_end_stmt_expr.  */\n+/* Begin a statement-expression, i.e., a series of statements which\n+   may return a value.  Return the RTL_EXPR for this statement expr.\n+   The caller must save that value and pass it to\n+   expand_end_stmt_expr.  If HAS_SCOPE is nonzero, temporaries created\n+   in the statement-expression are deallocated at the end of the\n+   expression.  */\n \n tree\n-expand_start_stmt_expr ()\n+expand_start_stmt_expr (has_scope)\n+     int has_scope;\n {\n   tree t;\n \n   /* Make the RTL_EXPR node temporary, not momentary,\n      so that rtl_expr_chain doesn't become garbage.  */\n   t = make_node (RTL_EXPR);\n   do_pending_stack_adjust ();\n-  start_sequence_for_rtl_expr (t);\n+  if (has_scope)\n+    start_sequence_for_rtl_expr (t);\n+  else\n+    start_sequence ();\n   NO_DEFER_POP;\n   expr_stmts_for_value++;\n   last_expr_value = NULL_RTX;"}, {"sha": "759b55e141813c12d9efe61820fa23b708ba737b", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7", "patch": "@@ -854,6 +854,8 @@ expand_call_inline (tp, walk_subtrees, data)\n      type of the statement expression is the return type of the\n      function call.  */\n   expr = build1 (STMT_EXPR, TREE_TYPE (TREE_TYPE (fn)), NULL_TREE);\n+  /* There is no scope associated with the statement-expression.  */\n+  STMT_EXPR_NO_SCOPE (expr) = 1;\n \n   /* Local declarations will be replaced by their equivalents in this\n      map.  */"}, {"sha": "f96d127168f103d76869cd2dac958e58e42bd9b0", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b2123dc0d8b3c18313c9aae7bddf57af0b4a6bf7", "patch": "@@ -2700,7 +2700,7 @@ extern tree lhd_unsave_expr_now\t\tPARAMS ((tree));\n \n extern int in_control_zone_p\t\t\tPARAMS ((void));\n extern void expand_fixups\t\t\tPARAMS ((rtx));\n-extern tree expand_start_stmt_expr\t\tPARAMS ((void));\n+extern tree expand_start_stmt_expr\t\tPARAMS ((int));\n extern tree expand_end_stmt_expr\t\tPARAMS ((tree));\n extern void expand_expr_stmt\t\t\tPARAMS ((tree));\n extern void expand_expr_stmt_value\t\tPARAMS ((tree, int, int));"}]}