{"sha": "ac12a18bf44ae0d77db2c6a582db464327202227", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMxMmExOGJmNDRhZTBkNzdkYjJjNmE1ODJkYjQ2NDMyNzIwMjIyNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-10T15:14:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-10T15:14:10Z"}, "message": "[multiple changes]\n\n2010-09-10  Bob Duff  <duff@adacore.com>\n\n\t* s-os_lib.ads, g-expect.ads: Add comments.\n\n2010-09-10  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch5.adb: Minor reformatting.\n\nFrom-SVN: r164189", "tree": {"sha": "2162f1eefbac597e6278445334a4ca6ae32fa966", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2162f1eefbac597e6278445334a4ca6ae32fa966"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac12a18bf44ae0d77db2c6a582db464327202227", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac12a18bf44ae0d77db2c6a582db464327202227", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac12a18bf44ae0d77db2c6a582db464327202227", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac12a18bf44ae0d77db2c6a582db464327202227/comments", "author": null, "committer": null, "parents": [{"sha": "e5536c09381815b8527e8221554218dc4c3b4b73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5536c09381815b8527e8221554218dc4c3b4b73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5536c09381815b8527e8221554218dc4c3b4b73"}], "stats": {"total": 114, "additions": 97, "deletions": 17}, "files": [{"sha": "62087b4f44e2cb338506e13e42bd03bd0c779794", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac12a18bf44ae0d77db2c6a582db464327202227/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac12a18bf44ae0d77db2c6a582db464327202227/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ac12a18bf44ae0d77db2c6a582db464327202227", "patch": "@@ -1,3 +1,11 @@\n+2010-09-10  Bob Duff  <duff@adacore.com>\n+\n+\t* s-os_lib.ads, g-expect.ads: Add comments.\n+\n+2010-09-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch5.adb: Minor reformatting.\n+\n 2010-09-10  Thomas Quinot  <quinot@adacore.com>\n \n \t* scos.ads: Add comments."}, {"sha": "8760cb7aae251579c8e96a4e2002f427206cd474", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac12a18bf44ae0d77db2c6a582db464327202227/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac12a18bf44ae0d77db2c6a582db464327202227/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=ac12a18bf44ae0d77db2c6a582db464327202227", "patch": "@@ -1010,14 +1010,7 @@ package body Exp_Ch5 is\n       function Build_Step (J : Nat) return Node_Id;\n       --  The increment step for the index of the right-hand side is written\n       --  as an attribute reference (Succ or Pred). This function returns\n-      --  the corresponding node, which is placed at the end of theloop body.\n-\n-      --  Note that on the last iteration of the loop, the index is increased\n-      --  (or decreased) past the corresponding bound. This is consistent with\n-      --  the C semantics of the back-end, where such an off-by-one value on a\n-      --  dead index variable is OK.  However, in CodePeer mode this leads to\n-      --  spurious warnings, and thus we place a guard around the attribute\n-      --  reference. For obvious reasons we only do this for CodePeer.\n+      --  the corresponding node, which is placed at the end of the loop body.\n \n       ----------------\n       -- Build_Step --\n@@ -1045,6 +1038,13 @@ package body Exp_Ch5 is\n                    Expressions => New_List (\n                      New_Occurrence_Of (Rnn (J), Loc))));\n \n+      --  Note that on the last iteration of the loop, the index is increased\n+      --  (or decreased) past the corresponding bound. This is consistent with\n+      --  the C semantics of the back-end, where such an off-by-one value on a\n+      --  dead index variable is OK.  However, in CodePeer mode this leads to\n+      --  spurious warnings, and thus we place a guard around the attribute\n+      --  reference. For obvious reasons we only do this for CodePeer.\n+\n          if CodePeer_Mode then\n             Step :=\n               Make_If_Statement (Loc,"}, {"sha": "18cf995891fcaef8ff13ca996651746ea16fcb0f", "filename": "gcc/ada/g-expect.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac12a18bf44ae0d77db2c6a582db464327202227/gcc%2Fada%2Fg-expect.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac12a18bf44ae0d77db2c6a582db464327202227/gcc%2Fada%2Fg-expect.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-expect.ads?ref=ac12a18bf44ae0d77db2c6a582db464327202227", "patch": "@@ -184,6 +184,9 @@ package GNAT.Expect is\n    --  subprograms to also match on output on standard error.\n    --\n    --  Invalid_Process is raised if the process could not be spawned.\n+   --\n+   --  For information about spawning processes from tasking programs, see the\n+   --  \"NOTE: Spawn in tasking programs\" in System.OS_Lib (s-os_lib.ads).\n \n    procedure Close (Descriptor : in out Process_Descriptor);\n    --  Terminate the process and close the pipes to it. It implicitly does the"}, {"sha": "a6418debfab0d7740d7fdb497db341dd352ca5ba", "filename": "gcc/ada/s-os_lib.ads", "status": "modified", "additions": 78, "deletions": 9, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac12a18bf44ae0d77db2c6a582db464327202227/gcc%2Fada%2Fs-os_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac12a18bf44ae0d77db2c6a582db464327202227/gcc%2Fada%2Fs-os_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.ads?ref=ac12a18bf44ae0d77db2c6a582db464327202227", "patch": "@@ -688,9 +688,8 @@ package System.OS_Lib is\n    --  (notably Unix systems) a simple file name may also work (if the\n    --  executable can be located in the path).\n    --\n-   --  \"Spawn\" should be avoided in tasking applications, since there are\n-   --  subtle interactions between creating a process and signals/locks\n-   --  that can cause troubles.\n+   --  Spawning processes from tasking programs is not recommended. See\n+   --  \"NOTE: Spawn in tasking programs\" below.\n    --\n    --  Note: Arguments in Args that contain spaces and/or quotes such as\n    --  \"--GCC=gcc -v\" or \"--GCC=\"\"gcc -v\"\"\" are not portable across all\n@@ -717,7 +716,8 @@ package System.OS_Lib is\n    --  by the operating system, or -1 under VxWorks and any other similar\n    --  operating systems which have no notion of separately spawnable programs.\n    --\n-   --  \"Spawn\" should not be used in tasking applications.\n+   --  Spawning processes from tasking programs is not recommended. See\n+   --  \"NOTE: Spawn in tasking programs\" below.\n \n    procedure Spawn\n      (Program_Name           : String;\n@@ -730,7 +730,8 @@ package System.OS_Lib is\n    --  Standard Error output is also redirected.\n    --  Return_Code is set to the status code returned by the operating system\n    --\n-   --  \"Spawn\" should not be used in tasking applications.\n+   --  Spawning processes from tasking programs is not recommended. See\n+   --  \"NOTE: Spawn in tasking programs\" below.\n \n    procedure Spawn\n      (Program_Name : String;\n@@ -747,7 +748,8 @@ package System.OS_Lib is\n    --  will be set to the status code returned by the operating system.\n    --  Otherwise, Return_Code is undefined.\n    --\n-   --  \"Spawn\" should not be used in tasking applications.\n+   --  Spawning processes from tasking programs is not recommended. See\n+   --  \"NOTE: Spawn in tasking programs\" below.\n \n    type Process_Id is private;\n    --  A private type used to identify a process activated by the following\n@@ -768,7 +770,8 @@ package System.OS_Lib is\n    --  returned. Parameters are to be used as in Spawn. If Invalid_Pid is\n    --  returned the program could not be spawned.\n    --\n-   --  \"Non_Blocking_Spawn\" should not be used in tasking applications.\n+   --  Spawning processes from tasking programs is not recommended. See\n+   --  \"NOTE: Spawn in tasking programs\" below.\n    --\n    --  This function will always return Invalid_Pid under VxWorks, since there\n    --  is no notion of executables under this OS.\n@@ -783,7 +786,8 @@ package System.OS_Lib is\n    --  Standard Error output is also redirected. Invalid_Pid is returned\n    --  if the program could not be spawned successfully.\n    --\n-   --  \"Non_Blocking_Spawn\" should not be used in tasking applications.\n+   --  Spawning processes from tasking programs is not recommended. See\n+   --  \"NOTE: Spawn in tasking programs\" below.\n    --\n    --  This function will always return Invalid_Pid under VxWorks, since there\n    --  is no notion of executables under this OS.\n@@ -801,7 +805,8 @@ package System.OS_Lib is\n    --  file could not be created or if the program could not be spawned\n    --  successfully.\n    --\n-   --  \"Non_Blocking_Spawn\" should not be used in tasking applications.\n+   --  Spawning processes from tasking programs is not recommended. See\n+   --  \"NOTE: Spawn in tasking programs\" below.\n    --\n    --  This function will always return Invalid_Pid under VxWorks, since there\n    --  is no notion of executables under this OS.\n@@ -827,6 +832,70 @@ package System.OS_Lib is\n    --  be freed by the programmer (when it is no longer needed) to avoid\n    --  memory leaks.\n \n+   -------------------------------------\n+   -- NOTE: Spawn in Tasking Programs --\n+   -------------------------------------\n+\n+   --  Spawning processes in tasking programs using the above Spawn and\n+   --  Non_Blocking_Spawn subprograms is not recommended, because there are\n+   --  subtle interactions between creating a process and signals/locks that\n+   --  can cause trouble. These issues are not specific to Ada; they depend\n+   --  primarily on the operating system.\n+\n+   --  If you need to spawn processes in a tasking program, you will need to\n+   --  understand the semantics of your operating system, and you are likely to\n+   --  write non-portable code, because operating systems differ in this area.\n+\n+   --  The Spawn and Non_Blocking_Spawn subprograms call the following\n+   --  operating system functions:\n+\n+   --     On Windows: spawnvp (blocking) or CreateProcess (non-blocking)\n+\n+   --     On Solaris: fork1, followed in the child process by execv\n+\n+   --     On other Unix-like systems, and on VMS: fork, followed in the child\n+   --     process by execv.\n+\n+   --     On vxworks, nucleus, and RTX, spawning of processes is not supported\n+\n+   --  For details, look at the functions __gnat_portable_spawn and\n+   --  __gnat_portable_no_block_spawn in adaint.c.\n+\n+   --  You should read the operating-system-specific documentation for the\n+   --  above functions, paying special attention to subtle interactions with\n+   --  threading, signals, locks, and file descriptors. Most of the issues are\n+   --  related to the fact that on Unix, there is a window of time between fork\n+   --  and execv; Windows does not have this problem, because spawning is done\n+   --  in a single operation.\n+\n+   --  On Posix-compliant systems, such as Linux, fork duplicates just the\n+   --  calling thread. (On Solaris, fork1 is the Posix-compliant version of\n+   --  fork.)\n+\n+   --  You should avoid using signals while spawning. This includes signals\n+   --  used internally by the Ada run-time system, such as timer signals used\n+   --  to implement delay statements.\n+\n+   --  It is best to spawn any subprocesses very early, before the parent\n+   --  process creates tasks, locks, or installs signal handlers. Certainly\n+   --  avoid doing simultaneous spawns from multiple threads of the same\n+   --  process.\n+\n+   --  There is no problem spawning a subprocess that uses tasking: the\n+   --  problems are caused only by tasking in the parent.\n+\n+   --  If the parent is using tasking, and needs to spawn subprocesses at\n+   --  arbitrary times, one technique is for the parent to spawn (very early)\n+   --  a particular spawn-manager subprocess whose job is to spawn other\n+   --  processes. The spawn-manager avoids tasking. The parent sends messages\n+   --  to the spawn-manager requesting it to spawn processes, using whatever\n+   --  inter-process communication mechanism you like, such as sockets.\n+\n+   --  In short, mixing spawning of subprocesses with tasking is a tricky\n+   --  business, and should be avoided if possible, but if it is necessary,\n+   --  the above guidelines should be followed, and you should beware of\n+   --  portability problems.\n+\n    -------------------\n    -- Miscellaneous --\n    -------------------"}]}