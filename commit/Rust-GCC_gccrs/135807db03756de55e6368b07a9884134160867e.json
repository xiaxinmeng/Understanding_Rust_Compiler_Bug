{"sha": "135807db03756de55e6368b07a9884134160867e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM1ODA3ZGIwMzc1NmRlNTVlNjM2OGIwN2E5ODg0MTM0MTYwODY3ZQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-17T13:29:02Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-17T14:46:43Z"}, "message": "When calling functions the arguments are a coercion site\n\nThis changes all type checking of arguments to function calls to be\ncoercion sites instead of unifications. This allows for cases like mutable\npointers being coerced to immutable reference for example.", "tree": {"sha": "2e2a1a82f3fb8b4dc43e780270d7bc473505b443", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e2a1a82f3fb8b4dc43e780270d7bc473505b443"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/135807db03756de55e6368b07a9884134160867e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/135807db03756de55e6368b07a9884134160867e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/135807db03756de55e6368b07a9884134160867e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/135807db03756de55e6368b07a9884134160867e/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e29a8a4172ae5c4f85d0e21d7edfaf934744c9fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e29a8a4172ae5c4f85d0e21d7edfaf934744c9fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e29a8a4172ae5c4f85d0e21d7edfaf934744c9fb"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "5ab8542de27a9eae0d8a7933b31c4a5ff48687d6", "filename": "gcc/rust/typecheck/rust-tyty-coercion.h", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135807db03756de55e6368b07a9884134160867e/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135807db03756de55e6368b07a9884134160867e/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h?ref=135807db03756de55e6368b07a9884134160867e", "patch": "@@ -1326,6 +1326,37 @@ class PlaceholderCoercionRules : public BaseCoercionRules\n     : BaseCoercionRules (base), base (base)\n   {}\n \n+  BaseType *coerce (BaseType *other) override final\n+  {\n+    if (!base->can_resolve ())\n+      return BaseCoercionRules::coerce (other);\n+\n+    BaseType *lookup = base->resolve ();\n+    return lookup->unify (other);\n+  }\n+\n+  void visit (PlaceholderType &type) override\n+  {\n+    if (base->get_symbol ().compare (type.get_symbol ()) != 0)\n+      {\n+\tBaseCoercionRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = type.clone ();\n+  }\n+\n+  void visit (InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseCoercionRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = base->clone ();\n+  }\n+\n private:\n   BaseType *get_base () override { return base; }\n "}, {"sha": "bfe1043edf4ac8fc5db973a4967289713338c99a", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135807db03756de55e6368b07a9884134160867e/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135807db03756de55e6368b07a9884134160867e/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=135807db03756de55e6368b07a9884134160867e", "patch": "@@ -2358,7 +2358,7 @@ TypeCheckCallExpr::visit (ADTType &type)\n \treturn false;\n       }\n \n-    auto res = field_tyty->unify (arg);\n+    auto res = field_tyty->coerce (arg);\n     if (res->get_kind () == TyTy::TypeKind::ERROR)\n       {\n \treturn false;\n@@ -2420,7 +2420,7 @@ TypeCheckCallExpr::visit (FnType &type)\n     if (i < type.num_params ())\n       {\n \tauto fnparam = type.param_at (i);\n-\tresolved_argument_type = fnparam.second->unify (argument_expr_tyty);\n+\tresolved_argument_type = fnparam.second->coerce (argument_expr_tyty);\n \tif (argument_expr_tyty->get_kind () == TyTy::TypeKind::ERROR)\n \t  {\n \t    rust_error_at (param->get_locus (),\n@@ -2479,7 +2479,7 @@ TypeCheckCallExpr::visit (FnPtr &type)\n \treturn false;\n       }\n \n-    auto resolved_argument_type = fnparam->unify (argument_expr_tyty);\n+    auto resolved_argument_type = fnparam->coerce (argument_expr_tyty);\n     if (argument_expr_tyty->get_kind () == TyTy::TypeKind::ERROR)\n       {\n \trust_error_at (param->get_locus (),\n@@ -2530,7 +2530,7 @@ TypeCheckMethodCallExpr::visit (FnType &type)\n \treturn false;\n       }\n \n-    auto resolved_argument_type = fnparam.second->unify (argument_expr_tyty);\n+    auto resolved_argument_type = fnparam.second->coerce (argument_expr_tyty);\n     if (argument_expr_tyty->get_kind () == TyTy::TypeKind::ERROR)\n       {\n \trust_error_at (param->get_locus (),"}]}