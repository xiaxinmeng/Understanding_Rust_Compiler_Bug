{"sha": "e724b0480bfa5ec04f39be8c7290330b495c59de", "node_id": "C_kwDOANBUbNoAKGU3MjRiMDQ4MGJmYTVlYzA0ZjM5YmU4YzcyOTAzMzBiNDk1YzU5ZGU", "commit": {"author": {"name": "Florian Weimer", "email": "fweimer@redhat.com", "date": "2022-11-04T09:18:03Z"}, "committer": {"name": "Florian Weimer", "email": "fweimer@redhat.com", "date": "2022-11-04T09:18:03Z"}, "message": "libgcc: Special-case BFD ld unwind table encodings in find_fde_tail\n\nBFD ld (and the other linkers) only produce one encoding of these\nvalues.  It is not necessary to use the general\nread_encoded_value_with_base decoding routine.  This avoids the\ndata-dependent branches in its implementation.\n\nlibgcc/\n\n\t* unwind-dw2-fde-dip.c (find_fde_tail): Special-case encoding\n\tvalues actually used by BFD ld.", "tree": {"sha": "b6386f6ca91a728a373e2c2bdaeb901b83aa3683", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6386f6ca91a728a373e2c2bdaeb901b83aa3683"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e724b0480bfa5ec04f39be8c7290330b495c59de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e724b0480bfa5ec04f39be8c7290330b495c59de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e724b0480bfa5ec04f39be8c7290330b495c59de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e724b0480bfa5ec04f39be8c7290330b495c59de/comments", "author": {"login": "fweimer-rh", "id": 75532728, "node_id": "MDQ6VXNlcjc1NTMyNzI4", "avatar_url": "https://avatars.githubusercontent.com/u/75532728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fweimer-rh", "html_url": "https://github.com/fweimer-rh", "followers_url": "https://api.github.com/users/fweimer-rh/followers", "following_url": "https://api.github.com/users/fweimer-rh/following{/other_user}", "gists_url": "https://api.github.com/users/fweimer-rh/gists{/gist_id}", "starred_url": "https://api.github.com/users/fweimer-rh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fweimer-rh/subscriptions", "organizations_url": "https://api.github.com/users/fweimer-rh/orgs", "repos_url": "https://api.github.com/users/fweimer-rh/repos", "events_url": "https://api.github.com/users/fweimer-rh/events{/privacy}", "received_events_url": "https://api.github.com/users/fweimer-rh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fweimer-rh", "id": 75532728, "node_id": "MDQ6VXNlcjc1NTMyNzI4", "avatar_url": "https://avatars.githubusercontent.com/u/75532728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fweimer-rh", "html_url": "https://github.com/fweimer-rh", "followers_url": "https://api.github.com/users/fweimer-rh/followers", "following_url": "https://api.github.com/users/fweimer-rh/following{/other_user}", "gists_url": "https://api.github.com/users/fweimer-rh/gists{/gist_id}", "starred_url": "https://api.github.com/users/fweimer-rh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fweimer-rh/subscriptions", "organizations_url": "https://api.github.com/users/fweimer-rh/orgs", "repos_url": "https://api.github.com/users/fweimer-rh/repos", "events_url": "https://api.github.com/users/fweimer-rh/events{/privacy}", "received_events_url": "https://api.github.com/users/fweimer-rh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a05d8e1d15ea08526639ba154e59b6822b704f4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a05d8e1d15ea08526639ba154e59b6822b704f4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a05d8e1d15ea08526639ba154e59b6822b704f4c"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "f370c1279aef4493b8f1cee294a2c4f7bb1d3431", "filename": "libgcc/unwind-dw2-fde-dip.c", "status": "modified", "additions": 48, "deletions": 10, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e724b0480bfa5ec04f39be8c7290330b495c59de/libgcc%2Funwind-dw2-fde-dip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e724b0480bfa5ec04f39be8c7290330b495c59de/libgcc%2Funwind-dw2-fde-dip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2-fde-dip.c?ref=e724b0480bfa5ec04f39be8c7290330b495c59de", "patch": "@@ -396,10 +396,21 @@ find_fde_tail (_Unwind_Ptr pc,\n   if (hdr->version != 1)\n     return NULL;\n \n-  p = read_encoded_value_with_base (hdr->eh_frame_ptr_enc,\n-\t\t\t\t    base_from_cb_data (hdr->eh_frame_ptr_enc,\n-\t\t\t\t\t\t       dbase),\n-\t\t\t\t    p, &eh_frame);\n+  if (__builtin_expect (hdr->eh_frame_ptr_enc == (DW_EH_PE_sdata4\n+\t\t\t\t\t\t  | DW_EH_PE_pcrel), 1))\n+    {\n+      /* Specialized version of read_encoded_value_with_base, based on what\n+\t BFD ld generates.  */\n+      signed value __attribute__ ((mode (SI)));\n+      memcpy (&value, p, sizeof (value));\n+      p += sizeof (value);\n+      dbase = value;\t\t/* No adjustment because pcrel has base 0.  */\n+    }\n+  else\n+    p = read_encoded_value_with_base (hdr->eh_frame_ptr_enc,\n+\t\t\t\t      base_from_cb_data (hdr->eh_frame_ptr_enc,\n+\t\t\t\t\t\t\t dbase),\n+\t\t\t\t      p, &eh_frame);\n \n   /* We require here specific table encoding to speed things up.\n      Also, DW_EH_PE_datarel here means using PT_GNU_EH_FRAME start\n@@ -409,10 +420,20 @@ find_fde_tail (_Unwind_Ptr pc,\n     {\n       _Unwind_Ptr fde_count;\n \n-      p = read_encoded_value_with_base (hdr->fde_count_enc,\n-\t\t\t\t\tbase_from_cb_data (hdr->fde_count_enc,\n-\t\t\t\t\t\t\t   dbase),\n-\t\t\t\t\tp, &fde_count);\n+      if (__builtin_expect (hdr->fde_count_enc == DW_EH_PE_udata4, 1))\n+\t{\n+\t  /* Specialized version of read_encoded_value_with_base, based on\n+\t     what BFD ld generates.  */\n+\t  unsigned value __attribute__ ((mode (SI)));\n+\t  memcpy (&value, p, sizeof (value));\n+\t  p += sizeof (value);\n+\t  fde_count = value;\n+\t}\n+      else\n+\tp = read_encoded_value_with_base (hdr->fde_count_enc,\n+\t\t\t\t\t  base_from_cb_data (hdr->fde_count_enc,\n+\t\t\t\t\t\t\t     dbase),\n+\t\t\t\t\t  p, &fde_count);\n       /* Shouldn't happen.  */\n       if (fde_count == 0)\n \treturn NULL;\n@@ -454,8 +475,25 @@ find_fde_tail (_Unwind_Ptr pc,\n \t  f = (fde *) (table[mid].fde + data_base);\n \t  f_enc = get_fde_encoding (f);\n \t  f_enc_size = size_of_encoded_value (f_enc);\n-\t  read_encoded_value_with_base (f_enc & 0x0f, 0,\n-\t\t\t\t\t&f->pc_begin[f_enc_size], &range);\n+\n+\t  /* BFD ld uses DW_EH_PE_sdata4 | DW_EH_PE_pcrel on non-FDPIC targets,\n+\t     so optimize for that.\n+\n+\t     This optimization is not valid for FDPIC targets.  f_enc & 0x0f as\n+\t     passed to read_encoded_value_with_base masks away the base flags,\n+\t     but they are implicit for FDPIC.  */\n+#ifndef __FDPIC__\n+\t  if (__builtin_expect (f_enc == (DW_EH_PE_sdata4 | DW_EH_PE_pcrel),\n+\t\t\t\t1))\n+\t    {\n+\t      signed value __attribute__ ((mode (SI)));\n+\t      memcpy (&value, &f->pc_begin[f_enc_size], sizeof (value));\n+\t      range = value;\n+\t    }\n+\t  else\n+#endif\n+\t    read_encoded_value_with_base (f_enc & 0x0f, 0,\n+\t\t\t\t\t  &f->pc_begin[f_enc_size], &range);\n \t  _Unwind_Ptr func = table[mid].initial_loc + data_base;\n \t  if (pc < table[mid].initial_loc + data_base + range)\n \t    {"}]}