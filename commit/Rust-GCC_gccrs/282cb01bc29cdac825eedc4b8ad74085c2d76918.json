{"sha": "282cb01bc29cdac825eedc4b8ad74085c2d76918", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgyY2IwMWJjMjljZGFjODI1ZWVkYzRiOGFkNzQwODVjMmQ3NjkxOA==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2002-02-06T02:50:09Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2002-02-06T02:50:09Z"}, "message": "crti.asm: Add changes for mips16.\n\n2002-02-05  Eric Christopher  <echristo@redhat.com>\n\n\t* config/mips/crti.asm: Add changes for mips16. mips16 uses\n\tregister 7 as RA instead of $31.\n\t* config/mips/crtn.asm: Ditto.\n\t* config/mips/mips.c (mips_move_2words): Add case for\n\tTARGET_MIPS16 when HOST_BITS_PER_WIDE_INT >= 64.\n\t(compute_frame_size): Fix typo.\n\t(save_restore_insns): Ditto.  Make documentation about using\n\tregister $7 as return register more precise.\n\t(mips_expand_epilogue): Fix comment. Add code to work around not\n\tbeing able to add to the stack pointer directly.\n\t* config/mips/mips.h (EH_RETURN_DATA_REGNO): Change register number\n\tto 2 for TARGET_MIPS16 as we need 6 and 7 as clobbers in the\n\tepilogue.\n\nFrom-SVN: r49535", "tree": {"sha": "9337895f122027be87b47a40122704463955bf79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9337895f122027be87b47a40122704463955bf79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/282cb01bc29cdac825eedc4b8ad74085c2d76918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/282cb01bc29cdac825eedc4b8ad74085c2d76918", "html_url": "https://github.com/Rust-GCC/gccrs/commit/282cb01bc29cdac825eedc4b8ad74085c2d76918", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/282cb01bc29cdac825eedc4b8ad74085c2d76918/comments", "author": null, "committer": null, "parents": [{"sha": "8c78e3a3cdfb624d8f2d232a2d03ee78c6e633eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c78e3a3cdfb624d8f2d232a2d03ee78c6e633eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c78e3a3cdfb624d8f2d232a2d03ee78c6e633eb"}], "stats": {"total": 86, "additions": 71, "deletions": 15}, "files": [{"sha": "f4bef6ff92b9db4a1f8817986a3e721f22ffd274", "filename": "gcc/config/mips/crti.asm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/282cb01bc29cdac825eedc4b8ad74085c2d76918/gcc%2Fconfig%2Fmips%2Fcrti.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/282cb01bc29cdac825eedc4b8ad74085c2d76918/gcc%2Fconfig%2Fmips%2Fcrti.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fcrti.asm?ref=282cb01bc29cdac825eedc4b8ad74085c2d76918", "patch": "@@ -6,10 +6,10 @@\n \t.type\t_init,@function\n _init:\n #ifdef __mips64\n-\tdsubu   $sp,$sp,48\n+\tdaddu   $sp,$sp,-48\n \tsd      $31,40($sp)\n #else\n-\tsubu\t$sp,$sp,32\n+\taddu\t$sp,$sp,-32\n \tsw\t$31,20($sp)\n #endif\n \n@@ -18,9 +18,9 @@ _init:\n \t.type\t_fini,@function\n _fini:\n #ifdef __mips64\n-\tdsubu   $sp,$sp,48\n+\tdaddu   $sp,$sp,-48\n \tsd      $31,40($sp)\n #else\n-\tsubu\t$sp,$sp,32\n+\taddu\t$sp,$sp,-32\n \tsw\t$31,20($sp)\n #endif"}, {"sha": "54f886a216f9fb90300e7583f17d1a22662c932c", "filename": "gcc/config/mips/crtn.asm", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/282cb01bc29cdac825eedc4b8ad74085c2d76918/gcc%2Fconfig%2Fmips%2Fcrtn.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/282cb01bc29cdac825eedc4b8ad74085c2d76918/gcc%2Fconfig%2Fmips%2Fcrtn.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fcrtn.asm?ref=282cb01bc29cdac825eedc4b8ad74085c2d76918", "patch": "@@ -6,17 +6,37 @@\n \tld      $31,40($sp)\n \tdaddu\t$sp,$sp,48\n #else\n+#ifndef __mips16\n \tlw\t$31,20($sp)\n \taddu\t$sp,$sp,32\n+#else\n+/* The mips16 uses $7 for a return address. We use that here too.  */\n+\tlw\t$7,20($sp)\n+\taddu\t$sp,$sp,32\n+\n+\tj\t$7\n #endif\n+#endif\n+#ifndef __mips16\n \tj\t$31\n+#endif\n \n \t.section .fini,\"ax\",@progbits\n #ifdef __mips64\n \tld\t$31,40($sp)\n \tdaddu\t$sp,$sp,48\n #else\n+#ifndef __mips16\n \tlw\t$31,20($sp)\n \taddu\t$sp,$sp,32\n+#else\n+/* The mips16 uses $7 for a return address. We use that here too.  */\n+\tlw\t$7,20($sp)\n+\taddu\t$sp,$sp,32\n+\n+\tj\t$7\n #endif\n+#endif\n+#ifndef __mips16\n \tj\t$31\n+#endif"}, {"sha": "01e7dd30c9ceb68add5a4c85a89efc2a405a5864", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 46, "deletions": 10, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/282cb01bc29cdac825eedc4b8ad74085c2d76918/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/282cb01bc29cdac825eedc4b8ad74085c2d76918/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=282cb01bc29cdac825eedc4b8ad74085c2d76918", "patch": "@@ -2557,7 +2557,18 @@ mips_move_2words (operands, insn)\n \t      operands[2] = GEN_INT (INTVAL (operands[1]) >> 16 >> 16);\n \t      operands[1]\n \t\t= GEN_INT (INTVAL (operands[1]) << 16 << 16 >> 16 >> 16);\n-\t      ret = \"li\\t%M0,%2\\n\\tli\\t%L0,%1\";\n+\t      if (TARGET_MIPS16)\n+\t\t{\n+\t\t  if (INTVAL (op1) >= 0 && INTVAL (op1) <= 0xffff)\n+\t\t    ret = \"li\\t%M0,%2\\n\\tli\\t%L0,%1\";\n+\t\t  else if (INTVAL (op1) < 0 && INTVAL (op1) >= -0xffff)\n+\t\t    {\n+\t\t      operands[2] = GEN_INT (1);\n+\t\t      ret = \"li\\t%M0,%2\\n\\tneg\\t%M0\\n\\tli\\t%L0,%n1\\n\\tneg\\t%L0\";\n+\t\t    }\n+\t\t}\n+\t      else\n+\t\tret = \"li\\t%M0,%2\\n\\tli\\t%L0,%1\";\n \t    }\n \t}\n \n@@ -6445,7 +6456,7 @@ compute_frame_size (size)\n     }\n \n   /* This loop must iterate over the same space as its companion in\n-     save_restore_regs.  */\n+     save_restore_insns.  */\n   for (regno = (FP_REG_LAST - fp_inc + 1);\n        regno >= FP_REG_FIRST;\n        regno -= fp_inc)\n@@ -6673,7 +6684,7 @@ save_restore_insns (store_p, large_reg, large_offset, file)\n   if (! store_p\n       && TARGET_ABICALLS\n       && (mips_abi == ABI_32 || mips_abi == ABI_O64))\n-    mask &= ~(1 << (PIC_OFFSET_TABLE_REGNUM - GP_REG_FIRST));\n+    mask &= ~(1L << (PIC_OFFSET_TABLE_REGNUM - GP_REG_FIRST));\n \n   if (mask == 0 && fmask == 0)\n     return;\n@@ -6767,7 +6778,7 @@ save_restore_insns (store_p, large_reg, large_offset, file)\n \n \t\t/* The mips16 does not have an instruction to load\n                    $31, so we load $7 instead, and work things out\n-                   in the caller.  */\n+                   in mips_expand_epilogue.  */\n \t\tif (TARGET_MIPS16 && ! store_p && regno == GP_REG_FIRST + 31)\n \t\t  reg_rtx = gen_rtx (REG, gpr_mode, GP_REG_FIRST + 7);\n \t\t/* The mips16 sometimes needs to save $18.  */\n@@ -7653,7 +7664,7 @@ mips_expand_epilogue ()\n \t    {\n \t      tsize -= current_function_outgoing_args_size;\n \n-\t      /* If we have a large frame, it's easier to add to $17\n+\t      /* If we have a large frame, it's easier to add to $6\n                  than to $sp, since the mips16 has no instruction to\n                  add a register to $sp.  */\n \t      if (orig_tsize > 32767)\n@@ -7713,12 +7724,37 @@ mips_expand_epilogue ()\n \n       if (tsize != 0 || current_function_calls_eh_return)\n \t{\n-\t  if (Pmode == DImode)\n-\t    emit_insn (gen_adddi3 (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t\t   tsize_rtx));\n+\t  if (!TARGET_MIPS16)\n+\t    {\n+\t      if (Pmode == DImode)\n+\t\temit_insn (gen_adddi3 (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t\t\t       tsize_rtx));\n+\t      else\n+\t\temit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t\t\t       tsize_rtx));\n+\t    }\n \t  else\n-\t    emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t\t   tsize_rtx));\n+\t    {\n+\t      /* We need to work around not being able to add a register\n+\t\t to the stack pointer directly. Use register $6 as an\n+\t\t intermediate step.  */\n+\n+\t      rtx g6_rtx = gen_rtx (REG, Pmode, GP_REG_FIRST + 6);\n+\n+\t      if (Pmode == DImode)\n+\t\t{\n+\t\t  emit_insn (gen_movdi (g6_rtx, stack_pointer_rtx));\n+\t\t  emit_insn (gen_adddi3 (g6_rtx, g6_rtx, tsize_rtx));\n+\t\t  emit_insn (gen_movdi (stack_pointer_rtx, g6_rtx));\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  emit_insn (gen_movsi (g6_rtx, stack_pointer_rtx));\n+\t\t  emit_insn (gen_addsi3 (g6_rtx, g6_rtx, tsize_rtx));\n+\t\t  emit_insn (gen_movsi (stack_pointer_rtx, g6_rtx));\n+\t\t}\n+\t    }\n+\n \t}\n     }\n "}, {"sha": "7a5482cc927cfe993a4e643b471f668724e9014b", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/282cb01bc29cdac825eedc4b8ad74085c2d76918/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/282cb01bc29cdac825eedc4b8ad74085c2d76918/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=282cb01bc29cdac825eedc4b8ad74085c2d76918", "patch": "@@ -1369,7 +1369,7 @@ extern int mips_abi;\n #define INCOMING_RETURN_ADDR_RTX  gen_rtx_REG (VOIDmode, GP_REG_FIRST + 31)\n \n /* Describe how we implement __builtin_eh_return.  */\n-#define EH_RETURN_DATA_REGNO(N) ((N) < 4 ? (N) + GP_ARG_FIRST : INVALID_REGNUM)\n+#define EH_RETURN_DATA_REGNO(N) ((N) < (TARGET_MIPS16 ? 2 : 4) ? (N) + GP_ARG_FIRST : INVALID_REGNUM)\n #define EH_RETURN_STACKADJ_RTX  gen_rtx_REG (Pmode, GP_REG_FIRST + 3)\n \n /* Offsets recorded in opcodes are a multiple of this alignment factor."}]}