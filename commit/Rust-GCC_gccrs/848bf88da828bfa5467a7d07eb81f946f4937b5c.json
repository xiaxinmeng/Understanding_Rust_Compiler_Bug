{"sha": "848bf88da828bfa5467a7d07eb81f946f4937b5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ4YmY4OGRhODI4YmZhNTQ2N2E3ZDA3ZWI4MWY5NDZmNDkzN2I1Yw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-16T13:15:53Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-16T13:15:53Z"}, "message": "cp-tree.h (OVL_FIRST, OVL_NAME): New.\n\n\t* cp-tree.h (OVL_FIRST, OVL_NAME): New.\n\t(ovl_first): New.\n\t* constexpr.c (function_concept_check): Use OVL_FIRST.\n\t* cvt.c (build_expr_type_conversion): Likewise.\n\t* decl.c (poplevel, grokdeclarator): Use OVL_NAME.\n\t* decl2.c (mark_used): Use OVL_FIRST.\n\t* error.c (dump_decl): Use OVL_FIRST, OVL_NAME.\n\t(dump_expr, location_of): Use OVL_FIRST.\n\t* friend.c (do_friend): Use OVL_NAME.\n\t* init.c (build_offset_ref): Use OVL_FIRST.\n\t* mangle.c (write_member_name): Likewise.\n\t(write_expression): Use OVL_NAME.\n\t* method.c (strip_inheriting_ctors): Use OVL_FIRST.\n\t* name-lookup.c (pushdecl_class_level): Use OVL_NAME.\n\t* pt.c (check_explicit_specialization): Use OVL_FIRST.\n\t(check_template_shadow): Likewise.\n\t(tsubst_template_args): Use OVL_NAME.\n\t(tsubst_baselink): Use OVL_FIRST.\n\t* semantics.c (perform_koenig_lookup): Use OVL_NAME.\n\t* tree.c (get_first_fn): Use OVL_FIRST.\n\t* typeck.c (finish_class_member_access_expr): Use OVL_NAME.\n\t(cp_build_addr_expr_1): Use OVL_FIRST.\n\nFrom-SVN: r248108", "tree": {"sha": "7e49b3d679eccb83b4af299eb173295feeba98ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e49b3d679eccb83b4af299eb173295feeba98ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/848bf88da828bfa5467a7d07eb81f946f4937b5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/848bf88da828bfa5467a7d07eb81f946f4937b5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/848bf88da828bfa5467a7d07eb81f946f4937b5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/848bf88da828bfa5467a7d07eb81f946f4937b5c/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba1a69079ff61eea6ab6fcf4c2784ef6221c12da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba1a69079ff61eea6ab6fcf4c2784ef6221c12da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba1a69079ff61eea6ab6fcf4c2784ef6221c12da"}], "stats": {"total": 118, "additions": 64, "deletions": 54}, "files": [{"sha": "c094ea0d63e1de36bb4e88d2a6b815559ad2c051", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=848bf88da828bfa5467a7d07eb81f946f4937b5c", "patch": "@@ -1,5 +1,28 @@\n 2017-05-16  Nathan Sidwell  <nathan@acm.org>\n \n+\t* cp-tree.h (OVL_FIRST, OVL_NAME): New.\n+\t(ovl_first): New.\n+\t* constexpr.c (function_concept_check): Use OVL_FIRST.\n+\t* cvt.c (build_expr_type_conversion): Likewise.\n+\t* decl.c (poplevel, grokdeclarator): Use OVL_NAME.\n+\t* decl2.c (mark_used): Use OVL_FIRST.\n+\t* error.c (dump_decl): Use OVL_FIRST, OVL_NAME.\n+\t(dump_expr, location_of): Use OVL_FIRST.\n+\t* friend.c (do_friend): Use OVL_NAME.\n+\t* init.c (build_offset_ref): Use OVL_FIRST.\n+\t* mangle.c (write_member_name): Likewise.\n+\t(write_expression): Use OVL_NAME.\n+\t* method.c (strip_inheriting_ctors): Use OVL_FIRST.\n+\t* name-lookup.c (pushdecl_class_level): Use OVL_NAME.\n+\t* pt.c (check_explicit_specialization): Use OVL_FIRST.\n+\t(check_template_shadow): Likewise.\n+\t(tsubst_template_args): Use OVL_NAME.\n+\t(tsubst_baselink): Use OVL_FIRST.\n+\t* semantics.c (perform_koenig_lookup): Use OVL_NAME.\n+\t* tree.c (get_first_fn): Use OVL_FIRST.\n+\t* typeck.c (finish_class_member_access_expr): Use OVL_NAME.\n+\t(cp_build_addr_expr_1): Use OVL_FIRST.\n+\n \t* pt.c (tsubst_copy_and_build): Remove unnecessary COMPONENT_REF\n \tpeeking.\n \t* semantics.c (finish_id_expression): Directly init local var."}, {"sha": "59b315159bed7cc37a3dd3dfb7a33c1a5528f184", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=848bf88da828bfa5467a7d07eb81f946f4937b5c", "patch": "@@ -117,10 +117,9 @@ function_concept_check_p (tree t)\n   gcc_assert (TREE_CODE (t) == CALL_EXPR);\n   tree fn = CALL_EXPR_FN (t);\n   if (fn != NULL_TREE\n-      && TREE_CODE (fn) == TEMPLATE_ID_EXPR\n-      && TREE_CODE (TREE_OPERAND (fn, 0)) == OVERLOAD)\n+      && TREE_CODE (fn) == TEMPLATE_ID_EXPR)\n     {\n-      tree f1 = get_first_fn (fn);\n+      tree f1 = OVL_FIRST (TREE_OPERAND (fn, 0));\n       if (TREE_CODE (f1) == TEMPLATE_DECL\n \t  && DECL_DECLARED_CONCEPT_P (DECL_TEMPLATE_RESULT (f1)))\n         return true;"}, {"sha": "8dee22f42f93ba11234d677a6623e8ccea13a2c4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=848bf88da828bfa5467a7d07eb81f946f4937b5c", "patch": "@@ -626,6 +626,11 @@ typedef struct ptrmem_cst * ptrmem_cst_t;\n    and can be freed afterward.  */\n #define OVL_ARG_DEPENDENT(NODE) TREE_LANG_FLAG_0 (OVERLOAD_CHECK (NODE))\n \n+/* The first decl of an overload.  */\n+#define OVL_FIRST(NODE)\tovl_first (NODE)\n+/* The name of the overload set.  */\n+#define OVL_NAME(NODE) DECL_NAME (OVL_FIRST (NODE))\n+\n struct GTY(()) tree_overload {\n   struct tree_common common;\n   tree function;\n@@ -6668,6 +6673,13 @@ extern tree hash_tree_cons\t\t\t(tree, tree, tree);\n extern tree hash_tree_chain\t\t\t(tree, tree);\n extern tree build_qualified_name\t\t(tree, tree, tree, bool);\n extern tree build_ref_qualified_type\t\t(tree, cp_ref_qualifier);\n+inline tree\n+ovl_first (tree node)\n+{\n+  while (TREE_CODE (node) == OVERLOAD)\n+    node = OVL_FUNCTION (node);\n+  return node;\n+}\n extern int is_overloaded_fn\t\t\t(tree);\n extern tree dependent_name\t\t\t(tree);\n extern tree get_fns\t\t\t\t(tree);"}, {"sha": "a53c0b3751a25592fd3a346e114b238ed67a440c", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=848bf88da828bfa5467a7d07eb81f946f4937b5c", "patch": "@@ -1722,7 +1722,7 @@ build_expr_type_conversion (int desires, tree expr, bool complain)\n       int win = 0;\n       tree candidate;\n       tree cand = TREE_VALUE (conv);\n-      cand = OVL_CURRENT (cand);\n+      cand = OVL_FIRST (cand);\n \n       if (winner && winner == cand)\n \tcontinue;"}, {"sha": "7fe0be3584c195db967cfdee8f404ad370c4ba5c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=848bf88da828bfa5467a7d07eb81f946f4937b5c", "patch": "@@ -683,7 +683,7 @@ poplevel (int keep, int reverse, int functionbody)\n   for (link = decls; link; link = TREE_CHAIN (link))\n     {\n       decl = TREE_CODE (link) == TREE_LIST ? TREE_VALUE (link) : link;\n-      tree name = DECL_NAME (OVL_CURRENT (decl));\n+      tree name = OVL_NAME (decl);\n \n       if (leaving_for_scope && VAR_P (decl)\n \t  /* It's hard to make this ARM compatibility hack play nicely with\n@@ -10104,10 +10104,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t      if (variable_template_p (dname))\n \t\t\tdname = DECL_NAME (dname);\n \t\t      else\n-\t\t        {\n-\t\t          gcc_assert (is_overloaded_fn (dname));\n-\t\t          dname = DECL_NAME (get_first_fn (dname));\n-\t\t        }\n+\t\t\tdname = OVL_NAME (dname);\n \t\t    }\n \t\t}\n \t\t/* Fall through.  */"}, {"sha": "4b99a8ebe8d8e01075d7d7efea3c422e62fd9c44", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=848bf88da828bfa5467a7d07eb81f946f4937b5c", "patch": "@@ -5029,7 +5029,7 @@ mark_used (tree decl, tsubst_flags_t complain)\n       decl = BASELINK_FUNCTIONS (decl);\n       if (really_overloaded_fn (decl))\n \treturn true;\n-      decl = OVL_CURRENT (decl);\n+      decl = OVL_FIRST (decl);\n     }\n \n   /* Set TREE_USED for the benefit of -Wunused.  */"}, {"sha": "e8136d3eca10efd8f619a3540299334493684118", "filename": "gcc/cp/error.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=848bf88da828bfa5467a7d07eb81f946f4937b5c", "patch": "@@ -1208,7 +1208,7 @@ dump_decl (cxx_pretty_printer *pp, tree t, int flags)\n \n       /* If there's only one function, just treat it like an ordinary\n \t FUNCTION_DECL.  */\n-      t = OVL_CURRENT (t);\n+      t = OVL_FIRST (t);\n       /* Fall through.  */\n \n     case FUNCTION_DECL:\n@@ -1235,10 +1235,8 @@ dump_decl (cxx_pretty_printer *pp, tree t, int flags)\n \ttree name = TREE_OPERAND (t, 0);\n \ttree args = TREE_OPERAND (t, 1);\n \n-\tif (is_overloaded_fn (name))\n-\t  name = get_first_fn (name);\n-\tif (DECL_P (name))\n-\t  name = DECL_NAME (name);\n+\tif (!identifier_p (name))\n+\t  name = OVL_NAME (name);\n \tdump_decl (pp, name, flags);\n \tpp_cxx_begin_template_argument_list (pp);\n \tif (args == error_mark_node)\n@@ -2498,7 +2496,7 @@ dump_expr (cxx_pretty_printer *pp, tree t, int flags)\n \t      /* A::f */\n \t      dump_expr (pp, t, flags | TFF_EXPR_IN_PARENS);\n \t    else if (BASELINK_P (t))\n-\t      dump_expr (pp, OVL_CURRENT (BASELINK_FUNCTIONS (t)),\n+\t      dump_expr (pp, OVL_FIRST (BASELINK_FUNCTIONS (t)),\n \t\t\t flags | TFF_EXPR_IN_PARENS);\n \t    else\n \t      dump_decl (pp, t, flags);\n@@ -3004,7 +3002,7 @@ location_of (tree t)\n \treturn input_location;\n     }\n   else if (TREE_CODE (t) == OVERLOAD)\n-    t = OVL_FUNCTION (t);\n+    t = OVL_FIRST (t);\n \n   if (DECL_P (t))\n     return DECL_SOURCE_LOCATION (t);"}, {"sha": "834a1544a54267795f21a94c694c4de3b4a3dda9", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=848bf88da828bfa5467a7d07eb81f946f4937b5c", "patch": "@@ -494,8 +494,7 @@ do_friend (tree ctype, tree declarator, tree decl,\n   if (TREE_CODE (declarator) == TEMPLATE_ID_EXPR)\n     {\n       declarator = TREE_OPERAND (declarator, 0);\n-      if (is_overloaded_fn (declarator))\n-\tdeclarator = DECL_NAME (get_first_fn (declarator));\n+      declarator = OVL_NAME (declarator);\n     }\n \n   if (ctype)"}, {"sha": "a905af8c85a9a204538eec0dc3a70f39894d2a2c", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=848bf88da828bfa5467a7d07eb81f946f4937b5c", "patch": "@@ -2063,7 +2063,7 @@ build_offset_ref (tree type, tree member, bool address_p,\n       if (TREE_CODE (t) != TEMPLATE_ID_EXPR && !really_overloaded_fn (t))\n \t{\n \t  /* Get rid of a potential OVERLOAD around it.  */\n-\t  t = OVL_CURRENT (t);\n+\t  t = OVL_FIRST (t);\n \n \t  /* Unique functions are handled easily.  */\n "}, {"sha": "42290fee6750747bf46073aa03a7ef22f5e74362", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=848bf88da828bfa5467a7d07eb81f946f4937b5c", "patch": "@@ -2833,8 +2833,7 @@ write_member_name (tree member)\n   else if (TREE_CODE (member) == TEMPLATE_ID_EXPR)\n     {\n       tree name = TREE_OPERAND (member, 0);\n-      if (TREE_CODE (name) == OVERLOAD)\n-\tname = OVL_FUNCTION (name);\n+      name = OVL_FIRST (name);\n       write_member_name (name);\n       write_template_args (TREE_OPERAND (member, 1));\n     }\n@@ -3053,10 +3052,7 @@ write_expression (tree expr)\n   else if (TREE_CODE (expr) == TEMPLATE_ID_EXPR)\n     {\n       tree fn = TREE_OPERAND (expr, 0);\n-      if (is_overloaded_fn (fn))\n-\tfn = get_first_fn (fn);\n-      if (DECL_P (fn))\n-\tfn = DECL_NAME (fn);\n+      fn = OVL_NAME (fn);\n       if (IDENTIFIER_OPNAME_P (fn))\n \twrite_string (\"on\");\n       write_unqualified_id (fn);\n@@ -3257,7 +3253,7 @@ write_expression (tree expr)\n \t    if ((TREE_CODE (fn) == FUNCTION_DECL\n \t\t || TREE_CODE (fn) == OVERLOAD)\n \t\t&& type_dependent_expression_p_push (expr))\n-\t      fn = DECL_NAME (get_first_fn (fn));\n+\t      fn = OVL_NAME (fn);\n \n \t    write_expression (fn);\n \t  }"}, {"sha": "a9bc4907eb716b6653fa40d7a82260e1fae97672", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=848bf88da828bfa5467a7d07eb81f946f4937b5c", "patch": "@@ -502,10 +502,8 @@ strip_inheriting_ctors (tree dfn)\n     return dfn;\n   tree fn = dfn;\n   while (tree inh = DECL_INHERITED_CTOR (fn))\n-    {\n-      inh = OVL_CURRENT (inh);\n-      fn = inh;\n-    }\n+    fn = OVL_FIRST (inh);\n+\n   if (TREE_CODE (fn) == TEMPLATE_DECL\n       && TREE_CODE (dfn) == FUNCTION_DECL)\n     fn = DECL_TEMPLATE_RESULT (fn);"}, {"sha": "1de8680faf558d4871e1dbbab12a16ba416e01d4", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=848bf88da828bfa5467a7d07eb81f946f4937b5c", "patch": "@@ -3610,7 +3610,6 @@ set_inherited_value_binding_p (cxx_binding *binding, tree decl,\n bool\n pushdecl_class_level (tree x)\n {\n-  tree name;\n   bool is_valid = true;\n   bool subtime;\n \n@@ -3621,10 +3620,7 @@ pushdecl_class_level (tree x)\n \n   subtime = timevar_cond_start (TV_NAME_LOOKUP);\n   /* Get the name of X.  */\n-  if (TREE_CODE (x) == OVERLOAD)\n-    name = DECL_NAME (get_first_fn (x));\n-  else\n-    name = DECL_NAME (x);\n+  tree name = OVL_NAME (x);\n \n   if (name)\n     {"}, {"sha": "aa6af295c0fee546f04cf0e977896ac5ded8ec70", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=848bf88da828bfa5467a7d07eb81f946f4937b5c", "patch": "@@ -2930,7 +2930,7 @@ check_explicit_specialization (tree declarator,\n \t\t     methods->iterate (idx, &ovl);\n \t\t     ++idx)\n \t\t  {\n-\t\t    if (!DECL_CONV_FN_P (OVL_CURRENT (ovl)))\n+\t\t    if (!DECL_CONV_FN_P (OVL_FIRST (ovl)))\n \t\t      /* There are no more conversion functions.  */\n \t\t      break;\n \n@@ -3910,8 +3910,7 @@ check_template_shadow (tree decl)\n     return true;\n \n   /* Figure out what we're shadowing.  */\n-  if (TREE_CODE (decl) == OVERLOAD)\n-    decl = OVL_CURRENT (decl);\n+  decl = OVL_FIRST (decl);\n   olddecl = innermost_non_namespace_value (DECL_NAME (decl));\n \n   /* If there's no previous binding for this name, we're not shadowing\n@@ -14128,7 +14127,7 @@ tsubst_baselink (tree baselink, tree object_type,\n \t  template_args = tsubst_template_args (template_args, args,\n \t\t\t\t\t\tcomplain, in_decl);\n       }\n-    name = DECL_NAME (get_first_fn (fns));\n+    name = OVL_NAME (fns);\n     if (IDENTIFIER_TYPENAME_P (name))\n       name = mangle_conv_op_name_for_type (optype);\n     baselink = lookup_fnfields (qualifying_scope, name, /*protect=*/1);\n@@ -14150,7 +14149,7 @@ tsubst_baselink (tree baselink, tree object_type,\n     if (BASELINK_P (baselink))\n       fns = BASELINK_FUNCTIONS (baselink);\n     if (!template_id_p && !really_overloaded_fn (fns)\n-\t&& !mark_used (OVL_CURRENT (fns), complain) && !(complain & tf_error))\n+\t&& !mark_used (OVL_FIRST (fns), complain) && !(complain & tf_error))\n       return error_mark_node;\n \n     /* Add back the template arguments, if present.  */"}, {"sha": "d9e1ee39d618ee81b8d796bff1ad86d45565a5f2", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=848bf88da828bfa5467a7d07eb81f946f4937b5c", "patch": "@@ -2231,15 +2231,10 @@ perform_koenig_lookup (cp_expr fn, vec<tree, va_gc> *args,\n   /* Find the name of the overloaded function.  */\n   if (identifier_p (fn))\n     identifier = fn;\n-  else if (is_overloaded_fn (fn))\n-    {\n-      functions = fn;\n-      identifier = DECL_NAME (get_first_fn (functions));\n-    }\n-  else if (DECL_P (fn))\n+  else\n     {\n       functions = fn;\n-      identifier = DECL_NAME (fn);\n+      identifier = OVL_NAME (functions);\n     }\n \n   /* A call to a namespace-scope function using an unqualified name."}, {"sha": "7b621736d6aa198b32152d7519debf62f382467d", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=848bf88da828bfa5467a7d07eb81f946f4937b5c", "patch": "@@ -2169,7 +2169,7 @@ get_fns (tree from)\n tree\n get_first_fn (tree from)\n {\n-  return OVL_CURRENT (get_fns (from));\n+  return OVL_FIRST (get_fns (from));\n }\n \n /* Return a new OVL node, concatenating it with the old one.  */"}, {"sha": "6f15c9be07b7da1eb7523520dc7ce94986c663ed", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848bf88da828bfa5467a7d07eb81f946f4937b5c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=848bf88da828bfa5467a7d07eb81f946f4937b5c", "patch": "@@ -2764,10 +2764,8 @@ finish_class_member_access_expr (cp_expr object, tree name, bool template_p,\n \t  template_args = TREE_OPERAND (name, 1);\n \t  name = TREE_OPERAND (name, 0);\n \n-\t  if (TREE_CODE (name) == OVERLOAD)\n-\t    name = DECL_NAME (get_first_fn (name));\n-\t  else if (DECL_P (name))\n-\t    name = DECL_NAME (name);\n+\t  if (!identifier_p (name))\n+\t    name = OVL_NAME (name);\n \t}\n \n       if (scope)\n@@ -5746,7 +5744,7 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n       /* Fall through.  */\n \n     case OVERLOAD:\n-      arg = OVL_CURRENT (arg);\n+      arg = OVL_FIRST (arg);\n       break;\n \n     case OFFSET_REF:"}]}