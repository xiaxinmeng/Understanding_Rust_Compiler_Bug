{"sha": "3906795848d851fde84d9cc12067f153561bb11a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkwNjc5NTg0OGQ4NTFmZGU4NGQ5Y2MxMjA2N2YxNTM1NjFiYjExYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-05-12T09:09:25Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-05-12T09:09:25Z"}, "message": "generic.texi: Rename TYPE_PTRMEM_P to TYPE_PTRDATAMEM_P.\n\n2012-05-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* doc/generic.texi: Rename TYPE_PTRMEM_P to TYPE_PTRDATAMEM_P.\n\n/cp\n2012-05-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* cp-tree.h (TYPE_PTRMEM_P): Rename to TYPE_PTRDATAMEM_P.\n\t(TYPE_PTR_TO_MEMBER_P): Rename to TYPE_PTRMEM_P.\n\t(TYPE_PTR_OR_PTRMEM_P): Add.\n\t* typeck.c (composite_pointer_type_r, composite_pointer_type,\n\tcommon_pointer_type, cp_build_indirect_ref, cp_build_binary_op,\n\tcp_truthvalue_conversion, convert_ptrmem, build_static_cast_1,\n\tbuild_reinterpret_cast_1, build_const_cast_1, comp_ptr_ttypes_real,\n\tcasts_away_constness_r, casts_away_constness): Adjust.\n\t* init.c (build_zero_init_1): Adjust.\n\t* class.c (check_field_decls): Likewise.\n\t* decl.c (check_default_argument): Likewise.\n\t* rtti.c (target_incomplete_p): Likewise.\n\t* tree.c (zero_init_p): Likewise.\n\t* cxx-pretty-print.c (pp_cxx_ptr_operator,\n\tpp_cxx_abstract_declarator): Likewise.\n\t* typeck2.c (build_m_component_ref): Likewise.\n\t* pt.c (convert_nontype_argument, invalid_nontype_parm_type_p,\n\tdependent_type_p_r): Likewise.\n\t* call.c (null_member_pointer_value_p, standard_conversion,\n\tadd_builtin_candidate, build_conditional_expr_1, compare_ics):\n\tLikewise.\n\t* cp-objcp-common.c (cp_var_mod_type_p): Likewise.\n\t* cvt.c (cp_convert_to_pointer, ocp_convert,\n\tperform_qualification_conversions): Likewise.\n\t* mangle.c (write_type): Likewise.\n\t* name-lookup.c (arg_assoc_type): Likewise.\n\nFrom-SVN: r187426", "tree": {"sha": "e2fafd0b56cb95940355b3ae86acf13cbae8e931", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2fafd0b56cb95940355b3ae86acf13cbae8e931"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3906795848d851fde84d9cc12067f153561bb11a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3906795848d851fde84d9cc12067f153561bb11a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3906795848d851fde84d9cc12067f153561bb11a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3906795848d851fde84d9cc12067f153561bb11a/comments", "author": null, "committer": null, "parents": [{"sha": "66b1156afefc078e6fcf7d9e041b15aea1f3897c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b1156afefc078e6fcf7d9e041b15aea1f3897c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66b1156afefc078e6fcf7d9e041b15aea1f3897c"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "e99366fb28d0ad0a3fe7b3aa31732d1532420f38", "filename": "gcc/doc/generic.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3906795848d851fde84d9cc12067f153561bb11a/gcc%2Fdoc%2Fgeneric.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3906795848d851fde84d9cc12067f153561bb11a/gcc%2Fdoc%2Fgeneric.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgeneric.texi?ref=3906795848d851fde84d9cc12067f153561bb11a", "patch": "@@ -2494,7 +2494,7 @@ should submit your patches for inclusion in GCC@.\n @findex TYPE_PRECISION\n @findex TYPE_ARG_TYPES\n @findex TYPE_METHOD_BASETYPE\n-@findex TYPE_PTRMEM_P\n+@findex TYPE_PTRDATAMEM_P\n @findex TYPE_OFFSET_BASETYPE\n @findex TREE_TYPE\n @findex TYPE_CONTEXT\n@@ -2571,7 +2571,7 @@ This predicate holds for a class-type.\n @item TYPE_BUILT_IN\n This predicate holds for a built-in type.\n \n-@item TYPE_PTRMEM_P\n+@item TYPE_PTRDATAMEM_P\n This predicate holds if the type is a pointer to data member.\n \n @item TYPE_PTR_P\n@@ -2597,7 +2597,7 @@ language-dependent info about GENERIC types.\n @item POINTER_TYPE\n Used to represent pointer types, and pointer to data member types.  If\n @code{TREE_TYPE}\n-is a pointer to data member type, then @code{TYPE_PTRMEM_P} will hold.\n+is a pointer to data member type, then @code{TYPE_PTRDATAMEM_P} will hold.\n For a pointer to data member type of the form @samp{T X::*},\n @code{TYPE_PTRMEM_CLASS_TYPE} will be the type @code{X}, while\n @code{TYPE_PTRMEM_POINTED_TO_TYPE} will be the type @code{T}."}]}