{"sha": "d29ecf23f0b046de720a25171c3b3980fa8a0a22", "node_id": "C_kwDOANBUbNoAKGQyOWVjZjIzZjBiMDQ2ZGU3MjBhMjUxNzFjM2IzOTgwZmE4YTBhMjI", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-09-05T13:14:44Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-09-05T13:14:44Z"}, "message": "aarch64: Remove lazy SIMD builtin initialisation\n\nAt one time the aarch64 port registered the Advanced SIMD builtins\nlazily, when we first encountered a set of target flags that includes\n+simd.  These days we always initialise them at start-up, temporarily\nforcing a conducive set of flags if necessary.\n\nThis patch removes some vestiges of the old way of doing things.\n\ngcc/\n\t* config/aarch64/aarch64-protos.h\n\t(aarch64_init_simd_builtins): Remove prototype.\n\t* config/aarch64/aarch64-builtins.cc\n\t(aarch64_simd_builtins_initialized_p): Delete.\n\t(aarch64_init_simd_builtins): Make static.  Remove protection\n\tagainst multiple calls.\n\t* config/aarch64/aarch64-c.cc (aarch64_pragma_target_parse): Remove\n\tlazy SIMD builtin initialization.\n\t* config/aarch64/aarch64.cc\n\t(aarch64_option_valid_attribute_p): Likewise.", "tree": {"sha": "541d6fdd7d3ef7e918907d13e908803197d3f29c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/541d6fdd7d3ef7e918907d13e908803197d3f29c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d29ecf23f0b046de720a25171c3b3980fa8a0a22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d29ecf23f0b046de720a25171c3b3980fa8a0a22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d29ecf23f0b046de720a25171c3b3980fa8a0a22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d29ecf23f0b046de720a25171c3b3980fa8a0a22/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7742b797b3fd7acea28a0a0bff9bbb06e7c2d0ea"}], "stats": {"total": 35, "additions": 1, "deletions": 34}, "files": [{"sha": "5eef5aaa40206b953ee14db24bed50fcef391bb6", "filename": "gcc/config/aarch64/aarch64-builtins.cc", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29ecf23f0b046de720a25171c3b3980fa8a0a22/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29ecf23f0b046de720a25171c3b3980fa8a0a22/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc?ref=d29ecf23f0b046de720a25171c3b3980fa8a0a22", "patch": "@@ -1300,8 +1300,6 @@ aarch64_get_attributes (unsigned int f, machine_mode mode)\n   return aarch64_add_attribute (\"leaf\", attrs);\n }\n \n-static bool aarch64_simd_builtins_initialized_p = false;\n-\n /* Due to the architecture not providing lane variant of the lane instructions\n    for fcmla we can't use the standard simd builtin expansion code, but we\n    still want the majority of the validation that would normally be done.  */\n@@ -1586,14 +1584,9 @@ handle_arm_neon_h (void)\n   aarch64_init_simd_intrinsics ();\n }\n \n-void\n+static void\n aarch64_init_simd_builtins (void)\n {\n-  if (aarch64_simd_builtins_initialized_p)\n-    return;\n-\n-  aarch64_simd_builtins_initialized_p = true;\n-\n   aarch64_init_simd_builtin_types ();\n \n   /* Strong-typing hasn't been implemented for all AdvSIMD builtin intrinsics."}, {"sha": "52ed4a218a87465c27b323a55f34187a5cf90416", "filename": "gcc/config/aarch64/aarch64-c.cc", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29ecf23f0b046de720a25171c3b3980fa8a0a22/gcc%2Fconfig%2Faarch64%2Faarch64-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29ecf23f0b046de720a25171c3b3980fa8a0a22/gcc%2Fconfig%2Faarch64%2Faarch64-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.cc?ref=d29ecf23f0b046de720a25171c3b3980fa8a0a22", "patch": "@@ -270,19 +270,6 @@ aarch64_pragma_target_parse (tree args, tree pop_target)\n   if (pop_target)\n     aarch64_save_restore_target_globals (pop_target);\n \n-  /* Initialize SIMD builtins if we haven't already.\n-     Set current_target_pragma to NULL for the duration so that\n-     the builtin initialization code doesn't try to tag the functions\n-     being built with the attributes specified by any current pragma, thus\n-     going into an infinite recursion.  */\n-  if (TARGET_SIMD)\n-    {\n-      tree saved_current_target_pragma = current_target_pragma;\n-      current_target_pragma = NULL;\n-      aarch64_init_simd_builtins ();\n-      current_target_pragma = saved_current_target_pragma;\n-    }\n-\n   return true;\n }\n "}, {"sha": "5ecdb8af8638b31345373f5679622d81a90ee52f", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29ecf23f0b046de720a25171c3b3980fa8a0a22/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29ecf23f0b046de720a25171c3b3980fa8a0a22/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=d29ecf23f0b046de720a25171c3b3980fa8a0a22", "patch": "@@ -907,7 +907,6 @@ void aarch64_sve_expand_vector_init (rtx, rtx);\n void aarch64_init_cumulative_args (CUMULATIVE_ARGS *, const_tree, rtx,\n \t\t\t\t   const_tree, unsigned, bool = false);\n void aarch64_init_expanders (void);\n-void aarch64_init_simd_builtins (void);\n void aarch64_emit_call_insn (rtx);\n void aarch64_register_pragmas (void);\n void aarch64_relayout_simd_types (void);"}, {"sha": "2311ad0e2b83f8c9ce110dd06b12f7699740f213", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d29ecf23f0b046de720a25171c3b3980fa8a0a22/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d29ecf23f0b046de720a25171c3b3980fa8a0a22/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=d29ecf23f0b046de720a25171c3b3980fa8a0a22", "patch": "@@ -18898,18 +18898,6 @@ aarch64_option_valid_attribute_p (tree fndecl, tree, tree args, int)\n   if (ret)\n     {\n       aarch64_override_options_internal (&global_options);\n-      /* Initialize SIMD builtins if we haven't already.\n-\t Set current_target_pragma to NULL for the duration so that\n-\t the builtin initialization code doesn't try to tag the functions\n-\t being built with the attributes specified by any current pragma, thus\n-\t going into an infinite recursion.  */\n-      if (TARGET_SIMD)\n-\t{\n-\t  tree saved_current_target_pragma = current_target_pragma;\n-\t  current_target_pragma = NULL;\n-\t  aarch64_init_simd_builtins ();\n-\t  current_target_pragma = saved_current_target_pragma;\n-\t}\n       new_target = build_target_option_node (&global_options,\n \t\t\t\t\t     &global_options_set);\n     }"}]}