{"sha": "1be49a38e45a80d1ee6854f262c94abeb621dfda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJlNDlhMzhlNDVhODBkMWVlNjg1NGYyNjJjOTRhYmViNjIxZGZkYQ==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@arm.com", "date": "2017-11-28T10:26:28Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2017-11-28T10:26:28Z"}, "message": "[Patch AArch64] Fixup floating point division with -march=armv8-a+nosimd\n\nThe canonical examples is :\n\n    double\n    foo (double x, double y)\n      {\n        return x / y;\n      }\n\n    with -march=armv8-a+nosimd\n\ngenerates a function that calls __divdf3. Ofcourse on AArch64 we don't\nhave any software floating point and this causes issues.\n\nThere is also a problem in +nosimd that has existed since the dawn of\ntime in the port with respect to long doubles (128 bit floating\npoint), here the ABI and the compiler expect the presence of the SIMD\nunit as these parameters are passed in the vector registers. Thus\nwhile +nosimd tries to prevent the use of SIMD instructions in the\ncompile we don't get this right as we end up using ldr qN / str qN\ninstructions and even there I think things go wrong in a simple\nexample that I tried.\n\nIs that sufficient to consider marking +nosimd as deprecated in GCC-8\nand remove this in a future release ?\n\nThat is not a subject for this patch but something separate but I\nwould like to put this into trunk and the release\nbranches. Bootstrapped and regression tested on my aarch64 desktop.\n\nOk ?\n\nFrom-SVN: r255194", "tree": {"sha": "664185aa9cc9a0330bfb6cd6bb4feda1006a735c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/664185aa9cc9a0330bfb6cd6bb4feda1006a735c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1be49a38e45a80d1ee6854f262c94abeb621dfda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1be49a38e45a80d1ee6854f262c94abeb621dfda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1be49a38e45a80d1ee6854f262c94abeb621dfda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1be49a38e45a80d1ee6854f262c94abeb621dfda/comments", "author": null, "committer": null, "parents": [{"sha": "3c88da0dd48b5ec43916614974e45d239236d9cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c88da0dd48b5ec43916614974e45d239236d9cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c88da0dd48b5ec43916614974e45d239236d9cf"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "641dc072afdd32cb8d7294196b3465c577db14fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1be49a38e45a80d1ee6854f262c94abeb621dfda/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1be49a38e45a80d1ee6854f262c94abeb621dfda/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1be49a38e45a80d1ee6854f262c94abeb621dfda", "patch": "@@ -1,3 +1,9 @@\n+2017-11-28  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\t* config/aarch64/aarch64.md (div<mode>3): Change check to TARGET_FLOAT.\n+\t* config/aarch64/aarch64.c (aarch64_emit_approx_div): Add early exit\n+\tfor vector mode and !TARGET_SIMD.\n+\n 2017-11-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree.def (SWITCH_EXPR): Change from 3 operand to 2 operand tree."}, {"sha": "98221bbba20f1ef2bea2bfc71f795ee38155298f", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1be49a38e45a80d1ee6854f262c94abeb621dfda/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1be49a38e45a80d1ee6854f262c94abeb621dfda/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=1be49a38e45a80d1ee6854f262c94abeb621dfda", "patch": "@@ -8442,6 +8442,9 @@ aarch64_emit_approx_div (rtx quo, rtx num, rtx den)\n       || !use_approx_division_p)\n     return false;\n \n+  if (!TARGET_SIMD && VECTOR_MODE_P (mode))\n+    return false;\n+\n   /* Estimate the approximate reciprocal.  */\n   rtx xrcp = gen_reg_rtx (mode);\n   emit_insn ((*get_recpe_type (mode)) (xrcp, den));"}, {"sha": "83e494250904bb18982b6b4919b953de6e1efa15", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1be49a38e45a80d1ee6854f262c94abeb621dfda/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1be49a38e45a80d1ee6854f262c94abeb621dfda/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=1be49a38e45a80d1ee6854f262c94abeb621dfda", "patch": "@@ -5093,7 +5093,7 @@\n  [(set (match_operand:GPF_F16 0 \"register_operand\")\n        (div:GPF_F16 (match_operand:GPF_F16 1 \"general_operand\")\n \t\t    (match_operand:GPF_F16 2 \"register_operand\")))]\n- \"TARGET_SIMD\"\n+ \"TARGET_FLOAT\"\n {\n   if (aarch64_emit_approx_div (operands[0], operands[1], operands[2]))\n     DONE;"}]}