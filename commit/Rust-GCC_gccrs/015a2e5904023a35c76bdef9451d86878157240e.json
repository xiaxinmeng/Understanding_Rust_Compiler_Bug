{"sha": "015a2e5904023a35c76bdef9451d86878157240e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE1YTJlNTkwNDAyM2EzNWM3NmJkZWY5NDUxZDg2ODc4MTU3MjQwZQ==", "commit": {"author": {"name": "Stephane Carrez", "email": "Stephane.Carrez@worldnet.fr", "date": "2002-03-15T22:22:56Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2002-03-15T22:22:56Z"}, "message": "m68hc11.md (\"negsi2\"): Optimize inline case.\n\n\t* config/m68hc11/m68hc11.md (\"negsi2\"): Optimize inline case.\n\t(\"neghi2\"): Tighten constraints.\n\t(\"one_cmplsi2\"): Optimize and simplify split.\n\t* config/m68hc11/larith.asm (__negsi2): Likewise for library.\n\nFrom-SVN: r50847", "tree": {"sha": "6f8ba87562c4c86c0e86a27e84ca4df9567383de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f8ba87562c4c86c0e86a27e84ca4df9567383de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/015a2e5904023a35c76bdef9451d86878157240e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/015a2e5904023a35c76bdef9451d86878157240e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/015a2e5904023a35c76bdef9451d86878157240e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/015a2e5904023a35c76bdef9451d86878157240e/comments", "author": null, "committer": null, "parents": [{"sha": "cd28557ca20fb296bad6f5e77b5f1dcd0ee6829c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd28557ca20fb296bad6f5e77b5f1dcd0ee6829c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd28557ca20fb296bad6f5e77b5f1dcd0ee6829c"}], "stats": {"total": 108, "additions": 63, "deletions": 45}, "files": [{"sha": "66c6da7d18cc36ef65b92b3e036b1152ec88de18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/015a2e5904023a35c76bdef9451d86878157240e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/015a2e5904023a35c76bdef9451d86878157240e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=015a2e5904023a35c76bdef9451d86878157240e", "patch": "@@ -1,3 +1,10 @@\n+2002-03-15  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n+\n+\t* config/m68hc11/m68hc11.md (\"negsi2\"): Optimize inline case.\n+\t(\"neghi2\"): Tighten constraints.\n+\t(\"one_cmplsi2\"): Optimize and simplify split.\n+\t* config/m68hc11/larith.asm (__negsi2): Likewise for library.\n+\n 2002-03-15  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n \n \t* config/m68hc11/m68hc11.md (\"logicalsi3_zexthi\"): Fix constraints"}, {"sha": "94e1596e05513c8d1e9e2ed2f8dce31da41e1176", "filename": "gcc/config/m68hc11/larith.asm", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/015a2e5904023a35c76bdef9451d86878157240e/gcc%2Fconfig%2Fm68hc11%2Flarith.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/015a2e5904023a35c76bdef9451d86878157240e/gcc%2Fconfig%2Fm68hc11%2Flarith.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Flarith.asm?ref=015a2e5904023a35c76bdef9451d86878157240e", "patch": "@@ -443,13 +443,14 @@ ___notdi2:\n ___negsi2:\n \tcomb\n \tcoma\n-\taddd\t#1\n \txgdx\n-\teorb\t#0xFF\n-\teora\t#0xFF\n-\tadcb\t#0\n-\tadca\t#0\n+\tcomb\n+\tcoma\n+\tinx\n \txgdx\n+\tbne\tdone\n+\tinx\n+done:\n \trts\n #endif\n "}, {"sha": "6f9c73b38f67771cd89c9581fb2f85591820dc70", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 50, "deletions": 40, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/015a2e5904023a35c76bdef9451d86878157240e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/015a2e5904023a35c76bdef9451d86878157240e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=015a2e5904023a35c76bdef9451d86878157240e", "patch": "@@ -4206,26 +4206,31 @@\n \n (define_insn \"negsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=D\")\n-\t(neg:SI (match_operand:SI 1 \"register_operand\" \"0\")))]\n+\t(neg:SI (match_operand:SI 1 \"general_operand\" \"0\")))]\n   \"\"\n   \"*\n {\n+  rtx ops[1];\n+\n   CC_STATUS_INIT;\n \n   /* With -Os or without -O, use a special library call.  */\n   if (optimize_size || optimize == 0)\n     return \\\"bsr\\\\t___negsi2\\\";\n \n-  /* 32-bit complement and add 1.  The comb/coma set the carry and they\n-     are smaller (use it for low-part).  The eorb/eora leave the carry\n-     unchanged but are bigger (use it for high-part).  */\n-  output_asm_insn (\\\"comb\\\\n\\\\tcoma\\\\n\\\\taddd\\\\t#1\\\\n\\\\txgdx\\\", operands);\n-  output_asm_insn (\\\"eorb\\\\t#0xFF\\\\n\\\\teora\\\\t#0xFF\\\", operands);\n-  return \\\"adcb\\\\t#0\\\\n\\\\tadca\\\\t#0\\\\n\\\\txgdx\\\";\n+  ops[0] = gen_label_rtx ();\n+\n+  /* 32-bit complement and add 1.  */\n+  output_asm_insn (\\\"comb\\\\n\\\\tcoma\\\\n\\\\txgdx\\\", operands);\n+  output_asm_insn (\\\"comb\\\\n\\\\tcoma\\\\n\\\\tinx\\\\n\\\\txgdx\\\", operands);\n+  output_asm_insn (\\\"bne\\\\t%l0\\\", ops);\n+  output_asm_insn (\\\"inx\\\", operands);\n+  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (ops[0]));\n+  return \\\"\\\";\n }\")\n \n (define_insn \"neghi2\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=d,d,*A\")\n+  [(set (match_operand:HI 0 \"register_operand\" \"=d,d,x*y\")\n \t(neg:HI (match_operand:HI 1 \"general_operand\" \"0,!duim,0\")))]\n   \"\"\n   \"@\n@@ -4255,57 +4260,62 @@\n    DONE;\")\n \n (define_insn \"one_cmplsi2\"\n-  [(set (match_operand:SI 0 \"non_push_operand\" \"=D\")\n-\t(not:SI (match_operand:SI 1 \"general_operand\" \"0\")))]\n+  [(set (match_operand:SI 0 \"non_push_operand\" \"=D,m,!u\")\n+\t(not:SI (match_operand:SI 1 \"general_operand\" \"0,m,0\")))\n+   (clobber (match_scratch:HI 2 \"=X,d,X\"))]\n   \"\"\n-  \"bsr\\\\t___one_cmplsi2\")\n+  \"@\n+   bsr\\\\t___one_cmplsi2\n+   #\n+   #\")\n \n (define_insn \"one_cmplhi2\"\n-  [(set (match_operand:HI 0 \"non_push_operand\" \"=d,m,!u,*A\")\n+  [(set (match_operand:HI 0 \"non_push_operand\" \"=d,m,*A,u\")\n \t(not:HI (match_operand:HI 1 \"general_operand\" \"0,0,0,0\")))]\n   \"\"\n   \"@\n    comb\\\\n\\\\tcoma\n    com\\\\t%b0\\\\n\\\\tcom\\\\t%h0\n-   com\\\\t%b0\\\\n\\\\tcom\\\\t%h0\n-   #\")\n+   #\n+   com\\\\t%b0\\\\n\\\\tcom\\\\t%h0\")\n \n (define_insn \"one_cmplqi2\"\n-  [(set (match_operand:QI 0 \"non_push_operand\" \"=d,m,!u,!*A\")\n+  [(set (match_operand:QI 0 \"non_push_operand\" \"=d,m,*A,u\")\n \t(not:QI (match_operand:QI 1 \"general_operand\" \"0,0,0,0\")))]\n   \"\"\n   \"@\n    comb\n    com\\\\t%b0\n-   com\\\\t%b0\n-   #\")\n+   #\n+   com\\\\t%b0\")\n \n (define_split /* \"*one_cmplsi2\" */\n-  [(set (match_operand:SI 0 \"non_push_operand\" \"=Dum\")\n-\t(not:SI (match_operand:SI 1 \"non_push_operand\" \"0\")))]\n+  [(set (match_operand:SI 0 \"non_push_operand\" \"\")\n+\t(not:SI (match_dup 0)))\n+   (clobber (match_scratch:HI 1 \"\"))]\n   \"z_replacement_completed == 2\n-   && (!D_REG_P (operands[0]) || (optimize && optimize_size == 0))\"\n-  [(set (reg:HI D_REGNUM) (not:HI (reg:HI D_REGNUM)))\n-   (parallel [(set (reg:HI X_REGNUM) (reg:HI D_REGNUM))\n-              (set (reg:HI D_REGNUM) (reg:HI X_REGNUM))])\n-   (set (reg:HI D_REGNUM) (not:HI (reg:HI D_REGNUM)))\n-   (parallel [(set (reg:HI X_REGNUM) (reg:HI D_REGNUM))\n-              (set (reg:HI D_REGNUM) (reg:HI X_REGNUM))])]\n-  \"\n-{\n-  /* The result pattern only works for D register.\n-     Generate 2 one_cmplhi2 instructions.  */\n-  if (!D_REG_P (operands[0]))\n-    {\n-      rtx ops[2];\n+   && (!X_REG_P (operands[0]) || (optimize && optimize_size == 0))\"\n+  [(set (match_dup 2) (not:HI (match_dup 2)))\n+   (set (match_dup 3) (not:HI (match_dup 3)))]\n+  \"operands[2] = m68hc11_gen_lowpart (HImode, operands[0]);\n+   operands[3] = m68hc11_gen_highpart (HImode, operands[0]);\")\n \n-      ops[0] = m68hc11_gen_lowpart (HImode, operands[0]);\n-      ops[1] = m68hc11_gen_highpart (HImode, operands[0]);\n-      emit_insn (gen_one_cmplhi2 (ops[0], ops[0]));\n-      emit_insn (gen_one_cmplhi2 (ops[1], ops[1]));\n-      DONE;\n-    }\n-}\")\n+(define_split /* \"*one_cmplsi2\" */\n+  [(set (match_operand:SI 0 \"non_push_operand\" \"\")\n+\t(not:SI (match_operand:SI 1 \"non_push_operand\" \"\")))\n+   (clobber (match_operand:HI 2 \"d_register_operand\" \"\"))]\n+  \"z_replacement_completed == 2\n+   && (!X_REG_P (operands[0]) || (optimize && optimize_size == 0))\"\n+  [(set (match_dup 2) (match_dup 3))\n+   (set (match_dup 2) (not:HI (match_dup 2)))\n+   (set (match_dup 4) (match_dup 2))\n+   (set (match_dup 2) (match_dup 5))\n+   (set (match_dup 2) (not:HI (match_dup 2)))\n+   (set (match_dup 6) (match_dup 2))]\n+  \"operands[3] = m68hc11_gen_lowpart (HImode, operands[1]);\n+   operands[5] = m68hc11_gen_highpart (HImode, operands[1]);\n+   operands[4] = m68hc11_gen_lowpart (HImode, operands[0]);\n+   operands[6] = m68hc11_gen_highpart (HImode, operands[0]);\")\n \n ;;--------------------------------------------------------------------\n ;;- arithmetic shifts"}]}