{"sha": "403b89a8748380041c49f82d1ad7dee67a4e4255", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAzYjg5YTg3NDgzODAwNDFjNDlmODJkMWFkN2RlZTY3YTRlNDI1NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-12-06T18:37:00Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-12-06T18:37:00Z"}, "message": "shared_ptr.h (shared_ptr<>::shared_ptr(_Tp1*, _Deleter, const _Alloc&), [...]): Take the allocator by value, per N3225.\n\n2010-12-06  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/shared_ptr.h (shared_ptr<>::shared_ptr(_Tp1*, _Deleter,\n\tconst _Alloc&), shared_ptr(nullptr_t, _Deleter, const _Alloc&)): Take\n\tthe allocator by value, per N3225.\n\t(shared_ptr<>::shared_ptr(_Sp_make_shared_tag, _Alloc, _Args&&...),\n\tallocate_shared(_Alloc, _Args&&...): Viceversa, take the allocator\n\tby const lvalue ref.\n\t* include/bits/shared_ptr_base.h (__shared_count<>::\n\t__shared_count(_Sp_make_shared_tag, _Tp*, _Alloc, _Args&&...),\n\t__shared_ptr<>::__shared_ptr(_Sp_make_shared_tag, _Alloc, _Args&&...),\n\t__allocate_shared(_Alloc, _Args&&...)): Likewise.\n\t(__shared_ptr<>::__shared_ptr(_Tp1*, _Deleter, const _Alloc&),\n\t__shared_ptr(nullptr_t, _Deleter, const _Alloc&), reset(_Tp1*,\n\t_Deleter, const _Alloc&)): Take the allocator by value.\n\t* testsuite/20_util/shared_ptr/cons/43820.cc: Adjust dg-error line\n\tnumbers.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Likewise.\n\nFrom-SVN: r167510", "tree": {"sha": "b9e903cb6d869e8a11d09c4485cbd07e3f658272", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9e903cb6d869e8a11d09c4485cbd07e3f658272"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/403b89a8748380041c49f82d1ad7dee67a4e4255", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/403b89a8748380041c49f82d1ad7dee67a4e4255", "html_url": "https://github.com/Rust-GCC/gccrs/commit/403b89a8748380041c49f82d1ad7dee67a4e4255", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/403b89a8748380041c49f82d1ad7dee67a4e4255/comments", "author": null, "committer": null, "parents": [{"sha": "1cd7d53fc3b9b2b747195874f584b3405299e62d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cd7d53fc3b9b2b747195874f584b3405299e62d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cd7d53fc3b9b2b747195874f584b3405299e62d"}], "stats": {"total": 78, "additions": 51, "deletions": 27}, "files": [{"sha": "410743ec6b76ddfb294fadefbd240b390564b238", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/403b89a8748380041c49f82d1ad7dee67a4e4255/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/403b89a8748380041c49f82d1ad7dee67a4e4255/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=403b89a8748380041c49f82d1ad7dee67a4e4255", "patch": "@@ -1,3 +1,22 @@\n+2010-12-06  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/shared_ptr.h (shared_ptr<>::shared_ptr(_Tp1*, _Deleter,\n+\tconst _Alloc&), shared_ptr(nullptr_t, _Deleter, const _Alloc&)): Take\n+\tthe allocator by value, per N3225.\n+\t(shared_ptr<>::shared_ptr(_Sp_make_shared_tag, _Alloc, _Args&&...),\n+\tallocate_shared(_Alloc, _Args&&...): Viceversa, take the allocator\n+\tby const lvalue ref.\n+\t* include/bits/shared_ptr_base.h (__shared_count<>::\n+\t__shared_count(_Sp_make_shared_tag, _Tp*, _Alloc, _Args&&...),\n+\t__shared_ptr<>::__shared_ptr(_Sp_make_shared_tag, _Alloc, _Args&&...),\n+\t__allocate_shared(_Alloc, _Args&&...)): Likewise.\n+\t(__shared_ptr<>::__shared_ptr(_Tp1*, _Deleter, const _Alloc&),\n+\t__shared_ptr(nullptr_t, _Deleter, const _Alloc&), reset(_Tp1*,\n+\t_Deleter, const _Alloc&)): Take the allocator by value.\n+\t* testsuite/20_util/shared_ptr/cons/43820.cc: Adjust dg-error line\n+\tnumbers.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Likewise.\n+\n 2010-12-06  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* acinclude.m4 (symvers_renaming): Also set if enable_symvers = no."}, {"sha": "6dc9c9ffa459c0087f8bf4c1d6682fe05988e000", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/403b89a8748380041c49f82d1ad7dee67a4e4255/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/403b89a8748380041c49f82d1ad7dee67a4e4255/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=403b89a8748380041c49f82d1ad7dee67a4e4255", "patch": "@@ -122,7 +122,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  __shared_ptr will release __p by calling __d(__p)\n        */\n       template<typename _Tp1, typename _Deleter>\n-\tshared_ptr(_Tp1* __p, _Deleter __d) : __shared_ptr<_Tp>(__p, __d) { }\n+\tshared_ptr(_Tp1* __p, _Deleter __d)\n+        : __shared_ptr<_Tp>(__p, __d) { }\n \n       /**\n        *  @brief  Construct a %shared_ptr that owns a null pointer\n@@ -157,8 +158,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  __shared_ptr will release __p by calling __d(__p)\n        */\n       template<typename _Tp1, typename _Deleter, typename _Alloc>\n-\tshared_ptr(_Tp1* __p, _Deleter __d, const _Alloc& __a)\n-\t: __shared_ptr<_Tp>(__p, __d, __a) { }\n+\tshared_ptr(_Tp1* __p, _Deleter __d, _Alloc __a)\n+\t: __shared_ptr<_Tp>(__p, __d, std::move(__a)) { }\n \n       /**\n        *  @brief  Construct a %shared_ptr that owns a null pointer\n@@ -176,8 +177,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  The last owner will call __d(__p)\n        */\n       template<typename _Deleter, typename _Alloc>\n-\tshared_ptr(nullptr_t __p, _Deleter __d, const _Alloc& __a)\n-\t: __shared_ptr<_Tp>(__p, __d, __a) { }\n+\tshared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)\n+\t: __shared_ptr<_Tp>(__p, __d, std::move(__a)) { }\n \n       // Aliasing constructor\n \n@@ -305,13 +306,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     private:\n       // This constructor is non-standard, it is used by allocate_shared.\n       template<typename _Alloc, typename... _Args>\n-\tshared_ptr(_Sp_make_shared_tag __tag, _Alloc __a, _Args&&... __args)\n+\tshared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,\n+\t\t   _Args&&... __args)\n \t: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)\n \t{ }\n \n       template<typename _Tp1, typename _Alloc, typename... _Args>\n \tfriend shared_ptr<_Tp1>\n-\tallocate_shared(_Alloc __a, _Args&&... __args);\n+\tallocate_shared(const _Alloc& __a, _Args&&... __args);\n     };\n \n   // 20.8.13.2.7 shared_ptr comparisons\n@@ -521,9 +523,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    */\n   template<typename _Tp, typename _Alloc, typename... _Args>\n     inline shared_ptr<_Tp>\n-    allocate_shared(_Alloc __a, _Args&&... __args)\n+    allocate_shared(const _Alloc& __a, _Args&&... __args)\n     {\n-      return shared_ptr<_Tp>(_Sp_make_shared_tag(), std::forward<_Alloc>(__a),\n+      return shared_ptr<_Tp>(_Sp_make_shared_tag(), __a,\n \t\t\t     std::forward<_Args>(__args)...);\n     }\n "}, {"sha": "da18147db5e39477703da01eec4d1a001114f37e", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/403b89a8748380041c49f82d1ad7dee67a4e4255/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/403b89a8748380041c49f82d1ad7dee67a4e4255/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=403b89a8748380041c49f82d1ad7dee67a4e4255", "patch": "@@ -331,7 +331,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       {\n \t_Deleter _M_del;         // copy constructor must not throw\n \t_My_Deleter(_Deleter __d, const _Alloc& __a)\n-\t  : _My_alloc_type(__a), _M_del(__d) { }\n+\t: _My_alloc_type(__a), _M_del(__d) { }\n       };\n \n     protected:\n@@ -504,7 +504,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n \n       template<typename _Tp, typename _Alloc, typename... _Args>\n-\t__shared_count(_Sp_make_shared_tag, _Tp*, _Alloc __a, _Args&&... __args)\n+\t__shared_count(_Sp_make_shared_tag, _Tp*, const _Alloc& __a,\n+\t\t       _Args&&... __args)\n \t: _M_pi(0)\n \t{\n \t  typedef _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp> _Sp_cp_type;\n@@ -774,8 +775,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n \n       template<typename _Tp1, typename _Deleter, typename _Alloc>\n-\t__shared_ptr(_Tp1* __p, _Deleter __d, const _Alloc& __a)\n-\t: _M_ptr(__p), _M_refcount(__p, __d, __a)\n+\t__shared_ptr(_Tp1* __p, _Deleter __d, _Alloc __a)\n+\t: _M_ptr(__p), _M_refcount(__p, __d, std::move(__a))\n \t{\n \t  __glibcxx_function_requires(_ConvertibleConcept<_Tp1*, _Tp*>)\n \t  // TODO requires _Deleter CopyConstructible and __d(__p) well-formed\n@@ -788,8 +789,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t{ }\n \n       template<typename _Deleter, typename _Alloc>\n-\t__shared_ptr(nullptr_t __p, _Deleter __d, const _Alloc& __a)\n-\t: _M_ptr(0), _M_refcount(__p, __d, __a)\n+        __shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)\n+\t: _M_ptr(0), _M_refcount(__p, __d, std::move(__a))\n \t{ }\n \n       template<typename _Tp1>\n@@ -924,8 +925,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       template<typename _Tp1, typename _Deleter, typename _Alloc>\n \tvoid\n-\treset(_Tp1* __p, _Deleter __d, const _Alloc& __a)\n-\t{ __shared_ptr(__p, __d, __a).swap(*this); }\n+        reset(_Tp1* __p, _Deleter __d, _Alloc __a)\n+        { __shared_ptr(__p, __d, std::move(__a)).swap(*this); }\n \n       // Allow class instantiation when _Tp is [cv-qual] void.\n       typename std::add_lvalue_reference<_Tp>::type\n@@ -978,7 +979,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     protected:\n       // This constructor is non-standard, it is used by allocate_shared.\n       template<typename _Alloc, typename... _Args>\n-\t__shared_ptr(_Sp_make_shared_tag __tag, _Alloc __a, _Args&&... __args)\n+\t__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,\n+\t\t     _Args&&... __args)\n \t: _M_ptr(), _M_refcount(__tag, (_Tp*)0, __a,\n \t\t\t\tstd::forward<_Args>(__args)...)\n \t{\n@@ -1001,7 +1003,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         };\n \n       template<typename _Alloc, typename... _Args>\n-\t__shared_ptr(_Sp_make_shared_tag __tag, _Alloc __a, _Args&&... __args)\n+\t__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,\n+\t\t     _Args&&... __args)\n \t: _M_ptr(), _M_refcount()\n         {\n \t  typedef typename _Alloc::template rebind<_Tp>::other _Alloc2;\n@@ -1025,7 +1028,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       template<typename _Tp1, _Lock_policy _Lp1, typename _Alloc,\n \t       typename... _Args>\n \tfriend __shared_ptr<_Tp1, _Lp1>\n-\t__allocate_shared(_Alloc __a, _Args&&... __args);\n+\t__allocate_shared(const _Alloc& __a, _Args&&... __args);\n \n     private:\n       void*\n@@ -1350,10 +1353,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   template<typename _Tp, _Lock_policy _Lp, typename _Alloc, typename... _Args>\n     inline __shared_ptr<_Tp, _Lp>\n-    __allocate_shared(_Alloc __a, _Args&&... __args)\n+    __allocate_shared(const _Alloc& __a, _Args&&... __args)\n     {\n-      return __shared_ptr<_Tp, _Lp>(_Sp_make_shared_tag(),\n-\t  std::forward<_Alloc>(__a), std::forward<_Args>(__args)...);\n+      return __shared_ptr<_Tp, _Lp>(_Sp_make_shared_tag(), __a,\n+\t\t\t\t    std::forward<_Args>(__args)...);\n     }\n \n   template<typename _Tp, _Lock_policy _Lp, typename... _Args>"}, {"sha": "538126f694e99e593bd23168fc5e04390a0d3fb2", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/43820.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/403b89a8748380041c49f82d1ad7dee67a4e4255/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/403b89a8748380041c49f82d1ad7dee67a4e4255/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820.cc?ref=403b89a8748380041c49f82d1ad7dee67a4e4255", "patch": "@@ -32,9 +32,9 @@ void test01()\n {\n   X* px = 0;\n   std::shared_ptr<X> p1(px);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 764 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 765 }\n \n   std::shared_ptr<X> p9(ap());  // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 856 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 857 }\n \n }"}, {"sha": "c511751f343b4fa17b9854d689682711b883b802", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/403b89a8748380041c49f82d1ad7dee67a4e4255/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/403b89a8748380041c49f82d1ad7dee67a4e4255/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=403b89a8748380041c49f82d1ad7dee67a4e4255", "patch": "@@ -41,8 +41,8 @@ main()\n   return 0;\n }\n \n-// { dg-warning \"note\" \"\" { target *-*-* } 350 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 1082 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 352 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 1085 }\n // { dg-warning \"note\" \"\" { target *-*-* } 465 }\n // { dg-warning \"note\" \"\" { target *-*-* } 585 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1027 }"}]}