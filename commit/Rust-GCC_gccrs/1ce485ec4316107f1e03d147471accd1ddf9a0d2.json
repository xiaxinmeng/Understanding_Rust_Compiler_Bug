{"sha": "1ce485ec4316107f1e03d147471accd1ddf9a0d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNlNDg1ZWM0MzE2MTA3ZjFlMDNkMTQ3NDcxYWNjZDFkZGY5YTBkMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@freesoft.cz", "date": "1999-11-21T00:04:15Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "1999-11-21T00:04:15Z"}, "message": "i386.md (negs?2): Rewrite to expanders...\n\n\t* i386.md (negs?2): Rewrite to expanders, new patterns and splitters\n\tto support integer registers and memory.\n\t(abss?2_integer): Likewise.\n\nFrom-SVN: r30596", "tree": {"sha": "012f60e71358ee620c783ef8c1914d8d033f2484", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/012f60e71358ee620c783ef8c1914d8d033f2484"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ce485ec4316107f1e03d147471accd1ddf9a0d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce485ec4316107f1e03d147471accd1ddf9a0d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ce485ec4316107f1e03d147471accd1ddf9a0d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce485ec4316107f1e03d147471accd1ddf9a0d2/comments", "author": null, "committer": null, "parents": [{"sha": "65c93378bc163bca5ad0eb887d065c905d862132", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65c93378bc163bca5ad0eb887d065c905d862132", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65c93378bc163bca5ad0eb887d065c905d862132"}], "stats": {"total": 221, "additions": 211, "deletions": 10}, "files": [{"sha": "5be7711f003099083f4a2d0014ef8cea74106b95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce485ec4316107f1e03d147471accd1ddf9a0d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce485ec4316107f1e03d147471accd1ddf9a0d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ce485ec4316107f1e03d147471accd1ddf9a0d2", "patch": "@@ -1,4 +1,7 @@\n Fri Nov 19 06:32:19 CET 1999  Jan Hubicka  <hubicka@freesoft.cz>\n+\t* i386.md (negs?2): Rewrite to expanders, new patterns and splitters\n+\tto support integer registers and memory.\n+\t(abss?2_integer): Likewise.\n \n \t* i386.h (enum reg_class): Add FLOAT_INT_REGS.\n \t(REG_CLASS_NAMES): Likewise."}, {"sha": "eae220a3bb863e677d8d413e0bbe357f13394570", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 208, "deletions": 10, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ce485ec4316107f1e03d147471accd1ddf9a0d2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ce485ec4316107f1e03d147471accd1ddf9a0d2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1ce485ec4316107f1e03d147471accd1ddf9a0d2", "patch": "@@ -4931,18 +4931,120 @@\n   \"neg{b}\\\\t%0\"\n   [(set_attr \"type\" \"negnot\")])\n \n+;; Changing of sign for FP values is duable using integer unit too.\n+\n (define_insn \"negsf2\"\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=frm\")\n+\t(neg:SF (match_operand:SF 1 \"nonimmediate_operand\" \"0\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_80387\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(neg:SF (match_operand:SF 1 \"register_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_80387 && FP_REGNO_P (REGNO (operands[0])) && reload_completed\"\n+  [(set (match_dup 0)\n+\t(neg:SF (match_dup 1)))]\n+  \"\")\n+\n+(define_split\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(neg:SF (match_operand:SF 1 \"register_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_80387 && reload_completed && !FP_REGNO_P (REGNO (operands[0]))\"\n+  [(parallel [(set (match_dup 0) (xor:SI (match_dup 0) (match_dup 1)))\n+\t      (clobber (reg:CC 17))])]\n+  \"operands[1] = GEN_INT (0x80000000);\n+   operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]));\")\n+\n+(define_split\n+  [(set (match_operand 0 \"memory_operand\" \"\")\n+\t(neg (match_operand 1 \"memory_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_80387 && reload_completed && FLOAT_MODE_P (GET_MODE (operands[0]))\"\n+  [(parallel [(set (match_dup 0) (xor:QI (match_dup 0) (match_dup 1)))\n+\t      (clobber (reg:CC 17))])]\n+  \"\n+{\n+  int size = GET_MODE_SIZE (GET_MODE (operands[1]));\n+\n+  /* XFmode's size is 12, but only 10 bytes are used.  */\n+  if (size == 12)\n+    size = 10;\n+  operands[0] = gen_rtx_MEM (QImode, XEXP (operands[0], 0));\n+  operands[0] = adj_offsettable_operand (operands[0], size - 1);\n+  operands[1] = GEN_INT (0x80);\n+}\")\n+\n+(define_insn \"negdf2\"\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=frm\")\n+\t(neg:DF (match_operand:DF 1 \"nonimmediate_operand\" \"0\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_80387\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(neg:DF (match_operand:DF 1 \"register_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_80387 && FP_REGNO_P (REGNO (operands[0])) && reload_completed\"\n+  [(set (match_dup 0)\n+\t(neg:DF (match_dup 1)))]\n+  \"\")\n+\n+(define_split\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(neg:DF (match_operand:DF 1 \"register_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_80387 && reload_completed && !FP_REGNO_P (REGNO (operands[0]))\"\n+  [(parallel [(set (match_dup 3) (xor:SI (match_dup 3) (match_dup 4)))\n+\t      (clobber (reg:CC 17))])]\n+  \"operands[4] = GEN_INT (0x80000000);\n+   split_di (operands+0, 1, operands+2, operands+3);\")\n+\n+(define_insn \"negxf2\"\n+  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=frm\")\n+\t(neg:XF (match_operand:XF 1 \"nonimmediate_operand\" \"0\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_80387\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t(neg:XF (match_operand:XF 1 \"register_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_80387 && FP_REGNO_P (REGNO (operands[0])) && reload_completed\"\n+  [(set (match_dup 0)\n+\t(neg:XF (match_dup 1)))]\n+  \"\")\n+\n+(define_split\n+  [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t(neg:XF (match_operand:XF 1 \"register_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_80387 && reload_completed && !FP_REGNO_P (REGNO (operands[0]))\"\n+  [(parallel [(set (match_dup 0) (xor:SI (match_dup 0) (match_dup 1)))\n+\t      (clobber (reg:CC 17))])]\n+  \"operands[1] = GEN_INT (0x8000);\n+   operands[0] = gen_rtx_REG (SImode, true_regnum (operands[0]) + 2);\")\n+\n+;; Conditionize these after reload. If they matches before reload, we \n+;; lose the clobber and ability to use integer instructions.\n+\n+(define_insn \"*negsf2_1\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(neg:SF (match_operand:SF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && reload_completed\"\n   \"fchs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"ppro_uops\" \"few\")])\n \n-(define_insn \"negdf2\"\n+(define_insn \"*negdf2_1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(neg:DF (match_operand:DF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && reload_completed\"\n   \"fchs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"ppro_uops\" \"few\")])\n@@ -4956,10 +5058,10 @@\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"ppro_uops\" \"few\")])\n \n-(define_insn \"negxf2\"\n+(define_insn \"*negxf2_1\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(neg:XF (match_operand:XF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && reload_completed\"\n   \"fchs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"ppro_uops\" \"few\")])\n@@ -4985,16 +5087,112 @@\n ;; Absolute value instructions\n \n (define_insn \"abssf2\"\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=frm\")\n+\t(abs:SF (match_operand:SF 1 \"nonimmediate_operand\" \"0\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_80387\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(abs:SF (match_operand:SF 1 \"register_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_80387 && FP_REGNO_P (REGNO (operands[0]))\"\n+  [(set (match_dup 0)\n+\t(abs:SF (match_dup 1)))]\n+  \"\")\n+\n+(define_split\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(abs:SF (match_operand:SF 1 \"register_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_80387 && reload_completed && !FP_REGNO_P (REGNO (operands[0]))\"\n+  [(parallel [(set (match_dup 0) (and:SI (match_dup 0) (match_dup 1)))\n+\t      (clobber (reg:CC 17))])]\n+  \"operands[1] = GEN_INT (~0x80000000);\n+   operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]));\")\n+\n+(define_split\n+  [(set (match_operand 0 \"memory_operand\" \"\")\n+\t(abs (match_operand 1 \"memory_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_80387 && reload_completed && FLOAT_MODE_P (GET_MODE (operands[0]))\"\n+  [(parallel [(set (match_dup 0) (and:QI (match_dup 0) (match_dup 1)))\n+\t      (clobber (reg:CC 17))])]\n+  \"\n+{\n+  int size = GET_MODE_SIZE (GET_MODE (operands[1]));\n+\n+  /* XFmode's size is 12, but only 10 bytes are used.  */\n+  if (size == 12)\n+    size = 10;\n+  operands[0] = gen_rtx_MEM (QImode, XEXP (operands[0], 0));\n+  operands[0] = adj_offsettable_operand (operands[0], size - 1);\n+  operands[1] = GEN_INT (~0x80);\n+}\")\n+\n+(define_insn \"absdf2\"\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=frm\")\n+\t(abs:DF (match_operand:DF 1 \"nonimmediate_operand\" \"0\")))]\n+  \"TARGET_80387\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(abs:DF (match_operand:DF 1 \"register_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_80387 && FP_REGNO_P (REGNO (operands[0])) && reload_completed\"\n+  [(set (match_dup 0)\n+\t(abs:DF (match_dup 1)))]\n+  \"\")\n+\n+(define_split\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(abs:DF (match_operand:DF 1 \"register_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_80387 && reload_completed && !FP_REGNO_P (REGNO (operands[0]))\"\n+  [(parallel [(set (match_dup 3) (and:SI (match_dup 3) (match_dup 4)))\n+\t      (clobber (reg:CC 17))])]\n+  \"operands[4] = GEN_INT (~0x80000000);\n+   split_di (operands+0, 1, operands+2, operands+3);\")\n+\n+(define_insn \"absxf2\"\n+  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=frm\")\n+\t(abs:XF (match_operand:XF 1 \"nonimmediate_operand\" \"0\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_80387\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t(abs:XF (match_operand:XF 1 \"register_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_80387 && FP_REGNO_P (REGNO (operands[0])) && reload_completed\"\n+  [(set (match_dup 0)\n+\t(abs:XF (match_dup 1)))]\n+  \"\")\n+\n+(define_split\n+  [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t(abs:XF (match_operand:XF 1 \"register_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_80387 && reload_completed && !FP_REGNO_P (REGNO (operands[0]))\"\n+  [(parallel [(set (match_dup 0) (and:SI (match_dup 0) (match_dup 1)))\n+\t      (clobber (reg:CC 17))])]\n+  \"operands[1] = GEN_INT (~0x8000);\n+   operands[0] = gen_rtx_REG (SImode, true_regnum (operands[0]) + 2);\")\n+\n+(define_insn \"*abssf2_1\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(abs:SF (match_operand:SF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && reload_completed\"\n   \"fabs\"\n   [(set_attr \"type\" \"fsgn\")])\n \n-(define_insn \"absdf2\"\n+(define_insn \"*absdf2_1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(abs:DF (match_operand:DF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && reload_completed\"\n   \"fabs\"\n   [(set_attr \"type\" \"fsgn\")])\n \n@@ -5006,10 +5204,10 @@\n   \"fabs\"\n   [(set_attr \"type\" \"fsgn\")])\n \n-(define_insn \"absxf2\"\n+(define_insn \"*absxf2_1\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(abs:XF (match_operand:XF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && reload_completed\"\n   \"fabs\"\n   [(set_attr \"type\" \"fsgn\")])\n "}]}