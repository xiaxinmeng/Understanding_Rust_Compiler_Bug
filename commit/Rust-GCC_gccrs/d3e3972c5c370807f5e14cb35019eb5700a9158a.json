{"sha": "d3e3972c5c370807f5e14cb35019eb5700a9158a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNlMzk3MmM1YzM3MDgwN2Y1ZTE0Y2IzNTAxOWViNTcwMGE5MTU4YQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-04-26T18:31:55Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-04-26T18:31:55Z"}, "message": "dwarf2out.c (dw_cfi_oprnd_struct, [...]): Constify a char*.\n\n        * dwarf2out.c (dw_cfi_oprnd_struct, dw_fde_struct, add_fde_cfi,\n        reg_save, dwarf2out_frame_debug_expr, dwarf2out_def_cfa,\n        dwarf2out_window_save, dwarf2out_args_size, dwarf2out_reg_save,\n        dwarf2out_return_save, dwarf2out_return_reg,\n        dwarf2out_stack_adjust, dwarf2out_frame_debug, primary_filename,\n        add_AT_lbl_id, add_AT_lbl_offset, type_tag, decl_start_label,\n        gen_compile_unit_die, dwarf2out_init): Constify a char*.\n\n        * dwarf2out.h (dwarf2out_init): Likewise.\n\n        * dwarfout.c (filename_entry, primary_filename, last_filename,\n        type_tag, output_compile_unit_die, dwarfout_init): Likewise.\n\n        * tree.h (dwarf2out_def_cfa, dwarf2out_window_save,\n        dwarf2out_args_size, dwarf2out_reg_save, dwarf2out_return_save,\n        dwarf2out_return_reg): Likewise.\n\nFrom-SVN: r33448", "tree": {"sha": "c9e4454c9cb961ae70c865224f09030767b63ef4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9e4454c9cb961ae70c865224f09030767b63ef4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3e3972c5c370807f5e14cb35019eb5700a9158a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3e3972c5c370807f5e14cb35019eb5700a9158a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3e3972c5c370807f5e14cb35019eb5700a9158a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3e3972c5c370807f5e14cb35019eb5700a9158a/comments", "author": null, "committer": null, "parents": [{"sha": "09acb3e19dcf5a220586cf2f160a21a3f1ebe63f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09acb3e19dcf5a220586cf2f160a21a3f1ebe63f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09acb3e19dcf5a220586cf2f160a21a3f1ebe63f"}], "stats": {"total": 128, "additions": 73, "deletions": 55}, "files": [{"sha": "faf97d64793d52c9bdf283066596ff742cc779bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e3972c5c370807f5e14cb35019eb5700a9158a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e3972c5c370807f5e14cb35019eb5700a9158a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d3e3972c5c370807f5e14cb35019eb5700a9158a", "patch": "@@ -1,3 +1,22 @@\n+2000-04-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* dwarf2out.c (dw_cfi_oprnd_struct, dw_fde_struct, add_fde_cfi,\n+\treg_save, dwarf2out_frame_debug_expr, dwarf2out_def_cfa,\n+\tdwarf2out_window_save, dwarf2out_args_size, dwarf2out_reg_save,\n+\tdwarf2out_return_save, dwarf2out_return_reg,\n+\tdwarf2out_stack_adjust, dwarf2out_frame_debug, primary_filename,\n+\tadd_AT_lbl_id, add_AT_lbl_offset, type_tag, decl_start_label,\n+\tgen_compile_unit_die, dwarf2out_init): Constify a char*.\n+\n+\t* dwarf2out.h (dwarf2out_init): Likewise.\n+\n+\t* dwarfout.c (filename_entry, primary_filename, last_filename,\n+\ttype_tag, output_compile_unit_die, dwarfout_init): Likewise.\n+\n+\t* tree.h (dwarf2out_def_cfa, dwarf2out_window_save,\n+\tdwarf2out_args_size, dwarf2out_reg_save, dwarf2out_return_save,\n+\tdwarf2out_return_reg): Likewise.\n+\n 2000-04-26  Andreas Jaeger  <aj@suse.de>\n \n         * extend.texi (Function Attributes): Fix description of pure"}, {"sha": "bf93491cfc02577b14d10af81021c54b53a97007", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e3972c5c370807f5e14cb35019eb5700a9158a/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e3972c5c370807f5e14cb35019eb5700a9158a/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=d3e3972c5c370807f5e14cb35019eb5700a9158a", "patch": "@@ -104,7 +104,7 @@ typedef union dw_cfi_oprnd_struct\n {\n   unsigned long dw_cfi_reg_num;\n   long int dw_cfi_offset;\n-  char *dw_cfi_addr;\n+  const char *dw_cfi_addr;\n }\n dw_cfi_oprnd;\n \n@@ -125,9 +125,9 @@ dw_cfi_node;\n \n typedef struct dw_fde_struct\n {\n-  char *dw_fde_begin;\n-  char *dw_fde_current_label;\n-  char *dw_fde_end;\n+  const char *dw_fde_begin;\n+  const char *dw_fde_current_label;\n+  const char *dw_fde_end;\n   dw_cfi_ref dw_fde_cfi;\n   int nothrow;\n }\n@@ -221,18 +221,18 @@ static unsigned long size_of_uleb128\tPARAMS ((unsigned long));\n static unsigned long size_of_sleb128\tPARAMS ((long));\n static void output_uleb128\t\tPARAMS ((unsigned long));\n static void output_sleb128\t\tPARAMS ((long));\n-static void add_fde_cfi\t\t\tPARAMS ((char *, dw_cfi_ref));\n+static void add_fde_cfi\t\t\tPARAMS ((const char *, dw_cfi_ref));\n static void lookup_cfa_1\t\tPARAMS ((dw_cfi_ref, unsigned long *,\n \t\t\t\t\t\t long *));\n static void lookup_cfa\t\t\tPARAMS ((unsigned long *, long *));\n-static void reg_save\t\t\tPARAMS ((char *, unsigned, unsigned,\n-\t\t\t\t\t\t long));\n+static void reg_save\t\t\tPARAMS ((const char *, unsigned,\n+\t\t\t\t\t\t unsigned, long));\n static void initial_return_save\t\tPARAMS ((rtx));\n static void output_cfi\t\t\tPARAMS ((dw_cfi_ref, dw_fde_ref));\n static void output_call_frame_info\tPARAMS ((int));\n static unsigned int reg_number\t\tPARAMS ((rtx));\n static void dwarf2out_stack_adjust\tPARAMS ((rtx));\n-static void dwarf2out_frame_debug_expr\tPARAMS ((rtx, char *));\n+static void dwarf2out_frame_debug_expr\tPARAMS ((rtx, const char *));\n \n /* Definitions of defaults for assembler-dependent names of various\n    pseudo-ops and section names.\n@@ -715,7 +715,7 @@ dwarf2out_cfi_label ()\n \n static void\n add_fde_cfi (label, cfi)\n-     register char *label;\n+     register const char *label;\n      register dw_cfi_ref cfi;\n {\n   if (label)\n@@ -815,7 +815,7 @@ static long old_args_size;\n \n void\n dwarf2out_def_cfa (label, reg, offset)\n-     register char *label;\n+     register const char *label;\n      register unsigned reg;\n      register long offset;\n {\n@@ -867,7 +867,7 @@ dwarf2out_def_cfa (label, reg, offset)\n \n static void\n reg_save (label, reg, sreg, offset)\n-     register char * label;\n+     register const char *label;\n      register unsigned reg;\n      register unsigned sreg;\n      register long offset;\n@@ -916,7 +916,7 @@ reg_save (label, reg, sreg, offset)\n \n void\n dwarf2out_window_save (label)\n-     register char * label;\n+     register const char *label;\n {\n   register dw_cfi_ref cfi = new_cfi ();\n   cfi->dw_cfi_opc = DW_CFA_GNU_window_save;\n@@ -928,7 +928,7 @@ dwarf2out_window_save (label)\n \n void\n dwarf2out_args_size (label, size)\n-     char *label;\n+     const char *label;\n      long size;\n {\n   register dw_cfi_ref cfi;\n@@ -948,7 +948,7 @@ dwarf2out_args_size (label, size)\n \n void\n dwarf2out_reg_save (label, reg, offset)\n-     register char * label;\n+     register const char *label;\n      register unsigned reg;\n      register long offset;\n {\n@@ -960,7 +960,7 @@ dwarf2out_reg_save (label, reg, offset)\n \n void\n dwarf2out_return_save (label, offset)\n-     register char * label;\n+     register const char *label;\n      register long offset;\n {\n   reg_save (label, DWARF_FRAME_RETURN_COLUMN, -1, offset);\n@@ -971,7 +971,7 @@ dwarf2out_return_save (label, offset)\n \n void\n dwarf2out_return_reg (label, sreg)\n-     register char * label;\n+     register const char *label;\n      register unsigned sreg;\n {\n   reg_save (label, DWARF_FRAME_RETURN_COLUMN, sreg, 0);\n@@ -1041,7 +1041,7 @@ dwarf2out_stack_adjust (insn)\n      rtx insn;\n {\n   long offset;\n-  char *label;\n+  const char *label;\n \n   if (! asynchronous_exceptions && GET_CODE (insn) == CALL_INSN)\n     {\n@@ -1146,7 +1146,7 @@ static long cfa_temp_value;\n static void\n dwarf2out_frame_debug_expr (expr, label)\n      rtx expr;\n-     char *label;\n+     const char *label;\n {\n   rtx src, dest;\n   long offset;\n@@ -1353,7 +1353,7 @@ void\n dwarf2out_frame_debug (insn)\n      rtx insn;\n {\n-  char *label;\n+  const char *label;\n   rtx src;\n \n   if (insn == NULL_RTX)\n@@ -2229,7 +2229,7 @@ static unsigned file_table_in_use;\n \n /* Local pointer to the name of the main input file.  Initialized in\n    dwarf2out_init.  */\n-static char *primary_filename;\n+static const char *primary_filename;\n \n /* A pointer to the base of a table of references to DIE's that describe\n    declarations.  The table is indexed by DECL_UID() which is a unique\n@@ -2406,10 +2406,10 @@ static void add_AT_addr\t\t\tPARAMS ((dw_die_ref,\n \t\t\t\t\t\t rtx));\n static void add_AT_lbl_id\t\tPARAMS ((dw_die_ref,\n \t\t\t\t\t\t enum dwarf_attribute,\n-\t\t\t\t\t\t char *));\n+\t\t\t\t\t\t const char *));\n static void add_AT_lbl_offset\t\tPARAMS ((dw_die_ref,\n \t\t\t\t\t\t enum dwarf_attribute,\n-\t\t\t\t\t\t char *));\n+\t\t\t\t\t\t const char *));\n static dw_attr_ref get_AT\t\tPARAMS ((dw_die_ref,\n \t\t\t\t\t\t enum dwarf_attribute));\n static const char *get_AT_low_pc\tPARAMS ((dw_die_ref));\n@@ -2502,10 +2502,10 @@ static dw_die_ref scope_die_for\t\tPARAMS ((tree, dw_die_ref));\n static void pop_decl_scope\t\tPARAMS ((void));\n static void add_type_attribute\t\tPARAMS ((dw_die_ref, tree, int, int,\n \t\t\t\t\t\t dw_die_ref));\n-static char *type_tag\t\t\tPARAMS ((tree));\n+static const char *type_tag\t        PARAMS ((tree));\n static tree member_declared_type\tPARAMS ((tree));\n #if 0\n-static char *decl_start_label\t\tPARAMS ((tree));\n+static const char *decl_start_label\tPARAMS ((tree));\n #endif\n static void gen_array_type_die\t\tPARAMS ((tree, dw_die_ref));\n static void gen_set_type_die\t\tPARAMS ((tree, dw_die_ref));\n@@ -3767,7 +3767,7 @@ static inline void\n add_AT_lbl_id (die, attr_kind, lbl_id)\n      register dw_die_ref die;\n      register enum dwarf_attribute attr_kind;\n-     register char *lbl_id;\n+     register const char *lbl_id;\n {\n   register dw_attr_ref attr = (dw_attr_ref) xmalloc (sizeof (dw_attr_node));\n \n@@ -3784,7 +3784,7 @@ static inline void\n add_AT_lbl_offset (die, attr_kind, label)\n      register dw_die_ref die;\n      register enum dwarf_attribute attr_kind;\n-     register char *label;\n+     register const char *label;\n {\n   register dw_attr_ref attr = (dw_attr_ref) xmalloc (sizeof (dw_attr_node));\n \n@@ -7634,11 +7634,11 @@ add_type_attribute (object_die, type, decl_const, decl_volatile, context_die)\n    a pointer to the (string) tag name for the given type, or zero if the type\n    was declared without a tag.  */\n \n-static char *\n+static const char *\n type_tag (type)\n      register tree type;\n {\n-  register char *name = 0;\n+  register const char *name = 0;\n \n   if (TYPE_NAME (type) != 0)\n     {\n@@ -7679,12 +7679,12 @@ member_declared_type (member)\n    from the DECL_NAME name used in the source file.  */\n \n #if 0\n-static char *\n+static const char *\n decl_start_label (decl)\n      register tree decl;\n {\n   rtx x;\n-  char *fnname;\n+  const char *fnname;\n   x = DECL_RTL (decl);\n   if (GET_CODE (x) != MEM)\n     abort ();\n@@ -8674,7 +8674,7 @@ gen_compile_unit_die (filename)\n {\n   register dw_die_ref die;\n   char producer[250];\n-  char *wd = getpwd ();\n+  const char *wd = getpwd ();\n   int language;\n \n   die = new_die (DW_TAG_compile_unit, NULL);\n@@ -9835,7 +9835,7 @@ dwarf2out_undef (lineno, buffer)\n void\n dwarf2out_init (asm_out_file, main_input_filename)\n      register FILE *asm_out_file;\n-     register char *main_input_filename;\n+     register const char *main_input_filename;\n {\n   /* Remember the name of the primary input file.  */\n   primary_filename = main_input_filename;"}, {"sha": "7496f9dcdf2db6ce800ec06870539125d637c82b", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e3972c5c370807f5e14cb35019eb5700a9158a/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e3972c5c370807f5e14cb35019eb5700a9158a/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=d3e3972c5c370807f5e14cb35019eb5700a9158a", "patch": "@@ -18,8 +18,7 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-extern void dwarf2out_init \t\tPARAMS ((FILE *asm_out_file, \n-\t\t\t\t\t\t char *main_input_filename));\n+extern void dwarf2out_init \t\tPARAMS ((FILE *, const char *));\n extern void dwarf2out_finish\t\tPARAMS ((void));\n \n extern void dwarf2out_define\t\tPARAMS ((unsigned, const char *));"}, {"sha": "a8b2a4ae5c10981317d47ac166dc8259c7c165b3", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e3972c5c370807f5e14cb35019eb5700a9158a/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e3972c5c370807f5e14cb35019eb5700a9158a/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=d3e3972c5c370807f5e14cb35019eb5700a9158a", "patch": "@@ -161,7 +161,7 @@ extern int flag_traditional;\n \n struct filename_entry {\n   unsigned\tnumber;\n-  char *\tname;\n+  const char *\tname;\n };\n \n typedef struct filename_entry filename_entry;\n@@ -189,11 +189,11 @@ static unsigned ft_entries;\n /* Local pointer to the name of the main input file.  Initialized in\n    dwarfout_init.  */\n \n-static char *primary_filename;\n+static const char *primary_filename;\n \n /* Pointer to the most recent filename for which we produced some line info.  */\n \n-static char *last_filename;\n+static const char *last_filename;\n \n /* Counter to generate unique names for DIEs.  */\n \n@@ -379,7 +379,7 @@ static inline void src_coords_attribute PARAMS ((unsigned, unsigned));\n static inline void pure_or_virtual_attribute PARAMS ((tree));\n static void name_and_src_coords_attributes PARAMS ((tree));\n static void type_attribute\t\tPARAMS ((tree, int, int));\n-static char *type_tag\t\t\tPARAMS ((tree));\n+static const char *type_tag\t\tPARAMS ((tree));\n static inline void dienum_push\t\tPARAMS ((void));\n static inline void dienum_pop\t\tPARAMS ((void));\n static inline tree member_declared_type PARAMS ((tree));\n@@ -3136,11 +3136,11 @@ type_attribute (type, decl_const, decl_volatile)\n    a pointer to the (string) tag name for the given type, or zero if the\n    type was declared without a tag.  */\n \n-static char *\n+static const char *\n type_tag (type)\n      register tree type;\n {\n-  register char *name = 0;\n+  register const char *name = 0;\n \n   if (TYPE_NAME (type) != 0)\n     {\n@@ -3689,7 +3689,7 @@ static void\n output_compile_unit_die (arg)\n      register void *arg;\n {\n-  register char *main_input_filename = arg;\n+  register const char *main_input_filename = arg;\n \n   ASM_OUTPUT_DWARF_TAG (asm_out_file, TAG_compile_unit);\n   sibling_attribute ();\n@@ -3722,7 +3722,7 @@ output_compile_unit_die (arg)\n   last_filename = xstrdup (main_input_filename);\n \n   {\n-    char *wd = getpwd ();\n+    const char *wd = getpwd ();\n     if (wd)\n       comp_dir_attribute (wd);\n   }\n@@ -5783,7 +5783,7 @@ dwarfout_init (asm_out_file, main_input_filename)\n \t  ASM_OUTPUT_PUSH_SECTION (asm_out_file, SFNAMES_SECTION);\n \t  ASM_OUTPUT_LABEL (asm_out_file, SFNAMES_BEGIN_LABEL);\n \t  {\n-\t    register char *pwd = getpwd ();\n+\t    register const char *pwd = getpwd ();\n \t    register char *dirname;\n \n \t    if (!pwd)"}, {"sha": "0fe6ab71e36ebbcd2b09f8c3f20c2a60f533d2fc", "filename": "gcc/tree.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e3972c5c370807f5e14cb35019eb5700a9158a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e3972c5c370807f5e14cb35019eb5700a9158a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d3e3972c5c370807f5e14cb35019eb5700a9158a", "patch": "@@ -2303,28 +2303,28 @@ extern char *dwarf2out_cfi_label\tPARAMS ((void));\n \n /* Entry point to update the canonical frame address (CFA).  */\n \n-extern void dwarf2out_def_cfa\t\tPARAMS ((char *, unsigned, long));\n+extern void dwarf2out_def_cfa\t\tPARAMS ((const char *, unsigned, long));\n \n /* Add the CFI for saving a register window.  */\n \n-extern void dwarf2out_window_save\tPARAMS ((char *));\n+extern void dwarf2out_window_save\tPARAMS ((const char *));\n \n /* Add a CFI to update the running total of the size of arguments pushed\n    onto the stack.  */\n \n-extern void dwarf2out_args_size\t\tPARAMS ((char *, long));\n+extern void dwarf2out_args_size\t\tPARAMS ((const char *, long));\n \n /* Entry point for saving a register to the stack.  */\n \n-extern void dwarf2out_reg_save\t\tPARAMS ((char *, unsigned, long));\n+extern void dwarf2out_reg_save\t\tPARAMS ((const char *, unsigned, long));\n \n /* Entry point for saving the return address in the stack.  */\n \n-extern void dwarf2out_return_save\tPARAMS ((char *, long));\n+extern void dwarf2out_return_save\tPARAMS ((const char *, long));\n \n /* Entry point for saving the return address in a register.  */\n \n-extern void dwarf2out_return_reg\tPARAMS ((char *, unsigned));\n+extern void dwarf2out_return_reg\tPARAMS ((const char *, unsigned));\n \n /* Output a marker (i.e. a label) for the beginning of a function, before\n    the prologue.  */\n@@ -2637,28 +2637,28 @@ extern char *dwarf2out_cfi_label\tPARAMS ((void));\n \n /* Entry point to update the canonical frame address (CFA).  */\n \n-extern void dwarf2out_def_cfa\t\tPARAMS ((char *, unsigned, long));\n+extern void dwarf2out_def_cfa\t\tPARAMS ((const char *, unsigned, long));\n \n /* Add the CFI for saving a register window.  */\n \n-extern void dwarf2out_window_save\tPARAMS ((char *));\n+extern void dwarf2out_window_save\tPARAMS ((const char *));\n \n /* Add a CFI to update the running total of the size of arguments pushed\n    onto the stack.  */\n \n-extern void dwarf2out_args_size\t\tPARAMS ((char *, long));\n+extern void dwarf2out_args_size\t\tPARAMS ((const char *, long));\n \n /* Entry point for saving a register to the stack.  */\n \n-extern void dwarf2out_reg_save\t\tPARAMS ((char *, unsigned, long));\n+extern void dwarf2out_reg_save\t\tPARAMS ((const char *, unsigned, long));\n \n /* Entry point for saving the return address in the stack.  */\n \n-extern void dwarf2out_return_save\tPARAMS ((char *, long));\n+extern void dwarf2out_return_save\tPARAMS ((const char *, long));\n \n /* Entry point for saving the return address in a register.  */\n \n-extern void dwarf2out_return_reg\tPARAMS ((char *, unsigned));\n+extern void dwarf2out_return_reg\tPARAMS ((const char *, unsigned));\n \n /* Output a marker (i.e. a label) for the beginning of a function, before\n    the prologue.  */"}]}