{"sha": "c9f99b6a232ac41d3ea3270e2886bc9552d2d9a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlmOTliNmEyMzJhYzQxZDNlYTMyNzBlMjg4NmJjOTU1MmQyZDlhNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1996-10-22T22:30:50Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1996-10-22T22:30:50Z"}, "message": "Fix MIPS EABI when using -mips1 or -msoft-float\n\nFrom-SVN: r12998", "tree": {"sha": "061d71279a1860af690d6b95291d458ae88ba16e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/061d71279a1860af690d6b95291d458ae88ba16e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9f99b6a232ac41d3ea3270e2886bc9552d2d9a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9f99b6a232ac41d3ea3270e2886bc9552d2d9a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9f99b6a232ac41d3ea3270e2886bc9552d2d9a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9f99b6a232ac41d3ea3270e2886bc9552d2d9a4/comments", "author": null, "committer": null, "parents": [{"sha": "27eb1ab6e7a9e988d3ca7fb9c80f14a3f8eec516", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27eb1ab6e7a9e988d3ca7fb9c80f14a3f8eec516", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27eb1ab6e7a9e988d3ca7fb9c80f14a3f8eec516"}], "stats": {"total": 109, "additions": 83, "deletions": 26}, "files": [{"sha": "a238914f6752ec0d7c10fa36eaca0e4cb707bb44", "filename": "gcc/ginclude/va-mips.h", "status": "modified", "additions": 83, "deletions": 26, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9f99b6a232ac41d3ea3270e2886bc9552d2d9a4/gcc%2Fginclude%2Fva-mips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9f99b6a232ac41d3ea3270e2886bc9552d2d9a4/gcc%2Fginclude%2Fva-mips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-mips.h?ref=c9f99b6a232ac41d3ea3270e2886bc9552d2d9a4", "patch": "@@ -24,11 +24,16 @@ typedef struct {\n   char *__gp_regs;\n } __gnuc_va_list;\n \n-#ifdef __mips64\n-#define __va_reg_size 8\n-#else\n-#define __va_reg_size 4\n-#endif\n+#else /* ! (defined (__mips_eabi) && ! defined (__mips_soft_float)) */\n+\n+typedef char * __gnuc_va_list;\n+\n+#endif /* ! (defined (__mips_eabi) && ! defined (__mips_soft_float)) */\n+#endif /* not __GNUC_VA_LIST */\n+\n+/* If this is for internal libc use, don't define anything but\n+   __gnuc_va_list.  */\n+#if defined (_STDARG_H) || defined (_VARARGS_H)\n \n enum {\n   __no_type_class = -1,\n@@ -53,17 +58,6 @@ enum {\n   __lang_type_class\n };\n \n-#else /* ! (defined (__mips_eabi) && ! defined (__mips_soft_float)) */\n-\n-typedef char * __gnuc_va_list;\n-\n-#endif /* ! (defined (__mips_eabi) && ! defined (__mips_soft_float)) */\n-#endif /* not __GNUC_VA_LIST */\n-\n-/* If this is for internal libc use, don't define anything but\n-   __gnuc_va_list.  */\n-#if defined (_STDARG_H) || defined (_VARARGS_H)\n-\n /* In GCC version 2, we want an ellipsis at the end of the declaration\n    of the argument list.  GCC version 1 can't parse it.  */\n \n@@ -81,21 +75,45 @@ typedef char * __gnuc_va_list;\n   (((sizeof (__TYPE) + sizeof (int) - 1) / sizeof (int)) * sizeof (int))\n #endif\n \n+#ifdef __mips64\n+#define __va_reg_size 8\n+#else\n+#define __va_reg_size 4\n+#endif\n+\n /* Get definitions for _MIPS_SIM_ABI64 etc.  */\n #ifdef _MIPS_SIM\n #include <sgidefs.h>\n #endif\n \n #ifdef _STDARG_H\n-#if defined (__mips_eabi) && ! defined (__mips_soft_float)\n+#if defined (__mips_eabi)\n+#ifndef __mips_soft_float\n+#ifdef __mips64\n #define va_start(__AP, __LASTARG)\t\t\t\t\t\\\n   (__AP.__gp_regs = ((char *) __builtin_next_arg (__LASTARG)\t\t\\\n \t\t     - (__builtin_args_info (2) < 8\t\t\t\\\n \t\t\t? (8 - __builtin_args_info (2)) * __va_reg_size\t\\\n \t\t\t: 0)),\t\t\t\t\t\t\\\n    __AP.__fp_left = 8 - __builtin_args_info (3),\t\t\t\\\n    __AP.__fp_regs = __AP.__gp_regs - __AP.__fp_left * __va_reg_size)\n-#else /* ! (defined (__mips_eabi) && ! defined (__mips_soft_float)) */\n+#else /* ! defined (__mips64) */\n+#define va_start(__AP, __LASTARG)\t\t\t\t\t\\\n+  (__AP.__gp_regs = ((char *) __builtin_next_arg (__LASTARG)\t\t\\\n+\t\t     - (__builtin_args_info (2) < 8\t\t\t\\\n+\t\t\t? (8 - __builtin_args_info (2)) * __va_reg_size\t\\\n+\t\t\t: 0)),\t\t\t\t\t\t\\\n+   __AP.__fp_left = (8 - __builtin_args_info (3)) / 2,\t\t\t\\\n+   __AP.__fp_regs = __AP.__gp_regs - __AP.__fp_left * 8,\t\t\\\n+   __AP.__fp_regs = (char *) ((int) __AP.__fp_regs & -8))\n+#endif /* ! defined (__mips64) */\n+#else /* defined (__mips_soft_float) */\n+#define va_start(__AP, __LASTARG)\t\t\t\t\t\\\n+  (__AP = ((__gnuc_va_list) __builtin_next_arg (__LASTARG)\t\t\\\n+\t   - (__builtin_args_info (2) >= 8 ? 0\t\t\t\t\\\n+\t      : (8 - __builtin_args_info (2)) * __va_reg_size)))\n+#endif /* defined (__mips_soft_float) */\n+#else /* ! defined (__mips_eabi) */\n #define va_start(__AP, __LASTARG) \\\n   (__AP = (__gnuc_va_list) __builtin_next_arg (__LASTARG))\n #endif /* ! (defined (__mips_eabi) && ! defined (__mips_soft_float)) */\n@@ -107,14 +125,32 @@ typedef char * __gnuc_va_list;\n #else\n #define va_dcl    int __builtin_va_alist; __va_ellipsis\n #endif\n-#if defined (__mips_eabi) && ! defined (__mips_soft_float)\n+#if defined (__mips_eabi)\n+#ifndef __mips_soft_float\n+#ifdef __mips64\n #define va_start(__AP)\t\t\t\t\t\t\t\\\n   (__AP.__gp_regs = ((char *) __builtin_next_arg ()\t\t\t\\\n \t\t     - (__builtin_args_info (2) < 8\t\t\t\\\n \t\t\t? (8 - __builtin_args_info (2)) * __va_reg_size\t\\\n-\t\t\t: 8)),\t\t\t\t\t\t\\\n+\t\t\t: __va_reg_size)),\t\t\t\t\\\n    __AP.__fp_left = 8 - __builtin_args_info (3),\t\t\t\\\n    __AP.__fp_regs = __AP.__gp_regs - __AP.__fp_left * __va_reg_size)\n+#else /* ! defined (__mips64) */\n+#define va_start(__AP)\t\t\t\t\t\t\t\\\n+  (__AP.__gp_regs = ((char *) __builtin_next_arg ()\t\t\t\\\n+\t\t     - (__builtin_args_info (2) < 8\t\t\t\\\n+\t\t\t? (8 - __builtin_args_info (2)) * __va_reg_size\t\\\n+\t\t\t: __va_reg_size)),\t\t\t\t\\\n+   __AP.__fp_left = (8 - __builtin_args_info (3)) / 2,\t\t\t\\\n+   __AP.__fp_regs = __AP.__gp_regs - __AP.__fp_left * 8,\t\t\\\n+   __AP.__fp_regs = (char *) ((int) __AP.__fp_regs & -8))\n+#endif /* ! defined (__mips64) */\n+#else /* defined (__mips_soft_float) */\n+#define va_start(__AP)\t\t\t\t\t\t\t\\\n+  (__AP = ((__gnuc_va_list) __builtin_next_arg ()\t\t\t\\\n+\t   - (__builtin_args_info (2) >= 8 ? __va_reg_size\t\t\\\n+\t      : (8 - __builtin_args_info (2)) * __va_reg_size)))\n+#endif /* defined (__mips_soft_float) */\n /* Need alternate code for _MIPS_SIM_ABI64.  */\n #elif defined(_MIPS_SIM) && (_MIPS_SIM == _MIPS_SIM_ABI64 || _MIPS_SIM == _MIPS_SIM_NABI32)\n #define va_start(__AP)\t\t\t\t\t\t\t\\\n@@ -130,8 +166,9 @@ void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n #endif\n #define va_end(__AP)\t((void)0)\n \n-#if defined (__mips_eabi) && ! defined (__mips_soft_float)\n+#if defined (__mips_eabi)\n \n+#ifndef __mips_soft_float\n #ifdef __mips64\n #define __va_next_addr(__AP, __type)\t\t\t\t\t\\\n   ((__builtin_classify_type (*(__type *) 0) == __real_type_class\t\\\n@@ -143,11 +180,31 @@ void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n   ((__builtin_classify_type (*(__type *) 0) == __real_type_class\t\\\n     && __AP.__fp_left > 0)\t\t\t\t\t\t\\\n    ? (--__AP.__fp_left, (__AP.__fp_regs += 8) - 8)\t\t\t\\\n-   : (((__builtin_classify_type (* (__type *) 0) < record_type_class\t\\\n+   : (((__builtin_classify_type (* (__type *) 0) < __record_type_class\t\\\n \t&& __alignof__ (__type) > 4)\t\t\t\t\t\\\n-       ? __AP.__gp_regs = (__AP.__gp_regs + 8 - 1) & -8),\t\t\\\n-      (__AP.__gp_regs += __va_reg_size) - __va_reg_size))\n+       ? __AP.__gp_regs = (char *) (((int) __AP.__gp_regs + 8 - 1) & -8) \\\n+       : (char *) 0),\t\t\t\t\t\t\t\\\n+      (__builtin_classify_type (* (__type *) 0) >= __record_type_class\t\\\n+       ? (__AP.__gp_regs += __va_reg_size) - __va_reg_size\t\t\\\n+       : ((__AP.__gp_regs += __va_rounded_size (__type))\t\t\\\n+\t  - __va_rounded_size (__type)))))\n #endif\n+#else /* defined (__mips_soft_float) */\n+#ifdef __mips64\n+#define __va_next_addr(__AP, __type)\t\t\t\t\t\\\n+  ((__AP += __va_reg_size) - __va_reg_size)\n+#else\n+#define __va_next_addr(__AP, __type)\t\t\t\t\t\\\n+  (((__builtin_classify_type (* (__type *) 0) < __record_type_class\t\\\n+     && __alignof__ (__type) > 4)\t\t\t\t\t\\\n+    ? __AP = (char *) (((int) __AP + 8 - 1) & -8)\t\t\t\\\n+    : (char *) 0),\t\t\t\t\t\t\t\\\n+   (__builtin_classify_type (* (__type *) 0) >= __record_type_class\t\\\n+    ? (__AP += __va_reg_size) - __va_reg_size\t\t\t\t\\\n+    : ((__AP += __va_rounded_size (__type))\t\t\t\t\\\n+       - __va_rounded_size (__type))))\n+#endif\n+#endif /* defined (__mips_soft_float) */\n \n #ifdef __MIPSEB__\n #define va_arg(__AP, __type)\t\t\t\t\t\t\\\n@@ -167,7 +224,7 @@ void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n    : *(__type *) (void *) __va_next_addr (__AP, __type))\n #endif\n \n-#else /* ! (defined (__mips_eabi) && ! defined (__mips_soft_float)) */\n+#else /* ! defined (__mips_eabi) */\n \n /* We cast to void * and then to TYPE * because this avoids\n    a warning about increasing the alignment requirement.  */\n@@ -206,6 +263,6 @@ void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n \t\t\t\t\t + __va_rounded_size(__type))))[-1]\n #endif\n #endif\n-#endif /* ! (defined (__mips_eabi) && ! defined (__mips_soft_float)) */\n+#endif /* ! defined (__mips_eabi)  */\n \n #endif /* defined (_STDARG_H) || defined (_VARARGS_H) */"}]}