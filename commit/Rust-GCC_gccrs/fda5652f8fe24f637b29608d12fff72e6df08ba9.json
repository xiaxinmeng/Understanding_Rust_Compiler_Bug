{"sha": "fda5652f8fe24f637b29608d12fff72e6df08ba9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRhNTY1MmY4ZmUyNGY2MzdiMjk2MDhkMTJmZmY3MmU2ZGYwOGJhOQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-12-22T15:23:21Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-12-22T15:23:21Z"}, "message": "re PR c/69002 (C front end should warn about undefined access to atomic structure or union)\n\n\tPR c/69002\n\t* c-typeck.c (build_component_ref): Warn when acessing elements of\n\tatomic structures or unions.\n\n\t* gcc.dg/c11-atomic-1.c: Add dg-warnings.\n\t* gcc.dg/c11-atomic-4.c: New test.\n\nFrom-SVN: r231902", "tree": {"sha": "8c5ff4eaa6ca02b1a6b16ad476daf41cbf9fd2a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c5ff4eaa6ca02b1a6b16ad476daf41cbf9fd2a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fda5652f8fe24f637b29608d12fff72e6df08ba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fda5652f8fe24f637b29608d12fff72e6df08ba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fda5652f8fe24f637b29608d12fff72e6df08ba9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fda5652f8fe24f637b29608d12fff72e6df08ba9/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a00b0aaf036edadc48861b91d3804796525c2d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a00b0aaf036edadc48861b91d3804796525c2d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a00b0aaf036edadc48861b91d3804796525c2d5"}], "stats": {"total": 126, "additions": 121, "deletions": 5}, "files": [{"sha": "f99f426d54295104c90b981208140337107d3b3f", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda5652f8fe24f637b29608d12fff72e6df08ba9/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda5652f8fe24f637b29608d12fff72e6df08ba9/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=fda5652f8fe24f637b29608d12fff72e6df08ba9", "patch": "@@ -1,3 +1,9 @@\n+2015-12-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/69002\n+\t* c-typeck.c (build_component_ref): Warn when acessing elements of\n+\tatomic structures or unions.\n+\n 2015-12-21  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-typeck.c: Include \"gcc-rich-location.h\"."}, {"sha": "928fcd504d097906b452168b1ab4da1a5bfe14f2", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda5652f8fe24f637b29608d12fff72e6df08ba9/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda5652f8fe24f637b29608d12fff72e6df08ba9/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=fda5652f8fe24f637b29608d12fff72e6df08ba9", "patch": "@@ -2349,6 +2349,18 @@ build_component_ref (location_t loc, tree datum, tree component)\n \t  return error_mark_node;\n \t}\n \n+      /* Accessing elements of atomic structures or unions is undefined\n+\t behavior (C11 6.5.2.3#5).  */\n+      if (TYPE_ATOMIC (type) && c_inhibit_evaluation_warnings == 0)\n+\t{\n+\t  if (code == RECORD_TYPE)\n+\t    warning_at (loc, 0, \"accessing a member %qE of an atomic \"\n+\t\t\t\"structure %qE\", component, datum);\n+\t  else\n+\t    warning_at (loc, 0, \"accessing a member %qE of an atomic \"\n+\t\t\t\"union %qE\", component, datum);\n+\t}\n+\n       /* Chain the COMPONENT_REFs if necessary down to the FIELD.\n \t This might be better solved in future the way the C++ front\n \t end does it - by giving the anonymous entities each a"}, {"sha": "50733e6b46cc95d6a333611870fb35c18d575a8f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda5652f8fe24f637b29608d12fff72e6df08ba9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda5652f8fe24f637b29608d12fff72e6df08ba9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fda5652f8fe24f637b29608d12fff72e6df08ba9", "patch": "@@ -1,3 +1,9 @@\n+2015-12-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/69002\n+\t* gcc.dg/c11-atomic-1.c: Add dg-warnings.\n+\t* gcc.dg/c11-atomic-4.c: New test.\n+\n 2015-12-22  Sujoy Saraswati  <sujoy.saraswati@hpe.com>\n \n \t* gcc.dg/pr61441.c: New testcase."}, {"sha": "9702a10a62a1eacc3c6b69b60434d2efefa6411d", "filename": "gcc/testsuite/gcc.dg/c11-atomic-1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda5652f8fe24f637b29608d12fff72e6df08ba9/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-atomic-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda5652f8fe24f637b29608d12fff72e6df08ba9/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-atomic-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-atomic-1.c?ref=fda5652f8fe24f637b29608d12fff72e6df08ba9", "patch": "@@ -61,15 +61,15 @@ func (_Atomic volatile long al1)\n      accessing elements of atomic structures and unions is at\n      translation or execution time; presume here that it's at\n      execution time.  */\n-  t1.i = at1.i;\n-  at1.i = t1.i;\n-  atp1->i = t1.i;\n+  t1.i = at1.i; /* { dg-warning \"accessing a member .i. of an atomic structure\" } */\n+  at1.i = t1.i; /* { dg-warning \"accessing a member .i. of an atomic structure\" } */\n+  atp1->i = t1.i; /* { dg-warning \"accessing a member .i. of an atomic structure\" } */\n   au1 = u1;\n   u1 = au1;\n   av1 = v1;\n   v1 = av1;\n-  v1.i = av1.i;\n-  av1.i = v1.i;\n+  v1.i = av1.i; /* { dg-warning \"accessing a member .i. of an atomic union\" } */\n+  av1.i = v1.i; /* { dg-warning \"accessing a member .i. of an atomic union\" } */\n   /* _Atomic is valid on register variables, even if not particularly\n      useful.  */\n   register _Atomic volatile int ra1 = 1, ra2 = 2;"}, {"sha": "81003aa69545d1df092205f0671b1bfba743b5be", "filename": "gcc/testsuite/gcc.dg/c11-atomic-4.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda5652f8fe24f637b29608d12fff72e6df08ba9/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-atomic-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda5652f8fe24f637b29608d12fff72e6df08ba9/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-atomic-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-atomic-4.c?ref=fda5652f8fe24f637b29608d12fff72e6df08ba9", "patch": "@@ -0,0 +1,92 @@\n+/* PR c/69002 */\n+/* Test we diagnose accessing elements of atomic structures or unions,\n+   which is undefined behavior (C11 6.5.2.3#5).  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+struct S { int x; };\n+union U { int x; };\n+\n+int\n+fn1 (_Atomic struct S p)\n+{\n+  int e = 0 && p.x;\n+  return p.x + e; /* { dg-warning \"accessing a member .x. of an atomic structure\" } */\n+}\n+\n+int\n+fn2 (_Atomic struct S *p)\n+{\n+  int e = 1 || p->x;\n+  return p->x + e; /* { dg-warning \"accessing a member .x. of an atomic structure\" } */\n+}\n+\n+void\n+fn3 (_Atomic struct S p, int x)\n+{\n+  p.x = x; /* { dg-warning \"accessing a member .x. of an atomic structure\" } */\n+}\n+\n+void\n+fn4 (_Atomic struct S *p, int x)\n+{\n+  p->x = x; /* { dg-warning \"accessing a member .x. of an atomic structure\" } */\n+}\n+\n+int\n+fn5 (_Atomic struct S p)\n+{\n+  /* This is OK: Members can be safely accessed using a non-atomic\n+     object which is assigned to or from the atomic object.  */\n+  struct S s = p;\n+  return s.x;\n+}\n+\n+int\n+fn6 (_Atomic struct S *p)\n+{\n+  struct S s = *p;\n+  return s.x;\n+}\n+\n+int\n+fn7 (_Atomic union U p)\n+{\n+  int e = 0 && p.x;\n+  return p.x + e; /* { dg-warning \"accessing a member .x. of an atomic union\" } */\n+}\n+\n+int\n+fn8 (_Atomic union U *p)\n+{\n+  int e = 1 || p->x;\n+  return p->x + e; /* { dg-warning \"accessing a member .x. of an atomic union\" } */\n+}\n+\n+void\n+fn9 (_Atomic union U p, int x)\n+{\n+  p.x = x; /* { dg-warning \"accessing a member .x. of an atomic union\" } */\n+}\n+\n+void\n+fn10 (_Atomic union U *p, int x)\n+{\n+  p->x = x; /* { dg-warning \"accessing a member .x. of an atomic union\" } */\n+}\n+\n+int\n+fn11 (_Atomic union U p)\n+{\n+  /* This is OK: Members can be safely accessed using a non-atomic\n+     object which is assigned to or from the atomic object.  */\n+  union U s = p;\n+  return s.x;\n+}\n+\n+int\n+fn12 (_Atomic union U *p)\n+{\n+  union U s = *p;\n+  return s.x;\n+}"}]}