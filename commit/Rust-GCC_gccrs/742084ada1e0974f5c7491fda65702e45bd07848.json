{"sha": "742084ada1e0974f5c7491fda65702e45bd07848", "node_id": "C_kwDOANBUbNoAKDc0MjA4NGFkYTFlMDk3NGY1Yzc0OTFmZGE2NTcwMmU0NWJkMDc4NDg", "commit": {"author": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-11-25T13:52:04Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2023-01-03T09:29:53Z"}, "message": "ada: Adapt frontend optimization for aggregate assignment\n\nThe frontend currently relies on gigi to use efficient assignment in\nparticular cases like:\n\n  Some_Var.all := (others => (others => 0));\n\ngigi would use memset to clear memory pointed to by Some_Var.\n\nIn the case of an access with a Designated_Storage_Model aspect with a Copy_To\nprocedure, memset can't be used directly. Instead of simply disabling this\nfrontend/gigi optimization and having the frontend emit several assignments, a\ntemporary is used (through the new Build_Assignment_With_Temporary): gigi can\nstill memset it, and this temporary is then copied into the original\ntarget (and the regular storage model mechanism handles it).\n\ngcc/ada/\n\n\t* exp_aggr.adb (Build_Assignment_With_Temporary): New.\n\t(Expand_Array_Aggregate): Tune backend optimization\n\tand insert a temporary in the case of an access with\n\tDesignated_Storage_Model aspect.\n\t(Convert_Array_Aggr_In_Allocator): Likewise.", "tree": {"sha": "d6ce82392487f7e551768d8b7d11d3362f0eaee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6ce82392487f7e551768d8b7d11d3362f0eaee8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/742084ada1e0974f5c7491fda65702e45bd07848", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742084ada1e0974f5c7491fda65702e45bd07848", "html_url": "https://github.com/Rust-GCC/gccrs/commit/742084ada1e0974f5c7491fda65702e45bd07848", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742084ada1e0974f5c7491fda65702e45bd07848/comments", "author": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48d9f7cb215f1af996788aee07808339a786a18d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48d9f7cb215f1af996788aee07808339a786a18d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48d9f7cb215f1af996788aee07808339a786a18d"}], "stats": {"total": 106, "additions": 92, "deletions": 14}, "files": [{"sha": "30f32a784537f981414615cbdf36f21918313ac8", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 92, "deletions": 14, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742084ada1e0974f5c7491fda65702e45bd07848/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742084ada1e0974f5c7491fda65702e45bd07848/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=742084ada1e0974f5c7491fda65702e45bd07848", "patch": "@@ -62,6 +62,7 @@ with Sem_Eval;       use Sem_Eval;\n with Sem_Mech;       use Sem_Mech;\n with Sem_Res;        use Sem_Res;\n with Sem_Util;       use Sem_Util;\n+use Sem_Util.Storage_Model_Support;\n with Sinfo;          use Sinfo;\n with Sinfo.Nodes;    use Sinfo.Nodes;\n with Sinfo.Utils;    use Sinfo.Utils;\n@@ -75,6 +76,15 @@ with Warnsw;         use Warnsw;\n \n package body Exp_Aggr is\n \n+   function Build_Assignment_With_Temporary\n+     (Target : Node_Id;\n+      Typ    : Node_Id;\n+      Source : Node_Id) return List_Id;\n+   --  Returns a list of actions to assign Source to Target of type Typ using\n+   --  an extra temporary:\n+   --   Tmp := Source;\n+   --   Target := Tmp;\n+\n    type Case_Bounds is record\n      Choice_Lo   : Node_Id;\n      Choice_Hi   : Node_Id;\n@@ -2508,6 +2518,42 @@ package body Exp_Aggr is\n       return New_Code;\n    end Build_Array_Aggr_Code;\n \n+   -------------------------------------\n+   -- Build_Assignment_With_Temporary --\n+   -------------------------------------\n+\n+   function Build_Assignment_With_Temporary\n+     (Target : Node_Id;\n+      Typ    : Node_Id;\n+      Source : Node_Id) return List_Id\n+   is\n+      Loc : constant Source_Ptr := Sloc (Source);\n+\n+      Aggr_Code : List_Id;\n+      Tmp       : Entity_Id;\n+      Tmp_Decl  : Node_Id;\n+\n+   begin\n+      Tmp := Make_Temporary (Loc, 'A', Source);\n+      Tmp_Decl :=\n+        Make_Object_Declaration (Loc,\n+          Defining_Identifier => Tmp,\n+          Object_Definition   => New_Occurrence_Of (Typ, Loc));\n+      Set_No_Initialization (Tmp_Decl, True);\n+\n+      Aggr_Code := New_List (Tmp_Decl);\n+      Append_To (Aggr_Code,\n+        Make_OK_Assignment_Statement (Loc,\n+          Name       => New_Occurrence_Of (Tmp, Loc),\n+          Expression => Source));\n+\n+      Append_To (Aggr_Code,\n+        Make_OK_Assignment_Statement (Loc,\n+          Name       => Target,\n+          Expression => New_Occurrence_Of (Tmp, Loc)));\n+      return Aggr_Code;\n+   end Build_Assignment_With_Temporary;\n+\n    ----------------------------\n    -- Build_Record_Aggr_Code --\n    ----------------------------\n@@ -4514,15 +4560,29 @@ package body Exp_Aggr is\n          New_Aggr := New_Copy_Tree (Aggr);\n          Set_Expansion_Delayed (New_Aggr, False);\n \n-         Aggr_Code :=\n-           New_List (\n-             Make_OK_Assignment_Statement (Sloc (New_Aggr),\n-               Name       => Target,\n-               Expression => New_Aggr));\n+         --  In the case of Target's type using the Designated_Storage_Model\n+         --  aspect with a Copy_To procedure, insert a temporary and have the\n+         --  back end handle the assignment to it. Copy the result to the\n+         --  original target.\n+\n+         if Has_Designated_Storage_Model_Aspect\n+              (Etype (Prefix (Expression (Target))))\n+           and then Present (Storage_Model_Copy_To\n+                               (Storage_Model_Object\n+                                  (Etype (Prefix (Expression (Target))))))\n+         then\n+            Aggr_Code := Build_Assignment_With_Temporary (Target,\n+                           Typ, New_Aggr);\n+         else\n+            Aggr_Code :=\n+              New_List (\n+                Make_OK_Assignment_Statement (Sloc (New_Aggr),\n+                  Name       => Target,\n+                  Expression => New_Aggr));\n+         end if;\n \n       --  Or else, generate component assignments to it, as for an aggregate\n       --  that appears on the right-hand side of an assignment statement.\n-\n       else\n          Aggr_Code :=\n            Build_Array_Aggr_Code (Aggr,\n@@ -7065,16 +7125,34 @@ package body Exp_Aggr is\n            and then not Is_Possibly_Unaligned_Slice (Target)\n            and then Aggr_Assignment_OK_For_Backend (N)\n          then\n-            if Maybe_In_Place_OK then\n-               return;\n-            end if;\n \n-            Aggr_Code :=\n-              New_List (\n-                Make_Assignment_Statement (Loc,\n-                  Name       => Target,\n-                  Expression => New_Copy_Tree (N)));\n+            --  In the case of an assignment using an access with the\n+            --  Designated_Storage_Model aspect with a Copy_To procedure,\n+            --  insert a temporary and have the back end handle the assignment\n+            --  to it. Copy the result to the original target.\n+\n+            if Parent_Kind = N_Assignment_Statement\n+              and then Nkind (Name (Parent_Node)) = N_Explicit_Dereference\n+              and then Has_Designated_Storage_Model_Aspect\n+                         (Etype (Prefix (Name (Parent_Node))))\n+              and then Present (Storage_Model_Copy_To\n+                                  (Storage_Model_Object\n+                                     (Etype (Prefix (Name (Parent_Node))))))\n+            then\n+               Aggr_Code := Build_Assignment_With_Temporary (Target,\n+                              Typ, New_Copy_Tree (N));\n+            else\n+               if Maybe_In_Place_OK then\n+                  return;\n+               end if;\n \n+               Aggr_Code :=\n+                 New_List (\n+                   Make_Assignment_Statement (Loc,\n+                     Name       => Target,\n+                     Expression => New_Copy_Tree (N)));\n+\n+            end if;\n          else\n             Aggr_Code :=\n               Build_Array_Aggr_Code (N,"}]}