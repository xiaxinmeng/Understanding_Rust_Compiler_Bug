{"sha": "e023778028bbb434ad2e4297c12b9978b28650e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAyMzc3ODAyOGJiYjQzNGFkMmU0Mjk3YzEyYjk5NzhiMjg2NTBlMA==", "commit": {"author": {"name": "Greta Yorsh", "email": "greta.yorsh@arm.com", "date": "2013-02-22T14:23:12Z"}, "committer": {"name": "Greta Yorsh", "email": "gretay@gcc.gnu.org", "date": "2013-02-22T14:23:12Z"}, "message": "arm.md (split for extendsidi): Update condition.\n\n2013-02-22  Greta Yorsh  <Greta.Yorsh@arm.com>\n\n        * config/arm/arm.md (split for extendsidi): Update condition.\n        (zero_extend<mode>di2,extend<mode>di2): Add an alternative.\n        * config/arm/iterators.md (qhs_extenddi_cstr): Likewise.\n        (qhs_zextenddi_cstr): Likewise.\n\nFrom-SVN: r196220", "tree": {"sha": "8309ade4578be354d6c86dcc7d722fb58ef9aa2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8309ade4578be354d6c86dcc7d722fb58ef9aa2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e023778028bbb434ad2e4297c12b9978b28650e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e023778028bbb434ad2e4297c12b9978b28650e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e023778028bbb434ad2e4297c12b9978b28650e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e023778028bbb434ad2e4297c12b9978b28650e0/comments", "author": null, "committer": null, "parents": [{"sha": "f49b31e4594a4a00ac8f9f5aac1f723572fbc95f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f49b31e4594a4a00ac8f9f5aac1f723572fbc95f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f49b31e4594a4a00ac8f9f5aac1f723572fbc95f"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "79f15be7669620dd86172798cbd411538df3a3a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e023778028bbb434ad2e4297c12b9978b28650e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e023778028bbb434ad2e4297c12b9978b28650e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e023778028bbb434ad2e4297c12b9978b28650e0", "patch": "@@ -1,3 +1,10 @@\n+2013-02-22  Greta Yorsh  <Greta.Yorsh@arm.com>\n+\n+        * config/arm/arm.md (split for extendsidi): Update condition.\n+        (zero_extend<mode>di2,extend<mode>di2): Add an alternative.\n+        * config/arm/iterators.md (qhs_extenddi_cstr): Likewise.\n+        (qhs_zextenddi_cstr): Likewise.\n+\n 2013-02-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/56420"}, {"sha": "f3c59f37c8596e32b831b19a347d6a890b230262", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e023778028bbb434ad2e4297c12b9978b28650e0/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e023778028bbb434ad2e4297c12b9978b28650e0/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=e023778028bbb434ad2e4297c12b9978b28650e0", "patch": "@@ -4492,36 +4492,35 @@\n ;; Zero and sign extension instructions.\n \n (define_insn \"zero_extend<mode>di2\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,r,?r\")\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,r,?r,w\")\n         (zero_extend:DI (match_operand:QHSI 1 \"<qhs_zextenddi_op>\"\n \t\t\t\t\t    \"<qhs_zextenddi_cstr>\")))]\n   \"TARGET_32BIT <qhs_zextenddi_cond>\"\n   \"#\"\n-  [(set_attr \"length\" \"8,4,8\")\n+  [(set_attr \"length\" \"8,4,8,8\")\n+   (set_attr \"arch\" \"neon_nota8,*,*,neon_onlya8\")\n    (set_attr \"ce_count\" \"2\")\n    (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"extend<mode>di2\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,r,?r,?r\")\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,r,?r,?r,w\")\n         (sign_extend:DI (match_operand:QHSI 1 \"<qhs_extenddi_op>\"\n \t\t\t\t\t    \"<qhs_extenddi_cstr>\")))]\n   \"TARGET_32BIT <qhs_sextenddi_cond>\"\n   \"#\"\n-  [(set_attr \"length\" \"8,4,8,8\")\n+  [(set_attr \"length\" \"8,4,8,8,8\")\n    (set_attr \"ce_count\" \"2\")\n    (set_attr \"shift\" \"1\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"arch\" \"*,*,a,t\")]\n+   (set_attr \"arch\" \"neon_nota8,*,a,t,neon_onlya8\")]\n )\n \n ;; Splits for all extensions to DImode\n (define_split\n   [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n         (zero_extend:DI (match_operand 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_32BIT && (!TARGET_NEON\n-\t\t    || (reload_completed\n-\t\t\t&& !(IS_VFP_REGNUM (REGNO (operands[0])))))\"\n+  \"TARGET_32BIT && reload_completed && !IS_VFP_REGNUM (REGNO (operands[0]))\"\n   [(set (match_dup 0) (match_dup 1))]\n {\n   rtx lo_part = gen_lowpart (SImode, operands[0]);\n@@ -4547,9 +4546,7 @@\n (define_split\n   [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n         (sign_extend:DI (match_operand 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_32BIT && (!TARGET_NEON\n-\t\t    || (reload_completed\n-\t\t\t&& !(IS_VFP_REGNUM (REGNO (operands[0])))))\"\n+  \"TARGET_32BIT && reload_completed && !IS_VFP_REGNUM (REGNO (operands[0]))\"\n   [(set (match_dup 0) (ashiftrt:SI (match_dup 1) (const_int 31)))]\n {\n   rtx lo_part = gen_lowpart (SImode, operands[0]);"}, {"sha": "252f18b40a8a145081e860e7aa85155fdcda92d1", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e023778028bbb434ad2e4297c12b9978b28650e0/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e023778028bbb434ad2e4297c12b9978b28650e0/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=e023778028bbb434ad2e4297c12b9978b28650e0", "patch": "@@ -429,8 +429,8 @@\n (define_mode_attr qhs_extenddi_op [(SI \"s_register_operand\")\n \t\t\t\t   (HI \"nonimmediate_operand\")\n \t\t\t\t   (QI \"arm_reg_or_extendqisi_mem_op\")])\n-(define_mode_attr qhs_extenddi_cstr [(SI \"r,0,r,r\") (HI \"r,0,rm,rm\") (QI \"r,0,rUq,rm\")])\n-(define_mode_attr qhs_zextenddi_cstr [(SI \"r,0,r\") (HI \"r,0,rm\") (QI \"r,0,rm\")])\n+(define_mode_attr qhs_extenddi_cstr [(SI \"r,0,r,r,r\") (HI \"r,0,rm,rm,r\") (QI \"r,0,rUq,rm,r\")])\n+(define_mode_attr qhs_zextenddi_cstr [(SI \"r,0,r,r\") (HI \"r,0,rm,r\") (QI \"r,0,rm,r\")])\n \n ;; Mode attributes used for fixed-point support.\n (define_mode_attr qaddsub_suf [(V4UQQ \"8\") (V2UHQ \"16\") (UQQ \"8\") (UHQ \"16\")"}]}