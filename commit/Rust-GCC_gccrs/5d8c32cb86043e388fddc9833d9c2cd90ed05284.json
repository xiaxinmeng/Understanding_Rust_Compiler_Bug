{"sha": "5d8c32cb86043e388fddc9833d9c2cd90ed05284", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ4YzMyY2I4NjA0M2UzODhmZGRjOTgzM2Q5YzJjZDkwZWQwNTI4NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-10-29T13:31:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-10-29T13:31:28Z"}, "message": "re PR tree-optimization/87785 (ICE in dr_misalignment, at tree-vectorizer.h:1245 on 454.calculix with -Ofast and -flto)\n\n2018-10-29  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/87785\n\t* tree-vect-slp.c (vect_build_slp_tree_2): Remove loads argument\n\tand processing.\n\t(vect_build_slp_tree): Likewise.\n\t(vect_gather_slp_loads): New function.\n\t(vect_analyze_slp_instance): Gather loads separately from the\n\tSLP tree build.\n\nFrom-SVN: r265588", "tree": {"sha": "c71a3607249ca556eab4af6755c032fc91a70b3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c71a3607249ca556eab4af6755c032fc91a70b3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d8c32cb86043e388fddc9833d9c2cd90ed05284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d8c32cb86043e388fddc9833d9c2cd90ed05284", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d8c32cb86043e388fddc9833d9c2cd90ed05284", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d8c32cb86043e388fddc9833d9c2cd90ed05284/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c8fda30f0cc084626af70dea607fc081f67d95f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8fda30f0cc084626af70dea607fc081f67d95f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8fda30f0cc084626af70dea607fc081f67d95f1"}], "stats": {"total": 75, "additions": 52, "deletions": 23}, "files": [{"sha": "5bb718838de1bb0b812f23dfcbf84fb2aa0c7535", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d8c32cb86043e388fddc9833d9c2cd90ed05284/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d8c32cb86043e388fddc9833d9c2cd90ed05284/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d8c32cb86043e388fddc9833d9c2cd90ed05284", "patch": "@@ -1,3 +1,13 @@\n+2018-10-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87785\n+\t* tree-vect-slp.c (vect_build_slp_tree_2): Remove loads argument\n+\tand processing.\n+\t(vect_build_slp_tree): Likewise.\n+\t(vect_gather_slp_loads): New function.\n+\t(vect_analyze_slp_instance): Gather loads separately from the\n+\tSLP tree build.\n+\n 2018-10-29  Martin Liska  <mliska@suse.cz>\n \n \t* Makefile.in: Make dependency to json.o."}, {"sha": "7bb0d3aa0e0af59004293ce8998b5fb9a496478d", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 42, "deletions": 23, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d8c32cb86043e388fddc9833d9c2cd90ed05284/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d8c32cb86043e388fddc9833d9c2cd90ed05284/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=5d8c32cb86043e388fddc9833d9c2cd90ed05284", "patch": "@@ -1032,15 +1032,14 @@ static slp_tree\n vect_build_slp_tree_2 (vec_info *vinfo,\n \t\t       vec<stmt_vec_info> stmts, unsigned int group_size,\n \t\t       poly_uint64 *max_nunits,\n-\t\t       vec<slp_tree> *loads,\n \t\t       bool *matches, unsigned *npermutes, unsigned *tree_size,\n \t\t       unsigned max_tree_size,\n \t\t       scalar_stmts_to_slp_tree_map_t *bst_map);\n \n static slp_tree\n vect_build_slp_tree (vec_info *vinfo,\n \t\t     vec<stmt_vec_info> stmts, unsigned int group_size,\n-\t\t     poly_uint64 *max_nunits, vec<slp_tree> *loads,\n+\t\t     poly_uint64 *max_nunits,\n \t\t     bool *matches, unsigned *npermutes, unsigned *tree_size,\n \t\t     unsigned max_tree_size,\n \t\t     scalar_stmts_to_slp_tree_map_t *bst_map)\n@@ -1055,7 +1054,7 @@ vect_build_slp_tree (vec_info *vinfo,\n       return *leader;\n     }\n   slp_tree res = vect_build_slp_tree_2 (vinfo, stmts, group_size, max_nunits,\n-\t\t\t\t\tloads, matches, npermutes, tree_size,\n+\t\t\t\t\tmatches, npermutes, tree_size,\n \t\t\t\t\tmax_tree_size, bst_map);\n   /* Keep a reference for the bst_map use.  */\n   if (res)\n@@ -1075,7 +1074,6 @@ static slp_tree\n vect_build_slp_tree_2 (vec_info *vinfo,\n \t\t       vec<stmt_vec_info> stmts, unsigned int group_size,\n \t\t       poly_uint64 *max_nunits,\n-\t\t       vec<slp_tree> *loads,\n \t\t       bool *matches, unsigned *npermutes, unsigned *tree_size,\n \t\t       unsigned max_tree_size,\n \t\t       scalar_stmts_to_slp_tree_map_t *bst_map)\n@@ -1149,7 +1147,6 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n     {\n       *max_nunits = this_max_nunits;\n       node = vect_create_new_slp_node (stmts);\n-      loads->safe_push (node);\n       return node;\n     }\n \n@@ -1173,7 +1170,6 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n       }\n \n   auto_vec<slp_tree, 4> children;\n-  auto_vec<slp_tree> this_loads;\n \n   stmt_info = stmts[0];\n \n@@ -1184,7 +1180,6 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n   FOR_EACH_VEC_ELT (oprnds_info, i, oprnd_info)\n     {\n       slp_tree child;\n-      unsigned old_nloads = this_loads.length ();\n       unsigned old_tree_size = this_tree_size;\n       unsigned int j;\n \n@@ -1207,7 +1202,7 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \n       if ((child = vect_build_slp_tree (vinfo, oprnd_info->def_stmts,\n \t\t\t\t\tgroup_size, &this_max_nunits,\n-\t\t\t\t\t&this_loads, matches, npermutes,\n+\t\t\t\t\tmatches, npermutes,\n \t\t\t\t\t&this_tree_size,\n \t\t\t\t\tmax_tree_size, bst_map)) != NULL)\n \t{\n@@ -1227,7 +1222,6 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t      if (!grandchild)\n \t\t{\n \t\t  /* Roll back.  */\n-\t\t  this_loads.truncate (old_nloads);\n \t\t  this_tree_size = old_tree_size;\n \t\t  FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (child), j, grandchild)\n \t\t    vect_free_slp_tree (grandchild, false);\n@@ -1350,7 +1344,7 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t  bool *tem = XALLOCAVEC (bool, group_size);\n \t  if ((child = vect_build_slp_tree (vinfo, oprnd_info->def_stmts,\n \t\t\t\t\t    group_size, &this_max_nunits,\n-\t\t\t\t\t    &this_loads, tem, npermutes,\n+\t\t\t\t\t    tem, npermutes,\n \t\t\t\t\t    &this_tree_size,\n \t\t\t\t\t    max_tree_size, bst_map)) != NULL)\n \t    {\n@@ -1396,7 +1390,6 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t\t  if (!grandchild)\n \t\t    {\n \t\t      /* Roll back.  */\n-\t\t      this_loads.truncate (old_nloads);\n \t\t      this_tree_size = old_tree_size;\n \t\t      FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (child), j, grandchild)\n \t\t\tvect_free_slp_tree (grandchild, false);\n@@ -1433,7 +1426,6 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n   if (tree_size)\n     *tree_size += this_tree_size;\n   *max_nunits = this_max_nunits;\n-  loads->safe_splice (this_loads);\n \n   node = vect_create_new_slp_node (stmts);\n   SLP_TREE_TWO_OPERATORS (node) = two_operators;\n@@ -1646,6 +1638,38 @@ vect_attempt_slp_rearrange_stmts (slp_instance slp_instn)\n   return true;\n }\n \n+/* Gather loads in the SLP graph NODE and populate the INST loads array.  */\n+\n+static void\n+vect_gather_slp_loads (slp_instance inst, slp_tree node,\n+\t\t       hash_set<slp_tree> &visited)\n+{\n+  if (visited.add (node))\n+    return;\n+\n+  if (SLP_TREE_CHILDREN (node).length () == 0)\n+    {\n+      stmt_vec_info stmt_info = SLP_TREE_SCALAR_STMTS (node)[0];\n+      if (STMT_VINFO_GROUPED_ACCESS (stmt_info)\n+\t  && DR_IS_READ (STMT_VINFO_DATA_REF (stmt_info)))\n+\tSLP_INSTANCE_LOADS (inst).safe_push (node);\n+    }\n+  else\n+    {\n+      unsigned i;\n+      slp_tree child;\n+      FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), i, child)\n+\tvect_gather_slp_loads (inst, child, visited);\n+    }\n+}\n+\n+static void\n+vect_gather_slp_loads (slp_instance inst, slp_tree node)\n+{\n+  hash_set<slp_tree> visited;\n+  vect_gather_slp_loads (inst, node, visited);\n+}\n+\n /* Check if the required load permutations in the SLP instance\n    SLP_INSTN are supported.  */\n \n@@ -1861,7 +1885,6 @@ vect_analyze_slp_instance (vec_info *vinfo,\n   unsigned int group_size;\n   tree vectype, scalar_type = NULL_TREE;\n   unsigned int i;\n-  vec<slp_tree> loads;\n   struct data_reference *dr = STMT_VINFO_DATA_REF (stmt_info);\n   vec<stmt_vec_info> scalar_stmts;\n \n@@ -1929,16 +1952,14 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \tscalar_stmts.safe_push (next_info);\n     }\n \n-  loads.create (group_size);\n-\n   /* Build the tree for the SLP instance.  */\n   bool *matches = XALLOCAVEC (bool, group_size);\n   unsigned npermutes = 0;\n   scalar_stmts_to_slp_tree_map_t *bst_map\n     = new scalar_stmts_to_slp_tree_map_t ();\n   poly_uint64 max_nunits = nunits;\n   node = vect_build_slp_tree (vinfo, scalar_stmts, group_size,\n-\t\t\t      &max_nunits, &loads, matches, &npermutes,\n+\t\t\t      &max_nunits, matches, &npermutes,\n \t\t\t      NULL, max_tree_size, bst_map);\n   /* The map keeps a reference on SLP nodes built, release that.  */\n   for (scalar_stmts_to_slp_tree_map_t::iterator it = bst_map->begin ();\n@@ -1965,13 +1986,11 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \t\t\t\t \"size not a multiple of the vector size \"\n \t\t\t\t \"in basic block SLP\\n\");\n \t      vect_free_slp_tree (node, false);\n-\t      loads.release ();\n \t      return false;\n \t    }\n \t  /* Fatal mismatch.  */\n \t  matches[group_size / const_max_nunits * const_max_nunits] = false;\n \t  vect_free_slp_tree (node, false);\n-\t  loads.release ();\n \t}\n       else\n \t{\n@@ -1980,12 +1999,13 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \t  SLP_INSTANCE_TREE (new_instance) = node;\n \t  SLP_INSTANCE_GROUP_SIZE (new_instance) = group_size;\n \t  SLP_INSTANCE_UNROLLING_FACTOR (new_instance) = unrolling_factor;\n-\t  SLP_INSTANCE_LOADS (new_instance) = loads;\n+\t  SLP_INSTANCE_LOADS (new_instance) = vNULL;\n+\t  vect_gather_slp_loads (new_instance, node);\n \n \t  /* Compute the load permutation.  */\n \t  slp_tree load_node;\n \t  bool loads_permuted = false;\n-\t  FOR_EACH_VEC_ELT (loads, i, load_node)\n+\t  FOR_EACH_VEC_ELT (SLP_INSTANCE_LOADS (new_instance), i, load_node)\n \t    {\n \t      vec<unsigned> load_permutation;\n \t      int j;\n@@ -2038,7 +2058,7 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \t      && dr && vect_store_lanes_supported (vectype, group_size, false))\n \t    {\n \t      slp_tree load_node;\n-\t      FOR_EACH_VEC_ELT (loads, i, load_node)\n+\t      FOR_EACH_VEC_ELT (SLP_INSTANCE_LOADS (new_instance), i, load_node)\n \t\t{\n \t\t  stmt_vec_info stmt_vinfo = DR_GROUP_FIRST_ELEMENT\n \t\t      (SLP_TREE_SCALAR_STMTS (load_node)[0]);\n@@ -2049,7 +2069,7 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \t\t       DR_GROUP_SIZE (stmt_vinfo), false))\n \t\t    break;\n \t\t}\n-\t      if (i == loads.length ())\n+\t      if (i == SLP_INSTANCE_LOADS (new_instance).length ())\n \t\t{\n \t\t  if (dump_enabled_p ())\n \t\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n@@ -2077,7 +2097,6 @@ vect_analyze_slp_instance (vec_info *vinfo,\n       /* Failed to SLP.  */\n       /* Free the allocated memory.  */\n       scalar_stmts.release ();\n-      loads.release ();\n     }\n \n   /* For basic block SLP, try to break the group up into multiples of the"}]}