{"sha": "647537adefb34041cc2d44585252fd765cc0daae", "node_id": "C_kwDOANBUbNoAKDY0NzUzN2FkZWZiMzQwNDFjYzJkNDQ1ODUyNTJmZDc2NWNjMGRhYWU", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-03-24T15:42:31Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-03-24T15:42:31Z"}, "message": "c++: missing SFINAE for non-constant consteval calls [PR104620]\n\nHere we weren't respecting SFINAE when evaluating a call to a consteval\nfunction, which caused us to reject the new testcase below.  This patch\nfixes this by making build_over_call use the SFINAE-friendly version of\ncxx_constant_value.\n\nThis change causes us to no longer diagnose ahead of time a couple of\nnon-constant non-dependent consteval calls in consteval-if2.C with\n-fchecking=2.  These errors were apparently coming from the call to\nfold_non_dependent_expr in build_non_dependent_expr (for the RHS of the +=)\ndespite complain=tf_none being passed.  Now that build_over_call respects\nthe value of complain during constant evaluation of a consteval call,\nthe errors are gone.\n\nThat the errors are also gone without -fchecking=2 is a regression caused\nby r12-7264-gc19f317a78c0e4 and is the subject of PR104620.  As described\nin comment #5, I think it's basically an accident that we were diagnosing\nthese two calls correctly before r12-7264, so perhaps we can live without\nthese errors for GCC 12.  Thus this patch just XFAILs the two tests.\n\n\tPR c++/104620\n\ngcc/cp/ChangeLog:\n\n\t* call.cc (build_over_call): Use cxx_constant_value_sfinae\n\tinstead of cxx_constant_value to evaluate a consteval call.\n\t* constexpr.cc (cxx_constant_value_sfinae): Add decl parameter\n\tand pass it to cxx_eval_outermost_constant_expr.\n\t* cp-tree.h (cxx_constant_value_sfinae): Add decl parameter.\n\t* pt.cc (fold_targs_r): Pass NULL_TREE as decl parameter to\n\tcxx_constant_value_sfinae.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp23/consteval-if2.C: XFAIL two dg-error tests where\n\tthe argument to the non-constant non-dependent consteval call is\n\twrapped by NON_DEPENDENT_EXPR.\n\t* g++.dg/cpp2a/consteval30.C: New test.", "tree": {"sha": "5ed08216df295c81f1bd701921175c1afce8ee4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ed08216df295c81f1bd701921175c1afce8ee4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/647537adefb34041cc2d44585252fd765cc0daae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/647537adefb34041cc2d44585252fd765cc0daae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/647537adefb34041cc2d44585252fd765cc0daae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/647537adefb34041cc2d44585252fd765cc0daae/comments", "author": null, "committer": null, "parents": [{"sha": "fb488cba571539b6644e8f99f1dd997cdb4c82c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb488cba571539b6644e8f99f1dd997cdb4c82c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb488cba571539b6644e8f99f1dd997cdb4c82c1"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "ec6c5d5baa22d289a6a74d2d5680848de28e994e", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/647537adefb34041cc2d44585252fd765cc0daae/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/647537adefb34041cc2d44585252fd765cc0daae/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=647537adefb34041cc2d44585252fd765cc0daae", "patch": "@@ -9939,7 +9939,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t\t    obj_arg = TREE_OPERAND (addr, 0);\n \t\t}\n \t    }\n-\t  call = cxx_constant_value (call, obj_arg);\n+\t  call = cxx_constant_value_sfinae (call, obj_arg, complain);\n \t  if (obj_arg && !error_operand_p (call))\n \t    call = build2 (INIT_EXPR, void_type_node, obj_arg, call);\n \t  call = convert_from_reference (call);"}, {"sha": "778680b82701ce160d6c40c40ad1bcb0101c4160", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/647537adefb34041cc2d44585252fd765cc0daae/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/647537adefb34041cc2d44585252fd765cc0daae/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=647537adefb34041cc2d44585252fd765cc0daae", "patch": "@@ -7960,10 +7960,10 @@ cxx_constant_value (tree t, tree decl)\n /* As above, but respect SFINAE.  */\n \n tree\n-cxx_constant_value_sfinae (tree t, tsubst_flags_t complain)\n+cxx_constant_value_sfinae (tree t, tree decl, tsubst_flags_t complain)\n {\n   bool sfinae = !(complain & tf_error);\n-  tree r = cxx_eval_outermost_constant_expr (t, sfinae, true, true);\n+  tree r = cxx_eval_outermost_constant_expr (t, sfinae, true, true, false, decl);\n   if (sfinae && !TREE_CONSTANT (r))\n     r = error_mark_node;\n   return r;"}, {"sha": "2f718852ac182693f20ca16cb18925cad5d42ff0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/647537adefb34041cc2d44585252fd765cc0daae/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/647537adefb34041cc2d44585252fd765cc0daae/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=647537adefb34041cc2d44585252fd765cc0daae", "patch": "@@ -8414,7 +8414,7 @@ extern bool require_constant_expression (tree);\n extern bool require_rvalue_constant_expression (tree);\n extern bool require_potential_rvalue_constant_expression (tree);\n extern tree cxx_constant_value\t\t\t(tree, tree = NULL_TREE);\n-extern tree cxx_constant_value_sfinae\t\t(tree, tsubst_flags_t);\n+extern tree cxx_constant_value_sfinae\t\t(tree, tree, tsubst_flags_t);\n extern void cxx_constant_dtor\t\t\t(tree, tree);\n extern tree cxx_constant_init\t\t\t(tree, tree = NULL_TREE);\n extern tree maybe_constant_value\t\t(tree, tree = NULL_TREE, bool = false);"}, {"sha": "173bc3a8c7f8230bb1c4f0e7cdd17f1b49ac353e", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/647537adefb34041cc2d44585252fd765cc0daae/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/647537adefb34041cc2d44585252fd765cc0daae/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=647537adefb34041cc2d44585252fd765cc0daae", "patch": "@@ -19811,7 +19811,7 @@ fold_targs_r (tree targs, tsubst_flags_t complain)\n \t       && !glvalue_p (elt)\n \t       && !TREE_CONSTANT (elt))\n \t{\n-\t  elt = cxx_constant_value_sfinae (elt, complain);\n+\t  elt = cxx_constant_value_sfinae (elt, NULL_TREE, complain);\n \t  if (elt == error_mark_node)\n \t    return false;\n \t}"}, {"sha": "d1845da9e5892c1d262e883ff0d4fe6c752b802e", "filename": "gcc/testsuite/g++.dg/cpp23/consteval-if2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/647537adefb34041cc2d44585252fd765cc0daae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/647537adefb34041cc2d44585252fd765cc0daae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if2.C?ref=647537adefb34041cc2d44585252fd765cc0daae", "patch": "@@ -77,11 +77,11 @@ qux (int x)\n     }\n   else\n     {\n-      r += foo (8 * x);\t// { dg-error \"is not a constant expression\" }\n+      r += foo (8 * x);\t// { dg-error \"is not a constant expression\" \"\" { xfail *-*-* } }\n     }\n   if ! consteval\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n     {\n-      r += foo (32 * x);// { dg-error \"is not a constant expression\" }\n+      r += foo (32 * x);// { dg-error \"is not a constant expression\" \"\" { xfail *-*-* } }\n     }\n   if consteval\t\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n     {"}, {"sha": "035265e019ce7408aee420e769a8ce7e9e698966", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval30.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/647537adefb34041cc2d44585252fd765cc0daae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/647537adefb34041cc2d44585252fd765cc0daae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval30.C?ref=647537adefb34041cc2d44585252fd765cc0daae", "patch": "@@ -0,0 +1,12 @@\n+// Test SFINAE for a non-constant consteval call.\n+// { dg-do compile { target c++20 } }\n+\n+consteval int deref(const int* x) { return *x; }\n+\n+template<const int* P, int = deref(P)> // { dg-bogus \"null pointer\" }\n+constexpr int f(int) { return 0; }\n+\n+template<const int* P>\n+constexpr int f(...) { return 1; }\n+\n+static_assert(f<nullptr>(0) == 1);"}]}