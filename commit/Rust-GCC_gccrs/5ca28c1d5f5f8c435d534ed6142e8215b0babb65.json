{"sha": "5ca28c1d5f5f8c435d534ed6142e8215b0babb65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNhMjhjMWQ1ZjVmOGM0MzVkNTM0ZWQ2MTQyZTgyMTViMGJhYmI2NQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-04-25T13:54:35Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-04-25T13:54:35Z"}, "message": "C++: hints for missing std:: headers\n\ngcc/cp/ChangeLog:\n\t* name-lookup.c (get_std_name_hint): New function.\n\t(maybe_suggest_missing_header): New function.\n\t(suggest_alternative_in_explicit_scope): Call\n\tmaybe_suggest_missing_header.\n\ngcc/testsuite/ChangeLog:\n\t* g++.dg/lookup/missing-std-include.C: New test file.\n\nFrom-SVN: r247240", "tree": {"sha": "4af24850da8afcbe9bf1a162913989aa86eeac0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4af24850da8afcbe9bf1a162913989aa86eeac0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ca28c1d5f5f8c435d534ed6142e8215b0babb65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ca28c1d5f5f8c435d534ed6142e8215b0babb65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ca28c1d5f5f8c435d534ed6142e8215b0babb65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ca28c1d5f5f8c435d534ed6142e8215b0babb65/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ec07fa616d283c60844031818c239f1714d31c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec07fa616d283c60844031818c239f1714d31c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ec07fa616d283c60844031818c239f1714d31c9"}], "stats": {"total": 149, "additions": 149, "deletions": 0}, "files": [{"sha": "ff80b33539d73caab40d71335df3c9d49921a53b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca28c1d5f5f8c435d534ed6142e8215b0babb65/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca28c1d5f5f8c435d534ed6142e8215b0babb65/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5ca28c1d5f5f8c435d534ed6142e8215b0babb65", "patch": "@@ -1,3 +1,10 @@\n+2017-04-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* name-lookup.c (get_std_name_hint): New function.\n+\t(maybe_suggest_missing_header): New function.\n+\t(suggest_alternative_in_explicit_scope): Call\n+\tmaybe_suggest_missing_header.\n+\n 2017-04-25  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/80177"}, {"sha": "0c5df9379801fb1e5a4371a3fa5d04f0b39f60cd", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca28c1d5f5f8c435d534ed6142e8215b0babb65/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca28c1d5f5f8c435d534ed6142e8215b0babb65/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=5ca28c1d5f5f8c435d534ed6142e8215b0babb65", "patch": "@@ -4537,6 +4537,113 @@ suggest_alternatives_for (location_t location, tree name,\n   candidates.release ();\n }\n \n+/* Subroutine of maybe_suggest_missing_header for handling unrecognized names\n+   for some of the most common names within \"std::\".\n+   Given non-NULL NAME, a name for lookup within \"std::\", return the header\n+   name defining it within the C++ Standard Library (without '<' and '>'),\n+   or NULL.  */\n+\n+static const char *\n+get_std_name_hint (const char *name)\n+{\n+  struct std_name_hint\n+  {\n+    const char *name;\n+    const char *header;\n+  };\n+  static const std_name_hint hints[] = {\n+    /* <array>.  */\n+    {\"array\", \"array\"}, // C++11\n+    /* <deque>.  */\n+    {\"deque\", \"deque\"},\n+    /* <forward_list>.  */\n+    {\"forward_list\", \"forward_list\"},  // C++11\n+    /* <fstream>.  */\n+    {\"basic_filebuf\", \"fstream\"},\n+    {\"basic_ifstream\", \"fstream\"},\n+    {\"basic_ofstream\", \"fstream\"},\n+    {\"basic_fstream\", \"fstream\"},\n+    /* <iostream>.  */\n+    {\"cin\", \"iostream\"},\n+    {\"cout\", \"iostream\"},\n+    {\"cerr\", \"iostream\"},\n+    {\"clog\", \"iostream\"},\n+    {\"wcin\", \"iostream\"},\n+    {\"wcout\", \"iostream\"},\n+    {\"wclog\", \"iostream\"},\n+    /* <list>.  */\n+    {\"list\", \"list\"},\n+    /* <map>.  */\n+    {\"map\", \"map\"},\n+    {\"multimap\", \"map\"},\n+    /* <queue>.  */\n+    {\"queue\", \"queue\"},\n+    {\"priority_queue\", \"queue\"},\n+    /* <ostream>.  */\n+    {\"ostream\", \"ostream\"},\n+    {\"wostream\", \"ostream\"},\n+    {\"ends\", \"ostream\"},\n+    {\"flush\", \"ostream\"},\n+    {\"endl\", \"ostream\"},\n+    /* <set>.  */\n+    {\"set\", \"set\"},\n+    {\"multiset\", \"set\"},\n+    /* <sstream>.  */\n+    {\"basic_stringbuf\", \"sstream\"},\n+    {\"basic_istringstream\", \"sstream\"},\n+    {\"basic_ostringstream\", \"sstream\"},\n+    {\"basic_stringstream\", \"sstream\"},\n+    /* <stack>.  */\n+    {\"stack\", \"stack\"},\n+    /* <string>.  */\n+    {\"string\", \"string\"},\n+    {\"wstring\", \"string\"},\n+    {\"u16string\", \"string\"},\n+    {\"u32string\", \"string\"},\n+    /* <unordered_map>.  */\n+    {\"unordered_map\", \"unordered_map\"}, // C++11\n+    {\"unordered_multimap\", \"unordered_map\"}, // C++11\n+    /* <unordered_set>.  */\n+    {\"unordered_set\", \"unordered_set\"}, // C++11\n+    {\"unordered_multiset\", \"unordered_set\"}, // C++11\n+    /* <vector>.  */\n+    {\"vector\", \"vector\"},\n+  };\n+  const size_t num_hints = sizeof (hints) / sizeof (hints[0]);\n+  for (size_t i = 0; i < num_hints; i++)\n+    {\n+      if (0 == strcmp (name, hints[i].name))\n+\treturn hints[i].header;\n+    }\n+  return NULL;\n+}\n+\n+/* Subroutine of suggest_alternative_in_explicit_scope, for use when we have no\n+   suggestions to offer.\n+   If SCOPE is the \"std\" namespace, then suggest pertinent header\n+   files for NAME.  */\n+\n+static void\n+maybe_suggest_missing_header (location_t location, tree name, tree scope)\n+{\n+  if (scope == NULL_TREE)\n+    return;\n+  if (TREE_CODE (scope) != NAMESPACE_DECL)\n+    return;\n+  /* We only offer suggestions for the \"std\" namespace.  */\n+  if (scope != std_node)\n+    return;\n+  gcc_assert (TREE_CODE (name) == IDENTIFIER_NODE);\n+\n+  const char *name_str = IDENTIFIER_POINTER (name);\n+  const char *header_hint = get_std_name_hint (name_str);\n+  if (header_hint)\n+    inform (location,\n+\t    \"%<std::%s%> is defined in header %<<%s>%>;\"\n+\t    \" did you forget to %<#include <%s>%>?\",\n+\t    name_str, header_hint, header_hint);\n+}\n+\n /* Look for alternatives for NAME, an IDENTIFIER_NODE for which name\n    lookup failed within the explicitly provided SCOPE.  Suggest the\n    the best meaningful candidates (if any) as a fix-it hint.\n@@ -4564,6 +4671,8 @@ suggest_alternative_in_explicit_scope (location_t location, tree name,\n \t\t\t  fuzzy_name);\n       return true;\n     }\n+  else\n+    maybe_suggest_missing_header (location, name, scope);\n \n   return false;\n }"}, {"sha": "a8e24e979ff278a5dab9438997197b7d917302b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca28c1d5f5f8c435d534ed6142e8215b0babb65/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca28c1d5f5f8c435d534ed6142e8215b0babb65/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ca28c1d5f5f8c435d534ed6142e8215b0babb65", "patch": "@@ -1,3 +1,7 @@\n+2017-04-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* g++.dg/lookup/missing-std-include.C: New test file.\n+\n 2017-04-25  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "82f994f0f99458d4e3acc9032138e0ecf52e12a3", "filename": "gcc/testsuite/g++.dg/lookup/missing-std-include.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca28c1d5f5f8c435d534ed6142e8215b0babb65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca28c1d5f5f8c435d534ed6142e8215b0babb65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include.C?ref=5ca28c1d5f5f8c435d534ed6142e8215b0babb65", "patch": "@@ -0,0 +1,29 @@\n+void test (void)\n+{\n+  std::string s (\"hello world\"); // { dg-error \".string. is not a member of .std.\" }\n+  // { dg-message \".std::string. is defined in header .<string>.; did you forget to .#include <string>.?\" \"\" { target *-*-* } .-1 }\n+\n+  std::wstring ws (\"hello world\"); // { dg-error \".wstring. is not a member of .std.\" }\n+  // { dg-message \".std::wstring. is defined in header .<string>.; did you forget to .#include <string>.?\" \"\" { target *-*-* } .-1 }\n+\n+  std::cout << 10; // { dg-error \".cout. is not a member of .std.\" }\n+  // { dg-message \".std::cout. is defined in header .<iostream>.; did you forget to .#include <iostream>.?\" \"\" { target *-*-* } .-1 }\n+\n+  int i;\n+  std::cin >> i; // { dg-error \".cin. is not a member of .std.\" }\n+  // { dg-message \".std::cin. is defined in header .<iostream>.; did you forget to .#include <iostream>.?\" \"\" { target *-*-* } .-1 }\n+\n+  std::array a; // { dg-error \".array. is not a member of .std.\" }\n+  // { dg-message \".std::array. is defined in header .<array>.; did you forget to .#include <array>.?\" \"\" { target *-*-* } .-1 }\n+\n+  std::deque a; // { dg-error \".deque. is not a member of .std.\" }\n+  // { dg-message \".std::deque. is defined in header .<deque>.; did you forget to .#include <deque>.?\" \"\" { target *-*-* } .-1 }\n+\n+  std::vector<int> v; // { dg-error \".vector. is not a member of .std.\" }\n+  // { dg-message \".std::vector. is defined in header .<vector>.; did you forget to .#include <vector>.?\" \"\" { target *-*-* } .-1 }\n+  // { dg-error \"expected primary-expression before .int.\" \"\" { target *-*-* } .-2 }\n+\n+  std::list<int> lst;  // { dg-error \".list. is not a member of .std.\" }\n+  // { dg-message \".std::list. is defined in header .<list>.; did you forget to .#include <list>.?\" \"\" { target *-*-* } .-1 }\n+  // { dg-error \"expected primary-expression before .int.\" \"\" { target *-*-* } .-2 }\n+}"}]}