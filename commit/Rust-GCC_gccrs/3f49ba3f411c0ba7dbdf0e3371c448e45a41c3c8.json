{"sha": "3f49ba3f411c0ba7dbdf0e3371c448e45a41c3c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y0OWJhM2Y0MTFjMGJhN2RiZGYwZTMzNzFjNDQ4ZTQ1YTQxYzNjOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-10-09T12:44:59Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-10-09T12:44:59Z"}, "message": "re PR tree-optimization/40071 (ICE (aliasing assert) in vectorizable_store at tree-vect-stmts.c:3117)\n\n\tPR tree-optimization/40071\n\t* tree-vect-data-refs.c (vect_create_data_ref_ptr): Build a ref-all\n\tpointer if the original data reference doesn't conflict with the\n\tcreated vector data reference.  Fix long line.\n\nFrom-SVN: r152585", "tree": {"sha": "91e4185562fe3e96b03d4e888f1f1d690759dd6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91e4185562fe3e96b03d4e888f1f1d690759dd6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f49ba3f411c0ba7dbdf0e3371c448e45a41c3c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f49ba3f411c0ba7dbdf0e3371c448e45a41c3c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f49ba3f411c0ba7dbdf0e3371c448e45a41c3c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f49ba3f411c0ba7dbdf0e3371c448e45a41c3c8/comments", "author": null, "committer": null, "parents": [{"sha": "857607344f59fbda12a3b64579491434a59175b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/857607344f59fbda12a3b64579491434a59175b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/857607344f59fbda12a3b64579491434a59175b7"}], "stats": {"total": 54, "additions": 47, "deletions": 7}, "files": [{"sha": "5a28e87de37446005ff948b22865a618188869d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f49ba3f411c0ba7dbdf0e3371c448e45a41c3c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f49ba3f411c0ba7dbdf0e3371c448e45a41c3c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f49ba3f411c0ba7dbdf0e3371c448e45a41c3c8", "patch": "@@ -1,3 +1,10 @@\n+2009-10-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/40071\n+\t* tree-vect-data-refs.c (vect_create_data_ref_ptr): Build a ref-all\n+\tpointer if the original data reference doesn't conflict with the\n+\tcreated vector data reference.  Fix long line.\n+\n 2009-10-09  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (any_div): New code iterator."}, {"sha": "c4c3da720aaa6c8ed54ac187ede0664d5a3887ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f49ba3f411c0ba7dbdf0e3371c448e45a41c3c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f49ba3f411c0ba7dbdf0e3371c448e45a41c3c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3f49ba3f411c0ba7dbdf0e3371c448e45a41c3c8", "patch": "@@ -1,3 +1,8 @@\n+2009-10-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt3.adb: New test.\n+\t* gnat.dg/opt3_pkg.ads: New helper.\n+\n 2009-10-08  Doug Kwan  <dougkwan@google.com>\n \n \tPR rtl-optimization/41574"}, {"sha": "b8ca2c7fba61aed36958f29c654ced8993c042a7", "filename": "gcc/testsuite/gnat.dg/opt3.adb", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f49ba3f411c0ba7dbdf0e3371c448e45a41c3c8/gcc%2Ftestsuite%2Fgnat.dg%2Fopt3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f49ba3f411c0ba7dbdf0e3371c448e45a41c3c8/gcc%2Ftestsuite%2Fgnat.dg%2Fopt3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt3.adb?ref=3f49ba3f411c0ba7dbdf0e3371c448e45a41c3c8", "patch": "@@ -0,0 +1,11 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O3\" }\n+\n+with Opt3_Pkg; use Opt3_Pkg;\n+\n+procedure Opt3 is\n+  type Buffer_Type is array (Integer range <> ) of Short_Integer;\n+  B : Buffer_Type (1 .. 256) := (others => 0);\n+begin\n+  F (B(1));\n+end;"}, {"sha": "458a98be2de07b39a0fbb6274f98b6234de3727b", "filename": "gcc/testsuite/gnat.dg/opt3_pkg.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f49ba3f411c0ba7dbdf0e3371c448e45a41c3c8/gcc%2Ftestsuite%2Fgnat.dg%2Fopt3_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f49ba3f411c0ba7dbdf0e3371c448e45a41c3c8/gcc%2Ftestsuite%2Fgnat.dg%2Fopt3_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt3_pkg.ads?ref=3f49ba3f411c0ba7dbdf0e3371c448e45a41c3c8", "patch": "@@ -0,0 +1,5 @@\n+package Opt3_Pkg is\n+\n+  procedure F (I : Short_Integer);\n+\n+end Opt3_Pkg;"}, {"sha": "c3570d31948ba6a1e99ec95fed28698d8f0aa10a", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f49ba3f411c0ba7dbdf0e3371c448e45a41c3c8/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f49ba3f411c0ba7dbdf0e3371c448e45a41c3c8/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=3f49ba3f411c0ba7dbdf0e3371c448e45a41c3c8", "patch": "@@ -2369,9 +2369,20 @@ vect_create_data_ref_ptr (gimple stmt, struct loop *at_loop,\n   vect_ptr_type = build_pointer_type (vectype);\n   vect_ptr = vect_get_new_vect_var (vect_ptr_type, vect_pointer_var,\n                                     get_name (base_name));\n-  /* If any of the data-references in the stmt group does not conflict\n-     with the created vector data-reference use a ref-all pointer instead.  */\n-  if (STMT_VINFO_DR_GROUP_SIZE (stmt_info) > 1)\n+\n+  /* Vector types inherit the alias set of their component type by default so\n+     we need to use a ref-all pointer if the data reference does not conflict\n+     with the created vector data reference because it is not addressable.  */\n+  if (!alias_sets_conflict_p (get_deref_alias_set (vect_ptr),\n+\t\t\t      get_alias_set (DR_REF (dr))))\n+    {\n+      vect_ptr_type = build_pointer_type_for_mode (vectype, ptr_mode, true);\n+      vect_ptr = vect_get_new_vect_var (vect_ptr_type, vect_pointer_var,\n+\t\t\t\t\tget_name (base_name));\n+    }\n+\n+  /* Likewise for any of the data references in the stmt group.  */\n+  else if (STMT_VINFO_DR_GROUP_SIZE (stmt_info) > 1)\n     {\n       gimple orig_stmt = STMT_VINFO_DR_GROUP_FIRST_DR (stmt_info);\n       do\n@@ -2380,10 +2391,11 @@ vect_create_data_ref_ptr (gimple stmt, struct loop *at_loop,\n \t  if (!alias_sets_conflict_p (get_deref_alias_set (vect_ptr),\n \t\t\t\t      get_alias_set (lhs)))\n \t    {\n-\t      vect_ptr_type = build_pointer_type_for_mode (vectype,\n-\t\t\t\t\t\t\t   ptr_mode, true);\n-\t      vect_ptr = vect_get_new_vect_var (vect_ptr_type, vect_pointer_var,\n-\t\t\t\t\t\tget_name (base_name));\n+\t      vect_ptr_type\n+\t\t= build_pointer_type_for_mode (vectype, ptr_mode, true);\n+\t      vect_ptr\n+\t\t= vect_get_new_vect_var (vect_ptr_type, vect_pointer_var,\n+\t\t\t\t\t get_name (base_name));\n \t      break;\n \t    }\n "}]}