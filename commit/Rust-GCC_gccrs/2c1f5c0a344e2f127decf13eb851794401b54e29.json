{"sha": "2c1f5c0a344e2f127decf13eb851794401b54e29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMxZjVjMGEzNDRlMmYxMjdkZWNmMTNlYjg1MTc5NDQwMWI1NGUyOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-12-07T11:25:37Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-12-07T11:25:37Z"}, "message": "decl.c (gnat_to_gnu_entity): Also call finish_character_type on Character subtypes.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Enumeration_Subtype>:\n\tAlso call finish_character_type on Character subtypes.\n\t* gcc-interface/utils.c (finish_character_type): Deal with subtypes.\n\nFrom-SVN: r243336", "tree": {"sha": "efc3d68cffe4464a093b03e2fcf0fe887eb3b0cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efc3d68cffe4464a093b03e2fcf0fe887eb3b0cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c1f5c0a344e2f127decf13eb851794401b54e29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c1f5c0a344e2f127decf13eb851794401b54e29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c1f5c0a344e2f127decf13eb851794401b54e29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c1f5c0a344e2f127decf13eb851794401b54e29/comments", "author": null, "committer": null, "parents": [{"sha": "ebf417348808be4608fd44ba3b2863b735b4324e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebf417348808be4608fd44ba3b2863b735b4324e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebf417348808be4608fd44ba3b2863b735b4324e"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "3087a1b72cdbfaceb9ba1280953c9b5c330005c3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c1f5c0a344e2f127decf13eb851794401b54e29/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c1f5c0a344e2f127decf13eb851794401b54e29/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2c1f5c0a344e2f127decf13eb851794401b54e29", "patch": "@@ -1,3 +1,9 @@\n+2016-12-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Enumeration_Subtype>:\n+\tAlso call finish_character_type on Character subtypes.\n+\t* gcc-interface/utils.c (finish_character_type): Deal with subtypes.\n+\n 2016-12-05  Mikael Pettersson  <mikpe@it.uu.se>\n \n \tPR ada/48835"}, {"sha": "2412a36d984231d58b89c330e727c96c3bc6f094", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c1f5c0a344e2f127decf13eb851794401b54e29/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c1f5c0a344e2f127decf13eb851794401b54e29/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=2c1f5c0a344e2f127decf13eb851794401b54e29", "patch": "@@ -1859,8 +1859,14 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n       TYPE_BIASED_REPRESENTATION_P (gnu_type)\n \t= Has_Biased_Representation (gnat_entity);\n \n-      /* Set TYPE_STRING_FLAG for Character and Wide_Character subtypes.  */\n-      TYPE_STRING_FLAG (gnu_type) = TYPE_STRING_FLAG (TREE_TYPE (gnu_type));\n+      /* Do the same processing for Character subtypes as for types.  */\n+      if (TYPE_STRING_FLAG (TREE_TYPE (gnu_type)))\n+\t{\n+\t  TYPE_NAME (gnu_type) = gnu_entity_name;\n+\t  TYPE_STRING_FLAG (gnu_type) = 1;\n+\t  TYPE_ARTIFICIAL (gnu_type) = artificial_p;\n+\t  finish_character_type (gnu_type);\n+\t}\n \n       /* Inherit our alias set from what we're a subtype of.  Subtypes\n \t are not different types and a pointer can designate any instance"}, {"sha": "c00d1fa78f4bcfd99206aa8795c83f3c141c2d59", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c1f5c0a344e2f127decf13eb851794401b54e29/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c1f5c0a344e2f127decf13eb851794401b54e29/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=2c1f5c0a344e2f127decf13eb851794401b54e29", "patch": "@@ -1641,10 +1641,7 @@ record_builtin_type (const char *name, tree type, bool artificial_p)\n   character subtypes with RM_Size = Esize = CHAR_TYPE_SIZE into signed\n   types.  The idea is to ensure that the bit pattern contained in the\n   Esize'd objects is not changed, even though the numerical value will\n-  be interpreted differently depending on the signedness.\n-\n-  For character types, the bounds are implicit and, therefore, need to\n-  be adjusted.  Morever, the debug info needs the unsigned version.  */\n+  be interpreted differently depending on the signedness.  */\n \n void\n finish_character_type (tree char_type)\n@@ -1658,11 +1655,32 @@ finish_character_type (tree char_type)\n        ? unsigned_char_type_node\n        : copy_type (gnat_unsigned_type_for (char_type)));\n \n+  /* Create an unsigned version of the type and set it as debug type.  */\n   TYPE_NAME (unsigned_char_type) = TYPE_NAME (char_type);\n   TYPE_STRING_FLAG (unsigned_char_type) = TYPE_STRING_FLAG (char_type);\n   TYPE_ARTIFICIAL (unsigned_char_type) = TYPE_ARTIFICIAL (char_type);\n-\n   SET_TYPE_DEBUG_TYPE (char_type, unsigned_char_type);\n+\n+  /* If this is a subtype, make the debug type a subtype of the debug type\n+     of the base type and convert literal bounds to unsigned.  */\n+  if (TREE_TYPE (char_type))\n+    {\n+      tree base_unsigned_char_type = TYPE_DEBUG_TYPE (TREE_TYPE (char_type));\n+      tree min_value = TYPE_MIN_VALUE (char_type);\n+      tree max_value = TYPE_MAX_VALUE (char_type);\n+\n+      if (TREE_CODE (min_value) == INTEGER_CST)\n+\tmin_value = fold_convert (base_unsigned_char_type, min_value);\n+      if (TREE_CODE (max_value) == INTEGER_CST)\n+\tmax_value = fold_convert (base_unsigned_char_type, max_value);\n+\n+      TREE_TYPE (unsigned_char_type) = base_unsigned_char_type;\n+      SET_TYPE_RM_MIN_VALUE (unsigned_char_type, min_value);\n+      SET_TYPE_RM_MAX_VALUE (unsigned_char_type, max_value);\n+    }\n+\n+  /* Adjust the bounds of the original type to unsigned; that's especially\n+     important for types since they are implicit in this case.  */\n   SET_TYPE_RM_MIN_VALUE (char_type, TYPE_MIN_VALUE (unsigned_char_type));\n   SET_TYPE_RM_MAX_VALUE (char_type, TYPE_MAX_VALUE (unsigned_char_type));\n }"}]}