{"sha": "4dd8320fbb787527b417ba7e69ae3786b511e813", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRkODMyMGZiYjc4NzUyN2I0MTdiYTdlNjlhZTM3ODZiNTExZTgxMw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-12-12T10:03:48Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-12-12T10:03:48Z"}, "message": "[Ada] Spurious error on universal access equality operator\n\n2019-12-12  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_type.adb (Find_Unique_Type): A call to the universal\n\taccess equality operator requires one operand to be a universal\n\taccess, and the other to be an access type. There is no\n\trequirement, as previously implied by this routine, that\n\tpool-specific access types were illegal in this context.\n\nFrom-SVN: r279304", "tree": {"sha": "729d5f3b2b3b7772c240702c5fa8bec56bb9711e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/729d5f3b2b3b7772c240702c5fa8bec56bb9711e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dd8320fbb787527b417ba7e69ae3786b511e813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dd8320fbb787527b417ba7e69ae3786b511e813", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dd8320fbb787527b417ba7e69ae3786b511e813", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dd8320fbb787527b417ba7e69ae3786b511e813/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "97b2ffb81fdef1f0c2dc3ec337a9d9a61f3b98fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97b2ffb81fdef1f0c2dc3ec337a9d9a61f3b98fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97b2ffb81fdef1f0c2dc3ec337a9d9a61f3b98fc"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "f18df8288961f8077b3a6aa8daf486921a10e8e4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd8320fbb787527b417ba7e69ae3786b511e813/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd8320fbb787527b417ba7e69ae3786b511e813/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4dd8320fbb787527b417ba7e69ae3786b511e813", "patch": "@@ -1,3 +1,11 @@\n+2019-12-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_type.adb (Find_Unique_Type): A call to the universal\n+\taccess equality operator requires one operand to be a universal\n+\taccess, and the other to be an access type. There is no\n+\trequirement, as previously implied by this routine, that\n+\tpool-specific access types were illegal in this context.\n+\n 2019-12-12  Steve Baird  <baird@adacore.com>\n \n \t* sem_ch6.adb"}, {"sha": "e5d01dd095cb34e9df2a041a4d710c77f5cda458", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd8320fbb787527b417ba7e69ae3786b511e813/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd8320fbb787527b417ba7e69ae3786b511e813/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=4dd8320fbb787527b417ba7e69ae3786b511e813", "patch": "@@ -2286,20 +2286,20 @@ package body Sem_Type is\n       --  ration \"type P is access Integer\" and an anonymous access to Integer,\n       --  P is convertible to \"access Integer\" by 4.6 (24.11-24.15), but there\n       --  is no rule in 4.6 that allows \"access Integer\" to be converted to P.\n+      --  Note that this does not preclude one operand to be a pool-specific\n+      --  access type, as a previous version of this code enforced.\n \n       elsif Ada_Version >= Ada_2005\n         and then Ekind_In (Etype (L), E_Anonymous_Access_Type,\n                                       E_Anonymous_Access_Subprogram_Type)\n         and then Is_Access_Type (Etype (R))\n-        and then Ekind (Etype (R)) /= E_Access_Type\n       then\n          return Etype (L);\n \n       elsif Ada_Version >= Ada_2005\n         and then Ekind_In (Etype (R), E_Anonymous_Access_Type,\n                                       E_Anonymous_Access_Subprogram_Type)\n         and then Is_Access_Type (Etype (L))\n-        and then Ekind (Etype (L)) /= E_Access_Type\n       then\n          return Etype (R);\n "}]}