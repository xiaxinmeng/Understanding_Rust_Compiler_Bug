{"sha": "4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU5ZGI4YjIzNWNmOGY5YmY3YjE3YTlhYjA0OThjOTdhNWRjYTg0ZA==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2005-02-25T21:34:49Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2005-02-25T21:34:49Z"}, "message": "re PR target/19930 (gcc.dg/pr19402-2.c fails on ia64-hpux)\n\n\tPR target/19930\n\t* doc/tm.texi (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Document.\n\t(LIBGCC2_HAS_DF_MODE): New.\n\t(LIBGCC2_HAS_XF_MODE): New.\n\t(LIBGCC2_HAS_TF_MODE): New.\n\t* libgcc2.h (LIBGCC2_HAS_XF_MODE): New name for HAVE_XFMODE.\n\t(LIBGCC2_HAS_TF_MODE): New name for HAVE_TFMODE.\n\t* libgcc2.c (LIBGCC2_HAS_XF_MODE): New name for HAVE_XFMODE.\n\t(LIBGCC2_HAS_TF_MODE): New name for HAVE_TFMODE.\n\t(LIBGCC2_HAS_DF_MODE): New name for HAVE_DFMODE.\n\t* config/ia64/t-ia64 (LIB1ASMFUNCS): Remove __compat\n\tand add _fixtfdi, _fixunstfdi, _floatditf\n\t* lib1funcs.asm: Remove L__compat. Add L_fixtfdi,\n\tL_fixunstfdi, L_floatditf.\n\t* config/ia64/hpux.h (LIBGCC2_HAS_XF_MODE): Define.\n\t(LIBGCC2_HAS_TF_MODE): Define.\n\nFrom-SVN: r95548", "tree": {"sha": "2ce5281f930f8cb8c41a76ab51c238a6db47ff1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ce5281f930f8cb8c41a76ab51c238a6db47ff1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d/comments", "author": null, "committer": null, "parents": [{"sha": "736c86ad8305637ba08f5c78a13c749dba13bffc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/736c86ad8305637ba08f5c78a13c749dba13bffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/736c86ad8305637ba08f5c78a13c749dba13bffc"}], "stats": {"total": 136, "additions": 102, "deletions": 34}, "files": [{"sha": "ab87033327c0c8ea43204a0e7a3a34b6c6885872", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d", "patch": "@@ -1,3 +1,22 @@\n+2005-02-25  Steve Ellcey  <sje@cup.hp.com>\n+\n+\tPR target/19930\n+\t* doc/tm.texi (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Document.\n+\t(LIBGCC2_HAS_DF_MODE): New.\n+\t(LIBGCC2_HAS_XF_MODE): New.\n+\t(LIBGCC2_HAS_TF_MODE): New.\n+\t* libgcc2.h (LIBGCC2_HAS_XF_MODE): New name for HAVE_XFMODE.\n+\t(LIBGCC2_HAS_TF_MODE): New name for HAVE_TFMODE.\n+\t* libgcc2.c (LIBGCC2_HAS_XF_MODE): New name for HAVE_XFMODE.\n+\t(LIBGCC2_HAS_TF_MODE): New name for HAVE_TFMODE.\n+\t(LIBGCC2_HAS_DF_MODE): New name for HAVE_DFMODE.\n+\t* config/ia64/t-ia64 (LIB1ASMFUNCS): Remove __compat\n+\tand add _fixtfdi, _fixunstfdi, _floatditf\n+\t* lib1funcs.asm: Remove L__compat. Add L_fixtfdi,\n+\tL_fixunstfdi, L_floatditf.\n+\t* config/ia64/hpux.h (LIBGCC2_HAS_XF_MODE): Define.\n+\t(LIBGCC2_HAS_TF_MODE): Define.\n+\n 2005-02-25  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR tree-optimization/20204"}, {"sha": "5b4f0470f0860df16956f0b2ac3e010706169d77", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d", "patch": "@@ -202,3 +202,11 @@ do {\t\t\t\t\t\t\t\t\\\n #define TARGET_INIT_LIBFUNCS ia64_hpux_init_libfuncs\n \n #define FLOAT_LIB_COMPARE_RETURNS_BOOL(MODE, COMPARISON) ((MODE) == TFmode)\n+\n+/* Put all *xf routines in libgcc, regardless of long double size.  */\n+#undef LIBGCC2_HAS_XF_MODE\n+#define LIBGCC2_HAS_XF_MODE 1\n+\n+/* Put all *tf routines in libgcc, regardless of long double size.  */\n+#undef LIBGCC2_HAS_TF_MODE\n+#define LIBGCC2_HAS_TF_MODE 1"}, {"sha": "68ee421ff6575757e1dca556cb0f727b1c53dbfc", "filename": "gcc/config/ia64/lib1funcs.asm", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d/gcc%2Fconfig%2Fia64%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d/gcc%2Fconfig%2Fia64%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Flib1funcs.asm?ref=4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d", "patch": "@@ -706,9 +706,8 @@ __ia64_trampoline:\n \t.endp __ia64_trampoline\n #endif\n \n-#ifdef L__compat\n // Thunks for backward compatibility.\n-\n+#ifdef L_fixtfdi\n \t.text\n \t.align 16\n \t.global __fixtfti\n@@ -719,7 +718,8 @@ __fixtfti:\n \t  ;;\n \t}\n \t.endp __fixtfti\n-\n+#endif\n+#ifdef L_fixunstfdi\n \t.align 16\n \t.global __fixunstfti\n \t.proc __fixunstfti\n@@ -729,7 +729,8 @@ __fixunstfti:\n \t  ;;\n \t}\n \t.endp __fixunstfti\n-\n+#endif\n+#if L_floatditf\n \t.align 16\n \t.global __floattitf\n \t.proc __floattitf\n@@ -739,5 +740,4 @@ __floattitf:\n \t  ;;\n \t}\n \t.endp __floattitf\n-\n #endif"}, {"sha": "824cc4113c40035183d3f88e6f40f707f0e9dfe2", "filename": "gcc/config/ia64/t-ia64", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d/gcc%2Fconfig%2Fia64%2Ft-ia64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d/gcc%2Fconfig%2Fia64%2Ft-ia64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-ia64?ref=4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d", "patch": "@@ -8,7 +8,8 @@ LIB1ASMSRC    = ia64/lib1funcs.asm\n LIB1ASMFUNCS  = __divxf3 __divdf3 __divsf3 \\\n \t__divdi3 __moddi3 __udivdi3 __umoddi3 \\\n \t__divsi3 __modsi3 __udivsi3 __umodsi3 __save_stack_nonlocal \\\n-\t__nonlocal_goto __restore_stack_nonlocal __trampoline __compat\n+\t__nonlocal_goto __restore_stack_nonlocal __trampoline \\\n+\t_fixtfdi _fixunstfdi _floatditf\n \n # ??? Hack to get -P option used when compiling lib1funcs.asm, because Intel\n # assembler does not accept # line number as a comment."}, {"sha": "625af4b62789efe20746f3d8eee956ace67ef162", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d", "patch": "@@ -1635,6 +1635,36 @@ the target machine.  If you don't define this, the default is two\n words.\n @end defmac\n \n+@defmac LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n+Define this macro if @code{LONG_DOUBLE_TYPE_SIZE} is not constant or\n+if you want routines in @file{libgcc2.a} for a size other than\n+@code{LONG_DOUBLE_TYPE_SIZE}.  If you don't define this, the\n+default is @code{LONG_DOUBLE_TYPE_SIZE}.\n+@end defmac\n+\n+@defmac LIBGCC2_HAS_DF_MODE\n+Define this macro if neither @code{LIBGCC2_DOUBLE_TYPE_SIZE} nor \n+@code{LIBGCC2_LONG_DOUBLE_TYPE_SIZE} is\n+@code{DFmode} but you want @code{DFmode} routines in @file{libgcc2.a}\n+anyway.  If you don't define this and either @code{LIBGCC2_DOUBLE_TYPE_SIZE}\n+or @code{LIBGCC2_LONG_DOUBLE_TYPE_SIZE} is 64 then the default is 1,\n+otherwise it is 0.\n+@end defmac\n+\n+@defmac LIBGCC2_HAS_XF_MODE\n+Define this macro if @code{LIBGCC2_LONG_DOUBLE_TYPE_SIZE} is not \n+@code{XFmode} but you want @code{XFmode} routines in @file{libgcc2.a}\n+anyway.  If you don't define this and @code{LIBGCC2_LONG_DOUBLE_TYPE_SIZE}\n+is 80 then the default is 1, otherwise it is 0.\n+@end defmac\n+\n+@defmac LIBGCC2_HAS_TF_MODE\n+Define this macro if @code{LIBGCC2_LONG_DOUBLE_TYPE_SIZE} is not \n+@code{TFmode} but you want @code{TFmode} routines in @file{libgcc2.a}\n+anyway.  If you don't define this and @code{LIBGCC2_LONG_DOUBLE_TYPE_SIZE}\n+is 128 then the default is 1, otherwise it is 0.\n+@end defmac\n+\n @defmac TARGET_FLT_EVAL_METHOD\n A C expression for the value for @code{FLT_EVAL_METHOD} in @file{float.h},\n assuming, if applicable, that the floating-point control word is in its"}, {"sha": "68623c371223ac22f2ece352c4c50445274e2e6d", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d", "patch": "@@ -1155,7 +1155,7 @@ __ucmpdi2 (DWtype a, DWtype b)\n }\n #endif\n \f\n-#if defined(L_fixunstfdi) && defined(HAVE_TFMODE)\n+#if defined(L_fixunstfdi) && LIBGCC2_HAS_TF_MODE\n DWtype\n __fixunstfDI (TFtype a)\n {\n@@ -1181,7 +1181,7 @@ __fixunstfDI (TFtype a)\n }\n #endif\n \n-#if defined(L_fixtfdi) && defined(HAVE_TFMODE)\n+#if defined(L_fixtfdi) && LIBGCC2_HAS_TF_MODE\n DWtype\n __fixtfdi (TFtype a)\n {\n@@ -1191,7 +1191,7 @@ __fixtfdi (TFtype a)\n }\n #endif\n \n-#if defined(L_fixunsxfdi) && defined(HAVE_XFMODE)\n+#if defined(L_fixunsxfdi) && LIBGCC2_HAS_XF_MODE\n DWtype\n __fixunsxfDI (XFtype a)\n {\n@@ -1217,7 +1217,7 @@ __fixunsxfDI (XFtype a)\n }\n #endif\n \n-#if defined(L_fixxfdi) && defined(HAVE_XFMODE)\n+#if defined(L_fixxfdi) && LIBGCC2_HAS_XF_MODE\n DWtype\n __fixxfdi (XFtype a)\n {\n@@ -1227,7 +1227,7 @@ __fixxfdi (XFtype a)\n }\n #endif\n \n-#if defined(L_fixunsdfdi) && defined(HAVE_DFMODE)\n+#if defined(L_fixunsdfdi) && LIBGCC2_HAS_DF_MODE\n DWtype\n __fixunsdfDI (DFtype a)\n {\n@@ -1246,7 +1246,7 @@ __fixunsdfDI (DFtype a)\n }\n #endif\n \n-#if defined(L_fixdfdi) && defined(HAVE_DFMODE)\n+#if defined(L_fixdfdi) && LIBGCC2_HAS_DF_MODE\n DWtype\n __fixdfdi (DFtype a)\n {\n@@ -1260,7 +1260,7 @@ __fixdfdi (DFtype a)\n DWtype\n __fixunssfDI (SFtype a)\n {\n-#if defined(HAVE_DFMODE)\n+#if LIBGCC2_HAS_DF_MODE\n   /* Convert the SFtype to a DFtype, because that is surely not going\n      to lose any bits.  Some day someone else can write a faster version\n      that avoids converting to DFtype, and verify it really works right.  */\n@@ -1330,7 +1330,7 @@ __fixsfdi (SFtype a)\n }\n #endif\n \n-#if defined(L_floatdixf) && defined(HAVE_XFMODE)\n+#if defined(L_floatdixf) && LIBGCC2_HAS_XF_MODE\n XFtype\n __floatdixf (DWtype u)\n {\n@@ -1341,7 +1341,7 @@ __floatdixf (DWtype u)\n }\n #endif\n \n-#if defined(L_floatditf) && defined(HAVE_TFMODE)\n+#if defined(L_floatditf) && LIBGCC2_HAS_TF_MODE\n TFtype\n __floatditf (DWtype u)\n {\n@@ -1352,7 +1352,7 @@ __floatditf (DWtype u)\n }\n #endif\n \n-#if defined(L_floatdidf) && defined(HAVE_DFMODE)\n+#if defined(L_floatdidf) && LIBGCC2_HAS_DF_MODE\n DFtype\n __floatdidf (DWtype u)\n {\n@@ -1376,7 +1376,7 @@ __floatdisf (DWtype u)\n   f *= Wtype_MAXp1_F;\n   f += (UWtype)u;\n   return f;\n-#elif defined(HAVE_DFMODE)\n+#elif LIBGCC2_HAS_DF_MODE\n \n #if LIBGCC2_DOUBLE_TYPE_SIZE == 64\n #define DF_SIZE DBL_MANT_DIG\n@@ -1451,7 +1451,7 @@ __floatdisf (DWtype u)\n }\n #endif\n \n-#if defined(L_fixunsxfsi) && defined(HAVE_XFMODE)\n+#if defined(L_fixunsxfsi) && LIBGCC2_HAS_XF_MODE\n /* Reenable the normal types, in case limits.h needs them.  */\n #undef char\n #undef short\n@@ -1473,7 +1473,7 @@ __fixunsxfSI (XFtype a)\n }\n #endif\n \n-#if defined(L_fixunsdfsi) && defined(HAVE_DFMODE)\n+#if defined(L_fixunsdfsi) && LIBGCC2_HAS_DF_MODE\n /* Reenable the normal types, in case limits.h needs them.  */\n #undef char\n #undef short\n@@ -1521,9 +1521,9 @@ __fixunssfSI (SFtype a)\n    exponents.  */\n \n #if defined(L_powisf2) \\\n-    || (defined(L_powidf2) && defined(HAVE_DFMODE)) \\\n-    || (defined(L_powixf2) && defined(HAVE_XFMODE)) \\\n-    || (defined(L_powitf2) && defined(HAVE_TFMODE))\n+    || (defined(L_powidf2) && LIBGCC2_HAS_DF_MODE) \\\n+    || (defined(L_powixf2) && LIBGCC2_HAS_XF_MODE) \\\n+    || (defined(L_powitf2) && LIBGCC2_HAS_TF_MODE)\n # if defined(L_powisf2)\n #  define TYPE SFtype\n #  define NAME __powisf2\n@@ -1555,9 +1555,9 @@ NAME (TYPE x, Wtype m)\n #endif\n \f\n #if defined(L_mulsc3) || defined(L_divsc3) \\\n-    || ((defined(L_muldc3) || defined(L_divdc3)) && defined(HAVE_DFMODE)) \\\n-    || ((defined(L_mulxc3) || defined(L_divxc3)) && defined(HAVE_XFMODE)) \\\n-    || ((defined(L_multc3) || defined(L_divtc3)) && defined(HAVE_TFMODE))\n+    || ((defined(L_muldc3) || defined(L_divdc3)) && LIBGCC2_HAS_DF_MODE) \\\n+    || ((defined(L_mulxc3) || defined(L_divxc3)) && LIBGCC2_HAS_XF_MODE) \\\n+    || ((defined(L_multc3) || defined(L_divtc3)) && LIBGCC2_HAS_TF_MODE)\n \n #undef float\n #undef double"}, {"sha": "d1df220f9dd1f37cbd3ac271f2a31dbf44760fc6", "filename": "gcc/libgcc2.h", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d/gcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d/gcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.h?ref=4e9db8b235cf8f9bf7b17a9ab0498c97a5dca84d", "patch": "@@ -58,6 +58,19 @@ extern short int __get_eh_table_version (struct exception_descriptor *);\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE LONG_DOUBLE_TYPE_SIZE\n #endif\n \n+#ifndef LIBGCC2_HAS_DF_MODE\n+#define LIBGCC2_HAS_DF_MODE \\\n+  (LIBGCC2_DOUBLE_TYPE_SIZE == 64 || LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 64)\n+#endif\n+\n+#ifndef LIBGCC2_HAS_XF_MODE\n+#define LIBGCC2_HAS_XF_MODE (LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 80)\n+#endif\n+\n+#ifndef LIBGCC2_HAS_TF_MODE\n+#define LIBGCC2_HAS_TF_MODE (LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 128)\n+#endif\n+\n #ifndef MIN_UNITS_PER_WORD\n #define MIN_UNITS_PER_WORD UNITS_PER_WORD\n #endif\n@@ -96,18 +109,15 @@ typedef unsigned int UTItype\t__attribute__ ((mode (TI)));\n typedef \tfloat SFtype\t__attribute__ ((mode (SF)));\n typedef _Complex float SCtype\t__attribute__ ((mode (SC)));\n \n-#if LIBGCC2_DOUBLE_TYPE_SIZE == 64 || LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 64\n-#define HAVE_DFMODE\n+#if LIBGCC2_HAS_DF_MODE\n typedef\t\tfloat DFtype\t__attribute__ ((mode (DF)));\n typedef _Complex float DCtype\t__attribute__ ((mode (DC)));\n #endif\n-#if LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 80\n-#define HAVE_XFMODE\n+#if LIBGCC2_HAS_XF_MODE\n typedef\t\tfloat XFtype\t__attribute__ ((mode (XF)));\n typedef _Complex float XCtype\t__attribute__ ((mode (XC)));\n #endif\n-#if LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 128\n-#define HAVE_TFMODE\n+#if LIBGCC2_HAS_TF_MODE\n typedef\t\tfloat TFtype\t__attribute__ ((mode (TF)));\n typedef _Complex float TCtype\t__attribute__ ((mode (TC)));\n #endif\n@@ -329,7 +339,7 @@ extern SFtype __powisf2 (SFtype, Wtype);\n extern SCtype __divsc3 (SFtype, SFtype, SFtype, SFtype);\n extern SCtype __mulsc3 (SFtype, SFtype, SFtype, SFtype);\n \n-#ifdef HAVE_DFMODE\n+#if LIBGCC2_HAS_DF_MODE\n extern DWtype __fixdfdi (DFtype);\n extern DFtype __floatdidf (DWtype);\n extern UWtype __fixunsdfSI (DFtype);\n@@ -339,7 +349,7 @@ extern DCtype __divdc3 (DFtype, DFtype, DFtype, DFtype);\n extern DCtype __muldc3 (DFtype, DFtype, DFtype, DFtype);\n #endif\n \n-#ifdef HAVE_XFMODE\n+#if LIBGCC2_HAS_XF_MODE\n extern DWtype __fixxfdi (XFtype);\n extern DWtype __fixunsxfDI (XFtype);\n extern XFtype __floatdixf (DWtype);\n@@ -349,7 +359,7 @@ extern XCtype __divxc3 (XFtype, XFtype, XFtype, XFtype);\n extern XCtype __mulxc3 (XFtype, XFtype, XFtype, XFtype);\n #endif\n \n-#ifdef HAVE_TFMODE\n+#if LIBGCC2_HAS_TF_MODE\n extern DWtype __fixunstfDI (TFtype);\n extern DWtype __fixtfdi (TFtype);\n extern TFtype __floatditf (DWtype);"}]}