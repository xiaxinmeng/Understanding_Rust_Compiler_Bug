{"sha": "5368023839d4bfc78f980692670be093cf2fdf2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM2ODAyMzgzOWQ0YmZjNzhmOTgwNjkyNjcwYmUwOTNjZjJmZGYyZg==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2016-09-09T23:08:54Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2016-09-09T23:08:54Z"}, "message": "tm.texi.in (INITIAL_FRAME_POINTER_OFFSET): Remove.\n\n2016-09-10  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * doc/tm.texi.in (INITIAL_FRAME_POINTER_OFFSET): Remove.\n        (ELIMINABLE_REGS, TARGET_CAN_ELIMINATE,\n        INITIAL_ELIMINATION_OFFSET) : Update documentation.\n        * target.def (frame_pointer_required, can_eliminate): Likewise.\n        * doc/tm.texi: Regenerated.\n        * builtins.c (expand_builtin_setjmp_receiver): Remove #ifdef\n        ELIMINABLE_REGS.\n        * df-scan.c (df_hard_reg_init): Likewise.\n        * ira.c (ira_setup_eliminable_regset): Likewise.\n        * lra-eliminations.c (reg_eliminate_1, (update_reg_eliminate,\n        init_elim_table): Likewise.\n        * reload1.c (reg_eliminate_1, verify_initial_elim_offsets,\n        set_initial_elim_offsets, update_eliminables,\n        init_elim_table): Likewise.\n        * rtlanal.c (get_initial_register_offset): Likewise.\n        * config/ft32/ft32.h (INITIAL_FRAME_POINTER_OFFSET): Remove.\n        * config/m32r/m32r.h (INITIAL_FRAME_POINTER_OFFSET): Likewise.\n        * config/moxie/moxie.h (INITIAL_FRAME_POINTER_OFFSET): Likewise.\n        * config/vax/vax.h (INITIAL_FRAME_POINTER_OFFSET): Likewise.\n        * config/fr30/fr30.h: Fix comment.\n        * config/frv/frv.c: Likewise.\n        * config/frv/frv.h: Likewise.\n        * config/ft32/ft32.h: Likewise.\n        * config/visium/visium.h: Likewise.\n        * config/pa/pa64-linux.h: Likewise.\n        * config/v850/v850.h: Likewise.\n        * config/cris/cris.c: Likewise.\n        * config/ia64/ia64.h: Likewise.\n        * config/moxie/moxie.h: Likewise.\n        * config/m32r/m32r.h: Likewise.\n\nFrom-SVN: r240058", "tree": {"sha": "4d461b9c92a59711ad23eb413d2d749005c37320", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d461b9c92a59711ad23eb413d2d749005c37320"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5368023839d4bfc78f980692670be093cf2fdf2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5368023839d4bfc78f980692670be093cf2fdf2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5368023839d4bfc78f980692670be093cf2fdf2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5368023839d4bfc78f980692670be093cf2fdf2f/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7e4955774fe4e365ec762a51d90ef6365b8be315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e4955774fe4e365ec762a51d90ef6365b8be315", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e4955774fe4e365ec762a51d90ef6365b8be315"}], "stats": {"total": 315, "additions": 85, "deletions": 230}, "files": [{"sha": "eb8ad6e5a4ba1cf278dfc01ee647c26f5e091035", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5368023839d4bfc78f980692670be093cf2fdf2f", "patch": "@@ -1,3 +1,36 @@\n+2016-09-10  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* doc/tm.texi.in (INITIAL_FRAME_POINTER_OFFSET): Remove.\n+\t(ELIMINABLE_REGS, TARGET_CAN_ELIMINATE,\n+\tINITIAL_ELIMINATION_OFFSET) : Update documentation.\n+\t* target.def (frame_pointer_required, can_eliminate): Likewise.\n+\t* doc/tm.texi: Regenerated.\n+\t* builtins.c (expand_builtin_setjmp_receiver): Remove #ifdef\n+\tELIMINABLE_REGS.\n+\t* df-scan.c (df_hard_reg_init): Likewise.\n+\t* ira.c (ira_setup_eliminable_regset): Likewise.\n+\t* lra-eliminations.c (reg_eliminate_1, (update_reg_eliminate,\n+\tinit_elim_table): Likewise.\n+\t* reload1.c (reg_eliminate_1, verify_initial_elim_offsets,\n+\tset_initial_elim_offsets, update_eliminables,\n+\tinit_elim_table): Likewise.\n+\t* rtlanal.c (get_initial_register_offset): Likewise.\n+\t* config/ft32/ft32.h (INITIAL_FRAME_POINTER_OFFSET): Remove.\n+\t* config/m32r/m32r.h (INITIAL_FRAME_POINTER_OFFSET): Likewise.\n+\t* config/moxie/moxie.h (INITIAL_FRAME_POINTER_OFFSET): Likewise.\n+\t* config/vax/vax.h (INITIAL_FRAME_POINTER_OFFSET): Likewise.\n+\t* config/fr30/fr30.h: Fix comment.\n+\t* config/frv/frv.c: Likewise.\n+\t* config/frv/frv.h: Likewise.\n+\t* config/ft32/ft32.h: Likewise.\n+\t* config/visium/visium.h: Likewise.\n+\t* config/pa/pa64-linux.h: Likewise.\n+\t* config/v850/v850.h: Likewise.\n+\t* config/cris/cris.c: Likewise.\n+\t* config/ia64/ia64.h: Likewise.\n+\t* config/moxie/moxie.h: Likewise.\n+\t* config/m32r/m32r.h: Likewise.\n+\n 2016-09-10  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \n \tPR target/77267"}, {"sha": "4a2a398744b8b006f6dac5dd179f307fcad3e0ef", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=5368023839d4bfc78f980692670be093cf2fdf2f", "patch": "@@ -862,7 +862,6 @@ expand_builtin_setjmp_receiver (rtx receiver_label)\n \n   if (!HARD_FRAME_POINTER_IS_ARG_POINTER && fixed_regs[ARG_POINTER_REGNUM])\n     {\n-#ifdef ELIMINABLE_REGS\n       /* If the argument pointer can be eliminated in favor of the\n \t frame pointer, we don't need to restore it.  We assume here\n \t that if such an elimination is present, it can always be used.\n@@ -877,7 +876,6 @@ expand_builtin_setjmp_receiver (rtx receiver_label)\n \t  break;\n \n       if (i == ARRAY_SIZE (elim_regs))\n-#endif\n \t{\n \t  /* Now restore our arg pointer from the address at which it\n \t     was saved in our stack frame.  */"}, {"sha": "7a2ac81f8ffc8977dead8995d72a9fd64c62f8a5", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=5368023839d4bfc78f980692670be093cf2fdf2f", "patch": "@@ -1282,8 +1282,7 @@ cris_return_address_on_stack_for_return (void)\n     : cris_return_address_on_stack ();\n }\n \n-/* This used to be the INITIAL_FRAME_POINTER_OFFSET worker; now only\n-   handles FP -> SP elimination offset.  */\n+/* This handles FP -> SP elimination offset.  */\n \n static int\n cris_initial_frame_pointer_offset (void)"}, {"sha": "82366e35415100cbcc3ec04ee64602131ce3cc15", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=5368023839d4bfc78f980692670be093cf2fdf2f", "patch": "@@ -460,9 +460,8 @@ enum reg_class\n   {FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}\t\\\n }\n \n-/* This macro is similar to `INITIAL_FRAME_POINTER_OFFSET'.  It specifies the\n-   initial difference between the specified pair of registers.  This macro must\n-   be defined if `ELIMINABLE_REGS' is defined.  */\n+/* This macro returns the initial difference between the specified pair\n+   of registers.  */\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t\\\n      (OFFSET) = fr30_compute_frame_size (FROM, TO)\n "}, {"sha": "4bfa8273aa31e87f4012a12b7555177938c7ac05", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=5368023839d4bfc78f980692670be093cf2fdf2f", "patch": "@@ -2076,9 +2076,8 @@ frv_can_eliminate (const int from, const int to)\n           : true);\n }\n \n-/* This macro is similar to `INITIAL_FRAME_POINTER_OFFSET'.  It specifies the\n-   initial difference between the specified pair of registers.  This macro must\n-   be defined if `ELIMINABLE_REGS' is defined.  */\n+/* This function returns the initial difference between the specified\n+   pair of registers.  */\n \n /* See frv_stack_info for more details on the frv stack frame.  */\n "}, {"sha": "e7f87b1ff8854743d06b3602eeec7807e3ff52a2", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=5368023839d4bfc78f980692670be093cf2fdf2f", "patch": "@@ -1197,9 +1197,8 @@ typedef struct frv_stack {\n   {FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}\t\t\t\t\\\n }\n \n-/* This macro is similar to `INITIAL_FRAME_POINTER_OFFSET'.  It specifies the\n-   initial difference between the specified pair of registers.  This macro must\n-   be defined if `ELIMINABLE_REGS' is defined.  */\n+/* This macro returns the initial difference between the specified pair\n+   of registers.  */\n \n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t\\\n   (OFFSET) = frv_initial_elimination_offset (FROM, TO)"}, {"sha": "6bfd4851fe65e3aa2dad17f2c873deed56cd4f91", "filename": "gcc/config/ft32/ft32.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Fft32%2Fft32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Fft32%2Fft32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fft32%2Fft32.h?ref=5368023839d4bfc78f980692670be093cf2fdf2f", "patch": "@@ -250,8 +250,6 @@ enum reg_class\n    pointer to a smaller address.  */\n #define STACK_GROWS_DOWNWARD 1\n \n-#define INITIAL_FRAME_POINTER_OFFSET(DEPTH) (DEPTH) = 0\n-\n /* Offset from the frame pointer to the first local variable slot to\n    be allocated.  */\n #define STARTING_FRAME_OFFSET 0\n@@ -426,10 +424,8 @@ do { \\\n  {FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}}\n \n \n-/* This macro is similar to `INITIAL_FRAME_POINTER_OFFSET'.  It\n-   specifies the initial difference between the specified pair of\n-   registers.  This macro must be defined if `ELIMINABLE_REGS' is\n-   defined.  */\n+/* This macro returns the initial difference between the specified pair\n+   of registers.  */\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)                    \\\n   do {                                                                  \\\n     (OFFSET) = ft32_initial_elimination_offset ((FROM), (TO));            \\"}, {"sha": "daf717b949dc3c671c5c6d1a8aeb72577295e685", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=5368023839d4bfc78f980692670be093cf2fdf2f", "patch": "@@ -961,10 +961,8 @@ enum reg_class\n   {FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM},\t\t\t\\\n }\n \n-/* This macro is similar to `INITIAL_FRAME_POINTER_OFFSET'.  It\n-   specifies the initial difference between the specified pair of\n-   registers.  This macro must be defined if `ELIMINABLE_REGS' is\n-   defined.  */\n+/* This macro returns the initial difference between the specified pair\n+   of registers.  */\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n   ((OFFSET) = ia64_initial_elimination_offset ((FROM), (TO)))\n \f"}, {"sha": "cd74cfcf3b5a5f5a38a1a17fe3fe6d4cedea5edb", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=5368023839d4bfc78f980692670be093cf2fdf2f", "patch": "@@ -581,15 +581,6 @@ extern enum reg_class m32r_regno_reg_class[FIRST_PSEUDO_REGISTER];\n \f\n /* Eliminating the frame and arg pointers.  */\n \n-#if 0\n-/* C statement to store the difference between the frame pointer\n-   and the stack pointer values immediately after the function prologue.\n-   If `ELIMINABLE_REGS' is defined, this macro will be not be used and\n-   need not be defined.  */\n-#define INITIAL_FRAME_POINTER_OFFSET(VAR) \\\n-((VAR) = m32r_compute_frame_size (get_frame_size ()))\n-#endif\n-\n /* If defined, this macro specifies a table of register pairs used to\n    eliminate unneeded registers that point into the stack frame.  If\n    it is not defined, the only elimination attempted by the compiler\n@@ -604,10 +595,8 @@ extern enum reg_class m32r_regno_reg_class[FIRST_PSEUDO_REGISTER];\n  { ARG_POINTER_REGNUM,\t STACK_POINTER_REGNUM },\t\\\n  { ARG_POINTER_REGNUM,   FRAME_POINTER_REGNUM }}\n \n-/* This macro is similar to `INITIAL_FRAME_POINTER_OFFSET'.  It\n-   specifies the initial difference between the specified pair of\n-   registers.  This macro must be defined if `ELIMINABLE_REGS' is\n-   defined.  */\n+/* This macro returns the initial difference between the specified pair\n+   of registers.  */\n \n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\t\\"}, {"sha": "204e23c405b9222125347e901e65affc015de16a", "filename": "gcc/config/moxie/moxie.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.h?ref=5368023839d4bfc78f980692670be093cf2fdf2f", "patch": "@@ -243,8 +243,6 @@ enum reg_class\n    pointer to a smaller address.  */\n #define STACK_GROWS_DOWNWARD 1\n \n-#define INITIAL_FRAME_POINTER_OFFSET(DEPTH) (DEPTH) = 0\n-\n /* Offset from the frame pointer to the first local variable slot to\n    be allocated.  */\n #define STARTING_FRAME_OFFSET 0\n@@ -386,10 +384,8 @@ enum reg_class\n {{ FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM },\t\t\t\\\n  { ARG_POINTER_REGNUM,   HARD_FRAME_POINTER_REGNUM }}\t\t\t\n \n-/* This macro is similar to `INITIAL_FRAME_POINTER_OFFSET'.  It\n-   specifies the initial difference between the specified pair of\n-   registers.  This macro must be defined if `ELIMINABLE_REGS' is\n-   defined.  */\n+/* This macro returns the initial difference between the specified pair\n+   of registers.  */\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     (OFFSET) = moxie_initial_elimination_offset ((FROM), (TO));\t\t\\"}, {"sha": "4bf1f795c5e579e17c577095754c9b5d956659b5", "filename": "gcc/config/pa/pa64-linux.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Fpa%2Fpa64-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Fpa%2Fpa64-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-linux.h?ref=5368023839d4bfc78f980692670be093cf2fdf2f", "patch": "@@ -28,10 +28,8 @@ along with GCC; see the file COPYING3.  If not see\n   {ARG_POINTER_REGNUM,\t FRAME_POINTER_REGNUM},\t\t\t\t\\\n }\n \n-/* This macro is similar to `INITIAL_FRAME_POINTER_OFFSET'.  It\n-   specifies the initial difference between the specified pair of\n-   registers.  This macro must be defined if `ELIMINABLE_REGS' is\n-   defined.  */\n+/* This macro returns the initial difference between the specified pair\n+   of registers.  */\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\"}, {"sha": "ae5e9ce96e9f3c6416678106ca20e062c97311ed", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=5368023839d4bfc78f980692670be093cf2fdf2f", "patch": "@@ -505,10 +505,8 @@ enum reg_class\n  { ARG_POINTER_REGNUM,\t STACK_POINTER_REGNUM },\t\t\t\\\n  { ARG_POINTER_REGNUM,   HARD_FRAME_POINTER_REGNUM }}\t\t\t\\\n \n-/* This macro is similar to `INITIAL_FRAME_POINTER_OFFSET'.  It\n-   specifies the initial difference between the specified pair of\n-   registers.  This macro must be defined if `ELIMINABLE_REGS' is\n-   defined.  */\n+/* This macro returns the initial difference between the specified pair\n+   of registers.  */\n \n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "77d9e7f07299baa64dbab385f1685ff8e437c758", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=5368023839d4bfc78f980692670be093cf2fdf2f", "patch": "@@ -340,16 +340,6 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n \n #define EXIT_IGNORE_STACK 1\n \n-/* Store in the variable DEPTH the initial difference between the\n-   frame pointer reg contents and the stack pointer reg contents,\n-   as of the start of the function body.  This depends on the layout\n-   of the fixed parts of the stack frame and on how registers are saved.\n-\n-   On the VAX, FRAME_POINTER_REQUIRED is always 1, so the definition of this\n-   macro doesn't matter.  But it must be defined.  */\n-\n-#define INITIAL_FRAME_POINTER_OFFSET(DEPTH) (DEPTH) = 0;\n-\n /* Length in units of the trampoline for entering a nested function.  */\n \n #define TRAMPOLINE_SIZE 15"}, {"sha": "f7e3da4c0690320348ea09c23da987790faf3e71", "filename": "gcc/config/visium/visium.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Fvisium%2Fvisium.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fconfig%2Fvisium%2Fvisium.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.h?ref=5368023839d4bfc78f980692670be093cf2fdf2f", "patch": "@@ -963,10 +963,8 @@ enum reg_class\n \n /* `INITIAL_ELIMINATION_OFFSET (FROM-REG, TO-REG, OFFSET-VAR)'\n \n-   This macro is similar to `INITIAL_FRAME_POINTER_OFFSET'.  It\n-   specifies the initial difference between the specified pair of\n-   registers.  This macro must be defined if `ELIMINABLE_REGS' is\n-   defined.  */\n+   This macro returns the initial difference between the specified pair\n+   of registers.  */\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n   (OFFSET = visium_initial_elimination_offset (FROM, TO))\n "}, {"sha": "c8dbf8ddb00d4997b6a2f010d62367114573ac99", "filename": "gcc/df-scan.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=5368023839d4bfc78f980692670be093cf2fdf2f", "patch": "@@ -3829,23 +3829,18 @@ static bool initialized = false;\n void\n df_hard_reg_init (void)\n {\n-#ifdef ELIMINABLE_REGS\n   int i;\n   static const struct {const int from, to; } eliminables[] = ELIMINABLE_REGS;\n-#endif\n+\n   if (initialized)\n     return;\n \n   /* Record which registers will be eliminated.  We use this in\n      mark_used_regs.  */\n   CLEAR_HARD_REG_SET (elim_reg_set);\n \n-#ifdef ELIMINABLE_REGS\n   for (i = 0; i < (int) ARRAY_SIZE (eliminables); i++)\n     SET_HARD_REG_BIT (elim_reg_set, eliminables[i].from);\n-#else\n-  SET_HARD_REG_BIT (elim_reg_set, FRAME_POINTER_REGNUM);\n-#endif\n \n   initialized = true;\n }"}, {"sha": "98a6a97d158245b2c2f63eb94eb75e426591b828", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 10, "deletions": 27, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=5368023839d4bfc78f980692670be093cf2fdf2f", "patch": "@@ -3624,7 +3624,7 @@ pointer.\n In certain cases, the compiler does not know how to produce valid code\n without a frame pointer.  The compiler recognizes those cases and\n automatically gives the function a frame pointer regardless of what\n-@code{TARGET_FRAME_POINTER_REQUIRED} returns.  You don't need to worry about\n+@code{targetm.frame_pointer_required} returns.  You don't need to worry about\n them.\n \n In a function that does not require a frame pointer, the frame pointer\n@@ -3634,25 +3634,9 @@ fixed register.  See @code{FIXED_REGISTERS} for more information.\n Default return value is @code{false}.\n @end deftypefn\n \n-@findex get_frame_size\n-@defmac INITIAL_FRAME_POINTER_OFFSET (@var{depth-var})\n-A C statement to store in the variable @var{depth-var} the difference\n-between the frame pointer and the stack pointer values immediately after\n-the function prologue.  The value would be computed from information\n-such as the result of @code{get_frame_size ()} and the tables of\n-registers @code{regs_ever_live} and @code{call_used_regs}.\n-\n-If @code{ELIMINABLE_REGS} is defined, this macro will be not be used and\n-need not be defined.  Otherwise, it must be defined even if\n-@code{TARGET_FRAME_POINTER_REQUIRED} always returns true; in that\n-case, you may set @var{depth-var} to anything.\n-@end defmac\n-\n @defmac ELIMINABLE_REGS\n-If defined, this macro specifies a table of register pairs used to\n-eliminate unneeded registers that point into the stack frame.  If it is not\n-defined, the only elimination attempted by the compiler is to replace\n-references to the frame pointer with references to the stack pointer.\n+This macro specifies a table of register pairs used to eliminate\n+unneeded registers that point into the stack frame.\n \n The definition of this macro is a list of structure initializations, each\n of which specifies an original and replacement register.\n@@ -3676,21 +3660,20 @@ specified first since that is the preferred elimination.\n @end defmac\n \n @deftypefn {Target Hook} bool TARGET_CAN_ELIMINATE (const int @var{from_reg}, const int @var{to_reg})\n-This target hook should returns @code{true} if the compiler is allowed to\n+This target hook should return @code{true} if the compiler is allowed to\n try to replace register number @var{from_reg} with register number\n-@var{to_reg}.  This target hook need only be defined if @code{ELIMINABLE_REGS}\n-is defined, and will usually be @code{true}, since most of the cases\n-preventing register elimination are things that the compiler already\n+@var{to_reg}.  This target hook will usually be @code{true}, since most of the\n+cases preventing register elimination are things that the compiler already\n knows about.\n \n Default return value is @code{true}.\n @end deftypefn\n \n @defmac INITIAL_ELIMINATION_OFFSET (@var{from-reg}, @var{to-reg}, @var{offset-var})\n-This macro is similar to @code{INITIAL_FRAME_POINTER_OFFSET}.  It\n-specifies the initial difference between the specified pair of\n-registers.  This macro must be defined if @code{ELIMINABLE_REGS} is\n-defined.\n+This macro returns the initial difference between the specified pair\n+of registers.  The value would be computed from information\n+such as the result of @code{get_frame_size ()} and the tables of\n+registers @code{df_regs_ever_live_p} and @code{call_used_regs}.\n @end defmac\n \n @node Stack Arguments"}, {"sha": "a5714d10583323379317ece82c18130b00af3646", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=5368023839d4bfc78f980692670be093cf2fdf2f", "patch": "@@ -3177,25 +3177,9 @@ This is about eliminating the frame pointer and arg pointer.\n \n @hook TARGET_FRAME_POINTER_REQUIRED\n \n-@findex get_frame_size\n-@defmac INITIAL_FRAME_POINTER_OFFSET (@var{depth-var})\n-A C statement to store in the variable @var{depth-var} the difference\n-between the frame pointer and the stack pointer values immediately after\n-the function prologue.  The value would be computed from information\n-such as the result of @code{get_frame_size ()} and the tables of\n-registers @code{regs_ever_live} and @code{call_used_regs}.\n-\n-If @code{ELIMINABLE_REGS} is defined, this macro will be not be used and\n-need not be defined.  Otherwise, it must be defined even if\n-@code{TARGET_FRAME_POINTER_REQUIRED} always returns true; in that\n-case, you may set @var{depth-var} to anything.\n-@end defmac\n-\n @defmac ELIMINABLE_REGS\n-If defined, this macro specifies a table of register pairs used to\n-eliminate unneeded registers that point into the stack frame.  If it is not\n-defined, the only elimination attempted by the compiler is to replace\n-references to the frame pointer with references to the stack pointer.\n+This macro specifies a table of register pairs used to eliminate\n+unneeded registers that point into the stack frame.\n \n The definition of this macro is a list of structure initializations, each\n of which specifies an original and replacement register.\n@@ -3221,10 +3205,10 @@ specified first since that is the preferred elimination.\n @hook TARGET_CAN_ELIMINATE\n \n @defmac INITIAL_ELIMINATION_OFFSET (@var{from-reg}, @var{to-reg}, @var{offset-var})\n-This macro is similar to @code{INITIAL_FRAME_POINTER_OFFSET}.  It\n-specifies the initial difference between the specified pair of\n-registers.  This macro must be defined if @code{ELIMINABLE_REGS} is\n-defined.\n+This macro returns the initial difference between the specified pair\n+of registers.  The value would be computed from information\n+such as the result of @code{get_frame_size ()} and the tables of\n+registers @code{df_regs_ever_live_p} and @code{call_used_regs}.\n @end defmac\n \n @node Stack Arguments"}, {"sha": "62612521edb4e08af2f6ad54f29afa2217a18f30", "filename": "gcc/ira.c", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=5368023839d4bfc78f980692670be093cf2fdf2f", "patch": "@@ -2253,10 +2253,9 @@ compute_regs_asm_clobbered (void)\n void\n ira_setup_eliminable_regset (void)\n {\n-#ifdef ELIMINABLE_REGS\n   int i;\n   static const struct {const int from, to; } eliminables[] = ELIMINABLE_REGS;\n-#endif\n+\n   /* FIXME: If EXIT_IGNORE_STACK is set, we will not save and restore\n      sp for alloca.  So we can't eliminate the frame pointer in that\n      case.  At some point, we should improve this by emitting the\n@@ -2292,7 +2291,6 @@ ira_setup_eliminable_regset (void)\n \n   /* Build the regset of all eliminable registers and show we can't\n      use those that we already know won't be eliminated.  */\n-#ifdef ELIMINABLE_REGS\n   for (i = 0; i < (int) ARRAY_SIZE (eliminables); i++)\n     {\n       bool cannot_elim\n@@ -2326,19 +2324,6 @@ ira_setup_eliminable_regset (void)\n       else\n \tdf_set_regs_ever_live (HARD_FRAME_POINTER_REGNUM, true);\n     }\n-\n-#else\n-  if (!TEST_HARD_REG_BIT (crtl->asm_clobbers, HARD_FRAME_POINTER_REGNUM))\n-    {\n-      SET_HARD_REG_BIT (eliminable_regset, FRAME_POINTER_REGNUM);\n-      if (frame_pointer_needed)\n-\tSET_HARD_REG_BIT (ira_no_alloc_regs, FRAME_POINTER_REGNUM);\n-    }\n-  else if (frame_pointer_needed)\n-    error (\"%s cannot be used in asm here\", reg_names[FRAME_POINTER_REGNUM]);\n-  else\n-    df_set_regs_ever_live (FRAME_POINTER_REGNUM, true);\n-#endif\n }\n \n \f"}, {"sha": "1764bd699ce0b7ad98a75f8f18d7f974bad63be8", "filename": "gcc/lra-eliminations.c", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Flra-eliminations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Flra-eliminations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-eliminations.c?ref=5368023839d4bfc78f980692670be093cf2fdf2f", "patch": "@@ -108,15 +108,7 @@ static const struct elim_table_1\n   const int to;\n } reg_eliminate_1[] =\n \n-/* If a set of eliminable hard registers was specified, define the\n-   table from it.  Otherwise, default to the normal case of the frame\n-   pointer being replaced by the stack pointer.\t */\n-\n-#ifdef ELIMINABLE_REGS\n   ELIMINABLE_REGS;\n-#else\n-  {{ FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}};\n-#endif\n \n #define NUM_ELIMINABLE_REGS ARRAY_SIZE (reg_eliminate_1)\n \n@@ -1265,11 +1257,7 @@ update_reg_eliminate (bitmap insns_with_changed_offsets)\n \t    }\n \t}\n \n-#ifdef ELIMINABLE_REGS\n       INITIAL_ELIMINATION_OFFSET (ep->from, ep->to, ep->offset);\n-#else\n-      INITIAL_FRAME_POINTER_OFFSET (ep->offset);\n-#endif\n     }\n   setup_elimination_map ();\n   result = false;\n@@ -1308,10 +1296,8 @@ static void\n init_elim_table (void)\n {\n   struct lra_elim_table *ep;\n-#ifdef ELIMINABLE_REGS\n   bool value_p;\n   const struct elim_table_1 *ep1;\n-#endif\n \n   if (!reg_eliminate)\n     reg_eliminate = XCNEWVEC (struct lra_elim_table, NUM_ELIMINABLE_REGS);\n@@ -1320,7 +1306,7 @@ init_elim_table (void)\n   /* Initiate member values which will be never changed.  */\n   self_elim_table.can_eliminate = self_elim_table.prev_can_eliminate = true;\n   self_elim_table.previous_offset = 0;\n-#ifdef ELIMINABLE_REGS\n+\n   for (ep = reg_eliminate, ep1 = reg_eliminate_1;\n        ep < &reg_eliminate[NUM_ELIMINABLE_REGS]; ep++, ep1++)\n     {\n@@ -1334,12 +1320,6 @@ init_elim_table (void)\n \t\t\t   || ! stack_realign_fp)));\n       setup_can_eliminate (ep, value_p);\n     }\n-#else\n-  reg_eliminate[0].offset = reg_eliminate[0].previous_offset = 0;\n-  reg_eliminate[0].from = reg_eliminate_1[0].from;\n-  reg_eliminate[0].to = reg_eliminate_1[0].to;\n-  setup_can_eliminate (&reg_eliminate[0], ! frame_pointer_needed);\n-#endif\n \n   /* Build the FROM and TO REG rtx's.  Note that code in gen_rtx_REG\n      will cause, e.g., gen_rtx_REG (Pmode, STACK_POINTER_REGNUM) to"}, {"sha": "da53cfa5f95bce15057cdfbe998b2f85aba690ac", "filename": "gcc/reload1.c", "status": "modified", "additions": 7, "deletions": 40, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=5368023839d4bfc78f980692670be093cf2fdf2f", "patch": "@@ -286,15 +286,7 @@ static const struct elim_table_1\n   const int to;\n } reg_eliminate_1[] =\n \n-/* If a set of eliminable registers was specified, define the table from it.\n-   Otherwise, default to the normal case of the frame pointer being\n-   replaced by the stack pointer.  */\n-\n-#ifdef ELIMINABLE_REGS\n   ELIMINABLE_REGS;\n-#else\n-  {{ FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}};\n-#endif\n \n #define NUM_ELIMINABLE_REGS ARRAY_SIZE (reg_eliminate_1)\n \n@@ -3823,26 +3815,17 @@ static bool\n verify_initial_elim_offsets (void)\n {\n   HOST_WIDE_INT t;\n+  struct elim_table *ep;\n \n   if (!num_eliminable)\n     return true;\n \n-#ifdef ELIMINABLE_REGS\n-  {\n-   struct elim_table *ep;\n-\n-   for (ep = reg_eliminate; ep < &reg_eliminate[NUM_ELIMINABLE_REGS]; ep++)\n-     {\n-       INITIAL_ELIMINATION_OFFSET (ep->from, ep->to, t);\n-       if (t != ep->initial_offset)\n-\t return false;\n-     }\n-  }\n-#else\n-  INITIAL_FRAME_POINTER_OFFSET (t);\n-  if (t != reg_eliminate[0].initial_offset)\n-    return false;\n-#endif\n+  for (ep = reg_eliminate; ep < &reg_eliminate[NUM_ELIMINABLE_REGS]; ep++)\n+    {\n+      INITIAL_ELIMINATION_OFFSET (ep->from, ep->to, t);\n+      if (t != ep->initial_offset)\n+\treturn false;\n+    }\n \n   return true;\n }\n@@ -3854,16 +3837,11 @@ set_initial_elim_offsets (void)\n {\n   struct elim_table *ep = reg_eliminate;\n \n-#ifdef ELIMINABLE_REGS\n   for (; ep < &reg_eliminate[NUM_ELIMINABLE_REGS]; ep++)\n     {\n       INITIAL_ELIMINATION_OFFSET (ep->from, ep->to, ep->initial_offset);\n       ep->previous_offset = ep->offset = ep->initial_offset;\n     }\n-#else\n-  INITIAL_FRAME_POINTER_OFFSET (ep->initial_offset);\n-  ep->previous_offset = ep->offset = ep->initial_offset;\n-#endif\n \n   num_not_at_initial_offset = 0;\n }\n@@ -3935,9 +3913,7 @@ update_eliminables (HARD_REG_SET *pset)\n   for (ep = reg_eliminate; ep < &reg_eliminate[NUM_ELIMINABLE_REGS]; ep++)\n     if ((ep->from == HARD_FRAME_POINTER_REGNUM\n          && targetm.frame_pointer_required ())\n-#ifdef ELIMINABLE_REGS\n \t|| ! targetm.can_eliminate (ep->from, ep->to)\n-#endif\n \t)\n       ep->can_eliminate = 0;\n \n@@ -4058,16 +4034,13 @@ static void\n init_elim_table (void)\n {\n   struct elim_table *ep;\n-#ifdef ELIMINABLE_REGS\n   const struct elim_table_1 *ep1;\n-#endif\n \n   if (!reg_eliminate)\n     reg_eliminate = XCNEWVEC (struct elim_table, NUM_ELIMINABLE_REGS);\n \n   num_eliminable = 0;\n \n-#ifdef ELIMINABLE_REGS\n   for (ep = reg_eliminate, ep1 = reg_eliminate_1;\n        ep < &reg_eliminate[NUM_ELIMINABLE_REGS]; ep++, ep1++)\n     {\n@@ -4080,12 +4053,6 @@ init_elim_table (void)\n \t\t && (! SUPPORTS_STACK_ALIGNMENT\n \t\t     || ! stack_realign_fp)));\n     }\n-#else\n-  reg_eliminate[0].from = reg_eliminate_1[0].from;\n-  reg_eliminate[0].to = reg_eliminate_1[0].to;\n-  reg_eliminate[0].can_eliminate = reg_eliminate[0].can_eliminate_previous\n-    = ! frame_pointer_needed;\n-#endif\n \n   /* Count the number of eliminable registers and build the FROM and TO\n      REG rtx's.  Note that code in gen_rtx_REG will cause, e.g.,"}, {"sha": "69bc4fdd5e1e3ee289718cd49c05f8eed45058ac", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=5368023839d4bfc78f980692670be093cf2fdf2f", "patch": "@@ -345,7 +345,6 @@ rtx_varies_p (const_rtx x, bool for_alias)\n static HOST_WIDE_INT\n get_initial_register_offset (int from, int to)\n {\n-#ifdef ELIMINABLE_REGS\n   static const struct elim_table_t\n   {\n     const int from;\n@@ -448,33 +447,6 @@ get_initial_register_offset (int from, int to)\n     return get_initial_register_offset (from, FRAME_POINTER_REGNUM);\n   else\n     return 0;\n-\n-#else\n-  HOST_WIDE_INT offset;\n-\n-  if (to == from)\n-    return 0;\n-\n-  if (reload_completed)\n-    {\n-      INITIAL_FRAME_POINTER_OFFSET (offset);\n-    }\n-  else\n-    {\n-      offset = crtl->outgoing_args_size + get_frame_size ();\n-#if !STACK_GROWS_DOWNWARD\n-      offset = - offset;\n-#endif\n-    }\n-\n-  if (to == STACK_POINTER_REGNUM)\n-    return offset;\n-  else if (from == STACK_POINTER_REGNUM)\n-    return - offset;\n-  else\n-    return 0;\n-\n-#endif\n }\n \n /* Return nonzero if the use of X+OFFSET as an address in a MEM with SIZE"}, {"sha": "8d80448560de9eacdc812775aee918ba5a092212", "filename": "gcc/target.def", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5368023839d4bfc78f980692670be093cf2fdf2f/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=5368023839d4bfc78f980692670be093cf2fdf2f", "patch": "@@ -5289,7 +5289,7 @@ five otherwise.  This is best for most machines.\",\n  unsigned int, (void),\n  default_case_values_threshold)\n \n-/* Retutn true if a function must have and use a frame pointer.  */\n+/* Return true if a function must have and use a frame pointer.  */\n DEFHOOK\n (frame_pointer_required,\n  \"This target hook should return @code{true} if a function must have and use\\n\\\n@@ -5306,7 +5306,7 @@ pointer.\\n\\\n In certain cases, the compiler does not know how to produce valid code\\n\\\n without a frame pointer.  The compiler recognizes those cases and\\n\\\n automatically gives the function a frame pointer regardless of what\\n\\\n-@code{TARGET_FRAME_POINTER_REQUIRED} returns.  You don't need to worry about\\n\\\n+@code{targetm.frame_pointer_required} returns.  You don't need to worry about\\n\\\n them.\\n\\\n \\n\\\n In a function that does not require a frame pointer, the frame pointer\\n\\\n@@ -5321,11 +5321,10 @@ Default return value is @code{false}.\",\n    from-reg with register number to-reg.  */\n DEFHOOK\n (can_eliminate,\n- \"This target hook should returns @code{true} if the compiler is allowed to\\n\\\n+ \"This target hook should return @code{true} if the compiler is allowed to\\n\\\n try to replace register number @var{from_reg} with register number\\n\\\n-@var{to_reg}.  This target hook need only be defined if @code{ELIMINABLE_REGS}\\n\\\n-is defined, and will usually be @code{true}, since most of the cases\\n\\\n-preventing register elimination are things that the compiler already\\n\\\n+@var{to_reg}.  This target hook will usually be @code{true}, since most of the\\n\\\n+cases preventing register elimination are things that the compiler already\\n\\\n knows about.\\n\\\n \\n\\\n Default return value is @code{true}.\","}]}