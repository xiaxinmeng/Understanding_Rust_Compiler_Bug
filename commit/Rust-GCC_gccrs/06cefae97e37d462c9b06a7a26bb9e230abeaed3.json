{"sha": "06cefae97e37d462c9b06a7a26bb9e230abeaed3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZjZWZhZTk3ZTM3ZDQ2MmM5YjA2YTdhMjZiYjllMjMwYWJlYWVkMw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-11-04T19:43:01Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-11-04T19:43:01Z"}, "message": "Makefile.in (OBJS): Add sanopt.o.\n\n\t* Makefile.in (OBJS): Add sanopt.o.\n\t(GTFILES): Add sanopt.c.\n\t* asan.h (asan_expand_check_ifn): Declare.\n\t* asan.c (asan_expand_check_ifn): No longer static.\n\t(class pass_sanopt, pass_sanopt::execute, make_pass_sanopt): Move...\n\t* sanopt.c: ...here.  New file.\ntestsuite/\n\t* c-c++-common/ubsan/align-2.c: Remove dg-output.\n\t* c-c++-common/ubsan/align-4.c: Likewise.\n\t* g++.dg/ubsan/null-1.C: Likewise.\n\t* g++.dg/ubsan/null-2.C: Likewise.\n\nFrom-SVN: r217099", "tree": {"sha": "daa69386bc784dcd19c81e4b97e91b9d1cf756f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/daa69386bc784dcd19c81e4b97e91b9d1cf756f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06cefae97e37d462c9b06a7a26bb9e230abeaed3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06cefae97e37d462c9b06a7a26bb9e230abeaed3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06cefae97e37d462c9b06a7a26bb9e230abeaed3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06cefae97e37d462c9b06a7a26bb9e230abeaed3/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c636298c08430ea290b06eb5fd18beb45a83a16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c636298c08430ea290b06eb5fd18beb45a83a16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c636298c08430ea290b06eb5fd18beb45a83a16"}], "stats": {"total": 455, "additions": 336, "deletions": 119}, "files": [{"sha": "7554f8093df42b2ec791437312cbfd368fc03bfe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06cefae97e37d462c9b06a7a26bb9e230abeaed3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06cefae97e37d462c9b06a7a26bb9e230abeaed3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06cefae97e37d462c9b06a7a26bb9e230abeaed3", "patch": "@@ -1,3 +1,12 @@\n+2014-11-04  Marek Polacek  <polacek@redhat.com>\n+\n+\t* Makefile.in (OBJS): Add sanopt.o.\n+\t(GTFILES): Add sanopt.c.\n+\t* asan.h (asan_expand_check_ifn): Declare.\n+\t* asan.c (asan_expand_check_ifn): No longer static.\n+\t(class pass_sanopt, pass_sanopt::execute, make_pass_sanopt): Move...\n+\t* sanopt.c: ...here.  New file.\n+\n 2014-11-04  Jiong Wang  <jiong.wang@arm.com>\n 2014-11-04  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n "}, {"sha": "f383032e9566f396ed7e87c9b153332a7a3b6874", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06cefae97e37d462c9b06a7a26bb9e230abeaed3/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06cefae97e37d462c9b06a7a26bb9e230abeaed3/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=06cefae97e37d462c9b06a7a26bb9e230abeaed3", "patch": "@@ -1376,6 +1376,7 @@ OBJS = \\\n \tasan.o \\\n \ttsan.o \\\n \tubsan.o \\\n+\tsanopt.o \\\n \ttree-call-cdce.o \\\n \ttree-cfg.o \\\n \ttree-cfgcleanup.o \\\n@@ -2305,6 +2306,7 @@ GTFILES = $(CPP_ID_DATA_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/asan.c \\\n   $(srcdir)/ubsan.c \\\n   $(srcdir)/tsan.c \\\n+  $(srcdir)/sanopt.c \\\n   $(srcdir)/ipa-devirt.c \\\n   $(srcdir)/internal-fn.h \\\n   @all_gtfiles@"}, {"sha": "79dede714181611f7cb4913c6a6c1563a644d401", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 111, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06cefae97e37d462c9b06a7a26bb9e230abeaed3/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06cefae97e37d462c9b06a7a26bb9e230abeaed3/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=06cefae97e37d462c9b06a7a26bb9e230abeaed3", "patch": "@@ -2497,7 +2497,7 @@ asan_finish_file (void)\n \n /* Expand the ASAN_{LOAD,STORE} builtins.  */\n \n-static bool\n+bool\n asan_expand_check_ifn (gimple_stmt_iterator *iter, bool use_calls)\n {\n   gimple g = gsi_stmt (*iter);\n@@ -2800,114 +2800,4 @@ make_pass_asan_O0 (gcc::context *ctxt)\n   return new pass_asan_O0 (ctxt);\n }\n \n-/* Perform optimization of sanitize functions.  */\n-\n-namespace {\n-\n-const pass_data pass_data_sanopt =\n-{\n-  GIMPLE_PASS, /* type */\n-  \"sanopt\", /* name */\n-  OPTGROUP_NONE, /* optinfo_flags */\n-  TV_NONE, /* tv_id */\n-  ( PROP_ssa | PROP_cfg | PROP_gimple_leh ), /* properties_required */\n-  0, /* properties_provided */\n-  0, /* properties_destroyed */\n-  0, /* todo_flags_start */\n-  TODO_update_ssa, /* todo_flags_finish */\n-};\n-\n-class pass_sanopt : public gimple_opt_pass\n-{\n-public:\n-  pass_sanopt (gcc::context *ctxt)\n-    : gimple_opt_pass (pass_data_sanopt, ctxt)\n-  {}\n-\n-  /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_sanitize; }\n-  virtual unsigned int execute (function *);\n-\n-}; // class pass_sanopt\n-\n-unsigned int\n-pass_sanopt::execute (function *fun)\n-{\n-  basic_block bb;\n-\n-  int asan_num_accesses = 0;\n-  if (flag_sanitize & SANITIZE_ADDRESS)\n-    {\n-      gimple_stmt_iterator gsi;\n-      FOR_EACH_BB_FN (bb, fun)\n-\tfor (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n-\t  {\n- \t    gimple stmt = gsi_stmt (gsi);\n-\t    if (is_gimple_call (stmt) && gimple_call_internal_p (stmt)\n-\t\t&& gimple_call_internal_fn (stmt) == IFN_ASAN_CHECK)\n-\t      ++asan_num_accesses;\n-\t  }\n-    }\n-\n-  bool use_calls = ASAN_INSTRUMENTATION_WITH_CALL_THRESHOLD < INT_MAX\n-    && asan_num_accesses >= ASAN_INSTRUMENTATION_WITH_CALL_THRESHOLD;\n-\n-  FOR_EACH_BB_FN (bb, fun)\n-    {\n-      gimple_stmt_iterator gsi;\n-      for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); )\n-\t{\n-\t  gimple stmt = gsi_stmt (gsi);\n-\t  bool no_next = false;\n-\n-\t  if (!is_gimple_call (stmt))\n-\t    {\n-\t      gsi_next (&gsi);\n-\t      continue;\n-\t    }\n-\n-\t  if (gimple_call_internal_p (stmt))\n-\t    {\n-\t      enum internal_fn ifn = gimple_call_internal_fn (stmt);\n-\t      switch (ifn)\n-\t\t{\n-\t\tcase IFN_UBSAN_NULL:\n-\t\t  no_next = ubsan_expand_null_ifn (&gsi);\n-\t\t  break;\n-\t\tcase IFN_UBSAN_BOUNDS:\n-\t\t  no_next = ubsan_expand_bounds_ifn (&gsi);\n-\t\t  break;\n-\t\tcase IFN_UBSAN_OBJECT_SIZE:\n-\t\t  no_next = ubsan_expand_objsize_ifn (&gsi);\n-\t\t  break;\n-\t\tcase IFN_ASAN_CHECK:\n-\t\t  no_next = asan_expand_check_ifn (&gsi, use_calls);\n-\t\t  break;\n-\t\tdefault:\n-\t\t  break;\n-\t\t}\n-\t    }\n-\n-\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    {\n-\t      fprintf (dump_file, \"Optimized\\n  \");\n-\t      print_gimple_stmt (dump_file, stmt, 0, dump_flags);\n-\t      fprintf (dump_file, \"\\n\");\n-\t    }\n-\n-\t  if (!no_next)\n-\t    gsi_next (&gsi);\n-\t}\n-    }\n-  return 0;\n-}\n-\n-} // anon namespace\n-\n-gimple_opt_pass *\n-make_pass_sanopt (gcc::context *ctxt)\n-{\n-  return new pass_sanopt (ctxt);\n-}\n-\n #include \"gt-asan.h\""}, {"sha": "f44839121182a6a6dc7f0dcafee01f90048a2805", "filename": "gcc/asan.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06cefae97e37d462c9b06a7a26bb9e230abeaed3/gcc%2Fasan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06cefae97e37d462c9b06a7a26bb9e230abeaed3/gcc%2Fasan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.h?ref=06cefae97e37d462c9b06a7a26bb9e230abeaed3", "patch": "@@ -28,6 +28,7 @@ extern rtx_insn *asan_emit_stack_protection (rtx, rtx, unsigned int,\n extern bool asan_protect_global (tree);\n extern void initialize_sanitizer_builtins (void);\n extern tree asan_dynamic_init_call (bool);\n+extern bool asan_expand_check_ifn (gimple_stmt_iterator *, bool);\n \n extern gimple_stmt_iterator create_cond_insert_point\n      (gimple_stmt_iterator *, bool, bool, bool, basic_block *, basic_block *);"}, {"sha": "f1d51d1c7651cce013e136c993a7bb8e8dca0e28", "filename": "gcc/sanopt.c", "status": "added", "additions": 316, "deletions": 0, "changes": 316, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06cefae97e37d462c9b06a7a26bb9e230abeaed3/gcc%2Fsanopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06cefae97e37d462c9b06a7a26bb9e230abeaed3/gcc%2Fsanopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanopt.c?ref=06cefae97e37d462c9b06a7a26bb9e230abeaed3", "patch": "@@ -0,0 +1,316 @@\n+/* Optimize and expand sanitizer functions.\n+   Copyright (C) 2014 Free Software Foundation, Inc.\n+   Contributed by Marek Polacek <polacek@redhat.com>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tree.h\"\n+#include \"hash-table.h\"\n+#include \"predict.h\"\n+#include \"vec.h\"\n+#include \"hashtab.h\"\n+#include \"hash-set.h\"\n+#include \"tm.h\"\n+#include \"hard-reg-set.h\"\n+#include \"function.h\"\n+#include \"dominance.h\"\n+#include \"cfg.h\"\n+#include \"basic-block.h\"\n+#include \"tree-ssa-alias.h\"\n+#include \"internal-fn.h\"\n+#include \"gimple-expr.h\"\n+#include \"is-a.h\"\n+#include \"gimple.h\"\n+#include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n+#include \"hash-map.h\"\n+#include \"plugin-api.h\"\n+#include \"tree-pass.h\"\n+#include \"asan.h\"\n+#include \"gimple-pretty-print.h\"\n+#include \"tm_p.h\"\n+#include \"langhooks.h\"\n+#include \"ubsan.h\"\n+#include \"params.h\"\n+\n+\n+/* This is used to carry information about basic blocks.  It is\n+   attached to the AUX field of the standard CFG block.  */\n+\n+struct sanopt_info\n+{\n+  /* True if this BB has been visited.  */\n+  bool visited_p;\n+};\n+\n+/* This is used to carry various hash maps and variables used\n+   in sanopt_optimize_walker.  */\n+\n+struct sanopt_ctx\n+{\n+  /* This map maps a pointer (the first argument of UBSAN_NULL) to\n+     a vector of UBSAN_NULL call statements that check this pointer.  */\n+  hash_map<tree, auto_vec<gimple> > null_check_map;\n+\n+  /* Number of IFN_ASAN_CHECK statements.  */\n+  int asan_num_accesses;\n+};\n+\n+\n+/* Try to optimize away redundant UBSAN_NULL checks.\n+   \n+   We walk blocks in the CFG via a depth first search of the dominator\n+   tree; we push unique UBSAN_NULL statements into a vector in the\n+   NULL_CHECK_MAP as we enter the blocks.  When leaving a block, we\n+   mark the block as visited; then when checking the statements in the\n+   vector, we ignore statements that are coming from already visited\n+   blocks, because these cannot dominate anything anymore.\n+   CTX is a sanopt context.  */\n+\n+static void\n+sanopt_optimize_walker (basic_block bb, struct sanopt_ctx *ctx)\n+{\n+  basic_block son;\n+  gimple_stmt_iterator gsi;\n+\n+  for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi);)\n+    {\n+      gimple stmt = gsi_stmt (gsi);\n+      bool remove = false;\n+\n+      if (is_gimple_call (stmt)\n+\t  && gimple_call_internal_p (stmt))\n+\tswitch (gimple_call_internal_fn (stmt))\n+\t  {\n+\t  case IFN_UBSAN_NULL:\n+\t    {\n+\t      gcc_assert (gimple_call_num_args (stmt) == 3);\n+\t      tree ptr = gimple_call_arg (stmt, 0);\n+\t      tree cur_align = gimple_call_arg (stmt, 2);\n+\t      gcc_assert (TREE_CODE (cur_align) == INTEGER_CST);\n+\n+\t      auto_vec<gimple> &v = ctx->null_check_map.get_or_insert (ptr);\n+\t      if (v.is_empty ())\n+\t\t/* For this PTR we don't have any UBSAN_NULL stmts\n+\t\t   recorded, so there's nothing to optimize yet.  */\n+\t\tv.safe_push (stmt);\n+\t      else\n+\t\t{\n+\t\t  /* We already have recorded a UBSAN_NULL check\n+\t\t     for this pointer.  Perhaps we can drop this one.\n+\t\t     But only if this check doesn't specify stricter\n+\t\t     alignment.  */\n+\t\t  int i;\n+\t\t  gimple g;\n+\n+\t\t  while (!v.is_empty ())\n+\t\t    {\n+\t\t      gimple g = v.last ();\n+\t\t      /* Remove statements for BBs that have been\n+\t\t\t already processed.  */\n+\t\t      sanopt_info *si = (sanopt_info *) gimple_bb (g)->aux;\n+\t\t      if (si->visited_p)\n+\t\t\tv.pop ();\n+\t\t      else\n+\t\t\t{\n+\t\t\t  /* At this point we shouldn't have any statements\n+\t\t\t     that aren't dominating the current BB.  */\n+\t\t\t  tree align = gimple_call_arg (g, 2);\n+\t\t\t  remove = tree_int_cst_le (cur_align, align);\n+\t\t\t  break;\n+\t\t\t}\n+\t\t    }\n+\n+\t\t  if (remove)\n+\t\t    {\n+\t\t      /* Drop this check.  */\n+\t\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t\t{\n+\t\t\t  fprintf (dump_file, \"Optimizing out\\n  \");\n+\t\t\t  print_gimple_stmt (dump_file, stmt, 0,\n+\t\t\t\t\t     dump_flags);\n+\t\t\t  fprintf (dump_file, \"\\n\");\n+\t\t\t}\n+\t\t      gsi_remove (&gsi, true);\n+\t\t    }\n+\t\t  else if (v.length () < 30)\n+\t\t    v.safe_push (stmt);\n+\t\t  }\n+\t    }\n+\t  case IFN_ASAN_CHECK:\n+\t    ctx->asan_num_accesses++;\n+\t    break;\n+\t  default:\n+\t    break;\n+\t  }\n+\n+      /* If we were able to remove the current statement, gsi_remove\n+\t already pointed us to the next statement.  */\n+      if (!remove)\n+\tgsi_next (&gsi);\n+    }\n+\n+  for (son = first_dom_son (CDI_DOMINATORS, bb);\n+       son;\n+       son = next_dom_son (CDI_DOMINATORS, son))\n+    sanopt_optimize_walker (son, ctx);\n+\n+  /* We're leaving this BB, so mark it to that effect.  */\n+  sanopt_info *info = (sanopt_info *) bb->aux;\n+  info->visited_p = true;\n+}\n+\n+/* Try to remove redundant sanitizer checks in function FUN.  */\n+\n+static int\n+sanopt_optimize (function *fun)\n+{\n+  struct sanopt_ctx ctx;\n+  ctx.asan_num_accesses = 0;\n+\n+  /* Set up block info for each basic block.  */\n+  alloc_aux_for_blocks (sizeof (sanopt_info));\n+\n+  /* We're going to do a dominator walk, so ensure that we have\n+     dominance information.  */\n+  calculate_dominance_info (CDI_DOMINATORS);\n+\n+  /* Recursively walk the dominator tree optimizing away\n+     redundant checks.  */\n+  sanopt_optimize_walker (ENTRY_BLOCK_PTR_FOR_FN (fun), &ctx);\n+\n+  free_aux_for_blocks ();\n+\n+  return ctx.asan_num_accesses;\n+}\n+\n+/* Perform optimization of sanitize functions.  */\n+\n+namespace {\n+\n+const pass_data pass_data_sanopt =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"sanopt\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  TV_NONE, /* tv_id */\n+  ( PROP_ssa | PROP_cfg | PROP_gimple_leh ), /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  TODO_update_ssa, /* todo_flags_finish */\n+};\n+\n+class pass_sanopt : public gimple_opt_pass\n+{\n+public:\n+  pass_sanopt (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_sanopt, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  virtual bool gate (function *) { return flag_sanitize; }\n+  virtual unsigned int execute (function *);\n+\n+}; // class pass_sanopt\n+\n+unsigned int\n+pass_sanopt::execute (function *fun)\n+{\n+  basic_block bb;\n+  int asan_num_accesses = 0;\n+\n+  /* Try to remove redundant checks.  */\n+  if (optimize\n+      && (flag_sanitize & (SANITIZE_NULL | SANITIZE_ALIGNMENT)))\n+    asan_num_accesses = sanopt_optimize (fun);\n+  else if (flag_sanitize & SANITIZE_ADDRESS)\n+    {\n+      gimple_stmt_iterator gsi;\n+      FOR_EACH_BB_FN (bb, fun)\n+\tfor (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+\t  {\n+ \t    gimple stmt = gsi_stmt (gsi);\n+\t    if (is_gimple_call (stmt) && gimple_call_internal_p (stmt)\n+\t\t&& gimple_call_internal_fn (stmt) == IFN_ASAN_CHECK)\n+\t      ++asan_num_accesses;\n+\t  }\n+    }\n+\n+  bool use_calls = ASAN_INSTRUMENTATION_WITH_CALL_THRESHOLD < INT_MAX\n+    && asan_num_accesses >= ASAN_INSTRUMENTATION_WITH_CALL_THRESHOLD;\n+\n+  FOR_EACH_BB_FN (bb, fun)\n+    {\n+      gimple_stmt_iterator gsi;\n+      for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); )\n+\t{\n+\t  gimple stmt = gsi_stmt (gsi);\n+\t  bool no_next = false;\n+\n+\t  if (!is_gimple_call (stmt))\n+\t    {\n+\t      gsi_next (&gsi);\n+\t      continue;\n+\t    }\n+\n+\t  if (gimple_call_internal_p (stmt))\n+\t    {\n+\t      enum internal_fn ifn = gimple_call_internal_fn (stmt);\n+\t      switch (ifn)\n+\t\t{\n+\t\tcase IFN_UBSAN_NULL:\n+\t\t  no_next = ubsan_expand_null_ifn (&gsi);\n+\t\t  break;\n+\t\tcase IFN_UBSAN_BOUNDS:\n+\t\t  no_next = ubsan_expand_bounds_ifn (&gsi);\n+\t\t  break;\n+\t\tcase IFN_UBSAN_OBJECT_SIZE:\n+\t\t  no_next = ubsan_expand_objsize_ifn (&gsi);\n+\t\t  break;\n+\t\tcase IFN_ASAN_CHECK:\n+\t\t  no_next = asan_expand_check_ifn (&gsi, use_calls);\n+\t\t  break;\n+\t\tdefault:\n+\t\t  break;\n+\t\t}\n+\t    }\n+\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    {\n+\t      fprintf (dump_file, \"Expanded\\n  \");\n+\t      print_gimple_stmt (dump_file, stmt, 0, dump_flags);\n+\t      fprintf (dump_file, \"\\n\");\n+\t    }\n+\n+\t  if (!no_next)\n+\t    gsi_next (&gsi);\n+\t}\n+    }\n+  return 0;\n+}\n+\n+} // anon namespace\n+\n+gimple_opt_pass *\n+make_pass_sanopt (gcc::context *ctxt)\n+{\n+  return new pass_sanopt (ctxt);\n+}"}, {"sha": "03a368453c3913b4670fe05bb672bedc2fe4a8c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06cefae97e37d462c9b06a7a26bb9e230abeaed3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06cefae97e37d462c9b06a7a26bb9e230abeaed3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=06cefae97e37d462c9b06a7a26bb9e230abeaed3", "patch": "@@ -1,3 +1,10 @@\n+2014-11-04  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-c++-common/ubsan/align-2.c: Remove dg-output.\n+\t* c-c++-common/ubsan/align-4.c: Likewise.\n+\t* g++.dg/ubsan/null-1.C: Likewise.\n+\t* g++.dg/ubsan/null-2.C: Likewise.\n+\n 2014-11-04  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.misc-tests/godump-1.c (dg-skip-if): Add alpha*-*-*."}, {"sha": "02a26e2d301a04478cfc9c4f8223f2abdc4a8588", "filename": "gcc/testsuite/c-c++-common/ubsan/align-2.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06cefae97e37d462c9b06a7a26bb9e230abeaed3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06cefae97e37d462c9b06a7a26bb9e230abeaed3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-2.c?ref=06cefae97e37d462c9b06a7a26bb9e230abeaed3", "patch": "@@ -51,6 +51,4 @@ main ()\n /* { dg-output \"\\.c:(13|16):\\[0-9]*: \\[^\\n\\r]*store to misaligned address 0x\\[0-9a-fA-F]* for type 'int', which requires 4 byte alignment.*\" } */\n /* { dg-output \"\\.c:23:\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */\n /* { dg-output \"\\.c:(29|30):\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */\n-/* { dg-output \"\\.c:30:\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */\n-/* { dg-output \"\\.c:31:\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */\n /* { dg-output \"\\.c:37:\\[0-9]*: \\[^\\n\\r]*load of misaligned address 0x\\[0-9a-fA-F]* for type 'long long int', which requires \\[48] byte alignment\" } */"}, {"sha": "f010589d18891b1410d2edfe83ac3e5e645a86cc", "filename": "gcc/testsuite/c-c++-common/ubsan/align-4.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06cefae97e37d462c9b06a7a26bb9e230abeaed3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06cefae97e37d462c9b06a7a26bb9e230abeaed3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-4.c?ref=06cefae97e37d462c9b06a7a26bb9e230abeaed3", "patch": "@@ -9,6 +9,4 @@\n /* { dg-output \"\\[^\\n\\r]*\\.c:(13|16):\\[0-9]*: \\[^\\n\\r]*store to misaligned address 0x\\[0-9a-fA-F]* for type 'int', which requires 4 byte alignment.*\" } */\n /* { dg-output \"\\[^\\n\\r]*\\.c:23:\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */\n /* { dg-output \"\\[^\\n\\r]*\\.c:(29|30):\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */\n-/* { dg-output \"\\[^\\n\\r]*\\.c:30:\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */\n-/* { dg-output \"\\[^\\n\\r]*\\.c:31:\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */\n /* { dg-output \"\\[^\\n\\r]*\\.c:37:\\[0-9]*: \\[^\\n\\r]*load of misaligned address 0x\\[0-9a-fA-F]* for type 'long long int', which requires \\[48] byte alignment\" } */"}, {"sha": "83b3033b614900a49ab85d772f0e1292bc2ae336", "filename": "gcc/testsuite/g++.dg/ubsan/null-1.C", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06cefae97e37d462c9b06a7a26bb9e230abeaed3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fnull-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06cefae97e37d462c9b06a7a26bb9e230abeaed3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fnull-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fnull-1.C?ref=06cefae97e37d462c9b06a7a26bb9e230abeaed3", "patch": "@@ -25,6 +25,4 @@ main (void)\n }\n \n // { dg-output \"reference binding to null pointer of type 'int'(\\n|\\r\\n|\\r)\" }\n-// { dg-output \"\\[^\\n\\r]*reference binding to null pointer of type 'int'(\\n|\\r\\n|\\r)\" }\n // { dg-output \"\\[^\\n\\r]*reference binding to null pointer of type 'const L'(\\n|\\r\\n|\\r)\" }\n-// { dg-output \"\\[^\\n\\r]*reference binding to null pointer of type 'int'(\\n|\\r\\n|\\r)\" }"}, {"sha": "0230c7ca79c98553114934b96c70e39a919c0ff9", "filename": "gcc/testsuite/g++.dg/ubsan/null-2.C", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06cefae97e37d462c9b06a7a26bb9e230abeaed3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fnull-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06cefae97e37d462c9b06a7a26bb9e230abeaed3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fnull-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fnull-2.C?ref=06cefae97e37d462c9b06a7a26bb9e230abeaed3", "patch": "@@ -35,5 +35,3 @@ main (void)\n \n // { dg-output \"\\.C:26:\\[0-9]*:\\[\\^\\n\\r]*member call on null pointer of type 'struct U'.*\" }\n // { dg-output \"\\.C:29:\\[0-9]*:\\[\\^\\n\\r]*member call on null pointer of type 'struct V'.*\" }\n-// { dg-output \"\\.C:31:\\[0-9]*:\\[\\^\\n\\r]*member call on null pointer of type 'struct V'.*\" }\n-// { dg-output \"\\.C:33:\\[0-9]*:\\[\\^\\n\\r]*member call on null pointer of type 'struct V'\" }"}]}