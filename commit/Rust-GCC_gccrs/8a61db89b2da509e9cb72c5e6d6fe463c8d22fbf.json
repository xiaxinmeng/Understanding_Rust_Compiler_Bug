{"sha": "8a61db89b2da509e9cb72c5e6d6fe463c8d22fbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE2MWRiODliMmRhNTA5ZTljYjcyYzVlNmQ2ZmU0NjNjOGQyMmZiZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-07-24T23:40:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-07-24T23:40:05Z"}, "message": "PR c++/71515 - typename in partial specialization\n\n\t* pt.c (resolve_typename_type): Try to avoid calling\n\tcurrently_open_class.\n\nFrom-SVN: r238696", "tree": {"sha": "717147bc17259f9655b02c65bb56fddb9ccf43d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/717147bc17259f9655b02c65bb56fddb9ccf43d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a61db89b2da509e9cb72c5e6d6fe463c8d22fbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a61db89b2da509e9cb72c5e6d6fe463c8d22fbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a61db89b2da509e9cb72c5e6d6fe463c8d22fbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a61db89b2da509e9cb72c5e6d6fe463c8d22fbf/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "635c1074bec1f91d4c210b1b66cf910220fa13a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/635c1074bec1f91d4c210b1b66cf910220fa13a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/635c1074bec1f91d4c210b1b66cf910220fa13a5"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "b5d816de90df8b8593f4bde3d0ae065bdff7eb2a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a61db89b2da509e9cb72c5e6d6fe463c8d22fbf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a61db89b2da509e9cb72c5e6d6fe463c8d22fbf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8a61db89b2da509e9cb72c5e6d6fe463c8d22fbf", "patch": "@@ -1,3 +1,9 @@\n+2016-07-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/71515\n+\t* pt.c (resolve_typename_type): Try to avoid calling\n+\tcurrently_open_class.\n+\n 2016-07-23  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/66617"}, {"sha": "a61f1c81a19ac5ff6026f6d203de917cc4bb245e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a61db89b2da509e9cb72c5e6d6fe463c8d22fbf/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a61db89b2da509e9cb72c5e6d6fe463c8d22fbf/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8a61db89b2da509e9cb72c5e6d6fe463c8d22fbf", "patch": "@@ -23678,29 +23678,26 @@ resolve_typename_type (tree type, bool only_current_p)\n     }\n   /* If we don't know what SCOPE refers to, then we cannot resolve the\n      TYPENAME_TYPE.  */\n-  if (TREE_CODE (scope) == TYPENAME_TYPE)\n-    return type;\n-  /* If the SCOPE is a template type parameter, we have no way of\n-     resolving the name.  */\n-  if (TREE_CODE (scope) == TEMPLATE_TYPE_PARM)\n-    return type;\n-  /* If the SCOPE is not the current instantiation, there's no reason\n-     to look inside it.  */\n-  if (only_current_p && !currently_open_class (scope))\n+  if (!CLASS_TYPE_P (scope))\n     return type;\n   /* If this is a typedef, we don't want to look inside (c++/11987).  */\n   if (typedef_variant_p (type))\n     return type;\n   /* If SCOPE isn't the template itself, it will not have a valid\n      TYPE_FIELDS list.  */\n-  if (CLASS_TYPE_P (scope)\n-      && same_type_p (scope, CLASSTYPE_PRIMARY_TEMPLATE_TYPE (scope)))\n+  if (same_type_p (scope, CLASSTYPE_PRIMARY_TEMPLATE_TYPE (scope)))\n     /* scope is either the template itself or a compatible instantiation\n        like X<T>, so look up the name in the original template.  */\n     scope = CLASSTYPE_PRIMARY_TEMPLATE_TYPE (scope);\n-  else\n-    /* scope is a partial instantiation, so we can't do the lookup or we\n-       will lose the template arguments.  */\n+  /* We shouldn't have built a TYPENAME_TYPE with a non-dependent scope.  */\n+  gcc_checking_assert (uses_template_parms (scope));\n+  /* If scope has no fields, it can't be a current instantiation.  Check this\n+     before currently_open_class to avoid infinite recursion (71515).  */\n+  if (!TYPE_FIELDS (scope))\n+    return type;\n+  /* If the SCOPE is not the current instantiation, there's no reason\n+     to look inside it.  */\n+  if (only_current_p && !currently_open_class (scope))\n     return type;\n   /* Enter the SCOPE so that name lookup will be resolved as if we\n      were in the class definition.  In particular, SCOPE will no"}, {"sha": "b5dc1b57189fe43f37217df9fc6c2fc562ab8805", "filename": "gcc/testsuite/g++.dg/template/typename22.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a61db89b2da509e9cb72c5e6d6fe463c8d22fbf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a61db89b2da509e9cb72c5e6d6fe463c8d22fbf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename22.C?ref=8a61db89b2da509e9cb72c5e6d6fe463c8d22fbf", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/71515\n+\n+template < typename, typename = int > struct A;\n+\n+template < typename T > struct A < T, typename A < T >::type >\n+{\n+  A < int > *a;\n+};"}]}