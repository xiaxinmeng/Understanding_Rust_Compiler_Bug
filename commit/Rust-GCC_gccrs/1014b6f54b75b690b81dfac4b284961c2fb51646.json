{"sha": "1014b6f54b75b690b81dfac4b284961c2fb51646", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAxNGI2ZjU0Yjc1YjY5MGI4MWRmYWM0YjI4NDk2MWMyZmI1MTY0Ng==", "commit": {"author": {"name": "Senthil Kumar Selvaraj", "email": "senthil_kumar.selvaraj@atmel.com", "date": "2015-11-19T17:30:24Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-11-19T17:30:24Z"}, "message": "[Patch, vrp] Allow VRP type conversion folding only for widenings upto word mode\n\n\t* tree.h (desired_pro_or_demotion_p): New function.\n\t* tree-vrp.c (simplify_cond_using_ranges): Call it.\n\n\t* gcc.dg/tree-ssa/vrp98.c: New testcase.\n\t* gcc.target/avr/uint8-single-reg.c: New testcase.\n\nFrom-SVN: r230618", "tree": {"sha": "c46d7a664854f1eb101011a8c8f91af5e052887e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c46d7a664854f1eb101011a8c8f91af5e052887e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1014b6f54b75b690b81dfac4b284961c2fb51646", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1014b6f54b75b690b81dfac4b284961c2fb51646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1014b6f54b75b690b81dfac4b284961c2fb51646", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1014b6f54b75b690b81dfac4b284961c2fb51646/comments", "author": null, "committer": null, "parents": [{"sha": "04a9bb6ec35a925ec15fcaafe16124748c3bfcc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a9bb6ec35a925ec15fcaafe16124748c3bfcc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04a9bb6ec35a925ec15fcaafe16124748c3bfcc9"}], "stats": {"total": 92, "additions": 91, "deletions": 1}, "files": [{"sha": "9e8383fb30c6aff925c1d0e0034714c277007c8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1014b6f54b75b690b81dfac4b284961c2fb51646/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1014b6f54b75b690b81dfac4b284961c2fb51646/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1014b6f54b75b690b81dfac4b284961c2fb51646", "patch": "@@ -1,3 +1,8 @@\n+2015-11-19  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n+\n+\t* tree.h (desired_pro_or_demotion_p): New function.\n+\t* tree-vrp.c (simplify_cond_using_ranges): Call it.\n+\n 2015-11-19  Jakub Jelinek  <jakub@redhat.com>\n \t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n "}, {"sha": "4a4c4ce7c07dabb7c703bf0721d97b3d507e7534", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1014b6f54b75b690b81dfac4b284961c2fb51646/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1014b6f54b75b690b81dfac4b284961c2fb51646/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1014b6f54b75b690b81dfac4b284961c2fb51646", "patch": "@@ -1,3 +1,8 @@\n+2015-11-19  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n+\n+\t* gcc.dg/tree-ssa/vrp98.c: New testcase.\n+\t* gcc.target/avr/uint8-single-reg.c: New testcase.\n+\n 2015-11-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/67409"}, {"sha": "982f091080c7f0c5bb0b2a5b7f237e35e7572098", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp98.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1014b6f54b75b690b81dfac4b284961c2fb51646/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp98.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1014b6f54b75b690b81dfac4b284961c2fb51646/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp98.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp98.c?ref=1014b6f54b75b690b81dfac4b284961c2fb51646", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-options \"-Os -fdump-tree-vrp1-details\" } */\n+\n+#include <stdint.h>\n+#include <limits.h>\n+\n+typedef unsigned int word __attribute__((mode(word)));\n+typedef unsigned __int128 bigger_than_word;\n+\n+int\n+foo (bigger_than_word a, word b, uint8_t c)\n+{\n+  /* Must fold use of t1 into use of b, as b is no wider than word_mode. */\n+  const uint8_t t1 = b % UCHAR_MAX;\n+\n+  /* Must NOT fold use of t2 into use of a, as a is wider than word_mode. */\n+  const uint8_t t2 = a % UCHAR_MAX;\n+\n+  /* Must fold use of t3 into use of c, as c is narrower than t3. */\n+  const uint32_t t3 = (const uint32_t)(c >> 1);\n+\n+  uint16_t ret = 0;\n+\n+  if (t1 == 1)\n+    ret = 20;\n+  else if (t2 == 2)\n+    ret = 30;\n+  else if (t3 == 3)\n+    ret = 40;\n+  /* Th extra condition below is necessary to prevent a prior pass from\n+     folding away the cast. Ignored in scan-tree-dump. */\n+  else if (t3 == 4)\n+    ret = 50;\n+\n+  return ret;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Folded into: if \\\\(_\\[0-9\\]+ == 1\\\\)\" \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-not \"Folded into: if \\\\(_\\[0-9\\]+ == 2\\\\)\" \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump \"Folded into: if \\\\(_\\[0-9\\]+ == 3\\\\)\" \"vrp1\" } } */"}, {"sha": "291b56cd6eb203fd32c982afcd6dfcbb06d1c89c", "filename": "gcc/testsuite/gcc.target/avr/uint8-single-reg.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1014b6f54b75b690b81dfac4b284961c2fb51646/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fuint8-single-reg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1014b6f54b75b690b81dfac4b284961c2fb51646/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fuint8-single-reg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fuint8-single-reg.c?ref=1014b6f54b75b690b81dfac4b284961c2fb51646", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os\" } */\n+\n+/* This testcase verifies that a uint8_t variable assigned from a wider variable\n+   with the same range is held in a single register. VRP must not fold away the\n+   conversion and use two regs to hold the uint16_t - widenings are ok only upto \n+   word mode (1 byte for AVR).\n+*/\n+\n+unsigned int foo(const unsigned int wvalue)\n+{\n+  const unsigned char type = (wvalue >> 8);\n+  unsigned int size = 0;\n+\n+  if (type == 1)\n+  {\n+    size = 20;\n+  }\n+  return size;\n+}\n+\n+/* { dg-final { scan-assembler \"cpi r25,lo8\\\\(1\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"cpc r\\\\d+,__zero_reg__\" } } */\n+"}, {"sha": "f2c948c2be1bceff9a8b44c33e062dfbe031ac4e", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1014b6f54b75b690b81dfac4b284961c2fb51646/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1014b6f54b75b690b81dfac4b284961c2fb51646/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=1014b6f54b75b690b81dfac4b284961c2fb51646", "patch": "@@ -9459,7 +9459,8 @@ simplify_cond_using_ranges (gcond *stmt)\n       innerop = gimple_assign_rhs1 (def_stmt);\n \n       if (TREE_CODE (innerop) == SSA_NAME\n-\t  && !POINTER_TYPE_P (TREE_TYPE (innerop)))\n+\t  && !POINTER_TYPE_P (TREE_TYPE (innerop))\n+         && desired_pro_or_demotion_p (TREE_TYPE (innerop), TREE_TYPE (op0)))\n \t{\n \t  value_range *vr = get_value_range (innerop);\n "}, {"sha": "cb52debc3d17490e989f26906de7b5f380b46d88", "filename": "gcc/tree.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1014b6f54b75b690b81dfac4b284961c2fb51646/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1014b6f54b75b690b81dfac4b284961c2fb51646/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=1014b6f54b75b690b81dfac4b284961c2fb51646", "patch": "@@ -5358,4 +5358,18 @@ get_decl_source_range (tree decl)\n   return get_range_from_loc (line_table, loc);\n }\n \n+/* Return true if it makes sense to promote/demote from_type to to_type. */\n+inline bool\n+desired_pro_or_demotion_p (const_tree to_type, const_tree from_type)\n+{\n+  unsigned int to_type_precision = TYPE_PRECISION (to_type);\n+\n+  /* OK to promote if to_type is no bigger than word_mode. */\n+  if (to_type_precision <= GET_MODE_PRECISION (word_mode))\n+    return true;\n+\n+  /* Otherwise, allow only if narrowing or same precision conversions. */\n+  return to_type_precision <= TYPE_PRECISION (from_type);\n+}\n+\n #endif  /* GCC_TREE_H  */"}]}