{"sha": "6932a1994e035982ca387d7d66b32e53b8e3bce0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkzMmExOTk0ZTAzNTk4MmNhMzg3ZDdkNjZiMzJlNTNiOGUzYmNlMA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2003-03-22T07:14:53Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-03-22T07:14:53Z"}, "message": "libjava.exp (gcj_invoke): Moved...\n\n\t* lib/libjava.exp (gcj_invoke): Moved...\n\t* libjava.jni/jni.exp: ...from here.\n\n\t* libjava.cni/shortfield.out: New file.\n\t* libjava.cni/shortfield.java: New file.\n\t* libjava.cni/natshortfield.cc: New file.\n\t* libjava.cni/natlongfield.cc: New file.\n\t* libjava.cni/longfield.out: New file.\n\t* libjava.cni/longfield.java: New file.\n\n\t* libjava.cni/cni.exp: New file.\n\nFrom-SVN: r64702", "tree": {"sha": "173dacf5d424f802b24bc491f512bcdbaaeb8592", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/173dacf5d424f802b24bc491f512bcdbaaeb8592"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6932a1994e035982ca387d7d66b32e53b8e3bce0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6932a1994e035982ca387d7d66b32e53b8e3bce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6932a1994e035982ca387d7d66b32e53b8e3bce0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6932a1994e035982ca387d7d66b32e53b8e3bce0/comments", "author": null, "committer": null, "parents": [{"sha": "442c0874ea857deaed375a626f848ac97a4fbcaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/442c0874ea857deaed375a626f848ac97a4fbcaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/442c0874ea857deaed375a626f848ac97a4fbcaf"}], "stats": {"total": 296, "additions": 252, "deletions": 44}, "files": [{"sha": "54a736568793f34d1796d3f379422c84a1cbc27f", "filename": "libjava/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6932a1994e035982ca387d7d66b32e53b8e3bce0/libjava%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6932a1994e035982ca387d7d66b32e53b8e3bce0/libjava%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FChangeLog?ref=6932a1994e035982ca387d7d66b32e53b8e3bce0", "patch": "@@ -1,3 +1,17 @@\n+2003-03-22  Tom Tromey  <tromey@redhat.com>\n+\n+\t* lib/libjava.exp (gcj_invoke): Moved...\n+\t* libjava.jni/jni.exp: ...from here.\n+\n+\t* libjava.cni/shortfield.out: New file.\n+\t* libjava.cni/shortfield.java: New file.\n+\t* libjava.cni/natshortfield.cc: New file.\n+\t* libjava.cni/natlongfield.cc: New file.\n+\t* libjava.cni/longfield.out: New file.\n+\t* libjava.cni/longfield.java: New file.\n+\n+\t* libjava.cni/cni.exp: New file.\n+\n 2003-03-11  Tom Tromey  <tromey@redhat.com>\n \n \t* libjava.lang/initfield.java: New file."}, {"sha": "972b7be64cc6c4d2512a9bc7332709a342c943ab", "filename": "libjava/testsuite/lib/libjava.exp", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6932a1994e035982ca387d7d66b32e53b8e3bce0/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6932a1994e035982ca387d7d66b32e53b8e3bce0/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flib%2Flibjava.exp?ref=6932a1994e035982ca387d7d66b32e53b8e3bce0", "patch": "@@ -457,6 +457,50 @@ proc gcj_link {program main files {options {}}} {\n     return 1\n }\n \n+# Invoke the program and see what happens.  Return 0 on failure.\n+proc gcj_invoke {program expectFile ld_library_additions} {\n+  global env\n+  set lib_path $env(LD_LIBRARY_PATH)\n+\n+  set newval .\n+  if {[llength $ld_library_additions] > 0} {\n+    append newval :[join $ld_library_additions :]\n+  }\n+  append newval :$lib_path\n+\n+  setenv LD_LIBRARY_PATH $newval\n+  setenv SHLIB_PATH $newval\n+\n+  verbose \"LD_LIBRARY_PATH=$env(LD_LIBRARY_PATH)\"\n+\n+  set result [libjava_load ./$program]\n+  set status [lindex $result 0]\n+  set output [lindex $result 1]\n+\n+  # Restore setting\n+  setenv LD_LIBRARY_PATH $lib_path\n+  setenv SHLIB_PATH $lib_path\n+\n+  if {$status != \"pass\"} {\n+    verbose \"got $output\"\n+    fail \"$program run\"\n+    untested \"$program output\"\n+    return 0\n+  }\n+\n+  set id [open $expectFile r]\n+  set expected [read $id]\n+  close $id\n+\n+  if {! [string compare $output $expected]} {\n+    pass \"$program output\"\n+    return 1\n+  } else {\n+    fail \"$program output\"\n+    return 0\n+  }\n+}\n+\n # Invoke a program and check its output.  EXECUTABLE is the program;\n # ARGS are the arguments to the program.  Returns 1 if tests passed\n # (or things were left untested), 0 otherwise."}, {"sha": "22df1462c1df9716f641ec07b4aaf46df0cedf43", "filename": "libjava/testsuite/libjava.cni/cni.exp", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6932a1994e035982ca387d7d66b32e53b8e3bce0/libjava%2Ftestsuite%2Flibjava.cni%2Fcni.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6932a1994e035982ca387d7d66b32e53b8e3bce0/libjava%2Ftestsuite%2Flibjava.cni%2Fcni.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.cni%2Fcni.exp?ref=6932a1994e035982ca387d7d66b32e53b8e3bce0", "patch": "@@ -0,0 +1,119 @@\n+# Tests for CNI code.\n+\n+# Compile a single C++ file and produce a .o file.  OPTIONS is a list\n+# of options to pass to the compiler.  Returns 0 on failure, 1 on\n+# success.\n+proc gcj_cni_compile_cxx_to_o {file {options {}}} {\n+  global srcdir\n+\n+  set name [file rootname [file tail $file]]\n+  set oname ${name}.o\n+\n+  # Find the generated header.\n+  lappend options \"additional_flags=-I. -I..\"\n+  # Find libgcj headers.\n+  lappend options \"additional_flags=-I$srcdir/..\"\n+\n+  set x [libjava_prune_warnings \\\n+\t   [target_compile $file $oname object $options]]\n+  if {$x != \"\"} {\n+    verbose \"target_compile failed: $x\" 2\n+    fail \"[file tail $file] compilation\"\n+    return 0\n+  }\n+\n+  pass \"[file tail $file] compilation\"\n+  return 1\n+}\n+\n+# Build header files given name of .java file.  Return 0 on failure.\n+proc gcj_cni_build_headers {file} {\n+  set gcjh [find_gcjh]\n+  set jvscan [find_jvscan]\n+\n+  set class_out [string trim \\\n+\t\t   [libjava_prune_warnings \\\n+\t\t      [lindex [local_exec \"$jvscan --encoding=UTF-8 $file --list-class\" \"\" \"\" 300] 1]]]\n+  if {[string match \"*parse error*\" $class_out]} {\n+    fail \"$file header generation\"\n+    return 0\n+  }\n+\n+  foreach file [split $class_out] {\n+    set x [string trim [libjava_prune_warnings \\\n+\t\t\t  [lindex [local_exec \"$gcjh $file\" \"\" \"\" 300] 1]]]\n+    if {$x != \"\"} {\n+      verbose \"local_exec failed: $x\" 2\n+      fail \"$file header generation\"\n+      return 0\n+    }\n+  }\n+\n+  pass \"$file header generation\"\n+  return 1\n+}\n+\n+# Do all the work for a single CNI test.  Return 0 on failure.\n+proc gcj_cni_test_one {file} {\n+  global runtests\n+\n+  # The base name.  We use it for several purposes.\n+  set main [file rootname [file tail $file]]\n+  if {! [runtest_file_p $runtests $main]} {\n+    # Simply skip it.\n+    return 1\n+  }\n+\n+  if {! [bytecompile_file $file [pwd]]} {\n+    fail \"bytecompile $file\"\n+    # FIXME - should use `untested' on all remaining tests.\n+    # But that is hard.\n+    return 0\n+  }\n+  pass \"bytecompile $file\"\n+\n+  if {! [gcj_cni_build_headers $file]} {\n+    # FIXME\n+    return 0\n+  }\n+\n+  set cfile [file join [file dirname $file] nat$main.cc]\n+  if {! [gcj_cni_compile_cxx_to_o $cfile]} {\n+    # FIXME\n+    return 0\n+  }\n+\n+  if {! [gcj_link $main $main [list $file nat$main.o]]} {\n+    # FIXME\n+    return 0\n+  }\n+\n+  if {! [gcj_invoke $main [file rootname $file].out {}]} {\n+    # FIXME\n+    return 0\n+  }\n+\n+  # When we succeed we remove all our clutter.\n+  eval gcj_cleanup [glob -nocomplain -- ${main}.*] [list $main nat$main.o]\n+\n+  return 1\n+}\n+\n+# Run the CNI tests.\n+proc gcj_cni_run {} {\n+  global srcdir subdir\n+  global build_triplet host_triplet\n+\n+  # For now we only test CNI on native builds.\n+  if {$build_triplet == $host_triplet} {\n+    catch { lsort [glob -nocomplain ${srcdir}/${subdir}/*.java] } srcfiles\n+\n+    foreach x $srcfiles {\n+      gcj_cni_test_one $x\n+    }\n+  } else {\n+    verbose \"CNI tests not run in cross-compilation environment\"\n+  }\n+}\n+\n+gcj_cni_run"}, {"sha": "917bf953a051115535af67922a0801fb2708d520", "filename": "libjava/testsuite/libjava.cni/longfield.java", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6932a1994e035982ca387d7d66b32e53b8e3bce0/libjava%2Ftestsuite%2Flibjava.cni%2Flongfield.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6932a1994e035982ca387d7d66b32e53b8e3bce0/libjava%2Ftestsuite%2Flibjava.cni%2Flongfield.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.cni%2Flongfield.java?ref=6932a1994e035982ca387d7d66b32e53b8e3bce0", "patch": "@@ -0,0 +1,22 @@\n+public class longfield\n+{\n+  long lval = 232300;\n+  boolean bval = true;\n+  String sval = \"maude\";\n+\n+  public native void doitc ();\n+\n+  public void doitj()\n+  {\n+    System.out.println(lval);\n+    System.out.println(bval);\n+    System.out.println(sval);\n+  }\n+\n+  public static void main(String[] args)\n+  {\n+    longfield f = new longfield();\n+    f.doitc();\n+    f.doitj();\n+  }\n+}"}, {"sha": "d041bbbf7d071cd377649f2fc65d1cb1ed6ddb7e", "filename": "libjava/testsuite/libjava.cni/longfield.out", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6932a1994e035982ca387d7d66b32e53b8e3bce0/libjava%2Ftestsuite%2Flibjava.cni%2Flongfield.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6932a1994e035982ca387d7d66b32e53b8e3bce0/libjava%2Ftestsuite%2Flibjava.cni%2Flongfield.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.cni%2Flongfield.out?ref=6932a1994e035982ca387d7d66b32e53b8e3bce0", "patch": "@@ -0,0 +1,6 @@\n+232300\n+true\n+maude\n+232300\n+true\n+maude"}, {"sha": "c16a46c76acd5a6f89a69316b0c850f632c051ec", "filename": "libjava/testsuite/libjava.cni/natlongfield.cc", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6932a1994e035982ca387d7d66b32e53b8e3bce0/libjava%2Ftestsuite%2Flibjava.cni%2Fnatlongfield.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6932a1994e035982ca387d7d66b32e53b8e3bce0/libjava%2Ftestsuite%2Flibjava.cni%2Fnatlongfield.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.cni%2Fnatlongfield.cc?ref=6932a1994e035982ca387d7d66b32e53b8e3bce0", "patch": "@@ -0,0 +1,15 @@\n+#include <gcj/cni.h>\n+\n+#include \"longfield.h\"\n+#include <java/lang/System.h>\n+#include <java/io/PrintStream.h>\n+\n+void\n+longfield::doitc ()\n+{\n+  java::io::PrintStream *ps = java::lang::System::out;\n+\n+  ps->println(lval);\n+  ps->println(bval);\n+  ps->println(sval);\n+}"}, {"sha": "08a7d5c05073dd4bbf09f6f89a98909a3a00fae7", "filename": "libjava/testsuite/libjava.cni/natshortfield.cc", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6932a1994e035982ca387d7d66b32e53b8e3bce0/libjava%2Ftestsuite%2Flibjava.cni%2Fnatshortfield.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6932a1994e035982ca387d7d66b32e53b8e3bce0/libjava%2Ftestsuite%2Flibjava.cni%2Fnatshortfield.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.cni%2Fnatshortfield.cc?ref=6932a1994e035982ca387d7d66b32e53b8e3bce0", "patch": "@@ -0,0 +1,10 @@\n+#include <stdio.h>\n+#include \"shortfield.h\"\n+\n+void shortfield::ouch ()\n+{\n+  printf (\"list: %d %d 0x%x\\n\",\n+\t  modCount,\n+\t  size__,\n+\t  data);\n+}"}, {"sha": "68b6c5e22fb1f29250eebd12f8632fc5efafd60e", "filename": "libjava/testsuite/libjava.cni/shortfield.java", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6932a1994e035982ca387d7d66b32e53b8e3bce0/libjava%2Ftestsuite%2Flibjava.cni%2Fshortfield.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6932a1994e035982ca387d7d66b32e53b8e3bce0/libjava%2Ftestsuite%2Flibjava.cni%2Fshortfield.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.cni%2Fshortfield.java?ref=6932a1994e035982ca387d7d66b32e53b8e3bce0", "patch": "@@ -0,0 +1,21 @@\n+class shortfieldbase\n+{\n+   short modCount;\n+}\n+\n+public class shortfield extends shortfieldbase\n+{\n+  short size__;\n+  int data;\n+  \n+  native void ouch ();\n+  \n+  public static void main (String[] s)\n+  {\n+    shortfield f = new shortfield();\n+    f.modCount = 99;\n+    f.size__ = 2;\n+    f.data = 0x12345678;\n+    f.ouch();\n+  }\n+}"}, {"sha": "06485dbae49bc49dc3946b4076fba4d8be5e87f8", "filename": "libjava/testsuite/libjava.cni/shortfield.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6932a1994e035982ca387d7d66b32e53b8e3bce0/libjava%2Ftestsuite%2Flibjava.cni%2Fshortfield.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6932a1994e035982ca387d7d66b32e53b8e3bce0/libjava%2Ftestsuite%2Flibjava.cni%2Fshortfield.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.cni%2Fshortfield.out?ref=6932a1994e035982ca387d7d66b32e53b8e3bce0", "patch": "@@ -0,0 +1 @@\n+list: 99 2 0x12345678"}, {"sha": "6d6c93d919726ea3983d6c8007ecc3d3774bbd4c", "filename": "libjava/testsuite/libjava.jni/jni.exp", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6932a1994e035982ca387d7d66b32e53b8e3bce0/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6932a1994e035982ca387d7d66b32e53b8e3bce0/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp?ref=6932a1994e035982ca387d7d66b32e53b8e3bce0", "patch": "@@ -43,50 +43,6 @@ proc gcj_jni_build_header {file} {\n   return 1\n }\n \n-# Invoke the program and see what happens.  Return 0 on failure.\n-proc gcj_invoke {program expectFile ld_library_additions} {\n-  global env\n-  set lib_path $env(LD_LIBRARY_PATH)\n-\n-  set newval .\n-  if {[llength $ld_library_additions] > 0} {\n-    append newval :[join $ld_library_additions :]\n-  }\n-  append newval :$lib_path\n-\n-  setenv LD_LIBRARY_PATH $newval\n-  setenv SHLIB_PATH $newval\n-\n-  verbose \"LD_LIBRARY_PATH=$env(LD_LIBRARY_PATH)\"\n-\n-  set result [libjava_load ./$program]\n-  set status [lindex $result 0]\n-  set output [lindex $result 1]\n-\n-  # Restore setting\n-  setenv LD_LIBRARY_PATH $lib_path\n-  setenv SHLIB_PATH $lib_path\n-\n-  if {$status != \"pass\"} {\n-    verbose \"got $output\"\n-    fail \"$program run\"\n-    untested \"$program output\"\n-    return 0\n-  }\n-\n-  set id [open $expectFile r]\n-  set expected [read $id]\n-  close $id\n-\n-  if {! [string compare $output $expected]} {\n-    pass \"$program output\"\n-    return 1\n-  } else {\n-    fail \"$program output\"\n-    return 0\n-  }\n-}\n-\n # Do all the work for a single JNI test.  Return 0 on failure.\n proc gcj_jni_test_one {file} {\n   global runtests"}]}