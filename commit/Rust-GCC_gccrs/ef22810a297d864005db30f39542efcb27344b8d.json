{"sha": "ef22810a297d864005db30f39542efcb27344b8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYyMjgxMGEyOTdkODY0MDA1ZGIzMGYzOTU0MmVmY2IyNzM0NGI4ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2016-01-28T17:48:22Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2016-01-28T17:48:22Z"}, "message": "re PR target/69305 (wrong code with -O and int128 @ aarch64)\n\nPR target/69305\n\n  * config/aarch64/aarch64-modes.def (CC_Cmode): New\n  * config/aarch64/aarch64-protos.h: Update.\n  * config/aarch64/aarch64.c (aarch64_zero_extend_const_eq): New.\n  (aarch64_select_cc_mode): Add check for use of CC_Cmode.\n  (aarch64_get_condition_code_1): Handle CC_Cmode.\n  * config/aarch64/aarch64.md (addti3): Use adddi3_compareC.\n  (*add<mode>3_compareC_cconly_imm): New.\n  (*add<mode>3_compareC_cconly): New.\n  (*add<mode>3_compareC_imm): New.\n  (add<mode>3_compareC): New.\n  (add<mode>3_carryin, *addsi3_carryin_uxtw): Sort compare operand\n  to be first.  Use aarch64_carry_operation.\n  (*add<mode>3_carryin_alt1, *addsi3_carryin_alt1_uxtw): Remove.\n  (*add<mode>3_carryin_alt2, *addsi3_carryin_alt2_uxtw): Remove.\n  (*add<mode>3_carryin_alt3, *addsi3_carryin_alt3_uxtw): Remove.\n  (subti3): Use subdi3_compare1.\n  (*sub<mode>3_compare0): Rename from sub<mode>3_compare0.\n  (sub<mode>3_compare1): New.\n  (*sub<mode>3_carryin0, *subsi3_carryin_uxtw): New.\n  (*sub<mode>3_carryin): Use aarch64_borrow_operation.\n  (*subsi3_carryin_uxtw): Likewise.\n  (*ngc<mode>, *ngcsi_uxtw): Likewise.\n  (*sub<mode>3_carryin_alt, *subsi3_carryin_alt_uxtw): New.\n  * config/aarch64/iterators.md (DWI): New.\n  * config/aarch64/predicates.md (aarch64_carry_operation): New.\n  (aarch64_borrow_operation): New.\n\nFrom-SVN: r232936", "tree": {"sha": "6b8cd59162b4060714e3bfe0a6fe6367ed98a782", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b8cd59162b4060714e3bfe0a6fe6367ed98a782"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef22810a297d864005db30f39542efcb27344b8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef22810a297d864005db30f39542efcb27344b8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef22810a297d864005db30f39542efcb27344b8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef22810a297d864005db30f39542efcb27344b8d/comments", "author": null, "committer": null, "parents": [{"sha": "8d18bd108a6ebe7101ef818c3f4c87802fb4c805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d18bd108a6ebe7101ef818c3f4c87802fb4c805", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d18bd108a6ebe7101ef818c3f4c87802fb4c805"}], "stats": {"total": 384, "additions": 273, "deletions": 111}, "files": [{"sha": "910817b3b1d7f039fb450f7afb0a125c431373b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef22810a297d864005db30f39542efcb27344b8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef22810a297d864005db30f39542efcb27344b8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef22810a297d864005db30f39542efcb27344b8d", "patch": "@@ -1,3 +1,33 @@\n+2016-01-28  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/69305\n+\t* config/aarch64/aarch64-modes.def (CC_Cmode): New\n+\t* config/aarch64/aarch64-protos.h: Update.\n+\t* config/aarch64/aarch64.c (aarch64_zero_extend_const_eq): New.\n+\t(aarch64_select_cc_mode): Add check for use of CC_Cmode.\n+\t(aarch64_get_condition_code_1): Handle CC_Cmode.\n+\t* config/aarch64/aarch64.md (addti3): Use adddi3_compareC.\n+\t(*add<mode>3_compareC_cconly_imm): New.\n+\t(*add<mode>3_compareC_cconly): New.\n+\t(*add<mode>3_compareC_imm): New.\n+\t(add<mode>3_compareC): New.\n+\t(add<mode>3_carryin, *addsi3_carryin_uxtw): Sort compare operand\n+\tto be first.  Use aarch64_carry_operation.\n+\t(*add<mode>3_carryin_alt1, *addsi3_carryin_alt1_uxtw): Remove.\n+\t(*add<mode>3_carryin_alt2, *addsi3_carryin_alt2_uxtw): Remove.\n+\t(*add<mode>3_carryin_alt3, *addsi3_carryin_alt3_uxtw): Remove.\n+\t(subti3): Use subdi3_compare1.\n+\t(*sub<mode>3_compare0): Rename from sub<mode>3_compare0.\n+\t(sub<mode>3_compare1): New.\n+\t(*sub<mode>3_carryin0, *subsi3_carryin_uxtw): New.\n+\t(*sub<mode>3_carryin): Use aarch64_borrow_operation.\n+\t(*subsi3_carryin_uxtw): Likewise.\n+\t(*ngc<mode>, *ngcsi_uxtw): Likewise.\n+\t(*sub<mode>3_carryin_alt, *subsi3_carryin_alt_uxtw): New.\n+\t* config/aarch64/iterators.md (DWI): New.\n+\t* config/aarch64/predicates.md (aarch64_carry_operation): New.\n+\t(aarch64_borrow_operation): New.\n+\n 2016-01-28  Abderrazek Zaafrani  <a.zaafrani@samsung.com>\n \n \t* graphite-optimize-isl.c (optimize_isl): Print a different debug"}, {"sha": "7de0b3f2fec1024946e40c66088b5b48675c4b7a", "filename": "gcc/config/aarch64/aarch64-modes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef22810a297d864005db30f39542efcb27344b8d/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef22810a297d864005db30f39542efcb27344b8d/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def?ref=ef22810a297d864005db30f39542efcb27344b8d", "patch": "@@ -25,6 +25,7 @@ CC_MODE (CC_ZESWP); /* zero-extend LHS (but swap to make it RHS).  */\n CC_MODE (CC_SESWP); /* sign-extend LHS (but swap to make it RHS).  */\n CC_MODE (CC_NZ);    /* Only N and Z bits of condition flags are valid.  */\n CC_MODE (CC_Z);     /* Only Z bit of condition flags is valid.  */\n+CC_MODE (CC_C);     /* Only C bit of condition flags is valid.  */\n \n /* Half-precision floating point for __fp16.  */\n FLOAT_MODE (HF, 2, 0);"}, {"sha": "78870e275279b1409dfc98b8e46b89b97c76274e", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef22810a297d864005db30f39542efcb27344b8d/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef22810a297d864005db30f39542efcb27344b8d/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=ef22810a297d864005db30f39542efcb27344b8d", "patch": "@@ -290,6 +290,7 @@ void aarch64_declare_function_name (FILE *, const char*, tree);\n bool aarch64_legitimate_pic_operand_p (rtx);\n bool aarch64_modes_tieable_p (machine_mode mode1,\n \t\t\t      machine_mode mode2);\n+bool aarch64_zero_extend_const_eq (machine_mode, rtx, machine_mode, rtx);\n bool aarch64_move_imm (HOST_WIDE_INT, machine_mode);\n bool aarch64_mov_operand_p (rtx, machine_mode);\n int aarch64_simd_attr_length_rglist (enum machine_mode);"}, {"sha": "aee6685f0adbdde00160959861af1a3d6e8195b4", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef22810a297d864005db30f39542efcb27344b8d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef22810a297d864005db30f39542efcb27344b8d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=ef22810a297d864005db30f39542efcb27344b8d", "patch": "@@ -1493,6 +1493,16 @@ aarch64_split_simd_move (rtx dst, rtx src)\n     }\n }\n \n+bool\n+aarch64_zero_extend_const_eq (machine_mode xmode, rtx x,\n+\t\t\t      machine_mode ymode, rtx y)\n+{\n+  rtx r = simplify_const_unary_operation (ZERO_EXTEND, xmode, y, ymode);\n+  gcc_assert (r != NULL);\n+  return rtx_equal_p (x, r);\n+}\n+\t\t\t      \n+\n static rtx\n aarch64_force_temporary (machine_mode mode, rtx x, rtx value)\n {\n@@ -4189,6 +4199,13 @@ aarch64_select_cc_mode (RTX_CODE code, rtx x, rtx y)\n     return ((code == GT || code == GE || code == LE || code == LT)\n \t    ? CC_SESWPmode : CC_ZESWPmode);\n \n+  /* A test for unsigned overflow.  */\n+  if ((GET_MODE (x) == DImode || GET_MODE (x) == TImode)\n+      && code == NE\n+      && GET_CODE (x) == PLUS\n+      && GET_CODE (y) == ZERO_EXTEND)\n+    return CC_Cmode;\n+\n   /* For everything else, return CCmode.  */\n   return CCmode;\n }\n@@ -4288,6 +4305,15 @@ aarch64_get_condition_code_1 (enum machine_mode mode, enum rtx_code comp_code)\n \t}\n       break;\n \n+    case CC_Cmode:\n+      switch (comp_code)\n+\t{\n+\tcase NE: return AARCH64_CS;\n+\tcase EQ: return AARCH64_CC;\n+\tdefault: return -1;\n+\t}\n+      break;\n+\n     default:\n       return -1;\n       break;"}, {"sha": "b42f550d29593a1c92ec3c76767a05d4c70357db", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 191, "deletions": 109, "changes": 300, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef22810a297d864005db30f39542efcb27344b8d/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef22810a297d864005db30f39542efcb27344b8d/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=ef22810a297d864005db30f39542efcb27344b8d", "patch": "@@ -1710,7 +1710,7 @@\n   \"\"\n {\n   rtx low = gen_reg_rtx (DImode);\n-  emit_insn (gen_adddi3_compare0 (low, gen_lowpart (DImode, operands[1]),\n+  emit_insn (gen_adddi3_compareC (low, gen_lowpart (DImode, operands[1]),\n \t\t\t\t  gen_lowpart (DImode, operands[2])));\n \n   rtx high = gen_reg_rtx (DImode);\n@@ -1755,6 +1755,71 @@\n   [(set_attr \"type\" \"alus_sreg,alus_imm,alus_imm\")]\n )\n \n+(define_insn \"*add<mode>3_compareC_cconly_imm\"\n+  [(set (reg:CC_C CC_REGNUM)\n+\t(ne:CC_C\n+\t  (plus:<DWI>\n+\t    (zero_extend:<DWI> (match_operand:GPI 0 \"register_operand\" \"r,r\"))\n+\t    (match_operand:<DWI> 2 \"const_scalar_int_operand\" \"\"))\n+\t  (zero_extend:<DWI>\n+\t    (plus:GPI\n+\t      (match_dup 0)\n+\t      (match_operand:GPI 1 \"aarch64_plus_immediate\" \"I,J\")))))]\n+  \"aarch64_zero_extend_const_eq (<DWI>mode, operands[2],\n+\t\t\t\t <MODE>mode, operands[1])\"\n+  \"@\n+  cmn\\\\t%<w>0, %<w>1\n+  cmp\\\\t%<w>0, #%n1\"\n+  [(set_attr \"type\" \"alus_imm\")]\n+)\n+\n+(define_insn \"*add<mode>3_compareC_cconly\"\n+  [(set (reg:CC_C CC_REGNUM)\n+\t(ne:CC_C\n+\t  (plus:<DWI>\n+\t    (zero_extend:<DWI> (match_operand:GPI 0 \"register_operand\" \"r\"))\n+\t    (zero_extend:<DWI> (match_operand:GPI 1 \"register_operand\" \"r\")))\n+\t  (zero_extend:<DWI> (plus:GPI (match_dup 0) (match_dup 1)))))]\n+  \"\"\n+  \"cmn\\\\t%<w>0, %<w>1\"\n+  [(set_attr \"type\" \"alus_sreg\")]\n+)\n+\n+(define_insn \"*add<mode>3_compareC_imm\"\n+  [(set (reg:CC_C CC_REGNUM)\n+\t(ne:CC_C\n+\t  (plus:<DWI>\n+\t    (zero_extend:<DWI> (match_operand:GPI 1 \"register_operand\" \"r,r\"))\n+\t    (match_operand:<DWI> 3 \"const_scalar_int_operand\" \"\"))\n+\t  (zero_extend:<DWI>\n+\t    (plus:GPI\n+\t      (match_dup 1)\n+\t      (match_operand:GPI 2 \"aarch64_plus_immediate\" \"I,J\")))))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=r,r\")\n+\t(plus:GPI (match_dup 1) (match_dup 2)))]\n+  \"aarch64_zero_extend_const_eq (<DWI>mode, operands[3],\n+                                 <MODE>mode, operands[2])\"\n+  \"@\n+  adds\\\\t%<w>0, %<w>1, %<w>2\n+  subs\\\\t%<w>0, %<w>1, #%n2\"\n+  [(set_attr \"type\" \"alus_imm\")]\n+)\n+ \n+(define_insn \"add<mode>3_compareC\"\n+  [(set (reg:CC_C CC_REGNUM)\n+\t(ne:CC_C\n+\t  (plus:<DWI>\n+\t    (zero_extend:<DWI> (match_operand:GPI 1 \"register_operand\" \"r\"))\n+\t    (zero_extend:<DWI> (match_operand:GPI 2 \"register_operand\" \"r\")))\n+\t  (zero_extend:<DWI>\n+\t    (plus:GPI (match_dup 1) (match_dup 2)))))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(plus:GPI (match_dup 1) (match_dup 2)))]\n+  \"\"\n+  \"adds\\\\t%<w>0, %<w>1, %<w>2\"\n+  [(set_attr \"type\" \"alus_sreg\")]\n+)\n+\n (define_insn \"*adds_shift_imm_<mode>\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ\n@@ -2074,105 +2139,41 @@\n   [(set_attr \"type\" \"alu_ext\")]\n )\n \n-(define_insn \"add<mode>3_carryin\"\n-  [(set\n-    (match_operand:GPI 0 \"register_operand\" \"=r\")\n-    (plus:GPI (geu:GPI (reg:CC CC_REGNUM) (const_int 0))\n-\t      (plus:GPI\n-\t\t(match_operand:GPI 1 \"register_operand\" \"r\")\n-\t\t(match_operand:GPI 2 \"register_operand\" \"r\"))))]\n-   \"\"\n-   \"adc\\\\t%<w>0, %<w>1, %<w>2\"\n-  [(set_attr \"type\" \"adc_reg\")]\n-)\n-\n-;; zero_extend version of above\n-(define_insn \"*addsi3_carryin_uxtw\"\n-  [(set\n-    (match_operand:DI 0 \"register_operand\" \"=r\")\n-    (zero_extend:DI\n-     (plus:SI (geu:SI (reg:CC CC_REGNUM) (const_int 0))\n-\t      (plus:SI\n-\t       (match_operand:SI 1 \"register_operand\" \"r\")\n-\t       (match_operand:SI 2 \"register_operand\" \"r\")))))]\n-   \"\"\n-   \"adc\\\\t%w0, %w1, %w2\"\n-  [(set_attr \"type\" \"adc_reg\")]\n-)\n-\n-(define_insn \"*add<mode>3_carryin_alt1\"\n-  [(set\n-    (match_operand:GPI 0 \"register_operand\" \"=r\")\n-    (plus:GPI (plus:GPI\n-\t\t(match_operand:GPI 1 \"register_operand\" \"r\")\n-\t\t(match_operand:GPI 2 \"register_operand\" \"r\"))\n-              (geu:GPI (reg:CC CC_REGNUM) (const_int 0))))]\n+(define_expand \"add<mode>3_carryin\"\n+  [(set (match_operand:GPI 0 \"register_operand\")\n+\t(plus:GPI\n+\t  (plus:GPI\n+\t    (ne:GPI (reg:CC_C CC_REGNUM) (const_int 0))\n+\t    (match_operand:GPI 1 \"aarch64_reg_or_zero\"))\n+\t  (match_operand:GPI 2 \"aarch64_reg_or_zero\")))]\n    \"\"\n-   \"adc\\\\t%<w>0, %<w>1, %<w>2\"\n-  [(set_attr \"type\" \"adc_reg\")]\n-)\n-\n-;; zero_extend version of above\n-(define_insn \"*addsi3_carryin_alt1_uxtw\"\n-  [(set\n-    (match_operand:DI 0 \"register_operand\" \"=r\")\n-    (zero_extend:DI\n-     (plus:SI (plus:SI\n-\t       (match_operand:SI 1 \"register_operand\" \"r\")\n-\t       (match_operand:SI 2 \"register_operand\" \"r\"))\n-              (geu:SI (reg:CC CC_REGNUM) (const_int 0)))))]\n    \"\"\n-   \"adc\\\\t%w0, %w1, %w2\"\n-  [(set_attr \"type\" \"adc_reg\")]\n )\n \n-(define_insn \"*add<mode>3_carryin_alt2\"\n-  [(set\n-    (match_operand:GPI 0 \"register_operand\" \"=r\")\n-    (plus:GPI (plus:GPI\n-                (geu:GPI (reg:CC CC_REGNUM) (const_int 0))\n-\t\t(match_operand:GPI 1 \"register_operand\" \"r\"))\n-\t      (match_operand:GPI 2 \"register_operand\" \"r\")))]\n-   \"\"\n-   \"adc\\\\t%<w>0, %<w>1, %<w>2\"\n-  [(set_attr \"type\" \"adc_reg\")]\n-)\n+;; Note that add with carry with two zero inputs is matched by cset,\n+;; and that add with carry with one zero input is matched by cinc.\n \n-;; zero_extend version of above\n-(define_insn \"*addsi3_carryin_alt2_uxtw\"\n-  [(set\n-    (match_operand:DI 0 \"register_operand\" \"=r\")\n-    (zero_extend:DI\n-     (plus:SI (plus:SI\n-               (geu:SI (reg:CC CC_REGNUM) (const_int 0))\n-\t       (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t      (match_operand:SI 2 \"register_operand\" \"r\"))))]\n-   \"\"\n-   \"adc\\\\t%w0, %w1, %w2\"\n-  [(set_attr \"type\" \"adc_reg\")]\n-)\n-\n-(define_insn \"*add<mode>3_carryin_alt3\"\n-  [(set\n-    (match_operand:GPI 0 \"register_operand\" \"=r\")\n-    (plus:GPI (plus:GPI\n-                (geu:GPI (reg:CC CC_REGNUM) (const_int 0))\n-\t\t(match_operand:GPI 2 \"register_operand\" \"r\"))\n-\t      (match_operand:GPI 1 \"register_operand\" \"r\")))]\n+(define_insn \"*add<mode>3_carryin\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(plus:GPI\n+\t  (plus:GPI\n+\t    (match_operand:GPI 3 \"aarch64_carry_operation\" \"\")\n+\t    (match_operand:GPI 1 \"register_operand\" \"r\"))\n+\t  (match_operand:GPI 2 \"register_operand\" \"r\")))]\n    \"\"\n    \"adc\\\\t%<w>0, %<w>1, %<w>2\"\n   [(set_attr \"type\" \"adc_reg\")]\n )\n \n ;; zero_extend version of above\n-(define_insn \"*addsi3_carryin_alt3_uxtw\"\n-  [(set\n-    (match_operand:DI 0 \"register_operand\" \"=r\")\n-    (zero_extend:DI\n-     (plus:SI (plus:SI\n-               (geu:SI (reg:CC CC_REGNUM) (const_int 0))\n-\t       (match_operand:SI 2 \"register_operand\" \"r\"))\n-\t      (match_operand:SI 1 \"register_operand\" \"r\"))))]\n+(define_insn \"*addsi3_carryin_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (plus:SI\n+\t    (plus:SI\n+\t      (match_operand:SI 3 \"aarch64_carry_operation\" \"\")\n+\t      (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t    (match_operand:SI 2 \"register_operand\" \"r\"))))]\n    \"\"\n    \"adc\\\\t%w0, %w1, %w2\"\n   [(set_attr \"type\" \"adc_reg\")]\n@@ -2281,7 +2282,7 @@\n   \"\"\n {\n   rtx low = gen_reg_rtx (DImode);\n-  emit_insn (gen_subdi3_compare0 (low, gen_lowpart (DImode, operands[1]),\n+  emit_insn (gen_subdi3_compare1 (low, gen_lowpart (DImode, operands[1]),\n \t\t\t\t  gen_lowpart (DImode, operands[2])));\n \n   rtx high = gen_reg_rtx (DImode);\n@@ -2293,7 +2294,7 @@\n   DONE;\n })\n \n-(define_insn \"sub<mode>3_compare0\"\n+(define_insn \"*sub<mode>3_compare0\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ (minus:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n \t\t\t\t  (match_operand:GPI 2 \"register_operand\" \"r\"))\n@@ -2318,6 +2319,18 @@\n   [(set_attr \"type\" \"alus_sreg\")]\n )\n \n+(define_insn \"sub<mode>3_compare1\"\n+  [(set (reg:CC CC_REGNUM)\n+\t(compare:CC\n+\t  (match_operand:GPI 1 \"aarch64_reg_or_zero\" \"rZ\")\n+\t  (match_operand:GPI 2 \"aarch64_reg_or_zero\" \"rZ\")))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(minus:GPI (match_dup 1) (match_dup 2)))]\n+  \"\"\n+  \"subs\\\\t%<w>0, %<w>1, %<w>2\"\n+  [(set_attr \"type\" \"alus_sreg\")]\n+)\n+\n (define_insn \"*sub_<shift>_<mode>\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(minus:GPI (match_operand:GPI 3 \"register_operand\" \"r\")\n@@ -2440,27 +2453,94 @@\n   [(set_attr \"type\" \"alu_ext\")]\n )\n \n-(define_insn \"sub<mode>3_carryin\"\n-  [(set\n-    (match_operand:GPI 0 \"register_operand\" \"=r\")\n-    (minus:GPI (minus:GPI\n-\t\t(match_operand:GPI 1 \"register_operand\" \"r\")\n-\t\t(ltu:GPI (reg:CC CC_REGNUM) (const_int 0)))\n-\t       (match_operand:GPI 2 \"register_operand\" \"r\")))]\n+;; The hardware description is op1 + ~op2 + C.\n+;;                           = op1 + (-op2 + 1) + (1 - !C)\n+;;                           = op1 - op2 - 1 + 1 - !C\n+;;                           = op1 - op2 - !C.\n+;; We describe the latter.\n+\n+(define_insn \"*sub<mode>3_carryin0\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(minus:GPI\n+\t  (match_operand:GPI 1 \"aarch64_reg_or_zero\" \"rZ\")\n+\t  (match_operand:GPI 2 \"aarch64_borrow_operation\" \"\")))]\n+   \"\"\n+   \"sbc\\\\t%<w>0, %<w>1, <w>zr\"\n+  [(set_attr \"type\" \"adc_reg\")]\n+)\n+\n+;; zero_extend version of the above\n+(define_insn \"*subsi3_carryin_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (minus:SI\n+\t    (match_operand:SI 1 \"aarch64_reg_or_zero\" \"rZ\")\n+\t    (match_operand:SI 2 \"aarch64_borrow_operation\" \"\"))))]\n+   \"\"\n+   \"sbc\\\\t%w0, %w1, wzr\"\n+  [(set_attr \"type\" \"adc_reg\")]\n+)\n+\n+(define_expand \"sub<mode>3_carryin\"\n+  [(set (match_operand:GPI 0 \"register_operand\")\n+\t(minus:GPI\n+\t  (minus:GPI\n+\t    (match_operand:GPI 1 \"aarch64_reg_or_zero\")\n+\t    (match_operand:GPI 2 \"register_operand\"))\n+\t  (ltu:GPI (reg:CC CC_REGNUM) (const_int 0))))]\n+   \"\"\n+   \"\"\n+)\n+\n+(define_insn \"*sub<mode>3_carryin\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(minus:GPI\n+\t  (minus:GPI\n+\t    (match_operand:GPI 1 \"aarch64_reg_or_zero\" \"rZ\")\n+\t    (match_operand:GPI 2 \"register_operand\" \"r\"))\n+\t  (match_operand:GPI 3 \"aarch64_borrow_operation\" \"\")))]\n+\n    \"\"\n    \"sbc\\\\t%<w>0, %<w>1, %<w>2\"\n   [(set_attr \"type\" \"adc_reg\")]\n )\n \n ;; zero_extend version of the above\n (define_insn \"*subsi3_carryin_uxtw\"\n-  [(set\n-    (match_operand:DI 0 \"register_operand\" \"=r\")\n-    (zero_extend:DI\n-     (minus:SI (minus:SI\n-\t\t(match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t(ltu:SI (reg:CC CC_REGNUM) (const_int 0)))\n-\t       (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (minus:SI\n+\t    (minus:SI\n+\t      (match_operand:SI 1 \"aarch64_reg_or_zero\" \"rZ\")\n+\t      (match_operand:SI 2 \"register_operand\" \"r\"))\n+\t    (match_operand:SI 3 \"aarch64_borrow_operation\" \"\"))))]\n+\n+   \"\"\n+   \"sbc\\\\t%w0, %w1, %w2\"\n+  [(set_attr \"type\" \"adc_reg\")]\n+)\n+\n+(define_insn \"*sub<mode>3_carryin_alt\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(minus:GPI\n+\t  (minus:GPI\n+\t    (match_operand:GPI 1 \"aarch64_reg_or_zero\" \"rZ\")\n+\t    (match_operand:GPI 3 \"aarch64_borrow_operation\" \"\"))\n+\t  (match_operand:GPI 2 \"register_operand\" \"r\")))]\n+   \"\"\n+   \"sbc\\\\t%<w>0, %<w>1, %<w>2\"\n+  [(set_attr \"type\" \"adc_reg\")]\n+)\n+\n+;; zero_extend version of the above\n+(define_insn \"*subsi3_carryin_alt_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (minus:SI\n+\t    (minus:SI\n+\t      (match_operand:SI 1 \"aarch64_reg_or_zero\" \"rZ\")\n+\t      (match_operand:SI 3 \"aarch64_borrow_operation\" \"\"))\n+\t    (match_operand:SI 2 \"register_operand\" \"r\"))))]\n    \"\"\n    \"sbc\\\\t%w0, %w1, %w2\"\n   [(set_attr \"type\" \"adc_reg\")]\n@@ -2564,8 +2644,9 @@\n \n (define_insn \"*ngc<mode>\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-\t(minus:GPI (neg:GPI (ltu:GPI (reg:CC CC_REGNUM) (const_int 0)))\n-\t\t   (match_operand:GPI 1 \"register_operand\" \"r\")))]\n+\t(minus:GPI\n+\t  (neg:GPI (match_operand:GPI 2 \"aarch64_borrow_operation\" \"\"))\n+\t  (match_operand:GPI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"ngc\\\\t%<w>0, %<w>1\"\n   [(set_attr \"type\" \"adc_reg\")]\n@@ -2574,8 +2655,9 @@\n (define_insn \"*ngcsi_uxtw\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n-\t (minus:SI (neg:SI (ltu:SI (reg:CC CC_REGNUM) (const_int 0)))\n-\t\t   (match_operand:SI 1 \"register_operand\" \"r\"))))]\n+\t  (minus:SI\n+\t    (neg:SI (match_operand:SI 2 \"aarch64_borrow_operation\" \"\"))\n+\t    (match_operand:SI 1 \"register_operand\" \"r\"))))]\n   \"\"\n   \"ngc\\\\t%w0, %w1\"\n   [(set_attr \"type\" \"adc_reg\")]"}, {"sha": "d9bd39112c3f4af19781290778babdf919f1c514", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef22810a297d864005db30f39542efcb27344b8d/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef22810a297d864005db30f39542efcb27344b8d/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=ef22810a297d864005db30f39542efcb27344b8d", "patch": "@@ -350,6 +350,9 @@\n ;; For constraints used in scalar immediate vector moves\n (define_mode_attr hq [(HI \"h\") (QI \"q\")])\n \n+;; For doubling width of an integer mode\n+(define_mode_attr DWI [(QI \"HI\") (HI \"SI\") (SI \"DI\") (DI \"TI\")])\n+\n ;; For scalar usage of vector/FP registers\n (define_mode_attr v [(QI \"b\") (HI \"h\") (SI \"s\") (DI \"d\")\n \t\t    (SF \"s\") (DF \"d\")"}, {"sha": "e80e40683cada374303ea987017f95654531a032", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef22810a297d864005db30f39542efcb27344b8d/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef22810a297d864005db30f39542efcb27344b8d/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=ef22810a297d864005db30f39542efcb27344b8d", "patch": "@@ -242,6 +242,25 @@\n   return aarch64_get_condition_code (op) >= 0;\n })\n \n+(define_special_predicate \"aarch64_carry_operation\"\n+  (match_code \"ne,geu\")\n+{\n+  if (XEXP (op, 1) != const0_rtx)\n+    return false;\n+  machine_mode ccmode = (GET_CODE (op) == NE ? CC_Cmode : CCmode);\n+  rtx op0 = XEXP (op, 0);\n+  return REG_P (op0) && REGNO (op0) == CC_REGNUM && GET_MODE (op0) == ccmode;\n+})\n+\n+(define_special_predicate \"aarch64_borrow_operation\"\n+  (match_code \"eq,ltu\")\n+{\n+  if (XEXP (op, 1) != const0_rtx)\n+    return false;\n+  machine_mode ccmode = (GET_CODE (op) == EQ ? CC_Cmode : CCmode);\n+  rtx op0 = XEXP (op, 0);\n+  return REG_P (op0) && REGNO (op0) == CC_REGNUM && GET_MODE (op0) == ccmode;\n+})\n \n ;; True if the operand is memory reference suitable for a load/store exclusive.\n (define_predicate \"aarch64_sync_memory_operand\""}, {"sha": "7c962cbb396f5ef9634cf3091dd12327ad2a7b03", "filename": "gcc/testsuite/gcc.target/aarch64/ccmp_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef22810a297d864005db30f39542efcb27344b8d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fccmp_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef22810a297d864005db30f39542efcb27344b8d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fccmp_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fccmp_1.c?ref=ef22810a297d864005db30f39542efcb27344b8d", "patch": "@@ -85,7 +85,7 @@ f13 (int a, int b)\n /* { dg-final { scan-assembler \"cmp\\t(.)+34\" } } */\n /* { dg-final { scan-assembler \"cmp\\t(.)+35\" } } */\n \n-/* { dg-final { scan-assembler-times \"\\tcmp\\tw\\[0-9\\]+, 0\" 4 } } */\n+/* { dg-final { scan-assembler-times \"\\tcmp\\tw\\[0-9\\]+, (0|wzr)\" 4 } } */\n /* { dg-final { scan-assembler-times \"fcmpe\\t(.)+0\\\\.0\" 2 } } */\n /* { dg-final { scan-assembler-times \"fcmp\\t(.)+0\\\\.0\" 2 } } */\n "}, {"sha": "3fea63357ebd8b2287a36453e16ab101e7ece2c5", "filename": "gcc/testsuite/gcc.target/aarch64/tst_3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef22810a297d864005db30f39542efcb27344b8d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftst_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef22810a297d864005db30f39542efcb27344b8d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftst_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftst_3.c?ref=ef22810a297d864005db30f39542efcb27344b8d", "patch": "@@ -9,4 +9,4 @@ f1 (int x)\n   return x;\n }\n \n-/* { dg-final { scan-assembler \"tst\\t(x|w)\\[0-9\\]*.*1\" } } */\n+/* { dg-final { scan-assembler \"(tst|ands)\\t(x|w)\\[0-9\\]*.*1\" } } */"}]}