{"sha": "fceeaab66b35f55d325e4b07b7e96b5a7d9a1656", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNlZWFhYjY2YjM1ZjU1ZDMyNWU0YjA3YjdlOTZiNWE3ZDlhMTY1Ng==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2008-05-27T09:20:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-27T09:20:38Z"}, "message": "2008-05-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb:\n\t(Is_Interface_Conformant): Handle properly a primitive operation that\n\toverrides an interface function with a controlling access result.\n\t(Type_Conformance): If Skip_Controlling_Formals is true, when matching\n\tinherited and overriding operations, omit as well the conformance check\n\ton result types, to prevent spurious errors.\n\nFrom-SVN: r135992", "tree": {"sha": "d8ab686f6e6a019795579332a0b9fd28c80e432d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8ab686f6e6a019795579332a0b9fd28c80e432d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fceeaab66b35f55d325e4b07b7e96b5a7d9a1656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fceeaab66b35f55d325e4b07b7e96b5a7d9a1656", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fceeaab66b35f55d325e4b07b7e96b5a7d9a1656", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fceeaab66b35f55d325e4b07b7e96b5a7d9a1656/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "abed5dc6ffc735874227c399963e927c4e93c8c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abed5dc6ffc735874227c399963e927c4e93c8c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abed5dc6ffc735874227c399963e927c4e93c8c2"}], "stats": {"total": 60, "additions": 33, "deletions": 27}, "files": [{"sha": "8ba9f75df19b21ad01923042edc32ab44824928a", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fceeaab66b35f55d325e4b07b7e96b5a7d9a1656/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fceeaab66b35f55d325e4b07b7e96b5a7d9a1656/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=fceeaab66b35f55d325e4b07b7e96b5a7d9a1656", "patch": "@@ -3142,7 +3142,18 @@ package body Sem_Ch6 is\n       if Old_Type /= Standard_Void_Type\n         and then New_Type /= Standard_Void_Type\n       then\n-         if not Conforming_Types (Old_Type, New_Type, Ctype, Get_Inst) then\n+\n+         --  If we are checking interface conformance we omit controlling\n+         --  arguments and result, because we are only checking the conformance\n+         --  of the remaining parameters.\n+\n+         if Has_Controlling_Result (Old_Id)\n+           and then Has_Controlling_Result (New_Id)\n+           and then Skip_Controlling_Formals\n+         then\n+            null;\n+\n+         elsif not Conforming_Types (Old_Type, New_Type, Ctype, Get_Inst) then\n             Conformance_Error (\"\\return type does not match!\", New_Id);\n             return;\n          end if;\n@@ -5774,13 +5785,16 @@ package body Sem_Ch6 is\n       Iface_Prim  : Entity_Id;\n       Prim        : Entity_Id) return Boolean\n    is\n+      Iface : constant Entity_Id := Find_Dispatching_Type (Iface_Prim);\n+      Typ   : constant Entity_Id := Find_Dispatching_Type (Prim);\n+\n    begin\n       pragma Assert (Is_Subprogram (Iface_Prim)\n         and then Is_Subprogram (Prim)\n         and then Is_Dispatching_Operation (Iface_Prim)\n         and then Is_Dispatching_Operation (Prim));\n \n-      pragma Assert (Is_Interface (Find_Dispatching_Type (Iface_Prim))\n+      pragma Assert (Is_Interface (Iface)\n         or else (Present (Alias (Iface_Prim))\n                    and then\n                      Is_Interface\n@@ -5791,48 +5805,40 @@ package body Sem_Ch6 is\n         or else Ekind (Prim) /= Ekind (Iface_Prim)\n         or else not Is_Dispatching_Operation (Prim)\n         or else Scope (Prim) /= Scope (Tagged_Type)\n-        or else No (Find_Dispatching_Type (Prim))\n-        or else Base_Type (Find_Dispatching_Type (Prim)) /= Tagged_Type\n+        or else No (Typ)\n+        or else Base_Type (Typ) /= Tagged_Type\n         or else not Primitive_Names_Match (Iface_Prim, Prim)\n       then\n          return False;\n \n-      --  Case of a procedure, or a function not returning an interface\n+      --  Case of a procedure, or a function that does not have a controlling\n+      --  result (I or access I).\n \n       elsif Ekind (Iface_Prim) = E_Procedure\n         or else Etype (Prim) = Etype (Iface_Prim)\n-        or else not Is_Interface (Etype (Iface_Prim))\n+        or else not Has_Controlling_Result (Prim)\n       then\n          return Type_Conformant (Prim, Iface_Prim,\n                   Skip_Controlling_Formals => True);\n \n-      --  Case of a function returning an interface\n-\n-      elsif Implements_Interface (Etype (Prim), Etype (Iface_Prim)) then\n-         declare\n-            Ret_Typ       : constant Entity_Id := Etype (Prim);\n-            Is_Conformant : Boolean;\n-\n-         begin\n-            --  Temporarly set both entities returning exactly the same type to\n-            --  be able to call Type_Conformant (because that routine has no\n-            --  machinery to handle interfaces).\n+      --  Case of a function returning an interface, or an access to one.\n+      --  Check that the return types correspond.\n \n-            Set_Etype (Prim, Etype (Iface_Prim));\n+      elsif Implements_Interface (Typ, Iface) then\n+         if (Ekind (Etype (Prim)) = E_Anonymous_Access_Type)\n+            /= (Ekind (Etype (Iface_Prim)) = E_Anonymous_Access_Type)\n+         then\n+            return False;\n \n-            Is_Conformant :=\n+         else\n+            return\n               Type_Conformant (Prim, Iface_Prim,\n                 Skip_Controlling_Formals => True);\n+         end if;\n \n-            --  Restore proper decoration of returned type\n-\n-            Set_Etype (Prim, Ret_Typ);\n-\n-            return Is_Conformant;\n-         end;\n+      else\n+         return False;\n       end if;\n-\n-      return False;\n    end Is_Interface_Conformant;\n \n    ---------------------------------"}]}