{"sha": "bbee94aa67b316d188b0938e02a70def626a1dfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJlZTk0YWE2N2IzMTZkMTg4YjA5MzhlMDJhNzBkZWY2MjZhMWRmZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-03-17T20:07:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-03-17T20:07:26Z"}, "message": "PR c++/89571 - ICE with ill-formed noexcept on constructor.\n\nEarlier changes to defer instantiating a defaulted noexcept-specifier that\ndepends on yet-unparsed default member initializers broke this testcase,\nwhere instantiation fails for another reason.  In this case there's no\nreason to defer and try again later, so let's not.\n\n\t* pt.c (maybe_instantiate_noexcept): Only return false if defaulted.\n\t(regenerate_decl_from_template): Use it for noexcept-specs.\n\nFrom-SVN: r269746", "tree": {"sha": "18afb725972505b6173a0731a28c0470617f1b64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18afb725972505b6173a0731a28c0470617f1b64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbee94aa67b316d188b0938e02a70def626a1dfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbee94aa67b316d188b0938e02a70def626a1dfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbee94aa67b316d188b0938e02a70def626a1dfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbee94aa67b316d188b0938e02a70def626a1dfd/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad0a3085d740347ec9db7ce15315d426d384110f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad0a3085d740347ec9db7ce15315d426d384110f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad0a3085d740347ec9db7ce15315d426d384110f"}], "stats": {"total": 62, "additions": 54, "deletions": 8}, "files": [{"sha": "34e9c79ef2a667d726e06ff3e8f360d465a3e78f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbee94aa67b316d188b0938e02a70def626a1dfd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbee94aa67b316d188b0938e02a70def626a1dfd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bbee94aa67b316d188b0938e02a70def626a1dfd", "patch": "@@ -1,3 +1,9 @@\n+2019-03-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/89571 - ICE with ill-formed noexcept on constructor.\n+\t* pt.c (maybe_instantiate_noexcept): Only return false if defaulted.\n+\t(regenerate_decl_from_template): Use it for noexcept-specs.\n+\n 2019-03-14  Jason Merrill  <jason@redhat.com>\n \n \t* parser.c (cp_parser_decl_specifier_seq): Support C++20"}, {"sha": "dc5c24c47a705cd132324c9b7ea4b539305de1ff", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbee94aa67b316d188b0938e02a70def626a1dfd/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbee94aa67b316d188b0938e02a70def626a1dfd/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=bbee94aa67b316d188b0938e02a70def626a1dfd", "patch": "@@ -23991,12 +23991,18 @@ regenerate_decl_from_template (tree decl, tree tmpl, tree args)\n       if (args_depth > parms_depth)\n \targs = get_innermost_template_args (args, parms_depth);\n \n-      specs = tsubst_exception_specification (TREE_TYPE (code_pattern),\n-\t\t\t\t\t      args, tf_error, NULL_TREE,\n-\t\t\t\t\t      /*defer_ok*/false);\n-      if (specs && specs != error_mark_node)\n-\tTREE_TYPE (decl) = build_exception_variant (TREE_TYPE (decl),\n-\t\t\t\t\t\t    specs);\n+      /* Instantiate a dynamic exception-specification.  noexcept will be\n+\t handled below.  */\n+      if (tree raises = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (code_pattern)))\n+\tif (TREE_VALUE (raises))\n+\t  {\n+\t    specs = tsubst_exception_specification (TREE_TYPE (code_pattern),\n+\t\t\t\t\t\t    args, tf_error, NULL_TREE,\n+\t\t\t\t\t\t    /*defer_ok*/false);\n+\t    if (specs && specs != error_mark_node)\n+\t      TREE_TYPE (decl) = build_exception_variant (TREE_TYPE (decl),\n+\t\t\t\t\t\t\t  specs);\n+\t  }\n \n       /* Merge parameter declarations.  */\n       decl_parm = skip_artificial_parms_for (decl,\n@@ -24062,6 +24068,8 @@ regenerate_decl_from_template (tree decl, tree tmpl, tree args)\n       if (DECL_DECLARED_INLINE_P (code_pattern)\n \t  && !DECL_DECLARED_INLINE_P (decl))\n \tDECL_DECLARED_INLINE_P (decl) = 1;\n+\n+      maybe_instantiate_noexcept (decl, tf_error);\n     }\n   else if (VAR_P (decl))\n     {\n@@ -24187,7 +24195,13 @@ maybe_instantiate_noexcept (tree fn, tsubst_flags_t complain)\n       static hash_set<tree>* fns = new hash_set<tree>;\n       bool added = false;\n       if (DEFERRED_NOEXCEPT_PATTERN (noex) == NULL_TREE)\n-\tspec = get_defaulted_eh_spec (fn, complain);\n+\t{\n+\t  spec = get_defaulted_eh_spec (fn, complain);\n+\t  if (spec == error_mark_node)\n+\t    /* This might have failed because of an unparsed DMI, so\n+\t       let's try again later.  */\n+\t    return false;\n+\t}\n       else if (!(added = !fns->add (fn)))\n \t{\n \t  /* If hash_set::add returns true, the element was already there.  */\n@@ -24247,7 +24261,11 @@ maybe_instantiate_noexcept (tree fn, tsubst_flags_t complain)\n \tfns->remove (fn);\n \n       if (spec == error_mark_node)\n-\treturn false;\n+\t{\n+\t  /* This failed with a hard error, so let's go with false.  */\n+\t  gcc_assert (seen_error ());\n+\t  spec = noexcept_false_spec;\n+\t}\n \n       TREE_TYPE (fn) = build_exception_variant (fntype, spec);\n     }"}, {"sha": "980a28cd207584d09a078713c38ca34dd5936ba7", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept36.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbee94aa67b316d188b0938e02a70def626a1dfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbee94aa67b316d188b0938e02a70def626a1dfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept36.C?ref=bbee94aa67b316d188b0938e02a70def626a1dfd", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/89571\n+// { dg-do compile { target c++11 } }\n+\n+struct z8 {\n+  constexpr static int qq /* = 0 */;  // { dg-error \"initializer\" }\n+};\n+\n+template<typename T>\n+struct kf {\n+  kf (const kf &) noexcept (T::qq);  // { dg-error \"constant\" }\n+};\n+\n+struct lk {\n+  kf<z8> e1;\n+};\n+\n+template<typename T>\n+T &sc ();\n+\n+struct b6 {\n+  decltype (lk (sc<lk> ())) zz;\n+};"}]}