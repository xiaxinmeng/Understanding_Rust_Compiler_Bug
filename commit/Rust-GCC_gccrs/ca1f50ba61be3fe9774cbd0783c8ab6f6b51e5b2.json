{"sha": "ca1f50ba61be3fe9774cbd0783c8ab6f6b51e5b2", "node_id": "C_kwDOANBUbNoAKGNhMWY1MGJhNjFiZTNmZTk3NzRjYmQwNzgzYzhhYjZmNmI1MWU1YjI", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-04-20T10:12:29Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-04-27T22:18:22Z"}, "message": "gccrs: resolve the associated_predicate when mapping Fn traits\n\nThis is required to solve #2105\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-type-check-expr.cc (TypeCheckExpr::resolve_fn_trait_call):\n\treturn the assoicated predicate\n\t* typecheck/rust-hir-type-check-expr.h: update prototype\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "71ad2888066aa0d0a96ae8a7b8a570034b3f59ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71ad2888066aa0d0a96ae8a7b8a570034b3f59ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca1f50ba61be3fe9774cbd0783c8ab6f6b51e5b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1f50ba61be3fe9774cbd0783c8ab6f6b51e5b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca1f50ba61be3fe9774cbd0783c8ab6f6b51e5b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1f50ba61be3fe9774cbd0783c8ab6f6b51e5b2/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dfcde3b497c0eedb697ab8eb10a4b366e43ec1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dfcde3b497c0eedb697ab8eb10a4b366e43ec1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dfcde3b497c0eedb697ab8eb10a4b366e43ec1d"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "8d2e89ba0d7d3bda9c583ac411234ec8ca8cb7aa", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1f50ba61be3fe9774cbd0783c8ab6f6b51e5b2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1f50ba61be3fe9774cbd0783c8ab6f6b51e5b2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=ca1f50ba61be3fe9774cbd0783c8ab6f6b51e5b2", "patch": "@@ -1784,7 +1784,7 @@ TypeCheckExpr::resolve_operator_overload (\n \n HIR::PathIdentSegment\n TypeCheckExpr::resolve_possible_fn_trait_call_method_name (\n-  const TyTy::BaseType &receiver)\n+  TyTy::BaseType &receiver, TyTy::TypeBoundPredicate *associated_predicate)\n {\n   // Question\n   // do we need to probe possible bounds here? I think not, i think when we\n@@ -1793,27 +1793,31 @@ TypeCheckExpr::resolve_possible_fn_trait_call_method_name (\n   // FIXME\n   // the logic to map the FnTrait to their respective call trait-item is\n   // duplicated over in the backend/rust-compile-expr.cc\n-  for (const auto &bound : receiver.get_specified_bounds ())\n+  for (auto &bound : receiver.get_specified_bounds ())\n     {\n       bool found_fn = bound.get_name ().compare (\"Fn\") == 0;\n       bool found_fn_mut = bound.get_name ().compare (\"FnMut\") == 0;\n       bool found_fn_once = bound.get_name ().compare (\"FnOnce\") == 0;\n \n       if (found_fn)\n \t{\n+\t  *associated_predicate = bound;\n \t  return HIR::PathIdentSegment (\"call\");\n \t}\n       else if (found_fn_mut)\n \t{\n+\t  *associated_predicate = bound;\n \t  return HIR::PathIdentSegment (\"call_mut\");\n \t}\n       else if (found_fn_once)\n \t{\n+\t  *associated_predicate = bound;\n \t  return HIR::PathIdentSegment (\"call_once\");\n \t}\n     }\n \n   // nothing\n+  *associated_predicate = TyTy::TypeBoundPredicate::error ();\n   return HIR::PathIdentSegment (\"\");\n }\n \n@@ -1823,9 +1827,11 @@ TypeCheckExpr::resolve_fn_trait_call (HIR::CallExpr &expr,\n \t\t\t\t      TyTy::BaseType **result)\n {\n   // we turn this into a method call expr\n+  auto associated_predicate = TyTy::TypeBoundPredicate::error ();\n   HIR::PathIdentSegment method_name\n-    = resolve_possible_fn_trait_call_method_name (*receiver_tyty);\n-  if (method_name.is_error ())\n+    = resolve_possible_fn_trait_call_method_name (*receiver_tyty,\n+\t\t\t\t\t\t  &associated_predicate);\n+  if (method_name.is_error () || associated_predicate.is_error ())\n     return false;\n \n   auto candidates = MethodResolver::Probe (receiver_tyty, method_name);"}, {"sha": "1a9591f1d49966ff0b24333a25bf8cdcd8c3e82f", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1f50ba61be3fe9774cbd0783c8ab6f6b51e5b2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1f50ba61be3fe9774cbd0783c8ab6f6b51e5b2/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=ca1f50ba61be3fe9774cbd0783c8ab6f6b51e5b2", "patch": "@@ -97,8 +97,8 @@ class TypeCheckExpr : private TypeCheckBase, private HIR::HIRExpressionVisitor\n \t\t\t      TyTy::BaseType *function_tyty,\n \t\t\t      TyTy::BaseType **result);\n \n-  HIR::PathIdentSegment\n-  resolve_possible_fn_trait_call_method_name (const TyTy::BaseType &receiver);\n+  HIR::PathIdentSegment resolve_possible_fn_trait_call_method_name (\n+    TyTy::BaseType &receiver, TyTy::TypeBoundPredicate *associated_predicate);\n \n private:\n   TypeCheckExpr ();"}]}