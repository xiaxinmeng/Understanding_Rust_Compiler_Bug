{"sha": "873140e65d4332557301db341eb40ed285e34c6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODczMTQwZTY1ZDQzMzI1NTczMDFkYjM0MWViNDBlZDI4NWUzNGM2ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-09-10T08:15:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-09-10T08:15:46Z"}, "message": "re PR middle-end/91680 (Integer promotion quirk prevents efficient power of 2 division)\n\n\tPR middle-end/91680\n\t* match.pd ((A / (1 << B)) -> (A >> B)): Allow widening cast from\n\tthe shift type to type.\n\n\t* gcc.dg/tree-ssa/pr91680.c: New test.\n\t* g++.dg/torture/pr91680.C: New test.\n\nFrom-SVN: r275587", "tree": {"sha": "f1e61e58fa3672f7730ad80754c8307dfab8b3df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1e61e58fa3672f7730ad80754c8307dfab8b3df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/873140e65d4332557301db341eb40ed285e34c6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/873140e65d4332557301db341eb40ed285e34c6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/873140e65d4332557301db341eb40ed285e34c6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/873140e65d4332557301db341eb40ed285e34c6d/comments", "author": null, "committer": null, "parents": [{"sha": "6508fa9c067d1d20a32703516ad774e3f6f90f0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6508fa9c067d1d20a32703516ad774e3f6f90f0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6508fa9c067d1d20a32703516ad774e3f6f90f0c"}], "stats": {"total": 126, "additions": 113, "deletions": 13}, "files": [{"sha": "6139e3cbd489b30350bf0737c1f7ee231ca4b395", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873140e65d4332557301db341eb40ed285e34c6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873140e65d4332557301db341eb40ed285e34c6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=873140e65d4332557301db341eb40ed285e34c6d", "patch": "@@ -1,19 +1,25 @@\n+2019-09-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/91680\n+\t* match.pd ((A / (1 << B)) -> (A >> B)): Allow widening cast from\n+\tthe shift type to type.\n+\n 2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n \n \t* config/arm/arm.md (stack_protect_combined_set_insn): Handle\n \tFDPIC mode.\n \t(stack_protect_combined_test_insn): Likewise.\n \n 2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n-\tMicka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n+\t    Micka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n \n \t* config/arm/arm.c (arm_load_tp): Add FDPIC support.\n \t* config/arm/arm.md (FDPIC_REGNUM): New constant.\n \t(load_tp_soft_fdpic): New pattern.\n \t(load_tp_soft): Disable in FDPIC mode.\n \n 2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n-\tMicka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n+\t    Micka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n \n \t* config/arm/arm.c (tls_reloc): Add TLS_GD32_FDPIC,\n \tTLS_LDM32_FDPIC and TLS_IE32_FDPIC.\n@@ -22,7 +28,7 @@\n \t(arm_emit_tls_decoration): Likewise.\n \n 2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n-\tMicka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n+\t    Micka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n \n \t* config/arm/arm.c (arm_asm_trampoline_template): Add FDPIC\n \tsupport.\n@@ -31,28 +37,28 @@\n \t* config/arm/arm.h (TRAMPOLINE_SIZE): Likewise.\n \n 2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n-\tMicka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n+\t    Micka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n \n \t* config/arm/arm.c (arm_fdpic_local_funcdesc_p): New function.\n \t(legitimize_pic_address): Enforce binding rules on function\n \tpointers in FDPIC mode.\n \t(arm_assemble_integer): Likewise.\n \n 2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n-\tMicka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n+\t    Micka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n \n \t* config/arm/arm.h (PIC_REGISTER_MAY_NEED_SAVING): New helper.\n \t* config/arm/arm.c (arm_compute_save_reg0_reg12_mask): Handle\n \tFDPIC.\n \n 2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n-\tMicka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n+\t    Micka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n \n \t* ginclude/unwind-arm-common.h (unwinder_cache): Add reserved5\n \tfield.\n \n 2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n-\tMicka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n+\t    Micka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n \n \t* config/arm/arm-c.c (__FDPIC__): Define new pre-processor macro\n \tin FDPIC mode.\n@@ -80,7 +86,7 @@\n \t* config/arm/unspecs.md (UNSPEC_PIC_RESTORE): New.\n \n 2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n-\tMicka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n+\t    Micka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n \n \t* config.gcc: Handle arm*-*-uclinuxfdpiceabi.\n \t* config/arm/bpabi.h (TARGET_FDPIC_ASM_SPEC): New.\n@@ -95,7 +101,7 @@\n \t* config.gcc: Handle *-*-uclinuxfdpiceabi.\n \n 2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n-\tMicka\u00ebl Gu\u00ean\u00e9  <mickael.guene@st.com>\n+\t    Micka\u00ebl Gu\u00ean\u00e9  <mickael.guene@st.com>\n \n \t* config/arm/arm.opt: Add -mfdpic option.\n \t* doc/invoke.texi: Add documentation for -mfdpic."}, {"sha": "309a094071b81fccf396c1cca43bfff9a09b62ec", "filename": "gcc/match.pd", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873140e65d4332557301db341eb40ed285e34c6d/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873140e65d4332557301db341eb40ed285e34c6d/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=873140e65d4332557301db341eb40ed285e34c6d", "patch": "@@ -305,13 +305,29 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n /* (A / (1 << B)) -> (A >> B).\n    Only for unsigned A.  For signed A, this would not preserve rounding\n    toward zero.\n-   For example: (-1 / ( 1 << B)) !=  -1 >> B.  */\n-(simplify\n- (trunc_div @0 (lshift integer_onep@1 @2))\n+   For example: (-1 / ( 1 << B)) !=  -1 >> B.\n+   Also also widening conversions, like:\n+   (A / (unsigned long long) (1U << B)) -> (A >> B)\n+   or\n+   (A / (unsigned long long) (1 << B)) -> (A >> B).\n+   If the left shift is signed, it can be done only if the upper bits\n+   of A starting from shift's type sign bit are zero, as\n+   (unsigned long long) (1 << 31) is -2147483648ULL, not 2147483648ULL,\n+   so it is valid only if A >> 31 is zero.  */\n+(simplify\n+ (trunc_div @0 (convert? (lshift integer_onep@1 @2)))\n  (if ((TYPE_UNSIGNED (type) || tree_expr_nonnegative_p (@0))\n       && (!VECTOR_TYPE_P (type)\n \t  || target_supports_op_p (type, RSHIFT_EXPR, optab_vector)\n-\t  || target_supports_op_p (type, RSHIFT_EXPR, optab_scalar)))\n+\t  || target_supports_op_p (type, RSHIFT_EXPR, optab_scalar))\n+      && (useless_type_conversion_p (type, TREE_TYPE (@1))\n+\t  || (element_precision (type) >= element_precision (TREE_TYPE (@1))\n+\t      && (TYPE_UNSIGNED (TREE_TYPE (@1))\n+\t\t  || (element_precision (type)\n+\t\t      == element_precision (TREE_TYPE (@1)))\n+\t\t  || (get_nonzero_bits (@0)\n+\t\t      & wi::mask (element_precision (TREE_TYPE (@1)) - 1, true,\n+\t\t\t\t  element_precision (type))) == 0))))\n   (rshift @0 @2)))\n \n /* Preserve explicit divisions by 0: the C++ front-end wants to detect"}, {"sha": "6f487a8fedc9d6958391d3543d4f75524a96ad8c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873140e65d4332557301db341eb40ed285e34c6d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873140e65d4332557301db341eb40ed285e34c6d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=873140e65d4332557301db341eb40ed285e34c6d", "patch": "@@ -1,3 +1,9 @@\n+2019-09-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/91680\n+\t* gcc.dg/tree-ssa/pr91680.c: New test.\n+\t* g++.dg/torture/pr91680.C: New test.\n+\n 2019-09-10  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/cpp0x/enum29.C: Test location(s) too."}, {"sha": "afed400cafec3d38009611056f6648e79c0abeea", "filename": "gcc/testsuite/g++.dg/torture/pr91680.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873140e65d4332557301db341eb40ed285e34c6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr91680.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873140e65d4332557301db341eb40ed285e34c6d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr91680.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr91680.C?ref=873140e65d4332557301db341eb40ed285e34c6d", "patch": "@@ -0,0 +1,35 @@\n+/* PR middle-end/91680 */\n+/* { dg-do run { target { ilp32 || lp64 } } } */\n+\n+extern \"C\" void abort ();\n+\n+#include \"../../gcc.dg/tree-ssa/pr91680.c\"\n+\n+int\n+main ()\n+{\n+  unsigned char i;\n+  for (i = 0; i < __SIZEOF_INT__ * __CHAR_BIT__; i++)\n+    {\n+      volatile unsigned long long q = 1 << i;\n+      if (foo (i) != 256 / q)\n+\tabort ();\n+      q = 1U << i;\n+      if (bar (i) != 256 / q)\n+\tabort ();\n+      q = 1 << i;\n+      if (baz (i, (1U << i) - 1) != ((1U << i) - 1) / q)\n+\tabort ();\n+      if (baz (i, 1U << i) != (1U << i) / q)\n+\tabort ();\n+      if (baz (i, -1) != -1 / q)\n+\tabort ();\n+      q = 1U << i;\n+      if (qux (i, (1U << i) - 1) != ((1U << i) - 1) / q)\n+\tabort ();\n+      if (qux (i, 1U << i) != (1U << i) / q)\n+\tabort ();\n+      if (qux (i, -1) != -1 / q)\n+\tabort ();\n+    }\n+}"}, {"sha": "6d1912be005df22acbb52433fb925a49e1f9e491", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr91680.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873140e65d4332557301db341eb40ed285e34c6d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr91680.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873140e65d4332557301db341eb40ed285e34c6d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr91680.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr91680.c?ref=873140e65d4332557301db341eb40ed285e34c6d", "patch": "@@ -0,0 +1,37 @@\n+/* PR middle-end/91680 */\n+/* { dg-do compile { target { ilp32 || lp64 } } } */\n+/* { dg-options \"-O2 -fdump-tree-forwprop1\" } */\n+/* { dg-final { scan-tree-dump-times \" / \" 1 \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-times \" >> \" 3 \"forwprop1\" } } */\n+\n+__attribute__((noipa)) unsigned long long\n+foo (unsigned char x)\n+{\n+  unsigned long long q = 1 << x;\n+  return 256 / q;\n+}\n+\n+__attribute__((noipa)) unsigned long long\n+bar (unsigned char x)\n+{\n+  unsigned long long q = 1U << x;\n+  return 256 / q;\n+}\n+\n+__attribute__((noipa)) unsigned long long\n+baz (unsigned char x, unsigned long long y)\n+{\n+  /* This can't be optimized, at least not in C++ and maybe not\n+     in C89, because for x 31 q is -2147483648ULL, not\n+     2147483648ULL, and e.g. 2147483648ULL >> 31 is 1, while\n+     2147483648ULL / -2147483648ULL is 0.  */\n+  unsigned long long q = 1 << x;\n+  return y / q;\n+}\n+\n+__attribute__((noipa)) unsigned long long\n+qux (unsigned char x, unsigned long long y)\n+{\n+  unsigned long long q = 1U << x;\n+  return y / q;\n+}"}]}