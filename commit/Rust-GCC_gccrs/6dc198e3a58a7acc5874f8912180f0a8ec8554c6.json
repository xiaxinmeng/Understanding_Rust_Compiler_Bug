{"sha": "6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRjMTk4ZTNhNThhN2FjYzU4NzRmODkxMjE4MGYwYThlYzg1NTRjNg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2016-08-22T11:57:39Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2016-08-22T11:57:39Z"}, "message": "Add minimal _FloatN, _FloatNx built-in functions.\n\nThis patch adds a minimal set of built-in functions for the new\n_FloatN and _FloatNx types.\n\nThe functions added are __builtin_fabs*, __builtin_copysign*,\n__builtin_huge_val*, __builtin_inf*, __builtin_nan* and\n__builtin_nans* (where * = fN or fNx).  That is, 42 new entries are\nadded to the enum of built-in functions and the associated array of\ndecls, where not all of them are actually supported on any one target.\n\nThese functions are believed to be sufficient for libgcc (complex\nmultiplication and division use __builtin_huge_val*,\n__builtin_copysign* and __builtin_fabs*) and for glibc (which also\ndepends on complex multiplication from libgcc, as well as using such\nfunctions itself).  The basic target-independent support for folding /\nexpanding calls to these built-in functions is wired up, so those for\nconstants can be used in static initializers, and the fabs and\ncopysign built-ins can always be expanded to bit-manipulation inline\n(for any format setting signbit_ro and signbit_rw, which covers all\nformats supported for _FloatN and _FloatNx), although insn patterns\nfor fabs (abs<mode>2) and copysign (copysign<mode>3) will be used when\navailable and may result in more optimal code.\n\nThe complex multiplication and division functions in libgcc rely on\npredefined macros (defined with -fbuilding-libgcc) to say what the\nbuilt-in function suffixes to use with a particular mode are.  This\npatch updates that code accordingly, where previously it involved a\nhack supposing that machine-specific suffixes for constants were also\nsuffixes for built-in functions.\n\nAs with the main _FloatN / _FloatNx patch, this patch does not update\ncode dealing only with optimizations that currently has cases only\ncovering float, double and long double, though some such cases are\nstraightforward and may be covered in a followup patch.\n\nThe functions are defined with DEF_GCC_BUILTIN, so calls to the TS\n18661-3 functions such as fabsf128 and copysignf128, without the\n__builtin_, will not be optimized.  As noted in the original _FloatN /\n_FloatNx patch submission, in principle the bulk of the libm functions\nthat have built-in versions should have those versions extended to\ncover the new types, but that would require more consideration of the\neffects of increasing the size of the enum and initializing many more\nfunctions at startup.\n\nI don't know whether target-specific built-in functions can readily be\nmade into aliases for target-independent functions, but if they can,\nit would make sense to do so for the x86, ia64 and rs6000 *q functions\ncorresponding to these, so that they can benefit from the\narchitecture-independent folding logic and from any optimizations\nenabled for these functions in future, and so that less\ntarget-specific code is needed to support them.\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\ngcc:\n\t* tree.h (CASE_FLT_FN_FLOATN_NX, float16_type_node)\n\t(float32_type_node, float64_type_node, float32x_type_node)\n\t(float128x_type_node): New macros.\n\t* builtin-types.def (BT_FLOAT16, BT_FLOAT32, BT_FLOAT64)\n\t(BT_FLOAT128, BT_FLOAT32X, BT_FLOAT64X, BT_FLOAT128X)\n\t(BT_FN_FLOAT16, BT_FN_FLOAT32, BT_FN_FLOAT64, BT_FN_FLOAT128)\n\t(BT_FN_FLOAT32X, BT_FN_FLOAT64X, BT_FN_FLOAT128X)\n\t(BT_FN_FLOAT16_FLOAT16, BT_FN_FLOAT32_FLOAT32)\n\t(BT_FN_FLOAT64_FLOAT64, BT_FN_FLOAT128_FLOAT128)\n\t(BT_FN_FLOAT32X_FLOAT32X, BT_FN_FLOAT64X_FLOAT64X)\n\t(BT_FN_FLOAT128X_FLOAT128X, BT_FN_FLOAT16_CONST_STRING)\n\t(BT_FN_FLOAT32_CONST_STRING, BT_FN_FLOAT64_CONST_STRING)\n\t(BT_FN_FLOAT128_CONST_STRING, BT_FN_FLOAT32X_CONST_STRING)\n\t(BT_FN_FLOAT64X_CONST_STRING, BT_FN_FLOAT128X_CONST_STRING)\n\t(BT_FN_FLOAT16_FLOAT16_FLOAT16, BT_FN_FLOAT32_FLOAT32_FLOAT32)\n\t(BT_FN_FLOAT64_FLOAT64_FLOAT64, BT_FN_FLOAT128_FLOAT128_FLOAT128)\n\t(BT_FN_FLOAT32X_FLOAT32X_FLOAT32X)\n\t(BT_FN_FLOAT64X_FLOAT64X_FLOAT64X)\n\t(BT_FN_FLOAT128X_FLOAT128X_FLOAT128X): New type definitions.\n\t* builtins.def (DEF_GCC_FLOATN_NX_BUILTINS): New macro.\n\t(copysign, fabs, huge_val, inf, nan, nans): Use it.\n\t* builtins.c (expand_builtin): Use CASE_FLT_FN_FLOATN_NX for fabs\n\tand copysign.\n\t(fold_builtin_0): Use CASE_FLT_FN_FLOATN_NX for inf and huge_val.\n\t(fold_builtin_1): Use CASE_FLT_FN_FLOATN_NX for fabs.\n\t* doc/extend.texi (Other Builtins): Document these built-in\n\tfunctions.\n\t* fold-const-call.c (fold_const_call): Use CASE_FLT_FN_FLOATN_NX\n\tfor nan and nans.\n\ngcc/c-family:\n\t* c-family/c-cppbuiltin.c (c_cpp_builtins): Check _FloatN and\n\t_FloatNx types for suffixes for built-in functions.\n\ngcc/testsuite:\n\t* gcc.dg/torture/float128-builtin.c,\n\tgcc.dg/torture/float128-ieee-nan.c,\n\tgcc.dg/torture/float128x-builtin.c,\n\tgcc.dg/torture/float128x-nan.c, gcc.dg/torture/float16-builtin.c,\n\tgcc.dg/torture/float16-nan.c, gcc.dg/torture/float32-builtin.c,\n\tgcc.dg/torture/float32-nan.c, gcc.dg/torture/float32x-builtin.c,\n\tgcc.dg/torture/float32x-nan.c, gcc.dg/torture/float64-builtin.c,\n\tgcc.dg/torture/float64-nan.c, gcc.dg/torture/float64x-builtin.c,\n\tgcc.dg/torture/float64x-nan.c, gcc.dg/torture/floatn-builtin.h,\n\tgcc.dg/torture/floatn-nan.h: New tests.\n\nFrom-SVN: r239658", "tree": {"sha": "a1de76d3b52462d1b6ade9d5d4e0f6f207b974cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1de76d3b52462d1b6ade9d5d4e0f6f207b974cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ff4e41a19132c87c9ef6f0bd2ca809a6c2172a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ff4e41a19132c87c9ef6f0bd2ca809a6c2172a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ff4e41a19132c87c9ef6f0bd2ca809a6c2172a8"}], "stats": {"total": 468, "additions": 451, "deletions": 17}, "files": [{"sha": "7496877c7ca6206a916ed93c95ef80814beafb02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -1,3 +1,35 @@\n+2016-08-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* tree.h (CASE_FLT_FN_FLOATN_NX, float16_type_node)\n+\t(float32_type_node, float64_type_node, float32x_type_node)\n+\t(float128x_type_node): New macros.\n+\t* builtin-types.def (BT_FLOAT16, BT_FLOAT32, BT_FLOAT64)\n+\t(BT_FLOAT128, BT_FLOAT32X, BT_FLOAT64X, BT_FLOAT128X)\n+\t(BT_FN_FLOAT16, BT_FN_FLOAT32, BT_FN_FLOAT64, BT_FN_FLOAT128)\n+\t(BT_FN_FLOAT32X, BT_FN_FLOAT64X, BT_FN_FLOAT128X)\n+\t(BT_FN_FLOAT16_FLOAT16, BT_FN_FLOAT32_FLOAT32)\n+\t(BT_FN_FLOAT64_FLOAT64, BT_FN_FLOAT128_FLOAT128)\n+\t(BT_FN_FLOAT32X_FLOAT32X, BT_FN_FLOAT64X_FLOAT64X)\n+\t(BT_FN_FLOAT128X_FLOAT128X, BT_FN_FLOAT16_CONST_STRING)\n+\t(BT_FN_FLOAT32_CONST_STRING, BT_FN_FLOAT64_CONST_STRING)\n+\t(BT_FN_FLOAT128_CONST_STRING, BT_FN_FLOAT32X_CONST_STRING)\n+\t(BT_FN_FLOAT64X_CONST_STRING, BT_FN_FLOAT128X_CONST_STRING)\n+\t(BT_FN_FLOAT16_FLOAT16_FLOAT16, BT_FN_FLOAT32_FLOAT32_FLOAT32)\n+\t(BT_FN_FLOAT64_FLOAT64_FLOAT64, BT_FN_FLOAT128_FLOAT128_FLOAT128)\n+\t(BT_FN_FLOAT32X_FLOAT32X_FLOAT32X)\n+\t(BT_FN_FLOAT64X_FLOAT64X_FLOAT64X)\n+\t(BT_FN_FLOAT128X_FLOAT128X_FLOAT128X): New type definitions.\n+\t* builtins.def (DEF_GCC_FLOATN_NX_BUILTINS): New macro.\n+\t(copysign, fabs, huge_val, inf, nan, nans): Use it.\n+\t* builtins.c (expand_builtin): Use CASE_FLT_FN_FLOATN_NX for fabs\n+\tand copysign.\n+\t(fold_builtin_0): Use CASE_FLT_FN_FLOATN_NX for inf and huge_val.\n+\t(fold_builtin_1): Use CASE_FLT_FN_FLOATN_NX for fabs.\n+\t* doc/extend.texi (Other Builtins): Document these built-in\n+\tfunctions.\n+\t* fold-const-call.c (fold_const_call): Use CASE_FLT_FN_FLOATN_NX\n+\tfor nan and nans.\n+\n 2016-08-22  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/install.texi (Binaries): www.opencsw.org now uses https."}, {"sha": "468313c43e47a2cea416d9a67e535e6f3e684e0c", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -76,6 +76,27 @@ DEF_PRIMITIVE_TYPE (BT_UNWINDWORD, (*lang_hooks.types.type_for_mode)\n DEF_PRIMITIVE_TYPE (BT_FLOAT, float_type_node)\n DEF_PRIMITIVE_TYPE (BT_DOUBLE, double_type_node)\n DEF_PRIMITIVE_TYPE (BT_LONGDOUBLE, long_double_type_node)\n+DEF_PRIMITIVE_TYPE (BT_FLOAT16, (float16_type_node\n+\t\t\t\t ? float16_type_node\n+\t\t\t\t : error_mark_node))\n+DEF_PRIMITIVE_TYPE (BT_FLOAT32, (float32_type_node\n+\t\t\t\t ? float32_type_node\n+\t\t\t\t : error_mark_node))\n+DEF_PRIMITIVE_TYPE (BT_FLOAT64, (float64_type_node\n+\t\t\t\t ? float64_type_node\n+\t\t\t\t : error_mark_node))\n+DEF_PRIMITIVE_TYPE (BT_FLOAT128, (float128_type_node\n+\t\t\t\t  ? float128_type_node\n+\t\t\t\t  : error_mark_node))\n+DEF_PRIMITIVE_TYPE (BT_FLOAT32X, (float32x_type_node\n+\t\t\t\t  ? float32x_type_node\n+\t\t\t\t  : error_mark_node))\n+DEF_PRIMITIVE_TYPE (BT_FLOAT64X, (float64x_type_node\n+\t\t\t\t  ? float64x_type_node\n+\t\t\t\t  : error_mark_node))\n+DEF_PRIMITIVE_TYPE (BT_FLOAT128X, (float128x_type_node\n+\t\t\t\t   ? float128x_type_node\n+\t\t\t\t   : error_mark_node))\n DEF_PRIMITIVE_TYPE (BT_COMPLEX_FLOAT, complex_float_type_node)\n DEF_PRIMITIVE_TYPE (BT_COMPLEX_DOUBLE, complex_double_type_node)\n DEF_PRIMITIVE_TYPE (BT_COMPLEX_LONGDOUBLE, complex_long_double_type_node)\n@@ -146,6 +167,13 @@ DEF_FUNCTION_TYPE_0 (BT_FN_DOUBLE, BT_DOUBLE)\n    distinguish it from two types in sequence, \"long\" followed by\n    \"double\".  */\n DEF_FUNCTION_TYPE_0 (BT_FN_LONGDOUBLE, BT_LONGDOUBLE)\n+DEF_FUNCTION_TYPE_0 (BT_FN_FLOAT16, BT_FLOAT16)\n+DEF_FUNCTION_TYPE_0 (BT_FN_FLOAT32, BT_FLOAT32)\n+DEF_FUNCTION_TYPE_0 (BT_FN_FLOAT64, BT_FLOAT64)\n+DEF_FUNCTION_TYPE_0 (BT_FN_FLOAT128, BT_FLOAT128)\n+DEF_FUNCTION_TYPE_0 (BT_FN_FLOAT32X, BT_FLOAT32X)\n+DEF_FUNCTION_TYPE_0 (BT_FN_FLOAT64X, BT_FLOAT64X)\n+DEF_FUNCTION_TYPE_0 (BT_FN_FLOAT128X, BT_FLOAT128X)\n DEF_FUNCTION_TYPE_0 (BT_FN_DFLOAT32, BT_DFLOAT32)\n DEF_FUNCTION_TYPE_0 (BT_FN_DFLOAT64, BT_DFLOAT64)\n DEF_FUNCTION_TYPE_0 (BT_FN_DFLOAT128, BT_DFLOAT128)\n@@ -157,6 +185,13 @@ DEF_FUNCTION_TYPE_1 (BT_FN_FLOAT_FLOAT, BT_FLOAT, BT_FLOAT)\n DEF_FUNCTION_TYPE_1 (BT_FN_DOUBLE_DOUBLE, BT_DOUBLE, BT_DOUBLE)\n DEF_FUNCTION_TYPE_1 (BT_FN_LONGDOUBLE_LONGDOUBLE,\n \t\t     BT_LONGDOUBLE, BT_LONGDOUBLE)\n+DEF_FUNCTION_TYPE_1 (BT_FN_FLOAT16_FLOAT16, BT_FLOAT16, BT_FLOAT16)\n+DEF_FUNCTION_TYPE_1 (BT_FN_FLOAT32_FLOAT32, BT_FLOAT32, BT_FLOAT32)\n+DEF_FUNCTION_TYPE_1 (BT_FN_FLOAT64_FLOAT64, BT_FLOAT64, BT_FLOAT64)\n+DEF_FUNCTION_TYPE_1 (BT_FN_FLOAT128_FLOAT128, BT_FLOAT128, BT_FLOAT128)\n+DEF_FUNCTION_TYPE_1 (BT_FN_FLOAT32X_FLOAT32X, BT_FLOAT32X, BT_FLOAT32X)\n+DEF_FUNCTION_TYPE_1 (BT_FN_FLOAT64X_FLOAT64X, BT_FLOAT64X, BT_FLOAT64X)\n+DEF_FUNCTION_TYPE_1 (BT_FN_FLOAT128X_FLOAT128X, BT_FLOAT128X, BT_FLOAT128X)\n DEF_FUNCTION_TYPE_1 (BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT,\n \t\t     BT_COMPLEX_FLOAT, BT_COMPLEX_FLOAT)\n DEF_FUNCTION_TYPE_1 (BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE,\n@@ -208,6 +243,13 @@ DEF_FUNCTION_TYPE_1 (BT_FN_FLOAT_CONST_STRING, BT_FLOAT, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_1 (BT_FN_DOUBLE_CONST_STRING, BT_DOUBLE, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_1 (BT_FN_LONGDOUBLE_CONST_STRING,\n \t\t     BT_LONGDOUBLE, BT_CONST_STRING)\n+DEF_FUNCTION_TYPE_1 (BT_FN_FLOAT16_CONST_STRING, BT_FLOAT16, BT_CONST_STRING)\n+DEF_FUNCTION_TYPE_1 (BT_FN_FLOAT32_CONST_STRING, BT_FLOAT32, BT_CONST_STRING)\n+DEF_FUNCTION_TYPE_1 (BT_FN_FLOAT64_CONST_STRING, BT_FLOAT64, BT_CONST_STRING)\n+DEF_FUNCTION_TYPE_1 (BT_FN_FLOAT128_CONST_STRING, BT_FLOAT128, BT_CONST_STRING)\n+DEF_FUNCTION_TYPE_1 (BT_FN_FLOAT32X_CONST_STRING, BT_FLOAT32X, BT_CONST_STRING)\n+DEF_FUNCTION_TYPE_1 (BT_FN_FLOAT64X_CONST_STRING, BT_FLOAT64X, BT_CONST_STRING)\n+DEF_FUNCTION_TYPE_1 (BT_FN_FLOAT128X_CONST_STRING, BT_FLOAT128X, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_1 (BT_FN_DFLOAT32_CONST_STRING, BT_DFLOAT32, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_1 (BT_FN_DFLOAT64_CONST_STRING, BT_DFLOAT64, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_1 (BT_FN_DFLOAT128_CONST_STRING,\n@@ -271,6 +313,20 @@ DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_DOUBLE_DOUBLE,\n \t\t     BT_DOUBLE, BT_DOUBLE, BT_DOUBLE)\n DEF_FUNCTION_TYPE_2 (BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE,\n \t\t     BT_LONGDOUBLE, BT_LONGDOUBLE, BT_LONGDOUBLE)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT16_FLOAT16_FLOAT16,\n+\t\t     BT_FLOAT16, BT_FLOAT16, BT_FLOAT16)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT32_FLOAT32_FLOAT32,\n+\t\t     BT_FLOAT32, BT_FLOAT32, BT_FLOAT32)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT64_FLOAT64_FLOAT64,\n+\t\t     BT_FLOAT64, BT_FLOAT64, BT_FLOAT64)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT128_FLOAT128_FLOAT128,\n+\t\t     BT_FLOAT128, BT_FLOAT128, BT_FLOAT128)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT32X_FLOAT32X_FLOAT32X,\n+\t\t     BT_FLOAT32X, BT_FLOAT32X, BT_FLOAT32X)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT64X_FLOAT64X_FLOAT64X,\n+\t\t     BT_FLOAT64X, BT_FLOAT64X, BT_FLOAT64X)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT128X_FLOAT128X_FLOAT128X,\n+\t\t     BT_FLOAT128X, BT_FLOAT128X, BT_FLOAT128X)\n DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT_FLOAT_FLOATPTR,\n \t\t     BT_FLOAT, BT_FLOAT, BT_FLOAT_PTR)\n DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_DOUBLE_DOUBLEPTR,"}, {"sha": "cf0cfc711e8f3d0aef6afb8a46df709e0979adf6", "filename": "gcc/builtins.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -5875,6 +5875,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n   switch (fcode)\n     {\n     CASE_FLT_FN (BUILT_IN_FABS):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_FABS):\n     case BUILT_IN_FABSD32:\n     case BUILT_IN_FABSD64:\n     case BUILT_IN_FABSD128:\n@@ -5884,6 +5885,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n       break;\n \n     CASE_FLT_FN (BUILT_IN_COPYSIGN):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_COPYSIGN):\n       target = expand_builtin_copysign (exp, target, subtarget);\n       if (target)\n \treturn target;\n@@ -8208,12 +8210,14 @@ fold_builtin_0 (location_t loc, tree fndecl)\n       return fold_builtin_LINE (loc, type);\n \n     CASE_FLT_FN (BUILT_IN_INF):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_INF):\n     case BUILT_IN_INFD32:\n     case BUILT_IN_INFD64:\n     case BUILT_IN_INFD128:\n       return fold_builtin_inf (loc, type, true);\n \n     CASE_FLT_FN (BUILT_IN_HUGE_VAL):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_HUGE_VAL):\n       return fold_builtin_inf (loc, type, false);\n \n     case BUILT_IN_CLASSIFY_TYPE:\n@@ -8262,6 +8266,7 @@ fold_builtin_1 (location_t loc, tree fndecl, tree arg0)\n       return fold_builtin_strlen (loc, type, arg0);\n \n     CASE_FLT_FN (BUILT_IN_FABS):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_FABS):\n     case BUILT_IN_FABSD32:\n     case BUILT_IN_FABSD64:\n     case BUILT_IN_FABSD128:"}, {"sha": "ba6f0ed640a2a3f4c8d9691917a47c6f5b5ac507", "filename": "gcc/builtins.def", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -87,6 +87,19 @@ along with GCC; see the file COPYING3.  If not see\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,\t\\\n \t       false, false, false, ATTRS, true, true)\n \n+/* A set of GCC builtins for _FloatN and _FloatNx types.  TYPE_MACRO\n+   is called with an argument such as FLOAT32 to produce the enum\n+   value for the type.  */\n+#undef DEF_GCC_FLOATN_NX_BUILTINS\n+#define DEF_GCC_FLOATN_NX_BUILTINS(ENUM, NAME, TYPE_MACRO, ATTRS)\t\\\n+  DEF_GCC_BUILTIN (ENUM ## F16, NAME \"f16\", TYPE_MACRO (FLOAT16), ATTRS) \\\n+  DEF_GCC_BUILTIN (ENUM ## F32, NAME \"f32\", TYPE_MACRO (FLOAT32), ATTRS) \\\n+  DEF_GCC_BUILTIN (ENUM ## F64, NAME \"f64\", TYPE_MACRO (FLOAT64), ATTRS) \\\n+  DEF_GCC_BUILTIN (ENUM ## F128, NAME \"f128\", TYPE_MACRO (FLOAT128), ATTRS) \\\n+  DEF_GCC_BUILTIN (ENUM ## F32X, NAME \"f32x\", TYPE_MACRO (FLOAT32X), ATTRS) \\\n+  DEF_GCC_BUILTIN (ENUM ## F64X, NAME \"f64x\", TYPE_MACRO (FLOAT64X), ATTRS) \\\n+  DEF_GCC_BUILTIN (ENUM ## F128X, NAME \"f128x\", TYPE_MACRO (FLOAT128X), ATTRS)\n+\n /* A library builtin (like __builtin_strchr) is a builtin equivalent\n    of an ANSI/ISO standard library function.  In addition to the\n    `__builtin' version, we will create an ordinary version (e.g,\n@@ -296,6 +309,9 @@ DEF_C99_C90RES_BUILTIN (BUILT_IN_CEILL, \"ceill\", BT_FN_LONGDOUBLE_LONGDOUBLE, AT\n DEF_C99_BUILTIN        (BUILT_IN_COPYSIGN, \"copysign\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_COPYSIGNF, \"copysignf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_COPYSIGNL, \"copysignl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#define COPYSIGN_TYPE(F) BT_FN_##F##_##F##_##F\n+DEF_GCC_FLOATN_NX_BUILTINS (BUILT_IN_COPYSIGN, \"copysign\", COPYSIGN_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#undef COPYSIGN_TYPE\n DEF_LIB_BUILTIN        (BUILT_IN_COS, \"cos\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_COSF, \"cosf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n DEF_LIB_BUILTIN        (BUILT_IN_COSH, \"cosh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n@@ -326,6 +342,9 @@ DEF_C99_BUILTIN        (BUILT_IN_EXPM1L, \"expm1l\", BT_FN_LONGDOUBLE_LONGDOUBLE,\n DEF_LIB_BUILTIN        (BUILT_IN_FABS, \"fabs\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_FABSF, \"fabsf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_FABSL, \"fabsl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#define FABS_TYPE(F) BT_FN_##F##_##F\n+DEF_GCC_FLOATN_NX_BUILTINS (BUILT_IN_FABS, \"fabs\", FABS_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#undef FABS_TYPE\n DEF_GCC_BUILTIN        (BUILT_IN_FABSD32, \"fabsd32\", BT_FN_DFLOAT32_DFLOAT32, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_FABSD64, \"fabsd64\", BT_FN_DFLOAT64_DFLOAT64, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_FABSD128, \"fabsd128\", BT_FN_DFLOAT128_DFLOAT128, ATTR_CONST_NOTHROW_LEAF_LIST)\n@@ -359,6 +378,8 @@ DEF_EXT_LIB_BUILTIN    (BUILT_IN_GAMMAL_R, \"gammal_r\", BT_FN_LONGDOUBLE_LONGDOUB\n DEF_GCC_BUILTIN        (BUILT_IN_HUGE_VAL, \"huge_val\", BT_FN_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_HUGE_VALF, \"huge_valf\", BT_FN_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_HUGE_VALL, \"huge_vall\", BT_FN_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#define INF_TYPE(F) BT_FN_##F\n+DEF_GCC_FLOATN_NX_BUILTINS (BUILT_IN_HUGE_VAL, \"huge_val\", INF_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_HYPOT, \"hypot\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_HYPOTF, \"hypotf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_HYPOTL, \"hypotl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n@@ -374,6 +395,8 @@ DEF_C99_BUILTIN        (BUILT_IN_ILOGBL, \"ilogbl\", BT_FN_INT_LONGDOUBLE, ATTR_MA\n DEF_GCC_BUILTIN        (BUILT_IN_INF, \"inf\", BT_FN_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_INFF, \"inff\", BT_FN_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_INFL, \"infl\", BT_FN_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_GCC_FLOATN_NX_BUILTINS (BUILT_IN_INF, \"inf\", INF_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#undef INF_TYPE\n DEF_GCC_BUILTIN\t       (BUILT_IN_INFD32, \"infd32\", BT_FN_DFLOAT32, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_INFD64, \"infd64\", BT_FN_DFLOAT64, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_INFD128, \"infd128\", BT_FN_DFLOAT128, ATTR_CONST_NOTHROW_LEAF_LIST)\n@@ -446,12 +469,16 @@ DEF_C99_C90RES_BUILTIN (BUILT_IN_MODFL, \"modfl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LON\n DEF_C99_BUILTIN        (BUILT_IN_NAN, \"nan\", BT_FN_DOUBLE_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n DEF_C99_BUILTIN        (BUILT_IN_NANF, \"nanf\", BT_FN_FLOAT_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n DEF_C99_BUILTIN        (BUILT_IN_NANL, \"nanl\", BT_FN_LONGDOUBLE_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n+#define NAN_TYPE(F) BT_FN_##F##_CONST_STRING\n+DEF_GCC_FLOATN_NX_BUILTINS (BUILT_IN_NAN, \"nan\", NAN_TYPE, ATTR_CONST_NOTHROW_NONNULL)\n DEF_GCC_BUILTIN        (BUILT_IN_NAND32, \"nand32\", BT_FN_DFLOAT32_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n DEF_GCC_BUILTIN        (BUILT_IN_NAND64, \"nand64\", BT_FN_DFLOAT64_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n DEF_GCC_BUILTIN        (BUILT_IN_NAND128, \"nand128\", BT_FN_DFLOAT128_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n DEF_GCC_BUILTIN        (BUILT_IN_NANS, \"nans\", BT_FN_DOUBLE_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n DEF_GCC_BUILTIN        (BUILT_IN_NANSF, \"nansf\", BT_FN_FLOAT_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n DEF_GCC_BUILTIN        (BUILT_IN_NANSL, \"nansl\", BT_FN_LONGDOUBLE_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n+DEF_GCC_FLOATN_NX_BUILTINS (BUILT_IN_NANS, \"nans\", NAN_TYPE, ATTR_CONST_NOTHROW_NONNULL)\n+#undef NAN_TYPE\n DEF_C99_BUILTIN        (BUILT_IN_NEARBYINT, \"nearbyint\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_NEARBYINTF, \"nearbyintf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_NEARBYINTL, \"nearbyintl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)"}, {"sha": "c1423849b833f2e0b505485183abcb435e09c88e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -1,3 +1,8 @@\n+2016-08-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-family/c-cppbuiltin.c (c_cpp_builtins): Check _FloatN and\n+\t_FloatNx types for suffixes for built-in functions.\n+\n 2016-08-19  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/32187"}, {"sha": "ee4d233a08b4cd9309d8d7964e44d71f52a079ff", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -1095,24 +1095,27 @@ c_cpp_builtins (cpp_reader *pfile)\n \t  macro_name = (char *) alloca (strlen (name)\n \t\t\t\t\t+ sizeof (\"__LIBGCC__FUNC_EXT__\"));\n \t  sprintf (macro_name, \"__LIBGCC_%s_FUNC_EXT__\", name);\n-\t  const char *suffix;\n+\t  char suffix[20] = \"\";\n \t  if (mode == TYPE_MODE (double_type_node))\n-\t    suffix = \"\";\n+\t    ; /* Empty suffix correct.  */\n \t  else if (mode == TYPE_MODE (float_type_node))\n-\t    suffix = \"f\";\n+\t    suffix[0] = 'f';\n \t  else if (mode == TYPE_MODE (long_double_type_node))\n-\t    suffix = \"l\";\n-\t  /* ??? The following assumes the built-in functions (defined\n-\t     in target-specific code) match the suffixes used for\n-\t     constants.  Because in fact such functions are not\n-\t     defined for the 'w' suffix, 'l' is used there\n-\t     instead.  */\n-\t  else if (mode == targetm.c.mode_for_suffix ('q'))\n-\t    suffix = \"q\";\n-\t  else if (mode == targetm.c.mode_for_suffix ('w'))\n-\t    suffix = \"l\";\n+\t    suffix[0] = 'l';\n \t  else\n-\t    gcc_unreachable ();\n+\t    {\n+\t      bool found_suffix = false;\n+\t      for (int i = 0; i < NUM_FLOATN_NX_TYPES; i++)\n+\t\tif (FLOATN_NX_TYPE_NODE (i) != NULL_TREE\n+\t\t    && mode == TYPE_MODE (FLOATN_NX_TYPE_NODE (i)))\n+\t\t  {\n+\t\t    sprintf (suffix, \"f%d%s\", floatn_nx_types[i].n,\n+\t\t\t     floatn_nx_types[i].extended ? \"x\" : \"\");\n+\t\t    found_suffix = true;\n+\t\t    break;\n+\t\t  }\n+\t      gcc_assert (found_suffix);\n+\t    }\n \t  builtin_define_with_value (macro_name, suffix, 0);\n \t  bool excess_precision = false;\n \t  if (TARGET_FLT_EVAL_METHOD != 0"}, {"sha": "bb38bfc5eacff9ca7960a3ea07af6c8d5f0921fa", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -10856,6 +10856,13 @@ that are recognized in any mode since ISO C90 reserves these names for\n the purpose to which ISO C99 puts them.  All these functions have\n corresponding versions prefixed with @code{__builtin_}.\n \n+There are also built-in functions @code{__builtin_fabsf@var{n}},\n+@code{__builtin_fabsf@var{n}x}, @code{__builtin_copysignf@var{n}} and\n+@code{__builtin_copysignf@var{n}x}, corresponding to the TS 18661-3\n+functions @code{fabsf@var{n}}, @code{fabsf@var{n}x},\n+@code{copysignf@var{n}} and @code{copysignf@var{n}x}, for supported\n+types @code{_Float@var{n}} and @code{_Float@var{n}x}.\n+\n There are also GNU extension functions @code{clog10}, @code{clog10f} and\n @code{clog10l} which names are reserved by ISO C99 for future use.\n All these functions have versions prefixed with @code{__builtin_}.\n@@ -11394,6 +11401,16 @@ Similar to @code{__builtin_huge_val}, except the return\n type is @code{long double}.\n @end deftypefn\n \n+@deftypefn {Built-in Function} _Float@var{n} __builtin_huge_valf@var{n} (void)\n+Similar to @code{__builtin_huge_val}, except the return type is\n+@code{_Float@var{n}}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} _Float@var{n}x __builtin_huge_valf@var{n}x (void)\n+Similar to @code{__builtin_huge_val}, except the return type is\n+@code{_Float@var{n}x}.\n+@end deftypefn\n+\n @deftypefn {Built-in Function} int __builtin_fpclassify (int, int, int, int, int, ...)\n This built-in implements the C99 fpclassify functionality.  The first\n five int arguments should be the target library's notion of the\n@@ -11432,6 +11449,16 @@ Similar to @code{__builtin_inf}, except the return\n type is @code{long double}.\n @end deftypefn\n \n+@deftypefn {Built-in Function} _Float@var{n} __builtin_inff@var{n} (void)\n+Similar to @code{__builtin_inf}, except the return\n+type is @code{_Float@var{n}}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} _Float@var{n} __builtin_inff@var{n}x (void)\n+Similar to @code{__builtin_inf}, except the return\n+type is @code{_Float@var{n}x}.\n+@end deftypefn\n+\n @deftypefn {Built-in Function} int __builtin_isinf_sign (...)\n Similar to @code{isinf}, except the return value is -1 for\n an argument of @code{-Inf} and 1 for an argument of @code{+Inf}.\n@@ -11478,6 +11505,16 @@ Similar to @code{__builtin_nan}, except the return type is @code{float}.\n Similar to @code{__builtin_nan}, except the return type is @code{long double}.\n @end deftypefn\n \n+@deftypefn {Built-in Function} _Float@var{n} __builtin_nanf@var{n} (const char *str)\n+Similar to @code{__builtin_nan}, except the return type is\n+@code{_Float@var{n}}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} _Float@var{n}x __builtin_nanf@var{n}x (const char *str)\n+Similar to @code{__builtin_nan}, except the return type is\n+@code{_Float@var{n}x}.\n+@end deftypefn\n+\n @deftypefn {Built-in Function} double __builtin_nans (const char *str)\n Similar to @code{__builtin_nan}, except the significand is forced\n to be a signaling NaN@.  The @code{nans} function is proposed by\n@@ -11492,6 +11529,16 @@ Similar to @code{__builtin_nans}, except the return type is @code{float}.\n Similar to @code{__builtin_nans}, except the return type is @code{long double}.\n @end deftypefn\n \n+@deftypefn {Built-in Function} _Float@var{n} __builtin_nansf@var{n} (const char *str)\n+Similar to @code{__builtin_nans}, except the return type is\n+@code{_Float@var{n}}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} _Float@var{n}x __builtin_nansf@var{n}x (const char *str)\n+Similar to @code{__builtin_nans}, except the return type is\n+@code{_Float@var{n}x}.\n+@end deftypefn\n+\n @deftypefn {Built-in Function} int __builtin_ffs (int x)\n Returns one plus the index of the least significant 1-bit of @var{x}, or\n if @var{x} is zero, returns zero."}, {"sha": "2bbc8872865019c0706b58a6437d10279a924e23", "filename": "gcc/fold-const-call.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ffold-const-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ffold-const-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const-call.c?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -1131,12 +1131,14 @@ fold_const_call (combined_fn fn, tree type, tree arg)\n       return NULL_TREE;\n \n     CASE_CFN_NAN:\n+    CASE_FLT_FN_FLOATN_NX (CFN_BUILT_IN_NAN):\n     case CFN_BUILT_IN_NAND32:\n     case CFN_BUILT_IN_NAND64:\n     case CFN_BUILT_IN_NAND128:\n       return fold_const_builtin_nan (type, arg, true);\n \n     CASE_CFN_NANS:\n+    CASE_FLT_FN_FLOATN_NX (CFN_BUILT_IN_NANS):\n       return fold_const_builtin_nan (type, arg, false);\n \n     default:"}, {"sha": "800a543e8a597b8634ab6d0da7fa5bb65b18ab79", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -1,3 +1,16 @@\n+2016-08-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/torture/float128-builtin.c,\n+\tgcc.dg/torture/float128-ieee-nan.c,\n+\tgcc.dg/torture/float128x-builtin.c,\n+\tgcc.dg/torture/float128x-nan.c, gcc.dg/torture/float16-builtin.c,\n+\tgcc.dg/torture/float16-nan.c, gcc.dg/torture/float32-builtin.c,\n+\tgcc.dg/torture/float32-nan.c, gcc.dg/torture/float32x-builtin.c,\n+\tgcc.dg/torture/float32x-nan.c, gcc.dg/torture/float64-builtin.c,\n+\tgcc.dg/torture/float64-nan.c, gcc.dg/torture/float64x-builtin.c,\n+\tgcc.dg/torture/float64x-nan.c, gcc.dg/torture/floatn-builtin.h,\n+\tgcc.dg/torture/floatn-nan.h: New tests.\n+\n 2016-08-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/torture/arm-fp16-int-convert-alt.c (FP16_MAX_EXP): New"}, {"sha": "e4a50ceecffe7359f157747ecfdaa70cbb65c5cd", "filename": "gcc/testsuite/gcc.dg/torture/float128-builtin.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-builtin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-builtin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-builtin.c?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -0,0 +1,9 @@\n+/* Test _Float128 built-in functions.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float128 } */\n+/* { dg-require-effective-target float128_runtime } */\n+\n+#define WIDTH 128\n+#define EXT 0\n+#include \"floatn-builtin.h\""}, {"sha": "5dfbff9e8ad460d9bb0f8ab942f2fee2fb2b591f", "filename": "gcc/testsuite/gcc.dg/torture/float128-ieee-nan.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-ieee-nan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-ieee-nan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-ieee-nan.c?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -0,0 +1,10 @@\n+/* Test _Float128 NaNs.  */\n+/* { dg-do run } */\n+/* { dg-options \"-fsignaling-nans\" } */\n+/* { dg-add-options float128 } */\n+/* { dg-require-effective-target float128_runtime } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#define WIDTH 128\n+#define EXT 0\n+#include \"floatn-nan.h\""}, {"sha": "2e6bbaf28dffa2ffc93c145982e522a60267a6bc", "filename": "gcc/testsuite/gcc.dg/torture/float128x-builtin.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128x-builtin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128x-builtin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128x-builtin.c?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -0,0 +1,9 @@\n+/* Test _Float128x built-in functions.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float128x } */\n+/* { dg-require-effective-target float128x_runtime } */\n+\n+#define WIDTH 128\n+#define EXT 1\n+#include \"floatn-builtin.h\""}, {"sha": "ad0052fc434867041125b27854c3f40272cf2112", "filename": "gcc/testsuite/gcc.dg/torture/float128x-nan.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128x-nan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128x-nan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128x-nan.c?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -0,0 +1,10 @@\n+/* Test _Float128x NaNs.  */\n+/* { dg-do run } */\n+/* { dg-options \"-fsignaling-nans\" } */\n+/* { dg-add-options float128x } */\n+/* { dg-require-effective-target float128x_runtime } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#define WIDTH 128\n+#define EXT 1\n+#include \"floatn-nan.h\""}, {"sha": "43f9b1936b5b6eddff789b4566a88326dae3153a", "filename": "gcc/testsuite/gcc.dg/torture/float16-builtin.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat16-builtin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat16-builtin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat16-builtin.c?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -0,0 +1,9 @@\n+/* Test _Float16 built-in functions.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float16 } */\n+/* { dg-require-effective-target float16_runtime } */\n+\n+#define WIDTH 16\n+#define EXT 0\n+#include \"floatn-builtin.h\""}, {"sha": "859f30ca41462d2a0e6d66ae8d10fd1f7ff1bba8", "filename": "gcc/testsuite/gcc.dg/torture/float16-nan.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat16-nan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat16-nan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat16-nan.c?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -0,0 +1,10 @@\n+/* Test _Float16 NaNs.  */\n+/* { dg-do run } */\n+/* { dg-options \"-fsignaling-nans\" } */\n+/* { dg-add-options float16 } */\n+/* { dg-require-effective-target float16_runtime } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#define WIDTH 16\n+#define EXT 0\n+#include \"floatn-nan.h\""}, {"sha": "fc14ad1e112cd77c806d6bd2d80bf679145f2cc3", "filename": "gcc/testsuite/gcc.dg/torture/float32-builtin.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32-builtin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32-builtin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32-builtin.c?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -0,0 +1,9 @@\n+/* Test _Float32 built-in functions.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float32 } */\n+/* { dg-require-effective-target float32_runtime } */\n+\n+#define WIDTH 32\n+#define EXT 0\n+#include \"floatn-builtin.h\""}, {"sha": "c46b388a1c3c919e5dea7c38cabcc84757bf1a9e", "filename": "gcc/testsuite/gcc.dg/torture/float32-nan.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32-nan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32-nan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32-nan.c?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -0,0 +1,10 @@\n+/* Test _Float32 NaNs.  */\n+/* { dg-do run } */\n+/* { dg-options \"-fsignaling-nans\" } */\n+/* { dg-add-options float32 } */\n+/* { dg-require-effective-target float32_runtime } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#define WIDTH 32\n+#define EXT 0\n+#include \"floatn-nan.h\""}, {"sha": "3a5c2d0aa670e7696d3861bc1628d09064d313d2", "filename": "gcc/testsuite/gcc.dg/torture/float32x-builtin.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32x-builtin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32x-builtin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32x-builtin.c?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -0,0 +1,9 @@\n+/* Test _Float32x built-in functions.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float32x } */\n+/* { dg-require-effective-target float32x_runtime } */\n+\n+#define WIDTH 32\n+#define EXT 1\n+#include \"floatn-builtin.h\""}, {"sha": "770499d0660891f0b01e87f88524037f8b92b2fc", "filename": "gcc/testsuite/gcc.dg/torture/float32x-nan.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32x-nan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32x-nan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32x-nan.c?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -0,0 +1,10 @@\n+/* Test _Float32x NaNs.  */\n+/* { dg-do run } */\n+/* { dg-options \"-fsignaling-nans\" } */\n+/* { dg-add-options float32x } */\n+/* { dg-require-effective-target float32x_runtime } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#define WIDTH 32\n+#define EXT 1\n+#include \"floatn-nan.h\""}, {"sha": "ff3cb295676247741d5d8463fec64445571f90d2", "filename": "gcc/testsuite/gcc.dg/torture/float64-builtin.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64-builtin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64-builtin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64-builtin.c?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -0,0 +1,9 @@\n+/* Test _Float64 built-in functions.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float64 } */\n+/* { dg-require-effective-target float64_runtime } */\n+\n+#define WIDTH 64\n+#define EXT 0\n+#include \"floatn-builtin.h\""}, {"sha": "5f1a2e8f93343cf5353328b8240712dd256c23bb", "filename": "gcc/testsuite/gcc.dg/torture/float64-nan.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64-nan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64-nan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64-nan.c?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -0,0 +1,10 @@\n+/* Test _Float64 NaNs.  */\n+/* { dg-do run } */\n+/* { dg-options \"-fsignaling-nans\" } */\n+/* { dg-add-options float64 } */\n+/* { dg-require-effective-target float64_runtime } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#define WIDTH 64\n+#define EXT 0\n+#include \"floatn-nan.h\""}, {"sha": "2f95e8ad6d70f06f1645a2a65c666a3eca6f9e06", "filename": "gcc/testsuite/gcc.dg/torture/float64x-builtin.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64x-builtin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64x-builtin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64x-builtin.c?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -0,0 +1,9 @@\n+/* Test _Float64x built-in functions.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float64x } */\n+/* { dg-require-effective-target float64x_runtime } */\n+\n+#define WIDTH 64\n+#define EXT 1\n+#include \"floatn-builtin.h\""}, {"sha": "3d6496dee022b08faf8c080d5f03546817a7e07f", "filename": "gcc/testsuite/gcc.dg/torture/float64x-nan.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64x-nan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64x-nan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64x-nan.c?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -0,0 +1,10 @@\n+/* Test _Float64x NaNs.  */\n+/* { dg-do run } */\n+/* { dg-options \"-fsignaling-nans\" } */\n+/* { dg-add-options float64x } */\n+/* { dg-require-effective-target float64x_runtime } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#define WIDTH 64\n+#define EXT 1\n+#include \"floatn-nan.h\""}, {"sha": "c562812d1d014fe698949e80f2cae91fb1f2839a", "filename": "gcc/testsuite/gcc.dg/torture/floatn-builtin.h", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloatn-builtin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloatn-builtin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloatn-builtin.h?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -0,0 +1,64 @@\n+/* Tests for _FloatN / _FloatNx types: compile and execution tests for\n+   built-in functions.  Before including this file, define WIDTH as\n+   the value N; define EXT to 1 for _FloatNx and 0 for _FloatN.  */\n+\n+#define CONCATX(X, Y) X ## Y\n+#define CONCAT(X, Y) CONCATX (X, Y)\n+#define CONCAT3(X, Y, Z) CONCAT (CONCAT (X, Y), Z)\n+#define CONCAT4(W, X, Y, Z) CONCAT (CONCAT (CONCAT (W, X), Y), Z)\n+\n+#if EXT\n+# define TYPE CONCAT3 (_Float, WIDTH, x)\n+# define CST(C) CONCAT4 (C, f, WIDTH, x)\n+# define FN(F) CONCAT4 (F, f, WIDTH, x)\n+#else\n+# define TYPE CONCAT (_Float, WIDTH)\n+# define CST(C) CONCAT3 (C, f, WIDTH)\n+# define FN(F) CONCAT3 (F, f, WIDTH)\n+#endif\n+\n+extern void exit (int);\n+extern void abort (void);\n+\n+extern TYPE test_type;\n+extern __typeof (FN (__builtin_inf) ()) test_type;\n+extern __typeof (FN (__builtin_huge_val) ()) test_type;\n+extern __typeof (FN (__builtin_nan) (\"\")) test_type;\n+extern __typeof (FN (__builtin_nans) (\"\")) test_type;\n+extern __typeof (FN (__builtin_fabs) (0)) test_type;\n+extern __typeof (FN (__builtin_copysign) (0, 0)) test_type;\n+\n+volatile TYPE inf_cst = FN (__builtin_inf) ();\n+volatile TYPE huge_val_cst = FN (__builtin_huge_val) ();\n+volatile TYPE nan_cst = FN (__builtin_nan) (\"\");\n+volatile TYPE nans_cst = FN (__builtin_nans) (\"\");\n+volatile TYPE neg0 = -CST (0.0), neg1 = -CST (1.0), one = 1.0;\n+\n+int\n+main (void)\n+{\n+  volatile TYPE r;\n+  if (!__builtin_isinf (inf_cst))\n+    abort ();\n+  if (!__builtin_isinf (huge_val_cst))\n+    abort ();\n+  if (inf_cst != huge_val_cst)\n+    abort ();\n+  if (!__builtin_isnan (nan_cst))\n+    abort ();\n+  if (!__builtin_isnan (nans_cst))\n+    abort ();\n+  r = FN (__builtin_fabs) (neg1);\n+  if (r != CST (1.0))\n+    abort ();\n+  r = FN (__builtin_copysign) (one, neg0);\n+  if (r != neg1)\n+    abort ();\n+  r = FN (__builtin_copysign) (inf_cst, neg1);\n+  if (r != -huge_val_cst)\n+    abort ();\n+  r = FN (__builtin_copysign) (-inf_cst, one);\n+  if (r != huge_val_cst)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "89d2e2eec34712d28ac90ef8a0e9226e85234a00", "filename": "gcc/testsuite/gcc.dg/torture/floatn-nan.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloatn-nan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloatn-nan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloatn-nan.h?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -0,0 +1,39 @@\n+/* Tests for _FloatN / _FloatNx types: compile and execution tests for\n+   NaNs.  Before including this file, define WIDTH as the value N;\n+   define EXT to 1 for _FloatNx and 0 for _FloatN.  */\n+\n+#define CONCATX(X, Y) X ## Y\n+#define CONCAT(X, Y) CONCATX (X, Y)\n+#define CONCAT3(X, Y, Z) CONCAT (CONCAT (X, Y), Z)\n+#define CONCAT4(W, X, Y, Z) CONCAT (CONCAT (CONCAT (W, X), Y), Z)\n+\n+#if EXT\n+# define TYPE CONCAT3 (_Float, WIDTH, x)\n+# define CST(C) CONCAT4 (C, f, WIDTH, x)\n+# define FN(F) CONCAT4 (F, f, WIDTH, x)\n+#else\n+# define TYPE CONCAT (_Float, WIDTH)\n+# define CST(C) CONCAT3 (C, f, WIDTH)\n+# define FN(F) CONCAT3 (F, f, WIDTH)\n+#endif\n+\n+#include <fenv.h>\n+\n+extern void exit (int);\n+extern void abort (void);\n+\n+volatile TYPE nan_cst = FN (__builtin_nan) (\"\");\n+volatile TYPE nans_cst = FN (__builtin_nans) (\"\");\n+\n+int\n+main (void)\n+{\n+  volatile TYPE r;\n+  r = nan_cst + nan_cst;\n+  if (fetestexcept (FE_INVALID))\n+    abort ();\n+  r = nans_cst + nans_cst;\n+  if (!fetestexcept (FE_INVALID))\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "38ee81675757902f147ac3d4e068bbdb56f925c9", "filename": "gcc/tree.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc198e3a58a7acc5874f8912180f0a8ec8554c6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6dc198e3a58a7acc5874f8912180f0a8ec8554c6", "patch": "@@ -234,6 +234,9 @@ as_internal_fn (combined_fn code)\n /* Helper macros for math builtins.  */\n \n #define CASE_FLT_FN(FN) case FN: case FN##F: case FN##L\n+#define CASE_FLT_FN_FLOATN_NX(FN)\t\t\t   \\\n+  case FN##F16: case FN##F32: case FN##F64: case FN##F128: \\\n+  case FN##F32X: case FN##F64X: case FN##F128X\n #define CASE_FLT_FN_REENT(FN) case FN##_R: case FN##F_R: case FN##L_R\n #define CASE_INT_FN(FN) case FN: case FN##L: case FN##LL: case FN##IMAX\n \n@@ -3610,11 +3613,16 @@ tree_operand_check_code (const_tree __t, enum tree_code __code, int __i,\n #define FLOATN_NX_TYPE_NODE(IDX)\tglobal_trees[TI_FLOATN_NX_TYPE_FIRST + (IDX)]\n #define FLOATNX_TYPE_NODE(IDX)\t\tglobal_trees[TI_FLOATNX_TYPE_FIRST + (IDX)]\n \n-/* Names for individual types, where required by back ends\n-   (architecture-independent code should always iterate over all such\n-   types).  */\n+/* Names for individual types (code should normally iterate over all\n+   such types; these are only for back-end use, or in contexts such as\n+   *.def where iteration is not possible).  */\n+#define float16_type_node\t\tglobal_trees[TI_FLOAT16_TYPE]\n+#define float32_type_node\t\tglobal_trees[TI_FLOAT32_TYPE]\n+#define float64_type_node\t\tglobal_trees[TI_FLOAT64_TYPE]\n #define float128_type_node\t\tglobal_trees[TI_FLOAT128_TYPE]\n+#define float32x_type_node\t\tglobal_trees[TI_FLOAT32X_TYPE]\n #define float64x_type_node\t\tglobal_trees[TI_FLOAT64X_TYPE]\n+#define float128x_type_node\t\tglobal_trees[TI_FLOAT128X_TYPE]\n \n #define float_ptr_type_node\t\tglobal_trees[TI_FLOAT_PTR_TYPE]\n #define double_ptr_type_node\t\tglobal_trees[TI_DOUBLE_PTR_TYPE]"}]}