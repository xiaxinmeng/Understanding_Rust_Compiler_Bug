{"sha": "4225af228b5d52e8d7593dea49584c91b4bc2e1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIyNWFmMjI4YjVkNTJlOGQ3NTkzZGVhNDk1ODRjOTFiNGJjMmUxZg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2021-01-27T11:34:02Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2021-01-27T11:34:27Z"}, "message": "Fortran: Fix ICE due to elemental procedure pointers [PR93924/5].\n\n2021-01-27  Paul Thomas  <pault@gcc.gnu.org>\n\ngcc/fortran\n\tPR fortran/93924\n\tPR fortran/93925\n\t* trans-expr.c (gfc_conv_procedure_call): Suppress the call to\n\tgfc_conv_intrinsic_to_class for unlimited polymorphic procedure\n\tpointers.\n\t(gfc_trans_assignment_1): Similarly suppress class assignment\n\tfor class valued procedure pointers.\n\ngcc/testsuite/\n\tPR fortran/93924\n\tPR fortran/93925\n\t* gfortran.dg/proc_ptr_52.f90 : New test.", "tree": {"sha": "c462179431fe2cd32e0f2de80ea0aa27b75746c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c462179431fe2cd32e0f2de80ea0aa27b75746c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4225af228b5d52e8d7593dea49584c91b4bc2e1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4225af228b5d52e8d7593dea49584c91b4bc2e1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4225af228b5d52e8d7593dea49584c91b4bc2e1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4225af228b5d52e8d7593dea49584c91b4bc2e1f/comments", "author": null, "committer": null, "parents": [{"sha": "686b1cdfdc46a476056fe4df6e8186be8c889aca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/686b1cdfdc46a476056fe4df6e8186be8c889aca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/686b1cdfdc46a476056fe4df6e8186be8c889aca"}], "stats": {"total": 78, "additions": 76, "deletions": 2}, "files": [{"sha": "b0c8d577ca59788ff3bb6cf8779e198ba6a99186", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4225af228b5d52e8d7593dea49584c91b4bc2e1f/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4225af228b5d52e8d7593dea49584c91b4bc2e1f/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=4225af228b5d52e8d7593dea49584c91b4bc2e1f", "patch": "@@ -5772,7 +5772,8 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t\t\t     CLASS_DATA (fsym)->attr.class_pointer\n \t\t\t\t     || CLASS_DATA (fsym)->attr.allocatable);\n \t}\n-      else if (UNLIMITED_POLY (fsym) && e->ts.type != BT_CLASS)\n+      else if (UNLIMITED_POLY (fsym) && e->ts.type != BT_CLASS\n+\t       && gfc_expr_attr (e).flavor != FL_PROCEDURE)\n \t{\n \t  /* The intrinsic type needs to be converted to a temporary\n \t     CLASS object for the unlimited polymorphic formal.  */\n@@ -11068,7 +11069,8 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n \t\t       || gfc_is_class_array_ref (expr1, NULL)\n \t\t       || gfc_is_class_scalar_expr (expr1)\n \t\t       || gfc_is_class_array_ref (expr2, NULL)\n-\t\t       || gfc_is_class_scalar_expr (expr2));\n+\t\t       || gfc_is_class_scalar_expr (expr2))\n+\t\t   && lhs_attr.flavor != FL_PROCEDURE;\n \n   realloc_flag = flag_realloc_lhs\n \t\t && gfc_is_reallocatable_lhs (expr1)"}, {"sha": "cb7cf7040a9d5303091b98e87096e91d3558795e", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_52.f90", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4225af228b5d52e8d7593dea49584c91b4bc2e1f/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_52.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4225af228b5d52e8d7593dea49584c91b4bc2e1f/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_52.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_52.f90?ref=4225af228b5d52e8d7593dea49584c91b4bc2e1f", "patch": "@@ -0,0 +1,72 @@\n+! { dg-do run }\n+!\n+! Test the fix for PRs93924 & 93925.\n+!\n+! Contributed by Martin Stein  <mscfd@gmx.net>\n+!\n+module cs\n+\n+implicit none\n+\n+integer, target :: integer_target\n+\n+abstract interface\n+   function classStar_map_ifc(x) result(y)\n+      class(*), pointer            :: y\n+      class(*), target, intent(in) :: x\n+   end function classStar_map_ifc\n+end interface\n+\n+contains\n+\n+   function fun(x) result(y)\n+      class(*), pointer            :: y\n+      class(*), target, intent(in) :: x\n+      select type (x)\n+      type is (integer)\n+         integer_target = x        ! Deals with dangling target.\n+         y => integer_target\n+      class default\n+         y => null()\n+      end select\n+   end function fun\n+\n+   function apply(f, x) result(y)\n+      procedure(classStar_map_ifc) :: f\n+      integer, intent(in) :: x\n+      integer :: y\n+      class(*), pointer :: p\n+      y = 0                        ! Get rid of 'y' undefined warning\n+      p => f (x)\n+      select type (p)\n+      type is (integer)\n+         y = p\n+      end select\n+   end function apply\n+\n+   function selector() result(f)\n+      procedure(classStar_map_ifc), pointer :: f\n+      f => fun\n+   end function selector\n+\n+end module cs\n+\n+\n+program classStar_map\n+\n+use cs\n+implicit none\n+\n+integer :: x, y\n+procedure(classStar_map_ifc), pointer :: f\n+\n+x = 123654\n+f => selector ()               ! Fixed by second chunk in patch\n+y = apply (f, x)               ! Fixed by first chunk in patch\n+if (x .ne. y) stop 1\n+\n+x = 2 * x\n+y = apply (fun, x)             ! PR93925; fixed as above\n+if (x .ne. y) stop 2\n+\n+end program classStar_map"}]}