{"sha": "9f106823dcb9c4a463c50c912695f66325fb9a46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYxMDY4MjNkY2I5YzRhNDYzYzUwYzkxMjY5NWY2NjMyNWZiOWE0Ng==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-06-06T12:12:32Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-06-06T12:12:32Z"}, "message": "re PR tree-optimization/32216 (ICE: verify_stmts failed (invalid reference prefix) with -ftree-vectorize)\n\n\tPR tree-optimization/32216\n\t* tree-vectorizer.c (supportable_widening_operation): Determine\n\tsignedness of FIX_TRUNC_EXPR from output operand.\n\t(supportable_narrowing_operation): Ditto.\n\t* tree-vect-generic.c (expand_vector_operations_1): Determine\n\tsignedness of VEC_UNPACK_FLOAT_HI_EXPR and VEC_UNPACK_FLOAT_LO_EXPR\n\tfrom input operand.\n\ntestsuite/ChangeLog:\n\t\n\tPR tree-optimization/32216\n\t* gcc.dg/vect/pr32216.c: New test.\n\nFrom-SVN: r125482", "tree": {"sha": "de9849634b1b7fa1d9a2c6099d590044f0aa8c3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de9849634b1b7fa1d9a2c6099d590044f0aa8c3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f106823dcb9c4a463c50c912695f66325fb9a46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f106823dcb9c4a463c50c912695f66325fb9a46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f106823dcb9c4a463c50c912695f66325fb9a46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f106823dcb9c4a463c50c912695f66325fb9a46/comments", "author": null, "committer": null, "parents": [{"sha": "ec11296fef7a643fef5d78edcf101b46622e64d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec11296fef7a643fef5d78edcf101b46622e64d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec11296fef7a643fef5d78edcf101b46622e64d7"}], "stats": {"total": 70, "additions": 59, "deletions": 11}, "files": [{"sha": "5fa424d81d5f33f524d4c609c47482ef3c27a173", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f106823dcb9c4a463c50c912695f66325fb9a46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f106823dcb9c4a463c50c912695f66325fb9a46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f106823dcb9c4a463c50c912695f66325fb9a46", "patch": "@@ -1,8 +1,18 @@\n+2007-06-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR tree-optimization/32216\n+\t* tree-vectorizer.c (supportable_widening_operation): Determine\n+\tsignedness of FIX_TRUNC_EXPR from output operand.\n+\t(supportable_narrowing_operation): Ditto.\n+\t* tree-vect-generic.c (expand_vector_operations_1): Determine\n+\tsignedness of VEC_UNPACK_FLOAT_HI_EXPR and VEC_UNPACK_FLOAT_LO_EXPR\n+\tfrom input operand.\n+\n 2007-06-06  Thomas Neumann  <tneumann@users.sourceforge.net>\n \n \t* config/i386/i386.c (enum pta_flags): Move out of struct scope...\n-\t(struct pta): ...from here. Change flags to unsigned to avoid excessive\n-\tcasting (as it is used as a bit mask).\n+\t(struct pta): ...from here. Change flags to unsigned to avoid\n+\texcessive casting (as it is used as a bit mask).\n \t(override_options): Add casts according to the coding convenventions.\n \t(x86_64_elf_unique_section): Likewise.\n \t(examine_argument): Avoid using C++ keywords as variable names."}, {"sha": "47114fcaa5cc377a730b99b5972698e2984e8771", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f106823dcb9c4a463c50c912695f66325fb9a46/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f106823dcb9c4a463c50c912695f66325fb9a46/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=9f106823dcb9c4a463c50c912695f66325fb9a46", "patch": "@@ -357,6 +357,7 @@ optab_for_tree_code (enum tree_code code, tree type)\n       return TYPE_UNSIGNED (type) ? vec_pack_usat_optab : vec_pack_ssat_optab;\n \n     case VEC_PACK_FIX_TRUNC_EXPR:\n+      /* The signedness is determined from output operand.  */\n       return TYPE_UNSIGNED (type) ?\n \tvec_pack_ufix_trunc_optab : vec_pack_sfix_trunc_optab;\n "}, {"sha": "766369d57546c3c722fed41d60fd6af4548b717f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f106823dcb9c4a463c50c912695f66325fb9a46/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f106823dcb9c4a463c50c912695f66325fb9a46/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f106823dcb9c4a463c50c912695f66325fb9a46", "patch": "@@ -1,3 +1,8 @@\n+2007-06-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR tree-optimization/32216\n+\t* gcc.dg/vect/pr32216.c: New test.\n+\n 2007-06-05  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR testsuite/18923"}, {"sha": "cf2744125ece33089a536360e072073541e84621", "filename": "gcc/testsuite/gcc.dg/vect/pr32216.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f106823dcb9c4a463c50c912695f66325fb9a46/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr32216.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f106823dcb9c4a463c50c912695f66325fb9a46/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr32216.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr32216.c?ref=9f106823dcb9c4a463c50c912695f66325fb9a46", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_floatint_cvt } */\n+\n+unsigned int wlookup2[203];\n+\n+SetSoundVariables (int x)\n+{\n+  for (x = 1; x < 32; x++)\n+  {\n+    wlookup2[x] = (double) 16 / x;\n+  }\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "8c0bbd556fa76502ebc22dfb14b15b80aafac1f5", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f106823dcb9c4a463c50c912695f66325fb9a46/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f106823dcb9c4a463c50c912695f66325fb9a46/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=9f106823dcb9c4a463c50c912695f66325fb9a46", "patch": "@@ -412,17 +412,22 @@ expand_vector_operations_1 (block_stmt_iterator *bsi)\n     return;\n   \n   gcc_assert (code != CONVERT_EXPR);\n+\n+  /* The signedness is determined from input argument.  */\n+  if (code == VEC_UNPACK_FLOAT_HI_EXPR\n+      || code == VEC_UNPACK_FLOAT_LO_EXPR)\n+    type = TREE_TYPE (TREE_OPERAND (rhs, 0));\n+\n   op = optab_for_tree_code (code, type);\n \n   /* For widening/narrowing vector operations, the relevant type is of the \n-     arguments, not the widened result.  */\n+     arguments, not the widened result.  VEC_UNPACK_FLOAT_*_EXPR is\n+     calculated in the same way above.  */\n   if (code == WIDEN_SUM_EXPR\n       || code == VEC_WIDEN_MULT_HI_EXPR\n       || code == VEC_WIDEN_MULT_LO_EXPR\n       || code == VEC_UNPACK_HI_EXPR\n       || code == VEC_UNPACK_LO_EXPR\n-      || code == VEC_UNPACK_FLOAT_HI_EXPR\n-      || code == VEC_UNPACK_FLOAT_LO_EXPR\n       || code == VEC_PACK_TRUNC_EXPR\n       || code == VEC_PACK_SAT_EXPR\n       || code == VEC_PACK_FIX_TRUNC_EXPR)"}, {"sha": "8dba4d03cf944fcf7b886315407db1ca03e51c42", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f106823dcb9c4a463c50c912695f66325fb9a46/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f106823dcb9c4a463c50c912695f66325fb9a46/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=9f106823dcb9c4a463c50c912695f66325fb9a46", "patch": "@@ -1851,10 +1851,17 @@ supportable_widening_operation (enum tree_code code, tree stmt, tree vectype,\n       gcc_unreachable ();\n     }\n \n-  *code1 = c1;\n-  *code2 = c2;\n-  optab1 = optab_for_tree_code (c1, vectype);\n-  optab2 = optab_for_tree_code (c2, vectype);\n+  if (code == FIX_TRUNC_EXPR)\n+    {\n+      /* The signedness is determined from output operand.  */\n+      optab1 = optab_for_tree_code (c1, type);\n+      optab2 = optab_for_tree_code (c2, type);\n+    }\n+  else\n+    {\n+      optab1 = optab_for_tree_code (c1, vectype);\n+      optab2 = optab_for_tree_code (c2, vectype);\n+    }\n \n   if (!optab1 || !optab2)\n     return false;\n@@ -1867,6 +1874,8 @@ supportable_widening_operation (enum tree_code code, tree stmt, tree vectype,\n       || insn_data[icode2].operand[0].mode != TYPE_MODE (wide_vectype))\n     return false;\n \n+  *code1 = c1;\n+  *code2 = c2;\n   return true;\n }\n \n@@ -1918,8 +1927,11 @@ supportable_narrowing_operation (enum tree_code code,\n       gcc_unreachable ();\n     }\n \n-  *code1 = c1;\n-  optab1 = optab_for_tree_code (c1, vectype);\n+  if (code == FIX_TRUNC_EXPR)\n+    /* The signedness is determined from output operand.  */\n+    optab1 = optab_for_tree_code (c1, type);\n+  else\n+    optab1 = optab_for_tree_code (c1, vectype);\n \n   if (!optab1)\n     return false;\n@@ -1929,6 +1941,7 @@ supportable_narrowing_operation (enum tree_code code,\n       || insn_data[icode1].operand[0].mode != TYPE_MODE (narrow_vectype))\n     return false;\n \n+  *code1 = c1;\n   return true;\n }\n "}]}