{"sha": "1c44748c3f81d776ccbf03371967fbd2b3014d1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM0NDc0OGMzZjgxZDc3NmNjYmYwMzM3MTk2N2ZiZDJiMzAxNGQxYw==", "commit": {"author": {"name": "David S. Miller", "email": "davem@pierdol.cobaltmicro.com", "date": "1998-07-14T00:18:57Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "1998-07-14T00:18:57Z"}, "message": "Fix regressions introduced by most recent Sparc commits.\n\nFix regressions introduced by most recent Sparc\ncommits.\n\t* config/sparc/sparc.c (output_scc_insn): Enclose || conditions in\n\tparens while walking over notes.\n\t* config/sparc/sparc.md (reg movdi split): Clean up matching\n\tconditions.\n\t(all DI arithop splits on 32-bit): Handle immediate arguments\n\tcorrectly when they are CONST_INTs.\n\nFrom-SVN: r21127", "tree": {"sha": "16696438677f51ccc81bb930a154c2c7c37745fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16696438677f51ccc81bb930a154c2c7c37745fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c44748c3f81d776ccbf03371967fbd2b3014d1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c44748c3f81d776ccbf03371967fbd2b3014d1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c44748c3f81d776ccbf03371967fbd2b3014d1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c44748c3f81d776ccbf03371967fbd2b3014d1c/comments", "author": null, "committer": null, "parents": [{"sha": "e8d1616611c860c5bcf8290999014a5cdaf24c19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8d1616611c860c5bcf8290999014a5cdaf24c19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8d1616611c860c5bcf8290999014a5cdaf24c19"}], "stats": {"total": 85, "additions": 64, "deletions": 21}, "files": [{"sha": "b01e7b52f4d547397fb8f5f2e630dfc2809712fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c44748c3f81d776ccbf03371967fbd2b3014d1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c44748c3f81d776ccbf03371967fbd2b3014d1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c44748c3f81d776ccbf03371967fbd2b3014d1c", "patch": "@@ -1,3 +1,12 @@\n+Mon Jul 13 23:11:44 1998  David S. Miller  <davem@pierdol.cobaltmicro.com>\n+\n+\t* config/sparc/sparc.c (output_scc_insn): Enclose || conditions in\n+\tparens while walking over notes.\n+\t* config/sparc/sparc.md (reg movdi split): Clean up matching\n+\tconditions.\n+\t(all DI arithop splits on 32-bit): Handle immediate arguments\n+\tcorrectly when they are CONST_INTs.\n+\n Mon Jul 13 23:57:21 1998  Kamil Iskra  <iskra@student.uci.agh.edu.pl>\n \n \t* m68k/m68k.h (TARGET_SWITCHES): Clear MASK_68040_ONLY for"}, {"sha": "da7c257ba94186f547a97afbf0f03b32a292f304", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c44748c3f81d776ccbf03371967fbd2b3014d1c/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c44748c3f81d776ccbf03371967fbd2b3014d1c/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=1c44748c3f81d776ccbf03371967fbd2b3014d1c", "patch": "@@ -2736,7 +2736,7 @@ output_scc_insn (operands, insn)\n \tlabel = next;\n       next = NEXT_INSN (next);\n     }\n-  while (next && GET_CODE (next) == NOTE || GET_CODE (next) == CODE_LABEL);\n+  while (next && (GET_CODE (next) == NOTE || GET_CODE (next) == CODE_LABEL));\n \n   if (next && GET_CODE (next) == JUMP_INSN && simplejump_p (next))\n     label = JUMP_LABEL (next);"}, {"sha": "47d2d3de7ad3c22a104d356f7f9fad21c776b0b0", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 54, "deletions": 20, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c44748c3f81d776ccbf03371967fbd2b3014d1c/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c44748c3f81d776ccbf03371967fbd2b3014d1c/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=1c44748c3f81d776ccbf03371967fbd2b3014d1c", "patch": "@@ -2260,8 +2260,9 @@\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(match_operand:DI 1 \"arith_double_operand\" \"rIN\"))]\n-  \"! TARGET_ARCH64 && GET_CODE (operands[1]) == REG && REGNO (operands[0]) < 32\n-   && (GET_CODE (operands[1]) != REG || REGNO (operands[1]) < 32)\n+  \"! TARGET_ARCH64\n+   && REGNO (operands[0]) < 32\n+   && GET_CODE (operands[1]) == REG && REGNO (operands[1]) < 32\n    && ! reg_overlap_mentioned_p (operands[0], operands[1])\"\n   [(set (match_dup 2) (match_dup 4))\n    (set (match_dup 3) (match_dup 5))]\n@@ -3723,12 +3724,23 @@ return \\\"srl %1,0,%0\\\";\n \t(plus:SI (plus:SI (match_dup 7)\n \t\t\t  (match_dup 8))\n \t\t (ltu:SI (reg:CC_NOOV 100) (const_int 0))))]\n-  \"operands[3] = gen_lowpart (SImode, operands[0]);\n-   operands[4] = gen_lowpart (SImode, operands[1]);\n-   operands[5] = gen_lowpart (SImode, operands[2]);\n-   operands[6] = gen_highpart (SImode, operands[0]);\n-   operands[7] = gen_highpart (SImode, operands[1]);\n-   operands[8] = gen_highpart (SImode, operands[2]);\")\n+  \"\n+{\n+  operands[3] = gen_lowpart (SImode, operands[0]);\n+  operands[4] = gen_lowpart (SImode, operands[1]);\n+  operands[5] = gen_lowpart (SImode, operands[2]);\n+  operands[6] = gen_highpart (SImode, operands[0]);\n+  operands[7] = gen_highpart (SImode, operands[1]);\n+  if (GET_CODE (operands[2]) == CONST_INT)\n+    {\n+      if (INTVAL (operands[2]) < 0)\n+\toperands[8] = constm1_rtx;\n+      else\n+\toperands[8] = const0_rtx;\n+    }\n+  else\n+    operands[8] = gen_highpart (SImode, operands[2]);\n+}\")\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -3746,12 +3758,23 @@ return \\\"srl %1,0,%0\\\";\n \t(minus:SI (minus:SI (match_dup 7)\n \t\t\t    (match_dup 8))\n \t\t  (ltu:SI (reg:CC_NOOV 100) (const_int 0))))]\n-  \"operands[3] = gen_lowpart (SImode, operands[0]);\n-   operands[4] = gen_lowpart (SImode, operands[1]);\n-   operands[5] = gen_lowpart (SImode, operands[2]);\n-   operands[6] = gen_highpart (SImode, operands[0]);\n-   operands[7] = gen_highpart (SImode, operands[1]);\n-   operands[8] = gen_highpart (SImode, operands[2]);\")\n+  \"\n+{\n+  operands[3] = gen_lowpart (SImode, operands[0]);\n+  operands[4] = gen_lowpart (SImode, operands[1]);\n+  operands[5] = gen_lowpart (SImode, operands[2]);\n+  operands[6] = gen_highpart (SImode, operands[0]);\n+  operands[7] = gen_highpart (SImode, operands[1]);\n+  if (GET_CODE (operands[2]) == CONST_INT)\n+    {\n+      if (INTVAL (operands[2]) < 0)\n+\toperands[8] = constm1_rtx;\n+      else\n+\toperands[8] = const0_rtx;\n+    }\n+  else\n+    operands[8] = gen_highpart (SImode, operands[2]);\n+}\")\n \n ;; LTU here means \"carry set\"\n (define_insn \"*addx\"\n@@ -4563,12 +4586,23 @@ return \\\"srl %1,0,%0\\\";\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < 32\"\n   [(set (match_dup 4) (match_op_dup:SI 1 [(match_dup 6) (match_dup 8)]))\n    (set (match_dup 5) (match_op_dup:SI 1 [(match_dup 7) (match_dup 9)]))]\n-  \"operands[4] = gen_highpart (SImode, operands[0]);\n-   operands[5] = gen_lowpart (SImode, operands[0]);\n-   operands[6] = gen_highpart (SImode, operands[2]);\n-   operands[7] = gen_lowpart (SImode, operands[2]);\n-   operands[8] = gen_highpart (SImode, operands[3]);\n-   operands[9] = gen_lowpart (SImode, operands[3]);\")\n+  \"\n+{\n+  operands[4] = gen_highpart (SImode, operands[0]);\n+  operands[5] = gen_lowpart (SImode, operands[0]);\n+  operands[6] = gen_highpart (SImode, operands[2]);\n+  operands[7] = gen_lowpart (SImode, operands[2]);\n+  if (GET_CODE (operands[3]) == CONST_INT)\n+    {\n+      if (INTVAL (operands[3]) < 0)\n+\toperands[8] = constm1_rtx;\n+      else\n+\toperands[8] = const0_rtx;\n+    }\n+  else\n+    operands[8] = gen_highpart (SImode, operands[3]);\n+  operands[9] = gen_lowpart (SImode, operands[3]);\n+}\")\n \n (define_insn \"*and_not_di_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,b\")"}]}