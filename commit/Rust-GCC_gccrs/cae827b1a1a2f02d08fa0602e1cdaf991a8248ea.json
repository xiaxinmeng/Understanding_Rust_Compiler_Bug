{"sha": "cae827b1a1a2f02d08fa0602e1cdaf991a8248ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FlODI3YjFhMWEyZjAyZDA4ZmEwNjAyZTFjZGFmOTkxYTgyNDhlYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-10-13T06:57:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-10-13T06:57:11Z"}, "message": "graphite-scop-detection.c (loop_ivs_can_be_represented): Remove.\n\n2017-10-13  Richard Biener  <rguenther@suse.de>\n\n\t* graphite-scop-detection.c (loop_ivs_can_be_represented): Remove.\n\t(scop_detection::harmful_loop_in_region): Remove premature\n\tIV type restriction.\n\t(scop_detection::graphite_can_represent_scev): We can handle\n\tpointer IVs just fine.\n\nFrom-SVN: r253705", "tree": {"sha": "04f9c8b68b60e096608ef25d8d8365e915731d06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04f9c8b68b60e096608ef25d8d8365e915731d06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cae827b1a1a2f02d08fa0602e1cdaf991a8248ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cae827b1a1a2f02d08fa0602e1cdaf991a8248ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cae827b1a1a2f02d08fa0602e1cdaf991a8248ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cae827b1a1a2f02d08fa0602e1cdaf991a8248ea/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca04e2cd566342ff5098d271d77cb6013adfefc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca04e2cd566342ff5098d271d77cb6013adfefc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca04e2cd566342ff5098d271d77cb6013adfefc9"}], "stats": {"total": 45, "additions": 8, "deletions": 37}, "files": [{"sha": "96033a8cb24d0e54b8412a4dbb4e85ce545ff7c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cae827b1a1a2f02d08fa0602e1cdaf991a8248ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cae827b1a1a2f02d08fa0602e1cdaf991a8248ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cae827b1a1a2f02d08fa0602e1cdaf991a8248ea", "patch": "@@ -1,3 +1,11 @@\n+2017-10-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* graphite-scop-detection.c (loop_ivs_can_be_represented): Remove.\n+\t(scop_detection::harmful_loop_in_region): Remove premature\n+\tIV type restriction.\n+\t(scop_detection::graphite_can_represent_scev): We can handle\n+\tpointer IVs just fine.\n+\n 2017-10-13  Alan Modra  <amodra@gmail.com>\n \n \t* doc/extend.texi (Extended Asm <Clobbers>): Rename to"}, {"sha": "3cd99322b77d941be812fb3a84d4729d9a3a9601", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cae827b1a1a2f02d08fa0602e1cdaf991a8248ea/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cae827b1a1a2f02d08fa0602e1cdaf991a8248ea/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=cae827b1a1a2f02d08fa0602e1cdaf991a8248ea", "patch": "@@ -254,28 +254,6 @@ dot_cfg ()\n   scops.release ();\n }\n \n-/* Can all ivs be represented by a signed integer?\n-   As isl might generate negative values in its expressions, signed loop ivs\n-   are required in the backend.  */\n-\n-static bool\n-loop_ivs_can_be_represented (loop_p loop)\n-{\n-  unsigned type_long_long = TYPE_PRECISION (long_long_integer_type_node);\n-  for (gphi_iterator psi = gsi_start_phis (loop->header); !gsi_end_p (psi);\n-       gsi_next (&psi))\n-    {\n-      gphi *phi = psi.phi ();\n-      tree res = PHI_RESULT (phi);\n-      tree type = TREE_TYPE (res);\n-\n-      if (TYPE_UNSIGNED (type) && TYPE_PRECISION (type) >= type_long_long)\n-\treturn false;\n-    }\n-\n-  return true;\n-}\n-\n /* Returns a COND_EXPR statement when BB has a single predecessor, the\n    edge between BB and its predecessor is not a loop exit edge, and\n    the last statement of the single predecessor is a COND_EXPR.  */\n@@ -822,13 +800,6 @@ scop_detection::harmful_loop_in_region (sese_l scop) const\n \t  return true;\n \t}\n \n-      if (! loop_ivs_can_be_represented (loop))\n-\t{\n-\t  DEBUG_PRINT (dp << \"[scop-detection-fail] loop_\" << loop->num\n-\t\t       << \"IV cannot be represented.\\n\");\n-\t  return true;\n-\t}\n-\n       /* Check if all loop nests have at least one data reference.\n \t ???  This check is expensive and loops premature at this point.\n \t If important to retain we can pre-compute this for all innermost\n@@ -968,14 +939,6 @@ scop_detection::graphite_can_represent_scev (tree scev)\n   if (chrec_contains_undetermined (scev))\n     return false;\n \n-  /* We disable the handling of pointer types, because it\u2019s currently not\n-     supported by Graphite with the isl AST generator. SSA_NAME nodes are\n-     the only nodes, which are disabled in case they are pointers to object\n-     types, but this can be changed.  */\n-\n-  if (POINTER_TYPE_P (TREE_TYPE (scev)) && TREE_CODE (scev) == SSA_NAME)\n-    return false;\n-\n   switch (TREE_CODE (scev))\n     {\n     case NEGATE_EXPR:"}]}