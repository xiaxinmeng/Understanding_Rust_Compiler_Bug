{"sha": "423d34f61c43e400f0d5b837fe93c83963b2ecdd", "node_id": "C_kwDOANBUbNoAKDQyM2QzNGY2MWM0M2U0MDBmMGQ1YjgzN2ZlOTNjODM5NjNiMmVjZGQ", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2023-03-14T12:16:11Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2023-03-14T18:15:14Z"}, "message": "d: Fix undefined reference to lambda defined in private enum [PR109108]\n\nPreviously lambdas were connected to the module they were defined in.\nNow they are emitted into every referencing compilation unit, and are\ngiven one-only linkage.\n\n\tPR d/109108\n\ngcc/d/ChangeLog:\n\n\t* decl.cc (function_defined_in_root_p): Remove.\n\t(get_symbol_decl): Set DECL_LAMBDA_FUNCTION_P on function literals.\n\t(start_function): Unconditionally unset DECL_EXTERNAL\n\t(set_linkage_for_decl): Give lambda functions one-only linkage.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/torture/imports/pr109108.d: New test.\n\t* gdc.dg/torture/pr109108.d: New test.", "tree": {"sha": "c8d51cc66b2eee8494df5e6ca061c2fc17c583dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8d51cc66b2eee8494df5e6ca061c2fc17c583dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/423d34f61c43e400f0d5b837fe93c83963b2ecdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/423d34f61c43e400f0d5b837fe93c83963b2ecdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/423d34f61c43e400f0d5b837fe93c83963b2ecdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/423d34f61c43e400f0d5b837fe93c83963b2ecdd/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1526ecd739fc6a13329abdcbdbf7c2df57c22177", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1526ecd739fc6a13329abdcbdbf7c2df57c22177", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1526ecd739fc6a13329abdcbdbf7c2df57c22177"}], "stats": {"total": 62, "additions": 34, "deletions": 28}, "files": [{"sha": "4fbabd599983cef7be3e3b6c83a663a18a2b1ec9", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 13, "deletions": 28, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/423d34f61c43e400f0d5b837fe93c83963b2ecdd/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/423d34f61c43e400f0d5b837fe93c83963b2ecdd/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=423d34f61c43e400f0d5b837fe93c83963b2ecdd", "patch": "@@ -1090,25 +1090,6 @@ build_decl_tree (Dsymbol *d)\n   input_location = saved_location;\n }\n \n-/* Returns true if function FD, or any lexically enclosing scope function of FD\n-   is defined or instantiated in a root module.  */\n-\n-static bool\n-function_defined_in_root_p (FuncDeclaration *fd)\n-{\n-  Module *md = fd->getModule ();\n-  if (md && md->isRoot ())\n-    return true;\n-\n-  for (TemplateInstance *ti = fd->isInstantiated (); ti != NULL; ti = ti->tinst)\n-    {\n-      if (ti->minst && ti->minst->isRoot ())\n-\treturn true;\n-    }\n-\n-  return false;\n-}\n-\n /* Returns true if function FD always needs to be implicitly defined, such as\n    it was declared `pragma(inline)'.  */\n \n@@ -1474,6 +1455,12 @@ get_symbol_decl (Declaration *decl)\n \t  DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (decl->csym) = 1;\n \t}\n \n+      /* In [expression/function_literals], function literals (aka lambdas)\n+\t enable embedding anonymous functions and anonymous delegates directly\n+\t into expressions.  They are defined in each referencing module.  */\n+      if (fd->isFuncLiteralDeclaration ())\n+\tDECL_SET_LAMBDA_FUNCTION (decl->csym, true);\n+\n       /* Mark compiler generated functions as artificial.  */\n       if (fd->isGenerated ())\n \tDECL_ARTIFICIAL (decl->csym) = 1;\n@@ -2029,12 +2016,9 @@ start_function (FuncDeclaration *fd)\n {\n   tree fndecl = get_symbol_decl (fd);\n \n-  /* Function has been defined, check now whether we intend to send it to\n-     object file, or it really is extern.  Such as inlinable functions from\n-     modules not in this compilation, or thunk aliases.  */\n-  if (function_defined_in_root_p (fd))\n-    DECL_EXTERNAL (fndecl) = 0;\n-\n+  /* Function has been defined. Whether we intend to send it to object file, or\n+     discard it has already been determined by set_linkage_for_decl.  */\n+  DECL_EXTERNAL (fndecl) = 0;\n   DECL_INITIAL (fndecl) = error_mark_node;\n \n   /* Add this decl to the current binding level.  */\n@@ -2550,9 +2534,10 @@ set_linkage_for_decl (tree decl)\n   if (!TREE_PUBLIC (decl))\n     return;\n \n-  /* Functions declared as `pragma(inline, true)' can appear in multiple\n-     translation units.  */\n-  if (TREE_CODE (decl) == FUNCTION_DECL && DECL_DECLARED_INLINE_P (decl))\n+  /* Function literals and functions declared as `pragma(inline, true)' can\n+     appear in multiple translation units.  */\n+  if (TREE_CODE (decl) == FUNCTION_DECL\n+      && (DECL_DECLARED_INLINE_P (decl) || DECL_LAMBDA_FUNCTION_P (decl)))\n     return d_comdat_linkage (decl);\n \n   /* Don't need to give private or protected symbols a special linkage.  */"}, {"sha": "cec5274098ccb21216ac40f5d260818e051edc45", "filename": "gcc/testsuite/gdc.dg/torture/imports/pr109108.d", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/423d34f61c43e400f0d5b837fe93c83963b2ecdd/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fimports%2Fpr109108.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/423d34f61c43e400f0d5b837fe93c83963b2ecdd/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fimports%2Fpr109108.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fimports%2Fpr109108.d?ref=423d34f61c43e400f0d5b837fe93c83963b2ecdd", "patch": "@@ -0,0 +1,11 @@\n+module imports.pr109108;\n+private enum int function(ref int)[] funs =\n+[\n+    0: (ref idx) => 0,\n+    1: (ref idx) => 1,\n+];\n+\n+int test109108(I)(I idx)\n+{\n+    return funs[idx](idx);\n+}"}, {"sha": "4a428bf85a6c124a67c9823ba0161bdbeb2c6fe8", "filename": "gcc/testsuite/gdc.dg/torture/pr109108.d", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/423d34f61c43e400f0d5b837fe93c83963b2ecdd/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr109108.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/423d34f61c43e400f0d5b837fe93c83963b2ecdd/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr109108.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr109108.d?ref=423d34f61c43e400f0d5b837fe93c83963b2ecdd", "patch": "@@ -0,0 +1,10 @@\n+// { dg-additional-files \"imports/pr109108.d\" }\n+// { dg-additional-options \"-I[srcdir] -fno-moduleinfo\" }\n+// { dg-do link }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import imports.pr109108;\n+\n+extern(C) int main()\n+{\n+    return test109108(0);\n+}"}]}