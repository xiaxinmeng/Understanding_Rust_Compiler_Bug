{"sha": "c0134b7383992aab5c1a91440dbdd8fbb747169c", "node_id": "C_kwDOANBUbNoAKGMwMTM0YjczODM5OTJhYWI1YzFhOTE0NDBkYmRkOGZiYjc0NzE2OWM", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-03-07T21:11:33Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-03-07T21:11:33Z"}, "message": "Fortran: Fix gfc_maybe_dereference_var [PR104430][PR99585]\n\n\tPR fortran/99585\n\tPR fortran/104430\n\ngcc/fortran/ChangeLog:\n\n\t* trans-expr.cc (conv_parent_component_references): Fix comment;\n\tsimplify comparison.\n\t(gfc_maybe_dereference_var): Avoid d referencing a nonpointer.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/class_result_10.f90: New test.", "tree": {"sha": "87826e4663529b063bd93fe9435017d5e2549620", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87826e4663529b063bd93fe9435017d5e2549620"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0134b7383992aab5c1a91440dbdd8fbb747169c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0134b7383992aab5c1a91440dbdd8fbb747169c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0134b7383992aab5c1a91440dbdd8fbb747169c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0134b7383992aab5c1a91440dbdd8fbb747169c/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0af37ad4422052be4b7f779737e14c80e57d0ad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0af37ad4422052be4b7f779737e14c80e57d0ad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0af37ad4422052be4b7f779737e14c80e57d0ad9"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "71d037101d4ec8b580e0012582f29c9eb13b4e6b", "filename": "gcc/fortran/trans-expr.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0134b7383992aab5c1a91440dbdd8fbb747169c/gcc%2Ffortran%2Ftrans-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0134b7383992aab5c1a91440dbdd8fbb747169c/gcc%2Ffortran%2Ftrans-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.cc?ref=c0134b7383992aab5c1a91440dbdd8fbb747169c", "patch": "@@ -2805,9 +2805,9 @@ conv_parent_component_references (gfc_se * se, gfc_ref * ref)\n   dt = ref->u.c.sym;\n   c = ref->u.c.component;\n \n-  /* Return if the component is in the parent type.  */\n+  /* Return if the component is in this type, i.e. not in the parent type.  */\n   for (cmp = dt->components; cmp; cmp = cmp->next)\n-    if (strcmp (c->name, cmp->name) == 0)\n+    if (c == cmp)\n       return;\n \n   /* Build a gfc_ref to recursively call gfc_conv_component_ref.  */\n@@ -2867,6 +2867,8 @@ tree\n gfc_maybe_dereference_var (gfc_symbol *sym, tree var, bool descriptor_only_p,\n \t\t\t   bool is_classarray)\n {\n+  if (!POINTER_TYPE_P (TREE_TYPE (var)))\n+    return var;\n   if (is_CFI_desc (sym, NULL))\n     return build_fold_indirect_ref_loc (input_location, var);\n "}, {"sha": "a4d29ab9c1d32b0e8b0e434b717486066b2ab965", "filename": "gcc/testsuite/gfortran.dg/class_result_10.f90", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0134b7383992aab5c1a91440dbdd8fbb747169c/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_result_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0134b7383992aab5c1a91440dbdd8fbb747169c/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_result_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_result_10.f90?ref=c0134b7383992aab5c1a91440dbdd8fbb747169c", "patch": "@@ -0,0 +1,52 @@\n+! { dg-do run}\n+\n+\n+! PR fortran/99585\n+\n+module m2\n+  type t\n+     class(*), pointer :: bar(:)\n+  end type\n+  type t2\n+     class(t), allocatable :: my(:)\n+  end type t2\n+contains\n+  function f (x, y) result(z)\n+    class(t) :: x(:)\n+    class(t) :: y(size(x(1)%bar))\n+    type(t)  :: z(size(x(1)%bar))\n+  end\n+  function g (x) result(z)\n+    class(t) :: x(:)\n+    type(t)  :: z(size(x(1)%bar))\n+  end\n+  subroutine s ()\n+    class(t2), allocatable :: a(:), b(:), c(:), d(:)\n+    class(t2), pointer     :: p(:)\n+    c(1)%my = f (a(1)%my, b(1)%my)\n+    d(1)%my = g (p(1)%my)\n+  end\n+end\n+\n+! Contributed by  G. Steinmetz:\n+! PR fortran/104430\n+\n+module m\n+   type t\n+      integer :: a\n+   end type\n+contains\n+   function f(x) result(z)\n+      class(t) :: x(:)\n+      type(t) :: z(size(x%a))\n+      z%a = 42\n+   end\n+end\n+program p\n+   use m\n+   class(t), allocatable :: y(:), z(:)\n+   allocate (y(32))\n+   z = f(y)\n+   if (size(z) /= 32) stop 1\n+   if (any (z%a /= 42)) stop 2\n+end"}]}