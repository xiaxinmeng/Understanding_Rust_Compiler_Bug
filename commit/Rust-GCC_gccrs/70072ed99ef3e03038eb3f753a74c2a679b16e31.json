{"sha": "70072ed99ef3e03038eb3f753a74c2a679b16e31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAwNzJlZDk5ZWYzZTAzMDM4ZWIzZjc1M2E3NGMyYTY3OWIxNmUzMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-10-27T21:30:46Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-10-27T21:30:46Z"}, "message": "expr.c (stor_constructor_field): Always call adjust_address.\n\n\t* expr.c (stor_constructor_field): Always call adjust_address.\n\tCopy TARGET before changing its alias set.\n\t(store_field): Likewise, for TO_RTX.\n\t(get_inner_reference): Stop at PLACEHOLDER_EXPR if can't find\n\treplacement.\n\t(safe_from_p, case ADDR_EXPR): Properly check for conflict.\n\t(find_placeholder): Return 0 if can't find object.\n\t(expand_expr, case PLACEHOLDER_EXPR): Abort if find_placeholder\n\treturns 0.\n\nFrom-SVN: r46571", "tree": {"sha": "405578ab51ea1a9fff2cc1bea4d5779bbe7858df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/405578ab51ea1a9fff2cc1bea4d5779bbe7858df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70072ed99ef3e03038eb3f753a74c2a679b16e31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70072ed99ef3e03038eb3f753a74c2a679b16e31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70072ed99ef3e03038eb3f753a74c2a679b16e31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70072ed99ef3e03038eb3f753a74c2a679b16e31/comments", "author": null, "committer": null, "parents": [{"sha": "2bd989ca96bf548213f8ff6b6dbc1f327f005eaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd989ca96bf548213f8ff6b6dbc1f327f005eaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bd989ca96bf548213f8ff6b6dbc1f327f005eaa"}], "stats": {"total": 78, "additions": 62, "deletions": 16}, "files": [{"sha": "441cf8aa12b116b16d98a2f2608fc4ed071d9af0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70072ed99ef3e03038eb3f753a74c2a679b16e31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70072ed99ef3e03038eb3f753a74c2a679b16e31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70072ed99ef3e03038eb3f753a74c2a679b16e31", "patch": "@@ -1,3 +1,15 @@\n+Sat Oct 27 17:32:04 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* expr.c (stor_constructor_field): Always call adjust_address.\n+\tCopy TARGET before changing its alias set.\n+\t(store_field): Likewise, for TO_RTX.\n+\t(get_inner_reference): Stop at PLACEHOLDER_EXPR if can't find\n+\treplacement.\n+\t(safe_from_p, case ADDR_EXPR): Properly check for conflict.\n+\t(find_placeholder): Return 0 if can't find object.\n+\t(expand_expr, case PLACEHOLDER_EXPR): Abort if find_placeholder\n+\treturns 0.\n+\n Sat Oct 27 16:31:23 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* ifcvt.c (if_convert): Call clear_aux_for_blocks."}, {"sha": "cd903641398747a88c695467e9743229834c7fd6", "filename": "gcc/expr.c", "status": "modified", "additions": 50, "deletions": 16, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70072ed99ef3e03038eb3f753a74c2a679b16e31/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70072ed99ef3e03038eb3f753a74c2a679b16e31/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=70072ed99ef3e03038eb3f753a74c2a679b16e31", "patch": "@@ -4472,13 +4472,12 @@ store_constructor_field (target, bitsize, bitpos,\n \t generate unnecessary clear instructions anyways.  */\n       && (bitpos == 0 || GET_CODE (target) == MEM))\n     {\n-      if (bitpos != 0)\n-\ttarget\n-\t  = adjust_address (target,\n-\t\t\t    GET_MODE (target) == BLKmode\n-\t\t\t    || 0 != (bitpos\n-\t\t\t\t     % GET_MODE_ALIGNMENT (GET_MODE (target)))\n-\t\t\t    ? BLKmode : VOIDmode, bitpos / BITS_PER_UNIT);\n+      target\n+\t= adjust_address (target,\n+\t\t\t  GET_MODE (target) == BLKmode\n+\t\t\t  || 0 != (bitpos\n+\t\t\t\t   % GET_MODE_ALIGNMENT (GET_MODE (target)))\n+\t\t\t  ? BLKmode : VOIDmode, bitpos / BITS_PER_UNIT);\n \n \n       /* Show the alignment may no longer be what it was and update the alias\n@@ -4488,7 +4487,10 @@ store_constructor_field (target, bitsize, bitpos,\n \n       if (GET_CODE (target) == MEM && ! MEM_KEEP_ALIAS_SET_P (target)\n \t  && MEM_ALIAS_SET (target) != 0)\n-\tset_mem_alias_set (target, alias_set);\n+\t{\n+\t  target = copy_rtx (target);\n+\t  set_mem_alias_set (target, alias_set);\n+\t}\n \n       store_constructor (exp, target, align, cleared, bitsize / BITS_PER_UNIT);\n     }\n@@ -5354,7 +5356,10 @@ store_field (target, bitsize, bitpos, mode, exp, value_mode,\n \n       MEM_SET_IN_STRUCT_P (to_rtx, 1);\n       if (!MEM_KEEP_ALIAS_SET_P (to_rtx) && MEM_ALIAS_SET (to_rtx) != 0)\n-\tset_mem_alias_set (to_rtx, alias_set);\n+\t{\n+\t  to_rtx = copy_rtx (to_rtx);\n+\t  set_mem_alias_set (to_rtx, alias_set);\n+\t}\n \n       return store_expr (exp, to_rtx, value_mode != VOIDmode);\n     }\n@@ -5502,7 +5507,16 @@ get_inner_reference (exp, pbitsize, pbitpos, poffset, pmode,\n \n       else if (TREE_CODE (exp) == PLACEHOLDER_EXPR)\n \t{\n-\t  exp = find_placeholder (exp, &placeholder_ptr);\n+\t  tree new = find_placeholder (exp, &placeholder_ptr);\n+\n+\t  /* If we couldn't find the replacement, return the PLACEHOLDER_EXPR.\n+\t     We might have been called from tree optimization where we\n+\t     haven't set up an object yet.  */\n+\t  if (new == 0)\n+\t    break;\n+\t  else\n+\t    exp = new;\n+\n \t  continue;\n \t}\n       else if (TREE_CODE (exp) != NON_LVALUE_EXPR\n@@ -5778,9 +5792,26 @@ safe_from_p (x, exp, top_p)\n       switch (TREE_CODE (exp))\n \t{\n \tcase ADDR_EXPR:\n-\t  return (staticp (TREE_OPERAND (exp, 0))\n-\t\t  || TREE_STATIC (exp)\n-\t\t  || safe_from_p (x, TREE_OPERAND (exp, 0), 0));\n+\t  /* If the operand is static or we are static, we can't conflict.\n+\t     Likewise if we don't conflict with the operand at all.  */\n+\t  if (staticp (TREE_OPERAND (exp, 0))\n+\t      || TREE_STATIC (exp)\n+\t      || safe_from_p (x, TREE_OPERAND (exp, 0), 0))\n+\t    return 1;\n+\n+\t  /* Otherwise, the only way this can conflict is if we are taking\n+\t     the address of a DECL a that address if part of X, which is\n+\t     very rare.  */\n+\t  exp = TREE_OPERAND (exp, 0);\n+\t  if (DECL_P (exp))\n+\t    {\n+\t      if (!DECL_RTL_SET_P (exp)\n+\t\t  || GET_CODE (DECL_RTL (exp)) != MEM)\n+\t\treturn 0;\n+\t      else\n+\t\texp_rtl = XEXP (DECL_RTL (exp), 0);\n+\t    }\n+\t  break;\n \n \tcase INDIRECT_REF:\n \t  if (GET_CODE (x) == MEM\n@@ -6023,8 +6054,8 @@ highest_pow2_factor (exp)\n /* Return an object on the placeholder list that matches EXP, a\n    PLACEHOLDER_EXPR.  An object \"matches\" if it is of the type of the\n    PLACEHOLDER_EXPR or a pointer type to it.  For further information, see\n-   tree.def.  If no such object is found, abort.  If PLIST is nonzero, it is\n-   a location which initially points to a starting location in the\n+   tree.def.  If no such object is found, return 0.  If PLIST is nonzero, it\n+   is a location which initially points to a starting location in the\n    placeholder list (zero means start of the list) and where a pointer into\n    the placeholder list at which the object is found is placed.  */\n \n@@ -6083,7 +6114,7 @@ find_placeholder (exp, plist)\n \t  }\n     }\n \n-  abort ();\n+  return 0;\n }\n \f\n /* expand_expr: generate code for computing expression EXP.\n@@ -6617,6 +6648,9 @@ expand_expr (exp, target, tmode, modifier)\n \ttree placeholder_expr = 0;\n \n \texp = find_placeholder (exp, &placeholder_expr);\n+\tif (exp == 0)\n+\t  abort ();\n+\n \tplaceholder_list = TREE_CHAIN (placeholder_expr);\n \ttemp = expand_expr (exp, original_target, tmode, ro_modifier);\n \tplaceholder_list = old_list;"}]}