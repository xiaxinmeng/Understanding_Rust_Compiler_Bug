{"sha": "7a1f094d68561273f94f0934f5fad6c283375b3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ExZjA5NGQ2ODU2MTI3M2Y5NGYwOTM0ZjVmYWQ2YzI4MzM3NWIzZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-12T12:59:15Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-12T12:59:15Z"}, "message": "[multiple changes]\n\n2013-04-12  Doug Rupp  <rupp@adacore.com>\n\n\t* s-fileio.adb: Minor reformatting.\n\n2013-04-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_warn.adb (Check_Infinite_Loop_Warning): Do not warn if\n\tthe last statement in the analyzed loop is an unconditional\n\texit statement.\n\nFrom-SVN: r197903", "tree": {"sha": "c6089e54185fb0a44e0ad15cf8cdbb97fec4f634", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6089e54185fb0a44e0ad15cf8cdbb97fec4f634"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a1f094d68561273f94f0934f5fad6c283375b3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1f094d68561273f94f0934f5fad6c283375b3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a1f094d68561273f94f0934f5fad6c283375b3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1f094d68561273f94f0934f5fad6c283375b3d/comments", "author": null, "committer": null, "parents": [{"sha": "7f18b29a17b0905afb33ab3c0617fc587b766f97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f18b29a17b0905afb33ab3c0617fc587b766f97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f18b29a17b0905afb33ab3c0617fc587b766f97"}], "stats": {"total": 69, "additions": 40, "deletions": 29}, "files": [{"sha": "57dc294c1435334c5c87c9c0f1bc0bed476556a1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1f094d68561273f94f0934f5fad6c283375b3d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1f094d68561273f94f0934f5fad6c283375b3d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7a1f094d68561273f94f0934f5fad6c283375b3d", "patch": "@@ -1,3 +1,13 @@\n+2013-04-12  Doug Rupp  <rupp@adacore.com>\n+\n+\t* s-fileio.adb: Minor reformatting.\n+\n+2013-04-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_warn.adb (Check_Infinite_Loop_Warning): Do not warn if\n+\tthe last statement in the analyzed loop is an unconditional\n+\texit statement.\n+\n 2013-04-12  Robert Dewar  <dewar@adacore.com>\n \n \t* opt.ads (Style_Check_Main): New switch."}, {"sha": "a9e04e8b693aac6d024a28d0fa9007af4697efb9", "filename": "gcc/ada/s-fileio.adb", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1f094d68561273f94f0934f5fad6c283375b3d/gcc%2Fada%2Fs-fileio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1f094d68561273f94f0934f5fad6c283375b3d/gcc%2Fada%2Fs-fileio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.adb?ref=7a1f094d68561273f94f0934f5fad6c283375b3d", "patch": "@@ -29,15 +29,15 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Ada.Finalization;            use Ada.Finalization;\n-with Ada.IO_Exceptions;           use Ada.IO_Exceptions;\n+with Ada.Finalization;  use Ada.Finalization;\n+with Ada.IO_Exceptions; use Ada.IO_Exceptions;\n \n with Interfaces.C;\n-with Interfaces.C.Strings;        use Interfaces.C.Strings;\n-with Interfaces.C_Streams;        use Interfaces.C_Streams;\n+with Interfaces.C.Strings; use Interfaces.C.Strings;\n+with Interfaces.C_Streams; use Interfaces.C_Streams;\n \n with System.CRTL.Runtime;\n-with System.Case_Util;            use System.Case_Util;\n+with System.Case_Util;    use System.Case_Util;\n with System.OS_Lib;\n with System.Soft_Links;\n \n@@ -54,6 +54,7 @@ package body System.File_IO is\n \n    subtype String_Access is System.OS_Lib.String_Access;\n    procedure Free (X : in out String_Access) renames System.OS_Lib.Free;\n+\n    function \"=\" (X, Y : String_Access) return Boolean\n      renames System.OS_Lib.\"=\";\n \n@@ -104,7 +105,7 @@ package body System.File_IO is\n    --  If true, add appropriate suffix to control string for Open\n \n    VMS_Formstr : String_Access := null;\n-   --  For special VMS RMS keywords and values.\n+   --  For special VMS RMS keywords and values\n \n    -----------------------\n    -- Local Subprograms --\n@@ -147,12 +148,12 @@ package body System.File_IO is\n    --  message providing errno information.\n \n    procedure Form_VMS_RMS_Keys (Form : String; VMS_Form : out String_Access);\n-   --   Parse the RMS Keys\n+   --  Parse the RMS Keys\n \n    function Form_RMS_Context_Key\n      (Form     : String;\n       VMS_Form : String_Access) return Natural;\n-   --   Parse the RMS Context Key\n+   --  Parse the RMS Context Key\n \n    ----------------\n    -- Append_Set --\n@@ -531,7 +532,6 @@ package body System.File_IO is\n             Fopstr (1) := (if Creat then 'w' else 'r');\n             Fopstr (2) := '+';\n             Fptr := 3;\n-\n       end case;\n \n       --  If text_translation_required is true then we need to append either a\n@@ -575,13 +575,10 @@ package body System.File_IO is\n \n       if V1 = 0 then\n          return Default;\n-\n       elsif Form (V1) = 'y' then\n          return True;\n-\n       elsif Form (V1) = 'n' then\n          return False;\n-\n       else\n          raise Use_Error with \"invalid Form\";\n       end if;\n@@ -668,7 +665,7 @@ package body System.File_IO is\n       type Context_Parms is\n         (Binary_Data, Convert_Fortran_Carriage_Control, Force_Record_Mode,\n          Force_Stream_Mode, Explicit_Write);\n-   --  Ada-fied list of all possible Context keyword values.\n+      --  Ada-fied list of all possible Context keyword values\n \n       Pos   : Natural := 0;\n       Klen  : Natural := 0;\n@@ -746,9 +743,8 @@ package body System.File_IO is\n       Klen : Natural := VMS_RMS_Keys_Token'Length;\n       Index : Natural;\n \n-      --  Ada-fied list of all RMS keywords, translated from the\n-      --  HP C Run-Time Library Reference Manual, Table REF-3:\n-      --  RMS Valid Keywords and Values\n+      --  Ada-fied list of all RMS keywords, translated from the HP C Run-Time\n+      --  Library Reference Manual, Table REF-3: RMS Valid Keywords and Values.\n \n       type RMS_Keys is\n        (Access_Callback, Allocation_Quantity, Block_Size, Context,\n@@ -788,12 +784,13 @@ package body System.File_IO is\n                      for Key in RMS_Keys loop\n                         declare\n                            KImage : String := RMS_Keys'Image (Key);\n+\n                         begin\n                            Klen := KImage'Length;\n                            To_Lower (KImage);\n+\n                            if Form (Index .. Index + Klen - 1) = KImage then\n                               case Key is\n-\n                                  when Context =>\n                                     Index := Form_RMS_Context_Key\n                                      (Form (Index + Klen .. Form'Last),\n@@ -810,8 +807,7 @@ package body System.File_IO is\n \n                      if Form (Index) = ')' then\n \n-                        --  Done, erase the unneeded trailing comma and\n-                        --  return.\n+                        --  Done, erase the unneeded trailing comma and return\n \n                         for J in reverse VMS_Form'First .. VMS_Form'Last loop\n                            if VMS_Form (J) = ',' then\n@@ -821,22 +817,27 @@ package body System.File_IO is\n                         end loop;\n \n                         --  Shouldn't be possible to get here\n+\n                         raise Use_Error;\n \n                      elsif Form (Index) = ',' then\n \n                         --  Another key ahead, exit inner loop\n+\n                         null;\n+\n                      else\n \n                         --  Keyword value not terminated correctly\n+\n                         raise Use_Error with \"malformed VMS RMS Form\";\n                      end if;\n                   end loop;\n                end if;\n             end if;\n \n             --  Found the keyword, but not followed by correct syntax\n+\n             raise Use_Error with \"malformed VMS RMS Form\";\n          end if;\n       end loop;\n@@ -1024,13 +1025,10 @@ package body System.File_IO is\n \n          if V1 = 0 then\n             Shared := None;\n-\n          elsif Formstr (V1 .. V2) = \"yes\" then\n             Shared := Yes;\n-\n          elsif Formstr (V1 .. V2) = \"no\" then\n             Shared := No;\n-\n          else\n             raise Use_Error with \"invalid Form\";\n          end if;\n@@ -1046,13 +1044,10 @@ package body System.File_IO is\n \n          if V1 = 0 then\n             Encoding := CRTL.Unspecified;\n-\n          elsif Formstr (V1 .. V2) = \"utf8\" then\n             Encoding := CRTL.UTF8;\n-\n          elsif Formstr (V1 .. V2) = \"8bits\" then\n             Encoding := CRTL.ASCII_8bits;\n-\n          else\n             raise Use_Error with \"invalid Form\";\n          end if;\n@@ -1314,7 +1309,8 @@ package body System.File_IO is\n    ------------------------\n \n    procedure Raise_Device_Error\n-     (File : AFCB_Ptr; Errno : Integer := OS_Lib.Errno)\n+     (File  : AFCB_Ptr;\n+      Errno : Integer := OS_Lib.Errno)\n    is\n    begin\n       --  Clear error status so that the same error is not reported twice\n@@ -1348,7 +1344,6 @@ package body System.File_IO is\n       else -- 0 < Nread < Siz\n          raise Data_Error with \"not enough data read\";\n       end if;\n-\n    end Read_Buf;\n \n    procedure Read_Buf\n@@ -1440,7 +1435,6 @@ package body System.File_IO is\n          if File.Stream = NULL_Stream then\n             Close (File_Ptr);\n             raise Use_Error;\n-\n          else\n             File.Mode := Mode;\n             Append_Set (File);"}, {"sha": "2d4475144a2416c355e82e718fc9aec5f0663e53", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1f094d68561273f94f0934f5fad6c283375b3d/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1f094d68561273f94f0934f5fad6c283375b3d/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=7a1f094d68561273f94f0934f5fad6c283375b3d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1999-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -643,6 +643,13 @@ package body Sem_Warn is\n                else\n                   Expression := Condition (Exit_Stmt);\n                end if;\n+\n+            --  If an unconditional exit statement is the last statement in the\n+            --  loop assume that no warning is needed. without any attempt at\n+            --  checking whether the exit is reachable.\n+\n+            elsif Exit_Stmt = Last (Statements (Loop_Statement)) then\n+               return;\n             end if;\n \n             Exit_Stmt := Next_Exit_Statement (Exit_Stmt);"}]}