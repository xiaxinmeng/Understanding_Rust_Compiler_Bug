{"sha": "6a8f4e12f5e44e292123c7424f703f8a7206e3a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE4ZjRlMTJmNWU0NGUyOTIxMjNjNzQyNGY3MDNmOGE3MjA2ZTNhNQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@gmail.com", "date": "2010-06-08T03:56:40Z"}, "committer": {"name": "Shujing Zhao", "email": "pzhao@gcc.gnu.org", "date": "2010-06-08T03:56:40Z"}, "message": "re PR c/37724 (\"initialization from incompatible pointer type\" does not say which field is being initialized)\n\ngcc/\n2010-06-08  Andrew Pinski <pinskia@gmail.com>\n            Shujing Zhao  <pearly.zhao@oracle.com>\n\n        PR c/37724\n        * c-typeck.c (convert_for_assignment): Call pedwarn_init if the\n        implicit bad conversions is initialization.\n        (error_init): Use gmsgid instead of msgid for argument name and change\n        the call for error.\n        (pedwarn_init): Use gmsgid instead of msgid for argument name and\n        change the call for pedwarn.\n        (warning_init): Use gmsgid instead of msgid for argument name and\n        change the call for warning.\n\ngcc/testsuite/\n2010-06-08  Andrew Pinski <pinskia@gmail.com>\n            Shujing Zhao  <pearly.zhao@oracle.com>\n\n        PR c/37724\n        * gcc.dg/c90-const-expr-10.c: Adjust.\n        * gcc.dg/c99-const-expr-10.c: Adjust.\n        * gcc.dg/init-bad-7.c: New.\n\nFrom-SVN: r160418", "tree": {"sha": "b977e0467d5267b3458fe2a20c3d142eb7180965", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b977e0467d5267b3458fe2a20c3d142eb7180965"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a8f4e12f5e44e292123c7424f703f8a7206e3a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a8f4e12f5e44e292123c7424f703f8a7206e3a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a8f4e12f5e44e292123c7424f703f8a7206e3a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a8f4e12f5e44e292123c7424f703f8a7206e3a5/comments", "author": {"login": "pinskia", "id": 8496799, "node_id": "MDQ6VXNlcjg0OTY3OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8496799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pinskia", "html_url": "https://github.com/pinskia", "followers_url": "https://api.github.com/users/pinskia/followers", "following_url": "https://api.github.com/users/pinskia/following{/other_user}", "gists_url": "https://api.github.com/users/pinskia/gists{/gist_id}", "starred_url": "https://api.github.com/users/pinskia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pinskia/subscriptions", "organizations_url": "https://api.github.com/users/pinskia/orgs", "repos_url": "https://api.github.com/users/pinskia/repos", "events_url": "https://api.github.com/users/pinskia/events{/privacy}", "received_events_url": "https://api.github.com/users/pinskia/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c8061de73f1ec2db31588f1c20693d570d576a20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8061de73f1ec2db31588f1c20693d570d576a20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8061de73f1ec2db31588f1c20693d570d576a20"}], "stats": {"total": 63, "additions": 49, "deletions": 14}, "files": [{"sha": "af5337296c2466f20b8d12919da7136182784f26", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a8f4e12f5e44e292123c7424f703f8a7206e3a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a8f4e12f5e44e292123c7424f703f8a7206e3a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a8f4e12f5e44e292123c7424f703f8a7206e3a5", "patch": "@@ -1,6 +1,19 @@\n+2010-06-08  Andrew Pinski <pinskia@gmail.com>\n+\t    Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\tPR c/37724\n+\t* c-typeck.c (convert_for_assignment): Call pedwarn_init if the\n+\timplicit bad conversions is initialization.\n+\t(error_init): Use gmsgid instead of msgid for argument name and change\n+\tthe call for error.\n+\t(pedwarn_init): Use gmsgid instead of msgid for argument name and\n+\tchange the call for pedwarn.\n+\t(warning_init): Use gmsgid instead of msgid for argument name and\n+\tchange the call for warning.\n+\n 2010-06-07  Nathan Froyd  <froydnj@codesourcery.com>\n \n-        * config/mips/mips-protos.h (mips_print_operand): Delete.\n+\t* config/mips/mips-protos.h (mips_print_operand): Delete.\n \t(mips_print_operand_address): Delete.\n \t* config/mips/mips.h (mips_print_operand_punct): Delete.\n \t(PRINT_OPERAND): Delete."}, {"sha": "b2d3986e185f9579b166809587244e43d1fa812f", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a8f4e12f5e44e292123c7424f703f8a7206e3a5/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a8f4e12f5e44e292123c7424f703f8a7206e3a5/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=6a8f4e12f5e44e292123c7424f703f8a7206e3a5", "patch": "@@ -5011,7 +5011,7 @@ convert_for_assignment (location_t location, tree type, tree rhs,\n         pedwarn (LOCATION, OPT, AS);                                     \\\n         break;                                                           \\\n       case ic_init:                                                      \\\n-        pedwarn (LOCATION, OPT, IN);                                     \\\n+        pedwarn_init (LOCATION, OPT, IN);                                \\\n         break;                                                           \\\n       case ic_return:                                                    \\\n         pedwarn (LOCATION, OPT, RE);                                 \t \\\n@@ -5785,31 +5785,33 @@ print_spelling (char *buffer)\n }\n \n /* Issue an error message for a bad initializer component.\n-   MSGID identifies the message.\n+   GMSGID identifies the message.\n    The component name is taken from the spelling stack.  */\n \n void\n-error_init (const char *msgid)\n+error_init (const char *gmsgid)\n {\n   char *ofwhat;\n \n-  error (\"%s\", _(msgid));\n+  /* The gmsgid may be a format string with %< and %>. */\n+  error (gmsgid);\n   ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n   if (*ofwhat)\n     error (\"(near initialization for %qs)\", ofwhat);\n }\n \n /* Issue a pedantic warning for a bad initializer component.  OPT is\n    the option OPT_* (from options.h) controlling this warning or 0 if\n-   it is unconditionally given.  MSGID identifies the message.  The\n+   it is unconditionally given.  GMSGID identifies the message.  The\n    component name is taken from the spelling stack.  */\n \n void\n-pedwarn_init (location_t location, int opt, const char *msgid)\n+pedwarn_init (location_t location, int opt, const char *gmsgid)\n {\n   char *ofwhat;\n-\n-  pedwarn (location, opt, \"%s\", _(msgid));\n+  \n+  /* The gmsgid may be a format string with %< and %>. */\n+  pedwarn (location, opt, gmsgid);\n   ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n   if (*ofwhat)\n     pedwarn (location, opt, \"(near initialization for %qs)\", ofwhat);\n@@ -5818,15 +5820,16 @@ pedwarn_init (location_t location, int opt, const char *msgid)\n /* Issue a warning for a bad initializer component.\n \n    OPT is the OPT_W* value corresponding to the warning option that\n-   controls this warning.  MSGID identifies the message.  The\n+   controls this warning.  GMSGID identifies the message.  The\n    component name is taken from the spelling stack.  */\n \n static void\n-warning_init (int opt, const char *msgid)\n+warning_init (int opt, const char *gmsgid)\n {\n   char *ofwhat;\n \n-  warning (opt, \"%s\", _(msgid));\n+  /* The gmsgid may be a format string with %< and %>. */\n+  warning (opt, gmsgid);\n   ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n   if (*ofwhat)\n     warning (opt, \"(near initialization for %qs)\", ofwhat);"}, {"sha": "a9b9c7a9c183c3b6acef531af7064ab2c94125ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a8f4e12f5e44e292123c7424f703f8a7206e3a5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a8f4e12f5e44e292123c7424f703f8a7206e3a5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6a8f4e12f5e44e292123c7424f703f8a7206e3a5", "patch": "@@ -1,3 +1,11 @@\n+2010-06-08  Andrew Pinski <pinskia@gmail.com>\n+\t    Shujing Zhao  <pearly.zhao@oracle.com>\n+\t\n+\tPR c/37724\n+\t* gcc.dg/c90-const-expr-10.c: Adjust.\n+\t* gcc.dg/c99-const-expr-10.c: Adjust.\n+\t* gcc.dg/init-bad-7.c: New.\n+\n 2010-06-07  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* lib/target-supports.exp (check_effective_target_gas): New proc."}, {"sha": "30c60e31f90568a08d55b229020e609a873b7c98", "filename": "gcc/testsuite/gcc.dg/c90-const-expr-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a8f4e12f5e44e292123c7424f703f8a7206e3a5/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a8f4e12f5e44e292123c7424f703f8a7206e3a5/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-10.c?ref=6a8f4e12f5e44e292123c7424f703f8a7206e3a5", "patch": "@@ -8,7 +8,7 @@\n __extension__ typedef __SIZE_TYPE__ size_t;\n \n void *p = (size_t)(void *)0; /* { dg-error \"without a cast\" } */\n-struct s { void *a; } q = { (size_t)(void *)0 }; /* { dg-error \"without a cast\" } */\n+struct s { void *a; } q = { (size_t)(void *)0 }; /* { dg-error \"without a cast|near initialization\" } */\n void *\n f (void)\n {"}, {"sha": "2aca6106a47b65167e95ad04bb1787f56eb20f98", "filename": "gcc/testsuite/gcc.dg/c99-const-expr-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a8f4e12f5e44e292123c7424f703f8a7206e3a5/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a8f4e12f5e44e292123c7424f703f8a7206e3a5/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-10.c?ref=6a8f4e12f5e44e292123c7424f703f8a7206e3a5", "patch": "@@ -6,7 +6,7 @@\n /* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n \n void *p = (__SIZE_TYPE__)(void *)0; /* { dg-error \"without a cast\" } */\n-struct s { void *a; } q = { (__SIZE_TYPE__)(void *)0 }; /* { dg-error \"without a cast\" } */\n+struct s { void *a; } q = { (__SIZE_TYPE__)(void *)0 }; /* { dg-error \"without a cast|near initialization\" } */\n void *\n f (void)\n {"}, {"sha": "738ed605060d80c88b7eba28b50ddaa38eecac1a", "filename": "gcc/testsuite/gcc.dg/init-bad-7.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a8f4e12f5e44e292123c7424f703f8a7206e3a5/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a8f4e12f5e44e292123c7424f703f8a7206e3a5/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-7.c?ref=6a8f4e12f5e44e292123c7424f703f8a7206e3a5", "patch": "@@ -0,0 +1,11 @@\n+/* PR c/37724 */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -pedantic\" } */\n+\n+struct f\n+{\n+  int *a;\n+};\n+\n+char b[10];\n+struct f g = {b}; /* { dg-warning \"initialization from incompatible pointer type|near initialization for\" } */"}]}