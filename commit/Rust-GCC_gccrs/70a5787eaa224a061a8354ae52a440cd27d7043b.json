{"sha": "70a5787eaa224a061a8354ae52a440cd27d7043b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBhNTc4N2VhYTIyNGEwNjFhODM1NGFlNTJhNDQwY2QyN2Q3MDQzYg==", "commit": {"author": {"name": "Stephane Carrez", "email": "Stephane.Carrez@worldnet.fr", "date": "2001-08-03T21:01:06Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2001-08-03T21:01:06Z"}, "message": "t-m68hc11-gas (T_CPPFLAGS): Add _ctor and _dtor.\n\n\t* config/m68hc11/t-m68hc11-gas (T_CPPFLAGS): Add _ctor and _dtor.\n\t* config/m68hc11/larith.asm (_exit): Split in several sub-sections\n\tmerged by linker script to get a final _exit().\n\t(__do_global_dtors): New for destructor handling in specific exit\n\tsection.\n\t(__do_global_ctors): New for constructors in specific install section.\n\t(__map_data_section): Map data sections before running constructors.\n\t* config/m68hc11/m68hc11.h (INT_ASM_OP): Define to use .word.\n\t(CTORS_SECTION_ASM_OP): Define to put in readonly section.\n\t(DTORS_SECTION_ASM_OP): Likewise.\n\t(CTORS_SECTION_FUNCTION): Define to force a reference to\n\t__do_global_ctors.\n\t(DTORS_SECTION_FUNCTION): Likewise for __do_global_dtors.\n\nFrom-SVN: r44611", "tree": {"sha": "62fdc135c6be345d1a3b3229325ea553072e22ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62fdc135c6be345d1a3b3229325ea553072e22ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70a5787eaa224a061a8354ae52a440cd27d7043b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70a5787eaa224a061a8354ae52a440cd27d7043b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70a5787eaa224a061a8354ae52a440cd27d7043b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70a5787eaa224a061a8354ae52a440cd27d7043b/comments", "author": null, "committer": null, "parents": [{"sha": "9ebeebda15abeeca2727b09e7cbc7b27aeef736d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ebeebda15abeeca2727b09e7cbc7b27aeef736d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ebeebda15abeeca2727b09e7cbc7b27aeef736d"}], "stats": {"total": 139, "additions": 133, "deletions": 6}, "files": [{"sha": "d1a26c176c8288c8e3eee7bd2a814725583fb179", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a5787eaa224a061a8354ae52a440cd27d7043b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a5787eaa224a061a8354ae52a440cd27d7043b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70a5787eaa224a061a8354ae52a440cd27d7043b", "patch": "@@ -1,3 +1,19 @@\n+2001-08-03  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n+\n+\t* config/m68hc11/t-m68hc11-gas (T_CPPFLAGS): Add _ctor and _dtor.\n+\t* config/m68hc11/larith.asm (_exit): Split in several sub-sections\n+\tmerged by linker script to get a final _exit().\n+\t(__do_global_dtors): New for destructor handling in specific exit\n+\tsection.\n+\t(__do_global_ctors): New for constructors in specific install section.\n+\t(__map_data_section): Map data sections before running constructors.\n+\t* config/m68hc11/m68hc11.h (INT_ASM_OP): Define to use .word.\n+\t(CTORS_SECTION_ASM_OP): Define to put in readonly section.\n+\t(DTORS_SECTION_ASM_OP): Likewise.\n+\t(CTORS_SECTION_FUNCTION): Define to force a reference to\n+\t__do_global_ctors.\n+\t(DTORS_SECTION_FUNCTION): Likewise for __do_global_dtors.\n+\n 2001-08-03  Daniel Berlin  <dan@cgsoftware.com>\n         \n \t* ChangeLog: Fix date on previous ChangeLog entry for GCSE."}, {"sha": "4c24dccfa82b49c1d1d1c98b9529e09de42b8313", "filename": "gcc/config/m68hc11/larith.asm", "status": "modified", "additions": 69, "deletions": 5, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a5787eaa224a061a8354ae52a440cd27d7043b/gcc%2Fconfig%2Fm68hc11%2Flarith.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a5787eaa224a061a8354ae52a440cd27d7043b/gcc%2Fconfig%2Fm68hc11%2Flarith.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Flarith.asm?ref=70a5787eaa224a061a8354ae52a440cd27d7043b", "patch": "@@ -179,13 +179,26 @@ __premain:\n ;;\n ;; Exit operation.  Just loop forever and wait for interrupts.\n ;; (no other place to go)\n+;; This operation is split in several pieces collected together by\n+;; the linker script.  This allows to support destructors at the\n+;; exit stage while not impacting program sizes when there is no\n+;; destructors.\n ;;\n-\t.sect .text\n-\t.globl _exit\t\n+;; _exit:\n+;;    *(.fini0)\t\t/* Beginning of finish code (_exit symbol).  */\n+;;    *(.fini1)\t\t/* Place holder for applications.  */\n+;;    *(.fini2)\t\t/* C++ destructors.  */\n+;;    *(.fini3)\t\t/* Place holder for applications.  */\n+;;    *(.fini4)\t\t/* Runtime exit.  */\n+;;\n+\t.sect .fini0,\"ax\",@progbits\n+\t.globl _exit\n \t.globl exit\n \t.weak  exit\n exit:\n _exit:\n+\n+\t.sect .fini4,\"ax\",@progbits\n fatal:\n \tcli\n \twai\n@@ -1035,7 +1048,7 @@ A_low_B_low:\n \n #ifdef L_map_data\n \n-\t.sect\t.install3,\"ax\",@progbits\n+\t.sect\t.install2,\"ax\",@progbits\n \t.globl\t__map_data_section\n \n __map_data_section:\n@@ -1063,7 +1076,7 @@ Done:\n \n #ifdef L_init_bss\n \n-\t.sect\t.install3,\"ax\",@progbits\n+\t.sect\t.install2,\"ax\",@progbits\n \t.globl\t__init_bss_section\n \n __init_bss_section:\n@@ -1083,7 +1096,58 @@ Loop:\n Done:\n \n #endif\n-\t\n+\n+#ifdef L_ctor\n+\n+; End of constructor table\n+\t.sect\t.install3,\"ax\",@progbits\n+\t.globl\t__do_global_ctors\n+\n+__do_global_ctors:\n+\t; Start from the end - sizeof(void*)\n+\tldx\t#__CTOR_END__-2\n+ctors_loop:\n+\tcpx\t#__CTOR_LIST__\n+\tblt\tctors_done\n+\tpshx\n+\tldx\t0,x\n+\tjsr\t0,x\n+\tpulx\n+\tdex\n+\tdex\n+\tbra\tctors_loop\n+ctors_done:\n+\n+#endif\n+\n+#ifdef L_dtor\n+\n+\t.sect\t.fini3,\"ax\",@progbits\n+\t.globl\t__do_global_dtors\n+\n+;;\n+;; This piece of code is inserted in the _exit() code by the linker.\n+;;\n+__do_global_dtors:\n+\tpshb\t; Save exit code\n+\tpsha\n+\tldx\t#__DTOR_LIST__\n+dtors_loop:\n+\tcpx\t#__DTOR_END__\n+\tbge\tdtors_done\n+\tpshx\n+\tldx\t0,x\n+\tjsr\t0,x\n+\tpulx\n+\tinx\n+\tinx\n+\tbra\tdtors_loop\n+dtors_done:\n+\tpula\t; Restore exit code\n+\tpulb\n+\n+#endif\n+\n ;-----------------------------------------\n ; end required gcclib code\n ;-----------------------------------------"}, {"sha": "777fb886b03b7327801f0ecab4d04c808019a39a", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a5787eaa224a061a8354ae52a440cd27d7043b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a5787eaa224a061a8354ae52a440cd27d7043b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=70a5787eaa224a061a8354ae52a440cd27d7043b", "patch": "@@ -1580,6 +1580,52 @@ do {                                                                    \\\n /* Output before uninitialized data.  */\n #define BSS_SECTION_ASM_OP \t(\"\\t.sect\\t.bss\")\n \n+/* This is the pseudo-op used to generate a reference to a specific\n+   symbol in some section.  It is only used in machine-specific\n+   configuration files, typically only in ASM_OUTPUT_CONSTRUCTOR and\n+   ASM_OUTPUT_DESTRUCTOR.  This is the same for all known svr4\n+   assemblers, except those in targets that don't use 32-bit pointers.\n+   Those should override INT_ASM_OP.  Yes, the name of the macro is\n+   misleading.  */\n+#undef INT_ASM_OP\n+#define INT_ASM_OP\t\t\"\\t.word\\t\"\n+\n+/* Define the pseudo-ops used to switch to the .ctors and .dtors sections.\n+\n+   Same as config/elfos.h but don't mark these section SHF_WRITE since\n+   there is no shared library problem.  */\n+#undef CTORS_SECTION_ASM_OP\n+#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"a\\\"\"\n+\n+#undef DTORS_SECTION_ASM_OP\n+#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"a\\\"\"\n+\n+#undef CTORS_SECTION_FUNCTION\n+#define CTORS_SECTION_FUNCTION\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+ctors_section ()\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_ctors)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"\\t.globl\\t__do_global_ctors\\n\");\t\\\n+      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\\\n+      in_section = in_ctors;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+#undef DTORS_SECTION_FUNCTION\n+#define DTORS_SECTION_FUNCTION\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+dtors_section ()\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_dtors)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"\\t.globl\\t__do_global_dtors\\n\");\t\\\n+      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\\\n+      in_section = in_dtors;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n /* This is how to begin an assembly language file.  Most svr4 assemblers want\n    at least a .file directive to come first, and some want to see a .version\n    directive come right after that.  Here we just establish a default"}, {"sha": "7dd74456d5743c311fb849c4897610f62b27e419", "filename": "gcc/config/m68hc11/t-m68hc11-gas", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a5787eaa224a061a8354ae52a440cd27d7043b/gcc%2Fconfig%2Fm68hc11%2Ft-m68hc11-gas", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a5787eaa224a061a8354ae52a440cd27d7043b/gcc%2Fconfig%2Fm68hc11%2Ft-m68hc11-gas", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Ft-m68hc11-gas?ref=70a5787eaa224a061a8354ae52a440cd27d7043b", "patch": "@@ -24,7 +24,8 @@ LIB1ASMFUNCS = _mulsi3 \\\n \t_regs_d3_4 _regs_d5_6 _regs_d7_8 _regs_d9_16 _regs_d17_32 \\\n \t_premain __exit _abort _cleanup \\\n \t_adddi3 _subdi3 _notdi2 \\\n-\t_ashrhi3 _lshrhi3 _lshlhi3 _ashrqi3 _lshlqi3 _map_data _init_bss\n+\t_ashrhi3 _lshrhi3 _lshlhi3 _ashrqi3 _lshlqi3 _map_data _init_bss \\\n+\t_ctor _dtor\n \n TARGET_LIBGCC2_CFLAGS = -DUSE_GAS -DIN_GCC\n "}]}