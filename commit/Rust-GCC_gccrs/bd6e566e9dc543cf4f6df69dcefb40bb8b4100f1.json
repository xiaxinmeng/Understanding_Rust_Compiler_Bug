{"sha": "bd6e566e9dc543cf4f6df69dcefb40bb8b4100f1", "node_id": "C_kwDOANBUbNoAKGJkNmU1NjZlOWRjNTQzY2Y0ZjZkZjY5ZGNlZmI0MGJiOGI0MTAwZjE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-14T08:42:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-14T12:46:30Z"}, "message": "Remove variables only used with .DEFERRED_INIT\n\nIn PR109087 it was noticed that we rely on DSE to remove .DEFERRED_INIT\nwhen it is the only remaining use of a variable.  Since DSE is imperfect\nand even if it were not would be limited by the amount of statements to\nwalk the following enhances the unused var removal pass to handle\n.DEFERRED_INIT like CLOBBERs, thus we do not keep local variables just\nbecause they are deferred initialized.\n\n\t* tree-ssa-live.cc (remove_unused_locals): Do not treat\n\tthe .DEFERRED_INIT of a variable as use, instead remove\n\tthat if it is the only use.\n\n\t* gcc.dg/auto-init-unused-1.c: New testcase.", "tree": {"sha": "cf763b71e176fddae80cf7af4d80c2f8704e20f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf763b71e176fddae80cf7af4d80c2f8704e20f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd6e566e9dc543cf4f6df69dcefb40bb8b4100f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd6e566e9dc543cf4f6df69dcefb40bb8b4100f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd6e566e9dc543cf4f6df69dcefb40bb8b4100f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd6e566e9dc543cf4f6df69dcefb40bb8b4100f1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67839c562779081936cb79ebca156ef43d70f65f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67839c562779081936cb79ebca156ef43d70f65f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67839c562779081936cb79ebca156ef43d70f65f"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "b7d44e6b4f2a84581760120600ee45f38c326fa2", "filename": "gcc/testsuite/gcc.dg/auto-init-unused-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd6e566e9dc543cf4f6df69dcefb40bb8b4100f1/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-unused-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd6e566e9dc543cf4f6df69dcefb40bb8b4100f1/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-unused-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-unused-1.c?ref=bd6e566e9dc543cf4f6df69dcefb40bb8b4100f1", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ftrivial-auto-var-init=zero -fdump-tree-ssa\" } */\n+\n+int a;\n+int foo (void);\n+int bar (void);\n+\n+void\n+baz (void)\n+{\n+  int *b[6];\n+  if (foo ())\n+    a |= bar ();\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"DEFERRED_INIT\" \"ssa\" } } */"}, {"sha": "9118e82b4f1bf9fcf356349c078ab53dcfe55f49", "filename": "gcc/tree-ssa-live.cc", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd6e566e9dc543cf4f6df69dcefb40bb8b4100f1/gcc%2Ftree-ssa-live.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd6e566e9dc543cf4f6df69dcefb40bb8b4100f1/gcc%2Ftree-ssa-live.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.cc?ref=bd6e566e9dc543cf4f6df69dcefb40bb8b4100f1", "patch": "@@ -813,6 +813,12 @@ remove_unused_locals (void)\n \t      continue;\n \t    }\n \n+\t  if (gimple_call_internal_p (stmt, IFN_DEFERRED_INIT))\n+\t    {\n+\t      have_local_clobbers = true;\n+\t      continue;\n+\t    }\n+\n \t  if (b)\n \t    TREE_USED (b) = true;\n \n@@ -856,7 +862,7 @@ remove_unused_locals (void)\n      to remove them if they are the only references to a local variable,\n      but we want to retain them when there's any other.  So the first pass\n      ignores them, and the second pass (if there were any) tries to remove\n-     them.  */\n+     them.  We do the same for .DEFERRED_INIT.  */\n   if (have_local_clobbers)\n     FOR_EACH_BB_FN (bb, cfun)\n       {\n@@ -888,6 +894,19 @@ remove_unused_locals (void)\n \t\tif (b)\n \t\t  TREE_USED (b) = true;\n \t      }\n+\t    else if (gimple_call_internal_p (stmt, IFN_DEFERRED_INIT))\n+\t      {\n+\t\ttree lhs = gimple_call_lhs (stmt);\n+\t\tif (DECL_P (lhs) && !is_used_p (lhs))\n+\t\t  {\n+\t\t    unlink_stmt_vdef (stmt);\n+\t\t    gsi_remove (&gsi, true);\n+\t\t    release_defs (stmt);\n+\t\t    continue;\n+\t\t  }\n+\t\tif (b)\n+\t\t  TREE_USED (b) = true;\n+\t      }\n \t    else if (gimple_debug_bind_p (stmt))\n \t      {\n \t\ttree var = gimple_debug_bind_get_var (stmt);"}]}