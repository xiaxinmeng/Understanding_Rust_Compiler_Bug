{"sha": "341573406b392f4d57e052ce22f80e85a7c479e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQxNTczNDA2YjM5MmY0ZDU3ZTA1MmNlMjJmODBlODVhN2M0NzllOQ==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2020-08-03T11:03:17Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2020-08-03T11:03:17Z"}, "message": "AArch64: Fix hwasan failure in readline.\n\nMy previous fix added an unchecked call to fgets in the new function readline.\nfgets can fail when there's an error reading the file in which case it returns\nNULL.  It also returns NULL when the next character is EOF.\n\nThe EOF case is already covered by the existing code but the error case isn't.\nThis fixes it by returning the empty string on error.\n\nAlso I now use strnlen instead of strlen to make sure we never read outside the\nbuffer.\n\nThis was flagged by Matthew Malcomson during his hwasan work.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/driver-aarch64.c (readline): Check return value fgets.", "tree": {"sha": "8725f5eb73cfacc8688e04059387f26f88d729ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8725f5eb73cfacc8688e04059387f26f88d729ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/341573406b392f4d57e052ce22f80e85a7c479e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/341573406b392f4d57e052ce22f80e85a7c479e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/341573406b392f4d57e052ce22f80e85a7c479e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/341573406b392f4d57e052ce22f80e85a7c479e9/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2ec836aa1d6e2ed4fe286ffa661050888f652d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ec836aa1d6e2ed4fe286ffa661050888f652d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2ec836aa1d6e2ed4fe286ffa661050888f652d1"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "d68a725899a7256a5541d547acb120a98fbc7c0a", "filename": "gcc/config/aarch64/driver-aarch64.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341573406b392f4d57e052ce22f80e85a7c479e9/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341573406b392f4d57e052ce22f80e85a7c479e9/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c?ref=341573406b392f4d57e052ce22f80e85a7c479e9", "patch": "@@ -191,10 +191,16 @@ readline (FILE *f)\n       size += buf_size;\n       buf = (char*) xrealloc (buf, size);\n       gcc_assert (buf);\n-      fgets (buf + last, buf_size, f);\n+      /* If fgets fails it returns NULL, but if it reaches EOF\n+\t with 0 characters read it also returns EOF.  However\n+\t the condition on the loop would have broken out of the\n+\t loop in that case,  and if we are in the first iteration\n+\t then the empty string is the correct thing to return.  */\n+      if (!fgets (buf + last, buf_size, f))\n+\treturn std::string ();\n       /* If we're not at the end of the line then override the\n \t \\0 added by fgets.  */\n-      last = strlen (buf) - 1;\n+      last = strnlen (buf, size) - 1;\n     }\n   while (!feof (f) && buf[last] != '\\n');\n "}]}