{"sha": "fd29bdaffea19f0aac0be23bec5b8bb2b52054da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQyOWJkYWZmZWExOWYwYWFjMGJlMjNiZWM1YjhiYjJiNTIwNTRkYQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-09T14:21:10Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-09T14:21:10Z"}, "message": "pa-protos.h (function_arg): Delete.\n\n\t* config/pa/pa-protos.h (function_arg): Delete.\n\t* config/pa/pa.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n\t* config/pa/pa.c (function_arg): Rename to...\n\t(pa_function_arg): ...this.  Make static.  Take a const_tree and\n\ta bool.\n\t(pa_function_arg_advance): New function.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r165228", "tree": {"sha": "37228f806eb88eef5cddab82726449cc9f806726", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37228f806eb88eef5cddab82726449cc9f806726"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd29bdaffea19f0aac0be23bec5b8bb2b52054da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd29bdaffea19f0aac0be23bec5b8bb2b52054da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd29bdaffea19f0aac0be23bec5b8bb2b52054da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd29bdaffea19f0aac0be23bec5b8bb2b52054da/comments", "author": null, "committer": null, "parents": [{"sha": "13d3961c1535b422ee56e2eb8350b4960d603c5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13d3961c1535b422ee56e2eb8350b4960d603c5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13d3961c1535b422ee56e2eb8350b4960d603c5a"}], "stats": {"total": 62, "additions": 38, "deletions": 24}, "files": [{"sha": "9c2e1cac1d523d2d1a52d0a58747369a4b43ca8a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd29bdaffea19f0aac0be23bec5b8bb2b52054da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd29bdaffea19f0aac0be23bec5b8bb2b52054da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd29bdaffea19f0aac0be23bec5b8bb2b52054da", "patch": "@@ -1,3 +1,13 @@\n+2010-10-09  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/pa/pa-protos.h (function_arg): Delete.\n+\t* config/pa/pa.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n+\t* config/pa/pa.c (function_arg): Rename to...\n+\t(pa_function_arg): ...this.  Make static.  Take a const_tree and\n+\ta bool.\n+\t(pa_function_arg_advance): New function.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-10-09  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/m68k/m68k.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete."}, {"sha": "085b6489cb753c48ce09e7698dc6460c8e40b002", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd29bdaffea19f0aac0be23bec5b8bb2b52054da/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd29bdaffea19f0aac0be23bec5b8bb2b52054da/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=fd29bdaffea19f0aac0be23bec5b8bb2b52054da", "patch": "@@ -151,10 +151,6 @@ extern int cmpib_comparison_operator (rtx, enum machine_mode);\n /* Miscellaneous functions in pa.c.  */\n #ifdef TREE_CODE\n extern int reloc_needed (tree);\n-#ifdef RTX_CODE\n-extern rtx function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n-\t\t\t tree, int);\n-#endif\n extern bool pa_return_in_memory (const_tree, const_tree);\n #endif /* TREE_CODE */\n "}, {"sha": "08d63e5125567acd7a80b01b8c78037e0b7d834f", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd29bdaffea19f0aac0be23bec5b8bb2b52054da/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd29bdaffea19f0aac0be23bec5b8bb2b52054da/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=fd29bdaffea19f0aac0be23bec5b8bb2b52054da", "patch": "@@ -160,6 +160,10 @@ static bool pa_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t  const_tree, bool);\n static int pa_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t tree, bool);\n+static void pa_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t     const_tree, bool);\n+static rtx pa_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t    const_tree, bool);\n static struct machine_function * pa_init_machine_status (void);\n static reg_class_t pa_secondary_reload (bool, rtx, reg_class_t,\n \t\t\t\t\tenum machine_mode,\n@@ -334,6 +338,10 @@ static size_t n_deferred_plabels = 0;\n #define TARGET_CALLEE_COPIES hook_bool_CUMULATIVE_ARGS_mode_tree_bool_true\n #undef TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES pa_arg_partial_bytes\n+#undef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG pa_function_arg\n+#undef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE pa_function_arg_advance\n \n #undef TARGET_EXPAND_BUILTIN_SAVEREGS\n #define TARGET_EXPAND_BUILTIN_SAVEREGS hppa_builtin_saveregs\n@@ -9365,6 +9373,23 @@ pa_function_value_regno_p (const unsigned int regno)\n   return false;\n }\n \n+/* Update the data in CUM to advance over an argument\n+   of mode MODE and data type TYPE.\n+   (TYPE is null for libcalls where that information may not be available.)  */\n+\n+static void\n+pa_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t const_tree type, bool named ATTRIBUTE_UNUSED)\n+{\n+  int arg_size = FUNCTION_ARG_SIZE (mode, type);\n+\n+  cum->nargs_prototype--;\n+  cum->words += (arg_size\n+\t\t + ((cum->words & 01)\n+\t\t    && type != NULL_TREE\n+\t\t    && arg_size > 1));\n+}\n+\n /* Return the location of a parameter that is passed in a register or NULL\n    if the parameter has any component that is passed in memory.\n \n@@ -9373,9 +9398,9 @@ pa_function_value_regno_p (const unsigned int regno)\n \n    ??? We might want to restructure this so that it looks more like other\n    ports.  */\n-rtx\n-function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n-\t      int named ATTRIBUTE_UNUSED)\n+static rtx\n+pa_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t const_tree type, bool named ATTRIBUTE_UNUSED)\n {\n   int max_arg_words = (TARGET_64BIT ? 8 : 4);\n   int alignment = 0;"}, {"sha": "e637e684ecc206bfb662a9dc86fc3290a8f793b3", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd29bdaffea19f0aac0be23bec5b8bb2b52054da/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd29bdaffea19f0aac0be23bec5b8bb2b52054da/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=fd29bdaffea19f0aac0be23bec5b8bb2b52054da", "patch": "@@ -634,17 +634,6 @@ struct hppa_args {int words, nargs_prototype, incoming, indirect; };\n      ? (HOST_WIDE_INT) GET_MODE_SIZE (MODE) \\\n      : int_size_in_bytes (TYPE)) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n-/* Update the data in CUM to advance over an argument\n-   of mode MODE and data type TYPE.\n-   (TYPE is null for libcalls where that information may not be available.)  */\n-\n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\t\t\\\n-{ (CUM).nargs_prototype--;\t\t\t\t\t\t\\\n-  (CUM).words += FUNCTION_ARG_SIZE(MODE, TYPE)\t \t\t\t\\\n-    + (((CUM).words & 01) && (TYPE) != 0\t\t\t\t\\\n-\t&& FUNCTION_ARG_SIZE(MODE, TYPE) > 1);\t\t\t\t\\\n-}\n-\n /* Determine where to put an argument to a function.\n    Value is zero to push the argument on the stack,\n    or a hard register in which to store the argument.\n@@ -707,12 +696,6 @@ struct hppa_args {int words, nargs_prototype, incoming, indirect; };\n #define BLOCK_REG_PADDING(MODE, TYPE, FIRST) \\\n   function_arg_padding ((MODE), (TYPE))\n \n-/* Do not expect to understand this without reading it several times.  I'm\n-   tempted to try and simply it, but I worry about breaking something.  */\n-\n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-  function_arg (&CUM, MODE, TYPE, NAMED)\n-\n /* If defined, a C expression that gives the alignment boundary, in\n    bits, of an argument with the specified mode and type.  If it is\n    not defined,  `PARM_BOUNDARY' is used for all arguments.  */"}]}