{"sha": "d5d9f7834ab809841c4ccc90bca74808b4bcaf8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVkOWY3ODM0YWI4MDk4NDFjNGNjYzkwYmNhNzQ4MDhiNGJjYWY4ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-07-02T09:12:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-07-02T09:18:09Z"}, "message": "tree-optimization/96022 - fix ICE with vectorized shift\n\nThis fixes lane extraction for internal def vectorized shifts\nwith an effective scalar shift operand by always using lane zero\nof the first vector stmt.\n\nIt also fixes a SLP build issue noticed on the testcase where\nwe end up building unary vector ops with the only operand built\nform scalars which isn't profitable by itself.  The exception\nis for stores.\n\n2020-07-02  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/96022\n\t* tree-vect-stmts.c (vectorizable_shift): Only use the\n\tfirst vector stmt when extracting the scalar shift amount.\n\t* tree-vect-slp.c (vect_build_slp_tree_2): Also build unary\n\tnodes with all-scalar children from scalars but not stores.\n\t(vect_analyze_slp_instance): Mark the node not failed.\n\n\t* g++.dg/vect/pr96022.cc: New testcase.", "tree": {"sha": "a71e490d3d520f1c299df1563e823760c19c6382", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a71e490d3d520f1c299df1563e823760c19c6382"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5d9f7834ab809841c4ccc90bca74808b4bcaf8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d9f7834ab809841c4ccc90bca74808b4bcaf8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5d9f7834ab809841c4ccc90bca74808b4bcaf8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d9f7834ab809841c4ccc90bca74808b4bcaf8d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c9669a0e6cbf477a03024522943197bdb2682d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c9669a0e6cbf477a03024522943197bdb2682d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c9669a0e6cbf477a03024522943197bdb2682d4"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "ca6b27696f5d76c7898c960786ce831a34ae1a64", "filename": "gcc/testsuite/g++.dg/vect/pr96022.cc", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d9f7834ab809841c4ccc90bca74808b4bcaf8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr96022.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d9f7834ab809841c4ccc90bca74808b4bcaf8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr96022.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr96022.cc?ref=d5d9f7834ab809841c4ccc90bca74808b4bcaf8d", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-O3\" }\n+\n+extern int arr_6[];\n+extern char arr_7[] __attribute__((aligned));\n+void test(short a, bool, int p8) {\n+  for (bool b = 0; b < (bool)p8; b = 1)\n+    for (short c = 0; c < 5; c++) {\n+      arr_6[c] = (long)2 << a - 30574;\n+      arr_7[c] = 0;\n+    }\n+}"}, {"sha": "af123b5ab1debbd10ccd5a9d65030731b99743bc", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d9f7834ab809841c4ccc90bca74808b4bcaf8d/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d9f7834ab809841c4ccc90bca74808b4bcaf8d/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=d5d9f7834ab809841c4ccc90bca74808b4bcaf8d", "patch": "@@ -1530,11 +1530,11 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \n   vect_free_oprnd_info (oprnds_info);\n \n-  /* If we have all children of a non-unary child built up from\n-     uniform scalars then just throw that away, causing it built up\n-     from scalars.  */\n-  if (nops > 1\n-      && is_a <bb_vec_info> (vinfo)\n+  /* If we have all children of a child built up from uniform scalars\n+     then just throw that away, causing it built up from scalars.\n+     The exception is the SLP node for the vector store.  */\n+  if (is_a <bb_vec_info> (vinfo)\n+      && !STMT_VINFO_GROUPED_ACCESS (stmt_info)\n       /* ???  Rejecting patterns this way doesn't work.  We'd have to\n \t do extra work to cancel the pattern so the uses see the\n \t scalar version.  */\n@@ -2230,6 +2230,7 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \t      return false;\n \t    }\n \t  /* Fatal mismatch.  */\n+\t  matches[0] = true;\n \t  matches[group_size / const_max_nunits * const_max_nunits] = false;\n \t  vect_free_slp_tree (node, false);\n \t}"}, {"sha": "d68547ed1b509556025b2f3fc7433d684a250d7b", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d9f7834ab809841c4ccc90bca74808b4bcaf8d/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d9f7834ab809841c4ccc90bca74808b4bcaf8d/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=d5d9f7834ab809841c4ccc90bca74808b4bcaf8d", "patch": "@@ -5403,7 +5403,7 @@ vectorizable_shift (vec_info *vinfo,\n \t      if (!op1_vectype)\n \t\top1_vectype = get_vectype_for_scalar_type (vinfo,\n \t\t\t\t\t\t\t   TREE_TYPE (op1),\n-\t\t\t\t\t\t\t   slp_node);\n+\t\t\t\t\t\t\t   slp_op1);\n \n               /* Unlike the other binary operators, shifts/rotates have\n                  the rhs being int, instead of the same type as the lhs,\n@@ -5575,11 +5575,11 @@ vectorizable_shift (vec_info *vinfo,\n   /* Arguments are ready.  Create the new vector stmt.  */\n   FOR_EACH_VEC_ELT (vec_oprnds0, i, vop0)\n     {\n-      vop1 = vec_oprnds1[i];\n       /* For internal defs where we need to use a scalar shift arg\n \t extract the first lane.  */\n       if (scalar_shift_arg && dt[1] == vect_internal_def)\n \t{\n+\t  vop1 = vec_oprnds1[0];\n \t  new_temp = make_ssa_name (TREE_TYPE (TREE_TYPE (vop1)));\n \t  gassign *new_stmt\n \t    = gimple_build_assign (new_temp,\n@@ -5590,6 +5590,8 @@ vectorizable_shift (vec_info *vinfo,\n \t  vect_finish_stmt_generation (vinfo, stmt_info, new_stmt, gsi);\n \t  vop1 = new_temp;\n \t}\n+      else\n+\tvop1 = vec_oprnds1[i];\n       gassign *new_stmt = gimple_build_assign (vec_dest, code, vop0, vop1);\n       new_temp = make_ssa_name (vec_dest, new_stmt);\n       gimple_assign_set_lhs (new_stmt, new_temp);"}]}