{"sha": "69efc31da2d437bce7aca9f6bf003a901619359c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjllZmMzMWRhMmQ0MzdiY2U3YWNhOWY2YmYwMDNhOTAxNjE5MzU5Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2003-10-11T20:56:24Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-10-11T20:56:24Z"}, "message": "re PR rtl-optimization/12544 (ICE with large parameters used in nested functions)\n\n\tPR optimization/12544\n\t* function.c (put_var_into_stack): Don't generate ADDRESSOFs\n\tfor DECL_NONLOCAL decls.\n\nFrom-SVN: r72374", "tree": {"sha": "e6af32a291d4c1ae4f29ab69be8c1ad4e46b2738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6af32a291d4c1ae4f29ab69be8c1ad4e46b2738"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69efc31da2d437bce7aca9f6bf003a901619359c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69efc31da2d437bce7aca9f6bf003a901619359c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69efc31da2d437bce7aca9f6bf003a901619359c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69efc31da2d437bce7aca9f6bf003a901619359c/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d82a4b34c9d1349c45501ef64277ed746eb5012", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d82a4b34c9d1349c45501ef64277ed746eb5012", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d82a4b34c9d1349c45501ef64277ed746eb5012"}], "stats": {"total": 43, "additions": 38, "deletions": 5}, "files": [{"sha": "8a7ff9737bc6c0686ccd87c2f40e63297a4e1df7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69efc31da2d437bce7aca9f6bf003a901619359c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69efc31da2d437bce7aca9f6bf003a901619359c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69efc31da2d437bce7aca9f6bf003a901619359c", "patch": "@@ -1,3 +1,9 @@\n+2003-10-11  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR optimization/12544\n+\t* function.c (put_var_into_stack): Don't generate ADDRESSOFs\n+\tfor DECL_NONLOCAL decls.\n+\n 2003-10-11  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* expr.c: Follow spelling conventions."}, {"sha": "6531c022f9e0f8725c3df23fc7a334805cea20be", "filename": "gcc/function.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69efc31da2d437bce7aca9f6bf003a901619359c/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69efc31da2d437bce7aca9f6bf003a901619359c/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=69efc31da2d437bce7aca9f6bf003a901619359c", "patch": "@@ -1324,8 +1324,9 @@ put_var_into_stack (tree decl, int rescan)\n       if (function->decl == context)\n \tbreak;\n \n-  /* If this is a variable-size object with a pseudo to address it,\n-     put that pseudo into the stack, if the var is nonlocal.  */\n+  /* If this is a variable-sized object or a structure passed by invisible\n+     reference, with a pseudo to address it, put that pseudo into the stack\n+     if the var is non-local.  */\n   if (TREE_CODE (decl) != SAVE_EXPR && DECL_NONLOCAL (decl)\n       && GET_CODE (reg) == MEM\n       && GET_CODE (XEXP (reg, 0)) == REG\n@@ -1335,8 +1336,12 @@ put_var_into_stack (tree decl, int rescan)\n       decl_mode = promoted_mode = GET_MODE (reg);\n     }\n \n+  /* If this variable lives in the current function and we don't need to put it\n+     in the stack for the sake of setjmp or the non-locality, try to keep it in\n+     a register until we know we actually need the address.  */\n   can_use_addressof\n     = (function == 0\n+       && ! (TREE_CODE (decl) != SAVE_EXPR && DECL_NONLOCAL (decl))\n        && optimize > 0\n        /* FIXME make it work for promoted modes too */\n        && decl_mode == promoted_mode\n@@ -1355,9 +1360,6 @@ put_var_into_stack (tree decl, int rescan)\n \n   if (GET_CODE (reg) == REG)\n     {\n-      /* If this variable lives in the current function and we don't need\n-\t to put things in the stack for the sake of setjmp, try to keep it\n-\t in a register until we know we actually need the address.  */\n       if (can_use_addressof)\n \tgen_mem_addressof (reg, decl, rescan);\n       else"}, {"sha": "9c10508818b33c772424f1d64d04383448307298", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69efc31da2d437bce7aca9f6bf003a901619359c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69efc31da2d437bce7aca9f6bf003a901619359c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=69efc31da2d437bce7aca9f6bf003a901619359c", "patch": "@@ -1,3 +1,7 @@\n+2003-10-11  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.c-torture/compile/20031011-1.c: New test.\n+\n Sat Oct 11 12:26:16 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* g++.dg/other/first-global.C: New test."}, {"sha": "e35d76211b629a2bca28a4180302a431a03b620d", "filename": "gcc/testsuite/gcc.c-torture/compile/20031011-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69efc31da2d437bce7aca9f6bf003a901619359c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20031011-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69efc31da2d437bce7aca9f6bf003a901619359c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20031011-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20031011-1.c?ref=69efc31da2d437bce7aca9f6bf003a901619359c", "patch": "@@ -0,0 +1,21 @@\n+/* PR optimization/12544 */\n+/* Origin: Tony Hosking <hosking@cs.purdue.edu> */\n+\n+/* Verify that non-local structures passed by invisible\n+   reference are correctly put in the stack.  */\n+\n+typedef struct {\n+  int a;\n+  int f;\n+} A;\n+\n+A *b;\n+\n+void x (A a) {\n+  void y () {\n+    a.a = 0;\n+  }\n+\n+  b = &a;\n+  y();\n+}"}]}