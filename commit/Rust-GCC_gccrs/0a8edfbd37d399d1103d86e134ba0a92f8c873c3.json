{"sha": "0a8edfbd37d399d1103d86e134ba0a92f8c873c3", "node_id": "C_kwDOANBUbNoAKDBhOGVkZmJkMzdkMzk5ZDExMDNkODZlMTM0YmEwYTkyZjhjODczYzM", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-07-15T15:28:34Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-07-15T15:28:34Z"}, "message": "analyzer: fix taint false positive on optimized range checks [PR106284]\n\nPR analyzer/106284 reports a false positive from\n-Wanalyzer-tainted-array-index seen on the Linux kernel\nwith a version of my patches from:\n  https://gcc.gnu.org/pipermail/gcc-patches/2021-November/584372.html\nin drivers/usb/class/usblp.c in function \u2018usblp_set_protocol\u2019 handling\nusblp_ioctl on IOCNR_SET_PROTOCOL, which has:\n\n  | 1337 |         if (protocol < USBLP_FIRST_PROTOCOL || protocol > USBLP_LAST_PROTOCOL)\n  |      |            ~\n  |      |            |\n  |      |            (15) following \u2018false\u2019 branch...\n  |......\n  | 1341 |         if (usblp->intf->num_altsetting > 1) {\n  |      |            ~~~~~~~~~~~~\n  |      |            |     |\n  |      |            |     (16) ...to here\n  |      |            (17) following \u2018true\u2019 branch...\n  | 1342 |                 alts = usblp->protocol[protocol].alt_setting;\n  |      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  |      |                      |\n  |      |                      (18) ...to here\n  |      |                      (19) use of attacker-controlled value \u2018arg\u2019 in array lookup without bounds checking\n\nwhere \"arg\" is \"protocol\" (albeit from the caller frame, the ioctl\ncallback), and is clearly checked at (15).\n\nThe root cause is that at -O1 and above fold-const's build_range-check\ncan optimize range checks\n  (c>=low) && (c<=high)\ninto\n  (c-low>=0) && (c-low<=high-low)\nand thus into a single check:\n  (unsigned)(c - low) <= (unsigned)(high-low).\n\nI initially attempted to fix this by detecting such conditions in\nregion_model::on_condition, and calling on_condition for both of the\nimplied conditions.  This turned out not to work since the current\nsm_context framework doesn't support applying two conditions\nsimultaneously: it led to a transition from the old state to has_lb,\nthen a transition from the old state *again* to has_ub, thus leaving\nthe new state as has_ub, rather than the stop state.\n\nInstead, this patch fixes things by special-casing it within\ntaint_state_machine::on_condition.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/106284\n\t* sm-taint.cc (taint_state_machine::on_condition): Handle range\n\tchecks optimized by build_range_check.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/106284\n\t* gcc.dg/analyzer/torture/taint-read-index-2.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "73b30ba0784edab6267d530d2bfbee244ce7dd11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73b30ba0784edab6267d530d2bfbee244ce7dd11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a8edfbd37d399d1103d86e134ba0a92f8c873c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a8edfbd37d399d1103d86e134ba0a92f8c873c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a8edfbd37d399d1103d86e134ba0a92f8c873c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a8edfbd37d399d1103d86e134ba0a92f8c873c3/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1d07b50d43e954b0c6a2b85079ce0fdf5e77ec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d07b50d43e954b0c6a2b85079ce0fdf5e77ec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1d07b50d43e954b0c6a2b85079ce0fdf5e77ec5"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "2de9284624e9cff231b4aa5082b6822360aaf005", "filename": "gcc/analyzer/sm-taint.cc", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a8edfbd37d399d1103d86e134ba0a92f8c873c3/gcc%2Fanalyzer%2Fsm-taint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a8edfbd37d399d1103d86e134ba0a92f8c873c3/gcc%2Fanalyzer%2Fsm-taint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-taint.cc?ref=0a8edfbd37d399d1103d86e134ba0a92f8c873c3", "patch": "@@ -848,6 +848,48 @@ taint_state_machine::on_condition (sm_context *sm_ctxt,\n     case LE_EXPR:\n     case LT_EXPR:\n       {\n+\t/* Detect where build_range_check has optimized\n+\t   (c>=low) && (c<=high)\n+\t   into\n+\t   (c-low>=0) && (c-low<=high-low)\n+\t   and thus into:\n+\t   (unsigned)(c - low) <= (unsigned)(high-low).  */\n+\tif (const binop_svalue *binop_sval\n+\t      = lhs->dyn_cast_binop_svalue ())\n+\t  {\n+\t    const svalue *inner_lhs = binop_sval->get_arg0 ();\n+\t    enum tree_code inner_op = binop_sval->get_op ();\n+\t    const svalue *inner_rhs = binop_sval->get_arg1 ();\n+\t    if (const svalue *before_cast = inner_lhs->maybe_undo_cast ())\n+\t      inner_lhs = before_cast;\n+\t    if (tree outer_rhs_cst = rhs->maybe_get_constant ())\n+\t      if (tree inner_rhs_cst = inner_rhs->maybe_get_constant ())\n+\t\tif (inner_op == PLUS_EXPR\n+\t\t    && TREE_CODE (inner_rhs_cst) == INTEGER_CST\n+\t\t    && TREE_CODE (outer_rhs_cst) == INTEGER_CST\n+\t\t    && TYPE_UNSIGNED (TREE_TYPE (inner_rhs_cst))\n+\t\t    && TYPE_UNSIGNED (TREE_TYPE (outer_rhs_cst)))\n+\t\t  {\n+\t\t    /* We have\n+\t\t       (unsigned)(INNER_LHS + CST_A) </<= UNSIGNED_CST_B\n+\t\t       and thus an optimized test of INNER_LHS (before any\n+\t\t       cast to unsigned) against a range.\n+\t\t       Transition any of the tainted states to the stop state.\n+\t\t       We have to special-case this here rather than in\n+\t\t       region_model::on_condition since we can't apply\n+\t\t       both conditions simultaneously (we'd have a transition\n+\t\t       from the old state to has_lb, then a transition from\n+\t\t       the old state *again* to has_ub).  */\n+\t\t    state_t old_state\n+\t\t      = sm_ctxt->get_state (stmt, inner_lhs);\n+\t\t    if (old_state == m_tainted\n+\t\t\t|| old_state == m_has_lb\n+\t\t\t|| old_state == m_has_ub)\n+\t\t      sm_ctxt->set_next_state (stmt, inner_lhs, m_stop);\n+\t\t    return;\n+\t\t  }\n+\t  }\n+\n \tsm_ctxt->on_transition (node, stmt, lhs, m_tainted,\n \t\t\t\tm_has_ub);\n \tsm_ctxt->on_transition (node, stmt, lhs, m_has_lb,"}, {"sha": "6a4ebdbba16604042ed724f2cb265e0f6f39bd65", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/taint-read-index-2.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a8edfbd37d399d1103d86e134ba0a92f8c873c3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Ftaint-read-index-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a8edfbd37d399d1103d86e134ba0a92f8c873c3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Ftaint-read-index-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Ftaint-read-index-2.c?ref=0a8edfbd37d399d1103d86e134ba0a92f8c873c3", "patch": "@@ -0,0 +1,56 @@\n+// TODO: remove need for the taint option:\n+/* { dg-additional-options \"-fanalyzer-checker=taint\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } { \"\" } } */\n+\n+#define LOWER_LIMIT 5\n+#define UPPER_LIMIT 20\n+\n+static int arr[UPPER_LIMIT];\n+\n+static int\n+called_by_test_1 (int iarg)\n+{\n+  return arr[iarg]; /* { dg-warning \"without bounds checking\" } */\n+}\n+\n+int __attribute__((tainted_args))\n+test_1 (unsigned long ularg)\n+{\n+  return called_by_test_1 (ularg);\n+}\n+\n+static int\n+called_by_test_2 (int iarg)\n+{\n+  if (iarg < LOWER_LIMIT || iarg > UPPER_LIMIT)\n+    return 0;\n+  return arr[iarg]; /* { dg-bogus \"bounds checking\" } */\n+}\n+\n+int __attribute__((tainted_args))\n+test_2 (unsigned long ularg)\n+{\n+  return called_by_test_2 (ularg);\n+}\n+\n+int __attribute__((tainted_args))\n+test_3 (int iarg)\n+{\n+  if (iarg < LOWER_LIMIT || iarg > UPPER_LIMIT)\n+    return 0;\n+  return arr[iarg]; /* { dg-bogus \"bounds checking\" } */\n+}\n+\n+static int\n+called_by_test_4 (int iarg)\n+{\n+  if (iarg < LOWER_LIMIT || iarg > UPPER_LIMIT)\n+    return 0;\n+  return arr[iarg]; /* { dg-bogus \"bounds checking\" } */\n+}\n+\n+int __attribute__((tainted_args))\n+test_4 (unsigned uarg)\n+{\n+  return called_by_test_4 (uarg);\n+}"}]}