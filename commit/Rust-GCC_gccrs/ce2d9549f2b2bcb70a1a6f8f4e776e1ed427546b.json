{"sha": "ce2d9549f2b2bcb70a1a6f8f4e776e1ed427546b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UyZDk1NDlmMmIyYmNiNzBhMWE2ZjhmNGU3NzZlMWVkNDI3NTQ2Yg==", "commit": {"author": {"name": "Ulrich Weigand", "email": "ulrich.weigand@de.ibm.com", "date": "2020-11-24T18:30:01Z"}, "committer": {"name": "Ulrich Weigand", "email": "ulrich.weigand@de.ibm.com", "date": "2020-11-24T18:30:01Z"}, "message": "Revert: \"Fix -ffast-math flags handling inconsistencies\"\n\nThis reverts commit c4fa3728ab4f78984a549894e0e8c4d6a253e540,\nwhich caused a regression in the default for flag_excess_precision.\n\n2020-11-24  Ulrich Weigand  <uweigand@de.ibm.com>\n\ngcc/\n\tPR tree-optimization/97970\n\t* doc/invoke.texi (-ffast-math): Revert last change.\n\t* opts.c: Revert last change.", "tree": {"sha": "10849b39b5d59c00436188bd9cc475390b66a5ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10849b39b5d59c00436188bd9cc475390b66a5ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce2d9549f2b2bcb70a1a6f8f4e776e1ed427546b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce2d9549f2b2bcb70a1a6f8f4e776e1ed427546b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce2d9549f2b2bcb70a1a6f8f4e776e1ed427546b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce2d9549f2b2bcb70a1a6f8f4e776e1ed427546b/comments", "author": {"login": "uweigand", "id": 4154057, "node_id": "MDQ6VXNlcjQxNTQwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4154057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uweigand", "html_url": "https://github.com/uweigand", "followers_url": "https://api.github.com/users/uweigand/followers", "following_url": "https://api.github.com/users/uweigand/following{/other_user}", "gists_url": "https://api.github.com/users/uweigand/gists{/gist_id}", "starred_url": "https://api.github.com/users/uweigand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uweigand/subscriptions", "organizations_url": "https://api.github.com/users/uweigand/orgs", "repos_url": "https://api.github.com/users/uweigand/repos", "events_url": "https://api.github.com/users/uweigand/events{/privacy}", "received_events_url": "https://api.github.com/users/uweigand/received_events", "type": "User", "site_admin": false}, "committer": {"login": "uweigand", "id": 4154057, "node_id": "MDQ6VXNlcjQxNTQwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4154057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uweigand", "html_url": "https://github.com/uweigand", "followers_url": "https://api.github.com/users/uweigand/followers", "following_url": "https://api.github.com/users/uweigand/following{/other_user}", "gists_url": "https://api.github.com/users/uweigand/gists{/gist_id}", "starred_url": "https://api.github.com/users/uweigand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uweigand/subscriptions", "organizations_url": "https://api.github.com/users/uweigand/orgs", "repos_url": "https://api.github.com/users/uweigand/repos", "events_url": "https://api.github.com/users/uweigand/events{/privacy}", "received_events_url": "https://api.github.com/users/uweigand/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1805dbc58bac78a823e9cff075b9dc993f29c360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1805dbc58bac78a823e9cff075b9dc993f29c360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1805dbc58bac78a823e9cff075b9dc993f29c360"}], "stats": {"total": 64, "additions": 29, "deletions": 35}, "files": [{"sha": "26372a2435a4d28cefc83eb01bbc842045101e3c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2d9549f2b2bcb70a1a6f8f4e776e1ed427546b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2d9549f2b2bcb70a1a6f8f4e776e1ed427546b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ce2d9549f2b2bcb70a1a6f8f4e776e1ed427546b", "patch": "@@ -12342,10 +12342,10 @@ is unpredictable.\n @opindex ffast-math\n Sets the options @option{-fno-math-errno}, @option{-funsafe-math-optimizations},\n @option{-ffinite-math-only}, @option{-fno-rounding-math},\n-@option{-fcx-limited-range} and @option{-fexcess-precision=fast}.\n+@option{-fno-signaling-nans}, @option{-fcx-limited-range} and\n+@option{-fexcess-precision=fast}.\n \n-Whenever all these options listed above are set to those values,\n-the preprocessor macro @code{__FAST_MATH__} will be defined.\n+This option causes the preprocessor macro @code{__FAST_MATH__} to be defined.\n \n This option is not turned on by any @option{-O} option besides\n @option{-Ofast} since it can result in incorrect output for programs"}, {"sha": "57774916a098425dd7a635e86610b1893b8a7907", "filename": "gcc/opts.c", "status": "modified", "additions": 26, "deletions": 32, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2d9549f2b2bcb70a1a6f8f4e776e1ed427546b/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2d9549f2b2bcb70a1a6f8f4e776e1ed427546b/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=ce2d9549f2b2bcb70a1a6f8f4e776e1ed427546b", "patch": "@@ -193,12 +193,10 @@ static void set_debug_level (enum debug_info_type type, int extended,\n \t\t\t     const char *arg, struct gcc_options *opts,\n \t\t\t     struct gcc_options *opts_set,\n \t\t\t     location_t loc);\n-static void set_fast_math_flags (struct gcc_options *opts,\n-\t\t\t\t struct gcc_options *opts_set, int set);\n+static void set_fast_math_flags (struct gcc_options *opts, int set);\n static void decode_d_option (const char *arg, struct gcc_options *opts,\n \t\t\t     location_t loc, diagnostic_context *dc);\n static void set_unsafe_math_optimizations_flags (struct gcc_options *opts,\n-\t\t\t\t\t\t struct gcc_options *opts_set,\n \t\t\t\t\t\t int set);\n static void enable_warning_as_error (const char *arg, int value,\n \t\t\t\t     unsigned int lang_mask,\n@@ -2493,11 +2491,11 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_ffast_math:\n-      set_fast_math_flags (opts, opts_set, value);\n+      set_fast_math_flags (opts, value);\n       break;\n \n     case OPT_funsafe_math_optimizations:\n-      set_unsafe_math_optimizations_flags (opts, opts_set, value);\n+      set_unsafe_math_optimizations_flags (opts, value);\n       break;\n \n     case OPT_ffixed_:\n@@ -2878,59 +2876,55 @@ set_Wstrict_aliasing (struct gcc_options *opts, int onoff)\n /* The following routines are useful in setting all the flags that\n    -ffast-math and -fno-fast-math imply.  */\n static void\n-set_fast_math_flags (struct gcc_options *opts,\n-\t\t     struct gcc_options *opts_set, int set)\n+set_fast_math_flags (struct gcc_options *opts, int set)\n {\n-  if (!opts->frontend_set_flag_unsafe_math_optimizations\n-      && !opts_set->x_flag_unsafe_math_optimizations)\n+  if (!opts->frontend_set_flag_unsafe_math_optimizations)\n     {\n       opts->x_flag_unsafe_math_optimizations = set;\n-      set_unsafe_math_optimizations_flags (opts, opts_set, set);\n+      set_unsafe_math_optimizations_flags (opts, set);\n     }\n   if (!opts->frontend_set_flag_finite_math_only)\n-    SET_OPTION_IF_UNSET (opts, opts_set, flag_finite_math_only, set);\n+    opts->x_flag_finite_math_only = set;\n   if (!opts->frontend_set_flag_errno_math)\n-    SET_OPTION_IF_UNSET (opts, opts_set, flag_errno_math, !set);\n-  if (!opts->frontend_set_flag_cx_limited_range)\n-    SET_OPTION_IF_UNSET (opts, opts_set, flag_cx_limited_range, set);\n-  if (!opts->frontend_set_flag_excess_precision)\n-    SET_OPTION_IF_UNSET (opts, opts_set, flag_excess_precision,\n-\t\t\t set ? EXCESS_PRECISION_FAST\n-\t\t\t     : EXCESS_PRECISION_DEFAULT);\n-\n-  // -ffast-math should also reset -frounding-math, but since this\n-  // is off by default, there's nothing to do for now.\n+    opts->x_flag_errno_math = !set;\n+  if (set)\n+    {\n+      if (opts->frontend_set_flag_excess_precision == EXCESS_PRECISION_DEFAULT)\n+\topts->x_flag_excess_precision\n+\t  = set ? EXCESS_PRECISION_FAST : EXCESS_PRECISION_DEFAULT;\n+      if (!opts->frontend_set_flag_signaling_nans)\n+\topts->x_flag_signaling_nans = 0;\n+      if (!opts->frontend_set_flag_rounding_math)\n+\topts->x_flag_rounding_math = 0;\n+      if (!opts->frontend_set_flag_cx_limited_range)\n+\topts->x_flag_cx_limited_range = 1;\n+    }\n }\n \n /* When -funsafe-math-optimizations is set the following\n    flags are set as well.  */\n static void\n-set_unsafe_math_optimizations_flags (struct gcc_options *opts,\n-\t\t\t\t     struct gcc_options *opts_set, int set)\n+set_unsafe_math_optimizations_flags (struct gcc_options *opts, int set)\n {\n   if (!opts->frontend_set_flag_trapping_math)\n-    SET_OPTION_IF_UNSET (opts, opts_set, flag_trapping_math, !set);\n+    opts->x_flag_trapping_math = !set;\n   if (!opts->frontend_set_flag_signed_zeros)\n-    SET_OPTION_IF_UNSET (opts, opts_set, flag_signed_zeros, !set);\n+    opts->x_flag_signed_zeros = !set;\n   if (!opts->frontend_set_flag_associative_math)\n-    SET_OPTION_IF_UNSET (opts, opts_set, flag_associative_math, set);\n+    opts->x_flag_associative_math = set;\n   if (!opts->frontend_set_flag_reciprocal_math)\n-    SET_OPTION_IF_UNSET (opts, opts_set, flag_reciprocal_math, set);\n+    opts->x_flag_reciprocal_math = set;\n }\n \n /* Return true iff flags in OPTS are set as if -ffast-math.  */\n bool\n fast_math_flags_set_p (const struct gcc_options *opts)\n {\n   return (!opts->x_flag_trapping_math\n-\t  && !opts->x_flag_signed_zeros\n-\t  && opts->x_flag_associative_math\n-\t  && opts->x_flag_reciprocal_math\n \t  && opts->x_flag_unsafe_math_optimizations\n \t  && opts->x_flag_finite_math_only\n+\t  && !opts->x_flag_signed_zeros\n \t  && !opts->x_flag_errno_math\n-\t  && !opts->x_flag_rounding_math\n-\t  && opts->x_flag_cx_limited_range\n \t  && opts->x_flag_excess_precision == EXCESS_PRECISION_FAST);\n }\n "}]}