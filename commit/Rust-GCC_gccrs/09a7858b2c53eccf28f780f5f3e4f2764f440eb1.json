{"sha": "09a7858b2c53eccf28f780f5f3e4f2764f440eb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlhNzg1OGIyYzUzZWNjZjI4Zjc4MGY1ZjNlNGYyNzY0ZjQ0MGViMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-19T11:57:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-19T11:57:47Z"}, "message": "Check whether any statements need masking (PR 83922)\n\nThis PR is an odd case in which, due to the low optimisation level,\nwe enter vectorisation with:\n\n  outer1:\n    x_1 = PHI <x_3(outer2), ...>;\n    ...\n\n  inner:\n    x_2 = 0;\n    ...\n\n  outer2:\n    x_3 = PHI <x_2(inner)>;\n\nThese statements are tentatively treated as a double reduction by\nvect_force_simple_reduction, but in the end only x_3 and x_2 are marked\nas relevant.  vect_analyze_loop_operations skips over x_3, leaving the\nvectorizable_reduction check to a presumed future test of x_1, which\nin this case never happens.  We therefore end up vectorising x_2 only\n(complete with peeling for niters!) and leave the scalar x_3 in place.\n\nThis caused a segfault in the support for fully-masked loops,\nsince there were no statements that needed masking.  Fixed by\nchecking for that.\n\nBut I think this is also a flaw in vect_analyze_loop_operations.\nOuter loop vectorisation reduces the number of times that the\ninner loop is executed, so it wouldn't necessarily be valid\nto leave the scalar x_3 in place for all vectorisable x_2.\nThere's already code to forbid that when x_1 isn't present:\n\n              /* FORNOW: we currently don't support the case that these phis\n                 are not used in the outerloop (unless it is double reduction,\n                 i.e., this phi is vect_reduction_def), cause this case\n                 requires to actually do something here.  */\n\nI think we need to do the same if x_1 is present but not relevant.\n\n2018-01-19  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\tPR tree-optimization/83922\n\t* tree-vect-loop.c (vect_verify_full_masking): Return false if\n\tthere are no statements that need masking.\n\t(vect_active_double_reduction_p): New function.\n\t(vect_analyze_loop_operations): Use it when handling phis that\n\tare not in the loop header.\n\ngcc/testsuite/\n\tPR tree-optimization/83922\n\t* gcc.dg/pr83922.c: New test.\n\nFrom-SVN: r256885", "tree": {"sha": "15f345bba3a344787fb8add9cbe279268af2e420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15f345bba3a344787fb8add9cbe279268af2e420"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09a7858b2c53eccf28f780f5f3e4f2764f440eb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09a7858b2c53eccf28f780f5f3e4f2764f440eb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09a7858b2c53eccf28f780f5f3e4f2764f440eb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09a7858b2c53eccf28f780f5f3e4f2764f440eb1/comments", "author": null, "committer": null, "parents": [{"sha": "271134dd4894140542e38a4dcd8b4a07093d823a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/271134dd4894140542e38a4dcd8b4a07093d823a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/271134dd4894140542e38a4dcd8b4a07093d823a"}], "stats": {"total": 71, "additions": 69, "deletions": 2}, "files": [{"sha": "c11f8c728b0b31ea202642a4dba00cbfa3df8e3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a7858b2c53eccf28f780f5f3e4f2764f440eb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a7858b2c53eccf28f780f5f3e4f2764f440eb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09a7858b2c53eccf28f780f5f3e4f2764f440eb1", "patch": "@@ -1,3 +1,12 @@\n+2018-01-19  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/83922\n+\t* tree-vect-loop.c (vect_verify_full_masking): Return false if\n+\tthere are no statements that need masking.\n+\t(vect_active_double_reduction_p): New function.\n+\t(vect_analyze_loop_operations): Use it when handling phis that\n+\tare not in the loop header.\n+\n 2018-01-19  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR tree-optimization/83914"}, {"sha": "f0485d310e82406cb89344ece996742a71cb5279", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a7858b2c53eccf28f780f5f3e4f2764f440eb1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a7858b2c53eccf28f780f5f3e4f2764f440eb1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=09a7858b2c53eccf28f780f5f3e4f2764f440eb1", "patch": "@@ -1,3 +1,8 @@\n+2018-01-19  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/83922\n+\t* gcc.dg/pr83922.c: New test.\n+\n 2018-01-19  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR tree-optimization/83914"}, {"sha": "8f99f7724bff594d6d223206a8355dbbdd34c877", "filename": "gcc/testsuite/gcc.dg/pr83922.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a7858b2c53eccf28f780f5f3e4f2764f440eb1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83922.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a7858b2c53eccf28f780f5f3e4f2764f440eb1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83922.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83922.c?ref=09a7858b2c53eccf28f780f5f3e4f2764f440eb1", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options \"-O -ftree-vectorize\" } */\n+\n+int j4;\n+\n+void\n+k1 (int ak)\n+{\n+  while (ak < 1)\n+    {\n+      int ur;\n+\n+      for (ur = 0; ur < 2; ++ur)\n+        {\n+          ++j4;\n+          if (j4 != 0)\n+            j4 = 0;\n+        }\n+\n+      ++ak;\n+    }\n+}"}, {"sha": "f75a48313a2e3f57d9f03c6ef795fb5bb8cd06b5", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a7858b2c53eccf28f780f5f3e4f2764f440eb1/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a7858b2c53eccf28f780f5f3e4f2764f440eb1/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=09a7858b2c53eccf28f780f5f3e4f2764f440eb1", "patch": "@@ -1294,6 +1294,12 @@ vect_verify_full_masking (loop_vec_info loop_vinfo)\n   struct loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n   unsigned int min_ni_width;\n \n+  /* Use a normal loop if there are no statements that need masking.\n+     This only happens in rare degenerate cases: it means that the loop\n+     has no loads, no stores, and no live-out values.  */\n+  if (LOOP_VINFO_MASKS (loop_vinfo).is_empty ())\n+    return false;\n+\n   /* Get the maximum number of iterations that is representable\n      in the counter type.  */\n   tree ni_type = TREE_TYPE (LOOP_VINFO_NITERSM1 (loop_vinfo));\n@@ -1739,6 +1745,33 @@ vect_update_vf_for_slp (loop_vec_info loop_vinfo)\n     }\n }\n \n+/* Return true if STMT_INFO describes a double reduction phi and if\n+   the other phi in the reduction is also relevant for vectorization.\n+   This rejects cases such as:\n+\n+      outer1:\n+\tx_1 = PHI <x_3(outer2), ...>;\n+\t...\n+\n+      inner:\n+\tx_2 = ...;\n+\t...\n+\n+      outer2:\n+\tx_3 = PHI <x_2(inner)>;\n+\n+   if nothing in x_2 or elsewhere makes x_1 relevant.  */\n+\n+static bool\n+vect_active_double_reduction_p (stmt_vec_info stmt_info)\n+{\n+  if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_double_reduction_def)\n+    return false;\n+\n+  gimple *other_phi = STMT_VINFO_REDUC_DEF (stmt_info);\n+  return STMT_VINFO_RELEVANT_P (vinfo_for_stmt (other_phi));\n+}\n+\n /* Function vect_analyze_loop_operations.\n \n    Scan the loop stmts and make sure they are all vectorizable.  */\n@@ -1786,8 +1819,7 @@ vect_analyze_loop_operations (loop_vec_info loop_vinfo)\n                  i.e., this phi is vect_reduction_def), cause this case\n                  requires to actually do something here.  */\n               if (STMT_VINFO_LIVE_P (stmt_info)\n-                  && STMT_VINFO_DEF_TYPE (stmt_info)\n-                     != vect_double_reduction_def)\n+\t\t  && !vect_active_double_reduction_p (stmt_info))\n                 {\n                   if (dump_enabled_p ())\n \t\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,"}]}