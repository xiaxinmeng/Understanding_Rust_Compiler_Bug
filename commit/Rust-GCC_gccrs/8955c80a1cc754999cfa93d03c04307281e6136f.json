{"sha": "8955c80a1cc754999cfa93d03c04307281e6136f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk1NWM4MGExY2M3NTQ5OTljZmE5M2QwM2MwNDMwNzI4MWU2MTM2Zg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-30T22:34:55Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-30T22:34:55Z"}, "message": "libgo: Support systems which do not have strerror_r.\n\nFrom-SVN: r171757", "tree": {"sha": "ad346d0e1a6a29f4ca3ea6a450e50c5896ed8047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad346d0e1a6a29f4ca3ea6a450e50c5896ed8047"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8955c80a1cc754999cfa93d03c04307281e6136f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8955c80a1cc754999cfa93d03c04307281e6136f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8955c80a1cc754999cfa93d03c04307281e6136f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8955c80a1cc754999cfa93d03c04307281e6136f/comments", "author": null, "committer": null, "parents": [{"sha": "25a182be4fb67d8d972a8f8789f1557cc1a945e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25a182be4fb67d8d972a8f8789f1557cc1a945e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25a182be4fb67d8d972a8f8789f1557cc1a945e0"}], "stats": {"total": 68, "additions": 61, "deletions": 7}, "files": [{"sha": "476d4aaf3a22ac49d25c232f5aa601bb4063e23b", "filename": "libgo/Makefile.am", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8955c80a1cc754999cfa93d03c04307281e6136f/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8955c80a1cc754999cfa93d03c04307281e6136f/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=8955c80a1cc754999cfa93d03c04307281e6136f", "patch": "@@ -1264,7 +1264,11 @@ endif\n if LIBGO_IS_RTEMS\n syscall_errstr_file = syscalls/errstr_rtems.go\n else\n+if HAVE_STRERROR_R\n syscall_errstr_file = syscalls/errstr.go\n+else\n+syscall_errstr_file = syscalls/errstr_nor.go\n+endif\n endif\n \n # Declare libc_strerror_r which is the Go name for strerror_r.\n@@ -1273,7 +1277,7 @@ if LIBGO_IS_RTEMS\n syscall_errstr_decl_file = syscalls/errstr_decl_rtems.go\n else\n if LIBGO_IS_LINUX\n-# In Linux the POSIX strerror_r is called __xpg_strerror_r.\n+# On GNU/Linux the POSIX strerror_r is called __xpg_strerror_r.\n syscall_errstr_decl_file = syscalls/errstr_decl_linux.go\n else\n # On other systems we hope strerror_r is just strerror_r."}, {"sha": "5797fad7f3b41f0b7339667ec840b28fefccf27f", "filename": "libgo/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8955c80a1cc754999cfa93d03c04307281e6136f/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8955c80a1cc754999cfa93d03c04307281e6136f/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=8955c80a1cc754999cfa93d03c04307281e6136f", "patch": "@@ -1638,13 +1638,14 @@ go_testing_script_files = \\\n \n # Define Sleep.\n @LIBGO_IS_RTEMS_TRUE@syscall_sleep_file = syscalls/sleep_rtems.go\n-@LIBGO_IS_RTEMS_FALSE@syscall_errstr_file = syscalls/errstr.go\n+@HAVE_STRERROR_R_FALSE@@LIBGO_IS_RTEMS_FALSE@syscall_errstr_file = syscalls/errstr_nor.go\n+@HAVE_STRERROR_R_TRUE@@LIBGO_IS_RTEMS_FALSE@syscall_errstr_file = syscalls/errstr.go\n \n # Define Errstr.\n @LIBGO_IS_RTEMS_TRUE@syscall_errstr_file = syscalls/errstr_rtems.go\n # On other systems we hope strerror_r is just strerror_r.\n @LIBGO_IS_LINUX_FALSE@@LIBGO_IS_RTEMS_FALSE@syscall_errstr_decl_file = syscalls/errstr_decl.go\n-# In Linux the POSIX strerror_r is called __xpg_strerror_r.\n+# On GNU/Linux the POSIX strerror_r is called __xpg_strerror_r.\n @LIBGO_IS_LINUX_TRUE@@LIBGO_IS_RTEMS_FALSE@syscall_errstr_decl_file = syscalls/errstr_decl_linux.go\n \n # Declare libc_strerror_r which is the Go name for strerror_r."}, {"sha": "6fe02592306f9591d9f59a7b91db8d08fddbc587", "filename": "libgo/configure", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8955c80a1cc754999cfa93d03c04307281e6136f/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8955c80a1cc754999cfa93d03c04307281e6136f/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=8955c80a1cc754999cfa93d03c04307281e6136f", "patch": "@@ -603,6 +603,8 @@ am__EXEEXT_TRUE\n LTLIBOBJS\n LIBOBJS\n STRINGOPS_FLAG\n+HAVE_STRERROR_R_FALSE\n+HAVE_STRERROR_R_TRUE\n HAVE_SYS_MMAN_H_FALSE\n HAVE_SYS_MMAN_H_TRUE\n PTHREAD_LIBS\n@@ -10898,7 +10900,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10901 \"configure\"\n+#line 10903 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11004,7 +11006,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11007 \"configure\"\n+#line 11009 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14151,7 +14153,8 @@ else\n   HAVE_SYS_MMAN_H_FALSE=\n fi\n \n-for ac_func in srandom random strsignal\n+\n+for ac_func in srandom random strerror_r strsignal\n do :\n   as_ac_var=`$as_echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n ac_fn_c_check_func \"$LINENO\" \"$ac_func\" \"$as_ac_var\"\n@@ -14164,6 +14167,14 @@ _ACEOF\n fi\n done\n \n+ if test \"$ac_cv_func_strerror_r\" = yes; then\n+  HAVE_STRERROR_R_TRUE=\n+  HAVE_STRERROR_R_FALSE='#'\n+else\n+  HAVE_STRERROR_R_TRUE='#'\n+  HAVE_STRERROR_R_FALSE=\n+fi\n+\n \n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for __sync_bool_compare_and_swap_4\" >&5\n $as_echo_n \"checking for __sync_bool_compare_and_swap_4... \" >&6; }\n@@ -14537,6 +14548,10 @@ if test -z \"${HAVE_SYS_MMAN_H_TRUE}\" && test -z \"${HAVE_SYS_MMAN_H_FALSE}\"; then\n   as_fn_error \"conditional \\\"HAVE_SYS_MMAN_H\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${HAVE_STRERROR_R_TRUE}\" && test -z \"${HAVE_STRERROR_R_FALSE}\"; then\n+  as_fn_error \"conditional \\\"HAVE_STRERROR_R\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n \n : ${CONFIG_STATUS=./config.status}\n ac_write_fail=0"}, {"sha": "7839278e881c0ab8a89d330c654c286c8685f406", "filename": "libgo/configure.ac", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8955c80a1cc754999cfa93d03c04307281e6136f/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8955c80a1cc754999cfa93d03c04307281e6136f/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=8955c80a1cc754999cfa93d03c04307281e6136f", "patch": "@@ -380,7 +380,9 @@ esac\n \n AC_CHECK_HEADERS(sys/mman.h syscall.h sys/epoll.h sys/ptrace.h sys/syscall.h sys/user.h sys/utsname.h)\n AM_CONDITIONAL(HAVE_SYS_MMAN_H, test \"$ac_cv_header_sys_mman_h\" = yes)\n-AC_CHECK_FUNCS(srandom random strsignal)\n+\n+AC_CHECK_FUNCS(srandom random strerror_r strsignal)\n+AM_CONDITIONAL(HAVE_STRERROR_R, test \"$ac_cv_func_strerror_r\" = yes)\n \n AC_CACHE_CHECK([for __sync_bool_compare_and_swap_4],\n [libgo_cv_func___sync_bool_compare_and_swap_4],"}, {"sha": "358b3ee9cf6a6cb4158582e24c4b5b6b1cfaccfb", "filename": "libgo/syscalls/errstr_nor.go", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8955c80a1cc754999cfa93d03c04307281e6136f/libgo%2Fsyscalls%2Ferrstr_nor.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8955c80a1cc754999cfa93d03c04307281e6136f/libgo%2Fsyscalls%2Ferrstr_nor.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fsyscalls%2Ferrstr_nor.go?ref=8955c80a1cc754999cfa93d03c04307281e6136f", "patch": "@@ -0,0 +1,32 @@\n+// errstr.go -- Error strings when there is no strerror_r.\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syscall\n+\n+import (\n+\t\"sync\"\n+\t\"unsafe\"\n+)\n+\n+func libc_strerror(int) *byte __asm__ (\"strerror\")\n+\n+var errstr_lock sync.Mutex\n+\n+func Errstr(errno int) string {\n+\terrstr_lock.Lock()\n+\n+\tbp := libc_strerror(errno)\n+\tb := (*[1000]byte)(unsafe.Pointer(bp))\n+\ti := 0\n+\tfor b[i] != 0 {\n+\t\ti++\n+\t}\n+\ts := string(b[:i])\n+\n+\terrstr_lock.Unlock()\n+\n+\treturn s\n+}"}]}