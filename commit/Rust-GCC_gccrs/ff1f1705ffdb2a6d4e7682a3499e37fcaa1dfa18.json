{"sha": "ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYxZjE3MDVmZmRiMmE2ZDRlNzY4MmEzNDk5ZTM3ZmNhYTFkZmExOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-16T14:35:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-16T14:35:34Z"}, "message": "[multiple changes]\n\n2014-07-16  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* switch-b.adb (Scan_Binder_Switches): Add missing guard.\n\n2014-07-16  Ben Brosgol  <brosgol@adacore.com>\n\n\t* gnat_ugn.texi: Fix typo.\n\n2014-07-16  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Case_Expression): Do not expand case\n\texpression if it is the specification of a subtype predicate:\n\tit will be expanded when the return statement is analyzed, or\n\twhen a static predicate is transformed into a static expression\n\tfor evaluation by the front-end.\n\t* sem_ch13.adb (Get_RList): If the expression for a static\n\tpredicate is a case expression, extract the alternatives of the\n\tbranches with a True value to create the required statically\n\tevaluable expression.\n\n2014-07-16  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_prag.adb (Expand_Pragma_Check): Use the location of the\n\texpression, not the location of the aspect, for all generated\n\tcode, so that in particular the call to raise_assert_failure\n\tgets the sloc of the associated condition.\n\t* exp_ch6.adb\n\t(Expand_Subprogram_Contract.Build_Postconditions_Procedure):\n\tSet an explicit End_Label on the handled sequence of statements\n\tfor the _Postconditions procedure so that the implicit return\n\tstatement does not erroneously get associated with code generated\n\tfor the last condition in postconditions.\n\n2014-07-16  Thomas Quinot  <quinot@adacore.com>\n\n\t* ug_words: Fix name of VMS synonym for -gnatw.z (SIZE_ALIGNMENT,\n\tnot SIZE_ALIGN) and -gnatw.Z (NOSIZE_ALIGNMENT, not NOSIZE_ALIGN).\n\t* vms_data.ads: Add missing spaces in VMS synonyms for -gnatw.z /\n\t-gnatw.Z.\n\nFrom-SVN: r212657", "tree": {"sha": "82fd36960ccb2e493487ec35b8935f06ae3c1255", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82fd36960ccb2e493487ec35b8935f06ae3c1255"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18/comments", "author": null, "committer": null, "parents": [{"sha": "3f1bc2cf467b4b05d02a51c74947f39099749cde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f1bc2cf467b4b05d02a51c74947f39099749cde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f1bc2cf467b4b05d02a51c74947f39099749cde"}], "stats": {"total": 167, "additions": 128, "deletions": 39}, "files": [{"sha": "8c42df40d47478de71a34480ffd2977bce4af211", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18", "patch": "@@ -1,3 +1,43 @@\n+2014-07-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* switch-b.adb (Scan_Binder_Switches): Add missing guard.\n+\n+2014-07-16  Ben Brosgol  <brosgol@adacore.com>\n+\n+\t* gnat_ugn.texi: Fix typo.\n+\n+2014-07-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Case_Expression): Do not expand case\n+\texpression if it is the specification of a subtype predicate:\n+\tit will be expanded when the return statement is analyzed, or\n+\twhen a static predicate is transformed into a static expression\n+\tfor evaluation by the front-end.\n+\t* sem_ch13.adb (Get_RList): If the expression for a static\n+\tpredicate is a case expression, extract the alternatives of the\n+\tbranches with a True value to create the required statically\n+\tevaluable expression.\n+\n+2014-07-16  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_prag.adb (Expand_Pragma_Check): Use the location of the\n+\texpression, not the location of the aspect, for all generated\n+\tcode, so that in particular the call to raise_assert_failure\n+\tgets the sloc of the associated condition.\n+\t* exp_ch6.adb\n+\t(Expand_Subprogram_Contract.Build_Postconditions_Procedure):\n+\tSet an explicit End_Label on the handled sequence of statements\n+\tfor the _Postconditions procedure so that the implicit return\n+\tstatement does not erroneously get associated with code generated\n+\tfor the last condition in postconditions.\n+\n+2014-07-16  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* ug_words: Fix name of VMS synonym for -gnatw.z (SIZE_ALIGNMENT,\n+\tnot SIZE_ALIGN) and -gnatw.Z (NOSIZE_ALIGNMENT, not NOSIZE_ALIGN).\n+\t* vms_data.ads: Add missing spaces in VMS synonyms for -gnatw.z /\n+\t-gnatw.Z.\n+\n 2014-07-16  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb, sem_prag.adb, sem_util.adb, sem_res.adb, sem_ch13.adb:"}, {"sha": "9a86fb48360f6850e63aada5fd32f7cf0964d881", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18", "patch": "@@ -4927,6 +4927,16 @@ package body Exp_Ch4 is\n          return;\n       end if;\n \n+      --  If the case expression is a predicate specification, do not\n+      --  expand, because it will be converted to the proper predicate\n+      --  form when building the predicate function.\n+\n+      if Ekind_In (Current_Scope, E_Function, E_Procedure)\n+        and then Is_Predicate_Function (Current_Scope)\n+      then\n+         return;\n+      end if;\n+\n       --  We expand\n \n       --    case X is when A => AX, when B => BX ..."}, {"sha": "a63d23699920e122df51000e8ac248a9e6db52d5", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18", "patch": "@@ -8405,7 +8405,9 @@ package body Exp_Ch6 is\n \n          --  Local variables\n \n-         Loc    : constant Source_Ptr := Sloc (N);\n+         Loc : constant Source_Ptr := Sloc (N);\n+         --  Source location of subprogram contract\n+\n          Formal : Entity_Id;\n          Typ    : Entity_Id;\n \n@@ -8467,9 +8469,8 @@ package body Exp_Ch6 is\n \n                if Predicate_Checks_OK (Typ) then\n                   Append_Enabled_Item\n-                    (Item =>\n-                       Make_Predicate_Check\n-                         (Typ, New_Occurrence_Of (Formal, Loc)),\n+                    (Item => Make_Predicate_Check\n+                                (Typ, New_Occurrence_Of (Formal, Loc)),\n                      List => Stmts);\n                end if;\n             end if;\n@@ -8614,6 +8615,12 @@ package body Exp_Ch6 is\n          --  order reference. The body of _Postconditions must be placed after\n          --  the declaration of Temp to preserve correct visibility.\n \n+         --  Note that we set an explicit End_Label in order to override the\n+         --  sloc of the implicit RETURN statement, and prevent it from\n+         --  inheriting the sloc of one of the postconditions: this would cause\n+         --  confusing debug info to be produced, interfering with coverage\n+         --  analysis tools.\n+\n          Insert_Before_First_Source_Declaration (\n            Make_Subprogram_Body (Loc,\n              Specification              =>\n@@ -8623,7 +8630,9 @@ package body Exp_Ch6 is\n \n              Declarations               => Empty_List,\n              Handled_Statement_Sequence =>\n-               Make_Handled_Sequence_Of_Statements (Loc, Stmts)));\n+               Make_Handled_Sequence_Of_Statements (Loc,\n+                 Statements => Stmts,\n+                 End_Label  => Make_Identifier (Loc, Chars (Proc_Id)))));\n \n          --  Set the attributes of the related subprogram to capture the\n          --  generated procedure."}, {"sha": "fef09c4d12dfcc93051e8065ad74a9bb91178159", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 22, "deletions": 27, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -916,18 +916,24 @@ package body Exp_Prag is\n    --------------------------\n \n    procedure Expand_Pragma_Check (N : Node_Id) is\n-      Loc  : constant Source_Ptr := Sloc (N);\n-      --  Location of the pragma node. Note: it is important to use this\n-      --  location (and not the location of the expression) for the generated\n-      --  statements, otherwise the implicit return statement in the body\n-      --  of a pre/postcondition subprogram may inherit the source location\n-      --  of part of the expression, which causes confusing debug information\n-      --  to be generated, which interferes with coverage analysis tools.\n-\n       Cond : constant Node_Id := Arg2 (N);\n       Nam  : constant Name_Id := Chars (Arg1 (N));\n       Msg  : Node_Id;\n \n+      Loc : constant Source_Ptr := Sloc (First_Node (Cond));\n+      --  Source location used in the case of a failed assertion: point to the\n+      --  failing condition, not Loc. Note that the source location of the\n+      --  expression is not usually the best choice here, because it points to\n+      --  the location of the topmost tree node, which may be an operator in\n+      --  the middle of the source text of the expression. For example, it gets\n+      --  located on the last AND keyword in a chain of boolean expressiond\n+      --  AND'ed together. It is best to put the message on the first character\n+      --  of the condition, which is the effect of the First_Node call here.\n+      --  This source location is used to build the default exception message,\n+      --  and also as the sloc of the call to the runtime subprogram raising\n+      --  Assert_Failure, so that coverage analysis tools can relate the\n+      --  call to the failed check.\n+\n    begin\n       --  Nothing to do if pragma is ignored\n \n@@ -984,20 +990,17 @@ package body Exp_Prag is\n \n       --  Case where we generate a direct raise\n \n-      if ((Debug_Flag_Dot_G\n-           or else Restriction_Active (No_Exception_Propagation))\n-          and then Present (Find_Local_Handler (RTE (RE_Assert_Failure), N)))\n+      if ((Debug_Flag_Dot_G or else\n+                              Restriction_Active (No_Exception_Propagation))\n+           and then Present (Find_Local_Handler (RTE (RE_Assert_Failure), N)))\n         or else (Opt.Exception_Locations_Suppressed and then No (Arg3 (N)))\n       then\n          Rewrite (N,\n            Make_If_Statement (Loc,\n-             Condition =>\n-               Make_Op_Not (Loc,\n-                 Right_Opnd => Cond),\n+             Condition       => Make_Op_Not (Loc, Right_Opnd => Cond),\n              Then_Statements => New_List (\n                Make_Raise_Statement (Loc,\n-                 Name =>\n-                   New_Occurrence_Of (RTE (RE_Assert_Failure), Loc)))));\n+                 Name => New_Occurrence_Of (RTE (RE_Assert_Failure), Loc)))));\n \n       --  Case where we call the procedure\n \n@@ -1011,15 +1014,7 @@ package body Exp_Prag is\n \n          else\n             declare\n-               Msg_Loc : constant String :=\n-                           Build_Location_String (Sloc (First_Node (Cond)));\n-               --  Source location used in the case of a failed assertion:\n-               --  point to the failing condition, not Loc. Note that the\n-               --  source location of the expression is not usually the best\n-               --  choice here. For example, it gets located on the last AND\n-               --  keyword in a chain of boolean expressiond AND'ed together.\n-               --  It is best to put the message on the first character of the\n-               --  condition, which is the effect of the First_Node call here.\n+               Loc_Str : constant String := Build_Location_String (Loc);\n \n             begin\n                Name_Len := 0;\n@@ -1066,7 +1061,7 @@ package body Exp_Prag is\n \n                --  In all cases, add location string\n \n-               Add_Str_To_Name_Buffer (Msg_Loc);\n+               Add_Str_To_Name_Buffer (Loc_Str);\n \n                --  Build the message\n "}, {"sha": "72b78133713731c13f0788a737a9605e4d486fb7", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18", "patch": "@@ -20163,7 +20163,7 @@ The GNAT compiler now supports dimensionality checking. The user can\n specify physical units for objects, and the compiler will verify that uses\n of these objects are compatible with their dimensions, in a fashion that is\n familiar to engineering practice. The dimensions of algebraic expressions\n-(including powers with static exponents) are computed from their consistuents.\n+(including powers with static exponents) are computed from their constituents.\n \n This feature depends on Ada 2012 aspect specifications, and is available from\n version 7.0.1 of GNAT onwards."}, {"sha": "a8f04731b939b0159501259619f11ee4ffae9297", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18", "patch": "@@ -7584,12 +7584,47 @@ package body Sem_Ch13 is\n             when N_Qualified_Expression =>\n                return Get_RList (Expression (Exp));\n \n+            when N_Case_Expression =>\n+            declare\n+               Alt     : Node_Id;\n+               Choices : List_Id;\n+               Dep     : Node_Id;\n+\n+            begin\n+               if not Is_Entity_Name (Expression (Expr))\n+                 or else Etype (Expression (Expr)) /= Typ\n+               then\n+                  Error_Msg_N\n+                    (\"expression must denaote subtype\", Expression (Expr));\n+                  return False_Range;\n+               end if;\n+\n+               --  Collect discrete choices in all True alternatives\n+\n+               Choices := New_List;\n+               Alt := First (Alternatives (Exp));\n+               while Present (Alt) loop\n+                  Dep := Expression (Alt);\n+\n+                  if not Is_Static_Expression (Dep) then\n+                     raise Non_Static;\n+\n+                  elsif Is_True (Expr_Value (Dep)) then\n+                     Append_List_To (Choices,\n+                       New_Copy_List (Discrete_Choices (Alt)));\n+                  end if;\n+\n+                  Next (Alt);\n+               end loop;\n+\n+               return Membership_Entries (First (Choices));\n+            end;\n+\n             --  Expression with actions: if no actions, dig out expression\n \n             when N_Expression_With_Actions =>\n                if Is_Empty_List (Actions (Exp)) then\n                   return Get_RList (Expression (Exp));\n-\n                else\n                   raise Non_Static;\n                end if;"}, {"sha": "db6407abd72fc434800f83601ba459c61f81e873", "filename": "gcc/ada/switch-b.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18/gcc%2Fada%2Fswitch-b.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18/gcc%2Fada%2Fswitch-b.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-b.adb?ref=ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18", "patch": "@@ -379,7 +379,7 @@ package body Switch.B is\n             Ptr := Ptr + 1;\n             List_Closure := True;\n \n-            if Switch_Chars (Ptr) = 'a' then\n+            if Ptr <= Max and then Switch_Chars (Ptr) = 'a' then\n                Ptr := Ptr + 1;\n                List_Closure_All := True;\n             end if;"}, {"sha": "48a36b791c55c74ef1e38ef24b51d6a66b4dfc03", "filename": "gcc/ada/ug_words", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18/gcc%2Fada%2Fug_words", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18/gcc%2Fada%2Fug_words", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fug_words?ref=ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18", "patch": "@@ -226,8 +226,8 @@ gcc -c          ^ GNAT COMPILE\n -gnatw.Y        ^ /WARNINGS=NOWHY_SPEC_NEEDS_BODY\n -gnatwz         ^ /WARNINGS=UNCHECKED_CONVERSIONS\n -gnatwZ         ^ /WARNINGS=NOUNCHECKED_CONVERSIONS\n--gnatw.z        ^ /WARNINGS=SIZE_ALIGN\n--gnatw.Z        ^ /WARNINGS=NOSIZE_ALIGN\n+-gnatw.z        ^ /WARNINGS=SIZE_ALIGNMENT\n+-gnatw.Z        ^ /WARNINGS=NOSIZE_ALIGNMENT\n -gnatW8         ^ /WIDE_CHARACTER_ENCODING=UTF8\n -gnatW?         ^ /WIDE_CHARACTER_ENCODING=?\n -gnaty          ^ /STYLE_CHECKS"}, {"sha": "e5e5059302c9ba683f364c55c2cb3345bed986f0", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=ff1f1705ffdb2a6d4e7682a3499e37fcaa1dfa18", "patch": "@@ -3270,9 +3270,9 @@ package VMS_Data is\n                                             \"UNCHECKED_CONVERSIONS \"       &\n                                                \"-gnatwz \"                  &\n                                             \"NOUNCHECKED_CONVERSIONS \"     &\n-                                               \"-gnatwZ\"                   &\n+                                               \"-gnatwZ \"                  &\n                                             \"SIZE_ALIGNMENT \"              &\n-                                               \"-gnatw.z\"                  &\n+                                               \"-gnatw.z \"                 &\n                                             \"NOSIZE_ALIGNMENT \"            &\n                                                \"-gnatw.Z\";\n "}]}