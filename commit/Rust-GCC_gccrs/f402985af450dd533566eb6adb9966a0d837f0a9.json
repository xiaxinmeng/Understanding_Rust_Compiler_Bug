{"sha": "f402985af450dd533566eb6adb9966a0d837f0a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQwMjk4NWFmNDUwZGQ1MzM1NjZlYjZhZGI5OTY2YTBkODM3ZjBhOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-16T18:55:44Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-16T18:55:44Z"}, "message": "* config/i386/i386.md (TLS patterns): Fix whitespace.\n\nFrom-SVN: r173802", "tree": {"sha": "a7f3112658b252572c7f98e5048ecff04567df61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7f3112658b252572c7f98e5048ecff04567df61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f402985af450dd533566eb6adb9966a0d837f0a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f402985af450dd533566eb6adb9966a0d837f0a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f402985af450dd533566eb6adb9966a0d837f0a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f402985af450dd533566eb6adb9966a0d837f0a9/comments", "author": null, "committer": null, "parents": [{"sha": "9e8d926eddf32d6a2657f251e46cc49a49b6d51f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e8d926eddf32d6a2657f251e46cc49a49b6d51f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e8d926eddf32d6a2657f251e46cc49a49b6d51f"}], "stats": {"total": 111, "additions": 60, "deletions": 51}, "files": [{"sha": "32469afc8646525c1425ee054a1e6393eb434764", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 60, "deletions": 51, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f402985af450dd533566eb6adb9966a0d837f0a9/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f402985af450dd533566eb6adb9966a0d837f0a9/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f402985af450dd533566eb6adb9966a0d837f0a9", "patch": "@@ -12355,10 +12355,11 @@\n \n (define_insn \"*tls_global_dynamic_32_gnu\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"b\")\n-\t\t    (match_operand:SI 2 \"tls_symbolic_operand\" \"\")\n-\t\t    (match_operand:SI 3 \"constant_call_address_operand\" \"z\")]\n-\t\t    UNSPEC_TLS_GD))\n+\t(unspec:SI\n+\t [(match_operand:SI 1 \"register_operand\" \"b\")\n+\t  (match_operand:SI 2 \"tls_symbolic_operand\" \"\")\n+\t  (match_operand:SI 3 \"constant_call_address_operand\" \"z\")]\n+\t UNSPEC_TLS_GD))\n    (clobber (match_scratch:SI 4 \"=d\"))\n    (clobber (match_scratch:SI 5 \"=c\"))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -12368,21 +12369,21 @@\n    (set_attr \"length\" \"12\")])\n \n (define_expand \"tls_global_dynamic_32\"\n-  [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t   (unspec:SI\n-\t\t    [(match_operand:SI 2 \"register_operand\" \"\")\n-\t\t     (match_operand:SI 1 \"tls_symbolic_operand\" \"\")\n-\t\t     (match_operand:SI 3 \"constant_call_address_operand\" \"\")]\n-\t\t    UNSPEC_TLS_GD))\n-\t      (clobber (match_scratch:SI 4 \"\"))\n-\t      (clobber (match_scratch:SI 5 \"\"))\n-\t      (clobber (reg:CC FLAGS_REG))])])\n+  [(parallel\n+    [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t  (unspec:SI [(match_operand:SI 2 \"register_operand\" \"\")\n+\t\t      (match_operand:SI 1 \"tls_symbolic_operand\" \"\")\n+\t\t      (match_operand:SI 3 \"constant_call_address_operand\" \"\")]\n+\t\t     UNSPEC_TLS_GD))\n+     (clobber (match_scratch:SI 4 \"\"))\n+     (clobber (match_scratch:SI 5 \"\"))\n+     (clobber (reg:CC FLAGS_REG))])])\n \n (define_insn \"*tls_global_dynamic_64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n \t(call:DI\n-\t  (mem:QI (match_operand:DI 2 \"constant_call_address_operand\" \"z\"))\n-\t  (match_operand:DI 3 \"\" \"\")))\n+\t (mem:QI (match_operand:DI 2 \"constant_call_address_operand\" \"z\"))\n+\t (match_operand:DI 3 \"\" \"\")))\n    (unspec:DI [(match_operand:DI 1 \"tls_symbolic_operand\" \"\")]\n \t      UNSPEC_TLS_GD)]\n   \"TARGET_64BIT\"\n@@ -12391,18 +12392,20 @@\n    (set_attr \"length\" \"16\")])\n \n (define_expand \"tls_global_dynamic_64\"\n-  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (call:DI\n-\t\t     (mem:QI (match_operand:DI 2 \"constant_call_address_operand\" \"\"))\n-\t\t     (const_int 0)))\n-\t      (unspec:DI [(match_operand:DI 1 \"tls_symbolic_operand\" \"\")]\n-\t\t\t UNSPEC_TLS_GD)])])\n+  [(parallel\n+    [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t  (call:DI\n+\t   (mem:QI (match_operand:DI 2 \"constant_call_address_operand\" \"\"))\n+\t   (const_int 0)))\n+     (unspec:DI [(match_operand:DI 1 \"tls_symbolic_operand\" \"\")]\n+\t\tUNSPEC_TLS_GD)])])\n \n (define_insn \"*tls_local_dynamic_base_32_gnu\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"b\")\n-                    (match_operand:SI 2 \"constant_call_address_operand\" \"z\")]\n-\t\t   UNSPEC_TLS_LD_BASE))\n+\t(unspec:SI\n+\t [(match_operand:SI 1 \"register_operand\" \"b\")\n+\t  (match_operand:SI 2 \"constant_call_address_operand\" \"z\")]\n+\t UNSPEC_TLS_LD_BASE))\n    (clobber (match_scratch:SI 3 \"=d\"))\n    (clobber (match_scratch:SI 4 \"=c\"))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -12412,59 +12415,65 @@\n    (set_attr \"length\" \"11\")])\n \n (define_expand \"tls_local_dynamic_base_32\"\n-  [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t   (unspec:SI [(match_operand:SI 1 \"register_operand\" \"\")\n-\t\t\t       (match_operand:SI 2 \"constant_call_address_operand\" \"\")]\n-\t\t\t      UNSPEC_TLS_LD_BASE))\n-\t      (clobber (match_scratch:SI 3 \"\"))\n-\t      (clobber (match_scratch:SI 4 \"\"))\n-\t      (clobber (reg:CC FLAGS_REG))])])\n+  [(parallel\n+     [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t   (unspec:SI\n+\t    [(match_operand:SI 1 \"register_operand\" \"\")\n+\t     (match_operand:SI 2 \"constant_call_address_operand\" \"\")]\n+\t    UNSPEC_TLS_LD_BASE))\n+      (clobber (match_scratch:SI 3 \"\"))\n+      (clobber (match_scratch:SI 4 \"\"))\n+      (clobber (reg:CC FLAGS_REG))])])\n \n (define_insn \"*tls_local_dynamic_base_64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n-\t(call:DI (mem:QI (match_operand:DI 1 \"constant_call_address_operand\" \"z\"))\n-\t\t (match_operand:DI 2 \"\" \"\")))\n+\t(call:DI\n+\t (mem:QI (match_operand:DI 1 \"constant_call_address_operand\" \"z\"))\n+\t (match_operand:DI 2 \"\" \"\")))\n    (unspec:DI [(const_int 0)] UNSPEC_TLS_LD_BASE)]\n   \"TARGET_64BIT\"\n   \"lea{q}\\t{%&@tlsld(%%rip), %%rdi|rdi, %&@tlsld[rip]}\\;call\\t%P1\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"12\")])\n \n (define_expand \"tls_local_dynamic_base_64\"\n-  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (call:DI\n-\t\t     (mem:QI (match_operand:DI 1 \"constant_call_address_operand\" \"\"))\n-\t\t     (const_int 0)))\n-\t      (unspec:DI [(const_int 0)] UNSPEC_TLS_LD_BASE)])])\n+  [(parallel\n+     [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t   (call:DI\n+\t    (mem:QI (match_operand:DI 1 \"constant_call_address_operand\" \"\"))\n+\t    (const_int 0)))\n+      (unspec:DI [(const_int 0)] UNSPEC_TLS_LD_BASE)])])\n \n ;; Local dynamic of a single variable is a lose.  Show combine how\n ;; to convert that back to global dynamic.\n \n (define_insn_and_split \"*tls_local_dynamic_32_once\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-\t(plus:SI (unspec:SI [(match_operand:SI 1 \"register_operand\" \"b\")\n-\t\t\t     (match_operand:SI 2 \"constant_call_address_operand\" \"z\")]\n-\t\t\t    UNSPEC_TLS_LD_BASE)\n-\t\t (const:SI (unspec:SI\n-\t\t\t    [(match_operand:SI 3 \"tls_symbolic_operand\" \"\")]\n-\t\t\t    UNSPEC_DTPOFF))))\n+\t(plus:SI\n+\t (unspec:SI [(match_operand:SI 1 \"register_operand\" \"b\")\n+\t\t     (match_operand:SI 2 \"constant_call_address_operand\" \"z\")]\n+\t\t    UNSPEC_TLS_LD_BASE)\n+\t (const:SI (unspec:SI\n+\t\t    [(match_operand:SI 3 \"tls_symbolic_operand\" \"\")]\n+\t\t    UNSPEC_DTPOFF))))\n    (clobber (match_scratch:SI 4 \"=d\"))\n    (clobber (match_scratch:SI 5 \"=c\"))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n   \"#\"\n   \"\"\n-  [(parallel [(set (match_dup 0)\n-\t\t   (unspec:SI [(match_dup 1) (match_dup 3) (match_dup 2)]\n-\t\t\t      UNSPEC_TLS_GD))\n-\t      (clobber (match_dup 4))\n-\t      (clobber (match_dup 5))\n-\t      (clobber (reg:CC FLAGS_REG))])])\n+  [(parallel\n+     [(set (match_dup 0)\n+\t   (unspec:SI [(match_dup 1) (match_dup 3) (match_dup 2)]\n+\t\t      UNSPEC_TLS_GD))\n+      (clobber (match_dup 4))\n+      (clobber (match_dup 5))\n+      (clobber (reg:CC FLAGS_REG))])])\n \n ;; Segment register for the thread base ptr load\n (define_mode_attr tp_seg [(SI \"gs\") (DI \"fs\")])\n \n-;; Load and add the thread base pointer from %gs:0.\n+;; Load and add the thread base pointer from %<tp_seg>:0.\n (define_insn \"*load_tp_<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(unspec:P [(const_int 0)] UNSPEC_TP))]"}]}