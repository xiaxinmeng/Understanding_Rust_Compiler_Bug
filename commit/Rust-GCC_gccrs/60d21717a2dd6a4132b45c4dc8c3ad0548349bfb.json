{"sha": "60d21717a2dd6a4132b45c4dc8c3ad0548349bfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBkMjE3MTdhMmRkNmE0MTMyYjQ1YzRkYzhjM2FkMDU0ODM0OWJmYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-11-03T17:11:18Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-11-03T17:11:18Z"}, "message": "re PR c++/40944 ([C++0x] rejects well-formed code: SFINAE, decltype, function call)\n\n\tPR c++/40944\n\t* call.c (initialize_reference): Add complain parm.\n\t* typeck.c (convert_for_initialization): Pass it.\n\t* decl.c (grok_reference_init): Likewise.\n\t* cp-tree.h: Declare it.\n\nFrom-SVN: r153856", "tree": {"sha": "b8ebe932e20c29318830ff29443737efd3e15adf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8ebe932e20c29318830ff29443737efd3e15adf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60d21717a2dd6a4132b45c4dc8c3ad0548349bfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d21717a2dd6a4132b45c4dc8c3ad0548349bfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60d21717a2dd6a4132b45c4dc8c3ad0548349bfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d21717a2dd6a4132b45c4dc8c3ad0548349bfb/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2e32c99e12b96854cccb5cf037718a6cb1df1e72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e32c99e12b96854cccb5cf037718a6cb1df1e72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e32c99e12b96854cccb5cf037718a6cb1df1e72"}], "stats": {"total": 64, "additions": 50, "deletions": 14}, "files": [{"sha": "1b87b0466b7d94c8715febe03ba01fbc9941c216", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d21717a2dd6a4132b45c4dc8c3ad0548349bfb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d21717a2dd6a4132b45c4dc8c3ad0548349bfb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=60d21717a2dd6a4132b45c4dc8c3ad0548349bfb", "patch": "@@ -1,5 +1,11 @@\n 2009-11-03  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/40944\n+\t* call.c (initialize_reference): Add complain parm.\n+\t* typeck.c (convert_for_initialization): Pass it.\n+\t* decl.c (grok_reference_init): Likewise.\n+\t* cp-tree.h: Declare it.\n+\n \tPR c++/40687\n \t* pt.c (do_auto_deduction): Diagnose inconsistent deduction.\n "}, {"sha": "674e59d686cbe6d494ebf72d81619e77146cca39", "filename": "gcc/cp/call.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d21717a2dd6a4132b45c4dc8c3ad0548349bfb/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d21717a2dd6a4132b45c4dc8c3ad0548349bfb/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=60d21717a2dd6a4132b45c4dc8c3ad0548349bfb", "patch": "@@ -7617,7 +7617,8 @@ set_up_extended_ref_temp (tree decl, tree expr, tree *cleanup, tree *initp)\n    Return the converted expression.  */\n \n tree\n-initialize_reference (tree type, tree expr, tree decl, tree *cleanup)\n+initialize_reference (tree type, tree expr, tree decl, tree *cleanup,\n+\t\t      tsubst_flags_t complain)\n {\n   conversion *conv;\n   void *p;\n@@ -7632,16 +7633,19 @@ initialize_reference (tree type, tree expr, tree decl, tree *cleanup)\n \t\t\t    LOOKUP_NORMAL);\n   if (!conv || conv->bad_p)\n     {\n-      if (!(TYPE_QUALS (TREE_TYPE (type)) & TYPE_QUAL_CONST)\n-\t  && !TYPE_REF_IS_RVALUE (type)\n-\t  && !real_lvalue_p (expr))\n-\terror (\"invalid initialization of non-const reference of \"\n-\t       \"type %qT from an rvalue of type %qT\",\n-\t       type, TREE_TYPE (expr));\n-      else\n-\terror (\"invalid initialization of reference of type \"\n-\t       \"%qT from expression of type %qT\", type,\n-\t       TREE_TYPE (expr));\n+      if (complain & tf_error)\n+\t{\n+\t  if (!(TYPE_QUALS (TREE_TYPE (type)) & TYPE_QUAL_CONST)\n+\t      && !TYPE_REF_IS_RVALUE (type)\n+\t      && !real_lvalue_p (expr))\n+\t    error (\"invalid initialization of non-const reference of \"\n+\t\t   \"type %qT from an rvalue of type %qT\",\n+\t\t   type, TREE_TYPE (expr));\n+\t  else\n+\t    error (\"invalid initialization of reference of type \"\n+\t\t   \"%qT from expression of type %qT\", type,\n+\t\t   TREE_TYPE (expr));\n+\t}\n       return error_mark_node;\n     }\n "}, {"sha": "c4b088beb5672fec4f8e5114187775d3edf8570d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d21717a2dd6a4132b45c4dc8c3ad0548349bfb/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d21717a2dd6a4132b45c4dc8c3ad0548349bfb/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=60d21717a2dd6a4132b45c4dc8c3ad0548349bfb", "patch": "@@ -4429,7 +4429,7 @@ extern tree type_passed_as\t\t\t(tree);\n extern tree convert_for_arg_passing\t\t(tree, tree);\n extern bool is_properly_derived_from\t\t(tree, tree);\n extern tree set_up_extended_ref_temp\t\t(tree, tree, tree *, tree *);\n-extern tree initialize_reference\t\t(tree, tree, tree, tree *);\n+extern tree initialize_reference\t\t(tree, tree, tree, tree *, tsubst_flags_t);\n extern tree make_temporary_var_for_ref_to_temp\t(tree, tree);\n extern tree strip_top_quals\t\t\t(tree);\n extern bool reference_related_p\t\t\t(tree, tree);"}, {"sha": "97f1ac1f4f37f41f46ea04d8dddeae273d6b4b83", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d21717a2dd6a4132b45c4dc8c3ad0548349bfb/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d21717a2dd6a4132b45c4dc8c3ad0548349bfb/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=60d21717a2dd6a4132b45c4dc8c3ad0548349bfb", "patch": "@@ -4390,7 +4390,7 @@ grok_reference_init (tree decl, tree type, tree init, tree *cleanup)\n      DECL_INITIAL for local references (instead assigning to them\n      explicitly); we need to allow the temporary to be initialized\n      first.  */\n-  tmp = initialize_reference (type, init, decl, cleanup);\n+  tmp = initialize_reference (type, init, decl, cleanup, tf_warning_or_error);\n \n   if (tmp == error_mark_node)\n     return NULL_TREE;"}, {"sha": "5b8523d8bd608faafd0bdea73e7e4efc0dd1563e", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d21717a2dd6a4132b45c4dc8c3ad0548349bfb/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d21717a2dd6a4132b45c4dc8c3ad0548349bfb/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=60d21717a2dd6a4132b45c4dc8c3ad0548349bfb", "patch": "@@ -6879,7 +6879,7 @@ convert_for_initialization (tree exp, tree type, tree rhs, int flags,\n       if (fndecl)\n \tsavew = warningcount, savee = errorcount;\n       rhs = initialize_reference (type, rhs, /*decl=*/NULL_TREE,\n-\t\t\t\t  /*cleanup=*/NULL);\n+\t\t\t\t  /*cleanup=*/NULL, complain);\n       if (fndecl)\n \t{\n \t  if (warningcount > savew)"}, {"sha": "8898d9275603b07f8bd23bcaa184c5beba59bc1d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d21717a2dd6a4132b45c4dc8c3ad0548349bfb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d21717a2dd6a4132b45c4dc8c3ad0548349bfb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=60d21717a2dd6a4132b45c4dc8c3ad0548349bfb", "patch": "@@ -1,5 +1,8 @@\n 2009-11-03  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/40944\n+\t* g++.dg/template/sfinae15.C: New.\n+\n \tPR c++/40687\n \t* g++.dg/cpp0x/auto3.C: Remove xfail.\n "}, {"sha": "27bce255db37c71bfccae89b7ec346f1e56d97c1", "filename": "gcc/testsuite/g++.dg/template/sfinae15.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d21717a2dd6a4132b45c4dc8c3ad0548349bfb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d21717a2dd6a4132b45c4dc8c3ad0548349bfb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae15.C?ref=60d21717a2dd6a4132b45c4dc8c3ad0548349bfb", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/40944\n+// { dg-options -std=c++0x }\n+// { dg-do run }\n+\n+template<typename T>\n+struct make { static T&& it(); };\n+\n+void (*pf)(int&) = 0;\n+\n+template< typename T >\n+int bar(T const& x,\n+        decltype( pf(make<T const&>::it()) )* = 0 // SFINAE!\n+        ) {\n+    return 1;\n+}\n+\n+int bar(...) {\n+    return 0;\n+}\n+\n+int main() {\n+    return bar(42);\n+}"}]}