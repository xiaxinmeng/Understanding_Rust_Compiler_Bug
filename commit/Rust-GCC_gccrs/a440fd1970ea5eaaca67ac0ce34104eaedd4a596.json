{"sha": "a440fd1970ea5eaaca67ac0ce34104eaedd4a596", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ0MGZkMTk3MGVhNWVhYWNhNjdhYzBjZTM0MTA0ZWFlZGQ0YTU5Ng==", "commit": {"author": {"name": "Alex Samuel", "email": "samuel@codesourcery.com", "date": "2000-08-28T05:23:40Z"}, "committer": {"name": "Alex Samuel", "email": "samuel@gcc.gnu.org", "date": "2000-08-28T05:23:40Z"}, "message": "cp-demangle.c (demangle_name): Initialize template_p in local name case.\n\n\t* cp-demangle.c (demangle_name): Initialize template_p in local\n\tname case.  Don't re-add substitutions as candidates.\n\t(demangle_nested_name): Use <unqualified-name>.\n\t(demangle_prefix): Likewise.  Don't add template names as\n\tsubstitution candidates twice, or re-add a substitution or the\n\tlast prefix component.\n\t(demangle_local_name): Adjust output format.\n\nFrom-SVN: r36014", "tree": {"sha": "2073ea662d95a773880aed9a170b16b5128a6fb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2073ea662d95a773880aed9a170b16b5128a6fb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a440fd1970ea5eaaca67ac0ce34104eaedd4a596", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a440fd1970ea5eaaca67ac0ce34104eaedd4a596", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a440fd1970ea5eaaca67ac0ce34104eaedd4a596", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a440fd1970ea5eaaca67ac0ce34104eaedd4a596/comments", "author": null, "committer": null, "parents": [{"sha": "f0f338480a89e47f0912f886b7c30215cbe97a37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0f338480a89e47f0912f886b7c30215cbe97a37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0f338480a89e47f0912f886b7c30215cbe97a37"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "44ca8085351aa86a1aaa8e9743cfbec1573ea909", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a440fd1970ea5eaaca67ac0ce34104eaedd4a596/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a440fd1970ea5eaaca67ac0ce34104eaedd4a596/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=a440fd1970ea5eaaca67ac0ce34104eaedd4a596", "patch": "@@ -1,3 +1,13 @@\n+2000-08-27  Alex Samuel  <samuel@codesourcery.com>\n+\n+\t* cp-demangle.c (demangle_name): Initialize template_p in local\n+\tname case.  Don't re-add substitutions as candidates.\n+\t(demangle_nested_name): Use <unqualified-name>.\n+\t(demangle_prefix): Likewise.  Don't add template names as\n+\tsubstitution candidates twice, or re-add a substitution or the\n+\tlast prefix component.\n+\t(demangle_local_name): Adjust output format.\n+\n 2000-08-25  Alex Samuel  <samuel@codesourcery.com>\n \n \t* cp-demangle.c (result_add_separated_char): Change parameter to"}, {"sha": "d8c7cedb595c7a8811b150daf0c5bb694f23d5ab", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a440fd1970ea5eaaca67ac0ce34104eaedd4a596/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a440fd1970ea5eaaca67ac0ce34104eaedd4a596/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=a440fd1970ea5eaaca67ac0ce34104eaedd4a596", "patch": "@@ -973,10 +973,11 @@ demangle_name (dm, template_p)\n      int *template_p;\n {\n   int start = substitution_start (dm);\n+  char peek = peek_char (dm);\n \n   DEMANGLE_TRACE (\"name\", dm);\n \n-  switch (peek_char (dm))\n+  switch (peek)\n     {\n     case 'N':\n       /* This is a <nested-name>.  */\n@@ -985,6 +986,7 @@ demangle_name (dm, template_p)\n \n     case 'Z':\n       RETURN_IF_ERROR (demangle_local_name (dm));\n+      *template_p = 0;\n       break;\n \n     case 'S':\n@@ -1005,8 +1007,11 @@ demangle_name (dm, template_p)\n \t If so, then we just demangled an <unqualified-template-name>.  */\n       if (peek_char (dm) == 'I') \n \t{\n-\t  RETURN_IF_ERROR (substitution_add (dm, start, 0, \n-\t\t\t\t\t     NOT_TEMPLATE_PARM));\n+\t  /* The template name is a substitution candidate, unless it\n+             was already a back-substitution.  */\n+\t  if (peek != 'S')\n+\t    RETURN_IF_ERROR (substitution_add (dm, start, 0, \n+\t\t\t\t\t       NOT_TEMPLATE_PARM));\n \t  RETURN_IF_ERROR (demangle_template_args (dm));\n \t  *template_p = 1;\n \t}\n@@ -1041,7 +1046,7 @@ demangle_name (dm, template_p)\n \n /* Demangles and emits a <nested-name>. \n \n-    <nested-name>       ::= N [<CV-qualifiers>] <prefix> <component> E  */\n+    <nested-name>     ::= N [<CV-qualifiers>] <prefix> <unqulified-name> E  */\n \n static status_t\n demangle_nested_name (dm, template_p)\n@@ -1072,25 +1077,22 @@ demangle_nested_name (dm, template_p)\n     }\n   \n   RETURN_IF_ERROR (demangle_prefix (dm, template_p));\n-  /* No need to demangle the final <component>; demangle_prefix will\n-     handle it.  */\n+  /* No need to demangle the final <unqualified-name>; demangle_prefix\n+     will handle it.  */\n   RETURN_IF_ERROR (demangle_char (dm, 'E'));\n \n   return STATUS_OK;\n }\n \n /* Demangles and emits a <prefix>.\n \n-    <prefix>            ::= <prefix> <component>\n+    <prefix>            ::= <prefix> <unqualified-name>\n                         ::= <template-prefix> <template-args>\n \t\t\t::= # empty\n \t\t\t::= <substitution>\n \n     <template-prefix>   ::= <prefix>\n-                        ::= <substitution>\n-\n-    <component>         ::= <unqualified-name>\n-                        ::= <local-name>  */\n+                        ::= <substitution>  */\n \n static status_t\n demangle_prefix (dm, template_p)\n@@ -1145,8 +1147,7 @@ demangle_prefix (dm, template_p)\n \t    RETURN_IF_ERROR (demangle_substitution (dm, template_p));\n \t  else\n \t    {\n-\t      /* It's just a name.  Remember whether it's a\n-\t\t constructor.  */\n+\t      /* It's just a name.  */\n \t      RETURN_IF_ERROR (demangle_unqualified_name (dm));\n \t      *template_p = 0;\n \t    }\n@@ -1160,8 +1161,6 @@ demangle_prefix (dm, template_p)\n \tRETURN_IF_ERROR (demangle_local_name (dm));\n       else if (peek == 'I')\n \t{\n-\t  /* The template name is a substitution candidate.  */\n-\t  RETURN_IF_ERROR (substitution_add (dm, start, 0, NOT_TEMPLATE_PARM));\n \t  RETURN_IF_ERROR (demangle_template_args (dm));\n \n \t  /* Now we want to indicate to the caller that we've\n@@ -1183,9 +1182,11 @@ demangle_prefix (dm, template_p)\n       else\n \treturn \"Unexpected character in <compound-name>.\";\n \n-      /* Add a new substitution for the prefix thus far.  */\n-      RETURN_IF_ERROR (substitution_add (dm, start, *template_p, \n-\t\t\t\t\t NOT_TEMPLATE_PARM));\n+      if (peek != 'S'\n+\t  && peek_char (dm) != 'E')\n+\t/* Add a new substitution for the prefix thus far.  */\n+\tRETURN_IF_ERROR (substitution_add (dm, start, *template_p, \n+\t\t\t\t\t   NOT_TEMPLATE_PARM));\n     }\n }\n \n@@ -2975,7 +2976,7 @@ demangle_local_name (dm)\n   RETURN_IF_ERROR (demangle_char (dm, 'Z'));\n   RETURN_IF_ERROR (demangle_encoding (dm));\n   RETURN_IF_ERROR (demangle_char (dm, 'E'));\n-  RETURN_IF_ERROR (result_append (dm, \"'s \"));\n+  RETURN_IF_ERROR (result_append (dm, \"::\"));\n \n   if (peek_char (dm) == 's')\n     {\n@@ -2988,7 +2989,6 @@ demangle_local_name (dm)\n   else\n     {\n       int unused;\n-      RETURN_IF_ERROR (result_append (dm, \"local \"));\n       /* Local name for some other entity.  Demangle its name.  */\n       RETURN_IF_ERROR (demangle_name (dm, &unused));\n       RETURN_IF_ERROR (demangle_discriminator (dm, 1));"}]}