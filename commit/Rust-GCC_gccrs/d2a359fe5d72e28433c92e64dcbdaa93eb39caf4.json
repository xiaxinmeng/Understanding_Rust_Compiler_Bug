{"sha": "d2a359fe5d72e28433c92e64dcbdaa93eb39caf4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJhMzU5ZmU1ZDcyZTI4NDMzYzkyZTY0ZGNiZGFhOTNlYjM5Y2FmNA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-14T23:34:52Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-14T23:35:03Z"}, "message": "Skip jit tests for targets that don't support -lgccjit\n\nSince libgccjit.so is linked into jit tests, skip jit tests for targets\nthat don't support -lgccjit.\n\ngcc/\n\n\tPR jit/94778\n\t* doc/sourcebuild.texi: Document effective target lgccjit.\n\ngcc/testsuite/\n\n\tPR jit/94778\n\t* jit.dg/jit.exp: Skip jit tests for targets that don't support\n\t-lgccjit.\n\t* lib/target-supports.exp (check_effective_target_lgccjit): New.", "tree": {"sha": "f234e607551cfbe42b02876e829f3ebf39a8eaa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f234e607551cfbe42b02876e829f3ebf39a8eaa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2a359fe5d72e28433c92e64dcbdaa93eb39caf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2a359fe5d72e28433c92e64dcbdaa93eb39caf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2a359fe5d72e28433c92e64dcbdaa93eb39caf4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2a359fe5d72e28433c92e64dcbdaa93eb39caf4/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f30a274913bde0a1e01a86ce7c85e3be34ea13f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f30a274913bde0a1e01a86ce7c85e3be34ea13f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f30a274913bde0a1e01a86ce7c85e3be34ea13f"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "d855ee6d86cf5bffa9228668a8ea2ac9ec726483", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a359fe5d72e28433c92e64dcbdaa93eb39caf4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a359fe5d72e28433c92e64dcbdaa93eb39caf4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2a359fe5d72e28433c92e64dcbdaa93eb39caf4", "patch": "@@ -1,3 +1,8 @@\n+2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR jit/94778\n+\t* doc/sourcebuild.texi: Document effective target lgccjit.\n+\n 2020-05-14  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/gcn/gcn-valu.md (add<mode>3_zext_dup): Change to a"}, {"sha": "0f70e4baca963e1c14adbbd8ec0d01f20ab88362", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a359fe5d72e28433c92e64dcbdaa93eb39caf4/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a359fe5d72e28433c92e64dcbdaa93eb39caf4/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=d2a359fe5d72e28433c92e64dcbdaa93eb39caf4", "patch": "@@ -2494,6 +2494,9 @@ Target uses comdat groups.\n @item indirect_calls\n Target supports indirect calls, i.e. calls where the target is not\n constant.\n+\n+@item lgccjit\n+Target supports -lgccjit, i.e. libgccjit.so can be linked into jit tests.\n @end table\n \n @subsubsection Local to tests in @code{gcc.target/i386}"}, {"sha": "8dfdfc6c3c0f21895b96080dd97fa413072e8988", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a359fe5d72e28433c92e64dcbdaa93eb39caf4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a359fe5d72e28433c92e64dcbdaa93eb39caf4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d2a359fe5d72e28433c92e64dcbdaa93eb39caf4", "patch": "@@ -1,3 +1,10 @@\n+2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR jit/94778\n+\t* jit.dg/jit.exp: Skip jit tests for targets that don't support\n+\t-lgccjit.\n+\t* lib/target-supports.exp (check_effective_target_lgccjit): New.\n+\n 2020-05-14  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* testsuite/gcc.target/gcn/gcn.exp: New file."}, {"sha": "2f54681713b86c44069da88efd769e01f7c7bae4", "filename": "gcc/testsuite/jit.dg/jit.exp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a359fe5d72e28433c92e64dcbdaa93eb39caf4/gcc%2Ftestsuite%2Fjit.dg%2Fjit.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a359fe5d72e28433c92e64dcbdaa93eb39caf4/gcc%2Ftestsuite%2Fjit.dg%2Fjit.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fjit.exp?ref=d2a359fe5d72e28433c92e64dcbdaa93eb39caf4", "patch": "@@ -38,6 +38,11 @@ load_lib gcc.exp\n load_lib g++.exp\n load_lib dejagnu.exp\n \n+# Skip these tests for targets that don't support -lgccjit\n+if { ![check_effective_target_lgccjit] } {\n+    return\n+}\n+\n # Look for lines of the form:\n #   definitely lost: 11,316 bytes in 235 blocks\n #   indirectly lost: 352 bytes in 4 blocks"}, {"sha": "3e91a81dd5a15ca7b5baad8c0fb46cf794bbe3b8", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a359fe5d72e28433c92e64dcbdaa93eb39caf4/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a359fe5d72e28433c92e64dcbdaa93eb39caf4/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=d2a359fe5d72e28433c92e64dcbdaa93eb39caf4", "patch": "@@ -10234,3 +10234,18 @@ proc check_effective_target_indirect_calls { } {\n   }\n   return 1\n }\n+\n+# Return 1 if we can use the -lgccjit option, 0 otherwise.\n+\n+proc check_effective_target_lgccjit { } {\n+  if { [info procs jit_target_compile] == \"\" } then {\n+    global GCC_UNDER_TEST\n+    if ![info exists GCC_UNDER_TEST] {\n+      set GCC_UNDER_TEST \"[find_gcc]\"\n+    }\n+    proc jit_target_compile { source dest type options } [info body gcc_target_compile]\n+  }\n+  return [check_no_compiler_messages lgccjit executable {\n+     int main() { return 0; }\n+  } \"-lgccjit\"]\n+}"}]}