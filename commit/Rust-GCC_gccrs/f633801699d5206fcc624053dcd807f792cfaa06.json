{"sha": "f633801699d5206fcc624053dcd807f792cfaa06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYzMzgwMTY5OWQ1MjA2ZmNjNjI0MDUzZGNkODA3Zjc5MmNmYWEwNg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-11-28T00:08:16Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-11-28T00:08:16Z"}, "message": "compiler: Implement //go:nointerface comments.\n\nFrom-SVN: r193874", "tree": {"sha": "35fac20e209e18c93ef872452387ae58623599d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35fac20e209e18c93ef872452387ae58623599d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f633801699d5206fcc624053dcd807f792cfaa06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f633801699d5206fcc624053dcd807f792cfaa06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f633801699d5206fcc624053dcd807f792cfaa06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f633801699d5206fcc624053dcd807f792cfaa06/comments", "author": null, "committer": null, "parents": [{"sha": "cfbeaedfddbcb4d0bf26436b9d9006667f1a2dde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfbeaedfddbcb4d0bf26436b9d9006667f1a2dde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfbeaedfddbcb4d0bf26436b9d9006667f1a2dde"}], "stats": {"total": 133, "additions": 126, "deletions": 7}, "files": [{"sha": "766fe908095a83b4818a0b420682075a79989d8a", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f633801699d5206fcc624053dcd807f792cfaa06/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f633801699d5206fcc624053dcd807f792cfaa06/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=f633801699d5206fcc624053dcd807f792cfaa06", "patch": "@@ -3074,8 +3074,8 @@ Function::Function(Function_type* type, Function* enclosing, Block* block,\n   : type_(type), enclosing_(enclosing), results_(NULL),\n     closure_var_(NULL), block_(block), location_(location), labels_(),\n     local_type_count_(0), fndecl_(NULL), defer_stack_(NULL),\n-    results_are_named_(false), calls_recover_(false), is_recover_thunk_(false),\n-    has_recover_thunk_(false)\n+    results_are_named_(false), nointerface_(false), calls_recover_(false),\n+    is_recover_thunk_(false), has_recover_thunk_(false)\n {\n }\n "}, {"sha": "e23b3c6507266d231af33c3d2239d1321877259d", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f633801699d5206fcc624053dcd807f792cfaa06/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f633801699d5206fcc624053dcd807f792cfaa06/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=f633801699d5206fcc624053dcd807f792cfaa06", "patch": "@@ -911,6 +911,24 @@ class Function\n   results_are_named() const\n   { return this->results_are_named_; }\n \n+  // Whether this method should not be included in the type\n+  // descriptor.\n+  bool\n+  nointerface() const\n+  {\n+    go_assert(this->is_method());\n+    return this->nointerface_;\n+  }\n+\n+  // Record that this method should not be included in the type\n+  // descriptor.\n+  void\n+  set_nointerface()\n+  {\n+    go_assert(this->is_method());\n+    this->nointerface_ = true;\n+  }\n+\n   // Add a new field to the closure variable.\n   void\n   add_closure_field(Named_object* var, Location loc)\n@@ -1113,6 +1131,8 @@ class Function\n   Temporary_statement* defer_stack_;\n   // True if the result variables are named.\n   bool results_are_named_;\n+  // True if this method should not be included in the type descriptor.\n+  bool nointerface_;\n   // True if this function calls the predeclared recover function.\n   bool calls_recover_;\n   // True if this a thunk built for a function which calls recover."}, {"sha": "804146d0e9fc56c8c5d701265d9fbbb11351ab55", "filename": "gcc/go/gofrontend/lex.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f633801699d5206fcc624053dcd807f792cfaa06/gcc%2Fgo%2Fgofrontend%2Flex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f633801699d5206fcc624053dcd807f792cfaa06/gcc%2Fgo%2Fgofrontend%2Flex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.cc?ref=f633801699d5206fcc624053dcd807f792cfaa06", "patch": "@@ -442,7 +442,8 @@ Token::print(FILE* file) const\n Lex::Lex(const char* input_file_name, FILE* input_file, Linemap* linemap)\n   : input_file_name_(input_file_name), input_file_(input_file),\n     linemap_(linemap), linebuf_(NULL), linebufsize_(120), linesize_(0),\n-    lineoff_(0), lineno_(0), add_semi_at_eol_(false), extern_()\n+    lineoff_(0), lineno_(0), add_semi_at_eol_(false), saw_nointerface_(false),\n+    extern_()\n {\n   this->linebuf_ = new char[this->linebufsize_];\n   this->linemap_->start_file(input_file_name, 0);\n@@ -1704,6 +1705,12 @@ Lex::skip_cpp_comment()\n \tthis->extern_ = std::string(p, plend - p);\n     }\n \n+  // For field tracking analysis: a //go:nointerface comment means\n+  // that the next interface method should not be stored in the type\n+  // descriptor.  This permits it to be discarded if it is not needed.\n+  if (this->lineoff_ == 2 && memcmp(p, \"go:nointerface\", 14) == 0)\n+    this->saw_nointerface_ = true;\n+\n   while (p < pend)\n     {\n       this->lineoff_ = p - this->linebuf_;"}, {"sha": "fc9258b880a33978c80135369fbd040088962053", "filename": "gcc/go/gofrontend/lex.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f633801699d5206fcc624053dcd807f792cfaa06/gcc%2Fgo%2Fgofrontend%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f633801699d5206fcc624053dcd807f792cfaa06/gcc%2Fgo%2Fgofrontend%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.h?ref=f633801699d5206fcc624053dcd807f792cfaa06", "patch": "@@ -349,6 +349,16 @@ class Lex\n   extern_name() const\n   { return this->extern_; }\n \n+  // Return whether we have seen a //go:nointerface comment, clearing\n+  // the flag.\n+  bool\n+  get_and_clear_nointerface()\n+  {\n+    bool ret = this->saw_nointerface_;\n+    this->saw_nointerface_ = false;\n+    return ret;\n+  }\n+\n   // Return whether the identifier NAME should be exported.  NAME is a\n   // mangled name which includes only ASCII characters.\n   static bool\n@@ -483,6 +493,8 @@ class Lex\n   size_t lineno_;\n   // Whether to add a semicolon if we see a newline now.\n   bool add_semi_at_eol_;\n+  // Whether we just saw a magic go:nointerface comment.\n+  bool saw_nointerface_;\n   // The external name to use for a function declaration, from a magic\n   // //extern comment.\n   std::string extern_;"}, {"sha": "fe463c7d66f7afe56941d54db125107bb774256f", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f633801699d5206fcc624053dcd807f792cfaa06/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f633801699d5206fcc624053dcd807f792cfaa06/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=f633801699d5206fcc624053dcd807f792cfaa06", "patch": "@@ -1280,14 +1280,20 @@ void\n Parse::declaration()\n {\n   const Token* token = this->peek_token();\n+\n+  bool saw_nointerface = this->lex_->get_and_clear_nointerface();\n+  if (saw_nointerface && !token->is_keyword(KEYWORD_FUNC))\n+    warning_at(token->location(), 0,\n+\t       \"ignoring magic //go:nointerface comment before non-method\");\n+\n   if (token->is_keyword(KEYWORD_CONST))\n     this->const_decl();\n   else if (token->is_keyword(KEYWORD_TYPE))\n     this->type_decl();\n   else if (token->is_keyword(KEYWORD_VAR))\n     this->var_decl();\n   else if (token->is_keyword(KEYWORD_FUNC))\n-    this->function_decl();\n+    this->function_decl(saw_nointerface);\n   else\n     {\n       error_at(this->location(), \"expected declaration\");\n@@ -2166,8 +2172,11 @@ Parse::simple_var_decl_or_assignment(const std::string& name,\n // inside the asm.  This extension will be removed at some future\n // date.  It has been replaced with //extern comments.\n \n+// SAW_NOINTERFACE is true if we saw a magic //go:nointerface comment,\n+// which means that we omit the method from the type descriptor.\n+\n void\n-Parse::function_decl()\n+Parse::function_decl(bool saw_nointerface)\n {\n   go_assert(this->peek_token()->is_keyword(KEYWORD_FUNC));\n   Location location = this->location();\n@@ -2180,6 +2189,12 @@ Parse::function_decl()\n       rec = this->receiver();\n       token = this->peek_token();\n     }\n+  else if (saw_nointerface)\n+    {\n+      warning_at(location, 0,\n+\t\t \"ignoring magic //go:nointerface comment before non-method\");\n+      saw_nointerface = false;\n+    }\n \n   if (!token->is_identifier())\n     {\n@@ -2256,6 +2271,11 @@ Parse::function_decl()\n \t\t}\n \t    }\n \t}\n+\n+      if (saw_nointerface)\n+\twarning_at(location, 0,\n+\t\t   (\"ignoring magic //go:nointerface comment \"\n+\t\t    \"before declaration\"));\n     }\n   else\n     {\n@@ -2268,9 +2288,13 @@ Parse::function_decl()\n \t    this->gogo_->add_erroneous_name(name);\n \t  name = this->gogo_->pack_hidden_name(\"_\", false);\n \t}\n-      this->gogo_->start_function(name, fntype, true, location);\n+      named_object = this->gogo_->start_function(name, fntype, true, location);\n       Location end_loc = this->block();\n       this->gogo_->finish_function(end_loc);\n+      if (saw_nointerface\n+\t  && !this->is_erroneous_function_\n+\t  && named_object->is_function())\n+\tnamed_object->func_value()->set_nointerface();\n       this->is_erroneous_function_ = hold_is_erroneous_function;\n     }\n }"}, {"sha": "9743bb52ebfc3cab98c75172803b4b981a76d902", "filename": "gcc/go/gofrontend/parse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f633801699d5206fcc624053dcd807f792cfaa06/gcc%2Fgo%2Fgofrontend%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f633801699d5206fcc624053dcd807f792cfaa06/gcc%2Fgo%2Fgofrontend%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.h?ref=f633801699d5206fcc624053dcd807f792cfaa06", "patch": "@@ -214,7 +214,7 @@ class Parse\n   void simple_var_decl_or_assignment(const std::string&, Location,\n \t\t\t\t     bool may_be_composite_lit,\n \t\t\t\t     Range_clause*, Type_switch*);\n-  void function_decl();\n+  void function_decl(bool saw_nointerface);\n   Typed_identifier* receiver();\n   Expression* operand(bool may_be_sink);\n   Expression* enclosing_var_reference(Named_object*, Named_object*,"}, {"sha": "7a4345dfa2cc853e2b90d06bf7069fe7390b27c0", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f633801699d5206fcc624053dcd807f792cfaa06/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f633801699d5206fcc624053dcd807f792cfaa06/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=f633801699d5206fcc624053dcd807f792cfaa06", "patch": "@@ -2068,6 +2068,13 @@ Type::methods_constructor(Gogo* gogo, Type* methods_type,\n \t    continue;\n \t  if (only_value_methods && !p->second->is_value_method())\n \t    continue;\n+\n+\t  // This is where we implement the magic //go:nointerface\n+\t  // comment.  If we saw that comment, we don't add this\n+\t  // method to the type descriptor.\n+\t  if (p->second->nointerface())\n+\t    continue;\n+\n \t  smethods.push_back(std::make_pair(p->first, p->second));\n \t}\n     }\n@@ -6891,6 +6898,24 @@ Interface_type::implements_interface(const Type* t, std::string* reason) const\n \t    }\n \t  return false;\n \t}\n+\n+      // If the magic //go:nointerface comment was used, the method\n+      // may not be used to implement interfaces.\n+      if (m->nointerface())\n+\t{\n+\t  if (reason != NULL)\n+\t    {\n+\t      std::string n = Gogo::message_name(p->name());\n+\t      size_t len = 100 + n.length();\n+\t      char* buf = new char[len];\n+\t      snprintf(buf, len,\n+\t\t       _(\"method %s%s%s is marked go:nointerface\"),\n+\t\t       open_quote, n.c_str(), close_quote);\n+\t      reason->assign(buf);\n+\t      delete[] buf;\n+\t    }\n+\t  return false;\n+\t}\n     }\n \n   return true;\n@@ -7530,6 +7555,15 @@ Named_method::do_bind_method(Expression* expr, Location location) const\n   return bme;\n }\n \n+// Return whether this method should not participate in interfaces.\n+\n+bool\n+Named_method::do_nointerface() const\n+{\n+  Named_object* no = this->named_object_;\n+  return no->is_function() && no->func_value()->nointerface();\n+}\n+\n // Class Interface_method.\n \n // Bind a method to an object.\n@@ -8834,6 +8868,9 @@ Type::build_stub_methods(Gogo* gogo, const Type* type, const Methods* methods,\n \t  Type::build_one_stub_method(gogo, m, buf, stub_params,\n \t\t\t\t      fntype->is_varargs(), location);\n \t  gogo->finish_function(fntype->location());\n+\n+\t  if (m->nointerface() && stub->is_function())\n+\t    stub->func_value()->set_nointerface();\n \t}\n \n       m->set_stub_object(stub);"}, {"sha": "2ab21f65355181405169ab4e8bc7e8a98bd8b917", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f633801699d5206fcc624053dcd807f792cfaa06/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f633801699d5206fcc624053dcd807f792cfaa06/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=f633801699d5206fcc624053dcd807f792cfaa06", "patch": "@@ -179,6 +179,12 @@ class Method\n     this->stub_ = no;\n   }\n \n+  // Return true if this method should not participate in any\n+  // interfaces.\n+  bool\n+  nointerface() const\n+  { return this->do_nointerface(); }\n+\n  protected:\n   // These objects are only built by the child classes.\n   Method(const Field_indexes* field_indexes, unsigned int depth,\n@@ -204,6 +210,10 @@ class Method\n   virtual Expression*\n   do_bind_method(Expression* expr, Location location) const = 0;\n \n+  // Return whether this method should not participate in interfaces.\n+  virtual bool\n+  do_nointerface() const = 0;\n+\n  private:\n   // The sequence of field indexes used for this method.  If this is\n   // NULL, then the method is defined for the current type.\n@@ -254,6 +264,10 @@ class Named_method : public Method\n   Expression*\n   do_bind_method(Expression* expr, Location location) const;\n \n+  // Return whether this method should not participate in interfaces.\n+  bool\n+  do_nointerface() const;\n+\n  private:\n   // The method itself.  For a method which needs a stub, this starts\n   // out as the underlying method, and is later replaced with the stub\n@@ -295,6 +309,11 @@ class Interface_method : public Method\n   Expression*\n   do_bind_method(Expression* expr, Location location) const;\n \n+  // Return whether this method should not participate in interfaces.\n+  bool\n+  do_nointerface() const\n+  { return false; }\n+\n  private:\n   // The name of the interface method to call.\n   std::string name_;"}]}