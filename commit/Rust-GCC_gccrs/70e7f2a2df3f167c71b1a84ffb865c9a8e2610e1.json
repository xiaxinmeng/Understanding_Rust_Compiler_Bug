{"sha": "70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBlN2YyYTJkZjNmMTY3YzcxYjFhODRmZmI4NjVjOWE4ZTI2MTBlMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-05-24T06:13:44Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-05-24T06:13:44Z"}, "message": "ipa-utils.h (method_class_type): Remove.\n\n\n\t* ipa-utils.h (method_class_type): Remove.\n\t* cgraphunit.c (walk_polymorphic_call_targets): Use TYPE_METHOD_BASETYPE.\n\t* ipa-devirt.c (type_in_anonymous_namespace_p): Check that it is called\n\ton main variants only.\n\t(method_class_type): Remove.\n\t(update_type_inheritance_graph): Use TYPE_METHOD_BASETYPE.\n\t(build_type_inheritance_graph): Likewise.\n\t* ipa-icf.c (sem_function::equals_wpa): Likewise.\n\t* pa-polymorphic-call.c (decl_maybe_in_construction_p, \n\tcheck_stmt_for_type_change): Use TYPE_METHOD_BASETYPE.\n\nFrom-SVN: r223629", "tree": {"sha": "be52c0776019c9e0eed372c7670a1d87ad3d6732", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be52c0776019c9e0eed372c7670a1d87ad3d6732"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1/comments", "author": null, "committer": null, "parents": [{"sha": "66f0bbd50c8cb13422f8cb60eb1a1077972c58cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66f0bbd50c8cb13422f8cb60eb1a1077972c58cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66f0bbd50c8cb13422f8cb60eb1a1077972c58cb"}], "stats": {"total": 67, "additions": 36, "deletions": 31}, "files": [{"sha": "33f58654417699399e2970bacfbd4befbae2f060", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1", "patch": "@@ -1,3 +1,16 @@\n+2015-05-22  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-utils.h (method_class_type): Remove.\n+\t* cgraphunit.c (walk_polymorphic_call_targets): Use TYPE_METHOD_BASETYPE.\n+\t* ipa-devirt.c (type_in_anonymous_namespace_p): Check that it is called\n+\ton main variants only.\n+\t(method_class_type): Remove.\n+\t(update_type_inheritance_graph): Use TYPE_METHOD_BASETYPE.\n+\t(build_type_inheritance_graph): Likewise.\n+\t* ipa-icf.c (sem_function::equals_wpa): Likewise.\n+\t* pa-polymorphic-call.c (decl_maybe_in_construction_p, \n+\tcheck_stmt_for_type_change): Use TYPE_METHOD_BASETYPE.\n+\n 2015-05-22  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree.c (prototype_p, virtual_method_call_p, obj_type_ref_class,"}, {"sha": "8d97163cf991e91d9bf8cefd65c006082771aab4", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1", "patch": "@@ -866,9 +866,8 @@ walk_polymorphic_call_targets (hash_set<void *> *reachable_call_targets,\n \t\t  (TREE_TYPE (targets[i]->decl))\n \t\t   == METHOD_TYPE\n \t      && !type_in_anonymous_namespace_p\n-\t\t   (method_class_type\n-\t\t     (TREE_TYPE (targets[i]->decl))))\n-\t  enqueue_node (targets[i]);\n+\t\t   (TYPE_METHOD_BASETYPE (TREE_TYPE (targets[i]->decl))))\n+\t    enqueue_node (targets[i]);\n \t}\n     }\n "}, {"sha": "77ecd0d2d8311b47f958e71530efce38036c6fea", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1", "patch": "@@ -2279,18 +2279,6 @@ dump_type_inheritance_graph (FILE *f)\n     }\n }\n \n-/* Given method type T, return type of class it belongs to.\n-   Look up this pointer and get its type.    */\n-\n-tree\n-method_class_type (const_tree t)\n-{\n-  tree first_parm_type = TREE_VALUE (TYPE_ARG_TYPES (t));\n-  gcc_assert (TREE_CODE (t) == METHOD_TYPE);\n-\n-  return TREE_TYPE (first_parm_type);\n-}\n-\n /* Initialize IPA devirt and build inheritance tree graph.  */\n \n void\n@@ -2314,8 +2302,7 @@ build_type_inheritance_graph (void)\n     if (is_a <cgraph_node *> (n)\n \t&& DECL_VIRTUAL_P (n->decl)\n \t&& n->real_symbol_p ())\n-      get_odr_type (TYPE_MAIN_VARIANT (method_class_type (TREE_TYPE (n->decl))),\n-\t\t    true);\n+      get_odr_type (TYPE_METHOD_BASETYPE (TREE_TYPE (n->decl)), true);\n \n     /* Look also for virtual tables of types that do not define any methods.\n  \n@@ -3446,8 +3433,7 @@ update_type_inheritance_graph (void)\n     if (DECL_VIRTUAL_P (n->decl)\n \t&& !n->definition\n \t&& n->real_symbol_p ())\n-      get_odr_type (method_class_type (TYPE_MAIN_VARIANT (TREE_TYPE (n->decl))),\n-\t\t\t\t       true);\n+      get_odr_type (TYPE_METHOD_BASETYPE (TREE_TYPE (n->decl)), true);\n   timevar_pop (TV_IPA_INHERITANCE);\n }\n "}, {"sha": "190cd4c43d9232f1d910596c9b8aa38f3c62a7c3", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1", "patch": "@@ -663,8 +663,8 @@ sem_function::equals_wpa (sem_item *item,\n       if (TREE_CODE (TREE_TYPE (item->decl)) != METHOD_TYPE)\n         return return_false_with_msg (\"DECL_CXX_CONSTURCTOR type mismatch\");\n       else if (!func_checker::compatible_polymorphic_types_p\n-\t\t (method_class_type (TREE_TYPE (decl)),\n-\t\t  method_class_type (TREE_TYPE (item->decl)), false))\n+\t\t (TYPE_METHOD_BASETYPE (TREE_TYPE (decl)),\n+\t\t  TYPE_METHOD_BASETYPE (TREE_TYPE (item->decl)), false))\n         return return_false_with_msg (\"ctor polymorphic type mismatch\");\n     }\n \n@@ -753,8 +753,8 @@ sem_function::equals_wpa (sem_item *item,\n       if (TREE_CODE (TREE_TYPE (decl)) != TREE_CODE (TREE_TYPE (item->decl)))\n \treturn return_false_with_msg (\"METHOD_TYPE and FUNCTION_TYPE mismatch\");\n       if (!func_checker::compatible_polymorphic_types_p\n-\t   (method_class_type (TREE_TYPE (decl)),\n-\t    method_class_type (TREE_TYPE (item->decl)), false))\n+\t   (TYPE_METHOD_BASETYPE (TREE_TYPE (decl)),\n+\t    TYPE_METHOD_BASETYPE (TREE_TYPE (item->decl)), false))\n \treturn return_false_with_msg (\"THIS pointer ODR type mismatch\");\n     }\n \n@@ -2722,14 +2722,14 @@ sem_item_optimizer::update_hash_by_addr_refs ()\n \t{\n \t  if (TREE_CODE (TREE_TYPE (m_items[i]->decl)) == METHOD_TYPE\n \t      && contains_polymorphic_type_p\n-\t\t   (method_class_type (TREE_TYPE (m_items[i]->decl)))\n+\t\t   (TYPE_METHOD_BASETYPE (TREE_TYPE (m_items[i]->decl)))\n \t      && (DECL_CXX_CONSTRUCTOR_P (m_items[i]->decl)\n \t\t  || (static_cast<sem_function *> (m_items[i])->param_used_p (0)\n \t\t      && static_cast<sem_function *> (m_items[i])\n \t\t\t   ->compare_polymorphic_p ())))\n \t     {\n \t        tree class_type\n-\t\t  = method_class_type (TREE_TYPE (m_items[i]->decl));\n+\t\t  = TYPE_METHOD_BASETYPE (TREE_TYPE (m_items[i]->decl));\n \t\tinchash::hash hstate (m_items[i]->hash);\n \n \t\tif (TYPE_NAME (class_type)"}, {"sha": "b69f54184d076beda22428427ffacc8bb3bdf630", "filename": "gcc/ipa-polymorphic-call.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1/gcc%2Fipa-polymorphic-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1/gcc%2Fipa-polymorphic-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-polymorphic-call.c?ref=70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1", "patch": "@@ -588,7 +588,7 @@ decl_maybe_in_construction_p (tree base, tree outer_type,\n        block = BLOCK_SUPERCONTEXT (block))\n     if (tree fn = inlined_polymorphic_ctor_dtor_block_p (block, check_clones))\n       {\n-\ttree type = TYPE_MAIN_VARIANT (method_class_type (TREE_TYPE (fn)));\n+\ttree type = TYPE_METHOD_BASETYPE (TREE_TYPE (fn));\n \n \tif (!outer_type || !types_odr_comparable (type, outer_type))\n \t  {\n@@ -618,7 +618,7 @@ decl_maybe_in_construction_p (tree base, tree outer_type,\n \t\t  && !DECL_CXX_DESTRUCTOR_P (function)))\n \t    return false;\n \t}\n-      tree type = TYPE_MAIN_VARIANT (method_class_type (TREE_TYPE (function)));\n+      tree type = TYPE_METHOD_BASETYPE (TREE_TYPE (function));\n       if (!outer_type || !types_odr_comparable (type, outer_type))\n \t{\n \t  if (TREE_CODE (type) == RECORD_TYPE\n@@ -1399,7 +1399,7 @@ check_stmt_for_type_change (ao_ref *ao ATTRIBUTE_UNUSED, tree vdef, void *data)\n \t  && gimple_call_num_args (stmt))\n       {\n \ttree op = walk_ssa_copies (gimple_call_arg (stmt, 0));\n-\ttree type = method_class_type (TREE_TYPE (fn));\n+\ttree type = TYPE_METHOD_BASETYPE (TREE_TYPE (fn));\n \tHOST_WIDE_INT offset = 0, size, max_size;\n \n \tif (dump_file)"}, {"sha": "a171c5645080a8ed04e4c732c73c348ced11cf55", "filename": "gcc/ipa-utils.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1/gcc%2Fipa-utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1/gcc%2Fipa-utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.h?ref=70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1", "patch": "@@ -72,7 +72,6 @@ void dump_possible_polymorphic_call_targets (FILE *, tree, HOST_WIDE_INT,\n bool possible_polymorphic_call_target_p (tree, HOST_WIDE_INT,\n \t\t\t\t         const ipa_polymorphic_call_context &,\n \t\t\t\t\t struct cgraph_node *);\n-tree method_class_type (const_tree);\n tree inlined_polymorphic_ctor_dtor_block_p (tree, bool);\n bool decl_maybe_in_construction_p (tree, tree, gimple, tree);\n tree vtable_pointer_value_to_binfo (const_tree);"}, {"sha": "eb6fd41a696f59904aae22a46b54f97cd02267c2", "filename": "gcc/ipa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1", "patch": "@@ -197,7 +197,7 @@ walk_polymorphic_call_targets (hash_set<void *> *reachable_call_targets,\n \t     unused.  */\n \t  if (TREE_CODE (TREE_TYPE (n->decl)) == METHOD_TYPE\n \t      && type_in_anonymous_namespace_p\n-\t\t    (method_class_type (TREE_TYPE (n->decl))))\n+\t\t    (TYPE_METHOD_BASETYPE (TREE_TYPE (n->decl))))\n \t    continue;\n \n \t   symtab_node *body = n->function_symbol ();"}, {"sha": "caffa59d015a53127d5155ef659d6ab054cb0b6f", "filename": "gcc/tree.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=70e7f2a2df3f167c71b1a84ffb865c9a8e2610e1", "patch": "@@ -13262,7 +13262,15 @@ verify_type (const_tree t)\n \t}\n     }\n   \n-\n+  /* ipa-devirt makes an assumption that TYPE_METHOD_BASETYPE is always\n+     TYPE_MAIN_VARIANT and it would be odd to add methods only to variatns\n+     of a type. */\n+  if (TREE_CODE (t) == METHOD_TYPE\n+      && TYPE_MAIN_VARIANT (TYPE_METHOD_BASETYPE (t)) != TYPE_METHOD_BASETYPE (t))\n+    {\n+\terror (\"TYPE_METHOD_BASETYPE is not main variant\");\n+\terror_found = true;\n+    }\n \n   if (error_found)\n     {"}]}