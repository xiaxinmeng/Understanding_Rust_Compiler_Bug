{"sha": "d08236359eb22918ba067489edcec02857109d09", "node_id": "C_kwDOANBUbNoAKGQwODIzNjM1OWViMjI5MThiYTA2NzQ4OWVkY2VjMDI4NTcxMDlkMDk", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-12-02T03:11:55Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-12-02T16:40:14Z"}, "message": "rs6000: Enable new built-in support, with test suite and altivec.h changes\n\nThis patch enables the new built-in infastructure for the Power back end.\nTo avoid any patches causing regressions that would affect bisection, this is a\ncombined patch that also includes all the test suite changes and the necessary\nmodifications to altivec.h.  The patches included here are the following:\n\nhttps://gcc.gnu.org/pipermail/gcc-patches/2021-November/584638.html\nhttps://gcc.gnu.org/pipermail/gcc-patches/2021-September/578613.html\nhttps://gcc.gnu.org/pipermail/gcc-patches/2021-November/584829.html\nhttps://gcc.gnu.org/pipermail/gcc-patches/2021-September/578614.html\n\nThe third of these four was broken up into multiple patches for review, but\neffectively all pieces of it were accepted after an independent patch that\nmodified the error handling for overloaded builtins.\n\n2021-12-02  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/altivec.h: Delete a number of #defines that are\tnow\n\tsuperfluous.  Alphabetize.  Include rs6000-vecdefines.h.  Include some\n\tsynonyms.\n\t* config/rs6000/rs6000-builtin-new.def (CMPB): Flag as no32bit.\n\t(BPERMD): Flag as 32bit (needing special handling for 32-bit).\n\t(UNPACK_TD): Return unsigned long long instead of unsigned long.\n\t(GET_TEXASR): Return unsigned long instead of unsigned long long.\n\t(GET_TEXASRU): Likewise.\n\t(GET_TFHAR): Likewise.\n\t(GET_TFIAR): Likewise.\n\t(SET_TEXASR): Pass unsigned long instead of unsigned long long.\n\t(SET_TEXASRU): Likewise.\n\t(SET_TFHAR): Likewise.\n\t(SET_TFIAR): Likewise.\n\t(TABORTDC): Likewise.\n\t(TABORTDCI): Likewise.\n\t* config/rs6000/rs6000-call.c (rs6000_expand_new_builtin): Fix error\n\thandling for no32bit.  Add 32bit handling for RS6000_BIF_BPERMD.\n\t* config/rs6000/rs6000-gen-builtins.c (write_init_file): Initialize\n\tnew_builtins_are_live to 1.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/bfp/scalar-extract-exp-2.c: Adjust expected error\n\tmessage.\n\t* gcc.target/powerpc/bfp/scalar-extract-sig-2.c: Likewise.\n\t* gcc.target/powerpc/bfp/scalar-insert-exp-2.c: Likewise.\n\t* gcc.target/powerpc/bfp/scalar-insert-exp-5.c: Likewise.\n\t* gcc.target/powerpc/bfp/scalar-insert-exp-8.c: Likewise.\n\t* gcc.target/powerpc/bfp/scalar-test-neg-2.c: Likewise.\n\t* gcc.target/powerpc/bfp/scalar-test-neg-3.c: Likewise.\n\t* gcc.target/powerpc/bfp/scalar-test-neg-5.c: Likewise.\n\t* gcc.target/powerpc/byte-in-set-2.c: Likewise.\n\t* gcc.target/powerpc/cmpb-2.c: Likewise.\n\t* gcc.target/powerpc/cmpb-3.c: Likewise.\n\t* gcc.target/powerpc/cmpb32-2.c: Likewise.\n\t* gcc.target/powerpc/crypto-builtin-2.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-splat-floatdouble.c: Remove invalid\n\ttest and adjust xxpermdi count.\n\t* gcc.target/powerpc/fold-vec-splat-longlong.c: Remove invalid\n\ttests and adjust instruction counts.\n\t* gcc.target/powerpc/fold-vec-splat-misc-invalid.c: Adjust expected\n\terror messages.\n\t* gcc.target/powerpc/int_128bit-runnable.c: Adjust instruction counts.\n\t* gcc.target/powerpc/pr80315-1.c: Adjust expected error message.\n\t* gcc.target/powerpc/pr80315-2.c: Likewise.\n\t* gcc.target/powerpc/pr80315-3.c: Likewise.\n\t* gcc.target/powerpc/pr80315-4.c: Likewise.\n\t* gcc.target/powerpc/pr88100.c: Likewise.\n\t* gcc.target/powerpc/pragma_misc9.c: Likewise.\n\t* gcc.target/powerpc/pragma_power8.c: Undef _RS6000_VECDEFINES_H.\n\t* gcc.target/powerpc/pragma_power9.c: Likewise.\n\t* gcc.target/powerpc/test_fpscr_drn_builtin_error.c: Adjust expected\n\terror messages.\n\t* gcc.target/powerpc/test_fpscr_rn_builtin_error.c: Likewise.\n\t* gcc.target/powerpc/vec-gnb-2.c: Likewise.\n\t* gcc.target/powerpc/vsu/vec-all-nez-7.c: Likewise.\n\t* gcc.target/powerpc/vsu/vec-any-eqz-7.c: Likewise.\n\t* gcc.target/powerpc/vsu/vec-cmpnez-7.c: Likewise.\n\t* gcc.target/powerpc/vsu/vec-cntlz-lsbb-2.c: Likewise.\n\t* gcc.target/powerpc/vsu/vec-cnttz-lsbb-2.c: Likewise.\n\t* gcc.target/powerpc/vsu/vec-xl-len-13.c: Likewise.\n\t* gcc.target/powerpc/vsu/vec-xst-len-12.c: Likewise.", "tree": {"sha": "4b7af886707655d1628ff9636cb19be5a158ed89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b7af886707655d1628ff9636cb19be5a158ed89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d08236359eb22918ba067489edcec02857109d09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d08236359eb22918ba067489edcec02857109d09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d08236359eb22918ba067489edcec02857109d09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d08236359eb22918ba067489edcec02857109d09/comments", "author": null, "committer": null, "parents": [{"sha": "c9dd01314d8467e3f6615b6e800ba25706d70320", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9dd01314d8467e3f6615b6e800ba25706d70320", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9dd01314d8467e3f6615b6e800ba25706d70320"}], "stats": {"total": 686, "additions": 124, "deletions": 562}, "files": [{"sha": "204910d371ddc31f4e58a8b1617c1844e2ff256d", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 38, "deletions": 480, "changes": 518, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -55,32 +55,36 @@\n #define __CR6_LT\t\t2\n #define __CR6_LT_REV\t\t3\n \n-/* Synonyms.  */\n+#include \"rs6000-vecdefines.h\"\n+\n+/* Deprecated interfaces.  */\n+#define vec_lvx vec_ld\n+#define vec_lvxl vec_ldl\n+#define vec_stvx vec_st\n+#define vec_stvxl vec_stl\n #define vec_vaddcuw vec_addc\n #define vec_vand vec_and\n #define vec_vandc vec_andc\n-#define vec_vrfip vec_ceil\n #define vec_vcmpbfp vec_cmpb\n #define vec_vcmpgefp vec_cmpge\n #define vec_vctsxs vec_cts\n #define vec_vctuxs vec_ctu\n #define vec_vexptefp vec_expte\n-#define vec_vrfim vec_floor\n-#define vec_lvx vec_ld\n-#define vec_lvxl vec_ldl\n #define vec_vlogefp vec_loge\n #define vec_vmaddfp vec_madd\n #define vec_vmhaddshs vec_madds\n-#define vec_vmladduhm vec_mladd\n #define vec_vmhraddshs vec_mradds\n+#define vec_vmladduhm vec_mladd\n #define vec_vnmsubfp vec_nmsub\n #define vec_vnor vec_nor\n #define vec_vor vec_or\n-#define vec_vpkpx vec_packpx\n #define vec_vperm vec_perm\n-#define vec_permxor __builtin_vec_vpermxor\n+#define vec_vpkpx vec_packpx\n #define vec_vrefp vec_re\n+#define vec_vrfim vec_floor\n #define vec_vrfin vec_round\n+#define vec_vrfip vec_ceil\n+#define vec_vrfiz vec_trunc\n #define vec_vrsqrtefp vec_rsqrte\n #define vec_vsel vec_sel\n #define vec_vsldoi vec_sld\n@@ -91,440 +95,54 @@\n #define vec_vspltisw vec_splat_s32\n #define vec_vsr vec_srl\n #define vec_vsro vec_sro\n-#define vec_stvx vec_st\n-#define vec_stvxl vec_stl\n #define vec_vsubcuw vec_subc\n #define vec_vsum2sws vec_sum2s\n #define vec_vsumsws vec_sums\n-#define vec_vrfiz vec_trunc\n #define vec_vxor vec_xor\n \n+/* For _ARCH_PWR8.  Always define to support #pragma GCC target.  */\n+#define vec_vclz vec_cntlz\n+#define vec_vgbbd vec_gb\n+#define vec_vmrgew vec_mergee\n+#define vec_vmrgow vec_mergeo\n+#define vec_vpopcntu vec_popcnt\n+#define vec_vrld vec_rl\n+#define vec_vsld vec_sl\n+#define vec_vsrd vec_sr\n+#define vec_vsrad vec_sra\n+\n+/* For _ARCH_PWR9.  Always define to support #pragma GCC target.  */\n+#define vec_extract_fp_from_shorth vec_extract_fp32_from_shorth\n+#define vec_extract_fp_from_shortl vec_extract_fp32_from_shortl\n+#define vec_vctz vec_cnttz\n+\n+/* Synonyms.  */\n /* Functions that are resolved by the backend to one of the\n    typed builtins.  */\n-#define vec_vaddfp __builtin_vec_vaddfp\n-#define vec_addc __builtin_vec_addc\n-#define vec_adde __builtin_vec_adde\n-#define vec_addec __builtin_vec_addec\n-#define vec_vaddsws __builtin_vec_vaddsws\n-#define vec_vaddshs __builtin_vec_vaddshs\n-#define vec_vaddsbs __builtin_vec_vaddsbs\n-#define vec_vavgsw __builtin_vec_vavgsw\n-#define vec_vavguw __builtin_vec_vavguw\n-#define vec_vavgsh __builtin_vec_vavgsh\n-#define vec_vavguh __builtin_vec_vavguh\n-#define vec_vavgsb __builtin_vec_vavgsb\n-#define vec_vavgub __builtin_vec_vavgub\n-#define vec_ceil __builtin_vec_ceil\n-#define vec_cmpb __builtin_vec_cmpb\n-#define vec_vcmpeqfp __builtin_vec_vcmpeqfp\n-#define vec_cmpge __builtin_vec_cmpge\n-#define vec_vcmpgtfp __builtin_vec_vcmpgtfp\n-#define vec_vcmpgtsw __builtin_vec_vcmpgtsw\n-#define vec_vcmpgtuw __builtin_vec_vcmpgtuw\n-#define vec_vcmpgtsh __builtin_vec_vcmpgtsh\n-#define vec_vcmpgtuh __builtin_vec_vcmpgtuh\n-#define vec_vcmpgtsb __builtin_vec_vcmpgtsb\n-#define vec_vcmpgtub __builtin_vec_vcmpgtub\n-#define vec_vcfsx __builtin_vec_vcfsx\n-#define vec_vcfux __builtin_vec_vcfux\n-#define vec_cts __builtin_vec_cts\n-#define vec_ctu __builtin_vec_ctu\n #define vec_cpsgn(x,y) __builtin_vec_copysign(y,x)\n-#define vec_double __builtin_vec_double\n-#define vec_doublee __builtin_vec_doublee\n-#define vec_doubleo __builtin_vec_doubleo\n-#define vec_doublel __builtin_vec_doublel\n-#define vec_doubleh __builtin_vec_doubleh\n-#define vec_expte __builtin_vec_expte\n-#define vec_float __builtin_vec_float\n-#define vec_float2 __builtin_vec_float2\n-#define vec_floate __builtin_vec_floate\n-#define vec_floato __builtin_vec_floato\n-#define vec_floor __builtin_vec_floor\n-#define vec_loge __builtin_vec_loge\n-#define vec_madd __builtin_vec_madd\n-#define vec_madds __builtin_vec_madds\n-#define vec_mtvscr __builtin_vec_mtvscr\n-#define vec_reve __builtin_vec_vreve\n-#define vec_vmaxfp __builtin_vec_vmaxfp\n-#define vec_vmaxsw __builtin_vec_vmaxsw\n-#define vec_vmaxsh __builtin_vec_vmaxsh\n-#define vec_vmaxsb __builtin_vec_vmaxsb\n-#define vec_vminfp __builtin_vec_vminfp\n-#define vec_vminsw __builtin_vec_vminsw\n-#define vec_vminsh __builtin_vec_vminsh\n-#define vec_vminsb __builtin_vec_vminsb\n-#define vec_mradds __builtin_vec_mradds\n-#define vec_vmsumshm __builtin_vec_vmsumshm\n-#define vec_vmsumuhm __builtin_vec_vmsumuhm\n-#define vec_vmsummbm __builtin_vec_vmsummbm\n-#define vec_vmsumubm __builtin_vec_vmsumubm\n-#define vec_vmsumshs __builtin_vec_vmsumshs\n-#define vec_vmsumuhs __builtin_vec_vmsumuhs\n-#define vec_vmsumudm __builtin_vec_vmsumudm\n-#define vec_vmulesb __builtin_vec_vmulesb\n-#define vec_vmulesh __builtin_vec_vmulesh\n-#define vec_vmuleuh __builtin_vec_vmuleuh\n-#define vec_vmuleub __builtin_vec_vmuleub\n-#define vec_vmulosh __builtin_vec_vmulosh\n-#define vec_vmulouh __builtin_vec_vmulouh\n-#define vec_vmulosb __builtin_vec_vmulosb\n-#define vec_vmuloub __builtin_vec_vmuloub\n-#define vec_nmsub __builtin_vec_nmsub\n-#define vec_packpx __builtin_vec_packpx\n-#define vec_vpkswss __builtin_vec_vpkswss\n-#define vec_vpkuwus __builtin_vec_vpkuwus\n-#define vec_vpkshss __builtin_vec_vpkshss\n-#define vec_vpkuhus __builtin_vec_vpkuhus\n-#define vec_vpkswus __builtin_vec_vpkswus\n-#define vec_vpkshus __builtin_vec_vpkshus\n-#define vec_re __builtin_vec_re\n-#define vec_round __builtin_vec_round\n-#define vec_recipdiv __builtin_vec_recipdiv\n-#define vec_rlmi __builtin_vec_rlmi\n-#define vec_vrlnm __builtin_vec_rlnm\n #define vec_rlnm(a,b,c) (__builtin_vec_rlnm((a),((c)<<8)|(b)))\n-#define vec_rsqrt __builtin_vec_rsqrt\n-#define vec_rsqrte __builtin_vec_rsqrte\n-#define vec_signed __builtin_vec_vsigned\n-#define vec_signed2 __builtin_vec_vsigned2\n-#define vec_signede __builtin_vec_vsignede\n-#define vec_signedo __builtin_vec_vsignedo\n-#define vec_unsigned __builtin_vec_vunsigned\n-#define vec_unsigned2 __builtin_vec_vunsigned2\n-#define vec_unsignede __builtin_vec_vunsignede\n-#define vec_unsignedo __builtin_vec_vunsignedo\n-#define vec_vsubfp __builtin_vec_vsubfp\n-#define vec_subc __builtin_vec_subc\n-#define vec_sube __builtin_vec_sube\n-#define vec_subec __builtin_vec_subec\n-#define vec_vsubsws __builtin_vec_vsubsws\n-#define vec_vsubshs __builtin_vec_vsubshs\n-#define vec_vsubsbs __builtin_vec_vsubsbs\n-#define vec_sum4s __builtin_vec_sum4s\n-#define vec_vsum4shs __builtin_vec_vsum4shs\n-#define vec_vsum4sbs __builtin_vec_vsum4sbs\n-#define vec_vsum4ubs __builtin_vec_vsum4ubs\n-#define vec_sum2s __builtin_vec_sum2s\n-#define vec_sums __builtin_vec_sums\n-#define vec_trunc __builtin_vec_trunc\n-#define vec_vupkhpx __builtin_vec_vupkhpx\n-#define vec_vupkhsh __builtin_vec_vupkhsh\n-#define vec_vupkhsb __builtin_vec_vupkhsb\n-#define vec_vupklpx __builtin_vec_vupklpx\n-#define vec_vupklsh __builtin_vec_vupklsh\n-#define vec_vupklsb __builtin_vec_vupklsb\n-#define vec_abs __builtin_vec_abs\n-#define vec_nabs __builtin_vec_nabs\n-#define vec_abss __builtin_vec_abss\n-#define vec_add __builtin_vec_add\n-#define vec_adds __builtin_vec_adds\n-#define vec_and __builtin_vec_and\n-#define vec_andc __builtin_vec_andc\n-#define vec_avg __builtin_vec_avg\n-#define vec_cmpeq __builtin_vec_cmpeq\n-#define vec_cmpne __builtin_vec_cmpne\n-#define vec_cmpgt __builtin_vec_cmpgt\n-#define vec_ctf __builtin_vec_ctf\n-#define vec_dst __builtin_vec_dst\n-#define vec_dstst __builtin_vec_dstst\n-#define vec_dststt __builtin_vec_dststt\n-#define vec_dstt __builtin_vec_dstt\n-#define vec_ld __builtin_vec_ld\n-#define vec_lde __builtin_vec_lde\n-#define vec_ldl __builtin_vec_ldl\n-#define vec_lvebx __builtin_vec_lvebx\n-#define vec_lvehx __builtin_vec_lvehx\n-#define vec_lvewx __builtin_vec_lvewx\n-#define vec_xl_zext __builtin_vec_ze_lxvrx\n-#define vec_xl_sext __builtin_vec_se_lxvrx\n-#define vec_xst_trunc __builtin_vec_tr_stxvrx\n-#define vec_neg __builtin_vec_neg\n-#define vec_pmsum_be __builtin_vec_vpmsum\n-#define vec_shasigma_be __builtin_crypto_vshasigma\n-/* Cell only intrinsics.  */\n-#ifdef __PPU__\n-#define vec_lvlx __builtin_vec_lvlx\n-#define vec_lvlxl __builtin_vec_lvlxl\n-#define vec_lvrx __builtin_vec_lvrx\n-#define vec_lvrxl __builtin_vec_lvrxl\n-#endif\n-#define vec_lvsl __builtin_vec_lvsl\n-#define vec_lvsr __builtin_vec_lvsr\n-#define vec_max __builtin_vec_max\n-#define vec_mergee __builtin_vec_vmrgew\n-#define vec_mergeh __builtin_vec_mergeh\n-#define vec_mergel __builtin_vec_mergel\n-#define vec_mergeo __builtin_vec_vmrgow\n-#define vec_min __builtin_vec_min\n-#define vec_mladd __builtin_vec_mladd\n-#define vec_msum __builtin_vec_msum\n-#define vec_msums __builtin_vec_msums\n-#define vec_mul __builtin_vec_mul\n-#define vec_mule __builtin_vec_mule\n-#define vec_mulo __builtin_vec_mulo\n-#define vec_nor __builtin_vec_nor\n-#define vec_or __builtin_vec_or\n-#define vec_pack __builtin_vec_pack\n-#define vec_packs __builtin_vec_packs\n-#define vec_packsu __builtin_vec_packsu\n-#define vec_perm __builtin_vec_perm\n-#define vec_rl __builtin_vec_rl\n-#define vec_sel __builtin_vec_sel\n-#define vec_sl __builtin_vec_sl\n-#define vec_sld __builtin_vec_sld\n-#define vec_sldw __builtin_vsx_xxsldwi\n-#define vec_sll __builtin_vec_sll\n-#define vec_slo __builtin_vec_slo\n-#define vec_splat __builtin_vec_splat\n-#define vec_sr __builtin_vec_sr\n-#define vec_sra __builtin_vec_sra\n-#define vec_srl __builtin_vec_srl\n-#define vec_sro __builtin_vec_sro\n-#define vec_st __builtin_vec_st\n-#define vec_ste __builtin_vec_ste\n-#define vec_stl __builtin_vec_stl\n-#define vec_stvebx __builtin_vec_stvebx\n-#define vec_stvehx __builtin_vec_stvehx\n-#define vec_stvewx __builtin_vec_stvewx\n-/* Cell only intrinsics.  */\n-#ifdef __PPU__\n-#define vec_stvlx __builtin_vec_stvlx\n-#define vec_stvlxl __builtin_vec_stvlxl\n-#define vec_stvrx __builtin_vec_stvrx\n-#define vec_stvrxl __builtin_vec_stvrxl\n-#endif\n-#define vec_sub __builtin_vec_sub\n-#define vec_subs __builtin_vec_subs\n-#define vec_sum __builtin_vec_sum\n-#define vec_unpackh __builtin_vec_unpackh\n-#define vec_unpackl __builtin_vec_unpackl\n-#define vec_vaddubm __builtin_vec_vaddubm\n-#define vec_vaddubs __builtin_vec_vaddubs\n-#define vec_vadduhm __builtin_vec_vadduhm\n-#define vec_vadduhs __builtin_vec_vadduhs\n-#define vec_vadduwm __builtin_vec_vadduwm\n-#define vec_vadduws __builtin_vec_vadduws\n-#define vec_vcmpequb __builtin_vec_vcmpequb\n-#define vec_vcmpequh __builtin_vec_vcmpequh\n-#define vec_vcmpequw __builtin_vec_vcmpequw\n-#define vec_vmaxub __builtin_vec_vmaxub\n-#define vec_vmaxuh __builtin_vec_vmaxuh\n-#define vec_vmaxuw __builtin_vec_vmaxuw\n-#define vec_vminub __builtin_vec_vminub\n-#define vec_vminuh __builtin_vec_vminuh\n-#define vec_vminuw __builtin_vec_vminuw\n-#define vec_vmrghb __builtin_vec_vmrghb\n-#define vec_vmrghh __builtin_vec_vmrghh\n-#define vec_vmrghw __builtin_vec_vmrghw\n-#define vec_vmrglb __builtin_vec_vmrglb\n-#define vec_vmrglh __builtin_vec_vmrglh\n-#define vec_vmrglw __builtin_vec_vmrglw\n-#define vec_vpkuhum __builtin_vec_vpkuhum\n-#define vec_vpkuwum __builtin_vec_vpkuwum\n-#define vec_vrlb __builtin_vec_vrlb\n-#define vec_vrlh __builtin_vec_vrlh\n-#define vec_vrlw __builtin_vec_vrlw\n-#define vec_vslb __builtin_vec_vslb\n-#define vec_vslh __builtin_vec_vslh\n-#define vec_vslw __builtin_vec_vslw\n-#define vec_vspltb __builtin_vec_vspltb\n-#define vec_vsplth __builtin_vec_vsplth\n-#define vec_vspltw __builtin_vec_vspltw\n-#define vec_vsrab __builtin_vec_vsrab\n-#define vec_vsrah __builtin_vec_vsrah\n-#define vec_vsraw __builtin_vec_vsraw\n-#define vec_vsrb __builtin_vec_vsrb\n-#define vec_vsrh __builtin_vec_vsrh\n-#define vec_vsrw __builtin_vec_vsrw\n-#define vec_vsububs __builtin_vec_vsububs\n-#define vec_vsububm __builtin_vec_vsububm\n-#define vec_vsubuhm __builtin_vec_vsubuhm\n-#define vec_vsubuhs __builtin_vec_vsubuhs\n-#define vec_vsubuwm __builtin_vec_vsubuwm\n-#define vec_vsubuws __builtin_vec_vsubuws\n-#define vec_xor __builtin_vec_xor\n-\n-#define vec_extract __builtin_vec_extract\n-#define vec_insert __builtin_vec_insert\n-#define vec_splats __builtin_vec_splats\n-#define vec_promote __builtin_vec_promote\n \n #ifdef __VSX__\n /* VSX additions */\n-#define vec_div __builtin_vec_div\n-#define vec_mul __builtin_vec_mul\n-#define vec_msub __builtin_vec_msub\n-#define vec_nmadd __builtin_vec_nmadd\n-#define vec_nearbyint __builtin_vec_nearbyint\n-#define vec_rint __builtin_vec_rint\n-#define vec_sqrt __builtin_vec_sqrt\n #define vec_vsx_ld __builtin_vec_vsx_ld\n #define vec_vsx_st __builtin_vec_vsx_st\n-#define vec_xl __builtin_vec_vsx_ld\n-#define vec_xl_be __builtin_vec_xl_be\n-#define vec_xst __builtin_vec_vsx_st\n-#define vec_xst_be __builtin_vec_xst_be\n-\n-/* Note, xxsldi and xxpermdi were added as __builtin_vsx_<xxx> functions\n-   instead of __builtin_vec_<xxx>  */\n-#define vec_xxsldwi __builtin_vsx_xxsldwi\n-#define vec_xxpermdi __builtin_vsx_xxpermdi\n-#endif\n-\n-#ifdef _ARCH_PWR8\n-/* Vector additions added in ISA 2.07.  */\n-#define vec_eqv __builtin_vec_eqv\n-#define vec_nand __builtin_vec_nand\n-#define vec_orc __builtin_vec_orc\n-#define vec_vaddcuq __builtin_vec_vaddcuq\n-#define vec_vaddudm __builtin_vec_vaddudm\n-#define vec_vadduqm __builtin_vec_vadduqm\n-#define vec_vbpermq __builtin_vec_vbpermq\n-#define vec_bperm __builtin_vec_vbperm_api\n-#define vec_vclz __builtin_vec_vclz\n-#define vec_cntlz __builtin_vec_vclz\n-#define vec_vclzb __builtin_vec_vclzb\n-#define vec_vclzd __builtin_vec_vclzd\n-#define vec_vclzh __builtin_vec_vclzh\n-#define vec_vclzw __builtin_vec_vclzw\n-#define vec_vaddecuq __builtin_vec_vaddecuq\n-#define vec_vaddeuqm __builtin_vec_vaddeuqm\n-#define vec_vsubecuq __builtin_vec_vsubecuq\n-#define vec_vsubeuqm __builtin_vec_vsubeuqm\n-#define vec_vgbbd __builtin_vec_vgbbd\n-#define vec_gb __builtin_vec_vgbbd\n-#define vec_vmaxsd __builtin_vec_vmaxsd\n-#define vec_vmaxud __builtin_vec_vmaxud\n-#define vec_vminsd __builtin_vec_vminsd\n-#define vec_vminud __builtin_vec_vminud\n-#define vec_vmrgew __builtin_vec_vmrgew\n-#define vec_vmrgow __builtin_vec_vmrgow\n-#define vec_vpksdss __builtin_vec_vpksdss\n-#define vec_vpksdus __builtin_vec_vpksdus\n-#define vec_vpkudum __builtin_vec_vpkudum\n-#define vec_vpkudus __builtin_vec_vpkudus\n-#define vec_vpopcnt __builtin_vec_vpopcnt\n-#define vec_vpopcntb __builtin_vec_vpopcntb\n-#define vec_vpopcntd __builtin_vec_vpopcntd\n-#define vec_vpopcnth __builtin_vec_vpopcnth\n-#define vec_vpopcntw __builtin_vec_vpopcntw\n-#define vec_popcnt __builtin_vec_vpopcntu\n-#define vec_vrld __builtin_vec_vrld\n-#define vec_vsld __builtin_vec_vsld\n-#define vec_vsrad __builtin_vec_vsrad\n-#define vec_vsrd __builtin_vec_vsrd\n-#define vec_vsubcuq __builtin_vec_vsubcuq\n-#define vec_vsubudm __builtin_vec_vsubudm\n-#define vec_vsubuqm __builtin_vec_vsubuqm\n-#define vec_vupkhsw __builtin_vec_vupkhsw\n-#define vec_vupklsw __builtin_vec_vupklsw\n-#define vec_revb __builtin_vec_revb\n-#define vec_sbox_be __builtin_crypto_vsbox_be\n-#define vec_cipher_be __builtin_crypto_vcipher_be\n-#define vec_cipherlast_be __builtin_crypto_vcipherlast_be\n-#define vec_ncipher_be __builtin_crypto_vncipher_be\n-#define vec_ncipherlast_be __builtin_crypto_vncipherlast_be\n-#endif\n-\n-#ifdef __POWER9_VECTOR__\n-/* Vector additions added in ISA 3.0.  */\n-#define vec_first_match_index __builtin_vec_first_match_index\n-#define vec_first_match_or_eos_index __builtin_vec_first_match_or_eos_index\n-#define vec_first_mismatch_index __builtin_vec_first_mismatch_index\n-#define vec_first_mismatch_or_eos_index __builtin_vec_first_mismatch_or_eos_index\n-#define vec_pack_to_short_fp32 __builtin_vec_convert_4f32_8f16\n-#define vec_parity_lsbb __builtin_vec_vparity_lsbb\n-#define vec_vctz __builtin_vec_vctz\n-#define vec_cnttz __builtin_vec_vctz\n-#define vec_vctzb __builtin_vec_vctzb\n-#define vec_vctzd __builtin_vec_vctzd\n-#define vec_vctzh __builtin_vec_vctzh\n-#define vec_vctzw __builtin_vec_vctzw\n-#define vec_extract4b __builtin_vec_extract4b\n-#define vec_insert4b __builtin_vec_insert4b\n-#define vec_vprtyb __builtin_vec_vprtyb\n-#define vec_vprtybd __builtin_vec_vprtybd\n-#define vec_vprtybw __builtin_vec_vprtybw\n-\n-#ifdef _ARCH_PPC64\n-#define vec_vprtybq __builtin_vec_vprtybq\n-#endif\n-\n-#define vec_absd __builtin_vec_vadu\n-#define vec_absdb __builtin_vec_vadub\n-#define vec_absdh __builtin_vec_vaduh\n-#define vec_absdw __builtin_vec_vaduw\n-\n-#define vec_slv __builtin_vec_vslv\n-#define vec_srv __builtin_vec_vsrv\n-\n-#define vec_extract_exp __builtin_vec_extract_exp\n-#define vec_extract_sig __builtin_vec_extract_sig\n-#define vec_insert_exp __builtin_vec_insert_exp\n-#define vec_test_data_class __builtin_vec_test_data_class\n-\n-#define vec_extract_fp_from_shorth __builtin_vec_vextract_fp_from_shorth\n-#define vec_extract_fp_from_shortl __builtin_vec_vextract_fp_from_shortl\n-#define vec_extract_fp32_from_shorth __builtin_vec_vextract_fp_from_shorth\n-#define vec_extract_fp32_from_shortl __builtin_vec_vextract_fp_from_shortl\n-\n-#define scalar_extract_exp __builtin_vec_scalar_extract_exp\n-#define scalar_extract_sig __builtin_vec_scalar_extract_sig\n-#define scalar_insert_exp __builtin_vec_scalar_insert_exp\n-#define scalar_test_data_class __builtin_vec_scalar_test_data_class\n-#define scalar_test_neg __builtin_vec_scalar_test_neg\n-\n-#define scalar_cmp_exp_gt __builtin_vec_scalar_cmp_exp_gt\n-#define scalar_cmp_exp_lt __builtin_vec_scalar_cmp_exp_lt\n-#define scalar_cmp_exp_eq __builtin_vec_scalar_cmp_exp_eq\n-#define scalar_cmp_exp_unordered __builtin_vec_scalar_cmp_exp_unordered\n-\n-#ifdef _ARCH_PPC64\n-#define vec_xl_len __builtin_vec_lxvl\n-#define vec_xst_len __builtin_vec_stxvl\n-#define vec_xl_len_r __builtin_vec_xl_len_r\n-#define vec_xst_len_r __builtin_vec_xst_len_r\n-#endif\n-\n-#define vec_cmpnez __builtin_vec_vcmpnez\n-\n-#define vec_cntlz_lsbb __builtin_vec_vclzlsbb\n-#define vec_cnttz_lsbb __builtin_vec_vctzlsbb\n-\n-#define vec_test_lsbb_all_ones __builtin_vec_xvtlsbb_all_ones\n-#define vec_test_lsbb_all_zeros __builtin_vec_xvtlsbb_all_zeros\n-\n-#define vec_xlx __builtin_vec_vextulx\n-#define vec_xrx __builtin_vec_vexturx\n-#define vec_signexti  __builtin_vec_vsignexti\n-#define vec_signextll __builtin_vec_vsignextll\n+#define __builtin_vec_xl __builtin_vec_vsx_ld\n+#define __builtin_vec_xst __builtin_vec_vsx_st\n \n-#endif\n-\n-/* BCD builtins, map ABI builtin name to existing builtin name.  */\n-#define __builtin_bcdadd     __builtin_vec_bcdadd\n-#define __builtin_bcdadd_lt  __builtin_vec_bcdadd_lt\n-#define __builtin_bcdadd_eq  __builtin_vec_bcdadd_eq\n-#define __builtin_bcdadd_gt  __builtin_vec_bcdadd_gt\n #define __builtin_bcdadd_ofl __builtin_vec_bcdadd_ov\n-#define __builtin_bcdadd_ov  __builtin_vec_bcdadd_ov\n-#define __builtin_bcdsub     __builtin_vec_bcdsub\n-#define __builtin_bcdsub_lt  __builtin_vec_bcdsub_lt\n-#define __builtin_bcdsub_eq  __builtin_vec_bcdsub_eq\n-#define __builtin_bcdsub_gt  __builtin_vec_bcdsub_gt\n #define __builtin_bcdsub_ofl __builtin_vec_bcdsub_ov\n-#define __builtin_bcdsub_ov  __builtin_vec_bcdsub_ov\n-#define __builtin_bcdinvalid __builtin_vec_bcdinvalid\n-#define __builtin_bcdmul10   __builtin_vec_bcdmul10\n-#define __builtin_bcddiv10   __builtin_vec_bcddiv10\n-#define __builtin_bcd2dfp    __builtin_vec_denb2dfp\n #define __builtin_bcdcmpeq(a,b)   __builtin_vec_bcdsub_eq(a,b,0)\n #define __builtin_bcdcmpgt(a,b)   __builtin_vec_bcdsub_gt(a,b,0)\n #define __builtin_bcdcmplt(a,b)   __builtin_vec_bcdsub_lt(a,b,0)\n #define __builtin_bcdcmpge(a,b)   __builtin_vec_bcdsub_ge(a,b,0)\n #define __builtin_bcdcmple(a,b)   __builtin_vec_bcdsub_le(a,b,0)\n+#endif\n \n+/* For _ARCH_PWR10.  Always define to support #pragma GCC target.  */\n+#define __builtin_vec_se_lxvrx __builtin_vec_xl_sext\n+#define __builtin_vec_tr_stxvrx __builtin_vec_xst_trunc\n+#define __builtin_vec_ze_lxvrx __builtin_vec_xl_zext\n+#define __builtin_vsx_xxpermx __builtin_vec_xxpermx\n \n /* Predicates.\n    For C++, we use templates in order to allow non-parenthesized arguments.\n@@ -700,14 +318,9 @@ __altivec_scalar_pred(vec_any_nle,\n #define vec_any_nle(a1, a2) __builtin_vec_vcmpge_p (__CR6_LT_REV, (a2), (a1))\n #endif\n \n-/* These do not accept vectors, so they do not have a __builtin_vec_*\n-   counterpart.  */\n+/* Miscellaneous definitions.  */\n #define vec_dss(x) __builtin_altivec_dss((x))\n #define vec_dssall() __builtin_altivec_dssall ()\n-#define vec_mfvscr() ((__vector unsigned short) __builtin_altivec_mfvscr ())\n-#define vec_splat_s8(x) __builtin_altivec_vspltisb ((x))\n-#define vec_splat_s16(x) __builtin_altivec_vspltish ((x))\n-#define vec_splat_s32(x) __builtin_altivec_vspltisw ((x))\n #define vec_splat_u8(x) ((__vector unsigned char) vec_splat_s8 ((x)))\n #define vec_splat_u16(x) ((__vector unsigned short) vec_splat_s16 ((x)))\n #define vec_splat_u32(x) ((__vector unsigned int) vec_splat_s32 ((x)))\n@@ -716,59 +329,4 @@ __altivec_scalar_pred(vec_any_nle,\n    to #define vec_step to __builtin_vec_step.  */\n #define vec_step(x) __builtin_vec_step (* (__typeof__ (x) *) 0)\n \n-#ifdef _ARCH_PWR10\n-#define vec_signextq  __builtin_vec_vsignextq\n-#define vec_dive __builtin_vec_dive\n-#define vec_mod  __builtin_vec_mod\n-\n-/* May modify these macro definitions if future capabilities overload\n-   with support for different vector argument and result types.  */\n-#define vec_cntlzm(a, b)\t__builtin_altivec_vclzdm (a, b)\n-#define vec_cnttzm(a, b)\t__builtin_altivec_vctzdm (a, b)\n-#define vec_pdep(a, b)\t__builtin_altivec_vpdepd (a, b)\n-#define vec_pext(a, b)\t__builtin_altivec_vpextd (a, b)\n-#define vec_cfuge(a, b)\t__builtin_altivec_vcfuged (a, b)\n-#define vec_genpcvm(a, b)\t__builtin_vec_xxgenpcvm (a, b)\n-\n-/* Overloaded built-in functions for ISA 3.1.  */\n-#define vec_extractl(a, b, c)\t__builtin_vec_extractl (a, b, c)\n-#define vec_extracth(a, b, c)\t__builtin_vec_extracth (a, b, c)\n-#define vec_insertl(a, b, c)   __builtin_vec_insertl (a, b, c)\n-#define vec_inserth(a, b, c)   __builtin_vec_inserth (a, b, c)\n-#define vec_replace_elt(a, b, c)       __builtin_vec_replace_elt (a, b, c)\n-#define vec_replace_unaligned(a, b, c) __builtin_vec_replace_un (a, b, c)\n-#define vec_sldb(a, b, c)      __builtin_vec_sldb (a, b, c)\n-#define vec_srdb(a, b, c)      __builtin_vec_srdb (a, b, c)\n-#define vec_splati(a)  __builtin_vec_xxspltiw (a)\n-#define vec_splatid(a) __builtin_vec_xxspltid (a)\n-#define vec_splati_ins(a, b, c)        __builtin_vec_xxsplti32dx (a, b, c)\n-#define vec_blendv(a, b, c)    __builtin_vec_xxblend (a, b, c)\n-#define vec_permx(a, b, c, d)  __builtin_vec_xxpermx (a, b, c, d)\n-\n-#define vec_gnb(a, b)\t__builtin_vec_gnb (a, b)\n-#define vec_clrl(a, b)\t__builtin_vec_clrl (a, b)\n-#define vec_clrr(a, b)\t__builtin_vec_clrr (a, b)\n-#define vec_ternarylogic(a, b, c, d)\t__builtin_vec_xxeval (a, b, c, d)\n-\n-#define vec_strir(a)\t__builtin_vec_strir (a)\n-#define vec_stril(a)\t__builtin_vec_stril (a)\n-\n-#define vec_strir_p(a)\t__builtin_vec_strir_p (a)\n-#define vec_stril_p(a)\t__builtin_vec_stril_p (a)\n-\n-#define vec_mulh(a, b) __builtin_vec_mulh ((a), (b))\n-#define vec_dive(a, b) __builtin_vec_dive ((a), (b))\n-#define vec_mod(a, b) __builtin_vec_mod ((a), (b))\n-\n-/* VSX Mask Manipulation builtin. */\n-#define vec_genbm __builtin_vec_mtvsrbm\n-#define vec_genhm __builtin_vec_mtvsrhm\n-#define vec_genwm __builtin_vec_mtvsrwm\n-#define vec_gendm __builtin_vec_mtvsrdm\n-#define vec_genqm __builtin_vec_mtvsrqm\n-#define vec_cntm __builtin_vec_cntm\n-#define vec_expandm __builtin_vec_vexpandm\n-#define vec_extractm __builtin_vec_vextractm\n-#endif\n-\n #endif /* _ALTIVEC_H */"}, {"sha": "30556e5c7f29502dc193566c25a050e25b063fd6", "filename": "gcc/config/rs6000/rs6000-builtin-new.def", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -273,7 +273,7 @@\n ; Power6 builtins requiring 64-bit GPRs (even with 32-bit addressing).\n [power6-64]\n   const signed long __builtin_p6_cmpb (signed long, signed long);\n-    CMPB cmpbdi3 {}\n+    CMPB cmpbdi3 {no32bit}\n \n \n ; AltiVec builtins.\n@@ -2018,7 +2018,7 @@\n     ADDG6S addg6s {}\n \n   const signed long __builtin_bpermd (signed long, signed long);\n-    BPERMD bpermd_di {}\n+    BPERMD bpermd_di {32bit}\n \n   const unsigned int __builtin_cbcdtd (unsigned int);\n     CBCDTD cbcdtd {}\n@@ -2971,7 +2971,7 @@\n   void __builtin_set_fpscr_drn (const int[0,7]);\n     SET_FPSCR_DRN rs6000_set_fpscr_drn {}\n \n-  const unsigned long __builtin_unpack_dec128 (_Decimal128, const int<1>);\n+  const unsigned long long __builtin_unpack_dec128 (_Decimal128, const int<1>);\n     UNPACK_TD unpacktd {}\n \n \n@@ -3014,39 +3014,39 @@\n \n \n [htm]\n-  unsigned long long __builtin_get_texasr ();\n+  unsigned long __builtin_get_texasr ();\n     GET_TEXASR nothing {htm,htmspr}\n \n-  unsigned long long __builtin_get_texasru ();\n+  unsigned long __builtin_get_texasru ();\n     GET_TEXASRU nothing {htm,htmspr}\n \n-  unsigned long long __builtin_get_tfhar ();\n+  unsigned long __builtin_get_tfhar ();\n     GET_TFHAR nothing {htm,htmspr}\n \n-  unsigned long long __builtin_get_tfiar ();\n+  unsigned long __builtin_get_tfiar ();\n     GET_TFIAR nothing {htm,htmspr}\n \n-  void __builtin_set_texasr (unsigned long long);\n+  void __builtin_set_texasr (unsigned long);\n     SET_TEXASR nothing {htm,htmspr}\n \n-  void __builtin_set_texasru (unsigned long long);\n+  void __builtin_set_texasru (unsigned long);\n     SET_TEXASRU nothing {htm,htmspr}\n \n-  void __builtin_set_tfhar (unsigned long long);\n+  void __builtin_set_tfhar (unsigned long);\n     SET_TFHAR nothing {htm,htmspr}\n \n-  void __builtin_set_tfiar (unsigned long long);\n+  void __builtin_set_tfiar (unsigned long);\n     SET_TFIAR nothing {htm,htmspr}\n \n   unsigned int __builtin_tabort (unsigned int);\n     TABORT tabort {htm,htmcr}\n \n-  unsigned int __builtin_tabortdc (unsigned long long, unsigned long long, \\\n-                                   unsigned long long);\n+  unsigned int __builtin_tabortdc (unsigned long, unsigned long, \\\n+                                   unsigned long);\n     TABORTDC tabortdc {htm,htmcr}\n \n-  unsigned int __builtin_tabortdci (unsigned long long, unsigned long long, \\\n-                                    unsigned long long);\n+  unsigned int __builtin_tabortdci (unsigned long, unsigned long, \\\n+                                    unsigned long);\n     TABORTDCI tabortdci {htm,htmcr}\n \n   unsigned int __builtin_tabortwc (unsigned int, unsigned int, unsigned int);"}, {"sha": "141d2fc0c2a242828b7045388fa5ccaf4252ae74", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -15736,9 +15736,10 @@ rs6000_expand_new_builtin (tree exp, rtx target,\n     }\n \n   if (bif_is_no32bit (*bifaddr) && TARGET_32BIT)\n-    fatal_error (input_location,\n-\t\t \"%<%s%> is not supported in 32-bit mode\",\n-\t\t bifaddr->bifname);\n+    {\n+      error (\"%<%s%> is not supported in 32-bit mode\", bifaddr->bifname);\n+      return const0_rtx;\n+    }\n \n   if (bif_is_cpu (*bifaddr))\n     return new_cpu_expand_builtin (fcode, exp, target);\n@@ -15762,6 +15763,8 @@ rs6000_expand_new_builtin (tree exp, rtx target,\n     {\n       if (fcode == RS6000_BIF_MFTB)\n \ticode = CODE_FOR_rs6000_mftb_si;\n+      else if (fcode == RS6000_BIF_BPERMD)\n+\ticode = CODE_FOR_bpermd_si;\n       else\n \tgcc_unreachable ();\n     }"}, {"sha": "d2e9c4ce5476660d2a7bc4455eb53238dda1327a", "filename": "gcc/config/rs6000/rs6000-gen-builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -2845,7 +2845,7 @@ write_init_file (void)\n   fprintf (init_file, \"#include \\\"rs6000-builtins.h\\\"\\n\");\n   fprintf (init_file, \"\\n\");\n \n-  fprintf (init_file, \"int new_builtins_are_live = 0;\\n\\n\");\n+  fprintf (init_file, \"int new_builtins_are_live = 1;\\n\\n\");\n \n   fprintf (init_file, \"tree rs6000_builtin_decls_x[RS6000_OVLD_MAX];\\n\\n\");\n "}, {"sha": "53b67c95cf969399d05e8a358dcb959a76e13b60", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-extract-exp-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-extract-exp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-extract-exp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-extract-exp-2.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -14,7 +14,7 @@ get_exponent (double *p)\n {\n   double source = *p;\n \n-  return scalar_extract_exp (source);\t/* { dg-error \"'__builtin_vec_scalar_extract_exp' is not supported in this compiler configuration\" } */\n+  return scalar_extract_exp (source);\t/* { dg-error \"'__builtin_vsx_scalar_extract_exp' requires the\" } */\n }\n \n "}, {"sha": "39ee74c94dc6a202ffddc896a94d5dffc9851f60", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-extract-sig-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-extract-sig-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-extract-sig-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-extract-sig-2.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -12,5 +12,5 @@ get_significand (double *p)\n {\n   double source = *p;\n \n-  return __builtin_vec_scalar_extract_sig (source); /* { dg-error \"'__builtin_vec_scalar_extract_sig' is not supported in this compiler configuration\" } */\n+  return __builtin_vec_scalar_extract_sig (source); /* { dg-error \"'__builtin_vsx_scalar_extract_sig' requires the\" } */\n }"}, {"sha": "efd69725905e04e8c2449ca170f2bbea410e07da", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-insert-exp-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-insert-exp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-insert-exp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-insert-exp-2.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -16,5 +16,5 @@ insert_exponent (unsigned long long int *significand_p,\n   unsigned long long int significand = *significand_p;\n   unsigned long long int exponent = *exponent_p;\n \n-  return scalar_insert_exp (significand, exponent); /* { dg-error \"'__builtin_vec_scalar_insert_exp' is not supported in this compiler configuration\" } */\n+  return scalar_insert_exp (significand, exponent); /* { dg-error \"'__builtin_vsx_scalar_insert_exp' requires the\" } */\n }"}, {"sha": "f85966a6fdf3db5f4ef0fd5ccdbb2ecb73836401", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-insert-exp-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-insert-exp-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-insert-exp-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-insert-exp-5.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -16,5 +16,5 @@ insert_exponent (double *significand_p,\n   double significand = *significand_p;\n   unsigned long long int exponent = *exponent_p;\n \n-  return scalar_insert_exp (significand, exponent); /* { dg-error \"'__builtin_vec_scalar_insert_exp' is not supported in this compiler configuration\" } */\n+  return scalar_insert_exp (significand, exponent); /* { dg-error \"'__builtin_vsx_scalar_insert_exp_dp' requires the\" } */\n }"}, {"sha": "b1be8284b4e547662e5c8e1503a94295b95427d1", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-insert-exp-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-insert-exp-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-insert-exp-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-insert-exp-8.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -16,5 +16,5 @@ insert_exponent (unsigned __int128 *significand_p, /* { dg-error \"'__int128' is\n   unsigned __int128 significand = *significand_p;  /* { dg-error \"'__int128' is not supported on this target\" } */\n   unsigned long long int exponent = *exponent_p;\n \n-  return scalar_insert_exp (significand, exponent); /* { dg-error \"'__builtin_vec_scalar_insert_exp' is not supported in this compiler configuration\" } */\n+  return scalar_insert_exp (significand, exponent); /* { dg-error \"'__builtin_vsx_scalar_insert_exp' requires the\" } */\n }"}, {"sha": "46d743a899b5bf411d1b13d4082fc296dedd121d", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-neg-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-2.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -10,5 +10,5 @@ test_neg (float *p)\n {\n   float source = *p;\n \n-  return __builtin_vec_scalar_test_neg_sp (source); /* { dg-error \"'__builtin_vsx_scalar_test_neg_sp' requires\" } */\n+  return __builtin_vec_scalar_test_neg (source); /* { dg-error \"'__builtin_vsx_scalar_test_neg_sp' requires\" } */\n }"}, {"sha": "bfc892b116eb81973b57ced581be3f822fb62250", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-neg-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-3.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -10,5 +10,5 @@ test_neg (double *p)\n {\n   double source = *p;\n \n-  return __builtin_vec_scalar_test_neg_dp (source); /* { dg-error \"'__builtin_vsx_scalar_test_neg_dp' requires\" } */\n+  return __builtin_vec_scalar_test_neg (source); /* { dg-error \"'__builtin_vsx_scalar_test_neg_dp' requires\" } */\n }"}, {"sha": "8c55c1cfb5ca566c130c38aa9d5264d255adcaee", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-neg-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-5.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -10,5 +10,5 @@ test_neg (__ieee128 *p)\n {\n   __ieee128 source = *p;\n \n-  return __builtin_vec_scalar_test_neg_qp (source); /* { dg-error \"'__builtin_vsx_scalar_test_neg_qp' requires\" } */\n+  return __builtin_vec_scalar_test_neg (source); /* { dg-error \"'__builtin_vsx_scalar_test_neg_qp' requires\" } */\n }"}, {"sha": "4c676ba356dd16d0f7a7db40b9543217c13b6add", "filename": "gcc/testsuite/gcc.target/powerpc/byte-in-set-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbyte-in-set-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbyte-in-set-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbyte-in-set-2.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -10,5 +10,5 @@\n int\n test_byte_in_set (unsigned char b, unsigned long long set_members)\n {\n-  return __builtin_byte_in_set (b, set_members); /* { dg-warning \"implicit declaration of function\" } */\n+  return __builtin_byte_in_set (b, set_members); /* { dg-error \"'__builtin_scalar_byte_in_set' requires the\" } */\n }"}, {"sha": "02b84d0731d5ead30fe535179c01eb958edbc47d", "filename": "gcc/testsuite/gcc.target/powerpc/cmpb-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb-2.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -8,7 +8,7 @@ void abort ();\n unsigned long long int\n do_compare (unsigned long long int a, unsigned long long int b)\n {\n-  return __builtin_cmpb (a, b);\t/* { dg-warning \"implicit declaration of function '__builtin_cmpb'\" } */\n+  return __builtin_cmpb (a, b);\t/* { dg-error \"'__builtin_p6_cmpb' requires the '-mcpu=power6' option\" } */\n }\n \n void"}, {"sha": "75641bdb22ccc909d60169d71d24beb73020006f", "filename": "gcc/testsuite/gcc.target/powerpc/cmpb-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb-3.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -8,7 +8,7 @@ void abort ();\n long long int\n do_compare (long long int a, long long int b)\n {\n-  return __builtin_cmpb (a, b);\t/* { dg-error \"'__builtin_cmpb' is not supported in this compiler configuration\" } */\n+  return __builtin_cmpb (a, b);\t/* { dg-error \"'__builtin_p6_cmpb' requires the '-mcpu=power6' option and either the '-m64' or '-mpowerpc64' option\" } */\n }\n \n void expect (long long int pattern, long long int value)"}, {"sha": "d4264ab6e7d3e8bfe46b84e779646d81637f5416", "filename": "gcc/testsuite/gcc.target/powerpc/cmpb32-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb32-2.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -7,7 +7,7 @@ void abort ();\n unsigned int\n do_compare (unsigned int a, unsigned int b)\n {\n-  return __builtin_cmpb (a, b);  /* { dg-warning \"implicit declaration of function '__builtin_cmpb'\" } */\n+  return __builtin_cmpb (a, b);  /* { dg-error \"'__builtin_p6_cmpb_32' requires the '-mcpu=power6' option\" } */\n }\n \n void"}, {"sha": "b3a6c737a3ef1d7479b62e76720f0702b15c2a18", "filename": "gcc/testsuite/gcc.target/powerpc/crypto-builtin-2.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcrypto-builtin-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcrypto-builtin-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcrypto-builtin-2.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -5,21 +5,21 @@\n \n void use_builtins_d (__vector unsigned long long *p, __vector unsigned long long *q, __vector unsigned long long *r, __vector unsigned long long *s)\n {\n-  p[0] = __builtin_crypto_vcipher (q[0], r[0]); /* { dg-error \"'__builtin_crypto_vcipher' is not supported with the current options\" } */\n-  p[1] = __builtin_crypto_vcipherlast (q[1], r[1]); /* { dg-error \"'__builtin_crypto_vcipherlast' is not supported with the current options\" } */\n-  p[2] = __builtin_crypto_vncipher (q[2], r[2]); /* { dg-error \"'__builtin_crypto_vncipher' is not supported with the current options\" } */\n-  p[3] = __builtin_crypto_vncipherlast (q[3], r[3]); /* { dg-error \"'__builtin_crypto_vncipherlast' is not supported with the current options\" } */\n+  p[0] = __builtin_crypto_vcipher (q[0], r[0]); /* { dg-error \"'__builtin_crypto_vcipher' requires the '-mcrypto' option\" } */\n+  p[1] = __builtin_crypto_vcipherlast (q[1], r[1]); /* { dg-error \"'__builtin_crypto_vcipherlast' requires the '-mcrypto' option\" } */\n+  p[2] = __builtin_crypto_vncipher (q[2], r[2]); /* { dg-error \"'__builtin_crypto_vncipher' requires the '-mcrypto' option\" } */\n+  p[3] = __builtin_crypto_vncipherlast (q[3], r[3]); /* { dg-error \"'__builtin_crypto_vncipherlast' requires the '-mcrypto' option\" } */\n   p[4] = __builtin_crypto_vpermxor (q[4], r[4], s[4]);\n   p[5] = __builtin_crypto_vpmsumd (q[5], r[5]);\n-  p[6] = __builtin_crypto_vshasigmad (q[6], 1, 15); /* { dg-error \"'__builtin_crypto_vshasigmad' is not supported with the current options\" } */\n-  p[7] = __builtin_crypto_vsbox (q[7]); /* { dg-error \"'__builtin_crypto_vsbox' is not supported with the current options\" } */\n+  p[6] = __builtin_crypto_vshasigmad (q[6], 1, 15); /* { dg-error \"'__builtin_crypto_vshasigmad' requires the '-mcrypto' option\" } */\n+  p[7] = __builtin_crypto_vsbox (q[7]); /* { dg-error \"'__builtin_crypto_vsbox' requires the '-mcrypto' option\" } */\n }\n \n void use_builtins_w (__vector unsigned int *p, __vector unsigned int *q, __vector unsigned int *r, __vector unsigned int *s)\n {\n   p[0] = __builtin_crypto_vpermxor (q[0], r[0], s[0]);\n   p[1] = __builtin_crypto_vpmsumw (q[1], r[1]);\n-  p[2] = __builtin_crypto_vshasigmaw (q[2], 1, 15); /* { dg-error \"'__builtin_crypto_vshasigmaw' is not supported with the current options\" } */\n+  p[2] = __builtin_crypto_vshasigmaw (q[2], 1, 15); /* { dg-error \"'__builtin_crypto_vshasigmaw' requires the '-mcrypto' option\" } */\n }\n \n void use_builtins_h (__vector unsigned short *p, __vector unsigned short *q, __vector unsigned short *r, __vector unsigned short *s)"}, {"sha": "b95fa324633e8f5da8eb8d4c094d2b066af95efa", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-splat-floatdouble.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-floatdouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-floatdouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-floatdouble.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -18,7 +18,7 @@ vector float test_fc ()\n vector double testd_00 (vector double x) { return vec_splat (x, 0b00000); }\n vector double testd_01 (vector double x) { return vec_splat (x, 0b00001); }\n vector double test_dc ()\n-{ const vector double y = { 3.0, 5.0 }; return vec_splat (y, 0b00010); }\n+{ const vector double y = { 3.0, 5.0 }; return vec_splat (y, 0b00001); }\n \n /* If the source vector is a known constant, we will generate a load or possibly\n    XXSPLTIW.  */\n@@ -28,5 +28,5 @@ vector double test_dc ()\n /* { dg-final { scan-assembler-times {\\mvspltw\\M|\\mxxspltw\\M} 3 } } */\n \n /* For double types, we will generate xxpermdi instructions.  */\n-/* { dg-final { scan-assembler-times \"xxpermdi\" 3 } } */\n+/* { dg-final { scan-assembler-times \"xxpermdi\" 2 } } */\n "}, {"sha": "3fa1f05d6f582f5dc8cb965ed1d536af7d2293fd", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-splat-longlong.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-longlong.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -9,23 +9,19 @@\n \n vector bool long long testb_00 (vector bool long long x) { return vec_splat (x, 0b00000); }\n vector bool long long testb_01 (vector bool long long x) { return vec_splat (x, 0b00001); }\n-vector bool long long testb_02 (vector bool long long x) { return vec_splat (x, 0b00010); }\n \n vector signed long long tests_00 (vector signed long long x) { return vec_splat (x, 0b00000); }\n vector signed long long tests_01 (vector signed long long x) { return vec_splat (x, 0b00001); }\n-vector signed long long tests_02 (vector signed long long x) { return vec_splat (x, 0b00010); }\n \n vector unsigned long long testu_00 (vector unsigned long long x) { return vec_splat (x, 0b00000); }\n vector unsigned long long testu_01 (vector unsigned long long x) { return vec_splat (x, 0b00001); }\n-vector unsigned long long testu_02 (vector unsigned long long x) { return vec_splat (x, 0b00010); }\n \n /* Similar test as above, but the source vector is a known constant. */\n-vector bool long long test_bll () { const vector bool long long y = {12, 23}; return vec_splat (y, 0b00010); }\n-vector signed long long test_sll () { const vector signed long long y = {34, 45}; return vec_splat (y, 0b00010); }\n-vector unsigned long long test_ull () { const vector unsigned long long y = {56, 67}; return vec_splat (y, 0b00010); }\n+vector bool long long test_bll () { const vector bool long long y = {12, 23}; return vec_splat (y, 0b00001); }\n+vector signed long long test_sll () { const vector signed long long y = {34, 45}; return vec_splat (y, 0b00001); }\n \n /* Assorted load instructions for the initialization with known constants. */\n-/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvd2x\\M|\\mlxv\\M|\\mplxv\\M} 3 } } */\n+/* { dg-final { scan-assembler-times {\\mlvx\\M|\\mlxvd2x\\M|\\mlxv\\M|\\mplxv\\M|\\mxxspltib\\M} 2 } } */\n \n /* xxpermdi for vec_splat of long long vectors.\n  At the time of this writing, the number of xxpermdi instructions"}, {"sha": "263a1723d31478fb384dda20cdef5ec428fb7ff9", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-splat-misc-invalid.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-misc-invalid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-misc-invalid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-splat-misc-invalid.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -10,24 +10,24 @@\n vector signed short\n testss_1 (unsigned int ui)\n {\n-  return vec_splat_s16 (ui);/* { dg-error \"argument 1 must be a 5-bit signed literal\" } */\n+  return vec_splat_s16 (ui);/* { dg-error \"argument 1 must be a literal between -16 and 15, inclusive\" } */\n }\n \n vector unsigned short\n testss_2 (signed int si)\n {\n-  return vec_splat_u16 (si);/* { dg-error \"argument 1 must be a 5-bit signed literal\" } */\n+  return vec_splat_u16 (si);/* { dg-error \"argument 1 must be a literal between -16 and 15, inclusive\" } */\n }\n \n vector signed char\n testsc_1 (unsigned int ui)\n {\n-  return vec_splat_s8 (ui); /* { dg-error \"argument 1 must be a 5-bit signed literal\" } */\n+  return vec_splat_s8 (ui); /* { dg-error \"argument 1 must be a literal between -16 and 15, inclusive\" } */\n }\n \n vector unsigned char\n testsc_2 (signed int si)\n {\n-  return vec_splat_u8 (si);/* { dg-error \"argument 1 must be a 5-bit signed literal\" } */\n+  return vec_splat_u8 (si);/* { dg-error \"argument 1 must be a literal between -16 and 15, inclusive\" } */\n }\n "}, {"sha": "1356793635a857e9924c5a1d73f264dc40a42976", "filename": "gcc/testsuite/gcc.target/powerpc/int_128bit-runnable.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fint_128bit-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fint_128bit-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fint_128bit-runnable.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -11,9 +11,9 @@\n /* { dg-final { scan-assembler-times {\\mvrlq\\M} 2 } } */\n /* { dg-final { scan-assembler-times {\\mvrlqnm\\M} 2 } } */\n /* { dg-final { scan-assembler-times {\\mvrlqmi\\M} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mvcmpequq\\M} 16 } } */\n-/* { dg-final { scan-assembler-times {\\mvcmpgtsq\\M} 16 } } */\n-/* { dg-final { scan-assembler-times {\\mvcmpgtuq\\M} 16 } } */\n+/* { dg-final { scan-assembler-times {\\mvcmpequq\\M} 24 } } */\n+/* { dg-final { scan-assembler-times {\\mvcmpgtsq\\M} 26 } } */\n+/* { dg-final { scan-assembler-times {\\mvcmpgtuq\\M} 26 } } */\n /* { dg-final { scan-assembler-times {\\mvmuloud\\M} 1 } } */\n /* { dg-final { scan-assembler-times {\\mvmulesd\\M} 1 } } */\n /* { dg-final { scan-assembler-times {\\mvmulosd\\M} 1 } } */"}, {"sha": "f37f1f169a22c93e05a0bb2c2838a0e4a4d098b5", "filename": "gcc/testsuite/gcc.target/powerpc/pr80315-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-1.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -10,6 +10,6 @@ main()\n   int mask;\n \n   /* Argument 2 must be 0 or 1.  Argument 3 must be in range 0..15.  */\n-  res = __builtin_crypto_vshasigmaw (test, 1, 0xff); /* { dg-error {argument 3 must be in the range \\[0, 15\\]} } */\n+  res = __builtin_crypto_vshasigmaw (test, 1, 0xff); /* { dg-error {argument 3 must be a 4-bit unsigned literal} } */\n   return 0;\n }"}, {"sha": "0819a0511b7c202f31b1b5f643d33b437851bd34", "filename": "gcc/testsuite/gcc.target/powerpc/pr80315-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-2.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -10,6 +10,6 @@ main ()\n   int mask;\n \n   /* Argument 2 must be 0 or 1.  Argument 3 must be in range 0..15.  */\n-  res = __builtin_crypto_vshasigmad (test, 1, 0xff); /* { dg-error {argument 3 must be in the range \\[0, 15\\]} } */\n+  res = __builtin_crypto_vshasigmad (test, 1, 0xff); /* { dg-error {argument 3 must be a 4-bit unsigned literal} } */\n   return 0;\n }"}, {"sha": "cc2e46cf5cbc92c026ee91146431e1d9c3e84d9d", "filename": "gcc/testsuite/gcc.target/powerpc/pr80315-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-3.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -12,6 +12,6 @@ main ()\n   int mask;\n \n   /* Argument 2 must be 0 or 1.  Argument 3 must be in range 0..15.  */\n-  res = vec_shasigma_be (test, 1, 0xff); /* { dg-error {argument 3 must be in the range \\[0, 15\\]} } */\n+  res = vec_shasigma_be (test, 1, 0xff); /* { dg-error {argument 3 must be a 4-bit unsigned literal} } */\n   return res;\n }"}, {"sha": "ac12910741b5eab24f5bfdcc352dde59014cbd34", "filename": "gcc/testsuite/gcc.target/powerpc/pr80315-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80315-4.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -12,6 +12,6 @@ main ()\n   int mask;\n \n   /* Argument 2 must be 0 or 1.  Argument 3 must be in range 0..15.  */\n-  res = vec_shasigma_be (test, 1, 0xff); /* { dg-error {argument 3 must be in the range \\[0, 15\\]} } */\n+  res = vec_shasigma_be (test, 1, 0xff); /* { dg-error {argument 3 must be a 4-bit unsigned literal} } */\n   return res;\n }"}, {"sha": "764c897a497669b55b874e1d9da5a7049edba18b", "filename": "gcc/testsuite/gcc.target/powerpc/pr88100.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr88100.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr88100.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr88100.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -10,35 +10,35 @@\n vector unsigned char\n splatu1 (void)\n {\n-  return vec_splat_u8(0x100);/* { dg-error \"argument 1 must be a 5-bit signed literal\" } */\n+  return vec_splat_u8(0x100);/* { dg-error \"argument 1 must be a literal between -16 and 15, inclusive\" } */\n }\n \n vector unsigned short\n splatu2 (void)\n {\n-  return vec_splat_u16(0x10000);/* { dg-error \"argument 1 must be a 5-bit signed literal\" } */\n+  return vec_splat_u16(0x10000);/* { dg-error \"argument 1 must be a literal between -16 and 15, inclusive\" } */\n }\n \n vector unsigned int\n splatu3 (void)\n {\n-  return vec_splat_u32(0x10000000);/* { dg-error \"argument 1 must be a 5-bit signed literal\" } */\n+  return vec_splat_u32(0x10000000);/* { dg-error \"argument 1 must be a literal between -16 and 15, inclusive\" } */\n }\n \n vector signed char\n splats1 (void)\n {\n-  return vec_splat_s8(0x100);/* { dg-error \"argument 1 must be a 5-bit signed literal\" } */\n+  return vec_splat_s8(0x100);/* { dg-error \"argument 1 must be a literal between -16 and 15, inclusive\" } */\n }\n \n vector signed short\n splats2 (void)\n {\n-  return vec_splat_s16(0x10000);/* { dg-error \"argument 1 must be a 5-bit signed literal\" } */\n+  return vec_splat_s16(0x10000);/* { dg-error \"argument 1 must be a literal between -16 and 15, inclusive\" } */\n }\n \n vector signed int\n splats3 (void)\n {\n-  return vec_splat_s32(0x10000000);/* { dg-error \"argument 1 must be a 5-bit signed literal\" } */\n+  return vec_splat_s32(0x10000000);/* { dg-error \"argument 1 must be a literal between -16 and 15, inclusive\" } */\n }"}, {"sha": "c1667d9f7db18f6a8ae5cf505c45ce3394a41c90", "filename": "gcc/testsuite/gcc.target/powerpc/pragma_misc9.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_misc9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_misc9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_misc9.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -20,15 +20,15 @@ vector bool int\n test2 (vector signed int a, vector signed int b)\n {\n   return vec_cmpnez (a, b);\n-  /* { dg-error \"'__builtin_altivec_vcmpnezw' requires the '-mcpu=power9' option\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-error \"'__builtin_altivec_vcmpnezw' requires the '-mcpu=power9' and '-mvsx' options\" \"\" { target *-*-* } .-1 } */\n }\n \n #pragma GCC target (\"cpu=power7\")\n vector signed int\n test3 (vector signed int a, vector signed int b)\n {\n   return vec_mergee (a, b);\n-  /* { dg-error \"'__builtin_altivec_vmrgew_v4si' requires the '-mpower8-vector' option\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-error \"'__builtin_altivec_vmrgew_v4si' requires the '-mcpu=power8' and '-mvsx' options\" \"\" { target *-*-* } .-1 } */\n }\n \n #pragma GCC target (\"cpu=power6\")"}, {"sha": "cb0f30844d38301dfb4934b05368e76e976144e7", "filename": "gcc/testsuite/gcc.target/powerpc/pragma_power8.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_power8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_power8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_power8.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -19,6 +19,7 @@ test1 (vector int a, vector int b)\n #pragma GCC target (\"cpu=power7\")\n /* Force a re-read of altivec.h with new cpu target. */\n #undef _ALTIVEC_H\n+#undef _RS6000_VECDEFINES_H\n #include <altivec.h>\n #ifdef _ARCH_PWR7\n vector signed int\n@@ -33,6 +34,7 @@ test2 (vector signed int a, vector signed int b)\n #pragma GCC target (\"cpu=power8\")\n /* Force a re-read of altivec.h with new cpu target. */\n #undef _ALTIVEC_H\n+#undef _RS6000_VECDEFINES_H\n #include <altivec.h>\n #ifdef _ARCH_PWR8\n vector int"}, {"sha": "e05f1f4ddfac0dbc1fce467fccb967e114827f0e", "filename": "gcc/testsuite/gcc.target/powerpc/pragma_power9.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_power9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_power9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpragma_power9.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -17,6 +17,7 @@ test1 (vector int a, vector int b)\n \n #pragma GCC target (\"cpu=power7\")\n #undef _ALTIVEC_H\n+#undef _RS6000_VECDEFINES_H\n #include <altivec.h>\n #ifdef _ARCH_PWR7\n vector signed int\n@@ -30,6 +31,7 @@ test2 (vector signed int a, vector signed int b)\n \n #pragma GCC target (\"cpu=power8\")\n #undef _ALTIVEC_H\n+#undef _RS6000_VECDEFINES_H\n #include <altivec.h>\n #ifdef _ARCH_PWR8\n vector int\n@@ -50,6 +52,7 @@ test3b (vec_t a, vec_t b)\n \n #pragma GCC target (\"cpu=power9,power9-vector\")\n #undef _ALTIVEC_H\n+#undef _RS6000_VECDEFINES_H\n #include <altivec.h>\n #ifdef _ARCH_PWR9\n vector bool int"}, {"sha": "4f9d9e08e8a772e361c44b3ea8c0b34f6859da50", "filename": "gcc/testsuite/gcc.target/powerpc/test_fpscr_drn_builtin_error.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftest_fpscr_drn_builtin_error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftest_fpscr_drn_builtin_error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftest_fpscr_drn_builtin_error.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -9,8 +9,8 @@ int main ()\n      __builtin_set_fpscr_drn() also support a variable as an argument but\n      can't test variable value at compile time.  */\n \n-  __builtin_set_fpscr_drn(-1);  /* { dg-error \"Argument must be a value between 0 and 7\" } */ \n-  __builtin_set_fpscr_drn(8);   /* { dg-error \"Argument must be a value between 0 and 7\" } */ \n+  __builtin_set_fpscr_drn(-1);  /* { dg-error \"argument 1 must be a variable or a literal between 0 and 7, inclusive\" } */ \n+  __builtin_set_fpscr_drn(8);   /* { dg-error \"argument 1 must be a variable or a literal between 0 and 7, inclusive\" } */ \n \n }\n "}, {"sha": "10391b71008e19dd05e11b24825e7baaf4bc4f27", "filename": "gcc/testsuite/gcc.target/powerpc/test_fpscr_rn_builtin_error.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftest_fpscr_rn_builtin_error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftest_fpscr_rn_builtin_error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftest_fpscr_rn_builtin_error.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -8,13 +8,13 @@ int main ()\n      int arguments.  The builtins __builtin_set_fpscr_rn() also supports a\n      variable as an argument but can't test variable value at compile time.  */\n \n-  __builtin_mtfsb0(-1);  /* { dg-error \"Argument must be a constant between 0 and 31\" } */\n-  __builtin_mtfsb0(32);  /* { dg-error \"Argument must be a constant between 0 and 31\" } */\n+  __builtin_mtfsb0(-1);  /* { dg-error \"argument 1 must be a 5-bit unsigned literal\" } */\n+  __builtin_mtfsb0(32);  /* { dg-error \"argument 1 must be a 5-bit unsigned literal\" } */\n \n-  __builtin_mtfsb1(-1);  /* { dg-error \"Argument must be a constant between 0 and 31\" } */\n-  __builtin_mtfsb1(32);  /* { dg-error \"Argument must be a constant between 0 and 31\" } */ \n+  __builtin_mtfsb1(-1);  /* { dg-error \"argument 1 must be a 5-bit unsigned literal\" } */\n+  __builtin_mtfsb1(32);  /* { dg-error \"argument 1 must be a 5-bit unsigned literal\" } */ \n \n-  __builtin_set_fpscr_rn(-1);  /* { dg-error \"Argument must be a value between 0 and 3\" } */ \n-  __builtin_set_fpscr_rn(4);   /* { dg-error \"Argument must be a value between 0 and 3\" } */ \n+  __builtin_set_fpscr_rn(-1);  /* { dg-error \"argument 1 must be a variable or a literal between 0 and 3, inclusive\" } */ \n+  __builtin_set_fpscr_rn(4);   /* { dg-error \"argument 1 must be a variable or a literal between 0 and 3, inclusive\" } */ \n }\n "}, {"sha": "4e59cbffa17698835bc2b42ca97b5513f888eec4", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-2.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -20,7 +20,7 @@ do_vec_gnb (vector unsigned __int128 source, int stride)\n     case 5:\n       return vec_gnb (source, 1);\t/* { dg-error \"between 2 and 7\" } */\n     case 6:\n-      return vec_gnb (source, stride);\t/* { dg-error \"unsigned literal\" } */\n+      return vec_gnb (source, stride);\t/* { dg-error \"literal\" } */\n     case 7:\n       return vec_gnb (source, 7);\n "}, {"sha": "a41e82e3b8cc142955eae5d9d130a30ceec357d6", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-nez-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-nez-7.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -12,5 +12,5 @@ test_all_not_equal_and_not_zero (vector unsigned short *arg1_p,\n   vector unsigned short arg_2 = *arg2_p;\n \n   return __builtin_vec_vcmpnez_p (__CR6_LT, arg_1, arg_2);\n-  /* { dg-error \"'__builtin_altivec_vcmpnezh_p' requires the '-mcpu=power9' option\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-error \"'__builtin_altivec_vcmpnezh_p' requires the '-mcpu=power9' and '-mvsx' options\" \"\" { target *-*-* } .-1 } */\n }"}, {"sha": "3bf8a3247726edb6a94944ce12dc1a7a19cafff1", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eqz-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eqz-7.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -11,5 +11,5 @@ test_any_equal (vector unsigned int *arg1_p, vector unsigned int *arg2_p)\n   vector unsigned int arg_2 = *arg2_p;\n \n   return __builtin_vec_vcmpnez_p (__CR6_LT_REV, arg_1, arg_2);\n-  /* { dg-error \"'__builtin_altivec_vcmpnezw_p' requires the '-mcpu=power9' option\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-error \"'__builtin_altivec_vcmpnezw_p' requires the '-mcpu=power9' and '-mvsx' options\" \"\" { target *-*-* } .-1 } */\n }"}, {"sha": "52110af7283462c92b9a56cc854719f8f8f1ea86", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpnez-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpnez-7.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -10,5 +10,5 @@ fetch_data (vector unsigned int *arg1_p, vector unsigned int *arg2_p)\n   vector unsigned int arg_1 = *arg1_p;\n   vector unsigned int arg_2 = *arg2_p;\n \n-  return __builtin_vec_vcmpnez (arg_1, arg_2);\t/* { dg-error \"'__builtin_altivec_vcmpnezw' requires the '-mcpu=power9' option\" } */\n+  return __builtin_vec_vcmpnez (arg_1, arg_2);\t/* { dg-error \"'__builtin_altivec_vcmpnezw' requires the '-mcpu=power9' and '-mvsx' options\" } */\n }"}, {"sha": "dd0d3374879e4431051f11c37a452ea03a144406", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cntlz-lsbb-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cntlz-lsbb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cntlz-lsbb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cntlz-lsbb-2.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -9,5 +9,5 @@ count_leading_zero_byte_bits (vector unsigned char *arg1_p)\n {\n   vector unsigned char arg_1 = *arg1_p;\n \n-  return __builtin_vec_vclzlsbb (arg_1);\t/* { dg-error \"'__builtin_altivec_vclzlsbb_v16qi' requires the '-mcpu=power9' option\" } */\n+  return __builtin_vec_vclzlsbb (arg_1);\t/* { dg-error \"'__builtin_altivec_vclzlsbb_v16qi' requires the '-mcpu=power9' and '-mvsx' options\" } */\n }"}, {"sha": "22c55ef25ae3b2416ce3f004892e7dbc30cd9550", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cnttz-lsbb-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cnttz-lsbb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cnttz-lsbb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cnttz-lsbb-2.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -9,5 +9,5 @@ count_trailing_zero_byte_bits (vector unsigned char *arg1_p)\n {\n   vector unsigned char arg_1 = *arg1_p;\n \n-  return __builtin_vec_vctzlsbb (arg_1);\t/* { dg-error \"'__builtin_altivec_vctzlsbb_v16qi' requires the '-mcpu=power9' option\" } */\n+  return __builtin_vec_vctzlsbb (arg_1);\t/* { dg-error \"'__builtin_altivec_vctzlsbb_v16qi' requires the '-mcpu=power9' and '-mvsx' options\" } */\n }"}, {"sha": "0f601fbbb505a0a24582bd177444289129c8e339", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xl-len-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xl-len-13.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -13,5 +13,5 @@\n int\n fetch_data (float *address, size_t length)\n {\n-  return __builtin_vec_lxvl (address, length);\t/* { dg-warning \"'__builtin_vec_lxvl'\" } */\n+  return __builtin_vec_lxvl (address, length);\t/* { dg-error \"'__builtin_vsx_lxvl' requires the\" } */\n }"}, {"sha": "f30d49cb4cc54baca8417aa2761b474c7abc5650", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-xst-len-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08236359eb22918ba067489edcec02857109d09/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-xst-len-12.c?ref=d08236359eb22918ba067489edcec02857109d09", "patch": "@@ -13,5 +13,5 @@ store_data (vector double *datap, double *address, size_t length)\n {\n   vector double data = *datap;\n \n-  __builtin_vec_stxvl (data, address, length); /* { dg-error \"'__builtin_vec_stxvl' is not supported in this compiler configuration\" } */\n+  __builtin_vec_stxvl (data, address, length); /* { dg-error \"'__builtin_altivec_stxvl' requires the\" } */\n }"}]}