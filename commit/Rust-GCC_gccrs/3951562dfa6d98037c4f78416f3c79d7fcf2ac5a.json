{"sha": "3951562dfa6d98037c4f78416f3c79d7fcf2ac5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk1MTU2MmRmYTZkOTgwMzdjNGY3ODQxNmYzYzc5ZDdmY2YyYWM1YQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@cygnus.com", "date": "2000-05-16T14:38:21Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2000-05-16T14:38:21Z"}, "message": "ppc-signal.h: New file.\n\n2000-05-15  Andrew Haley  <aph@cygnus.com>\n\n        * include/ppc-signal.h: New file.\n\nFrom-SVN: r33932", "tree": {"sha": "64c4ca73671775fa75677e104af81eb24a4a5a13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64c4ca73671775fa75677e104af81eb24a4a5a13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3951562dfa6d98037c4f78416f3c79d7fcf2ac5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3951562dfa6d98037c4f78416f3c79d7fcf2ac5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3951562dfa6d98037c4f78416f3c79d7fcf2ac5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3951562dfa6d98037c4f78416f3c79d7fcf2ac5a/comments", "author": null, "committer": null, "parents": [{"sha": "1e248c55a78d8689c97897fa13368cf3a769fa16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e248c55a78d8689c97897fa13368cf3a769fa16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e248c55a78d8689c97897fa13368cf3a769fa16"}], "stats": {"total": 119, "additions": 119, "deletions": 0}, "files": [{"sha": "a0ff26752ad3121265c1fd139133385ddc2523dc", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3951562dfa6d98037c4f78416f3c79d7fcf2ac5a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3951562dfa6d98037c4f78416f3c79d7fcf2ac5a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3951562dfa6d98037c4f78416f3c79d7fcf2ac5a", "patch": "@@ -1,3 +1,7 @@\n+2000-05-15  Andrew Haley  <aph@cygnus.com>\n+\n+\t* include/ppc-signal.h: New file.\n+\n 2000-05-11  Tom Tromey  <tromey@cygnus.com>\n \n \t* java/util/zip/ZipInputStream.java (getNextEntry): When reading"}, {"sha": "003a76045336f3cdae7df077d7292133a8fe84d2", "filename": "libjava/include/ppc-signal.h", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3951562dfa6d98037c4f78416f3c79d7fcf2ac5a/libjava%2Finclude%2Fppc-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3951562dfa6d98037c4f78416f3c79d7fcf2ac5a/libjava%2Finclude%2Fppc-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fppc-signal.h?ref=3951562dfa6d98037c4f78416f3c79d7fcf2ac5a", "patch": "@@ -0,0 +1,115 @@\n+// ppc-signal.h - Catch runtime signals and turn them into exceptions.\n+\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#ifndef JAVA_SIGNAL_H\n+#define JAVA_SIGNAL_H 1\n+\n+#include <signal.h>\n+#include <ucontext.h>\n+\n+#define HANDLE_SEGV 1\n+#undef HANDLE_FPE\n+\n+#define SIGNAL_HANDLER(_name)\t\t\t\\\n+__asm (\"\\t.section\\t\\\".text\\\"\\n\"\t\t\\\n+       \"\\t.align 2\\n\"\t\t\t\t\\\n+       \"_Jv_\" #_name \":\\n\"\t\t\t\\\n+       \"\\tmr 3, 1\\n\"\t\t\t\t\\\n+       \"\\tb _Jv_stub_\" #_name \"\\n\");\t\t\\\n+extern \"C\" void _Jv_##_name (int _dummy);\t\\\n+extern \"C\" void _Jv_stub_##_name (char *_sp)\t\\\n+\n+class java::lang::Throwable;\n+\n+// Unwind the stack to the point at which the signal was generated and\n+// then throw an exception.\n+\n+#define MAKE_THROW_FRAME(_exception)\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  struct sigcontext_struct *_context\t\t\t\t\t\\\n+    = (struct sigcontext_struct *)(_sp + __SIGNAL_FRAMESIZE);\t\t\\\n+  long int regs [34];\t\t\t\t\t\t\t\\\n+  memcpy (regs, &_context->regs->gpr[0], 32 * sizeof (long int));\t\\\n+  regs[32] = _context->regs->nip + sizeof (long int);\t\t\t\\\n+  regs[33] = _context->regs->link;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  __asm volatile (\t\t\t\t\t\t\t\\\n+\t\"\\tmr 31,%0\\n\"\t\t\t\t\t\t\t\\\n+        \"\\tmr 3,%1              # exception to throw\\n\"\t\t\t\\\n+        \"\\tlwz 0,128(31)        # ip\\n\"\t\t\t\t\t\\\n+        \"\\tmtlr 0\\n\"\t\t\t\t\t\t\t\\\n+        \"\\tlwz 1,4(31)          # previous r1\\n\"\t\t\t\\\n+        \"\\tlwz 0,132(31)        # previous lr\\n\"\t\t\t\\\n+        \"\\tlwz 2,0(1)           # previous previous r1\\n\"\t\t\\\n+        \"\\tstw 0,4(2)           # save previous lr\\n\"\t\t\t\\\n+\t\"\\tlwz 0,0(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 2,8(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 4,16(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 5,20(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 6,24(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 7,28(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 8,32(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 9,36(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 10,40(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 11,44(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 12,48(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 13,52(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 14,56(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 15,60(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 16,64(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 17,68(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 18,72(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 19,76(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 20,80(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 21,84(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 22,88(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 23,92(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 24,96(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 25,100(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 26,104(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 27,108(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 28,112(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 29,116(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 30,120(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tlwz 31,124(31)\\n\"\t\t\t\t\t\t\\\n+\t\"\\tb _Jv_ThrowSignal\\n\"\t\t\t\t\t\t\\\n+\t\t  : : \"r\"(regs), \"r\"(_exception)\t       \t\t\\\n+\t\t  : \"r31\", \"r3\");\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+while (0)  \n+\n+\n+#define INIT_SEGV\t\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    nullp = new java::lang::NullPointerException ();    \t\\\n+    struct sigaction act;\t\t\t\t\t\\\n+    act.sa_handler = _Jv_catch_segv;\t\t\t\t\\\n+    sigemptyset (&act.sa_mask);\t\t\t\t\t\\\n+    act.sa_flags = 0;\t\t\t\t\t\t\\\n+    __sigaction (SIGSEGV, &act, NULL);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)  \n+\n+#define INIT_FPE\t\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  { \t\t\t\t\t\t\t\t\\\n+    arithexception = new java::lang::ArithmeticException \t\\\n+      (JvNewStringLatin1 (\"/ by zero\"));\t\t\t\\\n+    struct sigaction act;\t\t\t\t\t\\\n+    act.sa_handler = _Jv_catch_fpe;\t\t\t\t\\\n+    sigemptyset (&act.sa_mask);\t\t\t\t\t\\\n+    act.sa_flags = 0;\t\t\t\t\t\t\\\n+    __sigaction (SIGFPE, &act, NULL);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)  \n+\n+#endif /* JAVA_SIGNAL_H */"}]}