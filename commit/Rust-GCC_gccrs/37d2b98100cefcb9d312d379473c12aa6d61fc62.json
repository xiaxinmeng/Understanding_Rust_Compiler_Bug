{"sha": "37d2b98100cefcb9d312d379473c12aa6d61fc62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdkMmI5ODEwMGNlZmNiOWQzMTJkMzc5NDczYzEyYWE2ZDYxZmM2Mg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-27T18:18:25Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-27T18:18:25Z"}, "message": "c++: Fix Bases(args...)... base initialization [PR88580]\n\nWhen substituting into the arguments of a base initializer pack\nexpansion, tsubst_initializer_list uses a dummy EXPR_PACK_EXPANSION\nin order to expand an initializer such as Bases(args)... into\nBases#{0}(args#{0}) and so on.  But when an argument inside the base\ninitializer is itself a pack expansion, as in Bases(args...)..., the\nargument is already an EXPR_PACK_EXPANSION so we don't need to wrap it.\nIt's also independent from the outer expansion of Bases, so we need to\n\"multiplicatively\" append the expansion of args... onto the argument\nlist of each expanded base.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/88580\n\t* pt.c (tsubst_initializer_list): Correctly handle the case\n\twhere an argument inside a base initializer pack expansion is\n\titself a pack expansion.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/88580\n\t* g++.dg/cpp0x/variadic182.C: New test.", "tree": {"sha": "49b2e2ad017d1b3dcba89fcc2a1356a9c7b42dc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49b2e2ad017d1b3dcba89fcc2a1356a9c7b42dc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37d2b98100cefcb9d312d379473c12aa6d61fc62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d2b98100cefcb9d312d379473c12aa6d61fc62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37d2b98100cefcb9d312d379473c12aa6d61fc62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d2b98100cefcb9d312d379473c12aa6d61fc62/comments", "author": null, "committer": null, "parents": [{"sha": "85ef4b8d4eb3313a48b79c7e752891f9646bb246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85ef4b8d4eb3313a48b79c7e752891f9646bb246", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85ef4b8d4eb3313a48b79c7e752891f9646bb246"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "eaf46659f85c95057ce5d87e30a25ad095dc1350", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d2b98100cefcb9d312d379473c12aa6d61fc62/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d2b98100cefcb9d312d379473c12aa6d61fc62/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=37d2b98100cefcb9d312d379473c12aa6d61fc62", "patch": "@@ -26389,9 +26389,16 @@ tsubst_initializer_list (tree t, tree argvec)\n \t\t  tree expanded_exprs;\n \n \t\t  /* Expand the argument.  */\n-\t\t  SET_PACK_EXPANSION_PATTERN (expr, TREE_VALUE (arg));\n+\t\t  tree value;\n+\t\t  if (TREE_CODE (TREE_VALUE (arg)) == EXPR_PACK_EXPANSION)\n+\t\t    value = TREE_VALUE (arg);\n+\t\t  else\n+\t\t    {\n+\t\t      value = expr;\n+\t\t      SET_PACK_EXPANSION_PATTERN (value, TREE_VALUE (arg));\n+\t\t    }\n \t\t  expanded_exprs\n-\t\t    = tsubst_pack_expansion (expr, argvec,\n+\t\t    = tsubst_pack_expansion (value, argvec,\n \t\t\t\t\t     tf_warning_or_error,\n \t\t\t\t\t     NULL_TREE);\n \t\t  if (expanded_exprs == error_mark_node)\n@@ -26400,12 +26407,17 @@ tsubst_initializer_list (tree t, tree argvec)\n \t\t  /* Prepend each of the expanded expressions to the\n \t\t     corresponding TREE_LIST in EXPANDED_ARGUMENTS.  */\n \t\t  for (i = 0; i < len; i++)\n-\t\t    {\n-\t\t      TREE_VEC_ELT (expanded_arguments, i) =\n-\t\t\ttree_cons (NULL_TREE,\n-\t\t\t\t   TREE_VEC_ELT (expanded_exprs, i),\n-\t\t\t\t   TREE_VEC_ELT (expanded_arguments, i));\n-\t\t    }\n+\t\t    if (TREE_CODE (TREE_VALUE (arg)) == EXPR_PACK_EXPANSION)\n+\t\t      for (int j = 0; j < TREE_VEC_LENGTH (expanded_exprs); j++)\n+\t\t\tTREE_VEC_ELT (expanded_arguments, i)\n+\t\t\t  = tree_cons (NULL_TREE,\n+\t\t\t\t       TREE_VEC_ELT (expanded_exprs, j),\n+\t\t\t\t       TREE_VEC_ELT (expanded_arguments, i));\n+\t\t    else\n+\t\t      TREE_VEC_ELT (expanded_arguments, i)\n+\t\t\t= tree_cons (NULL_TREE,\n+\t\t\t\t     TREE_VEC_ELT (expanded_exprs, i),\n+\t\t\t\t     TREE_VEC_ELT (expanded_arguments, i));\n \t\t}\n \t      in_base_initializer = 0;\n "}, {"sha": "078de740e014253d9cd9237146853ed63dabe23d", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic182.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d2b98100cefcb9d312d379473c12aa6d61fc62/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic182.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d2b98100cefcb9d312d379473c12aa6d61fc62/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic182.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic182.C?ref=37d2b98100cefcb9d312d379473c12aa6d61fc62", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/88580\n+// { dg-do compile { target c++11 } }\n+\n+template <class... Bases>\n+struct Derived : Bases... {\n+  template <class... Ts>\n+  Derived(Ts... args) : Bases(args, args..., args)... { }\n+};\n+\n+struct A { };\n+struct B { };\n+struct C { };\n+\n+struct Base1 { Base1(A, A, B, C, A); };\n+struct Base2 { Base2(B, A, B, C, B); };\n+struct Base3 { Base3(C, A, B, C, C); };\n+\n+Derived<Base1, Base2, Base3> d(A{}, B{}, C{});"}]}