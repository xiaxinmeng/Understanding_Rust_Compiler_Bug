{"sha": "053876cdbe8057210e6f4da4eec2df58f92ccd4c", "node_id": "C_kwDOANBUbNoAKDA1Mzg3NmNkYmU4MDU3MjEwZTZmNGRhNGVlYzJkZjU4ZjkyY2NkNGM", "commit": {"author": {"name": "Tom Honermann", "email": "tom@honermann.net", "date": "2022-08-02T18:36:02Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-08-08T19:50:40Z"}, "message": "preprocessor/106426: Treat u8 character literals as unsigned in char8_t modes.\n\nThis patch corrects handling of UTF-8 character literals in preprocessing\ndirectives so that they are treated as unsigned types in char8_t enabled\nC++ modes (C++17 with -fchar8_t or C++20 without -fno-char8_t). Previously,\nUTF-8 character literals were always treated as having the same type as\nordinary character literals (signed or unsigned dependent on target or use\nof the -fsigned-char or -funsigned char options).\n\n\tPR preprocessor/106426\n\ngcc/c-family/ChangeLog:\n\t* c-opts.cc (c_common_post_options): Assign cpp_opts->unsigned_utf8char\n\tsubject to -fchar8_t, -fsigned-char, and/or -funsigned-char.\n\ngcc/testsuite/ChangeLog:\n\t* g++.dg/ext/char8_t-char-literal-1.C: Check signedness of u8 literals.\n\t* g++.dg/ext/char8_t-char-literal-2.C: Check signedness of u8 literals.\n\nlibcpp/ChangeLog:\n\t* charset.cc (narrow_str_to_charconst): Set signedness of CPP_UTF8CHAR\n\tliterals based on unsigned_utf8char.\n\t* include/cpplib.h (cpp_options): Add unsigned_utf8char.\n\t* init.cc (cpp_create_reader): Initialize unsigned_utf8char.", "tree": {"sha": "4647bf6d6ec1b7d28931ec90daeefea8c528d118", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4647bf6d6ec1b7d28931ec90daeefea8c528d118"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/053876cdbe8057210e6f4da4eec2df58f92ccd4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053876cdbe8057210e6f4da4eec2df58f92ccd4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/053876cdbe8057210e6f4da4eec2df58f92ccd4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053876cdbe8057210e6f4da4eec2df58f92ccd4c/comments", "author": {"login": "tahonermann", "id": 2211804, "node_id": "MDQ6VXNlcjIyMTE4MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2211804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tahonermann", "html_url": "https://github.com/tahonermann", "followers_url": "https://api.github.com/users/tahonermann/followers", "following_url": "https://api.github.com/users/tahonermann/following{/other_user}", "gists_url": "https://api.github.com/users/tahonermann/gists{/gist_id}", "starred_url": "https://api.github.com/users/tahonermann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tahonermann/subscriptions", "organizations_url": "https://api.github.com/users/tahonermann/orgs", "repos_url": "https://api.github.com/users/tahonermann/repos", "events_url": "https://api.github.com/users/tahonermann/events{/privacy}", "received_events_url": "https://api.github.com/users/tahonermann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "703837b2cc8ac03c53ac7cc0fb1327055acaebd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/703837b2cc8ac03c53ac7cc0fb1327055acaebd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/703837b2cc8ac03c53ac7cc0fb1327055acaebd2"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "9833e509b2dd1ada2dc323737a4c79ff10496d5f", "filename": "gcc/c-family/c-opts.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053876cdbe8057210e6f4da4eec2df58f92ccd4c/gcc%2Fc-family%2Fc-opts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053876cdbe8057210e6f4da4eec2df58f92ccd4c/gcc%2Fc-family%2Fc-opts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.cc?ref=053876cdbe8057210e6f4da4eec2df58f92ccd4c", "patch": "@@ -1062,6 +1062,7 @@ c_common_post_options (const char **pfilename)\n   /* char8_t support is implicitly enabled in C++20 and C2X.  */\n   if (flag_char8_t == -1)\n     flag_char8_t = (cxx_dialect >= cxx20) || flag_isoc2x;\n+  cpp_opts->unsigned_utf8char = flag_char8_t ? 1 : cpp_opts->unsigned_char;\n \n   if (flag_extern_tls_init)\n     {"}, {"sha": "2994dd38516a9bc3c3ab03e56192acd68826a811", "filename": "gcc/testsuite/g++.dg/ext/char8_t-char-literal-1.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053876cdbe8057210e6f4da4eec2df58f92ccd4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-char-literal-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053876cdbe8057210e6f4da4eec2df58f92ccd4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-char-literal-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-char-literal-1.C?ref=053876cdbe8057210e6f4da4eec2df58f92ccd4c", "patch": "@@ -1,6 +1,6 @@\n // Test that UTF-8 character literals have type char if -fchar8_t is not enabled.\n // { dg-do compile }\n-// { dg-options \"-std=c++17 -fno-char8_t\" }\n+// { dg-options \"-std=c++17 -fsigned-char -fno-char8_t\" }\n \n template<typename T1, typename T2>\n   struct is_same\n@@ -10,3 +10,7 @@ template<typename T>\n   { static const bool value = true; };\n \n static_assert(is_same<decltype(u8'x'), char>::value, \"Error\");\n+\n+#if u8'\\0' - 1 > 0\n+#error \"UTF-8 character literals not signed in preprocessor\"\n+#endif"}, {"sha": "db4fe70046d93711c3c9c9c3d0268320d2fb58d4", "filename": "gcc/testsuite/g++.dg/ext/char8_t-char-literal-2.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053876cdbe8057210e6f4da4eec2df58f92ccd4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-char-literal-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053876cdbe8057210e6f4da4eec2df58f92ccd4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-char-literal-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fchar8_t-char-literal-2.C?ref=053876cdbe8057210e6f4da4eec2df58f92ccd4c", "patch": "@@ -10,3 +10,7 @@ template<typename T>\n   { static const bool value = true; };\n \n static_assert(is_same<decltype(u8'x'), char8_t>::value, \"Error\");\n+\n+#if u8'\\0' - 1 < 0\n+#error \"UTF-8 character literals not unsigned in preprocessor\"\n+#endif"}, {"sha": "12e3163222820a43c8f208c36cdb924f42917aa7", "filename": "libcpp/charset.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053876cdbe8057210e6f4da4eec2df58f92ccd4c/libcpp%2Fcharset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053876cdbe8057210e6f4da4eec2df58f92ccd4c/libcpp%2Fcharset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.cc?ref=053876cdbe8057210e6f4da4eec2df58f92ccd4c", "patch": "@@ -1960,8 +1960,8 @@ narrow_str_to_charconst (cpp_reader *pfile, cpp_string str,\n   /* Multichar constants are of type int and therefore signed.  */\n   if (i > 1)\n     unsigned_p = 0;\n-  else if (type == CPP_UTF8CHAR && !CPP_OPTION (pfile, cplusplus))\n-    unsigned_p = 1;\n+  else if (type == CPP_UTF8CHAR)\n+    unsigned_p = CPP_OPTION (pfile, unsigned_utf8char);\n   else\n     unsigned_p = CPP_OPTION (pfile, unsigned_char);\n "}, {"sha": "f9c042db0347a7a1b68dd67de6c26742c09853fb", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053876cdbe8057210e6f4da4eec2df58f92ccd4c/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053876cdbe8057210e6f4da4eec2df58f92ccd4c/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=053876cdbe8057210e6f4da4eec2df58f92ccd4c", "patch": "@@ -581,8 +581,8 @@ struct cpp_options\n      ints and target wide characters, respectively.  */\n   size_t precision, char_precision, int_precision, wchar_precision;\n \n-  /* True means chars (wide chars) are unsigned.  */\n-  bool unsigned_char, unsigned_wchar;\n+  /* True means chars (wide chars, UTF-8 chars) are unsigned.  */\n+  bool unsigned_char, unsigned_wchar, unsigned_utf8char;\n \n   /* True if the most significant byte in a word has the lowest\n      address in memory.  */"}, {"sha": "0242da5f55c30e99dcfc48d7ef18aafc2209da58", "filename": "libcpp/init.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053876cdbe8057210e6f4da4eec2df58f92ccd4c/libcpp%2Finit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053876cdbe8057210e6f4da4eec2df58f92ccd4c/libcpp%2Finit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.cc?ref=053876cdbe8057210e6f4da4eec2df58f92ccd4c", "patch": "@@ -231,6 +231,7 @@ cpp_create_reader (enum c_lang lang, cpp_hash_table *table,\n   CPP_OPTION (pfile, int_precision) = CHAR_BIT * sizeof (int);\n   CPP_OPTION (pfile, unsigned_char) = 0;\n   CPP_OPTION (pfile, unsigned_wchar) = 1;\n+  CPP_OPTION (pfile, unsigned_utf8char) = 1;\n   CPP_OPTION (pfile, bytes_big_endian) = 1;  /* does not matter */\n \n   /* Default to no charset conversion.  */"}]}