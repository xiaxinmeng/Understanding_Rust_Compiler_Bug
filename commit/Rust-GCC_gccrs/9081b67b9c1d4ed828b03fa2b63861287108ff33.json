{"sha": "9081b67b9c1d4ed828b03fa2b63861287108ff33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA4MWI2N2I5YzFkNGVkODI4YjAzZmEyYjYzODYxMjg3MTA4ZmYzMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-01-19T06:04:00Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-01-19T06:04:00Z"}, "message": "Avoid crash with extra struct initializers with abstract types.\n\nFrom-SVN: r168984", "tree": {"sha": "70eebdb250cef4bbfacfa7e9f55ed94a99e2a0bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70eebdb250cef4bbfacfa7e9f55ed94a99e2a0bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9081b67b9c1d4ed828b03fa2b63861287108ff33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9081b67b9c1d4ed828b03fa2b63861287108ff33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9081b67b9c1d4ed828b03fa2b63861287108ff33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9081b67b9c1d4ed828b03fa2b63861287108ff33/comments", "author": null, "committer": null, "parents": [{"sha": "8ed8ea7900b912c5a4044e76688239df38d3fef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ed8ea7900b912c5a4044e76688239df38d3fef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ed8ea7900b912c5a4044e76688239df38d3fef2"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "819fb616452b786f59a3658526e2011b22cace03", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9081b67b9c1d4ed828b03fa2b63861287108ff33/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9081b67b9c1d4ed828b03fa2b63861287108ff33/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=9081b67b9c1d4ed828b03fa2b63861287108ff33", "patch": "@@ -10609,6 +10609,10 @@ Struct_construction_expression::do_determine_type(const Type_context*)\n \t  (*pv)->determine_type(&subcontext);\n \t}\n     }\n+  // Extra values are an error we will report elsewhere; we still want\n+  // to determine the type to avoid knockon errors.\n+  for (; pv != this->vals_->end(); ++pv)\n+    (*pv)->determine_type_no_context();\n }\n \n // Check types."}]}