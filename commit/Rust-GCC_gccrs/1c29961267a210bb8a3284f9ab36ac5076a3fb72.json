{"sha": "1c29961267a210bb8a3284f9ab36ac5076a3fb72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMyOTk2MTI2N2EyMTBiYjhhMzI4NGY5YWIzNmFjNTA3NmEzZmI3Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-10-03T15:28:47Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-10-03T15:28:47Z"}, "message": "hashtable.h (_Hashtable<>::insert(value_type&&), [...]): Don't define here...\n\n2011-10-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/hashtable.h (_Hashtable<>::insert(value_type&&),\n\tinsert(const_iterator, value_type&&)): Don't define here...\n\t* include/bits/unordered_set.h (__unordered_set<>,\n\t__unordered_multiset<>): ... define here instead.\n\nFrom-SVN: r179464", "tree": {"sha": "edde729f626371b44609d6f3125611f726b76706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edde729f626371b44609d6f3125611f726b76706"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c29961267a210bb8a3284f9ab36ac5076a3fb72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c29961267a210bb8a3284f9ab36ac5076a3fb72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c29961267a210bb8a3284f9ab36ac5076a3fb72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c29961267a210bb8a3284f9ab36ac5076a3fb72/comments", "author": null, "committer": null, "parents": [{"sha": "f90e8e2eae9a83d22efd7922673116a97ebf5290", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f90e8e2eae9a83d22efd7922673116a97ebf5290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f90e8e2eae9a83d22efd7922673116a97ebf5290"}], "stats": {"total": 79, "additions": 51, "deletions": 28}, "files": [{"sha": "31c691497336d2ee7c802bcc01d4e0f76fdd5751", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c29961267a210bb8a3284f9ab36ac5076a3fb72/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c29961267a210bb8a3284f9ab36ac5076a3fb72/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1c29961267a210bb8a3284f9ab36ac5076a3fb72", "patch": "@@ -1,7 +1,14 @@\n+2011-10-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/hashtable.h (_Hashtable<>::insert(value_type&&),\n+\tinsert(const_iterator, value_type&&)): Don't define here...\n+\t* include/bits/unordered_set.h (__unordered_set<>,\n+\t__unordered_multiset<>): ... define here instead.\n+\n 2011-09-29  Jason Merrill  <jason@redhat.com>\n \n \t* testsuite/util/testsuite_tr1.h (test_property): Avoid\n-\tambguity.\n+\tambiguity.\n \n 2011-10-01  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n "}, {"sha": "95d06b21262e847cade69071bbe135c44a29bd4c", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c29961267a210bb8a3284f9ab36ac5076a3fb72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c29961267a210bb8a3284f9ab36ac5076a3fb72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=1c29961267a210bb8a3284f9ab36ac5076a3fb72", "patch": "@@ -374,14 +374,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_insert_bucket(_Arg&&, size_type,\n \t\t\t typename _Hashtable::_Hash_code_type);\n \n-      template<typename _Arg>\n-\tstd::pair<iterator, bool>\n-\t_M_insert(_Arg&&, std::true_type);\n-\n-      template<typename _Arg>\n-\titerator\n-\t_M_insert(_Arg&&, std::false_type);\n-\n       typedef typename std::conditional<__unique_keys,\n \t\t\t\t\tstd::pair<iterator, bool>,\n \t\t\t\t\titerator>::type\n@@ -393,38 +385,38 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t   >::type\n \t_Insert_Conv_Type;\n \n+    protected:\n+      template<typename _Arg>\n+\tstd::pair<iterator, bool>\n+\t_M_insert(_Arg&&, std::true_type);\n+\n+      template<typename _Arg>\n+\titerator\n+\t_M_insert(_Arg&&, std::false_type);\n+\n     public:\n       // Insert and erase\n       _Insert_Return_Type\n       insert(const value_type& __v)\n-      { return _M_insert(__v, std::integral_constant<bool, __unique_keys>()); }\n+      { return _M_insert(__v, integral_constant<bool, __unique_keys>()); }\n \n       iterator\n       insert(const_iterator, const value_type& __v)\n       { return _Insert_Conv_Type()(insert(__v)); }\n \n-      _Insert_Return_Type\n-      insert(value_type&& __v)\n-      { return _M_insert(std::move(__v),\n-\t\t\t std::integral_constant<bool, __unique_keys>()); }\n-\n-      iterator\n-      insert(const_iterator, value_type&& __v)\n-      { return _Insert_Conv_Type()(insert(std::move(__v))); }\n-\n       template<typename _Pair, typename = typename\n-\t       std::enable_if<!__constant_iterators\n-\t\t\t      && std::is_convertible<_Pair,\n-\t\t\t\t\t\t     value_type>::value>::type>\n+\tstd::enable_if<__and_<integral_constant<bool, !__constant_iterators>,\n+\t\t\t      std::is_convertible<_Pair,\n+\t\t\t\t\t\t  value_type>>::value>::type>\n \t_Insert_Return_Type\n \tinsert(_Pair&& __v)\n \t{ return _M_insert(std::forward<_Pair>(__v),\n-\t\t\t   std::integral_constant<bool, __unique_keys>()); }\n+\t\t\t   integral_constant<bool, __unique_keys>()); }\n \n       template<typename _Pair, typename = typename\n-\t       std::enable_if<!__constant_iterators\n-\t\t\t      && std::is_convertible<_Pair,\n-\t\t\t\t\t\t     value_type>::value>::type>\n+        std::enable_if<__and_<integral_constant<bool, !__constant_iterators>,\n+\t\t\t      std::is_convertible<_Pair,\n+\t\t\t\t\t\t  value_type>>::value>::type>\n \titerator\n \tinsert(const_iterator, _Pair&& __v)\n \t{ return _Insert_Conv_Type()(insert(std::forward<_Pair>(__v))); }"}, {"sha": "12b7bda138ff126e3a99709be6c0ef9a5e4350c5", "filename": "libstdc++-v3/include/bits/unordered_set.h", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c29961267a210bb8a3284f9ab36ac5076a3fb72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c29961267a210bb8a3284f9ab36ac5076a3fb72/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h?ref=1c29961267a210bb8a3284f9ab36ac5076a3fb72", "patch": "@@ -63,7 +63,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef typename _Base::hasher          hasher;\n       typedef typename _Base::key_equal       key_equal;\n       typedef typename _Base::allocator_type  allocator_type;\n-      \n+      typedef typename _Base::iterator        iterator;\n+      typedef typename _Base::const_iterator  const_iterator;\n+\n       explicit\n       __unordered_set(size_type __n = 10,\n \t\t      const hasher& __hf = hasher(),\n@@ -103,6 +105,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tthis->insert(__l.begin(), __l.end());\n \treturn *this;\n       }\n+\n+      using _Base::insert;\n+\n+      std::pair<iterator, bool>\n+      insert(value_type&& __v)\n+      { return this->_M_insert(std::move(__v), std::true_type()); }\n+\n+      iterator\n+      insert(const_iterator, value_type&& __v)\n+      { return insert(std::move(__v)).first; }\n     };\n \n   template<class _Value,\n@@ -132,7 +144,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef typename _Base::hasher          hasher;\n       typedef typename _Base::key_equal       key_equal;\n       typedef typename _Base::allocator_type  allocator_type;\n-      \n+      typedef typename _Base::iterator        iterator;\n+      typedef typename _Base::const_iterator  const_iterator;\n+\n       explicit\n       __unordered_multiset(size_type __n = 10,\n \t\t\t   const hasher& __hf = hasher(),\n@@ -173,6 +187,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tthis->insert(__l.begin(), __l.end());\n \treturn *this;\n       }\n+\n+      using _Base::insert;\n+\n+      iterator\n+      insert(value_type&& __v)\n+      { return this->_M_insert(std::move(__v), std::false_type()); }\n+\n+      iterator\n+      insert(const_iterator, value_type&& __v)\n+      { return insert(std::move(__v)); }\n     };\n \n   template<class _Value, class _Hash, class _Pred, class _Alloc,"}]}