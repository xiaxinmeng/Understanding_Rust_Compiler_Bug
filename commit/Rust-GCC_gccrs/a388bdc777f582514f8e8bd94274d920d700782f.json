{"sha": "a388bdc777f582514f8e8bd94274d920d700782f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM4OGJkYzc3N2Y1ODI1MTRmOGU4YmQ5NDI3NGQ5MjBkNzAwNzgyZg==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2016-12-20T20:46:13Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2016-12-20T20:46:13Z"}, "message": "Use the middle-end boolean_type_node\n\nUse the boolean_type_node setup by the middle-end instead of\nredefining it. boolean_type_node is not used in GFortran for any\nABI-visible stuff, only internally as the type of boolean\nexpressions. There appears to be one exception to this, namely the\ncaf_get* and caf_send* calls which have boolean_type_node\narguments. However, on the library side they seem to use C _Bool, so I\nsuspect this might be a case of a argument mismatch that hasn't\naffected anything so far.\n\nThe practical effect of this is that the size of such variables will\nbe the same as a C _Bool or C++ bool, that is, on most targets a\nsingle byte. Previously we redefined boolean_type_node to be a Fortran\ndefault logical kind sized variable, that is 4 or 8 bytes depending on\ncompile options. This might enable slightly more compact code, in case\nthe optimizer determines that the result of such a generated\ncomparison expression needs to be stored in some temporary location\nrather than being used immediately.\n\nRegression tested on x86_64-pc-linux-gnu.\n\n2016-12-20  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* trans-types.c (gfc_init_types): Don't redefine boolean type node.\n\nFrom-SVN: r243830", "tree": {"sha": "1367e04fbdbaddd3e9f1ac2bf0b2e55b92abe8d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1367e04fbdbaddd3e9f1ac2bf0b2e55b92abe8d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a388bdc777f582514f8e8bd94274d920d700782f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a388bdc777f582514f8e8bd94274d920d700782f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a388bdc777f582514f8e8bd94274d920d700782f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a388bdc777f582514f8e8bd94274d920d700782f/comments", "author": null, "committer": null, "parents": [{"sha": "5b1d0fbaea62946c2b95d2007563a4565e231aa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b1d0fbaea62946c2b95d2007563a4565e231aa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b1d0fbaea62946c2b95d2007563a4565e231aa2"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "5154b1981eb5f9745d301567563f15437b03773a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a388bdc777f582514f8e8bd94274d920d700782f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a388bdc777f582514f8e8bd94274d920d700782f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a388bdc777f582514f8e8bd94274d920d700782f", "patch": "@@ -1,3 +1,7 @@\n+2016-12-20  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* trans-types.c (gfc_init_types): Don't redefine boolean type node.\n+\n 2016-12-19  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* trans-decl.c (create_main_function): Remove unused elements to"}, {"sha": "e8dafa0d0af46ef559a53848d157a943be097675", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a388bdc777f582514f8e8bd94274d920d700782f/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a388bdc777f582514f8e8bd94274d920d700782f/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=a388bdc777f582514f8e8bd94274d920d700782f", "patch": "@@ -961,10 +961,6 @@ gfc_init_types (void)\n \t\t\twi::mask (n, UNSIGNED,\n \t\t\t\t  TYPE_PRECISION (size_type_node)));\n \n-  boolean_type_node = gfc_get_logical_type (gfc_default_logical_kind);\n-  boolean_true_node = build_int_cst (boolean_type_node, 1);\n-  boolean_false_node = build_int_cst (boolean_type_node, 0);\n-\n   /* ??? Shouldn't this be based on gfc_index_integer_kind or so?  */\n   gfc_charlen_int_kind = 4;\n   gfc_charlen_type_node = gfc_get_int_type (gfc_charlen_int_kind);"}]}