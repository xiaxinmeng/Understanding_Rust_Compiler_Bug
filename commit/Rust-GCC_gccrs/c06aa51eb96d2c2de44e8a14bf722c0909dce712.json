{"sha": "c06aa51eb96d2c2de44e8a14bf722c0909dce712", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA2YWE1MWViOTZkMmMyZGU0NGU4YTE0YmY3MjJjMDkwOWRjZTcxMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-09-24T21:47:45Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-09-24T21:47:45Z"}, "message": "c-tree.texi: Moved here from cp/ir.texi.\n\n\t* c-tree.texi: Moved here from cp/ir.texi.  Documented nested\n\tfunctions.  Generalize to handle both C and C++.\n\t* Makefile.in (c-tree.info): New target.\n\t(info): Add c-tree.info.\n\n\t* ir.texi: Move to ../c-tree.texi.\n\nFrom-SVN: r36592", "tree": {"sha": "d719386962bc66335b45f442a271a642fab5dddb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d719386962bc66335b45f442a271a642fab5dddb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c06aa51eb96d2c2de44e8a14bf722c0909dce712", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c06aa51eb96d2c2de44e8a14bf722c0909dce712", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c06aa51eb96d2c2de44e8a14bf722c0909dce712", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c06aa51eb96d2c2de44e8a14bf722c0909dce712/comments", "author": null, "committer": null, "parents": [{"sha": "fba549396d5328faa38f153fc4002ca81d11a8c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba549396d5328faa38f153fc4002ca81d11a8c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fba549396d5328faa38f153fc4002ca81d11a8c0"}], "stats": {"total": 125, "additions": 85, "deletions": 40}, "files": [{"sha": "ee92e0382520b17f79fecea59f27fd3b43305a50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c06aa51eb96d2c2de44e8a14bf722c0909dce712/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c06aa51eb96d2c2de44e8a14bf722c0909dce712/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c06aa51eb96d2c2de44e8a14bf722c0909dce712", "patch": "@@ -1,3 +1,10 @@\n+2000-09-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* c-tree.texi: Moved here from cp/ir.texi.  Documented nested\n+\tfunctions.  Generalize to handle both C and C++.\n+\t* Makefile.in (c-tree.info): New target.\n+\t(info): Add c-tree.info.\n+\t\n Sun Sep 24 09:15:48 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* expr.c (store_field): If BITSIZE is negative, use size of type."}, {"sha": "953fab18a72952b5cc94920f5188ef5c80185748", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c06aa51eb96d2c2de44e8a14bf722c0909dce712/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c06aa51eb96d2c2de44e8a14bf722c0909dce712/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c06aa51eb96d2c2de44e8a14bf722c0909dce712", "patch": "@@ -2082,7 +2082,7 @@ stmp-fixproto: fixhdr.ready fixproto stmp-int-hdrs\n # Remake the info files.\n \n doc: $(BUILD_INFO) gccbug\n-info: cpp.info gcc.info lang.info\n+info: cpp.info gcc.info lang.info c-tree.info\n \n cpp.info: $(srcdir)/cpp.texi\n \t$(MAKEINFO) $(MAKEINFOFLAGS) -I$(srcdir) -o cpp.info $(srcdir)/cpp.texi\n@@ -2092,6 +2092,10 @@ gcc.info: $(srcdir)/gcc.texi $(srcdir)/extend.texi $(srcdir)/install.texi \\\n \t  $(srcdir)/tm.texi $(srcdir)/gcov.texi\n \t$(MAKEINFO) $(MAKEINFOFLAGS) -I$(srcdir) -o gcc.info $(srcdir)/gcc.texi\n \n+c-tree.info: $(srcdir)/c-tree.texi\n+\t$(MAKEINFO) $(MAKEINFOFLAGS) -I$(srcdir) -o c-tree.info \\\n+\t\t$(srcdir)/c-tree.texi\n+\n dvi: gcc.dvi cpp.dvi lang.dvi\n \n # This works with GNU Make's default rule."}, {"sha": "ac5957ab7a69433461e5c12bcb3815063e68f0cd", "filename": "gcc/c-tree.texi", "status": "renamed", "additions": 69, "deletions": 39, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c06aa51eb96d2c2de44e8a14bf722c0909dce712/gcc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c06aa51eb96d2c2de44e8a14bf722c0909dce712/gcc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.texi?ref=c06aa51eb96d2c2de44e8a14bf722c0909dce712", "patch": "@@ -24,12 +24,12 @@\n @c ---------------------------------------------------------------------\n \n @setfilename ir.info\n-@settitle G++ Internal Representation\n+@settitle C/C++ Internal Representation\n @setchapternewpage on\n \n @ifinfo\n-This manual documents the internal representation used by G++ to represent\n-C++ source programs.\n+This manual documents the internal representation used by GCC to represent\n+C and C++ source programs.\n \n Copyright (c) 1999, 2000 Free Software Foundation, Inc.\n @end ifinfo\n@@ -39,7 +39,7 @@ Copyright (c) 1999, 2000 Free Software Foundation, Inc.\n @c ---------------------------------------------------------------------\n \n @titlepage\n-@title G++ Internal Representation\n+@title C/C++ Internal Representation\n @author CodeSourcery, LLC <info@@codesourcery.com>\n @page\n @vskip 0pt plus 1filll\n@@ -51,36 +51,43 @@ Copyright @copyright{} 1999, 2000 Free Software Foundation, Inc.\n @c ---------------------------------------------------------------------\n \n @node Top\n-@top G++ Internal Representation\n-\n-This manual documents the internal representation used by G++ to\n-represent C++ source programs.  When presented with a C++ source\n-program, G++ parses the program, performs semantic analysis (including\n-the generation of error messages), and then produces the internal\n-representation described here.  This representation contains a complete\n-representation for the entire translation unit provided as input to the\n-G++ front-end.  This representation is then typically processed by a\n-code-generator in order to produce machine code, but could also be used\n-in the creation of source browsers, intelligent editors, automatic\n+@top C/C++ Internal Representation\n+\n+This manual documents the internal representation used by GCC and C++ to\n+represent C and C++ source programs.  When presented with a C or C++\n+source program, GCC parses the program, performs semantic analysis\n+(including the generation of error messages), and then produces the\n+internal representation described here.  This representation contains a\n+complete representation for the entire translation unit provided as\n+input to the front-end.  This representation is then typically processed\n+by a code-generator in order to produce machine code, but could also be\n+used in the creation of source browsers, intelligent editors, automatic\n documentation generators, interpreters, and any other programs needing\n-the ability to process C++ code.\n+the ability to process C or C++ code.\n \n This manual explains the internal representation.  In particular, this\n-manual documents the internal representation for C++ source constructs,\n-and the macros, functions, and variables that can be used to access\n-these constructs.\n+manual documents the internal representation for C and C++ source\n+constructs, and the macros, functions, and variables that can be used to\n+access these constructs.\n \n If you are developing a ``back-end'', be it is a code-generator or some\n other tool, that uses this representation, you may occasionally find\n that you need to ask questions not easily answered by the functions and\n macros available here.  If that situation occurs, it is quite likely\n-that G++ already supports the functionality you desire, but that the\n+that GCC already supports the functionality you desire, but that the\n interface is simply not documented here.  In that case, you should ask\n-the G++ maintainers (via mail to @url{mailto:gcc@@gcc.gnu.org}) about\n+the GCC maintainers (via mail to @url{mailto:gcc@@gcc.gnu.org}) about\n documenting the functionality you require.  Similarly, if you find\n yourself writing functions that do not deal directly with your back-end,\n-but instead might be useful to other people using the G++ front-end, you\n-should submit your patches for inclusion in G++.\n+but instead might be useful to other people using the GCC front-end, you\n+should submit your patches for inclusion in GCC.\n+\n+This manual documents the C++ representation which is largely a superset\n+of the representation used in the C front-end.  There is only one\n+construct used in C that does not appear in the C++ front-end and that\n+is the GNU ``nested function'' extension.  Many of the macros documented\n+here do not apply in C because the corresponding language constructs do\n+not appear in C.\n \n @menu\n * Deficiencies::        Topics net yet covered in this document.\n@@ -344,9 +351,9 @@ The elements are indexed from zero.\n @findex TYPE_FIELDS\n @findex TYPE_PTROBV_P\n \n-All C++ types have corresponding tree nodes.  However, you should not\n-assume that there is exactly one tree node corresponding to each C++\n-type.  There are often several.\n+All types have corresponding tree nodes.  However, you should not assume\n+that there is exactly one tree node corresponding to each type.  There\n+are often several nodes each of which correspond to the same type.\n \n For the most part, different kinds of types have different tree codes.\n (For example, pointer types use a @code{POINTER_TYPE} code while arrays\n@@ -1068,6 +1075,20 @@ the @code{DECL_REAL_CONTEXT} for @code{f} will be the\n @code{global_namespace}, but the @code{DECL_CLASS_CONTEXT} will be the\n @code{RECORD_TYPE} for @code{C}.\n \n+The @code{DECL_REAL_CONTEXT} and @code{DECL_CLASS_CONTEXT} are not\n+availble in C; instead you should simply use @code{DECL_CONTEXT}.  In C,\n+the @code{DECL_CONTEXT} for a function maybe another function.  This\n+representation indicates that the GNU nested function extension is in\n+use.  For details on the semantics of nested functions, see the GCC\n+Manual.  The nested function can refer to local variables in its\n+containing function.  Such references are not explicitly marked in the\n+tree sturcture; back-ends must look at the @code{DECL_CONTEXT} for the\n+referenced @code{VAR_DECL}.  If the @code{DECL_CONTEXT} for the\n+referenced @code{VAR_DECL} is not the same as the function currently\n+being processed, and neither @code{DECL_EXTERNAL} nor @code{DECL_STATIC}\n+hold, then the reference is to a local variable in a containing\n+function, and the back-end must take appropriate action.\n+\n @menu\n * Function Basics::     Function names, linkage, and so forth.\n * Function Bodies::     The statements that make up a function body.\n@@ -1429,7 +1450,7 @@ statement like:\n asm (\"mov x, y\");\n @end example\n The @code{ASM_STRING} macro will return a @code{STRING_CST} node for\n-@code{\"mov x, y\"}.  If the original statement made use of G++'s\n+@code{\"mov x, y\"}.  If the original statement made use of the \n extended-assembly syntax, then @code{ASM_OUTPUTS},\n @code{ASM_INPUTS}, and @code{ASM_CLOBBERS} will be the outputs, inputs,\n and clobbers for the statement, represented as @code{STRING_CST} nodes.\n@@ -1467,7 +1488,7 @@ the same type as the condition expression in the switch statement.\n \n Otherwise, if both @code{CASE_LOW} and @code{CASE_HIGH} are defined, the\n statement is a range of case labels.  Such statements originate with the\n-G++ extension that allows users to write things of the form:\n+extension that allows users to write things of the form:\n @example\n case 2 ... 5:\n @end example\n@@ -1508,7 +1529,10 @@ Used to mark the beginning (if @code{CTOR_BEGIN_P} holds) or end (if\n Used to represent a local declaration.  The @code{DECL_STMT_DECL} macro\n can be used to obtain the entity declared.  This declaration may be a\n @code{LABEL_DECL}, indicating that the label declared is a local label.\n-(As an extension, GCC allows the declaration of labels with scope.)\n+(As an extension, GCC allows the declaration of labels with scope.)  In\n+C, this declaration may be a @code{FUNCTION_DECL}, indicating the\n+use of the GCC nested function extension.  For more information,\n+@pxref{Functions}.\n \n @item DO_STMT\n \n@@ -1542,7 +1566,7 @@ expressions.\n @item GOTO_STMT\n \n Used to represent a @code{goto} statement.  The @code{GOTO_DESTINATION}\n-will usually be a @code{LABEL_DECL}.  However, if G++'s ``computed\n+will usually be a @code{LABEL_DECL}.  However, if the ``computed\n goto'' extension has been used, the @code{GOTO_DESTINATION} will be an\n arbitrary expression indicating the destination.  This expression will\n always have pointer type.\n@@ -1731,11 +1755,11 @@ certain kinds of node being shared, nor should rely on certain kinds of\n nodes being unshared.\n \n The following macros can be used with all expression nodes:\n+\n @ftable @code\n @item TREE_TYPE\n Returns the type of the expression.  This value may not be precisely the\n-same type that would be given the expression in the original C++\n-program.\n+same type that would be given the expression in the original program.\n @end ftable\n \n In what follows, some nodes that one might expect to always have type\n@@ -1750,6 +1774,7 @@ Below, we list the various kinds of expression nodes.  Except where\n noted otherwise, the operands to an expression are accessed using the\n @code{TREE_OPERAND} macro.  For example, to access the first operand to\n a binary plus expression @code{expr}, use:\n+\n @example\n TREE_OPERAND (expr, 0)\n @end example\n@@ -1759,6 +1784,7 @@ As this example indicates, the operands are zero-indexed.\n The table below begins with constants, moves on to unary expressions,\n then proceeds to binary expressions, and concludes with various other\n kinds of expressions:\n+\n @table @code\n @item INTEGER_CST\n These nodes represent integer constants.  Note that the type of these\n@@ -1871,7 +1897,7 @@ These nodes are used to represent the address of an object.  (These\n expressions will always have pointer or reference type.)  The operand may\n be another expression, or it may be a declaration.\n \n-As an extension, G++ allows users to take the address of a label.  In\n+As an extension, GCC allows users to take the address of a label.  In\n this case, the operand of the @code{ADDR_EXPR} will be a\n @code{LABEL_DECL}.  The type of such an expression is @code{void*}.\n \n@@ -1939,7 +1965,7 @@ an expression for the code that should be executed to throw the\n exception.  However, there is one implicit action not represented in\n that expression; namely the call to @code{__throw}.  This function takes\n no arguments.  If @code{setjmp}/@code{longjmp} exceptions are used, the\n-function @code{__sjthrow} is called instead.  The normal G++ back-end\n+function @code{__sjthrow} is called instead.  The normal GCC back-end\n uses the function @code{emit_throw} to generate this code; you can\n examine this function to see what needs to be done.\n \n@@ -1972,7 +1998,7 @@ boolean or integral type.\n @itemx TRUTH_XOR_EXPR\n These nodes represent logical and, logical or, and logical exclusive or.\n They are strict; both arguments are always evaluated.  There are no\n-corresponding operators in C++, but the front-end will sometimes\n+corresponding operators in C or C++, but the front-end will sometimes\n generate these expressions anyhow, if it can tell that strictness does\n not matter.\n \n@@ -2038,26 +2064,30 @@ operand is the object (rather than a pointer to it); the second operand\n is the @code{FIELD_DECL} for the data member.\n \n @item COMPOUND_EXPR\n-These nodes represent C or C++ comma-expressions.  The first operand is\n-an expression whose value is computed and thrown away prior to the\n+These nodes represent comma-expressions.  The first operand is an\n+expression whose value is computed and thrown away prior to the\n evaluation of the second operand.  The value of the entire expression is\n the value of the second operand.\n \n @item COND_EXPR\n-These nodes represent C or C++ @code{?:} expressions.  The first operand\n+These nodes represent @code{?:} expressions.  The first operand\n is of boolean or integral type.  If it evaluates to a non-zero value,\n the second operand should be evaluated, and returned as the value of the\n expression.  Otherwise, the third operand is evaluated, and returned as\n the value of the expression.  As a GNU extension, the middle operand of\n the @code{?:} operator may be omitted in the source, like this:\n+\n @example\n x ? : 3\n @end example\n @noindent\n which is equivalent to \n+\n @example\n x ? x : 3\n @end example\n+\n+@noindent\n assuming that @code{x} is an expression without side-effects.  However,\n in the case that the first operation causes side effects, the\n side-effects occur only once.  Consumers of the internal representation\n@@ -2080,7 +2110,7 @@ arguments and some arguments are not explicitly provided at the call\n sites.\n \n @item STMT_EXPR\n-These nodes are used to represent G++'s statement-expression extension.\n+These nodes are used to represent GCC's statement-expression extension.\n The statement-expression extension allows code like this:\n @example\n int f() @{ return (@{ int j; j = 3; j + 7; @}); @}", "previous_filename": "gcc/cp/ir.texi"}, {"sha": "0cc49e26e98371ce56e05dbde46ce1d226f10c7b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c06aa51eb96d2c2de44e8a14bf722c0909dce712/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c06aa51eb96d2c2de44e8a14bf722c0909dce712/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c06aa51eb96d2c2de44e8a14bf722c0909dce712", "patch": "@@ -1,3 +1,7 @@\n+2000-09-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* ir.texi: Move to ../c-tree.texi.\n+\n 2000-09-20  Jason Merrill  <jason@redhat.com>\n \n \t* decl2.c (get_guard): Check DECL_FUNCTION_SCOPE_P."}]}