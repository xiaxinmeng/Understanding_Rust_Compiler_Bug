{"sha": "13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNmZWIwMjM0YjEzNmZiZGMxZGJmYmEzYTk2NjNmYjRlMTA0M2Y3NQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-29T22:47:21Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-29T22:47:21Z"}, "message": "libstdc++: Avoid warnings in tests\n\nThis fixes some warnings emitted when testing with warning flags added.\nSome of these are only necessary when testing with -Wsystem-headers, but\neither way it cleans up the tests to be less noisy under non-default\nflags.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/18_support/96817.cc: Avoid -Wunused warnings.\n\t* testsuite/20_util/any/assign/2.cc: Likewise.\n\t* testsuite/20_util/any/cons/2.cc: Likewise.\n\t* testsuite/20_util/align/1.cc: Avoid -Wsign-compare warning.\n\t* testsuite/20_util/function/65760.cc: Avoid -Wunused warning.\n\t* testsuite/20_util/function/1.cc: Avoid -Wcatch-value warning.\n\t* testsuite/20_util/function/cons/move_target.cc: Avoid -Wunused\n\twarning.\n\t* testsuite/20_util/headers/memory/synopsis.cc: Add exception\n\tspecification.\n\t* testsuite/20_util/monotonic_buffer_resource/allocate.cc: Avoid\n\t-Wsign-compare warning.\n\t* testsuite/20_util/tuple/cons/deduction.cc: Avoid -Wunused\n\twarning.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_copy/808590-cxx11.cc:\n\tAvoid -Wdeprecated-copy warning.\n\t* testsuite/21_strings/basic_string/56166.cc: Avoid\n\t-Wcatch-value warning.\n\t* testsuite/21_strings/basic_string/numeric_conversions/char/stod.cc:\n\tAvoid -Wcatch-value warnings.\n\t* testsuite/21_strings/basic_string/numeric_conversions/char/stof.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/char/stoi.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/char/stol.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/char/stold.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/char/stoll.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/char/stoul.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/char/stoull.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stod.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stof.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stoi.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stol.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stold.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stoll.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stoul.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stoull.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/compare/char/nonnull.cc:\n\tPrune additional diagnostics.\n\t* testsuite/21_strings/basic_string_view/operations/find/char/nonnull.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/rfind/char/nonnull.cc:\n\tLikewise.\n\t* testsuite/21_strings/headers/string/synopsis.cc: Add exception\n\tspecifications.\n\t* testsuite/22_locale/locale/cons/12352.cc: Define sized\n\tdelete operators to avoid warnings.\n\t* testsuite/23_containers/deque/modifiers/swap/1.cc: Add\n\texception specification.\n\t* testsuite/23_containers/forward_list/cons/11.cc: Avoid\n\t-Wdeprecated-copy warning.\n\t* testsuite/23_containers/headers/bitset/synopsis.cc: Add\n\texception specification.\n\t* testsuite/23_containers/headers/deque/synopsis.cc: Likewise.\n\t* testsuite/23_containers/headers/forward_list/synopsis.cc:\n\tLikewise.\n\t* testsuite/23_containers/headers/list/synopsis.cc: Likewise.\n\t* testsuite/23_containers/headers/map/synopsis.cc: Likewise.\n\t* testsuite/23_containers/headers/queue/synopsis.cc: Likewise.\n\t* testsuite/23_containers/headers/set/synopsis.cc: Likewise.\n\t* testsuite/23_containers/headers/vector/synopsis.cc: Likewise.\n\t* testsuite/23_containers/list/modifiers/swap/1.cc: Likewise.\n\t* testsuite/23_containers/map/modifiers/swap/1.cc: Likewise.\n\t* testsuite/23_containers/multimap/modifiers/swap/1.cc:\n\tLikewise.\n\t* testsuite/23_containers/multiset/modifiers/swap/1.cc:\n\tLikewise.\n\t* testsuite/23_containers/set/modifiers/swap/1.cc: Likewise.\n\t* testsuite/23_containers/unordered_set/56267-2.cc: Avoid\n\t-Wdeprecated-copy warning.\n\t* testsuite/23_containers/vector/bool/23632.cc: Avoid\n\t-Wempty-body warning.\n\t* testsuite/23_containers/vector/modifiers/swap/1.cc: Add\n\texception specification.\n\t* testsuite/25_algorithms/heap/moveable2.cc: Fix misplaced\n\tparentheses around arguments.\n\t* testsuite/25_algorithms/sample/1.cc: Use return value.\n\t* testsuite/25_algorithms/search/searcher.cc: Avoid -Wunused\n\twarnings.\n\t* testsuite/27_io/basic_ostream/exceptions/char/9561.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_ostream/exceptions/wchar_t/9561.cc:\n\tLikewise.\n\t* testsuite/27_io/filesystem/operations/remove_all.cc: Avoid\n\t-Wsign-compare warning.\n\t* testsuite/experimental/any/assign/2.cc: Avoid -Wunused warnings.\n\t* testsuite/experimental/any/cons/2.cc: Likewise.\n\t* testsuite/experimental/filesystem/operations/remove_all.cc:\n\tAvoid -Wign-compare warning.\n\t* testsuite/experimental/memory/observer_ptr/cons/cons.cc:\n\tLikewise.\n\t* testsuite/experimental/memory_resource/null_memory_resource.cc:\n\tLikewise.\n\t* testsuite/experimental/source_location/1.cc: Avoid -Waddress\n\twarning.\n\t* testsuite/ext/pod_char_traits.cc: Avoid -Wunused warning.\n\t* testsuite/ext/vstring/modifiers/clear/56166.cc: Avoid\n\t-Wcatch-value.\n\t* testsuite/std/concepts/concepts.lang/concept.swappable/swap.cc:\n\tAvoid -Wunused warning.\n\t* testsuite/std/concepts/concepts.lang/concept.swappable/swappable.cc:\n\tLikewise.\n\t* testsuite/tr1/2_general_utilities/shared_ptr/cons/43820_neg.cc:\n\tPrune additional warnings.\n\t* testsuite/tr1/3_function_objects/function/1.cc: Avoid\n\t-Wcatch-value warning.\n\t* testsuite/util/replacement_memory_operators.h: Define sized\n\tdelete to avoid warnings.\n\t* testsuite/util/testsuite_api.h (_NonDefaultConstructible): Add\n\tuser-declared assignment operator to stop -Wdeprecated-copy\n\twarnings.\n\t* testsuite/util/testsuite_containers.h: Avoid -Wunused warning.\n\t* testsuite/util/testsuite_iterators.h: Avoid -Wsign-compare\n\twarnings.\n\t* testsuite/util/testsuite_new_operators.h: Define sized deleted.", "tree": {"sha": "d05a39206b08d2b19889146875b6cb6aac63abc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d05a39206b08d2b19889146875b6cb6aac63abc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11dc4c4e137a9b48d585d7b1b146fb8404e3e1fe"}], "stats": {"total": 636, "additions": 393, "deletions": 243}, "files": [{"sha": "f0332967831312e0663469b731d89efd19c6a7a0", "filename": "libstdc++-v3/testsuite/18_support/96817.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F96817.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F96817.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F96817.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -38,7 +38,7 @@ int init()\n void clean_terminate() { _Exit(0); }\n \n int\n-main (int argc, char **argv)\n+main ()\n {\n   std::set_terminate(clean_terminate);\n   init();"}, {"sha": "a08b0312fb91cdf2886a5f8d65da97fdc9d636c8", "filename": "libstdc++-v3/testsuite/20_util/align/1.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Falign%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Falign%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Falign%2F1.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -30,6 +30,8 @@\n void\n test01()\n {\n+  using std::size_t;\n+\n   size_t space = 100;\n   void* ptr = new char[space];\n   char* const orig_ptr = static_cast<char*>(ptr);\n@@ -44,7 +46,7 @@ test01()\n       uintptr_t p = reinterpret_cast<uintptr_t>(ptr);\n       VERIFY( p % alignment == 0 );\n       char* const x = static_cast<char*>(ptr);\n-      VERIFY( x - old_ptr == old_space - space );\n+      VERIFY( size_t(x - old_ptr) == old_space - space );\n       VERIFY( (void*)x < (void*)(orig_ptr + orig_space) );\n       VERIFY( (void*)(x + size) < (void*)(orig_ptr + orig_space) );\n       ptr = x + size;"}, {"sha": "64b0dbb2b63446014c3138b554afc6d0028b9d35", "filename": "libstdc++-v3/testsuite/20_util/any/assign/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2F2.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -31,14 +31,14 @@ struct X\n {\n   X() = default;\n   X(const X&) { copied = true; }\n-  X(X&& x) { moved = true; }\n+  X(X&&) { moved = true; }\n };\n \n struct X2\n {\n   X2() = default;\n   X2(const X2&) { copied = true; }\n-  X2(X2&& x) noexcept { moved = true; }\n+  X2(X2&&) noexcept { moved = true; }\n };\n \n void test01()"}, {"sha": "1ce150cdca7fbca76a2522726eee92f756b08c19", "filename": "libstdc++-v3/testsuite/20_util/any/cons/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F2.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -31,14 +31,14 @@ struct X\n {\n   X() = default;\n   X(const X&) { copied = true; }\n-  X(X&& x) { moved = true; }\n+  X(X&&) { moved = true; }\n };\n \n struct X2\n {\n   X2() = default;\n   X2(const X2&) { copied = true; }\n-  X2(X2&& x) noexcept { moved = true; }\n+  X2(X2&&) noexcept { moved = true; }\n };\n \n void test01()"}, {"sha": "efcd160e7d3bed9fd8cf1b08efcedeec71024a0f", "filename": "libstdc++-v3/testsuite/20_util/function/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F1.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -67,7 +67,7 @@ void test01()\n       f1(3.14159f);\n       VERIFY( false );\n     }\n-  catch (bad_function_call)\n+  catch (const bad_function_call&)\n     {\n       thrown = true;\n     }"}, {"sha": "afd323e239be76735672e22df9f77d4c5c909ae0", "filename": "libstdc++-v3/testsuite/20_util/function/65760.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F65760.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F65760.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F65760.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -31,7 +31,4 @@ struct C {\n     C operator()(int, int);\n };\n \n-int main() {\n-    C c = C();\n-}\n-\n+C c = C();"}, {"sha": "5b6ae319354268b475aaf823605840a8e73399b5", "filename": "libstdc++-v3/testsuite/20_util/function/cons/move_target.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fcons%2Fmove_target.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fcons%2Fmove_target.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fcons%2Fmove_target.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -25,7 +25,7 @@ struct moveable\n   ~moveable() = default;\n   // target object must be CopyConstructible,\n   // but should not be copied during this test\n-  moveable(const moveable& c) { throw \"copied\"; }\n+  moveable(const moveable&) { throw \"copied\"; }\n   moveable& operator=(const moveable&) = delete;\n   moveable(moveable&&) { }\n "}, {"sha": "96786e1810af8bbbe2a5f7f594c4c238290c2aec", "filename": "libstdc++-v3/testsuite/20_util/headers/memory/synopsis.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fmemory%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fmemory%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fmemory%2Fsynopsis.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -20,6 +20,10 @@\n \n #include <memory>\n \n+#if __cplusplus >= 201103L\n+# define NOTHROW noexcept\n+#endif\n+\n namespace std {\n   //  lib.default.allocator, the default allocator:\n   template <class T> class allocator;\n@@ -40,7 +44,7 @@ namespace std {\n \n   //  lib.temporary.buffer, temporary buffers:\n   template <class T>\n-  pair<T*,ptrdiff_t> get_temporary_buffer(ptrdiff_t n);\n+  pair<T*,ptrdiff_t> get_temporary_buffer(ptrdiff_t n) NOTHROW;\n   template <class T>\n   void return_temporary_buffer(T* p);\n "}, {"sha": "2f7facd0655c663d91793262333721e7beb44272", "filename": "libstdc++-v3/testsuite/20_util/monotonic_buffer_resource/allocate.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmonotonic_buffer_resource%2Fallocate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmonotonic_buffer_resource%2Fallocate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmonotonic_buffer_resource%2Fallocate.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -150,7 +150,7 @@ test04()\n   {\n     std::size_t size = 1 << i;\n     void* ptr = mr.allocate(size, 1);\n-    VERIFY( ((char*)ptr - (char*)prev_ptr) == prev_size );\n+    VERIFY( std::size_t((char*)ptr - (char*)prev_ptr) == prev_size );\n     prev_ptr = ptr;\n     prev_size = size;\n   }"}, {"sha": "513803201f8449d30634624736f4aa9e8670e24b", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_copy/808590-cxx11.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2F808590-cxx11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2F808590-cxx11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2F808590-cxx11.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -31,6 +31,8 @@ struct c\n   c(void* o = 0) : m(o) {}\n   c(const c &r) : m(r.m) {}\n \n+  c& operator=(const c &) = default;\n+\n   template<class T>\n     explicit c(T &o) : m((void*)0xdeadbeef) { }\n };"}, {"sha": "120a3154545804681f4f110afae5eabf8a185bdc", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/deduction.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fdeduction.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -124,10 +124,8 @@ test04()\n   std::pair<int, unsigned> p;\n   std::tuple x = p;\n   check_type<std::tuple<int, unsigned>>(x);\n-  int y = 42;\n   std::tuple x2{p};\n   check_type<std::tuple<int, unsigned>>(x2);\n-  const int z = 666;\n   std::pair<const int, unsigned> p2;\n   std::tuple x3{p2};\n   check_type<std::tuple<const int, unsigned>>(x3);"}, {"sha": "0feb747e880f4c8529883c5660aaf2a2131c7a61", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/56166.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2F56166.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2F56166.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2F56166.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -87,7 +87,7 @@ int main()\n       fail_after = i;\n       f();\n       break;\n-    } catch (std::bad_alloc) {\n+    } catch (const std::bad_alloc&) {\n     }\n   }\n }"}, {"sha": "58b40ed176e420b81dbc757873c150e4c250edad", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/char/stod.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstod.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -38,9 +38,9 @@ test01()\n   try\n     {\n       string one;\n-      stod(one);      \n+      stod(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -53,9 +53,9 @@ test01()\n   try\n     {\n       string one(\"a\");\n-      stod(one);      \n+      stod(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -69,7 +69,7 @@ test01()\n   try\n     {\n       string one(\"2.0a\");\n-      d1 = stod(one, &idx1);      \n+      d1 = stod(one, &idx1);\n     }\n   catch(...)\n     {\n@@ -86,7 +86,7 @@ test01()\n       one.append(2 * numeric_limits<double>::max_exponent10, '9');\n       d1 = stod(one);\n     }\n-  catch(std::out_of_range)\n+  catch(const std::out_of_range&)\n     {\n       test = true;\n     }\n@@ -120,7 +120,7 @@ test01()\n \t  string one(to_string(ld1));\n \t  d1 = stod(one);\n \t}\n-      catch(std::out_of_range)\n+      catch(const std::out_of_range&)\n \t{\n \t  test = true;\n \t}"}, {"sha": "1a203721e565c55a4a5e6d30f4f6465db147e534", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/char/stof.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstof.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstof.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstof.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -36,9 +36,9 @@ test01()\n   try\n     {\n       string one;\n-      stof(one);      \n+      stof(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -51,9 +51,9 @@ test01()\n   try\n     {\n       string one(\"a\");\n-      stof(one);      \n+      stof(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -67,7 +67,7 @@ test01()\n   try\n     {\n       string one(\"2.0a\");\n-      f1 = stof(one, &idx1);      \n+      f1 = stof(one, &idx1);\n     }\n   catch(...)\n     {\n@@ -84,7 +84,7 @@ test01()\n       one.append(2 * numeric_limits<float>::max_exponent10, '9');\n       f1 = stof(one);\n     }\n-  catch(std::out_of_range)\n+  catch(const std::out_of_range&)\n     {\n       test = true;\n     }\n@@ -118,7 +118,7 @@ test01()\n \t  string one(to_string(ld1));\n \t  f1 = stof(one);\n \t}\n-      catch(std::out_of_range)\n+      catch(const std::out_of_range&)\n \t{\n \t  test = true;\n \t}"}, {"sha": "21d1d296b7784d0166d05cc1120aff6ff2f48d90", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/char/stoi.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoi.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -36,9 +36,9 @@ test01()\n   try\n     {\n       string one;\n-      stoi(one);      \n+      stoi(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -51,9 +51,9 @@ test01()\n   try\n     {\n       string one(\"a\");\n-      stoi(one);      \n+      stoi(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -66,7 +66,7 @@ test01()\n   try\n     {\n       string one(\"a\");\n-      i1 = stoi(one, 0, 16);      \n+      i1 = stoi(one, 0, 16);\n     }\n   catch(...)\n     {\n@@ -79,7 +79,7 @@ test01()\n   try\n     {\n       string one(\"78\");\n-      i1 = stoi(one, &idx1, 8);      \n+      i1 = stoi(one, &idx1, 8);\n     }\n   catch(...)\n     {\n@@ -92,7 +92,7 @@ test01()\n   try\n     {\n       string one(\"10112\");\n-      i1 = stoi(one, &idx1, 2);      \n+      i1 = stoi(one, &idx1, 2);\n     }\n   catch(...)\n     {\n@@ -105,7 +105,7 @@ test01()\n   try\n     {\n       string one(\"0XE\");\n-      i1 = stoi(one, &idx1, 0);      \n+      i1 = stoi(one, &idx1, 0);\n     }\n   catch(...)\n     {\n@@ -121,7 +121,7 @@ test01()\n       string one(1000, '9');\n       i1 = stoi(one);\n     }\n-  catch(std::out_of_range)\n+  catch(const std::out_of_range&)\n     {\n       test = true;\n     }\n@@ -166,7 +166,7 @@ test01()\n       string one(to_string(ll0));\n       i1 = stoi(one);\n     }\n-  catch(std::out_of_range)\n+  catch(const std::out_of_range&)\n     {\n       test = true;\n     }\n@@ -184,7 +184,7 @@ test01()\n       string one(to_string(ll1));\n       i1 = stoi(one);\n     }\n-  catch(std::out_of_range)\n+  catch(const std::out_of_range&)\n     {\n       test = true;\n     }"}, {"sha": "9a4ed2571689d5dad6075aa20ab3b22fa866a484", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/char/stol.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstol.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstol.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstol.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -36,9 +36,9 @@ test01()\n   try\n     {\n       string one;\n-      stol(one);      \n+      stol(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -51,9 +51,9 @@ test01()\n   try\n     {\n       string one(\"a\");\n-      stol(one);      \n+      stol(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -66,7 +66,7 @@ test01()\n   try\n     {\n       string one(\"a\");\n-      l1 = stol(one, 0, 16);      \n+      l1 = stol(one, 0, 16);\n     }\n   catch(...)\n     {\n@@ -79,7 +79,7 @@ test01()\n   try\n     {\n       string one(\"78\");\n-      l1 = stol(one, &idx1, 8);      \n+      l1 = stol(one, &idx1, 8);\n     }\n   catch(...)\n     {\n@@ -92,7 +92,7 @@ test01()\n   try\n     {\n       string one(\"10112\");\n-      l1 = stol(one, &idx1, 2);      \n+      l1 = stol(one, &idx1, 2);\n     }\n   catch(...)\n     {\n@@ -105,7 +105,7 @@ test01()\n   try\n     {\n       string one(\"0XE\");\n-      l1 = stol(one, &idx1, 0);      \n+      l1 = stol(one, &idx1, 0);\n     }\n   catch(...)\n     {\n@@ -121,7 +121,7 @@ test01()\n       string one(1000, '9');\n       l1 = stol(one);\n     }\n-  catch(std::out_of_range)\n+  catch(const std::out_of_range&)\n     {\n       test = true;\n     }"}, {"sha": "f120ccca128df4f577e92505c48aa9a6d0267ac3", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/char/stold.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstold.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -37,9 +37,9 @@ test01()\n   try\n     {\n       string one;\n-      stold(one);      \n+      stold(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -52,9 +52,9 @@ test01()\n   try\n     {\n       string one(\"a\");\n-      stold(one);      \n+      stold(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -68,7 +68,7 @@ test01()\n   try\n     {\n       string one(\"2.0a\");\n-      ld1 = stold(one, &idx1);      \n+      ld1 = stold(one, &idx1);\n     }\n   catch(...)\n     {\n@@ -85,7 +85,7 @@ test01()\n       one.append(2 * numeric_limits<long double>::max_exponent10, '9');\n       ld1 = stold(one);\n     }\n-  catch(std::out_of_range)\n+  catch(const std::out_of_range&)\n     {\n       test = true;\n     }"}, {"sha": "24761bb1479619074cf736d2946eaa0352991331", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/char/stoll.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoll.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoll.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoll.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -36,9 +36,9 @@ test01()\n   try\n     {\n       string one;\n-      stoll(one);      \n+      stoll(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -51,9 +51,9 @@ test01()\n   try\n     {\n       string one(\"a\");\n-      stoll(one);      \n+      stoll(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -66,7 +66,7 @@ test01()\n   try\n     {\n       string one(\"a\");\n-      ll1 = stoll(one, 0, 16);      \n+      ll1 = stoll(one, 0, 16);\n     }\n   catch(...)\n     {\n@@ -79,7 +79,7 @@ test01()\n   try\n     {\n       string one(\"78\");\n-      ll1 = stoll(one, &idx1, 8);      \n+      ll1 = stoll(one, &idx1, 8);\n     }\n   catch(...)\n     {\n@@ -92,7 +92,7 @@ test01()\n   try\n     {\n       string one(\"10112\");\n-      ll1 = stoll(one, &idx1, 2);      \n+      ll1 = stoll(one, &idx1, 2);\n     }\n   catch(...)\n     {\n@@ -105,7 +105,7 @@ test01()\n   try\n     {\n       string one(\"0XE\");\n-      ll1 = stoll(one, &idx1, 0);      \n+      ll1 = stoll(one, &idx1, 0);\n     }\n   catch(...)\n     {\n@@ -121,7 +121,7 @@ test01()\n       string one(1000, '9');\n       ll1 = stoll(one);\n     }\n-  catch(std::out_of_range)\n+  catch(const std::out_of_range&)\n     {\n       test = true;\n     }"}, {"sha": "489a569c6ab19b6e1aaed489aa2160b841405dd1", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/char/stoul.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoul.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoul.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoul.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -36,9 +36,9 @@ test01()\n   try\n     {\n       string one;\n-      stoul(one);      \n+      stoul(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -51,9 +51,9 @@ test01()\n   try\n     {\n       string one(\"a\");\n-      stoul(one);      \n+      stoul(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -66,7 +66,7 @@ test01()\n   try\n     {\n       string one(\"a\");\n-      ul1 = stoul(one, 0, 16);      \n+      ul1 = stoul(one, 0, 16);\n     }\n   catch(...)\n     {\n@@ -79,7 +79,7 @@ test01()\n   try\n     {\n       string one(\"78\");\n-      ul1 = stoul(one, &idx1, 8);      \n+      ul1 = stoul(one, &idx1, 8);\n     }\n   catch(...)\n     {\n@@ -92,7 +92,7 @@ test01()\n   try\n     {\n       string one(\"10112\");\n-      ul1 = stoul(one, &idx1, 2);      \n+      ul1 = stoul(one, &idx1, 2);\n     }\n   catch(...)\n     {\n@@ -105,7 +105,7 @@ test01()\n   try\n     {\n       string one(\"0XE\");\n-      ul1 = stoul(one, &idx1, 0);      \n+      ul1 = stoul(one, &idx1, 0);\n     }\n   catch(...)\n     {\n@@ -121,7 +121,7 @@ test01()\n       string one(1000, '9');\n       ul1 = stoul(one);\n     }\n-  catch(std::out_of_range)\n+  catch(const std::out_of_range&)\n     {\n       test = true;\n     }"}, {"sha": "a0330e24b93f68ef1d80358fa6a22522413edc49", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/char/stoull.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoull.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoull.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fstoull.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -36,24 +36,24 @@ test01()\n   try\n     {\n       string one;\n-      stoull(one);      \n+      stoull(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n   catch(...)\n     {\n     }\n   VERIFY( test );\n-  \n+\n   test = false;\n   try\n     {\n       string one(\"a\");\n-      stoull(one);      \n+      stoull(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -66,7 +66,7 @@ test01()\n   try\n     {\n       string one(\"a\");\n-      ull1 = stoull(one, 0, 16);      \n+      ull1 = stoull(one, 0, 16);\n     }\n   catch(...)\n     {\n@@ -79,7 +79,7 @@ test01()\n   try\n     {\n       string one(\"78\");\n-      ull1 = stoull(one, &idx1, 8);      \n+      ull1 = stoull(one, &idx1, 8);\n     }\n   catch(...)\n     {\n@@ -92,7 +92,7 @@ test01()\n   try\n     {\n       string one(\"10112\");\n-      ull1 = stoull(one, &idx1, 2);      \n+      ull1 = stoull(one, &idx1, 2);\n     }\n   catch(...)\n     {\n@@ -105,7 +105,7 @@ test01()\n   try\n     {\n       string one(\"0XE\");\n-      ull1 = stoull(one, &idx1, 0);      \n+      ull1 = stoull(one, &idx1, 0);\n     }\n   catch(...)\n     {\n@@ -121,7 +121,7 @@ test01()\n       string one(1000, '9');\n       ull1 = stoull(one);\n     }\n-  catch(std::out_of_range)\n+  catch(const std::out_of_range&)\n     {\n       test = true;\n     }"}, {"sha": "cfe2de2e603dccca698c1bc98ce23225607aeac4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stod.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstod.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -39,9 +39,9 @@ test01()\n   try\n     {\n       wstring one;\n-      stod(one);      \n+      stod(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -54,9 +54,9 @@ test01()\n   try\n     {\n       wstring one(L\"a\");\n-      stod(one);      \n+      stod(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -70,7 +70,7 @@ test01()\n   try\n     {\n       wstring one(L\"2.0a\");\n-      d1 = stod(one, &idx1);      \n+      d1 = stod(one, &idx1);\n     }\n   catch(...)\n     {\n@@ -87,7 +87,7 @@ test01()\n       one.append(2 * numeric_limits<double>::max_exponent10, L'9');\n       d1 = stod(one);\n     }\n-  catch(std::out_of_range)\n+  catch(const std::out_of_range&)\n     {\n       test = true;\n     }\n@@ -121,7 +121,7 @@ test01()\n \t  wstring one(to_wstring(ld1));\n \t  d1 = stod(one);\n \t}\n-      catch(std::out_of_range)\n+      catch(const std::out_of_range&)\n \t{\n \t  test = true;\n \t}"}, {"sha": "3d02ec4f88ca1344e7bd2aae6a745e692aa9c46b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stof.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstof.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstof.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstof.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -37,9 +37,9 @@ test01()\n   try\n     {\n       wstring one;\n-      stof(one);      \n+      stof(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -52,9 +52,9 @@ test01()\n   try\n     {\n       wstring one(L\"a\");\n-      stof(one);      \n+      stof(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -68,7 +68,7 @@ test01()\n   try\n     {\n       wstring one(L\"2.0a\");\n-      f1 = stof(one, &idx1);      \n+      f1 = stof(one, &idx1);\n     }\n   catch(...)\n     {\n@@ -85,7 +85,7 @@ test01()\n       one.append(2 * numeric_limits<float>::max_exponent10, L'9');\n       f1 = stof(one);\n     }\n-  catch(std::out_of_range)\n+  catch(const std::out_of_range&)\n     {\n       test = true;\n     }\n@@ -119,7 +119,7 @@ test01()\n \t  wstring one(to_wstring(ld1));\n \t  f1 = stof(one);\n \t}\n-      catch(std::out_of_range)\n+      catch(const std::out_of_range&)\n \t{\n \t  test = true;\n \t}"}, {"sha": "f6187a9019d710d24f4308a1f295db2a0dfd1917", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stoi.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoi.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -37,9 +37,9 @@ test01()\n   try\n     {\n       wstring one;\n-      stoi(one);      \n+      stoi(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -52,9 +52,9 @@ test01()\n   try\n     {\n       wstring one(L\"a\");\n-      stoi(one);      \n+      stoi(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -67,7 +67,7 @@ test01()\n   try\n     {\n       wstring one(L\"a\");\n-      i1 = stoi(one, 0, 16);      \n+      i1 = stoi(one, 0, 16);\n     }\n   catch(...)\n     {\n@@ -80,7 +80,7 @@ test01()\n   try\n     {\n       wstring one(L\"78\");\n-      i1 = stoi(one, &idx1, 8);      \n+      i1 = stoi(one, &idx1, 8);\n     }\n   catch(...)\n     {\n@@ -93,7 +93,7 @@ test01()\n   try\n     {\n       wstring one(L\"10112\");\n-      i1 = stoi(one, &idx1, 2);      \n+      i1 = stoi(one, &idx1, 2);\n     }\n   catch(...)\n     {\n@@ -106,7 +106,7 @@ test01()\n   try\n     {\n       wstring one(L\"0XE\");\n-      i1 = stoi(one, &idx1, 0);      \n+      i1 = stoi(one, &idx1, 0);\n     }\n   catch(...)\n     {\n@@ -122,7 +122,7 @@ test01()\n       wstring one(1000, L'9');\n       i1 = stoi(one);\n     }\n-  catch(std::out_of_range)\n+  catch(const std::out_of_range&)\n     {\n       test = true;\n     }\n@@ -167,7 +167,7 @@ test01()\n       wstring one(to_wstring(ll0));\n       i1 = stoi(one);\n     }\n-  catch(std::out_of_range)\n+  catch(const std::out_of_range&)\n     {\n       test = true;\n     }\n@@ -185,7 +185,7 @@ test01()\n       wstring one(to_wstring(ll1));\n       i1 = stoi(one);\n     }\n-  catch(std::out_of_range)\n+  catch(const std::out_of_range&)\n     {\n       test = true;\n     }"}, {"sha": "9c78d9839fa1b0fdf0df6e929f353ccbbbf3b812", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stol.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstol.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstol.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstol.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -37,9 +37,9 @@ test01()\n   try\n     {\n       wstring one;\n-      stol(one);      \n+      stol(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -52,9 +52,9 @@ test01()\n   try\n     {\n       wstring one(L\"a\");\n-      stol(one);      \n+      stol(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -67,7 +67,7 @@ test01()\n   try\n     {\n       wstring one(L\"a\");\n-      l1 = stol(one, 0, 16);      \n+      l1 = stol(one, 0, 16);\n     }\n   catch(...)\n     {\n@@ -80,7 +80,7 @@ test01()\n   try\n     {\n       wstring one(L\"78\");\n-      l1 = stol(one, &idx1, 8);      \n+      l1 = stol(one, &idx1, 8);\n     }\n   catch(...)\n     {\n@@ -93,7 +93,7 @@ test01()\n   try\n     {\n       wstring one(L\"10112\");\n-      l1 = stol(one, &idx1, 2);      \n+      l1 = stol(one, &idx1, 2);\n     }\n   catch(...)\n     {\n@@ -106,7 +106,7 @@ test01()\n   try\n     {\n       wstring one(L\"0XE\");\n-      l1 = stol(one, &idx1, 0);      \n+      l1 = stol(one, &idx1, 0);\n     }\n   catch(...)\n     {\n@@ -122,7 +122,7 @@ test01()\n       wstring one(1000, L'9');\n       l1 = stol(one);\n     }\n-  catch(std::out_of_range)\n+  catch(const std::out_of_range&)\n     {\n       test = true;\n     }"}, {"sha": "a637a549f145e79a4ee5ee870968c0aa62a6ac10", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stold.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstold.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -39,9 +39,9 @@ test01()\n   try\n     {\n       wstring one;\n-      stold(one);      \n+      stold(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -54,9 +54,9 @@ test01()\n   try\n     {\n       wstring one(L\"a\");\n-      stold(one);      \n+      stold(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -70,7 +70,7 @@ test01()\n   try\n     {\n       wstring one(L\"2.0a\");\n-      ld1 = stold(one, &idx1);      \n+      ld1 = stold(one, &idx1);\n     }\n   catch(...)\n     {\n@@ -87,7 +87,7 @@ test01()\n       one.append(2 * numeric_limits<long double>::max_exponent10, L'9');\n       ld1 = stold(one);\n     }\n-  catch(std::out_of_range)\n+  catch(const std::out_of_range&)\n     {\n       test = true;\n     }"}, {"sha": "326fa5fbd5d94852e6030432655faa55beb62d44", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stoll.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoll.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoll.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoll.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -37,9 +37,9 @@ test01()\n   try\n     {\n       wstring one;\n-      stoll(one);      \n+      stoll(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -52,9 +52,9 @@ test01()\n   try\n     {\n       wstring one(L\"a\");\n-      stoll(one);      \n+      stoll(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -67,7 +67,7 @@ test01()\n   try\n     {\n       wstring one(L\"a\");\n-      ll1 = stoll(one, 0, 16);      \n+      ll1 = stoll(one, 0, 16);\n     }\n   catch(...)\n     {\n@@ -80,7 +80,7 @@ test01()\n   try\n     {\n       wstring one(L\"78\");\n-      ll1 = stoll(one, &idx1, 8);      \n+      ll1 = stoll(one, &idx1, 8);\n     }\n   catch(...)\n     {\n@@ -93,7 +93,7 @@ test01()\n   try\n     {\n       wstring one(L\"10112\");\n-      ll1 = stoll(one, &idx1, 2);      \n+      ll1 = stoll(one, &idx1, 2);\n     }\n   catch(...)\n     {\n@@ -106,7 +106,7 @@ test01()\n   try\n     {\n       wstring one(L\"0XE\");\n-      ll1 = stoll(one, &idx1, 0);      \n+      ll1 = stoll(one, &idx1, 0);\n     }\n   catch(...)\n     {\n@@ -122,7 +122,7 @@ test01()\n       wstring one(1000, L'9');\n       ll1 = stoll(one);\n     }\n-  catch(std::out_of_range)\n+  catch(const std::out_of_range&)\n     {\n       test = true;\n     }"}, {"sha": "3020a570c5249cae72d582fb156285fc9cbeef08", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stoul.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoul.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoul.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoul.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -37,9 +37,9 @@ test01()\n   try\n     {\n       wstring one;\n-      stoul(one);      \n+      stoul(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -52,9 +52,9 @@ test01()\n   try\n     {\n       wstring one(L\"a\");\n-      stoul(one);      \n+      stoul(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -67,7 +67,7 @@ test01()\n   try\n     {\n       wstring one(L\"a\");\n-      ul1 = stoul(one, 0, 16);      \n+      ul1 = stoul(one, 0, 16);\n     }\n   catch(...)\n     {\n@@ -80,7 +80,7 @@ test01()\n   try\n     {\n       wstring one(L\"78\");\n-      ul1 = stoul(one, &idx1, 8);      \n+      ul1 = stoul(one, &idx1, 8);\n     }\n   catch(...)\n     {\n@@ -93,7 +93,7 @@ test01()\n   try\n     {\n       wstring one(L\"10112\");\n-      ul1 = stoul(one, &idx1, 2);      \n+      ul1 = stoul(one, &idx1, 2);\n     }\n   catch(...)\n     {\n@@ -106,7 +106,7 @@ test01()\n   try\n     {\n       wstring one(L\"0XE\");\n-      ul1 = stoul(one, &idx1, 0);      \n+      ul1 = stoul(one, &idx1, 0);\n     }\n   catch(...)\n     {\n@@ -122,7 +122,7 @@ test01()\n       wstring one(1000, L'9');\n       ul1 = stoul(one);\n     }\n-  catch(std::out_of_range)\n+  catch(const std::out_of_range&)\n     {\n       test = true;\n     }"}, {"sha": "db0175ef050ea41764ca493a456ec3f85f2c4dd1", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/stoull.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoull.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoull.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fstoull.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -37,24 +37,24 @@ test01()\n   try\n     {\n       wstring one;\n-      stoull(one);      \n+      stoull(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n   catch(...)\n     {\n     }\n   VERIFY( test );\n-  \n+\n   test = false;\n   try\n     {\n       wstring one(L\"a\");\n-      stoull(one);      \n+      stoull(one);\n     }\n-  catch(std::invalid_argument)\n+  catch(const std::invalid_argument&)\n     {\n       test = true;\n     }\n@@ -67,7 +67,7 @@ test01()\n   try\n     {\n       wstring one(L\"a\");\n-      ull1 = stoull(one, 0, 16);      \n+      ull1 = stoull(one, 0, 16);\n     }\n   catch(...)\n     {\n@@ -80,7 +80,7 @@ test01()\n   try\n     {\n       wstring one(L\"78\");\n-      ull1 = stoull(one, &idx1, 8);      \n+      ull1 = stoull(one, &idx1, 8);\n     }\n   catch(...)\n     {\n@@ -93,7 +93,7 @@ test01()\n   try\n     {\n       wstring one(L\"10112\");\n-      ull1 = stoull(one, &idx1, 2);      \n+      ull1 = stoull(one, &idx1, 2);\n     }\n   catch(...)\n     {\n@@ -106,7 +106,7 @@ test01()\n   try\n     {\n       wstring one(L\"0XE\");\n-      ull1 = stoull(one, &idx1, 0);      \n+      ull1 = stoull(one, &idx1, 0);\n     }\n   catch(...)\n     {\n@@ -122,7 +122,7 @@ test01()\n       wstring one(1000, L'9');\n       ull1 = stoull(one);\n     }\n-  catch(std::out_of_range)\n+  catch(const std::out_of_range&)\n     {\n       test = true;\n     }"}, {"sha": "b77de279576faa506bd76e62143af0d19cea55c6", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/compare/char/nonnull.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcompare%2Fchar%2Fnonnull.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcompare%2Fchar%2Fnonnull.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcompare%2Fchar%2Fnonnull.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -27,3 +27,6 @@ test01()\n   return s.compare((const char*)nullptr);\t// { dg-warning \"\\\\\\[-Wnonnull\" }\n   return s.compare(0, 2, (const char*)nullptr);\t// { dg-warning \"\\\\\\[-Wnonnull\" }\n }\n+\n+// Ignore additional diagnostic given with -Wsystem-headers:\n+// { dg-prune-output \"argument 1 null where non-null expected\" }"}, {"sha": "1025396fba2650029447fb05b6646ed69e8136c1", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/find/char/nonnull.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fchar%2Fnonnull.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fchar%2Fnonnull.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Ffind%2Fchar%2Fnonnull.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -31,3 +31,6 @@ test01()\n   return s.find_first_not_of((const char*)nullptr); // { dg-warning \"\\\\\\[-Wnonnull\" }\n   return s.find_first_not_of((const char*)nullptr, 1); // { dg-warning \"\\\\\\[-Wnonnull\" }\n }\n+\n+// Ignore additional diagnostic given with -Wsystem-headers:\n+// { dg-prune-output \"argument . null where non-null expected\" }"}, {"sha": "fd7a4bcad33b4599e004f2f75e6410523a761dd3", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/rfind/char/nonnull.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Frfind%2Fchar%2Fnonnull.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Frfind%2Fchar%2Fnonnull.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Frfind%2Fchar%2Fnonnull.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -27,3 +27,6 @@ test01()\n   return s.rfind((const char*)nullptr);\t\t// { dg-warning \"\\\\\\[-Wnonnull\" }\n   return s.rfind((const char*)nullptr, 1);\t// { dg-warning \"\\\\\\[-Wnonnull\" }\n }\n+\n+// Ignore additional diagnostic given with -Wsystem-headers:\n+// { dg-prune-output \"argument . null where non-null expected\" }"}, {"sha": "d48394f514da0345c78ca54d5fc9500050ea8aa7", "filename": "libstdc++-v3/testsuite/21_strings/headers/string/synopsis.cc", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fstring%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fstring%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fstring%2Fsynopsis.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -20,6 +20,12 @@\n \n #include <string>\n \n+#if __cplusplus >= 201103L\n+# define NOTHROW noexcept\n+#else\n+# define NOTHROW\n+#endif\n+\n namespace std {\n   //  lib.char.traits, character traits:\n   template<class charT>\n@@ -54,7 +60,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \n   template<class charT, class traits, class Allocator>\n   bool operator==(const basic_string<charT,traits,Allocator>& lhs,\n-\t\t  const basic_string<charT,traits,Allocator>& rhs);\n+\t\t  const basic_string<charT,traits,Allocator>& rhs) NOTHROW;\n   template<class charT, class traits, class Allocator>\n   bool operator==(const charT* lhs,\n \t\t  const basic_string<charT,traits,Allocator>& rhs);\n@@ -63,7 +69,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \t\t  const charT* rhs);\n   template<class charT, class traits, class Allocator>\n   bool operator!=(const basic_string<charT,traits,Allocator>& lhs,\n-\t\t  const basic_string<charT,traits,Allocator>& rhs);\n+\t\t  const basic_string<charT,traits,Allocator>& rhs) NOTHROW;\n   template<class charT, class traits, class Allocator>\n   bool operator!=(const charT* lhs,\n \t\t  const basic_string<charT,traits,Allocator>& rhs);\n@@ -73,7 +79,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \n   template<class charT, class traits, class Allocator>\n   bool operator< (const basic_string<charT,traits,Allocator>& lhs,\n-\t\t  const basic_string<charT,traits,Allocator>& rhs);\n+\t\t  const basic_string<charT,traits,Allocator>& rhs) NOTHROW;\n   template<class charT, class traits, class Allocator>\n   bool operator< (const basic_string<charT,traits,Allocator>& lhs,\n \t\t  const charT* rhs);\n@@ -82,7 +88,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \t\t  const basic_string<charT,traits,Allocator>& rhs);\n   template<class charT, class traits, class Allocator>\n   bool operator> (const basic_string<charT,traits,Allocator>& lhs,\n-\t\t  const basic_string<charT,traits,Allocator>& rhs);\n+\t\t  const basic_string<charT,traits,Allocator>& rhs) NOTHROW;\n   template<class charT, class traits, class Allocator>\n   bool operator> (const basic_string<charT,traits,Allocator>& lhs,\n \t\t  const charT* rhs);\n@@ -92,7 +98,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \n   template<class charT, class traits, class Allocator>\n   bool operator<=(const basic_string<charT,traits,Allocator>& lhs,\n-\t\t  const basic_string<charT,traits,Allocator>& rhs);\n+\t\t  const basic_string<charT,traits,Allocator>& rhs) NOTHROW;\n   template<class charT, class traits, class Allocator>\n   bool operator<=(const basic_string<charT,traits,Allocator>& lhs,\n \t\t  const charT* rhs);\n@@ -101,7 +107,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \t\t  const basic_string<charT,traits,Allocator>& rhs);\n   template<class charT, class traits, class Allocator>\n   bool operator>=(const basic_string<charT,traits,Allocator>& lhs,\n-\t\t  const basic_string<charT,traits,Allocator>& rhs);\n+\t\t  const basic_string<charT,traits,Allocator>& rhs) NOTHROW;\n   template<class charT, class traits, class Allocator>\n   bool operator>=(const basic_string<charT,traits,Allocator>& lhs,\n \t\t  const charT* rhs);\n@@ -112,7 +118,11 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   //  lib.string.special:\n   template<class charT, class traits, class Allocator>\n   void swap(basic_string<charT,traits,Allocator>& lhs,\n-\t    basic_string<charT,traits,Allocator>& rhs);\n+\t    basic_string<charT,traits,Allocator>& rhs)\n+#if __cplusplus >= 201103L\n+  noexcept(noexcept(lhs.swap(rhs)))\n+#endif\n+  ;\n \n   template<class charT, class traits, class Allocator>\n   basic_istream<charT,traits>&"}, {"sha": "5fc41116649d4450ff1e0b7c5d4f8d3d82cf8402", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/12352.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F12352.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F12352.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F12352.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -71,6 +71,18 @@ void operator delete[](void* p) throw()\n   deallocate(p);\n }\n \n+#if __cpp_sized_deallocation\n+void operator delete(void* p, std::size_t) throw()\n+{\n+  deallocate(p);\n+}\n+\n+void operator delete[](void* p, std::size_t) throw()\n+{\n+  deallocate(p);\n+}\n+#endif\n+\n void* operator new(std::size_t n, const std::nothrow_t&) throw()\n {\n   return allocate(n);"}, {"sha": "fb4a62c2918d68cf5f755348b3d06d3752b07c6b", "filename": "libstdc++-v3/testsuite/23_containers/deque/modifiers/swap/1.cc", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Fswap%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Fswap%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Fswap%2F1.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -5,28 +5,34 @@\n // terms of the GNU General Public License as published by the\n // Free Software Foundation; either version 3, or (at your option)\n // any later version.\n- \n+\n // This library is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n- \n+\n // You should have received a copy of the GNU General Public License along\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n #include <deque>\n #include <testsuite_hooks.h>\n- \n+\n+#if __cplusplus >= 201103L\n+# define NOTHROW noexcept\n+#else\n+# define NOTHROW\n+#endif\n+\n struct T { int i; };\n \n int swap_calls;\n \n namespace std\n {\n-  template<> \n-    void \n-    deque<T, allocator<T> >::swap(deque<T, allocator<T> >&) \n+  template<>\n+    void\n+    deque<T, allocator<T> >::swap(deque<T, allocator<T> >&) NOTHROW\n     { ++swap_calls; }\n }\n "}, {"sha": "194154112820e41d2254cbf5505d66e3eb49c2fa", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/cons/11.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F11.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -27,6 +27,7 @@ struct A\n {\n   A() = default;\n   A(const A&) { if (fail) throw fail; }\n+  A& operator=(const A&) = default;\n };\n \n void test01()"}, {"sha": "d67a037fb7d4aeb562931e7c9691ffed221a86fa", "filename": "libstdc++-v3/testsuite/23_containers/headers/bitset/synopsis.cc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fbitset%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fbitset%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fbitset%2Fsynopsis.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -21,18 +21,24 @@\n \n #include <bitset>\n \n+#if __cplusplus >= 201103L\n+# define NOTHROW noexcept\n+#else\n+# define NOTHROW\n+#endif\n+\n namespace std {\n   template <size_t N> class bitset;\n \n   // 23.3.5.3 bitset operations:\n   template <size_t N>\n-    bitset<N> operator&(const bitset<N>&, const bitset<N>&);\n+    bitset<N> operator&(const bitset<N>&, const bitset<N>&) NOTHROW;\n \n   template <size_t N>\n-    bitset<N> operator|(const bitset<N>&, const bitset<N>&);\n+    bitset<N> operator|(const bitset<N>&, const bitset<N>&) NOTHROW;\n \n   template <size_t N>\n-    bitset<N> operator^(const bitset<N>&, const bitset<N>&);\n+    bitset<N> operator^(const bitset<N>&, const bitset<N>&) NOTHROW;\n \n   template <class charT, class traits, size_t N>\n     basic_istream<charT, traits>&"}, {"sha": "be4098564520349fa2cf1aeefcbb29a30d024aca", "filename": "libstdc++-v3/testsuite/23_containers/headers/deque/synopsis.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fdeque%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fdeque%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fdeque%2Fsynopsis.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -21,6 +21,12 @@\n \n #include <deque>\n \n+#if __cplusplus >= 201103L\n+# define NOTHROW(X) noexcept(X)\n+#else\n+# define NOTHROW(X)\n+#endif\n+\n namespace std {\n   template <class T, class Allocator> class deque;\n \n@@ -43,5 +49,6 @@ namespace std {\n     bool operator<= (const deque<T,Allocator>& x, const deque<T,Allocator>& y);\n \n   template <class T, class Allocator>\n-    void swap(deque<T,Allocator>& x, deque<T,Allocator>& y);\n+    void swap(deque<T,Allocator>& x, deque<T,Allocator>& y)\n+      NOTHROW(noexcept(x.swap(y)));\n }"}, {"sha": "5664306cefc0d038b159feb21221e4873f392f92", "filename": "libstdc++-v3/testsuite/23_containers/headers/forward_list/synopsis.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fforward_list%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fforward_list%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fforward_list%2Fsynopsis.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -49,5 +49,6 @@ namespace std {\n \t\t    const forward_list<T,Allocator>&);\n \n   template <class T, class Allocator>\n-    void swap(forward_list<T,Allocator>& x, forward_list<T,Allocator>& y);\n+    void swap(forward_list<T,Allocator>& x, forward_list<T,Allocator>& y)\n+      noexcept(noexcept(x.swap(y)));\n }"}, {"sha": "6cfd9ff437e82925874446c2bf7aafd76cb9dd35", "filename": "libstdc++-v3/testsuite/23_containers/headers/list/synopsis.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Flist%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Flist%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Flist%2Fsynopsis.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -21,6 +21,12 @@\n \n #include <list>\n \n+#if __cplusplus >= 201103L\n+# define NOTHROW(X) noexcept(X)\n+#else\n+# define NOTHROW(X)\n+#endif\n+\n namespace std {\n _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   template <class T, class Allocator> class list;\n@@ -45,5 +51,6 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     bool operator<=(const list<T,Allocator>& x, const list<T,Allocator>&);\n \n   template <class T, class Allocator>\n-    void swap(list<T,Allocator>& x, list<T,Allocator>& y);\n+    void swap(list<T,Allocator>& x, list<T,Allocator>& y)\n+      NOTHROW(noexcept(x.swap(y)));\n }"}, {"sha": "f70cd0690064c642c01789066f00a9f6e6b2da9f", "filename": "libstdc++-v3/testsuite/23_containers/headers/map/synopsis.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fmap%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fmap%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fmap%2Fsynopsis.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -21,6 +21,12 @@\n \n #include <map>\n \n+#if __cplusplus >= 201103L\n+# define NOTHROW(X) noexcept(X)\n+#else\n+# define NOTHROW(X)\n+#endif\n+\n namespace std {\n   template <class Key, class T, class Compare, class Allocator>\n     class map;\n@@ -44,7 +50,8 @@ namespace std {\n                     const map<Key,T,Compare,Allocator>& y);\n   template <class Key, class T, class Compare, class Allocator>\n     void swap(map<Key,T,Compare,Allocator>& x,\n-              map<Key,T,Compare,Allocator>& y);\n+              map<Key,T,Compare,Allocator>& y)\n+      NOTHROW(noexcept(x.swap(y)));\n \n   template <class Key, class T, class Compare, class Allocator>\n     class multimap;\n@@ -68,5 +75,6 @@ namespace std {\n                     const multimap<Key,T,Compare,Allocator>& y);\n   template <class Key, class T, class Compare, class Allocator>\n     void swap(multimap<Key,T,Compare,Allocator>& x,\n-              multimap<Key,T,Compare,Allocator>& y);\n+              multimap<Key,T,Compare,Allocator>& y)\n+      NOTHROW(noexcept(x.swap(y)));\n }"}, {"sha": "4426a494152fe0bf4a6b824283be5a6038836b8a", "filename": "libstdc++-v3/testsuite/23_containers/headers/queue/synopsis.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fqueue%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fqueue%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fqueue%2Fsynopsis.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -20,6 +20,12 @@\n \n #include <queue>\n \n+#if __cplusplus >= 201103L\n+# define NOTHROW noexcept\n+#else\n+# define NOTHROW\n+#endif\n+\n namespace std {\n   template <class T, class Container> class queue;\n   template <class T, class Container>"}, {"sha": "5ecbabec7908efcd3629bb2b8045f73414894b43", "filename": "libstdc++-v3/testsuite/23_containers/headers/set/synopsis.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fset%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fset%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fset%2Fsynopsis.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -21,6 +21,12 @@\n \n #include <set>\n \n+#if __cplusplus >= 201103L\n+# define NOTHROW(X) noexcept(X)\n+#else\n+# define NOTHROW(X)\n+#endif\n+\n namespace std {\n   template <class Key, class Compare, class Allocator>\n     class set;\n@@ -51,7 +57,8 @@ namespace std {\n \n   template <class Key, class Compare, class Allocator>\n     void swap(set<Key,Compare,Allocator>& x,\n-              set<Key,Compare,Allocator>& y);\n+              set<Key,Compare,Allocator>& y)\n+      NOTHROW(noexcept(x.swap(y)));\n \n   template <class Key, class Compare, class Allocator>\n     class multiset;\n@@ -82,5 +89,6 @@ namespace std {\n \n   template <class Key, class Compare, class Allocator>\n     void swap(multiset<Key,Compare,Allocator>& x,\n-              multiset<Key,Compare,Allocator>& y);\n+              multiset<Key,Compare,Allocator>& y)\n+      NOTHROW(noexcept(x.swap(y)));\n }"}, {"sha": "a728f54b7322489e295823a61e8bcbd9e20f0694", "filename": "libstdc++-v3/testsuite/23_containers/headers/vector/synopsis.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fvector%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fvector%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Fvector%2Fsynopsis.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -21,6 +21,12 @@\n \n #include <vector>\n \n+#if __cplusplus >= 201103L\n+# define NOTHROW(X) noexcept(X)\n+#else\n+# define NOTHROW(X)\n+#endif\n+\n namespace std {\n   template <class T, class Allocator> class vector;\n \n@@ -49,7 +55,8 @@ namespace std {\n                     const vector<T,Allocator>& y);\n \n   template <class T, class Allocator>\n-    void swap(vector<T,Allocator>& x, vector<T,Allocator>& y);\n+    void swap(vector<T,Allocator>& x, vector<T,Allocator>& y)\n+      NOTHROW(noexcept(x.swap(y)));\n \n   template <class Allocator> class vector<bool,Allocator>;\n "}, {"sha": "24fa534fd0d6f1eec3673abde0164bfdc46335d4", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/swap/1.cc", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap%2F1.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -5,24 +5,30 @@\n // terms of the GNU General Public License as published by the\n // Free Software Foundation; either version 3, or (at your option)\n // any later version.\n- \n+\n // This library is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n- \n+\n // You should have received a copy of the GNU General Public License along\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n #include <list>\n #include \"1.h\"\n \n+#if __cplusplus >= 201103L\n+# define NOTHROW noexcept\n+#else\n+# define NOTHROW\n+#endif\n+\n namespace std\n {\n-  template<> \n-    void \n-    list<T, allocator<T> >::swap(list<T, allocator<T> >&) \n+  template<>\n+    void\n+    list<T, allocator<T> >::swap(list<T, allocator<T> >&) NOTHROW\n     { ++swap_calls; }\n }\n "}, {"sha": "98e4344ceb3a8207a8e76977bdb57aff0528fb91", "filename": "libstdc++-v3/testsuite/23_containers/map/modifiers/swap/1.cc", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Fswap%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Fswap%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Fswap%2F1.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -5,19 +5,25 @@\n // terms of the GNU General Public License as published by the\n // Free Software Foundation; either version 3, or (at your option)\n // any later version.\n- \n+\n // This library is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n- \n+\n // You should have received a copy of the GNU General Public License along\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n #include <map>\n #include <testsuite_hooks.h>\n- \n+\n+#if __cplusplus >= 201103L\n+# define NOTHROW noexcept\n+#else\n+# define NOTHROW\n+#endif\n+\n struct T { int i; };\n \n // T must be LessThanComparable to pass concept-checks\n@@ -27,9 +33,9 @@ int swap_calls;\n \n namespace std\n {\n-  template<> \n-    void \n-    map<T, int>::swap(map<T, int>&) \n+  template<>\n+    void\n+    map<T, int>::swap(map<T, int>&) NOTHROW\n     { ++swap_calls; }\n }\n "}, {"sha": "bdfd152fe940905146c5b4215e484c8b74a3e2e9", "filename": "libstdc++-v3/testsuite/23_containers/multimap/modifiers/swap/1.cc", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Fswap%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Fswap%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Fswap%2F1.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -5,19 +5,25 @@\n // terms of the GNU General Public License as published by the\n // Free Software Foundation; either version 3, or (at your option)\n // any later version.\n- \n+\n // This library is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n- \n+\n // You should have received a copy of the GNU General Public License along\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n #include <map>\n #include <testsuite_hooks.h>\n- \n+\n+#if __cplusplus >= 201103L\n+# define NOTHROW noexcept\n+#else\n+# define NOTHROW\n+#endif\n+\n struct T { int i; };\n \n // T must be LessThanComparable to pass concept-checks\n@@ -27,9 +33,9 @@ int swap_calls;\n \n namespace std\n {\n-  template<> \n-    void \n-    multimap<T, int>::swap(multimap<T, int>&) \n+  template<>\n+    void\n+    multimap<T, int>::swap(multimap<T, int>&) NOTHROW\n     { ++swap_calls; }\n }\n "}, {"sha": "f56894deb2195714e7a23760a2db4cd8b06eb169", "filename": "libstdc++-v3/testsuite/23_containers/multiset/modifiers/swap/1.cc", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Fswap%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Fswap%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Fswap%2F1.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -5,19 +5,25 @@\n // terms of the GNU General Public License as published by the\n // Free Software Foundation; either version 3, or (at your option)\n // any later version.\n- \n+\n // This library is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n- \n+\n // You should have received a copy of the GNU General Public License along\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n #include <set>\n #include <testsuite_hooks.h>\n- \n+\n+#if __cplusplus >= 201103L\n+# define NOTHROW noexcept\n+#else\n+# define NOTHROW\n+#endif\n+\n struct T { int i; };\n \n // T must be LessThanComparable to pass concept-checks\n@@ -27,9 +33,9 @@ int swap_calls;\n \n namespace std\n {\n-  template<> \n-    void \n-    multiset<T>::swap(multiset<T>&) \n+  template<>\n+    void\n+    multiset<T>::swap(multiset<T>&) NOTHROW\n     { ++swap_calls; }\n }\n "}, {"sha": "be884613532580263afafbabbdabc031239d76ea", "filename": "libstdc++-v3/testsuite/23_containers/set/modifiers/swap/1.cc", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Fswap%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Fswap%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Fswap%2F1.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -5,19 +5,25 @@\n // terms of the GNU General Public License as published by the\n // Free Software Foundation; either version 3, or (at your option)\n // any later version.\n- \n+\n // This library is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n- \n+\n // You should have received a copy of the GNU General Public License along\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n #include <set>\n #include <testsuite_hooks.h>\n- \n+\n+#if __cplusplus >= 201103L\n+# define NOTHROW noexcept\n+#else\n+# define NOTHROW\n+#endif\n+\n struct T { int i; };\n \n // T must be LessThanComparable to pass concept-checks\n@@ -27,9 +33,9 @@ int swap_calls;\n \n namespace std\n {\n-  template<> \n-    void \n-    set<T>::swap(set<T>&) \n+  template<>\n+    void\n+    set<T>::swap(set<T>&) NOTHROW\n     { ++swap_calls; }\n }\n "}, {"sha": "1347866f8108b49dac203ad62421b218264d47d7", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/56267-2.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F56267-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F56267-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F56267-2.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -25,6 +25,8 @@ struct audrey2hash : std::hash<int>\n \n   audrey2hash(int) { }\n \n+  audrey2hash(const audrey2hash&) = default;\n+\n   audrey2hash&\n   operator=(const audrey2hash&) { throw \"Don't assign the plants\"; }\n };"}, {"sha": "339876f871073a692de50f0944c0ecde32f02e55", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/23632.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2F23632.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2F23632.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2F23632.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -29,7 +29,8 @@ void test01()\n \n   const std::vector<bool>::const_iterator cfu = v.begin();\n   if (cfu[0])\n-    ;\n+  {\n+  }\n }\n \n int main()"}, {"sha": "bbfa62084a195ed02d90365fe20bd25c89f26892", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/swap/1.cc", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fswap%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fswap%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fswap%2F1.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -5,28 +5,34 @@\n // terms of the GNU General Public License as published by the\n // Free Software Foundation; either version 3, or (at your option)\n // any later version.\n- \n+\n // This library is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n- \n+\n // You should have received a copy of the GNU General Public License along\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n #include <vector>\n #include <testsuite_hooks.h>\n- \n+\n+#if __cplusplus >= 201103L\n+# define NOTHROW noexcept\n+#else\n+# define NOTHROW\n+#endif\n+\n struct T { int i; };\n \n int swap_calls;\n \n namespace std\n {\n-  template<> \n-    void \n-    vector<T, allocator<T> >::swap(vector<T, allocator<T> >&) \n+  template<>\n+    void\n+    vector<T, allocator<T> >::swap(vector<T, allocator<T> >&) NOTHROW\n     { ++swap_calls; }\n }\n "}, {"sha": "0ec8359d912cb5c7edac5e3cd5593175d1dd30c3", "filename": "libstdc++-v3/testsuite/25_algorithms/heap/moveable2.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable2.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -44,13 +44,13 @@ bool are_ordered(const rvalstruct& lhs, const rvalstruct& rhs)\n bool are_ordered_int(const int& lhs, const int& rhs)\n { return lhs < rhs; }\n \n-void \n+void\n check_make(int* array, int length)\n {\n   rvalstruct makeheap[9];\n   int        makeheap_ref[9];\n   std::copy(array, array + length, makeheap);\n-  std::copy(array, array + length, makeheap_ref);  \n+  std::copy(array, array + length, makeheap_ref);\n   container makecon(makeheap, makeheap + length);\n   container_ref makecon_ref(makeheap_ref, makeheap_ref + length);\n   std::make_heap(makecon.begin(), makecon.end(), are_ordered);\n@@ -75,7 +75,7 @@ check_pop(int* array, int length)\n   std::pop_heap(popcon_ref.begin(), popcon_ref.end(), are_ordered_int);\n   for (int z = 0; z < length; ++z)\n     VERIFY( popheap[z] == popheap_ref[z] );\n-  VERIFY( (std::__is_heap(popheap, popheap + length - 1), are_ordered) );\n+  VERIFY( std::__is_heap(popheap, popheap + length - 1, are_ordered) );\n   for (int z = 0; z < length; ++z)\n     VERIFY( popheap[z].val <= popheap[length-1].val && popheap[z].valid );\n }\n@@ -104,7 +104,7 @@ check_push(int* array, int pushval, int length)\n   rvalstruct pushheap[10];\n   int        pushheap_ref[10];\n   std::copy(array, array + length, pushheap);\n-  std::copy(array, array + length, pushheap_ref);  \n+  std::copy(array, array + length, pushheap_ref);\n   pushheap[length] = pushval;\n   pushheap_ref[length] = pushval;\n   container pushcon(pushheap, pushheap + length + 1);"}, {"sha": "ea92c4a0ed5b9982573b2df69860f5f618cc13a6", "filename": "libstdc++-v3/testsuite/25_algorithms/sample/1.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsample%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsample%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsample%2F1.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -94,6 +94,7 @@ test04()\n \n   // forward iterator for population and output iterator for result\n   auto res = sample(pop.begin(), pop.end(), samp.begin(), sample_size, rng);\n+  VERIFY( res.ptr == (out + sample_size) );\n \n   // verify no duplicates\n   std::sort(std::begin(out), std::end(out));"}, {"sha": "0c371bcaa6e0c66b1897b5be444d7073a38afb58", "filename": "libstdc++-v3/testsuite/25_algorithms/search/searcher.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Fsearcher.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Fsearcher.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Fsearcher.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -29,7 +29,7 @@ struct nocopy\n \n   struct P { int* first; };\n \n-  P operator()(int* f, int* l) const { return {f}; }\n+  P operator()(int* f, int*) const { return {f}; }\n };\n \n void"}, {"sha": "81fd490e8b261577237dccdaa564a1f031a5812a", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/exceptions/char/9561.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fexceptions%2Fchar%2F9561.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fexceptions%2Fchar%2F9561.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fexceptions%2Fchar%2F9561.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -46,7 +46,7 @@ void test01()\n     {\n       strm << std::endl;\n     }\n-  catch(foobar)\n+  catch(const foobar&)\n     {\n       // strm should throw foobar and not do anything else\n       VERIFY(strm.bad());"}, {"sha": "0fdb05bdbebd793e6ac617230681b51572266fd2", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/exceptions/wchar_t/9561.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fexceptions%2Fwchar_t%2F9561.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fexceptions%2Fwchar_t%2F9561.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fexceptions%2Fwchar_t%2F9561.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -44,7 +44,7 @@ void test01()\n     {\n       strm << std::endl;\n     }\n-  catch(foobar)\n+  catch(const foobar&)\n     {\n       // strm should throw foobar and not do anything else\n       VERIFY(strm.bad());"}, {"sha": "90685b5db7e72c2e718f27dc11a3870f8eedfd53", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/remove_all.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove_all.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove_all.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove_all.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -156,7 +156,7 @@ test04()\n   // remove write permission on the directory:\n   fs::permissions(dir, fs::perms::owner_read|fs::perms::owner_exec);\n   n = fs::remove_all(dir, ec);\n-  VERIFY( n == -1 );\n+  VERIFY( n == std::uintmax_t(-1) );\n   VERIFY( ec == std::errc::permission_denied ); // not ENOTEMPTY\n \n   try {"}, {"sha": "c2d7fec955cbfdd40f29ac4772c15963fa92011a", "filename": "libstdc++-v3/testsuite/experimental/any/assign/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fassign%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fassign%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fassign%2F2.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -31,14 +31,14 @@ struct X\n {\n   X() = default;\n   X(const X&) { copied = true; }\n-  X(X&& x) { moved = true; }\n+  X(X&&) { moved = true; }\n };\n \n struct X2\n {\n   X2() = default;\n   X2(const X2&) { copied = true; }\n-  X2(X2&& x) noexcept { moved = true; }\n+  X2(X2&&) noexcept { moved = true; }\n };\n \n void test01()"}, {"sha": "d6241ae5d84d7ad2b77afdf2d54416fb46e49036", "filename": "libstdc++-v3/testsuite/experimental/any/cons/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fcons%2F2.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -30,14 +30,14 @@ struct X\n {\n   X() = default;\n   X(const X&) { copied = true; }\n-  X(X&& x) { moved = true; }\n+  X(X&&) { moved = true; }\n };\n \n struct X2\n {\n   X2() = default;\n   X2(const X2&) { copied = true; }\n-  X2(X2&& x) noexcept { moved = true; }\n+  X2(X2&&) noexcept { moved = true; }\n };\n \n void test01()"}, {"sha": "c346a95eff47cb3b9375447ad6a13c281429c3a3", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/remove_all.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove_all.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove_all.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove_all.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -124,7 +124,7 @@ test04()\n   // remove write permission on the directory:\n   fs::permissions(dir, fs::perms::owner_read|fs::perms::owner_exec);\n   n = fs::remove_all(dir, ec);\n-  VERIFY( n == -1 );\n+  VERIFY( n == std::uintmax_t(-1) );\n   VERIFY( ec == std::errc::permission_denied ); // not ENOTEMPTY\n \n   try {"}, {"sha": "3d6bb41e3ba5f975bee6ffb967749bfca8c3468e", "filename": "libstdc++-v3/testsuite/experimental/memory/observer_ptr/cons/cons.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Fcons%2Fcons.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Fcons%2Fcons.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fobserver_ptr%2Fcons%2Fcons.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -44,7 +44,6 @@ void test02()\n \n void test03()\n {\n-  int x{};\n   observer_ptr<int> a;\n   observer_ptr<const int> b{a};\n   VERIFY(a == b);"}, {"sha": "284b42829ca3966ac2fed5833b88808d93747d13", "filename": "libstdc++-v3/testsuite/experimental/memory_resource/null_memory_resource.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fnull_memory_resource.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fnull_memory_resource.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fnull_memory_resource.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -31,7 +31,7 @@ test06()\n   memory_resource* r = null_memory_resource();\n   bool caught = false;\n \n-  void* p = nullptr;\n+  void* p __attribute__((unused)) = nullptr;\n   try {\n     p = r->allocate(1);\n   } catch (const std::bad_alloc&) {"}, {"sha": "5ca5b3addc1ad0f98fca256514834829ba76e178", "filename": "libstdc++-v3/testsuite/experimental/source_location/1.cc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsource_location%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsource_location%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsource_location%2F1.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -17,6 +17,7 @@\n \n // { dg-do run { target c++14 } }\n // { dg-require-cstdint \"\" }\n+// { dg-options \"-Wno-address\" }\n \n #include <experimental/source_location>\n #include <experimental/string_view>\n@@ -29,7 +30,7 @@ void\n test01()\n {\n   constexpr source_location loc = source_location::current();\n-  static_assert( loc.line() == 31 );\n+  static_assert( loc.line() == 32 );\n   // static_assert( loc.column() == 35 );\n   VERIFY( loc.file_name() == __FILE__ );\n   VERIFY( loc.function_name() == string_view(__FUNCTION__) );\n@@ -51,13 +52,13 @@ struct S {\n void test02()\n {\n   S s0;\n-  VERIFY( s0.loc.line() == 53 );\n+  VERIFY( s0.loc.line() == 54 );\n   // static_assert( s0.loc.column() == 7 );\n   VERIFY( s0.loc.file_name() == __FILE__ );\n   VERIFY( s0.loc.function_name() == string_view(__FUNCTION__) );\n \n   S s1(1);\n-  VERIFY( s1.loc.line() == 47 );\n+  VERIFY( s1.loc.line() == 48 );\n   VERIFY( s1.loc.file_name() == __FILE__ );\n   VERIFY( s1.loc.function_name() == s1.func );\n }\n@@ -75,21 +76,21 @@ source_location g(string_view& func) {\n void test03()\n {\n   auto loc = f(); // f's first argument corresponds to this line of code\n-  VERIFY( loc.line() == 77 );\n+  VERIFY( loc.line() == 78 );\n   // static_assert( loc.column() == 16 );\n   VERIFY( loc.file_name() == __FILE__ );\n   VERIFY( loc.function_name() == string_view(__FUNCTION__) );\n \n   source_location c = source_location::current();\n   loc = f(c); // f's first argument gets the same values as c, above\n-  VERIFY( loc.line() == 83 );\n+  VERIFY( loc.line() == 84 );\n   // static_assert( loc.column() == 23 );\n   VERIFY( loc.file_name() == __FILE__ );\n   VERIFY( loc.function_name() == string_view(__FUNCTION__) );\n \n   string_view func;\n   loc = g(func);\n-  VERIFY( loc.line() == 70 );\n+  VERIFY( loc.line() == 71 );\n   // static_assert( loc.column() == 23 );\n   VERIFY( loc.file_name() == __FILE__ );\n   VERIFY( loc.function_name() == func );"}, {"sha": "4124d2193f2dc39405792dc7287508d0468f9e8c", "filename": "libstdc++-v3/testsuite/ext/pod_char_traits.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpod_char_traits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpod_char_traits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpod_char_traits.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -22,6 +22,7 @@\n // Benjamin Kosnik <bkoz@redhat.com>\n \n #include <ext/pod_char_traits.h>\n+#include <testsuite_hooks.h>\n \n int main()\n {\n@@ -40,10 +41,12 @@ int main()\n   char_type c1 = { uc1 };\n   char_type c2 = { uc2 };\n   test = !(c1 == c2);\n+  VERIFY( test );\n \n   // 2 char_traits\n   test = traits_type::eq(c1, c2);\n-  \n+  VERIFY( ! test );\n+\n   // 3 basic_string<char_type>\n   typedef std::basic_string<char_type>\tstring_type;\n   string_type str;"}, {"sha": "84dd79eef5e692f66a545a80ca78268bfdb7c28d", "filename": "libstdc++-v3/testsuite/ext/vstring/modifiers/clear/56166.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Fclear%2F56166.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Fclear%2F56166.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Fclear%2F56166.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -90,7 +90,7 @@ int main()\n       fail_after = i;\n       f();\n       break;\n-    } catch (std::bad_alloc) {\n+    } catch (const std::bad_alloc&) {\n     }\n   }\n }"}, {"sha": "a922cf94cbd873977bbd69bd850207d77192c2c4", "filename": "libstdc++-v3/testsuite/std/concepts/concepts.lang/concept.swappable/swap.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.swappable%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.swappable%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.swappable%2Fswap.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -30,7 +30,7 @@ namespace nu\n   constexpr void swap(U& l, U& r) { l.i = r.i = 99; }\n }\n \n-constexpr bool check_struct_with_adl_swap(int i)\n+constexpr bool check_struct_with_adl_swap(int)\n {\n   nu::S s1, s2;\n   std::ranges::swap(s1, s2);\n@@ -39,7 +39,7 @@ constexpr bool check_struct_with_adl_swap(int i)\n \n static_assert(check_struct_with_adl_swap(1));\n \n-constexpr bool check_array_with_adl_swap(int i)\n+constexpr bool check_array_with_adl_swap(int)\n {\n   nu::S s1[2], s2[2];\n   std::ranges::swap(s1, s2);"}, {"sha": "a62423f1600d22b253b5af766a665e47dff20e7e", "filename": "libstdc++-v3/testsuite/std/concepts/concepts.lang/concept.swappable/swappable.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.swappable%2Fswappable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.swappable%2Fswappable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.swappable%2Fswappable.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -23,11 +23,11 @@\n namespace nu\n {\n   struct S { bool swapped = false; };\n-  constexpr void swap(S& l, S& r) { }\n+  constexpr void swap(S&, S&) { }\n   struct T { int i; };\n \n   union U { char c; int i; };\n-  constexpr void swap(U& l, U& r) { }\n+  constexpr void swap(U&, U&) { }\n }\n \n static_assert( std::swappable<nu::S> );"}, {"sha": "c1c503022c1dc6179b7ca764e3ab002db1ac8157", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/cons/43820_neg.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fcons%2F43820_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fcons%2F43820_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fcons%2F43820_neg.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -37,3 +37,7 @@ void test01()\n   std::tr1::shared_ptr<X> p9(ap());  // { dg-error \"here\" }\n   // { dg-error \"incomplete\" \"\" { target *-*-* } 593 }\n }\n+\n+// Ignore additional diagnostic given with -Wsystem-headers:\n+// { dg-prune-output \"has incomplete type\" }\n+// { dg-prune-output \"possible problem detected\" }"}, {"sha": "0037974cf4460946eabd6490b7ce76f9d7eb44e3", "filename": "libstdc++-v3/testsuite/tr1/3_function_objects/function/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F1.cc?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -67,7 +67,7 @@ void test01()\n       f1(3.14159f);\n       VERIFY( false );\n     }\n-  catch (bad_function_call)\n+  catch (const bad_function_call&)\n     {\n       thrown = true;\n     }"}, {"sha": "34c6e1b1a8b794f35c7887533065417545681907", "filename": "libstdc++-v3/testsuite/util/replacement_memory_operators.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Freplacement_memory_operators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Freplacement_memory_operators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Freplacement_memory_operators.h?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -116,3 +116,7 @@ void operator delete(void* p) throw()\n \tstd::printf(\"%lu allocations to be released \\n\", (unsigned long)count);\n     }\n }\n+\n+#if __cpp_sized_deallocation\n+void operator delete(void* p, std::size_t) throw() { ::operator delete(p); }\n+#endif"}, {"sha": "e22e04e623704ecb54904b86bd16b91495740279", "filename": "libstdc++-v3/testsuite/util/testsuite_api.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_api.h?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -86,6 +86,9 @@ namespace __gnu_test\n     NonDefaultConstructible(const NonDefaultConstructible&) { }\n \n #if __cplusplus >= 201103L\n+    NonDefaultConstructible&\n+    operator=(const NonDefaultConstructible&) = default;\n+\n     // For std::iota.\n     NonDefaultConstructible&\n     operator++()"}, {"sha": "0a030b3a29c5da025be7cb1555bf989708a3a82d", "filename": "libstdc++-v3/testsuite/util/testsuite_containers.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -168,7 +168,7 @@ namespace __gnu_test\n   template<typename _Tp>\n     struct reverse_members<_Tp, false>\n     {\n-      reverse_members(_Tp& container) { }\n+      reverse_members(_Tp&) { }\n     };\n \n   template<typename _Iterator,"}, {"sha": "a67f3aa6185917a503b64c59a5949cb2babd7558", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -599,7 +599,7 @@ namespace __gnu_test\n     ItType<T>\n     it(int pos)\n     {\n-      ITERATOR_VERIFY(pos >= 0 && pos <= size());\n+      ITERATOR_VERIFY(pos >= 0 && (unsigned)pos <= size());\n       return ItType<T>(bounds.first + pos, &bounds);\n     }\n "}, {"sha": "46612bd9e5d32df569c117955e9c533e9b8fa69f", "filename": "libstdc++-v3/testsuite/util/testsuite_new_operators.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_new_operators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13feb0234b136fbdc1dbfba3a9663fb4e1043f75/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_new_operators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_new_operators.h?ref=13feb0234b136fbdc1dbfba3a9663fb4e1043f75", "patch": "@@ -65,6 +65,11 @@ void operator delete(void* p) throw()\n     std::free(p);\n }\n \n+#if __cpp_sized_deallocation\n+void operator delete(void* p, std::size_t) throw()\n+{ ::operator delete(p); }\n+#endif\n+\n void operator delete(void* p, const std::nothrow_t&) throw()\n {\n   if (p)"}]}