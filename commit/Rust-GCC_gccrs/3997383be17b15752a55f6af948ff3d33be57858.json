{"sha": "3997383be17b15752a55f6af948ff3d33be57858", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk5NzM4M2JlMTdiMTU3NTJhNTVmNmFmOTQ4ZmYzZDMzYmU1Nzg1OA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2019-05-06T05:33:23Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2019-05-06T05:33:23Z"}, "message": "printers.py (add_one_template_type_printer): Add type printer for container types in std::__debug namespace.\n\n2019-05-06  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* python/libstdcxx/v6/printers.py (add_one_template_type_printer):\n\tAdd type printer for container types in std::__debug namespace.\n\t* testsuite/lib/gdb-test.exp (whatis-regexp-test): New.\n\t(gdb-tests): Use distinct parameters for the type of test and use of\n\tregex.\n\t(gdb-test): Check for regex test even if 'whatis' test.\n\t* testsuite/libstdc++-prettyprinters/80276.cc: Adapt for _GLIBCXX_DEBUG\n\tmode.\n\t* testsuite/libstdc++-prettyprinters/cxx11.cc: Likewise.\n\t* testsuite/libstdc++-prettyprinters/cxx17.cc: Likewise.\n\t* testsuite/libstdc++-prettyprinters/libfundts.cc: Likewise.\n\t* testsuite/libstdc++-prettyprinters/simple.cc: Likewise.\n\t* testsuite/libstdc++-prettyprinters/simple11.cc: Likewise.\n\t* testsuite/libstdc++-prettyprinters/whatis.cc: Likewise.\n\t* testsuite/libstdc++-prettyprinters/whatis2.cc: Likewise.\n\nFrom-SVN: r270893", "tree": {"sha": "d6dc441897447d5eae6e56115ec56a41dbb6227e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6dc441897447d5eae6e56115ec56a41dbb6227e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3997383be17b15752a55f6af948ff3d33be57858", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3997383be17b15752a55f6af948ff3d33be57858", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3997383be17b15752a55f6af948ff3d33be57858", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3997383be17b15752a55f6af948ff3d33be57858/comments", "author": null, "committer": null, "parents": [{"sha": "95ae8efbc01ecca209b46c30813f371dd378ab2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95ae8efbc01ecca209b46c30813f371dd378ab2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95ae8efbc01ecca209b46c30813f371dd378ab2f"}], "stats": {"total": 158, "additions": 95, "deletions": 63}, "files": [{"sha": "411eff1b54f23adea8ddb90191b363d4169139a6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3997383be17b15752a55f6af948ff3d33be57858/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3997383be17b15752a55f6af948ff3d33be57858/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3997383be17b15752a55f6af948ff3d33be57858", "patch": "@@ -1,3 +1,21 @@\n+2019-05-06  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* python/libstdcxx/v6/printers.py (add_one_template_type_printer):\n+\tAdd type printer for container types in std::__debug namespace.\n+\t* testsuite/lib/gdb-test.exp (whatis-regexp-test): New.\n+\t(gdb-tests): Use distinct parameters for the type of test and use of\n+\tregex.\n+\t(gdb-test): Check for regex test even if 'whatis' test.\n+\t* testsuite/libstdc++-prettyprinters/80276.cc: Adapt for _GLIBCXX_DEBUG\n+\tmode.\n+\t* testsuite/libstdc++-prettyprinters/cxx11.cc: Likewise.\n+\t* testsuite/libstdc++-prettyprinters/cxx17.cc: Likewise.\n+\t* testsuite/libstdc++-prettyprinters/libfundts.cc: Likewise.\n+\t* testsuite/libstdc++-prettyprinters/simple.cc: Likewise.\n+\t* testsuite/libstdc++-prettyprinters/simple11.cc: Likewise.\n+\t* testsuite/libstdc++-prettyprinters/whatis.cc: Likewise.\n+\t* testsuite/libstdc++-prettyprinters/whatis2.cc: Likewise.\n+\n 2019-05-04  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/system_error (error_category): Fix comment."}, {"sha": "19d367295dfb64d67970f25a97bc7bf77971311d", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3997383be17b15752a55f6af948ff3d33be57858/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3997383be17b15752a55f6af948ff3d33be57858/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=3997383be17b15752a55f6af948ff3d33be57858", "patch": "@@ -1565,6 +1565,11 @@ def add_one_template_type_printer(obj, name, defargs):\n     \"\"\"\n     printer = TemplateTypePrinter('std::'+name, defargs)\n     gdb.types.register_type_printer(obj, printer)\n+\n+    # Add type printer for same type in debug namespace:\n+    printer = TemplateTypePrinter('std::__debug::'+name, defargs)\n+    gdb.types.register_type_printer(obj, printer)\n+\n     if _versioned_namespace:\n         # Add second type printer for same type in versioned namespace:\n         ns = 'std::' + _versioned_namespace"}, {"sha": "bd35d478b7eef170a67d432d32120c11d580d47f", "filename": "libstdc++-v3/testsuite/lib/gdb-test.exp", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3997383be17b15752a55f6af948ff3d33be57858/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fgdb-test.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3997383be17b15752a55f6af948ff3d33be57858/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fgdb-test.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fgdb-test.exp?ref=3997383be17b15752a55f6af948ff3d33be57858", "patch": "@@ -55,7 +55,7 @@ proc get_line_number {filename marker} {\n proc note-test {var result} {\n     global gdb_tests\n \n-    lappend gdb_tests $var $result 0\n+    lappend gdb_tests $var $result print 0\n }\n \n # A test that uses a regular expression.  This is like note-test, but\n@@ -64,14 +64,22 @@ proc note-test {var result} {\n proc regexp-test {var result} {\n     global gdb_tests\n \n-    lappend gdb_tests $var $result 1\n+    lappend gdb_tests $var $result print 1\n }\n \n # A test of 'whatis'.  This tests a type rather than a variable.\n proc whatis-test {var result} {\n     global gdb_tests\n \n-    lappend gdb_tests $var $result whatis\n+    lappend gdb_tests $var $result whatis 0\n+}\n+\n+# A test of 'whatis' that uses a regular expression. This tests a type rather\n+# than a variable.\n+proc whatis-regexp-test {var result} {\n+    global gdb_tests\n+\n+    lappend gdb_tests $var $result whatis 1\n }\n \n # Utility for testing variable values using gdb, invoked via dg-final.\n@@ -136,13 +144,14 @@ proc gdb-test { marker {selector {}} {load_xmethods 0} } {\n     puts $fd \"info share\"\n \n     set count 0\n-    foreach {var result kind} $gdb_tests {\n+    foreach {var result kind rexp} $gdb_tests {\n \tincr count\n \tset gdb_var($count) $var\n \tset gdb_expected($count) $result\n \tif {$kind == \"whatis\"} {\n \t    if {$do_whatis_tests} {\n \t\tset gdb_is_type($count) 1\n+\t\tset gdb_is_regexp($count) $rexp\n \t\tset gdb_command($count) \"whatis $var\"\n \t    } else {\n \t        unsupported \"$testname\"\n@@ -151,7 +160,7 @@ proc gdb-test { marker {selector {}} {load_xmethods 0} } {\n \t    }\n \t} else {\n \t    set gdb_is_type($count) 0\n-\t    set gdb_is_regexp($count) $kind\n+\t    set gdb_is_regexp($count) $rexp\n \t    set gdb_command($count) \"print $var\"\n \t}\n \tputs $fd $gdb_command($count)\n@@ -179,9 +188,9 @@ proc gdb-test { marker {selector {}} {load_xmethods 0} } {\n \t\tif {$expect_out(1,string) != \"type\"} {\n \t\t    error \"gdb failure\"\n \t\t}\n-\t\tset match [expr {![string compare $first \\\n-\t\t\t\t     $gdb_expected($test_counter)]}]\n-\t    } elseif {$gdb_is_regexp($test_counter)} {\n+\t    }\n+\n+\t    if {$gdb_is_regexp($test_counter)} {\n \t\tset match [regexp -- $gdb_expected($test_counter) $first]\n \t    } else {\n \t\tset match [expr {![string compare $first \\"}, {"sha": "fd67aaf3b70a40330b171a9b325da96ebfedde26", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/80276.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3997383be17b15752a55f6af948ff3d33be57858/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2F80276.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3997383be17b15752a55f6af948ff3d33be57858/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2F80276.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2F80276.cc?ref=3997383be17b15752a55f6af948ff3d33be57858", "patch": "@@ -41,10 +41,10 @@ main()\n   unique_ptr<vector<unique_ptr<set<int>*>>[]> p2;\n   unique_ptr<set<unique_ptr<vector<int>*>>[10]> p3;\n   unique_ptr<vector<unique_ptr<list<std::string>[]>>[99]> p4;\n-  // { dg-final { whatis-test p1 \"std::unique_ptr<std::vector<std::unique_ptr<std::vector<int>*>>>\" } }\n-  // { dg-final { whatis-test p2 \"std::unique_ptr<std::vector<std::unique_ptr<std::set<int>*>>\\[\\]>\" } }\n-  // { dg-final { whatis-test p3 \"std::unique_ptr<std::set<std::unique_ptr<std::vector<int>*>>\\[10\\]>\" } }\n-  // { dg-final { whatis-test p4 \"std::unique_ptr<std::vector<std::unique_ptr<std::list<std::string>\\[\\]>>\\[99\\]>\" } }\n+  // { dg-final { whatis-regexp-test p1 \"std::unique_ptr<std::(__debug::)?vector<std::unique_ptr<std::(__debug::)?vector<int>\\\\*>>>\" } }\n+  // { dg-final { whatis-regexp-test p2 \"std::unique_ptr<std::(__debug::)?vector<std::unique_ptr<std::(__debug::)?set<int>\\\\*>>\\\\\\[\\\\\\]>\" } }\n+  // { dg-final { whatis-regexp-test p3 \"std::unique_ptr<std::(__debug::)?set<std::unique_ptr<std::(__debug::)?vector<int>\\\\*>>\\\\\\[10\\\\\\]>\" } }\n+  // { dg-final { whatis-regexp-test p4 \"std::unique_ptr<std::(__debug::)?vector<std::unique_ptr<std::(__debug::)?list<std::string>\\\\\\[\\\\\\]>>\\\\\\[99\\\\\\]>\" } }\n \n   placeholder(&p1);\t\t// Mark SPOT\n   placeholder(&p2);"}, {"sha": "616413448bc83ac762ba3d72d7275477f1c72de0", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/cxx11.cc", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3997383be17b15752a55f6af948ff3d33be57858/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3997383be17b15752a55f6af948ff3d33be57858/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc?ref=3997383be17b15752a55f6af948ff3d33be57858", "patch": "@@ -64,65 +64,65 @@ int\n main()\n {\n   std::forward_list<int> efl;\n-// { dg-final { note-test efl \"empty std::forward_list\" } }\n+// { dg-final { regexp-test efl \"empty std::(__debug::)?forward_list\" } }\n \n   std::forward_list<int> &refl = efl;\n-// { dg-final { note-test refl \"empty std::forward_list\" } }\n+// { dg-final { regexp-test refl \"empty std::(__debug::)?forward_list\" } }\n \n   std::forward_list<int> fl;\n   fl.push_front(2);\n   fl.push_front(1);\n-// { dg-final { note-test fl {std::forward_list = {[0] = 1, [1] = 2}} } }\n+// { dg-final { regexp-test fl {std::(__debug::)?forward_list = {\\[0\\] = 1, \\[1\\] = 2}} } }\n \n   std::forward_list<int> &rfl = fl;\n-// { dg-final { note-test rfl {std::forward_list = {[0] = 1, [1] = 2}} } }\n+// { dg-final { regexp-test rfl {std::(__debug::)?forward_list = {\\[0\\] = 1, \\[1\\] = 2}} } }\n \n   std::unordered_map<int, std::string> eum;\n-// { dg-final { note-test eum \"std::unordered_map with 0 elements\" } }\n+// { dg-final { regexp-test eum \"std::(__debug::)?unordered_map with 0 elements\" } }\n   std::unordered_map<int, std::string> &reum = eum;\n-// { dg-final { note-test reum \"std::unordered_map with 0 elements\" } }\n+// { dg-final { regexp-test reum \"std::(__debug::)?unordered_map with 0 elements\" } }\n \n   std::unordered_multimap<int, std::string> eumm;\n-// { dg-final { note-test eumm \"std::unordered_multimap with 0 elements\" } }\n+// { dg-final { regexp-test eumm \"std::(__debug::)?unordered_multimap with 0 elements\" } }\n   std::unordered_multimap<int, std::string> &reumm = eumm;\n-// { dg-final { note-test reumm \"std::unordered_multimap with 0 elements\" } }\n+// { dg-final { regexp-test reumm \"std::(__debug::)?unordered_multimap with 0 elements\" } }\n \n   std::unordered_set<int> eus;\n-// { dg-final { note-test eus \"std::unordered_set with 0 elements\" } }\n+// { dg-final { regexp-test eus \"std::(__debug::)?unordered_set with 0 elements\" } }\n   std::unordered_set<int> &reus = eus;\n-// { dg-final { note-test reus \"std::unordered_set with 0 elements\" } }\n+// { dg-final { regexp-test reus \"std::(__debug::)?unordered_set with 0 elements\" } }\n \n   std::unordered_multiset<int> eums;\n-// { dg-final { note-test eums \"std::unordered_multiset with 0 elements\" } }\n+// { dg-final { regexp-test eums \"std::(__debug::)?unordered_multiset with 0 elements\" } }\n   std::unordered_multiset<int> &reums = eums;\n-// { dg-final { note-test reums \"std::unordered_multiset with 0 elements\" } }\n+// { dg-final { regexp-test reums \"std::(__debug::)?unordered_multiset with 0 elements\" } }\n \n   std::unordered_map<int, std::string> uom;\n   uom[5] = \"three\";\n   uom[3] = \"seven\";\n-// { dg-final { note-test uom {std::unordered_map with 2 elements = {[3] = \"seven\", [5] = \"three\"}} } }\n+// { dg-final { regexp-test uom {std::(__debug::)?unordered_map with 2 elements = {\\[3\\] = \"seven\", \\[5\\] = \"three\"}} } }\n \n   std::unordered_map<int, std::string> &ruom = uom;\n-// { dg-final { note-test ruom {std::unordered_map with 2 elements = {[3] = \"seven\", [5] = \"three\"}} } }\n+// { dg-final { regexp-test ruom {std::(__debug::)?unordered_map with 2 elements = {\\[3\\] = \"seven\", \\[5\\] = \"three\"}} } }\n \n   std::unordered_multimap<int, std::string> uomm;\n   uomm.insert(std::pair<int, std::string> (5, \"three\"));\n   uomm.insert(std::pair<int, std::string> (5, \"seven\"));\n-// { dg-final { note-test uomm {std::unordered_multimap with 2 elements = {[5] = \"seven\", [5] = \"three\"}} } }\n+// { dg-final { regexp-test uomm {std::(__debug::)?unordered_multimap with 2 elements = {\\[5\\] = \"seven\", \\[5\\] = \"three\"}} } }\n   std::unordered_multimap<int, std::string> &ruomm = uomm;\n-// { dg-final { note-test ruomm {std::unordered_multimap with 2 elements = {[5] = \"seven\", [5] = \"three\"}} } }\n+// { dg-final { regexp-test ruomm {std::(__debug::)?unordered_multimap with 2 elements = {\\[5\\] = \"seven\", \\[5\\] = \"three\"}} } }\n \n   std::unordered_set<int> uos;\n   uos.insert(5);\n-// { dg-final { note-test uos {std::unordered_set with 1 element = {[0] = 5}} } }\n+// { dg-final { regexp-test uos {std::(__debug::)?unordered_set with 1 element = {\\[0\\] = 5}} } }\n   std::unordered_set<int> &ruos = uos;\n-// { dg-final { note-test ruos {std::unordered_set with 1 element = {[0] = 5}} } }\n+// { dg-final { regexp-test ruos {std::(__debug::)?unordered_set with 1 element = {\\[0\\] = 5}} } }\n \n   std::unordered_multiset<int> uoms;\n   uoms.insert(5);\n-// { dg-final { note-test uoms {std::unordered_multiset with 1 element = {[0] = 5}} } }\n+// { dg-final { regexp-test uoms {std::(__debug::)?unordered_multiset with 1 element = {\\[0\\] = 5}} } }\n   std::unordered_multiset<int> &ruoms = uoms;\n-// { dg-final { note-test ruoms {std::unordered_multiset with 1 element = {[0] = 5}} } }\n+// { dg-final { regexp-test ruoms {std::(__debug::)?unordered_multiset with 1 element = {\\[0\\] = 5}} } }\n \n   std::unique_ptr<datum> uptr (new datum);\n   uptr->s = \"hi bob\";"}, {"sha": "4ff462ef519c54404e6686e03284d3a2b91eaa91", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/cxx17.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3997383be17b15752a55f6af948ff3d33be57858/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3997383be17b15752a55f6af948ff3d33be57858/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx17.cc?ref=3997383be17b15752a55f6af948ff3d33be57858", "patch": "@@ -63,7 +63,7 @@ main()\n // { dg-final { note-test op {std::optional<void *> = {[contained value] = 0x0}} } }\n   optional<std::map<int, double>> om;\n   om = std::map<int, double>{ {1, 2.}, {3, 4.}, {5, 6.} };\n-// { dg-final { note-test om {std::optional<std::map<int, double>> containing std::map with 3 elements = {[1] = 2, [3] = 4, [5] = 6}} } }\n+// { dg-final { regexp-test om {std::optional<std::(__debug::)?map<int, double>> containing std::(__debug::)?map with 3 elements = {\\[1\\] = 2, \\[3\\] = 4, \\[5\\] = 6}} } }\n   optional<std::string> os{ \"stringy\" };\n // { dg-final { note-test os {std::optional<std::string> = {[contained value] = \"stringy\"}} } }\n \n@@ -80,7 +80,7 @@ main()\n   any as2(\"stringiest\");\n // { dg-final { regexp-test as2 {std::any containing const char \\* = {\\[contained value\\] = 0x[[:xdigit:]]+ \"stringiest\"}} } }\n   any am = *om;\n-// { dg-final { note-test am {std::any containing std::map with 3 elements = {[1] = 2, [3] = 4, [5] = 6}} } }\n+// { dg-final { regexp-test am {std::any containing std::(__debug::)?map with 3 elements = {\\[1\\] = 2, \\[3\\] = 4, \\[5\\] = 6}} } }\n   struct local_type { int i = 99; };\n   any al = local_type{};\n // { dg-final { note-test al {std::any containing local_type = {[contained value] = {i = 99}}} } }"}, {"sha": "f099bd32b3e952fbb6708fa84ee3b536bb553d84", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/libfundts.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3997383be17b15752a55f6af948ff3d33be57858/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Flibfundts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3997383be17b15752a55f6af948ff3d33be57858/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Flibfundts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Flibfundts.cc?ref=3997383be17b15752a55f6af948ff3d33be57858", "patch": "@@ -49,7 +49,7 @@ main()\n // { dg-final { note-test op {std::experimental::optional<void *> = {[contained value] = 0x0}} } }\n   optional<std::map<int, double>> om;\n   om = std::map<int, double>{ {1, 2.}, {3, 4.}, {5, 6.} };\n-// { dg-final { note-test om {std::experimental::optional<std::map<int, double>> containing std::map with 3 elements = {[1] = 2, [3] = 4, [5] = 6}} } }\n+// { dg-final { regexp-test om {std::experimental::optional<std::(__debug::)?map<int, double>> containing std::(__debug::)?map with 3 elements = {\\[1\\] = 2, \\[3\\] = 4, \\[5\\] = 6}} } }\n   optional<std::string> os{ \"stringy\" };\n // { dg-final { note-test os {std::experimental::optional<std::string> = {[contained value] = \"stringy\"}} } }\n \n@@ -66,7 +66,7 @@ main()\n   any as2(\"stringiest\");\n // { dg-final { regexp-test as2 {std::experimental::any containing const char \\* = {\\[contained value\\] = 0x[[:xdigit:]]+ \"stringiest\"}} } }\n   any am = *om;\n-// { dg-final { note-test am {std::experimental::any containing std::map with 3 elements = {[1] = 2, [3] = 4, [5] = 6}} } }\n+// { dg-final { regexp-test am {std::experimental::any containing std::(__debug::)?map with 3 elements = {\\[1\\] = 2, \\[3\\] = 4, \\[5\\] = 6}} } }\n \n   std::cout << \"\\n\";\n   return 0;\t\t\t// Mark SPOT"}, {"sha": "453baf8131a95183ee4ce94662e55d0236d11d54", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/simple.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3997383be17b15752a55f6af948ff3d33be57858/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3997383be17b15752a55f6af948ff3d33be57858/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc?ref=3997383be17b15752a55f6af948ff3d33be57858", "patch": "@@ -43,18 +43,18 @@ main()\n \n   // PR 65229\n   std::bitset<0> bs0;\n-// { dg-final { note-test bs0 {std::bitset} } }\n+// { dg-final { regexp-test bs0 {std::(__debug::)?bitset} } }\n \n   std::bitset<10> bs;\n   bs[0] = 1;\n   bs[5] = 1;\n   bs[7] = 1;\n-// { dg-final { note-test bs {std::bitset = {[0] = 1, [5] = 1, [7] = 1}} } }\n+// { dg-final { regexp-test bs {std::(__debug::)?bitset = {\\[0\\] = 1, \\[5\\] = 1, \\[7\\] = 1}} } }\n \n   std::deque<std::string> deq;\n   deq.push_back(\"one\");\n   deq.push_back(\"two\");\n-// { dg-final { note-test deq {std::deque with 2 elements = {\"one\", \"two\"}} } }\n+// { dg-final { regexp-test deq {std::(__debug::)?deque with 2 elements = {\"one\", \"two\"}} } }\n \n   std::deque<int>::iterator deqiter0;\n // { dg-final { note-test deqiter0 {non-dereferenceable iterator for std::deque} } }\n@@ -65,7 +65,7 @@ main()\n   std::list<std::string> lst;\n   lst.push_back(\"one\");\n   lst.push_back(\"two\");\n-// { dg-final { note-test lst {std::list = {[0] = \"one\", [1] = \"two\"}} } }\n+// { dg-final { regexp-test lst {std::(__debug::)?list = {\\[0\\] = \"one\", \\[1\\] = \"two\"}} } }\n \n   std::list<int>::iterator lstiter0;\n // { dg-final { note-test lstiter0 {non-dereferenceable iterator for std::list} } }\n@@ -80,7 +80,7 @@ main()\n \n   std::map<std::string, int> mp;\n   mp[\"zardoz\"] = 23;\n-// { dg-final { note-test mp {std::map with 1 element = {[\"zardoz\"] = 23}} } }\n+// { dg-final { regexp-test mp {std::(__debug::)?map with 1 element = {\\[\"zardoz\"\\] = 23}} } }\n \n   std::map<std::string, int>::iterator mpiter = mp.begin();\n // { dg-final { note-test mpiter {{first = \"zardoz\", second = 23}} } }\n@@ -93,12 +93,12 @@ main()\n   intset.insert(2);\n   intset.insert(3);\n   const std::set<int> const_intset = intset;\n-// { dg-final { note-test const_intset {std::set with 2 elements = {[0] = 2, [1] = 3}} } }\n+// { dg-final { regexp-test const_intset {std::(__debug::)?set with 2 elements = {\\[0\\] = 2, \\[1\\] = 3}} } }\n \n   std::set<std::string> sp;\n   sp.insert(\"clownfish\");\n   sp.insert(\"barrel\");\n-// { dg-final { note-test sp {std::set with 2 elements = {[0] = \"barrel\", [1] = \"clownfish\"}} } }\n+// { dg-final { regexp-test sp {std::(__debug::)?set with 2 elements = {\\[0\\] = \"barrel\", \\[1\\] = \"clownfish\"}} } }\n \n   std::set<std::string>::const_iterator spciter = sp.begin();\n // { dg-final { note-test spciter {\"barrel\"} } }\n@@ -110,7 +110,7 @@ main()\n   v.push_back(1);\n   v.push_back(2);\n   v.erase(v.begin());\n-// { dg-final { note-test v {std::vector of length 1, capacity 2 = {2}} } }\n+// { dg-final { regexp-test v {std::(__debug::)?vector of length 1, capacity 2 = \\\\{2\\\\}} } }\n   std::vector<int>::iterator viter3 = v.begin();\n // { dg-final { note-test viter3 {2} } }\n "}, {"sha": "6e8c56f44c925d7c4095771fa7e06bc4f2b3ea95", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/simple11.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3997383be17b15752a55f6af948ff3d33be57858/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3997383be17b15752a55f6af948ff3d33be57858/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc?ref=3997383be17b15752a55f6af948ff3d33be57858", "patch": "@@ -45,12 +45,12 @@ main()\n   bs[0] = 1;\n   bs[5] = 1;\n   bs[7] = 1;\n-// { dg-final { note-test bs {std::bitset = {[0] = 1, [5] = 1, [7] = 1}} } }\n+// { dg-final { regexp-test bs {std::(__debug::)?bitset = {\\[0\\] = 1, \\[5\\] = 1, \\[7\\] = 1}} } }\n \n   std::deque<std::string> deq;\n   deq.push_back(\"one\");\n   deq.push_back(\"two\");\n-// { dg-final { note-test deq {std::deque with 2 elements = {\"one\", \"two\"}} } }\n+// { dg-final { regexp-test deq {std::(__debug::)?deque with 2 elements = {\"one\", \"two\"}} } }\n \n   std::deque<std::string>::iterator deqiter = deq.begin();\n // { dg-final { note-test deqiter {\"one\"} } }\n@@ -61,7 +61,7 @@ main()\n   std::list<std::string> lst;\n   lst.push_back(\"one\");\n   lst.push_back(\"two\");\n-// { dg-final { note-test lst {std::list = {[0] = \"one\", [1] = \"two\"}} } }\n+// { dg-final { regexp-test lst {std::(__debug::)?list = {\\[0\\] = \"one\", \\[1\\] = \"two\"}} } }\n \n   std::list<std::string>::iterator lstiter = lst.begin();\n   tem = *lstiter;\n@@ -76,7 +76,7 @@ main()\n \n   std::map<std::string, int> mp;\n   mp[\"zardoz\"] = 23;\n-// { dg-final { note-test mp {std::map with 1 element = {[\"zardoz\"] = 23}} } }\n+// { dg-final { regexp-test mp {std::(__debug::)?map with 1 element = {\\[\"zardoz\"\\] = 23}} } }\n \n   std::map<std::string, int>::iterator mpiter = mp.begin();\n // { dg-final { note-test mpiter {{first = \"zardoz\", second = 23}} } }\n@@ -86,12 +86,12 @@ main()\n \n   // PR 67440\n   const std::set<int> const_intset = {2, 3};\n-// { dg-final { note-test const_intset {std::set with 2 elements = {[0] = 2, [1] = 3}} } }\n+// { dg-final { regexp-test const_intset {std::(__debug::)?set with 2 elements = {\\[0\\] = 2, \\[1\\] = 3}} } }\n \n   std::set<std::string> sp;\n   sp.insert(\"clownfish\");\n   sp.insert(\"barrel\");\n-// { dg-final { note-test sp {std::set with 2 elements = {[0] = \"barrel\", [1] = \"clownfish\"}} } }\n+// { dg-final { regexp-test sp {std::(__debug::)?set with 2 elements = {\\[0\\] = \"barrel\", \\[1\\] = \"clownfish\"}} } }\n \n   std::set<std::string>::const_iterator spciter = sp.begin();\n // { dg-final { note-test spciter {\"barrel\"} } }\n@@ -103,7 +103,7 @@ main()\n   v.push_back(1);\n   v.push_back(2);\n   v.erase(v.begin());\n-// { dg-final { note-test v {std::vector of length 1, capacity 2 = {2}} } }\n+// { dg-final { regexp-test v {std::(__debug::)?vector of length 1, capacity 2 = \\\\{2\\\\}} } }\n   std::vector<int>::iterator viter3 = v.begin();\n // { dg-final { note-test viter3 {2} } }\n "}, {"sha": "3f35c53ac467c10e1f5856bf9da379af3694a0ba", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/whatis.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3997383be17b15752a55f6af948ff3d33be57858/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fwhatis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3997383be17b15752a55f6af948ff3d33be57858/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fwhatis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fwhatis.cc?ref=3997383be17b15752a55f6af948ff3d33be57858", "patch": "@@ -166,27 +166,27 @@ holder<std::knuth_b> knuth_b_holder;\n \n std::vector<std::deque<std::unique_ptr<char>>> *seq1_ptr;\n holder< std::vector<std::deque<std::unique_ptr<char>>> > seq1_holder;\n-// { dg-final { whatis-test seq1_holder \"holder<std::vector<std::deque<std::unique_ptr<char>>> >\" } }\n+// { dg-final { whatis-regexp-test seq1_holder \"holder<std::(__debug::)?vector<std::(__debug::)?deque<std::unique_ptr<char>>> >\" } }\n \n std::list<std::forward_list<std::unique_ptr<char>>> *seq2_ptr;\n holder< std::list<std::forward_list<std::unique_ptr<char>>> > seq2_holder;\n-// { dg-final { whatis-test seq2_holder \"holder<std::list<std::forward_list<std::unique_ptr<char>>> >\" } }\n+// { dg-final { whatis-regexp-test seq2_holder \"holder<std::(__debug::)?list<std::(__debug::)?forward_list<std::unique_ptr<char>>> >\" } }\n \n std::map<int, std::set<int>> *assoc1_ptr;\n holder< std::map<int, std::set<int>> > assoc1_holder;\n-// { dg-final { whatis-test assoc1_holder \"holder<std::map<int, std::set<int>> >\" } }\n+// { dg-final { whatis-regexp-test assoc1_holder \"holder<std::(__debug::)?map<int, std::(__debug::)?set<int>> >\" } }\n \n std::multimap<int, std::multiset<int>> *assoc2_ptr;\n holder< std::multimap<int, std::multiset<int>> > assoc2_holder;\n-// { dg-final { whatis-test assoc2_holder \"holder<std::multimap<int, std::multiset<int>> >\" } }\n+// { dg-final { whatis-regexp-test assoc2_holder \"holder<std::(__debug::)?multimap<int, std::(__debug::)?multiset<int>> >\" } }\n \n std::unordered_map<int, std::unordered_set<int>> *unord1_ptr;\n holder< std::unordered_map<int, std::unordered_set<int>> > unord1_holder;\n-// { dg-final { whatis-test unord1_holder \"holder<std::unordered_map<int, std::unordered_set<int>> >\" } }\n+// { dg-final { whatis-regexp-test unord1_holder \"holder<std::(__debug::)?unordered_map<int, std::(__debug::)?unordered_set<int>> >\" } }\n \n std::unordered_multimap<int, std::unordered_multiset<int>> *unord2_ptr;\n holder< std::unordered_multimap<int, std::unordered_multiset<int>> > unord2_holder;\n-// { dg-final { whatis-test unord2_holder \"holder<std::unordered_multimap<int, std::unordered_multiset<int>> >\" } }\n+// { dg-final { whatis-regexp-test unord2_holder \"holder<std::(__debug::)?unordered_multimap<int, std::(__debug::)?unordered_multiset<int>> >\" } }\n \n \n int"}, {"sha": "887e80373e297ba9f09665c7372c6f4256d43b91", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/whatis2.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3997383be17b15752a55f6af948ff3d33be57858/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fwhatis2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3997383be17b15752a55f6af948ff3d33be57858/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fwhatis2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fwhatis2.cc?ref=3997383be17b15752a55f6af948ff3d33be57858", "patch": "@@ -165,27 +165,27 @@ holder<std::csub_match> csub_match_holder;\n \n   std::vector<std::deque<std::unique_ptr<char>>> *seq1_ptr;\n   holder< std::vector<std::deque<std::unique_ptr<char>>> > seq1_holder;\n-// { dg-final { whatis-test seq1_holder \"holder<std::vector<std::deque<std::unique_ptr<char>>> >\" } }\n+// { dg-final { whatis-regexp-test seq1_holder \"holder<std::(__debug::)?vector<std::(__debug::)?deque<std::unique_ptr<char>>> >\" } }\n \n   std::list<std::forward_list<std::unique_ptr<char>>> *seq2_ptr;\n   holder< std::list<std::forward_list<std::unique_ptr<char>>> > seq2_holder;\n-// { dg-final { whatis-test seq2_holder \"holder<std::list<std::forward_list<std::unique_ptr<char>>> >\" } }\n+// { dg-final { whatis-regexp-test seq2_holder \"holder<std::(__debug::)?list<std::(__debug::)?forward_list<std::unique_ptr<char>>> >\" } }\n \n   std::map<int, std::set<int>> *assoc1_ptr;\n   holder< std::map<int, std::set<int>> > assoc1_holder;\n-// { dg-final { whatis-test assoc1_holder \"holder<std::map<int, std::set<int>> >\" } }\n+// { dg-final { whatis-regexp-test assoc1_holder \"holder<std::(__debug::)?map<int, std::(__debug::)?set<int>> >\" } }\n \n   std::multimap<int, std::multiset<int>> *assoc2_ptr;\n   holder< std::multimap<int, std::multiset<int>> > assoc2_holder;\n-// { dg-final { whatis-test assoc2_holder \"holder<std::multimap<int, std::multiset<int>> >\" } }\n+// { dg-final { whatis-regexp-test assoc2_holder \"holder<std::(__debug::)?multimap<int, std::(__debug::)?multiset<int>> >\" } }\n \n   std::unordered_map<int, std::unordered_set<int>> *unord1_ptr;\n   holder< std::unordered_map<int, std::unordered_set<int>> > unord1_holder;\n-// { dg-final { whatis-test unord1_holder \"holder<std::unordered_map<int, std::unordered_set<int>> >\" } }\n+// { dg-final { whatis-regexp-test unord1_holder \"holder<std::(__debug::)?unordered_map<int, std::(__debug::)?unordered_set<int>> >\" } }\n \n   std::unordered_multimap<int, std::unordered_multiset<int>> *unord2_ptr;\n   holder< std::unordered_multimap<int, std::unordered_multiset<int>> > unord2_holder;\n-// { dg-final { whatis-test unord2_holder \"holder<std::unordered_multimap<int, std::unordered_multiset<int>> >\" } }\n+// { dg-final { whatis-regexp-test unord2_holder \"holder<std::(__debug::)?unordered_multimap<int, std::(__debug::)?unordered_multiset<int>> >\" } }\n \n \n   placeholder(&ios_ptr);\t\t// Mark SPOT"}]}