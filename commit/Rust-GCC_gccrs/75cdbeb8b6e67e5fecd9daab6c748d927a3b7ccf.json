{"sha": "75cdbeb8b6e67e5fecd9daab6c748d927a3b7ccf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVjZGJlYjhiNmU2N2U1ZmVjZDlkYWFiNmM3NDhkOTI3YTNiN2NjZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-07-27T00:12:52Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-07-27T00:12:52Z"}, "message": "ia64.md (movqicc_astep, [...]): New.\n\n        * config/ia64/ia64.md (movqicc_astep, movqi_internal_astep): New.\n        (movhicc_astep, movhi_internal_astep): New.\n        (movsicc_astep, movsi_internal_astep): New.\n        (movdicc_astep, movdi_internal_astep): New.\n        (movsfcc_astep, movsf_internal_astep): New.\n        (movdfcc_astep, movdf_internal_astep): New.\n        (movxfcc_astep, movxf_internal_astep): New.\n        (cmovdi_internal_astep, cmovsi_internal_astep): New.\n        Unify the cmov[ds]i splitters.\n\nFrom-SVN: r35274", "tree": {"sha": "58e1453e83da073c18c6bf762f41802c57598a19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58e1453e83da073c18c6bf762f41802c57598a19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75cdbeb8b6e67e5fecd9daab6c748d927a3b7ccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75cdbeb8b6e67e5fecd9daab6c748d927a3b7ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75cdbeb8b6e67e5fecd9daab6c748d927a3b7ccf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75cdbeb8b6e67e5fecd9daab6c748d927a3b7ccf/comments", "author": null, "committer": null, "parents": [{"sha": "73aa9564f6f64f2e70a38e642f9c3536ba9aecf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73aa9564f6f64f2e70a38e642f9c3536ba9aecf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73aa9564f6f64f2e70a38e642f9c3536ba9aecf7"}], "stats": {"total": 386, "additions": 337, "deletions": 49}, "files": [{"sha": "6b36e5771f049814dcc489724cd33df226706c69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cdbeb8b6e67e5fecd9daab6c748d927a3b7ccf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cdbeb8b6e67e5fecd9daab6c748d927a3b7ccf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75cdbeb8b6e67e5fecd9daab6c748d927a3b7ccf", "patch": "@@ -1,3 +1,15 @@\n+2000-07-27  Richard Henderson  <rth@cygnus.com>\n+\n+\t* config/ia64/ia64.md (movqicc_astep, movqi_internal_astep): New.\n+\t(movhicc_astep, movhi_internal_astep): New.\n+\t(movsicc_astep, movsi_internal_astep): New.\n+\t(movdicc_astep, movdi_internal_astep): New.\n+\t(movsfcc_astep, movsf_internal_astep): New.\n+\t(movdfcc_astep, movdf_internal_astep): New.\n+\t(movxfcc_astep, movxf_internal_astep): New.\n+\t(cmovdi_internal_astep, cmovsi_internal_astep): New.\n+\tUnify the cmov[ds]i splitters.\n+\n 2000-07-27  Rodney Brown  <RodneyBrown@pmsc.com>\n \n \t* real.c (asctoeg): Rename `error' label to unexpected_char_error"}, {"sha": "d5e8b5e7ed33c46207a04d60a85bf59066e6018a", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 325, "deletions": 49, "changes": 374, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cdbeb8b6e67e5fecd9daab6c748d927a3b7ccf/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cdbeb8b6e67e5fecd9daab6c748d927a3b7ccf/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=75cdbeb8b6e67e5fecd9daab6c748d927a3b7ccf", "patch": "@@ -176,10 +176,49 @@\n     operands[1] = force_reg (QImode, operands[1]);\n }\")\n \n+;; Errata 72 implies that we cannot use predicated loads and stores\n+;; on affected systems.  Reuse TARGET_A_STEP for convenience.\n+\n+;; ??? It would be convenient at this point if the cond_exec pattern\n+;; expander understood non-constant conditions on attributes.  Failing\n+;; that we have to replicate patterns.\n+\n+(define_insn \"*movqicc_astep\"\n+  [(cond_exec\n+     (match_operator 2 \"predicate_operator\"\n+       [(match_operand:CC 3 \"register_operand\" \"c,c,c,c,c\")\n+        (const_int 0)])\n+     (set (match_operand:QI 0 \"register_operand\"  \"=r,r, r,*f,*f\")\n+\t  (match_operand:QI 1 \"nonmemory_operand\" \"rO,J,*f,rO,*f\")))]\n+  \"TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n+  \"@\n+   (%J2) mov %0 = %r1\n+   (%J2) addl %0 = %1, r0\n+   (%J2) getf.sig %0 = %1\n+   (%J2) setf.sig %0 = %r1\n+   (%J2) mov %0 = %1\"\n+  [(set_attr \"type\" \"A,A,M,M,F\")\n+   (set_attr \"predicable\" \"no\")])\n+\n+(define_insn \"*movqi_internal_astep\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,r,r, m, r,*f,*f\")\n+\t(match_operand:QI 1 \"move_operand\"         \"rO,J,m,rO,*f,rO,*f\"))]\n+  \"TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n+  \"@\n+   mov %0 = %r1\n+   addl %0 = %1, r0\n+   ld1%O1 %0 = %1%P1\n+   st1%Q0 %0 = %r1%P0\n+   getf.sig %0 = %1\n+   setf.sig %0 = %r1\n+   mov %0 = %1\"\n+  [(set_attr \"type\" \"A,A,M,M,M,M,F\")\n+   (set_attr \"predicable\" \"no\")])\n+\n (define_insn \"*movqi_internal\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,r,r, m, r,*f,*f\")\n \t(match_operand:QI 1 \"move_operand\"         \"rO,J,m,rO,*f,rO,*f\"))]\n-  \"ia64_move_ok (operands[0], operands[1])\"\n+  \"! TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n   \"@\n    mov %0 = %r1\n    addl %0 = %1, r0\n@@ -201,10 +240,43 @@\n     operands[1] = force_reg (HImode, operands[1]);\n }\")\n \n+;; Errata 72 workaround.\n+(define_insn \"*movhicc_astep\"\n+  [(cond_exec\n+     (match_operator 2 \"predicate_operator\"\n+       [(match_operand:CC 3 \"register_operand\" \"c,c,c,c,c\")\n+        (const_int 0)])\n+     (set (match_operand:HI 0 \"register_operand\"  \"=r,r, r,*f,*f\")\n+\t  (match_operand:HI 1 \"nonmemory_operand\" \"rO,J,*f,rO,*f\")))]\n+  \"TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n+  \"@\n+   (%J2) mov %0 = %r1\n+   (%J2) addl %0 = %1, r0\n+   (%J2) getf.sig %0 = %1\n+   (%J2) setf.sig %0 = %r1\n+   (%J2) mov %0 = %1\"\n+  [(set_attr \"type\" \"A,A,M,M,F\")\n+   (set_attr \"predicable\" \"no\")])\n+\n+(define_insn \"*movhi_internal_astep\"\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,r, m, r,*f,*f\")\n+\t(match_operand:HI 1 \"move_operand\"         \"rO,J,m,rO,*f,rO,*f\"))]\n+  \"TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n+  \"@\n+   mov %0 = %r1\n+   addl %0 = %1, r0\n+   ld2%O1 %0 = %1%P1\n+   st2%Q0 %0 = %r1%P0\n+   getf.sig %0 = %1\n+   setf.sig %0 = %r1\n+   mov %0 = %1\"\n+  [(set_attr \"type\" \"A,A,M,M,M,M,F\")\n+   (set_attr \"predicable\" \"no\")])\n+\n (define_insn \"*movhi_internal\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,r, m, r,*f,*f\")\n \t(match_operand:HI 1 \"move_operand\"         \"rO,J,m,rO,*f,rO,*f\"))]\n-  \"ia64_move_ok (operands[0], operands[1])\"\n+  \"! TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n   \"@\n    mov %0 = %r1\n    addl %0 = %1, r0\n@@ -226,10 +298,45 @@\n     operands[1] = force_reg (SImode, operands[1]);\n }\")\n \n+;; Errata 72 workaround.\n+(define_insn \"*movsicc_astep\"\n+  [(cond_exec\n+     (match_operator 2 \"predicate_operator\"\n+       [(match_operand:CC 3 \"register_operand\" \"c,c,c,c,c,c\")\n+        (const_int 0)])\n+     (set (match_operand:SI 0 \"register_operand\"  \"=r,r,r, r,*f,*f\")\n+\t  (match_operand:SI 1 \"nonmemory_operand\" \"rO,J,i,*f,rO,*f\")))]\n+  \"TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n+  \"@\n+   (%J2) mov %0 = %r1\n+   (%J2) addl %0 = %1, r0\n+   (%J2) movl %0 = %1\n+   (%J2) getf.sig %0 = %1\n+   (%J2) setf.sig %0 = %r1\n+   (%J2) mov %0 = %1\"\n+  [(set_attr \"type\" \"A,A,L,M,M,F\")\n+   (set_attr \"predicable\" \"no\")])\n+\n+(define_insn \"*movsi_internal_astep\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,r, m, r,*f,*f\")\n+\t(match_operand:SI 1 \"move_operand\"         \"rO,J,i,m,rO,*f,rO,*f\"))]\n+  \"TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n+  \"@\n+  mov %0 = %r1\n+  addl %0 = %1, r0\n+  movl %0 = %1\n+  ld4%O1 %0 = %1%P1\n+  st4%Q0 %0 = %r1%P0\n+  getf.sig %0 = %1\n+  setf.sig %0 = %r1\n+  mov %0 = %1\"\n+  [(set_attr \"type\" \"A,A,L,M,M,M,M,F\")\n+   (set_attr \"predicable\" \"no\")])\n+\n (define_insn \"*movsi_internal\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,r, m, r,*f,*f\")\n \t(match_operand:SI 1 \"move_operand\"         \"rO,J,i,m,rO,*f,rO,*f\"))]\n-  \"ia64_move_ok (operands[0], operands[1])\"\n+  \"! TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n   \"@\n   mov %0 = %r1\n   addl %0 = %1, r0\n@@ -257,10 +364,82 @@\n     operands[1] = force_reg (DImode, operands[1]);\n }\")\n \n+;; Errata 72 workaround.\n+(define_insn \"\"\n+  [(cond_exec\n+     (match_operator 2 \"predicate_operator\"\n+       [(match_operand:CC 3 \"register_operand\" \"c,c,c,c,c,c,c,c\")\n+        (const_int 0)])\n+     (set (match_operand:DI 0 \"register_operand\"  \"=r,r,r, r,*f,*f, r,*b\")\n+\t  (match_operand:DI 1 \"nonmemory_operand\" \"rO,J,i,*f,rO,*f,*b,rO\")))]\n+  \"TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n+  \"*\n+{\n+  static const char * const alt[] = {\n+    \\\"(%J2) mov %0 = %r1\\\",\n+    \\\"(%J2) addl %0 = %1, r0\\\",\n+    \\\"(%J2) movl %0 = %1\\\",\n+    \\\"(%J2) getf.sig %0 = %1\\\",\n+    \\\"(%J2) setf.sig %0 = %r1\\\",\n+    \\\"(%J2) mov %0 = %1\\\",\n+    \\\"(%J2) mov %0 = %1\\\",\n+    \\\"(%J2) mov %0 = %r1\\\"\n+  };\n+\n+  /* We use 'i' for alternative 2 despite possible PIC problems.\n+\n+     If we define LEGITIMATE_CONSTANT_P such that symbols are not\n+     allowed, then the compiler dumps the data into constant memory\n+     instead of letting us read the values from the GOT.  Similarly\n+     if we use 'n' instead of 'i'.\n+\n+     Instead, we allow such insns through reload and then split them\n+     afterward (even without optimization).  Therefore, we should\n+     never get so far with a symbolic operand.  */\n+\n+  if (which_alternative == 2 && ! TARGET_NO_PIC\n+      && symbolic_operand (operands[1], VOIDmode))\n+    abort ();\n+\n+  return alt[which_alternative];\n+}\"\n+  [(set_attr \"type\" \"A,A,L,M,M,F,I,I\")\n+   (set_attr \"predicable\" \"no\")])\n+\n+(define_insn \"*movdi_internal_astep\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,r, m,r,*f,*f,*f,Q, r,*b\")\n+\t(match_operand:DI 1 \"move_operand\"         \"rO,J,i,m,rO,*f,rO,*f,Q,*f,*b,rO\"))]\n+  \"TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n+  \"*\n+{\n+  static const char * const alt[] = {\n+    \\\"mov %0 = %r1\\\",\n+    \\\"addl %0 = %1, r0\\\",\n+    \\\"movl %0 = %1\\\",\n+    \\\"ld8%O1 %0 = %1%P1\\\",\n+    \\\"st8%Q0 %0 = %r1%P0\\\",\n+    \\\"getf.sig %0 = %1\\\",\n+    \\\"setf.sig %0 = %r1\\\",\n+    \\\"mov %0 = %1\\\",\n+    \\\"ldf8 %0 = %1%P1\\\",\n+    \\\"stf8 %0 = %1%P0\\\",\n+    \\\"mov %0 = %1\\\",\n+    \\\"mov %0 = %r1\\\"\n+  };\n+\n+  if (which_alternative == 2 && ! TARGET_NO_PIC\n+      && symbolic_operand (operands[1], VOIDmode))\n+    abort ();\n+\n+  return alt[which_alternative];\n+}\"\n+  [(set_attr \"type\" \"A,A,L,M,M,M,M,F,M,M,I,I\")\n+   (set_attr \"predicable\" \"no\")])\n+\n (define_insn \"*movdi_internal\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,r, m,r,*f,*f,*f,Q, r,*b\")\n \t(match_operand:DI 1 \"move_operand\"         \"rO,J,i,m,rO,*f,rO,*f,Q,*f,*b,rO\"))]\n-  \"ia64_move_ok (operands[0], operands[1])\"\n+  \"! TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n   \"*\n {\n   static const char * const alt[] = {\n@@ -278,17 +457,6 @@\n     \\\"%,mov %0 = %r1\\\"\n   };\n \n-  /* We use 'i' for alternative 2 despite possible PIC problems.\n-\n-     If we define LEGITIMATE_CONSTANT_P such that symbols are not\n-     allowed, then the compiler dumps the data into constant memory\n-     instead of letting us read the values from the GOT.  Similarly\n-     if we use 'n' instead of 'i'.\n-\n-     Instead, we allow such insns through reload and then split them\n-     afterward (even without optimization).  Therefore, we should\n-     never get so far with a symbolic operand.  */\n-\n   if (which_alternative == 2 && ! TARGET_NO_PIC\n       && symbolic_operand (operands[1], VOIDmode))\n     abort ();\n@@ -387,10 +555,43 @@\n     operands[1] = force_reg (SFmode, operands[1]);\n }\")\n \n+;; Errata 72 workaround.\n+(define_insn \"*movsfcc_astep\"\n+  [(cond_exec\n+     (match_operator 2 \"predicate_operator\"\n+       [(match_operand:CC 3 \"register_operand\" \"c,c,c,c\")\n+        (const_int 0)])\n+     (set (match_operand:SF 0 \"register_operand\"  \"=f,*r, f,*r\")\n+\t  (match_operand:SF 1 \"nonmemory_operand\" \"fG,fG,*r,*r\")))]\n+  \"TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n+  \"@\n+  mov %0 = %F1\n+  getf.s %0 = %F1\n+  setf.s %0 = %1\n+  mov %0 = %1\"\n+  [(set_attr \"type\" \"F,M,M,A\")\n+   (set_attr \"predicable\" \"no\")])\n+\n+(define_insn \"*movsf_internal_astep\"\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,f, Q,*r, f,*r,*r, m\")\n+\t(match_operand:SF 1 \"general_operand\"      \"fG,Q,fG,fG,*r,*r, m,*r\"))]\n+  \"TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n+  \"@\n+  mov %0 = %F1\n+  ldfs %0 = %1%P1\n+  stfs %0 = %F1%P0\n+  getf.s %0 = %F1\n+  setf.s %0 = %1\n+  mov %0 = %1\n+  ld4%O1 %0 = %1%P1\n+  st4%Q0 %0 = %1%P0\"\n+  [(set_attr \"type\" \"F,M,M,M,M,A,M,M\")\n+   (set_attr \"predicable\" \"no\")])\n+\n (define_insn \"*movsf_internal\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,f, Q,*r, f,*r,*r, m\")\n \t(match_operand:SF 1 \"general_operand\"      \"fG,Q,fG,fG,*r,*r, m,*r\"))]\n-  \"ia64_move_ok (operands[0], operands[1])\"\n+  \"! TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n   \"@\n   mov %0 = %F1\n   ldfs %0 = %1%P1\n@@ -413,10 +614,43 @@\n     operands[1] = force_reg (DFmode, operands[1]);\n }\")\n \n+;; Errata 72 workaround.\n+(define_insn \"*movdfcc_astep\"\n+  [(cond_exec\n+     (match_operator 2 \"predicate_operator\"\n+       [(match_operand:CC 3 \"register_operand\" \"c,c,c,c\")\n+        (const_int 0)])\n+     (set (match_operand:DF 0 \"register_operand\"  \"=f,*r, f,*r\")\n+\t  (match_operand:DF 1 \"nonmemory_operand\" \"fG,fG,*r,*r\")))]\n+  \"TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n+  \"@\n+  mov %0 = %F1\n+  getf.d %0 = %F1\n+  setf.d %0 = %1\n+  mov %0 = %1\"\n+  [(set_attr \"type\" \"F,M,M,A\")\n+   (set_attr \"predicable\" \"no\")])\n+\n+(define_insn \"*movdf_internal_astep\"\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f, Q,*r, f,*r,*r, m\")\n+\t(match_operand:DF 1 \"general_operand\"      \"fG,Q,fG,fG,*r,*r, m,*r\"))]\n+  \"TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n+  \"@\n+  mov %0 = %F1\n+  ldfd %0 = %1%P1\n+  stfd %0 = %F1%P0\n+  getf.d %0 = %F1\n+  setf.d %0 = %1\n+  mov %0 = %1\n+  ld8%O1 %0 = %1%P1\n+  st8%Q0 %0 = %1%P0\"\n+  [(set_attr \"type\" \"F,M,M,M,M,A,M,M\")\n+   (set_attr \"predicable\" \"no\")])\n+\n (define_insn \"*movdf_internal\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f, Q,*r, f,*r,*r, m\")\n \t(match_operand:DF 1 \"general_operand\"      \"fG,Q,fG,fG,*r,*r, m,*r\"))]\n-  \"ia64_move_ok (operands[0], operands[1])\"\n+  \"! TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n   \"@\n   mov %0 = %F1\n   ldfd %0 = %1%P1\n@@ -440,16 +674,40 @@\n }\")\n \n ;; ??? There's no easy way to mind volatile acquire/release semantics.\n+\n+;; Errata 72 workaround.\n+(define_insn \"*movxfcc_astep\"\n+  [(cond_exec\n+     (match_operator 2 \"predicate_operator\"\n+       [(match_operand:CC 3 \"register_operand\" \"c\")\n+        (const_int 0)])\n+     (set (match_operand:XF 0 \"register_operand\"  \"=f\")\n+\t  (match_operand:XF 1 \"nonmemory_operand\" \"fG\")))]\n+  \"TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n+  \"mov %0 = %F1\"\n+  [(set_attr \"type\" \"F\")\n+   (set_attr \"predicable\" \"no\")])\n+\n+(define_insn \"*movxf_internal_astep\"\n+  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,f, m\")\n+\t(match_operand:XF 1 \"general_operand\"      \"fG,m,fG\"))]\n+  \"TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n+  \"@\n+  mov %0 = %F1\n+  ldfe %0 = %1%P1\n+  stfe %0 = %F1%P0\"\n+  [(set_attr \"type\" \"F,M,M\")\n+   (set_attr \"predicable\" \"no\")])\n+\n (define_insn \"*movxf_internal\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,f, m\")\n \t(match_operand:XF 1 \"general_operand\"      \"fG,m,fG\"))]\n-  \"ia64_move_ok (operands[0], operands[1])\"\n+  \"! TARGET_A_STEP && ia64_move_ok (operands[0], operands[1])\"\n   \"@\n   mov %0 = %F1\n   ldfe %0 = %1%P1\n   stfe %0 = %F1%P0\"\n   [(set_attr \"type\" \"F,M,M\")])\n-\n \f\n ;; ::::::::::::::::::::\n ;; ::\n@@ -2441,7 +2699,24 @@\n ;; DImode if_then_else patterns.\n ;;\n \n-(define_insn_and_split \"*cmovdi_internal\"\n+;; Errata 72 workaround.\n+(define_insn \"*cmovdi_internal_astep\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\"\n+\t\t\t  \"=r,*f,Q,*b,r,*f,Q,*b,r,*f,Q,*b\")\n+\t(if_then_else:DI\n+\t  (match_operator:CC 4 \"predicate_operator\"\n+\t    [(match_operand:CC 1 \"register_operand\"\n+\t\t\t       \"c,c,c,c,c,c,c,c,c,c,c,c\")\n+\t     (const_int 0)])\n+\t  (match_operand:DI 2 \"general_operand\"\n+\t\t    \"0,0,0,0,ri*f*b,rO,*f,r,ri*f*b,rO,*f,r\")\n+\t  (match_operand:DI 3 \"general_operand\"\n+\t\t    \"ri*f*b,rO,*f,r,0,0,0,0,ri*f*b,rO,*f,r\")))]\n+  \"TARGET_A_STEP\"\n+  \"* abort ();\"\n+  [(set_attr \"predicable\" \"no\")])\n+\n+(define_insn \"*cmovdi_internal\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n \t\t\t  \"=r,m,*f,Q,*b,r,m,*f,Q,*b,r,m,*f,Q,*b\")\n \t(if_then_else:DI\n@@ -2453,8 +2728,18 @@\n \t\t    \"0,0,0,0,0,rim*f*b,rO,rOQ,*f,r,rim*f*b,rO,rOQ,*f,r\")\n \t  (match_operand:DI 3 \"general_operand\"\n \t\t    \"rim*f*b,rO,rOQ,*f,r,0,0,0,0,0,rim*f*b,rO,rOQ,*f,r\")))]\n-  \"\"\n-  \"#\"\n+  \"! TARGET_A_STEP\"\n+  \"* abort ();\"\n+  [(set_attr \"predicable\" \"no\")])\n+\n+(define_split\n+  [(set (match_operand 0 \"nonimmediate_operand\" \"\")\n+\t(if_then_else\n+\t  (match_operator:CC 4 \"predicate_operator\"\n+\t    [(match_operand:CC 1 \"register_operand\" \"\")\n+\t     (const_int 0)])\n+\t  (match_operand 2 \"general_operand\" \"\")\n+\t  (match_operand 3 \"general_operand\" \"\")))]\n   \"reload_completed\"\n   [(const_int 0)]\n   \"\n@@ -2476,8 +2761,7 @@\n       emit_insn (tmp);\n     }\n   DONE;\n-}\"\n-  [(set_attr \"predicable\" \"no\")])\n+}\")\n \n ;; Absolute value pattern.\n \n@@ -2534,7 +2818,21 @@\n ;; SImode if_then_else patterns.\n ;;\n \n-(define_insn_and_split \"*cmovsi_internal\"\n+(define_insn \"*cmovsi_internal_astep\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,*f,r,*f,r,*f\")\n+\t(if_then_else:SI\n+\t  (match_operator:CC 4 \"predicate_operator\"\n+\t    [(match_operand:CC 1 \"register_operand\" \"c,c,c,c,c,c\")\n+\t     (const_int 0)])\n+\t  (match_operand:SI 2 \"general_operand\"\n+\t\t    \"0,0,ri*f,rO,ri*f,rO\")\n+\t  (match_operand:SI 3 \"general_operand\"\n+\t\t    \"ri*f,rO,0,0,ri*f,rO\")))]\n+  \"TARGET_A_STEP\"\n+  \"* abort ();\"\n+  [(set_attr \"predicable\" \"no\")])\n+\n+(define_insn \"*cmovsi_internal\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,m,*f,r,m,*f,r,m,*f\")\n \t(if_then_else:SI\n \t  (match_operator:CC 4 \"predicate_operator\"\n@@ -2544,30 +2842,8 @@\n \t\t    \"0,0,0,rim*f,rO,rO,rim*f,rO,rO\")\n \t  (match_operand:SI 3 \"general_operand\"\n \t\t    \"rim*f,rO,rO,0,0,0,rim*f,rO,rO\")))]\n-  \"\"\n-  \"#\"\n-  \"reload_completed\"\n-  [(const_int 0)]\n-  \"\n-{\n-  rtx tmp;\n-  if (! rtx_equal_p (operands[0], operands[2]))\n-    {\n-      tmp = gen_rtx_SET (VOIDmode, operands[0], operands[2]);\n-      tmp = gen_rtx_COND_EXEC (VOIDmode, operands[4], tmp);\n-      emit_insn (tmp);\n-    }\n-  if (! rtx_equal_p (operands[0], operands[3]))\n-    {\n-      tmp = gen_rtx_fmt_ee (GET_CODE (operands[4]) == NE ? EQ : NE,\n-\t\t\t    CCmode, operands[1], const0_rtx);\n-      tmp = gen_rtx_COND_EXEC (VOIDmode, tmp,\n-\t\t\t       gen_rtx_SET (VOIDmode, operands[0],\n-\t\t\t\t\t    operands[3]));\n-      emit_insn (tmp);\n-    }\n-  DONE;\n-}\"\n+  \"! TARGET_A_STEP\"\n+  \"* abort ();\"\n   [(set_attr \"predicable\" \"no\")])\n \n (define_insn \"*abssi2_internal\""}]}