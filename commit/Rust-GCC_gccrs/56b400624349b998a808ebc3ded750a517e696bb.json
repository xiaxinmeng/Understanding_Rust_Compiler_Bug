{"sha": "56b400624349b998a808ebc3ded750a517e696bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZiNDAwNjI0MzQ5Yjk5OGE4MDhlYmMzZGVkNzUwYTUxN2U2OTZiYg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2015-07-16T09:48:20Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2015-07-16T09:48:20Z"}, "message": "Give struct param_aa_atatus and struct func_body_info an ipa_ prefix.\n\n2015-07-16  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-prop.h (param_aa_status): Rename to ipa_param_aa_status.  Adjust\n\tall uses.  Fix two typos in its general comment.\n\t(func_body_info): Rename to ipa_func_body_info.  Adjust all uses.\n\nFrom-SVN: r225867", "tree": {"sha": "5b5cc325877cdf22a400393b822592970f48472a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b5cc325877cdf22a400393b822592970f48472a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56b400624349b998a808ebc3ded750a517e696bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b400624349b998a808ebc3ded750a517e696bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56b400624349b998a808ebc3ded750a517e696bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b400624349b998a808ebc3ded750a517e696bb/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6de59c8aaa0b850738ae6f5413ef81a1720a1f06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6de59c8aaa0b850738ae6f5413ef81a1720a1f06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6de59c8aaa0b850738ae6f5413ef81a1720a1f06"}], "stats": {"total": 95, "additions": 51, "deletions": 44}, "files": [{"sha": "3b857242374f7d789b8c778a82062f03883d99b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b400624349b998a808ebc3ded750a517e696bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b400624349b998a808ebc3ded750a517e696bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56b400624349b998a808ebc3ded750a517e696bb", "patch": "@@ -1,3 +1,9 @@\n+2015-07-16  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-prop.h (param_aa_status): Rename to ipa_param_aa_status.  Adjust\n+\tall uses.  Fix two typos in its general comment.\n+\t(func_body_info): Rename to ipa_func_body_info.  Adjust all uses.\n+\n 2015-07-16  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \t* config/i386/linux-common.h (LINK_MPX): New."}, {"sha": "5a7a75add4d9e747d36df867c8f419284b401ae6", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b400624349b998a808ebc3ded750a517e696bb/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b400624349b998a808ebc3ded750a517e696bb/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=56b400624349b998a808ebc3ded750a517e696bb", "patch": "@@ -1572,7 +1572,7 @@ unmodified_parm (gimple stmt, tree op)\n    loaded.  */\n \n static bool\n-unmodified_parm_or_parm_agg_item (struct func_body_info *fbi,\n+unmodified_parm_or_parm_agg_item (struct ipa_func_body_info *fbi,\n \t\t\t\t  gimple stmt, tree op, int *index_p,\n \t\t\t\t  struct agg_position_info *aggpos)\n {\n@@ -1743,7 +1743,7 @@ eliminated_by_inlining_prob (gimple stmt)\n    predicates to the CFG edges.   */\n \n static void\n-set_cond_stmt_execution_predicate (struct func_body_info *fbi,\n+set_cond_stmt_execution_predicate (struct ipa_func_body_info *fbi,\n \t\t\t\t   struct inline_summary *summary,\n \t\t\t\t   basic_block bb)\n {\n@@ -1825,7 +1825,7 @@ set_cond_stmt_execution_predicate (struct func_body_info *fbi,\n    predicates to the CFG edges.   */\n \n static void\n-set_switch_stmt_execution_predicate (struct func_body_info *fbi,\n+set_switch_stmt_execution_predicate (struct ipa_func_body_info *fbi,\n \t\t\t\t     struct inline_summary *summary,\n \t\t\t\t     basic_block bb)\n {\n@@ -1886,7 +1886,7 @@ set_switch_stmt_execution_predicate (struct func_body_info *fbi,\n    which it is executable.  */\n \n static void\n-compute_bb_predicates (struct func_body_info *fbi,\n+compute_bb_predicates (struct ipa_func_body_info *fbi,\n \t\t       struct cgraph_node *node,\n \t\t       struct inline_summary *summary)\n {\n@@ -2029,7 +2029,7 @@ will_be_nonconstant_expr_predicate (struct ipa_node_params *info,\n    a compile time constant.  */\n \n static struct predicate\n-will_be_nonconstant_predicate (struct func_body_info *fbi,\n+will_be_nonconstant_predicate (struct ipa_func_body_info *fbi,\n \t\t\t       struct inline_summary *summary,\n \t\t\t       gimple stmt,\n \t\t\t       vec<predicate_t> nonconstant_names)\n@@ -2479,7 +2479,7 @@ estimate_function_body_sizes (struct cgraph_node *node, bool early)\n   int freq;\n   struct inline_summary *info = inline_summaries->get (node);\n   struct predicate bb_predicate;\n-  struct func_body_info fbi;\n+  struct ipa_func_body_info fbi;\n   vec<predicate_t> nonconstant_names = vNULL;\n   int nblocks, n;\n   int *order;"}, {"sha": "34e482676dc9a4a2bd1cd535fa5c445f495e67e9", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 33, "deletions": 32, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b400624349b998a808ebc3ded750a517e696bb/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b400624349b998a808ebc3ded750a517e696bb/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=56b400624349b998a808ebc3ded750a517e696bb", "patch": "@@ -479,7 +479,7 @@ ipa_set_ancestor_jf (struct ipa_jump_func *jfunc, HOST_WIDE_INT offset,\n    of this function body.  */\n \n static struct ipa_bb_info *\n-ipa_get_bb_info (struct func_body_info *fbi, basic_block bb)\n+ipa_get_bb_info (struct ipa_func_body_info *fbi, basic_block bb)\n {\n   gcc_checking_assert (fbi);\n   return &fbi->bb_infos[bb->index];\n@@ -754,7 +754,7 @@ mark_modified (ao_ref *ao ATTRIBUTE_UNUSED, tree vdef ATTRIBUTE_UNUSED,\n    should really just start giving up.  */\n \n static bool\n-aa_overwalked (struct func_body_info *fbi)\n+aa_overwalked (struct ipa_func_body_info *fbi)\n {\n   gcc_checking_assert (fbi);\n   return fbi->aa_walked > (unsigned) PARAM_VALUE (PARAM_IPA_MAX_AA_STEPS);\n@@ -763,8 +763,8 @@ aa_overwalked (struct func_body_info *fbi)\n /* Find the nearest valid aa status for parameter specified by INDEX that\n    dominates BB.  */\n \n-static struct param_aa_status *\n-find_dominating_aa_status (struct func_body_info *fbi, basic_block bb,\n+static struct ipa_param_aa_status *\n+find_dominating_aa_status (struct ipa_func_body_info *fbi, basic_block bb,\n \t\t\t   int index)\n {\n   while (true)\n@@ -783,21 +783,21 @@ find_dominating_aa_status (struct func_body_info *fbi, basic_block bb,\n    structures and/or intialize the result with a dominating description as\n    necessary.  */\n \n-static struct param_aa_status *\n-parm_bb_aa_status_for_bb (struct func_body_info *fbi, basic_block bb,\n+static struct ipa_param_aa_status *\n+parm_bb_aa_status_for_bb (struct ipa_func_body_info *fbi, basic_block bb,\n \t\t\t  int index)\n {\n   gcc_checking_assert (fbi);\n   struct ipa_bb_info *bi = ipa_get_bb_info (fbi, bb);\n   if (bi->param_aa_statuses.is_empty ())\n     bi->param_aa_statuses.safe_grow_cleared (fbi->param_count);\n-  struct param_aa_status *paa = &bi->param_aa_statuses[index];\n+  struct ipa_param_aa_status *paa = &bi->param_aa_statuses[index];\n   if (!paa->valid)\n     {\n       gcc_checking_assert (!paa->parm_modified\n \t\t\t   && !paa->ref_modified\n \t\t\t   && !paa->pt_modified);\n-      struct param_aa_status *dom_paa;\n+      struct ipa_param_aa_status *dom_paa;\n       dom_paa = find_dominating_aa_status (fbi, bb, index);\n       if (dom_paa)\n \t*paa = *dom_paa;\n@@ -814,10 +814,10 @@ parm_bb_aa_status_for_bb (struct func_body_info *fbi, basic_block bb,\n    gathered but do not survive the summary building stage.  */\n \n static bool\n-parm_preserved_before_stmt_p (struct func_body_info *fbi, int index,\n+parm_preserved_before_stmt_p (struct ipa_func_body_info *fbi, int index,\n \t\t\t      gimple stmt, tree parm_load)\n {\n-  struct param_aa_status *paa;\n+  struct ipa_param_aa_status *paa;\n   bool modified = false;\n   ao_ref refd;\n \n@@ -853,7 +853,7 @@ parm_preserved_before_stmt_p (struct func_body_info *fbi, int index,\n    modified.  Otherwise return -1.  */\n \n static int\n-load_from_unmodified_param (struct func_body_info *fbi,\n+load_from_unmodified_param (struct ipa_func_body_info *fbi,\n \t\t\t    vec<ipa_param_descriptor> descriptors,\n \t\t\t    gimple stmt)\n {\n@@ -880,10 +880,10 @@ load_from_unmodified_param (struct func_body_info *fbi,\n    before reaching statement STMT.  */\n \n static bool\n-parm_ref_data_preserved_p (struct func_body_info *fbi,\n+parm_ref_data_preserved_p (struct ipa_func_body_info *fbi,\n \t\t\t   int index, gimple stmt, tree ref)\n {\n-  struct param_aa_status *paa;\n+  struct ipa_param_aa_status *paa;\n   bool modified = false;\n   ao_ref refd;\n \n@@ -919,7 +919,7 @@ parm_ref_data_preserved_p (struct func_body_info *fbi,\n    CALL into which it is passed.  FBI describes the function body.  */\n \n static bool\n-parm_ref_data_pass_through_p (struct func_body_info *fbi, int index,\n+parm_ref_data_pass_through_p (struct ipa_func_body_info *fbi, int index,\n \t\t\t      gimple call, tree parm)\n {\n   bool modified = false;\n@@ -933,8 +933,9 @@ parm_ref_data_pass_through_p (struct func_body_info *fbi, int index,\n       || aa_overwalked (fbi))\n     return false;\n \n-  struct param_aa_status *paa = parm_bb_aa_status_for_bb (fbi, gimple_bb (call),\n-\t\t\t\t\t\t\t  index);\n+  struct ipa_param_aa_status *paa = parm_bb_aa_status_for_bb (fbi,\n+\t\t\t\t\t\t\t      gimple_bb (call),\n+\t\t\t\t\t\t\t      index);\n   if (paa->pt_modified)\n     return false;\n \n@@ -958,7 +959,7 @@ parm_ref_data_pass_through_p (struct func_body_info *fbi, int index,\n    reference respectively.  */\n \n bool\n-ipa_load_from_parm_agg (struct func_body_info *fbi,\n+ipa_load_from_parm_agg (struct ipa_func_body_info *fbi,\n \t\t\tvec<ipa_param_descriptor> descriptors,\n \t\t\tgimple stmt, tree op, int *index_p,\n \t\t\tHOST_WIDE_INT *offset_p, HOST_WIDE_INT *size_p,\n@@ -1083,7 +1084,7 @@ ipa_load_from_parm_agg (struct func_body_info *fbi,\n    only needed for intraprocedural analysis.  */\n \n static void\n-compute_complex_assign_jump_func (struct func_body_info *fbi,\n+compute_complex_assign_jump_func (struct ipa_func_body_info *fbi,\n \t\t\t\t  struct ipa_node_params *info,\n \t\t\t\t  struct ipa_jump_func *jfunc,\n \t\t\t\t  gcall *call, gimple stmt, tree name,\n@@ -1225,7 +1226,7 @@ get_ancestor_addr_info (gimple assign, tree *obj_p, HOST_WIDE_INT *offset)\n      return D.1879_6;  */\n \n static void\n-compute_complex_ancestor_jump_func (struct func_body_info *fbi,\n+compute_complex_ancestor_jump_func (struct ipa_func_body_info *fbi,\n \t\t\t\t    struct ipa_node_params *info,\n \t\t\t\t    struct ipa_jump_func *jfunc,\n \t\t\t\t    gcall *call, gphi *phi)\n@@ -1607,7 +1608,7 @@ ipa_get_callee_param_type (struct cgraph_edge *e, int i)\n    to this callsite.  */\n \n static void\n-ipa_compute_jump_functions_for_edge (struct func_body_info *fbi,\n+ipa_compute_jump_functions_for_edge (struct ipa_func_body_info *fbi,\n \t\t\t\t     struct cgraph_edge *cs)\n {\n   struct ipa_node_params *info = IPA_NODE_REF (cs->caller);\n@@ -1730,7 +1731,7 @@ ipa_compute_jump_functions_for_edge (struct func_body_info *fbi,\n    from BB.  */\n \n static void\n-ipa_compute_jump_functions_for_bb (struct func_body_info *fbi, basic_block bb)\n+ipa_compute_jump_functions_for_bb (struct ipa_func_body_info *fbi, basic_block bb)\n {\n   struct ipa_bb_info *bi = ipa_get_bb_info (fbi, bb);\n   int i;\n@@ -1893,7 +1894,7 @@ ipa_note_param_call (struct cgraph_node *node, int param_index,\n    passed by value or reference.  */\n \n static void\n-ipa_analyze_indirect_call_uses (struct func_body_info *fbi, gcall *call,\n+ipa_analyze_indirect_call_uses (struct ipa_func_body_info *fbi, gcall *call,\n \t\t\t\ttree target)\n {\n   struct ipa_node_params *info = fbi->info;\n@@ -2031,7 +2032,7 @@ ipa_analyze_indirect_call_uses (struct func_body_info *fbi, gcall *call,\n    statement.  */\n \n static void\n-ipa_analyze_virtual_call_uses (struct func_body_info *fbi,\n+ipa_analyze_virtual_call_uses (struct ipa_func_body_info *fbi,\n \t\t\t       gcall *call, tree target)\n {\n   tree obj = OBJ_TYPE_REF_OBJECT (target);\n@@ -2088,7 +2089,7 @@ ipa_analyze_virtual_call_uses (struct func_body_info *fbi,\n    containing intermediate information about each formal parameter.  */\n \n static void\n-ipa_analyze_call_uses (struct func_body_info *fbi, gcall *call)\n+ipa_analyze_call_uses (struct ipa_func_body_info *fbi, gcall *call)\n {\n   tree target = gimple_call_fn (call);\n \n@@ -2134,7 +2135,7 @@ ipa_analyze_call_uses (struct func_body_info *fbi, gcall *call)\n    formal parameters are called.  */\n \n static void\n-ipa_analyze_stmt_uses (struct func_body_info *fbi, gimple stmt)\n+ipa_analyze_stmt_uses (struct ipa_func_body_info *fbi, gimple stmt)\n {\n   if (is_gimple_call (stmt))\n     ipa_analyze_call_uses (fbi, as_a <gcall *> (stmt));\n@@ -2167,7 +2168,7 @@ visit_ref_for_mod_analysis (gimple, tree op, tree, void *data)\n    the function being analyzed.  */\n \n static void\n-ipa_analyze_params_uses_in_bb (struct func_body_info *fbi, basic_block bb)\n+ipa_analyze_params_uses_in_bb (struct ipa_func_body_info *fbi, basic_block bb)\n {\n   gimple_stmt_iterator gsi;\n   for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -2249,13 +2250,13 @@ free_ipa_bb_info (struct ipa_bb_info *bi)\n class analysis_dom_walker : public dom_walker\n {\n public:\n-  analysis_dom_walker (struct func_body_info *fbi)\n+  analysis_dom_walker (struct ipa_func_body_info *fbi)\n     : dom_walker (CDI_DOMINATORS), m_fbi (fbi) {}\n \n   virtual void before_dom_children (basic_block);\n \n private:\n-  struct func_body_info *m_fbi;\n+  struct ipa_func_body_info *m_fbi;\n };\n \n void\n@@ -2272,7 +2273,7 @@ analysis_dom_walker::before_dom_children (basic_block bb)\n void\n ipa_analyze_node (struct cgraph_node *node)\n {\n-  struct func_body_info fbi;\n+  struct ipa_func_body_info fbi;\n   struct ipa_node_params *info;\n \n   ipa_check_create_node_params ();\n@@ -5076,7 +5077,7 @@ adjust_agg_replacement_values (struct cgraph_node *node,\n class ipcp_modif_dom_walker : public dom_walker\n {\n public:\n-  ipcp_modif_dom_walker (struct func_body_info *fbi,\n+  ipcp_modif_dom_walker (struct ipa_func_body_info *fbi,\n \t\t\t vec<ipa_param_descriptor> descs,\n \t\t\t struct ipa_agg_replacement_value *av,\n \t\t\t bool *sc, bool *cc)\n@@ -5086,7 +5087,7 @@ class ipcp_modif_dom_walker : public dom_walker\n   virtual void before_dom_children (basic_block);\n \n private:\n-  struct func_body_info *m_fbi;\n+  struct ipa_func_body_info *m_fbi;\n   vec<ipa_param_descriptor> m_descriptors;\n   struct ipa_agg_replacement_value *m_aggval;\n   bool *m_something_changed, *m_cfg_changed;\n@@ -5244,7 +5245,7 @@ unsigned int\n ipcp_transform_function (struct cgraph_node *node)\n {\n   vec<ipa_param_descriptor> descriptors = vNULL;\n-  struct func_body_info fbi;\n+  struct ipa_func_body_info fbi;\n   struct ipa_agg_replacement_value *aggval;\n   int param_count;\n   bool cfg_changed = false, something_changed = false;"}, {"sha": "47d31ac921a55651b2a71bc0e6098c43da28f7f6", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b400624349b998a808ebc3ded750a517e696bb/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b400624349b998a808ebc3ded750a517e696bb/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=56b400624349b998a808ebc3ded750a517e696bb", "patch": "@@ -338,10 +338,10 @@ struct ipa_node_params\n \n /* Intermediate information that we get from alias analysis about a particular\n    parameter in a particular basic_block.  When a parameter or the memory it\n-   references is marked modified, we use that information in all dominatd\n-   blocks without cosulting alias analysis oracle.  */\n+   references is marked modified, we use that information in all dominated\n+   blocks without consulting alias analysis oracle.  */\n \n-struct param_aa_status\n+struct ipa_param_aa_status\n {\n   /* Set when this structure contains meaningful information.  If not, the\n      structure describing a dominating BB should be used instead.  */\n@@ -363,13 +363,13 @@ struct ipa_bb_info\n   /* Call graph edges going out of this BB.  */\n   vec<cgraph_edge *> cg_edges;\n   /* Alias analysis statuses of each formal parameter at this bb.  */\n-  vec<param_aa_status> param_aa_statuses;\n+  vec<ipa_param_aa_status> param_aa_statuses;\n };\n \n /* Structure with global information that is only used when looking at function\n    body. */\n \n-struct func_body_info\n+struct ipa_func_body_info\n {\n   /* The node that is being analyzed.  */\n   cgraph_node *node;\n@@ -636,7 +636,7 @@ void ipa_analyze_node (struct cgraph_node *);\n /* Aggregate jump function related functions.  */\n tree ipa_find_agg_cst_for_param (struct ipa_agg_jump_function *, HOST_WIDE_INT,\n \t\t\t\t bool);\n-bool ipa_load_from_parm_agg (struct func_body_info *,\n+bool ipa_load_from_parm_agg (struct ipa_func_body_info *,\n \t\t\t     vec<ipa_param_descriptor>, gimple, tree, int *,\n \t\t\t     HOST_WIDE_INT *, HOST_WIDE_INT *, bool *);\n "}]}