{"sha": "6d05585b7582f089450927448e7659f62d2bdfab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQwNTU4NWI3NTgyZjA4OTQ1MDkyNzQ0OGU3NjU5ZjYyZDJiZGZhYg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-04-06T05:38:34Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-04-06T05:38:34Z"}, "message": "re PR c++/20734 (rejects valid pointer to member)\n\n\tPR c++/20734\n\t* cp-tree.def (OFFSET_REF): Correct comments.\n\t* init.c (build_offset_ref): Remove misleading comment.\n\t* typeck.c (build_unary_op): Handle pointer-to-member creation\n\there, rather than ...\n\t(unary_complex_lvalue): ... here.\n\n\tPR c++/20734\n\t* g++.dg/template/ptrmem13.C: New test.\n\nFrom-SVN: r97696", "tree": {"sha": "8ed15eb7577a955c2551d3817fd8ac67763a4022", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ed15eb7577a955c2551d3817fd8ac67763a4022"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d05585b7582f089450927448e7659f62d2bdfab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d05585b7582f089450927448e7659f62d2bdfab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d05585b7582f089450927448e7659f62d2bdfab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d05585b7582f089450927448e7659f62d2bdfab/comments", "author": null, "committer": null, "parents": [{"sha": "05b205e83002ac5988c22383846fe318b8c1a4fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05b205e83002ac5988c22383846fe318b8c1a4fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05b205e83002ac5988c22383846fe318b8c1a4fc"}], "stats": {"total": 95, "additions": 42, "deletions": 53}, "files": [{"sha": "00f2aa1db487c714b1a41e27ad626f0e9831f366", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d05585b7582f089450927448e7659f62d2bdfab/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d05585b7582f089450927448e7659f62d2bdfab/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=6d05585b7582f089450927448e7659f62d2bdfab", "patch": "@@ -31,10 +31,8 @@ Boston, MA 02111-1307, USA.  */\n       BASELINK, or TEMPLATE_ID_EXPR (corresponding to `m').\n \n       The expression is a pointer-to-member if its address is taken,\n-      but simply denotes a member of the object if its address isnot\n-      taken.  In the latter case, resolve_offset_ref is used to\n-      convert it to a representation of the member referred to by the\n-      OFFSET_REF.\n+      but simply denotes a member of the object if its address is not\n+      taken.\n       \n       This form is only used during the parsing phase; once semantic\n       analysis has taken place they are eliminated."}, {"sha": "726309acc6a092baee72b851e58b2e2d808f8791", "filename": "gcc/cp/init.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d05585b7582f089450927448e7659f62d2bdfab/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d05585b7582f089450927448e7659f62d2bdfab/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=6d05585b7582f089450927448e7659f62d2bdfab", "patch": "@@ -1551,9 +1551,6 @@ build_offset_ref (tree type, tree name, bool address_p)\n       return member;\n     }\n \n-  /* In member functions, the form `type::name' is no longer\n-     equivalent to `this->type::name', at least not until\n-     resolve_offset_ref.  */\n   member = build2 (OFFSET_REF, TREE_TYPE (member), decl, member);\n   PTRMEM_OK_P (member) = 1;\n   return member;"}, {"sha": "272dc86891fc18d89e540614c3051074acb0dd11", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 24, "deletions": 46, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d05585b7582f089450927448e7659f62d2bdfab/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d05585b7582f089450927448e7659f62d2bdfab/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=6d05585b7582f089450927448e7659f62d2bdfab", "patch": "@@ -4026,6 +4026,29 @@ build_unary_op (enum tree_code code, tree xarg, int noconvert)\n \t  arg = OVL_CURRENT (arg);\n \t  break;\n \n+\tcase OFFSET_REF:\n+\t  /* Turn a reference to a non-static data member into a\n+\t     pointer-to-member.  */\n+\t  {\n+\t    tree type;\n+\t    tree t;\n+\n+\t    if (!PTRMEM_OK_P (arg))\n+\t      return build_unary_op (code, arg, 0);\n+\t    \n+\t    t = TREE_OPERAND (arg, 1);\n+\t    if (TREE_CODE (TREE_TYPE (t)) == REFERENCE_TYPE)\n+\t      {\n+\t\terror (\"cannot create pointer to reference member %qD\", t);\n+\t\treturn error_mark_node;\n+\t      }\n+\t    \n+\t    type = build_ptrmem_type (context_for_name_lookup (t), \n+\t\t\t\t      TREE_TYPE (t));\n+\t    t = make_ptrmem_cst (type, TREE_OPERAND (arg, 1));\n+\t    return t;\n+\t  }\n+\n \tdefault:\n \t  break;\n \t}\n@@ -4182,52 +4205,7 @@ unary_complex_lvalue (enum tree_code code, tree arg)\n   if (TREE_CODE (TREE_TYPE (arg)) == FUNCTION_TYPE\n       || TREE_CODE (TREE_TYPE (arg)) == METHOD_TYPE\n       || TREE_CODE (arg) == OFFSET_REF)\n-    {\n-      tree t;\n-\n-      gcc_assert (TREE_CODE (arg) != SCOPE_REF);\n-\n-      if (TREE_CODE (arg) != OFFSET_REF)\n-\treturn 0;\n-\n-      t = TREE_OPERAND (arg, 1);\n-\n-      /* Check all this code for right semantics.  */\t\n-      if (TREE_CODE (t) == FUNCTION_DECL)\n-\t{\n-\t  if (DECL_DESTRUCTOR_P (t))\n-\t    error (\"taking address of destructor\");\n-\t  return build_unary_op (ADDR_EXPR, t, 0);\n-\t}\n-      if (TREE_CODE (t) == VAR_DECL)\n-\treturn build_unary_op (ADDR_EXPR, t, 0);\n-      else\n-\t{\n-\t  tree type;\n-\n-\t  if (TREE_OPERAND (arg, 0)\n-\t      && ! is_dummy_object (TREE_OPERAND (arg, 0))\n-\t      && TREE_CODE (t) != FIELD_DECL)\n-\t    {\n-\t      error (\"taking address of bound pointer-to-member expression\");\n-\t      return error_mark_node;\n-\t    }\n-\t  if (!PTRMEM_OK_P (arg))\n-\t    return build_unary_op (code, arg, 0);\n-\t  \n-\t  if (TREE_CODE (TREE_TYPE (t)) == REFERENCE_TYPE)\n-\t    {\n-\t      error (\"cannot create pointer to reference member %qD\", t);\n-\t      return error_mark_node;\n-\t    }\n-\n-\t  type = build_ptrmem_type (context_for_name_lookup (t), \n-\t\t\t\t    TREE_TYPE (t));\n-\t  t = make_ptrmem_cst (type, TREE_OPERAND (arg, 1));\n-\t  return t;\n-\t}\n-    }\n-\n+    return NULL_TREE;\n   \n   /* We permit compiler to make function calls returning\n      objects of aggregate type look like lvalues.  */"}, {"sha": "3c3678a2523f0ae6a44e6c22f278db9de4b59ae9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d05585b7582f089450927448e7659f62d2bdfab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d05585b7582f089450927448e7659f62d2bdfab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d05585b7582f089450927448e7659f62d2bdfab", "patch": "@@ -1,3 +1,8 @@\n+2005-04-05  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/20734\n+\t* g++.dg/template/ptrmem13.C: New test.\n+\n 2005-04-05  Per Bothner  <per@bothner.com>\n \n \t* lib/gcc.exp: Always add -fno-show-column, for now."}, {"sha": "84374ea05fc0a05842c25262ab6daac9f7e9feec", "filename": "gcc/testsuite/g++.dg/template/ptrmem13.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d05585b7582f089450927448e7659f62d2bdfab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d05585b7582f089450927448e7659f62d2bdfab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem13.C?ref=6d05585b7582f089450927448e7659f62d2bdfab", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/20734\n+\n+struct A;\n+void blah(int A::*);\n+struct A{\n+  int a;\n+};\n+template<typename T>\n+void hoho(){\n+  blah(&A::a);\n+}"}]}