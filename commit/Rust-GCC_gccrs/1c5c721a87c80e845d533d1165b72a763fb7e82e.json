{"sha": "1c5c721a87c80e845d533d1165b72a763fb7e82e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM1YzcyMWE4N2M4MGU4NDVkNTMzZDExNjViNzJhNzYzZmI3ZTgyZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-23T09:42:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-23T09:42:18Z"}, "message": "[multiple changes]\n\n2009-07-23  Sergey Rybin  <rybin@adacore.com>\n\n\t* gnat_ugn.texi: Update doc on Misnamed_Identifiers rule.\n\n2009-07-23  Javier Miranda  <miranda@adacore.com>\n\n\t* sinfo.ads, sinfo.adb (SCIL_Entity/Set_SCIL_Entity): new subprograms\n\t(Entity/Set_Entity): not available in N_Null_Statement nodes\n\t(Is_Scil_Node): renamed as Is_SCIL_Node\n\t(Scil_Nkind): renamed as SCIL_Nkind\n\t(Scil_Related_Node): renamed as SCIL_Related_Node\n\t(Scil_Target_Prim): renamed as SCIL_Target_Prim\n\t(Set_Is_Scil_Node): Renamed as Set_Is_SCIL_Node\n\t(Set_Scil_Related_Node): Renamed as Set_SCIL_Related_Node\n\t(Set_Scil_Target_Prim): Renamed as Set_SCIL_Target_Prim\n\tUpdate documentation\n\t* exp_disp.ads (Scil_Node_Kind): Renamed as SCIL_Node_Kind\n\t(Get_Scil_Node_Kind): Renamed as Get_SCIL_Node_Kind\n\t(New_Scil_Node): Renamed as New_SCIL_Node\n\t* exp_disp.adb Update all occurrences of New_Scil_Node to New_SCIL_Node.\n\t(Get_Scil_Node_Kind): Renamed as Get_SCIL_Node_Kind\n\t(New_Scil_Node): Renamed as New_SCIL_Node\n\t* exp_ch3.adb Update occurrence of New_Scil_Node to New_SCIL_Node.\n\n2009-07-23  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb: No_Return is an Ada 2005 pragma, not a GNAT pragma\n\t* snames.ads-tmpl: No_Return is an Ada 2005 pragma, not a GNAT pragma\n\t* einfo.adb: Minor reformatting\n\nFrom-SVN: r149984", "tree": {"sha": "62678999d0386027b5057a479d41c46a178078ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62678999d0386027b5057a479d41c46a178078ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c5c721a87c80e845d533d1165b72a763fb7e82e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c5c721a87c80e845d533d1165b72a763fb7e82e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c5c721a87c80e845d533d1165b72a763fb7e82e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c5c721a87c80e845d533d1165b72a763fb7e82e/comments", "author": null, "committer": null, "parents": [{"sha": "eaa826f822541a6059d1f633b4299a81079c160b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaa826f822541a6059d1f633b4299a81079c160b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaa826f822541a6059d1f633b4299a81079c160b"}], "stats": {"total": 263, "additions": 151, "deletions": 112}, "files": [{"sha": "1432873f6f64eaf943e3ad37d057fc7f387c8374", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c5c721a87c80e845d533d1165b72a763fb7e82e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c5c721a87c80e845d533d1165b72a763fb7e82e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1c5c721a87c80e845d533d1165b72a763fb7e82e", "patch": "@@ -1,3 +1,33 @@\n+2009-07-23  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* gnat_ugn.texi: Update doc on Misnamed_Identifiers rule.\n+\n+2009-07-23  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sinfo.ads, sinfo.adb (SCIL_Entity/Set_SCIL_Entity): new subprograms\n+\t(Entity/Set_Entity): not available in N_Null_Statement nodes\n+\t(Is_Scil_Node): renamed as Is_SCIL_Node\n+\t(Scil_Nkind): renamed as SCIL_Nkind\n+\t(Scil_Related_Node): renamed as SCIL_Related_Node\n+\t(Scil_Target_Prim): renamed as SCIL_Target_Prim\n+\t(Set_Is_Scil_Node): Renamed as Set_Is_SCIL_Node\n+\t(Set_Scil_Related_Node): Renamed as Set_SCIL_Related_Node\n+\t(Set_Scil_Target_Prim): Renamed as Set_SCIL_Target_Prim\n+\tUpdate documentation\n+\t* exp_disp.ads (Scil_Node_Kind): Renamed as SCIL_Node_Kind\n+\t(Get_Scil_Node_Kind): Renamed as Get_SCIL_Node_Kind\n+\t(New_Scil_Node): Renamed as New_SCIL_Node\n+\t* exp_disp.adb Update all occurrences of New_Scil_Node to New_SCIL_Node.\n+\t(Get_Scil_Node_Kind): Renamed as Get_SCIL_Node_Kind\n+\t(New_Scil_Node): Renamed as New_SCIL_Node\n+\t* exp_ch3.adb Update occurrence of New_Scil_Node to New_SCIL_Node.\n+\n+2009-07-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb: No_Return is an Ada 2005 pragma, not a GNAT pragma\n+\t* snames.ads-tmpl: No_Return is an Ada 2005 pragma, not a GNAT pragma\n+\t* einfo.adb: Minor reformatting\n+\n 2009-07-23  Robert Dewar  <dewar@adacore.com>\n \n \t* checks.adb (Apply_Arithmetic_Overflow_Check): Add comments"}, {"sha": "fdc9d276c6a3493946bc01f5bc2ad071ba8cb606", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c5c721a87c80e845d533d1165b72a763fb7e82e/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c5c721a87c80e845d533d1165b72a763fb7e82e/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=1c5c721a87c80e845d533d1165b72a763fb7e82e", "patch": "@@ -49,8 +49,8 @@ package body Einfo is\n    -- Usage of Fields in Defining Entity Nodes --\n    ----------------------------------------------\n \n-   --  Four of these fields are defined in Sinfo, since they in are the\n-   --  base part of the node. The access routines for these fields and the\n+   --  Four of these fields are defined in Sinfo, since they in are the base\n+   --  part of the node. The access routines for these four fields and the\n    --  corresponding set procedures are defined in Sinfo. These fields are\n    --  present in all entities. Note that Homonym is also in the base part of\n    --  the node, but has access routines that are more properly part of Einfo,\n@@ -665,7 +665,8 @@ package body Einfo is\n    begin\n       pragma Assert\n         (Ekind (Id) = E_Record_Subtype\n-         or else Ekind (Id) = E_Class_Wide_Subtype);\n+           or else\n+         Ekind (Id) = E_Class_Wide_Subtype);\n       return Node16 (Id);\n    end Cloned_Subtype;\n "}, {"sha": "6e21387c3ec350811cd9feb2c92dfab886d1b6a7", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c5c721a87c80e845d533d1165b72a763fb7e82e/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c5c721a87c80e845d533d1165b72a763fb7e82e/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=1c5c721a87c80e845d533d1165b72a763fb7e82e", "patch": "@@ -2328,8 +2328,8 @@ package body Exp_Ch3 is\n \n             if Generate_SCIL then\n                Prepend_To (Init_Tags_List,\n-                 New_Scil_Node\n-                   (Nkind        => IP_Tag_Init,\n+                 New_SCIL_Node\n+                   (SN_Kind      => IP_Tag_Init,\n                     Related_Node => First (Init_Tags_List),\n                     Entity       => Rec_Type));\n             end if;"}, {"sha": "df23c891f2734e7ba91785a64e0574506b917cff", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 34, "deletions": 32, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c5c721a87c80e845d533d1165b72a763fb7e82e/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c5c721a87c80e845d533d1165b72a763fb7e82e/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=1c5c721a87c80e845d533d1165b72a763fb7e82e", "patch": "@@ -647,8 +647,8 @@ package body Exp_Disp is\n \n       if Generate_SCIL then\n          Insert_Action (Call_Node,\n-           New_Scil_Node\n-             (Nkind        => Dispatching_Call,\n+           New_SCIL_Node\n+             (SN_Kind      => Dispatching_Call,\n               Related_Node => Call_Node,\n               Entity       => Typ,\n               Target_Prim  => Subp));\n@@ -1608,15 +1608,15 @@ package body Exp_Disp is\n    end Expand_Interface_Thunk;\n \n    ------------------------\n-   -- Get_Scil_Node_Kind --\n+   -- Get_SCIL_Node_Kind --\n    ------------------------\n \n-   function Get_Scil_Node_Kind (Node : Node_Id) return Scil_Node_Kind is\n+   function Get_SCIL_Node_Kind (Node : Node_Id) return SCIL_Node_Kind is\n    begin\n       pragma Assert\n-        (Nkind (Node) = N_Null_Statement and then Is_Scil_Node (Node));\n-      return Scil_Node_Kind'Val (UI_To_Int (Scil_Nkind (Node)));\n-   end Get_Scil_Node_Kind;\n+        (Nkind (Node) = N_Null_Statement and then Is_SCIL_Node (Node));\n+      return SCIL_Node_Kind'Val (UI_To_Int (SCIL_Nkind (Node)));\n+   end Get_SCIL_Node_Kind;\n \n    ------------\n    -- Has_DT --\n@@ -4248,8 +4248,8 @@ package body Exp_Disp is\n \n             if Generate_SCIL then\n                Insert_Before (Last (Result),\n-                 New_Scil_Node\n-                   (Nkind        => Dispatch_Table_Object_Init,\n+                 New_SCIL_Node\n+                   (SN_Kind      => Dispatch_Table_Object_Init,\n                     Related_Node => Last (Result),\n                     Entity       => Typ));\n             end if;\n@@ -4285,8 +4285,8 @@ package body Exp_Disp is\n \n             if Generate_SCIL then\n                Insert_Before (Last (Result),\n-                 New_Scil_Node\n-                   (Nkind        => Dispatch_Table_Tag_Init,\n+                 New_SCIL_Node\n+                   (SN_Kind      => Dispatch_Table_Tag_Init,\n                     Related_Node => Last (Result),\n                     Entity       => Typ));\n             end if;\n@@ -4325,8 +4325,8 @@ package body Exp_Disp is\n \n             if Generate_SCIL then\n                Insert_Before (Last (Result),\n-                 New_Scil_Node\n-                   (Nkind        => Dispatch_Table_Object_Init,\n+                 New_SCIL_Node\n+                   (SN_Kind      => Dispatch_Table_Object_Init,\n                     Related_Node => Last (Result),\n                     Entity       => Typ));\n             end if;\n@@ -4362,8 +4362,8 @@ package body Exp_Disp is\n \n             if Generate_SCIL then\n                Insert_Before (Last (Result),\n-                 New_Scil_Node\n-                   (Nkind        => Dispatch_Table_Tag_Init,\n+                 New_SCIL_Node\n+                   (SN_Kind      => Dispatch_Table_Tag_Init,\n                     Related_Node => Last (Result),\n                     Entity       => Typ));\n             end if;\n@@ -5141,8 +5141,8 @@ package body Exp_Disp is\n \n             if Generate_SCIL then\n                Insert_Before (Last (Result),\n-                 New_Scil_Node\n-                   (Nkind        => Dispatch_Table_Object_Init,\n+                 New_SCIL_Node\n+                   (SN_Kind      => Dispatch_Table_Object_Init,\n                     Related_Node => Last (Result),\n                     Entity       => Typ));\n             end if;\n@@ -5458,8 +5458,8 @@ package body Exp_Disp is\n \n             if Generate_SCIL then\n                Insert_Before (Last (Result),\n-                 New_Scil_Node\n-                   (Nkind        => Dispatch_Table_Object_Init,\n+                 New_SCIL_Node\n+                   (SN_Kind      => Dispatch_Table_Object_Init,\n                     Related_Node => Last (Result),\n                     Entity       => Typ));\n             end if;\n@@ -6159,8 +6159,8 @@ package body Exp_Disp is\n \n             if Generate_SCIL then\n                Insert_Before (Last (Result),\n-                 New_Scil_Node\n-                   (Nkind        => Dispatch_Table_Tag_Init,\n+                 New_SCIL_Node\n+                   (SN_Kind      => Dispatch_Table_Tag_Init,\n                     Related_Node => Last (Result),\n                     Entity       => Typ));\n             end if;\n@@ -6205,8 +6205,8 @@ package body Exp_Disp is\n \n             if Generate_SCIL then\n                Insert_Before (Last (Result),\n-                 New_Scil_Node\n-                   (Nkind        => Dispatch_Table_Tag_Init,\n+                 New_SCIL_Node\n+                   (SN_Kind      => Dispatch_Table_Tag_Init,\n                     Related_Node => Last (Result),\n                     Entity       => Typ));\n             end if;\n@@ -6434,25 +6434,27 @@ package body Exp_Disp is\n    end New_Value;\n \n    -------------------\n-   -- New_Scil_Node --\n+   -- New_SCIL_Node --\n    -------------------\n \n-   function New_Scil_Node\n-     (Nkind        : Scil_Node_Kind;\n+   function New_SCIL_Node\n+     (SN_Kind      : SCIL_Node_Kind;\n       Related_Node : Node_Id;\n       Entity       : Entity_Id := Empty;\n       Target_Prim  : Entity_Id := Empty) return Node_Id\n    is\n       New_N : constant Node_Id :=\n                 New_Node (N_Null_Statement, Sloc (Related_Node));\n    begin\n-      Set_Is_Scil_Node      (New_N);\n-      Set_Scil_Nkind        (New_N, UI_From_Int (Scil_Node_Kind'Pos (Nkind)));\n-      Set_Scil_Related_Node (New_N, Related_Node);\n-      Set_Entity            (New_N, Entity);\n-      Set_Scil_Target_Prim  (New_N, Target_Prim);\n+      Set_Is_SCIL_Node (New_N);\n+\n+      Set_SCIL_Nkind (New_N, UI_From_Int (SCIL_Node_Kind'Pos (SN_Kind)));\n+      Set_SCIL_Related_Node (New_N, Related_Node);\n+      Set_SCIL_Entity (New_N, Entity);\n+      Set_SCIL_Target_Prim (New_N, Target_Prim);\n+\n       return New_N;\n-   end New_Scil_Node;\n+   end New_SCIL_Node;\n \n    -----------------------------------\n    -- Original_View_In_Visible_Part --"}, {"sha": "2b3710e48ca2b0c9ebef91b5a9326e00462d2bf9", "filename": "gcc/ada/exp_disp.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c5c721a87c80e845d533d1165b72a763fb7e82e/gcc%2Fada%2Fexp_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c5c721a87c80e845d533d1165b72a763fb7e82e/gcc%2Fada%2Fexp_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.ads?ref=1c5c721a87c80e845d533d1165b72a763fb7e82e", "patch": "@@ -41,7 +41,7 @@ package Exp_Disp is\n    --  node. The SCIL node kind is stored in the Scil_Nkind attribute of\n    --  the N_Null_Statement node, and indicates the type of the SCIL node.\n \n-   type Scil_Node_Kind is\n+   type SCIL_Node_Kind is\n      (Unused,\n       --  What is this for ???\n \n@@ -243,7 +243,7 @@ package Exp_Disp is\n    --  Otherwise they are set to the defining identifier and the subprogram\n    --  body of the generated thunk.\n \n-   function Get_Scil_Node_Kind (Node : Node_Id) return Scil_Node_Kind;\n+   function Get_SCIL_Node_Kind (Node : Node_Id) return SCIL_Node_Kind;\n    --  Returns the kind of an SCIL node\n \n    function Is_Predefined_Dispatching_Operation (E : Entity_Id) return Boolean;\n@@ -340,8 +340,8 @@ package Exp_Disp is\n    --  tagged types this routine imports the forward declaration of the tag\n    --  entity, that will be declared and exported by Make_DT.\n \n-   function New_Scil_Node\n-     (Nkind        : Scil_Node_Kind;\n+   function New_SCIL_Node\n+     (SN_Kind      : SCIL_Node_Kind;\n       Related_Node : Node_Id;\n       Entity       : Entity_Id := Empty;\n       Target_Prim  : Entity_Id := Empty) return Node_Id;"}, {"sha": "c3cc56973943d8871721fa098827be66c28b7f3a", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c5c721a87c80e845d533d1165b72a763fb7e82e/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c5c721a87c80e845d533d1165b72a763fb7e82e/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=1c5c721a87c80e845d533d1165b72a763fb7e82e", "patch": "@@ -21868,25 +21868,13 @@ names defining package renamings end with @code{_R}\n @end itemize\n \n @noindent\n-For a private or incomplete type declaration the following checks are\n-made for the defining name suffix:\n+Defining identifiers from incomplete type declarations are never flagged.\n \n-@itemize @bullet\n-@item\n-For an incomplete type declaration: if the corresponding full type\n-declaration is available, the defining identifier from the full type\n-declaration is checked, but the defining identifier from the incomplete type\n-declaration is not; otherwise the defining identifier from the incomplete\n-type declaration is checked against the suffix specified for type\n-declarations.\n-\n-@item\n-For a private type declaration (including private extensions),  the defining\n+For a private type declaration (including private extensions), the defining\n identifier from the private type declaration is checked against the type\n suffix (even if the corresponding full declaration is an access type\n declaration), and the defining identifier from the corresponding full type\n declaration is not checked.\n-@end itemize\n \n @noindent\n For a deferred constant, the defining name in the corresponding full constant"}, {"sha": "fa07a24ff91d103eadfc0a029f5e955021eecb6f", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c5c721a87c80e845d533d1165b72a763fb7e82e/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c5c721a87c80e845d533d1165b72a763fb7e82e/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=1c5c721a87c80e845d533d1165b72a763fb7e82e", "patch": "@@ -9036,7 +9036,7 @@ package body Sem_Prag is\n             Arg   : Node_Id;\n \n          begin\n-            GNAT_Pragma;\n+            Ada_2005_Pragma;\n             Check_At_Least_N_Arguments (1);\n \n             --  Loop through arguments of pragma"}, {"sha": "3ecaf513ffe4e787e09e490a1429b6783dfc0cef", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 34, "deletions": 20, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c5c721a87c80e845d533d1165b72a763fb7e82e/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c5c721a87c80e845d533d1165b72a763fb7e82e/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=1c5c721a87c80e845d533d1165b72a763fb7e82e", "patch": "@@ -1027,8 +1027,7 @@ package body Sinfo is\n       pragma Assert (False\n         or else NT (N).Nkind in N_Has_Entity\n         or else NT (N).Nkind = N_Freeze_Entity\n-        or else NT (N).Nkind = N_Attribute_Definition_Clause\n-        or else NT (N).Nkind = N_Null_Statement);\n+        or else NT (N).Nkind = N_Attribute_Definition_Clause);\n       return Node4 (N);\n    end Entity;\n \n@@ -1704,13 +1703,13 @@ package body Sinfo is\n       return Flag7 (N);\n    end Is_Protected_Subprogram_Body;\n \n-   function Is_Scil_Node\n+   function Is_SCIL_Node\n       (N : Node_Id) return Boolean is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Null_Statement);\n       return Flag4 (N);\n-   end Is_Scil_Node;\n+   end Is_SCIL_Node;\n \n    function Is_Static_Coextension\n       (N : Node_Id) return Boolean is\n@@ -2542,29 +2541,37 @@ package body Sinfo is\n       return Flag18 (N);\n    end Rounded_Result;\n \n-   function Scil_Nkind\n+   function SCIL_Entity\n+      (N : Node_Id) return Node_Id is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Null_Statement);\n+      return Node4 (N);\n+   end SCIL_Entity;\n+\n+   function SCIL_Nkind\n       (N : Node_Id) return Uint is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Null_Statement);\n       return Uint3 (N);\n-   end Scil_Nkind;\n+   end SCIL_Nkind;\n \n-   function Scil_Related_Node\n+   function SCIL_Related_Node\n       (N : Node_Id) return Node_Id is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Null_Statement);\n       return Node1 (N);\n-   end Scil_Related_Node;\n+   end SCIL_Related_Node;\n \n-   function Scil_Target_Prim\n+   function SCIL_Target_Prim\n       (N : Node_Id) return Node_Id is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Null_Statement);\n       return Node2 (N);\n-   end Scil_Target_Prim;\n+   end SCIL_Target_Prim;\n \n    function Scope\n       (N : Node_Id) return Node_Id is\n@@ -3883,8 +3890,7 @@ package body Sinfo is\n       pragma Assert (False\n         or else NT (N).Nkind in N_Has_Entity\n         or else NT (N).Nkind = N_Freeze_Entity\n-        or else NT (N).Nkind = N_Attribute_Definition_Clause\n-        or else NT (N).Nkind = N_Null_Statement);\n+        or else NT (N).Nkind = N_Attribute_Definition_Clause);\n       Set_Node4 (N, Val); -- semantic field, no parent set\n    end Set_Entity;\n \n@@ -4551,13 +4557,13 @@ package body Sinfo is\n       Set_Flag7 (N, Val);\n    end Set_Is_Protected_Subprogram_Body;\n \n-   procedure Set_Is_Scil_Node\n+   procedure Set_Is_SCIL_Node\n       (N : Node_Id; Val : Boolean := True) is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Null_Statement);\n       Set_Flag4 (N, Val);\n-   end Set_Is_Scil_Node;\n+   end Set_Is_SCIL_Node;\n \n    procedure Set_Is_Static_Coextension\n       (N : Node_Id; Val : Boolean := True) is\n@@ -5389,29 +5395,37 @@ package body Sinfo is\n       Set_Flag18 (N, Val);\n    end Set_Rounded_Result;\n \n-   procedure Set_Scil_Nkind\n+   procedure Set_SCIL_Entity\n+      (N : Node_Id; Val : Node_Id) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Null_Statement);\n+      Set_Node4 (N, Val); -- semantic field, no parent set\n+   end Set_SCIL_Entity;\n+\n+   procedure Set_SCIL_Nkind\n       (N : Node_Id; Val : Uint) is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Null_Statement);\n       Set_Uint3 (N, Val);\n-   end Set_Scil_Nkind;\n+   end Set_SCIL_Nkind;\n \n-   procedure Set_Scil_Related_Node\n+   procedure Set_SCIL_Related_Node\n       (N : Node_Id; Val : Node_Id) is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Null_Statement);\n       Set_Node1 (N, Val);\n-   end Set_Scil_Related_Node;\n+   end Set_SCIL_Related_Node;\n \n-   procedure Set_Scil_Target_Prim\n+   procedure Set_SCIL_Target_Prim\n       (N : Node_Id; Val : Node_Id) is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Null_Statement);\n       Set_Node2 (N, Val);\n-   end Set_Scil_Target_Prim;\n+   end Set_SCIL_Target_Prim;\n \n    procedure Set_Scope\n       (N : Node_Id; Val : Node_Id) is"}, {"sha": "bf0841fb5b5e05a5a21a4943fe970e72e1b73a00", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 39, "deletions": 35, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c5c721a87c80e845d533d1165b72a763fb7e82e/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c5c721a87c80e845d533d1165b72a763fb7e82e/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=1c5c721a87c80e845d533d1165b72a763fb7e82e", "patch": "@@ -1251,7 +1251,7 @@ package Sinfo is\n    --    handler to make sure that the associated protected object is unlocked\n    --    when the subprogram completes.\n \n-   --  Is_Scil_Node (Flag4-Sem)\n+   --  Is_SCIL_Node (Flag4-Sem)\n    --    Present in N_Null_Statement nodes. Set to indicate that it is a SCIL\n    --    node. SCIL nodes are special nodes that help the CodePeer backend\n    --    locating nodes that require special processing. In order to minimize\n@@ -1598,16 +1598,20 @@ package Sinfo is\n    --    are the result of expansion of rounded fixed-point divide, conversion\n    --    and multiplication operations.\n \n-   --  Scil_Nkind (Uint3-Sem)\n-   --    Present in N_Null_Statement nodes that are SCIL nodes. Indicates the\n-   --    kind of SCIL node (see Scil_Node_Kind in Exp_Disp spec).\n+   --  SCIL_Entity (Node4-Sem)\n+   --    Present in N_Null_Statement nodes that are SCIL nodes. Used to\n+   --    reference the tagged type associated with the SCIL node.\n+\n+   --  SCIL_Nkind (Uint3-Sem)\n+   --    Present in N_Null_Statement nodes that are SCIL nodes. Used to\n+   --    indicate the kind of SCIL node (see SCIL node kinds in exp_disp.ads).\n \n-   --  Scil_Related_Node (Node1-Sem)\n+   --  SCIL_Related_Node (Node1-Sem)\n    --    Present in N_Null_Statement nodes that are SCIL nodes. Used to\n    --    reference a tree node that requires special processing in the\n    --    CodePeer backend.\n \n-   --  Scil_Target_Prim (Node2-Sem)\n+   --  SCIL_Target_Prim (Node2-Sem)\n    --    Present in N_Null_Statement nodes. Used to reference the tagged type\n    --    primitive associated with the SCIL node.\n \n@@ -3858,19 +3862,11 @@ package Sinfo is\n \n       --  N_Null_Statement\n       --  Sloc points to NULL\n-      --  Is_Scil_Node (Flag4-Sem)\n-      --  Scil_Nkind (Uint3-Sem)\n-      --  Scil_Related_Node (Node1-Sem)\n-      --  Entity (Node4-Sem)\n-      --  Scil_Target_Prim (Node2-Sem)\n-\n-      --  Note that in SCIL nodes (N_Null_Statement nodes with Is_Scil_Node\n-      --  set to True), Entity references the tagged type associated with\n-      --  the SCIL node. However, this is not really an Entity field in the\n-      --  normal sense, so N_Null_Statement is not included in N_Has_Entity.\n-\n-      --  It would be much better to call this SCIL_Entity, and avoid this\n-      --  very confusing non-standard use of Entity. ???\n+      --  Is_SCIL_Node (Flag4-Sem)\n+      --  SCIL_Nkind (Uint3-Sem)\n+      --  SCIL_Related_Node (Node1-Sem)\n+      --  SCIL_Entity (Node4-Sem)\n+      --  SCIL_Target_Prim (Node2-Sem)\n \n       ----------------\n       -- 5.1  Label --\n@@ -8092,7 +8088,7 @@ package Sinfo is\n    function Is_Protected_Subprogram_Body\n      (N : Node_Id) return Boolean;    -- Flag7\n \n-   function Is_Scil_Node\n+   function Is_SCIL_Node\n      (N : Node_Id) return Boolean;    -- Flag4\n \n    function Is_Static_Coextension\n@@ -8350,13 +8346,16 @@ package Sinfo is\n    function Rounded_Result\n      (N : Node_Id) return Boolean;    -- Flag18\n \n-   function Scil_Nkind\n+   function SCIL_Entity\n+     (N : Node_Id) return Node_Id;    -- Node4\n+\n+   function SCIL_Nkind\n       (N : Node_Id) return Uint;      -- Uint3\n \n-   function Scil_Related_Node\n+   function SCIL_Related_Node\n      (N : Node_Id) return Node_Id;    -- Node1\n \n-   function Scil_Target_Prim\n+   function SCIL_Target_Prim\n      (N : Node_Id) return Node_Id;    -- Node2\n \n    function Scope\n@@ -9001,7 +9000,7 @@ package Sinfo is\n    procedure Set_Is_Protected_Subprogram_Body\n      (N : Node_Id; Val : Boolean := True);    -- Flag7\n \n-   procedure Set_Is_Scil_Node\n+   procedure Set_Is_SCIL_Node\n      (N : Node_Id; Val : Boolean := True);    -- Flag4\n \n    procedure Set_Is_Static_Coextension\n@@ -9259,13 +9258,16 @@ package Sinfo is\n    procedure Set_Rounded_Result\n      (N : Node_Id; Val : Boolean := True);    -- Flag18\n \n-   procedure Set_Scil_Nkind\n+   procedure Set_SCIL_Entity\n+     (N : Node_Id; Val : Node_Id);            -- Node4\n+\n+   procedure Set_SCIL_Nkind\n       (N : Node_Id; Val : Uint);              -- Uint3\n \n-   procedure Set_Scil_Related_Node\n+   procedure Set_SCIL_Related_Node\n      (N : Node_Id; Val : Node_Id);            -- Node1\n \n-   procedure Set_Scil_Target_Prim\n+   procedure Set_SCIL_Target_Prim\n      (N : Node_Id; Val : Node_Id);            -- Node2\n \n    procedure Set_Scope\n@@ -11208,7 +11210,7 @@ package Sinfo is\n    pragma Inline (Is_Overloaded);\n    pragma Inline (Is_Power_Of_2_For_Shift);\n    pragma Inline (Is_Protected_Subprogram_Body);\n-   pragma Inline (Is_Scil_Node);\n+   pragma Inline (Is_SCIL_Node);\n    pragma Inline (Is_Static_Coextension);\n    pragma Inline (Is_Static_Expression);\n    pragma Inline (Is_Subprogram_Descriptor);\n@@ -11294,9 +11296,10 @@ package Sinfo is\n    pragma Inline (Reverse_Present);\n    pragma Inline (Right_Opnd);\n    pragma Inline (Rounded_Result);\n-   pragma Inline (Scil_Nkind);\n-   pragma Inline (Scil_Related_Node);\n-   pragma Inline (Scil_Target_Prim);\n+   pragma Inline (SCIL_Entity);\n+   pragma Inline (SCIL_Nkind);\n+   pragma Inline (SCIL_Related_Node);\n+   pragma Inline (SCIL_Target_Prim);\n    pragma Inline (Scope);\n    pragma Inline (Select_Alternatives);\n    pragma Inline (Selector_Name);\n@@ -11507,7 +11510,7 @@ package Sinfo is\n    pragma Inline (Set_Is_Overloaded);\n    pragma Inline (Set_Is_Power_Of_2_For_Shift);\n    pragma Inline (Set_Is_Protected_Subprogram_Body);\n-   pragma Inline (Set_Is_Scil_Node);\n+   pragma Inline (Set_Is_SCIL_Node);\n    pragma Inline (Set_Has_Self_Reference);\n    pragma Inline (Set_Is_Static_Coextension);\n    pragma Inline (Set_Is_Static_Expression);\n@@ -11593,9 +11596,10 @@ package Sinfo is\n    pragma Inline (Set_Reverse_Present);\n    pragma Inline (Set_Right_Opnd);\n    pragma Inline (Set_Rounded_Result);\n-   pragma Inline (Set_Scil_Nkind);\n-   pragma Inline (Set_Scil_Related_Node);\n-   pragma Inline (Set_Scil_Target_Prim);\n+   pragma Inline (Set_SCIL_Entity);\n+   pragma Inline (Set_SCIL_Nkind);\n+   pragma Inline (Set_SCIL_Related_Node);\n+   pragma Inline (Set_SCIL_Target_Prim);\n    pragma Inline (Set_Scope);\n    pragma Inline (Set_Select_Alternatives);\n    pragma Inline (Set_Selector_Name);"}, {"sha": "9057759cb3f62599f2a814ba59ef3e223916ac19", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c5c721a87c80e845d533d1165b72a763fb7e82e/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c5c721a87c80e845d533d1165b72a763fb7e82e/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=1c5c721a87c80e845d533d1165b72a763fb7e82e", "patch": "@@ -476,7 +476,7 @@ package Snames is\n    Name_Main_Storage                   : constant Name_Id := N + $; -- GNAT\n    Name_Memory_Size                    : constant Name_Id := N + $; -- Ada 83\n    Name_No_Body                        : constant Name_Id := N + $; -- GNAT\n-   Name_No_Return                      : constant Name_Id := N + $; -- GNAT\n+   Name_No_Return                      : constant Name_Id := N + $; -- Ada 05\n    Name_Obsolescent                    : constant Name_Id := N + $; -- GNAT\n    Name_Optimize                       : constant Name_Id := N + $;\n    Name_Pack                           : constant Name_Id := N + $;"}]}