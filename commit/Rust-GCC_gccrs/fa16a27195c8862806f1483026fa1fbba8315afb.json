{"sha": "fa16a27195c8862806f1483026fa1fbba8315afb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmExNmEyNzE5NWM4ODYyODA2ZjE0ODMwMjZmYTFmYmJhODMxNWFmYg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-09-30T08:28:09Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-09-30T08:28:09Z"}, "message": "[RTL ifcvt] Transform (X == CST) ? -CST : Y into (X == CST) ? -X : Y when conditional negation is available\n\n        * ifcvt.c (noce_try_avoid_const_materialization): New function.\n        (noce_process_if_block): Use it.\n\n        * gcc.target/aarch64/ifcvt_avoid_const_materialization_1.c: New test.\n\nFrom-SVN: r240649", "tree": {"sha": "3401764d8b64ceb5227992f3073cb56c9c9b481c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3401764d8b64ceb5227992f3073cb56c9c9b481c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa16a27195c8862806f1483026fa1fbba8315afb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa16a27195c8862806f1483026fa1fbba8315afb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa16a27195c8862806f1483026fa1fbba8315afb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa16a27195c8862806f1483026fa1fbba8315afb/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c9ff08a76360616f61398b991315a8f5c23958ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9ff08a76360616f61398b991315a8f5c23958ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9ff08a76360616f61398b991315a8f5c23958ce"}], "stats": {"total": 111, "additions": 111, "deletions": 0}, "files": [{"sha": "8265a45f3cfb4d75f23ecc3354483bea8ec362a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa16a27195c8862806f1483026fa1fbba8315afb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa16a27195c8862806f1483026fa1fbba8315afb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa16a27195c8862806f1483026fa1fbba8315afb", "patch": "@@ -1,3 +1,8 @@\n+2016-09-30  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* ifcvt.c (noce_try_avoid_const_materialization): New function.\n+\t(noce_process_if_block): Use it.\n+\n 2016-09-30  Martin Liska  <mliska@suse.cz>\n \n \t* doc/invoke.texi: Document asan-use-after-return that"}, {"sha": "203cfe98f82a49c35520a2cb16d2fa09d4c85c72", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa16a27195c8862806f1483026fa1fbba8315afb/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa16a27195c8862806f1483026fa1fbba8315afb/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=fa16a27195c8862806f1483026fa1fbba8315afb", "patch": "@@ -1313,6 +1313,84 @@ noce_try_inverse_constants (struct noce_if_info *if_info)\n   return false;\n }\n \n+/* Try to avoid materializing a constant if we know it's in one of the\n+   registers.  For example:\n+   (X == CST) ? -CST : Y --> (X == CST) ? -X : Y.\n+   Do this only if conditional negation is available.\n+   Similar for bitwise NOT.  */\n+\n+static bool\n+noce_try_avoid_const_materialization (struct noce_if_info *if_info)\n+{\n+  if (!noce_simple_bbs (if_info))\n+    return false;\n+\n+  rtx cond = if_info->cond;\n+  rtx a = if_info->a;\n+  rtx b = if_info->b;\n+  rtx_code code = GET_CODE (cond);\n+  machine_mode mode = GET_MODE (if_info->x);\n+\n+  if (!(code == EQ || code == NE)\n+      || !REG_P (XEXP (cond, 0))\n+      || !REG_P (if_info->x)\n+      || GET_MODE (XEXP (cond, 0)) != mode\n+      || !CONST_INT_P (XEXP (cond, 1)))\n+    return false;\n+\n+  rtx cst = XEXP (cond, 1);\n+  if (cst == CONST0_RTX (mode))\n+    return false;\n+\n+  rtx non_cst = XEXP (cond, 0);\n+  rtx eq_side = code == EQ ? b : a;\n+  if (!CONST_INT_P (eq_side))\n+    return false;\n+\n+  HOST_WIDE_INT cstval = INTVAL (cst);\n+  HOST_WIDE_INT eq_side_val = INTVAL (eq_side);\n+\n+  rtx_code op_code;\n+  if (eq_side_val == ~cstval)\n+    op_code = NOT;\n+  else if (eq_side_val != HOST_WIDE_INT_MIN && (cstval == -eq_side_val))\n+    op_code = NEG;\n+  else\n+    return false;\n+\n+  /* By the rules of the negcc/notcc optabs must happen when the COND is true,\n+     in this case when register in COND is equal to CST so always set the\n+     comparison to EQ.  */\n+  if (code == NE)\n+    {\n+      a = non_cst;\n+      cond = gen_rtx_fmt_ee (EQ, GET_MODE (cond), non_cst, cst);\n+    }\n+  else\n+    b = non_cst;\n+\n+  start_sequence ();\n+  rtx target\n+    = emit_conditional_neg_or_complement (if_info->x, op_code, mode,\n+\t\t\t\t\t   cond, a, b);\n+  if (!target)\n+    {\n+      end_sequence ();\n+      return false;\n+    }\n+\n+  if (target != if_info->x)\n+    noce_emit_move_insn (if_info->x, target);\n+\n+  rtx_insn *seq = end_ifcvt_sequence (if_info);\n+  if (!seq)\n+    return false;\n+\n+   emit_insn_before_setloc (seq, if_info->jump,\n+\t\t\t     INSN_LOCATION (if_info->insn_a));\n+  if_info->transform_name = \"noce_try_avoid_const_materialization\";\n+  return true;\n+}\n \n /* Convert \"if (test) x = a; else x = b\", for A and B constant.\n    Also allow A = y + c1, B = y + c2, with a common y between A\n@@ -3606,6 +3684,8 @@ noce_process_if_block (struct noce_if_info *if_info)\n     goto success;\n   if (noce_try_inverse_constants (if_info))\n     goto success;\n+  if (noce_try_avoid_const_materialization (if_info))\n+    goto success;\n   if (!targetm.have_conditional_execution ()\n       && noce_try_store_flag_constants (if_info))\n     goto success;"}, {"sha": "11fc7a8de85a61e519d7823c5fcff5bed873e134", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa16a27195c8862806f1483026fa1fbba8315afb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa16a27195c8862806f1483026fa1fbba8315afb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa16a27195c8862806f1483026fa1fbba8315afb", "patch": "@@ -1,3 +1,7 @@\n+2016-09-30  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/ifcvt_avoid_const_materialization_1.c: New test.\n+\n 2016-09-30  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/77399"}, {"sha": "b2a05eaff606a54afc40c3899ad5926c889283dc", "filename": "gcc/testsuite/gcc.target/aarch64/ifcvt_avoid_const_materialization_1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa16a27195c8862806f1483026fa1fbba8315afb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fifcvt_avoid_const_materialization_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa16a27195c8862806f1483026fa1fbba8315afb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fifcvt_avoid_const_materialization_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fifcvt_avoid_const_materialization_1.c?ref=fa16a27195c8862806f1483026fa1fbba8315afb", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+/* Check that we avoid moving the immediate into a register\n+   if comparison has shown that the inverse or negated form is\n+   already in one of the registers.  */\n+\n+int\n+foo (int a, int b)\n+{\n+  return a == 5 ? -5 : b;\n+}\n+\n+int\n+bar (int a, int b)\n+{\n+  return a != 5 ? b : ~5;\n+}\n+\n+/* { dg-final { scan-assembler-not \"mov\\\\tw\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler-times \"csneg\\\\tw\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"csinv\\\\tw\\[0-9\\]+\" 1 } } */"}]}