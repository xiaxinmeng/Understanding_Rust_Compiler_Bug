{"sha": "ccfce8d2ee4d89fbaea68e412108a8c1e5d3434c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NmY2U4ZDJlZTRkODlmYmFlYTY4ZTQxMjEwOGE4YzFlNWQzNDM0Yw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-02-21T16:52:40Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-02-21T16:52:40Z"}, "message": "flow.c (init_propagate_block_info): Canon address and use single_set for killing dead memory stores.\n\n\t* flow.c (init_propagate_block_info): Canon address and use single_set\n\tfor killing dead memory stores.\n\nFrom-SVN: r39949", "tree": {"sha": "dc3660bd32cc61a465802dd502d0534dbeb23740", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc3660bd32cc61a465802dd502d0534dbeb23740"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccfce8d2ee4d89fbaea68e412108a8c1e5d3434c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccfce8d2ee4d89fbaea68e412108a8c1e5d3434c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccfce8d2ee4d89fbaea68e412108a8c1e5d3434c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccfce8d2ee4d89fbaea68e412108a8c1e5d3434c/comments", "author": null, "committer": null, "parents": [{"sha": "0443f602bc9f5711c31e45a995ceaf6828d08283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0443f602bc9f5711c31e45a995ceaf6828d08283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0443f602bc9f5711c31e45a995ceaf6828d08283"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "917a8596e7fae03e824f96058c413c337dbe2993", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfce8d2ee4d89fbaea68e412108a8c1e5d3434c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfce8d2ee4d89fbaea68e412108a8c1e5d3434c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ccfce8d2ee4d89fbaea68e412108a8c1e5d3434c", "patch": "@@ -1,3 +1,8 @@\n+Wed Feb 21 17:35:24 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* flow.c (init_propagate_block_info): Canon address and use single_set\n+\tfor killing dead memory stores.\n+\n 2001-02-21  Jeffrey Oldham  <oldham@codesourcery.com>\n \n \t* Makefile.in (reorg.o): Add params.h dependence."}, {"sha": "10c1bd2d3f8479cb20de0aec06ec586fd9ff2d14", "filename": "gcc/flow.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccfce8d2ee4d89fbaea68e412108a8c1e5d3434c/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccfce8d2ee4d89fbaea68e412108a8c1e5d3434c/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=ccfce8d2ee4d89fbaea68e412108a8c1e5d3434c", "patch": "@@ -4110,25 +4110,26 @@ init_propagate_block_info (bb, live, local_set, cond_local_set, flags)\n \t  || (bb->succ->succ_next == NULL\n \t      && bb->succ->dest == EXIT_BLOCK_PTR)))\n     {\n-      rtx insn;\n+      rtx insn, set;\n       for (insn = bb->end; insn != bb->head; insn = PREV_INSN (insn))\n \tif (GET_CODE (insn) == INSN\n-\t    && GET_CODE (PATTERN (insn)) == SET\n-\t    && GET_CODE (SET_DEST (PATTERN (insn))) == MEM)\n+\t    && (set = single_set (insn))\n+\t    && GET_CODE (SET_DEST (set)) == MEM)\n \t  {\n-\t    rtx mem = SET_DEST (PATTERN (insn));\n+\t    rtx mem = SET_DEST (set);\n+\t    rtx canon_mem = canon_rtx (mem);\n \n \t    /* This optimization is performed by faking a store to the\n \t       memory at the end of the block.  This doesn't work for\n \t       unchanging memories because multiple stores to unchanging\n \t       memory is illegal and alias analysis doesn't consider it.  */\n-\t    if (RTX_UNCHANGING_P (mem))\n+\t    if (RTX_UNCHANGING_P (canon_mem))\n \t      continue;\n \n-\t    if (XEXP (mem, 0) == frame_pointer_rtx\n-\t\t|| (GET_CODE (XEXP (mem, 0)) == PLUS\n-\t\t    && XEXP (XEXP (mem, 0), 0) == frame_pointer_rtx\n-\t\t    && GET_CODE (XEXP (XEXP (mem, 0), 1)) == CONST_INT))\n+\t    if (XEXP (canon_mem, 0) == frame_pointer_rtx\n+\t\t|| (GET_CODE (XEXP (canon_mem, 0)) == PLUS\n+\t\t    && XEXP (XEXP (canon_mem, 0), 0) == frame_pointer_rtx\n+\t\t    && GET_CODE (XEXP (XEXP (canon_mem, 0), 1)) == CONST_INT))\n \t      {\n #ifdef AUTO_INC_DEC\n \t\t/* Store a copy of mem, otherwise the address may be scrogged"}]}