{"sha": "6da65479fcd86c21d0f6b731dda763b574e8066c", "node_id": "C_kwDOANBUbNoAKDZkYTY1NDc5ZmNkODZjMjFkMGY2YjczMWRkYTc2M2I1NzRlODA2NmM", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-14T05:49:55Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-14T15:06:48Z"}, "message": "Minor fixes to frange.\n\nFollowing are a series of cleanups to the frange code in preparation\nfor a much more invasive patch rewriting the NAN and sign tracking\nbits.  Please be patient, as I'm trying to break everything up into\nsmall chunks instead of dropping a mondo patch removing the NAN and\nsign tristate handling.\n\nNo functional changes.\n\nRegstrapped on x86-64 Linux, plus I ran selftests for\n-ffinite-math-only.\n\ngcc/ChangeLog:\n\n\t* value-query.cc (range_query::get_tree_range): Remove check for overflow.\n\t* value-range-pretty-print.cc (vrange_printer::visit): Move read\n\tof type until after undefined_p is checked.\n\t* value-range.cc (frange::set): Remove asserts for REAL_CST.\n\t(frange::contains_p): Tidy up.\n\t(range_tests_nan):  Add comment.\n\t* value-range.h (frange::type): Check for undefined_p.\n\t(frange::set_undefined): Remove set of endpoints.", "tree": {"sha": "71c2af30a5ea56e358f2a6d9045dd9e6c1c0a332", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71c2af30a5ea56e358f2a6d9045dd9e6c1c0a332"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6da65479fcd86c21d0f6b731dda763b574e8066c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6da65479fcd86c21d0f6b731dda763b574e8066c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6da65479fcd86c21d0f6b731dda763b574e8066c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6da65479fcd86c21d0f6b731dda763b574e8066c/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f469ce1d3ef94092647125662ddd93847712909f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f469ce1d3ef94092647125662ddd93847712909f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f469ce1d3ef94092647125662ddd93847712909f"}], "stats": {"total": 24, "additions": 7, "deletions": 17}, "files": [{"sha": "de83f469be4e44d4741b5c9e9e9ff5302499b56f", "filename": "gcc/value-query.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da65479fcd86c21d0f6b731dda763b574e8066c/gcc%2Fvalue-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da65479fcd86c21d0f6b731dda763b574e8066c/gcc%2Fvalue-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-query.cc?ref=6da65479fcd86c21d0f6b731dda763b574e8066c", "patch": "@@ -217,9 +217,6 @@ range_query::get_tree_range (vrange &r, tree expr, gimple *stmt)\n \n     case REAL_CST:\n       {\n-\tif (TREE_OVERFLOW_P (expr))\n-\t  expr = drop_tree_overflow (expr);\n-\n \tfrange &f = as_a <frange> (r);\n \tf.set (expr, expr);\n "}, {"sha": "b124e46cb9e127e68c9f207f3762608f3070c387", "filename": "gcc/value-range-pretty-print.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da65479fcd86c21d0f6b731dda763b574e8066c/gcc%2Fvalue-range-pretty-print.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da65479fcd86c21d0f6b731dda763b574e8066c/gcc%2Fvalue-range-pretty-print.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range-pretty-print.cc?ref=6da65479fcd86c21d0f6b731dda763b574e8066c", "patch": "@@ -122,14 +122,13 @@ vrange_printer::print_irange_bitmasks (const irange &r) const\n void\n vrange_printer::visit (const frange &r) const\n {\n-  tree type = r.type ();\n-\n   pp_string (pp, \"[frange] \");\n   if (r.undefined_p ())\n     {\n       pp_string (pp, \"UNDEFINED\");\n       return;\n     }\n+  tree type = r.type ();\n   dump_generic_node (pp, type, 0, TDF_NONE, false);\n   pp_string (pp, \" \");\n   if (r.varying_p ())"}, {"sha": "d40a4ebf657f5534269ebc05f40d85d718266d11", "filename": "gcc/value-range.cc", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da65479fcd86c21d0f6b731dda763b574e8066c/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da65479fcd86c21d0f6b731dda763b574e8066c/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=6da65479fcd86c21d0f6b731dda763b574e8066c", "patch": "@@ -357,15 +357,11 @@ frange::set_signbit (fp_prop::kind k)\n void\n frange::set (tree min, tree max, value_range_kind kind)\n {\n-  gcc_checking_assert (TREE_CODE (min) == REAL_CST);\n-  gcc_checking_assert (TREE_CODE (max) == REAL_CST);\n-\n   if (kind == VR_UNDEFINED)\n     {\n       set_undefined ();\n       return;\n     }\n-\n   // Treat VR_ANTI_RANGE and VR_VARYING as varying.\n   if (kind != VR_RANGE)\n     {\n@@ -401,7 +397,6 @@ frange::set (tree min, tree max, value_range_kind kind)\n   gcc_checking_assert (is_nan || tree_compare (LE_EXPR, min, max));\n \n   normalize_kind ();\n-\n   if (flag_checking)\n     verify_range ();\n }\n@@ -612,17 +607,17 @@ frange::operator== (const frange &src) const\n bool\n frange::contains_p (tree cst) const\n {\n+  gcc_checking_assert (m_kind != VR_ANTI_RANGE);\n+  const REAL_VALUE_TYPE *rv = TREE_REAL_CST_PTR (cst);\n+\n   if (undefined_p ())\n     return false;\n \n   if (varying_p ())\n     return true;\n \n-  gcc_checking_assert (m_kind == VR_RANGE);\n \n-  const REAL_VALUE_TYPE *rv = TREE_REAL_CST_PTR (cst);\n-  if (real_compare (GE_EXPR, rv, &m_min)\n-      && real_compare (LE_EXPR, rv, &m_max))\n+  if (real_compare (GE_EXPR, rv, &m_min) && real_compare (LE_EXPR, rv, &m_max))\n     {\n       if (HONOR_SIGNED_ZEROS (m_type) && real_iszero (rv))\n \t{\n@@ -3652,7 +3647,7 @@ range_tests_nan ()\n   ASSERT_FALSE (r0 == r0);\n   ASSERT_TRUE (r0 != r0);\n \n-  // [5,6] U NAN.\n+  // [5,6] U NAN = [5,6] NAN.\n   r0 = frange_float (\"5\", \"6\");\n   r0.set_nan (fp_prop::NO);\n   r1 = frange_nan (float_type_node);"}, {"sha": "0ba0193bc1f199156bc8782db850b5aaf7bb3e61", "filename": "gcc/value-range.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da65479fcd86c21d0f6b731dda763b574e8066c/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da65479fcd86c21d0f6b731dda763b574e8066c/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=6da65479fcd86c21d0f6b731dda763b574e8066c", "patch": "@@ -1141,6 +1141,7 @@ frange::frange (tree min, tree max, value_range_kind kind)\n inline tree\n frange::type () const\n {\n+  gcc_checking_assert (!undefined_p ());\n   return m_type;\n }\n \n@@ -1160,8 +1161,6 @@ frange::set_undefined ()\n   m_kind = VR_UNDEFINED;\n   m_type = NULL;\n   m_props.set_undefined ();\n-  memset (&m_min, 0, sizeof (m_min));\n-  memset (&m_max, 0, sizeof (m_max));\n }\n \n // Set R to maximum representable value for TYPE."}]}