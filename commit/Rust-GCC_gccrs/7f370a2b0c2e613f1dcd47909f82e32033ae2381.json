{"sha": "7f370a2b0c2e613f1dcd47909f82e32033ae2381", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YzNzBhMmIwYzJlNjEzZjFkY2Q0NzkwOWY4MmUzMjAzM2FlMjM4MQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2016-01-21T22:21:55Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-01-21T22:21:55Z"}, "message": "[PATCH] [PR tree-optimization/69347] Fix memory consumption in threader & minor speed improvement\n\n\tPR middle-end/69347\n\t* tree-ssa-dom.c (dom_opt_dom_walker::thread_across_edge): Avoid\n\tuseless call to record_temporary_equivalences.\n\t* tree-ssa-threadbackward.c (find_jump_threads_backwards): Just\n\tallocate 10 slots in the bb_path vector and let it grow as needed.\n\t(fsm_find_control_statement_thread_paths): Similarly for the next_path\n\tvector.\n\nFrom-SVN: r232711", "tree": {"sha": "e838fb5644b281dd414a57e44417ba4aa89d2677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e838fb5644b281dd414a57e44417ba4aa89d2677"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f370a2b0c2e613f1dcd47909f82e32033ae2381", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f370a2b0c2e613f1dcd47909f82e32033ae2381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f370a2b0c2e613f1dcd47909f82e32033ae2381", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f370a2b0c2e613f1dcd47909f82e32033ae2381/comments", "author": null, "committer": null, "parents": [{"sha": "2423a75aed79a349c3469f936fbc4ad30bf9b464", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2423a75aed79a349c3469f936fbc4ad30bf9b464", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2423a75aed79a349c3469f936fbc4ad30bf9b464"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "c3908eac71d2ecd5b426da6ea9446ca2df218452", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f370a2b0c2e613f1dcd47909f82e32033ae2381/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f370a2b0c2e613f1dcd47909f82e32033ae2381/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f370a2b0c2e613f1dcd47909f82e32033ae2381", "patch": "@@ -1,3 +1,13 @@\n+2016-01-21  Jeff Law  <law@redhat.com>\n+\n+\tPR middle-end/69347\n+\t* tree-ssa-dom.c (dom_opt_dom_walker::thread_across_edge): Avoid\n+\tuseless call to record_temporary_equivalences.\n+\t* tree-ssa-threadbackward.c (find_jump_threads_backwards): Just\n+\tallocate 10 slots in the bb_path vector and let it grow as needed.\n+\t(fsm_find_control_statement_thread_paths): Similarly for the next_path\n+\tvector.\n+\n 2016-01-21  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* configure.ac (gcc_cv_as_powerpc_mfcrf, gcc_cv_as_machine_directive):"}, {"sha": "84c9a6a09f366047763b7be1ce73fb0498209c8d", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f370a2b0c2e613f1dcd47909f82e32033ae2381/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f370a2b0c2e613f1dcd47909f82e32033ae2381/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=7f370a2b0c2e613f1dcd47909f82e32033ae2381", "patch": "@@ -935,9 +935,6 @@ dom_opt_dom_walker::thread_across_edge (edge e)\n   m_avail_exprs_stack->push_marker ();\n   m_const_and_copies->push_marker ();\n \n-  /* Traversing E may result in equivalences we can utilize.  */\n-  record_temporary_equivalences (e, m_const_and_copies, m_avail_exprs_stack);\n-\n   /* With all the edge equivalences in the tables, go ahead and attempt\n      to thread through E->dest.  */\n   ::thread_across_edge (m_dummy_cond, e, false,"}, {"sha": "8be57a0869d8c9d8b1f75526f5dde625ca33770b", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f370a2b0c2e613f1dcd47909f82e32033ae2381/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f370a2b0c2e613f1dcd47909f82e32033ae2381/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=7f370a2b0c2e613f1dcd47909f82e32033ae2381", "patch": "@@ -142,7 +142,7 @@ fsm_find_control_statement_thread_paths (tree name,\n       int e_count = 0;\n       edge_iterator ei;\n       vec<basic_block, va_gc> *next_path;\n-      vec_alloc (next_path, n_basic_blocks_for_fn (cfun));\n+      vec_alloc (next_path, 10);\n \n       /* When VAR_BB == LAST_BB_IN_PATH, then the first block in the path\n \t will already be in VISITED_BBS.  When they are not equal, then we\n@@ -379,7 +379,7 @@ find_jump_threads_backwards (edge e)\n     return;\n \n   vec<basic_block, va_gc> *bb_path;\n-  vec_alloc (bb_path, n_basic_blocks_for_fn (cfun));\n+  vec_alloc (bb_path, 10);\n   vec_safe_push (bb_path, e->dest);\n   hash_set<basic_block> *visited_bbs = new hash_set<basic_block>;\n "}]}