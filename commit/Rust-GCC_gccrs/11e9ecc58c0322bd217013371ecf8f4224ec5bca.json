{"sha": "11e9ecc58c0322bd217013371ecf8f4224ec5bca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFlOWVjYzU4YzAzMjJiZDIxNzAxMzM3MWVjZjhmNDIyNGVjNWJjYQ==", "commit": {"author": {"name": "Hans Boehm", "email": "boehm@acm.org", "date": "2001-10-02T02:01:55Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2001-10-02T02:01:55Z"}, "message": "Fix for ia64-java bug reported by Hans Boehm.\n\n\t* optabs.c (emit_libcall_block): When using non-call exceptions,\n\tdon't add REG_LIBCALL reg notes to trapping calls.\n\nFrom-SVN: r45934", "tree": {"sha": "23fad9853195254501859547741dec90a918226b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23fad9853195254501859547741dec90a918226b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11e9ecc58c0322bd217013371ecf8f4224ec5bca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11e9ecc58c0322bd217013371ecf8f4224ec5bca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11e9ecc58c0322bd217013371ecf8f4224ec5bca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11e9ecc58c0322bd217013371ecf8f4224ec5bca/comments", "author": {"login": "hboehm", "id": 1000362, "node_id": "MDQ6VXNlcjEwMDAzNjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1000362?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hboehm", "html_url": "https://github.com/hboehm", "followers_url": "https://api.github.com/users/hboehm/followers", "following_url": "https://api.github.com/users/hboehm/following{/other_user}", "gists_url": "https://api.github.com/users/hboehm/gists{/gist_id}", "starred_url": "https://api.github.com/users/hboehm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hboehm/subscriptions", "organizations_url": "https://api.github.com/users/hboehm/orgs", "repos_url": "https://api.github.com/users/hboehm/repos", "events_url": "https://api.github.com/users/hboehm/events{/privacy}", "received_events_url": "https://api.github.com/users/hboehm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "607a6500eae4624f2153f90a30919d3bf5aae2ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/607a6500eae4624f2153f90a30919d3bf5aae2ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/607a6500eae4624f2153f90a30919d3bf5aae2ef"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "bbb780ed679664e3ce331c2a4ca8ae24f9706abf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e9ecc58c0322bd217013371ecf8f4224ec5bca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e9ecc58c0322bd217013371ecf8f4224ec5bca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11e9ecc58c0322bd217013371ecf8f4224ec5bca", "patch": "@@ -1,3 +1,8 @@\n+2001-10-01  Hans Boehm  <boehm@acm.org>\n+\n+\t* optabs.c (emit_libcall_block): When using non-call exceptions,\n+\tdon't add REG_LIBCALL reg notes to trapping calls.\n+\n 2001-10-01  David Billinghurst <David.Billinghurst@riotinto.com>\n \n \t* flow.c (propagate_block_delete_libcall): Remove unused first arg"}, {"sha": "5b47c13a316f7af3a997b0bb7710564aa0452431", "filename": "gcc/optabs.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e9ecc58c0322bd217013371ecf8f4224ec5bca/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e9ecc58c0322bd217013371ecf8f4224ec5bca/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=11e9ecc58c0322bd217013371ecf8f4224ec5bca", "patch": "@@ -2957,9 +2957,13 @@ emit_libcall_block (insns, target, result, equiv)\n     first = NEXT_INSN (prev);\n \n   /* Encapsulate the block so it gets manipulated as a unit.  */\n-  REG_NOTES (first) = gen_rtx_INSN_LIST (REG_LIBCALL, last,\n-\t\t\t\t\t REG_NOTES (first));\n-  REG_NOTES (last) = gen_rtx_INSN_LIST (REG_RETVAL, first, REG_NOTES (last));\n+  if (!flag_non_call_exceptions || !may_trap_p (equiv))\n+    {\n+      REG_NOTES (first) = gen_rtx_INSN_LIST (REG_LIBCALL, last,\n+\t\t      \t\t\t     REG_NOTES (first));\n+      REG_NOTES (last) = gen_rtx_INSN_LIST (REG_RETVAL, first,\n+\t\t      \t\t\t    REG_NOTES (last));\n+    }\n }\n \f\n /* Generate code to store zero in X.  */"}]}