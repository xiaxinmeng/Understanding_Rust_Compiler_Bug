{"sha": "59dbb04df76da41f26192c2c219584fc3d6017cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlkYmIwNGRmNzZkYTQxZjI2MTkyYzJjMjE5NTg0ZmMzZDYwMTdjYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-09T23:47:34Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-10T08:50:34Z"}, "message": "c++: Fix flexible array with synthesized constructor.\n\nWe were already rejecting initialization of a flexible array member in a\nconstructor; we similarly shouldn't try to clean it up.\n\n\tPR c++/93618\n\t* tree.c (array_of_unknown_bound_p): New.\n\t* init.c (perform_member_init): Do nothing for flexible arrays.", "tree": {"sha": "ec482184d1fd95fedf476bdf3f847f3a38080263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec482184d1fd95fedf476bdf3f847f3a38080263"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59dbb04df76da41f26192c2c219584fc3d6017cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59dbb04df76da41f26192c2c219584fc3d6017cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59dbb04df76da41f26192c2c219584fc3d6017cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59dbb04df76da41f26192c2c219584fc3d6017cc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd789c816b06235b04698636db69e302b24c83ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd789c816b06235b04698636db69e302b24c83ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd789c816b06235b04698636db69e302b24c83ba"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "876e2ebf987063f6945fe1678afed0e6e92c4ec0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59dbb04df76da41f26192c2c219584fc3d6017cc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59dbb04df76da41f26192c2c219584fc3d6017cc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=59dbb04df76da41f26192c2c219584fc3d6017cc", "patch": "@@ -1,3 +1,9 @@\n+2020-02-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/93618\n+\t* tree.c (array_of_unknown_bound_p): New.\n+\t* init.c (perform_member_init): Do nothing for flexible arrays.\n+\n 2020-02-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/93633"}, {"sha": "043bc404140b6bd19da4678c93aaf6731e514d18", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59dbb04df76da41f26192c2c219584fc3d6017cc/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59dbb04df76da41f26192c2c219584fc3d6017cc/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=59dbb04df76da41f26192c2c219584fc3d6017cc", "patch": "@@ -7424,6 +7424,7 @@ extern tree build_exception_variant\t\t(tree, tree);\n extern tree bind_template_template_parm\t\t(tree, tree);\n extern tree array_type_nelts_total\t\t(tree);\n extern tree array_type_nelts_top\t\t(tree);\n+extern bool array_of_unknown_bound_p\t\t(const_tree);\n extern tree break_out_target_exprs\t\t(tree, bool = false);\n extern tree build_ctor_subob_ref\t\t(tree, tree, tree);\n extern tree replace_placeholders\t\t(tree, tree, bool * = NULL);"}, {"sha": "d480660445e8ee66c814ec6ff32af50b6aca4d51", "filename": "gcc/cp/init.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59dbb04df76da41f26192c2c219584fc3d6017cc/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59dbb04df76da41f26192c2c219584fc3d6017cc/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=59dbb04df76da41f26192c2c219584fc3d6017cc", "patch": "@@ -801,8 +801,11 @@ perform_member_init (tree member, tree init)\n \t\t    member);\n     }\n \n-  if (maybe_reject_flexarray_init (member, init))\n-    return;\n+  if (array_of_unknown_bound_p (type))\n+    {\n+      maybe_reject_flexarray_init (member, init);\n+      return;\n+    }\n \n   if (init && TREE_CODE (init) == TREE_LIST\n       && (DIRECT_LIST_INIT_P (TREE_VALUE (init))"}, {"sha": "eb540f851eeb14b7c9c3990d20a6b285670c2344", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59dbb04df76da41f26192c2c219584fc3d6017cc/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59dbb04df76da41f26192c2c219584fc3d6017cc/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=59dbb04df76da41f26192c2c219584fc3d6017cc", "patch": "@@ -1135,6 +1135,15 @@ build_array_of_n_type (tree elt, int n)\n   return build_cplus_array_type (elt, build_index_type (size_int (n - 1)));\n }\n \n+/* True iff T is an array of unknown bound.  */\n+\n+bool\n+array_of_unknown_bound_p (const_tree t)\n+{\n+  return (TREE_CODE (t) == ARRAY_TYPE\n+\t  && !TYPE_DOMAIN (t));\n+}\n+\n /* True iff T is an N3639 array of runtime bound (VLA).  These were approved\n    for C++14 but then removed.  This should only be used for N3639\n    specifically; code wondering more generally if something is a VLA should use"}, {"sha": "b62c718fb0b3a0c07ac4fcb2ab681e454c238514", "filename": "gcc/testsuite/g++.dg/ext/flexary35.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59dbb04df76da41f26192c2c219584fc3d6017cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59dbb04df76da41f26192c2c219584fc3d6017cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary35.C?ref=59dbb04df76da41f26192c2c219584fc3d6017cc", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/93618\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+template <typename T>\n+struct C {\n+  ~C () = default;\n+  T *p = nullptr;\n+};\n+\n+class A {\n+  struct B {\n+    int c;\n+    C<B*> d[];\n+  };\n+  void foo (int f) { B s; s.c = f; }\n+  B e;\n+};"}]}