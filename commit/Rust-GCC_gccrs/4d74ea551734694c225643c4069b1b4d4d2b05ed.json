{"sha": "4d74ea551734694c225643c4069b1b4d4d2b05ed", "node_id": "C_kwDOANBUbNoAKDRkNzRlYTU1MTczNDY5NGMyMjU2NDNjNDA2OWIxYjRkNGQyYjA1ZWQ", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-02-15T20:42:33Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-02-15T20:42:33Z"}, "message": "Fortran/OpenMP: Fix depend-clause handling for c_ptr\n\ngcc/fortran/ChangeLog:\n\n\t* trans-openmp.cc (gfc_trans_omp_depobj): Fix to alloc/ptr dummy\n\tand for c_ptr.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/gomp/depend-4.f90: Add VALUE test, update scan test.\n\t* gfortran.dg/gomp/depend-5.f90: Fix scan tree for -m32.\n\t* gfortran.dg/gomp/depend-6.f90: New test.", "tree": {"sha": "e8ad92ca6683d0a8cdb3d27099cea1899fb5b649", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8ad92ca6683d0a8cdb3d27099cea1899fb5b649"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d74ea551734694c225643c4069b1b4d4d2b05ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d74ea551734694c225643c4069b1b4d4d2b05ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d74ea551734694c225643c4069b1b4d4d2b05ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d74ea551734694c225643c4069b1b4d4d2b05ed/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e84b2b37a541b27feea69769fc314d534464ebd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e84b2b37a541b27feea69769fc314d534464ebd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e84b2b37a541b27feea69769fc314d534464ebd"}], "stats": {"total": 307, "additions": 295, "deletions": 12}, "files": [{"sha": "4d56a771349cadf65b95b211ab20b3c8e7f94395", "filename": "gcc/fortran/trans-openmp.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d74ea551734694c225643c4069b1b4d4d2b05ed/gcc%2Ffortran%2Ftrans-openmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d74ea551734694c225643c4069b1b4d4d2b05ed/gcc%2Ffortran%2Ftrans-openmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.cc?ref=4d74ea551734694c225643c4069b1b4d4d2b05ed", "patch": "@@ -5536,9 +5536,12 @@ gfc_trans_omp_depobj (gfc_code *code)\n \t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (var)));\n \t    }\n \t  else if ((n->sym->attr.allocatable || n->sym->attr.pointer)\n-\t\t   && n->sym->attr.optional)\n+\t\t   && n->sym->attr.dummy)\n \t    var = build_fold_indirect_ref (var);\n-\t  else if (!POINTER_TYPE_P (TREE_TYPE (var)))\n+\t  else if (!POINTER_TYPE_P (TREE_TYPE (var))\n+\t\t   || (n->sym->ts.f90_type == BT_VOID\n+\t\t       && !POINTER_TYPE_P (TREE_TYPE (TREE_TYPE (var)))\n+\t\t       && !GFC_ARRAY_TYPE_P (TREE_TYPE (TREE_TYPE (var)))))\n \t    {\n \t      TREE_ADDRESSABLE (var) = 1;\n \t      var = gfc_build_addr_expr (NULL, var);"}, {"sha": "f6cf2fd2dd475a4cb9d875e6dce534234d5b5b01", "filename": "gcc/testsuite/gfortran.dg/gomp/depend-4.f90", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d74ea551734694c225643c4069b1b4d4d2b05ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdepend-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d74ea551734694c225643c4069b1b4d4d2b05ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdepend-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdepend-4.f90?ref=4d74ea551734694c225643c4069b1b4d4d2b05ed", "patch": "@@ -7,7 +7,8 @@\n ! For pointers, it depends on the address of the pointer target\n ! For allocatable, on the allocated memory address\n \n-subroutine foo(dss, dsp, dsa, daa, daaa, daap, doss, dosp, dosa, doaa, doaaa, doaap)\n+subroutine foo(dss, dsp, dsa, daa, daaa, daap, doss, dosp, dosa, doaa, doaaa, doaap, &\n+               dssv, dossv)\n   !use omp_lib\n   use iso_c_binding, only: c_intptr_t\n   implicit none (type, external)\n@@ -18,8 +19,10 @@ subroutine foo(dss, dsp, dsa, daa, daaa, daap, doss, dosp, dosa, doaa, doaaa, do\n   optional :: doss, dosp, dosa, doaa, doaaa, doaap\n   allocatable :: sa, aaa, dsa, daaa, dosa, doaaa\n   pointer :: sp, aap, dsp, daap, dosp, doaap\n+  integer, value :: dssv, dossv\n+  optional :: dossv\n \n-  integer(omp_depend_kind) :: object(18)\n+  integer(omp_depend_kind) :: object(20)\n   integer(omp_depend_kind) :: elem(9)\n \n   !$omp depobj(object(1)) depend(in: ss)\n@@ -40,6 +43,8 @@ subroutine foo(dss, dsp, dsa, daa, daaa, daap, doss, dosp, dosa, doaa, doaaa, do\n   !$omp depobj(object(16)) depend(in: doaa)\n   !$omp depobj(object(17)) depend(in: doaaa)\n   !$omp depobj(object(18)) depend(in: doaap)\n+  !$omp depobj(object(19)) depend(in: dssv)\n+  !$omp depobj(object(20)) depend(in: dossv)\n \n   !$omp depobj(elem(1)) depend(in: aa(2))\n   !$omp depobj(elem(2)) depend(in: aaa(2))\n@@ -107,6 +112,12 @@ subroutine foo(dss, dsp, dsa, daa, daaa, daap, doss, dosp, dosa, doaa, doaaa, do\n     !$omp task depend(out: doaap)\n       doaap = 4\n     !$omp end task\n+    !$omp task depend(out: dossv)\n+      dossv = 4\n+    !$omp end task\n+    !$omp task depend(out: dssv)\n+      dssv = 4\n+    !$omp end task\n \n     !$omp task depend(out: aa(2))\n       aa(2) = 4\n@@ -168,8 +179,8 @@ subroutine bar\n ! { dg-final { scan-tree-dump-times \"&object\\\\\\[4\\\\\\] = .integer.kind=4.\\\\\\[0:\\\\\\] \\\\* restrict\\\\) aaa.data;\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"&object\\\\\\[5\\\\\\] = .integer.kind=4.\\\\\\[0:\\\\\\] \\\\*\\\\) aap.data;\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"&object\\\\\\[6\\\\\\] = dss;\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"&object\\\\\\[7\\\\\\] = dsp;\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"&object\\\\\\[8\\\\\\] = dsa;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[7\\\\\\] = \\\\*dsp;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[8\\\\\\] = \\\\*dsa;\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"&object\\\\\\[9\\\\\\] = daa;\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"&object\\\\\\[10\\\\\\] = .integer.kind=4.\\\\\\[0:\\\\\\] \\\\* restrict\\\\) daaa->data;\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"&object\\\\\\[11\\\\\\] = .integer.kind=4.\\\\\\[0:\\\\\\] \\\\*\\\\) daap->data;\" 1 \"original\" } }\n@@ -179,6 +190,8 @@ subroutine bar\n ! { dg-final { scan-tree-dump-times \"&object\\\\\\[15\\\\\\] = doaa;\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"&object\\\\\\[16\\\\\\] = .integer.kind=4.\\\\\\[0:\\\\\\] \\\\* restrict\\\\) doaaa->data;\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"&object\\\\\\[17\\\\\\] = .integer.kind=4.\\\\\\[0:\\\\\\] \\\\*\\\\) doaap->data;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[18\\\\\\] = &dssv;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[19\\\\\\] = &dossv;\" 1 \"original\" } }\n \n ! { dg-final { scan-tree-dump-times \"&elem\\\\\\[0\\\\\\] = &aa\\\\\\[1\\\\\\];\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"&elem\\\\\\[1\\\\\\] = &\\\\(\\\\*\\\\(integer.kind=4.\\\\\\[0:\\\\\\] \\\\* restrict\\\\) aaa.data\\\\)\\\\\\[aaa.offset \\\\+ 2\\\\\\];\" 1 \"original\" } }\n@@ -217,6 +230,8 @@ subroutine bar\n ! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\(\\\\*doaa\\\\)\\\\\\[1\\\\\\]\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\(\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) doaaa->data\\\\)\\\\\\[doaaa->offset \\\\+ 2\\\\\\]\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\(integer\\\\(kind=4\\\\) \\\\*\\\\) \\\\(doaap->data \\\\+ \\\\(sizetype\\\\) \\\\(\\\\(doaap->offset \\\\+ doaap->dim\\\\\\[0\\\\\\].stride \\\\* 2\\\\) \\\\* doaap->span\\\\)\\\\)\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:dossv\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:dssv\\\\)\" 1 \"original\" } }\n \n \n ! gimple dump - check only those which are simple one-line checkable:\n@@ -230,6 +245,8 @@ subroutine bar\n ! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:doss\\\\) shared\\\\(doss\\\\)\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:doaa\\\\) shared\\\\(doaa\\\\)\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:&aa\\\\\\[1\\\\\\]\\\\) shared\\\\(aa\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:&dossv\\\\) shared\\\\(dossv\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:&dssv\\\\) shared\\\\(dssv\\\\)\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = \\\\*dsp;\" 2 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = \\\\*dsa;\" 3 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = \\\\*dosp;\" 2 \"gimple\" } }\n@@ -238,3 +255,7 @@ subroutine bar\n ! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = doaap->data;\" 4 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = &\\\\(\\\\*daa\\\\)\\\\\\[1\\\\\\];\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = &\\\\(\\\\*doaa\\\\)\\\\\\[1\\\\\\];\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"= &dssv;\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"= &dossv;\" 1 \"gimple\" } }\n+\n+"}, {"sha": "4cbe3d47d021c2c9e1e7ec942cb453d6da3f90d0", "filename": "gcc/testsuite/gfortran.dg/gomp/depend-5.f90", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d74ea551734694c225643c4069b1b4d4d2b05ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdepend-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d74ea551734694c225643c4069b1b4d4d2b05ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdepend-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdepend-5.f90?ref=4d74ea551734694c225643c4069b1b4d4d2b05ed", "patch": "@@ -72,11 +72,11 @@ subroutine foo(dss, dsp, dsa, daa, daaa, daap, doss, dosp, dosa, doaa, doaaa, do\n ! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\*\\\\*dosa\\\\)\" 1 \"original\" } }\n \n ! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:aa\\\\\\[1\\\\\\]\\\\)\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\(\\\\*\\\\(integer\\\\(kind=16\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) aaa.data\\\\)\\\\\\[aaa.offset \\\\+ 2\\\\\\]\\\\)\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\*\\\\(integer\\\\(kind=16\\\\) \\\\*\\\\) \\\\(aap.data \\\\+ \\\\(sizetype\\\\) \\\\(\\\\(aap.offset \\\\+ aap.dim\\\\\\[0\\\\\\].stride \\\\* 2\\\\) \\\\* aap.span\\\\)\\\\)\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\(\\\\*\\\\(integer\\\\(kind=\\[0-9\\]+\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) aaa.data\\\\)\\\\\\[aaa.offset \\\\+ 2\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\*\\\\(integer\\\\(kind=\\[0-9\\]+\\\\) \\\\*\\\\) \\\\(aap.data \\\\+ \\\\(sizetype\\\\) \\\\(\\\\(aap.offset \\\\+ aap.dim\\\\\\[0\\\\\\].stride \\\\* 2\\\\) \\\\* aap.span\\\\)\\\\)\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\(\\\\*daa\\\\)\\\\\\[1\\\\\\]\\\\)\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\(\\\\*\\\\(integer\\\\(kind=16\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) daaa->data\\\\)\\\\\\[daaa->offset \\\\+ 2\\\\\\]\\\\)\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\*\\\\(integer\\\\(kind=16\\\\) \\\\*\\\\) \\\\(daap->data \\\\+ \\\\(sizetype\\\\) \\\\(\\\\(daap->offset \\\\+ daap->dim\\\\\\[0\\\\\\].stride \\\\* 2\\\\) \\\\* daap->span\\\\)\\\\)\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\(\\\\*\\\\(integer\\\\(kind=\\[0-9\\]+\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) daaa->data\\\\)\\\\\\[daaa->offset \\\\+ 2\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\*\\\\(integer\\\\(kind=\\[0-9\\]+\\\\) \\\\*\\\\) \\\\(daap->data \\\\+ \\\\(sizetype\\\\) \\\\(\\\\(daap->offset \\\\+ daap->dim\\\\\\[0\\\\\\].stride \\\\* 2\\\\) \\\\* daap->span\\\\)\\\\)\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\(\\\\*doaa\\\\)\\\\\\[1\\\\\\]\\\\)\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\(\\\\*\\\\(integer\\\\(kind=16\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) doaaa->data\\\\)\\\\\\[doaaa->offset \\\\+ 2\\\\\\]\\\\)\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\*\\\\(integer\\\\(kind=16\\\\) \\\\*\\\\) \\\\(doaap->data \\\\+ \\\\(sizetype\\\\) \\\\(\\\\(doaap->offset \\\\+ doaap->dim\\\\\\[0\\\\\\].stride \\\\* 2\\\\) \\\\* doaap->span\\\\)\\\\)\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\(\\\\*\\\\(integer\\\\(kind=\\[0-9\\]+\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) doaaa->data\\\\)\\\\\\[doaaa->offset \\\\+ 2\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\*\\\\(integer\\\\(kind=\\[0-9\\]+\\\\) \\\\*\\\\) \\\\(doaap->data \\\\+ \\\\(sizetype\\\\) \\\\(\\\\(doaap->offset \\\\+ doaap->dim\\\\\\[0\\\\\\].stride \\\\* 2\\\\) \\\\* doaap->span\\\\)\\\\)\\\\)\" 1 \"original\" } }"}, {"sha": "b6c1afee127a74426c283e81b11177bbf6242f61", "filename": "gcc/testsuite/gfortran.dg/gomp/depend-6.f90", "status": "added", "additions": 259, "deletions": 0, "changes": 259, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d74ea551734694c225643c4069b1b4d4d2b05ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdepend-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d74ea551734694c225643c4069b1b4d4d2b05ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdepend-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdepend-6.f90?ref=4d74ea551734694c225643c4069b1b4d4d2b05ed", "patch": "@@ -0,0 +1,259 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fdump-tree-gimple -fdump-tree-original\" }\n+\n+! Check that 'omp depobj's depend and 'omp task/... depend' depend on\n+! the same variable\n+\n+! For pointers, it depends on the address of the pointer target\n+! For allocatable, on the allocated memory address\n+\n+subroutine foo(dss, dsp, dsa, daa, daaa, daap, doss, dosp, dosa, doaa, doaaa, doaap, &\n+               dssv, dossv)\n+  !use omp_lib\n+  use iso_c_binding, only: c_intptr_t, c_ptr, c_null_ptr\n+  implicit none (type, external)\n+  integer, parameter :: omp_depend_kind = 2*c_intptr_t\n+  type(c_ptr) :: ss, sp, sa, aa(4), aaa(:), aap(:)\n+  type(c_ptr) :: dss, dsp, dsa, daa(4), daaa(:), daap(:)\n+  type(c_ptr) :: doss, dosp, dosa, doaa(4), doaaa(:), doaap(:)\n+  optional :: doss, dosp, dosa, doaa, doaaa, doaap\n+  allocatable :: sa, aaa, dsa, daaa, dosa, doaaa\n+  pointer :: sp, aap, dsp, daap, dosp, doaap\n+  type(c_ptr), value :: dssv, dossv\n+  optional :: dossv\n+\n+  integer(omp_depend_kind) :: object(20)\n+  integer(omp_depend_kind) :: elem(9)\n+\n+  !$omp depobj(object(1)) depend(in: ss)\n+  !$omp depobj(object(2)) depend(in: sp)\n+  !$omp depobj(object(3)) depend(in: sa)\n+  !$omp depobj(object(4)) depend(in: aa)\n+  !$omp depobj(object(5)) depend(in: aaa)\n+  !$omp depobj(object(6)) depend(in: aap)\n+  !$omp depobj(object(7)) depend(in: dss)\n+  !$omp depobj(object(8)) depend(in: dsp)\n+  !$omp depobj(object(9)) depend(in: dsa)\n+  !$omp depobj(object(10)) depend(in: daa)\n+  !$omp depobj(object(11)) depend(in: daaa)\n+  !$omp depobj(object(12)) depend(in: daap)\n+  !$omp depobj(object(13)) depend(in: doss)\n+  !$omp depobj(object(14)) depend(in: dosp)\n+  !$omp depobj(object(15)) depend(in: dosa)\n+  !$omp depobj(object(16)) depend(in: doaa)\n+  !$omp depobj(object(17)) depend(in: doaaa)\n+  !$omp depobj(object(18)) depend(in: doaap)\n+  !$omp depobj(object(19)) depend(in: dssv)\n+  !$omp depobj(object(20)) depend(in: dossv)\n+\n+  !$omp depobj(elem(1)) depend(in: aa(2))\n+  !$omp depobj(elem(2)) depend(in: aaa(2))\n+  !$omp depobj(elem(3)) depend(in: aap(2))\n+  !$omp depobj(elem(4)) depend(in: daa(2))\n+  !$omp depobj(elem(5)) depend(in: daaa(2))\n+  !$omp depobj(elem(6)) depend(in: daap(2))\n+  !$omp depobj(elem(6)) depend(in: doaa(2))\n+  !$omp depobj(elem(8)) depend(in: doaaa(2))\n+  !$omp depobj(elem(9)) depend(in: doaap(2))\n+\n+  !$omp parallel\n+  !$omp single\n+    !$omp task depend(out: ss)\n+      ss = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: sp)\n+      sp = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: sa)\n+      sa = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: aa)\n+      aa = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: aaa)\n+      aaa = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: aap)\n+      aap = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: dss)\n+      dss = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: dsp)\n+      dsp = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: dsa)\n+      dsa = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: daa)\n+      daa = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: daaa)\n+      daaa = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: daap)\n+      daap = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: doss)\n+      doss = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: dosp)\n+      dosp = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: dosa)\n+      dosa = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: doaa)\n+      doaa = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: doaaa)\n+      doaaa = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: doaap)\n+      doaap = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: dossv)\n+      dossv = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: dssv)\n+      dssv = c_null_ptr\n+    !$omp end task\n+\n+    !$omp task depend(out: aa(2))\n+      aa(2) = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: aaa(2))\n+      aaa(2) = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: aap(2))\n+      aap(2) = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: daa(2))\n+      daa(2) = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: daaa(2))\n+      daaa(2) = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: daap(2))\n+      daap(2) = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: doaa(2))\n+      doaa(2) = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: doaaa(2))\n+      doaaa(2) = c_null_ptr\n+    !$omp end task\n+    !$omp task depend(out: doaap(2))\n+      doaap(2) = c_null_ptr\n+    !$omp end task\n+  !$omp end single\n+  !$omp end parallel\n+end\n+\n+subroutine bar\n+  implicit none (type, external)\n+  integer :: depvar, x\n+\n+  x = 7\n+  !$omp parallel\n+  !$omp single\n+    !$omp task depend(out: depvar)\n+      x =5\n+    !$omp end task\n+    !$omp task depend(in: depvar)\n+      if (x /= 5) stop\n+    !$omp end task\n+  !$omp end single\n+  !$omp end parallel\n+end\n+\n+! depvar - only used for dependency, but should still be used in depend:\n+\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:depvar\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(in:depvar\\\\)\" 1 \"original\" } }\n+\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[0\\\\\\] = &ss;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[1\\\\\\] = sp;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[2\\\\\\] = sa;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[3\\\\\\] = &aa;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[4\\\\\\] = .void \\\\*\\\\\\[0:\\\\\\] \\\\* restrict\\\\) aaa.data;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[5\\\\\\] = .void \\\\*\\\\\\[0:\\\\\\] \\\\*\\\\) aap.data;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[6\\\\\\] = dss;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[7\\\\\\] = \\\\*dsp;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[8\\\\\\] = \\\\*dsa;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[9\\\\\\] = daa;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[10\\\\\\] = .void \\\\*\\\\\\[0:\\\\\\] \\\\* restrict\\\\) daaa->data;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[11\\\\\\] = .void \\\\*\\\\\\[0:\\\\\\] \\\\*\\\\) daap->data;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[12\\\\\\] = doss;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[13\\\\\\] = \\\\*dosp;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[14\\\\\\] = \\\\*dosa;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[15\\\\\\] = doaa;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[16\\\\\\] = .void \\\\*\\\\\\[0:\\\\\\] \\\\* restrict\\\\) doaaa->data;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[17\\\\\\] = .void \\\\*\\\\\\[0:\\\\\\] \\\\*\\\\) doaap->data;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[18\\\\\\] = &dssv;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[19\\\\\\] = &dossv;\" 1 \"original\" } }\n+\n+! { dg-final { scan-tree-dump-times \"&elem\\\\\\[0\\\\\\] = &aa\\\\\\[1\\\\\\];\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&elem\\\\\\[1\\\\\\] = &\\\\(\\\\*\\\\(void \\\\*\\\\\\[0:\\\\\\] \\\\* restrict\\\\) aaa.data\\\\)\\\\\\[aaa.offset \\\\+ 2\\\\\\];\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&elem\\\\\\[2\\\\\\] = \\\\(void \\\\* \\\\*\\\\) \\\\(aap.data \\\\+ .sizetype. \\\\(\\\\(aap.offset \\\\+ aap.dim\\\\\\[0\\\\\\].stride \\\\* 2\\\\) \\\\* aap.span\\\\)\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&elem\\\\\\[3\\\\\\] = &\\\\(\\\\*daa\\\\)\\\\\\[1\\\\\\];\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&elem\\\\\\[4\\\\\\] = &\\\\(\\\\*\\\\(void \\\\*\\\\\\[0:\\\\\\] \\\\* restrict\\\\) daaa->data\\\\)\\\\\\[daaa->offset \\\\+ 2\\\\\\];\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&elem\\\\\\[5\\\\\\] = \\\\(void \\\\* \\\\*\\\\) \\\\(daap->data \\\\+ .sizetype. \\\\(\\\\(daap->offset \\\\+ daap->dim\\\\\\[0\\\\\\].stride \\\\* 2\\\\) \\\\* daap->span\\\\)\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&elem\\\\\\[5\\\\\\] = &\\\\(\\\\*doaa\\\\)\\\\\\[1\\\\\\];\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&elem\\\\\\[7\\\\\\] = &\\\\(\\\\*\\\\(void \\\\*\\\\\\[0:\\\\\\] \\\\* restrict\\\\) doaaa->data\\\\)\\\\\\[doaaa->offset \\\\+ 2\\\\\\];\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&elem\\\\\\[8\\\\\\] = \\\\(void \\\\* \\\\*\\\\) \\\\(doaap->data \\\\+ .sizetype. \\\\(\\\\(doaap->offset \\\\+ doaap->dim\\\\\\[0\\\\\\].stride \\\\* 2\\\\) \\\\* doaap->span\\\\)\\\\);\" 1 \"original\" } }\n+\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:ss\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*sp\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*sa\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:aa\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\(void \\\\*\\\\\\[0:\\\\\\] \\\\* restrict\\\\) aaa.data\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\(void \\\\*\\\\\\[0:\\\\\\] \\\\*\\\\) aap.data\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*dss\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\*dsp\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\*dsa\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*daa\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\(void \\\\*\\\\\\[0:\\\\\\] \\\\* restrict\\\\) daaa->data\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\(void \\\\*\\\\\\[0:\\\\\\] \\\\*\\\\) daap->data\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*doss\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\*dosp\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\*dosa\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*doaa\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\(void \\\\*\\\\\\[0:\\\\\\] \\\\* restrict\\\\) doaaa->data\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\(void \\\\*\\\\\\[0:\\\\\\] \\\\*\\\\) doaap->data\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:aa\\\\\\[1\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\(\\\\*\\\\(void \\\\*\\\\\\[0:\\\\\\] \\\\* restrict\\\\) aaa.data\\\\)\\\\\\[aaa.offset \\\\+ 2\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\(void \\\\* \\\\*\\\\) \\\\(aap.data \\\\+ \\\\(sizetype\\\\) \\\\(\\\\(aap.offset \\\\+ aap.dim\\\\\\[0\\\\\\].stride \\\\* 2\\\\) \\\\* aap.span\\\\)\\\\)\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\(\\\\*daa\\\\)\\\\\\[1\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\(\\\\*\\\\(void \\\\*\\\\\\[0:\\\\\\] \\\\* restrict\\\\) daaa->data\\\\)\\\\\\[daaa->offset \\\\+ 2\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\(void \\\\* \\\\*\\\\) \\\\(daap->data \\\\+ \\\\(sizetype\\\\) \\\\(\\\\(daap->offset \\\\+ daap->dim\\\\\\[0\\\\\\].stride \\\\* 2\\\\) \\\\* daap->span\\\\)\\\\)\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\(\\\\*doaa\\\\)\\\\\\[1\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\(\\\\*\\\\(void \\\\*\\\\\\[0:\\\\\\] \\\\* restrict\\\\) doaaa->data\\\\)\\\\\\[doaaa->offset \\\\+ 2\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\(void \\\\* \\\\*\\\\) \\\\(doaap->data \\\\+ \\\\(sizetype\\\\) \\\\(\\\\(doaap->offset \\\\+ doaap->dim\\\\\\[0\\\\\\].stride \\\\* 2\\\\) \\\\* doaap->span\\\\)\\\\)\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:dossv\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:dssv\\\\)\" 1 \"original\" } }\n+\n+\n+! gimple dump - check only those which are simple one-line checkable:\n+\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:&ss\\\\) shared\\\\(ss\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:sp\\\\) shared\\\\(sp\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:sa\\\\) shared\\\\(sa\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:&aa\\\\) shared\\\\(aa\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:dss\\\\) shared\\\\(dss\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:daa\\\\) shared\\\\(daa\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:doss\\\\) shared\\\\(doss\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:doaa\\\\) shared\\\\(doaa\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:&aa\\\\\\[1\\\\\\]\\\\) shared\\\\(aa\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:&dossv\\\\) shared\\\\(dossv\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:&dssv\\\\) shared\\\\(dssv\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = \\\\*dsp;\" 2 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = \\\\*dsa;\" 3 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = \\\\*dosp;\" 2 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = \\\\*dosa;\" 3 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = doaaa->data;\" 4 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = doaap->data;\" 4 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = &\\\\(\\\\*daa\\\\)\\\\\\[1\\\\\\];\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = &\\\\(\\\\*doaa\\\\)\\\\\\[1\\\\\\];\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"= &dssv;\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"= &dossv;\" 1 \"gimple\" } }"}]}