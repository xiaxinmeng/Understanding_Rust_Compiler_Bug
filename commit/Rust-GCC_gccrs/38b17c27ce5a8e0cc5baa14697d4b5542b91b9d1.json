{"sha": "38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhiMTdjMjdjZTVhOGUwY2M1YmFhMTQ2OTdkNGI1NTQyYjkxYjlkMQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-01-21T18:12:29Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-11-09T20:11:13Z"}, "message": "libstdc++: Make _GLIBCXX_DEBUG checks constexpr compatible\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/debug/assertions.h (__glibcxx_requires_non_empty_range):\n\tRemove __builtin_expect.\n\t(__glibcxx_requires_subscript): Likewise.\n\t(__glibcxx_requires_nonempty): Likewise.\n\t* include/debug/formatter.h (__check_singular): Add C++11 constexpr\n\tqualification.\n\t* include/debug/helper_functions.h (__check_singular): Likewise. Skip\n\tcheck if constant evaluated.\n\t(__valid_range): Do not skip check if constant evaluated.\n\t* include/debug/macros.h (_GLIBCXX_DEBUG_VERIFY_COND_AT): Add\n\t__builtin_expect.\n\t(_GLIBCXX_DEBUG_VERIFY_AT_F): Use __glibcxx_assert_1.\n\t* testsuite/21_strings/basic_string_view/element_access/char/back_constexpr_neg.cc:\n\tNew test.\n\t* testsuite/21_strings/basic_string_view/element_access/char/constexpr.cc: New test.\n\t* testsuite/21_strings/basic_string_view/element_access/char/constexpr_neg.cc: New test.\n\t* testsuite/21_strings/basic_string_view/element_access/char/front_back_constexpr.cc:\n\tNew test.\n\t* testsuite/21_strings/basic_string_view/element_access/char/front_constexpr_neg.cc:\n\tNew test.\n\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/back_constexpr_neg.cc:\n\tNew test.\n\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/constexpr.cc: New test.\n\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/constexpr_neg.cc: New test.\n\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/front_constexpr_neg.cc:\n\tNew test.\n\t* testsuite/25_algorithms/lower_bound/debug/constexpr_partitioned_neg.cc: New test.\n\t* testsuite/25_algorithms/lower_bound/debug/constexpr_partitioned_pred_neg.cc: New test.\n\t* testsuite/25_algorithms/lower_bound/debug/constexpr_valid_range_neg.cc: New test.\n\t* testsuite/25_algorithms/lower_bound/debug/partitioned_neg.cc: New test.\n\t* testsuite/25_algorithms/lower_bound/debug/partitioned_pred_neg.cc: New test.\n\t* testsuite/25_algorithms/upper_bound/debug/constexpr_partitioned_neg.cc: New test.\n\t* testsuite/25_algorithms/upper_bound/debug/constexpr_partitioned_pred_neg.cc: New test.\n\t* testsuite/25_algorithms/upper_bound/debug/constexpr_valid_range_neg.cc: New test.\n\t* testsuite/25_algorithms/upper_bound/debug/partitioned_neg.cc: New test.\n\t* testsuite/25_algorithms/upper_bound/debug/partitioned_pred_neg.cc: New test.", "tree": {"sha": "afdcc1232f79842a2546b0f785b551e7239e0926", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afdcc1232f79842a2546b0f785b551e7239e0926"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/comments", "author": null, "committer": null, "parents": [{"sha": "3a5f8d745f8e26d973218b088788f22ad197ca67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a5f8d745f8e26d973218b088788f22ad197ca67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a5f8d745f8e26d973218b088788f22ad197ca67"}], "stats": {"total": 805, "additions": 774, "deletions": 31}, "files": [{"sha": "16cf6bbe7ac5999b0af7e7c6135cdf8fd12e4f67", "filename": "libstdc++-v3/include/debug/assertions.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fassertions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fassertions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fassertions.h?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -45,12 +45,12 @@\n \n // Verify that [_First, _Last) forms a non-empty iterator range.\n # define __glibcxx_requires_non_empty_range(_First,_Last)\t\\\n-  __glibcxx_assert(__builtin_expect(_First != _Last, true))\n+  __glibcxx_assert(_First != _Last)\n # define __glibcxx_requires_subscript(_N)\t\\\n-  __glibcxx_assert(__builtin_expect(_N < this->size(), true))\n+  __glibcxx_assert(_N < this->size())\n // Verify that the container is nonempty\n # define __glibcxx_requires_nonempty()\t\t\\\n-  __glibcxx_assert(__builtin_expect(!this->empty(), true))\n+  __glibcxx_assert(!this->empty())\n #endif\n \n #ifdef _GLIBCXX_DEBUG"}, {"sha": "8734ed06cb5f75e520396fe59de3c174472f591d", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -72,7 +72,8 @@ namespace __gnu_debug\n   using std::type_info;\n \n   template<typename _Iterator>\n-    bool __check_singular(const _Iterator&);\n+    _GLIBCXX_CONSTEXPR\n+    bool __check_singular(_Iterator const&);\n \n   class _Safe_sequence_base;\n "}, {"sha": "281e9c7390ec04b6519413e903f3e994ff9aec3c", "filename": "libstdc++-v3/include/debug/helper_functions.h", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -120,15 +120,29 @@ namespace __gnu_debug\n   // We may have an iterator that derives from _Safe_iterator_base but isn't\n   // a _Safe_iterator.\n   template<typename _Iterator>\n+    _GLIBCXX_CONSTEXPR\n     inline bool\n     __check_singular(_Iterator const& __x)\n-    { return __check_singular_aux(std::__addressof(__x)); }\n+    {\n+      return\n+#ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n+\t__builtin_is_constant_evaluated() ? false :\n+#endif\n+\t__check_singular_aux(std::__addressof(__x));\n+    }\n \n   /** Non-NULL pointers are nonsingular. */\n   template<typename _Tp>\n+    _GLIBCXX_CONSTEXPR\n     inline bool\n     __check_singular(_Tp* const& __ptr)\n-    { return __ptr == 0; }\n+    {\n+      return\n+#ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n+\t__builtin_is_constant_evaluated() ? false :\n+#endif\n+\t__ptr == 0;\n+    }\n \n   /** We say that integral types for a valid range, and defer to other\n    *  routines to realize what to do with integral types instead of\n@@ -225,11 +239,6 @@ namespace __gnu_debug\n     __valid_range(_InputIterator __first, _InputIterator __last,\n \t\t  typename _Distance_traits<_InputIterator>::__type& __dist)\n     {\n-#ifdef __cpp_lib_is_constant_evaluated\n-      if (std::is_constant_evaluated())\n-\t// Detected by the compiler directly.\n-\treturn true;\n-#endif\n       typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n       return __valid_range_aux(__first, __last, __dist, _Integral());\n     }\n@@ -253,11 +262,6 @@ namespace __gnu_debug\n     inline bool\n     __valid_range(_InputIterator __first, _InputIterator __last)\n     {\n-#ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n-      if (__builtin_is_constant_evaluated())\n-\t// Detected by the compiler directly.\n-\treturn true;\n-#endif\n       typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n       return __valid_range_aux(__first, __last, _Integral());\n     }"}, {"sha": "ef4c76c747a4176d7aaf391d5cc672e90435bff9", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -38,25 +38,15 @@\n  * the user error and where the error is reported.\n  *\n  */\n-#if 0 /* defined _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED */\n-# define _GLIBCXX_DEBUG_VERIFY_COND_AT(_Cond,_ErrMsg,_File,_Line,_Func)\t\\\n-  if (__builtin_is_constant_evaluated())\t\t\t\t\\\n-    /* FIXME: Compilation error here when !_Cond. */\t\t\t\\\n-    break;\t\t\t\t\t\t\t\t\\\n-  if (! (_Cond))\t\t\t\t\t\t\t\\\n+#define _GLIBCXX_DEBUG_VERIFY_COND_AT(_Cond,_ErrMsg,_File,_Line,_Func)\t\\\n+  if (__builtin_expect(!bool(_Cond), false))\t\t\t\t\\\n     __gnu_debug::_Error_formatter::_S_at(_File, _Line, _Func)\t\t\\\n       ._ErrMsg._M_error()\n-#else\n-# define _GLIBCXX_DEBUG_VERIFY_COND_AT(_Cond,_ErrMsg,_File,_Line,_Func)\t\\\n-  if (! (_Cond))\t\t\t\t\t\t\t\\\n-    __gnu_debug::_Error_formatter::_S_at(_File, _Line, _Func)\t\t\\\n-      ._ErrMsg._M_error()\n-#endif\n \n #define _GLIBCXX_DEBUG_VERIFY_AT_F(_Cond,_ErrMsg,_File,_Line,_Func)\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    _GLIBCXX_DEBUG_VERIFY_COND_AT(_Cond,_ErrMsg,_File,_Line,_Func);\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    __glibcxx_assert_1(_Cond)\t\t\t\t\t\t\\\n+    { _GLIBCXX_DEBUG_VERIFY_COND_AT(_Cond,_ErrMsg,_File,_Line,_Func); } \\\n   } while (false)\n \n #define _GLIBCXX_DEBUG_VERIFY_AT(_Cond,_ErrMsg,_File,_Line)\t\t\\"}, {"sha": "d5049ff246c279dd81234dd1865602088c2cd57d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/char/back_constexpr_neg.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2Fback_constexpr_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2Fback_constexpr_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2Fback_constexpr_neg.cc?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17 -D_GLIBCXX_ASSERTIONS\" }\n+// { dg-do compile { target c++17 xfail *-*-* } }\n+\n+#include <string_view>\n+\n+typedef std::string_view string_view_type;\n+\n+constexpr char\n+back()\n+{\n+  string_view_type s(\"\");\n+  return s.back();\n+}\n+\n+static_assert(back() != 'a'); // { dg-error \"non-constant condition\" }\n+\n+// { dg-prune-output \"in 'constexpr' expansion\" }\n+// { dg-prune-output \"failed_assertion\" }"}, {"sha": "aa2a08ebe83b73f692e8411e06cbf93de9671500", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/char/constexpr.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2Fconstexpr.cc?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <string_view>\n+\n+constexpr char\n+test()\n+{\n+  typedef std::string_view string_view_type;\n+  string_view_type s(\"abcd\");\n+  return s[0];\n+}\n+\n+static_assert(test() == 'a');"}, {"sha": "a302556866ca8040bc650d02de26f8d2e9f01031", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/char/constexpr_neg.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2Fconstexpr_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2Fconstexpr_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2Fconstexpr_neg.cc?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17 -D_GLIBCXX_ASSERTIONS\" }\n+// { dg-do compile { target c++17 xfail *-*-* } }\n+\n+#include <string_view>\n+\n+constexpr char\n+test()\n+{\n+  typedef std::string_view string_view_type;\n+  string_view_type s(\"abcd\");\n+  return s[s.length()];\n+}\n+\n+static_assert(test() == 0); // { dg-error \"non-constant condition\" }\n+\n+// { dg-prune-output \"in 'constexpr' expansion\" }\n+// { dg-prune-output \"failed_assertion\" }"}, {"sha": "7ead45ddcf669a264b32d8b89efe5af917e51229", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/char/front_back_constexpr.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2Ffront_back_constexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2Ffront_back_constexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2Ffront_back_constexpr.cc?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <string_view>\n+\n+typedef std::string_view string_view_type;\n+\n+constexpr char\n+front()\n+{\n+  string_view_type s(\"abcd\");\n+  return s.front();\n+}\n+\n+static_assert(front() == 'a');\n+\n+constexpr char\n+back()\n+{\n+  string_view_type s(\"abcd\");\n+  return s.back();\n+}\n+\n+static_assert(back() == 'd');"}, {"sha": "8fad31a07dd0192e1b8a7b383b41540a00e5c8f5", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/char/front_constexpr_neg.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2Ffront_constexpr_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2Ffront_constexpr_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2Ffront_constexpr_neg.cc?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17 -D_GLIBCXX_ASSERTIONS\" }\n+// { dg-do compile { target c++17 xfail *-*-* } }\n+\n+#include <string_view>\n+\n+typedef std::string_view string_view_type;\n+\n+constexpr char\n+front()\n+{\n+  string_view_type s(\"\");\n+  return s.front();\n+}\n+\n+static_assert(front() != 'a'); // { dg-error \"non-constant condition\" }\n+\n+// { dg-prune-output \"in 'constexpr' expansion\" }\n+// { dg-prune-output \"failed_assertion\" }"}, {"sha": "0500a2de6003660371797b38f66d0b9b1893b8bd", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/wchar_t/back_constexpr_neg.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2Fback_constexpr_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2Fback_constexpr_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2Fback_constexpr_neg.cc?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17 -D_GLIBCXX_ASSERTIONS\" }\n+// { dg-do compile { target c++17 xfail *-*-* } }\n+\n+#include <string_view>\n+\n+typedef std::wstring_view string_view_type;\n+\n+constexpr wchar_t\n+back()\n+{\n+  string_view_type s(L\"\");\n+  return s.back();\n+}\n+\n+static_assert(back() != L'a'); // { dg-error \"non-constant condition\" }\n+\n+// { dg-prune-output \"in 'constexpr' expansion\" }\n+// { dg-prune-output \"failed_assertion\" }"}, {"sha": "f4171628e9fad2fc0542892a1cc2f23d9e269a42", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/wchar_t/constexpr.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2Fconstexpr.cc?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <string_view>\n+\n+constexpr wchar_t\n+test()\n+{\n+  typedef std::wstring_view string_view_type;\n+  string_view_type s(L\"abcd\");\n+  return s[0];\n+}\n+\n+static_assert(test() == L'a');"}, {"sha": "299a73b8c8e5eb069494318bd0bd8ec5270011a4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/wchar_t/constexpr_neg.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2Fconstexpr_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2Fconstexpr_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2Fconstexpr_neg.cc?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17 -D_GLIBCXX_ASSERTIONS\" }\n+// { dg-do compile { target c++17 xfail *-*-* } }\n+\n+#include <string_view>\n+\n+constexpr wchar_t\n+test()\n+{\n+  typedef std::wstring_view string_view_type;\n+  string_view_type s(L\"abcd\");\n+  return s[4];\n+}\n+\n+static_assert(test() == 0); // { dg-error \"non-constant condition\" }\n+\n+// { dg-prune-output \"in 'constexpr' expansion\" }\n+// { dg-prune-output \"failed_assertion\" }"}, {"sha": "009b4e41a733567ea6606a886c30ab7c1096578f", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/wchar_t/front_constexpr_neg.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2Ffront_constexpr_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2Ffront_constexpr_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2Ffront_constexpr_neg.cc?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17 -D_GLIBCXX_ASSERTIONS\" }\n+// { dg-do compile { target c++17 xfail *-*-* } }\n+\n+#include <string_view>\n+\n+typedef std::wstring_view string_view_type;\n+\n+constexpr wchar_t\n+front()\n+{\n+  string_view_type s(L\"\");\n+  return s.front();\n+}\n+\n+static_assert(front() != L'a'); // { dg-error \"non-constant condition\" }\n+\n+// { dg-prune-output \"in 'constexpr' expansion\" }\n+// { dg-prune-output \"failed_assertion\" }"}, {"sha": "ee4b19e9e7b423eb447a8675d3576bba46721cdb", "filename": "libstdc++-v3/testsuite/25_algorithms/lower_bound/debug/constexpr_partitioned_neg.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fdebug%2Fconstexpr_partitioned_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fdebug%2Fconstexpr_partitioned_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fdebug%2Fconstexpr_partitioned_neg.cc?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a xfail *-*-* } }\n+// { dg-require-debug-mode { } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+struct A\n+{\n+  int _i;\n+\n+  constexpr bool\n+  operator<(const A& a) const\n+  { return _i < a._i; }\n+};\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<A, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 5, 8, 9, 10, 11}};\n+\n+  constexpr A a6{ 6 };\n+  const auto it = std::lower_bound(ca0.begin(), ca0.end(), a6);\n+\n+  return true;\n+}\n+\n+static_assert(test()); // { dg-error \"\" }\n+\n+// { dg-prune-output \"failed_assertion\" }\n+// { dg-prune-output \"in 'constexpr'\" }"}, {"sha": "01eb38a8807c873cedee59b16eb4e66adb6a2150", "filename": "libstdc++-v3/testsuite/25_algorithms/lower_bound/debug/constexpr_partitioned_pred_neg.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fdebug%2Fconstexpr_partitioned_pred_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fdebug%2Fconstexpr_partitioned_pred_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fdebug%2Fconstexpr_partitioned_pred_neg.cc?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a xfail *-*-* } }\n+// { dg-require-debug-mode { } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 5, 8, 9, 10, 11}};\n+\n+  const auto it = std::lower_bound(ca0.begin(), ca0.end(), 6, std::less<int>());\n+\n+  return true;\n+}\n+\n+static_assert(test()); // { dg-error \"\" }\n+\n+// { dg-prune-output \"failed_assertion\" }\n+// { dg-prune-output \"in 'constexpr'\" }"}, {"sha": "787352aa94bb2bfaf70a58c9d3e6459bbf5e0f10", "filename": "libstdc++-v3/testsuite/25_algorithms/lower_bound/debug/constexpr_valid_range_neg.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fdebug%2Fconstexpr_valid_range_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fdebug%2Fconstexpr_valid_range_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fdebug%2Fconstexpr_valid_range_neg.cc?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -0,0 +1,52 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a xfail *-*-* } }\n+// { dg-require-debug-mode { } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+constexpr bool\n+test1()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+  const auto outbb = std::lower_bound(ca0.end(), ca0.begin(), 6);\n+\n+  return true;\n+}\n+\n+static_assert(test1()); // { dg-error \"\" }\n+\n+constexpr bool\n+test2()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+  const auto outcc = std::lower_bound(ca0.end(), ca0.begin(), 6,\n+\t\t\t\t      std::less<int>());\n+\n+  return true;\n+}\n+\n+static_assert(test2()); // { dg-error \"\" }\n+\n+// { dg-prune-output \"failed_assertion\" }\n+// { dg-prune-output \"in 'constexpr'\" }\n+"}, {"sha": "cdf4a3a2ed45ca696837a52b1412e85ca4a8856d", "filename": "libstdc++-v3/testsuite/25_algorithms/lower_bound/debug/partitioned_neg.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fdebug%2Fpartitioned_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fdebug%2Fpartitioned_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fdebug%2Fpartitioned_neg.cc?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <algorithm>\n+\n+struct A\n+{\n+  A(int i) : _i(i)\n+  { }\n+\n+  int _i;\n+\n+  bool\n+  operator<(const A& a) const\n+  { return _i < a._i; }\n+};\n+\n+void test01()\n+{\n+  A as[] = { 0, 1, 2, 0, 2, 3 };\n+  std::lower_bound(as, as + 6, A(1));\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9eda304674582477e68f7de95f54776ef7ed42e3", "filename": "libstdc++-v3/testsuite/25_algorithms/lower_bound/debug/partitioned_pred_neg.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fdebug%2Fpartitioned_pred_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fdebug%2Fpartitioned_pred_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fdebug%2Fpartitioned_pred_neg.cc?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <algorithm>\n+\n+void test01()\n+{\n+  int as[] = { 0, 1, 0, 2, 3 };\n+  std::lower_bound(as, as + 5, 1, std::less<int>());\n+}\n+\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "716cdfa85ae992e8b82033f46bb119e2090d2063", "filename": "libstdc++-v3/testsuite/25_algorithms/upper_bound/debug/constexpr_partitioned_neg.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fdebug%2Fconstexpr_partitioned_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fdebug%2Fconstexpr_partitioned_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fdebug%2Fconstexpr_partitioned_neg.cc?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a xfail *-*-* } }\n+// { dg-require-debug-mode { } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+struct A\n+{\n+  int _i;\n+\n+  constexpr bool\n+  operator<(const A& a) const\n+  { return _i == a._i; }\n+};\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<A, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 5, 8, 9, 10, 11}};\n+\n+  constexpr A a6{ 6 };\n+  const auto it = std::upper_bound(ca0.begin(), ca0.end(), a6);\n+\n+  return true;\n+}\n+\n+static_assert(test()); // { dg-error \"\" }\n+\n+// { dg-prune-output \"failed_assertion\" }\n+// { dg-prune-output \"in 'constexpr'\" }"}, {"sha": "2307e17bfa58afcbabfb9bb0f0a02b07ccb246fa", "filename": "libstdc++-v3/testsuite/25_algorithms/upper_bound/debug/constexpr_partitioned_pred_neg.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fdebug%2Fconstexpr_partitioned_pred_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fdebug%2Fconstexpr_partitioned_pred_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fdebug%2Fconstexpr_partitioned_pred_neg.cc?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a xfail *-*-* } }\n+// { dg-require-debug-mode { } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 11}};\n+\n+  const auto it = std::upper_bound(ca0.begin(), ca0.end(), 6, std::less<int>());\n+\n+  return true;\n+}\n+\n+static_assert(test()); // { dg-error \"\" }\n+\n+// { dg-prune-output \"failed_assertion\" }\n+// { dg-prune-output \"in 'constexpr'\" }"}, {"sha": "bcce2c48a1faee6a52bb40a624e825762f86d507", "filename": "libstdc++-v3/testsuite/25_algorithms/upper_bound/debug/constexpr_valid_range_neg.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fdebug%2Fconstexpr_valid_range_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fdebug%2Fconstexpr_valid_range_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fdebug%2Fconstexpr_valid_range_neg.cc?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -0,0 +1,51 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a xfail *-*-* } }\n+// { dg-require-debug-mode { } }\n+\n+#include <algorithm>\n+#include <array>\n+\n+constexpr bool\n+test1()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+  const auto outbb = std::upper_bound(ca0.end(), ca0.begin(), 6);\n+\n+  return true;\n+}\n+\n+static_assert(test1()); // { dg-error \"\" }\n+\n+constexpr bool\n+test2()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+  const auto outcc = std::upper_bound(ca0.end(), ca0.begin(), 6,\n+\t\t\t\t      std::less<int>());\n+\n+  return true;\n+}\n+\n+static_assert(test2()); // { dg-error \"\" }\n+\n+// { dg-prune-output \"failed_assertion\" }\n+// { dg-prune-output \"in 'constexpr'\" }"}, {"sha": "cbae81a08f30bf668f3a8f9d961ba200153941f2", "filename": "libstdc++-v3/testsuite/25_algorithms/upper_bound/debug/partitioned_neg.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fdebug%2Fpartitioned_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fdebug%2Fpartitioned_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fdebug%2Fpartitioned_neg.cc?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <algorithm>\n+\n+struct A\n+{\n+  A(int i) : _i(i)\n+  { }\n+\n+  int _i;\n+\n+  bool\n+  operator<(const A& a) const\n+  { return _i < a._i; }\n+};\n+\n+void test01()\n+{\n+  A as[] = { 0, 2, 1, 3, 4, 5 };\n+  std::upper_bound(as, as + 6, A(1));\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5a42c2b32c08a0cc01bea5f9a4f5fd8242bf43a9", "filename": "libstdc++-v3/testsuite/25_algorithms/upper_bound/debug/partitioned_pred_neg.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fdebug%2Fpartitioned_pred_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fdebug%2Fpartitioned_pred_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fdebug%2Fpartitioned_pred_neg.cc?ref=38b17c27ce5a8e0cc5baa14697d4b5542b91b9d1", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <algorithm>\n+\n+void test01()\n+{\n+  int as[] = { 0, 2, 1, 3, 4 };\n+  std::upper_bound(as, as + 5, 1, std::less<int>());\n+}\n+\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}]}