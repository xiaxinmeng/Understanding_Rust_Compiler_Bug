{"sha": "8c292b10e88753bcac440c44577eeb7ae7171232", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMyOTJiMTBlODg3NTNiY2FjNDQwYzQ0NTc3ZWViN2FlNzE3MTIzMg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-04-16T18:50:59Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-04-16T18:50:59Z"}, "message": "predicates.md (register_mixssei387nonimm_operand): New.\n\n\t* config/i386/predicates.md (register_mixssei387nonimm_operand): New.\n\t* config/i386/i386.md (*fop_<mode>_1_mixed): Merge with\n\t*fop_<mode>_1_sse using enabled attribute.  Use\n\tregister_mixssei387nonimm_operand operand 1 predicate. Change\n\talternative 3 constraints from \"x\" to \"v\".\n\nFrom-SVN: r222154", "tree": {"sha": "8b21b808fe8eccb53041cbe3de00992349c4f07e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b21b808fe8eccb53041cbe3de00992349c4f07e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c292b10e88753bcac440c44577eeb7ae7171232", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c292b10e88753bcac440c44577eeb7ae7171232", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c292b10e88753bcac440c44577eeb7ae7171232", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c292b10e88753bcac440c44577eeb7ae7171232/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fe7a6ae47f89db1dc8cd57127c67c1490d8cd152", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe7a6ae47f89db1dc8cd57127c67c1490d8cd152", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe7a6ae47f89db1dc8cd57127c67c1490d8cd152"}], "stats": {"total": 74, "additions": 38, "deletions": 36}, "files": [{"sha": "188430058cdc926f57fe3bfe28c4405292f8fa95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c292b10e88753bcac440c44577eeb7ae7171232/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c292b10e88753bcac440c44577eeb7ae7171232/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c292b10e88753bcac440c44577eeb7ae7171232", "patch": "@@ -1,3 +1,11 @@\n+2015-04-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/predicates.md (register_mixssei387nonimm_operand): New.\n+\t* config/i386/i386.md (*fop_<mode>_1_mixed): Merge with\n+\t*fop_<mode>_1_sse using enabled attribute.  Use\n+\tregister_mixssei387nonimm_operand operand 1 predicate. Change\n+\talternative 3 constraints from \"x\" to \"v\".\n+\n 2015-04-16  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/65774"}, {"sha": "417ae308970888ccb573398153fc98a455f26290", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 24, "deletions": 36, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c292b10e88753bcac440c44577eeb7ae7171232/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c292b10e88753bcac440c44577eeb7ae7171232/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=8c292b10e88753bcac440c44577eeb7ae7171232", "patch": "@@ -13602,12 +13602,26 @@\n \t   (const_string \"fop\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*rcpsf2_sse\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n+\t(unspec:SF [(match_operand:SF 1 \"nonimmediate_operand\" \"xm\")]\n+\t\t   UNSPEC_RCP))]\n+  \"TARGET_SSE_MATH\"\n+  \"%vrcpss\\t{%1, %d0|%d0, %1}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"atom_sse_attr\" \"rcp\")\n+   (set_attr \"btver2_sse_attr\" \"rcp\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"SF\")])\n+\n (define_insn \"*fop_<mode>_1_mixed\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=f,f,x,x\")\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=f,f,x,v\")\n \t(match_operator:MODEF 3 \"binary_fp_operator\"\n-\t  [(match_operand:MODEF 1 \"nonimmediate_operand\" \"0,fm,0,x\")\n-\t   (match_operand:MODEF 2 \"nonimmediate_operand\" \"fm,0,xm,xm\")]))]\n-  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_MIX_SSE_I387\n+\t  [(match_operand:MODEF 1\n+\t     \"register_mixssei387nonimm_operand\" \"0,fm,0,v\")\n+\t   (match_operand:MODEF 2\n+\t     \"nonimmediate_operand\"\t\t \"fm,0,xm,vm\")]))]\n+  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n    && !COMMUTATIVE_ARITH_P (operands[3])\n    && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"* return output_387_binary_op (insn, operands);\"\n@@ -13628,38 +13642,12 @@\n               (const_string \"fop\")))\n    (set_attr \"isa\" \"*,*,noavx,avx\")\n    (set_attr \"prefix\" \"orig,orig,orig,vex\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*rcpsf2_sse\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n-\t(unspec:SF [(match_operand:SF 1 \"nonimmediate_operand\" \"xm\")]\n-\t\t   UNSPEC_RCP))]\n-  \"TARGET_SSE_MATH\"\n-  \"%vrcpss\\t{%1, %d0|%d0, %1}\"\n-  [(set_attr \"type\" \"sse\")\n-   (set_attr \"atom_sse_attr\" \"rcp\")\n-   (set_attr \"btver2_sse_attr\" \"rcp\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_insn \"*fop_<mode>_1_sse\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x\")\n-\t(match_operator:MODEF 3 \"binary_fp_operator\"\n-\t  [(match_operand:MODEF 1 \"register_operand\" \"0,x\")\n-\t   (match_operand:MODEF 2 \"nonimmediate_operand\" \"xm,xm\")]))]\n-  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-   && !COMMUTATIVE_ARITH_P (operands[3])\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\")\n-        (cond [(match_operand:MODEF 3 \"mult_operator\")\n-                 (const_string \"ssemul\")\n-\t       (match_operand:MODEF 3 \"div_operator\")\n-                 (const_string \"ssediv\")\n-              ]\n-              (const_string \"sseadd\")))\n-   (set_attr \"isa\" \"noavx,avx\")\n-   (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set (attr \"enabled\")\n+     (cond [(eq_attr \"alternative\" \"0,1\")\n+              (symbol_ref \"TARGET_MIX_SSE_I387\")\n+\t   ]\n+           (const_string \"*\")))])\n \n ;; This pattern is not fully shadowed by the pattern above.\n (define_insn \"*fop_<mode>_1_i387\""}, {"sha": "278d3cc6ef0c62348074a7a640b5168130e303d9", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c292b10e88753bcac440c44577eeb7ae7171232/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c292b10e88753bcac440c44577eeb7ae7171232/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=8c292b10e88753bcac440c44577eeb7ae7171232", "patch": "@@ -115,6 +115,12 @@\n     (match_operand 0 \"nonmemory_operand\")\n     (match_operand 0 \"general_operand\")))\n \n+;; Match register operands, include memory operand for TARGET_MIX_SSE_I387.\n+(define_predicate \"register_mixssei387nonimm_operand\"\n+  (if_then_else (match_test \"TARGET_MIX_SSE_I387\")\n+    (match_operand 0 \"nonimmediate_operand\")\n+    (match_operand 0 \"register_operand\")))\n+\n ;; Return true if VALUE is symbol reference\n (define_predicate \"symbol_operand\"\n   (match_code \"symbol_ref\"))"}]}