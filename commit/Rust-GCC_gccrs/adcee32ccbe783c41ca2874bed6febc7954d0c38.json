{"sha": "adcee32ccbe783c41ca2874bed6febc7954d0c38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRjZWUzMmNjYmU3ODNjNDFjYTI4NzRiZWQ2ZmViYzc5NTRkMGMzOA==", "commit": {"author": {"name": "Toon Moene", "email": "toon@moene.indiv.nluug.nl", "date": "2000-11-15T18:26:42Z"}, "committer": {"name": "Toon Moene", "email": "toon@gcc.gnu.org", "date": "2000-11-15T18:26:42Z"}, "message": "configure.in: See if `mkstemp' is available.\n\n2000-11-15  Toon Moene  <toon@moene.indiv.nluug.nl>\n\n\t* libI77/configure.in: See if `mkstemp' is available.\n\t* libI77/configure: Regenerate.\n\t* libI77/open.c: Use `mkstemp' to create scratch\n\tfile atomically.\n\nFrom-SVN: r37484", "tree": {"sha": "906e2d26d534b15d1e3cb47e917eca58b0681a79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/906e2d26d534b15d1e3cb47e917eca58b0681a79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adcee32ccbe783c41ca2874bed6febc7954d0c38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adcee32ccbe783c41ca2874bed6febc7954d0c38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adcee32ccbe783c41ca2874bed6febc7954d0c38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adcee32ccbe783c41ca2874bed6febc7954d0c38/comments", "author": null, "committer": null, "parents": [{"sha": "0437a5a8a8a1890e3ce2a4a0dbce8901cfab9a52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0437a5a8a8a1890e3ce2a4a0dbce8901cfab9a52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0437a5a8a8a1890e3ce2a4a0dbce8901cfab9a52"}], "stats": {"total": 92, "additions": 85, "deletions": 7}, "files": [{"sha": "9f3fbfbab5b57415b8f74d50c5595eee4d2c7742", "filename": "libf2c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcee32ccbe783c41ca2874bed6febc7954d0c38/libf2c%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcee32ccbe783c41ca2874bed6febc7954d0c38/libf2c%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FChangeLog?ref=adcee32ccbe783c41ca2874bed6febc7954d0c38", "patch": "@@ -1,3 +1,10 @@\n+2000-11-15  Toon Moene  <toon@moene.indiv.nluug.nl>\n+\n+\t* libI77/configure.in: See if `mkstemp' is available.\n+\t* libI77/configure: Regenerate.\n+\t* libI77/open.c: Use `mkstemp' to create scratch\n+\tfile atomically.\n+\n 2000-07-03  Donn Terry  (donnte@microsoft.com)\n         * libU77/aclocal.m4: check for 2 argument gettimeofday without\n \tstruct timezone"}, {"sha": "afb87e3fb04dafc0303cce39ced4c3a7c0b0b30d", "filename": "libf2c/libI77/configure", "status": "modified", "additions": 61, "deletions": 6, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcee32ccbe783c41ca2874bed6febc7954d0c38/libf2c%2FlibI77%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcee32ccbe783c41ca2874bed6febc7954d0c38/libf2c%2FlibI77%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fconfigure?ref=adcee32ccbe783c41ca2874bed6febc7954d0c38", "patch": "@@ -1338,7 +1338,7 @@ else\n   echo \"$ac_t\"\"no\" 1>&6\n fi\n \n-for ac_func in tempnam\n+for ac_func in mkstemp\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n echo \"configure:1345: checking for $ac_func\" >&5\n@@ -1393,25 +1393,80 @@ else\n fi\n done\n \n+for ac_func in tempnam\n+do\n+echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n+echo \"configure:1400: checking for $ac_func\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  cat > conftest.$ac_ext <<EOF\n+#line 1405 \"configure\"\n+#include \"confdefs.h\"\n+/* System header to define __stub macros and hopefully few prototypes,\n+    which can conflict with char $ac_func(); below.  */\n+#include <assert.h>\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+/* We use char because int might match the return type of a gcc2\n+    builtin and then its argument prototype would still apply.  */\n+char $ac_func();\n+\n+int main() {\n+\n+/* The GNU C library defines this for functions which it implements\n+    to always fail with ENOSYS.  Some functions are actually named\n+    something starting with __ and the normal name is an alias.  */\n+#if defined (__stub_$ac_func) || defined (__stub___$ac_func)\n+choke me\n+#else\n+$ac_func();\n+#endif\n+\n+; return 0; }\n+EOF\n+if { (eval echo configure:1428: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+  rm -rf conftest*\n+  eval \"ac_cv_func_$ac_func=yes\"\n+else\n+  echo \"configure: failed program was:\" >&5\n+  cat conftest.$ac_ext >&5\n+  rm -rf conftest*\n+  eval \"ac_cv_func_$ac_func=no\"\n+fi\n+rm -f conftest*\n+fi\n+\n+if eval \"test \\\"`echo '$ac_cv_func_'$ac_func`\\\" = yes\"; then\n+  echo \"$ac_t\"\"yes\" 1>&6\n+    ac_tr_func=HAVE_`echo $ac_func | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`\n+  cat >> confdefs.h <<EOF\n+#define $ac_tr_func 1\n+EOF\n+ \n+else\n+  echo \"$ac_t\"\"no\" 1>&6\n+fi\n+done\n+\n \n # posix will guarantee the right behaviour for sprintf, else we can't be\n # sure; HEADER_STDC wouldn't be the right check in sunos4, for instance.\n # However, on my sunos4/gcc setup unistd.h leads us wrongly to believe\n # we're posix-conformant, so always do the test.\n echo $ac_n \"checking for ansi/posix sprintf result\"\"... $ac_c\" 1>&6\n-echo \"configure:1403: checking for ansi/posix sprintf result\" >&5\n+echo \"configure:1458: checking for ansi/posix sprintf result\" >&5\n if test \"$cross_compiling\" = yes; then\n   g77_cv_sys_sprintf_ansi=no\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 1408 \"configure\"\n+#line 1463 \"configure\"\n #include \"confdefs.h\"\n   #include <stdio.h>\n     /* does sprintf return the number of chars transferred? */\n     main () {char foo[2]; (sprintf(foo, \"1\") == 1) ? exit(0) : exit(1);}\n \n EOF\n-if { (eval echo configure:1415: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+if { (eval echo configure:1470: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n then\n   g77_cv_sys_sprintf_ansi=yes\n else\n@@ -1442,9 +1497,9 @@ fi\n \n # define NON_ANSI_RW_MODES on unix (can't hurt)\n echo $ac_n \"checking NON_ANSI_RW_MODES\"\"... $ac_c\" 1>&6\n-echo \"configure:1446: checking NON_ANSI_RW_MODES\" >&5\n+echo \"configure:1501: checking NON_ANSI_RW_MODES\" >&5\n cat > conftest.$ac_ext <<EOF\n-#line 1448 \"configure\"\n+#line 1503 \"configure\"\n #include \"confdefs.h\"\n #ifdef unix\n   yes"}, {"sha": "e5877c0e593e94eee9b766e30e75fbbada70edb4", "filename": "libf2c/libI77/configure.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcee32ccbe783c41ca2874bed6febc7954d0c38/libf2c%2FlibI77%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcee32ccbe783c41ca2874bed6febc7954d0c38/libf2c%2FlibI77%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fconfigure.in?ref=adcee32ccbe783c41ca2874bed6febc7954d0c38", "patch": "@@ -129,6 +129,7 @@ else\n   AC_MSG_RESULT(no)\n fi\n \n+AC_CHECK_FUNCS(mkstemp)\n AC_CHECK_FUNCS(tempnam)\n \n # posix will guarantee the right behaviour for sprintf, else we can't be"}, {"sha": "830dca5a359e094aea138ea30bac9f069ba5a6e0", "filename": "libf2c/libI77/open.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcee32ccbe783c41ca2874bed6febc7954d0c38/libf2c%2FlibI77%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcee32ccbe783c41ca2874bed6febc7954d0c38/libf2c%2FlibI77%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fopen.c?ref=adcee32ccbe783c41ca2874bed6febc7954d0c38", "patch": "@@ -133,10 +133,11 @@ integer f_open(olist *a)\n #endif\n {\tunit *b;\n \tinteger rv;\n-\tchar buf[256], *s;\n+\tchar buf[256], *s, *env;\n \tcllist x;\n \tint ufmt;\n \tFILE *tf;\n+\tint fd, len;\n #ifndef NON_UNIX_STDIO\n \tint n;\n #endif\n@@ -209,6 +210,19 @@ integer f_open(olist *a)\n \t case 's':\n \t case 'S':\n \t\tb->uscrtch=1;\n+#ifdef HAVE_MKSTEMP             /* Allow use of TMPDIR preferentially. */\n+\t\tenv = getenv(\"TMPDIR\");\n+\t\tif (!env) env = getenv(\"TEMP\");\n+\t\tif (!env) env = \"/tmp\";\n+\t\tlen = strlen(env);\n+\t\tif (len > 256 - sizeof \"/tmp.FXXXXXX\")\n+\t\t  err (a->oerr, 132, \"open\");\n+\t\tstrcpy(buf, env);\n+\t\tstrcat(buf, \"/tmp.FXXXXXX\");\n+\t\tfd = mkstemp(buf);\n+\t\tif (fd == -1 || close(fd))\n+\t\t  err (a->oerr, 132, \"open\");\n+#else /* ! defined (HAVE_MKSTEMP) */\n #ifdef HAVE_TEMPNAM\t\t/* Allow use of TMPDIR preferentially. */\n \t\ts = tempnam (0, buf);\n \t\tif (strlen (s) >= sizeof (buf))\n@@ -223,6 +237,7 @@ integer f_open(olist *a)\n \t\t(void) mktemp(buf);\n #endif\n #endif /* ! defined (HAVE_TEMPNAM) */\n+#endif /* ! defined (HAVE_MKSTEMP) */\n \t\tgoto replace;\n \tcase 'n':\n \tcase 'N':"}]}