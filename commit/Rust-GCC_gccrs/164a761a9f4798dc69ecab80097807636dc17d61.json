{"sha": "164a761a9f4798dc69ecab80097807636dc17d61", "node_id": "C_kwDOANBUbNoAKDE2NGE3NjFhOWY0Nzk4ZGM2OWVjYWI4MDA5NzgwNzYzNmRjMTdkNjE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-02-14T12:46:10Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-02-14T13:03:31Z"}, "message": "libstdc++: Use __cpp_concepts instead of custom macro [PR103891]\n\nWith the new value of __cpp_concepts required by P2493, we can test\nwhether the compiler supports conditionally trivial special members.\nThis allows us to remove the workaround that disables fully-constexpr\nstd::variant for Clang. Now it should work for non-GCC compilers (such\nas future releases of Clang) that support conditionally trivial\ndestructors and define the new value of __cpp_concepts.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/103891\n\t* include/bits/c++config (_GLIBCXX_HAVE_COND_TRIVIAL_SPECIAL_MEMBERS):\n\tRemove.\n\t* include/std/variant: Check feature test macros instead.\n\t* include/std/version: Likewise.", "tree": {"sha": "56fcdebdec88734259b5fe23a5ba564993aac953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56fcdebdec88734259b5fe23a5ba564993aac953"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/164a761a9f4798dc69ecab80097807636dc17d61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/164a761a9f4798dc69ecab80097807636dc17d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/164a761a9f4798dc69ecab80097807636dc17d61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/164a761a9f4798dc69ecab80097807636dc17d61/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "220d85fdf0b5d61e212289fd6ec763980700c572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/220d85fdf0b5d61e212289fd6ec763980700c572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/220d85fdf0b5d61e212289fd6ec763980700c572"}], "stats": {"total": 23, "additions": 8, "deletions": 15}, "files": [{"sha": "c64b61b3c90ace32d92f8d649a5670585c1e630f", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/164a761a9f4798dc69ecab80097807636dc17d61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/164a761a9f4798dc69ecab80097807636dc17d61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=164a761a9f4798dc69ecab80097807636dc17d61", "patch": "@@ -810,11 +810,6 @@ namespace std\n \n #undef _GLIBCXX_HAS_BUILTIN\n \n-#if __cplusplus >= 202002L && __cpp_concepts && __GNUC__ >= 12\n-// XXX workaround for missing feature test macro for P0848R3 (see P2493R0).\n-# define _GLIBCXX_HAVE_COND_TRIVIAL_SPECIAL_MEMBERS 1\n-#endif\n-\n // PSTL configuration\n \n #if __cplusplus >= 201703L"}, {"sha": "beed396fccb87bf913c5d8ff0558242675aa02f9", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/164a761a9f4798dc69ecab80097807636dc17d61/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/164a761a9f4798dc69ecab80097807636dc17d61/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=164a761a9f4798dc69ecab80097807636dc17d61", "patch": "@@ -44,24 +44,22 @@\n #include <bits/stl_iterator_base_funcs.h>\n #include <bits/stl_construct.h>\n #include <bits/utility.h> // in_place_index_t\n-#ifndef _GLIBCXX_HAVE_COND_TRIVIAL_SPECIAL_MEMBERS\n-# include <ext/aligned_buffer.h>\n-#endif\n #if __cplusplus >= 202002L\n # include <compare>\n #endif\n \n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-#ifdef _GLIBCXX_HAVE_COND_TRIVIAL_SPECIAL_MEMBERS\n+#if __cpp_concepts >= 202002L && __cpp_constexpr >= 201811L\n // P2231R1 constexpr needs constexpr unions and constrained destructors.\n # define __cpp_lib_variant 202106L\n #else\n+# include <ext/aligned_buffer.h> // Use __aligned_membuf instead of union.\n # define __cpp_lib_variant 202102L\n #endif\n \n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   template<typename... _Types> class tuple;\n   template<typename... _Types> class variant;\n   template <typename> struct hash;"}, {"sha": "24311ee05c87907f3bdac476cfb9e498e0885282", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/164a761a9f4798dc69ecab80097807636dc17d61/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/164a761a9f4798dc69ecab80097807636dc17d61/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=164a761a9f4798dc69ecab80097807636dc17d61", "patch": "@@ -175,7 +175,7 @@\n # define __cpp_lib_to_chars 201611L\n #endif\n #define __cpp_lib_unordered_map_try_emplace 201411L\n-#ifndef _GLIBCXX_HAVE_COND_TRIVIAL_SPECIAL_MEMBERS\n+#if !(__cplusplus >= 202002L && __cpp_concepts >= 202002L)\n // N.B. updated value in C++20\n # define __cpp_lib_variant 202102L\n #endif\n@@ -292,7 +292,7 @@\n # endif\n #define __cpp_lib_to_address 201711L\n #define __cpp_lib_to_array 201907L\n-#ifdef _GLIBCXX_HAVE_COND_TRIVIAL_SPECIAL_MEMBERS\n+#if __cplusplus >= 202002L && __cpp_concepts >= 202002L\n # define __cpp_lib_variant 202106L\n #endif\n #endif"}]}