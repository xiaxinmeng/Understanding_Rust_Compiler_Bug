{"sha": "68e11b42afd5319521eaddf015c2d35aeb1d8c8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhlMTFiNDJhZmQ1MzE5NTIxZWFkZGYwMTVjMmQzNWFlYjFkOGM4ZA==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2005-03-17T03:51:09Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2005-03-17T03:51:09Z"}, "message": "patch to fix extraneous nop at function start, bug from David Mosberger\n\npatch to fix extraneous nop at function start, bug from David Mosberger\n* config/ia64/ia64.c (issue_nops_and_insn): Check first_insn attribute,\nand return without creating new state if before_nops_num is nonzero.\n* config/ia64/ia64.md (first_insn): New attribute.\n(alloc): Set it to yes.\n\nFrom-SVN: r96597", "tree": {"sha": "30446153ed8ba89767592731d666e875975bbbff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30446153ed8ba89767592731d666e875975bbbff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68e11b42afd5319521eaddf015c2d35aeb1d8c8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e11b42afd5319521eaddf015c2d35aeb1d8c8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e11b42afd5319521eaddf015c2d35aeb1d8c8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e11b42afd5319521eaddf015c2d35aeb1d8c8d/comments", "author": null, "committer": null, "parents": [{"sha": "fa41042fffc4553e12fcbaf3fa21b50736274e56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa41042fffc4553e12fcbaf3fa21b50736274e56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa41042fffc4553e12fcbaf3fa21b50736274e56"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "d00f7ca2a38c1636fdc30c714a69417c7fe02820", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e11b42afd5319521eaddf015c2d35aeb1d8c8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e11b42afd5319521eaddf015c2d35aeb1d8c8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68e11b42afd5319521eaddf015c2d35aeb1d8c8d", "patch": "@@ -1,3 +1,10 @@\n+2005-03-16  James E. Wilson  <wilson@specifixinc.com>\n+\n+\t* config/ia64/ia64.c (issue_nops_and_insn): Check first_insn attribute,\n+\tand return without creating new state if before_nops_num is nonzero.\n+\t* config/ia64/ia64.md (first_insn): New attribute.\n+\t(alloc): Set it to yes.\n+\n 2005-03-16  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* tree-vectorizer.c (new_vec_stmt_info): Initialize"}, {"sha": "0b28464afe88e4052dcce391c004e8443c6b4c1b", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e11b42afd5319521eaddf015c2d35aeb1d8c8d/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e11b42afd5319521eaddf015c2d35aeb1d8c8d/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=68e11b42afd5319521eaddf015c2d35aeb1d8c8d", "patch": "@@ -6433,6 +6433,17 @@ issue_nops_and_insn (struct bundle_state *originator, int before_nops_num,\n     }\n   else\n     {\n+      /* If this is an insn that must be first in a group, then don't allow\n+\t nops to be emitted before it.  Currently, alloc is the only such\n+\t supported instruction.  */\n+      /* ??? The bundling automatons should handle this for us, but they do\n+\t not yet have support for the first_insn attribute.  */\n+      if (before_nops_num > 0 && get_attr_first_insn (insn) == FIRST_INSN_YES)\n+\t{\n+\t  free_bundle_state (curr_state);\n+\t  return;\n+\t}\n+\n       state_transition (curr_state->dfa_state, dfa_pre_cycle_insn);\n       state_transition (curr_state->dfa_state, NULL);\n       curr_state->cost++;"}, {"sha": "365c0a8ce2465776653b6a45a204b2d8e9d4f4ae", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e11b42afd5319521eaddf015c2d35aeb1d8c8d/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e11b42afd5319521eaddf015c2d35aeb1d8c8d/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=68e11b42afd5319521eaddf015c2d35aeb1d8c8d", "patch": "@@ -163,6 +163,11 @@\n \n (define_attr \"empty\" \"no,yes\" (const_string \"no\"))\n \n+;; True iff this insn must be the first insn of an instruction group.\n+;; This is true for the alloc instruction, and will also be true of others\n+;; when we have full intrinsics support.\n+\n+(define_attr \"first_insn\" \"no,yes\" (const_string \"no\"))\n \f\n ;; DFA descriptions of ia64 processors used for insn scheduling and\n ;; bundling.\n@@ -5703,7 +5708,8 @@\n   \"\"\n   \"alloc %0 = ar.pfs, %1, %2, %3, %4\"\n   [(set_attr \"itanium_class\" \"syst_m0\")\n-   (set_attr \"predicable\" \"no\")])\n+   (set_attr \"predicable\" \"no\")\n+   (set_attr \"first_insn\" \"yes\")])\n \n ;; Modifies ar.unat\n (define_expand \"gr_spill\""}]}