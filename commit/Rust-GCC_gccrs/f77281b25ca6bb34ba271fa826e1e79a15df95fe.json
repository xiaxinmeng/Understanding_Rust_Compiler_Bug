{"sha": "f77281b25ca6bb34ba271fa826e1e79a15df95fe", "node_id": "C_kwDOANBUbNoAKGY3NzI4MWIyNWNhNmJiMzRiYTI3MWZhODI2ZTFlNzlhMTVkZjk1ZmU", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2022-08-10T17:35:41Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2022-10-12T19:50:21Z"}, "message": "libstdc++: Add __gnu_debug::basic_string<>::compare overloads\n\nRather than adding those implementations we are adding a:\nusing _Base::compare;\n\nso that any compare method not implemented at __gnu_debug::basic_string\nlevel are injected from the base class.\n\nAlso review how __gnu_debug::basic_string is tested. Now require to define\n_GLIBCXX_TEST_DEBUG_STRING when running 'make check-debug'.\n\nlibstdc++-v3/ChangeLog\n\n\t* include/debug/string: Add using _Base::compare.\n\t(__gnu_debug::basic_string<>::compare(const basic_string<>&)): Remove.\n\t(__gnu_debug::basic_string<>::compare(size_type, size_type, const basic_string<>&)):\n\tRemove.\n\t(__gnu_debug::basic_string<>::compare(size_type, size_type, const basic_string<>&,\n\tsize_type, size_type)): Remove.\n\t* testsuite/util/testsuite_string.h [_GLIBCXX_TEST_DEBUG_STRING]: Include <debug/string>.\n\t* testsuite/21_strings/basic_string/operations/compare/char/1.cc: Include testsuite_string.h\n\tand use __gnu_test::string.\n\t* testsuite/21_strings/basic_string/operations/compare/char/13650.cc: Likewise.\n\t* testsuite/21_strings/basic_string/operations/compare/char/2.cc: Likewise.\n\t* testsuite/21_strings/basic_string/operations/rfind/char/1.cc: Likewise.\n\t* testsuite/21_strings/basic_string/operations/rfind/char/2.cc: Likewise.\n\t* testsuite/21_strings/basic_string/operations/rfind/char/3.cc: Likewise.\n\t* testsuite/21_strings/basic_string/operations/compare/wchar_t/1.cc:\n\tInclude testsuite_string.h\n\tand use __gnu_test::wstring.\n\t* testsuite/21_strings/basic_string/operations/compare/wchar_t/13650.cc: Likewise.\n\t* testsuite/21_strings/basic_string/operations/compare/wchar_t/2.cc: Likewise.", "tree": {"sha": "96fd6c28ce4b209f4dcbbe5705f3294c95db8dc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96fd6c28ce4b209f4dcbbe5705f3294c95db8dc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f77281b25ca6bb34ba271fa826e1e79a15df95fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f77281b25ca6bb34ba271fa826e1e79a15df95fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f77281b25ca6bb34ba271fa826e1e79a15df95fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f77281b25ca6bb34ba271fa826e1e79a15df95fe/comments", "author": null, "committer": null, "parents": [{"sha": "bc0d700b574a22f12db7f7587ce885f64ebcbfb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc0d700b574a22f12db7f7587ce885f64ebcbfb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc0d700b574a22f12db7f7587ce885f64ebcbfb0"}], "stats": {"total": 91, "additions": 41, "deletions": 50}, "files": [{"sha": "574a78e3daca3bd1a8a3cfdfc277a1875c7ff6cc", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f77281b25ca6bb34ba271fa826e1e79a15df95fe/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f77281b25ca6bb34ba271fa826e1e79a15df95fe/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=f77281b25ca6bb34ba271fa826e1e79a15df95fe", "patch": "@@ -1023,29 +1023,19 @@ namespace __gnu_debug\n       substr(size_type __pos = 0, size_type __n = _Base::npos) const\n       { return basic_string(_Base::substr(__pos, __n)); }\n \n-      int\n-      compare(const basic_string& __str) const\n-      { return _Base::compare(__str); }\n-\n-      int\n-      compare(size_type __pos1, size_type __n1,\n-\t      const basic_string& __str) const\n-      { return _Base::compare(__pos1, __n1, __str); }\n-\n-      int\n-      compare(size_type __pos1, size_type __n1, const basic_string& __str,\n-\t      size_type __pos2, size_type __n2) const\n-      { return _Base::compare(__pos1, __n1, __str, __pos2, __n2); }\n+      using _Base::compare;\n \n+      _GLIBCXX20_CONSTEXPR\n       int\n-      compare(const _CharT* __s) const\n+      compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_string(__s);\n \treturn _Base::compare(__s);\n       }\n \n       //  _GLIBCXX_RESOLVE_LIB_DEFECTS\n       //  5. string::compare specification questionable\n+      _GLIBCXX20_CONSTEXPR\n       int\n       compare(size_type __pos1, size_type __n1, const _CharT* __s) const\n       {\n@@ -1055,6 +1045,7 @@ namespace __gnu_debug\n \n       //  _GLIBCXX_RESOLVE_LIB_DEFECTS\n       //  5. string::compare specification questionable\n+      _GLIBCXX20_CONSTEXPR\n       int\n       compare(size_type __pos1, size_type __n1,const _CharT* __s,\n \t      size_type __n2) const"}, {"sha": "c04b83c48961df763835937db6a366ae045f5383", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/compare/char/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f77281b25ca6bb34ba271fa826e1e79a15df95fe/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f77281b25ca6bb34ba271fa826e1e79a15df95fe/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fchar%2F1.cc?ref=f77281b25ca6bb34ba271fa826e1e79a15df95fe", "patch": "@@ -29,7 +29,7 @@\n // NB compare should be thought of as a lexographical compare, ie how\n // things would be sorted in a dictionary.\n \n-#include <string>\n+#include <testsuite_string.h>\n #include <cstring>\n #include <testsuite_hooks.h>\n \n@@ -67,7 +67,7 @@ test_value(int result, want_value expected)\n int \n test01()\n {\n-  using namespace std;\n+  using namespace __gnu_test;\n \n   string \tstr_0(\"costa rica\");\n   string \tstr_1(\"costa marbella\");"}, {"sha": "ce956235f83fbed78561aa6b24c98706f3b3f6ef", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/compare/char/13650.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f77281b25ca6bb34ba271fa826e1e79a15df95fe/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fchar%2F13650.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f77281b25ca6bb34ba271fa826e1e79a15df95fe/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fchar%2F13650.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fchar%2F13650.cc?ref=f77281b25ca6bb34ba271fa826e1e79a15df95fe", "patch": "@@ -19,13 +19,13 @@\n \n // 21.3.6.8 basic_string::compare [lib.string::compare]\n \n-#include <string>\n+#include <testsuite_string.h>\n #include <testsuite_hooks.h>\n \n // libstdc++/13650\n void test01()\n {\n-  using namespace std;\n+  using namespace __gnu_test;\n \n   const char lit_01[] = { 'w', 'e', '\\0', 'r', 'd' };\n   const char lit_02[] = { 'w', 'e', 'i', '\\0', 'd' };"}, {"sha": "fca154355ffe1dd9bf005833ac0b05fa471511ac", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/compare/char/2.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f77281b25ca6bb34ba271fa826e1e79a15df95fe/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f77281b25ca6bb34ba271fa826e1e79a15df95fe/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fchar%2F2.cc?ref=f77281b25ca6bb34ba271fa826e1e79a15df95fe", "patch": "@@ -19,14 +19,14 @@\n \n // [string::compare]\n \n-#include <string>\n+#include <testsuite_string.h>\n #include <testsuite_hooks.h>\n \n void\n test03()\n {\n   std::string_view str1(\"foobar\");\n-  std::string str2(\"foobar\");\n+  __gnu_test::string str2(\"foobar\");\n \n   auto x = str2.compare(str1);\n   VERIFY (x == 0);\n@@ -52,7 +52,7 @@ test03()\n void\n test04()\n {\n-  const std::string str(\"a\");\n+  const __gnu_test::string str(\"a\");\n   char c = 'a';\n   int res = str.compare(0, 1, &c, 1);\n   VERIFY ( !res );"}, {"sha": "aa5c1680045b23413ee42c545ff4087a4bf5b872", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/compare/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f77281b25ca6bb34ba271fa826e1e79a15df95fe/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f77281b25ca6bb34ba271fa826e1e79a15df95fe/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fwchar_t%2F1.cc?ref=f77281b25ca6bb34ba271fa826e1e79a15df95fe", "patch": "@@ -29,7 +29,7 @@\n // NB compare should be thought of as a lexographical compare, ie how\n // things would be sorted in a dictionary.\n \n-#include <string>\n+#include <testsuite_string.h>\n #include <testsuite_hooks.h>\n \n enum want_value {lt=0, z=1, gt=2};\n@@ -67,7 +67,7 @@ test_value(int result, want_value expected)\n int \n test01()\n {\n-  using namespace std;\n+  using namespace __gnu_test;\n \n   wstring \tstr_0(L\"costa rica\");\n   wstring \tstr_1(L\"costa marbella\");"}, {"sha": "f3dd4ebaf43b0db5b79104dec06dfb47f3cb6f74", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/compare/wchar_t/13650.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f77281b25ca6bb34ba271fa826e1e79a15df95fe/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fwchar_t%2F13650.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f77281b25ca6bb34ba271fa826e1e79a15df95fe/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fwchar_t%2F13650.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fwchar_t%2F13650.cc?ref=f77281b25ca6bb34ba271fa826e1e79a15df95fe", "patch": "@@ -19,13 +19,13 @@\n \n // 21.3.6.8 basic_string::compare [lib.string::compare]\n \n-#include <string>\n+#include <testsuite_string.h>\n #include <testsuite_hooks.h>\n \n // libstdc++/13650\n void test01()\n {\n-  using namespace std;\n+  using namespace __gnu_test;\n \n   const wchar_t lit_01[] = { L'w', L'e', L'\\0', L'r', L'd' };\n   const wchar_t lit_02[] = { L'w', L'e', L'i', L'\\0', L'd' };"}, {"sha": "c6d219a42ecf07802c53bdd8cebf05960953bcfe", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/compare/wchar_t/2.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f77281b25ca6bb34ba271fa826e1e79a15df95fe/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f77281b25ca6bb34ba271fa826e1e79a15df95fe/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcompare%2Fwchar_t%2F2.cc?ref=f77281b25ca6bb34ba271fa826e1e79a15df95fe", "patch": "@@ -19,14 +19,14 @@\n \n // [string::compare]\n \n-#include <string>\n+#include <testsuite_string.h>\n #include <testsuite_hooks.h>\n \n void\n test03()\n {\n   std::wstring_view str1(L\"foobar\");\n-  std::wstring str2(L\"foobar\");\n+  __gnu_test::wstring str2(L\"foobar\");\n \n   auto x = str2.compare(str1);\n   VERIFY (x == 0);\n@@ -52,7 +52,7 @@ test03()\n void\n test04()\n {\n-  const std::wstring str(L\"a\");\n+  const __gnu_test::wstring str(L\"a\");\n \n   wchar_t c = L'a';\n   int res = str.compare(0, 1, &c, 1);"}, {"sha": "76fcb0791179ea5b7f89898930d9bc2b9a6121e2", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/rfind/char/1.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f77281b25ca6bb34ba271fa826e1e79a15df95fe/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Frfind%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f77281b25ca6bb34ba271fa826e1e79a15df95fe/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Frfind%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Frfind%2Fchar%2F1.cc?ref=f77281b25ca6bb34ba271fa826e1e79a15df95fe", "patch": "@@ -17,23 +17,23 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-#include <string>\n+#include <testsuite_string.h>\n #include <testsuite_hooks.h>\n \n // 21.3.6.2 basic_string rfind\n void test01(void)\n {\n-  typedef std::string::size_type csize_type;\n-  typedef std::string::const_reference cref;\n-  typedef std::string::reference ref;\n-  csize_type npos = std::string::npos;\n+  typedef __gnu_test::string::size_type csize_type;\n+  typedef __gnu_test::string::const_reference cref;\n+  typedef __gnu_test::string::reference ref;\n+  csize_type npos = __gnu_test::string::npos;\n   csize_type csz01, csz02;\n \n   const char str_lit01[] = \"mave\";\n-  const std::string str01(\"mavericks, santa cruz\");\n-  std::string str02(str_lit01);\n-  std::string str03(\"s, s\");\n-  std::string str04;\n+  const __gnu_test::string str01(\"mavericks, santa cruz\");\n+  __gnu_test::string str02(str_lit01);\n+  __gnu_test::string str03(\"s, s\");\n+  __gnu_test::string str04;\n \n   // size_type rfind(const string&, size_type pos = 0) const;\n   csz01 = str01.rfind(str01);"}, {"sha": "9fecfcf80f14642bf0b3f4d92ea44e0b3e2b27ed", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/rfind/char/2.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f77281b25ca6bb34ba271fa826e1e79a15df95fe/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Frfind%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f77281b25ca6bb34ba271fa826e1e79a15df95fe/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Frfind%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Frfind%2Fchar%2F2.cc?ref=f77281b25ca6bb34ba271fa826e1e79a15df95fe", "patch": "@@ -17,28 +17,28 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-#include <string>\n+#include <testsuite_string.h>\n #include <testsuite_hooks.h>\n \n // 21.3.6.4 basic_string::find_last_of\n void test02()\n {\n-  std::string z(\"ab\");\n-  std::string::size_type pos;\n+  __gnu_test::string z(\"ab\");\n+  __gnu_test::string::size_type pos;\n   pos = z.find_last_of(\"ab\");\n   VERIFY( pos == 1 );\n   pos = z.find_last_of(\"Xa\");\n   VERIFY( pos == 0 );\n   pos = z.find_last_of(\"Xb\");\n   VERIFY( pos == 1 );\n   pos = z.find_last_of(\"XYZ\");\n-  VERIFY( pos == std::string::npos );\n+  VERIFY( pos == __gnu_test::string::npos );\n   pos = z.find_last_of('a');\n   VERIFY( pos == 0 );\n   pos = z.find_last_of('b');\n   VERIFY( pos == 1 );\n   pos = z.find_last_of('X');\n-  VERIFY( pos == std::string::npos );\n+  VERIFY( pos == __gnu_test::string::npos );\n }\n \n int main()"}, {"sha": "69471e67bf1f4dedd626c102a8ec2921047c4d4b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/rfind/char/3.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f77281b25ca6bb34ba271fa826e1e79a15df95fe/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Frfind%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f77281b25ca6bb34ba271fa826e1e79a15df95fe/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Frfind%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Frfind%2Fchar%2F3.cc?ref=f77281b25ca6bb34ba271fa826e1e79a15df95fe", "patch": "@@ -17,23 +17,23 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-#include <string>\n+#include <testsuite_string.h>\n #include <testsuite_hooks.h>\n \n // 21.3.6.6 basic_string::find_last_not_of\n void test03()\n {\n-  typedef std::string::size_type csize_type;\n-  std::string::size_type pos;\n-  csize_type npos = std::string::npos;\n+  typedef __gnu_test::string::size_type csize_type;\n+  __gnu_test::string::size_type pos;\n+  csize_type npos = __gnu_test::string::npos;\n \n-  std::string x;\n+  __gnu_test::string x;\n   pos = x.find_last_not_of('X');\n   VERIFY( pos == npos );\n   pos = x.find_last_not_of(\"XYZ\");\n   VERIFY( pos == npos );\n \n-  std::string y(\"a\");\n+  __gnu_test::string y(\"a\");\n   pos = y.find_last_not_of('X');\n   VERIFY( pos == 0 );\n   pos = y.find_last_not_of('a');\n@@ -43,7 +43,7 @@ void test03()\n   pos = y.find_last_not_of(\"a\");\n   VERIFY( pos == npos );\n \n-  std::string z(\"ab\");\n+  __gnu_test::string z(\"ab\");\n   pos = z.find_last_not_of('X');\n   VERIFY( pos == 1 );\n   pos = z.find_last_not_of(\"XYZ\");"}, {"sha": "7e61d984bdb00e760b89994ea54ab71b7bd88449", "filename": "libstdc++-v3/testsuite/util/testsuite_string.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f77281b25ca6bb34ba271fa826e1e79a15df95fe/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f77281b25ca6bb34ba271fa826e1e79a15df95fe/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_string.h?ref=f77281b25ca6bb34ba271fa826e1e79a15df95fe", "patch": "@@ -1,7 +1,7 @@\n #ifndef _GLIBCXX_TESTSUITE_STRING_H\n #define _GLIBCXX_TESTSUITE_STRING_H\n \n-#ifdef _GLIBCXX_DEBUG\n+#if defined(_GLIBCXX_DEBUG) && defined(_GLIBCXX_TEST_DEBUG_STRING)\n # include <debug/string>\n namespace __gnu_test\n {"}]}