{"sha": "192961ff27503085946caaa92b2f57d291258858", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkyOTYxZmYyNzUwMzA4NTk0NmNhYWE5MmIyZjU3ZDI5MTI1ODg1OA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2019-11-19T00:21:49Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2019-11-19T00:21:49Z"}, "message": "Change some bad uses of C2x attributes into pedwarns.\n\nCertain bad uses of C2x standard attributes (that is, attributes\ninside [[]] with only a name but no namespace specified) are\nconstraint violations, and so should be diagnosed with a pedwarn (or\nerror) where GCC currently uses a warning.  This patch implements this\nin some cases (not yet for attributes used on types, nor for some bad\nuses of fallthrough attributes).  Specifically, this applies to\nunknown standard attributes (taking care not to pedwarn for nodiscard,\nwhich is known but not implemented for C), and to all currently\nimplemented standard attributes in attribute declarations (including\nwhen mixed with fallthrough) and on statements.\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\ngcc/c:\n\t* c-decl.c (c_warn_unused_attributes): Use pedwarn not warning for\n\tstandard attributes.\n\t* c-parser.c (c_parser_std_attribute): Take argument for_tm.  Use\n\tpedwarn for unknown standard attributes and return error_mark_node\n\tfor them.\n\ngcc/c-family:\n\t* c-common.c (attribute_fallthrough_p): In C, use pedwarn not\n\twarning for standard attributes mixed with fallthrough attributes.\n\ngcc/testsuite:\n\t* gcc.dg/c2x-attr-fallthrough-5.c, gcc.dg/c2x-attr-syntax-5.c: New\n\ttests.\n\t* gcc.dg/c2x-attr-deprecated-2.c, gcc.dg/c2x-attr-deprecated-4.c,\n\tgcc.dg/c2x-attr-fallthrough-2.c, gcc.dg/c2x-attr-maybe_unused-2.c,\n\tgcc.dg/c2x-attr-maybe_unused-4.c: Expect errors in place of some\n\twarnings.\n\nFrom-SVN: r278428", "tree": {"sha": "eb264d8a06f3087a5902e4ba372c16cc11ed24e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb264d8a06f3087a5902e4ba372c16cc11ed24e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/192961ff27503085946caaa92b2f57d291258858", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/192961ff27503085946caaa92b2f57d291258858", "html_url": "https://github.com/Rust-GCC/gccrs/commit/192961ff27503085946caaa92b2f57d291258858", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/192961ff27503085946caaa92b2f57d291258858/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95d4434f4777bda919474a06c4b071d3a5d4080e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95d4434f4777bda919474a06c4b071d3a5d4080e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95d4434f4777bda919474a06c4b071d3a5d4080e"}], "stats": {"total": 224, "additions": 180, "deletions": 44}, "files": [{"sha": "e1b437bf92ed50a32d7c5f504d08539ebd92e79b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192961ff27503085946caaa92b2f57d291258858/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192961ff27503085946caaa92b2f57d291258858/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=192961ff27503085946caaa92b2f57d291258858", "patch": "@@ -1,3 +1,8 @@\n+2019-11-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (attribute_fallthrough_p): In C, use pedwarn not\n+\twarning for standard attributes mixed with fallthrough attributes.\n+\n 2019-11-15  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-attribs.c (handle_fallthrough_attribute): Remove static."}, {"sha": "f779acc03873d354e4f9407e5318b993c735bb75", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192961ff27503085946caaa92b2f57d291258858/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192961ff27503085946caaa92b2f57d291258858/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=192961ff27503085946caaa92b2f57d291258858", "patch": "@@ -5702,7 +5702,15 @@ attribute_fallthrough_p (tree attr)\n     {\n       tree name = get_attribute_name (t);\n       if (!is_attribute_p (\"fallthrough\", name))\n-\twarning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+\t{\n+\t  if (!c_dialect_cxx () && get_attribute_namespace (t) == NULL_TREE)\n+\t    /* The specifications of standard attributes in C mean\n+\t       this is a constraint violation.  */\n+\t    pedwarn (input_location, OPT_Wattributes, \"%qE attribute ignored\",\n+\t\t     get_attribute_name (t));\n+\t  else\n+\t    warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+\t}\n     }\n   return true;\n }"}, {"sha": "fff7dc6328ab645ad5f28af284353ad80ab510f9", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192961ff27503085946caaa92b2f57d291258858/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192961ff27503085946caaa92b2f57d291258858/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=192961ff27503085946caaa92b2f57d291258858", "patch": "@@ -1,3 +1,11 @@\n+2019-11-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-decl.c (c_warn_unused_attributes): Use pedwarn not warning for\n+\tstandard attributes.\n+\t* c-parser.c (c_parser_std_attribute): Take argument for_tm.  Use\n+\tpedwarn for unknown standard attributes and return error_mark_node\n+\tfor them.\n+\n 2019-11-18  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* c-parser.c (c_parser_parse_rtl_body): Always call"}, {"sha": "746339d12edc7519e21aa7dbe0712010da274416", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192961ff27503085946caaa92b2f57d291258858/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192961ff27503085946caaa92b2f57d291258858/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=192961ff27503085946caaa92b2f57d291258858", "patch": "@@ -4516,8 +4516,14 @@ void\n c_warn_unused_attributes (tree attrs)\n {\n   for (tree t = attrs; t != NULL_TREE; t = TREE_CHAIN (t))\n-    warning (OPT_Wattributes, \"%qE attribute ignored\",\n-\t     get_attribute_name (t));\n+    if (get_attribute_namespace (t) == NULL_TREE)\n+      /* The specifications of standard attributes mean this is a\n+\t constraint violation.  */\n+      pedwarn (input_location, OPT_Wattributes, \"%qE attribute ignored\",\n+\t       get_attribute_name (t));\n+    else\n+      warning (OPT_Wattributes, \"%qE attribute ignored\",\n+\t       get_attribute_name (t));\n }\n \f\n /* Called when a declaration is seen that contains no names to declare."}, {"sha": "03194b438f23e7abc63845c63185ee696f447ef1", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 46, "deletions": 32, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192961ff27503085946caaa92b2f57d291258858/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192961ff27503085946caaa92b2f57d291258858/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=192961ff27503085946caaa92b2f57d291258858", "patch": "@@ -4803,7 +4803,7 @@ c_parser_balanced_token_sequence (c_parser *parser)\n */\n \n static tree\n-c_parser_std_attribute (c_parser *parser)\n+c_parser_std_attribute (c_parser *parser, bool for_tm)\n {\n   c_token *token = c_parser_peek_token (parser);\n   tree ns, name, attribute;\n@@ -4834,39 +4834,53 @@ c_parser_std_attribute (c_parser *parser)\n   attribute = build_tree_list (build_tree_list (ns, name), NULL_TREE);\n \n   /* Parse the arguments, if any.  */\n-  if (c_parser_next_token_is_not (parser, CPP_OPEN_PAREN))\n-    return attribute;\n-  location_t open_loc = c_parser_peek_token (parser)->location;\n-  matching_parens parens;\n-  parens.consume_open (parser);\n   const attribute_spec *as = lookup_attribute_spec (TREE_PURPOSE (attribute));\n-  if ((as && as->max_length == 0)\n-      /* Special-case the transactional-memory attribute \"outer\",\n-\t which is specially handled but not registered as an\n-\t attribute, to avoid allowing arbitrary balanced token\n-\t sequences as arguments.  */\n-      || is_attribute_p (\"outer\", name))\n-    {\n-      error_at (open_loc, \"%qE attribute does not take any arguments\", name);\n-      parens.skip_until_found_close (parser);\n+  if (c_parser_next_token_is_not (parser, CPP_OPEN_PAREN))\n+    goto out;\n+  {\n+    location_t open_loc = c_parser_peek_token (parser)->location;\n+    matching_parens parens;\n+    parens.consume_open (parser);\n+    if ((as && as->max_length == 0)\n+\t/* Special-case the transactional-memory attribute \"outer\",\n+\t   which is specially handled but not registered as an\n+\t   attribute, to avoid allowing arbitrary balanced token\n+\t   sequences as arguments.  */\n+\t|| is_attribute_p (\"outer\", name))\n+      {\n+\terror_at (open_loc, \"%qE attribute does not take any arguments\", name);\n+\tparens.skip_until_found_close (parser);\n+\treturn error_mark_node;\n+      }\n+    if (as)\n+      {\n+\tbool takes_identifier\n+\t  = (ns != NULL_TREE\n+\t     && strcmp (IDENTIFIER_POINTER (ns), \"gnu\") == 0\n+\t     && attribute_takes_identifier_p (name));\n+\tbool require_string\n+\t  = (ns == NULL_TREE\n+\t     && strcmp (IDENTIFIER_POINTER (name), \"deprecated\") == 0);\n+\tTREE_VALUE (attribute)\n+\t  = c_parser_attribute_arguments (parser, takes_identifier,\n+\t\t\t\t\t  require_string, false);\n+      }\n+    else\n+      c_parser_balanced_token_sequence (parser);\n+    parens.require_close (parser);\n+  }\n+ out:\n+  if (ns == NULL_TREE && !for_tm && !as && !is_attribute_p (\"nodiscard\", name))\n+    {\n+      /* An attribute with standard syntax and no namespace specified\n+\t is a constraint violation if it is not one of the known\n+\t standard attributes (of which nodiscard is the only one\n+\t without a handler in GCC).  Diagnose it here with a pedwarn\n+\t and then discard it to prevent a duplicate warning later.  */\n+      pedwarn (input_location, OPT_Wattributes, \"%qE attribute ignored\",\n+\t       name);\n       return error_mark_node;\n     }\n-  if (as)\n-    {\n-      bool takes_identifier\n-\t= (ns != NULL_TREE\n-\t   && strcmp (IDENTIFIER_POINTER (ns), \"gnu\") == 0\n-\t   && attribute_takes_identifier_p (name));\n-      bool require_string\n-\t= (ns == NULL_TREE\n-\t   && strcmp (IDENTIFIER_POINTER (name), \"deprecated\") == 0);\n-      TREE_VALUE (attribute)\n-\t= c_parser_attribute_arguments (parser, takes_identifier,\n-\t\t\t\t\trequire_string, false);\n-    }\n-  else\n-    c_parser_balanced_token_sequence (parser);\n-  parens.require_close (parser);\n   return attribute;\n }\n \n@@ -4898,7 +4912,7 @@ c_parser_std_attribute_specifier (c_parser *parser, bool for_tm)\n \t  c_parser_consume_token (parser);\n \t  continue;\n \t}\n-      tree attribute = c_parser_std_attribute (parser);\n+      tree attribute = c_parser_std_attribute (parser, for_tm);\n       if (attribute != error_mark_node)\n \t{\n \t  bool duplicate = false;"}, {"sha": "d258749ef5b544e4d63aed0fb269afe4b4963f8f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192961ff27503085946caaa92b2f57d291258858/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192961ff27503085946caaa92b2f57d291258858/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=192961ff27503085946caaa92b2f57d291258858", "patch": "@@ -1,3 +1,12 @@\n+2019-11-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c2x-attr-fallthrough-5.c, gcc.dg/c2x-attr-syntax-5.c: New\n+\ttests.\n+\t* gcc.dg/c2x-attr-deprecated-2.c, gcc.dg/c2x-attr-deprecated-4.c,\n+\tgcc.dg/c2x-attr-fallthrough-2.c, gcc.dg/c2x-attr-maybe_unused-2.c,\n+\tgcc.dg/c2x-attr-maybe_unused-4.c: Expect errors in place of some\n+\twarnings.\n+\n 2019-11-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/cpp0x/addressof2.C: Test locations too."}, {"sha": "0f0b1749ae4fdc24dcd5f0a9f10239705f480adc", "filename": "gcc/testsuite/gcc.dg/c2x-attr-deprecated-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192961ff27503085946caaa92b2f57d291258858/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192961ff27503085946caaa92b2f57d291258858/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-2.c?ref=192961ff27503085946caaa92b2f57d291258858", "patch": "@@ -5,7 +5,7 @@\n /* This attribute is not valid in most cases on types other than their\n    definitions, or on statements, or as an attribute-declaration.  */\n \n-[[deprecated]]; /* { dg-warning \"ignored\" } */\n+[[deprecated]]; /* { dg-error \"ignored\" } */\n \n int [[deprecated]] var; /* { dg-warning \"ignored\" } */\n /* { dg-message \"that appertains to a type-specifier\" \"appertains\" { target *-*-* } .-1 } */\n@@ -20,6 +20,6 @@ void\n f (void)\n {\n   int a;\n-  [[deprecated]]; /* { dg-warning \"ignored\" } */\n-  [[deprecated]] a = 1; /* { dg-warning \"ignored\" } */\n+  [[deprecated]]; /* { dg-error \"ignored\" } */\n+  [[deprecated]] a = 1; /* { dg-error \"ignored\" } */\n }"}, {"sha": "f1848a20cd54a72ea108e5e1874a9f3c2e123a9d", "filename": "gcc/testsuite/gcc.dg/c2x-attr-deprecated-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192961ff27503085946caaa92b2f57d291258858/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192961ff27503085946caaa92b2f57d291258858/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-deprecated-4.c?ref=192961ff27503085946caaa92b2f57d291258858", "patch": "@@ -6,7 +6,7 @@\n [[__deprecated__, deprecated(\"message\")]] int b; /* { dg-error \"can appear at most once\" } */\n int c [[deprecated(\"message\"), deprecated]]; /* { dg-error \"can appear at most once\" } */\n [[deprecated, deprecated]]; /* { dg-error \"can appear at most once\" } */\n-/* { dg-warning \"ignored\" \"ignored\" { target *-*-* } .-1 } */\n+/* { dg-error \"ignored\" \"ignored\" { target *-*-* } .-1 } */\n \n /* Separate attribute lists in the same attribute specifier sequence,\n    with the same attribute in them, are OK.  */"}, {"sha": "33e3ec282279c2b1ea53d1f6ea4ce81edd343f14", "filename": "gcc/testsuite/gcc.dg/c2x-attr-fallthrough-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192961ff27503085946caaa92b2f57d291258858/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-fallthrough-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192961ff27503085946caaa92b2f57d291258858/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-fallthrough-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-fallthrough-2.c?ref=192961ff27503085946caaa92b2f57d291258858", "patch": "@@ -31,5 +31,5 @@ f (int a)\n       b += 5;\n       break;\n     }\n-  [[fallthrough]] return b; /* { dg-warning \"ignored\" } */\n+  [[fallthrough]] return b; /* { dg-error \"ignored\" } */\n }"}, {"sha": "c614ceba2056b278e5dfdc9cb7fef27f5733960e", "filename": "gcc/testsuite/gcc.dg/c2x-attr-fallthrough-5.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192961ff27503085946caaa92b2f57d291258858/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-fallthrough-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192961ff27503085946caaa92b2f57d291258858/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-fallthrough-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-fallthrough-5.c?ref=192961ff27503085946caaa92b2f57d291258858", "patch": "@@ -0,0 +1,30 @@\n+/* Test C2x fallthrough attribute: mixtures with other attributes.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+/* Use of other standard attributes together with \"fallthrough\" goes\n+   through a different path to diagnosing ignored attributes from that\n+   used in attribute declarations without \"fallthrough\".  Verify that\n+   such ignored attributes result in a pedwarn (for use in a context\n+   not permitted in the constraints for those attributes) in this case\n+   as well.  */\n+\n+int\n+f (int a)\n+{\n+  switch (a)\n+    {\n+    case 1:\n+      a++;\n+      [[fallthrough, deprecated]]; /* { dg-error \"attribute ignored\" } */\n+    case 2:\n+      a++;\n+      [[maybe_unused]] [[fallthrough]]; /* { dg-error \"attribute ignored\" } */\n+    case 3:\n+      a++;\n+      [[__nodiscard__, fallthrough]]; /* { dg-error \"attribute ignored\" } */\n+    case 4:\n+      a++;\n+    }\n+  return a;\n+}"}, {"sha": "7f06581f949ac482e580dad5d6671e35d96f7560", "filename": "gcc/testsuite/gcc.dg/c2x-attr-maybe_unused-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192961ff27503085946caaa92b2f57d291258858/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-maybe_unused-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192961ff27503085946caaa92b2f57d291258858/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-maybe_unused-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-maybe_unused-2.c?ref=192961ff27503085946caaa92b2f57d291258858", "patch": "@@ -5,7 +5,7 @@\n /* This attribute is not valid in most cases on types other than their\n    definitions, or on statements, or as an attribute-declaration.  */\n \n-[[maybe_unused]]; /* { dg-warning \"ignored\" } */\n+[[maybe_unused]]; /* { dg-error \"ignored\" } */\n \n int [[maybe_unused]] var; /* { dg-warning \"ignored\" } */\n /* { dg-message \"that appertains to a type-specifier\" \"appertains\" { target *-*-* } .-1 } */\n@@ -20,6 +20,6 @@ void\n f (void)\n {\n   int a;\n-  [[maybe_unused]]; /* { dg-warning \"ignored\" } */\n-  [[maybe_unused]] a = 1; /* { dg-warning \"ignored\" } */\n+  [[maybe_unused]]; /* { dg-error \"ignored\" } */\n+  [[maybe_unused]] a = 1; /* { dg-error \"ignored\" } */\n }"}, {"sha": "300c0dae73c16ef9674db80d715d1d240358ff64", "filename": "gcc/testsuite/gcc.dg/c2x-attr-maybe_unused-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192961ff27503085946caaa92b2f57d291258858/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-maybe_unused-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192961ff27503085946caaa92b2f57d291258858/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-maybe_unused-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-maybe_unused-4.c?ref=192961ff27503085946caaa92b2f57d291258858", "patch": "@@ -6,7 +6,7 @@\n [[__maybe_unused__, maybe_unused]] int b; /* { dg-error \"can appear at most once\" } */\n int c [[maybe_unused, maybe_unused]]; /* { dg-error \"can appear at most once\" } */\n [[maybe_unused, maybe_unused]]; /* { dg-error \"can appear at most once\" } */\n-/* { dg-warning \"ignored\" \"ignored\" { target *-*-* } .-1 } */\n+/* { dg-error \"ignored\" \"ignored\" { target *-*-* } .-1 } */\n \n /* Separate attribute lists in the same attribute specifier sequence,\n    with the same attribute in them, are OK.  */"}, {"sha": "37a24112f63e85002f8913a49f6959d587ef3701", "filename": "gcc/testsuite/gcc.dg/c2x-attr-syntax-5.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192961ff27503085946caaa92b2f57d291258858/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-syntax-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192961ff27503085946caaa92b2f57d291258858/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-syntax-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-syntax-5.c?ref=192961ff27503085946caaa92b2f57d291258858", "patch": "@@ -0,0 +1,56 @@\n+/* Test C2x attribute syntax.  Test unknown standard attributes\n+   diagnosed with a pedwarn.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+[[unknown_attribute]]; /* { dg-error \"attribute ignored\" } */\n+\n+[[unknown_attribute]] extern int a; /* { dg-error \"attribute ignored\" } */\n+extern int [[unknown_attribute(123)]] a; /* { dg-error \"attribute ignored\" } */\n+extern int a [[unknown_attribute(\"\")]]; /* { dg-error \"attribute ignored\" } */\n+\n+int f () [[unknown_attribute]]; /* { dg-error \"attribute ignored\" } */\n+int f (void) [[unknown_attribute(1)]]; /* { dg-error \"attribute ignored\" } */\n+int g ([[unknown_attribute]] int a); /* { dg-error \"attribute ignored\" } */\n+int g (int [[unknown_attribute]] a); /* { dg-error \"attribute ignored\" } */\n+int g (int a [[unknown_attribute]]); /* { dg-error \"attribute ignored\" } */\n+int g ([[unknown_attribute]] int); /* { dg-error \"attribute ignored\" } */\n+int g (int [[unknown_attribute]]); /* { dg-error \"attribute ignored\" } */\n+int g (int) [[unknown_attribute]]; /* { dg-error \"attribute ignored\" } */\n+\n+int *[[unknown_attribute]] p; /* { dg-error \"attribute ignored\" } */\n+int b[3] [[unknown_attribute]]; /* { dg-error \"attribute ignored\" } */\n+\n+int h (int () [[unknown_attribute]]); /* { dg-error \"attribute ignored\" } */\n+\n+struct [[unknown_attribute]] s; /* { dg-error \"attribute ignored\" } */\n+union [[unknown_attribute]] u; /* { dg-error \"attribute ignored\" } */\n+\n+struct [[unknown_attribute]] s2 { int a; }; /* { dg-error \"attribute ignored\" } */\n+union [[unknown_attribute(x)]] u2 { int a; }; /* { dg-error \"attribute ignored\" } */\n+\n+struct s3 { [[unknown_attribute]] int a; }; /* { dg-error \"attribute ignored\" } */\n+struct s4 { int [[unknown_attribute]] a; }; /* { dg-error \"attribute ignored\" } */\n+union u3 { [[unknown_attribute]] int a; }; /* { dg-error \"attribute ignored\" } */\n+union u4 { int [[unknown_attribute]] a; }; /* { dg-error \"attribute ignored\" } */\n+\n+int z = sizeof (int [[unknown_attribute]]); /* { dg-error \"attribute ignored\" } */\n+\n+enum [[unknown_attribute]] { E1 }; /* { dg-error \"attribute ignored\" } */\n+enum { E2 [[unknown_attribute]] }; /* { dg-error \"attribute ignored\" } */\n+enum { E3 [[unknown_attribute]] = 4 }; /* { dg-error \"attribute ignored\" } */\n+\n+void\n+func (void) [[unknown_attribute]] { /* { dg-error \"attribute ignored\" } */\n+  [[unknown_attribute]] int var; /* { dg-error \"attribute ignored\" } */\n+  [[unknown_attribute]] { } /* { dg-error \"attribute ignored\" } */\n+  [[unknown_attribute(!)]]; /* { dg-error \"attribute ignored\" } */\n+  [[unknown_attribute]] var = 1; /* { dg-error \"attribute ignored\" } */\n+  [[unknown_attribute]] x: var = 2; /* { dg-error \"attribute ignored\" } */\n+  for ([[unknown_attribute]] int zz = 1; zz < 10; zz++) ; /* { dg-error \"attribute ignored\" } */\n+}\n+\n+/* nodiscard is not yet implemented, but is a standard attribute, so\n+   its use is not a constraint violation and should only receive a\n+   warning.  */\n+[[nodiscard]] int ndfunc (void); /* { dg-warning \"attribute directive ignored\" } */"}]}