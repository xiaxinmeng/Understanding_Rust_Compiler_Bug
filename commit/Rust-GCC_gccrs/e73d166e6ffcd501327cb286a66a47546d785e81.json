{"sha": "e73d166e6ffcd501327cb286a66a47546d785e81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTczZDE2NmU2ZmZjZDUwMTMyN2NiMjg2YTY2YTQ3NTQ2ZDc4NWU4MQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-11-13T20:33:21Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-11-13T20:33:21Z"}, "message": "re PR fortran/34080 (Transfer was working, now broken)\n\n2007-11-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34080\n\t* iresolve.c (gfc_resolve_transfer): Do not try to convert\n\tto a constant MOLD expression, if it is an assumed size\n\tdummy.\n\n2007-11-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34080\n\t* gfortran.dg/transfer_assumed_size_1.f90: New test.\n\nFrom-SVN: r130158", "tree": {"sha": "ec13cfec6e36e0e9324e4e72cc7f26597991afb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec13cfec6e36e0e9324e4e72cc7f26597991afb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e73d166e6ffcd501327cb286a66a47546d785e81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73d166e6ffcd501327cb286a66a47546d785e81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e73d166e6ffcd501327cb286a66a47546d785e81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73d166e6ffcd501327cb286a66a47546d785e81/comments", "author": null, "committer": null, "parents": [{"sha": "66beb09b045130f9516b110d5cf41c81f8396be6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66beb09b045130f9516b110d5cf41c81f8396be6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66beb09b045130f9516b110d5cf41c81f8396be6"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "27fc761d642d0a502a1c559d464e3fe6e1711b1c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73d166e6ffcd501327cb286a66a47546d785e81/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73d166e6ffcd501327cb286a66a47546d785e81/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e73d166e6ffcd501327cb286a66a47546d785e81", "patch": "@@ -1,3 +1,10 @@\n+2007-11-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34080\n+\t* iresolve.c (gfc_resolve_transfer): Do not try to convert\n+\tto a constant MOLD expression, if it is an assumed size\n+\tdummy.\n+\n 2007-11-10  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* trans-common.c: Remove prototype for gfc_get_common."}, {"sha": "4a5496344e1a928ad6ec9857be42e4ba30b6f924", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73d166e6ffcd501327cb286a66a47546d785e81/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73d166e6ffcd501327cb286a66a47546d785e81/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=e73d166e6ffcd501327cb286a66a47546d785e81", "patch": "@@ -2283,7 +2283,8 @@ gfc_resolve_transfer (gfc_expr *f, gfc_expr *source ATTRIBUTE_UNUSED,\n   /* TODO: Make this do something meaningful.  */\n   static char transfer0[] = \"__transfer0\", transfer1[] = \"__transfer1\";\n \n-  if (mold->ts.type == BT_CHARACTER && !mold->ts.cl->length)\n+  if (mold->ts.type == BT_CHARACTER && !mold->ts.cl->length\n+\t&& !(mold->expr_type == EXPR_VARIABLE && mold->symtree->n.sym->attr.dummy))\n     mold->ts.cl->length = gfc_int_expr (mold->value.character.length);\n \n   f->ts = mold->ts;"}, {"sha": "57dbf78baae22f6e04d95dbc9a74ca1f4b4bf717", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73d166e6ffcd501327cb286a66a47546d785e81/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73d166e6ffcd501327cb286a66a47546d785e81/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e73d166e6ffcd501327cb286a66a47546d785e81", "patch": "@@ -1,3 +1,8 @@\n+2007-11-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34080\n+\t* gfortran.dg/transfer_assumed_size_1.f90: New test.\n+\n 2007-11-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/34054"}, {"sha": "f42318816d5d348669e3c8d49a11facf32d3d246", "filename": "gcc/testsuite/gfortran.dg/transfer_assumed_size_1.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73d166e6ffcd501327cb286a66a47546d785e81/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_assumed_size_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73d166e6ffcd501327cb286a66a47546d785e81/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_assumed_size_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_assumed_size_1.f90?ref=e73d166e6ffcd501327cb286a66a47546d785e81", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do run }\n+! Tests the fix for the regression PR34080, in which the character\n+! length of the assumed length arguments to TRANSFER were getting\n+! lost.\n+!\n+! Drew McCormack <drewmccormack@mac.com>\n+!\n+module TransferBug\n+   type ByteType\n+      private\n+      character(len=1)                                  :: singleByte\n+   end type\n+\n+   type (ByteType), save                                :: BytesPrototype(1)\n+\n+contains\n+\n+   function StringToBytes(v) result (bytes)\n+      character(len=*), intent(in)                      :: v\n+      type (ByteType)                                   :: bytes(size(transfer(v, BytesPrototype)))\n+      bytes = transfer(v, BytesPrototype)\n+   end function\n+\n+   subroutine BytesToString(bytes, string)\n+      type (ByteType), intent(in)                       :: bytes(:)\n+      character(len=*), intent(out)                     :: string\n+      character(len=1)                                  :: singleChar(1)\n+      integer                                           :: numChars\n+      numChars = size(transfer(bytes,singleChar))\n+      string = ''\n+      string = transfer(bytes, string)\n+      string(numChars+1:) = ''\n+   end subroutine\n+\n+end module\n+\n+\n+program main\n+   use TransferBug\n+   character(len=100) :: str\n+   call BytesToString( StringToBytes('Hi'), str )\n+   if (trim(str) .ne. \"Hi\") call abort ()\n+end program\n+! { dg-final { cleanup-modules \"TransferBug\" } }\n+"}]}