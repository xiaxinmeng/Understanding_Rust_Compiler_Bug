{"sha": "3cf52b87ff6938e30883b8f8f542a638635d507d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NmNTJiODdmZjY5MzhlMzA4ODNiOGY4ZjU0MmE2Mzg2MzVkNTA3ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-25T09:16:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-25T09:16:55Z"}, "message": "vrp: Handle VCE in vrp_simplify_cond_using_ranges [PR80635]\n\n> So I wonder what other optimizations are prevented here?\n\n> Why does uninit warn with VCE but not with NOP_EXPR?  Or does the\n> warning disappear because of those other optimizations you mention?\n\nThe optimization that it prevents is in this particular case in tree-vrp.c\n(vrp_simplify_cond_using_ranges):\n\n      if (!is_gimple_assign (def_stmt)\n          || !CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt)))\n        return;\nso it punts on VIEW_CONVERT_EXPR, with NOP_EXPR it optimizes that:\n  _9 = (bool) maybe_a$4_7;\n  if (_9 != 0)\ninto:\n  _9 = (bool) maybe_a$4_7;\n  if (maybe_a$4_7 != 0)\n\nNow, if I apply my patch but manually disable this\nvrp_simplify_cond_using_ranges optimization, then the uninit warning is\nback, so on the uninit side it is not about VIEW_CONVERT_EXPR vs. NOP_EXPR,\nboth are bad there, uninit wants the guarding condition to be\nthat SSA_NAME and not some demotion cast thereof.\nWe have:\n  # maybe_a$m_6 = PHI <_5(4), maybe_a$m_4(D)(6)>\n  # maybe_a$4_7 = PHI <1(4), 0(6)>\n...\nOne of:\n  _9 = VIEW_CONVERT_EXPR<bool>(maybe_a$4_7);\n  if (_9 != 0)\nor:\n  _9 = (bool) maybe_a$4_7;\n  if (_9 != 0)\nor:\n  if (maybe_a$4_7 != 0)\nfollowed by:\n    goto <bb 11>; [0.00%]\n  else\n    goto <bb 14>; [0.00%]\n...\n  <bb 11> [count: 0]:\n  set (maybe_a$m_6);\nand uninit wants to see that maybe_a$m_4(D) is not used if\nbb 11 is encountered.\n\nThis patch fixes it by teaching vrp_simplify_cond_using_ranges\nto handle VCE (when from an integral type) in addition to\nNOP_EXPR/CONVERT_EXPR, of course as long as the VCE or demotion\ndoesn't change any values, i.e. when the range of the VCE or\nconversion operand fits into the target type.\n\n2021-02-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/80635\n\t* tree-vrp.c (vrp_simplify_cond_using_ranges): Also handle\n\tVIEW_CONVERT_EXPR if modes are the same, innerop is integral and\n\thas mode precision.\n\n\t* g++.dg/warn/pr80635-1.C: New test.\n\t* g++.dg/warn/pr80635-2.C: New test.", "tree": {"sha": "ff9120fdd9a7cb6eb72e94e883ec5e08d491d687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff9120fdd9a7cb6eb72e94e883ec5e08d491d687"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cf52b87ff6938e30883b8f8f542a638635d507d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cf52b87ff6938e30883b8f8f542a638635d507d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cf52b87ff6938e30883b8f8f542a638635d507d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cf52b87ff6938e30883b8f8f542a638635d507d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e7c0927cbd115d488d527c86dfc671b22c378db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e7c0927cbd115d488d527c86dfc671b22c378db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e7c0927cbd115d488d527c86dfc671b22c378db"}], "stats": {"total": 94, "additions": 91, "deletions": 3}, "files": [{"sha": "8478791862ae0c6497b4cc22392729cdd5631a8c", "filename": "gcc/testsuite/g++.dg/warn/pr80635-1.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cf52b87ff6938e30883b8f8f542a638635d507d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr80635-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cf52b87ff6938e30883b8f8f542a638635d507d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr80635-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr80635-1.C?ref=3cf52b87ff6938e30883b8f8f542a638635d507d", "patch": "@@ -0,0 +1,46 @@\n+// PR tree-optimization/80635\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-O2 -Wmaybe-uninitialized\" }\n+\n+using size_t = decltype (sizeof (1));\n+inline void *operator new (size_t, void *p) { return p; }\n+template<typename T>\n+struct optional\n+{\n+  optional () : m_dummy (), live (false) {}\n+  void emplace () { new (&m_item) T (); live = true; }\n+  ~optional () { if (live) m_item.~T (); }\n+\n+  union\n+  {\n+    struct {} m_dummy;\n+    T m_item;\n+  };\n+  bool live;\n+};\n+\n+extern int get ();\n+extern void set (int);\n+\n+struct A\n+{\n+  A () : m (get ()) {}\n+  ~A () { set (m); }\t// { dg-bogus \"may be used uninitialized in this function\" }\n+\n+  int m;\n+};\n+\n+struct B\n+{\n+  B ();\n+  ~B ();\n+};\n+\n+void func ()\n+{\n+  optional<A> maybe_a;\n+  optional<B> maybe_b;\n+\n+  maybe_a.emplace ();\n+  maybe_b.emplace ();\n+}"}, {"sha": "9f575477f6b405a21f5fdeed0cc1d9b461d3c59e", "filename": "gcc/testsuite/g++.dg/warn/pr80635-2.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cf52b87ff6938e30883b8f8f542a638635d507d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr80635-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cf52b87ff6938e30883b8f8f542a638635d507d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr80635-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr80635-2.C?ref=3cf52b87ff6938e30883b8f8f542a638635d507d", "patch": "@@ -0,0 +1,31 @@\n+// PR tree-optimization/80635\n+// { dg-do compile { target c++17 } }\n+// { dg-options \"-O2 -Wmaybe-uninitialized\" }\n+\n+#include <optional>\n+\n+extern int get ();\n+extern void set (int);\n+\n+struct A\n+{\n+  A () : m (get ()) {}\n+  ~A () { set (m); }\t// { dg-bogus \"may be used uninitialized in this function\" }\n+\n+  int m;\n+};\n+\n+struct B\n+{\n+  B ();\n+  ~B ();\n+};\n+\n+void func ()\n+{\n+  std::optional<A> maybe_a;\n+  std::optional<B> maybe_b;\n+\n+  maybe_a.emplace ();\n+  maybe_b.emplace ();\n+}"}, {"sha": "8d638ae93d6a21f8552881f5eb145881ae5a0642", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cf52b87ff6938e30883b8f8f542a638635d507d/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cf52b87ff6938e30883b8f8f542a638635d507d/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=3cf52b87ff6938e30883b8f8f542a638635d507d", "patch": "@@ -4390,11 +4390,22 @@ vrp_simplify_cond_using_ranges (vr_values *query, gcond *stmt)\n       gimple *def_stmt = SSA_NAME_DEF_STMT (op0);\n       tree innerop;\n \n-      if (!is_gimple_assign (def_stmt)\n-\t  || !CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt)))\n+      if (!is_gimple_assign (def_stmt))\n \treturn;\n \n-      innerop = gimple_assign_rhs1 (def_stmt);\n+      switch (gimple_assign_rhs_code (def_stmt))\n+\t{\n+\tCASE_CONVERT:\n+\t  innerop = gimple_assign_rhs1 (def_stmt);\n+\t  break;\n+\tcase VIEW_CONVERT_EXPR:\n+\t  innerop = TREE_OPERAND (gimple_assign_rhs1 (def_stmt), 0);\n+\t  if (!INTEGRAL_TYPE_P (TREE_TYPE (innerop)))\n+\t    return;\n+\t  break;\n+\tdefault:\n+\t  return;\n+\t}\n \n       if (TREE_CODE (innerop) == SSA_NAME\n \t  && !POINTER_TYPE_P (TREE_TYPE (innerop))"}]}