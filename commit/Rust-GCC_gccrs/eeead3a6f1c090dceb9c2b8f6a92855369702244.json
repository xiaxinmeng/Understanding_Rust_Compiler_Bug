{"sha": "eeead3a6f1c090dceb9c2b8f6a92855369702244", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVlYWQzYTZmMWMwOTBkY2ViOWMyYjhmNmE5Mjg1NTM2OTcwMjI0NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-08-18T07:21:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-08-18T07:21:11Z"}, "message": "ssa-iterators.h (ssa_vuse_operand): New inline.\n\n2016-08-18  Richard Biener  <rguenther@suse.de>\n\n\t* ssa-iterators.h (ssa_vuse_operand): New inline.\n\t* tree-if-conv.c (ifc_temp_var): Update virtual operand.\n\t(predicate_all_scalar_phis): Use remove_phi_node to remove\n\tphi nodes predicated.  Delay removing virtual PHIs.\n\t(predicate_mem_writes): Update virtual operands.\n\t(combine_blocks): Likewise.  Propagate out remaining virtual PHIs.\n\t(tree_if_conversion): Do not rewrite virtual SSA form.\n\t* tree-phinodes.c (release_phi_node): Make static.\n\t* tree-phinodes.h (release_phi_node): Remove.\n\nFrom-SVN: r239560", "tree": {"sha": "634d0fc0ea5d543cc9f34e1f259ba68d105d7958", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/634d0fc0ea5d543cc9f34e1f259ba68d105d7958"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eeead3a6f1c090dceb9c2b8f6a92855369702244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeead3a6f1c090dceb9c2b8f6a92855369702244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeead3a6f1c090dceb9c2b8f6a92855369702244", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeead3a6f1c090dceb9c2b8f6a92855369702244/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5730589da6afea6d54055d87fb9c3c6aa0683851", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5730589da6afea6d54055d87fb9c3c6aa0683851", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5730589da6afea6d54055d87fb9c3c6aa0683851"}], "stats": {"total": 122, "additions": 106, "deletions": 16}, "files": [{"sha": "17dab645a9530aefd152ee776fbb2e95ed85ef42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeead3a6f1c090dceb9c2b8f6a92855369702244/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeead3a6f1c090dceb9c2b8f6a92855369702244/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eeead3a6f1c090dceb9c2b8f6a92855369702244", "patch": "@@ -1,3 +1,15 @@\n+2016-08-18  Richard Biener  <rguenther@suse.de>\n+\n+\t* ssa-iterators.h (ssa_vuse_operand): New inline.\n+\t* tree-if-conv.c (ifc_temp_var): Update virtual operand.\n+\t(predicate_all_scalar_phis): Use remove_phi_node to remove\n+\tphi nodes predicated.  Delay removing virtual PHIs.\n+\t(predicate_mem_writes): Update virtual operands.\n+\t(combine_blocks): Likewise.  Propagate out remaining virtual PHIs.\n+\t(tree_if_conversion): Do not rewrite virtual SSA form.\n+\t* tree-phinodes.c (release_phi_node): Make static.\n+\t* tree-phinodes.h (release_phi_node): Remove.\n+\n 2016-08-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386.c (enum ix86_builtins): Remove IX86_BUILTIN_*"}, {"sha": "7e656e164a0ba92ca51b965d6670c6d3b0723723", "filename": "gcc/ssa-iterators.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeead3a6f1c090dceb9c2b8f6a92855369702244/gcc%2Fssa-iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeead3a6f1c090dceb9c2b8f6a92855369702244/gcc%2Fssa-iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa-iterators.h?ref=eeead3a6f1c090dceb9c2b8f6a92855369702244", "patch": "@@ -699,6 +699,15 @@ single_ssa_use_operand (gimple *stmt, int flags)\n   return NULL_USE_OPERAND_P;\n }\n \n+/* Return the single virtual use operand in STMT if present.  Otherwise\n+   return NULL.  */\n+static inline use_operand_p\n+ssa_vuse_operand (gimple *stmt)\n+{\n+  if (! gimple_vuse (stmt))\n+    return NULL_USE_OPERAND_P;\n+  return USE_OP_PTR (gimple_use_ops (stmt));\n+}\n \n \n /* If there is a single operand in STMT matching FLAGS, return it.  Otherwise"}, {"sha": "a57c1c5a25f6186412f27ce8b31c9c58fbf8ac1c", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 84, "deletions": 14, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeead3a6f1c090dceb9c2b8f6a92855369702244/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeead3a6f1c090dceb9c2b8f6a92855369702244/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=eeead3a6f1c090dceb9c2b8f6a92855369702244", "patch": "@@ -326,6 +326,7 @@ ifc_temp_var (tree type, tree expr, gimple_stmt_iterator *gsi)\n {\n   tree new_name = make_temp_ssa_name (type, NULL, \"_ifc_\");\n   gimple *stmt = gimple_build_assign (new_name, expr);\n+  gimple_set_vuse (stmt, gimple_vuse (gsi_stmt (*gsi)));\n   gsi_insert_before (gsi, stmt, GSI_SAME_STMT);\n   return new_name;\n }\n@@ -1946,12 +1947,14 @@ predicate_all_scalar_phis (struct loop *loop)\n       while (!gsi_end_p (phi_gsi))\n \t{\n \t  phi = phi_gsi.phi ();\n-\t  predicate_scalar_phi (phi, &gsi);\n-\t  release_phi_node (phi);\n-\t  gsi_next (&phi_gsi);\n+\t  if (virtual_operand_p (gimple_phi_result (phi)))\n+\t    gsi_next (&phi_gsi);\n+\t  else\n+\t    {\n+\t      predicate_scalar_phi (phi, &gsi);\n+\t      remove_phi_node (&phi_gsi, false);\n+\t    }\n \t}\n-\n-      set_phi_nodes (bb, NULL);\n     }\n }\n \n@@ -2218,11 +2221,18 @@ predicate_mem_writes (loop_p loop)\n \t\t  = gimple_build_call_internal (IFN_MASK_LOAD, 3, addr,\n \t\t\t\t\t\tptr, mask);\n \t\tgimple_call_set_lhs (new_stmt, lhs);\n+\t\tgimple_set_vuse (new_stmt, gimple_vuse (stmt));\n \t      }\n \t    else\n-\t      new_stmt\n-\t\t= gimple_build_call_internal (IFN_MASK_STORE, 4, addr, ptr,\n-\t\t\t\t\t      mask, rhs);\n+\t      {\n+\t\tnew_stmt\n+\t\t  = gimple_build_call_internal (IFN_MASK_STORE, 4, addr, ptr,\n+\t\t\t\t\t\t  mask, rhs);\n+\t\tgimple_set_vuse (new_stmt, gimple_vuse (stmt));\n+\t\tgimple_set_vdef (new_stmt, gimple_vdef (stmt));\n+\t\tSSA_NAME_DEF_STMT (gimple_vdef (new_stmt)) = new_stmt;\n+\t      }\n+\n \t    gsi_replace (&gsi, new_stmt, true);\n \t  }\n \telse if (gimple_vdef (stmt))\n@@ -2361,6 +2371,20 @@ combine_blocks (struct loop *loop)\n     }\n \n   merge_target_bb = loop->header;\n+\n+  /* Get at the virtual def valid for uses starting at the first block\n+     we merge into the header.  Without a virtual PHI the loop has the\n+     same virtual use on all stmts.  */\n+  gphi *vphi = get_virtual_phi (loop->header);\n+  tree last_vdef = NULL_TREE;\n+  if (vphi)\n+    {\n+      last_vdef = gimple_phi_result (vphi);\n+      for (gimple_stmt_iterator gsi = gsi_start_bb (loop->header);\n+\t   ! gsi_end_p (gsi); gsi_next (&gsi))\n+\tif (gimple_vdef (gsi_stmt (gsi)))\n+\t  last_vdef = gimple_vdef (gsi_stmt (gsi));\n+    }\n   for (i = 1; i < orig_loop_num_nodes; i++)\n     {\n       gimple_stmt_iterator gsi;\n@@ -2371,13 +2395,41 @@ combine_blocks (struct loop *loop)\n       if (bb == exit_bb || bb == loop->latch)\n \tcontinue;\n \n+      /* We release virtual PHIs late because we have to propagate them\n+         out using the current VUSE.  The def might be the one used\n+\t after the loop.  */\n+      vphi = get_virtual_phi (bb);\n+      if (vphi)\n+\t{\n+\t  imm_use_iterator iter;\n+\t  use_operand_p use_p;\n+\t  gimple *use_stmt;\n+\t  FOR_EACH_IMM_USE_STMT (use_stmt, iter, gimple_phi_result (vphi))\n+\t    {\n+\t      FOR_EACH_IMM_USE_ON_STMT (use_p, iter)\n+\t\tSET_USE (use_p, last_vdef);\n+\t    }\n+\t  gsi = gsi_for_stmt (vphi); \n+\t  remove_phi_node (&gsi, true);\n+\t}\n+\n       /* Make stmts member of loop->header and clear range info from all stmts\n \t in BB which is now no longer executed conditional on a predicate we\n \t could have derived it from.  */\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t{\n \t  gimple *stmt = gsi_stmt (gsi);\n \t  gimple_set_bb (stmt, merge_target_bb);\n+\t  /* Update virtual operands.  */\n+\t  if (last_vdef)\n+\t    {\n+\t      use_operand_p use_p = ssa_vuse_operand (stmt);\n+\t      if (use_p\n+\t\t  && USE_FROM_PTR (use_p) != last_vdef)\n+\t\tSET_USE (use_p, last_vdef);\n+\t      if (gimple_vdef (stmt))\n+\t\tlast_vdef = gimple_vdef (stmt);\n+\t    }\n \t  if (predicated[i])\n \t    {\n \t      ssa_op_iter i;\n@@ -2389,7 +2441,7 @@ combine_blocks (struct loop *loop)\n \n       /* Update stmt list.  */\n       last = gsi_last_bb (merge_target_bb);\n-      gsi_insert_seq_after (&last, bb_seq (bb), GSI_NEW_STMT);\n+      gsi_insert_seq_after_without_update (&last, bb_seq (bb), GSI_NEW_STMT);\n       set_bb_seq (bb, NULL);\n \n       delete_basic_block (bb);\n@@ -2399,9 +2451,29 @@ combine_blocks (struct loop *loop)\n      This reduces the number of basic blocks to two, to please the\n      vectorizer that handles only loops with two nodes.  */\n   if (exit_bb\n-      && exit_bb != loop->header\n-      && can_merge_blocks_p (loop->header, exit_bb))\n-    merge_blocks (loop->header, exit_bb);\n+      && exit_bb != loop->header)\n+    {\n+      /* We release virtual PHIs late because we have to propagate them\n+         out using the current VUSE.  The def might be the one used\n+\t after the loop.  */\n+      vphi = get_virtual_phi (exit_bb);\n+      if (vphi)\n+\t{\n+\t  imm_use_iterator iter;\n+\t  use_operand_p use_p;\n+\t  gimple *use_stmt;\n+\t  FOR_EACH_IMM_USE_STMT (use_stmt, iter, gimple_phi_result (vphi))\n+\t    {\n+\t      FOR_EACH_IMM_USE_ON_STMT (use_p, iter)\n+\t\tSET_USE (use_p, last_vdef);\n+\t    }\n+\t  gimple_stmt_iterator gsi = gsi_for_stmt (vphi); \n+\t  remove_phi_node (&gsi, true);\n+\t}\n+\n+      if (can_merge_blocks_p (loop->header, exit_bb))\n+\tmerge_blocks (loop->header, exit_bb);\n+    }\n \n   free (ifc_bbs);\n   ifc_bbs = NULL;\n@@ -2669,8 +2741,6 @@ tree_if_conversion (struct loop *loop)\n   ifcvt_local_dce (loop->header);\n \n   todo |= TODO_cleanup_cfg;\n-  mark_virtual_operands_for_renaming (cfun);\n-  todo |= TODO_update_ssa_only_virtuals;\n \n  cleanup:\n   if (ifc_bbs)"}, {"sha": "6977770c9793c59218196a0eeda209b51d31d267", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeead3a6f1c090dceb9c2b8f6a92855369702244/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeead3a6f1c090dceb9c2b8f6a92855369702244/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=eeead3a6f1c090dceb9c2b8f6a92855369702244", "patch": "@@ -207,7 +207,7 @@ make_phi_node (tree var, int len)\n \n /* We no longer need PHI, release it so that it may be reused.  */\n \n-void\n+static void\n release_phi_node (gimple *phi)\n {\n   size_t bucket;"}, {"sha": "6cc76fa7072c9073d01c2e2c6f23c5a5cbfd3ec3", "filename": "gcc/tree-phinodes.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeead3a6f1c090dceb9c2b8f6a92855369702244/gcc%2Ftree-phinodes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeead3a6f1c090dceb9c2b8f6a92855369702244/gcc%2Ftree-phinodes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.h?ref=eeead3a6f1c090dceb9c2b8f6a92855369702244", "patch": "@@ -21,7 +21,6 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_TREE_PHINODES_H\n \n extern void phinodes_print_statistics (void);\n-extern void release_phi_node (gimple *);\n extern void reserve_phi_args_for_new_edge (basic_block);\n extern void add_phi_node_to_bb (gphi *phi, basic_block bb);\n extern gphi *create_phi_node (tree, basic_block);"}]}