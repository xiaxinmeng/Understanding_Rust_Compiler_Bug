{"sha": "30fc3df7fcefca9a09c6a73307e89d9411faa8b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBmYzNkZjdmY2VmY2E5YTA5YzZhNzMzMDdlODlkOTQxMWZhYThiMw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-03-11T08:40:08Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-03-11T08:40:08Z"}, "message": "re PR c++/14476 (ICE after error about enum not being defined when using it as a bit field)\n\n\tPR c++/14476\n\t* decl.c (xref_tag): Do not create dummy ENUMERAL_TYPEs.\n\n\tPR c++/14476\n\t* g++.dg/lookup/enum1.C: New test.\n\nFrom-SVN: r79312", "tree": {"sha": "7815736978751d5b9bfbb2936f71989184ee75fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7815736978751d5b9bfbb2936f71989184ee75fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30fc3df7fcefca9a09c6a73307e89d9411faa8b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30fc3df7fcefca9a09c6a73307e89d9411faa8b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30fc3df7fcefca9a09c6a73307e89d9411faa8b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30fc3df7fcefca9a09c6a73307e89d9411faa8b3/comments", "author": null, "committer": null, "parents": [{"sha": "fc31c7cacf38acd2182b45251d27f667e3747af3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc31c7cacf38acd2182b45251d27f667e3747af3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc31c7cacf38acd2182b45251d27f667e3747af3"}], "stats": {"total": 30, "additions": 11, "deletions": 19}, "files": [{"sha": "29232f221ac362c1a6d3add36fa4503a3ef947b7", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30fc3df7fcefca9a09c6a73307e89d9411faa8b3/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30fc3df7fcefca9a09c6a73307e89d9411faa8b3/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=30fc3df7fcefca9a09c6a73307e89d9411faa8b3", "patch": "@@ -9392,25 +9392,7 @@ xref_tag (enum tag_types tag_code, tree name,\n       if (code == ENUMERAL_TYPE)\n \t{\n \t  error (\"use of enum `%#D' without previous declaration\", name);\n-\n-\t  t = make_node (ENUMERAL_TYPE);\n-\n-\t  /* Give the type a default layout like unsigned int\n-\t     to avoid crashing if it does not get defined.  */\n-\t  TYPE_MODE (t) = TYPE_MODE (unsigned_type_node);\n-\t  TYPE_ALIGN (t) = TYPE_ALIGN (unsigned_type_node);\n-\t  TYPE_USER_ALIGN (t) = 0;\n-\t  TREE_UNSIGNED (t) = 1;\n-\t  TYPE_PRECISION (t) = TYPE_PRECISION (unsigned_type_node);\n-\t  TYPE_MIN_VALUE (t) = TYPE_MIN_VALUE (unsigned_type_node);\n-\t  TYPE_MAX_VALUE (t) = TYPE_MAX_VALUE (unsigned_type_node);\n-\n-\t  /* Enable us to recognize when a type is created in class context.\n-\t     To do nested classes correctly, this should probably be cleared\n-\t     out when we leave this classes scope.  Currently this in only\n-\t     done in `start_enum'.  */\n-\n-\t  pushtag (name, t, globalize);\n+\t  POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, error_mark_node);\n \t}\n       else\n \t{"}, {"sha": "fb762d54db650fb1feb22ed37dc9defe678fff94", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30fc3df7fcefca9a09c6a73307e89d9411faa8b3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30fc3df7fcefca9a09c6a73307e89d9411faa8b3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30fc3df7fcefca9a09c6a73307e89d9411faa8b3", "patch": "@@ -1,3 +1,8 @@\n+2004-03-11  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/14476\n+\t* g++.dg/lookup/enum1.C: New test.\n+\n 2004-03-10  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/14510"}, {"sha": "9422814e271632b42bcbc301a130cfa650534ee8", "filename": "gcc/testsuite/g++.dg/lookup/enum1.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30fc3df7fcefca9a09c6a73307e89d9411faa8b3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fenum1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30fc3df7fcefca9a09c6a73307e89d9411faa8b3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fenum1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fenum1.C?ref=30fc3df7fcefca9a09c6a73307e89d9411faa8b3", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/14476\n+\n+struct tree_common {\n+  enum tree_code code : 8; // { dg-error \"\" }\n+};"}]}