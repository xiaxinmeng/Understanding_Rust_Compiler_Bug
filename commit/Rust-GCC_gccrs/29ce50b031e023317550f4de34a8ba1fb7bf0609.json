{"sha": "29ce50b031e023317550f4de34a8ba1fb7bf0609", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjljZTUwYjAzMWUwMjMzMTc1NTBmNGRlMzRhOGJhMWZiN2JmMDYwOQ==", "commit": {"author": {"name": "Max Ostapenko", "email": "m.ostapenko@partner.samsung.com", "date": "2014-09-26T07:58:04Z"}, "committer": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2014-09-26T07:58:04Z"}, "message": "pex-common.h (struct pex_funcs): Add new parameter for open_write field.\n\nlibiberty/\n\n2014-09-26  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n\n\t* pex-common.h (struct pex_funcs): Add new parameter for open_write field.\n\t* pex-unix.c (pex_unix_open_write): Add support for new parameter.\n\t* pex-djgpp.c (pex_djgpp_open_write): Likewise.\n\t* pex-win32.c (pex_win32_open_write): Likewise.\n\t* pex-common.c (pex_run_in_environment): Likewise.\n\n\ninclude/\n\n2014-09-26  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n\n\t* libiberty.h (PEX_STDOUT_APPEND): New flag.\n\t(PEX_STDERR_APPEND): Likewise.\n\nFrom-SVN: r215632", "tree": {"sha": "5c46c787d7fca012d4fa12266eaff51b8da2d7b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c46c787d7fca012d4fa12266eaff51b8da2d7b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29ce50b031e023317550f4de34a8ba1fb7bf0609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ce50b031e023317550f4de34a8ba1fb7bf0609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29ce50b031e023317550f4de34a8ba1fb7bf0609", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ce50b031e023317550f4de34a8ba1fb7bf0609/comments", "author": null, "committer": null, "parents": [{"sha": "ecc81e33123d7ac9c11742161e128858d844b99d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecc81e33123d7ac9c11742161e128858d844b99d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecc81e33123d7ac9c11742161e128858d844b99d"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "e282aed0494a16889c8b2ae25b25a6ef55db9e3b", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ce50b031e023317550f4de34a8ba1fb7bf0609/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ce50b031e023317550f4de34a8ba1fb7bf0609/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=29ce50b031e023317550f4de34a8ba1fb7bf0609", "patch": "@@ -1,3 +1,8 @@\n+2014-09-26  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n+\n+\t* libiberty.h (PEX_STDOUT_APPEND): New flag.\n+\t(PEX_STDERR_APPEND): Likewise.\n+\n 2014-09-23  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* demangle.h (DMGL_DLANG): New macro."}, {"sha": "bcc1f9afaf7b731f486b752f0f42578e44455223", "filename": "include/libiberty.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ce50b031e023317550f4de34a8ba1fb7bf0609/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ce50b031e023317550f4de34a8ba1fb7bf0609/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=29ce50b031e023317550f4de34a8ba1fb7bf0609", "patch": "@@ -445,6 +445,11 @@ extern struct pex_obj *pex_init (int flags, const char *pname,\n    on Unix.  */\n #define PEX_BINARY_ERROR\t0x80\n \n+/* Append stdout to existing file instead of truncating it.  */\n+#define PEX_STDOUT_APPEND\t0x100\n+\n+/* Thes same as PEX_STDOUT_APPEND, but for STDERR.  */\n+#define PEX_STDERR_APPEND\t0x200\n \n /* Execute one program.  Returns NULL on success.  On error returns an\n    error string (typically just the name of a system call); the error"}, {"sha": "53d967e6d70c7ac6c4125807bc8c0375400a865b", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ce50b031e023317550f4de34a8ba1fb7bf0609/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ce50b031e023317550f4de34a8ba1fb7bf0609/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=29ce50b031e023317550f4de34a8ba1fb7bf0609", "patch": "@@ -1,3 +1,11 @@\n+2014-09-26  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n+\n+\t* pex-common.h (struct pex_funcs): Add new parameter for open_write field.\n+\t* pex-unix.c (pex_unix_open_write): Add support for new parameter.\n+\t* pex-djgpp.c (pex_djgpp_open_write): Likewise.\n+\t* pex-win32.c (pex_win32_open_write): Likewise.\n+\t* pex-common.c (pex_run_in_environment): Likewise.\n+\n 2014-09-23  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* Makefile.in (CFILES): Add d-demangle.c."}, {"sha": "146010a6fcac85bb7bf6964daed37321c4b30d3d", "filename": "libiberty/pex-common.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ce50b031e023317550f4de34a8ba1fb7bf0609/libiberty%2Fpex-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ce50b031e023317550f4de34a8ba1fb7bf0609/libiberty%2Fpex-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-common.c?ref=29ce50b031e023317550f4de34a8ba1fb7bf0609", "patch": "@@ -267,7 +267,8 @@ pex_run_in_environment (struct pex_obj *obj, int flags, const char *executable,\n   if (out < 0)\n     {\n       out = obj->funcs->open_write (obj, outname,\n-\t\t\t\t    (flags & PEX_BINARY_OUTPUT) != 0);\n+\t\t\t\t    (flags & PEX_BINARY_OUTPUT) != 0,\n+\t\t\t\t    (flags & PEX_STDOUT_APPEND) != 0);\n       if (out < 0)\n \t{\n \t  *err = errno;\n@@ -319,8 +320,9 @@ pex_run_in_environment (struct pex_obj *obj, int flags, const char *executable,\n     }\n   else\n     {\n-      errdes = obj->funcs->open_write (obj, errname, \n-\t\t\t\t       (flags & PEX_BINARY_ERROR) != 0);\n+      errdes = obj->funcs->open_write (obj, errname,\n+\t\t\t\t       (flags & PEX_BINARY_ERROR) != 0,\n+\t\t\t\t       (flags & PEX_STDERR_APPEND) != 0);\n       if (errdes < 0)\n \t{\n \t  *err = errno;"}, {"sha": "b6db248f692e57d42b99002b4cdfe6b85fc8c236", "filename": "libiberty/pex-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ce50b031e023317550f4de34a8ba1fb7bf0609/libiberty%2Fpex-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ce50b031e023317550f4de34a8ba1fb7bf0609/libiberty%2Fpex-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-common.h?ref=29ce50b031e023317550f4de34a8ba1fb7bf0609", "patch": "@@ -104,7 +104,7 @@ struct pex_funcs\n   /* Open file NAME for writing.  If BINARY is non-zero, open in\n      binary mode.  Return >= 0 on success, -1 on error.  */\n   int (*open_write) (struct pex_obj *, const char */* name */,\n-                     int /* binary */);\n+                     int /* binary */, int /* append */);\n   /* Execute a child process.  FLAGS, EXECUTABLE, ARGV, ERR are from\n      pex_run.  IN, OUT, ERRDES, TOCLOSE are all descriptors, from\n      open_read, open_write, or pipe, or they are one of STDIN_FILE_NO,"}, {"sha": "b014ffa33177a20b9669e465771b8a0fbd866b37", "filename": "libiberty/pex-djgpp.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ce50b031e023317550f4de34a8ba1fb7bf0609/libiberty%2Fpex-djgpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ce50b031e023317550f4de34a8ba1fb7bf0609/libiberty%2Fpex-djgpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-djgpp.c?ref=29ce50b031e023317550f4de34a8ba1fb7bf0609", "patch": "@@ -43,7 +43,7 @@ extern int errno;\n #endif\n \n static int pex_djgpp_open_read (struct pex_obj *, const char *, int);\n-static int pex_djgpp_open_write (struct pex_obj *, const char *, int);\n+static int pex_djgpp_open_write (struct pex_obj *, const char *, int, int);\n static pid_t pex_djgpp_exec_child (struct pex_obj *, int, const char *,\n \t\t\t\t  char * const *, char * const *,\n \t\t\t\t  int, int, int, int,\n@@ -90,10 +90,12 @@ pex_djgpp_open_read (struct pex_obj *obj ATTRIBUTE_UNUSED,\n \n static int\n pex_djgpp_open_write (struct pex_obj *obj ATTRIBUTE_UNUSED,\n-\t\t      const char *name, int binary)\n+\t\t      const char *name, int binary, int append)\n {\n   /* Note that we can't use O_EXCL here because gcc may have already\n      created the temporary file via make_temp_file.  */\n+  if (append)\n+    return -1;\n   return open (name,\n \t       (O_WRONLY | O_CREAT | O_TRUNC\n \t\t| (binary ? O_BINARY : O_TEXT)),"}, {"sha": "0715115747826d510a960ae772cccc052012ee5a", "filename": "libiberty/pex-unix.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ce50b031e023317550f4de34a8ba1fb7bf0609/libiberty%2Fpex-unix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ce50b031e023317550f4de34a8ba1fb7bf0609/libiberty%2Fpex-unix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-unix.c?ref=29ce50b031e023317550f4de34a8ba1fb7bf0609", "patch": "@@ -301,7 +301,7 @@ pex_wait (struct pex_obj *obj, pid_t pid, int *status, struct pex_time *time)\n static void pex_child_error (struct pex_obj *, const char *, const char *, int)\n      ATTRIBUTE_NORETURN;\n static int pex_unix_open_read (struct pex_obj *, const char *, int);\n-static int pex_unix_open_write (struct pex_obj *, const char *, int);\n+static int pex_unix_open_write (struct pex_obj *, const char *, int, int);\n static pid_t pex_unix_exec_child (struct pex_obj *, int, const char *,\n \t\t\t\t char * const *, char * const *,\n \t\t\t\t int, int, int, int,\n@@ -350,11 +350,12 @@ pex_unix_open_read (struct pex_obj *obj ATTRIBUTE_UNUSED, const char *name,\n \n static int\n pex_unix_open_write (struct pex_obj *obj ATTRIBUTE_UNUSED, const char *name,\n-\t\t     int binary ATTRIBUTE_UNUSED)\n+\t\t     int binary ATTRIBUTE_UNUSED, int append)\n {\n   /* Note that we can't use O_EXCL here because gcc may have already\n      created the temporary file via make_temp_file.  */\n-  return open (name, O_WRONLY | O_CREAT | O_TRUNC, PUBLIC_MODE);\n+  return open (name, O_WRONLY | O_CREAT\n+\t\t     | (append ? O_APPEND : O_TRUNC), PUBLIC_MODE);\n }\n \n /* Close a file.  */"}, {"sha": "66d2f1157c730ae99e62a2e2b4be20437c43af52", "filename": "libiberty/pex-win32.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ce50b031e023317550f4de34a8ba1fb7bf0609/libiberty%2Fpex-win32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ce50b031e023317550f4de34a8ba1fb7bf0609/libiberty%2Fpex-win32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-win32.c?ref=29ce50b031e023317550f4de34a8ba1fb7bf0609", "patch": "@@ -78,7 +78,7 @@ backslashify (char *s)\n }\n \n static int pex_win32_open_read (struct pex_obj *, const char *, int);\n-static int pex_win32_open_write (struct pex_obj *, const char *, int);\n+static int pex_win32_open_write (struct pex_obj *, const char *, int, int);\n static pid_t pex_win32_exec_child (struct pex_obj *, int, const char *,\n \t\t\t\t  char * const *, char * const *,\n                                   int, int, int, int,\n@@ -126,10 +126,12 @@ pex_win32_open_read (struct pex_obj *obj ATTRIBUTE_UNUSED, const char *name,\n \n static int\n pex_win32_open_write (struct pex_obj *obj ATTRIBUTE_UNUSED, const char *name,\n-\t\t      int binary)\n+\t\t      int binary, int append)\n {\n   /* Note that we can't use O_EXCL here because gcc may have already\n      created the temporary file via make_temp_file.  */\n+  if (append)\n+    return -1;\n   return _open (name,\n \t\t(_O_WRONLY | _O_CREAT | _O_TRUNC\n \t\t | (binary ? _O_BINARY : _O_TEXT)),"}]}