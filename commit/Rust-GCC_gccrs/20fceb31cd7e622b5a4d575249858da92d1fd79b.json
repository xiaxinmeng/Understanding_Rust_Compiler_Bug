{"sha": "20fceb31cd7e622b5a4d575249858da92d1fd79b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBmY2ViMzFjZDdlNjIyYjVhNGQ1NzUyNDk4NThkYTkyZDFmZDc5Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-06-30T20:56:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-06-30T20:56:43Z"}, "message": "gcc/\n\t* defaults.h (HAVE_load_multiple, gen_load_multiple)\n\t(HAVE_store_multiple, gen_store_multiple): Delete.\n\t* target-insns.def (load_multiple, store_multiple): New targetm\n\tinstruction patterns.\n\t* expr.c (move_block_to_reg, move_block_from_reg): Use them instead\n\tof HAVE_*/gen_* interface.\n\nFrom-SVN: r225210", "tree": {"sha": "098dfc3be0a0f599560f5be88b735ac1df50858f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/098dfc3be0a0f599560f5be88b735ac1df50858f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20fceb31cd7e622b5a4d575249858da92d1fd79b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20fceb31cd7e622b5a4d575249858da92d1fd79b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20fceb31cd7e622b5a4d575249858da92d1fd79b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20fceb31cd7e622b5a4d575249858da92d1fd79b/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ccf5bbdd40aaa0258eb9671cd11c0bab4a16236e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccf5bbdd40aaa0258eb9671cd11c0bab4a16236e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccf5bbdd40aaa0258eb9671cd11c0bab4a16236e"}], "stats": {"total": 59, "additions": 22, "deletions": 37}, "files": [{"sha": "88614cfdab66803b1f19ded0c0c6af83dfc6c5cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20fceb31cd7e622b5a4d575249858da92d1fd79b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20fceb31cd7e622b5a4d575249858da92d1fd79b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20fceb31cd7e622b5a4d575249858da92d1fd79b", "patch": "@@ -1,3 +1,12 @@\n+2015-06-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* defaults.h (HAVE_load_multiple, gen_load_multiple)\n+\t(HAVE_store_multiple, gen_store_multiple): Delete.\n+\t* target-insns.def (load_multiple, store_multiple): New targetm\n+\tinstruction patterns.\n+\t* expr.c (move_block_to_reg, move_block_from_reg): Use them instead\n+\tof HAVE_*/gen_* interface.\n+\n 2015-06-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* defaults.h (HAVE_mem_thread_fence, gen_mem_thread_fence)"}, {"sha": "ea10eb915bcb306b888f078a98c0e439bc76edd0", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20fceb31cd7e622b5a4d575249858da92d1fd79b/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20fceb31cd7e622b5a4d575249858da92d1fd79b/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=20fceb31cd7e622b5a4d575249858da92d1fd79b", "patch": "@@ -1426,26 +1426,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_VTABLE_USES_DESCRIPTORS 0\n #endif\n \n-#ifndef HAVE_load_multiple\n-#define HAVE_load_multiple 0\n-static inline rtx\n-gen_load_multiple (rtx, rtx, rtx)\n-{\n-  gcc_unreachable ();\n-  return NULL;\n-}\n-#endif\n-\n-#ifndef HAVE_store_multiple\n-#define HAVE_store_multiple 0\n-static inline rtx\n-gen_store_multiple (rtx, rtx, rtx)\n-{\n-  gcc_unreachable ();\n-  return NULL;\n-}\n-#endif\n-\n #ifndef HAVE_tablejump\n #define HAVE_tablejump 0\n static inline rtx"}, {"sha": "6690574009f1a28a2f3a651e2b91bbea69a1c0d5", "filename": "gcc/expr.c", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20fceb31cd7e622b5a4d575249858da92d1fd79b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20fceb31cd7e622b5a4d575249858da92d1fd79b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=20fceb31cd7e622b5a4d575249858da92d1fd79b", "patch": "@@ -1491,23 +1491,19 @@ emit_block_move_via_loop (rtx x, rtx y, rtx size,\n void\n move_block_to_reg (int regno, rtx x, int nregs, machine_mode mode)\n {\n-  int i;\n-  rtx pat;\n-  rtx_insn *last;\n-\n   if (nregs == 0)\n     return;\n \n   if (CONSTANT_P (x) && !targetm.legitimate_constant_p (mode, x))\n     x = validize_mem (force_const_mem (mode, x));\n \n   /* See if the machine can do this with a load multiple insn.  */\n-  if (HAVE_load_multiple)\n+  if (targetm.have_load_multiple ())\n     {\n-      last = get_last_insn ();\n-      pat = gen_load_multiple (gen_rtx_REG (word_mode, regno), x,\n-\t\t\t       GEN_INT (nregs));\n-      if (pat)\n+      rtx_insn *last = get_last_insn ();\n+      rtx first = gen_rtx_REG (word_mode, regno);\n+      if (rtx_insn *pat = targetm.gen_load_multiple (first, x,\n+\t\t\t\t\t\t     GEN_INT (nregs)))\n \t{\n \t  emit_insn (pat);\n \t  return;\n@@ -1516,7 +1512,7 @@ move_block_to_reg (int regno, rtx x, int nregs, machine_mode mode)\n \tdelete_insns_since (last);\n     }\n \n-  for (i = 0; i < nregs; i++)\n+  for (int i = 0; i < nregs; i++)\n     emit_move_insn (gen_rtx_REG (word_mode, regno + i),\n \t\t    operand_subword_force (x, i, mode));\n }\n@@ -1527,18 +1523,16 @@ move_block_to_reg (int regno, rtx x, int nregs, machine_mode mode)\n void\n move_block_from_reg (int regno, rtx x, int nregs)\n {\n-  int i;\n-\n   if (nregs == 0)\n     return;\n \n   /* See if the machine can do this with a store multiple insn.  */\n-  if (HAVE_store_multiple)\n+  if (targetm.have_store_multiple ())\n     {\n       rtx_insn *last = get_last_insn ();\n-      rtx pat = gen_store_multiple (x, gen_rtx_REG (word_mode, regno),\n-\t\t\t\t    GEN_INT (nregs));\n-      if (pat)\n+      rtx first = gen_rtx_REG (word_mode, regno);\n+      if (rtx_insn *pat = targetm.gen_store_multiple (x, first,\n+\t\t\t\t\t\t      GEN_INT (nregs)))\n \t{\n \t  emit_insn (pat);\n \t  return;\n@@ -1547,7 +1541,7 @@ move_block_from_reg (int regno, rtx x, int nregs)\n \tdelete_insns_since (last);\n     }\n \n-  for (i = 0; i < nregs; i++)\n+  for (int i = 0; i < nregs; i++)\n     {\n       rtx tem = operand_subword (x, i, 1, BLKmode);\n "}, {"sha": "47451f065f54225012298c08eefd3acf09455a24", "filename": "gcc/target-insns.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20fceb31cd7e622b5a4d575249858da92d1fd79b/gcc%2Ftarget-insns.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20fceb31cd7e622b5a4d575249858da92d1fd79b/gcc%2Ftarget-insns.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-insns.def?ref=20fceb31cd7e622b5a4d575249858da92d1fd79b", "patch": "@@ -32,10 +32,12 @@\n    Instructions should be documented in md.texi rather than here.  */\n DEF_TARGET_INSN (canonicalize_funcptr_for_compare, (rtx x0, rtx x1))\n DEF_TARGET_INSN (epilogue, (void))\n+DEF_TARGET_INSN (load_multiple, (rtx x0, rtx x1, rtx x2))\n DEF_TARGET_INSN (mem_signal_fence, (rtx x0))\n DEF_TARGET_INSN (mem_thread_fence, (rtx x0))\n DEF_TARGET_INSN (memory_barrier, (void))\n DEF_TARGET_INSN (prologue, (void))\n DEF_TARGET_INSN (return, (void))\n DEF_TARGET_INSN (sibcall_epilogue, (void))\n DEF_TARGET_INSN (simple_return, (void))\n+DEF_TARGET_INSN (store_multiple, (rtx x0, rtx x1, rtx x2))"}]}