{"sha": "23b8a89f2f966d75111f507c9ff7d8897f0b3763", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNiOGE4OWYyZjk2NmQ3NTExMWY1MDdjOWZmN2Q4ODk3ZjBiMzc2Mw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-04-28T22:58:53Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-04-28T22:58:53Z"}, "message": "(arith_double_operand): Modify to accept all possible constants.\n\nFrom-SVN: r7172", "tree": {"sha": "f6236f90d4b03873cf2408a24f02dcac1383d25e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6236f90d4b03873cf2408a24f02dcac1383d25e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23b8a89f2f966d75111f507c9ff7d8897f0b3763", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23b8a89f2f966d75111f507c9ff7d8897f0b3763", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23b8a89f2f966d75111f507c9ff7d8897f0b3763", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23b8a89f2f966d75111f507c9ff7d8897f0b3763/comments", "author": null, "committer": null, "parents": [{"sha": "39211cd56bd4dde4a79daeb140c66d1a0b06e0aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39211cd56bd4dde4a79daeb140c66d1a0b06e0aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39211cd56bd4dde4a79daeb140c66d1a0b06e0aa"}], "stats": {"total": 16, "additions": 5, "deletions": 11}, "files": [{"sha": "07800853fdcf6bd03d71f1fb04986b42baa9ad5b", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23b8a89f2f966d75111f507c9ff7d8897f0b3763/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23b8a89f2f966d75111f507c9ff7d8897f0b3763/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=23b8a89f2f966d75111f507c9ff7d8897f0b3763", "patch": "@@ -387,26 +387,20 @@ arith_operand (op, mode)\n \t  || (GET_CODE (op) == CONST_INT && SMALL_INT (op)));\n }\n \n-/* Return true if OP is a register, or is a CONST_INT or CONST_DOUBLE that\n-   can fit in a 13 bit immediate field.  This is an acceptable DImode operand\n-   for most 3 address instructions.  */\n+/* Return true if OP is a register, is a CONST_INT that fits in a 13 bit\n+   immediate field, or is a CONST_DOUBLE whose both parts fit in a 13 bit\n+   immediate field.  */\n \n int\n arith_double_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n   return (register_operand (op, mode)\n+\t  || (GET_CODE (op) == CONST_INT && SMALL_INT (op))\n \t  || (GET_CODE (op) == CONST_DOUBLE\n-\t      && (GET_MODE (op) == mode || GET_MODE (op) == VOIDmode)\n \t      && (unsigned) (CONST_DOUBLE_LOW (op) + 0x1000) < 0x2000\n-\t      && ((CONST_DOUBLE_HIGH (op) == -1\n-\t\t   && (CONST_DOUBLE_LOW (op) & 0x1000) == 0x1000)\n-\t\t  || (CONST_DOUBLE_HIGH (op) == 0\n-\t\t      && (CONST_DOUBLE_LOW (op) & 0x1000) == 0)))\n-\t  || (GET_CODE (op) == CONST_INT\n-\t      && (GET_MODE (op) == mode || GET_MODE (op) == VOIDmode)\n-\t      && (unsigned) (INTVAL (op) + 0x1000) < 0x2000));\n+\t      && (unsigned) (CONST_DOUBLE_HIGH (op) + 0x1000) < 0x2000));\n }\n \n /* Return truth value of whether OP is a integer which fits the"}]}