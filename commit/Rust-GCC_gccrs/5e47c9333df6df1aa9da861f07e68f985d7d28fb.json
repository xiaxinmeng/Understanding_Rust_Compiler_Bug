{"sha": "5e47c9333df6df1aa9da861f07e68f985d7d28fb", "node_id": "C_kwDOANBUbNoAKDVlNDdjOTMzM2RmNmRmMWFhOWRhODYxZjA3ZTY4Zjk4NWQ3ZDI4ZmI", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-07-14T16:35:55Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-07-18T19:48:13Z"}, "message": "Check if transitives need to be registered.\n\nWhenever a relation is added, register_transitive is always called.\nIf neither operand was in a relation before, or this is not a new\nrelation, then there is no need to register transitives.\n\n\tPR tree-optimization/106280\n\t* value-relation.cc (dom_oracle::register_relation): Register\n\ttransitives only when it is possible for there to be one.\n\t(dom_oracle::set_one_relation): Return NULL if this is an\n\texisting relation.", "tree": {"sha": "e21ee755c87bec66fbc2a63ed7abb8c02a5a575c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e21ee755c87bec66fbc2a63ed7abb8c02a5a575c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e47c9333df6df1aa9da861f07e68f985d7d28fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e47c9333df6df1aa9da861f07e68f985d7d28fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e47c9333df6df1aa9da861f07e68f985d7d28fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e47c9333df6df1aa9da861f07e68f985d7d28fb/comments", "author": null, "committer": null, "parents": [{"sha": "e9ee752bbe2cc5632b803b01dc7c98ff214aede9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9ee752bbe2cc5632b803b01dc7c98ff214aede9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9ee752bbe2cc5632b803b01dc7c98ff214aede9"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "bd344253af316d48f4415f5292fe548e636df6aa", "filename": "gcc/value-relation.cc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e47c9333df6df1aa9da861f07e68f985d7d28fb/gcc%2Fvalue-relation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e47c9333df6df1aa9da861f07e68f985d7d28fb/gcc%2Fvalue-relation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-relation.cc?ref=5e47c9333df6df1aa9da861f07e68f985d7d28fb", "patch": "@@ -967,8 +967,12 @@ dom_oracle::register_relation (basic_block bb, relation_kind k, tree op1,\n     equiv_oracle::register_relation (bb, k, op1, op2);\n   else\n     {\n+      // if neither op1 nor op2 are in a relation before this is registered,\n+      // there will be no transitive.\n+      bool check = bitmap_bit_p (m_relation_set, SSA_NAME_VERSION (op1))\n+\t\t   || bitmap_bit_p (m_relation_set, SSA_NAME_VERSION (op2));\n       relation_chain *ptr = set_one_relation (bb, k, op1, op2);\n-      if (ptr)\n+      if (ptr && check)\n \tregister_transitives (bb, *ptr);\n     }\n }\n@@ -1010,13 +1014,16 @@ dom_oracle::set_one_relation (basic_block bb, relation_kind k, tree op1,\n       // Check into whether we can simply replace the relation rather than\n       // intersecting it.  THis may help with some optimistic iterative\n       // updating algorithms.\n-      ptr->intersect (vr);\n+      bool new_rel = ptr->intersect (vr);\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \" to produce \");\n \t  ptr->dump (dump_file);\n-\t  fprintf (dump_file, \"\\n\");\n+\t  fprintf (dump_file, \" %s.\\n\", new_rel ? \"Updated\" : \"No Change\");\n \t}\n+      // If there was no change, return no record..\n+      if (!new_rel)\n+\treturn NULL;\n     }\n   else\n     {"}]}