{"sha": "6fba0eea8d6464966ac6d37af98a7487a9a03d19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZiYTBlZWE4ZDY0NjQ5NjZhYzZkMzdhZjk4YTc0ODdhOWEwM2QxOQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-07T00:17:12Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-07T00:17:12Z"}, "message": "Daily bump.", "tree": {"sha": "8c911dd4dd3101463f56f202b5f7bbde0623019c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c911dd4dd3101463f56f202b5f7bbde0623019c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fba0eea8d6464966ac6d37af98a7487a9a03d19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fba0eea8d6464966ac6d37af98a7487a9a03d19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fba0eea8d6464966ac6d37af98a7487a9a03d19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fba0eea8d6464966ac6d37af98a7487a9a03d19/comments", "author": null, "committer": null, "parents": [{"sha": "d9e9532bb3bf5db4cd6afd49d343ede5b27c3c9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9e9532bb3bf5db4cd6afd49d343ede5b27c3c9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9e9532bb3bf5db4cd6afd49d343ede5b27c3c9f"}], "stats": {"total": 651, "additions": 650, "deletions": 1}, "files": [{"sha": "da4b49f5a59dd2d288b55cc98a4c2785e6f3453f", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba0eea8d6464966ac6d37af98a7487a9a03d19/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba0eea8d6464966ac6d37af98a7487a9a03d19/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=6fba0eea8d6464966ac6d37af98a7487a9a03d19", "patch": "@@ -1,3 +1,7 @@\n+2021-07-06  Gaius Mulley  <gaius.mulley@southwales.ac.uk>\n+\n+\t* MAINTAINERS: Add myself for write after approval and DCO.\n+\n 2021-07-05  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* Makefile.def: Add dsymutil defs."}, {"sha": "8fb9653b9be0b39ac8dc7efb6c59d6cee9c7995c", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba0eea8d6464966ac6d37af98a7487a9a03d19/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba0eea8d6464966ac6d37af98a7487a9a03d19/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=6fba0eea8d6464966ac6d37af98a7487a9a03d19", "patch": "@@ -1,3 +1,9 @@\n+2021-07-06  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n+\n+\t* inclhack.def (aix_externcpp1): Improve select regexp.\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/sys/socket.h: Update.\n+\n 2021-06-30  Xi Ruoyao  <xry111@mengyan1223.wang>\n \n \tPR other/91085"}, {"sha": "1d07abd7bdf894684e7eaf6192d7612ac619531b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba0eea8d6464966ac6d37af98a7487a9a03d19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba0eea8d6464966ac6d37af98a7487a9a03d19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6fba0eea8d6464966ac6d37af98a7487a9a03d19", "patch": "@@ -1,3 +1,143 @@\n+2021-07-06  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\tPR debug/101283\n+\t* dwarf2ctf.c (ctf_get_AT_data_member_location): Multiply by 8 to get\n+\tnumber of bits.\n+\n+2021-07-06  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gimple-pretty-print.c (percent_G_format): Remove.\n+\t* tree-diagnostic.c (default_tree_printer): Remove calls.\n+\t* tree-pretty-print.c (percent_K_format): Remove.\n+\t* tree-pretty-print.h (percent_K_format): Remove.\n+\n+2021-07-06  Martin Sebor  <msebor@redhat.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (aarch64_simd_expand_builtin):\n+\tRemove %K and use error_at.\n+\t(aarch64_expand_fcmla_builtin): Same.\n+\t(aarch64_expand_builtin_tme): Same.\n+\t(aarch64_expand_builtin_memtag): Same.\n+\t* config/arm/arm-builtins.c (arm_expand_acle_builtin): Same.\n+\t(arm_expand_builtin): Same.\n+\t* config/arm/arm.c (bounds_check): Same.\n+\n+2021-07-06  Martin Sebor  <msebor@redhat.com>\n+\n+\t* builtins.c (warn_string_no_nul): Remove %G.\n+\t(maybe_warn_for_bound): Same.\n+\t(warn_for_access): Same.\n+\t(check_access): Same.\n+\t(check_strncat_sizes): Same.\n+\t(expand_builtin_strncat): Same.\n+\t(expand_builtin_strncmp): Same.\n+\t(expand_builtin): Same.\n+\t(expand_builtin_object_size): Same.\n+\t(warn_dealloc_offset): Same.\n+\t(maybe_emit_free_warning): Same.\n+\t* calls.c (maybe_warn_alloc_args_overflow): Same.\n+\t(maybe_warn_nonstring_arg): Same.\n+\t(maybe_warn_rdwr_sizes): Same.\n+\t* expr.c (expand_expr_real_1): Remove %K.\n+\t* gimple-fold.c (gimple_fold_builtin_strncpy): Remove %G.\n+\t(gimple_fold_builtin_strncat): Same.\n+\t* gimple-ssa-sprintf.c (format_directive): Same.\n+\t(handle_printf_call): Same.\n+\t* gimple-ssa-warn-alloca.c (pass_walloca::execute): Same.\n+\t* gimple-ssa-warn-restrict.c (maybe_diag_overlap): Same.\n+\t(maybe_diag_access_bounds): Same.  Call gimple_location.\n+\t(check_bounds_or_overlap): Same.\n+\t* trans-mem.c (ipa_tm_scan_irr_block): Remove %K.  Simplify.\n+\t* tree-ssa-ccp.c (pass_post_ipa_warn::execute): Remove %G.\n+\t* tree-ssa-strlen.c (maybe_warn_overflow): Same.\n+\t(maybe_diag_stxncpy_trunc): Same.\n+\t(handle_builtin_stxncpy_strncat): Same.\n+\t(maybe_warn_pointless_strcmp): Same.\n+\t* tree-ssa-uninit.c (maybe_warn_operand): Same.\n+\n+2021-07-06  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/97194\n+\t* config/i386/predicates.md (vec_setm_operand): Enable\n+\tregister_operand for TARGET_SSE4_1.\n+\t* config/i386/mmx.md (vec_setv2hi): Use vec_setm_operand\n+\tas operand 2 predicate.  Call ix86_expand_vector_set_var\n+\tfor non-constant index operand.\n+\t(vec_setv4qi): Use vec_setm_mmx_operand as operand 2 predicate.\n+\tCall ix86_expand_vector_set_var for non-constant index operand.\n+\n+2021-07-06  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* config/h8300/jumpcall.md (*branch): When possible, generate\n+\tthe comparison in CCZN mode.\n+\t* config/h8300/predicates.md (simple_memory_operand): Reject all\n+\tauto-increment addressing modes.\n+\n+2021-07-06  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR bootstrap/100246\n+\t* config/i386/i386.h (struct stringop_algs): Define a CTOR for\n+\tthis type.\n+\n+2021-07-06  Richard Biener  <rguenther@suse.de>\n+\n+\t* doc/md.texi (vec_fmaddsub<mode>4): Document.\n+\t(vec_fmsubadd<mode>4): Likewise.\n+\t* optabs.def (vec_fmaddsub$a4): Add.\n+\t(vec_fmsubadd$a4): Likewise.\n+\t* internal-fn.def (IFN_VEC_FMADDSUB): Add.\n+\t(IFN_VEC_FMSUBADD): Likewise.\n+\t* tree-vect-slp-patterns.c (addsub_pattern::recognize):\n+\tRefactor to handle IFN_VEC_FMADDSUB and IFN_VEC_FMSUBADD.\n+\t(addsub_pattern::build): Likewise.\n+\t* tree-vect-slp.c (vect_optimize_slp): CFN_VEC_FMADDSUB\n+\tand CFN_VEC_FMSUBADD are not transparent for permutes.\n+\t* config/i386/sse.md (vec_fmaddsub<mode>4): New expander.\n+\t(vec_fmsubadd<mode>4): Likewise.\n+\n+2021-07-06  Richard Biener  <rguenther@suse.de>\n+\n+\t* doc/invoke.texi (fmove-loop-stores): Document.\n+\t* common.opt (fmove-loop-stores): New option.\n+\t* opts.c (default_options_table): Enable -fmove-loop-stores\n+\tat -O1 but not -Og.\n+\t* tree-ssa-loop-im.c (pass_lim::execute): Pass\n+\tflag_move_loop_stores instead of true to\n+\tloop_invariant_motion_in_fun.\n+\n+2021-07-06  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* doc/install.texi: Document --with-dsymutil.\n+\n+2021-07-06  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/101256\n+\t* dbgcnt.def (phiopt_edge_range): New counter.\n+\t* tree-ssa-phiopt.c (replace_phi_edge_with_variable):\n+\tCheck to make sure the new name is defined in the same\n+\tbb as the conditional before duplicating range info.\n+\tAlso add debug counter.\n+\n+2021-07-06  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR rtl-optimization/100328\n+\t* config/i386/i386-options.c (ix86_option_override_internal):\n+\tSet param_ira_consider_dup_in_all_alts to 0.\n+\n+2021-07-06  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR rtl-optimization/100328\n+\t* doc/invoke.texi (ira-consider-dup-in-all-alts): Document new\n+\tparameter.\n+\t* ira.c (ira_get_dup_out_num): Adjust as parameter\n+\tparam_ira_consider_dup_in_all_alts.\n+\t* params.opt (ira-consider-dup-in-all-alts): New.\n+\t* ira-conflicts.c (process_regs_for_copy): Add one parameter\n+\tsingle_input_op_has_cstr_p.\n+\t(get_freq_for_shuffle_copy): New function.\n+\t(add_insn_allocno_copies): Adjust as single_input_op_has_cstr_p.\n+\t* ira-int.h (ira_get_dup_out_num): Add one bool parameter.\n+\n 2021-07-05  Jeff Law  <jeffreyalaw@gmail.com>\n \n \t* config/h8300/shiftrotate.md (shift-by-variable patterns): Update to"}, {"sha": "b90532138a9a30f988342e6c409fcb633b8f24db", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba0eea8d6464966ac6d37af98a7487a9a03d19/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba0eea8d6464966ac6d37af98a7487a9a03d19/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=6fba0eea8d6464966ac6d37af98a7487a9a03d19", "patch": "@@ -1 +1 @@\n-20210706\n+20210707"}, {"sha": "7d17f9ea8402a768edb457df3dd6a7abd7d920ba", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 357, "deletions": 0, "changes": 357, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba0eea8d6464966ac6d37af98a7487a9a03d19/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba0eea8d6464966ac6d37af98a7487a9a03d19/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6fba0eea8d6464966ac6d37af98a7487a9a03d19", "patch": "@@ -1,3 +1,360 @@\n+2021-07-06  Bob Duff  <duff@adacore.com>\n+\n+\t* atree.ads (Current_Error_Node): Initialize to Empty.\n+\n+2021-07-06  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_put_image.adb: Eliminate references to\n+\tDebug_Flag_Underscore_Z.  Change the meaning of the function\n+\tEnable_Put_Image. Previously, a result of False for a tagged\n+\ttype would mean that the type does not get a Put_Image (PI)\n+\troutine at all. Now, it means that the type gets a PI routine\n+\twith very abbreviated functionality (just a call to\n+\tUnknown_Put_Image). This resolves problems in mixing code\n+\tcompiled with and without the -gnat2022 switch.\n+\t* exp_ch3.adb: Enable_Put_Image no longer participates in\n+\tdetermining whether a tagged type gets a Put_Image procedure.  A\n+\ttagged type does not get a Put_Image procedure if the type\n+\tRoot_Buffer_Type is unavailable. This is needed to support cross\n+\ttargets where tagged types are supported but the type\n+\tRoot_Buffer_Type is not available.\n+\t* exp_dist.adb: Add workarounds for some problems that arise\n+\twhen using the (obsolete?) Garlic implementation of the\n+\tdistributed systems annex with Ada 2022 constructs.\n+\t* libgnat/a-sttebu.ads: Workaround a bootstrapping problem.\n+\tOlder compilers do not support raise expressions, so revise the\n+\tthe Pre'Class condition to meet this requirement without\n+\tchanging the condition's behavior at run time.\n+\n+2021-07-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* repinfo-input.adb (JSON_Entity_Kind, Read_Variant_Part): Fix\n+\ttypo in comment.\n+\n+2021-07-06  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Assignment): Add new nested function,\n+\tOmit_Range_Check_For_Streaming, and make call to\n+\tApply_Scalar_Range_Check conditional on the result of this new\n+\tfunction.\n+\t* exp_attr.adb (Compile_Stream_Body_In_Scope): Eliminate Check\n+\tparameter, update callers.  The new\n+\tOmit_Range_Check_For_Streaming parameter takes the place of the\n+\told use of calling Insert_Action with Suppress => All_Checks,\n+\twhich was insufficiently precise (it did not allow suppressing\n+\tchecks for one component but not for another).\n+\t(Expand_N_Attribute_Reference): Eliminate another \"Suppress =>\n+\tAll_Checks\" from an Insert_Action call, this one in generating\n+\tthe expansion of a T'Read attribute reference for a composite\n+\ttype T.\n+\n+2021-07-06  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Loop_Parameter_Specification): Check for\n+\tempty loops caused by constraints.\n+\n+2021-07-06  Nicolas Roche  <roche@adacore.com>\n+\n+\t* rtinit.c (skip_quoted_string): Handle malformed command line\n+\twith no closing double quote.\n+\t(skip_argument): Handle case in which a null character is\n+\tencountered by skip_quote_string.\n+\n+2021-07-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* uname.adb (Add_Node_Name): Replace local constant whose\n+\tinitial expression was evaluated even when unnecessary with just\n+\tthat expression that is evaluated at most once and only when\n+\tneeded.\n+\n+2021-07-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* lib.adb (Remove_Unit): Replace defensive code with an\n+\tassertion.\n+\t* par-load.adb (Load): Address a question mark in the comment.\n+\n+2021-07-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Enclosing_Comp_Unit_Node): When the loop exits\n+\tthe Current_Node is either an N_Compilation_Unit node or Empty,\n+\tso simply return it without redundant checks.\n+\n+2021-07-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* lib-load.adb (Load_Unit): Remove excessive whitespace.\n+\t* lib.adb (Is_Internal_Unit, Is_Predefined_Unit): Likewise.\n+\t* par-ch10.adb (P_Compilation_Unit): Simplify with membership\n+\ttest.\n+\t* par-load.adb (Load): Likewise.\n+\t* uname.adb (Get_Unit_Name): Likewise.\n+\n+2021-07-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* lib-writ.adb (Ensure_System_Dependency): Simplify by reusing a\n+\tconstant name.\n+\n+2021-07-06  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch5.adb\n+\t(Expand_N_Case_Statement.Expand_General_Case_Statement.Pattern_Match):\n+\tWhen generating an equality test for a statically known discrete\n+\tvalue, only generate the numeric value if the discrete type is\n+\tnot an enumeration type.  If it is an enumeration type, then\n+\tcall Get_Enum_Lit_From_Pos instead.\n+\n+2021-07-06  Justin Squirek  <squirek@adacore.com>\n+\n+\t* par-ch6.adb (Get_Return_Kind): Removed.\n+\t(Is_Extended): Created to identify simple and \"when\" return\n+\tstatements from extended return statements.\n+\t(P_Return_Statement): Merged simple and \"when\" return statement\n+\tprocessing.\n+\n+2021-07-06  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch4.adb (Try_One_Prefix_Interpretation): Augment test of\n+\t\"not Extensions_Allowed\" with test for absence of Obj_Type's\n+\tprimitive operations Elist, as an additional condition for early\n+\treturn from this procedure.\n+\n+2021-07-06  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch4.adb (Process_Transient_In_Expression): In one comment,\n+\tfix two typos and reorder wording of one sentence, plus minor\n+\treformatting.\n+\n+2021-07-06  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Formal_Container_Element_Loop): Remove\n+\tlegacy expansion of element iterators, and use expansion form\n+\tused by unconstrained element types in the general case.\n+\n+2021-07-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Process_Transient_In_Expression): Ensure that\n+\tFin_Context, used to insert finalization code for the\n+\texpression, is a list member: the value returned by\n+\tFind_Hook_Context may be an expression node when the transient\n+\tis part of a larger expression and it has a non-boolean type.\n+\n+2021-07-06  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_case.adb: Fix error message.\n+\n+2021-07-06  Bob Duff  <duff@adacore.com>\n+\n+\t* tbuild.adb (Convert_To): Add assert, along with a comment.\n+\t(Make_DT_Access): Remove this function, which is not used.  It\n+\twas incorrect anyway (the call to New_Occurrence_Of should not\n+\tbe there).\n+\t(Unchecked_Convert_To): Add assert.  The previous version's test\n+\tfor unchecked conversion to the same type was redundant and\n+\tcould never be true, because the previous 'if' already checked\n+\tfor ANY expression of the same type. Remove that, and replace\n+\twith a test for unchecked conversion to a related type.\n+\tOtherwise, we somethings get things like\n+\t\"finalize(some_type!(some_type!(x)))\" in the generated code,\n+\twhere x is already of type some_type, but we're converting it to\n+\tthe private type and then to the full type or vice versa (so the\n+\ttypes aren't equal, so the previous 'if' doesn't catch it).\n+\tAvoid updating the Parent. This is not necessary; the Parent\n+\twill be updated if/when the node is attached to the tree.\n+\t* tbuild.ads: Fix comments. No need to say \"this is safe\" when\n+\twe just explained that a few lines earlier.  Remove\n+\tMake_DT_Access.\n+\t* sinfo.ads: Add comments.\n+\t* exp_ch7.adb (Make_Finalize_Address_Stmts): Minor comment fix.\n+\t* gen_il-gen.adb, gen_il-gen.ads, gen_il-gen-gen_nodes.adb,\n+\tgen_il-internals.ads: Implement a feature where you can put:\n+\tNmake_Assert => \"expr\" where expr is a boolean expression in a\n+\tcall to Create_Concrete_Node_Type. It is added in a pragma\n+\tAssert in the Nmake.Make_... function for that type.\n+\n+2021-07-06  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* checks.adb: Remove calls of Set_Do_Tag_Check (N, False).\n+\t* einfo.ads: Remove hanging unneeded ??? comment (\"this real description\n+\twas clobbered\").\n+\t* exp_util.ads (Insert_Actions_After): Remove ??? from spec comment.\n+\t* gen_il-fields.ads (Opt_Field_Enum): Remove literals\n+\tDo_Accessibility_Check and Do_Tag_Check.\n+\t* gen_il-gen-gen_nodes.adb: Remove all calls to Sm for\n+\tDo_Accessibility_Check and Do_Tag_Check.\n+\t* sem_type.ads (Is_Subtype_Of): Remove obsolete ???\n+\tcomment (function is not limited to scalar subtypes).\n+\t* sem_util.ads (Is_Local_Variable_Reference): Revise comment to\n+\tmention out-mode parameters as well, and remove ???.\n+\t(Propagate_Concurrent_Flags): Minor reformatting.\n+\t(Propagate_Invariant_Attributes): Typo fix.\n+\t(Propagate_Predicate_Attributes): Indicate what is propagated\n+\tand remove ??? comment.\n+\t* sem_util.adb (Cannot_Raise_Constraint_Error): Remove unneeded\n+\ttest of Do_Tag_Check.\n+\t(Is_Local_Variable_Reference): Extend function to testing for\n+\tformals of mode out as well.\n+\t* sinfo.ads: Remove ??? comment about flag\n+\tConvert_To_Return_False indicating that the flag is obsolete (in\n+\tfact it's used). Remove references to Do_Accessibility_Check and\n+\tDo_Tag_Check (and the two associated ??? comments), as these\n+\tflags are unneeded.\n+\t* sinfo-cn.adb (Change_Conversion_To_Unchecked): Remove call of\n+\tSet_Do_Tag_Check (N, False).\n+\t* targparm.ads (Support_Atomic_Primitives_On_Target): Remove ???\n+\tcomment, plus minor reformatting.\n+\n+2021-07-06  Justin Squirek  <squirek@adacore.com>\n+\n+\t* par-ch6.adb (Get_Return_Kind): Properly handle the case of a\n+\t\"return when\" statement in the procedure case.\n+\n+2021-07-06  Bob Duff  <duff@adacore.com>\n+\n+\t* sem.ads (Node_To_Be_Wrapped): Minor comment fix.\n+\t* exp_ch7.adb (Establish_Transient_Scope): Misc cleanups and\n+\tcomment improvements.\n+\t(Set_Node_To_Be_Wrapped): Remove -- not worth putting this code\n+\tin a separate procedure, called only once.\n+\t* sem_util.adb (Requires_Transient_Scope): Assert that our\n+\tparameter has the right Kind. It probably shouldn't be E_Void,\n+\tbut that is passed in in some cases.\n+\t(Ensure_Minimum_Decoration): Move the call later, so we know Typ\n+\tis Present, and remove \"if Present (Typ)\" from this procedure.\n+\t* exp_aggr.adb (Convert_To_Assignments): Use membership test,\n+\tand avoid the \"if False\" idiom.\n+\t(Expand_Array_Aggregate): Remove a ??? comment.\n+\t* sem_ch8.adb (Push_Scope): Take advantage of the full coverage\n+\trules for aggregates.\n+\t* sem_res.adb (Resolve_Declare_Expression): Remove test for\n+\tIs_Type -- that's all it can be.  Use named notation in call to\n+\tEstablish_Transient_Scope.\n+\t* libgnat/a-cdlili.adb (Adjust): Remove redundant code.\n+\t(Clear): Remove \"pragma Warnings (Off);\", which wasn't actually\n+\tsuppressing any warnings.\n+\n+2021-07-06  Bob Duff  <duff@adacore.com>\n+\n+\t* gen_il-gen-gen_nodes.adb: Change the parent of\n+\tN_Exception_Declaration to be N_Declaration.  Minor comment fix.\n+\n+2021-07-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Type_Conversion): If the conversion is\n+\tthe name of an assignment operation do not apply predicate check\n+\tto it prior to the assignment.\n+\n+2021-07-06  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/a-conhel.adb: Assert that tampering counts remain\n+\tbetween 0 and 2**31-1.  This makes debugging of\n+\tfinalization-related bugs easier.\n+\n+2021-07-06  Doug Rupp  <rupp@adacore.com>\n+\n+\t* Makefile.rtl (LIBGNAT_TARGET_PAIRS): Use s-osprim__posix.adb\n+\tvice s-osprim__vxworks.adb for all vxworks7r2 targets.\n+\n+2021-07-06  Richard Kenner  <kenner@adacore.com>\n+\n+\t* gen_il-types.ads (Void_Or_Type_Kind,\n+\tException_Or_Object_Kind): Declare.\n+\t* gen_il-gen-gen_entities.adb: Likewise.\n+\n+2021-07-06  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Add a\n+\tdescription of the feature of prefixed-view calls for untagged\n+\ttypes to the section on pragma Extensions_Allowed.\n+\t* gnat_rm.texi: Regenerate.\n+\t* einfo.ads: Update specification for\n+\tDirect_Primitive_Operations to reflect its use for untagged\n+\ttypes when Extensions_Allowed is True.\n+\t* gen_il-gen-gen_entities.adb: Allow Direct_Primitive_Operations\n+\tas a field of untagged classes of types by removing the \"Pre\"\n+\ttest of \"Is_Tagged_Type (N)\", and making that field generally\n+\tavailable for all types and subtypes by defining it for\n+\tType_Kind and removing its specification for individual classes\n+\tof types.\n+\t* sem_ch3.adb (Analyze_Full_Type_Declaration): Initialize the\n+\tDirect_Primitive_Operations list when not already set for the\n+\tnew (sub)type and its base type (except when Ekind of the type\n+\tis E_Void, which can happen due to errors in cases where\n+\tDerived_Type_Declaration is called and perhaps in other\n+\tsituations).\n+\t(Analyze_Subtype_Declaration): Inherit\n+\tDirect_Primitive_Operations list from the base type, for record\n+\tand private cases.\n+\t(Build_Derived_Record_Type): Initialize the\n+\tDirect_Primitive_Operations list for derived record and private\n+\ttypes.\n+\t(Build_Derived_Type): Initialize the Direct_Primitive_Operations\n+\tlist for derived types (and also for their associated base types\n+\twhen needed).\n+\t(Process_Full_View): For full types that are untagged record and\n+\tprivate types, copy the primitive operations of the partial view\n+\tto the primitives list of the full view.\n+\t* sem_ch4.adb (Analyze_Selected_Component): Allow prefixed\n+\tnotation for subprogram calls in the case of untagged\n+\ttypes (when Extensions_Allowed is True). In the case where\n+\tIs_Private_Type (Prefix_Type) is True, call Try_Object_Operation\n+\twhen a discriminant selector wasn't found. Also call\n+\tTry_Object_Operation in other type kind cases (when\n+\tExtensions_Allowed is True).\n+\t(Try_Object_Operation.Try_One_Prefixed_Interpretation): Prevent\n+\tearly return in the untagged case (when Extensions_Allowed is\n+\tTrue). Condition main call to Try_Primitive_Operation on the\n+\ttype having primitives, and after that, if Prim_Result is False,\n+\ttest for case where the prefix type is a named access type with\n+\tprimitive operations and in that case call\n+\tTry_Primitive_Operation after temporarily resetting Obj_Type to\n+\tdenote the access type (and restore it to the designated type\n+\tafter the call)\n+\t(Try_Object_Operation.Valid_First_Argument_Of): Do matching type\n+\tcomparison by testing Base_Type (Obj_Type) against\n+\tBase_Type (Typ), rather than against just Typ, to properly\n+\thandle cases where the object prefix has a constrained\n+\tsubtype.  (Fixes a bug discovered while working on this\n+\tfeature.)\n+\t* sem_ch6.adb\n+\t(New_Overloaded_Entity.Check_For_Primitive_Subprogram): Add a\n+\tprimitive of an untagged type to the type's list of primitive\n+\toperations, for both explicit and implicit (derived, so\n+\tComes_From_Source is False) subprogram declarations. In the case\n+\twhere the new primitive overrides an inherited subprogram,\n+\tlocate the primitives Elist that references the overridden\n+\tsubprogram, and replace that element of the list with the new\n+\tsubprogram (done by calling the new procedure\n+\tAdd_Or_Replace_Untagged_Primitive on the result type and each\n+\tformal atype).\n+\t(Check_For_Primitive_Subprogram.Add_Or_Replace_Untagged_Primitive):\n+\tNew nested procedure to either add or replace an untagged\n+\tprimitive subprogram in a given type's list of primitive\n+\toperations (replacement happens in case where the new subprogram\n+\toverrides a primitive of the type).\n+\t* sem_ch7.adb (New_Private_Type): When Extensions_Allowed is\n+\tTrue, initialize the Direct_Primitive_Operations list of a\n+\tprivate type to New_Elmt_List in the case of untagged types.\n+\t* sem_ch8.adb (Find_Selected_Component): In the case where the\n+\tprefix is an entity name, relax condition that tests\n+\tHas_Components so that Analyze_Selected_Component will also be\n+\tcalled when Extensions_Allowed is True and the prefix type is\n+\tany type.\n+\n+2021-07-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Do not perform\n+\tconformance check when the subprogram body has been created for\n+\tan expression function that is not a completion of a previous\n+\tspecification, because the profile of the constructed body is\n+\tcopied from the expression function itself.\n+\n+2021-07-06  Steve Baird  <baird@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_of_specific_ada_features.rst: Add a\n+\twarning indicating that the details of the default (i.e.,\n+\tselected by the compiler) implementation of T'Put_Image for a\n+\tnonscalar type T are subject to change.\n+\t* gnat_rm.texi: Regenerate.\n+\n 2021-07-05  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* gnat-style.texi, gnat_rm.texi, gnat_ugn.texi: Regenerate."}, {"sha": "0f1b45d964560d5b2c64b2e88538f5c559bf1e5c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba0eea8d6464966ac6d37af98a7487a9a03d19/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba0eea8d6464966ac6d37af98a7487a9a03d19/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6fba0eea8d6464966ac6d37af98a7487a9a03d19", "patch": "@@ -1,3 +1,9 @@\n+2021-07-06  Martin Sebor  <msebor@redhat.com>\n+\n+\t* c-format.c (gcc_tdiag_char_table): Remove support for %G and %K.\n+\t (gcc_cdiag_char_table): Same.\n+\t (gcc_cxxdiag_char_table): Same.\n+\n 2021-07-02  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-common.h (enum c_omp_directive_kind): New enum."}, {"sha": "ef6f4adf5a79e91c96aaa22938fb9cf0d65aaf17", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba0eea8d6464966ac6d37af98a7487a9a03d19/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba0eea8d6464966ac6d37af98a7487a9a03d19/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=6fba0eea8d6464966ac6d37af98a7487a9a03d19", "patch": "@@ -1,3 +1,7 @@\n+2021-07-06  Martin Sebor  <msebor@redhat.com>\n+\n+\t* c-objc-common.c (c_tree_printer): Remove support for %G and %K.\n+\n 2021-07-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/101297"}, {"sha": "31deb047da1468513b0ff84b072b4bec8f06d3bd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba0eea8d6464966ac6d37af98a7487a9a03d19/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba0eea8d6464966ac6d37af98a7487a9a03d19/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6fba0eea8d6464966ac6d37af98a7487a9a03d19", "patch": "@@ -1,3 +1,7 @@\n+2021-07-06  Martin Sebor  <msebor@redhat.com>\n+\n+\t* error.c (cp_printer):  Remove support for %G and %K.\n+\n 2021-07-02  Jakub Jelinek  <jakub@redhat.com>\n \n \t* parser.h (struct cp_lexer): Add in_omp_attribute_pragma member."}, {"sha": "3cf3e7d1263b425398f2975b9c1177fd73e27cbe", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba0eea8d6464966ac6d37af98a7487a9a03d19/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba0eea8d6464966ac6d37af98a7487a9a03d19/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6fba0eea8d6464966ac6d37af98a7487a9a03d19", "patch": "@@ -1,3 +1,10 @@\n+2021-07-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/100227\n+\t* frontend-passes.c (traverse_io_block): Adjust test for\n+\twhen a variable is eligible for the transformation to\n+\tarray slice.\n+\n 2021-06-28  Martin Sebor  <msebor@redhat.com>\n \n \t* trans-array.c (trans_array_constructor): Replace direct uses"}, {"sha": "7e2e6b393cd9a5d31951833e5d7ce0e0fa37d2a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fba0eea8d6464966ac6d37af98a7487a9a03d19/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fba0eea8d6464966ac6d37af98a7487a9a03d19/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6fba0eea8d6464966ac6d37af98a7487a9a03d19", "patch": "@@ -1,3 +1,124 @@\n+2021-07-06  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\tPR debug/101283\n+\t* gcc.dg/debug/btf/btf-bitfields-3.c: Remove the check on btm_type.\n+\n+2021-07-06  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\tPR debug/101283\n+\t* gcc.dg/debug/ctf/ctf-attr-mode-1.c: Remove the check for ctv_typeidx.\n+\n+2021-07-06  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/55881\n+\t* g++.dg/warn/uninit-pr55881.C: New test.\n+\n+2021-07-06  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/86650\n+\t* gcc.dg/Warray-bounds-76.c: New test.\n+\n+2021-07-06  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\tPR debug/101283\n+\t* gcc.dg/debug/ctf/ctf-struct-array-2.c: Adjust the value in the testcase.\n+\n+2021-07-06  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/format/gcc_diag-10.c: Update expected warnings.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_inlining.c: Remove %G.\n+\n+2021-07-06  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/Wobjsize-1.c: Prune expected output.\n+\t* gcc.dg/Warray-bounds-71.c: New test.\n+\t* gcc.dg/Warray-bounds-71.h: New test header.\n+\t* gcc.dg/Warray-bounds-72.c: New test.\n+\t* gcc.dg/Warray-bounds-73.c: New test.\n+\t* gcc.dg/Warray-bounds-74.c: New test.\n+\t* gcc.dg/Warray-bounds-75.c: New test.\n+\t* gcc.dg/Wfree-nonheap-object-4.c: Adjust expected output.\n+\t* gcc.dg/Wfree-nonheap-object-5.c: New test.\n+\t* gcc.dg/Wfree-nonheap-object-6.c: New test.\n+\t* gcc.dg/pragma-diag-10.c: New test.\n+\t* gcc.dg/pragma-diag-9.c: New test.\n+\t* gcc.dg/uninit-suppress_3.c: New test.\n+\t* gcc.dg/pr79214.c: Xfail tests.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-27.c: New test.\n+\t* gcc.dg/format/c90-printf-1.c: Adjust expected output.\n+\n+2021-07-06  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/97194\n+\t* gcc.target/i386/sse4_1-vec-set-1a.c: New test.\n+\t* gcc.target/i386/sse4_1-vec-set-2a.c: Ditto.\n+\n+2021-07-06  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.target/i386/vect-fmaddsubXXXpd.c: New testcase.\n+\t* gcc.target/i386/vect-fmaddsubXXXps.c: Likewise.\n+\t* gcc.target/i386/vect-fmsubaddXXXpd.c: Likewise.\n+\t* gcc.target/i386/vect-fmsubaddXXXps.c: Likewise.\n+\n+2021-07-06  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/101256\n+\t* g++.dg/torture/pr101256.C: New test.\n+\n+2021-07-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/100227\n+\t* gfortran.dg/implied_do_io_7.f90: New test.\n+\n+2021-07-06  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR rtl-optimization/100328\n+\t* gcc.target/aarch64/sve/acle/asm/div_f16.c: Remove one xfail.\n+\t* gcc.target/aarch64/sve/acle/asm/div_f32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/div_f64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/divr_f16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/divr_f32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/divr_f64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/mad_f16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/mad_f32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/mad_f64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/mla_f16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/mla_f32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/mla_f64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/mls_f16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/mls_f32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/mls_f64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/msb_f16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/msb_f32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/msb_f64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/mulx_f16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/mulx_f32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/mulx_f64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/nmad_f16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/nmad_f32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/nmad_f64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/nmla_f16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/nmla_f32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/nmla_f64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/nmls_f16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/nmls_f32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/nmls_f64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/nmsb_f16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/nmsb_f32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/nmsb_f64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/sub_f16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/sub_f32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/sub_f64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/subr_f16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/subr_f32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/subr_f64.c: Likewise.\n+\n+2021-07-06  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\tPR debug/101283\n+\t* gcc.dg/debug/btf/btf-cvr-quals-1.c: Use -gdwarf-4 on Darwin targets.\n+\t* gcc.dg/debug/ctf/ctf-cvr-quals-1.c: Likewise.\n+\n 2021-07-05  Andrew Pinski  <apinski@marvell.com>\n \n \tPR tree-optimization/101039"}]}