{"sha": "d9dced13700cc3e2ee269d9dcdb7383fb6034501", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlkY2VkMTM3MDBjYzNlMmVlMjY5ZDlkY2RiNzM4M2ZiNjAzNDUwMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-09-14T14:50:26Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-09-14T14:50:26Z"}, "message": "configure.ac (mips*-sde-elf*): New stanza.\n\n\t* configure.ac (mips*-sde-elf*): New stanza.  Add target-libiberty\n\tto $skipdirs and only disable gprof for newlib.  Use the normal\n\tmips*-elf* handling in other respects.\n\t* configure: Regnerate.\n\ngcc/\n2007-xx-xx  Nigel Stephens  <nigel@mips.com>\n\t    David Ung  <davidu@mips.com>\n\t    Thiemo Seufer  <ths@mips.com>\n\t    Richard Sandiford  <richard@codesourcery.com>\n\n\t* config.gcc (mips*-sde-elf*): Add support for the SDE C libraries.\n\t* configure.ac: Add a mipssde threading type.\n\t* configure: Regenerate.\n\t* config/mips/sdemtk.h: New file.\n\t* config/mips/t-sdemtk: Likewise.\n\t* config/mips/sdemtk.opt: Likewise.\n\t* gthr-mipssde.h: Likewise.\n\t* config/mips/sde.h (FUNCTION_PROFILER): Move to config/mips/sdemtk.h.\n\t* config/mips/mips.h (MIPS_SAVE_REG_FOR_PROFILING_P): New macro.\n\t(MIPS_ICACHE_SYNC): New macro, split from ...\n\t* config/mips/mips.md (clear_cache): ...here.\n\t* config/mips/mips.c (mips_save_reg_p): Check\n\tMIPS_SAVE_REG_FOR_PROFILING_P on profiled functions.\n\t(build_mips16_function_stub): Use targetm.strip_name_encoding.\n\t(build_mips16_call_stub): Likewise.\n\nlibstdc++-v3/\n2007-xx-xx  Thiemo Seufer  <ths@mips.com>\n\n\t* crossconfig.m4 (mips*-sde-elf*): New stanza.\n\t* configure: Regenerate.\n\nFrom-SVN: r128495", "tree": {"sha": "5fe65fdbed9bdd4d82e32814abcd604d2cdc1549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fe65fdbed9bdd4d82e32814abcd604d2cdc1549"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9dced13700cc3e2ee269d9dcdb7383fb6034501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9dced13700cc3e2ee269d9dcdb7383fb6034501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9dced13700cc3e2ee269d9dcdb7383fb6034501", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9dced13700cc3e2ee269d9dcdb7383fb6034501/comments", "author": null, "committer": null, "parents": [{"sha": "ea4ba342859a1d405d60b07712d0d6020e89dadf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea4ba342859a1d405d60b07712d0d6020e89dadf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea4ba342859a1d405d60b07712d0d6020e89dadf"}], "stats": {"total": 21519, "additions": 21497, "deletions": 22}, "files": [{"sha": "7f36e41d9ea35febdcf7f902271cdaad2214a9e9", "filename": "ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dced13700cc3e2ee269d9dcdb7383fb6034501/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dced13700cc3e2ee269d9dcdb7383fb6034501/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=d9dced13700cc3e2ee269d9dcdb7383fb6034501", "patch": "@@ -1,3 +1,10 @@\n+2007-09-14  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* configure.ac (mips*-sde-elf*): New stanza.  Add target-libiberty\n+\tto $skipdirs and only disable gprof for newlib.  Use the normal\n+\tmips*-elf* handling in other respects.\n+\t* configure: Regnerate.\n+\n 2007-09-12  David Daney  <ddaney@avtrex.com>\n \n \t* configure.ac: Remove mips64*-*-linux* noconfigdirs section, thus"}, {"sha": "91f3168a575c8c1f9f28e9b8789ca2dcc7f69a0a", "filename": "configure", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dced13700cc3e2ee269d9dcdb7383fb6034501/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dced13700cc3e2ee269d9dcdb7383fb6034501/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=d9dced13700cc3e2ee269d9dcdb7383fb6034501", "patch": "@@ -2506,6 +2506,14 @@ case \"${target}\" in\n   m68k-apollo-*)\n     noconfigdirs=\"$noconfigdirs ld binutils gprof target-libgloss ${libgcj}\"\n     ;;\n+  mips*-sde-elf*)\n+    skipdirs=\"$skipdirs target-libiberty\"\n+    noconfigdirs=\"$noconfigdirs ${libgcj}\"\n+    if test x$with_newlib = xyes; then\n+      noconfigdirs=\"$noconfigdirs gprof\"\n+    fi\n+    libgloss_dir=mips\n+    ;;\n   mips*-*-irix5*)\n     noconfigdirs=\"$noconfigdirs gprof target-libgloss ${libgcj}\"\n     ;;"}, {"sha": "a1772c07371a2b83100a058395a000b046a5e2c9", "filename": "configure.ac", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dced13700cc3e2ee269d9dcdb7383fb6034501/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dced13700cc3e2ee269d9dcdb7383fb6034501/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=d9dced13700cc3e2ee269d9dcdb7383fb6034501", "patch": "@@ -782,6 +782,14 @@ case \"${target}\" in\n   m68k-apollo-*)\n     noconfigdirs=\"$noconfigdirs ld binutils gprof target-libgloss ${libgcj}\"\n     ;;\n+  mips*-sde-elf*)\n+    skipdirs=\"$skipdirs target-libiberty\"\n+    noconfigdirs=\"$noconfigdirs ${libgcj}\"\n+    if test x$with_newlib = xyes; then\n+      noconfigdirs=\"$noconfigdirs gprof\"\n+    fi\n+    libgloss_dir=mips\n+    ;;\n   mips*-*-irix5*)\n     noconfigdirs=\"$noconfigdirs gprof target-libgloss ${libgcj}\"\n     ;;"}, {"sha": "418aba5234d75e12bdd7997f9cc2b76c9156d5e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9dced13700cc3e2ee269d9dcdb7383fb6034501", "patch": "@@ -1,3 +1,24 @@\n+2007-09-14  Nigel Stephens  <nigel@mips.com>\n+\t    David Ung  <davidu@mips.com>\n+\t    Thiemo Seufer  <ths@mips.com>\n+\t    Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config.gcc (mips*-sde-elf*): Add support for the SDE C libraries.\n+\t* configure.ac: Add a mipssde threading type.\n+\t* configure: Regenerate.\n+\t* config/mips/sdemtk.h: New file.\n+\t* config/mips/t-sdemtk: Likewise.\n+\t* config/mips/sdemtk.opt: Likewise.\n+\t* gthr-mipssde.h: Likewise.\n+\t* config/mips/sde.h (FUNCTION_PROFILER): Move to config/mips/sdemtk.h.\n+\t* config/mips/mips.h (MIPS_SAVE_REG_FOR_PROFILING_P): New macro.\n+\t(MIPS_ICACHE_SYNC): New macro, split from ...\n+\t* config/mips/mips.md (clear_cache): ...here.\n+\t* config/mips/mips.c (mips_save_reg_p): Check\n+\tMIPS_SAVE_REG_FOR_PROFILING_P on profiled functions.\n+\t(build_mips16_function_stub): Use targetm.strip_name_encoding.\n+\t(build_mips16_call_stub): Likewise.\n+\n 2007-09-14  Richard Sandiford  <richard@codesourcery.com>\n \n \t* Makefile.in (stmp-int-hdrs): Depend on fixinc_list."}, {"sha": "e512b2492902f42c3eea8e032930e6f7efa027bb", "filename": "gcc/config.gcc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=d9dced13700cc3e2ee269d9dcdb7383fb6034501", "patch": "@@ -1688,6 +1688,22 @@ mips*-*-openbsd*)\n mips*-sde-elf*)\n \ttm_file=\"elfos.h ${tm_file} mips/elf.h mips/sde.h\"\n \ttmake_file=\"mips/t-sde mips/t-libgcc-mips16\"\n+\tcase \"${with_newlib}\" in\n+\t  yes)\n+\t    # newlib / libgloss.\n+\t    ;;\n+\t  *)\n+\t    # MIPS toolkit libraries.\n+\t    tm_file=\"$tm_file mips/sdemtk.h\"\n+\t    tmake_file=\"$tmake_file mips/t-sdemtk\"\n+\t    extra_options=\"$extra_options mips/sdemtk.opt\"\n+\t    case ${enable_threads} in\n+\t      \"\" | yes | mipssde)\n+\t\tthread_file='mipssde'\n+\t\t;;\n+\t    esac\n+\t    ;;\n+\tesac\n \tcase ${target} in\n \t  mipsisa32r2*)\n \t    tm_defines=\"MIPS_ISA_DEFAULT=33 MIPS_ABI_DEFAULT=ABI_32\""}, {"sha": "5c26195dc237870b2f2b16530a0d709db72d98c2", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=d9dced13700cc3e2ee269d9dcdb7383fb6034501", "patch": "@@ -7473,6 +7473,10 @@ mips_save_reg_p (unsigned int regno)\n   if (regno == HARD_FRAME_POINTER_REGNUM && frame_pointer_needed)\n     return true;\n \n+  /* Check for registers that must be saved for FUNCTION_PROFILER.  */\n+  if (current_function_profile && MIPS_SAVE_REG_FOR_PROFILING_P (regno))\n+    return true;\n+\n   /* We need to save the incoming return address if it is ever clobbered\n      within the function, if __builtin_eh_return is being used to set a\n      different return address, or if a stub is being used to return a\n@@ -9701,6 +9705,7 @@ build_mips16_function_stub (FILE *file)\n   unsigned int f;\n \n   fnname = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n+  fnname = targetm.strip_name_encoding (fnname);\n   secname = (char *) alloca (strlen (fnname) + 20);\n   sprintf (secname, \".mips16.fn.%s\", fnname);\n   stubname = (char *) alloca (strlen (fnname) + 20);\n@@ -9937,7 +9942,7 @@ build_mips16_call_stub (rtx retval, rtx fn, rtx arg_size, int fp_code)\n   /* We know the function we are going to call.  If we have already\n      built a stub, we don't need to do anything further.  */\n \n-  fnname = XSTR (fn, 0);\n+  fnname = targetm.strip_name_encoding (XSTR (fn, 0));\n   for (l = mips16_stubs; l != NULL; l = l->next)\n     if (strcmp (l->name, fnname) == 0)\n       break;"}, {"sha": "55e605a8c06a86f2807dda9ea899b4669c2e6703", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=d9dced13700cc3e2ee269d9dcdb7383fb6034501", "patch": "@@ -2152,6 +2152,9 @@ typedef struct mips_args {\n   fprintf (FILE, \"\\t.set\\tat\\n\");\t\t\t\t\t\\\n }\n \n+/* The profiler preserves all interesting registers, including $31.  */\n+#define MIPS_SAVE_REG_FOR_PROFILING_P(REGNO) false\n+\n /* No mips port has ever used the profiler counter word, so don't emit it\n    or the label for it.  */\n \n@@ -2227,6 +2230,13 @@ typedef struct mips_args {\n #define CACHE_FLUSH_FUNC \"_flush_cache\"\n #endif\n \n+#define MIPS_ICACHE_SYNC(ADDR, SIZE)\t\t\t\t\t\\\n+  /* Flush both caches.  We need to flush the data cache in case\t\\\n+     the system has a write-back cache.  */\t\t\t\t\\\n+  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, mips_cache_flush_func),\t\\\n+\t\t     0, VOIDmode, 3, ADDR, Pmode, SIZE, Pmode,\t\t\\\n+\t\t     GEN_INT (3), TYPE_MODE (integer_type_node))\n+\n /* A C statement to initialize the variable parts of a trampoline.\n    ADDR is an RTX for the address of the trampoline; FNADDR is an\n    RTX for the address of the nested function; STATIC_CHAIN is an"}, {"sha": "842fa082b34ddc37e63fa7963ac4ce61b11eba56", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=d9dced13700cc3e2ee269d9dcdb7383fb6034501", "patch": "@@ -4274,12 +4274,8 @@\n     {\n       rtx len = gen_reg_rtx (Pmode);\n       emit_insn (gen_sub3_insn (len, operands[1], operands[0]));\n-      /* Flush both caches.  We need to flush the data cache in case\n-         the system has a write-back cache.  */\n-      emit_library_call (gen_rtx_SYMBOL_REF (Pmode, mips_cache_flush_func),\n-                         0, VOIDmode, 3, operands[0], Pmode, len, Pmode,\n-                         GEN_INT (3), TYPE_MODE (integer_type_node));\n-   }\n+      MIPS_ICACHE_SYNC (operands[0], len);\n+    }\n   DONE;\n }\")\n "}, {"sha": "35a8ad1718cbb1dd55294d6e4bcff247be1e147f", "filename": "gcc/config/mips/sde.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2Fconfig%2Fmips%2Fsde.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2Fconfig%2Fmips%2Fsde.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsde.h?ref=d9dced13700cc3e2ee269d9dcdb7383fb6034501", "patch": "@@ -130,19 +130,6 @@ Boston, MA 02111-1307, USA.  */\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n #endif\n \n-/* This version of _mcount does not pop 2 words from the stack.  */\n-#undef FUNCTION_PROFILER\n-#define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.set\\tnoat\\n\");\t\t\t\t\t\\\n-    /* MIPS16 code passes saved $ra in $v1 instead of $at.  */\t\t\\\n-    fprintf (FILE, \"\\tmove\\t%s,%s\\n\",\t\t\t\t\t\\\n-\t     reg_names[GP_REG_FIRST + (TARGET_MIPS16 ? 3 : 1)],\t\t\\\n-\t     reg_names[GP_REG_FIRST + 31]);\t\t\t\t\\\n-    fprintf (FILE, \"\\tjal\\t_mcount\\n\");\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.set\\tat\\n\");\t\t\t\t\t\\\n-  }\n-\n /* Force all .init and .fini entries to be 32-bit, not mips16, so that\n    in a mixed environment they are all the same mode. The crti.asm and\n    crtn.asm files will also be compiled as 32-bit due to the"}, {"sha": "9d20b471902c4d5ce32468857b30394f270b213a", "filename": "gcc/config/mips/sdemtk.h", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2Fconfig%2Fmips%2Fsdemtk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2Fconfig%2Fmips%2Fsdemtk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsdemtk.h?ref=d9dced13700cc3e2ee269d9dcdb7383fb6034501", "patch": "@@ -0,0 +1,108 @@\n+/* Definitions of target machine for GNU compiler.\n+   MIPS SDE version, for use with the SDE C library rather than newlib.\n+   Copyright (C) 2007\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      builtin_assert (\"system=sde\");\t\t\t\\\n+      builtin_assert (\"system=posix\");\t\t\t\\\n+      builtin_define (\"__SDE_MIPS__\");\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+      /* Deprecated: use __mips_isa_rev >= 2.  */\t\\\n+      if (ISA_MIPS32R2)\t\t\t\t\t\\\n+        builtin_define (\"__mipsr2\");\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+      /* Deprecated: use __mips_fpr == 64.  */\t\t\\\n+      if (TARGET_FLOAT64)\t\t\t\t\\\n+\tbuiltin_define (\"__mipsfp64\");\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+      if (TARGET_NO_FLOAT) \t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  builtin_define (\"__NO_FLOAT\");\t\t\\\n+\t  builtin_define (\"__mips_no_float\");\t\t\\\n+\t}\t\t\t\t\t\t\\\n+      else if (TARGET_SOFT_FLOAT_ABI)\t\t\t\\\n+\tbuiltin_define (\"__SOFT_FLOAT\");\t\t\\\n+      else if (TARGET_SINGLE_FLOAT)\t\t\t\\\n+\tbuiltin_define (\"__SINGLE_FLOAT\");\t\t\\\n+\t\t\t\t\t\t\t\\\n+      if (TARGET_BIG_ENDIAN)\t\t\t\t\\\n+        {\t\t\t\t\t\t\\\n+\t  builtin_assert (\"endian=big\");\t\t\\\n+\t  builtin_assert (\"cpu=mipseb\");\t\t\\\n+\t}\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\\\n+        {\t\t\t\t\t\t\\\n+\t  builtin_assert (\"endian=little\");\t\t\\\n+\t  builtin_assert (\"cpu=mipsel\");\t\t\\\n+\t}\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef SUBTARGET_OVERRIDE_OPTIONS\n+#define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      if (TARGET_NO_FLOAT)\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  target_flags |= MASK_SOFT_FLOAT_ABI;\t\t\\\n+\t  target_flags_explicit |= MASK_SOFT_FLOAT_ABI;\t\\\n+\t}\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* For __clear_cache in libgcc2.c.  */\n+#ifdef IN_LIBGCC2\n+extern void mips_sync_icache (void *beg, unsigned long len);\n+#undef CLEAR_INSN_CACHE\n+#define CLEAR_INSN_CACHE(beg, end) \\\n+  mips_sync_icache (beg, end - beg)\n+#endif\n+\n+/* For mips_cache_flush_func in mips.opt.  */\n+#undef CACHE_FLUSH_FUNC\n+#define CACHE_FLUSH_FUNC \"mips_sync_icache\"\n+\n+/* For inline code which needs to sync the icache and dcache,\n+   noting that the SDE library takes arguments (address, size).  */\n+#undef MIPS_ICACHE_SYNC\n+#define MIPS_ICACHE_SYNC(ADDR, SIZE)\t\t\t\t\t\\\n+  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, mips_cache_flush_func),\t\\\n+\t\t     0, VOIDmode, 2, ADDR, Pmode,\t\t\t\\\n+\t\t     SIZE, TYPE_MODE (sizetype))\n+\n+/* This version of _mcount does not pop 2 words from the stack.  */\n+#undef FUNCTION_PROFILER\n+#define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t.set\\tnoat\\n\");\t\t\t\t\t\\\n+    /* MIPS16 code passes saved $ra in $v1 instead of $at.  */\t\t\\\n+    fprintf (FILE, \"\\tmove\\t%s,%s\\n\",\t\t\t\t\t\\\n+\t     reg_names[GP_REG_FIRST + (TARGET_MIPS16 ? 3 : 1)],\t\t\\\n+\t     reg_names[GP_REG_FIRST + 31]);\t\t\t\t\\\n+    fprintf (FILE, \"\\tjal\\t_mcount\\n\");\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t.set\\tat\\n\");\t\t\t\t\t\\\n+  }\n+\n+/* ...nor does the call sequence preserve $31.  */\n+#undef MIPS_SAVE_REG_FOR_PROFILING_P\n+#define MIPS_SAVE_REG_FOR_PROFILING_P(REGNO) ((REGNO) == GP_REG_FIRST + 31)"}, {"sha": "1f7531bed91c78c41918aa43fbfa7c51b14d4dbc", "filename": "gcc/config/mips/sdemtk.opt", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2Fconfig%2Fmips%2Fsdemtk.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2Fconfig%2Fmips%2Fsdemtk.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsdemtk.opt?ref=d9dced13700cc3e2ee269d9dcdb7383fb6034501", "patch": "@@ -0,0 +1,24 @@\n+; Options for the MIPS SDE configuration.\n+;\n+; Copyright (C) 2007 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT\n+; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+; License for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+; 02110-1301, USA.\n+\n+mno-float\n+Target Report RejectNegative Var(TARGET_NO_FLOAT)\n+Prevent the use of all floating-point operations"}, {"sha": "5169dee53b39acce8eb4ab61178ef5b0aaa6e7cc", "filename": "gcc/config/mips/t-sdemtk", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2Fconfig%2Fmips%2Ft-sdemtk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2Fconfig%2Fmips%2Ft-sdemtk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-sdemtk?ref=d9dced13700cc3e2ee269d9dcdb7383fb6034501", "patch": "@@ -0,0 +1,26 @@\n+# Override newlib settings in t-sde and set up for building\n+# against SDE header files and libraries.\n+\n+MULTILIB_OPTIONS = EL/EB mips32/mips32r2/mips64 mips16 msoft-float/mno-float/mfp64\n+MULTILIB_DIRNAMES = el eb mips32 mips32r2 mips64 mips16 sof nof f64\n+\n+# Remove stdarg.h and stddef.h from USER_H.\n+USER_H = $(srcdir)/ginclude/float.h \\\n+         $(srcdir)/ginclude/iso646.h \\\n+         $(srcdir)/ginclude/stdbool.h \\\n+         $(srcdir)/ginclude/varargs.h \\\n+         $(EXTRA_HEADERS)\n+\n+# Don't run fixinclude\n+STMP_FIXINC = stmp-sdefixinc\n+stmp-sdefixinc: gsyslimits.h\n+\trm -rf include; mkdir include\n+\tchmod a+rx include\n+\trm -f include/syslimits.h\n+\tcp $(srcdir)/gsyslimits.h include/syslimits.h\n+\tchmod a+r include/syslimits.h\n+\t$(STAMP) stmp-sdefixinc\n+\n+# Don't build FPBIT and DPBIT; we'll be using the SDE soft-float library.\n+FPBIT =\n+DPBIT ="}, {"sha": "a1928534aaee26de4b8540c04b1cf8f802127008", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=d9dced13700cc3e2ee269d9dcdb7383fb6034501", "patch": "@@ -12445,7 +12445,7 @@ case ${enable_threads} in\n     target_thread_file='single'\n     ;;\n   aix | dce | gnat | irix | posix | posix95 | rtems | \\\n-  single | solaris | vxworks | win32 )\n+  single | solaris | vxworks | win32 | mipssde)\n     target_thread_file=${enable_threads}\n     ;;\n   *)"}, {"sha": "9627d36e363e38f2f4f949a949f5944b7154a665", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=d9dced13700cc3e2ee269d9dcdb7383fb6034501", "patch": "@@ -1342,7 +1342,7 @@ case ${enable_threads} in\n     target_thread_file='single'\n     ;;\n   aix | dce | gnat | irix | posix | posix95 | rtems | \\\n-  single | solaris | vxworks | win32 )\n+  single | solaris | vxworks | win32 | mipssde)\n     target_thread_file=${enable_threads}\n     ;;\n   *)"}, {"sha": "28111e3929efaeaa1f561c6893520b28104db973", "filename": "gcc/gthr-mipssde.h", "status": "added", "additions": 227, "deletions": 0, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2Fgthr-mipssde.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dced13700cc3e2ee269d9dcdb7383fb6034501/gcc%2Fgthr-mipssde.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-mipssde.h?ref=d9dced13700cc3e2ee269d9dcdb7383fb6034501", "patch": "@@ -0,0 +1,227 @@\n+/* MIPS SDE threads compatibility routines for libgcc2 and libobjc.  */\n+/* Compile this one with gcc.  */\n+/* Copyright (C) 2006, 2007 Free Software Foundation, Inc.\n+   Contributed by Nigel Stephens <nigel@mips.com>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+/* As a special exception, if you link this library with other files,\n+   some of which are compiled with GCC, to produce an executable,\n+   this library does not by itself cause the resulting executable\n+   to be covered by the GNU General Public License.\n+   This exception does not however invalidate any other reasons why\n+   the executable file might be covered by the GNU General Public License.  */\n+\n+#ifndef GCC_GTHR_MIPSSDE_H\n+#define GCC_GTHR_MIPSSDE_H\n+\n+/* MIPS SDE threading API specific definitions.\n+   Easy, since the interface is pretty much one-to-one.  */\n+\n+#define __GTHREADS 1\n+\n+#include <sdethread.h>\n+#include <unistd.h>\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+typedef __sdethread_key_t __gthread_key_t;\n+typedef __sdethread_once_t __gthread_once_t;\n+typedef __sdethread_mutex_t __gthread_mutex_t;\n+\n+typedef struct {\n+  long depth;\n+  __sdethread_t owner;\n+  __sdethread_mutex_t actual;\n+} __gthread_recursive_mutex_t;\n+\n+#define __GTHREAD_MUTEX_INIT __SDETHREAD_MUTEX_INITIALIZER(\"gthr\")\n+#define __GTHREAD_ONCE_INIT __SDETHREAD_ONCE_INIT\n+static inline int\n+__gthread_recursive_mutex_init_function(__gthread_recursive_mutex_t *mutex);\n+#define __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION __gthread_recursive_mutex_init_function\n+\n+#if SUPPORTS_WEAK && GTHREAD_USE_WEAK\n+# define __gthrw(name) \\\n+  static __typeof(name) __gthrw_ ## name __attribute__ ((__weakref__(#name)));\n+# define __gthrw_(name) __gthrw_ ## name\n+#else\n+# define __gthrw(name)\n+# define __gthrw_(name) name\n+#endif\n+\n+__gthrw(__sdethread_once)\n+__gthrw(__sdethread_key_create)\n+__gthrw(__sdethread_key_delete)\n+__gthrw(__sdethread_getspecific)\n+__gthrw(__sdethread_setspecific)\n+\n+__gthrw(__sdethread_self)\n+\n+__gthrw(__sdethread_mutex_lock)\n+__gthrw(__sdethread_mutex_trylock)\n+__gthrw(__sdethread_mutex_unlock)\n+\n+__gthrw(__sdethread_mutex_init)\n+\n+__gthrw(__sdethread_threading)\n+\n+#if SUPPORTS_WEAK && GTHREAD_USE_WEAK\n+\n+static inline int\n+__gthread_active_p (void)\n+{\n+  return !!(void *)&__sdethread_threading;\n+}\n+\n+#else /* not SUPPORTS_WEAK */\n+\n+static inline int\n+__gthread_active_p (void)\n+{\n+  return 1;\n+}\n+\n+#endif /* SUPPORTS_WEAK */\n+\n+static inline int\n+__gthread_once (__gthread_once_t *once, void (*func) (void))\n+{\n+  if (__gthread_active_p ())\n+    return __gthrw_(__sdethread_once) (once, func);\n+  else\n+    return -1;\n+}\n+\n+static inline int\n+__gthread_key_create (__gthread_key_t *key, void (*dtor) (void *))\n+{\n+  return __gthrw_(__sdethread_key_create) (key, dtor);\n+}\n+\n+static inline int\n+__gthread_key_delete (__gthread_key_t key)\n+{\n+  return __gthrw_(__sdethread_key_delete) (key);\n+}\n+\n+static inline void *\n+__gthread_getspecific (__gthread_key_t key)\n+{\n+  return __gthrw_(__sdethread_getspecific) (key);\n+}\n+\n+static inline int\n+__gthread_setspecific (__gthread_key_t key, const void *ptr)\n+{\n+  return __gthrw_(__sdethread_setspecific) (key, ptr);\n+}\n+\n+static inline int\n+__gthread_mutex_lock (__gthread_mutex_t *mutex)\n+{\n+  if (__gthread_active_p ())\n+    return __gthrw_(__sdethread_mutex_lock) (mutex);\n+  else\n+    return 0;\n+}\n+\n+static inline int\n+__gthread_mutex_trylock (__gthread_mutex_t *mutex)\n+{\n+  if (__gthread_active_p ())\n+    return __gthrw_(__sdethread_mutex_trylock) (mutex);\n+  else\n+    return 0;\n+}\n+\n+static inline int\n+__gthread_mutex_unlock (__gthread_mutex_t *mutex)\n+{\n+  if (__gthread_active_p ())\n+    return __gthrw_(__sdethread_mutex_unlock) (mutex);\n+  else\n+    return 0;\n+}\n+\n+static inline int\n+__gthread_recursive_mutex_init_function (__gthread_recursive_mutex_t *mutex)\n+{\n+  mutex->depth = 0;\n+  mutex->owner = __gthrw_(__sdethread_self) ();\n+  return __gthrw_(__sdethread_mutex_init) (&mutex->actual, NULL);\n+}\n+\n+static inline int\n+__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *mutex)\n+{\n+  if (__gthread_active_p ())\n+    {\n+      __sdethread_t me = __gthrw_(__sdethread_self) ();\n+\n+      if (mutex->owner != me)\n+\t{\n+\t  __gthrw_(__sdethread_mutex_lock) (&mutex->actual);\n+\t  mutex->owner = me;\n+\t}\n+\n+      mutex->depth++;\n+    }\n+  return 0;\n+}\n+\n+static inline int\n+__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *mutex)\n+{\n+  if (__gthread_active_p ())\n+    {\n+      __sdethread_t me = __gthrw_(__sdethread_self) ();\n+\n+      if (mutex->owner != me)\n+\t{\n+\t  if (__gthrw_(__sdethread_mutex_trylock) (&mutex->actual))\n+\t    return 1;\n+\t  mutex->owner = me;\n+\t}\n+\n+      mutex->depth++;\n+    }\n+  return 0;\n+}\n+\n+static inline int\n+__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *mutex)\n+{\n+  if (__gthread_active_p ())\n+    {\n+      if (--mutex->depth == 0)\n+\t{\n+\t   mutex->owner = (__sdethread_t) 0;\n+\t   __gthrw_(__sdethread_mutex_unlock) (&mutex->actual);\n+\t}\n+    }\n+  return 0;\n+}\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif /* ! GCC_GTHR_MIPSSDE_H */"}, {"sha": "f37831027c4efc3e77cc959e5cfce2b120f54f1e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dced13700cc3e2ee269d9dcdb7383fb6034501/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dced13700cc3e2ee269d9dcdb7383fb6034501/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d9dced13700cc3e2ee269d9dcdb7383fb6034501", "patch": "@@ -1,3 +1,8 @@\n+2007-09-14  Thiemo Seufer  <ths@mips.com>\n+\n+\t* crossconfig.m4 (mips*-sde-elf*): New stanza.\n+\t* configure: Regenerate.\n+\n 2007-09-12  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/ext/pb_ds/*: Change namespace pb_ds to __gnu_pbds."}, {"sha": "1ced987ba5554d6354c42b3634c6636d390db2c6", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 20995, "deletions": 0, "changes": 20995, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dced13700cc3e2ee269d9dcdb7383fb6034501/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dced13700cc3e2ee269d9dcdb7383fb6034501/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=d9dced13700cc3e2ee269d9dcdb7383fb6034501"}, {"sha": "27df06069b5e77d75fda1427cf323ce5f8b5dc58", "filename": "libstdc++-v3/crossconfig.m4", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9dced13700cc3e2ee269d9dcdb7383fb6034501/libstdc%2B%2B-v3%2Fcrossconfig.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9dced13700cc3e2ee269d9dcdb7383fb6034501/libstdc%2B%2B-v3%2Fcrossconfig.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fcrossconfig.m4?ref=d9dced13700cc3e2ee269d9dcdb7383fb6034501", "patch": "@@ -9,6 +9,38 @@ case \"${host}\" in\n     # This is a freestanding configuration; there is nothing to do here.\n     ;;\n \n+  mips*-sde-elf*)\n+    # These definitions are for the SDE C library rather than newlib.\n+    AC_CHECK_HEADERS([float.h inttypes.h locale.h \\\n+      stdint.h stdlib.h string.h unistd.h wchar.h \\\n+      machine/endian.h sys/ioctl.h sys/resource.h \\\n+      sys/stat.h sys/time.h sys/types.h sys/uio.h])\n+    SECTION_FLAGS='-ffunction-sections -fdata-sections'\n+    AC_SUBST(SECTION_FLAGS)\n+    GLIBCXX_CHECK_COMPILER_FEATURES\n+    GLIBCXX_CHECK_LINKER_FEATURES\n+    GLIBCXX_CHECK_MATH_SUPPORT\n+    GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT\n+    GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n+    GLIBCXX_CHECK_STDLIB_SUPPORT\n+    GLIBCXX_CHECK_S_ISREG_OR_S_IFREG\n+    AC_DEFINE(HAVE_SIGSETJMP)\n+    AC_DEFINE(HAVE_GETPAGESIZE)\n+    AC_DEFINE(HAVE_WRITEV)\n+    AC_DEFINE(HAVE_INT64_T)\n+\n+    AC_DEFINE(HAVE_LIBM)\n+    AC_DEFINE(HAVE_COPYSIGN)\n+    AC_DEFINE(HAVE_FINITE)\n+    AC_DEFINE(HAVE_HYPOT)\n+    AC_DEFINE(HAVE_ISNAN)\n+    AC_DEFINE(HAVE_ISINF)\n+\n+    AC_DEFINE(HAVE_LDEXPF)\n+    AC_DEFINE(HAVE_MODF)\n+    AC_DEFINE(HAVE_SQRTF)\n+    ;;\n+\n   *-darwin*)\n     # Darwin versions vary, but the linker should work in a cross environment,\n     # so we just check for all the features here."}]}