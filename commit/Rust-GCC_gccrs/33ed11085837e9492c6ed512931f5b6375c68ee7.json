{"sha": "33ed11085837e9492c6ed512931f5b6375c68ee7", "node_id": "C_kwDOANBUbNoAKDMzZWQxMTA4NTgzN2U5NDkyYzZlZDUxMjkzMWY1YjYzNzVjNjhlZTc", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-23T12:25:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-24T23:46:42Z"}, "message": "libstdc++: Include std::ranges::subrange definition in <tuple> [PR102301]\n\nIn order for std::make_from_tuple to work with tuple-like types, the\noverloads of std::get for those types must have been declared before the\ndefinition of std::make_from_tuple. That means we need to include the\ndefinition of std::ranges::subrange in <tuple>.\n\nThe definitions of std::pair and its overloads of std::get are already\nincluded in <tuple>. We provide forward declarations of std::array and\nits std::get overloads in <tuple>. We could just declare subrange\nwithout defining it, and give ranges::get a non-deduced return type,\nlike so:\n\n  namespace ranges\n  {\n    enum class subrange_kind : bool { unsized, sized};\n\n    template<input_or_output_iterator I, sentinel_for<I> S,\n\t     subrange_kind K>\n      requires (K == subrange_kind::sized || !sized_sentinel_for<S, I>)\n      class subrange;\n\n    template<size_t _Num, class _It, class _Sent, subrange_kind _Kind>\n      requires (_Num < 2)\n      constexpr __conditional_t<_Num == 0, _It, _Sent>\n      get(const subrange<_It, _Sent, _Kind>& __r);\n\n    template<size_t _Num, class _It, class _Sent, subrange_kind _Kind>\n      requires (_Num < 2)\n      constexpr __conditional_t<_Num == 0, _It, _Sent>\n      get(subrange<_It, _Sent, _Kind>&& __r)\n  }\n  using ranges::get;\n\nIt is a bit late in the GCC 13 dev cycle to do this, so just include the\nright headers for now.\n\nAlso add the dangling check to std::make_from_tuple added by P2255.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/102301\n\t* include/bits/ranges_base.h: Include <bits/stl_iterator.h> for\n\tstd::make_reverse_iterator.\n\t* include/std/tuple: Include <bits/ranges_util.h> for subrange.\n\t(make_from_tuple): Add static assertion from P2255 to diagnose\n\tdangling references.\n\t* testsuite/20_util/tuple/make_from_tuple/dangling_ref.cc: New test.\n\t* testsuite/20_util/tuple/make_from_tuple/tuple_like.cc: New test.", "tree": {"sha": "932b6d07d732b53668256cffd03f12457db7bdf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/932b6d07d732b53668256cffd03f12457db7bdf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33ed11085837e9492c6ed512931f5b6375c68ee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33ed11085837e9492c6ed512931f5b6375c68ee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33ed11085837e9492c6ed512931f5b6375c68ee7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33ed11085837e9492c6ed512931f5b6375c68ee7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aba6416e95ab4138a0ecab0fd51e7e9329d74a45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aba6416e95ab4138a0ecab0fd51e7e9329d74a45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aba6416e95ab4138a0ecab0fd51e7e9329d74a45"}], "stats": {"total": 66, "additions": 61, "deletions": 5}, "files": [{"sha": "86952b340965c239f9a53505ed0b1c55bd0fe3ba", "filename": "libstdc++-v3/include/bits/ranges_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ed11085837e9492c6ed512931f5b6375c68ee7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ed11085837e9492c6ed512931f5b6375c68ee7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h?ref=33ed11085837e9492c6ed512931f5b6375c68ee7", "patch": "@@ -34,7 +34,7 @@\n \n #if __cplusplus > 201703L\n #include <initializer_list>\n-#include <bits/iterator_concepts.h>\n+#include <bits/stl_iterator.h>\n #include <ext/numeric_traits.h>\n #include <bits/max_size_type.h>\n "}, {"sha": "c773b3a348bc4dc364db9ea554cae4df5339d9cb", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ed11085837e9492c6ed512931f5b6375c68ee7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ed11085837e9492c6ed512931f5b6375c68ee7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=33ed11085837e9492c6ed512931f5b6375c68ee7", "patch": "@@ -37,10 +37,11 @@\n \n #include <bits/stl_pair.h>\t\t// for std::pair\n #include <bits/uses_allocator.h>\t// for std::allocator_arg_t\n-#include <bits/utility.h>\t\t// for std::get, std::tuple_size etc.\n+#include <bits/utility.h>\t\t// for std::tuple_size etc.\n #include <bits/invoke.h>\t\t// for std::__invoke\n #if __cplusplus > 201703L\n # include <compare>\n+# include <bits/ranges_util.h>\t\t// for std::ranges::subrange\n # define __cpp_lib_constexpr_tuple 201811L\n #endif\n \n@@ -2312,9 +2313,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     make_from_tuple(_Tuple&& __t)\n     noexcept(__unpack_std_tuple<is_nothrow_constructible, _Tp, _Tuple>)\n     {\n-      return __make_from_tuple_impl<_Tp>(\n-        std::forward<_Tuple>(__t),\n-\tmake_index_sequence<tuple_size_v<remove_reference_t<_Tuple>>>{});\n+      constexpr size_t __n = tuple_size_v<remove_reference_t<_Tuple>>;\n+#if __has_builtin(__reference_constructs_from_temporary)\n+      if constexpr (__n == 1)\n+\t{\n+\t  using _Elt = decltype(std::get<0>(std::declval<_Tuple>()));\n+\t  static_assert(!__reference_constructs_from_temporary(_Tp, _Elt));\n+\t}\n+#endif\n+      return __make_from_tuple_impl<_Tp>(std::forward<_Tuple>(__t),\n+\t\t\t\t\t make_index_sequence<__n>{});\n     }\n #endif // C++17\n "}, {"sha": "7958ec888a30310af748d262aefe0ffa61b153e1", "filename": "libstdc++-v3/testsuite/20_util/tuple/make_from_tuple/dangling_ref.cc", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ed11085837e9492c6ed512931f5b6375c68ee7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fmake_from_tuple%2Fdangling_ref.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ed11085837e9492c6ed512931f5b6375c68ee7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fmake_from_tuple%2Fdangling_ref.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fmake_from_tuple%2Fdangling_ref.cc?ref=33ed11085837e9492c6ed512931f5b6375c68ee7", "patch": "@@ -0,0 +1,5 @@\n+// { dg-do compile { target c++17 } }\n+#include <tuple>\n+std::tuple<short> f();\n+auto t = std::make_from_tuple<const int&>(f()); // { dg-error \"here\" }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "de694554d860f1fa64bfc68aa4d1ffd6408323cb", "filename": "libstdc++-v3/testsuite/20_util/tuple/make_from_tuple/tuple_like.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ed11085837e9492c6ed512931f5b6375c68ee7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fmake_from_tuple%2Ftuple_like.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ed11085837e9492c6ed512931f5b6375c68ee7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fmake_from_tuple%2Ftuple_like.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fmake_from_tuple%2Ftuple_like.cc?ref=33ed11085837e9492c6ed512931f5b6375c68ee7", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do compile { target c++17 } }\n+\n+#include <tuple>\n+#include <utility>\n+\n+struct Two\n+{\n+  Two(const char*, int);\n+};\n+\n+void\n+test_pair()\n+{\n+  auto two = std::make_from_tuple<Two>(std::pair(\"one\", 2));\n+  static_assert(std::is_same_v<decltype(two), Two>, \"make from pair\");\n+}\n+\n+#include <array>\n+\n+struct Three\n+{\n+  Three(int, int, int);\n+};\n+\n+void\n+test_array()\n+{\n+  Three three = std::make_from_tuple<Three>(std::array<int, 3>{{1, 2, 3}});\n+  static_assert(std::is_same_v<decltype(three), Three>, \"make from array\");\n+}\n+\n+#if __cplusplus >= 202002L\n+#include <vector>\n+#include <ranges>\n+\n+void\n+test_subrange() // PR libstdc++/102301\n+{\n+  auto r = std::views::iota(0, 5);\n+  auto v = std::make_from_tuple<std::vector<int>>(std::ranges::subrange(r));\n+  static_assert(std::is_same_v<decltype(v), std::vector<int>>, \"from subrange\");\n+}\n+#endif"}]}