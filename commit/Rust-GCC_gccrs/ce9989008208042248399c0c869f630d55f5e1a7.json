{"sha": "ce9989008208042248399c0c869f630d55f5e1a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U5OTg5MDA4MjA4MDQyMjQ4Mzk5YzBjODY5ZjYzMGQ1NWY1ZTFhNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-12-16T23:12:15Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-12-16T23:12:15Z"}, "message": "i386.h (WIDEST_HARDWARE_FP_SIZE): Define.\n\n        * config/i386/i386.h (WIDEST_HARDWARE_FP_SIZE): Define.\n\nFrom-SVN: r130997", "tree": {"sha": "1e32b3ab7532b205c179e6e2f2a85de987dea987", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e32b3ab7532b205c179e6e2f2a85de987dea987"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce9989008208042248399c0c869f630d55f5e1a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce9989008208042248399c0c869f630d55f5e1a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce9989008208042248399c0c869f630d55f5e1a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce9989008208042248399c0c869f630d55f5e1a7/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd1efa437dc6df66b260a02987c6764790bed255", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd1efa437dc6df66b260a02987c6764790bed255", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd1efa437dc6df66b260a02987c6764790bed255"}], "stats": {"total": 56, "additions": 32, "deletions": 24}, "files": [{"sha": "e5d703766885b4493e7cd42dd22a357935d7a513", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9989008208042248399c0c869f630d55f5e1a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9989008208042248399c0c869f630d55f5e1a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce9989008208042248399c0c869f630d55f5e1a7", "patch": "@@ -1,3 +1,7 @@\n+2007-12-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (WIDEST_HARDWARE_FP_SIZE): Define.\n+\n 2007-12-16  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* tree-vect-transform.c (conservative_cost_threshold): Add missing"}, {"sha": "61e49f45f992ecacb2a0f6fe2f2295d4d3ba4d5e", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9989008208042248399c0c869f630d55f5e1a7/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9989008208042248399c0c869f630d55f5e1a7/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=ce9989008208042248399c0c869f630d55f5e1a7", "patch": "@@ -479,9 +479,9 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n /* Support for configure-time defaults of some command line options.\n    The order here is important so that -march doesn't squash the\n    tune or cpu values.  */\n-#define OPTION_DEFAULT_SPECS \\\n+#define OPTION_DEFAULT_SPECS\t\t\t\t\t   \\\n   {\"tune\", \"%{!mtune=*:%{!mcpu=*:%{!march=*:-mtune=%(VALUE)}}}\" }, \\\n-  {\"cpu\", \"%{!mtune=*:%{!mcpu=*:%{!march=*:-mtune=%(VALUE)}}}\" }, \\\n+  {\"cpu\", \"%{!mtune=*:%{!mcpu=*:%{!march=*:-mtune=%(VALUE)}}}\" },  \\\n   {\"arch\", \"%{!march=*:-march=%(VALUE)}\"}\n \n /* Specs for the compiler proper */\n@@ -749,6 +749,8 @@ enum target_cpu_default\n \n #define LONG_DOUBLE_TYPE_SIZE 80\n \n+#define WIDEST_HARDWARE_FP_SIZE 80\n+\n /* Set the value of FLT_EVAL_METHOD in float.h.  When using only the\n    FPU, assume that the fpcw is set to extended precision; when using\n    only SSE, rounding is correct; when using both SSE and the FPU,\n@@ -918,6 +920,7 @@ enum target_cpu_default\n    for details.  */\n \n #define STACK_REGS\n+\n #define IS_STACK_MODE(MODE)\t\t\t\t\t\\\n   (((MODE) == SFmode && (!TARGET_SSE || !TARGET_SSE_MATH))\t\\\n    || ((MODE) == DFmode && (!TARGET_SSE2 || !TARGET_SSE_MATH))  \\\n@@ -968,7 +971,7 @@ enum target_cpu_default\n /*  r8,  r9, r10, r11, r12, r13, r14, r15*/\t\t\t\\\n      2,   2,   2,   2,   2,   2,   2,   2,\t\t\t\\\n /*xmm8,xmm9,xmm10,xmm11,xmm12,xmm13,xmm14,xmm15*/\t\t\\\n-     2,   2,    2,    2,    2,    2,    2,    2}\n+     2,   2,    2,    2,    2,    2,    2,    2 }\n \n \n /* 1 for registers not available across function calls.\n@@ -996,7 +999,7 @@ enum target_cpu_default\n /*  r8,  r9, r10, r11, r12, r13, r14, r15*/\t\t\t\\\n      1,   1,   1,   1,   2,   2,   2,   2,\t\t\t\\\n /*xmm8,xmm9,xmm10,xmm11,xmm12,xmm13,xmm14,xmm15*/\t\t\\\n-     1,   1,    1,    1,    1,    1,    1,    1}\t\t\\\n+     1,   1,    1,    1,    1,    1,    1,    1 }\n \n /* Order in which to allocate registers.  Each register must be\n    listed once, even those in FIXED_REGISTERS.  List frame pointer\n@@ -1087,7 +1090,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    applied to them.\n    */\n \n-#define HARD_REGNO_NREGS(REGNO, MODE)   \\\n+#define HARD_REGNO_NREGS(REGNO, MODE)\t\t\t\t\t\\\n   (FP_REGNO_P (REGNO) || SSE_REGNO_P (REGNO) || MMX_REGNO_P (REGNO)\t\\\n    ? (COMPLEX_MODE_P (MODE) ? 2 : 1)\t\t\t\t\t\\\n    : ((MODE) == XFmode\t\t\t\t\t\t\t\\\n@@ -1105,16 +1108,16 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define HARD_REGNO_NREGS_WITH_PADDING(REGNO, MODE) ((MODE) == XFmode ? 4 : 8)\n \n-#define VALID_SSE2_REG_MODE(MODE) \\\n-    ((MODE) == V16QImode || (MODE) == V8HImode || (MODE) == V2DFmode    \\\n-     || (MODE) == V2DImode || (MODE) == DFmode)\n+#define VALID_SSE2_REG_MODE(MODE)\t\t\t\t\t\\\n+  ((MODE) == V16QImode || (MODE) == V8HImode || (MODE) == V2DFmode\t\\\n+   || (MODE) == V2DImode || (MODE) == DFmode)\n \n #define VALID_SSE_REG_MODE(MODE)\t\t\t\t\t\\\n-    ((MODE) == TImode || (MODE) == V4SFmode || (MODE) == V4SImode\t\\\n-     || (MODE) == SFmode || (MODE) == TFmode)\n+  ((MODE) == TImode || (MODE) == V4SFmode || (MODE) == V4SImode\t\t\\\n+   || (MODE) == SFmode || (MODE) == TFmode)\n \n #define VALID_MMX_REG_MODE_3DNOW(MODE) \\\n-    ((MODE) == V2SFmode || (MODE) == SFmode)\n+  ((MODE) == V2SFmode || (MODE) == SFmode)\n \n #define VALID_MMX_REG_MODE(MODE)\t\t\t\t\t\\\n     ((MODE) == DImode || (MODE) == V8QImode || (MODE) == V4HImode\t\\\n@@ -1124,24 +1127,24 @@ do {\t\t\t\t\t\t\t\t\t\\\n    place emms and femms instructions.  */\n #define UNITS_PER_SIMD_WORD (TARGET_SSE ? 16 : UNITS_PER_WORD)\n \n-#define VALID_DFP_MODE_P(MODE)\t\t\t\t\t\t\\\n-    ((MODE) == SDmode || (MODE) == DDmode || (MODE) == TDmode)\n+#define VALID_DFP_MODE_P(MODE) \\\n+  ((MODE) == SDmode || (MODE) == DDmode || (MODE) == TDmode)\n \n #define VALID_FP_MODE_P(MODE)\t\t\t\t\t\t\\\n-    ((MODE) == SFmode || (MODE) == DFmode || (MODE) == XFmode\t\t\\\n-     || (MODE) == SCmode || (MODE) == DCmode || (MODE) == XCmode)\t\\\n+  ((MODE) == SFmode || (MODE) == DFmode || (MODE) == XFmode\t\t\\\n+   || (MODE) == SCmode || (MODE) == DCmode || (MODE) == XCmode)\t\t\\\n \n #define VALID_INT_MODE_P(MODE)\t\t\t\t\t\t\\\n-    ((MODE) == QImode || (MODE) == HImode || (MODE) == SImode\t\t\\\n-     || (MODE) == DImode\t\t\t\t\t\t\\\n-     || (MODE) == CQImode || (MODE) == CHImode || (MODE) == CSImode\t\\\n-     || (MODE) == CDImode\t\t\t\t\t\t\\\n-     || (TARGET_64BIT && ((MODE) == TImode || (MODE) == CTImode\t\t\\\n-         || (MODE) == TFmode || (MODE) == TCmode)))\n+  ((MODE) == QImode || (MODE) == HImode || (MODE) == SImode\t\t\\\n+   || (MODE) == DImode\t\t\t\t\t\t\t\\\n+   || (MODE) == CQImode || (MODE) == CHImode || (MODE) == CSImode\t\\\n+   || (MODE) == CDImode\t\t\t\t\t\t\t\\\n+   || (TARGET_64BIT && ((MODE) == TImode || (MODE) == CTImode\t\t\\\n+\t\t\t|| (MODE) == TFmode || (MODE) == TCmode)))\n \n /* Return true for modes passed in SSE registers.  */\n-#define SSE_REG_MODE_P(MODE) \\\n- ((MODE) == TImode || (MODE) == V16QImode || (MODE) == TFmode\t\t\\\n+#define SSE_REG_MODE_P(MODE)\t\t\t\t\t\t\\\n+  ((MODE) == TImode || (MODE) == V16QImode || (MODE) == TFmode\t\t\\\n    || (MODE) == V8HImode || (MODE) == V2DFmode || (MODE) == V2DImode\t\\\n    || (MODE) == V4SFmode || (MODE) == V4SImode)\n \n@@ -1169,10 +1172,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define HARD_REGNO_CALLER_SAVE_MODE(REGNO, NREGS, MODE)\t\t\t\\\n   (CC_REGNO_P (REGNO) ? VOIDmode\t\t\t\t\t\\\n    : (MODE) == VOIDmode && (NREGS) != 1 ? VOIDmode\t\t\t\\\n-   : (MODE) == VOIDmode ? choose_hard_reg_mode ((REGNO), (NREGS), false)\\\n+   : (MODE) == VOIDmode ? choose_hard_reg_mode ((REGNO), (NREGS), false) \\\n    : (MODE) == HImode && !TARGET_PARTIAL_REG_STALL ? SImode\t\t\\\n    : (MODE) == QImode && (REGNO) >= 4 && !TARGET_64BIT ? SImode \t\\\n    : (MODE))\n+\n /* Specify the registers used for certain standard purposes.\n    The values of these macros are register numbers.  */\n "}]}