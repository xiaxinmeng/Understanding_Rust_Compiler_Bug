{"sha": "4e39f563c0cd25401f689c2093cb8c13692156ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUzOWY1NjNjMGNkMjU0MDFmNjg5YzIwOTNjYjhjMTM2OTIxNTZlZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-06T18:23:14Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-06T18:23:14Z"}, "message": "libstdc++: Do not set eofbit eagerly in operator>>(istream&, char(&)[N])\n\nSimilar to the bugs I fixed recently in istream::ignore, we incorrectly\nset eofbit too often in operator>>(istream&, string&) and\noperator>>(istream&.  char(&)[N]).\n\nWe should only set eofbit if we reach EOF but would have kept going\notherwise. If we've already extracted the maximum number of characters\n(whether that's because of the buffer size or the istream's width())\nthen we should not set eofbit.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/basic_string.tcc\n\t(operator>>(basic_istream&, basic_string&)): Do not set eofbit\n\tif extraction stopped after in.width() characters.\n\t* src/c++98/istream-string.cc (operator>>(istream&, string&)):\n\tLikewise.\n\t* include/bits/istream.tcc (__istream_extract): Do not set\n\teofbit if extraction stopped after n-1 characters.\n\t* src/c++98/istream.cc (__istream_extract): Likewise.\n\t* testsuite/21_strings/basic_string/inserters_extractors/char/13.cc: New test.\n\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/13.cc: New test.\n\t* testsuite/27_io/basic_istream/extractors_character/char/5.cc: New test.\n\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/5.cc: New test.", "tree": {"sha": "2f916c09130bbc9794dd9c264ab78c3a2ece7de3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f916c09130bbc9794dd9c264ab78c3a2ece7de3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e39f563c0cd25401f689c2093cb8c13692156ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e39f563c0cd25401f689c2093cb8c13692156ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e39f563c0cd25401f689c2093cb8c13692156ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e39f563c0cd25401f689c2093cb8c13692156ef/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a3f3e08723063ea2dadb7ddf503f02972a724e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a3f3e08723063ea2dadb7ddf503f02972a724e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a3f3e08723063ea2dadb7ddf503f02972a724e2"}], "stats": {"total": 229, "additions": 225, "deletions": 4}, "files": [{"sha": "75218a4061096b7843e405448513ef37cdf019f6", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e39f563c0cd25401f689c2093cb8c13692156ef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e39f563c0cd25401f689c2093cb8c13692156ef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=4e39f563c0cd25401f689c2093cb8c13692156ef", "patch": "@@ -1518,7 +1518,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t}\n \t      __str.append(__buf, __len);\n \n-\t      if (_Traits::eq_int_type(__c, __eof))\n+\t      if (__extracted < __n && _Traits::eq_int_type(__c, __eof))\n \t\t__err |= __ios_base::eofbit;\n \t      __in.width(0);\n \t    }"}, {"sha": "022db9383e944a0ba83bc82f9e15e71208ad2c23", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e39f563c0cd25401f689c2093cb8c13692156ef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e39f563c0cd25401f689c2093cb8c13692156ef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=4e39f563c0cd25401f689c2093cb8c13692156ef", "patch": "@@ -1023,7 +1023,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t  ++__extracted;\n \t\t  __c = __sb->snextc();\n \t\t}\n-\t      if (_Traits::eq_int_type(__c, __eof))\n+\n+\t      if (__extracted < __num - 1\n+\t\t  && _Traits::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n \n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS"}, {"sha": "bfd7389e2e2e15bbe524c5642c9fd05f86b5a276", "filename": "libstdc++-v3/src/c++98/istream-string.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e39f563c0cd25401f689c2093cb8c13692156ef/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fistream-string.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e39f563c0cd25401f689c2093cb8c13692156ef/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fistream-string.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fistream-string.cc?ref=4e39f563c0cd25401f689c2093cb8c13692156ef", "patch": "@@ -93,7 +93,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t    }\n \t\t}\n \n-\t      if (__traits_type::eq_int_type(__c, __eof))\n+\t      if (__extracted < __n && __traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n \t      __in.width(0);\n \t    }"}, {"sha": "79a77b8475a383ffe8b4cae338879d78623d5144", "filename": "libstdc++-v3/src/c++98/istream.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e39f563c0cd25401f689c2093cb8c13692156ef/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fistream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e39f563c0cd25401f689c2093cb8c13692156ef/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fistream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fistream.cc?ref=4e39f563c0cd25401f689c2093cb8c13692156ef", "patch": "@@ -261,7 +261,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t    }\n \t\t}\n \n-\t      if (__traits_type::eq_int_type(__c, __eof))\n+\t      if (__extracted < __num - 1\n+\t\t  && __traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n \n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS"}, {"sha": "f54042a46043bec3692eedb333b45a8441b9d209", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/char/13.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e39f563c0cd25401f689c2093cb8c13692156ef/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F13.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e39f563c0cd25401f689c2093cb8c13692156ef/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F13.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F13.cc?ref=4e39f563c0cd25401f689c2093cb8c13692156ef", "patch": "@@ -0,0 +1,55 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run }\n+\n+#include <string>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  const std::string str = \"1234\";\n+  std::istringstream in(str);\n+  std::string buf;\n+  in.width(4);\n+  in >> buf;\n+  VERIFY( !in.eof() ); // should stop after reading 4 chars\n+  VERIFY( buf == str );\n+}\n+\n+struct CT : std::char_traits<char> { };\n+\n+void\n+test02()\n+{\n+  const std::basic_string<char, CT> str = \"1234\";\n+  std::basic_istringstream<char, CT> in(str);\n+  std::basic_string<char, CT> buf;\n+  in.width(4);\n+  in >> buf;\n+  VERIFY( !in.eof() ); // should stop after reading 4 chars\n+  VERIFY( buf == str );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "f18e2cbe4613c441cd9462067c2a26577f2c58d4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/wchar_t/13.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e39f563c0cd25401f689c2093cb8c13692156ef/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F13.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e39f563c0cd25401f689c2093cb8c13692156ef/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F13.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F13.cc?ref=4e39f563c0cd25401f689c2093cb8c13692156ef", "patch": "@@ -0,0 +1,55 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run }\n+\n+#include <string>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  const std::wstring str = L\"1234\";\n+  std::wistringstream in(str);\n+  std::wstring buf;\n+  in.width(4);\n+  in >> buf;\n+  VERIFY( !in.eof() ); // should stop after reading 4 chars\n+  VERIFY( buf == str );\n+}\n+\n+struct WT : std::char_traits<wchar_t> { };\n+\n+void\n+test02()\n+{\n+  const std::basic_string<wchar_t, WT> str = L\"1234\";\n+  std::basic_istringstream<wchar_t, WT> in(str);\n+  std::basic_string<wchar_t, WT> buf;\n+  in.width(4);\n+  in >> buf;\n+  VERIFY( !in.eof() ); // should stop after reading 4 chars\n+  VERIFY( buf == str );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "984f881564563ce3b98ee90b498f85f6597311b7", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/char/5.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e39f563c0cd25401f689c2093cb8c13692156ef/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e39f563c0cd25401f689c2093cb8c13692156ef/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F5.cc?ref=4e39f563c0cd25401f689c2093cb8c13692156ef", "patch": "@@ -0,0 +1,54 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run }\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  const std::string str = \"1234\";\n+  std::istringstream in(str);\n+  char buf[6];\n+  in.width(5);\n+  in >> buf; // stops after reading 4 chars, doesn't reach EOF\n+  VERIFY( !in.eof() );\n+  VERIFY( buf == str );\n+}\n+\n+struct CT : std::char_traits<char> { };\n+\n+void\n+test02()\n+{\n+  const std::string str = \"1234\";\n+  std::basic_istringstream<char, CT> in(str.c_str());\n+  char buf[6];\n+  in.width(5);\n+  in >> buf; // stops after reading 4 chars, doesn't reach EOF\n+  VERIFY( !in.eof() );\n+  VERIFY( buf == str );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "03bbcadfda51c2739d8042044cbc00cb4e931517", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/wchar_t/5.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e39f563c0cd25401f689c2093cb8c13692156ef/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e39f563c0cd25401f689c2093cb8c13692156ef/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fwchar_t%2F5.cc?ref=4e39f563c0cd25401f689c2093cb8c13692156ef", "patch": "@@ -0,0 +1,54 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run }\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  const std::string str = \"1234\";\n+  std::istringstream in(str);\n+  char buf[6];\n+  in.width(5);\n+  in >> buf; // stops after reading 4 chars, doesn't reach EOF\n+  VERIFY( !in.eof() );\n+  VERIFY( buf == str );\n+}\n+\n+struct WT : std::char_traits<wchar_t> { };\n+\n+void\n+test02()\n+{\n+  const std::wstring str = L\"1234\";\n+  std::basic_istringstream<wchar_t, WT> in(str.c_str());\n+  wchar_t buf[6];\n+  in.width(5);\n+  in >> buf; // stops after reading 4 chars, doesn't reach EOF\n+  VERIFY( !in.eof() );\n+  VERIFY( buf == str );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}