{"sha": "c5049dfec7e13e458fbda1e9f01ffb0658484f70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUwNDlkZmVjN2UxM2U0NThmYmRhMWU5ZjAxZmZiMDY1ODQ4NGY3MA==", "commit": {"author": {"name": "Doug Rupp", "email": "rupp@adacore.com", "date": "2021-06-22T15:31:50Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-09-20T12:31:36Z"}, "message": "[Ada] Use OS_Time for interface to TZ functions.\n\ngcc/ada/\n\n\t* libgnat/a-calend.adb: Remove time_t, replace with OS_Time.\n\t* libgnat/s-os_lib.ads: Fix comments regarding time_t conversion\n\tfunctions to reflect the use of To_Ada in in Ada.Calendar\n\tpackage body.\n\t* sysdep.c (__gnat_localtime_tzoff): Use OS_Time instead of\n\ttime_t.", "tree": {"sha": "f744d50fd45b84b47c4cd57bfc03d2db03a31eaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f744d50fd45b84b47c4cd57bfc03d2db03a31eaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5049dfec7e13e458fbda1e9f01ffb0658484f70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5049dfec7e13e458fbda1e9f01ffb0658484f70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5049dfec7e13e458fbda1e9f01ffb0658484f70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5049dfec7e13e458fbda1e9f01ffb0658484f70/comments", "author": {"login": "Cementitious", "id": 115579865, "node_id": "U_kgDOBuOb2Q", "avatar_url": "https://avatars.githubusercontent.com/u/115579865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cementitious", "html_url": "https://github.com/Cementitious", "followers_url": "https://api.github.com/users/Cementitious/followers", "following_url": "https://api.github.com/users/Cementitious/following{/other_user}", "gists_url": "https://api.github.com/users/Cementitious/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cementitious/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cementitious/subscriptions", "organizations_url": "https://api.github.com/users/Cementitious/orgs", "repos_url": "https://api.github.com/users/Cementitious/repos", "events_url": "https://api.github.com/users/Cementitious/events{/privacy}", "received_events_url": "https://api.github.com/users/Cementitious/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a06c060b1555a74d27d2573a25b769dd024023c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a06c060b1555a74d27d2573a25b769dd024023c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a06c060b1555a74d27d2573a25b769dd024023c0"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "5dedfc52b482fff59d202bde08bfcf618c024135", "filename": "gcc/ada/libgnat/a-calend.adb", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5049dfec7e13e458fbda1e9f01ffb0658484f70/gcc%2Fada%2Flibgnat%2Fa-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5049dfec7e13e458fbda1e9f01ffb0658484f70/gcc%2Fada%2Flibgnat%2Fa-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-calend.adb?ref=c5049dfec7e13e458fbda1e9f01ffb0658484f70", "patch": "@@ -35,6 +35,8 @@ with Interfaces.C;\n \n with System.OS_Primitives;\n \n+with System.OS_Lib;\n+\n package body Ada.Calendar with\n   SPARK_Mode => Off\n is\n@@ -685,13 +687,10 @@ is\n       type int_Pointer  is access all Interfaces.C.int;\n       type long_Pointer is access all Interfaces.C.long;\n \n-      type time_t is\n-        range -(2 ** (Standard'Address_Size - Integer'(1))) ..\n-              +(2 ** (Standard'Address_Size - Integer'(1)) - 1);\n-      type time_t_Pointer is access all time_t;\n+      type OS_Time_Pointer is access all System.OS_Lib.OS_Time;\n \n       procedure localtime_tzoff\n-        (timer       : time_t_Pointer;\n+        (timer       : OS_Time_Pointer;\n          is_historic : int_Pointer;\n          off         : long_Pointer);\n       pragma Import (C, localtime_tzoff, \"__gnat_localtime_tzoff\");\n@@ -708,7 +707,7 @@ is\n       Date_N   : Time_Rep;\n       Flag     : aliased Interfaces.C.int;\n       Offset   : aliased Interfaces.C.long;\n-      Secs_T   : aliased time_t;\n+      Secs_T   : aliased System.OS_Lib.OS_Time;\n \n    --  Start of processing for UTC_Time_Offset\n \n@@ -745,7 +744,7 @@ is\n \n       --  Convert the date into seconds\n \n-      Secs_T := time_t (Date_N / Nano);\n+      Secs_T := System.OS_Lib.To_Ada (Long_Long_Integer (Date_N / Nano));\n \n       --  Determine whether to treat the input date as historical or not. A\n       --  value of \"0\" signifies that the date is NOT historic."}, {"sha": "139d2e0ca6f1b8bb2ed60a73dc1d83b72590b9f2", "filename": "gcc/ada/libgnat/s-os_lib.ads", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5049dfec7e13e458fbda1e9f01ffb0658484f70/gcc%2Fada%2Flibgnat%2Fs-os_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5049dfec7e13e458fbda1e9f01ffb0658484f70/gcc%2Fada%2Flibgnat%2Fs-os_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-os_lib.ads?ref=c5049dfec7e13e458fbda1e9f01ffb0658484f70", "patch": "@@ -169,16 +169,15 @@ package System.OS_Lib is\n    ------------------\n \n    --  Note: Do not use time_t in the compiler and host-based tools; instead\n-   --  use OS_Time. These 3 declarations are intended for use only by consumers\n-   --  of the GNAT.OS_Lib renaming of this package.\n+   --  use OS_Time.\n \n    subtype time_t is Long_Long_Integer;\n-   --  C time_t can be either long or long long, but this is a subtype not used\n-   --  in the compiler or tools, but only for user applications, so we choose\n-   --  the Ada equivalent of the latter because eventually that will be the\n+   --  C time_t can be either long or long long, so we choose the Ada\n+   --  equivalent of the latter because eventually that will be the\n    --  type used out of necessity. This may affect some user code on 32-bit\n    --  targets that have not yet migrated to the Posix 2008 standard,\n-   --  particularly pre version 5 32-bit Linux.\n+   --  particularly pre version 5 32-bit Linux. Do not change this\n+   --  declaration without coordinating it with conversions in Ada.Calendar.\n \n    function To_C (Time : OS_Time) return time_t;\n    --  Convert OS_Time to C time_t type"}, {"sha": "ee951e31049d3431f689075798f03e70a686668a", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5049dfec7e13e458fbda1e9f01ffb0658484f70/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5049dfec7e13e458fbda1e9f01ffb0658484f70/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=c5049dfec7e13e458fbda1e9f01ffb0658484f70", "patch": "@@ -643,11 +643,11 @@ long __gnat_invalid_tzoff = 259273;\n /* Reentrant localtime for Windows. */\n \n extern void\n-__gnat_localtime_tzoff (const time_t *, const int *, long *);\n+__gnat_localtime_tzoff (const OS_Time *, const int *, long *);\n \n static const unsigned long long w32_epoch_offset = 11644473600ULL;\n void\n-__gnat_localtime_tzoff (const time_t *timer, const int *is_historic, long *off)\n+__gnat_localtime_tzoff (const OS_Time *timer, const int *is_historic, long *off)\n {\n   TIME_ZONE_INFORMATION tzi;\n \n@@ -737,10 +737,10 @@ __gnat_localtime_tzoff (const time_t *timer, const int *is_historic, long *off)\n    the Lynx convention when building against the legacy API. */\n \n extern void\n-__gnat_localtime_tzoff (const time_t *, const int *, long *);\n+__gnat_localtime_tzoff (const OS_Time *, const int *, long *);\n \n void\n-__gnat_localtime_tzoff (const time_t *timer, const int *is_historic, long *off)\n+__gnat_localtime_tzoff (const OS_Time *timer, const int *is_historic, long *off)\n {\n   *off = 0;\n }\n@@ -756,21 +756,22 @@ extern void (*Lock_Task) (void);\n extern void (*Unlock_Task) (void);\n \n extern void\n-__gnat_localtime_tzoff (const time_t *, const int *, long *);\n+__gnat_localtime_tzoff (const OS_Time *, const int *, long *);\n \n void\n-__gnat_localtime_tzoff (const time_t *timer ATTRIBUTE_UNUSED,\n+__gnat_localtime_tzoff (const OS_Time *timer ATTRIBUTE_UNUSED,\n \t\t\tconst int *is_historic ATTRIBUTE_UNUSED,\n \t\t\tlong *off ATTRIBUTE_UNUSED)\n {\n   struct tm tp ATTRIBUTE_UNUSED;\n+  const time_t time = (time_t) *timer;\n \n /* AIX, HPUX, Sun Solaris */\n #if defined (_AIX) || defined (__hpux__) || defined (__sun__)\n {\n   (*Lock_Task) ();\n \n-  localtime_r (timer, &tp);\n+  localtime_r (&time, &tp);\n   *off = (long) -timezone;\n \n   (*Unlock_Task) ();\n@@ -787,7 +788,7 @@ __gnat_localtime_tzoff (const time_t *timer ATTRIBUTE_UNUSED,\n {\n   (*Lock_Task) ();\n \n-  localtime_r (timer, &tp);\n+  localtime_r (&time, &tp);\n \n   /* Try to read the environment variable TIMEZONE. The variable may not have\n      been initialize, in that case return an offset of zero (0) for UTC. */\n@@ -833,7 +834,7 @@ __gnat_localtime_tzoff (const time_t *timer ATTRIBUTE_UNUSED,\n   || defined (__GLIBC__) || defined (__DragonFly__) || defined (__OpenBSD__) \\\n   || defined (__DJGPP__) || defined (__QNX__)\n {\n-  localtime_r (timer, &tp);\n+  localtime_r (&time, &tp);\n   *off = tp.tm_gmtoff;\n }\n "}]}