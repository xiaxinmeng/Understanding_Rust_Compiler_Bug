{"sha": "d335d73889d897d073b987b4323db05317fccad3", "node_id": "C_kwDOANBUbNoAKGQzMzVkNzM4ODlkODk3ZDA3M2I5ODdiNDMyM2RiMDUzMTdmY2NhZDM", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-28T10:40:47Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-01T19:34:46Z"}, "message": "libstdc++: Use conditional noexcept in std::reverse_iterator [PR 94418]\n\nThis adds a noexcept-specifier to each constructor and assignment\noperator of std::reverse_iterator so that they are noexcept when the\ncorresponding operation on the underlying iterator is noexcept.\n\nThe std::reverse_iterator class template already requires that the\noperations on the underlying type are valid, so we don't need to use the\nstd::is_nothrow_xxx traits to protect against errors when the expression\nisn't even valid. We can just use a noexcept operator to test if the\nexpression can throw, without the overhead of redundantly checking if\nthe initialization/assignment would be valid.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/94418\n\t* include/bits/stl_iterator.h (reverse_iterator): Use\n\tconditional noexcept on constructors and assignment operators.\n\t* testsuite/24_iterators/reverse_iterator/noexcept.cc: New test.", "tree": {"sha": "e0536e7e62fc3341f428a75ae3d09781efdeb7fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0536e7e62fc3341f428a75ae3d09781efdeb7fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d335d73889d897d073b987b4323db05317fccad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d335d73889d897d073b987b4323db05317fccad3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d335d73889d897d073b987b4323db05317fccad3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d335d73889d897d073b987b4323db05317fccad3/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "681707ec28d56494fa61a80c62500724d55f8586", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/681707ec28d56494fa61a80c62500724d55f8586", "html_url": "https://github.com/Rust-GCC/gccrs/commit/681707ec28d56494fa61a80c62500724d55f8586"}], "stats": {"total": 112, "additions": 108, "deletions": 4}, "files": [{"sha": "4973f792b56c9cc43579aaa089aeb408779d5721", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d335d73889d897d073b987b4323db05317fccad3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d335d73889d897d073b987b4323db05317fccad3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=d335d73889d897d073b987b4323db05317fccad3", "patch": "@@ -174,20 +174,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // 235 No specification of default ctor for reverse_iterator\n       // 1012. reverse_iterator default ctor should value initialize\n       _GLIBCXX17_CONSTEXPR\n-      reverse_iterator() : current() { }\n+      reverse_iterator()\n+      _GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator()))\n+      : current()\n+      { }\n \n       /**\n        *  This %iterator will move in the opposite direction that @p x does.\n       */\n       explicit _GLIBCXX17_CONSTEXPR\n-      reverse_iterator(iterator_type __x) : current(__x) { }\n+      reverse_iterator(iterator_type __x)\n+      _GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator(__x)))\n+      : current(__x)\n+      { }\n \n       /**\n        *  The copy constructor is normal.\n       */\n       _GLIBCXX17_CONSTEXPR\n       reverse_iterator(const reverse_iterator& __x)\n-      : current(__x.current) { }\n+      _GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator(__x.current)))\n+      : current(__x.current)\n+      { }\n \n #if __cplusplus >= 201103L\n       reverse_iterator& operator=(const reverse_iterator&) = default;\n@@ -203,7 +211,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \t_GLIBCXX17_CONSTEXPR\n         reverse_iterator(const reverse_iterator<_Iter>& __x)\n-\t: current(__x.current) { }\n+\t_GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator(__x.current)))\n+\t: current(__x.current)\n+\t{ }\n \n #if __cplusplus >= 201103L\n       template<typename _Iter>\n@@ -214,6 +224,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_GLIBCXX17_CONSTEXPR\n \treverse_iterator&\n \toperator=(const reverse_iterator<_Iter>& __x)\n+\t_GLIBCXX_NOEXCEPT_IF(noexcept(current = __x.current))\n \t{\n \t  current = __x.current;\n \t  return *this;\n@@ -226,6 +237,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _GLIBCXX_NODISCARD\n       _GLIBCXX17_CONSTEXPR iterator_type\n       base() const\n+      _GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator(current)))\n       { return current; }\n \n       /**"}, {"sha": "df4b1b0763d7dfbb01e833fe517abcae21fcd14a", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/noexcept.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d335d73889d897d073b987b4323db05317fccad3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d335d73889d897d073b987b4323db05317fccad3/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fnoexcept.cc?ref=d335d73889d897d073b987b4323db05317fccad3", "patch": "@@ -0,0 +1,92 @@\n+// { dg-do compile { target c++11 } }\n+\n+#include <iterator>\n+\n+template<typename T, bool Nothrow>\n+struct bidi\n+{\n+  using value_type = T;\n+  using pointer = T*;\n+  using reference = T&;\n+  using difference_type = std::ptrdiff_t;\n+  using iterator_category = std::bidirectional_iterator_tag;\n+\n+  T* ptr;\n+\n+  bidi(T* ptr = nullptr) noexcept(Nothrow) : ptr(ptr) { }\n+\n+  bidi(const bidi& iter) noexcept(Nothrow) : ptr(iter.ptr) { }\n+\n+  template<typename U>\n+    bidi(const bidi<U, Nothrow>& iter) noexcept(Nothrow) : ptr(iter.ptr) { }\n+\n+  bidi& operator=(const bidi& iter) noexcept(Nothrow)\n+  {\n+    ptr = iter.ptr;\n+    return *this;\n+  }\n+\n+  template<typename U>\n+  bidi& operator=(const bidi<U, Nothrow>& iter) noexcept(Nothrow)\n+  {\n+    ptr = iter.ptr;\n+    return *this;\n+  }\n+\n+  bidi& operator++() { ++ptr; return *this; }\n+  bidi& operator--() { --ptr; return *this; }\n+  bidi operator++(int) { bidi tmp = *this; ++ptr; return tmp; }\n+  bidi operator--(int) { bidi tmp = *this; --ptr; return tmp; }\n+\n+  reference operator*() const { return *ptr; }\n+  pointer operator->() const { return ptr; }\n+};\n+\n+void\n+test01()\n+{\n+  using B1 = bidi<int, true>;\n+  using R1 = std::reverse_iterator<B1>;\n+  static_assert( std::is_nothrow_default_constructible<R1>(), \"\" );\n+  static_assert( std::is_nothrow_copy_constructible<R1>(), \"\" );\n+  static_assert( std::is_nothrow_move_constructible<R1>(), \"\" );\n+  static_assert( std::is_nothrow_copy_assignable<R1>(), \"\" );\n+  static_assert( std::is_nothrow_move_assignable<R1>(), \"\" );\n+  static_assert( std::is_nothrow_constructible<R1, const B1&>(), \"\" );\n+  static_assert( std::is_nothrow_constructible<R1, B1>(), \"\" );\n+\n+  using B2 = bidi<const int, true>;\n+  using R2 = std::reverse_iterator<B2>;\n+  // Test conversions from reverse_iterator<B1> to reverse_iterator<B2>.\n+  static_assert( std::is_nothrow_constructible<R2, const R1&>(), \"\" );\n+  static_assert( std::is_nothrow_assignable<R2&, const R1&>(), \"\" );\n+  // And from B1 to reverse_iterator<B2>.\n+  static_assert( std::is_nothrow_constructible<R2, const B2&>(), \"\" );\n+  static_assert( std::is_nothrow_constructible<R2, B2>(), \"\" );\n+  static_assert( std::is_nothrow_constructible<R2, const B1&>(), \"\" );\n+  static_assert( std::is_nothrow_constructible<R2, B1>(), \"\" );\n+\n+  using B3 = bidi<int, false>;\n+  using R3 = std::reverse_iterator<B3>;\n+  static_assert( ! std::is_nothrow_default_constructible<R3>(), \"\" );\n+  static_assert( ! std::is_nothrow_copy_constructible<R3>(), \"\" );\n+  static_assert( ! std::is_nothrow_move_constructible<R3>(), \"\" );\n+  static_assert( ! std::is_nothrow_copy_assignable<R3>(), \"\" );\n+  static_assert( ! std::is_nothrow_move_assignable<R3>(), \"\" );\n+  static_assert( ! std::is_nothrow_constructible<R3, const B3&>(), \"\" );\n+  static_assert( ! std::is_nothrow_constructible<R3, B3>(), \"\" );\n+\n+  using B4 = bidi<const int, false>;\n+  using R4 = std::reverse_iterator<B4>;\n+  // Test conversions from reverse_iterator<B3> to reverse_iterator<B4>.\n+  static_assert( ! std::is_nothrow_constructible<R4, const R3&>(), \"\" );\n+  static_assert( ! std::is_nothrow_assignable<R4&, const R3&>(), \"\" );\n+  // And from B3 to reverse_iterator<B4>.\n+  static_assert( ! std::is_nothrow_constructible<R4, const B4&>(), \"\" );\n+  static_assert( ! std::is_nothrow_constructible<R4, B4>(), \"\" );\n+  static_assert( ! std::is_nothrow_constructible<R4, const B3&>(), \"\" );\n+  static_assert( ! std::is_nothrow_constructible<R4, B3>(), \"\" );\n+\n+  static_assert( noexcept(std::declval<R1&>().base()), \"\" );\n+  static_assert( ! noexcept(std::declval<R3&>().base()), \"\" );\n+}"}]}