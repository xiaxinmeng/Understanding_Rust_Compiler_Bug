{"sha": "7197e2db28f10dec509967bb1cbd2d74cb03ee7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE5N2UyZGIyOGYxMGRlYzUwOTk2N2JiMWNiZDJkNzRjYjAzZWU3ZQ==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2019-09-17T08:02:25Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-17T08:02:25Z"}, "message": "[Ada] Fix possible suppressed overflows in arithmetic run-time\n\nFunction Double_Divide computes the division of its parameters\n(X / (Y*Z)) in a way that avoids overflows on signed integers, except in\ntwo specific cases, when X = -2**63, abs(Y) = abs(Z) = 1 (leading to an\noverflow in -To_Int(Qu)) and when X = -2**63 and Y*Z is large enough\nthat Qu=0 and so the remainder Ru=2**63 (leading to an overflow in\n-To_Int(Ru)), for example with Y = Z = 2**32-1.\n\nThis fix avoids the overflow by applying \"-\" on the unsigned value\nbefore the conversion to signed integer.\n\nThe issue cannot manifest as an overflow check failure in our runtime,\nas overflow checks are suppressed by using pragma Suppress at the start\nof the file. Assuming a machine implements wraparound semantics here,\nthe result was correct even with the suppressed overflow.\n\nAs a result, there can be no test showing the difference.\n\n2019-09-17  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/s-arit64.adb (Double_Divide): Fix two possible\n\toverflows.\n\nFrom-SVN: r275790", "tree": {"sha": "69738973e7cc42feb84900855f8486825c845263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69738973e7cc42feb84900855f8486825c845263"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7197e2db28f10dec509967bb1cbd2d74cb03ee7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7197e2db28f10dec509967bb1cbd2d74cb03ee7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7197e2db28f10dec509967bb1cbd2d74cb03ee7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7197e2db28f10dec509967bb1cbd2d74cb03ee7e/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "64989f18c04c7444ecb67da9a6ccecbe40bb1c12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64989f18c04c7444ecb67da9a6ccecbe40bb1c12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64989f18c04c7444ecb67da9a6ccecbe40bb1c12"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "913b30fc7008f4ca835fdb33269e9c8d42034ce2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7197e2db28f10dec509967bb1cbd2d74cb03ee7e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7197e2db28f10dec509967bb1cbd2d74cb03ee7e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7197e2db28f10dec509967bb1cbd2d74cb03ee7e", "patch": "@@ -1,3 +1,8 @@\n+2019-09-17  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-arit64.adb (Double_Divide): Fix two possible\n+\toverflows.\n+\n 2019-09-17  Dmitriy Anisimkov  <anisimko@adacore.com>\n \n \t* make_util.ads (On_Windows): Move..."}, {"sha": "a35a40df5cf2f912572c73b3b5b44fe4573f4aae", "filename": "gcc/ada/libgnat/s-arit64.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7197e2db28f10dec509967bb1cbd2d74cb03ee7e/gcc%2Fada%2Flibgnat%2Fs-arit64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7197e2db28f10dec509967bb1cbd2d74cb03ee7e/gcc%2Fada%2Flibgnat%2Fs-arit64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-arit64.adb?ref=7197e2db28f10dec509967bb1cbd2d74cb03ee7e", "patch": "@@ -204,9 +204,13 @@ package body System.Arith_64 is\n \n       --  Case of dividend (X) sign negative\n \n+      --  We perform the unary minus operation on the unsigned value\n+      --  before conversion to signed, to avoid a possible overflow for\n+      --  value -2**63, both for computing R and Q.\n+\n       else\n-         R := -To_Int (Ru);\n-         Q := (if Den_Pos then -To_Int (Qu) else To_Int (Qu));\n+         R := To_Int (-Ru);\n+         Q := (if Den_Pos then To_Int (-Qu) else To_Int (Qu));\n       end if;\n    end Double_Divide;\n "}]}