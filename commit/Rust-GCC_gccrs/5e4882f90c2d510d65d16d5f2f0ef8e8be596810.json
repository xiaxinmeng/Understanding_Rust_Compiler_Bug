{"sha": "5e4882f90c2d510d65d16d5f2f0ef8e8be596810", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU0ODgyZjkwYzJkNTEwZDY1ZDE2ZDVmMmYwZWY4ZThiZTU5NjgxMA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2017-08-10T18:27:40Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-08-10T18:27:40Z"}, "message": "i386-protos.h (ix86_split_stack_boundary): New prototype.\n\n\t* config/i386/i386-protos.h (ix86_split_stack_boundary): New prototype.\n\t* config/i386/i386.c (ix86_split_stack_boundary): New function.\n\t(ix86_xpand_split_stack_prologue): Call ix86_split_stack_boundary.\n\t(ix86_legitimate_address_p) <case UNSPEC_STACK_CHECK>: Remove.\n\t(i386_asm_output_addr_const_extra) <case UNSPEC_STACK_CHECK>: Ditto.\n\t(optput_pic_addr_const): Remove UNSPEC_STACK_CHECK handling.\n\t* config/i386/i386.md (unspec): Remove UNSPEC_STACK_CHECK.\n\t(split_stack_space_check): Call ix86_split_stack_boundary.\n\nFrom-SVN: r251031", "tree": {"sha": "32b2d44938afffb2d0fdf6be051d0eee157af2d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32b2d44938afffb2d0fdf6be051d0eee157af2d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e4882f90c2d510d65d16d5f2f0ef8e8be596810", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e4882f90c2d510d65d16d5f2f0ef8e8be596810", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e4882f90c2d510d65d16d5f2f0ef8e8be596810", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e4882f90c2d510d65d16d5f2f0ef8e8be596810/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8197ac2f3070fdaa79aac6541e45fbfdec64ccc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8197ac2f3070fdaa79aac6541e45fbfdec64ccc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8197ac2f3070fdaa79aac6541e45fbfdec64ccc4"}], "stats": {"total": 92, "additions": 47, "deletions": 45}, "files": [{"sha": "ccb553b909fdde20462590293140dbb6b135c151", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e4882f90c2d510d65d16d5f2f0ef8e8be596810/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e4882f90c2d510d65d16d5f2f0ef8e8be596810/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e4882f90c2d510d65d16d5f2f0ef8e8be596810", "patch": "@@ -1,3 +1,14 @@\n+2017-08-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386-protos.h (ix86_split_stack_boundary): New prototype.\n+\t* config/i386/i386.c (ix86_split_stack_boundary): New function.\n+\t(ix86_xpand_split_stack_prologue): Call ix86_split_stack_boundary.\n+\t(ix86_legitimate_address_p) <case UNSPEC_STACK_CHECK>: Remove.\n+\t(i386_asm_output_addr_const_extra) <case UNSPEC_STACK_CHECK>: Ditto.\n+\t(optput_pic_addr_const): Remove UNSPEC_STACK_CHECK handling.\n+\t* config/i386/i386.md (unspec): Remove UNSPEC_STACK_CHECK.\n+\t(split_stack_space_check): Call ix86_split_stack_boundary.\n+\n 2017-08-10  Martin Sebor  <msebor@redhat.com>\n \n \t* print-tree.c (print_node): Print location using the established"}, {"sha": "ae945cb8c9ebefde537aeb6c69e181221593ba4e", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e4882f90c2d510d65d16d5f2f0ef8e8be596810/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e4882f90c2d510d65d16d5f2f0ef8e8be596810/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=5e4882f90c2d510d65d16d5f2f0ef8e8be596810", "patch": "@@ -201,6 +201,8 @@ extern void ix86_expand_truncdf_32 (rtx, rtx);\n \n extern void ix86_expand_vecop_qihi (enum rtx_code, rtx, rtx, rtx);\n \n+extern rtx ix86_split_stack_boundary (void);\n+\n #ifdef TREE_CODE\n extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree, int);\n #endif\t/* TREE_CODE  */"}, {"sha": "1f89ad1425ff10d87da8ce855c4eb403eb8e3770", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 28, "deletions": 35, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e4882f90c2d510d65d16d5f2f0ef8e8be596810/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e4882f90c2d510d65d16d5f2f0ef8e8be596810/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5e4882f90c2d510d65d16d5f2f0ef8e8be596810", "patch": "@@ -15785,6 +15785,28 @@ static GTY(()) rtx split_stack_fn;\n \n static GTY(()) rtx split_stack_fn_large;\n \n+/*  */\n+\n+rtx\n+ix86_split_stack_boundary (void)\n+{\n+  int offset;\n+  addr_space_t as = DEFAULT_TLS_SEG_REG;\n+  rtx r;\n+\n+#ifdef TARGET_THREAD_SPLIT_STACK_OFFSET\n+  offset = TARGET_THREAD_SPLIT_STACK_OFFSET;\n+#else\n+  gcc_unreachable ();\n+#endif\n+\n+  r = GEN_INT (offset);\n+  r = gen_const_mem (Pmode, r);\n+  set_mem_addr_space (r, as);\n+\n+  return r;\n+}\n+\n /* Handle -fsplit-stack.  These are the first instructions in the\n    function, even before the regular prologue.  */\n \n@@ -15816,10 +15838,8 @@ ix86_expand_split_stack_prologue (void)\n      us SPLIT_STACK_AVAILABLE bytes, so if we need less than that we\n      can compare directly.  Otherwise we need to do an addition.  */\n \n-  limit = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, const0_rtx),\n-\t\t\t  UNSPEC_STACK_CHECK);\n-  limit = gen_rtx_CONST (Pmode, limit);\n-  limit = gen_rtx_MEM (Pmode, limit);\n+  limit = ix86_split_stack_boundary ();\n+\n   if (allocate < SPLIT_STACK_AVAILABLE)\n     current = stack_pointer_rtx;\n   else\n@@ -16892,10 +16912,6 @@ ix86_legitimate_address_p (machine_mode, rtx addr, bool strict)\n \t  case UNSPEC_DTPOFF:\n \t    break;\n \n-\t  case UNSPEC_STACK_CHECK:\n-\t    gcc_assert (flag_split_stack);\n-\t    break;\n-\n \t  default:\n \t    /* Invalid address unspec.  */\n \t    return false;\n@@ -17985,17 +18001,10 @@ output_pic_addr_const (FILE *file, rtx x, int code)\n \tputc (ASSEMBLER_DIALECT == ASM_INTEL ? ')' : ']', file);\n       break;\n \n-     case UNSPEC:\n-       if (XINT (x, 1) == UNSPEC_STACK_CHECK)\n-\t {\n-\t   bool f = i386_asm_output_addr_const_extra (file, x);\n-\t   gcc_assert (f);\n-\t   break;\n-\t }\n-\n-       gcc_assert (XVECLEN (x, 0) == 1);\n-       output_pic_addr_const (file, XVECEXP (x, 0, 0), code);\n-       switch (XINT (x, 1))\n+    case UNSPEC:\n+      gcc_assert (XVECLEN (x, 0) == 1);\n+      output_pic_addr_const (file, XVECEXP (x, 0, 0), code);\n+      switch (XINT (x, 1))\n \t{\n \tcase UNSPEC_GOT:\n \t  fputs (\"@GOT\", file);\n@@ -19691,22 +19700,6 @@ i386_asm_output_addr_const_extra (FILE *file, rtx x)\n       break;\n #endif\n \n-    case UNSPEC_STACK_CHECK:\n-      {\n-\tint offset;\n-\n-\tgcc_assert (flag_split_stack);\n-\n-#ifdef TARGET_THREAD_SPLIT_STACK_OFFSET\n-\toffset = TARGET_THREAD_SPLIT_STACK_OFFSET;\n-#else\n-\tgcc_unreachable ();\n-#endif\n-\n-\tfprintf (file, \"%s:%d\", TARGET_64BIT ? \"%fs\" : \"%gs\", offset);\n-      }\n-      break;\n-\n     default:\n       return false;\n     }"}, {"sha": "8ccc975049ad2e0d28c1e3593bc830a6e2906db9", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e4882f90c2d510d65d16d5f2f0ef8e8be596810/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e4882f90c2d510d65d16d5f2f0ef8e8be596810/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5e4882f90c2d510d65d16d5f2f0ef8e8be596810", "patch": "@@ -86,7 +86,6 @@\n   UNSPEC_SET_RIP\n   UNSPEC_SET_GOT_OFFSET\n   UNSPEC_MEMORY_BLOCKAGE\n-  UNSPEC_STACK_CHECK\n   UNSPEC_PROBE_STACK\n \n   ;; TLS support\n@@ -12630,20 +12629,17 @@\n   [(set (pc) (if_then_else\n \t      (ltu (minus (reg SP_REG)\n \t\t\t  (match_operand 0 \"register_operand\"))\n-\t\t   (unspec [(const_int 0)] UNSPEC_STACK_CHECK))\n+\t\t   (match_dup 2))\n \t      (label_ref (match_operand 1))\n \t      (pc)))]\n   \"\"\n {\n-  rtx reg, size, limit;\n+  rtx reg = gen_reg_rtx (Pmode);\n \n-  reg = gen_reg_rtx (Pmode);\n-  size = force_reg (Pmode, operands[0]);\n-  emit_insn (gen_sub3_insn (reg, stack_pointer_rtx, size));\n-  limit = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, const0_rtx),\n-\t\t\t  UNSPEC_STACK_CHECK);\n-  limit = gen_rtx_MEM (Pmode, gen_rtx_CONST (Pmode, limit));\n-  ix86_expand_branch (GEU, reg, limit, operands[1]);\n+  emit_insn (gen_sub3_insn (reg, stack_pointer_rtx, operands[0]));\n+\n+  operands[2] = ix86_split_stack_boundary ();\n+  ix86_expand_branch (GEU, reg, operands[2], operands[1]);\n \n   DONE;\n })"}]}