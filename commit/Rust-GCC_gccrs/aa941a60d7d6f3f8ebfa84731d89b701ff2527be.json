{"sha": "aa941a60d7d6f3f8ebfa84731d89b701ff2527be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE5NDFhNjBkN2Q2ZjNmOGViZmE4NDczMWQ4OWI3MDFmZjI1MjdiZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2005-06-19T08:26:50Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-06-19T08:26:50Z"}, "message": "i386.c (ix86_function_arg_regno_p): Add MMX_REGNO_P for TARGET_MMX.\n\n2005-06-16  Uros Bizjak  <uros@kss-loka.si>\n\n        * config/i386/i386.c (ix86_function_arg_regno_p): Add MMX_REGNO_P\n        for TARGET_MMX.  Use MMX_REGPARM_MAX and SSE_REGPARM_MAX for MMX\n        and SSE registers to determine if regno is valid.\n        (ix86_function_value_regno_p): Depend FIRST_FLOAT_REG on\n        TARGET_FLOAT_RETURNS_IN_80387 also for TARGET_64BIT. Clean up.\n\nFrom-SVN: r101179", "tree": {"sha": "1d4bf51e9208a4ea8f1b2863b5e8700cb79d716c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d4bf51e9208a4ea8f1b2863b5e8700cb79d716c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa941a60d7d6f3f8ebfa84731d89b701ff2527be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa941a60d7d6f3f8ebfa84731d89b701ff2527be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa941a60d7d6f3f8ebfa84731d89b701ff2527be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa941a60d7d6f3f8ebfa84731d89b701ff2527be/comments", "author": null, "committer": null, "parents": [{"sha": "99e6bdda90bc96029f692df81028dcdaa65e3dea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e6bdda90bc96029f692df81028dcdaa65e3dea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99e6bdda90bc96029f692df81028dcdaa65e3dea"}], "stats": {"total": 95, "additions": 54, "deletions": 41}, "files": [{"sha": "c527a5d4673820890772b7ac9b0808fc80b7673c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 29, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa941a60d7d6f3f8ebfa84731d89b701ff2527be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa941a60d7d6f3f8ebfa84731d89b701ff2527be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa941a60d7d6f3f8ebfa84731d89b701ff2527be", "patch": "@@ -1,3 +1,11 @@\n+2005-06-19  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* config/i386/i386.c (ix86_function_arg_regno_p): Add MMX_REGNO_P\n+\tfor TARGET_MMX.  Use MMX_REGPARM_MAX and SSE_REGPARM_MAX for MMX\n+\tand SSE registers to determine if regno is valid.\n+\t(ix86_function_value_regno_p): Depend FIRST_FLOAT_REG on\n+\tTARGET_FLOAT_RETURNS_IN_80387 also for TARGET_64BIT. Clean up.\n+\n 2005-06-18  Richard Henderson  <rth@redhat.com>\n \n \t* tree-complex.c (init_dont_simulate_again): Clear DONT_SIMULATE_AGAIN\n@@ -114,9 +122,9 @@\n \n 2005-06-17  Richard Henderson  <rth@redhat.com>\n \n-        * tree-vect-transform.c (vect_do_peeling_for_loop_bound): Use\n-        initialize_original_copy_tables and free_original_copy_tables.\n-        (vect_do_peeling_for_alignment): Likewise.\n+\t* tree-vect-transform.c (vect_do_peeling_for_loop_bound): Use\n+\tinitialize_original_copy_tables and free_original_copy_tables.\n+\t(vect_do_peeling_for_alignment): Likewise.\n \n 2005-06-17  Pat Haugen  <pthaugen@us.ibm.com>\n \n@@ -229,22 +237,22 @@\n \t(function_arg): Likewise.\n \n 2005-06-16  Paolo Bonzini  <bonzini@gnu.org>\n-            Daniel Jacobowitz  <dan@codesourcery.com>\n+\t    Daniel Jacobowitz  <dan@codesourcery.com>\n \t    Alan Modra <amodra.bigpond.net.au>\n \n-        * configure.ac (gcc_version): Set near the beginning.\n-        (as, ld, nm): Do not link in-tree tools.  Set gcc_cv_* if tools are\n-        found in the tree.  Use gcc_AC_PROG to find the tools in the system.\n-        (objdump): Do not look for it.\n-        * Makefile.in (NM_FOR_TARGET): Point to ./nm\n-        (ORIGINAL_AS_FOR_TARGET, ORIGINAL_LD_FOR_TARGET,\n-        ORIGINAL_NM_FOR_TARGET): Substitute from autoconf.\n-        (as, ld, nm): New rules.\n-        (libgcc.mk): Depend on them.\n-        * aclocal.m4 (gcc_AC_TOOL_DIRS, gcc_AC_CHECK_TOOL,\n-        gcc_AC_BUILD_EXEEXT): New.\n-        (gcc_AC_CHECK_PROG_VER): Use gcc_AC_BUILD_EXEEXT.\n-        * configure: Regenerate.\n+\t* configure.ac (gcc_version): Set near the beginning.\n+\t(as, ld, nm): Do not link in-tree tools.  Set gcc_cv_* if tools are\n+\tfound in the tree.  Use gcc_AC_PROG to find the tools in the system.\n+\t(objdump): Do not look for it.\n+\t* Makefile.in (NM_FOR_TARGET): Point to ./nm\n+\t(ORIGINAL_AS_FOR_TARGET, ORIGINAL_LD_FOR_TARGET,\n+\tORIGINAL_NM_FOR_TARGET): Substitute from autoconf.\n+\t(as, ld, nm): New rules.\n+\t(libgcc.mk): Depend on them.\n+\t* aclocal.m4 (gcc_AC_TOOL_DIRS, gcc_AC_CHECK_TOOL,\n+\tgcc_AC_BUILD_EXEEXT): New.\n+\t(gcc_AC_CHECK_PROG_VER): Use gcc_AC_BUILD_EXEEXT.\n+\t* configure: Regenerate.\n \n 2005-06-16  Jan Hubicka  <jh@suse.cz>\n \n@@ -380,7 +388,7 @@\n \t\n 2005-06-15  Richard Sandiford  <richard@codesourcery.com>\n \n-        * doc/invoke.texi (-mips16): Fix typo.\n+\t* doc/invoke.texi (-mips16): Fix typo.\n \n 2005-06-15  David Ung  <davidu@mips.com>\n \n@@ -394,7 +402,7 @@\n \tmips16e seb/seh. \n \t(*extend<SHORT:mode><GPR:mode>2): Disable this pattern for\n \tGENERATE_MIPS16E. \n-        * doc/invoke.texi (MIPS Options): Add comment to -mips16\n+\t* doc/invoke.texi (MIPS Options): Add comment to -mips16\n \tindicating MIPS16e ASE is used if targetting for MIPS32 or MIPS64.\n \t\n 2005-06-15  Diego Novillo  <dnovillo@redhat.com>\n@@ -896,18 +904,18 @@\n \n 2005-06-08  Dale Johannesen  <dalej@apple.com>\n \n-        * config/darwin.c (darwin_binds_local_p):  New.\n-        * config/darwin-protos.h (darwin_binds_local_p):  Declare it.\n-        * config/i386/i386.c (TARGET_BINDS_LOCAL_P):  Use it for TARGET_MACHO.\n-        * config/rs6000/rs6000.c (rs6000_binds_local_p):  Remove.\n-        (TARGET_BINDS_LOCAL_P):  Change it to darwin_binds_local_p.\n+\t* config/darwin.c (darwin_binds_local_p):  New.\n+\t* config/darwin-protos.h (darwin_binds_local_p):  Declare it.\n+\t* config/i386/i386.c (TARGET_BINDS_LOCAL_P):  Use it for TARGET_MACHO.\n+\t* config/rs6000/rs6000.c (rs6000_binds_local_p):  Remove.\n+\t(TARGET_BINDS_LOCAL_P):  Change it to darwin_binds_local_p.\n \n 2005-06-08  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/rs6000.h: Remove rs6000_long_double_size_string,\n-        rs6000_isel, rs6000_spe, rs6000_alignment_string,\n-        rs6000_sched_restricted_insns_priority_str,\n-        rs6000_sched_restricted_insns_priority, rs6000_abi_string.\n+\t* config/rs6000/rs6000.h: Remove rs6000_long_double_size_string,\n+\trs6000_isel, rs6000_spe, rs6000_alignment_string,\n+\trs6000_sched_restricted_insns_priority_str,\n+\trs6000_sched_restricted_insns_priority, rs6000_abi_string.\n \n 2005-06-08  Zdenek Dvorak  <dvorakz@suse.cz>\n \n@@ -999,7 +1007,7 @@\n 2005-06-08  Richard Henderson  <rth@redhat.com>\n \n \tPR target/21721\n-        * config/ia64/ia64.c (emit_predicate_relation_info): Skip p0.\n+\t* config/ia64/ia64.c (emit_predicate_relation_info): Skip p0.\n \n 2005-06-08  Eric Botcazou  <ebotcazou@libertysurf.fr>\n "}, {"sha": "d2484cd15c23c96320cd1fc50408b79eb84e3367", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa941a60d7d6f3f8ebfa84731d89b701ff2527be/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa941a60d7d6f3f8ebfa84731d89b701ff2527be/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=aa941a60d7d6f3f8ebfa84731d89b701ff2527be", "patch": "@@ -2047,8 +2047,13 @@ ix86_function_arg_regno_p (int regno)\n   int i;\n   if (!TARGET_64BIT)\n     return (regno < REGPARM_MAX\n-\t    || (TARGET_SSE && SSE_REGNO_P (regno) && !fixed_regs[regno]));\n-  if (SSE_REGNO_P (regno) && TARGET_SSE)\n+\t    || (TARGET_MMX && MMX_REGNO_P (regno)\n+\t\t&& (regno < FIRST_MMX_REG + MMX_REGPARM_MAX))\n+\t    || (TARGET_SSE && SSE_REGNO_P (regno)\n+\t\t&& (regno < FIRST_SSE_REG + SSE_REGPARM_MAX)));\n+\n+  if (TARGET_SSE && SSE_REGNO_P (regno)\n+      && (regno < FIRST_SSE_REG + SSE_REGPARM_MAX))\n     return true;\n   /* RAX is used as hidden argument to va_arg functions.  */\n   if (!regno)\n@@ -3153,16 +3158,16 @@ ix86_function_arg_boundary (enum machine_mode mode, tree type)\n bool\n ix86_function_value_regno_p (int regno)\n {\n-  if (!TARGET_64BIT)\n-    {\n-      return ((regno) == 0\n-\t      || ((regno) == FIRST_FLOAT_REG && TARGET_FLOAT_RETURNS_IN_80387)\n-\t      || ((regno) == FIRST_MMX_REG && TARGET_MMX)\n-\t      || ((regno) == FIRST_SSE_REG && TARGET_SSE));\n-    }\n-  return ((regno) == 0 || (regno) == FIRST_FLOAT_REG\n-\t  || ((regno) == FIRST_SSE_REG && TARGET_SSE)\n-\t  || ((regno) == FIRST_FLOAT_REG && TARGET_FLOAT_RETURNS_IN_80387));\n+  if (regno == 0\n+      || (regno == FIRST_FLOAT_REG && TARGET_FLOAT_RETURNS_IN_80387)\n+      || (regno == FIRST_SSE_REG && TARGET_SSE))\n+    return true;\n+\n+  if (!TARGET_64BIT\n+      && (regno == FIRST_MMX_REG && TARGET_MMX))\n+\treturn true;\n+\n+  return false;\n }\n \n /* Define how to find the value returned by a function."}]}