{"sha": "cf54619a8e33d2494b9f216f27d0110b8e0a4e49", "node_id": "C_kwDOANBUbNoAKGNmNTQ2MTlhOGUzM2QyNDk0YjlmMjE2ZjI3ZDAxMTBiOGUwYTRlNDk", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-02-09T09:25:13Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-13T08:04:31Z"}, "message": "[Ada] Document control flow redundancy\n\nAdd documentation about -fharden-control-flow-redundancy.\n\ngcc/ada/\n\n\t* doc/gnat_rm/security_hardening_features.rst: Add subsection on\n\tControl Flow Redundancy.\n\t* gnat_rm.texi: Regenerate.", "tree": {"sha": "31d8910b34aeae87434ab5cb8c29bf47c16d65a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31d8910b34aeae87434ab5cb8c29bf47c16d65a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf54619a8e33d2494b9f216f27d0110b8e0a4e49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf54619a8e33d2494b9f216f27d0110b8e0a4e49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf54619a8e33d2494b9f216f27d0110b8e0a4e49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf54619a8e33d2494b9f216f27d0110b8e0a4e49/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0145570e89270c33d4cf2a0abd2a215f09456789", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0145570e89270c33d4cf2a0abd2a215f09456789", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0145570e89270c33d4cf2a0abd2a215f09456789"}], "stats": {"total": 245, "additions": 180, "deletions": 65}, "files": [{"sha": "fc29ffdedcd5612beb92829e947e74b59bf9bb80", "filename": "gcc/ada/doc/gnat_rm/security_hardening_features.rst", "status": "modified", "additions": 76, "deletions": 20, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf54619a8e33d2494b9f216f27d0110b8e0a4e49/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fsecurity_hardening_features.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf54619a8e33d2494b9f216f27d0110b8e0a4e49/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fsecurity_hardening_features.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fsecurity_hardening_features.rst?ref=cf54619a8e33d2494b9f216f27d0110b8e0a4e49", "patch": "@@ -15,7 +15,7 @@ Register Scrubbing\n GNAT can generate code to zero-out hardware registers before returning\n from a subprogram.\n \n-It can be enabled with the *-fzero-call-used-regs* command line\n+It can be enabled with the :switch:`-fzero-call-used-regs` command-line\n option, to affect all subprograms in a compilation, and with a\n :samp:`Machine_Attribute` pragma, to affect only specific subprograms.\n \n@@ -31,7 +31,7 @@ option, to affect all subprograms in a compilation, and with a\n      --  Before returning, Bar scrubs all call-clobbered registers.\n \n \n-For usage and more details on the command line option, and on the\n+For usage and more details on the command-line option, and on the\n ``zero_call_used_regs`` attribute, see :title:`Using the GNU Compiler\n Collection (GCC)`.\n \n@@ -64,10 +64,10 @@ specific subprograms and variables.\n      --  of the stack space used by the subprogram.\n \n \n-There are also *-fstrub* command line options to control default\n-settings.  For usage and more details on the command line option, and\n-on the ``strub`` attribute, see :title:`Using the GNU Compiler\n-Collection (GCC)`.\n+There are also :switch:`-fstrub` command-line options to control\n+default settings.  For usage and more details on the command-line\n+option, and on the ``strub`` attribute, see :title:`Using the GNU\n+Compiler Collection (GCC)`.\n \n Note that Ada secondary stacks are not scrubbed.  The restriction\n ``No_Secondary_Stack`` avoids their use, and thus their accidental\n@@ -126,18 +126,18 @@ Bar_Callable_Ptr.\n Hardened Conditionals\n =====================\n \n-GNAT can harden conditionals to protect against control flow attacks.\n+GNAT can harden conditionals to protect against control-flow attacks.\n \n This is accomplished by two complementary transformations, each\n activated by a separate command-line option.\n \n-The option *-fharden-compares* enables hardening of compares that\n-compute results stored in variables, adding verification that the\n+The option :switch:`-fharden-compares` enables hardening of compares\n+that compute results stored in variables, adding verification that the\n reversed compare yields the opposite result.\n \n-The option *-fharden-conditional-branches* enables hardening of\n-compares that guard conditional branches, adding verification of the\n-reversed compare to both execution paths.\n+The option :switch:`-fharden-conditional-branches` enables hardening\n+of compares that guard conditional branches, adding verification of\n+the reversed compare to both execution paths.\n \n These transformations are introduced late in the compilation pipeline,\n long after boolean expressions are decomposed into separate compares,\n@@ -155,8 +155,9 @@ options ensures that every compare that is neither optimized out nor\n optimized into implied conditionals will be hardened.\n \n The addition of reversed compares can be observed by enabling the dump\n-files of the corresponding passes, through command line options\n-*-fdump-tree-hardcmp* and *-fdump-tree-hardcbr*, respectively.\n+files of the corresponding passes, through command-line options\n+:switch:`-fdump-tree-hardcmp` and :switch:`-fdump-tree-hardcbr`,\n+respectively.\n \n They are separate options, however, because of the significantly\n different performance impact of the hardening transformations.\n@@ -181,18 +182,73 @@ variables of such types hold values corresponding to the selected\n representations.\n \n There are multiple strategies for where to introduce validity checking\n-(see *-gnatV* options).  Their goal is to guard against various kinds\n-of programming errors, and GNAT strives to omit checks when program\n-logic rules out an invalid value, and optimizers may further remove\n-checks found to be redundant.\n+(see :switch:`-gnatV` options).  Their goal is to guard against\n+various kinds of programming errors, and GNAT strives to omit checks\n+when program logic rules out an invalid value, and optimizers may\n+further remove checks found to be redundant.\n \n For additional hardening, the ``hardbool`` :samp:`Machine_Attribute`\n pragma can be used to annotate boolean types with representation\n clauses, so that expressions of such types used as conditions are\n-checked even when compiling with *-gnatVT*.\n+checked even when compiling with :switch:`-gnatVT`.\n \n .. code-block:: ada\n \n    pragma Machine_Attribute (HBool, \"hardbool\");\n \n-Note that *-gnatVn* will disable even ``hardbool`` testing.\n+Note that :switch:`-gnatVn` will disable even ``hardbool`` testing.\n+\n+\n+.. Control Flow Redundancy:\n+\n+Control Flow Redundancy\n+=======================\n+\n+GNAT can guard against unexpected execution flows, such as branching\n+into the middle of subprograms, as in Return Oriented Programming\n+exploits.\n+\n+In units compiled with :switch:`-fharden-control-flow-redundancy`,\n+subprograms are instrumented so that, every time they are called,\n+basic blocks take note as control flows through them, and, before\n+returning, subprograms verify that the taken notes are consistent with\n+the control-flow graph.\n+\n+Functions with too many basic blocks, or with multiple return points,\n+call a run-time function to perform the verification.  Other functions\n+perform the verification inline before returning.\n+\n+Optimizing the inlined verification can be quite time consuming, so\n+the default upper limit for the inline mode is set at 16 blocks.\n+Command-line option :switch:`--param hardcfr-max-inline-blocks=` can\n+override it.\n+\n+Even though typically sparse control-flow graphs exhibit run-time\n+verification time nearly proportional to the block count of a\n+subprogram, it may become very significant for generated subprograms\n+with thousands of blocks.  Command-line option\n+:switch:`--param hardcfr-max-blocks=` can set an upper limit for\n+instrumentation.\n+\n+For each block that is marked as visited, the mechanism checks that at\n+least one of its predecessors, and at least one of its successors, are\n+also marked as visited.  Verification is normally performed just\n+before return, but when a nonreturning call or a tail-call opportunity\n+is detected, verification is moved before that (presumed) final call.\n+\n+If an exception from a nonreturning call is handled by its caller,\n+verification at the caller may run again if another verification point\n+is reached.  The additional verifications are desirable and benign.\n+\n+Conversely, since no verification is inserted before calls that are\n+expected to return, if they never do, the caller's own\n+verification-and-return points are never reached.\n+\n+Subprogram executions that complete by raising or propagating an\n+exception also bypass verification-and-return points.  A subprogram\n+that can only complete by raising or propagating an exception may have\n+instrumentation disabled altogether.\n+\n+The instrumentation for hardening with control flow redundancy can be\n+observed in dump files generated by the command-line option\n+:switch:`-fdump-tree-hardcfr`."}, {"sha": "f7828cab93d2f0b1c4364ae07d8d97085604ef88", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 104, "deletions": 45, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf54619a8e33d2494b9f216f27d0110b8e0a4e49/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf54619a8e33d2494b9f216f27d0110b8e0a4e49/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=cf54619a8e33d2494b9f216f27d0110b8e0a4e49", "patch": "@@ -886,6 +886,7 @@ Security Hardening Features\n * Stack Scrubbing:: \n * Hardened Conditionals:: \n * Hardened Booleans:: \n+* Control Flow Redundancy:: \n \n Obsolescent Features\n \n@@ -28855,6 +28856,7 @@ are provided by GNAT.\n * Stack Scrubbing:: \n * Hardened Conditionals:: \n * Hardened Booleans:: \n+* Control Flow Redundancy:: \n \n @end menu\n \n@@ -28866,7 +28868,7 @@ are provided by GNAT.\n GNAT can generate code to zero-out hardware registers before returning\n from a subprogram.\n \n-It can be enabled with the @emph{-fzero-call-used-regs} command line\n+It can be enabled with the @code{-fzero-call-used-regs} command-line\n option, to affect all subprograms in a compilation, and with a\n @code{Machine_Attribute} pragma, to affect only specific subprograms.\n \n@@ -28881,7 +28883,7 @@ pragma Machine_Attribute (Bar, \"zero_call_used_regs\", \"all\");\n --  Before returning, Bar scrubs all call-clobbered registers.\n @end example\n \n-For usage and more details on the command line option, and on the\n+For usage and more details on the command-line option, and on the\n @code{zero_call_used_regs} attribute, see @cite{Using the GNU Compiler Collection (GCC)}.\n \n @c Stack Scrubbing:\n@@ -28913,9 +28915,9 @@ pragma Machine_Attribute (Var, \"strub\");\n --  of the stack space used by the subprogram.\n @end example\n \n-There are also @emph{-fstrub} command line options to control default\n-settings.  For usage and more details on the command line option, and\n-on the @code{strub} attribute, see @cite{Using the GNU Compiler Collection (GCC)}.\n+There are also @code{-fstrub} command-line options to control\n+default settings.  For usage and more details on the command-line\n+option, and on the @code{strub} attribute, see @cite{Using the GNU Compiler Collection (GCC)}.\n \n Note that Ada secondary stacks are not scrubbed.  The restriction\n @code{No_Secondary_Stack} avoids their use, and thus their accidental\n@@ -28974,18 +28976,18 @@ Bar_Callable_Ptr.\n @section Hardened Conditionals\n \n \n-GNAT can harden conditionals to protect against control flow attacks.\n+GNAT can harden conditionals to protect against control-flow attacks.\n \n This is accomplished by two complementary transformations, each\n activated by a separate command-line option.\n \n-The option @emph{-fharden-compares} enables hardening of compares that\n-compute results stored in variables, adding verification that the\n+The option @code{-fharden-compares} enables hardening of compares\n+that compute results stored in variables, adding verification that the\n reversed compare yields the opposite result.\n \n-The option @emph{-fharden-conditional-branches} enables hardening of\n-compares that guard conditional branches, adding verification of the\n-reversed compare to both execution paths.\n+The option @code{-fharden-conditional-branches} enables hardening\n+of compares that guard conditional branches, adding verification of\n+the reversed compare to both execution paths.\n \n These transformations are introduced late in the compilation pipeline,\n long after boolean expressions are decomposed into separate compares,\n@@ -29003,15 +29005,16 @@ options ensures that every compare that is neither optimized out nor\n optimized into implied conditionals will be hardened.\n \n The addition of reversed compares can be observed by enabling the dump\n-files of the corresponding passes, through command line options\n-@emph{-fdump-tree-hardcmp} and @emph{-fdump-tree-hardcbr}, respectively.\n+files of the corresponding passes, through command-line options\n+@code{-fdump-tree-hardcmp} and @code{-fdump-tree-hardcbr},\n+respectively.\n \n They are separate options, however, because of the significantly\n different performance impact of the hardening transformations.\n \n @c Hardened Booleans:\n \n-@node Hardened Booleans,,Hardened Conditionals,Security Hardening Features\n+@node Hardened Booleans,Control Flow Redundancy,Hardened Conditionals,Security Hardening Features\n @anchor{gnat_rm/security_hardening_features hardened-booleans}@anchor{441}\n @section Hardened Booleans\n \n@@ -29030,24 +29033,80 @@ variables of such types hold values corresponding to the selected\n representations.\n \n There are multiple strategies for where to introduce validity checking\n-(see @emph{-gnatV} options).  Their goal is to guard against various kinds\n-of programming errors, and GNAT strives to omit checks when program\n-logic rules out an invalid value, and optimizers may further remove\n-checks found to be redundant.\n+(see @code{-gnatV} options).  Their goal is to guard against\n+various kinds of programming errors, and GNAT strives to omit checks\n+when program logic rules out an invalid value, and optimizers may\n+further remove checks found to be redundant.\n \n For additional hardening, the @code{hardbool} @code{Machine_Attribute}\n pragma can be used to annotate boolean types with representation\n clauses, so that expressions of such types used as conditions are\n-checked even when compiling with @emph{-gnatVT}.\n+checked even when compiling with @code{-gnatVT}.\n \n @example\n pragma Machine_Attribute (HBool, \"hardbool\");\n @end example\n \n-Note that @emph{-gnatVn} will disable even @code{hardbool} testing.\n+Note that @code{-gnatVn} will disable even @code{hardbool} testing.\n+\n+@c Control Flow Redundancy:\n+\n+@node Control Flow Redundancy,,Hardened Booleans,Security Hardening Features\n+@anchor{gnat_rm/security_hardening_features control-flow-redundancy}@anchor{442}\n+@section Control Flow Redundancy\n+\n+\n+GNAT can guard against unexpected execution flows, such as branching\n+into the middle of subprograms, as in Return Oriented Programming\n+exploits.\n+\n+In units compiled with @code{-fharden-control-flow-redundancy},\n+subprograms are instrumented so that, every time they are called,\n+basic blocks take note as control flows through them, and, before\n+returning, subprograms verify that the taken notes are consistent with\n+the control-flow graph.\n+\n+Functions with too many basic blocks, or with multiple return points,\n+call a run-time function to perform the verification.  Other functions\n+perform the verification inline before returning.\n+\n+Optimizing the inlined verification can be quite time consuming, so\n+the default upper limit for the inline mode is set at 16 blocks.\n+Command-line option @code{--param hardcfr-max-inline-blocks=} can\n+override it.\n+\n+Even though typically sparse control-flow graphs exhibit run-time\n+verification time nearly proportional to the block count of a\n+subprogram, it may become very significant for generated subprograms\n+with thousands of blocks.  Command-line option\n+@code{--param hardcfr-max-blocks=} can set an upper limit for\n+instrumentation.\n+\n+For each block that is marked as visited, the mechanism checks that at\n+least one of its predecessors, and at least one of its successors, are\n+also marked as visited.  Verification is normally performed just\n+before return, but when a nonreturning call or a tail-call opportunity\n+is detected, verification is moved before that (presumed) final call.\n+\n+If an exception from a nonreturning call is handled by its caller,\n+verification at the caller may run again if another verification point\n+is reached.  The additional verifications are desirable and benign.\n+\n+Conversely, since no verification is inserted before calls that are\n+expected to return, if they never do, the caller\u2019s own\n+verification-and-return points are never reached.\n+\n+Subprogram executions that complete by raising or propagating an\n+exception also bypass verification-and-return points.  A subprogram\n+that can only complete by raising or propagating an exception may have\n+instrumentation disabled altogether.\n+\n+The instrumentation for hardening with control flow redundancy can be\n+observed in dump files generated by the command-line option\n+@code{-fdump-tree-hardcfr}.\n \n @node Obsolescent Features,Compatibility and Porting Guide,Security Hardening Features,Top\n-@anchor{gnat_rm/obsolescent_features doc}@anchor{442}@anchor{gnat_rm/obsolescent_features id1}@anchor{443}@anchor{gnat_rm/obsolescent_features obsolescent-features}@anchor{16}\n+@anchor{gnat_rm/obsolescent_features doc}@anchor{443}@anchor{gnat_rm/obsolescent_features id1}@anchor{444}@anchor{gnat_rm/obsolescent_features obsolescent-features}@anchor{16}\n @chapter Obsolescent Features\n \n \n@@ -29066,7 +29125,7 @@ compatibility purposes.\n @end menu\n \n @node pragma No_Run_Time,pragma Ravenscar,,Obsolescent Features\n-@anchor{gnat_rm/obsolescent_features id2}@anchor{444}@anchor{gnat_rm/obsolescent_features pragma-no-run-time}@anchor{445}\n+@anchor{gnat_rm/obsolescent_features id2}@anchor{445}@anchor{gnat_rm/obsolescent_features pragma-no-run-time}@anchor{446}\n @section pragma No_Run_Time\n \n \n@@ -29079,7 +29138,7 @@ preferred usage is to use an appropriately configured run-time that\n includes just those features that are to be made accessible.\n \n @node pragma Ravenscar,pragma Restricted_Run_Time,pragma No_Run_Time,Obsolescent Features\n-@anchor{gnat_rm/obsolescent_features id3}@anchor{446}@anchor{gnat_rm/obsolescent_features pragma-ravenscar}@anchor{447}\n+@anchor{gnat_rm/obsolescent_features id3}@anchor{447}@anchor{gnat_rm/obsolescent_features pragma-ravenscar}@anchor{448}\n @section pragma Ravenscar\n \n \n@@ -29088,7 +29147,7 @@ The pragma @code{Ravenscar} has exactly the same effect as pragma\n is part of the new Ada 2005 standard.\n \n @node pragma Restricted_Run_Time,pragma Task_Info,pragma Ravenscar,Obsolescent Features\n-@anchor{gnat_rm/obsolescent_features id4}@anchor{448}@anchor{gnat_rm/obsolescent_features pragma-restricted-run-time}@anchor{449}\n+@anchor{gnat_rm/obsolescent_features id4}@anchor{449}@anchor{gnat_rm/obsolescent_features pragma-restricted-run-time}@anchor{44a}\n @section pragma Restricted_Run_Time\n \n \n@@ -29098,7 +29157,7 @@ preferred since the Ada 2005 pragma @code{Profile} is intended for\n this kind of implementation dependent addition.\n \n @node pragma Task_Info,package System Task_Info s-tasinf ads,pragma Restricted_Run_Time,Obsolescent Features\n-@anchor{gnat_rm/obsolescent_features id5}@anchor{44a}@anchor{gnat_rm/obsolescent_features pragma-task-info}@anchor{44b}\n+@anchor{gnat_rm/obsolescent_features id5}@anchor{44b}@anchor{gnat_rm/obsolescent_features pragma-task-info}@anchor{44c}\n @section pragma Task_Info\n \n \n@@ -29124,7 +29183,7 @@ in the spec of package System.Task_Info in the runtime\n library.\n \n @node package System Task_Info s-tasinf ads,,pragma Task_Info,Obsolescent Features\n-@anchor{gnat_rm/obsolescent_features package-system-task-info}@anchor{44c}@anchor{gnat_rm/obsolescent_features package-system-task-info-s-tasinf-ads}@anchor{44d}\n+@anchor{gnat_rm/obsolescent_features package-system-task-info}@anchor{44d}@anchor{gnat_rm/obsolescent_features package-system-task-info-s-tasinf-ads}@anchor{44e}\n @section package System.Task_Info (@code{s-tasinf.ads})\n \n \n@@ -29134,7 +29193,7 @@ to support the @code{Task_Info} pragma. The predefined Ada package\n standard replacement for GNAT\u2019s @code{Task_Info} functionality.\n \n @node Compatibility and Porting Guide,GNU Free Documentation License,Obsolescent Features,Top\n-@anchor{gnat_rm/compatibility_and_porting_guide doc}@anchor{44e}@anchor{gnat_rm/compatibility_and_porting_guide compatibility-and-porting-guide}@anchor{17}@anchor{gnat_rm/compatibility_and_porting_guide id1}@anchor{44f}\n+@anchor{gnat_rm/compatibility_and_porting_guide doc}@anchor{44f}@anchor{gnat_rm/compatibility_and_porting_guide compatibility-and-porting-guide}@anchor{17}@anchor{gnat_rm/compatibility_and_porting_guide id1}@anchor{450}\n @chapter Compatibility and Porting Guide\n \n \n@@ -29156,7 +29215,7 @@ applications developed in other Ada environments.\n @end menu\n \n @node Writing Portable Fixed-Point Declarations,Compatibility with Ada 83,,Compatibility and Porting Guide\n-@anchor{gnat_rm/compatibility_and_porting_guide id2}@anchor{450}@anchor{gnat_rm/compatibility_and_porting_guide writing-portable-fixed-point-declarations}@anchor{451}\n+@anchor{gnat_rm/compatibility_and_porting_guide id2}@anchor{451}@anchor{gnat_rm/compatibility_and_porting_guide writing-portable-fixed-point-declarations}@anchor{452}\n @section Writing Portable Fixed-Point Declarations\n \n \n@@ -29278,7 +29337,7 @@ If you follow this scheme you will be guaranteed that your fixed-point\n types will be portable.\n \n @node Compatibility with Ada 83,Compatibility between Ada 95 and Ada 2005,Writing Portable Fixed-Point Declarations,Compatibility and Porting Guide\n-@anchor{gnat_rm/compatibility_and_porting_guide compatibility-with-ada-83}@anchor{452}@anchor{gnat_rm/compatibility_and_porting_guide id3}@anchor{453}\n+@anchor{gnat_rm/compatibility_and_porting_guide compatibility-with-ada-83}@anchor{453}@anchor{gnat_rm/compatibility_and_porting_guide id3}@anchor{454}\n @section Compatibility with Ada 83\n \n \n@@ -29306,7 +29365,7 @@ following subsections treat the most likely issues to be encountered.\n @end menu\n \n @node Legal Ada 83 programs that are illegal in Ada 95,More deterministic semantics,,Compatibility with Ada 83\n-@anchor{gnat_rm/compatibility_and_porting_guide id4}@anchor{454}@anchor{gnat_rm/compatibility_and_porting_guide legal-ada-83-programs-that-are-illegal-in-ada-95}@anchor{455}\n+@anchor{gnat_rm/compatibility_and_porting_guide id4}@anchor{455}@anchor{gnat_rm/compatibility_and_porting_guide legal-ada-83-programs-that-are-illegal-in-ada-95}@anchor{456}\n @subsection Legal Ada 83 programs that are illegal in Ada 95\n \n \n@@ -29406,7 +29465,7 @@ the fix is usually simply to add the @code{(<>)} to the generic declaration.\n @end itemize\n \n @node More deterministic semantics,Changed semantics,Legal Ada 83 programs that are illegal in Ada 95,Compatibility with Ada 83\n-@anchor{gnat_rm/compatibility_and_porting_guide id5}@anchor{456}@anchor{gnat_rm/compatibility_and_porting_guide more-deterministic-semantics}@anchor{457}\n+@anchor{gnat_rm/compatibility_and_porting_guide id5}@anchor{457}@anchor{gnat_rm/compatibility_and_porting_guide more-deterministic-semantics}@anchor{458}\n @subsection More deterministic semantics\n \n \n@@ -29434,7 +29493,7 @@ which open select branches are executed.\n @end itemize\n \n @node Changed semantics,Other language compatibility issues,More deterministic semantics,Compatibility with Ada 83\n-@anchor{gnat_rm/compatibility_and_porting_guide changed-semantics}@anchor{458}@anchor{gnat_rm/compatibility_and_porting_guide id6}@anchor{459}\n+@anchor{gnat_rm/compatibility_and_porting_guide changed-semantics}@anchor{459}@anchor{gnat_rm/compatibility_and_porting_guide id6}@anchor{45a}\n @subsection Changed semantics\n \n \n@@ -29476,7 +29535,7 @@ covers only the restricted range.\n @end itemize\n \n @node Other language compatibility issues,,Changed semantics,Compatibility with Ada 83\n-@anchor{gnat_rm/compatibility_and_porting_guide id7}@anchor{45a}@anchor{gnat_rm/compatibility_and_porting_guide other-language-compatibility-issues}@anchor{45b}\n+@anchor{gnat_rm/compatibility_and_porting_guide id7}@anchor{45b}@anchor{gnat_rm/compatibility_and_porting_guide other-language-compatibility-issues}@anchor{45c}\n @subsection Other language compatibility issues\n \n \n@@ -29509,7 +29568,7 @@ include @code{pragma Interface} and the floating point type attributes\n @end itemize\n \n @node Compatibility between Ada 95 and Ada 2005,Implementation-dependent characteristics,Compatibility with Ada 83,Compatibility and Porting Guide\n-@anchor{gnat_rm/compatibility_and_porting_guide compatibility-between-ada-95-and-ada-2005}@anchor{45c}@anchor{gnat_rm/compatibility_and_porting_guide id8}@anchor{45d}\n+@anchor{gnat_rm/compatibility_and_porting_guide compatibility-between-ada-95-and-ada-2005}@anchor{45d}@anchor{gnat_rm/compatibility_and_porting_guide id8}@anchor{45e}\n @section Compatibility between Ada 95 and Ada 2005\n \n \n@@ -29581,7 +29640,7 @@ can declare a function returning a value from an anonymous access type.\n @end itemize\n \n @node Implementation-dependent characteristics,Compatibility with Other Ada Systems,Compatibility between Ada 95 and Ada 2005,Compatibility and Porting Guide\n-@anchor{gnat_rm/compatibility_and_porting_guide id9}@anchor{45e}@anchor{gnat_rm/compatibility_and_porting_guide implementation-dependent-characteristics}@anchor{45f}\n+@anchor{gnat_rm/compatibility_and_porting_guide id9}@anchor{45f}@anchor{gnat_rm/compatibility_and_porting_guide implementation-dependent-characteristics}@anchor{460}\n @section Implementation-dependent characteristics\n \n \n@@ -29604,7 +29663,7 @@ transition from certain Ada 83 compilers.\n @end menu\n \n @node Implementation-defined pragmas,Implementation-defined attributes,,Implementation-dependent characteristics\n-@anchor{gnat_rm/compatibility_and_porting_guide id10}@anchor{460}@anchor{gnat_rm/compatibility_and_porting_guide implementation-defined-pragmas}@anchor{461}\n+@anchor{gnat_rm/compatibility_and_porting_guide id10}@anchor{461}@anchor{gnat_rm/compatibility_and_porting_guide implementation-defined-pragmas}@anchor{462}\n @subsection Implementation-defined pragmas\n \n \n@@ -29626,7 +29685,7 @@ avoiding compiler rejection of units that contain such pragmas; they are not\n relevant in a GNAT context and hence are not otherwise implemented.\n \n @node Implementation-defined attributes,Libraries,Implementation-defined pragmas,Implementation-dependent characteristics\n-@anchor{gnat_rm/compatibility_and_porting_guide id11}@anchor{462}@anchor{gnat_rm/compatibility_and_porting_guide implementation-defined-attributes}@anchor{463}\n+@anchor{gnat_rm/compatibility_and_porting_guide id11}@anchor{463}@anchor{gnat_rm/compatibility_and_porting_guide implementation-defined-attributes}@anchor{464}\n @subsection Implementation-defined attributes\n \n \n@@ -29640,7 +29699,7 @@ Ada 83, GNAT supplies the attributes @code{Bit}, @code{Machine_Size} and\n @code{Type_Class}.\n \n @node Libraries,Elaboration order,Implementation-defined attributes,Implementation-dependent characteristics\n-@anchor{gnat_rm/compatibility_and_porting_guide id12}@anchor{464}@anchor{gnat_rm/compatibility_and_porting_guide libraries}@anchor{465}\n+@anchor{gnat_rm/compatibility_and_porting_guide id12}@anchor{465}@anchor{gnat_rm/compatibility_and_porting_guide libraries}@anchor{466}\n @subsection Libraries\n \n \n@@ -29669,7 +29728,7 @@ be preferable to retrofit the application using modular types.\n @end itemize\n \n @node Elaboration order,Target-specific aspects,Libraries,Implementation-dependent characteristics\n-@anchor{gnat_rm/compatibility_and_porting_guide elaboration-order}@anchor{466}@anchor{gnat_rm/compatibility_and_porting_guide id13}@anchor{467}\n+@anchor{gnat_rm/compatibility_and_porting_guide elaboration-order}@anchor{467}@anchor{gnat_rm/compatibility_and_porting_guide id13}@anchor{468}\n @subsection Elaboration order\n \n \n@@ -29705,7 +29764,7 @@ pragmas either globally (as an effect of the @emph{-gnatE} switch) or locally\n @end itemize\n \n @node Target-specific aspects,,Elaboration order,Implementation-dependent characteristics\n-@anchor{gnat_rm/compatibility_and_porting_guide id14}@anchor{468}@anchor{gnat_rm/compatibility_and_porting_guide target-specific-aspects}@anchor{469}\n+@anchor{gnat_rm/compatibility_and_porting_guide id14}@anchor{469}@anchor{gnat_rm/compatibility_and_porting_guide target-specific-aspects}@anchor{46a}\n @subsection Target-specific aspects\n \n \n@@ -29718,10 +29777,10 @@ on the robustness of the original design.  Moreover, Ada 95 (and thus\n Ada 2005 and Ada 2012) are sometimes\n incompatible with typical Ada 83 compiler practices regarding implicit\n packing, the meaning of the Size attribute, and the size of access values.\n-GNAT\u2019s approach to these issues is described in @ref{46a,,Representation Clauses}.\n+GNAT\u2019s approach to these issues is described in @ref{46b,,Representation Clauses}.\n \n @node Compatibility with Other Ada Systems,Representation Clauses,Implementation-dependent characteristics,Compatibility and Porting Guide\n-@anchor{gnat_rm/compatibility_and_porting_guide compatibility-with-other-ada-systems}@anchor{46b}@anchor{gnat_rm/compatibility_and_porting_guide id15}@anchor{46c}\n+@anchor{gnat_rm/compatibility_and_porting_guide compatibility-with-other-ada-systems}@anchor{46c}@anchor{gnat_rm/compatibility_and_porting_guide id15}@anchor{46d}\n @section Compatibility with Other Ada Systems\n \n \n@@ -29764,7 +29823,7 @@ far beyond this minimal set, as described in the next section.\n @end itemize\n \n @node Representation Clauses,Compatibility with HP Ada 83,Compatibility with Other Ada Systems,Compatibility and Porting Guide\n-@anchor{gnat_rm/compatibility_and_porting_guide id16}@anchor{46d}@anchor{gnat_rm/compatibility_and_porting_guide representation-clauses}@anchor{46a}\n+@anchor{gnat_rm/compatibility_and_porting_guide id16}@anchor{46e}@anchor{gnat_rm/compatibility_and_porting_guide representation-clauses}@anchor{46b}\n @section Representation Clauses\n \n \n@@ -29857,7 +29916,7 @@ with thin pointers.\n @end itemize\n \n @node Compatibility with HP Ada 83,,Representation Clauses,Compatibility and Porting Guide\n-@anchor{gnat_rm/compatibility_and_porting_guide compatibility-with-hp-ada-83}@anchor{46e}@anchor{gnat_rm/compatibility_and_porting_guide id17}@anchor{46f}\n+@anchor{gnat_rm/compatibility_and_porting_guide compatibility-with-hp-ada-83}@anchor{46f}@anchor{gnat_rm/compatibility_and_porting_guide id17}@anchor{470}\n @section Compatibility with HP Ada 83\n \n \n@@ -29887,7 +29946,7 @@ extension of package System.\n @end itemize\n \n @node GNU Free Documentation License,Index,Compatibility and Porting Guide,Top\n-@anchor{share/gnu_free_documentation_license doc}@anchor{470}@anchor{share/gnu_free_documentation_license gnu-fdl}@anchor{1}@anchor{share/gnu_free_documentation_license gnu-free-documentation-license}@anchor{471}\n+@anchor{share/gnu_free_documentation_license doc}@anchor{471}@anchor{share/gnu_free_documentation_license gnu-fdl}@anchor{1}@anchor{share/gnu_free_documentation_license gnu-free-documentation-license}@anchor{472}\n @chapter GNU Free Documentation License\n \n "}]}