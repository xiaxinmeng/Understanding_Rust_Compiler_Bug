{"sha": "87e7b310b3ddd203c446233d1517358e3708d9d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdlN2IzMTBiM2RkZDIwM2M0NDYyMzNkMTUxNzM1OGUzNzA4ZDlkNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-03-04T18:49:23Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-03-04T18:49:23Z"}, "message": "re PR lto/47497 (SPEC CPU 2006 failed to link with LTO -fuse-linker-plugin -fwhole-program)\n\n\tPR lto/47497\n\t* lto-symtab.c (lto_cgraph_replace_node): Do not set thunk.alias.\n\t(lto_symtab_merge_cgraph_nodes_1): Update thunk.alias pointers here.\n\t* cgraph.h (cgraph_same_body_alias, cgraph_add_thunk): Add node pointers.\n\t* cgraph.c (cgraph_same_body_alias_1, cgraph_same_body_alias,\n\tcgraph_add_thunk): Add node pointers.\n\t* lto-cgraph.c (lto_output_node): Verify that thunks&aliases are\n\tassociated to right node.\n\t(input_node): Update use of cgraph_same_body_alias\n\tand cgraph_add_thunk.\n\n\t* optimize.c (maybe_clone_body): Update call of cgraph_same_body_alias\n\tand cgraph_add_thunk.\n\t* method.c (make_alias_for_thunk, use_thunk): Likewise.\n\t* mangle.c (mangle_decl): Likewise.\n\nFrom-SVN: r170682", "tree": {"sha": "a02cdefa6ac453edbd6d7e2b499c42469f9df485", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a02cdefa6ac453edbd6d7e2b499c42469f9df485"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87e7b310b3ddd203c446233d1517358e3708d9d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e7b310b3ddd203c446233d1517358e3708d9d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87e7b310b3ddd203c446233d1517358e3708d9d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e7b310b3ddd203c446233d1517358e3708d9d7/comments", "author": null, "committer": null, "parents": [{"sha": "d9c642462049486d1dbf560686723313193baf43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c642462049486d1dbf560686723313193baf43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9c642462049486d1dbf560686723313193baf43"}], "stats": {"total": 72, "additions": 52, "deletions": 20}, "files": [{"sha": "6b8dc6467ec37d63e6e276f2ed2c0beb36f4ae91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e7b310b3ddd203c446233d1517358e3708d9d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e7b310b3ddd203c446233d1517358e3708d9d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87e7b310b3ddd203c446233d1517358e3708d9d7", "patch": "@@ -1,3 +1,16 @@\n+2011-03-04  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR lto/47497\n+\t* lto-symtab.c (lto_cgraph_replace_node): Do not set thunk.alias.\n+\t(lto_symtab_merge_cgraph_nodes_1): Update thunk.alias pointers here.\n+\t* cgraph.h (cgraph_same_body_alias, cgraph_add_thunk): Add node pointers.\n+\t* cgraph.c (cgraph_same_body_alias_1, cgraph_same_body_alias,\n+\tcgraph_add_thunk): Add node pointers.\n+\t* lto-cgraph.c (lto_output_node): Verify that thunks&aliases are\n+\tassociated to right node.\n+\t(input_node): Update use of cgraph_same_body_alias\n+\tand cgraph_add_thunk.\n+\n 2011-03-04  Changpeng Fang  <changpeng.fang@amd.com>\n \n \t* config/i386/i386.opt (mprefer-avx128): New flag."}, {"sha": "64d278f94c1cf5052be7d457fdcb7f3292c55583", "filename": "gcc/cgraph.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e7b310b3ddd203c446233d1517358e3708d9d7/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e7b310b3ddd203c446233d1517358e3708d9d7/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=87e7b310b3ddd203c446233d1517358e3708d9d7", "patch": "@@ -536,16 +536,16 @@ cgraph_node (tree decl)\n   return node;\n }\n \n-/* Mark ALIAS as an alias to DECL.  */\n+/* Mark ALIAS as an alias to DECL.  DECL_NODE is cgraph node representing\n+   the function body is associated with (not neccesarily cgraph_node (DECL).  */\n \n static struct cgraph_node *\n-cgraph_same_body_alias_1 (tree alias, tree decl)\n+cgraph_same_body_alias_1 (struct cgraph_node *decl_node, tree alias, tree decl)\n {\n-  struct cgraph_node key, *alias_node, *decl_node, **slot;\n+  struct cgraph_node key, *alias_node, **slot;\n \n   gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);\n   gcc_assert (TREE_CODE (alias) == FUNCTION_DECL);\n-  decl_node = cgraph_node (decl);\n \n   key.decl = alias;\n \n@@ -575,7 +575,7 @@ cgraph_same_body_alias_1 (tree alias, tree decl)\n    and cgraph_node (ALIAS) transparently returns cgraph_node (DECL).   */\n \n struct cgraph_node *\n-cgraph_same_body_alias (tree alias, tree decl)\n+cgraph_same_body_alias (struct cgraph_node *decl_node, tree alias, tree decl)\n {\n #ifndef ASM_OUTPUT_DEF\n   /* If aliases aren't supported by the assembler, fail.  */\n@@ -584,15 +584,16 @@ cgraph_same_body_alias (tree alias, tree decl)\n \n   /*gcc_assert (!assembler_name_hash);*/\n \n-  return cgraph_same_body_alias_1 (alias, decl);\n+  return cgraph_same_body_alias_1 (decl_node, alias, decl);\n }\n \n /* Add thunk alias into callgraph.  The alias declaration is ALIAS and it\n    aliases DECL with an adjustments made into the first parameter.\n    See comments in thunk_adjust for detail on the parameters.  */\n \n struct cgraph_node *\n-cgraph_add_thunk (tree alias, tree decl, bool this_adjusting,\n+cgraph_add_thunk (struct cgraph_node *decl_node, tree alias, tree decl,\n+\t\t  bool this_adjusting,\n \t\t  HOST_WIDE_INT fixed_offset, HOST_WIDE_INT virtual_value,\n \t\t  tree virtual_offset,\n \t\t  tree real_alias)\n@@ -606,7 +607,7 @@ cgraph_add_thunk (tree alias, tree decl, bool this_adjusting,\n       cgraph_remove_node (node);\n     }\n   \n-  node = cgraph_same_body_alias_1 (alias, decl);\n+  node = cgraph_same_body_alias_1 (decl_node, alias, decl);\n   gcc_assert (node);\n   gcc_checking_assert (!virtual_offset\n \t\t       || tree_int_cst_equal (virtual_offset,\n@@ -2722,7 +2723,7 @@ cgraph_propagate_frequency (struct cgraph_node *node)\n \tcase NODE_FREQUENCY_EXECUTED_ONCE:\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    fprintf (dump_file, \"  Called by %s that is executed once\\n\",\n-\t\t     cgraph_node_name (node));\n+\t\t     cgraph_node_name (edge->caller));\n \t  maybe_unlikely_executed = false;\n \t  if (edge->loop_nest)\n \t    {\n@@ -2735,7 +2736,7 @@ cgraph_propagate_frequency (struct cgraph_node *node)\n \tcase NODE_FREQUENCY_NORMAL:\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    fprintf (dump_file, \"  Called by %s that is normal or hot\\n\",\n-\t\t     cgraph_node_name (node));\n+\t\t     cgraph_node_name (edge->caller));\n \t  maybe_unlikely_executed = false;\n \t  maybe_executed_once = false;\n \t  break;"}, {"sha": "e2d2f50ca3e9e661ea091f83bce123fbf0a5af45", "filename": "gcc/cgraph.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e7b310b3ddd203c446233d1517358e3708d9d7/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e7b310b3ddd203c446233d1517358e3708d9d7/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=87e7b310b3ddd203c446233d1517358e3708d9d7", "patch": "@@ -559,8 +559,8 @@ struct cgraph_indirect_call_info *cgraph_allocate_init_indirect_info (void);\n struct cgraph_node * cgraph_get_node (const_tree);\n struct cgraph_node * cgraph_get_node_or_alias (const_tree);\n struct cgraph_node * cgraph_node (tree);\n-struct cgraph_node * cgraph_same_body_alias (tree, tree);\n-struct cgraph_node * cgraph_add_thunk (tree, tree, bool, HOST_WIDE_INT,\n+struct cgraph_node * cgraph_same_body_alias (struct cgraph_node *, tree, tree);\n+struct cgraph_node * cgraph_add_thunk (struct cgraph_node *, tree, tree, bool, HOST_WIDE_INT,\n \t\t\t\t       HOST_WIDE_INT, tree, tree);\n void cgraph_remove_same_body_alias (struct cgraph_node *);\n struct cgraph_node *cgraph_node_for_asm (tree);"}, {"sha": "dba9f10ecf66bc9b30775add857135ef81b6014c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e7b310b3ddd203c446233d1517358e3708d9d7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e7b310b3ddd203c446233d1517358e3708d9d7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=87e7b310b3ddd203c446233d1517358e3708d9d7", "patch": "@@ -1,3 +1,11 @@\n+2011-03-04  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR lto/47497\n+\t* optimize.c (maybe_clone_body): Update call of cgraph_same_body_alias\n+\tand cgraph_add_thunk.\n+\t* method.c (make_alias_for_thunk, use_thunk): Likewise.\n+\t* mangle.c (mangle_decl): Likewise.\n+\n 2011-03-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/47971"}, {"sha": "1984094ba4a097d1ef6a0949a408af1beba43025", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e7b310b3ddd203c446233d1517358e3708d9d7/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e7b310b3ddd203c446233d1517358e3708d9d7/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=87e7b310b3ddd203c446233d1517358e3708d9d7", "patch": "@@ -3163,7 +3163,7 @@ mangle_decl (const tree decl)\n       if (vague_linkage_p (decl))\n \tDECL_WEAK (alias) = 1;\n       if (TREE_CODE (decl) == FUNCTION_DECL)\n-\tcgraph_same_body_alias (alias, decl);\n+\tcgraph_same_body_alias (cgraph_node (decl), alias, decl);\n       else\n \tvarpool_extra_name_alias (alias, decl);\n #endif"}, {"sha": "a4c2dd1b41573d46187868a419ee781e8fbfa468", "filename": "gcc/cp/method.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e7b310b3ddd203c446233d1517358e3708d9d7/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e7b310b3ddd203c446233d1517358e3708d9d7/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=87e7b310b3ddd203c446233d1517358e3708d9d7", "patch": "@@ -259,7 +259,8 @@ make_alias_for_thunk (tree function)\n \n   if (!flag_syntax_only)\n     {\n-      struct cgraph_node *aliasn = cgraph_same_body_alias (alias, function);\n+      struct cgraph_node *aliasn = cgraph_same_body_alias (cgraph_node (function),\n+\t\t\t\t\t\t\t   alias, function);\n       DECL_ASSEMBLER_NAME (function);\n       gcc_assert (aliasn != NULL);\n     }\n@@ -376,7 +377,7 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n   a = nreverse (t);\n   DECL_ARGUMENTS (thunk_fndecl) = a;\n   TREE_ASM_WRITTEN (thunk_fndecl) = 1;\n-  cgraph_add_thunk (thunk_fndecl, function,\n+  cgraph_add_thunk (cgraph_node (function), thunk_fndecl, function,\n \t\t    this_adjusting, fixed_offset, virtual_value,\n \t\t    virtual_offset, alias);\n "}, {"sha": "2ce9838a74e80f593afd20c77d9b06b4a6e69383", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e7b310b3ddd203c446233d1517358e3708d9d7/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e7b310b3ddd203c446233d1517358e3708d9d7/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=87e7b310b3ddd203c446233d1517358e3708d9d7", "patch": "@@ -309,7 +309,7 @@ maybe_clone_body (tree fn)\n \t  && (!DECL_ONE_ONLY (fns[0])\n \t      || (HAVE_COMDAT_GROUP\n \t\t  && DECL_WEAK (fns[0])))\n-\t  && cgraph_same_body_alias (clone, fns[0]))\n+\t  && cgraph_same_body_alias (cgraph_node (fns[0]), clone, fns[0]))\n \t{\n \t  alias = true;\n \t  if (DECL_ONE_ONLY (fns[0]))"}, {"sha": "ae49ae6543f27766a640b8c2a6c5892ded7973eb", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e7b310b3ddd203c446233d1517358e3708d9d7/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e7b310b3ddd203c446233d1517358e3708d9d7/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=87e7b310b3ddd203c446233d1517358e3708d9d7", "patch": "@@ -551,6 +551,7 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n \t      lto_output_fn_decl_index (ob->decl_state, ob->main_stream,\n \t\t\t\t\talias->thunk.alias);\n \t    }\n+\t  gcc_assert (cgraph_get_node (alias->thunk.alias) == node);\n \t  lto_output_uleb128_stream (ob->main_stream, alias->resolution);\n \t  alias = alias->previous;\n \t}\n@@ -1094,7 +1095,7 @@ input_node (struct lto_file_decl_data *file_data,\n \t  tree real_alias;\n \t  decl_index = lto_input_uleb128 (ib);\n \t  real_alias = lto_file_decl_data_get_fn_decl (file_data, decl_index);\n-\t  alias = cgraph_same_body_alias (alias_decl, real_alias);\n+\t  alias = cgraph_same_body_alias (node, alias_decl, real_alias);\n \t}\n       else\n         {\n@@ -1103,12 +1104,13 @@ input_node (struct lto_file_decl_data *file_data,\n \t  tree real_alias;\n \t  decl_index = lto_input_uleb128 (ib);\n \t  real_alias = lto_file_decl_data_get_fn_decl (file_data, decl_index);\n-\t  alias = cgraph_add_thunk (alias_decl, fn_decl, type & 2, fixed_offset,\n+\t  alias = cgraph_add_thunk (node, alias_decl, fn_decl, type & 2, fixed_offset,\n \t\t\t\t    virtual_value,\n \t\t\t\t    (type & 4) ? size_int (virtual_value) : NULL_TREE,\n \t\t\t\t    real_alias);\n \t}\n-       alias->resolution = (enum ld_plugin_symbol_resolution)lto_input_uleb128 (ib);\n+      gcc_assert (alias);\n+      alias->resolution = (enum ld_plugin_symbol_resolution)lto_input_uleb128 (ib);\n     }\n   return node;\n }"}, {"sha": "b02aabab14d2d8bbb94b558b15707fdda37b294a", "filename": "gcc/lto-symtab.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e7b310b3ddd203c446233d1517358e3708d9d7/gcc%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e7b310b3ddd203c446233d1517358e3708d9d7/gcc%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-symtab.c?ref=87e7b310b3ddd203c446233d1517358e3708d9d7", "patch": "@@ -273,7 +273,6 @@ lto_cgraph_replace_node (struct cgraph_node *node,\n \t  last = alias;\n \t  gcc_assert (alias->same_body_alias);\n \t  alias->same_body = prevailing_node;\n-\t  alias->thunk.alias = prevailing_node->decl;\n \t}\n       last->next = prevailing_node->same_body;\n       /* Node with aliases is prevailed by alias.\n@@ -828,8 +827,16 @@ lto_symtab_merge_cgraph_nodes_1 (void **slot, void *data ATTRIBUTE_UNUSED)\n void\n lto_symtab_merge_cgraph_nodes (void)\n {\n+  struct cgraph_node *node, *alias, *next;\n   lto_symtab_maybe_init_hash_table ();\n   htab_traverse (lto_symtab_identifiers, lto_symtab_merge_cgraph_nodes_1, NULL);\n+\n+  for (node = cgraph_nodes; node; node = node->next)\n+    for (alias = node->same_body; alias; alias = next)\n+      {\n+\tnext = alias->next;\n+\talias->thunk.alias = lto_symtab_prevailing_decl (alias->thunk.alias);\n+      }\n }\n \n /* Given the decl DECL, return the prevailing decl with the same name. */"}]}