{"sha": "60adb6417ce8f30013bbc760a0cf914586830aaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBhZGI2NDE3Y2U4ZjMwMDEzYmJjNzYwYTBjZjkxNDU4NjgzMGFhZg==", "commit": {"author": {"name": "Ozkan Sezer", "email": "sezeroz@gmail.com", "date": "2009-09-08T19:16:18Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2009-09-08T19:16:18Z"}, "message": "large-size-array-2.c: Fix target requirement.\n\n2009-09-08  Ozkan Sezer  <sezeroz@gmail.com>\n\n        * gcc.dg/large-size-array-2.c: Fix target requirement.\n        * gcc.dg/large-size-array-4.c: Likewise.\n        * gcc.dg/c90-const-expr-2.c: Define ZERO as 0LL for _WIN64.\n        * gcc.dg/c99-const-expr-2.c: Likewise.\n        * gcc.dg/c90-const-expr-6.c: Typedef ptrdiff_t with __extension__.\n        * gcc.dg/c90-const-expr-9.c: Typedef size_t with __extension__.\n        * gcc.dg/c90-const-expr-10.c: Likewise.\n        * gcc.dg/torture/pr39074.c: Use intptr_t typedef'ed as __PTRDIFF_TYPE__\n        instead of long.\n        * gcc.dg/tree-ssa/pr33920.c: Likewise.\n        * gcc.dg/vect/pr33846.c: Likewise.\n        * gcc.dg/vect/pr33833.c: Use uintptr_t, typedef'ed as unsigned\n        __PTRDIFF_TYPE__, instead of unsigned long.\n        * gcc.dg/vect/O1-pr33854.c: Use __SIZE_TYPE__ instead of unsigned long.\n\nFrom-SVN: r151533", "tree": {"sha": "925bd45c1a9c478c06145731edab068d9af90026", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/925bd45c1a9c478c06145731edab068d9af90026"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60adb6417ce8f30013bbc760a0cf914586830aaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60adb6417ce8f30013bbc760a0cf914586830aaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60adb6417ce8f30013bbc760a0cf914586830aaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60adb6417ce8f30013bbc760a0cf914586830aaf/comments", "author": {"login": "sezero", "id": 4222725, "node_id": "MDQ6VXNlcjQyMjI3MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/4222725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sezero", "html_url": "https://github.com/sezero", "followers_url": "https://api.github.com/users/sezero/followers", "following_url": "https://api.github.com/users/sezero/following{/other_user}", "gists_url": "https://api.github.com/users/sezero/gists{/gist_id}", "starred_url": "https://api.github.com/users/sezero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sezero/subscriptions", "organizations_url": "https://api.github.com/users/sezero/orgs", "repos_url": "https://api.github.com/users/sezero/repos", "events_url": "https://api.github.com/users/sezero/events{/privacy}", "received_events_url": "https://api.github.com/users/sezero/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "35ecd408840a3c34d580fcbc50d12561335c9f3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35ecd408840a3c34d580fcbc50d12561335c9f3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35ecd408840a3c34d580fcbc50d12561335c9f3d"}], "stats": {"total": 78, "additions": 57, "deletions": 21}, "files": [{"sha": "f26540669a11142730b9b1d7b0b8917551472cf8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=60adb6417ce8f30013bbc760a0cf914586830aaf", "patch": "@@ -1,3 +1,20 @@\n+2009-09-08  Ozkan Sezer  <sezeroz@gmail.com>\n+\n+\t* gcc.dg/large-size-array-2.c: Fix target requirement.\n+\t* gcc.dg/large-size-array-4.c: Likewise.\n+\t* gcc.dg/c90-const-expr-2.c: Define ZERO as 0LL for _WIN64.\n+\t* gcc.dg/c99-const-expr-2.c: Likewise.\n+\t* gcc.dg/c90-const-expr-6.c: Typedef ptrdiff_t with __extension__.\n+\t* gcc.dg/c90-const-expr-9.c: Typedef size_t with __extension__.\n+\t* gcc.dg/c90-const-expr-10.c: Likewise.\n+\t* gcc.dg/torture/pr39074.c: Use intptr_t typedef'ed as __PTRDIFF_TYPE__\n+\tinstead of long.\n+\t* gcc.dg/tree-ssa/pr33920.c: Likewise.\n+\t* gcc.dg/vect/pr33846.c: Likewise.\n+\t* gcc.dg/vect/pr33833.c: Use uintptr_t, typedef'ed as unsigned\n+\t__PTRDIFF_TYPE__, instead of unsigned long.\n+\t* gcc.dg/vect/O1-pr33854.c: Use __SIZE_TYPE__ instead of unsigned long.\n+\n 2009-09-08  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/41229"}, {"sha": "bad388c90b15f4f7fb5e38521d2120b529fc1129", "filename": "gcc/testsuite/gcc.dg/c90-const-expr-10.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-10.c?ref=60adb6417ce8f30013bbc760a0cf914586830aaf", "patch": "@@ -5,24 +5,26 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n \n-void *p = (__SIZE_TYPE__)(void *)0; /* { dg-error \"without a cast\" } */\n-struct s { void *a; } q = { (__SIZE_TYPE__)(void *)0 }; /* { dg-error \"without a cast\" } */\n+__extension__ typedef __SIZE_TYPE__ size_t;\n+\n+void *p = (size_t)(void *)0; /* { dg-error \"without a cast\" } */\n+struct s { void *a; } q = { (size_t)(void *)0 }; /* { dg-error \"without a cast\" } */\n void *\n f (void)\n {\n   void *r;\n-  r = (__SIZE_TYPE__)(void *)0; /* { dg-error \"without a cast\" } */\n-  return (__SIZE_TYPE__)(void *)0; /* { dg-error \"without a cast\" } */\n+  r = (size_t)(void *)0; /* { dg-error \"without a cast\" } */\n+  return (size_t)(void *)0; /* { dg-error \"without a cast\" } */\n }\n void g (void *); /* { dg-message \"but argument is of type\" } */\n void\n h (void)\n {\n-  g ((__SIZE_TYPE__)(void *)0); /* { dg-error \"without a cast\" } */\n+  g ((size_t)(void *)0); /* { dg-error \"without a cast\" } */\n }\n void g2 (int, void *); /* { dg-message \"but argument is of type\" } */\n void\n h2 (void)\n {\n-  g2 (0, (__SIZE_TYPE__)(void *)0); /* { dg-error \"without a cast\" } */\n+  g2 (0, (size_t)(void *)0); /* { dg-error \"without a cast\" } */\n }"}, {"sha": "ee57d5503725a678b16c7e65315fb1d79bc92fc3", "filename": "gcc/testsuite/gcc.dg/c90-const-expr-2.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-2.c?ref=60adb6417ce8f30013bbc760a0cf914586830aaf", "patch": "@@ -14,8 +14,10 @@ int *a;\n int b;\n long *c;\n \n-#if defined(_LP64) || defined(_WIN64)\n+#if defined(_LP64)\n #define ZERO 0L\n+#elif defined(_WIN64)\n+#define ZERO 0LL\n #else\n #define ZERO 0\n #endif"}, {"sha": "c432cca63434f0ab7964199734645fadac208906", "filename": "gcc/testsuite/gcc.dg/c90-const-expr-6.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-6.c?ref=60adb6417ce8f30013bbc760a0cf914586830aaf", "patch": "@@ -4,11 +4,13 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n \n+__extension__ typedef __PTRDIFF_TYPE__ ptrdiff_t;\n+\n /* PR 29116.  */\n int n = 0, p[n * 0 + 1]; /* { dg-error \"variabl|can't be evaluated\" } */\n \n /* PR 31871.  */\n-extern int c[1 + ((__PTRDIFF_TYPE__) (void *) 0)]; /* { dg-error \"variab|can't be evaluated\" } */\n+extern int c[1 + ((ptrdiff_t) (void *) 0)]; /* { dg-error \"variab|can't be evaluated\" } */\n \n /* Implicit conversions from floating-point constants are not OK,\n    although explicit ones are.  */\n@@ -32,7 +34,7 @@ struct s {\n };\n \n enum e {\n-  E = (1 + ((__PTRDIFF_TYPE__) (void *) 0)), /* { dg-error \"constant\" } */\n+  E = (1 + ((ptrdiff_t) (void *) 0)), /* { dg-error \"constant\" } */\n   E2 = 0\n };\n \n@@ -44,7 +46,7 @@ enum f {\n void\n f (int a)\n {\n-  int v[1 + ((__PTRDIFF_TYPE__) (void *) 0)]; /* { dg-error \"variab|can't be evaluated\" } */\n+  int v[1 + ((ptrdiff_t) (void *) 0)]; /* { dg-error \"variab|can't be evaluated\" } */\n   switch (a)\n     {\n     case (n * 0 + 1): /* { dg-error \"constant\" } */"}, {"sha": "a06cdd951b2c295205ab418d914af3fc0607a218", "filename": "gcc/testsuite/gcc.dg/c90-const-expr-9.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-9.c?ref=60adb6417ce8f30013bbc760a0cf914586830aaf", "patch": "@@ -14,7 +14,9 @@ struct t {\n   int b[2];\n };\n \n-#define old_offsetof(TYPE, MEMBER) ((__SIZE_TYPE__) &((TYPE *)0)->MEMBER)\n+__extension__ typedef __SIZE_TYPE__ size_t;\n+\n+#define old_offsetof(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)\n \n enum e {\n   E1 = old_offsetof (struct s, a), /* { dg-error \"constant\" } */"}, {"sha": "a78e412d35ad98507a27cd56146f82fafb44b603", "filename": "gcc/testsuite/gcc.dg/c99-const-expr-2.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-2.c?ref=60adb6417ce8f30013bbc760a0cf914586830aaf", "patch": "@@ -14,8 +14,10 @@ int *a;\n int b;\n long *c;\n \n-#if defined(_LP64) || defined(_WIN64)\n+#if defined(_LP64)\n #define ZERO 0L\n+#elif defined(_WIN64)\n+#define ZERO 0LL\n #else\n #define ZERO 0\n #endif"}, {"sha": "bff2f8250fb3b5caa0f6f690329ab68e5a886d65", "filename": "gcc/testsuite/gcc.dg/large-size-array-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Flarge-size-array-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Flarge-size-array-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flarge-size-array-2.c?ref=60adb6417ce8f30013bbc760a0cf914586830aaf", "patch": "@@ -4,4 +4,4 @@\n static char * name[] = {\n     [0x80000000]  = \"bar\"\n   };\n-/* { dg-error \"too large\" \"\" { target { { ! lp64 } || x86_64-*-mingw* } }  6 } */\n+/* { dg-error \"too large\" \"\" { target { { ! lp64 } && { ! llp64 } } }  6 } */"}, {"sha": "f6099b9152b6e9d9d65ca705fbd144976265c501", "filename": "gcc/testsuite/gcc.dg/large-size-array-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Flarge-size-array-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Flarge-size-array-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flarge-size-array-4.c?ref=60adb6417ce8f30013bbc760a0cf914586830aaf", "patch": "@@ -4,4 +4,4 @@\n static char * name[] = {\n     [0x80000000]  = \"bar\"\n   };\n-/* { dg-error \"too large\" \"\" { target { { ! lp64 } || x86_64-*-mingw* } }  6 } */\n+/* { dg-error \"too large\" \"\" { target { { ! lp64 } && { ! llp64 } } }  6 } */"}, {"sha": "fe35cd908ae1a98724f0b4c3a80cc1c4efd2a887", "filename": "gcc/testsuite/gcc.dg/torture/pr39074.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39074.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39074.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39074.c?ref=60adb6417ce8f30013bbc760a0cf914586830aaf", "patch": "@@ -2,9 +2,11 @@\n /* { dg-options \"-fdump-tree-alias\" } */\n /* { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n \n+typedef __PTRDIFF_TYPE__ intptr_t;\n+\n int i;\n void __attribute__((noinline))\n-foo(long b, long q)\n+foo(long b, intptr_t q)\n {\n   int *y;\n   int **a = &y, **x;"}, {"sha": "0b91dae38403551a44c87b7e96149fa85c0fc128", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr33920.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33920.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33920.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33920.c?ref=60adb6417ce8f30013bbc760a0cf914586830aaf", "patch": "@@ -2,6 +2,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3\" } */\n \n+typedef __PTRDIFF_TYPE__ intptr_t;\n typedef union lispunion *object;\n struct character\n {\n@@ -22,14 +23,14 @@ void init_code ()\n   object V659;\n   object _x, _y;\n   object V643;\n-  long V648;\n+  intptr_t V648;\n   unsigned char V653;\n   object V651;\n   object V654;\n   object V658;\n \n T1240:\n-if (V648 >= (long)V651) /* { dg-warning \"cast from pointer to integer of different size\" \"\" { target { ! int32plus } } } */\n+if (V648 >= (intptr_t)V651) /* { dg-warning \"cast from pointer to integer of different size\" \"\" { target { ! int32plus } } } */\n     goto T1243;\n   V653 = ((char *) V654->v.v_self)[V648];\n   V659 = (object) V654 + V653;\n@@ -41,7 +42,7 @@ if (V648 >= (long)V651) /* { dg-warning \"cast from pointer to integer of differe\n     goto T1249;\n   goto T1224;\n T1249:\n- V648 = (long) V648 + 1;\n+  V648 = (intptr_t) V648 + 1;\n   goto T1240;\n T1243:\n   V643 = (object) & Cnil_body;"}, {"sha": "4d4171fc449daa98aa405ff042d5af746be66823", "filename": "gcc/testsuite/gcc.dg/vect/O1-pr33854.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FO1-pr33854.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FO1-pr33854.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FO1-pr33854.c?ref=60adb6417ce8f30013bbc760a0cf914586830aaf", "patch": "@@ -1,7 +1,7 @@\n /* Testcase by Martin Michlmayr <tbm@cyrius.com> */\n /* { dg-do compile } */\n \n-extern void *malloc (long unsigned int __size);\n+extern void *malloc (__SIZE_TYPE__ __size);\n typedef struct VMatrix_ VMatrix;\n struct VMatrix_\n {"}, {"sha": "ebdfcb1f81869e07a945182d7be2ddadc60e37b7", "filename": "gcc/testsuite/gcc.dg/vect/pr33833.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33833.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33833.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33833.c?ref=60adb6417ce8f30013bbc760a0cf914586830aaf", "patch": "@@ -1,6 +1,10 @@\n /* Testcase by Martin Michlmayr <tbm@cyrius.com> */\n /* { dg-do compile } */\n \n+#define signed\n+typedef unsigned __PTRDIFF_TYPE__ uintptr_t;\n+#undef signed\n+\n struct list_head\n {\n   struct list_head *prev;\n@@ -14,7 +18,7 @@ struct rq\n   struct prio_array *active, arrays[2];\n } per_cpu__runqueues;\n \n-void sched_init (unsigned long __ptr)\n+void sched_init (uintptr_t __ptr)\n {\n   int j, k;\n   struct prio_array *array;"}, {"sha": "3f421c9b75de5310d997a03184315886b0829f6a", "filename": "gcc/testsuite/gcc.dg/vect/pr33846.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33846.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60adb6417ce8f30013bbc760a0cf914586830aaf/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33846.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr33846.c?ref=60adb6417ce8f30013bbc760a0cf914586830aaf", "patch": "@@ -7,7 +7,9 @@ int clamp_val (int i)\n   return ~i >> 31;\n }\n \n-void _mix_some_samples (long buf, int *mix_buffer, int mix_size)\n+typedef __PTRDIFF_TYPE__ intptr_t;\n+\n+void _mix_some_samples (intptr_t buf, int *mix_buffer, int mix_size)\n {\n   int i;\n   signed int *p = mix_buffer;"}]}