{"sha": "d9fbc86e446fd574db0d79c3af8d0bd2b1cdc820", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlmYmM4NmU0NDZmZDU3NGRiMGQ3OWMzYWY4ZDBiZDJiMWNkYzgyMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-08-12T11:29:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-08-12T11:29:01Z"}, "message": "tree-vrp.c (extract_range_from_unary_expr_1): Implement -X as 0 - X.\n\n2011-08-12  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-vrp.c (extract_range_from_unary_expr_1): Implement\n\t-X as 0 - X.\n\nFrom-SVN: r177693", "tree": {"sha": "4beb9de21a1a0f7c219d6dae43e294670ad8b078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4beb9de21a1a0f7c219d6dae43e294670ad8b078"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9fbc86e446fd574db0d79c3af8d0bd2b1cdc820", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9fbc86e446fd574db0d79c3af8d0bd2b1cdc820", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9fbc86e446fd574db0d79c3af8d0bd2b1cdc820", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9fbc86e446fd574db0d79c3af8d0bd2b1cdc820/comments", "author": null, "committer": null, "parents": [{"sha": "6aeb8c9919b5b816a32fcf8400b85d9b91752059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aeb8c9919b5b816a32fcf8400b85d9b91752059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aeb8c9919b5b816a32fcf8400b85d9b91752059"}], "stats": {"total": 74, "additions": 13, "deletions": 61}, "files": [{"sha": "e708c8ea9f57a452dec0bc1a2a476a1061c7544f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9fbc86e446fd574db0d79c3af8d0bd2b1cdc820/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9fbc86e446fd574db0d79c3af8d0bd2b1cdc820/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9fbc86e446fd574db0d79c3af8d0bd2b1cdc820", "patch": "@@ -1,4 +1,9 @@\n-2011-08-02  Romain Geissler  <romain.geissler@gmail.com>\n+2011-08-12  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-vrp.c (extract_range_from_unary_expr_1): Implement\n+\t-X as 0 - X.\n+\n+2011-08-12  Romain Geissler  <romain.geissler@gmail.com>\n \n \t* Makefile.in (PLUGIN_HEADERS): Add C_TREE_H.\n "}, {"sha": "df7a9a251caa3fcd9ababdc1989bd21963b457ac", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 7, "deletions": 60, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9fbc86e446fd574db0d79c3af8d0bd2b1cdc820/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9fbc86e446fd574db0d79c3af8d0bd2b1cdc820/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=d9fbc86e446fd574db0d79c3af8d0bd2b1cdc820", "patch": "@@ -2946,67 +2946,14 @@ extract_range_from_unary_expr_1 (value_range_t *vr,\n \n   /* Apply the operation to each end of the range and see what we end\n      up with.  */\n-  if (code == NEGATE_EXPR\n-      && !TYPE_UNSIGNED (type))\n-    {\n-      /* NEGATE_EXPR flips the range around.  We need to treat\n-\t TYPE_MIN_VALUE specially.  */\n-      if (is_positive_overflow_infinity (vr0.max))\n-\tmin = negative_overflow_infinity (type);\n-      else if (is_negative_overflow_infinity (vr0.max))\n-\tmin = positive_overflow_infinity (type);\n-      else if (!vrp_val_is_min (vr0.max))\n-\tmin = fold_unary_to_constant (code, type, vr0.max);\n-      else if (needs_overflow_infinity (type))\n-\t{\n-\t  if (supports_overflow_infinity (type)\n-\t      && !is_overflow_infinity (vr0.min)\n-\t      && !vrp_val_is_min (vr0.min))\n-\t    min = positive_overflow_infinity (type);\n-\t  else\n-\t    {\n-\t      set_value_range_to_varying (vr);\n-\t      return;\n-\t    }\n-\t}\n-      else\n-\tmin = TYPE_MIN_VALUE (type);\n-\n-      if (is_positive_overflow_infinity (vr0.min))\n-\tmax = negative_overflow_infinity (type);\n-      else if (is_negative_overflow_infinity (vr0.min))\n-\tmax = positive_overflow_infinity (type);\n-      else if (!vrp_val_is_min (vr0.min))\n-\tmax = fold_unary_to_constant (code, type, vr0.min);\n-      else if (needs_overflow_infinity (type))\n-\t{\n-\t  if (supports_overflow_infinity (type))\n-\t    max = positive_overflow_infinity (type);\n-\t  else\n-\t    {\n-\t      set_value_range_to_varying (vr);\n-\t      return;\n-\t    }\n-\t}\n-      else\n-\tmax = TYPE_MIN_VALUE (type);\n-    }\n-  else if (code == NEGATE_EXPR\n-\t   && TYPE_UNSIGNED (type))\n+  if (code == NEGATE_EXPR)\n     {\n-      if (!range_includes_zero_p (&vr0))\n-\t{\n-\t  max = fold_unary_to_constant (code, type, vr0.min);\n-\t  min = fold_unary_to_constant (code, type, vr0.max);\n-\t}\n-      else\n-\t{\n-\t  if (range_is_null (&vr0))\n-\t    set_value_range_to_null (vr, type);\n-\t  else\n-\t    set_value_range_to_varying (vr);\n-\t  return;\n-\t}\n+      /* -X is simply 0 - X, so re-use existing code that also handles\n+         anti-ranges fine.  */\n+      value_range_t zero = { VR_UNDEFINED, NULL_TREE, NULL_TREE, NULL };\n+      set_value_range_to_value (&zero, build_int_cst (type, 0), NULL);\n+      extract_range_from_binary_expr_1 (vr, MINUS_EXPR, type, &zero, &vr0);\n+      return;\n     }\n   else if (code == ABS_EXPR\n            && !TYPE_UNSIGNED (type))"}]}