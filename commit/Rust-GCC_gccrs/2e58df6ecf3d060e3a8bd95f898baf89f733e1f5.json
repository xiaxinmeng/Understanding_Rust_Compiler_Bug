{"sha": "2e58df6ecf3d060e3a8bd95f898baf89f733e1f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU1OGRmNmVjZjNkMDYwZTNhOGJkOTVmODk4YmFmODlmNzMzZTFmNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-02-15T15:24:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-02-15T15:24:19Z"}, "message": "re PR tree-optimization/35164 (Unable to coalesce ab SSA_NAMEs)\n\n2008-02-15  Richard Guenther  <rguenther@suse.de>\n\tZdenek Dvorak  <ook@ucw.cz>\n\n\tPR tree-optimization/35164\n\t* tree-flow.h (stmt_references_abnormal_ssa_name): Declare.\n\t* tree-dfa.c (stmt_references_abnormal_ssa_name): New function.\n\t* tree-ssa-forwprop.c (tree_ssa_forward_propagate_single_use_vars):\n\tOnly propagate addresses which do not have abnormal SSA_NAMEs\n\tin their operands.\n\n\t* g++.dg/torture/pr35164-1.C: New testcase.\n\t* g++.dg/torture/pr35164-2.C: Likewise.\n\nCo-Authored-By: Zdenek Dvorak <ook@ucw.cz>\n\nFrom-SVN: r132345", "tree": {"sha": "84bac3426747a9ff72e762dc1ff06bfc9e4f61f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84bac3426747a9ff72e762dc1ff06bfc9e4f61f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e58df6ecf3d060e3a8bd95f898baf89f733e1f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e58df6ecf3d060e3a8bd95f898baf89f733e1f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e58df6ecf3d060e3a8bd95f898baf89f733e1f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e58df6ecf3d060e3a8bd95f898baf89f733e1f5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "508515b0277f2adadc610acb2dd14f769ba992ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/508515b0277f2adadc610acb2dd14f769ba992ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/508515b0277f2adadc610acb2dd14f769ba992ff"}], "stats": {"total": 135, "additions": 134, "deletions": 1}, "files": [{"sha": "b3075a692cc948dafdfca438bc996ac95b80e696", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e58df6ecf3d060e3a8bd95f898baf89f733e1f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e58df6ecf3d060e3a8bd95f898baf89f733e1f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e58df6ecf3d060e3a8bd95f898baf89f733e1f5", "patch": "@@ -1,3 +1,13 @@\n+2008-02-15  Richard Guenther  <rguenther@suse.de>\n+\tZdenek Dvorak  <ook@ucw.cz>\n+\n+\tPR tree-optimization/35164\n+\t* tree-flow.h (stmt_references_abnormal_ssa_name): Declare.\n+\t* tree-dfa.c (stmt_references_abnormal_ssa_name): New function.\n+\t* tree-ssa-forwprop.c (tree_ssa_forward_propagate_single_use_vars):\n+\tOnly propagate addresses which do not have abnormal SSA_NAMEs\n+\tin their operands.\n+\n 2008-02-15  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR target/35088"}, {"sha": "f5ec2dece8653972aa99df71756c9d647efe7e7f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e58df6ecf3d060e3a8bd95f898baf89f733e1f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e58df6ecf3d060e3a8bd95f898baf89f733e1f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e58df6ecf3d060e3a8bd95f898baf89f733e1f5", "patch": "@@ -1,3 +1,10 @@\n+2008-02-15  Richard Guenther  <rguenther@suse.de>\n+\tZdenek Dvorak  <ook@ucw.cz>\n+\n+\tPR tree-optimization/35164\n+\t* g++.dg/torture/pr35164-1.C: New testcase.\n+\t* g++.dg/torture/pr35164-2.C: Likewise.\n+\n 2008-02-15  Dominique d'Humieres  <dominiq@lps.ens.fr>\n \n \tPR testsuite/35119"}, {"sha": "1704c222656b5e1159eaf0382157e8a112ddd735", "filename": "gcc/testsuite/g++.dg/torture/pr35164-1.C", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e58df6ecf3d060e3a8bd95f898baf89f733e1f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr35164-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e58df6ecf3d060e3a8bd95f898baf89f733e1f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr35164-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr35164-1.C?ref=2e58df6ecf3d060e3a8bd95f898baf89f733e1f5", "patch": "@@ -0,0 +1,69 @@\n+typedef __SIZE_TYPE__ size_t;\n+template<typename _Iterator, typename _Container> class __normal_iterator {\n+public:\n+  const _Iterator& base() const;\n+};\n+template<typename _BI1, typename _BI2> inline\n+void copy_backward(_BI1 __first, _BI1 __last, _BI2 __result) {\n+  while (__first != __last) *--__result = *--__last;\n+}\n+template<typename _Tp> struct _Vector_base {\n+  struct _Vector_impl { _Tp* _M_finish; };\n+  _Vector_impl _M_impl;\n+};\n+template<typename _Tp > class vector : protected _Vector_base<_Tp> {\n+  typedef vector<_Tp> vector_type;\n+  typedef _Tp * pointer;\n+  typedef _Tp & reference;\n+  typedef __normal_iterator<pointer, vector_type> iterator;\n+  typedef size_t size_type;\n+public:\n+  iterator end();\n+  void resize(size_type __new_size) { insert(end(), __new_size); }\n+  reference operator[](size_type __n);\n+  void insert(iterator __position, size_type __n)\n+  {\n+    pointer __old_finish(this->_M_impl._M_finish);\n+    copy_backward(__position.base(), __old_finish - __n, __old_finish);\n+  }\n+};\n+struct A {\n+  virtual ~A ();\n+  void incRef ();\n+  void decRef ();\n+};\n+struct C : public A {\n+  static C *alloc ();\n+};\n+template <class T> struct B {\n+  B () : ptr (T::alloc ()) { }\n+  B (T *a_ptr) : ptr (a_ptr) { }\n+  ~B () { decRef (); }\n+  B& operator= (const B<T>& a) { if (a.get () != this->get ()) { decRef ();\n+incRef (); } }\n+  template<class U> operator B<U> () const { return B<U> (ptr); }\n+  T* operator-> () const { }\n+  T* get () const { return ptr; }\n+  void decRef () const { if (ptr != 0) ptr->decRef (); }\n+  void incRef () const { if (ptr != 0) ptr->incRef (); }\n+  T *ptr;\n+};\n+struct D : public C {\n+  template <class T> inline void foo (const B<T> & x) { d.resize (1); d[0] = x;\n+}\n+  vector<B <C> > d;\n+};\n+struct E : public C {\n+  static E *alloc ();\n+};\n+struct F : public D {\n+  static F *alloc ();\n+};\n+void foo (vector<B<D> > & x) {\n+  for (int i = 0; i < 2; ++i)\n+    {\n+      B<F> l;\n+      B<E> m;\n+      l->foo (m);\n+    }\n+}"}, {"sha": "463cad7f7b83f78377ec3fc2d2a15b69526cb894", "filename": "gcc/testsuite/g++.dg/torture/pr35164-2.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e58df6ecf3d060e3a8bd95f898baf89f733e1f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr35164-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e58df6ecf3d060e3a8bd95f898baf89f733e1f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr35164-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr35164-2.C?ref=2e58df6ecf3d060e3a8bd95f898baf89f733e1f5", "patch": "@@ -0,0 +1,27 @@\n+struct __shared_count {\n+    __shared_count() { _M_pi = new int; }\n+    int * _M_pi;\n+};\n+template<typename _Tp>\n+class __shared_ptr {\n+public:\n+    __shared_ptr(_Tp* __p);\n+    void reset(int * __p) {\n+        __shared_ptr(__p).swap(*this);\n+    }\n+    void swap(__shared_ptr<_Tp>& __other) {\n+        __other._M_refcount._M_pi = _M_refcount._M_pi;\n+    }\n+    __shared_count _M_refcount;\n+};\n+template<typename _Tp> class shared_ptr : public __shared_ptr<_Tp> {};\n+int main() {\n+    for (shared_ptr<int> *iter;;)\n+    {\n+        try {\n+            (iter++)->reset(new int);\n+        }\n+        catch (...) {\n+        }\n+    }\n+}"}, {"sha": "346f6f3803cee4dec82d277870174d1caaae7424", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e58df6ecf3d060e3a8bd95f898baf89f733e1f5/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e58df6ecf3d060e3a8bd95f898baf89f733e1f5/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=2e58df6ecf3d060e3a8bd95f898baf89f733e1f5", "patch": "@@ -1028,3 +1028,21 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n   return exp;\n }\n \n+/* Returns true if STMT references an SSA_NAME that has\n+   SSA_NAME_OCCURS_IN_ABNORMAL_PHI set, otherwise false.  */\n+\n+bool\n+stmt_references_abnormal_ssa_name (tree stmt)\n+{\n+  ssa_op_iter oi;\n+  use_operand_p use_p;\n+\n+  FOR_EACH_SSA_USE_OPERAND (use_p, stmt, oi, SSA_OP_USE)\n+    {\n+      if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (USE_FROM_PTR (use_p)))\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+"}, {"sha": "286c60bce2038cb19174dbc02d021717801ebdbc", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e58df6ecf3d060e3a8bd95f898baf89f733e1f5/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e58df6ecf3d060e3a8bd95f898baf89f733e1f5/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=2e58df6ecf3d060e3a8bd95f898baf89f733e1f5", "patch": "@@ -822,6 +822,7 @@ extern void find_new_referenced_vars (tree *);\n extern tree make_rename_temp (tree, const char *);\n extern void set_default_def (tree, tree);\n extern tree gimple_default_def (struct function *, tree);\n+extern bool stmt_references_abnormal_ssa_name (tree);\n \n /* In tree-phinodes.c  */\n extern void reserve_phi_args_for_new_edge (basic_block);"}, {"sha": "91bd6179dfa14114cebef3d8959c12dc2b17b133", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e58df6ecf3d060e3a8bd95f898baf89f733e1f5/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e58df6ecf3d060e3a8bd95f898baf89f733e1f5/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=2e58df6ecf3d060e3a8bd95f898baf89f733e1f5", "patch": "@@ -968,7 +968,8 @@ tree_ssa_forward_propagate_single_use_vars (void)\n \t\t      && types_compatible_p (TREE_TYPE (TREE_TYPE (TREE_OPERAND (rhs, 0))),\n \t\t\t\t\t     TREE_TYPE (TREE_TYPE (rhs)))))\n \t\t{\n-\t\t  if (forward_propagate_addr_expr (lhs, rhs))\n+\t\t  if (!stmt_references_abnormal_ssa_name (stmt)\n+\t\t      && forward_propagate_addr_expr (lhs, rhs))\n \t\t    {\n \t\t      release_defs (stmt);\n \t\t      todoflags |= TODO_remove_unused_locals;"}]}