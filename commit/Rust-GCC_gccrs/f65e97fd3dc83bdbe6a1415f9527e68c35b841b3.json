{"sha": "f65e97fd3dc83bdbe6a1415f9527e68c35b841b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY1ZTk3ZmQzZGM4M2JkYmU2YTE0MTVmOTUyN2U2OGMzNWI4NDFiMw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2016-05-24T20:29:36Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-05-24T20:29:36Z"}, "message": "PR c++/71147 - [6 Regression] Flexible array member wrongly rejected in template\n\ngcc/ChangeLog:\n2016-05-24  Martin Sebor  <msebor@redhat.com>\n\n\tPR c++/71147\n\t* gcc/tree.h (complete_or_array_type_p): New inline function.\n\ngcc/testsuite/ChangeLog:\n2016-05-24  Martin Sebor  <msebor@redhat.com>\n\n\tPR c++/71147\n\t* g++.dg/ext/flexary16.C: New test.\n\ngcc/cp/ChangeLog:\n2016-05-24  Martin Sebor  <msebor@redhat.com>\n\n\tPR c++/71147\n\t* decl.c (layout_var_decl, grokdeclarator): Use complete_or_array_type_p.\n\t* pt.c (instantiate_class_template_1): Try to complete the element\n\ttype of a flexible array member.\n\t(can_complete_type_without_circularity): Handle arrays of unknown bound.\n\t* typeck.c (complete_type): Also complete the type of the elements of\n\tarrays with an unspecified bound.\n\nFrom-SVN: r236664", "tree": {"sha": "3d9ac91feb80adf20ab2902d32b9bdfb0ca76ed2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d9ac91feb80adf20ab2902d32b9bdfb0ca76ed2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f65e97fd3dc83bdbe6a1415f9527e68c35b841b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f65e97fd3dc83bdbe6a1415f9527e68c35b841b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f65e97fd3dc83bdbe6a1415f9527e68c35b841b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f65e97fd3dc83bdbe6a1415f9527e68c35b841b3/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e0dc0549a9d11fbf580db3ac45b49b5479dff13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e0dc0549a9d11fbf580db3ac45b49b5479dff13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e0dc0549a9d11fbf580db3ac45b49b5479dff13"}], "stats": {"total": 95, "additions": 77, "deletions": 18}, "files": [{"sha": "b07aa808891687a5ca7132af76fa04bda8b8c47b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65e97fd3dc83bdbe6a1415f9527e68c35b841b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65e97fd3dc83bdbe6a1415f9527e68c35b841b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f65e97fd3dc83bdbe6a1415f9527e68c35b841b3", "patch": "@@ -1,3 +1,8 @@\n+2016-05-24  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/71147\n+\t* gcc/tree.h (complete_or_array_type_p): New inline function.\n+\n 2016-05-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386.h (TARGET_AVOID_4BYTE_PREFIXES): Define."}, {"sha": "5e7eb3d0e4cff043059e8d446226c25a2dfa53d9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65e97fd3dc83bdbe6a1415f9527e68c35b841b3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65e97fd3dc83bdbe6a1415f9527e68c35b841b3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f65e97fd3dc83bdbe6a1415f9527e68c35b841b3", "patch": "@@ -1,3 +1,13 @@\n+2016-05-24  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/71147\n+\t* decl.c (layout_var_decl, grokdeclarator): Use complete_or_array_type_p.\n+\t* pt.c (instantiate_class_template_1): Try to complete the element\n+\ttype of a flexible array member.\n+\t(can_complete_type_without_circularity): Handle arrays of unknown bound.\n+\t* typeck.c (complete_type): Also complete the type of the elements of\n+\tarrays with an unspecified bound.\n+\n 2016-05-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/69872"}, {"sha": "ef5fd665b4632b1d2e3ae359fb0b3e139cf653fc", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65e97fd3dc83bdbe6a1415f9527e68c35b841b3/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65e97fd3dc83bdbe6a1415f9527e68c35b841b3/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f65e97fd3dc83bdbe6a1415f9527e68c35b841b3", "patch": "@@ -5305,10 +5305,7 @@ layout_var_decl (tree decl)\n     complete_type (type);\n   if (!DECL_SIZE (decl)\n       && TREE_TYPE (decl) != error_mark_node\n-      && (COMPLETE_TYPE_P (type)\n-\t  || (TREE_CODE (type) == ARRAY_TYPE\n-\t      && !TYPE_DOMAIN (type)\n-\t      && COMPLETE_TYPE_P (TREE_TYPE (type)))))\n+      && complete_or_array_type_p (type))\n     layout_decl (decl, 0);\n \n   if (!DECL_EXTERNAL (decl) && DECL_SIZE (decl) == NULL_TREE)\n@@ -11165,8 +11162,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t  }\n \telse if (!staticp && !dependent_type_p (type)\n \t\t && !COMPLETE_TYPE_P (complete_type (type))\n-\t\t && (TREE_CODE (type) != ARRAY_TYPE\n-\t\t     || !COMPLETE_TYPE_P (TREE_TYPE (type))\n+\t\t && (!complete_or_array_type_p (type)\n \t\t     || initialized == 0))\n \t  {\n \t    if (TREE_CODE (type) != ARRAY_TYPE"}, {"sha": "df3d634687d4f16e7b23c78ed30369b8b2e3ff16", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65e97fd3dc83bdbe6a1415f9527e68c35b841b3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65e97fd3dc83bdbe6a1415f9527e68c35b841b3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f65e97fd3dc83bdbe6a1415f9527e68c35b841b3", "patch": "@@ -9555,7 +9555,7 @@ can_complete_type_without_circularity (tree type)\n     return 0;\n   else if (COMPLETE_TYPE_P (type))\n     return 1;\n-  else if (TREE_CODE (type) == ARRAY_TYPE && TYPE_DOMAIN (type))\n+  else if (TREE_CODE (type) == ARRAY_TYPE)\n     return can_complete_type_without_circularity (TREE_TYPE (type));\n   else if (CLASS_TYPE_P (type)\n \t   && TYPE_BEING_DEFINED (TYPE_MAIN_VARIANT (type)))\n@@ -10120,17 +10120,12 @@ instantiate_class_template_1 (tree type)\n \t\t\t  if (can_complete_type_without_circularity (rtype))\n \t\t\t    complete_type (rtype);\n \n-                          if (TREE_CODE (r) == FIELD_DECL\n-                              && TREE_CODE (rtype) == ARRAY_TYPE\n-                              && COMPLETE_TYPE_P (TREE_TYPE (rtype))\n-                              && !COMPLETE_TYPE_P (rtype))\n-                            {\n-                              /* Flexible array mmembers of elements\n-                                 of complete type have an incomplete type\n-                                 and that's okay.  */\n-                            }\n-                          else if (!COMPLETE_TYPE_P (rtype))\n+\t\t\t  if (!complete_or_array_type_p (rtype))\n \t\t\t    {\n+\t\t\t      /* If R's type couldn't be completed and\n+\t\t\t\t it isn't a flexible array member (whose\n+\t\t\t\t type is incomplete by definition) give\n+\t\t\t\t an error.  */\n \t\t\t      cxx_incomplete_type_error (r, rtype);\n \t\t\t      TREE_TYPE (r) = error_mark_node;\n \t\t\t    }"}, {"sha": "f68c2a34024cf14a4f752fe72945d1a54f8c2a0f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65e97fd3dc83bdbe6a1415f9527e68c35b841b3/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65e97fd3dc83bdbe6a1415f9527e68c35b841b3/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=f65e97fd3dc83bdbe6a1415f9527e68c35b841b3", "patch": "@@ -112,7 +112,7 @@ complete_type (tree type)\n \n   if (type == error_mark_node || COMPLETE_TYPE_P (type))\n     ;\n-  else if (TREE_CODE (type) == ARRAY_TYPE && TYPE_DOMAIN (type))\n+  else if (TREE_CODE (type) == ARRAY_TYPE)\n     {\n       tree t = complete_type (TREE_TYPE (type));\n       unsigned int needs_constructing, has_nontrivial_dtor;"}, {"sha": "6c03e26718ba1715ee3ce5cbc64d73b81761c5e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65e97fd3dc83bdbe6a1415f9527e68c35b841b3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65e97fd3dc83bdbe6a1415f9527e68c35b841b3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f65e97fd3dc83bdbe6a1415f9527e68c35b841b3", "patch": "@@ -1,3 +1,8 @@\n+2016-05-24  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/71147\n+\t* g++.dg/ext/flexary16.C: New test.\n+\n 2016-05-24  Ilya Verbin  <ilya.verbin@intel.com>\n \n \t* gcc.target/i386/avx-ceil-sfix-2-vec.c: Define __NO_MATH_INLINES before"}, {"sha": "a3e040d7c1bd0c91744f8d85d55276af718a4935", "filename": "gcc/testsuite/g++.dg/ext/flexary16.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65e97fd3dc83bdbe6a1415f9527e68c35b841b3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65e97fd3dc83bdbe6a1415f9527e68c35b841b3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary16.C?ref=f65e97fd3dc83bdbe6a1415f9527e68c35b841b3", "patch": "@@ -0,0 +1,37 @@\n+// PR c++/71147 - [6 Regression] Flexible array member wrongly rejected\n+//   in template\n+// { dg-do compile }\n+\n+template <typename>\n+struct container\n+{\n+  struct elem {\n+    unsigned u;\n+  };\n+\n+  struct incomplete {\n+    int x;\n+    elem array[];\n+  };\n+};\n+\n+unsigned f (container<void>::incomplete* i)\n+{\n+  return i->array [0].u;\n+}\n+\n+\n+template <typename T>\n+struct D: container<T>\n+{\n+  struct S {\n+    int x;\n+    typename container<T>::elem array[];\n+  };\n+};\n+\n+\n+unsigned g (D<void>::S *s)\n+{\n+  return s->array [0].u;\n+}"}, {"sha": "90413fcf2090043619e8bf190c11c066f63caa74", "filename": "gcc/tree.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65e97fd3dc83bdbe6a1415f9527e68c35b841b3/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65e97fd3dc83bdbe6a1415f9527e68c35b841b3/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f65e97fd3dc83bdbe6a1415f9527e68c35b841b3", "patch": "@@ -4753,6 +4753,17 @@ ptrofftype_p (tree type)\n \t  && TYPE_UNSIGNED (type) == TYPE_UNSIGNED (sizetype));\n }\n \n+/* Return true if the argument is a complete type or an array\n+   of unknown bound (whose type is incomplete but) whose elements\n+   have complete type.  */\n+static inline bool\n+complete_or_array_type_p (const_tree type)\n+{\n+  return COMPLETE_TYPE_P (type)\n+         || (TREE_CODE (type) == ARRAY_TYPE\n+\t     && COMPLETE_TYPE_P (TREE_TYPE (type)));\n+}\n+\n extern tree strip_float_extensions (tree);\n extern int really_constant_p (const_tree);\n extern bool decl_address_invariant_p (const_tree);"}]}