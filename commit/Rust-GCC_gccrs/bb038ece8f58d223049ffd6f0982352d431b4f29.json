{"sha": "bb038ece8f58d223049ffd6f0982352d431b4f29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIwMzhlY2U4ZjU4ZDIyMzA0OWZmZDZmMDk4MjM1MmQ0MzFiNGYyOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-11-08T14:30:34Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-11-08T14:30:34Z"}, "message": "regex_compiler.h (__detail::_AnyMatcher, [...]): Remove redundant _CharT template parameters.\n\n\t* include/bits/regex_compiler.h (__detail::_AnyMatcher,\n\t__detail::_CharMatcher, __detail::_BracketMatcher): Remove redundant\n\t_CharT template parameters.\n\t* include/bits/regex_compiler.tcc: Likewise.\n\nFrom-SVN: r204573", "tree": {"sha": "8102dca9577c18111cf9468157308d8fcaee664e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8102dca9577c18111cf9468157308d8fcaee664e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb038ece8f58d223049ffd6f0982352d431b4f29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb038ece8f58d223049ffd6f0982352d431b4f29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb038ece8f58d223049ffd6f0982352d431b4f29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb038ece8f58d223049ffd6f0982352d431b4f29/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e69ce27fe7b25cf2606f83af2fc300c0b4f1f4"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "93203c243e00db893ff030cff94d4d452382fca4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb038ece8f58d223049ffd6f0982352d431b4f29/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb038ece8f58d223049ffd6f0982352d431b4f29/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bb038ece8f58d223049ffd6f0982352d431b4f29", "patch": "@@ -23,6 +23,11 @@\n \t* include/bits/regex.h (basic_regex): Assert char_type matches. Use\n \t__compile_nfa object generator. Remove _CharT template parameter.\n \n+\t* include/bits/regex_compiler.h (__detail::_AnyMatcher,\n+\t__detail::_CharMatcher, __detail::_BracketMatcher): Remove redundant\n+\t_CharT template parameters.\n+\t* include/bits/regex_compiler.tcc: Likewise.\n+\n 2013-11-06  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/bits/regex_automaton.h (_S_opcode_word_boundry): Rename to"}, {"sha": "406d9a9fd6b118f547d572af6323d1a4f8813ffe", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb038ece8f58d223049ffd6f0982352d431b4f29/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb038ece8f58d223049ffd6f0982352d431b4f29/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=bb038ece8f58d223049ffd6f0982352d431b4f29", "patch": "@@ -39,7 +39,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @{\n    */\n \n-  template<typename _CharT, typename _TraitsT>\n+  template<typename _TraitsT>\n     struct _BracketMatcher;\n \n   /// Builds an NFA from an input iterator interval.\n@@ -59,13 +59,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return make_shared<_RegexT>(std::move(_M_nfa)); }\n \n     private:\n-      typedef typename _TraitsT::char_type\t\t      _CharT;\n       typedef _Scanner<_FwdIter>                              _ScannerT;\n       typedef typename _ScannerT::_TokenT                     _TokenT;\n       typedef _StateSeq<_TraitsT>                     \t      _StateSeqT;\n       typedef std::stack<_StateSeqT, std::vector<_StateSeqT>> _StackT;\n-      typedef _BracketMatcher<_CharT, _TraitsT>               _BMatcherT;\n-      typedef std::ctype<_CharT>                              _CtypeT;\n+      typedef _BracketMatcher<_TraitsT>\t\t\t      _BMatcherT;\n+      typedef std::ctype<typename _TraitsT::char_type>        _CtypeT;\n \n       // accepts a specific token or returns false.\n       bool\n@@ -139,9 +138,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return _Cmplr(__first, __last, __traits, __flags)._M_get_nfa();\n     }\n \n-  template<typename _CharT, typename _TraitsT>\n+  template<typename _TraitsT>\n     struct _AnyMatcher\n     {\n+      typedef typename _TraitsT::char_type\t  _CharT;\n+\n       explicit\n       _AnyMatcher(const _TraitsT& __traits)\n       : _M_traits(__traits)\n@@ -159,9 +160,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const _TraitsT& _M_traits;\n     };\n \n-  template<typename _CharT, typename _TraitsT>\n+  template<typename _TraitsT>\n     struct _CharMatcher\n     {\n+      typedef typename _TraitsT::char_type\t  _CharT;\n       typedef regex_constants::syntax_option_type _FlagT;\n \n       explicit\n@@ -188,9 +190,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   /// Matches a character range (bracket expression)\n-  template<typename _CharT, typename _TraitsT>\n+  template<typename _TraitsT>\n     struct _BracketMatcher\n     {\n+      typedef typename _TraitsT::char_type\t  _CharT;\n       typedef typename _TraitsT::char_class_type  _CharClassT;\n       typedef typename _TraitsT::string_type      _StringT;\n       typedef regex_constants::syntax_option_type _FlagT;"}, {"sha": "f89498f35ed36811426b56a5759b798b7139db51", "filename": "libstdc++-v3/include/bits/regex_compiler.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb038ece8f58d223049ffd6f0982352d431b4f29/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb038ece8f58d223049ffd6f0982352d431b4f29/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc?ref=bb038ece8f58d223049ffd6f0982352d431b4f29", "patch": "@@ -286,11 +286,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       if (_M_match_token(_ScannerT::_S_token_anychar))\n \t_M_stack.push(_StateSeqT(_M_nfa,\n \t\t\t\t_M_nfa._M_insert_matcher\n-\t\t\t\t(_AnyMatcher<_CharT, _TraitsT>(_M_traits))));\n+\t\t\t\t(_AnyMatcher<_TraitsT>(_M_traits))));\n       else if (_M_try_char())\n \t_M_stack.push(_StateSeqT(_M_nfa,\n \t\t\t\t _M_nfa._M_insert_matcher\n-\t\t\t\t (_CharMatcher<_CharT, _TraitsT>(_M_value[0],\n+\t\t\t\t (_CharMatcher<_TraitsT>(_M_value[0],\n \t\t\t\t\t\t\t\t _M_traits,\n \t\t\t\t\t\t\t\t _M_flags))));\n       else if (_M_match_token(_ScannerT::_S_token_backref))\n@@ -430,9 +430,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __v;\n     }\n \n-  template<typename _CharT, typename _TraitsT>\n+  template<typename _TraitsT>\n     bool\n-    _BracketMatcher<_CharT, _TraitsT>::operator()(_CharT __ch) const\n+    _BracketMatcher<_TraitsT>::operator()(_CharT __ch) const\n     {\n       bool __ret = false;\n       if (_M_traits.isctype(__ch, _M_class_set)"}]}