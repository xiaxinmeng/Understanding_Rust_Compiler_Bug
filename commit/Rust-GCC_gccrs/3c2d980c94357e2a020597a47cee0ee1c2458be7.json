{"sha": "3c2d980c94357e2a020597a47cee0ee1c2458be7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MyZDk4MGM5NDM1N2UyYTAyMDU5N2E0N2NlZTBlZTFjMjQ1OGJlNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-03-08T17:21:40Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-03-08T17:21:40Z"}, "message": "i386.h (TARGET_SAHF): New define.\n\n        * config/i386/i386.h (TARGET_SAHF): New define.\n        * config/i386/i386.c (ix86_tune_features) [X86_TUNE_USE_SAHF]:\n        Also enable for m_K8, m_AMDFAM10 and m_CORE2.\n        (x86_sahf): New global variable.\n        (override_options): Add PTA_NO_SAHF to pta_flags enum.  Recode\n        pta_flags masks using shifts.  Add PTA_NO_SAHF to x86_64 and\n        nocona processor flags.  Set x86_sahf when PTA_NO_SAHF is not set\n        in processor flags.  Do not unconditionally disable TARGET_USE_SAHF\n        for 64-bit.\n        (ix86_fp_comparison_sahf_cost): Return high value for !TARGET_SAHF.\n        (ix86_expand_fp_compare): Check for TARGET_CMOVE or TARGET_SAHF\n        when expanding fcomi/sahf based tests.\n        (ix86_emit_fp_unordered_jump): Check for TARGET_SAHF when\n        expanding sahf based alternative. Emit sahf based sequence when\n        optimizing for code size.\n        * config/i386/i386.md (x86_sahf_1): Do not disable for\n        TARGET_64BIT, enable for TARGET_SAHF.\n\nFrom-SVN: r122705", "tree": {"sha": "342220614f5465d2d8a9b0196ab84b869baddcdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/342220614f5465d2d8a9b0196ab84b869baddcdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c2d980c94357e2a020597a47cee0ee1c2458be7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c2d980c94357e2a020597a47cee0ee1c2458be7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c2d980c94357e2a020597a47cee0ee1c2458be7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c2d980c94357e2a020597a47cee0ee1c2458be7/comments", "author": null, "committer": null, "parents": [{"sha": "0c705abc64aec2a54238aa864ed286cbd18d6a51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c705abc64aec2a54238aa864ed286cbd18d6a51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c705abc64aec2a54238aa864ed286cbd18d6a51"}], "stats": {"total": 94, "additions": 62, "deletions": 32}, "files": [{"sha": "98906d731217a284f8a6d1b60952c6d604e62f31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c2d980c94357e2a020597a47cee0ee1c2458be7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c2d980c94357e2a020597a47cee0ee1c2458be7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c2d980c94357e2a020597a47cee0ee1c2458be7", "patch": "@@ -1,3 +1,23 @@\n+2007-03-08  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (TARGET_SAHF): New define.\n+\t* config/i386/i386.c (ix86_tune_features) [X86_TUNE_USE_SAHF]:\n+\tAlso enable for m_K8, m_AMDFAM10 and m_CORE2.\n+\t(x86_sahf): New global variable.\n+\t(override_options): Add PTA_NO_SAHF to pta_flags enum.  Recode\n+\tpta_flags masks using shifts.  Add PTA_NO_SAHF to x86_64 and\n+\tnocona processor flags.  Set x86_sahf when PTA_NO_SAHF is not set\n+\tin processor flags.  Do not unconditionally disable TARGET_USE_SAHF\n+\tfor 64-bit.\n+\t(ix86_fp_comparison_sahf_cost): Return high value for !TARGET_SAHF.\n+\t(ix86_expand_fp_compare): Check for TARGET_CMOVE or TARGET_SAHF\n+\twhen expanding fcomi/sahf based tests.\n+\t(ix86_emit_fp_unordered_jump): Check for TARGET_SAHF when\n+\texpanding sahf based alternative. Emit sahf based sequence when\n+\toptimizing for code size.\n+\t* config/i386/i386.md (x86_sahf_1): Do not disable for\n+\tTARGET_64BIT, enable for TARGET_SAHF. \n+\n 2007-03-08  Martin Michlmayr  <tbm@cyrius.com>\n \n \t* tree-ssa-coalesce.c (fail_abnormal_edge_coalesce): Remove\n@@ -505,7 +525,7 @@\n \tof comparison of non-null ADDR_EXPR against null.\n \n 2007-03-05  Richard Guenther  <rguenther@suse.de>\n-\tDorit Nuzman  <dorit@il.ibm.com>\n+\t    Dorit Nuzman  <dorit@il.ibm.com>\n \n \tPR tree-optimization/26420\n \t* tree-vectorizer.c (vectorize_loops): Bail out early if there\n@@ -515,9 +535,9 @@\n \n 2007-03-05  Revital Eres  <eres@il.ibm.com>\n \n-      * gcc.dg/var-expand1.c: New test.\n-      * loop-unroll.c (analyze_insn_to_expand_var): Add dump info\n-      when an accumulator is expanded.\n+\t* gcc.dg/var-expand1.c: New test.\n+\t* loop-unroll.c (analyze_insn_to_expand_var): Add dump info\n+\twhen an accumulator is expanded.\n \n 2007-03-04  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n "}, {"sha": "a4c91fb20b4e25e5d547033bb533d2a5ec0e322a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c2d980c94357e2a020597a47cee0ee1c2458be7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c2d980c94357e2a020597a47cee0ee1c2458be7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3c2d980c94357e2a020597a47cee0ee1c2458be7", "patch": "@@ -1039,11 +1039,11 @@ unsigned int ix86_tune_features[X86_TUNE_LAST] = {\n   ~m_386,\n   \n   /* X86_TUNE_USE_SAHF */\n-  m_PPRO | m_K6_GEODE | m_PENT4 | m_NOCONA | m_GENERIC32,\n-  /* | m_GENERIC | m_ATHLON_K8 ? */\n+  m_PPRO | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_PENT4\n+  | m_NOCONA | m_CORE2 | m_GENERIC32,\n \n   /* X86_TUNE_MOVX: Enable to zero extend integer registers to avoid\n-     partial dependencies */\n+     partial dependencies.  */\n   m_ATHLON_K8_AMDFAM10 | m_PPRO | m_PENT4 | m_NOCONA\n   | m_CORE2 | m_GENERIC | m_GEODE /* m_386 | m_K6 */,\n \n@@ -1441,6 +1441,11 @@ int x86_prefetch_sse;\n /* true if cmpxchg16b is supported.  */\n int x86_cmpxchg16b;\n \n+/* true if sahf is supported. Early Intel CPUs with Intel 64\n+   lacked LAHF and SAHF instructions supported by AMD64 until\n+   introduction of Pentium 4 G1 step in December 2005.  */\n+int x86_sahf;\n+\n /* ix86_regparm_string as a number */\n static int ix86_regparm;\n \n@@ -1884,19 +1889,20 @@ override_options (void)\n       const enum processor_type processor;\n       const enum pta_flags\n \t{\n-\t  PTA_SSE = 1,\n-\t  PTA_SSE2 = 2,\n-\t  PTA_SSE3 = 4,\n-\t  PTA_MMX = 8,\n-\t  PTA_PREFETCH_SSE = 16,\n-\t  PTA_3DNOW = 32,\n-\t  PTA_3DNOW_A = 64,\n-\t  PTA_64BIT = 128,\n-\t  PTA_SSSE3 = 256,\n-\t  PTA_CX16 = 512,\n-\t  PTA_POPCNT = 1024,\n-\t  PTA_ABM = 2048,\n- \t  PTA_SSE4A = 4096\n+\t  PTA_SSE = 1 << 0,\n+\t  PTA_SSE2 = 1 << 1,\n+\t  PTA_SSE3 = 1 << 2,\n+\t  PTA_MMX = 1 << 3,\n+\t  PTA_PREFETCH_SSE = 1 << 4,\n+\t  PTA_3DNOW = 1 << 5,\n+\t  PTA_3DNOW_A = 1 << 6,\n+\t  PTA_64BIT = 1 << 7,\n+\t  PTA_SSSE3 = 1 << 8,\n+\t  PTA_CX16 = 1 << 9,\n+\t  PTA_POPCNT = 1 << 10,\n+\t  PTA_ABM = 1 << 11,\n+ \t  PTA_SSE4A = 1 << 12,\n+\t  PTA_NO_SAHF = 1 << 13\n \t} flags;\n     }\n   const processor_alias_table[] =\n@@ -1923,7 +1929,8 @@ override_options (void)\n       {\"prescott\", PROCESSOR_NOCONA, PTA_SSE | PTA_SSE2 | PTA_SSE3\n \t\t\t\t        | PTA_MMX | PTA_PREFETCH_SSE},\n       {\"nocona\", PROCESSOR_NOCONA, PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_64BIT\n-\t\t\t\t\t| PTA_MMX | PTA_PREFETCH_SSE | PTA_CX16},\n+\t\t\t\t\t| PTA_MMX | PTA_PREFETCH_SSE\n+\t\t\t\t\t| PTA_CX16 | PTA_NO_SAHF},\n       {\"core2\", PROCESSOR_CORE2, PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_SSSE3\n                                         | PTA_64BIT | PTA_MMX\n \t\t\t\t\t| PTA_PREFETCH_SSE | PTA_CX16},\n@@ -1943,7 +1950,7 @@ override_options (void)\n       {\"athlon-mp\", PROCESSOR_ATHLON, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW\n \t\t\t\t      | PTA_3DNOW_A | PTA_SSE},\n       {\"x86-64\", PROCESSOR_K8, PTA_MMX | PTA_PREFETCH_SSE | PTA_64BIT\n-\t\t\t       | PTA_SSE | PTA_SSE2 },\n+\t\t\t       | PTA_SSE | PTA_SSE2 | PTA_NO_SAHF},\n       {\"k8\", PROCESSOR_K8, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW | PTA_64BIT\n \t\t\t\t      | PTA_3DNOW_A | PTA_SSE | PTA_SSE2},\n       {\"opteron\", PROCESSOR_K8, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW | PTA_64BIT\n@@ -2146,6 +2153,8 @@ override_options (void)\n \tif (processor_alias_table[i].flags & PTA_SSE4A\n \t    && !(target_flags_explicit & MASK_SSE4A))\n \t  target_flags |= MASK_SSE4A;\n+\tif (!(processor_alias_table[i].flags & PTA_NO_SAHF))\n+\t  x86_sahf = true;\n \tif (TARGET_64BIT && !(processor_alias_table[i].flags & PTA_64BIT))\n \t  error (\"CPU you selected does not support x86-64 \"\n \t\t \"instruction set\");\n@@ -2465,10 +2474,6 @@ override_options (void)\n   if (TARGET_SSE)\n     TARGET_CMOVE = 1;\n \n-  /* ??? Any idea why this is unconditionally disabled for 64-bit?  */\n-  if (TARGET_64BIT)\n-    TARGET_USE_SAHF = 0;\n-  \n   /* Figure out what ASM_GENERATE_INTERNAL_LABEL builds as a prefix.  */\n   {\n     char *p;\n@@ -10976,7 +10981,7 @@ ix86_fp_comparison_sahf_cost (enum rtx_code code)\n   enum rtx_code bypass_code, first_code, second_code;\n   /* Return arbitrarily high cost when instruction is not preferred - this\n      avoids gcc from using it.  */\n-  if (!TARGET_USE_SAHF && !optimize_size)\n+  if (!(TARGET_SAHF && (TARGET_USE_SAHF || optimize_size)))\n     return 1024;\n   ix86_fp_comparison_codes (code, &bypass_code, &first_code, &second_code);\n   return (bypass_code != UNKNOWN || second_code != UNKNOWN) + 3;\n@@ -11023,7 +11028,8 @@ ix86_expand_fp_compare (enum rtx_code code, rtx op0, rtx op1, rtx scratch,\n   ix86_fp_comparison_codes (code, &bypass_code, &first_code, &second_code);\n \n   /* Do fcomi/sahf based test when profitable.  */\n-  if ((bypass_code == UNKNOWN || bypass_test)\n+  if ((TARGET_CMOVE || TARGET_SAHF)\n+      && (bypass_code == UNKNOWN || bypass_test)\n       && (second_code == UNKNOWN || second_test)\n       && ix86_fp_comparison_arithmetics_cost (code) > cost)\n     {\n@@ -21007,7 +21013,7 @@ ix86_emit_fp_unordered_jump (rtx label)\n \n   emit_insn (gen_x86_fnstsw_1 (reg));\n \n-  if (TARGET_USE_SAHF)\n+  if (TARGET_SAHF && (TARGET_USE_SAHF || optimize_size))\n     {\n       emit_insn (gen_x86_sahf_1 (reg));\n "}, {"sha": "06655d87dd312bfc54c42591b9a538567eefdd91", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c2d980c94357e2a020597a47cee0ee1c2458be7/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c2d980c94357e2a020597a47cee0ee1c2458be7/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=3c2d980c94357e2a020597a47cee0ee1c2458be7", "patch": "@@ -191,7 +191,7 @@ enum ix86_tune_indices {\n   X86_TUNE_DEEP_BRANCH_PREDICTION,\n   X86_TUNE_BRANCH_PREDICTION_HINTS,\n   X86_TUNE_DOUBLE_WITH_ADD,\n-  X86_TUNE_USE_SAHF,\t\t\t/* && !TARGET_64BIT */\n+  X86_TUNE_USE_SAHF,\n   X86_TUNE_MOVX,\n   X86_TUNE_PARTIAL_REG_STALL,\n   X86_TUNE_PARTIAL_FLAG_REG_STALL,\n@@ -330,6 +330,9 @@ extern int x86_prefetch_sse;\n extern int x86_cmpxchg16b;\n #define TARGET_CMPXCHG16B\tx86_cmpxchg16b\n \n+extern int x86_sahf;\n+#define TARGET_SAHF\t\tx86_sahf\n+\n #define ASSEMBLER_DIALECT\t(ix86_asm_dialect)\n \n #define TARGET_SSE_MATH\t\t((ix86_fpmath & FPMATH_SSE) != 0)"}, {"sha": "c0d447ef3939e10f24e0ffaf8eead5f3ff139a36", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c2d980c94357e2a020597a47cee0ee1c2458be7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c2d980c94357e2a020597a47cee0ee1c2458be7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3c2d980c94357e2a020597a47cee0ee1c2458be7", "patch": "@@ -983,8 +983,9 @@\n \n (define_insn \"x86_sahf_1\"\n   [(set (reg:CC FLAGS_REG)\n-\t(unspec:CC [(match_operand:HI 0 \"register_operand\" \"a\")] UNSPEC_SAHF))]\n-  \"!TARGET_64BIT\"\n+\t(unspec:CC [(match_operand:HI 0 \"register_operand\" \"a\")]\n+\t\t   UNSPEC_SAHF))]\n+  \"TARGET_SAHF\"\n   \"sahf\"\n   [(set_attr \"length\" \"1\")\n    (set_attr \"athlon_decode\" \"vector\")"}]}