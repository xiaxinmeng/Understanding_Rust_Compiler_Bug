{"sha": "7d11d29699c11ca758857a52003dcb016203eaef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QxMWQyOTY5OWMxMWNhNzU4ODU3YTUyMDAzZGNiMDE2MjAzZWFlZg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-10-06T11:20:11Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-10-06T11:20:11Z"}, "message": "re PR target/54760 ([SH] Add __builtin_thread_pointer, __builtin_set_thread_pointer)\n\n\tPR target/54760\n\t* config/sh/sh.md (define_constants): Add UNSPECV_GBR.\n\t(get_thread_pointer, set_thread_pointer): New expanders.\n\t(load_gbr): Rename to store_gbr.  Remove GBR_REG use.\n\t(store_gbr): New insn.\n\t* config/sh/sh.c (prepare_move_operands): Use gen_store_gbr instead of\n\tgen_load_gbr in TLS_MODEL_LOCAL_EXEC case.\n\t(sh1_builtin_p): New function.\n\t(signature_args): Add SH_BLTIN_VP.\n\t(bdesc): Add __builtin_thread_pointer and __builtin_set_thread_pointer.\n\n\tPR target/54760\n\t* gcc.target/sh/pr54760-1.c: New.\n\nFrom-SVN: r192155", "tree": {"sha": "42bb03df06926f4752add2e251b0fb87c82692e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42bb03df06926f4752add2e251b0fb87c82692e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d11d29699c11ca758857a52003dcb016203eaef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d11d29699c11ca758857a52003dcb016203eaef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d11d29699c11ca758857a52003dcb016203eaef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d11d29699c11ca758857a52003dcb016203eaef/comments", "author": null, "committer": null, "parents": [{"sha": "d6a5e81d74f9c17f0de3f5ab1a9c817381eec7e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6a5e81d74f9c17f0de3f5ab1a9c817381eec7e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6a5e81d74f9c17f0de3f5ab1a9c817381eec7e8"}], "stats": {"total": 85, "additions": 81, "deletions": 4}, "files": [{"sha": "738ab7fad0b2059f184f3ad43a57c1d8c35d3e3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d11d29699c11ca758857a52003dcb016203eaef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d11d29699c11ca758857a52003dcb016203eaef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d11d29699c11ca758857a52003dcb016203eaef", "patch": "@@ -1,3 +1,16 @@\n+2012-10-06  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54760\n+\t* config/sh/sh.md (define_constants): Add UNSPECV_GBR.\n+\t(get_thread_pointer, set_thread_pointer): New expanders.\n+\t(load_gbr): Rename to store_gbr.  Remove GBR_REG use.\n+\t(store_gbr): New insn.\n+\t* config/sh/sh.c (prepare_move_operands): Use gen_store_gbr instead of\n+\tgen_load_gbr in TLS_MODEL_LOCAL_EXEC case.\n+\t(sh1_builtin_p): New function.\n+\t(signature_args): Add SH_BLTIN_VP.\n+\t(bdesc): Add __builtin_thread_pointer and __builtin_set_thread_pointer.\n+\n 2012-10-05  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR rtl-optimization/54739"}, {"sha": "3a0689d9486b1f1ae3443340cfbddcb0515a488a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d11d29699c11ca758857a52003dcb016203eaef/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d11d29699c11ca758857a52003dcb016203eaef/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=7d11d29699c11ca758857a52003dcb016203eaef", "patch": "@@ -1887,7 +1887,7 @@ prepare_move_operands (rtx operands[], enum machine_mode mode)\n \n \t    case TLS_MODEL_LOCAL_EXEC:\n \t      tmp2 = gen_reg_rtx (Pmode);\n-\t      emit_insn (gen_load_gbr (tmp2));\n+\t      emit_insn (gen_store_gbr (tmp2));\n \t      tmp = gen_reg_rtx (Pmode);\n \t      emit_insn (gen_symTPOFF2reg (tmp, op1));\n \n@@ -11521,6 +11521,12 @@ shmedia_builtin_p (void)\n   return TARGET_SHMEDIA;\n }\n \n+static bool\n+sh1_builtin_p (void)\n+{\n+  return TARGET_SH1;\n+}\n+\n /* describe number and signedness of arguments; arg[0] == result\n    (1: unsigned, 2: signed, 4: don't care, 8: pointer 0: no argument */\n /* 9: 64-bit pointer, 10: 32-bit pointer */\n@@ -11578,6 +11584,8 @@ static const char signature_args[][4] =\n   { 1, 1, 1, 1 },\n #define SH_BLTIN_PV 23\n   { 0, 8 },\n+#define SH_BLTIN_VP 24\n+  { 8, 0 },\n };\n /* mcmv: operands considered unsigned.  */\n /* mmulsum_wq, msad_ubq: result considered unsigned long long.  */\n@@ -11753,6 +11761,12 @@ static struct builtin_description bdesc[] =\n     CODE_FOR_byterev,\t\"__builtin_sh_media_BYTEREV\", SH_BLTIN_2, 0 },\n   { shmedia_builtin_p,\n     CODE_FOR_prefetch,\t\"__builtin_sh_media_PREFO\", SH_BLTIN_PSSV, 0 },\n+\n+  { sh1_builtin_p,\n+    CODE_FOR_get_thread_pointer, \"__builtin_thread_pointer\", SH_BLTIN_VP, 0 },\n+  { sh1_builtin_p,\n+    CODE_FOR_set_thread_pointer, \"__builtin_set_thread_pointer\",\n+    SH_BLTIN_PV, 0 },\n };\n \n static void"}, {"sha": "eeed561906390d7f809e74519ab3e200cb4d8aa7", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d11d29699c11ca758857a52003dcb016203eaef/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d11d29699c11ca758857a52003dcb016203eaef/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=7d11d29699c11ca758857a52003dcb016203eaef", "patch": "@@ -175,6 +175,7 @@\n   (UNSPECV_WINDOW_END\t10)\n   (UNSPECV_CONST_END\t11)\n   (UNSPECV_EH_RETURN\t12)\n+  (UNSPECV_GBR\t\t13)\n ])\n \n ;; -------------------------------------------------------------------------\n@@ -10029,13 +10030,37 @@ label:\n   DONE;\n })\n \n-(define_insn \"load_gbr\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\") (reg:SI GBR_REG))\n-   (use (reg:SI GBR_REG))]\n+;;------------------------------------------------------------------------------\n+;; Thread pointer getter and setter.\n+;;\n+;; On SH the thread pointer is kept in the GBR.\n+;; These patterns are usually expanded from the respective built-in functions.\n+(define_expand \"get_thread_pointer\"\n+  [(set (match_operand:SI 0 \"register_operand\") (reg:SI GBR_REG))]\n+  \"TARGET_SH1\")\n+\n+;; The store_gbr insn can also be used on !TARGET_SH1 for doing TLS accesses.\n+(define_insn \"store_gbr\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\") (reg:SI GBR_REG))]\n   \"\"\n   \"stc\tgbr,%0\"\n   [(set_attr \"type\" \"tls_load\")])\n \n+(define_expand \"set_thread_pointer\"\n+  [(set (reg:SI GBR_REG)\n+\t(unspec_volatile:SI [(match_operand:SI 0 \"register_operand\")]\n+\t UNSPECV_GBR))]\n+  \"TARGET_SH1\")\n+\n+(define_insn \"load_gbr\"\n+  [(set (reg:SI GBR_REG)\n+\t(unspec_volatile:SI [(match_operand:SI 0 \"register_operand\" \"r\")]\n+\t UNSPECV_GBR))]\n+  \"TARGET_SH1\"\n+  \"ldc\t%0,gbr\"\n+  [(set_attr \"type\" \"move\")])\n+\n+;;------------------------------------------------------------------------------\n ;; case instruction for switch statements.\n \n ;; Operand 0 is index"}, {"sha": "67f7387bbf29bdbaf4fb3bb7302f8e5dd44ee315", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d11d29699c11ca758857a52003dcb016203eaef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d11d29699c11ca758857a52003dcb016203eaef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d11d29699c11ca758857a52003dcb016203eaef", "patch": "@@ -1,3 +1,8 @@\n+2012-10-06  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54760\n+\t* gcc.target/sh/pr54760-1.c: New.\n+\n 2012-10-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/torture/Wsizeof-pointer-memaccess1.C: New test."}, {"sha": "9108a3fde8ae3c3765b94d96923e78d1430dadcf", "filename": "gcc/testsuite/gcc.target/sh/pr54760-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d11d29699c11ca758857a52003dcb016203eaef/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54760-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d11d29699c11ca758857a52003dcb016203eaef/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54760-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54760-1.c?ref=7d11d29699c11ca758857a52003dcb016203eaef", "patch": "@@ -0,0 +1,20 @@\n+/* Check that the __builtin_thread_pointer and __builtin_set_thread_pointer\n+   built-in functions result in gbr store / load instructions.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n+/* { dg-final { scan-assembler-times \"ldc\" 1 } } */\n+/* { dg-final { scan-assembler-times \"stc\" 1 } } */\n+/* { dg-final { scan-assembler-times \"gbr\" 2 } } */\n+\n+void*\n+test00 (void)\n+{\n+  return __builtin_thread_pointer ();\n+}\n+\n+void\n+test01 (void* p)\n+{\n+  __builtin_set_thread_pointer (p);\n+}"}]}