{"sha": "76f7e45179de4e6e53caab104022cc0784ecd618", "node_id": "C_kwDOANBUbNoAKDc2ZjdlNDUxNzlkZTRlNmU1M2NhYWIxMDQwMjJjYzA3ODRlY2Q2MTg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-06-17T07:50:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-17T07:50:03Z"}, "message": "Merge #1316\n\n1316: Add const generic declaration to AST r=CohenArthur a=CohenArthur\n\nThis uses a number of hacks and workarounds to avoid implementing the equivalent HIR node in the same PR. I'll raise issues for each of the `FIXME`s in the code. Needs one commit from #1315 to avoid unecessary conflicts.\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "581cf6e399375e3c26fe502bbec488f8a9dbb6b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/581cf6e399375e3c26fe502bbec488f8a9dbb6b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76f7e45179de4e6e53caab104022cc0784ecd618", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJirDIrCRBK7hj4Ov3rIwAA/PsIAKRU++0GzaKeExIwoFzb+lVP\nlSUl6T3kBkLZVEer8YvoRrmRwX4OME7/STMO5Ah178TQFkzveLWhbgdobiab1OHl\nd0venv+X8/goHUP6HT1xASg9xAYnY1IGheYMXAWTWfyQ/xY/+N5Qi/yL9vtO+z/z\nZw69amJsc68gYskl90cmTE3mlTVsUTMZ7HwX/1xayl8z+hyIUI5LN613NkET+lTG\nz+8yE4akbvv5IPteodkv9mJ4v0TLRiCsSpvKIVEMQHqh+gNDDnUrrQdKCkBq7PA9\nN/c5+UVax0s6oO2eFmBJAMYp82RwyVY0vV5zRtSsgMQhCPA19qq0Nf6P1A37388=\n=JArN\n-----END PGP SIGNATURE-----\n", "payload": "tree 581cf6e399375e3c26fe502bbec488f8a9dbb6b2\nparent 848a1a28b91d105ff4f21cc9993befbcecb3e39d\nparent 594854ec08cb10927f571885a0c7a4c1d47dfaf5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1655452203 +0000\ncommitter GitHub <noreply@github.com> 1655452203 +0000\n\nMerge #1316\n\n1316: Add const generic declaration to AST r=CohenArthur a=CohenArthur\n\nThis uses a number of hacks and workarounds to avoid implementing the equivalent HIR node in the same PR. I'll raise issues for each of the `FIXME`s in the code. Needs one commit from #1315 to avoid unecessary conflicts.\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76f7e45179de4e6e53caab104022cc0784ecd618", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76f7e45179de4e6e53caab104022cc0784ecd618", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76f7e45179de4e6e53caab104022cc0784ecd618/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "848a1a28b91d105ff4f21cc9993befbcecb3e39d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/848a1a28b91d105ff4f21cc9993befbcecb3e39d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/848a1a28b91d105ff4f21cc9993befbcecb3e39d"}, {"sha": "594854ec08cb10927f571885a0c7a4c1d47dfaf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/594854ec08cb10927f571885a0c7a4c1d47dfaf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/594854ec08cb10927f571885a0c7a4c1d47dfaf5"}], "stats": {"total": 146, "additions": 139, "deletions": 7}, "files": [{"sha": "6bf2bee24afe1151df1ac5717d4bfd0481237929", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=76f7e45179de4e6e53caab104022cc0784ecd618", "patch": "@@ -83,6 +83,10 @@ void\n Dump::visit (LifetimeParam &lifetime_param)\n {}\n \n+void\n+Dump::visit (ConstGenericParam &lifetime_param)\n+{}\n+\n // rust-path.h\n void\n Dump::visit (PathInExpression &path)"}, {"sha": "51c6f84ac0491f01724fcffb3ee85476268e6cd3", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=76f7e45179de4e6e53caab104022cc0784ecd618", "patch": "@@ -71,6 +71,7 @@ class Dump : public ASTVisitor\n   void visit (IdentifierExpr &ident_expr);\n   void visit (Lifetime &lifetime);\n   void visit (LifetimeParam &lifetime_param);\n+  void visit (ConstGenericParam &const_param);\n \n   // rust-path.h\n   void visit (PathInExpression &path);"}, {"sha": "47f332193cc20f0acaa47cbb9511772b92d59c38", "filename": "gcc/rust/ast/rust-ast-full-decls.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-decls.h?ref=76f7e45179de4e6e53caab104022cc0784ecd618", "patch": "@@ -50,6 +50,7 @@ class TypeParamBound;\n class Lifetime;\n class GenericParam;\n class LifetimeParam;\n+class ConstGenericParam;\n class MacroItem;\n class TraitItem;\n class InherentImplItem;"}, {"sha": "d2940dd4ec07a0746da63a2902859dfc8d477ea2", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=76f7e45179de4e6e53caab104022cc0784ecd618", "patch": "@@ -18,6 +18,7 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n // FIXME: This does not work on Windows\n+#include <string>\n #include <unistd.h>\n \n #include \"rust-ast-full.h\"\n@@ -2356,6 +2357,18 @@ LifetimeParam::as_string () const\n   return str;\n }\n \n+std::string\n+ConstGenericParam::as_string () const\n+{\n+  std::string str (\"ConstGenericParam: \");\n+  str += \"const \" + name + \": \" + type->as_string ();\n+\n+  if (default_value)\n+    str += \" = \" + default_value->as_string ();\n+\n+  return str;\n+}\n+\n std::string\n MacroMatchFragment::as_string () const\n {\n@@ -4878,6 +4891,12 @@ LifetimeParam::accept_vis (ASTVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+ConstGenericParam::accept_vis (ASTVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n void\n PathInExpression::accept_vis (ASTVisitor &vis)\n {"}, {"sha": "bbb04771fea9a7142b3d608e4147651dd3a333c6", "filename": "gcc/rust/ast/rust-ast-visitor.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fast%2Frust-ast-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fast%2Frust-ast-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-visitor.h?ref=76f7e45179de4e6e53caab104022cc0784ecd618", "patch": "@@ -49,6 +49,7 @@ class ASTVisitor\n   virtual void visit (Lifetime &lifetime) = 0;\n   // virtual void visit(GenericParam& generic_param) = 0;\n   virtual void visit (LifetimeParam &lifetime_param) = 0;\n+  virtual void visit (ConstGenericParam &const_param) = 0;\n   // virtual void visit(TraitItem& trait_item) = 0;\n   // virtual void visit(InherentImplItem& inherent_impl_item) = 0;\n   // virtual void visit(TraitImplItem& trait_impl_item) = 0;"}, {"sha": "b4d401c1afb8144ca4a56917f2c04ef6c42c6c33", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=76f7e45179de4e6e53caab104022cc0784ecd618", "patch": "@@ -1342,6 +1342,72 @@ class LifetimeParam : public GenericParam\n   }\n };\n \n+/**\n+ * Representation of const generic parameters\n+ */\n+class ConstGenericParam : public GenericParam\n+{\n+  /* Name of the parameter */\n+  Identifier name;\n+\n+  /* Mandatory type of the const parameter - a null pointer is an error */\n+  std::unique_ptr<AST::Type> type;\n+\n+  /**\n+   * Default value for the const generic parameter - nullptr indicates a lack\n+   * of default value, not an error, as these errors are reported during\n+   * parsing.\n+   */\n+  std::unique_ptr<AST::Expr> default_value;\n+\n+  Attribute outer_attr;\n+  Location locus;\n+\n+public:\n+  ConstGenericParam (Identifier name, std::unique_ptr<AST::Type> type,\n+\t\t     std::unique_ptr<AST::Expr> default_value,\n+\t\t     Attribute outer_attr, Location locus)\n+    : name (name), type (std::move (type)),\n+      default_value (std::move (default_value)), outer_attr (outer_attr),\n+      locus (locus)\n+  {}\n+\n+  ConstGenericParam (const ConstGenericParam &other)\n+    : GenericParam (), name (other.name), type (other.type->clone_type ()),\n+      outer_attr (other.outer_attr), locus (other.locus)\n+  {\n+    if (other.default_value)\n+      default_value = other.default_value->clone_expr ();\n+  }\n+\n+  bool has_type () { return type != nullptr; }\n+\n+  std::unique_ptr<AST::Type> &get_type ()\n+  {\n+    rust_assert (has_type ());\n+\n+    return type;\n+  }\n+\n+  std::unique_ptr<AST::Expr> &get_default_value () { return default_value; }\n+\n+  std::string as_string () const override;\n+\n+  void accept_vis (ASTVisitor &vis) override;\n+\n+  Location get_locus () const override final { return locus; }\n+\n+  Kind get_kind () const override final { return Kind::Const; }\n+\n+protected:\n+  /* Use covariance to implement clone function as returning this object rather\n+   * than base */\n+  ConstGenericParam *clone_generic_param_impl () const override\n+  {\n+    return new ConstGenericParam (*this);\n+  }\n+};\n+\n // A macro item AST node - abstract base class\n class MacroItem : public Item\n {"}, {"sha": "90d91eedbe184093382ccd5a1322c6db0b7ce400", "filename": "gcc/rust/expand/rust-attribute-visitor.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc?ref=76f7e45179de4e6e53caab104022cc0784ecd618", "patch": "@@ -354,6 +354,11 @@ AttrVisitor::visit (AST::LifetimeParam &)\n {\n   // supposedly does not require - cfg does nothing\n }\n+void\n+AttrVisitor::visit (AST::ConstGenericParam &)\n+{\n+  // likewise\n+}\n \n void\n AttrVisitor::visit (AST::MacroInvocation &macro_invoc)"}, {"sha": "02208c6a7c7a2417529a4b7aa79ef356d837976e", "filename": "gcc/rust/expand/rust-attribute-visitor.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h?ref=76f7e45179de4e6e53caab104022cc0784ecd618", "patch": "@@ -119,6 +119,7 @@ class AttrVisitor : public AST::ASTVisitor\n   void visit (AST::IdentifierExpr &ident_expr) override;\n   void visit (AST::Lifetime &) override;\n   void visit (AST::LifetimeParam &) override;\n+  void visit (AST::ConstGenericParam &) override;\n \n   void visit (AST::MacroInvocation &macro_invoc) override;\n "}, {"sha": "68bec882daa2314d9156fd6a43f27387747f018c", "filename": "gcc/rust/hir/rust-ast-lower-base.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc?ref=76f7e45179de4e6e53caab104022cc0784ecd618", "patch": "@@ -49,6 +49,9 @@ ASTLoweringBase::visit (AST::Lifetime &lifetime)\n void\n ASTLoweringBase::visit (AST::LifetimeParam &lifetime_param)\n {}\n+void\n+ASTLoweringBase::visit (AST::ConstGenericParam &const_param)\n+{}\n //  void ASTLoweringBase::visit(TraitItem& trait_item) {}\n //  void ASTLoweringBase::visit(InherentImplItem& inherent_impl_item) {}\n //  void ASTLoweringBase::visit(TraitImplItem& trait_impl_item) {}"}, {"sha": "68c57e0c02b579054e8291f1509e75d767bf843d", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=76f7e45179de4e6e53caab104022cc0784ecd618", "patch": "@@ -53,6 +53,7 @@ class ASTLoweringBase : public AST::ASTVisitor\n   virtual void visit (AST::Lifetime &lifetime);\n   //  virtual void visit(GenericParam& generic_param);\n   virtual void visit (AST::LifetimeParam &lifetime_param);\n+  virtual void visit (AST::ConstGenericParam &const_param);\n   //  virtual void visit(TraitItem& trait_item);\n   //  virtual void visit(InherentImplItem& inherent_impl_item);\n   //  virtual void visit(TraitImplItem& trait_impl_item);"}, {"sha": "58ee5605110c687b1bd8ef3ef376a43e79e192ac", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=76f7e45179de4e6e53caab104022cc0784ecd618", "patch": "@@ -368,6 +368,22 @@ class ASTLowerGenericParam : public ASTLoweringBase\n \t\t\t\t\t std::vector<Lifetime> ());\n   }\n \n+  void visit (AST::ConstGenericParam &param) override\n+  {\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, param.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+\n+    // FIXME: This creates a BOGUS HIR::Lifetime instance because we do not have\n+    // an `HIR::ConstGenericParam` type yet. This needs to be removed, but for\n+    // now it avoids bogus ICEs\n+    HIR::Lifetime lt (mapping, AST::Lifetime::LifetimeType::WILDCARD, \"fixme\",\n+\t\t      param.get_locus ());\n+    translated = new HIR::LifetimeParam (mapping, lt, param.get_locus (),\n+\t\t\t\t\t std::vector<Lifetime> ());\n+  }\n+\n   void visit (AST::TypeParam &param) override\n   {\n     AST::Attribute outer_attr = AST::Attribute::create_empty ();"}, {"sha": "b9f031d00490e18be6344e7319689e3fbffccdd1", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=76f7e45179de4e6e53caab104022cc0784ecd618", "patch": "@@ -2868,24 +2868,22 @@ Parser<ManagedTokenSource>::parse_generic_param (EndTokenPred is_end_token)\n       case CONST: {\n \tlexer.skip_token ();\n \n-\tauto name = expect_token (IDENTIFIER);\n+\tauto name_token = expect_token (IDENTIFIER);\n \n-\tif (!name || !expect_token (COLON))\n+\tif (!name_token || !expect_token (COLON))\n \t  return nullptr;\n \n \tauto type = parse_type ();\n \tif (!type)\n \t  return nullptr;\n \n-\t// FIXME: instantiate proper AST::ConstGeneric class here\n-\t// auto const_generic = new ...\n-\n \t// optional default value\n+\tstd::unique_ptr<AST::Expr> default_expr = nullptr;\n \tif (lexer.peek_token ()->get_id () == EQUAL)\n \t  {\n \t    lexer.skip_token ();\n \t    auto tok = lexer.peek_token ();\n-\t    auto default_expr = parse_const_generic_expression ();\n+\t    default_expr = parse_const_generic_expression ();\n \n \t    if (!default_expr)\n \t      rust_error_at (tok->get_locus (),\n@@ -2895,7 +2893,11 @@ Parser<ManagedTokenSource>::parse_generic_param (EndTokenPred is_end_token)\n \t\t\t     token_id_to_str (tok->get_id ()));\n \t  }\n \n-\t// param = std::unique_ptr<AST::GenericParam> (const_generic)\n+\tparam = std::unique_ptr<AST::ConstGenericParam> (\n+\t  new AST::ConstGenericParam (name_token->get_str (), std::move (type),\n+\t\t\t\t      std::move (default_expr),\n+\t\t\t\t      std::move (outer_attrs),\n+\t\t\t\t      token->get_locus ()));\n \n \tbreak;\n       }"}, {"sha": "cdc1a66b833173fa8afd9db96571e3a978777960", "filename": "gcc/rust/resolve/rust-ast-resolve-base.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc?ref=76f7e45179de4e6e53caab104022cc0784ecd618", "patch": "@@ -66,6 +66,10 @@ void\n ResolverBase::visit (AST::LifetimeParam &)\n {}\n \n+void\n+ResolverBase::visit (AST::ConstGenericParam &)\n+{}\n+\n void\n ResolverBase::visit (AST::PathInExpression &)\n {}"}, {"sha": "4a22a9d595034b4a43b709a13bd3d155d52f10b0", "filename": "gcc/rust/resolve/rust-ast-resolve-base.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h?ref=76f7e45179de4e6e53caab104022cc0784ecd618", "patch": "@@ -38,6 +38,7 @@ class ResolverBase : public AST::ASTVisitor\n   void visit (AST::IdentifierExpr &);\n   void visit (AST::Lifetime &);\n   void visit (AST::LifetimeParam &);\n+  void visit (AST::ConstGenericParam &);\n   void visit (AST::PathInExpression &);\n   void visit (AST::TypePathSegment &);\n   void visit (AST::TypePathSegmentGeneric &);"}, {"sha": "46f15401e950003303ef2bd74072478722629264", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f7e45179de4e6e53caab104022cc0784ecd618/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=76f7e45179de4e6e53caab104022cc0784ecd618", "patch": "@@ -341,6 +341,13 @@ class ResolveGenericParam : public ResolverBase\n     ok = true;\n   }\n \n+  void visit (AST::ConstGenericParam &) override\n+  {\n+    // For now do not do anything and accept everything.\n+    // FIXME: This needs to change soon!\n+    ok = true;\n+  }\n+\n   void visit (AST::TypeParam &param) override\n   {\n     ok = true;"}]}