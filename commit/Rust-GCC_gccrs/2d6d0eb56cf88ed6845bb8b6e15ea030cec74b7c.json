{"sha": "2d6d0eb56cf88ed6845bb8b6e15ea030cec74b7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ2ZDBlYjU2Y2Y4OGVkNjg0NWJiOGI2ZTE1ZWEwMzBjZWM3NGI3Yw==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "2004-01-26T03:36:07Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2004-01-26T03:36:07Z"}, "message": "c4x.md (addqi3_noclobber): Move up pecking order.\n\n\t* config/c4x/c4x.md (addqi3_noclobber): Move up pecking order.\n\t(floatunsqihf2): Remove operand 6.\n\t(fixhfqi_set, fix_trunchfqi2, fixuns_trunchfqi2): Group with other\n\tfix patterns.\n\t(ldi_conditional, ldf_conditional): Validate operands.\n\nFrom-SVN: r76618", "tree": {"sha": "9a89cb049833fd3f546d897951a18d29b00b6ebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a89cb049833fd3f546d897951a18d29b00b6ebb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d6d0eb56cf88ed6845bb8b6e15ea030cec74b7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d6d0eb56cf88ed6845bb8b6e15ea030cec74b7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d6d0eb56cf88ed6845bb8b6e15ea030cec74b7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d6d0eb56cf88ed6845bb8b6e15ea030cec74b7c/comments", "author": null, "committer": null, "parents": [{"sha": "8f42219220d936ddcaa2904bcfc6ab67010bce2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f42219220d936ddcaa2904bcfc6ab67010bce2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f42219220d936ddcaa2904bcfc6ab67010bce2c"}], "stats": {"total": 238, "additions": 125, "deletions": 113}, "files": [{"sha": "feb30c86f6be261b2c9907a12a1dac2dae25e26c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d6d0eb56cf88ed6845bb8b6e15ea030cec74b7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d6d0eb56cf88ed6845bb8b6e15ea030cec74b7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d6d0eb56cf88ed6845bb8b6e15ea030cec74b7c", "patch": "@@ -1,3 +1,11 @@\n+2004-01-26  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.md (addqi3_noclobber): Move up pecking order.\n+\t(floatunsqihf2): Remove operand 6.\n+\t(fixhfqi_set, fix_trunchfqi2, fixuns_trunchfqi2): Group with other\n+\tfix patterns.\n+\t(ldi_conditional, ldf_conditional): Validate operands.\n+\n 2004-01-26  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.h (BCT_CHECK_LOOP_ITERATIONS): Remove."}, {"sha": "c15ded3526af679aa7f43a44264d095b4bbffbe5", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 117, "deletions": 113, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d6d0eb56cf88ed6845bb8b6e15ea030cec74b7c/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d6d0eb56cf88ed6845bb8b6e15ea030cec74b7c/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=2d6d0eb56cf88ed6845bb8b6e15ea030cec74b7c", "patch": "@@ -185,7 +185,7 @@\n ;  copied about, then we could store the CC in a pseudo register and\n ;  use constructs such as (clobber (match_scratch:CC N \"&y,X\")) to\n ;  indicate that the 'y' class (ST register) is clobbered for the\n-;  first combination of operands, but not with the second.\n+;  first combination of operands but not with the second.\n ;  I tried this approach for a while but reload got unhappy since I\n ;  didn't allow it to move the CC around.\n \n@@ -872,7 +872,7 @@\n                                      (const_int 1) (const_int 0))]\n              (const_int 0)))\n \n-; With the C3x, things are simpler, but slower, i.e. more pipeline conflicts :(\n+; With the C3x, things are simpler but slower, i.e. more pipeline conflicts :(\n ; There are three functional groups:\n ; (1) AR0-AR7, IR0-IR1, BK\n ; (2) DP\n@@ -1787,6 +1787,23 @@\n       DONE;\n    }\")\n \n+; This pattern is required primarily for manipulating the stack pointer\n+; where GCC doesn't expect CC to be clobbered or for calculating\n+; addresses during reload.  Since this is a more specific pattern\n+; it needs to go first (otherwise we get into problems trying to decide\n+; to add clobbers).\n+(define_insn \"addqi3_noclobber\"\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"=c,c,c\")\n+        (plus:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>\")\n+                 (match_operand:QI 2 \"src_operand\" \"rIm,JR,rS<>\")))]\n+  \"valid_operands (PLUS, operands, QImode)\"\n+  \"@\n+   addi\\\\t%2,%0\n+   addi3\\\\t%2,%1,%0\n+   addi3\\\\t%2,%1,%0\"\n+  [(set_attr \"type\" \"binary,binary,binary\")])\n+; Default to int16 data attr.\n+\n (define_insn \"*addqi3_clobber\"\n   [(set (match_operand:QI 0 \"reg_operand\" \"=d,d,?d,c,c,?c\")\n         (plus:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>,0,rR,rS<>\")\n@@ -1870,21 +1887,6 @@\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc\")])\n ; Default to int16 data attr.\n \n-; This pattern is required primarily for manipulating the stack pointer\n-; where GCC doesn't expect CC to be clobbered or for calculating\n-; addresses during reload.\n-(define_insn \"addqi3_noclobber\"\n-  [(set (match_operand:QI 0 \"std_reg_operand\" \"=c,c,c\")\n-        (plus:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>\")\n-                 (match_operand:QI 2 \"src_operand\" \"rIm,JR,rS<>\")))]\n-  \"valid_operands (PLUS, operands, QImode)\"\n-  \"@\n-   addi\\\\t%2,%0\n-   addi3\\\\t%2,%1,%0\n-   addi3\\\\t%2,%1,%0\"\n-  [(set_attr \"type\" \"binary,binary,binary\")])\n-; Default to int16 data attr.\n-\n \n ; This pattern is required during reload when eliminate_regs_in_insn\n ; effectively converts a move insn into an add insn when the src\n@@ -3708,19 +3710,18 @@\n                               (match_dup 3)))\n              (set (match_dup 4)\n                   (float:QF (match_dup 1)))])\n-  (set (match_dup 6)\n+  (set (match_dup 2)\n        (if_then_else:QF (lt (reg:CC 21) (const_int 0))\n                         (match_dup 5)\n                         (match_dup 2)))\n   (parallel [(set (match_operand:QF 0 \"reg_operand\" \"\")\n-                  (plus:QF (match_dup 6) (match_dup 4)))\n+                  (plus:QF (match_dup 2) (match_dup 4)))\n              (clobber (reg:CC_NOOV 21))])]\n  \"\"\n  \"operands[2] = gen_reg_rtx (QFmode);\n   operands[3] = CONST0_RTX (QFmode); \n   operands[4] = gen_reg_rtx (QFmode);\n   operands[5] = gen_reg_rtx (QFmode);\n-  operands[6] = gen_reg_rtx (QFmode);\n   emit_move_insn (operands[5], CONST_DOUBLE_ATOF (\\\"4294967296.0\\\", QFmode));\")\n \n (define_expand \"floatunsqihf2\"\n@@ -3730,19 +3731,18 @@\n                               (match_dup 3)))\n              (set (match_dup 4)\n                   (float:HF (match_dup 1)))])\n-  (set (match_dup 6)\n+  (set (match_dup 2)\n        (if_then_else:HF (lt (reg:CC 21) (const_int 0))\n                         (match_dup 5)\n                         (match_dup 2)))\n   (parallel [(set (match_operand:HF 0 \"reg_operand\" \"\")\n-                  (plus:HF (match_dup 6) (match_dup 4)))\n+                  (plus:HF (match_dup 2) (match_dup 4)))\n              (clobber (reg:CC_NOOV 21))])]\n  \"\"\n  \"operands[2] = gen_reg_rtx (HFmode);\n   operands[3] = CONST0_RTX (HFmode); \n   operands[4] = gen_reg_rtx (HFmode);\n   operands[5] = gen_reg_rtx (HFmode);\n-  operands[6] = gen_reg_rtx (HFmode);\n   emit_move_insn (operands[5], CONST_DOUBLE_ATOF (\\\"4294967296.0\\\", HFmode));\")\n \n (define_insn \"floatqihf2\"\n@@ -3784,16 +3784,6 @@\n  \"fix\\\\t%1,%0\"\n   [(set_attr \"type\" \"unarycc\")])\n \n-(define_insn \"*fixhfqi_set\"\n-  [(set (reg:CC 21)\n-        (compare:CC (fix:QI (match_operand:HF 1 \"src_operand\" \"fH\"))\n-                    (const_int 0)))\n-   (set (match_operand:QI 0 \"ext_reg_operand\" \"=d\")\n-        (fix:QI (match_dup 1)))]\n- \"\"\n- \"fix\\\\t%1,%0\"\n-  [(set_attr \"type\" \"unarycc\")])\n-\n ;\n ; The C[34]x fix instruction implements a floor, not a straight trunc,\n ; so we have to invert the number, fix it, and reinvert it if negative\n@@ -3826,34 +3816,6 @@\n   operands[5] = gen_reg_rtx (QImode);\n  \")\n \n-(define_expand \"fix_trunchfqi2\"\n-  [(parallel [(set (match_dup 2)\n-                   (fix:QI (match_operand:HF 1 \"src_operand\" \"\")))\n-              (clobber (reg:CC 21))])\n-   (parallel [(set (match_dup 3) (neg:HF (match_dup 1)))\n-              (clobber (reg:CC_NOOV 21))])\n-   (parallel [(set (match_dup 4) (fix:QI (match_dup 3)))\n-              (clobber (reg:CC 21))])\n-   (parallel [(set (reg:CC_NOOV 21)\n-                   (compare:CC_NOOV (neg:QI (match_dup 4)) (const_int 0)))\n-              (set (match_dup 5) (neg:QI (match_dup 4)))])\n-   (set (match_dup 2)\n-        (if_then_else:QI (le (reg:CC 21) (const_int 0))\n-                         (match_dup 5)\n-                         (match_dup 2)))\n-   (set (match_operand:QI 0 \"reg_operand\" \"=r\") (match_dup 2))]\n- \"\"\n- \"if (TARGET_FAST_FIX)\n-    {\n-       emit_insn (gen_fixhfqi_clobber (operands[0], operands[1]));\n-       DONE;\n-    }\n-  operands[2] = gen_reg_rtx (QImode);\n-  operands[3] = gen_reg_rtx (HFmode);\n-  operands[4] = gen_reg_rtx (QImode);\n-  operands[5] = gen_reg_rtx (QImode);\n- \")\n-\n (define_expand \"fix_truncqfhi2\"\n   [(parallel [(set (match_operand:HI 0 \"reg_operand\" \"\")\n                    (fix:HI (match_operand:QF 1 \"src_operand\" \"\")))\n@@ -3884,28 +3846,6 @@\n   operands[5] = gen_reg_rtx (QFmode);\n   emit_move_insn (operands[5], CONST_DOUBLE_ATOF (\\\"4294967296.0\\\", QFmode));\")\n \n-(define_expand \"fixuns_trunchfqi2\"\n- [(parallel [(set (match_dup 2)\n-\t\t  (fix:QI (match_operand:HF 1 \"src_operand\" \"hH\")))\n-\t     (clobber (reg:CC 21))])\n-  (parallel [(set (match_dup 3)\n-\t          (minus:HF (match_dup 1) (match_dup 5)))\n-\t     (clobber (reg:CC_NOOV 21))])\n-  (parallel [(set (reg:CC 21)\n-\t\t  (compare:CC (fix:QI (match_dup 3))\n-\t\t              (const_int 0)))\n-\t     (set (match_dup 4)\n-\t\t  (fix:QI (match_dup 3)))])\n-  (parallel [(set (match_dup 4) (unspec:QI [(match_dup 2)] UNSPEC_LDIV))\n-             (use (reg:CC 21))])\n-  (set (match_operand:QI 0 \"reg_operand\" \"=r\") (match_dup 4))]\n- \"\"\n- \"operands[2] = gen_reg_rtx (QImode);\n-  operands[3] = gen_reg_rtx (HFmode);\n-  operands[4] = gen_reg_rtx (QImode);\n-  operands[5] = gen_reg_rtx (HFmode);\n-  emit_move_insn (operands[5], CONST_DOUBLE_ATOF (\\\"4294967296.0\\\", HFmode));\")\n-\n (define_expand \"fixuns_truncqfhi2\"\n   [(parallel [(set (match_operand:HI 0 \"reg_operand\" \"\")\n                    (unsigned_fix:HI (match_operand:QF 1 \"src_operand\" \"\")))\n@@ -4262,7 +4202,7 @@\n                           [(reg:CC 21) (const_int 0)])\n                          (match_operand:QI 2 \"src_operand\" \"rIm,0\")\n                          (match_operand:QI 3 \"src_operand\" \"0,rIm\")))]\n- \"\"\n+ \"valid_operands (IF_THEN_ELSE, operands, QImode)\"\n  \"@\n   ldi%1\\\\t%2,%0\n   ldi%I1\\\\t%3,%0\"\n@@ -4277,7 +4217,8 @@\n  \"GET_CODE (operands[1]) != LE\n   && GET_CODE (operands[1]) != GE\n   && GET_CODE (operands[1]) != LT\n-  && GET_CODE (operands[1]) != GT\"\n+  && GET_CODE (operands[1]) != GT\n+  && valid_operands (IF_THEN_ELSE, operands, QImode)\"\n  \"@\n   ldi%1\\\\t%2,%0\n   ldi%I1\\\\t%3,%0\"\n@@ -4318,7 +4259,7 @@\n                           [(reg:CC 21) (const_int 0)])\n                          (match_operand:QF 2 \"src_operand\" \"fHm,0\")\n                          (match_operand:QF 3 \"src_operand\" \"0,fHm\")))]\n- \"\"\n+ \"valid_operands (IF_THEN_ELSE, operands, QFmode)\"\n  \"@\n   ldf%1\\\\t%2,%0\n   ldf%I1\\\\t%3,%0\"\n@@ -4333,7 +4274,8 @@\n  \"GET_CODE (operands[1]) != LE\n   && GET_CODE (operands[1]) != GE\n   && GET_CODE (operands[1]) != LT\n-  && GET_CODE (operands[1]) != GT\"\n+  && GET_CODE (operands[1]) != GT\n+  && valid_operands (IF_THEN_ELSE, operands, QFmode)\"\n  \"@\n   ldf%1\\\\t%2,%0\n   ldf%I1\\\\t%3,%0\"\n@@ -5634,10 +5576,6 @@\n     DONE;\n   \")\n \n-; The current low overhead looping code is naff and is not failsafe\n-; If you want RTPB instructions to be generated, apply the patches\n-; from www.elec.canterbury.ac.nz/c4x.  This will utilize the\n-; doloop_begin and doloop_end patterns in this MD.\n (define_expand \"decrement_and_branch_on_count\"\n   [(parallel [(set (pc)\n                    (if_then_else (ge (match_operand:QI 0 \"register_operand\" \"\")\n@@ -5734,7 +5672,7 @@\n    if (len < 8)\n      {\n        for (i = 1; i < len; i++)\n-        {\n+\t {\n            output_asm_insn (\\\"sti\\\\t%4,*%0++\\\", operands);\n            output_asm_insn (\\\"|| ldi\\\\t*%1++,%4\\\", operands);\n          } \n@@ -5753,7 +5691,7 @@\n            output_asm_insn (\\\"rptb\\\\t$+1\\\", operands);  \n            output_asm_insn (\\\"sti\\\\t%4,*%0++\\\", operands);\n            output_asm_insn (\\\"|| ldi\\\\t*%1++,%4\\\", operands);\n-        }\n+\t }\n      }\n    return \\\"sti\\\\t%4,*%0++\\\";\n  }\"\n@@ -5779,8 +5717,15 @@\n    operands[0] = copy_to_mode_reg (Pmode, XEXP (operands[0], 0));\n    operands[1] = copy_to_mode_reg (Pmode, XEXP (operands[1], 0));\n    tmp = gen_reg_rtx (QImode);\n-   emit_insn (gen_movstrqi_large (operands[0], operands[1], operands[2],\n-                                  operands[3], tmp));\n+   /* Disabled because of reload problems.  */\n+   if (0 && INTVAL (operands[2]) < 8)\n+     emit_insn (gen_movstrqi_small (operands[0], operands[1], operands[2],\n+                                    operands[3], tmp));\n+   else\n+     {\n+      emit_insn (gen_movstrqi_large (operands[0], operands[1], operands[2],\n+                                     operands[3], tmp));\n+     }\n    DONE;\n  }\")\n \n@@ -6024,6 +5969,66 @@\n ;\n ; FIX\n ;\n+(define_expand \"fixuns_trunchfqi2\"\n+ [(parallel [(set (match_dup 2)\n+\t\t  (fix:QI (match_operand:HF 1 \"reg_or_const_operand\" \"hH\")))\n+\t     (clobber (reg:CC 21))])\n+  (parallel [(set (match_dup 3)\n+\t          (minus:HF (match_dup 1) (match_dup 5)))\n+\t     (clobber (reg:CC_NOOV 21))])\n+  (parallel [(set (reg:CC 21)\n+\t\t  (compare:CC (fix:QI (match_dup 3))\n+\t\t              (const_int 0)))\n+\t     (set (match_dup 4)\n+\t\t  (fix:QI (match_dup 3)))])\n+  (parallel [(set (match_dup 4) (unspec:QI [(match_dup 2)] UNSPEC_LDIV))\n+             (use (reg:CC 21))])\n+  (set (match_operand:QI 0 \"reg_operand\" \"=r\") (match_dup 4))]\n+ \"\"\n+ \"operands[2] = gen_reg_rtx (QImode);\n+  operands[3] = gen_reg_rtx (HFmode);\n+  operands[4] = gen_reg_rtx (QImode);\n+  operands[5] = gen_reg_rtx (HFmode);\n+  emit_move_insn (operands[5], CONST_DOUBLE_ATOF (\\\"4294967296.0\\\", HFmode));\")\n+\n+(define_expand \"fix_trunchfqi2\"\n+  [(parallel [(set (match_dup 2)\n+                   (fix:QI (match_operand:HF 1 \"reg_or_const_operand\" \"\")))\n+              (clobber (reg:CC 21))])\n+   (parallel [(set (match_dup 3) (neg:HF (match_dup 1)))\n+              (clobber (reg:CC_NOOV 21))])\n+   (parallel [(set (match_dup 4) (fix:QI (match_dup 3)))\n+              (clobber (reg:CC 21))])\n+   (parallel [(set (reg:CC_NOOV 21)\n+                   (compare:CC_NOOV (neg:QI (match_dup 4)) (const_int 0)))\n+              (set (match_dup 5) (neg:QI (match_dup 4)))])\n+   (set (match_dup 2)\n+        (if_then_else:QI (le (reg:CC 21) (const_int 0))\n+                         (match_dup 5)\n+                         (match_dup 2)))\n+   (set (match_operand:QI 0 \"reg_operand\" \"=r\") (match_dup 2))]\n+ \"\"\n+ \"if (TARGET_FAST_FIX)\n+    {\n+       emit_insn (gen_fixhfqi_clobber (operands[0], operands[1]));\n+       DONE;\n+    }\n+  operands[2] = gen_reg_rtx (QImode);\n+  operands[3] = gen_reg_rtx (HFmode);\n+  operands[4] = gen_reg_rtx (QImode);\n+  operands[5] = gen_reg_rtx (QImode);\n+ \")\n+\n+(define_insn \"*fixhfqi_set\"\n+  [(set (reg:CC 21)\n+        (compare:CC (fix:QI (match_operand:HF 1 \"reg_or_const_operand\" \"hH\"))\n+                    (const_int 0)))\n+   (set (match_operand:QI 0 \"ext_reg_operand\" \"=d\")\n+        (fix:QI (match_dup 1)))]\n+ \"\"\n+ \"fix\\\\t%1,%0\"\n+  [(set_attr \"type\" \"unarycc\")])\n+\n (define_insn \"fixhfqi_clobber\"\n   [(set (match_operand:QI 0 \"reg_operand\" \"=dc\")\n         (fix:QI (match_operand:HF 1 \"reg_or_const_operand\" \"hH\")))\n@@ -6032,6 +6037,23 @@\n  \"fix\\\\t%1,%0\"\n   [(set_attr \"type\" \"unarycc\")])\n \n+(define_expand \"fix_trunchfhi2\"\n+  [(parallel [(set (match_operand:HI 0 \"reg_operand\" \"\")\n+                   (fix:HI (match_operand:HF 1 \"reg_operand\" \"\")))\n+              (clobber (reg:CC 21))])]\n+  \"\"\n+  \"c4x_emit_libcall (fix_trunchfhi2_libfunc, FIX, HImode, HFmode, 2, operands);\n+   DONE;\")\n+\n+(define_expand \"fixuns_trunchfhi2\"\n+  [(parallel [(set (match_operand:HI 0 \"reg_operand\" \"\")\n+                   (unsigned_fix:HI (match_operand:HF 1 \"reg_operand\" \"\")))\n+              (clobber (reg:CC 21))])]\n+  \"\"\n+  \"c4x_emit_libcall (fixuns_trunchfhi2_libfunc, UNSIGNED_FIX, \n+                     HImode, HFmode, 2, operands);\n+   DONE;\")\n+\n ;\n ; ABSF\n ;\n@@ -6185,24 +6207,6 @@\n   \"emit_insn (gen_sqrthf2_inline (operands[0], operands[1]));\n    DONE;\")\n \n-\n-(define_expand \"fix_trunchfhi2\"\n-  [(parallel [(set (match_operand:HI 0 \"reg_operand\" \"\")\n-                   (fix:HI (match_operand:HF 1 \"reg_operand\" \"\")))\n-              (clobber (reg:CC 21))])]\n-  \"\"\n-  \"c4x_emit_libcall (fix_trunchfhi2_libfunc, FIX, HImode, HFmode, 2, operands);\n-   DONE;\")\n-\n-(define_expand \"fixuns_trunchfhi2\"\n-  [(parallel [(set (match_operand:HI 0 \"reg_operand\" \"\")\n-                   (unsigned_fix:HI (match_operand:HF 1 \"reg_operand\" \"\")))\n-              (clobber (reg:CC 21))])]\n-  \"\"\n-  \"c4x_emit_libcall (fixuns_trunchfhi2_libfunc, UNSIGNED_FIX, \n-                     HImode, HFmode, 2, operands);\n-   DONE;\")\n-\n ;\n ; THREE OPERAND LONG DOUBLE INSTRUCTIONS\n ;"}]}