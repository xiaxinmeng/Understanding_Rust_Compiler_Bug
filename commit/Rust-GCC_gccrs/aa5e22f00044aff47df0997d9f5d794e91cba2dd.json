{"sha": "aa5e22f00044aff47df0997d9f5d794e91cba2dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE1ZTIyZjAwMDQ0YWZmNDdkZjA5OTdkOWY1ZDc5NGU5MWNiYTJkZA==", "commit": {"author": {"name": "Christopher D. Rickett", "email": "crickett@lanl.gov", "date": "2007-07-12T19:52:03Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-07-12T19:52:03Z"}, "message": "re PR fortran/32599 ([ISO C Binding] Accepts character with len /= 1)\n\n2007-07-12  Christopher D. Rickett  <crickett@lanl.gov>\n\n\tPR fortran/32599\n\t* decl.c (verify_c_interop_param): Require character string dummy\n\targs to BIND(C) procedures to have length 1.\n\t* resolve.c (resolve_fl_procedure): Modify parameter checking for\n\tBIND(C) procedures.\n\n\tPR fortran/32601\n\t* resolve.c (gfc_iso_c_func_interface): Verify that a valid\n\texpression is given as an argument to C_LOC and C_ASSOCIATED.\n\t* trans-io.c (transfer_expr): Add argument for code block.  Add\n\tstandards check to determine if an error message should be\n\treported for printing C_PTR or C_FUNPTR.\n\t(transfer_array_component): Update arguments to transfer_expr.\n\t(gfc_trans_transfer): Ditto.\n\n\t* symbol.c (gen_cptr_param): Fix whitespace.\n\n\n2007-07-12  Christopher D. Rickett  <crickett@lanl.gov>\n\n\tPR fortran/32599\n\t* gfortran.dg/32599.f03: New test case.\n\n\tPR fortran/32601\n\t* gfortran.dg/32601.f03: New test case.\n\t* gfortran.dg/32601_1.f03: Ditto.\n\t* gfortran.dg/c_ptr_tests_9.f03: Updated dg-options.\n\t* gfortran.dg/c_ptr_tests_10.f03: Ditto.\n\nFrom-SVN: r126598", "tree": {"sha": "ad18ce5b4ba81913b817ca8211398ca81949308b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad18ce5b4ba81913b817ca8211398ca81949308b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa5e22f00044aff47df0997d9f5d794e91cba2dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa5e22f00044aff47df0997d9f5d794e91cba2dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa5e22f00044aff47df0997d9f5d794e91cba2dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa5e22f00044aff47df0997d9f5d794e91cba2dd/comments", "author": null, "committer": null, "parents": [{"sha": "26a9718401a4987165af4451cfda69be08613640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26a9718401a4987165af4451cfda69be08613640", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26a9718401a4987165af4451cfda69be08613640"}], "stats": {"total": 201, "additions": 179, "deletions": 22}, "files": [{"sha": "151b7d979f3759485ac1f7549d5c36fd5036fc13", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa5e22f00044aff47df0997d9f5d794e91cba2dd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa5e22f00044aff47df0997d9f5d794e91cba2dd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=aa5e22f00044aff47df0997d9f5d794e91cba2dd", "patch": "@@ -1,3 +1,22 @@\n+2007-07-12  Christopher D. Rickett  <crickett@lanl.gov>\n+\n+\tPR fortran/32599\n+\t* decl.c (verify_c_interop_param): Require character string dummy\n+\targs to BIND(C) procedures to have length 1.\n+\t* resolve.c (resolve_fl_procedure): Modify parameter checking for\n+\tBIND(C) procedures.\n+\n+\tPR fortran/32601\n+\t* resolve.c (gfc_iso_c_func_interface): Verify that a valid\n+\texpression is given as an argument to C_LOC and C_ASSOCIATED.\n+\t* trans-io.c (transfer_expr): Add argument for code block.  Add\n+\tstandards check to determine if an error message should be\n+\treported for printing C_PTR or C_FUNPTR.\n+\t(transfer_array_component): Update arguments to transfer_expr.\n+\t(gfc_trans_transfer): Ditto.\n+\n+\t* symbol.c (gen_cptr_param): Fix whitespace.\n+\n 2007-07-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/32550"}, {"sha": "00241b832062cf5c57edde8b296f97ab05de7830", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa5e22f00044aff47df0997d9f5d794e91cba2dd/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa5e22f00044aff47df0997d9f5d794e91cba2dd/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=aa5e22f00044aff47df0997d9f5d794e91cba2dd", "patch": "@@ -838,7 +838,24 @@ verify_c_interop_param (gfc_symbol *sym)\n \t\t\t     sym->name, &(sym->declared_at),\n \t\t\t     sym->ns->proc_name->name);\n \t    }\n- \n+\n+          /* Character strings are only C interoperable if they have a\n+             length of 1.  */\n+          if (sym->ts.type == BT_CHARACTER)\n+\t    {\n+\t      gfc_charlen *cl = sym->ts.cl;\n+\t      if (!cl || !cl->length || cl->length->expr_type != EXPR_CONSTANT\n+                  || mpz_cmp_si (cl->length->value.integer, 1) != 0)\n+\t\t{\n+\t\t  gfc_error (\"Character argument '%s' at %L \"\n+\t\t\t     \"must be length 1 because \"\n+                             \"procedure '%s' is BIND(C)\",\n+\t\t\t     sym->name, &sym->declared_at,\n+                             sym->ns->proc_name->name);\n+\t\t  retval = FAILURE;\n+\t\t}\n+\t    }\n+\n \t  /* We have to make sure that any param to a bind(c) routine does\n \t     not have the allocatable, pointer, or optional attributes,\n \t     according to J3/04-007, section 5.1.  */"}, {"sha": "f12cbd4241a75955fcf053da1b589d640cdc1a45", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa5e22f00044aff47df0997d9f5d794e91cba2dd/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa5e22f00044aff47df0997d9f5d794e91cba2dd/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=aa5e22f00044aff47df0997d9f5d794e91cba2dd", "patch": "@@ -1717,6 +1717,15 @@ gfc_iso_c_func_interface (gfc_symbol *sym, gfc_actual_arglist *args,\n   try retval = SUCCESS;\n   gfc_symbol *args_sym;\n \n+  if (args->expr->expr_type == EXPR_CONSTANT\n+      || args->expr->expr_type == EXPR_OP\n+      || args->expr->expr_type == EXPR_NULL)\n+    {\n+      gfc_error (\"Argument to '%s' at %L is not a variable\",\n+\t\t sym->name, &(args->expr->where));\n+      return FAILURE;\n+    }\n+\n   args_sym = args->expr->symtree->n.sym;\n    \n   if (sym->intmod_sym_id == ISOCBINDING_ASSOCIATED)\n@@ -6798,6 +6807,7 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n   if (sym->attr.is_bind_c && sym->attr.is_c_interop != 1)\n     {\n       gfc_formal_arglist *curr_arg;\n+      int has_non_interop_arg = 0;\n \n       if (verify_bind_c_sym (sym, &(sym->ts), sym->attr.in_common,\n                              sym->common_block) == FAILURE)\n@@ -6819,18 +6829,25 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n       while (curr_arg != NULL)\n         {\n           /* Skip implicitly typed dummy args here.  */\n-          if (curr_arg->sym->attr.implicit_type == 0\n-\t      && verify_c_interop_param (curr_arg->sym) == FAILURE)\n-            {\n-              /* If something is found to fail, mark the symbol for the\n-                 procedure as not being BIND(C) to try and prevent multiple\n-                 errors being reported.  */\n-              sym->attr.is_c_interop = 0;\n-              sym->ts.is_c_interop = 0;\n-              sym->attr.is_bind_c = 0;\n-            }\n+\t  if (curr_arg->sym->attr.implicit_type == 0)\n+\t    if (verify_c_interop_param (curr_arg->sym) == FAILURE)\n+\t      /* If something is found to fail, record the fact so we\n+\t\t can mark the symbol for the procedure as not being\n+\t\t BIND(C) to try and prevent multiple errors being\n+\t\t reported.  */\n+\t      has_non_interop_arg = 1;\n+          \n           curr_arg = curr_arg->next;\n         }\n+\n+      /* See if any of the arguments were not interoperable and if so, clear\n+\t the procedure symbol to prevent duplicate error messages.  */\n+      if (has_non_interop_arg != 0)\n+\t{\n+\t  sym->attr.is_c_interop = 0;\n+\t  sym->ts.is_c_interop = 0;\n+\t  sym->attr.is_bind_c = 0;\n+\t}\n     }\n   \n   return SUCCESS;"}, {"sha": "e83c190ebcd776cb0ff03c175961489d9d3fe9ad", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa5e22f00044aff47df0997d9f5d794e91cba2dd/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa5e22f00044aff47df0997d9f5d794e91cba2dd/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=aa5e22f00044aff47df0997d9f5d794e91cba2dd", "patch": "@@ -3290,7 +3290,6 @@ gen_cptr_param (gfc_formal_arglist **head,\n \n   if (iso_c_sym_id == ISOCBINDING_F_PROCPOINTER)\n     c_ptr_type = \"_gfortran_iso_c_binding_c_funptr\";\n-\n   else\n     c_ptr_type = \"_gfortran_iso_c_binding_c_ptr\";\n \n@@ -3321,7 +3320,7 @@ gen_cptr_param (gfc_formal_arglist **head,\n   if (iso_c_sym_id == ISOCBINDING_F_PROCPOINTER)\n     c_ptr_sym = get_iso_c_binding_dt (ISOCBINDING_FUNPTR);\n   else\n-  c_ptr_sym = get_iso_c_binding_dt (ISOCBINDING_PTR);\n+    c_ptr_sym = get_iso_c_binding_dt (ISOCBINDING_PTR);\n   if (c_ptr_sym == NULL)\n     {\n       /* This can happen if the user did not define c_ptr but they are\n@@ -3330,7 +3329,7 @@ gen_cptr_param (gfc_formal_arglist **head,\n \tgenerate_isocbinding_symbol (module_name, ISOCBINDING_FUNPTR,\n \t\t\t\t     (char *)c_ptr_type);\n       else\n-      generate_isocbinding_symbol (module_name, ISOCBINDING_PTR,\n+\tgenerate_isocbinding_symbol (module_name, ISOCBINDING_PTR,\n \t\t\t\t     (char *)c_ptr_type);\n \n       gfc_get_ha_symbol (c_ptr_type, &(c_ptr_sym));"}, {"sha": "4b708713e72f693113c6b135e382c1f65cc59dd0", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa5e22f00044aff47df0997d9f5d794e91cba2dd/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa5e22f00044aff47df0997d9f5d794e91cba2dd/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=aa5e22f00044aff47df0997d9f5d794e91cba2dd", "patch": "@@ -1712,7 +1712,7 @@ gfc_trans_dt_end (gfc_code * code)\n }\n \n static void\n-transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr);\n+transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr, gfc_code * code);\n \n /* Given an array field in a derived type variable, generate the code\n    for the loop that iterates over array elements, and the code that\n@@ -1780,7 +1780,7 @@ transfer_array_component (tree expr, gfc_component * cm)\n   /* Now se.expr contains an element of the array.  Take the address and pass\n      it to the IO routines.  */\n   tmp = build_fold_addr_expr (se.expr);\n-  transfer_expr (&se, &cm->ts, tmp);\n+  transfer_expr (&se, &cm->ts, tmp, NULL);\n \n   /* We are done now with the loop body.  Wrap up the scalarizer and\n      return.  */\n@@ -1805,7 +1805,7 @@ transfer_array_component (tree expr, gfc_component * cm)\n /* Generate the call for a scalar transfer node.  */\n \n static void\n-transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr)\n+transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr, gfc_code * code)\n {\n   tree tmp, function, arg2, field, expr;\n   gfc_component *c;\n@@ -1814,9 +1814,23 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr)\n   /* It is possible to get a C_NULL_PTR or C_NULL_FUNPTR expression here if\n      the user says something like: print *, 'c_null_ptr: ', c_null_ptr\n      We need to translate the expression to a constant if it's either\n-     C_NULL_PTR or C_NULL_FUNPTR.  */\n-  if (ts->type == BT_DERIVED && ts->is_iso_c == 1 && ts->derived != NULL)\n+     C_NULL_PTR or C_NULL_FUNPTR.  We could also get a user variable of\n+     type C_PTR or C_FUNPTR, in which case the ts->type may no longer be\n+     BT_DERIVED (could have been changed by gfc_conv_expr).  */\n+  if ((ts->type == BT_DERIVED && ts->is_iso_c == 1 && ts->derived != NULL)\n+      || (ts->derived != NULL && ts->derived->ts.is_iso_c == 1))\n     {\n+      /* C_PTR and C_FUNPTR have private components which means they can not\n+         be printed.  However, if -std=gnu and not -pedantic, allow\n+         the component to be printed to help debugging.  */\n+      if (gfc_notification_std (GFC_STD_GNU) != SILENT)\n+\t{\n+\t  gfc_error_now (\"Derived type '%s' at %L has PRIVATE components\",\n+\t\t\t ts->derived->name, code != NULL ? &(code->loc) : \n+\t\t\t &gfc_current_locus);\n+\t  return;\n+\t}\n+\n       ts->type = ts->derived->ts.type;\n       ts->kind = ts->derived->ts.kind;\n       ts->f90_type = ts->derived->ts.f90_type;\n@@ -1883,7 +1897,7 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr)\n             {\n               if (!c->pointer)\n                 tmp = build_fold_addr_expr (tmp);\n-              transfer_expr (se, &c->ts, tmp);\n+              transfer_expr (se, &c->ts, tmp, code);\n             }\n \t}\n       return;\n@@ -1949,7 +1963,7 @@ gfc_trans_transfer (gfc_code * code)\n     {\n       /* Transfer a scalar value.  */\n       gfc_conv_expr_reference (&se, expr);\n-      transfer_expr (&se, &expr->ts, se.expr);\n+      transfer_expr (&se, &expr->ts, se.expr, code);\n     }\n   else\n     {\n@@ -1988,7 +2002,7 @@ gfc_trans_transfer (gfc_code * code)\n       se.ss = ss;\n \n       gfc_conv_expr_reference (&se, expr);\n-      transfer_expr (&se, &expr->ts, se.expr);\n+      transfer_expr (&se, &expr->ts, se.expr, code);\n     }\n \n  finish_block_label:"}, {"sha": "fc12113870e9d85abe3a607875cf5b43375ccedc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa5e22f00044aff47df0997d9f5d794e91cba2dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa5e22f00044aff47df0997d9f5d794e91cba2dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa5e22f00044aff47df0997d9f5d794e91cba2dd", "patch": "@@ -1,3 +1,14 @@\n+2007-07-12  Christopher D. Rickett  <crickett@lanl.gov>\n+\n+\tPR fortran/32599\n+\t* gfortran.dg/32599.f03: New test case.\n+\n+\tPR fortran/32601\n+\t* gfortran.dg/32601.f03: New test case.\n+\t* gfortran.dg/32601_1.f03: Ditto.\n+\t* gfortran.dg/c_ptr_tests_9.f03: Updated dg-options.\n+\t* gfortran.dg/c_ptr_tests_10.f03: Ditto.\n+\n 2007-07-12  Steve Ellcey  <sje@cup.hp.com>\n \n \t* gcc.c-torture/execute/align-3.c: Remove function addr check."}, {"sha": "8ad3f43696605b4aa0b8191d5c45a1816afeed74", "filename": "gcc/testsuite/gfortran.dg/c_ptr_tests_10.f03", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa5e22f00044aff47df0997d9f5d794e91cba2dd/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_10.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa5e22f00044aff47df0997d9f5d794e91cba2dd/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_10.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_10.f03?ref=aa5e22f00044aff47df0997d9f5d794e91cba2dd", "patch": "@@ -1,4 +1,5 @@\n ! { dg-run }\n+! { dg-options \"-std=gnu\" }\n ! This test case exists because gfortran had an error in converting the \n ! expressions for the derived types from iso_c_binding in some cases.\n module c_ptr_tests_10"}, {"sha": "f723492643f107c2b81a37c1a5bfff8c15c60860", "filename": "gcc/testsuite/gfortran.dg/c_ptr_tests_9.f03", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa5e22f00044aff47df0997d9f5d794e91cba2dd/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_9.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa5e22f00044aff47df0997d9f5d794e91cba2dd/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_9.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_9.f03?ref=aa5e22f00044aff47df0997d9f5d794e91cba2dd", "patch": "@@ -1,4 +1,5 @@\n ! { dg-do run }\n+! { dg-options \"-std=gnu\" }\n ! This test is pretty simple but is here just to make sure that the changes \n ! done to c_ptr and c_funptr (translating them to void *) works in the case \n ! where a component of a type is of type c_ptr or c_funptr.  "}, {"sha": "fa8aa68f9289d4f43d102084fa65a7ee96c783a0", "filename": "gcc/testsuite/gfortran.dg/pr32599.f03", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa5e22f00044aff47df0997d9f5d794e91cba2dd/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr32599.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa5e22f00044aff47df0997d9f5d794e91cba2dd/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr32599.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr32599.f03?ref=aa5e22f00044aff47df0997d9f5d794e91cba2dd", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do compile }\n+! PR fortran/32599\n+! Verifies that character string arguments to a bind(c) procedure have length \n+! 1, or no len is specified.  \n+module pr32599\n+  interface\n+     subroutine destroy(path) BIND(C) ! { dg-error \"must be length 1\" }\n+       use iso_c_binding\n+       implicit none\n+       character(len=*,kind=c_char), intent(IN) :: path \n+     end subroutine destroy\n+\n+     subroutine create(path) BIND(C) ! { dg-error \"must be length 1\" }\n+       use iso_c_binding\n+       implicit none\n+       character(len=5,kind=c_char), intent(IN) :: path \n+     end subroutine create\n+\n+     ! This should be valid.\n+     subroutine create1(path) BIND(C)\n+       use iso_c_binding\n+       implicit none\n+       character(len=1,kind=c_char), intent(IN) :: path \n+     end subroutine create1\n+\n+     ! This should be valid.\n+     subroutine create2(path) BIND(C)\n+       use iso_c_binding\n+       implicit none\n+       character(kind=c_char), intent(IN) :: path\n+     end subroutine create2\n+\n+     ! This should be valid.\n+     subroutine create3(path) BIND(C)\n+       use iso_c_binding\n+       implicit none\n+       character(kind=c_char), dimension(*), intent(IN) :: path\n+     end subroutine create3\n+  end interface\n+end module pr32599"}, {"sha": "90fa6b3f4127e218f2dcd253b5a7ec4fcc604708", "filename": "gcc/testsuite/gfortran.dg/pr32601.f03", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa5e22f00044aff47df0997d9f5d794e91cba2dd/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr32601.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa5e22f00044aff47df0997d9f5d794e91cba2dd/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr32601.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr32601.f03?ref=aa5e22f00044aff47df0997d9f5d794e91cba2dd", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+! PR fortran/32601\n+module pr32601\n+use, intrinsic :: iso_c_binding, only: c_int\n+contains\n+  function get_ptr()\n+    integer(c_int), pointer :: get_ptr\n+    integer(c_int), target :: x\n+    get_ptr = x\n+  end function get_ptr\n+end module pr32601\n+\n+USE ISO_C_BINDING, only: c_null_ptr, c_ptr, c_loc\n+use pr32601\n+implicit none\n+\n+type(c_ptr) :: t\n+t = c_null_ptr\n+\n+! Next two lines should be errors if -pedantic or -std=f2003\n+print *, c_null_ptr, t  ! { dg-error \"has PRIVATE components\" }\n+print *, t ! { dg-error \"has PRIVATE components\" }\n+\n+print *, c_loc(get_ptr()) ! { dg-error \"has PRIVATE components\" }\n+\n+end\n+! { dg-final { cleanup-modules \"pr32601\" } }  "}, {"sha": "3e9aa73842ec008f95e7d6278fbc00dec667fc75", "filename": "gcc/testsuite/gfortran.dg/pr32601_1.f03", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa5e22f00044aff47df0997d9f5d794e91cba2dd/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr32601_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa5e22f00044aff47df0997d9f5d794e91cba2dd/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr32601_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr32601_1.f03?ref=aa5e22f00044aff47df0997d9f5d794e91cba2dd", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+! PR fortran/32601\n+use, intrinsic :: iso_c_binding, only: c_loc, c_ptr\n+implicit none\n+\n+! This was causing an ICE, but is an error because the argument to C_LOC \n+! needs to be a variable.\n+print *, c_loc(4) ! { dg-error \"not a variable\" }\n+\n+end"}]}