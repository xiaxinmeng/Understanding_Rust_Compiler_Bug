{"sha": "402a402cabeb85a223952f822eb14af6c3094a4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAyYTQwMmNhYmViODVhMjIzOTUyZjgyMmViMTRhZjZjMzA5NGE0Yw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-10-10T05:15:29Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-10-10T05:15:29Z"}, "message": "locale.cc: Fix comments, move ctors together.\n\n\n2002-10-09  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* src/locale.cc: Fix comments, move ctors together.\n\t* testsuite/22_locale/static_members.cc (test03): Add.\n\nFrom-SVN: r58001", "tree": {"sha": "7b9d08c6526562220c7bb210f6e6ce48283f90ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b9d08c6526562220c7bb210f6e6ce48283f90ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/402a402cabeb85a223952f822eb14af6c3094a4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402a402cabeb85a223952f822eb14af6c3094a4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/402a402cabeb85a223952f822eb14af6c3094a4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402a402cabeb85a223952f822eb14af6c3094a4c/comments", "author": null, "committer": null, "parents": [{"sha": "7db40b5f9b8b4fd09fcd1409d083bada5fcb2a40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7db40b5f9b8b4fd09fcd1409d083bada5fcb2a40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7db40b5f9b8b4fd09fcd1409d083bada5fcb2a40"}], "stats": {"total": 151, "additions": 119, "deletions": 32}, "files": [{"sha": "5f1afaade75ca677d53ab61d3a595a65f2809eed", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402a402cabeb85a223952f822eb14af6c3094a4c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402a402cabeb85a223952f822eb14af6c3094a4c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=402a402cabeb85a223952f822eb14af6c3094a4c", "patch": "@@ -1,3 +1,8 @@\n+2002-10-09  Benjamin Kosnik  <bkoz@redhat.com>\t\n+\n+\t* src/locale.cc: Fix comments, move ctors together.\n+\t* testsuite/22_locale/static_members.cc (test03): Add.\n+\n 2002-10-08  Jonathan Lennox  <lennox@cs.columbia.edu>\n \n \tPR libstdc++/8071, libstdc++/8127, libstdc++/6745"}, {"sha": "d9c6931349113952536b040cb4d5603793763257", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402a402cabeb85a223952f822eb14af6c3094a4c/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402a402cabeb85a223952f822eb14af6c3094a4c/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=402a402cabeb85a223952f822eb14af6c3094a4c", "patch": "@@ -148,25 +148,6 @@ namespace std\n     0\n   };\n \n-  locale::~locale() throw()\n-  { _M_impl->_M_remove_reference(); }\n-\n-  void\n-  locale::_M_coalesce(const locale& __base, const locale& __add, \n-\t\t      category __cat)\n-  {\n-    __cat = _S_normalize_category(__cat);  \n-    _M_impl = new _Impl(*__base._M_impl, 1);  \n-\n-    try \n-      { _M_impl->_M_replace_categories(__add._M_impl, __cat); }\n-    catch (...) \n-      { \n-\t_M_impl->_M_remove_reference(); \n-\t__throw_exception_again;\n-      }\n-  }\n-\n   locale::locale() throw()\n   { \n     _S_initialize(); \n@@ -178,6 +159,7 @@ namespace std\n \n   // This is used to initialize global and classic locales, and\n   // assumes that the _Impl objects are constructed correctly.\n+  // The lack of a reference increment is intentional.\n   locale::locale(_Impl* __ip) throw() : _M_impl(__ip)\n   { }\n \n@@ -309,6 +291,9 @@ namespace std\n   locale::locale(const locale& __base, const locale& __add, category __cat)\n   { _M_coalesce(__base, __add, __cat); }\n \n+  locale::~locale() throw()\n+  { _M_impl->_M_remove_reference(); }\n+\n   bool\n   locale::operator==(const locale& __rhs) const throw()\n   {\n@@ -381,7 +366,7 @@ namespace std\n \ttry \n \t  {\n \t    // 26 Standard facets, 2 references.\n-\t    // One reference for _M_classic, one for _M_global\n+\t    // One reference for _S_classic, one for _S_global\n \t    _S_classic = new (&c_locale_impl) _Impl(0, 2, true);\n \t    _S_global = _S_classic; \t    \n \t    new (&c_locale) locale(_S_classic);\n@@ -399,6 +384,22 @@ namespace std\n     return c_locale;\n   }\n \n+  void\n+  locale::_M_coalesce(const locale& __base, const locale& __add, \n+\t\t      category __cat)\n+  {\n+    __cat = _S_normalize_category(__cat);  \n+    _M_impl = new _Impl(*__base._M_impl, 1);  \n+\n+    try \n+      { _M_impl->_M_replace_categories(__add._M_impl, __cat); }\n+    catch (...) \n+      { \n+\t_M_impl->_M_remove_reference(); \n+\t__throw_exception_again;\n+      }\n+  }\n+\n   locale::category\n   locale::_S_normalize_category(category __cat) \n   {"}, {"sha": "f8a909203dcb1931b6708ee63498c8b0df54feac", "filename": "libstdc++-v3/testsuite/22_locale/static_members.cc", "status": "modified", "additions": 93, "deletions": 12, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402a402cabeb85a223952f822eb14af6c3094a4c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fstatic_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402a402cabeb85a223952f822eb14af6c3094a4c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fstatic_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fstatic_members.cc?ref=402a402cabeb85a223952f822eb14af6c3094a4c", "patch": "@@ -23,21 +23,19 @@\n #include <cwchar> // for mbstate_t\n #include <locale>\n #include <iostream>\n-//#include <testsuite_hooks.h>\n-#define VERIFY(x) test &= x\n+#include <testsuite_hooks.h>\n \n typedef std::codecvt<char, char, std::mbstate_t> ccodecvt;\n class gnu_codecvt: public ccodecvt { }; \n \n void test01()\n {\n   using namespace std;\n-\n   bool test = true;\n+\n   string str1, str2;\n \n   // Construct a locale object with the C facet.\n-  const locale loc_env(\"\");\n   const locale loc01 = locale::classic();\n \n   // Construct a locale object with the specialized facet.\n@@ -54,13 +52,13 @@ void test01()\n   // global\n   locale loc03;\n   VERIFY ( loc03 == loc01);\n-  locale loc04 = locale::global(loc02);\n+  locale global_orig = locale::global(loc02);\n   locale loc05;\n   VERIFY (loc05 != loc03);\n   VERIFY (loc05 == loc02);\n \n-  // Reset global locale.\n-  locale::global(loc_env);\n+  // Reset global settings.\n+  locale::global(global_orig);\n }\n \n // Sanity check locale::global(loc) and setlocale.\n@@ -77,26 +75,109 @@ void test02()\n \n   // Get underlying current locale and environment settings.\n   const string lc_all_orig = std::setlocale(LC_ALL, NULL);\n-  const locale loc_orig(\"\");\n+  const locale env_orig(\"\");\n \n   // setlocale to en_PH\n   string lc_all_ph = std::setlocale(LC_ALL, ph.c_str());\n \n   const locale loc_env(\"\");\n-  VERIFY( loc_env == loc_orig );\n+  VERIFY( loc_env == env_orig );\n \n-  locale::global(loc_mx);\n+  locale global_orig = locale::global(loc_mx);\n   string lc_all_mx = std::setlocale(LC_ALL, NULL);\n   VERIFY( lc_all_mx == mx.c_str() );\n \n-  // Restore global info.\n-  locale::global(loc_orig);\n+  // Restore global settings.\n+  locale::global(global_orig);\n+}\n+\n+// Static counter for use in checking ctors/dtors.\n+static std::size_t counter;\n+\n+class surf : public std::locale::facet\n+{\n+public:\n+  static std::locale::id \t       \tid;\n+  surf(size_t refs = 0): std::locale::facet(refs) { ++counter; }\n+  ~surf() { --counter; }\n+};\n+\n+std::locale::id surf::id;\n+\n+typedef surf facet_type;\n+\n+// Verify lifetimes of global objects.\n+void test03()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  string name;\n+  locale global_orig;\n+  // 1: Destroyed when out of scope.\n+  {\n+    {\n+      {\n+\tVERIFY( counter == 0 );\n+\t{\n+\t  locale loc01(locale::classic(), new facet_type);\n+\t  VERIFY( counter == 1 );\n+\t  global_orig = locale::global(loc01);\n+\t  name = loc01.name();\n+\t}\n+\tVERIFY( counter == 1 );\n+\tlocale loc02 = locale();\n+\t// Weak, but it's something...\n+\tVERIFY( loc02.name() == name );\n+      }\n+      VERIFY( counter == 1 );\n+      // NB: loc03 should be a copy of the previous global locale.\n+      locale loc03 = locale::global(global_orig);\n+      VERIFY( counter == 1 );\n+      VERIFY( loc03.name() == name );\n+    }\n+    VERIFY( counter == 0 );\n+    locale loc04 = locale();\n+    VERIFY( loc04 == global_orig );\n+  }\n+\n+  // 2: Not destroyed when out of scope, deliberately leaked.\n+  {\n+    {\n+      {\n+\tVERIFY( counter == 0 );\n+\t{\n+\t  locale loc01(locale::classic(), new facet_type(1));\n+\t  VERIFY( counter == 1 );\n+\t  global_orig = locale::global(loc01);\n+\t  name = loc01.name();\n+\t}\n+\tVERIFY( counter == 1 );\n+\tlocale loc02 = locale();\n+\t// Weak, but it's something...\n+\tVERIFY( loc02.name() == name );\n+      }\n+      VERIFY( counter == 1 );\n+      // NB: loc03 should be a copy of the previous global locale.\n+      locale loc03 = locale::global(global_orig);\n+      VERIFY( counter == 1 );\n+      VERIFY( loc03.name() == name );\n+    }\n+    VERIFY( counter == 1 );\n+    locale loc04 = locale();\n+    VERIFY( loc04 == global_orig );\n+  }\n+  VERIFY( counter == 1 );\n+\n+  // Restore global settings.\n+  locale::global(global_orig);\n }\n \n int main ()\n {\n   test01();\n   test02();\n \n+  test03();\n   return 0;\n }"}]}