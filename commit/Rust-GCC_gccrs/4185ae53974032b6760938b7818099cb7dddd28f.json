{"sha": "4185ae53974032b6760938b7818099cb7dddd28f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE4NWFlNTM5NzQwMzJiNjc2MDkzOGI3ODE4MDk5Y2I3ZGRkZDI4Zg==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2004-06-25T17:15:46Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-06-25T17:15:46Z"}, "message": "target-def.h (TARGET_CXX_GUARD_TYPE, [...]): Define.\n\ngcc/\n\t* target-def.h (TARGET_CXX_GUARD_TYPE, TARGET_CXX_GUARD_MASK_BIT,\n\tTARGET_CXX): Define.\n\t(TARGET_INITIALIZER): Use TARGET_CXX.\n\t* target.h (struct gcc_target): Add struct cxx.\n\t* targhooks.h (default_cxx_guard_type): Add prototype.\n\t* targhooks.c (default_cxx_guard_type): New function.\n\t* config/arm/arm.c (TARGET_CXX_GUARD_TYPE, TARGET_CXX_GUARD_MASK_BIT):\n\tDefine.\n\t(arm_cxx_guard_type, arm_cxx_guard_mask_bit): New functions.\n\t* doc/tm.texi: Document TARGET_CXX_GUARD_TYPE and\n\tTARGET_CXX_GUARD_MASK_BIT.\ngcc/cp/\n\t* decl2.c (get_guard): Call targetm.cxx.guard_type.\n\t(get_guard_bits, get_guard_cond): Call targetm.cxx.guard_mask_bit.\nlibstdc++/\n\t* libsupc++/cxxabi.h: Define __ARM_EABI__\n\t(__guard): Use it.\n\t* libsupc++/guard.h (__cxa_guard_acquire, __cxa_guard_release): Ditto.\n\nFrom-SVN: r83660", "tree": {"sha": "b8c2d8bd3079657353a50fef059902fbbf159bfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8c2d8bd3079657353a50fef059902fbbf159bfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4185ae53974032b6760938b7818099cb7dddd28f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4185ae53974032b6760938b7818099cb7dddd28f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4185ae53974032b6760938b7818099cb7dddd28f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4185ae53974032b6760938b7818099cb7dddd28f/comments", "author": null, "committer": null, "parents": [{"sha": "0da2c8ac77a61f9149fcbf3da36f7656aff96a4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0da2c8ac77a61f9149fcbf3da36f7656aff96a4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0da2c8ac77a61f9149fcbf3da36f7656aff96a4c"}], "stats": {"total": 152, "additions": 142, "deletions": 10}, "files": [{"sha": "03c589c5df341827c0c457fa88efa142adeafc72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4185ae53974032b6760938b7818099cb7dddd28f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4185ae53974032b6760938b7818099cb7dddd28f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4185ae53974032b6760938b7818099cb7dddd28f", "patch": "@@ -1,3 +1,17 @@\n+2004-06-25  Paul Brook  <paul@codesourcery.com>\n+\n+\t* target-def.h (TARGET_CXX_GUARD_TYPE, TARGET_CXX_GUARD_MASK_BIT,\n+\tTARGET_CXX): Define.\n+\t(TARGET_INITIALIZER): Use TARGET_CXX.\n+\t* target.h (struct gcc_target): Add struct cxx.\n+\t* targhooks.h (default_cxx_guard_type): Add prototype.\n+\t* targhooks.c (default_cxx_guard_type): New function.\n+\t* config/arm/arm.c (TARGET_CXX_GUARD_TYPE, TARGET_CXX_GUARD_MASK_BIT):\n+\tDefine.\n+\t(arm_cxx_guard_type, arm_cxx_guard_mask_bit): New functions.\n+\t* doc/tm.texi: Document TARGET_CXX_GUARD_TYPE and\n+\tTARGET_CXX_GUARD_MASK_BIT.\n+\n 2004-06-25  Devang Patel  <dpatel@apple.com>\n \t\n \t* config/rs6000/darwin.h (CC1_SPEC): Handle -gused and -gfull."}, {"sha": "a7262f54dd9c9e761142ce8dae692a0ae8e3110b", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4185ae53974032b6760938b7818099cb7dddd28f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4185ae53974032b6760938b7818099cb7dddd28f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=4185ae53974032b6760938b7818099cb7dddd28f", "patch": "@@ -162,6 +162,9 @@ static bool arm_promote_prototypes (tree);\n static bool arm_default_short_enums (void);\n static bool arm_align_anon_bitfield (void);\n \n+static tree arm_cxx_guard_type (void);\n+static bool arm_cxx_guard_mask_bit (void);\n+\n \f\n /* Initialize the GCC target structure.  */\n #ifdef TARGET_DLLIMPORT_DECL_ATTRIBUTES\n@@ -264,6 +267,12 @@ static bool arm_align_anon_bitfield (void);\n #undef TARGET_ALIGN_ANON_BITFIELD\n #define TARGET_ALIGN_ANON_BITFIELD arm_align_anon_bitfield\n \n+#undef TARGET_CXX_GUARD_TYPE\n+#define TARGET_CXX_GUARD_TYPE arm_cxx_guard_type\n+\n+#undef TARGET_CXX_GUARD_MASK_BIT\n+#define TARGET_CXX_GUARD_MASK_BIT arm_cxx_guard_mask_bit\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */\n@@ -14537,3 +14546,21 @@ arm_align_anon_bitfield (void)\n {\n   return TARGET_AAPCS_BASED;\n }\n+\n+\n+/* The generic C++ ABI says 64-bit (long long).  The EABI says 32-bit.  */\n+\n+static tree\n+arm_cxx_guard_type (void)\n+{\n+  return TARGET_AAPCS_BASED ? integer_type_node : long_long_integer_type_node;\n+}\n+\n+\n+/* The EABI says test the least significan bit of a guard variable.  */\n+\n+static bool\n+arm_cxx_guard_mask_bit (void)\n+{\n+  return TARGET_AAPCS_BASED;\n+}"}, {"sha": "aca2db2ab9debff94e972ca768836fcf764859ae", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4185ae53974032b6760938b7818099cb7dddd28f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4185ae53974032b6760938b7818099cb7dddd28f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4185ae53974032b6760938b7818099cb7dddd28f", "patch": "@@ -1,3 +1,8 @@\n+2004-06-25  Paul Brook  <paul@codesourcery.com>\n+\n+\t* decl2.c (get_guard): Call targetm.cxx.guard_type.\n+\t(get_guard_bits, get_guard_cond): Call targetm.cxx.guard_mask_bit.\n+\n 2004-06-24  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (grokdeclarator): Restore error messages about __thread."}, {"sha": "5b2351975b999c0fcdd1898661b2a0cf5cba0f1f", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4185ae53974032b6760938b7818099cb7dddd28f/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4185ae53974032b6760938b7818099cb7dddd28f/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=4185ae53974032b6760938b7818099cb7dddd28f", "patch": "@@ -1823,7 +1823,7 @@ get_guard (tree decl)\n \n       /* We use a type that is big enough to contain a mutex as well\n \t as an integer counter.  */\n-      guard_type = long_long_integer_type_node;\n+      guard_type = targetm.cxx.guard_type ();\n       guard = build_decl (VAR_DECL, sname, guard_type);\n       \n       /* The guard should have the same linkage as what it guards.  */\n@@ -1847,15 +1847,18 @@ get_guard (tree decl)\n static tree\n get_guard_bits (tree guard)\n {\n-  /* We only set the first byte of the guard, in order to leave room\n-     for a mutex in the high-order bits.  */\n-  guard = build1 (ADDR_EXPR, \n-\t\t  build_pointer_type (TREE_TYPE (guard)),\n-\t\t  guard);\n-  guard = build1 (NOP_EXPR, \n-\t\t  build_pointer_type (char_type_node), \n-\t\t  guard);\n-  guard = build1 (INDIRECT_REF, char_type_node, guard);\n+  if (!targetm.cxx.guard_mask_bit ())\n+    {\n+      /* We only set the first byte of the guard, in order to leave room\n+\t for a mutex in the high-order bits.  */\n+      guard = build1 (ADDR_EXPR, \n+\t\t      build_pointer_type (TREE_TYPE (guard)),\n+\t\t      guard);\n+      guard = build1 (NOP_EXPR, \n+\t\t      build_pointer_type (char_type_node), \n+\t\t      guard);\n+      guard = build1 (INDIRECT_REF, char_type_node, guard);\n+    }\n \n   return guard;\n }\n@@ -1870,6 +1873,16 @@ get_guard_cond (tree guard)\n \n   /* Check to see if the GUARD is zero.  */\n   guard = get_guard_bits (guard);\n+\n+  /* Mask off all but the low bit.  */\n+  if (targetm.cxx.guard_mask_bit ())\n+    {\n+      guard_value = integer_one_node;\n+      if (!same_type_p (TREE_TYPE (guard_value), TREE_TYPE (guard)))\n+\tguard_value = convert (TREE_TYPE (guard), guard_value);\n+\tguard = cp_build_binary_op (BIT_AND_EXPR, guard, guard_value);\n+    }\n+\n   guard_value = integer_zero_node;\n   if (!same_type_p (TREE_TYPE (guard_value), TREE_TYPE (guard)))\n     guard_value = convert (TREE_TYPE (guard), guard_value);"}, {"sha": "d01993f3a680d6153584ccf33de3116a1d0d77b6", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4185ae53974032b6760938b7818099cb7dddd28f/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4185ae53974032b6760938b7818099cb7dddd28f/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=4185ae53974032b6760938b7818099cb7dddd28f", "patch": "@@ -51,6 +51,7 @@ through the macros defined in the @file{.h} file.\n * Target Attributes::   Defining target-specific uses of @code{__attribute__}.\n * MIPS Coprocessors::   MIPS coprocessor support and how to customize it.\n * PCH Target::          Validity checking for precompiled headers.\n+* C++ ABI::             Controlling C++ ABI changes.\n * Misc::                Everything else.\n @end menu\n \n@@ -8460,6 +8461,22 @@ if not.  The error message will be presented to the user, so it should\n be localized.\n @end deftypefn\n \n+@node C++ ABI\n+@section C++ ABI parameters\n+@cindex parameters, c++ abi\n+\n+@deftypefn {Target Hook} tree TARGET_CXX_GUARD_TYPE (void)\n+Define this hook to override the integer type used for guard variables.\n+These are used to implement one-time construction of static objects.  The\n+default is long_long_integer_type_node.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} bool TARGET_CXX_GUARD_MASK_BIT (void)\n+This hook determines how guard variables are used.  It should return \n+@code{false} (the default) if first byte should be used.  A return value of\n+@code{true} indicates the least significant bit should be used.\n+@end deftypefn\n+\n @node Misc\n @section Miscellaneous Parameters\n @cindex parameters, miscellaneous"}, {"sha": "72fda5b2ab53724abb84fbfdac1f80a46489f8c5", "filename": "gcc/target-def.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4185ae53974032b6760938b7818099cb7dddd28f/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4185ae53974032b6760938b7818099cb7dddd28f/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=4185ae53974032b6760938b7818099cb7dddd28f", "patch": "@@ -390,6 +390,22 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_HANDLE_PRAGMA_EXTERN_PREFIX 0\n #endif\n \n+\n+/* C++ specific.  */\n+#ifndef TARGET_CXX_GUARD_TYPE\n+#define TARGET_CXX_GUARD_TYPE default_cxx_guard_type\n+#endif\n+\n+#ifndef TARGET_CXX_GUARD_MASK_BIT\n+#define TARGET_CXX_GUARD_MASK_BIT hook_bool_void_false\n+#endif\n+\n+#define TARGET_CXX\t\t\\\n+  {\t\t\t\t\\\n+    TARGET_CXX_GUARD_TYPE,\t\\\n+    TARGET_CXX_GUARD_MASK_BIT\t\\\n+  }\n+\n /* The whole shebang.  */\n #define TARGET_INITIALIZER\t\t\t\\\n {\t\t\t\t\t\t\\\n@@ -435,6 +451,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_BUILTIN_SETJMP_FRAME_VALUE,\t\t\\\n   TARGET_MD_ASM_CLOBBERS,\t\t\t\\\n   TARGET_CALLS,\t\t\t\t\t\\\n+  TARGET_CXX,\t\t\t\t\t\\\n   TARGET_HAVE_NAMED_SECTIONS,\t\t\t\\\n   TARGET_HAVE_CTORS_DTORS,\t\t\t\\\n   TARGET_HAVE_TLS,\t\t\t\t\\"}, {"sha": "ad7936bbc2f94f4a97bb3b41af9fb204caef54e3", "filename": "gcc/target.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4185ae53974032b6760938b7818099cb7dddd28f/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4185ae53974032b6760938b7818099cb7dddd28f/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=4185ae53974032b6760938b7818099cb7dddd28f", "patch": "@@ -476,6 +476,14 @@ struct gcc_target\n \t\t\t\t   tree *post_p);\n   } calls;\n \n+  /* Functions specific to the C++ frontend.  */\n+  struct cxx {\n+    /* Return the integer type used for guard variables.  */\n+    tree (*guard_type) (void);\n+    /* Return true if only the low bit of the guard should be tested.  */\n+    bool (*guard_mask_bit) (void);\n+  } cxx;\n+\n   /* Leave the boolean fields at the end.  */\n \n   /* True if arbitrary sections are supported.  */"}, {"sha": "5d2a75fe3154accd369891bdf5e9edf8de5048b9", "filename": "gcc/targhooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4185ae53974032b6760938b7818099cb7dddd28f/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4185ae53974032b6760938b7818099cb7dddd28f/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=4185ae53974032b6760938b7818099cb7dddd28f", "patch": "@@ -135,3 +135,11 @@ hook_bool_CUMULATIVE_ARGS_true (CUMULATIVE_ARGS * a ATTRIBUTE_UNUSED)\n {\n   return true;\n }\n+\n+\n+/* The generic C++ ABI specifies this is a 64-bit value.  */\n+tree\n+default_cxx_guard_type (void)\n+{\n+  return long_long_integer_type_node;\n+}"}, {"sha": "427334f02c15bce84514ff28d00548a19f283031", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4185ae53974032b6760938b7818099cb7dddd28f/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4185ae53974032b6760938b7818099cb7dddd28f/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=4185ae53974032b6760938b7818099cb7dddd28f", "patch": "@@ -32,3 +32,4 @@ extern bool hook_bool_CUMULATIVE_ARGS_false (CUMULATIVE_ARGS *);\n extern bool default_pretend_outgoing_varargs_named (CUMULATIVE_ARGS *);\n \n extern bool hook_bool_CUMULATIVE_ARGS_true (CUMULATIVE_ARGS *);\n+extern tree default_cxx_guard_type (void);"}, {"sha": "b1f5e982cbc93fdf49e16017ef22a777081016fb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4185ae53974032b6760938b7818099cb7dddd28f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4185ae53974032b6760938b7818099cb7dddd28f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4185ae53974032b6760938b7818099cb7dddd28f", "patch": "@@ -1,3 +1,9 @@\n+2004-06-25  Paul Brook  <paul@codesourcery.com>\n+\n+\t* libsupc++/cxxabi.h: Define __ARM_EABI__\n+\t(__guard): Use it.\n+\t* libsupc++/guard.h (__cxa_guard_acquire, __cxa_guard_release): Ditto.\n+\n 2004-06-25  Paul Brook  <paul@codesourcery.com>\n \n \t* include/bits/concurrence.h: Still create mutex object when"}, {"sha": "9e8a090b447d0da9884ac19cbc9570237753bee0", "filename": "libstdc++-v3/libsupc++/cxxabi.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4185ae53974032b6760938b7818099cb7dddd28f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4185ae53974032b6760938b7818099cb7dddd28f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h?ref=4185ae53974032b6760938b7818099cb7dddd28f", "patch": "@@ -104,8 +104,13 @@ namespace __cxxabiv1\n \t\t    size_t __padding_size, void (*__destructor) (void*),\n \t\t    void (*__dealloc) (void*, size_t));\n \n+#ifdef __ARM_EABI__\n+  // The ARM EABI says this is a 32-bit type.\n+  typedef int __guard;\n+#else\n   // The ABI requires a 64-bit type.\n   __extension__ typedef int __guard __attribute__((mode (__DI__)));\n+#endif\n \n   int \n   __cxa_guard_acquire(__guard*);"}, {"sha": "fb49f1f081aec4d5409cb74f0474d4369d910931", "filename": "libstdc++-v3/libsupc++/guard.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4185ae53974032b6760938b7818099cb7dddd28f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4185ae53974032b6760938b7818099cb7dddd28f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc?ref=4185ae53974032b6760938b7818099cb7dddd28f", "patch": "@@ -30,18 +30,29 @@\n \n #include <cxxabi.h>\n \n+// The IA64/generic ABI uses the fist byte of the guard variable.\n+// The ARM EABI uses the least significant bit.\n+\n namespace __cxxabiv1 \n {\n   extern \"C\"\n   int __cxa_guard_acquire (__guard *g) \n   {\n+#ifdef __ARM_EABI__\n+    return !(*g & 1);\n+#else\n     return !*(char *)(g);\n+#endif\n   }\n \n   extern \"C\"\n   void __cxa_guard_release (__guard *g)\n   {\n+#ifdef __ARM_EABI__\n+    *g = 1;\n+#else\n     *(char *)g = 1;\n+#endif\n   }\n \n   extern \"C\""}]}