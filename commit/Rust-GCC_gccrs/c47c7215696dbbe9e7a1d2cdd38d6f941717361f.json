{"sha": "c47c7215696dbbe9e7a1d2cdd38d6f941717361f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ3YzcyMTU2OTZkYmJlOWU3YTFkMmNkZDM4ZDZmOTQxNzE3MzYxZg==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2016-11-10T23:56:30Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2016-11-10T23:56:30Z"}, "message": "re PR c/37998 (Unclear documentation of -fno-common)\n\n2016-11-10  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tPR c/37998\n\n\tgcc/\n\t* doc/invoke.texi (Code Gen Options) [-fno-common]: Use correct\n\tterminology.  Expand to remove ambiguity.\n\nFrom-SVN: r242062", "tree": {"sha": "7b0690a380746d7e3e905bc295729ccd2528162f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b0690a380746d7e3e905bc295729ccd2528162f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c47c7215696dbbe9e7a1d2cdd38d6f941717361f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c47c7215696dbbe9e7a1d2cdd38d6f941717361f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c47c7215696dbbe9e7a1d2cdd38d6f941717361f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c47c7215696dbbe9e7a1d2cdd38d6f941717361f/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "980f9a0a4b7a193707ffa5e8ef698a223561b804", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980f9a0a4b7a193707ffa5e8ef698a223561b804", "html_url": "https://github.com/Rust-GCC/gccrs/commit/980f9a0a4b7a193707ffa5e8ef698a223561b804"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "5cbc53d45b73171d4ac7aeed182a0b3ba9ae6331", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c47c7215696dbbe9e7a1d2cdd38d6f941717361f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c47c7215696dbbe9e7a1d2cdd38d6f941717361f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c47c7215696dbbe9e7a1d2cdd38d6f941717361f", "patch": "@@ -1,3 +1,9 @@\n+2016-11-10  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR c/37998\n+\t* doc/invoke.texi (Code Gen Options) [-fno-common]: Use correct\n+\tterminology.  Expand to remove ambiguity.\n+\n 2016-11-10  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/78232"}, {"sha": "04a6fac356b9ad16e522f28229f9889790eb80ef", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c47c7215696dbbe9e7a1d2cdd38d6f941717361f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c47c7215696dbbe9e7a1d2cdd38d6f941717361f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c47c7215696dbbe9e7a1d2cdd38d6f941717361f", "patch": "@@ -11968,25 +11968,32 @@ Use it to conform to a non-default application binary interface.\n \n @item -fno-common\n @opindex fno-common\n-In C code, controls the placement of uninitialized global variables.\n-Unix C compilers have traditionally permitted multiple definitions of\n-such variables in different compilation units by placing the variables\n-in a common block.\n-This is the behavior specified by @option{-fcommon}, and is the default\n-for GCC on most targets.\n-On the other hand, this behavior is not required by ISO C, and on some\n-targets may carry a speed or code size penalty on variable references.\n-The @option{-fno-common} option specifies that the compiler should place\n-uninitialized global variables in the data section of the object file,\n-rather than generating them as common blocks.\n-This has the effect that if the same variable is declared\n-(without @code{extern}) in two different compilations,\n-you get a multiple-definition error when you link them.\n-In this case, you must compile with @option{-fcommon} instead.\n+@cindex tentative definitions\n+In C code, this option controls the placement of global variables \n+defined without an initializer, known as @dfn{tentative definitions} \n+in the C standard.  Tentative definitions are distinct from declarations \n+of a variable with the @code{extern} keyword, which do not allocate storage.\n+\n+Unix C compilers have traditionally allocated storage for\n+uninitialized global variables in a common block.  This allows the\n+linker to resolve all tentative definitions of the same variable\n+in different compilation units to the same object, or to a non-tentative\n+definition.  \n+This is the behavior specified by @option{-fcommon}, and is the default for \n+GCC on most targets.  \n+On the other hand, this behavior is not required by ISO\n+C, and on some targets may carry a speed or code size penalty on\n+variable references.\n+\n+The @option{-fno-common} option specifies that the compiler should instead\n+place uninitialized global variables in the data section of the object file.\n+This inhibits the merging of tentative definitions by the linker so\n+you get a multiple-definition error if the same \n+variable is defined in more than one compilation unit.\n Compiling with @option{-fno-common} is useful on targets for which\n it provides better performance, or if you wish to verify that the\n program will work on other systems that always treat uninitialized\n-variable declarations this way.\n+variable definitions this way.\n \n @item -fno-ident\n @opindex fno-ident"}]}