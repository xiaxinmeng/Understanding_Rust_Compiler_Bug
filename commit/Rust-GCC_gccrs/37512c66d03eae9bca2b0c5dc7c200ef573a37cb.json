{"sha": "37512c66d03eae9bca2b0c5dc7c200ef573a37cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc1MTJjNjZkMDNlYWU5YmNhMmIwYzVkYzdjMjAwZWY1NzNhMzdjYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-07-21T22:56:27Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-07-21T22:56:27Z"}, "message": "ipa-pure-const.c (varying_state): Break out from ...\n\n\n\t* ipa-pure-const.c (varying_state): Break out from ...\n\t(get_function_state): ... here; always return varying_state\n\twhen state would be NULL otherwise.\n\t(remove_node_data): Do not free varying state.\n\nFrom-SVN: r162392", "tree": {"sha": "ae19d6db2b1fe095712bd316a29d8bfc65cc3e01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae19d6db2b1fe095712bd316a29d8bfc65cc3e01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37512c66d03eae9bca2b0c5dc7c200ef573a37cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37512c66d03eae9bca2b0c5dc7c200ef573a37cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37512c66d03eae9bca2b0c5dc7c200ef573a37cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37512c66d03eae9bca2b0c5dc7c200ef573a37cb/comments", "author": null, "committer": null, "parents": [{"sha": "dbb9443595084d94c8e785f4d86d1c72d1b72f96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbb9443595084d94c8e785f4d86d1c72d1b72f96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbb9443595084d94c8e785f4d86d1c72d1b72f96"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "5e78b4be22ab0cefba944bfa6eff0351a4ac282c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37512c66d03eae9bca2b0c5dc7c200ef573a37cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37512c66d03eae9bca2b0c5dc7c200ef573a37cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37512c66d03eae9bca2b0c5dc7c200ef573a37cb", "patch": "@@ -1,3 +1,10 @@\n+2010-07-22  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-pure-const.c (varying_state): Break out from ...\n+\t(get_function_state): ... here; always return varying_state\n+\twhen state would be NULL otherwise.\n+\t(remove_node_data): Do not free varying state.\n+\n 2010-07-22  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR bootstrap/44970"}, {"sha": "4a29e100df216612aa611fa94930dee7f34e7128", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37512c66d03eae9bca2b0c5dc7c200ef573a37cb/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37512c66d03eae9bca2b0c5dc7c200ef573a37cb/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=37512c66d03eae9bca2b0c5dc7c200ef573a37cb", "patch": "@@ -95,6 +95,11 @@ struct funct_state_d\n   bool can_throw;\n };\n \n+/* State used when we know nothing about function.  */\n+static struct funct_state_d varying_state\n+   = { IPA_NEITHER, IPA_NEITHER, true, true, true };\n+\n+\n typedef struct funct_state_d * funct_state;\n \n /* The storage of the funct_state is abstracted because there is the\n@@ -212,13 +217,12 @@ has_function_state (struct cgraph_node *node)\n static inline funct_state\n get_function_state (struct cgraph_node *node)\n {\n-  static struct funct_state_d varying\n-    = { IPA_NEITHER, IPA_NEITHER, true, true, true };\n   if (!funct_state_vec\n-      || VEC_length (funct_state, funct_state_vec) <= (unsigned int)node->uid)\n+      || VEC_length (funct_state, funct_state_vec) <= (unsigned int)node->uid\n+      || !VEC_index (funct_state, funct_state_vec, node->uid))\n     /* We might want to put correct previously_known state into varying.  */\n-    return &varying;\n-  return VEC_index (funct_state, funct_state_vec, node->uid);\n+    return &varying_state;\n+ return VEC_index (funct_state, funct_state_vec, node->uid);\n }\n \n /* Set the function state S for NODE.  */\n@@ -860,7 +864,9 @@ remove_node_data (struct cgraph_node *node, void *data ATTRIBUTE_UNUSED)\n {\n   if (has_function_state (node))\n     {\n-      free (get_function_state (node));\n+      funct_state l = get_function_state (node);\n+      if (l != &varying_state)\n+        free (l);\n       set_function_state (node, NULL);\n     }\n }"}]}