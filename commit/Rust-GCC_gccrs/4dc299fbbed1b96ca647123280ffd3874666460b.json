{"sha": "4dc299fbbed1b96ca647123280ffd3874666460b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRjMjk5ZmJiZWQxYjk2Y2E2NDcxMjMyODBmZmQzODc0NjY2NDYwYg==", "commit": {"author": {"name": "Per Bothner", "email": "pbothner@apple.com", "date": "2003-10-02T07:23:27Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2003-10-02T07:23:27Z"}, "message": "cppinit.c (cpp_read_main_file): Split into two functions: Distribute _cpp_stack_file call over the two functions.\n\n\n\t* cppinit.c (cpp_read_main_file):  Split into two functions:\n\tDistribute _cpp_stack_file call over the two functions.\n\t(cpp_find_main_file):  New function.\n\tDon't call _cpp_do_file_change even if working_directory flag set.\n\t(cpp_push_main_file):  New function.\n\t* cppfiles.c (_cpp_find_failed):  New helper function.\n\t(find_file):  Made non-static and renamed to _cpp_find_file.\n\t(_cpp_stack_file):  No longer needed.  But note the following.\n\t(stack_file):  Made non-static and renamed to _cpp_stack_file.\n\t* fix-header.c (cpp_read_main_file):  Replace cpp_read_main_file\n\tcall with calls to cpp_find_main_file and cpp_push_main_file.\n\t(search_path_head):  If there is no current buffer, use main_file.\n\t* cpphash.h:  Update function declarations.\n\t* cpplib.h:  Update function declarations.\n\nFrom-SVN: r72014", "tree": {"sha": "d42ac396e3c05ffb67c9335d47f0193aefee767b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d42ac396e3c05ffb67c9335d47f0193aefee767b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dc299fbbed1b96ca647123280ffd3874666460b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc299fbbed1b96ca647123280ffd3874666460b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dc299fbbed1b96ca647123280ffd3874666460b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc299fbbed1b96ca647123280ffd3874666460b/comments", "author": null, "committer": null, "parents": [{"sha": "a506c55cb1000de54bb5a2907e10f31113c46133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a506c55cb1000de54bb5a2907e10f31113c46133", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a506c55cb1000de54bb5a2907e10f31113c46133"}], "stats": {"total": 146, "additions": 83, "deletions": 63}, "files": [{"sha": "e1def568f485d21b372b611eb28f825cb6ebd0b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc299fbbed1b96ca647123280ffd3874666460b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc299fbbed1b96ca647123280ffd3874666460b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4dc299fbbed1b96ca647123280ffd3874666460b", "patch": "@@ -9,6 +9,21 @@\n \t* fix-header.c (cb_file_change):  Likewise.\n \t* c-ppoutput.c (pp_file_change):  Likewise.\n \n+\t* cppinit.c (cpp_read_main_file):  Split into two functions:\n+\tDistribute _cpp_stack_file call over the two functions.\n+\t(cpp_find_main_file):  New function.\n+\tDon't call _cpp_do_file_change even if working_directory flag set.\n+\t(cpp_push_main_file):  New function.\n+\t* cppfiles.c (_cpp_find_failed):  New helper function.\n+\t(find_file):  Made non-static and renamed to _cpp_find_file.\n+\t(_cpp_stack_file):  No longer needed.  But note the following.\n+\t(stack_file):  Made non-static and renamed to _cpp_stack_file.\n+\t* fix-header.c (cpp_read_main_file):  Replace cpp_read_main_file\n+\tcall with calls to cpp_find_main_file and cpp_push_main_file.\n+\t(search_path_head):  If there is no current buffer, use main_file.\n+\t* cpphash.h:  Update function declarations.\n+\t* cpplib.h:  Update function declarations.\n+\n \t* cpplex.c (_cpp_get_fresh_line):  Revert my no-longer-needed\n \t08-28 change, since we're never called with a NULL buffer.\n \t(_cpp_lex_direct):  Likewise."}, {"sha": "e0eaca9239672790032a87e4508cde64000965ab", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc299fbbed1b96ca647123280ffd3874666460b/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc299fbbed1b96ca647123280ffd3874666460b/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=4dc299fbbed1b96ca647123280ffd3874666460b", "patch": "@@ -54,7 +54,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n /* This structure represents a file searched for by CPP, whether it\n    exists or not.  An instance may be pointed to by more than one\n    file_hash_entry; at present no reference count is kept.  */\n-typedef struct _cpp_file _cpp_file;\n struct _cpp_file\n {\n   /* Filename as given to #include or command line switch.  */\n@@ -157,11 +156,8 @@ struct file_hash_entry\n static bool open_file (_cpp_file *file);\n static bool pch_open_file (cpp_reader *pfile, _cpp_file *file);\n static bool find_file_in_dir (cpp_reader *pfile, _cpp_file *file);\n-static _cpp_file *find_file (cpp_reader *, const char *fname,\n-\t\t\t     cpp_dir *start_dir, bool fake);\n static bool read_file_guts (cpp_reader *pfile, _cpp_file *file);\n static bool read_file (cpp_reader *pfile, _cpp_file *file);\n-static bool stack_file (cpp_reader *, _cpp_file *file, bool import);\n static bool should_stack_file (cpp_reader *, _cpp_file *file, bool import);\n static struct cpp_dir *search_path_head (cpp_reader *, const char *fname,\n \t\t\t\t int angle_brackets, enum include_type);\n@@ -330,6 +326,12 @@ find_file_in_dir (cpp_reader *pfile, _cpp_file *file)\n   return false;\n }\n \n+bool\n+_cpp_find_failed (_cpp_file *file)\n+{\n+  return file->err_no != 0;\n+}\n+\n /* Given a filename FNAME search for such a file in the include path\n    starting from START_DIR.  If FNAME is the empty string it is\n    interpreted as STDIN if START_DIR is PFILE->no_seach_path.\n@@ -344,8 +346,8 @@ find_file_in_dir (cpp_reader *pfile, _cpp_file *file)\n    had previously been closed.  To open it again pass the return value\n    to open_file().\n */\n-static _cpp_file *\n-find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool fake)\n+_cpp_file *\n+_cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool fake)\n {\n   struct file_hash_entry *entry, **hash_slot;\n   _cpp_file *file;\n@@ -594,8 +596,8 @@ should_stack_file (cpp_reader *pfile, _cpp_file *file, bool import)\n    stack if possible.  IMPORT is true if this stacking attempt is\n    because of a #import directive.  Returns true if a buffer is\n    stacked.  */\n-static bool\n-stack_file (cpp_reader *pfile, _cpp_file *file, bool import)\n+bool\n+_cpp_stack_file (cpp_reader *pfile, _cpp_file *file, bool import)\n {\n   cpp_buffer *buffer;\n   int sysp;\n@@ -619,8 +621,7 @@ stack_file (cpp_reader *pfile, _cpp_file *file, bool import)\n \n   /* Stack the buffer.  */\n   buffer = cpp_push_buffer (pfile, file->buffer, file->st.st_size,\n-\t\t\t    CPP_OPTION (pfile, preprocessed),\n-\t\t\t    ! pfile->buffer);\n+\t\t\t    CPP_OPTION (pfile, preprocessed));\n   buffer->file = file;\n \n   /* Initialize controlling macro state.  */\n@@ -654,7 +655,8 @@ search_path_head (cpp_reader *pfile, const char *fname, int angle_brackets,\n   if (IS_ABSOLUTE_PATH (fname))\n     return &pfile->no_search_path;\n \n-  file = pfile->buffer->file;\n+  /* pfile->buffer is NULL when processing an -include command-line flag.  */\n+  file = pfile->buffer == NULL ? pfile->main_file : pfile->buffer->file;\n \n   /* For #include_next, skip in the search path past the dir in which\n      the current file was found, but if it was found via an absolute\n@@ -698,16 +700,6 @@ dir_name_of_file (_cpp_file *file)\n   return file->dir_name;\n }\n \n-/* Push an input buffer with the contents of FNAME, the empty string\n-   for standard input.  Return true if a buffer was stacked.  */\n-bool\n-_cpp_stack_file (cpp_reader *pfile, const char *fname)\n-{\n-  struct cpp_dir *dir = &pfile->no_search_path;\n-\n-  return stack_file (pfile, find_file (pfile, fname, dir, false), false);\n-}\n-\n /* Handles #include-family directives (distinguished by TYPE),\n    including HEADER, and the command line -imacros and -include.\n    Returns true if a buffer was stacked.  */\n@@ -721,7 +713,7 @@ _cpp_stack_include (cpp_reader *pfile, const char *fname, int angle_brackets,\n   if (!dir)\n     return false;\n \n-  return stack_file (pfile, find_file (pfile, fname, dir, false),\n+  return _cpp_stack_file (pfile, _cpp_find_file (pfile, fname, dir, false),\n \t\t     type == IT_IMPORT);\n }\n \n@@ -881,7 +873,7 @@ _cpp_cleanup_files (cpp_reader *pfile)\n void\n _cpp_fake_include (cpp_reader *pfile, const char *fname)\n {\n-  find_file (pfile, fname, pfile->buffer->file->dir, true);\n+  _cpp_find_file (pfile, fname, pfile->buffer->file->dir, true);\n }\n \n /* Not everyone who wants to set system-header-ness on a buffer can\n@@ -963,7 +955,7 @@ _cpp_compare_file_date (cpp_reader *pfile, const char *fname,\n   if (!dir)\n     return -1;\n \n-  file = find_file (pfile, fname, dir, false);\n+  file = _cpp_find_file (pfile, fname, dir, false);\n   if (file->err_no)\n     return -1;\n "}, {"sha": "734d3bba4d93b443c22ca13cd2af193615c6a9ea", "filename": "gcc/cpphash.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc299fbbed1b96ca647123280ffd3874666460b/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc299fbbed1b96ca647123280ffd3874666460b/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=4dc299fbbed1b96ca647123280ffd3874666460b", "patch": "@@ -307,11 +307,6 @@ struct cpp_buffer\n      include files has been calculated and stored in \"dir\" below.  */\n   unsigned char search_cached;\n \n-  /* At EOF, a buffer is automatically popped.  If RETURN_AT_EOF is\n-     true, a CPP_EOF token is then returned.  Otherwise, the next\n-     token from the enclosing buffer is returned.  */\n-  bool return_at_eof;\n-\n   /* The directory of the this buffer's file.  Its NAME member is not\n      allocated, so we don't need to worry about freeing it.  */\n   struct cpp_dir dir;\n@@ -362,6 +357,8 @@ struct cpp_reader\n   /* Chain of all hashed _cpp_file instances.  */\n   struct _cpp_file *all_files;\n \n+  struct _cpp_file *main_file;\n+\n   /* File and directory hash table.  */\n   struct htab *file_hash;\n   struct file_hash_entry *file_hash_entries;\n@@ -515,9 +512,13 @@ extern void _cpp_init_hashtable (cpp_reader *, hash_table *);\n extern void _cpp_destroy_hashtable (cpp_reader *);\n \n /* In cppfiles.c */\n+typedef struct _cpp_file _cpp_file;\n+extern _cpp_file *_cpp_find_file (cpp_reader *, const char *fname,\n+\t\t\t\t  cpp_dir *start_dir, bool fake);\n+extern bool _cpp_find_failed (_cpp_file *);\n extern void _cpp_mark_file_once_only (cpp_reader *, struct _cpp_file *);\n extern void _cpp_fake_include (cpp_reader *, const char *);\n-extern bool _cpp_stack_file (cpp_reader *, const char *);\n+extern bool _cpp_stack_file (cpp_reader *, _cpp_file*, bool);\n extern bool _cpp_stack_include (cpp_reader *, const char *, int,\n \t\t\t\tenum include_type);\n extern int _cpp_compare_file_date (cpp_reader *, const char *, int);"}, {"sha": "a2e85b2d2e9767145697f9f682cbbfd472a9bb76", "filename": "gcc/cppinit.c", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc299fbbed1b96ca647123280ffd3874666460b/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc299fbbed1b96ca647123280ffd3874666460b/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=4dc299fbbed1b96ca647123280ffd3874666460b", "patch": "@@ -448,11 +448,10 @@ cpp_post_options (cpp_reader *pfile)\n     mark_named_operators (pfile);\n }\n \n-/* Setup for processing input from the file named FNAME,\n-   or stdin if it is the empty string.  Return the original filename\n-   on success (e.g. foo.i->foo.c), or NULL on failure.  */\n-const char *\n-cpp_read_main_file (cpp_reader *pfile, const char *fname)\n+/* Setup for processing input from the file named FNAME, or stdin if\n+   it is the empty string.  Returns true if the file was found.  */\n+bool\n+cpp_find_main_file (cpp_reader *pfile, const char *fname)\n {\n   if (CPP_OPTION (pfile, deps.style) != DEPS_NONE)\n     {\n@@ -463,22 +462,13 @@ cpp_read_main_file (cpp_reader *pfile, const char *fname)\n       deps_add_default_target (pfile->deps, fname);\n     }\n \n-  if (!_cpp_stack_file (pfile, fname))\n-    return NULL;\n-\n-  /* Set this here so the client can change the option if it wishes,\n-     and after stacking the main file so we don't trace the main\n-     file.  */\n-  pfile->line_maps.trace_includes = CPP_OPTION (pfile, print_include_names);\n-\n-  /* For foo.i, read the original filename foo.c now, for the benefit\n-     of the front ends.  */\n-  if (CPP_OPTION (pfile, preprocessed))\n-    read_original_filename (pfile);\n+  pfile->main_file\n+    = _cpp_find_file (pfile, fname, &pfile->no_search_path, false);\n+  if (_cpp_find_failed (pfile->main_file))\n+    return false;\n \n   if (CPP_OPTION (pfile, working_directory))\n     {\n-      const char *name = pfile->map->to_file;\n       const char *dir = getpwd ();\n       char *dir_with_slashes = alloca (strlen (dir) + 3);\n \n@@ -487,14 +477,27 @@ cpp_read_main_file (cpp_reader *pfile, const char *fname)\n \n       if (pfile->cb.dir_change)\n \tpfile->cb.dir_change (pfile, dir);\n-      /* Emit file renames that will be recognized by\n-\t read_directory_filename, since dir_change doesn't output\n-\t anything.  */\n-      _cpp_do_file_change (pfile, LC_RENAME, dir_with_slashes, 1, 0);\n-      _cpp_do_file_change (pfile, LC_RENAME, name, 1, 0);\n     }\n+  return true;\n+}\n \n-  return pfile->map->to_file;\n+/* This function reads the file, but does not start preprocessing.\n+   This will generate at least one file change callback, and possibly\n+   a line change callback.  */\n+void\n+cpp_push_main_file (cpp_reader *pfile)\n+{\n+  _cpp_stack_file (pfile, pfile->main_file, false);\n+\n+  /* For foo.i, read the original filename foo.c now, for the benefit\n+     of the front ends.  */\n+  if (CPP_OPTION (pfile, preprocessed))\n+    read_original_filename (pfile);\n+\n+  /* Set this here so the client can change the option if it wishes,\n+     and after stacking the main file so we don't trace the main\n+     file.  */\n+  pfile->line_maps.trace_includes = CPP_OPTION (pfile, print_include_names);\n }\n \n /* For preprocessed files, if the first tokens are of the form # NUM."}, {"sha": "15187c49078f0169152da3a6d3c9e7bec4e6fc46", "filename": "gcc/cpplib.h", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc299fbbed1b96ca647123280ffd3874666460b/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc299fbbed1b96ca647123280ffd3874666460b/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=4dc299fbbed1b96ca647123280ffd3874666460b", "patch": "@@ -382,7 +382,13 @@ struct cpp_callbacks\n {\n   /* Called when a new line of preprocessed output is started.  */\n   void (*line_change) (cpp_reader *, const cpp_token *, int);\n+\n+  /* Called when switching to/from a new file.\n+     The line_map is for the new file.  It is NULL if there is no new file.\n+     (In C this happens when done with <built-in>+<command line> and also\n+     when done with a main file.)  This can be used for resource cleanup.  */\n   void (*file_change) (cpp_reader *, const struct line_map *);\n+\n   void (*dir_change) (cpp_reader *, const char *);\n   void (*include) (cpp_reader *, unsigned int, const unsigned char *,\n \t\t   const char *, int);\n@@ -526,12 +532,14 @@ extern const struct line_maps *cpp_get_line_maps (cpp_reader *);\n extern cpp_callbacks *cpp_get_callbacks (cpp_reader *);\n extern void cpp_set_callbacks (cpp_reader *, cpp_callbacks *);\n \n-/* This function reads the file, but does not start preprocessing.  It\n-   returns the name of the original file; this is the same as the\n-   input file, except for preprocessed input.  This will generate at\n-   least one file change callback, and possibly a line change callback\n-   too.  If there was an error opening the file, it returns NULL.  */\n-extern const char *cpp_read_main_file (cpp_reader *, const char *);\n+/* This function finds the main file, but does not start reading it.\n+   Returns true iff the file was found.  */\n+extern bool cpp_find_main_file (cpp_reader *, const char *);\n+\n+/* This function reads the file, but does not start preprocessing.\n+   This will generate at least one file change callback, and possibly\n+   a line change callback.  */\n+extern void cpp_push_main_file (cpp_reader *);\n \n /* Set up built-ins like __FILE__.  */\n extern void cpp_init_builtins (cpp_reader *, int);\n@@ -590,7 +598,7 @@ extern void cpp_unassert (cpp_reader *, const char *);\n extern void cpp_undef_all (cpp_reader *);\n \n extern cpp_buffer *cpp_push_buffer (cpp_reader *, const unsigned char *,\n-\t\t\t\t    size_t, int, int);\n+\t\t\t\t    size_t, int);\n extern int cpp_defined (cpp_reader *, const unsigned char *, int);\n \n /* A preprocessing number.  Code assumes that any unused high bits of"}, {"sha": "7fdecb5d1509f4e6fadc5394496685098340d4ee", "filename": "gcc/fix-header.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc299fbbed1b96ca647123280ffd3874666460b/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc299fbbed1b96ca647123280ffd3874666460b/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=4dc299fbbed1b96ca647123280ffd3874666460b", "patch": "@@ -604,8 +604,9 @@ read_scan_file (char *in_fname, int argc, char **argv)\n   options->inhibit_errors = 1;\n   cpp_post_options (scan_in);\n \n-  if (! cpp_read_main_file (scan_in, in_fname))\n+  if (!cpp_find_main_file (scan_in, in_fname))\n     exit (FATAL_EXIT_CODE);\n+  cpp_push_main_file (scan_in);\n \n   cpp_change_file (scan_in, LC_RENAME, \"<built-in>\");\n   cpp_init_builtins (scan_in, true);\n@@ -669,7 +670,7 @@ read_scan_file (char *in_fname, int argc, char **argv)\n \n       /* Scan the macro expansion of \"getchar();\".  */\n       cpp_push_buffer (scan_in, getchar_call, sizeof(getchar_call) - 1,\n-\t\t       /* from_stage3 */ true, 1);\n+\t\t       /* from_stage3 */ true);\n       for (;;)\n \t{\n \t  const cpp_token *t = cpp_get_token (scan_in);"}]}