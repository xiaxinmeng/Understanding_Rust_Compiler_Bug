{"sha": "63d7ceaaba06f2b35d82e1e62fc9b8f2fe474857", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNkN2NlYWFiYTA2ZjJiMzVkODJlMWU2MmZjOWI4ZjJmZTQ3NDg1Nw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-01-31T09:46:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-01-31T09:46:29Z"}, "message": "re PR tree-optimization/51528 (SRA should not create BOOLEAN_TYPE replacements)\n\n2012-01-31  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/51528\n\t* tree-sra.c (sra_modify_assign): Avoid copy-in/out for aggregate\n\tassigns.\n\n\t* gcc.dg/torture/pr51528.c: New testcase.\n\nFrom-SVN: r183752", "tree": {"sha": "5ea0c479621776b2adb1ff8b939a8a4d8d9a54de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ea0c479621776b2adb1ff8b939a8a4d8d9a54de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63d7ceaaba06f2b35d82e1e62fc9b8f2fe474857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d7ceaaba06f2b35d82e1e62fc9b8f2fe474857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63d7ceaaba06f2b35d82e1e62fc9b8f2fe474857", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d7ceaaba06f2b35d82e1e62fc9b8f2fe474857/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68c8a82477988ada951229f60840a7c01fa8b009", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c8a82477988ada951229f60840a7c01fa8b009", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68c8a82477988ada951229f60840a7c01fa8b009"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "ce93b26a7689260eee77aebfabe56183f66b6f50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d7ceaaba06f2b35d82e1e62fc9b8f2fe474857/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d7ceaaba06f2b35d82e1e62fc9b8f2fe474857/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63d7ceaaba06f2b35d82e1e62fc9b8f2fe474857", "patch": "@@ -1,3 +1,9 @@\n+2012-01-31  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/51528\n+\t* tree-sra.c (sra_modify_assign): Avoid copy-in/out for aggregate\n+\tassigns.\n+\n 2012-01-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/52041"}, {"sha": "77c86391983371293eaf84cd2cd8e6a3aa13eb53", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d7ceaaba06f2b35d82e1e62fc9b8f2fe474857/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d7ceaaba06f2b35d82e1e62fc9b8f2fe474857/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=63d7ceaaba06f2b35d82e1e62fc9b8f2fe474857", "patch": "@@ -1,3 +1,8 @@\n+2012-01-31  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/51528\n+\t* gcc.dg/torture/pr51528.c: New testcase.\n+\n 2012-01-30  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR go/48501"}, {"sha": "db5f3e0cadd18d9bbddc7db0f1aeacfd95c944c3", "filename": "gcc/testsuite/gcc.dg/torture/pr51528.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d7ceaaba06f2b35d82e1e62fc9b8f2fe474857/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51528.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d7ceaaba06f2b35d82e1e62fc9b8f2fe474857/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51528.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51528.c?ref=63d7ceaaba06f2b35d82e1e62fc9b8f2fe474857", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-early-inlining\" } */\n+\n+extern void abort (void);\n+\n+union U\n+{\n+  int i;\n+  _Bool b;\n+};\n+\n+_Bool gb;\n+\n+void  __attribute__ ((noinline))\n+use_bool (union U u)\n+{\n+  gb = u.b;\n+}\n+\n+union U\n+bar (void)\n+{\n+  union U u;\n+  u.i = 0xFFFE;\n+  return u;\n+}\n+\n+union U  __attribute__ ((noinline))\n+foo (void)\n+{\n+  union U u,v;\n+\n+  u.b = 1;\n+  use_bool (u);\n+  u = bar ();\n+\n+  return u;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  union U u = foo ();\n+  if (u.i != 0xFFFE)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "e3bf38230dc7d4180f4e98060eaf5ced9dc5ad08", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d7ceaaba06f2b35d82e1e62fc9b8f2fe474857/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d7ceaaba06f2b35d82e1e62fc9b8f2fe474857/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=63d7ceaaba06f2b35d82e1e62fc9b8f2fe474857", "patch": "@@ -3135,9 +3135,14 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n \t      sra_stats.deleted++;\n \t      return SRA_AM_REMOVED;\n \t    }\n+\t  /* Restore the aggregate RHS from its components so the\n+\t     prevailing aggregate copy does the right thing.  */\n \t  if (access_has_children_p (racc))\n-\t    generate_subtree_copies (racc->first_child, lhs, racc->offset,\n-\t\t\t\t     0, 0, gsi, false, true, loc);\n+\t    generate_subtree_copies (racc->first_child, racc->base, 0, 0, 0,\n+\t\t\t\t     gsi, false, false, loc);\n+\t  /* Re-load the components of the aggregate copy destination.\n+\t     But use the RHS aggregate to load from to expose more\n+\t     optimization opportunities.  */\n \t  if (access_has_children_p (lacc))\n \t    generate_subtree_copies (lacc->first_child, rhs, lacc->offset,\n \t\t\t\t     0, 0, gsi, true, true, loc);"}]}