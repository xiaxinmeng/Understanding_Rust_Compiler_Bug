{"sha": "fe0604d349c4d9eb18b17dd018383d591eed67c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUwNjA0ZDM0OWM0ZDllYjE4YjE3ZGQwMTgzODNkNTkxZWVkNjdjNw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2018-04-11T13:10:16Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-04-11T13:10:16Z"}, "message": "re PR c++/85032 (Wrong non-constant condition for static assertion)\n\n\tPR c++/85032\n\t* constexpr.c (potential_constant_expression_1): Consider conversions\n\tfrom classes to literal types potentially constant.\n\n\t* g++.dg/cpp0x/pr51225.C: Adjust error message.\n\t* g++.dg/cpp1z/constexpr-if21.C: New test.\n\nFrom-SVN: r259318", "tree": {"sha": "d7f57dd15cf204ad849d48116e131e9bfa30ab5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7f57dd15cf204ad849d48116e131e9bfa30ab5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe0604d349c4d9eb18b17dd018383d591eed67c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe0604d349c4d9eb18b17dd018383d591eed67c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe0604d349c4d9eb18b17dd018383d591eed67c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe0604d349c4d9eb18b17dd018383d591eed67c7/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c7b865120aa05bb23a825e46597c85279fc5761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c7b865120aa05bb23a825e46597c85279fc5761", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c7b865120aa05bb23a825e46597c85279fc5761"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "e9a32b0d204006225c165d9f1994e122b8325686", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0604d349c4d9eb18b17dd018383d591eed67c7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0604d349c4d9eb18b17dd018383d591eed67c7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fe0604d349c4d9eb18b17dd018383d591eed67c7", "patch": "@@ -1,3 +1,9 @@\n+2018-04-11  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/85032\n+\t* constexpr.c (potential_constant_expression_1): Consider conversions\n+\tfrom classes to literal types potentially constant.\n+\n 2018-04-10  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/70808"}, {"sha": "75f56df4465e26c91e6145e3a7df52c4155fd376", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0604d349c4d9eb18b17dd018383d591eed67c7/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0604d349c4d9eb18b17dd018383d591eed67c7/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=fe0604d349c4d9eb18b17dd018383d591eed67c7", "patch": "@@ -5777,6 +5777,25 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \t\t      TREE_TYPE (t));\n \t  return false;\n \t}\n+      /* This might be a conversion from a class to a (potentially) literal\n+\t type.  Let's consider it potentially constant since the conversion\n+\t might be a constexpr user-defined conversion.  */\n+      else if (cxx_dialect >= cxx11\n+\t       && (dependent_type_p (TREE_TYPE (t))\n+\t\t   || !COMPLETE_TYPE_P (TREE_TYPE (t))\n+\t\t   || literal_type_p (TREE_TYPE (t)))\n+\t       && TREE_OPERAND (t, 0))\n+\t{\n+\t  tree type = TREE_TYPE (TREE_OPERAND (t, 0));\n+\t  /* If this is a dependent type, it could end up being a class\n+\t     with conversions.  */\n+\t  if (type == NULL_TREE || WILDCARD_TYPE_P (type))\n+\t    return true;\n+\t  /* Or a non-dependent class which has conversions.  */\n+\t  else if (CLASS_TYPE_P (type)\n+\t\t   && (TYPE_HAS_CONVERSION (type) || dependent_scope_p (type)))\n+\t    return true;\n+\t}\n \n       return (RECUR (TREE_OPERAND (t, 0),\n \t\t     TREE_CODE (TREE_TYPE (t)) != REFERENCE_TYPE));"}, {"sha": "186986aafe4f231c21dae3b958d277aad794950d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0604d349c4d9eb18b17dd018383d591eed67c7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0604d349c4d9eb18b17dd018383d591eed67c7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fe0604d349c4d9eb18b17dd018383d591eed67c7", "patch": "@@ -1,3 +1,9 @@\n+2018-04-11  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/85032\n+\t* g++.dg/cpp0x/pr51225.C: Adjust error message.\n+\t* g++.dg/cpp1z/constexpr-if21.C: New test.\n+\n 2018-04-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/85281"}, {"sha": "5b4e432f7edad849340c8be5cd46b51e08b91705", "filename": "gcc/testsuite/g++.dg/cpp0x/pr51225.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0604d349c4d9eb18b17dd018383d591eed67c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr51225.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0604d349c4d9eb18b17dd018383d591eed67c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr51225.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr51225.C?ref=fe0604d349c4d9eb18b17dd018383d591eed67c7", "patch": "@@ -5,7 +5,7 @@ template<int> struct A {};\n \n template<typename> void foo()\n {\n-  A<int(x)> a; // { dg-error \"not declared|invalid type\" }\n+  A<int(x)> a; // { dg-error \"not declared|could not convert\" }\n }\n \n template<typename> struct bar"}, {"sha": "56e108be4ad5da7b0f2064dd48993da74002dd97", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if21.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0604d349c4d9eb18b17dd018383d591eed67c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0604d349c4d9eb18b17dd018383d591eed67c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if21.C?ref=fe0604d349c4d9eb18b17dd018383d591eed67c7", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/85032\n+// { dg-options -std=c++17 }\n+\n+struct A\n+{\n+  constexpr operator bool () { return true; }\n+  int i;\n+};\n+\n+A a;\n+\n+template <class T>\n+void f()\n+{\n+  constexpr bool b = a;\n+  static_assert (a);\n+}\n+\n+int main()\n+{\n+  f<int>();\n+}"}]}