{"sha": "2e246150217cf0b2d963c50e15a9a7ff0b3501b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUyNDYxNTAyMTdjZjBiMmQ5NjNjNTBlMTVhOWE3ZmYwYjM1MDFiOQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-06-10T21:50:47Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-06-10T21:50:47Z"}, "message": "ptrmem.C: Take into account different representation on MN10300 and ARM/Thumb.\n\n* g++.old-deja/g++.abi/ptrmem.C: Take into account different\nrepresentation on MN10300 and ARM/Thumb.\n\nFrom-SVN: r43157", "tree": {"sha": "329e7ff28aa2bb3eb8569a78a41f6e29db880a02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/329e7ff28aa2bb3eb8569a78a41f6e29db880a02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e246150217cf0b2d963c50e15a9a7ff0b3501b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e246150217cf0b2d963c50e15a9a7ff0b3501b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e246150217cf0b2d963c50e15a9a7ff0b3501b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e246150217cf0b2d963c50e15a9a7ff0b3501b9/comments", "author": null, "committer": null, "parents": [{"sha": "eb2d06144aede2d0cef5e937b2f4c40b30d35ead", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb2d06144aede2d0cef5e937b2f4c40b30d35ead", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb2d06144aede2d0cef5e937b2f4c40b30d35ead"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "467a5e4316f187e4980d735232ee7e3333fc35a2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e246150217cf0b2d963c50e15a9a7ff0b3501b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e246150217cf0b2d963c50e15a9a7ff0b3501b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e246150217cf0b2d963c50e15a9a7ff0b3501b9", "patch": "@@ -1,3 +1,8 @@\n+2001-06-10  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* g++.old-deja/g++.abi/ptrmem.C: Take into account different\n+\trepresentation on MN10300 and ARM/Thumb.\n+\n 2001-06-10  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \t* g77.f-torture/execute/20010610.f: New."}, {"sha": "6bef481d8cf9dac0566dd1d06df273accf8c11b9", "filename": "gcc/testsuite/g++.old-deja/g++.abi/ptrmem.C", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e246150217cf0b2d963c50e15a9a7ff0b3501b9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fptrmem.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e246150217cf0b2d963c50e15a9a7ff0b3501b9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fptrmem.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fptrmem.C?ref=2e246150217cf0b2d963c50e15a9a7ff0b3501b9", "patch": "@@ -1,6 +1,19 @@\n // Special g++ Options: -fno-strict-aliasing\n // Origin: Mark Mitchell <mark@codesourcery.com>\n \n+/* Generally, the lowest bit of the ptr is used to indicate whether a\n+   ptr-to-mem-func points to a virtual or a non-virtual member\n+   function.  However, some platforms use all bits to encode a\n+   function pointer.  Such platforms use the lowest bit of the delta,\n+   that is shifted left by one bit.  */\n+#if defined __MN10300__ || defined __arm__ || defined __thumb__\n+#define ADJUST_PTRFN(func, virt) ((void (*)())(func))\n+#define ADJUST_DELTA(delta, virt) (((delta) << 1) + !!(virt))\n+#else\n+#define ADJUST_PTRFN(func, virt) ((void (*)())((ptrdiff_t)(func) + !!(virt)))\n+#define ADJUST_DELTA(delta, virt) (delta)\n+#endif\n+\n #if defined (__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100\n \n // Check that pointers-to-member functions are represented correctly.\n@@ -72,28 +85,28 @@ main ()\n   // There should be no adjustment for the `T' version, and an\n   // appropriate adjustment for the `S' version.\n   y = &T::f;\n-  if (yp->ptr != &_ZN1T1fEv)\n+  if (yp->ptr != ADJUST_PTRFN (&_ZN1T1fEv, 0))\n     return 5;\n-  if (yp->adj != 0)\n+  if (yp->adj != ADJUST_DELTA (0, 0))\n     return 6;\n   x = (sp) y;\n-  if (xp->ptr != &_ZN1T1fEv)\n+  if (xp->ptr != ADJUST_PTRFN (&_ZN1T1fEv, 0))\n     return 7;\n-  if (xp->adj != delta)\n+  if (xp->adj != ADJUST_DELTA (delta, 0))\n     return 8;\n \n   // For a virtual function, we should see the vtable offset, plus\n   // one.  `T::h' is in the second slot: the vtable pointer points to\n   // the first virtual function.\n   y = &T::h;\n-  if ((ptrdiff_t) yp->ptr != sizeof (void *) + 1)\n+  if (yp->ptr != ADJUST_PTRFN (sizeof (void *), 1))\n     return 9;\n-  if (yp->adj != 0)\n+  if (yp->adj != ADJUST_DELTA (0, 1))\n     return 10;\n   x = (sp) y;\n-  if ((ptrdiff_t) xp->ptr != sizeof (void *) + 1)\n+  if (xp->ptr != ADJUST_PTRFN (sizeof (void *), 1))\n     return 11;\n-  if (xp->adj != delta)\n+  if (xp->adj != ADJUST_DELTA (delta, 1))\n     return 12;\n \n   // Pointers-to-data-members should have the same size and alignment"}]}