{"sha": "af2e447568c939acf8c55eea529b2ac85c5753a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYyZTQ0NzU2OGM5MzlhY2Y4YzU1ZWVhNTI5YjJhYzg1YzU3NTNhNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-28T20:40:20Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-28T20:40:20Z"}, "message": "Use valid_for_const_vector_p instead of CONSTANT_P\n\nThis patch makes the VEC_SERIES code use valid_for_const_vector_p\ninstead of CONSTANT_P, to match what we already do for VEC_DUPLICATE.\nThis showed up as a failure in gcc.c-torture/execute/pr28982b.c for -m32\non x86_64-linux-gnu after later patches.\n\n2017-12-28  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* emit-rtl.c (gen_const_vec_series): Use valid_for_const_vector_p\n\tinstead of CONSTANT_P.\n\t(gen_vec_series): Likewise.\n\t* simplify-rtx.c (simplify_binary_operation_1): Likewise.\n\nFrom-SVN: r256023", "tree": {"sha": "a9682ab03a517c2a70ef33df8167d667e33d86da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9682ab03a517c2a70ef33df8167d667e33d86da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af2e447568c939acf8c55eea529b2ac85c5753a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af2e447568c939acf8c55eea529b2ac85c5753a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af2e447568c939acf8c55eea529b2ac85c5753a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af2e447568c939acf8c55eea529b2ac85c5753a7/comments", "author": null, "committer": null, "parents": [{"sha": "4e48b472ed4ee625e68bcf5080d050151d6e3ab4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e48b472ed4ee625e68bcf5080d050151d6e3ab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e48b472ed4ee625e68bcf5080d050151d6e3ab4"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "680a63a3c8239c295fbda6fba6d8d89f33e091f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af2e447568c939acf8c55eea529b2ac85c5753a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af2e447568c939acf8c55eea529b2ac85c5753a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af2e447568c939acf8c55eea529b2ac85c5753a7", "patch": "@@ -1,3 +1,10 @@\n+2017-12-28  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* emit-rtl.c (gen_const_vec_series): Use valid_for_const_vector_p\n+\tinstead of CONSTANT_P.\n+\t(gen_vec_series): Likewise.\n+\t* simplify-rtx.c (simplify_binary_operation_1): Likewise.\n+\n 2017-12-28  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* config/m68k/m68k.md (ashrdi3_const1, lshrdi3_const1): Add"}, {"sha": "20847015dd72edb94ca73c42d7bd9567a0c245a1", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af2e447568c939acf8c55eea529b2ac85c5753a7/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af2e447568c939acf8c55eea529b2ac85c5753a7/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=af2e447568c939acf8c55eea529b2ac85c5753a7", "patch": "@@ -5949,7 +5949,8 @@ const_vec_series_p_1 (const_rtx x, rtx *base_out, rtx *step_out)\n rtx\n gen_const_vec_series (machine_mode mode, rtx base, rtx step)\n {\n-  gcc_assert (CONSTANT_P (base) && CONSTANT_P (step));\n+  gcc_assert (valid_for_const_vector_p (mode, base)\n+\t      && valid_for_const_vector_p (mode, step));\n \n   int nunits = GET_MODE_NUNITS (mode);\n   rtvec v = rtvec_alloc (nunits);\n@@ -5970,7 +5971,8 @@ gen_vec_series (machine_mode mode, rtx base, rtx step)\n {\n   if (step == const0_rtx)\n     return gen_vec_duplicate (mode, base);\n-  if (CONSTANT_P (base) && CONSTANT_P (step))\n+  if (valid_for_const_vector_p (mode, base)\n+      && valid_for_const_vector_p (mode, step))\n     return gen_const_vec_series (mode, base, step);\n   return gen_rtx_VEC_SERIES (mode, base, step);\n }"}, {"sha": "e5cfd3d2bc21ffa673bf7f14278b879b0bd5d442", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af2e447568c939acf8c55eea529b2ac85c5753a7/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af2e447568c939acf8c55eea529b2ac85c5753a7/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=af2e447568c939acf8c55eea529b2ac85c5753a7", "patch": "@@ -3590,7 +3590,8 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n     case VEC_SERIES:\n       if (op1 == CONST0_RTX (GET_MODE_INNER (mode)))\n \treturn gen_vec_duplicate (mode, op0);\n-      if (CONSTANT_P (op0) && CONSTANT_P (op1))\n+      if (valid_for_const_vector_p (mode, op0)\n+\t  && valid_for_const_vector_p (mode, op1))\n \treturn gen_const_vec_series (mode, op0, op1);\n       return 0;\n "}]}