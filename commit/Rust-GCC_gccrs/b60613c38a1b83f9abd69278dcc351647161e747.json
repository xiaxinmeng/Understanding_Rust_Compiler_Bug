{"sha": "b60613c38a1b83f9abd69278dcc351647161e747", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYwNjEzYzM4YTFiODNmOWFiZDY5Mjc4ZGNjMzUxNjQ3MTYxZTc0Nw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-28T19:51:34Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-28T19:51:34Z"}, "message": "fr30-protos.h (fr30_num_arg_regs): Delete.\n\n\t* config/fr30/fr30-protos.h (fr30_num_arg_regs): Delete.\n\t* config/fr30/fr30.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n\t* config/fr30/fr30.c (fr30_num_arg_regs): Make static.  Take a\n\tconst_tree.\n\t(fr30_function_arg): New function.\n\t(fr30_function_arg_advance): New function.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r166034", "tree": {"sha": "33ce75b014a5ad1ad390bfc2c63af0beb3012939", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33ce75b014a5ad1ad390bfc2c63af0beb3012939"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b60613c38a1b83f9abd69278dcc351647161e747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b60613c38a1b83f9abd69278dcc351647161e747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b60613c38a1b83f9abd69278dcc351647161e747", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b60613c38a1b83f9abd69278dcc351647161e747/comments", "author": null, "committer": null, "parents": [{"sha": "88a1f47fae962c02535f5422d1298a385be92c86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a1f47fae962c02535f5422d1298a385be92c86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88a1f47fae962c02535f5422d1298a385be92c86"}], "stats": {"total": 70, "additions": 48, "deletions": 22}, "files": [{"sha": "e8737d401554636621322f62415725494f651468", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b60613c38a1b83f9abd69278dcc351647161e747/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b60613c38a1b83f9abd69278dcc351647161e747/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b60613c38a1b83f9abd69278dcc351647161e747", "patch": "@@ -1,3 +1,13 @@\n+2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/fr30/fr30-protos.h (fr30_num_arg_regs): Delete.\n+\t* config/fr30/fr30.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n+\t* config/fr30/fr30.c (fr30_num_arg_regs): Make static.  Take a\n+\tconst_tree.\n+\t(fr30_function_arg): New function.\n+\t(fr30_function_arg_advance): New function.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/frv/frv-protos.h (frv_function_arg): Delete."}, {"sha": "37fc2a2d2c5324b9a3789048dcd7360d76e46470", "filename": "gcc/config/fr30/fr30-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b60613c38a1b83f9abd69278dcc351647161e747/gcc%2Fconfig%2Ffr30%2Ffr30-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b60613c38a1b83f9abd69278dcc351647161e747/gcc%2Fconfig%2Ffr30%2Ffr30-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30-protos.h?ref=b60613c38a1b83f9abd69278dcc351647161e747", "patch": "@@ -26,9 +26,6 @@ extern int   fr30_check_multiple_regs (rtx *, int, int);\n extern void  fr30_print_operand (FILE *, rtx, int);\n extern void  fr30_print_operand_address (FILE *, rtx);\n extern rtx   fr30_move_double (rtx *);\n-#ifdef TREE_CODE\n-extern int   fr30_num_arg_regs (enum machine_mode, tree);\n-#endif /* TREE_CODE */\n #ifdef HAVE_MACHINE_MODES\n #define Mmode enum machine_mode\n extern int   fr30_const_double_is_zero (rtx);"}, {"sha": "95bbd61d2607e2e95350e383d16efb9888778d1c", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b60613c38a1b83f9abd69278dcc351647161e747/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b60613c38a1b83f9abd69278dcc351647161e747/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=b60613c38a1b83f9abd69278dcc351647161e747", "patch": "@@ -119,10 +119,15 @@ static void fr30_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n static bool fr30_must_pass_in_stack (enum machine_mode, const_tree);\n static int fr30_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   tree, bool);\n+static rtx fr30_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t      const_tree, bool);\n+static void fr30_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t       const_tree, bool);\n static bool fr30_frame_pointer_required (void);\n static bool fr30_can_eliminate (const int, const int);\n static void fr30_asm_trampoline_template (FILE *);\n static void fr30_trampoline_init (rtx, tree, rtx);\n+static int fr30_num_arg_regs (enum machine_mode, const_tree);\n \n #define FRAME_POINTER_MASK \t(1 << (FRAME_POINTER_REGNUM))\n #define RETURN_POINTER_MASK \t(1 << (RETURN_POINTER_REGNUM))\n@@ -162,6 +167,10 @@ static const struct default_options fr30_option_optimization_table[] =\n #define TARGET_PASS_BY_REFERENCE hook_pass_by_reference_must_pass_in_stack\n #undef  TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES fr30_arg_partial_bytes\n+#undef  TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG fr30_function_arg\n+#undef  TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE fr30_function_arg_advance\n \n #undef  TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS fr30_setup_incoming_varargs\n@@ -711,8 +720,8 @@ fr30_must_pass_in_stack (enum machine_mode mode, const_tree type)\n \n /* Compute the number of word sized registers needed to hold a\n    function argument of mode INT_MODE and tree type TYPE.  */\n-int\n-fr30_num_arg_regs (enum machine_mode mode, tree type)\n+static int\n+fr30_num_arg_regs (enum machine_mode mode, const_tree type)\n {\n   int size;\n \n@@ -756,6 +765,33 @@ fr30_arg_partial_bytes (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   return (FR30_NUM_ARG_REGS - *cum) * UNITS_PER_WORD;\n }\n \n+static rtx\n+fr30_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t   const_tree type, bool named)\n+{\n+  if (!named\n+      || fr30_must_pass_in_stack (mode, type)\n+      || *cum >= FR30_NUM_ARG_REGS)\n+    return NULL_RTX;\n+  else\n+    return gen_rtx_REG (mode, *cum + FIRST_ARG_REGNUM);\n+}\n+\n+/* A C statement (sans semicolon) to update the summarizer variable CUM to\n+   advance past an argument in the argument list.  The values MODE, TYPE and\n+   NAMED describe that argument.  Once this is done, the variable CUM is\n+   suitable for analyzing the *following* argument with `FUNCTION_ARG', etc.\n+\n+   This macro need not do anything if the argument in question was passed on\n+   the stack.  The compiler knows how to track the amount of stack space used\n+   for arguments without any special help.  */\n+static void\n+fr30_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t   const_tree type, bool named)\n+{\n+  *cum += named * fr30_num_arg_regs (mode, type);\n+}\n+\n /*}}}*/\n /*{{{  Operand predicates */ \n "}, {"sha": "0ea72fd8c7c697234b51be6846c38b12b5f444c3", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b60613c38a1b83f9abd69278dcc351647161e747/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b60613c38a1b83f9abd69278dcc351647161e747/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=b60613c38a1b83f9abd69278dcc351647161e747", "patch": "@@ -555,12 +555,6 @@ enum reg_class\n      \n #define FR30_NUM_ARG_REGS\t 4\n \n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED)\t\t\t\\\n-  (  (NAMED) == 0                    ? NULL_RTX\t\t\t\\\n-   : targetm.calls.must_pass_in_stack (MODE, TYPE) ? NULL_RTX\t\\\n-   : (CUM) >= FR30_NUM_ARG_REGS      ? NULL_RTX\t\t\t\\\n-   : gen_rtx_REG (MODE, CUM + FIRST_ARG_REGNUM))\n-\n /* A C type for declaring a variable that is used as the first argument of\n    `FUNCTION_ARG' and other related values.  For some target machines, the type\n    `int' suffices and can hold the number of bytes of argument so far.\n@@ -594,17 +588,6 @@ enum reg_class\n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n   (CUM) = 0\n \n-/* A C statement (sans semicolon) to update the summarizer variable CUM to\n-   advance past an argument in the argument list.  The values MODE, TYPE and\n-   NAMED describe that argument.  Once this is done, the variable CUM is\n-   suitable for analyzing the *following* argument with `FUNCTION_ARG', etc.\n-\n-   This macro need not do anything if the argument in question was passed on\n-   the stack.  The compiler knows how to track the amount of stack space used\n-   for arguments without any special help.  */\n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\t\t\\\n-  (CUM) += (NAMED) * fr30_num_arg_regs (MODE, TYPE)\n-\n /* A C expression that is nonzero if REGNO is the number of a hard register in\n    which function arguments are sometimes passed.  This does *not* include\n    implicit arguments such as the static chain and the structure-value address."}]}