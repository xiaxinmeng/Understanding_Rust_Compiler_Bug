{"sha": "840992bdc20effc919b96522ab4f82fd96087939", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQwOTkyYmRjMjBlZmZjOTE5Yjk2NTIyYWI0ZjgyZmQ5NjA4NzkzOQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-02-13T18:33:32Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-02-13T18:33:32Z"}, "message": "re PR middle-end/24427 (missing optimization opportunity with binary operators)\n\n\n\tPR middle-end/24427\n\t* fold-const.c (fold_binary) <BIT_IOR_EXPR>: Transform (X&C1)|C2\n\tinto (X,C2) if C1 is a subset of the bits of C2.  Transform\n\t(X&C1)|C2 into X|C2 if C1|C2 == ~0.  Canonicalize (X&C1)|C2 as\n\t(X&(C1&~C2))|C2.\n\t<BIT_AND_EXPR>: Canonicalize (X|C1)&C2 as (X&C2)|(C1&C2).\n\n\t* gcc.dg/tree-ssa/andor-1.c: New test case.\n\nFrom-SVN: r110918", "tree": {"sha": "d38a31a2f50f89e4589d53b8f378f0319c82ce34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d38a31a2f50f89e4589d53b8f378f0319c82ce34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/840992bdc20effc919b96522ab4f82fd96087939", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/840992bdc20effc919b96522ab4f82fd96087939", "html_url": "https://github.com/Rust-GCC/gccrs/commit/840992bdc20effc919b96522ab4f82fd96087939", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/840992bdc20effc919b96522ab4f82fd96087939/comments", "author": null, "committer": null, "parents": [{"sha": "4c553323a6f4d90e48002ea23b7f779c106ad620", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c553323a6f4d90e48002ea23b7f779c106ad620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c553323a6f4d90e48002ea23b7f779c106ad620"}], "stats": {"total": 136, "additions": 136, "deletions": 0}, "files": [{"sha": "a5c9761dc4681096cebb01b9ed5ce1415cbd18b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840992bdc20effc919b96522ab4f82fd96087939/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840992bdc20effc919b96522ab4f82fd96087939/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=840992bdc20effc919b96522ab4f82fd96087939", "patch": "@@ -1,3 +1,12 @@\n+2006-02-13  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/24427\n+\t* fold-const.c (fold_binary) <BIT_IOR_EXPR>: Transform (X&C1)|C2\n+\tinto (X,C2) if C1 is a subset of the bits of C2.  Transform\n+\t(X&C1)|C2 into X|C2 if C1|C2 == ~0.  Canonicalize (X&C1)|C2 as\n+\t(X&(C1&~C2))|C2.\n+\t<BIT_AND_EXPR>: Canonicalize (X|C1)&C2 as (X&C2)|(C1&C2).\n+\n 2006-02-13  Josh Conner  <jconner@apple.com>\n \n \tPR target/25376"}, {"sha": "03c9d1c17e575946f0cc2725697b9cd6243e0a9d", "filename": "gcc/fold-const.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840992bdc20effc919b96522ab4f82fd96087939/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840992bdc20effc919b96522ab4f82fd96087939/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=840992bdc20effc919b96522ab4f82fd96087939", "patch": "@@ -8114,6 +8114,53 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t  return omit_one_operand (type, t1, arg0);\n \t}\n \n+      /* Canonicalize (X & C1) | C2.  */\n+      if (TREE_CODE (arg0) == BIT_AND_EXPR\n+\t  && TREE_CODE (arg1) == INTEGER_CST\n+\t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST)\n+\t{\n+\t  unsigned HOST_WIDE_INT hi1, lo1, hi2, lo2, mlo, mhi;\n+\t  int width = TYPE_PRECISION (type);\n+\t  hi1 = TREE_INT_CST_HIGH (TREE_OPERAND (arg0, 1));\n+\t  lo1 = TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1));\n+\t  hi2 = TREE_INT_CST_HIGH (arg1);\n+\t  lo2 = TREE_INT_CST_LOW (arg1);\n+\n+\t  /* If (C1&C2) == C1, then (X&C1)|C2 becomes (X,C2).  */\n+\t  if ((hi1 & hi2) == hi1 && (lo1 & lo2) == lo1)\n+\t    return omit_one_operand (type, arg1, TREE_OPERAND (arg0, 0));\n+\n+\t  if (width > HOST_BITS_PER_WIDE_INT)\n+\t    {\n+\t      mhi = (unsigned HOST_WIDE_INT) -1 \n+\t\t    >> (2 * HOST_BITS_PER_WIDE_INT - width);\n+\t      mlo = -1;\n+\t    }\n+\t  else\n+\t    {\n+\t      mhi = 0;\n+\t      mlo = (unsigned HOST_WIDE_INT) -1\n+\t\t    >> (HOST_BITS_PER_WIDE_INT - width);\n+\t    }\n+\n+\t  /* If (C1|C2) == ~0 then (X&C1)|C2 becomes X|C2.  */\n+\t  if ((~(hi1 | hi2) & mhi) == 0 && (~(lo1 | lo2) & mlo) == 0)\n+\t    return fold_build2 (BIT_IOR_EXPR, type,\n+\t\t\t\tTREE_OPERAND (arg0, 0), arg1);\n+\n+\t  /* Minimize the number of bits set in C1, i.e. C1 := C1 & ~C2.  */\n+\t  hi1 &= mhi;\n+\t  lo1 &= mlo;\n+\t  if ((hi1 & ~hi2) != hi1 || (lo1 & ~lo2) != lo1)\n+\t    return fold_build2 (BIT_IOR_EXPR, type,\n+\t\t\t\tfold_build2 (BIT_AND_EXPR, type,\n+\t\t\t\t\t     TREE_OPERAND (arg0, 0),\n+\t\t\t\t\t     build_int_cst_wide (type,\n+\t\t\t\t\t\t\t\t lo1 & ~lo2,\n+\t\t\t\t\t\t\t\t hi1 & ~hi2)),\n+\t\t\t\targ1);\n+\t}\n+\n       t1 = distribute_bit_expr (code, type, arg0, arg1);\n       if (t1 != NULL_TREE)\n \treturn t1;\n@@ -8256,6 +8303,16 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0))\n \treturn omit_one_operand (type, integer_zero_node, arg0);\n \n+      /* Canonicalize (X | C1) & C2 as (X & C2) | (C1 & C2).  */\n+      if (TREE_CODE (arg0) == BIT_IOR_EXPR\n+\t  && TREE_CODE (arg1) == INTEGER_CST\n+\t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST)\n+\treturn fold_build2 (BIT_IOR_EXPR, type,\n+\t\t\t    fold_build2 (BIT_AND_EXPR, type,\n+\t\t\t\t\t TREE_OPERAND (arg0, 0), arg1),\n+\t\t\t    fold_build2 (BIT_AND_EXPR, type,\n+\t\t\t\t\t TREE_OPERAND (arg0, 1), arg1));\n+\n       t1 = distribute_bit_expr (code, type, arg0, arg1);\n       if (t1 != NULL_TREE)\n \treturn t1;"}, {"sha": "03caacb0f1a41a66c5a3bf1385fb936983251b26", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840992bdc20effc919b96522ab4f82fd96087939/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840992bdc20effc919b96522ab4f82fd96087939/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=840992bdc20effc919b96522ab4f82fd96087939", "patch": "@@ -1,3 +1,8 @@\n+2006-02-13  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/24427\n+\t* gcc.dg/tree-ssa/andor-1.c: New test case.\n+\n 2006-02-13  Josh Conner  <jconner@apple.com>\n \n \tPR target/25376"}, {"sha": "1a53857401ce892156eb57dd967ca22c1c866355", "filename": "gcc/testsuite/gcc.dg/tree-ssa/andor-1.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840992bdc20effc919b96522ab4f82fd96087939/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fandor-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840992bdc20effc919b96522ab4f82fd96087939/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fandor-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fandor-1.c?ref=840992bdc20effc919b96522ab4f82fd96087939", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+\n+unsigned int test1(unsigned int a)\n+{\n+  return (a & 1) | 1;\n+}\n+\n+int test2(int b)\n+{\n+  return (b & 1) | 1;\n+}\n+\n+unsigned int test3(unsigned int c)\n+{\n+  return (c | 1) & 1;\n+}\n+\n+int test4(int d)\n+{\n+  return (d | 1) & 1;\n+}\n+\n+unsigned int test5(unsigned int e)\n+{\n+  return (e | 4) & 6;\n+}\n+\n+int test6(int f)\n+{\n+  return (f | 4) & 6;\n+}\n+\n+unsigned int test7(unsigned int g)\n+{\n+  return (g & -2) | 1;\n+}\n+\n+int test8(int h)\n+{\n+  return (h & -2) | 1;\n+}\n+\n+unsigned int test9(unsigned int i)\n+{\n+  return (i & 3) | 1;\n+}\n+\n+int test10(int j)\n+{\n+  return (j & 3) | 1;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"a \\& 1 \\\\| 1\" 0 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"b \\& 1 \\\\| 1\" 0 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(c \\\\| 1\\\\) \\& 1\" 0 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(d \\\\| 1\\\\) \\& 1\" 0 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"e \\& 2 \\\\| 4\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"f \\& 2 \\\\| 4\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"g \\\\| 1\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"h \\\\| 1\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"i \\& 2 \\\\| 1\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"j \\& 2 \\\\| 1\" 1 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */\n+"}]}