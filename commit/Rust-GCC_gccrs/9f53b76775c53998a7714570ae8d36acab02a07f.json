{"sha": "9f53b76775c53998a7714570ae8d36acab02a07f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY1M2I3Njc3NWM1Mzk5OGE3NzE0NTcwYWU4ZDM2YWNhYjAyYTA3Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-02-15T07:52:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-02-15T07:52:50Z"}, "message": "re PR other/69006 (Extraneous newline emitted between error messages in GCC 6)\n\n\tPR other/69006\n\tPR testsuite/88920\n\t* lib/gcc-dg.exp: If llvm_binutils effective target, set\n\tallow_blank_lines to 2 during initialization.\n\t(dg-allow-blank-lines-in-output): Set allow_blank_lines to 1 only if\n\tit was previously zero.\n\t(gcc-dg-prune): Don't check for llvm_binutils effective target here.\n\tClear allow_blank_lines afterwards whenever it was 1.\n\t* gdc.test/gdc-test.exp (dmd2dg): Don't call\n\tdg-allow-blank-lines-in-output here.\n\t(gdc-do-test): Set allow_blank_lines to 3 if it is 0 before running\n\tthe tests and restore it back at the end.\n\nFrom-SVN: r268930", "tree": {"sha": "0a88988b6d5d8a4071c2dcb86ff9133933059bb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a88988b6d5d8a4071c2dcb86ff9133933059bb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f53b76775c53998a7714570ae8d36acab02a07f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f53b76775c53998a7714570ae8d36acab02a07f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f53b76775c53998a7714570ae8d36acab02a07f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f53b76775c53998a7714570ae8d36acab02a07f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "906c376300b029f2b5e23dcca65f49dfc47c3908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/906c376300b029f2b5e23dcca65f49dfc47c3908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/906c376300b029f2b5e23dcca65f49dfc47c3908"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "6c2a67476000c71c8be2b36b6085f9fd4f73bfa0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f53b76775c53998a7714570ae8d36acab02a07f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f53b76775c53998a7714570ae8d36acab02a07f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f53b76775c53998a7714570ae8d36acab02a07f", "patch": "@@ -1,5 +1,18 @@\n 2019-02-15  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR other/69006\n+\tPR testsuite/88920\n+\t* lib/gcc-dg.exp: If llvm_binutils effective target, set\n+\tallow_blank_lines to 2 during initialization.\n+\t(dg-allow-blank-lines-in-output): Set allow_blank_lines to 1 only if\n+\tit was previously zero.\n+\t(gcc-dg-prune): Don't check for llvm_binutils effective target here.\n+\tClear allow_blank_lines afterwards whenever it was 1.\n+\t* gdc.test/gdc-test.exp (dmd2dg): Don't call\n+\tdg-allow-blank-lines-in-output here.\n+\t(gdc-do-test): Set allow_blank_lines to 3 if it is 0 before running\n+\tthe tests and restore it back at the end.\n+\n \t* c-c++-common/ubsan/opts-1.c: New test.\n \t* c-c++-common/ubsan/opts-2.c: New test.\n \t* c-c++-common/ubsan/opts-3.c: New test."}, {"sha": "4ab072d5f58a81916ddceb026f5b40da4b1cb1a4", "filename": "gcc/testsuite/gdc.test/gdc-test.exp", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f53b76775c53998a7714570ae8d36acab02a07f/gcc%2Ftestsuite%2Fgdc.test%2Fgdc-test.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f53b76775c53998a7714570ae8d36acab02a07f/gcc%2Ftestsuite%2Fgdc.test%2Fgdc-test.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fgdc-test.exp?ref=9f53b76775c53998a7714570ae8d36acab02a07f", "patch": "@@ -277,9 +277,6 @@ proc dmd2dg { base test } {\n     set out_line \"// { dg-prune-output .* }\"\n     puts $fdout $out_line\n \n-    # Since GCC 6-20160131 blank lines are not allowed in the output by default.\n-    dg-allow-blank-lines-in-output { 1 }\n-\n     # Compilable files are successful if an output is generated.\n     # Fail compilable are successful if an output is not generated.\n     # Runnable must compile, link, and return 0 to be successful by default.\n@@ -360,6 +357,13 @@ proc gdc-do-test { } {\n     # Initialize `dg'.\n     dg-init\n \n+    # Allow blank linkes in output for all of gdc.test.\n+    global allow_blank_lines\n+    set save_allow_blank_lines $allow_blank_lines\n+    if { !$allow_blank_lines } {\n+\tset allow_blank_lines 2\n+    }\n+\n     # Create gdc.test link so test names include that subdir.\n     catch { file link $subdir . }\n \n@@ -430,6 +434,8 @@ proc gdc-do-test { } {\n         file delete $filename\n     }\n \n+    set allow_blank_lines $save_allow_blank_lines\n+\n     # All done.\n     dg-finish\n }"}, {"sha": "c56e8e80ae0c63fec7a8c8aa9dcec1f024a6bba2", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f53b76775c53998a7714570ae8d36acab02a07f/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f53b76775c53998a7714570ae8d36acab02a07f/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=9f53b76775c53998a7714570ae8d36acab02a07f", "patch": "@@ -344,14 +344,24 @@ proc gcc-dg-test { prog do_what extra_tool_flags } {\n # Global: should blank lines be allowed in the output?\n # By default, they should not be.  (PR other/69006)\n # However, there are some ways for them to validly occur.\n+# If this variable is 0, blank lines are not allowed in output,\n+# if it is 1, they are allowed for a single testcase only and gcc-dg-prune\n+# will clear it again after checking it, if it is 2, they are disabled\n+# for all tests.\n set allow_blank_lines 0\n \n+if { [check_effective_target_llvm_binutils] } {\n+    set allow_blank_lines 2\n+}\n+\n # A command for use by testcases to mark themselves as expecting\n # blank lines in the output.\n \n proc dg-allow-blank-lines-in-output { args } {\n     global allow_blank_lines\n-    set allow_blank_lines 1\n+    if { !$allow_blank_lines } {\n+\tset allow_blank_lines 1\n+    }\n }\n \n proc gcc-dg-prune { system text } {\n@@ -363,12 +373,14 @@ proc gcc-dg-prune { system text } {\n \n     # Complain about blank lines in the output (PR other/69006)\n     global allow_blank_lines\n-    if { !$allow_blank_lines && ![check_effective_target_llvm_binutils]} {\n+    if { !$allow_blank_lines } {\n \tset num_blank_lines [llength [regexp -all -inline \"\\n\\n\" $text]]\n \tif { $num_blank_lines } {\n \t    global testname_with_flags\n \t    fail \"$testname_with_flags $num_blank_lines blank line(s) in output\"\n \t}\n+    }\n+    if { $allow_blank_lines == 1 } {\n \tset allow_blank_lines 0\n     }\n "}]}