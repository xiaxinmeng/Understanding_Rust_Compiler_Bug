{"sha": "6dc90c4dbb6f9589dea9c670c3468496bb207de5", "node_id": "C_kwDOANBUbNoAKDZkYzkwYzRkYmI2Zjk1ODlkZWE5YzY3MGMzNDY4NDk2YmIyMDdkZTU", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-11-16T22:01:28Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-11-16T22:01:28Z"}, "message": "Use modref summaries for byte-wise dead store elimination.\n\ngcc/ChangeLog:\n\n\t* ipa-modref.c (get_modref_function_summary): Declare.\n\t* ipa-modref.h (get_modref_function_summary): New function.\n\t* tree-ssa-dse.c (clear_live_bytes_for_ref): Break out from ...\n\t(clear_bytes_written_by): ... here; also clear memory killed by\n\tcalls.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/tree-ssa/modref-dse-4.c: New test.", "tree": {"sha": "7edf8771b392b9a437bee0c50c5fd430b1603c0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7edf8771b392b9a437bee0c50c5fd430b1603c0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dc90c4dbb6f9589dea9c670c3468496bb207de5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc90c4dbb6f9589dea9c670c3468496bb207de5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dc90c4dbb6f9589dea9c670c3468496bb207de5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc90c4dbb6f9589dea9c670c3468496bb207de5/comments", "author": null, "committer": null, "parents": [{"sha": "42cdf08ad84bfde669adaa80984fcf3b7f21ec69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42cdf08ad84bfde669adaa80984fcf3b7f21ec69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42cdf08ad84bfde669adaa80984fcf3b7f21ec69"}], "stats": {"total": 92, "additions": 81, "deletions": 11}, "files": [{"sha": "a70575bc807fc0a13f3193ad51283a976924ebb5", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc90c4dbb6f9589dea9c670c3468496bb207de5/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc90c4dbb6f9589dea9c670c3468496bb207de5/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=6dc90c4dbb6f9589dea9c670c3468496bb207de5", "patch": "@@ -740,6 +740,28 @@ get_modref_function_summary (cgraph_node *func)\n   return r;\n }\n \n+/* Get function summary for CALL if it exists, return NULL otherwise.\n+   If non-null set interposed to indicate whether function may not\n+   bind to current def.  In this case sometimes loads from function\n+   needs to be ignored.  */\n+\n+modref_summary *\n+get_modref_function_summary (gcall *call, bool *interposed)\n+{\n+  tree callee = gimple_call_fndecl (call);\n+  if (!callee)\n+    return NULL;\n+  struct cgraph_node *node = cgraph_node::get (callee);\n+  if (!node)\n+    return NULL;\n+  modref_summary *r = get_modref_function_summary (node);\n+  if (interposed && r)\n+    *interposed = r->calls_interposable\n+\t    \t  || !node->binds_to_current_def_p ();\n+  return r;\n+}\n+\n+\n namespace {\n \n /* Construct modref_access_node from REF.  */"}, {"sha": "f868eb6de074143f82ac136d9a191f5d1aba56f1", "filename": "gcc/ipa-modref.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc90c4dbb6f9589dea9c670c3468496bb207de5/gcc%2Fipa-modref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc90c4dbb6f9589dea9c670c3468496bb207de5/gcc%2Fipa-modref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.h?ref=6dc90c4dbb6f9589dea9c670c3468496bb207de5", "patch": "@@ -70,6 +70,7 @@ struct GTY(()) modref_summary\n };\n \n modref_summary *get_modref_function_summary (cgraph_node *func);\n+modref_summary *get_modref_function_summary (gcall *call, bool *interposed);\n void ipa_modref_c_finalize ();\n void ipa_merge_modref_summary_after_inlining (cgraph_edge *e);\n "}, {"sha": "81aa7dc587c0b72ca2d2ae15dfd8275a32090e83", "filename": "gcc/testsuite/gcc.dg/tree-ssa/modref-dse-4.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc90c4dbb6f9589dea9c670c3468496bb207de5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fmodref-dse-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc90c4dbb6f9589dea9c670c3468496bb207de5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fmodref-dse-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fmodref-dse-4.c?ref=6dc90c4dbb6f9589dea9c670c3468496bb207de5", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-dse2-details\"  } */\n+struct a {int a,b,c;};\n+__attribute__ ((noinline))\n+void\n+kill_me (struct a *a)\n+{\n+  a->a=0;\n+  a->b=0;\n+  a->c=0;\n+}\n+__attribute__ ((noinline))\n+void\n+my_pleasure (struct a *a)\n+{\n+  a->a=1;\n+  a->c=2;\n+}\n+void\n+set (struct a *a)\n+{\n+  kill_me (a);\n+  my_pleasure (a);\n+  a->b=1;\n+}\n+/* { dg-final { scan-tree-dump \"Deleted dead store: kill_me\" \"dse2\" } } */"}, {"sha": "231e827c525a062383d5b5b52ff82af8ef46f29f", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc90c4dbb6f9589dea9c670c3468496bb207de5/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc90c4dbb6f9589dea9c670c3468496bb207de5/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=6dc90c4dbb6f9589dea9c670c3468496bb207de5", "patch": "@@ -209,6 +209,26 @@ normalize_ref (ao_ref *copy, ao_ref *ref)\n   return true;\n }\n \n+/* Update LIVE_BYTES tracking REF for write to WRITE:\n+   Verify we have the same base memory address, the write\n+   has a known size and overlaps with REF.  */\n+static void\n+clear_live_bytes_for_ref (sbitmap live_bytes, ao_ref *ref, ao_ref write)\n+{\n+  HOST_WIDE_INT start, size;\n+\n+  if (valid_ao_ref_for_dse (&write)\n+      && operand_equal_p (write.base, ref->base, OEP_ADDRESS_OF)\n+      && known_eq (write.size, write.max_size)\n+      /* normalize_ref modifies write and for that reason write is not\n+\t passed by reference.  */\n+      && normalize_ref (&write, ref)\n+      && (write.offset - ref->offset).is_constant (&start)\n+      && write.size.is_constant (&size))\n+    bitmap_clear_range (live_bytes, start / BITS_PER_UNIT,\n+\t\t\tsize / BITS_PER_UNIT);\n+}\n+\n /* Clear any bytes written by STMT from the bitmap LIVE_BYTES.  The base\n    address written by STMT must match the one found in REF, which must\n    have its base address previously initialized.\n@@ -220,20 +240,21 @@ static void\n clear_bytes_written_by (sbitmap live_bytes, gimple *stmt, ao_ref *ref)\n {\n   ao_ref write;\n+\n+  if (gcall *call = dyn_cast <gcall *> (stmt))\n+    {\n+      bool interposed;\n+      modref_summary *summary = get_modref_function_summary (call, &interposed);\n+\n+      if (summary && !interposed)\n+\tfor (auto kill : summary->kills)\n+\t  if (kill.get_ao_ref (as_a <gcall *> (stmt), &write))\n+\t    clear_live_bytes_for_ref (live_bytes, ref, write);\n+    }\n   if (!initialize_ao_ref_for_dse (stmt, &write))\n     return;\n \n-  /* Verify we have the same base memory address, the write\n-     has a known size and overlaps with REF.  */\n-  HOST_WIDE_INT start, size;\n-  if (valid_ao_ref_for_dse (&write)\n-      && operand_equal_p (write.base, ref->base, OEP_ADDRESS_OF)\n-      && known_eq (write.size, write.max_size)\n-      && normalize_ref (&write, ref)\n-      && (write.offset - ref->offset).is_constant (&start)\n-      && write.size.is_constant (&size))\n-    bitmap_clear_range (live_bytes, start / BITS_PER_UNIT,\n-\t\t\tsize / BITS_PER_UNIT);\n+  clear_live_bytes_for_ref (live_bytes, ref, write);\n }\n \n /* REF is a memory write.  Extract relevant information from it and"}]}