{"sha": "b1f75d7653bd85fdd441cbfc5ca7891638caa5cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFmNzVkNzY1M2JkODVmZGQ0NDFjYmZjNWNhNzg5MTYzOGNhYTVjYw==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2012-06-19T17:55:14Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2012-06-19T17:55:14Z"}, "message": "inclhack.def (aix_mutex_initializer_1): New fix.\n\n        * inclhack.def (aix_mutex_initializer_1): New fix.\n        (aix_cond_initializer_1): New fix.\n        (aix_rwlock_initializer): New fix.\n        * fixincl.x: Regenerate.\n        * tests/base/pthread.h [AIX_MUTEX_INITIALIZER_1_CHECK]: New.\n        [AIX_COND_INITIALIZER_1_CHECK]: New.\n        [AIX_RWLOCK_INITIALIZER_1_CHECK]: New.\n\nFrom-SVN: r188784", "tree": {"sha": "e319e0b93124ec999becdb70e0a3dd0563236d39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e319e0b93124ec999becdb70e0a3dd0563236d39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1f75d7653bd85fdd441cbfc5ca7891638caa5cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1f75d7653bd85fdd441cbfc5ca7891638caa5cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1f75d7653bd85fdd441cbfc5ca7891638caa5cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1f75d7653bd85fdd441cbfc5ca7891638caa5cc/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b13024e6ad35ad6b55d667448846ef1d0d7aa115", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b13024e6ad35ad6b55d667448846ef1d0d7aa115", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b13024e6ad35ad6b55d667448846ef1d0d7aa115"}], "stats": {"total": 227, "additions": 217, "deletions": 10}, "files": [{"sha": "1b382e0dc377546339e9ff9c97172175c4f13141", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f75d7653bd85fdd441cbfc5ca7891638caa5cc/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f75d7653bd85fdd441cbfc5ca7891638caa5cc/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=b1f75d7653bd85fdd441cbfc5ca7891638caa5cc", "patch": "@@ -1,3 +1,13 @@\n+2012-06-19  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* inclhack.def (aix_mutex_initializer_1): New fix.\n+\t(aix_cond_initializer_1): New fix.\n+\t(aix_rwlock_initializer): New fix.\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/pthread.h [AIX_MUTEX_INITIALIZER_1_CHECK]: New.\n+\t[AIX_COND_INITIALIZER_1_CHECK]: New.\n+\t[AIX_RWLOCK_INITIALIZER_1_CHECK]: New.\n+\n 2012-05-29  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* configure.ac: Use GCC_AC_FUNC_MMAP_BLACKLIST instead of\n@@ -17,7 +27,7 @@\n \t* inclhack.def (aix_malloc): New.\n \t* fixincl.x: Regenerate.\n \t* tests/base/malloc.h [AIX_MALLOC_CHECK]: New.\n-\t\n+\n 2012-03-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR other/52626\n@@ -454,7 +464,7 @@\n \n \t* inclhack.def (aix_complex): New fix.\n \t* fixincl.x: Regenerate.\n-\t\n+\n 2009-08-01  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* inclhack.def (hpux_inttype_int_least8_t): Also apply on hpux10*.\n@@ -902,7 +912,7 @@\n \n \t* fixincludes/mkfixinc.sh: Add \"*-*-vxworks*\" to the list of\n \ttargets for which a no-op fixer is appropriate.\n-\t\n+\n 2006-11-07  Richard Guenther  <rguenther@suse.de>\n \n \t* inclhack.def (glibc_c99_inline_2): Adjust for glibc 2.3\n@@ -988,7 +998,7 @@\n \n \t* inclhack.def (solaris_once_init_1): New.\n \t* tests/base/pthread.h: Adjust for new fix.\n-\t\n+\n \t* fixincl.x: Regenerate.\n \n 2006-07-17  Roger Sayle  <roger@eyesopen.com>"}, {"sha": "31c466796de369ca0389f4ac93a4095f34a2b813", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 140, "deletions": 5, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f75d7653bd85fdd441cbfc5ca7891638caa5cc/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f75d7653bd85fdd441cbfc5ca7891638caa5cc/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=b1f75d7653bd85fdd441cbfc5ca7891638caa5cc", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  March 23, 2012 at 02:26:20 PM by AutoGen 5.10\n+ * It has been AutoGen-ed  June 19, 2012 at 09:23:54 AM by AutoGen 5.10\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Fri Mar 23 14:26:20 EDT 2012\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Tue Jun 19 09:23:54 EDT 2012\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 212 fixup descriptions.\n+ * This file contains 215 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -672,6 +672,123 @@ static const char* apzAix_Once_Init_2Patch[] = {\n }}\\n\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Aix_Mutex_Initializer_1 fix\n+ */\n+tSCC zAix_Mutex_Initializer_1Name[] =\n+     \"aix_mutex_initializer_1\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zAix_Mutex_Initializer_1List[] =\n+  \"pthread.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzAix_Mutex_Initializer_1Machs[] = {\n+        \"*-*-aix*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zAix_Mutex_Initializer_1Select0[] =\n+       \"#define[ \\t]PTHREAD_MUTEX_INITIALIZER \\\\\\\\\\n\\\n+\\\\{ \\\\\\\\\\n\";\n+\n+#define    AIX_MUTEX_INITIALIZER_1_TEST_CT  1\n+static tTestDesc aAix_Mutex_Initializer_1Tests[] = {\n+  { TT_EGREP,    zAix_Mutex_Initializer_1Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Aix_Mutex_Initializer_1\n+ */\n+static const char* apzAix_Mutex_Initializer_1Patch[] = {\n+    \"format\",\n+    \"#define PTHREAD_MUTEX_INITIALIZER \\\\\\n\\\n+{{ \\\\\\n\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Aix_Cond_Initializer_1 fix\n+ */\n+tSCC zAix_Cond_Initializer_1Name[] =\n+     \"aix_cond_initializer_1\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zAix_Cond_Initializer_1List[] =\n+  \"pthread.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzAix_Cond_Initializer_1Machs[] = {\n+        \"*-*-aix*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zAix_Cond_Initializer_1Select0[] =\n+       \"#define[ \\t]PTHREAD_COND_INITIALIZER \\\\\\\\\\n\\\n+\\\\{ \\\\\\\\\\n\";\n+\n+#define    AIX_COND_INITIALIZER_1_TEST_CT  1\n+static tTestDesc aAix_Cond_Initializer_1Tests[] = {\n+  { TT_EGREP,    zAix_Cond_Initializer_1Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Aix_Cond_Initializer_1\n+ */\n+static const char* apzAix_Cond_Initializer_1Patch[] = {\n+    \"format\",\n+    \"#define PTHREAD_COND_INITIALIZER \\\\\\n\\\n+{{ \\\\\\n\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Aix_Rwlock_Initializer_1 fix\n+ */\n+tSCC zAix_Rwlock_Initializer_1Name[] =\n+     \"aix_rwlock_initializer_1\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zAix_Rwlock_Initializer_1List[] =\n+  \"pthread.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzAix_Rwlock_Initializer_1Machs[] = {\n+        \"*-*-aix*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zAix_Rwlock_Initializer_1Select0[] =\n+       \"#define[ \\t]PTHREAD_RWLOCK_INITIALIZER \\\\\\\\\\n\\\n+\\\\{ \\\\\\\\\\n\";\n+\n+#define    AIX_RWLOCK_INITIALIZER_1_TEST_CT  1\n+static tTestDesc aAix_Rwlock_Initializer_1Tests[] = {\n+  { TT_EGREP,    zAix_Rwlock_Initializer_1Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Aix_Rwlock_Initializer_1\n+ */\n+static const char* apzAix_Rwlock_Initializer_1Patch[] = {\n+    \"format\",\n+    \"#define PTHREAD_RWLOCK_INITIALIZER \\\\\\n\\\n+{{ \\\\\\n\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Aix_Pthread fix\n@@ -8629,9 +8746,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          255\n+#define REGEX_COUNT          258\n #define MACH_LIST_SIZE_LIMIT 181\n-#define FIX_COUNT            212\n+#define FIX_COUNT            215\n \n /*\n  *  Enumerate the fixes\n@@ -8650,6 +8767,9 @@ typedef enum {\n     AIX_NET_IF_ARP_FIXIDX,\n     AIX_ONCE_INIT_1_FIXIDX,\n     AIX_ONCE_INIT_2_FIXIDX,\n+    AIX_MUTEX_INITIALIZER_1_FIXIDX,\n+    AIX_COND_INITIALIZER_1_FIXIDX,\n+    AIX_RWLOCK_INITIALIZER_1_FIXIDX,\n     AIX_PTHREAD_FIXIDX,\n     AIX_STDINT_1_FIXIDX,\n     AIX_STDINT_2_FIXIDX,\n@@ -8917,6 +9037,21 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      AIX_ONCE_INIT_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aAix_Once_Init_2Tests,   apzAix_Once_Init_2Patch, 0 },\n \n+  {  zAix_Mutex_Initializer_1Name,    zAix_Mutex_Initializer_1List,\n+     apzAix_Mutex_Initializer_1Machs,\n+     AIX_MUTEX_INITIALIZER_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aAix_Mutex_Initializer_1Tests,   apzAix_Mutex_Initializer_1Patch, 0 },\n+\n+  {  zAix_Cond_Initializer_1Name,    zAix_Cond_Initializer_1List,\n+     apzAix_Cond_Initializer_1Machs,\n+     AIX_COND_INITIALIZER_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aAix_Cond_Initializer_1Tests,   apzAix_Cond_Initializer_1Patch, 0 },\n+\n+  {  zAix_Rwlock_Initializer_1Name,    zAix_Rwlock_Initializer_1List,\n+     apzAix_Rwlock_Initializer_1Machs,\n+     AIX_RWLOCK_INITIALIZER_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aAix_Rwlock_Initializer_1Tests,   apzAix_Rwlock_Initializer_1Patch, 0 },\n+\n   {  zAix_PthreadName,    zAix_PthreadList,\n      apzAix_PthreadMachs,\n      AIX_PTHREAD_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "82792afdbe37e9e99726415816b2d1e3ccf8ef74", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f75d7653bd85fdd441cbfc5ca7891638caa5cc/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f75d7653bd85fdd441cbfc5ca7891638caa5cc/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=b1f75d7653bd85fdd441cbfc5ca7891638caa5cc", "patch": "@@ -397,7 +397,9 @@ fix = {\n };\n \n /*\n- *  pthread.h on AIX defines PTHREAD_ONCE_INIT without enough braces.\n+ *  pthread.h on AIX defines PTHREAD_ONCE_INIT, PTHREAD_MUTEX_INITIALIZER,\n+ *  PTHREAD_COND_INITIALIZER and PTHREAD_RWLOCK_INITIALIZER without enough\n+ *  braces.\n  */\n fix = {\n     hackname  = aix_once_init_1;\n@@ -425,6 +427,45 @@ fix = {\n \t\t\"}\\n\";\n };\n \n+fix = {\n+    hackname  = aix_mutex_initializer_1;\n+    mach      = \"*-*-aix*\";\n+    files     = \"pthread.h\";\n+    select    = \"#define[ \\t]PTHREAD_MUTEX_INITIALIZER \\\\\\\\\\n\"\n+\t\t\"\\\\{ \\\\\\\\\\n\";\n+    c_fix     = format;\n+    c_fix_arg = \"#define PTHREAD_MUTEX_INITIALIZER \\\\\\n\"\n+\t\t\"{{ \\\\\\n\";\n+    test_text = \"#define PTHREAD_MUTEX_INITIALIZER \\\\\\\\\\n\"\n+\t\t\"{ \\\\\\\\\\n\";\n+};\n+\n+fix = {\n+    hackname  = aix_cond_initializer_1;\n+    mach      = \"*-*-aix*\";\n+    files     = \"pthread.h\";\n+    select    = \"#define[ \\t]PTHREAD_COND_INITIALIZER \\\\\\\\\\n\"\n+\t\t\"\\\\{ \\\\\\\\\\n\";\n+    c_fix     = format;\n+    c_fix_arg = \"#define PTHREAD_COND_INITIALIZER \\\\\\n\"\n+\t\t\"{{ \\\\\\n\";\n+    test_text = \"#define PTHREAD_COND_INITIALIZER \\\\\\\\\\n\"\n+\t\t\"{ \\\\\\\\\\n\";\n+};\n+\n+fix = {\n+    hackname  = aix_rwlock_initializer_1;\n+    mach      = \"*-*-aix*\";\n+    files     = \"pthread.h\";\n+    select    = \"#define[ \\t]PTHREAD_RWLOCK_INITIALIZER \\\\\\\\\\n\"\n+\t\t\"\\\\{ \\\\\\\\\\n\";\n+    c_fix     = format;\n+    c_fix_arg = \"#define PTHREAD_RWLOCK_INITIALIZER \\\\\\n\"\n+\t\t\"{{ \\\\\\n\";\n+    test_text = \"#define PTHREAD_RWLOCK_INITIALIZER \\\\\\\\\\n\"\n+\t\t\"{ \\\\\\\\\\n\";\n+};\n+\n /*\n  *  pthread.h on AIX 4.3.3 tries to define a macro without whitspace\n  *  which violates a requirement of ISO C."}, {"sha": "1d28067ad57b7f3aa587681449a9440a25bedd97", "filename": "fixincludes/tests/base/pthread.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1f75d7653bd85fdd441cbfc5ca7891638caa5cc/fixincludes%2Ftests%2Fbase%2Fpthread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1f75d7653bd85fdd441cbfc5ca7891638caa5cc/fixincludes%2Ftests%2Fbase%2Fpthread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fpthread.h?ref=b1f75d7653bd85fdd441cbfc5ca7891638caa5cc", "patch": "@@ -23,6 +23,27 @@\n #endif  /* AIX_ONCE_INIT_2_CHECK */\n \n \n+#if defined( AIX_MUTEX_INITIALIZER_1_CHECK )\n+#define PTHREAD_MUTEX_INITIALIZER \\\n+{{ \\\n+\n+#endif  /* AIX_MUTEX_INITIALIZER_1_CHECK */\n+\n+\n+#if defined( AIX_COND_INITIALIZER_1_CHECK )\n+#define PTHREAD_COND_INITIALIZER \\\n+{{ \\\n+\n+#endif  /* AIX_COND_INITIALIZER_1_CHECK */\n+\n+\n+#if defined( AIX_RWLOCK_INITIALIZER_1_CHECK )\n+#define PTHREAD_RWLOCK_INITIALIZER \\\n+{{ \\\n+\n+#endif  /* AIX_RWLOCK_INITIALIZER_1_CHECK */\n+\n+\n #if defined( AIX_PTHREAD_CHECK )\n #define PTHREAD_MUTEX_INITIALIZER \\\n {...init stuff...}"}]}