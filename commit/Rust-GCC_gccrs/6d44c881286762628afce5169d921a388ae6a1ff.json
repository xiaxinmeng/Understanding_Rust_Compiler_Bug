{"sha": "6d44c881286762628afce5169d921a388ae6a1ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ0NGM4ODEyODY3NjI2MjhhZmNlNTE2OWQ5MjFhMzg4YWU2YTFmZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-16T08:03:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-16T08:03:59Z"}, "message": "tree-inline: Fix a -fcompare-debug issue in the inliner [PR94167]\n\nThe following testcase fails with -fcompare-debug.  The problem is that\nbar is marked as address_taken only with -g and not without.\nI've tracked it down to insert_init_stmt calling gimple_regimplify_operands\neven on DEBUG_STMTs.  That function will just insert normal stmts before\nthe DEBUG_STMT if the DEBUG_STMT operand isn't gimple val or invariant.\nWhile DCE will turn those statements into debug temporaries, it can cause\ndifferences in SSA_NAMEs and more importantly, the ipa references are\ngenerated from those before the DCE happens.\nOn the testcase, the DEBUG_STMT value is (int)bar.\n\nWe could generate DEBUG_STMTs with debug temporaries instead, but I fail to\nsee the reason to do that, DEBUG_STMTs allow other expressions and all we\nwant to ensure is that the expressions aren't too large (arbitrarily\ncomplex), but during inlining/function versioning I don't see why something\nwould queue a DEBUG_STMT with arbitrarily complex expressions in there.\n\n2020-03-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR debug/94167\n\t* tree-inline.c (insert_init_stmt): Don't gimple_regimplify_operands\n\tDEBUG_STMTs.\n\n\t* gcc.dg/pr94167.c: New test.", "tree": {"sha": "376e430f555c8c4be0ded35925345b06deb61266", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/376e430f555c8c4be0ded35925345b06deb61266"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d44c881286762628afce5169d921a388ae6a1ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d44c881286762628afce5169d921a388ae6a1ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d44c881286762628afce5169d921a388ae6a1ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d44c881286762628afce5169d921a388ae6a1ff/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ba25b2ef179aec8ba4c47612fbc5c388f41cb36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba25b2ef179aec8ba4c47612fbc5c388f41cb36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ba25b2ef179aec8ba4c47612fbc5c388f41cb36"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "81582dd4f8c13b885ba8298c003de6192fb94bf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d44c881286762628afce5169d921a388ae6a1ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d44c881286762628afce5169d921a388ae6a1ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d44c881286762628afce5169d921a388ae6a1ff", "patch": "@@ -1,5 +1,9 @@\n 2020-03-16  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/94167\n+\t* tree-inline.c (insert_init_stmt): Don't gimple_regimplify_operands\n+\tDEBUG_STMTs.\n+\n \tPR tree-optimization/94166\n \t* tree-ssa-reassoc.c (sort_by_mach_mode): Use SSA_NAME_VERSION\n \tas secondary comparison key."}, {"sha": "1297954f5df0928d724ff1cb84cd761de79569c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d44c881286762628afce5169d921a388ae6a1ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d44c881286762628afce5169d921a388ae6a1ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d44c881286762628afce5169d921a388ae6a1ff", "patch": "@@ -1,5 +1,8 @@\n 2020-03-16  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/94167\n+\t* gcc.dg/pr94167.c: New test.\n+\n \tPR tree-optimization/94166\n \t* gcc.dg/pr94166.c: New test.\n "}, {"sha": "4b819d3a8694558be399759d82d6aafdddde6502", "filename": "gcc/testsuite/gcc.dg/pr94167.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d44c881286762628afce5169d921a388ae6a1ff/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94167.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d44c881286762628afce5169d921a388ae6a1ff/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94167.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94167.c?ref=6d44c881286762628afce5169d921a388ae6a1ff", "patch": "@@ -0,0 +1,33 @@\n+/* PR debug/94167 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcompare-debug\" } */\n+\n+struct S { int g, h; signed char i; int j; signed char k; int l[4]; } a, c;\n+struct T { signed char g; } e;\n+int *b, d;\n+static void foo ();\n+\n+void\n+bar (void)\n+{\n+  while (d)\n+    {\n+      int k;\n+      struct T f[3];\n+      foo (bar, a);\n+      for (k = 0;; k++)\n+\tf[k] = e;\n+    }\n+}\n+\n+static inline void\n+foo (int x, struct S y, struct T z)\n+{\n+  for (z.g = 2; z.g; z.g--)\n+    {\n+      c = a = y;\n+      *b |= 6;\n+      if (y.g)\n+\tbreak;\n+    }\n+}"}, {"sha": "f095795f06f9fc839557a7d868dd8ef64b2285d1", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d44c881286762628afce5169d921a388ae6a1ff/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d44c881286762628afce5169d921a388ae6a1ff/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=6d44c881286762628afce5169d921a388ae6a1ff", "patch": "@@ -3361,10 +3361,10 @@ insert_init_stmt (copy_body_data *id, basic_block bb, gimple *init_stmt)\n \t  gimple_assign_set_rhs1 (init_stmt, rhs);\n \t}\n       gsi_insert_after (&si, init_stmt, GSI_NEW_STMT);\n-      gimple_regimplify_operands (init_stmt, &si);\n-\n       if (!is_gimple_debug (init_stmt))\n \t{\n+\t  gimple_regimplify_operands (init_stmt, &si);\n+\n \t  tree def = gimple_assign_lhs (init_stmt);\n \t  insert_init_debug_bind (id, bb, def, def, init_stmt);\n \t}"}]}