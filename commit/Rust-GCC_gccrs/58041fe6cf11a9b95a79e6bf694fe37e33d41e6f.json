{"sha": "58041fe6cf11a9b95a79e6bf694fe37e33d41e6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgwNDFmZTZjZjExYTliOTVhNzllNmJmNjk0ZmUzN2UzM2Q0MWU2Zg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2014-08-20T16:47:12Z"}, "committer": {"name": "Wei Mi", "email": "wmi@gcc.gnu.org", "date": "2014-08-20T16:47:12Z"}, "message": "re PR lto/60449 (Merging function DECLs discards leaf attribute which causes cfg verifier to fail)\n\n2014-08-20  Martin Jambor  <mjambor@suse.cz>\n\t    Wei Mi  <wmi@google.com>\n\n\tPR ipa/60449\n\tPR middle-end/61776\n\t* tree-ssa-operands.c (update_stmt_operands): Remove\n\tMODIFIED_NORETURN_CALLS.\n\t* tree-cfgcleanup.c (cleanup_call_ctrl_altering_flag): New func.\n\t(cleanup_control_flow_bb): Use cleanup_call_ctrl_altering_flag.\n\t(split_bb_on_noreturn_calls): Renamed from split_bbs_on_noreturn_calls.\n\t(cleanup_tree_cfg_1): Use split_bb_on_noreturn_calls.\n\t* tree-ssanames.h: Remove MODIFIED_NORETURN_CALLS.\n\t* gimple.h (enum gf_mask): Add GF_CALL_CTRL_ALTERING.\n\t(gimple_call_set_ctrl_altering): New func.\n\t(gimple_call_ctrl_altering_p): Ditto.\n\t* tree-cfg.c (gimple_call_initialize_ctrl_altering): Ditto.\n\t(make_blocks): Use gimple_call_initialize_ctrl_altering.\n\t(is_ctrl_altering_stmt): Use gimple_call_ctrl_altering_p.\n\t(execute_fixup_cfg): Use gimple_call_ctrl_altering_p and\n\tremove MODIFIED_NORETURN_CALLS.\n\n2014-08-20  Martin Jambor  <mjambor@suse.cz>\n\t    Wei Mi  <wmi@google.com>\n\n\tPR ipa/60449\n\tPR middle-end/61776\n\t* testsuite/gcc.dg/lto/pr60449_1.c: New test.\n\t* testsuite/gcc.dg/lto/pr60449_0.c: New test.\n\t* testsuite/gcc.dg/pr61776.c: New test.\n\n\nCo-Authored-By: Wei Mi <wmi@google.com>\n\nFrom-SVN: r214233", "tree": {"sha": "fac128b3e612dcf536a8553f9c12e52dce5cc4cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fac128b3e612dcf536a8553f9c12e52dce5cc4cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58041fe6cf11a9b95a79e6bf694fe37e33d41e6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58041fe6cf11a9b95a79e6bf694fe37e33d41e6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58041fe6cf11a9b95a79e6bf694fe37e33d41e6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58041fe6cf11a9b95a79e6bf694fe37e33d41e6f/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7e04426135293ba4db611f38109161f67bf93379", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e04426135293ba4db611f38109161f67bf93379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e04426135293ba4db611f38109161f67bf93379"}], "stats": {"total": 184, "additions": 128, "deletions": 56}, "files": [{"sha": "8f9b113e4dab22e32f3b5cab1709fabc485a0a82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58041fe6cf11a9b95a79e6bf694fe37e33d41e6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58041fe6cf11a9b95a79e6bf694fe37e33d41e6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58041fe6cf11a9b95a79e6bf694fe37e33d41e6f", "patch": "@@ -1,3 +1,24 @@\n+2014-08-20  Martin Jambor  <mjambor@suse.cz>\n+\t    Wei Mi  <wmi@google.com>\n+\n+\tPR ipa/60449\n+\tPR middle-end/61776\n+\t* tree-ssa-operands.c (update_stmt_operands): Remove\n+\tMODIFIED_NORETURN_CALLS.\n+\t* tree-cfgcleanup.c (cleanup_call_ctrl_altering_flag): New func.\n+\t(cleanup_control_flow_bb): Use cleanup_call_ctrl_altering_flag.\n+\t(split_bb_on_noreturn_calls): Renamed from split_bbs_on_noreturn_calls.\n+\t(cleanup_tree_cfg_1): Use split_bb_on_noreturn_calls.\n+\t* tree-ssanames.h: Remove MODIFIED_NORETURN_CALLS.\n+\t* gimple.h (enum gf_mask): Add GF_CALL_CTRL_ALTERING.\n+\t(gimple_call_set_ctrl_altering): New func.\n+\t(gimple_call_ctrl_altering_p): Ditto.\n+\t* tree-cfg.c (gimple_call_initialize_ctrl_altering): Ditto.\n+\t(make_blocks): Use gimple_call_initialize_ctrl_altering.\n+\t(is_ctrl_altering_stmt): Use gimple_call_ctrl_altering_p.\n+\t(execute_fixup_cfg): Use gimple_call_ctrl_altering_p and\n+\tremove MODIFIED_NORETURN_CALLS.\n+\n 2014-08-20  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* coverage.c (coverage_compute_profile_id): Return non-0;"}, {"sha": "51814baa65ab51c89a16309294b715fed7d26b12", "filename": "gcc/gimple.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58041fe6cf11a9b95a79e6bf694fe37e33d41e6f/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58041fe6cf11a9b95a79e6bf694fe37e33d41e6f/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=58041fe6cf11a9b95a79e6bf694fe37e33d41e6f", "patch": "@@ -90,6 +90,7 @@ enum gf_mask {\n     GF_CALL_NOTHROW\t\t= 1 << 4,\n     GF_CALL_ALLOCA_FOR_VAR\t= 1 << 5,\n     GF_CALL_INTERNAL\t\t= 1 << 6,\n+    GF_CALL_CTRL_ALTERING       = 1 << 7,\n     GF_OMP_PARALLEL_COMBINED\t= 1 << 0,\n     GF_OMP_FOR_KIND_MASK\t= (1 << 2) - 1,\n     GF_OMP_FOR_KIND_FOR\t\t= 0,\n@@ -2459,6 +2460,29 @@ gimple_call_internal_fn (const_gimple gs)\n   return static_cast <const gimple_statement_call *> (gs)->u.internal_fn;\n }\n \n+/* If CTRL_ALTERING_P is true, mark GIMPLE_CALL S to be a stmt\n+   that could alter control flow.  */\n+\n+static inline void\n+gimple_call_set_ctrl_altering (gimple s, bool ctrl_altering_p)\n+{\n+  GIMPLE_CHECK (s, GIMPLE_CALL);\n+  if (ctrl_altering_p)\n+    s->subcode |= GF_CALL_CTRL_ALTERING;\n+  else\n+    s->subcode &= ~GF_CALL_CTRL_ALTERING;\n+}\n+\n+/* Return true if call GS calls an func whose GF_CALL_CTRL_ALTERING\n+   flag is set. Such call could not be a stmt in the middle of a bb.  */\n+\n+static inline bool\n+gimple_call_ctrl_altering_p (const_gimple gs)\n+{\n+  GIMPLE_CHECK (gs, GIMPLE_CALL);\n+  return (gs->subcode & GF_CALL_CTRL_ALTERING) != 0;\n+}\n+\n \n /* Return the function type of the function called by GS.  */\n "}, {"sha": "0957925669bcf415297f6d6003ed774ceae4d321", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58041fe6cf11a9b95a79e6bf694fe37e33d41e6f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58041fe6cf11a9b95a79e6bf694fe37e33d41e6f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58041fe6cf11a9b95a79e6bf694fe37e33d41e6f", "patch": "@@ -1,3 +1,12 @@\n+2014-08-20  Martin Jambor  <mjambor@suse.cz>\n+\t    Wei Mi  <wmi@google.com>\n+\n+\tPR ipa/60449\n+\tPR middle-end/61776\n+\t* testsuite/gcc.dg/lto/pr60449_1.c: New test.\n+\t* testsuite/gcc.dg/lto/pr60449_0.c: New test.\n+\t* testsuite/gcc.dg/pr61776.c: New test.\n+\n 2014-08-20  Steve Ellcey  <sellcey@mips.com>\n \n \tPR middle-end/49191"}, {"sha": "700a998555145942f4240839d3c76b7acd7587ca", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 36, "deletions": 26, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58041fe6cf11a9b95a79e6bf694fe37e33d41e6f/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58041fe6cf11a9b95a79e6bf694fe37e33d41e6f/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=58041fe6cf11a9b95a79e6bf694fe37e33d41e6f", "patch": "@@ -164,6 +164,7 @@ static int gimple_verify_flow_info (void);\n static void gimple_make_forwarder_block (edge);\n static gimple first_non_label_stmt (basic_block);\n static bool verify_gimple_transaction (gimple);\n+static bool call_can_make_abnormal_goto (gimple);\n \n /* Flowgraph optimization and cleanup.  */\n static void gimple_merge_blocks (basic_block, basic_block);\n@@ -437,6 +438,32 @@ assert_unreachable_fallthru_edge_p (edge e)\n }\n \n \n+/* Initialize GF_CALL_CTRL_ALTERING flag, which indicates the call\n+   could alter control flow except via eh. We initialize the flag at\n+   CFG build time and only ever clear it later.  */\n+\n+static void\n+gimple_call_initialize_ctrl_altering (gimple stmt)\n+{\n+  int flags = gimple_call_flags (stmt);\n+\n+  /* A call alters control flow if it can make an abnormal goto.  */\n+  if (call_can_make_abnormal_goto (stmt)\n+      /* A call also alters control flow if it does not return.  */\n+      || flags & ECF_NORETURN\n+      /* TM ending statements have backedges out of the transaction.\n+\t Return true so we split the basic block containing them.\n+\t Note that the TM_BUILTIN test is merely an optimization.  */\n+      || ((flags & ECF_TM_BUILTIN)\n+\t  && is_tm_ending_fndecl (gimple_call_fndecl (stmt)))\n+      /* BUILT_IN_RETURN call is same as return statement.  */\n+      || gimple_call_builtin_p (stmt, BUILT_IN_RETURN))\n+    gimple_call_set_ctrl_altering (stmt, true);\n+  else\n+    gimple_call_set_ctrl_altering (stmt, false);\n+}\n+\n+\n /* Build a flowgraph for the sequence of stmts SEQ.  */\n \n static void\n@@ -455,6 +482,9 @@ make_blocks (gimple_seq seq)\n       prev_stmt = stmt;\n       stmt = gsi_stmt (i);\n \n+      if (stmt && is_gimple_call (stmt))\n+\tgimple_call_initialize_ctrl_altering (stmt);\n+\n       /* If the statement starts a new basic block or if we have determined\n \t in a previous pass that we need to create a new block for STMT, do\n \t so now.  */\n@@ -2372,28 +2402,10 @@ is_ctrl_altering_stmt (gimple t)\n   switch (gimple_code (t))\n     {\n     case GIMPLE_CALL:\n-      {\n-\tint flags = gimple_call_flags (t);\n-\n-\t/* A call alters control flow if it can make an abnormal goto.  */\n-\tif (call_can_make_abnormal_goto (t))\n-\t  return true;\n-\n-\t/* A call also alters control flow if it does not return.  */\n-\tif (flags & ECF_NORETURN)\n-\t  return true;\n-\n-\t/* TM ending statements have backedges out of the transaction.\n-\t   Return true so we split the basic block containing them.\n-\t   Note that the TM_BUILTIN test is merely an optimization.  */\n-\tif ((flags & ECF_TM_BUILTIN)\n-\t    && is_tm_ending_fndecl (gimple_call_fndecl (t)))\n-\t  return true;\n-\n-\t/* BUILT_IN_RETURN call is same as return statement.  */\n-\tif (gimple_call_builtin_p (t, BUILT_IN_RETURN))\n-\t  return true;\n-      }\n+      /* Per stmt call flag indicates whether the call could alter\n+\t controlflow.  */\n+      if (gimple_call_ctrl_altering_p (t))\n+\treturn true;\n       break;\n \n     case GIMPLE_EH_DISPATCH:\n@@ -8533,6 +8545,8 @@ execute_fixup_cfg (void)\n \t\t  && (!is_gimple_call (stmt)\n \t\t      || (gimple_call_flags (stmt) & ECF_NORETURN) == 0)))\n \t    {\n+\t      if (stmt && is_gimple_call (stmt))\n+\t\tgimple_call_set_ctrl_altering (stmt, false);\n \t      stmt = gimple_build_call\n \t\t  (builtin_decl_implicit (BUILT_IN_UNREACHABLE), 0);\n \t      gimple_stmt_iterator gsi = gsi_last_bb (bb);\n@@ -8543,10 +8557,6 @@ execute_fixup_cfg (void)\n   if (count_scale != REG_BR_PROB_BASE)\n     compute_function_frequency ();\n \n-  /* We just processed all calls.  */\n-  if (cfun->gimple_df)\n-    vec_free (MODIFIED_NORETURN_CALLS (cfun));\n-\n   /* Dump a textual representation of the flowgraph.  */\n   if (dump_file)\n     gimple_dump_cfg (dump_file, dump_flags);"}, {"sha": "a66ec6e75375a823f059f6d62d5b88ebf69fdfb3", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 38, "deletions": 23, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58041fe6cf11a9b95a79e6bf694fe37e33d41e6f/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58041fe6cf11a9b95a79e6bf694fe37e33d41e6f/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=58041fe6cf11a9b95a79e6bf694fe37e33d41e6f", "patch": "@@ -162,6 +162,23 @@ cleanup_control_expr_graph (basic_block bb, gimple_stmt_iterator gsi)\n   return retval;\n }\n \n+/* Cleanup the GF_CALL_CTRL_ALTERING flag according to\n+   to updated gimple_call_flags.  */\n+\n+static void\n+cleanup_call_ctrl_altering_flag (gimple bb_end)\n+{\n+  if (!is_gimple_call (bb_end)\n+      || !gimple_call_ctrl_altering_p (bb_end))\n+    return;\n+\n+  int flags = gimple_call_flags (bb_end);\n+  if (((flags & (ECF_CONST | ECF_PURE))\n+       && !(flags & ECF_LOOPING_CONST_OR_PURE))\n+      || (flags & ECF_LEAF))\n+    gimple_call_set_ctrl_altering (bb_end, false);\n+}\n+\n /* Try to remove superfluous control structures in basic block BB.  Returns\n    true if anything changes.  */\n \n@@ -182,6 +199,9 @@ cleanup_control_flow_bb (basic_block bb)\n \n   stmt = gsi_stmt (gsi);\n \n+  /* Try to cleanup ctrl altering flag for call which ends bb.  */\n+  cleanup_call_ctrl_altering_flag (stmt);\n+\n   if (gimple_code (stmt) == GIMPLE_COND\n       || gimple_code (stmt) == GIMPLE_SWITCH)\n     retval |= cleanup_control_expr_graph (bb, gsi);\n@@ -594,30 +614,24 @@ fixup_noreturn_call (gimple stmt)\n    known not to return, and remove the unreachable code.  */\n \n static bool\n-split_bbs_on_noreturn_calls (void)\n+split_bb_on_noreturn_calls (basic_block bb)\n {\n   bool changed = false;\n-  gimple stmt;\n-  basic_block bb;\n+  gimple_stmt_iterator gsi;\n \n-  /* Detect cases where a mid-block call is now known not to return.  */\n-  if (cfun->gimple_df)\n-    while (vec_safe_length (MODIFIED_NORETURN_CALLS (cfun)))\n-      {\n-\tstmt = MODIFIED_NORETURN_CALLS (cfun)->pop ();\n-\tbb = gimple_bb (stmt);\n-\t/* BB might be deleted at this point, so verify first\n-\t   BB is present in the cfg.  */\n-\tif (bb == NULL\n-\t    || bb->index < NUM_FIXED_BLOCKS\n-\t    || bb->index >= last_basic_block_for_fn (cfun)\n-\t    || BASIC_BLOCK_FOR_FN (cfun, bb->index) != bb\n-\t    || !gimple_call_noreturn_p (stmt))\n-\t  continue;\n+  for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+    {\n+      gimple stmt = gsi_stmt (gsi);\n \n+      if (!is_gimple_call (stmt))\n+\tcontinue;\n+\n+      if (gimple_call_noreturn_p (stmt))\n \tchanged |= fixup_noreturn_call (stmt);\n-      }\n+    }\n \n+  if (changed)\n+    bitmap_set_bit (cfgcleanup_altered_bbs, bb->index);\n   return changed;\n }\n \n@@ -655,8 +669,6 @@ cleanup_tree_cfg_1 (void)\n   basic_block bb;\n   unsigned i, n;\n \n-  retval |= split_bbs_on_noreturn_calls ();\n-\n   /* Prepare the worklists of altered blocks.  */\n   cfgcleanup_altered_bbs = BITMAP_ALLOC (NULL);\n \n@@ -672,7 +684,10 @@ cleanup_tree_cfg_1 (void)\n     {\n       bb = BASIC_BLOCK_FOR_FN (cfun, i);\n       if (bb)\n-\tretval |= cleanup_tree_cfg_bb (bb);\n+\t{\n+\t  retval |= cleanup_tree_cfg_bb (bb);\n+\t  retval |= split_bb_on_noreturn_calls (bb);\n+\t}\n     }\n \n   /* Now process the altered blocks, as long as any are available.  */\n@@ -689,9 +704,9 @@ cleanup_tree_cfg_1 (void)\n \n       retval |= cleanup_tree_cfg_bb (bb);\n \n-      /* Rerun split_bbs_on_noreturn_calls, in case we have altered any noreturn\n+      /* Rerun split_bb_on_noreturn_calls, in case we have altered any noreturn\n \t calls.  */\n-      retval |= split_bbs_on_noreturn_calls ();\n+      retval |= split_bb_on_noreturn_calls (bb);\n     }\n \n   end_recording_case_labels ();"}, {"sha": "a7ccf04bea94760a24e772e248cc7a97cfccd328", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58041fe6cf11a9b95a79e6bf694fe37e33d41e6f/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58041fe6cf11a9b95a79e6bf694fe37e33d41e6f/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=58041fe6cf11a9b95a79e6bf694fe37e33d41e6f", "patch": "@@ -1087,12 +1087,6 @@ update_stmt_operands (struct function *fn, gimple stmt)\n \n   timevar_push (TV_TREE_OPS);\n \n-  /* If the stmt is a noreturn call queue it to be processed by\n-     split_bbs_on_noreturn_calls during cfg cleanup.  */\n-  if (is_gimple_call (stmt)\n-      && gimple_call_noreturn_p (stmt))\n-    vec_safe_push (MODIFIED_NORETURN_CALLS (fn), stmt);\n-\n   gcc_assert (gimple_modified_p (stmt));\n   build_ssa_operands (fn, stmt);\n   gimple_set_modified (stmt, false);"}, {"sha": "22570cd0145dc8b214ed3b01e9019707fd9d2efe", "filename": "gcc/tree-ssanames.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58041fe6cf11a9b95a79e6bf694fe37e33d41e6f/gcc%2Ftree-ssanames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58041fe6cf11a9b95a79e6bf694fe37e33d41e6f/gcc%2Ftree-ssanames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.h?ref=58041fe6cf11a9b95a79e6bf694fe37e33d41e6f", "patch": "@@ -57,7 +57,6 @@ struct GTY ((variable_size)) range_info_def {\n \n \n #define SSANAMES(fun) (fun)->gimple_df->ssa_names\n-#define MODIFIED_NORETURN_CALLS(fun) (fun)->gimple_df->modified_noreturn_calls\n #define DEFAULT_DEFS(fun) (fun)->gimple_df->default_defs\n \n #define num_ssa_names (vec_safe_length (cfun->gimple_df->ssa_names))"}]}