{"sha": "bddeccfe5d319972ef8dbf23b97870969654e8b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRkZWNjZmU1ZDMxOTk3MmVmOGRiZjIzYjk3ODcwOTY5NjU0ZThiMQ==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2004-06-30T11:06:28Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2004-06-30T11:06:28Z"}, "message": "tree-ssa-pre.c (phi_trans_add): Use is_gimple_min_invariant to check for constants.\n\n\n\t* tree-ssa-pre.c (phi_trans_add): Use is_gimple_min_invariant\n\tto check for constants.\n\t(set_remove): Likewise.\n\t(value_replace_in_set): Likewise.\n\t(find_leader): Likewise.\n\t* tree-vn.c (set_value_handle): Likewise.\n\t(vn_lookup): Likewise.\n\t(vn_lookup_or_add): Likewise.\n\nFrom-SVN: r83902", "tree": {"sha": "fd198b1e6a301537b6f017c6edf424dc0fc22722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd198b1e6a301537b6f017c6edf424dc0fc22722"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bddeccfe5d319972ef8dbf23b97870969654e8b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bddeccfe5d319972ef8dbf23b97870969654e8b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bddeccfe5d319972ef8dbf23b97870969654e8b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bddeccfe5d319972ef8dbf23b97870969654e8b1/comments", "author": null, "committer": null, "parents": [{"sha": "9ac617d49582c168000b6e593e5c0b4bf2982ee0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac617d49582c168000b6e593e5c0b4bf2982ee0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ac617d49582c168000b6e593e5c0b4bf2982ee0"}], "stats": {"total": 59, "additions": 25, "deletions": 34}, "files": [{"sha": "3d74a3c520ffaff365a2ab6ae4a45761d0fc5010", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bddeccfe5d319972ef8dbf23b97870969654e8b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bddeccfe5d319972ef8dbf23b97870969654e8b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bddeccfe5d319972ef8dbf23b97870969654e8b1", "patch": "@@ -1,3 +1,14 @@\n+2004-06-29  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* tree-ssa-pre.c (phi_trans_add): Use is_gimple_min_invariant\n+\tto check for constants.\n+\t(set_remove): Likewise.\n+\t(value_replace_in_set): Likewise.\n+\t(find_leader): Likewise.\n+\t* tree-vn.c (set_value_handle): Likewise.\n+\t(vn_lookup): Likewise.\n+\t(vn_lookup_or_add): Likewise.\n+\n 2004-06-30  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tRTL prologue/epilogue for SPARC"}, {"sha": "712c3464078f6c080388b7b700c3c9e4c54aa2db", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 7, "deletions": 29, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bddeccfe5d319972ef8dbf23b97870969654e8b1/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bddeccfe5d319972ef8dbf23b97870969654e8b1/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=bddeccfe5d319972ef8dbf23b97870969654e8b1", "patch": "@@ -393,20 +393,9 @@ phi_trans_add (tree e, tree v, basic_block pred)\n void\n add_to_value (tree v, tree e)\n {\n-  /* For values representing non-CST nodes, but still function\n-     invariant things we mark TREE_CONSTANT as true and set the tree\n-     chain to the actual constant.  This is because unlike values\n-     involving expressions, which are only available to use where the\n-     expressions are live, a function invariant can be remade\n-     anywhere, and thus, is available everywhere, just like a constant.  */\n-  if (TREE_CODE_CLASS (TREE_CODE (v)) == 'c')\n+  /* Constants have no expression sets.  */\n+  if (is_gimple_min_invariant (v))\n     return;\n-  else if (is_gimple_min_invariant (v))\n-    {\n-      TREE_CONSTANT (v) = true;\n-      TREE_CHAIN (v) = e;\n-      return;\n-    }\n \n   if (VALUE_HANDLE_EXPR_SET (v) == NULL)\n     VALUE_HANDLE_EXPR_SET (v) = set_new (false);\n@@ -565,14 +554,8 @@ set_remove (value_set_t set, tree expr)\n static bool\n set_contains_value (value_set_t set, tree val)\n {\n-  /* All true constants are in every set.  */\n-  if (TREE_CODE_CLASS (TREE_CODE (val)) == 'c')\n-    return true;\n-  /* This is only referring to the flag above that we set on\n-     values referring to invariants, because we know that we\n-     are dealing with one of the value handles we created.  */\n-\n-  if (TREE_CONSTANT (val))\n+  /* All constants are in every set.  */\n+  if (is_gimple_min_invariant (val))\n     return true;\n   \n   if (set->length == 0)\n@@ -679,7 +662,7 @@ value_insert_into_set (value_set_t set, tree expr)\n \n   /* Constant and invariant values exist everywhere, and thus,\n      actually keeping them in the sets is pointless.  */\n-  if (TREE_CONSTANT (val))\n+  if (is_gimple_min_invariant (val))\n     return;\n \n   if (!set_contains_value (set, val))\n@@ -880,15 +863,10 @@ find_leader (value_set_t set, tree val)\n   if (val == NULL)\n     return NULL;\n \n-  /* True constants represent themselves.  */\n-  if (TREE_CODE_CLASS (TREE_CODE (val)) == 'c')\n+  /* Constants represent themselves.  */\n+  if (is_gimple_min_invariant (val))\n     return val;\n \n-  /* Invariants are still represented by values, since they may be\n-     more than a single _CST node.  */  \n-  if (TREE_CONSTANT (val))\n-    return TREE_CHAIN (val);\n-\n   if (set->length == 0)\n     return NULL;\n   "}, {"sha": "b686af296afccd602c4018046d611a03ad9f7931", "filename": "gcc/tree-vn.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bddeccfe5d319972ef8dbf23b97870969654e8b1/gcc%2Ftree-vn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bddeccfe5d319972ef8dbf23b97870969654e8b1/gcc%2Ftree-vn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vn.c?ref=bddeccfe5d319972ef8dbf23b97870969654e8b1", "patch": "@@ -168,7 +168,7 @@ set_value_handle (tree e, tree v)\n     SSA_NAME_VALUE (e) = v;\n   else if (EXPR_P (e) || DECL_P (e))\n     get_tree_ann (e)->common.value_handle = v;\n-  else if (TREE_CODE_CLASS (TREE_CODE (e)) == 'c')\n+  else if (is_gimple_min_invariant (e))\n     /* Do nothing.  Constants are their own value handles.  */\n     ;\n   else\n@@ -214,8 +214,10 @@ vn_lookup (tree expr, vuse_optype vuses)\n   void **slot;\n   struct val_expr_pair_d vep = {NULL, NULL, NULL, 0};\n \n-  if (TREE_CODE_CLASS (TREE_CODE (expr)) == 'c')\n+  /* Constants are their own value.  */\n+  if (is_gimple_min_invariant (expr))\n     return expr;\n+\n   vep.e = expr;\n   vep.vuses = vuses;\n   vep.hashcode = vn_compute (expr, 0, vuses); \n@@ -261,20 +263,20 @@ vn_lookup_or_add (tree expr, vuse_optype vuses)\n \n /* Get the value handle of EXPR.  This is the only correct way to get\n    the value handle for a \"thing\".  If EXPR does not have a value\n-   handle associated, it generates and returns a new one.  */\n+   handle associated, it returns NULL_TREE.  */\n \n tree\n get_value_handle (tree expr)\n {\n   if (TREE_CODE (expr) == SSA_NAME)\n     return SSA_NAME_VALUE (expr);\n-  else if (TREE_CODE_CLASS (TREE_CODE (expr)) == 'c')\n-    return expr;\n   else if (EXPR_P (expr) || DECL_P (expr))\n     {\n       tree_ann_t ann = tree_ann (expr);\n       return ((ann) ? ann->common.value_handle : NULL_TREE);\n     }\n+  else if (is_gimple_min_invariant (expr))\n+    return expr;\n \n   abort ();\n }"}]}