{"sha": "0534fa565255cf56d5771ea92522403947d4bbd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUzNGZhNTY1MjU1Y2Y1NmQ1NzcxZWE5MjUyMjQwMzk0N2Q0YmJkNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-30T22:55:30Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-30T22:55:30Z"}, "message": "gimplify.c (gimplify_expr): Don't replace with DECL_INITIAL if fb_lvalue.\n\n        * gimplify.c (gimplify_expr) <case CONST_DECL>: Don't replace\n        with DECL_INITIAL if fb_lvalue.\n        * tree-gimple.c (is_gimple_id): Add CONST_DECL.\n        * tree-pretty-print.c (dump_decl_name): Dump unnamed CONST_DECL\n        with <Cxxx>.\n        * tree-ssa-ccp.c (maybe_fold_stmt_indirect): Fold CONST_DECL.\nfortran/\n        * trans-expr.c (gfc_conv_expr_reference): Create a CONST_DECL\n        for TREE_CONSTANTs.\ntestsuite/\n        * gfortran.fortran-torture/execute/intrinsic_rrspacing.f90: Fix\n        write to constant argument.\n        * gfortran.fortran-torture/execute/intrinsic_scale.f90: Likewise.\n\nFrom-SVN: r85365", "tree": {"sha": "b8e5fa782f1cf0143b461a419b9a4855d6b9c559", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8e5fa782f1cf0143b461a419b9a4855d6b9c559"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0534fa565255cf56d5771ea92522403947d4bbd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0534fa565255cf56d5771ea92522403947d4bbd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0534fa565255cf56d5771ea92522403947d4bbd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0534fa565255cf56d5771ea92522403947d4bbd4/comments", "author": null, "committer": null, "parents": [{"sha": "782700d4f2d37e2ee883594032d6748aef983165", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/782700d4f2d37e2ee883594032d6748aef983165", "html_url": "https://github.com/Rust-GCC/gccrs/commit/782700d4f2d37e2ee883594032d6748aef983165"}], "stats": {"total": 73, "additions": 61, "deletions": 12}, "files": [{"sha": "e46f01bd7069aeb6f8a2be00ee77a14e72560da4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0534fa565255cf56d5771ea92522403947d4bbd4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0534fa565255cf56d5771ea92522403947d4bbd4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0534fa565255cf56d5771ea92522403947d4bbd4", "patch": "@@ -1,3 +1,12 @@\n+2004-07-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* gimplify.c (gimplify_expr) <case CONST_DECL>: Don't replace\n+\twith DECL_INITIAL if fb_lvalue.\n+\t* tree-gimple.c (is_gimple_id): Add CONST_DECL.\n+\t* tree-pretty-print.c (dump_decl_name): Dump unnamed CONST_DECL\n+\twith <Cxxx>.\n+\t* tree-ssa-ccp.c (maybe_fold_stmt_indirect): Fold CONST_DECL.\n+\n 2004-07-30  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-ssa-alias.c (compute_points_to_and_addr_escape): If a"}, {"sha": "677342764c37af1393e69ce2957ac5ef28e85e17", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0534fa565255cf56d5771ea92522403947d4bbd4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0534fa565255cf56d5771ea92522403947d4bbd4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0534fa565255cf56d5771ea92522403947d4bbd4", "patch": "@@ -1,3 +1,8 @@\n+2004-07-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* trans-expr.c (gfc_conv_expr_reference): Create a CONST_DECL\n+\tfor TREE_CONSTANTs.\n+\n 2004-07-25  Richard Henderson  <rth@redhat.com>\n \n \t* trans-decl.c (gfc_build_function_decl): Set DECL_ARTIFICIAL"}, {"sha": "81d879e5dde919b05aff4d7d41361e4153a7c410", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0534fa565255cf56d5771ea92522403947d4bbd4/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0534fa565255cf56d5771ea92522403947d4bbd4/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=0534fa565255cf56d5771ea92522403947d4bbd4", "patch": "@@ -1612,8 +1612,17 @@ gfc_conv_expr_reference (gfc_se * se, gfc_expr * expr)\n   gfc_conv_expr (se, expr);\n \n   /* Create a temporary var to hold the value.  */\n-  var = gfc_create_var (TREE_TYPE (se->expr), NULL);\n-  gfc_add_modify_expr (&se->pre, var, se->expr);\n+  if (TREE_CONSTANT (se->expr))\n+    {\n+      var = build_decl (CONST_DECL, NULL, TREE_TYPE (se->expr));\n+      DECL_INITIAL (var) = se->expr;\n+      pushdecl (var);\n+    }\n+  else\n+    {\n+      var = gfc_create_var (TREE_TYPE (se->expr), NULL);\n+      gfc_add_modify_expr (&se->pre, var, se->expr);\n+    }\n   gfc_add_block_to_block (&se->pre, &se->post);\n \n   /* Take the address of that value.  */"}, {"sha": "53cf1feac32494457a51bd9e0b5bb75d7d362e47", "filename": "gcc/gimplify.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0534fa565255cf56d5771ea92522403947d4bbd4/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0534fa565255cf56d5771ea92522403947d4bbd4/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=0534fa565255cf56d5771ea92522403947d4bbd4", "patch": "@@ -3576,7 +3576,14 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n \t  break;\n \n \tcase CONST_DECL:\n-\t  *expr_p = DECL_INITIAL (*expr_p);\n+\t  /* If we require an lvalue, such as for ADDR_EXPR, retain the\n+\t     CONST_DECL node.  Otherwise the decl is replacable by its\n+\t     value.  */\n+\t  /* ??? Should be == fb_lvalue, but ADDR_EXPR passes fb_either.  */\n+\t  if (fallback & fb_lvalue)\n+\t    ret = GS_ALL_DONE;\n+\t  else\n+\t    *expr_p = DECL_INITIAL (*expr_p);\n \t  break;\n \n \tcase DECL_EXPR:"}, {"sha": "7280c2da47815867790de1cf3c0750c93d62e64a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0534fa565255cf56d5771ea92522403947d4bbd4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0534fa565255cf56d5771ea92522403947d4bbd4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0534fa565255cf56d5771ea92522403947d4bbd4", "patch": "@@ -1,3 +1,9 @@\n+2004-07-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* gfortran.fortran-torture/execute/intrinsic_rrspacing.f90: Fix\n+\twrite to constant argument.\n+\t* gfortran.fortran-torture/execute/intrinsic_scale.f90: Likewise.\n+\n 2004-07-30  Richard Henderson  <rth@redhat.com>\n \n         * gfortran.fortran-torture/execute/intrinsic_nearest.f90: Disable"}, {"sha": "e74cf6494fc5e944cfb641a78f9360f4a68ce155", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/intrinsic_rrspacing.f90", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0534fa565255cf56d5771ea92522403947d4bbd4/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_rrspacing.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0534fa565255cf56d5771ea92522403947d4bbd4/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_rrspacing.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_rrspacing.f90?ref=0534fa565255cf56d5771ea92522403947d4bbd4", "patch": "@@ -8,18 +8,20 @@ program test_rrspacing\n   call test_real8(33.0_8)\n   call test_real8(-33.0_8)\n end\n-subroutine test_real4(x)\n-  real x,y\n+subroutine test_real4(orig)\n+  real x,y,orig\n   integer p\n+  x = orig\n   p = 24\n   y = abs (x * 2.0 ** (- exponent (x))) * (2.0 ** p)\n   x = rrspacing(x)\n   if (abs (x - y) .gt. abs(x * 1e-6)) call abort\n end\n \n-subroutine test_real8(x)\n-  real*8 x,y,t\n+subroutine test_real8(orig)\n+  real*8 x,y,t,orig\n   integer p\n+  x = orig\n   p = 53\n   y = abs (x * 2.0 ** (- exponent (x))) * (2.0 ** p)\n   x = rrspacing(x)"}, {"sha": "775c4d7b4b5225716dc9aeff31adb0014afd56b0", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/intrinsic_scale.f90", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0534fa565255cf56d5771ea92522403947d4bbd4/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_scale.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0534fa565255cf56d5771ea92522403947d4bbd4/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_scale.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_scale.f90?ref=0534fa565255cf56d5771ea92522403947d4bbd4", "patch": "@@ -10,17 +10,19 @@ program test_scale\n   call test_real8 (33.0_8, -4)\n   call test_real8 (-33._8, 4)\n end\n-subroutine test_real4 (x, i)\n-  real x,y\n+subroutine test_real4 (orig, i)\n+  real x,y,orig\n   integer i\n+  x = orig\n   y = x * (2.0 ** i)\n   x = scale (x, i)\n   if (abs (x - y) .gt. abs(x * 1e-6)) call abort\n end\n \n-subroutine test_real8 (x, i)\n-  real*8 x,y\n+subroutine test_real8 (orig, i)\n+  real*8 x,y,orig\n   integer i\n+  x = orig\n   y = x * (2.0 ** i)\n   x = scale (x, i)\n   if (abs (x - y) .gt. abs(x * 1e-6)) call abort"}, {"sha": "413395ae5314cde2a774c6af274dc8a75f1acf15", "filename": "gcc/tree-gimple.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0534fa565255cf56d5771ea92522403947d4bbd4/gcc%2Ftree-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0534fa565255cf56d5771ea92522403947d4bbd4/gcc%2Ftree-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.c?ref=0534fa565255cf56d5771ea92522403947d4bbd4", "patch": "@@ -413,6 +413,7 @@ is_gimple_id (tree t)\n   return (is_gimple_variable (t)\n \t  || TREE_CODE (t) == FUNCTION_DECL\n \t  || TREE_CODE (t) == LABEL_DECL\n+\t  || TREE_CODE (t) == CONST_DECL\n \t  /* Allow string constants, since they are addressable.  */\n \t  || TREE_CODE (t) == STRING_CST);\n }"}, {"sha": "a3a3a01d75e90b373f92502a9569643e554509f5", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0534fa565255cf56d5771ea92522403947d4bbd4/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0534fa565255cf56d5771ea92522403947d4bbd4/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=0534fa565255cf56d5771ea92522403947d4bbd4", "patch": "@@ -165,7 +165,10 @@ dump_decl_name (pretty_printer *buffer, tree node, int flags)\n \tpp_printf (buffer, \"<L\" HOST_WIDE_INT_PRINT_DEC \">\",\n \t\t   LABEL_DECL_UID (node));\n       else\n-\tpp_printf (buffer, \"<D%u>\", DECL_UID (node));\n+\t{\n+\t  char c = TREE_CODE (node) == CONST_DECL ? 'C' : 'D';\n+\t  pp_printf (buffer, \"<%c%u>\", c, DECL_UID (node));\n+\t}\n     }\n }\n "}, {"sha": "f883e373cc4911c2ecc5c7bbe22b764a75b1bcb6", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0534fa565255cf56d5771ea92522403947d4bbd4/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0534fa565255cf56d5771ea92522403947d4bbd4/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=0534fa565255cf56d5771ea92522403947d4bbd4", "patch": "@@ -1868,6 +1868,11 @@ maybe_fold_stmt_indirect (tree expr, tree base, tree offset)\n       /* Strip the ADDR_EXPR.  */\n       base = TREE_OPERAND (base, 0);\n \n+      /* Fold away CONST_DECL to its value, if the type is scalar.  */\n+      if (TREE_CODE (base) == CONST_DECL\n+\t  && is_gimple_min_invariant (DECL_INITIAL (base)))\n+\treturn DECL_INITIAL (base);\n+\n       /* Try folding *(&B+O) to B[X].  */\n       t = maybe_fold_offset_to_array_ref (base, offset, TREE_TYPE (expr));\n       if (t)"}]}