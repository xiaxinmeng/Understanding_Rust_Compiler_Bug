{"sha": "ea49b4dd2eb8d190f1470fea30dc582eceeee05d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE0OWI0ZGQyZWI4ZDE5MGYxNDcwZmVhMzBkYzU4MmVjZWVlZTA1ZA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2018-02-22T16:36:48Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2018-02-22T16:36:48Z"}, "message": "rx.c (rx_rtx_costs): New function.\n\ngcc/\n\t* config/rx/rx.c (rx_rtx_costs): New function.\n\t(TARGET_RTX_COSTS): Override to use rx_rtx_costs.\n\n\nCo-Authored-By: Oleg Endo <olegendo@gcc.gnu.org>\nCo-Authored-By: Sebastian Perta <sebastian.perta@renesas.com>\n\nFrom-SVN: r257905", "tree": {"sha": "24844f06f4b319767efd79ef5f85c6169f23dbdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24844f06f4b319767efd79ef5f85c6169f23dbdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea49b4dd2eb8d190f1470fea30dc582eceeee05d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea49b4dd2eb8d190f1470fea30dc582eceeee05d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea49b4dd2eb8d190f1470fea30dc582eceeee05d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea49b4dd2eb8d190f1470fea30dc582eceeee05d/comments", "author": null, "committer": null, "parents": [{"sha": "9029d3424fac933a8bd5fb6ea63583f7812b6ef6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9029d3424fac933a8bd5fb6ea63583f7812b6ef6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9029d3424fac933a8bd5fb6ea63583f7812b6ef6"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "eb4c5c91090cb32f73403c9273c378b906069206", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea49b4dd2eb8d190f1470fea30dc582eceeee05d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea49b4dd2eb8d190f1470fea30dc582eceeee05d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea49b4dd2eb8d190f1470fea30dc582eceeee05d", "patch": "@@ -1,3 +1,10 @@\n+2018-02-22  DJ Delorie  <dj@redhat.com>\n+\t    Sebastian Perta  <sebastian.perta@renesas.com>\n+\t    Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/rx/rx.c (rx_rtx_costs): New function.\n+\t(TARGET_RTX_COSTS): Override to use rx_rtx_costs.\n+\n 2018-02-22  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* config/arm/t-multilib: Map Armv8-R to Armv7 multilibs."}, {"sha": "fe467f7bd3a869e8ebc378dcf8501a8db4fe09a4", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea49b4dd2eb8d190f1470fea30dc582eceeee05d/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea49b4dd2eb8d190f1470fea30dc582eceeee05d/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=ea49b4dd2eb8d190f1470fea30dc582eceeee05d", "patch": "@@ -2992,6 +2992,62 @@ rx_address_cost (rtx addr, machine_mode mode ATTRIBUTE_UNUSED,\n   return COSTS_N_INSNS (1);\n }\n \n+static bool\n+rx_rtx_costs (rtx x, machine_mode mode, int outer_code ATTRIBUTE_UNUSED,\n+\t      int opno ATTRIBUTE_UNUSED, int* total, bool speed)\n+{\n+  if (x == const0_rtx)\n+    {\n+      *total = 0;\n+      return true;\n+    }\n+\n+  switch (GET_CODE (x))\n+    {\n+    case MULT:\n+      if (mode == DImode)\n+\t{\n+\t  *total = COSTS_N_INSNS (2);\n+\t  return true;\n+\t}\n+      /* fall through */\n+\n+    case PLUS:\n+    case MINUS:\n+    case AND:\n+    case COMPARE:\n+    case IOR:\n+    case XOR:\n+      *total = COSTS_N_INSNS (1);\n+      return true;\n+\n+    case DIV:\n+      if (speed)\n+\t/* This is the worst case for a division.  Pessimize divisions when\n+\t   not optimizing for size and allow reciprocal optimizations which\n+\t   produce bigger code.  */\n+\t*total = COSTS_N_INSNS (20);\n+      else\n+\t*total = COSTS_N_INSNS (3);\n+      return true;\n+\n+    case UDIV:\n+      if (speed)\n+\t/* This is the worst case for a division.  Pessimize divisions when\n+\t   not optimizing for size and allow reciprocal optimizations which\n+\t   produce bigger code.  */\n+\t*total = COSTS_N_INSNS (18);\n+      else\n+\t*total = COSTS_N_INSNS (3);\n+      return true;\n+\n+    default:\n+      break;\n+    }\n+\n+  return false;\n+}\n+\n static bool\n rx_can_eliminate (const int from ATTRIBUTE_UNUSED, const int to)\n {\n@@ -3726,6 +3782,9 @@ rx_modes_tieable_p (machine_mode mode1, machine_mode mode2)\n #undef  TARGET_MODES_TIEABLE_P\n #define TARGET_MODES_TIEABLE_P\t\t\trx_modes_tieable_p\n \n+#undef  TARGET_RTX_COSTS\n+#define TARGET_RTX_COSTS rx_rtx_costs\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-rx.h\""}]}