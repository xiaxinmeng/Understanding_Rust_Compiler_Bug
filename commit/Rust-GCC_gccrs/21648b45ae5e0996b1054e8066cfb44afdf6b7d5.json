{"sha": "21648b45ae5e0996b1054e8066cfb44afdf6b7d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE2NDhiNDVhZTVlMDk5NmIxMDU0ZTgwNjZjZmI0NGFmZGY2YjdkNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-04-23T11:17:07Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-04-23T11:17:07Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r823", "tree": {"sha": "ed96b9e6798e861777a9a6ad19fddd0685a3999d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed96b9e6798e861777a9a6ad19fddd0685a3999d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21648b45ae5e0996b1054e8066cfb44afdf6b7d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21648b45ae5e0996b1054e8066cfb44afdf6b7d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21648b45ae5e0996b1054e8066cfb44afdf6b7d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21648b45ae5e0996b1054e8066cfb44afdf6b7d5/comments", "author": null, "committer": null, "parents": [{"sha": "6e3f07241c343ba0d1c2023af0be57704d93a5be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e3f07241c343ba0d1c2023af0be57704d93a5be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e3f07241c343ba0d1c2023af0be57704d93a5be"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "e456a93bbc2056d3694c00a8fe165d0d66bc0b6b", "filename": "gcc/cse.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21648b45ae5e0996b1054e8066cfb44afdf6b7d5/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21648b45ae5e0996b1054e8066cfb44afdf6b7d5/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=21648b45ae5e0996b1054e8066cfb44afdf6b7d5", "patch": "@@ -3270,24 +3270,22 @@ simplify_binary_operation (code, mode, op0, op1)\n \t  break;\n \t      \n \tcase MINUS:\n-\t  /* In IEEE floating point, x-0 is not the same as x.  */\n+\t  /* None of these optimizations can be done for IEEE\n+\t     floating point.  */\n+\t  if (TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT\n+\t      && GET_MODE_CLASS (mode) != MODE_INT)\n+\t    break;\n+\n+\t  /* We can't assume x-x is 0 even with non-IEEE floating point.  */\n \t  if (rtx_equal_p (op0, op1)\n \t      && ! side_effects_p (op0)\n-\t      /* We can't assume x-x is 0\n-\t\t even with non-IEEE floating point.  */\n \t      && GET_MODE_CLASS (mode) != MODE_FLOAT)\n \t    return const0_rtx;\n \n \t  /* Change subtraction from zero into negation.  */\n \t  if (op0 == CONST0_RTX (mode))\n \t    return gen_rtx (NEG, mode, op1);\n \n-\t  /* The remainer of these cases cannot be done for IEEE\n-\t     floating-point.  */\n-\t  if (TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT\n-\t      && GET_MODE_CLASS (mode) != MODE_INT)\n-\t    break;\n-\n \t  /* Subtracting 0 has no effect.  */\n \t  if (op1 == CONST0_RTX (mode))\n \t    return op0;"}]}