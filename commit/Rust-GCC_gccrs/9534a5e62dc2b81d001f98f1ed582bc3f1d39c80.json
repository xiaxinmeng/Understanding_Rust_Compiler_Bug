{"sha": "9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUzNGE1ZTYyZGMyYjgxZDAwMWY5OGYxZWQ1ODJiYzNmMWQzOWM4MA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-05-31T19:20:24Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-05-31T19:20:24Z"}, "message": "PR libstdc++/78870 support std::filesystem on Windows\n\n\tPR libstdc++/78870 support std::filesystem on Windows\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* configure.ac: Check for link, readlink and symlink.\n\t* include/bits/fs_path.h (path::operator/=(const path&)): Move\n\tdefinition out of class body.\n\t(path::is_absolute(), path::_M_append(path)): Likewise.\n\t(operator<<(basic_ostream, const path&)): Use std::quoted directly.\n\t(operator>>(basic_istream, path&)): Likewise.\n\t(u8path): Reorder definitions and fix Windows implementation.\n\t(path::is_absolute()): Define inline and fix for Windows.\n\t[!_GLIBCXX_FILESYSTEM_IS_WINDOWS] (path::operator/=(const path&)):\n\tDefine POSIX version inline.\n\t(path::_M_append(path)): Define inline.\n\t* include/experimental/bits/fs_path.h (path::is_absolute()): Move\n\tdefinition out of class body.\n\t(operator<<(basic_ostream, const path&)): Fix type of delimiter and\n\tescape characters.\n\t(operator>>(basic_istream, path&)): Likewise.\n\t(path::is_absolute()): Define inline and fix for Windows.\n\t* src/filesystem/dir-common.h (__gnu_posix): New namespace.\n\t(__gnu_posix::char_type, __gnu_posix::DIR, __gnu_posix::dirent)\n\t(__gnu_posix::opendir, __gnu_posix::readdir, __gnu_posix::closedir):\n\tDefine as adaptors for Windows functions/types or as\n\tusing-declarations for POSIX functions/types.\n\t(_Dir_base, get_file_type): Qualify names to use declarations from\n\t__gnu_posix namespace.\n\t(_Dir_base::is_dor_or_dotdot): New helper functions.\n\t* src/filesystem/dir.cc (_Dir, recursive_directory_iterator): Qualify\n\tnames to use declarations from __gnu_posix namespace.\n\t* src/filesystem/ops-common.h (__gnu_posix): New nested namespace.\n\t(__gnu_posix::open, __gnu_posix::close, __gnu_posix::stat_type)\n\t(__gnu_posix::stat, __gnu_posix::lstat, __gnu_posix::mode_t)\n\t(__gnu_posix::chmod, __gnu_posix::mkdir, __gnu_posix::getcwd)\n\t(__gnu_posix::chdir, __gnu_posix::utimbuf, __gnu_posix::utime)\n\t(__gnu_posix::rename, __gnu_posix::truncate, __gnu_posix::char_type):\n\tDefine as adaptors for Windows functions/types or as\n\tusing-declarations for POSIX functions/types.\n\t(stat_type, do_copy_file): Qualify names to use declarations from\n\t__gnu_posix namespace.\n\t(do_space): Declare new function.\n\t(make_file_type): Only use S_ISLNK if defined.\n\t* src/filesystem/ops.cc (char_ptr, filesystem::canonical): Use\n\tpath::value_type not char.\n\t(filesystem::copy, create_dir, filesystem::create_directory): Qualify\n\tnames to use declarations from __gnu_posix namespace.\n\t(filesystem::create_hard_link): Check HAVE_LINK autoconf macro and\n\tadd implementation for Windows.\n\t(filesystem::create_symlink): Check HAVE_SYMLINK autoconf macro.\n\t(filesystem::current_path(error_code&)): Use __gnu_posix::getcwd.\n\t[!_PC_PATH_MAX]: Don't use pathconf.\n\t[PATH_MAX]: Use if defined.\n\t(filesystem::current_path(const path&, error_code&))\n\t(filesystem::equivalent, do_stat, filesystem::hard_link_count)\n\t(filesystem::last_write_time, filesystem::permissions): Use names\n\tfrom __gnu_posix.\n\t(filesystem::read_symlink): Check HAVE_READLINK autoconf macro.\n\t(filesystem::remove) [_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Add\n\timplementation for Windows.\n\t(filesystem::rename, filesystem::resize_file): Use names from\n\t__gnu_posix.\n\t(filesystem::space): Use do_space.\n\t[_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Get absolute path to directory.\n\t(filesystem::status, filesystem::symlink_status): Use names from\n\t__gnu_posix.\n\t(filesystem::temp_directory_path): Add implementation for Windows.\n\t* src/filesystem/path.cc (dot): Define constant.\n\t(path::replace_extension): Use dot.\n\t(path::_M_find_extension): Likewise. Use path::string_type not\n\tstd::string.\n\t(path::_M_split_cmpts): Use dot.\n\t(filesystem_error::_M_get_what): Use u8string() not native().\n\t* src/filesystem/std-dir.cc (_Dir, recursive_directory_iterator):\n\tQualify names to use declarations from __gnu_posix namespace.\n\t* src/filesystem/std-ops.cc (filesystem::absolute(const path&)): Use\n\tcorrect error_code.\n\t(filesystem::absolute(const path&, error_code&)): Add implementation\n\tfor Windows.\n\t(char_ptr, filesystem::canonical): Use path::value_type not char.\n\t(do_copy_file): Use names from __gnu_posix.\n\t[_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Do not use fchmod, fchmodat or\n\tsendfile.\n\t(filesystem::copy, create_dir, filesystem::create_directory): Qualify\n\tnames to use declarations from __gnu_posix namespace.\n\t(filesystem::create_hard_link): Check HAVE_LINK autoconf macro and\n\tadd implementation for Windows.\n\t(filesystem::create_symlink): Check HAVE_SYMLINK autoconf macro.\n\t(filesystem::current_path(error_code&)): Use __gnu_posix::getcwd.\n\t[!_PC_PATH_MAX]: Don't use pathconf.\n\t[PATH_MAX]: Use if defined.\n\t(filesystem::current_path(const path&, error_code&))\n\t(filesystem::equivalent, do_stat, filesystem::hard_link_count)\n\t(filesystem::last_write_time, filesystem::permissions): Use names\n\tfrom __gnu_posix.\n\t(filesystem::read_symlink): Check HAVE_READLINK autoconf macro.\n\t(filesystem::remove) [_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Add\n\timplementation for Windows.\n\t(filesystem::rename, filesystem::resize_file): Use names from\n\t__gnu_posix.\n\t(do_space): Define.\n\t(filesystem::space): Use do_space.\n\t(filesystem::status, filesystem::symlink_status): Use names from\n\t__gnu_posix.\n\t(filesystem::temp_directory_path): Add implementation for Windows.\n\t* src/filesystem/std-path.cc\n\t[_GLIBCXX_FILESYSTEM_IS_WINDOWS] (path::operator/=(const path&)):\n\tDefine for Windows.\n\t(dot): Define constant.\n\t(path::replace_extension, is_dot): Use dot.\n\t(path::lexically_normal): Check _M_type instead of calling\n\tnon-existent function.\n\t(path::_M_find_extension): Use dot. Use path::string_type not\n\tstd::string.\n\t(path::_M_split_cmpts): Use dot.\n\t(filesystem_error::_M_get_what): Use u8string() not native().\n\t* testsuite/27_io/filesystem/iterators/directory_iterator.cc: Do not\n\tuse symlinks.\n\t* testsuite/27_io/filesystem/iterators/recursive_directory_iterator.cc:\n\tLikewise.\n\t* testsuite/27_io/filesystem/operations/absolute.cc: Use\n\t__gnu_test::root_path() instead of \"/\" and add Windows-specific tests.\n\t* testsuite/27_io/filesystem/operations/canonical.cc: Use\n\tpath::string() to get narrow string, not path::native().\n\t* testsuite/27_io/filesystem/operations/copy.cc: Construct fstreams\n\twith std::filesystem::path not std::basic_string.\n\t* testsuite/27_io/filesystem/operations/copy_file.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/exists.cc: Use\n\t__gnu_test::root_path() instead of \"/\".\n\t* testsuite/27_io/filesystem/operations/is_empty.cc: Construct\n\tfstreams with std::filesystem::path not std::basic_string.\n\t* testsuite/27_io/filesystem/operations/last_write_time.cc: Use\n\tpath::string() to get narrow string.\n\t* testsuite/27_io/filesystem/operations/space.cc: Check results for\n\terrors, expect sensible values otherwise.\n\t* testsuite/27_io/filesystem/operations/temp_directory_path.cc: Add\n\thelpers for adjusting the environment on Windows.\n\t* testsuite/27_io/filesystem/path/append/path.cc: Test\n\tWindows-specific behaviour.\n\t* testsuite/27_io/filesystem/path/construct/format.cc: Fix creation\n\tof path::string_type objects.\n\t* testsuite/27_io/filesystem/path/construct/locale.cc: Compare native\n\tstring to wide string on Windows.\n\t* testsuite/27_io/filesystem/path/decompose/root_directory.cc: Allow\n\tfor backslash as root-directory.\n\t* testsuite/27_io/filesystem/path/decompose/stem.cc: Use\n\tpath::string() to get narrow string.\n\t* testsuite/27_io/filesystem/path/itr/traversal.cc: Test Windows-style\n\tpaths.\n\t* testsuite/27_io/filesystem/path/native/string.cc: Use string_type\n\tnot std::string.\n\t* testsuite/27_io/filesystem/path/query/is_absolute.cc: Adjust for\n\tdifferent definintion of absolute paths on Windows.\n\t* testsuite/experimental/filesystem/iterators/directory_iterator.cc:\n\tDo not use symlinks.\n\t* testsuite/experimental/filesystem/operations/absolute.cc: Test\n\tWindows behaviour.\n\t* testsuite/experimental/filesystem/operations/copy.cc: Construct\n\tfstreams with NTCTS not std::basic_string.\n\t* testsuite/experimental/filesystem/operations/copy_file.cc: Likewise.\n\t* testsuite/experimental/filesystem/operations/exists.cc: Use\n\t__gnu_test::root_path() instead of \"/\".\n\t* testsuite/experimental/filesystem/operations/is_empty.cc: Construct\n\tfstreams with NTCTS not std::basic_string.\n\t* testsuite/experimental/filesystem/operations/last_write_time.cc:\n\tUse path::string() to get narrow string.\n\t* testsuite/experimental/filesystem/operations/space.cc: Use\n\t__gnu_test::root_path() instead of \"/\".\n\t* testsuite/experimental/filesystem/operations/temp_directory_path.cc:\n\tAdd helpers for adjusting the environment on Windows.\n\t* testsuite/experimental/filesystem/path/append/path.cc: Use\n\tpath::string() to get narrow strings for comparisons.\n\t* testsuite/experimental/filesystem/path/concat/path.cc: Likewise.\n\t* testsuite/experimental/filesystem/path/decompose/root_directory.cc:\n\tLikewise.\n\t* testsuite/experimental/filesystem/path/decompose/stem.cc: Likewise.\n\t* testsuite/experimental/filesystem/path/native/string.cc: Use\n\tstring_type not std::string.\n\t* testsuite/experimental/filesystem/path/query/is_absolute.cc:\n\tAdjust for different definintion of absolute paths on Windows.\n\t* testsuite/util/testsuite_fs.h (__gnu_test::root_path()): New\n\tfunction.\n\t(__gnu_test::scoped_file): Construct fstreams with NTCTS not\n\tstd::basic_string.\n\nFrom-SVN: r261034", "tree": {"sha": "e449a700dd80cd385dae290e507849c96069af53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e449a700dd80cd385dae290e507849c96069af53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9315097046c86e654871722e65f6da209e0c62a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9315097046c86e654871722e65f6da209e0c62a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9315097046c86e654871722e65f6da209e0c62a"}], "stats": {"total": 1398, "additions": 1041, "deletions": 357}, "files": [{"sha": "88e7c6dce515eba1caf32404bc8841beb33aef16", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -1,3 +1,189 @@\n+2018-05-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/78870 support std::filesystem on Windows\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac: Check for link, readlink and symlink.\n+\t* include/bits/fs_path.h (path::operator/=(const path&)): Move\n+\tdefinition out of class body.\n+\t(path::is_absolute(), path::_M_append(path)): Likewise.\n+\t(operator<<(basic_ostream, const path&)): Use std::quoted directly.\n+\t(operator>>(basic_istream, path&)): Likewise.\n+\t(u8path): Reorder definitions and fix Windows implementation.\n+\t(path::is_absolute()): Define inline and fix for Windows.\n+\t[!_GLIBCXX_FILESYSTEM_IS_WINDOWS] (path::operator/=(const path&)):\n+\tDefine POSIX version inline.\n+\t(path::_M_append(path)): Define inline.\n+\t* include/experimental/bits/fs_path.h (path::is_absolute()): Move\n+\tdefinition out of class body.\n+\t(operator<<(basic_ostream, const path&)): Fix type of delimiter and\n+\tescape characters.\n+\t(operator>>(basic_istream, path&)): Likewise.\n+\t(path::is_absolute()): Define inline and fix for Windows.\n+\t* src/filesystem/dir-common.h (__gnu_posix): New namespace.\n+\t(__gnu_posix::char_type, __gnu_posix::DIR, __gnu_posix::dirent)\n+\t(__gnu_posix::opendir, __gnu_posix::readdir, __gnu_posix::closedir):\n+\tDefine as adaptors for Windows functions/types or as\n+\tusing-declarations for POSIX functions/types.\n+\t(_Dir_base, get_file_type): Qualify names to use declarations from\n+\t__gnu_posix namespace.\n+\t(_Dir_base::is_dor_or_dotdot): New helper functions.\n+\t* src/filesystem/dir.cc (_Dir, recursive_directory_iterator): Qualify\n+\tnames to use declarations from __gnu_posix namespace.\n+\t* src/filesystem/ops-common.h (__gnu_posix): New nested namespace.\n+\t(__gnu_posix::open, __gnu_posix::close, __gnu_posix::stat_type)\n+\t(__gnu_posix::stat, __gnu_posix::lstat, __gnu_posix::mode_t)\n+\t(__gnu_posix::chmod, __gnu_posix::mkdir, __gnu_posix::getcwd)\n+\t(__gnu_posix::chdir, __gnu_posix::utimbuf, __gnu_posix::utime)\n+\t(__gnu_posix::rename, __gnu_posix::truncate, __gnu_posix::char_type):\n+\tDefine as adaptors for Windows functions/types or as\n+\tusing-declarations for POSIX functions/types.\n+\t(stat_type, do_copy_file): Qualify names to use declarations from\n+\t__gnu_posix namespace.\n+\t(do_space): Declare new function.\n+\t(make_file_type): Only use S_ISLNK if defined.\n+\t* src/filesystem/ops.cc (char_ptr, filesystem::canonical): Use\n+\tpath::value_type not char.\n+\t(filesystem::copy, create_dir, filesystem::create_directory): Qualify\n+\tnames to use declarations from __gnu_posix namespace.\n+\t(filesystem::create_hard_link): Check HAVE_LINK autoconf macro and\n+\tadd implementation for Windows.\n+\t(filesystem::create_symlink): Check HAVE_SYMLINK autoconf macro.\n+\t(filesystem::current_path(error_code&)): Use __gnu_posix::getcwd.\n+\t[!_PC_PATH_MAX]: Don't use pathconf.\n+\t[PATH_MAX]: Use if defined.\n+\t(filesystem::current_path(const path&, error_code&))\n+\t(filesystem::equivalent, do_stat, filesystem::hard_link_count)\n+\t(filesystem::last_write_time, filesystem::permissions): Use names\n+\tfrom __gnu_posix.\n+\t(filesystem::read_symlink): Check HAVE_READLINK autoconf macro.\n+\t(filesystem::remove) [_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Add\n+\timplementation for Windows.\n+\t(filesystem::rename, filesystem::resize_file): Use names from\n+\t__gnu_posix.\n+\t(filesystem::space): Use do_space.\n+\t[_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Get absolute path to directory.\n+\t(filesystem::status, filesystem::symlink_status): Use names from\n+\t__gnu_posix.\n+\t(filesystem::temp_directory_path): Add implementation for Windows.\n+\t* src/filesystem/path.cc (dot): Define constant.\n+\t(path::replace_extension): Use dot.\n+\t(path::_M_find_extension): Likewise. Use path::string_type not\n+\tstd::string.\n+\t(path::_M_split_cmpts): Use dot.\n+\t(filesystem_error::_M_get_what): Use u8string() not native().\n+\t* src/filesystem/std-dir.cc (_Dir, recursive_directory_iterator):\n+\tQualify names to use declarations from __gnu_posix namespace.\n+\t* src/filesystem/std-ops.cc (filesystem::absolute(const path&)): Use\n+\tcorrect error_code.\n+\t(filesystem::absolute(const path&, error_code&)): Add implementation\n+\tfor Windows.\n+\t(char_ptr, filesystem::canonical): Use path::value_type not char.\n+\t(do_copy_file): Use names from __gnu_posix.\n+\t[_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Do not use fchmod, fchmodat or\n+\tsendfile.\n+\t(filesystem::copy, create_dir, filesystem::create_directory): Qualify\n+\tnames to use declarations from __gnu_posix namespace.\n+\t(filesystem::create_hard_link): Check HAVE_LINK autoconf macro and\n+\tadd implementation for Windows.\n+\t(filesystem::create_symlink): Check HAVE_SYMLINK autoconf macro.\n+\t(filesystem::current_path(error_code&)): Use __gnu_posix::getcwd.\n+\t[!_PC_PATH_MAX]: Don't use pathconf.\n+\t[PATH_MAX]: Use if defined.\n+\t(filesystem::current_path(const path&, error_code&))\n+\t(filesystem::equivalent, do_stat, filesystem::hard_link_count)\n+\t(filesystem::last_write_time, filesystem::permissions): Use names\n+\tfrom __gnu_posix.\n+\t(filesystem::read_symlink): Check HAVE_READLINK autoconf macro.\n+\t(filesystem::remove) [_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Add\n+\timplementation for Windows.\n+\t(filesystem::rename, filesystem::resize_file): Use names from\n+\t__gnu_posix.\n+\t(do_space): Define.\n+\t(filesystem::space): Use do_space.\n+\t(filesystem::status, filesystem::symlink_status): Use names from\n+\t__gnu_posix.\n+\t(filesystem::temp_directory_path): Add implementation for Windows.\n+\t* src/filesystem/std-path.cc\n+\t[_GLIBCXX_FILESYSTEM_IS_WINDOWS] (path::operator/=(const path&)):\n+\tDefine for Windows.\n+\t(dot): Define constant.\n+\t(path::replace_extension, is_dot): Use dot.\n+\t(path::lexically_normal): Check _M_type instead of calling\n+\tnon-existent function.\n+\t(path::_M_find_extension): Use dot. Use path::string_type not\n+\tstd::string.\n+\t(path::_M_split_cmpts): Use dot.\n+\t(filesystem_error::_M_get_what): Use u8string() not native().\n+\t* testsuite/27_io/filesystem/iterators/directory_iterator.cc: Do not\n+\tuse symlinks.\n+\t* testsuite/27_io/filesystem/iterators/recursive_directory_iterator.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/operations/absolute.cc: Use\n+\t__gnu_test::root_path() instead of \"/\" and add Windows-specific tests.\n+\t* testsuite/27_io/filesystem/operations/canonical.cc: Use\n+\tpath::string() to get narrow string, not path::native().\n+\t* testsuite/27_io/filesystem/operations/copy.cc: Construct fstreams\n+\twith std::filesystem::path not std::basic_string.\n+\t* testsuite/27_io/filesystem/operations/copy_file.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/exists.cc: Use\n+\t__gnu_test::root_path() instead of \"/\".\n+\t* testsuite/27_io/filesystem/operations/is_empty.cc: Construct\n+\tfstreams with std::filesystem::path not std::basic_string.\n+\t* testsuite/27_io/filesystem/operations/last_write_time.cc: Use\n+\tpath::string() to get narrow string.\n+\t* testsuite/27_io/filesystem/operations/space.cc: Check results for\n+\terrors, expect sensible values otherwise.\n+\t* testsuite/27_io/filesystem/operations/temp_directory_path.cc: Add\n+\thelpers for adjusting the environment on Windows.\n+\t* testsuite/27_io/filesystem/path/append/path.cc: Test\n+\tWindows-specific behaviour.\n+\t* testsuite/27_io/filesystem/path/construct/format.cc: Fix creation\n+\tof path::string_type objects.\n+\t* testsuite/27_io/filesystem/path/construct/locale.cc: Compare native\n+\tstring to wide string on Windows.\n+\t* testsuite/27_io/filesystem/path/decompose/root_directory.cc: Allow\n+\tfor backslash as root-directory.\n+\t* testsuite/27_io/filesystem/path/decompose/stem.cc: Use\n+\tpath::string() to get narrow string.\n+\t* testsuite/27_io/filesystem/path/itr/traversal.cc: Test Windows-style\n+\tpaths.\n+\t* testsuite/27_io/filesystem/path/native/string.cc: Use string_type\n+\tnot std::string.\n+\t* testsuite/27_io/filesystem/path/query/is_absolute.cc: Adjust for\n+\tdifferent definintion of absolute paths on Windows.\n+\t* testsuite/experimental/filesystem/iterators/directory_iterator.cc:\n+\tDo not use symlinks.\n+\t* testsuite/experimental/filesystem/operations/absolute.cc: Test\n+\tWindows behaviour.\n+\t* testsuite/experimental/filesystem/operations/copy.cc: Construct\n+\tfstreams with NTCTS not std::basic_string.\n+\t* testsuite/experimental/filesystem/operations/copy_file.cc: Likewise.\n+\t* testsuite/experimental/filesystem/operations/exists.cc: Use\n+\t__gnu_test::root_path() instead of \"/\".\n+\t* testsuite/experimental/filesystem/operations/is_empty.cc: Construct\n+\tfstreams with NTCTS not std::basic_string.\n+\t* testsuite/experimental/filesystem/operations/last_write_time.cc:\n+\tUse path::string() to get narrow string.\n+\t* testsuite/experimental/filesystem/operations/space.cc: Use\n+\t__gnu_test::root_path() instead of \"/\".\n+\t* testsuite/experimental/filesystem/operations/temp_directory_path.cc:\n+\tAdd helpers for adjusting the environment on Windows.\n+\t* testsuite/experimental/filesystem/path/append/path.cc: Use\n+\tpath::string() to get narrow strings for comparisons.\n+\t* testsuite/experimental/filesystem/path/concat/path.cc: Likewise.\n+\t* testsuite/experimental/filesystem/path/decompose/root_directory.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/decompose/stem.cc: Likewise.\n+\t* testsuite/experimental/filesystem/path/native/string.cc: Use\n+\tstring_type not std::string.\n+\t* testsuite/experimental/filesystem/path/query/is_absolute.cc:\n+\tAdjust for different definintion of absolute paths on Windows.\n+\t* testsuite/util/testsuite_fs.h (__gnu_test::root_path()): New\n+\tfunction.\n+\t(__gnu_test::scoped_file): Construct fstreams with NTCTS not\n+\tstd::basic_string.\n+\n 2018-05-31  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/85951"}, {"sha": "3fb685ce9aa4f0f97d90eae11b9090d2a8ed7fb6", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -264,6 +264,9 @@\n /* Only used in build directory testsuite_hooks.h. */\n #undef HAVE_LIMIT_VMEM\n \n+/* Define to 1 if you have the `link' function. */\n+#undef HAVE_LINK\n+\n /* Define if futex syscall is available. */\n #undef HAVE_LINUX_FUTEX\n \n@@ -339,6 +342,9 @@\n /* Define to 1 if you have the `quick_exit' function. */\n #undef HAVE_QUICK_EXIT\n \n+/* Define to 1 if you have the `readlink' function. */\n+#undef HAVE_READLINK\n+\n /* Define to 1 if you have the `setenv' function. */\n #undef HAVE_SETENV\n \n@@ -408,6 +414,9 @@\n /* Define if strxfrm_l is available in <string.h>. */\n #undef HAVE_STRXFRM_L\n \n+/* Define to 1 if you have the `symlink' function. */\n+#undef HAVE_SYMLINK\n+\n /* Define to 1 if the target runtime linker supports binding the same symbol\n    to different versions. */\n #undef HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT"}, {"sha": "b9883d413f624e9442461fccee68168b6643b40a", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -80047,6 +80047,19 @@ _ACEOF\n \n fi\n \n+done\n+\n+for ac_func in link readlink symlink\n+do :\n+  as_ac_var=`$as_echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n+ac_fn_c_check_func \"$LINENO\" \"$ac_func\" \"$as_ac_var\"\n+eval as_val=\\$$as_ac_var\n+   if test \"x$as_val\" = x\"\"yes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define `$as_echo \"HAVE_$ac_func\" | $as_tr_cpp` 1\n+_ACEOF\n+\n+fi\n done\n \n "}, {"sha": "dde1c4da9447674ec64448794cbefa5effd427de", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -420,6 +420,7 @@ GLIBCXX_CHECK_GTHREADS\n \n # For Filesystem TS.\n AC_CHECK_HEADERS([fcntl.h dirent.h sys/statvfs.h utime.h])\n+AC_CHECK_FUNCS(link readlink symlink)\n GLIBCXX_ENABLE_FILESYSTEM_TS\n GLIBCXX_CHECK_FILESYSTEM_DEPS\n "}, {"sha": "6eab800ac5697cfcbcda556bf80f202da7cfefc9", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 80, "deletions": 68, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -37,11 +37,11 @@\n #include <vector>\n #include <locale>\n #include <iosfwd>\n+#include <iomanip>\n #include <codecvt>\n #include <string_view>\n #include <system_error>\n #include <bits/stl_algobase.h>\n-#include <bits/quoted_string.h>\n #include <bits/locale_conv.h>\n \n #if defined(_WIN32) && !defined(__CYGWIN__)\n@@ -232,37 +232,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     // appends\n \n-    path& operator/=(const path& __p)\n-    {\n-#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-      if (__p.is_absolute()\n-\t  || (__p.has_root_name() && __p.root_name() != root_name()))\n-\toperator=(__p);\n-      else\n-\t{\n-\t  string_type __pathname;\n-\t  if (__p.has_root_directory())\n-\t    __pathname = root_name().native();\n-\t  else if (has_filename() || (!has_root_directory() && is_absolute()))\n-\t    __pathname = _M_pathname + preferred_separator;\n-\t  __pathname += __p.relative_path().native(); // XXX is this right?\n-\t  _M_pathname.swap(__pathname);\n-\t  _M_split_cmpts();\n-\t}\n-#else\n-      // Much simpler, as any path with root-name or root-dir is absolute.\n-      if (__p.is_absolute())\n-\toperator=(__p);\n-      else\n-\t{\n-\t  if (has_filename() || (_M_type == _Type::_Root_name))\n-\t    _M_pathname += preferred_separator;\n-\t  _M_pathname += __p.native();\n-\t  _M_split_cmpts();\n-\t}\n-#endif\n-      return *this;\n-    }\n+    path& operator/=(const path& __p);\n \n     template <class _Source>\n       _Path<_Source>&\n@@ -378,7 +348,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     bool has_filename() const;\n     bool has_stem() const;\n     bool has_extension() const;\n-    bool is_absolute() const { return has_root_directory(); }\n+    bool is_absolute() const;\n     bool is_relative() const { return !is_absolute(); }\n \n     // generation\n@@ -419,19 +389,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     enum class _Split { _Stem, _Extension };\n \n-    path&\n-    _M_append(path __p)\n-    {\n-      if (__p.is_absolute())\n-\toperator=(std::move(__p));\n-#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-      else if (__p.has_root_name() && __p.root_name() != root_name())\n-\toperator=(std::move(__p));\n-#endif\n-      else\n-\toperator/=(const_cast<const path&>(__p));\n-      return *this;\n-    }\n+    path& _M_append(path __p);\n \n     pair<const string_type*, size_t> _M_find_extension() const;\n \n@@ -552,10 +510,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __os, const path& __p)\n     {\n-      auto __tmp = __p.string<_CharT, _Traits>();\n-      using __quoted_string\n-\t= std::__detail::_Quoted_string<decltype(__tmp)&, _CharT>;\n-      __os << __quoted_string{__tmp, '\"', '\\\\'};\n+      __os << std::quoted(__p.string<_CharT, _Traits>());\n       return __os;\n     }\n \n@@ -565,40 +520,55 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     operator>>(basic_istream<_CharT, _Traits>& __is, path& __p)\n     {\n       basic_string<_CharT, _Traits> __tmp;\n-      using __quoted_string\n-\t= std::__detail::_Quoted_string<decltype(__tmp)&, _CharT>;\n-      if (__is >> __quoted_string{ __tmp, '\"', '\\\\' })\n+      if (__is >> std::quoted(__tmp))\n \t__p = std::move(__tmp);\n       return __is;\n     }\n \n-  template<typename _Source>\n+  template<typename _InputIterator>\n     inline auto\n-    u8path(const _Source& __source)\n-    -> decltype(filesystem::path(__source, std::locale::classic()))\n+    u8path(_InputIterator __first, _InputIterator __last)\n+    -> decltype(filesystem::path(__first, __last, std::locale::classic()))\n     {\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-      const std::string __u8str{__source};\n-      return std::filesystem::u8path(__u8str.begin(), __u8str.end());\n+      codecvt_utf8<path::value_type> __cvt;\n+      path::string_type __tmp;\n+      if constexpr (is_pointer_v<_InputIterator>)\n+\t{\n+\t  if (__str_codecvt_in(__first, __last, __tmp, __cvt))\n+\t    return path{ __tmp };\n+\t}\n+      else\n+\t{\n+\t  const std::string __u8str{__first, __last};\n+\t  const char* const __ptr = __u8str.data();\n+\t  if (__str_codecvt_in(__ptr, __ptr + __u8str.size(), __tmp, __cvt))\n+\t    return path{ __tmp };\n+\t}\n+      return {};\n #else\n-      return path{ __source };\n+      return path{ __first, __last };\n #endif\n     }\n \n-  template<typename _InputIterator>\n+  template<typename _Source>\n     inline auto\n-    u8path(_InputIterator __first, _InputIterator __last)\n-    -> decltype(filesystem::path(__first, __last, std::locale::classic()))\n+    u8path(const _Source& __source)\n+    -> decltype(filesystem::path(__source, std::locale::classic()))\n     {\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-      codecvt_utf8<value_type> __cvt;\n-      string_type __tmp;\n-      if (__str_codecvt_in(__first, __last, __tmp, __cvt))\n-\treturn path{ __tmp };\n+      if constexpr (is_convertible_v<const _Source&, std::string_view>)\n+\t{\n+\t  const std::string_view __s = __source;\n+\t  return filesystem::u8path(__s.data(), __s.data() + __s.size());\n+\t}\n       else\n-\treturn {};\n+\t{\n+\t  std::string __s = path::_S_string_from_iter(__source);\n+\t  return filesystem::u8path(__s.data(), __s.data() + __s.size());\n+\t}\n #else\n-      return path{ __first, __last };\n+      return path{ __source };\n #endif\n     }\n \n@@ -1068,6 +1038,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     return ext.first && ext.second != string_type::npos;\n   }\n \n+  inline bool\n+  path::is_absolute() const\n+  {\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+    return has_root_name() && has_root_directory();\n+#else\n+    return has_root_directory();\n+#endif\n+  }\n+\n   inline path::iterator\n   path::begin() const\n   {\n@@ -1084,6 +1064,38 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     return iterator(this, true);\n   }\n \n+#ifndef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  inline path& path::operator/=(const path& __p)\n+  {\n+    // Much simpler than the specification in the standard,\n+    // as any path with root-name or root-dir is absolute.\n+    if (__p.is_absolute())\n+      operator=(__p);\n+    else\n+      {\n+\tif (has_filename() || (_M_type == _Type::_Root_name))\n+\t  _M_pathname += preferred_separator;\n+\t_M_pathname += __p.native();\n+\t_M_split_cmpts();\n+      }\n+    return *this;\n+  }\n+#endif\n+\n+  inline path&\n+  path::_M_append(path __p)\n+  {\n+    if (__p.is_absolute())\n+      operator=(std::move(__p));\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+    else if (__p.has_root_name() && __p.root_name() != root_name())\n+      operator=(std::move(__p));\n+#endif\n+    else\n+      operator/=(const_cast<const path&>(__p));\n+    return *this;\n+  }\n+\n   inline path::iterator&\n   path::iterator::operator++()\n   {"}, {"sha": "653b4a3fe857363653240ed8fa202805422ee82b", "filename": "libstdc++-v3/include/experimental/bits/fs_path.h", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -372,7 +372,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     bool has_filename() const;\n     bool has_stem() const;\n     bool has_extension() const;\n-    bool is_absolute() const { return has_root_directory(); }\n+    bool is_absolute() const;\n     bool is_relative() const { return !is_absolute(); }\n \n     // iterators\n@@ -537,7 +537,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       auto __tmp = __p.string<_CharT, _Traits>();\n       using __quoted_string\n \t= std::__detail::_Quoted_string<decltype(__tmp)&, _CharT>;\n-      __os << __quoted_string{__tmp, '\"', '\\\\'};\n+      __os << __quoted_string{__tmp, _CharT('\"'), _CharT('\\\\')};\n       return __os;\n     }\n \n@@ -549,7 +549,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       basic_string<_CharT, _Traits> __tmp;\n       using __quoted_string\n \t= std::__detail::_Quoted_string<decltype(__tmp)&, _CharT>;\n-      if (__is >> __quoted_string{ __tmp, '\"', '\\\\' })\n+      if (__is >> __quoted_string{ __tmp, _CharT('\"'), _CharT('\\\\') })\n \t__p = std::move(__tmp);\n       return __is;\n     }\n@@ -993,6 +993,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     return ext.first && ext.second != string_type::npos;\n   }\n \n+  inline bool\n+  path::is_absolute() const\n+  {\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+    return has_root_name() && has_root_directory();\n+#else\n+    return has_root_directory();\n+#endif\n+  }\n+\n   inline path::iterator\n   path::begin() const\n   {"}, {"sha": "03875819d04fb205e0057a366439cadfc9cefd09", "filename": "libstdc++-v3/src/filesystem/dir-common.h", "status": "modified", "additions": 42, "deletions": 14, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir-common.h?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -26,6 +26,9 @@\n #define _GLIBCXX_DIR_COMMON_H 1\n \n #include <string.h>  // strcmp\n+#if _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+#include <wchar.h>  // wcscmp\n+#endif\n #ifdef _GLIBCXX_HAVE_DIRENT_H\n # ifdef _GLIBCXX_HAVE_SYS_TYPES_H\n #  include <sys/types.h>\n@@ -35,26 +38,42 @@\n # error \"the <dirent.h> header is needed to build the Filesystem TS\"\n #endif\n \n-#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-# undef opendir\n-# define opendir _wopendir\n-#endif\n-\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n namespace filesystem\n {\n+namespace __gnu_posix\n+{\n+#if _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+// Adapt the Windows _wxxx functions to look like POSIX xxx, but for wchar_t*.\n+using char_type = wchar_t;\n+using DIR = ::_WDIR;\n+using dirent = _wdirent;\n+inline DIR* opendir(const wchar_t* path) { return ::_wopendir(path); }\n+inline dirent* readdir(DIR* dir) { return ::_wreaddir(dir); }\n+inline int closedir(DIR* dir) { return ::_wclosedir(dir); }\n+#else\n+using char_type = char;\n+using DIR = ::DIR;\n+typedef struct ::dirent dirent;\n+using ::opendir;\n+using ::readdir;\n+using ::closedir;\n+#endif\n+} // namespace __gnu_posix\n+\n+namespace posix = __gnu_posix;\n \n struct _Dir_base\n {\n-  _Dir_base(DIR* dirp = nullptr) : dirp(dirp) { }\n+  _Dir_base(posix::DIR* dirp = nullptr) : dirp(dirp) { }\n \n   // If no error occurs then dirp is non-null,\n   // otherwise null (whether error ignored or not).\n-  _Dir_base(const char* p, bool skip_permission_denied,\n+  _Dir_base(const posix::char_type* pathname, bool skip_permission_denied,\n \t    error_code& ec) noexcept\n-  : dirp(::opendir(p))\n+  : dirp(posix::opendir(pathname))\n   {\n     if (dirp)\n       ec.clear();\n@@ -72,22 +91,22 @@ struct _Dir_base\n \n   _Dir_base& operator=(_Dir_base&&) = delete;\n \n-  ~_Dir_base() { if (dirp) ::closedir(dirp); }\n+  ~_Dir_base() { if (dirp) posix::closedir(dirp); }\n \n-  const struct ::dirent*\n+  const posix::dirent*\n   advance(bool skip_permission_denied, error_code& ec) noexcept\n   {\n     ec.clear();\n \n     int err = std::exchange(errno, 0);\n-    const struct ::dirent* entp = readdir(dirp);\n+    const posix::dirent* entp = posix::readdir(dirp);\n     // std::swap cannot be used with Bionic's errno\n     err = std::exchange(errno, err);\n \n     if (entp)\n       {\n \t// skip past dot and dot-dot\n-\tif (!strcmp(entp->d_name, \".\") || !strcmp(entp->d_name, \"..\"))\n+\tif (is_dot_or_dotdot(entp->d_name))\n \t  return advance(skip_permission_denied, ec);\n \treturn entp;\n       }\n@@ -105,15 +124,24 @@ struct _Dir_base\n       }\n   }\n \n-  DIR*\tdirp;\n+  static bool is_dot_or_dotdot(const char* s) noexcept\n+  { return !strcmp(s, \".\") || !strcmp(s, \"..\"); }\n+\n+#if _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  static bool is_dot_or_dotdot(const wchar_t* s) noexcept\n+  { return !wcscmp(s, L\".\") || !wcscmp(s, L\"..\"); }\n+#endif\n+\n+  posix::DIR*\tdirp;\n };\n \n } // namespace filesystem\n \n // BEGIN/END macros must be defined before including this file.\n _GLIBCXX_BEGIN_NAMESPACE_FILESYSTEM\n+\n inline file_type\n-get_file_type(const ::dirent& d __attribute__((__unused__)))\n+get_file_type(const std::filesystem::__gnu_posix::dirent& d [[gnu::unused]])\n {\n #ifdef _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE\n   switch (d.d_type)"}, {"sha": "01c3decaba61652cda9fb341d2cfcc679acce74c", "filename": "libstdc++-v3/src/filesystem/dir.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -37,6 +37,7 @@\n #include \"dir-common.h\"\n \n namespace fs = std::experimental::filesystem;\n+namespace posix = std::filesystem::__gnu_posix;\n \n struct fs::_Dir : std::filesystem::_Dir_base\n {\n@@ -47,7 +48,7 @@ struct fs::_Dir : std::filesystem::_Dir_base\n       path = p;\n   }\n \n-  _Dir(DIR* dirp, const path& p) : _Dir_base(dirp), path(p) { }\n+  _Dir(posix::DIR* dirp, const path& p) : _Dir_base(dirp), path(p) { }\n \n   _Dir(_Dir&&) = default;\n \n@@ -185,7 +186,7 @@ recursive_directory_iterator(const path& p, directory_options options,\n {\n   if (ec)\n     ec->clear();\n-  if (DIR* dirp = ::opendir(p.c_str()))\n+  if (posix::DIR* dirp = posix::opendir(p.c_str()))\n     {\n       auto sp = std::make_shared<_Dir_stack>();\n       sp->push(_Dir{ dirp, p });"}, {"sha": "c1b817189a9591457091ae135b99b017a9ad26bb", "filename": "libstdc++-v3/src/filesystem/ops-common.h", "status": "modified", "additions": 102, "deletions": 3, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -34,12 +34,103 @@\n #  include <sys/stat.h>\n # endif\n #endif\n+#if !_GLIBCXX_USE_UTIMENSAT && _GLIBCXX_HAVE_UTIME_H\n+# include <utime.h> // utime\n+#endif\n+\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+# include <wchar.h>\n+#endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n namespace filesystem\n {\n+namespace __gnu_posix\n+{\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+// Adapt the Windows _wxxx functions to look like POSIX xxx, but for wchar_t*.\n+  inline int open(const wchar_t* path, int flags)\n+  { return ::_wopen(path, flags); }\n+\n+  inline int open(const wchar_t* path, int flags, int mode)\n+  { return ::_wopen(path, flags, mode); }\n+\n+  inline int close(int fd)\n+  { return ::_close(fd); }\n+\n+  typedef struct ::_stat stat_type;\n+\n+  inline int stat(const wchar_t* path, stat_type* buffer)\n+  { return ::_wstat(path, buffer); }\n+\n+  inline lstat(const wchar_t* path, stat_type* buffer)\n+  {\n+    // TODO symlinks not currently supported\n+    return stat(path, buffer);\n+  }\n+\n+  using ::mode_t;\n+\n+  inline int chmod(const wchar_t* path, mode_t mode)\n+  { return ::_wchmod(path, mode); }\n+\n+  inline int mkdir(const wchar_t* path, mode_t)\n+  { return ::_wmkdir(path); }\n+\n+  inline wchar_t* getcwd(wchar_t* buf, size_t size)\n+  { return ::_wgetcwd(buf, size > (size_t)INT_MAX ? INT_MAX : (int)size); }\n+\n+  inline int chdir(const wchar_t* path)\n+  { return ::_wchdir(path); }\n+\n+#if !_GLIBCXX_USE_UTIMENSAT && _GLIBCXX_HAVE_UTIME_H\n+  using utimbuf = _utimbuf;\n+\n+  inline int utime(const wchar_t* path, utimbuf* times)\n+  { return ::_wutime(path, times); }\n+#endif\n+\n+  inline int rename(const wchar_t* oldname, const wchar_t* newname)\n+  { return _wrename(oldname, newname); }\n+\n+  inline int truncate(const wchar_t* path, _off64_t length)\n+  {\n+    const int fd = ::_wopen(path, _O_BINARY|_O_RDWR);\n+    if (fd == -1)\n+      return fd;\n+    const int ret = ::ftruncate64(fd, length);\n+    int err;\n+    ::_get_errno(&err);\n+    ::_close(fd);\n+    ::_set_errno(err);\n+    return ret;\n+  }\n+  using char_type = wchar_t;\n+#else // _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  using ::open;\n+  using ::close;\n+#ifdef _GLIBCXX_HAVE_SYS_STAT_H\n+  typedef struct ::stat stat_type;\n+  using ::stat;\n+  using ::lstat;\n+#endif\n+  using ::mode_t;\n+  using ::chmod;\n+  using ::mkdir;\n+  using ::getcwd;\n+  using ::chdir;\n+#if !_GLIBCXX_USE_UTIMENSAT && _GLIBCXX_HAVE_UTIME_H\n+  using ::utimbuf;\n+  using ::utime;\n+#endif\n+  using ::rename;\n+  using ::truncate;\n+  using char_type = char;\n+#endif // _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+} // namespace __gnu_posix\n+\n   template<typename Bitmask>\n     inline bool is_set(Bitmask obj, Bitmask bits)\n     {\n@@ -53,7 +144,7 @@ namespace filesystem\n   }\n \n #ifdef _GLIBCXX_HAVE_SYS_STAT_H\n-  typedef struct ::stat stat_type;\n+  using __gnu_posix::stat_type;\n \n   inline std::chrono::system_clock::time_point\n   file_time(const stat_type& st, std::error_code& ec) noexcept\n@@ -82,11 +173,17 @@ namespace filesystem\n   };\n \n   bool\n-  do_copy_file(const char* from, const char* to,\n+  do_copy_file(const __gnu_posix::char_type* from,\n+\t       const __gnu_posix::char_type* to,\n \t       copy_options_existing_file options,\n \t       stat_type* from_st, stat_type* to_st,\n \t       std::error_code& ec) noexcept;\n \n+  void\n+  do_space(const __gnu_posix::char_type* pathname,\n+\t   uintmax_t& capacity, uintmax_t& free, uintmax_t& available,\n+\t   std::error_code&);\n+\n #endif // _GLIBCXX_HAVE_SYS_STAT_H\n \n } // namespace filesystem\n@@ -95,7 +192,7 @@ namespace filesystem\n _GLIBCXX_BEGIN_NAMESPACE_FILESYSTEM\n \n #ifdef _GLIBCXX_HAVE_SYS_STAT_H\n-  typedef struct ::stat stat_type;\n+  using std::filesystem::__gnu_posix::stat_type;\n \n   inline file_type\n   make_file_type(const stat_type& st) noexcept\n@@ -111,8 +208,10 @@ _GLIBCXX_BEGIN_NAMESPACE_FILESYSTEM\n       return file_type::block;\n     else if (S_ISFIFO(st.st_mode))\n       return file_type::fifo;\n+#ifdef S_ISLNK // not present in mingw\n     else if (S_ISLNK(st.st_mode))\n       return file_type::symlink;\n+#endif\n #ifdef S_ISSOCK // not present until POSIX:2001\n     else if (S_ISSOCK(st.st_mode))\n       return file_type::socket;"}, {"sha": "40cadbf627014a9a42adfb1dbdec7bd263496394", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 90, "deletions": 64, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -47,20 +47,17 @@\n #if !_GLIBCXX_USE_UTIMENSAT && _GLIBCXX_HAVE_UTIME_H\n # include <utime.h> // utime\n #endif\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+# include <windows.h>\n+#endif\n \n #define _GLIBCXX_BEGIN_NAMESPACE_FILESYSTEM \\\n   namespace experimental { namespace filesystem {\n #define _GLIBCXX_END_NAMESPACE_FILESYSTEM } }\n #include \"ops-common.h\"\n \n-#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-# undef utime\n-# define utime _wutime\n-# undef chmod\n-# define chmod _wchmod\n-#endif\n-\n namespace fs = std::experimental::filesystem;\n+namespace posix = std::filesystem::__gnu_posix;\n \n fs::path\n fs::absolute(const path& p, const path& base)\n@@ -109,7 +106,7 @@ namespace\n     void operator()(void* p) const { ::free(p); }\n   };\n \n-  using char_ptr = std::unique_ptr<char[], free_as_in_malloc>;\n+  using char_ptr = std::unique_ptr<fs::path::value_type[], free_as_in_malloc>;\n }\n \n fs::path\n@@ -122,7 +119,8 @@ fs::canonical(const path& p, const path& base, error_code& ec)\n   char_ptr buf{ nullptr };\n # if _XOPEN_VERSION < 700\n   // Not safe to call realpath(path, NULL)\n-  buf.reset( (char*)::malloc(PATH_MAX) );\n+  using char_type = fs::path::value_type;\n+  buf.reset( (char_type*)::malloc(PATH_MAX * sizeof(char_type)) );\n # endif\n   if (char* rp = ::realpath(pa.c_str(), buf.get()))\n     {\n@@ -241,12 +239,13 @@ namespace\n   using std::filesystem::is_set;\n \n #ifdef _GLIBCXX_HAVE_SYS_STAT_H\n-  typedef struct ::stat stat_type;\n+  using posix::stat_type;\n \n   using std::filesystem::is_not_found_errno;\n   using std::filesystem::file_time;\n   using std::filesystem::do_copy_file;\n #endif // _GLIBCXX_HAVE_SYS_STAT_H\n+\n } // namespace\n \n void\n@@ -263,15 +262,15 @@ fs::copy(const path& from, const path& to, copy_options options,\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 2681. filesystem::copy() cannot copy symlinks\n   if (use_lstat || copy_symlinks\n-      ? ::lstat(from.c_str(), &from_st)\n-      : ::stat(from.c_str(), &from_st))\n+      ? posix::lstat(from.c_str(), &from_st)\n+      : posix::stat(from.c_str(), &from_st))\n     {\n       ec.assign(errno, std::generic_category());\n       return;\n     }\n   if (use_lstat\n-      ? ::lstat(to.c_str(), &to_st)\n-      : ::stat(to.c_str(), &to_st))\n+      ? posix::lstat(to.c_str(), &to_st)\n+      : posix::stat(to.c_str(), &to_st))\n     {\n       if (!is_not_found_errno(errno))\n \t{\n@@ -459,8 +458,8 @@ namespace\n   {\n     bool created = false;\n #ifdef _GLIBCXX_HAVE_SYS_STAT_H\n-    ::mode_t mode = static_cast<std::underlying_type_t<fs::perms>>(perm);\n-    if (::mkdir(p.c_str(), mode))\n+    posix::mode_t mode = static_cast<std::underlying_type_t<fs::perms>>(perm);\n+    if (posix::mkdir(p.c_str(), mode))\n       {\n \tconst int err = errno;\n \tif (err != EEXIST || !is_directory(p, ec))\n@@ -513,7 +512,7 @@ fs::create_directory(const path& p, const path& attributes,\n {\n #ifdef _GLIBCXX_HAVE_SYS_STAT_H\n   stat_type st;\n-  if (::stat(attributes.c_str(), &st))\n+  if (posix::stat(attributes.c_str(), &st))\n     {\n       ec.assign(errno, std::generic_category());\n       return false;\n@@ -562,11 +561,16 @@ void\n fs::create_hard_link(const path& to, const path& new_hard_link,\n \t\t     error_code& ec) noexcept\n {\n-#ifdef _GLIBCXX_HAVE_UNISTD_H\n+#ifdef _GLIBCXX_HAVE_LINK\n   if (::link(to.c_str(), new_hard_link.c_str()))\n     ec.assign(errno, std::generic_category());\n   else\n     ec.clear();\n+#elif defined _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  if (CreateHardLinkW(new_hard_link.c_str(), to.c_str(), NULL))\n+    ec.clear();\n+  else\n+    ec.assign((int)GetLastError(), generic_category());\n #else\n   ec = std::make_error_code(std::errc::not_supported);\n #endif\n@@ -586,7 +590,7 @@ void\n fs::create_symlink(const path& to, const path& new_symlink,\n \t\t   error_code& ec) noexcept\n {\n-#ifdef _GLIBCXX_HAVE_UNISTD_H\n+#ifdef _GLIBCXX_HAVE_SYMLINK\n   if (::symlink(to.c_str(), new_symlink.c_str()))\n     ec.assign(errno, std::generic_category());\n   else\n@@ -596,7 +600,6 @@ fs::create_symlink(const path& to, const path& new_symlink,\n #endif\n }\n \n-\n fs::path\n fs::current_path()\n {\n@@ -612,15 +615,16 @@ fs::current_path(error_code& ec)\n {\n   path p;\n #ifdef _GLIBCXX_HAVE_UNISTD_H\n-#ifdef __GLIBC__\n-  if (char_ptr cwd = char_ptr{::getcwd(nullptr, 0)})\n+#if defined __GLIBC__ || defined _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  if (char_ptr cwd = char_ptr{posix::getcwd(nullptr, 0)})\n     {\n       p.assign(cwd.get());\n       ec.clear();\n     }\n   else\n     ec.assign(errno, std::generic_category());\n #else\n+#ifdef _PC_PATH_MAX\n   long path_max = pathconf(\".\", _PC_PATH_MAX);\n   size_t size;\n   if (path_max == -1)\n@@ -629,9 +633,15 @@ fs::current_path(error_code& ec)\n       size = 10240;\n   else\n       size = path_max;\n+#elif defined(PATH_MAX)\n+  size_t size = PATH_MAX;\n+#else\n+  size_t size = 1024;\n+#endif\n   for (char_ptr buf; p.empty(); size *= 2)\n     {\n-      buf.reset((char*)malloc(size));\n+      using char_type = fs::path::value_type;\n+      buf.reset((char_type*)malloc(size * sizeof(char_type)));\n       if (buf)\n \t{\n \t  if (getcwd(buf.get(), size))\n@@ -671,7 +681,7 @@ void\n fs::current_path(const path& p, error_code& ec) noexcept\n {\n #ifdef _GLIBCXX_HAVE_UNISTD_H\n-  if (::chdir(p.c_str()))\n+  if (posix::chdir(p.c_str()))\n     ec.assign(errno, std::generic_category());\n   else\n     ec.clear();\n@@ -698,14 +708,14 @@ fs::equivalent(const path& p1, const path& p2, error_code& ec) noexcept\n   int err = 0;\n   file_status s1, s2;\n   stat_type st1, st2;\n-  if (::stat(p1.c_str(), &st1) == 0)\n+  if (posix::stat(p1.c_str(), &st1) == 0)\n     s1 = make_file_status(st1);\n   else if (is_not_found_errno(errno))\n     s1.type(file_type::not_found);\n   else\n     err = errno;\n \n-  if (::stat(p2.c_str(), &st2) == 0)\n+  if (posix::stat(p2.c_str(), &st2) == 0)\n     s2 = make_file_status(st2);\n   else if (is_not_found_errno(errno))\n     s2.type(file_type::not_found);\n@@ -755,7 +765,7 @@ namespace\n     {\n #ifdef _GLIBCXX_HAVE_SYS_STAT_H\n       stat_type st;\n-      if (::stat(p.c_str(), &st))\n+      if (posix::stat(p.c_str(), &st))\n \t{\n \t  ec.assign(errno, std::generic_category());\n \t  return deflt;\n@@ -805,7 +815,7 @@ fs::hard_link_count(const path& p)\n std::uintmax_t\n fs::hard_link_count(const path& p, error_code& ec) noexcept\n {\n-  return do_stat(p, ec, std::mem_fn(&stat::st_nlink),\n+  return do_stat(p, ec, std::mem_fn(&stat_type::st_nlink),\n \t\t static_cast<uintmax_t>(-1));\n }\n \n@@ -881,11 +891,11 @@ fs::last_write_time(const path& p __attribute__((__unused__)),\n   else\n     ec.clear();\n #elif _GLIBCXX_HAVE_UTIME_H\n-  ::utimbuf times;\n+  posix::utimbuf times;\n   times.modtime = s.count();\n   times.actime = do_stat(p, ec, [](const auto& st) { return st.st_atime; },\n \t\t\t times.modtime);\n-  if (::utime(p.c_str(), &times))\n+  if (posix::utime(p.c_str(), &times))\n     ec.assign(errno, std::generic_category());\n   else\n     ec.clear();\n@@ -938,7 +948,7 @@ fs::permissions(const path& p, perms prms, error_code& ec) noexcept\n #else\n   if (nofollow && is_symlink(st))\n     ec = std::make_error_code(std::errc::operation_not_supported);\n-  else if (::chmod(p.c_str(), static_cast<mode_t>(prms)))\n+  else if (posix::chmod(p.c_str(), static_cast<mode_t>(prms)))\n     err = errno;\n #endif\n \n@@ -958,10 +968,10 @@ fs::read_symlink(const path& p)\n   return tgt;\n }\n \n-fs::path fs::read_symlink(const path& p, error_code& ec)\n+fs::path fs::read_symlink(const path& p [[gnu::unused]], error_code& ec)\n {\n   path result;\n-#ifdef _GLIBCXX_HAVE_SYS_STAT_H\n+#if defined(_GLIBCXX_HAVE_READLINK) && defined(_GLIBCXX_HAVE_SYS_STAT_H)\n   stat_type st;\n   if (::lstat(p.c_str(), &st))\n     {\n@@ -1015,6 +1025,19 @@ fs::remove(const path& p)\n bool\n fs::remove(const path& p, error_code& ec) noexcept\n {\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  if (exists(symlink_status(p, ec)))\n+    {\n+      if ((is_directory(p, ec) && RemoveDirectoryW(p.c_str()))\n+\t  || DeleteFileW(p.c_str()))\n+\t{\n+\t  ec.clear();\n+\t  return true;\n+\t}\n+      else if (!ec)\n+\tec.assign((int)GetLastError(), generic_category());\n+    }\n+#else\n   if (::remove(p.c_str()) == 0)\n     {\n       ec.clear();\n@@ -1024,6 +1047,7 @@ fs::remove(const path& p, error_code& ec) noexcept\n     ec.clear();\n   else\n     ec.assign(errno, std::generic_category());\n+#endif\n   return false;\n }\n \n@@ -1077,7 +1101,7 @@ fs::rename(const path& from, const path& to)\n void\n fs::rename(const path& from, const path& to, error_code& ec) noexcept\n {\n-  if (::rename(from.c_str(), to.c_str()))\n+  if (posix::rename(from.c_str(), to.c_str()))\n     ec.assign(errno, std::generic_category());\n   else\n     ec.clear();\n@@ -1098,7 +1122,7 @@ fs::resize_file(const path& p, uintmax_t size, error_code& ec) noexcept\n #ifdef _GLIBCXX_HAVE_UNISTD_H\n   if (size > static_cast<uintmax_t>(std::numeric_limits<off_t>::max()))\n     ec.assign(EINVAL, std::generic_category());\n-  else if (::truncate(p.c_str(), size))\n+  else if (posix::truncate(p.c_str(), size))\n     ec.assign(errno, std::generic_category());\n   else\n     ec.clear();\n@@ -1126,23 +1150,14 @@ fs::space(const path& p, error_code& ec) noexcept\n     static_cast<uintmax_t>(-1),\n     static_cast<uintmax_t>(-1)\n   };\n-#ifdef _GLIBCXX_HAVE_SYS_STATVFS_H\n-  struct ::statvfs f;\n-  if (::statvfs(p.c_str(), &f))\n-      ec.assign(errno, std::generic_category());\n-  else\n-    {\n-      uintmax_t fragment_size = f.f_frsize;\n-      info = space_info{\n-\tf.f_blocks * fragment_size,\n-\tf.f_bfree * fragment_size,\n-\tf.f_bavail * fragment_size\n-      };\n-      ec.clear();\n-    }\n+#if _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  path dir = absolute(p);\n+  dir.remove_filename();\n+  auto str = dir.c_str();\n #else\n-  ec = std::make_error_code(std::errc::not_supported);\n+  auto str = p.c_str();\n #endif\n+  std::filesystem::do_space(str, info.capacity, info.free, info.available, ec);\n   return info;\n }\n \n@@ -1152,7 +1167,7 @@ fs::status(const fs::path& p, error_code& ec) noexcept\n {\n   file_status status;\n   stat_type st;\n-  if (::stat(p.c_str(), &st))\n+  if (posix::stat(p.c_str(), &st))\n     {\n       int err = errno;\n       ec.assign(err, std::generic_category());\n@@ -1176,7 +1191,7 @@ fs::symlink_status(const fs::path& p, std::error_code& ec) noexcept\n {\n   file_status status;\n   stat_type st;\n-  if (::lstat(p.c_str(), &st))\n+  if (posix::lstat(p.c_str(), &st))\n     {\n       int err = errno;\n       ec.assign(err, std::generic_category());\n@@ -1251,27 +1266,38 @@ fs::path fs::temp_directory_path()\n \n fs::path fs::temp_directory_path(error_code& ec)\n {\n+  path p;\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-  ec = std::make_error_code(std::errc::not_supported);\n-  return {}; // TODO\n+  unsigned len = 1024;\n+  std::wstring buf;\n+  do\n+    {\n+      buf.resize(len);\n+      len = GetTempPathW(buf.size(), buf.data());\n+    } while (len > buf.size());\n+\n+  if (len == 0)\n+    {\n+      ec.assign((int)GetLastError(), std::system_category());\n+      return p;\n+    }\n+  buf.resize(len);\n+  p = std::move(buf);\n #else\n   const char* tmpdir = nullptr;\n   const char* env[] = { \"TMPDIR\", \"TMP\", \"TEMP\", \"TEMPDIR\", nullptr };\n   for (auto e = env; tmpdir == nullptr && *e != nullptr; ++e)\n     tmpdir = ::getenv(*e);\n-  path p = tmpdir ? tmpdir : \"/tmp\";\n+  p = tmpdir ? tmpdir : \"/tmp\";\n   auto st = status(p, ec);\n-  if (!ec)\n+  if (ec)\n+    p.clear();\n+  else if (!is_directory(st))\n     {\n-      if (is_directory(st))\n-\t{\n-\t  ec.clear();\n-\t  return p;\n-\t}\n-      else\n-\tec = std::make_error_code(std::errc::not_a_directory);\n+      p.clear();\n+      ec = std::make_error_code(std::errc::not_a_directory);\n     }\n-  return {};\n #endif\n+  return p;\n }\n "}, {"sha": "fb70d30fdca28a50f6707aa335aa32232f0619f8", "filename": "libstdc++-v3/src/filesystem/path.cc", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fpath.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -61,6 +61,12 @@ path::replace_filename(const path& replacement)\n   return *this;\n }\n \n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+const fs::path::value_type dot = L'.';\n+#else\n+const fs::path::value_type dot = '.';\n+#endif\n+\n path&\n path::replace_extension(const path& replacement)\n {\n@@ -78,8 +84,8 @@ path::replace_extension(const path& replacement)\n \t  _M_pathname.erase(back._M_pos + ext.second);\n \t}\n     }\n-  if (!replacement.empty() && replacement.native()[0] != '.')\n-    _M_pathname += '.';\n+  if (!replacement.empty() && replacement.native()[0] != dot)\n+    _M_pathname += dot;\n   _M_pathname += replacement.native();\n   _M_split_cmpts();\n   return *this;\n@@ -297,7 +303,7 @@ path::has_filename() const\n std::pair<const path::string_type*, std::size_t>\n path::_M_find_extension() const\n {\n-  const std::string* s = nullptr;\n+  const string_type* s = nullptr;\n \n   if (_M_type != _Type::_Multi)\n     s = &_M_pathname;\n@@ -312,14 +318,14 @@ path::_M_find_extension() const\n     {\n       if (auto sz = s->size())\n \t{\n-\t  if (sz <= 2 && (*s)[0] == '.')\n+\t  if (sz <= 2 && (*s)[0] == dot)\n \t    {\n-\t      if (sz == 1 || (*s)[1] == '.')  // filename is \".\" or \"..\"\n+\t      if (sz == 1 || (*s)[1] == dot)  // filename is \".\" or \"..\"\n \t\treturn { s, string_type::npos };\n \t      else\n \t\treturn { s, 0 };  // filename is like \".?\"\n \t    }\n-\t  return { s, s->rfind('.') };\n+\t  return { s, s->rfind(dot) };\n \t}\n     }\n   return {};\n@@ -405,7 +411,7 @@ path::_M_split_cmpts()\n \t{\n \t  const auto& last = _M_cmpts.back();\n \t  pos = last._M_pos + last._M_pathname.size();\n-\t  _M_cmpts.emplace_back(string_type(1, '.'), _Type::_Filename, pos);\n+\t  _M_cmpts.emplace_back(string_type(1, dot), _Type::_Filename, pos);\n \t}\n     }\n \n@@ -495,8 +501,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   std::string filesystem_error::_M_gen_what()\n   {\n     using std::filesystem::fs_err_concat;\n-    return fs_err_concat(system_error::what(), _M_path1.native(),\n-\t\t\t _M_path2.native());\n+    return fs_err_concat(system_error::what(), _M_path1.u8string(),\n+\t\t\t _M_path2.u8string());\n   }\n \n _GLIBCXX_END_NAMESPACE_CXX11"}, {"sha": "4c9a287ad806d5319b2f623378acc385748b071a", "filename": "libstdc++-v3/src/filesystem/std-dir.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-dir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-dir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-dir.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -37,6 +37,7 @@\n #include \"dir-common.h\"\n \n namespace fs = std::filesystem;\n+namespace posix = std::filesystem::__gnu_posix;\n \n struct fs::_Dir : _Dir_base\n {\n@@ -47,7 +48,7 @@ struct fs::_Dir : _Dir_base\n       path = p;\n   }\n \n-  _Dir(DIR* dirp, const path& p) : _Dir_base(dirp), path(p) { }\n+  _Dir(posix::DIR* dirp, const path& p) : _Dir_base(dirp), path(p) { }\n \n   _Dir(_Dir&&) = default;\n \n@@ -180,7 +181,7 @@ recursive_directory_iterator(const path& p, directory_options options,\n                              error_code* ecptr)\n : _M_options(options), _M_pending(true)\n {\n-  if (DIR* dirp = ::opendir(p.c_str()))\n+  if (posix::DIR* dirp = posix::opendir(p.c_str()))\n     {\n       if (ecptr)\n \tecptr->clear();"}, {"sha": "e266fa6d3f8701a68219053da4827cd53f58cf8d", "filename": "libstdc++-v3/src/filesystem/std-ops.cc", "status": "modified", "additions": 167, "deletions": 77, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -25,6 +25,7 @@\n #ifndef _GLIBCXX_USE_CXX11_ABI\n # define _GLIBCXX_USE_CXX11_ABI 1\n # define NEED_DO_COPY_FILE\n+# define NEED_DO_SPACE\n #endif\n \n #include <filesystem>\n@@ -52,19 +53,16 @@\n #if !_GLIBCXX_USE_UTIMENSAT && _GLIBCXX_HAVE_UTIME_H\n # include <utime.h> // utime\n #endif\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+# include <windows.h>\n+#endif\n \n #define _GLIBCXX_BEGIN_NAMESPACE_FILESYSTEM namespace filesystem {\n #define _GLIBCXX_END_NAMESPACE_FILESYSTEM }\n #include \"ops-common.h\"\n \n-#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-# undef utime\n-# define utime _wutime\n-# undef chmod\n-# define chmod _wchmod\n-#endif\n-\n namespace fs = std::filesystem;\n+namespace posix = std::filesystem::__gnu_posix;\n \n fs::path\n fs::absolute(const path& p)\n@@ -74,7 +72,7 @@ fs::absolute(const path& p)\n   path ret = absolute(p, ec);\n   if (ec)\n     _GLIBCXX_THROW_OR_ABORT(filesystem_error(\"cannot make absolute path\", p,\n-\tstd::make_error_code(errc::not_supported)));\n+\t\t\t\t\t     ec));\n   return ret;\n #else\n   return current_path() / p;\n@@ -91,7 +89,24 @@ fs::absolute(const path& p, error_code& ec)\n       return ret;\n     }\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-  ec = std::make_error_code(errc::not_supported);\n+  const wstring& s = p.native();\n+  uint32_t len = 1024;\n+  wstring buf;\n+  do\n+    {\n+      buf.resize(len);\n+      len = GetFullPathNameW(s.c_str(), len, buf.data(), nullptr);\n+    }\n+  while (len > buf.size());\n+\n+  if (len == 0)\n+    ec.assign((int)GetLastError(), std::system_category());\n+  else\n+    {\n+      ec.clear();\n+      buf.resize(len);\n+      ret = std::move(buf);\n+    }\n #else\n   ec.clear();\n   ret = current_path();\n@@ -125,7 +140,7 @@ namespace\n     void operator()(void* p) const { ::free(p); }\n   };\n \n-  using char_ptr = std::unique_ptr<char[], free_as_in_malloc>;\n+  using char_ptr = std::unique_ptr<fs::path::value_type[], free_as_in_malloc>;\n }\n \n fs::path\n@@ -140,7 +155,8 @@ fs::canonical(const path& p, error_code& ec)\n   char_ptr buf{ nullptr };\n # if _XOPEN_VERSION < 700\n   // Not safe to call realpath(path, NULL)\n-  buf.reset( (char*)::malloc(PATH_MAX) );\n+  using char_type = fs::path::value_type;\n+  buf.reset( (char_type*)::malloc(PATH_MAX * sizeof(char_type)) );\n # endif\n   if (char* rp = ::realpath(pa.c_str(), buf.get()))\n     {\n@@ -261,7 +277,7 @@ namespace std::filesystem\n #ifdef _GLIBCXX_HAVE_SYS_STAT_H\n #ifdef NEED_DO_COPY_FILE\n bool\n-fs::do_copy_file(const char* from, const char* to,\n+fs::do_copy_file(const path::value_type* from, const path::value_type* to,\n \t\t copy_options_existing_file options,\n \t\t stat_type* from_st, stat_type* to_st,\n \t\t std::error_code& ec) noexcept\n@@ -271,7 +287,7 @@ fs::do_copy_file(const char* from, const char* to,\n \n   if (to_st == nullptr)\n     {\n-      if (::stat(to, &st1))\n+      if (posix::stat(to, &st1))\n \t{\n \t  const int err = errno;\n \t  if (!is_not_found_errno(err))\n@@ -293,7 +309,7 @@ fs::do_copy_file(const char* from, const char* to,\n \n   if (from_st == nullptr)\n     {\n-      if (::stat(from, &st2))\n+      if (posix::stat(from, &st2))\n \t{\n \t  ec.assign(errno, std::generic_category());\n \t  return false;\n@@ -351,12 +367,12 @@ fs::do_copy_file(const char* from, const char* to,\n     }\n \n   struct CloseFD {\n-    ~CloseFD() { if (fd != -1) ::close(fd); }\n-    bool close() { return ::close(std::exchange(fd, -1)) == 0; }\n+    ~CloseFD() { if (fd != -1) posix::close(fd); }\n+    bool close() { return posix::close(std::exchange(fd, -1)) == 0; }\n     int fd;\n   };\n \n-  CloseFD in = { ::open(from, O_RDONLY) };\n+  CloseFD in = { posix::open(from, O_RDONLY) };\n   if (in.fd == -1)\n     {\n       ec.assign(errno, std::generic_category());\n@@ -367,7 +383,7 @@ fs::do_copy_file(const char* from, const char* to,\n     oflag |= O_TRUNC;\n   else\n     oflag |= O_EXCL;\n-  CloseFD out = { ::open(to, oflag, S_IWUSR) };\n+  CloseFD out = { posix::open(to, oflag, S_IWUSR) };\n   if (out.fd == -1)\n     {\n       if (errno == EEXIST && options.skip)\n@@ -377,20 +393,20 @@ fs::do_copy_file(const char* from, const char* to,\n       return false;\n     }\n \n-#ifdef _GLIBCXX_USE_FCHMOD\n+#if defined _GLIBCXX_USE_FCHMOD && ! defined _GLIBCXX_FILESYSTEM_IS_WINDOWS\n   if (::fchmod(out.fd, from_st->st_mode))\n-#elif defined _GLIBCXX_USE_FCHMODAT\n+#elif defined _GLIBCXX_USE_FCHMODAT && ! defined _GLIBCXX_FILESYSTEM_IS_WINDOWS\n   if (::fchmodat(AT_FDCWD, to, from_st->st_mode, 0))\n #else\n-  if (::chmod(to, from_st->st_mode))\n+  if (posix::chmod(to, from_st->st_mode))\n #endif\n     {\n       ec.assign(errno, std::generic_category());\n       return false;\n     }\n \n   size_t count = from_st->st_size;\n-#ifdef _GLIBCXX_USE_SENDFILE\n+#if defined _GLIBCXX_USE_SENDFILE && ! defined _GLIBCXX_FILESYSTEM_IS_WINDOWS\n   off_t offset = 0;\n   ssize_t n = ::sendfile(out.fd, in.fd, &offset, count);\n   if (n < 0 && errno != ENOSYS && errno != EINVAL)\n@@ -469,15 +485,15 @@ fs::copy(const path& from, const path& to, copy_options options,\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 2681. filesystem::copy() cannot copy symlinks\n   if (use_lstat || copy_symlinks\n-      ? ::lstat(from.c_str(), &from_st)\n-      : ::stat(from.c_str(), &from_st))\n+      ? posix::lstat(from.c_str(), &from_st)\n+      : posix::stat(from.c_str(), &from_st))\n     {\n       ec.assign(errno, std::generic_category());\n       return;\n     }\n   if (use_lstat\n-      ? ::lstat(to.c_str(), &to_st)\n-      : ::stat(to.c_str(), &to_st))\n+      ? posix::lstat(to.c_str(), &to_st)\n+      : posix::stat(to.c_str(), &to_st))\n     {\n       if (!is_not_found_errno(errno))\n \t{\n@@ -671,8 +687,9 @@ namespace\n   {\n     bool created = false;\n #ifdef _GLIBCXX_HAVE_SYS_STAT_H\n-    ::mode_t mode = static_cast<std::underlying_type_t<fs::perms>>(perm);\n-    if (::mkdir(p.c_str(), mode))\n+    posix::mode_t mode\n+      = static_cast<std::underlying_type_t<fs::perms>>(perm);\n+    if (posix::mkdir(p.c_str(), mode))\n       {\n \tconst int err = errno;\n \tif (err != EEXIST || !is_directory(p, ec))\n@@ -725,7 +742,7 @@ fs::create_directory(const path& p, const path& attributes,\n {\n #ifdef _GLIBCXX_HAVE_SYS_STAT_H\n   stat_type st;\n-  if (::stat(attributes.c_str(), &st))\n+  if (posix::stat(attributes.c_str(), &st))\n     {\n       ec.assign(errno, std::generic_category());\n       return false;\n@@ -767,18 +784,23 @@ fs::create_hard_link(const path& to, const path& new_hard_link)\n   create_hard_link(to, new_hard_link, ec);\n   if (ec)\n     _GLIBCXX_THROW_OR_ABORT(filesystem_error(\"cannot create hard link\",\n-\t  to, new_hard_link, ec));\n+\t\t\t\t\t     to, new_hard_link, ec));\n }\n \n void\n fs::create_hard_link(const path& to, const path& new_hard_link,\n \t\t     error_code& ec) noexcept\n {\n-#ifdef _GLIBCXX_HAVE_UNISTD_H\n+#ifdef _GLIBCXX_HAVE_LINK\n   if (::link(to.c_str(), new_hard_link.c_str()))\n     ec.assign(errno, std::generic_category());\n   else\n     ec.clear();\n+#elif defined _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  if (CreateHardLinkW(new_hard_link.c_str(), to.c_str(), NULL))\n+    ec.clear();\n+  else\n+    ec.assign((int)GetLastError(), generic_category());\n #else\n   ec = std::make_error_code(std::errc::not_supported);\n #endif\n@@ -798,7 +820,7 @@ void\n fs::create_symlink(const path& to, const path& new_symlink,\n \t\t   error_code& ec) noexcept\n {\n-#ifdef _GLIBCXX_HAVE_UNISTD_H\n+#ifdef _GLIBCXX_HAVE_SYMLINK\n   if (::symlink(to.c_str(), new_symlink.c_str()))\n     ec.assign(errno, std::generic_category());\n   else\n@@ -824,15 +846,16 @@ fs::current_path(error_code& ec)\n {\n   path p;\n #ifdef _GLIBCXX_HAVE_UNISTD_H\n-#ifdef __GLIBC__\n-  if (char_ptr cwd = char_ptr{::getcwd(nullptr, 0)})\n+#if defined __GLIBC__ || defined _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  if (char_ptr cwd = char_ptr{posix::getcwd(nullptr, 0)})\n     {\n       p.assign(cwd.get());\n       ec.clear();\n     }\n   else\n     ec.assign(errno, std::generic_category());\n #else\n+#ifdef _PC_PATH_MAX\n   long path_max = pathconf(\".\", _PC_PATH_MAX);\n   size_t size;\n   if (path_max == -1)\n@@ -841,9 +864,15 @@ fs::current_path(error_code& ec)\n       size = 10240;\n   else\n       size = path_max;\n+#elif defined(PATH_MAX)\n+  size_t size = PATH_MAX;\n+#else\n+  size_t size = 1024;\n+#endif\n   for (char_ptr buf; p.empty(); size *= 2)\n     {\n-      buf.reset((char*)malloc(size));\n+      using char_type = fs::path::value_type;\n+      buf.reset((char_type*)malloc(size * sizeof(char_type)));\n       if (buf)\n \t{\n \t  if (getcwd(buf.get(), size))\n@@ -883,7 +912,7 @@ void\n fs::current_path(const path& p, error_code& ec) noexcept\n {\n #ifdef _GLIBCXX_HAVE_UNISTD_H\n-  if (::chdir(p.c_str()))\n+  if (posix::chdir(p.c_str()))\n     ec.assign(errno, std::generic_category());\n   else\n     ec.clear();\n@@ -910,14 +939,14 @@ fs::equivalent(const path& p1, const path& p2, error_code& ec) noexcept\n   int err = 0;\n   file_status s1, s2;\n   stat_type st1, st2;\n-  if (::stat(p1.c_str(), &st1) == 0)\n+  if (posix::stat(p1.c_str(), &st1) == 0)\n     s1 = make_file_status(st1);\n   else if (is_not_found_errno(errno))\n     s1.type(file_type::not_found);\n   else\n     err = errno;\n \n-  if (::stat(p2.c_str(), &st2) == 0)\n+  if (posix::stat(p2.c_str(), &st2) == 0)\n     s2 = make_file_status(st2);\n   else if (is_not_found_errno(errno))\n     s2.type(file_type::not_found);\n@@ -966,8 +995,8 @@ namespace\n     do_stat(const fs::path& p, std::error_code& ec, Accessor f, T deflt)\n     {\n #ifdef _GLIBCXX_HAVE_SYS_STAT_H\n-      fs::stat_type st;\n-      if (::stat(p.c_str(), &st))\n+      posix::stat_type st;\n+      if (posix::stat(p.c_str(), &st))\n \t{\n \t  ec.assign(errno, std::generic_category());\n \t  return deflt;\n@@ -1017,7 +1046,7 @@ fs::hard_link_count(const path& p)\n std::uintmax_t\n fs::hard_link_count(const path& p, error_code& ec) noexcept\n {\n-  return do_stat(p, ec, std::mem_fn(&stat::st_nlink),\n+  return do_stat(p, ec, std::mem_fn(&stat_type::st_nlink),\n \t\t static_cast<uintmax_t>(-1));\n }\n \n@@ -1093,11 +1122,11 @@ fs::last_write_time(const path& p __attribute__((__unused__)),\n   else\n     ec.clear();\n #elif _GLIBCXX_HAVE_UTIME_H\n-  ::utimbuf times;\n+  posix::utimbuf times;\n   times.modtime = s.count();\n   times.actime = do_stat(p, ec, [](const auto& st) { return st.st_atime; },\n \t\t\t times.modtime);\n-  if (::utime(p.c_str(), &times))\n+  if (posix::utime(p.c_str(), &times))\n     ec.assign(errno, std::generic_category());\n   else\n     ec.clear();\n@@ -1152,7 +1181,7 @@ fs::permissions(const path& p, perms prms, perm_options opts,\n #else\n   if (nofollow && is_symlink(st))\n     ec = std::make_error_code(std::errc::operation_not_supported);\n-  else if (::chmod(p.c_str(), static_cast<mode_t>(prms)))\n+  else if (posix::chmod(p.c_str(), static_cast<mode_t>(prms)))\n     err = errno;\n #endif\n \n@@ -1192,10 +1221,10 @@ fs::read_symlink(const path& p)\n   return tgt;\n }\n \n-fs::path fs::read_symlink(const path& p, error_code& ec)\n+fs::path fs::read_symlink(const path& p [[gnu::unused]], error_code& ec)\n {\n   path result;\n-#ifdef _GLIBCXX_HAVE_SYS_STAT_H\n+#if defined(_GLIBCXX_HAVE_READLINK) && defined(_GLIBCXX_HAVE_SYS_STAT_H)\n   stat_type st;\n   if (::lstat(p.c_str(), &st))\n     {\n@@ -1268,6 +1297,19 @@ fs::remove(const path& p)\n bool\n fs::remove(const path& p, error_code& ec) noexcept\n {\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  if (exists(symlink_status(p, ec)))\n+    {\n+      if ((is_directory(p, ec) && RemoveDirectoryW(p.c_str()))\n+\t  || DeleteFileW(p.c_str()))\n+\t{\n+\t  ec.clear();\n+\t  return true;\n+\t}\n+      else if (!ec)\n+\tec.assign((int)GetLastError(), generic_category());\n+    }\n+#else\n   if (::remove(p.c_str()) == 0)\n     {\n       ec.clear();\n@@ -1277,6 +1319,7 @@ fs::remove(const path& p, error_code& ec) noexcept\n     ec.clear();\n   else\n     ec.assign(errno, std::generic_category());\n+#endif\n   return false;\n }\n \n@@ -1330,7 +1373,7 @@ fs::rename(const path& from, const path& to)\n void\n fs::rename(const path& from, const path& to, error_code& ec) noexcept\n {\n-  if (::rename(from.c_str(), to.c_str()))\n+  if (posix::rename(from.c_str(), to.c_str()))\n     ec.assign(errno, std::generic_category());\n   else\n     ec.clear();\n@@ -1351,7 +1394,7 @@ fs::resize_file(const path& p, uintmax_t size, error_code& ec) noexcept\n #ifdef _GLIBCXX_HAVE_UNISTD_H\n   if (size > static_cast<uintmax_t>(std::numeric_limits<off_t>::max()))\n     ec.assign(EINVAL, std::generic_category());\n-  else if (::truncate(p.c_str(), size))\n+  else if (posix::truncate(p.c_str(), size))\n     ec.assign(errno, std::generic_category());\n   else\n     ec.clear();\n@@ -1371,31 +1414,67 @@ fs::space(const path& p)\n   return s;\n }\n \n-fs::space_info\n-fs::space(const path& p, error_code& ec) noexcept\n+#ifdef NEED_DO_SPACE\n+void\n+fs::do_space(const __gnu_posix::char_type* pathname,\n+\t uintmax_t& capacity, uintmax_t& free, uintmax_t& available,\n+\t std::error_code& ec)\n {\n-  space_info info = {\n-    static_cast<uintmax_t>(-1),\n-    static_cast<uintmax_t>(-1),\n-    static_cast<uintmax_t>(-1)\n-  };\n #ifdef _GLIBCXX_HAVE_SYS_STATVFS_H\n   struct ::statvfs f;\n-  if (::statvfs(p.c_str(), &f))\n+  if (::statvfs(pathname, &f))\n       ec.assign(errno, std::generic_category());\n   else\n     {\n-      uintmax_t fragment_size = f.f_frsize;\n-      info = space_info{\n-\tf.f_blocks * fragment_size,\n-\tf.f_bfree * fragment_size,\n-\tf.f_bavail * fragment_size\n-      };\n+      if (f.f_frsize != (unsigned long)-1)\n+\t{\n+\t  const uintmax_t fragment_size = f.f_frsize;\n+\t  const fsblkcnt_t unknown = -1;\n+\t  if (f.f_blocks != unknown)\n+\t    capacity = f.f_blocks * fragment_size;\n+\t  if (f.f_bfree != unknown)\n+\t    free = f.f_bfree * fragment_size;\n+\t  if (f.f_bavail != unknown)\n+\t    available = f.f_bavail * fragment_size;\n+\t}\n       ec.clear();\n     }\n+#elif _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  ULARGE_INTEGER bytes_avail = {}, bytes_total = {}, bytes_free = {};\n+  if (GetDiskFreeSpaceExW(pathname, &bytes_avail, &bytes_total, &bytes_free))\n+    {\n+      if (bytes_total.QuadPart != 0)\n+\tcapacity = bytes_total.QuadPart;\n+      if (bytes_free.QuadPart != 0)\n+\tfree = bytes_free.QuadPart;\n+      if (bytes_avail.QuadPart != 0)\n+\tavailable = bytes_avail.QuadPart;\n+      ec.clear();\n+    }\n+  else\n+    ec.assign((int)GetLastError(), std::system_category());\n #else\n   ec = std::make_error_code(std::errc::not_supported);\n #endif\n+}\n+#endif // NEED_DO_SPACE\n+\n+fs::space_info\n+fs::space(const path& p, error_code& ec) noexcept\n+{\n+  space_info info = {\n+    static_cast<uintmax_t>(-1),\n+    static_cast<uintmax_t>(-1),\n+    static_cast<uintmax_t>(-1)\n+  };\n+#if _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  path dir = absolute(p);\n+  dir.remove_filename();\n+  auto str = dir.c_str();\n+#else\n+  auto str = p.c_str();\n+#endif\n+  do_space(str, info.capacity, info.free, info.available, ec);\n   return info;\n }\n \n@@ -1405,7 +1484,7 @@ fs::status(const fs::path& p, error_code& ec) noexcept\n {\n   file_status status;\n   stat_type st;\n-  if (::stat(p.c_str(), &st))\n+  if (posix::stat(p.c_str(), &st))\n     {\n       int err = errno;\n       ec.assign(err, std::generic_category());\n@@ -1429,7 +1508,7 @@ fs::symlink_status(const fs::path& p, std::error_code& ec) noexcept\n {\n   file_status status;\n   stat_type st;\n-  if (::lstat(p.c_str(), &st))\n+  if (posix::lstat(p.c_str(), &st))\n     {\n       int err = errno;\n       ec.assign(err, std::generic_category());\n@@ -1476,28 +1555,39 @@ fs::path fs::temp_directory_path()\n \n fs::path fs::temp_directory_path(error_code& ec)\n {\n+  path p;\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-  ec = std::make_error_code(std::errc::not_supported);\n-  return {}; // TODO\n+  unsigned len = 1024;\n+  std::wstring buf;\n+  do\n+    {\n+      buf.resize(len);\n+      len = GetTempPathW(buf.size(), buf.data());\n+    } while (len > buf.size());\n+\n+  if (len == 0)\n+    {\n+      ec.assign((int)GetLastError(), std::system_category());\n+      return p;\n+    }\n+  buf.resize(len);\n+  p = std::move(buf);\n #else\n   const char* tmpdir = nullptr;\n   const char* env[] = { \"TMPDIR\", \"TMP\", \"TEMP\", \"TEMPDIR\", nullptr };\n   for (auto e = env; tmpdir == nullptr && *e != nullptr; ++e)\n     tmpdir = ::getenv(*e);\n-  path p = tmpdir ? tmpdir : \"/tmp\";\n+  p = tmpdir ? tmpdir : \"/tmp\";\n+#endif\n   auto st = status(p, ec);\n-  if (!ec)\n+  if (ec)\n+    p.clear();\n+  else if (!is_directory(st))\n     {\n-      if (is_directory(st))\n-\t{\n-\t  ec.clear();\n-\t  return p;\n-\t}\n-      else\n-\tec = std::make_error_code(std::errc::not_a_directory);\n+      p.clear();\n+      ec = std::make_error_code(std::errc::not_a_directory);\n     }\n-  return {};\n-#endif\n+  return p;\n }\n \n fs::path"}, {"sha": "f6c0b8bb0f63da037105cd5eab89521ac4b2681b", "filename": "libstdc++-v3/src/filesystem/std-path.cc", "status": "modified", "additions": 75, "deletions": 13, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-path.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -38,6 +38,66 @@ fs::filesystem_error::~filesystem_error() = default;\n \n constexpr path::value_type path::preferred_separator;\n \n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+path&\n+path::operator/=(const path& __p)\n+{\n+  if (__p.is_absolute()\n+      || (__p.has_root_name() && __p.root_name() != root_name()))\n+    return operator=(__p);\n+\n+  basic_string_view<value_type> __lhs = _M_pathname;\n+  bool __add_sep = false;\n+\n+  if (__p.has_root_directory())\n+    {\n+      // Remove any root directory and relative path\n+      if (_M_type != _Type::_Root_name)\n+\t{\n+\t  if (!_M_cmpts.empty()\n+\t      && _M_cmpts.front()._M_type == _Type::_Root_name)\n+\t    __lhs = _M_cmpts.front()._M_pathname;\n+\t  else\n+\t    __lhs = {};\n+\t}\n+    }\n+  else if (has_filename() || (!has_root_directory() && is_absolute()))\n+    __add_sep = true;\n+\n+  basic_string_view<value_type> __rhs = __p._M_pathname;\n+  // Omit any root-name from the generic format pathname:\n+  if (__p._M_type == _Type::_Root_name)\n+    __rhs = {};\n+  else if (!__p._M_cmpts.empty()\n+      && __p._M_cmpts.front()._M_type == _Type::_Root_name)\n+    __rhs.remove_prefix(__p._M_cmpts.front()._M_pathname.size());\n+\n+  const size_t __len = __lhs.size() + (int)__add_sep + __rhs.size();\n+  const size_t __maxcmpts = _M_cmpts.size() + __p._M_cmpts.size();\n+  if (_M_pathname.capacity() < __len || _M_cmpts.capacity() < __maxcmpts)\n+    {\n+      // Construct new path and swap (strong exception-safety guarantee).\n+      string_type __tmp;\n+      __tmp.reserve(__len);\n+      __tmp = __lhs;\n+      if (__add_sep)\n+\t__tmp += preferred_separator;\n+      __tmp += __rhs;\n+      path __newp = std::move(__tmp);\n+      swap(__newp);\n+    }\n+  else\n+    {\n+      _M_pathname = __lhs;\n+      if (__add_sep)\n+\t_M_pathname += preferred_separator;\n+      _M_pathname += __rhs;\n+      _M_split_cmpts();\n+    }\n+  return *this;\n+}\n+#endif\n+\n path&\n path::remove_filename()\n {\n@@ -74,6 +134,12 @@ path::replace_filename(const path& replacement)\n   return *this;\n }\n \n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+const fs::path::value_type dot = L'.';\n+#else\n+const fs::path::value_type dot = '.';\n+#endif\n+\n path&\n path::replace_extension(const path& replacement)\n {\n@@ -94,8 +160,8 @@ path::replace_extension(const path& replacement)\n     }\n    // If replacement is not empty and does not begin with a dot character,\n    // a dot character is appended\n-  if (!replacement.empty() && replacement.native()[0] != '.')\n-    _M_pathname += '.';\n+  if (!replacement.empty() && replacement.native()[0] != dot)\n+    _M_pathname += dot;\n   operator+=(replacement);\n   return *this;\n }\n@@ -332,11 +398,7 @@ path::has_filename() const\n \n namespace\n {\n-#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-  inline bool is_dot(wchar_t c) { return c == L'.'; }\n-#else\n-  inline bool is_dot(char c) { return c == '.'; }\n-#endif\n+  inline bool is_dot(fs::path::value_type c) { return c == dot; }\n \n   inline bool is_dot(const fs::path& path)\n   {\n@@ -376,7 +438,7 @@ path::lexically_normal() const\n     {\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n       // Replace each slash character in the root-name\n-      if (p.is_root_name())\n+      if (p._M_type == _Type::_Root_name)\n \t{\n \t  string_type s = p.native();\n \t  std::replace(s.begin(), s.end(), L'/', L'\\\\');\n@@ -485,7 +547,7 @@ path::lexically_proximate(const path& base) const\n std::pair<const path::string_type*, std::size_t>\n path::_M_find_extension() const\n {\n-  const std::string* s = nullptr;\n+  const string_type* s = nullptr;\n \n   if (_M_type == _Type::_Filename)\n     s = &_M_pathname;\n@@ -500,9 +562,9 @@ path::_M_find_extension() const\n     {\n       if (auto sz = s->size())\n \t{\n-\t  if (sz <= 2 && (*s)[0] == '.')\n+\t  if (sz <= 2 && (*s)[0] == dot)\n \t    return { s, string_type::npos };\n-\t  const auto pos = s->rfind('.');\n+\t  const auto pos = s->rfind(dot);\n \t  return { s, pos ? pos : string_type::npos };\n \t}\n     }\n@@ -703,8 +765,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n   std::string filesystem_error::_M_gen_what()\n   {\n-    return fs_err_concat(system_error::what(), _M_path1.native(),\n-\t\t\t _M_path2.native());\n+    return fs_err_concat(system_error::what(), _M_path1.u8string(),\n+\t\t\t _M_path2.u8string());\n   }\n \n _GLIBCXX_END_NAMESPACE_CXX11"}, {"sha": "b2445f72b5c75c36be7c90c98a59117de7ca228c", "filename": "libstdc++-v3/testsuite/27_io/filesystem/iterators/directory_iterator.cc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -47,16 +47,17 @@ test01()\n \n   // Test non-empty directory.\n   ec = bad_ec;\n-  create_directory_symlink(p, p / \"l\", ec);\n+  create_directory(p / \"x\", ec);\n   VERIFY( !ec );\n   ec = bad_ec;\n   iter = fs::directory_iterator(p, ec);\n   VERIFY( !ec );\n   VERIFY( iter != fs::directory_iterator() );\n-  VERIFY( iter->path() == p/\"l\" );\n+  VERIFY( iter->path() == p/\"x\" );\n   ++iter;\n   VERIFY( iter == end(iter) );\n \n+#if !(defined(__MINGW32__) || defined(__MINGW64__))\n   // Test inaccessible directory.\n   ec = bad_ec;\n   permissions(p, fs::perms::none, ec);\n@@ -71,6 +72,7 @@ test01()\n   iter = fs::directory_iterator(p, opts, ec);\n   VERIFY( !ec );\n   VERIFY( iter == end(iter) );\n+#endif\n \n   permissions(p, fs::perms::owner_all, ec);\n   remove_all(p, ec);\n@@ -84,7 +86,7 @@ test02()\n   const auto p = __gnu_test::nonexistent_path();\n   ec = bad_ec;\n   create_directory(p, fs::current_path(), ec);\n-  create_directory_symlink(p, p / \"l\", ec);\n+  create_directory(p / \"x\", ec);\n   VERIFY( !ec );\n \n   // Test post-increment (libstdc++/71005)\n@@ -95,7 +97,7 @@ test02()\n   const auto entry1 = *iter;\n   const auto entry2 = *iter++;\n   VERIFY( entry1 == entry2 );\n-  VERIFY( entry1.path() == p/\"l\" );\n+  VERIFY( entry1.path() == p/\"x\" );\n   VERIFY( iter == end(iter) );\n \n   remove_all(p, ec);\n@@ -130,7 +132,7 @@ test05()\n {\n   auto p = __gnu_test::nonexistent_path();\n   create_directory(p);\n-  create_directory_symlink(p, p / \"l\");\n+  create_directory(p / \"x\");\n   fs::directory_iterator it(p), endit;\n   VERIFY( begin(it) == it );\n   static_assert( noexcept(begin(it)), \"begin is noexcept\" );"}, {"sha": "8a5b8c3a0e241de8fcdb6a21cc4bdbf477b1622e", "filename": "libstdc++-v3/testsuite/27_io/filesystem/iterators/recursive_directory_iterator.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -60,6 +60,7 @@ test01()\n   ++iter;\n   VERIFY( iter == end(iter) );\n \n+#if ! (defined (__MINGW32__) || defined(__MINGW64__))\n   // Test inaccessible directory.\n   ec = bad_ec;\n   permissions(p, fs::perms::none, ec);\n@@ -106,6 +107,7 @@ test01()\n   iter.increment(ec);  // should fail to recurse into p/d1/d2, so skip it\n   VERIFY( !ec );\n   VERIFY( iter == end(iter) );\n+#endif\n \n   permissions(p/\"d1/d2\", fs::perms::owner_all, ec);\n   remove_all(p, ec);\n@@ -171,7 +173,7 @@ test05()\n {\n   auto p = __gnu_test::nonexistent_path();\n   create_directory(p);\n-  create_directory_symlink(p, p / \"l\");\n+  create_directory(p / \"x\");\n   fs::recursive_directory_iterator it(p), endit;\n   VERIFY( begin(it) == it );\n   static_assert( noexcept(begin(it)), \"begin is noexcept\" );"}, {"sha": "596ddd33f9d311c34748e211ce8dd366c2c9e0c0", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/absolute.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fabsolute.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fabsolute.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fabsolute.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -41,13 +41,30 @@ test01()\n void\n test02()\n {\n+  std::error_code ec = make_error_code(std::errc::invalid_argument);\n+  path root = __gnu_test::root_path();\n+  VERIFY( absolute(root) == root );\n+  VERIFY( absolute(root, ec) == root && !ec );\n+  VERIFY( absolute(path{}, ec).empty() && ec );\n+\n+#if defined(__MINGW32__) || defined(__MINGW64__)\n+  path p1(\"/\");\n+  VERIFY( absolute(p1) != p1 );\n+  path p2(\"/foo\");\n+  VERIFY( absolute(p2) != p2 );\n+  path p3(\"foo\");\n+  VERIFY( absolute(p3) != p3 );\n+  path p4(\"C:\\\\\");\n+  VERIFY( absolute(p4) == p4 );\n+#else\n   path p1(\"/\");\n   VERIFY( absolute(p1) == p1 );\n   path p2(\"/foo\");\n   VERIFY( absolute(p2) == p2 );\n   path p3(\"foo\");\n   VERIFY( absolute(p3) != p3 );\n   VERIFY( absolute(p3) == (std::filesystem::current_path()/p3) );\n+#endif\n }\n \n int"}, {"sha": "f7b6649adfe30d9f39580b96c6afb11961337828", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/canonical.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcanonical.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcanonical.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcanonical.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -41,7 +41,7 @@ test01()\n   VERIFY( !ec );\n \n   ec = bad_ec;\n-  p2 = canonical( fs::current_path() / \".\" / (p.native() + \"////././.\"), ec );\n+  p2 = canonical( fs::current_path() / \".\" / (p.string() + \"////././.\"), ec );\n   compare_paths( p2, fs::current_path()/p );\n   VERIFY( !ec );\n "}, {"sha": "f9962ad350b264bace70340256f85b67b43ad643", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/copy.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcopy.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -116,7 +116,7 @@ test03()\n   auto to = __gnu_test::nonexistent_path();\n \n   // test empty file\n-  std::ofstream{from.native()};\n+  std::ofstream{from};\n   VERIFY( fs::exists(from) );\n   VERIFY( fs::file_size(from) == 0 );\n   fs::copy(from, to);\n@@ -125,7 +125,7 @@ test03()\n \n   remove(to);\n   VERIFY( !fs::exists(to) );\n-  std::ofstream{from.native()} << \"Hello, filesystem!\";\n+  std::ofstream{from} << \"Hello, filesystem!\";\n   VERIFY( fs::file_size(from) != 0 );\n   fs::copy(from, to);\n   VERIFY( fs::exists(to) );"}, {"sha": "495e8d6ad040f0466477e1e914e4a2e1f113e152", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/copy_file.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcopy_file.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcopy_file.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcopy_file.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -42,7 +42,7 @@ test01()\n   VERIFY( !exists(to) );\n \n   // test empty file\n-  std::ofstream{from.native()};\n+  std::ofstream{from};\n   VERIFY( exists(from) );\n   VERIFY( file_size(from) == 0 );\n \n@@ -58,7 +58,7 @@ test01()\n   VERIFY( exists(to) );\n   VERIFY( file_size(to) == 0 );\n \n-  std::ofstream{from.native()} << \"Hello, filesystem!\";\n+  std::ofstream{from} << \"Hello, filesystem!\";\n   VERIFY( file_size(from) != 0 );\n   remove(to);\n   VERIFY( !exists(to) );"}, {"sha": "f8a4a280537ccf8a0e0c153c6a17d060c66dc88e", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/exists.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fexists.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fexists.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fexists.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -29,19 +29,20 @@ void\n test01()\n {\n   const std::error_code bad_ec = make_error_code(std::errc::invalid_argument);\n+  const path root = __gnu_test::root_path();\n \n-  VERIFY( exists(path{\"/\"}) );\n-  VERIFY( exists(path{\"/.\"}) );\n+  VERIFY( exists(root) );\n+  VERIFY( exists(root/\".\") );\n   VERIFY( exists(path{\".\"}) );\n   VERIFY( exists(path{\"..\"}) );\n   VERIFY( exists(std::filesystem::current_path()) );\n \n   std::error_code ec;\n   ec = bad_ec;\n-  VERIFY( exists(path{\"/\"}, ec) );\n+  VERIFY( exists(root, ec) );\n   VERIFY( !ec );\n   ec = bad_ec;\n-  VERIFY( exists(path{\"/.\"}, ec) );\n+  VERIFY( exists(root/\".\", ec) );\n   VERIFY( !ec );\n   ec = bad_ec;\n   VERIFY( exists(path{\".\"}, ec) );"}, {"sha": "ef0e01de4a2f607cfa407d737518c7c1bd6285e5", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/is_empty.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fis_empty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fis_empty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fis_empty.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -82,7 +82,7 @@ test02()\n   empty = is_empty(f.path);\n   VERIFY( empty );\n \n-  std::ofstream{f.path.native()} << \"data\";\n+  std::ofstream{f.path} << \"data\";\n   ec = bad_ec;\n   empty = is_empty(p, ec);\n   VERIFY( !ec );"}, {"sha": "ff19afc12a0ac0d048f83f18ceee8e23c103ceb6", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/last_write_time.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Flast_write_time.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Flast_write_time.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Flast_write_time.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -81,7 +81,7 @@ test01()\n   ::utimbuf times;\n   times.modtime = std::numeric_limits<std::time_t>::max() - 1;\n   times.actime = std::numeric_limits<std::time_t>::max() - 1;\n-  VERIFY( !::utime(p.c_str(), &times) );\n+  VERIFY( !::utime(p.string().c_str(), &times) );\n #else\n   return;\n #endif"}, {"sha": "79e3c7d9b73fd70151d50b53a4af08f8fcdc36b8", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/space.cc", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fspace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fspace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fspace.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -25,25 +25,35 @@\n #include <testsuite_fs.h>\n #include <testsuite_hooks.h>\n \n+bool check(std::filesystem::space_info const& s)\n+{\n+  const std::uintmax_t err = -1;\n+  return s.capacity != err || s.free != err || s.available != err;\n+}\n+\n void\n test01()\n {\n-  std::filesystem::space_info s = std::filesystem::space(\"/\");\n+  const std::filesystem::path root = __gnu_test::root_path();\n+  std::filesystem::space_info s = std::filesystem::space(root);\n   std::error_code ec = make_error_code(std::errc::invalid_argument);\n-  s = std::filesystem::space(\"/\", ec);\n+  s = std::filesystem::space(root, ec);\n   VERIFY( !ec );\n+  VERIFY( check(s) );\n+  VERIFY( s.capacity >= s.free );\n \n-  s = std::filesystem::space(__gnu_test::nonexistent_path(), ec);\n-  VERIFY( ec );\n-  VERIFY( s.capacity ==  static_cast<uintmax_t>(-1) );\n-  VERIFY( s.free ==  static_cast<uintmax_t>(-1) );\n-  VERIFY( s.available ==  static_cast<uintmax_t>(-1) );\n+  s = std::filesystem::space(__gnu_test::nonexistent_path()/\".\", ec);\n+  if (ec)\n+    VERIFY( ! check(s) );\n+  else\n+    VERIFY( check(s) );\n }\n \n void\n test02()\n {\n   std::filesystem::space_info s = std::filesystem::space(\".\");\n+  VERIFY( check(s) );\n   VERIFY( s.capacity >= s.free );\n }\n "}, {"sha": "f9197ac70da24945784a2d26813e548ca3612080", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/temp_directory_path.cc", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -27,10 +27,28 @@\n void\n clean_env()\n {\n+#if defined(__MINGW32__) || defined(__MINGW64__)\n+  ::_putenv(\"TMP=\");\n+  ::_putenv(\"TEMP=\");\n+#else\n   ::unsetenv(\"TMPDIR\");\n   ::unsetenv(\"TMP\");\n   ::unsetenv(\"TEMPDIR\");\n   ::unsetenv(\"TEMP\");\n+#endif\n+}\n+\n+bool\n+set_env(const char* name, std::string value)\n+{\n+#if defined(__MINGW32__) || defined(__MINGW64__)\n+  std::string s = name;\n+  s += '=';\n+  s += value;\n+  return !::_putenv(s.c_str());\n+#else\n+  return !::setenv(name, value.c_str(), 1);\n+#endif\n }\n \n namespace fs = std::filesystem;\n@@ -57,7 +75,7 @@ test02()\n {\n   clean_env();\n \n-  if (::setenv(\"TMPDIR\", __gnu_test::nonexistent_path().string().c_str(), 1))\n+  if (!set_env(\"TMPDIR\", __gnu_test::nonexistent_path().string()))\n     return; // just give up\n \n   std::error_code ec;\n@@ -80,7 +98,7 @@ test03()\n   auto p = __gnu_test::nonexistent_path();\n   create_directories(p/\"tmp\");\n   permissions(p, fs::perms::none);\n-  setenv(\"TMPDIR\", (p/\"tmp\").c_str(), 1);\n+  set_env(\"TMPDIR\", (p/\"tmp\").string());\n   std::error_code ec;\n   auto r = fs::temp_directory_path(ec); // libstdc++/PR71337\n   VERIFY( ec == std::make_error_code(std::errc::permission_denied) );\n@@ -102,7 +120,7 @@ void\n test04()\n {\n   __gnu_test::scoped_file f;\n-  setenv(\"TMPDIR\", f.path.c_str(), 1);\n+  set_env(\"TMPDIR\", f.path.string());\n   std::error_code ec;\n   auto r = fs::temp_directory_path(ec);\n   VERIFY( ec == std::make_error_code(std::errc::not_a_directory) );"}, {"sha": "2295e1b0e2f8bd4cbae5afba35af069ded630bba", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/append/path.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fappend%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fappend%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fappend%2Fpath.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -55,6 +55,10 @@ test01()\n \n   compare_paths( append(\"dir/\", \"/file\"), \"/file\" );\n   compare_paths( append(\"dir/\", \"file\"),  \"dir/file\" );\n+\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  compare_paths( append(\"c:/foo\", \"/bar\"),  \"c:/bar\" );\n+#endif\n }\n \n void"}, {"sha": "bd36e2842b6734e3b8f6a3d52e20ef5fed20595b", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/construct/format.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2Fformat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2Fformat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2Fformat.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -30,7 +30,7 @@ void\n test01()\n {\n   // path(string_type&&, format)\n-  auto s = [&]() -> path::string_type { return \"foo/bar\"; };\n+  auto s = [&]() -> path::string_type { return path(\"foo/bar\").native(); };\n   path p0(s());\n   path p1(s(), path::auto_format);\n   VERIFY( p1 == p0 );\n@@ -44,7 +44,7 @@ void\n test02()\n {\n   // path(const Source&, format)\n-  path::string_type s = \"foo/bar\";\n+  const path::string_type s = path(\"foo/bar\").native();\n   path p0(s);\n   path p1(s, path::auto_format);\n   VERIFY( p1 == p0 );\n@@ -58,7 +58,7 @@ void\n test03()\n {\n   // path(const Source&, format)\n-  std::string s = \"foo/bar\";\n+  const std::string s = \"foo/bar\";\n   path p0(s);\n   path p1(s, path::auto_format);\n   VERIFY( p1 == p0 );\n@@ -73,7 +73,7 @@ test04()\n {\n #ifdef _GLIBCXX_USE_WCHAR_T\n   // path(const Source&, format)\n-  std::wstring s = L\"foo/bar\";\n+  const std::wstring s = L\"foo/bar\";\n   path p0(s);\n   path p1(s, path::auto_format);\n   VERIFY( p1 == p0 );"}, {"sha": "dd696dea57ada6755bfd10659f284244fc2f4718", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/construct/locale.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2Flocale.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -31,7 +31,11 @@ void\n test01()\n {\n   path p(\"/foo/bar\", std::locale::classic());\n+#if defined(__MINGW32__) || defined(__MINGW64__)\n+  VERIFY( p.native() == L\"/foo/bar\" );\n+#else\n   VERIFY( p.native() == \"/foo/bar\" );\n+#endif\n }\n \n void"}, {"sha": "da5f377de9409897ce877312801d4f956f073ceb", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/decompose/root_directory.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fdecompose%2Froot_directory.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fdecompose%2Froot_directory.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fdecompose%2Froot_directory.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -47,7 +47,12 @@ test02()\n   {\n     path rootdir = p.root_directory();\n     VERIFY( !rootdir.has_relative_path() );\n-    VERIFY( rootdir.empty() || rootdir.native() == \"/\");\n+    if (!rootdir.empty())\n+#if defined(__MINGW32__) || defined(__MINGW64__)\n+      VERIFY( rootdir.string() == \"/\" || rootdir.string() == \"\\\\\" );\n+#else\n+      VERIFY( rootdir.string() == \"/\" );\n+#endif\n   }\n }\n "}, {"sha": "29eab0ad56c06a4a2b0feda376798c59cc971803", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/decompose/stem.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fdecompose%2Fstem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fdecompose%2Fstem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fdecompose%2Fstem.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -35,7 +35,7 @@ test01()\n   path p = \"foo.bar.baz.tar\";\n   std::vector<std::string> v;\n   for (; !p.extension().empty(); p = p.stem())\n-    v.push_back(p.extension().native());\n+    v.push_back(p.extension().string());\n   VERIFY( v.at(0) == \".tar\" );\n   VERIFY( v.at(1) == \".baz\" );\n   VERIFY( v.at(2) == \".bar\" );"}, {"sha": "4852c03c78eb0c79be1e10f7a46c8cc8cda844c2", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/itr/traversal.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fitr%2Ftraversal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fitr%2Ftraversal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fitr%2Ftraversal.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -81,6 +81,24 @@ test01()\n   v2 = { \"//rootname\", \"/\", \"dir\", \"filename\" };\n #else\n   v2 = { \"/\", \"rootname\", \"dir\", \"filename\" };\n+#endif\n+  VERIFY( v == v2 );\n+\n+  p = \"c:relative/path\";\n+  v.assign(p.begin(), p.end());\n+#if defined(__MINGW32__) || defined(__MINGW64__)\n+  v2 = { \"c:\", \"relative\", \"path\" };\n+#else\n+  v2 = { \"c:relative\", \"path\" };\n+#endif\n+  VERIFY( v == v2 );\n+\n+  p = \"c:/absolute/path\";\n+  v.assign(p.begin(), p.end());\n+#if defined(__MINGW32__) || defined(__MINGW64__)\n+  v2 = { \"c:\", \"/\", \"absolute\", \"path\" };\n+#else\n+  v2 = { \"c:\", \"absolute\", \"path\" };\n #endif\n   VERIFY( v == v2 );\n }"}, {"sha": "6ae49bb606089deff645dc64185614429db72deb", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/native/string.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnative%2Fstring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnative%2Fstring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnative%2Fstring.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -27,14 +27,15 @@ void\n test01()\n {\n   using namespace std::filesystem;\n-  const std::string s = \"abc\";\n+  using string_type = std::basic_string<path::value_type>;\n+  const string_type s{ 'a', 'b', 'c' };\n   path p(s);\n \n   VERIFY( p.native() == s );\n   VERIFY( p.c_str() == s );\n-  VERIFY( static_cast<std::string>(p) == s );\n+  VERIFY( static_cast<string_type>(p) == s );\n \n-  std::string s2 = p; // implicit conversion\n+  string_type s2 = p; // implicit conversion\n   VERIFY( s2 == p.native() );\n }\n "}, {"sha": "16fb1910feb7875990f53cad1cb61de264d30695", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/query/is_absolute.cc", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fquery%2Fis_absolute.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fquery%2Fis_absolute.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fquery%2Fis_absolute.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -29,11 +29,17 @@ using std::filesystem::path;\n void\n test01()\n {\n-  VERIFY( path(\"/\").is_absolute() );\n-  VERIFY( path(\"/foo\").is_absolute() );\n-  VERIFY( path(\"/foo/\").is_absolute() );\n-  VERIFY( path(\"/foo/bar\").is_absolute() );\n-  VERIFY( path(\"/foo/bar/\").is_absolute() );\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  const bool is_posix = false;\n+#else\n+  const bool is_posix = true;\n+#endif\n+\n+  VERIFY( path(\"/\").is_absolute() == is_posix );\n+  VERIFY( path(\"/foo\").is_absolute() == is_posix );\n+  VERIFY( path(\"/foo/\").is_absolute() == is_posix );\n+  VERIFY( path(\"/foo/bar\").is_absolute() == is_posix );\n+  VERIFY( path(\"/foo/bar/\").is_absolute() == is_posix );\n   VERIFY( ! path(\"foo\").is_absolute() );\n   VERIFY( ! path(\"foo/\").is_absolute() );\n   VERIFY( ! path(\"foo/bar\").is_absolute() );\n@@ -43,16 +49,11 @@ test01()\n   VERIFY( ! path(\"c:foo/\").is_absolute() );\n   VERIFY( ! path(\"c:foo/bar\").is_absolute() );\n   VERIFY( ! path(\"c:foo/bar/\").is_absolute() );\n-#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-  const bool drive_letter_is_root_name = true;\n-#else\n-  const bool drive_letter_is_root_name = false;\n-#endif\n-  VERIFY( path(\"c:/\").is_absolute() == drive_letter_is_root_name );\n-  VERIFY( path(\"c:/foo\").is_absolute() == drive_letter_is_root_name );\n-  VERIFY( path(\"c:/foo/\").is_absolute() == drive_letter_is_root_name );\n-  VERIFY( path(\"c:/foo/bar\").is_absolute() == drive_letter_is_root_name );\n-  VERIFY( path(\"c:/foo/bar/\").is_absolute() == drive_letter_is_root_name );\n+  VERIFY( path(\"c:/\").is_absolute() == !is_posix );\n+  VERIFY( path(\"c:/foo\").is_absolute() == !is_posix );\n+  VERIFY( path(\"c:/foo/\").is_absolute() == !is_posix );\n+  VERIFY( path(\"c:/foo/bar\").is_absolute() == !is_posix );\n+  VERIFY( path(\"c:/foo/bar/\").is_absolute() == !is_posix );\n }\n \n int"}, {"sha": "fe3d981d295b592bc6124fede1ee6069bfdfc2b3", "filename": "libstdc++-v3/testsuite/experimental/filesystem/iterators/directory_iterator.cc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -44,15 +44,16 @@ test01()\n   VERIFY( iter == end(iter) );\n \n   // Test non-empty directory.\n-  create_directory_symlink(p, p / \"l\", ec);\n+  create_directory(p / \"x\", ec);\n   VERIFY( !ec );\n   iter = fs::directory_iterator(p, ec);\n   VERIFY( !ec );\n   VERIFY( iter != fs::directory_iterator() );\n-  VERIFY( iter->path() == p/\"l\" );\n+  VERIFY( iter->path() == p/\"x\" );\n   ++iter;\n   VERIFY( iter == end(iter) );\n \n+#if !(defined(__MINGW32__) || defined(__MINGW64__))\n   // Test inaccessible directory.\n   permissions(p, fs::perms::none, ec);\n   VERIFY( !ec );\n@@ -65,6 +66,7 @@ test01()\n   iter = fs::directory_iterator(p, opts, ec);\n   VERIFY( !ec );\n   VERIFY( iter == end(iter) );\n+#endif\n \n   permissions(p, fs::perms::owner_all, ec);\n   remove_all(p, ec);\n@@ -76,7 +78,7 @@ test02()\n   std::error_code ec;\n   const auto p = __gnu_test::nonexistent_path();\n   create_directory(p, fs::current_path(), ec);\n-  create_directory_symlink(p, p / \"l\", ec);\n+  create_directory(p / \"x\", ec);\n   VERIFY( !ec );\n \n   // Test post-increment (libstdc++/71005)\n@@ -86,7 +88,7 @@ test02()\n   const auto entry1 = *iter;\n   const auto entry2 = *iter++;\n   VERIFY( entry1 == entry2 );\n-  VERIFY( entry1.path() == p/\"l\" );\n+  VERIFY( entry1.path() == p/\"x\" );\n   VERIFY( iter == end(iter) );\n \n   remove_all(p, ec);\n@@ -121,7 +123,7 @@ test05()\n {\n   auto p = __gnu_test::nonexistent_path();\n   create_directory(p);\n-  create_directory_symlink(p, p / \"l\");\n+  create_directory(p / \"x\");\n   fs::directory_iterator it(p), endit;\n   VERIFY( begin(it) == it );\n   static_assert( noexcept(begin(it)), \"begin is noexcept\" );"}, {"sha": "e493c5be009c1db6aedfcb21df75b3207584fb01", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/absolute.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fabsolute.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fabsolute.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fabsolute.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -31,12 +31,29 @@ void\n test01()\n {\n   for (const path& p : __gnu_test::test_paths)\n+  {\n+#if defined(__MINGW32__) || defined(__MINGW64__)\n+    if (p.empty())\n+      continue;\n+#endif\n     VERIFY( absolute(p).is_absolute() );\n+  }\n }\n \n void\n test02()\n {\n+#if defined(__MINGW32__) || defined(__MINGW64__)\n+  path p1(\"/\");\n+  VERIFY( absolute(p1) != p1 );\n+  path p2(\"/foo\");\n+  VERIFY( absolute(p2) != p2 );\n+  path p3(\"foo\");\n+  VERIFY( absolute(p3) != p3 );\n+  path p4(\"C:\\\\\");\n+  VERIFY( absolute(p3, p4) == \"C:\\\\foo\" );\n+  VERIFY( absolute(p4) == p4 );\n+#else\n   path p1(\"/\");\n   VERIFY( absolute(p1) == p1 );\n   VERIFY( absolute(p1, \"/bar\") == p1 );\n@@ -46,6 +63,7 @@ test02()\n   path p3(\"foo\");\n   VERIFY( absolute(p3) != p3 );\n   VERIFY( absolute(p3, \"/bar\") == \"/bar/foo\" );\n+#endif\n }\n \n int"}, {"sha": "1daf908438b11261136ef9a9ac39a723a573e40c", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/copy.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -114,7 +114,7 @@ test03()\n   auto to = __gnu_test::nonexistent_path();\n \n   // test empty file\n-  std::ofstream{from.native()};\n+  std::ofstream{from.c_str()};\n   VERIFY( fs::exists(from) );\n   VERIFY( fs::file_size(from) == 0 );\n   fs::copy(from, to);\n@@ -123,7 +123,7 @@ test03()\n \n   remove(to);\n   VERIFY( !fs::exists(to) );\n-  std::ofstream{from.native()} << \"Hello, filesystem!\";\n+  std::ofstream{from.c_str()} << \"Hello, filesystem!\";\n   VERIFY( fs::file_size(from) != 0 );\n   fs::copy(from, to);\n   VERIFY( fs::exists(to) );\n@@ -150,9 +150,9 @@ test04()\n   }\n \n   __gnu_test::scoped_file f1(from/\"a/f1\");\n-  std::ofstream{f1.path} << \"file one\";\n+  std::ofstream{f1.path.c_str()} << \"file one\";\n   __gnu_test::scoped_file f2(from/\"a/b/f2\");\n-  std::ofstream{f2.path} << \"file two\";\n+  std::ofstream{f2.path.c_str()} << \"file two\";\n \n   copy(from, to, ec);\n   VERIFY( !ec );"}, {"sha": "cf4cd4b02a85f60060fd6e6f15dbd8349ab6a42a", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/copy_file.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy_file.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy_file.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy_file.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -42,7 +42,7 @@ test01()\n   VERIFY( !exists(to) );\n \n   // test empty file\n-  std::ofstream{from.native()};\n+  std::ofstream{from.c_str()};\n   VERIFY( exists(from) );\n   VERIFY( file_size(from) == 0 );\n \n@@ -58,7 +58,7 @@ test01()\n   VERIFY( exists(to) );\n   VERIFY( file_size(to) == 0 );\n \n-  std::ofstream{from.native()} << \"Hello, filesystem!\";\n+  std::ofstream{from.c_str()} << \"Hello, filesystem!\";\n   VERIFY( file_size(from) != 0 );\n   remove(to);\n   VERIFY( !exists(to) );"}, {"sha": "c21a87124d07c49eaf66766533511a60d5ba3c23", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/exists.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fexists.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fexists.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fexists.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -28,16 +28,18 @@ using std::experimental::filesystem::path;\n void\n test01()\n {\n-  VERIFY( exists(path{\"/\"}) );\n-  VERIFY( exists(path{\"/.\"}) );\n+  const path root = __gnu_test::root_path();\n+\n+  VERIFY( exists(root) );\n+  VERIFY( exists(root/\".\") );\n   VERIFY( exists(path{\".\"}) );\n   VERIFY( exists(path{\"..\"}) );\n   VERIFY( exists(std::experimental::filesystem::current_path()) );\n \n   std::error_code ec = std::make_error_code(std::errc::invalid_argument);\n-  VERIFY( exists(path{\"/\"}, ec) );\n+  VERIFY( exists(root, ec) );\n   VERIFY( !ec );\n-  VERIFY( exists(path{\"/.\"}, ec) );\n+  VERIFY( exists(root/\".\", ec) );\n   VERIFY( !ec );\n   VERIFY( exists(path{\".\"}, ec) );\n   VERIFY( !ec );"}, {"sha": "17a174f6af68a5103336e89de561ec86fca80438", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/is_empty.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fis_empty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fis_empty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fis_empty.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -82,7 +82,7 @@ test02()\n   empty = is_empty(f.path);\n   VERIFY( empty );\n \n-  std::ofstream{f.path.native()} << \"data\";\n+  std::ofstream{f.path.c_str()} << \"data\";\n   ec = bad_ec;\n   empty = is_empty(p, ec);\n   VERIFY( !ec );"}, {"sha": "d0be9028b04efef08a298c759cab861b1bfe5c6b", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/last_write_time.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Flast_write_time.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Flast_write_time.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Flast_write_time.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -81,7 +81,7 @@ test01()\n   ::utimbuf times;\n   times.modtime = std::numeric_limits<std::time_t>::max() - 1;\n   times.actime = std::numeric_limits<std::time_t>::max() - 1;\n-  VERIFY( !::utime(p.c_str(), &times) );\n+  VERIFY( !::utime(p.string().c_str(), &times) );\n #else\n   return;\n #endif"}, {"sha": "2ccf5014c3ac6dd797a2bb498a28f6e5cb78b638", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/space.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fspace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fspace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fspace.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -30,9 +30,10 @@ namespace fs = std::experimental::filesystem;\n void\n test01()\n {\n-  fs::space_info s = fs::space(\"/\");\n+  const fs::path root = __gnu_test::root_path();\n+  fs::space_info s = fs::space(root);\n   std::error_code ec = make_error_code(std::errc::invalid_argument);\n-  s = fs::space(\"/\", ec);\n+  s = fs::space(root, ec);\n   VERIFY( !ec );\n \n   s = fs::space(__gnu_test::nonexistent_path(), ec);"}, {"sha": "1e98049d0436c5a959a61f723f9ccfeef9c8f710", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/temp_directory_path.cc", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -27,10 +27,28 @@\n void\n clean_env()\n {\n+#if defined(__MINGW32__) || defined(__MINGW64__)\n+  ::_putenv(\"TMP=\");\n+  ::_putenv(\"TEMP=\");\n+#else\n   ::unsetenv(\"TMPDIR\");\n   ::unsetenv(\"TMP\");\n   ::unsetenv(\"TEMPDIR\");\n   ::unsetenv(\"TEMP\");\n+#endif\n+}\n+\n+bool\n+set_env(const char* name, std::string value)\n+{\n+#if defined(__MINGW32__) || defined(__MINGW64__)\n+  std::string s = name;\n+  s += '=';\n+  s += value;\n+  return !::_putenv(s.c_str());\n+#else\n+  return !::setenv(name, value.c_str(), 1);\n+#endif\n }\n \n namespace fs = std::experimental::filesystem;\n@@ -57,7 +75,7 @@ test02()\n {\n   clean_env();\n \n-  if (::setenv(\"TMPDIR\", __gnu_test::nonexistent_path().string().c_str(), 1))\n+  if (set_env(\"TMPDIR\", __gnu_test::nonexistent_path().string()))\n     return; // just give up\n \n   std::error_code ec;\n@@ -80,7 +98,7 @@ test03()\n   auto p = __gnu_test::nonexistent_path();\n   create_directories(p/\"tmp\");\n   permissions(p, fs::perms::none);\n-  setenv(\"TMPDIR\", (p/\"tmp\").c_str(), 1);\n+  set_env(\"TMPDIR\", (p/\"tmp\").string());\n   std::error_code ec;\n   auto r = fs::temp_directory_path(ec); // libstdc++/PR71337\n   VERIFY( ec == std::make_error_code(std::errc::permission_denied) );\n@@ -102,7 +120,7 @@ void\n test04()\n {\n   __gnu_test::scoped_file f;\n-  setenv(\"TMPDIR\", f.path.c_str(), 1);\n+  set_env(\"TMPDIR\", f.path.string());\n   std::error_code ec;\n   auto r = fs::temp_directory_path(ec);\n   VERIFY( ec == std::make_error_code(std::errc::not_a_directory) );"}, {"sha": "5e8b330e18d6387eaf91754abd4cf1fe74231a56", "filename": "libstdc++-v3/testsuite/experimental/filesystem/path/append/path.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fappend%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fappend%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fappend%2Fpath.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -34,16 +34,20 @@ test01()\n \n   path pp = p;\n   pp /= p;\n-  VERIFY( pp.native() == \"/foo/bar/foo/bar\" );\n+  VERIFY( pp.string() == \"/foo/bar/foo/bar\" );\n \n   path q(\"baz\");\n \n   path qq = q;\n   qq /= q;\n-  VERIFY( qq.native() == \"baz/baz\" );\n+#if defined(__MINGW32__) || defined(__MINGW64__)\n+  VERIFY( qq.string() == \"baz\\\\baz\" );\n+#else\n+  VERIFY( qq.string() == \"baz/baz\" );\n+#endif\n \n   q /= p;\n-  VERIFY( q.native() == \"baz/foo/bar\" );\n+  VERIFY( q.string() == \"baz/foo/bar\" );\n \n   path r = \"\";\n   r /= path();\n@@ -54,7 +58,7 @@ test01()\n \n   path s = \"dir/\";\n   s /= path(\"/file\");\n-  VERIFY( s.native() == \"dir//file\" );\n+  VERIFY( s.string() == \"dir//file\" );\n }\n \n int"}, {"sha": "8f11254b7e24723692fc4a57843f01af0da7799e", "filename": "libstdc++-v3/testsuite/experimental/filesystem/path/concat/path.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fconcat%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fconcat%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fconcat%2Fpath.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -34,18 +34,18 @@ test01()\n \n   path pp = p;\n   pp += p;\n-  VERIFY( pp.native() == \"/foo/bar/foo/bar\" );\n+  VERIFY( pp.string() == \"/foo/bar/foo/bar\" );\n   VERIFY( std::distance(pp.begin(), pp.end()) == 5 );\n \n   path q(\"foo/bar\");\n \n   path qq = q;\n   qq += q;\n-  VERIFY( qq.native() == \"foo/barfoo/bar\" );\n+  VERIFY( qq.string() == \"foo/barfoo/bar\" );\n   VERIFY( std::distance(qq.begin(), qq.end()) == 3 );\n \n   q += p;\n-  VERIFY( q.native() == \"foo/bar/foo/bar\" );\n+  VERIFY( q.string() == \"foo/bar/foo/bar\" );\n   VERIFY( std::distance(q.begin(), q.end()) == 4 );\n }\n "}, {"sha": "fc38be6adf1fa08c0ad27c47cafae3a3c4879bae", "filename": "libstdc++-v3/testsuite/experimental/filesystem/path/decompose/root_directory.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fdecompose%2Froot_directory.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fdecompose%2Froot_directory.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fdecompose%2Froot_directory.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -48,8 +48,8 @@ test02()\n     path rootdir = p.root_directory();\n     // If root-directory is composed of 'slash name',\n     // 'slash' is excluded from the returned string.\n-    if (!rootdir.empty() && rootdir.native() != \"/\")\n-      VERIFY( rootdir.native()[0] != '/' );\n+    if (!rootdir.empty() && rootdir.string() != \"/\")\n+      VERIFY( rootdir.string()[0] != '/' );\n   }\n }\n "}, {"sha": "0f67e02a11203b0a238f5c39e78389f42705ed73", "filename": "libstdc++-v3/testsuite/experimental/filesystem/path/decompose/stem.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fdecompose%2Fstem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fdecompose%2Fstem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fdecompose%2Fstem.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -35,7 +35,7 @@ test01()\n   path p = \"foo.bar.baz.tar\";\n   std::vector<std::string> v;\n   for (; !p.extension().empty(); p = p.stem())\n-    v.push_back(p.extension().native());\n+    v.push_back(p.extension().string());\n   VERIFY( v.at(0) == \".tar\" );\n   VERIFY( v.at(1) == \".baz\" );\n   VERIFY( v.at(2) == \".bar\" );"}, {"sha": "8e40cdb0e1ef4645e2e80f6891925b1a51178d7c", "filename": "libstdc++-v3/testsuite/experimental/filesystem/path/native/string.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fnative%2Fstring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fnative%2Fstring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fnative%2Fstring.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -27,14 +27,15 @@ void\n test01()\n {\n   using namespace std::experimental::filesystem;\n-  const std::string s = \"abc\";\n+  using string_type = std::basic_string<path::value_type>;\n+  const string_type s{ 'a', 'b', 'c' };\n   path p(s);\n \n   VERIFY( p.native() == s );\n   VERIFY( p.c_str() == s );\n-  VERIFY( static_cast<std::string>(p) == s );\n+  VERIFY( static_cast<string_type>(p) == s );\n \n-  std::string s2 = p; // implicit conversion\n+  string_type s2 = p; // implicit conversion\n   VERIFY( s2 == p.native() );\n }\n "}, {"sha": "974dec4381d55e8bb268614a27410c1c16344b10", "filename": "libstdc++-v3/testsuite/experimental/filesystem/path/query/is_absolute.cc", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fquery%2Fis_absolute.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fquery%2Fis_absolute.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fquery%2Fis_absolute.cc?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -29,11 +29,17 @@ using std::filesystem::path;\n void\n test01()\n {\n-  VERIFY( path(\"/\").is_absolute() );\n-  VERIFY( path(\"/foo\").is_absolute() );\n-  VERIFY( path(\"/foo/\").is_absolute() );\n-  VERIFY( path(\"/foo/bar\").is_absolute() );\n-  VERIFY( path(\"/foo/bar/\").is_absolute() );\n+  #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  const bool is_posix = false;\n+#else\n+  const bool is_posix = true;\n+#endif\n+\n+  VERIFY( path(\"/\").is_absolute() == is_posix );\n+  VERIFY( path(\"/foo\").is_absolute() == is_posix );\n+  VERIFY( path(\"/foo/\").is_absolute() == is_posix );\n+  VERIFY( path(\"/foo/bar\").is_absolute() == is_posix );\n+  VERIFY( path(\"/foo/bar/\").is_absolute() == is_posix );\n   VERIFY( ! path(\"foo\").is_absolute() );\n   VERIFY( ! path(\"foo/\").is_absolute() );\n   VERIFY( ! path(\"foo/bar\").is_absolute() );\n@@ -43,16 +49,11 @@ test01()\n   VERIFY( ! path(\"c:foo/\").is_absolute() );\n   VERIFY( ! path(\"c:foo/bar\").is_absolute() );\n   VERIFY( ! path(\"c:foo/bar/\").is_absolute() );\n-#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-  const bool drive_letter_is_root_name = true;\n-#else\n-  const bool drive_letter_is_root_name = false;\n-#endif\n-  VERIFY( path(\"c:/\").is_absolute() == drive_letter_is_root_name );\n-  VERIFY( path(\"c:/foo\").is_absolute() == drive_letter_is_root_name );\n-  VERIFY( path(\"c:/foo/\").is_absolute() == drive_letter_is_root_name );\n-  VERIFY( path(\"c:/foo/bar\").is_absolute() == drive_letter_is_root_name );\n-  VERIFY( path(\"c:/foo/bar/\").is_absolute() == drive_letter_is_root_name );\n+  VERIFY( path(\"c:/\").is_absolute() == !is_posix );\n+  VERIFY( path(\"c:/foo\").is_absolute() == !is_posix );\n+  VERIFY( path(\"c:/foo/\").is_absolute() == !is_posix );\n+  VERIFY( path(\"c:/foo/bar\").is_absolute() == !is_posix );\n+  VERIFY( path(\"c:/foo/bar/\").is_absolute() == !is_posix );\n }\n \n int"}, {"sha": "eccb8929d7d55c0edc9620daa24e9e9cf68788e2", "filename": "libstdc++-v3/testsuite/util/testsuite_fs.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9534a5e62dc2b81d001f98f1ed582bc3f1d39c80/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h?ref=9534a5e62dc2b81d001f98f1ed582bc3f1d39c80", "patch": "@@ -73,6 +73,16 @@ namespace __gnu_test\n     \"a\", \"a/b\", \"a/b/\", \"a/b/c\", \"a/b/c.d\", \"a/b/..\", \"a/b/c.\", \"a/b/.c\"\n   };\n \n+  test_fs::path\n+  root_path()\n+  {\n+#if defined(__MING32__) || defined(__MINGW64__)\n+    return L\"c:/\";\n+#else\n+    return \"/\";\n+#endif\n+  }\n+\n   // This is NOT supposed to be a secure way to get a unique name!\n   // We just need a path that doesn't exist for testing purposes.\n   test_fs::path\n@@ -111,7 +121,7 @@ namespace __gnu_test\n \n     explicit\n     scoped_file(const path_type& p = nonexistent_path()) : path(p)\n-    { std::ofstream{p.native()}; }\n+    { std::ofstream{p.c_str()}; }\n \n     scoped_file(path_type p, adopt_file_t) : path(p) { }\n "}]}