{"sha": "d6a85c8dd4854845630569bbec6437170c3bc246", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZhODVjOGRkNDg1NDg0NTYzMDU2OWJiZWM2NDM3MTcwYzNiYzI0Ng==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2007-03-10T02:01:49Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2007-03-10T02:01:49Z"}, "message": "re PR c++/20599 (variadic template support)\n\n2007-03-09  Douglas Gregor  <doug.gregor@gmail.com>\n\n\tPR c++/20599\n\t* g++.dg/cpp0x/variadic-bind.C: New.\n\t* g++.dg/cpp0x/variadic-function.C: New.\n\t* g++.dg/cpp0x/variadic-mem_fn.C: New.\n\t* g++.dg/cpp0x/variadic-tuple.C: New.\n\t* g++.dg/cpp0x/variadic1.C: New.\n\t* g++.dg/cpp0x/variadic2.C: New.\n\t* g++.dg/cpp0x/variadic3.C: New.\n\t* g++.dg/cpp0x/variadic4.C: New.\n\t* g++.dg/cpp0x/variadic5.C: New.\n\t* g++.dg/cpp0x/variadic6.C: New.\n\t* g++.dg/cpp0x/variadic7.C: New.\n\t* g++.dg/cpp0x/variadic8.C: New.\n\t* g++.dg/cpp0x/variadic9.C: New.\n\t* g++.dg/cpp0x/variadic10.C: New.\n\t* g++.dg/cpp0x/variadic11.C: New.\n\t* g++.dg/cpp0x/variadic12.C: New.\n\t* g++.dg/cpp0x/variadic13.C: New.\n\t* g++.dg/cpp0x/variadic14.C: New.\n\t* g++.dg/cpp0x/variadic15.C: New.\n\t* g++.dg/cpp0x/variadic16.C: New.\n\t* g++.dg/cpp0x/variadic17.C: New.\n\t* g++.dg/cpp0x/variadic18.C: New.\n\t* g++.dg/cpp0x/variadic19.C: New.\n\t* g++.dg/cpp0x/variadic20.C: New.\n\t* g++.dg/cpp0x/variadic21.C: New.\n\t* g++.dg/cpp0x/variadic22.C: New.\n\t* g++.dg/cpp0x/variadic23.C: New.\n\t* g++.dg/cpp0x/variadic24.C: New.\n\t* g++.dg/cpp0x/variadic25.C: New.\n\t* g++.dg/cpp0x/variadic26.C: New.\n\t* g++.dg/cpp0x/variadic27.C: New.\n\t* g++.dg/cpp0x/variadic28.C: New.\n\t* g++.dg/cpp0x/variadic29.C: New.\n\t* g++.dg/cpp0x/variadic30.C: New.\n\t* g++.dg/cpp0x/variadic31.C: New.\n\t* g++.dg/cpp0x/variadic32.C: New.\n\t* g++.dg/cpp0x/variadic33.C: New.\n\t* g++.dg/cpp0x/variadic34.C: New.\n\t* g++.dg/cpp0x/variadic35.C: New.\n\t* g++.dg/cpp0x/variadic36.C: New.\n\t* g++.dg/cpp0x/variadic37.C: New.\n\t* g++.dg/cpp0x/variadic38.C: New.\n\t* g++.dg/cpp0x/variadic39.C: New.\n\t* g++.dg/cpp0x/variadic40.C: New.\n\t* g++.dg/cpp0x/variadic41.C: New.\n\t* g++.dg/cpp0x/variadic42.C: New.\n\t* g++.dg/cpp0x/variadic43.C: New.\n\t* g++.dg/cpp0x/variadic44.C: New.\n\t* g++.dg/cpp0x/variadic45.C: New.\n\t* g++.dg/cpp0x/variadic46.C: New.\n\t* g++.dg/cpp0x/variadic47.C: New.\n\t* g++.dg/cpp0x/variadic48.C: New.\n\t* g++.dg/cpp0x/variadic49.C: New.\n\t* g++.dg/cpp0x/variadic50.C: New.\n\t* g++.dg/cpp0x/variadic51.C: New.\n\t* g++.dg/cpp0x/variadic52.C: New.\n\t* g++.dg/cpp0x/variadic53.C: New.\n\t* g++.dg/cpp0x/variadic54.C: New.\n\t* g++.dg/cpp0x/variadic55.C: New.\n\t* g++.dg/cpp0x/variadic56.C: New.\n\t* g++.dg/cpp0x/variadic57.C: New.\n\t* g++.dg/cpp0x/variadic58.C: New.\n\t* g++.dg/cpp0x/variadic59.C: New.\n        * g++.dg/cpp0x/variadic60.C : New.\n        * g++.dg/cpp0x/variadic61.C : New.\n        * g++.dg/cpp0x/variadic62.C : New.\n        * g++.dg/cpp0x/variadic63.C : New.\n        * g++.dg/cpp0x/variadic64.C : New.\n        * g++.dg/cpp0x/variadic65.C : New.\n        * g++.dg/cpp0x/variadic66.C : New.\n        * g++.dg/cpp0x/variadic67.C : New.\n        * g++.dg/cpp0x/variadic68.C : New.\t\n        * g++.dg/cpp0x/variadic69.C : New.\n\t* g++.dg/cpp0x/variadic70.C : New.\n\t* g++.dg/cpp0x/variadic71.C : New.\n\t* g++.dg/cpp0x/variadic72.C : New.\n\t* g++.dg/cpp0x/variadic73.C : New.\n\t* g++.dg/cpp0x/variadic74.C : New.\n\t* g++.dg/cpp0x/variadic75.C : New.\n\t* g++.dg/cpp0x/variadic-ex1.C : New.\n\t* g++.dg/cpp0x/variadic-ex2.C : New.\n\t* g++.dg/cpp0x/variadic-ex3.C : New.\n\t* g++.dg/cpp0x/variadic-ex4.C : New.\n\t* g++.dg/cpp0x/variadic-ex5.C : New.\n\t* g++.dg/cpp0x/variadic-ex6.C : New.\n\t* g++.dg/cpp0x/variadic-ex7.C : New.\n\t* g++.dg/cpp0x/variadic-ex8.C : New.\n\t* g++.dg/cpp0x/variadic-ex9.C : New.\n\t* g++.dg/cpp0x/variadic-ex10.C : New.\n\t* g++.dg/cpp0x/variadic-ex11.C : New.\n\t* g++.dg/cpp0x/variadic-ex12.C : New.\n\t* g++.dg/cpp0x/variadic-ex13.C : New.\n\t* g++.dg/cpp0x/variadic-ex14.C : New.\n\nFrom-SVN: r122789", "tree": {"sha": "54c92436efb921f23962b5111b0b010a5d495119", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54c92436efb921f23962b5111b0b010a5d495119"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6a85c8dd4854845630569bbec6437170c3bc246", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6a85c8dd4854845630569bbec6437170c3bc246", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6a85c8dd4854845630569bbec6437170c3bc246", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6a85c8dd4854845630569bbec6437170c3bc246/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d80a306744bf10263a1f69ceda3ac8366ba6606", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d80a306744bf10263a1f69ceda3ac8366ba6606", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d80a306744bf10263a1f69ceda3ac8366ba6606"}], "stats": {"total": 2473, "additions": 2473, "deletions": 0}, "files": [{"sha": "d71b94f98101580e71d6a8b457c3c20cbd15330b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -1,3 +1,100 @@\n+2007-03-09  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\tPR c++/20599\n+\t* g++.dg/cpp0x/variadic-bind.C: New.\n+\t* g++.dg/cpp0x/variadic-function.C: New.\n+\t* g++.dg/cpp0x/variadic-mem_fn.C: New.\n+\t* g++.dg/cpp0x/variadic-tuple.C: New.\n+\t* g++.dg/cpp0x/variadic1.C: New.\n+\t* g++.dg/cpp0x/variadic2.C: New.\n+\t* g++.dg/cpp0x/variadic3.C: New.\n+\t* g++.dg/cpp0x/variadic4.C: New.\n+\t* g++.dg/cpp0x/variadic5.C: New.\n+\t* g++.dg/cpp0x/variadic6.C: New.\n+\t* g++.dg/cpp0x/variadic7.C: New.\n+\t* g++.dg/cpp0x/variadic8.C: New.\n+\t* g++.dg/cpp0x/variadic9.C: New.\n+\t* g++.dg/cpp0x/variadic10.C: New.\n+\t* g++.dg/cpp0x/variadic11.C: New.\n+\t* g++.dg/cpp0x/variadic12.C: New.\n+\t* g++.dg/cpp0x/variadic13.C: New.\n+\t* g++.dg/cpp0x/variadic14.C: New.\n+\t* g++.dg/cpp0x/variadic15.C: New.\n+\t* g++.dg/cpp0x/variadic16.C: New.\n+\t* g++.dg/cpp0x/variadic17.C: New.\n+\t* g++.dg/cpp0x/variadic18.C: New.\n+\t* g++.dg/cpp0x/variadic19.C: New.\n+\t* g++.dg/cpp0x/variadic20.C: New.\n+\t* g++.dg/cpp0x/variadic21.C: New.\n+\t* g++.dg/cpp0x/variadic22.C: New.\n+\t* g++.dg/cpp0x/variadic23.C: New.\n+\t* g++.dg/cpp0x/variadic24.C: New.\n+\t* g++.dg/cpp0x/variadic25.C: New.\n+\t* g++.dg/cpp0x/variadic26.C: New.\n+\t* g++.dg/cpp0x/variadic27.C: New.\n+\t* g++.dg/cpp0x/variadic28.C: New.\n+\t* g++.dg/cpp0x/variadic29.C: New.\n+\t* g++.dg/cpp0x/variadic30.C: New.\n+\t* g++.dg/cpp0x/variadic31.C: New.\n+\t* g++.dg/cpp0x/variadic32.C: New.\n+\t* g++.dg/cpp0x/variadic33.C: New.\n+\t* g++.dg/cpp0x/variadic34.C: New.\n+\t* g++.dg/cpp0x/variadic35.C: New.\n+\t* g++.dg/cpp0x/variadic36.C: New.\n+\t* g++.dg/cpp0x/variadic37.C: New.\n+\t* g++.dg/cpp0x/variadic38.C: New.\n+\t* g++.dg/cpp0x/variadic39.C: New.\n+\t* g++.dg/cpp0x/variadic40.C: New.\n+\t* g++.dg/cpp0x/variadic41.C: New.\n+\t* g++.dg/cpp0x/variadic42.C: New.\n+\t* g++.dg/cpp0x/variadic43.C: New.\n+\t* g++.dg/cpp0x/variadic44.C: New.\n+\t* g++.dg/cpp0x/variadic45.C: New.\n+\t* g++.dg/cpp0x/variadic46.C: New.\n+\t* g++.dg/cpp0x/variadic47.C: New.\n+\t* g++.dg/cpp0x/variadic48.C: New.\n+\t* g++.dg/cpp0x/variadic49.C: New.\n+\t* g++.dg/cpp0x/variadic50.C: New.\n+\t* g++.dg/cpp0x/variadic51.C: New.\n+\t* g++.dg/cpp0x/variadic52.C: New.\n+\t* g++.dg/cpp0x/variadic53.C: New.\n+\t* g++.dg/cpp0x/variadic54.C: New.\n+\t* g++.dg/cpp0x/variadic55.C: New.\n+\t* g++.dg/cpp0x/variadic56.C: New.\n+\t* g++.dg/cpp0x/variadic57.C: New.\n+\t* g++.dg/cpp0x/variadic58.C: New.\n+\t* g++.dg/cpp0x/variadic59.C: New.\n+        * g++.dg/cpp0x/variadic60.C : New.\n+        * g++.dg/cpp0x/variadic61.C : New.\n+        * g++.dg/cpp0x/variadic62.C : New.\n+        * g++.dg/cpp0x/variadic63.C : New.\n+        * g++.dg/cpp0x/variadic64.C : New.\n+        * g++.dg/cpp0x/variadic65.C : New.\n+        * g++.dg/cpp0x/variadic66.C : New.\n+        * g++.dg/cpp0x/variadic67.C : New.\n+        * g++.dg/cpp0x/variadic68.C : New.\t\n+        * g++.dg/cpp0x/variadic69.C : New.\n+\t* g++.dg/cpp0x/variadic70.C : New.\n+\t* g++.dg/cpp0x/variadic71.C : New.\n+\t* g++.dg/cpp0x/variadic72.C : New.\n+\t* g++.dg/cpp0x/variadic73.C : New.\n+\t* g++.dg/cpp0x/variadic74.C : New.\n+\t* g++.dg/cpp0x/variadic75.C : New.\n+\t* g++.dg/cpp0x/variadic-ex1.C : New.\n+\t* g++.dg/cpp0x/variadic-ex2.C : New.\n+\t* g++.dg/cpp0x/variadic-ex3.C : New.\n+\t* g++.dg/cpp0x/variadic-ex4.C : New.\n+\t* g++.dg/cpp0x/variadic-ex5.C : New.\n+\t* g++.dg/cpp0x/variadic-ex6.C : New.\n+\t* g++.dg/cpp0x/variadic-ex7.C : New.\n+\t* g++.dg/cpp0x/variadic-ex8.C : New.\n+\t* g++.dg/cpp0x/variadic-ex9.C : New.\n+\t* g++.dg/cpp0x/variadic-ex10.C : New.\n+\t* g++.dg/cpp0x/variadic-ex11.C : New.\n+\t* g++.dg/cpp0x/variadic-ex12.C : New.\n+\t* g++.dg/cpp0x/variadic-ex13.C : New.\n+\t* g++.dg/cpp0x/variadic-ex14.C : New.\n+\n 2007-03-09  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/31099"}, {"sha": "b9f9f678c57c9fc37af3fa929d3021d27ec1406a", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-bind.C", "status": "added", "additions": 476, "deletions": 0, "changes": 476, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-bind.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-bind.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-bind.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,476 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do \"run\" }\n+// A basic implementation of TR1's bind using variadic teplates\n+// Contributed by Douglas Gregor <doug.gregor@gmail.com>\n+#include <cassert>\n+\n+// Trivial reference_wrapper\n+template<typename T>\n+struct reference_wrapper\n+{\n+  reference_wrapper(T& x) : ptr(&x) { }\n+\n+  operator T&() const { return *ptr; }\n+  \n+  T& get() const { return *ptr; }\n+\n+  T* ptr;\n+};\n+\n+template<typename T> reference_wrapper<T> ref(T& x) { return x; }\n+template<typename T> reference_wrapper<const T> cref(const T& x) { return x; }\n+\n+// Simple type-traits we'll need\n+template<typename T>\n+struct add_reference\n+{\n+  typedef T& type;\n+};\n+\n+template<typename T>\n+struct add_reference<T&>\n+{\n+  typedef T& type;\n+};\n+\n+template<typename T, typename U>\n+struct is_same\n+{\n+  static const bool value = false;\n+};\n+\n+template<typename T>\n+struct is_same<T, T>\n+{\n+  static const bool value = true;\n+};\n+\n+// For creating the constructor parameters of tuple<>\n+template<typename T>\n+struct add_const_reference\n+{\n+  typedef const T& type;\n+};\n+\n+template<typename T>\n+struct add_const_reference<T&>\n+{\n+  typedef T& type;\n+};\n+\n+// 6.1.3 Class template tuple: Needed for bind() implementation\n+template<typename... Values>\n+class tuple;\n+\n+template<> class tuple<> { };\n+\n+template<typename Head, typename... Tail>\n+class tuple<Head, Tail...> \n+  : private tuple<Tail...>\n+{\n+  typedef tuple<Tail...> inherited;\n+\n+ public:\n+  tuple() { }\n+\n+  // implicit copy-constructor is okay\n+\n+  tuple(typename add_const_reference<Head>::type v, \n+        typename add_const_reference<Tail>::type... vtail)\n+    : m_head(v), inherited(vtail...) { }\n+\n+  template<typename... VValues>\n+  tuple(const tuple<VValues...>& other)\n+    : m_head(other.head()), inherited(other.tail()) { }\n+\n+  template<typename... VValues>\n+  tuple& operator=(const tuple<VValues...>& other)\n+  {\n+    m_head = other.head();\n+    tail() = other.tail();\n+    return *this;\n+  }\n+\n+  typename add_reference<Head>::type       head()       { return m_head; }\n+  typename add_reference<const Head>::type head() const { return m_head; }\n+  inherited&                               tail()       { return *this; }\n+  const inherited&                         tail() const { return *this; }\n+\n+ protected:\n+  Head m_head;\n+};\n+\n+template<typename T>\n+struct make_tuple_result\n+{\n+  typedef T type;\n+};\n+\n+template<typename T>\n+struct make_tuple_result<reference_wrapper<T> >\n+{\n+  typedef T& type;\n+};\n+\n+// 6.1.3.2 Tuple creation functions\n+struct ignore_t { \n+  template<typename T> ignore_t& operator=(const T&) { return *this; }\n+} ignore;\n+\n+template<typename... Values>\n+tuple<typename make_tuple_result<Values>::type...> \n+make_tuple(const Values&... values)\n+{\n+  return tuple<typename make_tuple_result<Values>::type...>(values...);\n+}\n+\n+template<typename... Values>\n+tuple<Values&...> tie(Values&... values)\n+{\n+  return tuple<Values&...>(values...);\n+}\n+\n+// 6.1.3.3 Tuple helper classes\n+template<typename Tuple>\n+struct tuple_size;\n+\n+template<>\n+struct tuple_size<tuple<> >\n+{\n+  static const __SIZE_TYPE__ value = 0;\n+};\n+\n+template<typename Head, typename... Tail>\n+struct tuple_size<tuple<Head, Tail...> >\n+{\n+  static const __SIZE_TYPE__ value = 1 + tuple_size<tuple<Tail...> >::value;\n+};\n+\n+template<int I, typename Tuple>\n+struct tuple_element;\n+\n+template<int I, typename Head, typename... Tail>\n+struct tuple_element<I, tuple<Head, Tail...> >\n+{\n+  typedef typename tuple_element<I-1, tuple<Tail...> >::type type;\n+};\n+\n+template<typename Head, typename... Tail>\n+struct tuple_element<0, tuple<Head, Tail...> >\n+{\n+  typedef Head type;\n+};\n+\n+// 6.1.3.4 Element access\n+template<int I, typename Tuple>\n+class get_impl;\n+\n+template<int I, typename Head, typename... Values> \n+class get_impl<I, tuple<Head, Values...> >\n+{\n+  typedef typename tuple_element<I-1, tuple<Values...> >::type Element;\n+  typedef typename add_reference<Element>::type RJ;\n+  typedef typename add_const_reference<Element>::type PJ;\n+  typedef get_impl<I-1, tuple<Values...> > Next;\n+\n+ public:\n+  static RJ get(tuple<Head, Values...>& t)       \n+  { return Next::get(t.tail()); }\n+\n+  static PJ get(const tuple<Head, Values...>& t) \n+  { return Next::get(t.tail()); }\n+};\n+\n+template<typename Head, typename... Values> \n+class get_impl<0, tuple<Head, Values...> >\n+{\n+  typedef typename add_reference<Head>::type RJ;\n+  typedef typename add_const_reference<Head>::type PJ;\n+\n+ public:\n+  static RJ get(tuple<Head, Values...>& t)       { return t.head(); }\n+  static PJ get(const tuple<Head, Values...>& t) { return t.head(); }\n+};\n+\n+template<int I, typename... Values>\n+typename add_reference<\n+           typename tuple_element<I, tuple<Values...> >::type\n+         >::type\n+get(tuple<Values...>& t)\n+{\n+  return get_impl<I, tuple<Values...> >::get(t);\n+}\n+\n+template<int I, typename... Values>\n+typename add_const_reference<\n+           typename tuple_element<I, tuple<Values...> >::type\n+         >::type\n+get(const tuple<Values...>& t)\n+{\n+  return get_impl<I, tuple<Values...> >::get(t);\n+}\n+\n+// 6.1.3.5 Relational operators\n+inline bool operator==(const tuple<>&, const tuple<>&) { return true; }\n+\n+template<typename T, typename... TTail, typename U, typename... UTail>\n+bool operator==(const tuple<T, TTail...>& t, const tuple<U, UTail...>& u)\n+{\n+  return t.head() == u.head() && t.tail() == u.tail();\n+}\n+\n+template<typename... TValues, typename... UValues>\n+bool operator!=(const tuple<TValues...>& t, const tuple<UValues...>& u)\n+{\n+  return !(t == u);\n+}\n+\n+inline bool operator<(const tuple<>&, const tuple<>&) { return false; }\n+\n+template<typename T, typename... TTail, typename U, typename... UTail>\n+bool operator<(const tuple<T, TTail...>& t, const tuple<U, UTail...>& u)\n+{\n+  return (t.head() < u.head() || \n+          (!(t.head() < u.head()) && t.tail() < u.tail()));\n+}\n+\n+template<typename... TValues, typename... UValues>\n+bool operator>(const tuple<TValues...>& t, const tuple<UValues...>& u)\n+{\n+  return u < t;\n+}\n+\n+template<typename... TValues, typename... UValues>\n+bool operator<=(const tuple<TValues...>& t, const tuple<UValues...>& u)\n+{\n+  return !(u < t);\n+}\n+\n+template<typename... TValues, typename... UValues>\n+bool operator>=(const tuple<TValues...>& t, const tuple<UValues...>& u)\n+{\n+  return !(t < u);\n+}\n+\n+// enable_if, the breakfast of champions\n+template<bool Cond, typename Type = void>\n+struct enable_if {\n+  typedef Type type;\n+};\n+\n+template<typename Type>\n+struct enable_if<false, Type> { };\n+\n+// 3.6 Function object binders\n+\n+// 3.6.1 Class template is_bind_expression\n+template<typename T> \n+struct is_bind_expression {\n+  static const bool value = false;\n+};\n+\n+// 3.6.2 Class template is_placeholder\n+template<typename T>\n+struct is_placeholder {\n+  static const int value = 0;\n+};\n+\n+// 3.6.3 Function template bind\n+template<int I> struct placeholder {} ;\n+\n+template<int N> struct int_c { };\n+\n+// A tuple of integer values\n+template<int...> struct int_tuple {};\n+\n+// make_indexes_impl is a helper for make_indexes\n+template<int I, typename IntTuple, typename... Types>\n+struct make_indexes_impl;\n+\n+\n+template<int I, int... Indexes, typename T, typename... Types>\n+struct make_indexes_impl<I, int_tuple<Indexes...>, T, Types...>\n+{\n+  typedef typename make_indexes_impl<I+1,\n+                                     int_tuple<Indexes..., I>,\n+                                     Types...>::type type;\n+};\n+\n+template<int I, int... Indexes>\n+struct make_indexes_impl<I, int_tuple<Indexes...> > {\n+  typedef int_tuple<Indexes...> type;\n+};\n+\n+// make_indexes takes a variable-length number of N types and\n+// generates an int_tuple that contains <0, 1, 2, ..., N-1>. These can\n+// be used as indexes for tuple's get or tuple_element operation.\n+template<typename... Types> \n+struct make_indexes : make_indexes_impl<0, int_tuple<>, Types...> { };\n+\n+// Get the Ith tuple element, but only if I is in bounds.\n+template<int I, typename Tuple, typename = void> \n+struct safe_tuple_element{ };\n+\n+template<int I, typename... Values>\n+struct safe_tuple_element<I, tuple<Values...>, \n+         typename enable_if<(I >= 0 && \n+                             I < tuple_size<tuple<Values...> >::value)\n+                            >::type>\n+{\n+  typedef typename tuple_element<I, tuple<Values...> >::type type;\n+};\n+\n+// mu maps a bound argument to an actual argument, given a tuple of\n+// the arguments passed to the function object returned by bind().\n+\n+// Return the stored reference from reference_wrapper\n+template<typename T, typename... Args>\n+inline T& mu(reference_wrapper<T>& bound_arg, const tuple<Args&...>&)\n+{\n+  return bound_arg.get();\n+}\n+\n+// Unwrap a tuple into separate arguments and forward to the function\n+// object f.\n+template<typename F, int... Indexes, typename... Args>\n+inline typename F::result_type\n+unwrap_and_forward(F& f, int_tuple<Indexes...>, const tuple<Args&...>& args)\n+{\n+  return f(get<Indexes>(args)...);\n+}\n+\n+// Evaluate the inner bind expression\n+template<typename Bound, typename... Args>\n+inline typename enable_if<is_bind_expression<Bound>::value,\n+                          typename Bound::result_type>::type\n+mu(Bound& bound_arg, const tuple<Args&...>& args)\n+{\n+  typedef typename make_indexes<Args...>::type Indexes;\n+  return unwrap_and_forward(bound_arg, Indexes(), args);\n+}\n+\n+// Retrieve the Ith argument from args\n+template<typename Bound, typename... Args>\n+inline typename safe_tuple_element<is_placeholder<Bound>::value - 1,\n+                                   tuple<Args...> >::type\n+mu(Bound& bound_arg, const tuple<Args&...>& args)\n+{\n+  return get<is_placeholder<Bound>::value-1>(args);\n+}\n+\n+// Return the stored value.\n+template<typename T>\n+struct is_reference_wrapper {\n+  static const bool value = false;\n+};\n+\n+template<typename T>\n+struct is_reference_wrapper<reference_wrapper<T> > {\n+  static const bool value = true;\n+};\n+\n+template<typename Bound, typename... Args>\n+inline typename enable_if<(!is_bind_expression<Bound>::value\n+                           && !is_placeholder<Bound>::value\n+                           && !is_reference_wrapper<Bound>::value),\n+                          Bound&>::type\n+mu(Bound& bound_arg, const tuple<Args&...>&) \n+{\n+  return bound_arg;\n+}\n+\n+// \n+template<typename F, typename... BoundArgs, int... Indexes, typename... Args>\n+typename F::result_type\n+apply_functor(F& f, tuple<BoundArgs...>& bound_args, int_tuple<Indexes...>,\n+              const tuple<Args&...>& args)\n+{\n+  return f(mu(get<Indexes>(bound_args), args)...);\n+}\n+\n+template<typename F, typename... BoundArgs>\n+class bound_functor\n+{\n+  typedef typename make_indexes<BoundArgs...>::type indexes;\n+\n+ public:\n+  typedef typename F::result_type result_type;\n+\n+  explicit bound_functor(const F& f, const BoundArgs&... bound_args)\n+    : f(f), bound_args(bound_args...) { }\n+\n+  template<typename... Args>\n+  typename F::result_type operator()(Args&... args) {\n+    return apply_functor(f, bound_args, indexes(), tie(args...));\n+  }\n+\n+ private:\n+  F f;\n+  tuple<BoundArgs...> bound_args;\n+};\n+\n+template<typename F, typename... BoundArgs>\n+struct is_bind_expression<bound_functor<F, BoundArgs...> > {\n+  static const bool value = true;\n+};\n+\n+template<typename F, typename... BoundArgs>\n+inline bound_functor<F, BoundArgs...>\n+bind(const F& f, const BoundArgs&... bound_args) \n+{\n+  return bound_functor<F, BoundArgs...>(f, bound_args...);\n+}\n+\n+\n+// 3.6.4 Placeholders\n+template<int I> \n+struct is_placeholder<placeholder<I> > {\n+  static const int value = I;\n+};\n+\n+placeholder<1> _1;\n+placeholder<2> _2;\n+placeholder<3> _3;\n+placeholder<4> _4;\n+placeholder<5> _5;\n+placeholder<6> _6;\n+placeholder<7> _7;\n+placeholder<8> _8;\n+placeholder<9> _9;\n+\n+// Test code\n+template<typename T>\n+struct plus {\n+  typedef T result_type;\n+  \n+  T operator()(T x, T y) { return x + y; }\n+};\n+\n+template<typename T>\n+struct multiplies {\n+  typedef T result_type;\n+  \n+  T operator()(T x, T y) { return x * y; }\n+};\n+\n+template<typename T>\n+struct negate {\n+  typedef T result_type;\n+  \n+  T operator()(T x) { return -x; }\n+};\n+\n+int main()\n+{\n+  int seventeen = 17;\n+  int forty_two = 42;\n+\n+  assert(bind(plus<int>(), _1, _2)(seventeen, forty_two) == 59);\n+  assert(bind(plus<int>(), _1, _1)(seventeen, forty_two) == 34);\n+  assert(bind(plus<int>(), _2, _1)(seventeen, forty_two) == 59);\n+  assert(bind(plus<int>(), 5, _1)(seventeen, forty_two) == 22);\n+  assert(bind(plus<int>(), ref(seventeen), _2)(seventeen, forty_two) == 59);\n+  assert(bind(plus<int>(), bind(multiplies<int>(), 3, _1), _2)(seventeen, forty_two) \n+         == 93);\n+  return 0;\n+}"}, {"sha": "d5ebf0def3c93145095fa9522a9d2e9873242157", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex1.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex1.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,4 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename ... Elements> class Tuple;\n+Tuple<>* t; // OK: Elements is empty\n+Tuple* u; // { dg-error \"expected\" }"}, {"sha": "a392bd7d43f2558650c975f48515d423b43705b1", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex10.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex10.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... Types> struct Tuple { };\n+\n+Tuple<> t0; // Types contains no arguments\n+Tuple<int> t1; // Types contains one argument: int\n+Tuple<int, float> t2; // Types contains two arguments: int and float\n+Tuple<0> error; // { dg-error \"mismatch\" }\n+// { dg-error \"expected a type\" \"\" { target *-*-* } 7 }\n+// { dg-error \"in declaration\" \"\" { target *-*-* } 7 }"}, {"sha": "57ef2a3d30e1229bae97ffa5bce86a3bd7d33a43", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex11.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex11.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... Types> \n+  void f(Types... args);\n+\n+void g() {\n+  f(); // okay: args contains no arguments\n+  f(1); // okay: args contains one int argument\n+  (2, 1.0); // okay: args contains two arguments, an int and a double\n+}"}, {"sha": "b97df3102036c0407943860d11247e901539c5a9", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex12.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex12.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,8 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... Types> \n+  void f(Types... rest);\n+\n+template<typename... Types> \n+  void g(Types... rest) {\n+    f(&rest...); // ``&rest...'' is a pack expansion, ``&rest'' is its pattern\n+  }"}, {"sha": "f1cce3a4363c8d85a30b5b1fb4847ef6f2ef3468", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex13.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex13.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+template<typename T, typename U> struct is_same {\n+  static const bool value = false;\n+};\n+\n+template<typename T> struct is_same<T, T> {\n+  static const bool value = true;\n+};\n+\n+template<typename...> struct Tuple {};\n+template<typename T1, typename T2> struct Pair {};\n+\n+template<typename... Args1>\n+  struct zip {\n+    template<typename... Args2>\n+    struct with {\n+      typedef Tuple<Pair<Args1, Args2>...> type; // { dg-error \"mismatched argument pack\" }\n+    };\n+  };\n+\n+static_assert \n+  (is_same<zip<short, int>::with<unsigned short, unsigned>::type,\n+           Tuple<Pair<short, unsigned short>, Pair<int, unsigned> > >::value,\n+   \"zip\");\n+\n+typedef zip<short>::with<unsigned short, unsigned>::type T2; // error: different number of arguments specified \n+                                                             // for Args1 and Args2\n+\n+template<typename... Args> void f(Args...);\n+\n+template<typename... Args> void g(Args... args) \n+{\n+   f(const_cast<const Args*>(&args)...); // okay: ``Args'' and ``args'' are expanded\n+   f(5 ...); // { dg-error \"contains no argument packs\" }\n+   f(args); // { dg-error \"parameter packs not expanded\" }\n+   // { dg-error \"args\" \"\" { target *-*-* } 36 }\n+   f(h(args...) + args...); // okay: first ``args'' expanded within h, second ``args'' expanded within f.\n+}"}, {"sha": "7050256d437630dcdcd1441360e718cf049ddb7f", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex14.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex14.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,23 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+template<class T> class A { /* ... */ };\n+template<class T, class U = T> class B { /* ... */ };\n+template<class... Types> class C { /* ... */ };\n+\n+template<template<class> class P> class X { /* ... */ };\n+template<template<class...> class Q> class Y { /* ... */ };\n+\n+X<A> xA; // okay\n+X<B> xB; // { dg-error \"mismatch\" }\n+// { dg-error \"expected a template\" \"\" { target *-*-* } 11 }\n+// { dg-error \"invalid type\" \"\" { target *-*-* } 11 }\n+X<C> xC; // { dg-error \"mismatch\" }\n+// { dg-error \"expected a template\" \"\" { target *-*-* } 14 }\n+// { dg-error \"invalid type\" \"\" { target *-*-* } 14 }\n+Y<A> yA; // { dg-error \"mismatch\" }\n+// { dg-error \"expected a template\" \"\" { target *-*-* } 17 }\n+// { dg-error \"invalid type\" \"\" { target *-*-* } 17 }\n+Y<B> yB; // { dg-error \"mismatch\" }\n+// { dg-error \"expected a template\" \"\" { target *-*-* } 20 }\n+// { dg-error \"invalid type\" \"\" { target *-*-* } 20 }\n+Y<C> yC; // okay"}, {"sha": "ca5fa27163729603f7883204a6917151b1fb25ab", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex2.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex2.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,8 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<class... Types> struct B { // { dg-error \"declaration of\" }\n+  void f3();\n+  void f4();\n+};\n+\n+template<class... Types> void B<Types...>::f3() { } // OK\n+template<class... Types> void B<Types>::f4() { } // { dg-error \"invalid\" }"}, {"sha": "8b8ca9e312dc619c2736adb4d2149731841d5895", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex3.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex3.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<class X, class Y, class... Z> X f(Y); \n+void g() \n+{ \n+  int i = f<int>(5.6);\n+  int j = f(5.6);         // { dg-error \"no matching\" }\n+  f<void>(f<int, bool>); \n+  f<void>(f<int>);        // { dg-error \"no matching\" }\n+} "}, {"sha": "69866dcb13d7a4f72a3e7c40ba1d5cb91b9e6a2e", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex4.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex4.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<class X, class Y, class Z> X f(Y,Z); \n+template<class... Args> void f2();\n+void g() \n+{ \n+  f<int,const char*,double>(\"aa\",3.0); \n+  f<int,const char*>(\"aa\",3.0); // Z is deduced to be double \n+  f<int>(\"aa\",3.0); // Y is deduced to be char*, and \n+                    // Z is deduced to be double \n+  f(\"aa\",3.0); // { dg-error \"no matching\" }\n+  f2<char, short, int, long>(); // okay\n+} "}, {"sha": "2439a51c5a403e3e162dada5e0d186434c569905", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex5.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex5.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,7 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... Types> void f(Types... values);\n+\n+void g()\n+{\n+  f<int*, float*>(0, 0, 0); // Types is deduced to the sequence int*, float*, int\n+}"}, {"sha": "87b1bf2057655cc44d182e9306485f5add7314f7", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex6.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex6.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,13 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<class...> struct Tuple { };\n+\n+template<class... Types> void f(Types&...);\n+template<class... Types1, class... Types2> void g(Tuple<Types1...>, Tuple<Types2...>);\n+\n+void h(int x, float& y) \n+{\n+  const int z = x;\n+  f(x, y, z); // Types is deduced to int, const int, float\n+  g(Tuple<short, int, long>(), Tuple<float, double>()); // Types1 is deduced to short, int long\n+                                                        // Types2 is deduced to float, double\n+}"}, {"sha": "7ca31f9c67bb96c62ffd3732dccff686bd76037a", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex7.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex7.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,13 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename...> struct Tuple { };\n+template<typename... Types>              char& g(Tuple<Types...>);       // #1\n+template<typename T1, typename... Types> short& g(Tuple<T1, Types...>);   // #2\n+template<typename T1, typename... Types> int& g(Tuple<T1, Types&...>);  // #3\n+\n+void f() {\n+  //  char& x1 = g(Tuple<>());             // calls #1\n+  short& y1 = g(Tuple<int, float>());  // calls #2\n+  //  int& z1 = g(Tuple<int, float&>());   // calls #3\n+  //  int& z2 = g(Tuple<int>());           // calls #3\n+  //  int& z3 = g(Tuple<int>());           // calls #3\n+}"}, {"sha": "03d28b825352a0511ef55c6357b95aebc3eea545", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex8.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex8.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,18 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<class> struct X { static const bool primary = true; };\n+template<class R, class... ArgTypes> struct X<R(int, ArgTypes...)> { \n+  static const bool primary = false;\n+};\n+template<class... Types> struct Y { static const bool primary = true; };\n+template<class T, class... Types> struct Y<T, Types&...> { \n+  static const bool primary = false;\n+};\n+\n+static_assert (X<int>::primary, \"uses primary template\");\n+static_assert (!X<int(int, float, double)>::primary, \n+\t       \"uses partial specialization\");\n+static_assert (X<int(float, int)>::primary, \"uses primary template\");\n+static_assert (Y<>::primary, \"uses primary template\");\n+static_assert (!Y<int&, float&, double&>::primary, \n+\t       \"uses partial specialization\");\n+static_assert (Y<int, float, double>::primary, \"uses primary template\");"}, {"sha": "ec78a7a8e25a7e78787fb64e623560bf00c625ab", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex9.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex9.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,10 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... Args>              char& f(Args... args);         // #1\n+template<typename T1, typename... Args> short& f(T1 a1, Args... args); // #2\n+template<typename T1, typename T2>      int& f(T1 a2, T2 a2);          // #3\n+\n+void g() {\n+  char& x = f();                      // calls #1\n+  short& y = f(1, 2, 3);              // calls #2\n+  int& z = f(1, 2);                   // calls #3\n+}"}, {"sha": "0373efde7c0cf3ba24f2568030feb69253d7cd7e", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-function.C", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-function.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-function.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-function.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,96 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do \"run\" }\n+// A basic implementation of TR1's function using variadic teplates\n+// Contributed by Douglas Gregor <doug.gregor@gmail.com>\n+#include <cassert>\n+\n+template<typename Signature>\n+class function;\n+\n+template<typename R, typename... Args>\n+class invoker_base\n+{\n+ public:\n+  virtual ~invoker_base() { }\n+  virtual R invoke(Args...) = 0;\n+  virtual invoker_base* clone() = 0;\n+};\n+\n+template<typename F, typename R, typename... Args>\n+class functor_invoker : public invoker_base<R, Args...>\n+{\n+ public:\n+  explicit functor_invoker(const F& f) : f(f) { }\n+  R invoke(Args... args) { return f(args...); }\n+  functor_invoker* clone() { return new functor_invoker(f); }\n+\n+ private:\n+  F f;\n+};\n+\n+template<typename R, typename... Args>\n+class function<R (Args...)> {\n+ public:\n+  typedef R result_type;\n+\n+  function() : invoker (0) { }\n+\n+  function(const function& other) : invoker(0) {\n+    if (other.invoker) \n+      invoker = other.invoker->clone();\n+  }\n+\n+  template<typename F>\n+  function(const F& f) : invoker(0) {\n+    invoker = new functor_invoker<F, R, Args...>(f); \n+  }\n+\n+  ~function() {\n+    if (invoker)\n+      delete invoker;\n+  }\n+\n+  function& operator=(const function& other) {\n+    function(other).swap(*this);\n+    return *this;\n+  }\n+\n+  template<typename F>\n+  function& operator=(const F& f) {\n+    function(f).swap(*this);\n+    return *this;\n+  }\n+\n+  void swap(function& other) {\n+    invoker_base<R, Args...>* tmp = invoker;\n+    invoker = other.invoker;\n+    other.invoker = tmp;\n+  }\n+\n+  result_type operator()(Args... args) const {\n+    assert(invoker);\n+    return invoker->invoke(args...);\n+  }\n+\n+ private:\n+  invoker_base<R, Args...>* invoker;\n+};\n+\n+struct plus {\n+  template<typename T> T operator()(T x, T y) { return x + y; }\n+};\n+\n+struct multiplies {\n+  template<typename T> T operator()(T x, T y) { return x * y; }\n+};\n+\n+int main()\n+{\n+  function<int(int, int)> f1 = plus();\n+  assert(f1(3, 5) == 8);\n+\n+  f1 = multiplies();\n+  assert(f1(3, 5) == 15);\n+\n+  return 0;\n+}"}, {"sha": "6e29d3b3d950eccd22ef9c41a0ebabc3a6e52068", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-mem_fn.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-mem_fn.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-mem_fn.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-mem_fn.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do \"run\" }\n+// A basic implementation of TR1's mem_fn using variadic teplates\n+// Contributed by Douglas Gregor <doug.gregor@gmail.com>\n+#include <cassert>\n+\n+template<typename R, typename Class, typename... Args>\n+class Mem_fn\n+{\n+ public:\n+  explicit Mem_fn(R (Class::*pmf)(Args...)) : pmf(pmf) { }\n+\n+  R operator()(Class& object, Args... args)\n+  {\n+    return (object.*pmf)(args...);\n+  }\n+\n+  R operator()(Class* object, Args... args)\n+  {\n+    return (object->*pmf)(args...);\n+  }\n+\n+  R (Class::*pmf)(Args...);\n+};\n+\n+template<typename R, typename Class, typename... Args>  \n+inline Mem_fn<R, Class, Args...>\n+mem_fn(R (Class::* pmf)(Args...))\n+{\n+  return Mem_fn<R, Class, Args...>(pmf);\n+}\n+\n+class X {\n+ public:\n+  int negate(int x) { return -x; }\n+  int plus(int x, int y) { return x + y; }\n+};\n+\n+int main()\n+{\n+  X x;\n+  X* xp = &x;\n+\n+  assert(mem_fn(&X::negate)(x, 17) == -17);\n+  assert(mem_fn(&X::negate)(xp, 17) == -17);\n+  assert(mem_fn(&X::plus)(x, 17, 25) == 42);\n+  assert(mem_fn(&X::plus)(xp, 17, 25) == 42);\n+\n+  return 0;\n+}"}, {"sha": "2c298a132b4c49dcb69d66063fc240788728756a", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-tuple.C", "status": "added", "additions": 294, "deletions": 0, "changes": 294, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-tuple.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-tuple.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-tuple.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,294 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do \"run\" }\n+// An implementation of TR1's <tuple> using variadic teplates\n+// Contributed by Douglas Gregor <doug.gregor@gmail.com>\n+\n+#include <string>\n+#include <cassert>\n+#include <cstring>\n+\n+// Trivial reference_wrapper\n+template<typename T>\n+struct reference_wrapper\n+{\n+  reference_wrapper(T& x) : ptr(&x) { }\n+\n+  operator T&() const { return *ptr; }\n+\n+  T* ptr;\n+};\n+\n+template<typename T> reference_wrapper<T> ref(T& x) { return x; }\n+template<typename T> reference_wrapper<const T> cref(const T& x) { return x; }\n+\n+// Simple type-traits we'll need\n+template<typename T>\n+struct add_reference\n+{\n+  typedef T& type;\n+};\n+\n+template<typename T>\n+struct add_reference<T&>\n+{\n+  typedef T& type;\n+};\n+\n+template<typename T, typename U>\n+struct is_same\n+{\n+  static const bool value = false;\n+};\n+\n+template<typename T>\n+struct is_same<T, T>\n+{\n+  static const bool value = true;\n+};\n+\n+// For creating the constructor parameters of tuple<>\n+template<typename T>\n+struct add_const_reference\n+{\n+  typedef const T& type;\n+};\n+\n+template<typename T>\n+struct add_const_reference<T&>\n+{\n+  typedef T& type;\n+};\n+\n+// 6.1.3 Class template tuple \n+template<typename... Values>\n+class tuple;\n+\n+template<> class tuple<> { };\n+\n+template<typename Head, typename... Tail>\n+class tuple<Head, Tail...> \n+  : private tuple<Tail...>\n+{\n+  typedef tuple<Tail...> inherited;\n+\n+ public:\n+  tuple() { }\n+\n+  // implicit copy-constructor is okay\n+\n+  tuple(typename add_const_reference<Head>::type v, \n+        typename add_const_reference<Tail>::type... vtail)\n+    : m_head(v), inherited(vtail...) { }\n+\n+  template<typename... VValues>\n+  tuple(const tuple<VValues...>& other)\n+    : m_head(other.head()), inherited(other.tail()) { }\n+\n+  template<typename... VValues>\n+  tuple& operator=(const tuple<VValues...>& other)\n+  {\n+    m_head = other.head();\n+    tail() = other.tail();\n+    return *this;\n+  }\n+\n+  typename add_reference<Head>::type       head()       { return m_head; }\n+  typename add_reference<const Head>::type head() const { return m_head; }\n+  inherited&                               tail()       { return *this; }\n+  const inherited&                         tail() const { return *this; }\n+\n+ protected:\n+  Head m_head;\n+};\n+\n+template<typename T>\n+struct make_tuple_result\n+{\n+  typedef T type;\n+};\n+\n+template<typename T>\n+struct make_tuple_result<reference_wrapper<T> >\n+{\n+  typedef T& type;\n+};\n+\n+// 6.1.3.2 Tuple creation functions\n+struct ignore_t { \n+  template<typename T> ignore_t& operator=(const T&) { return *this; }\n+} ignore;\n+\n+template<typename... Values>\n+tuple<typename make_tuple_result<Values>::type...> \n+make_tuple(const Values&... values)\n+{\n+  return tuple<typename make_tuple_result<Values>::type...>(values...);\n+}\n+\n+template<typename... Values>\n+tuple<Values&...> tie(Values&... values)\n+{\n+  return tuple<Values&...>(values...);\n+}\n+\n+// 6.1.3.3 Tuple helper classes\n+template<typename Tuple>\n+struct tuple_size;\n+\n+template<>\n+struct tuple_size<tuple<> >\n+{\n+  static const std::size_t value = 0;\n+};\n+\n+template<typename Head, typename... Tail>\n+struct tuple_size<tuple<Head, Tail...> >\n+{\n+  static const std::size_t value = 1 + tuple_size<tuple<Tail...> >::value;\n+};\n+\n+template<int I, typename Tuple>\n+struct tuple_element;\n+\n+template<int I, typename Head, typename... Tail>\n+struct tuple_element<I, tuple<Head, Tail...> >\n+{\n+  typedef typename tuple_element<I-1, tuple<Tail...> >::type type;\n+};\n+\n+template<typename Head, typename... Tail>\n+struct tuple_element<0, tuple<Head, Tail...> >\n+{\n+  typedef Head type;\n+};\n+\n+// 6.1.3.4 Element access\n+template<int I, typename Tuple>\n+class get_impl;\n+\n+template<int I, typename Head, typename... Values> \n+class get_impl<I, tuple<Head, Values...> >\n+{\n+  typedef typename tuple_element<I-1, tuple<Values...> >::type Element;\n+  typedef typename add_reference<Element>::type RJ;\n+  typedef typename add_const_reference<Element>::type PJ;\n+  typedef get_impl<I-1, tuple<Values...> > Next;\n+\n+ public:\n+  static RJ get(tuple<Head, Values...>& t)       \n+  { return Next::get(t.tail()); }\n+\n+  static PJ get(const tuple<Head, Values...>& t) \n+  { return Next::get(t.tail()); }\n+};\n+\n+template<typename Head, typename... Values> \n+class get_impl<0, tuple<Head, Values...> >\n+{\n+  typedef typename add_reference<Head>::type RJ;\n+  typedef typename add_const_reference<Head>::type PJ;\n+\n+ public:\n+  static RJ get(tuple<Head, Values...>& t)       { return t.head(); }\n+  static PJ get(const tuple<Head, Values...>& t) { return t.head(); }\n+};\n+\n+template<int I, typename... Values>\n+typename add_reference<\n+           typename tuple_element<I, tuple<Values...> >::type\n+         >::type\n+get(tuple<Values...>& t)\n+{\n+  return get_impl<I, tuple<Values...> >::get(t);\n+}\n+\n+template<int I, typename... Values>\n+typename add_const_reference<\n+           typename tuple_element<I, tuple<Values...> >::type\n+         >::type\n+get(const tuple<Values...>& t)\n+{\n+  return get_impl<I, tuple<Values...> >::get(t);\n+}\n+\n+// 6.1.3.5 Relational operators\n+inline bool operator==(const tuple<>&, const tuple<>&) { return true; }\n+\n+template<typename T, typename... TTail, typename U, typename... UTail>\n+bool operator==(const tuple<T, TTail...>& t, const tuple<U, UTail...>& u)\n+{\n+  return t.head() == u.head() && t.tail() == u.tail();\n+}\n+\n+template<typename... TValues, typename... UValues>\n+bool operator!=(const tuple<TValues...>& t, const tuple<UValues...>& u)\n+{\n+  return !(t == u);\n+}\n+\n+inline bool operator<(const tuple<>&, const tuple<>&) { return false; }\n+\n+template<typename T, typename... TTail, typename U, typename... UTail>\n+bool operator<(const tuple<T, TTail...>& t, const tuple<U, UTail...>& u)\n+{\n+  return (t.head() < u.head() || \n+          (!(t.head() < u.head()) && t.tail() < u.tail()));\n+}\n+\n+template<typename... TValues, typename... UValues>\n+bool operator>(const tuple<TValues...>& t, const tuple<UValues...>& u)\n+{\n+  return u < t;\n+}\n+\n+template<typename... TValues, typename... UValues>\n+bool operator<=(const tuple<TValues...>& t, const tuple<UValues...>& u)\n+{\n+  return !(u < t);\n+}\n+\n+template<typename... TValues, typename... UValues>\n+bool operator>=(const tuple<TValues...>& t, const tuple<UValues...>& u)\n+{\n+  return !(t < u);\n+}\n+\n+int a0[tuple_size<tuple<> >::value == 0? 1 : -1];\n+int a1[tuple_size<tuple<int, float, double> >::value == 3? 1 : -1];\n+int a2a[is_same<tuple_element<0, tuple<int, float, double> >::type, int>\n+         ::value? 1 : -1];\n+int a2b[is_same<tuple_element<1, tuple<int, float, double> >::type, float>\n+         ::value? 1 : -1];\n+int a2c[is_same<tuple_element<2, tuple<int, float, double> >::type, double>\n+         ::value? 1 : -1];\n+\n+int main()\n+{\n+  tuple<> t0;\n+  tuple<int> t1(1);\n+  tuple<int, float> t2(1, 3.14159f);\n+  tuple<int, float, const char*> t3a(1, 3.14159f, \"Hello, world!\");\n+  tuple<long, double, std::string> t3b(t3a);\n+  t3b = t3a;\n+  //  t3a = t3b; DPG: triggers an error, as it should.\n+\n+  tuple<int, float, std::string> t3c = \n+    make_tuple(17, 2.718281828, std::string(\"Fun\"));\n+\n+  int seventeen = 17;\n+  double pi = 3.14159;\n+  tuple<int&, double&> seventeen_pi = make_tuple(ref(seventeen), ref(pi));\n+  tuple<int&, const double&> seventeen_pi2 = \n+    make_tuple(ref(seventeen), cref(pi));\n+  tuple<int&, double&> seventeen_pi_tied = tie(seventeen, pi);\n+  assert(get<0>(t3a) == 1);\n+  assert(get<1>(t3a) == 3.14159f);\n+  assert(std::strcmp(get<2>(t3a), \"Hello, world!\") == 0);\n+\n+  assert(t3a == t3b);\n+  assert(!(t3a != t3b));\n+  assert(!(t3a < t3b));\n+  assert(!(t3a > t3b));\n+  assert(t3a <= t3b && t3b <= t3a);\n+  assert(t3a >= t3b && t3b >= t3a);\n+}"}, {"sha": "f87d53ca386dd7adb7e705cc05b6116673cbd977", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic1.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,10 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename...>\n+class tuple;\n+\n+template<typename... Args>\n+class tuple { };\n+\n+template<typename T1, class... Args>\n+class tuple1p { };\n+"}, {"sha": "5f73eba8d6820976c33ef969b4682d98e9c983c2", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic10.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic10.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,22 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename T1, typename T2>\n+struct pair {};\n+\n+template<typename... Args>\n+struct tuple {\n+  static const int value = 0;\n+};\n+\n+template<>\n+struct tuple<pair<int, float> > { };\n+\n+template<typename... Outer>\n+struct X {\n+  template<typename... Inner>\n+  struct Y\n+  {\n+    typedef tuple<pair<Outer, Inner>...> type; // { dg-error \"mismatched argument pack lengths\" }\n+  };\n+};\n+\n+X<int, double>::Y<short, char, double>::type honk; "}, {"sha": "3c27de0fb19615846b837ae5320b80c3245c3e21", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic11.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic11.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,18 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename...> struct count;\n+\n+template<>\n+struct count<> {\n+  static const int value = 0;\n+};\n+\n+template<typename T, typename... Args>\n+struct count<T, Args...> {\n+  static const int value = 1 + count<Args...>::value;\n+};\n+\n+int a0[count<>::value == 0? 1 : -1];\n+int a1[count<char>::value == 1? 1 : -1];\n+int a2[count<char, short>::value == 2? 1 : -1];\n+int a3[count<char, short, int>::value == 3? 1 : -1];\n+int a4[count<char, short, int, long>::value == 4? 1 : -1];"}, {"sha": "30108c99932bcdbd660fd51fe1544eb5558b42b5", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic12.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic12.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// A tuple type\n+template<typename... Args> struct tuple { };\n+\n+// Determine if two types are the same\n+template<typename T, typename U>\n+struct is_same {\n+  static const bool value = false;\n+};\n+\n+template<typename T>\n+struct is_same<T, T> {\n+  static const bool value = true;\n+};\n+\n+// Append 'T' to the end of Tuple\n+template<typename T, typename Tuple>\n+struct append_to_tuple;\n+\n+template<typename T, typename... Args>\n+struct append_to_tuple<T, tuple<Args...> > {\n+  typedef tuple<Args..., T> type;\n+};\n+\n+// Reverse a sequence of arguments (and return the result as a tuple)\n+template<typename... Args> struct reverse;\n+\n+template<typename T, typename... Args>\n+struct reverse<T, Args...> {\n+  typedef typename append_to_tuple<T, typename reverse<Args...>::type>::type\n+    type;\n+};\n+\n+template<>\n+struct reverse<> {\n+  typedef tuple<> type;\n+};\n+\n+int a0[is_same<reverse<>::type, tuple<> >::value? 1 : -1];\n+int a1[is_same<reverse<int>::type, tuple<int> >::value? 1 : -1];\n+int a2[is_same<reverse<char, int>::type, tuple<int, char> >::value? 1 : -1];\n+int a3[is_same<reverse<char, int, long>::type, tuple<long, int, char> >::value? 1 : -1];"}, {"sha": "7794e8a3dc9d9104f1528d04886cbb8cd8241ee8", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic13.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic13.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,19 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... Args> struct tuple1 { };\n+template<typename... Args> struct tuple2 { };\n+\n+template<typename T, typename U>\n+struct same_tuple_args {\n+  static const bool value = false;\n+};\n+\n+template<typename... Args>\n+struct same_tuple_args<tuple1<Args...>, tuple2<Args...> > {\n+  static const bool value = true;\n+};\n+\n+int same0[same_tuple_args<tuple1<>, tuple2<> >::value? 1 : -1];\n+int same1[same_tuple_args<tuple1<int>, tuple2<int> >::value? 1 : -1];\n+int same2[same_tuple_args<tuple1<float, int>, tuple2<float, int> >::value? 1 : -1];\n+int diff0[!same_tuple_args<tuple1<>, tuple2<int> >::value? 1 : -1];\n+int diff1[!same_tuple_args<tuple1<int, float>, tuple2<float, int> >::value? 1 : -1];"}, {"sha": "3c1bb0d6d235b0ebeac96409221bd36703747223", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic14.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic14.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,21 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename R, typename... ArgTypes>\n+struct make_function_type\n+{\n+  typedef R type(ArgTypes...);\n+};\n+\n+template<typename T, typename U>\n+struct is_same {\n+  static const bool value = false;\n+};\n+\n+template<typename T>\n+struct is_same<T, T> {\n+  static const bool value = true;\n+};\n+\n+int a0[is_same<make_function_type<int>::type, int()>::value? 1 : -1];\n+int a1[is_same<make_function_type<int, float>::type, int(float)>::value? 1 : -1];\n+int a2[is_same<make_function_type<int, float>::type, int(float)>::value? 1 : -1];\n+int a3[is_same<make_function_type<int, float, double>::type, int(float, double)>::value? 1 : -1];"}, {"sha": "68786cb8229195ef251b3c1392a4c939980d7271", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic15.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic15.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,21 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename R, typename... ArgTypes>\n+struct make_function_type\n+{\n+  typedef R type(const ArgTypes&...);\n+};\n+\n+template<typename T, typename U>\n+struct is_same {\n+  static const bool value = false;\n+};\n+\n+template<typename T>\n+struct is_same<T, T> {\n+  static const bool value = true;\n+};\n+\n+int a0[is_same<make_function_type<int>::type, int()>::value? 1 : -1];\n+int a1[is_same<make_function_type<int, float>::type, int(const float&)>::value? 1 : -1];\n+int a2[is_same<make_function_type<int, float>::type, int(const float&)>::value? 1 : -1];\n+int a3[is_same<make_function_type<int, float, double>::type, int(const float&, double const&)>::value? 1 : -1];"}, {"sha": "001919d469f1870118c8525363a15284633833b4", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic16.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic16.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,21 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename R, typename... ArgTypes>\n+struct make_function_type\n+{\n+  typedef R type(const ArgTypes&... args);\n+};\n+\n+template<typename T, typename U>\n+struct is_same {\n+  static const bool value = false;\n+};\n+\n+template<typename T>\n+struct is_same<T, T> {\n+  static const bool value = true;\n+};\n+\n+int a0[is_same<make_function_type<int>::type, int()>::value? 1 : -1];\n+int a1[is_same<make_function_type<int, float>::type, int(const float&)>::value? 1 : -1];\n+int a2[is_same<make_function_type<int, float>::type, int(const float&)>::value? 1 : -1];\n+int a3[is_same<make_function_type<int, float, double>::type, int(const float&, double const&)>::value? 1 : -1];"}, {"sha": "986721bbec35df7d6b026628f80e8953cafc2649", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic17.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic17.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,21 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename R, typename... ArgTypes>\n+struct make_function_type\n+{\n+  typedef R type(const ArgTypes&......);\n+};\n+\n+template<typename T, typename U>\n+struct is_same {\n+  static const bool value = false;\n+};\n+\n+template<typename T>\n+struct is_same<T, T> {\n+  static const bool value = true;\n+};\n+\n+int a0[is_same<make_function_type<int>::type, int(...)>::value? 1 : -1];\n+int a1[is_same<make_function_type<int, float>::type, int(const float&...)>::value? 1 : -1];\n+int a2[is_same<make_function_type<int, float>::type, int(const float&,...)>::value? 1 : -1];\n+int a3[is_same<make_function_type<int, float, double>::type, int(const float&, double const&...)>::value? 1 : -1];"}, {"sha": "147ed8e4bfc589f0c605d76bd08c93a2cbaedfbe", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic18.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic18.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename...> class tuple { };\n+\n+template<typename T, template<typename T> class... Metafunctions>\n+struct apply_all\n+{\n+  typedef tuple<typename Metafunctions<T>::type...> type;\n+};\n+\n+template<typename T, typename U>\n+struct is_same {\n+  static const bool value = false;\n+};\n+\n+template<typename T>\n+struct is_same<T, T> {\n+  static const bool value = true;\n+};\n+\n+template<typename T>\n+struct add_pointer {\n+  typedef T* type;\n+};\n+\n+template<typename T>\n+struct add_pointer<T&>\n+{\n+  typedef T& type;\n+};\n+\n+template<typename T>\n+struct add_reference {\n+  typedef T& type;\n+};\n+\n+template<typename T>\n+struct add_reference<T&>\n+{\n+  typedef T& type;\n+};\n+\n+int a0[is_same<apply_all<int>::type,tuple<> >::value? 1 : -1];\n+int a1[is_same<apply_all<int, add_pointer>::type,tuple<int*> >::value? 1 : -1];\n+int a2[is_same<apply_all<int, add_pointer, add_reference>::type,tuple<int*, int&> >::value? 1 : -1];\n+int a3[is_same<apply_all<int&, add_pointer, add_reference>::type,tuple<int&, int&> >::value? 1 : -1];\n+\n+"}, {"sha": "92e7a953aba751e399695b9ad81fd5c9ad489736", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic19.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic19.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,19 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... Args>\n+struct tuple {\n+  static const int value = 0;\n+};\n+\n+template<typename T, template<class T> class... Metafunctions>\n+struct tuple<Metafunctions<T>...> {\n+  static const int value = 1;\n+};\n+\n+template<typename T> struct add_pointer;\n+template<typename T> struct add_reference;\n+\n+int a0[tuple<int, float>::value == 0? 1 : -1];\n+int a1[tuple<add_pointer<int>, add_pointer<float> >::value == 0? 1 : -1];\n+int a2[tuple<>::value == 0? 1 : -1];\n+int a3[tuple<add_pointer<int> >::value == 1? 1 : -1];\n+int a4[tuple<add_pointer<int>, add_reference<int> >::value == 1? 1 : -1];"}, {"sha": "d62a54245e4d912c2a801d5e10bbfd9921cd6a42", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic2.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic2.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,17 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... Args = int> // { dg-error \"default argument\" }\n+class tuple2;\n+\n+template<typename... = int> // { dg-error \"default argument\" }\n+class tuple3;\n+\n+template<typename T1, typename T2, typename... Rest>\n+struct two_or_more {}; // { dg-error \"provided for\" }\n+\n+typedef two_or_more<int> bad; // { dg-error \"2 or more\" }\n+// { dg-error \"invalid type\" \"\" { target *-*-* } 11 }\n+\n+void f()\n+{\n+  two_or_more<int, float> z = 5; // { dg-error \"two_or_more<int, float>\" }\n+}"}, {"sha": "06204c75dd533f0d435f1fa1224e892f3cf2e392", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic20.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic20.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename T> struct add_pointer;\n+template<typename T> struct add_reference;\n+\n+template<template<class T> class... Metafunctions>\n+struct metatuple {\n+  static const int value = 0;\n+};\n+\n+template<>\n+struct metatuple<add_pointer> {\n+  static const int value = 1;\n+};\n+\n+template<template<class T> class Meta>\n+struct metatuple<Meta, Meta> { // { dg-error \"candidates\" }\n+  static const int value = 2;\n+};\n+\n+template<template<class T> class... Metafunctions>\n+struct metatuple<add_pointer, Metafunctions...> { // { dg-error \"\" }\n+  static const int value = 3;\n+};\n+\n+template<template<class T> class First,\n+         template<class T> class... Metafunctions>\n+struct metatuple<First, Metafunctions...> { // { dg-error \"struct\" }\n+  static const int value = 4;\n+};\n+\n+template<template<class T> class First,\n+         template<class T> class Second,\n+         template<class T> class... Metafunctions>\n+struct metatuple<First, Second, Metafunctions...> { // { dg-error \"struct\" }\n+  static const int value = 5;\n+};\n+\n+int a0[metatuple<>::value == 0? 1 : -1];\n+int a1[metatuple<add_pointer>::value == 1? 1 : -1];\n+int a2a[metatuple<add_pointer, add_pointer>::value == 2? 1 : -1]; // { dg-error \"ambiguous\" }\n+int a2b[metatuple<add_reference, add_reference>::value == 2? 1 : -1];\n+int a3[metatuple<add_pointer, add_reference>::value == 3? 1 : -1]; // { dg-error \"ambiguous\" }\n+int a4[metatuple<add_reference>::value == 4? 1 : -1];\n+int a5[metatuple<add_reference, add_pointer>::value == 5? 1 : -1];\n+\n+// { dg-error \"incomplete\" \"\" { target *-*-* } 40 }\n+// { dg-error \"incomplete\" \"\" { target *-*-* } 42 }"}, {"sha": "b65e995b9a1407430b7d2c34bd4dfa07f257da10", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic21.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic21.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,7 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename T, int... Dims>\n+struct array { };\n+\n+array<int> a0;\n+array<int, 1> a1;\n+array<int, 1, 2, 3, 4> a1234;"}, {"sha": "1d26e40d9815776cea2edddefb5bcac85197afbb", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic22.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic22.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,21 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename R, typename... ArgTypes>\n+struct make_function_type\n+{\n+  typedef R type(ArgTypes... args);\n+};\n+\n+template<typename T, typename U>\n+struct is_same {\n+  static const bool value = false;\n+};\n+\n+template<typename T>\n+struct is_same<T, T> {\n+  static const bool value = true;\n+};\n+\n+int a0[is_same<make_function_type<int>::type, int()>::value? 1 : -1];\n+int a1[is_same<make_function_type<int, float>::type, int(float)>::value? 1 : -1];\n+int a2[is_same<make_function_type<int, float>::type, int(float)>::value? 1 : -1];\n+int a3[is_same<make_function_type<int, float, double>::type, int(float, double const)>::value? 1 : -1];"}, {"sha": "43309a1e1f8e762b28e7535465cbde414fd5390c", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic23.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic23.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,25 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename T, int... Dims>\n+struct array { \n+  static const int value = 0;\n+};\n+\n+template<>\n+struct array<int, 17> {\n+  static const int value = 1;\n+};\n+\n+template<int... Dims>\n+struct array<float, 1, Dims...> {\n+  static const int value = 2;\n+};\n+\n+template<typename T, int... Dims>\n+struct array<T, 1, Dims...> {\n+  static const int value = 3;\n+};\n+\n+int a0[array<int>::value == 0? 1 : -1];\n+int a1[array<int, 17>::value == 1? 1 : -1];\n+int a2[array<float, 1, 2, 3>::value == 2? 1 : -1];\n+int a3[array<double, 1, 2, 3>::value == 3? 1 : -1];"}, {"sha": "6ef8e8a77d0911a50812a908932e5c2429d448c2", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic24.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic24.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,6 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename T, T... Values>\n+struct vector_c { };\n+\n+vector_c<int, 17, 42> intvec;\n+vector_c<char, 'a', 'b', 'c'> charvec;"}, {"sha": "6589e7f60af6f5c48d5fb78fe1ff7a5f9a3b9a86", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic25.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic25.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,16 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<int... Values>\n+struct sum;\n+\n+template<>\n+struct sum<> {\n+  static const int value = 0;\n+};\n+\n+template<int Value, int... Values>\n+struct sum<Value, Values...> {\n+  static const int value = Value + sum<Values...>::value;\n+};\n+\n+int a0[sum<>::value == 0? 1 : -1];\n+int a1[sum<1, 2, 3, 4, 5>::value == 15? 1 : -1];"}, {"sha": "7f9f6bc805209584c54535903c4aadbb05e08040", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic26.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic26.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,24 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<template<int, int> class Meta, int Initial, int... Values>\n+struct accumulate {\n+  static const int value = Initial;\n+};\n+\n+template<template<int, int> class Meta, int Initial, int Value, int... Rest>\n+struct accumulate<Meta, Initial, Value, Rest...> {\n+  static const int value = \n+    Meta<Value, accumulate<Meta, Initial, Rest...>::value>::value;\n+};\n+\n+template<int X, int Y>\n+struct sum {\n+  static const int value = X + Y;\n+};\n+\n+template<int X, int Y>\n+struct prod {\n+  static const int value = X * Y;\n+};\n+\n+int a0[accumulate<sum,0,1,2,3,4,5>::value == 15? 1 : -1];\n+int a1[accumulate<prod,1,1,2,3,4,5>::value == 120? 1 : -1];"}, {"sha": "45a897ce2c91cc07cfccf49a362f0b8a9a021f02", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic27.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic27.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,22 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename Signature>\n+struct function_traits;\n+\n+template<typename R, typename... ArgTypes>\n+struct function_traits<R(ArgTypes...)> {\n+  typedef R result_type;\n+};\n+\n+template<typename T, typename U>\n+struct same_type {\n+  static const bool value = false;\n+};\n+\n+template<typename T>\n+struct same_type<T, T> {\n+  static const bool value = true;\n+};\n+\n+int a0[same_type<function_traits<int()>::result_type, int>::value? 1 : -1];\n+int a1[same_type<function_traits<int(float)>::result_type, int>::value? 1 : -1];\n+int a2[same_type<function_traits<int(double, char)>::result_type, int>::value? 1 : -1];"}, {"sha": "167088b494556bebc1c349db4e1f6473db39154a", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic28.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic28.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,25 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename Signature>\n+struct function_traits;\n+\n+template<typename R, typename... ArgTypes>\n+struct function_traits<R(ArgTypes......)> {\n+  typedef R result_type;\n+};\n+\n+template<typename T, typename U>\n+struct same_type {\n+  static const bool value = false;\n+};\n+\n+template<typename T>\n+struct same_type<T, T> {\n+  static const bool value = true;\n+};\n+\n+int a0[same_type<function_traits<int(double, char...)>::result_type, int>::value? 1 : -1];\n+int a1[same_type<function_traits<int(double, char,...)>::result_type, int>::value? 1 : -1];\n+int a2[same_type<function_traits<int(char,...)>::result_type, int>::value? 1 : -1];\n+int a3[same_type<function_traits<int(...)>::result_type, int>::value? 1 : -1];\n+int a4[same_type<function_traits<int(double x, char...)>::result_type, int>::value? 1 : -1];\n+int a5[same_type<function_traits<int(double, char y...)>::result_type, int>::value? 1 : -1];"}, {"sha": "aaed595831d77fd90e8cfc18b065a3c057172e97", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic29.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic29.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,35 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename Signature>\n+struct function_traits;\n+\n+template<typename R, typename... ArgTypes>\n+struct function_traits<R(ArgTypes...)> {\n+  typedef R result_type;\n+};\n+\n+template<typename R, typename Class, typename... ArgTypes>\n+struct function_traits<R (Class::*)(ArgTypes...)> {\n+  typedef R result_type;\n+};\n+\n+template<typename R, typename Class, typename... ArgTypes>\n+struct function_traits<R (Class::*)(ArgTypes...) const> {\n+  typedef R result_type;\n+};\n+\n+template<typename T, typename U>\n+struct same_type {\n+  static const bool value = false;\n+};\n+\n+template<typename T>\n+struct same_type<T, T> {\n+  static const bool value = true;\n+};\n+\n+struct X {};\n+\n+int a0[same_type<function_traits<int (X::*)()>::result_type, int>::value? 1 : -1];\n+int a1[same_type<function_traits<int (X::*)(float)>::result_type, int>::value? 1 : -1];\n+int a2[same_type<function_traits<int (X::*)(double, char)>::result_type, int>::value? 1 : -1];\n+int a3[same_type<function_traits<int (X::*)(double, char) const>::result_type, int>::value? 1 : -1];"}, {"sha": "42ba8ab47eafb004ef384fe7c90c4981ced0c827", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic3.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic3.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,10 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... Args>\n+class tuple {};\n+\n+void f()\n+{\n+  tuple<> x;\n+  tuple<int> y;\n+  tuple<int, float> z;\n+}"}, {"sha": "66cbe9f6272e8b0aece68acb275cf506954a5900", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic30.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic30.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,11 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... T>\n+void eat(T...);\n+\n+void f()\n+{\n+  eat();\n+  eat(1);\n+  eat(1, 2);\n+  eat(17, 3.14159, \"Hello, World!\");\n+}"}, {"sha": "eacf568978a8bc766ce104412e8c905aff105f4d", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic31.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic31.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,11 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... T>\n+void eat(T...) { }\n+\n+void f()\n+{\n+  eat();\n+  eat(1);\n+  eat(1, 2);\n+  eat(17, 3.14159, \"Hello, World!\");\n+}"}, {"sha": "c5bee55ccb7188cca51e6828bc1f68ebfcaf8aea", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic32.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic32.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,11 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... T>\n+void eat(const T&...) { }\n+\n+void f()\n+{\n+  eat();\n+  eat(1);\n+  eat(1, 2);\n+  eat(17, 3.14159, \"Hello, World!\");\n+}"}, {"sha": "5784be887acef84b1b54d2b1c94e22d98113dd17", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic33.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic33.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,16 @@\n+// { dg-options \"-std=gnu++0x\" }\n+void print_all() {}\n+\n+template<typename T, typename... Rest>\n+void print_all(const T& t, const Rest&... rest)\n+{\n+  print_all(rest...);\n+}\n+\n+void f()\n+{\n+  print_all();\n+  print_all(1);\n+  print_all(1, 3.14159);\n+  print_all(\"Hello, World!\", 17, 3.14159);\n+}"}, {"sha": "5eee3f13c62a2e7d57e85db1edc4b130427571ef", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic34.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic34.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,11 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<int I, typename... Args>\n+void get_ith(const Args&... args);\n+\n+void f()\n+{\n+  get_ith<1>(1, 2, 3);\n+  get_ith<1, int>(1, 2.0, 'x');\n+  get_ith<1, int, double>(1, 2.0, 'x');\n+  get_ith<1, int, double, char>(1, 2.0, 'x');\n+}"}, {"sha": "cd6ba2b0a0cc10daff7ffa620407f3d81d81547d", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic35.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic35.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<int I, typename... Args>\n+void get_ith(const Args&... args);\n+\n+void f()\n+{\n+  get_ith<1, float>(1, 2.0, 'x');\n+  get_ith<1, int, double, char, int>(1, 2.0, 'x'); // { dg-error \"no matching function\" }\n+}"}, {"sha": "370d475eb6d44bd865cdc04856d55baa5ab4e6c3", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic36.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic36.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,15 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename T, typename... Args>\n+void f(const T&, const Args&... args)\n+{\n+  f(args); // { dg-error \"packs not expanded\" }\n+}\n+\n+template<typename... Values>\n+struct tuple_base { };\n+\n+template<typename... Values>\n+struct tuple : tuple_base<Values> { }; // { dg-error \"packs not expanded\" }\n+\n+// { dg-error \"args\" \"\" { target *-*-* } 5 }\n+// { dg-error \"Values\" \"\" { target *-*-* } 12 }"}, {"sha": "a6e5f613fcd8d1d0f8b4c23ef6c012bd8eefbdd0", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic37.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic37.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,10 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... Values>\n+struct tuple\n+{\n+  static const __SIZE_TYPE__ length = sizeof...(Values);\n+};\n+\n+int a0[tuple<>::length == 0? 1 : -1];\n+int a1[tuple<int>::length == 1? 1 : -1];\n+int a2[tuple<int, float>::length == 2? 1 : -1];"}, {"sha": "e4ae4a6305d68695d3563cf61b43df0515ea98e3", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic38.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic38.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,6 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<int... Values>\n+struct int_vec {};\n+\n+template<int... Values>\n+struct int_vec<0, (Values+1)...> {}; // { dg-error \"involves template parameter\" }"}, {"sha": "bd656ba85049c65d3366c1b3c3e7213a99338c97", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic39.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic39.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,13 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... Args>\n+struct tuple {};\n+\n+template<typename T, typename... Args>\n+struct tuple<Args..., T> { }; // { dg-error \"end\" }\n+\n+\n+template<int... Values>\n+struct int_vec { };\n+\n+template<int I, int... Values>\n+struct int_vec<Values..., I> { }; // { dg-error \"end\" }"}, {"sha": "6c15a6de92d57b6b4b490fbc1a0bbeedfd0ba803", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic4.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic4.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,15 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+template<typename... Args>\n+class tuple {};\n+\n+void f_none(tuple<>) {}\n+void f_one(tuple<int>) {}\n+void f_two(tuple<int, float>) {}\n+void f_nested(tuple<int, tuple<double, char>, float>) { }\n+\n+\n+// { dg-final { scan-assembler \"_Z6f_none5tupleIE\" } }\n+// { dg-final { scan-assembler \"_Z5f_one5tupleIiE\" } }\n+// { dg-final { scan-assembler \"_Z5f_two5tupleIifE\" } }\n+// { dg-final { scan-assembler \"_Z8f_nested5tupleIiS_IdcEfE\" } }"}, {"sha": "6cc9273a89718969c335ee7ca04acca743761700", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic40.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic40.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,3 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... Values, typename T>\n+struct backward_tuple {}; // { dg-error \"end\" }"}, {"sha": "d209766d13259a3a69a67e088544f980c2774385", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic41.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic41.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic41.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic41.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,3 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... Args>\n+void f(const Args&... args, int oops); // { dg-error \"end\" }"}, {"sha": "4c6c7673d80e3d64e5219a1dec0321308d4d382b", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic42.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic42.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+template<typename... Args>\n+void f(Args...) { }\n+\n+void g()\n+{\n+  f<int*, float*, double*>(0, 0, 0);\n+  f<int*>(0,0,0);\n+}\n+// { dg-final { scan-assembler \"_Z1fIPiPfPdEvU10__variadicT_\" } }\n+// { dg-final { scan-assembler \"_Z1fIPiiiEvU10__variadicT_\" } }"}, {"sha": "fce81ae0dd1a46e9b28410a5a583d0e9d61a145e", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic43.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic43.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic43.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic43.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,8 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... Args>\n+int f(const Args&...);\n+\n+void g()\n+{\n+  int (*fp)(const int&, const float&) = &f;\n+}"}, {"sha": "8452a96cc21ad3e80cc85ae7cd6069b9140986fa", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic44.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic44.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,13 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+template<typename... Args>\n+int f(const Args&...);\n+\n+template<typename T> void g(T) { }\n+\n+void h()\n+{\n+  g(&f<int, float>);\n+}\n+\n+// { dg-final { scan-assembler \"_Z1gIPFiRKiRKfEEvT_\"} }"}, {"sha": "c5a66ab2062b1d286c07cce88a8a08fd362b2fae", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic45.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic45.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic45.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic45.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,10 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... Args>\n+int& f(Args...);\n+\n+template<typename T1, typename T2>\n+float& f(T1, T2);\n+\n+float& g() { \n+  return f(17, 3.14159); \n+}"}, {"sha": "8b81a363bf1f64d73069884940278cf94a704e37", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic46.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic46.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,11 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... Args>\n+int& f(Args&...);\n+\n+template<typename... Args>\n+float& f(const Args&...);\n+\n+int& g(int x, float y)\n+{\n+  return f(x, y);\n+}"}, {"sha": "d80371c0eeea6bbd6fd2ff6e5bbb0838c2833c5e", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic47.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic47.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic47.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic47.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,18 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename T> struct wrap { };\n+\n+template<typename... Args>\n+int& f(const Args&...);\n+\n+template<typename... Args>\n+float& f(const wrap<Args>&...);\n+\n+int& g(int x, float y, double z)\n+{\n+  return f(x, y, z);\n+}\n+\n+float& h(wrap<int> x, wrap<float> y, wrap<double> z)\n+{\n+  return f(x, y, z);\n+}"}, {"sha": "ab3f777f795764c530d8bc55b7ae047890b0aacd", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic48.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic48.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic48.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic48.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,10 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename T, typename... Args>\n+int& f(const T&, Args...);\n+\n+template<typename T>\n+float& f(const T&);\n+\n+float& g() {\n+  return f(17);\n+}"}, {"sha": "7e2215f2c23a5ef4381c43280b7373fe685427b5", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic49.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic49.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic49.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic49.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options \"-std=gnu++0x\" }\n+int& f(...);\n+\n+template<typename... Args>\n+float& f(Args...);\n+\n+float& g() {\n+  return f(17, 3.14159);\n+}"}, {"sha": "d1f333566d882071680f150244557b755fd80c9b", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic5.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic5.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,38 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... Args>\n+struct tuple {\n+  static const int value = 0;\n+};\n+\n+template<>\n+struct tuple<> {\n+  static const int value = 1;\n+};\n+\n+template<>\n+struct tuple<int> {\n+  static const int value = 2;\n+};\n+\n+\n+template<>\n+struct tuple<int, float> {\n+  static const int value = 3;\n+};\n+\n+template<typename T>\n+struct tuple<T, T> {\n+  static const int value = 4;\n+};\n+\n+template<>\n+struct tuple<float, float> {\n+  static const int value = 5;\n+};\n+\n+int a0[tuple<float>::value == 0? 1 : -1];\n+int a1[tuple<>::value == 1? 1 : -1];\n+int a2[tuple<int>::value == 2? 1 : -1];\n+int a3[tuple<int, float>::value == 3? 1 : -1];\n+int a4[tuple<int, int>::value == 4? 1 : -1];\n+int a5[tuple<float, float>::value == 5? 1 : -1];"}, {"sha": "a2c3b7c908f737fdfb5a007a2bfcc34fdee26840", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic50.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic50.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic50.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic50.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options \"-std=gnu++0x\" }\n+int& f(int, double, ...);\n+\n+template<typename... Args>\n+float& f(Args...);\n+\n+float& g() {\n+  return f(17, 3.14159, 3);\n+}"}, {"sha": "e2e2d630a7b247597f068f0736ee0753ddbeddc2", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic51.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic51.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic51.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic51.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,10 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename T1, typename T2>\n+float& f(T1, T2);\n+\n+template<typename... Args>\n+int& f(Args...);\n+\n+float& g() { \n+  return f(17, 3.14159); \n+}"}, {"sha": "12b121fe4ec9bd80b02573e0a7d7b781e371cc9e", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic52.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic52.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic52.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic52.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,7 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename T, T... Values>\n+struct vector_c { };\n+\n+vector_c<int, 1, 2, 3> v1;\n+vector_c<char, 'a', 'b', 'c'> v2;\n+vector_c<long, 1u, 2, 3l> v3;"}, {"sha": "09a3879b42050c58c5dd72afadcec4499763bbfc", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic53.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic53.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic53.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic53.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,17 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename F, typename... BoundArgs>\n+class bound_functor\n+{\n+ public:\n+  typedef typename F::result_type result_type;\n+\n+  template<typename... Args>\n+  typename F::result_type operator()(Args&... args);\n+};\n+\n+template<typename F, typename... BoundArgs>\n+template<typename... Args>\n+typename F::result_type \n+bound_functor<F, BoundArgs...>::operator()(Args&... args)\n+{\n+}"}, {"sha": "db750d7651165f525eb37238a32cdd2b7c7e6682", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic54.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic54.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic54.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic54.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename F, typename... BoundArgs>\n+class bound_functor\n+{\n+ public:\n+  bound_functor();\n+};\n+\n+template<typename F, typename... BoundArgs>\n+bound_functor<F, BoundArgs...>::bound_functor()\n+{\n+}"}, {"sha": "b9c8cffb02710e6d57af30b59e97d94b8bb892ed", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic55.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic55.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename F, typename... BoundArgs>\n+class bound_functor\n+{\n+ public:\n+  bound_functor(const BoundArgs&... bound_args);\n+};\n+\n+template<typename F, typename... BoundArgs>\n+bound_functor<F, BoundArgs...>::bound_functor(const BoundArgs&...)\n+{\n+}"}, {"sha": "77846e513210077a3afc086fa81e36ca664453c0", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic56.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic56.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,19 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... Elements>\n+struct tuple { };\n+\n+template<typename T, typename... Elements>\n+struct tuple<T, Elements...> {\n+  int foo();\n+};\n+\n+template<typename T, typename... Elements>\n+struct tuple<T*, Elements...> {\n+  int bar();\n+};\n+\n+template<typename T, typename... Elements>\n+int tuple<T, Elements...>::foo() { return 0; }\n+\n+template<typename T, typename... Elements>\n+int tuple<T*, Elements...>::bar() { return 0; }"}, {"sha": "9833b1bb359f1f7b750961e9c5ad3b5963d3fc97", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic57.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic57.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic57.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic57.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,16 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename T, int... Dims>\n+struct array { \n+  int foo();\n+};\n+\n+template<typename T>\n+struct array<T, 0> {\n+  int bar();\n+};\n+\n+template<typename T, int... Dims>\n+int array<T, Dims...>::foo() { }\n+\n+template<typename T>\n+int array<T, 0>::bar() { }"}, {"sha": "5da0730b5aaf4fa6f9175d547934498120a60bce", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic58.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic58.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic58.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic58.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,16 @@\n+// { dg-options \"-std=gnu++0x\" }\n+#include <typeinfo>\n+\n+template<typename... Args>\n+void foo(Args...) { }\n+\n+template<typename... Args>\n+void bar(Args... args) {\n+  foo(Args()...);\n+  foo(args = args...);\n+  foo(reinterpret_cast<void*>(&args)...);\n+  foo(const_cast<const Args>(args)...);\n+  foo(static_cast<void*>(&args)...);\n+  foo(dynamic_cast<void*>(&args)...);\n+  foo(typeid(Args)...);\n+}"}, {"sha": "f0730d33baf01d7df8d4faecb79f047b622703b2", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic59.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic59.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic59.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic59.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,4 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<class T, typename... VarArgs>\n+void print(T t, VarArgs args); // { dg-error \"packs not expanded\" }\n+// { dg-error \"VarArgs\" \"\" { target *-*-* } 3 }"}, {"sha": "105550bb9031bfc5fc1a43ad1d82a12cdaa0337f", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic6.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic6.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename ... Args>\n+struct tuple_base {};\n+\n+template<typename ... Args>\n+struct tuple : public tuple_base<Args...>\n+{ \n+};\n+\n+tuple<> zero;\n+tuple<int> one;\n+tuple<float, int> two;"}, {"sha": "29c4e29b8725f9de23aa7fa0951dff0137c4aab0", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic60.C", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic60.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic60.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic60.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1 @@\n+template<typename... Args> class tuple; // { dg-warning \"variadic templates\" }"}, {"sha": "487f78bc07a67bd7db5f16c610398b4f1b33aa1e", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic61.C", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic61.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic61.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic61.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,2 @@\n+// { dg-options \"-pedantic\" }\n+template<typename... Args> class tuple; // { dg-warning \"variadic templates\" }"}, {"sha": "dfa41f7391504aba7422aad383628dd80aadf9f2", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic62.C", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic62.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic62.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic62.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,2 @@\n+// { dg-options \"-pedantic-errors\" }\n+template<typename... Args> class tuple; // { dg-error \"variadic templates\" }"}, {"sha": "359def1cd10e0d6e2b5d40399ba043fd6a42efdc", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic63.C", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic63.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic63.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic63.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,2 @@\n+// { dg-options \"-std=gnu++0x -pedantic\" }\n+template<typename... Args> class tuple;"}, {"sha": "c9212e2e9599254d2fd9a3c0d8964362443a88ad", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic64.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic64.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic64.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic64.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,19 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<int... Indexes>\n+  struct _Index_tuple { };\n+\n+template<int _Num, typename _Tuple = _Index_tuple<> >\n+struct _Build_index_tuple;\n+\n+template<int _Num, int... _Indexes> \n+struct _Build_index_tuple<_Num, _Index_tuple<_Indexes...> >\n+  : _Build_index_tuple<_Num - 1, \n+                       _Index_tuple<_Indexes..., sizeof...(_Indexes)> >\n+{\n+};\n+\n+template<int... _Indexes>\n+struct _Build_index_tuple<0, _Index_tuple<_Indexes...> >\n+{\n+  typedef _Index_tuple<_Indexes...> __type;\n+};"}, {"sha": "6379da83f11e1204b58b14dadef94370c4855404", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic65.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic65.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic65.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic65.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,8 @@\n+// { dg-options \"-std=gnu++0x\" }\n+struct unused;\n+template<typename T1 = unused, typename T2 = unused, typename T3 = unused,\n+         typename T4 = unused, typename T5 = unused, typename T6 = unused>\n+struct tuple {};\n+\n+template<typename... Args>\n+void foo(tuple<Args...>) { } // { dg-error \"cannot expand\" }"}, {"sha": "5c31ae06fd4f1ba1d251a496c054dcff77d68c88", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic66.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic66.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic66.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic66.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+template<typename Result, typename Functor, typename... ArgTypes>\n+Result bind(Functor, ArgTypes...) { }\n+\n+void f()\n+{\n+  bind<int>(17, 20, 22);\n+}"}, {"sha": "e496bfc176c9bbd90034c862fa5202e3b31ad68f", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic67.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic67.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic67.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic67.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,24 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... Elements> struct tuple {};\n+\n+template<typename... Args>\n+struct nested\n+{\n+  typedef tuple<tuple<Args, Args...>...> type;\n+};\n+\n+template<typename T, typename U>\n+struct is_same\n+{\n+  static const bool value = false;\n+};\n+\n+template<typename T>\n+struct is_same<T, T>\n+{\n+  static const bool value = true;\n+};\n+\n+int a0[is_same<nested<int, float>::type, \n+                      tuple<tuple<int, int, float>, \n+                            tuple<float, int, float> > >::value? 1 : -1];"}, {"sha": "53d8f2d6d0c9bf1bd21cdb3460856dc0aa8720b0", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic68.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic68.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic68.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic68.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do \"run\" }\n+// { dg-options \"-std=gnu++0x\" }\n+extern \"C\" void abort();\n+\n+template<typename T, T... Values>\n+void f(T* expected_values, int n)\n+{\n+  if (sizeof...(Values) != n)\n+    abort ();\n+\n+  T values[] = { Values... };\n+  for (int i = 0; i < n; ++i)\n+    if (values[i] != expected_values[i])\n+      abort();\n+}\n+\n+int main()\n+{\n+  int test_arr1[3] = { 1, 2, 3 };\n+  f<int, 1, 2, 3>(test_arr1, 3);\n+\n+  return 0;\n+}"}, {"sha": "5fe9a1950ff4912202dae96b93c4c840883409c8", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic69.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic69.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic69.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic69.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,34 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename T>\n+struct stored_value\n+{\n+  explicit stored_value() : value() { }\n+\n+  explicit stored_value(const T& value) : value(value) { }\n+\n+  stored_value(int, const T& value) : value(value) { }\n+\n+  T value;\n+};\n+\n+template<typename... Values>\n+struct myclass : public stored_value<Values>...\n+{\n+  myclass() { }\n+\n+  explicit myclass(const Values&... values)\n+    : stored_value<Values>(values)... { }\n+\n+  explicit myclass(int x, const Values&... values)\n+    : stored_value<Values>(x, values)... { }\n+\n+};\n+\n+void f()\n+{\n+  int i;\n+  float f;\n+  myclass<int*, float*> ifp1;\n+  myclass<int*, float*> ifp2(&i, &f);\n+  myclass<int*, float*> ifp3(1, &i, &f);\n+}"}, {"sha": "3ba37bfb66eefb89f8922b1e49f3fce24ceef5c1", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic7.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic7.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... Args>\n+struct tuple_base {\n+  static const int value = 0;\n+};\n+\n+template<>\n+struct tuple_base<int> {\n+  static const int value = 1;\n+};\n+\n+template<>\n+struct tuple_base<int, float> {\n+  static const int value = 2;\n+};\n+\n+template<>\n+struct tuple_base<float, int> {\n+  static const int value = 3;\n+};\n+\n+template<typename... Args>\n+struct int_tuple : tuple_base<int, Args...> { };\n+\n+template<typename... Args>\n+struct tuple_int : tuple_base<Args..., int> { };\n+\n+int a0a[int_tuple<int>::value == 0? 1 : -1];\n+int a0b[int_tuple<int>::value == 0? 1 : -1];\n+int a1a[int_tuple<>::value == 1? 1 : -1];\n+int a1b[tuple_int<>::value == 1? 1 : -1];\n+int a2[int_tuple<float>::value == 2? 1 : -1];\n+int a3[tuple_int<float>::value == 3? 1 : -1];"}, {"sha": "0bc8e824cd46a59c44f22e17a1c4fa257835487a", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic70.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic70.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic70.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic70.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do \"run\" }\n+// { dg-options \"-std=gnu++0x\" }\n+template <typename T, T... Args> struct bomb;\n+\n+template <typename T>\n+struct bomb<T> {\n+ static const T value = 0;\n+};\n+\n+template <typename T, T v, T... Args>\n+struct bomb<T, v, Args...> {\n+ static const T value = v + bomb<T, Args...>::value;\n+};\n+\n+extern \"C\" void abort();\n+\n+int main() {\n+  bomb<int, 1, 2, 3, 4> b;\n+  if (b.value != 10)\n+    abort();\n+  return 0;\n+}"}, {"sha": "d4219dace83109c03d710b83fabcf9640c35a365", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic71.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic71.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic71.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic71.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename...> struct list {};\n+\n+template<typename Sequence, typename Head>\n+struct push_front;\n+\n+template<typename... Elements, typename Head>\n+struct push_front<list<Elements...>, Head> {\n+  typedef list<Head, Elements> type; // { dg-error \"parameter packs not expanded\" }\n+};\n+\n+// { dg-error \"Elements\" \"\" { target *-*-* } 9 }"}, {"sha": "b1a620d53861cbc07e3e18490971dbbb897fc3e1", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic72.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic72.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic72.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic72.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,21 @@\n+// { dg-options \"-std=gnu++0x\" }\n+struct A {};\n+struct B {};\n+struct C {};\n+\n+template<typename... Mixins>\n+struct mixed_up : public Mixins...\n+{\n+};\n+\n+void fA(A);\n+void fB(B);\n+void fC(C);\n+\n+void g()\n+{\n+  mixed_up<A, B, C> m;\n+  fA(m);\n+  fB(m);\n+  fC(m);\n+}"}, {"sha": "7bff85b50374cdd2aa24832619614bc1d711fdfe", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic73.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic73.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic73.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic73.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do \"run\" }\n+// { dg-options \"-std=gnu++0x\" }\n+struct A {};\n+struct B {};\n+struct C {};\n+\n+template<typename... Exceptions> void f(int idx) throw(Exceptions...) {\n+  if (idx == 0) throw A();\n+  else if (idx == 1) throw B();\n+  else if (idx == 2) throw C();\n+}\n+\n+extern \"C\" void abort();\n+\n+int main()\n+{\n+  try {\n+    f<A, B, C>(0);\n+    abort();\n+  } catch (A) {\n+  }\n+  try {\n+    f<A, B, C>(1);\n+    abort();\n+  } catch (B) {\n+  }\n+  try {\n+    f<A, B, C>(2);\n+    abort();\n+  } catch (C) {\n+  }\n+  return 0;\n+}"}, {"sha": "19b6b11d8e2f03df6e621108c970fca7baef1ca4", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic74.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic74.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic74.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic74.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,26 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template <class... Types> class A\n+{\n+public:\n+  template <Types... Values> class X { /* ... */ }; // { dg-error \"not a valid type for a template constant parameter\" }\n+};\n+\n+template<class... Types> class B\n+{\n+public:\n+  template <Types*... Values> class X { \n+    typename A<Types*...>::template X<Values...> foo;\n+  };\n+};\n+\n+int i;\n+float f;\n+\n+A<int*, float*>::X<&i, &f> apple1;\n+B<int, float>::X<&i, &f> banana1;\n+\n+A<int*, float*>::X<&i> apple2; // { dg-error \"wrong number of template arguments\" }\n+// { dg-error \"invalid type\" \"\" { target *-*-* } 22 }\n+A<int*, float*>::X<&i, &f, &f> apple3; // { dg-error \"wrong number of template arguments\" }\n+// { dg-error \"invalid type\" \"\" { target *-*-* } 24 }\n+A<int, float> apple4;"}, {"sha": "f57f8b3ef475e08a3ffd473a001361e2158944eb", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic75.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic75.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic75.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic75.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+template<typename...> struct tuple { };\n+\n+template<template<typename T> class Meta, typename... Values>\n+struct apply_all\n+{\n+  typedef tuple<typename Meta<Values>::type...> type;\n+};\n+\n+template<typename T, typename U>\n+struct is_same {\n+  static const bool value = false;\n+};\n+\n+template<typename T>\n+struct is_same<T, T> {\n+  static const bool value = true;\n+};\n+\n+template<typename T>\n+struct add_reference {\n+  typedef T& type;\n+};\n+\n+template<typename T>\n+struct add_reference<T&> {\n+  typedef T& type;\n+};\n+\n+static_assert(is_same<apply_all<add_reference, int, int&, float>::type,\n+ \t                        tuple<int&, int&, float&> >::value, \n+\t      \"check apply\");"}, {"sha": "c3a1340cf264230fdcdeaa513482bbc01dc97011", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic8.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic8.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,23 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename... Args>\n+struct tuple_base {\n+  static const int value = 0;\n+};\n+\n+template<>\n+struct tuple_base<int*>\n+{\n+  static const int value = 1;\n+};\n+\n+template<typename T>\n+struct tuple_base<T*>\n+{\n+  static const int value = 2;\n+};\n+\n+template<typename... Args>\n+struct tuple_of_pointers : tuple_base<Args*...> { };\n+\n+int a1[tuple_of_pointers<int>::value == 1? 1 : -1];\n+int a2[tuple_of_pointers<float>::value == 2? 1 : -1];"}, {"sha": "c5db6af6a89529266760982a8cda4e08933a0f33", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic9.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a85c8dd4854845630569bbec6437170c3bc246/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic9.C?ref=d6a85c8dd4854845630569bbec6437170c3bc246", "patch": "@@ -0,0 +1,38 @@\n+// { dg-options \"-std=gnu++0x\" }\n+template<typename T1, typename T2>\n+struct pair {};\n+\n+template<typename... Args>\n+struct tuple {\n+  static const int value = 0;\n+};\n+\n+template<>\n+struct tuple<pair<int, float> > {\n+  static const int value = 1;\n+};\n+\n+template<typename U>\n+struct tuple<pair<int, U> > {\n+  static const int value = 2;\n+};\n+\n+template<typename T, typename U>\n+struct tuple<pair<T, U>, pair<T, U> > {\n+  static const int value = 3;\n+};\n+\n+\n+template<typename... Outer>\n+struct X {\n+  template<typename... Inner>\n+  struct Y\n+  {\n+    typedef tuple<pair<Outer, Inner>...> type;\n+  };\n+};\n+\n+int a0[X<int, double>::Y<short, char>::type::value == 0? 1 : -1];\n+int a1[X<int>::Y<float>::type::value == 1? 1 : -1];\n+int a2[X<int>::Y<double>::type::value == 2? 1 : -1];\n+int a3[X<int, int>::Y<double, double>::type::value == 3? 1 : -1];"}]}