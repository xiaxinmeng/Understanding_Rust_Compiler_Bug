{"sha": "da98e3b126ee9976c24a1e64b99219b3444b4873", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE5OGUzYjEyNmVlOTk3NmMyNGExZTY0Yjk5MjE5YjM0NDRiNDg3Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-08-01T08:32:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-08-01T08:32:37Z"}, "message": "re PR tree-optimization/81588 (Wrong code at -O2)\n\n\tPR tree-optimization/81588\n\t* tree-ssa-reassoc.c (optimize_range_tests_var_bound): If\n\tranges[i].in_p, invert comparison code ccode.  For >/>=,\n\tswap rhs1 and rhs2 and comparison code unconditionally,\n\tfor </<= don't do that.  Don't swap rhs1/rhs2 again if\n\tranges[i].in_p, instead invert comparison code ccode if\n\topcode or oe->rank is BIT_IOR_EXPR.\n\n\t* gcc.dg/tree-ssa/pr81588.c: New test.\n\t* gcc.dg/pr81588.c: New test.\n\t* gcc.c-torture/execute/pr81588.c: New test.\n\nFrom-SVN: r250760", "tree": {"sha": "96a9392946ef93061a405cb399b0b97f0c17b674", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96a9392946ef93061a405cb399b0b97f0c17b674"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da98e3b126ee9976c24a1e64b99219b3444b4873", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da98e3b126ee9976c24a1e64b99219b3444b4873", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da98e3b126ee9976c24a1e64b99219b3444b4873", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da98e3b126ee9976c24a1e64b99219b3444b4873/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff03930a11f3a996e512ed3613eedc1b50ac5b30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff03930a11f3a996e512ed3613eedc1b50ac5b30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff03930a11f3a996e512ed3613eedc1b50ac5b30"}], "stats": {"total": 133, "additions": 124, "deletions": 9}, "files": [{"sha": "ee6fcd5794e6f122532067c6ecf827aaba176cbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da98e3b126ee9976c24a1e64b99219b3444b4873/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da98e3b126ee9976c24a1e64b99219b3444b4873/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da98e3b126ee9976c24a1e64b99219b3444b4873", "patch": "@@ -1,5 +1,13 @@\n 2017-08-01  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/81588\n+\t* tree-ssa-reassoc.c (optimize_range_tests_var_bound): If\n+\tranges[i].in_p, invert comparison code ccode.  For >/>=,\n+\tswap rhs1 and rhs2 and comparison code unconditionally,\n+\tfor </<= don't do that.  Don't swap rhs1/rhs2 again if\n+\tranges[i].in_p, instead invert comparison code ccode if\n+\topcode or oe->rank is BIT_IOR_EXPR.\n+\n \tPR target/80846\n \t* optabs.def (vec_extract_optab, vec_init_optab): Change from\n \ta direct optab to conversion optab."}, {"sha": "5d05b3b695bec63b062e58e906e616cce51a59f3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da98e3b126ee9976c24a1e64b99219b3444b4873/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da98e3b126ee9976c24a1e64b99219b3444b4873/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da98e3b126ee9976c24a1e64b99219b3444b4873", "patch": "@@ -1,3 +1,10 @@\n+2017-08-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/81588\n+\t* gcc.dg/tree-ssa/pr81588.c: New test.\n+\t* gcc.dg/pr81588.c: New test.\n+\t* gcc.c-torture/execute/pr81588.c: New test.\n+\n 2017-08-01  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/81297"}, {"sha": "b8f84b3e18c42075205fe8aaaaf9777b3662ff44", "filename": "gcc/testsuite/gcc.c-torture/execute/pr81588.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da98e3b126ee9976c24a1e64b99219b3444b4873/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr81588.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da98e3b126ee9976c24a1e64b99219b3444b4873/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr81588.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr81588.c?ref=da98e3b126ee9976c24a1e64b99219b3444b4873", "patch": "@@ -0,0 +1,45 @@\n+/* PR tree-optimization/81588 */\n+\n+__attribute__((noinline, noclone)) int\n+bar (int x)\n+{\n+  __asm volatile (\"\" : : \"g\" (x) : \"memory\");\n+}\n+\n+__attribute__((noinline, noclone)) int\n+foo (unsigned x, long long y)\n+{\n+  if (y < 0)\n+    return 0;\n+  if (y < (long long) (4 * x))\n+    {\n+      bar (y);\n+      return 1;\n+    }\n+  return 0;\n+}     \n+\n+int\n+main ()\n+{\n+  volatile unsigned x = 10;\n+  volatile long long y = -10000;\n+  if (foo (x, y) != 0)\n+    __builtin_abort ();\n+  y = -1;\n+  if (foo (x, y) != 0)\n+    __builtin_abort ();\n+  y = 0;\n+  if (foo (x, y) != 1)\n+    __builtin_abort ();\n+  y = 39;\n+  if (foo (x, y) != 1)\n+    __builtin_abort ();\n+  y = 40;\n+  if (foo (x, y) != 0)\n+    __builtin_abort ();\n+  y = 10000;\n+  if (foo (x, y) != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "4e83607f2a81f394e7ad0f0c8e65b52d4bfe3a58", "filename": "gcc/testsuite/gcc.dg/pr81588.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da98e3b126ee9976c24a1e64b99219b3444b4873/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81588.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da98e3b126ee9976c24a1e64b99219b3444b4873/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81588.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81588.c?ref=da98e3b126ee9976c24a1e64b99219b3444b4873", "patch": "@@ -0,0 +1,26 @@\n+/* PR tree-optimization/81588 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+long long int a = 5011877430933453486LL, c = 1;\n+unsigned short b = 24847;\n+\n+#include \"tree-ssa/pr81588.c\"\n+\n+int\n+main ()\n+{\n+  foo ();\n+  if (c != 0)\n+    __builtin_abort ();\n+  a = 24846;\n+  c = 1;\n+  foo ();\n+  if (c != 1)\n+    __builtin_abort ();\n+  a = -5;\n+  foo ();\n+  if (c != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "2709abd89a18486cf219f9e3972a64a936995d8c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr81588.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da98e3b126ee9976c24a1e64b99219b3444b4873/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr81588.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da98e3b126ee9976c24a1e64b99219b3444b4873/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr81588.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr81588.c?ref=da98e3b126ee9976c24a1e64b99219b3444b4873", "patch": "@@ -0,0 +1,15 @@\n+/* PR tree-optimization/81588 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-reassoc1-details\" } */\n+ \t\n+extern long long int a, c;\n+extern unsigned short b;\n+\n+/* { dg-final { scan-tree-dump-times \"Optimizing range test \\[^\\n\\r]* and comparison\" 1 \"reassoc1\" } } */\n+\n+__attribute__((noinline, noclone)) void\n+foo (void)\n+{\n+  if ((b > a) != (1 + (a < 0)))\n+    c = 0;\n+}"}, {"sha": "b4fe488e79776894b2f634edebff8ec2f6ee640d", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da98e3b126ee9976c24a1e64b99219b3444b4873/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da98e3b126ee9976c24a1e64b99219b3444b4873/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=da98e3b126ee9976c24a1e64b99219b3444b4873", "patch": "@@ -2958,17 +2958,26 @@ optimize_range_tests_var_bound (enum tree_code opcode, int first, int length,\n \t{\n \tcase GT_EXPR:\n \tcase GE_EXPR:\n-\t  if (!ranges[i].in_p)\n-\t    std::swap (rhs1, rhs2);\n+\tcase LT_EXPR:\n+\tcase LE_EXPR:\n+\t  break;\n+\tdefault:\n+\t  continue;\n+\t}\n+      if (ranges[i].in_p)\n+\tccode = invert_tree_comparison (ccode, false);\n+      switch (ccode)\n+\t{\n+\tcase GT_EXPR:\n+\tcase GE_EXPR:\n+\t  std::swap (rhs1, rhs2);\n \t  ccode = swap_tree_comparison (ccode);\n \t  break;\n \tcase LT_EXPR:\n \tcase LE_EXPR:\n-\t  if (ranges[i].in_p)\n-\t    std::swap (rhs1, rhs2);\n \t  break;\n \tdefault:\n-\t  continue;\n+\t  gcc_unreachable ();\n \t}\n \n       int *idx = map->get (rhs1);\n@@ -3015,8 +3024,14 @@ optimize_range_tests_var_bound (enum tree_code opcode, int first, int length,\n \t  fprintf (dump_file, \"\\n\");\n \t}\n \n-      if (ranges[i].in_p)\n-\tstd::swap (rhs1, rhs2);\n+      operand_entry *oe = (*ops)[ranges[i].idx];\n+      ranges[i].in_p = 0;\n+      if (opcode == BIT_IOR_EXPR\n+\t  || (opcode == ERROR_MARK && oe->rank == BIT_IOR_EXPR))\n+\t{\n+\t  ranges[i].in_p = 1;\n+\t  ccode = invert_tree_comparison (ccode, false);\n+\t}\n \n       unsigned int uid = gimple_uid (stmt);\n       gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n@@ -3043,7 +3058,6 @@ optimize_range_tests_var_bound (enum tree_code opcode, int first, int length,\n \t}\n       else\n \t{\n-\t  operand_entry *oe = (*ops)[ranges[i].idx];\n \t  tree ctype = oe->op ? TREE_TYPE (oe->op) : boolean_type_node;\n \t  if (!INTEGRAL_TYPE_P (ctype)\n \t      || (TREE_CODE (ctype) != BOOLEAN_TYPE\n@@ -3065,7 +3079,7 @@ optimize_range_tests_var_bound (enum tree_code opcode, int first, int length,\n \t  ranges[i].high = ranges[i].low;\n \t}\n       ranges[i].strict_overflow_p = false;\n-      operand_entry *oe = (*ops)[ranges[*idx].idx];\n+      oe = (*ops)[ranges[*idx].idx];\n       /* Now change all the other range test immediate uses, so that\n \t those tests will be optimized away.  */\n       if (opcode == ERROR_MARK)"}]}