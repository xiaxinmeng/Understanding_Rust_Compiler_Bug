{"sha": "3f85ff833a4055ef045d27e70ea2a4afc6bfcd39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y4NWZmODMzYTQwNTVlZjA0NWQyN2U3MGVhMmE0YWZjNmJmY2QzOQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-10-30T12:03:12Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-10-30T12:03:12Z"}, "message": "Use const_tree more in IPA ICF.\n\n2019-10-30  Martin Liska  <mliska@suse.cz>\n\n\t* ipa-icf-gimple.c (func_checker::compare_ssa_name): Use\n\tconst_tree as function argument.\n\t(func_checker::compare_decl): Likewise.\n\t(func_checker::operand_equal_p): Likewise.\n\t(func_checker::compare_variable_decl): Likewise.\n\t(func_checker::parse_labels): Likewise.\n\t* ipa-icf-gimple.h: Likewise.\n\nFrom-SVN: r277619", "tree": {"sha": "7c81b81e72d4bceff1bb0bf4f8b7318afdcefc79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c81b81e72d4bceff1bb0bf4f8b7318afdcefc79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f85ff833a4055ef045d27e70ea2a4afc6bfcd39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f85ff833a4055ef045d27e70ea2a4afc6bfcd39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f85ff833a4055ef045d27e70ea2a4afc6bfcd39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f85ff833a4055ef045d27e70ea2a4afc6bfcd39/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fc0e67aaa02a6d0cc6265d1188ca619683b8d806", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc0e67aaa02a6d0cc6265d1188ca619683b8d806", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc0e67aaa02a6d0cc6265d1188ca619683b8d806"}], "stats": {"total": 45, "additions": 26, "deletions": 19}, "files": [{"sha": "eac83494c5f6e78734def264ff7254827116aee4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f85ff833a4055ef045d27e70ea2a4afc6bfcd39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f85ff833a4055ef045d27e70ea2a4afc6bfcd39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f85ff833a4055ef045d27e70ea2a4afc6bfcd39", "patch": "@@ -1,3 +1,13 @@\n+2019-10-30  Martin Liska  <mliska@suse.cz>\n+\n+\t* ipa-icf-gimple.c (func_checker::compare_ssa_name): Use\n+\tconst_tree as function argument.\n+\t(func_checker::compare_decl): Likewise.\n+\t(func_checker::operand_equal_p): Likewise.\n+\t(func_checker::compare_variable_decl): Likewise.\n+\t(func_checker::parse_labels): Likewise.\n+\t* ipa-icf-gimple.h: Likewise.\n+\n 2019-10-30  Martin Liska  <mliska@suse.cz>\n \n \t* ipa-icf-gimple.c (func_checker::compatible_types_p):"}, {"sha": "990ee04603593ce4ad770366b355a67ce2ff2dda", "filename": "gcc/ipa-icf-gimple.c", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f85ff833a4055ef045d27e70ea2a4afc6bfcd39/gcc%2Fipa-icf-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f85ff833a4055ef045d27e70ea2a4afc6bfcd39/gcc%2Fipa-icf-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf-gimple.c?ref=3f85ff833a4055ef045d27e70ea2a4afc6bfcd39", "patch": "@@ -85,7 +85,7 @@ func_checker::~func_checker ()\n /* Verifies that trees T1 and T2 are equivalent from perspective of ICF.  */\n \n bool\n-func_checker::compare_ssa_name (tree t1, tree t2)\n+func_checker::compare_ssa_name (const_tree t1, const_tree t2)\n {\n   gcc_assert (TREE_CODE (t1) == SSA_NAME);\n   gcc_assert (TREE_CODE (t2) == SSA_NAME);\n@@ -139,7 +139,7 @@ func_checker::compare_edge (edge e1, edge e2)\n    come from functions FUNC1 and FUNC2.  */\n \n bool\n-func_checker::compare_decl (tree t1, tree t2)\n+func_checker::compare_decl (const_tree t1, const_tree t2)\n {\n   if (!auto_var_in_fn_p (t1, m_source_func_decl)\n       || !auto_var_in_fn_p (t2, m_target_func_decl))\n@@ -154,7 +154,7 @@ func_checker::compare_decl (tree t1, tree t2)\n     return return_false ();\n \n   bool existed_p;\n-  tree &slot = m_decl_map.get_or_insert (t1, &existed_p);\n+  const_tree &slot = m_decl_map.get_or_insert (t1, &existed_p);\n   if (existed_p)\n     return return_with_debug (slot == t2);\n   else\n@@ -258,31 +258,28 @@ func_checker::operand_equal_p (const_tree t1, const_tree t2,\n   if (TREE_CODE (t1) != TREE_CODE (t2))\n     return return_false ();\n \n-  tree tree1 = (tree)const_cast<tree> (t1);\n-  tree tree2 = (tree)const_cast<tree> (t2);\n-\n   switch (TREE_CODE (t1))\n     {\n     case FUNCTION_DECL:\n       /* All function decls are in the symbol table and known to match\n \t before we start comparing bodies.  */\n       return true;\n     case VAR_DECL:\n-      return return_with_debug (compare_variable_decl (tree1, tree2));\n+      return return_with_debug (compare_variable_decl (t1, t2));\n     case LABEL_DECL:\n       {\n-\tint *bb1 = m_label_bb_map.get (tree1);\n-\tint *bb2 = m_label_bb_map.get (tree2);\n+\tint *bb1 = m_label_bb_map.get (t1);\n+\tint *bb2 = m_label_bb_map.get (t2);\n \t/* Labels can point to another function (non-local GOTOs).  */\n \treturn return_with_debug (bb1 != NULL && bb2 != NULL && *bb1 == *bb2);\n       }\n \n     case PARM_DECL:\n     case RESULT_DECL:\n     case CONST_DECL:\n-      return compare_decl (tree1, tree2);\n+      return compare_decl (t1, t2);\n     case SSA_NAME:\n-      return compare_ssa_name (tree1, tree2);\n+      return compare_ssa_name (t1, t2);\n     default:\n       break;\n     }\n@@ -342,7 +339,7 @@ func_checker::compare_asm_inputs_outputs (tree t1, tree t2)\n /* Verifies that trees T1 and T2 do correspond.  */\n \n bool\n-func_checker::compare_variable_decl (tree t1, tree t2)\n+func_checker::compare_variable_decl (const_tree t1, const_tree t2)\n {\n   bool ret = false;\n \n@@ -356,7 +353,7 @@ func_checker::compare_variable_decl (tree t1, tree t2)\n     return return_false_with_msg (\"DECL_HARD_REGISTER are different\");\n \n   if (DECL_HARD_REGISTER (t1)\n-      && DECL_ASSEMBLER_NAME (t1) != DECL_ASSEMBLER_NAME (t2))\n+      && DECL_ASSEMBLER_NAME_RAW (t1) != DECL_ASSEMBLER_NAME_RAW (t2))\n     return return_false_with_msg (\"HARD REGISTERS are different\");\n \n   /* Symbol table variables are known to match before we start comparing\n@@ -416,7 +413,7 @@ func_checker::parse_labels (sem_bb *bb)\n \n       if (glabel *label_stmt = dyn_cast <glabel *> (stmt))\n \t{\n-\t  tree t = gimple_label_label (label_stmt);\n+\t  const_tree t = gimple_label_label (label_stmt);\n \t  gcc_assert (TREE_CODE (t) == LABEL_DECL);\n \n \t  m_label_bb_map.put (t, bb->bb->index);"}, {"sha": "25dff31394b81a3c1dda2535de0a2c15a8497456", "filename": "gcc/ipa-icf-gimple.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f85ff833a4055ef045d27e70ea2a4afc6bfcd39/gcc%2Fipa-icf-gimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f85ff833a4055ef045d27e70ea2a4afc6bfcd39/gcc%2Fipa-icf-gimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf-gimple.h?ref=3f85ff833a4055ef045d27e70ea2a4afc6bfcd39", "patch": "@@ -144,7 +144,7 @@ class func_checker : operand_compare\n   bool compare_bb (sem_bb *bb1, sem_bb *bb2);\n \n   /* Verifies that trees T1 and T2 are equivalent from perspective of ICF.  */\n-  bool compare_ssa_name (tree t1, tree t2);\n+  bool compare_ssa_name (const_tree t1, const_tree t2);\n \n   /* Verification function for edges E1 and E2.  */\n   bool compare_edge (edge e1, edge e2);\n@@ -188,7 +188,7 @@ class func_checker : operand_compare\n   bool compare_gimple_asm (const gasm *s1, const gasm *s2);\n \n   /* Verification function for declaration trees T1 and T2.  */\n-  bool compare_decl (tree t1, tree t2);\n+  bool compare_decl (const_tree t1, const_tree t2);\n \n   /* Verifies that tree labels T1 and T2 correspond.  */\n   bool compare_tree_ssa_label (tree t1, tree t2);\n@@ -210,7 +210,7 @@ class func_checker : operand_compare\n   bool compare_function_decl (tree t1, tree t2);\n \n   /* Verifies that trees T1 and T2 do correspond.  */\n-  bool compare_variable_decl (tree t1, tree t2);\n+  bool compare_variable_decl (const_tree t1, const_tree t2);\n \n   /* Compare loop information for basic blocks BB1 and BB2.  */\n   bool compare_loops (basic_block bb1, basic_block bb2);\n@@ -252,10 +252,10 @@ class func_checker : operand_compare\n   hash_map <edge, edge> m_edge_map;\n \n   /* Source to target declaration map.  */\n-  hash_map <tree, tree> m_decl_map;\n+  hash_map <const_tree, const_tree> m_decl_map;\n \n   /* Label to basic block index mapping.  */\n-  hash_map <tree, int> m_label_bb_map;\n+  hash_map <const_tree, int> m_label_bb_map;\n \n   /* Flag if ignore labels in comparison.  */\n   bool m_ignore_labels;"}]}