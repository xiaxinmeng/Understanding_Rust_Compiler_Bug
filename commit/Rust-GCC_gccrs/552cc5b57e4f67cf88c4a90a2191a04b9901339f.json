{"sha": "552cc5b57e4f67cf88c4a90a2191a04b9901339f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUyY2M1YjU3ZTRmNjdjZjg4YzRhOTBhMjE5MWEwNGI5OTAxMzM5Zg==", "commit": {"author": {"name": "Warren Levy", "email": "warrenl@cygnus.com", "date": "2000-03-24T09:18:12Z"}, "committer": {"name": "Warren Levy", "email": "warrenl@gcc.gnu.org", "date": "2000-03-24T09:18:12Z"}, "message": "BigInteger.java (divide): Handle the special case when dividing by 1 and the high bit of the dividend is set.\n\n\t* java/math/BigInteger.java(divide): Handle the special case when\n\tdividing by 1 and the high bit of the dividend is set.\n\t(setShiftRight): Handle case when count == 0.\n\nFrom-SVN: r32724", "tree": {"sha": "81ac4785b8794f96ebc0913df70f460cf45208ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81ac4785b8794f96ebc0913df70f460cf45208ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/552cc5b57e4f67cf88c4a90a2191a04b9901339f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/552cc5b57e4f67cf88c4a90a2191a04b9901339f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/552cc5b57e4f67cf88c4a90a2191a04b9901339f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/552cc5b57e4f67cf88c4a90a2191a04b9901339f/comments", "author": null, "committer": null, "parents": [{"sha": "111393dfd683a1ac8d048f1dcd00922ea7ea596f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/111393dfd683a1ac8d048f1dcd00922ea7ea596f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/111393dfd683a1ac8d048f1dcd00922ea7ea596f"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "8cc21f753bdf4bb16ff2b742875cd2a7bf254a3d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552cc5b57e4f67cf88c4a90a2191a04b9901339f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552cc5b57e4f67cf88c4a90a2191a04b9901339f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=552cc5b57e4f67cf88c4a90a2191a04b9901339f", "patch": "@@ -1,3 +1,9 @@\n+2000-03-24  Warren Levy  <warrenl@cygnus.com>\n+\n+\t* java/math/BigInteger.java(divide): Handle the special case when\n+\tdividing by 1 and the high bit of the dividend is set.\n+\t(setShiftRight): Handle case when count == 0.\n+\n 2000-03-24  Warren Levy  <warrenl@cygnus.com>\n \n \t* java/awt/Font.java(isBold): Fix syntax error."}, {"sha": "738680a42c42c0054109dd8e2bbc8c1f3c672f24", "filename": "libjava/java/math/BigInteger.java", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552cc5b57e4f67cf88c4a90a2191a04b9901339f/libjava%2Fjava%2Fmath%2FBigInteger.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552cc5b57e4f67cf88c4a90a2191a04b9901339f/libjava%2Fjava%2Fmath%2FBigInteger.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fmath%2FBigInteger.java?ref=552cc5b57e4f67cf88c4a90a2191a04b9901339f", "patch": "@@ -750,6 +750,12 @@ else if (cmpval == 0)  // abs(x) == abs(y)\n     else if (ylen == 1)\n       {\n \tqlen = xlen;\n+\t// Need to leave room for a word of leading zeros if dividing by 1\n+\t// and the dividend has the high bit set.  It might be safe to\n+\t// increment qlen in all cases, but it certainly is only necessary\n+\t// in the following case.\n+\tif (ywords[0] == 1 && xwords[xlen-1] < 0)\n+\t  qlen++;\n \trlen = 1;\n \tywords[0] = MPN.divmod_1(xwords, xwords, xlen, ywords[0]);\n       }\n@@ -770,7 +776,7 @@ else if (ylen == 1)\n \t    // significant word.\n \t    int x_high = MPN.lshift(xwords, 0, xwords, xlen, nshift);\n \t    xwords[xlen++] = x_high;\n-\t}\n+\t  }\n \n \tif (xlen == ylen)\n \t  xwords[xlen++] = 0;\n@@ -1381,7 +1387,10 @@ else if (count == 0)\n \t  {\n \t    if (words == null || words.length < d_len)\n \t      realloc(d_len);\n-\t    MPN.rshift(words, x.words, word_count, d_len, count);\n+\t    if (count == 0)\n+\t      System.arraycopy(x.words, word_count, words, 0, d_len);\n+\t    else\n+\t      MPN.rshift(words, x.words, word_count, d_len, count);\n \t    ival = d_len;\n \t    if (neg)\n \t      words[ival-1] |= -1 << (32 - count);"}]}