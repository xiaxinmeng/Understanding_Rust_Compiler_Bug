{"sha": "77adef8498fb09947e889abbacb1d2bd8ece0929", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdhZGVmODQ5OGZiMDk5NDdlODg5YWJiYWNiMWQyYmQ4ZWNlMDkyOQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-04-23T08:37:23Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-04-23T08:37:23Z"}, "message": "re PR c++/6256 (Seg fault for template friends in namespaces, regression from 2.95)\n\n\tPR c++/6256:\n\t* pt.c (tsubst_friend_class): Handle templates with explicit\n\tnested names.\n\n\tPR c++/6331:\n\t* typeck.c (merge_types): Remember the cv-qualification of pointer\n\ttypes when merging them.\n\n\tPR c++/6256:\n\t* g++.dg/template/friend5.C: New test.\n\n\tPR c++/6331:\n\t* g++.dg/template/qual1.C: Likewise.\n\nFrom-SVN: r52661", "tree": {"sha": "8aea9d9d97169d2716e25282e4a96b9738fd5d84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8aea9d9d97169d2716e25282e4a96b9738fd5d84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77adef8498fb09947e889abbacb1d2bd8ece0929", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77adef8498fb09947e889abbacb1d2bd8ece0929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77adef8498fb09947e889abbacb1d2bd8ece0929", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77adef8498fb09947e889abbacb1d2bd8ece0929/comments", "author": null, "committer": null, "parents": [{"sha": "8d3441e0096bf053216a1c89bd13fe3d42c75251", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d3441e0096bf053216a1c89bd13fe3d42c75251", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d3441e0096bf053216a1c89bd13fe3d42c75251"}], "stats": {"total": 85, "additions": 70, "deletions": 15}, "files": [{"sha": "f7ac920401bccf24b827fec259d3ebd2c9921a9d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77adef8498fb09947e889abbacb1d2bd8ece0929/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77adef8498fb09947e889abbacb1d2bd8ece0929/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=77adef8498fb09947e889abbacb1d2bd8ece0929", "patch": "@@ -1,3 +1,13 @@\n+2002-04-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/6256:\n+\t* pt.c (tsubst_friend_class): Handle templates with explicit\n+\tnested names.\n+\n+\tPR c++/6331:\n+\t* typeck.c (merge_types): Remember the cv-qualification of pointer\n+\ttypes when merging them.\n+\n 2002-04-20  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cp-lang.c (LANG_HOOKS_FUNCTION_INIT,"}, {"sha": "39c6bf695b3958ab9b5a48a03698e85e1cbae5ab", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77adef8498fb09947e889abbacb1d2bd8ece0929/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77adef8498fb09947e889abbacb1d2bd8ece0929/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=77adef8498fb09947e889abbacb1d2bd8ece0929", "patch": "@@ -4833,23 +4833,28 @@ tsubst_friend_class (friend_tmpl, args)\n   tree tmpl;\n \n   /* First, we look for a class template.  */\n-  tmpl = lookup_name (DECL_NAME (friend_tmpl), /*prefer_type=*/0); \n-  \n-  /* But, if we don't find one, it might be because we're in a\n-     situation like this:\n+  if (DECL_CONTEXT (friend_tmpl))\n+    tmpl = friend_tmpl;\n+  else\n+    {\n+      tmpl = lookup_name (DECL_NAME (friend_tmpl), /*prefer_type=*/0); \n \n-       template <class T>\n-       struct S {\n-         template <class U>\n-\t friend struct S;\n-       };\n+      /* But, if we don't find one, it might be because we're in a\n+\t situation like this:\n \n-     Here, in the scope of (say) S<int>, `S' is bound to a TYPE_DECL\n-     for `S<int>', not the TEMPLATE_DECL.  */\n-  if (!tmpl || !DECL_CLASS_TEMPLATE_P (tmpl))\n-    {\n-      tmpl = lookup_name (DECL_NAME (friend_tmpl), /*prefer_type=*/1);\n-      tmpl = maybe_get_template_decl_from_type_decl (tmpl);\n+\t   template <class T>\n+\t   struct S {\n+\t     template <class U>\n+\t     friend struct S;\n+\t   };\n+\n+\t Here, in the scope of (say) S<int>, `S' is bound to a TYPE_DECL\n+\t for `S<int>', not the TEMPLATE_DECL.  */\n+      if (!tmpl || !DECL_CLASS_TEMPLATE_P (tmpl))\n+\t{\n+\t  tmpl = lookup_name (DECL_NAME (friend_tmpl), /*prefer_type=*/1);\n+\t  tmpl = maybe_get_template_decl_from_type_decl (tmpl);\n+\t}\n     }\n \n   if (tmpl && DECL_CLASS_TEMPLATE_P (tmpl))"}, {"sha": "690df764bf58e7992298d84fe8e286e2736f847f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77adef8498fb09947e889abbacb1d2bd8ece0929/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77adef8498fb09947e889abbacb1d2bd8ece0929/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=77adef8498fb09947e889abbacb1d2bd8ece0929", "patch": "@@ -592,12 +592,14 @@ merge_types (t1, t2)\n       /* For two pointers, do this recursively on the target type.  */\n       {\n \ttree target = merge_types (TREE_TYPE (t1), TREE_TYPE (t2));\n+\tint quals = cp_type_quals (t1);\n \n \tif (code1 == POINTER_TYPE)\n \t  t1 = build_pointer_type (target);\n \telse\n \t  t1 = build_reference_type (target);\n \tt1 = build_type_attribute_variant (t1, attributes);\n+\tt1 = cp_build_qualified_type (t1, quals);\n \n \tif (TREE_CODE (target) == METHOD_TYPE)\n \t  t1 = build_ptrmemfunc_type (t1);"}, {"sha": "3c4635a06af5dede1adbb94b7520adf488c33f01", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77adef8498fb09947e889abbacb1d2bd8ece0929/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77adef8498fb09947e889abbacb1d2bd8ece0929/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77adef8498fb09947e889abbacb1d2bd8ece0929", "patch": "@@ -1,3 +1,11 @@\n+2002-04-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/6256:\n+\t* g++.dg/template/friend5.C: New test.\n+\n+\tPR c++/6331:\n+\t* g++.dg/template/qual1.C: Likewise.\n+\n 2002-04-22  Zack Weinberg  <zack@codesourcery.com>\n \n \t* gcc.c-torture/execute/980707-1.c: Don't use isspace()."}, {"sha": "1a63e71e32c198a4a8af60b77ee9fcbc001ea224", "filename": "gcc/testsuite/g++.dg/template/friend5.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77adef8498fb09947e889abbacb1d2bd8ece0929/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77adef8498fb09947e889abbacb1d2bd8ece0929/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend5.C?ref=77adef8498fb09947e889abbacb1d2bd8ece0929", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile }\n+\n+namespace NS {  template <typename number> class C;  }\n+\n+template <typename T> class X {\n+    template <typename N> friend class NS::C;\n+};\n+\n+template class X<int>;"}, {"sha": "3d512c1e1beae0fed9fae2dd490949585c3d9d84", "filename": "gcc/testsuite/g++.dg/template/qual1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77adef8498fb09947e889abbacb1d2bd8ece0929/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqual1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77adef8498fb09947e889abbacb1d2bd8ece0929/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqual1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqual1.C?ref=77adef8498fb09947e889abbacb1d2bd8ece0929", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile }\n+\n+template<class T>\n+class Link_array\n+{\n+public:\n+  void sort (int (*compare) (T *const&,T *const&));\n+};\n+\n+int shift_compare (int *const &, int *const &) {};\n+\n+template<class T> void\n+Link_array<T>::sort (int (*compare) (T *const&,T *const&)) \n+{\n+}\n+\n+void f ()\n+{\n+  Link_array<int> clashes;\n+  clashes.sort (shift_compare);\n+}"}]}