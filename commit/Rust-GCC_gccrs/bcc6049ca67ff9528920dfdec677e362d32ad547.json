{"sha": "bcc6049ca67ff9528920dfdec677e362d32ad547", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNjNjA0OWNhNjdmZjk1Mjg5MjBkZmRlYzY3N2UzNjJkMzJhZDU0Nw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-13T17:48:08Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-13T17:48:08Z"}, "message": "clipper-protos.h: New file.\n\n\t* clipper-protos.h: New file.\n\n\t* clipper.c: Include tm_p.h.  Add static prototypes.  Fix compile\n\ttime warnings.\n\n\t* clipper.h: Move prototypes to clipper-protos.h.  Fix compile time\n\twarnings.\n\nFrom-SVN: r31392", "tree": {"sha": "61b6ff6f4515b0c3a28e2a8f4fdba9580f52a494", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61b6ff6f4515b0c3a28e2a8f4fdba9580f52a494"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcc6049ca67ff9528920dfdec677e362d32ad547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcc6049ca67ff9528920dfdec677e362d32ad547", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcc6049ca67ff9528920dfdec677e362d32ad547", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcc6049ca67ff9528920dfdec677e362d32ad547/comments", "author": null, "committer": null, "parents": [{"sha": "54ed0905ec0c345e8d60490affadaba6e0372e50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ed0905ec0c345e8d60490affadaba6e0372e50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54ed0905ec0c345e8d60490affadaba6e0372e50"}], "stats": {"total": 85, "additions": 66, "deletions": 19}, "files": [{"sha": "2b18f22d123cc2da000dce98e0702915e3e6e9eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc6049ca67ff9528920dfdec677e362d32ad547/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc6049ca67ff9528920dfdec677e362d32ad547/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcc6049ca67ff9528920dfdec677e362d32ad547", "patch": "@@ -1,3 +1,13 @@\n+2000-01-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* clipper-protos.h: New file.\n+\n+\t* clipper.c: Include tm_p.h.  Add static prototypes.  Fix compile\n+\ttime warnings.\n+\t\n+\t* clipper.h: Move prototypes to clipper-protos.h.  Fix compile time\n+\twarnings.\n+\n Thu Jan 13 16:03:06 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* reload1.c (reload_combine_note_store): Use HARD_REGNO_NREGS."}, {"sha": "d702165d6b5cf2fd381881fb23c59739131bb6b0", "filename": "gcc/config/clipper/clipper-protos.h", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc6049ca67ff9528920dfdec677e362d32ad547/gcc%2Fconfig%2Fclipper%2Fclipper-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc6049ca67ff9528920dfdec677e362d32ad547/gcc%2Fconfig%2Fclipper%2Fclipper-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper-protos.h?ref=bcc6049ca67ff9528920dfdec677e362d32ad547", "patch": "@@ -0,0 +1,40 @@\n+/* Definitions of target machine for GNU compiler.  Clipper version.\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Contributed by Holger Teutsch (holger@hotbso.rhein-main.de)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#ifdef RTX_CODE\n+#ifdef TREE_CODE\n+extern void clipper_va_start PARAMS ((int, tree, rtx));\n+extern rtx clipper_va_arg PARAMS ((tree, tree));\n+#endif /* TREE_CODE */\n+extern void clipper_movstr PARAMS ((rtx *));\n+extern void print_operand_address PARAMS ((FILE *, rtx));\n+extern const char *rev_cond_name PARAMS ((rtx));\n+extern int int_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int fp_reg_operand PARAMS ((rtx, enum machine_mode));\n+#endif /* RTX_CODE */\n+\n+extern struct rtx_def *clipper_builtin_saveregs PARAMS ((void));\n+extern int clipper_frame_size PARAMS ((int));\n+extern void output_function_prologue PARAMS ((FILE *, int));\n+extern void output_function_epilogue PARAMS ((FILE *, int));\n+#ifdef TREE_CODE\n+extern tree clipper_build_va_list PARAMS ((void));\n+#endif /* TREE_CODE */"}, {"sha": "bf4c9891ed14459f31f3d981f935893c24ed62bf", "filename": "gcc/config/clipper/clipper.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc6049ca67ff9528920dfdec677e362d32ad547/gcc%2Fconfig%2Fclipper%2Fclipper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc6049ca67ff9528920dfdec677e362d32ad547/gcc%2Fconfig%2Fclipper%2Fclipper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.c?ref=bcc6049ca67ff9528920dfdec677e362d32ad547", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Clipper\n-   Copyright (C) 1987, 88, 91, 97, 98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 91, 97-99, 2000 Free Software Foundation, Inc.\n    Contributed by Holger Teutsch (holger@hotbso.rhein-main.de)\n \n This file is part of GNU CC.\n@@ -35,7 +35,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"expr.h\"\n #include \"flags.h\"\n-#include \"machmode.h\"\n+#include \"recog.h\"\n+#include \"tm_p.h\"\n \n extern char regs_ever_live[];\n \n@@ -134,7 +135,7 @@ output_function_prologue (file, lsize)\n void\n output_function_epilogue (file, size)\n      FILE *file;\n-     int size;\t\t\t\t/* ignored */\n+     int size ATTRIBUTE_UNUSED;\n {\n   int i, offset;\n \n@@ -282,13 +283,13 @@ clipper_movstr (operands)\n }\n \n \f\n+void\n print_operand_address (file, addr)\n      FILE *file;\n      register rtx addr;\n {\n   rtx op0,op1;\n \n- retry:\n   switch (GET_CODE (addr))\n     {\n     case REG:\n@@ -329,7 +330,7 @@ print_operand_address (file, addr)\n }\n \n \f\n-char *\n+const char *\n rev_cond_name (op)\n      rtx op;\n {\n@@ -507,31 +508,31 @@ clipper_va_start (stdarg_p, valist, nextarg)\n   /* Set the four entries of __va_reg.  */\n \n   t = build1 (NOP_EXPR, ptr_type_node, save_area);\n-  u = build (ARRAY_REF, ptr_type_node, reg_field, build_int (0, 0));\n+  u = build (ARRAY_REF, ptr_type_node, reg_field, build_int_2 (0, 0));\n   t = build (MODIFY_EXPR, ptr_type_node, u, t);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n   t = fold (build (PLUS_EXPR, integer_type_node, save_area,\n \t\t   build_int_2 (8, 0)));\n   t = build1 (NOP_EXPR, ptr_type_node, save_area);\n-  u = build (ARRAY_REF, ptr_type_node, reg_field, build_int (1, 0));\n+  u = build (ARRAY_REF, ptr_type_node, reg_field, build_int_2 (1, 0));\n   t = build (MODIFY_EXPR, ptr_type_node, u, t);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n   t = fold (build (PLUS_EXPR, integer_type_node, save_area,\n \t\t   build_int_2 (4, 0)));\n   t = build1 (NOP_EXPR, ptr_type_node, save_area);\n-  u = build (ARRAY_REF, ptr_type_node, reg_field, build_int (2, 0));\n+  u = build (ARRAY_REF, ptr_type_node, reg_field, build_int_2 (2, 0));\n   t = build (MODIFY_EXPR, ptr_type_node, u, t);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n   t = fold (build (PLUS_EXPR, integer_type_node, save_area,\n \t\t   build_int_2 (16, 0)));\n   t = build1 (NOP_EXPR, ptr_type_node, save_area);\n-  u = build (ARRAY_REF, ptr_type_node, reg_field, build_int (3, 0));\n+  u = build (ARRAY_REF, ptr_type_node, reg_field, build_int_2 (3, 0));\n   t = build (MODIFY_EXPR, ptr_type_node, u, t);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);"}, {"sha": "32b2155a30c40e8f5843b88d6fbf91a22ff822cb", "filename": "gcc/config/clipper/clipper.h", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc6049ca67ff9528920dfdec677e362d32ad547/gcc%2Fconfig%2Fclipper%2Fclipper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc6049ca67ff9528920dfdec677e362d32ad547/gcc%2Fconfig%2Fclipper%2Fclipper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.h?ref=bcc6049ca67ff9528920dfdec677e362d32ad547", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Clipper version.\n-   Copyright (C) 1987, 88, 91, 93-96, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 91, 93-96, 98, 99, 2000 Free Software Foundation, Inc.\n    Contributed by Holger Teutsch (holger@hotbso.rhein-main.de)\n \n This file is part of GNU CC.\n@@ -19,9 +19,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-extern struct rtx_def *clipper_builtin_saveregs ();\n-extern int clipper_frame_size ();\n-\n /* Print subsidiary information on the compiler version in use.  */\n \n #define TARGET_VERSION fprintf (stderr, \" (clipper)\");\n@@ -209,7 +206,7 @@ extern int target_flags;\n \n #define HARD_REGNO_MODE_OK(REGNO, MODE)\t\t\t\t\t\\\n   ((REGNO) < 16 \t\t\t\t\t\t\t\\\n-   ? ((MODE) != DImode && (MODE) != DFmode || ((REGNO) & 1) == 0)\t\\\n+   ? (((MODE) != DImode && (MODE) != DFmode) || ((REGNO) & 1) == 0)\t\\\n    : ((MODE) == SFmode || (MODE) == DFmode))\n \n /* Value is 1 if it is a good idea to tie two pseudo registers\n@@ -282,7 +279,7 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, ALL_REGS, LIM_REG_CLASSES};\n    This is an initializer for a vector of HARD_REG_SET\n    of length N_REG_CLASSES.  */\n \n-#define REG_CLASS_CONTENTS {0, 0x0000ffff, 0xffff0000, 0xffffffff}\n+#define REG_CLASS_CONTENTS { {0}, {0x0000ffff}, {0xffff0000}, {0xffffffff} }\n \n /* The same information, inverted:\n    Return the class number of the smallest class containing\n@@ -921,8 +918,8 @@ do\t\t\t\t\t\t\t\t\t      \\\n     {\t\t\t\t\t\t\t\t\t      \\\n     case CC_CHANGE0:\t\t\t\t\t\t\t      \\\n       if (GET_CODE (EXP) == PARALLEL) abort();\t\t\t\t      \\\n-      if (cc_status.value1 && rtx_equal_p (dest, cc_status.value1) ||\t      \\\n-\t  cc_status.value2 && rtx_equal_p (dest, cc_status.value2))\t      \\\n+      if ((cc_status.value1 && rtx_equal_p (dest, cc_status.value1)) ||\t      \\\n+\t  (cc_status.value2 && rtx_equal_p (dest, cc_status.value2)))\t      \\\n \tCC_STATUS_INIT;\t\t\t\t\t\t\t      \\\n       break;\t\t\t\t\t\t\t\t      \\\n \t\t\t\t\t\t\t\t\t      \\\n@@ -1104,8 +1101,7 @@ Clipper operand formatting codes:\n   ((CODE) == 'C')\n \n #define PRINT_OPERAND(FILE, X, CODE)  \\\n-{ extern char *rev_cond_name ();\t\t\t\t\t\\\n-  if (CODE == 'C')\t\t\t\t\t\t\t\\\n+{ if (CODE == 'C')\t\t\t\t\t\t\t\\\n     fputs (rev_cond_name (X), FILE);\t\t\t\t\t\\\n   else if (GET_CODE (X) == REG)\t\t\t\t\t\t\\\n     fprintf (FILE, \"%s\", reg_names[REGNO (X)]);\t\t\t\t\\"}]}