{"sha": "0cd7c67283bcf3b0a443be9b6cdeaed7f6c1b8f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNkN2M2NzI4M2JjZjNiMGE0NDNiZTliNmNkZWFlZDdmNmMxYjhmMw==", "commit": {"author": {"name": "Guy Martin", "email": "gmsoft@tuxicoman.be", "date": "2014-11-22T00:18:49Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2014-11-22T00:18:49Z"}, "message": "linux-atomic.c (__kernel_cmpxchg2): New.\n\n\t* config/pa/linux-atomic.c (__kernel_cmpxchg2): New.\n\t(FETCH_AND_OP_2): New.  Use for subword and double word operations.\n\t(OP_AND_FETCH_2): Likewise.\n\t(COMPARE_AND_SWAP_2): Likewise.\n\t(SYNC_LOCK_TEST_AND_SET_2): Likewise.\n\t(SYNC_LOCK_RELEASE_2): Likewise.\n\t(SUBWORD_SYNC_OP): Remove.\n\t(SUBWORD_VAL_CAS): Likewise.\n\t(SUBWORD_BOOL_CAS): Likewise.\n\t(FETCH_AND_OP_WORD): Update.\n\tConsistently use signed types.\n\t\n\nCo-Authored-By: John David Anglin <danglin@gcc.gnu.org>\n\nFrom-SVN: r217956", "tree": {"sha": "d24ccb54dd1a62bd6f385f542d93a493d00a4953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d24ccb54dd1a62bd6f385f542d93a493d00a4953"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cd7c67283bcf3b0a443be9b6cdeaed7f6c1b8f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd7c67283bcf3b0a443be9b6cdeaed7f6c1b8f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cd7c67283bcf3b0a443be9b6cdeaed7f6c1b8f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd7c67283bcf3b0a443be9b6cdeaed7f6c1b8f3/comments", "author": {"login": "gmsoft-tuxicoman", "id": 2064119, "node_id": "MDQ6VXNlcjIwNjQxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2064119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gmsoft-tuxicoman", "html_url": "https://github.com/gmsoft-tuxicoman", "followers_url": "https://api.github.com/users/gmsoft-tuxicoman/followers", "following_url": "https://api.github.com/users/gmsoft-tuxicoman/following{/other_user}", "gists_url": "https://api.github.com/users/gmsoft-tuxicoman/gists{/gist_id}", "starred_url": "https://api.github.com/users/gmsoft-tuxicoman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gmsoft-tuxicoman/subscriptions", "organizations_url": "https://api.github.com/users/gmsoft-tuxicoman/orgs", "repos_url": "https://api.github.com/users/gmsoft-tuxicoman/repos", "events_url": "https://api.github.com/users/gmsoft-tuxicoman/events{/privacy}", "received_events_url": "https://api.github.com/users/gmsoft-tuxicoman/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "16c31bcf0256bf544256951fed13c9173b21a4de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c31bcf0256bf544256951fed13c9173b21a4de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16c31bcf0256bf544256951fed13c9173b21a4de"}], "stats": {"total": 317, "additions": 176, "deletions": 141}, "files": [{"sha": "e74247d10b0a18d55a325354abb2c9c12d1cc2fa", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd7c67283bcf3b0a443be9b6cdeaed7f6c1b8f3/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd7c67283bcf3b0a443be9b6cdeaed7f6c1b8f3/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=0cd7c67283bcf3b0a443be9b6cdeaed7f6c1b8f3", "patch": "@@ -1,3 +1,18 @@\n+2014-11-21  Guy Martin  <gmsoft@tuxicoman.be>\n+\t    John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/linux-atomic.c (__kernel_cmpxchg2): New.\n+\t(FETCH_AND_OP_2): New.  Use for subword and double word operations.\n+\t(OP_AND_FETCH_2): Likewise.\n+\t(COMPARE_AND_SWAP_2): Likewise.\n+\t(SYNC_LOCK_TEST_AND_SET_2): Likewise.\n+\t(SYNC_LOCK_RELEASE_2): Likewise.\n+\t(SUBWORD_SYNC_OP): Remove.\n+\t(SUBWORD_VAL_CAS): Likewise.\n+\t(SUBWORD_BOOL_CAS): Likewise.\n+\t(FETCH_AND_OP_WORD): Update.\n+\tConsistently use signed types.\n+\t\n 2014-11-13  Bernd Schmidt  <bernds@codesourcery.com>\n \t    Thomas Schwinge  <thomas@codesourcery.com>\n \t    Ilya Verbin  <ilya.verbin@intel.com>"}, {"sha": "9a050622ad252921f0f577582edc4b4e67eff2bc", "filename": "libgcc/config/pa/linux-atomic.c", "status": "modified", "additions": 161, "deletions": 141, "changes": 302, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd7c67283bcf3b0a443be9b6cdeaed7f6c1b8f3/libgcc%2Fconfig%2Fpa%2Flinux-atomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd7c67283bcf3b0a443be9b6cdeaed7f6c1b8f3/libgcc%2Fconfig%2Fpa%2Flinux-atomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Flinux-atomic.c?ref=0cd7c67283bcf3b0a443be9b6cdeaed7f6c1b8f3", "patch": "@@ -45,7 +45,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define ABORT_INSTRUCTION asm (\"iitlbp %r0,(%sr0, %r0)\")\n \n /* Determine kernel LWS function call (0=32-bit, 1=64-bit userspace).  */\n-#define LWS_CAS (sizeof(unsigned long) == 4 ? 0 : 1)\n+#define LWS_CAS (sizeof(long) == 4 ? 0 : 1)\n \n /* Kernel helper for compare-and-exchange a 32-bit value.  */\n static inline long\n@@ -75,6 +75,30 @@ __kernel_cmpxchg (int oldval, int newval, int *mem)\n   return lws_errno;\n }\n \n+static inline long\n+__kernel_cmpxchg2 (void * oldval, void * newval, void *mem, int val_size)\n+{\n+  register unsigned long lws_mem asm(\"r26\") = (unsigned long) (mem);\n+  register long lws_ret   asm(\"r28\");\n+  register long lws_errno asm(\"r21\");\n+  register unsigned long lws_old asm(\"r25\") = (unsigned long) oldval;\n+  register unsigned long lws_new asm(\"r24\") = (unsigned long) newval;\n+  register int lws_size asm(\"r23\") = val_size;\n+  asm volatile (\t\"ble\t0xb0(%%sr2, %%r0)\t\\n\\t\"\n+\t\t\t\"ldi\t%2, %%r20\t\t\\n\\t\"\n+\t: \"=r\" (lws_ret), \"=r\" (lws_errno)\n+\t: \"i\" (2), \"r\" (lws_mem), \"r\" (lws_old), \"r\" (lws_new), \"r\" (lws_size)\n+\t: \"r1\", \"r20\", \"r22\", \"r29\", \"r31\", \"fr4\", \"memory\"\n+  );\n+  if (__builtin_expect (lws_errno == -EFAULT || lws_errno == -ENOSYS, 0))\n+    ABORT_INSTRUCTION;\n+\n+  /* If the kernel LWS call fails, retrun EBUSY */\n+  if (!lws_errno && lws_ret)\n+    lws_errno = -EBUSY;\n+\n+  return lws_errno;\n+}\n #define HIDDEN __attribute__ ((visibility (\"hidden\")))\n \n /* Big endian masks  */\n@@ -84,6 +108,80 @@ __kernel_cmpxchg (int oldval, int newval, int *mem)\n #define MASK_1 0xffu\n #define MASK_2 0xffffu\n \n+#define FETCH_AND_OP_2(OP, PFX_OP, INF_OP, TYPE, WIDTH, INDEX)\t\t\\\n+  TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n+  __sync_fetch_and_##OP##_##WIDTH (TYPE *ptr, TYPE val)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE tmp, newval;\t\t\t\t\t\t\t\\\n+    int failure;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\t\\\n+      tmp = *ptr;\t\t\t\t\t\t\t\\\n+      newval = PFX_OP (tmp INF_OP val);\t\t\t\t\t\\\n+      failure = __kernel_cmpxchg2 (&tmp, &newval, ptr, INDEX);\t\t\\\n+    } while (failure != 0);\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    return tmp;\t\t\t\t\t\t\t\t\\\n+  }\n+\n+FETCH_AND_OP_2 (add,   , +, long long, 8, 3)\n+FETCH_AND_OP_2 (sub,   , -, long long, 8, 3)\n+FETCH_AND_OP_2 (or,    , |, long long, 8, 3)\n+FETCH_AND_OP_2 (and,   , &, long long, 8, 3)\n+FETCH_AND_OP_2 (xor,   , ^, long long, 8, 3)\n+FETCH_AND_OP_2 (nand, ~, &, long long, 8, 3)\n+\n+FETCH_AND_OP_2 (add,   , +, short, 2, 1)\n+FETCH_AND_OP_2 (sub,   , -, short, 2, 1)\n+FETCH_AND_OP_2 (or,    , |, short, 2, 1)\n+FETCH_AND_OP_2 (and,   , &, short, 2, 1)\n+FETCH_AND_OP_2 (xor,   , ^, short, 2, 1)\n+FETCH_AND_OP_2 (nand, ~, &, short, 2, 1)\n+\n+FETCH_AND_OP_2 (add,   , +, signed char, 1, 0)\n+FETCH_AND_OP_2 (sub,   , -, signed char, 1, 0)\n+FETCH_AND_OP_2 (or,    , |, signed char, 1, 0)\n+FETCH_AND_OP_2 (and,   , &, signed char, 1, 0)\n+FETCH_AND_OP_2 (xor,   , ^, signed char, 1, 0)\n+FETCH_AND_OP_2 (nand, ~, &, signed char, 1, 0)\n+\n+#define OP_AND_FETCH_2(OP, PFX_OP, INF_OP, TYPE, WIDTH, INDEX)\t\t\\\n+  TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n+  __sync_##OP##_and_fetch_##WIDTH (TYPE *ptr, TYPE val)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE tmp, newval;\t\t\t\t\t\t\t\\\n+    int failure;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\t\\\n+      tmp = *ptr;\t\t\t\t\t\t\t\\\n+      newval = PFX_OP (tmp INF_OP val);\t\t\t\t\t\\\n+      failure = __kernel_cmpxchg2 (&tmp, &newval, ptr, INDEX);\t\t\\\n+    } while (failure != 0);\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    return PFX_OP (tmp INF_OP val);\t\t\t\t\t\\\n+  }\n+\n+OP_AND_FETCH_2 (add,   , +, long long, 8, 3)\n+OP_AND_FETCH_2 (sub,   , -, long long, 8, 3)\n+OP_AND_FETCH_2 (or,    , |, long long, 8, 3)\n+OP_AND_FETCH_2 (and,   , &, long long, 8, 3)\n+OP_AND_FETCH_2 (xor,   , ^, long long, 8, 3)\n+OP_AND_FETCH_2 (nand, ~, &, long long, 8, 3)\n+\n+OP_AND_FETCH_2 (add,   , +, short, 2, 1)\n+OP_AND_FETCH_2 (sub,   , -, short, 2, 1)\n+OP_AND_FETCH_2 (or,    , |, short, 2, 1)\n+OP_AND_FETCH_2 (and,   , &, short, 2, 1)\n+OP_AND_FETCH_2 (xor,   , ^, short, 2, 1)\n+OP_AND_FETCH_2 (nand, ~, &, short, 2, 1)\n+\n+OP_AND_FETCH_2 (add,   , +, signed char, 1, 0)\n+OP_AND_FETCH_2 (sub,   , -, signed char, 1, 0)\n+OP_AND_FETCH_2 (or,    , |, signed char, 1, 0)\n+OP_AND_FETCH_2 (and,   , &, signed char, 1, 0)\n+OP_AND_FETCH_2 (xor,   , ^, signed char, 1, 0)\n+OP_AND_FETCH_2 (nand, ~, &, signed char, 1, 0)\n+\n #define FETCH_AND_OP_WORD(OP, PFX_OP, INF_OP)\t\t\t\t\\\n   int HIDDEN\t\t\t\t\t\t\t\t\\\n   __sync_fetch_and_##OP##_4 (int *ptr, int val)\t\t\t\t\\\n@@ -105,48 +203,6 @@ FETCH_AND_OP_WORD (and,   , &)\n FETCH_AND_OP_WORD (xor,   , ^)\n FETCH_AND_OP_WORD (nand, ~, &)\n \n-#define NAME_oldval(OP, WIDTH) __sync_fetch_and_##OP##_##WIDTH\n-#define NAME_newval(OP, WIDTH) __sync_##OP##_and_fetch_##WIDTH\n-\n-/* Implement both __sync_<op>_and_fetch and __sync_fetch_and_<op> for\n-   subword-sized quantities.  */\n-\n-#define SUBWORD_SYNC_OP(OP, PFX_OP, INF_OP, TYPE, WIDTH, RETURN)\t\\\n-  TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n-  NAME##_##RETURN (OP, WIDTH) (TYPE *ptr, TYPE val)\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    int *wordptr = (int *) ((unsigned long) ptr & ~3);\t\t\t\\\n-    unsigned int mask, shift, oldval, newval;\t\t\t\t\\\n-    int failure;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    shift = (((unsigned long) ptr & 3) << 3) ^ INVERT_MASK_##WIDTH;\t\\\n-    mask = MASK_##WIDTH << shift;\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    do {\t\t\t\t\t\t\t\t\\\n-      oldval = *wordptr;\t\t\t\t\t\t\\\n-      newval = ((PFX_OP (((oldval & mask) >> shift)\t\t\t\\\n-                         INF_OP (unsigned int) val)) << shift) & mask;\t\\\n-      newval |= oldval & ~mask;\t\t\t\t\t\t\\\n-      failure = __kernel_cmpxchg (oldval, newval, wordptr);\t\t\\\n-    } while (failure != 0);\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    return (RETURN & mask) >> shift;\t\t\t\t\t\\\n-  }\n-\n-SUBWORD_SYNC_OP (add,   , +, unsigned short, 2, oldval)\n-SUBWORD_SYNC_OP (sub,   , -, unsigned short, 2, oldval)\n-SUBWORD_SYNC_OP (or,    , |, unsigned short, 2, oldval)\n-SUBWORD_SYNC_OP (and,   , &, unsigned short, 2, oldval)\n-SUBWORD_SYNC_OP (xor,   , ^, unsigned short, 2, oldval)\n-SUBWORD_SYNC_OP (nand, ~, &, unsigned short, 2, oldval)\n-\n-SUBWORD_SYNC_OP (add,   , +, unsigned char, 1, oldval)\n-SUBWORD_SYNC_OP (sub,   , -, unsigned char, 1, oldval)\n-SUBWORD_SYNC_OP (or,    , |, unsigned char, 1, oldval)\n-SUBWORD_SYNC_OP (and,   , &, unsigned char, 1, oldval)\n-SUBWORD_SYNC_OP (xor,   , ^, unsigned char, 1, oldval)\n-SUBWORD_SYNC_OP (nand, ~, &, unsigned char, 1, oldval)\n-\n #define OP_AND_FETCH_WORD(OP, PFX_OP, INF_OP)\t\t\t\t\\\n   int HIDDEN\t\t\t\t\t\t\t\t\\\n   __sync_##OP##_and_fetch_4 (int *ptr, int val)\t\t\t\t\\\n@@ -168,19 +224,41 @@ OP_AND_FETCH_WORD (and,   , &)\n OP_AND_FETCH_WORD (xor,   , ^)\n OP_AND_FETCH_WORD (nand, ~, &)\n \n-SUBWORD_SYNC_OP (add,   , +, unsigned short, 2, newval)\n-SUBWORD_SYNC_OP (sub,   , -, unsigned short, 2, newval)\n-SUBWORD_SYNC_OP (or,    , |, unsigned short, 2, newval)\n-SUBWORD_SYNC_OP (and,   , &, unsigned short, 2, newval)\n-SUBWORD_SYNC_OP (xor,   , ^, unsigned short, 2, newval)\n-SUBWORD_SYNC_OP (nand, ~, &, unsigned short, 2, newval)\n+typedef unsigned char bool;\n \n-SUBWORD_SYNC_OP (add,   , +, unsigned char, 1, newval)\n-SUBWORD_SYNC_OP (sub,   , -, unsigned char, 1, newval)\n-SUBWORD_SYNC_OP (or,    , |, unsigned char, 1, newval)\n-SUBWORD_SYNC_OP (and,   , &, unsigned char, 1, newval)\n-SUBWORD_SYNC_OP (xor,   , ^, unsigned char, 1, newval)\n-SUBWORD_SYNC_OP (nand, ~, &, unsigned char, 1, newval)\n+#define COMPARE_AND_SWAP_2(TYPE, WIDTH, INDEX)\t\t\t\t\\\n+  TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n+  __sync_val_compare_and_swap_##WIDTH (TYPE *ptr, TYPE oldval,\t\t\\\n+\t\t\t\t       TYPE newval)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE actual_oldval;\t\t\t\t\t\t\t\\\n+    int fail;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    while (1)\t\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tactual_oldval = *ptr;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (__builtin_expect (oldval != actual_oldval, 0))\t\t\\\n+\t  return actual_oldval;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tfail = __kernel_cmpxchg2 (&actual_oldval, &newval, ptr, INDEX);\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (__builtin_expect (!fail, 1))\t\t\t\t\\\n+\t  return actual_oldval;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  bool HIDDEN\t\t\t\t\t\t\t\t\\\n+  __sync_bool_compare_and_swap_##WIDTH (TYPE *ptr, TYPE oldval,\t\t\\\n+\t\t\t\t\tTYPE newval)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    int failure = __kernel_cmpxchg2 (&oldval, &newval, ptr, INDEX);\t\\\n+    return (failure != 0);\t\t\t\t\t\t\\\n+  }\n+\n+COMPARE_AND_SWAP_2 (long long, 8, 3)\n+COMPARE_AND_SWAP_2 (short, 2, 1)\n+COMPARE_AND_SWAP_2 (char, 1, 0)\n \n int HIDDEN\n __sync_val_compare_and_swap_4 (int *ptr, int oldval, int newval)\n@@ -201,60 +279,31 @@ __sync_val_compare_and_swap_4 (int *ptr, int oldval, int newval)\n     }\n }\n \n-#define SUBWORD_VAL_CAS(TYPE, WIDTH)\t\t\t\t\t\\\n-  TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n-  __sync_val_compare_and_swap_##WIDTH (TYPE *ptr, TYPE oldval,\t\t\\\n-\t\t\t\t       TYPE newval)\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    int *wordptr = (int *)((unsigned long) ptr & ~3), fail;\t\t\\\n-    unsigned int mask, shift, actual_oldval, actual_newval;\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    shift = (((unsigned long) ptr & 3) << 3) ^ INVERT_MASK_##WIDTH;\t\\\n-    mask = MASK_##WIDTH << shift;\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    while (1)\t\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tactual_oldval = *wordptr;\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (__builtin_expect (((actual_oldval & mask) >> shift)\t\t\\\n-\t\t\t      != (unsigned int) oldval, 0))\t\t\\\n-\t  return (actual_oldval & mask) >> shift;\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tactual_newval = (actual_oldval & ~mask)\t\t\t\t\\\n-\t\t\t| (((unsigned int) newval << shift) & mask);\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tfail = __kernel_cmpxchg (actual_oldval, actual_newval,\t\t\\\n-\t\t\t\t wordptr);\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (__builtin_expect (!fail, 1))\t\t\t\t\\\n-\t  return (actual_oldval & mask) >> shift;\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  }\n-\n-SUBWORD_VAL_CAS (unsigned short, 2)\n-SUBWORD_VAL_CAS (unsigned char,  1)\n-\n-typedef unsigned char bool;\n-\n bool HIDDEN\n __sync_bool_compare_and_swap_4 (int *ptr, int oldval, int newval)\n {\n   int failure = __kernel_cmpxchg (oldval, newval, ptr);\n   return (failure == 0);\n }\n \n-#define SUBWORD_BOOL_CAS(TYPE, WIDTH)\t\t\t\t\t\\\n-  bool HIDDEN\t\t\t\t\t\t\t\t\\\n-  __sync_bool_compare_and_swap_##WIDTH (TYPE *ptr, TYPE oldval,\t\t\\\n-\t\t\t\t\tTYPE newval)\t\t\t\\\n+#define SYNC_LOCK_TEST_AND_SET_2(TYPE, WIDTH, INDEX)\t\t\t\\\n+TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n+  __sync_lock_test_and_set_##WIDTH (TYPE *ptr, TYPE val)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    TYPE actual_oldval\t\t\t\t\t\t\t\\\n-      = __sync_val_compare_and_swap_##WIDTH (ptr, oldval, newval);\t\\\n-    return (oldval == actual_oldval);\t\t\t\t\t\\\n+    TYPE oldval;\t\t\t\t\t\t\t\\\n+    int failure;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\t\\\n+      oldval = *ptr;\t\t\t\t\t\t\t\\\n+      failure = __kernel_cmpxchg2 (&oldval, &val, ptr, INDEX);\t\t\\\n+    } while (failure != 0);\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    return oldval;\t\t\t\t\t\t\t\\\n   }\n \n-SUBWORD_BOOL_CAS (unsigned short, 2)\n-SUBWORD_BOOL_CAS (unsigned char,  1)\n+SYNC_LOCK_TEST_AND_SET_2 (long long, 8, 3)\n+SYNC_LOCK_TEST_AND_SET_2 (short, 2, 1)\n+SYNC_LOCK_TEST_AND_SET_2 (signed char, 1, 0)\n \n int HIDDEN\n __sync_lock_test_and_set_4 (int *ptr, int val)\n@@ -269,29 +318,21 @@ __sync_lock_test_and_set_4 (int *ptr, int val)\n   return oldval;\n }\n \n-#define SUBWORD_TEST_AND_SET(TYPE, WIDTH)\t\t\t\t\\\n-  TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n-  __sync_lock_test_and_set_##WIDTH (TYPE *ptr, TYPE val)\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    int failure;\t\t\t\t\t\t\t\\\n-    unsigned int oldval, newval, shift, mask;\t\t\t\t\\\n-    int *wordptr = (int *) ((unsigned long) ptr & ~3);\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    shift = (((unsigned long) ptr & 3) << 3) ^ INVERT_MASK_##WIDTH;\t\\\n-    mask = MASK_##WIDTH << shift;\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    do {\t\t\t\t\t\t\t\t\\\n-      oldval = *wordptr;\t\t\t\t\t\t\\\n-      newval = (oldval & ~mask)\t\t\t\t\t\t\\\n-\t       | (((unsigned int) val << shift) & mask);\t\t\\\n-      failure = __kernel_cmpxchg (oldval, newval, wordptr);\t\t\\\n-    } while (failure != 0);\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    return (oldval & mask) >> shift;\t\t\t\t\t\\\n+#define SYNC_LOCK_RELEASE_2(TYPE, WIDTH, INDEX)\t\t\t\\\n+  void HIDDEN\t\t\t\t\t\t\t\\\n+  __sync_lock_release_##WIDTH (TYPE *ptr)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE failure, oldval, zero = 0;\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\\\n+      oldval = *ptr;\t\t\t\t\t\t\\\n+      failure = __kernel_cmpxchg2 (&oldval, &zero, ptr, INDEX);\t\\\n+    } while (failure != 0);\t\t\t\t\t\\\n   }\n \n-SUBWORD_TEST_AND_SET (unsigned short, 2)\n-SUBWORD_TEST_AND_SET (unsigned char,  1)\n+SYNC_LOCK_RELEASE_2 (long long, 8, 3)\n+SYNC_LOCK_RELEASE_2 (short, 2, 1)\n+SYNC_LOCK_RELEASE_2 (signed char, 1, 0)\n \n void HIDDEN\n __sync_lock_release_4 (int *ptr)\n@@ -303,24 +344,3 @@ __sync_lock_release_4 (int *ptr)\n     failure = __kernel_cmpxchg (oldval, 0, ptr);\n   } while (failure != 0);\n }\n-\n-#define SYNC_LOCK_RELEASE(TYPE, WIDTH)\t\t\t\t\t\\\n-  void HIDDEN\t\t\t\t\t\t\t\t\\\n-  __sync_lock_release_##WIDTH (TYPE *ptr)\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    int failure;\t\t\t\t\t\t\t\\\n-    unsigned int oldval, newval, shift, mask;\t\t\t\t\\\n-    int *wordptr = (int *) ((unsigned long) ptr & ~3);\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    shift = (((unsigned long) ptr & 3) << 3) ^ INVERT_MASK_##WIDTH;\t\\\n-    mask = MASK_##WIDTH << shift;\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    do {\t\t\t\t\t\t\t\t\\\n-      oldval = *wordptr;\t\t\t\t\t\t\\\n-      newval = oldval & ~mask;\t\t\t\t\t\t\\\n-      failure = __kernel_cmpxchg (oldval, newval, wordptr);\t\t\\\n-    } while (failure != 0);\t\t\t\t\t\t\\\n-  }\n-\n-SYNC_LOCK_RELEASE (short, 2)\n-SYNC_LOCK_RELEASE (char,  1)"}]}