{"sha": "15c7fb9cfd93a55e8140cb70434a1c9fce2539d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVjN2ZiOWNmZDkzYTU1ZTgxNDBjYjcwNDM0YTFjOWZjZTI1MzlkNA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-07-10T18:16:24Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-07-10T18:16:24Z"}, "message": "cp-tree.h (unqualified_name_lookup_error): Declare it.\n\n\t* cp-tree.h (unqualified_name_lookup_error): Declare it.\n\t(begin_function_definition): Adjust prototype.\n\t* lex.c (unqualified_name_lookup_error): New function, split out\n\tfrom ...\n\t(do_identifier): ... here.\n\t* parse.y (parse_begin_function_definition): New function.\n\t(fn.def1): Use it.\n\t* semantics.c (begin_function_definition): Accept decl-specifiers\n\tand attributes as separate parameters.\n\nFrom-SVN: r55372", "tree": {"sha": "ca3ba05dd6a078be579c03889eb6b43527252475", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca3ba05dd6a078be579c03889eb6b43527252475"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15c7fb9cfd93a55e8140cb70434a1c9fce2539d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c7fb9cfd93a55e8140cb70434a1c9fce2539d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15c7fb9cfd93a55e8140cb70434a1c9fce2539d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c7fb9cfd93a55e8140cb70434a1c9fce2539d4/comments", "author": null, "committer": null, "parents": [{"sha": "ae3aa00d40c09b01569a4b94e2c89e5d5e7cc1dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae3aa00d40c09b01569a4b94e2c89e5d5e7cc1dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae3aa00d40c09b01569a4b94e2c89e5d5e7cc1dc"}], "stats": {"total": 116, "additions": 74, "deletions": 42}, "files": [{"sha": "dee8747ed3e3be215c447e8063300512fb7f0da2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c7fb9cfd93a55e8140cb70434a1c9fce2539d4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c7fb9cfd93a55e8140cb70434a1c9fce2539d4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=15c7fb9cfd93a55e8140cb70434a1c9fce2539d4", "patch": "@@ -1,3 +1,15 @@\n+2002-07-10  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (unqualified_name_lookup_error): Declare it.\n+\t(begin_function_definition): Adjust prototype.\n+\t* lex.c (unqualified_name_lookup_error): New function, split out\n+\tfrom ...\n+\t(do_identifier): ... here.\n+\t* parse.y (parse_begin_function_definition): New function.\n+\t(fn.def1): Use it.\n+\t* semantics.c (begin_function_definition): Accept decl-specifiers\n+\tand attributes as separate parameters.\n+\n 2002-07-10  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/6255"}, {"sha": "15a5aff2cedd3684398143f6d647a15bc04db661", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c7fb9cfd93a55e8140cb70434a1c9fce2539d4/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c7fb9cfd93a55e8140cb70434a1c9fce2539d4/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=15c7fb9cfd93a55e8140cb70434a1c9fce2539d4", "patch": "@@ -4062,6 +4062,7 @@ extern void note_got_semicolon\t\t\tPARAMS ((tree));\n extern void note_list_got_semicolon\t\tPARAMS ((tree));\n extern void do_pending_lang_change\t\tPARAMS ((void));\n extern void see_typename\t\t\tPARAMS ((void));\n+extern void unqualified_name_lookup_error       PARAMS ((tree));\n extern tree do_identifier\t\t\tPARAMS ((tree, int, tree));\n extern tree do_scoped_id\t\t\tPARAMS ((tree, tree));\n extern tree identifier_typedecl_value\t\tPARAMS ((tree));\n@@ -4285,7 +4286,7 @@ extern tree finish_fname                        (tree);\n extern void save_type_access_control\t\tPARAMS ((tree));\n extern void reset_type_access_control           PARAMS ((void));\n extern void decl_type_access_control\t\tPARAMS ((tree));\n-extern int begin_function_definition            PARAMS ((tree, tree));\n+extern int begin_function_definition            (tree, tree, tree);\n extern tree begin_constructor_declarator        PARAMS ((tree, tree));\n extern tree finish_declarator                   PARAMS ((tree, tree, tree, tree, int));\n extern void finish_translation_unit             PARAMS ((void));"}, {"sha": "412b3c5e2dbbaf9d92f895fe3d9ad02a5d1f5c88", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 36, "deletions": 28, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c7fb9cfd93a55e8140cb70434a1c9fce2539d4/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c7fb9cfd93a55e8140cb70434a1c9fce2539d4/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=15c7fb9cfd93a55e8140cb70434a1c9fce2539d4", "patch": "@@ -1125,6 +1125,40 @@ is_global (d)\n       }\n }\n \n+/* Issue an error message indicating that the lookup of NAME (an\n+   IDENTIFIER_NODE) failed.  */\n+\n+void\n+unqualified_name_lookup_error (tree name)\n+{\n+  if (IDENTIFIER_OPNAME_P (name))\n+    {\n+      if (name != ansi_opname (ERROR_MARK))\n+\terror (\"`%D' not defined\", name);\n+    }\n+  else if (current_function_decl == 0)\n+    error (\"`%D' was not declared in this scope\", name);\n+  else\n+    {\n+      if (IDENTIFIER_NAMESPACE_VALUE (name) != error_mark_node\n+\t  || IDENTIFIER_ERROR_LOCUS (name) != current_function_decl)\n+\t{\n+\t  static int undeclared_variable_notice;\n+\n+\t  error (\"`%D' undeclared (first use this function)\", name);\n+\n+\t  if (! undeclared_variable_notice)\n+\t    {\n+\t      error (\"(Each undeclared identifier is reported only once for each function it appears in.)\");\n+\t      undeclared_variable_notice = 1;\n+\t    }\n+\t}\n+      /* Prevent repeated error messages.  */\n+      SET_IDENTIFIER_NAMESPACE_VALUE (name, error_mark_node);\n+      SET_IDENTIFIER_ERROR_LOCUS (name, current_function_decl);\n+    }\n+}\n+\n tree\n do_identifier (token, parsing, args)\n      register tree token;\n@@ -1175,36 +1209,10 @@ do_identifier (token, parsing, args)\n       else if (IDENTIFIER_TYPENAME_P (token))\n \t/* A templated conversion operator might exist.  */\n \treturn token;\n-      else if (IDENTIFIER_OPNAME_P (token))\n-\t{\n-\t  if (token != ansi_opname (ERROR_MARK))\n-\t    error (\"`%D' not defined\", token);\n-\t  id = error_mark_node;\n-\t}\n-      else if (current_function_decl == 0)\n-\t{\n-\t  error (\"`%D' was not declared in this scope\", token);\n-\t  id = error_mark_node;\n-\t}\n       else\n \t{\n-\t  if (IDENTIFIER_NAMESPACE_VALUE (token) != error_mark_node\n-\t      || IDENTIFIER_ERROR_LOCUS (token) != current_function_decl)\n-\t    {\n-\t      static int undeclared_variable_notice;\n-\n-\t      error (\"`%D' undeclared (first use this function)\", token);\n-\n-\t      if (! undeclared_variable_notice)\n-\t\t{\n-\t\t  error (\"(Each undeclared identifier is reported only once for each function it appears in.)\");\n-\t\t  undeclared_variable_notice = 1;\n-\t\t}\n-\t    }\n-\t  id = error_mark_node;\n-\t  /* Prevent repeated error messages.  */\n-\t  SET_IDENTIFIER_NAMESPACE_VALUE (token, error_mark_node);\n-\t  SET_IDENTIFIER_ERROR_LOCUS (token, current_function_decl);\n+\t  unqualified_name_lookup_error (token);\n+\t  return error_mark_node;\n \t}\n     }\n "}, {"sha": "386c808aca4b2386f42f2f58668cbc2b69911cde", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c7fb9cfd93a55e8140cb70434a1c9fce2539d4/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c7fb9cfd93a55e8140cb70434a1c9fce2539d4/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=15c7fb9cfd93a55e8140cb70434a1c9fce2539d4", "patch": "@@ -130,6 +130,7 @@ static tree parse_scoped_id PARAMS ((tree));\n static tree parse_xref_tag (tree, tree, int);\n static tree parse_handle_class_head (tree, tree, tree, int, int *);\n static void parse_decl_instantiation (tree, tree, tree);\n+static int parse_begin_function_definition (tree, tree);\n \n /* Cons up an empty parameter list.  */\n static inline tree\n@@ -856,19 +857,19 @@ constructor_declarator:\n fn.def1:\n \t  typed_declspecs declarator\n \t\t{ check_for_new_type (\"return type\", $1);\n-\t\t  if (!begin_function_definition ($1.t, $2))\n+\t\t  if (!parse_begin_function_definition ($1.t, $2))\n \t\t    YYERROR1; }\n \t| declmods notype_declarator\n-\t\t{ if (!begin_function_definition ($1.t, $2))\n+\t\t{ if (!parse_begin_function_definition ($1.t, $2))\n \t\t    YYERROR1; }\n \t| notype_declarator\n-\t\t{ if (!begin_function_definition (NULL_TREE, $1))\n+\t\t{ if (!parse_begin_function_definition (NULL_TREE, $1))\n \t\t    YYERROR1; }\n \t| declmods constructor_declarator\n-\t\t{ if (!begin_function_definition ($1.t, $2))\n+\t\t{ if (!parse_begin_function_definition ($1.t, $2))\n \t\t    YYERROR1; }\n \t| constructor_declarator\n-\t\t{ if (!begin_function_definition (NULL_TREE, $1))\n+\t\t{ if (!parse_begin_function_definition (NULL_TREE, $1))\n \t\t    YYERROR1; }\n \t;\n \n@@ -4085,4 +4086,17 @@ parse_decl_instantiation (tree declspecs, tree declarator, tree storage)\n   do_decl_instantiation (decl, storage);\n }\n \n+/* Like begin_function_definition, but SPECS_ATTRS is a combined list\n+   containing both a decl-specifier-seq and attributes.  */\n+\n+static int\n+parse_begin_function_definition (tree specs_attrs, tree declarator)\n+{\n+  tree specs;\n+  tree attrs;\n+  \n+  split_specs_attrs (specs_attrs, &specs, &attrs);\n+  return begin_function_definition (specs, attrs, declarator);\n+}\n+\n #include \"gt-cp-parse.h\""}, {"sha": "bedd97936fb050b9292b80e3c81971725bde6bb3", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c7fb9cfd93a55e8140cb70434a1c9fce2539d4/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c7fb9cfd93a55e8140cb70434a1c9fce2539d4/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=15c7fb9cfd93a55e8140cb70434a1c9fce2539d4", "patch": "@@ -1517,20 +1517,17 @@ reset_type_access_control ()\n   current_type_lookups = NULL_TREE;\n }\n \n-/* Begin a function definition declared with DECL_SPECS and\n-   DECLARATOR.  Returns non-zero if the function-declaration is\n+/* Begin a function definition declared with DECL_SPECS, ATTRIBUTES,\n+   and DECLARATOR.  Returns non-zero if the function-declaration is\n    legal.  */\n \n int\n-begin_function_definition (decl_specs, declarator)\n+begin_function_definition (decl_specs, attributes, declarator)\n      tree decl_specs;\n+     tree attributes;\n      tree declarator;\n {\n-  tree specs;\n-  tree attrs;\n-\n-  split_specs_attrs (decl_specs, &specs, &attrs);\n-  if (!start_function (specs, declarator, attrs, SF_DEFAULT))\n+  if (!start_function (decl_specs, declarator, attributes, SF_DEFAULT))\n     return 0;\n \n   deferred_type_access_control ();"}]}