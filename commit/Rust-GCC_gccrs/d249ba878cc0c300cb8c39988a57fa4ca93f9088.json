{"sha": "d249ba878cc0c300cb8c39988a57fa4ca93f9088", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI0OWJhODc4Y2MwYzMwMGNiOGMzOTk4OGE1N2ZhNGNhOTNmOTA4OA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-10-23T14:48:25Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-10-27T10:50:35Z"}, "message": "d: Remove the d_critsec_size target hook.\n\nThe allocation of mutex objects for synchronized statements has been\nmoved to the library as of merging druntime 58560d51.  All support code\nin the compiler for getting the OS critical section size has been\nremoved along with it.\n\nReviewed-on: https://github.com/dlang/dmd/pull/11902\n\t     https://github.com/dlang/druntime/pull/3248\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-linux.h (GNU_USER_TARGET_D_CRITSEC_SIZE):\n\tRemove.\n\t* config/glibc-d.c (glibc_d_critsec_size): Likewise.\n\t(TARGET_D_CRITSEC_SIZE): Likewise.\n\t* config/i386/linux-common.h (GNU_USER_TARGET_D_CRITSEC_SIZE):\n\tLikewise.\n\t* config/sol2-d.c (solaris_d_critsec_size): Likewise.\n\t(TARGET_D_CRITSEC_SIZE):  Likewise.\n\t* doc/tm.texi.in (TARGET_D_CRITSEC_SIZE): Likewise.\n\t* doc/tm.texi: Regenerate.\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd bec5973b0.\n\t* d-target.cc (Target::critsecsize): Remove.\n\t* d-target.def: Remove d_critsec_size.\n\nlibphobos/ChangeLog:\n\n\t* libdruntime/MERGE: Merge upstream druntime 58560d51.", "tree": {"sha": "afb898249ecbc7fd11a420ae4e5816926ae1e076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afb898249ecbc7fd11a420ae4e5816926ae1e076"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d249ba878cc0c300cb8c39988a57fa4ca93f9088", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d249ba878cc0c300cb8c39988a57fa4ca93f9088", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d249ba878cc0c300cb8c39988a57fa4ca93f9088", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d249ba878cc0c300cb8c39988a57fa4ca93f9088/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e419ede8915eeb879de3d9c026cd4213aaceb86a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e419ede8915eeb879de3d9c026cd4213aaceb86a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e419ede8915eeb879de3d9c026cd4213aaceb86a"}], "stats": {"total": 102, "additions": 28, "deletions": 74}, "files": [{"sha": "b1d1f671fc531b86e9d28f8b86b4507b0b543f13", "filename": "gcc/config/aarch64/aarch64-linux.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fconfig%2Faarch64%2Faarch64-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fconfig%2Faarch64%2Faarch64-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-linux.h?ref=d249ba878cc0c300cb8c39988a57fa4ca93f9088", "patch": "@@ -64,8 +64,6 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define GNU_USER_TARGET_D_CRITSEC_SIZE 48\n-\n #define TARGET_ASM_FILE_END aarch64_file_end_indicate_exec_stack\n \n /* Uninitialized common symbols in non-PIE executables, even with"}, {"sha": "7eb9e315f009fda022a877ae61383e173bd49139", "filename": "gcc/config/glibc-d.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fconfig%2Fglibc-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fconfig%2Fglibc-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fglibc-d.c?ref=d249ba878cc0c300cb8c39988a57fa4ca93f9088", "patch": "@@ -42,23 +42,7 @@ glibc_d_os_builtins (void)\n #endif\n }\n \n-/* Implement TARGET_D_CRITSEC_SIZE for Glibc targets.  */\n-\n-static unsigned\n-glibc_d_critsec_size (void)\n-{\n-  /* This is the sizeof pthread_mutex_t.  */\n-#ifdef GNU_USER_TARGET_D_CRITSEC_SIZE\n-  return GNU_USER_TARGET_D_CRITSEC_SIZE;\n-#else\n-  return (POINTER_SIZE == 64) ? 40 : 24;\n-#endif\n-}\n-\n #undef TARGET_D_OS_VERSIONS\n #define TARGET_D_OS_VERSIONS glibc_d_os_builtins\n \n-#undef TARGET_D_CRITSEC_SIZE\n-#define TARGET_D_CRITSEC_SIZE glibc_d_critsec_size\n-\n struct gcc_targetdm targetdm = TARGETDM_INITIALIZER;"}, {"sha": "982390d7f3e800e8d33b5fc2acb9645a0cff81cf", "filename": "gcc/config/i386/linux-common.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fconfig%2Fi386%2Flinux-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fconfig%2Fi386%2Flinux-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux-common.h?ref=d249ba878cc0c300cb8c39988a57fa4ca93f9088", "patch": "@@ -30,9 +30,6 @@ along with GCC; see the file COPYING3.  If not see\n #define EXTRA_TARGET_D_OS_VERSIONS()\t\t\\\n   ANDROID_TARGET_D_OS_VERSIONS();\n \n-#define GNU_USER_TARGET_D_CRITSEC_SIZE\t\t\\\n-  (TARGET_64BIT ? (POINTER_SIZE == 64 ? 40 : 32) : 24)\n-\n #undef CC1_SPEC\n #define CC1_SPEC \\\n   LINUX_OR_ANDROID_CC (GNU_USER_TARGET_CC1_SPEC, \\"}, {"sha": "27068f8308255ec1f141a10dcd9f4b3ab09df657", "filename": "gcc/config/sol2-d.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fconfig%2Fsol2-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fconfig%2Fsol2-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2-d.c?ref=d249ba878cc0c300cb8c39988a57fa4ca93f9088", "patch": "@@ -33,19 +33,7 @@ solaris_d_os_builtins (void)\n   d_add_builtin_version (\"Solaris\");\t\t\t\\\n }\n \n-/* Implement TARGET_D_CRITSEC_SIZE for Solaris targets.  */\n-\n-static unsigned\n-solaris_d_critsec_size (void)\n-{\n-  /* This is the sizeof pthread_mutex_t.  */\n-  return 24;\n-}\n-\n #undef TARGET_D_OS_VERSIONS\n #define TARGET_D_OS_VERSIONS solaris_d_os_builtins\n \n-#undef TARGET_D_CRITSEC_SIZE\n-#define TARGET_D_CRITSEC_SIZE solaris_d_critsec_size\n-\n struct gcc_targetdm targetdm = TARGETDM_INITIALIZER;"}, {"sha": "692fce6a65544c1096244716d30209094c4b9c63", "filename": "gcc/d/d-target.cc", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fd%2Fd-target.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fd%2Fd-target.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-target.cc?ref=d249ba878cc0c300cb8c39988a57fa4ca93f9088", "patch": "@@ -202,16 +202,6 @@ Target::fieldalign (Type *type)\n   return align / BITS_PER_UNIT;\n }\n \n-/* Return size of OS critical section.\n-   Can't use the sizeof () calls directly since cross compiling is supported\n-   and would end up using the host sizes rather than the target sizes.  */\n-\n-unsigned\n-Target::critsecsize (void)\n-{\n-  return targetdm.d_critsec_size ();\n-}\n-\n /* Returns a Type for the va_list type of the target.  */\n \n Type *"}, {"sha": "41b31723188a79178104a2118c30beca162ee9cb", "filename": "gcc/d/d-target.def", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fd%2Fd-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fd%2Fd-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-target.def?ref=d249ba878cc0c300cb8c39988a57fa4ca93f9088", "patch": "@@ -46,15 +46,5 @@ relating to the target operating system.\",\n  void, (void),\n  hook_void_void)\n \n-/* The sizeof CRITICAL_SECTION or pthread_mutex_t.  */\n-DEFHOOK\n-(d_critsec_size,\n- \"Returns the size of the data structure used by the target operating system\\n\\\n-for critical sections and monitors.  For example, on Microsoft Windows this\\n\\\n-would return the @code{sizeof(CRITICAL_SECTION)}, while other platforms that\\n\\\n-implement pthreads would return @code{sizeof(pthread_mutex_t)}.\",\n- unsigned, (void),\n- hook_uint_void_0)\n-\n /* Close the 'struct gcc_targetdm' definition.  */\n HOOK_VECTOR_END (C90_EMPTY_HACK)"}, {"sha": "39e424f2a98034404bf7ca865385eb2844d2a022", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=d249ba878cc0c300cb8c39988a57fa4ca93f9088", "patch": "@@ -1,4 +1,4 @@\n-0fcdaab32c7645820820f6e1474343ccfb7560e5\n+bec5973b0203c95adbda2a049ccdf3cd3a4378f6\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "a6267c515de85f0bdf947a856e7dc0a06cbd46a4", "filename": "gcc/d/dmd/idgen.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fd%2Fdmd%2Fidgen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fd%2Fdmd%2Fidgen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fidgen.c?ref=d249ba878cc0c300cb8c39988a57fa4ca93f9088", "patch": "@@ -262,7 +262,7 @@ Msgtable msgtable[] =\n     { \"aaRehash\", \"_aaRehash\" },\n     { \"monitorenter\", \"_d_monitorenter\" },\n     { \"monitorexit\", \"_d_monitorexit\" },\n-    { \"criticalenter\", \"_d_criticalenter\" },\n+    { \"criticalenter\", \"_d_criticalenter2\" },\n     { \"criticalexit\", \"_d_criticalexit\" },\n     { \"__ArrayEq\", NULL },\n     { \"__ArrayPostblit\", NULL },"}, {"sha": "4ff07f6f2ebaaef5503a73ff823deceeb164972e", "filename": "gcc/d/dmd/statementsem.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fd%2Fdmd%2Fstatementsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fd%2Fdmd%2Fstatementsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatementsem.c?ref=d249ba878cc0c300cb8c39988a57fa4ca93f9088", "patch": "@@ -3213,14 +3213,15 @@ class StatementSemanticVisitor : public Visitor\n         else\n         {\n             /* Generate our own critical section, then rewrite as:\n-             *  __gshared byte[CriticalSection.sizeof] critsec;\n-             *  _d_criticalenter(critsec.ptr);\n-             *  try { body } finally { _d_criticalexit(critsec.ptr); }\n+             *  __gshared void* __critsec;\n+             *  _d_criticalenter2(&__critsec);\n+             *  try { body } finally { _d_criticalexit(__critsec); }\n              */\n             Identifier *id = Identifier::generateId(\"__critsec\");\n-            Type *t = Type::tint8->sarrayOf(target.ptrsize + target.critsecsize());\n+            Type *t = Type::tvoidptr;\n             VarDeclaration *tmp = new VarDeclaration(ss->loc, t, id, NULL);\n             tmp->storage_class |= STCtemp | STCgshared | STCstatic;\n+            Expression *tmpExp = new VarExp(ss->loc, tmp);\n \n             Statements *cs = new Statements();\n             cs->push(new ExpStatement(ss->loc, tmp));\n@@ -3236,15 +3237,14 @@ class StatementSemanticVisitor : public Visitor\n             args->push(new Parameter(0, t->pointerTo(), NULL, NULL));\n \n             FuncDeclaration *fdenter = FuncDeclaration::genCfunc(args, Type::tvoid, Id::criticalenter, STCnothrow);\n-            Expression *e = new DotIdExp(ss->loc, new VarExp(ss->loc, tmp), Id::ptr);\n+            Expression *e = new AddrExp(ss->loc, tmpExp);\n             e = semantic(e, sc);\n             e = new CallExp(ss->loc, new VarExp(ss->loc, fdenter, false), e);\n             e->type = Type::tvoid;                  // do not run semantic on e\n             cs->push(new ExpStatement(ss->loc, e));\n \n             FuncDeclaration *fdexit = FuncDeclaration::genCfunc(args, Type::tvoid, Id::criticalexit, STCnothrow);\n-            e = new DotIdExp(ss->loc, new VarExp(ss->loc, tmp), Id::ptr);\n-            e = semantic(e, sc);\n+            e = semantic(tmpExp, sc);\n             e = new CallExp(ss->loc, new VarExp(ss->loc, fdexit, false), e);\n             e->type = Type::tvoid;                  // do not run semantic on e\n             Statement *s = new ExpStatement(ss->loc, e);"}, {"sha": "c34826af3044af3aad19b4f65a4316022adab4c7", "filename": "gcc/d/dmd/target.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fd%2Fdmd%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fd%2Fdmd%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftarget.h?ref=d249ba878cc0c300cb8c39988a57fa4ca93f9088", "patch": "@@ -28,7 +28,6 @@ struct TargetC\n {\n     unsigned longsize;            // size of a C 'long' or 'unsigned long' type\n     unsigned long_doublesize;     // size of a C 'long double'\n-    unsigned criticalSectionSize; // size of os critical section\n };\n \n struct TargetCPP\n@@ -98,7 +97,6 @@ struct Target\n     // Type sizes and support.\n     unsigned alignsize(Type *type);\n     unsigned fieldalign(Type *type);\n-    unsigned critsecsize();\n     Type *va_listType(const Loc &loc, Scope *sc);  // get type of va_list\n     int isVectorTypeSupported(int sz, Type *type);\n     bool isVectorOpSupported(Type *type, TOK op, Type *t2 = NULL);"}, {"sha": "24c37f655c88b3a7138f9a9d44270cd24aded47d", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=d249ba878cc0c300cb8c39988a57fa4ca93f9088", "patch": "@@ -10817,13 +10817,6 @@ Similarly to @code{TARGET_D_CPU_VERSIONS}, but is used for versions\n relating to the target operating system.\n @end deftypefn\n \n-@deftypefn {D Target Hook} unsigned TARGET_D_CRITSEC_SIZE (void)\n-Returns the size of the data structure used by the target operating system\n-for critical sections and monitors.  For example, on Microsoft Windows this\n-would return the @code{sizeof(CRITICAL_SECTION)}, while other platforms that\n-implement pthreads would return @code{sizeof(pthread_mutex_t)}.\n-@end deftypefn\n-\n @node Named Address Spaces\n @section Adding support for named address spaces\n @cindex named address spaces"}, {"sha": "2b8d29f235a9df3e091a10bdc0ca3f79e5113537", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d249ba878cc0c300cb8c39988a57fa4ca93f9088/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=d249ba878cc0c300cb8c39988a57fa4ca93f9088", "patch": "@@ -7351,8 +7351,6 @@ floating-point support; they are not included in this mechanism.\n \n @hook TARGET_D_OS_VERSIONS\n \n-@hook TARGET_D_CRITSEC_SIZE\n-\n @node Named Address Spaces\n @section Adding support for named address spaces\n @cindex named address spaces"}, {"sha": "485f8e999d6968af21313d97f834fcfed79d749e", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d249ba878cc0c300cb8c39988a57fa4ca93f9088/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d249ba878cc0c300cb8c39988a57fa4ca93f9088/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=d249ba878cc0c300cb8c39988a57fa4ca93f9088", "patch": "@@ -1,4 +1,4 @@\n-d05ebaad15fbffce6d707c138c84d7b60fcf5ffd\n+58560d5163381b0f1c893bd0d035b7a0a1631f92\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/druntime repository."}, {"sha": "40030ad35b8025311deb638510c4c5b0c4d980d5", "filename": "libphobos/libdruntime/rt/critical_.d", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d249ba878cc0c300cb8c39988a57fa4ca93f9088/libphobos%2Flibdruntime%2Frt%2Fcritical_.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d249ba878cc0c300cb8c39988a57fa4ca93f9088/libphobos%2Flibdruntime%2Frt%2Fcritical_.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Fcritical_.d?ref=d249ba878cc0c300cb8c39988a57fa4ca93f9088", "patch": "@@ -31,12 +31,30 @@ extern (C) void _d_critical_term()\n \n extern (C) void _d_criticalenter(D_CRITICAL_SECTION* cs)\n {\n+    assert(cs !is null);\n     ensureMutex(cast(shared(D_CRITICAL_SECTION*)) cs);\n     lockMutex(&cs.mtx);\n }\n \n+extern (C) void _d_criticalenter2(D_CRITICAL_SECTION** pcs)\n+{\n+    if (atomicLoad!(MemoryOrder.acq)(*cast(shared) pcs) is null)\n+    {\n+        lockMutex(cast(Mutex*)&gcs.mtx);\n+        if (atomicLoad!(MemoryOrder.raw)(*cast(shared) pcs) is null)\n+        {\n+            auto cs = new shared D_CRITICAL_SECTION;\n+            initMutex(cast(Mutex*)&cs.mtx);\n+            atomicStore!(MemoryOrder.rel)(*cast(shared) pcs, cs);\n+        }\n+        unlockMutex(cast(Mutex*)&gcs.mtx);\n+    }\n+    lockMutex(&(*pcs).mtx);\n+}\n+\n extern (C) void _d_criticalexit(D_CRITICAL_SECTION* cs)\n {\n+    assert(cs !is null);\n     unlockMutex(&cs.mtx);\n }\n "}]}