{"sha": "c29a4cbc4b190e2c58bb6929a64bc62fbc438019", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI5YTRjYmM0YjE5MGUyYzU4YmI2OTI5YTY0YmM2MmZiYzQzODAxOQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-07T23:18:58Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-07T23:18:58Z"}, "message": "(collect_expansion): If traditional...\n\n(collect_expansion): If traditional, set stringify member to\nSHARP_TOKEN regardless of the value of stringify_sharp_token_type.\n\nFrom-SVN: r9334", "tree": {"sha": "af36bccf208655a611e738ae24b18fd71eaa2cff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af36bccf208655a611e738ae24b18fd71eaa2cff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c29a4cbc4b190e2c58bb6929a64bc62fbc438019", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c29a4cbc4b190e2c58bb6929a64bc62fbc438019", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c29a4cbc4b190e2c58bb6929a64bc62fbc438019", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c29a4cbc4b190e2c58bb6929a64bc62fbc438019/comments", "author": null, "committer": null, "parents": [{"sha": "cceb347c21787a3e5495ca4eabfb17c24e7e4c87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cceb347c21787a3e5495ca4eabfb17c24e7e4c87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cceb347c21787a3e5495ca4eabfb17c24e7e4c87"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "ec48f5ced685ec228e42b04a967fd9c87e296e99", "filename": "gcc/cccp.c", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29a4cbc4b190e2c58bb6929a64bc62fbc438019/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29a4cbc4b190e2c58bb6929a64bc62fbc438019/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=c29a4cbc4b190e2c58bb6929a64bc62fbc438019", "patch": "@@ -6125,18 +6125,26 @@ collect_expansion (buf, end, nargs, arglist)\n \t  if (arg->name[0] == c\n \t      && arg->length == id_len\n \t      && bcmp (arg->name, id_beg, id_len) == 0) {\n-\t    if (expected_delimiter && warn_stringify) {\n-\t      if (traditional) {\n-\t\twarning (\"macro argument `%.*s' is stringified.\",\n-\t\t\t id_len, arg->name);\n-\t      } else {\n-\t\twarning (\"macro arg `%.*s' would be stringified with -traditional.\",\n-\t\t\t id_len, arg->name);\n+\t    enum sharp_token_type tpat_stringify;\n+\t    if (expected_delimiter) {\n+\t      if (warn_stringify) {\n+\t\tif (traditional) {\n+\t\t  warning (\"macro argument `%.*s' is stringified.\",\n+\t\t\t   id_len, arg->name);\n+\t\t} else {\n+\t\t  warning (\"macro arg `%.*s' would be stringified with -traditional.\",\n+\t\t\t   id_len, arg->name);\n+\t\t}\n \t      }\n+\t      /* If ANSI, don't actually substitute inside a string.  */\n+\t      if (!traditional)\n+\t\tbreak;\n+\t      tpat_stringify = SHARP_TOKEN;\n+\t    } else {\n+\t      tpat_stringify\n+\t\t= (stringify == id_beg\n+\t\t   ? stringify_sharp_token_type : NO_SHARP_TOKEN);\n \t    }\n-\t    /* If ANSI, don't actually substitute inside a string.  */\n-\t    if (!traditional && expected_delimiter)\n-\t      break;\n \t    /* make a pat node for this arg and append it to the end of\n \t       the pat list */\n \t    tpat = (struct reflist *) xmalloc (sizeof (struct reflist));\n@@ -6145,9 +6153,7 @@ collect_expansion (buf, end, nargs, arglist)\n \t      = concat == id_beg ? concat_sharp_token_type : NO_SHARP_TOKEN;\n \t    tpat->raw_after = NO_SHARP_TOKEN;\n \t    tpat->rest_args = arg->rest_args;\n-\t    tpat->stringify\n-\t      = ((traditional ? expected_delimiter : stringify == id_beg)\n-\t\t ? stringify_sharp_token_type : NO_SHARP_TOKEN);\n+\t    tpat->stringify = tpat_stringify;\n \n \t    if (endpat == NULL)\n \t      defn->pattern = tpat;"}]}