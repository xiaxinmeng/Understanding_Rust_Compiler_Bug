{"sha": "9b74f93310e3c0ff495dd8fb15b547b28e9be506", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI3NGY5MzMxMGUzYzBmZjQ5NWRkOGZiMTViNTQ3YjI4ZTliZTUwNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-03-14T14:41:53Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-03-14T14:41:53Z"}, "message": "PR c++/79393 DR 1658 workaround\n\n\tPR c++/79393 DR 1658 workaround\n\t* method.c (synthesized_method_base_walk): Inihibit abstract class\n\tvirtual base access check here.\n\t(synthesized_method_walk): Not here.\n\nFrom-SVN: r246126", "tree": {"sha": "bd1f58aaa6bce2600e92e1cd3934e91363295269", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd1f58aaa6bce2600e92e1cd3934e91363295269"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b74f93310e3c0ff495dd8fb15b547b28e9be506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b74f93310e3c0ff495dd8fb15b547b28e9be506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b74f93310e3c0ff495dd8fb15b547b28e9be506", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b74f93310e3c0ff495dd8fb15b547b28e9be506/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "927595086615da94c52b164049a45ebf6e299623", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/927595086615da94c52b164049a45ebf6e299623", "html_url": "https://github.com/Rust-GCC/gccrs/commit/927595086615da94c52b164049a45ebf6e299623"}], "stats": {"total": 63, "additions": 47, "deletions": 16}, "files": [{"sha": "aa74b007628d358ee7fa7355cf9e9c6f7a1ed514", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b74f93310e3c0ff495dd8fb15b547b28e9be506/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b74f93310e3c0ff495dd8fb15b547b28e9be506/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9b74f93310e3c0ff495dd8fb15b547b28e9be506", "patch": "@@ -1,3 +1,10 @@\n+2017-03-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/79393 DR 1658 workaround\n+\t* method.c (synthesized_method_base_walk): Inihibit abstract class\n+\tvirtual base access check here.\n+\t(synthesized_method_walk): Not here.\n+\n 2017-03-13  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/79393 DR 1658 workaround"}, {"sha": "b4c1f60da034a8ed010b48b017379e90dbbe0dbb", "filename": "gcc/cp/method.c", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b74f93310e3c0ff495dd8fb15b547b28e9be506/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b74f93310e3c0ff495dd8fb15b547b28e9be506/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=9b74f93310e3c0ff495dd8fb15b547b28e9be506", "patch": "@@ -1420,10 +1420,10 @@ walk_field_subobs (tree fields, tree fnname, special_function_kind sfk,\n     }\n }\n \n-// Base walker helper for synthesized_method_walk.  Inspect a direct\n-// or virtual base.  BINFO is the parent type's binfo.  BASE_BINFO is\n-// the base binfo of interests.  All other parms are as for\n-// synthesized_method_walk, or its local vars.\n+/* Base walker helper for synthesized_method_walk.  Inspect a direct\n+   or virtual base.  BINFO is the parent type's binfo.  BASE_BINFO is\n+   the base binfo of interests.  All other parms are as for\n+   synthesized_method_walk, or its local vars.  */\n \n static tree\n synthesized_method_base_walk (tree binfo, tree base_binfo, \n@@ -1436,7 +1436,8 @@ synthesized_method_base_walk (tree binfo, tree base_binfo,\n {\n   bool inherited_binfo = false;\n   tree argtype = NULL_TREE;\n-  \n+  deferring_kind defer = dk_no_deferred;\n+\n   if (copy_arg_p)\n     argtype = build_stub_type (BINFO_TYPE (base_binfo), quals, move_p);\n   else if ((inherited_binfo\n@@ -1445,11 +1446,21 @@ synthesized_method_base_walk (tree binfo, tree base_binfo,\n       argtype = inherited_parms;\n       /* Don't check access on the inherited constructor.  */\n       if (flag_new_inheriting_ctors)\n-\tpush_deferring_access_checks (dk_deferred);\n+\tdefer = dk_deferred;\n     }\n+  /* To be conservative, ignore access to the base dtor that\n+     DR1658 instructs us to ignore.  See the comment in\n+     synthesized_method_walk.  */\n+  else if (cxx_dialect >= cxx14 && fnname == complete_dtor_identifier\n+\t   && BINFO_VIRTUAL_P (base_binfo)\n+\t   && ABSTRACT_CLASS_TYPE_P (BINFO_TYPE (binfo)))\n+    defer = dk_no_check;\n+\n+  if (defer != dk_no_deferred)\n+    push_deferring_access_checks (defer);\n   tree rval = locate_fn_flags (base_binfo, fnname, argtype, flags,\n \t\t\t       diag ? tf_warning_or_error : tf_none);\n-  if (inherited_binfo && flag_new_inheriting_ctors)\n+  if (defer != dk_no_deferred)\n     pop_deferring_access_checks ();\n \n   process_subob_fn (rval, spec_p, trivial_p, deleted_p,\n@@ -1677,22 +1688,13 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n       if (constexpr_p)\n \t*constexpr_p = false;\n \n-      /* To be conservative, ignore access to the base dtor that\n-\t DR1658 instructs us to ignore.  */\n-      bool no_access_check = (cxx_dialect >= cxx14\n-\t\t\t      && ABSTRACT_CLASS_TYPE_P (ctype));\n-\n-      if (no_access_check)\n-\tpush_deferring_access_checks (dk_no_check);\n       FOR_EACH_VEC_ELT (*vbases, i, base_binfo)\n \tsynthesized_method_base_walk (binfo, base_binfo, quals,\n \t\t\t\t      copy_arg_p, move_p, ctor_p,\n \t\t\t\t      inheriting_ctor, inherited_parms,\n \t\t\t\t      fnname, flags, diag,\n \t\t\t\t      spec_p, trivial_p,\n \t\t\t\t      deleted_p, constexpr_p);\n-      if (no_access_check)\n-\tpop_deferring_access_checks ();\n     }\n \n   /* Now handle the non-static data members.  */"}, {"sha": "ebd9d905e55543692b06415c1a35744fc9c6f38e", "filename": "gcc/testsuite/g++.dg/cpp1y/pr79393-2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b74f93310e3c0ff495dd8fb15b547b28e9be506/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79393-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b74f93310e3c0ff495dd8fb15b547b28e9be506/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79393-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79393-2.C?ref=9b74f93310e3c0ff495dd8fb15b547b28e9be506", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do compile { target c++14 } }\n+\n+// DR 1658, inaccessible dtor of virtual base doesn't affect an\n+// abstract class.  But we should stil check access to non-virtual bases.\n+\n+class C;\n+\n+struct A {\n+private:\n+  ~A (){  }\n+  friend class C;\n+};\n+\n+struct B : A { // { dg-error \"is private\" }\n+  virtual bool Ok () = 0; // abstract\n+};\n+\n+struct C : B {\n+  ~C () \n+  { }  // { dg-error \"use of deleted\" }\n+  virtual bool Ok ();\n+};"}]}