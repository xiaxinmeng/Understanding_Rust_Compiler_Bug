{"sha": "a53c400d2a9268f07b636784464c156656aed8c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUzYzQwMGQyYTkyNjhmMDdiNjM2Nzg0NDY0YzE1NjY1NmFlZDhjNA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-01-16T21:35:51Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-01-16T21:35:51Z"}, "message": "Point.java (toString): Use getClass().getName().\n\n\t* java/awt/Point.java (toString): Use getClass().getName().\n\tAdded javadoc.\n\nFrom-SVN: r48929", "tree": {"sha": "c0d38391e3ed50f589847c6f899ffa7d1a8c530d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0d38391e3ed50f589847c6f899ffa7d1a8c530d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a53c400d2a9268f07b636784464c156656aed8c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53c400d2a9268f07b636784464c156656aed8c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a53c400d2a9268f07b636784464c156656aed8c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53c400d2a9268f07b636784464c156656aed8c4/comments", "author": null, "committer": null, "parents": [{"sha": "0df2959645aa77ffb3ea5634619eca1f84ac2410", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df2959645aa77ffb3ea5634619eca1f84ac2410", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0df2959645aa77ffb3ea5634619eca1f84ac2410"}], "stats": {"total": 102, "additions": 95, "deletions": 7}, "files": [{"sha": "fc95f030ec122090f6749722c022800b2651e2ef", "filename": "libjava/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53c400d2a9268f07b636784464c156656aed8c4/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53c400d2a9268f07b636784464c156656aed8c4/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a53c400d2a9268f07b636784464c156656aed8c4", "patch": "@@ -1,5 +1,8 @@\n 2002-01-16  Tom Tromey  <tromey@redhat.com>\n \n+\t* java/awt/Point.java (toString): Use getClass().getName().\n+\tAdded javadoc.\n+\n \t* java/util/IdentityHashMap.java (IdentityHashMap): Removed\n \tcommented code.\n \t(hash): Correctly compute initial value for `h'."}, {"sha": "e03b8a8b8a30fee970fd1bd76e543c16703ca1ac", "filename": "libjava/java/awt/Point.java", "status": "modified", "additions": 92, "deletions": 7, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53c400d2a9268f07b636784464c156656aed8c4/libjava%2Fjava%2Fawt%2FPoint.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53c400d2a9268f07b636784464c156656aed8c4/libjava%2Fjava%2Fawt%2FPoint.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FPoint.java?ref=a53c400d2a9268f07b636784464c156656aed8c4", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2002  Free Software Foundation\n \n    This file is part of libjava.\n \n@@ -9,28 +9,69 @@\n package java.awt;\n import java.awt.geom.Point2D;\n \n-/**\n- * @author Per Bothner <bothner@cygnus.com>\n- * @date February 8, 1999.\n- */\n-\n /* Written using \"Java Class Libraries\", 2nd edition, plus online\n  * API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct, except that neither toString\n  * nor hashCode have been compared with JDK output.\n  */\n \n+/**\n+ * This class represents a point on the screen using cartesian coordinates.\n+ *\n+ * @author Per Bothner <bothner@cygnus.com>\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @date February 8, 1999.\n+ */\n public class Point extends Point2D implements java.io.Serializable\n {\n+  /**\n+   * @serial The X coordinate of the point.\n+   */\n   public int x;\n+\n+  /**\n+   * @serial The Y coordinate of the point.\n+   */\n   public int y;\n \n+  /**\n+   * Initializes a new instance of <code>Point</code> representing the\n+   * coordiates (0,0).\n+   */\n   public Point () { }\n \n+  /**\n+   * Initializes a new instance of <code>Point</code> with coordinates\n+   * identical to the coordinates of the specified points.\n+   *\n+   * @param point The point to copy the coordinates from.\n+   */\n   public Point (Point p) { this.x = p.x;  this.y = p.y; }\n \n+  /**\n+   * Initializes a new instance of <code>Point</code> with the specified\n+   * coordinates.\n+   *\n+   * @param x The X coordinate of this point.\n+   * @param y The Y coordinate of this point.\n+   */\n   public Point (int x, int y) { this.x = x;  this.y = y; }\n \n+  /**\n+   * Tests whether or not this object is equal to the specified object.\n+   * This will be true if and only if the specified objectj:\n+   * <p>\n+   * <ul>\n+   * <li>Is not <code>null</code>.\n+   * <li>Is an instance of <code>Point</code>.\n+   * <li>Has X and Y coordinates equal to this object's.\n+   * </ul>\n+   *\n+   * @param obj The object to test against for equality.\n+   *\n+   * @return <code>true</code> if the specified object is equal to this\n+   * object, <code>false</code> otherwise.\n+  */\n   public boolean equals (Object obj)\n   {\n     if (! (obj instanceof Point))\n@@ -39,21 +80,65 @@ public boolean equals (Object obj)\n     return this.x == p.x && this.y == p.y;\n   }\n \n+  /**\n+   * Returns a hash value for this point.\n+   *\n+   * @param A hash value for this point.\n+   */\n   public int hashCode () { return x ^ y; }\n \n+  /**\n+   * Returns the location of this object as a point.  A pretty useless\n+   * method.  It is included to mimic the <code>getLocation</code> method\n+   * in component.\n+   *\n+   * @return This point.\n+   */\n   public Point getLocation () { return new Point(this); }\n \n+  /**\n+   * Sets this object's coordinates to the specified values.  This method\n+   * is identical to the <code>setLocation(int, int)</code> method.\n+   *\n+   * @param x The new X coordinate.\n+   * @param y The new Y coordinate.\n+   */\n   public void move (int x, int y) { this.x = x;  this.y = y; }\n \n+  /**\n+   * Sets this object's coordinates to the specified values.  This method\n+   * is identical to the <code>move()</code> method.\n+   *\n+   * @param x The new X coordinate.\n+   * @param y The new Y coordinate.\n+   */\n   public void setLocation (int x, int y) { this.x = x;  this.y = y; }\n \n+  /**\n+   * Sets this object's coordinates to match those of the specified point.\n+   *\n+   * @param point The point to copy the coordinates from.\n+   */\n   public void setLocation (Point pt) { this.x = pt.x;  this.y = pt.y; }\n \n+  /**\n+   * Changes the coordinates of this point such that the specified \n+   * <code>dx</code> parameter is added to the existing X coordinate and\n+   * <code>dy</code> is added to the existing Y coordinate.\n+   *\n+   * @param dx The amount to add to the X coordinate.\n+   * @param dy The amount to add to the Y coordinate.\n+   */\n   public void translate (int x, int y) { this.x += x;  this.y += y; }\n \n+  /**\n+   * Returns a string representation of this object.\n+   *\n+   * @return A string representation of this object.\n+   */\n   public String toString ()\n   {\n-    return \"Point[x:\"+x+\",y:\"+y+']';\n+    return getClass().getName() + \"[x:\"+x+\",y:\"+y+']';\n   }\n \n   public double getX() { return x; }"}]}