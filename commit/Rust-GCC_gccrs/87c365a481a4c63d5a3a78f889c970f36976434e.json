{"sha": "87c365a481a4c63d5a3a78f889c970f36976434e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdjMzY1YTQ4MWE0YzYzZDVhM2E3OGY4ODljOTcwZjM2OTc2NDM0ZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2006-07-19T06:45:34Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2006-07-19T06:45:34Z"}, "message": "invoke.texi (RS/6000 and PowerPC Options): Document that -mlongcall does not guarantee all calls will be long.\n\n\t* doc/invoke.texi (RS/6000 and PowerPC Options): Document that\n\t-mlongcall does not guarantee all calls will be long.\n\t* doc/extend.texi (long_call/short_call): Document that longcall\n\tdoes not guarantee a long call will be used.\n\t(longcall/shortcall): Likewise.\n\nFrom-SVN: r115582", "tree": {"sha": "11531a40874b3c4d010cc3bd5b40f6af72ba819d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11531a40874b3c4d010cc3bd5b40f6af72ba819d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87c365a481a4c63d5a3a78f889c970f36976434e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87c365a481a4c63d5a3a78f889c970f36976434e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87c365a481a4c63d5a3a78f889c970f36976434e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87c365a481a4c63d5a3a78f889c970f36976434e/comments", "author": null, "committer": null, "parents": [{"sha": "2e0d61d983c3959a2ab7765721385e75b5bc22c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e0d61d983c3959a2ab7765721385e75b5bc22c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e0d61d983c3959a2ab7765721385e75b5bc22c2"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "7ade881bea46c6227db8e38c8e849a4ff93bd2a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c365a481a4c63d5a3a78f889c970f36976434e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c365a481a4c63d5a3a78f889c970f36976434e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87c365a481a4c63d5a3a78f889c970f36976434e", "patch": "@@ -1,3 +1,11 @@\n+2006-07-17  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* doc/invoke.texi (RS/6000 and PowerPC Options): Document that\n+\t-mlongcall does not guarantee all calls will be long.\n+\t* doc/extend.texi (long_call/short_call): Document that longcall\n+\tdoes not guarantee a long call will be used.\n+\t(longcall/shortcall): Likewise.\n+\n 2006-07-18  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/28283"}, {"sha": "7314e520ab5ea4577191f8ef4bd0ca47564d55fa", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c365a481a4c63d5a3a78f889c970f36976434e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c365a481a4c63d5a3a78f889c970f36976434e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=87c365a481a4c63d5a3a78f889c970f36976434e", "patch": "@@ -1962,20 +1962,21 @@ from the USP register in the function prologue.\n This attribute specifies how a particular function is called on\n ARM@.  Both attributes override the @option{-mlong-calls} (@pxref{ARM Options})\n command line switch and @code{#pragma long_calls} settings.  The\n-@code{long_call} attribute causes the compiler to always call the\n-function by first loading its address into a register and then using the\n-contents of that register.   The @code{short_call} attribute always places\n+@code{long_call} attribute indicates that the function might be far\n+away from the call site and require a different (more expensive)\n+calling sequence.   The @code{short_call} attribute always places\n the offset to the function from the call site into the @samp{BL}\n instruction directly.\n \n @item longcall/shortcall\n @cindex functions called via pointer on the RS/6000 and PowerPC\n-On the Blackfin, RS/6000 and PowerPC, the @code{longcall} attribute causes\n-the compiler to always call this function via a pointer, just as it would if\n-the @option{-mlongcall} option had been specified.  The @code{shortcall}\n-attribute causes the compiler not to do this.  These attributes override\n-both the @option{-mlongcall} switch and, on the RS/6000 and PowerPC, the\n-@code{#pragma longcall} setting.\n+On the Blackfin, RS/6000 and PowerPC, the @code{longcall} attribute\n+indicates that the function might be far away from the call site and\n+require a different (more expensive) calling sequence.  The\n+@code{shortcall} attribute indicates that the function is always close\n+enough for the shorter calling sequence to be used.  These attributes\n+override both the @option{-mlongcall} switch and, on the RS/6000 and\n+PowerPC, the @code{#pragma longcall} setting.\n \n @xref{RS/6000 and PowerPC Options}, for more information on whether long\n calls are necessary."}, {"sha": "7d72bd7e51d1222f3b55eeec3bc724a42b362c21", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c365a481a4c63d5a3a78f889c970f36976434e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c365a481a4c63d5a3a78f889c970f36976434e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=87c365a481a4c63d5a3a78f889c970f36976434e", "patch": "@@ -11906,11 +11906,13 @@ names in the assembly language output using symbolic forms.\n @itemx -mno-longcall\n @opindex mlongcall\n @opindex mno-longcall\n-Default to making all function calls indirectly, using a register, so\n-that functions which reside further than 32 megabytes (33,554,432\n-bytes) from the current location can be called.  This setting can be\n-overridden by the @code{shortcall} function attribute, or by\n-@code{#pragma longcall(0)}.\n+By default assume that all calls are far away so that a longer more\n+expensive calling sequence is required.  This is required for calls\n+further than 32 megabytes (33,554,432 bytes) from the current location.\n+A short call will be generated if the compiler knows\n+the call cannot be that far away.  This setting can be overridden by\n+the @code{shortcall} function attribute, or by @code{#pragma\n+longcall(0)}.\n \n Some linkers are capable of detecting out-of-range calls and generating\n glue code on the fly.  On these systems, long calls are unnecessary and"}]}