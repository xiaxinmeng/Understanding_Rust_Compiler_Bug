{"sha": "70e72065c34129a5b5d3381b111f22f18c5c3aa3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBlNzIwNjVjMzQxMjlhNWI1ZDMzODFiMTExZjIyZjE4YzVjM2FhMw==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael.morin@tele2.fr", "date": "2009-01-04T19:12:16Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2009-01-04T19:12:16Z"}, "message": "re PR fortran/35681 (wrong result for vector subscripted array expression in MVBITS)\n\n2009-01-04  Mikael Morin  <mikael.morin@tele2.fr>\n\n\tPR fortran/35681\n\t* ChangeLog-2008: Fix function name.\n\n\tPR fortran/38487\n\t* dependency.c (gfc_check_argument_var_dependency):\n\tMove the check for pointerness inside the if block\n\tso that it doesn't affect the return value.\n\n\tPR fortran/38669\n\t* trans-stmt.c (gfc_trans_call):\n\tAdd the dependency code after the loop bounds calculation one.\n\n2009-01-04  Mikael Morin  <mikael.morin@tele2.fr>\n\n\tPR fortran/38669\n\t* gfortran.dg/elemental_dependency_3.f90: New test.\n\t* gfortran.dg/elemental_subroutine_7.f90: New test.\n\nFrom-SVN: r143057", "tree": {"sha": "5cc6e4359adb9913ddf8a2c226d0cb5b48ec93a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cc6e4359adb9913ddf8a2c226d0cb5b48ec93a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70e72065c34129a5b5d3381b111f22f18c5c3aa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70e72065c34129a5b5d3381b111f22f18c5c3aa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70e72065c34129a5b5d3381b111f22f18c5c3aa3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70e72065c34129a5b5d3381b111f22f18c5c3aa3/comments", "author": null, "committer": null, "parents": [{"sha": "4c77d7f403bb9f6ce2a55dc40e1bf87720f6e3eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c77d7f403bb9f6ce2a55dc40e1bf87720f6e3eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c77d7f403bb9f6ce2a55dc40e1bf87720f6e3eb"}], "stats": {"total": 133, "additions": 114, "deletions": 19}, "files": [{"sha": "2bf2a0185a2474214a85ffe6fb235b77e8a2a73e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e72065c34129a5b5d3381b111f22f18c5c3aa3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e72065c34129a5b5d3381b111f22f18c5c3aa3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=70e72065c34129a5b5d3381b111f22f18c5c3aa3", "patch": "@@ -1,3 +1,17 @@\n+2009-01-04  Mikael Morin  <mikael.morin@tele2.fr>\n+\n+\tPR fortran/35681\n+\t* ChangeLog-2008: Fix function name.\n+\n+\tPR fortran/38487\n+\t* dependency.c (gfc_check_argument_var_dependency):\n+\tMove the check for pointerness inside the if block\n+\tso that it doesn't affect the return value.\n+\n+\tPR fortran/38669\n+\t* trans-stmt.c (gfc_trans_call):\n+\tAdd the dependency code after the loop bounds calculation one.\n+\n 2009-01-04  Daniel Franke  <franke.daniel@gmail.com>\n \n \t* intrinsic.c (do_simplify): Removed already implemented TODO."}, {"sha": "b4b7f2af893833432803fa20bc2035c52900870b", "filename": "gcc/fortran/ChangeLog-2008", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e72065c34129a5b5d3381b111f22f18c5c3aa3/gcc%2Ffortran%2FChangeLog-2008", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e72065c34129a5b5d3381b111f22f18c5c3aa3/gcc%2Ffortran%2FChangeLog-2008", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog-2008?ref=70e72065c34129a5b5d3381b111f22f18c5c3aa3", "patch": "@@ -322,9 +322,9 @@\n \t(gfc_check_fncall_dependency): Add elemental check flag.\n \tUpdate call to gfc_check_argument_dependency.\n \t* trans-stmt.c (gfc_trans_call): Make call to\n-\tgfc_conv_elemental_dependency unconditional, but with a flag\n+\tgfc_conv_elemental_dependencies unconditional, but with a flag\n \twhether we should check dependencies between variables.\n-\t(gfc_conv_elemental_dependency): Add elemental check flag.\n+\t(gfc_conv_elemental_dependencies): Add elemental check flag.\n \tUpdate call to gfc_check_fncall_dependency.\n \t* trans-expr.c (gfc_trans_arrayfunc_assign): Update call to\n \tgfc_check_fncall_dependency."}, {"sha": "b110f4a34b2299ec2a76bb6566a406f3e5d5641e", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e72065c34129a5b5d3381b111f22f18c5c3aa3/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e72065c34129a5b5d3381b111f22f18c5c3aa3/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=70e72065c34129a5b5d3381b111f22f18c5c3aa3", "patch": "@@ -469,23 +469,25 @@ gfc_check_argument_var_dependency (gfc_expr *var, sym_intent intent,\n       if (gfc_ref_needs_temporary_p (expr->ref)\n \t  || gfc_check_dependency (var, expr, !elemental))\n \t{\n-\t  if (elemental == ELEM_DONT_CHECK_VARIABLE\n-\t      && !gfc_is_data_pointer (var)\n-\t      && !gfc_is_data_pointer (expr))\n+\t  if (elemental == ELEM_DONT_CHECK_VARIABLE)\n \t    {\n-\t      /* Elemental procedures forbid unspecified intents, \n-\t\t and we don't check dependencies for INTENT_IN args.  */\n-\t      gcc_assert (intent == INTENT_OUT || intent == INTENT_INOUT);\n-\n-\t      /* We are told not to check dependencies. \n-\t\t We do it, however, and issue a warning in case we find one. \n-\t\t If a dependency is found in the case \n-\t\t elemental == ELEM_CHECK_VARIABLE, we will generate\n-\t\t a temporary, so we don't need to bother the user.  */\n-\t      gfc_warning (\"INTENT(%s) actual argument at %L might interfere \"\n-\t\t\t   \"with actual argument at %L.\", \n-\t\t\t   intent == INTENT_OUT ? \"OUT\" : \"INOUT\", \n-\t\t\t   &var->where, &expr->where);\n+\t      /* Too many false positive with pointers.  */\n+\t      if (!gfc_is_data_pointer (var) && !gfc_is_data_pointer (expr))\n+\t\t{\n+\t\t  /* Elemental procedures forbid unspecified intents, \n+\t\t     and we don't check dependencies for INTENT_IN args.  */\n+\t\t  gcc_assert (intent == INTENT_OUT || intent == INTENT_INOUT);\n+\n+\t\t  /* We are told not to check dependencies. \n+\t\t     We do it, however, and issue a warning in case we find one.\n+\t\t     If a dependency is found in the case \n+\t\t     elemental == ELEM_CHECK_VARIABLE, we will generate\n+\t\t     a temporary, so we don't need to bother the user.  */\n+\t\t  gfc_warning (\"INTENT(%s) actual argument at %L might \"\n+\t\t\t       \"interfere with actual argument at %L.\", \n+\t\t   \t       intent == INTENT_OUT ? \"OUT\" : \"INOUT\", \n+\t\t   \t       &var->where, &expr->where);\n+\t\t}\n \t      return 0;\n \t    }\n \t  else"}, {"sha": "801063d800cb105c697c471f8d153792843fae88", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e72065c34129a5b5d3381b111f22f18c5c3aa3/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e72065c34129a5b5d3381b111f22f18c5c3aa3/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=70e72065c34129a5b5d3381b111f22f18c5c3aa3", "patch": "@@ -386,6 +386,7 @@ gfc_trans_call (gfc_code * code, bool dependency_check)\n       stmtblock_t body;\n       stmtblock_t block;\n       gfc_se loopse;\n+      gfc_se depse;\n \n       /* gfc_walk_elemental_function_args renders the ss chain in the\n \t reverse order to the actual argument order.  */\n@@ -413,9 +414,14 @@ gfc_trans_call (gfc_code * code, bool dependency_check)\n \tcheck_variable = ELEM_CHECK_VARIABLE;\n       else\n \tcheck_variable = ELEM_DONT_CHECK_VARIABLE;\n-      gfc_conv_elemental_dependencies (&se, &loopse, code->resolved_sym,\n+\n+      gfc_init_se (&depse, NULL);\n+      gfc_conv_elemental_dependencies (&depse, &loopse, code->resolved_sym,\n \t\t\t\t       code->ext.actual, check_variable);\n \n+      gfc_add_block_to_block (&loop.pre,  &depse.pre);\n+      gfc_add_block_to_block (&loop.post, &depse.post);\n+\n       /* Generate the loop body.  */\n       gfc_start_scalarized_body (&loop, &body);\n       gfc_init_block (&block);"}, {"sha": "fde2ce2ad743861c2fdd042bc264a12289a2ca91", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e72065c34129a5b5d3381b111f22f18c5c3aa3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e72065c34129a5b5d3381b111f22f18c5c3aa3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=70e72065c34129a5b5d3381b111f22f18c5c3aa3", "patch": "@@ -1,3 +1,9 @@\n+2009-01-04  Mikael Morin  <mikael.morin@tele2.fr>\n+\n+\tPR fortran/38669\n+\t* gfortran.dg/elemental_dependency_3.f90: New test.\n+\t* gfortran.dg/elemental_subroutine_7.f90: New test.\n+\n 2009-01-04  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/struct-ret-3.c: Include unistd.h."}, {"sha": "ac0a8825ebbc7a1cbc0c26273627079a6f37f550", "filename": "gcc/testsuite/gfortran.dg/elemental_dependency_3.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e72065c34129a5b5d3381b111f22f18c5c3aa3/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_dependency_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e72065c34129a5b5d3381b111f22f18c5c3aa3/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_dependency_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_dependency_3.f90?ref=70e72065c34129a5b5d3381b111f22f18c5c3aa3", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! PR fortran/38669\n+! Temporary created for pointer as actual argument of an elemental subroutine\n+!\n+! Original testcase by Harald Anlauf <anlauf@gmx.de>\n+\n+program gfcbu84_main\n+  implicit none\n+  integer           :: jplev, k_lev\n+  real :: p(42)\n+  real, pointer :: q(:)\n+  jplev = 42\n+  k_lev = 1\n+  allocate (q(jplev))\n+  call tq_tvgh (q(k_lev:), p(k_lev:))\n+  deallocate (q)\n+\n+  contains\n+  elemental subroutine tq_tvgh (t, p)\n+    real ,intent (out)            :: t\n+    real ,intent (in)             :: p\n+    t=p\n+  end subroutine tq_tvgh\n+end program gfcbu84_main\n+! { dg-final { scan-tree-dump-times \"atmp\" 0 \"original\" } }"}, {"sha": "20e0e0c7f9a5fae4232bb99cce0e01604f4a6a63", "filename": "gcc/testsuite/gfortran.dg/elemental_subroutine_7.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70e72065c34129a5b5d3381b111f22f18c5c3aa3/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_subroutine_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70e72065c34129a5b5d3381b111f22f18c5c3aa3/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_subroutine_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_subroutine_7.f90?ref=70e72065c34129a5b5d3381b111f22f18c5c3aa3", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do run }\n+!\n+! PR fortran/38669\n+! Loop bounds temporaries used before being defined for elemental subroutines\n+!\n+! Original testcase by Harald Anlauf <anlauf@gmx.de>\n+\n+program gfcbu84_main\n+  implicit none\n+  integer           :: jplev, k_lev\n+  integer :: p(42)\n+  real    :: r(42)\n+  integer, pointer :: q(:)\n+  jplev = 42\n+  k_lev = 1\n+  call random_number (r)\n+  p = 20 * r - 10\n+  allocate (q(jplev))\n+\n+  q = 0\n+  call tq_tvgh (q(k_lev:), p(k_lev:))\n+  if (any (p /= q)) call abort\n+\n+  q = 0\n+  call tq_tvgh (q(k_lev:), (p(k_lev:)))\n+  if (any (p /= q)) call abort\n+\n+  q = 0\n+  call tq_tvgh (q(k_lev:), (p(p(k_lev:))))\n+  if (any (p(p) /= q)) call abort\n+\n+  deallocate (q)\n+\n+  contains\n+  elemental subroutine tq_tvgh (t, p)\n+    integer ,intent (out)            :: t\n+    integer ,intent (in)             :: p\n+    t=p\n+  end subroutine tq_tvgh\n+end program gfcbu84_main"}]}