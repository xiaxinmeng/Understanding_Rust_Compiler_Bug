{"sha": "f3ae4add6c51c6cfeb40cb26bb52f6bdfa3c4520", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNhZTRhZGQ2YzUxYzZjZmViNDBjYjI2YmI1MmY2YmRmYTNjNDUyMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-05-27T14:20:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-05-27T14:20:48Z"}, "message": "re PR tree-optimization/66272 (wrong code at -O3 on x86_64-linux-gnu)\n\n2015-05-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/66272\n\tRevert parts of\n\t2014-08-15  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/62031\n\t* tree-data-ref.c (dr_analyze_indices): Do not set\n\tDR_UNCONSTRAINED_BASE.\n\t(dr_may_alias_p): All indirect accesses have to go the\n\tformerly DR_UNCONSTRAINED_BASE path.\n\t* tree-data-ref.h (struct indices): Remove\n\tunconstrained_base member.\n\t(DR_UNCONSTRAINED_BASE): Remove.\n\n\t* gcc.dg/torture/pr66272.c: New testcase.\n\nFrom-SVN: r223759", "tree": {"sha": "7afffb21e685e332148aeeadaaea55d6ba1d8d54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7afffb21e685e332148aeeadaaea55d6ba1d8d54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3ae4add6c51c6cfeb40cb26bb52f6bdfa3c4520", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ae4add6c51c6cfeb40cb26bb52f6bdfa3c4520", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3ae4add6c51c6cfeb40cb26bb52f6bdfa3c4520", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ae4add6c51c6cfeb40cb26bb52f6bdfa3c4520/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "70660539ce8d6bc1c9b3cb39e26fc55b89d6ec6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70660539ce8d6bc1c9b3cb39e26fc55b89d6ec6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70660539ce8d6bc1c9b3cb39e26fc55b89d6ec6a"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "762c058d54b38b6e7b9347189e4078069404a430", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ae4add6c51c6cfeb40cb26bb52f6bdfa3c4520/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ae4add6c51c6cfeb40cb26bb52f6bdfa3c4520/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3ae4add6c51c6cfeb40cb26bb52f6bdfa3c4520", "patch": "@@ -1,3 +1,18 @@\n+2015-05-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/66272\n+\tRevert parts of\n+\t2014-08-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/62031\n+\t* tree-data-ref.c (dr_analyze_indices): Do not set\n+\tDR_UNCONSTRAINED_BASE.\n+\t(dr_may_alias_p): All indirect accesses have to go the\n+\tformerly DR_UNCONSTRAINED_BASE path.\n+\t* tree-data-ref.h (struct indices): Remove\n+\tunconstrained_base member.\n+\t(DR_UNCONSTRAINED_BASE): Remove.\n+\n 2015-05-27  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* dwarf2out.c: Remove block_map."}, {"sha": "9afe448962196d4287fc1214221930a20a8fee90", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ae4add6c51c6cfeb40cb26bb52f6bdfa3c4520/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ae4add6c51c6cfeb40cb26bb52f6bdfa3c4520/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f3ae4add6c51c6cfeb40cb26bb52f6bdfa3c4520", "patch": "@@ -1,3 +1,12 @@\n+2015-05-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/66272\n+\tRevert parts of\n+\t2014-08-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/62031\n+\t* gcc.dg/torture/pr66272.c: New testcase.\n+\n 2015-05-27  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/vect/slp-reduc-7.c: New testcase."}, {"sha": "6f0148a45f95cc032ab3e38421e56c84c88a75ea", "filename": "gcc/testsuite/gcc.dg/torture/pr66272.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ae4add6c51c6cfeb40cb26bb52f6bdfa3c4520/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66272.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ae4add6c51c6cfeb40cb26bb52f6bdfa3c4520/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66272.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66272.c?ref=f3ae4add6c51c6cfeb40cb26bb52f6bdfa3c4520", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+\n+struct S\n+{\n+  int f0;\n+  int f1;\n+};\n+\n+int b;\n+\n+int main ()\n+{\n+  struct S a[2] = { 0 };\n+  struct S d = { 0, 1 };\n+  for (b = 0; b < 2; b++)\n+    {\n+      a[b] = d;\n+      d = a[0];\n+    }\n+  if (d.f1 != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "368d3dfc72a1d9d4a56c5ab8f0a5d2b6ac8460cb", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ae4add6c51c6cfeb40cb26bb52f6bdfa3c4520/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ae4add6c51c6cfeb40cb26bb52f6bdfa3c4520/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=f3ae4add6c51c6cfeb40cb26bb52f6bdfa3c4520", "patch": "@@ -1036,6 +1036,7 @@ dr_analyze_indices (struct data_reference *dr, loop_p nest, loop_p loop)\n \t\t\t\t base, memoff);\n \t  MR_DEPENDENCE_CLIQUE (ref) = MR_DEPENDENCE_CLIQUE (old);\n \t  MR_DEPENDENCE_BASE (ref) = MR_DEPENDENCE_BASE (old);\n+\t  DR_UNCONSTRAINED_BASE (dr) = true;\n \t  access_fns.safe_push (access_fn);\n \t}\n     }\n@@ -1453,7 +1454,8 @@ dr_may_alias_p (const struct data_reference *a, const struct data_reference *b,\n      offset/overlap based analysis but have to rely on points-to\n      information only.  */\n   if (TREE_CODE (addr_a) == MEM_REF\n-      && TREE_CODE (TREE_OPERAND (addr_a, 0)) == SSA_NAME)\n+      && (DR_UNCONSTRAINED_BASE (a)\n+\t  || TREE_CODE (TREE_OPERAND (addr_a, 0)) == SSA_NAME))\n     {\n       /* For true dependences we can apply TBAA.  */\n       if (flag_strict_aliasing\n@@ -1469,7 +1471,8 @@ dr_may_alias_p (const struct data_reference *a, const struct data_reference *b,\n \t\t\t\t       build_fold_addr_expr (addr_b));\n     }\n   else if (TREE_CODE (addr_b) == MEM_REF\n-\t   && TREE_CODE (TREE_OPERAND (addr_b, 0)) == SSA_NAME)\n+\t   && (DR_UNCONSTRAINED_BASE (b)\n+\t       || TREE_CODE (TREE_OPERAND (addr_b, 0)) == SSA_NAME))\n     {\n       /* For true dependences we can apply TBAA.  */\n       if (flag_strict_aliasing"}, {"sha": "9d8e6992f800319f649e60e8298f043cf3d6066e", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ae4add6c51c6cfeb40cb26bb52f6bdfa3c4520/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ae4add6c51c6cfeb40cb26bb52f6bdfa3c4520/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=f3ae4add6c51c6cfeb40cb26bb52f6bdfa3c4520", "patch": "@@ -81,6 +81,10 @@ struct indices\n \n   /* A list of chrecs.  Access functions of the indices.  */\n   vec<tree> access_fns;\n+\n+  /* Whether BASE_OBJECT is an access representing the whole object\n+     or whether the access could not be constrained.  */\n+  bool unconstrained_base;\n };\n \n struct dr_alias\n@@ -129,6 +133,7 @@ struct data_reference\n #define DR_STMT(DR)                (DR)->stmt\n #define DR_REF(DR)                 (DR)->ref\n #define DR_BASE_OBJECT(DR)         (DR)->indices.base_object\n+#define DR_UNCONSTRAINED_BASE(DR)  (DR)->indices.unconstrained_base\n #define DR_ACCESS_FNS(DR)\t   (DR)->indices.access_fns\n #define DR_ACCESS_FN(DR, I)        DR_ACCESS_FNS (DR)[I]\n #define DR_NUM_DIMENSIONS(DR)      DR_ACCESS_FNS (DR).length ()"}]}