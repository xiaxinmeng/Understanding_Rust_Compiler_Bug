{"sha": "abef87891cf580e9eb275a1f0c399a47d048daa5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJlZjg3ODkxY2Y1ODBlOWViMjc1YTFmMGMzOTlhNDdkMDQ4ZGFhNQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "1998-10-23T04:09:58Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "1998-10-23T04:09:58Z"}, "message": "machmode.h (mode_mask_array): No longer const.\n\n* machmode.h (mode_mask_array): No longer const.\n* rtl.c (init_rtl): Fully initialize it if EXTRA_CC_MODES defined.\n\nFrom-SVN: r23245", "tree": {"sha": "5f89296cafcee1561dc1ca9163f4872a86ce561a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f89296cafcee1561dc1ca9163f4872a86ce561a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abef87891cf580e9eb275a1f0c399a47d048daa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abef87891cf580e9eb275a1f0c399a47d048daa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abef87891cf580e9eb275a1f0c399a47d048daa5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abef87891cf580e9eb275a1f0c399a47d048daa5/comments", "author": null, "committer": null, "parents": [{"sha": "0aaa90896608511a17211385ede533ef5b46327e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aaa90896608511a17211385ede533ef5b46327e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aaa90896608511a17211385ede533ef5b46327e"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "fd28d08a7af1c59b47d5fd2f010cfecc39dd01a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abef87891cf580e9eb275a1f0c399a47d048daa5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abef87891cf580e9eb275a1f0c399a47d048daa5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abef87891cf580e9eb275a1f0c399a47d048daa5", "patch": "@@ -1,3 +1,8 @@\n+Fri Oct 23 04:06:57 1998  Richard Earnshaw (rearnsha@arm.com)\n+\n+\t* machmode.h (mode_mask_array): No longer const.\n+\t* rtl.c (init_rtl): Fully initialize it if EXTRA_CC_MODES defined.\n+\n Fri Oct 23 11:19:06 1998  Martin v. L\ufffdwis <loewis@informatik.hu-berlin.de>\n \n \t* frame.c: Somewhat explain `FDE'."}, {"sha": "399e1b2f0dfe3ec633ee027e0bfa0aaeea47fab8", "filename": "gcc/machmode.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abef87891cf580e9eb275a1f0c399a47d048daa5/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abef87891cf580e9eb275a1f0c399a47d048daa5/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=abef87891cf580e9eb275a1f0c399a47d048daa5", "patch": "@@ -196,7 +196,7 @@ extern int mode_unit_size[];\n /* Get a bitmask containing 1 for all bits in a word\n    that fit within mode MODE.  */\n \n-extern const unsigned HOST_WIDE_INT mode_mask_array[];\n+extern unsigned HOST_WIDE_INT mode_mask_array[];\n \n #define GET_MODE_MASK(MODE) mode_mask_array[(int) (MODE)]\n "}, {"sha": "44e998b3723aeed67f6dbeeb7b558270ee32b6b2", "filename": "gcc/rtl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abef87891cf580e9eb275a1f0c399a47d048daa5/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abef87891cf580e9eb275a1f0c399a47d048daa5/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=abef87891cf580e9eb275a1f0c399a47d048daa5", "patch": "@@ -122,7 +122,7 @@ unsigned char mode_wider_mode[(int) MAX_MACHINE_MODE] = {\n \n /* Indexed by machine mode, gives mask of significant bits in mode.  */\n \n-const unsigned HOST_WIDE_INT mode_mask_array[(int) MAX_MACHINE_MODE] = {\n+unsigned HOST_WIDE_INT mode_mask_array[(int) MAX_MACHINE_MODE] = {\n #include \"machmode.def\"\n };\n \n@@ -901,6 +901,7 @@ init_rtl ()\n   for (i = (int) CCmode + 1; i < (int) MAX_MACHINE_MODE; i++)\n     {\n       mode_class[i] = MODE_CC;\n+      mode_mask_array[i] = mode_mask_array[(int) CCmode];\n       mode_size[i] = mode_size[(int) CCmode];\n       mode_unit_size[i] = mode_unit_size[(int) CCmode];\n       mode_wider_mode[i - 1] = i;"}]}