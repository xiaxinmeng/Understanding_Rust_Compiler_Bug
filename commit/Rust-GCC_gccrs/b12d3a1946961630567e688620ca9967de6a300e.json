{"sha": "b12d3a1946961630567e688620ca9967de6a300e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEyZDNhMTk0Njk2MTYzMDU2N2U2ODg2MjBjYTk5NjdkZTZhMzAwZQ==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-02-26T16:07:49Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-02-26T16:07:49Z"}, "message": "parse.y (function_invocation, [...]): Pass location to tree_code_get_expression.\n\n2005-02-26  James A. Morrison  <phython@gcc.gnu.org>\n\n        * parse.y (function_invocation, variable-ref, make_plus_expression):\n        Pass location to tree_code_get_expression.\n        * treetree.c (tree_code_generate_return): Set EXPR_LOCUS on retval.\n        (tree_code_get_expression): Wrap variable references in NOP_EXPRs and\n        set EXPR_LOCATION on ret1.\n        * treetree.h (tree_code_get_expression): Take the location of the\n        expression as an argument.\n\nFrom-SVN: r95584", "tree": {"sha": "7a5a07fc1d3a44f2efd5a27fd29b215571d2832f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a5a07fc1d3a44f2efd5a27fd29b215571d2832f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b12d3a1946961630567e688620ca9967de6a300e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b12d3a1946961630567e688620ca9967de6a300e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b12d3a1946961630567e688620ca9967de6a300e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b12d3a1946961630567e688620ca9967de6a300e/comments", "author": null, "committer": null, "parents": [{"sha": "7bcf4240fd314130140ebd7168666a8c50d748d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bcf4240fd314130140ebd7168666a8c50d748d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bcf4240fd314130140ebd7168666a8c50d748d1"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "eb5c55da45182e628b8398c7e012b270fdde8846", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12d3a1946961630567e688620ca9967de6a300e/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12d3a1946961630567e688620ca9967de6a300e/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=b12d3a1946961630567e688620ca9967de6a300e", "patch": "@@ -1,3 +1,13 @@\n+2005-02-26  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\t* parse.y (function_invocation, variable-ref, make_plus_expression):\n+\tPass location to tree_code_get_expression.\n+\t* treetree.c (tree_code_generate_return): Set EXPR_LOCUS on retval.\n+\t(tree_code_get_expression): Wrap variable references in NOP_EXPRs and\n+\tset EXPR_LOCATION on ret1.\n+\t* treetree.h (tree_code_get_expression): Take the location of the\n+\texpression as an argument.\n+\n 2005-02-26  James A. Morrison  <phython@gcc.gnu.org>\n \n \t* treelang.texi: Treelang does have warnings."}, {"sha": "be4436252218785fda25dba0b6c85ec0a4a66924", "filename": "gcc/treelang/parse.y", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12d3a1946961630567e688620ca9967de6a300e/gcc%2Ftreelang%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12d3a1946961630567e688620ca9967de6a300e/gcc%2Ftreelang%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Fparse.y?ref=b12d3a1946961630567e688620ca9967de6a300e", "patch": "@@ -675,7 +675,7 @@ NAME LEFT_PARENTHESIS expressions_with_commas_opt RIGHT_PARENTHESIS {\n   type = tree_code_get_type (NUMERIC_TYPE (prod));\n   prod->tp.pro.code = tree_code_get_expression (EXP_FUNCTION_INVOCATION, type,\n                                                 proto->tp.pro.code, parms,\n-                                                NULL);\n+                                                NULL, tok->tp.tok.location);\n   $$ = prod;\n }\n ;\n@@ -730,8 +730,9 @@ NAME {\n   OP1 (prod) = $1;\n   \n   prod->tp.pro.code =\n-    tree_code_get_expression (EXP_REFERENCE, type, \n-\t\t\t      symbol_table_entry->tp.pro.code, NULL, NULL);\n+    tree_code_get_expression (EXP_REFERENCE, type,\n+\t\t\t      symbol_table_entry->tp.pro.code, NULL, NULL,\n+\t\t\t      tok->tp.tok.location);\n   $$ = prod;\n }\n ;\n@@ -920,7 +921,8 @@ make_plus_expression (struct prod_token_parm_item* tok,\n       \n   prod->tp.pro.code = tree_code_get_expression (prod_code, type,\n \t\t\t\t\t\top1->tp.pro.code,\n-\t\t\t\t\t\top2->tp.pro.code, NULL);\n+\t\t\t\t\t\top2->tp.pro.code, NULL,\n+\t\t\t\t\t\ttok->tp.tok.location);\n \n   return prod;\n }"}, {"sha": "aea6e0ba5cbc6838671c3d02a63d8bca4ed0a685", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12d3a1946961630567e688620ca9967de6a300e/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12d3a1946961630567e688620ca9967de6a300e/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=b12d3a1946961630567e688620ca9967de6a300e", "patch": "@@ -589,6 +589,9 @@ tree_code_generate_return (tree type, tree exp)\n       TREE_SIDE_EFFECTS (setret) = 1;\n       TREE_USED (setret) = 1;\n       setret = build1 (RETURN_EXPR, type, setret);\n+      /* Use EXPR_LOCUS so we don't lose any information about the file we\n+\t are compiling.  */\n+      SET_EXPR_LOCUS (setret, EXPR_LOCUS (exp));\n     }\n    else\n      setret = build1 (RETURN_EXPR, type, NULL_TREE);\n@@ -647,7 +650,8 @@ tree_code_get_integer_value (unsigned char* chars, unsigned int length)\n tree\n tree_code_get_expression (unsigned int exp_type,\n                           tree type, tree op1, tree op2,\n-\t\t\t  tree op3 ATTRIBUTE_UNUSED)\n+\t\t\t  tree op3 ATTRIBUTE_UNUSED,\n+\t\t\t  location_t loc)\n {\n   tree ret1;\n   int operator;\n@@ -685,12 +689,13 @@ tree_code_get_expression (unsigned int exp_type,\n \n       /* Reference to a variable.  This is dead easy, just return the\n          decl for the variable.  If the TYPE is different than the\n-         variable type, convert it.  */\n+         variable type, convert it.  However, to keep accurate location\n+\t information we wrap it in a NOP_EXPR is is easily stripped.  */\n     case EXP_REFERENCE:\n       gcc_assert (op1);\n       TREE_USED (op1) = 1;\n       if (type == TREE_TYPE (op1))\n-        ret1 = op1;\n+        ret1 = build1 (NOP_EXPR, type, op1);\n       else\n         ret1 = fold (build1 (CONVERT_EXPR, type, op1));\n       break;\n@@ -710,6 +715,10 @@ tree_code_get_expression (unsigned int exp_type,\n       gcc_unreachable ();\n     }\n \n+  /* Declarations already have a location and constants can be shared so they\n+     shouldn't a location set on them.  */\n+  if (! DECL_P (ret1) && ! TREE_CONSTANT (ret1))\n+    SET_EXPR_LOCATION (ret1, loc);\n   return ret1;\n }\n "}, {"sha": "cb6891ebfddc914e9c221403eb60e0b45c15f0e6", "filename": "gcc/treelang/treetree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12d3a1946961630567e688620ca9967de6a300e/gcc%2Ftreelang%2Ftreetree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12d3a1946961630567e688620ca9967de6a300e/gcc%2Ftreelang%2Ftreetree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.h?ref=b12d3a1946961630567e688620ca9967de6a300e", "patch": "@@ -33,7 +33,8 @@ tree tree_code_add_parameter (tree list, tree proto_exp, tree exp);\n tree tree_code_get_integer_value (unsigned char *chars, unsigned int length);\n void tree_code_generate_return (tree type, tree exp);\n void tree_ggc_storage_always_used  (void *m);\n-tree tree_code_get_expression (unsigned int exp_type, tree type, tree op1, tree op2, tree op3);\n+tree tree_code_get_expression (unsigned int exp_type, tree type, tree op1,\n+\t\t\t       tree op2, tree op3, location_t loc);\n tree tree_code_get_numeric_type (unsigned int size1, unsigned int sign1);\n void tree_code_create_function_initial (tree prev_saved,\n \t\t\t\t\tlocation_t loc);"}]}