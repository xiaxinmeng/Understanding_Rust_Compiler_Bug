{"sha": "72774950676b37f320c6cd60ff1789da1106f3dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI3NzQ5NTA2NzZiMzdmMzIwYzZjZDYwZmYxNzg5ZGExMTA2ZjNkZA==", "commit": {"author": {"name": "Jose Ruiz", "email": "ruiz@adacore.com", "date": "2006-02-17T16:06:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-17T16:06:01Z"}, "message": "s-taprop-irix.adb, [...] (Set_False, [...]): Add Abort_Defer/Undefer pairs to avoid the possibility of a task being aborted...\n\n2006-02-17  Jose Ruiz  <ruiz@adacore.com>\n\n\t* s-taprop-irix.adb, s-taprop-hpux-dce.adb, s-taprop-linux.adb, \n\ts-taprop-solaris.adb, s-taprop-vms.adb, s-taprop-mingw.adb, \n\ts-taprop-posix.adb, s-taprop-vxworks.adb, s-taprop-lynxos.adb, \n\ts-taprop-tru64.adb (Set_False, Set_True, Suspend_Until_True): Add\n\tAbort_Defer/Undefer pairs to avoid the possibility of a task being\n\taborted while owning a lock.\n\nFrom-SVN: r111184", "tree": {"sha": "024e166c7349145b0d2523ffd817d9715eabc00a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/024e166c7349145b0d2523ffd817d9715eabc00a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72774950676b37f320c6cd60ff1789da1106f3dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72774950676b37f320c6cd60ff1789da1106f3dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72774950676b37f320c6cd60ff1789da1106f3dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72774950676b37f320c6cd60ff1789da1106f3dd/comments", "author": {"login": "JoseRuizAdaCore", "id": 22770339, "node_id": "MDQ6VXNlcjIyNzcwMzM5", "avatar_url": "https://avatars.githubusercontent.com/u/22770339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoseRuizAdaCore", "html_url": "https://github.com/JoseRuizAdaCore", "followers_url": "https://api.github.com/users/JoseRuizAdaCore/followers", "following_url": "https://api.github.com/users/JoseRuizAdaCore/following{/other_user}", "gists_url": "https://api.github.com/users/JoseRuizAdaCore/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoseRuizAdaCore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoseRuizAdaCore/subscriptions", "organizations_url": "https://api.github.com/users/JoseRuizAdaCore/orgs", "repos_url": "https://api.github.com/users/JoseRuizAdaCore/repos", "events_url": "https://api.github.com/users/JoseRuizAdaCore/events{/privacy}", "received_events_url": "https://api.github.com/users/JoseRuizAdaCore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aea625ddaee76c08abeb3d1eccd7bcd63dc455de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea625ddaee76c08abeb3d1eccd7bcd63dc455de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aea625ddaee76c08abeb3d1eccd7bcd63dc455de"}], "stats": {"total": 286, "additions": 261, "deletions": 25}, "files": [{"sha": "838f54e76f95a50f61ae414c43a1b056da3b6f97", "filename": "gcc/ada/s-taprop-hpux-dce.adb", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72774950676b37f320c6cd60ff1789da1106f3dd/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72774950676b37f320c6cd60ff1789da1106f3dd/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-hpux-dce.adb?ref=72774950676b37f320c6cd60ff1789da1106f3dd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2005, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2006, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -69,11 +69,21 @@ with System.Parameters;\n with System.Task_Primitives.Interrupt_Operations;\n --  used for Get_Interrupt_ID\n \n+with System.Soft_Links;\n+--  used for Defer/Undefer_Abort\n+\n+--  We use System.Soft_Links instead of System.Tasking.Initialization\n+--  because the later is a higher level package that we shouldn't depend on.\n+--  For example when using the restricted run time, it is replaced by\n+--  System.Tasking.Restricted.Stages.\n+\n with Unchecked_Conversion;\n with Unchecked_Deallocation;\n \n package body System.Task_Primitives.Operations is\n \n+   package SSL renames System.Soft_Links;\n+\n    use System.Tasking.Debug;\n    use System.Tasking;\n    use Interfaces.C;\n@@ -955,13 +965,17 @@ package body System.Task_Primitives.Operations is\n    procedure Set_False (S : in out Suspension_Object) is\n       Result  : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := pthread_mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n       S.State := False;\n \n       Result := pthread_mutex_unlock (S.L'Access);\n       pragma Assert (Result = 0);\n+\n+      SSL.Abort_Undefer.all;\n    end Set_False;\n \n    --------------\n@@ -971,6 +985,8 @@ package body System.Task_Primitives.Operations is\n    procedure Set_True (S : in out Suspension_Object) is\n       Result : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := pthread_mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n@@ -991,6 +1007,8 @@ package body System.Task_Primitives.Operations is\n \n       Result := pthread_mutex_unlock (S.L'Access);\n       pragma Assert (Result = 0);\n+\n+      SSL.Abort_Undefer.all;\n    end Set_True;\n \n    ------------------------\n@@ -1000,6 +1018,8 @@ package body System.Task_Primitives.Operations is\n    procedure Suspend_Until_True (S : in out Suspension_Object) is\n       Result : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := pthread_mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n@@ -1011,6 +1031,8 @@ package body System.Task_Primitives.Operations is\n          Result := pthread_mutex_unlock (S.L'Access);\n          pragma Assert (Result = 0);\n \n+         SSL.Abort_Undefer.all;\n+\n          raise Program_Error;\n       else\n          --  Suspend the task if the state is False. Otherwise, the task\n@@ -1023,10 +1045,12 @@ package body System.Task_Primitives.Operations is\n             S.Waiting := True;\n             Result := pthread_cond_wait (S.CV'Access, S.L'Access);\n          end if;\n-      end if;\n \n-      Result := pthread_mutex_unlock (S.L'Access);\n-      pragma Assert (Result = 0);\n+         Result := pthread_mutex_unlock (S.L'Access);\n+         pragma Assert (Result = 0);\n+\n+         SSL.Abort_Undefer.all;\n+      end if;\n    end Suspend_Until_True;\n \n    ----------------"}, {"sha": "efae88249dde4b6eb7e9bfbe602ccfd8b6680752", "filename": "gcc/ada/s-taprop-irix.adb", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72774950676b37f320c6cd60ff1789da1106f3dd/gcc%2Fada%2Fs-taprop-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72774950676b37f320c6cd60ff1789da1106f3dd/gcc%2Fada%2Fs-taprop-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-irix.adb?ref=72774950676b37f320c6cd60ff1789da1106f3dd", "patch": "@@ -60,11 +60,21 @@ with System.OS_Primitives;\n with System.IO;\n --  used for Put_Line\n \n+with System.Soft_Links;\n+--  used for Abort_Defer/Undefer\n+\n+--  We use System.Soft_Links instead of System.Tasking.Initialization\n+--  because the later is a higher level package that we shouldn't depend on.\n+--  For example when using the restricted run time, it is replaced by\n+--  System.Tasking.Restricted.Stages.\n+\n with Unchecked_Conversion;\n with Unchecked_Deallocation;\n \n package body System.Task_Primitives.Operations is\n \n+   package SSL renames System.Soft_Links;\n+\n    use System.Tasking;\n    use System.Tasking.Debug;\n    use Interfaces.C;\n@@ -1019,13 +1029,17 @@ package body System.Task_Primitives.Operations is\n    procedure Set_False (S : in out Suspension_Object) is\n       Result  : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := pthread_mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n       S.State := False;\n \n       Result := pthread_mutex_unlock (S.L'Access);\n       pragma Assert (Result = 0);\n+\n+      SSL.Abort_Undefer.all;\n    end Set_False;\n \n    --------------\n@@ -1035,6 +1049,8 @@ package body System.Task_Primitives.Operations is\n    procedure Set_True (S : in out Suspension_Object) is\n       Result : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := pthread_mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n@@ -1055,6 +1071,8 @@ package body System.Task_Primitives.Operations is\n \n       Result := pthread_mutex_unlock (S.L'Access);\n       pragma Assert (Result = 0);\n+\n+      SSL.Abort_Undefer.all;\n    end Set_True;\n \n    ------------------------\n@@ -1064,6 +1082,8 @@ package body System.Task_Primitives.Operations is\n    procedure Suspend_Until_True (S : in out Suspension_Object) is\n       Result : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := pthread_mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n@@ -1075,6 +1095,8 @@ package body System.Task_Primitives.Operations is\n          Result := pthread_mutex_unlock (S.L'Access);\n          pragma Assert (Result = 0);\n \n+         SSL.Abort_Undefer.all;\n+\n          raise Program_Error;\n       else\n          --  Suspend the task if the state is False. Otherwise, the task\n@@ -1087,10 +1109,12 @@ package body System.Task_Primitives.Operations is\n             S.Waiting := True;\n             Result := pthread_cond_wait (S.CV'Access, S.L'Access);\n          end if;\n-      end if;\n \n-      Result := pthread_mutex_unlock (S.L'Access);\n-      pragma Assert (Result = 0);\n+         Result := pthread_mutex_unlock (S.L'Access);\n+         pragma Assert (Result = 0);\n+\n+         SSL.Abort_Undefer.all;\n+      end if;\n    end Suspend_Until_True;\n \n    ----------------"}, {"sha": "6455748751d044945377478bc30998a12ebd2437", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72774950676b37f320c6cd60ff1789da1106f3dd/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72774950676b37f320c6cd60ff1789da1106f3dd/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=72774950676b37f320c6cd60ff1789da1106f3dd", "patch": "@@ -58,6 +58,11 @@ with System.OS_Primitives;\n with System.Soft_Links;\n --  used for Abort_Defer/Undefer\n \n+--  We use System.Soft_Links instead of System.Tasking.Initialization\n+--  because the later is a higher level package that we shouldn't depend on.\n+--  For example when using the restricted run time, it is replaced by\n+--  System.Tasking.Restricted.Stages.\n+\n with Ada.Exceptions;\n --  used for Raise_Exception\n --           Raise_From_Signal_Handler\n@@ -68,6 +73,8 @@ with Unchecked_Deallocation;\n \n package body System.Task_Primitives.Operations is\n \n+   package SSL renames System.Soft_Links;\n+\n    use System.Tasking.Debug;\n    use System.Tasking;\n    use Interfaces.C;\n@@ -913,13 +920,17 @@ package body System.Task_Primitives.Operations is\n    procedure Set_False (S : in out Suspension_Object) is\n       Result  : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := pthread_mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n       S.State := False;\n \n       Result := pthread_mutex_unlock (S.L'Access);\n       pragma Assert (Result = 0);\n+\n+      SSL.Abort_Undefer.all;\n    end Set_False;\n \n    --------------\n@@ -929,6 +940,8 @@ package body System.Task_Primitives.Operations is\n    procedure Set_True (S : in out Suspension_Object) is\n       Result : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := pthread_mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n@@ -949,6 +962,8 @@ package body System.Task_Primitives.Operations is\n \n       Result := pthread_mutex_unlock (S.L'Access);\n       pragma Assert (Result = 0);\n+\n+      SSL.Abort_Undefer.all;\n    end Set_True;\n \n    ------------------------\n@@ -958,6 +973,8 @@ package body System.Task_Primitives.Operations is\n    procedure Suspend_Until_True (S : in out Suspension_Object) is\n       Result : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := pthread_mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n@@ -969,6 +986,8 @@ package body System.Task_Primitives.Operations is\n          Result := pthread_mutex_unlock (S.L'Access);\n          pragma Assert (Result = 0);\n \n+         SSL.Abort_Undefer.all;\n+\n          raise Program_Error;\n       else\n          --  Suspend the task if the state is False. Otherwise, the task\n@@ -981,10 +1000,12 @@ package body System.Task_Primitives.Operations is\n             S.Waiting := True;\n             Result := pthread_cond_wait (S.CV'Access, S.L'Access);\n          end if;\n-      end if;\n \n-      Result := pthread_mutex_unlock (S.L'Access);\n-      pragma Assert (Result = 0);\n+         Result := pthread_mutex_unlock (S.L'Access);\n+         pragma Assert (Result = 0);\n+\n+         SSL.Abort_Undefer.all;\n+      end if;\n    end Suspend_Until_True;\n \n    ----------------"}, {"sha": "8f53ad40a30b9c06f5437cab149e9b78b209c13c", "filename": "gcc/ada/s-taprop-lynxos.adb", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72774950676b37f320c6cd60ff1789da1106f3dd/gcc%2Fada%2Fs-taprop-lynxos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72774950676b37f320c6cd60ff1789da1106f3dd/gcc%2Fada%2Fs-taprop-lynxos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-lynxos.adb?ref=72774950676b37f320c6cd60ff1789da1106f3dd", "patch": "@@ -59,10 +59,20 @@ with Interfaces.C;\n --  used for int\n --           size_t\n \n+with System.Soft_Links;\n+--  used for Abort_Defer/Undefer\n+\n+--  We use System.Soft_Links instead of System.Tasking.Initialization\n+--  because the later is a higher level package that we shouldn't depend on.\n+--  For example when using the restricted run time, it is replaced by\n+--  System.Tasking.Restricted.Stages.\n+\n with Unchecked_Deallocation;\n \n package body System.Task_Primitives.Operations is\n \n+   package SSL renames System.Soft_Links;\n+\n    use System.Tasking.Debug;\n    use System.Tasking;\n    use Interfaces.C;\n@@ -1089,13 +1099,17 @@ package body System.Task_Primitives.Operations is\n    procedure Set_False (S : in out Suspension_Object) is\n       Result  : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := pthread_mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n       S.State := False;\n \n       Result := pthread_mutex_unlock (S.L'Access);\n       pragma Assert (Result = 0);\n+\n+      SSL.Abort_Undefer.all;\n    end Set_False;\n \n    --------------\n@@ -1105,6 +1119,8 @@ package body System.Task_Primitives.Operations is\n    procedure Set_True (S : in out Suspension_Object) is\n       Result : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := pthread_mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n@@ -1125,6 +1141,8 @@ package body System.Task_Primitives.Operations is\n \n       Result := pthread_mutex_unlock (S.L'Access);\n       pragma Assert (Result = 0);\n+\n+      SSL.Abort_Undefer.all;\n    end Set_True;\n \n    ------------------------\n@@ -1134,6 +1152,8 @@ package body System.Task_Primitives.Operations is\n    procedure Suspend_Until_True (S : in out Suspension_Object) is\n       Result : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := pthread_mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n@@ -1145,6 +1165,8 @@ package body System.Task_Primitives.Operations is\n          Result := pthread_mutex_unlock (S.L'Access);\n          pragma Assert (Result = 0);\n \n+         SSL.Abort_Undefer.all;\n+\n          raise Program_Error;\n       else\n          --  Suspend the task if the state is False. Otherwise, the task\n@@ -1157,10 +1179,12 @@ package body System.Task_Primitives.Operations is\n             S.Waiting := True;\n             Result := pthread_cond_wait (S.CV'Access, S.L'Access);\n          end if;\n-      end if;\n \n-      Result := pthread_mutex_unlock (S.L'Access);\n-      pragma Assert (Result = 0);\n+         Result := pthread_mutex_unlock (S.L'Access);\n+         pragma Assert (Result = 0);\n+\n+         SSL.Abort_Undefer.all;\n+      end if;\n    end Suspend_Until_True;\n \n    ----------------"}, {"sha": "953e19e101e01c73ffa0349d1181160ef19c88d6", "filename": "gcc/ada/s-taprop-mingw.adb", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72774950676b37f320c6cd60ff1789da1106f3dd/gcc%2Fada%2Fs-taprop-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72774950676b37f320c6cd60ff1789da1106f3dd/gcc%2Fada%2Fs-taprop-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-mingw.adb?ref=72774950676b37f320c6cd60ff1789da1106f3dd", "patch": "@@ -56,10 +56,23 @@ with Interfaces.C.Strings;\n with System.Task_Info;\n --  used for Unspecified_Task_Info\n \n+with System.Interrupt_Management;\n+--  used for Initialize\n+\n+with System.Soft_Links;\n+--  used for Abort_Defer/Undefer\n+\n+--  We use System.Soft_Links instead of System.Tasking.Initialization\n+--  because the later is a higher level package that we shouldn't depend on.\n+--  For example when using the restricted run time, it is replaced by\n+--  System.Tasking.Restricted.Stages.\n+\n with Unchecked_Deallocation;\n \n package body System.Task_Primitives.Operations is\n \n+   package SSL renames System.Soft_Links;\n+\n    use System.Tasking.Debug;\n    use System.Tasking;\n    use Interfaces.C;\n@@ -983,6 +996,7 @@ package body System.Task_Primitives.Operations is\n    begin\n       Environment_Task_Id := Environment_Task;\n       OS_Primitives.Initialize;\n+      Interrupt_Management.Initialize;\n \n       if Time_Slice_Val = 0 or else Dispatching_Policy = 'F' then\n \n@@ -1083,11 +1097,15 @@ package body System.Task_Primitives.Operations is\n \n    procedure Set_False (S : in out Suspension_Object) is\n    begin\n+      SSL.Abort_Defer.all;\n+\n       EnterCriticalSection (S.L'Access);\n \n       S.State := False;\n \n       LeaveCriticalSection (S.L'Access);\n+\n+      SSL.Abort_Undefer.all;\n    end Set_False;\n \n    --------------\n@@ -1097,6 +1115,8 @@ package body System.Task_Primitives.Operations is\n    procedure Set_True (S : in out Suspension_Object) is\n       Result : BOOL;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       EnterCriticalSection (S.L'Access);\n \n       --  If there is already a task waiting on this suspension object then\n@@ -1115,6 +1135,8 @@ package body System.Task_Primitives.Operations is\n       end if;\n \n       LeaveCriticalSection (S.L'Access);\n+\n+      SSL.Abort_Undefer.all;\n    end Set_True;\n \n    ------------------------\n@@ -1125,6 +1147,8 @@ package body System.Task_Primitives.Operations is\n       Result      : DWORD;\n       Result_Bool : BOOL;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       EnterCriticalSection (S.L'Access);\n \n       if S.Waiting then\n@@ -1134,6 +1158,8 @@ package body System.Task_Primitives.Operations is\n \n          LeaveCriticalSection (S.L'Access);\n \n+         SSL.Abort_Undefer.all;\n+\n          raise Program_Error;\n       else\n          --  Suspend the task if the state is False. Otherwise, the task\n@@ -1144,6 +1170,8 @@ package body System.Task_Primitives.Operations is\n             S.State := False;\n \n             LeaveCriticalSection (S.L'Access);\n+\n+            SSL.Abort_Undefer.all;\n          else\n             S.Waiting := True;\n \n@@ -1154,6 +1182,8 @@ package body System.Task_Primitives.Operations is\n \n             LeaveCriticalSection (S.L'Access);\n \n+            SSL.Abort_Undefer.all;\n+\n             Result := WaitForSingleObject (S.CV, Wait_Infinite);\n             pragma Assert (Result = 0);\n          end if;"}, {"sha": "ebe495d79de938762836095ec9d072ced9a8b48b", "filename": "gcc/ada/s-taprop-posix.adb", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72774950676b37f320c6cd60ff1789da1106f3dd/gcc%2Fada%2Fs-taprop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72774950676b37f320c6cd60ff1789da1106f3dd/gcc%2Fada%2Fs-taprop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-posix.adb?ref=72774950676b37f320c6cd60ff1789da1106f3dd", "patch": "@@ -64,11 +64,21 @@ with Interfaces.C;\n --  used for int\n --           size_t\n \n+with System.Soft_Links;\n+--  used for Abort_Defer/Undefer\n+\n+--  We use System.Soft_Links instead of System.Tasking.Initialization\n+--  because the later is a higher level package that we shouldn't depend on.\n+--  For example when using the restricted run time, it is replaced by\n+--  System.Tasking.Restricted.Stages.\n+\n with Unchecked_Conversion;\n with Unchecked_Deallocation;\n \n package body System.Task_Primitives.Operations is\n \n+   package SSL renames System.Soft_Links;\n+\n    use System.Tasking.Debug;\n    use System.Tasking;\n    use Interfaces.C;\n@@ -1111,13 +1121,17 @@ package body System.Task_Primitives.Operations is\n    procedure Set_False (S : in out Suspension_Object) is\n       Result  : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := pthread_mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n       S.State := False;\n \n       Result := pthread_mutex_unlock (S.L'Access);\n       pragma Assert (Result = 0);\n+\n+      SSL.Abort_Undefer.all;\n    end Set_False;\n \n    --------------\n@@ -1127,6 +1141,8 @@ package body System.Task_Primitives.Operations is\n    procedure Set_True (S : in out Suspension_Object) is\n       Result : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := pthread_mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n@@ -1147,6 +1163,8 @@ package body System.Task_Primitives.Operations is\n \n       Result := pthread_mutex_unlock (S.L'Access);\n       pragma Assert (Result = 0);\n+\n+      SSL.Abort_Undefer.all;\n    end Set_True;\n \n    ------------------------\n@@ -1156,6 +1174,8 @@ package body System.Task_Primitives.Operations is\n    procedure Suspend_Until_True (S : in out Suspension_Object) is\n       Result : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := pthread_mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n@@ -1167,6 +1187,8 @@ package body System.Task_Primitives.Operations is\n          Result := pthread_mutex_unlock (S.L'Access);\n          pragma Assert (Result = 0);\n \n+         SSL.Abort_Undefer.all;\n+\n          raise Program_Error;\n       else\n          --  Suspend the task if the state is False. Otherwise, the task\n@@ -1179,10 +1201,12 @@ package body System.Task_Primitives.Operations is\n             S.Waiting := True;\n             Result := pthread_cond_wait (S.CV'Access, S.L'Access);\n          end if;\n-      end if;\n \n-      Result := pthread_mutex_unlock (S.L'Access);\n-      pragma Assert (Result = 0);\n+         Result := pthread_mutex_unlock (S.L'Access);\n+         pragma Assert (Result = 0);\n+\n+         SSL.Abort_Undefer.all;\n+      end if;\n    end Suspend_Until_True;\n \n    ----------------"}, {"sha": "002064c66abec2438620430fdd0f35111cd317e3", "filename": "gcc/ada/s-taprop-solaris.adb", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72774950676b37f320c6cd60ff1789da1106f3dd/gcc%2Fada%2Fs-taprop-solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72774950676b37f320c6cd60ff1789da1106f3dd/gcc%2Fada%2Fs-taprop-solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-solaris.adb?ref=72774950676b37f320c6cd60ff1789da1106f3dd", "patch": "@@ -64,10 +64,20 @@ with Interfaces.C;\n with System.Task_Info;\n --  to initialize Task_Info for a C thread, in function Self\n \n+with System.Soft_Links;\n+--  used for Defer/Undefer_Abort\n+\n+--  We use System.Soft_Links instead of System.Tasking.Initialization\n+--  because the later is a higher level package that we shouldn't depend on.\n+--  For example when using the restricted run time, it is replaced by\n+--  System.Tasking.Restricted.Stages.\n+\n with Unchecked_Deallocation;\n \n package body System.Task_Primitives.Operations is\n \n+   package SSL renames System.Soft_Links;\n+\n    use System.Tasking.Debug;\n    use System.Tasking;\n    use Interfaces.C;\n@@ -1720,13 +1730,17 @@ package body System.Task_Primitives.Operations is\n    procedure Set_False (S : in out Suspension_Object) is\n       Result  : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n       S.State := False;\n \n       Result := mutex_unlock (S.L'Access);\n       pragma Assert (Result = 0);\n+\n+      SSL.Abort_Undefer.all;\n    end Set_False;\n \n    --------------\n@@ -1736,6 +1750,8 @@ package body System.Task_Primitives.Operations is\n    procedure Set_True (S : in out Suspension_Object) is\n       Result : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n@@ -1756,6 +1772,8 @@ package body System.Task_Primitives.Operations is\n \n       Result := mutex_unlock (S.L'Access);\n       pragma Assert (Result = 0);\n+\n+      SSL.Abort_Undefer.all;\n    end Set_True;\n \n    ------------------------\n@@ -1765,6 +1783,8 @@ package body System.Task_Primitives.Operations is\n    procedure Suspend_Until_True (S : in out Suspension_Object) is\n       Result : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n@@ -1776,6 +1796,8 @@ package body System.Task_Primitives.Operations is\n          Result := mutex_unlock (S.L'Access);\n          pragma Assert (Result = 0);\n \n+         SSL.Abort_Undefer.all;\n+\n          raise Program_Error;\n       else\n          --  Suspend the task if the state is False. Otherwise, the task\n@@ -1788,10 +1810,12 @@ package body System.Task_Primitives.Operations is\n             S.Waiting := True;\n             Result := cond_wait (S.CV'Access, S.L'Access);\n          end if;\n-      end if;\n \n-      Result := mutex_unlock (S.L'Access);\n-      pragma Assert (Result = 0);\n+         Result := mutex_unlock (S.L'Access);\n+         pragma Assert (Result = 0);\n+\n+         SSL.Abort_Undefer.all;\n+      end if;\n    end Suspend_Until_True;\n \n    ----------------"}, {"sha": "120657fc47e8426dc0a941443e48790af6055e89", "filename": "gcc/ada/s-taprop-tru64.adb", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72774950676b37f320c6cd60ff1789da1106f3dd/gcc%2Fada%2Fs-taprop-tru64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72774950676b37f320c6cd60ff1789da1106f3dd/gcc%2Fada%2Fs-taprop-tru64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-tru64.adb?ref=72774950676b37f320c6cd60ff1789da1106f3dd", "patch": "@@ -61,10 +61,20 @@ with Interfaces.C;\n --  used for int\n --           size_t\n \n+with System.Soft_Links;\n+--  used for Abort_Defer/Undefer\n+\n+--  We use System.Soft_Links instead of System.Tasking.Initialization\n+--  because the later is a higher level package that we shouldn't depend on.\n+--  For example when using the restricted run time, it is replaced by\n+--  System.Tasking.Restricted.Stages.\n+\n with Unchecked_Deallocation;\n \n package body System.Task_Primitives.Operations is\n \n+   package SSL renames System.Soft_Links;\n+\n    use System.Tasking.Debug;\n    use System.Tasking;\n    use Interfaces.C;\n@@ -1026,13 +1036,17 @@ package body System.Task_Primitives.Operations is\n    procedure Set_False (S : in out Suspension_Object) is\n       Result  : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := pthread_mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n       S.State := False;\n \n       Result := pthread_mutex_unlock (S.L'Access);\n       pragma Assert (Result = 0);\n+\n+      SSL.Abort_Undefer.all;\n    end Set_False;\n \n    --------------\n@@ -1042,6 +1056,8 @@ package body System.Task_Primitives.Operations is\n    procedure Set_True (S : in out Suspension_Object) is\n       Result : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := pthread_mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n@@ -1062,6 +1078,8 @@ package body System.Task_Primitives.Operations is\n \n       Result := pthread_mutex_unlock (S.L'Access);\n       pragma Assert (Result = 0);\n+\n+      SSL.Abort_Undefer.all;\n    end Set_True;\n \n    ------------------------\n@@ -1071,6 +1089,8 @@ package body System.Task_Primitives.Operations is\n    procedure Suspend_Until_True (S : in out Suspension_Object) is\n       Result : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := pthread_mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n@@ -1082,6 +1102,8 @@ package body System.Task_Primitives.Operations is\n          Result := pthread_mutex_unlock (S.L'Access);\n          pragma Assert (Result = 0);\n \n+         SSL.Abort_Undefer.all;\n+\n          raise Program_Error;\n       else\n          --  Suspend the task if the state is False. Otherwise, the task\n@@ -1094,10 +1116,12 @@ package body System.Task_Primitives.Operations is\n             S.Waiting := True;\n             Result := pthread_cond_wait (S.CV'Access, S.L'Access);\n          end if;\n-      end if;\n \n-      Result := pthread_mutex_unlock (S.L'Access);\n-      pragma Assert (Result = 0);\n+         Result := pthread_mutex_unlock (S.L'Access);\n+         pragma Assert (Result = 0);\n+\n+         SSL.Abort_Undefer.all;\n+      end if;\n    end Suspend_Until_True;\n \n    ----------------"}, {"sha": "755a2c940518debbec44f6ee9cbe98e74bff4880", "filename": "gcc/ada/s-taprop-vms.adb", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72774950676b37f320c6cd60ff1789da1106f3dd/gcc%2Fada%2Fs-taprop-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72774950676b37f320c6cd60ff1789da1106f3dd/gcc%2Fada%2Fs-taprop-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vms.adb?ref=72774950676b37f320c6cd60ff1789da1106f3dd", "patch": "@@ -52,6 +52,7 @@ with Interfaces.C;\n \n with System.Soft_Links;\n --  used for Get_Exc_Stack_Addr\n+--           Abort_Defer/Undefer\n \n with Unchecked_Conversion;\n with Unchecked_Deallocation;\n@@ -985,13 +986,17 @@ package body System.Task_Primitives.Operations is\n    procedure Set_False (S : in out Suspension_Object) is\n       Result  : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := pthread_mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n       S.State := False;\n \n       Result := pthread_mutex_unlock (S.L'Access);\n       pragma Assert (Result = 0);\n+\n+      SSL.Abort_Undefer.all;\n    end Set_False;\n \n    --------------\n@@ -1001,6 +1006,8 @@ package body System.Task_Primitives.Operations is\n    procedure Set_True (S : in out Suspension_Object) is\n       Result : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := pthread_mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n@@ -1021,6 +1028,8 @@ package body System.Task_Primitives.Operations is\n \n       Result := pthread_mutex_unlock (S.L'Access);\n       pragma Assert (Result = 0);\n+\n+      SSL.Abort_Undefer.all;\n    end Set_True;\n \n    ------------------------\n@@ -1030,6 +1039,8 @@ package body System.Task_Primitives.Operations is\n    procedure Suspend_Until_True (S : in out Suspension_Object) is\n       Result : Interfaces.C.int;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := pthread_mutex_lock (S.L'Access);\n       pragma Assert (Result = 0);\n \n@@ -1041,6 +1052,8 @@ package body System.Task_Primitives.Operations is\n          Result := pthread_mutex_unlock (S.L'Access);\n          pragma Assert (Result = 0);\n \n+         SSL.Abort_Undefer.all;\n+\n          raise Program_Error;\n       else\n          --  Suspend the task if the state is False. Otherwise, the task\n@@ -1053,10 +1066,12 @@ package body System.Task_Primitives.Operations is\n             S.Waiting := True;\n             Result := pthread_cond_wait (S.CV'Access, S.L'Access);\n          end if;\n-      end if;\n \n-      Result := pthread_mutex_unlock (S.L'Access);\n-      pragma Assert (Result = 0);\n+         Result := pthread_mutex_unlock (S.L'Access);\n+         pragma Assert (Result = 0);\n+\n+         SSL.Abort_Undefer.all;\n+      end if;\n    end Suspend_Until_True;\n \n    ----------------"}, {"sha": "186e8c28f409734e817bf92c4709e5a45caf9787", "filename": "gcc/ada/s-taprop-vxworks.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72774950676b37f320c6cd60ff1789da1106f3dd/gcc%2Fada%2Fs-taprop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72774950676b37f320c6cd60ff1789da1106f3dd/gcc%2Fada%2Fs-taprop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vxworks.adb?ref=72774950676b37f320c6cd60ff1789da1106f3dd", "patch": "@@ -51,11 +51,21 @@ with System.Interrupt_Management;\n \n with Interfaces.C;\n \n+with System.Soft_Links;\n+--  used for Abort_Defer/Undefer\n+\n+--  We use System.Soft_Links instead of System.Tasking.Initialization\n+--  because the later is a higher level package that we shouldn't depend on.\n+--  For example when using the restricted run time, it is replaced by\n+--  System.Tasking.Restricted.Stages.\n+\n with Unchecked_Conversion;\n with Unchecked_Deallocation;\n \n package body System.Task_Primitives.Operations is\n \n+   package SSL renames System.Soft_Links;\n+\n    use System.Tasking.Debug;\n    use System.Tasking;\n    use System.OS_Interface;\n@@ -1030,13 +1040,17 @@ package body System.Task_Primitives.Operations is\n    procedure Set_False (S : in out Suspension_Object) is\n       Result  : STATUS;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := semTake (S.L, WAIT_FOREVER);\n       pragma Assert (Result = OK);\n \n       S.State := False;\n \n       Result := semGive (S.L);\n       pragma Assert (Result = OK);\n+\n+      SSL.Abort_Undefer.all;\n    end Set_False;\n \n    --------------\n@@ -1046,6 +1060,8 @@ package body System.Task_Primitives.Operations is\n    procedure Set_True (S : in out Suspension_Object) is\n       Result : STATUS;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := semTake (S.L, WAIT_FOREVER);\n       pragma Assert (Result = OK);\n \n@@ -1066,6 +1082,8 @@ package body System.Task_Primitives.Operations is\n \n       Result := semGive (S.L);\n       pragma Assert (Result = OK);\n+\n+      SSL.Abort_Undefer.all;\n    end Set_True;\n \n    ------------------------\n@@ -1075,6 +1093,8 @@ package body System.Task_Primitives.Operations is\n    procedure Suspend_Until_True (S : in out Suspension_Object) is\n       Result : STATUS;\n    begin\n+      SSL.Abort_Defer.all;\n+\n       Result := semTake (S.L, WAIT_FOREVER);\n \n       if S.Waiting then\n@@ -1085,6 +1105,8 @@ package body System.Task_Primitives.Operations is\n          Result := semGive (S.L);\n          pragma Assert (Result = OK);\n \n+         SSL.Abort_Undefer.all;\n+\n          raise Program_Error;\n       else\n          --  Suspend the task if the state is False. Otherwise, the task\n@@ -1096,6 +1118,8 @@ package body System.Task_Primitives.Operations is\n \n             Result := semGive (S.L);\n             pragma Assert (Result = 0);\n+\n+            SSL.Abort_Undefer.all;\n          else\n             S.Waiting := True;\n \n@@ -1104,6 +1128,8 @@ package body System.Task_Primitives.Operations is\n             Result := semGive (S.L);\n             pragma Assert (Result = OK);\n \n+            SSL.Abort_Undefer.all;\n+\n             Result := semTake (S.CV, WAIT_FOREVER);\n             pragma Assert (Result = 0);\n          end if;"}]}