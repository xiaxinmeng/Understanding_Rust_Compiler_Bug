{"sha": "7aeb037b25f4624d0a7ea6b1184047135e56b036", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FlYjAzN2IyNWY0NjI0ZDBhN2VhNmIxMTg0MDQ3MTM1ZTU2YjAzNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-01-16T16:40:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-01-16T16:40:26Z"}, "message": "re PR c++/14179 (out of memory while parsing array with many initializers)\n\n\tPR c++/14179\n\t* vec.c (vec_gc_o_reserve_1): Use ggc_round_alloc_size.\n\nFrom-SVN: r183213", "tree": {"sha": "0a040cd4dffd34e0257f4bd213032cc98bdb37bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a040cd4dffd34e0257f4bd213032cc98bdb37bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7aeb037b25f4624d0a7ea6b1184047135e56b036", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aeb037b25f4624d0a7ea6b1184047135e56b036", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aeb037b25f4624d0a7ea6b1184047135e56b036", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aeb037b25f4624d0a7ea6b1184047135e56b036/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00fbd5c8c7bfa737f289517e5248bf249fdbf1a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00fbd5c8c7bfa737f289517e5248bf249fdbf1a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00fbd5c8c7bfa737f289517e5248bf249fdbf1a3"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "dd13d0bbc72af6e4276dd8907d9f184eed7ae9b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aeb037b25f4624d0a7ea6b1184047135e56b036/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aeb037b25f4624d0a7ea6b1184047135e56b036/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7aeb037b25f4624d0a7ea6b1184047135e56b036", "patch": "@@ -1,3 +1,8 @@\n+2012-01-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/14179\n+\t* vec.c (vec_gc_o_reserve_1): Use ggc_round_alloc_size.\n+\n 2012-01-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/51860"}, {"sha": "783a3cfd52d5210a7eb7bc97e63a9c9e44c21f86", "filename": "gcc/vec.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aeb037b25f4624d0a7ea6b1184047135e56b036/gcc%2Fvec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aeb037b25f4624d0a7ea6b1184047135e56b036/gcc%2Fvec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.c?ref=7aeb037b25f4624d0a7ea6b1184047135e56b036", "patch": "@@ -221,6 +221,7 @@ vec_gc_o_reserve_1 (void *vec, int reserve, size_t vec_offset, size_t elt_size,\n {\n   struct vec_prefix *pfx = (struct vec_prefix *) vec;\n   unsigned alloc = calculate_allocation (pfx, reserve, exact);\n+  size_t size;\n \n   if (!alloc)\n     {\n@@ -229,7 +230,17 @@ vec_gc_o_reserve_1 (void *vec, int reserve, size_t vec_offset, size_t elt_size,\n       return NULL;\n     }\n \n-  vec = ggc_realloc_stat (vec, vec_offset + alloc * elt_size PASS_MEM_STAT);\n+  /* Calculate the amount of space we want.  */\n+  size = vec_offset + alloc * elt_size;\n+  /* Ask the allocator how much space it will really give us.  */\n+  size = ggc_round_alloc_size (size);\n+  /* Adjust the number of slots accordingly.  */\n+  alloc = (size - vec_offset) / elt_size;\n+  /* And finally, recalculate the amount of space we ask for.  */\n+  size = vec_offset + alloc * elt_size;\n+\n+  vec = ggc_realloc_stat (vec, size PASS_MEM_STAT);\n+\n   ((struct vec_prefix *)vec)->alloc = alloc;\n   if (!pfx)\n     ((struct vec_prefix *)vec)->num = 0;"}]}