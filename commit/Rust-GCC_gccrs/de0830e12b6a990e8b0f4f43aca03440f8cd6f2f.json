{"sha": "de0830e12b6a990e8b0f4f43aca03440f8cd6f2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUwODMwZTEyYjZhOTkwZThiMGY0ZjQzYWNhMDM0NDBmOGNkNmYyZg==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2015-12-21T11:22:16Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2015-12-21T11:22:16Z"}, "message": "re PR libstdc++/66693 ([C++17] std::tuple_size fails with const std::array)\n\nPR libstdc++/66693.\n\n\t* include/std/tuple (tuple_element, tuple_size, tuple_element_t,\n\t__tuple_element_t): Move to...\n\t* include/std/utility: ...here.\n\t* testsuite/20_util/pair/astuple/astuple.cc: Adjust.\n\t* testsuite/20_util/pair/astuple/astuple_cpp14.cc: New.\n\t* testsuite/20_util/tuple/tuple_element.cc: Adjust.\n\t* testsuite/20_util/tuple/tuple_element_t.cc: Likewise.\n\t* testsuite/20_util/tuple/tuple_size.cc: Likewise.\n\t* testsuite/23_containers/array/tuple_interface/tuple_element.cc:\n\tLikewise.\n\t* testsuite/23_containers/array/tuple_interface/tuple_element_cpp14.cc:\n\tNew.\n\t* testsuite/23_containers/array/tuple_interface/tuple_size.cc: Adjust.\n\nFrom-SVN: r231875", "tree": {"sha": "3e769876a52b14b959758fad03f9c6d9ab3c7b69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e769876a52b14b959758fad03f9c6d9ab3c7b69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c69899f0976489947ff59759b61e95e207432485", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c69899f0976489947ff59759b61e95e207432485", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c69899f0976489947ff59759b61e95e207432485"}], "stats": {"total": 353, "additions": 288, "deletions": 65}, "files": [{"sha": "1a79ff8212e5622404a9738c70b3bbba57971b87", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=de0830e12b6a990e8b0f4f43aca03440f8cd6f2f", "patch": "@@ -1,3 +1,20 @@\n+2015-12-21  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tPR libstdc++/66693\n+\t* include/std/tuple (tuple_element, tuple_size, tuple_element_t,\n+\t__tuple_element_t): Move to...\n+\t* include/std/utility: ...here.\n+\t* testsuite/20_util/pair/astuple/astuple.cc: Adjust.\n+\t* testsuite/20_util/pair/astuple/astuple_cpp14.cc: New.\n+\t* testsuite/20_util/tuple/tuple_element.cc: Adjust.\n+\t* testsuite/20_util/tuple/tuple_element_t.cc: Likewise.\n+\t* testsuite/20_util/tuple/tuple_size.cc: Likewise.\n+\t* testsuite/23_containers/array/tuple_interface/tuple_element.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/array/tuple_interface/tuple_element_cpp14.cc:\n+\tNew.\n+\t* testsuite/23_containers/array/tuple_interface/tuple_size.cc: Adjust.\n+\n 2015-12-18  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tFix a regression introduced by the fix of libstdc++/68276."}, {"sha": "78f58b4ce434c5f2c13746a4d7bfdddc6e78529d", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=de0830e12b6a990e8b0f4f43aca03440f8cd6f2f", "patch": "@@ -1197,10 +1197,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n \n-  /// Gives the type of the ith element of a given tuple type.\n-  template<std::size_t __i, typename _Tp>\n-    struct tuple_element;\n-\n   /**\n    * Recursive case for tuple_element: strip off the first element in\n    * the tuple and retrieve the (i-1)th element of the remaining tuple.\n@@ -1218,53 +1214,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Head type;\n     };\n \n-  // Duplicate of C++14's tuple_element_t for internal use in C++11 mode\n-  template<std::size_t __i, typename _Tp>\n-    using __tuple_element_t = typename tuple_element<__i, _Tp>::type;\n-\n-  template<std::size_t __i, typename _Tp>\n-    struct tuple_element<__i, const _Tp>\n-    {\n-      typedef typename add_const<__tuple_element_t<__i, _Tp>>::type type;\n-    };\n-\n-  template<std::size_t __i, typename _Tp>\n-    struct tuple_element<__i, volatile _Tp>\n-    {\n-      typedef typename add_volatile<__tuple_element_t<__i, _Tp>>::type type;\n-    };\n-\n-  template<std::size_t __i, typename _Tp>\n-    struct tuple_element<__i, const volatile _Tp>\n-    {\n-      typedef typename add_cv<__tuple_element_t<__i, _Tp>>::type type;\n-    };\n-\n-#if __cplusplus > 201103L\n-#define __cpp_lib_tuple_element_t 201402\n-\n-  template<std::size_t __i, typename _Tp>\n-    using tuple_element_t = typename tuple_element<__i, _Tp>::type;\n-#endif\n-\n-  /// Finds the size of a given tuple type.\n-  template<typename _Tp>\n-    struct tuple_size;\n-\n-  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-  // 2313. tuple_size should always derive from integral_constant<size_t, N>\n-  template<typename _Tp>\n-    struct tuple_size<const _Tp>\n-    : integral_constant<size_t, tuple_size<_Tp>::value> { };\n-\n-  template<typename _Tp>\n-    struct tuple_size<volatile _Tp>\n-    : integral_constant<size_t, tuple_size<_Tp>::value> { };\n-\n-  template<typename _Tp>\n-    struct tuple_size<const volatile _Tp>\n-    : integral_constant<size_t, tuple_size<_Tp>::value> { };\n-\n   /// class tuple_size\n   template<typename... _Elements>\n     struct tuple_size<tuple<_Elements...>>"}, {"sha": "2115d73cac6524501c8dab1d3b98c72ce2f40003", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=de0830e12b6a990e8b0f4f43aca03440f8cd6f2f", "patch": "@@ -79,11 +79,56 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  template<class _Tp>\n-    class tuple_size;\n+  /// Finds the size of a given tuple type.\n+  template<typename _Tp>\n+    struct tuple_size;\n+\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 2313. tuple_size should always derive from integral_constant<size_t, N>\n+  template<typename _Tp>\n+    struct tuple_size<const _Tp>\n+    : integral_constant<size_t, tuple_size<_Tp>::value> { };\n+\n+  template<typename _Tp>\n+    struct tuple_size<volatile _Tp>\n+    : integral_constant<size_t, tuple_size<_Tp>::value> { };\n+\n+  template<typename _Tp>\n+    struct tuple_size<const volatile _Tp>\n+    : integral_constant<size_t, tuple_size<_Tp>::value> { };\n+\n+  /// Gives the type of the ith element of a given tuple type.\n+  template<std::size_t __i, typename _Tp>\n+    struct tuple_element;\n+\n+  // Duplicate of C++14's tuple_element_t for internal use in C++11 mode\n+  template<std::size_t __i, typename _Tp>\n+    using __tuple_element_t = typename tuple_element<__i, _Tp>::type;\n+\n+  template<std::size_t __i, typename _Tp>\n+    struct tuple_element<__i, const _Tp>\n+    {\n+      typedef typename add_const<__tuple_element_t<__i, _Tp>>::type type;\n+    };\n+\n+  template<std::size_t __i, typename _Tp>\n+    struct tuple_element<__i, volatile _Tp>\n+    {\n+      typedef typename add_volatile<__tuple_element_t<__i, _Tp>>::type type;\n+    };\n \n-  template<std::size_t _Int, class _Tp>\n-    class tuple_element;\n+  template<std::size_t __i, typename _Tp>\n+    struct tuple_element<__i, const volatile _Tp>\n+    {\n+      typedef typename add_cv<__tuple_element_t<__i, _Tp>>::type type;\n+    };\n+\n+#if __cplusplus > 201103L\n+#define __cpp_lib_tuple_element_t 201402\n+\n+  template<std::size_t __i, typename _Tp>\n+    using tuple_element_t = typename tuple_element<__i, _Tp>::type;\n+#endif\n \n   template<typename>\n     struct __is_tuple_like_impl : false_type"}, {"sha": "15ab87210eff5c661997640b7e07f773a50a3230", "filename": "libstdc++-v3/testsuite/20_util/pair/astuple/astuple.cc", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fastuple.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fastuple.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fastuple.cc?ref=de0830e12b6a990e8b0f4f43aca03440f8cd6f2f", "patch": "@@ -24,6 +24,10 @@\n typedef std::pair<int, long> test_type;\n \n static_assert( std::tuple_size<test_type>::value == 2, \"size is 2\" );\n+static_assert( std::tuple_size<const test_type>::value == 2, \"size is 2\" );\n+static_assert( std::tuple_size<volatile test_type>::value == 2, \"size is 2\" );\n+static_assert( std::tuple_size<const volatile test_type>::value == 2,\n+               \"size is 2\" );\n \n template<std::size_t N, typename T>\n   using Tuple_elt = typename std::tuple_element<N, T>::type;\n@@ -35,3 +39,27 @@ static_assert( is_same<Tuple_elt<0, test_type>, test_type::first_type>::value,\n \n static_assert( is_same<Tuple_elt<1, test_type>, test_type::second_type>::value,\n                \"second type is long\" );\n+\n+static_assert( is_same<Tuple_elt<0, const test_type>,\n+               const test_type::first_type>::value,\n+               \"first type is const int\" );\n+\n+static_assert( is_same<Tuple_elt<1, const test_type>,\n+               const test_type::second_type>::value,\n+               \"second type is const long\" );\n+\n+static_assert( is_same<Tuple_elt<0, volatile test_type>,\n+               volatile test_type::first_type>::value,\n+               \"first type is volatile int\" );\n+\n+static_assert( is_same<Tuple_elt<1, volatile test_type>,\n+               volatile test_type::second_type>::value,\n+               \"second type is volatile long\" );\n+\n+static_assert( is_same<Tuple_elt<0, const volatile test_type>,\n+               const volatile test_type::first_type>::value,\n+               \"first type is const volatile int\" );\n+\n+static_assert( is_same<Tuple_elt<1, const volatile test_type>,\n+               const volatile test_type::second_type>::value,\n+               \"second type is const volatile long\" );"}, {"sha": "9a0a3e527011aad1b52ad0b043d9a8ccf9de9ee2", "filename": "libstdc++-v3/testsuite/20_util/pair/astuple/astuple_cpp14.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fastuple_cpp14.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fastuple_cpp14.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fastuple_cpp14.cc?ref=de0830e12b6a990e8b0f4f43aca03440f8cd6f2f", "patch": "@@ -0,0 +1,59 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++14\" }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <utility>\n+#include <type_traits>\n+\n+typedef std::pair<int, long> test_type;\n+\n+template<std::size_t N, typename T>\n+  using Tuple_elt = std::tuple_element_t<N, T>;\n+\n+using std::is_same;\n+\n+static_assert( is_same<Tuple_elt<0, test_type>, test_type::first_type>::value,\n+               \"first type is int\" );\n+\n+static_assert( is_same<Tuple_elt<1, test_type>, test_type::second_type>::value,\n+               \"second type is long\" );\n+\n+static_assert( is_same<Tuple_elt<0, const test_type>,\n+               const test_type::first_type>::value,\n+               \"first type is const int\" );\n+\n+static_assert( is_same<Tuple_elt<1, const test_type>,\n+               const test_type::second_type>::value,\n+               \"second type is const long\" );\n+\n+static_assert( is_same<Tuple_elt<0, volatile test_type>,\n+               volatile test_type::first_type>::value,\n+               \"first type is volatile int\" );\n+\n+static_assert( is_same<Tuple_elt<1, volatile test_type>,\n+               volatile test_type::second_type>::value,\n+               \"second type is volatile long\" );\n+\n+static_assert( is_same<Tuple_elt<0, const volatile test_type>,\n+               const volatile test_type::first_type>::value,\n+               \"first type is const volatile int\" );\n+\n+static_assert( is_same<Tuple_elt<1, const volatile test_type>,\n+               const volatile test_type::second_type>::value,\n+               \"second type is const volatile long\" );"}, {"sha": "9e6224ced7f4e43762da4c09868ddb1678ceaf9a", "filename": "libstdc++-v3/testsuite/20_util/tuple/tuple_element.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Ftuple_element.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Ftuple_element.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Ftuple_element.cc?ref=de0830e12b6a990e8b0f4f43aca03440f8cd6f2f", "patch": "@@ -35,4 +35,10 @@ main()\n   foo q1;\n   tuple_element<0,tuple<foo,void,int> >::type q2(q1);\n   tuple_element<2,tuple<void,int,foo> >::type q3(q1);\n+  tuple_element<0,const tuple<foo,void,int> >::type q4(q1);\n+  tuple_element<2,const tuple<void,int,foo> >::type q5(q1);\n+  tuple_element<0,volatile tuple<foo,void,int> >::type q6(q1);\n+  tuple_element<2,volatile tuple<void,int,foo> >::type q7(q1);\n+  tuple_element<0,const volatile tuple<foo,void,int> >::type q8(q1);\n+  tuple_element<2,const volatile tuple<void,int,foo> >::type q9(q1);\n }"}, {"sha": "079e7f9879c460867912c2de5cdd39640d5d5f9f", "filename": "libstdc++-v3/testsuite/20_util/tuple/tuple_element_t.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Ftuple_element_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Ftuple_element_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Ftuple_element_t.cc?ref=de0830e12b6a990e8b0f4f43aca03440f8cd6f2f", "patch": "@@ -33,4 +33,10 @@ main()\n   foo q1;\n   tuple_element_t<0,tuple<foo,void,int> > q2(q1);\n   tuple_element_t<2,tuple<void,int,foo> > q3(q1);\n+  tuple_element_t<0,const tuple<foo,void,int> > q4(q1);\n+  tuple_element_t<2,const tuple<void,int,foo> > q5(q1);\n+  tuple_element_t<0,volatile tuple<foo,void,int> > q6(q1);\n+  tuple_element_t<2,volatile tuple<void,int,foo> > q7(q1);\n+  tuple_element_t<0,const volatile tuple<foo,void,int> > q8(q1);\n+  tuple_element_t<2,const volatile tuple<void,int,foo> > q9(q1);\n }"}, {"sha": "d6f6ec5c5032e4a981674cd34aab4296825b417c", "filename": "libstdc++-v3/testsuite/20_util/tuple/tuple_size.cc", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Ftuple_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Ftuple_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Ftuple_size.cc?ref=de0830e12b6a990e8b0f4f43aca03440f8cd6f2f", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // { dg-options \"-std=gnu++11\" }\n \n // Copyright (C) 2007-2015 Free Software Foundation, Inc.\n@@ -29,10 +30,28 @@ main()\n {\n   bool test __attribute__((unused)) = true;\n \n-  VERIFY(tuple_size<tuple<> >::value == 0);\n-  VERIFY(tuple_size<tuple<int> >::value == 1);\n-  VERIFY(tuple_size<tuple<void> >::value == 1);\n+  static_assert(tuple_size<tuple<>>::value == 0, \"\");\n+  static_assert(tuple_size<tuple<int>>::value == 1, \"\");\n+  static_assert(tuple_size<tuple<void>>::value == 1, \"\");\n   typedef tuple<int,const int&,void> test_tuple1;\n-  VERIFY(tuple_size<test_tuple1>::value == 3);\n-  VERIFY(tuple_size<tuple<tuple<void> > >::value == 1);\n+  static_assert(tuple_size<test_tuple1>::value == 3, \"\");\n+  static_assert(tuple_size<tuple<tuple<void>>>::value == 1, \"\");\n+\n+  static_assert(tuple_size<const tuple<>>::value == 0, \"\");\n+  static_assert(tuple_size<const tuple<int>>::value == 1, \"\");\n+  static_assert(tuple_size<const tuple<void>>::value == 1, \"\");\n+  static_assert(tuple_size<const test_tuple1>::value == 3, \"\");\n+  static_assert(tuple_size<const tuple<tuple<void>>>::value == 1, \"\");\n+\n+  static_assert(tuple_size<volatile tuple<>>::value == 0, \"\");\n+  static_assert(tuple_size<volatile tuple<int>>::value == 1, \"\");\n+  static_assert(tuple_size<volatile tuple<void>>::value == 1, \"\");\n+  static_assert(tuple_size<volatile test_tuple1>::value == 3, \"\");\n+  static_assert(tuple_size<volatile tuple<tuple<void>>>::value == 1, \"\");\n+\n+  static_assert(tuple_size<const volatile tuple<>>::value == 0, \"\");\n+  static_assert(tuple_size<const volatile tuple<int>>::value == 1, \"\");\n+  static_assert(tuple_size<const volatile tuple<void>>::value == 1, \"\");\n+  static_assert(tuple_size<const volatile test_tuple1>::value == 3, \"\");\n+  static_assert(tuple_size<const volatile tuple<tuple<void>>>::value == 1,\"\");\n }"}, {"sha": "09ba7a27b540b800086091bc9cc1dc090c7795fa", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_element.cc", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element.cc?ref=de0830e12b6a990e8b0f4f43aca03440f8cd6f2f", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // { dg-options \"-std=gnu++11\" }\n //\n // Copyright (C) 2011-2015 Free Software Foundation, Inc.\n@@ -29,9 +30,31 @@ test01()\n \n   const size_t len = 3;\n   typedef array<int, len> array_type;\n-  VERIFY( (is_same<tuple_element<0, array_type>::type, int>::value == true) );\n-  VERIFY( (is_same<tuple_element<1, array_type>::type, int>::value == true) );\n-  VERIFY( (is_same<tuple_element<2, array_type>::type, int>::value == true) );\n+\n+  static_assert(is_same<tuple_element<0, array_type>::type, int>::value, \"\" );\n+  static_assert(is_same<tuple_element<1, array_type>::type, int>::value, \"\" );\n+  static_assert(is_same<tuple_element<2, array_type>::type, int>::value, \"\");\n+\n+  static_assert(is_same<tuple_element<0, const array_type>::type,\n+                const int>::value, \"\");\n+  static_assert(is_same<tuple_element<1, const array_type>::type,\n+                const int>::value, \"\");\n+  static_assert(is_same<tuple_element<2, const array_type>::type,\n+                const int>::value, \"\");\n+\n+  static_assert(is_same<tuple_element<0, volatile array_type>::type,\n+                volatile int>::value, \"\");\n+  static_assert(is_same<tuple_element<1, volatile array_type>::type,\n+                volatile int>::value, \"\");\n+  static_assert( (is_same<tuple_element<2, volatile array_type>::type,\n+           volatile int>::value == true) );\n+\n+  static_assert(is_same<tuple_element<0, const volatile array_type>::type,\n+                const volatile int>::value, \"\");\n+  static_assert(is_same<tuple_element<1, const volatile array_type>::type,\n+                const volatile int>::value, \"\");\n+  static_assert(is_same<tuple_element<2, const volatile array_type>::type,\n+                const volatile int>::value, \"\");\n }\n \n int main()"}, {"sha": "b885ea3e3038ec016e0a22f7118560e898a18e48", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_element_cpp14.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_cpp14.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_cpp14.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_cpp14.cc?ref=de0830e12b6a990e8b0f4f43aca03440f8cd6f2f", "patch": "@@ -0,0 +1,64 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++14\" }\n+//\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  const size_t len = 3;\n+  typedef array<int, len> array_type;\n+\n+  static_assert(is_same<tuple_element_t<0, array_type>, int>::value, \"\");\n+  static_assert(is_same<tuple_element_t<1, array_type>, int>::value, \"\");\n+  static_assert(is_same<tuple_element_t<2, array_type>, int>::value, \"\");\n+\n+  static_assert(is_same<tuple_element_t<0, const array_type>,\n+                const int>::value, \"\");\n+  static_assert(is_same<tuple_element_t<1, const array_type>,\n+                const int>::value, \"\");\n+  static_assert(is_same<tuple_element_t<2, const array_type>,\n+                const int>::value, \"\");\n+\n+  static_assert(is_same<tuple_element_t<0, volatile array_type>,\n+                volatile int>::value, \"\");\n+  static_assert(is_same<tuple_element_t<1, volatile array_type>,\n+                volatile int>::value, \"\");\n+  static_assert(is_same<tuple_element_t<2, volatile array_type>,\n+                volatile int>::value, \"\");\n+\n+  static_assert(is_same<tuple_element_t<0, const volatile array_type>,\n+                const volatile int>::value, \"\");\n+  static_assert(is_same<tuple_element_t<1, const volatile array_type>,\n+                const volatile int>::value, \"\");\n+  static_assert(is_same<tuple_element_t<2, const volatile array_type>,\n+                const volatile int>::value, \"\");\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a821fdeb55957176250c3cda6a4c07698872f06f", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_size.cc", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0830e12b6a990e8b0f4f43aca03440f8cd6f2f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_size.cc?ref=de0830e12b6a990e8b0f4f43aca03440f8cd6f2f", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // { dg-options \"-std=gnu++11\" }\n //\n // Copyright (C) 2011-2015 Free Software Foundation, Inc.\n@@ -29,13 +30,19 @@ test01()\n   {\n     const size_t len = 5;\n     typedef array<int, len> array_type;\n-    VERIFY( tuple_size<array_type>::value == 5 );\n+    static_assert(tuple_size<array_type>::value == 5, \"\");\n+    static_assert(tuple_size<const array_type>::value == 5, \"\");\n+    static_assert(tuple_size<volatile array_type>::value == 5, \"\");\n+    static_assert(tuple_size<const volatile array_type>::value == 5, \"\");\n   }\n \n   {\n     const size_t len = 0;\n     typedef array<float, len> array_type;\n-    VERIFY( tuple_size<array_type>::value == 0 );\n+    static_assert(tuple_size<array_type>::value == 0, \"\");\n+    static_assert(tuple_size<const array_type>::value == 0, \"\");\n+    static_assert(tuple_size<volatile array_type>::value == 0, \"\");\n+    static_assert(tuple_size<const volatile array_type>::value == 0, \"\");\n   }\n }\n "}]}