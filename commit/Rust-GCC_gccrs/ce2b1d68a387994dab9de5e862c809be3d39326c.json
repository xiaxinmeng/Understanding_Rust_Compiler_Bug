{"sha": "ce2b1d68a387994dab9de5e862c809be3d39326c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UyYjFkNjhhMzg3OTk0ZGFiOWRlNWU4NjJjODA5YmUzZDM5MzI2Yw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-09-21T09:52:00Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-09-21T09:52:00Z"}, "message": "re PR tree-optimization/45580 (Building WebKit fails with compiler catching SIGSEGV in gimple_fold_obj_type_ref_known_binfo())\n\n2010-09-21  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/45580\n\t* tree-ssa-propagate.c (substitute_and_fold): Always replace\n\tregular uses.\n\t* gimple-fold.c (gimple_fold_obj_type_ref): For a BINFO without\n\tvirtuals fold the call into a regular indirect one.\n\n\t* g++.dg/torture/pr45580.C: New testcase.\n\nFrom-SVN: r164474", "tree": {"sha": "e56f74dda4e97878bf4598aa4d45f83c158b7fba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e56f74dda4e97878bf4598aa4d45f83c158b7fba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce2b1d68a387994dab9de5e862c809be3d39326c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce2b1d68a387994dab9de5e862c809be3d39326c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce2b1d68a387994dab9de5e862c809be3d39326c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce2b1d68a387994dab9de5e862c809be3d39326c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c7f2bc8dd0e41fe8863b1f2706aea7ccf8b8528", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c7f2bc8dd0e41fe8863b1f2706aea7ccf8b8528", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c7f2bc8dd0e41fe8863b1f2706aea7ccf8b8528"}], "stats": {"total": 74, "additions": 70, "deletions": 4}, "files": [{"sha": "7585ee69ac353b424936680f2246a465a3fc2948", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2b1d68a387994dab9de5e862c809be3d39326c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2b1d68a387994dab9de5e862c809be3d39326c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce2b1d68a387994dab9de5e862c809be3d39326c", "patch": "@@ -1,3 +1,11 @@\n+2010-09-21  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/45580\n+\t* tree-ssa-propagate.c (substitute_and_fold): Always replace\n+\tregular uses.\n+\t* gimple-fold.c (gimple_fold_obj_type_ref): For a BINFO without\n+\tvirtuals fold the call into a regular indirect one.\n+\n 2010-09-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR rtl-optimization/42775"}, {"sha": "896f508045d77dba7f80cc9ff2899ba60ef5d841", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2b1d68a387994dab9de5e862c809be3d39326c/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2b1d68a387994dab9de5e862c809be3d39326c/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=ce2b1d68a387994dab9de5e862c809be3d39326c", "patch": "@@ -1471,6 +1471,9 @@ gimple_fold_obj_type_ref (tree ref, tree known_type)\n   if (binfo)\n     {\n       HOST_WIDE_INT token = tree_low_cst (OBJ_TYPE_REF_TOKEN (ref), 1);\n+      /* If there is no virtual methods fold this to an indirect call.  */\n+      if (!BINFO_VIRTUALS (binfo))\n+\treturn OBJ_TYPE_REF_EXPR (ref);\n       return gimple_fold_obj_type_ref_known_binfo (token, binfo);\n     }\n   else"}, {"sha": "b00b8917df9165b54a31179c7b9f15e6da4257ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2b1d68a387994dab9de5e862c809be3d39326c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2b1d68a387994dab9de5e862c809be3d39326c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ce2b1d68a387994dab9de5e862c809be3d39326c", "patch": "@@ -1,3 +1,8 @@\n+2010-09-21  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/45580\n+\t* g++.dg/torture/pr45580.C: New testcase.\n+\n 2010-09-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* lib/gcc-dg.exp (clanup-stack-usage): Really remove .su files."}, {"sha": "c3af4910aeba7e752c58db91842f9bb876da8616", "filename": "gcc/testsuite/g++.dg/torture/pr45580.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2b1d68a387994dab9de5e862c809be3d39326c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr45580.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2b1d68a387994dab9de5e862c809be3d39326c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr45580.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr45580.C?ref=ce2b1d68a387994dab9de5e862c809be3d39326c", "patch": "@@ -0,0 +1,50 @@\n+// { dg-do compile }\n+\n+namespace std {\n+    typedef __SIZE_TYPE__ size_t;\n+}\n+inline void* operator new(std::size_t, void* __p) throw() {\n+    return __p;\n+}\n+class Noncopyable  { };\n+struct CollectorCell { };\n+template<typename T> class PassRefPtr {\n+public:\n+    T* releaseRef() const { }\n+};\n+template <typename T> class NonNullPassRefPtr {\n+public:\n+    template <class U> NonNullPassRefPtr(const PassRefPtr<U>& o)\n+\t: m_ptr(o.releaseRef()) { }\n+    mutable T* m_ptr;\n+};\n+struct ClassInfo;\n+class JSValue { };\n+JSValue jsNull();\n+class Structure;\n+class JSGlobalData {\n+    static void storeVPtrs();\n+};\n+class JSCell : public Noncopyable {\n+    friend class JSObject;\n+    friend class JSGlobalData;\n+    virtual ~JSCell();\n+};\n+class JSObject : public JSCell {\n+public:\n+    explicit JSObject(NonNullPassRefPtr<Structure>);\n+    static PassRefPtr<Structure> createStructure(JSValue prototype) { }\n+};\n+class JSByteArray : public JSObject {\n+    friend class JSGlobalData;\n+    enum VPtrStealingHackType { VPtrStealingHack };\n+    JSByteArray(VPtrStealingHackType)\n+\t: JSObject(createStructure(jsNull())), m_classInfo(0) { }\n+    const ClassInfo* m_classInfo;\n+};\n+void JSGlobalData::storeVPtrs() {\n+    CollectorCell cell;\n+    void* storage = &cell;\n+    JSCell* jsByteArray = new (storage) JSByteArray(JSByteArray::VPtrStealingHack);\n+    jsByteArray->~JSCell();\n+}"}, {"sha": "c97960cfdf758675fb92513f495a896c29a480a8", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2b1d68a387994dab9de5e862c809be3d39326c/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2b1d68a387994dab9de5e862c809be3d39326c/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=ce2b1d68a387994dab9de5e862c809be3d39326c", "patch": "@@ -1122,12 +1122,12 @@ substitute_and_fold (ssa_prop_get_value_fn get_value_fn,\n \t    {\n \t      did_replace = true;\n \t      prop_stats.num_stmts_folded++;\n+\t      stmt = gsi_stmt (oldi);\n+\t      update_stmt (stmt);\n \t    }\n \n-\t  /* Only replace real uses if we couldn't fold the\n-\t     statement using value range information.  */\n-\t  if (get_value_fn\n-\t      && !did_replace)\n+\t  /* Replace real uses in the statement.  */\n+\t  if (get_value_fn)\n \t    did_replace |= replace_uses_in (stmt, get_value_fn);\n \n \t  /* If we made a replacement, fold the statement.  */"}]}