{"sha": "5e108459ec3e6edc88534786f970b57b7714f80a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUxMDg0NTllYzNlNmVkYzg4NTM0Nzg2Zjk3MGI1N2I3NzE0ZjgwYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-04-30T09:52:41Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-04-30T09:52:41Z"}, "message": "stl_pair.h (piecewise_construct_t, [...]): Add.\n\n2010-04-30  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_pair.h (piecewise_construct_t,\n\tpair<>::pair(piecewise_construct_t, tuple, tuple)): Add.\n\t(pair<>::__cons, pair<>::__do_cons): Declare.\n\t(__decay_and_strip, __strip_reference_wrapper): Move...\n\t* include/std/type_traits: ... here.\n\t* include/std/functional (_Index_tuple, _Build_index_tuple): Move...\n\t* include/std/tuple: ... here.\n\t(pack_arguments): Add.\n\t(pair<>::__cons, pair<>::__do_cons): Define.\n\t* testsuite/20_util/tuple/creation_functions/pack_arguments.cc: New.\n\t* testsuite/20_util/pair/piecewise.cc: Likewise.\n\t* testsuite/20_util/tuple/cons/big_tuples.cc: Include <utility>.\n\t* testsuite/20_util/tuple/cons/constructor.cc: Likewise.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Adjust\n\tdg-error line numbers.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Likewise.\n\nFrom-SVN: r158928", "tree": {"sha": "3b02f629740c98091d6fb6ae0ca16121c7eaa1f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b02f629740c98091d6fb6ae0ca16121c7eaa1f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e108459ec3e6edc88534786f970b57b7714f80a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e108459ec3e6edc88534786f970b57b7714f80a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e108459ec3e6edc88534786f970b57b7714f80a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e108459ec3e6edc88534786f970b57b7714f80a/comments", "author": null, "committer": null, "parents": [{"sha": "41700fc33bd80f9bac8565ca78a9a5fe3c896337", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41700fc33bd80f9bac8565ca78a9a5fe3c896337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41700fc33bd80f9bac8565ca78a9a5fe3c896337"}], "stats": {"total": 391, "additions": 326, "deletions": 65}, "files": [{"sha": "14287ab31891451edfeaad0b2a2e7849b77b8993", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5e108459ec3e6edc88534786f970b57b7714f80a", "patch": "@@ -1,3 +1,24 @@\n+2010-04-30  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_pair.h (piecewise_construct_t,\n+\tpair<>::pair(piecewise_construct_t, tuple, tuple)): Add.\n+\t(pair<>::__cons, pair<>::__do_cons): Declare.\n+\t(__decay_and_strip, __strip_reference_wrapper): Move...\n+\t* include/std/type_traits: ... here.\n+\t* include/std/functional (_Index_tuple, _Build_index_tuple): Move...\n+\t* include/std/tuple: ... here.\n+\t(pack_arguments): Add.\n+\t(pair<>::__cons, pair<>::__do_cons): Define.\n+\t* testsuite/20_util/tuple/creation_functions/pack_arguments.cc: New.\n+\t* testsuite/20_util/pair/piecewise.cc: Likewise.\n+\t* testsuite/20_util/tuple/cons/big_tuples.cc: Include <utility>.\n+\t* testsuite/20_util/tuple/cons/constructor.cc: Likewise.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Adjust\n+\tdg-error line numbers.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Likewise.\n+\n 2010-04-27  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/43865"}, {"sha": "0618026f4d617177eefe95ae8bc5ad6e8f8d9625", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=5e108459ec3e6edc88534786f970b57b7714f80a", "patch": "@@ -57,15 +57,25 @@\n #ifndef _STL_PAIR_H\n #define _STL_PAIR_H 1\n \n-#include <bits/move.h> // for std::move / std::forward, std::decay, and\n-                       // std::swap\n+#include <bits/move.h> // for std::move / std::forward, and std::swap\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-#include <type_traits>\n+#include <type_traits> // for std::__decay_and_strip too\n #endif\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  struct piecewise_construct_t { };\n+\n+  // forward declarations\n+  template<typename...>\n+    class tuple;\n+\n+  template<int...>\n+    struct _Index_tuple;\n+#endif\n+\n   /// pair holds two objects of arbitrary type.\n   template<class _T1, class _T2>\n     struct pair\n@@ -111,6 +121,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       pair(pair&& __p)\n       : first(std::move(__p.first)),\n \tsecond(std::move(__p.second)) { }\n+\n+      template<class... _Args1, class... _Args2>\n+        pair(piecewise_construct_t,\n+\t     tuple<_Args1...> __first_args,\n+\t     tuple<_Args2...> __second_args)\n+\t: first(__cons<first_type>(std::move(__first_args))),\n+\t  second(__cons<second_type>(std::move(__second_args))) { }\n #endif\n \n       /** There is also a templated copy ctor for the @c pair class itself.  */\n@@ -149,6 +166,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tswap(first, __p.first);\n \tswap(second, __p.second);\t\n       }\n+\n+    private:\n+      template<typename _Tp, typename... _Args>\n+        static _Tp\n+        __cons(tuple<_Args...>&&);\n+\n+      template<typename _Tp, typename... _Args, int... _Indexes>\n+        static _Tp\n+        __do_cons(tuple<_Args...>&&, const _Index_tuple<_Indexes...>&);\n #endif\n     };\n \n@@ -217,35 +243,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     make_pair(_T1 __x, _T2 __y)\n     { return pair<_T1, _T2>(__x, __y); }\n #else\n-  template<typename _Tp>\n-    class reference_wrapper;\n-\n-  // Helper which adds a reference to a type when given a reference_wrapper\n-  template<typename _Tp>\n-    struct __strip_reference_wrapper\n-    {\n-      typedef _Tp __type;\n-    };\n-\n-  template<typename _Tp>\n-    struct __strip_reference_wrapper<reference_wrapper<_Tp> >\n-    {\n-      typedef _Tp& __type;\n-    };\n-\n-  template<typename _Tp>\n-    struct __strip_reference_wrapper<const reference_wrapper<_Tp> >\n-    {\n-      typedef _Tp& __type;\n-    };\n-\n-  template<typename _Tp>\n-    struct __decay_and_strip\n-    {\n-      typedef typename __strip_reference_wrapper<\n-\ttypename decay<_Tp>::type>::__type __type;\n-    };\n-\n   // NB: DR 706.\n   template<class _T1, class _T2>\n     inline pair<typename __decay_and_strip<_T1>::__type,"}, {"sha": "00b94940f247d162bc1653d1cbe510e00aa1aa86", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=5e108459ec3e6edc88534786f970b57b7714f80a", "patch": "@@ -857,29 +857,6 @@ namespace std\n     : public integral_constant<int, _Num>\n     { };\n \n-  /**\n-   * Stores a tuple of indices. Used by bind() to extract the elements\n-   * in a tuple. \n-   */\n-  template<int... _Indexes>\n-    struct _Index_tuple\n-    {\n-      typedef _Index_tuple<_Indexes..., sizeof...(_Indexes)> __next;\n-    };\n-\n-  /// Builds an _Index_tuple<0, 1, 2, ..., _Num-1>.\n-  template<std::size_t _Num>\n-    struct _Build_index_tuple\n-    {\n-      typedef typename _Build_index_tuple<_Num-1>::__type::__next __type;\n-    };\n-\n-  template<>\n-    struct _Build_index_tuple<0>\n-    {\n-      typedef _Index_tuple<> __type;\n-    };\n-\n   /** \n    * Used by _Safe_tuple_element to indicate that there is no tuple\n    * element at this position."}, {"sha": "f9aa14f205788bbea0043f50b5a325611975ebfe", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=5e108459ec3e6edc88534786f970b57b7714f80a", "patch": "@@ -550,6 +550,28 @@ namespace std\n       return __result_type(std::forward<_Elements>(__args)...);\n     }\n \n+  template<typename _Tp, bool = is_array<_Tp>::value>\n+    struct __pa_add_rvalue_reference_helper\n+    { typedef typename std::add_rvalue_reference<_Tp>::type __type; };\n+\n+  template<typename _Tp>\n+    struct __pa_add_rvalue_reference_helper<_Tp, true>\n+    { typedef _Tp& __type; };\n+\n+  template<typename _Tp>\n+    struct __pa_add_rvalue_reference\n+    : public __pa_add_rvalue_reference_helper<_Tp>\n+    { };\n+\n+  template<typename... _Elements>\n+    inline tuple<typename __pa_add_rvalue_reference<_Elements>::__type...>\n+    pack_arguments(_Elements&&... __args)\n+    {\n+      typedef tuple<typename __pa_add_rvalue_reference<_Elements>::__type...>\n+\t__result_type;\n+      return __result_type(std::forward<_Elements>(__args)...);\n+    }\n+\n   template<std::size_t...> struct __index_holder { };    \n \n   template<std::size_t __i, typename _IdxHolder, typename... _Elements>\n@@ -678,6 +700,49 @@ namespace std\n   {\n     _Swallow_assign ignore;\n   }; // anonymous namespace\n+\n+  /**\n+   * Stores a tuple of indices. Used by bind() to extract the elements\n+   * in a tuple. \n+   */\n+  template<int... _Indexes>\n+    struct _Index_tuple\n+    {\n+      typedef _Index_tuple<_Indexes..., sizeof...(_Indexes)> __next;\n+    };\n+\n+  /// Builds an _Index_tuple<0, 1, 2, ..., _Num-1>.\n+  template<std::size_t _Num>\n+    struct _Build_index_tuple\n+    {\n+      typedef typename _Build_index_tuple<_Num-1>::__type::__next __type;\n+    };\n+\n+  template<>\n+    struct _Build_index_tuple<0>\n+    {\n+      typedef _Index_tuple<> __type;\n+    };\n+\n+  // See stl_pair.h...\n+  template<class _T1, class _T2>\n+    template<typename _Tp, typename... _Args>\n+      inline _Tp\n+      pair<_T1, _T2>::\n+      __cons(tuple<_Args...>&& __tuple)\n+      {\n+\ttypedef typename _Build_index_tuple<sizeof...(_Args)>::__type\n+\t  _Indexes;\n+\treturn __do_cons<_Tp>(std::move(__tuple), _Indexes());\n+      }\n+\n+  template<class _T1, class _T2>\n+    template<typename _Tp, typename... _Args, int... _Indexes>\n+      inline _Tp\n+      pair<_T1, _T2>::\n+      __do_cons(tuple<_Args...>&& __tuple,\n+\t\tconst _Index_tuple<_Indexes...>&)\n+      { return _Tp(std::forward<_Args>(get<_Indexes>(__tuple))...); }\n }\n \n #endif // __GXX_EXPERIMENTAL_CXX0X__"}, {"sha": "a2748c565b1522f155b15000b195f6f670bccb8a", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=5e108459ec3e6edc88534786f970b57b7714f80a", "patch": "@@ -405,6 +405,35 @@ namespace std\n       typedef typename __decay_selector<__remove_type>::__type type;\n     };\n \n+  template<typename _Tp>\n+    class reference_wrapper;\n+\n+  // Helper which adds a reference to a type when given a reference_wrapper\n+  template<typename _Tp>\n+    struct __strip_reference_wrapper\n+    {\n+      typedef _Tp __type;\n+    };\n+\n+  template<typename _Tp>\n+    struct __strip_reference_wrapper<reference_wrapper<_Tp> >\n+    {\n+      typedef _Tp& __type;\n+    };\n+\n+  template<typename _Tp>\n+    struct __strip_reference_wrapper<const reference_wrapper<_Tp> >\n+    {\n+      typedef _Tp& __type;\n+    };\n+\n+  template<typename _Tp>\n+    struct __decay_and_strip\n+    {\n+      typedef typename __strip_reference_wrapper<\n+\ttypename decay<_Tp>::type>::__type __type;\n+    };\n+\n \n   // Utility for constructing identically cv-qualified types.\n   template<typename _Unqualified, bool _IsConst, bool _IsVol>"}, {"sha": "bd424788dfb5e02b3da9ef73e84aebf8a56c6180", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=5e108459ec3e6edc88534786f970b57b7714f80a", "patch": "@@ -2,7 +2,7 @@\n // { dg-do compile }\n // 2009-11-12  Paolo Carlini  <paolo.carlini@oracle.com>\n //\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 626 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 655 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 30 }\n // { dg-excess-errors \"In function\" }\n "}, {"sha": "7a8ad661d858212e6393faaeaca2b6741655985a", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=5e108459ec3e6edc88534786f970b57b7714f80a", "patch": "@@ -3,7 +3,7 @@\n \n // 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n //\n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -48,8 +48,8 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 588 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 552 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 617 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 581 }\n \n // { dg-excess-errors \"At global scope\" }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "23bca2bffa22cace6950c03232898eb4a13eee18", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=5e108459ec3e6edc88534786f970b57b7714f80a", "patch": "@@ -3,7 +3,7 @@\n \n // 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n //\n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -48,8 +48,8 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 511 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 475 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 540 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 504 }\n \n // { dg-excess-errors \"At global scope\" }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "3844e1bf1e43b3be17f353b509775fec8252ead2", "filename": "libstdc++-v3/testsuite/20_util/pair/piecewise.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fpiecewise.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fpiecewise.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fpiecewise.cc?ref=5e108459ec3e6edc88534786f970b57b7714f80a", "patch": "@@ -0,0 +1,98 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-04-30  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Tuple\n+\n+#include <utility>\n+#include <tuple>\n+#include <testsuite_hooks.h>\n+\n+struct type_zero\n+{\n+  type_zero() : n_(757) { }\n+\n+  type_zero(const type_zero&) = delete;\n+  type_zero(type_zero&& other) : n_(other.n_) { }\n+\n+  int get() const { return n_; }\n+\n+private:\n+  int n_;\n+};\n+\n+struct type_one\n+{\n+  type_one(int n) : n_(n) { }\n+\n+  type_one(const type_one&) = delete;\n+  type_one(type_one&& other) : n_(other.n_) { }\n+\n+  int get() const { return n_; }\n+\n+private:\n+  int n_;\n+};\n+\n+struct type_two\n+{\n+  type_two(int n1, int n2) : n1_(n1), n2_(n2) { }\n+\n+  type_two(const type_two&) = delete;\n+  type_two(type_two&& other) : n1_(other.n1_), n2_(other.n2_) { }\n+\n+  int get1() const { return n1_; }\n+  int get2() const { return n2_; }\n+\n+private:\n+  int n1_, n2_;\n+};\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::pair<type_one, type_zero> pp0(std::piecewise_construct_t(),\n+\t\t\t\t     std::pack_arguments(-3),\n+\t\t\t\t     std::pack_arguments());\n+  VERIFY( pp0.first.get() == -3 );\n+  VERIFY( pp0.second.get() == 757 );\n+\n+  std::pair<type_one, type_two> pp1(std::piecewise_construct_t(),\n+\t\t\t\t    std::pack_arguments(6),\n+\t\t\t\t    std::pack_arguments(5, 4));\n+  VERIFY( pp1.first.get() == 6 );\n+  VERIFY( pp1.second.get1() == 5 );\n+  VERIFY( pp1.second.get2() == 4 );\n+\n+  std::pair<type_two, type_two> pp2(std::piecewise_construct_t(),\n+\t\t\t\t    std::pack_arguments(2, 1),\n+\t\t\t\t    std::pack_arguments(-1, -3));\n+  VERIFY( pp2.first.get1() == 2 );\n+  VERIFY( pp2.first.get2() == 1 );\n+  VERIFY( pp2.second.get1() == -1 );\n+  VERIFY( pp2.second.get2() == -3 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7bcb517716995694ffa5a0d1bfee553292db154d", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/big_tuples.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fbig_tuples.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fbig_tuples.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fbig_tuples.cc?ref=5e108459ec3e6edc88534786f970b57b7714f80a", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,6 +20,7 @@\n // Tuple\n \n #include <tuple>\n+#include <utility> // for pair\n #include <testsuite_hooks.h>\n \n using namespace std;"}, {"sha": "9871f4959a66f4b3709a510d9675ed87e0c600b7", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/constructor.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconstructor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconstructor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconstructor.cc?ref=5e108459ec3e6edc88534786f970b57b7714f80a", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,6 +20,7 @@\n // Tuple\n \n #include <tuple>\n+#include <utility> // for pair\n #include <testsuite_hooks.h>\n \n using namespace std;"}, {"sha": "872405e3025606a24ad9a5bebf37e52139d821bd", "filename": "libstdc++-v3/testsuite/20_util/tuple/creation_functions/pack_arguments.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fpack_arguments.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e108459ec3e6edc88534786f970b57b7714f80a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fpack_arguments.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fpack_arguments.cc?ref=5e108459ec3e6edc88534786f970b57b7714f80a", "patch": "@@ -0,0 +1,72 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-04-30  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Tuple\n+\n+#include <tuple>\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::pack_arguments();\n+\n+  VERIFY( std::get<0>(std::pack_arguments(-1)) == -1 );\n+  VERIFY( (std::is_same<decltype(std::pack_arguments(-1)),\n+\t   std::tuple<int&&>>::value) );\n+\n+  const int i1 = 1;\n+  const int i2 = 2;\n+  const double d1 = 4.0;\n+  auto t1 = std::pack_arguments(i1, i2, d1);\n+  VERIFY( (std::is_same<decltype(t1), std::tuple<const int&,\n+\t   const int&, const double&>>::value) );\n+  VERIFY( std::get<0>(t1) == i1 );\n+  VERIFY( std::get<1>(t1) == i2 );\n+  VERIFY( std::get<2>(t1) == d1 );\n+\n+  typedef const int a_type1[3];\n+  a_type1 a1 = { -1, 1, 2 };\n+  auto t2 = std::pack_arguments(a1);\n+  VERIFY( (std::is_same<decltype(t2), std::tuple<a_type1&>>::value) );\n+  VERIFY( std::get<0>(t2)[0] == a1[0] );\n+  VERIFY( std::get<0>(t2)[1] == a1[1] );\n+  VERIFY( std::get<0>(t2)[2] == a1[2] );\n+\n+  typedef int a_type2[2];\n+  a_type2 a2 = { 2, -2 };\n+  volatile int i4 = 1;\n+  auto t3 = std::pack_arguments(a2, i4);\n+  VERIFY( (std::is_same<decltype(t3), std::tuple<a_type2&,\n+\t   volatile int&>>::value) );\n+  VERIFY( std::get<0>(t3)[0] == a2[0] );\n+  VERIFY( std::get<0>(t3)[1] == a2[1] );\n+  VERIFY( std::get<1>(t3) == i4 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}