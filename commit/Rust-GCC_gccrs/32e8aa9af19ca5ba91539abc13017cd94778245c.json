{"sha": "32e8aa9af19ca5ba91539abc13017cd94778245c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJlOGFhOWFmMTljYTViYTkxNTM5YWJjMTMwMTdjZDk0Nzc4MjQ1Yw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-02-11T23:50:45Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-02-11T23:50:45Z"}, "message": "re PR c/456 (constant expressions constraints (gcc.dg/c90-const-expr-1))\n\n\tPR c/456\n\t* cppexp.c (num_binary_op): Don't allow comma operators in #if\n\tconstant expressions at all outside C99 mode if pedantic.\n\ntestsuite:\n\t* gcc.dg/cpp/c90-if-comma-1.c, gcc.dg/cpp/c99-if-comma-1.c:\n\tNew tests.\n\nFrom-SVN: r77676", "tree": {"sha": "a6b7a99780e0752da0df83d39dc326af2f9b8261", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6b7a99780e0752da0df83d39dc326af2f9b8261"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32e8aa9af19ca5ba91539abc13017cd94778245c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32e8aa9af19ca5ba91539abc13017cd94778245c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32e8aa9af19ca5ba91539abc13017cd94778245c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32e8aa9af19ca5ba91539abc13017cd94778245c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "6f2774bd715ce6d54b2e98a4fecca6668a8beb98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8aa9af19ca5ba91539abc13017cd94778245c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8aa9af19ca5ba91539abc13017cd94778245c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32e8aa9af19ca5ba91539abc13017cd94778245c", "patch": "@@ -1,3 +1,9 @@\n+2004-02-11  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/456\n+\t* cppexp.c (num_binary_op): Don't allow comma operators in #if\n+\tconstant expressions at all outside C99 mode if pedantic.\n+\n 2004-02-11  Uros Bizjak  <uros@kss-loka.si>\n \n \t* optabs.h (enum optab_index): Add new OTI_log10 and OTI_log2."}, {"sha": "5603f5bd58a143eafbba89a781af760122a3e7fc", "filename": "gcc/cppexp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8aa9af19ca5ba91539abc13017cd94778245c/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8aa9af19ca5ba91539abc13017cd94778245c/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=32e8aa9af19ca5ba91539abc13017cd94778245c", "patch": "@@ -1347,7 +1347,8 @@ num_binary_op (cpp_reader *pfile, cpp_num lhs, cpp_num rhs, enum cpp_ttype op)\n \n       /* Comma.  */\n     default: /* case CPP_COMMA: */\n-      if (CPP_PEDANTIC (pfile) && !pfile->state.skip_eval)\n+      if (CPP_PEDANTIC (pfile) && (!CPP_OPTION (pfile, c99)\n+\t\t\t\t   || !pfile->state.skip_eval))\n \tcpp_error (pfile, CPP_DL_PEDWARN,\n \t\t   \"comma operator in operand of #if\");\n       lhs = rhs;"}, {"sha": "140302bb11d6e251d0f56af69979348d0738c300", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8aa9af19ca5ba91539abc13017cd94778245c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8aa9af19ca5ba91539abc13017cd94778245c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=32e8aa9af19ca5ba91539abc13017cd94778245c", "patch": "@@ -1,3 +1,9 @@\n+2004-02-11  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/456\n+\t* gcc.dg/cpp/c90-if-comma-1.c, gcc.dg/cpp/c99-if-comma-1.c: New\n+\ttests.\n+\n 2004-02-11  Uros Bizjak  <uros@kss-loka.si>\n \n \t* gcc.dg/builtins-33.c: New test."}, {"sha": "c00403f16adb1eecabca4a46c9c4302ff9d5b9ef", "filename": "gcc/testsuite/gcc.dg/cpp/c90-if-comma-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8aa9af19ca5ba91539abc13017cd94778245c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc90-if-comma-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8aa9af19ca5ba91539abc13017cd94778245c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc90-if-comma-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc90-if-comma-1.c?ref=32e8aa9af19ca5ba91539abc13017cd94778245c", "patch": "@@ -0,0 +1,11 @@\n+/* Test for commas in constant expressions in #if: not permitted in C90\n+   but permitted in unevaluated subexpressions in C99.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+#if (1, 2) /* { dg-error \"comma\" \"evaluated comma\" } */\n+#endif\n+\n+#if 1 || (1, 2) /* { dg-error \"comma\" \"unevaluated comma\" } */\n+#endif"}, {"sha": "cb8eb6f7363c4e6101e6346a99991937e909083f", "filename": "gcc/testsuite/gcc.dg/cpp/c99-if-comma-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e8aa9af19ca5ba91539abc13017cd94778245c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc99-if-comma-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e8aa9af19ca5ba91539abc13017cd94778245c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc99-if-comma-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc99-if-comma-1.c?ref=32e8aa9af19ca5ba91539abc13017cd94778245c", "patch": "@@ -0,0 +1,11 @@\n+/* Test for commas in constant expressions in #if: not permitted in C90\n+   but permitted in unevaluated subexpressions in C99.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+#if (1, 2) /* { dg-error \"comma\" \"evaluated comma\" } */\n+#endif\n+\n+#if 1 || (1, 2)\n+#endif"}]}