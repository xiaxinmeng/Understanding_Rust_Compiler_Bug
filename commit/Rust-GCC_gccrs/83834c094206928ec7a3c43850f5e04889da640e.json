{"sha": "83834c094206928ec7a3c43850f5e04889da640e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM4MzRjMDk0MjA2OTI4ZWM3YTNjNDM4NTBmNWUwNDg4OWRhNjQwZQ==", "commit": {"author": {"name": "Ilya Enkovich", "email": "enkovich.gnu@gmail.com", "date": "2016-01-11T10:27:17Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2016-01-11T10:27:17Z"}, "message": "re PR target/69010 (Boolean vector constant with a scalar mode is expanded incorrectly)\n\ngcc/\n\n\tPR target/69010\n\t* expr.c (expand_expr_real_1): For boolean vector constants\n\twith a scalar mode use const_scalar_mask_from_tree.\n\t(const_scalar_mask_from_tree): New.\n\t* optabs.c (expand_vec_cond_mask_expr): Use mask mode\n\tassigned to a mask type to handle constants.\n\ngcc/testsuite/\n\n\tPR target/69010\n\t* gcc.target/i386/pr69010.c: New test.\n\nFrom-SVN: r232216", "tree": {"sha": "ae811e2413e2fbf7ab3c5f0df5dc2cf1b1af4dc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae811e2413e2fbf7ab3c5f0df5dc2cf1b1af4dc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83834c094206928ec7a3c43850f5e04889da640e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83834c094206928ec7a3c43850f5e04889da640e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83834c094206928ec7a3c43850f5e04889da640e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83834c094206928ec7a3c43850f5e04889da640e/comments", "author": null, "committer": null, "parents": [{"sha": "dcf89d578058ed538e3dcf4e151d99a267e81bf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcf89d578058ed538e3dcf4e151d99a267e81bf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcf89d578058ed538e3dcf4e151d99a267e81bf4"}], "stats": {"total": 101, "additions": 97, "deletions": 4}, "files": [{"sha": "bfdefb91ce50d1f5fc83070c75368d96b184be6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83834c094206928ec7a3c43850f5e04889da640e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83834c094206928ec7a3c43850f5e04889da640e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83834c094206928ec7a3c43850f5e04889da640e", "patch": "@@ -1,3 +1,12 @@\n+2016-01-11  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\tPR target/69010\n+\t* expr.c (expand_expr_real_1): For boolean vector constants\n+\twith a scalar mode use const_scalar_mask_from_tree.\n+\t(const_scalar_mask_from_tree): New.\n+\t* optabs.c (expand_vec_cond_mask_expr): Use mask mode\n+\tassigned to a mask type to handle constants.\n+\n 2016-01-11  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/69044"}, {"sha": "0a1c4259bb54dda2f2dffa77806fcb3acda17125", "filename": "gcc/expr.c", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83834c094206928ec7a3c43850f5e04889da640e/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83834c094206928ec7a3c43850f5e04889da640e/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=83834c094206928ec7a3c43850f5e04889da640e", "patch": "@@ -137,6 +137,7 @@ static void emit_single_push_insn (machine_mode, rtx, tree);\n #endif\n static void do_tablejump (rtx, machine_mode, rtx, rtx, rtx, int);\n static rtx const_vector_from_tree (tree);\n+static rtx const_scalar_mask_from_tree (tree);\n static tree tree_expr_size (const_tree);\n static HOST_WIDE_INT int_expr_size (tree);\n \n@@ -9742,9 +9743,15 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \t  return const_vector_from_tree (exp);\n \tif (GET_MODE_CLASS (mode) == MODE_INT)\n \t  {\n-\t    tree type_for_mode = lang_hooks.types.type_for_mode (mode, 1);\n-\t    if (type_for_mode)\n-\t      tmp = fold_unary_loc (loc, VIEW_CONVERT_EXPR, type_for_mode, exp);\n+\t    if (VECTOR_BOOLEAN_TYPE_P (TREE_TYPE (exp)))\n+\t      return const_scalar_mask_from_tree (exp);\n+\t    else\n+\t      {\n+\t\ttree type_for_mode = lang_hooks.types.type_for_mode (mode, 1);\n+\t\tif (type_for_mode)\n+\t\t  tmp = fold_unary_loc (loc, VIEW_CONVERT_EXPR,\n+\t\t\t\t\ttype_for_mode, exp);\n+\t      }\n \t  }\n \tif (!tmp)\n \t  {\n@@ -11455,6 +11462,29 @@ const_vector_mask_from_tree (tree exp)\n   return gen_rtx_CONST_VECTOR (mode, v);\n }\n \n+/* Return a CONST_INT rtx representing vector mask for\n+   a VECTOR_CST of booleans.  */\n+static rtx\n+const_scalar_mask_from_tree (tree exp)\n+{\n+  machine_mode mode = TYPE_MODE (TREE_TYPE (exp));\n+  wide_int res = wi::zero (GET_MODE_PRECISION (mode));\n+  tree elt;\n+  unsigned i;\n+\n+  for (i = 0; i < VECTOR_CST_NELTS (exp); ++i)\n+    {\n+      elt = VECTOR_CST_ELT (exp, i);\n+      gcc_assert (TREE_CODE (elt) == INTEGER_CST);\n+      if (integer_all_onesp (elt))\n+\tres = wi::set_bit (res, i);\n+      else\n+\tgcc_assert (integer_zerop (elt));\n+    }\n+\n+  return immed_wide_int_const (res, mode);\n+}\n+\n /* Return a CONST_VECTOR rtx for a VECTOR_CST tree.  */\n static rtx\n const_vector_from_tree (tree exp)"}, {"sha": "e1ba61504732e4cf8be0149ca6d2991e23a717e3", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83834c094206928ec7a3c43850f5e04889da640e/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83834c094206928ec7a3c43850f5e04889da640e/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=83834c094206928ec7a3c43850f5e04889da640e", "patch": "@@ -5547,7 +5547,7 @@ expand_vec_cond_mask_expr (tree vec_cond_type, tree op0, tree op1, tree op2,\n   rtx_op1 = expand_normal (op1);\n   rtx_op2 = expand_normal (op2);\n \n-  mask = force_reg (GET_MODE (mask), mask);\n+  mask = force_reg (mask_mode, mask);\n   rtx_op1 = force_reg (GET_MODE (rtx_op1), rtx_op1);\n \n   create_output_operand (&ops[0], target, mode);"}, {"sha": "cabef26023e88cb897c3eb36f5351676204c86e8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83834c094206928ec7a3c43850f5e04889da640e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83834c094206928ec7a3c43850f5e04889da640e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=83834c094206928ec7a3c43850f5e04889da640e", "patch": "@@ -1,3 +1,8 @@\n+2016-01-11  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\tPR target/69010\n+\t* gcc.target/i386/pr69010.c: New test.\n+\n 2016-01-11  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/69044"}, {"sha": "29f66f499749d1ac1b1c6c55548b2ccb1bb83a5e", "filename": "gcc/testsuite/gcc.target/i386/pr69010.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83834c094206928ec7a3c43850f5e04889da640e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69010.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83834c094206928ec7a3c43850f5e04889da640e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69010.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69010.c?ref=83834c094206928ec7a3c43850f5e04889da640e", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -mavx512bw\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#define AVX512BW\n+#include \"avx512f-helper.h\"\n+\n+extern void abort (void);\n+\n+void __attribute__((noinline,noclone))\n+test1 (int *a, int *b, int *c)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    {\n+      if ((i == 0) || (i == 3))\n+\ta[i] = b[i];\n+      else\n+\ta[i] = c[i];\n+    }\n+}\n+\n+void\n+TEST ()\n+{\n+  int a[16], b[16], c[16], i;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      a[i] = i;\n+      b[i] = -i;\n+    }\n+\n+  test1 (a, b, c);\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      if ((i == 0) || (i == 3))\n+\t{\n+\t  if (a[i] != b[i])\n+\t    abort ();\n+\t}\n+      else\n+\t{\n+\t  if (a[i] != c[i])\n+\t    abort ();\n+\t}\n+    }\n+}"}]}