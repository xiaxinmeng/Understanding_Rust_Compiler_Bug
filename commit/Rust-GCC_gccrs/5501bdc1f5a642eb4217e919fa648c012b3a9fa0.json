{"sha": "5501bdc1f5a642eb4217e919fa648c012b3a9fa0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUwMWJkYzFmNWE2NDJlYjQyMTdlOTE5ZmE2NDhjMDEyYjNhOWZhMA==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2010-09-24T08:46:36Z"}, "committer": {"name": "Tristan Gingold", "email": "gingold@gcc.gnu.org", "date": "2010-09-24T08:46:36Z"}, "message": "re PR target/44242 (vms-crt0*.c should compile with gcc)\n\n2010-09-09  Tristan Gingold  <gingold@adacore.com>\n\n\tPR target/44242\n\t* config/vms/vms-crt0-64.c: Removed.\n\t* config/vms/vms-crt0.c: Removed.\n\t* config/vms/vms-psxcrt0-64.c: Removed.\n\t* config/vms/vms-psxcrt0.c: Removed.\n\t* config/vms/vms-ucrt0.c: New file.\n\t* config/vms/t-vms64: Removed.\n\t* config/vms/t-vms (VMS_EXTRA_PARTS): Uncomment it.  Remove DECC.\n\tUse $(GCC_FOR_TARGET) to build pcrt0.o and vcrt0.o\n\t* config.gcc (alpha-dec-vms): Use t-vms.\n\nFrom-SVN: r164587", "tree": {"sha": "ec7eacb20b37af088b6f8fa54fed95e4e3126948", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec7eacb20b37af088b6f8fa54fed95e4e3126948"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5501bdc1f5a642eb4217e919fa648c012b3a9fa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5501bdc1f5a642eb4217e919fa648c012b3a9fa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5501bdc1f5a642eb4217e919fa648c012b3a9fa0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5501bdc1f5a642eb4217e919fa648c012b3a9fa0/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "35e711d3df0277e462f64368ddb11687bf4bbc64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35e711d3df0277e462f64368ddb11687bf4bbc64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35e711d3df0277e462f64368ddb11687bf4bbc64"}], "stats": {"total": 569, "additions": 151, "deletions": 418}, "files": [{"sha": "619461df49146dc6523c6628ca7f1e8b589630d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5501bdc1f5a642eb4217e919fa648c012b3a9fa0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5501bdc1f5a642eb4217e919fa648c012b3a9fa0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5501bdc1f5a642eb4217e919fa648c012b3a9fa0", "patch": "@@ -1,3 +1,16 @@\n+2010-09-09  Tristan Gingold  <gingold@adacore.com>\n+\n+\tPR target/44242\n+\t* config/vms/vms-crt0-64.c: Removed.\n+\t* config/vms/vms-crt0.c: Removed.\n+\t* config/vms/vms-psxcrt0-64.c: Removed.\n+\t* config/vms/vms-psxcrt0.c: Removed.\n+\t* config/vms/vms-ucrt0.c: New file.\n+\t* config/vms/t-vms64: Removed.\n+\t* config/vms/t-vms (VMS_EXTRA_PARTS): Uncomment it.  Remove DECC.\n+\tUse $(GCC_FOR_TARGET) to build pcrt0.o and vcrt0.o\n+\t* config.gcc (alpha-dec-vms): Use t-vms.\n+\n 2010-09-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* doc/invoke.texi (-fno-nil-receivers): Tidied up line to remove\n@@ -20,7 +33,7 @@\n \t(Exceptions): New section mostly containing text previously in the\n \tdescription of the -fobjc-exception command-line option.\n \t(Synchronization): Same.\n-\t\n+\n 2010-09-24  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (ix86_code_end): Move the initialization of"}, {"sha": "c504249cefd8b37146b4fe67adcc3d95530004f0", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5501bdc1f5a642eb4217e919fa648c012b3a9fa0/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5501bdc1f5a642eb4217e919fa648c012b3a9fa0/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=5501bdc1f5a642eb4217e919fa648c012b3a9fa0", "patch": "@@ -721,7 +721,7 @@ alpha*-dec-osf5.1*)\n alpha64-dec-*vms*)\n \ttm_file=\"${tm_file} alpha/vms.h alpha/vms64.h\"\n \txm_file=\"alpha/xm-vms.h vms/xm-vms64.h\"\n-\ttmake_file=\"alpha/t-alpha vms/t-vms vms/t-vms64 alpha/t-vms alpha/t-ieee\"\n+\ttmake_file=\"alpha/t-alpha vms/t-vms alpha/t-vms alpha/t-ieee\"\n \txmake_file=vms/x-vms\n \texeext=.exe\n \tinstall_headers_dir=install-headers-cp\n@@ -1549,7 +1549,7 @@ ia64*-*-hpux*)\n ia64-hp-*vms*)\n \ttm_file=\"${tm_file} elfos.h ia64/sysv4.h ia64/elf.h ia64/vms.h ia64/vms64.h\"\n \txm_file=\"vms/xm-vms.h vms/xm-vms64.h\"\n-\ttmake_file=\"vms/t-vms vms/t-vms64 ia64/t-ia64 ia64/t-vms\"\n+\ttmake_file=\"vms/t-vms ia64/t-ia64 ia64/t-vms\"\n \txmake_file=vms/x-vms\n \ttarget_cpu_default=\"0\"\n \tif test x$gas = xyes"}, {"sha": "75756a234d98c8fa3ed8513b2cdfa6606b5f40ec", "filename": "gcc/config/vms/t-vms", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5501bdc1f5a642eb4217e919fa648c012b3a9fa0/gcc%2Fconfig%2Fvms%2Ft-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5501bdc1f5a642eb4217e919fa648c012b3a9fa0/gcc%2Fconfig%2Fvms%2Ft-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Ft-vms?ref=5501bdc1f5a642eb4217e919fa648c012b3a9fa0", "patch": "@@ -24,15 +24,14 @@ LIMITS_H_TEST = false\n # Under VMS, directory names cannot contain dots.\n version:=$(shell echo $(BASEVER_c) | sed -e 's/\\./_/g')\n \n-# Temporary restriction: VMS_EXTRA_PARTS must be compiled by DEC C.\n-#VMS_EXTRA_PARTS=vcrt0.o pcrt0.o\n-VMS_EXTRA_PARTS=\n-\n-DECC=`echo $(CC) | sed -e 's/xgcc -B.*/decc$(exeext)/' -e 's/^gcc/decc/' -e 's/^decc/.\\/decc/' -e 's/\\(.*\\)-gcc/\\1-decc/'`\n+VMS_EXTRA_PARTS=vcrt0.o pcrt0.o\n \n # Assemble startup files.\n-$(T)vcrt0.o: $(CRT0_S) $(GCC_PASSES)\n-\t$(DECC) -c /names=as_is $(srcdir)/config/vms/vms-crt0.c -o $(T)vcrt0.o\n+$(T)vcrt0.o: $(srcdir)/config/vms/vms-ucrt0.c $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n+\t-c -o $(T)vcrt0.o $(srcdir)/config/vms/vms-ucrt0.c\n+\n+$(T)pcrt0.o: $(srcdir)/config/vms/vms-ucrt0.c $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n+\t-c -o $(T)pcrt0.o -DCRT0_POSIX_EXIT $(srcdir)/config/vms/vms-ucrt0.c\n \n-$(T)pcrt0.o: $(CRT0_S) $(GCC_PASSES)\n-\t$(DECC) -c /names=as_is $(srcdir)/config/vms/vms-psxcrt0.c -o $(T)pcrt0.o"}, {"sha": "2fe00692fb59c1f3c1bca31dcf76fc4019962d07", "filename": "gcc/config/vms/t-vms64", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35e711d3df0277e462f64368ddb11687bf4bbc64/gcc%2Fconfig%2Fvms%2Ft-vms64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35e711d3df0277e462f64368ddb11687bf4bbc64/gcc%2Fconfig%2Fvms%2Ft-vms64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Ft-vms64?ref=35e711d3df0277e462f64368ddb11687bf4bbc64", "patch": "@@ -1,27 +0,0 @@\n-# Copyright (C) 2009\n-# Free Software Foundation, Inc.\n-#\n-# This file is part of GCC.\n-#\n-# GCC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3, or (at your option)\n-# any later version.\n-#\n-# GCC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-# Assemble startup files.\n-$(T)vcrt0.o: $(CRT0_S) $(GCC_PASSES)\n-\t$(DECC) -c /names=as_is /pointer_size=64  \\\n-\t     $(srcdir)/config/vms/vms-crt0-64.c -o $(T)vcrt0.o\n-\n-$(T)pcrt0.o: $(CRT0_S) $(GCC_PASSES)\n-\t$(DECC) -c /names=as_is /pointer_size=64 \\\n-\t     $(srcdir)/config/vms/vms-psxcrt0-64.c -o $(T)pcrt0.o"}, {"sha": "ec59d81d6af619392f83aae82717ac9c49945bf2", "filename": "gcc/config/vms/vms-crt0-64.c", "status": "removed", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35e711d3df0277e462f64368ddb11687bf4bbc64/gcc%2Fconfig%2Fvms%2Fvms-crt0-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35e711d3df0277e462f64368ddb11687bf4bbc64/gcc%2Fconfig%2Fvms%2Fvms-crt0-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-crt0-64.c?ref=35e711d3df0277e462f64368ddb11687bf4bbc64", "patch": "@@ -1,95 +0,0 @@\n-/* VMS 64bit crt0 returning VMS style condition codes .\n-   Copyright (C) 2001, 2009 Free Software Foundation, Inc.\n-   Contributed by Douglas B. Rupp (rupp@gnat.com).\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3, or (at your option)\n-   any later version.\n-\n-   GCC is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   Under Section 7 of GPL version 3, you are granted additional\n-   permissions described in the GCC Runtime Library Exception, version\n-   3.1, as published by the Free Software Foundation.\n-\n-   You should have received a copy of the GNU General Public License and\n-   a copy of the GCC Runtime Library Exception along with this program;\n-   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-#if !defined(__DECC)\n-You Lose! This file can only be compiled with DEC C.\n-#else\n-\n-/* This file can only be compiled with DEC C, due to the call to\n-   lib$establish and the pragmas pointer_size.  */\n-\n-#pragma __pointer_size short\n-\n-#include <stdlib.h>\n-#include <string.h>\n-#include <ssdef.h>\n-\n-extern void decc$main ();\n-\n-extern int main ();\n-\n-static int\n-handler (sigargs, mechargs)\n-     void *sigargs;\n-     void *mechargs;\n-{\n-  return SS$_RESIGNAL;\n-}\n-\n-int\n-__main (arg1, arg2, arg3, image_file_desc, arg5, arg6)\n-     void *arg1, *arg2, *arg3;\n-     void *image_file_desc;\n-     void *arg5, *arg6;\n-{\n-  int argc;\n-  char **argv;\n-  char **envp;\n-\n-#pragma __pointer_size long\n-\n-  int i;\n-  char **long_argv;\n-  char **long_envp;\n-\n-#pragma __pointer_size short\n-\n-  lib$establish (handler);\n-  decc$main (arg1, arg2, arg3, image_file_desc,\n-\t     arg5, arg6, &argc, &argv, &envp);\n-\n-#pragma __pointer_size long\n-\n-  /* Reallocate argv with 64 bit pointers.  */\n-  long_argv = (char **) _malloc32 (sizeof (char *) * (argc + 1));\n-\n-  for (i = 0; i < argc; i++)\n-    long_argv[i] = (char *) _strdup32 (argv[i]);\n-\n-  long_argv[argc] = (char *) 0;\n-\n-  for (i = 0; envp[i]; i++);\n-  long_envp = (char **) _malloc32 (sizeof (char *) * (i + 1));\n-\n-  for (i = 0; envp[i]; i++)\n-    long_envp[i] = (char *) _strdup32 (envp[i]);\n-\n-  long_envp[i] = (char *) 0;\n-\n-#pragma __pointer_size short\n-\n-  return main (argc, long_argv, long_envp);\n-}\n-#endif"}, {"sha": "c0fdaaf16c6bc5c6cda6cd9264c683e8c9fc2bd5", "filename": "gcc/config/vms/vms-crt0.c", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35e711d3df0277e462f64368ddb11687bf4bbc64/gcc%2Fconfig%2Fvms%2Fvms-crt0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35e711d3df0277e462f64368ddb11687bf4bbc64/gcc%2Fconfig%2Fvms%2Fvms-crt0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-crt0.c?ref=35e711d3df0277e462f64368ddb11687bf4bbc64", "patch": "@@ -1,66 +0,0 @@\n-/* VMS crt0 returning VMS style condition codes .\n-   Copyright (C) 2001, 2009 Free Software Foundation, Inc.\n-   Contributed by Douglas B. Rupp (rupp@gnat.com).\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3, or (at your option)\n-   any later version.\n-\n-   GCC is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   Under Section 7 of GPL version 3, you are granted additional\n-   permissions described in the GCC Runtime Library Exception, version\n-   3.1, as published by the Free Software Foundation.\n-\n-   You should have received a copy of the GNU General Public License and\n-   a copy of the GCC Runtime Library Exception along with this program;\n-   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-#if !defined(__DECC)\n-You Lose! This file can only be compiled with DEC C.\n-#else\n-\n-/* This file can only be compiled with DEC C, due to the call to\n-   lib$establish.  */\n-\n-#include <stdlib.h>\n-#include <string.h>\n-#include <ssdef.h>\n-\n-extern void decc$main ();\n-\n-extern int main ();\n-\n-static int\n-handler (sigargs, mechargs)\n-     void *sigargs;\n-     void *mechargs;\n-{\n-  return SS$_RESIGNAL;\n-}\n-\n-int\n-__main (arg1, arg2, arg3, image_file_desc, arg5, arg6)\n-     void *arg1, *arg2, *arg3;\n-     void *image_file_desc;\n-     void *arg5, *arg6;\n-{\n-  int argc;\n-  char **argv;\n-  char **envp;\n-\n-  lib$establish (handler);\n-\n-  decc$main(arg1, arg2, arg3, image_file_desc, arg5, arg6,\n-\t    &argc, &argv, &envp);\n-\n-  return main (argc, argv, envp);\n-}\n-#endif"}, {"sha": "45afbc9a03d3882e8e3309ff43778dae25e383fa", "filename": "gcc/config/vms/vms-psxcrt0-64.c", "status": "removed", "additions": 0, "deletions": 124, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35e711d3df0277e462f64368ddb11687bf4bbc64/gcc%2Fconfig%2Fvms%2Fvms-psxcrt0-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35e711d3df0277e462f64368ddb11687bf4bbc64/gcc%2Fconfig%2Fvms%2Fvms-psxcrt0-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-psxcrt0-64.c?ref=35e711d3df0277e462f64368ddb11687bf4bbc64", "patch": "@@ -1,124 +0,0 @@\n-/* VMS 64bit crt0 returning Unix style condition codes .\n-   Copyright (C) 2001, 2009 Free Software Foundation, Inc.\n-   Contributed by Douglas B. Rupp (rupp@gnat.com).\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3, or (at your option)\n-   any later version.\n-\n-   GCC is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   Under Section 7 of GPL version 3, you are granted additional\n-   permissions described in the GCC Runtime Library Exception, version\n-   3.1, as published by the Free Software Foundation.\n-\n-   You should have received a copy of the GNU General Public License and\n-   a copy of the GCC Runtime Library Exception along with this program;\n-   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-#if !defined(__DECC)\n-You Lose! This file can only be compiled with DEC C.\n-#else\n-\n-/* This file can only be compiled with DEC C, due to the call to\n-   lib$establish and the pragmas pointer_size.  */\n-\n-#pragma __pointer_size short\n-\n-#include <stdlib.h>\n-#include <string.h>\n-#include <ssdef.h>\n-#include <stsdef.h>\n-#include <errnodef.h>\n-\n-extern void decc$main ();\n-extern int main ();\n-\n-static int\n-handler (sigargs, mechargs)\n-     void *sigargs;\n-     void *mechargs;\n-{\n-  return SS$_RESIGNAL;\n-}\n-\n-int\n-__main (arg1, arg2, arg3, image_file_desc, arg5, arg6)\n-     void *arg1, *arg2, *arg3;\n-     void *image_file_desc;\n-     void *arg5, *arg6;\n-{\n-  int argc;\n-  char **argv;\n-  char **envp;\n-\n-#pragma __pointer_size long\n-\n-  int i;\n-  char **long_argv;\n-  char **long_envp;\n-  int status;\n-\n-#pragma __pointer_size short\n-\n-  lib$establish (handler);\n-  decc$main (arg1, arg2, arg3, image_file_desc,\n-\t     arg5, arg6, &argc, &argv, &envp);\n-\n-#pragma __pointer_size long\n-\n-  /* Reallocate argv with 64 bit pointers.  */\n-  long_argv = (char **) _malloc32 (sizeof (char *) * (argc + 1));\n-\n-  for (i = 0; i < argc; i++)\n-    long_argv[i] = (char *) _strdup32 (argv[i]);\n-\n-  long_argv[argc] = (char *) 0;\n-\n-  for (i = 0; envp[i]; i++);\n-  long_envp = (char **) _malloc32 (sizeof (char *) * (i + 1));\n-\n-  for (i = 0; envp[i]; i++)\n-    long_envp[i] = (char *) _strdup32 (envp[i]);\n-\n-  long_envp[i] = (char *) 0;\n-\n-#pragma __pointer_size short\n-\n-  status = main (argc, long_argv, long_envp);\n-\n-  /* Map into a range of 0 - 255.  */\n-  status = status & 255;\n-\n-  if (status > 0)\n-    {\n-      int save_status = status;\n-\n-      status = C$_EXIT1 + ((status - 1) << STS$V_MSG_NO);\n-\n-      /* An exit failure status requires a \"severe\" error.  All status values\n-\t are defined in errno with a successful (1) severity but can be\n-\t changed to an error (2) severity by adding 1.  In addition for\n-\t compatibility with UNIX exit() routines we inhibit a run-time error\n-\t message from being generated on exit(1).  */\n-\n-      if (save_status == 1)\n-\t{\n-\t  status++;\n-\t  status |= STS$M_INHIB_MSG;\n-\t}\n-    }\n-\n-  if (status == 0)\n-    status = SS$_NORMAL;\n-\n-  return status;\n-}\n-#endif"}, {"sha": "5ad5ddb0fd832b7b370b3e8bbb84c53378104a8d", "filename": "gcc/config/vms/vms-psxcrt0.c", "status": "removed", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35e711d3df0277e462f64368ddb11687bf4bbc64/gcc%2Fconfig%2Fvms%2Fvms-psxcrt0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35e711d3df0277e462f64368ddb11687bf4bbc64/gcc%2Fconfig%2Fvms%2Fvms-psxcrt0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-psxcrt0.c?ref=35e711d3df0277e462f64368ddb11687bf4bbc64", "patch": "@@ -1,94 +0,0 @@\n-/* VMS crt0 returning Unix style condition codes .\n-   Copyright (C) 2001, 2009 Free Software Foundation, Inc.\n-   Contributed by Douglas B. Rupp (rupp@gnat.com).\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3, or (at your option)\n-   any later version.\n-\n-   GCC is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   Under Section 7 of GPL version 3, you are granted additional\n-   permissions described in the GCC Runtime Library Exception, version\n-   3.1, as published by the Free Software Foundation.\n-\n-   You should have received a copy of the GNU General Public License and\n-   a copy of the GCC Runtime Library Exception along with this program;\n-   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-#if !defined(__DECC)\n-You Lose! This file can only be compiled with DEC C.\n-#else\n-\n-/* This file can only be compiled with DEC C, due to the call to\n-   lib$establish.  */\n-\n-#include <stdlib.h>\n-#include <string.h>\n-#include <ssdef.h>\n-#include <stsdef.h>\n-#include <errnodef.h>\n-\n-extern void decc$main ();\n-extern int main ();\n-\n-static int\n-handler (sigargs, mechargs)\n-     void *sigargs;\n-     void *mechargs;\n-{\n-  return SS$_RESIGNAL;\n-}\n-\n-int\n-__main (arg1, arg2, arg3, image_file_desc, arg5, arg6)\n-     void *arg1, *arg2, *arg3;\n-     void *image_file_desc;\n-     void *arg5, *arg6;\n-{\n-  int argc;\n-  char **argv;\n-  char **envp;\n-  int status;\n-\n-  lib$establish (handler);\n-  decc$main (arg1, arg2, arg3, image_file_desc, arg5, arg6,\n-\t     &argc, &argv, &envp);\n-\n-  status = main (argc, argv, envp);\n-\n-  /* Map into a range of 0 - 255.  */\n-  status = status & 255;\n-\n-  if (status > 0)\n-    {\n-      int save_status = status;\n-\n-      status = C$_EXIT1 + ((status - 1) << STS$V_MSG_NO);\n-\n-      /* An exit failure status requires a \"severe\" error\n-\t All status values are defined in errno with a successful\n-\t (1) severity but can be changed to an error (2) severity by adding 1.\n-\t In addition for compatibility with UNIX exit() routines we inhibit\n-\t a run-time error message from being generated on exit(1).  */\n-\n-      if (save_status == 1)\n-\t{\n-\t  status++;\n-\t  status |= STS$M_INHIB_MSG;\n-\t}\n-    }\n-\n-  if (status == 0)\n-    status = SS$_NORMAL;\n-\n-  return status;\n-}\n-#endif"}, {"sha": "344b59520e08a543d75f31e605b6359f9c5c5c8c", "filename": "gcc/config/vms/vms-ucrt0.c", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5501bdc1f5a642eb4217e919fa648c012b3a9fa0/gcc%2Fconfig%2Fvms%2Fvms-ucrt0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5501bdc1f5a642eb4217e919fa648c012b3a9fa0/gcc%2Fconfig%2Fvms%2Fvms-ucrt0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-ucrt0.c?ref=5501bdc1f5a642eb4217e919fa648c012b3a9fa0", "patch": "@@ -0,0 +1,127 @@\n+/* VMS crt0 returning Unix style condition codes.\n+   Copyright (C) 2001, 2009, 2010 Free Software Foundation, Inc.\n+   Contributed by Douglas B. Rupp (rupp@gnat.com).\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include <stdlib.h>\n+\n+/* Lots of cheat to handle 32bits/64bits pointer conversions.\n+   We use 'long long' for 64 bits pointers and 'int' for 32 bits pointers.  */\n+\n+extern void decc$main (void *arg1, void *arg2, void *arg3,\n+                       void *image_file_desc, void *arg5, void *arg6,\n+                       int *, int *, int *);\n+extern int main (int, char **, char **);\n+extern int _malloc32 (int);\n+\n+#ifdef __ia64__\n+#define MAIN_ASM_NAME asm (\"ELF$TFRADR\")\n+#else\n+#define MAIN_ASM_NAME\n+#endif\n+\n+int __main (void *arg1, void *arg2, void *arg3,\n+            void *image_file_desc, void *arg5, void *arg6) MAIN_ASM_NAME;\n+\n+/* From errnodef.h, but we need to emulate the globalval.  */\n+extern int C$_EXIT1;\n+\n+/* From stsdef.h  */\n+#define STS$V_MSG_NO 0x03\n+#define STS$M_INHIB_MSG 0x10000000\n+\n+/* From ssdef.h  */\n+#define SS$_NORMAL 1\n+\n+int\n+__main (void *arg1, void *arg2, void *arg3,\n+        void *image_file_desc, void *arg5, void *arg6)\n+{\n+  int argc;\n+  int argv;\n+  int envp;\n+  int status;\n+  int i;\n+  long long *long_argv;\n+  long long *long_envp;\n+\n+  /* The argv and envp arrays are 32 bits pointers to 32 bits pointers.  */\n+  decc$main (arg1, arg2, arg3, image_file_desc,\n+\t     arg5, arg6, &argc, &argv, &envp);\n+\n+  if (sizeof (void *) == 8)\n+    {\n+      /* Reallocate argv and envp with 64 bit pointers.  */\n+      long_argv = (long long *)\n+        (long long) _malloc32 (sizeof (long long) * (argc + 1));\n+\n+      for (i = 0; i < argc; i++)\n+        long_argv[i] = ((int *) (long long) argv)[i];\n+\n+      long_argv[argc] = 0;\n+\n+      for (i = 0; ((int *) (long long) envp)[i]; i++)\n+        ;\n+      long_envp = (long long *)\n+        (long long) _malloc32 (sizeof (long long) * (i + 1));\n+\n+      for (i = 0; ((int *) (long long) envp)[i]; i++)\n+        long_envp[i] = ((int *) (long long) envp)[i];\n+\n+      long_envp[i] = 0;\n+    }\n+  else\n+    {\n+      long_argv = (long long *) argv;\n+      long_envp = (long long *) envp;\n+    }\n+  status = main (argc, (char **)long_argv, (char **)long_envp);\n+\n+#ifdef CRT0_POSIX_EXIT\n+  /* Map into a range of 0 - 255.  */\n+  status = status & 255;\n+\n+  if (status > 0)\n+    {\n+      int save_status = status;\n+\n+      status = (long) &C$_EXIT1 + ((status - 1) << STS$V_MSG_NO);\n+\n+      /* An exit failure status requires a \"severe\" error.  All status values\n+\t are defined in errno with a successful (1) severity but can be\n+\t changed to an error (2) severity by adding 1.  In addition for\n+\t compatibility with UNIX exit() routines we inhibit a run-time error\n+\t message from being generated on exit(1).  */\n+\n+      if (save_status == 1)\n+\t{\n+\t  status++;\n+\t  status |= STS$M_INHIB_MSG;\n+\t}\n+    }\n+  else\n+    status = SS$_NORMAL;\n+#endif /* CRT0_POSIX_EXIT */\n+\n+  return status;\n+}"}]}