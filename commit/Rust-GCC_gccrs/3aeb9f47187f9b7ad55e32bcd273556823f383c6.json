{"sha": "3aeb9f47187f9b7ad55e32bcd273556823f383c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FlYjlmNDcxODdmOWI3YWQ1NWUzMmJjZDI3MzU1NjgyM2YzODNjNg==", "commit": {"author": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-04-10T14:53:32Z"}, "committer": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-04-18T02:21:37Z"}, "message": "Introduce limited support for the never type", "tree": {"sha": "c42044bbf0bac300b37cfb2e786fdc5c06a29838", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c42044bbf0bac300b37cfb2e786fdc5c06a29838"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3aeb9f47187f9b7ad55e32bcd273556823f383c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aeb9f47187f9b7ad55e32bcd273556823f383c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aeb9f47187f9b7ad55e32bcd273556823f383c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aeb9f47187f9b7ad55e32bcd273556823f383c6/comments", "author": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5fdf8cc544f9647e2cf28a2da431bfa1faacd15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5fdf8cc544f9647e2cf28a2da431bfa1faacd15"}], "stats": {"total": 365, "additions": 316, "deletions": 49}, "files": [{"sha": "2024a6f91124ec676e28b89c76707e26b7496b4b", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -503,6 +503,11 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n     translated = compiled_type;\n   }\n \n+  void visit (TyTy::NeverType &) override\n+  {\n+    translated = ctx->get_backend ()->void_type ();\n+  }\n+\n private:\n   TyTyResolveCompile (Context *ctx) : ctx (ctx), translated (nullptr) {}\n "}, {"sha": "ba98ac014529f8aa622f0f6d6631d5db3d6b1304", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -222,6 +222,11 @@ class TyTyCompile : public TyTy::TyVisitor\n       = backend->named_type (\"str\", raw_str, Linemap::predeclared_location ());\n   }\n \n+  void visit (TyTy::NeverType &) override\n+  {\n+    translated = backend->void_type ();\n+  }\n+\n private:\n   TyTyCompile (::Backend *backend)\n     : backend (backend), translated (nullptr),"}, {"sha": "9375dd021f45ba9eba57a2034ef1f59fdea317af", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -256,7 +256,7 @@ CompileBlock::visit (HIR::BlockExpr &expr)\n \t}\n     }\n \n-  if (expr.has_expr () && expr.tail_expr_reachable ())\n+  if (expr.has_expr ())\n     {\n       // the previous passes will ensure this is a valid return\n       // dead code elimination should remove any bad trailing expressions\n@@ -410,17 +410,15 @@ HIRCompileBase::compile_function_body (\n \t}\n     }\n \n-  if (function_body->has_expr () && function_body->tail_expr_reachable ())\n+  if (function_body->has_expr ())\n     {\n       // the previous passes will ensure this is a valid return\n       // dead code elimination should remove any bad trailing expressions\n       Bexpression *compiled_expr\n \t= CompileExpr::Compile (function_body->expr.get (), ctx);\n \n-      if (has_return_type)\n+      if (has_return_type && compiled_expr)\n \t{\n-\t  rust_assert (compiled_expr != nullptr);\n-\n \t  std::vector<Bexpression *> retstmts;\n \t  retstmts.push_back (compiled_expr);\n "}, {"sha": "86b10d5b39c95061222b120b548dc04660c4097a", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -90,7 +90,7 @@ ASTLoweringBlock::visit (AST::BlockExpr &expr)\n     return true;\n   });\n \n-  bool tail_reachable = expr.has_tail_expr () && !block_did_terminate;\n+  bool tail_reachable = !block_did_terminate;\n   if (expr.has_tail_expr () && block_did_terminate)\n     {\n       // warning unreachable tail expressions"}, {"sha": "498c8dece1e8a1012944b5d162d57cb540b27d1b", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -2511,7 +2511,7 @@ class BlockExpr : public ExprWithBlock\n   // Returns whether the block contains an expression\n   bool has_expr () const { return expr != nullptr; }\n \n-  bool tail_expr_reachable () const { return tail_reachable; }\n+  bool is_tail_reachable () const { return tail_reachable; }\n \n   BlockExpr (Analysis::NodeMapping mappings,\n \t     std::vector<std::unique_ptr<Stmt> > block_statements,"}, {"sha": "c18ad2a90dcf77ed9d2dc66f77c68cca5d33f776", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -145,16 +145,15 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::ReturnExpr &expr) override\n   {\n-    if (!expr.has_return_expr ())\n-      {\n-\tinfered = new TyTy::TupleType (expr.get_mappings ().get_hirid ());\n-\treturn;\n-      }\n-\n     auto fn_return_tyty = context->peek_return_type ();\n     rust_assert (fn_return_tyty != nullptr);\n \n-    auto expr_ty = TypeCheckExpr::Resolve (expr.get_expr (), false);\n+    TyTy::BaseType *expr_ty;\n+    if (expr.has_return_expr ())\n+      expr_ty = TypeCheckExpr::Resolve (expr.get_expr (), false);\n+    else\n+      expr_ty = new TyTy::TupleType (expr.get_mappings ().get_hirid ());\n+\n     if (expr_ty == nullptr)\n       {\n \trust_error_at (expr.get_locus (),\n@@ -166,6 +165,8 @@ class TypeCheckExpr : public TypeCheckBase\n     fn_return_tyty->append_reference (expr_ty->get_ref ());\n     for (auto &ref : infered->get_combined_refs ())\n       fn_return_tyty->append_reference (ref);\n+\n+    infered = new TyTy::NeverType (expr.get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::CallExpr &expr) override\n@@ -622,17 +623,28 @@ class TypeCheckExpr : public TypeCheckBase\n     auto else_blk_resolved\n       = TypeCheckExpr::Resolve (expr.get_else_block (), inside_loop);\n \n-    infered = if_blk_resolved->unify (else_blk_resolved);\n+    if (if_blk_resolved->get_kind () == TyTy::NEVER)\n+      infered = else_blk_resolved;\n+    else if (else_blk_resolved->get_kind () == TyTy::NEVER)\n+      infered = if_blk_resolved;\n+    else\n+      infered = if_blk_resolved->unify (else_blk_resolved);\n   }\n \n   void visit (HIR::IfExprConseqIf &expr) override\n   {\n     TypeCheckExpr::Resolve (expr.get_if_condition (), false);\n-    auto if_blk = TypeCheckExpr::Resolve (expr.get_if_block (), inside_loop);\n-    auto else_blk\n+    auto if_blk_resolved\n+      = TypeCheckExpr::Resolve (expr.get_if_block (), inside_loop);\n+    auto else_blk_resolved\n       = TypeCheckExpr::Resolve (expr.get_conseq_if_expr (), inside_loop);\n \n-    infered = if_blk->unify (else_blk);\n+    if (if_blk_resolved->get_kind () == TyTy::NEVER)\n+      infered = else_blk_resolved;\n+    else if (else_blk_resolved->get_kind () == TyTy::NEVER)\n+      infered = if_blk_resolved;\n+    else\n+      infered = if_blk_resolved->unify (else_blk_resolved);\n   }\n \n   void visit (HIR::BlockExpr &expr) override;\n@@ -929,7 +941,7 @@ class TypeCheckExpr : public TypeCheckBase\n \tcontext->swap_head_loop_context (unified_ty);\n       }\n \n-    infered = new TyTy::TupleType (expr.get_mappings ().get_hirid ());\n+    infered = new TyTy::NeverType (expr.get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::ContinueExpr &expr) override\n@@ -941,7 +953,7 @@ class TypeCheckExpr : public TypeCheckBase\n \treturn;\n       }\n \n-    infered = new TyTy::TupleType (expr.get_mappings ().get_hirid ());\n+    infered = new TyTy::NeverType (expr.get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::BorrowExpr &expr) override"}, {"sha": "1205dceceee42660e91f7b7c84988df294eaa127", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -82,7 +82,8 @@ class TypeCheckItem : public TypeCheckBase\n \n     context->pop_return_type ();\n \n-    expected_ret_tyty->unify (block_expr_ty);\n+    if (block_expr_ty->get_kind () != TyTy::NEVER)\n+      expected_ret_tyty->unify (block_expr_ty);\n   }\n \n private:"}, {"sha": "aece1884bc7f165545bf8dd3802afc5fe63e1829", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -123,27 +123,15 @@ TypeResolution::Resolve (HIR::Crate &crate)\n void\n TypeCheckExpr::visit (HIR::BlockExpr &expr)\n {\n-  TyTy::BaseType *block_tyty\n-    = new TyTy::TupleType (expr.get_mappings ().get_hirid ());\n-\n   expr.iterate_stmts ([&] (HIR::Stmt *s) mutable -> bool {\n-    bool is_final_stmt = expr.is_final_stmt (s);\n-    bool has_final_expr = expr.has_expr () && expr.tail_expr_reachable ();\n-    bool stmt_is_final_expr = is_final_stmt && !has_final_expr;\n-\n     auto resolved = TypeCheckStmt::Resolve (s, inside_loop);\n     if (resolved == nullptr)\n       {\n \trust_error_at (s->get_locus_slow (), \"failure to resolve type\");\n \treturn false;\n       }\n \n-    if (stmt_is_final_expr)\n-      {\n-\tdelete block_tyty;\n-\tblock_tyty = resolved;\n-      }\n-    else if (s->is_unit_check_needed () && !resolved->is_unit ())\n+    if (s->is_unit_check_needed () && !resolved->is_unit ())\n       {\n \tauto unit = new TyTy::TupleType (s->get_mappings ().get_hirid ());\n \tresolved = unit->unify (resolved);\n@@ -153,14 +141,13 @@ TypeCheckExpr::visit (HIR::BlockExpr &expr)\n   });\n \n   if (expr.has_expr ())\n-    {\n-      delete block_tyty;\n-\n-      block_tyty\n-\t= TypeCheckExpr::Resolve (expr.get_final_expr ().get (), inside_loop);\n-    }\n-\n-  infered = block_tyty->clone ();\n+    infered\n+      = TypeCheckExpr::Resolve (expr.get_final_expr ().get (), inside_loop)\n+\t  ->clone ();\n+  else if (expr.is_tail_reachable ())\n+    infered = new TyTy::TupleType (expr.get_mappings ().get_hirid ());\n+  else\n+    infered = new TyTy::NeverType (expr.get_mappings ().get_hirid ());\n }\n \n // RUST_HIR_TYPE_CHECK_STRUCT_FIELD"}, {"sha": "4cd06bb0b18af15fbc8688bb9b4b33b089a63ca0", "filename": "gcc/rust/typecheck/rust-substitution-mapper.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -99,6 +99,7 @@ class SubstMapper : public TyTy::TyVisitor\n   void visit (TyTy::ReferenceType &) override { gcc_unreachable (); }\n   void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n+  void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n \n private:\n   SubstMapper (HirId ref, HIR::GenericArgs *generics, Location locus)\n@@ -157,6 +158,7 @@ class SubstMapperInternal : public TyTy::TyVisitor\n   void visit (TyTy::ReferenceType &) override { gcc_unreachable (); }\n   void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n+  void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n \n private:\n   SubstMapperInternal (HirId ref, TyTy::SubstitutionArgumentMappings &mappings)\n@@ -211,6 +213,7 @@ class SubstMapperFromExisting : public TyTy::TyVisitor\n   void visit (TyTy::ReferenceType &) override { gcc_unreachable (); }\n   void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n+  void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n \n private:\n   SubstMapperFromExisting (TyTy::BaseType *concrete, TyTy::BaseType *receiver)\n@@ -258,6 +261,7 @@ class GetUsedSubstArgs : public TyTy::TyVisitor\n   void visit (TyTy::ReferenceType &) override { gcc_unreachable (); }\n   void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n+  void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n \n private:\n   GetUsedSubstArgs () : args (TyTy::SubstitutionArgumentMappings::error ()) {}"}, {"sha": "2ab8abbdfcb101f6c082893b530ead67513d2ac9", "filename": "gcc/rust/typecheck/rust-tycheck-dump.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -107,7 +107,7 @@ class TypeResolverDump : public TypeCheckBase\n       return true;\n     });\n \n-    if (expr.has_expr () && expr.tail_expr_reachable ())\n+    if (expr.has_expr ())\n       {\n \tdump += indent ();\n \texpr.expr->accept_vis (*this);"}, {"sha": "2aba29803d94f06487e4d3356565e9c396c1db8e", "filename": "gcc/rust/typecheck/rust-tyty-call.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -53,6 +53,7 @@ class TypeCheckCallExpr : private TyVisitor\n   void visit (ReferenceType &type) override { gcc_unreachable (); }\n   void visit (ParamType &) override { gcc_unreachable (); }\n   void visit (StrType &) override { gcc_unreachable (); }\n+  void visit (NeverType &) override { gcc_unreachable (); }\n \n   // tuple-structs\n   void visit (ADTType &type) override;\n@@ -100,6 +101,7 @@ class TypeCheckMethodCallExpr : private TyVisitor\n   void visit (ReferenceType &type) override { gcc_unreachable (); }\n   void visit (ParamType &) override { gcc_unreachable (); }\n   void visit (StrType &) override { gcc_unreachable (); }\n+  void visit (NeverType &) override { gcc_unreachable (); }\n \n   // FIXME\n   void visit (FnPtr &type) override { gcc_unreachable (); }"}, {"sha": "1641264fe98ac7a0b876abf35347c6d64eec8d15", "filename": "gcc/rust/typecheck/rust-tyty-cmp.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -84,6 +84,8 @@ class BaseCmp : public TyVisitor\n \n   virtual void visit (StrType &) override { ok = false; }\n \n+  virtual void visit (NeverType &) override { ok = false; }\n+\n protected:\n   BaseCmp (BaseType *base)\n     : mappings (Analysis::Mappings::get ()),\n@@ -815,6 +817,21 @@ class StrCmp : public BaseCmp\n   StrType *base;\n };\n \n+class NeverCmp : public BaseCmp\n+{\n+  using Rust::TyTy::BaseCmp::visit;\n+\n+public:\n+  NeverCmp (NeverType *base) : BaseCmp (base), base (base) {}\n+\n+  void visit (NeverType &type) override { ok = true; }\n+\n+private:\n+  BaseType *get_base () override { return base; }\n+\n+  NeverType *base;\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}, {"sha": "6f7e66340acf1a470a67501680c741fa7a2f4d56", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -293,6 +293,14 @@ class BaseRules : public TyVisitor\n \t\t   type.as_string ().c_str ());\n   }\n \n+  virtual void visit (NeverType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n+  }\n+\n protected:\n   BaseRules (BaseType *base)\n     : mappings (Analysis::Mappings::get ()),\n@@ -1138,6 +1146,21 @@ class StrRules : public BaseRules\n   StrType *base;\n };\n \n+class NeverRules : public BaseRules\n+{\n+  using Rust::TyTy::BaseRules::visit;\n+\n+public:\n+  NeverRules (NeverType *base) : BaseRules (base), base (base) {}\n+\n+  virtual void visit (NeverType &type) override { resolved = type.clone (); }\n+\n+private:\n+  BaseType *get_base () override { return base; }\n+\n+  NeverType *base;\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}, {"sha": "0ed7eef35a652c89a09ac80d7b096c2c8b9189ea", "filename": "gcc/rust/typecheck/rust-tyty-visitor.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -44,6 +44,7 @@ class TyVisitor\n   virtual void visit (ReferenceType &type) = 0;\n   virtual void visit (ParamType &type) = 0;\n   virtual void visit (StrType &type) = 0;\n+  virtual void visit (NeverType &type) = 0;\n };\n \n } // namespace TyTy"}, {"sha": "86b1da08a5940a4036226e79b2087d4e669e6c07", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -1307,6 +1307,38 @@ StrType::is_equal (const BaseType &other) const\n   return get_kind () == other.get_kind ();\n }\n \n+void\n+NeverType::accept_vis (TyVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+std::string\n+NeverType::as_string () const\n+{\n+  return \"!\";\n+}\n+\n+BaseType *\n+NeverType::unify (BaseType *other)\n+{\n+  NeverRules r (this);\n+  return r.unify (other);\n+}\n+\n+bool\n+NeverType::can_eq (BaseType *other)\n+{\n+  NeverCmp r (this);\n+  return r.can_eq (other);\n+}\n+\n+BaseType *\n+NeverType::clone ()\n+{\n+  return new NeverType (get_ref (), get_ty_ref (), get_combined_refs ());\n+}\n+\n // rust-tyty-call.h\n \n void"}, {"sha": "2b9f304f6828ece99eceb32f9a36525dfc524e2b", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -45,6 +45,7 @@ enum TypeKind\n   FLOAT,\n   USIZE,\n   ISIZE,\n+  NEVER,\n   // there are more to add...\n   ERROR\n };\n@@ -1226,6 +1227,41 @@ class StrType : public BaseType\n   BaseType *clone () final override;\n };\n \n+// https://doc.rust-lang.org/std/primitive.never.html\n+//\n+// Since the `!` type is really complicated and it is even still unstable\n+// in rustc, only fairly limited support for this type is introduced here.\n+// Unification between `!` and ANY other type (including `<T?>`) is simply\n+// not allowed. If it is needed, it should be handled manually. For example,\n+// unifying `!` with other types is very necessary when resolving types of\n+// `if/else` expressions.\n+//\n+// See related discussion at https://github.com/Rust-GCC/gccrs/pull/364\n+class NeverType : public BaseType\n+{\n+public:\n+  NeverType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ref, TypeKind::NEVER, refs)\n+  {}\n+\n+  NeverType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ty_ref, TypeKind::NEVER, refs)\n+  {}\n+\n+  void accept_vis (TyVisitor &vis) override;\n+\n+  std::string as_string () const override;\n+\n+  BaseType *unify (BaseType *other) override;\n+  bool can_eq (BaseType *other) override;\n+\n+  BaseType *clone () final override;\n+\n+  std::string get_name () const override final { return as_string (); }\n+\n+  bool is_unit () const override { return true; }\n+};\n+\n class TypeKindFormat\n {\n public:\n@@ -1281,6 +1317,9 @@ class TypeKindFormat\n       case TypeKind::ISIZE:\n \treturn \"Isize\";\n \n+      case TypeKind::NEVER:\n+\treturn \"Never\";\n+\n       case TypeKind::ERROR:\n \treturn \"ERROR\";\n       }"}, {"sha": "7e164a949bbf21a0bcbc97efb945a599a24d665d", "filename": "gcc/testsuite/rust.test/compile/block_expr5.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fblock_expr5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fblock_expr5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fblock_expr5.rs?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -0,0 +1,40 @@\n+fn foo() -> i32 {\n+    0\n+}\n+\n+fn bar() -> i32 {\n+    foo();\n+    foo()\n+}\n+\n+fn baz() -> i32 {\n+    {\n+        bar();\n+        bar();\n+    }\n+    {\n+        bar();\n+        bar()\n+    };\n+    {\n+        bar();\n+        bar()\n+    }\n+}\n+\n+fn test(ok: i32) -> i32 {\n+    if ok >= 1 {\n+        foo()\n+    } else if ok <= -1 {\n+        bar()\n+    } else {\n+        baz()\n+    }\n+}\n+\n+fn main() {\n+    let a = foo();\n+    let b = bar();\n+    let c = baz();\n+    test(a + b + c);\n+}"}, {"sha": "df1789e7bbe9fba26e464e5f837bbd0e5942009e", "filename": "gcc/testsuite/rust.test/compile/func1.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Ffunc1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Ffunc1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Ffunc1.rs?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -0,0 +1,7 @@\n+fn not_void() -> i32 {\n+    8\n+}\n+\n+fn main() {\n+    not_void();\n+}"}, {"sha": "f7dd556d955b21ee4aab4fd2845662f88852e0f7", "filename": "gcc/testsuite/rust.test/compile/func2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Ffunc2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Ffunc2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Ffunc2.rs?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -0,0 +1,20 @@\n+fn foo() {\n+    8;\n+    8;\n+}\n+\n+fn bar() -> i32 {\n+    8;\n+    8\n+}\n+\n+fn baz() -> i32 {\n+    8;\n+    return 8;\n+}\n+\n+fn main() {\n+    let a = foo(); // { dg-warning \"unused name\" }\n+    let b = bar(); // { dg-warning \"unused name\" }\n+    let c = baz(); // { dg-warning \"unused name\" }\n+}"}, {"sha": "0f15029097dacbe4a57cddace28c8607b1345b3a", "filename": "gcc/testsuite/rust.test/compile/never_type1.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fnever_type1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fnever_type1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fnever_type1.rs?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -0,0 +1,22 @@\n+fn foo() -> i32 {\n+    let c;\n+    let d;\n+\n+    c = if false {\n+        return 1;\n+    } else {\n+        0.0\n+    };\n+\n+    d = if true {\n+        0.0\n+    } else {\n+        return 1;\n+    };\n+\n+    0\n+}\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "b6aa56cc2e67c1fbee3395f0b755ea7cc6212de4", "filename": "gcc/testsuite/rust.test/compile/stmt_with_block1.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fstmt_with_block1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fstmt_with_block1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fstmt_with_block1.rs?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -0,0 +1,13 @@\n+fn test(x: i32) -> i32 {\n+    if x > 1 { 1 } else { 2 };\n+    if x > 1 { 1; } else { 2; }\n+\n+    { 3; }\n+    { 3 };\n+\n+    { 3 }\n+}\n+\n+fn main() {\n+    let a = test(0); // { dg-warning \"unused name\" }\n+}"}, {"sha": "33053cf5fbcabf8e70a03481c368b79f694b1054", "filename": "gcc/testsuite/rust.test/xfail_compile/break1.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fbreak1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fbreak1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fbreak1.rs?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -1,7 +1,6 @@\n-// { dg-excess-errors \"Noisy error and debug\" }\n-fn main() { // { dg-error \"expected .... got .<tyty::error>.\" }\n+fn main() {\n     let a;\n     a = 1;\n-    break a; // { dg-error \"cannot `break` outside of a loop\"\n+    break a; // { dg-error \"cannot `break` outside of a loop\" }\n     // { dg-error \"failed to type resolve expression\" \"\" { target { *-*-* } } .-1 }\n }"}, {"sha": "6758a3898e308308d6c41306d8fa89952f8aed6a", "filename": "gcc/testsuite/rust.test/xfail_compile/func1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ffunc1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ffunc1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ffunc1.rs?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -1,4 +1,4 @@\n-fn test(x: i32) -> bool { // { dg-error \"expected .bool. got .<tyty::error>..\" }\n+fn test(x: i32) -> bool {\n     return x + 1; // { dg-error \"expected .bool. got .i32.\" }\n }\n "}, {"sha": "3b2d2b0d773a5080d67fb2bd5622e647964a704d", "filename": "gcc/testsuite/rust.test/xfail_compile/func4.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ffunc4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ffunc4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ffunc4.rs?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -0,0 +1,6 @@\n+fn func() -> i32 { // { dg-error \"expected .i32. got ....\" }\n+}\n+\n+fn main() {\n+    func();\n+}"}, {"sha": "05624f524e9416f857e7529c779d2e04a55e373a", "filename": "gcc/testsuite/rust.test/xfail_compile/func5.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ffunc5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ffunc5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ffunc5.rs?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -0,0 +1,7 @@\n+fn func() -> i32 {\n+    return; // { dg-error \"expected .i32. got ....\" }\n+}\n+\n+fn main() {\n+    func();\n+}"}, {"sha": "fb90748871f56a6792b7abf8417ab50a55c4d056", "filename": "gcc/testsuite/rust.test/xfail_compile/implicit_returns_err2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err2.rs?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -1,6 +1,5 @@\n-// { dg-error \"expected .* got .*\" \"\" { target { *-*-* } } 0 }\n-\n fn test(x: i32) -> i32 {\n+    // { dg-error \"expected .i32. got .bool.\" \"\" { target *-*-* } .-1 }\n     return 1;\n     // { dg-warning \"unreachable expression\" \"\" { target *-*-* } .+1 }\n     true"}, {"sha": "59c6a020d4c9cdda492ab8de573efd225d18e6e5", "filename": "gcc/testsuite/rust.test/xfail_compile/implicit_returns_err4.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fimplicit_returns_err4.rs?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -0,0 +1,10 @@\n+fn test(x: bool) -> bool {\n+    // { dg-error \"expected .bool. got ....\" \"\" { target *-*-*} .-1 }\n+    return x;\n+    // { dg-warning \"unreachable expression\" \"\" { target *-*-* } .+1 }\n+    ()\n+}\n+\n+fn main() {\n+    let a = test(true);\n+}"}, {"sha": "52b1283fadfe9624891abaa16d4c2ff1ca2dea6e", "filename": "gcc/testsuite/rust.test/xfail_compile/never_type_err1.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fnever_type_err1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fnever_type_err1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fnever_type_err1.rs?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -0,0 +1,14 @@\n+fn test() {\n+    let a;\n+\n+    // FIXME: Unimplemented features\n+    a = if true { // { dg-error \"expected .T.. got .!.\" }\n+        return;\n+    } else {\n+        return;\n+    };\n+}\n+\n+fn main() {\n+    test();\n+}"}, {"sha": "c94cb828071ff5817448bd85a8a498f0844bd8d4", "filename": "gcc/testsuite/rust.test/xfail_compile/never_type_err2.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fnever_type_err2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb9f47187f9b7ad55e32bcd273556823f383c6/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fnever_type_err2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fnever_type_err2.rs?ref=3aeb9f47187f9b7ad55e32bcd273556823f383c6", "patch": "@@ -0,0 +1,4 @@\n+// FIXME: Unimplemented features\n+fn foo() -> ! { // { dg-error \"unresolved type\" }\n+    let a: !; // { dg-error \"unresolved type\" }\n+}"}]}