{"sha": "6a1746af423210c8419b7e90d0954ed28f9e8535", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmExNzQ2YWY0MjMyMTBjODQxOWI3ZTkwZDA5NTRlZDI4ZjllODUzNQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-08-12T07:43:50Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-08-12T07:43:50Z"}, "message": "(operand_equal_p): Make it clear that this function tests for indistinguishable values, not for equality as computed by `=='...\n\n(operand_equal_p): Make it clear that this function\ntests for indistinguishable values, not for equality as computed by\n`=='; the distinction is important for IEEE NaNs and -0.0.\n\nFrom-SVN: r1807", "tree": {"sha": "d730e62c5d043ac5b035dc4052c43e975436ee31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d730e62c5d043ac5b035dc4052c43e975436ee31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a1746af423210c8419b7e90d0954ed28f9e8535", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a1746af423210c8419b7e90d0954ed28f9e8535", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a1746af423210c8419b7e90d0954ed28f9e8535", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a1746af423210c8419b7e90d0954ed28f9e8535/comments", "author": null, "committer": null, "parents": [{"sha": "e92b33f50827f1f18db368670f855afeede8ef47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e92b33f50827f1f18db368670f855afeede8ef47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e92b33f50827f1f18db368670f855afeede8ef47"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "a7107500f23eb85f5c85d34a67184409a70844d8", "filename": "gcc/fold-const.c", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a1746af423210c8419b7e90d0954ed28f9e8535/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a1746af423210c8419b7e90d0954ed28f9e8535/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=6a1746af423210c8419b7e90d0954ed28f9e8535", "patch": "@@ -1567,8 +1567,13 @@ swap_tree_comparison (code)\n     }\n }\n \f\n-/* Return nonzero if two operands are necessarily equal. \n-   If ONLY_CONST is non-zero, only return non-zero for constants.  */\n+/* Return nonzero if two operands are necessarily equal.\n+   If ONLY_CONST is non-zero, only return non-zero for constants.\n+   This function tests whether the operands are indistinguishable;\n+   it does not test whether they are equal using C's == operation.\n+   The distinction is important for IEEE floating point, because\n+   (1) -0.0 and 0.0 are distinguishable, but -0.0==0.0, and\n+   (2) two NaNs may be indistinguishable, but NaN!=NaN.  */\n \n int\n operand_equal_p (arg0, arg1, only_const)\n@@ -1604,18 +1609,11 @@ operand_equal_p (arg0, arg1, only_const)\n       && TREE_INT_CST_HIGH (arg0) == TREE_INT_CST_HIGH (arg1))\n     return 1;\n \n-  /* Detect when real constants are equal.\n-     But reject weird values because we can't be sure what to do with them.  */\n+  /* Detect when real constants are equal.  */\n   if (TREE_CODE (arg0) == TREE_CODE (arg1)\n-      && TREE_CODE (arg0) == REAL_CST\n-      && !bcmp (&TREE_REAL_CST (arg0), &TREE_REAL_CST (arg1),\n-\t\tsizeof (REAL_VALUE_TYPE))\n-      /* Some people say these are not necessary.\n-\t But they do little harm, and taking them out would be risky.\n-\t So leave them and let's not spend any more time on them--rms.  */\n-      && !REAL_VALUE_ISINF (TREE_REAL_CST (arg0))\n-      && !REAL_VALUE_ISNAN (TREE_REAL_CST (arg0)))\n-    return 1;\n+      && TREE_CODE (arg0) == REAL_CST)\n+    return !bcmp (&TREE_REAL_CST (arg0), &TREE_REAL_CST (arg1),\n+\t\t  sizeof (REAL_VALUE_TYPE));\n \n   if (only_const)\n     return 0;\n@@ -3316,7 +3314,7 @@ fold (expr)\n \t  /* Fold &x - &x.  This can happen from &x.foo - &x. \n \t     This is unsafe for certain floats even in non-IEEE formats.\n \t     In IEEE, it is unsafe because it does wrong for NaNs.\n-\t     Also note that operand_equal_p is always false is an operand\n+\t     Also note that operand_equal_p is always false if an operand\n \t     is volatile.  */\n \n \t  if (operand_equal_p (arg0, arg1,"}]}