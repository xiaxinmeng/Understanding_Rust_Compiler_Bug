{"sha": "55303957de85fd4d0d529e7eeb1b67e29e4f98c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUzMDM5NTdkZTg1ZmQ0ZDBkNTI5ZTdlZWIxYjY3ZTI5ZTRmOThjNQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-07-25T13:50:58Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-07-30T10:51:34Z"}, "message": "d: Factor d_nested_class and d_nested_struct into single function.\n\nBoth do the exact same operation, just on different AST nodes.\n\ngcc/d/ChangeLog:\n\n\t* d-codegen.cc (d_nested_class): Rename to ...\n\t(get_outer_function): ... this.  Handle all aggregate declarations.\n\t(d_nested_struct): Remove.\n\t(find_this_tree): Use get_outer_function.\n\t(get_framedecl): Likewise.", "tree": {"sha": "9499826440551adb9ef2ac61ce7d82ad5d58e713", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9499826440551adb9ef2ac61ce7d82ad5d58e713"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55303957de85fd4d0d529e7eeb1b67e29e4f98c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55303957de85fd4d0d529e7eeb1b67e29e4f98c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55303957de85fd4d0d529e7eeb1b67e29e4f98c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55303957de85fd4d0d529e7eeb1b67e29e4f98c5/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2730aa7809b47dce47ca0b5e51a6af2164335cf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2730aa7809b47dce47ca0b5e51a6af2164335cf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2730aa7809b47dce47ca0b5e51a6af2164335cf1"}], "stats": {"total": 54, "additions": 14, "deletions": 40}, "files": [{"sha": "fe2ad98e60ae8ecbe8c9fcfef0be9506700ff0b8", "filename": "gcc/d/d-codegen.cc", "status": "modified", "additions": 14, "deletions": 40, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55303957de85fd4d0d529e7eeb1b67e29e4f98c5/gcc%2Fd%2Fd-codegen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55303957de85fd4d0d529e7eeb1b67e29e4f98c5/gcc%2Fd%2Fd-codegen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-codegen.cc?ref=55303957de85fd4d0d529e7eeb1b67e29e4f98c5", "patch": "@@ -2354,41 +2354,24 @@ get_frame_for_symbol (Dsymbol *sym)\n   return null_pointer_node;\n }\n \n-/* Return the parent function of a nested class CD.  */\n+/* Return the parent function of a nested class or struct AD.  */\n \n static FuncDeclaration *\n-d_nested_class (ClassDeclaration *cd)\n+get_outer_function (AggregateDeclaration *ad)\n {\n   FuncDeclaration *fd = NULL;\n-  while (cd && cd->isNested ())\n+  while (ad && ad->isNested ())\n     {\n-      Dsymbol *dsym = cd->toParent2 ();\n+      Dsymbol *dsym = ad->toParent2 ();\n       if ((fd = dsym->isFuncDeclaration ()))\n \treturn fd;\n       else\n-\tcd = dsym->isClassDeclaration ();\n+\tad = dsym->isAggregateDeclaration ();\n     }\n-  return NULL;\n-}\n-\n-/* Return the parent function of a nested struct SD.  */\n \n-static FuncDeclaration *\n-d_nested_struct (StructDeclaration *sd)\n-{\n-  FuncDeclaration *fd = NULL;\n-  while (sd && sd->isNested ())\n-    {\n-      Dsymbol *dsym = sd->toParent2 ();\n-      if ((fd = dsym->isFuncDeclaration ()))\n-\treturn fd;\n-      else\n-\tsd = dsym->isStructDeclaration ();\n-    }\n   return NULL;\n }\n \n-\n /* Starting from the current function FD, try to find a suitable value of\n    `this' in nested function instances.  A suitable `this' value is an\n    instance of OCD or a class that has OCD as a base.  */\n@@ -2411,18 +2394,17 @@ find_this_tree (ClassDeclaration *ocd)\n \t    return convert_expr (get_decl_tree (fd->vthis),\n \t\t\t\t cd->type, ocd->type);\n \n-\t  fd = d_nested_class (cd);\n+\t  fd = get_outer_function (cd);\n+\t  continue;\n \t}\n-      else\n-\t{\n-\t  if (fd->isNested ())\n-\t    {\n-\t      fd = fd->toParent2 ()->isFuncDeclaration ();\n-\t      continue;\n-\t    }\n \n-\t  fd = NULL;\n+      if (fd->isNested ())\n+\t{\n+\t  fd = fd->toParent2 ()->isFuncDeclaration ();\n+\t  continue;\n \t}\n+\n+      fd = NULL;\n     }\n \n   return NULL_TREE;\n@@ -2760,10 +2742,6 @@ get_framedecl (FuncDeclaration *inner, FuncDeclaration *outer)\n \n   while (fd && fd != outer)\n     {\n-      AggregateDeclaration *ad;\n-      ClassDeclaration *cd;\n-      StructDeclaration *sd;\n-\n       /* Parent frame link is the first field.  */\n       if (FRAMEINFO_CREATES_FRAME (get_frameinfo (fd)))\n \tresult = indirect_ref (ptr_type_node, result);\n@@ -2773,12 +2751,8 @@ get_framedecl (FuncDeclaration *inner, FuncDeclaration *outer)\n       /* The frame/closure record always points to the outer function's\n \t frame, even if there are intervening nested classes or structs.\n \t So, we can just skip over these.  */\n-      else if ((ad = fd->isThis ()) && (cd = ad->isClassDeclaration ()))\n-\tfd = d_nested_class (cd);\n-      else if ((ad = fd->isThis ()) && (sd = ad->isStructDeclaration ()))\n-\tfd = d_nested_struct (sd);\n       else\n-\tbreak;\n+\tfd = get_outer_function (fd->isThis ());\n     }\n \n   if (fd != outer)"}]}