{"sha": "ce73f2a5bb1ec9d9ff941bc3d4bc8f2c2e4f5c92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U3M2YyYTViYjFlYzlkOWZmOTQxYmMzZDRiYzhmMmMyZTRmNWM5Mg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-14T20:38:33Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-14T20:38:33Z"}, "message": "(parse_number): Diagnose integer constants that are too large.\n\nDiagnose duplicate `l' and `u' suffixes.  Diagnose ` 0x ' and ` 0a '.\nWarn about integer constants that are so large that they are unsigned.\n\nFrom-SVN: r2121", "tree": {"sha": "d38935535237884a1672d0a8d46282d119a85932", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d38935535237884a1672d0a8d46282d119a85932"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce73f2a5bb1ec9d9ff941bc3d4bc8f2c2e4f5c92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce73f2a5bb1ec9d9ff941bc3d4bc8f2c2e4f5c92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce73f2a5bb1ec9d9ff941bc3d4bc8f2c2e4f5c92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce73f2a5bb1ec9d9ff941bc3d4bc8f2c2e4f5c92/comments", "author": null, "committer": null, "parents": [{"sha": "c832a30eb3e84359ee7c62a64e6030bcaf9d2ba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c832a30eb3e84359ee7c62a64e6030bcaf9d2ba4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c832a30eb3e84359ee7c62a64e6030bcaf9d2ba4"}], "stats": {"total": 47, "additions": 34, "deletions": 13}, "files": [{"sha": "4cb3674e42c318e8ee37acbb7ef769fae472b0cd", "filename": "gcc/cexp.y", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce73f2a5bb1ec9d9ff941bc3d4bc8f2c2e4f5c92/gcc%2Fcexp.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce73f2a5bb1ec9d9ff941bc3d4bc8f2c2e4f5c92/gcc%2Fcexp.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcexp.y?ref=ce73f2a5bb1ec9d9ff941bc3d4bc8f2c2e4f5c92", "patch": "@@ -342,10 +342,12 @@ parse_number (olen)\n      int olen;\n {\n   register char *p = lexptr;\n-  register long n = 0;\n   register int c;\n+  register unsigned long n = 0, nd, ULONG_MAX_over_base;\n   register int base = 10;\n   register int len = olen;\n+  register int overflow = 0;\n+  int spec_long = 0;\n \n   for (c = 0; c < len; c++)\n     if (p[c] == '.') {\n@@ -364,31 +366,43 @@ parse_number (olen)\n   else if (*p == '0')\n     base = 8;\n \n-  while (len > 0) {\n+  ULONG_MAX_over_base = (unsigned long) -1 / base;\n+\n+  for (; len > 0; len--) {\n     c = *p++;\n-    len--;\n     if (c >= 'A' && c <= 'Z') c += 'a' - 'A';\n \n     if (c >= '0' && c <= '9') {\n-      n *= base;\n-      n += c - '0';\n+      overflow |= ULONG_MAX_over_base < n;\n+      nd = n * base + c - '0';\n+      overflow |= nd < n;\n+      n = nd;\n     } else if (base == 16 && c >= 'a' && c <= 'f') {\n-      n *= base;\n-      n += c - 'a' + 10;\n+      overflow |= ULONG_MAX_over_base < n;\n+      nd = n * 16 + c - 'a' + 10;\n+      overflow |= nd < n;\n+      n = nd;\n     } else {\n       /* `l' means long, and `u' means unsigned.  */\n       while (1) {\n \tif (c == 'l' || c == 'L')\n-\t  ;\n+\t  {\n+\t    if (spec_long)\n+\t      yyerror (\"two `l's in integer constant\");\n+\t    spec_long = 1;\n+\t  }\n \telse if (c == 'u' || c == 'U')\n-\t  yylval.integer.unsignedp = 1;\n+\t  {\n+\t    if (yylval.integer.unsignedp)\n+\t      yyerror (\"two `u's in integer constant\");\n+\t    yylval.integer.unsignedp = 1;\n+\t  }\n \telse\n \t  break;\n \n-\tif (len == 0)\n+\tif (--len == 0)\n \t  break;\n \tc = *p++;\n-\tlen--;\n       }\n       /* Don't look for any more digits after the suffixes.  */\n       break;\n@@ -400,9 +414,16 @@ parse_number (olen)\n     return ERROR;\n   }\n \n+  if (overflow)\n+    warning (\"integer constant out of range\");\n+\n   /* If too big to be signed, consider it unsigned.  */\n-  if (n < 0)\n-    yylval.integer.unsignedp = 1;\n+  if ((long) n < 0 && ! yylval.integer.unsignedp)\n+    {\n+      if (base == 10)\n+\twarning (\"integer constant is so large that it is unsigned\");\n+      yylval.integer.unsignedp = 1;\n+    }\n \n   lexptr = p;\n   yylval.integer.value = n;"}]}