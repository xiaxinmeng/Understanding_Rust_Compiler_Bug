{"sha": "88057dc868335e8f59eb0798d605c29de154de6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgwNTdkYzg2ODMzNWU4ZjU5ZWIwNzk4ZDYwNWMyOWRlMTU0ZGU2ZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-06-06T15:04:51Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-06-06T15:04:51Z"}, "message": "re PR rtl-optimization/36438 (gcc ICE compiling code with mmx builtin)\n\n\tPR rtl-optimization/36438\n\t* cse.c (fold_rtx) [ASHIFT, LSHIFTRT, ASHIFTRT]: Break out early\n\tfor vector shifts with constant scalar shift operands.\n\nFrom-SVN: r136486", "tree": {"sha": "213585bbf8dfd4c6d9d250a5e3d911115c057f6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/213585bbf8dfd4c6d9d250a5e3d911115c057f6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88057dc868335e8f59eb0798d605c29de154de6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88057dc868335e8f59eb0798d605c29de154de6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88057dc868335e8f59eb0798d605c29de154de6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88057dc868335e8f59eb0798d605c29de154de6d/comments", "author": null, "committer": null, "parents": [{"sha": "8b34d6c2bfcf7e70d3ab0909cb73ba347f47160e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b34d6c2bfcf7e70d3ab0909cb73ba347f47160e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b34d6c2bfcf7e70d3ab0909cb73ba347f47160e"}], "stats": {"total": 58, "additions": 41, "deletions": 17}, "files": [{"sha": "076cfe347c29e2c9f0a24b18c2c2eb366b7669a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88057dc868335e8f59eb0798d605c29de154de6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88057dc868335e8f59eb0798d605c29de154de6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88057dc868335e8f59eb0798d605c29de154de6d", "patch": "@@ -1,3 +1,9 @@\n+2008-06-06 Uros Bizjak <ubizjak@gmail.com>\n+\n+\tPR rtl-optimization/36438\n+\t* cse.c (fold_rtx) [ASHIFT, LSHIFTRT, ASHIFTRT]: Break out early\n+\tfor vector shifts with constant scalar shift operands.\n+\n 2008-06-06  Sandip Matte  <sandip@rmicorp.com>\n \n \t* doc/invoke.texi: Document -march=xlr.\n@@ -25,8 +31,7 @@\n \n 2008-06-06  Jakub Jelinek  <jakub@redhat.com>\n \n-\t* c-cppbuiltin.c (c_cpp_builtins): Change _OPENMP value to\n-\t200805.\n+\t* c-cppbuiltin.c (c_cpp_builtins): Change _OPENMP value to 200805.\n \t* langhooks.h (struct lang_hooks_for_decls): Add omp_finish_clause.\n \tAdd omp_private_outer_ref hook, add another argument to\n \tomp_clause_default_ctor hook.\n@@ -155,8 +160,7 @@\n \t(gimplify_omp_parallel, gimplify_omp_for, gimplify_omp_workshare):\n \tAdjust callers.\n \t(gimplify_adjust_omp_clauses_1): Set OMP_CLAUSE_PRIVATE_OUTER_REF if\n-\tGOVD_PRIVATE_OUTER_REF is set.  Call omp_finish_clause\n-\tlanghook.\n+\tGOVD_PRIVATE_OUTER_REF is set.  Call omp_finish_clause langhook.\n \t(new_omp_context): Set default_kind to\n \tOMP_CLAUSE_DEFAULT_UNSPECIFIED for OMP_TASK regions.\n \t(omp_region_type): New enum.\n@@ -256,8 +260,7 @@\n \tomp_for_data changes.\n \t(lower_omp_for): Add rec input clauses before OMP_FOR_PRE_BODY,\n \tnot after it.  Handle collapsed OMP_FOR loops, adjust for\n-\tOMP_FOR_{INIT,COND,INCR} changes, adjust extract_omp_for_data\n-\tcaller.\n+\tOMP_FOR_{INIT,COND,INCR} changes, adjust extract_omp_for_data caller.\n \t(get_ws_args_for): Adjust extract_omp_for_data caller.\n \t(scan_omp_for): Handle collapsed OMP_FOR\n \tloops, adjust for OMP_FOR_{INIT,COND,INCR} changes.\n@@ -490,7 +493,7 @@\n 2008-06-04  Andy Hutchinson  <hutchinsonandy@aim.com>\n \n \tPR target/27386\n-\t* config/avr/avr.h: (PUSH_ROUNDING): Remove.\n+\t* config/avr/avr.h (PUSH_ROUNDING): Remove.\n \n 2008-06-04  Andy Hutchinson  <hutchinsonandy@aim.com>\n \n@@ -530,8 +533,7 @@\n \n 2008-06-04  Richard Guenther  <rguenther@suse.de>\n \n-\t* tree-flow-inline.h (is_global_var): Do not check TREE_STATIC\n-\ton MTAGs.\n+\t* tree-flow-inline.h (is_global_var): Do not check TREE_STATIC on MTAGs.\n \t(is_call_clobbered): Always check var_ann->call_clobbered.\n \t(mark_call_clobbered): Always set var_ann->call_clobbered.\n \t(clear_call_clobbered): Always clear var_ann->call_clobbered.\n@@ -543,7 +545,7 @@\n \t(may_be_aliased): Do not check TREE_PUBLIC on MTAGs.\n \n 2008-06-04  Joseph Myers  <joseph@codesourcery.com>\n-            Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\t    Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* config/m68k/m68k.opt (mxgot): New option.\n \t* config/m68k/m68k.c (legitimize_pic_address): Handle -mxgot.\n@@ -560,7 +562,7 @@\n \n 2008-06-03  H.J. Lu  <hongjiu.lu@intel.com>\n \n-\t*  config/i386/i386.c (ix86_gen_leave): New.\n+\t* config/i386/i386.c (ix86_gen_leave): New.\n \t(ix86_gen_pop1): Likewise.\n \t(ix86_gen_add3): Likewise.\n \t(ix86_gen_sub3): Likewise.\n@@ -597,8 +599,7 @@\n 2008-06-03  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* config/i386/i386-protos.h (ix86_reg_parm_stack_space): New.\n-\t* config/i386/i386.h (ix86_reg_parm_stack_space): Removed\n-\tprototype.\n+\t* config/i386/i386.h (ix86_reg_parm_stack_space): Removed prototype.\n \t* config/i386/i386.c (ix86_reg_parm_stack_space): Changed\n \treturn type to int.\n \t(ix86_call_abi_override): Remove check for call_used_regs.\n@@ -612,8 +613,7 @@\n \n \t* doc/tm.texi (OVERRIDE_ABI_FORMAT): New.\n \t* doc/extend.texi (ms_abi,sysv_abi): New attribute description.\n-\t* function.c (allocate_struct_function): Use of\n-\tOVERRIDE_ABI_FORMAT.\n+\t* function.c (allocate_struct_function): Use of OVERRIDE_ABI_FORMAT.\n \t* config/i386/cygming.h (TARGET_64BIT_MS_ABI): Make use\n \tof cfun and DEFAULT_ABI to deceide abi mode.\n \t(DEFAULT_ABI): New.\n@@ -675,8 +675,8 @@\n \t(ix86_reg_parm_stack_space): New prototype.\n \t(CUMULATIVE_ARGS): Add call_abi member.\n \t(machine_function): Add call_abi member.\n-\t* config/i386/mingw32.h (EXTRA_OS_CPP_BUILTINS): Replace TARGET_64BIT_MS_ABI\n-\tby DEFAULT_ABI compare to MS_ABI.\n+\t* config/i386/mingw32.h (EXTRA_OS_CPP_BUILTINS): Replace\n+\tTARGET_64BIT_MS_ABI by DEFAULT_ABI compare to MS_ABI.\n \n 2008-06-02  Andy Hutchinson  <hutchinsonandy@aim.com> \n "}, {"sha": "73eb1c6805b554b2be31dbf876d49555b6996f70", "filename": "gcc/cse.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88057dc868335e8f59eb0798d605c29de154de6d/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88057dc868335e8f59eb0798d605c29de154de6d/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=88057dc868335e8f59eb0798d605c29de154de6d", "patch": "@@ -3489,6 +3489,11 @@ fold_rtx (rtx x, rtx insn)\n \t\t\t  && exact_log2 (- INTVAL (const_arg1)) >= 0)))\n \t\tbreak;\n \n+\t      /* ??? Vector mode shifts by scalar\n+\t\t shift operand are not supported yet.  */\n+\t      if (is_shift && VECTOR_MODE_P (mode))\n+                break;\n+\n \t      if (is_shift\n \t\t  && (INTVAL (inner_const) >= GET_MODE_BITSIZE (mode)\n \t\t      || INTVAL (inner_const) < 0))"}, {"sha": "38376b8c90328bc96ca0ce5854e91907b55e7130", "filename": "gcc/testsuite/gcc.target/i386/pr36438.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88057dc868335e8f59eb0798d605c29de154de6d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36438.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88057dc868335e8f59eb0798d605c29de154de6d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36438.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36438.c?ref=88057dc868335e8f59eb0798d605c29de154de6d", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mmmx\" } */\n+\n+#include <mmintrin.h>\n+\n+extern __m64 SetS16 (unsigned short, unsigned short,\n+\t\t     unsigned short, unsigned short);\n+\n+void foo(__m64* dest)\n+{\n+  __m64 mask = SetS16 (0x00FF, 0xFF00, 0x0000, 0x00FF);\n+\n+  mask = _mm_slli_si64(mask, 8);\n+  mask = _mm_slli_si64(mask, 8);\n+\n+  *dest = mask;\n+\n+  _mm_empty ();\n+}"}]}