{"sha": "c17fc6f62a85eec85e923c9a808b97d93b84b1ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE3ZmM2ZjYyYTg1ZWVjODVlOTIzYzlhODA4Yjk3ZDkzYjg0YjFjZQ==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2007-08-16T12:19:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-16T12:19:02Z"}, "message": "g-dyntab.adb, [...]: (Set_Item): Suppress Range_Check on Allocated_Table.\n\n2007-08-16  Thomas Quinot  <quinot@adacore.com>\n\n\t* g-dyntab.adb, g-table.adb, table.adb: (Set_Item): Suppress\n\tRange_Check on Allocated_Table.\n\nFrom-SVN: r127541", "tree": {"sha": "da148d343ee2c3ee9cc41ed3858d1a899e922588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da148d343ee2c3ee9cc41ed3858d1a899e922588"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c17fc6f62a85eec85e923c9a808b97d93b84b1ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c17fc6f62a85eec85e923c9a808b97d93b84b1ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c17fc6f62a85eec85e923c9a808b97d93b84b1ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c17fc6f62a85eec85e923c9a808b97d93b84b1ce/comments", "author": null, "committer": null, "parents": [{"sha": "d48365bc6c150d94584adc7ef17438f8cb195732", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48365bc6c150d94584adc7ef17438f8cb195732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d48365bc6c150d94584adc7ef17438f8cb195732"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "32604bdbca6db8335dbf94e92fd83c69c46c1d90", "filename": "gcc/ada/g-dyntab.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c17fc6f62a85eec85e923c9a808b97d93b84b1ce/gcc%2Fada%2Fg-dyntab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c17fc6f62a85eec85e923c9a808b97d93b84b1ce/gcc%2Fada%2Fg-dyntab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-dyntab.adb?ref=c17fc6f62a85eec85e923c9a808b97d93b84b1ce", "patch": "@@ -249,10 +249,20 @@ package body GNAT.Dynamic_Tables is\n \n       Allocated_Table : Allocated_Table_T;\n       pragma Import (Ada, Allocated_Table);\n+      pragma Suppress (Range_Check, On => Allocated_Table);\n       for Allocated_Table'Address use Allocated_Table_Address;\n       --  Allocated_Table represents the currently allocated array, plus one\n       --  element (the supplementary element is used to have a convenient way\n-      --  to the address just past the end of the current allocation).\n+      --  to the address just past the end of the current allocation). Range\n+      --  checks are suppressed because this unit uses direct calls to\n+      --  System.Memory for allocation, and this can yield misaligned storage\n+      --  (and we cannot rely on the bootstrap compiler supporting specifically\n+      --  disabling alignment cheks, so we need to suppress all range checks).\n+      --  It is safe to suppress this check here because we know that a\n+      --  (possibly misaligned) object of that type does actually exist at that\n+      --  address.\n+      --  ??? We should really improve the allocation circuitry here to\n+      --  guarantee proper alignment.\n \n       Need_Realloc : constant Boolean := Integer (Index) > T.P.Max;\n       --  True if this operation requires storage reallocation (which may"}, {"sha": "32d18a08b74bd1356532af59814b95406fb15111", "filename": "gcc/ada/g-table.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c17fc6f62a85eec85e923c9a808b97d93b84b1ce/gcc%2Fada%2Fg-table.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c17fc6f62a85eec85e923c9a808b97d93b84b1ce/gcc%2Fada%2Fg-table.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-table.adb?ref=c17fc6f62a85eec85e923c9a808b97d93b84b1ce", "patch": "@@ -248,11 +248,20 @@ package body GNAT.Table is\n \n       Allocated_Table : Allocated_Table_T;\n       pragma Import (Ada, Allocated_Table);\n+      pragma Suppress (Range_Check, On => Allocated_Table);\n       for Allocated_Table'Address use Allocated_Table_Address;\n       --  Allocated_Table represents the currently allocated array, plus\n       --  one element (the supplementary element is used to have a\n       --  convenient way of computing the address just past the end of the\n-      --  current allocation).\n+      --  current allocation). Range checks are suppressed because this unit\n+      --  uses direct calls to System.Memory for allocation, and this can\n+      --  yield misaligned storage (and we cannot rely on the bootstrap\n+      --  compiler supporting specifically disabling alignment cheks, so we\n+      --  need to suppress all range checks). It is safe to suppress this check\n+      --  here because we know that a (possibly misaligned) object of that type\n+      --  does actually exist at that address.\n+      --  ??? We should really improve the allocation circuitry here to\n+      --  guarantee proper alignment.\n \n       Need_Realloc : constant Boolean := Integer (Index) > Max;\n       --  True if this operation requires storage reallocation (which may"}, {"sha": "db64c4cf9564ce883f8026ed1243d5a727986e8b", "filename": "gcc/ada/table.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c17fc6f62a85eec85e923c9a808b97d93b84b1ce/gcc%2Fada%2Ftable.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c17fc6f62a85eec85e923c9a808b97d93b84b1ce/gcc%2Fada%2Ftable.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftable.adb?ref=c17fc6f62a85eec85e923c9a808b97d93b84b1ce", "patch": "@@ -287,11 +287,20 @@ package body Table is\n \n          Allocated_Table : Allocated_Table_T;\n          pragma Import (Ada, Allocated_Table);\n+         pragma Suppress (Range_Check, On => Allocated_Table);\n          for Allocated_Table'Address use Allocated_Table_Address;\n          --  Allocated_Table represents the currently allocated array, plus one\n          --  element (the supplementary element is used to have a convenient\n          --  way of computing the address just past the end of the current\n-         --  allocation).\n+         --  allocation). Range checks are suppressed because this unit\n+         --  uses direct calls to System.Memory for allocation, and this can\n+         --  yield misaligned storage (and we cannot rely on the bootstrap\n+         --  compiler supporting specifically disabling alignment cheks, so we\n+         --  need to suppress all range checks). It is safe to suppress this\n+         --  check here because we know that a (possibly misaligned) object\n+         --  of that type does actually exist at that address.\n+         --  ??? We should really improve the allocation circuitry here to\n+         --  guarantee proper alignment.\n \n          Need_Realloc : constant Boolean := Int (Index) > Max;\n          --  True if this operation requires storage reallocation (which may"}]}