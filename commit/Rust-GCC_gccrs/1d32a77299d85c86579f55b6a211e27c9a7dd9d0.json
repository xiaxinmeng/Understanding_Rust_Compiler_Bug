{"sha": "1d32a77299d85c86579f55b6a211e27c9a7dd9d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQzMmE3NzI5OWQ4NWM4NjU3OWY1NWI2YTIxMWUyN2M5YTdkZDlkMA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain.sandoe@sandoe-acoustics.co.uk", "date": "2009-12-22T22:11:27Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2009-12-22T22:11:27Z"}, "message": "re PR target/41605 (Static linking of libgcc/libgfortran/libstdc++ can cause inconsistent symbol resolution.)\n\n2009-12-22  Iain Sandoe  <iain.sandoe@sandoe-acoustics.co.uk>\n\ngcc/\n\tPR target/41605\n\t* lib/g++.exp: Provide -B options to allow for link spec %s\n\tsubstitutions for static libraries.\n\nlibstdc++-v3/\n\tPR target/41605\n\t* testsuite/libstdc++-abi/abi.exp: Provide -B options to allow for\n\tlink spec %s substitutions for static libraries.\n\t* testsuite/lib/libstdc++.exp: Ditto\n\nlibgomp/\n\tPR target/41605\n\t* testsuite/lib/libgomp.exp: Provide -B options to allow for\n\tlink spec %s substitutions for static libraries.\n\nFrom-SVN: r155408", "tree": {"sha": "276226950720312d163d3a137b5a15f95c8c7bd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/276226950720312d163d3a137b5a15f95c8c7bd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d32a77299d85c86579f55b6a211e27c9a7dd9d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d32a77299d85c86579f55b6a211e27c9a7dd9d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d32a77299d85c86579f55b6a211e27c9a7dd9d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d32a77299d85c86579f55b6a211e27c9a7dd9d0/comments", "author": null, "committer": null, "parents": [{"sha": "4e7caa34a2092e248a538e108689c8f4cfb03159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7caa34a2092e248a538e108689c8f4cfb03159", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e7caa34a2092e248a538e108689c8f4cfb03159"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "9cf74ee59c222062da7303066ad6a709cb05adf2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d32a77299d85c86579f55b6a211e27c9a7dd9d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d32a77299d85c86579f55b6a211e27c9a7dd9d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d32a77299d85c86579f55b6a211e27c9a7dd9d0", "patch": "@@ -1,3 +1,9 @@\n+2009-12-22  Iain Sandoe  <iain.sandoe@sandoe-acoustics.co.uk>\n+\n+\tPR target/41605\n+\t* lib/g++.exp: Provide -B options to allow for link spec %s\n+\tsubstitutions for static libraries.\n+\n 2009-12-22  Brian Hackett  <bhackett1024@gmail.com>\n \n \t* g++.dg/plugin/attribute_plugin.c: Rename pre-genericize event."}, {"sha": "9de817b47f405e99e53bb2551efadd8c61b0a1f4", "filename": "gcc/testsuite/lib/g++.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d32a77299d85c86579f55b6a211e27c9a7dd9d0/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d32a77299d85c86579f55b6a211e27c9a7dd9d0/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp?ref=1d32a77299d85c86579f55b6a211e27c9a7dd9d0", "patch": "@@ -125,6 +125,9 @@ proc g++_link_flags { paths } {\n       }\n       if [file exists \"${gccpath}/libstdc++-v3/src/.libs/libstdc++.a\"] {\n           append flags \" -L${gccpath}/libstdc++-v3/src/.libs \"\n+          # Some targets use libstdc++.a%s in their specs, so they need a\n+          # -B option for uninstalled testing.\n+          append flags \" -B${gccpath}/libstdc++-v3/src/.libs \"\n           append ld_library_path \":${gccpath}/libstdc++-v3/src/.libs\"\n       }\n       # Look for libstdc++.${shlib_ext}."}, {"sha": "6644d9d2528cc86d0a0529e937033ced5d5456e4", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d32a77299d85c86579f55b6a211e27c9a7dd9d0/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d32a77299d85c86579f55b6a211e27c9a7dd9d0/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=1d32a77299d85c86579f55b6a211e27c9a7dd9d0", "patch": "@@ -1,3 +1,9 @@\n+2009-12-22  Iain Sandoe  <iain.sandoe@sandoe-acoustics.co.uk>\n+\n+\tPR target/41605\n+\t* testsuite/lib/libgomp.exp: Provide -B options to allow for\n+\tlink spec %s substitutions for static libraries.\n+\n 2009-12-18  Jack Howarth <howarth@bromo.med.uc.edu>\n \n \tPR testsuite/42135"}, {"sha": "0b0b608bf9e53c0fb6a05bc936f5a0a217bb4633", "filename": "libgomp/testsuite/lib/libgomp.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d32a77299d85c86579f55b6a211e27c9a7dd9d0/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d32a77299d85c86579f55b6a211e27c9a7dd9d0/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp?ref=1d32a77299d85c86579f55b6a211e27c9a7dd9d0", "patch": "@@ -130,6 +130,9 @@ proc libgomp_init { args } {\n     set ALWAYS_CFLAGS \"\"\n     if { $blddir != \"\" } {\n         lappend ALWAYS_CFLAGS \"additional_flags=-B${blddir}/\"\n+        # targets that use libgomp.a%s in their specs need a -B option\n+        # for uninstalled testing.\n+        lappend ALWAYS_CFLAGS \"additional_flags=-B${blddir}/.libs\"\n         lappend ALWAYS_CFLAGS \"additional_flags=-I${blddir}\"\n         lappend ALWAYS_CFLAGS \"ldflags=-L${blddir}/.libs\"\n     }"}, {"sha": "117b204bb098d1b09105da7feed3d05f2b5091ef", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d32a77299d85c86579f55b6a211e27c9a7dd9d0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d32a77299d85c86579f55b6a211e27c9a7dd9d0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1d32a77299d85c86579f55b6a211e27c9a7dd9d0", "patch": "@@ -1,3 +1,10 @@\n+2009-12-22  Iain Sandoe  <iain.sandoe@sandoe-acoustics.co.uk>\n+\n+\tPR target/41605\n+\t* testsuite/libstdc++-abi/abi.exp: Provide -B options to allow for\n+\tlink spec %s substitutions for static libraries.\n+\t* testsuite/lib/libstdc++.exp: Ditto\n+\n 2009-12-22  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/std/mutex (call_once(once_flag&, _Callable, _Args&&...)):"}, {"sha": "ab4ab2434f3e3d51775da1f47b6980d0e5e54d26", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d32a77299d85c86579f55b6a211e27c9a7dd9d0/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d32a77299d85c86579f55b6a211e27c9a7dd9d0/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=1d32a77299d85c86579f55b6a211e27c9a7dd9d0", "patch": "@@ -91,6 +91,8 @@ proc libstdc++_init { testfile } {\n     global target_triplet\n     global flags_file\n     global tool_timeout\n+    global DEFAULT_CXXFLAGS\n+    global STATIC_LIBCXXFLAGS\n \n     # We set LC_ALL and LANG to C so that we get the same error\n     # messages as expected.\n@@ -106,6 +108,7 @@ proc libstdc++_init { testfile } {\n \n     set blddir [lookfor_file [get_multilibs] libstdc++-v3]\n     set flags_file \"${blddir}/scripts/testsuite_flags\"\n+    set shlib_ext [get_shlib_extension]\n     v3track flags_file 2\n \n     # If a test doesn't have special options, use DEFAULT_CXXFLAGS.\n@@ -114,7 +117,7 @@ proc libstdc++_init { testfile } {\n     #   2) might need to be negated \n     # In particular, some tests have to be run without precompiled\n     # headers, or without assertions.\n-    global DEFAULT_CXXFLAGS\n+\n     if ![info exists DEFAULT_CXXFLAGS] then {\n \tset DEFAULT_CXXFLAGS \"\"\n \t# Host specific goo here.\n@@ -145,7 +148,7 @@ proc libstdc++_init { testfile } {\n \n     # Locate libgomp. This is only required for parallel mode.\n     set v3-libgomp 0\n-    set libgompdir [lookfor_file $blddir/../libgomp .libs/libgomp.so]\n+    set libgompdir [lookfor_file $blddir/../libgomp .libs/libgomp.$shlib_ext]\n     if {$libgompdir != \"\"} {\n \tset v3-libgomp 1\n         set libgompdir [file dirname $libgompdir]\n@@ -156,7 +159,7 @@ proc libstdc++_init { testfile } {\n \n     # Locate libstdc++ shared library. (ie libstdc++.so.)\n     set v3-sharedlib 0\n-    set sharedlibdir [lookfor_file $blddir src/.libs/libstdc++.so]\n+    set sharedlibdir [lookfor_file $blddir src/.libs/libstdc++.$shlib_ext]\n     if {$sharedlibdir != \"\"} {\n \tif { [string match \"*-*-linux*\" $target_triplet] && [isnative] } {\n \t    set v3-sharedlib 1\n@@ -165,6 +168,15 @@ proc libstdc++_init { testfile } {\n     }\n     v3track v3-sharedlib 3\n \n+    set STATIC_LIBCXXFLAGS \"\"\n+    set staticlibdir [lookfor_file $blddir src/.libs/libstdc++.a]\n+    if {$staticlibdir != \"\"} {\n+\tset staticlibdir [file dirname $staticlibdir]\n+\t# Some targets use libstdc++.a%s in their specs, so they need a\n+\t# -B option for uninstalled testing.\n+\tset STATIC_LIBCXXFLAGS \" -B${staticlibdir} \"\n+    }\n+\n     # Compute what needs to be added to the existing LD_LIBRARY_PATH.\n     if {$gccdir != \"\"} {\n \tset compiler ${gccdir}/g++\n@@ -403,6 +415,7 @@ proc v3_target_compile { source dest type options } {\n     global cxxflags\n     global cxxldflags\n     global includes\n+    global STATIC_LIBCXXFLAGS\n \n     if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n         lappend options \"libs=${gluefile}\"\n@@ -412,6 +425,7 @@ proc v3_target_compile { source dest type options } {\n     set cxx_final $cxx\n     set cxxlibglossflags  [libgloss_link_flags]\n     set cxx_final [concat $cxx_final $cxxlibglossflags]\n+    set cxx_final [concat $cxx_final $STATIC_LIBCXXFLAGS]\n     set cxx_final [concat $cxx_final $cxxflags]\n     set cxx_final [concat $cxx_final $includes]\n \n@@ -443,6 +457,7 @@ proc v3_target_compile_as_c { source dest type options } {\n     global blddir\n     global cc\n     global cxxflags\n+    global STATIC_LIBCXXFLAGS\n \n     if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n         lappend options \"libs=${gluefile}\"\n@@ -453,6 +468,7 @@ proc v3_target_compile_as_c { source dest type options } {\n     set cc_final $cc\n     set cxxlibglossflags [libgloss_link_flags]\n     set cc_final [concat $cc_final $cxxlibglossflags]\n+    set cc_final [concat $cc_final $STATIC_LIBCXXFLAGS]\n     set cc_final [concat $cc_final $cxxflags]\n     set cc_final [concat $cc_final $includes]\n     regsub -all {\\s[-]nostdinc[+][+]} $cc_final \"\" cc_final"}, {"sha": "fd892a0ebd9ae9371e4ecac780ed595b1a50faeb", "filename": "libstdc++-v3/testsuite/libstdc++-abi/abi.exp", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d32a77299d85c86579f55b6a211e27c9a7dd9d0/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-abi%2Fabi.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d32a77299d85c86579f55b6a211e27c9a7dd9d0/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-abi%2Fabi.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-abi%2Fabi.exp?ref=1d32a77299d85c86579f55b6a211e27c9a7dd9d0", "patch": "@@ -18,7 +18,12 @@\n # this test. Or, hey, if we don't support this kind of symbol\n # versioning test: don't run it.\n \n-set lib $blddir/src/.libs/libstdc++.so\n+if { [string match \"*-*-darwin*\" $target_triplet] } {\n+    set lib $blddir/src/.libs/libstdc++.dylib\n+} else { \n+    set lib $blddir/src/.libs/libstdc++.so\n+}\n+\n set baseline_subdir \"[eval exec $cxx --print-multi-dir]\"\n \n # Build the support objects."}]}