{"sha": "d8e9850b7f818f56fcf7e945003556db349db536", "node_id": "C_kwDOANBUbNoAKGQ4ZTk4NTBiN2Y4MThmNTZmY2Y3ZTk0NTAwMzU1NmRiMzQ5ZGI1MzY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-11-17T10:12:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-17T10:12:19Z"}, "message": "Merge #1652\n\n1652: AST dump types r=CohenArthur a=jdupak\n\n\r\n- \\[x] GCC development requires copyright assignment or the Developer's Certificate of Origin sign-off, see https://gcc.gnu.org/contribute.html or https://gcc.gnu.org/dco.html\r\n- \\[x] Read contributing guidlines\r\n- \\[x] `make check-rust` passes locally\r\n- \\[x] Run `clang-format`\r\n- N\\A - Added any relevant test cases to `gcc/testsuite/rust/`\r\n\r\n---\r\n\r\nAdd/fix AST dump of types incl. generic parameters.\r\n\n\nCo-authored-by: Jakub Dupak <dev@jakubdupak.com>", "tree": {"sha": "5f1b10cfe1f0b19de58b3451f3e5423e57e8c6c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f1b10cfe1f0b19de58b3451f3e5423e57e8c6c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8e9850b7f818f56fcf7e945003556db349db536", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjdgkDCRBK7hj4Ov3rIwAAvd0IAC4OqGTmd7pEJvemH+M1BZzc\nDMcLYDJHx0YLl4xY4mbSTG5wSUYrRbJI6YOSFZHRVvDJZnxuEcr7OYUNST6p47kz\nLgVDCTBrAaRqRiS7+FHP8OyqVkHZvDP48CGvHvF88wdNspxX3BA7WwBNSuNdihVc\nzbrIXLSWfoegTdvLxZuldY3M21gE/xOmzNKqk36Mg6EEuxuKcnGma5uYJ5d2sKV+\nbFkM8xXjv5xrLc+eusKzkoszb3ML5hMR66R8WXH9BSLQe+NmCimjFsp36/lBl3q9\nE8JIQULhVq6csrvk2zrkUPCo4IJ6L3aKN/2U6im+No/2dJRXCNzml81GGqu/KsU=\n=CIHD\n-----END PGP SIGNATURE-----\n", "payload": "tree 5f1b10cfe1f0b19de58b3451f3e5423e57e8c6c5\nparent 27136db8fd7b428870f6c85ae4b328f54c8de4bb\nparent 9527e9985890e30c7687c9482b669e3f5338f9fe\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1668679939 +0000\ncommitter GitHub <noreply@github.com> 1668679939 +0000\n\nMerge #1652\n\n1652: AST dump types r=CohenArthur a=jdupak\n\n\r\n- \\[x] GCC development requires copyright assignment or the Developer's Certificate of Origin sign-off, see https://gcc.gnu.org/contribute.html or https://gcc.gnu.org/dco.html\r\n- \\[x] Read contributing guidlines\r\n- \\[x] `make check-rust` passes locally\r\n- \\[x] Run `clang-format`\r\n- N\\A - Added any relevant test cases to `gcc/testsuite/rust/`\r\n\r\n---\r\n\r\nAdd/fix AST dump of types incl. generic parameters.\r\n\n\nCo-authored-by: Jakub Dupak <dev@jakubdupak.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e9850b7f818f56fcf7e945003556db349db536", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8e9850b7f818f56fcf7e945003556db349db536", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e9850b7f818f56fcf7e945003556db349db536/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27136db8fd7b428870f6c85ae4b328f54c8de4bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27136db8fd7b428870f6c85ae4b328f54c8de4bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27136db8fd7b428870f6c85ae4b328f54c8de4bb"}, {"sha": "9527e9985890e30c7687c9482b669e3f5338f9fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9527e9985890e30c7687c9482b669e3f5338f9fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9527e9985890e30c7687c9482b669e3f5338f9fe"}], "stats": {"total": 399, "additions": 361, "deletions": 38}, "files": [{"sha": "131e23ea180143166c760915605a7d121cef6125", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 339, "deletions": 31, "changes": 370, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e9850b7f818f56fcf7e945003556db349db536/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e9850b7f818f56fcf7e945003556db349db536/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=d8e9850b7f818f56fcf7e945003556db349db536", "patch": "@@ -17,7 +17,6 @@\n // <http://www.gnu.org/licenses/>.\n \n #include \"rust-ast-dump.h\"\n-#include \"rust-diagnostics.h\"\n \n namespace Rust {\n namespace AST {\n@@ -249,6 +248,56 @@ Dump::visit (std::vector<LifetimeParam> &for_lifetimes)\n   stream << \"> \";\n }\n \n+void\n+Dump::visit (FunctionQualifiers &qualifiers)\n+{\n+  // Syntax:\n+  //    `const`? `async`? `unsafe`? (`extern` Abi?)?\n+  //    unsafe? (extern Abi?)?\n+\n+  switch (qualifiers.get_const_status ())\n+    {\n+    case NONE:\n+      break;\n+    case CONST_FN:\n+      stream << \"const \";\n+      break;\n+    case ASYNC_FN:\n+      stream << \"async \";\n+      break;\n+    }\n+\n+  if (qualifiers.is_unsafe ())\n+    stream << \"unsafe \";\n+  if (qualifiers.is_extern ())\n+    {\n+      stream << \"extern \";\n+      if (qualifiers.has_abi ())\n+\tstream << \"\\\"\" << qualifiers.get_extern_abi () << \"\\\" \";\n+    }\n+} // namespace AST\n+\n+void\n+Dump::visit (MaybeNamedParam &param)\n+{\n+  // Syntax:\n+  //     OuterAttribute* ( ( IDENTIFIER | _ ) : )? Type\n+\n+  visit_items_joined_by_separator (param.get_outer_attrs (), \" \");\n+  switch (param.get_param_kind ())\n+    {\n+    case MaybeNamedParam::UNNAMED:\n+      break;\n+    case MaybeNamedParam::IDENTIFIER:\n+      stream << \" \" << param.get_name () << \": \";\n+      break;\n+    case MaybeNamedParam::WILDCARD:\n+      stream << \" _: \";\n+      break;\n+    }\n+  visit (param.get_type ());\n+}\n+\n void\n Dump::visit (Token &tok)\n {\n@@ -322,21 +371,134 @@ Dump::visit (PathInExpression &path)\n }\n \n void\n-Dump::visit (TypePathSegment &)\n-{}\n+Dump::visit (TypePathSegment &segment)\n+{\n+  // Syntax:\n+  //    PathIdentSegment\n+\n+  stream << segment.get_ident_segment ().as_string ();\n+}\n \n void\n-Dump::visit (TypePathSegmentGeneric &)\n-{}\n+Dump::visit (TypePathSegmentGeneric &segment)\n+{\n+  // Syntax:\n+  //    PathIdentSegment `::`? (GenericArgs)?\n+  // GenericArgs :\n+  //    `<` `>`\n+  //    | `<` ( GenericArg `,` )* GenericArg `,`? `>`\n+\n+  stream << segment.get_ident_segment ().as_string ();\n+\n+  if (segment.get_separating_scope_resolution ())\n+    stream << \"::\";\n+\n+  stream << \"<\";\n+\n+  {\n+    // Here we join 3 lists (each possibly empty) with a separator.\n+\n+    auto &lifetime_args = segment.get_generic_args ().get_lifetime_args ();\n+    auto &generic_args = segment.get_generic_args ().get_generic_args ();\n+    auto &binding_args = segment.get_generic_args ().get_binding_args ();\n+\n+    visit_items_joined_by_separator (lifetime_args, \", \");\n+    if (!lifetime_args.empty ()\n+\t&& (!generic_args.empty () || !binding_args.empty ()))\n+      {\n+\t// Insert separator if some items have been already emitted and some\n+\t// more are to be emitted from any of the following collections.\n+\tstream << \", \";\n+      }\n+    visit_items_joined_by_separator (generic_args, \", \");\n+    if (!generic_args.empty () && !binding_args.empty ())\n+      {\n+\t// Insert separator if some item vas emitted from the previous\n+\t// collection and more are to be emitted from the last.\n+\tstream << \", \";\n+      }\n+    visit_items_joined_by_separator (binding_args, \", \");\n+  }\n+\n+  stream << \">\";\n+}\n \n void\n-Dump::visit (TypePathSegmentFunction &)\n-{}\n+Dump::visit (GenericArgsBinding &binding)\n+{\n+  // Syntax:\n+  //    IDENTIFIER `=` Type\n+\n+  stream << binding.get_identifier () << \" << \";\n+  visit (binding.get_type ());\n+}\n+\n+void\n+Dump::visit (GenericArg &arg)\n+{\n+  // `GenericArg` implements `accept_vis` but it is not useful for this case as\n+  // it ignores unresolved cases (`Kind::Either`).\n+\n+  switch (arg.get_kind ())\n+    {\n+    case GenericArg::Kind::Const:\n+      visit (arg.get_expression ());\n+      break;\n+    case GenericArg::Kind::Type:\n+      visit (arg.get_type ());\n+      break;\n+    case GenericArg::Kind::Either:\n+      stream << arg.get_path ();\n+      break;\n+    case GenericArg::Kind::Error:\n+      gcc_unreachable ();\n+    }\n+} // namespace AST\n+\n+void\n+Dump::visit (TypePathSegmentFunction &segment)\n+{\n+  // Syntax:\n+  //   PathIdentSegment `::`? (TypePathFn)?\n+\n+  stream << segment.get_ident_segment ().as_string ();\n+\n+  if (segment.get_separating_scope_resolution ())\n+    stream << \"::\";\n+\n+  if (!segment.is_ident_only ())\n+    visit (segment.get_type_path_function ());\n+}\n+\n+void\n+Dump::visit (TypePathFunction &type_path_fn)\n+{\n+  // Syntax:\n+  //   `(` TypePathFnInputs? `)` (`->` Type)?\n+  // TypePathFnInputs :\n+  //   Type (`,` Type)* `,`?\n+\n+  stream << '(';\n+  if (type_path_fn.has_inputs ())\n+    visit_items_joined_by_separator (type_path_fn.get_params (), \", \");\n+  stream << ')';\n+\n+  if (type_path_fn.has_return_type ())\n+    {\n+      stream << \"->\";\n+      visit (type_path_fn.get_return_type ());\n+    }\n+}\n \n void\n Dump::visit (TypePath &path)\n {\n-  stream << path.as_string ();\n+  // Syntax:\n+  //    `::`? TypePathSegment (`::` TypePathSegment)*\n+\n+  if (path.has_opening_scope_resolution_op ())\n+    stream << \"::\";\n+  visit_items_joined_by_separator (path.get_segments (), \"::\");\n }\n \n void\n@@ -686,7 +848,7 @@ Dump::visit (BlockExpr &expr)\n   stream << \"{\\n\";\n   indentation.increment ();\n \n-  visit_items_as_lines (expr.get_statements (), \"; /* stmt */\");\n+  visit_items_as_lines (expr.get_statements (), \";\");\n \n   if (expr.has_tail_expr ())\n     visit_as_line (expr.get_tail_expr (), \" /* tail expr */\\n\");\n@@ -842,7 +1004,17 @@ Dump::visit (AsyncBlockExpr &)\n void\n Dump::visit (TypeParam &param)\n {\n+  // Syntax:\n+  //    IDENTIFIER( : TypeParamBounds? )? ( = Type )?\n+  // TypeParamBounds :\n+  //    TypeParamBound ( + TypeParamBound )* +?\n+\n   stream << param.get_type_representation ();\n+  if (param.has_type_param_bounds ())\n+    {\n+      stream << \": \";\n+      visit_items_joined_by_separator (param.get_type_param_bounds (), \" + \");\n+    }\n   if (param.has_type ())\n     {\n       stream << \" = \";\n@@ -905,8 +1077,12 @@ Dump::visit (Method &method)\n   visit (method.get_visibility ());\n   stream << \"fn \" << method.get_method_name () << '(';\n \n-  stream << method.get_self_param ().as_string () << \", \";\n-  visit_items_joined_by_separator (method.get_function_params (), \", \");\n+  stream << method.get_self_param ().as_string ();\n+  if (!method.get_function_params ().empty ())\n+    {\n+      stream << \", \";\n+      visit_items_joined_by_separator (method.get_function_params (), \", \");\n+    }\n \n   stream << \") \";\n \n@@ -1033,7 +1209,6 @@ Dump::visit (TypeAlias &type_alias)\n     visit (type_alias.get_where_clause ());\n   stream << \" = \";\n   visit (type_alias.get_type_aliased ());\n-  stream << \";\\n\";\n }\n \n void\n@@ -1172,9 +1347,13 @@ Dump::visit (TraitItemMethod &item)\n   // emit_visibility (method.get_visibility ());\n   stream << \"fn \" << method.get_identifier () << '(';\n \n-  stream << method.get_self_param ().as_string () << \", \";\n+  stream << method.get_self_param ().as_string ();\n \n-  visit_items_joined_by_separator (method.get_function_params (), \", \");\n+  if (!method.get_function_params ().empty ())\n+    {\n+      stream << \", \";\n+      visit_items_joined_by_separator (method.get_function_params (), \", \");\n+    }\n \n   stream << \") \";\n \n@@ -1560,64 +1739,193 @@ Dump::visit (TraitBound &bound)\n }\n \n void\n-Dump::visit (ImplTraitType &)\n-{}\n+Dump::visit (ImplTraitType &type)\n+{\n+  // Syntax:\n+  //    impl TypeParamBounds\n+  // TypeParamBounds :\n+  //    TypeParamBound ( + TypeParamBound )* +?\n+\n+  stream << \"impl \";\n+  visit_items_joined_by_separator (type.get_type_param_bounds (), \" + \");\n+}\n \n void\n-Dump::visit (TraitObjectType &)\n-{}\n+Dump::visit (TraitObjectType &type)\n+{\n+  // Syntax:\n+  //   dyn? TypeParamBounds\n+  // TypeParamBounds :\n+  //   TypeParamBound ( + TypeParamBound )* +?\n+\n+  if (type.is_dyn ())\n+    stream << \"dyn \";\n+  visit_items_joined_by_separator (type.get_type_param_bounds (), \" + \");\n+}\n \n void\n-Dump::visit (ParenthesisedType &)\n-{}\n+Dump::visit (ParenthesisedType &type)\n+{\n+  // Syntax:\n+  //    ( Type )\n+\n+  stream << \"(\";\n+  visit (type.get_type_in_parens ());\n+  stream << \")\";\n+}\n \n void\n-Dump::visit (ImplTraitTypeOneBound &)\n-{}\n+Dump::visit (ImplTraitTypeOneBound &type)\n+{\n+  // Syntax:\n+  //    impl TraitBound\n+\n+  stream << \"impl \";\n+  visit (type.get_trait_bound ());\n+}\n \n void\n-Dump::visit (TraitObjectTypeOneBound &)\n-{}\n+Dump::visit (TraitObjectTypeOneBound &type)\n+{\n+  // Syntax:\n+  //    dyn? TraitBound\n+\n+  if (type.is_dyn ())\n+    stream << \"dyn \";\n+  visit (type.get_trait_bound ());\n+}\n \n void\n-Dump::visit (TupleType &)\n-{}\n+Dump::visit (TupleType &type)\n+{\n+  // Syntax:\n+  //   ( )\n+  //   | ( ( Type , )+ Type? )\n+\n+  stream << '(';\n+  visit_items_joined_by_separator (type.get_elems (), \", \");\n+  stream << ')';\n+}\n \n void\n Dump::visit (NeverType &)\n-{}\n+{\n+  // Syntax:\n+  //  !\n+\n+  stream << '!';\n+}\n \n void\n-Dump::visit (RawPointerType &)\n-{}\n+Dump::visit (RawPointerType &type)\n+{\n+  // Syntax:\n+  //    * ( mut | const ) TypeNoBounds\n+\n+  if (type.get_pointer_type () == RawPointerType::MUT)\n+    stream << \"*mut \";\n+  else /* RawPointerType::CONST */\n+    stream << \"*const \";\n+\n+  visit (type.get_type_pointed_to ());\n+}\n \n void\n Dump::visit (ReferenceType &type)\n {\n+  // Syntax:\n+  //    & Lifetime? mut? TypeNoBounds\n+\n+  stream << '&';\n+\n+  if (type.has_lifetime ())\n+    {\n+      visit (type.get_lifetime ());\n+      stream << ' ';\n+    }\n+\n+  if (type.get_has_mut ())\n+    stream << \"mut \";\n+\n   visit (type.get_type_referenced ());\n }\n \n void\n Dump::visit (ArrayType &type)\n {\n+  // Syntax:\n+  //    [ Type ; Expression ]\n+\n+  stream << '[';\n   visit (type.get_elem_type ());\n+  stream << \"; \";\n+  visit (type.get_size_expr ());\n+  stream << ']';\n }\n \n void\n Dump::visit (SliceType &type)\n {\n+  // Syntax:\n+  //    [ Type ]\n+\n+  stream << '[';\n   visit (type.get_elem_type ());\n+  stream << ']';\n }\n \n void\n Dump::visit (InferredType &)\n {\n+  // Syntax:\n+  //    _\n+\n   stream << \"_\";\n }\n \n void\n-Dump::visit (BareFunctionType &)\n-{}\n+Dump::visit (BareFunctionType &type)\n+{\n+  // Syntax:\n+  //    ForLifetimes? FunctionTypeQualifiers fn\n+  //      ( FunctionParametersMaybeNamedVariadic? ) BareFunctionReturnType?\n+  //\n+  //    BareFunctionReturnType:\n+  //      -> TypeNoBounds\n+  //\n+  //    FunctionParametersMaybeNamedVariadic :\n+  //      MaybeNamedFunctionParameters | MaybeNamedFunctionParametersVariadic\n+  //\n+  //    MaybeNamedFunctionParameters :\n+  //      MaybeNamedParam ( , MaybeNamedParam )* ,?\n+  //\n+  //    MaybeNamedFunctionParametersVariadic :\n+  //      ( MaybeNamedParam , )* MaybeNamedParam , OuterAttribute* ...\n+\n+  if (type.has_for_lifetimes ())\n+    visit (type.get_for_lifetimes ());\n+\n+  visit (type.get_function_qualifiers ());\n+\n+  stream << \"fn (\";\n+\n+  visit_items_joined_by_separator (type.get_function_params (), \", \");\n+\n+  if (type.is_variadic ())\n+    {\n+      stream << \", \";\n+      visit_items_joined_by_separator (type.get_variadic_attr (), \" \");\n+      stream << \"...\";\n+    }\n+\n+  stream << ')';\n+\n+  if (type.has_return_type ())\n+    {\n+      stream << \" -> \";\n+      visit (type.get_return_type ());\n+    }\n+}\n \n } // namespace AST\n } // namespace Rust"}, {"sha": "4bc322cda9883fbcb4c06d1840a14150c9f91da4", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e9850b7f818f56fcf7e945003556db349db536/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e9850b7f818f56fcf7e945003556db349db536/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=d8e9850b7f818f56fcf7e945003556db349db536", "patch": "@@ -137,6 +137,11 @@ class Dump : public ASTVisitor\n   void visit (MacroRule &rule);\n   void visit (WhereClause &rule);\n   void visit (std::vector<LifetimeParam> &for_lifetimes);\n+  void visit (FunctionQualifiers &qualifiers);\n+  void visit (MaybeNamedParam &param);\n+  void visit (TypePathFunction &type_path_fn);\n+  void visit (GenericArgsBinding &binding);\n+  void visit (GenericArg &arg);\n \n   // rust-ast.h\n   void visit (Token &tok);"}, {"sha": "c4df7308350119130bd7d49e731cde879bb97a2a", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e9850b7f818f56fcf7e945003556db349db536/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e9850b7f818f56fcf7e945003556db349db536/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=d8e9850b7f818f56fcf7e945003556db349db536", "patch": "@@ -3071,7 +3071,7 @@ BareFunctionType::as_string () const\n     }\n \n   str += \"\\n Is variadic: \";\n-  if (is_variadic)\n+  if (_is_variadic)\n     str += \"true\";\n   else\n     str += \"false\";"}, {"sha": "4d435cfdbb0206faff684ce896a85f1776920c7f", "filename": "gcc/rust/ast/rust-type.h", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e9850b7f818f56fcf7e945003556db349db536/gcc%2Frust%2Fast%2Frust-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e9850b7f818f56fcf7e945003556db349db536/gcc%2Frust%2Fast%2Frust-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-type.h?ref=d8e9850b7f818f56fcf7e945003556db349db536", "patch": "@@ -835,7 +835,7 @@ struct MaybeNamedParam\n };\n \n /* A function pointer type - can be created via coercion from function items and\n- * non- capturing closures. */\n+ * non-capturing closures. */\n class BareFunctionType : public TypeNoBounds\n {\n   // bool has_for_lifetimes;\n@@ -844,7 +844,7 @@ class BareFunctionType : public TypeNoBounds\n \n   FunctionQualifiers function_qualifiers;\n   std::vector<MaybeNamedParam> params;\n-  bool is_variadic;\n+  bool _is_variadic;\n   std::vector<Attribute> variadic_attrs;\n \n   // bool has_return_type;\n@@ -860,14 +860,24 @@ class BareFunctionType : public TypeNoBounds\n   // Whether the function has ForLifetimes.\n   bool has_for_lifetimes () const { return !for_lifetimes.empty (); }\n \n+  std::vector<LifetimeParam> &get_for_lifetimes () { return for_lifetimes; }\n+\n+  bool is_variadic () const { return _is_variadic; }\n+\n+  std::vector<Attribute> &get_variadic_attr () { return variadic_attrs; };\n+  const std::vector<Attribute> &get_variadic_attr () const\n+  {\n+    return variadic_attrs;\n+  };\n+\n   BareFunctionType (std::vector<LifetimeParam> lifetime_params,\n \t\t    FunctionQualifiers qualifiers,\n \t\t    std::vector<MaybeNamedParam> named_params, bool is_variadic,\n \t\t    std::vector<Attribute> variadic_attrs,\n \t\t    std::unique_ptr<TypeNoBounds> type, Location locus)\n     : for_lifetimes (std::move (lifetime_params)),\n       function_qualifiers (std::move (qualifiers)),\n-      params (std::move (named_params)), is_variadic (is_variadic),\n+      params (std::move (named_params)), _is_variadic (is_variadic),\n       variadic_attrs (std::move (variadic_attrs)),\n       return_type (std::move (type)), locus (locus)\n   {\n@@ -879,7 +889,7 @@ class BareFunctionType : public TypeNoBounds\n   BareFunctionType (BareFunctionType const &other)\n     : for_lifetimes (other.for_lifetimes),\n       function_qualifiers (other.function_qualifiers), params (other.params),\n-      is_variadic (other.is_variadic), variadic_attrs (other.variadic_attrs),\n+      _is_variadic (other._is_variadic), variadic_attrs (other.variadic_attrs),\n       locus (other.locus)\n   {\n     // guard to prevent null dereference\n@@ -893,7 +903,7 @@ class BareFunctionType : public TypeNoBounds\n     for_lifetimes = other.for_lifetimes;\n     function_qualifiers = other.function_qualifiers;\n     params = other.params;\n-    is_variadic = other.is_variadic;\n+    _is_variadic = other._is_variadic;\n     variadic_attrs = other.variadic_attrs;\n     locus = other.locus;\n \n@@ -930,7 +940,7 @@ class BareFunctionType : public TypeNoBounds\n     return return_type;\n   }\n \n-  FunctionQualifiers get_function_qualifiers () { return function_qualifiers; }\n+  FunctionQualifiers &get_function_qualifiers () { return function_qualifiers; }\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather"}]}