{"sha": "53467b5543100b84ad1bb2392efd989639f01eca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM0NjdiNTU0MzEwMGI4NGFkMWJiMjM5MmVmZDk4OTYzOWYwMWVjYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-11-13T16:14:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-11-13T16:14:37Z"}, "message": "re PR tree-optimization/86991 (ICE in vectorizable_reduction, at tree-vect-loop.c:6919)\n\n2018-11-13  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/86991\n\t* tree-vect-loop.c (vect_is_slp_reduction): Delay reduction\n\tgroup building until we have successfully detected the SLP\n\treduction.\n\t(vect_is_simple_reduction): Remove fixup code here.\n\n\t* gcc.dg/pr86991.c: New testcase.\n\nFrom-SVN: r266081", "tree": {"sha": "297025c0e6133ae53350d9dc0db72386e84fa96b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/297025c0e6133ae53350d9dc0db72386e84fa96b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53467b5543100b84ad1bb2392efd989639f01eca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53467b5543100b84ad1bb2392efd989639f01eca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53467b5543100b84ad1bb2392efd989639f01eca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53467b5543100b84ad1bb2392efd989639f01eca/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bbeeac91f96bdcbc3eb40ec68c1fd8cf5d4a038d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbeeac91f96bdcbc3eb40ec68c1fd8cf5d4a038d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbeeac91f96bdcbc3eb40ec68c1fd8cf5d4a038d"}], "stats": {"total": 78, "additions": 49, "deletions": 29}, "files": [{"sha": "396991de7262db56cb85208fbfb6998d4a11e659", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53467b5543100b84ad1bb2392efd989639f01eca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53467b5543100b84ad1bb2392efd989639f01eca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53467b5543100b84ad1bb2392efd989639f01eca", "patch": "@@ -1,3 +1,11 @@\n+2018-11-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/86991\n+\t* tree-vect-loop.c (vect_is_slp_reduction): Delay reduction\n+\tgroup building until we have successfully detected the SLP\n+\treduction.\n+\t(vect_is_simple_reduction): Remove fixup code here.\n+\n 2018-11-13  David Malcolm  <dmalcolm@redhat.com>\n \n \t* dumpfile.c (VERIFY_DUMP_ENABLED_P): New macro."}, {"sha": "b57b28c70585ac92555c0e4cdde1bd4aeb9c9c34", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53467b5543100b84ad1bb2392efd989639f01eca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53467b5543100b84ad1bb2392efd989639f01eca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=53467b5543100b84ad1bb2392efd989639f01eca", "patch": "@@ -1,3 +1,8 @@\n+2018-11-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/86991\n+\t* gcc.dg/pr86991.c: New testcase.\n+\n 2018-11-13  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gimple-loop-interchange.cc (tree_loop_interchange::interchange):"}, {"sha": "5cd16e28c6770f6801dcadefa7e4b961342813d8", "filename": "gcc/testsuite/gcc.dg/pr86991.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53467b5543100b84ad1bb2392efd989639f01eca/gcc%2Ftestsuite%2Fgcc.dg%2Fpr86991.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53467b5543100b84ad1bb2392efd989639f01eca/gcc%2Ftestsuite%2Fgcc.dg%2Fpr86991.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr86991.c?ref=53467b5543100b84ad1bb2392efd989639f01eca", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+int b;\n+extern unsigned c[];\n+unsigned d;\n+long e;\n+\n+void f()\n+{\n+  unsigned g, h;\n+  for (; d; d += 2) {\n+      g = 1;\n+      for (; g; g += 3) {\n+\t  h = 2;\n+\t  for (; h < 6; h++)\n+\t    c[h] = c[h] - b - ~e;\n+      }\n+  }\n+}"}, {"sha": "dccddee1cf094cf6a3741fdaf7ea65afef957e2f", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53467b5543100b84ad1bb2392efd989639f01eca/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53467b5543100b84ad1bb2392efd989639f01eca/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=53467b5543100b84ad1bb2392efd989639f01eca", "patch": "@@ -2468,7 +2468,7 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple *phi,\n   struct loop *vect_loop = LOOP_VINFO_LOOP (loop_info);\n   enum tree_code code;\n   gimple *loop_use_stmt = NULL;\n-  stmt_vec_info use_stmt_info, current_stmt_info = NULL;\n+  stmt_vec_info use_stmt_info;\n   tree lhs;\n   imm_use_iterator imm_iter;\n   use_operand_p use_p;\n@@ -2478,6 +2478,7 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple *phi,\n   if (loop != vect_loop)\n     return false;\n \n+  auto_vec<stmt_vec_info, 8> reduc_chain;\n   lhs = PHI_RESULT (phi);\n   code = gimple_assign_rhs_code (first_stmt);\n   while (1)\n@@ -2530,17 +2531,9 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple *phi,\n \n       /* Insert USE_STMT into reduction chain.  */\n       use_stmt_info = loop_info->lookup_stmt (loop_use_stmt);\n-      if (current_stmt_info)\n-        {\n-\t  REDUC_GROUP_NEXT_ELEMENT (current_stmt_info) = use_stmt_info;\n-          REDUC_GROUP_FIRST_ELEMENT (use_stmt_info)\n-            = REDUC_GROUP_FIRST_ELEMENT (current_stmt_info);\n-        }\n-      else\n-\tREDUC_GROUP_FIRST_ELEMENT (use_stmt_info) = use_stmt_info;\n+      reduc_chain.safe_push (use_stmt_info);\n \n       lhs = gimple_assign_lhs (loop_use_stmt);\n-      current_stmt_info = use_stmt_info;\n       size++;\n    }\n \n@@ -2550,10 +2543,9 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple *phi,\n   /* Swap the operands, if needed, to make the reduction operand be the second\n      operand.  */\n   lhs = PHI_RESULT (phi);\n-  stmt_vec_info next_stmt_info = REDUC_GROUP_FIRST_ELEMENT (current_stmt_info);\n-  while (next_stmt_info)\n+  for (unsigned i = 0; i < reduc_chain.length (); ++i)\n     {\n-      gassign *next_stmt = as_a <gassign *> (next_stmt_info->stmt);\n+      gassign *next_stmt = as_a <gassign *> (reduc_chain[i]->stmt);\n       if (gimple_assign_rhs2 (next_stmt) == lhs)\n \t{\n \t  tree op = gimple_assign_rhs1 (next_stmt);\n@@ -2567,7 +2559,6 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple *phi,\n \t      && vect_valid_reduction_input_p (def_stmt_info))\n \t    {\n \t      lhs = gimple_assign_lhs (next_stmt);\n-\t      next_stmt_info = REDUC_GROUP_NEXT_ELEMENT (next_stmt_info);\n  \t      continue;\n \t    }\n \n@@ -2602,14 +2593,20 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple *phi,\n         }\n \n       lhs = gimple_assign_lhs (next_stmt);\n-      next_stmt_info = REDUC_GROUP_NEXT_ELEMENT (next_stmt_info);\n     }\n \n+  /* Build up the actual chain.  */\n+  for (unsigned i = 0; i < reduc_chain.length () - 1; ++i)\n+    {\n+      REDUC_GROUP_FIRST_ELEMENT (reduc_chain[i]) = reduc_chain[0];\n+      REDUC_GROUP_NEXT_ELEMENT (reduc_chain[i]) = reduc_chain[i+1];\n+    }\n+  REDUC_GROUP_FIRST_ELEMENT (reduc_chain.last ()) = reduc_chain[0];\n+  REDUC_GROUP_NEXT_ELEMENT (reduc_chain.last ()) = NULL;\n+\n   /* Save the chain for further analysis in SLP detection.  */\n-  stmt_vec_info first_stmt_info\n-    = REDUC_GROUP_FIRST_ELEMENT (current_stmt_info);\n-  LOOP_VINFO_REDUCTION_CHAINS (loop_info).safe_push (first_stmt_info);\n-  REDUC_GROUP_SIZE (first_stmt_info) = size;\n+  LOOP_VINFO_REDUCTION_CHAINS (loop_info).safe_push (reduc_chain[0]);\n+  REDUC_GROUP_SIZE (reduc_chain[0]) = size;\n \n   return true;\n }\n@@ -3200,16 +3197,6 @@ vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n       return def_stmt_info;\n     }\n \n-  /* Dissolve group eventually half-built by vect_is_slp_reduction.  */\n-  stmt_vec_info first = REDUC_GROUP_FIRST_ELEMENT (def_stmt_info);\n-  while (first)\n-    {\n-      stmt_vec_info next = REDUC_GROUP_NEXT_ELEMENT (first);\n-      REDUC_GROUP_FIRST_ELEMENT (first) = NULL;\n-      REDUC_GROUP_NEXT_ELEMENT (first) = NULL;\n-      first = next;\n-    }\n-\n   /* Look for the expression computing loop_arg from loop PHI result.  */\n   if (check_reduction_path (vect_location, loop, phi, loop_arg, code))\n     return def_stmt_info;"}]}