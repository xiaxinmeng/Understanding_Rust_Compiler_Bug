{"sha": "629d04d35d819bdc26c30d215bc4ea66a74af15b", "node_id": "C_kwDOANBUbNoAKDYyOWQwNGQzNWQ4MTliZGMyNmMzMGQyMTViYzRlYTY2YTc0YWYxNWI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-07T00:17:52Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-07T00:17:52Z"}, "message": "Daily bump.", "tree": {"sha": "03d2660ee57aa0ccfb9bc5748ca5f24cbd25d061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03d2660ee57aa0ccfb9bc5748ca5f24cbd25d061"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/629d04d35d819bdc26c30d215bc4ea66a74af15b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/629d04d35d819bdc26c30d215bc4ea66a74af15b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/629d04d35d819bdc26c30d215bc4ea66a74af15b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/629d04d35d819bdc26c30d215bc4ea66a74af15b/comments", "author": null, "committer": null, "parents": [{"sha": "20462a14d8c0efdb31385c89b15523d1ee85e9b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20462a14d8c0efdb31385c89b15523d1ee85e9b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20462a14d8c0efdb31385c89b15523d1ee85e9b5"}], "stats": {"total": 518, "additions": 517, "deletions": 1}, "files": [{"sha": "9523633c2c584374c89448ee51e2757c7973da75", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/629d04d35d819bdc26c30d215bc4ea66a74af15b/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/629d04d35d819bdc26c30d215bc4ea66a74af15b/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=629d04d35d819bdc26c30d215bc4ea66a74af15b", "patch": "@@ -1,3 +1,8 @@\n+2022-10-06  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_update_version.py: Use logging module\n+\tand provide robust debugging output.\n+\n 2022-10-05  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_update_version.py: Do fetch before a push."}, {"sha": "ad2c6e701e1819afd918620a969ae0a040411007", "filename": "gcc/ChangeLog", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/629d04d35d819bdc26c30d215bc4ea66a74af15b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/629d04d35d819bdc26c30d215bc4ea66a74af15b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=629d04d35d819bdc26c30d215bc4ea66a74af15b", "patch": "@@ -1,3 +1,102 @@\n+2022-10-06  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/107170\n+\t* vr-values.cc (vr_values::range_of_expr):  Do not die on\n+\tunsupported types.\n+\n+2022-10-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* doc/invoke.texi (-fno-asm): Update description of effects on\n+\ttypeof keyword.\n+\n+2022-10-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gimple-loop-jam.cc (tree_loop_unroll_and_jam): Bail out for a self\n+\tdependency that is a write-after-write if the access function is not\n+\taffine or constant.\n+\n+2022-10-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* df-scan.cc (df_ref_create_structure): Minor cleanup.\n+\n+2022-10-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/107115\n+\t* expr.cc (store_expr): Check mems_same_for_tbaa_p before\n+\teliding a seemingly redundant store.\n+\n+2022-10-06  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/atomics.md (*atomic_load<ALLX:mode>_zext<SD_HSDI:mode>):\n+\tNew pattern.\n+\n+2022-10-06  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* config/aarch64/aarch64-cores.def (AARCH64_CORE): Update\n+\tAmpere-1 core entry.\n+\n+2022-10-06  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* config/aarch64/driver-aarch64.cc (readline): Fix off-by-one.\n+\n+2022-10-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107107\n+\t* tree-ssa-sccvn.cc (visit_reference_op_store): Do not\n+\taffect value-numbering when doing the tail merging\n+\tMODIFY_EXPR lookup.\n+\n+2022-10-06  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/linux.h (LINK_SPEC): Remove max-page-size and\n+\tcommon-pave-size.\n+\n+2022-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106654\n+\t* internal-fn.def (ASSUME): New internal function.\n+\t* internal-fn.h (expand_ASSUME): Declare.\n+\t* internal-fn.cc (expand_ASSUME): Define.\n+\t* gimplify.cc (gimplify_call_expr): Gimplify IFN_ASSUME.\n+\t* fold-const.h (simple_condition_p): Declare.\n+\t* fold-const.cc (simple_operand_p_2): Rename to ...\n+\t(simple_condition_p): ... this.  Remove forward declaration.\n+\tNo longer static.  Adjust function comment and fix a typo in it.\n+\tAdjust recursive call.\n+\t(simple_operand_p): Adjust function comment.\n+\t(fold_truth_andor): Adjust simple_operand_p_2 callers to call\n+\tsimple_condition_p.\n+\t* doc/extend.texi: Document assume attribute.  Move fallthrough\n+\tattribute example to its section.\n+\n+2022-10-06  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\tPR rtl-optimization/107088\n+\t* cselib.cc (new_cselib_val): Skip BImode while keeping track of\n+\tsubvalue relations.\n+\n+2022-10-06  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (frange::set): Call set_nan unconditionally.\n+\t(range_tests_nan): Adjust tests.\n+\t(range_tests_signed_zeros): Same.\n+\t(range_tests_floats): Same.\n+\t* value-range.h (frange::update_nan): Guard with HONOR_NANS.\n+\t(frange::set_nan): Set undefined if !HONOR_NANS.\n+\n+2022-10-06  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op-float.cc (foperator_lt::fold_range): Remove extra check\n+\tto finite_operands_p.\n+\t(foperator_le::fold_range): Same.\n+\t(foperator_gt::fold_range): Same.\n+\t(foperator_ge::fold_range): Same.\n+\n+2022-10-06  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range-pretty-print.cc (vrange_printer::print_real_value):\n+\tAvoid printing INF and NAN twice.\n+\n 2022-10-05  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/constraints.md (wD): Delete."}, {"sha": "12abceb7baa3934f827b2c0236984800aa934254", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/629d04d35d819bdc26c30d215bc4ea66a74af15b/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/629d04d35d819bdc26c30d215bc4ea66a74af15b/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=629d04d35d819bdc26c30d215bc4ea66a74af15b", "patch": "@@ -1 +1 @@\n-20221006\n+20221007"}, {"sha": "fc3bc97bea557b875d647136c206c63036f5832b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/629d04d35d819bdc26c30d215bc4ea66a74af15b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/629d04d35d819bdc26c30d215bc4ea66a74af15b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=629d04d35d819bdc26c30d215bc4ea66a74af15b", "patch": "@@ -1,3 +1,150 @@\n+2022-10-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/ada-tree.def (LOAD_EXPR): New expression code.\n+\t* gcc-interface/gigi.h (build_storage_model_load): Declare.\n+\t(build_storage_model_store): Likewise.\n+\t(instantiate_load_in_expr): Likewise.\n+\t(INSTANTIATE_LOAD_IN_EXPR): New macro.\n+\t(instantiate_load_in_array_ref): Declare.\n+\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <E_Record_Type>: Set a\n+\tfake discriminant number on the fields of the template type.\n+\t(gnat_to_gnu_field): Use integer for DECL_DISCRIMINANT_NUMBER.\n+\t* gcc-interface/misc.cc (gnat_init_ts): Mark LOAD_EXPR as typed.\n+\t* gcc-interface/trans.cc (fold_constant_decl_in_expr) <ARRAY_REF>:\n+\tAlso preserve the 4th operand.\n+\t(Attribute_to_gnu): Deal with LOAD_EXPR of unconstrained array type.\n+\t<Attr_Size>: Call INSTANTIATE_LOAD_IN_EXPR for a storage model.\n+\t<Attr_Length>: Likewise.\n+\t<Attr_Bit_Position>: Likewise.\n+\t(get_storage_model): New function.\n+\t(get_storage_model_access): Likewise.\n+\t(storage_model_access_required_p): Likewise.\n+\t(Call_to_gnu): Add GNAT_STORAGE_MODEL parameter and deal with it.\n+\tAlso deal with actual parameters that have a storage model.\n+\t(gnat_to_gnu) <N_Object_Declaratio>: Adjust call to Call_to_gnu.\n+\t<N_Explicit_Dereference>: Deal with a storage model access.\n+\t<N_Indexed_Component>: Likewise.\n+\t<N_Slice>: Likewise.\n+\t<N_Selected_Component>: Likewise.\n+\t<N_Assignment_Statement>: Adjust call to Call_to_gnu.  Deal with a\n+\tstorage model access either on the LHS, on the RHS or on both.\n+\t<N_Function_Cal>: Adjust call to Call_to_gnu.\n+\t<N_Free_Statement>: Deal with a pool that is a storage model.\n+\tReplace test for UNCONSTRAINED_ARRAY_REF with test on the type.\n+\t(gnat_gimplify_expr) <CALL_EXPR>: Tidy up.\n+\t<LOAD_EXPR>: New case.\n+\t<UNCONSTRAINED_ARRAY_REF>: Move down.\n+\t* gcc-interface/utils.cc (maybe_unconstrained_array): Deal with a\n+\tLOAD_EXPR by recursing on its first operand.\n+\t* gcc-interface/utils2.cc (build_allocator): Deal with a pool that\n+\tis a storage model.\n+\t(build_storage_model_copy): New function.\n+\t(build_storage_model_load): Likewise.\n+\t(build_storage_model_store): Likewise.\n+\t(instantiate_load_in_expr): Likewise.\n+\t(instantiate_load_in_array_ref): Likewise.\n+\t(gnat_rewrite_reference) <ARRAY_REF>: Also preserve the 4th operand.\n+\t(get_inner_constant_reference) <ARRAY_REF>: Remove useless test.\n+\t(gnat_invariant_expr) <ARRAY_REF>: Rewrite test.\n+\n+2022-10-06  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_ch6.adb\n+\t(Analyze_Procedure_Call): Replace \"return;\" with \"goto Leave;\", as\n+\tper comment preceding body of Analyze_Procedure_Call.\n+\n+2022-10-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch9.adb (Allows_Lock_Free_Implementation): Reject\n+\tconditional goto statements.\n+\n+2022-10-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst\n+\t(Lock_Free): Remove inconsistent periods that end item\n+\tdescriptions.\n+\t* sem_ch9.adb\n+\t(Allows_Lock_Free_Implementation): Remove unnecessary guard\n+\tagainst an empty list of parameters; replace low-level entity kind\n+\tmembership test with a high-level query; refill error message.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-10-06  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* doc/gnat_rm/security_hardening_features.rst: Add examples of\n+\tcodegen changes in hardened conditionals.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-10-06  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* doc/gnat_rm/security_hardening_features.rst: Add examples of\n+\tcodegen changes in hardened booleans. Mention that C traps where\n+\tAda raises exceptions.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-10-06  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* doc/gnat_rm/security_hardening_features.rst: Add examples of\n+\tcodegen changes in stack scrubbing.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-10-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch9.adb (Build_Lock_Free_Protected_Subprogram_Body): Replace\n+\tshallow copy of protected statements with a deep copy.\n+\n+2022-10-06  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* fe.h (Has_Storage_Model_Type_Aspect)\n+\t(Has_Designated_Storage_Model_Aspect, Storage_Model_Object)\n+\t(Storage_Model_Copy_From, Storage_Model_Copy_To): Add\n+\tdeclarations.\n+\t* sem_util.ads: Add WARNING markers for functions for which a new\n+\tC declaration has been added in fe.h\n+\n+2022-10-06  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_util.adb\n+\t(Get_Current_Value_Condition): Treat references occurring within\n+\tthe condition of an if statement, an elsif, or a while loop in the\n+\tsame way as references that occur before the start of that\n+\tenclosing construct.\n+\n+2022-10-06  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Call): Add test of Comes_From_Source on the\n+\tenclosing subprogram's Entity_Id for determining whether to\n+\tperform the compile-time accessibility check on actuals passed to\n+\taliased formals in a function call occurring within a return\n+\tstatement. That test excludes cases where the call occurs within\n+\tthe return statement of a Pre'Class wrapper function.\n+\n+2022-10-06  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch5.adb\n+\t(Expand_Assign_Array_Loop_Or_Bitfield): Minor cleanups.\n+\n+2022-10-06  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Ignore one variant of pragma\n+\tWarnings in GNATprove mode.\n+\n+2022-10-06  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch5.adb\n+\t(Expand_Assign_Array_Loop_Or_Bitfield): Disable the\n+\tFast_Copy_Bitfield optimization in certain cases.\n+\n+2022-10-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb\n+\t(Sig_Pragma): Change flag for pragma Refined_State to mean \"not\n+\tsignificant\"; this is primarily for documentation, because the\n+\texact value of the flag is not really taken into account for\n+\tRefined_State.\n+\t(Is_Non_Significant_Pragma_Reference): Add special handling for\n+\tpragma Refined_State.\n+\n 2022-09-29  Ronan Desplanques  <desplanques@adacore.com>\n \n \t* einfo.ads: remove documentation duplicate"}, {"sha": "70e9289388c304f7989c278c63aff1fd4229081c", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/629d04d35d819bdc26c30d215bc4ea66a74af15b/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/629d04d35d819bdc26c30d215bc4ea66a74af15b/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=629d04d35d819bdc26c30d215bc4ea66a74af15b", "patch": "@@ -1,3 +1,17 @@\n+2022-10-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107158\n+\t* store.cc (store::replay_call_summary_cluster): Eliminate\n+\tspecial-casing of RK_HEAP_ALLOCATED in favor of sharing code with\n+\tRK_DECL, avoiding an ICE due to attempting to bind a\n+\tcompound_svalue into a binding_cluster when an svalue in the\n+\tsummary cluster converts to a compound_svalue in the caller.\n+\n+2022-10-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* call-summary.cc (call_summary_replay::dump_to_pp): Bulletproof\n+\tagainst NULL caller regions/svalues.\n+\n 2022-10-05  David Malcolm  <dmalcolm@redhat.com>\n \n \t* analysis-plan.cc: Simplify includes."}, {"sha": "75ff47d28d49024333ad0fb0a7360aa8c45cb220", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/629d04d35d819bdc26c30d215bc4ea66a74af15b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/629d04d35d819bdc26c30d215bc4ea66a74af15b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=629d04d35d819bdc26c30d215bc4ea66a74af15b", "patch": "@@ -1,3 +1,18 @@\n+2022-10-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.cc (c_common_reswords): Mark typeof as D_EXT11.  Add\n+\ttypeof_unqual.\n+\t* c-common.h (enum rid): Add RID_TYPEOF_UNQUAL.\n+\t(D_EXT11): New macro.  Values of subsequent macros updated.\n+\n+2022-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106654\n+\t* c-attribs.cc (handle_assume_attribute): New function.\n+\t(c_common_attribute_table): Add entry for assume attribute.\n+\t* c-lex.cc (c_common_has_attribute): Handle\n+\t__have_cpp_attribute (assume).\n+\n 2022-10-04  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-omp.cc (c_omp_directives): Uncomment begin declare target"}, {"sha": "325b1f847330eb6fbd67c4d0f286cbc44e54181e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/629d04d35d819bdc26c30d215bc4ea66a74af15b/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/629d04d35d819bdc26c30d215bc4ea66a74af15b/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=629d04d35d819bdc26c30d215bc4ea66a74af15b", "patch": "@@ -1,3 +1,35 @@\n+2022-10-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-parser.cc (c_parse_init): Add D_EXT11 to mask if flag_no_asm\n+\tand not C2x.\n+\t(c_keyword_starts_typename, c_token_starts_declspecs)\n+\t(c_parser_declspecs, c_parser_objc_selector): Handle\n+\tRID_TYPEOF_UNQUAL.\n+\t(c_parser_typeof_specifier): Handle RID_TYPEOF_UNQUAL.\n+\tDistinguish typeof for C2x from __typeof__ for all standard\n+\tversions and typeof before C2x.\n+\t* c-typeck.cc (build_function_call_vec): Use unqualified version\n+\tof non-void return type.\n+\t(build_unary_op): Use unqualified type for increment and\n+\tdecrement.\n+\n+2022-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.cc (c_parser_omp_assumption_clauses): Emit IFN_ASSUME\n+\tcall for holds clause on assume construct.\n+\n+2022-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106654\n+\t* c-parser.cc (handle_assume_attribute): New function.\n+\t(c_parser_declaration_or_fndef): Handle assume attribute.\n+\t(c_parser_attribute_arguments): Add assume_attr argument,\n+\tif true, parse first argument as conditional expression.\n+\t(c_parser_gnu_attribute, c_parser_std_attribute): Adjust\n+\tc_parser_attribute_arguments callers.\n+\t(c_parser_statement_after_labels) <case RID_ATTRIBUTE>: Handle\n+\tassume attribute.\n+\n 2022-10-04  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-lang.h (struct c_omp_declare_target_attr): New type."}, {"sha": "0fe21fd71a6170dac52a60557e764205fcecb5f9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/629d04d35d819bdc26c30d215bc4ea66a74af15b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/629d04d35d819bdc26c30d215bc4ea66a74af15b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=629d04d35d819bdc26c30d215bc4ea66a74af15b", "patch": "@@ -1,3 +1,57 @@\n+2022-10-06  Jason Merrill  <jason@redhat.com>\n+\n+\t* coroutines.cc (expand_one_await_expression): Change conversion\n+\tto VIEW_CONVERT_EXPR.\n+\t* cp-gimplify.cc (cp_genericize_r) [CONVERT_EXPR]: Add assert.\n+\n+2022-10-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lex.cc (init_reswords): Handle D_EXT11.\n+\n+2022-10-06  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* pt.cc (optimize_specialization_lookup_p): Remove.\n+\t(retrieve_specialization): Assume the above returns false\n+\tand simplify accordingly.\n+\t(register_specialization): Likewise.\n+\n+2022-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.cc (cp_parser_omp_assumption_clauses): Emit IFN_ASSUME\n+\tcall for holds clause on assume construct.\n+\n+2022-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106654\n+\t* cp-tree.h (process_stmt_assume_attribute): Implement C++23\n+\tP1774R8 - Portable assumptions.  Declare.\n+\t(diagnose_failing_condition): Declare.\n+\t(find_failing_clause): Likewise.\n+\t* parser.cc (assume_attr): New enumerator.\n+\t(cp_parser_parenthesized_expression_list): Handle assume_attr.\n+\tRemove identifier variable, for id_attr push the identifier into\n+\texpression_list right away instead of inserting it before all the\n+\tothers at the end.\n+\t(cp_parser_conditional_expression): New function.\n+\t(cp_parser_constant_expression): Use it.\n+\t(cp_parser_statement): Handle assume attribute.\n+\t(cp_parser_expression_statement): Likewise.\n+\t(cp_parser_gnu_attribute_list): Use assume_attr for assume\n+\tattribute.\n+\t(cp_parser_std_attribute): Likewise.  Handle standard assume\n+\tattribute like gnu::assume.\n+\t* cp-gimplify.cc (process_stmt_assume_attribute): New function.\n+\t* constexpr.cc: Include fold-const.h.\n+\t(find_failing_clause_r, find_failing_clause): New functions,\n+\tmoved from semantics.cc with ctx argument added and if non-NULL,\n+\tcall cxx_eval_constant_expression rather than fold_non_dependent_expr.\n+\t(cxx_eval_internal_function): Handle IFN_ASSUME.\n+\t(potential_constant_expression_1): Likewise.\n+\t* pt.cc (tsubst_copy_and_build): Likewise.\n+\t* semantics.cc (diagnose_failing_condition): New function.\n+\t(find_failing_clause_r, find_failing_clause): Moved to constexpr.cc.\n+\t(finish_static_assert): Use it.  Add auto_diagnostic_group.\n+\n 2022-10-05  Jason Merrill  <jason@redhat.com>\n \n \t* tree.cc (lvalue_kind) [VIEW_CONVERT_EXPR]: Change prvalue to"}, {"sha": "535b9aed90ba8e36037344284968cb6f63294c2f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/629d04d35d819bdc26c30d215bc4ea66a74af15b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/629d04d35d819bdc26c30d215bc4ea66a74af15b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=629d04d35d819bdc26c30d215bc4ea66a74af15b", "patch": "@@ -1,3 +1,8 @@\n+2022-10-06  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* trans-openmp.cc (gfc_trans_omp_assume): New.\n+\t(gfc_trans_omp_directive): Call it.\n+\n 2022-10-05  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* dump-parse-tree.cc (show_omp_assumes): New."}, {"sha": "9577fc16f89c11d1e4e85ae5c404c8cb3670db5b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/629d04d35d819bdc26c30d215bc4ea66a74af15b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/629d04d35d819bdc26c30d215bc4ea66a74af15b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=629d04d35d819bdc26c30d215bc4ea66a74af15b", "patch": "@@ -1,3 +1,80 @@\n+2022-10-06  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/107170\n+\t* gcc.dg/tree-ssa/pr107170.c: New test.\n+\n+2022-10-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107158\n+\t* gcc.dg/analyzer/call-summaries-pr107158-2.c: New test.\n+\n+2022-10-06  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/assume-3.f90: New test.\n+\t* gfortran.dg/gomp/assume-4.f90: New test.\n+\n+2022-10-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c11-typeof-1.c, gcc.dg/c2x-typeof-1.c,\n+\tgcc.dg/c2x-typeof-2.c, gcc.dg/c2x-typeof-3.c,\n+\tgcc.dg/gnu11-typeof-1.c, gcc.dg/gnu11-typeof-2.c,\n+\tgcc.dg/gnu2x-typeof-1.c: New tests.\n+\n+2022-10-06  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* g++.dg/modules/indirect-3_b.C: Expect that the entity\n+\tfoo::TPL<0>::frob is tagged as a specialization instead\n+\tof as a declaration.\n+\t* g++.dg/modules/tpl-spec-8_a.H: New test.\n+\t* g++.dg/modules/tpl-spec-8_b.C: New test.\n+\n+2022-10-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.c-torture/execute/20221006-1.c: New test.\n+\n+2022-10-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/107115\n+\t* gcc.dg/torture/pr107115.c: New testcase.\n+\n+2022-10-06  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/ldar_2.c: New test.\n+\n+2022-10-06  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/ldar_1.c: New test.\n+\n+2022-10-06  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* gcc.target/aarch64/cpunative/info_18: New test.\n+\t* gcc.target/aarch64/cpunative/native_cpu_18.c: New test.\n+\n+2022-10-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107107\n+\t* gcc.dg/pr107107.c: New testcase.\n+\n+2022-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/assume-4.c: New test.\n+\n+2022-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106654\n+\t* gcc.dg/attr-assume-1.c: New test.\n+\t* gcc.dg/attr-assume-2.c: New test.\n+\t* gcc.dg/attr-assume-3.c: New test.\n+\t* g++.dg/cpp2a/feat-cxx2a.C: Add colon to C++20 features\n+\tcomment, add C++20 attributes comment and move C++20\n+\tnew features after the attributes before them.\n+\t* g++.dg/cpp23/feat-cxx2b.C: Likewise.  Test\n+\t__has_cpp_attribute(assume).\n+\t* g++.dg/cpp23/attr-assume1.C: New test.\n+\t* g++.dg/cpp23/attr-assume2.C: New test.\n+\t* g++.dg/cpp23/attr-assume3.C: New test.\n+\t* g++.dg/cpp23/attr-assume4.C: New test.\n+\n 2022-10-05  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/107158"}, {"sha": "06240c13efcd664aee2872b2cd690acb6c790120", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/629d04d35d819bdc26c30d215bc4ea66a74af15b/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/629d04d35d819bdc26c30d215bc4ea66a74af15b/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=629d04d35d819bdc26c30d215bc4ea66a74af15b", "patch": "@@ -1,3 +1,71 @@\n+2022-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/arc/linux-unwind.h (arc_fallback_frame_state): Use\n+\tfs->regs.how[X] instead of fs->regs.reg[X].how.\n+\n+2022-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* unwind-dw2.h (REG_UNSAVED, REG_SAVED_OFFSET, REG_SAVED_REG,\n+\tREG_SAVED_EXP, REG_SAVED_VAL_OFFSET, REG_SAVED_VAL_EXP,\n+\tREG_UNDEFINED): New anonymous enum, moved from inside of\n+\tstruct frame_state_reg_info.\n+\t(struct frame_state_reg_info): Remove reg[].how element and the\n+\tanonymous enum there.  Add how element.\n+\t* unwind-dw2.c: Include stddef.h.\n+\t(uw_frame_state_for): Don't clear first\n+\toffsetof (_Unwind_FrameState, regs.how[0]) bytes of *fs.\n+\t(execute_cfa_program, __frame_state_for, uw_update_context_1,\n+\tuw_update_context): Use fs->regs.how[X] instead of fs->regs.reg[X].how\n+\tor fs.regs.how[X] instead of fs.regs.reg[X].how.\n+\t* config/sh/linux-unwind.h (sh_fallback_frame_state): Likewise.\n+\t* config/bfin/linux-unwind.h (bfin_fallback_frame_state): Likewise.\n+\t* config/pa/linux-unwind.h (pa32_fallback_frame_state): Likewise.\n+\t* config/pa/hpux-unwind.h (UPDATE_FS_FOR_SAR, UPDATE_FS_FOR_GR,\n+\tUPDATE_FS_FOR_FR, UPDATE_FS_FOR_PC, pa_fallback_frame_state):\n+\tLikewise.\n+\t* config/alpha/vms-unwind.h (alpha_vms_fallback_frame_state):\n+\tLikewise.\n+\t* config/alpha/linux-unwind.h (alpha_fallback_frame_state): Likewise.\n+\t* config/arc/linux-unwind.h (arc_fallback_frame_state,\n+\tarc_frob_update_context): Likewise.\n+\t* config/riscv/linux-unwind.h (riscv_fallback_frame_state): Likewise.\n+\t* config/nios2/linux-unwind.h (NIOS2_REG): Likewise.\n+\t* config/nds32/linux-unwind.h (NDS32_PUT_FS_REG): Likewise.\n+\t* config/s390/tpf-unwind.h (s390_fallback_frame_state): Likewise.\n+\t* config/s390/linux-unwind.h (s390_fallback_frame_state): Likewise.\n+\t* config/sparc/sol2-unwind.h (sparc64_frob_update_context,\n+\tMD_FALLBACK_FRAME_STATE_FOR): Likewise.\n+\t* config/sparc/linux-unwind.h (sparc64_fallback_frame_state,\n+\tsparc64_frob_update_context, sparc_fallback_frame_state): Likewise.\n+\t* config/i386/sol2-unwind.h (x86_64_fallback_frame_state,\n+\tx86_fallback_frame_state): Likewise.\n+\t* config/i386/w32-unwind.h (i386_w32_fallback_frame_state): Likewise.\n+\t* config/i386/linux-unwind.h (x86_64_fallback_frame_state,\n+\tx86_fallback_frame_state): Likewise.\n+\t* config/i386/freebsd-unwind.h (x86_64_freebsd_fallback_frame_state):\n+\tLikewise.\n+\t* config/i386/dragonfly-unwind.h\n+\t(x86_64_dragonfly_fallback_frame_state): Likewise.\n+\t* config/i386/gnu-unwind.h (x86_gnu_fallback_frame_state): Likewise.\n+\t* config/csky/linux-unwind.h (csky_fallback_frame_state): Likewise.\n+\t* config/aarch64/linux-unwind.h (aarch64_fallback_frame_state):\n+\tLikewise.\n+\t* config/aarch64/freebsd-unwind.h\n+\t(aarch64_freebsd_fallback_frame_state): Likewise.\n+\t* config/aarch64/aarch64-unwind.h (aarch64_frob_update_context):\n+\tLikewise.\n+\t* config/or1k/linux-unwind.h (or1k_fallback_frame_state): Likewise.\n+\t* config/mips/linux-unwind.h (mips_fallback_frame_state): Likewise.\n+\t* config/loongarch/linux-unwind.h (loongarch_fallback_frame_state):\n+\tLikewise.\n+\t* config/m68k/linux-unwind.h (m68k_fallback_frame_state): Likewise.\n+\t* config/xtensa/linux-unwind.h (xtensa_fallback_frame_state):\n+\tLikewise.\n+\t* config/rs6000/darwin-fallback.c (set_offset): Likewise.\n+\t* config/rs6000/aix-unwind.h (MD_FROB_UPDATE_CONTEXT): Likewise.\n+\t* config/rs6000/linux-unwind.h (ppc_fallback_frame_state): Likewise.\n+\t* config/rs6000/freebsd-unwind.h (frob_update_context): Likewise.\n+\n 2022-10-02  Olivier Hainque  <hainque@adacore.com>\n \n \t* config/t-vxworks (LIBGCC2_INCLUDE): Augment comment.  Move"}]}