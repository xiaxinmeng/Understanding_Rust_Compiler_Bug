{"sha": "6a4a5d954ba4d21559453c4a2bf5b95c5105982d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE0YTVkOTU0YmE0ZDIxNTU5NDUzYzRhMmJmNWI5NWM1MTA1OTgyZA==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "1999-04-10T17:18:08Z"}, "committer": {"name": "John Wehle", "email": "wehle@gcc.gnu.org", "date": "1999-04-10T17:18:08Z"}, "message": "i386.md (floatsisf2, [...]): Remove unused register constraints from the splitters.\n\n\t* i386.md (floatsisf2, floatdisf2, floatsidf2, floatdidf2,\n\tfloatsixf2, floatdixf2, movsicc, movhicc, movsfcc, movdfcc,\n\tmovxfcc, movdicc): Remove unused register constraints from\n\tthe splitters.\n\t* i386.md (fixuns_truncsfsi2, fixuns_truncdfsi2,\n\tfixuns_truncxfsi2): Delete.\n\t* reg-stack.c (delete_insn_for_stacker): Ensure that\n\tthe only side effects of a PARALLEL are clobbers.\n\t(subst_stack_regs): Handle subst_stack_regs_pat deleting\n\ta PARALLEL.\n\t* i386.md (extendsfdf2, extenddfxf2,\n\textendsfxf2): Rewrite using a splitter.\n\t* i386.c (output_op_from_reg): Remove.\n\t* i386.h: Likewise.\n\nFrom-SVN: r26338", "tree": {"sha": "e7defba0ed613c69d9f7f05379c456447918777f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7defba0ed613c69d9f7f05379c456447918777f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a4a5d954ba4d21559453c4a2bf5b95c5105982d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4a5d954ba4d21559453c4a2bf5b95c5105982d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a4a5d954ba4d21559453c4a2bf5b95c5105982d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4a5d954ba4d21559453c4a2bf5b95c5105982d/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d6470dd07edf86bea7fa918f483004d0b3a0c7c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6470dd07edf86bea7fa918f483004d0b3a0c7c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6470dd07edf86bea7fa918f483004d0b3a0c7c9"}], "stats": {"total": 594, "additions": 335, "deletions": 259}, "files": [{"sha": "bb6d884c08bec693ef8dcf7d8bb7e89df9e33b73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4a5d954ba4d21559453c4a2bf5b95c5105982d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4a5d954ba4d21559453c4a2bf5b95c5105982d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a4a5d954ba4d21559453c4a2bf5b95c5105982d", "patch": "@@ -1,3 +1,22 @@\n+Sat Apr 10 20:09:55 EDT 1999  John Wehle  (john@feith.com)\n+\n+\t* i386.md (floatsisf2, floatdisf2, floatsidf2, floatdidf2,\n+\tfloatsixf2, floatdixf2, movsicc, movhicc, movsfcc, movdfcc,\n+\tmovxfcc, movdicc): Remove unused register constraints from\n+\tthe splitters.\n+\n+\t* i386.md (fixuns_truncsfsi2, fixuns_truncdfsi2,\n+\tfixuns_truncxfsi2): Delete.\n+\n+\t* reg-stack.c (delete_insn_for_stacker): Ensure that\n+\tthe only side effects of a PARALLEL are clobbers.\n+\t(subst_stack_regs): Handle subst_stack_regs_pat deleting\n+\ta PARALLEL.\n+\t* i386.md (extendsfdf2, extenddfxf2,\n+\textendsfxf2): Rewrite using a splitter.\n+\t* i386.c (output_op_from_reg): Remove.\n+\t* i386.h: Likewise.\n+\n Sat Apr 10 13:09:18 1999  Nick Clifton  <nickc@cygnus.com>\n \n \t* config/arm/arm.c (di_operand): Allow SUBREGs as well."}, {"sha": "ab5423555067d66ee0a5dd4fb3d909bcde9b1905", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4a5d954ba4d21559453c4a2bf5b95c5105982d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4a5d954ba4d21559453c4a2bf5b95c5105982d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6a4a5d954ba4d21559453c4a2bf5b95c5105982d", "patch": "@@ -854,54 +854,6 @@ function_arg_partial_nregs (cum, mode, type, named)\n   return 0;\n }\n \f\n-/* Output an insn whose source is a 386 integer register.  SRC is the\n-   rtx for the register, and TEMPLATE is the op-code template.  SRC may\n-   be either SImode or DImode.\n-\n-   The template will be output with operands[0] as SRC, and operands[1]\n-   as a pointer to the top of the 386 stack.  So a call from floatsidf2\n-   would look like this:\n-\n-      output_op_from_reg (operands[1], AS1 (fild%z0,%1));\n-\n-   where %z0 corresponds to the caller's operands[1], and is used to\n-   emit the proper size suffix.\n-\n-   ??? Extend this to handle HImode - a 387 can load and store HImode\n-   values directly. */\n-\n-void\n-output_op_from_reg (src, template)\n-     rtx src;\n-     char *template;\n-{\n-  rtx xops[4];\n-  int size = GET_MODE_SIZE (GET_MODE (src));\n-\n-  xops[0] = src;\n-  xops[1] = AT_SP (Pmode);\n-  xops[2] = GEN_INT (size);\n-  xops[3] = stack_pointer_rtx;\n-\n-  if (size > UNITS_PER_WORD)\n-    {\n-      rtx high;\n-\n-      if (size > 2 * UNITS_PER_WORD)\n-\t{\n-\t  high = gen_rtx_REG (SImode, REGNO (src) + 2);\n-\t  output_asm_insn (AS1 (push%L0,%0), &high);\n-\t}\n-\n-      high = gen_rtx_REG (SImode, REGNO (src) + 1);\n-      output_asm_insn (AS1 (push%L0,%0), &high);\n-    }\n-\n-  output_asm_insn (AS1 (push%L0,%0), &src);\n-  output_asm_insn (template, xops);\n-  output_asm_insn (AS2 (add%L3,%2,%3), xops);\n-}\n-\f\n /* Output an insn to pop an value from the 387 top-of-stack to 386\n    register DEST. The 387 register stack is popped if DIES is true.  If\n    the mode of DEST is an integer mode, a `fist' integer store is done,"}, {"sha": "2bbf94e24f1dc01a38b040c85491105d354a7db5", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4a5d954ba4d21559453c4a2bf5b95c5105982d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4a5d954ba4d21559453c4a2bf5b95c5105982d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6a4a5d954ba4d21559453c4a2bf5b95c5105982d", "patch": "@@ -2713,7 +2713,6 @@ extern void function_arg_advance ();\n extern struct rtx_def *function_arg ();\n extern int function_arg_partial_nregs ();\n extern char *output_strlen_unroll ();\n-extern void output_op_from_reg ();\n extern void output_to_reg ();\n extern char *singlemove_string ();\n extern char *output_move_double ();"}, {"sha": "8eade3ebb58ba498804bd3cba5c12bcacee0f968", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 300, "deletions": 208, "changes": 508, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4a5d954ba4d21559453c4a2bf5b95c5105982d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4a5d954ba4d21559453c4a2bf5b95c5105982d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6a4a5d954ba4d21559453c4a2bf5b95c5105982d", "patch": "@@ -2171,110 +2171,271 @@\n \f\n ;; Conversions between float and double.\n \n-(define_insn \"extendsfdf2\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=fm,f\")\n-\t(float_extend:DF\n-\t (match_operand:SF 1 \"nonimmediate_operand\" \"f,fm\")))]\n+(define_expand \"extendsfdf2\"\n+  [(parallel [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n+\t\t   (float_extend:DF\n+\t\t     (match_operand:SF 1 \"nonimmediate_operand\" \"\")))\n+     (clobber (match_dup 2))\n+     (clobber (match_dup 3))])]\n   \"TARGET_80387\"\n+  \"\n+{\n+  if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n+    operands[1] = force_reg (SFmode, operands[1]);\n+\n+  operands[2] = assign_386_stack_local (SFmode, 0);\n+  operands[3] = assign_386_stack_local (DFmode, 0);\n+}\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,m,!f,!*r\")\n+\t(float_extend:DF\n+\t  (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f,*r,f\")))\n+   (clobber (match_operand:SF 2 \"memory_operand\" \"m,m,m,m\"))\n+   (clobber (match_operand:DF 3 \"memory_operand\" \"m,m,m,o\"))]\n+  \"TARGET_80387 && (GET_CODE (operands[0]) != MEM\n+\t\t    || GET_CODE (operands[1]) != MEM)\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(float_extend:DF (match_operand:SF 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:SF 2 \"memory_operand\" \"\"))\n+   (clobber (match_operand:DF 3 \"memory_operand\" \"\"))]\n+  \"TARGET_80387 && reload_completed && NON_STACK_REG_P (operands[1])\"\n+  [(set (match_dup 2)\n+\t(match_dup 1))\n+   (set (match_dup 0)\n+\t(float_extend:DF (match_dup 2)))]\n+  \"\")\n+\n+(define_split\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(float_extend:DF (match_operand:SF 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:SF 2 \"memory_operand\" \"\"))\n+   (clobber (match_operand:DF 3 \"memory_operand\" \"\"))]\n+  \"TARGET_80387 && reload_completed && NON_STACK_REG_P (operands[0])\"\n+  [(set (match_dup 3)\n+\t(float_extend:DF (match_dup 1)))\n+   (set (match_dup 0)\n+\t(match_dup 3))]\n+  \"\")\n+\n+(define_split\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n+\t(float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"\")))\n+   (clobber (match_operand:SF 2 \"memory_operand\" \"\"))\n+   (clobber (match_operand:DF 3 \"memory_operand\" \"\"))]\n+  \"TARGET_80387 && reload_completed\"\n+  [(set (match_dup 0)\n+\t(float_extend:DF (match_dup 1)))]\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,m\")\n+\t(float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f\")))]\n+  \"TARGET_80387 && (GET_CODE (operands[0]) != MEM\n+\t\t    || GET_CODE (operands[1]) != MEM)\"\n   \"*\n {\n   int stack_top_dies = find_regno_note (insn, REG_DEAD, FIRST_STACK_REG) != 0;\n \n-  if (NON_STACK_REG_P (operands[1]))\n-    {\n-      output_op_from_reg (operands[1], AS1 (fld%z0,%y1));\n-      RET;\n-    }\n+  if (! STACK_TOP_P (operands[0]) && ! STACK_TOP_P (operands[1]))\n+    abort ();\n \n-  if (NON_STACK_REG_P (operands[0]))\n-    {\n-      output_to_reg (operands[0], stack_top_dies, 0);\n-      RET;\n-    }\n+  if (STACK_TOP_P (operands[0]) && STACK_TOP_P (operands[1]))\n+    return \\\"\\\";\n \n   if (STACK_TOP_P (operands[0]))\n     return AS1 (fld%z1,%y1);\n \n-  if (GET_CODE (operands[0]) == MEM)\n-    {\n-      if (stack_top_dies)\n-\treturn AS1 (fstp%z0,%y0);\n-      else\n-        return AS1 (fst%z0,%y0);\n-    }\n+  if (stack_top_dies)\n+    return AS1 (fstp%z0,%y0);\n+  else\n+    return AS1 (fst%z0,%y0);\n+}\"\n+  [(set_attr \"type\" \"fld,fpop\")])\n+\n+(define_expand \"extenddfxf2\"\n+  [(parallel [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n+\t\t   (float_extend:XF\n+\t\t     (match_operand:DF 1 \"nonimmediate_operand\" \"\")))\n+     (clobber (match_dup 2))\n+     (clobber (match_dup 3))])]\n+  \"TARGET_80387\"\n+  \"\n+{\n+  if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n+    operands[1] = force_reg (DFmode, operands[1]);\n \n-  abort ();\n+  operands[2] = assign_386_stack_local (DFmode, 0);\n+  operands[3] = assign_386_stack_local (XFmode, 0);\n }\")\n \n-(define_insn \"extenddfxf2\"\n-  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=fm,f,f,!*r\")\n+(define_insn \"\"\n+  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m,!f,!*r\")\n \t(float_extend:XF\n-\t (match_operand:DF 1 \"nonimmediate_operand\" \"f,fm,!*r,f\")))]\n-  \"TARGET_80387\"\n+\t  (match_operand:DF 1 \"nonimmediate_operand\" \"fm,f,*r,f\")))\n+   (clobber (match_operand:DF 2 \"memory_operand\" \"m,m,o,m\"))\n+   (clobber (match_operand:XF 3 \"memory_operand\" \"m,m,m,o\"))]\n+  \"TARGET_80387 && (GET_CODE (operands[0]) != MEM\n+\t\t    || GET_CODE (operands[1]) != MEM)\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t(float_extend:XF (match_operand:DF 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:DF 2 \"memory_operand\" \"\"))\n+   (clobber (match_operand:XF 3 \"memory_operand\" \"\"))]\n+  \"TARGET_80387 && reload_completed && NON_STACK_REG_P (operands[1])\"\n+  [(set (match_dup 2)\n+\t(match_dup 1))\n+   (set (match_dup 0)\n+\t(float_extend:XF (match_dup 2)))]\n+  \"\")\n+\n+(define_split\n+  [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t(float_extend:XF (match_operand:DF 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:DF 2 \"memory_operand\" \"\"))\n+   (clobber (match_operand:XF 3 \"memory_operand\" \"\"))]\n+  \"TARGET_80387 && reload_completed && NON_STACK_REG_P (operands[0])\"\n+  [(set (match_dup 3)\n+\t(float_extend:XF (match_dup 1)))\n+   (set (match_dup 0)\n+\t(match_dup 3))]\n+  \"\")\n+\n+(define_split\n+  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n+\t(float_extend:XF (match_operand:DF 1 \"nonimmediate_operand\" \"\")))\n+   (clobber (match_operand:DF 2 \"memory_operand\" \"\"))\n+   (clobber (match_operand:XF 3 \"memory_operand\" \"\"))]\n+  \"TARGET_80387 && reload_completed\"\n+  [(set (match_dup 0)\n+\t(float_extend:XF (match_dup 1)))]\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m\")\n+\t(float_extend:XF (match_operand:DF 1 \"nonimmediate_operand\" \"fm,f\")))]\n+  \"TARGET_80387 && (GET_CODE (operands[0]) != MEM\n+\t\t    || GET_CODE (operands[1]) != MEM)\"\n   \"*\n {\n   int stack_top_dies = find_regno_note (insn, REG_DEAD, FIRST_STACK_REG) != 0;\n \n-  if (NON_STACK_REG_P (operands[1]))\n-    {\n-      output_op_from_reg (operands[1], AS1 (fld%z0,%y1));\n-      RET;\n-    }\n+  if (! STACK_TOP_P (operands[0]) && ! STACK_TOP_P (operands[1]))\n+    abort ();\n \n-  if (NON_STACK_REG_P (operands[0]))\n-    {\n-      output_to_reg (operands[0], stack_top_dies, 0);\n-      RET;\n-    }\n+  if (STACK_TOP_P (operands[0]) && STACK_TOP_P (operands[1]))\n+    return \\\"\\\";\n \n   if (STACK_TOP_P (operands[0]))\n     return AS1 (fld%z1,%y1);\n \n-  if (GET_CODE (operands[0]) == MEM)\n-    {\n-      output_asm_insn (AS1 (fstp%z0,%y0), operands);\n-      if (! stack_top_dies)\n-\treturn AS1 (fld%z0,%y0);\n-      RET;\n-    }\n+  if (stack_top_dies || GET_CODE (operands[0]) == MEM)\n+    output_asm_insn (AS1 (fstp%z0,%y0), operands);\n+  else\n+    return AS1 (fst%z0,%y0);\n \n-  abort ();\n+  if (! stack_top_dies)\n+    return AS1 (fld%z0,%y0);\n+\n+  return \\\"\\\";\n+}\"\n+  [(set_attr \"type\" \"fld,fpop\")])\n+\n+(define_expand \"extendsfxf2\"\n+  [(parallel [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n+\t\t   (float_extend:XF\n+\t\t     (match_operand:SF 1 \"nonimmediate_operand\" \"\")))\n+     (clobber (match_dup 2))\n+     (clobber (match_dup 3))])]\n+  \"TARGET_80387\"\n+  \"\n+{\n+  if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n+    operands[1] = force_reg (SFmode, operands[1]);\n+\n+  operands[2] = assign_386_stack_local (SFmode, 0);\n+  operands[3] = assign_386_stack_local (XFmode, 0);\n }\")\n \n-(define_insn \"extendsfxf2\"\n-  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=fm,f,f,!*r\")\n+(define_insn \"\"\n+  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m,!f,!*r\")\n \t(float_extend:XF\n-\t (match_operand:SF 1 \"nonimmediate_operand\" \"f,fm,!*r,f\")))]\n-  \"TARGET_80387\"\n+\t  (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f,*r,f\")))\n+   (clobber (match_operand:SF 2 \"memory_operand\" \"m,m,m,m\"))\n+   (clobber (match_operand:XF 3 \"memory_operand\" \"m,m,m,o\"))]\n+  \"TARGET_80387 && (GET_CODE (operands[0]) != MEM\n+\t\t    || GET_CODE (operands[1]) != MEM)\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t(float_extend:XF (match_operand:SF 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:SF 2 \"memory_operand\" \"\"))\n+   (clobber (match_operand:XF 3 \"memory_operand\" \"\"))]\n+  \"TARGET_80387 && reload_completed && NON_STACK_REG_P (operands[1])\"\n+  [(set (match_dup 2)\n+\t(match_dup 1))\n+   (set (match_dup 0)\n+\t(float_extend:XF (match_dup 2)))]\n+  \"\")\n+\n+(define_split\n+  [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t(float_extend:XF (match_operand:SF 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:SF 2 \"memory_operand\" \"\"))\n+   (clobber (match_operand:XF 3 \"memory_operand\" \"\"))]\n+  \"TARGET_80387 && reload_completed && NON_STACK_REG_P (operands[0])\"\n+  [(set (match_dup 3)\n+\t(float_extend:XF (match_dup 1)))\n+   (set (match_dup 0)\n+\t(match_dup 3))]\n+  \"\")\n+\n+(define_split\n+  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n+\t(float_extend:XF (match_operand:SF 1 \"nonimmediate_operand\" \"\")))\n+   (clobber (match_operand:SF 2 \"memory_operand\" \"\"))\n+   (clobber (match_operand:XF 3 \"memory_operand\" \"\"))]\n+  \"TARGET_80387 && reload_completed\"\n+  [(set (match_dup 0)\n+\t(float_extend:XF (match_dup 1)))]\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m\")\n+\t(float_extend:XF\n+\t (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f\")))]\n+  \"TARGET_80387 && (GET_CODE (operands[0]) != MEM\n+\t\t    || GET_CODE (operands[1]) != MEM)\"\n   \"*\n {\n   int stack_top_dies = find_regno_note (insn, REG_DEAD, FIRST_STACK_REG) != 0;\n \n-  if (NON_STACK_REG_P (operands[1]))\n-    {\n-      output_op_from_reg (operands[1], AS1 (fld%z0,%y1));\n-      RET;\n-    }\n+  if (! STACK_TOP_P (operands[0]) && ! STACK_TOP_P (operands[1]))\n+    abort ();\n \n-  if (NON_STACK_REG_P (operands[0]))\n-    {\n-      output_to_reg (operands[0], stack_top_dies, 0);\n-      RET;\n-    }\n+  if (STACK_TOP_P (operands[0]) && STACK_TOP_P (operands[1]))\n+    return \\\"\\\";\n \n   if (STACK_TOP_P (operands[0]))\n     return AS1 (fld%z1,%y1);\n \n-  if (GET_CODE (operands[0]) == MEM)\n-    {\n-      output_asm_insn (AS1 (fstp%z0,%y0), operands);\n-      if (! stack_top_dies)\n-\treturn AS1 (fld%z0,%y0);\n-      RET;\n-    }\n+  if (stack_top_dies || GET_CODE (operands[0]) == MEM)\n+    output_asm_insn (AS1 (fstp%z0,%y0), operands);\n+  else\n+    return AS1 (fst%z0,%y0);\n \n-  abort ();\n-}\")\n+  if (! stack_top_dies)\n+    return AS1 (fld%z0,%y0);\n+\n+  return \\\"\\\";\n+}\"\n+  [(set_attr \"type\" \"fld,fpop\")])\n \n (define_expand \"truncdfsf2\"\n   [(parallel [(set (match_operand:SF 0 \"nonimmediate_operand\" \"\")\n@@ -2502,75 +2663,6 @@\n }\"\n   [(set_attr \"type\" \"fpop\")])\n \f\n-;; The 387 requires that the stack top dies after converting to DImode.\n-\n-;; Represent an unsigned conversion from SImode to MODE_FLOAT by first\n-;; doing a signed conversion to DImode, and then taking just the low\n-;; part.\n-\n-(define_expand \"fixuns_truncxfsi2\"\n-  [(set (match_dup 4)\n-\t(match_operand:XF 1 \"register_operand\" \"\"))\n-   (parallel [(set (match_dup 2)\n-\t\t   (fix:DI (fix:XF (match_dup 4))))\n-\t      (clobber (match_dup 4))\n-\t      (clobber (match_dup 5))\n-\t      (clobber (match_dup 6))\n-\t      (clobber (match_scratch:SI 7 \"\"))])\n-   (set (match_operand:SI 0 \"general_operand\" \"\")\n-\t(match_dup 3))]\n-  \"TARGET_80387\"\n-  \"\n-{\n-  operands[2] = gen_reg_rtx (DImode);\n-  operands[3] = gen_lowpart (SImode, operands[2]);\n-  operands[4] = gen_reg_rtx (XFmode);\n-  operands[5] = (rtx) assign_386_stack_local (SImode, 0);\n-  operands[6] = (rtx) assign_386_stack_local (DImode, 1);\n-}\")\n-\n-(define_expand \"fixuns_truncdfsi2\"\n-  [(set (match_dup 4)\n-\t(match_operand:DF 1 \"register_operand\" \"\"))\n-   (parallel [(set (match_dup 2)\n-\t\t   (fix:DI (fix:DF (match_dup 4))))\n-\t      (clobber (match_dup 4))\n-\t      (clobber (match_dup 5))\n-\t      (clobber (match_dup 6))\n-\t      (clobber (match_scratch:SI 7 \"\"))])\n-   (set (match_operand:SI 0 \"general_operand\" \"\")\n-\t(match_dup 3))]\n-  \"TARGET_80387\"\n-  \"\n-{\n-  operands[2] = gen_reg_rtx (DImode);\n-  operands[3] = gen_lowpart (SImode, operands[2]);\n-  operands[4] = gen_reg_rtx (DFmode);\n-  operands[5] = (rtx) assign_386_stack_local (SImode, 0);\n-  operands[6] = (rtx) assign_386_stack_local (DImode, 1);\n-}\")\n-\n-(define_expand \"fixuns_truncsfsi2\"\n-  [(set (match_dup 4)\n-\t(match_operand:SF 1 \"register_operand\" \"\"))\n-   (parallel [(set (match_dup 2)\n-\t\t   (fix:DI (fix:SF (match_dup 4))))\n-\t      (clobber (match_dup 4))\n-\t      (clobber (match_dup 5))\n-\t      (clobber (match_dup 6))\n-\t      (clobber (match_scratch:SI 7 \"\"))])\n-   (set (match_operand:SI 0 \"general_operand\" \"\")\n-\t(match_dup 3))]\n-  \"TARGET_80387\"\n-  \"\n-{\n-  operands[2] = gen_reg_rtx (DImode);\n-  operands[3] = gen_lowpart (SImode, operands[2]);\n-  operands[4] = gen_reg_rtx (SFmode);\n-  operands[5] = (rtx) assign_386_stack_local (SImode, 0);\n-  operands[6] = (rtx) assign_386_stack_local (DImode, 1);\n-}\")\n-\n ;; Signed conversion to DImode.\n \n (define_expand \"fix_truncxfdi2\"\n@@ -2749,18 +2841,18 @@\n   \"#\")\n \n (define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(float:SF (match_operand:SI 1 \"memory_operand\" \"m\")))\n-   (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))]\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(float:SF (match_operand:SI 1 \"memory_operand\" \"\")))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387 && reload_completed\"\n   [(set (match_dup 0)\n \t(float:SF (match_dup 1)))]\n   \"\")\n \n (define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(float:SF (match_operand:SI 1 \"register_operand\" \"r\")))\n-   (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))]\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(float:SF (match_operand:SI 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387 && reload_completed\"\n   [(set (match_dup 2)\n \t(match_dup 1))\n@@ -2790,18 +2882,18 @@\n   \"#\")\n \n (define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(float:SF (match_operand:DI 1 \"memory_operand\" \"m\")))\n-   (clobber (match_operand:DI 2 \"memory_operand\" \"m\"))]\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(float:SF (match_operand:DI 1 \"memory_operand\" \"\")))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387 && reload_completed\"\n   [(set (match_dup 0)\n \t(float:SF (match_dup 1)))]\n   \"\")\n \n (define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(float:SF (match_operand:DI 1 \"register_operand\" \"r\")))\n-   (clobber (match_operand:DI 2 \"memory_operand\" \"o\"))]\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(float:SF (match_operand:DI 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387 && reload_completed\"\n   [(set (match_dup 2)\n \t(match_dup 1))\n@@ -2831,18 +2923,18 @@\n   \"#\")\n \n (define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(float:DF (match_operand:SI 1 \"memory_operand\" \"m\")))\n-   (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(float:DF (match_operand:SI 1 \"memory_operand\" \"\")))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387 && reload_completed\"\n   [(set (match_dup 0)\n \t(float:DF (match_dup 1)))]\n   \"\")\n \n (define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(float:DF (match_operand:SI 1 \"register_operand\" \"r\")))\n-   (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(float:DF (match_operand:SI 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387 && reload_completed\"\n   [(set (match_dup 2)\n \t(match_dup 1))\n@@ -2872,18 +2964,18 @@\n   \"#\")\n \n (define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(float:DF (match_operand:DI 1 \"memory_operand\" \"m\")))\n-   (clobber (match_operand:DI 2 \"memory_operand\" \"m\"))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(float:DF (match_operand:DI 1 \"memory_operand\" \"\")))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387 && reload_completed\"\n   [(set (match_dup 0)\n \t(float:DF (match_dup 1)))]\n   \"\")\n \n (define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(float:DF (match_operand:DI 1 \"register_operand\" \"r\")))\n-   (clobber (match_operand:DI 2 \"memory_operand\" \"o\"))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(float:DF (match_operand:DI 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387 && reload_completed\"\n   [(set (match_dup 2)\n \t(match_dup 1))\n@@ -2913,18 +3005,18 @@\n   \"#\")\n \n (define_split\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(float:XF (match_operand:SI 1 \"memory_operand\" \"m\")))\n-   (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))]\n+  [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t(float:XF (match_operand:SI 1 \"memory_operand\" \"\")))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387 && reload_completed\"\n   [(set (match_dup 0)\n \t(float:XF (match_dup 1)))]\n   \"\")\n \n (define_split\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(float:XF (match_operand:SI 1 \"register_operand\" \"r\")))\n-   (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))]\n+  [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t(float:XF (match_operand:SI 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:SI 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387 && reload_completed\"\n   [(set (match_dup 2)\n \t(match_dup 1))\n@@ -2954,18 +3046,18 @@\n   \"#\")\n \n (define_split\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(float:XF (match_operand:DI 1 \"memory_operand\" \"m\")))\n-   (clobber (match_operand:DI 2 \"memory_operand\" \"m\"))]\n+  [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t(float:XF (match_operand:DI 1 \"memory_operand\" \"\")))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387 && reload_completed\"\n   [(set (match_dup 0)\n \t(float:XF (match_dup 1)))]\n   \"\")\n \n (define_split\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(float:XF (match_operand:DI 1 \"register_operand\" \"r\")))\n-   (clobber (match_operand:DI 2 \"memory_operand\" \"o\"))]\n+  [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t(float:XF (match_operand:DI 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387 && reload_completed\"\n   [(set (match_dup 2)\n \t(match_dup 1))\n@@ -7208,12 +7300,12 @@ byte_xor_operation:\n   \"#\")\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(if_then_else:SI (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (const_int 0)])\n-\t\t      (match_operand:SI 3 \"nonimmediate_operand\" \"rm,0\")\n-\t\t      (match_operand:SI 4 \"nonimmediate_operand\" \"0,rm\")))]\n+\t\t      (match_operand:SI 3 \"nonimmediate_operand\" \"\")\n+\t\t      (match_operand:SI 4 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0)\n \t(match_dup 2))\n@@ -7223,12 +7315,12 @@ byte_xor_operation:\n   \"\")\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(if_then_else:SI (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (match_operand 3 \"general_operand\" \"\")])\n-\t\t      (match_operand:SI 4 \"nonimmediate_operand\" \"rm,0\")\n-\t\t      (match_operand:SI 5 \"nonimmediate_operand\" \"0,rm\")))]\n+\t\t      (match_operand:SI 4 \"nonimmediate_operand\" \"\")\n+\t\t      (match_operand:SI 5 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0) (compare (match_dup 2) (match_dup 3)))\n    (set (match_dup 0)\n@@ -7282,12 +7374,12 @@ byte_xor_operation:\n   \"#\")\n \n (define_split\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n \t(if_then_else:HI (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (const_int 0)])\n-\t\t      (match_operand:HI 3 \"nonimmediate_operand\" \"rm,0\")\n-\t\t      (match_operand:HI 4 \"nonimmediate_operand\" \"0,rm\")))]\n+\t\t      (match_operand:HI 3 \"nonimmediate_operand\" \"\")\n+\t\t      (match_operand:HI 4 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0)\n \t(match_dup 2))\n@@ -7297,12 +7389,12 @@ byte_xor_operation:\n   \"\")\n \n (define_split\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n \t(if_then_else:HI (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (match_operand 3 \"general_operand\" \"\")])\n-\t\t      (match_operand:HI 4 \"nonimmediate_operand\" \"rm,0\")\n-\t\t      (match_operand:HI 5 \"nonimmediate_operand\" \"0,rm\")))]\n+\t\t      (match_operand:HI 4 \"nonimmediate_operand\" \"\")\n+\t\t      (match_operand:HI 5 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0)\n \t(compare (match_dup 2) (match_dup 3)))\n@@ -7385,12 +7477,12 @@ byte_xor_operation:\n   \"#\")\n \n (define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t(if_then_else:SF (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (const_int 0)])\n-\t\t      (match_operand:SF 3 \"register_operand\" \"f,0\")\n-\t\t      (match_operand:SF 4 \"register_operand\" \"0,f\")))]\n+\t\t      (match_operand:SF 3 \"register_operand\" \"\")\n+\t\t      (match_operand:SF 4 \"register_operand\" \"\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0)\n \t(match_dup 2))\n@@ -7400,12 +7492,12 @@ byte_xor_operation:\n   \"\")\n \n (define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t(if_then_else:SF (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (match_operand 3 \"general_operand\" \"\")])\n-\t\t      (match_operand:SF 4 \"register_operand\" \"f,0\")\n-\t\t      (match_operand:SF 5 \"register_operand\" \"0,f\")))]\n+\t\t      (match_operand:SF 4 \"register_operand\" \"\")\n+\t\t      (match_operand:SF 5 \"register_operand\" \"\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0) (compare (match_dup 2) (match_dup 3)))\n    (set (match_dup 0)\n@@ -7487,12 +7579,12 @@ byte_xor_operation:\n   \"#\")\n \n (define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(if_then_else:DF (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (const_int 0)])\n-\t\t      (match_operand:DF 3 \"register_operand\" \"f,0\")\n-\t\t      (match_operand:DF 4 \"register_operand\" \"0,f\")))]\n+\t\t      (match_operand:DF 3 \"register_operand\" \"\")\n+\t\t      (match_operand:DF 4 \"register_operand\" \"\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0)\n \t(match_dup 2))\n@@ -7502,12 +7594,12 @@ byte_xor_operation:\n   \"\")\n \n (define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(if_then_else:DF (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (match_operand 3 \"general_operand\" \"\")])\n-\t\t      (match_operand:DF 4 \"register_operand\" \"f,0\")\n-\t\t      (match_operand:DF 5 \"register_operand\" \"0,f\")))]\n+\t\t      (match_operand:DF 4 \"register_operand\" \"\")\n+\t\t      (match_operand:DF 5 \"register_operand\" \"\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0) (compare (match_dup 2) (match_dup 3)))\n    (set (match_dup 0)\n@@ -7589,12 +7681,12 @@ byte_xor_operation:\n   \"#\")\n \n (define_split\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n+  [(set (match_operand:XF 0 \"register_operand\" \"\")\n \t(if_then_else:XF (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (const_int 0)])\n-\t\t      (match_operand:XF 3 \"register_operand\" \"f,0\")\n-\t\t      (match_operand:XF 4 \"register_operand\" \"0,f\")))]\n+\t\t      (match_operand:XF 3 \"register_operand\" \"\")\n+\t\t      (match_operand:XF 4 \"register_operand\" \"\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0)\n \t(match_dup 2))\n@@ -7604,12 +7696,12 @@ byte_xor_operation:\n   \"\")\n \n (define_split\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n+  [(set (match_operand:XF 0 \"register_operand\" \"\")\n \t(if_then_else:XF (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (match_operand 3 \"general_operand\" \"\")])\n-\t\t      (match_operand:XF 4 \"register_operand\" \"f,0\")\n-\t\t      (match_operand:XF 5 \"register_operand\" \"0,f\")))]\n+\t\t      (match_operand:XF 4 \"register_operand\" \"\")\n+\t\t      (match_operand:XF 5 \"register_operand\" \"\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0) (compare (match_dup 2) (match_dup 3)))\n    (set (match_dup 0)\n@@ -7663,12 +7755,12 @@ byte_xor_operation:\n   \"#\")\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"=&r,&r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(if_then_else:DI (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (const_int 0)])\n-\t\t      (match_operand:DI 3 \"nonimmediate_operand\" \"ro,0\")\n-\t\t      (match_operand:DI 4 \"nonimmediate_operand\" \"0,ro\")))]\n+\t\t      (match_operand:DI 3 \"nonimmediate_operand\" \"\")\n+\t\t      (match_operand:DI 4 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0)\n \t(match_dup 2))\n@@ -7683,12 +7775,12 @@ byte_xor_operation:\n    split_di (&operands[4], 1, &operands[9], &operands[10]);\")\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"=&r,&r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(if_then_else:DI (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(match_operand 2 \"nonimmediate_operand\" \"\")\n \t\t\t\t (match_operand 3 \"general_operand\" \"\")])\n-\t\t      (match_operand:DI 4 \"nonimmediate_operand\" \"ro,0\")\n-\t\t      (match_operand:DI 5 \"nonimmediate_operand\" \"0,ro\")))]\n+\t\t      (match_operand:DI 4 \"nonimmediate_operand\" \"\")\n+\t\t      (match_operand:DI 5 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_CMOVE && reload_completed\"\n   [(set (cc0) (compare (match_dup 2) (match_dup 3)))\n    (set (match_dup 6)"}, {"sha": "fe554a031c9a2363f203fb337b3c156d11dc15f5", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4a5d954ba4d21559453c4a2bf5b95c5105982d/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4a5d954ba4d21559453c4a2bf5b95c5105982d/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=6a4a5d954ba4d21559453c4a2bf5b95c5105982d", "patch": "@@ -1405,6 +1405,14 @@ static void\n delete_insn_for_stacker (insn)\n      rtx insn;\n {\n+  int i;\n+\n+  /* Ensure that the side effects were clobbers when deleting a PARALLEL.  */\n+  if (GET_CODE (PATTERN (insn)) == PARALLEL)\n+    for (i = 1; i < XVECLEN (PATTERN (insn), 0); i++)\n+      if (GET_CODE (XVECEXP (PATTERN (insn), 0, i)) != CLOBBER)\n+\tabort ();\n+\n   PUT_CODE (insn, NOTE);\n   NOTE_LINE_NUMBER (insn) = NOTE_INSN_DELETED;\n   NOTE_SOURCE_FILE (insn) = 0;\n@@ -2478,8 +2486,14 @@ subst_stack_regs (insn, regstack)\n \tfor (i = 0; i < XVECLEN (PATTERN (insn), 0); i++)\n \t  {\n \t    if (stack_regs_mentioned_p (XVECEXP (PATTERN (insn), 0, i)))\n-\t      subst_stack_regs_pat (insn, regstack,\n-\t\t\t\t    XVECEXP (PATTERN (insn), 0, i));\n+\t      {\n+\t\tsubst_stack_regs_pat (insn, regstack,\n+\t\t\t\t      XVECEXP (PATTERN (insn), 0, i));\n+\n+\t\t/* subst_stack_regs_pat may have deleted a no-op insn.  */\n+\t\tif (GET_CODE (insn) == NOTE)\n+\t\t  break;\n+\t      }\n \t  }\n       else\n \tsubst_stack_regs_pat (insn, regstack, PATTERN (insn));"}]}