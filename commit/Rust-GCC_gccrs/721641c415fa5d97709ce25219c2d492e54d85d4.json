{"sha": "721641c415fa5d97709ce25219c2d492e54d85d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzIxNjQxYzQxNWZhNWQ5NzcwOWNlMjUyMTljMmQ0OTJlNTRkODVkNA==", "commit": {"author": {"name": "Johannes Singler", "email": "singler@ira.uka.de", "date": "2009-09-16T14:53:58Z"}, "committer": {"name": "Johannes Singler", "email": "singler@gcc.gnu.org", "date": "2009-09-16T14:53:58Z"}, "message": "base.h: Correct some comments accidentally changed during uglification.\n\n2009-09-16  Johannes Singler  <singler@ira.uka.de>\n\n        * include/parallel/base.h: Correct some comments accidentally changed\n        during uglification.\n        * include/parallel/find.h: Likewise.\n        * include/parallel/find_selectors.h: Likewise.\n        * include/parallel/multiway_merge.h: Likewise.\n        * include/parallel/multiway_mergesort.h: Likewise.\n        * include/parallel/partial_sum.h: Likewise.\n        * include/parallel/partition.h: Likewise.\n        * include/parallel/queue.h: Likewise.\n        * include/parallel/random_shuffle.h: Likewise.\n        * include/parallel/settings.h: Likewise.\n        * include/parallel/sort.h: Likewise.\n        * include/parallel/tags.h: Likewise.\n        * include/parallel/workstealing.h: Likewise.\n\nFrom-SVN: r151756", "tree": {"sha": "95490b5708aed3faaa4fb6b88c0e921d2cd52581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95490b5708aed3faaa4fb6b88c0e921d2cd52581"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/721641c415fa5d97709ce25219c2d492e54d85d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/721641c415fa5d97709ce25219c2d492e54d85d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/721641c415fa5d97709ce25219c2d492e54d85d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/721641c415fa5d97709ce25219c2d492e54d85d4/comments", "author": null, "committer": null, "parents": [{"sha": "839f286453b6f62a108eec6b76042f7289db0125", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839f286453b6f62a108eec6b76042f7289db0125", "html_url": "https://github.com/Rust-GCC/gccrs/commit/839f286453b6f62a108eec6b76042f7289db0125"}], "stats": {"total": 111, "additions": 64, "deletions": 47}, "files": [{"sha": "8b007d8c5854773bdef5e406e970755db562d483", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=721641c415fa5d97709ce25219c2d492e54d85d4", "patch": "@@ -1,3 +1,20 @@\n+2009-09-16  Johannes Singler  <singler@ira.uka.de>\n+\n+        * include/parallel/base.h: Correct some comments accidentally changed\n+        during uglification.\n+        * include/parallel/find.h: Likewise.\n+        * include/parallel/find_selectors.h: Likewise.\n+        * include/parallel/multiway_merge.h: Likewise.\n+        * include/parallel/multiway_mergesort.h: Likewise.\n+        * include/parallel/partial_sum.h: Likewise.\n+        * include/parallel/partition.h: Likewise.\n+        * include/parallel/queue.h: Likewise.\n+        * include/parallel/random_shuffle.h: Likewise.\n+        * include/parallel/settings.h: Likewise.\n+        * include/parallel/sort.h: Likewise.\n+        * include/parallel/tags.h: Likewise.\n+        * include/parallel/workstealing.h: Likewise.\n+\n 2009-09-16  Johannes Singler  <singler@ira.uka.de>\n \n         * include/parallel/base.h (_EqualFromLess):"}, {"sha": "92f787404adbd4b1880dd26cc1c7e38b8a76a138", "filename": "libstdc++-v3/include/parallel/base.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h?ref=721641c415fa5d97709ce25219c2d492e54d85d4", "patch": "@@ -110,7 +110,7 @@ template<typename _Size>\n       return __k;\n     }\n \n-/** @brief Encode two integers into one __gnu_parallel::_CASable.\n+/** @brief Encode two integers into one gnu_parallel::_CASable.\n   *  @param __a First integer, to be encoded in the most-significant @__c\n   *  _CASable_bits/2 bits.\n   *  @param __b Second integer, to be encoded in the least-significant\n@@ -124,7 +124,7 @@ __encode2(int __a, int __b)\t//must all be non-negative, actually\n   return (((_CASable)__a) << (_CASable_bits / 2)) | (((_CASable)__b) << 0);\n }\n \n-/** @brief Decode two integers from one __gnu_parallel::_CASable.\n+/** @brief Decode two integers from one gnu_parallel::_CASable.\n   *  @param __x __gnu_parallel::_CASable to decode integers from.\n   *  @param __a First integer, to be decoded from the most-significant\n   *  @__c _CASable_bits/2 bits of @__c __x.\n@@ -210,7 +210,7 @@ template<typename _Operation, typename _FirstArgumentType,\n     { return _M_op(_M_value, __x); }\n \n     // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-    // 109.  Missing binders for non-const __sequence __elements\n+    // 109.  Missing binders for non-const sequence elements\n     _ResultType\n     operator()(_SecondArgumentType& __x) const\n     { return _M_op(_M_value, __x); }\n@@ -239,7 +239,7 @@ template<typename _Operation, typename _FirstArgumentType,\n     { return _M_op(__x, _M_value); }\n \n     // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-    // 109.  Missing binders for non-const __sequence __elements\n+    // 109.  Missing binders for non-const sequence elements\n     _ResultType\n     operator()(_FirstArgumentType& __x)\n     { return _M_op(__x, _M_value); }"}, {"sha": "6c84981a8c3e473b9ea282d32be99175a18c10a7", "filename": "libstdc++-v3/include/parallel/find.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffind.h?ref=721641c415fa5d97709ce25219c2d492e54d85d4", "patch": "@@ -226,7 +226,7 @@ template<typename _RAIter1,\n #       pragma omp single\n           __num_threads = omp_get_num_threads();\n \n-        // Not within first __k __elements -> start parallel.\n+        // Not within first __k elements -> start parallel.\n         _ThreadIndex __iam = omp_get_thread_num();\n \n         _DifferenceType __block_size = __s.find_initial_block_size;"}, {"sha": "9445d51d45a6e32f1234e590246bb9f54d5898c0", "filename": "libstdc++-v3/include/parallel/find_selectors.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffind_selectors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffind_selectors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffind_selectors.h?ref=721641c415fa5d97709ce25219c2d492e54d85d4", "patch": "@@ -49,7 +49,7 @@ namespace __gnu_parallel\n    */\n   struct __find_if_selector : public __generic_find_selector\n   {\n-    /** @brief Test on one __position.\n+    /** @brief Test on one position.\n      * @param __i1 _Iterator on first sequence.\n      * @param __i2 _Iterator on second sequence (unused).\n      * @param __pred Find predicate.\n@@ -76,10 +76,10 @@ namespace __gnu_parallel\n \t\t\t\t      sequential_tag()), __begin2); }\n   };\n \n-  /** @brief Test predicate on two adjacent __elements. */\n+  /** @brief Test predicate on two adjacent elements. */\n   struct __adjacent_find_selector : public __generic_find_selector\n   {\n-    /** @brief Test on one __position.\n+    /** @brief Test on one position.\n      *  @param __i1 _Iterator on first sequence.\n      *  @param __i2 _Iterator on second sequence (unused).\n      *  @param __pred Find predicate.\n@@ -119,7 +119,7 @@ namespace __gnu_parallel\n   struct __mismatch_selector : public __generic_find_selector\n   {\n     /** \n-     *  @brief Test on one __position.\n+     *  @brief Test on one position.\n      *  @param __i1 _Iterator on first sequence.\n      *  @param __i2 _Iterator on second sequence (unused).\n      *  @param __pred Find predicate. \n@@ -147,7 +147,7 @@ namespace __gnu_parallel\n   };\n \n \n-  /** @brief Test predicate on several __elements. */\n+  /** @brief Test predicate on several elements. */\n   template<typename _ForwardIterator>\n   struct __find_first_of_selector : public __generic_find_selector\n   {\n@@ -157,7 +157,7 @@ namespace __gnu_parallel\n     explicit __find_first_of_selector(_ForwardIterator __begin, _ForwardIterator __end)\n     : _M_begin(__begin), _M_end(__end) { }\n \n-    /** @brief Test on one __position.\n+    /** @brief Test on one position.\n      *  @param __i1 _Iterator on first sequence.\n      *  @param __i2 _Iterator on second sequence (unused).\n      *  @param __pred Find predicate. */"}, {"sha": "808caf209998080cf36221a3fe2810ba6d0aa424", "filename": "libstdc++-v3/include/parallel/multiway_merge.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h?ref=721641c415fa5d97709ce25219c2d492e54d85d4", "patch": "@@ -72,13 +72,13 @@ template<typename _RAIter, typename _Compare>\n   operator<=(_GuardedIterator<_RAIter, _Compare>& __bi1,\n               _GuardedIterator<_RAIter, _Compare>& __bi2);\n \n-/** @brief _Iterator wrapper supporting an implicit __supremum at the end\n+/** @brief _Iterator wrapper supporting an implicit supremum at the end\n  *         of the sequence, dominating all comparisons.\n  *\n- * The implicit __supremum comes with __a performance cost.\n+ * The implicit supremum comes with __a performance cost.\n  *\n  * Deriving from _RAIter is not possible since\n- * _RAIter need not be __a class.\n+ * _RAIter need not be a class.\n  */\n template<typename _RAIter, typename _Compare>\n   class _GuardedIterator\n@@ -573,7 +573,7 @@ template<typename LT,\n \n     for (_DifferenceType __i = 0; __i < __length; ++__i)\n       {\n-        //take __out\n+        //take out\n         source = __lt.__get_min_source();\n \n         *(__target++) = *(__seqs_begin[source].first++);\n@@ -785,9 +785,9 @@ struct _LoserTreeTraits\n };\n \n /**\n- * @brief Switch for 3-way merging with __sentinels turned __off.\n+ * @brief Switch for 3-way merging with __sentinels turned off.\n  *\n- * Note that 3-way merging is always __stable!\n+ * Note that 3-way merging is always stable!\n  */\n template<\n   bool __sentinels /*default == false*/,\n@@ -811,7 +811,7 @@ struct __multiway_merge_3_variant_sentinel_switch\n /**\n  * @brief Switch for 3-way merging with __sentinels turned on.\n  *\n- * Note that 3-way merging is always __stable!\n+ * Note that 3-way merging is always stable!\n  */\n template<\n   typename _RAIterIterator,\n@@ -834,9 +834,9 @@ struct __multiway_merge_3_variant_sentinel_switch\n };\n \n /**\n- * @brief Switch for 4-way merging with __sentinels turned __off.\n+ * @brief Switch for 4-way merging with __sentinels turned off.\n  *\n- * Note that 4-way merging is always __stable!\n+ * Note that 4-way merging is always stable!\n  */\n template<\n   bool __sentinels /*default == false*/,\n@@ -860,7 +860,7 @@ struct __multiway_merge_4_variant_sentinel_switch\n /**\n  * @brief Switch for 4-way merging with __sentinels turned on.\n  *\n- * Note that 4-way merging is always __stable!\n+ * Note that 4-way merging is always stable!\n  */\n template<\n   typename _RAIterIterator,\n@@ -919,7 +919,7 @@ struct __multiway_merge_k_variant_sentinel_switch\n };\n \n /**\n- * @brief Switch for k-way merging with __sentinels turned __off.\n+ * @brief Switch for k-way merging with __sentinels turned off.\n  */\n template<\n   bool __stable,"}, {"sha": "546b476da8f00c7366e408e7d3e29229ee9aec85", "filename": "libstdc++-v3/include/parallel/multiway_mergesort.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h?ref=721641c415fa5d97709ce25219c2d492e54d85d4", "patch": "@@ -233,7 +233,7 @@ template<typename _RAIter, typename _Compare,\n                         __comp)\n                 - __sd->_M_temporary[__s];\n           else\n-            // Absolute __end.\n+            // Absolute end.\n             __sd->_M_pieces[__iam][__s]._M_end = __sd->_M_starts[__s + 1] - __sd->_M_starts[__s];\n         }\n     }"}, {"sha": "da04270b6e29f8c75c1471a5fad54fcc2c7775d8", "filename": "libstdc++-v3/include/parallel/partial_sum.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h?ref=721641c415fa5d97709ce25219c2d492e54d85d4", "patch": "@@ -207,7 +207,7 @@ template<typename _IIter,\n     switch (_Settings::get().partial_sum_algorithm)\n       {\n       case LINEAR:\n-        // Need an initial __offset.\n+        // Need an initial offset.\n         return __parallel_partial_sum_linear(__begin, __end, __result, __bin_op, __n);\n       default:\n     // Partial_sum algorithm not implemented."}, {"sha": "399ad418d315d4ceb7124dc24add78d25d3e995f", "filename": "libstdc++-v3/include/parallel/partition.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartition.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartition.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartition.h?ref=721641c415fa5d97709ce25219c2d492e54d85d4", "patch": "@@ -77,7 +77,7 @@ template<typename _RAIter, typename _Predicate>\n     omp_lock_t __result_lock;\n     omp_init_lock(&__result_lock);\n \n-    //at least two __chunks per thread\n+    //at least two chunks per thread\n     if(__right - __left + 1 >= 2 * __num_threads * __chunk_size)\n #   pragma omp parallel num_threads(__num_threads)\n       {"}, {"sha": "587fa5312e2c5432bcd898b84bc11e33a78d2633", "filename": "libstdc++-v3/include/parallel/queue.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fqueue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fqueue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fqueue.h?ref=721641c415fa5d97709ce25219c2d492e54d85d4", "patch": "@@ -77,7 +77,7 @@ namespace __gnu_parallel\n       ~_RestrictedBoundedConcurrentQueue()\n       { delete[] _M_base; }\n \n-      /** @brief Pushes one element into the queue at the front __end.\n+      /** @brief Pushes one element into the queue at the front end.\n        *  Must not be called concurrently with pop_front(). */\n       void\n       push_front(const _Tp& __t)\n@@ -94,7 +94,7 @@ namespace __gnu_parallel\n \t__fetch_and_add(&_M_borders, __encode2(1, 0));\n       }\n \n-      /** @brief Pops one element from the queue at the front __end.\n+      /** @brief Pops one element from the queue at the front end.\n        *  Must not be called concurrently with pop_front(). */\n       bool\n       pop_front(_Tp& __t)\n@@ -118,7 +118,7 @@ namespace __gnu_parallel\n \treturn false;\n       }\n \n-      /** @brief Pops one element from the queue at the front __end.\n+      /** @brief Pops one element from the queue at the front end.\n        *  Must not be called concurrently with pop_front(). */\n       bool\n       pop_back(_Tp& __t)\t//queue behavior"}, {"sha": "faab8d80f27fd2390003b9ae1294e514383f3514", "filename": "libstdc++-v3/include/parallel/random_shuffle.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h?ref=721641c415fa5d97709ce25219c2d492e54d85d4", "patch": "@@ -93,10 +93,10 @@ template<typename _RAIter, typename RandomNumberGenerator>\n     /** @brief Number of threads participating in total. */\n     int _M_num_threads;\n \n-    /** @brief Begin __index for bins taken care of by this thread. */\n+    /** @brief Begin index for bins taken care of by this thread. */\n     _BinIndex _M_bins_begin;\n \n-    /** @brief End __index for bins taken care of by this thread. */\n+    /** @brief End index for bins taken care of by this thread. */\n     _BinIndex __bins_end;\n \n     /** @brief Random _M_seed for this thread. */\n@@ -384,7 +384,7 @@ template<typename _RAIter, typename RandomNumberGenerator>\n     delete[] __pus;\n   }\n \n-/** @brief Sequential __cache-efficient random shuffle.\n+/** @brief Sequential cache-efficient random shuffle.\n  *  @param __begin Begin iterator of sequence.\n  *  @param __end End iterator of sequence.\n  *  @param __rng Random number generator to use."}, {"sha": "e68a0c4da9a8acc31bbe686d996eb077771ededc", "filename": "libstdc++-v3/include/parallel/settings.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsettings.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsettings.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsettings.h?ref=721641c415fa5d97709ce25219c2d492e54d85d4", "patch": "@@ -197,7 +197,7 @@ namespace __gnu_parallel\n     /// Minimal input size for partial_sort.\n     _SequenceIndex \t\tpartial_sort_minimal_n;\n \n-    /// Ratio for partial_sum. Assume \"sum and write __result\" to be\n+    /// Ratio for partial_sum. Assume \"sum and write result\" to be\n     /// this factor slower than just \"sum\".\n     float \t\t\tpartial_sum_dilation;\n "}, {"sha": "259b19823229ae47a9d6b4c0dd3113b5b243aa5b", "filename": "libstdc++-v3/include/parallel/sort.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsort.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsort.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsort.h?ref=721641c415fa5d97709ce25219c2d492e54d85d4", "patch": "@@ -85,7 +85,7 @@ namespace __gnu_parallel\n   }\n \n   /** \n-   *  @brief Choose multiway mergesort with __exact splitting,\n+   *  @brief Choose multiway mergesort with exact splitting,\n    *  for parallel sorting.\n    *  @param __begin Begin iterator of input sequence.\n    *  @param __end End iterator of input sequence.\n@@ -163,7 +163,7 @@ namespace __gnu_parallel\n \n \n   /** \n-   *  @brief Choose multiway mergesort with __exact splitting,\n+   *  @brief Choose multiway mergesort with exact splitting,\n    *  for parallel sorting.\n    *  @param __begin Begin iterator of input sequence.\n    *  @param __end End iterator of input sequence."}, {"sha": "43561d28d5c61d01443c03c16916ed4cc2426a24", "filename": "libstdc++-v3/include/parallel/tags.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ftags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ftags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ftags.h?ref=721641c415fa5d97709ce25219c2d492e54d85d4", "patch": "@@ -62,7 +62,7 @@ namespace __gnu_parallel\n         this->_M_num_threads = __num_threads;\n       }\n \n-      /** @brief Find __out desired number of threads.\n+      /** @brief Find out desired number of threads.\n        *  @return Desired number of threads. */\n       inline _ThreadIndex __get_num_threads()\n       {\n@@ -111,7 +111,7 @@ namespace __gnu_parallel\n \n \n   /** @brief Forces parallel merging\n-   *  with __exact splitting, at compile time. */\n+   *  with exact splitting, at compile time. */\n   struct exact_tag : public parallel_tag\n   {\n       exact_tag() { }\n@@ -120,7 +120,7 @@ namespace __gnu_parallel\n   };\n \n   /** @brief Forces parallel merging\n-   *  with __exact splitting, at compile time. */\n+   *  with exact splitting, at compile time. */\n   struct sampling_tag : public parallel_tag\n   {\n       sampling_tag() { }\n@@ -139,7 +139,7 @@ namespace __gnu_parallel\n   };\n \n   /** @brief Forces parallel sorting using multiway mergesort\n-   *  with __exact splitting at compile time. */\n+   *  with exact splitting at compile time. */\n   struct multiway_mergesort_exact_tag : public parallel_tag\n   {\n       multiway_mergesort_exact_tag() { }"}, {"sha": "ad9208c4e2b5481b3c8a31b9c7259247a533ef3b", "filename": "libstdc++-v3/include/parallel/workstealing.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fworkstealing.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721641c415fa5d97709ce25219c2d492e54d85d4/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fworkstealing.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fworkstealing.h?ref=721641c415fa5d97709ce25219c2d492e54d85d4", "patch": "@@ -127,7 +127,7 @@ template<typename _RAIter,\n     omp_lock_t __output_lock;\n     omp_init_lock(&__output_lock);\n \n-    // Write __base __value to output.\n+    // Write base value to output.\n     __output = __base;\n \n     // No more threads than jobs, at least one thread.\n@@ -142,7 +142,7 @@ template<typename _RAIter,\n           {\n             __num_threads = omp_get_num_threads();\n \n-            // Create __job description array.\n+            // Create job description array.\n             __job = new _Job<_DifferenceType>[__num_threads * __stride];\n           }\n \n@@ -154,7 +154,7 @@ template<typename _RAIter,\n         // Thread id.\n         _ThreadIndex __iam = omp_get_thread_num();\n \n-        // This __job.\n+        // This job.\n         _Job<_DifferenceType>& __my_job = __job[__iam * __stride];\n \n         // Random number (for work stealing).\n@@ -184,7 +184,7 @@ template<typename _RAIter,\n             (__length - 1) : ((__iam + 1) * (__length / __num_threads) - 1);\n         __my_job._M_load = __my_job._M_last - __my_job._M_first + 1;\n \n-        // Init __result with _M_first __value (to have a base value for reduction).\n+        // Init result with _M_first __value (to have a base value for reduction).\n         if (__my_job._M_first <= __my_job._M_last)\n           {\n             // Cannot use volatile variable directly.\n@@ -199,17 +199,17 @@ template<typename _RAIter,\n #       pragma omp barrier\n \n         // Actual work phase\n-        // Work on own or stolen __start\n+        // Work on own or stolen current start\n         while (__busy > 0)\n           {\n-            // Work until no productive thread __left.\n+            // Work until no productive thread left.\n #           pragma omp flush(__busy)\n \n             // Thread has own work to do\n             while (__my_job._M_first <= __my_job._M_last)\n               {\n                 // fetch-and-add call\n-                // Reserve __current __job block (size __chunk_size) in my queue.\n+                // Reserve current job block (size __chunk_size) in my queue.\n                 _DifferenceType current_job =\n                   __fetch_and_add<_DifferenceType>(&(__my_job._M_first), __chunk_size);\n \n@@ -265,7 +265,7 @@ template<typename _RAIter,\n                 // Number of elements to steal (at least one).\n                 __steal = (__supposed_load < 2) ? 1 : __supposed_load / 2;\n \n-                // Push __victim's __start forward.\n+                // Push __victim's current start forward.\n                 _DifferenceType __stolen_first =\n                     __fetch_and_add<_DifferenceType>(\n                         &(__job[__victim * __stride]._M_first), __steal);\n@@ -285,7 +285,7 @@ template<typename _RAIter,\n               }\n #           pragma omp flush(__busy)\n           } // end while __busy > 0\n-            // Add accumulated __result to output.\n+            // Add accumulated result to output.\n         omp_set_lock(&__output_lock);\n         __output = __r(__output, __result);\n         omp_unset_lock(&__output_lock);"}]}