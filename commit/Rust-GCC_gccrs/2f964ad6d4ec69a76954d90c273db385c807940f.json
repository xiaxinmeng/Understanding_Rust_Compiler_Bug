{"sha": "2f964ad6d4ec69a76954d90c273db385c807940f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY5NjRhZDZkNGVjNjlhNzY5NTRkOTBjMjczZGIzODVjODA3OTQwZg==", "commit": {"author": {"name": "Xinliang David Li", "email": "davidxl@google.com", "date": "2011-04-26T16:06:09Z"}, "committer": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2011-04-26T16:06:09Z"}, "message": "Implement -Wno-maybe-uninitialized\n\nFrom-SVN: r172978", "tree": {"sha": "b94bed7986e2724eb7508e1ebf3f157968133e57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b94bed7986e2724eb7508e1ebf3f157968133e57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f964ad6d4ec69a76954d90c273db385c807940f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f964ad6d4ec69a76954d90c273db385c807940f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f964ad6d4ec69a76954d90c273db385c807940f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f964ad6d4ec69a76954d90c273db385c807940f/comments", "author": {"login": "vns-mn", "id": 57157229, "node_id": "MDQ6VXNlcjU3MTU3MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/57157229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vns-mn", "html_url": "https://github.com/vns-mn", "followers_url": "https://api.github.com/users/vns-mn/followers", "following_url": "https://api.github.com/users/vns-mn/following{/other_user}", "gists_url": "https://api.github.com/users/vns-mn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vns-mn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vns-mn/subscriptions", "organizations_url": "https://api.github.com/users/vns-mn/orgs", "repos_url": "https://api.github.com/users/vns-mn/repos", "events_url": "https://api.github.com/users/vns-mn/events{/privacy}", "received_events_url": "https://api.github.com/users/vns-mn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "86262bb186922557dba15c5fa21785837f4006cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86262bb186922557dba15c5fa21785837f4006cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86262bb186922557dba15c5fa21785837f4006cd"}], "stats": {"total": 113, "additions": 88, "deletions": 25}, "files": [{"sha": "248ba57fa80dd1471d8c50ac823a47004e53fb7e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f964ad6d4ec69a76954d90c273db385c807940f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f964ad6d4ec69a76954d90c273db385c807940f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f964ad6d4ec69a76954d90c273db385c807940f", "patch": "@@ -1,3 +1,16 @@\n+2011-04-26  Xinliang David Li  <davidxl@google.com>\n+\n+\t* tree-ssa-uninit.c (warn_uninitialized_phi): Pass\n+\t warning code.\n+\t* c-family/c-opts.c (c_common_handle_option): Set\n+\twarn_maybe_uninitialized.\n+\t* opts.c (common_handle_option): Ditto.\n+\t* common.opt:  New option.\n+\t* tree-ssa.c (warn_uninit): Add one more parameter.\n+\t(warn_uninitialized_var): Pass warning code.\n+\t* tree-flow.h: Interface change.\n+\n+\n 2011-04-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/mips/iris6.h (LOCAL_LABEL_PREFIX): Don't test"}, {"sha": "3cd3e56ff3ae9e915d8b563602ae5136b7f0302a", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f964ad6d4ec69a76954d90c273db385c807940f/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f964ad6d4ec69a76954d90c273db385c807940f/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=2f964ad6d4ec69a76954d90c273db385c807940f", "patch": "@@ -384,6 +384,7 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       warn_unknown_pragmas = value;\n \n       warn_uninitialized = value;\n+      warn_maybe_uninitialized = value;\n \n       if (!c_dialect_cxx ())\n \t{"}, {"sha": "ebc2ba7dbf8723f4b98fa860ba693eb72f032eb8", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f964ad6d4ec69a76954d90c273db385c807940f/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f964ad6d4ec69a76954d90c273db385c807940f/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=2f964ad6d4ec69a76954d90c273db385c807940f", "patch": "@@ -631,6 +631,10 @@ Wuninitialized\n Common Var(warn_uninitialized) Init(-1) Warning\n Warn about uninitialized automatic variables\n \n+Wmaybe-uninitialized\n+Common Var(warn_maybe_uninitialized) Warning\n+Warn about maybe uninitialized automatic variables\n+\n Wunreachable-code\n Common Ignore\n Does nothing. Preserved for backward compatibility."}, {"sha": "98513fb6944ba0e04668cfc9d727ebd93a60207d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f964ad6d4ec69a76954d90c273db385c807940f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f964ad6d4ec69a76954d90c273db385c807940f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2f964ad6d4ec69a76954d90c273db385c807940f", "patch": "@@ -246,11 +246,11 @@ Objective-C and Objective-C++ Dialects}.\n -Wformat-security  -Wformat-y2k @gol\n -Wframe-larger-than=@var{len} -Wjump-misses-init -Wignored-qualifiers @gol\n -Wimplicit  -Wimplicit-function-declaration  -Wimplicit-int @gol\n--Winit-self  -Winline @gol\n+-Winit-self  -Winline -Wmaybe-uninitialized @gol\n -Wno-int-to-pointer-cast -Wno-invalid-offsetof @gol\n -Winvalid-pch -Wlarger-than=@var{len}  -Wunsafe-loop-optimizations @gol\n -Wlogical-op -Wlong-long @gol\n--Wmain  -Wmissing-braces  -Wmissing-field-initializers @gol\n+-Wmain -Wmaybe-uninitialized -Wmissing-braces  -Wmissing-field-initializers @gol\n -Wmissing-format-attribute  -Wmissing-include-dirs @gol\n -Wno-mudflap @gol\n -Wno-multichar  -Wnonnull  -Wno-overflow @gol\n@@ -2946,6 +2946,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n -Wcomment  @gol\n -Wformat   @gol\n -Wmain @r{(only for C/ObjC and unless} @option{-ffreestanding}@r{)}  @gol\n+-Wmaybe-uninitialized @gol\n -Wmissing-braces  @gol\n -Wnonnull  @gol\n -Wparentheses  @gol\n@@ -3530,8 +3531,15 @@ to compute a value that itself is never used, because such\n computations may be deleted by data flow analysis before the warnings\n are printed.\n \n-These warnings are made optional because GCC is not smart\n-enough to see all the reasons why the code might be correct\n+@item -Wmaybe-uninitialized\n+@opindex Wmaybe-uninitialized\n+@opindex Wno-maybe-uninitialized\n+For an automatic variable, if there exists a path from the function\n+entry to a use of the variable that is initialized, but there exist\n+some other paths the variable is not initialized, the compiler will\n+emit a warning if it can not prove the uninitialized paths do not\n+happen at runtime. These warnings are made optional because GCC is \n+not smart enough to see all the reasons why the code might be correct\n despite appearing to have an error.  Here is one example of how\n this can happen:\n \n@@ -3554,20 +3562,9 @@ this can happen:\n \n @noindent\n If the value of @code{y} is always 1, 2 or 3, then @code{x} is\n-always initialized, but GCC doesn't know this.  Here is\n-another common case:\n-\n-@smallexample\n-@{\n-  int save_y;\n-  if (change_y) save_y = y, y = new_y;\n-  @dots{}\n-  if (change_y) y = save_y;\n-@}\n-@end smallexample\n-\n-@noindent\n-This has no bug because @code{save_y} is used only if it is set.\n+always initialized, but GCC doesn't know this. To suppress the\n+warning, the user needs to provide a default case with assert(0) or\n+similar code.\n \n @cindex @code{longjmp} warnings\n This option also warns when a non-volatile automatic variable might be"}, {"sha": "f00e1b2a6df14de4ba5271a0a060a1eda0171e03", "filename": "gcc/opts.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f964ad6d4ec69a76954d90c273db385c807940f/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f964ad6d4ec69a76954d90c273db385c807940f/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=2f964ad6d4ec69a76954d90c273db385c807940f", "patch": "@@ -1680,6 +1680,11 @@ common_handle_option (struct gcc_options *opts,\n       /* No-op. Used by the driver and passed to us because it starts with f.*/\n       break;\n \n+    case OPT_Wuninitialized:\n+      /* Also turn on maybe uninitialized warning.  */\n+      warn_maybe_uninitialized = value;\n+      break;\n+\n     default:\n       /* If the flag was handled in a standard way, assume the lack of\n \t processing here is intentional.  */\n@@ -1958,6 +1963,9 @@ enable_warning_as_error (const char *arg, int value, unsigned int lang_mask,\n       control_warning_option (option_index, (int) kind, value,\n \t\t\t      loc, lang_mask,\n \t\t\t      handlers, opts, opts_set, dc);\n+      if (option_index == OPT_Wuninitialized)\n+        enable_warning_as_error (\"maybe-uninitialized\", value, lang_mask,\n+\t                         handlers, opts, opts_set, loc, dc);\n     }\n   free (new_option);\n }"}, {"sha": "8b00f7ae3b930f54c64108e20ffced39aac36f53", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f964ad6d4ec69a76954d90c273db385c807940f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f964ad6d4ec69a76954d90c273db385c807940f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2f964ad6d4ec69a76954d90c273db385c807940f", "patch": "@@ -1,3 +1,8 @@\n+2011-04-26  Xinliang David Li  <davidxl@google.com>\n+\t\n+\t* gcc.dg/uninit-suppress.c: New test.\n+\t* gcc.dg/uninit-suppress.c: New test.\n+\n 2011-04-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/48768"}, {"sha": "64038a3a2398161f29b0ceb86510a15b626e8ea6", "filename": "gcc/testsuite/gcc.dg/uninit-suppress.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f964ad6d4ec69a76954d90c273db385c807940f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-suppress.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f964ad6d4ec69a76954d90c273db385c807940f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-suppress.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-suppress.c?ref=2f964ad6d4ec69a76954d90c273db385c807940f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fno-tree-ccp -O2 -Wuninitialized -Wno-maybe-uninitialized\" } */\n+void blah();\n+int gflag;\n+\n+void foo()\n+{\n+   int v;\n+   if (gflag)\n+     v = 10;\n+\n+   blah(); /* *gflag may be killed, but compiler won't know */\n+\n+   if (gflag)\n+    bar(v);   /* { dg-bogus \"uninitialized\" \"should be suppressed\" } */\n+}"}, {"sha": "a48b182f8cbcd6b442e788a238762f7cb87d6a37", "filename": "gcc/testsuite/gcc.dg/uninit-suppress_2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f964ad6d4ec69a76954d90c273db385c807940f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-suppress_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f964ad6d4ec69a76954d90c273db385c807940f/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-suppress_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-suppress_2.c?ref=2f964ad6d4ec69a76954d90c273db385c807940f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fno-tree-ccp -O2 -Wuninitialized -Werror=uninitialized -Wno-error=maybe-uninitialized\" } */\n+void blah();\n+int gflag;\n+\n+void foo()\n+{\n+   int v;\n+   if (gflag)\n+     v = 10;\n+\n+   blah(); /* *gflag may be killed, but compiler won't know */\n+\n+   if (gflag)\n+    bar(v);   /* { dg-warning \"uninitialized\" \"should not be promoted to error\" } */\n+}"}, {"sha": "2ac2bbb66f51d85e678195ee627b90a5e8c89a89", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f964ad6d4ec69a76954d90c273db385c807940f/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f964ad6d4ec69a76954d90c273db385c807940f/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=2f964ad6d4ec69a76954d90c273db385c807940f", "patch": "@@ -546,7 +546,7 @@ extern void flush_pending_stmts (edge);\n extern void verify_ssa (bool);\n extern void delete_tree_ssa (void);\n extern bool ssa_undefined_value_p (tree);\n-extern void warn_uninit (tree, const char *, void *);\n+extern void warn_uninit (enum opt_code, tree, const char *, void *);\n extern unsigned int warn_uninitialized_vars (bool);\n extern void execute_update_addresses_taken (void);\n "}, {"sha": "7ddce32a62fa7a9b7c2542263df62680bec946ec", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f964ad6d4ec69a76954d90c273db385c807940f/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f964ad6d4ec69a76954d90c273db385c807940f/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=2f964ad6d4ec69a76954d90c273db385c807940f", "patch": "@@ -1953,7 +1953,7 @@ warn_uninitialized_phi (gimple phi, VEC(gimple, heap) **worklist,\n     return;\n \n   uninit_op = gimple_phi_arg_def (phi, MASK_FIRST_SET_BIT (uninit_opnds));\n-  warn_uninit (uninit_op,\n+  warn_uninit (OPT_Wmaybe_uninitialized, uninit_op,\n                \"%qD may be used uninitialized in this function\",\n                uninit_use_stmt);\n "}, {"sha": "9ae280a7e32a9d51656b4edfcee22c5a9109163c", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f964ad6d4ec69a76954d90c273db385c807940f/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f964ad6d4ec69a76954d90c273db385c807940f/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=2f964ad6d4ec69a76954d90c273db385c807940f", "patch": "@@ -1617,10 +1617,11 @@ walk_use_def_chains (tree var, walk_use_def_chains_fn fn, void *data,\n    changed conditionally uninitialized to unconditionally uninitialized.  */\n \n /* Emit a warning for T, an SSA_NAME, being uninitialized.  The exact\n-   warning text is in MSGID and LOCUS may contain a location or be null.  */\n+   warning text is in MSGID and LOCUS may contain a location or be null.\n+   WC is the warning code.  */\n \n void\n-warn_uninit (tree t, const char *gmsgid, void *data)\n+warn_uninit (enum opt_code wc, tree t, const char *gmsgid, void *data)\n {\n   tree var = SSA_NAME_VAR (t);\n   gimple context = (gimple) data;\n@@ -1644,7 +1645,7 @@ warn_uninit (tree t, const char *gmsgid, void *data)\n \t     : DECL_SOURCE_LOCATION (var);\n   xloc = expand_location (location);\n   floc = expand_location (DECL_SOURCE_LOCATION (cfun->decl));\n-  if (warning_at (location, OPT_Wuninitialized, gmsgid, var))\n+  if (warning_at (location, wc, gmsgid, var))\n     {\n       TREE_NO_WARNING (var) = 1;\n \n@@ -1726,10 +1727,12 @@ warn_uninitialized_var (tree *tp, int *walk_subtrees, void *data_)\n       /* We only do data flow with SSA_NAMEs, so that's all we\n \t can warn about.  */\n       if (data->always_executed)\n-        warn_uninit (t, \"%qD is used uninitialized in this function\",\n+        warn_uninit (OPT_Wuninitialized,\n+\t             t, \"%qD is used uninitialized in this function\",\n \t\t     data->stmt);\n       else if (data->warn_possibly_uninitialized)\n-        warn_uninit (t, \"%qD may be used uninitialized in this function\",\n+        warn_uninit (OPT_Wuninitialized,\n+\t             t, \"%qD may be used uninitialized in this function\",\n \t\t     data->stmt);\n       *walk_subtrees = 0;\n       break;"}]}