{"sha": "958dd42b03f9754d12fd247bae52a1871c087237", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU4ZGQ0MmIwM2Y5NzU0ZDEyZmQyNDdiYWU1MmExODcxYzA4NzIzNw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2009-11-01T17:46:50Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2009-11-01T17:46:50Z"}, "message": "[multiple changes]\n\n2009-11-01  Tobias Burnus  <burnus@net-b.de>                                            \n\n        PR fortran/41872\n        * trans-decl.c (gfc_trans_deferred_vars): Do not nullify\n        autodeallocated allocatable scalars at the end of scope.\n        (gfc_generate_function_code): Fix indention.\n        * trans-expr.c (gfc_conv_procedure_call): For allocatable\n        scalars, fix calling by reference and autodeallocating\n        of intent out variables.\n\n2009-11-01  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/41872\n        * gfortran.dg/allocatable_scalar_4.f90: New test.\n\nFrom-SVN: r153795", "tree": {"sha": "1a65660404547cc3aafcda24c15d112dc36fdbc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a65660404547cc3aafcda24c15d112dc36fdbc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/958dd42b03f9754d12fd247bae52a1871c087237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/958dd42b03f9754d12fd247bae52a1871c087237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/958dd42b03f9754d12fd247bae52a1871c087237", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/958dd42b03f9754d12fd247bae52a1871c087237/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "745ff31ff7c3a21fca8b72e56a027e505c853e21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/745ff31ff7c3a21fca8b72e56a027e505c853e21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/745ff31ff7c3a21fca8b72e56a027e505c853e21"}], "stats": {"total": 162, "additions": 150, "deletions": 12}, "files": [{"sha": "717ffa025cb1d7353ecddb47d25107cc56fbbf33", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/958dd42b03f9754d12fd247bae52a1871c087237/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/958dd42b03f9754d12fd247bae52a1871c087237/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=958dd42b03f9754d12fd247bae52a1871c087237", "patch": "@@ -1,3 +1,13 @@\n+2009-11-01  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/41872\n+\t* trans-decl.c (gfc_trans_deferred_vars): Do not nullify\n+\tautodeallocated allocatable scalars at the end of scope.\n+\t(gfc_generate_function_code): Fix indention.\n+\t* trans-expr.c (gfc_conv_procedure_call): For allocatable\n+\tscalars, fix calling by reference and autodeallocating\n+\tof intent out variables.\n+\n 2009-11-01  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/41850"}, {"sha": "8ac6b9acc1970d66b1516e1f284ab9085b4425d6", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/958dd42b03f9754d12fd247bae52a1871c087237/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/958dd42b03f9754d12fd247bae52a1871c087237/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=958dd42b03f9754d12fd247bae52a1871c087237", "patch": "@@ -3193,7 +3193,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, tree fnbody)\n \t  gfc_expr *e;\n \t  gfc_se se;\n \t  stmtblock_t block;\n-\t  \n+\n \t  e = gfc_lval_expr_from_sym (sym);\n \t  if (sym->ts.type == BT_CLASS)\n \t    gfc_add_component_ref (e, \"$data\");\n@@ -3206,13 +3206,9 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, tree fnbody)\n \t  gfc_start_block (&block);\n \t  gfc_add_expr_to_block (&block, fnbody);\n \n+\t  /* Note: Nullifying is not needed.  */\n \t  tmp = gfc_deallocate_with_status (se.expr, NULL_TREE, true, NULL);\n \t  gfc_add_expr_to_block (&block, tmp);\n-\n-\t  tmp = fold_build2 (MODIFY_EXPR, void_type_node,\n-\t\t\t     se.expr, build_int_cst (TREE_TYPE (se.expr), 0));\n-\t  gfc_add_expr_to_block (&block, tmp);\n-\n \t  fnbody = gfc_finish_block (&block);\n \t}\n       else if (sym->ts.type == BT_CHARACTER)\n@@ -4396,10 +4392,10 @@ gfc_generate_function_code (gfc_namespace * ns)\n \n       /* Reset recursion-check variable.  */\n       if ((gfc_option.rtcheck & GFC_RTCHECK_RECURSION) && !is_recursive)\n-      {\n-\tgfc_add_modify (&block, recurcheckvar, boolean_false_node);\n-\trecurcheckvar = NULL;\n-      }\n+\t{\n+\t  gfc_add_modify (&block, recurcheckvar, boolean_false_node);\n+\t  recurcheckvar = NULL;\n+\t}\n \n       if (result == NULL_TREE)\n \t{"}, {"sha": "d8f8303fdbd3176710c9f52c94b4135dfd93946a", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/958dd42b03f9754d12fd247bae52a1871c087237/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/958dd42b03f9754d12fd247bae52a1871c087237/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=958dd42b03f9754d12fd247bae52a1871c087237", "patch": "@@ -2892,14 +2892,46 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t      else\n \t\t{\n \t\t  gfc_conv_expr_reference (&parmse, e);\n+\n+\t\t  /* If an ALLOCATABLE dummy argument has INTENT(OUT) and is \n+\t\t     allocated on entry, it must be deallocated.  */\n+\t\t  if (fsym && fsym->attr.allocatable\n+\t\t      && fsym->attr.intent == INTENT_OUT)\n+\t\t    {\n+\t\t      stmtblock_t block;\n+\n+\t\t      gfc_init_block  (&block);\n+\t\t      tmp = gfc_deallocate_with_status (parmse.expr, NULL_TREE,\n+\t\t\t\t\t\t\ttrue, NULL);\n+\t\t      gfc_add_expr_to_block (&block, tmp);\n+\t\t      tmp = fold_build2 (MODIFY_EXPR, void_type_node,\n+\t\t\t\t\t parmse.expr, null_pointer_node);\n+\t\t      gfc_add_expr_to_block (&block, tmp);\n+\n+\t\t      if (fsym->attr.optional\n+\t\t\t  && e->expr_type == EXPR_VARIABLE\n+\t\t\t  && e->symtree->n.sym->attr.optional)\n+\t\t\t{\n+\t\t\t  tmp = fold_build3 (COND_EXPR, void_type_node,\n+\t\t\t\t     gfc_conv_expr_present (e->symtree->n.sym),\n+\t\t\t\t\t    gfc_finish_block (&block),\n+\t\t\t\t\t    build_empty_stmt (input_location));\n+\t\t\t}\n+\t\t      else\n+\t\t\ttmp = gfc_finish_block (&block);\n+\n+\t\t      gfc_add_expr_to_block (&se->pre, tmp);\n+\t\t    }\n+\n \t\t  if (fsym && e->expr_type != EXPR_NULL\n \t\t      && ((fsym->attr.pointer\n \t\t\t   && fsym->attr.flavor != FL_PROCEDURE)\n \t\t\t  || (fsym->attr.proc_pointer\n \t\t\t      && !(e->expr_type == EXPR_VARIABLE\n \t\t\t      && e->symtree->n.sym->attr.dummy))\n \t\t\t  || (e->expr_type == EXPR_VARIABLE\n-\t\t\t      && gfc_is_proc_ptr_comp (e, NULL))))\n+\t\t\t      && gfc_is_proc_ptr_comp (e, NULL))\n+\t\t\t  || fsym->attr.allocatable))\n \t\t    {\n \t\t      /* Scalar pointer dummy args require an extra level of\n \t\t\t indirection. The null pointer already contains\n@@ -3169,7 +3201,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t  cl.backend_decl = formal->sym->ts.u.cl->backend_decl;\n \t    }\n         }\n-        else\n+      else\n         {\n \t  tree tmp;\n "}, {"sha": "bd400052ad42d977ec8da34ab1f5d175dbf285c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/958dd42b03f9754d12fd247bae52a1871c087237/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/958dd42b03f9754d12fd247bae52a1871c087237/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=958dd42b03f9754d12fd247bae52a1871c087237", "patch": "@@ -1,3 +1,8 @@\n+2009-11-01  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/41872\n+\t* gfortran.dg/allocatable_scalar_4.f90: New test.\n+\n 2009-11-01  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/41850"}, {"sha": "9f7a7a07d708ed365309b4e4f627a4384124a73e", "filename": "gcc/testsuite/gfortran.dg/allocatable_scalar_4.f90", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/958dd42b03f9754d12fd247bae52a1871c087237/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/958dd42b03f9754d12fd247bae52a1871c087237/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_4.f90?ref=958dd42b03f9754d12fd247bae52a1871c087237", "patch": "@@ -0,0 +1,95 @@\n+! { dg-do run }\n+!\n+! PR fortran/41872\n+!\n+!\n+program test\n+  implicit none\n+  integer, allocatable :: a\n+  integer, allocatable :: b\n+  allocate(a)\n+  call foo(a)\n+  if(.not. allocated(a)) call abort()\n+  if (a /= 5) call abort()\n+\n+  call bar(a)\n+  if (a /= 7) call abort()\n+\n+  deallocate(a)\n+  if(allocated(a)) call abort()\n+  call check3(a)\n+  if(.not. allocated(a)) call abort()\n+  if(a /= 6874) call abort()\n+  call check4(a)\n+  if(.not. allocated(a)) call abort()\n+  if(a /= -478) call abort()\n+\n+  allocate(b)\n+  b = 7482\n+  call checkOptional(.false.,.true., 7482)\n+  if (b /= 7482) call abort()\n+  call checkOptional(.true., .true., 7482, b)\n+  if (b /= 46) call abort()\n+contains\n+  subroutine foo(a)\n+    integer, allocatable, intent(out)  :: a\n+    if(allocated(a)) call abort()\n+    allocate(a)\n+    a = 5\n+  end subroutine foo\n+\n+  subroutine bar(a)\n+    integer, allocatable, intent(inout)  :: a\n+    if(.not. allocated(a)) call abort()\n+    if (a /= 5) call abort()\n+    a = 7\n+  end subroutine bar\n+\n+  subroutine check3(a)\n+    integer, allocatable, intent(inout)  :: a\n+    if(allocated(a)) call abort()\n+    allocate(a)\n+    a = 6874\n+  end subroutine check3\n+\n+  subroutine check4(a)\n+    integer, allocatable, intent(inout)  :: a\n+    if(.not.allocated(a)) call abort()\n+    if (a /= 6874) call abort\n+    deallocate(a)\n+    if(allocated(a)) call abort()\n+    allocate(a)\n+    if(.not.allocated(a)) call abort()\n+    a = -478\n+  end subroutine check4\n+\n+  subroutine checkOptional(prsnt, alloc, val, x)\n+    logical, intent(in) :: prsnt, alloc\n+    integer, allocatable, optional :: x\n+    integer, intent(in) :: val\n+    if (present(x) .neqv. prsnt) call abort()\n+    if (present(x)) then\n+      if (allocated(x) .neqv. alloc) call abort()\n+    end if\n+    if (present(x)) then\n+      if (allocated(x)) then\n+        if (x /= val) call abort()\n+      end if\n+    end if\n+    call checkOptional2(x)\n+    if (present(x)) then\n+      if (.not. allocated(x)) call abort()\n+      if (x /= -6784) call abort()\n+      x = 46\n+    end if\n+    call checkOptional2()\n+  end subroutine checkOptional\n+  subroutine checkOptional2(x)\n+    integer, allocatable, optional, intent(out) :: x\n+    if (present(x)) then\n+      if (allocated(x)) call abort()\n+      allocate(x)\n+      x = -6784\n+    end if\n+  end subroutine checkOptional2\n+end program test"}]}