{"sha": "7fb62ca1b7a7db0177e956b2d9f35d46789cfe70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZiNjJjYTFiN2E3ZGIwMTc3ZTk1NmIyZDlmMzVkNDY3ODljZmU3MA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2017-11-16T13:17:19Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-11-16T13:17:19Z"}, "message": "opt.ads: Elaboration warnings are now on by default.\n\n2017-11-16  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* opt.ads: Elaboration warnings are now on by default. Add a comment\n\texplaining why this is needed.\n\t* sem_ch9.adb (Analyze_Requeue): Preserve the status of elaboration\n\twarnings.\n\t* sem_ch12.adb (Analyze_Package_Instantiation): Preserve the status of\n\telaboration warnings.\n\t(Analyze_Subprogram_Instantiation): Preserve the status of elaboration\n\twarnings.\n\t* sem_elab.adb: Update the structure of Call_Attributes and\n\tInstantiation_Attributes.\n\t(Build_Call_Marker): Propagate the status of elaboration warnings from\n\tthe call to the marker.\n\t(Extract_Call_Attributes): Extract the status of elaboration warnings.\n\t(Extract_Instantiation_Attributes): Extract the status of elaboration\n\twarnings.\n\t(Process_Conditional_ABE_Activation_Impl): Elaboration diagnostics are\n\tnow dependent on the status of elaboration warnings.\n\t(Process_Conditional_ABE_Call_Ada): Elaboration diagnostics are now\n\tdependent on the status of elaboration warnings.\n\t(Process_Conditional_ABE_Instantiation_Ada): Elaboration diagnostics\n\tare now dependent on the status of elaboration warnings.\n\t(Process_Guaranteed_ABE_Activation_Impl): Remove pragma Unreferenced\n\tfor formal Call_Attrs. Elaboration diagnostics are now dependent on the\n\tstatus of elaboration warnings.\n\t(Process_Guaranteed_ABE_Call): Elaboration diagnostics are now\n\tdependent on the status of elaboration warnings.\n\t(Process_Guaranteed_ABE_Instantiation): Elaboration diagnostics are now\n\tdependent on the status of elaboration warnings.\n\t* sem_prag.adb (Analyze_Pragma): Remove the unjustified warning\n\tconcerning pragma Elaborate.\n\t* sem_res.adb (Resolve_Call): Preserve the status of elaboration\n\twarnings.\n\t(Resolve_Entry_Call): Propagate flag Is_Elaboration_Warnings_OK_Node\n\tfrom the procedure call to the entry call.\n\t* sem_util.adb (Mark_Elaboration_Attributes): Add formal parameter\n\tWarnings.\n\t(Mark_Elaboration_Attributes_Node): Preserve the status of elaboration\n\twarnings\n\t* sem_util.ads (Mark_Elaboration_Attributes): Add formal parameter\n\tWarnings. Update the comment on usage.\n\t* sinfo.adb (Is_Dispatching_Call): Update to use Flag6.\n\t(Is_Elaboration_Warnings_OK_Node): New routine.\n\t(Set_Is_Dispatching_Call): Update to use Flag6.\n\t(Set_Is_Elaboration_Warnings_OK_Node): New routine.\n\t* sinfo.ads: Attribute Is_Dispatching_Call now uses Flag6. Add new\n\tattribute Is_Elaboration_Warnings_OK_Node along with occurrences\n\tin nodes.\n\t(Is_Elaboration_Warnings_OK_Node): New routine along with pragma\n\tInline.\n\t(Set_Is_Elaboration_Warnings_OK_Node): New routine along with pragma\n\tInline.\n\t* doc/gnat_ugn/elaboration_order_handling_in_gnat.rst: Update various\n\tsections to indicate how to suppress elaboration warnings.  Document\n\tswitches -gnatwl and -gnatwL.\n\t* gnat_ugn.texi: Regenerate.\n\nFrom-SVN: r254819", "tree": {"sha": "96292be8e6c39e5951bbadc87986bde4d634a44e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96292be8e6c39e5951bbadc87986bde4d634a44e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "403bc026aca65b22159955dd4df81eb9b2b407f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/403bc026aca65b22159955dd4df81eb9b2b407f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/403bc026aca65b22159955dd4df81eb9b2b407f4"}], "stats": {"total": 464, "additions": 355, "deletions": 109}, "files": [{"sha": "26457f12c176f37fe316c789fe206d915351fda5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7fb62ca1b7a7db0177e956b2d9f35d46789cfe70", "patch": "@@ -1,3 +1,61 @@\n+2017-11-16  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* opt.ads: Elaboration warnings are now on by default. Add a comment\n+\texplaining why this is needed.\n+\t* sem_ch9.adb (Analyze_Requeue): Preserve the status of elaboration\n+\twarnings.\n+\t* sem_ch12.adb (Analyze_Package_Instantiation): Preserve the status of\n+\telaboration warnings.\n+\t(Analyze_Subprogram_Instantiation): Preserve the status of elaboration\n+\twarnings.\n+\t* sem_elab.adb: Update the structure of Call_Attributes and\n+\tInstantiation_Attributes.\n+\t(Build_Call_Marker): Propagate the status of elaboration warnings from\n+\tthe call to the marker.\n+\t(Extract_Call_Attributes): Extract the status of elaboration warnings.\n+\t(Extract_Instantiation_Attributes): Extract the status of elaboration\n+\twarnings.\n+\t(Process_Conditional_ABE_Activation_Impl): Elaboration diagnostics are\n+\tnow dependent on the status of elaboration warnings.\n+\t(Process_Conditional_ABE_Call_Ada): Elaboration diagnostics are now\n+\tdependent on the status of elaboration warnings.\n+\t(Process_Conditional_ABE_Instantiation_Ada): Elaboration diagnostics\n+\tare now dependent on the status of elaboration warnings.\n+\t(Process_Guaranteed_ABE_Activation_Impl): Remove pragma Unreferenced\n+\tfor formal Call_Attrs. Elaboration diagnostics are now dependent on the\n+\tstatus of elaboration warnings.\n+\t(Process_Guaranteed_ABE_Call): Elaboration diagnostics are now\n+\tdependent on the status of elaboration warnings.\n+\t(Process_Guaranteed_ABE_Instantiation): Elaboration diagnostics are now\n+\tdependent on the status of elaboration warnings.\n+\t* sem_prag.adb (Analyze_Pragma): Remove the unjustified warning\n+\tconcerning pragma Elaborate.\n+\t* sem_res.adb (Resolve_Call): Preserve the status of elaboration\n+\twarnings.\n+\t(Resolve_Entry_Call): Propagate flag Is_Elaboration_Warnings_OK_Node\n+\tfrom the procedure call to the entry call.\n+\t* sem_util.adb (Mark_Elaboration_Attributes): Add formal parameter\n+\tWarnings.\n+\t(Mark_Elaboration_Attributes_Node): Preserve the status of elaboration\n+\twarnings\n+\t* sem_util.ads (Mark_Elaboration_Attributes): Add formal parameter\n+\tWarnings. Update the comment on usage.\n+\t* sinfo.adb (Is_Dispatching_Call): Update to use Flag6.\n+\t(Is_Elaboration_Warnings_OK_Node): New routine.\n+\t(Set_Is_Dispatching_Call): Update to use Flag6.\n+\t(Set_Is_Elaboration_Warnings_OK_Node): New routine.\n+\t* sinfo.ads: Attribute Is_Dispatching_Call now uses Flag6. Add new\n+\tattribute Is_Elaboration_Warnings_OK_Node along with occurrences\n+\tin nodes.\n+\t(Is_Elaboration_Warnings_OK_Node): New routine along with pragma\n+\tInline.\n+\t(Set_Is_Elaboration_Warnings_OK_Node): New routine along with pragma\n+\tInline.\n+\t* doc/gnat_ugn/elaboration_order_handling_in_gnat.rst: Update various\n+\tsections to indicate how to suppress elaboration warnings.  Document\n+\tswitches -gnatwl and -gnatwL.\n+\t* gnat_ugn.texi: Regenerate.\n+\n 2017-11-16  Sylvain Dailler  <dailler@adacore.com>\n \n \t* sem_util.adb (Get_Enum_Lit_From_Pos): Add a condition for Pos"}, {"sha": "57acf53879c4f87fc9a470bbe212221ede63f7e2", "filename": "gcc/ada/doc/gnat_ugn/elaboration_order_handling_in_gnat.rst", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst?ref=7fb62ca1b7a7db0177e956b2d9f35d46789cfe70", "patch": "@@ -690,8 +690,8 @@ dispatching calls and a particular kind of ABE referred to as *guaranteed ABE*.\n Note that GNAT emits warnings rather than hard errors whenever it encounters an\n elaboration problem. This is because the elaboration model in effect may be too\n conservative, or a particular scenario may not be elaborated or executed due to\n-data and control flow. The warnings can be suppressed with compiler switch\n-:switch:`-gnatws`.\n+data and control flow. The warnings can be suppressed selectively with ``pragma\n+Warnigns (Off)`` or globally with compiler switch :switch:`-gnatwL`.\n \n .. _Dynamic_Elaboration_Model_in_GNAT:\n \n@@ -764,8 +764,8 @@ run-time checks based on the nature of the target.\n \n   The static model performs extensive diagnostics on scenarios which elaborate\n   or execute internal targets. The warnings resulting from these diagnostics\n-  are enabled by default, but can be suppressed using compiler switch\n-  :switch:`-gnatws`.\n+  are enabled by default, but can be suppressed selectively with ``pragma\n+  Warnings (Off)`` or globally with compiler switch :switch:`-gnatwL`.\n \n   ::\n \n@@ -1648,6 +1648,47 @@ the elaboration order chosen by the binder.\n   In the example above, the elaboration of declaration ``Ptr`` is assigned\n   ``Func'Access`` before the body of ``Func`` has been elaborated.\n \n+.. index:: -gnatwl  (gnat)\n+\n+:switch:`-gnatwl`\n+  Turn on warnings for elaboration problems\n+\n+  When this switch is in effect, GNAT emits diagnostics in the form of warnings\n+  concerning various elaboration problems. The warnings are enabled by default.\n+  The switch is provided in case all warnings are suppressed, but elaboration\n+  warnings are still desired.\n+\n+:switch:`-gnatwL`\n+  Turn off warnings for elaboration problems\n+\n+  When this switch is in effect, GNAT no longer emits any diagnostics in the\n+  form of warnings. Selective suppression of elaboration problems is possible\n+  using ``pragma Warnings (Off)``.\n+\n+  ::\n+\n+     1. package body Selective_Suppression is\n+     2.    function ABE return Integer;\n+     3.\n+     4.    Val_1 : constant Integer := ABE;\n+                                       |\n+        >>> warning: cannot call \"ABE\" before body seen\n+        >>> warning: Program_Error will be raised at run time\n+\n+     5.\n+     6.    pragma Warnings (Off);\n+     7.    Val_2 : constant Integer := ABE;\n+     8.    pragma Warnings (On);\n+     9.\n+    10.    function ABE return Integer is\n+    11.    begin\n+    12.       ...\n+    13.    end ABE;\n+    14. end Selective_Suppression;\n+\n+  Note that suppressing elaboration warnings does not eliminate run-time\n+  checks. The example above will still fail at runtime with an ABE.\n+\n .. _Summary_of_Procedures_for_Elaboration_Control:\n \n Summary of Procedures for Elaboration Control"}, {"sha": "43ef24596d42e7fdb7e364c6e8c97c873eacf2c7", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 52, "deletions": 5, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=7fb62ca1b7a7db0177e956b2d9f35d46789cfe70", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT User's Guide for Native Platforms , Nov 09, 2017\n+GNAT User's Guide for Native Platforms , Nov 16, 2017\n \n AdaCore\n \n@@ -27897,8 +27897,8 @@ three models:\n Note that GNAT emits warnings rather than hard errors whenever it encounters an\n elaboration problem. This is because the elaboration model in effect may be too\n conservative, or a particular scenario may not be elaborated or executed due to\n-data and control flow. The warnings can be suppressed with compiler switch\n-@code{-gnatws}.\n+data and control flow. The warnings can be suppressed selectively with @code{pragma\n+Warnigns (Off)} or globally with compiler switch @code{-gnatwL}.\n \n @node Dynamic Elaboration Model in GNAT,Static Elaboration Model in GNAT,Common Elaboration-model Traits,Elaboration Order Handling in GNAT\n @anchor{gnat_ugn/elaboration_order_handling_in_gnat dynamic-elaboration-model-in-gnat}@anchor{23e}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id8}@anchor{23f}\n@@ -27975,8 +27975,8 @@ run-time checks based on the nature of the target.\n \n The static model performs extensive diagnostics on scenarios which elaborate\n or execute internal targets. The warnings resulting from these diagnostics\n-are enabled by default, but can be suppressed using compiler switch\n-@code{-gnatws}.\n+are enabled by default, but can be suppressed selectively with @code{pragma\n+Warnings (Off)} or globally with compiler switch @code{-gnatwL}.\n \n @example\n  1. package body Static_Model is\n@@ -28959,6 +28959,53 @@ In the example above, the elaboration of declaration @code{Ptr} is assigned\n @code{Func'Access} before the body of @code{Func} has been elaborated.\n @end table\n \n+@geindex -gnatwl (gnat)\n+\n+\n+@table @asis\n+\n+@item @code{-gnatwl}\n+\n+Turn on warnings for elaboration problems\n+\n+When this switch is in effect, GNAT emits diagnostics in the form of warnings\n+concerning various elaboration problems. The warnings are enabled by default.\n+The switch is provided in case all warnings are suppressed, but elaboration\n+warnings are still desired.\n+\n+@item @code{-gnatwL}\n+\n+Turn off warnings for elaboration problems\n+\n+When this switch is in effect, GNAT no longer emits any diagnostics in the\n+form of warnings. Selective suppression of elaboration problems is possible\n+using @code{pragma Warnings (Off)}.\n+\n+@example\n+ 1. package body Selective_Suppression is\n+ 2.    function ABE return Integer;\n+ 3.\n+ 4.    Val_1 : constant Integer := ABE;\n+                                   |\n+    >>> warning: cannot call \"ABE\" before body seen\n+    >>> warning: Program_Error will be raised at run time\n+\n+ 5.\n+ 6.    pragma Warnings (Off);\n+ 7.    Val_2 : constant Integer := ABE;\n+ 8.    pragma Warnings (On);\n+ 9.\n+10.    function ABE return Integer is\n+11.    begin\n+12.       ...\n+13.    end ABE;\n+14. end Selective_Suppression;\n+@end example\n+\n+Note that suppressing elaboration warnings does not eliminate run-time\n+checks. The example above will still fail at runtime with an ABE.\n+@end table\n+\n @node Summary of Procedures for Elaboration Control,Inspecting the Chosen Elaboration Order,Elaboration-related Compiler Switches,Elaboration Order Handling in GNAT\n @anchor{gnat_ugn/elaboration_order_handling_in_gnat summary-of-procedures-for-elaboration-control}@anchor{24e}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id16}@anchor{24f}\n @section Summary of Procedures for Elaboration Control"}, {"sha": "86a5c35ddcec81b30ab25c00a8b9bbf4e7e2abd7", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=7fb62ca1b7a7db0177e956b2d9f35d46789cfe70", "patch": "@@ -553,9 +553,13 @@ package Opt is\n    --  GNAT\n    --  Set to True to output info messages for static elabmodel (-gnatel)\n \n-   Elab_Warnings : Boolean := False;\n+   Elab_Warnings : Boolean := True;\n    --  GNAT\n-   --  Set to True to generate elaboration warnings (-gnatwl)\n+   --  Set to True to generate elaboration warnings (-gnatwl). The warnings are\n+   --  enabled by default because they carry the same importance as errors. The\n+   --  compiler cannot emit actual errors because elaboration diagnostics need\n+   --  dataflow analysis, which is not available. This behavior parallels that\n+   --  of the old ABE mechanism.\n \n    Error_Msg_Line_Length : Nat := 0;\n    --  GNAT"}, {"sha": "afa58f43bae3ca8be2adcb370b60349aae6d7732", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=7fb62ca1b7a7db0177e956b2d9f35d46789cfe70", "patch": "@@ -3943,10 +3943,11 @@ package body Sem_Ch12 is\n       --  resolution, and expansion are over.\n \n       Mark_Elaboration_Attributes\n-        (N_Id   => N,\n-         Checks => True,\n-         Level  => True,\n-         Modes  => True);\n+        (N_Id     => N,\n+         Checks   => True,\n+         Level    => True,\n+         Modes    => True,\n+         Warnings => True);\n \n       Check_SPARK_05_Restriction (\"generic is not allowed\", N);\n \n@@ -5393,10 +5394,11 @@ package body Sem_Ch12 is\n       --  resolution, and expansion are over.\n \n       Mark_Elaboration_Attributes\n-        (N_Id   => N,\n-         Checks => True,\n-         Level  => True,\n-         Modes  => True);\n+        (N_Id     => N,\n+         Checks   => True,\n+         Level    => True,\n+         Modes    => True,\n+         Warnings => True);\n \n       Check_SPARK_05_Restriction (\"generic is not allowed\", N);\n "}, {"sha": "e1631357f1c0b9967f2c4f818b6c35447215bb03", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=7fb62ca1b7a7db0177e956b2d9f35d46789cfe70", "patch": "@@ -2295,9 +2295,10 @@ package body Sem_Ch9 is\n       --  resolution, and expansion are over.\n \n       Mark_Elaboration_Attributes\n-        (N_Id   => N,\n-         Checks => True,\n-         Modes  => True);\n+        (N_Id     => N,\n+         Checks   => True,\n+         Modes    => True,\n+         Warnings => True);\n \n       Tasking_Used := True;\n       Check_SPARK_05_Restriction (\"requeue statement is not allowed\", N);"}, {"sha": "b34523f31f23bc888be092ec0af212808b0e2a9d", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 64, "deletions": 41, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=7fb62ca1b7a7db0177e956b2d9f35d46789cfe70", "patch": "@@ -444,15 +444,6 @@ package body Sem_Elab is\n    --\n    --           The complimentary switch for -gnatel.\n    --\n-   --  -gnatwl  turn on warnings for elaboration problems\n-   --\n-   --           The ABE mechanism produces warnings on detected ABEs along with\n-   --           traceback showing the graph of the ABE.\n-   --\n-   --  -gnatwL  turn off warnings for elaboration problems\n-   --\n-   --           The complimentary switch for -gnatwl.\n-   --\n    --  -gnatw.f turn on warnings for suspicious Subp'Access\n    --\n    --           The ABE mechanism treats '[Unrestricted_]Access of an entry,\n@@ -462,6 +453,15 @@ package body Sem_Elab is\n    --  -gnatw.F turn off warnings for suspicious Subp'Access\n    --\n    --           The complimentary switch for -gnatw.f.\n+   --\n+   --  -gnatwl  turn on warnings for elaboration problems\n+   --\n+   --           The ABE mechanism produces warnings on detected ABEs along with\n+   --           traceback showing the graph of the ABE.\n+   --\n+   --  -gnatwL  turn off warnings for elaboration problems\n+   --\n+   --           The complimentary switch for -gnatwl.\n \n    ---------------------------\n    -- Adding a new scenario --\n@@ -567,6 +567,9 @@ package body Sem_Elab is\n       Elab_Checks_OK : Boolean;\n       --  This flag is set when the call has elaboration checks enabled\n \n+      Elab_Warnings_OK : Boolean;\n+      --  This flag is set when the call has elaboration warnings elabled\n+\n       From_Source : Boolean;\n       --  This flag is set when the call comes from source\n \n@@ -622,6 +625,10 @@ package body Sem_Elab is\n       --  This flag is set when the instantiation has elaboration checks\n       --  enabled.\n \n+      Elab_Warnings_OK : Boolean;\n+      --  This flag is set when the instantiation has elaboration warnings\n+      --  enabled.\n+\n       Ghost_Mode_Ignore : Boolean;\n       --  This flag is set when the instantiation appears in a region subject\n       --  to pragma Ghost with policy ignore, or starts one such region.\n@@ -1519,7 +1526,7 @@ package body Sem_Elab is\n       In_Partial_Fin : Boolean;\n       In_Task_Body   : Boolean);\n    --  Perform common conditional ABE checks and diagnostics for call Call\n-   --  which activates task Obj_Id ignoring the Ada or SPARK rules. CAll_Attrs\n+   --  which activates task Obj_Id ignoring the Ada or SPARK rules. Call_Attrs\n    --  are the attributes of the activation call. Task_Attrs are the attributes\n    --  of the task type. The flags should be set when the processing was\n    --  initiated as follows:\n@@ -1657,11 +1664,11 @@ package body Sem_Elab is\n       In_Partial_Fin : Boolean;\n       In_Task_Body   : Boolean);\n    --  Perform common guaranteed ABE checks and diagnostics for call Call which\n-   --  activates task Obj_Id ignoring the Ada or SPARK rules. Task_Attrs are\n-   --  the attributes of the task type. The following parameters are provided\n-   --  for compatibility and are unused.\n+   --  activates task Obj_Id ignoring the Ada or SPARK rules. Call_Attrs are\n+   --  the attributes of the activation call. Task_Attrs are the attributes of\n+   --  the task type. The following parameters are provided for compatibility\n+   --  and are not used.\n    --\n-   --    Call_Attrs\n    --    In_Init_Cond\n    --    In_Partial_Fin\n    --    In_Task_Body\n@@ -2057,13 +2064,16 @@ package body Sem_Elab is\n \n       --  Inherit the attributes of the original call\n \n-      Set_Target                        (Marker, Target_Id);\n-      Set_Is_Elaboration_Checks_OK_Node (Marker, Call_Attrs.Elab_Checks_OK);\n-      Set_Is_Declaration_Level_Node     (Marker, Call_Attrs.In_Declarations);\n-      Set_Is_Dispatching_Call           (Marker, Call_Attrs.Is_Dispatching);\n-      Set_Is_Ignored_Ghost_Node         (Marker, Call_Attrs.Ghost_Mode_Ignore);\n-      Set_Is_Source_Call                (Marker, Call_Attrs.From_Source);\n-      Set_Is_SPARK_Mode_On_Node         (Marker, Call_Attrs.SPARK_Mode_On);\n+      Set_Target                    (Marker, Target_Id);\n+      Set_Is_Declaration_Level_Node (Marker, Call_Attrs.In_Declarations);\n+      Set_Is_Dispatching_Call       (Marker, Call_Attrs.Is_Dispatching);\n+      Set_Is_Elaboration_Checks_OK_Node\n+                                    (Marker, Call_Attrs.Elab_Checks_OK);\n+      Set_Is_Elaboration_Warnings_OK_Node\n+                                    (Marker, Call_Attrs.Elab_Warnings_OK);\n+      Set_Is_Ignored_Ghost_Node     (Marker, Call_Attrs.Ghost_Mode_Ignore);\n+      Set_Is_Source_Call            (Marker, Call_Attrs.From_Source);\n+      Set_Is_SPARK_Mode_On_Node     (Marker, Call_Attrs.SPARK_Mode_On);\n \n       --  The marker is inserted prior to the original call. This placement has\n       --  several desirable effects:\n@@ -3567,6 +3577,7 @@ package body Sem_Elab is\n       --  Set all attributes\n \n       Attrs.Elab_Checks_OK    := Is_Elaboration_Checks_OK_Node (Call);\n+      Attrs.Elab_Warnings_OK  := Is_Elaboration_Warnings_OK_Node (Call);\n       Attrs.From_Source       := From_Source;\n       Attrs.Ghost_Mode_Ignore := Is_Ignored_Ghost_Node (Call);\n       Attrs.In_Declarations   := In_Declarations;\n@@ -3653,8 +3664,8 @@ package body Sem_Elab is\n       Attrs    : out Instantiation_Attributes)\n    is\n    begin\n-      Inst     := Original_Node (Exp_Inst);\n-      Inst_Id  := Defining_Entity (Inst);\n+      Inst    := Original_Node (Exp_Inst);\n+      Inst_Id := Defining_Entity (Inst);\n \n       --  Traverse a possible chain of renamings to obtain the original generic\n       --  being instantiatied.\n@@ -3664,6 +3675,7 @@ package body Sem_Elab is\n       --  Set all attributes\n \n       Attrs.Elab_Checks_OK    := Is_Elaboration_Checks_OK_Node (Inst);\n+      Attrs.Elab_Warnings_OK  := Is_Elaboration_Warnings_OK_Node (Inst);\n       Attrs.Ghost_Mode_Ignore := Is_Ignored_Ghost_Node (Inst);\n       Attrs.In_Declarations   := Is_Declaration_Level_Node (Inst);\n       Attrs.SPARK_Mode_On     := Is_SPARK_Mode_On_Node (Inst);\n@@ -8679,7 +8691,9 @@ package body Sem_Elab is\n             --  this order diagnostics appear jumbled and result in unwanted\n             --  noise.\n \n-            elsif Static_Elaboration_Checks then\n+            elsif Static_Elaboration_Checks\n+              and then Call_Attrs.Elab_Warnings_OK\n+            then\n                Error_Msg_Sloc := Sloc (Call);\n                Error_Msg_N\n                  (\"??task & will be activated # before elaboration of its \"\n@@ -9068,7 +9082,9 @@ package body Sem_Elab is\n             --  this order diagnostics appear jumbled and result in unwanted\n             --  noise.\n \n-            elsif Static_Elaboration_Checks then\n+            elsif Static_Elaboration_Checks\n+              and then Call_Attrs.Elab_Warnings_OK\n+            then\n                Error_Msg_NE\n                  (\"??cannot call & before body seen\", Call, Target_Id);\n                Error_Msg_N (\"\\Program_Error may be raised at run time\", Call);\n@@ -9500,7 +9516,9 @@ package body Sem_Elab is\n             --  this order diagnostics appear jumbled and result in unwanted\n             --  noise.\n \n-            elsif Static_Elaboration_Checks then\n+            elsif Static_Elaboration_Checks\n+              and then Inst_Attrs.Elab_Warnings_OK\n+            then\n                Error_Msg_NE\n                  (\"??cannot instantiate & before body seen\", Inst, Gen_Id);\n                Error_Msg_N (\"\\Program_Error may be raised at run time\", Inst);\n@@ -9668,10 +9686,6 @@ package body Sem_Elab is\n         and then not Is_Initialized (Var_Decl)\n         and then not Has_Pragma_Elaborate_Body (Spec_Id)\n       then\n-         --  Generate an implicit Elaborate_Body in the spec\n-\n-         Set_Elaborate_Body_Desirable (Spec_Id);\n-\n          Error_Msg_NE\n            (\"??variable & can be accessed by clients before this \"\n             & \"initialization\", Asmt, Var_Id);\n@@ -9681,6 +9695,10 @@ package body Sem_Elab is\n             & \"initialization\", Asmt, Spec_Id);\n \n          Output_Active_Scenarios (Asmt);\n+\n+         --  Generate an implicit Elaborate_Body in the spec\n+\n+         Set_Elaborate_Body_Desirable (Spec_Id);\n       end if;\n    end Process_Conditional_ABE_Variable_Assignment_Ada;\n \n@@ -9905,7 +9923,6 @@ package body Sem_Elab is\n       In_Partial_Fin : Boolean;\n       In_Task_Body   : Boolean)\n    is\n-      pragma Unreferenced (Call_Attrs);\n       pragma Unreferenced (In_Init_Cond);\n       pragma Unreferenced (In_Partial_Fin);\n       pragma Unreferenced (In_Task_Body);\n@@ -10017,11 +10034,13 @@ package body Sem_Elab is\n                Target_Decl => Task_Attrs.Task_Decl,\n                Target_Body => Task_Attrs.Body_Decl)\n       then\n-         Error_Msg_Sloc := Sloc (Call);\n-         Error_Msg_N\n-           (\"??task & will be activated # before elaboration of its body\",\n-            Obj_Id);\n-         Error_Msg_N (\"\\Program_Error will be raised at run time\", Obj_Id);\n+         if Call_Attrs.Elab_Warnings_OK then\n+            Error_Msg_Sloc := Sloc (Call);\n+            Error_Msg_N\n+              (\"??task & will be activated # before elaboration of its body\",\n+               Obj_Id);\n+            Error_Msg_N (\"\\Program_Error will be raised at run time\", Obj_Id);\n+         end if;\n \n          --  Mark the activation call as a guaranteed ABE\n \n@@ -10130,8 +10149,10 @@ package body Sem_Elab is\n                Target_Decl => Target_Attrs.Spec_Decl,\n                Target_Body => Target_Attrs.Body_Decl)\n       then\n-         Error_Msg_NE (\"??cannot call & before body seen\", Call, Target_Id);\n-         Error_Msg_N (\"\\Program_Error will be raised at run time\", Call);\n+         if Call_Attrs.Elab_Warnings_OK then\n+            Error_Msg_NE (\"??cannot call & before body seen\", Call, Target_Id);\n+            Error_Msg_N (\"\\Program_Error will be raised at run time\", Call);\n+         end if;\n \n          --  Mark the call as a guarnateed ABE\n \n@@ -10253,9 +10274,11 @@ package body Sem_Elab is\n                Target_Decl => Gen_Attrs.Spec_Decl,\n                Target_Body => Gen_Attrs.Body_Decl)\n       then\n-         Error_Msg_NE\n-           (\"??cannot instantiate & before body seen\", Inst, Gen_Id);\n-         Error_Msg_N (\"\\Program_Error will be raised at run time\", Inst);\n+         if Inst_Attrs.Elab_Warnings_OK then\n+            Error_Msg_NE\n+              (\"??cannot instantiate & before body seen\", Inst, Gen_Id);\n+            Error_Msg_N (\"\\Program_Error will be raised at run time\", Inst);\n+         end if;\n \n          --  Mark the instantiation as a guarantee ABE. This automatically\n          --  suppresses the instantiation of the generic body."}, {"sha": "17ce6ac3b6275c0e099b20c1f16e8a09e50480e4", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=7fb62ca1b7a7db0177e956b2d9f35d46789cfe70", "patch": "@@ -15021,24 +15021,6 @@ package body Sem_Prag is\n \n                Next (Arg);\n             end loop Outer;\n-\n-            --  Give a warning if operating in static mode with one of the\n-            --  gnatwl/-gnatwE (elaboration warnings enabled) switches set.\n-\n-            if Elab_Warnings\n-              and not Dynamic_Elaboration_Checks\n-\n-              --  pragma Elaborate not allowed in SPARK mode anyway. We\n-              --  already complained about it, no point in generating any\n-              --  further complaint.\n-\n-              and SPARK_Mode /= On\n-            then\n-               Error_Msg_N\n-                 (\"?l?use of pragma Elaborate may not be safe\", N);\n-               Error_Msg_N\n-                 (\"?l?use pragma Elaborate_All instead if possible\", N);\n-            end if;\n          end Elaborate;\n \n          -------------------"}, {"sha": "434879386b465e0d78ed12b98de9939d1ebea1e7", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=7fb62ca1b7a7db0177e956b2d9f35d46789cfe70", "patch": "@@ -5830,9 +5830,10 @@ package body Sem_Res is\n       --  resolution, and expansion are over.\n \n       Mark_Elaboration_Attributes\n-        (N_Id   => N,\n-         Checks => True,\n-         Modes  => True);\n+        (N_Id     => N,\n+         Checks   => True,\n+         Modes    => True,\n+         Warnings => True);\n \n       --  The context imposes a unique interpretation with type Typ on a\n       --  procedure or function call. Find the entity of the subprogram that\n@@ -7833,6 +7834,9 @@ package body Sem_Res is\n             Set_Is_Elaboration_Checks_OK_Node\n               (Entry_Call, Is_Elaboration_Checks_OK_Node (N));\n \n+            Set_Is_Elaboration_Warnings_OK_Node\n+              (Entry_Call, Is_Elaboration_Warnings_OK_Node (N));\n+\n             Set_Is_SPARK_Mode_On_Node\n               (Entry_Call, Is_SPARK_Mode_On_Node (N));\n "}, {"sha": "f58211328edb427d588d4230d417fb769347899f", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=7fb62ca1b7a7db0177e956b2d9f35d46789cfe70", "patch": "@@ -17827,10 +17827,11 @@ package body Sem_Util is\n    ---------------------------------\n \n    procedure Mark_Elaboration_Attributes\n-     (N_Id   : Node_Or_Entity_Id;\n-      Checks : Boolean := False;\n-      Level  : Boolean := False;\n-      Modes  : Boolean := False)\n+     (N_Id     : Node_Or_Entity_Id;\n+      Checks   : Boolean := False;\n+      Level    : Boolean := False;\n+      Modes    : Boolean := False;\n+      Warnings : Boolean := False)\n    is\n       function Elaboration_Checks_OK\n         (Target_Id  : Entity_Id;\n@@ -18013,6 +18014,13 @@ package body Sem_Util is\n                Set_Is_SPARK_Mode_On_Node (N);\n             end if;\n          end if;\n+\n+         --  Mark the status of elaboration warnings in effect. Do not reset\n+         --  the status in case the node is reanalyzed with warnings off.\n+\n+         if Warnings and then not Is_Elaboration_Warnings_OK_Node (N) then\n+            Set_Is_Elaboration_Warnings_OK_Node (N, Elab_Warnings);\n+         end if;\n       end Mark_Elaboration_Attributes_Node;\n \n    --  Start of processing for Mark_Elaboration_Attributes"}, {"sha": "c2d67f8e94dbe9e0713085691c40dc6a085b43a2", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=7fb62ca1b7a7db0177e956b2d9f35d46789cfe70", "patch": "@@ -2087,16 +2087,19 @@ package Sem_Util is\n    --  cleaned up during resolution.\n \n    procedure Mark_Elaboration_Attributes\n-     (N_Id   : Node_Or_Entity_Id;\n-      Checks : Boolean := False;\n-      Level  : Boolean := False;\n-      Modes  : Boolean := False);\n+     (N_Id     : Node_Or_Entity_Id;\n+      Checks   : Boolean := False;\n+      Level    : Boolean := False;\n+      Modes    : Boolean := False;\n+      Warnings : Boolean := False);\n    --  Preserve relevant elaboration-related properties of the context in\n-   --  arbitrary entity or node N_Id. When flag Checks is set, the routine\n-   --  saves the status of Elaboration_Check. When flag Level is set, the\n-   --  routine captures the declaration level of N_Id if applicable. When\n-   --  flag Modes is set, the routine saves the Ghost and SPARK modes in\n-   --  effect if applicable.\n+   --  arbitrary entity or node N_Id. The flags control the properties as\n+   --  follows:\n+   --\n+   --    Checks   - Save the status of Elaboration_Check\n+   --    Level    - Save the declaration level of N_Id (if appicable)\n+   --    Modes    - Save the Ghost and SPARK modes in effect (if applicable)\n+   --    Warnings - Save the status of Elab_Warnings\n \n    function Matching_Static_Array_Bounds\n      (L_Typ : Node_Id;"}, {"sha": "afb3ece1fb43b398b2cd2f9ddcd6742d494dd257", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=7fb62ca1b7a7db0177e956b2d9f35d46789cfe70", "patch": "@@ -1886,7 +1886,7 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Call_Marker);\n-      return Flag3 (N);\n+      return Flag6 (N);\n    end Is_Dispatching_Call;\n \n    function Is_Dynamic_Coextension\n@@ -1933,6 +1933,21 @@ package body Sinfo is\n       return Flag9 (N);\n    end Is_Elaboration_Code;\n \n+   function Is_Elaboration_Warnings_OK_Node\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Call_Marker\n+        or else NT (N).Nkind = N_Entry_Call_Statement\n+        or else NT (N).Nkind = N_Function_Call\n+        or else NT (N).Nkind = N_Function_Instantiation\n+        or else NT (N).Nkind = N_Package_Instantiation\n+        or else NT (N).Nkind = N_Procedure_Call_Statement\n+        or else NT (N).Nkind = N_Procedure_Instantiation\n+        or else NT (N).Nkind = N_Requeue_Statement);\n+      return Flag3 (N);\n+   end Is_Elaboration_Warnings_OK_Node;\n+\n    function Is_Elsif\n       (N : Node_Id) return Boolean is\n    begin\n@@ -5322,7 +5337,7 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Call_Marker);\n-      Set_Flag3 (N, Val);\n+      Set_Flag6 (N, Val);\n    end Set_Is_Dispatching_Call;\n \n    procedure Set_Is_Dynamic_Coextension\n@@ -5369,6 +5384,21 @@ package body Sinfo is\n       Set_Flag9 (N, Val);\n    end Set_Is_Elaboration_Code;\n \n+   procedure Set_Is_Elaboration_Warnings_OK_Node\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Call_Marker\n+        or else NT (N).Nkind = N_Entry_Call_Statement\n+        or else NT (N).Nkind = N_Function_Call\n+        or else NT (N).Nkind = N_Function_Instantiation\n+        or else NT (N).Nkind = N_Package_Instantiation\n+        or else NT (N).Nkind = N_Procedure_Call_Statement\n+        or else NT (N).Nkind = N_Procedure_Instantiation\n+        or else NT (N).Nkind = N_Requeue_Statement);\n+      Set_Flag3 (N, Val);\n+   end Set_Is_Elaboration_Warnings_OK_Node;\n+\n    procedure Set_Is_Elsif\n       (N : Node_Id; Val : Boolean := True) is\n    begin"}, {"sha": "278b456e9d11c429361af29492784859fdeb13c5", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 53, "deletions": 10, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb62ca1b7a7db0177e956b2d9f35d46789cfe70/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=7fb62ca1b7a7db0177e956b2d9f35d46789cfe70", "patch": "@@ -1709,7 +1709,7 @@ package Sinfo is\n    --    If this flag is set, the aspect or policy is not analyzed for semantic\n    --    correctness, so any expressions etc will not be marked as analyzed.\n \n-   --  Is_Dispatching_Call (Flag3-Sem)\n+   --  Is_Dispatching_Call (Flag6-Sem)\n    --    Present in call marker nodes. Set when the related call which prompted\n    --    the creation of the marker is dispatching.\n \n@@ -1724,19 +1724,46 @@ package Sinfo is\n    --    a use clause is \"used\" in the current source.\n \n    --  Is_Elaboration_Checks_OK_Node (Flag1-Sem)\n-   --    Present in nodes which represent an elaboration scenario. Those are\n-   --    assignment statement, attribute reference, call marker, entry call\n-   --    statement, expanded name, function call, identifier, instantiation,\n-   --    procedure call statement, and requeue statement nodes. Set when the\n-   --    node appears within a context which allows for the generation of\n-   --    run-time ABE checks. This flag detemines whether the ABE Processing\n+   --    Present in the following nodes:\n+   --\n+   --      assignment statement\n+   --      attribute reference\n+   --      call marker\n+   --      entry call statement\n+   --      expanded name\n+   --      function call\n+   --      function instantiation\n+   --      identifier\n+   --      package instantiation\n+   --      procedure call statement\n+   --      procedure instantiation\n+   --      requeue statement\n+   --\n+   --    Set when the node appears within a context which allows the generation\n+   --    of run-time ABE checks. This flag detemines whether the ABE Processing\n    --    phase generates conditional ABE checks and guaranteed ABE failures.\n \n    --  Is_Elaboration_Code (Flag9-Sem)\n    --    Present in assignment statements. Set for an assignment which updates\n    --    the elaboration flag of a package or subprogram when the corresponding\n    --    body is successfully elaborated.\n \n+   --  Is_Elaboration_Warnings_OK_Node (Flag3-Sem)\n+   --    Present in the following nodes:\n+   --\n+   --      call marker\n+   --      entry call statement\n+   --      function call\n+   --      function instantiation\n+   --      package instantiation\n+   --      procedure call statement\n+   --      procedure instantiation\n+   --      requeue statement\n+   --\n+   --    Set when the node appears within a context where elaboration warnings\n+   --    are enabled. This flag determines whether the ABE processing phase\n+   --    generates diagnostics on various elaboration issues.\n+\n    --  Is_Entry_Barrier_Function (Flag8-Sem)\n    --    This flag is set on N_Subprogram_Declaration and N_Subprogram_Body\n    --    nodes which emulate the barrier function of a protected entry body.\n@@ -5487,6 +5514,7 @@ package Sinfo is\n       --  Controlling_Argument (Node1-Sem) (set to Empty if not dispatching)\n       --  Is_Elaboration_Checks_OK_Node (Flag1-Sem)\n       --  Is_SPARK_Mode_On_Node (Flag2-Sem)\n+      --  Is_Elaboration_Warnings_OK_Node (Flag3-Sem)\n       --  Do_Tag_Check (Flag13-Sem)\n       --  plus fields for expression\n \n@@ -5517,6 +5545,7 @@ package Sinfo is\n       --  Controlling_Argument (Node1-Sem) (set to Empty if not dispatching)\n       --  Is_Elaboration_Checks_OK_Node (Flag1-Sem)\n       --  Is_SPARK_Mode_On_Node (Flag2-Sem)\n+      --  Is_Elaboration_Warnings_OK_Node (Flag3-Sem)\n       --  Is_Expanded_Build_In_Place_Call (Flag11-Sem)\n       --  Do_Tag_Check (Flag13-Sem)\n       --  No_Side_Effect_Removal (Flag17-Sem)\n@@ -6230,6 +6259,7 @@ package Sinfo is\n       --  First_Named_Actual (Node4-Sem)\n       --  Is_Elaboration_Checks_OK_Node (Flag1-Sem)\n       --  Is_SPARK_Mode_On_Node (Flag2-Sem)\n+      --  Is_Elaboration_Warnings_OK_Node (Flag3-Sem)\n \n       ------------------------------\n       -- 9.5.4  Requeue Statement --\n@@ -6247,6 +6277,7 @@ package Sinfo is\n       --  Abort_Present (Flag15)\n       --  Is_Elaboration_Checks_OK_Node (Flag1-Sem)\n       --  Is_SPARK_Mode_On_Node (Flag2-Sem)\n+      --  Is_Elaboration_Warnings_OK_Node (Flag3-Sem)\n \n       --------------------------\n       -- 9.6  Delay Statement --\n@@ -7044,6 +7075,7 @@ package Sinfo is\n       --  Instance_Spec (Node5-Sem)\n       --  Is_Elaboration_Checks_OK_Node (Flag1-Sem)\n       --  Is_SPARK_Mode_On_Node (Flag2-Sem)\n+      --  Is_Elaboration_Warnings_OK_Node (Flag3-Sem)\n       --  Is_Declaration_Level_Node (Flag5-Sem)\n       --  Is_Known_Guaranteed_ABE (Flag18-Sem)\n \n@@ -7057,6 +7089,7 @@ package Sinfo is\n       --  Instance_Spec (Node5-Sem)\n       --  Is_Elaboration_Checks_OK_Node (Flag1-Sem)\n       --  Is_SPARK_Mode_On_Node (Flag2-Sem)\n+      --  Is_Elaboration_Warnings_OK_Node (Flag3-Sem)\n       --  Is_Declaration_Level_Node (Flag5-Sem)\n       --  Must_Override (Flag14) set if overriding indicator present\n       --  Must_Not_Override (Flag15) set if not_overriding indicator present\n@@ -7072,6 +7105,7 @@ package Sinfo is\n       --  Instance_Spec (Node5-Sem)\n       --  Is_Elaboration_Checks_OK_Node (Flag1-Sem)\n       --  Is_SPARK_Mode_On_Node (Flag2-Sem)\n+      --  Is_Elaboration_Warnings_OK_Node (Flag3-Sem)\n       --  Is_Declaration_Level_Node (Flag5-Sem)\n       --  Must_Override (Flag14) set if overriding indicator present\n       --  Must_Not_Override (Flag15) set if not_overriding indicator present\n@@ -7827,9 +7861,10 @@ package Sinfo is\n       --  Target (Node1-Sem)\n       --  Is_Elaboration_Checks_OK_Node (Flag1-Sem)\n       --  Is_SPARK_Mode_On_Node (Flag2-Sem)\n-      --  Is_Dispatching_Call (Flag3-Sem)\n+      --  Is_Elaboration_Warnings_OK_Node (Flag3-Sem)\n       --  Is_Source_Call (Flag4-Sem)\n       --  Is_Declaration_Level_Node (Flag5-Sem)\n+      --  Is_Dispatching_Call (Flag6-Sem)\n       --  Is_Known_Guaranteed_ABE (Flag18-Sem)\n \n       ------------------------\n@@ -9699,7 +9734,7 @@ package Sinfo is\n      (N : Node_Id) return Boolean;    -- Flag15\n \n    function Is_Dispatching_Call\n-     (N : Node_Id) return Boolean;    -- Flag3\n+     (N : Node_Id) return Boolean;    -- Flag6\n \n    function Is_Dynamic_Coextension\n      (N : Node_Id) return Boolean;    -- Flag18\n@@ -9713,6 +9748,9 @@ package Sinfo is\n    function Is_Elaboration_Code\n      (N : Node_Id) return Boolean;    -- Flag9\n \n+   function Is_Elaboration_Warnings_OK_Node\n+     (N : Node_Id) return Boolean;    -- Flag3\n+\n    function Is_Elsif\n      (N : Node_Id) return Boolean;    -- Flag13\n \n@@ -10794,7 +10832,7 @@ package Sinfo is\n      (N : Node_Id; Val : Boolean := True);    -- Flag15\n \n    procedure Set_Is_Dispatching_Call\n-     (N : Node_Id; Val : Boolean := True);    -- Flag3\n+     (N : Node_Id; Val : Boolean := True);    -- Flag6\n \n    procedure Set_Is_Dynamic_Coextension\n      (N : Node_Id; Val : Boolean := True);    -- Flag18\n@@ -10808,6 +10846,9 @@ package Sinfo is\n    procedure Set_Is_Elaboration_Code\n      (N : Node_Id; Val : Boolean := True);    -- Flag9\n \n+   procedure Set_Is_Elaboration_Warnings_OK_Node\n+     (N : Node_Id; Val : Boolean := True);    -- Flag3\n+\n    procedure Set_Is_Elsif\n      (N : Node_Id; Val : Boolean := True);    -- Flag13\n \n@@ -13340,6 +13381,7 @@ package Sinfo is\n    pragma Inline (Is_Effective_Use_Clause);\n    pragma Inline (Is_Elaboration_Checks_OK_Node);\n    pragma Inline (Is_Elaboration_Code);\n+   pragma Inline (Is_Elaboration_Warnings_OK_Node);\n    pragma Inline (Is_Elsif);\n    pragma Inline (Is_Entry_Barrier_Function);\n    pragma Inline (Is_Expanded_Build_In_Place_Call);\n@@ -13700,6 +13742,7 @@ package Sinfo is\n    pragma Inline (Set_Is_Effective_Use_Clause);\n    pragma Inline (Set_Is_Elaboration_Checks_OK_Node);\n    pragma Inline (Set_Is_Elaboration_Code);\n+   pragma Inline (Set_Is_Elaboration_Warnings_OK_Node);\n    pragma Inline (Set_Is_Elsif);\n    pragma Inline (Set_Is_Entry_Barrier_Function);\n    pragma Inline (Set_Is_Expanded_Build_In_Place_Call);"}]}