{"sha": "19e7881c81752c856edb9f71db93805ce0416be6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTllNzg4MWM4MTc1MmM4NTZlZGI5ZjcxZGI5MzgwNWNlMDQxNmJlNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-03-15T02:51:03Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-03-15T02:51:03Z"}, "message": "varasm.c (assemble_alias): Use DECL_ASSEMBLER_NAME...\n\n\t* varasm.c (assemble_alias): Use DECL_ASSEMBLER_NAME, not the\n\tcontents of the RTL, to determine the name of the object.\n\n\t* tree.h (DECL_RTL): Allocate RTL lazily.\n\t(SET_DECL_RTL): New macro.\n\t(DECL_RTL_SET_P): Likewise.\n\t(COPY_DECL_RTL): Likewise.\n\t(DECL_RTL_IF_SET): Likewise.\n\t* varasm.c (make_decl_rtl): Add assertions about the kind of\n\tdeclaration we are processing.\n\t* c-decl.c (duplicate_decls): Use COPY_DECL_RTL, DECL_RTL_SET_P, etc.\n\t(start_decl): Likewise.\n\t(finish_decl): Likewise.\n\t* c-semantics.c (emit_local_var): Likewise.\n\t* calls.c (expand_call): Likewise.\n\t* dbxout.c (dbxout_symbol): Likewise.\n\t* emit-rtl.c (unshare_all_rtl): Likewise.\n\t(unshare_all_decls): Likewise.\n\t(reset_used_decls): Likewise.\n\t* expr.c (store_constructor): Likewise.\n\t(safe_from_p): Likewise.\n\t(expand_expr): Likewise.\n\t* function.c (put_var_into_stack): Likewise.\n\t(instantiate_decls_1): Likewise.\n\t(assign_parms): Likewise.\n\t(expand_function_start): Likewise.\n\t(expand_function_end): Likewise.\n\t* ggc-common.c (gcc_mark_trees): Likewise.\n\t* integrate.c (function_cannot_inline_p): Likewise.\n\t(copy_decl_for_inlining): Likewise.\n\t(expand_inline_function): Likewise.\n\t(integrate_parm_decls): Likewise.\n\t(integrate_decl_tree): Likewise.\n\t* print-tree.c (print_node): Likewise.\n\t* reg-stack.c (stack_result): Likewise.\n\t* stmt.c (label_rtx): Likewise.\n\t(expand_return): Likewise.\n\t(expand_decl): Likewise.\n\t(expand_decl_cleanup): Likewise.\n\t(expand_anon_union_decl): Likewise.\n\t* toplev.c (check_global_declarations): Likewise.\n\t(rest_of_decl_compilation): Likewise.\n\t* tree.c (simple_cst_equal): Likewise.\n\t* objc/objc-act.c (generate_static_references): Likewise.\n\n\t* class.c (build_clone): Use COPY_DECL_RTL, DECL_RTL_SET_P, etc.\n\t* cp-tree.h (DECL_IN_MEMORY_P): Likewise.\n\t* decl.c (duplicate_decls): Likewise.\n\t(builtin_function): Likewise.\n\t(build_library_fn): Likewise.\n\t(build_cp_library_fn): Likewise.\n\t(check_initializer): Likewise.\n\t(cp_finish_decl): Likewise.\n\t* decl2.c (grokfield): Likewise.\n\t(grok_function_init): Remove #if 0'd code.\n\t(finish_anon_union): Use COPY_DECL_RTL, DECL_RTL_SET_P, etc.\n\t* friend.c (do_friend): Likewise.\n\t* init.c (get_temp_regvar): Likewise.\n\t* method.c (make_thunk): Likewise.\n\t* pt.c (tsubst_friend_function): Likewise.\n\t(tsubst_decl): Likewise.\n\t(regenerate_decl_from_template): Likewise.\n\t* semantics.c (genrtl_named_return_value): Likewise.\n\t(expand_body): Likewise.\n\t(genrtl_finish_function): Likewise.\n\t* tree.c (cp_tree_equal): Likewise.\n\n\t* com.c (ffecom_member_phase_2): Use COPY_DECL_RTL,\n\tDECL_RTL_SET_P, etc.\n\t(duplicate_decls): Likewise.\n\t(start_decl): Likewise.\n\n\t* class.c (build_static_field_ref): Likewise.\n\t(make_method_value): Likewise.\n\t(get_dispatch_table): Likewise.\n\n\t* decl.c (push_jvm_slot): Use COPY_DECL_RTL, DECL_RTL_SET_P, etc.\n\nFrom-SVN: r40482", "tree": {"sha": "e937810f6aadde94067b96c8f65cc56fba667d87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e937810f6aadde94067b96c8f65cc56fba667d87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19e7881c81752c856edb9f71db93805ce0416be6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19e7881c81752c856edb9f71db93805ce0416be6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19e7881c81752c856edb9f71db93805ce0416be6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19e7881c81752c856edb9f71db93805ce0416be6/comments", "author": null, "committer": null, "parents": [{"sha": "b894530e6d9633fc6497b3c404a3ec1bd1a341df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b894530e6d9633fc6497b3c404a3ec1bd1a341df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b894530e6d9633fc6497b3c404a3ec1bd1a341df"}], "stats": {"total": 451, "additions": 286, "deletions": 165}, "files": [{"sha": "12c04efe6a52b2d4d2bc605b9900b266fc89cd8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -1,3 +1,52 @@\n+2001-03-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* varasm.c (assemble_alias): Use DECL_ASSEMBLER_NAME, not the\n+\tcontents of the RTL, to determine the name of the object.\n+\n+2001-03-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* tree.h (DECL_RTL): Allocate RTL lazily.\n+\t(SET_DECL_RTL): New macro.\n+\t(DECL_RTL_SET_P): Likewise.\n+\t(COPY_DECL_RTL): Likewise.\n+\t(DECL_RTL_IF_SET): Likewise.\n+\t* varasm.c (make_decl_rtl): Add assertions about the kind of\n+\tdeclaration we are processing.\n+\t* c-decl.c (duplicate_decls): Use COPY_DECL_RTL, DECL_RTL_SET_P, etc.\n+\t(start_decl): Likewise.\n+\t(finish_decl): Likewise.\n+\t* c-semantics.c (emit_local_var): Likewise.\n+\t* calls.c (expand_call): Likewise.\n+\t* dbxout.c (dbxout_symbol): Likewise.\n+\t* emit-rtl.c (unshare_all_rtl): Likewise.\n+\t(unshare_all_decls): Likewise.\n+\t(reset_used_decls): Likewise.\n+\t* expr.c (store_constructor): Likewise.\n+\t(safe_from_p): Likewise.\n+\t(expand_expr): Likewise.\n+\t* function.c (put_var_into_stack): Likewise.\n+\t(instantiate_decls_1): Likewise.\n+\t(assign_parms): Likewise.\n+\t(expand_function_start): Likewise.\n+\t(expand_function_end): Likewise.\n+\t* ggc-common.c (gcc_mark_trees): Likewise.\n+\t* integrate.c (function_cannot_inline_p): Likewise.\n+\t(copy_decl_for_inlining): Likewise.\n+\t(expand_inline_function): Likewise.\n+\t(integrate_parm_decls): Likewise.\n+\t(integrate_decl_tree): Likewise.\n+\t* print-tree.c (print_node): Likewise.\n+\t* reg-stack.c (stack_result): Likewise.\n+\t* stmt.c (label_rtx): Likewise.\n+\t(expand_return): Likewise.\n+\t(expand_decl): Likewise.\n+\t(expand_decl_cleanup): Likewise.\n+\t(expand_anon_union_decl): Likewise.\n+\t* toplev.c (check_global_declarations): Likewise.\n+\t(rest_of_decl_compilation): Likewise.\n+\t* tree.c (simple_cst_equal): Likewise.\n+\t* objc/objc-act.c (generate_static_references): Likewise.\n+\t\n 2001-03-14  Zack Weinberg  <zackw@stanford.edu>\n \n \t* aclocal.m4 (gcc_AC_C_CHARSET, gcc_AC_C_COMPILE_BIGENDIAN,"}, {"sha": "fead392ecc5456e9da38156ecd8e0d3522c5cb6d", "filename": "gcc/c-decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -1845,7 +1845,7 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \t}\n \n       /* Keep the old rtl since we can safely use it.  */\n-      DECL_RTL (newdecl) = DECL_RTL (olddecl);\n+      COPY_DECL_RTL (olddecl, newdecl);\n \n       /* Merge the type qualifiers.  */\n       if (TREE_CODE (olddecl) == FUNCTION_DECL\n@@ -3455,7 +3455,7 @@ start_decl (declarator, declspecs, initialized, attributes, prefix_attributes)\n       /* But not if this is a duplicate decl\n \t and we preserved the rtl from the previous one\n \t (which may or may not happen).  */\n-      && DECL_RTL (tem) == 0\n+      && !DECL_RTL_SET_P (tem)\n       && !DECL_CONTEXT (tem))\n     {\n       if (TREE_TYPE (tem) != error_mark_node\n@@ -3598,7 +3598,7 @@ finish_decl (decl, init, asmspec_tree)\n   if (TREE_CODE (decl) == FUNCTION_DECL && asmspec)\n     {\n       DECL_BUILT_IN_CLASS (decl) = NOT_BUILT_IN;\n-      DECL_RTL (decl) = 0;\n+      SET_DECL_RTL (decl, NULL_RTX);\n       DECL_ASSEMBLER_NAME (decl) = get_identifier (asmspec);\n     }\n "}, {"sha": "1c493e7bc6db91afad0d0ce3adfca3e3d3d9c60c", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -310,7 +310,7 @@ emit_local_var (decl)\n      tree decl;\n {\n   /* Create RTL for this variable.  */\n-  if (!DECL_RTL (decl))\n+  if (!DECL_RTL_SET_P (decl))\n     {\n       if (DECL_C_HARD_REGISTER (decl))\n \t/* The user specified an assembler name for this variable."}, {"sha": "f1eb3a805916c9adfc59defebf2d60e8e923f47c", "filename": "gcc/calls.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -2526,8 +2526,9 @@ expand_call (exp, target, ignore)\n \t      {\n \t\ttree var = build_decl (VAR_DECL, NULL_TREE,\n \t\t\t\t       TREE_TYPE (args[i].tree_value));\n-\t\tDECL_RTL (var) = expand_expr (args[i].tree_value, NULL_RTX,\n-\t\t\t\t\t      VOIDmode, EXPAND_NORMAL);\n+\t\tSET_DECL_RTL (var,\n+\t\t\t      expand_expr (args[i].tree_value, NULL_RTX,\n+\t\t\t\t\t   VOIDmode, EXPAND_NORMAL));\n \t\targs[i].tree_value = var;\n \t      }\n \t      break;"}, {"sha": "c02b2412698591f10f7140bf821bc1e32ceb546d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -1,3 +1,27 @@\n+2001-03-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* class.c (build_clone): Use COPY_DECL_RTL, DECL_RTL_SET_P, etc.\n+\t* cp-tree.h (DECL_IN_MEMORY_P): Likewise.\n+\t* decl.c (duplicate_decls): Likewise.\n+\t(builtin_function): Likewise.\n+\t(build_library_fn): Likewise.\n+\t(build_cp_library_fn): Likewise.\n+\t(check_initializer): Likewise.\n+\t(cp_finish_decl): Likewise.\n+\t* decl2.c (grokfield): Likewise.\n+\t(grok_function_init): Remove #if 0'd code.\n+\t(finish_anon_union): Use COPY_DECL_RTL, DECL_RTL_SET_P, etc.\n+\t* friend.c (do_friend): Likewise.\n+\t* init.c (get_temp_regvar): Likewise.\n+\t* method.c (make_thunk): Likewise.\n+\t* pt.c (tsubst_friend_function): Likewise.\n+\t(tsubst_decl): Likewise.\n+\t(regenerate_decl_from_template): Likewise.\n+\t* semantics.c (genrtl_named_return_value): Likewise.\n+\t(expand_body): Likewise.\n+\t(genrtl_finish_function): Likewise.\n+\t* tree.c (cp_tree_equal): Likewise.\n+\t\n 2001-03-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* call.c (convert_like_real): Add extra semantics to INNER"}, {"sha": "0828852b32a054ddb4afb0c666868690affa0d96", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -4265,7 +4265,7 @@ build_clone (fn, name)\n   set_mangled_name_for_decl (clone);\n \n   /* Create the RTL for this function.  */\n-  DECL_RTL (clone) = NULL_RTX;\n+  SET_DECL_RTL (clone, NULL_RTX);\n   rest_of_decl_compilation (clone, NULL, /*top_level=*/1, at_eof);\n   \n   /* Make it easy to find the CLONE given the FN.  */\n@@ -5212,14 +5212,9 @@ finish_struct_1 (t)\n   /* Complete the rtl for any static member objects of the type we're\n      working on.  */\n   for (x = TYPE_FIELDS (t); x; x = TREE_CHAIN (x))\n-    {\n-      if (TREE_CODE (x) == VAR_DECL && TREE_STATIC (x)\n-\t  && TREE_TYPE (x) == t)\n-\t{\n-\t  DECL_MODE (x) = TYPE_MODE (t);\n-\t  make_decl_rtl (x, NULL);\n-\t}\n-    }\n+    if (TREE_CODE (x) == VAR_DECL && TREE_STATIC (x)\n+\t&& TREE_TYPE (x) == t)\n+      DECL_MODE (x) = TYPE_MODE (t);\n \n   /* Done with FIELDS...now decide whether to sort these for\n      faster lookups later."}, {"sha": "19bb167431f17845c8c5310440a5d23acd4f4359", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -1915,7 +1915,7 @@ struct lang_decl\n    here because on most RISC machines, a variable's address\n    is not, by itself, a legitimate address.  */\n #define DECL_IN_MEMORY_P(NODE) \\\n-  (DECL_RTL (NODE) != NULL_RTX && GET_CODE (DECL_RTL (NODE)) == MEM)\n+  (DECL_RTL_SET_P (NODE) && GET_CODE (DECL_RTL (NODE)) == MEM)\n \n /* For FUNCTION_DECLs: return the language in which this decl\n    was declared.  */"}, {"sha": "f917fc86a1989ae554346e39b860cc0c17cf1b23", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -3160,7 +3160,7 @@ duplicate_decls (newdecl, olddecl)\n \t     that all remnants of the builtin-ness of this function\n \t     will be banished.  */\n \t  DECL_LANGUAGE (olddecl) = DECL_LANGUAGE (newdecl);\n-\t  DECL_RTL (olddecl) = DECL_RTL (newdecl);\n+\t  SET_DECL_RTL (olddecl, DECL_RTL (newdecl));\n \t  DECL_ASSEMBLER_NAME (olddecl) = DECL_ASSEMBLER_NAME (newdecl);\n \t  SET_IDENTIFIER_GLOBAL_VALUE (DECL_ASSEMBLER_NAME (newdecl),\n \t\t\t\t       newdecl);\n@@ -3533,7 +3533,7 @@ duplicate_decls (newdecl, olddecl)\n \tDECL_SECTION_NAME (newdecl) = DECL_SECTION_NAME (olddecl);\n \n       /* Keep the old rtl since we can safely use it.  */\n-      DECL_RTL (newdecl) = DECL_RTL (olddecl);\n+      COPY_DECL_RTL (olddecl, newdecl);\n \n       if (TREE_CODE (newdecl) == FUNCTION_DECL)\n \t{\n@@ -3634,7 +3634,7 @@ duplicate_decls (newdecl, olddecl)\n \t{\n \t  DECL_LANGUAGE (olddecl) = DECL_LANGUAGE (newdecl);\n \t  DECL_ASSEMBLER_NAME (olddecl) = DECL_ASSEMBLER_NAME (newdecl);\n-\t  DECL_RTL (olddecl) = DECL_RTL (newdecl);\n+\t  SET_DECL_RTL (olddecl, DECL_RTL (newdecl));\n \t}\n       if (! types_match || new_defines_function)\n \t{\n@@ -3658,7 +3658,7 @@ duplicate_decls (newdecl, olddecl)\n \t      DECL_FUNCTION_CODE (newdecl) = DECL_FUNCTION_CODE (olddecl);\n \t      /* If we're keeping the built-in definition, keep the rtl,\n \t\t regardless of declaration matches.  */\n-\t      DECL_RTL (newdecl) = DECL_RTL (olddecl);\n+\t      SET_DECL_RTL (newdecl, DECL_RTL (olddecl));\n \t    }\n \t  else\n \t    DECL_FRAME_SIZE (newdecl) = DECL_FRAME_SIZE (olddecl);\n@@ -6670,7 +6670,6 @@ builtin_function (name, type, code, class, libname)\n      function in the namespace.  */\n   if (libname)\n     DECL_ASSEMBLER_NAME (decl) = get_identifier (libname);\n-  make_decl_rtl (decl, NULL);\n \n   /* Warn if a function in the namespace for users\n      is used without an occasion to consider it declared.  */\n@@ -6707,9 +6706,7 @@ build_library_fn (name, type)\n      tree name;\n      tree type;\n {\n-  tree fn = build_library_fn_1 (name, ERROR_MARK, type);\n-  make_decl_rtl (fn, NULL);\n-  return fn;\n+  return build_library_fn_1 (name, ERROR_MARK, type);\n }\n \n /* Returns the _DECL for a library function with C++ linkage.  */\n@@ -6724,7 +6721,6 @@ build_cp_library_fn (name, operator_code, type)\n   TREE_NOTHROW (fn) = TYPE_NOTHROW_P (type);\n   DECL_CONTEXT (fn) = FROB_CONTEXT (current_namespace);\n   set_mangled_name_for_decl (fn);\n-  make_decl_rtl (fn, NULL);\n   return fn;\n }\n \n@@ -7631,8 +7627,6 @@ check_initializer (decl, init)\n     }\n   else if (!DECL_EXTERNAL (decl) && TREE_CODE (type) == REFERENCE_TYPE)\n     {\n-      if (TREE_STATIC (decl))\n-\tmake_decl_rtl (decl, NULL_PTR);\n       grok_reference_init (decl, type, init);\n       init = NULL_TREE;\n     }\n@@ -8038,7 +8032,7 @@ cp_finish_decl (decl, init, asmspec_tree, flags)\n     {\n       /* This must override the asm specifier which was placed by\n \t grokclassfn.  Lay this out fresh.  */\n-      DECL_RTL (TREE_TYPE (decl)) = NULL_RTX;\n+      SET_DECL_RTL (TREE_TYPE (decl), NULL_RTX);\n       DECL_ASSEMBLER_NAME (decl) = get_identifier (asmspec);\n       make_decl_rtl (decl, asmspec);\n     }"}, {"sha": "b60b6694755dc2f0fb0c35c30eaaad5d48846612", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -1775,7 +1775,7 @@ grokfield (declarator, declspecs, init, asmspec_tree, attrlist)\n \t{\n \t  /* This must override the asm specifier which was placed\n \t     by grokclassfn.  Lay this out fresh.  */\n-\t  DECL_RTL (value) = NULL_RTX;\n+\t  SET_DECL_RTL (value, NULL_RTX);\n \t  DECL_ASSEMBLER_NAME (value) = get_identifier (asmspec);\n \t}\n       cp_finish_decl (value, init, asmspec_tree, flags);\n@@ -1928,25 +1928,8 @@ grok_function_init (decl, init)\n \n   if (TREE_CODE (type) == FUNCTION_TYPE)\n     cp_error (\"initializer specified for non-member function `%D'\", decl);\n-#if 0\n-  /* We'll check for this in finish_struct_1.  */\n-  else if (DECL_VINDEX (decl) == NULL_TREE)\n-    cp_error (\"initializer specified for non-virtual member function `%D'\", decl);\n-#endif\n   else if (integer_zerop (init))\n     {\n-#if 0\n-      /* Mark this function as being \"defined\".  */\n-      DECL_INITIAL (decl) = error_mark_node;\n-      /* pure virtual destructors must be defined.  */\n-      /* pure virtual needs to be defined (as abort) only when put in \n-\t vtbl. For wellformed call, it should be itself. pr4737 */\n-      if (!DECL_DESTRUCTOR_P (decl)))\n-\t{\n-\t  /* Give this node rtl from `abort'.  */\n-\t  DECL_RTL (decl) = DECL_RTL (abort_fndecl);\n-\t}\n-#endif\n       DECL_PURE_VIRTUAL_P (decl) = 1;\n       if (DECL_OVERLOADED_OPERATOR_P (decl) == NOP_EXPR)\n \t{\n@@ -2206,7 +2189,7 @@ finish_anon_union (anon_union_decl)\n   if (static_p)\n     {\n       make_decl_rtl (main_decl, 0);\n-      DECL_RTL (anon_union_decl) = DECL_RTL (main_decl);\n+      COPY_DECL_RTL (main_decl, anon_union_decl);\n       expand_anon_union_decl (anon_union_decl, \n \t\t\t      NULL_TREE,\n \t\t\t      DECL_ANON_UNION_ELEMS (anon_union_decl));"}, {"sha": "913ed9ccd0bb8616c1b34cd344df375a1828e68c", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -413,7 +413,6 @@ do_friend (ctype, declarator, decl, parmdecls, attrlist,\n \t    }\n \t}\n \n-      make_decl_rtl (decl, NULL_PTR);\n       add_friend (current_class_type, \n \t\t  is_friend_template ? DECL_TI_TEMPLATE (decl) : decl);\n       DECL_FRIEND_P (decl) = 1;"}, {"sha": "61e2d4f1cf902c24d81b245d9a3f32fe058b28ed", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -2779,7 +2779,7 @@ get_temp_regvar (type, init)\n   if (building_stmt_tree ())\n     add_decl_stmt (decl);\n   if (!building_stmt_tree ())\n-    DECL_RTL (decl) = assign_temp (type, 2, 0, 1);\n+    SET_DECL_RTL (decl, assign_temp (type, 2, 0, 1));\n   finish_expr_stmt (build_modify_expr (decl, INIT_EXPR, init));\n \n   return decl;"}, {"sha": "dad5f7dd66497f9a8aa831316de3871de489460a", "filename": "gcc/cp/method.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -373,8 +373,6 @@ make_thunk (function, delta, vcall_index, generate_with_vtable_p)\n       DECL_DEFERRED_FN (thunk) = 0;\n       /* So that finish_file can write out any thunks that need to be: */\n       pushdecl_top_level (thunk);\n-      /* Create RTL for this thunk so that its address can be taken.  */\n-      make_decl_rtl (thunk, NULL);\n     }\n   return thunk;\n }"}, {"sha": "3fa1cde10135b77f1662830345dd00103133f48f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -4617,8 +4617,7 @@ tsubst_friend_function (decl, args)\n   if (TREE_CODE (new_friend) != TEMPLATE_DECL)\n     {\n       set_mangled_name_for_decl (new_friend);\n-      DECL_RTL (new_friend) = 0;\n-      make_decl_rtl (new_friend, NULL_PTR);\n+      SET_DECL_RTL (new_friend, NULL_RTX);\n     }\n       \n   if (DECL_NAMESPACE_SCOPE_P (new_friend))\n@@ -5870,8 +5869,7 @@ tsubst_decl (t, args, type)\n \t\t  set_mangled_name_for_template_decl (r);\n \t      }\n \t    \n-\t    DECL_RTL (r) = 0;\n-\t    make_decl_rtl (r, NULL_PTR);\n+\t    SET_DECL_RTL (r, NULL_RTX);\n \t    \n \t    /* Like grokfndecl.  If we don't do this, pushdecl will\n \t       mess up our TREE_CHAIN because it doesn't find a\n@@ -6038,7 +6036,7 @@ tsubst_decl (t, args, type)\n \t/* Don't try to expand the initializer until someone tries to use\n \t   this variable; otherwise we run into circular dependencies.  */\n \tDECL_INITIAL (r) = NULL_TREE;\n-\tDECL_RTL (r) = 0;\n+\tSET_DECL_RTL (r, NULL_RTX);\n \tDECL_SIZE (r) = DECL_SIZE_UNIT (r) = 0;\n \n \t/* For __PRETTY_FUNCTION__ we have to adjust the initializer.  */\n@@ -9765,7 +9763,7 @@ regenerate_decl_from_template (decl, tmpl)\n      details.  */\n   DECL_TI_TEMPLATE (new_decl) = DECL_TI_TEMPLATE (decl);\n   DECL_ASSEMBLER_NAME (new_decl) = DECL_ASSEMBLER_NAME (decl);\n-  DECL_RTL (new_decl) = DECL_RTL (decl);\n+  COPY_DECL_RTL (decl, new_decl);\n   DECL_USE_TEMPLATE (new_decl) = DECL_USE_TEMPLATE (decl);\n \n   /* Call duplicate decls to merge the old and new declarations.  */"}, {"sha": "97f010309a542caa0864e6d08e0bb26aa9237cb2", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -1006,7 +1006,7 @@ genrtl_named_return_value ()\n \t SImode but the DECL_RTL for the DECL_RESULT has DImode.  So,\n \t here, we use the mode the back-end has already assigned for\n \t the return value.  */\n-      DECL_RTL (decl) = gen_reg_rtx (GET_MODE (DECL_RTL (decl)));\n+      SET_DECL_RTL (decl, gen_reg_rtx (GET_MODE (DECL_RTL (decl))));\n       if (TREE_ADDRESSABLE (decl))\n \tput_var_into_stack (decl);\n     }\n@@ -2391,9 +2391,6 @@ expand_body (fn)\n       /* Or if this is a nested function.  */\n       && !decl_function_context (fn))\n     {\n-      /* Give the function RTL now so that we can assign it to a\n-\t function pointer, etc.  */\n-      make_decl_rtl (fn, NULL);\n       /* Set DECL_EXTERNAL so that assemble_external will be called as\n \t necessary.  We'll clear it again in finish_file.  */\n       if (!DECL_EXTERNAL (fn))\n@@ -2709,7 +2706,10 @@ genrtl_finish_function (fn)\n \t was an actual function definition.  */\n       DECL_INITIAL (fn) = error_mark_node;\n       for (t = DECL_ARGUMENTS (fn); t; t = TREE_CHAIN (t))\n-\tDECL_RTL (t) = DECL_INCOMING_RTL (t) = NULL_RTX;\n+\t{\n+\t  SET_DECL_RTL (t, NULL_RTX);\n+\t  DECL_INCOMING_RTL (t) = NULL_RTX;\n+\t}\n     }\n \n   /* Let the error reporting routines know that we're outside a"}, {"sha": "6a3de3044ba20a16cffa37a05ac37265739984ee", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -1955,10 +1955,10 @@ cp_tree_equal (t1, t2)\n \t as being equivalent to anything.  */\n       if ((TREE_CODE (TREE_OPERAND (t1, 0)) == VAR_DECL\n \t   && DECL_NAME (TREE_OPERAND (t1, 0)) == NULL_TREE\n-\t   && DECL_RTL (TREE_OPERAND (t1, 0)) == 0)\n+\t   && !DECL_RTL_SET_P (TREE_OPERAND (t1, 0)))\n \t  || (TREE_CODE (TREE_OPERAND (t2, 0)) == VAR_DECL\n \t      && DECL_NAME (TREE_OPERAND (t2, 0)) == NULL_TREE\n-\t      && DECL_RTL (TREE_OPERAND (t2, 0)) == 0))\n+\t      && !DECL_RTL_SET_P (TREE_OPERAND (t2, 0))))\n \tcmp = 1;\n       else\n \tcmp = cp_tree_equal (TREE_OPERAND (t1, 0), TREE_OPERAND (t2, 0));"}, {"sha": "73be0b0b35e454988fe7c05fdb890d17de7ace42", "filename": "gcc/dbxout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -1971,7 +1971,7 @@ dbxout_symbol (decl, local)\n \t  /* else it is something we handle like a normal variable.  */\n \t}\n \n-      DECL_RTL (decl) = eliminate_regs (DECL_RTL (decl), 0, NULL_RTX);\n+      SET_DECL_RTL (decl, eliminate_regs (DECL_RTL (decl), 0, NULL_RTX));\n #ifdef LEAF_REG_REMAP\n       if (current_function_uses_only_leaf_regs)\n \tleaf_renumber_regs_insn (DECL_RTL (decl));\n@@ -2307,7 +2307,7 @@ dbxout_parms (parms)\n \t   so that the debugging output will be accurate.  */\n \tDECL_INCOMING_RTL (parms)\n \t  = eliminate_regs (DECL_INCOMING_RTL (parms), 0, NULL_RTX);\n-\tDECL_RTL (parms) = eliminate_regs (DECL_RTL (parms), 0, NULL_RTX);\n+\tSET_DECL_RTL (parms, eliminate_regs (DECL_RTL (parms), 0, NULL_RTX));\n #ifdef LEAF_REG_REMAP\n \tif (current_function_uses_only_leaf_regs)\n \t  {"}, {"sha": "93f11f43de9dc4007446cbf0a0f28a9b09c506f2", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -1741,7 +1741,7 @@ unshare_all_rtl (fndecl, insn)\n \n   /* Make sure that virtual parameters are not shared.  */\n   for (decl = DECL_ARGUMENTS (fndecl); decl; decl = TREE_CHAIN (decl))\n-    DECL_RTL (decl) = copy_rtx_if_shared (DECL_RTL (decl));\n+    SET_DECL_RTL (decl, copy_rtx_if_shared (DECL_RTL (decl)));\n \n   /* Make sure that virtual stack slots are not shared.  */\n   unshare_all_decls (DECL_INITIAL (fndecl));\n@@ -1816,7 +1816,8 @@ unshare_all_decls (blk)\n \n   /* Copy shared decls.  */\n   for (t = BLOCK_VARS (blk); t; t = TREE_CHAIN (t))\n-    DECL_RTL (t) = copy_rtx_if_shared (DECL_RTL (t));\n+    if (DECL_RTL_SET_P (t))\n+      SET_DECL_RTL (t, copy_rtx_if_shared (DECL_RTL (t)));\n \n   /* Now process sub-blocks.  */\n   for (t = BLOCK_SUBBLOCKS (blk); t; t = TREE_CHAIN (t))\n@@ -1833,7 +1834,8 @@ reset_used_decls (blk)\n \n   /* Mark decls.  */\n   for (t = BLOCK_VARS (blk); t; t = TREE_CHAIN (t))\n-    reset_used_flags (DECL_RTL (t));\n+    if (DECL_RTL_SET_P (t))\n+      reset_used_flags (DECL_RTL (t));\n \n   /* Now process sub-blocks.  */\n   for (t = BLOCK_SUBBLOCKS (blk); t; t = TREE_CHAIN (t))"}, {"sha": "d8586b63a369182a4c94aaea57620dfba0320e32", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -4777,10 +4777,10 @@ store_constructor (exp, target, align, cleared, size)\n \n \t\t  index = build_decl (VAR_DECL, NULL_TREE, domain);\n \n-\t\t  DECL_RTL (index) = index_r\n+\t\t  index_r\n \t\t    = gen_reg_rtx (promote_mode (domain, DECL_MODE (index),\n \t\t\t\t\t\t &unsignedp, 0));\n-\n+\t\t  SET_DECL_RTL (index, index_r);\n \t\t  if (TREE_CODE (value) == SAVE_EXPR\n \t\t      && SAVE_EXPR_RTL (value) == 0)\n \t\t    {\n@@ -5705,7 +5705,7 @@ safe_from_p (x, exp, top_p)\n   switch (TREE_CODE_CLASS (TREE_CODE (exp)))\n     {\n     case 'd':\n-      exp_rtl = DECL_RTL (exp);\n+      exp_rtl = DECL_RTL_SET_P (exp) ? DECL_RTL (exp) : NULL_RTX;\n       break;\n \n     case 'c':\n@@ -6586,7 +6586,7 @@ expand_expr (exp, target, tmode, modifier)\n \t/* If VARS have not yet been expanded, expand them now.  */\n \twhile (vars)\n \t  {\n-\t    if (DECL_RTL (vars) == 0)\n+\t    if (!DECL_RTL_SET_P (vars))\n \t      {\n \t\tvars_need_expansion = 1;\n \t\texpand_decl (vars);\n@@ -8325,7 +8325,7 @@ expand_expr (exp, target, tmode, modifier)\n \n \tif (target == 0)\n \t  {\n-\t    if (DECL_RTL (slot) != 0)\n+\t    if (DECL_RTL_SET_P (slot))\n \t      {\n \t\ttarget = DECL_RTL (slot);\n \t\t/* If we have already expanded the slot, so don't do\n@@ -8338,7 +8338,7 @@ expand_expr (exp, target, tmode, modifier)\n \t\ttarget = assign_temp (type, 2, 0, 1);\n \t\t/* All temp slots at this level must not conflict.  */\n \t\tpreserve_temp_slots (target);\n-\t\tDECL_RTL (slot) = target;\n+\t\tSET_DECL_RTL (slot, target);\n \t\tif (TREE_ADDRESSABLE (slot))\n \t\t  put_var_into_stack (slot);\n \n@@ -8364,7 +8364,7 @@ expand_expr (exp, target, tmode, modifier)\n \t    /* If we have already assigned it space, use that space,\n \t       not target that we were passed in, as our target\n \t       parameter is only a hint.  */\n-\t    if (DECL_RTL (slot) != 0)\n+\t    if (DECL_RTL_SET_P (slot))\n \t      {\n \t\ttarget = DECL_RTL (slot);\n \t\t/* If we have already expanded the slot, so don't do\n@@ -8374,7 +8374,7 @@ expand_expr (exp, target, tmode, modifier)\n \t      }\n \t    else\n \t      {\n-\t\tDECL_RTL (slot) = target;\n+\t\tSET_DECL_RTL (slot, target);\n \t\t/* If we must have an addressable slot, then make sure that\n \t\t   the RTL that we just stored in slot is OK.  */\n \t\tif (TREE_ADDRESSABLE (slot))"}, {"sha": "b275476edcd7b6e719af3c1bd21c60a027c10d07", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -1,3 +1,10 @@\n+Wed Mar 14 09:29:27 2001  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* com.c (ffecom_member_phase_2): Use COPY_DECL_RTL,\n+\tDECL_RTL_SET_P, etc.\n+\t(duplicate_decls): Likewise.\n+\t(start_decl): Likewise.\n+\t\n Fri Mar  9 22:52:55 2001  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* fini.c (main): Use really_call_malloc, not malloc."}, {"sha": "fda6ce34944afc0b4a3137af88779c0bc0f24809", "filename": "gcc/f/com.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -7039,12 +7039,12 @@ ffecom_member_phase2_ (ffestorag mst, ffestorag st)\n   TREE_ASM_WRITTEN (t) = 1;\n   TREE_USED (t) = 1;\n \n-  DECL_RTL (t)\n-    = gen_rtx (MEM, TYPE_MODE (type),\n-\t       plus_constant (XEXP (DECL_RTL (mt), 0),\n-\t\t\t      ffestorag_modulo (mst)\n-\t\t\t      + ffestorag_offset (st)\n-\t\t\t      - ffestorag_offset (mst)));\n+  SET_DECL_RTL (t,\n+\t\tgen_rtx (MEM, TYPE_MODE (type),\n+\t\t\t plus_constant (XEXP (DECL_RTL (mt), 0),\n+\t\t\t\t\tffestorag_modulo (mst)\n+\t\t\t\t\t+ ffestorag_offset (st)\n+\t\t\t\t\t- ffestorag_offset (mst))));\n \n   t = start_decl (t, FALSE);\n \n@@ -13629,7 +13629,7 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t}\n \n       /* Keep the old rtl since we can safely use it.  */\n-      DECL_RTL (newdecl) = DECL_RTL (olddecl);\n+      COPY_DECL_RTL (newdecl, olddecl);\n \n       /* Merge the type qualifiers.  */\n       if (DECL_BUILT_IN_NONANSI (olddecl) && TREE_THIS_VOLATILE (olddecl)\n@@ -14273,7 +14273,7 @@ start_decl (tree decl, bool is_top_level)\n   if (!top_level\n   /* But not if this is a duplicate decl and we preserved the rtl from the\n      previous one (which may or may not happen).  */\n-      && DECL_RTL (tem) == 0)\n+      && !DECL_RTL_SET_P (tem))\n     {\n       if (TYPE_SIZE (TREE_TYPE (tem)) != 0)\n \texpand_decl (tem);"}, {"sha": "4df71ceddb2b59aa74ee4faaf8058b76e28a4d24", "filename": "gcc/function.c", "status": "modified", "additions": 37, "deletions": 26, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -1338,7 +1338,9 @@ put_var_into_stack (decl)\n   context = decl_function_context (decl);\n \n   /* Get the current rtl used for this object and its original mode.  */\n-  reg = TREE_CODE (decl) == SAVE_EXPR ? SAVE_EXPR_RTL (decl) : DECL_RTL (decl);\n+  reg = (TREE_CODE (decl) == SAVE_EXPR \n+\t ? SAVE_EXPR_RTL (decl) \n+\t : DECL_RTL_IF_SET (decl));\n \n   /* No need to do anything if decl has no rtx yet\n      since in that case caller is setting TREE_ADDRESSABLE\n@@ -3606,8 +3608,10 @@ instantiate_decls_1 (let, valid_only)\n   tree t;\n \n   for (t = BLOCK_VARS (let); t; t = TREE_CHAIN (t))\n-    instantiate_decl (DECL_RTL (t), int_size_in_bytes (TREE_TYPE (t)),\n-\t\t      valid_only);\n+    if (DECL_RTL_SET_P (t))\n+      instantiate_decl (DECL_RTL (t), \n+\t\t\tint_size_in_bytes (TREE_TYPE (t)),\n+\t\t\tvalid_only);\n \n   /* Process all subblocks.  */\n   for (t = BLOCK_SUBBLOCKS (let); t; t = TREE_CHAIN (t))\n@@ -4353,8 +4357,8 @@ assign_parms (fndecl)\n \t  || TREE_CODE (parm) != PARM_DECL\n \t  || passed_type == NULL)\n \t{\n-\t  DECL_INCOMING_RTL (parm) = DECL_RTL (parm)\n-\t    = gen_rtx_MEM (BLKmode, const0_rtx);\n+\t  SET_DECL_RTL (parm, gen_rtx_MEM (BLKmode, const0_rtx));\n+\t  DECL_INCOMING_RTL (parm) = DECL_RTL (parm);\n \t  TREE_USED (parm) = 1;\n \t  continue;\n \t}\n@@ -4373,7 +4377,8 @@ assign_parms (fndecl)\n \t and avoid the usual things like emit_move_insn that could crash.  */\n       if (nominal_mode == VOIDmode)\n \t{\n-\t  DECL_INCOMING_RTL (parm) = DECL_RTL (parm) = const0_rtx;\n+\t  SET_DECL_RTL (parm, const0_rtx);\n+\t  DECL_INCOMING_RTL (parm) = DECL_RTL (parm);\n \t  continue;\n \t}\n \n@@ -4669,7 +4674,7 @@ assign_parms (fndecl)\n \t\t\t\t     size_stored / UNITS_PER_WORD,\n \t\t\t\t     int_size_in_bytes (TREE_TYPE (parm)));\n \t    }\n-\t  DECL_RTL (parm) = stack_parm;\n+\t  SET_DECL_RTL (parm, stack_parm);\n \t}\n       else if (! ((! optimize\n \t\t   && ! DECL_REGISTER (parm)\n@@ -4701,13 +4706,14 @@ assign_parms (fndecl)\n \t     appropriately.  */\n \t  if (passed_pointer)\n \t    {\n-\t      DECL_RTL (parm)\n-\t\t= gen_rtx_MEM (TYPE_MODE (TREE_TYPE (passed_type)), parmreg);\n+\t      SET_DECL_RTL (parm,\n+\t\t\t    gen_rtx_MEM (TYPE_MODE (TREE_TYPE (passed_type)), \n+\t\t\t\t\t parmreg));\n \t      set_mem_attributes (DECL_RTL (parm), parm, 1);\n \t    }\n \t  else\n \t    {\n-\t      DECL_RTL (parm) = parmreg;\n+\t      SET_DECL_RTL (parm, parmreg);\n \t      maybe_set_unchanging (DECL_RTL (parm), parm);\n \t    }\n \t      \n@@ -4773,20 +4779,21 @@ assign_parms (fndecl)\n \t      if (GET_MODE (parmreg) != GET_MODE (DECL_RTL (parm)))\n \t\t{\n \t\t  rtx tempreg = gen_reg_rtx (GET_MODE (DECL_RTL (parm)));\n-\n+\t\t  int unsigned_p = TREE_UNSIGNED (TREE_TYPE (parm));\n \t\t  push_to_sequence (conversion_insns);\n \t\t  emit_move_insn (tempreg, DECL_RTL (parm));\n-\t\t  DECL_RTL (parm)\n-\t\t    = convert_to_mode (GET_MODE (parmreg), tempreg,\n-\t\t\t\t       TREE_UNSIGNED (TREE_TYPE (parm)));\n+\t\t  SET_DECL_RTL (parm,\n+\t\t\t\tconvert_to_mode (GET_MODE (parmreg), \n+\t\t\t\t\t\t tempreg,\n+\t\t\t\t\t\t unsigned_p));\n \t\t  emit_move_insn (parmreg, DECL_RTL (parm));\n \t\t  conversion_insns = get_insns();\n \t\t  did_conversion = 1;\n \t\t  end_sequence ();\n \t\t}\n \t      else\n \t\temit_move_insn (parmreg, DECL_RTL (parm));\n-\t      DECL_RTL (parm) = parmreg;\n+\t      SET_DECL_RTL (parm, parmreg);\n \t      /* STACK_PARM is the pointer, not the parm, and PARMREG is\n \t\t now the parm.  */\n \t      stack_parm = 0;\n@@ -5021,7 +5028,7 @@ assign_parms (fndecl)\n \t      conversion_insns = get_insns ();\n \t      end_sequence ();\n \t    }\n-\t  DECL_RTL (parm) = stack_parm;\n+\t  SET_DECL_RTL (parm, stack_parm);\n \t}\n \n       /* If this \"parameter\" was the place where we are receiving the\n@@ -5030,8 +5037,8 @@ assign_parms (fndecl)\n \t{\n \t  tree result = DECL_RESULT (fndecl);\n \n-\t  DECL_RTL (result)\n-\t    = gen_rtx_MEM (DECL_MODE (result), DECL_RTL (parm));\n+\t  SET_DECL_RTL (result,\n+\t\t\tgen_rtx_MEM (DECL_MODE (result), DECL_RTL (parm)));\n \n \t  set_mem_attributes (DECL_RTL (result), result, 1);\n \t}\n@@ -5090,7 +5097,9 @@ assign_parms (fndecl)\n      to include tree.h.  Do this here so it gets done when an inlined\n      function gets output.  */\n \n-  current_function_return_rtx = DECL_RTL (DECL_RESULT (fndecl));\n+  current_function_return_rtx\n+    = (DECL_RTL_SET_P (DECL_RESULT (fndecl))\n+       ? DECL_RTL (DECL_RESULT (fndecl)) : NULL_RTX);\n }\n \f\n /* Indicate whether REGNO is an incoming argument to the current function\n@@ -6357,15 +6366,16 @@ expand_function_start (subr, parms_have_cleanups)\n \t}\n       if (value_address)\n \t{\n-\t  DECL_RTL (DECL_RESULT (subr))\n-\t    = gen_rtx_MEM (DECL_MODE (DECL_RESULT (subr)), value_address);\n+\t  SET_DECL_RTL (DECL_RESULT (subr),\n+\t\t\tgen_rtx_MEM (DECL_MODE (DECL_RESULT (subr)), \n+\t\t\t\t     value_address));\n \t  set_mem_attributes (DECL_RTL (DECL_RESULT (subr)),\n \t\t\t      DECL_RESULT (subr), 1);\n \t}\n     }\n   else if (DECL_MODE (DECL_RESULT (subr)) == VOIDmode)\n     /* If return mode is void, this decl rtl should not be used.  */\n-    DECL_RTL (DECL_RESULT (subr)) = 0;\n+    SET_DECL_RTL (DECL_RESULT (subr), NULL_RTX);\n   else if (parms_have_cleanups || current_function_instrument_entry_exit)\n     {\n       /* If function will end with cleanup code for parms,\n@@ -6382,13 +6392,14 @@ expand_function_start (subr, parms_have_cleanups)\n       mode = promote_mode (type, mode, &unsignedp, 1);\n #endif\n \n-      DECL_RTL (DECL_RESULT (subr)) = gen_reg_rtx (mode);\n+      SET_DECL_RTL (DECL_RESULT (subr), gen_reg_rtx (mode));\n     }\n   else\n     /* Scalar, returned in a register.  */\n     {\n-      DECL_RTL (DECL_RESULT (subr))\n-\t= hard_function_value (TREE_TYPE (DECL_RESULT (subr)), subr, 1);\n+      SET_DECL_RTL (DECL_RESULT (subr),\n+\t\t    hard_function_value (TREE_TYPE (DECL_RESULT (subr)), \n+\t\t\t\t\t subr, 1));\n \n       /* Mark this reg as the function's return value.  */\n       if (GET_CODE (DECL_RTL (DECL_RESULT (subr))) == REG)\n@@ -6846,7 +6857,7 @@ expand_function_end (filename, line, end_bindings)\n   /* If scalar return value was computed in a pseudo-reg, or was a named\n      return value that got dumped to the stack, copy that to the hard\n      return register.  */\n-  if (DECL_RTL (DECL_RESULT (current_function_decl)) != 0)\n+  if (DECL_RTL_SET_P (DECL_RESULT (current_function_decl)))\n     {\n       tree decl_result = DECL_RESULT (current_function_decl);\n       rtx decl_rtl = DECL_RTL (decl_result);"}, {"sha": "ffbbe20bea803a4fdd4c68a0b9406a0548960306", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -376,7 +376,8 @@ ggc_mark_trees ()\n \t  ggc_mark_tree (DECL_ASSEMBLER_NAME (t));\n \t  ggc_mark_tree (DECL_SECTION_NAME (t));\n \t  ggc_mark_tree (DECL_MACHINE_ATTRIBUTES (t));\n-\t  ggc_mark_rtx (DECL_RTL (t));\n+\t  if (DECL_RTL_SET_P (t))\n+\t    ggc_mark_rtx (DECL_RTL (t));\n \t  ggc_mark_rtx (DECL_LIVE_RANGE_RTL (t));\n \t  ggc_mark_tree (DECL_VINDEX (t));\n \t  lang_mark_tree (t);"}, {"sha": "8ce84909653009cca2091354ee5b224d14ac44ef", "filename": "gcc/integrate.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -137,7 +137,6 @@ function_cannot_inline_p (fndecl)\n \n   register int ninsns = 0;\n   register tree parms;\n-  rtx result;\n \n   if (DECL_UNINLINABLE (fndecl))\n     return N_(\"function cannot be inline\");\n@@ -236,9 +235,12 @@ function_cannot_inline_p (fndecl)\n     }\n \n   /* We can't inline functions that return a PARALLEL rtx.  */\n-  result = DECL_RTL (DECL_RESULT (fndecl));\n-  if (result && GET_CODE (result) == PARALLEL)\n-    return N_(\"inline functions not supported for this return value type\");\n+  if (DECL_RTL_SET_P (DECL_RESULT (fndecl)))\n+    {\n+      rtx result = DECL_RTL (DECL_RESULT (fndecl));\n+      if (GET_CODE (result) == PARALLEL)\n+\treturn N_(\"inline functions not supported for this return value type\");\n+    }\n \n   /* If the function has a target specific attribute attached to it,\n      then we assume that we should not inline it.  This can be overriden\n@@ -349,7 +351,7 @@ copy_decl_for_inlining (decl, from_fn, to_fn)\n   DECL_ABSTRACT_ORIGIN (copy) = DECL_ORIGIN (decl);\n \n   /* The new variable/label has no RTL, yet.  */\n-  DECL_RTL (copy) = NULL_RTX;\n+  SET_DECL_RTL (copy, NULL_RTX);\n \n   /* These args would always appear unused, if not for this.  */\n   TREE_USED (copy) = 1;\n@@ -952,7 +954,8 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n      REG_FUNCTION_RETURN_VALUE_P.  */\n \n   map->inline_target = 0;\n-  loc = DECL_RTL (DECL_RESULT (fndecl));\n+  loc = (DECL_RTL_SET_P (DECL_RESULT (fndecl)) \n+\t ? DECL_RTL (DECL_RESULT (fndecl)) : NULL_RTX);\n \n   if (TYPE_MODE (type) == VOIDmode)\n     /* There is no return value to worry about.  */\n@@ -1634,7 +1637,7 @@ integrate_parm_decls (args, map, arg_vector)\n \t subst_constants.  */\n       subst_constants (&new_decl_rtl, NULL_RTX, map, 1);\n       apply_change_group ();\n-      DECL_RTL (decl) = new_decl_rtl;\n+      SET_DECL_RTL (decl, new_decl_rtl);\n     }\n }\n \n@@ -1664,15 +1667,19 @@ integrate_decl_tree (let, map)\n \n       d = copy_decl_for_inlining (t, map->fndecl, current_function_decl);\n \n-      if (DECL_RTL (t) != 0)\n+      if (DECL_RTL_SET_P (t))\n \t{\n-\t  DECL_RTL (d) = copy_rtx_and_substitute (DECL_RTL (t), map, 1);\n+\t  rtx r;\n+\n+\t  SET_DECL_RTL (d, copy_rtx_and_substitute (DECL_RTL (t), map, 1));\n \n \t  /* Fully instantiate the address with the equivalent form so that the\n \t     debugging information contains the actual register, instead of the\n \t     virtual register.   Do this by not passing an insn to\n \t     subst_constants.  */\n-\t  subst_constants (&DECL_RTL (d), NULL_RTX, map, 1);\n+\t  r = DECL_RTL (d);\n+\t  subst_constants (&r, NULL_RTX, map, 1);\n+\t  SET_DECL_RTL (d, r);\n \t  apply_change_group ();\n \t}\n "}, {"sha": "e0fd390ccbd04896d4e1505494a231126565cf9d", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -1,3 +1,11 @@\n+2001-03-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* class.c (build_static_field_ref): Likewise.\n+\t(make_method_value): Likewise.\n+\t(get_dispatch_table): Likewise.\n+\n+\t* decl.c (push_jvm_slot): Use COPY_DECL_RTL, DECL_RTL_SET_P, etc.\n+\t\n 2001-03-07  Tom Tromey  <tromey@redhat.com>\n \n \t* config-lang.in (lang_requires): Define."}, {"sha": "4de1330b9f06afb065050708465cbfe407a37ffa", "filename": "gcc/java/class.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -983,7 +983,7 @@ build_static_field_ref (fdecl)\n   int is_compiled = is_compiled_class (fclass);\n   if (is_compiled)\n     {\n-      if (DECL_RTL (fdecl) == 0)\n+      if (!DECL_RTL_SET_P (fdecl))\n \t{\n \t  make_decl_rtl (fdecl, NULL);\n \t  if (is_compiled == 1)\n@@ -1146,7 +1146,7 @@ make_method_value (mdecl)\n #define ACC_TRANSLATED          0x4000\n   int accflags = get_access_flags_from_decl (mdecl) | ACC_TRANSLATED;\n   code = null_pointer_node;\n-  if (DECL_RTL (mdecl))\n+  if (DECL_RTL_SET_P (mdecl))\n     code = build1 (ADDR_EXPR, nativecode_ptr_type_node, mdecl);\n   START_RECORD_CONSTRUCTOR (minit, method_type_node);\n   PUSH_FIELD_VALUE (minit, \"name\",\n@@ -1220,7 +1220,7 @@ get_dispatch_table (type, this_class_addr)\n \t}\n       else\n \t{\n-\t  if (DECL_RTL (method) == 0)\n+\t  if (!DECL_RTL_SET_P (method))\n \t    make_decl_rtl (method, NULL);\n \t  method = build1 (ADDR_EXPR, nativecode_ptr_type_node, method);\n \t}"}, {"sha": "d9bc2ee3bb0aeb20a2e8ed581840fe56b7c45ef7", "filename": "gcc/java/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -110,13 +110,13 @@ push_jvm_slot (index, decl)\n   while (tmp != NULL_TREE)\n     {\n       if (TYPE_MODE (type) == TYPE_MODE (TREE_TYPE (tmp)))\n-\trtl = DECL_RTL (tmp);\n+\trtl = DECL_RTL_IF_SET (tmp);\n       if (rtl != NULL)\n \tbreak;\n      tmp = DECL_LOCAL_SLOT_CHAIN (tmp);\n     }\n   if (rtl != NULL)\n-    DECL_RTL (decl) = rtl;\n+    SET_DECL_RTL (decl, rtl);\n   else\n     {\n       if (index >= DECL_MAX_LOCALS (current_function_decl))"}, {"sha": "d71ba590d629890b300be29f1325217d7c5d699e", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -1983,8 +1983,8 @@ generate_static_references ()\n \n       type = build_array_type (build_pointer_type (void_type_node), 0);\n       decl = build_decl (VAR_DECL, ident, type);\n-      make_decl_rtl (decl, 0);\n       TREE_USED (decl) = 1;\n+      TREE_STATIC (decl) = 1;\n       decls\n \t= tree_cons (NULL_TREE, build_unary_op (ADDR_EXPR, decl, 1), decls);\n     }"}, {"sha": "459b55dc539fcdf5e3f90394c9a627c827e1bab8", "filename": "gcc/print-tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -441,7 +441,7 @@ print_node (file, prefix, node, indent)\n \n       print_lang_decl (file, node, indent);\n \n-      if (DECL_RTL (node) != 0)\n+      if (DECL_RTL_SET_P (node))\n \t{\n \t  indent_to (file, indent + 4);\n \t  print_rtl (file, DECL_RTL (node));"}, {"sha": "189fdca1e07a7533954ddf05860212225701f02f", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -785,7 +785,7 @@ stack_result (decl)\n   if (aggregate_value_p (DECL_RESULT (decl)))\n     return 0;\n \n-  result = DECL_RTL (DECL_RESULT (decl));\n+  result = DECL_RTL_IF_SET (DECL_RESULT (decl));\n   if (result != 0)\n     {\n #ifdef FUNCTION_OUTGOING_VALUE"}, {"sha": "1786c209a73a2491c8446526b51b66895d76a964", "filename": "gcc/stmt.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -675,12 +675,13 @@ label_rtx (label)\n   if (TREE_CODE (label) != LABEL_DECL)\n     abort ();\n \n-  if (DECL_RTL (label))\n-    return DECL_RTL (label);\n+  if (!DECL_RTL_SET_P (label))\n+    SET_DECL_RTL (label, gen_label_rtx ());\n \n-  return DECL_RTL (label) = gen_label_rtx ();\n+  return DECL_RTL (label);\n }\n \n+\n /* Add an unconditional jump to LABEL as the next sequential instruction.  */\n \n void\n@@ -2920,7 +2921,7 @@ expand_return (retval)\n      run destructors on variables that might be used in the subsequent\n      computation of the return value.  */\n   rtx last_insn = 0;\n-  rtx result_rtl = DECL_RTL (DECL_RESULT (current_function_decl));\n+  rtx result_rtl;\n   register rtx val = 0;\n   tree retval_rhs;\n   int cleanups;\n@@ -3000,6 +3001,8 @@ expand_return (retval)\n       return;\n     }\n \n+  result_rtl = DECL_RTL (DECL_RESULT (current_function_decl));\n+\n   /* If the result is an aggregate that is being returned in one (or more)\n      registers, load the registers here.  The compiler currently can't handle\n      copying a BLKmode value into registers.  We could put this code in a\n@@ -3838,18 +3841,18 @@ expand_decl (decl)\n   /* Create the RTL representation for the variable.  */\n \n   if (type == error_mark_node)\n-    DECL_RTL (decl) = gen_rtx_MEM (BLKmode, const0_rtx);\n+    SET_DECL_RTL (decl, gen_rtx_MEM (BLKmode, const0_rtx));\n \n   else if (DECL_SIZE (decl) == 0)\n     /* Variable with incomplete type.  */\n     {\n       if (DECL_INITIAL (decl) == 0)\n \t/* Error message was already done; now avoid a crash.  */\n-\tDECL_RTL (decl) = gen_rtx_MEM (BLKmode, const0_rtx);\n+\tSET_DECL_RTL (decl, gen_rtx_MEM (BLKmode, const0_rtx));\n       else\n \t/* An initializer is going to decide the size of this array.\n \t   Until we know the size, represent its address with a reg.  */\n-\tDECL_RTL (decl) = gen_rtx_MEM (BLKmode, gen_reg_rtx (Pmode));\n+\tSET_DECL_RTL (decl, gen_rtx_MEM (BLKmode, gen_reg_rtx (Pmode)));\n \n       set_mem_attributes (DECL_RTL (decl), decl, 1);\n     }\n@@ -3868,7 +3871,7 @@ expand_decl (decl)\n       enum machine_mode reg_mode\n \t= promote_mode (type, DECL_MODE (decl), &unsignedp, 0);\n \n-      DECL_RTL (decl) = gen_reg_rtx (reg_mode);\n+      SET_DECL_RTL (decl, gen_reg_rtx (reg_mode));\n       mark_user_reg (DECL_RTL (decl));\n \n       if (POINTER_TYPE_P (type))\n@@ -3895,15 +3898,16 @@ expand_decl (decl)\n \t whose size was determined by the initializer.\n \t The old address was a register; set that register now\n \t to the proper address.  */\n-      if (DECL_RTL (decl) != 0)\n+      if (DECL_RTL_SET_P (decl))\n \t{\n \t  if (GET_CODE (DECL_RTL (decl)) != MEM\n \t      || GET_CODE (XEXP (DECL_RTL (decl), 0)) != REG)\n \t    abort ();\n \t  oldaddr = XEXP (DECL_RTL (decl), 0);\n \t}\n \n-      DECL_RTL (decl) = assign_temp (TREE_TYPE (decl), 1, 1, 1);\n+      SET_DECL_RTL (decl,\n+\t\t    assign_temp (TREE_TYPE (decl), 1, 1, 1));\n \n       /* Set alignment we actually gave this decl.  */\n       DECL_ALIGN (decl) = (DECL_MODE (decl) == BLKmode ? BIGGEST_ALIGNMENT\n@@ -3945,7 +3949,7 @@ expand_decl (decl)\n \t\t\t\t\t      TYPE_ALIGN (TREE_TYPE (decl)));\n \n       /* Reference the variable indirect through that rtx.  */\n-      DECL_RTL (decl) = gen_rtx_MEM (DECL_MODE (decl), address);\n+      SET_DECL_RTL (decl, gen_rtx_MEM (DECL_MODE (decl), address));\n \n       set_mem_attributes (DECL_RTL (decl), decl, 1);\n \n@@ -4061,7 +4065,7 @@ expand_decl_cleanup (decl, cleanup)\n \t  emit_move_insn (flag, const1_rtx);\n \n \t  cond = build_decl (VAR_DECL, NULL_TREE, type_for_mode (word_mode, 1));\n-\t  DECL_RTL (cond) = flag;\n+\t  SET_DECL_RTL (cond, flag);\n \n \t  /* Conditionalize the cleanup.  */\n \t  cleanup = build (COND_EXPR, void_type_node,\n@@ -4262,19 +4266,20 @@ expand_anon_union_decl (decl, cleanup, decl_elts)\n       if (GET_CODE (x) == MEM)\n \t{\n \t  if (mode == GET_MODE (x))\n-\t    DECL_RTL (decl_elt) = x;\n+\t    SET_DECL_RTL (decl_elt, x);\n \t  else\n \t    {\n-\t      DECL_RTL (decl_elt) = gen_rtx_MEM (mode, copy_rtx (XEXP (x, 0)));\n+\t      SET_DECL_RTL (decl_elt,\n+\t\t\t    gen_rtx_MEM (mode, copy_rtx (XEXP (x, 0))));\n \t      MEM_COPY_ATTRIBUTES (DECL_RTL (decl_elt), x);\n \t    }\n \t}\n       else if (GET_CODE (x) == REG)\n \t{\n \t  if (mode == GET_MODE (x))\n-\t    DECL_RTL (decl_elt) = x;\n+\t    SET_DECL_RTL (decl_elt, x);\n \t  else\n-\t    DECL_RTL (decl_elt) = gen_rtx_SUBREG (mode, x, 0);\n+\t    SET_DECL_RTL (decl_elt, gen_rtx_SUBREG (mode, x, 0));\n \t}\n       else\n \tabort ();"}, {"sha": "0fed3e92ef9de8879b44927ae8e99f55265bd931", "filename": "gcc/toplev.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -2007,7 +2007,7 @@ check_global_declarations (vec, len)\n \t/* Cancel the RTL for this decl so that, if debugging info\n \t   output for global variables is still to come,\n \t   this one will be omitted.  */\n-\tDECL_RTL (decl) = NULL;\n+\tSET_DECL_RTL (decl, NULL_RTX);\n \n       /* Warn about any function\n \t declared static but not defined.\n@@ -2578,7 +2578,8 @@ rest_of_decl_compilation (decl, asmspec, top_level, at_end)\n       || TREE_CODE (decl) == FUNCTION_DECL)\n     {\n       timevar_push (TV_VARCONST);\n-      make_decl_rtl (decl, asmspec);\n+      if (asmspec)\n+\tmake_decl_rtl (decl, asmspec);\n       /* Don't output anything\n \t when a tentative file-scope definition is seen.\n \t But at end of compilation, do output code for them.  */\n@@ -2595,14 +2596,15 @@ rest_of_decl_compilation (decl, asmspec, top_level, at_end)\n     {\n       if (decode_reg_name (asmspec) >= 0)\n \t{\n-\t  DECL_RTL (decl) = 0;\n+\t  SET_DECL_RTL (decl, NULL_RTX);\n \t  make_decl_rtl (decl, asmspec);\n \t}\n       else\n \t{\n \t  error (\"invalid register name `%s' for register variable\", asmspec);\n \t  DECL_REGISTER (decl) = 0;\n-\t  make_decl_rtl (decl, NULL);\n+\t  if (!top_level)\n+\t    expand_decl (decl);\n \t}\n     }\n #if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)"}, {"sha": "3143db4c0230971a3cceb53d0434e275092cffc4", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -3518,10 +3518,10 @@ simple_cst_equal (t1, t2)\n \t as being equivalent to anything.  */\n       if ((TREE_CODE (TREE_OPERAND (t1, 0)) == VAR_DECL\n \t   && DECL_NAME (TREE_OPERAND (t1, 0)) == NULL_TREE\n-\t   && DECL_RTL (TREE_OPERAND (t1, 0)) == 0)\n+\t   && !DECL_RTL_SET_P (TREE_OPERAND (t1, 0)))\n \t  || (TREE_CODE (TREE_OPERAND (t2, 0)) == VAR_DECL\n \t      && DECL_NAME (TREE_OPERAND (t2, 0)) == NULL_TREE\n-\t      && DECL_RTL (TREE_OPERAND (t2, 0)) == 0))\n+\t      && !DECL_RTL_SET_P (TREE_OPERAND (t2, 0))))\n \tcmp = 1;\n       else\n \tcmp = simple_cst_equal (TREE_OPERAND (t1, 0), TREE_OPERAND (t2, 0));"}, {"sha": "55e19c0afc8baaf2ec852c81a08a3074d151be49", "filename": "gcc/tree.h", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -1341,8 +1341,27 @@ struct tree_type\n    PROMOTED_MODE is defined, the mode of this expression may not be same\n    as DECL_MODE.  In that case, DECL_MODE contains the mode corresponding\n    to the variable's data type, while the mode\n-   of DECL_RTL is the mode actually used to contain the data.  */\n-#define DECL_RTL(NODE) (DECL_CHECK (NODE)->decl.rtl)\n+   of DECL_RTL is the mode actually used to contain the data.  \n+\n+   This value can be evaluated lazily for functions, variables with\n+   static storage duration, and labels.  */\n+#define DECL_RTL(NODE)\t\t\t\t\t\\\n+  (DECL_CHECK (NODE)->decl.rtl\t\t\t\t\\\n+   ? (NODE)->decl.rtl\t\t\t\t\t\\\n+   : (make_decl_rtl (NODE, NULL), (NODE)->decl.rtl))\n+/* Set the DECL_RTL for NODE to RTL.  */\n+#define SET_DECL_RTL(NODE, RTL) \\\n+  (DECL_CHECK (NODE)->decl.rtl = (RTL))\n+/* Returns non-zero if the DECL_RTL for NODE has already been set.  */\n+#define DECL_RTL_SET_P(NODE) \\\n+  (DECL_CHECK (NODE)->decl.rtl != NULL)\n+/* Copy the RTL from NODE1 to NODE2.  If the RTL was not set for\n+   NODE1, it will not be set for NODE2; this is a lazy copy.  */\n+#define COPY_DECL_RTL(NODE1, NODE2) \\\n+  (DECL_CHECK (NODE2)->decl.rtl = DECL_CHECK (NODE1)->decl.rtl)\n+/* The DECL_RTL for NODE, if it is set, or NULL, if it is not set.  */\n+#define DECL_RTL_IF_SET(NODE) \\\n+  (DECL_RTL_SET_P (NODE) ? DECL_RTL (NODE) : NULL)\n /* Holds an INSN_LIST of all of the live ranges in which the variable\n    has been moved to a possibly different register.  */\n #define DECL_LIVE_RANGE_RTL(NODE) (DECL_CHECK (NODE)->decl.live_range_rtl)"}, {"sha": "b5d5dfa87fde6b680932f863435460aabc64aaa0", "filename": "gcc/varasm.c", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e7881c81752c856edb9f71db93805ce0416be6/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=19e7881c81752c856edb9f71db93805ce0416be6", "patch": "@@ -565,10 +565,15 @@ decode_reg_name (asmspec)\n   return -1;\n }\n \f\n-/* Create the DECL_RTL for a declaration for a static or external variable\n-   or static or external function.\n-   ASMSPEC, if not 0, is the string which the user specified\n-   as the assembler symbol name.\n+/* Create the DECL_RTL for a VAR_DECL or FUNCTION_DECL.  DECL should\n+   have static storage duration.  In other words, it should not be an\n+   automatic variable, including PARM_DECLs.\n+\n+   There is, however, one exception: this function handles variables\n+   explicitly placed in a particular register by the user.\n+\n+   ASMSPEC, if not 0, is the string which the user specified as the\n+   assembler symbol name.\n \n    This is never called for PARM_DECL nodes.  */\n \n@@ -582,9 +587,22 @@ make_decl_rtl (decl, asmspec)\n   const char *new_name = 0;\n   int reg_number;\n \n+  /* Check that we are not being given an automatic variable.  */\n+  if (TREE_CODE (decl) == PARM_DECL\n+      || TREE_CODE (decl) == RESULT_DECL\n+      || (TREE_CODE (decl) == VAR_DECL\n+\t  && !TREE_STATIC (decl)\n+\t  && !DECL_EXTERNAL (decl)\n+\t  && !DECL_REGISTER (decl)))\n+    abort ();\n+  /* And that we were not given a type or a label.  */\n+  else if (TREE_CODE (decl) == TYPE_DECL \n+\t   || TREE_CODE (decl) == LABEL_DECL)\n+    abort ();\n+\n   /* For a duplicate declaration, we can be called twice on the\n      same DECL node.  Don't discard the RTL already made.  */\n-  if (DECL_RTL (decl) != 0)\n+  if (DECL_RTL_SET_P (decl))\n     {\n       /* If the old RTL had the wrong mode, fix the mode.  */\n       if (GET_MODE (DECL_RTL (decl)) != DECL_MODE (decl))\n@@ -652,8 +670,9 @@ make_decl_rtl (decl, asmspec)\n \t     usage is somewhat suspect, we nevertheless use the following\n \t     kludge to avoid setting DECL_RTL to frame_pointer_rtx.  */\n \n-\t  DECL_RTL (decl)\n-\t    = gen_rtx_REG (DECL_MODE (decl), FIRST_PSEUDO_REGISTER);\n+\t  SET_DECL_RTL (decl,\n+\t\t\tgen_rtx_REG (DECL_MODE (decl), \n+\t\t\t\t     FIRST_PSEUDO_REGISTER));\n \t  REGNO (DECL_RTL (decl)) = reg_number;\n \t  REG_USERVAR_P (DECL_RTL (decl)) = 1;\n \n@@ -731,8 +750,8 @@ make_decl_rtl (decl, asmspec)\n \t   && (TREE_PUBLIC (decl) || TREE_STATIC (decl)))))\n     TREE_SIDE_EFFECTS (decl) = 1;\n \n-  DECL_RTL (decl) = gen_rtx_MEM (DECL_MODE (decl),\n-\t\t\t\t gen_rtx_SYMBOL_REF (Pmode, name));\n+  SET_DECL_RTL (decl, gen_rtx_MEM (DECL_MODE (decl),\n+\t\t\t\t   gen_rtx_SYMBOL_REF (Pmode, name)));\n   if (TREE_CODE (decl) != FUNCTION_DECL)\n     set_mem_attributes (DECL_RTL (decl), decl, 1);\n \n@@ -4785,8 +4804,7 @@ assemble_alias (decl, target)\n {\n   const char *name;\n \n-  make_decl_rtl (decl, (char *) 0);\n-  name = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n+  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n \n #ifdef ASM_OUTPUT_DEF\n   /* Make name accessible from other files, if appropriate.  */"}]}