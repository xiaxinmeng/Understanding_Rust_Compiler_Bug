{"sha": "3f0177e74c294542a770fc23742c4e306a1e5d04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YwMTc3ZTc0YzI5NDU0MmE3NzBmYzIzNzQyYzRlMzA2YTFlNWQwNA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2016-09-09T23:12:10Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-09-09T23:12:10Z"}, "message": "PR c/77520 - wrong value for extended ASCII characters in -Wformat message\n\nPR c/77520 - wrong value for extended ASCII characters in -Wformat message\nPR c/77521 - %qc format directive should quote non-printable characters\n\ngcc/c-family/ChangeLog:\n\n\tPR c/77520\n\tPR c/77521\n\t* c-format.c (argument_parser::find_format_char_info): Use %qc\n\tformat directive unconditionally.\n\ngcc/ChangeLog:\n\n\tPR c/77520\n\tPR c/77521\n\t* pretty-print.c (pp_quoted_string): New function.\n\t(pp_format): Call it for %c and %s directives.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/77520\n\tPR c/77521\n\t* gcc.dg/pr77520.c: New test.\n\t* gcc.dg/pr77521.c: New test.\n\nFrom-SVN: r240059", "tree": {"sha": "f486cc289cc2e46c1ccb063b50662b02da10b20b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f486cc289cc2e46c1ccb063b50662b02da10b20b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f0177e74c294542a770fc23742c4e306a1e5d04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f0177e74c294542a770fc23742c4e306a1e5d04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f0177e74c294542a770fc23742c4e306a1e5d04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f0177e74c294542a770fc23742c4e306a1e5d04/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5368023839d4bfc78f980692670be093cf2fdf2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5368023839d4bfc78f980692670be093cf2fdf2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5368023839d4bfc78f980692670be093cf2fdf2f"}], "stats": {"total": 117, "additions": 100, "deletions": 17}, "files": [{"sha": "6892161897338521c117c606b2ba01397591dc2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f0177e74c294542a770fc23742c4e306a1e5d04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f0177e74c294542a770fc23742c4e306a1e5d04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f0177e74c294542a770fc23742c4e306a1e5d04", "patch": "@@ -1,3 +1,10 @@\n+2016-09-09  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/77520\n+\tPR c/77521\n+\t* pretty-print.c (pp_quoted_string): New function.\n+\t(pp_format): Call it for %c and %s directives.\n+\n 2016-09-10  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* doc/tm.texi.in (INITIAL_FRAME_POINTER_OFFSET): Remove."}, {"sha": "9a78b7aaac85ccc7119afd8cf2b11f5080fcbb11", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f0177e74c294542a770fc23742c4e306a1e5d04/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f0177e74c294542a770fc23742c4e306a1e5d04/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3f0177e74c294542a770fc23742c4e306a1e5d04", "patch": "@@ -1,3 +1,10 @@\n+2016-09-09  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/77520\n+\tPR c/77521\n+\t* c-format.c (argument_parser::find_format_char_info): Use %qc\n+\tformat directive unconditionally.\n+\n 2016-09-09  Jason Merrill  <jason@redhat.com>\n \n \tImplement C++17 new of over-aligned types."}, {"sha": "0c173409520f16b09661acdf6d067552fa9f8e48", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f0177e74c294542a770fc23742c4e306a1e5d04/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f0177e74c294542a770fc23742c4e306a1e5d04/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=3f0177e74c294542a770fc23742c4e306a1e5d04", "patch": "@@ -2355,20 +2355,12 @@ argument_parser::find_format_char_info (char format_char)\n     ++fci;\n   if (fci->format_chars == 0)\n     {\n-      if (ISGRAPH (format_char))\n-\tformat_warning_at_char (format_string_loc, format_string_cst,\n-\t\t\t\tformat_chars - orig_format_chars,\n-\t\t\t\tOPT_Wformat_,\n-\t\t\t\t\"unknown conversion type character\"\n-\t\t\t\t\" %qc in format\",\n-\t\t\t\tformat_char);\n-      else\n-\tformat_warning_at_char (format_string_loc, format_string_cst,\n-\t\t\t\tformat_chars - orig_format_chars,\n-\t\t\t\tOPT_Wformat_,\n-\t\t\t\t\"unknown conversion type character\"\n-\t\t\t\t\" 0x%x in format\",\n-\t\t\t\tformat_char);\n+      format_warning_at_char (format_string_loc, format_string_cst,\n+\t\t\t      format_chars - orig_format_chars,\n+\t\t\t      OPT_Wformat_,\n+\t\t\t      \"unknown conversion type character\"\n+\t\t\t      \" %qc in format\",\n+\t\t\t      format_char);\n       return NULL;\n     }\n "}, {"sha": "a39815ea511e1fbd65bd7abd5d4dd95af8e6664b", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 55, "deletions": 3, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f0177e74c294542a770fc23742c4e306a1e5d04/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f0177e74c294542a770fc23742c4e306a1e5d04/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=3f0177e74c294542a770fc23742c4e306a1e5d04", "patch": "@@ -30,6 +30,8 @@ along with GCC; see the file COPYING3.  If not see\n #include <iconv.h>\n #endif\n \n+static void pp_quoted_string (pretty_printer *, const char *, size_t = -1);\n+\n /* Overwrite the given location/range within this text_info's rich_location.\n    For use e.g. when implementing \"+\" in client format decoders.  */\n \n@@ -555,8 +557,20 @@ pp_format (pretty_printer *pp, text_info *text)\n \t  break;\n \n \tcase 'c':\n-\t  pp_character (pp, va_arg (*text->args_ptr, int));\n-\t  break;\n+\t  {\n+\t    /* When quoting, print alphanumeric, punctuation, and the space\n+\t       character unchanged, and all others in hexadecimal with the\n+\t       \"\\x\" prefix.  Otherwise print them all unchanged.  */\n+\t    int chr = va_arg (*text->args_ptr, int);\n+\t    if (ISPRINT (chr) || !quote)\n+\t      pp_character (pp, chr);\n+\t    else\n+\t      {\n+\t\tconst char str [2] = { chr, '\\0' };\n+\t\tpp_quoted_string (pp, str, 1);\n+\t      }\n+\t    break;\n+\t  }\n \n \tcase 'd':\n \tcase 'i':\n@@ -577,7 +591,10 @@ pp_format (pretty_printer *pp, text_info *text)\n \t  break;\n \n \tcase 's':\n-\t  pp_string (pp, va_arg (*text->args_ptr, const char *));\n+\t  if (quote)\n+\t    pp_quoted_string (pp, va_arg (*text->args_ptr, const char *));\n+\t  else\n+\t    pp_string (pp, va_arg (*text->args_ptr, const char *));\n \t  break;\n \n \tcase 'p':\n@@ -939,6 +956,41 @@ pp_string (pretty_printer *pp, const char *str)\n   pp_maybe_wrap_text (pp, str, str + strlen (str));\n }\n \n+/* Append the leading N characters of STRING to the output area of\n+   PRETTY-PRINTER, quoting in hexadecimal non-printable characters.\n+   Setting N = -1 is as if N were set to strlen (STRING).  The STRING\n+   may be line-wrapped if in appropriate mode.  */\n+static void\n+pp_quoted_string (pretty_printer *pp, const char *str, size_t n /* = -1 */)\n+{\n+  gcc_checking_assert (str);\n+\n+  const char *last = str;\n+  const char *ps;\n+\n+  /* Compute the length if not specified.  */\n+  if (n == (size_t) -1)\n+    n = strlen (str);\n+\n+  for (ps = str; n; ++ps, --n)\n+    {\n+      if (ISPRINT (*ps))\n+\t  continue;\n+\n+      if (last < ps)\n+\tpp_maybe_wrap_text (pp, last, ps - 1);\n+\n+      /* Append the hexadecimal value of the character.  Allocate a buffer\n+\t that's large enough for a 32-bit char plus the hex prefix.  */\n+      char buf [11];\n+      int n = sprintf (buf, \"\\\\x%02x\", (unsigned char)*ps);\n+      pp_maybe_wrap_text (pp, buf, buf + n);\n+      last = ps + 1;\n+    }\n+\n+  pp_maybe_wrap_text (pp, last, ps);\n+}\n+\n /* Maybe print out a whitespace if needed.  */\n \n void"}, {"sha": "3b934a03a904a04b3b93d2f09e4dacb9773479be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f0177e74c294542a770fc23742c4e306a1e5d04/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f0177e74c294542a770fc23742c4e306a1e5d04/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3f0177e74c294542a770fc23742c4e306a1e5d04", "patch": "@@ -1,3 +1,10 @@\n+2016-09-09  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/77520\n+\tPR c/77521\n+\t* gcc.dg/pr77520.c: New test.\n+\t* gcc.dg/pr77521.c: New test.\n+\n 2016-09-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/77506"}, {"sha": "b237639fb20f141f0f8e2a6a7f89eaa22d56fcbe", "filename": "gcc/testsuite/gcc.dg/pr77520.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f0177e74c294542a770fc23742c4e306a1e5d04/gcc%2Ftestsuite%2Fgcc.dg%2Fpr77520.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f0177e74c294542a770fc23742c4e306a1e5d04/gcc%2Ftestsuite%2Fgcc.dg%2Fpr77520.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr77520.c?ref=3f0177e74c294542a770fc23742c4e306a1e5d04", "patch": "@@ -0,0 +1,10 @@\n+/* PR c/77520 - wrong value for extended ASCII characters in -Wformat message\n+   Verify that characters in the extended ASCII range are quoted and not\n+   allowed to be printed raw.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat\" } */\n+\n+void f (void)\n+{\n+  __builtin_printf (\"%\\x80\");   /* { dg-warning \"unknown conversion type character .\\\\\\\\x80. in format\" } */\n+}"}, {"sha": "f6b1e3ed2690d7c2aba3d7d68de717d15a26ae85", "filename": "gcc/testsuite/gcc.dg/pr77521.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f0177e74c294542a770fc23742c4e306a1e5d04/gcc%2Ftestsuite%2Fgcc.dg%2Fpr77521.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f0177e74c294542a770fc23742c4e306a1e5d04/gcc%2Ftestsuite%2Fgcc.dg%2Fpr77521.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr77521.c?ref=3f0177e74c294542a770fc23742c4e306a1e5d04", "patch": "@@ -0,0 +1,8 @@\n+/* PR c/77521 - %qc format directive should quote non-printable characters.\n+   Verify that non-printable characters in assembly constraints are quoted\n+   and not allowed to be printed raw.  */\n+\n+void f (int a, int b)\n+{\n+  __asm__ (\"combine %2, %0\" : \"=r\" (a) : \"0\" (a), \"\\n\" (b));   /* { dg-error \"invalid punctuation .\\\\\\\\x0a. in constraint\" } */\n+}"}]}