{"sha": "8a29084dea4f4d340f533a0c9f17aef0572218bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGEyOTA4NGRlYTRmNGQzNDBmNTMzYTBjOWYxN2FlZjA1NzIyMThiYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-03-24T19:21:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-03-24T19:21:38Z"}, "message": "re PR c++/70386 (ICE with -Wall on valid code on x86_64-linux-gnu in verify_ctor_sanity, at cp/constexpr.c:2232)\n\n\tPR c++/70386\n\n\t* constexpr.c (cxx_eval_bare_aggregate): Handle PMFs.\n\nFrom-SVN: r234469", "tree": {"sha": "74b5deb70db55b45ad927b3ccdb64fab326d1805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74b5deb70db55b45ad927b3ccdb64fab326d1805"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a29084dea4f4d340f533a0c9f17aef0572218bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a29084dea4f4d340f533a0c9f17aef0572218bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a29084dea4f4d340f533a0c9f17aef0572218bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a29084dea4f4d340f533a0c9f17aef0572218bc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00e6c25ac8e7129a76deb68df0766d8736fc8442", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00e6c25ac8e7129a76deb68df0766d8736fc8442", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00e6c25ac8e7129a76deb68df0766d8736fc8442"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "45450ec2f06e68b7b8947573b5e223ab722a9712", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a29084dea4f4d340f533a0c9f17aef0572218bc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a29084dea4f4d340f533a0c9f17aef0572218bc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8a29084dea4f4d340f533a0c9f17aef0572218bc", "patch": "@@ -1,5 +1,8 @@\n 2016-03-24  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/70386\n+\t* constexpr.c (cxx_eval_bare_aggregate): Handle PMFs.\n+\n \tPR c++/70323\n \t* constexpr.c (cxx_eval_call_expression): Don't cache result if\n \t*overflow_p."}, {"sha": "8ea71113d9991ec10e41187749dcf5c2561ee350", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a29084dea4f4d340f533a0c9f17aef0572218bc/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a29084dea4f4d340f533a0c9f17aef0572218bc/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=8a29084dea4f4d340f533a0c9f17aef0572218bc", "patch": "@@ -2268,8 +2268,19 @@ cxx_eval_bare_aggregate (const constexpr_ctx *ctx, tree t,\n   vec<constructor_elt, va_gc> *v = CONSTRUCTOR_ELTS (t);\n   bool changed = false;\n   gcc_assert (!BRACE_ENCLOSED_INITIALIZER_P (t));\n+  tree type = TREE_TYPE (t);\n \n-  verify_ctor_sanity (ctx, TREE_TYPE (t));\n+  constexpr_ctx new_ctx;\n+  if (TYPE_PTRMEMFUNC_P (type))\n+    {\n+      /* We don't really need the ctx->ctor business for a PMF, but it's\n+\t simpler to use the same code.  */\n+      new_ctx = *ctx;\n+      new_ctx.ctor = build_constructor (type, NULL);\n+      new_ctx.object = NULL_TREE;\n+      ctx = &new_ctx;\n+    };\n+  verify_ctor_sanity (ctx, type);\n   vec<constructor_elt, va_gc> **p = &CONSTRUCTOR_ELTS (ctx->ctor);\n   vec_alloc (*p, vec_safe_length (v));\n \n@@ -2280,7 +2291,6 @@ cxx_eval_bare_aggregate (const constexpr_ctx *ctx, tree t,\n   FOR_EACH_CONSTRUCTOR_ELT (v, i, index, value)\n     {\n       tree orig_value = value;\n-      constexpr_ctx new_ctx;\n       init_subob_ctx (ctx, new_ctx, index, value);\n       if (new_ctx.ctor != ctx->ctor)\n \t/* If we built a new CONSTRUCTOR, attach it now so that other\n@@ -2334,7 +2344,7 @@ cxx_eval_bare_aggregate (const constexpr_ctx *ctx, tree t,\n   CONSTRUCTOR_NO_IMPLICIT_ZERO (t) = false;\n   TREE_CONSTANT (t) = constant_p;\n   TREE_SIDE_EFFECTS (t) = side_effects_p;\n-  if (VECTOR_TYPE_P (TREE_TYPE (t)))\n+  if (VECTOR_TYPE_P (type))\n     t = fold (t);\n   return t;\n }"}, {"sha": "79e36cf78c0681a834442564aed10664833362ac", "filename": "gcc/testsuite/g++.dg/expr/pmf-2.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a29084dea4f4d340f533a0c9f17aef0572218bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fpmf-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a29084dea4f4d340f533a0c9f17aef0572218bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fpmf-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fpmf-2.C?ref=8a29084dea4f4d340f533a0c9f17aef0572218bc", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/70386\n+// { dg-options \"-Wall\" }\n+\n+struct A { void f () {} };\n+struct B : public A {};\n+struct C : public A {};\n+struct D : public B, public C {};\n+\n+typedef void (C::*cp) ();\n+typedef void (D::*dp) ();\n+\n+int\n+main ()\n+{\n+  cp c = &A::f;\n+  dp d = c;\n+  return (cp () == d);\n+}"}]}