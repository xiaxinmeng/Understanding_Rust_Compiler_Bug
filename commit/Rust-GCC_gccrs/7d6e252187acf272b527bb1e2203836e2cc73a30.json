{"sha": "7d6e252187acf272b527bb1e2203836e2cc73a30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q2ZTI1MjE4N2FjZjI3MmI1MjdiYjFlMjIwMzgzNmUyY2M3M2EzMA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-04-27T14:16:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-04-27T14:16:49Z"}, "message": "Makefile.in (tree-ssa-structalias.o): Remove gt-tree-ssa-structalias.h dependency.\n\n2011-04-27  Richard Guenther  <rguenther@suse.de>\n\n\t* Makefile.in (tree-ssa-structalias.o): Remove\n\tgt-tree-ssa-structalias.h dependency.\n\t(GTFILES): Remove tree-ssa-structalias.c.\n\t* tree.c (allocate_decl_uid): New function.\n\t(make_node_stat): Use it.\n\t(copy_node_stat): Likewise.\n\t* tree.h (allocate_decl_uid): Declare.\n\t* tree-ssa-alias.h (delete_alias_heapvars): Remove.\n\t* tree-ssa.c (delete_tree_ssa): Do not call delete_alias_heapvars.\n\t* tree-flow.h (struct var_ann_d): Remove is_heapvar flag.\n\t* tree-ssa-live.c (remove_unused_locals): Do not check is_heapvar\n\tflag.\n\t* tree-ssa-structalias.c (heapvar_for_stmt): Remove.\n\t(struct heapvar_map): Likewise.\n\t(heapvar_map_eq, heapvar_map_hash, heapvar_lookup,\n\theapvar_insert): Likewise.\n\t(make_heapvar_for): Rename to ...\n\t(make_heapvar): ... this.  Simplify.\n\t(fake_var_decl_obstack): New global var.\n\t(build_fake_var_decl): New function.\n\t(make_constraint_from_heapvar): Adjust.\n\t(handle_lhs_call): Likewise.\n\t(create_function_info_for): Likewise.\n\t(intra_create_variable_infos): Likewise.\n\t(init_alias_vars): Allocate fake_var_decl_obstack.\n\t(init_alias_heapvars, delete_alias_heapvars): Remove.\n\t(compute_points_to_sets): Do not call init_alias_heapvars.\n\t(ipa_pta_execute): Likewise.\n\t(delete_points_to_sets): Free fake_var_decl_obstack.\n\n\t* gcc.dg/tree-ssa/pr23382.c: Remove.\n\nFrom-SVN: r173030", "tree": {"sha": "6e36da60e1597c34e2f156dbe7fb460bb7dfcb6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e36da60e1597c34e2f156dbe7fb460bb7dfcb6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d6e252187acf272b527bb1e2203836e2cc73a30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6e252187acf272b527bb1e2203836e2cc73a30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d6e252187acf272b527bb1e2203836e2cc73a30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6e252187acf272b527bb1e2203836e2cc73a30/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "526ed6c2419a18727a0dfafbd712c464ea02930b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/526ed6c2419a18727a0dfafbd712c464ea02930b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/526ed6c2419a18727a0dfafbd712c464ea02930b"}], "stats": {"total": 234, "additions": 85, "deletions": 149}, "files": [{"sha": "885529ec7c503b90e0e1f386a7083edb8ddd9f06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6e252187acf272b527bb1e2203836e2cc73a30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6e252187acf272b527bb1e2203836e2cc73a30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d6e252187acf272b527bb1e2203836e2cc73a30", "patch": "@@ -1,3 +1,35 @@\n+2011-04-27  Richard Guenther  <rguenther@suse.de>\n+\n+\t* Makefile.in (tree-ssa-structalias.o): Remove\n+\tgt-tree-ssa-structalias.h dependency.\n+\t(GTFILES): Remove tree-ssa-structalias.c.\n+\t* tree.c (allocate_decl_uid): New function.\n+\t(make_node_stat): Use it.\n+\t(copy_node_stat): Likewise.\n+\t* tree.h (allocate_decl_uid): Declare.\n+\t* tree-ssa-alias.h (delete_alias_heapvars): Remove.\n+\t* tree-ssa.c (delete_tree_ssa): Do not call delete_alias_heapvars.\n+\t* tree-flow.h (struct var_ann_d): Remove is_heapvar flag.\n+\t* tree-ssa-live.c (remove_unused_locals): Do not check is_heapvar\n+\tflag.\n+\t* tree-ssa-structalias.c (heapvar_for_stmt): Remove.\n+\t(struct heapvar_map): Likewise.\n+\t(heapvar_map_eq, heapvar_map_hash, heapvar_lookup,\n+\theapvar_insert): Likewise.\n+\t(make_heapvar_for): Rename to ...\n+\t(make_heapvar): ... this.  Simplify.\n+\t(fake_var_decl_obstack): New global var.\n+\t(build_fake_var_decl): New function.\n+\t(make_constraint_from_heapvar): Adjust.\n+\t(handle_lhs_call): Likewise.\n+\t(create_function_info_for): Likewise.\n+\t(intra_create_variable_infos): Likewise.\n+\t(init_alias_vars): Allocate fake_var_decl_obstack.\n+\t(init_alias_heapvars, delete_alias_heapvars): Remove.\n+\t(compute_points_to_sets): Do not call init_alias_heapvars.\n+\t(ipa_pta_execute): Likewise.\n+\t(delete_points_to_sets): Free fake_var_decl_obstack.\n+\n 2011-04-27  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/spu/divmovti4.c (union qword_UTItype): New data type."}, {"sha": "618046c0b1a417ee030f2e5e34fa99b60f752e43", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6e252187acf272b527bb1e2203836e2cc73a30/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6e252187acf272b527bb1e2203836e2cc73a30/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7d6e252187acf272b527bb1e2203836e2cc73a30", "patch": "@@ -2381,7 +2381,7 @@ tree-ssa-structalias.o: tree-ssa-structalias.c \\\n    $(DIAGNOSTIC_H) $(TREE_H) $(TREE_FLOW_H) $(TREE_INLINE_H) \\\n    $(GIMPLE_H) $(HASHTAB_H) $(FUNCTION_H) $(CGRAPH_H) \\\n    $(TREE_PASS_H) $(TIMEVAR_H) alloc-pool.h $(SPLAY_TREE_H) $(PARAMS_H) \\\n-   gt-tree-ssa-structalias.h $(CGRAPH_H) $(ALIAS_H) pointer-set.h\n+   $(CGRAPH_H) $(ALIAS_H) pointer-set.h\n tree-ssa-uninit.o : tree-ssa-uninit.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TM_P_H) $(EXPR_H) output.h $(DIAGNOSTIC_H) \\\n    $(FUNCTION_H) $(TIMEVAR_H) $(TM_H) coretypes.h \\\n@@ -3776,7 +3776,6 @@ GTFILES = $(CPP_ID_DATA_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/targhooks.c $(out_file) $(srcdir)/passes.c $(srcdir)/cgraphunit.c \\\n   $(srcdir)/tree-ssa-propagate.c \\\n   $(srcdir)/tree-phinodes.c \\\n-  $(srcdir)/tree-ssa-structalias.c \\\n   $(srcdir)/lto-symtab.c \\\n   $(srcdir)/tree-ssa-alias.h \\\n   $(srcdir)/ipa-prop.h \\"}, {"sha": "a745edcac56e6d966f9eb682f0a13696426c2ff3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6e252187acf272b527bb1e2203836e2cc73a30/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6e252187acf272b527bb1e2203836e2cc73a30/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d6e252187acf272b527bb1e2203836e2cc73a30", "patch": "@@ -1,3 +1,7 @@\n+2011-04-27  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/pr23382.c: Remove.\n+\n 2011-04-27  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR target/48767"}, {"sha": "fd74af8d6a18f9373c42a67eceee990de9a01626", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23382.c", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526ed6c2419a18727a0dfafbd712c464ea02930b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23382.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526ed6c2419a18727a0dfafbd712c464ea02930b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23382.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23382.c?ref=526ed6c2419a18727a0dfafbd712c464ea02930b", "patch": "@@ -1,17 +0,0 @@\n-/* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-pre-details\" } */\n-struct a\n-{\n-  int length;\n-  int a1[256];\n-};\n-\n-void *malloc(__SIZE_TYPE__ size) __attribute__((malloc));\n-\n-int f(void)\n-{\n-   struct a *a = malloc(sizeof(struct a));\n-   return a->length;\n-}\n-/* { dg-final { scan-tree-dump-times \"Variable: HEAP\" 1 \"pre\"} } */\n-/* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "adae4630b01b165b13d4d3d34464966aad4c5879", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6e252187acf272b527bb1e2203836e2cc73a30/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6e252187acf272b527bb1e2203836e2cc73a30/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=7d6e252187acf272b527bb1e2203836e2cc73a30", "patch": "@@ -172,10 +172,6 @@ struct GTY(()) var_ann_d {\n      states.  */\n   ENUM_BITFIELD (need_phi_state) need_phi_state : 2;\n \n-  /* True for HEAP artificial variables.  These variables represent\n-     the memory area allocated by a call to malloc.  */\n-  unsigned is_heapvar : 1;\n-\n   /* Used by var_map for the base index of ssa base variables.  */\n   unsigned base_index;\n "}, {"sha": "75e4303a7ab54aea20688bb73f030ba6d1b9907e", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6e252187acf272b527bb1e2203836e2cc73a30/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6e252187acf272b527bb1e2203836e2cc73a30/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=7d6e252187acf272b527bb1e2203836e2cc73a30", "patch": "@@ -125,7 +125,6 @@ extern void dump_alias_stats (FILE *);\n \n /* In tree-ssa-structalias.c  */\n extern unsigned int compute_may_aliases (void);\n-extern void delete_alias_heapvars (void);\n extern bool pt_solution_empty_p (struct pt_solution *);\n extern bool pt_solution_includes_global (struct pt_solution *);\n extern bool pt_solution_includes (struct pt_solution *, const_tree);"}, {"sha": "65b3855775a9af0ae22a08c024c3fe3db45742b4", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6e252187acf272b527bb1e2203836e2cc73a30/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6e252187acf272b527bb1e2203836e2cc73a30/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=7d6e252187acf272b527bb1e2203836e2cc73a30", "patch": "@@ -820,8 +820,7 @@ remove_unused_locals (void)\n     if (!is_global_var (t)\n \t&& TREE_CODE (t) != PARM_DECL\n \t&& TREE_CODE (t) != RESULT_DECL\n-\t&& !is_used_p (t)\n-\t&& !var_ann (t)->is_heapvar)\n+\t&& !is_used_p (t))\n       remove_referenced_var (t);\n   remove_unused_scope_block_p (DECL_INITIAL (current_function_decl));\n   if (dump_file && (dump_flags & TDF_DETAILS))"}, {"sha": "1119c387d155946b1f852780dfb17a8437ec5ee4", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 34, "deletions": 119, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6e252187acf272b527bb1e2203836e2cc73a30/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6e252187acf272b527bb1e2203836e2cc73a30/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=7d6e252187acf272b527bb1e2203836e2cc73a30", "patch": "@@ -197,8 +197,6 @@\n    keep the set of called functions for indirect calls.\n \n    And probably more.  */\n-static GTY ((if_marked (\"tree_map_marked_p\"), param_is (struct heapvar_map)))\n-htab_t heapvar_for_stmt;\n \n static bool use_field_sensitive = true;\n static int in_ipa_mode = 0;\n@@ -333,61 +331,6 @@ enum { nothing_id = 0, anything_id = 1, readonly_id = 2,\n        escaped_id = 3, nonlocal_id = 4,\n        storedanything_id = 5, integer_id = 6 };\n \n-struct GTY(()) heapvar_map {\n-  struct tree_map map;\n-  unsigned HOST_WIDE_INT offset;\n-};\n-\n-static int\n-heapvar_map_eq (const void *p1, const void *p2)\n-{\n-  const struct heapvar_map *h1 = (const struct heapvar_map *)p1;\n-  const struct heapvar_map *h2 = (const struct heapvar_map *)p2;\n-  return (h1->map.base.from == h2->map.base.from\n-\t  && h1->offset == h2->offset);\n-}\n-\n-static unsigned int\n-heapvar_map_hash (struct heapvar_map *h)\n-{\n-  return iterative_hash_host_wide_int (h->offset,\n-\t\t\t\t       htab_hash_pointer (h->map.base.from));\n-}\n-\n-/* Lookup a heap var for FROM, and return it if we find one.  */\n-\n-static tree\n-heapvar_lookup (tree from, unsigned HOST_WIDE_INT offset)\n-{\n-  struct heapvar_map *h, in;\n-  in.map.base.from = from;\n-  in.offset = offset;\n-  h = (struct heapvar_map *) htab_find_with_hash (heapvar_for_stmt, &in,\n-\t\t\t\t\t\t  heapvar_map_hash (&in));\n-  if (h)\n-    return h->map.to;\n-  return NULL_TREE;\n-}\n-\n-/* Insert a mapping FROM->TO in the heap var for statement\n-   hashtable.  */\n-\n-static void\n-heapvar_insert (tree from, unsigned HOST_WIDE_INT offset, tree to)\n-{\n-  struct heapvar_map *h;\n-  void **loc;\n-\n-  h = ggc_alloc_heapvar_map ();\n-  h->map.base.from = from;\n-  h->offset = offset;\n-  h->map.hash = heapvar_map_hash (h);\n-  h->map.to = to;\n-  loc = htab_find_slot_with_hash (heapvar_for_stmt, h, h->map.hash, INSERT);\n-  gcc_assert (*loc == NULL);\n-  *(struct heapvar_map **) loc = h;\n-}\n-\n /* Return a new variable info structure consisting for a variable\n    named NAME, and using constraint graph node NODE.  Append it\n    to the vector of variable info structures.  */\n@@ -3664,31 +3607,35 @@ make_transitive_closure_constraints (varinfo_t vi)\n   process_constraint (new_constraint (lhs, rhs));\n }\n \n+/* Temporary storage for fake var decls.  */\n+struct obstack fake_var_decl_obstack;\n+\n+/* Build a fake VAR_DECL acting as referrer to a DECL_UID.  */\n+\n+static tree\n+build_fake_var_decl (tree type)\n+{\n+  tree decl = (tree) XOBNEW (&fake_var_decl_obstack, struct tree_var_decl);\n+  memset (decl, 0, sizeof (struct tree_var_decl));\n+  TREE_SET_CODE (decl, VAR_DECL);\n+  TREE_TYPE (decl) = type;\n+  DECL_UID (decl) = allocate_decl_uid ();\n+  SET_DECL_PT_UID (decl, -1);\n+  layout_decl (decl, 0);\n+  return decl;\n+}\n+\n /* Create a new artificial heap variable with NAME.\n    Return the created variable.  */\n \n static varinfo_t\n-make_heapvar_for (varinfo_t lhs, const char *name)\n+make_heapvar (const char *name)\n {\n   varinfo_t vi;\n-  tree heapvar = heapvar_lookup (lhs->decl, lhs->offset);\n-\n-  if (heapvar == NULL_TREE)\n-    {\n-      var_ann_t ann;\n-      heapvar = create_tmp_var_raw (ptr_type_node, name);\n-      DECL_EXTERNAL (heapvar) = 1;\n-\n-      heapvar_insert (lhs->decl, lhs->offset, heapvar);\n-\n-      ann = get_var_ann (heapvar);\n-      ann->is_heapvar = 1;\n-    }\n-\n-  /* For global vars we need to add a heapvar to the list of referenced\n-     vars of a different function than it was created for originally.  */\n-  if (cfun && gimple_referenced_vars (cfun))\n-    add_referenced_var (heapvar);\n+  tree heapvar;\n+  \n+  heapvar = build_fake_var_decl (ptr_type_node);\n+  DECL_EXTERNAL (heapvar) = 1;\n \n   vi = new_var_info (heapvar, name);\n   vi->is_artificial_var = true;\n@@ -3709,7 +3656,7 @@ make_heapvar_for (varinfo_t lhs, const char *name)\n static varinfo_t\n make_constraint_from_heapvar (varinfo_t lhs, const char *name)\n {\n-  varinfo_t vi = make_heapvar_for (lhs, name);\n+  varinfo_t vi = make_heapvar (name);\n   make_constraint_from (lhs, vi->id);\n \n   return vi;\n@@ -3907,7 +3854,7 @@ handle_lhs_call (gimple stmt, tree lhs, int flags, VEC(ce_s, heap) *rhsc,\n       varinfo_t vi;\n       struct constraint_expr tmpc;\n       rhsc = NULL;\n-      vi = make_heapvar_for (get_vi_for_tree (lhs), \"HEAP\");\n+      vi = make_heapvar (\"HEAP\");\n       /* We delay marking allocated storage global until we know if\n          it escapes.  */\n       DECL_EXTERNAL (vi->decl) = 0;\n@@ -5323,8 +5270,7 @@ create_function_info_for (tree decl, const char *name)\n       free (tempname);\n \n       /* We need sth that can be pointed to for va_start.  */\n-      decl = create_tmp_var_raw (ptr_type_node, name);\n-      get_var_ann (decl);\n+      decl = build_fake_var_decl (ptr_type_node);\n \n       argvi = new_var_info (decl, newname);\n       argvi->offset = fi_parm_base + num_args;\n@@ -5587,23 +5533,13 @@ intra_create_variable_infos (void)\n \t{\n \t  struct constraint_expr lhsc, rhsc;\n \t  varinfo_t vi;\n-\t  tree heapvar = heapvar_lookup (t, 0);\n-\t  if (heapvar == NULL_TREE)\n-\t    {\n-\t      var_ann_t ann;\n-\t      heapvar = create_tmp_var_raw (TREE_TYPE (TREE_TYPE (t)),\n-\t\t\t\t\t    \"PARM_NOALIAS\");\n-\t      DECL_EXTERNAL (heapvar) = 1;\n-\t      heapvar_insert (t, 0, heapvar);\n-\t      ann = get_var_ann (heapvar);\n-\t      ann->is_heapvar = 1;\n-\t    }\n-\t  if (gimple_referenced_vars (cfun))\n-\t    add_referenced_var (heapvar);\n+\t  tree heapvar = build_fake_var_decl (TREE_TYPE (TREE_TYPE (t)));\n+\t  DECL_EXTERNAL (heapvar) = 1;\n+\t  vi = get_varinfo (create_variable_info_for (heapvar, \"PARM_NOALIAS\"));\n \t  lhsc.var = get_vi_for_tree (t)->id;\n \t  lhsc.type = SCALAR;\n \t  lhsc.offset = 0;\n-\t  rhsc.var = (vi = get_vi_for_tree (heapvar))->id;\n+\t  rhsc.var = vi->id;\n \t  rhsc.type = ADDRESSOF;\n \t  rhsc.offset = 0;\n \t  process_constraint (new_constraint (lhsc, rhsc));\n@@ -6371,6 +6307,8 @@ init_alias_vars (void)\n   shared_bitmap_table = htab_create (511, shared_bitmap_hash,\n \t\t\t\t     shared_bitmap_eq, free);\n   init_base_vars ();\n+\n+  gcc_obstack_init (&fake_var_decl_obstack);\n }\n \n /* Remove the REF and ADDRESS edges from GRAPH, as well as all the\n@@ -6409,26 +6347,6 @@ remove_preds_and_fake_succs (constraint_graph_t graph)\n   bitmap_obstack_release (&predbitmap_obstack);\n }\n \n-/* Initialize the heapvar for statement mapping.  */\n-\n-static void\n-init_alias_heapvars (void)\n-{\n-  if (!heapvar_for_stmt)\n-    heapvar_for_stmt = htab_create_ggc (11, tree_map_hash, heapvar_map_eq,\n-\t\t\t\t\tNULL);\n-}\n-\n-/* Delete the heapvar for statement mapping.  */\n-\n-void\n-delete_alias_heapvars (void)\n-{\n-  if (heapvar_for_stmt)\n-    htab_delete (heapvar_for_stmt);\n-  heapvar_for_stmt = NULL;\n-}\n-\n /* Solve the constraint set.  */\n \n static void\n@@ -6500,7 +6418,6 @@ compute_points_to_sets (void)\n   timevar_push (TV_TREE_PTA);\n \n   init_alias_vars ();\n-  init_alias_heapvars ();\n \n   intra_create_variable_infos ();\n \n@@ -6651,6 +6568,8 @@ delete_points_to_sets (void)\n   VEC_free (varinfo_t, heap, varmap);\n   free_alloc_pool (variable_info_pool);\n   free_alloc_pool (constraint_pool);\n+\n+  obstack_free (&fake_var_decl_obstack, NULL);\n }\n \n \n@@ -6776,7 +6695,6 @@ ipa_pta_execute (void)\n \n   in_ipa_mode = 1;\n \n-  init_alias_heapvars ();\n   init_alias_vars ();\n \n   /* Build the constraints.  */\n@@ -7119,6 +7037,3 @@ struct simple_ipa_opt_pass pass_ipa_pta =\n   TODO_update_ssa                       /* todo_flags_finish */\n  }\n };\n-\n-\n-#include \"gt-tree-ssa-structalias.h\""}, {"sha": "9bdcdfcb1d28495a3d4a9a84fa8dbb3e8cc59b26", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6e252187acf272b527bb1e2203836e2cc73a30/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6e252187acf272b527bb1e2203836e2cc73a30/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=7d6e252187acf272b527bb1e2203836e2cc73a30", "patch": "@@ -1187,8 +1187,6 @@ delete_tree_ssa (void)\n   if (ssa_operands_active ())\n     fini_ssa_operands ();\n \n-  delete_alias_heapvars ();\n-\n   htab_delete (cfun->gimple_df->default_defs);\n   cfun->gimple_df->default_defs = NULL;\n   pt_solution_reset (&cfun->gimple_df->escaped);"}, {"sha": "b175221c779292954524c27a76158a50bed458b1", "filename": "gcc/tree.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6e252187acf272b527bb1e2203836e2cc73a30/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6e252187acf272b527bb1e2203836e2cc73a30/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=7d6e252187acf272b527bb1e2203836e2cc73a30", "patch": "@@ -814,6 +814,14 @@ record_node_allocation_statistics (enum tree_code code ATTRIBUTE_UNUSED,\n #endif\n }\n \n+/* Allocate and return a new UID from the DECL_UID namespace.  */\n+\n+int\n+allocate_decl_uid (void)\n+{\n+  return next_decl_uid++;\n+}\n+\n /* Return a newly allocated node of code CODE.  For decl and type\n    nodes, some other fields are initialized.  The rest of the node is\n    initialized to zero.  This function cannot be used for TREE_VEC or\n@@ -857,7 +865,7 @@ make_node_stat (enum tree_code code MEM_STAT_DECL)\n \tDECL_UID (t) = --next_debug_decl_uid;\n       else\n \t{\n-\t  DECL_UID (t) = next_decl_uid++;\n+\t  DECL_UID (t) = allocate_decl_uid ();\n \t  SET_DECL_PT_UID (t, -1);\n \t}\n       if (TREE_CODE (t) == LABEL_DECL)\n@@ -942,7 +950,7 @@ copy_node_stat (tree node MEM_STAT_DECL)\n \tDECL_UID (t) = --next_debug_decl_uid;\n       else\n \t{\n-\t  DECL_UID (t) = next_decl_uid++;\n+\t  DECL_UID (t) = allocate_decl_uid ();\n \t  if (DECL_PT_UID_SET_P (node))\n \t    SET_DECL_PT_UID (t, DECL_PT_UID (node));\n \t}"}, {"sha": "8baaf7b7fd01f5d5a75dcf760c604979ab0d55ed", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6e252187acf272b527bb1e2203836e2cc73a30/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6e252187acf272b527bb1e2203836e2cc73a30/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7d6e252187acf272b527bb1e2203836e2cc73a30", "patch": "@@ -4017,6 +4017,9 @@ extern size_t tree_size (const_tree);\n    length.  */\n extern size_t tree_code_size (enum tree_code);\n \n+/* Allocate and return a new UID from the DECL_UID namespace.  */\n+extern int allocate_decl_uid (void);\n+\n /* Lowest level primitive for allocating a node.\n    The TREE_CODE is the only argument.  Contents are initialized\n    to zero except for a few of the common fields.  */"}]}