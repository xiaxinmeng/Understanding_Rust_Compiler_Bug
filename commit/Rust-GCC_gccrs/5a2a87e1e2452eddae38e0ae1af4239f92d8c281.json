{"sha": "5a2a87e1e2452eddae38e0ae1af4239f92d8c281", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEyYTg3ZTFlMjQ1MmVkZGFlMzhlMGFlMWFmNDIzOWY5MmQ4YzI4MQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2018-01-08T18:20:21Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-01-08T18:20:21Z"}, "message": "re PR rtl-optimization/81308 (ICE in calc_dfs_tree, at dominance.c:458)\n\n\tPR rtl-optimizatin/81308\n\t* tree-switch-conversion.c (cfg_altered): New file scoped static.\n\t(process_switch): If group_case_labels makes a change, then set\n\tcfg_altered.\n\t(pass_convert_switch::execute): If a switch is converted, then\n\tset cfg_altered.  Return TODO_cfg_cleanup if cfg_altered is true.\n\n\tPR rtl-optimizatin/81308\n\t* g++.dg/pr81308-1.C: New test.\n\t* g++.dg/pr81308-2.C: New test.\n\nFrom-SVN: r256349", "tree": {"sha": "2a8ac5e5a5abf53775d597fed31ff4df51e1ff93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a8ac5e5a5abf53775d597fed31ff4df51e1ff93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a2a87e1e2452eddae38e0ae1af4239f92d8c281", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a2a87e1e2452eddae38e0ae1af4239f92d8c281", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a2a87e1e2452eddae38e0ae1af4239f92d8c281", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a2a87e1e2452eddae38e0ae1af4239f92d8c281/comments", "author": null, "committer": null, "parents": [{"sha": "b9a4d2ba48c98fb0cc894489a26f1b16b01b1ecd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9a4d2ba48c98fb0cc894489a26f1b16b01b1ecd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9a4d2ba48c98fb0cc894489a26f1b16b01b1ecd"}], "stats": {"total": 128, "additions": 126, "deletions": 2}, "files": [{"sha": "7599c556a25ecee004ad4ec3ff4a285ce663f57e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2a87e1e2452eddae38e0ae1af4239f92d8c281/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2a87e1e2452eddae38e0ae1af4239f92d8c281/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a2a87e1e2452eddae38e0ae1af4239f92d8c281", "patch": "@@ -1,5 +1,12 @@\n 2017-01-08  Jeff Law  <law@redhat.com>\n \n+\tPR rtl-optimizatin/81308\n+\t* tree-switch-conversion.c (cfg_altered): New file scoped static.\n+\t(process_switch): If group_case_labels makes a change, then set\n+\tcfg_altered.\n+\t(pass_convert_switch::execute): If a switch is converted, then\n+\tset cfg_altered.  Return TODO_cfg_cleanup if cfg_altered is true.\n+\n \tPR rtl-optimization/81308\n \t* recog.c (split_all_insns): Conditionally cleanup the CFG after\n \tsplitting insns."}, {"sha": "33f8bddd983318a08fd86fdffcde76337ea073f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2a87e1e2452eddae38e0ae1af4239f92d8c281/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2a87e1e2452eddae38e0ae1af4239f92d8c281/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a2a87e1e2452eddae38e0ae1af4239f92d8c281", "patch": "@@ -1,3 +1,9 @@\n+2018-01-08  Jeff Law  <law@redhat.com>\n+\n+\tPR rtl-optimizatin/81308\n+\t* g++.dg/pr81308-1.C: New test.\n+\t* g++.dg/pr81308-2.C: New test.\n+\n 2018-01-08  Vidya Praveen <vidyapraveen@arm.com>\n \n \tPR target/83663 - Revert r255946"}, {"sha": "508372bf5e7955e31cf9c74794dde8302bbcb13c", "filename": "gcc/testsuite/g++.dg/pr81308-1.C", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2a87e1e2452eddae38e0ae1af4239f92d8c281/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr81308-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2a87e1e2452eddae38e0ae1af4239f92d8c281/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr81308-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr81308-1.C?ref=5a2a87e1e2452eddae38e0ae1af4239f92d8c281", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-w -O2 -fno-exceptions -std=c++11 -fpermissive\" } */\n+\n+namespace a {\n+template <typename b, b c> struct d { static constexpr b e = c; };\n+template <typename> struct f : d<bool, __is_trivially_copyable(int)> {};\n+}\n+typedef long g;\n+template <typename> struct h { static const bool e = a::f<int>::e; };\n+namespace a {\n+template <typename> struct ah;\n+template <typename> class ai;\n+}\n+class i {\n+public:\n+  operator[](long) const {}\n+};\n+template <typename, int> class am : public i {};\n+class an;\n+class k : public am<a::ai<an>, h<a::ai<a::ah<an>>>::e> {};\n+class l {\n+public:\n+  aq();\n+};\n+class ar extern as;\n+typedef k at;\n+class m {\n+  virtual bool av(int, unsigned &, at &, int &, g &, bool);\n+};\n+class ar {\n+public:\n+  typedef m *aw(const &, int &, const &, const &);\n+};\n+struct ax {\n+  static ay(ar::aw);\n+};\n+template <class az> struct n {\n+  n(ar) { ax::ay(ba); }\n+  static m *ba(const &bb, int &bc, const &bd, const &be) { az(bb, bc, bd, be); }\n+};\n+namespace {\n+class G : m {\n+  unsigned bi(const at &, l &);\n+  bool av(int, unsigned &, at &, int &, g &, bool);\n+\n+public:\n+  G(const, int, const, const) {}\n+};\n+}\n+bool G::av(int, unsigned &, at &bl, int &, g &, bool) {\n+  l bo;\n+  bi(bl, bo);\n+}\n+o() { n<G> bp(as); }\n+namespace {\n+enum { bq, br };\n+}\n+unsigned G::bi(const at &bl, l &bo) {\n+  unsigned bs;\n+  for (char *j;; j += 2)\n+    switch (*j) {\n+    case bq:\n+      bl[bs];\n+    case br:\n+      bo.aq();\n+    }\n+}"}, {"sha": "97e3409e06c4fc3d65168c28cf04edf92536c319", "filename": "gcc/testsuite/g++.dg/pr81308-2.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2a87e1e2452eddae38e0ae1af4239f92d8c281/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr81308-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2a87e1e2452eddae38e0ae1af4239f92d8c281/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr81308-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr81308-2.C?ref=5a2a87e1e2452eddae38e0ae1af4239f92d8c281", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-w -O2\" } */\n+\n+struct A {\n+  int operator[](int) const {}\n+};\n+struct B {\n+  void m_fn1();\n+};\n+struct C {\n+  virtual bool m_fn2(int, unsigned &, A &, int &, unsigned long &, bool);\n+};\n+template <class MCAsmParserImpl> struct D {\n+  D(int) { MCAsmParserImpl(0, 0, 0, 0); }\n+};\n+int a;\n+namespace {\n+struct F : C {\n+  bool m_fn2(int, unsigned &, A &, int &, unsigned long &, bool);\n+  unsigned m_fn3(const A &, B &);\n+  F(int, int, int, int) {}\n+};\n+}\n+bool F::m_fn2(int, unsigned &, A &p3, int &, unsigned long &, bool) {\n+  B b;\n+  m_fn3(p3, b);\n+}\n+void fn1() { D<F>(0); }\n+unsigned F::m_fn3(const A &p1, B &p2) {\n+  for (int *p;; p++)\n+    switch (*p) {\n+    case 0:\n+      p1[a];\n+    case 1:\n+      p2.m_fn1();\n+    }\n+}\n+"}, {"sha": "c253890834070a4f6161c55cd09821df080a8bed", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2a87e1e2452eddae38e0ae1af4239f92d8c281/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2a87e1e2452eddae38e0ae1af4239f92d8c281/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=5a2a87e1e2452eddae38e0ae1af4239f92d8c281", "patch": "@@ -60,6 +60,10 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \t  targetm.case_values_threshold(), or be its own param.  */\n #define MAX_CASE_BIT_TESTS  3\n \n+/* Track whether or not we have altered the CFG and thus may need to\n+   cleanup the CFG when complete.  */\n+bool cfg_altered;\n+\n /* Split the basic block at the statement pointed to by GSIP, and insert\n    a branch to the target basic block of E_TRUE conditional on tree\n    expression COND.\n@@ -1492,7 +1496,7 @@ process_switch (gswitch *swtch)\n \n   /* Group case labels so that we get the right results from the heuristics\n      that decide on the code generation approach for this switch.  */\n-  group_case_labels_stmt (swtch);\n+  cfg_altered |= group_case_labels_stmt (swtch);\n \n   /* If this switch is now a degenerate case with only a default label,\n      there is nothing left for us to do.   */\n@@ -1605,6 +1609,7 @@ pass_convert_switch::execute (function *fun)\n {\n   basic_block bb;\n \n+  cfg_altered = false;\n   FOR_EACH_BB_FN (bb, fun)\n   {\n     const char *failure_reason;\n@@ -1625,6 +1630,7 @@ pass_convert_switch::execute (function *fun)\n \tfailure_reason = process_switch (as_a <gswitch *> (stmt));\n \tif (! failure_reason)\n \t  {\n+\t    cfg_altered = true;\n \t    if (dump_file)\n \t      {\n \t\tfputs (\"Switch converted\\n\", dump_file);\n@@ -1648,7 +1654,7 @@ pass_convert_switch::execute (function *fun)\n       }\n   }\n \n-  return 0;\n+  return cfg_altered ? TODO_cleanup_cfg : 0;\n }\n \n } // anon namespace"}]}