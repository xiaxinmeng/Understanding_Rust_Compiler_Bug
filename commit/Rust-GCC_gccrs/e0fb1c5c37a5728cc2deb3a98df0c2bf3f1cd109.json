{"sha": "e0fb1c5c37a5728cc2deb3a98df0c2bf3f1cd109", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBmYjFjNWMzN2E1NzI4Y2MyZGViM2E5OGRmMGMyYmYzZjFjZDEwOQ==", "commit": {"author": {"name": "Dhruv Matani", "email": "dhruvbird@gmx.net", "date": "2004-04-12T16:11:21Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-04-12T16:11:21Z"}, "message": "list_sort_search.cc: Minor formatting fixes.\n\n2004-04-12  Dhruv Matani  <dhruvbird@gmx.net>\n\n\t* testsuite/performance/20_util/allocator/list_sort_search.cc:\n\tMinor formatting fixes.\n\t* testsuite/performance/20_util/allocator/map_mt_find.cc:\n\tLikewise.\n\nFrom-SVN: r80624", "tree": {"sha": "01b410307080fcacaee8ef69083ad040e101f29c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01b410307080fcacaee8ef69083ad040e101f29c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0fb1c5c37a5728cc2deb3a98df0c2bf3f1cd109", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0fb1c5c37a5728cc2deb3a98df0c2bf3f1cd109", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0fb1c5c37a5728cc2deb3a98df0c2bf3f1cd109", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0fb1c5c37a5728cc2deb3a98df0c2bf3f1cd109/comments", "author": null, "committer": null, "parents": [{"sha": "9fabf579ef895c009749a0e7bfd331e354c5d4b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fabf579ef895c009749a0e7bfd331e354c5d4b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fabf579ef895c009749a0e7bfd331e354c5d4b1"}], "stats": {"total": 255, "additions": 129, "deletions": 126}, "files": [{"sha": "67bff0fb323dcf5ca8419b92b7cfb47eed46d96b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0fb1c5c37a5728cc2deb3a98df0c2bf3f1cd109/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0fb1c5c37a5728cc2deb3a98df0c2bf3f1cd109/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e0fb1c5c37a5728cc2deb3a98df0c2bf3f1cd109", "patch": "@@ -1,3 +1,10 @@\n+2004-04-12  Dhruv Matani  <dhruvbird@gmx.net>\n+\n+\t* testsuite/performance/20_util/allocator/list_sort_search.cc:\n+\tMinor formatting fixes.\n+\t* testsuite/performance/20_util/allocator/map_mt_find.cc:\n+\tLikewise.\n+\n 2004-04-12  Paolo Carlini <pcarlini@suse.de>\n \n \t* config/locale/gnu/numeric_members.cc"}, {"sha": "09d1821bf3c37664825dfae4ecdc784165dbd6ba", "filename": "libstdc++-v3/testsuite/performance/20_util/allocator/list_sort_search.cc", "status": "modified", "additions": 57, "deletions": 59, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0fb1c5c37a5728cc2deb3a98df0c2bf3f1cd109/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Flist_sort_search.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0fb1c5c37a5728cc2deb3a98df0c2bf3f1cd109/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Flist_sort_search.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Flist_sort_search.cc?ref=e0fb1c5c37a5728cc2deb3a98df0c2bf3f1cd109", "patch": "@@ -27,6 +27,10 @@\n \n // 2004-03-11  Dhruv Matani  <dhruvbird@HotPOP.com>\n \n+#include <list>\n+#include <map>\n+#include <algorithm>\n+#include <cstdlib>\n #include <typeinfo>\n #include <sstream>\n #include <ext/mt_allocator.h>\n@@ -38,76 +42,72 @@\n \n using namespace std;\n using __gnu_cxx::malloc_allocator;\n+using __gnu_cxx::new_allocator;\n using __gnu_cxx::__mt_alloc;\n using __gnu_cxx::bitmap_allocator;\n using __gnu_cxx::__pool_alloc;\n \n typedef int test_type;\n \n-using namespace __gnu_cxx;\n-\n-#include <list>\n-#include <map>\n-#include <algorithm>\n-#include <cstdlib>\n-using namespace std;\n-\n template <typename Alloc>\n-int Test_Allocator ()\n-{\n-  typedef list<int, Alloc> My_List;\n-  My_List il1;\n-\n-  int const Iter = 150000;\n-\n-  int ctr = 3;\n-  while (ctr--)\n-    {\n-      for (int i = 0; i < Iter; ++i)\n-\til1.push_back (rand()%500001);\n-\n-      //Search for random values that may or may not belong to the list.\n-      for (int i = 0; i < 50; ++i)\n-\tstd::find (il1.begin(), il1.end(), rand()%100001);\n+  int\n+  Test_Allocator()\n+  {\n+    typedef list<int, Alloc> My_List;\n+    My_List il1;\n+    int const Iter = 150000;\n+\n+    int ctr = 3;\n+    while (ctr--)\n+      {\n+\tfor (int i = 0; i < Iter; ++i)\n+\t  il1.push_back(rand()%500001);\n+\n+\t//Search for random values that may or may not belong to the list.\n+\tfor (int i = 0; i < 50; ++i)\n+\t  std::find(il1.begin(), il1.end(), rand() % 100001);\n       \n-      il1.sort ();\n+\til1.sort();\n       \n-      //Search for random values that may or may not belong to the list.\n-      for (int i = 0; i < 50; ++i)\n-\t{\n-\t  typename My_List::iterator _liter = std::find (il1.begin(), il1.end(), rand()%100001);\n-\t  if (_liter != il1.end())\n-\t    il1.erase (_liter);\n-\t}\n+\t//Search for random values that may or may not belong to the list.\n+\tfor (int i = 0; i < 50; ++i)\n+\t  {\n+\t    typename My_List::iterator _liter = std::find(il1.begin(),\n+\t\t\t\t\t\t\t  il1.end(),\n+\t\t\t\t\t\t\t  rand() % 100001);\n+\t    if (_liter != il1.end())\n+\t      il1.erase(_liter);\n+\t  }\n       \n-      il1.clear ();\n-    }\n-  return Iter;\n-}\n+\til1.clear();\n+      }\n+    return Iter;\n+  }\n \n template <typename Alloc>\n-void do_test ()\n-{\n-  using namespace __gnu_test;\n-  int status;\n-  Alloc obj;\n-\n-  time_counter time;\n-  resource_counter resource;\n-  clear_counters(time, resource);\n-  start_counters(time, resource);\n-  int test_iterations = Test_Allocator<Alloc>();\n-  stop_counters(time, resource);\n+  void\n+  do_test()\n+  {\n+    using namespace __gnu_test;\n+    int status;\n+    Alloc obj;\n+\n+    time_counter time;\n+    resource_counter resource;\n+    clear_counters(time, resource);\n+    start_counters(time, resource);\n+    int test_iterations = Test_Allocator<Alloc>();\n+    stop_counters(time, resource);\n  \n-  std::ostringstream comment;\n-  comment << \"iterations: \" << test_iterations <<endl;\n-  comment << \"type: \" << abi::__cxa_demangle(typeid(obj).name(),\n-\t\t\t\t\t     0, 0, &status);\n-  report_header(__FILE__, comment.str());\n-  report_performance(__FILE__, string(), time, resource);\n-}\n-\n-int main ()\n+    std::ostringstream comment;\n+    comment << \"iterations: \" << test_iterations << '\\t';\n+    comment << \"type: \" << abi::__cxa_demangle(typeid(obj).name(),\n+\t\t\t\t\t       0, 0, &status);\n+    report_header(__FILE__, comment.str());\n+    report_performance(__FILE__, string(), time, resource);\n+  }\n+\n+int main()\n {\n #ifdef TEST_S0\n   do_test<new_allocator<int> >();\n@@ -125,5 +125,3 @@ int main ()\n   do_test<__pool_alloc<int> >();\n #endif\n }\n-\n-"}, {"sha": "415f322ed976498cf7a79b7587600314fcccdc6d", "filename": "libstdc++-v3/testsuite/performance/20_util/allocator/map_mt_find.cc", "status": "modified", "additions": 65, "deletions": 67, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0fb1c5c37a5728cc2deb3a98df0c2bf3f1cd109/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fmap_mt_find.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0fb1c5c37a5728cc2deb3a98df0c2bf3f1cd109/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fmap_mt_find.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fmap_mt_find.cc?ref=e0fb1c5c37a5728cc2deb3a98df0c2bf3f1cd109", "patch": "@@ -32,7 +32,6 @@\n #include <cstdlib>\n #include <string>\n #include <pthread.h>\n-\n #include <typeinfo>\n #include <sstream>\n #include <ext/mt_allocator.h>\n@@ -44,17 +43,14 @@\n \n using namespace std;\n using __gnu_cxx::malloc_allocator;\n+using __gnu_cxx::new_allocator;\n using __gnu_cxx::__mt_alloc;\n using __gnu_cxx::bitmap_allocator;\n using __gnu_cxx::__pool_alloc;\n \n typedef int test_type;\n \n-using namespace __gnu_cxx;\n-using namespace std;\n-\n-bool less_int (int x1, int x2) { return x1<x2; }\n-\n+bool less_int(int x1, int x2) { return x1<x2; }\n \n #if defined USE_FUNCTION_COMPARE\n #define COMPARE_T typeof(&less_int)\n@@ -65,73 +61,75 @@ bool less_int (int x1, int x2) { return x1<x2; }\n #endif\n \n template <typename Alloc>\n-void *find_proc (void *_vptr)\n-{\n-  map<int, string, COMPARE_T, Alloc> *_mptr = \n-    reinterpret_cast<map<int, string, COMPARE_T, Alloc>*>(_vptr);\n-\n-  for (int i = 0; i < 700000; ++i)\n-    {\n-      int Finder = rand() % 2000000;\n-      _mptr->find (Finder);\n-    }\n-  return _vptr;\n-}\n+  void*\n+  find_proc(void *_vptr)\n+  {\n+    map<int, string, COMPARE_T, Alloc> *_mptr = \n+      reinterpret_cast<map<int, string, COMPARE_T, Alloc>*>(_vptr);\n+\n+    for (int i = 0; i < 700000; ++i)\n+      {\n+\tint Finder = rand() % 2000000;\n+\t_mptr->find(Finder);\n+      }\n+    return _vptr;\n+  }\n \n \n template <typename Alloc>\n-int do_test ()\n-{\n-  COMPARE_T _comp = COMPARE_F;\n-  map<int, string, COMPARE_T, Alloc> imap (_comp);\n-  int x = 2;\n-  pthread_t thr[3];\n-  const int Iter = 1000000;\n-\n-  while (x--)\n-    {\n-      for (int i = 0; i < 300000; ++i)\n-\timap.insert (make_pair (rand()%1000000, \"_test_data\"));\n-\n-      for (int i = 0; i < 100000; ++i)\n-\timap.insert (make_pair (rand()%2000000, \"_test_data\"));\n-\n-      pthread_create (&thr[0], NULL, find_proc<Alloc>, (void*)&imap);\n-      pthread_create (&thr[1], NULL, find_proc<Alloc>, (void*)&imap);\n-      pthread_create (&thr[2], NULL, find_proc<Alloc>, (void*)&imap);\n-\n-      pthread_join (thr[0], 0);\n-      pthread_join (thr[1], 0);\n-      pthread_join (thr[2], 0);\n-\n-      imap.clear ();\n-    }\n-  return Iter;\n-}\n+  int\n+  do_test()\n+  {\n+    COMPARE_T _comp = COMPARE_F;\n+    map<int, string, COMPARE_T, Alloc> imap(_comp);\n+    int x = 2;\n+    pthread_t thr[3];\n+    const int Iter = 1000000;\n+\n+    while (x--)\n+      {\n+\tfor (int i = 0; i < 300000; ++i)\n+\t  imap.insert(make_pair(rand()%1000000, \"_test_data\"));\n+\n+\tfor (int i = 0; i < 100000; ++i)\n+\t  imap.insert(make_pair(rand()%2000000, \"_test_data\"));\n+\n+\tpthread_create(&thr[0], NULL, find_proc<Alloc>, (void*)&imap);\n+\tpthread_create(&thr[1], NULL, find_proc<Alloc>, (void*)&imap);\n+\tpthread_create(&thr[2], NULL, find_proc<Alloc>, (void*)&imap);\n+\n+\tpthread_join(thr[0], 0);\n+\tpthread_join(thr[1], 0);\n+\tpthread_join(thr[2], 0);\n+\n+\timap.clear();\n+      }\n+    return Iter;\n+  }\n \n template <typename Alloc>\n-void exec_tests ()\n-{\n-  using namespace __gnu_test;\n-  int status;\n-  COMPARE_T _comp = COMPARE_F;\n-  map<int, string, COMPARE_T, Alloc> obj (_comp);\n-\n-  time_counter time;\n-  resource_counter resource;\n-  clear_counters(time, resource);\n-  start_counters(time, resource);\n-  int test_iterations = do_test<Alloc>();\n-  stop_counters(time, resource);\n+  void\n+  exec_tests()\n+  {\n+    using namespace __gnu_test;\n+    int status;\n+    COMPARE_T _comp = COMPARE_F;\n+    map<int, string, COMPARE_T, Alloc> obj(_comp);\n+\n+    time_counter time;\n+    resource_counter resource;\n+    clear_counters(time, resource);\n+    start_counters(time, resource);\n+    int test_iterations = do_test<Alloc>();\n+    stop_counters(time, resource);\n  \n-  std::ostringstream comment;\n-  comment << \"iterations: \" << test_iterations <<endl;\n-  comment << \"type: \" << abi::__cxa_demangle(typeid(obj).name(),\n-\t\t\t\t\t     0, 0, &status);\n-  report_header(__FILE__, comment.str());\n-  report_performance(__FILE__, string(), time, resource);\n-}\n-\n+    std::ostringstream comment;\n+    comment << \"iterations: \" << test_iterations << '\\t';\n+    comment << \"type: \" << abi::__cxa_demangle(typeid(obj).name(),\n+\t\t\t\t\t       0, 0, &status);\n+    report_header(__FILE__, comment.str());\n+    report_performance(__FILE__, string(), time, resource);\n+  }\n \n int main()\n {"}]}