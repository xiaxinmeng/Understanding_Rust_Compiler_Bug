{"sha": "1eeeb6a437b35a0a48b7758d33e2d33164ca52db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVlZWI2YTQzN2IzNWEwYTQ4Yjc3NThkMzNlMmQzMzE2NGNhNTJkYg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-04-30T20:48:55Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-04-30T20:48:55Z"}, "message": "cpplex.c: Fix comment formatting.\n\n\t* cpplex.c: Fix comment formatting.\n\t* function.c: Likewise.\n\t* integrate.c: Likewise.\n\t* regrename.c: Likewise.\n\t* sibcall.c: Likewise.\n\t* simplify-rtx.c: Likewise.\n\t* tree-inline.c: Likewise.\n\nFrom-SVN: r52972", "tree": {"sha": "a0cc3b83651f56f07e65c72d081ac3f43fda4dfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0cc3b83651f56f07e65c72d081ac3f43fda4dfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1eeeb6a437b35a0a48b7758d33e2d33164ca52db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eeeb6a437b35a0a48b7758d33e2d33164ca52db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eeeb6a437b35a0a48b7758d33e2d33164ca52db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eeeb6a437b35a0a48b7758d33e2d33164ca52db/comments", "author": null, "committer": null, "parents": [{"sha": "888d5eaa62fd5a9e9c62cff6e94a2e9e79434c1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/888d5eaa62fd5a9e9c62cff6e94a2e9e79434c1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/888d5eaa62fd5a9e9c62cff6e94a2e9e79434c1e"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "b8a6637ed4efc23493a3a6758b117956d1f6cb6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eeeb6a437b35a0a48b7758d33e2d33164ca52db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eeeb6a437b35a0a48b7758d33e2d33164ca52db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1eeeb6a437b35a0a48b7758d33e2d33164ca52db", "patch": "@@ -1,3 +1,13 @@\n+2002-04-30  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* cpplex.c: Fix comment formatting.\n+\t* function.c: Likewise.\n+\t* integrate.c: Likewise.\n+\t* regrename.c: Likewise.\n+\t* sibcall.c: Likewise.\n+\t* simplify-rtx.c: Likewise.\n+\t* tree-inline.c: Likewise.\n+\n 2002-04-30  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* config.gcc (hppa1.1-*-pro*, hppa1.1-*-osf*, hppa1.1-*-rtems*,"}, {"sha": "bc1297845619498f4566349b40491360cf3c38b6", "filename": "gcc/cpplex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eeeb6a437b35a0a48b7758d33e2d33164ca52db/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eeeb6a437b35a0a48b7758d33e2d33164ca52db/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=1eeeb6a437b35a0a48b7758d33e2d33164ca52db", "patch": "@@ -763,7 +763,7 @@ save_comment (pfile, token, from, type)\n   buffer[0] = '/';\n   memcpy (buffer + 1, from, len - 1);\n \n-  /* Finish conversion to a C comment, if necessary. */\n+  /* Finish conversion to a C comment, if necessary.  */\n   if (pfile->state.in_directive && type == '/')\n     {\n       buffer[1] = '*';"}, {"sha": "e90fddd3b8746a9aa4e41e441827ad4261196f1c", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eeeb6a437b35a0a48b7758d33e2d33164ca52db/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eeeb6a437b35a0a48b7758d33e2d33164ca52db/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=1eeeb6a437b35a0a48b7758d33e2d33164ca52db", "patch": "@@ -2567,7 +2567,7 @@ fixup_memory_subreg (x, insn, promoted_mode, uncritical)\n   if (BYTES_BIG_ENDIAN)\n     /* If the PROMOTED_MODE is wider than the mode of the MEM, adjust\n        the offset so that it points to the right location within the\n-       MEM. */\n+       MEM.  */\n     offset -= (GET_MODE_SIZE (promoted_mode) - GET_MODE_SIZE (GET_MODE (mem)));\n \n   if (!flag_force_addr"}, {"sha": "2ea46c9363f93fcc0c2fc0b68eff29919610c58e", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eeeb6a437b35a0a48b7758d33e2d33164ca52db/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eeeb6a437b35a0a48b7758d33e2d33164ca52db/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=1eeeb6a437b35a0a48b7758d33e2d33164ca52db", "patch": "@@ -1396,7 +1396,7 @@ copy_insn_list (insns, map, static_chain_value)\n              memory references via that register can then be\n              identified as static chain references.  We assume that\n              the register is only assigned once, and that the static\n-             chain address is only live in one register at a time. */\n+             chain address is only live in one register at a time.  */\n \n \t  else if (static_chain_value != 0\n \t\t   && set != 0"}, {"sha": "82f3ae97a04efdf54387792d2c1d7232b3667f9d", "filename": "gcc/regrename.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eeeb6a437b35a0a48b7758d33e2d33164ca52db/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eeeb6a437b35a0a48b7758d33e2d33164ca52db/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=1eeeb6a437b35a0a48b7758d33e2d33164ca52db", "patch": "@@ -1108,7 +1108,7 @@ kill_value (x, vd)\n   /* SUBREGS are supposed to have been eliminated by now.  But some\n      ports, e.g. i386 sse, use them to smuggle vector type information\n      through to instruction selection.  Each such SUBREG should simplify,\n-     so if we get a NULL  we've done something wrong elsewhere. */\n+     so if we get a NULL  we've done something wrong elsewhere.  */\n \n   if (GET_CODE (x) == SUBREG)\n     x = simplify_subreg (GET_MODE (x), SUBREG_REG (x),"}, {"sha": "ec13d89280b2f1e39c01c53ecba45ac67ae0204c", "filename": "gcc/sibcall.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eeeb6a437b35a0a48b7758d33e2d33164ca52db/gcc%2Fsibcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eeeb6a437b35a0a48b7758d33e2d33164ca52db/gcc%2Fsibcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsibcall.c?ref=1eeeb6a437b35a0a48b7758d33e2d33164ca52db", "patch": "@@ -758,7 +758,7 @@ optimize_sibling_and_tail_recursive_calls ()\n \t}\n \n       /* Similarly, invalidate RTX_UNCHANGING_P for any incoming\n-\t arguments passed in registers. */\n+\t arguments passed in registers.  */\n       for (arg = DECL_ARGUMENTS (current_function_decl); \n \t   arg; \n \t   arg = TREE_CHAIN (arg))"}, {"sha": "8441ea9e985f942c946eed41db67d611b97b491e", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eeeb6a437b35a0a48b7758d33e2d33164ca52db/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eeeb6a437b35a0a48b7758d33e2d33164ca52db/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=1eeeb6a437b35a0a48b7758d33e2d33164ca52db", "patch": "@@ -1904,7 +1904,7 @@ simplify_relational_operation (code, mode, op0, op1)\n       REAL_VALUE_FROM_CONST_DOUBLE (d0, trueop0);\n       REAL_VALUE_FROM_CONST_DOUBLE (d1, trueop1);\n \n-      /* Comparisons are unordered iff at least one of the values is NaN. */\n+      /* Comparisons are unordered iff at least one of the values is NaN.  */\n       if (REAL_VALUE_ISNAN (d0) || REAL_VALUE_ISNAN (d1))\n \tswitch (code)\n \t  {"}, {"sha": "b102b51b5d62561bc6b56f46cdbe371591010e91", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eeeb6a437b35a0a48b7758d33e2d33164ca52db/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eeeb6a437b35a0a48b7758d33e2d33164ca52db/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=1eeeb6a437b35a0a48b7758d33e2d33164ca52db", "patch": "@@ -678,7 +678,7 @@ inlinable_function_p (fn, id)\n   /* Assume it is not inlinable.  */\n   inlinable = 0;\n        \n-  /* The number of instructions (estimated) of current function. */\n+  /* The number of instructions (estimated) of current function.  */\n   currfn_insns = DECL_NUM_STMTS (fn) * INSNS_PER_STMT;\n \n   /* If we're not inlining things, then nothing is inlinable.  */\n@@ -709,21 +709,21 @@ inlinable_function_p (fn, id)\n   DECL_UNINLINABLE (fn) = ! inlinable;\n \n   /* In case we don't disregard the inlining limits and we basically\n-     can inline this function, investigate further. */\n+     can inline this function, investigate further.  */\n   if (! (*lang_hooks.tree_inlining.disregard_inline_limits) (fn)\n       && inlinable)\n     { \n       int sum_insns = (id ? id->inlined_stmts : 0) * INSNS_PER_STMT\n \t\t     + currfn_insns;\n       /* In the extreme case that we have exceeded the recursive inlining\n          limit by a huge factor (128), we just say no. Should not happen\n-         in real life. */\n+         in real life.  */\n       if (sum_insns > MAX_INLINE_INSNS * 128)\n \t inlinable = 0;\n       /* If we did not hit the extreme limit, we use a linear function\n          with slope -1/MAX_INLINE_SLOPE to exceedingly decrease the\n          allowable size. We always allow a size of MIN_INLINE_INSNS\n-         though. */\n+         though.  */\n       else if ((sum_insns > MAX_INLINE_INSNS)\n \t       && (currfn_insns > MIN_INLINE_INSNS))\n         {\n@@ -988,7 +988,7 @@ expand_call_inline (tp, walk_subtrees, data)\n \n   /* Our function now has more statements than it did before.  */\n   DECL_NUM_STMTS (VARRAY_TREE (id->fns, 0)) += DECL_NUM_STMTS (fn);\n-  /* For accounting, subtract one for the saved call/ret. */\n+  /* For accounting, subtract one for the saved call/ret.  */\n   id->inlined_stmts += DECL_NUM_STMTS (fn) - 1;\n \n   /* Recurse into the body of the just inlined function.  */"}]}