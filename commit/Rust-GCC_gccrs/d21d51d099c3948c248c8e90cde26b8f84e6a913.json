{"sha": "d21d51d099c3948c248c8e90cde26b8f84e6a913", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIxZDUxZDA5OWMzOTQ4YzI0OGM4ZTkwY2RlMjZiOGY4NGU2YTkxMw==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2004-11-29T20:02:09Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2004-11-29T20:02:09Z"}, "message": "tree-into-ssa.c (insert_phi_nodes_for): Pass argument WORK_STACK by reference.\n\n\n\t* tree-into-ssa.c (insert_phi_nodes_for): Pass argument\n\tWORK_STACK by reference.\n\tCall VEC_safe_push instead of VEC_quick_push.\n\tUpdate all users.\n\ntestsuite/ChangeLog\n\n\t* gcc.c-torture/compile/pr18712.c: New test.\n\nFrom-SVN: r91481", "tree": {"sha": "1fc7a12fa66e5afc8fb96fd40d575e2cce8a7e91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fc7a12fa66e5afc8fb96fd40d575e2cce8a7e91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d21d51d099c3948c248c8e90cde26b8f84e6a913", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21d51d099c3948c248c8e90cde26b8f84e6a913", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d21d51d099c3948c248c8e90cde26b8f84e6a913", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21d51d099c3948c248c8e90cde26b8f84e6a913/comments", "author": null, "committer": null, "parents": [{"sha": "86f029aa95092540cbd4e96f70371960b3a90e7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86f029aa95092540cbd4e96f70371960b3a90e7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86f029aa95092540cbd4e96f70371960b3a90e7f"}], "stats": {"total": 55, "additions": 43, "deletions": 12}, "files": [{"sha": "777abddb0514531ee1d3e9484d3c8f1fc4826cd0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21d51d099c3948c248c8e90cde26b8f84e6a913/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21d51d099c3948c248c8e90cde26b8f84e6a913/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d21d51d099c3948c248c8e90cde26b8f84e6a913", "patch": "@@ -1,3 +1,10 @@\n+2004-11-29  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* tree-into-ssa.c (insert_phi_nodes_for): Pass argument\n+\tWORK_STACK by reference.\n+\tCall VEC_safe_push instead of VEC_quick_push.\n+\tUpdate all users.\n+\n 2004-11-29  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \tPR c/7544"}, {"sha": "1decc466260a1b0ad2de031fd944b4bef2539277", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21d51d099c3948c248c8e90cde26b8f84e6a913/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21d51d099c3948c248c8e90cde26b8f84e6a913/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d21d51d099c3948c248c8e90cde26b8f84e6a913", "patch": "@@ -1,3 +1,7 @@\n+2004-11-29  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* gcc.c-torture/compile/pr18712.c: New test.\n+\n 2004-11-29  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/7544"}, {"sha": "7d53aaae877f878d806707fe527538a4556302f3", "filename": "gcc/testsuite/gcc.c-torture/compile/pr18712.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21d51d099c3948c248c8e90cde26b8f84e6a913/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr18712.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21d51d099c3948c248c8e90cde26b8f84e6a913/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr18712.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr18712.c?ref=d21d51d099c3948c248c8e90cde26b8f84e6a913", "patch": "@@ -0,0 +1,17 @@\n+void *eintr_source (void *arg)\n+{\n+  int ts = 0;\n+  \n+  if (arg)\n+    foo ();\n+  \n+  while (1)\n+    {\n+      if (arg)\n+\tfoo ();\n+      \n+      foo1 (&ts);\n+    }\n+  \n+  return 0;\n+}"}, {"sha": "41d752459f7bc8ac40e8cb53a58360faa85de759", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21d51d099c3948c248c8e90cde26b8f84e6a913/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21d51d099c3948c248c8e90cde26b8f84e6a913/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=d21d51d099c3948c248c8e90cde26b8f84e6a913", "patch": "@@ -156,7 +156,7 @@ static void insert_phi_nodes (bitmap *, bitmap);\n static void rewrite_stmt (struct dom_walk_data *, basic_block,\n \t\t\t  block_stmt_iterator);\n static inline void rewrite_operand (use_operand_p);\n-static void insert_phi_nodes_for (tree, bitmap *, VEC(basic_block) *);\n+static void insert_phi_nodes_for (tree, bitmap *, VEC(basic_block) **);\n static tree get_reaching_def (tree);\n static hashval_t def_blocks_hash (const void *);\n static int def_blocks_eq (const void *, const void *);\n@@ -588,8 +588,8 @@ prepare_def_operand_for_rename (tree def, size_t *uid_p)\n    WORK_STACK is the vector used to implement the worklist of basic\n    blocks.  */\n \n-static inline\n-void insert_phi_nodes_1 (tree var, bitmap *dfs, VEC(basic_block) *work_stack)\n+static inline void\n+insert_phi_nodes_1 (tree var, bitmap *dfs, VEC(basic_block) **work_stack)\n {\n   if (get_phi_state (var) != NEED_PHI_STATE_NO)\n     insert_phi_nodes_for (var, dfs, work_stack);\n@@ -614,7 +614,7 @@ insert_phi_nodes (bitmap *dfs, bitmap names_to_rename)\n \n   /* Vector WORK_STACK is a stack of CFG blocks.  Each block that contains\n      an assignment or PHI node will be pushed to this stack.  */\n-  work_stack = VEC_alloc (basic_block, last_basic_block);\n+  work_stack = VEC_alloc (basic_block, n_basic_blocks);\n \n   /* Iterate over all variables in VARS_TO_RENAME.  For each variable, add\n      to the work list all the blocks that have a definition for the\n@@ -625,17 +625,17 @@ insert_phi_nodes (bitmap *dfs, bitmap names_to_rename)\n       EXECUTE_IF_SET_IN_BITMAP (names_to_rename, 0, i, bi)\n \t{\n \t  if (ssa_name (i))\n-\t    insert_phi_nodes_1 (ssa_name (i), dfs, work_stack);\n+\t    insert_phi_nodes_1 (ssa_name (i), dfs, &work_stack);\n \t}\n     }\n   else if (vars_to_rename)\n     EXECUTE_IF_SET_IN_BITMAP (vars_to_rename, 0, i, bi)\n       {\n-\tinsert_phi_nodes_1 (referenced_var (i), dfs, work_stack);\n+\tinsert_phi_nodes_1 (referenced_var (i), dfs, &work_stack);\n       }\n   else\n     for (i = 0; i < num_referenced_vars; i++)\n-      insert_phi_nodes_1 (referenced_var (i), dfs, work_stack);\n+      insert_phi_nodes_1 (referenced_var (i), dfs, &work_stack);\n \n   VEC_free (basic_block, work_stack);\n \n@@ -999,7 +999,7 @@ htab_statistics (FILE *file, htab_t htab)\n    implement the worklist of basic blocks.  */\n \n static void\n-insert_phi_nodes_for (tree var, bitmap *dfs, VEC(basic_block) *work_stack)\n+insert_phi_nodes_for (tree var, bitmap *dfs, VEC(basic_block) **work_stack)\n {\n   struct def_blocks_d *def_map;\n   bitmap phi_insertion_points;\n@@ -1017,7 +1017,7 @@ insert_phi_nodes_for (tree var, bitmap *dfs, VEC(basic_block) *work_stack)\n \n   EXECUTE_IF_SET_IN_BITMAP (def_map->def_blocks, 0, bb_index, bi)\n     {\n-      VEC_quick_push (basic_block, work_stack, BASIC_BLOCK (bb_index));\n+      VEC_safe_push (basic_block, *work_stack, BASIC_BLOCK (bb_index));\n     }\n \n   /* Pop a block off the worklist, add every block that appears in\n@@ -1032,12 +1032,12 @@ insert_phi_nodes_for (tree var, bitmap *dfs, VEC(basic_block) *work_stack)\n      determine if fully pruned or semi pruned SSA form was appropriate.\n \n      We now always use fully pruned SSA form.  */\n-  while (VEC_length (basic_block, work_stack) > 0)\n+  while (VEC_length (basic_block, *work_stack) > 0)\n     {\n       unsigned dfs_index;\n       bitmap_iterator bi;\n \n-      bb = VEC_pop (basic_block, work_stack);\n+      bb = VEC_pop (basic_block, *work_stack);\n       bb_index = bb->index;\n       \n       EXECUTE_IF_AND_COMPL_IN_BITMAP (dfs[bb_index],\n@@ -1046,7 +1046,10 @@ insert_phi_nodes_for (tree var, bitmap *dfs, VEC(basic_block) *work_stack)\n \t{\n \t  basic_block bb = BASIC_BLOCK (dfs_index);\n \n-\t  VEC_quick_push (basic_block, work_stack, bb);\n+\t  /* Use a safe push because if there is a definition of VAR\n+\t     in every basic block, then WORK_STACK may eventually have\n+\t     more than N_BASIC_BLOCK entries.  */\n+\t  VEC_safe_push (basic_block, *work_stack, bb);\n \t  bitmap_set_bit (phi_insertion_points, dfs_index);\n \t}\n     }"}]}