{"sha": "8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNjYjc4ZjJkMDZhYzljMDZmNDliOGJkZjE1MjdiZDdlYmVhZGYwNg==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2010-04-16T13:45:25Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2010-04-16T13:45:25Z"}, "message": "configure.ac: Check for elf_getshdrstrndx or elf_getshstrndx separately.\n\n\ttoplevel:\n\t* configure.ac: Check for elf_getshdrstrndx or elf_getshstrndx\n\tseparately.\n\t* configure: Regenerate.\n\n\tgcc:\n\t* configure.ac: Check for elf_getshdrstrndx or elf_getshstrndx\n\tflavor.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\t* doc/install.texi (Prerequisites): Document that Solaris 2 libelf\n\tworks.\n\n\tgcc/lto:\n\t* lto-elf.c [!HAVE_ELF_GETSHDRSTRNDX] (elf_getshdrstrndx): New\n\tfunction.\n\nFrom-SVN: r158423", "tree": {"sha": "d9a473d88d703aacdf7e3191ba2b717abcb59e6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9a473d88d703aacdf7e3191ba2b717abcb59e6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bc9c331d4320ff1e3b8258fcaf87f45bf3c4f2bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc9c331d4320ff1e3b8258fcaf87f45bf3c4f2bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc9c331d4320ff1e3b8258fcaf87f45bf3c4f2bf"}], "stats": {"total": 207, "additions": 202, "deletions": 5}, "files": [{"sha": "7705ea9a571e4f79e05a25128ddcd4506828f337", "filename": "ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06", "patch": "@@ -1,3 +1,9 @@\n+2010-04-16  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac: Check for elf_getshdrstrndx or elf_getshstrndx\n+\tseparately.\n+\t* configure: Regenerate.\n+\n 2010-04-16  Kevin Williams  <kevin.williams@inria.fr>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "60a82b6cb64d6a27ba40ce470f5ea2fede5a80c0", "filename": "configure", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06", "patch": "@@ -6574,7 +6574,6 @@ main ()\n       elf_nextscn (0, 0);\n       elf_strptr (0, 0, 0);\n       elf_getident (0, 0);\n-      elf_getshdrstrndx (0, 0);\n       elf_begin (0, 0, 0);\n       elf_ndxscn (0);\n       elf_end (0);\n@@ -6594,6 +6593,61 @@ fi\n rm -f core conftest.err conftest.$ac_objext \\\n     conftest$ac_exeext conftest.$ac_ext\n \n+    # Check for elf_getshdrstrndx or elf_getshstrndx.  The latter's flavor\n+    # is determined in gcc/configure.ac.\n+    if test x\"$enable_lto\" = x\"yes\" ; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for elf_getshdrstrndx\" >&5\n+$as_echo_n \"checking for elf_getshdrstrndx... \" >&6; }\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <libelf.h>\n+int\n+main ()\n+{\n+\n+\telf_getshdrstrndx (0, 0);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n+$as_echo \"yes\" >&6; };\n+else\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n+$as_echo \"no\" >&6; };\n+\t { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for elf_getshstrndx\" >&5\n+$as_echo_n \"checking for elf_getshstrndx... \" >&6; }\n+         cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <libelf.h>\n+int\n+main ()\n+{\n+\n+\t   elf_getshstrndx (0, 0);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n+$as_echo \"yes\" >&6; };\n+else\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n+$as_echo \"no\" >&6; }; enable_lto=no; libelflibs= ; libelfinc=\n+\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+    fi\n+\n     # If we couldn't enable LTO and the user forced it, emit an error.\n     if test x\"$enable_lto\" = x\"no\" \\\n        && test x\"$default_enable_lto\" != x\"yes\" ; then"}, {"sha": "e632242cb535c97130cf9850a22d1a2fe72cdfcf", "filename": "configure.ac", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06", "patch": "@@ -1735,7 +1735,6 @@ if test x\"$enable_lto\" = x\"yes\" ; then\n       elf_nextscn (0, 0);\n       elf_strptr (0, 0, 0);\n       elf_getident (0, 0);\n-      elf_getshdrstrndx (0, 0);\n       elf_begin (0, 0, 0);\n       elf_ndxscn (0);\n       elf_end (0);\n@@ -1744,6 +1743,27 @@ if test x\"$enable_lto\" = x\"yes\" ; then\n       [AC_MSG_RESULT([no]); enable_lto=no; libelflibs= ; libelfinc= ]\n     )\n \n+    # Check for elf_getshdrstrndx or elf_getshstrndx.  The latter's flavor\n+    # is determined in gcc/configure.ac.\n+    if test x\"$enable_lto\" = x\"yes\" ; then\n+      AC_MSG_CHECKING([for elf_getshdrstrndx])\n+      AC_TRY_LINK(\n+        [#include <libelf.h>],[\n+\telf_getshdrstrndx (0, 0);\n+        ],\n+        [AC_MSG_RESULT([yes]);],\n+        [AC_MSG_RESULT([no]);\n+\t AC_MSG_CHECKING([for elf_getshstrndx])\n+         AC_TRY_LINK(\n+           [#include <libelf.h>],[\n+\t   elf_getshstrndx (0, 0);\n+           ],\n+           [AC_MSG_RESULT([yes]);],\n+           [AC_MSG_RESULT([no]); enable_lto=no; libelflibs= ; libelfinc= ]\n+         )]\n+      )\n+    fi\n+\n     # If we couldn't enable LTO and the user forced it, emit an error.\n     if test x\"$enable_lto\" = x\"no\" \\\n        && test x\"$default_enable_lto\" != x\"yes\" ; then"}, {"sha": "a50a6ac32cb8ca13aa39b02685f3a7f696a59874", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06", "patch": "@@ -1,3 +1,12 @@\n+2010-04-16  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac: Check for elf_getshdrstrndx or elf_getshstrndx\n+\tflavor.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\t* doc/install.texi (Prerequisites): Document that Solaris 2 libelf\n+\tworks.\n+\n 2010-04-16  Richard Guenther  <rguenther@suse.de>\n \n \t* tree.h (struct tree_decl_minimal): Move pt_uid ..."}, {"sha": "9525625630fb36827e4da8f65edecba87a809e49", "filename": "gcc/config.in", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06", "patch": "@@ -814,6 +814,24 @@\n #endif\n \n \n+/* Define to 1 if you have the `elf_getshdrstrndx' function. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_ELF_GETSHDRSTRNDX\n+#endif\n+\n+\n+/* Define to 1 if you have the `elf_getshstrndx' function. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_ELF_GETSHSTRNDX\n+#endif\n+\n+\n+/* Define if elf_getshstrndx has gABI conformant return values. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_ELF_GETSHSTRNDX_GABI\n+#endif\n+\n+\n /* Define to 1 if you have the <fcntl.h> header file. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_FCNTL_H"}, {"sha": "de9cc72db7f18ff07869d9eac0323ddc6cbf9053", "filename": "gcc/configure", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06", "patch": "@@ -8426,6 +8426,59 @@ fi\n done\n \n \n+save_CPPFLAGS=\"$CPPFLAGS\"\n+save_LIBS=\"$LIBS\"\n+LIBS=\"$LIBS $LIBELFLIBS\"\n+for ac_func in elf_getshdrstrndx\n+do :\n+  ac_fn_c_check_func \"$LINENO\" \"elf_getshdrstrndx\" \"ac_cv_func_elf_getshdrstrndx\"\n+if test \"x$ac_cv_func_elf_getshdrstrndx\" = x\"\"yes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_ELF_GETSHDRSTRNDX 1\n+_ACEOF\n+\n+else\n+  for ac_func in elf_getshstrndx\n+do :\n+  ac_fn_c_check_func \"$LINENO\" \"elf_getshstrndx\" \"ac_cv_func_elf_getshstrndx\"\n+if test \"x$ac_cv_func_elf_getshstrndx\" = x\"\"yes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_ELF_GETSHSTRNDX 1\n+_ACEOF\n+ if test \"$cross_compiling\" = yes; then :\n+  { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error \"cannot run test program while cross compiling\n+See \\`config.log' for more details.\" \"$LINENO\" 5; }\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <stdlib.h>\n+#include <libelf.h>\n+int main()\n+{\n+  return elf_getshstrndx (NULL, 0) == 0;\n+},\n+$as_echo \"#define HAVE_ELF_GETSHSTRNDX_GABI 1\" >>confdefs.h\n+\n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+fi\n+\n+fi\n+done\n+\n+\n+fi\n+done\n+\n+LIBS=\"$save_LIBS\"\n+CPPFLAGS=\"$save_CPPFLAGS\"\n+\n if test x$ac_cv_func_mbstowcs = xyes; then\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether mbstowcs works\" >&5\n $as_echo_n \"checking whether mbstowcs works... \" >&6; }\n@@ -17039,7 +17092,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17042 \"configure\"\n+#line 17095 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -17145,7 +17198,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17148 \"configure\"\n+#line 17201 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "d256b62b1042de4b5da9a785fdbc34d5f5ca46ce", "filename": "gcc/configure.ac", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06", "patch": "@@ -1024,6 +1024,22 @@ AC_CHECK_FUNCS(times clock kill getrlimit setrlimit atoll atoq \\\n \tgettimeofday mbstowcs wcswidth mmap mincore setlocale \\\n \tgcc_UNLOCKED_FUNCS)\n \n+save_CPPFLAGS=\"$CPPFLAGS\"\n+save_LIBS=\"$LIBS\"\n+LIBS=\"$LIBS $LIBELFLIBS\"\n+AC_CHECK_FUNCS(elf_getshdrstrndx,,\n+  [AC_CHECK_FUNCS(elf_getshstrndx,\n+    [AC_RUN_IFELSE([AC_LANG_SOURCE([[#include <stdlib.h>\n+#include <libelf.h>\n+int main()\n+{\n+  return elf_getshstrndx (NULL, 0) == 0;\n+}]]), AC_DEFINE(HAVE_ELF_GETSHSTRNDX_GABI, 1,\n+        [Define if elf_getshstrndx has gABI conformant return values.])])])]\n+  )\n+LIBS=\"$save_LIBS\"\n+CPPFLAGS=\"$save_CPPFLAGS\"\n+\n if test x$ac_cv_func_mbstowcs = xyes; then\n   AC_CACHE_CHECK(whether mbstowcs works, gcc_cv_func_mbstowcs_works,\n [    AC_RUN_IFELSE([AC_LANG_SOURCE([[#include <stdlib.h>"}, {"sha": "f65b29fc24a5f894da1d457a33033b831dc6c4de", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06", "patch": "@@ -361,7 +361,7 @@ Necessary to build link-time optimization (LTO) support.  It can be\n downloaded from @uref{http://www.mr511.de/software/libelf-0.8.12.tar.gz},\n though it is commonly available in several systems.  The versions in\n IRIX 5 and 6 don't work since they lack @file{gelf.h}.  The version in\n-recent releases of Solaris 11 does work, previous ones don't yet.\n+Solaris 2 does work.\n \n The @option{--with-libelf} configure option should be used if libelf is\n not installed in your default library search patch."}, {"sha": "20b89d69761d7b0bd437a2607b150ee3a9d81166", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06", "patch": "@@ -1,3 +1,8 @@\n+2010-04-16  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* lto-elf.c [!HAVE_ELF_GETSHDRSTRNDX] (elf_getshdrstrndx): New\n+\tfunction.\n+\n 2010-03-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR bootstrap/43276"}, {"sha": "c777da70f882367cf158a772128b8fd059e18d8c", "filename": "gcc/lto/lto-elf.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06/gcc%2Flto%2Flto-elf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06/gcc%2Flto%2Flto-elf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-elf.c?ref=8ccb78f2d06ac9c06f49b8bdf1527bd7ebeadf06", "patch": "@@ -455,6 +455,22 @@ DEFINE_VALIDATE_EHDR (32)\n DEFINE_VALIDATE_EHDR (64)\n \n \n+#ifndef HAVE_ELF_GETSHDRSTRNDX\n+/* elf_getshdrstrndx replacement for systems that lack it, but provide\n+   either the gABI conformant or Solaris 2 variant of elf_getshstrndx\n+   instead.  */\n+\n+static int\n+elf_getshdrstrndx (Elf *elf, size_t *dst)\n+{\n+#ifdef HAVE_ELF_GETSHSTRNDX_GABI\n+  return elf_getshstrndx (elf, dst);\n+#else\n+  return elf_getshstrndx (elf, dst) ? 0 : -1;\n+#endif\n+}\n+#endif\n+\n /* Validate's ELF_FILE's executable header and, if cached_file_attrs is\n    uninitialized, caches the results.  Also records the section header string\n    table's section index.  Returns true on success or false on failure.  */"}]}