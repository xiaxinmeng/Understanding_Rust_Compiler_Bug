{"sha": "df805cdc5425ea8efb172156f02f7d331bffac2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY4MDVjZGM1NDI1ZWE4ZWZiMTcyMTU2ZjAyZjdkMzMxYmZmYWMyYg==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2003-09-18T14:08:20Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2003-09-18T14:08:20Z"}, "message": "ffi.c (ffi_prep_args): Take account into the alignement for the register size.\n\n\t* src/sh/ffi.c (ffi_prep_args): Take account into the alignement\n\tfor the register size.\n\t(ffi_closure_helper_SYSV): Handle the structure return value\n\taddress correctly.\n\t(ffi_closure_helper_SYSV): Return the appropriate type when\n\tthe registers are used for the structure return value.\n\t* src/sh/sysv.S (ffi_closure_SYSV): Fix the stack layout for\n\tthe 64-bit return value.  Update copyright years.\n\nFrom-SVN: r71521", "tree": {"sha": "8668a37e11b5fc94252867a6093afcc0c2b61fe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8668a37e11b5fc94252867a6093afcc0c2b61fe5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df805cdc5425ea8efb172156f02f7d331bffac2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df805cdc5425ea8efb172156f02f7d331bffac2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df805cdc5425ea8efb172156f02f7d331bffac2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df805cdc5425ea8efb172156f02f7d331bffac2b/comments", "author": null, "committer": null, "parents": [{"sha": "0b5ce4f15c22e4a60a28c8dc936531e7155af563", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b5ce4f15c22e4a60a28c8dc936531e7155af563", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b5ce4f15c22e4a60a28c8dc936531e7155af563"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "b12f804a1d0a611d8381b647a27366f39f82bbe5", "filename": "libffi/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df805cdc5425ea8efb172156f02f7d331bffac2b/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df805cdc5425ea8efb172156f02f7d331bffac2b/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=df805cdc5425ea8efb172156f02f7d331bffac2b", "patch": "@@ -1,3 +1,14 @@\n+2003-09-18  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* src/sh/ffi.c (ffi_prep_args): Take account into the alignement\n+\tfor the register size.\n+\t(ffi_closure_helper_SYSV): Handle the structure return value\n+\taddress correctly.\n+\t(ffi_closure_helper_SYSV): Return the appropriate type when\n+\tthe registers are used for the structure return value.\n+\t* src/sh/sysv.S (ffi_closure_SYSV): Fix the stack layout for\n+\tthe 64-bit return value.  Update copyright years.\n+\n 2003-09-17  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* testsuite/lib/libffi-dg.exp (libffi_target_compile): Search in"}, {"sha": "8aa96a1e14f0380e54a3e49d646987104669ce9f", "filename": "libffi/src/sh/ffi.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df805cdc5425ea8efb172156f02f7d331bffac2b/libffi%2Fsrc%2Fsh%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df805cdc5425ea8efb172156f02f7d331bffac2b/libffi%2Fsrc%2Fsh%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fsh%2Fffi.c?ref=df805cdc5425ea8efb172156f02f7d331bffac2b", "patch": "@@ -220,7 +220,7 @@ void ffi_prep_args(char *stack, extended_cif *ecif)\n \t    greg += n;\n #endif\n \t  memcpy (argp, *p_argv, z);\n-\t  argp += z;\n+\t  argp += n * sizeof (int);\n \t}\n     }\n \n@@ -315,7 +315,7 @@ void ffi_prep_args(char *stack, extended_cif *ecif)\n \t    }\n #endif\n \t  memcpy (argp, *p_argv, z);\n-\t  argp += z;\n+\t  argp += n * sizeof (int);\n \t}\n     }\n \n@@ -533,10 +533,10 @@ ffi_closure_helper_SYSV (ffi_closure *closure, void *rvalue,\n \n   /* Copy the caller's structure return value address so that the closure\n      returns the data directly to the caller.  */\n-  if (cif->rtype->type == FFI_TYPE_STRUCT)\n+  if (cif->rtype->type == FFI_TYPE_STRUCT && STRUCT_VALUE_ADDRESS_WITH_ARG)\n     {\n       rvalue = *pgr++;\n-      ireg = STRUCT_VALUE_ADDRESS_WITH_ARG ? 1 : 0;\n+      ireg = 1;\n     }\n   else\n     ireg = 0;\n@@ -717,6 +717,6 @@ ffi_closure_helper_SYSV (ffi_closure *closure, void *rvalue,\n \n   (closure->fun) (cif, rvalue, avalue, closure->user_data);\n \n-  /* Tell ffi_closure_osf how to perform return type promotions.  */\n-  return cif->rtype->type;\n+  /* Tell ffi_closure_SYSV how to perform return type promotions.  */\n+  return return_type (cif->rtype);\n }"}, {"sha": "ab98a8af433fa5262cc1e6c8962c22da12600d4c", "filename": "libffi/src/sh/sysv.S", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df805cdc5425ea8efb172156f02f7d331bffac2b/libffi%2Fsrc%2Fsh%2Fsysv.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df805cdc5425ea8efb172156f02f7d331bffac2b/libffi%2Fsrc%2Fsh%2Fsysv.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fsh%2Fsysv.S?ref=df805cdc5425ea8efb172156f02f7d331bffac2b", "patch": "@@ -1,5 +1,5 @@\n /* -----------------------------------------------------------------------\n-   sysv.S - Copyright (c) 2002 Kaz Kojima\n+   sysv.S - Copyright (c) 2002, 2003 Kaz Kojima\n    \n    SuperH Foreign Function Interface \n \n@@ -505,21 +505,22 @@ ENTRY(ffi_closure_SYSV)\n \t   ...\n \t   32 bytes (floating register parameters, SH-4 only)\n \t   16 bytes (register parameters)\n-\t    4 bytes (result)\n+\t    8 bytes (result)\n+\t    4 bytes (pad)\n \t    4 bytes (5th arg)\n \t   <- new stack pointer\n \t*/\n .LCFI8:\n #if defined(__SH4__)\n-\tadd\t#-56,r15\n+\tadd\t#-64,r15\n #else\n-\tadd\t#-24,r15\n+\tadd\t#-32,r15\n #endif\n .LCFI9:\n \tmov\tr15,r14\n .LCFIA:\n \tmov\tr14,r1\n-\tadd\t#24,r1\n+\tadd\t#32,r1\n \tmov.l\tr7,@-r1\n \tmov.l\tr6,@-r1\n \tmov.l\tr5,@-r1\n@@ -528,7 +529,7 @@ ENTRY(ffi_closure_SYSV)\n \n #if defined(__SH4__)\n \tmov\tr14,r1\n-\tadd\t#56,r1\n+\tadd\t#64,r1\n #ifdef __LITTLE_ENDIAN__\n \tfmov.s\tfr10,@-r1\n \tfmov.s\tfr11,@-r1\n@@ -552,14 +553,14 @@ ENTRY(ffi_closure_SYSV)\n #endif\n \n \tmov\tr14,r1\n-\tadd\t#4,r1\n+\tadd\t#8,r1\n \tmov\tr1,r5\n \n \tmov\tr14,r1\n #if defined(__SH4__)\n-\tadd\t#64,r1\n+\tadd\t#72,r1\n #else\n-\tadd\t#32,r1\n+\tadd\t#40,r1\n #endif\n \tmov.l\tr1,@r14\n \n@@ -574,7 +575,7 @@ ENTRY(ffi_closure_SYSV)\n \tmov.w\t@r0,r0\n \tmov\tr14,r2\n \tbraf\tr0\n-\t add\t#4,r2\n+\t add\t#8,r2\n 0:\n \t.align 2\n L_helper:\n@@ -664,9 +665,9 @@ L_case_uh:\n \n L_case_v:\n #if defined(__SH4__)\n-\tadd\t#56,r15\n+\tadd\t#64,r15\n #else\n-\tadd\t#24,r15\n+\tadd\t#32,r15\n #endif\n \tlds.l\t@r15+,pr\n \trts\n@@ -757,9 +758,9 @@ __FRAME_BEGIN__:\n \t.4byte\t.LCFI9-.LCFI8\n \t.byte\t0xe\t/* DW_CFA_def_cfa_offset */\n #if defined(__SH4__)\n-\t.byte\t8+56\t/* uleb128 8+56 */\n+\t.byte\t8+64\t/* uleb128 8+64 */\n #else\n-\t.byte\t8+24\t/* uleb128 8+24 */\n+\t.byte\t8+32\t/* uleb128 8+32 */\n #endif\n \t.byte\t0x91\t/* DW_CFA_offset, column 0x11 */\n         .byte\t0x2"}]}