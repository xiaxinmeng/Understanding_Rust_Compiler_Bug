{"sha": "505032d97d0593d5e9a6f51b107650e27fcf6b23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA1MDMyZDk3ZDA1OTNkNWU5YTZmNTFiMTA3NjUwZTI3ZmNmNmIyMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-07-11T12:25:26Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-07-11T12:25:26Z"}, "message": "value-range: Fix handling of POLY_INT_CST anti-ranges [PR96146]\n\nThe range infrastructure has code to decompose POLY_INT_CST ranges\nto worst-case integer bounds.  However, it had the fundamental flaw\n(obvious in hindsight) that it applied to anti-ranges too, meaning\nthat a range 2+2X would end up with a range of ~[2, +INF], i.e.\n[-INF, 1].  This patch decays to varying in that case instead.\n\nI'm still a bit uneasy about this.  ISTM that in terms of\ngenerality:\n\n  SSA_NAME => POLY_INT_CST => INTEGER_CST\n           => ADDR_EXPR\n\nI.e. an SSA_NAME could store a POLY_INT_CST and a POLY_INT_CST\ncould store an INTEGER_CST (before canonicalisation).  POLY_INT_CST\nis also \u201cas constant as\u201d ADDR_EXPR (well, OK, only some ADDR_EXPRs\nare run-time rather than link-time constants, whereas all POLY_INT_CSTs\nare, but still).  So it seems like we should at least be able to treat\nPOLY_INT_CST as symbolic.  On the other hand, I don't have any examples\nin which that would be useful.\n\ngcc/\n\tPR tree-optimization/96146\n\t* value-range.cc (value_range::set): Only decompose POLY_INT_CST\n\tbounds to integers for VR_RANGE.  Decay to VR_VARYING for anti-ranges\n\tinvolving POLY_INT_CSTs.\n\ngcc/testsuite/\n\tPR tree-optimization/96146\n\t* gcc.target/aarch64/sve/acle/general/pr96146.c: New test.", "tree": {"sha": "7c1f47b339701787e6a10082e7516f40a3ee562d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c1f47b339701787e6a10082e7516f40a3ee562d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/505032d97d0593d5e9a6f51b107650e27fcf6b23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/505032d97d0593d5e9a6f51b107650e27fcf6b23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/505032d97d0593d5e9a6f51b107650e27fcf6b23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/505032d97d0593d5e9a6f51b107650e27fcf6b23/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c19f95fb1b8f15090eb1d1682e86de425fbd3c78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19f95fb1b8f15090eb1d1682e86de425fbd3c78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c19f95fb1b8f15090eb1d1682e86de425fbd3c78"}], "stats": {"total": 67, "additions": 48, "deletions": 19}, "files": [{"sha": "b05fac4918dff830fcf3d2ab7659e8e36f016dd7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general/pr96146.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505032d97d0593d5e9a6f51b107650e27fcf6b23/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr96146.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505032d97d0593d5e9a6f51b107650e27fcf6b23/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr96146.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr96146.c?ref=505032d97d0593d5e9a6f51b107650e27fcf6b23", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O3\" } */\n+\n+#include <arm_sve.h>\n+\n+void __attribute__ ((noipa))\n+f (volatile int *x)\n+{\n+  int i;\n+  for (int i = 0; i < svcntd (); ++i)\n+    *x = i;\n+}\n+\n+int\n+main (void)\n+{\n+  volatile int x;\n+  f (&x);\n+  return 0;\n+}"}, {"sha": "bc4b061da57170f7140ccfd6b50c68b75d958ec5", "filename": "gcc/value-range.cc", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505032d97d0593d5e9a6f51b107650e27fcf6b23/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505032d97d0593d5e9a6f51b107650e27fcf6b23/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=505032d97d0593d5e9a6f51b107650e27fcf6b23", "patch": "@@ -86,7 +86,34 @@ value_range::set (tree min, tree max, value_range_kind kind)\n       set_undefined ();\n       return;\n     }\n-  else if (kind == VR_VARYING)\n+\n+  if (kind == VR_RANGE)\n+    {\n+      /* Convert POLY_INT_CST bounds into worst-case INTEGER_CST bounds.  */\n+      if (POLY_INT_CST_P (min))\n+\t{\n+\t  tree type_min = vrp_val_min (TREE_TYPE (min));\n+\t  widest_int lb\n+\t    = constant_lower_bound_with_limit (wi::to_poly_widest (min),\n+\t\t\t\t\t       wi::to_widest (type_min));\n+\t  min = wide_int_to_tree (TREE_TYPE (min), lb);\n+\t}\n+      if (POLY_INT_CST_P (max))\n+\t{\n+\t  tree type_max = vrp_val_max (TREE_TYPE (max));\n+\t  widest_int ub\n+\t    = constant_upper_bound_with_limit (wi::to_poly_widest (max),\n+\t\t\t\t\t       wi::to_widest (type_max));\n+\t  max = wide_int_to_tree (TREE_TYPE (max), ub);\n+\t}\n+    }\n+  else if (kind != VR_VARYING)\n+    {\n+      if (POLY_INT_CST_P (min) || POLY_INT_CST_P (max))\n+\tkind = VR_VARYING;\n+    }\n+\n+  if (kind == VR_VARYING)\n     {\n       gcc_assert (TREE_TYPE (min) == TREE_TYPE (max));\n       tree typ = TREE_TYPE (min);\n@@ -99,24 +126,6 @@ value_range::set (tree min, tree max, value_range_kind kind)\n       return;\n     }\n \n-  /* Convert POLY_INT_CST bounds into worst-case INTEGER_CST bounds.  */\n-  if (POLY_INT_CST_P (min))\n-    {\n-      tree type_min = vrp_val_min (TREE_TYPE (min));\n-      widest_int lb\n-\t= constant_lower_bound_with_limit (wi::to_poly_widest (min),\n-\t\t\t\t\t   wi::to_widest (type_min));\n-      min = wide_int_to_tree (TREE_TYPE (min), lb);\n-    }\n-  if (POLY_INT_CST_P (max))\n-    {\n-      tree type_max = vrp_val_max (TREE_TYPE (max));\n-      widest_int ub\n-\t= constant_upper_bound_with_limit (wi::to_poly_widest (max),\n-\t\t\t\t\t   wi::to_widest (type_max));\n-      max = wide_int_to_tree (TREE_TYPE (max), ub);\n-    }\n-\n   /* Nothing to canonicalize for symbolic ranges.  */\n   if (TREE_CODE (min) != INTEGER_CST\n       || TREE_CODE (max) != INTEGER_CST)"}]}