{"sha": "ef4bac7802534e52d3031dccf0cdfb2c53b2d836", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY0YmFjNzgwMjUzNGU1MmQzMDMxZGNjZjBjZGZiMmM1M2IyZDgzNg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-03-30T18:39:17Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-03-30T18:39:17Z"}, "message": "re PR c++/65398 ([C++11] GCC rejects constexpr variable definitions with valid initialization)\n\n\tPR c++/65398\n\t* constexpr.c (cxx_fold_indirect_ref): Don't perform the\n\t *(&A[i] p+ j) => A[i + j] transformation here.\n\t(cxx_eval_pointer_plus_expression): New function.\n\t(cxx_eval_constant_expression): Use it here.\n\n\t* g++.dg/cpp0x/pr65398-2.C: New test.\n\nFrom-SVN: r221777", "tree": {"sha": "05c8ccb5585dce489c8e83023f76d83a742cb992", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05c8ccb5585dce489c8e83023f76d83a742cb992"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef4bac7802534e52d3031dccf0cdfb2c53b2d836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef4bac7802534e52d3031dccf0cdfb2c53b2d836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef4bac7802534e52d3031dccf0cdfb2c53b2d836", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef4bac7802534e52d3031dccf0cdfb2c53b2d836/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c384511a36aa97eda218a2935fe3a14720e3b59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c384511a36aa97eda218a2935fe3a14720e3b59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c384511a36aa97eda218a2935fe3a14720e3b59"}], "stats": {"total": 123, "additions": 102, "deletions": 21}, "files": [{"sha": "ec35f22fe0444e670129196364c138acadc76b07", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4bac7802534e52d3031dccf0cdfb2c53b2d836/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4bac7802534e52d3031dccf0cdfb2c53b2d836/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ef4bac7802534e52d3031dccf0cdfb2c53b2d836", "patch": "@@ -1,3 +1,11 @@\n+2015-03-30  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/65398\n+\t* constexpr.c (cxx_fold_indirect_ref): Don't perform the\n+\t *(&A[i] p+ j) => A[i + j] transformation here.\n+\t(cxx_eval_pointer_plus_expression): New function.\n+\t(cxx_eval_constant_expression): Use it here.\n+\n 2015-03-27  Tobias Burnus  <burnus@net-b.de>\n \n \tPR c/65586"}, {"sha": "2100f94cdd050ca44d864efe5557ec01dcdf9f0f", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 51, "deletions": 21, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4bac7802534e52d3031dccf0cdfb2c53b2d836/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4bac7802534e52d3031dccf0cdfb2c53b2d836/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=ef4bac7802534e52d3031dccf0cdfb2c53b2d836", "patch": "@@ -2427,27 +2427,6 @@ cxx_fold_indirect_ref (location_t loc, tree type, tree op0, bool *empty_base)\n \t\t    break;\n \t\t  }\n \t    }\n-\t  /* *(&A[i] p+ j) => A[i + j] */\n-\t  else if (TREE_CODE (op00) == ARRAY_REF\n-\t\t   && TREE_CODE (TREE_OPERAND (op00, 1)) == INTEGER_CST\n-\t\t   && TREE_CODE (op01) == INTEGER_CST)\n-\t    {\n-\t      tree t = fold_convert_loc (loc, ssizetype,\n-\t\t\t\t\t TREE_OPERAND (op00, 1));\n-\t      tree nelts\n-\t\t= array_type_nelts_top (TREE_TYPE (TREE_OPERAND (op00, 0)));\n-\t      /* Don't fold an out-of-bound access.  */\n-\t      if (!tree_int_cst_le (t, nelts))\n-\t\treturn NULL_TREE;\n-\t      /* Make sure to treat the second operand of POINTER_PLUS_EXPR\n-\t\t as signed.  */\n-\t      op01 = fold_build2_loc (loc, EXACT_DIV_EXPR, ssizetype,\n-\t\t\t\t      cp_fold_convert (ssizetype, op01),\n-\t\t\t\t      TYPE_SIZE_UNIT (type));\n-\t      t = size_binop_loc (loc, PLUS_EXPR, op01, t);\n-\t      return build4_loc (loc, ARRAY_REF, type, TREE_OPERAND (op00, 0),\n-\t\t\t\t t, NULL_TREE, NULL_TREE);\n-\t    }\n \t}\n     }\n   /* *(foo *)fooarrptr => (*fooarrptr)[0] */\n@@ -2942,6 +2921,51 @@ cxx_eval_switch_expr (const constexpr_ctx *ctx, tree t,\n   return NULL_TREE;\n }\n \n+/* Subroutine of cxx_eval_constant_expression.\n+   Attempt to reduce a POINTER_PLUS_EXPR expression T.  */\n+\n+static tree\n+cxx_eval_pointer_plus_expression (const constexpr_ctx *ctx, tree t,\n+\t\t\t\t  bool lval, bool *non_constant_p,\n+\t\t\t\t  bool *overflow_p)\n+{\n+  tree op00 = TREE_OPERAND (t, 0);\n+  tree op01 = TREE_OPERAND (t, 1);\n+  location_t loc = EXPR_LOCATION (t);\n+\n+  STRIP_NOPS (op00);\n+  if (TREE_CODE (op00) != ADDR_EXPR)\n+    return NULL_TREE;\n+\n+  op00 = TREE_OPERAND (op00, 0);\n+\n+  /* &A[i] p+ j => &A[i + j] */\n+  if (TREE_CODE (op00) == ARRAY_REF\n+      && TREE_CODE (TREE_OPERAND (op00, 1)) == INTEGER_CST\n+      && TREE_CODE (op01) == INTEGER_CST)\n+    {\n+      tree type = TREE_TYPE (op00);\n+      t = fold_convert_loc (loc, ssizetype, TREE_OPERAND (op00, 1));\n+      tree nelts = array_type_nelts_top (TREE_TYPE (TREE_OPERAND (op00, 0)));\n+      /* Don't fold an out-of-bound access.  */\n+      if (!tree_int_cst_le (t, nelts))\n+\treturn NULL_TREE;\n+      /* Make sure to treat the second operand of POINTER_PLUS_EXPR\n+\t as signed.  */\n+      op01 = fold_build2_loc (loc, EXACT_DIV_EXPR, ssizetype,\n+\t\t\t      cp_fold_convert (ssizetype, op01),\n+\t\t\t      TYPE_SIZE_UNIT (type));\n+      t = size_binop_loc (loc, PLUS_EXPR, op01, t);\n+      t = build4_loc (loc, ARRAY_REF, type, TREE_OPERAND (op00, 0),\n+\t\t      t, NULL_TREE, NULL_TREE);\n+      t = cp_build_addr_expr (t, tf_warning_or_error);\n+      return cxx_eval_constant_expression (ctx, t, lval, non_constant_p,\n+\t\t\t\t\t   overflow_p);\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Attempt to reduce the expression T to a constant value.\n    On failure, issue diagnostic and return error_mark_node.  */\n /* FIXME unify with c_fully_fold */\n@@ -3247,6 +3271,12 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       break;\n \n     case POINTER_PLUS_EXPR:\n+      r = cxx_eval_pointer_plus_expression (ctx, t, lval, non_constant_p,\n+\t\t\t\t\t    overflow_p);\n+      if (r)\n+\tbreak;\n+      /* else fall through */\n+\n     case PLUS_EXPR:\n     case MINUS_EXPR:\n     case MULT_EXPR:"}, {"sha": "d792b9f95376b6db09cd6557d30d6b3d825c7aaa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4bac7802534e52d3031dccf0cdfb2c53b2d836/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4bac7802534e52d3031dccf0cdfb2c53b2d836/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef4bac7802534e52d3031dccf0cdfb2c53b2d836", "patch": "@@ -1,3 +1,8 @@\n+2015-03-30  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/65398\n+\t* g++.dg/cpp0x/pr65398-2.C: New test.\n+\n 2015-03-30  Marek Polacek  <polacek@redhat.com>\n \n \t* c-c++-common/pr65556.c: Change the width of bit-fields."}, {"sha": "f920b03ded9314a01ed2c1f440fa1cd6fccbac1e", "filename": "gcc/testsuite/g++.dg/cpp0x/pr65398-2.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4bac7802534e52d3031dccf0cdfb2c53b2d836/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr65398-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4bac7802534e52d3031dccf0cdfb2c53b2d836/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr65398-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr65398-2.C?ref=ef4bac7802534e52d3031dccf0cdfb2c53b2d836", "patch": "@@ -0,0 +1,38 @@\n+// PR c++/65398\n+// { dg-do compile { target c++11 } }\n+\n+#define SA(X) static_assert((X),#X)\n+\n+constexpr char s[] = \"abc\";\n+\n+SA((&s[0] + 0) == (&s[0] + 0));\n+SA((&s[0] + 1) == (&s[1] + 0));\n+SA((&s[0] + 2) == (&s[1] + 1));\n+SA((&s[0] + 3) == (&s[1] + 2));\n+SA((&s[0] + 4) == (&s[1] + 3));\n+SA((&s[2] + 0) == (&s[0] + 2));\n+SA((&s[2] + 1) == (&s[3] + 0));\n+SA((&s[2] + 2) == (&s[3] + 1));\n+SA((&s[4] + 0) == (&s[2] + 2));\n+\n+SA((&s[0] + 0) != (&s[1] + 0));\n+SA((&s[0] + 2) != (&s[1] + 0));\n+SA((&s[2] + 0) != (&s[2] + 1));\n+SA((&s[1] + 1) != (&s[0] + 1));\n+\n+constexpr int l[] = { 'c', 'd', 'e', '\\0' };\n+\n+SA((&l[0] + 0) == (&l[0] + 0));\n+SA((&l[0] + 1) == (&l[1] + 0));\n+SA((&l[0] + 2) == (&l[1] + 1));\n+SA((&l[0] + 3) == (&l[1] + 2));\n+SA((&l[0] + 4) == (&l[1] + 3));\n+SA((&l[2] + 0) == (&l[0] + 2));\n+SA((&l[2] + 1) == (&l[3] + 0));\n+SA((&l[2] + 2) == (&l[3] + 1));\n+SA((&l[4] + 0) == (&l[2] + 2));\n+\n+SA((&l[0] + 0) != (&l[1] + 0));\n+SA((&l[0] + 2) != (&l[1] + 0));\n+SA((&l[2] + 0) != (&l[2] + 1));\n+SA((&l[1] + 1) != (&l[0] + 1));"}]}