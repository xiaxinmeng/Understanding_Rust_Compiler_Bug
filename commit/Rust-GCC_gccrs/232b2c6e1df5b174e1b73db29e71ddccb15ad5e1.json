{"sha": "232b2c6e1df5b174e1b73db29e71ddccb15ad5e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMyYjJjNmUxZGY1YjE3NGUxYjczZGIyOWU3MWRkY2NiMTVhZDVlMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-08-02T06:52:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-08-02T06:52:26Z"}, "message": "tree-ssa-pre.c (bitmap_insert_into_set_1): Remove and inline into ...\n\n2017-08-02  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-pre.c (bitmap_insert_into_set_1): Remove and inline\n\tinto ...\n\t(bitmap_insert_into_set): ... this.\n\nFrom-SVN: r250812", "tree": {"sha": "ff11a30c384951bb9332e4d8c7e124e25455f1d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff11a30c384951bb9332e4d8c7e124e25455f1d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/232b2c6e1df5b174e1b73db29e71ddccb15ad5e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/232b2c6e1df5b174e1b73db29e71ddccb15ad5e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/232b2c6e1df5b174e1b73db29e71ddccb15ad5e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/232b2c6e1df5b174e1b73db29e71ddccb15ad5e1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77eefb7122d544b9e22a7f40a92320742c23e74b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77eefb7122d544b9e22a7f40a92320742c23e74b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77eefb7122d544b9e22a7f40a92320742c23e74b"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "46d33971a41983e94f6cc890712d6bd7390263a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/232b2c6e1df5b174e1b73db29e71ddccb15ad5e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/232b2c6e1df5b174e1b73db29e71ddccb15ad5e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=232b2c6e1df5b174e1b73db29e71ddccb15ad5e1", "patch": "@@ -1,3 +1,9 @@\n+2017-08-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (bitmap_insert_into_set_1): Remove and inline\n+\tinto ...\n+\t(bitmap_insert_into_set): ... this.\n+\n 2017-08-02  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/81633"}, {"sha": "a6a68cf837213696ea477f4a1c4b481fb7acf3e4", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/232b2c6e1df5b174e1b73db29e71ddccb15ad5e1/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/232b2c6e1df5b174e1b73db29e71ddccb15ad5e1/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=232b2c6e1df5b174e1b73db29e71ddccb15ad5e1", "patch": "@@ -540,8 +540,6 @@ static void bitmap_set_copy (bitmap_set_t, bitmap_set_t);\n static void bitmap_set_and (bitmap_set_t, bitmap_set_t);\n static bool bitmap_set_contains_value (bitmap_set_t, unsigned int);\n static void bitmap_insert_into_set (bitmap_set_t, pre_expr);\n-static void bitmap_insert_into_set_1 (bitmap_set_t, pre_expr,\n-\t\t\t\t      unsigned int, bool);\n static bitmap_set_t bitmap_set_new (void);\n static tree create_expression_by_pieces (basic_block, pre_expr, gimple_seq *,\n \t\t\t\t\t tree);\n@@ -732,27 +730,22 @@ bitmap_remove_from_set (bitmap_set_t set, pre_expr expr)\n     }\n }\n \n+/* Insert an expression EXPR into a bitmapped set.  */\n+\n static void\n-bitmap_insert_into_set_1 (bitmap_set_t set, pre_expr expr,\n-\t\t\t  unsigned int val, bool allow_constants)\n+bitmap_insert_into_set (bitmap_set_t set, pre_expr expr)\n {\n-  if (allow_constants || !value_id_constant_p (val))\n+  unsigned int val = get_expr_value_id (expr);\n+  if (! value_id_constant_p (val))\n     {\n-      /* We specifically expect this and only this function to be able to\n-\t insert constants into a set.  */\n+      /* Note this is the only function causing multiple expressions\n+         for the same value to appear in a set.  This is needed for\n+\t TMP_GEN, PHI_GEN and NEW_SETs.  */\n       bitmap_set_bit (&set->values, val);\n       bitmap_set_bit (&set->expressions, get_or_alloc_expression_id (expr));\n     }\n }\n \n-/* Insert an expression EXPR into a bitmapped set.  */\n-\n-static void\n-bitmap_insert_into_set (bitmap_set_t set, pre_expr expr)\n-{\n-  bitmap_insert_into_set_1 (set, expr, get_expr_value_id (expr), false);\n-}\n-\n /* Copy a bitmapped set ORIG, into bitmapped set DEST.  */\n \n static void\n@@ -2471,7 +2464,8 @@ compute_antic (void)\n     {\n       /* For partial antic we ignore backedges and thus we do not need\n          to perform any iteration when we process blocks in postorder.  */\n-      int postorder_num = pre_and_rev_post_order_compute (NULL, postorder.address (), false);\n+      int postorder_num\n+\t= pre_and_rev_post_order_compute (NULL, postorder.address (), false);\n       for (i = postorder_num - 1 ; i >= 0; i--)\n \t{\n \t  basic_block block = BASIC_BLOCK_FOR_FN (cfun, postorder[i]);"}]}