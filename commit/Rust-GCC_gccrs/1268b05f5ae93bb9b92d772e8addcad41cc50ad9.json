{"sha": "1268b05f5ae93bb9b92d772e8addcad41cc50ad9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI2OGIwNWY1YWU5M2JiOWI5MmQ3NzJlOGFkZGNhZDQxY2M1MGFkOQ==", "commit": {"author": {"name": "Marek Michalkiewicz", "email": "marekm@linux.org.pl", "date": "2000-11-14T19:05:41Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2000-11-14T19:05:41Z"}, "message": "avr.c (avr_case_values_threshold): New.\n\n\t* config/avr/avr.c (avr_case_values_threshold): New.\n\t(avr_override_options): Set it depending on options, make it large\n\twhen not optimizing to work around \"unable to generate reloads\".\n\n\t* config/avr/avr.h (TARGET_SWITCHES): Add -mno-tablejump option.\n\t(EXTRA_SECTION_FUNCTIONS): Make the .progmem.gcc_sw_table section\n\texecutable if not AVR_MEGA.  Make sure jump tables are word-aligned.\n\t(JUMP_TABLES_IN_TEXT_SECTION): Define as 0, not 1.\n\t(ASM_OUTPUT_ADDR_VEC_ELT): Optimize, use \"rjmp\" if not AVR_MEGA.\n\t(avr_case_values_threshold): Declare as extern int.\n\t(CASE_VALUES_THRESHOLD): Define as avr_case_values_threshold.\n\n\t* config/avr/avr.md (tablejump): Removed.\n\t(*tablejump_rjmp): New for jump tables made from \"rjmp\" instructions.\n\t(*tablejump_lib, *tablejump_enh, *tablejump): Change to expect the\n\tindex in the table, not multiplied by 2.\n\t(casesi): Change to match the above insns.  Always enable.\n\n\t* config/avr/libgcc.S (__tablejump__): Rename to __tablejump2__.\n\tChange to expect the word address of the table, multiply it by 2\n\there and not in the caller.  Change \"adiw\" to faster \"inc\".\n\nFrom-SVN: r37465", "tree": {"sha": "3a24dcbbbebd7103ba32d2670d15160d3eefcb3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a24dcbbbebd7103ba32d2670d15160d3eefcb3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1268b05f5ae93bb9b92d772e8addcad41cc50ad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1268b05f5ae93bb9b92d772e8addcad41cc50ad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1268b05f5ae93bb9b92d772e8addcad41cc50ad9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1268b05f5ae93bb9b92d772e8addcad41cc50ad9/comments", "author": null, "committer": null, "parents": [{"sha": "09ad4749472c897816a6255006944097c7e33162", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09ad4749472c897816a6255006944097c7e33162", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09ad4749472c897816a6255006944097c7e33162"}], "stats": {"total": 131, "additions": 95, "deletions": 36}, "files": [{"sha": "bc3a9063b35303becbb295b01fb787192b5cf326", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1268b05f5ae93bb9b92d772e8addcad41cc50ad9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1268b05f5ae93bb9b92d772e8addcad41cc50ad9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1268b05f5ae93bb9b92d772e8addcad41cc50ad9", "patch": "@@ -1,3 +1,27 @@\n+Tue Nov 14 21:54:31 2000  Marek Michalkiewicz  <marekm@linux.org.pl> & Denis Chertykov  <denisc@overta.ru>\n+\n+\t* config/avr/avr.c (avr_case_values_threshold): New.\n+\t(avr_override_options): Set it depending on options, make it large\n+\twhen not optimizing to work around \"unable to generate reloads\".\n+\n+\t* config/avr/avr.h (TARGET_SWITCHES): Add -mno-tablejump option.\n+\t(EXTRA_SECTION_FUNCTIONS): Make the .progmem.gcc_sw_table section\n+\texecutable if not AVR_MEGA.  Make sure jump tables are word-aligned.\n+\t(JUMP_TABLES_IN_TEXT_SECTION): Define as 0, not 1.\n+\t(ASM_OUTPUT_ADDR_VEC_ELT): Optimize, use \"rjmp\" if not AVR_MEGA.\n+\t(avr_case_values_threshold): Declare as extern int.\n+\t(CASE_VALUES_THRESHOLD): Define as avr_case_values_threshold.\n+\n+\t* config/avr/avr.md (tablejump): Removed.\n+\t(*tablejump_rjmp): New for jump tables made from \"rjmp\" instructions.\n+\t(*tablejump_lib, *tablejump_enh, *tablejump): Change to expect the\n+\tindex in the table, not multiplied by 2.\n+\t(casesi): Change to match the above insns.  Always enable.\n+\n+\t* config/avr/libgcc.S (__tablejump__): Rename to __tablejump2__.\n+\tChange to expect the word address of the table, multiply it by 2\n+\there and not in the caller.  Change \"adiw\" to faster \"inc\".\n+\n 2000-11-14  Neil Booth  <neilb@earthling.net>\n \n \t* cppexp.c (parse_defined): Call cpp_get_token not"}, {"sha": "38cd07819e153f77bdabd71bbd56dec0d8946680", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1268b05f5ae93bb9b92d772e8addcad41cc50ad9/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1268b05f5ae93bb9b92d772e8addcad41cc50ad9/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=1268b05f5ae93bb9b92d772e8addcad41cc50ad9", "patch": "@@ -160,6 +160,8 @@ static const struct mcu_type_s avr_mcu_types[] = {\n   { NULL, 0 }\n };\n \n+int avr_case_values_threshold = 30000;\n+\n void\n avr_override_options ()\n {\n@@ -188,6 +190,9 @@ avr_override_options ()\n       case AVR4: avr_enhanced_p = 1; avr_mega_p = 0; break;\n       case AVR5: avr_enhanced_p = 1; avr_mega_p = 1; break;\n     }\n+\n+  if (optimize && !TARGET_NO_TABLEJUMP)\n+    avr_case_values_threshold = (!AVR_MEGA || TARGET_CALL_PROLOGUES) ? 8 : 17;\n }\n \n "}, {"sha": "f5116a92a1750e67153d11ed12f90bd518a847c0", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1268b05f5ae93bb9b92d772e8addcad41cc50ad9/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1268b05f5ae93bb9b92d772e8addcad41cc50ad9/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=1268b05f5ae93bb9b92d772e8addcad41cc50ad9", "patch": "@@ -51,6 +51,7 @@ extern int target_flags;\n #define MASK_ORDER_1\t\t0x00001000\n #define MASK_INSN_SIZE_DUMP\t0x00002000\n #define MASK_ORDER_2\t\t0x00004000\n+#define MASK_NO_TABLEJUMP\t0x00008000\n #define MASK_INT8\t\t0x00010000\n #define MASK_NO_INTERRUPTS\t0x00020000\n #define MASK_CALL_PROLOGUES\t0x00040000\n@@ -63,6 +64,7 @@ extern int target_flags;\n #define TARGET_INSN_SIZE_DUMP\t(target_flags & MASK_INSN_SIZE_DUMP)\n #define TARGET_CALL_PROLOGUES\t(target_flags & MASK_CALL_PROLOGUES)\n #define TARGET_TINY_STACK\t(target_flags & MASK_TINY_STACK)\n+#define TARGET_NO_TABLEJUMP\t(target_flags & MASK_NO_TABLEJUMP)\n \n /* Dump each assembler insn's rtl into the output file.\n    This is for debugging the compiler itself.  */\n@@ -102,6 +104,8 @@ extern int target_flags;\n     N_(\"Use subroutines for function prologue/epilogue\") },\t\t\\\n   { \"tiny-stack\", MASK_TINY_STACK,\t\t\t\t\t\\\n     N_(\"Change only the low 8 bits of the stack pointer\") },\t\t\\\n+  { \"no-tablejump\", MASK_NO_TABLEJUMP,\t\t\t\t\t\\\n+    N_(\"Do not generate tablejump insns\") },\t\t\t\t\\\n   { \"rtl\", MASK_RTL_DUMP, NULL },\t\t\t\t\t\\\n   { \"size\", MASK_INSN_SIZE_DUMP,\t\t\t\t\t\\\n     N_(\"Output instruction sizes to the asm file\") },\t\t\t\\\n@@ -2001,7 +2005,10 @@ progmem_section (void)\t\t\t\t\t\t\t      \\\n   if (in_section != in_progmem)\t\t\t\t\t\t      \\\n     {\t\t\t\t\t\t\t\t\t      \\\n       fprintf (asm_out_file,\t\t\t\t\t\t      \\\n-\t       \".section .progmem.gcc_sw_table, \\\"a\\\", @progbits\\n\");\t      \\\n+\t       \"\\t.section .progmem.gcc_sw_table, \\\"%s\\\", @progbits\\n\",\t      \\\n+\t       AVR_MEGA ? \"a\" : \"ax\"); \t\t\t\t\t      \\\n+      /* Should already be aligned, this is just to be safe if it isn't.  */  \\\n+      fprintf (asm_out_file, \"\\t.p2align 1\\n\");\t\t\t\t      \\\n       in_section = in_progmem;\t\t\t\t\t\t      \\\n     }\t\t\t\t\t\t\t\t\t      \\\n }\n@@ -2042,7 +2049,7 @@ progmem_section (void)\t\t\t\t\t\t\t      \\\n    Do not define this macro if you put all constants in the read-only\n    data section.  */\n \n-#define JUMP_TABLES_IN_TEXT_SECTION 1\n+#define JUMP_TABLES_IN_TEXT_SECTION 0\n /* Define this macro if jump tables (for `tablejump' insns) should be\n    output in the text section, along with the assembler instructions.\n    Otherwise, the readonly data section is used.\n@@ -2705,8 +2712,13 @@ sprintf (STRING, \"*.%s%d\", PREFIX, NUM)\n    pop hard register number REGNO off of the stack.  The code need\n    not be optimal, since this macro is used only when profiling.  */\n \n-#define ASM_OUTPUT_ADDR_VEC_ELT(STREAM, VALUE)\t\t\t\t      \\\n-  fprintf (STREAM, \"\\t.word pm(.L%d)\\n\", VALUE);\n+#define ASM_OUTPUT_ADDR_VEC_ELT(STREAM, VALUE)\t\t\\\n+do {\t\t\t\t\t\t\t\\\n+  if (AVR_MEGA)\t\t\t\t\t\t\\\n+    fprintf (STREAM, \"\\t.word pm(.L%d)\\n\", VALUE);\t\\\n+  else\t\t\t\t\t\t\t\\\n+    fprintf (STREAM, \"\\trjmp .L%d\\n\", VALUE);\t\t\\\n+} while (0)\n /* This macro should be provided on machines where the addresses in a\n    dispatch table are absolute.\n \n@@ -2761,7 +2773,9 @@ fprintf (STREAM, \"\\t.skip %d,0\\n\", n)\n /* An alias for a machine mode name.  This is the machine mode that\n    elements of a jump-table should have.  */\n \n-#define CASE_VALUES_THRESHOLD 17\n+extern int avr_case_values_threshold;\n+\n+#define CASE_VALUES_THRESHOLD avr_case_values_threshold\n /* `CASE_VALUES_THRESHOLD'\n    Define this to be the smallest number of different values for\n    which it is best to use a jump-table instead of a tree of"}, {"sha": "325a545fcd87c43a1a554504a7fd1096bd20d25a", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 41, "deletions": 27, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1268b05f5ae93bb9b92d772e8addcad41cc50ad9/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1268b05f5ae93bb9b92d772e8addcad41cc50ad9/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=1268b05f5ae93bb9b92d772e8addcad41cc50ad9", "patch": "@@ -1852,58 +1852,72 @@\n (define_expand \"tablejump\"\n   [(parallel [(set (pc) (match_operand:HI 0 \"register_operand\" \"\"))\n \t      (use (label_ref (match_operand 1 \"\" \"\")))])]\n-  \"optimize\"\n+  \"0 && optimize\"\n   \"\")\n \n+;; Note: the (mem:HI (...)) memory references here are special - actually\n+;; the data is read from a word address in program memory (r31:r30 is the\n+;; index in the table, not multiplied by 2 - see the \"casesi\" pattern).\n+\n+;; Table made from \"rjmp\" instructions for <=8K devices.\n+(define_insn \"*tablejump_rjmp\"\n+   [(set (pc) (mem:HI\n+\t       (plus:HI (match_operand:HI 0 \"register_operand\" \"=&z\")\n+\t\t\t(label_ref (match_operand 2 \"\" \"\")))))\n+    (use (label_ref (match_operand 1 \"\" \"\")))]\n+  \"!AVR_MEGA\"\n+  \"subi r30,pm_lo8(-(%2))\n+\tsbci r31,pm_hi8(-(%2))\n+\tijmp\"\n+  [(set_attr \"length\" \"3\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n ;; Not a prologue, but similar idea - move the common piece of code to libgcc.\n (define_insn \"*tablejump_lib\"\n    [(set (pc) (mem:HI (plus:HI (match_operand:HI 0 \"register_operand\" \"=&z\")\n \t\t\t       (label_ref (match_operand 2 \"\" \"\")))))\n     (use (label_ref (match_operand 1 \"\" \"\")))]\n-  \"TARGET_CALL_PROLOGUES\"\n-  \"*{\n-  output_asm_insn (AS2 (subi,r30,lo8(-(%2))) CR_TAB\n-\t           AS2 (sbci,r31,hi8(-(%2))), operands);\n-  return (AVR_MEGA\n-          ? AS1 (jmp,__tablejump__)\n-          : AS1 (rjmp,__tablejump__));\n-  }\"\n-  [(set_attr \"cc\" \"clobber\")\n-   (set (attr \"length\") (if_then_else (eq_attr \"mcu_mega\" \"no\")\n-\t\t\t\t      (const_int 3)\n-\t\t\t\t      (const_int 4)))])\n-\n+  \"AVR_MEGA && TARGET_CALL_PROLOGUES\"\n+  \"subi r30,pm_lo8(-(%2))\n+\tsbci r31,pm_hi8(-(%2))\n+\tjmp __tablejump2__\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"*tablejump_enh\"\n    [(set (pc) (mem:HI\n \t       (plus:HI (match_operand:HI 0 \"register_operand\" \"=&z\")\n \t\t\t(label_ref (match_operand 2 \"\" \"\")))))\n     (use (label_ref (match_operand 1 \"\" \"\")))]\n-  \"AVR_ENHANCED\"\n-  \"subi r30,lo8(-(%2))\n-\tsbci r31,hi8(-(%2))\n+  \"AVR_MEGA && AVR_ENHANCED\"\n+  \"subi r30,pm_lo8(-(%2))\n+\tsbci r31,pm_hi8(-(%2))\n+\tlsl r30\n+\trol r31\n \tlpm __tmp_reg__,Z+\n \tlpm r31,Z\n \tmov r30,__tmp_reg__\n \tijmp\"\n-  [(set_attr \"length\" \"6\")\n+  [(set_attr \"length\" \"8\")\n    (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"*tablejump\"\n    [(set (pc) (mem:HI\n \t       (plus:HI (match_operand:HI 0 \"register_operand\" \"=&z\")\n \t\t\t(label_ref (match_operand 2 \"\" \"\")))))\n     (use (label_ref (match_operand 1 \"\" \"\")))]\n-  \"\"\n-  \"subi r30,lo8(-(%2))\n-\tsbci r31,hi8(-(%2))\n+  \"AVR_MEGA\"\n+  \"subi r30,pm_lo8(-(%2))\n+\tsbci r31,pm_hi8(-(%2))\n+\tlsl r30\n+\trol r31\n \tlpm\n+\tinc r30\n \tpush r0\n-\tadiw r30,1\n \tlpm\n \tpush r0\n \tret\"\n-  [(set_attr \"length\" \"8\")\n+  [(set_attr \"length\" \"10\")\n    (set_attr \"cc\" \"clobber\")])\n \n (define_expand \"casesi\"\n@@ -1920,17 +1934,17 @@\n \t\t\t   (const_int 0))\n \t\t      (label_ref (match_operand 4 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_dup 6)\n-\t(plus:HI (match_dup 6)\n-\t\t (match_dup 6)))\n+;;   (set (match_dup 6)\n+;;\t(plus:HI (match_dup 6)\n+;;\t\t (match_dup 6)))\n ;;   (set (match_dup 6)\n ;;\t(plus:HI (match_dup 6) (label_ref (match_operand:HI 3 \"\" \"\"))))\n \t\t \n    (parallel [(set (pc) (mem:HI\n \t\t\t (plus:HI (match_dup 6)\n \t\t\t\t  (label_ref (match_operand:HI 3 \"\" \"\")))))\n \t      (use (label_ref (match_dup 3)))])]\n-  \"!optimize\"\n+  \"\"\n   \"\n {\n   operands[6] = gen_reg_rtx (HImode);"}, {"sha": "cd2ab78ca98a50336f573b346b77b44a1d73d73d", "filename": "gcc/config/avr/libgcc.S", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1268b05f5ae93bb9b92d772e8addcad41cc50ad9/gcc%2Fconfig%2Favr%2Flibgcc.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1268b05f5ae93bb9b92d772e8addcad41cc50ad9/gcc%2Fconfig%2Favr%2Flibgcc.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Flibgcc.S?ref=1268b05f5ae93bb9b92d772e8addcad41cc50ad9", "patch": "@@ -691,9 +691,11 @@ _cleanup:\n #endif /* defined (L_cleanup) */\n \n #ifdef L_tablejump\n-\t.global __tablejump__\n-\t.func\t__tablejump__\n-__tablejump__:\n+\t.global __tablejump2__\n+\t.func\t__tablejump2__\n+__tablejump2__:\n+\tlsl\tr30\n+\trol\tr31\n #if defined (__AVR_ENHANCED__)\n \tlpm\t__tmp_reg__, Z+\n \tlpm\tr31, Z\n@@ -702,7 +704,7 @@ __tablejump__:\n #else\n \tlpm\n \tpush\tr0\n-\tadiw\tr30, 1\n+\tinc\tr30\t; table is word aligned, no carry to high byte\n \tlpm\n \tpush\tr0\n \tret"}]}