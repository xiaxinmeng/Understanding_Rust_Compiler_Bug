{"sha": "78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhiYzk0YTJhOGEyMGEyYzM0NDNkNDJiMDRjZDRkODQ4NmYyZWQ0MQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-06T05:55:07Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-06T05:55:07Z"}, "message": "arc.c (arc_return_in_memory): Check the return value of int_size_in_bytes against -1.\n\n\t* config/arc/arc.c (arc_return_in_memory): Check the return\n\tvalue of int_size_in_bytes against -1.  Don't check\n\tTREE_ADDRESSABLE.\n\t* config/avr/avr.c (avr_return_in_memory): Check the return\n\tvalue of int_size_in_bytes against -1.\n\t* config/ip2k/ip2k.c (ip2k_return_in_memory): Likewise.\n\t* config/m68hc11/m68hc11.c (m68hc11_return_in_memory):\n\tLikewise.\n\t* config/mcore/mcore.c (mcore_return_in_memory): Likewise.\n\t* config/stormy16/stormy16.c (xstormy16_return_in_memory):\n\tLikewise.\n\nFrom-SVN: r77377", "tree": {"sha": "747192e9ce04e2e116aa37e5fc0323f98c4339f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/747192e9ce04e2e116aa37e5fc0323f98c4339f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41/comments", "author": null, "committer": null, "parents": [{"sha": "d8c2bed3d823707b2b725344b272ae02011b89ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8c2bed3d823707b2b725344b272ae02011b89ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8c2bed3d823707b2b725344b272ae02011b89ed"}], "stats": {"total": 60, "additions": 48, "deletions": 12}, "files": [{"sha": "32c3894826cfb251c59d2bf1c9e84a1595d4802e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41", "patch": "@@ -1,3 +1,17 @@\n+2004-02-06  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/arc/arc.c (arc_return_in_memory): Check the return\n+\tvalue of int_size_in_bytes against -1.  Don't check\n+\tTREE_ADDRESSABLE.\n+\t* config/avr/avr.c (avr_return_in_memory): Check the return\n+\tvalue of int_size_in_bytes against -1.\n+\t* config/ip2k/ip2k.c (ip2k_return_in_memory): Likewise.\n+\t* config/m68hc11/m68hc11.c (m68hc11_return_in_memory):\n+\tLikewise.\n+\t* config/mcore/mcore.c (mcore_return_in_memory): Likewise.\n+\t* config/stormy16/stormy16.c (xstormy16_return_in_memory):\n+\tLikewise.\n+\n 2004-02-06  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/frv/frv-protos.h: Remove the prototype for"}, {"sha": "f0c1bf22fac09b9ca75b37465ac4b5b90865ad5b", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41", "patch": "@@ -2396,7 +2396,11 @@ arc_external_libcall (rtx fun ATTRIBUTE_UNUSED)\n static bool\n arc_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n {\n-  return (AGGREGATE_TYPE_P (type)\n-\t  || int_size_in_bytes (type) > 8\n-\t  || TREE_ADDRESSABLE (type));\n+  if (AGGREGATE_TYPE_P (type))\n+    return true;\n+  else\n+    {\n+      HOST_WIDE_INT size = int_size_in_bytes (type);\n+      return (size == -1 || size > 8);\n+    }\n }"}, {"sha": "07540df9f3a682d87e84f8aeafcfe56b99e11ad4", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41", "patch": "@@ -5384,9 +5384,13 @@ avr_asm_out_dtor (rtx symbol, int priority)\n static bool\n avr_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n {\n-  return ((TYPE_MODE (type) == BLKmode)\n-\t  ? int_size_in_bytes (type) > 8\n-\t  : 0);\n+  if (TYPE_MODE (type) == BLKmode)\n+    {\n+      HOST_WIDE_INT size = int_size_in_bytes (type);\n+      return (size == -1 || size > 8);\n+    }\n+  else\n+    return false;\n }\n \n #include \"gt-avr.h\""}, {"sha": "13652e41218c3484e35b24df94bb5ae39145d0a9", "filename": "gcc/config/ip2k/ip2k.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41/gcc%2Fconfig%2Fip2k%2Fip2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41/gcc%2Fconfig%2Fip2k%2Fip2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.c?ref=78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41", "patch": "@@ -6201,7 +6201,13 @@ ip2k_unsigned_comparison_operator (rtx op, enum machine_mode mode)\n static bool\n ip2k_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n {\n-  return (TYPE_MODE (type) == BLKmode) ? int_size_in_bytes (type) > 8 : 0;\n+  if (TYPE_MODE (type) == BLKmode)\n+    {\n+      HOST_WIDE_INT size = int_size_in_bytes (type);\n+      return (size == -1 || size > 8);\n+    }\n+  else\n+    return false;\n }\n \n /* Worker function for TARGET_SETUP_INCOMING_VARARGS.  */"}, {"sha": "e5bca2ed56ba60230790fc5285313005aea9da11", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41", "patch": "@@ -5550,9 +5550,13 @@ m68hc11_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n static bool\n m68hc11_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n {\n-  return ((TYPE_MODE (type) == BLKmode)\n-\t  ? (int_size_in_bytes (type) > 4)\n-\t  : (GET_MODE_SIZE (TYPE_MODE (type)) > 4));\n+  if (TYPE_MODE (type) == BLKmode)\n+    {\n+      HOST_WIDE_INT size = int_size_in_bytes (type);\n+      return (size == -1 || size > 4);\n+    }\n+  else\n+    return GET_MODE_SIZE (TYPE_MODE (type)) > 4;\n }\n \n #include \"gt-m68hc11.h\""}, {"sha": "8f2036ce7ec7cc4e1bfb2974dcbaf9c01edb73c9", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41", "patch": "@@ -3466,5 +3466,6 @@ mcore_external_libcall (rtx fun)\n static bool\n mcore_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n {\n-  return int_size_in_bytes (type) > 2 * UNITS_PER_WORD;\n+  HOST_WIDE_INT size = int_size_in_bytes (type);\n+  return (size == -1 || size > 2 * UNITS_PER_WORD);\n }"}, {"sha": "7678ccfcafd22ce49f011ad93912d2ed70147313", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=78bc94a2a8a20a2c3443d42b04cd4d8486f2ed41", "patch": "@@ -2170,10 +2170,13 @@ xstormy16_expand_builtin(tree exp, rtx target,\n   return retval;\n }\n \f\n+/* Worker function for TARGET_RETURN_IN_MEMORY.  */\n+\n static bool\n xstormy16_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n {\n-  return int_size_in_bytes (type) > UNITS_PER_WORD * NUM_ARGUMENT_REGISTERS;\n+  HOST_WIDE_INT size = int_size_in_bytes (type);\n+  return (size == -1 || size > UNITS_PER_WORD * NUM_ARGUMENT_REGISTERS);\n }\n \f\n #undef TARGET_ASM_ALIGNED_HI_OP"}]}