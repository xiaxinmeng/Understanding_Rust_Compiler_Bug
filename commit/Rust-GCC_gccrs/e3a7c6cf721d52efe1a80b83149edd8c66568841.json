{"sha": "e3a7c6cf721d52efe1a80b83149edd8c66568841", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNhN2M2Y2Y3MjFkNTJlZmUxYTgwYjgzMTQ5ZWRkOGM2NjU2ODg0MQ==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gmx.de", "date": "2015-02-06T11:22:54Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2015-02-06T11:22:54Z"}, "message": "re PR fortran/60289 (allocating class(*) pointer as character gives type-spec requires the same character-length parameter)\n\n\tPR fortran/60289\n\tInitial patch by Janus Weil\n\t* resolve.c (resolve_allocate_expr): Add check for comp. only when \n\ttarget is not unlimited polymorphic.\n\t* trans-stmt.c (gfc_trans_allocate): Assign correct value to _len\n\tcomponent of unlimited polymorphic entities.\n\n\t* gfortran.dg/unlimited_polymorphic_22.f90: New test.\n\nFrom-SVN: r220474", "tree": {"sha": "5389ce292f0a5b165c64799355b8af0e1724dcb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5389ce292f0a5b165c64799355b8af0e1724dcb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3a7c6cf721d52efe1a80b83149edd8c66568841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3a7c6cf721d52efe1a80b83149edd8c66568841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3a7c6cf721d52efe1a80b83149edd8c66568841", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3a7c6cf721d52efe1a80b83149edd8c66568841/comments", "author": {"login": "vehre", "id": 4761547, "node_id": "MDQ6VXNlcjQ3NjE1NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4761547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vehre", "html_url": "https://github.com/vehre", "followers_url": "https://api.github.com/users/vehre/followers", "following_url": "https://api.github.com/users/vehre/following{/other_user}", "gists_url": "https://api.github.com/users/vehre/gists{/gist_id}", "starred_url": "https://api.github.com/users/vehre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vehre/subscriptions", "organizations_url": "https://api.github.com/users/vehre/orgs", "repos_url": "https://api.github.com/users/vehre/repos", "events_url": "https://api.github.com/users/vehre/events{/privacy}", "received_events_url": "https://api.github.com/users/vehre/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9fb87eb0bb346faced57e1f7ea0f9d7f4b9dd472", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fb87eb0bb346faced57e1f7ea0f9d7f4b9dd472", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fb87eb0bb346faced57e1f7ea0f9d7f4b9dd472"}], "stats": {"total": 85, "additions": 83, "deletions": 2}, "files": [{"sha": "63198c89b7db48790d7ca52422b31518237fcb86", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a7c6cf721d52efe1a80b83149edd8c66568841/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a7c6cf721d52efe1a80b83149edd8c66568841/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e3a7c6cf721d52efe1a80b83149edd8c66568841", "patch": "@@ -1,3 +1,17 @@\n+\n+2015-01-29  Andre Vehreschild  <vehre@gmx.de>, Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/60289\n+\tInitial patch by Janus Weil\n+\t* resolve.c (resolve_allocate_expr): Add check for comp. only when \n+\ttarget is not unlimited polymorphic.\n+\t* trans-stmt.c (gfc_trans_allocate): Assign correct value to _len\n+\tcomponent of unlimited polymorphic entities.\n+\n+2015-01-29  Andre Vehreschild  <vehre@gmx.de>\n+\n+\t* gfortran.dg/unlimited_polymorphic_22.f90: New test.\n+\n 2015-02-05  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/64943"}, {"sha": "b1111cc4cf5126ea979ce00d7871734114c95d27", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a7c6cf721d52efe1a80b83149edd8c66568841/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a7c6cf721d52efe1a80b83149edd8c66568841/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=e3a7c6cf721d52efe1a80b83149edd8c66568841", "patch": "@@ -6933,7 +6933,9 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n       goto failure;\n     }\n \n-  if (code->ext.alloc.ts.type == BT_CHARACTER && !e->ts.deferred)\n+  /* Check F08:C632.  */\n+  if (code->ext.alloc.ts.type == BT_CHARACTER && !e->ts.deferred\n+      && !UNLIMITED_POLY (e))\n     {\n       int cmp = gfc_dep_compare_expr (e->ts.u.cl->length,\n \t\t\t\t      code->ext.alloc.ts.u.cl->length);"}, {"sha": "7e0e856b0d02057c429d28eeb2663fcee83980b9", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a7c6cf721d52efe1a80b83149edd8c66568841/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a7c6cf721d52efe1a80b83149edd8c66568841/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=e3a7c6cf721d52efe1a80b83149edd8c66568841", "patch": "@@ -5167,7 +5167,16 @@ gfc_trans_allocate (gfc_code * code)\n \t      se_sz.expr = gfc_evaluate_now (se_sz.expr, &se.pre);\n \t      gfc_add_block_to_block (&se.pre, &se_sz.post);\n \t      /* Store the string length.  */\n-\t      tmp = al->expr->ts.u.cl->backend_decl;\n+\t      if ((expr->symtree->n.sym->ts.type == BT_CLASS\n+\t\t  || expr->symtree->n.sym->ts.type == BT_DERIVED)\n+\t\t  && expr->ts.u.derived->attr.unlimited_polymorphic)\n+\t\t/* For unlimited polymorphic entities get the backend_decl of\n+\t\t   the _len component for that.  */\n+\t\ttmp = gfc_class_len_get (gfc_get_symbol_decl (\n+\t\t\t\t\t   expr->symtree->n.sym));\n+\t      else\n+\t\t/* Else use what is stored in the charlen->backend_decl.  */\n+\t\ttmp = al->expr->ts.u.cl->backend_decl;\n \t      gfc_add_modify (&se.pre, tmp, fold_convert (TREE_TYPE (tmp),\n \t\t\t      se_sz.expr));\n               tmp = TREE_TYPE (gfc_typenode_for_spec (&code->ext.alloc.ts));"}, {"sha": "0753fe048a805f10d629e2ebd8b05a8d38e942a6", "filename": "gcc/testsuite/gfortran.dg/unlimited_polymorphic_22.f90", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a7c6cf721d52efe1a80b83149edd8c66568841/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_22.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a7c6cf721d52efe1a80b83149edd8c66568841/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_22.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_22.f90?ref=e3a7c6cf721d52efe1a80b83149edd8c66568841", "patch": "@@ -0,0 +1,56 @@\n+! { dg-do run }\n+! Testing fix for PR fortran/60289\n+! Contributed by: Andre Vehreschild <vehre@gmx.de>\n+!\n+program test\n+    implicit none\n+\n+    class(*), pointer :: P\n+    integer :: string_len = 10 *2\n+\n+    allocate(character(string_len)::P)\n+\n+    select type(P)\n+        type is (character(*))\n+            P =\"some test string\"\n+            if (P .ne. \"some test string\") then\n+                call abort ()\n+            end if\n+            if (len(P) .ne. 20) then\n+                call abort ()\n+            end if\n+            if (len(P) .eq. len(\"some test string\")) then\n+                call abort ()\n+            end if\n+        class default\n+            call abort ()\n+    end select\n+\n+    deallocate(P)\n+\n+    ! Now for kind=4 chars.\n+\n+    allocate(character(len=20,kind=4)::P)\n+\n+    select type(P)\n+        type is (character(len=*,kind=4))\n+            P =\"some test string\"\n+            if (P .ne. 4_\"some test string\") then\n+                call abort ()\n+            end if\n+            if (len(P) .ne. 20) then\n+                call abort ()\n+            end if\n+            if (len(P) .eq. len(\"some test string\")) then\n+                call abort ()\n+            end if\n+        type is (character(len=*,kind=1))\n+            call abort ()\n+        class default\n+            call abort ()\n+    end select\n+\n+    deallocate(P)\n+\n+\n+end program test"}]}