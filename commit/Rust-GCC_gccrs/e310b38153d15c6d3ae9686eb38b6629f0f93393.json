{"sha": "e310b38153d15c6d3ae9686eb38b6629f0f93393", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMxMGIzODE1M2QxNWM2ZDNhZTk2ODZlYjM4YjY2MjlmMGY5MzM5Mw==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-12-15T22:53:26Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-12-15T22:53:26Z"}, "message": "re PR fortran/88138 (ICE in gfc_arith_concat, at fortran/arith.c:1007)\n\n2019-12-15  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/88138\n\t* decl.c (variable_decl): Check that a derived isn't being assigned\n\tan incompatible entity in an initialization.\n \n2019-12-15  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/88138\n\t* gfortran.dg/pr88138.f90: new test.\n\nFrom-SVN: r267177", "tree": {"sha": "419395b51f331c4c4ae904af423d80756be31a25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/419395b51f331c4c4ae904af423d80756be31a25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e310b38153d15c6d3ae9686eb38b6629f0f93393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e310b38153d15c6d3ae9686eb38b6629f0f93393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e310b38153d15c6d3ae9686eb38b6629f0f93393", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e310b38153d15c6d3ae9686eb38b6629f0f93393/comments", "author": null, "committer": null, "parents": [{"sha": "54d04ce91ae8e6a2d647200f9443556e6fadc9e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54d04ce91ae8e6a2d647200f9443556e6fadc9e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54d04ce91ae8e6a2d647200f9443556e6fadc9e2"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "2fe463a1fed0806ac07e3f1095c70460de61f13e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e310b38153d15c6d3ae9686eb38b6629f0f93393/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e310b38153d15c6d3ae9686eb38b6629f0f93393/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e310b38153d15c6d3ae9686eb38b6629f0f93393", "patch": "@@ -1,3 +1,9 @@\n+2019-12-15  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/88138\n+\t* decl.c (variable_decl): Check that a derived isn't being assigned\n+\tan incompatible entity in an initialization.\n+ \n 2018-12-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/88463"}, {"sha": "78555ce2f606d1fd43cf90d3e0e25949b50d75fb", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e310b38153d15c6d3ae9686eb38b6629f0f93393/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e310b38153d15c6d3ae9686eb38b6629f0f93393/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=e310b38153d15c6d3ae9686eb38b6629f0f93393", "patch": "@@ -2784,6 +2784,22 @@ variable_decl (int elem)\n \tparam->value = gfc_copy_expr (initializer);\n     }\n \n+  /* Before adding a possible initilizer, do a simple check for compatibility\n+     of lhs and rhs types.  Assigning a REAL value to a derive type is not a\n+     good thing.  */\n+  if (current_ts.type == BT_DERIVED && initializer\n+      && (gfc_numeric_ts (&initializer->ts)\n+\t  || initializer->ts.type == BT_LOGICAL\n+\t  || initializer->ts.type == BT_CHARACTER))\n+    {\n+      gfc_error (\"Incompatible initialization between a derive type \"\n+\t\t \"entity and an entity with %qs type at %C\",\n+\t\t  gfc_typename (&initializer->ts));\n+      m = MATCH_ERROR;\n+      goto cleanup;\n+    }\n+\n+\n   /* Add the initializer.  Note that it is fine if initializer is\n      NULL here, because we sometimes also need to check if a\n      declaration *must* have an initialization expression.  */"}, {"sha": "d97f9d094a813fdfccdffba5ef1558d81e32658a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e310b38153d15c6d3ae9686eb38b6629f0f93393/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e310b38153d15c6d3ae9686eb38b6629f0f93393/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e310b38153d15c6d3ae9686eb38b6629f0f93393", "patch": "@@ -1,3 +1,8 @@\n+2019-12-15  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/88138\n+\t* gfortran.dg/pr88138.f90: new test.\n+\n 2018-12-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/88464"}, {"sha": "04b826c8cbeffa6617ad4012b8297e4a6438ff54", "filename": "gcc/testsuite/gfortran.dg/pr88138.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e310b38153d15c6d3ae9686eb38b6629f0f93393/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88138.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e310b38153d15c6d3ae9686eb38b6629f0f93393/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88138.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88138.f90?ref=e310b38153d15c6d3ae9686eb38b6629f0f93393", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+program p\n+   type t\n+      character :: c = 'c'\n+   end type\n+   type(t), parameter :: x  = 1.e1  ! { dg-error \"Incompatible initialization between a\" }s\n+   print *, 'a' // x%c\n+end\n+! { dg-prune-output \"has no IMPLICIT type\" }"}]}