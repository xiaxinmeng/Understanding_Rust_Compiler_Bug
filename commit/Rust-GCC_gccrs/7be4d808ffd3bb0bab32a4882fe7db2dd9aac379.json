{"sha": "7be4d808ffd3bb0bab32a4882fe7db2dd9aac379", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JlNGQ4MDhmZmQzYmIwYmFiMzJhNDg4MmZlN2RiMmRkOWFhYzM3OQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2004-01-23T13:01:42Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2004-01-23T13:01:42Z"}, "message": "tm.texi: Insert some weasel words when LOAD_EXTEND_OP may or may not return non-NIL.\n\n\t* doc/tm.texi: Insert some weasel words when LOAD_EXTEND_OP\n\tmay or may not return non-NIL.\n\t* postreload.c (reload_cse_simplify_operands): In LOAD_EXTEND_OP code,\n\tcheck CANNOT_CHANGE_MODE_CLASS\n\nFrom-SVN: r76415", "tree": {"sha": "42529d1eb0ebe4cb9d1f1aaac576501e8e97de7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42529d1eb0ebe4cb9d1f1aaac576501e8e97de7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7be4d808ffd3bb0bab32a4882fe7db2dd9aac379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7be4d808ffd3bb0bab32a4882fe7db2dd9aac379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7be4d808ffd3bb0bab32a4882fe7db2dd9aac379", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7be4d808ffd3bb0bab32a4882fe7db2dd9aac379/comments", "author": null, "committer": null, "parents": [{"sha": "3ac55a5a69f6a4f2f1acac66a36676c63c428db8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ac55a5a69f6a4f2f1acac66a36676c63c428db8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ac55a5a69f6a4f2f1acac66a36676c63c428db8"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "99f3135a6df222d4f36b4201cad37cceaa9187f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be4d808ffd3bb0bab32a4882fe7db2dd9aac379/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be4d808ffd3bb0bab32a4882fe7db2dd9aac379/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7be4d808ffd3bb0bab32a4882fe7db2dd9aac379", "patch": "@@ -1,3 +1,10 @@\n+2004-01-23  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* doc/tm.texi: Insert some weasel words when LOAD_EXTEND_OP\n+\tmay or may not return non-NIL.\n+\t* postreload.c (reload_cse_simplify_operands): In LOAD_EXTEND_OP code,\n+\tcheck CANNOT_CHANGE_MODE_CLASS\n+\n 2004-01-23  Jan Hubicka  <jh@suse.cz>\n \n \t* basic-block.h (PROP_POSTRELOAD): New macro."}, {"sha": "41f1fcb67326b1e743b3e12b97cf9feecf0a471b", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be4d808ffd3bb0bab32a4882fe7db2dd9aac379/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be4d808ffd3bb0bab32a4882fe7db2dd9aac379/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=7be4d808ffd3bb0bab32a4882fe7db2dd9aac379", "patch": "@@ -8520,20 +8520,31 @@ smaller than a word are always performed on the entire register.\n Most RISC machines have this property and most CISC machines do not.\n @end defmac\n \n-@defmac LOAD_EXTEND_OP (@var{mode})\n+@defmac LOAD_EXTEND_OP (@var{mem_mode})\n Define this macro to be a C expression indicating when insns that read\n-memory in @var{mode}, an integral mode narrower than a word, set the\n-bits outside of @var{mode} to be either the sign-extension or the\n+memory in @var{mem_mode}, an integral mode narrower than a word, set the\n+bits outside of @var{mem_mode} to be either the sign-extension or the\n zero-extension of the data read.  Return @code{SIGN_EXTEND} for values\n-of @var{mode} for which the\n+of @var{mem_mode} for which the\n insn sign-extends, @code{ZERO_EXTEND} for which it zero-extends, and\n @code{NIL} for other modes.\n \n-This macro is not called with @var{mode} non-integral or with a width\n+This macro is not called with @var{mem_mode} non-integral or with a width\n greater than or equal to @code{BITS_PER_WORD}, so you may return any\n value in this case.  Do not define this macro if it would always return\n @code{NIL}.  On machines where this macro is defined, you will normally\n define it as the constant @code{SIGN_EXTEND} or @code{ZERO_EXTEND}.\n+\n+You may return a non-@code{NIL} value even if for some hard registers\n+the sign extension is not performed, if for the @code{REGNO_REG_CLASS}\n+of these hard registers @code{CANNOT_CHANGE_MODE_CLASS} returns nonzero\n+when the @var{from} mode is @var{mem_mode} and the @var{to} mode is any\n+integral mode larger than this but not larger than @code{word_mode}.\n+\n+You must return @code{NIL} if for some hard registers that allow this\n+mode, @code{CANNOT_CHANGE_MODE_CLASS} says that they cannot change to\n+@code{word_mode}, but that they can change to another integral mode that\n+is larger then @var{mem_mode} but still smaller than @code{word_mode}.\n @end defmac\n \n @defmac SHORT_IMMEDIATES_SIGN_EXTEND"}, {"sha": "6f567f07f9e95600e4bb17227d72bfd809f6c555", "filename": "gcc/postreload.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be4d808ffd3bb0bab32a4882fe7db2dd9aac379/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be4d808ffd3bb0bab32a4882fe7db2dd9aac379/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=7be4d808ffd3bb0bab32a4882fe7db2dd9aac379", "patch": "@@ -423,6 +423,15 @@ reload_cse_simplify_operands (rtx insn, rtx testreg)\n \t\t   || GET_CODE (SET_SRC (set)) == ZERO_EXTEND\n \t\t   || GET_CODE (SET_SRC (set)) == SIGN_EXTEND)\n \t    ; /* Continue ordinary processing.  */\n+#ifdef CANNOT_CHANGE_MODE_CLASS\n+\t  /* If the register cannot change mode to word_mode, it follows that\n+\t     it cannot have been used in word_mode.  */\n+\t  else if (GET_CODE (SET_DEST (set)) == REG\n+\t\t   && CANNOT_CHANGE_MODE_CLASS (GET_MODE (SET_DEST (set)),\n+\t\t\t\t\t\tword_mode,\n+\t\t\t\t\t\tREGNO_REG_CLASS (REGNO (SET_DEST (set)))))\n+\t    ; /* Continue ordinary processing.  */\n+#endif\n \t  /* If this is a straight load, make the extension explicit.  */\n \t  else if (GET_CODE (SET_DEST (set)) == REG\n \t\t   && recog_data.n_operands == 2"}]}