{"sha": "8e063904ef8bb900f2eeb01106abca25cdd8a8cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGUwNjM5MDRlZjhiYjkwMGYyZWViMDExMDZhYmNhMjVjZGQ4YThjYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-08-21T17:11:49Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-08-21T17:11:49Z"}, "message": "search.c (lookup_field_1): Assert TYPE is a class and VFIELD isn't special.\n\n\t* search.c (lookup_field_1): Assert TYPE is a class and VFIELD\n\tisn't special.\n\t(lookup_field_fuzzy_info::fuzzy_lookup_fnfields): Delete.\n\t(lookup_field_fuzzy_r): Adjust.\n\nFrom-SVN: r251241", "tree": {"sha": "6f651117808c9536140530ecc5d8ef5cea496a09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f651117808c9536140530ecc5d8ef5cea496a09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e063904ef8bb900f2eeb01106abca25cdd8a8cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e063904ef8bb900f2eeb01106abca25cdd8a8cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e063904ef8bb900f2eeb01106abca25cdd8a8cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e063904ef8bb900f2eeb01106abca25cdd8a8cc/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57cea2b3bc9cc19bc3d14007cef0393f5bf70823", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57cea2b3bc9cc19bc3d14007cef0393f5bf70823", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57cea2b3bc9cc19bc3d14007cef0393f5bf70823"}], "stats": {"total": 59, "additions": 13, "deletions": 46}, "files": [{"sha": "04edd57ae86c8ecde578b510b9fa9ccdf3f82418", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e063904ef8bb900f2eeb01106abca25cdd8a8cc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e063904ef8bb900f2eeb01106abca25cdd8a8cc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8e063904ef8bb900f2eeb01106abca25cdd8a8cc", "patch": "@@ -1,3 +1,10 @@\n+2017-08-21  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* search.c (lookup_field_1): Assert TYPE is a class and VFIELD\n+\tisn't special.\n+\t(lookup_field_fuzzy_info::fuzzy_lookup_fnfields): Delete.\n+\t(lookup_field_fuzzy_r): Adjust.\n+\n 2017-08-21  David Malcolm  <dmalcolm@redhat.com>\n \n \t* call.c (build_over_call): Pass NULL for new parameter to"}, {"sha": "a1c4ba1f41df81c484d89013ce2b44dce12ab01f", "filename": "gcc/cp/search.c", "status": "modified", "additions": 6, "deletions": 46, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e063904ef8bb900f2eeb01106abca25cdd8a8cc/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e063904ef8bb900f2eeb01106abca25cdd8a8cc/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=8e063904ef8bb900f2eeb01106abca25cdd8a8cc", "patch": "@@ -371,18 +371,7 @@ lookup_field_1 (tree type, tree name, bool want_type)\n {\n   tree field;\n \n-  gcc_assert (identifier_p (name));\n-\n-  if (TREE_CODE (type) == TEMPLATE_TYPE_PARM\n-      || TREE_CODE (type) == BOUND_TEMPLATE_TEMPLATE_PARM\n-      || TREE_CODE (type) == TYPENAME_TYPE)\n-    /* The TYPE_FIELDS of a TEMPLATE_TYPE_PARM and\n-       BOUND_TEMPLATE_TEMPLATE_PARM are not fields at all;\n-       instead TYPE_FIELDS is the TEMPLATE_PARM_INDEX.  (Miraculously,\n-       the code often worked even when we treated the index as a list\n-       of fields!)\n-       The TYPE_FIELDS of TYPENAME_TYPE is its TYPENAME_TYPE_FULLNAME.  */\n-    return NULL_TREE;\n+  gcc_assert (identifier_p (name) && RECORD_OR_UNION_TYPE_P (type));\n \n   if (CLASSTYPE_SORTED_FIELDS (type))\n     {\n@@ -474,13 +463,11 @@ lookup_field_1 (tree type, tree name, bool want_type)\n \t  && (!want_type || DECL_DECLARES_TYPE_P (decl)))\n \treturn decl;\n     }\n-  /* Not found.  */\n-  if (name == vptr_identifier)\n-    {\n-      /* Give the user what s/he thinks s/he wants.  */\n-      if (TYPE_POLYMORPHIC_P (type))\n-\treturn TYPE_VFIELD (type);\n-    }\n+\n+  /* We used to special-case vptr_identifier.  Make sure it's not\n+     special any more.  */\n+  gcc_assert (name != vptr_identifier || !TYPE_VFIELD (type));\n+\n   return NULL_TREE;\n }\n \n@@ -1374,7 +1361,6 @@ class lookup_field_fuzzy_info\n   lookup_field_fuzzy_info (bool want_type_p) :\n     m_want_type_p (want_type_p), m_candidates () {}\n \n-  void fuzzy_lookup_fnfields (tree type);\n   void fuzzy_lookup_field (tree type);\n \n   /* If true, we are looking for types, not data members.  */\n@@ -1383,27 +1369,6 @@ class lookup_field_fuzzy_info\n   auto_vec<tree> m_candidates;\n };\n \n-/* Locate all methods within TYPE, append them to m_candidates.  */\n-\n-void\n-lookup_field_fuzzy_info::fuzzy_lookup_fnfields (tree type)\n-{\n-  vec<tree, va_gc> *method_vec;\n-  tree fn;\n-  size_t i;\n-\n-  if (!CLASS_TYPE_P (type))\n-    return;\n-\n-  method_vec = CLASSTYPE_METHOD_VEC (type);\n-  if (!method_vec)\n-    return;\n-\n-  for (i = 0; vec_safe_iterate (method_vec, i, &fn); ++i)\n-    if (fn)\n-      m_candidates.safe_push (OVL_NAME (fn));\n-}\n-\n /* Locate all fields within TYPE, append them to m_candidates.  */\n \n void\n@@ -1432,11 +1397,6 @@ lookup_field_fuzzy_r (tree binfo, void *data)\n   lookup_field_fuzzy_info *lffi = (lookup_field_fuzzy_info *) data;\n   tree type = BINFO_TYPE (binfo);\n \n-  /* First, look for functions.  */\n-  if (!lffi->m_want_type_p)\n-    lffi->fuzzy_lookup_fnfields (type);\n-\n-  /* Look for data member and types.  */\n   lffi->fuzzy_lookup_field (type);\n \n   return NULL_TREE;"}]}