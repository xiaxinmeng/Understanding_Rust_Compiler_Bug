{"sha": "11c4a06a6c1a9db0bfdb3ee8509392dd7163709c", "node_id": "C_kwDOANBUbNoAKDExYzRhMDZhNmMxYTlkYjBiZmRiM2VlODUwOTM5MmRkNzE2MzcwOWM", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-11-13T04:16:55Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-11-16T15:07:39Z"}, "message": "tree-optimization: [PR103218] Fold ((type)(a<0)) << SIGNBITOFA into ((type)a) & signbit\n\nThis folds Fold ((type)(a<0)) << SIGNBITOFA into ((type)a) & signbit inside match.pd.\nThis was already handled in fold-cost by:\n/* A < 0 ? <sign bit of A> : 0 is simply (A & <sign bit of A>).  */\nI have not removed as we only simplify \"a ? POW2 : 0\" at the gimple level to \"a << CST1\"\nand fold actually does the reverse of folding \"(a<0)<<CST\" into \"(a<0) ? 1<<CST : 0\".\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no regressions.\n\n\tPR tree-optimization/103218\n\ngcc/ChangeLog:\n\n\t* match.pd: New pattern for \"((type)(a<0)) << SIGNBITOFA\".\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/tree-ssa/pr103218-1.c: New test.", "tree": {"sha": "80270fb57c185187dd247904448330e62acadb8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80270fb57c185187dd247904448330e62acadb8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11c4a06a6c1a9db0bfdb3ee8509392dd7163709c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11c4a06a6c1a9db0bfdb3ee8509392dd7163709c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11c4a06a6c1a9db0bfdb3ee8509392dd7163709c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11c4a06a6c1a9db0bfdb3ee8509392dd7163709c/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d8e8f3ad567c7bd1de708fcc841f691d9686c4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d8e8f3ad567c7bd1de708fcc841f691d9686c4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d8e8f3ad567c7bd1de708fcc841f691d9686c4d"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "7f76925b6c6d44ab806f95067b326a9e3732acd2", "filename": "gcc/match.pd", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11c4a06a6c1a9db0bfdb3ee8509392dd7163709c/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11c4a06a6c1a9db0bfdb3ee8509392dd7163709c/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=11c4a06a6c1a9db0bfdb3ee8509392dd7163709c", "patch": "@@ -865,6 +865,16 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n     { tree utype = unsigned_type_for (type); }\n     (convert (rshift (lshift (convert:utype @0) @2) @3))))))\n \n+/* Fold ((type)(a<0)) << SIGNBITOFA into ((type)a) & signbit. */\n+(simplify\n+ (lshift (convert (lt @0 integer_zerop@1)) INTEGER_CST@2)\n+ (if (TYPE_SIGN (TREE_TYPE (@0)) == SIGNED\n+      && wi::eq_p (wi::to_wide (@2), TYPE_PRECISION (TREE_TYPE (@0)) - 1))\n+  (with { wide_int wone = wi::one (TYPE_PRECISION (type)); }\n+   (bit_and (convert @0)\n+            { wide_int_to_tree (type,\n+\t\t\t\twi::lshift (wone, wi::to_wide (@2))); }))))\n+\n /* Fold (-x >> C) into -(x > 0) where C = precision(type) - 1.  */\n (for cst (INTEGER_CST VECTOR_CST)\n  (simplify"}, {"sha": "f086f073b386650c8166a44ff878493e06f45ef2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr103218-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11c4a06a6c1a9db0bfdb3ee8509392dd7163709c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr103218-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11c4a06a6c1a9db0bfdb3ee8509392dd7163709c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr103218-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr103218-1.c?ref=11c4a06a6c1a9db0bfdb3ee8509392dd7163709c", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* PR tree-optimization/103218 */\n+\n+/* These first two are removed during forwprop1 */\n+signed char f(signed char a)\n+{\n+  signed char t = a < 0;\n+  int tt = (unsigned char)(t << 7);\n+  return tt;\n+}\n+signed char f0(signed char a)\n+{\n+  unsigned char t = a < 0;\n+  int tt = (unsigned char)(t << 7);\n+  return tt;\n+}\n+\n+/* This one is removed during phiopt. */\n+signed char  f1(signed char a)\n+{\n+    if (a < 0)\n+      return 1u<<7;\n+    return 0;\n+}\n+\n+/* These three examples should remove \"a < 0\" by optimized. */\n+/* { dg-final { scan-tree-dump-times \"< 0\" 0 \"optimized\"} } */"}]}