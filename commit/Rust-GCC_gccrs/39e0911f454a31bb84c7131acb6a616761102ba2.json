{"sha": "39e0911f454a31bb84c7131acb6a616761102ba2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzllMDkxMWY0NTRhMzFiYjg0YzcxMzFhY2I2YTYxNjc2MTEwMmJhMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-30T22:09:27Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-30T22:09:27Z"}, "message": "({store,extract}_bit_field): Don't use bitfield insn if OP0 is\nregister and bitfield spans it.\n\nFrom-SVN: r7837", "tree": {"sha": "42800d57c18a8aef5282f31a350b7db7f1f4a1b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42800d57c18a8aef5282f31a350b7db7f1f4a1b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39e0911f454a31bb84c7131acb6a616761102ba2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39e0911f454a31bb84c7131acb6a616761102ba2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39e0911f454a31bb84c7131acb6a616761102ba2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39e0911f454a31bb84c7131acb6a616761102ba2/comments", "author": null, "committer": null, "parents": [{"sha": "311b7cd79558abcdcf6ddf0a590c147247a71771", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/311b7cd79558abcdcf6ddf0a590c147247a71771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/311b7cd79558abcdcf6ddf0a590c147247a71771"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "46e16bef34fb0a8887d6b598bea7b4976feb50bd", "filename": "gcc/expmed.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39e0911f454a31bb84c7131acb6a616761102ba2/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39e0911f454a31bb84c7131acb6a616761102ba2/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=39e0911f454a31bb84c7131acb6a616761102ba2", "patch": "@@ -369,7 +369,10 @@ store_bit_field (str_rtx, bitsize, bitnum, fieldmode, value, align, total_size)\n       && !(bitsize == 1 && GET_CODE (value) == CONST_INT)\n       /* Ensure insv's size is wide enough for this field.  */\n       && (GET_MODE_BITSIZE (insn_operand_mode[(int) CODE_FOR_insv][3])\n-\t  >= bitsize))\n+\t  >= bitsize)\n+      && ! ((GET_CODE (op0) == REG || GET_CODE (op0) == SUBREG)\n+\t    && (bitsize + bitpos\n+\t\t> GET_MODE_BITSIZE (insn_operand_mode[(int) CODE_FOR_insv][3]))))\n     {\n       int xbitpos = bitpos;\n       rtx value1;\n@@ -972,7 +975,10 @@ extract_bit_field (str_rtx, bitsize, bitnum, unsignedp,\n #ifdef HAVE_extzv\n       if (HAVE_extzv\n \t  && (GET_MODE_BITSIZE (insn_operand_mode[(int) CODE_FOR_extzv][0])\n-\t      >= bitsize))\n+\t      >= bitsize)\n+\t  && ! ((GET_CODE (op0) == REG || GET_CODE (op0) == SUBREG)\n+\t\t&& (bitsize + bitpos\n+\t\t    > GET_MODE_BITSIZE (insn_operand_mode[(int) CODE_FOR_extzv][0]))))\n \t{\n \t  int xbitpos = bitpos, xoffset = offset;\n \t  rtx bitsize_rtx, bitpos_rtx;\n@@ -1111,7 +1117,10 @@ extract_bit_field (str_rtx, bitsize, bitnum, unsignedp,\n #ifdef HAVE_extv\n       if (HAVE_extv\n \t  && (GET_MODE_BITSIZE (insn_operand_mode[(int) CODE_FOR_extv][0])\n-\t      >= bitsize))\n+\t      >= bitsize)\n+\t  && ! ((GET_CODE (op0) == REG || GET_CODE (op0) == SUBREG)\n+\t\t&& (bitsize + bitpos\n+\t\t    > GET_MODE_BITSIZE (insn_operand_mode[(int) CODE_FOR_extv][0]))))\n \t{\n \t  int xbitpos = bitpos, xoffset = offset;\n \t  rtx bitsize_rtx, bitpos_rtx;"}]}