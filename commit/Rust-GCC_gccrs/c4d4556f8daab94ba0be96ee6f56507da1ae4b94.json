{"sha": "c4d4556f8daab94ba0be96ee6f56507da1ae4b94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRkNDU1NmY4ZGFhYjk0YmEwYmU5NmVlNmY1NjUwN2RhMWFlNGI5NA==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2007-10-07T11:45:15Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2007-10-07T11:45:15Z"}, "message": "re PR fortran/20851 (dummy argument may not appear in specification expression in elemental procedure)\n\nPR fortran/20851\nfortran/\n* expr.c (check_inquiry): Typo fix in error message.\n(check_init_expr): Same * 3.\n(check_restricted): Verify that no dummy arguments appear in\nrestricted expressions in ELEMENTAL procedures.\n* resolve.c (resolve_fl_variable): Exchange order of checks to\navoid side-effect.\ntestsuite/\n* initialization_1.f90: Fix dg-error annotations.\n* initialization_14.f90: New.\n* initialization_7.f90: Fix dg-error annotations.\n* initialization_9.f90: Likewise.\n\nFrom-SVN: r129069", "tree": {"sha": "46ae2ca6e15985534293a1fe9546fb98f8318399", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46ae2ca6e15985534293a1fe9546fb98f8318399"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4d4556f8daab94ba0be96ee6f56507da1ae4b94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d4556f8daab94ba0be96ee6f56507da1ae4b94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4d4556f8daab94ba0be96ee6f56507da1ae4b94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d4556f8daab94ba0be96ee6f56507da1ae4b94/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a6b0f546506cf36a9b9eaca9008bc6cd705bb2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a6b0f546506cf36a9b9eaca9008bc6cd705bb2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a6b0f546506cf36a9b9eaca9008bc6cd705bb2e"}], "stats": {"total": 114, "additions": 94, "deletions": 20}, "files": [{"sha": "28ed3f7af3ffa501473fe8de724658dd16de7eca", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d4556f8daab94ba0be96ee6f56507da1ae4b94/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d4556f8daab94ba0be96ee6f56507da1ae4b94/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c4d4556f8daab94ba0be96ee6f56507da1ae4b94", "patch": "@@ -1,3 +1,13 @@\n+2007-10-07  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n+\n+\tPR fortran/20851\n+\t* expr.c (check_inquiry): Typo fix in error message.\n+\t(check_init_expr): Same * 3.\n+\t(check_restricted): Verify that no dummy arguments appear in\n+\trestricted expressions in ELEMENTAL procedures.\n+\t* resolve.c (resolve_fl_variable): Exchange order of checks to\n+\tavoid side-effect.\n+\n 2007-10-06  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/33609"}, {"sha": "151b465ae9f3afe4197bfdca5137d228124c7c91", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d4556f8daab94ba0be96ee6f56507da1ae4b94/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d4556f8daab94ba0be96ee6f56507da1ae4b94/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=c4d4556f8daab94ba0be96ee6f56507da1ae4b94", "patch": "@@ -2012,7 +2012,7 @@ check_inquiry (gfc_expr *e, int not_restricted)\n \t    && ap->expr->symtree->n.sym->ts.type == BT_CHARACTER\n \t    && ap->expr->symtree->n.sym->ts.cl->length == NULL)\n \t  {\n-\t    gfc_error (\"assumed character length variable '%s' in constant \"\n+\t    gfc_error (\"Assumed character length variable '%s' in constant \"\n \t\t       \"expression at %L\", e->symtree->n.sym->name, &e->where);\n \t      return MATCH_ERROR;\n \t  }\n@@ -2204,19 +2204,19 @@ check_init_expr (gfc_expr *e)\n \t  switch (e->symtree->n.sym->as->type)\n \t    {\n \t      case AS_ASSUMED_SIZE:\n-\t\tgfc_error (\"assumed size array '%s' at %L is not permitted \"\n+\t\tgfc_error (\"Assumed size array '%s' at %L is not permitted \"\n \t\t\t   \"in an initialization expression\",\n \t\t\t   e->symtree->n.sym->name, &e->where);\n \t\tbreak;\n \n \t      case AS_ASSUMED_SHAPE:\n-\t\tgfc_error (\"assumed shape array '%s' at %L is not permitted \"\n+\t\tgfc_error (\"Assumed shape array '%s' at %L is not permitted \"\n \t\t\t   \"in an initialization expression\",\n \t\t\t   e->symtree->n.sym->name, &e->where);\n \t\tbreak;\n \n \t      case AS_DEFERRED:\n-\t\tgfc_error (\"deferred array '%s' at %L is not permitted \"\n+\t\tgfc_error (\"Deferred array '%s' at %L is not permitted \"\n \t\t\t   \"in an initialization expression\",\n \t\t\t   e->symtree->n.sym->name, &e->where);\n \t\tbreak;\n@@ -2429,6 +2429,19 @@ check_restricted (gfc_expr *e)\n       sym = e->symtree->n.sym;\n       t = FAILURE;\n \n+      /* If a dummy argument appears in a context that is valid for a\n+\t restricted expression in an elemental procedure, it will have\n+\t already been simplified away once we get here.  Therefore we\n+\t don't need to jump through hoops to distinguish valid from\n+\t invalid cases.  */\n+      if (sym->attr.dummy && sym->ns == gfc_current_ns\n+\t  && sym->ns->proc_name && sym->ns->proc_name->attr.elemental)\n+\t{\n+\t  gfc_error (\"Dummy argument '%s' not allowed in expression at %L\",\n+\t\t     sym->name, &e->where);\n+\t  break;\n+\t}\n+\n       if (sym->attr.optional)\n \t{\n \t  gfc_error (\"Dummy argument '%s' at %L cannot be OPTIONAL\","}, {"sha": "61be64f26f99e92dd15f0dc140511af6c78a1bd1", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d4556f8daab94ba0be96ee6f56507da1ae4b94/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d4556f8daab94ba0be96ee6f56507da1ae4b94/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=c4d4556f8daab94ba0be96ee6f56507da1ae4b94", "patch": "@@ -6968,22 +6968,20 @@ resolve_fl_variable (gfc_symbol *sym, int mp_flag)\n      is_non_constant_shape_array.  */\n   specification_expr = 1;\n \n-  if (!sym->attr.use_assoc\n+  if (sym->ns->proc_name\n+      && (sym->ns->proc_name->attr.flavor == FL_MODULE\n+\t  || sym->ns->proc_name->attr.is_main_program)\n+      && !sym->attr.use_assoc\n       && !sym->attr.allocatable\n       && !sym->attr.pointer\n       && is_non_constant_shape_array (sym))\n     {\n-\t/* The shape of a main program or module array needs to be\n-\t   constant.  */\n-\tif (sym->ns->proc_name\n-\t    && (sym->ns->proc_name->attr.flavor == FL_MODULE\n-\t\t|| sym->ns->proc_name->attr.is_main_program))\n-\t  {\n-\t    gfc_error (\"The module or main program array '%s' at %L must \"\n-\t\t       \"have constant shape\", sym->name, &sym->declared_at);\n-\t    specification_expr = 0;\n-\t    return FAILURE;\n-\t  }\n+      /* The shape of a main program or module array needs to be\n+\t constant.  */\n+      gfc_error (\"The module or main program array '%s' at %L must \"\n+\t\t \"have constant shape\", sym->name, &sym->declared_at);\n+      specification_expr = 0;\n+      return FAILURE;\n     }\n \n   if (sym->ts.type == BT_CHARACTER)"}, {"sha": "102c108bddbb19921be6818849ce2151fdbe6d82", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d4556f8daab94ba0be96ee6f56507da1ae4b94/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d4556f8daab94ba0be96ee6f56507da1ae4b94/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4d4556f8daab94ba0be96ee6f56507da1ae4b94", "patch": "@@ -1,3 +1,11 @@\n+2007-10-07  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n+\n+\tPR fortran/20851\n+\t* initialization_1.f90: Fix dg-error annotations.\n+\t* initialization_14.f90: New.\n+\t* initialization_7.f90: Fix dg-error annotations.\n+\t* initialization_9.f90: Likewise.\n+\n 2007-10-06  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \t* gfortran.dg/error_recovery_4.f90: New test."}, {"sha": "63035cc9dcd3c6ab7235ead64a2ab17de80f3e3c", "filename": "gcc/testsuite/gfortran.dg/initialization_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d4556f8daab94ba0be96ee6f56507da1ae4b94/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d4556f8daab94ba0be96ee6f56507da1ae4b94/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_1.f90?ref=c4d4556f8daab94ba0be96ee6f56507da1ae4b94", "patch": "@@ -24,10 +24,10 @@ subroutine foo(ch1, x, y)\n     real :: z(2, 2)\n \n ! However, this gives a warning because it is an initialization expression.\n-    integer :: l1 = len (ch1)     ! { dg-warning \"assumed character length variable\" }\n+    integer :: l1 = len (ch1)     ! { dg-warning \"Assumed character length variable\" }\n \n ! These are warnings because they are gfortran extensions.\n-    integer :: m3 = size (x, 1)   ! { dg-error \"assumed size array\" }\n+    integer :: m3 = size (x, 1)   ! { dg-error \"Assumed size array\" }\n     integer :: m4(2) = shape (z)\n \n ! This does not depend on non-constant properties."}, {"sha": "4d5b6856cf015b306fe24be28dd7297bbc5206a3", "filename": "gcc/testsuite/gfortran.dg/initialization_14.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d4556f8daab94ba0be96ee6f56507da1ae4b94/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d4556f8daab94ba0be96ee6f56507da1ae4b94/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_14.f90?ref=c4d4556f8daab94ba0be96ee6f56507da1ae4b94", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do compile }\n+! PR 20851\n+! Dummy arguments are disallowed in initialization expressions in\n+! elemental functions except as arguments to the intrinsic functions\n+! BIT_SIZE, KIND, LEN, or to the numeric inquiry functions listed\n+! in 13.11.8\n+MODULE TT\n+INTEGER M\n+CONTAINS\n+   ELEMENTAL REAL FUNCTION two(N)\n+     INTEGER, INTENT(IN) :: N\n+     INTEGER, DIMENSION(N) :: scr ! { dg-error \"Dummy argument 'n' not allowed in expression\" }\n+   END FUNCTION\n+\n+   ELEMENTAL REAL FUNCTION twopointfive(N)\n+     INTEGER, INTENT(IN) :: N\n+     INTEGER, DIMENSION(MAX(N,2)) :: scr ! { dg-error \"Dummy argument 'n' not allowed in expression\" }\n+   end FUNCTION twopointfive\n+\n+   REAL FUNCTION three(N)\n+     INTEGER, INTENT(IN) :: N\n+     INTEGER, DIMENSION(N) :: scr ! this time it's valid\n+   END FUNCTION\n+\n+   ELEMENTAL REAL FUNCTION four(N)\n+     INTEGER, INTENT(IN) :: N\n+     INTEGER, DIMENSION(bit_size(N)) :: scr ! another valid variant\n+   END FUNCTION\n+\n+   ELEMENTAL REAL FUNCTION gofourit(N)\n+     INTEGER, INTENT(IN) :: N\n+     INTEGER, DIMENSION(MIN(HUGE(N),1)) :: scr ! another valid variant\n+   END FUNCTION\n+\n+   ELEMENTAL REAL FUNCTION fourplusone(N)\n+     INTEGER, INTENT(IN) :: N\n+     INTEGER, DIMENSION(M) :: scr ! another valid variant\n+   END FUNCTION\n+\n+   ELEMENTAL REAL FUNCTION five(X)\n+     real, intent(in) :: x\n+     CHARACTER(LEN=PRECISION(X)) :: C ! valid again\n+   END FUNCTION\n+END MODULE\n+END"}, {"sha": "8615181965d6a3aadd80656d16ef1c3983bae8c7", "filename": "gcc/testsuite/gfortran.dg/initialization_7.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d4556f8daab94ba0be96ee6f56507da1ae4b94/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d4556f8daab94ba0be96ee6f56507da1ae4b94/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_7.f90?ref=c4d4556f8daab94ba0be96ee6f56507da1ae4b94", "patch": "@@ -6,7 +6,7 @@\n \n subroutine probleme(p)\n   real(kind=8), dimension(:) :: p\n-  integer :: nx = size(p, 1)          ! { dg-error \"deferred array\" }\n+  integer :: nx = size(p, 1)          ! { dg-error \"Deferred array\" }\n   integer :: nix\n \n   nix = nx"}, {"sha": "2341d40d6d953fca88e9c7ff0941eaa72c326b01", "filename": "gcc/testsuite/gfortran.dg/initialization_9.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d4556f8daab94ba0be96ee6f56507da1ae4b94/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d4556f8daab94ba0be96ee6f56507da1ae4b94/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_9.f90?ref=c4d4556f8daab94ba0be96ee6f56507da1ae4b94", "patch": "@@ -5,7 +5,7 @@\n \n    integer function xstrcmp(s1)\n      character*(*), intent(in) :: s1\n-     integer :: n1 = len(s1)            ! { dg-error \"assumed character length variable\" }\n+     integer :: n1 = len(s1)            ! { dg-error \"Assumed character length variable\" }\n      n1 = 1\n      return\n    end function xstrcmp"}]}