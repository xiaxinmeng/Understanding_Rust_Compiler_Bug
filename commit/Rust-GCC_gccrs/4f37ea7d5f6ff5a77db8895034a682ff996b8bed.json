{"sha": "4f37ea7d5f6ff5a77db8895034a682ff996b8bed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYzN2VhN2Q1ZjZmZjVhNzdkYjg4OTUwMzRhNjgyZmY5OTZiOGJlZA==", "commit": {"author": {"name": "Nicolas Setton", "email": "setton@adacore.com", "date": "2006-02-15T09:30:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:30:24Z"}, "message": "adadecode.h, [...]: (__gnat_decode): Improve support of types.\n\n2006-02-13  Nicolas Setton  <setton@adacore.com>\n\n\t* adadecode.h, adadecode.c: (__gnat_decode): Improve support of types.\n\t(get_encoding): New subprogram. Extracts the encodings from an encoded\n\tAda name.\n\nFrom-SVN: r111028", "tree": {"sha": "ed585ce6c8c394decfc3a91560c18f3b99c07e72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed585ce6c8c394decfc3a91560c18f3b99c07e72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f37ea7d5f6ff5a77db8895034a682ff996b8bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f37ea7d5f6ff5a77db8895034a682ff996b8bed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f37ea7d5f6ff5a77db8895034a682ff996b8bed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f37ea7d5f6ff5a77db8895034a682ff996b8bed/comments", "author": {"login": "setton", "id": 96973, "node_id": "MDQ6VXNlcjk2OTcz", "avatar_url": "https://avatars.githubusercontent.com/u/96973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/setton", "html_url": "https://github.com/setton", "followers_url": "https://api.github.com/users/setton/followers", "following_url": "https://api.github.com/users/setton/following{/other_user}", "gists_url": "https://api.github.com/users/setton/gists{/gist_id}", "starred_url": "https://api.github.com/users/setton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/setton/subscriptions", "organizations_url": "https://api.github.com/users/setton/orgs", "repos_url": "https://api.github.com/users/setton/repos", "events_url": "https://api.github.com/users/setton/events{/privacy}", "received_events_url": "https://api.github.com/users/setton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e7c9a05835d72aae7cdb360c9b25368df67802f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c9a05835d72aae7cdb360c9b25368df67802f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7c9a05835d72aae7cdb360c9b25368df67802f5"}], "stats": {"total": 68, "additions": 62, "deletions": 6}, "files": [{"sha": "12fcd02c702c84dbffb67f1ed2bee2b778052e42", "filename": "gcc/ada/adadecode.c", "status": "modified", "additions": 55, "deletions": 3, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f37ea7d5f6ff5a77db8895034a682ff996b8bed/gcc%2Fada%2Fadadecode.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f37ea7d5f6ff5a77db8895034a682ff996b8bed/gcc%2Fada%2Fadadecode.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadadecode.c?ref=4f37ea7d5f6ff5a77db8895034a682ff996b8bed", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *           Copyright (C) 2001-2003, Free Software Foundation, Inc.        *\n+ *           Copyright (C) 2001-2006, Free Software Foundation, Inc.        *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -98,8 +98,8 @@ ostrcpy (char *s1, char *s2)\n /* This function will return the Ada name from the encoded form.\n    The Ada coding is done in exp_dbug.ads and this is the inverse function.\n    see exp_dbug.ads for full encoding rules, a short description is added\n-   below. Right now only objects and routines are handled. There is no support\n-   for Ada types.\n+   below. Right now only objects and routines are handled. Ada types are\n+   stripped of their encodings.\n \n    CODED_NAME is the encoded entity name.\n \n@@ -159,6 +159,18 @@ __gnat_decode (const char *coded_name, char *ada_name, int verbose)\n   else\n     strcpy (ada_name, coded_name);\n \n+  /* Check for the first triple underscore in the name. This indicates\n+     that the name represents a type with encodings; in this case, we\n+     need to strip the encodings.  */\n+  {\n+    char *encodings;\n+\n+    if ((encodings = (char *) strstr (ada_name, \"___\")) != NULL)\n+      {\n+\t*encodings = '\\0';\n+      }\n+  }\n+\n   /* Check for task body.  */\n   if (has_suffix (ada_name, \"TKB\"))\n     {\n@@ -321,3 +333,43 @@ ada_demangle (const char *coded_name)\n   __gnat_decode (coded_name, ada_name, 0);\n   return xstrdup (ada_name);\n }\n+\n+void\n+get_encoding (const char *coded_name, char *encoding)\n+{\n+  char * dest_index = encoding;\n+  const char *p;\n+  int found = 0;\n+  int count = 0;\n+\n+  /* The heuristics is the following: we assume that the first triple\n+     underscore in an encoded name indicates the beginning of the\n+     first encoding, and that subsequent triple underscores indicate\n+     the next encodings. We assume that the encodings are always at the\n+     end of encoded names.  */\n+\n+  for (p = coded_name; *p != '\\0'; p++)\n+    {\n+      if (*p != '_')\n+\tcount = 0;\n+      else\n+\tif (++count == 3)\n+\t  {\n+\t    count = 0;\n+\n+\t    if (found)\n+\t      {\n+\t\tdest_index = dest_index - 2;\n+\t\t*dest_index++ = ':';\n+\t      }\n+\n+\t    p++;\n+\t    found = 1;\n+\t  }\n+\n+      if (found)\n+\t*dest_index++ = *p;\n+    }\n+\n+  *dest_index = '\\0';\n+}"}, {"sha": "f361166349c7413a197d2319e8cd8cd3670d62d6", "filename": "gcc/ada/adadecode.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f37ea7d5f6ff5a77db8895034a682ff996b8bed/gcc%2Fada%2Fadadecode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f37ea7d5f6ff5a77db8895034a682ff996b8bed/gcc%2Fada%2Fadadecode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadadecode.h?ref=4f37ea7d5f6ff5a77db8895034a682ff996b8bed", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *           Copyright (C) 2001-2003, Free Software Foundation, Inc.        *\n+ *           Copyright (C) 2001-2006, Free Software Foundation, Inc.        *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -33,8 +33,8 @@\n /* This function will return the Ada name from the encoded form.\n    The Ada coding is done in exp_dbug.ads and this is the inverse function.\n    see exp_dbug.ads for full encoding rules, a short description is added\n-   below. Right now only objects and routines are handled. There is no support\n-   for Ada types.\n+   below. Objects and routines are fully handled; types are stripped of their\n+   encodings.\n \n    CODED_NAME is the encoded entity name.\n    ADA_NAME is a pointer to a buffer, it will receive the Ada name. A safe\n@@ -44,6 +44,10 @@\n    added at the end of the Ada name and surrounded by ( and ).  */\n extern void __gnat_decode (const char *, char *, int);\n \n+/* This function will return the GNAT encodings, in a colon-separated list,\n+   from the encoded form. The Ada encodings are described in exp_dbug.ads.  */\n+extern void get_encoding (const char *, char *);\n+\n /* ada_demangle is added for COMPATIBILITY ONLY. It has the name of the\n    function used in the binutils and GDB. Always consider using __gnat_decode\n    instead of ada_demangle. Caller must free the pointer returned.  */"}]}