{"sha": "e97f22c9757e8c7bbf123b6ec1af68791f41d6fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk3ZjIyYzk3NTdlOGM3YmJmMTIzYjZlYzFhZjY4NzkxZjQxZDZmYQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-03-02T19:58:49Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-03-02T19:58:49Z"}, "message": "cp-tree.h (build_java_class_ref): Declare.\n\n\t* cp-tree.h (build_java_class_ref): Declare.\n\t* init.c (build_java_class_ref): No longer static.\n\t* except.c (expand_throw): Generate a Java-style `throw' if the\n\tthrown object is a \"Java\" object.\n\t(initialize_handler_parm): Generate a Java-style lookup of\n\texception info if the caught object is a \"Java\" object.\n\t(catch_language, catch_language_init): New globals.\n\t(decl_is_java_type): New function.\n\t(expand_start_catch_block): Don't call push_eh_info() or\n\tpush_eh_cleanup() when handling a Java-style \"catch\".  Pass Java\n\tclass reference to build_catch_block.\n\nFrom-SVN: r32292", "tree": {"sha": "f56791ab2bec65f666579c170879cf50d92a2129", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f56791ab2bec65f666579c170879cf50d92a2129"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e97f22c9757e8c7bbf123b6ec1af68791f41d6fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97f22c9757e8c7bbf123b6ec1af68791f41d6fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e97f22c9757e8c7bbf123b6ec1af68791f41d6fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97f22c9757e8c7bbf123b6ec1af68791f41d6fa/comments", "author": null, "committer": null, "parents": [{"sha": "21318741bb4f00d87f558a2f11d462fa61381e80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21318741bb4f00d87f558a2f11d462fa61381e80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21318741bb4f00d87f558a2f11d462fa61381e80"}], "stats": {"total": 165, "additions": 154, "deletions": 11}, "files": [{"sha": "2e332864c3c42bfdd669cb049155366b2269a811", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97f22c9757e8c7bbf123b6ec1af68791f41d6fa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97f22c9757e8c7bbf123b6ec1af68791f41d6fa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e97f22c9757e8c7bbf123b6ec1af68791f41d6fa", "patch": "@@ -1,3 +1,17 @@\n+2000-03-02  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* cp-tree.h (build_java_class_ref): Declare.\n+\t* init.c (build_java_class_ref): No longer static.\n+\t* except.c (expand_throw): Generate a Java-style `throw' if the\n+\tthrown object is a \"Java\" object.\n+\t(initialize_handler_parm): Generate a Java-style lookup of\n+\texception info if the caught object is a \"Java\" object.\n+\t(catch_language, catch_language_init): New globals.\n+\t(decl_is_java_type): New function.\n+\t(expand_start_catch_block): Don't call push_eh_info() or\n+\tpush_eh_cleanup() when handling a Java-style \"catch\".  Pass Java\n+\tclass reference to build_catch_block.\n+\n Thu Mar  2 13:32:01 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* typeck.c (comptypes): Treat sizetype like its language equivalent."}, {"sha": "3c46940e0684298f605ccd30dcc17c328c3b940a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97f22c9757e8c7bbf123b6ec1af68791f41d6fa/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97f22c9757e8c7bbf123b6ec1af68791f41d6fa/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e97f22c9757e8c7bbf123b6ec1af68791f41d6fa", "patch": "@@ -3932,6 +3932,7 @@ extern tree create_temporary_var                PARAMS ((tree));\n extern void begin_init_stmts                    PARAMS ((tree *, tree *));\n extern tree finish_init_stmts                   PARAMS ((tree, tree));\n extern void initialize_vtbl_ptrs                PARAMS ((tree, tree));\n+extern tree build_java_class_ref                PARAMS ((tree));\n \n /* in input.c */\n "}, {"sha": "81c4e0f2f4ac9f3e9bfb4147a193266025b8ab64", "filename": "gcc/cp/except.c", "status": "modified", "additions": 138, "deletions": 9, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97f22c9757e8c7bbf123b6ec1af68791f41d6fa/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97f22c9757e8c7bbf123b6ec1af68791f41d6fa/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=e97f22c9757e8c7bbf123b6ec1af68791f41d6fa", "patch": "@@ -55,6 +55,7 @@ static tree alloc_eh_object PARAMS ((tree));\n static int complete_ptr_ref_or_void_ptr_p PARAMS ((tree, tree));\n static void initialize_handler_parm PARAMS ((tree));\n static tree expand_throw PARAMS ((tree));\n+static int decl_is_java_type PARAMS ((tree decl, int err));\n \n #if 0\n /* This is the startup, and finish stuff per exception table.  */\n@@ -92,6 +93,14 @@ asm (TEXT_SECTION_ASM_OP);\n #include \"insn-flags.h\"\n #include \"obstack.h\"\n \n+/* In a given translation unit we are constrained to catch only C++\n+   types or only Java types.  `catch_language' holds the current type,\n+   and `catch_language_init' registers whether `catch_language' has\n+   been set.  */\n+\n+static int catch_language_init = 0;\n+static int catch_language;\n+\n /* ======================================================================\n    Briefly the algorithm works like this:\n \n@@ -450,6 +459,49 @@ build_terminate_handler ()\n   return build_function_call (terminate_node, NULL_TREE);\n }\n \n+/* Return nonzero value if DECL is a Java type suitable for catch or\n+   throw.  */\n+\n+static int\n+decl_is_java_type (decl, err)\n+     tree decl;\n+     int err;\n+{\n+  int r = (TREE_CODE (decl) == POINTER_TYPE\n+\t   && TREE_CODE (TREE_TYPE (decl)) == RECORD_TYPE\n+\t   && TYPE_FOR_JAVA (TREE_TYPE (decl)));\n+\n+  if (err)\n+    {\n+      if (TREE_CODE (decl) == REFERENCE_TYPE\n+\t  && TREE_CODE (TREE_TYPE (decl)) == RECORD_TYPE\n+\t  && TYPE_FOR_JAVA (TREE_TYPE (decl)))\n+\t{\n+\t  /* Can't throw a reference.  */\n+\t  cp_error (\"type `%T' is disallowed in Java `throw' or `catch'\",\n+\t\t    decl);\n+\t}\n+\n+      if (r)\n+\t{\n+\t  tree jthrow_node\n+\t    = IDENTIFIER_GLOBAL_VALUE (get_identifier (\"jthrowable\"));\n+\t  if (jthrow_node == NULL_TREE)\n+\t    fatal (\"call to Java `catch' or `throw', while `jthrowable' undefined\");\n+\t  jthrow_node = TREE_TYPE (TREE_TYPE (jthrow_node));\n+\n+\t  if (! DERIVED_FROM_P (jthrow_node, TREE_TYPE (decl)))\n+\t    {\n+\t      /* Thrown object must be a Throwable.  */\n+\t      cp_error (\"type `%T' is not derived from `java::lang::Throwable'\",\n+\t\t\tTREE_TYPE (decl));\n+\t    }\n+\t}\n+    }\n+\n+  return r;\n+}\n+\n /* Initialize the catch parameter DECL.  */\n \n static void \n@@ -459,6 +511,7 @@ initialize_handler_parm (decl)\n   tree exp;\n   tree init;\n   tree init_type;\n+  int lang;\n \n   /* Make sure we mark the catch param as used, otherwise we'll get a\n      warning about an unused ((anonymous)).  */\n@@ -470,7 +523,42 @@ initialize_handler_parm (decl)\n       && TREE_CODE (init_type) != POINTER_TYPE)\n     init_type = build_reference_type (init_type);\n \n-  exp = get_eh_value ();\n+  if (decl_is_java_type (init_type, 0))\n+    {\n+      tree fn\n+\t= builtin_function (\"_Jv_exception_info\", \n+\t\t\t    build_function_type (ptr_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t    void_type_node,\n+\t\t\t\t\t\t\t    NULL_TREE)),\n+\t\t\t    0, NOT_BUILT_IN, NULL_PTR);\n+\n+      exp = build (CALL_EXPR, ptr_type_node,\n+\t\t   build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (fn)),\n+\t\t\t   fn),\n+\t\t   NULL_TREE, NULL_TREE);\n+      TREE_SIDE_EFFECTS (exp) = 1;\n+      lang = EH_LANG_Java;\n+\n+      set_exception_lang_code (EH_LANG_Java);\n+      set_exception_version_code (1);\n+    }\n+  else\n+    {\n+      exp = get_eh_value ();\n+      lang = EH_LANG_C_plus_plus;\n+    }\n+\n+  if (catch_language_init)\n+    {\n+      if (lang != catch_language)\n+\terror (\"mixing C++ and Java `catch'es in single translation unit\");\n+    }\n+  else\n+    {\n+      catch_language_init = 1;\n+      catch_language = lang;\n+    }\n \n   /* Since pointers are passed by value, initialize a reference to\n      pointer catch parm with the address of the value slot.  */ \n@@ -524,14 +612,27 @@ expand_start_catch_block (decl)\n      cleanup.  */\n   compound_stmt_1 = begin_compound_stmt (/*has_no_scope=*/0);\n \n-  if (decl)\n-    type = build_eh_type_type_ref (TREE_TYPE (decl));\n-  else\n-    type = NULL_TREE;\n-  begin_catch_block (type);\n+  if (! decl || ! decl_is_java_type (TREE_TYPE (decl), 1))\n+    {\n+      /* The ordinary C++ case.  */\n+\n+      if (decl)\n+\ttype = build_eh_type_type_ref (TREE_TYPE (decl));\n+      else\n+\ttype = NULL_TREE;\n+      begin_catch_block (type);\n \n-  push_eh_info ();\n-  push_eh_cleanup ();\n+      push_eh_info ();\n+      push_eh_cleanup ();\n+    }\n+  else\n+    {\n+      /* The Java case.  In this case, the match_info is a pointer to\n+\t the Java class object.  We assume that the class is a\n+\t compiled class.  */\n+      tree ref = build_java_class_ref (TREE_TYPE (TREE_TYPE (decl)));\n+      begin_catch_block (build1 (ADDR_EXPR, jclass_node, ref));\n+    }\n \n   /* Create a binding level for the parm.  */\n   compound_stmt_2 = begin_compound_stmt (/*has_no_scope=*/0);\n@@ -734,7 +835,35 @@ expand_throw (exp)\n   if (! doing_eh (1))\n     return error_mark_node;\n \n-  if (exp)\n+  if (exp\n+      && decl_is_java_type (TREE_TYPE (exp), 1))\n+    {\n+      /* A Java `throw' statement.  */\n+      tree args = tree_cons (NULL_TREE, exp, NULL);\n+\n+      fn = get_identifier (exceptions_via_longjmp\n+\t\t\t   ? \"_Jv_Sjlj_throw\"\n+\t\t\t   : \"_Jv_Throw\");\n+      if (IDENTIFIER_GLOBAL_VALUE (fn))\n+\tfn = IDENTIFIER_GLOBAL_VALUE (fn);\n+      else\n+\t{\n+\t  /* Declare _Jv_Throw (void *), as defined in Java's\n+\t     exception.cc.  */\n+\t  tree tmp;\n+\t  tmp = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n+\t  fn = build_lang_decl (FUNCTION_DECL, fn,\n+\t\t\t\tbuild_function_type (ptr_type_node, tmp));\n+\t  DECL_EXTERNAL (fn) = 1;\n+\t  TREE_PUBLIC (fn) = 1;\n+\t  DECL_ARTIFICIAL (fn) = 1;\n+\t  pushdecl_top_level (fn);\n+\t  make_function_rtl (fn);\n+\t}\n+\n+      exp = build_function_call (fn, args);\n+    }\n+  else if (exp)\n     {\n       tree throw_type;\n       tree cleanup = NULL_TREE, e;"}, {"sha": "e9f02d8162b23211c1181514ac35b47b6af37de4", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97f22c9757e8c7bbf123b6ec1af68791f41d6fa/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97f22c9757e8c7bbf123b6ec1af68791f41d6fa/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=e97f22c9757e8c7bbf123b6ec1af68791f41d6fa", "patch": "@@ -46,7 +46,6 @@ static int member_init_ok_or_else PARAMS ((tree, tree, const char *));\n static void expand_virtual_init PARAMS ((tree, tree));\n static tree sort_member_init PARAMS ((tree));\n static tree initializing_context PARAMS ((tree));\n-static tree build_java_class_ref PARAMS ((tree));\n static void expand_cleanup_for_base PARAMS ((tree, tree));\n static tree get_temp_regvar PARAMS ((tree, tree));\n static tree dfs_initialize_vtbl_ptrs PARAMS ((tree, void *));\n@@ -2071,7 +2070,7 @@ build_new (placement, decl, init, use_global_new)\n \n /* Given a Java class, return a decl for the corresponding java.lang.Class. */\n \n-static tree\n+tree\n build_java_class_ref (type)\n      tree type;\n {"}]}