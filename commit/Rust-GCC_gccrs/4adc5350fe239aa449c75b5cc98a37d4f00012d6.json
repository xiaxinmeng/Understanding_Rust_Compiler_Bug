{"sha": "4adc5350fe239aa449c75b5cc98a37d4f00012d6", "node_id": "C_kwDOANBUbNoAKDRhZGM1MzUwZmUyMzlhYTQ0OWM3NWI1Y2M5OGEzN2Q0ZjAwMDEyZDY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-15T00:16:24Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-15T00:16:24Z"}, "message": "Daily bump.", "tree": {"sha": "6501e76dde4f3e0fd8f7a79c55b79b01b9dee66f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6501e76dde4f3e0fd8f7a79c55b79b01b9dee66f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4adc5350fe239aa449c75b5cc98a37d4f00012d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4adc5350fe239aa449c75b5cc98a37d4f00012d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4adc5350fe239aa449c75b5cc98a37d4f00012d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4adc5350fe239aa449c75b5cc98a37d4f00012d6/comments", "author": null, "committer": null, "parents": [{"sha": "cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf79b1117bd177d3d4c6ed24b6fa243c3628ac2d"}], "stats": {"total": 185, "additions": 184, "deletions": 1}, "files": [{"sha": "c14407afb1c9c8d803ecd319df83522aaa0c17d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adc5350fe239aa449c75b5cc98a37d4f00012d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adc5350fe239aa449c75b5cc98a37d4f00012d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4adc5350fe239aa449c75b5cc98a37d4f00012d6", "patch": "@@ -1,3 +1,106 @@\n+2022-06-14  Surya Kumari Jangala  <jskumari@linux.ibm.com>\n+\n+\tPR rtl-optimization/105041\n+\t* regrename.cc (check_new_reg_p): Use nregs value from du chain.\n+\n+2022-06-14  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/vsx.md (VS_scalar): Delete.\n+\t(rest of file): Adjust.\n+\n+2022-06-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/105739\n+\t* ipa-prop.cc (ipa_load_from_parm_agg): Punt on volatile loads.\n+\n+2022-06-14  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* config/riscv/bitmanip.md: Add split to handle opportunities\n+\tfor slli + sh[123]add.uw\n+\n+2022-06-14  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* config/riscv/predicates.md (consecutive_bits_operand):\n+\tImplement new predicate.\n+\n+2022-06-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105946\n+\t* tree-ssa-uninit.cc (maybe_warn_pass_by_reference):\n+\tDo not look at arguments not specified in the function call.\n+\n+2022-06-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/105965\n+\t* match.pd (view_convert CONSTRUCTOR): Handle single-element\n+\tCTOR case.\n+\n+2022-06-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* warning-control.cc (copy_warning) [generic version]: Do not erase\n+\tthe warning data of the destination location when the no-warning\n+\tbit is not set on the source.\n+\t(copy_warning) [tree version]: Return early if TO is equal to FROM.\n+\t(copy_warning) [gimple version]: Likewise.\n+\n+2022-06-14  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR tree-optimization/105940\n+\t* tree-vect-loop.cc (vect_analyze_loop_2): Move the place of\n+\tapplying suggested_unroll_factor after start_over.\n+\n+2022-06-14  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* config/xtensa/predicates.md (shifted_mask_operand):\n+\tNew predicate.\n+\t* config/xtensa/xtensa.md (*andsi3_const_pow2_minus_one):\n+\tNew insn-and-split pattern.\n+\t(*andsi3_const_negative_pow2, *andsi3_const_shifted_mask,\n+\t*masktrue_const_pow2_minus_one, *masktrue_const_negative_pow2,\n+\t*masktrue_const_shifted_mask): Ditto.\n+\n+2022-06-14  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* config/xtensa/xtensa.md (*masktrue_bitcmpl): New insn pattern.\n+\n+2022-06-14  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* config/xtensa/xtensa-protos.h (xtensa_emit_branch):\n+\tRemove the first argument.\n+\t(xtensa_emit_bit_branch): Remove it because now called only from the\n+\toutput statement of *bittrue insn pattern.\n+\t* config/xtensa/xtensa.cc (gen_int_relational): Remove the last\n+\targument 'p_invert', and make so that the condition is reversed by\n+\titself as needed.\n+\t(xtensa_expand_conditional_branch): Share the common path, and remove\n+\tcondition inversion code.\n+\t(xtensa_emit_branch, xtensa_emit_movcc): Simplify by removing the\n+\t\"false side\" pattern.\n+\t(xtensa_emit_bit_branch): Remove it because of the abovementioned\n+\treason, and move the function body to *bittrue insn pattern.\n+\t* config/xtensa/xtensa.md (*bittrue): Transplant the output\n+\tstatement from removed xtensa_emit_bit_branch().\n+\t(*bfalse, *ubfalse, *bitfalse, *maskfalse): Remove the \"false side\"\n+\tinsn patterns.\n+\n+2022-06-14  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* config/xtensa/predicates.md (logical_shift_operator,\n+\txtensa_shift_per_byte_operator): New predicates.\n+\t* config/xtensa/xtensa-protos.h (xtensa_shlrd_which_direction):\n+\tNew prototype.\n+\t* config/xtensa/xtensa.cc (xtensa_shlrd_which_direction):\n+\tNew helper function for funnel shift patterns.\n+\t* config/xtensa/xtensa.md (ior_op): New code iterator.\n+\t(*ashlsi3_1): Replace with new split pattern.\n+\t(*shift_per_byte): Unify *ashlsi3_3x, *ashrsi3_3x and *lshrsi3_3x.\n+\t(*shift_per_byte_omit_AND_0, *shift_per_byte_omit_AND_1):\n+\tNew insn-and-split patterns that redirect to *xtensa_shift_per_byte,\n+\tin order to omit unnecessary bitwise AND operation.\n+\t(*shlrd_reg_<code>, *shlrd_const_<code>, *shlrd_per_byte_<code>,\n+\t*shlrd_per_byte_<code>_omit_AND):\n+\tNew insn patterns for funnel shifts.\n+\n 2022-06-13  Jason Merrill  <jason@redhat.com>\n \n \t* tree-cfg.cc (pass_warn_function_return::execute): Also check"}, {"sha": "fa673f388358db68a687086b6b20fa9ddfa70e43", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adc5350fe239aa449c75b5cc98a37d4f00012d6/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adc5350fe239aa449c75b5cc98a37d4f00012d6/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=4adc5350fe239aa449c75b5cc98a37d4f00012d6", "patch": "@@ -1 +1 @@\n-20220614\n+20220615"}, {"sha": "fab98152e59a05f42b8e77f0982bf08ba4dc6811", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adc5350fe239aa449c75b5cc98a37d4f00012d6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adc5350fe239aa449c75b5cc98a37d4f00012d6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4adc5350fe239aa449c75b5cc98a37d4f00012d6", "patch": "@@ -1,3 +1,17 @@\n+2022-06-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (fini_modules): Add has_inits parm.\n+\t* decl2.cc (c_parse_final_cleanups): Check for\n+\tinits, adjust fini_modules flags.\n+\t* module.cc (module_state): Rename call_init_p to\n+\tactive_init_p.\n+\t(module_state::write_config): Write active_init.\n+\t(module_state::read_config): Read it.\n+\t(module_determine_import_inits): Clear active_init_p\n+\tof covered inits.\n+\t(late_finish_module): Add has_init parm.  Record it.\n+\t(fini_modules): Adjust.\n+\n 2022-06-13  Nathan Sidwell  <nathan@acm.org>\n \n \t* module.cc (module_state::write): Separate to ..."}, {"sha": "35457902419ca0865ae1715a28cefd34fee904b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adc5350fe239aa449c75b5cc98a37d4f00012d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adc5350fe239aa449c75b5cc98a37d4f00012d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4adc5350fe239aa449c75b5cc98a37d4f00012d6", "patch": "@@ -1,3 +1,39 @@\n+2022-06-14  Surya Kumari Jangala  <jskumari@linux.ibm.com>\n+\n+\tPR rtl-optimization/105041\n+\t* gcc.target/powerpc/pr105041.c: New test.\n+\n+2022-06-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/modules/init-2_a.C: Adjust.\n+\t* g++.dg/modules/init-2_c.C: Adjust.\n+\t* g++.dg/modules/init-2_d.C: New.\n+\n+2022-06-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/ipa/pr105739.c: New test.\n+\n+2022-06-14  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* gcc.target/riscv/zba-shadd.c: New test.\n+\n+2022-06-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/105965\n+\t* gcc.target/i386/pr105965.c: New testcase.\n+\n+2022-06-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* g++.dg/warn/Wuse-after-free5.C: New test.\n+\n+2022-06-14  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* gcc.target/xtensa/BALL-BNALL.c: New.\n+\n+2022-06-14  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* gcc.target/xtensa/funnel_shifter.c: New.\n+\n 2022-06-13  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/ubsan/return-8.C: New test."}, {"sha": "490ab754ed309fae5eb7289831479fbf27881c94", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adc5350fe239aa449c75b5cc98a37d4f00012d6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adc5350fe239aa449c75b5cc98a37d4f00012d6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4adc5350fe239aa449c75b5cc98a37d4f00012d6", "patch": "@@ -1,3 +1,33 @@\n+2022-06-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/62187\n+\t* include/bits/basic_string.h (operator==): Always compare\n+\tlengths before checking string contents.\n+\t[!__cpp_lib_three_way_comparison] (operator==, operator!=):\n+\tReorder arguments.\n+\n+2022-06-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/59048\n+\t* include/bits/basic_string.h (compare): Define inline.\n+\t* include/bits/basic_string.tcc (compare): Remove out-of-line\n+\tdefinitions.\n+\t* include/bits/cow_string.h (compare): Define inline.\n+\t* testsuite/21_strings/basic_string/operations/compare/char/3.cc:\n+\tNew test.\n+\n+2022-06-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/new_allocator.h: Fix indentation.\n+\t* include/ext/malloc_allocator.h: Likewise.\n+\n+2022-06-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/105957\n+\t* include/bits/allocator.h (allocator::allocate): Check for\n+\toverflow in constexpr allocation.\n+\t* testsuite/20_util/allocator/105975.cc: New test.\n+\n 2022-06-13  Mark Mentovai  <mark@mentovai.com>\n \n \t* include/experimental/bits/fs_path.h (__detail::__null_terminated):"}]}