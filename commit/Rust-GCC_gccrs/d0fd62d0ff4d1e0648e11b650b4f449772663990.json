{"sha": "d0fd62d0ff4d1e0648e11b650b4f449772663990", "node_id": "C_kwDOANBUbNoAKGQwZmQ2MmQwZmY0ZDFlMDY0OGUxMWI2NTBiNGY0NDk3NzI2NjM5OTA", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-08-26T22:59:36Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-08-26T22:59:36Z"}, "message": "libstdc++: Implement LWG 3692/3702 changes to zip_/zip_transform_view\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (zip_view::_Iterator::operator<): Remove\n\tas per LWG 3692.\n\t(zip_view::_Iterator::operator>): Likewise.\n\t(zip_view::_Iterator::operator<=): Likewise.\n\t(zip_view::_Iterator::operator>=): Likewise.\n\t(zip_view::_Iterator::operator<=>): Remove three_way_comparable\n\tconstraint as per LWG 3692.\n\t(zip_transform_view::_Iterator): Ditto as per LWG 3702.", "tree": {"sha": "71fe1a96133b8b1f88525c764e54b802fac83e0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71fe1a96133b8b1f88525c764e54b802fac83e0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0fd62d0ff4d1e0648e11b650b4f449772663990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0fd62d0ff4d1e0648e11b650b4f449772663990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0fd62d0ff4d1e0648e11b650b4f449772663990", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0fd62d0ff4d1e0648e11b650b4f449772663990/comments", "author": null, "committer": null, "parents": [{"sha": "1a93a84b9e01d0dd5156be8d686e8666a6fc45a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a93a84b9e01d0dd5156be8d686e8666a6fc45a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a93a84b9e01d0dd5156be8d686e8666a6fc45a8"}], "stats": {"total": 43, "additions": 1, "deletions": 42}, "files": [{"sha": "6e2e561ed1231c53cb6837ff949712b0dfed81f4", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0fd62d0ff4d1e0648e11b650b4f449772663990/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0fd62d0ff4d1e0648e11b650b4f449772663990/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=d0fd62d0ff4d1e0648e11b650b4f449772663990", "patch": "@@ -4616,30 +4616,9 @@ namespace views::__adaptor\n \t}(make_index_sequence<sizeof...(_Vs)>{});\n     }\n \n-    friend constexpr bool\n-    operator<(const _Iterator& __x, const _Iterator& __y)\n-      requires __detail::__all_random_access<_Const, _Vs...>\n-    { return __x._M_current < __y._M_current; }\n-\n-    friend constexpr bool\n-    operator>(const _Iterator& __x, const _Iterator& __y)\n-      requires __detail::__all_random_access<_Const, _Vs...>\n-    { return __y < __x; }\n-\n-    friend constexpr bool\n-    operator<=(const _Iterator& __x, const _Iterator& __y)\n-      requires __detail::__all_random_access<_Const, _Vs...>\n-    { return !(__y < __x); }\n-\n-    friend constexpr bool\n-    operator>=(const _Iterator& __x, const _Iterator& __y)\n-      requires __detail::__all_random_access<_Const, _Vs...>\n-    { return !(__x < __y); }\n-\n     friend constexpr auto\n     operator<=>(const _Iterator& __x, const _Iterator& __y)\n       requires __detail::__all_random_access<_Const, _Vs...>\n-\t&& (three_way_comparable<iterator_t<__detail::__maybe_const_t<_Const, _Vs>>> && ...)\n     { return __x._M_current <=> __y._M_current; }\n \n     friend constexpr _Iterator\n@@ -5006,29 +4985,9 @@ namespace views::__adaptor\n       requires equality_comparable<__ziperator<_Const>>\n     { return __x._M_inner == __y._M_inner; }\n \n-    friend constexpr bool\n-    operator<(const _Iterator& __x, const _Iterator& __y)\n-      requires random_access_range<_Base<_Const>>\n-    { return __x._M_inner < __y._M_inner; }\n-\n-    friend constexpr bool\n-    operator>(const _Iterator& __x, const _Iterator& __y)\n-      requires random_access_range<_Base<_Const>>\n-    { return __x._M_inner > __y._M_inner; }\n-\n-    friend constexpr bool\n-    operator<=(const _Iterator& __x, const _Iterator& __y)\n-      requires random_access_range<_Base<_Const>>\n-    { return __x._M_inner <= __y._M_inner; }\n-\n-    friend constexpr bool\n-    operator>=(const _Iterator& __x, const _Iterator& __y)\n-      requires random_access_range<_Base<_Const>>\n-    { return __x._M_inner >= __y._M_inner; }\n-\n     friend constexpr auto\n     operator<=>(const _Iterator& __x, const _Iterator& __y)\n-      requires random_access_range<_Base<_Const>> && three_way_comparable<__ziperator<_Const>>\n+      requires random_access_range<_Base<_Const>>\n     { return __x._M_inner <=> __y._M_inner; }\n \n     friend constexpr _Iterator"}]}