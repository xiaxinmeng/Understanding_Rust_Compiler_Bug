{"sha": "1179ebc2fdab598b852c322b150b5e70ed557acc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE3OWViYzJmZGFiNTk4Yjg1MmMzMjJiMTUwYjVlNzBlZDU1N2FjYw==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "1998-12-10T11:24:46Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "1998-12-10T11:24:46Z"}, "message": "parse.y (array_initializer:): Array init operand is NULL_TREE instead of a TREE_LIST of NULL_TREEs when...\n\nThu Dec 10 11:02:49 1998  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\t* parse.y (array_initializer:): Array init operand is NULL_TREE\n \tinstead of a TREE_LIST of NULL_TREEs when parsing `{}'. `{,}' is\n \tnow an error. Fixed indentation problems.\n\t(patch_string): Handle error_mark_node as an argument.\n\t(patch_new_array_init): Fixed indentation problems.\n\t(array_constructor_check_entry): Removed check on null wfl_value.\n  \tReturn an error if wfl_value's walk returns an error.\nFixes and cleanups for array initializers.\n\nFrom-SVN: r24233", "tree": {"sha": "0f8a4eb3799002445ae0c945dd319618cc7467ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f8a4eb3799002445ae0c945dd319618cc7467ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1179ebc2fdab598b852c322b150b5e70ed557acc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1179ebc2fdab598b852c322b150b5e70ed557acc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1179ebc2fdab598b852c322b150b5e70ed557acc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1179ebc2fdab598b852c322b150b5e70ed557acc/comments", "author": null, "committer": null, "parents": [{"sha": "481ef9dd67e8794365eb0ade51bb2ecde4d469c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/481ef9dd67e8794365eb0ade51bb2ecde4d469c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/481ef9dd67e8794365eb0ade51bb2ecde4d469c9"}], "stats": {"total": 3083, "additions": 1547, "deletions": 1536}, "files": [{"sha": "f367ca2cc8a75fed10a764603ba92fa77627058c", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1179ebc2fdab598b852c322b150b5e70ed557acc/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1179ebc2fdab598b852c322b150b5e70ed557acc/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=1179ebc2fdab598b852c322b150b5e70ed557acc", "patch": "@@ -1,3 +1,13 @@\n+Thu Dec 10 11:02:49 1998  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* parse.y (array_initializer:): Array init operand is NULL_TREE\n+ \tinstead of a TREE_LIST of NULL_TREEs when parsing `{}'. `{,}' is\n+ \tnow an error. Fixed indentation problems.\n+\t(patch_string): Handle error_mark_node as an argument.\n+\t(patch_new_array_init): Fixed indentation problems.\n+\t(array_constructor_check_entry): Removed check on null wfl_value.\n+  \tReturn an error if wfl_value's walk returns an error.\n+\n Wed Dec  9 15:37:05 1998  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* java-tree.def (NEW_ARRAY_INIT): New Java tree code."}, {"sha": "ebc5a6ab5c6645e622d5f265b9d23053ad3459c4", "filename": "gcc/java/parse.c", "status": "modified", "additions": 1525, "deletions": 1515, "changes": 3040, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1179ebc2fdab598b852c322b150b5e70ed557acc/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1179ebc2fdab598b852c322b150b5e70ed557acc/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=1179ebc2fdab598b852c322b150b5e70ed557acc"}, {"sha": "a1a186acc8134f4dc6e3cf9ae197ef7e14ec8ad7", "filename": "gcc/java/parse.y", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1179ebc2fdab598b852c322b150b5e70ed557acc/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1179ebc2fdab598b852c322b150b5e70ed557acc/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=1179ebc2fdab598b852c322b150b5e70ed557acc", "patch": "@@ -1097,19 +1097,9 @@ abstract_method_declaration:\n /* 19.10 Productions from 10: Arrays  */\n array_initializer:\n \tOCB_TK CCB_TK\n-\t\t{ \n-\t\t  $$ = build_new_array_init \n-\t\t    ($1.location, \n-\t\t     tree_cons (NULL_TREE, NULL_TREE, NULL_TREE));\n-\t\t}\n+\t\t{ $$ = build_new_array_init ($1.location, NULL_TREE); }\n |\tOCB_TK variable_initializers CCB_TK\n \t\t{ $$ = build_new_array_init ($1.location, $2); }\n-|\tOCB_TK C_TK CCB_TK\n-\t\t{\n-\t\t  $$ = build_new_array_init \n-\t\t    ($1.location,\n-\t\t     tree_cons (NULL_TREE, NULL_TREE, NULL_TREE));\n-\t\t}\n |\tOCB_TK variable_initializers C_TK CCB_TK\n \t\t{ $$ = build_new_array_init ($1.location, $2); }\n ;\n@@ -1121,7 +1111,9 @@ variable_initializers:\n \t\t\t\t  $1, NULL_TREE);\n \t\t}\n |\tvariable_initializers C_TK variable_initializer\n-\t\t{ $$ = tree_cons (maybe_build_array_element_wfl ($3), $3, $1); }\n+\t\t{\n+\t\t  $$ = tree_cons (maybe_build_array_element_wfl ($3), $3, $1);\n+\t\t}\n |\tvariable_initializers C_TK error\n \t\t{yyerror (\"Missing term\"); RECOVER;}\n ;\n@@ -9147,6 +9139,8 @@ static tree\n patch_string (node)\n     tree node;\n {\n+  if (node == error_mark_node)\n+    return error_mark_node;\n   if (TREE_CODE (node) == STRING_CST)\n     return patch_string_cst (node);\n   else if (IS_CRAFTED_STRING_BUFFER_P (node))\n@@ -9752,10 +9746,10 @@ patch_new_array_init (type, node)\n      tree type, node;\n {\n   TREE_OPERAND (node, 0) =\n-      patch_array_constructor (type, TREE_OPERAND (node, 0));\n+    patch_array_constructor (type, TREE_OPERAND (node, 0));\n \n   if (TREE_OPERAND (node, 0) == error_mark_node)\n-      return error_mark_node;\n+    return error_mark_node;\n \n   TREE_TYPE (node) = TREE_TYPE (TREE_OPERAND (node, 0));\n   return node;\n@@ -9830,11 +9824,6 @@ array_constructor_check_entry (type, entry)\n   new_value = NULL_TREE;\n   wfl_value = TREE_VALUE (entry);\n \n-  /* NULL_TREE here means that we're creating an array of dimensions 0\n-     here. Probably needs a FIXME. */\n-  if (!wfl_value)\n-    return 0;\n-\n   /* If we have a TREE_LIST here, it means that we're specifying more\n      dimensions that we should. Report errors within the list. */\n   if (TREE_CODE (wfl_value) == NEW_ARRAY_INIT)\n@@ -9847,13 +9836,15 @@ array_constructor_check_entry (type, entry)\n     }\n   \n   value = java_complete_tree (TREE_VALUE (entry));\n+  /* patch_string return error_mark_node if arg is error_mark_node */\n   if ((patched = patch_string (value)))\n     value = patched;\n+  if (value == error_mark_node)\n+    return 1;\n   \n-  /* Check for errors here. FIXME */\n   type_value = TREE_TYPE (value);\n   \n-  /* At anytime, try_builtin_assignconv can report an warning on\n+  /* At anytime, try_builtin_assignconv can report a warning on\n      constant overflow during narrowing. */\n   SET_WFL_OPERATOR (wfl_operator, TREE_PURPOSE (entry), wfl_value);\n   new_value = try_builtin_assignconv (wfl_operator, type, value);"}]}