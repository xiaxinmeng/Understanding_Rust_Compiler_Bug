{"sha": "4c7aaebf4ddfac97a1c24373b0eb15ff8477fee7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM3YWFlYmY0ZGRmYWM5N2ExYzI0MzczYjBlYjE1ZmY4NDc3ZmVlNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-08-11T16:55:33Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-08-11T16:55:33Z"}, "message": "move.h (forward): Reinstate the N2835 version.\n\n2010-08-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/move.h (forward): Reinstate the N2835 version.\n\nFrom-SVN: r163101", "tree": {"sha": "6517ed2811fbb0ecfc106613557b0588feba0aae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6517ed2811fbb0ecfc106613557b0588feba0aae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c7aaebf4ddfac97a1c24373b0eb15ff8477fee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c7aaebf4ddfac97a1c24373b0eb15ff8477fee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c7aaebf4ddfac97a1c24373b0eb15ff8477fee7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c7aaebf4ddfac97a1c24373b0eb15ff8477fee7/comments", "author": null, "committer": null, "parents": [{"sha": "be94d007e60d246a60e90be3233d92d08b06d684", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be94d007e60d246a60e90be3233d92d08b06d684", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be94d007e60d246a60e90be3233d92d08b06d684"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "c0649d7a43c15bd5606f620e4640901940ddd295", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7aaebf4ddfac97a1c24373b0eb15ff8477fee7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7aaebf4ddfac97a1c24373b0eb15ff8477fee7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4c7aaebf4ddfac97a1c24373b0eb15ff8477fee7", "patch": "@@ -1,3 +1,7 @@\n+2010-08-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/move.h (forward): Reinstate the N2835 version.\n+\n 2010-08-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/42925"}, {"sha": "9329cb491db551763fc65a22e0c82bc1c343bdea", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7aaebf4ddfac97a1c24373b0eb15ff8477fee7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7aaebf4ddfac97a1c24373b0eb15ff8477fee7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=4c7aaebf4ddfac97a1c24373b0eb15ff8477fee7", "patch": "@@ -51,16 +51,29 @@ _GLIBCXX_END_NAMESPACE\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n   \n-  /// forward\n-  template<typename _Tp, typename _Up>\n-    inline typename\n-    enable_if<((std::is_convertible<\n-\t\ttypename std::remove_reference<_Up>::type*,\n-\t\ttypename std::remove_reference<_Tp>::type*>::value)\n-\t       && (!std::is_lvalue_reference<_Tp>::value\n-\t\t   || std::is_lvalue_reference<_Up>::value)), _Tp&&>::type\n-    forward(_Up&& __u)\n-    { return static_cast<_Tp&&>(__u); }\n+  /// forward (as per N2835)\n+  /// Forward lvalues as rvalues.\n+  template<typename _Tp>\n+    inline typename enable_if<!is_lvalue_reference<_Tp>::value, _Tp&&>::type\n+    forward(typename std::common_type<_Tp>::type& __t)\n+    { return static_cast<_Tp&&>(__t); }\n+\n+  /// Forward rvalues as rvalues.\n+  template<typename _Tp>\n+    inline typename enable_if<!is_lvalue_reference<_Tp>::value, _Tp&&>::type\n+    forward(typename std::common_type<_Tp>::type&& __t)\n+    { return static_cast<_Tp&&>(__t); }\n+\n+  // Forward lvalues as lvalues.\n+  template<typename _Tp>\n+    inline typename enable_if<is_lvalue_reference<_Tp>::value, _Tp>::type\n+    forward(typename std::common_type<_Tp>::type __t)\n+    { return __t; }\n+\n+  // Prevent forwarding rvalues as const lvalues.\n+  template<typename _Tp>\n+    inline typename enable_if<is_lvalue_reference<_Tp>::value, _Tp>::type\n+    forward(typename std::remove_reference<_Tp>::type&& __t) = delete;\n \n   /**\n    *  @brief Move a value."}]}