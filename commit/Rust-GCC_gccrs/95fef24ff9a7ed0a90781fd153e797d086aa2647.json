{"sha": "95fef24ff9a7ed0a90781fd153e797d086aa2647", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVmZWYyNGZmOWE3ZWQwYTkwNzgxZmQxNTNlNzk3ZDA4NmFhMjY0Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-23T10:29:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-23T10:29:50Z"}, "message": "[multiple changes]\n\n2015-10-23  Bob Duff  <duff@adacore.com>\n\n\t* exp_strm.adb (Build_Record_Or_Elementary_Input_Function): Use\n\tUnderlying_Type for B_Typ, in case the Typ is a subtype of a type with\n\tunknown discriminants.\n\t* g-awk.ads: Minor style fix in comment\n\n2015-10-23  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* debug.adb: Document the use of debug switch -gnatd.5.\n\t* einfo.adb: Code reformatting.\t(Is_Ghost_Entity): Moved from ghost.adb.\n\t* einfo.ads New synthesized attribute Is_Ghost_Enity along\n\twith usage in nodes and pragma Inline.\n\t(Is_Ghost_Entity: Moved from ghost.ads.\n\t* exp_ch3.adb Code reformatting.\n\t(Expand_Freeze_Array_Type): Capture, set and restore the Ghost mode.\n\t(Expand_Freeze_Class_Wide_Type): Capture, set and restore the\n\tGhost mode.\n\t(Expand_Freeze_Enumeration_Type): Capture, set and\n\trestore the Ghost mode.\n\t(Expand_Freeze_Record_Type): Capture, set and restore the Ghost mode.\n\t* exp_ch6.adb (Expand_Subprogram_Contract): Do not expand the\n\tcontract of an ignored Ghost subprogram.\n\t* exp_ch13.adb Add with and use clauses for Ghost.\n\t(Expand_N_Freeze_Entity): Capture, set and restore the Ghost mode.\n\t* exp_dbug.adb (Get_External_Name): Code reformatting. Add a\n\tspecial prefix for ignored Ghost entities or when requested by\n\t-gnatd.5 for any Ghost entity.\n\t* exp_dbug.ads Document the use of prefix \"_ghost_\" for ignored\n\tGhost entities.\n\t* exp_prag.adb (Expand_Pragma_Check): Capture, set and restore the\n\tGhost mode.\n\t(Expand_Pragma_Loop_Variant): Use In_Assertion_Expr\n\tto signal the original context.\n\t* ghost.adb (Check_Ghost_Overriding): Code cleanup.\n\t(Is_Ghost_Entity): Moved to einfo.adb.\t(Is_OK_Declaration):\n\tMove the assertion expression check to the outer level.\n\t(Is_OK_Ghost_Context): An assertion expression is a valid Ghost\n\tcontext.\n\t* ghost.ads (Is_Ghost_Entity): Moved to einfo.ads.\n\t* sem_ch3.adb (Analyze_Object_Contract): A source Ghost object\n\tcannot be imported or exported. Mark internally generated objects\n\tas Ghost when applicable.\n\t(Make_Class_Wide_Type): Inherit the ghostness of the root tagged type.\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Mark\n\ta stand alone subprogram body as Ghost when applicable.\n\t(Analyze_Subprogram_Declaration): Mark internally generated\n\tsubprograms as Ghost when applicable.\n\t* sem_ch7.adb: Code cleanup.\n\t* sem_ch13.adb (Add_Invariants): Add various formal\n\tparameters to break dependency on global variables.\n\t(Build_Invariant_Procedure): Code cleanup. Capture, set and\n\trestore the Ghost mode.\n\t* sem_res.adb (Resolve_Actuals): The actual parameter of a source\n\tGhost subprogram whose formal is of mode IN OUT or OUT must be\n\ta Ghost variable.\n\n2015-10-23  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch8.adb Code cleanup.\n\t(Find_Expanded_Name): Replace\n\tthe call to In_Pragmas_Depends_Or_Global with a call to\n\tIn_Abstract_View_Pragma.\n\t(In_Abstract_View_Pragma): New routine.\n\t(In_Pragmas_Depends_Or_Global): Removed.\n\t* sem_prag.adb (Analyze_Part_Of): Catch a case where indicator\n\tPart_Of denotes the abstract view of a variable.\n\nFrom-SVN: r229224", "tree": {"sha": "2a4be0b79d3f141cce4d13d50043a78f201a3374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a4be0b79d3f141cce4d13d50043a78f201a3374"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95fef24ff9a7ed0a90781fd153e797d086aa2647", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95fef24ff9a7ed0a90781fd153e797d086aa2647", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95fef24ff9a7ed0a90781fd153e797d086aa2647", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95fef24ff9a7ed0a90781fd153e797d086aa2647/comments", "author": null, "committer": null, "parents": [{"sha": "2e885093958b6f2d8383c929cd662cae87fe11fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e885093958b6f2d8383c929cd662cae87fe11fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e885093958b6f2d8383c929cd662cae87fe11fe"}], "stats": {"total": 4991, "additions": 2606, "deletions": 2385}, "files": [{"sha": "a8f16d8058429d26c60eb02fc3f01f5275b88f60", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=95fef24ff9a7ed0a90781fd153e797d086aa2647", "patch": "@@ -1,3 +1,71 @@\n+2015-10-23  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_strm.adb (Build_Record_Or_Elementary_Input_Function): Use\n+\tUnderlying_Type for B_Typ, in case the Typ is a subtype of a type with\n+\tunknown discriminants.\n+\t* g-awk.ads: Minor style fix in comment\n+\n+2015-10-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* debug.adb: Document the use of debug switch -gnatd.5.\n+\t* einfo.adb: Code reformatting.\t(Is_Ghost_Entity): Moved from ghost.adb.\n+\t* einfo.ads New synthesized attribute Is_Ghost_Enity along\n+\twith usage in nodes and pragma Inline.\n+\t(Is_Ghost_Entity: Moved from ghost.ads.\n+\t* exp_ch3.adb Code reformatting.\n+\t(Expand_Freeze_Array_Type): Capture, set and restore the Ghost mode.\n+\t(Expand_Freeze_Class_Wide_Type): Capture, set and restore the\n+\tGhost mode.\n+\t(Expand_Freeze_Enumeration_Type): Capture, set and\n+\trestore the Ghost mode.\n+\t(Expand_Freeze_Record_Type): Capture, set and restore the Ghost mode.\n+\t* exp_ch6.adb (Expand_Subprogram_Contract): Do not expand the\n+\tcontract of an ignored Ghost subprogram.\n+\t* exp_ch13.adb Add with and use clauses for Ghost.\n+\t(Expand_N_Freeze_Entity): Capture, set and restore the Ghost mode.\n+\t* exp_dbug.adb (Get_External_Name): Code reformatting. Add a\n+\tspecial prefix for ignored Ghost entities or when requested by\n+\t-gnatd.5 for any Ghost entity.\n+\t* exp_dbug.ads Document the use of prefix \"_ghost_\" for ignored\n+\tGhost entities.\n+\t* exp_prag.adb (Expand_Pragma_Check): Capture, set and restore the\n+\tGhost mode.\n+\t(Expand_Pragma_Loop_Variant): Use In_Assertion_Expr\n+\tto signal the original context.\n+\t* ghost.adb (Check_Ghost_Overriding): Code cleanup.\n+\t(Is_Ghost_Entity): Moved to einfo.adb.\t(Is_OK_Declaration):\n+\tMove the assertion expression check to the outer level.\n+\t(Is_OK_Ghost_Context): An assertion expression is a valid Ghost\n+\tcontext.\n+\t* ghost.ads (Is_Ghost_Entity): Moved to einfo.ads.\n+\t* sem_ch3.adb (Analyze_Object_Contract): A source Ghost object\n+\tcannot be imported or exported. Mark internally generated objects\n+\tas Ghost when applicable.\n+\t(Make_Class_Wide_Type): Inherit the ghostness of the root tagged type.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Mark\n+\ta stand alone subprogram body as Ghost when applicable.\n+\t(Analyze_Subprogram_Declaration): Mark internally generated\n+\tsubprograms as Ghost when applicable.\n+\t* sem_ch7.adb: Code cleanup.\n+\t* sem_ch13.adb (Add_Invariants): Add various formal\n+\tparameters to break dependency on global variables.\n+\t(Build_Invariant_Procedure): Code cleanup. Capture, set and\n+\trestore the Ghost mode.\n+\t* sem_res.adb (Resolve_Actuals): The actual parameter of a source\n+\tGhost subprogram whose formal is of mode IN OUT or OUT must be\n+\ta Ghost variable.\n+\n+2015-10-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch8.adb Code cleanup.\n+\t(Find_Expanded_Name): Replace\n+\tthe call to In_Pragmas_Depends_Or_Global with a call to\n+\tIn_Abstract_View_Pragma.\n+\t(In_Abstract_View_Pragma): New routine.\n+\t(In_Pragmas_Depends_Or_Global): Removed.\n+\t* sem_prag.adb (Analyze_Part_Of): Catch a case where indicator\n+\tPart_Of denotes the abstract view of a variable.\n+\n 2015-10-23  Arnaud Charlet  <charlet@adacore.com>\n \n \t* sem_util.ads (Unique_Defining_Entity): Document the result"}, {"sha": "68cca0c43c164cd44d0cfabc904c27e902e6986a", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=95fef24ff9a7ed0a90781fd153e797d086aa2647", "patch": "@@ -159,7 +159,7 @@ package body Debug is\n    --  d.2  Allow statements in declarative part\n    --  d.3  Output debugging information from Exp_Unst\n    --  d.4\n-   --  d.5\n+   --  d.5  Generate Ghost external sumbols regardless of Ghost policy\n    --  d.6\n    --  d.7\n    --  d.8\n@@ -762,6 +762,12 @@ package body Debug is\n    --  d.3  Output debugging information from Exp_Unst, including the name of\n    --       any unreachable subprograms that get deleted.\n \n+   --  d.5  Generate specialized external symbols for Ghost entities where the\n+   --       name of the entity is prefixed by \"_ghost_\" regardless of whether\n+   --       the Ghost policy is Check or Ignore. WARNING: This switch may cause\n+   --       linking issues related to Ghost entities declared with Ghost policy\n+   --       Check.\n+\n    ------------------------------------------\n    -- Documentation for Binder Debug Flags --\n    ------------------------------------------"}, {"sha": "1572a9a794e7fc577de307e482e20502f74c3376", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=95fef24ff9a7ed0a90781fd153e797d086aa2647", "patch": "@@ -3399,8 +3399,7 @@ package body Einfo is\n \n    function Is_Concurrent_Body                  (Id : E) return B is\n    begin\n-      return Ekind (Id) in\n-        Concurrent_Body_Kind;\n+      return Ekind (Id) in Concurrent_Body_Kind;\n    end Is_Concurrent_Body;\n \n    function Is_Concurrent_Record_Type           (Id : E) return B is\n@@ -3415,8 +3414,7 @@ package body Einfo is\n \n    function Is_Decimal_Fixed_Point_Type         (Id : E) return B is\n    begin\n-      return Ekind (Id) in\n-        Decimal_Fixed_Point_Kind;\n+      return Ekind (Id) in Decimal_Fixed_Point_Kind;\n    end Is_Decimal_Fixed_Point_Type;\n \n    function Is_Digits_Type                      (Id : E) return B is\n@@ -3446,14 +3444,12 @@ package body Einfo is\n \n    function Is_Enumeration_Type                 (Id : E) return B is\n    begin\n-      return Ekind (Id) in\n-        Enumeration_Kind;\n+      return Ekind (Id) in Enumeration_Kind;\n    end Is_Enumeration_Type;\n \n    function Is_Fixed_Point_Type                 (Id : E) return B is\n    begin\n-      return Ekind (Id) in\n-        Fixed_Point_Kind;\n+      return Ekind (Id) in Fixed_Point_Kind;\n    end Is_Fixed_Point_Type;\n \n    function Is_Floating_Point_Type              (Id : E) return B is\n@@ -3481,16 +3477,19 @@ package body Einfo is\n       return Ekind (Id) in Generic_Unit_Kind;\n    end Is_Generic_Unit;\n \n+   function Is_Ghost_Entity (Id : Entity_Id) return Boolean is\n+   begin\n+      return Is_Checked_Ghost_Entity (Id) or else Is_Ignored_Ghost_Entity (Id);\n+   end Is_Ghost_Entity;\n+\n    function Is_Incomplete_Or_Private_Type       (Id : E) return B is\n    begin\n-      return Ekind (Id) in\n-        Incomplete_Or_Private_Kind;\n+      return Ekind (Id) in Incomplete_Or_Private_Kind;\n    end Is_Incomplete_Or_Private_Type;\n \n    function Is_Incomplete_Type                  (Id : E) return B is\n    begin\n-      return Ekind (Id) in\n-        Incomplete_Kind;\n+      return Ekind (Id) in Incomplete_Kind;\n    end Is_Incomplete_Type;\n \n    function Is_Integer_Type                     (Id : E) return B is\n@@ -3500,8 +3499,7 @@ package body Einfo is\n \n    function Is_Modular_Integer_Type             (Id : E) return B is\n    begin\n-      return Ekind (Id) in\n-        Modular_Integer_Kind;\n+      return Ekind (Id) in Modular_Integer_Kind;\n    end Is_Modular_Integer_Type;\n \n    function Is_Named_Number                     (Id : E) return B is\n@@ -3521,8 +3519,7 @@ package body Einfo is\n \n    function Is_Ordinary_Fixed_Point_Type        (Id : E) return B is\n    begin\n-      return Ekind (Id) in\n-        Ordinary_Fixed_Point_Kind;\n+      return Ekind (Id) in Ordinary_Fixed_Point_Kind;\n    end Is_Ordinary_Fixed_Point_Type;\n \n    function Is_Overloadable                     (Id : E) return B is"}, {"sha": "1426c4fccb822bd0b4512480eb089ce29b434903", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=95fef24ff9a7ed0a90781fd153e797d086aa2647", "patch": "@@ -2502,6 +2502,13 @@ package Einfo is\n --       package, generic function, generic procedure), and False for all\n --       other entities.\n \n+--    Is_Ghost_Entity (synthesized)\n+--       Applies to all entities. Yields True for abstract states, [generic]\n+--       packages, [generic] subprograms, components, discriminants, formal\n+--       parameters, objects, package bodies, subprogram bodies, and [sub]types\n+--       subject to pragma Ghost or those that inherit the Ghost propery from\n+--       an enclosing construct.\n+\n --    Is_Hidden (Flag57)\n --       Defined in all entities. Set for all entities declared in the\n --       private part or body of a package. Also marks generic formals of a\n@@ -5384,6 +5391,7 @@ package Einfo is\n    --    Declaration_Node                    (synth)\n    --    Has_Foreign_Convention              (synth)\n    --    Is_Dynamic_Scope                    (synth)\n+   --    Is_Ghost_Entity                     (synth)\n    --    Is_Standard_Character_Type          (synth)\n    --    Is_Standard_String_Type             (synth)\n    --    Underlying_Type                     (synth)\n@@ -7158,9 +7166,10 @@ package Einfo is\n    function Is_Formal_Subprogram                (Id : E) return B;\n    function Is_Generic_Actual_Subprogram        (Id : E) return B;\n    function Is_Generic_Actual_Type              (Id : E) return B;\n-   function Is_Generic_Unit                     (Id : E) return B;\n-   function Is_Generic_Type                     (Id : E) return B;\n    function Is_Generic_Subprogram               (Id : E) return B;\n+   function Is_Generic_Type                     (Id : E) return B;\n+   function Is_Generic_Unit                     (Id : E) return B;\n+   function Is_Ghost_Entity                     (Id : E) return B;\n    function Is_Incomplete_Or_Private_Type       (Id : E) return B;\n    function Is_Incomplete_Type                  (Id : E) return B;\n    function Is_Integer_Type                     (Id : E) return B;\n@@ -8380,6 +8389,7 @@ package Einfo is\n    pragma Inline (Is_Generic_Subprogram);\n    pragma Inline (Is_Generic_Type);\n    pragma Inline (Is_Generic_Unit);\n+   pragma Inline (Is_Ghost_Entity);\n    pragma Inline (Is_Hidden);\n    pragma Inline (Is_Hidden_Non_Overridden_Subpgm);\n    pragma Inline (Is_Hidden_Open_Scope);"}, {"sha": "11e75f37b8bd2a6f9d84ef22686be464f9997d16", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=95fef24ff9a7ed0a90781fd153e797d086aa2647", "patch": "@@ -32,6 +32,7 @@ with Exp_Imgv; use Exp_Imgv;\n with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n with Freeze;   use Freeze;\n+with Ghost;    use Ghost;\n with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n@@ -361,14 +362,21 @@ package body Exp_Ch13 is\n    ----------------------------\n \n    procedure Expand_N_Freeze_Entity (N : Node_Id) is\n-      E              : constant Entity_Id := Entity (N);\n+      E : constant Entity_Id := Entity (N);\n+\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n+\n+      Decl           : Node_Id;\n+      Delete         : Boolean := False;\n       E_Scope        : Entity_Id;\n       In_Other_Scope : Boolean;\n       In_Outer_Scope : Boolean;\n-      Decl           : Node_Id;\n-      Delete         : Boolean := False;\n \n    begin\n+      --  Ensure that all freezing activities are properly flagged as Ghost\n+\n+      Set_Ghost_Mode_From_Entity (E);\n+\n       --  If there are delayed aspect specifications, we insert them just\n       --  before the freeze node. They are already analyzed so we don't need\n       --  to reanalyze them (they were analyzed before the type was frozen),\n@@ -436,13 +444,14 @@ package body Exp_Ch13 is\n          --  statement, insert them back into the tree now.\n \n          Explode_Initialization_Compound_Statement (E);\n-\n+         Ghost_Mode := Save_Ghost_Mode;\n          return;\n \n       --  Only other items requiring any front end action are types and\n       --  subprograms.\n \n       elsif not Is_Type (E) and then not Is_Subprogram (E) then\n+         Ghost_Mode := Save_Ghost_Mode;\n          return;\n       end if;\n \n@@ -454,6 +463,7 @@ package body Exp_Ch13 is\n \n       if No (E_Scope) then\n          Check_Error_Detected;\n+         Ghost_Mode := Save_Ghost_Mode;\n          return;\n       end if;\n \n@@ -671,6 +681,7 @@ package body Exp_Ch13 is\n       --  whether we are inside a (possibly nested) call to this procedure.\n \n       Inside_Freezing_Actions := Inside_Freezing_Actions - 1;\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Expand_N_Freeze_Entity;\n \n    -------------------------------------------"}, {"sha": "57104b3d33c4bb249d1f5051196cc4397c48bde9", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 2221, "deletions": 2189, "changes": 4410, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=95fef24ff9a7ed0a90781fd153e797d086aa2647"}, {"sha": "2688e2e516f620f01920baa6ff85311a98d8f73e", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=95fef24ff9a7ed0a90781fd153e797d086aa2647", "patch": "@@ -7766,6 +7766,12 @@ package body Exp_Ch6 is\n \n       elsif not Has_Significant_Contract (Subp_Id) then\n          return;\n+\n+      --  The contract of an ignored Ghost subprogram does not need expansion\n+      --  because the subprogram and all calls to it will be removed.\n+\n+      elsif Is_Ignored_Ghost_Entity (Subp_Id) then\n+         return;\n       end if;\n \n       --  Do not re-expand the same contract. This scenario occurs when a"}, {"sha": "2775cef92d901edffc129b2b485ac6fd0c4883db", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=95fef24ff9a7ed0a90781fd153e797d086aa2647", "patch": "@@ -575,9 +575,7 @@ package body Exp_Dbug is\n \n       --  Couldn't we just test Original_Operating_Mode here? ???\n \n-      if Operating_Mode /= Generate_Code\n-        and then not Generating_Code\n-      then\n+      if Operating_Mode /= Generate_Code and then not Generating_Code then\n          return;\n       end if;\n \n@@ -641,11 +639,11 @@ package body Exp_Dbug is\n \n             Lo_Discr : constant Boolean :=\n                          Nkind (Lo) = N_Identifier\n-                          and then Ekind (Entity (Lo)) = E_Discriminant;\n+                           and then Ekind (Entity (Lo)) = E_Discriminant;\n \n             Hi_Discr : constant Boolean :=\n                          Nkind (Hi) = N_Identifier\n-                          and then Ekind (Entity (Hi)) = E_Discriminant;\n+                           and then Ekind (Entity (Hi)) = E_Discriminant;\n \n             Lo_Encode : constant Boolean := Lo_Con or Lo_Discr;\n             Hi_Encode : constant Boolean := Hi_Con or Hi_Discr;\n@@ -717,11 +715,8 @@ package body Exp_Dbug is\n    procedure Get_External_Name\n      (Entity     : Entity_Id;\n       Has_Suffix : Boolean := False;\n-      Suffix     : String := \"\")\n+      Suffix     : String  := \"\")\n    is\n-      E    : Entity_Id := Entity;\n-      Kind : Entity_Kind;\n-\n       procedure Get_Qualified_Name_And_Append (Entity : Entity_Id);\n       --  Appends fully qualified name of given entity to Name_Buffer\n \n@@ -752,6 +747,10 @@ package body Exp_Dbug is\n          end if;\n       end Get_Qualified_Name_And_Append;\n \n+      --  Local variables\n+\n+      E : Entity_Id := Entity;\n+\n    --  Start of processing for Get_External_Name\n \n    begin\n@@ -777,15 +776,25 @@ package body Exp_Dbug is\n          E := Defining_Identifier (Entity);\n       end if;\n \n-      Kind := Ekind (E);\n+      --  Add a special prefix to distinguish ignored Ghost entities. These\n+      --  entities should not leak in the \"living\" space and they should be\n+      --  removed by the compiler in a post-processing pass. The prefix is\n+      --  also added to any kind of Ghost entity when switch -gnatd.5 is\n+      --  enabled.\n+\n+      if Is_Ignored_Ghost_Entity (E)\n+        or else (Debug_Flag_Dot_5 and Is_Ghost_Entity (E))\n+      then\n+         Add_Str_To_Name_Buffer (\"_ghost_\");\n+      end if;\n \n       --  Case of interface name being used\n \n-      if (Kind = E_Procedure or else\n-          Kind = E_Function  or else\n-          Kind = E_Constant  or else\n-          Kind = E_Variable  or else\n-          Kind = E_Exception)\n+      if Ekind_In (E, E_Constant,\n+                      E_Exception,\n+                      E_Function,\n+                      E_Procedure,\n+                      E_Variable)\n         and then Present (Interface_Name (E))\n         and then No (Address_Clause (E))\n         and then not Has_Suffix\n@@ -816,9 +825,7 @@ package body Exp_Dbug is\n          if Is_Generic_Instance (E)\n            and then Is_Subprogram (E)\n            and then not Is_Compilation_Unit (Scope (E))\n-           and then (Ekind (Scope (E)) = E_Package\n-                      or else\n-                     Ekind (Scope (E)) = E_Package_Body)\n+           and then Ekind_In (Scope (E), E_Package, E_Package_Body)\n            and then Present (Related_Instance (Scope (E)))\n          then\n             E := Related_Instance (Scope (E));"}, {"sha": "0cca78513254ec33a45d863ae100a03f83d358c1", "filename": "gcc/ada/exp_dbug.ads", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fexp_dbug.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fexp_dbug.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.ads?ref=95fef24ff9a7ed0a90781fd153e797d086aa2647", "patch": "@@ -76,6 +76,12 @@ package Exp_Dbug is\n    --  qualification for such entities. In particular this means that direct\n    --  local variables of a procedure are not qualified.\n \n+   --  For ignored Ghost entities, the encoding adds a prefix \"_ghost_\" to aid\n+   --  the detection of leaks in the \"living\" space. Ignored Ghost entities and\n+   --  any code associated with them should be removed by the compiler in a\n+   --  post-processing pass. As a result, object files should not contain any\n+   --  occurrences of this prefix.\n+\n    --  As an example of the local name convention, consider a procedure V.W\n    --  with a local variable X, and a nested block Y containing an entity Z.\n    --  The fully qualified names of the entities X and Z are:\n@@ -414,7 +420,7 @@ package Exp_Dbug is\n    procedure Get_External_Name\n      (Entity     : Entity_Id;\n       Has_Suffix : Boolean := False;\n-      Suffix     : String := \"\");\n+      Suffix     : String  := \"\");\n    --  Set Name_Buffer and Name_Len to the external name of the entity. The\n    --  external name is the Interface_Name, if specified, unless the entity\n    --  has an address clause or Has_Suffix is true.\n@@ -1185,8 +1191,7 @@ package Exp_Dbug is\n \n    function Make_Packed_Array_Impl_Type_Name\n      (Typ   : Entity_Id;\n-      Csize : Uint)\n-      return  Name_Id;\n+      Csize : Uint) return Name_Id;\n    --  This function is used in Exp_Pakd to create the name that is encoded as\n    --  described above. The entity Typ provides the name ttt, and the value\n    --  Csize is the component size that provides the nnn value."}, {"sha": "62aa80da0058b57c2ad6630c8fecb85208648314", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=95fef24ff9a7ed0a90781fd153e797d086aa2647", "patch": "@@ -321,13 +321,22 @@ package body Exp_Prag is\n       --  Assert_Failure, so that coverage analysis tools can relate the\n       --  call to the failed check.\n \n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n+\n    begin\n       --  Nothing to do if pragma is ignored\n \n       if Is_Ignored (N) then\n          return;\n       end if;\n \n+      --  Pragmas Assert, Assert_And_Cut, Assume, Check and Loop_Invariant are\n+      --  Ghost when they apply to a Ghost entity. Set the mode now to ensure\n+      --  that any nodes generated during expansion are properly flagged as\n+      --  Ghost.\n+\n+      Set_Ghost_Mode (N);\n+\n       --  Since this check is active, we rewrite the pragma into a\n       --  corresponding if statement, and then analyze the statement.\n \n@@ -482,7 +491,7 @@ package body Exp_Prag is\n          if Is_Entity_Name (Original_Node (Cond))\n            and then Entity (Original_Node (Cond)) = Standard_False\n          then\n-            return;\n+            null;\n \n          elsif Nam = Name_Assert then\n             Error_Msg_N (\"?A?assertion will fail at run time\", N);\n@@ -491,6 +500,8 @@ package body Exp_Prag is\n             Error_Msg_N (\"?A?check will fail at run time\", N);\n          end if;\n       end if;\n+\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Expand_Pragma_Check;\n \n    ---------------------------------\n@@ -1806,6 +1817,14 @@ package body Exp_Prag is\n \n       Set_Ghost_Mode (N);\n \n+      --  The expansion of Loop_Variant is quite distributed as it produces\n+      --  various statements to capture and compare the arguments. To preserve\n+      --  the original context, set the Is_Assertion_Expr flag. This aids the\n+      --  Ghost legality checks when verifying the placement of a reference to\n+      --  a Ghost entity.\n+\n+      In_Assertion_Expr := In_Assertion_Expr + 1;\n+\n       --  Locate the enclosing loop for which this assertion applies. In the\n       --  case of Ada 2012 array iteration, we might be dealing with nested\n       --  loops. Only the outermost loop has an identifier.\n@@ -1867,6 +1886,7 @@ package body Exp_Prag is\n       --  corresponding declarations and statements. We leave it in the tree\n       --  for documentation purposes. It will be ignored by the backend.\n \n+      In_Assertion_Expr := In_Assertion_Expr - 1;\n       Ghost_Mode := Save_Ghost_Mode;\n    end Expand_Pragma_Loop_Variant;\n "}, {"sha": "88de827a90dbe91af903b9a35e25cd09946e73b8", "filename": "gcc/ada/exp_strm.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fexp_strm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fexp_strm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.adb?ref=95fef24ff9a7ed0a90781fd153e797d086aa2647", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1121,7 +1121,7 @@ package body Exp_Strm is\n       Decl : out Node_Id;\n       Fnam : out Entity_Id)\n    is\n-      B_Typ      : constant Entity_Id := Base_Type (Typ);\n+      B_Typ      : constant Entity_Id := Underlying_Type (Base_Type (Typ));\n       Cn         : Name_Id;\n       Constr     : List_Id;\n       Decls      : List_Id;"}, {"sha": "c52403e5ddf85ccf7b2e91aa943e435a4d8ac79e", "filename": "gcc/ada/g-awk.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fg-awk.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fg-awk.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-awk.ads?ref=95fef24ff9a7ed0a90781fd153e797d086aa2647", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2000-2011, AdaCore                     --\n+--                     Copyright (C) 2000-2015, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -465,7 +465,7 @@ package GNAT.AWK is\n       Pattern : GNAT.Regpat.Pattern_Matcher;\n       Action  : Match_Action_Callback);\n    --  Same as above but it pass the set of matches to the action\n-   --  procedure. This is useful to analyse further why and where a regular\n+   --  procedure. This is useful to analyze further why and where a regular\n    --  expression did match.\n \n    procedure Register"}, {"sha": "cabcc2b32ceb33733ba66ae7e3dd9c55ec01dbcd", "filename": "gcc/ada/ghost.adb", "status": "modified", "additions": 33, "deletions": 44, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fghost.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fghost.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.adb?ref=95fef24ff9a7ed0a90781fd153e797d086aa2647", "patch": "@@ -229,11 +229,6 @@ package body Ghost is\n \n                elsif Is_Subject_To_Ghost (Decl) then\n                   return True;\n-\n-               --  The declaration appears within an assertion expression\n-\n-               elsif In_Assertion_Expr > 0 then\n-                  return True;\n                end if;\n \n             --  Special cases\n@@ -338,13 +333,13 @@ package body Ghost is\n                if Is_Ghost_Pragma (Prag) then\n                   return True;\n \n-               --  An assertion expression is a Ghost pragma when it contains a\n+               --  An assertion expression pragma is Ghost when it contains a\n                --  reference to a Ghost entity (SPARK RM 6.9(11)).\n \n                elsif Assertion_Expression_Pragma (Prag_Id) then\n \n                   --  Predicates are excluded from this category when they do\n-                  --  not apply to a Ghost subtype (SPARK RM 6.9(12)).\n+                  --  not apply to a Ghost subtype (SPARK RM 6.9(11)).\n \n                   if Nam_In (Prag_Nam, Name_Dynamic_Predicate,\n                                        Name_Predicate,\n@@ -413,27 +408,17 @@ package body Ghost is\n \n             --  Special cases\n \n-            elsif Nkind (Stmt) = N_If_Statement then\n-\n-               --  An if statement is a suitable context for a Ghost entity if\n-               --  it is the byproduct of assertion expression expansion. Note\n-               --  that the assertion expression may not be related to a Ghost\n-               --  entity, but it may still contain references to Ghost\n-               --  entities.\n-\n-               if Nkind (Original_Node (Stmt)) = N_Pragma\n-                 and then Assertion_Expression_Pragma\n-                            (Get_Pragma_Id (Original_Node (Stmt)))\n-               then\n-                  return True;\n-\n-               --  The expansion of pragma Contract_Cases produces various if\n-               --  statements to evaluate all case guards. This is a suitable\n-               --  context as Contract_Cases is an assertion expression.\n+            --  An if statement is a suitable context for a Ghost entity if it\n+            --  is the byproduct of assertion expression expansion. Note that\n+            --  the assertion expression may not be related to a Ghost entity,\n+            --  but it may still contain references to Ghost entities.\n \n-               elsif In_Assertion_Expr > 0 then\n-                  return True;\n-               end if;\n+            elsif Nkind (Stmt) = N_If_Statement\n+              and then Nkind (Original_Node (Stmt)) = N_Pragma\n+              and then Assertion_Expression_Pragma\n+                         (Get_Pragma_Id (Original_Node (Stmt)))\n+            then\n+               return True;\n             end if;\n \n             return False;\n@@ -487,13 +472,26 @@ package body Ghost is\n                --  Prevent the search from going too far\n \n                elsif Is_Body_Or_Package_Declaration (Par) then\n-                  return False;\n+                  exit;\n                end if;\n \n                Par := Parent (Par);\n             end loop;\n \n-            return False;\n+            --  The expansion of assertion expression pragmas and attribute Old\n+            --  may cause a legal Ghost entity reference to become illegal due\n+            --  to node relocation. Check the In_Assertion_Expr counter as last\n+            --  resort to try and infer the original legal context.\n+\n+            if In_Assertion_Expr > 0 then\n+               return True;\n+\n+            --  Otherwise the context is not suitable for a reference to a\n+            --  Ghost entity.\n+\n+            else\n+               return False;\n+            end if;\n          end if;\n       end Is_OK_Ghost_Context;\n \n@@ -592,32 +590,32 @@ package body Ghost is\n      (Subp            : Entity_Id;\n       Overridden_Subp : Entity_Id)\n    is\n-      Par_Subp : Entity_Id;\n+      Over_Subp : Entity_Id;\n \n    begin\n       if Present (Subp) and then Present (Overridden_Subp) then\n-         Par_Subp := Ultimate_Alias (Overridden_Subp);\n+         Over_Subp := Ultimate_Alias (Overridden_Subp);\n \n          --  The Ghost policy in effect at the point of declaration of a parent\n          --  and an overriding subprogram must match (SPARK RM 6.9(17)).\n \n-         if Is_Checked_Ghost_Entity (Par_Subp)\n+         if Is_Checked_Ghost_Entity (Over_Subp)\n            and then Is_Ignored_Ghost_Entity (Subp)\n          then\n             Error_Msg_N (\"incompatible ghost policies in effect\",    Subp);\n \n-            Error_Msg_Sloc := Sloc (Par_Subp);\n+            Error_Msg_Sloc := Sloc (Over_Subp);\n             Error_Msg_N (\"\\& declared # with ghost policy `Check`\",  Subp);\n \n             Error_Msg_Sloc := Sloc (Subp);\n             Error_Msg_N (\"\\overridden # with ghost policy `Ignore`\", Subp);\n \n-         elsif Is_Ignored_Ghost_Entity (Par_Subp)\n+         elsif Is_Ignored_Ghost_Entity (Over_Subp)\n            and then Is_Checked_Ghost_Entity (Subp)\n          then\n             Error_Msg_N (\"incompatible ghost policies in effect\",    Subp);\n \n-            Error_Msg_Sloc := Sloc (Par_Subp);\n+            Error_Msg_Sloc := Sloc (Over_Subp);\n             Error_Msg_N (\"\\& declared # with ghost policy `Ignore`\", Subp);\n \n             Error_Msg_Sloc := Sloc (Subp);\n@@ -686,15 +684,6 @@ package body Ghost is\n       Ignored_Ghost_Units.Init;\n    end Initialize;\n \n-   ---------------------\n-   -- Is_Ghost_Entity --\n-   ---------------------\n-\n-   function Is_Ghost_Entity (Id : Entity_Id) return Boolean is\n-   begin\n-      return Is_Checked_Ghost_Entity (Id) or else Is_Ignored_Ghost_Entity (Id);\n-   end Is_Ghost_Entity;\n-\n    -------------------------\n    -- Is_Subject_To_Ghost --\n    -------------------------"}, {"sha": "3dbe5026aea4615e17d76d053fffd02aa8213ff6", "filename": "gcc/ada/ghost.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fghost.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fghost.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.ads?ref=95fef24ff9a7ed0a90781fd153e797d086aa2647", "patch": "@@ -62,10 +62,6 @@ package Ghost is\n    procedure Initialize;\n    --  Initialize internal tables\n \n-   function Is_Ghost_Entity (Id : Entity_Id) return Boolean;\n-   --  Determine whether entity Id is Ghost. To qualify as such, the entity\n-   --  must be subject to pragma Ghost.\n-\n    procedure Lock;\n    --  Lock internal tables before calling backend\n "}, {"sha": "8b1287c1ef9405d27469fc89eb08528bf6b65fe0", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 59, "deletions": 29, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=95fef24ff9a7ed0a90781fd153e797d086aa2647", "patch": "@@ -7836,7 +7836,7 @@ package body Sem_Ch13 is\n       end if;\n \n       --  The related type may be subject to pragma Ghost. Set the mode now to\n-      --  ensure that the predicate functions are properly marked as Ghost.\n+      --  ensure that the invariant procedure is properly marked as Ghost.\n \n       Set_Ghost_Mode_From_Entity (Typ);\n \n@@ -7889,23 +7889,11 @@ package body Sem_Ch13 is\n    --  end typInvariant;\n \n    procedure Build_Invariant_Procedure (Typ : Entity_Id; N : Node_Id) is\n-      Priv_Decls : constant List_Id := Private_Declarations (N);\n-      Vis_Decls  : constant List_Id := Visible_Declarations (N);\n-\n-      Loc   : constant Source_Ptr := Sloc (Typ);\n-      Stmts : List_Id;\n-      Spec  : Node_Id;\n-      SId   : Entity_Id;\n-      PDecl : Node_Id;\n-      PBody : Node_Id;\n-\n-      Object_Entity : Node_Id;\n-      --  The entity of the formal for the procedure\n-\n-      Object_Name : Name_Id;\n-      --  Name for argument of invariant procedure\n-\n-      procedure Add_Invariants (T : Entity_Id; Inherit : Boolean);\n+      procedure Add_Invariants\n+        (T       : Entity_Id;\n+         Obj_Id  : Entity_Id;\n+         Stmts   : in out List_Id;\n+         Inherit : Boolean);\n       --  Appends statements to Stmts for any invariants in the rep item chain\n       --  of the given type. If Inherit is False, then we only process entries\n       --  on the chain for the type Typ. If Inherit is True, then we ignore any\n@@ -7917,7 +7905,12 @@ package body Sem_Ch13 is\n       -- Add_Invariants --\n       --------------------\n \n-      procedure Add_Invariants (T : Entity_Id; Inherit : Boolean) is\n+      procedure Add_Invariants\n+        (T       : Entity_Id;\n+         Obj_Id  : Entity_Id;\n+         Stmts   : in out List_Id;\n+         Inherit : Boolean)\n+      is\n          procedure Add_Invariant (Prag : Node_Id);\n          --  Create a runtime check to verify the exression of invariant pragma\n          --  Prag. All generated code is added to list Stmts.\n@@ -7988,17 +7981,18 @@ package body Sem_Ch13 is\n                            Make_Attribute_Reference (Nloc,\n                              Prefix         => New_Occurrence_Of (T, Nloc),\n                              Attribute_Name => Name_Class),\n-                         Expression   => Make_Identifier (Nloc, Object_Name)));\n+                         Expression   =>\n+                           Make_Identifier (Nloc, Chars (Obj_Id))));\n \n-                     Set_Entity (Expression (N), Object_Entity);\n+                     Set_Entity (Expression (N), Obj_Id);\n                      Set_Etype  (Expression (N), Typ);\n                   end if;\n \n                --  Invariant, replace with obj\n \n                else\n-                  Rewrite (N, Make_Identifier (Nloc, Object_Name));\n-                  Set_Entity (N, Object_Entity);\n+                  Rewrite (N, Make_Identifier (Nloc, Chars (Obj_Id)));\n+                  Set_Entity (N, Obj_Id);\n                   Set_Etype  (N, Typ);\n                end if;\n \n@@ -8190,9 +8184,31 @@ package body Sem_Ch13 is\n          end loop;\n       end Add_Invariants;\n \n+      --  Local variables\n+\n+      Loc        : constant Source_Ptr := Sloc (Typ);\n+      Priv_Decls : constant List_Id    := Private_Declarations (N);\n+      Vis_Decls  : constant List_Id    := Visible_Declarations (N);\n+\n+      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n+\n+      PBody : Node_Id;\n+      PDecl : Node_Id;\n+      SId   : Entity_Id;\n+      Spec  : Node_Id;\n+      Stmts : List_Id;\n+\n+      Obj_Id : Node_Id;\n+      --  The entity of the formal for the procedure\n+\n    --  Start of processing for Build_Invariant_Procedure\n \n    begin\n+      --  The related type may be subject to pragma Ghost. Set the mode now to\n+      --  ensure that the invariant procedure is properly marked as Ghost.\n+\n+      Set_Ghost_Mode_From_Entity (Typ);\n+\n       Stmts := No_List;\n       PDecl := Empty;\n       PBody := Empty;\n@@ -8219,6 +8235,7 @@ package body Sem_Ch13 is\n            and then Nkind (PDecl) = N_Subprogram_Declaration\n            and then Present (Corresponding_Body (PDecl))\n          then\n+            Ghost_Mode := Save_Ghost_Mode;\n             return;\n          end if;\n \n@@ -8229,14 +8246,17 @@ package body Sem_Ch13 is\n       --  Recover formal of procedure, for use in the calls to invariant\n       --  functions (including inherited ones).\n \n-      Object_Entity :=\n+      Obj_Id :=\n         Defining_Identifier\n           (First (Parameter_Specifications (Specification (PDecl))));\n-      Object_Name := Chars (Object_Entity);\n \n       --  Add invariants for the current type\n \n-      Add_Invariants (Typ, Inherit => False);\n+      Add_Invariants\n+        (T       => Typ,\n+         Obj_Id  => Obj_Id,\n+         Stmts   => Stmts,\n+         Inherit => False);\n \n       --  Add invariants for parent types\n \n@@ -8258,7 +8278,11 @@ package body Sem_Ch13 is\n             exit when Parent_Typ = Current_Typ;\n \n             Current_Typ := Parent_Typ;\n-            Add_Invariants (Current_Typ, Inherit => True);\n+            Add_Invariants\n+              (T       => Current_Typ,\n+               Obj_Id  => Obj_Id,\n+               Stmts   => Stmts,\n+               Inherit => True);\n          end loop;\n       end;\n \n@@ -8278,7 +8302,11 @@ package body Sem_Ch13 is\n                Iface := Node (AI);\n \n                if not Is_Ancestor (Iface, Typ, Use_Full_View => True) then\n-                  Add_Invariants (Iface, Inherit => True);\n+                  Add_Invariants\n+                    (T       => Iface,\n+                     Obj_Id  => Obj_Id,\n+                     Stmts   => Stmts,\n+                     Inherit => True);\n                end if;\n \n                Next_Elmt (AI);\n@@ -8289,7 +8317,7 @@ package body Sem_Ch13 is\n       --  Build the procedure if we generated at least one Check pragma\n \n       if Stmts /= No_List then\n-         Spec  := Copy_Separate_Tree (Specification (PDecl));\n+         Spec := Copy_Separate_Tree (Specification (PDecl));\n \n          PBody :=\n            Make_Subprogram_Body (Loc,\n@@ -8342,6 +8370,8 @@ package body Sem_Ch13 is\n             Analyze (PBody);\n          end if;\n       end if;\n+\n+      Ghost_Mode := Save_Ghost_Mode;\n    end Build_Invariant_Procedure;\n \n    -------------------------------"}, {"sha": "82c3dd8254bede77b17c2b9939fbd078f9bf9986", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=95fef24ff9a7ed0a90781fd153e797d086aa2647", "patch": "@@ -3441,9 +3441,11 @@ package body Sem_Ch3 is\n          Check_Missing_Part_Of (Obj_Id);\n       end if;\n \n-      --  A ghost object cannot be imported or exported (SPARK RM 6.9(8))\n+      --  A ghost object cannot be imported or exported (SPARK RM 6.9(8)). One\n+      --  exception to this is the object that represents the dispatch table of\n+      --  a Ghost tagged type as the symbol needs to be exported.\n \n-      if Is_Ghost_Entity (Obj_Id) then\n+      if Comes_From_Source (Obj_Id) and then Is_Ghost_Entity (Obj_Id) then\n          if Is_Exported (Obj_Id) then\n             Error_Msg_N (\"ghost object & cannot be exported\", Obj_Id);\n \n@@ -4166,7 +4168,7 @@ package body Sem_Ch3 is\n                --  An object declared within a Ghost region is automatically\n                --  Ghost (SPARK RM 6.9(2)).\n \n-               if Comes_From_Source (Id) and then Ghost_Mode > None then\n+               if Ghost_Mode > None then\n                   Set_Is_Ghost_Entity (Id);\n \n                   --  The Ghost policy in effect at the point of declaration\n@@ -4347,10 +4349,8 @@ package body Sem_Ch3 is\n       --  An object declared within a Ghost region is automatically Ghost\n       --  (SPARK RM 6.9(2)).\n \n-      if Comes_From_Source (Id)\n-        and then (Ghost_Mode > None\n-                   or else (Present (Prev_Entity)\n-                             and then Is_Ghost_Entity (Prev_Entity)))\n+      if Ghost_Mode > None\n+        or else (Present (Prev_Entity) and then Is_Ghost_Entity (Prev_Entity))\n       then\n          Set_Is_Ghost_Entity (Id);\n \n@@ -5730,7 +5730,7 @@ package body Sem_Ch3 is\n \n          --  Inherit the \"ghostness\" from the constrained array type\n \n-         if Is_Ghost_Entity (T) or else Ghost_Mode > None then\n+         if Ghost_Mode > None or else Is_Ghost_Entity (T) then\n             Set_Is_Ghost_Entity (Implicit_Base);\n          end if;\n \n@@ -6214,7 +6214,7 @@ package body Sem_Ch3 is\n \n          --  Inherit the \"ghostness\" from the parent base type\n \n-         if Is_Ghost_Entity (Parent_Base) or else Ghost_Mode > None then\n+         if Ghost_Mode > None or else Is_Ghost_Entity (Parent_Base) then\n             Set_Is_Ghost_Entity (Implicit_Base);\n          end if;\n       end Make_Implicit_Base;\n@@ -15815,25 +15815,23 @@ package body Sem_Ch3 is\n \n                elsif Protected_Present (Iface_Def) then\n                   Error_Msg_NE\n-                    (\"descendant of& must be declared\"\n-                       & \" as a protected interface\",\n-                         N, Parent_Type);\n+                    (\"descendant of & must be declared as a protected \"\n+                     & \"interface\", N, Parent_Type);\n \n                elsif Synchronized_Present (Iface_Def) then\n                   Error_Msg_NE\n-                    (\"descendant of& must be declared\"\n-                       & \" as a synchronized interface\",\n-                         N, Parent_Type);\n+                    (\"descendant of & must be declared as a synchronized \"\n+                     & \"interface\", N, Parent_Type);\n \n                elsif Task_Present (Iface_Def) then\n                   Error_Msg_NE\n-                    (\"descendant of& must be declared as a task interface\",\n+                    (\"descendant of & must be declared as a task interface\",\n                        N, Parent_Type);\n \n                else\n                   Error_Msg_N\n-                    (\"(Ada 2005) limited interface cannot \"\n-                     & \"inherit from non-limited interface\", Indic);\n+                    (\"(Ada 2005) limited interface cannot inherit from \"\n+                     & \"non-limited interface\", Indic);\n                end if;\n \n             --  Ada 2005 (AI-345): Non-limited interfaces can only inherit\n@@ -15848,19 +15846,17 @@ package body Sem_Ch3 is\n \n                elsif Protected_Present (Iface_Def) then\n                   Error_Msg_NE\n-                    (\"descendant of& must be declared\"\n-                       & \" as a protected interface\",\n-                         N, Parent_Type);\n+                    (\"descendant of & must be declared as a protected \"\n+                     & \"interface\", N, Parent_Type);\n \n                elsif Synchronized_Present (Iface_Def) then\n                   Error_Msg_NE\n-                    (\"descendant of& must be declared\"\n-                       & \" as a synchronized interface\",\n-                         N, Parent_Type);\n+                    (\"descendant of & must be declared as a synchronized \"\n+                     & \"interface\", N, Parent_Type);\n \n                elsif Task_Present (Iface_Def) then\n                   Error_Msg_NE\n-                    (\"descendant of& must be declared as a task interface\",\n+                    (\"descendant of & must be declared as a task interface\",\n                        N, Parent_Type);\n                else\n                   null;\n@@ -15874,8 +15870,8 @@ package body Sem_Ch3 is\n         and then not Is_Interface (Parent_Type)\n       then\n          Error_Msg_N\n-           (\"parent type of a record extension cannot be \"\n-            & \"a synchronized tagged type (RM 3.9.1 (3/1))\", N);\n+           (\"parent type of a record extension cannot be a synchronized \"\n+            & \"tagged type (RM 3.9.1 (3/1))\", N);\n          Set_Etype (T, Any_Type);\n          return;\n       end if;\n@@ -18240,6 +18236,12 @@ package body Sem_Ch3 is\n       --  The class-wide type of a class-wide type is itself (RM 3.9(14))\n \n       Set_Class_Wide_Type (CW_Type, CW_Type);\n+\n+      --  Inherit the \"ghostness\" from the root tagged type\n+\n+      if Ghost_Mode > None or else Is_Ghost_Entity (T) then\n+         Set_Is_Ghost_Entity (CW_Type);\n+      end if;\n    end Make_Class_Wide_Type;\n \n    ----------------"}, {"sha": "6a3e5e7644f213646d78884ca0d4c9080a28a62c", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=95fef24ff9a7ed0a90781fd153e797d086aa2647", "patch": "@@ -1267,7 +1267,7 @@ package body Sem_Ch6 is\n          --  property is not directly inherited as the body may be subject\n          --  to a different Ghost assertion policy.\n \n-         if Is_Ghost_Entity (Gen_Id) or else Ghost_Mode > None then\n+         if Ghost_Mode > None or else Is_Ghost_Entity (Gen_Id) then\n             Set_Is_Ghost_Entity (Body_Id);\n \n             --  The Ghost policy in effect at the point of declaration and at\n@@ -3286,7 +3286,7 @@ package body Sem_Ch6 is\n             --  property is not directly inherited as the body may be subject\n             --  to a different Ghost assertion policy.\n \n-            if Is_Ghost_Entity (Spec_Id) or else Ghost_Mode > None then\n+            if Ghost_Mode > None or else Is_Ghost_Entity (Spec_Id) then\n                Set_Is_Ghost_Entity (Body_Id);\n \n                --  The Ghost policy in effect at the point of declaration and\n@@ -3457,6 +3457,13 @@ package body Sem_Ch6 is\n \n          New_Overloaded_Entity (Body_Id);\n \n+         --  A subprogram body declared within a Ghost region is automatically\n+         --  Ghost (SPARK RM 6.9(2)).\n+\n+         if Ghost_Mode > None then\n+            Set_Is_Ghost_Entity (Body_Id);\n+         end if;\n+\n          if Nkind (N) /= N_Subprogram_Body_Stub then\n             Set_Acts_As_Spec (N);\n             Generate_Definition (Body_Id);\n@@ -4184,7 +4191,7 @@ package body Sem_Ch6 is\n       --  A subprogram declared within a Ghost region is automatically Ghost\n       --  (SPARK RM 6.9(2)).\n \n-      if Comes_From_Source (Designator) and then Ghost_Mode > None then\n+      if Ghost_Mode > None then\n          Set_Is_Ghost_Entity (Designator);\n       end if;\n "}, {"sha": "a3870e895005b6d5dc5c501780a0ab71beb861ce", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=95fef24ff9a7ed0a90781fd153e797d086aa2647", "patch": "@@ -742,11 +742,11 @@ package body Sem_Ch7 is\n          Set_SPARK_Aux_Pragma_Inherited (Body_Id);\n       end if;\n \n-      --  Inherit the \"ghostness\" of the subprogram spec. Note that this\n-      --  property is not directly inherited as the body may be subject to a\n-      --  different Ghost assertion policy.\n+      --  Inherit the \"ghostness\" of the package spec. Note that this property\n+      --  is not directly inherited as the body may be subject to a different\n+      --  Ghost assertion policy.\n \n-      if Is_Ghost_Entity (Spec_Id) or else Ghost_Mode > None then\n+      if Ghost_Mode > None or else Is_Ghost_Entity (Spec_Id) then\n          Set_Is_Ghost_Entity (Body_Id);\n \n          --  The Ghost policy in effect at the point of declaration and at the"}, {"sha": "e488ee77808348f65fb2e21be36629fa70ab0ae6", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 55, "deletions": 34, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=95fef24ff9a7ed0a90781fd153e797d086aa2647", "patch": "@@ -5644,41 +5644,61 @@ package body Sem_Ch8 is\n    --  the scope of its declaration.\n \n    procedure Find_Expanded_Name (N : Node_Id) is\n-      function In_Pragmas_Depends_Or_Global (N : Node_Id) return Boolean;\n-      --  Determine whether an arbitrary node N appears in pragmas [Refined_]\n-      --  Depends or [Refined_]Global.\n+      function In_Abstract_View_Pragma (Nod : Node_Id) return Boolean;\n+      --  Determine whether expanded name Nod appears within a pragma which is\n+      --  a suitable context for an abstract view of a state or variable. The\n+      --  following pragmas fall in this category:\n+      --    Depends\n+      --    Global\n+      --    Initializes\n+      --    Refined_Depends\n+      --    Refined_Global\n+      --\n+      --  In addition, pragma Abstract_State is also considered suitable even\n+      --  though it is an illegal context for an abstract view as this allows\n+      --  for proper resolution of abstract views of variables. This illegal\n+      --  context is later flagged in the analysis of indicator Part_Of.\n \n-      ----------------------------------\n-      -- In_Pragmas_Depends_Or_Global --\n-      ----------------------------------\n+      -----------------------------\n+      -- In_Abstract_View_Pragma --\n+      -----------------------------\n \n-      function In_Pragmas_Depends_Or_Global (N : Node_Id) return Boolean is\n+      function In_Abstract_View_Pragma (Nod : Node_Id) return Boolean is\n          Par : Node_Id;\n \n       begin\n          --  Climb the parent chain looking for a pragma\n \n-         Par := N;\n+         Par := Nod;\n          while Present (Par) loop\n-            if Nkind (Par) = N_Pragma\n-              and then Nam_In (Pragma_Name (Par), Name_Depends,\n-                                                  Name_Global,\n-                                                  Name_Refined_Depends,\n-                                                  Name_Refined_Global)\n-            then\n-               return True;\n+            if Nkind (Par) = N_Pragma then\n+               if Nam_In (Pragma_Name (Par), Name_Abstract_State,\n+                                             Name_Depends,\n+                                             Name_Global,\n+                                             Name_Initializes,\n+                                             Name_Refined_Depends,\n+                                             Name_Refined_Global)\n+               then\n+                  return True;\n+\n+               --  Otherwise the pragma is not a legal context for an abstract\n+               --  view.\n+\n+               else\n+                  exit;\n+               end if;\n \n             --  Prevent the search from going too far\n \n             elsif Is_Body_Or_Package_Declaration (Par) then\n-               return False;\n+               exit;\n             end if;\n \n             Par := Parent (Par);\n          end loop;\n \n          return False;\n-      end In_Pragmas_Depends_Or_Global;\n+      end In_Abstract_View_Pragma;\n \n       --  Local variables\n \n@@ -5724,18 +5744,19 @@ package body Sem_Ch8 is\n                Is_New_Candidate := True;\n \n                --  Handle abstract views of states and variables. These are\n-               --  acceptable only when the reference to the view appears in\n-               --  pragmas [Refined_]Depends and [Refined_]Global.\n+               --  acceptable candidates only when the reference to the view\n+               --  appears in certain pragmas.\n \n                if Ekind (Id) = E_Abstract_State\n                  and then From_Limited_With (Id)\n                  and then Present (Non_Limited_View (Id))\n                then\n-                  if In_Pragmas_Depends_Or_Global (N) then\n+                  if In_Abstract_View_Pragma (N) then\n                      Candidate        := Non_Limited_View (Id);\n                      Is_New_Candidate := True;\n \n-                  --  Hide candidate because it is not used in a proper context\n+                  --  Hide the candidate because it is not used in a proper\n+                  --  context.\n \n                   else\n                      Candidate        := Empty;\n@@ -5827,22 +5848,22 @@ package body Sem_Ch8 is\n             Find_Expanded_Name (N);\n             return;\n \n+         --  There is an implicit instance of the predefined operator in\n+         --  the given scope. The operator entity is defined in Standard.\n+         --  Has_Implicit_Operator makes the node into an Expanded_Name.\n+\n          elsif Nkind (Selector) = N_Operator_Symbol\n            and then Has_Implicit_Operator (N)\n          then\n-            --  There is an implicit instance of the predefined operator in\n-            --  the given scope. The operator entity is defined in Standard.\n-            --  Has_Implicit_Operator makes the node into an Expanded_Name.\n-\n             return;\n \n+         --  If there is no literal defined in the scope denoted by the\n+         --  prefix, the literal may belong to (a type derived from)\n+         --  Standard_Character, for which we have no explicit literals.\n+\n          elsif Nkind (Selector) = N_Character_Literal\n            and then Has_Implicit_Character_Literal (N)\n          then\n-            --  If there is no literal defined in the scope denoted by the\n-            --  prefix, the literal may belong to (a type derived from)\n-            --  Standard_Character, for which we have no explicit literals.\n-\n             return;\n \n          else\n@@ -5879,8 +5900,8 @@ package body Sem_Ch8 is\n                     and then not In_Private_Part (Current_Scope)\n                     and then not Is_Private_Descendant (Current_Scope)\n                   then\n-                     Error_Msg_N (\"private child unit& is not visible here\",\n-                                  Selector);\n+                     Error_Msg_N\n+                       (\"private child unit& is not visible here\", Selector);\n \n                   --  Normal case where we have a missing with for a child unit\n \n@@ -5929,8 +5950,9 @@ package body Sem_Ch8 is\n                                         E_Package,\n                                         E_Procedure)\n                         then\n-                           P := Generic_Parent (Specification\n-                                  (Unit_Declaration_Node (S)));\n+                           P :=\n+                             Generic_Parent (Specification\n+                               (Unit_Declaration_Node (S)));\n \n                            --  Check that P is a generic child of the generic\n                            --  parent of the prefix.\n@@ -5968,7 +5990,6 @@ package body Sem_Ch8 is\n                --  Here we have the case of an undefined component\n \n                else\n-\n                   --  The prefix may hide a homonym in the context that\n                   --  declares the desired entity. This error can use a\n                   --  specialized message."}, {"sha": "58775ac47bd04b379459c51403c9eb4118132573", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=95fef24ff9a7ed0a90781fd153e797d086aa2647", "patch": "@@ -3413,6 +3413,19 @@ package body Sem_Prag is\n             return;\n          end if;\n \n+         --  Catch a case where indicator Part_Of denotes the abstract view of\n+         --  a variable which appears as an abstract state (SPARK RM 10.1.2 2).\n+\n+         if From_Limited_With (State_Id)\n+           and then Present (Non_Limited_View (State_Id))\n+           and then Ekind (Non_Limited_View (State_Id)) = E_Variable\n+         then\n+            SPARK_Msg_N\n+              (\"indicator Part_Of must denote an abstract state\", State);\n+            SPARK_Msg_N (\"\\& denotes abstract view of object\", State);\n+            return;\n+         end if;\n+\n          --  Determine where the state, object or the package instantiation\n          --  lives with respect to the enclosing packages or package bodies (if\n          --  any). This placement dictates the legality of the encapsulating\n@@ -11693,7 +11706,7 @@ package body Sem_Prag is\n                      Scope_Suppress.Overflow_Mode_Assertions  := Eliminated;\n                   end;\n \n-               --  Not that special case!\n+               --  Not that special case\n \n                else\n                   Analyze (N);"}, {"sha": "0a0c2897665a04afcb6316e1d33cd0e0f13d38be", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fef24ff9a7ed0a90781fd153e797d086aa2647/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=95fef24ff9a7ed0a90781fd153e797d086aa2647", "patch": "@@ -4528,7 +4528,8 @@ package body Sem_Res is\n             --  The actual parameter of a Ghost subprogram whose formal is of\n             --  mode IN OUT or OUT must be a Ghost variable (SPARK RM 6.9(13)).\n \n-            if Is_Ghost_Entity (Nam)\n+            if Comes_From_Source (Nam)\n+              and then Is_Ghost_Entity (Nam)\n               and then Ekind_In (F, E_In_Out_Parameter, E_Out_Parameter)\n               and then Is_Entity_Name (A)\n               and then Present (Entity (A))"}]}