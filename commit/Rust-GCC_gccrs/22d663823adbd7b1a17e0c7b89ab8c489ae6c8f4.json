{"sha": "22d663823adbd7b1a17e0c7b89ab8c489ae6c8f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJkNjYzODIzYWRiZDdiMWExN2UwYzdiODlhYjhjNDg5YWU2YzhmNA==", "commit": {"author": {"name": "Mikhail Maltsev", "email": "maltsevm@gmail.com", "date": "2015-10-21T22:22:03Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-10-21T22:22:03Z"}, "message": "[PATCH 2/9] ENABLE_CHECKING refactoring: libcpp\n\n[PATCH 2/9] ENABLE_CHECKING refactoring: libcpp\n        * include/line-map.h: Use CHECKING_P instead of ENABLE_CHECKING.\n        * init.c: Likewise.\n        * macro.c (struct macro_arg_token_iter, set_arg_token,\n        macro_arg_token_iter_init, macro_arg_token_iter_forward,\n        macro_arg_token_iter_get_token, macro_arg_token_iter_get_location,\n        alloc_expanded_arg_mem, _cpp_backup_tokens): Likewise.\n\nFrom-SVN: r229154", "tree": {"sha": "1fd8c1dfe00b2a60d2ea2dbbfeb4e5afde4d2e3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fd8c1dfe00b2a60d2ea2dbbfeb4e5afde4d2e3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22d663823adbd7b1a17e0c7b89ab8c489ae6c8f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d663823adbd7b1a17e0c7b89ab8c489ae6c8f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22d663823adbd7b1a17e0c7b89ab8c489ae6c8f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d663823adbd7b1a17e0c7b89ab8c489ae6c8f4/comments", "author": {"login": "miyuki", "id": 4668268, "node_id": "MDQ6VXNlcjQ2NjgyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/4668268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miyuki", "html_url": "https://github.com/miyuki", "followers_url": "https://api.github.com/users/miyuki/followers", "following_url": "https://api.github.com/users/miyuki/following{/other_user}", "gists_url": "https://api.github.com/users/miyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/miyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miyuki/subscriptions", "organizations_url": "https://api.github.com/users/miyuki/orgs", "repos_url": "https://api.github.com/users/miyuki/repos", "events_url": "https://api.github.com/users/miyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/miyuki/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44f92b59c2785eb9a77c04baf7b442416f2c2dce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f92b59c2785eb9a77c04baf7b442416f2c2dce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44f92b59c2785eb9a77c04baf7b442416f2c2dce"}], "stats": {"total": 49, "additions": 24, "deletions": 25}, "files": [{"sha": "f474fe7db7f50ef0e5030b0e65906207b74fd024", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d663823adbd7b1a17e0c7b89ab8c489ae6c8f4/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d663823adbd7b1a17e0c7b89ab8c489ae6c8f4/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=22d663823adbd7b1a17e0c7b89ab8c489ae6c8f4", "patch": "@@ -1,5 +1,12 @@\n 2015-10-21  Mikhail Maltsev  <maltsevm@gmail.com>\n \n+\t* include/line-map.h: Use CHECKING_P instead of ENABLE_CHECKING.\n+\t* init.c: Likewise.\n+\t* macro.c (struct macro_arg_token_iter, set_arg_token,\n+\tmacro_arg_token_iter_init, macro_arg_token_iter_forward,\n+\tmacro_arg_token_iter_get_token, macro_arg_token_iter_get_location,\n+\talloc_expanded_arg_mem, _cpp_backup_tokens): Likewise.\n+\n \t* config.in: Regenerate.\n \t* configure: Regenerate.\n \t* configure.ac (CHECKING_P): Define."}, {"sha": "e718fc24bb4671b826375123543b66693bc3d8c9", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d663823adbd7b1a17e0c7b89ab8c489ae6c8f4/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d663823adbd7b1a17e0c7b89ab8c489ae6c8f4/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=22d663823adbd7b1a17e0c7b89ab8c489ae6c8f4", "patch": "@@ -272,7 +272,7 @@ struct GTY((tag (\"2\"))) line_map_macro : public line_map {\n   source_location expansion;\n };\n \n-#if defined ENABLE_CHECKING && (GCC_VERSION >= 2007)\n+#if CHECKING_P && (GCC_VERSION >= 2007)\n \n /* Assertion macro to be used in line-map code.  */\n #define linemap_assert(EXPR)                  \\"}, {"sha": "0419e954905441e278441872b0ac1a900c6356cd", "filename": "libcpp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d663823adbd7b1a17e0c7b89ab8c489ae6c8f4/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d663823adbd7b1a17e0c7b89ab8c489ae6c8f4/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=22d663823adbd7b1a17e0c7b89ab8c489ae6c8f4", "patch": "@@ -535,7 +535,7 @@ cpp_init_builtins (cpp_reader *pfile, int hosted)\n \n /* Sanity-checks are dependent on command-line options, so it is\n    called as a subroutine of cpp_read_main_file ().  */\n-#if ENABLE_CHECKING\n+#if CHECKING_P\n static void sanity_checks (cpp_reader *);\n static void sanity_checks (cpp_reader *pfile)\n {"}, {"sha": "60a075333947127d90ce8fccb7e366da9c1d5d85", "filename": "libcpp/macro.c", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d663823adbd7b1a17e0c7b89ab8c489ae6c8f4/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d663823adbd7b1a17e0c7b89ab8c489ae6c8f4/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=22d663823adbd7b1a17e0c7b89ab8c489ae6c8f4", "patch": "@@ -73,7 +73,7 @@ struct macro_arg_token_iter\n      -ftrack-macro-expansion is used this location tracks loci across\n      macro expansion.  */\n   const source_location *location_ptr;\n-#ifdef ENABLE_CHECKING\n+#if CHECKING_P\n   /* The number of times the iterator went forward. This useful only\n      when checking is enabled.  */\n   size_t num_forwards;\n@@ -1310,14 +1310,11 @@ set_arg_token (macro_arg *arg, const cpp_token *token,\n \n   if (loc != NULL)\n     {\n-#ifdef ENABLE_CHECKING\n-      if (kind == MACRO_ARG_TOKEN_STRINGIFIED\n-\t  || !track_macro_exp_p)\n-\t/* We can't set the location of a stringified argument\n-\t   token and we can't set any location if we aren't tracking\n-\t   macro expansion locations.   */\n-\tabort ();\n-#endif\n+      /* We can't set the location of a stringified argument\n+\t token and we can't set any location if we aren't tracking\n+\t macro expansion locations.   */\n+      gcc_checking_assert (kind != MACRO_ARG_TOKEN_STRINGIFIED\n+\t\t\t   && track_macro_exp_p);\n       *loc = location;\n     }\n }\n@@ -1403,7 +1400,7 @@ macro_arg_token_iter_init (macro_arg_token_iter *iter,\n   iter->location_ptr = NULL;\n   if (track_macro_exp_p)\n     iter->location_ptr = get_arg_token_location (arg, kind);\n-#ifdef ENABLE_CHECKING\n+#if CHECKING_P\n   iter->num_forwards = 0;\n   if (track_macro_exp_p\n       && token_ptr != NULL\n@@ -1428,14 +1425,14 @@ macro_arg_token_iter_forward (macro_arg_token_iter *it)\n \tit->location_ptr++;\n       break;\n     case MACRO_ARG_TOKEN_STRINGIFIED:\n-#ifdef ENABLE_CHECKING\n+#if CHECKING_P\n       if (it->num_forwards > 0)\n \tabort ();\n #endif\n       break;\n     }\n \n-#ifdef ENABLE_CHECKING\n+#if CHECKING_P\n   it->num_forwards++;\n #endif\n }\n@@ -1444,7 +1441,7 @@ macro_arg_token_iter_forward (macro_arg_token_iter *it)\n static const cpp_token *\n macro_arg_token_iter_get_token (const macro_arg_token_iter *it)\n {\n-#ifdef ENABLE_CHECKING\n+#if CHECKING_P\n   if (it->kind == MACRO_ARG_TOKEN_STRINGIFIED\n       && it->num_forwards > 0)\n     abort ();\n@@ -1458,7 +1455,7 @@ macro_arg_token_iter_get_token (const macro_arg_token_iter *it)\n static source_location\n macro_arg_token_iter_get_location (const macro_arg_token_iter *it)\n {\n-#ifdef ENABLE_CHECKING\n+#if CHECKING_P\n   if (it->kind == MACRO_ARG_TOKEN_STRINGIFIED\n       && it->num_forwards > 0)\n     abort ();\n@@ -2144,11 +2141,9 @@ tokens_buff_add_token (_cpp_buff *buffer,\n static void\n alloc_expanded_arg_mem (cpp_reader *pfile, macro_arg *arg, size_t capacity)\n {\n-#ifdef ENABLE_CHECKING\n-  if (arg->expanded != NULL\n-      || arg->expanded_virt_locs != NULL)\n-    abort ();\n-#endif\n+  gcc_checking_assert (arg->expanded == NULL\n+\t\t       && arg->expanded_virt_locs == NULL);\n+\n   arg->expanded = XNEWVEC (const cpp_token *, capacity);\n   if (CPP_OPTION (pfile, track_macro_expansion))\n     arg->expanded_virt_locs = XNEWVEC (source_location, capacity);\n@@ -2709,10 +2704,7 @@ _cpp_backup_tokens (cpp_reader *pfile, unsigned int count)\n \t    {\n \t      macro_context *m = pfile->context->c.mc;\n \t      m->cur_virt_loc--;\n-#ifdef ENABLE_CHECKING\n-\t      if (m->cur_virt_loc < m->virt_locs)\n-\t\tabort ();\n-#endif\n+\t      gcc_checking_assert (m->cur_virt_loc >= m->virt_locs);\n \t    }\n \t  else\n \t    abort ();"}]}