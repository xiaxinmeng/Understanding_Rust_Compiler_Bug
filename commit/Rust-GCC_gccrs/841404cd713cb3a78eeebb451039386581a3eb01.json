{"sha": "841404cd713cb3a78eeebb451039386581a3eb01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQxNDA0Y2Q3MTNjYjNhNzhlZWViYjQ1MTAzOTM4NjU4MWEzZWIwMQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2002-02-11T13:33:07Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2002-02-11T13:33:07Z"}, "message": "calls.c (store_one_arg): In the non-BLKmode non-partial case...\n\n* calls.c (store_one_arg): In the non-BLKmode non-partial case,\ntake padding into account when computing the argument value.\n\nFrom-SVN: r49675", "tree": {"sha": "8858ae8d39700a7e63624e9982e72976877af648", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8858ae8d39700a7e63624e9982e72976877af648"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/841404cd713cb3a78eeebb451039386581a3eb01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/841404cd713cb3a78eeebb451039386581a3eb01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/841404cd713cb3a78eeebb451039386581a3eb01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/841404cd713cb3a78eeebb451039386581a3eb01/comments", "author": null, "committer": null, "parents": [{"sha": "1d1ade42a54c38522533a9ddc8347d8dfb41a5c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d1ade42a54c38522533a9ddc8347d8dfb41a5c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d1ade42a54c38522533a9ddc8347d8dfb41a5c7"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "748d7a7393a674f0e5a91cdc4728a0442cde0e04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841404cd713cb3a78eeebb451039386581a3eb01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841404cd713cb3a78eeebb451039386581a3eb01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=841404cd713cb3a78eeebb451039386581a3eb01", "patch": "@@ -1,5 +1,8 @@\n 2002-02-11  Alexandre Oliva  <aoliva@redhat.com>\n \n+\t* calls.c (store_one_arg): In the non-BLKmode non-partial case,\n+\ttake padding into account when computing the argument value.\n+\n \t* config/sh/sh.h (FUNCTION_ARG_REGNO_P): Fix parenthesizing error.\n \n \t* combine.c (try_combine): Apply substitutions in"}, {"sha": "7e2bc4b2f9f0705498269f31f5867f73334bcd32", "filename": "gcc/calls.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841404cd713cb3a78eeebb451039386581a3eb01/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841404cd713cb3a78eeebb451039386581a3eb01/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=841404cd713cb3a78eeebb451039386581a3eb01", "patch": "@@ -4465,6 +4465,11 @@ store_one_arg (arg, argblock, flags, variable_size, reg_parm_stack_space)\n \t\t      partial, reg, used - size, argblock,\n \t\t      ARGS_SIZE_RTX (arg->offset), reg_parm_stack_space,\n \t\t      ARGS_SIZE_RTX (arg->alignment_pad));\n+\n+      /* Unless this is a partially-in-register argument, the argument is now\n+\t in the stack.  */\n+      if (partial == 0)\n+\targ->value = arg->stack;\n     }\n   else\n     {\n@@ -4564,16 +4569,18 @@ store_one_arg (arg, argblock, flags, variable_size, reg_parm_stack_space)\n \t\t      argblock, ARGS_SIZE_RTX (arg->offset),\n \t\t      reg_parm_stack_space,\n \t\t      ARGS_SIZE_RTX (arg->alignment_pad));\n-    }\n \n-  /* Unless this is a partially-in-register argument, the argument is now\n-     in the stack.\n+      /* Unless this is a partially-in-register argument, the argument is now\n+\t in the stack.\n \n-     ??? Note that this can change arg->value from arg->stack to\n-     arg->stack_slot and it matters when they are not the same.\n-     It isn't totally clear that this is correct in all cases.  */\n-  if (partial == 0)\n-    arg->value = arg->stack_slot;\n+\t ??? Unlike the case above, in which we want the actual\n+\t address of the data, so that we can load it directly into a\n+\t register, here we want the address of the stack slot, so that\n+\t it's properly aligned for word-by-word copying or something\n+\t like that.  It's not clear that this is always correct.  */\n+      if (partial == 0)\n+\targ->value = arg->stack_slot;\n+    }\n \n   /* Once we have pushed something, pops can't safely\n      be deferred during the rest of the arguments.  */"}]}