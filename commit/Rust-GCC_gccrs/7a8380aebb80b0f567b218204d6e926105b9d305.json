{"sha": "7a8380aebb80b0f567b218204d6e926105b9d305", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E4MzgwYWViYjgwYjBmNTY3YjIxODIwNGQ2ZTkyNjEwNWI5ZDMwNQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-12-21T17:54:25Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-12-21T17:54:25Z"}, "message": "re PR c++/14075 ((\"foo\") accepted as char[] initializer)\n\ncp:\n\tPR c++/14075\n\t* decl.c (check_initializer): Check string initializer of array is\n\tnot parenthesized.\n\t* cp-tree.h (PAREN_STRING_LITERAL_P): New.\n\t* semantics.c (finish_parenthesized_expr): Mark a STRING_CST.\n\t* error.c (dump_expr): <STRING_CST case> Add parens, if needed.\ntestsuite:\n\tPR c++/14075\n\t* g++.dg/init/string1.C: New.\n\nFrom-SVN: r92464", "tree": {"sha": "f5295c69fc8f09f127b9123926fef7ac163cb383", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5295c69fc8f09f127b9123926fef7ac163cb383"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a8380aebb80b0f567b218204d6e926105b9d305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a8380aebb80b0f567b218204d6e926105b9d305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a8380aebb80b0f567b218204d6e926105b9d305", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a8380aebb80b0f567b218204d6e926105b9d305/comments", "author": null, "committer": null, "parents": [{"sha": "38b3627d6fcedf4e1b99e988440c1c366f6dba10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38b3627d6fcedf4e1b99e988440c1c366f6dba10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38b3627d6fcedf4e1b99e988440c1c366f6dba10"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "b0c25a7b5d75d617fc29ea3a7aad0a84a3bfee0c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8380aebb80b0f567b218204d6e926105b9d305/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8380aebb80b0f567b218204d6e926105b9d305/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7a8380aebb80b0f567b218204d6e926105b9d305", "patch": "@@ -1,5 +1,12 @@\n 2004-12-21  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\tPR c++/14075\n+\t* decl.c (check_initializer): Check string initializer of array is\n+\tnot parenthesized.\n+\t* cp-tree.h (PAREN_STRING_LITERAL_P): New.\n+\t* semantics.c (finish_parenthesized_expr): Mark a STRING_CST.\n+\t* error.c (dump_expr): <STRING_CST case> Add parens, if needed.\n+\n \t* cp-tree.def (TEMPLATE_TYPE_PARM,\n \tBOUND_TEMPLATE_TEMPLATE_PARM, TYPE_OF_TYPE, TYPENAME_TYPE): Reorder \n \tfor better code efficiency."}, {"sha": "c6d47c909f40637a0c3e12071a551516636b22ad", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8380aebb80b0f567b218204d6e926105b9d305/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8380aebb80b0f567b218204d6e926105b9d305/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7a8380aebb80b0f567b218204d6e926105b9d305", "patch": "@@ -42,6 +42,7 @@ struct diagnostic_context;\n       CLEANUP_P (in TRY_BLOCK)\n       AGGR_INIT_VIA_CTOR_P (in AGGR_INIT_EXPR)\n       PTRMEM_OK_P (in ADDR_EXPR, OFFSET_REF)\n+      PAREN_STRING_LITERAL (in STRING_CST)\n       DECL_PRETTY_FUNCTION_P (in VAR_DECL)\n       KOENIG_LOOKUP_P (in CALL_EXPR)\n       STATEMENT_LIST_NO_SCOPE (in STATEMENT_LIST).\n@@ -2248,6 +2249,12 @@ struct lang_decl GTY(())\n    should be performed at instantiation time.  */\n #define KOENIG_LOOKUP_P(NODE) TREE_LANG_FLAG_0 (CALL_EXPR_CHECK (NODE))\n \n+/* Indicates whether a string literal has been parenthesized. Such\n+   usages are disallowed in certain circumstances.  */\n+\n+#define PAREN_STRING_LITERAL_P(NODE) \\\n+  TREE_LANG_FLAG_0 (STRING_CST_CHECK (NODE))\n+\n /* Nonzero if this AGGR_INIT_EXPR provides for initialization via a\n    constructor call, rather than an ordinary function call.  */\n #define AGGR_INIT_VIA_CTOR_P(NODE) \\"}, {"sha": "515bb2c504144ed7a32f45b63ecb7d2a6a2544bd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8380aebb80b0f567b218204d6e926105b9d305/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8380aebb80b0f567b218204d6e926105b9d305/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7a8380aebb80b0f567b218204d6e926105b9d305", "patch": "@@ -4596,6 +4596,12 @@ check_initializer (tree decl, tree init, int flags, tree *cleanup)\n \t  if (TREE_CODE (init) != TREE_VEC)\n \t    {\n \t      init_code = store_init_value (decl, init);\n+\t      if (pedantic && TREE_CODE (type) == ARRAY_TYPE\n+\t\t  && DECL_INITIAL (decl)\n+\t\t  && TREE_CODE (DECL_INITIAL (decl)) == STRING_CST\n+\t\t  && PAREN_STRING_LITERAL_P (DECL_INITIAL (decl)))\n+\t\twarning (\"array %qD initialized by parenthesized string literal %qE\",\n+\t\t\t decl, DECL_INITIAL (decl));\n \t      init = NULL;\n \t    }\n \t}"}, {"sha": "ec332f2273ba1696e6a16847443352e2a9ef1acd", "filename": "gcc/cp/error.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8380aebb80b0f567b218204d6e926105b9d305/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8380aebb80b0f567b218204d6e926105b9d305/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=7a8380aebb80b0f567b218204d6e926105b9d305", "patch": "@@ -1286,8 +1286,15 @@ dump_expr (tree t, int flags)\n       dump_decl (t, (flags & ~TFF_DECL_SPECIFIERS) | TFF_NO_FUNCTION_ARGUMENTS);\n       break;\n \n-    case INTEGER_CST:\n     case STRING_CST:\n+      if (PAREN_STRING_LITERAL_P (t))\n+\tpp_cxx_left_paren (cxx_pp);\n+      pp_c_constant (pp_c_base (cxx_pp), t);\n+      if (PAREN_STRING_LITERAL_P (t))\n+\tpp_cxx_right_paren (cxx_pp);\n+      break;\n+      \n+    case INTEGER_CST:\n     case REAL_CST:\n        pp_c_constant (pp_c_base (cxx_pp), t);\n       break;"}, {"sha": "ab1c028ff5d53885d82f2f0fe49f5ba674bf94cf", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8380aebb80b0f567b218204d6e926105b9d305/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8380aebb80b0f567b218204d6e926105b9d305/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=7a8380aebb80b0f567b218204d6e926105b9d305", "patch": "@@ -1272,6 +1272,10 @@ finish_parenthesized_expr (tree expr)\n     /* [expr.unary.op]/3 The qualified id of a pointer-to-member must not be\n        enclosed in parentheses.  */\n     PTRMEM_OK_P (expr) = 0;\n+  \n+  if (TREE_CODE (expr) == STRING_CST)\n+    PAREN_STRING_LITERAL_P (expr) = 1;\n+  \n   return expr;\n }\n "}, {"sha": "640674a830b753f527998f9e2de9107f20d2a966", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8380aebb80b0f567b218204d6e926105b9d305/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8380aebb80b0f567b218204d6e926105b9d305/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7a8380aebb80b0f567b218204d6e926105b9d305", "patch": "@@ -1,5 +1,8 @@\n 2004-12-21  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\tPR c++/14075\n+\t* g++.dg/init/string1.C: New.\n+\n \tPR c++/18975\n \t* g++.dg/other/synth1.C: New.\n "}]}