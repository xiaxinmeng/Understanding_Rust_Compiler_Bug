{"sha": "4a150fc83a4d64ff1c3dbf723ee5c33604d2324d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGExNTBmYzgzYTRkNjRmZjFjM2RiZjcyM2VlNWMzMzYwNGQyMzI0ZA==", "commit": {"author": {"name": "Michael Haubenwallner", "email": "michael.haubenwallner@salomon.at", "date": "2010-11-26T09:53:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-11-26T09:53:24Z"}, "message": "re PR target/33637 (\"checking for nm: test: too many arguments\" causes \"Undefined symbol: __gxx_personality_v0\")\n\n\tPR target/33637\n\t* configure.ac: Accept extra arguments for AS_FOR_TARGET,\n\tLD_FOR_TARGET, NM_FOR_TARGET, OBJDUMP_FOR_TARGET.\n\t* configure: Regenerated.\n\t* exec-tool.in: Not quoting command, may have extra arguments.\n\nFrom-SVN: r167172", "tree": {"sha": "e731752c0454627b495181f1d77149b4e842411d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e731752c0454627b495181f1d77149b4e842411d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a150fc83a4d64ff1c3dbf723ee5c33604d2324d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a150fc83a4d64ff1c3dbf723ee5c33604d2324d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a150fc83a4d64ff1c3dbf723ee5c33604d2324d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a150fc83a4d64ff1c3dbf723ee5c33604d2324d/comments", "author": null, "committer": null, "parents": [{"sha": "e99f078847a24e13a99991c6cd3ccd8f4bbaeb71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e99f078847a24e13a99991c6cd3ccd8f4bbaeb71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e99f078847a24e13a99991c6cd3ccd8f4bbaeb71"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "8cfc96339638f38a40682b3da7abfb6242a9743e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a150fc83a4d64ff1c3dbf723ee5c33604d2324d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a150fc83a4d64ff1c3dbf723ee5c33604d2324d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a150fc83a4d64ff1c3dbf723ee5c33604d2324d", "patch": "@@ -1,3 +1,11 @@\n+2010-11-26  Michael Haubenwallner  <michael.haubenwallner@salomon.at>\n+\n+\tPR target/33637\n+\t* configure.ac: Accept extra arguments for AS_FOR_TARGET,\n+\tLD_FOR_TARGET, NM_FOR_TARGET, OBJDUMP_FOR_TARGET.\n+\t* configure: Regenerated.\n+\t* exec-tool.in: Not quoting command, may have extra arguments.\n+\n 2010-11-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/46528"}, {"sha": "ce8a6762fa61765df15bad2f268795b7276bd2de", "filename": "gcc/configure", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a150fc83a4d64ff1c3dbf723ee5c33604d2324d/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a150fc83a4d64ff1c3dbf723ee5c33604d2324d/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=4a150fc83a4d64ff1c3dbf723ee5c33604d2324d", "patch": "@@ -20673,7 +20673,7 @@ elif test -f $gcc_cv_as_gas_srcdir/configure.in \\\n elif test -x as$build_exeext; then\n \t# Build using assembler in the current directory.\n \tgcc_cv_as=./as$build_exeext\n-elif test -x $AS_FOR_TARGET; then\n+elif ( set dummy $AS_FOR_TARGET; test -x $2 ); then\n         gcc_cv_as=\"$AS_FOR_TARGET\"\n else\n         # Extract the first word of \"$AS_FOR_TARGET\", so it can be a program name with args.\n@@ -20794,7 +20794,7 @@ elif test -f $gcc_cv_ld_gld_srcdir/configure.in \\\n elif test -x collect-ld$build_exeext; then\n \t# Build using linker in the current directory.\n \tgcc_cv_ld=./collect-ld$build_exeext\n-elif test -x $LD_FOR_TARGET; then\n+elif ( set dummy $LD_FOR_TARGET; test -x $2 ); then\n         gcc_cv_ld=\"$LD_FOR_TARGET\"\n else\n         # Extract the first word of \"$LD_FOR_TARGET\", so it can be a program name with args.\n@@ -20921,7 +20921,7 @@ if test -f $gcc_cv_binutils_srcdir/configure.in \\\n \tgcc_cv_nm=../binutils/nm-new$build_exeext\n elif test -x nm$build_exeext; then\n \tgcc_cv_nm=./nm$build_exeext\n-elif test -x $NM_FOR_TARGET; then\n+elif ( set dummy $NM_FOR_TARGET; test -x $2 ); then\n         gcc_cv_nm=\"$NM_FOR_TARGET\"\n else\n         # Extract the first word of \"$NM_FOR_TARGET\", so it can be a program name with args.\n@@ -21001,7 +21001,7 @@ if test -f $gcc_cv_binutils_srcdir/configure.in \\\n \tgcc_cv_objdump=../binutils/objdump$build_exeext\n elif test -x objdump$build_exeext; then\n \tgcc_cv_objdump=./objdump$build_exeext\n-elif test -x $OBJDUMP_FOR_TARGET; then\n+elif ( set dummy $OBJDUMP_FOR_TARGET; test -x $2 ); then\n         gcc_cv_objdump=\"$OBJDUMP_FOR_TARGET\"\n else\n         # Extract the first word of \"$OBJDUMP_FOR_TARGET\", so it can be a program name with args."}, {"sha": "b8f35af93e898be8d9e6ec327cbb84e5eb29766a", "filename": "gcc/configure.ac", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a150fc83a4d64ff1c3dbf723ee5c33604d2324d/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a150fc83a4d64ff1c3dbf723ee5c33604d2324d/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=4a150fc83a4d64ff1c3dbf723ee5c33604d2324d", "patch": "@@ -1854,7 +1854,7 @@ elif test -f $gcc_cv_as_gas_srcdir/configure.in \\\n elif test -x as$build_exeext; then\n \t# Build using assembler in the current directory.\n \tgcc_cv_as=./as$build_exeext\n-elif test -x $AS_FOR_TARGET; then\n+elif ( set dummy $AS_FOR_TARGET; test -x $[2] ); then\n         gcc_cv_as=\"$AS_FOR_TARGET\"\n else\n         AC_PATH_PROG(gcc_cv_as, $AS_FOR_TARGET)\n@@ -1909,7 +1909,7 @@ elif test -f $gcc_cv_ld_gld_srcdir/configure.in \\\n elif test -x collect-ld$build_exeext; then\n \t# Build using linker in the current directory.\n \tgcc_cv_ld=./collect-ld$build_exeext\n-elif test -x $LD_FOR_TARGET; then\n+elif ( set dummy $LD_FOR_TARGET; test -x $[2] ); then\n         gcc_cv_ld=\"$LD_FOR_TARGET\"\n else\n         AC_PATH_PROG(gcc_cv_ld, $LD_FOR_TARGET)\n@@ -1982,7 +1982,7 @@ if test -f $gcc_cv_binutils_srcdir/configure.in \\\n \tgcc_cv_nm=../binutils/nm-new$build_exeext\n elif test -x nm$build_exeext; then\n \tgcc_cv_nm=./nm$build_exeext\n-elif test -x $NM_FOR_TARGET; then\n+elif ( set dummy $NM_FOR_TARGET; test -x $[2] ); then\n         gcc_cv_nm=\"$NM_FOR_TARGET\"\n else\n         AC_PATH_PROG(gcc_cv_nm, $NM_FOR_TARGET)\n@@ -2015,7 +2015,7 @@ if test -f $gcc_cv_binutils_srcdir/configure.in \\\n \tgcc_cv_objdump=../binutils/objdump$build_exeext\n elif test -x objdump$build_exeext; then\n \tgcc_cv_objdump=./objdump$build_exeext\n-elif test -x $OBJDUMP_FOR_TARGET; then\n+elif ( set dummy $OBJDUMP_FOR_TARGET; test -x $[2] ); then\n         gcc_cv_objdump=\"$OBJDUMP_FOR_TARGET\"\n else\n         AC_PATH_PROG(gcc_cv_objdump, $OBJDUMP_FOR_TARGET)"}, {"sha": "0ae8f2aa73ae19d7d41a285a304f39da59234a88", "filename": "gcc/exec-tool.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a150fc83a4d64ff1c3dbf723ee5c33604d2324d/gcc%2Fexec-tool.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a150fc83a4d64ff1c3dbf723ee5c33604d2324d/gcc%2Fexec-tool.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexec-tool.in?ref=4a150fc83a4d64ff1c3dbf723ee5c33604d2324d", "patch": "@@ -80,7 +80,7 @@ case \"$original\" in\n     fi\n     ;;\n   *)\n-    exec \"$original\" ${1+\"$@\"}\n+    exec $original ${1+\"$@\"}\n     ;;\n esac\n "}]}