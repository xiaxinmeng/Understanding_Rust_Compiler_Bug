{"sha": "0e360db97091f31bf8a16ec50e99b31ebe6c52e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUzNjBkYjk3MDkxZjMxYmY4YTE2ZWM1MGU5OWIzMWViZTZjNTJlMQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2015-08-07T15:02:15Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2015-08-07T15:02:15Z"}, "message": "re PR fortran/64104 ([F2003][IEEE] Allow IEEE functions in specification expressions)\n\n\tPR fortran/64104\n\n\t* expr.c (gfc_check_init_expr): Allow some IEEE functions in\n\tconstant expressions.\n\t(external_spec_function): Allow some IEEE functions in specification\n\texpressions.\n\t* simplify.c (gfc_simplify_ieee_selected_real_kind): Remove.\n\t(simplify_ieee_selected_real_kind, simplify_ieee_support,\n\tmatches_ieee_function_name, gfc_simplify_ieee_functions): New\n\tfunctions.\n\t* gfortran.h (gfc_simplify_ieee_selected_real_kind): Remove\n\tprototype.\n\t(gfc_simplify_ieee_functions): Add prototype.\n\n\t* gfortran.dg/ieee/ieee_8.f90: New test.\n\nFrom-SVN: r226723", "tree": {"sha": "8a5b785abc55fa5c397eb33f2c98ba742798a57c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a5b785abc55fa5c397eb33f2c98ba742798a57c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e360db97091f31bf8a16ec50e99b31ebe6c52e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e360db97091f31bf8a16ec50e99b31ebe6c52e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e360db97091f31bf8a16ec50e99b31ebe6c52e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e360db97091f31bf8a16ec50e99b31ebe6c52e1/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a044d2b1b6c85f88451e83649977ad908011b1f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a044d2b1b6c85f88451e83649977ad908011b1f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a044d2b1b6c85f88451e83649977ad908011b1f4"}], "stats": {"total": 247, "additions": 225, "deletions": 22}, "files": [{"sha": "b071f873ab64d56071281551d21c2765267b0fda", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e360db97091f31bf8a16ec50e99b31ebe6c52e1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e360db97091f31bf8a16ec50e99b31ebe6c52e1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0e360db97091f31bf8a16ec50e99b31ebe6c52e1", "patch": "@@ -1,3 +1,18 @@\n+2015-08-07  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/64104\n+\t* expr.c (gfc_check_init_expr): Allow some IEEE functions in\n+\tconstant expressions.\n+\t(external_spec_function): Allow some IEEE functions in specification\n+\texpressions.\n+\t* simplify.c (gfc_simplify_ieee_selected_real_kind): Remove.\n+\t(simplify_ieee_selected_real_kind, simplify_ieee_support,\n+\tmatches_ieee_function_name, gfc_simplify_ieee_functions): New\n+\tfunctions.\n+\t* gfortran.h (gfc_simplify_ieee_selected_real_kind): Remove\n+\tprototype.\n+\t(gfc_simplify_ieee_functions): Add prototype.\n+\n 2015-08-06  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* trans.h (gfc_trans_scalar_assign): Remove fourth argument."}, {"sha": "1d6f310f28cad44d2d7a3f03d2f4fc33ba9dd28b", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e360db97091f31bf8a16ec50e99b31ebe6c52e1/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e360db97091f31bf8a16ec50e99b31ebe6c52e1/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=0e360db97091f31bf8a16ec50e99b31ebe6c52e1", "patch": "@@ -2474,13 +2474,14 @@ gfc_check_init_expr (gfc_expr *e)\n \tgfc_intrinsic_sym* isym;\n \tgfc_symbol* sym = e->symtree->n.sym;\n \n-\t/* Special case for IEEE_SELECTED_REAL_KIND from the intrinsic\n-\t   module IEEE_ARITHMETIC, which is allowed in initialization\n-\t   expressions.  */\n-\tif (!strcmp(sym->name, \"ieee_selected_real_kind\")\n-\t    && sym->from_intmod == INTMOD_IEEE_ARITHMETIC)\n+\t/* Simplify here the intrinsics from the IEEE_ARITHMETIC and\n+\t   IEEE_EXCEPTIONS modules.  */\n+\tint mod = sym->from_intmod;\n+\tif (mod == INTMOD_NONE && sym->generic)\n+\t  mod = sym->generic->sym->from_intmod;\n+\tif (mod == INTMOD_IEEE_ARITHMETIC || mod == INTMOD_IEEE_EXCEPTIONS)\n \t  {\n-\t    gfc_expr *new_expr = gfc_simplify_ieee_selected_real_kind (e);\n+\t    gfc_expr *new_expr = gfc_simplify_ieee_functions (e);\n \t    if (new_expr)\n \t      {\n \t\tgfc_replace_expr (e, new_expr);\n@@ -2738,6 +2739,29 @@ external_spec_function (gfc_expr *e)\n \n   f = e->value.function.esym;\n \n+  /* IEEE functions allowed are \"a reference to a transformational function\n+     from the intrinsic module IEEE_ARITHMETIC or IEEE_EXCEPTIONS\", and\n+     \"inquiry function from the intrinsic modules IEEE_ARITHMETIC and\n+     IEEE_EXCEPTIONS\".  */\n+  if (f->from_intmod == INTMOD_IEEE_ARITHMETIC\n+      || f->from_intmod == INTMOD_IEEE_EXCEPTIONS)\n+    {\n+      if (!strcmp (f->name, \"ieee_selected_real_kind\")\n+\t  || !strcmp (f->name, \"ieee_support_rounding\")\n+\t  || !strcmp (f->name, \"ieee_support_flag\")\n+\t  || !strcmp (f->name, \"ieee_support_halting\")\n+\t  || !strcmp (f->name, \"ieee_support_datatype\")\n+\t  || !strcmp (f->name, \"ieee_support_denormal\")\n+\t  || !strcmp (f->name, \"ieee_support_divide\")\n+\t  || !strcmp (f->name, \"ieee_support_inf\")\n+\t  || !strcmp (f->name, \"ieee_support_io\")\n+\t  || !strcmp (f->name, \"ieee_support_nan\")\n+\t  || !strcmp (f->name, \"ieee_support_sqrt\")\n+\t  || !strcmp (f->name, \"ieee_support_standard\")\n+\t  || !strcmp (f->name, \"ieee_support_underflow_control\"))\n+\tgoto function_allowed;\n+    }\n+\n   if (f->attr.proc == PROC_ST_FUNCTION)\n     {\n       gfc_error (\"Specification function %qs at %L cannot be a statement \"\n@@ -2766,6 +2790,7 @@ external_spec_function (gfc_expr *e)\n       return false;\n     }\n \n+function_allowed:\n   return restricted_args (e->value.function.actual);\n }\n "}, {"sha": "5a0c3695e7a76cd0ae934ac73441bd2c60b56ac7", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e360db97091f31bf8a16ec50e99b31ebe6c52e1/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e360db97091f31bf8a16ec50e99b31ebe6c52e1/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=0e360db97091f31bf8a16ec50e99b31ebe6c52e1", "patch": "@@ -2881,8 +2881,6 @@ gfc_formal_arglist *gfc_sym_get_dummy_args (gfc_symbol *);\n /* intrinsic.c -- true if working in an init-expr, false otherwise.  */\n extern bool gfc_init_expr_flag;\n \n-gfc_expr *gfc_simplify_ieee_selected_real_kind (gfc_expr *);\n-\n /* Given a symbol that we have decided is intrinsic, mark it as such\n    by placing it into a special module that is otherwise impossible to\n    read or write.  */\n@@ -3245,6 +3243,7 @@ int gfc_code_walker (gfc_code **, walk_code_fn_t, walk_expr_fn_t, void *);\n /* simplify.c */\n \n void gfc_convert_mpz_to_signed (mpz_t, int);\n+gfc_expr *gfc_simplify_ieee_functions (gfc_expr *);\n \n /* trans-array.c  */\n "}, {"sha": "124558efa5d7d0df6fea93b4ab73c68a15ffe73d", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 59, "deletions": 14, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e360db97091f31bf8a16ec50e99b31ebe6c52e1/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e360db97091f31bf8a16ec50e99b31ebe6c52e1/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=0e360db97091f31bf8a16ec50e99b31ebe6c52e1", "patch": "@@ -5552,20 +5552,6 @@ gfc_simplify_selected_real_kind (gfc_expr *p, gfc_expr *q, gfc_expr *rdx)\n }\n \n \n-gfc_expr *\n-gfc_simplify_ieee_selected_real_kind (gfc_expr *expr)\n-{\n-  gfc_actual_arglist *arg = expr->value.function.actual;\n-  gfc_expr *p = arg->expr, *q = arg->next->expr,\n-\t   *rdx = arg->next->next->expr;\n-\n-  /* Currently, if IEEE is supported and this module is built, it means\n-     all our floating-point types conform to IEEE. Hence, we simply handle\n-     IEEE_SELECTED_REAL_KIND like SELECTED_REAL_KIND.  */\n-  return gfc_simplify_selected_real_kind (p, q, rdx);\n-}\n-\n-\n gfc_expr *\n gfc_simplify_set_exponent (gfc_expr *x, gfc_expr *i)\n {\n@@ -6955,3 +6941,62 @@ gfc_simplify_compiler_version (void)\n   return gfc_get_character_expr (gfc_default_character_kind,\n                                 &gfc_current_locus, buffer, len);\n }\n+\n+/* Simplification routines for intrinsics of IEEE modules.  */\n+\n+gfc_expr *\n+simplify_ieee_selected_real_kind (gfc_expr *expr)\n+{\n+  gfc_actual_arglist *arg = expr->value.function.actual;\n+  gfc_expr *p = arg->expr, *q = arg->next->expr,\n+\t   *rdx = arg->next->next->expr;\n+\n+  /* Currently, if IEEE is supported and this module is built, it means\n+     all our floating-point types conform to IEEE. Hence, we simply handle\n+     IEEE_SELECTED_REAL_KIND like SELECTED_REAL_KIND.  */\n+  return gfc_simplify_selected_real_kind (p, q, rdx);\n+}\n+\n+gfc_expr *\n+simplify_ieee_support (gfc_expr *expr)\n+{\n+  /* We consider that if the IEEE modules are loaded, we have full support\n+     for flags, halting and rounding, which are the three functions\n+     (IEEE_SUPPORT_{FLAG,HALTING,ROUNDING}) allowed in constant\n+     expressions. One day, we will need libgfortran to detect support and\n+     communicate it back to us, allowing for partial support.  */\n+\n+  return gfc_get_logical_expr (gfc_default_logical_kind, &expr->where,\n+\t\t\t       true);\n+}\n+\n+bool\n+matches_ieee_function_name (gfc_symbol *sym, const char *name)\n+{\n+  int n = strlen(name);\n+\n+  if (!strncmp(sym->name, name, n))\n+    return true;\n+\n+  /* If a generic was used and renamed, we need more work to find out.\n+     Compare the specific name.  */\n+  if (sym->generic && !strncmp(sym->generic->sym->name, name, n))\n+    return true;\n+\n+  return false;\n+}\n+\n+gfc_expr *\n+gfc_simplify_ieee_functions (gfc_expr *expr)\n+{\n+  gfc_symbol* sym = expr->symtree->n.sym;\n+\n+  if (matches_ieee_function_name(sym, \"ieee_selected_real_kind\"))\n+    return simplify_ieee_selected_real_kind (expr);\n+  else if (matches_ieee_function_name(sym, \"ieee_support_flag\")\n+\t   || matches_ieee_function_name(sym, \"ieee_support_halting\")\n+\t   || matches_ieee_function_name(sym, \"ieee_support_rounding\"))\n+    return simplify_ieee_support (expr);\n+  else\n+    return NULL;\n+}"}, {"sha": "c00d81cf033006c4cded432134b7ff96a160b335", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e360db97091f31bf8a16ec50e99b31ebe6c52e1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e360db97091f31bf8a16ec50e99b31ebe6c52e1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e360db97091f31bf8a16ec50e99b31ebe6c52e1", "patch": "@@ -1,3 +1,8 @@\n+2015-08-07  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/64104\n+\t* gfortran.dg/ieee/ieee_8.f90: New test.\n+\n 2015-08-07  Jiong Wang  <jiong.wang@arm.com>\n \n \t* gcc.target/aarch64/noplt_1.c: Check branch type instead of relocation"}, {"sha": "9806bcf9e181fd88bcf80cf02bf79f48551289c8", "filename": "gcc/testsuite/gfortran.dg/ieee/ieee_8.f90", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e360db97091f31bf8a16ec50e99b31ebe6c52e1/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fieee_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e360db97091f31bf8a16ec50e99b31ebe6c52e1/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fieee_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fieee_8.f90?ref=0e360db97091f31bf8a16ec50e99b31ebe6c52e1", "patch": "@@ -0,0 +1,114 @@\n+! { dg-do run }\n+\n+module foo\n+  use :: ieee_exceptions\n+  use :: ieee_arithmetic\n+end module foo\n+\n+module bar\n+  use foo\n+  use :: ieee_arithmetic, yyy => ieee_support_rounding\n+  use :: ieee_arithmetic, zzz => ieee_selected_real_kind\n+end module\n+\n+program test\n+  use :: bar\n+  use :: ieee_arithmetic, xxx => ieee_support_rounding\n+  implicit none\n+\n+  ! IEEE functions allowed in constant expressions\n+\n+  integer, parameter :: n1 = ieee_selected_real_kind(0, 0)\n+  logical, parameter :: l1 = ieee_support_halting(ieee_overflow)\n+  logical, parameter :: l2 = ieee_support_flag(ieee_overflow)\n+  logical, parameter :: l3 = ieee_support_flag(ieee_overflow, 0.)\n+  logical, parameter :: l4 = ieee_support_rounding(ieee_to_zero)\n+  logical, parameter :: l5 = ieee_support_rounding(ieee_to_zero, 0.d0)\n+\n+  logical, parameter :: l6 = xxx(ieee_to_zero, 0.d0)\n+  logical, parameter :: l7 = yyy(ieee_to_zero, 0.d0)\n+  integer, parameter :: n2 = zzz(0, 0)\n+\n+  call gee(8, ieee_to_zero, ieee_overflow)\n+\n+end\n+\n+! IEEE functions allowed in specification expressions\n+\n+subroutine gee(n, rounding, flag)\n+  use :: bar\n+  implicit none\n+\n+  integer :: n\n+  type(ieee_round_type) :: rounding\n+  type(ieee_flag_type) :: flag\n+\n+  character(len=ieee_selected_real_kind(n)) :: s1\n+  character(len=ieee_selected_real_kind(n,2*n)) :: s2\n+  character(len=ieee_selected_real_kind(n,2*n,2)) :: s3\n+\n+  character(len=merge(4,2,ieee_support_rounding(rounding))) :: s4\n+  character(len=merge(4,2,ieee_support_rounding(rounding, 0.d0))) :: s5\n+\n+  character(len=merge(4,2,ieee_support_flag(flag))) :: s6\n+  character(len=merge(4,2,ieee_support_flag(flag, 0.))) :: s7\n+\n+  character(len=merge(4,2,ieee_support_halting(flag))) :: s8\n+\n+  character(len=merge(4,2,ieee_support_datatype())) :: s9\n+  character(len=merge(4,2,ieee_support_datatype(0.))) :: s10\n+\n+  character(len=merge(4,2,ieee_support_denormal())) :: s11\n+  character(len=merge(4,2,ieee_support_denormal(0.))) :: s12\n+\n+  character(len=merge(4,2,ieee_support_divide())) :: s13\n+  character(len=merge(4,2,ieee_support_divide(0.))) :: s14\n+\n+  character(len=merge(4,2,ieee_support_inf())) :: s15\n+  character(len=merge(4,2,ieee_support_inf(0.))) :: s16\n+\n+  character(len=merge(4,2,ieee_support_io())) :: s17\n+  character(len=merge(4,2,ieee_support_io(0.))) :: s18\n+\n+  character(len=merge(4,2,ieee_support_nan())) :: s19\n+  character(len=merge(4,2,ieee_support_nan(0.))) :: s20\n+\n+  character(len=merge(4,2,ieee_support_sqrt())) :: s21\n+  character(len=merge(4,2,ieee_support_sqrt(0.))) :: s22\n+\n+  character(len=merge(4,2,ieee_support_standard())) :: s23\n+  character(len=merge(4,2,ieee_support_standard(0.))) :: s24\n+\n+  character(len=merge(4,2,ieee_support_underflow_control())) :: s25\n+  character(len=merge(4,2,ieee_support_underflow_control(0.))) :: s26\n+\n+  ! Now, check that runtime values match compile-time constants\n+  ! (for those that are allowed)\n+\n+  integer, parameter :: x1 = ieee_selected_real_kind(8)\n+  integer, parameter :: x2 = ieee_selected_real_kind(8,2*8)\n+  integer, parameter :: x3 = ieee_selected_real_kind(8,2*8,2)\n+\n+  integer, parameter :: x4 = merge(4,2,ieee_support_rounding(rounding))\n+  integer, parameter :: x5 = merge(4,2,ieee_support_rounding(rounding, 0.d0))\n+\n+  integer, parameter :: x6 = merge(4,2,ieee_support_flag(ieee_overflow))\n+  integer, parameter :: x7 = merge(4,2,ieee_support_flag(ieee_overflow, 0.))\n+\n+  integer, parameter :: x8 = merge(4,2,ieee_support_halting(ieee_overflow))\n+\n+  if (len(s1) /= x1) call abort\n+  if (len(s2) /= x2) call abort\n+  if (len(s3) /= x3) call abort\n+\n+  if (len(s4) /= x4) call abort\n+  if (len(s5) /= x5) call abort\n+\n+  if (len(s6) /= x6) call abort\n+  if (len(s7) /= x7) call abort\n+\n+  if (len(s8) /= x8) call abort\n+\n+end subroutine\n+\n+! { dg-final { cleanup-modules \"foo bar\" } }"}]}