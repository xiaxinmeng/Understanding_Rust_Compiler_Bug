{"sha": "c91a0948c3d72d8625111b5c5b6a0392c8830bb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkxYTA5NDhjM2Q3MmQ4NjI1MTExYjVjNWI2YTAzOTJjODgzMGJiNQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2016-05-20T21:04:31Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2016-05-20T21:04:31Z"}, "message": "[PR 70884] Constant pool SRA fix\n\n2016-05-20  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/70884\n\t* tree-sra.c (initialize_constant_pool_replacements): Do not check\n\tshould_scalarize_away_bitmap and cannot_scalarize_away_bitmap bits.\n\t(sort_and_splice_var_accesses): Do not consider multiple scalar reads\n\tof constant pool data as a reason for scalarization.\n\ntestsuite/\n\t* gcc.dg/tree-ssa/pr70919.c: New test.\n\nFrom-SVN: r236544", "tree": {"sha": "f3ee0dbb42bb38da5e7953b8f8168c1ce28cb200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3ee0dbb42bb38da5e7953b8f8168c1ce28cb200"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c91a0948c3d72d8625111b5c5b6a0392c8830bb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c91a0948c3d72d8625111b5c5b6a0392c8830bb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c91a0948c3d72d8625111b5c5b6a0392c8830bb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c91a0948c3d72d8625111b5c5b6a0392c8830bb5/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4727d4c6a81774e9b1de91a5e7089c6d17cc6d37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4727d4c6a81774e9b1de91a5e7089c6d17cc6d37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4727d4c6a81774e9b1de91a5e7089c6d17cc6d37"}], "stats": {"total": 113, "additions": 86, "deletions": 27}, "files": [{"sha": "dc38a17973c19f614e8e8aa6097fe04a35f4a44b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c91a0948c3d72d8625111b5c5b6a0392c8830bb5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c91a0948c3d72d8625111b5c5b6a0392c8830bb5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c91a0948c3d72d8625111b5c5b6a0392c8830bb5", "patch": "@@ -1,3 +1,11 @@\n+2016-05-20  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/70884\n+\t* tree-sra.c (initialize_constant_pool_replacements): Do not check\n+\tshould_scalarize_away_bitmap and cannot_scalarize_away_bitmap bits.\n+\t(sort_and_splice_var_accesses): Do not consider multiple scalar reads\n+\tof constant pool data as a reason for scalarization.\n+\n 2016-05-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/arm/arm.c (arm_expand_prologue): Set the stack usage to 0"}, {"sha": "b4ae11342fdd012ca68aa20bf08f69559c7d95bd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c91a0948c3d72d8625111b5c5b6a0392c8830bb5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c91a0948c3d72d8625111b5c5b6a0392c8830bb5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c91a0948c3d72d8625111b5c5b6a0392c8830bb5", "patch": "@@ -1,3 +1,8 @@\n+2016-05-20  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/70884\n+\t* gcc.dg/tree-ssa/pr70919.c: New test.\n+\n 2016-05-20  Bill Seurer  <seurer@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/vec-adde.c: Change dejagnu options, fix code"}, {"sha": "bed0ab37a2047a6964a40b80d513026d56f1b3ad", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr70919.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c91a0948c3d72d8625111b5c5b6a0392c8830bb5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr70919.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c91a0948c3d72d8625111b5c5b6a0392c8830bb5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr70919.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr70919.c?ref=c91a0948c3d72d8625111b5c5b6a0392c8830bb5", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O\" } */\n+\n+#pragma pack(1)\n+struct S0\n+{\n+  int f0:24;\n+};\n+\n+struct S1\n+{\n+  int f1;\n+} a;\n+\n+int b, c;\n+\n+char\n+fn1 (struct S1 p1)\n+{\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  c = fn1 (a);\n+  if (b)\n+    {\n+      struct S0 f[3][9] =\n+\t{ { { 0 }, { 0 }, { 1 }, { 1 }, { 0 }, { 0 }, { 0 }, { 1 }, { 1 } },\n+\t  { { 0 }, { 0 }, { 1 }, { 1 }, { 0 }, { 0 }, { 0 }, { 1 }, { 1 } },\n+\t  { { 0 }, { 0 }, { 1 }, { 1 }, { 0 }, { 0 }, { 0 }, { 1 }, { 1 } }\n+\t};\n+      b = f[1][8].f0;\n+    }\n+  struct S0 g[3][9] =\n+\t{ { { 0 }, { 0 }, { 1 }, { 1 }, { 0 }, { 0 }, { 0 }, { 1 }, { 1 } },\n+\t  { { 0 }, { 0 }, { 1 }, { 1 }, { 0 }, { 0 }, { 0 }, { 1 }, { 1 } },\n+\t  { { 0 }, { 0 }, { 1 }, { 1 }, { 0 }, { 0 }, { 0 }, { 1 }, { 1 } }\n+\t};\n+\n+  if (g[1][8].f0 != 1)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "7c0e90d84bc5fae842e801653b672aa5f1e31ef1", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c91a0948c3d72d8625111b5c5b6a0392c8830bb5/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c91a0948c3d72d8625111b5c5b6a0392c8830bb5/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=c91a0948c3d72d8625111b5c5b6a0392c8830bb5", "patch": "@@ -2074,7 +2074,8 @@ sort_and_splice_var_accesses (tree var)\n       access->grp_scalar_write = grp_scalar_write;\n       access->grp_assignment_read = grp_assignment_read;\n       access->grp_assignment_write = grp_assignment_write;\n-      access->grp_hint = multiple_scalar_reads || total_scalarization;\n+      access->grp_hint = total_scalarization\n+\t|| (multiple_scalar_reads && !constant_decl_p (var));\n       access->grp_total_scalarization = total_scalarization;\n       access->grp_partial_lhs = grp_partial_lhs;\n       access->grp_unscalarizable_region = unscalarizable_region;\n@@ -3559,32 +3560,31 @@ initialize_constant_pool_replacements (void)\n   unsigned i;\n \n   EXECUTE_IF_SET_IN_BITMAP (candidate_bitmap, 0, i, bi)\n-    if (bitmap_bit_p (should_scalarize_away_bitmap, i)\n-\t&& !bitmap_bit_p (cannot_scalarize_away_bitmap, i))\n-      {\n-\ttree var = candidate (i);\n-\tif (!constant_decl_p (var))\n-\t  continue;\n-\tvec<access_p> *access_vec = get_base_access_vector (var);\n-\tif (!access_vec)\n-\t  continue;\n-\tfor (unsigned i = 0; i < access_vec->length (); i++)\n-\t  {\n-\t    struct access *access = (*access_vec)[i];\n-\t    if (!access->replacement_decl)\n-\t      continue;\n-\t    gassign *stmt = gimple_build_assign (\n-\t      get_access_replacement (access), unshare_expr (access->expr));\n-\t    if (dump_file && (dump_flags & TDF_DETAILS))\n-\t      {\n-\t\tfprintf (dump_file, \"Generating constant initializer: \");\n-\t\tprint_gimple_stmt (dump_file, stmt, 0, 1);\n-\t\tfprintf (dump_file, \"\\n\");\n-\t      }\n-\t    gsi_insert_after (&gsi, stmt, GSI_NEW_STMT);\n-\t    update_stmt (stmt);\n-\t  }\n-      }\n+    {\n+      tree var = candidate (i);\n+      if (!constant_decl_p (var))\n+\tcontinue;\n+      vec<access_p> *access_vec = get_base_access_vector (var);\n+      if (!access_vec)\n+\tcontinue;\n+      for (unsigned i = 0; i < access_vec->length (); i++)\n+\t{\n+\t  struct access *access = (*access_vec)[i];\n+\t  if (!access->replacement_decl)\n+\t    continue;\n+\t  gassign *stmt\n+\t    = gimple_build_assign (get_access_replacement (access),\n+\t\t\t\t   unshare_expr (access->expr));\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    {\n+\t      fprintf (dump_file, \"Generating constant initializer: \");\n+\t      print_gimple_stmt (dump_file, stmt, 0, 1);\n+\t      fprintf (dump_file, \"\\n\");\n+\t    }\n+\t  gsi_insert_after (&gsi, stmt, GSI_NEW_STMT);\n+\t  update_stmt (stmt);\n+\t}\n+    }\n \n   seq = gsi_seq (gsi);\n   if (seq)"}]}