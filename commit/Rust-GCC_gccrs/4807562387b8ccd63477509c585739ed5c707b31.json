{"sha": "4807562387b8ccd63477509c585739ed5c707b31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgwNzU2MjM4N2I4Y2NkNjM0Nzc1MDljNTg1NzM5ZWQ1YzcwN2IzMQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2007-08-04T05:21:30Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2007-08-04T05:21:30Z"}, "message": "re PR middle-end/32780 (ICE in extract_range_from_binary_expr, at tree-vrp.c:1793 at -O2 or higher)\n\n\n2007-08-04  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR middle-end/32780\n        * fold-const.c (fold_binary <case MINUS_EXPR>): Fix the type of operands\n        for the folding of \"A - (A & B)\" into \"~B & A\"; cast them to type.\n\n2007-08-04  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR middle-end/32780\n        * gcc.c-torture/compile/pr32780.c: New test.\n\nFrom-SVN: r127199", "tree": {"sha": "dd143a45c0ea4ee40bb1d05ffa346fe1e2ebb11f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd143a45c0ea4ee40bb1d05ffa346fe1e2ebb11f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4807562387b8ccd63477509c585739ed5c707b31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4807562387b8ccd63477509c585739ed5c707b31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4807562387b8ccd63477509c585739ed5c707b31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4807562387b8ccd63477509c585739ed5c707b31/comments", "author": null, "committer": null, "parents": [{"sha": "d531cdb15c6da4ea13e95a2d2332d2aeabddbe05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d531cdb15c6da4ea13e95a2d2332d2aeabddbe05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d531cdb15c6da4ea13e95a2d2332d2aeabddbe05"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "36a43421ec09e044014d0e8a500b72ca3812584d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4807562387b8ccd63477509c585739ed5c707b31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4807562387b8ccd63477509c585739ed5c707b31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4807562387b8ccd63477509c585739ed5c707b31", "patch": "@@ -1,3 +1,9 @@\n+2007-08-04  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR middle-end/32780\n+\t* fold-const.c (fold_binary <case MINUS_EXPR>): Fix the type of operands\n+\tfor the folding of \"A - (A & B)\" into \"~B & A\"; cast them to type.\n+\n 2007-08-03  Zdenek Dvorak  <ook@ucw.cz>\n \n \t* tree-ssa-threadupdate.c (thread_through_all_blocks): Use loops' state"}, {"sha": "154454a72a472cf220a4877c39f7a06f0799323e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4807562387b8ccd63477509c585739ed5c707b31/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4807562387b8ccd63477509c585739ed5c707b31/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4807562387b8ccd63477509c585739ed5c707b31", "patch": "@@ -9730,15 +9730,19 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t      && TREE_CODE (arg1) == BIT_AND_EXPR)\n \t    {\n \t      if (operand_equal_p (arg0, TREE_OPERAND (arg1, 1), 0))\n-\t\treturn fold_build2 (BIT_AND_EXPR, type,\n-\t\t\t\t    fold_build1 (BIT_NOT_EXPR, type,\n-\t\t\t\t\t\t TREE_OPERAND (arg1, 0)),\n-\t\t\t\t    arg0);\n+\t\t{\n+\t\t  tree arg10 = fold_convert (type, TREE_OPERAND (arg1, 0));\n+\t\t  return fold_build2 (BIT_AND_EXPR, type,\n+\t\t\t\t      fold_build1 (BIT_NOT_EXPR, type, arg10),\n+\t\t\t\t      fold_convert (type, arg0));\n+\t\t}\n \t      if (operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0))\n-\t\treturn fold_build2 (BIT_AND_EXPR, type,\n-\t\t\t\t    fold_build1 (BIT_NOT_EXPR, type,\n-\t\t\t\t\t\t TREE_OPERAND (arg1, 1)),\n-\t\t\t\t    arg0);\n+\t\t{\n+\t\t  tree arg11 = fold_convert (type, TREE_OPERAND (arg1, 1));\n+\t\t  return fold_build2 (BIT_AND_EXPR, type,\n+\t\t\t\t      fold_build1 (BIT_NOT_EXPR, type, arg11),\n+\t\t\t\t      fold_convert (type, arg0));\n+\t\t}\n \t    }\n \n \t  /* Fold (A & ~B) - (A & B) into (A ^ B) - B, where B is"}, {"sha": "9371c1cb04ea158c00d7ccbfc2be7f4849ae051f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4807562387b8ccd63477509c585739ed5c707b31/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4807562387b8ccd63477509c585739ed5c707b31/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4807562387b8ccd63477509c585739ed5c707b31", "patch": "@@ -1,3 +1,8 @@\n+2007-08-04  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR middle-end/32780\n+\t* gcc.c-torture/compile/pr32780.c: New test.\n+\n 2007-08-03  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tRP middle-end/32399"}, {"sha": "cfe64e434ca5510618411bba54decf66fa60bd25", "filename": "gcc/testsuite/gcc.c-torture/compile/pr32780.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4807562387b8ccd63477509c585739ed5c707b31/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr32780.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4807562387b8ccd63477509c585739ed5c707b31/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr32780.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr32780.c?ref=4807562387b8ccd63477509c585739ed5c707b31", "patch": "@@ -0,0 +1,10 @@\n+typedef __SIZE_TYPE__ size_t;\n+extern void dont_optimize_away(size_t);\n+\n+void crashGcc(char*a)\n+{\n+        size_t b=(size_t)a - ((size_t)a & 1);\n+        size_t c=(size_t)a - (b & (size_t)a);\n+        dont_optimize_away(b+c);\n+}\n+"}]}