{"sha": "32b0abb24b8702ec9954448739682ace6fa5ccf5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJiMGFiYjI0Yjg3MDJlYzk5NTQ0NDg3Mzk2ODJhY2U2ZmE1Y2NmNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-26T07:44:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-26T07:46:14Z"}, "message": "i386: Optimize psubusw compared to 0 into pminuw compared to op0 [PR96906]\n\nThe following patch renames VI12_AVX2 iterator to VI12_AVX2_AVX512BW\nfor consistency with some other iterators, as I need VI12_AVX2 without\nAVX512BW for this change.\nThe real meat is a combiner split which combine\ncan use to optimize psubusw compared to 0 into pminuw compared to op0\n(and similarly for psubusb compared to 0 into pminub compared to op0).\nAccording to Agner Fog's tables, psubus[bw] and pminu[bw] timings\nare the same, but the advantage of pminu[bw] is that the comparison\ndoesn't need a zero operand, so e.g. for -msse4.1 it causes changes like\n-       psubusw %xmm1, %xmm0\n-       pxor    %xmm1, %xmm1\n+       pminuw  %xmm0, %xmm1\n        pcmpeqw %xmm1, %xmm0\nand similarly for avx2:\n-       vpsubusb        %ymm1, %ymm0, %ymm0\n-       vpxor   %xmm1, %xmm1, %xmm1\n-       vpcmpeqb        %ymm1, %ymm0, %ymm0\n+       vpminub %ymm1, %ymm0, %ymm1\n+       vpcmpeqb        %ymm0, %ymm1, %ymm0\n\nI haven't done the AVX512{BW,VL} define_split(s), they'll need\nto match the UNSPEC_PCMP which are used for avx512 comparisons.\n\n2020-11-26  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/96906\n\t* config/i386/sse.md (VI12_AVX2): Remove V64QI/V32HI modes.\n\t(VI12_AVX2_AVX512BW): New mode iterator.\n\t(<sse2_avx2>_<plusminus_insn><mode>3<mask_name>,\n\tuavg<mode>3_ceil, <sse2_avx2>_uavg<mode>3<mask_name>): Use\n\tVI12_AVX2_AVX512BW iterator instead of VI12_AVX2.\n\t(*<sse2_avx2>_<plusminus_insn><mode>3<mask_name>): Likewise.\n\t(*<sse2_avx2>_uavg<mode>3<mask_name>): Likewise.\n\t(*<sse2_avx2>_<plusminus_insn><mode>3<mask_name>): Add a new\n\tdefine_split after this insn.\n\n\t* gcc.target/i386/pr96906-1.c: New test.", "tree": {"sha": "4e36a72b8c81c870020720f0a26d9f166873b462", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e36a72b8c81c870020720f0a26d9f166873b462"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32b0abb24b8702ec9954448739682ace6fa5ccf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32b0abb24b8702ec9954448739682ace6fa5ccf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32b0abb24b8702ec9954448739682ace6fa5ccf5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32b0abb24b8702ec9954448739682ace6fa5ccf5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "768ce4f0ceb030e38427e85e483ed44330cd5da7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/768ce4f0ceb030e38427e85e483ed44330cd5da7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/768ce4f0ceb030e38427e85e483ed44330cd5da7"}], "stats": {"total": 123, "additions": 103, "deletions": 20}, "files": [{"sha": "4aad462f882b68566a54b4a2d9f8872f7631f8c3", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 41, "deletions": 20, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32b0abb24b8702ec9954448739682ace6fa5ccf5/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32b0abb24b8702ec9954448739682ace6fa5ccf5/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=32b0abb24b8702ec9954448739682ace6fa5ccf5", "patch": "@@ -466,6 +466,10 @@\n   [(V4TI \"TARGET_AVX512BW\") (V2TI \"TARGET_AVX2\") TI])\n \n (define_mode_iterator VI12_AVX2\n+  [(V32QI \"TARGET_AVX2\") V16QI\n+   (V16HI \"TARGET_AVX2\") V8HI])\n+\n+(define_mode_iterator VI12_AVX2_AVX512BW\n   [(V64QI \"TARGET_AVX512BW\") (V32QI \"TARGET_AVX2\") V16QI\n    (V32HI \"TARGET_AVX512BW\") (V16HI \"TARGET_AVX2\") V8HI])\n \n@@ -11395,18 +11399,18 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_expand \"<sse2_avx2>_<plusminus_insn><mode>3<mask_name>\"\n-  [(set (match_operand:VI12_AVX2 0 \"register_operand\")\n-\t(sat_plusminus:VI12_AVX2\n-\t  (match_operand:VI12_AVX2 1 \"vector_operand\")\n-\t  (match_operand:VI12_AVX2 2 \"vector_operand\")))]\n+  [(set (match_operand:VI12_AVX2_AVX512BW 0 \"register_operand\")\n+\t(sat_plusminus:VI12_AVX2_AVX512BW\n+\t  (match_operand:VI12_AVX2_AVX512BW 1 \"vector_operand\")\n+\t  (match_operand:VI12_AVX2_AVX512BW 2 \"vector_operand\")))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n (define_insn \"*<sse2_avx2>_<plusminus_insn><mode>3<mask_name>\"\n-  [(set (match_operand:VI12_AVX2 0 \"register_operand\" \"=x,v\")\n-\t(sat_plusminus:VI12_AVX2\n-\t  (match_operand:VI12_AVX2 1 \"vector_operand\" \"<comm>0,v\")\n-\t  (match_operand:VI12_AVX2 2 \"vector_operand\" \"xBm,vm\")))]\n+  [(set (match_operand:VI12_AVX2_AVX512BW 0 \"register_operand\" \"=x,v\")\n+\t(sat_plusminus:VI12_AVX2_AVX512BW\n+\t  (match_operand:VI12_AVX2_AVX512BW 1 \"vector_operand\" \"<comm>0,v\")\n+\t  (match_operand:VI12_AVX2_AVX512BW 2 \"vector_operand\" \"xBm,vm\")))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"@\n@@ -11418,6 +11422,23 @@\n    (set_attr \"prefix\" \"orig,maybe_evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+;; PR96906 - optimize psubusw compared to 0 into pminuw compared to op0.\n+(define_split\n+  [(set (match_operand:VI12_AVX2 0 \"register_operand\")\n+\t(eq:VI12_AVX2\n+\t  (us_minus:VI12_AVX2\n+\t    (match_operand:VI12_AVX2 1 \"vector_operand\")\n+\t    (match_operand:VI12_AVX2 2 \"vector_operand\"))\n+\t  (match_operand:VI12_AVX2 3 \"const0_operand\")))]\n+  \"TARGET_SSE2\n+   && (<MODE>mode != V8HImode || TARGET_SSE4_1)\n+   && ix86_binary_operator_ok (US_MINUS, <MODE>mode, operands)\"\n+  [(set (match_dup 4)\n+        (umin:VI12_AVX2 (match_dup 1) (match_dup 2)))\n+   (set (match_dup 0)\n+\t(eq:VI12_AVX2 (match_dup 4) (match_dup 1)))]\n+  \"operands[4] = gen_reg_rtx (<MODE>mode);\")\n+\n (define_expand \"mulv8qi3\"\n   [(set (match_operand:V8QI 0 \"register_operand\")\n \t(mult:V8QI (match_operand:V8QI 1 \"register_operand\")\n@@ -12022,15 +12043,15 @@\n })\n \n (define_expand \"uavg<mode>3_ceil\"\n-  [(set (match_operand:VI12_AVX2 0 \"register_operand\")\n-\t(truncate:VI12_AVX2\n+  [(set (match_operand:VI12_AVX2_AVX512BW 0 \"register_operand\")\n+\t(truncate:VI12_AVX2_AVX512BW\n \t  (lshiftrt:<ssedoublemode>\n \t    (plus:<ssedoublemode>\n \t      (plus:<ssedoublemode>\n \t\t(zero_extend:<ssedoublemode>\n-\t\t  (match_operand:VI12_AVX2 1 \"vector_operand\"))\n+\t\t  (match_operand:VI12_AVX2_AVX512BW 1 \"vector_operand\"))\n \t\t(zero_extend:<ssedoublemode>\n-\t\t  (match_operand:VI12_AVX2 2 \"vector_operand\")))\n+\t\t  (match_operand:VI12_AVX2_AVX512BW 2 \"vector_operand\")))\n \t      (match_dup 3))\n \t    (const_int 1))))]\n   \"TARGET_SSE2\"\n@@ -15744,15 +15765,15 @@\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n (define_expand \"<sse2_avx2>_uavg<mode>3<mask_name>\"\n-  [(set (match_operand:VI12_AVX2 0 \"register_operand\")\n-\t(truncate:VI12_AVX2\n+  [(set (match_operand:VI12_AVX2_AVX512BW 0 \"register_operand\")\n+\t(truncate:VI12_AVX2_AVX512BW\n \t  (lshiftrt:<ssedoublemode>\n \t    (plus:<ssedoublemode>\n \t      (plus:<ssedoublemode>\n \t\t(zero_extend:<ssedoublemode>\n-\t\t  (match_operand:VI12_AVX2 1 \"vector_operand\"))\n+\t\t  (match_operand:VI12_AVX2_AVX512BW 1 \"vector_operand\"))\n \t\t(zero_extend:<ssedoublemode>\n-\t\t  (match_operand:VI12_AVX2 2 \"vector_operand\")))\n+\t\t  (match_operand:VI12_AVX2_AVX512BW 2 \"vector_operand\")))\n \t      (match_dup <mask_expand_op3>))\n \t    (const_int 1))))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n@@ -15762,15 +15783,15 @@\n })\n \n (define_insn \"*<sse2_avx2>_uavg<mode>3<mask_name>\"\n-  [(set (match_operand:VI12_AVX2 0 \"register_operand\" \"=x,v\")\n-\t(truncate:VI12_AVX2\n+  [(set (match_operand:VI12_AVX2_AVX512BW 0 \"register_operand\" \"=x,v\")\n+\t(truncate:VI12_AVX2_AVX512BW\n \t  (lshiftrt:<ssedoublemode>\n \t    (plus:<ssedoublemode>\n \t      (plus:<ssedoublemode>\n \t\t(zero_extend:<ssedoublemode>\n-\t\t  (match_operand:VI12_AVX2 1 \"vector_operand\" \"%0,v\"))\n+\t\t  (match_operand:VI12_AVX2_AVX512BW 1 \"vector_operand\" \"%0,v\"))\n \t\t(zero_extend:<ssedoublemode>\n-\t\t  (match_operand:VI12_AVX2 2 \"vector_operand\" \"xBm,vm\")))\n+\t\t  (match_operand:VI12_AVX2_AVX512BW 2 \"vector_operand\" \"xBm,vm\")))\n \t      (match_operand:<ssedoublemode> <mask_expand_op3> \"const1_operand\"))\n \t    (const_int 1))))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>"}, {"sha": "9d836eb2bdd1e1a990588f7b18a73f4321c24b39", "filename": "gcc/testsuite/gcc.target/i386/pr96906-1.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32b0abb24b8702ec9954448739682ace6fa5ccf5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96906-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32b0abb24b8702ec9954448739682ace6fa5ccf5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96906-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96906-1.c?ref=32b0abb24b8702ec9954448739682ace6fa5ccf5", "patch": "@@ -0,0 +1,62 @@\n+/* PR target/96906 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+/* { dg-final { scan-assembler-times \"\\tvpminub\\[^\\n\\r]*xmm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tvpminuw\\[^\\n\\r]*xmm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tvpminub\\[^\\n\\r]*ymm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tvpminuw\\[^\\n\\r]*ymm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tvpcmpeqb\\[^\\n\\r]*xmm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tvpcmpeqw\\[^\\n\\r]*xmm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tvpcmpeqb\\[^\\n\\r]*ymm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tvpcmpeqw\\[^\\n\\r]*ymm\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\tvpsubus\\[bw]\" } } */\n+\n+#include <x86intrin.h>\n+\n+__m128i\n+f1 (__m128i x, __m128i y)\n+{\n+  return _mm_cmpeq_epi16 (_mm_subs_epu16 (x, y), _mm_setzero_si128 ());\n+}\n+\n+__m128i\n+f2 (__m128i x, __m128i y)\n+{\n+  return _mm_cmpeq_epi16 (_mm_min_epu16 (x, y), x);\n+}\n+\n+__m128i\n+f3 (__m128i x, __m128i y)\n+{\n+  return _mm_cmpeq_epi8 (_mm_subs_epu8 (x, y), _mm_setzero_si128 ());\n+}\n+\n+__m128i\n+f4 (__m128i x, __m128i y)\n+{\n+  return _mm_cmpeq_epi8 (_mm_min_epu8 (x, y), x);\n+}\n+\n+__m256i\n+f5 (__m256i x, __m256i y)\n+{\n+  return _mm256_cmpeq_epi16 (_mm256_subs_epu16 (x, y), _mm256_setzero_si256 ());\n+}\n+\n+__m256i\n+f6 (__m256i x, __m256i y)\n+{\n+  return _mm256_cmpeq_epi16 (_mm256_min_epu16 (x, y), x);\n+}\n+\n+__m256i\n+f7 (__m256i x, __m256i y)\n+{\n+  return _mm256_cmpeq_epi8 (_mm256_subs_epu8 (x, y), _mm256_setzero_si256 ());\n+}\n+\n+__m256i\n+f8 (__m256i x, __m256i y)\n+{\n+  return _mm256_cmpeq_epi8 (_mm256_min_epu8 (x, y), x);\n+}"}]}