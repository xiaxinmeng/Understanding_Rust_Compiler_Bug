{"sha": "2717634daab64ed32a49b329f61cf0064f80f046", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcxNzYzNGRhYWI2NGVkMzJhNDliMzI5ZjYxY2YwMDY0ZjgwZjA0Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-12-08T11:26:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-12-08T11:26:46Z"}, "message": "exp_ch4.adb (Expand_N_Indexed_Component): For an indexed component with an implicit dereference as its prefix...\n\n\t* exp_ch4.adb (Expand_N_Indexed_Component): For an indexed component\n\twith an implicit dereference as its prefix, use\n\tInsert_Explicit_Dereference instead of merely rewriting the prefix into\n\tan explicit dereference. This ensures that a reference to the original\n\tprefix is generated, if appropriate.\n\n\t* sem_util.adb (Insert_Explicit_Dereference): When an implicit\n\tdereference is rewritten to an explicit one, generate a reference to\n\tthe entity denoted by its prefix using the original prefix node, so\n\tthe dereference can be properly recorded as a read of the denoted\n\taccess value, if appropriate.\n\n\t* sem_warn.adb (Output_Unreferenced_Messages): Do not abstain from\n\temitting 'assigned but never read' warning on a variable on the basis\n\tthat it has an access type.\n\t(Check_References): Emit unreferenced warning when the scope is a\n\tsubprogram body.\n\nFrom-SVN: r91881", "tree": {"sha": "80a2c09a38886e46b64411da23e90656c1713647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80a2c09a38886e46b64411da23e90656c1713647"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2717634daab64ed32a49b329f61cf0064f80f046", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2717634daab64ed32a49b329f61cf0064f80f046", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2717634daab64ed32a49b329f61cf0064f80f046", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2717634daab64ed32a49b329f61cf0064f80f046/comments", "author": null, "committer": null, "parents": [{"sha": "e913f03badb889da71c50a230b357aac6561ea01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e913f03badb889da71c50a230b357aac6561ea01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e913f03badb889da71c50a230b357aac6561ea01"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "67fc5e806406713679c6b0b8055bf42c66889be5", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2717634daab64ed32a49b329f61cf0064f80f046/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2717634daab64ed32a49b329f61cf0064f80f046/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=2717634daab64ed32a49b329f61cf0064f80f046", "patch": "@@ -1780,7 +1780,7 @@ package body Exp_Ch4 is\n    --            end loop;\n    --         end if;\n \n-   --         ...\n+   --         . . .\n \n    --         if Sn'Length /= 0 then\n    --            P := Sn'First;\n@@ -2914,7 +2914,7 @@ package body Exp_Ch4 is\n       --         Cnn := else-expr\n       --      end if;\n \n-      --  and replace the conditional expression by a reference to Cnn.\n+      --  and replace the conditional expression by a reference to Cnn\n \n       if Present (Then_Actions (N)) or else Present (Else_Actions (N)) then\n          Cnn := Make_Defining_Identifier (Loc, New_Internal_Name ('C'));\n@@ -3273,9 +3273,7 @@ package body Exp_Ch4 is\n       --  was necessary, but it cleans up the code to do it all the time.\n \n       if Is_Access_Type (T) then\n-         Rewrite (P,\n-           Make_Explicit_Dereference (Sloc (N),\n-             Prefix => Relocate_Node (P)));\n+         Insert_Explicit_Dereference (P);\n          Analyze_And_Resolve (P, Designated_Type (T));\n       end if;\n \n@@ -3921,7 +3919,7 @@ package body Exp_Ch4 is\n                --     Obj1 : Enclosing_UU_Type;\n                --     Obj2 : Enclosing_UU_Type (1);\n \n-               --     . . . Obj1 = Obj2 . . .\n+               --     [. . .] Obj1 = Obj2 [. . .]\n \n                --     Generated code:\n \n@@ -6735,7 +6733,7 @@ package body Exp_Ch4 is\n \n          --     ityp (x)\n \n-         --  with the Float_Truncate flag set. This is clearly more efficient.\n+         --  with the Float_Truncate flag set. This is clearly more efficient\n \n          if Nkind (Operand) = N_Attribute_Reference\n            and then Attribute_Name (Operand) = Name_Truncation"}, {"sha": "cc0cc6fd43bdea76fddd20b051956cb1b4b1a798", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2717634daab64ed32a49b329f61cf0064f80f046/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2717634daab64ed32a49b329f61cf0064f80f046/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=2717634daab64ed32a49b329f61cf0064f80f046", "patch": "@@ -2631,7 +2631,7 @@ package body Sem_Util is\n    begin\n       Get_Unit_Name_String (Unit_Name_Id);\n \n-      --  Remove seven last character (\" (spec)\" or \" (body)\").\n+      --  Remove seven last character (\" (spec)\" or \" (body)\")\n \n       Name_Len := Name_Len - 7;\n       pragma Assert (Name_Buffer (Name_Len + 1) = ' ');\n@@ -3136,6 +3136,7 @@ package body Sem_Util is\n \n    procedure Insert_Explicit_Dereference (N : Node_Id) is\n       New_Prefix : constant Node_Id := Relocate_Node (N);\n+      Ent        : Entity_Id := Empty;\n       I          : Interp_Index;\n       It         : Interp;\n       T          : Entity_Id;\n@@ -3166,6 +3167,21 @@ package body Sem_Util is\n          end loop;\n \n          End_Interp_List;\n+\n+      else\n+         --  Prefix is unambiguous: mark the original prefix (which might\n+         --  Come_From_Source) as a reference, since the new (relocated) one\n+         --  won't be taken into account.\n+\n+         if Is_Entity_Name (New_Prefix) then\n+            Ent := Entity (New_Prefix);\n+         elsif Nkind (New_Prefix) = N_Selected_Component then\n+            Ent := Entity (Selector_Name (New_Prefix));\n+         end if;\n+\n+         if Present (Ent) then\n+            Generate_Reference (Ent, New_Prefix);\n+         end if;\n       end if;\n    end Insert_Explicit_Dereference;\n "}, {"sha": "371060669cbf81bc219bcacc7720b6260b152655", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2717634daab64ed32a49b329f61cf0064f80f046/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2717634daab64ed32a49b329f61cf0064f80f046/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=2717634daab64ed32a49b329f61cf0064f80f046", "patch": "@@ -563,6 +563,7 @@ package body Sem_Warn is\n                                 (Ekind (E) = E_Function\n                                   or else Ekind (E) = E_Package_Body\n                                   or else Ekind (E) = E_Procedure\n+                                  or else Ekind (E) = E_Subprogram_Body\n                                   or else Ekind (E) = E_Block)))\n \n                --  Exclude instantiations, since there is no reason why\n@@ -670,7 +671,7 @@ package body Sem_Warn is\n                Unreferenced_Entities.Increment_Last;\n                Unreferenced_Entities.Table (Unreferenced_Entities.Last) := E1;\n \n-               --  Force warning on entity.\n+               --  Force warning on entity\n \n                Set_Referenced (E1, False);\n             end if;\n@@ -994,7 +995,7 @@ package body Sem_Warn is\n             Un : constant Node_Id := Sinfo.Unit (Cnode);\n \n             function Check_Use_Clause (N : Node_Id) return Traverse_Result;\n-            --  If N is a use_clause for Pack, emit warning.\n+            --  If N is a use_clause for Pack, emit warning\n \n             procedure Check_Use_Clauses is new\n               Traverse_Proc (Check_Use_Clause);\n@@ -1484,22 +1485,13 @@ package body Sem_Warn is\n                      if Warn_On_Modified_Unread\n                        and then not Is_Imported (E)\n \n-                        --  Suppress the message for aliased, renamed\n-                        --  and access variables since there may be\n-                        --  other entities that read the memory location.\n+                        --  Suppress the message for aliased or renamed\n+                        --  variables, since there may be other entities\n+                        --  read the same memory location.\n \n                        and then not Is_Aliased (E)\n                        and then No (Renamed_Object (E))\n-                       and then not (Is_Access_Type (Etype (E))\n-                                       or else\n \n-                        --  Case of private access type, must examine the\n-                        --  full view due to visibility issues.\n-\n-                                       (Is_Private_Type (Etype (E))\n-                                          and then\n-                                          Is_Access_Type\n-                                            (Full_View (Etype (E)))))\n                      then\n                         Error_Msg_N\n                           (\"variable & is assigned but never read?\", E);"}]}