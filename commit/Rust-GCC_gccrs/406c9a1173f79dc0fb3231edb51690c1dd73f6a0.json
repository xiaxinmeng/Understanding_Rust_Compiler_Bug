{"sha": "406c9a1173f79dc0fb3231edb51690c1dd73f6a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA2YzlhMTE3M2Y3OWRjMGZiMzIzMWVkYjUxNjkwYzFkZDczZjZhMA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-09-28T15:35:37Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-09-28T15:35:37Z"}, "message": "PR c++/91889 - follow-up fix for DR 2352.\n\n\t* call.c (involves_qualification_conversion_p): New function.\n\t(direct_reference_binding): Build a ck_qual if the conversion\n\twould involve a qualification conversion.\n\t(convert_like_real): Strip the conversion created by the ck_qual\n\tin direct_reference_binding.\n\n\t* g++.dg/cpp0x/ref-bind3.C: Add dg-error.\n\t* g++.dg/cpp0x/ref-bind4.C: New test.\n\t* g++.dg/cpp0x/ref-bind5.C: New test.\n\t* g++.dg/cpp0x/ref-bind6.C: New test.\n\t* g++.old-deja/g++.pt/spec35.C: Revert earlier change.\n\nFrom-SVN: r276251", "tree": {"sha": "c97288a968cae89f56b73fb3f74a970d5234bd01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c97288a968cae89f56b73fb3f74a970d5234bd01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/406c9a1173f79dc0fb3231edb51690c1dd73f6a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/406c9a1173f79dc0fb3231edb51690c1dd73f6a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/406c9a1173f79dc0fb3231edb51690c1dd73f6a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/406c9a1173f79dc0fb3231edb51690c1dd73f6a0/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cf66a2dbe8017f59d2b28e8db3de8067efcc43e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf66a2dbe8017f59d2b28e8db3de8067efcc43e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cf66a2dbe8017f59d2b28e8db3de8067efcc43e"}], "stats": {"total": 177, "additions": 159, "deletions": 18}, "files": [{"sha": "a1e520a5137842659121773e9d1bbc6ffee56c70", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406c9a1173f79dc0fb3231edb51690c1dd73f6a0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406c9a1173f79dc0fb3231edb51690c1dd73f6a0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=406c9a1173f79dc0fb3231edb51690c1dd73f6a0", "patch": "@@ -1,5 +1,12 @@\n 2019-09-28  Marek Polacek  <polacek@redhat.com>\n \n+\tPR c++/91889 - follow-up fix for DR 2352.\n+\t* call.c (involves_qualification_conversion_p): New function.\n+\t(direct_reference_binding): Build a ck_qual if the conversion\n+\twould involve a qualification conversion.\n+\t(convert_like_real): Strip the conversion created by the ck_qual\n+\tin direct_reference_binding.\n+\n \tPR c++/91921 - stray warning with -Woverloaded-virtual.\n \t* class.c (warn_hidden): Only emit the second part of\n \t-Woverloaded-virtual if the first part was issued.  Use inform instead"}, {"sha": "56dcbd391c139dd615b34f3378a121d72e7e8770", "filename": "gcc/cp/call.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406c9a1173f79dc0fb3231edb51690c1dd73f6a0/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406c9a1173f79dc0fb3231edb51690c1dd73f6a0/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=406c9a1173f79dc0fb3231edb51690c1dd73f6a0", "patch": "@@ -1555,6 +1555,27 @@ reference_compatible_p (tree t1, tree t2)\n   return true;\n }\n \n+/* Return true if converting FROM to TO would involve a qualification\n+   conversion.  */\n+\n+static bool\n+involves_qualification_conversion_p (tree to, tree from)\n+{\n+  /* If we're not convering a pointer to another one, we won't get\n+     a qualification conversion.  */\n+  if (!((TYPE_PTR_P (to) && TYPE_PTR_P (from))\n+\t|| (TYPE_PTRDATAMEM_P (to) && TYPE_PTRDATAMEM_P (from))))\n+    return false;\n+\n+  conversion *conv = standard_conversion (to, from, NULL_TREE,\n+\t\t\t\t\t  /*c_cast_p=*/false, 0, tf_none);\n+  for (conversion *t = conv; t; t = next_conversion (t))\n+    if (t->kind == ck_qual)\n+      return true;\n+\n+  return false;\n+}\n+\n /* A reference of the indicated TYPE is being bound directly to the\n    expression represented by the implicit conversion sequence CONV.\n    Return a conversion sequence for this binding.  */\n@@ -1598,6 +1619,19 @@ direct_reference_binding (tree type, conversion *conv)\n \t That way, convert_like knows not to generate a temporary.  */\n       conv->need_temporary_p = false;\n     }\n+  else if (involves_qualification_conversion_p (t, conv->type))\n+    /* Represent the qualification conversion.  After DR 2352\n+       #1 and #2 were indistinguishable conversion sequences:\n+\n+\t void f(int*); // #1\n+\t void f(const int* const &); // #2\n+\t void g(int* p) { f(p); }\n+\n+       because the types \"int *\" and \"const int *const\" are\n+       reference-related and we were binding both directly and they\n+       had the same rank.  To break it up, we add a ck_qual under the\n+       ck_ref_bind so that conversion sequence ranking chooses #1.  */\n+    conv = build_conv (ck_qual, t, conv);\n \n   return build_conv (ck_ref_bind, type, conv);\n }\n@@ -7342,6 +7376,18 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n       {\n \ttree ref_type = totype;\n \n+\t/* direct_reference_binding might have inserted a ck_qual under\n+\t   this ck_ref_bind for the benefit of conversion sequence ranking.\n+\t   Ignore the conversion; we'll create our own below.  */\n+\tif (next_conversion (convs)->kind == ck_qual)\n+\t  {\n+\t    gcc_assert (same_type_p (TREE_TYPE (expr),\n+\t\t\t\t     next_conversion (convs)->type));\n+\t    /* Strip the cast created by the ck_qual; cp_build_addr_expr\n+\t       below expects an lvalue.  */\n+\t    STRIP_NOPS (expr);\n+\t  }\n+\n \tif (convs->bad_p && !next_conversion (convs)->bad_p)\n \t  {\n \t    tree extype = TREE_TYPE (expr);"}, {"sha": "ecdce9b304f6a8b111c38ab5412bf468e425fd8b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406c9a1173f79dc0fb3231edb51690c1dd73f6a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406c9a1173f79dc0fb3231edb51690c1dd73f6a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=406c9a1173f79dc0fb3231edb51690c1dd73f6a0", "patch": "@@ -1,5 +1,12 @@\n 2019-09-28  Marek Polacek  <polacek@redhat.com>\n \n+\tPR c++/91889 - follow-up fix for DR 2352.\n+\t* g++.dg/cpp0x/ref-bind3.C: Add dg-error.\n+\t* g++.dg/cpp0x/ref-bind4.C: New test.\n+\t* g++.dg/cpp0x/ref-bind5.C: New test.\n+\t* g++.dg/cpp0x/ref-bind6.C: New test.\n+\t* g++.old-deja/g++.pt/spec35.C: Revert earlier change.\n+\n \tPR c++/91921 - stray warning with -Woverloaded-virtual.\n \t* g++.dg/warn/Woverloaded-2.C: New.\n \t* g++.dg/warn/Woverloaded-2.h: New."}, {"sha": "b2c85ec684ab24ad96085045f39ac1a4eaa59bd8", "filename": "gcc/testsuite/g++.dg/cpp0x/ref-bind3.C", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406c9a1173f79dc0fb3231edb51690c1dd73f6a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-bind3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406c9a1173f79dc0fb3231edb51690c1dd73f6a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-bind3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-bind3.C?ref=406c9a1173f79dc0fb3231edb51690c1dd73f6a0", "patch": "@@ -1,22 +1,18 @@\n // PR c++/91844 - Implement CWG 2352, Similar types and reference binding.\n // { dg-do compile { target c++11 } }\n \n-template<typename T> int f (const T *const &); // (1)\n-template<typename T> int f (T *const &); // (2)\n-template<typename T> int f (T *); // (3)\n-\n-/* Before CWG 2352, (2) was a better match than (1), but (2) and (3) were\n-   equally good, so there was an ambiguity.  (2) was better than (1) because\n-   (1) required a qualification conversion whereas (2) didn't.  But with this\n-   CWG, (1) no longer requires a qualification conversion, because the types\n-   \"const int* const\" and \"int *\" are now considered reference-related and we\n-   bind directly, and (1) is more specialized than (2).  And (1) is also a\n-   better match than (3).  */\n+template<typename T> int f (const T *const &); // 1\n+template<typename T> int f (T *const &); // 2\n+template<typename T> int f (T *); // 3\n \n+/* There's an ambiguity: (2) is a better match than (1) because\n+   (1) requires a qualification conversion whereas (2) doesn't, but\n+   (2) and (3) are indistinguishable conversion sequences.  */\n+   \n void\n g (int *p, const int *q, const int *const r)\n {\n-  f (p); // calls (1)\n-  f (q); // calls (1)\n-  f (r); // calls (1)\n+  f (p); // { dg-error \"call of overloaded\" }\n+  f (q);\n+  f (r);\n }"}, {"sha": "85ac9fbfd796f4acac124a2440ee01f66bbab012", "filename": "gcc/testsuite/g++.dg/cpp0x/ref-bind4.C", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406c9a1173f79dc0fb3231edb51690c1dd73f6a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-bind4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406c9a1173f79dc0fb3231edb51690c1dd73f6a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-bind4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-bind4.C?ref=406c9a1173f79dc0fb3231edb51690c1dd73f6a0", "patch": "@@ -0,0 +1,56 @@\n+// PR c++/91889 - follow-up fix for DR 2352.\n+// { dg-do compile { target c++11 } }\n+\n+int i;\n+\n+void f1 (int *);\n+void f1 (const int *const &);\n+\n+void f2 (int *);\n+void f2 (const int *&);\n+\n+void f3 (const int *);\n+void f3 (int *const &);\n+\n+void f4 (int *&);\n+void f4 (int *const &);\n+\n+void f5 (const int *&);\n+void f5 (int *const &);\n+\n+void f6 (int *const &);\n+void f6 (const int *const &);\n+\n+void f7 (int **const);\n+void f7 (const int *const *const &);\n+\n+void f8 (const int *const *);\n+void f8 (const int *const *const &);\n+\n+void f9 (int *const *);\n+void f9 (const int *const *const &);\n+\n+void\n+g (int *p, const int *pc, const int **q)\n+{\n+  f1 (p);\n+  f1 (pc);\n+  f2 (p);\n+  f2 (pc);\n+  f3 (p);\n+  f3 (pc);\n+  f4 (p);\n+  f5 (p);\n+  f5 (pc);\n+  f6 (p);\n+  f6 (pc);\n+  f7 (q);\n+  /* [over.ics.rank]\n+\n+   --S1 and S2 differ only in their qualification conversion and  yield\n+     similar  types  T1 and T2 (_conv.qual_), respectively, and the cv-\n+     qualification signature of type T1 is a proper subset of  the  cv-\n+     qualification signature of type T2  */\n+  f8 (q);\n+  f9 (q);\n+}"}, {"sha": "d528b87761daa21e68249a36088f0c14956324a0", "filename": "gcc/testsuite/g++.dg/cpp0x/ref-bind5.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406c9a1173f79dc0fb3231edb51690c1dd73f6a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-bind5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406c9a1173f79dc0fb3231edb51690c1dd73f6a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-bind5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-bind5.C?ref=406c9a1173f79dc0fb3231edb51690c1dd73f6a0", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/91889 - follow-up fix for DR 2352.\n+// { dg-do compile { target c++11 } }\n+\n+template <typename U> struct A { typedef U *type; };\n+struct B {\n+  typedef A<B>::type node_ptr;\n+};\n+struct C {\n+  typedef B::node_ptr node_ptr;\n+  typedef A<const B>::type const_node_ptr;\n+};\n+struct {\n+  void to_value_ptr(C::node_ptr) {};\n+  void to_value_ptr(const C::const_node_ptr &);\n+} b;\n+C::node_ptr a;\n+void fn1() { b.to_value_ptr(a); }"}, {"sha": "c85a5cfb36f33faabb4241ba615ff06ee4b129f8", "filename": "gcc/testsuite/g++.dg/cpp0x/ref-bind6.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406c9a1173f79dc0fb3231edb51690c1dd73f6a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-bind6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406c9a1173f79dc0fb3231edb51690c1dd73f6a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-bind6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-bind6.C?ref=406c9a1173f79dc0fb3231edb51690c1dd73f6a0", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/91889 - follow-up fix for DR 2352.\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T> struct A {\n+  A(const T &);\n+};\n+\n+struct {\n+  int *m;\n+} a;\n+\n+void fn1() { A<const int *>(a.m); }"}, {"sha": "1debf915fe9690e0980fac8d94194a9e569ef646", "filename": "gcc/testsuite/g++.old-deja/g++.pt/spec35.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406c9a1173f79dc0fb3231edb51690c1dd73f6a0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406c9a1173f79dc0fb3231edb51690c1dd73f6a0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec35.C?ref=406c9a1173f79dc0fb3231edb51690c1dd73f6a0", "patch": "@@ -14,17 +14,17 @@ template <typename T> int Foo (T &);  // { dg-message \"note\" } candidate\n template <typename T> int Qux (T);    // { dg-message \"note\" } \n template <typename T> int Qux (T const &);  // { dg-message \"note\" } candidate\n \n-template <typename T> int Bar (T const *const &);\n-template <typename T> int Bar (T *const &);\n-template <typename T> int Bar (T *);\n+template <typename T> int Bar (T const *const &); // { dg-message \"note\" }\n+template <typename T> int Bar (T *const &);\t  // { dg-message \"note\" } candidate\n+template <typename T> int Bar (T *);\t\t  // { dg-message \"note\" } candidate\n \n template <typename T> int Baz (T *const &);       // { dg-message \"note\" } \n template <typename T> int Baz (T *);              // { dg-message \"note\" } candidate\n \n int Baz (int const *ptr, int *ptr2)\n {\n   Baz (ptr2);   // { dg-error \"ambiguous\" } \n-  Bar (ptr2);\n+  Bar (ptr2);\t// { dg-error \"ambiguous\" }\n   Foo (ptr2);   // { dg-error \"ambiguous\" } \n   Qux (ptr2);   // { dg-error \"ambiguous\" } \n   return 0;"}]}