{"sha": "18908a56e18f15f84a91a4529923dd0878b2294f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg5MDhhNTZlMThmMTVmODRhOTFhNDUyOTkyM2RkMDg3OGIyMjk0Zg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-27T08:21:37Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-27T08:21:37Z"}, "message": "Fix reduc_index==1 handling for COND_REDUCTION (PR91909)\n\nThe then/else order of the VEC_COND_EXPRs created by\nvect_create_epilog_for_reduction meeds to line up with the\nmain VEC_COND_EXPR.\n\n2019-09-27  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR tree-optimization/91909\n\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Take a\n\treduc_index parameter.  When handling COND_REDUCTION, make sure\n\tthat the reduction phi operand is in the correct arm of the\n\tVEC_COND_EXPR.\n\t(vectorizable_reduction): Pass reduc_index to the above.\n\nFrom-SVN: r276175", "tree": {"sha": "b2f92a73ab5a113db2ffc4d3ed440676e493d9bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2f92a73ab5a113db2ffc4d3ed440676e493d9bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18908a56e18f15f84a91a4529923dd0878b2294f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18908a56e18f15f84a91a4529923dd0878b2294f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18908a56e18f15f84a91a4529923dd0878b2294f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18908a56e18f15f84a91a4529923dd0878b2294f/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "76bb5af63db66ccaee0f0ae59783eda972d0db83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76bb5af63db66ccaee0f0ae59783eda972d0db83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76bb5af63db66ccaee0f0ae59783eda972d0db83"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "fe6b333be6f054855ce5d419959b6af0ff7a561a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18908a56e18f15f84a91a4529923dd0878b2294f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18908a56e18f15f84a91a4529923dd0878b2294f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18908a56e18f15f84a91a4529923dd0878b2294f", "patch": "@@ -1,3 +1,12 @@\n+2019-09-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/91909\n+\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Take a\n+\treduc_index parameter.  When handling COND_REDUCTION, make sure\n+\tthat the reduction phi operand is in the correct arm of the\n+\tVEC_COND_EXPR.\n+\t(vectorizable_reduction): Pass reduc_index to the above.\n+\n 2019-09-27  Yuliang Wang  <yuliang.wang@arm.com>\n \n \t* config/aarch64/aarch64-sve2.md (aarch64_sve2_sra<mode>):"}, {"sha": "f5df5340e58079596a39104261b30037d3497ab2", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18908a56e18f15f84a91a4529923dd0878b2294f/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18908a56e18f15f84a91a4529923dd0878b2294f/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=18908a56e18f15f84a91a4529923dd0878b2294f", "patch": "@@ -4235,6 +4235,8 @@ get_initial_defs_for_reduction (slp_tree slp_node,\n    INDUC_CODE is the code for epilog reduction if INTEGER_INDUC_COND_REDUCTION.\n    NEUTRAL_OP is the value given by neutral_op_for_slp_reduction; it is\n      null if this is not an SLP reduction\n+   REDUC_INDEX says which rhs operand of the STMT_INFO is the reduction phi\n+     (counting from 0)\n \n    This function:\n    1. Creates the reduction def-use cycles: sets the arguments for \n@@ -4285,7 +4287,7 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs,\n                                   bool double_reduc, \n \t\t\t\t  slp_tree slp_node,\n \t\t\t\t  slp_instance slp_node_instance,\n-\t\t\t\t  tree neutral_op)\n+\t\t\t\t  tree neutral_op, int reduc_index)\n {\n   tree induc_val = NULL_TREE;\n   stmt_vec_info prev_phi_info;\n@@ -4469,11 +4471,17 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs,\n       tree ccompare = unshare_expr (gimple_assign_rhs1 (vec_stmt));\n \n       /* Create a conditional, where the condition is taken from vec_stmt\n-\t (CCOMPARE), then is the induction index (INDEX_BEFORE_INCR) and\n-\t else is the phi (NEW_PHI_TREE).  */\n-      tree index_cond_expr = build3 (VEC_COND_EXPR, cr_index_vector_type,\n-\t\t\t\t     ccompare, indx_before_incr,\n-\t\t\t\t     new_phi_tree);\n+\t (CCOMPARE).  The then and else values mirror the main VEC_COND_EXPR:\n+\t the reduction phi corresponds to NEW_PHI_TREE and the new values\n+\t correspond to INDEX_BEFORE_INCR.  */\n+      gcc_assert (reduc_index >= 1);\n+      tree index_cond_expr;\n+      if (reduc_index == 2)\n+\tindex_cond_expr = build3 (VEC_COND_EXPR, cr_index_vector_type,\n+\t\t\t\t  ccompare, indx_before_incr, new_phi_tree);\n+      else\n+\tindex_cond_expr = build3 (VEC_COND_EXPR, cr_index_vector_type,\n+\t\t\t\t  ccompare, new_phi_tree, indx_before_incr);\n       induction_index = make_ssa_name (cr_index_vector_type);\n       gimple *index_condition = gimple_build_assign (induction_index,\n \t\t\t\t\t\t     index_cond_expr);\n@@ -7159,7 +7167,7 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   vect_create_epilog_for_reduction (vect_defs, stmt_info, reduc_def_phi,\n \t\t\t\t    orig_code, epilog_copies, reduc_fn, phis,\n \t\t\t\t    double_reduc, slp_node, slp_node_instance,\n-\t\t\t\t    neutral_op);\n+\t\t\t\t    neutral_op, reduc_index);\n \n   return true;\n }"}]}