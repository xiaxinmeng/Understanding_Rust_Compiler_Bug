{"sha": "8960a29b18b830ff0490b7f52051903fba472e45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk2MGEyOWIxOGI4MzBmZjA0OTBiN2Y1MjA1MTkwM2ZiYTQ3MmU0NQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-08-29T22:17:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-08-30T21:25:21Z"}, "message": "c++: limit instantiation with ill-formed class [PR96286]\n\nI noticed that after the static_assert failures in lwg3466.cc, we got\nvarious follow-on errors because we went ahead and tried to instantiate the\npromise<T> member functions even after instantiating the class itself ran\ninto problems.  Interrupting instantiation of the class itself seems likely\nto cause error-recovery problems, but preventing instantiation of member\nfunctions seems strictly better for error-recovery.\n\nThis doesn't fix any of the specific testcases in PR96286, but addresses\npart of that problem space.\n\n\tPR c++/96286\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (struct lang_type): Add erroneous bit-field.\n\t(CLASSTYPE_ERRONEOUS): New.\n\t* pt.c (limit_bad_template_recursion): Check it.\n\t(instantiate_class_template_1): Set it.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/30_threads/promise/requirements/lwg3466.cc:\n\tRemove dg-prune-outputs.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/access2.C: Split struct A.", "tree": {"sha": "35a7a49679fa0b3925eb27ea96f7eaf295f5e535", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35a7a49679fa0b3925eb27ea96f7eaf295f5e535"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8960a29b18b830ff0490b7f52051903fba472e45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8960a29b18b830ff0490b7f52051903fba472e45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8960a29b18b830ff0490b7f52051903fba472e45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8960a29b18b830ff0490b7f52051903fba472e45/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "729f6881cfcc6df3c15a1dd4ebd45bc46bb8f3e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/729f6881cfcc6df3c15a1dd4ebd45bc46bb8f3e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/729f6881cfcc6df3c15a1dd4ebd45bc46bb8f3e9"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "ce7ca53a113cc2fc25ec053be2c7256d83d01197", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8960a29b18b830ff0490b7f52051903fba472e45/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8960a29b18b830ff0490b7f52051903fba472e45/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8960a29b18b830ff0490b7f52051903fba472e45", "patch": "@@ -2336,6 +2336,7 @@ struct GTY(()) lang_type {\n   unsigned has_constexpr_ctor : 1;\n   unsigned unique_obj_representations : 1;\n   unsigned unique_obj_representations_set : 1;\n+  bool erroneous : 1;\n \n   /* When adding a flag here, consider whether or not it ought to\n      apply to a template instance if it applies to the template.  If\n@@ -2344,7 +2345,7 @@ struct GTY(()) lang_type {\n   /* There are some bits left to fill out a 32-bit word.  Keep track\n      of this by updating the size of this bitfield whenever you add or\n      remove a flag.  */\n-  unsigned dummy : 5;\n+  unsigned dummy : 4;\n \n   tree primary_base;\n   vec<tree_pair_s, va_gc> *vcall_indices;\n@@ -2660,6 +2661,10 @@ struct GTY(()) lang_type {\n /* Nonzero if a _DECL node requires us to output debug info for this class.  */\n #define CLASSTYPE_DEBUG_REQUESTED(NODE) \\\n   (LANG_TYPE_CLASS_CHECK (NODE)->debug_requested)\n+\n+/* True if we saw errors while instantiating this class.  */\n+#define CLASSTYPE_ERRONEOUS(NODE) \\\n+  (LANG_TYPE_CLASS_CHECK (NODE)->erroneous)\n \f\n /* Additional macros for inheritance information.  */\n "}, {"sha": "fcf3ac31b258f3d82b731a0105369d2b9b0bd05d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8960a29b18b830ff0490b7f52051903fba472e45/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8960a29b18b830ff0490b7f52051903fba472e45/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8960a29b18b830ff0490b7f52051903fba472e45", "patch": "@@ -10885,9 +10885,14 @@ limit_bad_template_recursion (tree decl)\n {\n   struct tinst_level *lev = current_tinst_level;\n   int errs = errorcount + sorrycount;\n-  if (lev == NULL || errs == 0 || !neglectable_inst_p (decl))\n+  if (errs == 0 || !neglectable_inst_p (decl))\n     return false;\n \n+  /* Avoid instantiating members of an ill-formed class.  */\n+  if (DECL_CLASS_SCOPE_P (decl)\n+      && CLASSTYPE_ERRONEOUS (DECL_CONTEXT (decl)))\n+    return true;\n+\n   for (; lev; lev = lev->next)\n     if (neglectable_inst_p (lev->maybe_get_node ()))\n       break;\n@@ -12212,6 +12217,13 @@ instantiate_class_template_1 (tree type)\n   finish_struct_1 (type);\n   TYPE_BEING_DEFINED (type) = 0;\n \n+  /* Remember if instantiating this class ran into errors, so we can avoid\n+     instantiating member functions in limit_bad_template_recursion.  We set\n+     this flag even if the problem was in another instantiation triggered by\n+     this one, as that will likely also cause trouble for member functions.  */\n+  if (errorcount + sorrycount > current_tinst_level->errors)\n+    CLASSTYPE_ERRONEOUS (type) = true;\n+\n   /* We don't instantiate default arguments for member functions.  14.7.1:\n \n      The implicit instantiation of a class template specialization causes"}, {"sha": "4a80bb4d2806d2b1771909efc1009199cfd8a9b7", "filename": "gcc/testsuite/g++.dg/template/access2.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8960a29b18b830ff0490b7f52051903fba472e45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8960a29b18b830ff0490b7f52051903fba472e45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess2.C?ref=8960a29b18b830ff0490b7f52051903fba472e45", "patch": "@@ -5,6 +5,9 @@\n \n template <class T> struct A {\n   typename T::X x;\t\t\t// { dg-error \"this context\" }\n+};\n+\n+template <class T> struct A2 {\n   int f() { return T::i; }\t\t// { dg-error \"this context\" }\n };\n \n@@ -16,5 +19,6 @@ class B {\n int main()\n {\n   A<B> ab;\t\t\t\t// { dg-message \"required\" }\n-  ab.f();\t\t\t\t// { dg-message \"required\" }\n+  A2<B> a2b;\n+  a2b.f();\t\t\t\t// { dg-message \"required\" }\n }"}, {"sha": "acef47f12f3561419b3e2de914cb00e2a8d82aea", "filename": "libstdc++-v3/testsuite/30_threads/promise/requirements/lwg3466.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8960a29b18b830ff0490b7f52051903fba472e45/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Frequirements%2Flwg3466.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8960a29b18b830ff0490b7f52051903fba472e45/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Frequirements%2Flwg3466.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Frequirements%2Flwg3466.cc?ref=8960a29b18b830ff0490b7f52051903fba472e45", "patch": "@@ -27,17 +27,13 @@ std::promise<int(&)()> good2;\n \n std::promise<int[1]> bad; // { dg-error \"here\" }\n // { dg-error \"result type must not be an array\" \"\" { target *-*-* } 0 }\n-// { dg-prune-output {request for member '~int \\[1\\]'} }\n \n std::promise<int()> bad2; // { dg-error \"here\" }\n // { dg-error \"result type must not be a function\" \"\" { target *-*-* } 0 }\n-// { dg-prune-output {'sizeof \\(int\\(\\)\\)'} }\n \n struct Indestructible { ~Indestructible() = delete; };\n std::promise<Indestructible> bad3; // { dg-error \"here\" }\n // { dg-error \"result type must be destructible\" \"\" { target *-*-* } 0 }\n-// { dg-prune-output {deleted function} }\n \n class PrivateDtor { public: PrivateDtor(); private: ~PrivateDtor(); };\n std::promise<PrivateDtor> bad4; // { dg-error \"here\" }\n-// { dg-prune-output {is private} }"}]}