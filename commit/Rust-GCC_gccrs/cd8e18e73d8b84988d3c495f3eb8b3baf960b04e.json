{"sha": "cd8e18e73d8b84988d3c495f3eb8b3baf960b04e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q4ZTE4ZTczZDhiODQ5ODhkM2M0OTVmM2ViOGIzYmFmOTYwYjA0ZQ==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2015-02-20T14:24:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-02-20T14:24:28Z"}, "message": "g-allein.ads, [...]: Code clean ups.\n\n2015-02-20  Olivier Hainque  <hainque@adacore.com>\n\n\t* g-allein.ads, g-alveop.ads, g-alveop.adb: Code clean ups.\n\nFrom-SVN: r220865", "tree": {"sha": "f4ac7e7455b0d7beea26ed049928bad7037e7040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4ac7e7455b0d7beea26ed049928bad7037e7040"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd8e18e73d8b84988d3c495f3eb8b3baf960b04e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd8e18e73d8b84988d3c495f3eb8b3baf960b04e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd8e18e73d8b84988d3c495f3eb8b3baf960b04e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd8e18e73d8b84988d3c495f3eb8b3baf960b04e/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b9e7e8a7452038b432d71e3f99be5874be75c4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b9e7e8a7452038b432d71e3f99be5874be75c4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b9e7e8a7452038b432d71e3f99be5874be75c4b"}], "stats": {"total": 859, "additions": 339, "deletions": 520}, "files": [{"sha": "fa9f2ee184de7d8fff9bc9c7a72feaf04b4e114b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8e18e73d8b84988d3c495f3eb8b3baf960b04e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8e18e73d8b84988d3c495f3eb8b3baf960b04e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cd8e18e73d8b84988d3c495f3eb8b3baf960b04e", "patch": "@@ -1,25 +1,6 @@\n 2015-02-20  Olivier Hainque  <hainque@adacore.com>\n \n-\t* g-allein.ads (vec_vspltw): Remove.\n-\t* g-alveop.ad?: Replace vec_vspltw renamings by proper Inline_Always\n-\twrappers with Intrinsic convention.\n-\n-2015-02-20  Olivier Hainque  <hainque@adacore.com>\n-\n-\t* g-allein.ads (vec_dstt): Remove.\n-\t* g-alveop.ad?: Replace vec_dstt renamings by proper Inline_Always\n-\twrappers with Intrinsic convention.\n-\n-2015-02-20  Olivier Hainque  <hainque@adacore.com>\n-\n-\t* g-allein.ads (vec_dst): Remove.\n-\t* g-alveop.ad?: Replace vec_dst renamings by proper Inline_Always\n-\twrappers with Intrinsic convention.\n-\n-2015-02-20  Olivier Hainque  <hainque@adacore.com>\n-\n-\t* g-allein.ads (vec_dss, vec_dssall): Remove.\n-\t* g-alveop.ads (vec_dss, vec_dssall): Rename the ll versions.\n+\t* g-allein.ads, g-alveop.ads, g-alveop.adb: Code clean ups.\n \n 2015-02-20  Robert Dewar  <dewar@adacore.com>\n "}, {"sha": "ba7ddafd7f4d6db249a66d6bed7d8d96a810acb1", "filename": "gcc/ada/g-allein.ads", "status": "modified", "additions": 2, "deletions": 277, "changes": 279, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8e18e73d8b84988d3c495f3eb8b3baf960b04e/gcc%2Fada%2Fg-allein.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8e18e73d8b84988d3c495f3eb8b3baf960b04e/gcc%2Fada%2Fg-allein.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-allein.ads?ref=cd8e18e73d8b84988d3c495f3eb8b3baf960b04e", "patch": "@@ -33,292 +33,17 @@\n --  both bindings (Hard or Soft), and relevant to the interfacing with the\n --  underlying Low Level support.\n \n---  The set of \"services\" includes:\n---\n---  o Imports to the low level routines for which a direct binding is\n---    mandatory (or just possible when analyzed as such).\n---\n---  o Conversion routines (unchecked) between low level types, or between\n---    various pointer representations.\n-\n-with GNAT.Altivec.Vector_Types;\n-with GNAT.Altivec.Low_Level_Vectors;\n+with GNAT.Altivec.Vector_Types;    use GNAT.Altivec.Vector_Types;\n+with GNAT.Altivec.Low_Level_Vectors;    use GNAT.Altivec.Low_Level_Vectors;\n \n with Ada.Unchecked_Conversion;\n \n package GNAT.Altivec.Low_Level_Interface is\n \n-   ----------------------------------------------------------------------------\n-   -- Imports for \"argument must be literal\" constraints in the Hard binding --\n-   ----------------------------------------------------------------------------\n-\n-   use GNAT.Altivec.Vector_Types;\n-\n-   -- vec_sld --\n-\n-   --  ??? The base GCC implementation maps everything to vsldoi_4si, while\n-   --  it defines builtin variants for all the modes. Adjust here, to avoid\n-   --  the infamous argument mode mismatch.\n-\n-   function vec_sld_vf_vf_cint_r_vf\n-     (A : vector_float;\n-      B : vector_float;\n-      C : c_int) return vector_float;\n-\n-   pragma Import\n-     (LL_Altivec, vec_sld_vf_vf_cint_r_vf, \"__builtin_altivec_vsldoi_4sf\");\n-\n-   function vec_sld_vsi_vsi_cint_r_vsi\n-     (A : vector_signed_int;\n-      B : vector_signed_int;\n-      C : c_int) return vector_signed_int;\n-\n-   pragma Import\n-     (LL_Altivec, vec_sld_vsi_vsi_cint_r_vsi, \"__builtin_altivec_vsldoi_4si\");\n-\n-   function vec_sld_vui_vui_cint_r_vui\n-     (A : vector_unsigned_int;\n-      B : vector_unsigned_int;\n-      C : c_int) return vector_unsigned_int;\n-\n-   pragma Import\n-     (LL_Altivec, vec_sld_vui_vui_cint_r_vui, \"__builtin_altivec_vsldoi_4si\");\n-\n-   function vec_sld_vbi_vbi_cint_r_vbi\n-     (A : vector_bool_int;\n-      B : vector_bool_int;\n-      C : c_int) return vector_bool_int;\n-\n-   pragma Import\n-     (LL_Altivec, vec_sld_vbi_vbi_cint_r_vbi, \"__builtin_altivec_vsldoi_4si\");\n-\n-   function vec_sld_vss_vss_cint_r_vss\n-     (A : vector_signed_short;\n-      B : vector_signed_short;\n-      C : c_int) return vector_signed_short;\n-\n-   pragma Import\n-     (LL_Altivec, vec_sld_vss_vss_cint_r_vss, \"__builtin_altivec_vsldoi_8hi\");\n-\n-   function vec_sld_vus_vus_cint_r_vus\n-     (A : vector_unsigned_short;\n-      B : vector_unsigned_short;\n-      C : c_int) return vector_unsigned_short;\n-\n-   pragma Import\n-     (LL_Altivec, vec_sld_vus_vus_cint_r_vus, \"__builtin_altivec_vsldoi_8hi\");\n-\n-   function vec_sld_vbs_vbs_cint_r_vbs\n-     (A : vector_bool_short;\n-      B : vector_bool_short;\n-      C : c_int) return vector_bool_short;\n-\n-   pragma Import\n-     (LL_Altivec, vec_sld_vbs_vbs_cint_r_vbs, \"__builtin_altivec_vsldoi_8hi\");\n-\n-   function vec_sld_vx_vx_cint_r_vx\n-     (A : vector_pixel;\n-      B : vector_pixel;\n-      C : c_int) return vector_pixel;\n-\n-   pragma Import\n-     (LL_Altivec, vec_sld_vx_vx_cint_r_vx, \"__builtin_altivec_vsldoi_8hi\");\n-\n-   function vec_sld_vsc_vsc_cint_r_vsc\n-     (A : vector_signed_char;\n-      B : vector_signed_char;\n-      C : c_int) return vector_signed_char;\n-\n-   pragma Import\n-     (LL_Altivec, vec_sld_vsc_vsc_cint_r_vsc, \"__builtin_altivec_vsldoi_16qi\");\n-\n-   function vec_sld_vuc_vuc_cint_r_vuc\n-     (A : vector_unsigned_char;\n-      B : vector_unsigned_char;\n-      C : c_int) return vector_unsigned_char;\n-\n-   pragma Import\n-     (LL_Altivec, vec_sld_vuc_vuc_cint_r_vuc, \"__builtin_altivec_vsldoi_16qi\");\n-\n-   function vec_sld_vbc_vbc_cint_r_vbc\n-     (A : vector_bool_char;\n-      B : vector_bool_char;\n-      C : c_int) return vector_bool_char;\n-\n-   pragma Import\n-     (LL_Altivec, vec_sld_vbc_vbc_cint_r_vbc, \"__builtin_altivec_vsldoi_16qi\");\n-\n-   -- vec_splat --\n-\n-   function vec_splat_vsc_cint_r_vsc\n-     (A : vector_signed_char;\n-      B : c_int) return vector_signed_char;\n-\n-   pragma Import\n-     (LL_Altivec, vec_splat_vsc_cint_r_vsc, \"__builtin_altivec_vspltb\");\n-\n-   function vec_splat_vuc_cint_r_vuc\n-     (A : vector_unsigned_char;\n-      B : c_int) return vector_unsigned_char;\n-\n-   pragma Import\n-     (LL_Altivec, vec_splat_vuc_cint_r_vuc, \"__builtin_altivec_vspltb\");\n-\n-   function vec_splat_vbc_cint_r_vbc\n-     (A : vector_bool_char;\n-      B : c_int) return vector_bool_char;\n-\n-   pragma Import\n-     (LL_Altivec, vec_splat_vbc_cint_r_vbc, \"__builtin_altivec_vspltb\");\n-\n-   function vec_splat_vss_cint_r_vss\n-     (A : vector_signed_short;\n-      B : c_int) return vector_signed_short;\n-\n-   pragma Import\n-     (LL_Altivec, vec_splat_vss_cint_r_vss, \"__builtin_altivec_vsplth\");\n-\n-   function vec_splat_vus_cint_r_vus\n-     (A : vector_unsigned_short;\n-      B : c_int) return vector_unsigned_short;\n-\n-   pragma Import\n-     (LL_Altivec, vec_splat_vus_cint_r_vus, \"__builtin_altivec_vsplth\");\n-\n-   function vec_splat_vbs_cint_r_vbs\n-     (A : vector_bool_short;\n-      B : c_int) return vector_bool_short;\n-\n-   pragma Import\n-     (LL_Altivec, vec_splat_vbs_cint_r_vbs, \"__builtin_altivec_vsplth\");\n-\n-   function vec_splat_vx_cint_r_vx\n-     (A : vector_pixel;\n-      B : c_int) return vector_pixel;\n-\n-   pragma Import\n-     (LL_Altivec, vec_splat_vx_cint_r_vx, \"__builtin_altivec_vsplth\");\n-\n-   function vec_splat_vf_cint_r_vf\n-     (A : vector_float;\n-      B : c_int) return vector_float;\n-\n-   pragma Import\n-     (LL_Altivec, vec_splat_vf_cint_r_vf, \"__builtin_altivec_vspltw\");\n-\n-   function vec_splat_vsi_cint_r_vsi\n-     (A : vector_signed_int;\n-      B : c_int) return vector_signed_int;\n-\n-   pragma Import\n-     (LL_Altivec, vec_splat_vsi_cint_r_vsi, \"__builtin_altivec_vspltw\");\n-\n-   function vec_splat_vui_cint_r_vui\n-     (A : vector_unsigned_int;\n-      B : c_int) return vector_unsigned_int;\n-\n-   pragma Import\n-     (LL_Altivec, vec_splat_vui_cint_r_vui, \"__builtin_altivec_vspltw\");\n-\n-   function vec_splat_vbi_cint_r_vbi\n-     (A : vector_bool_int;\n-      B : c_int) return vector_bool_int;\n-\n-   pragma Import\n-     (LL_Altivec, vec_splat_vbi_cint_r_vbi, \"__builtin_altivec_vspltw\");\n-\n-   -- vec_vspltb --\n-\n-   function vec_vspltb_vsc_cint_r_vsc\n-     (A : vector_signed_char;\n-      B : c_int) return vector_signed_char;\n-\n-   pragma Import\n-     (LL_Altivec, vec_vspltb_vsc_cint_r_vsc, \"__builtin_altivec_vspltb\");\n-\n-   function vec_vspltb_vuc_cint_r_vuc\n-     (A : vector_unsigned_char;\n-      B : c_int) return vector_unsigned_char;\n-\n-   pragma Import\n-     (LL_Altivec, vec_vspltb_vuc_cint_r_vuc, \"__builtin_altivec_vspltb\");\n-\n-   function vec_vspltb_vbc_cint_r_vbc\n-     (A : vector_bool_char;\n-      B : c_int) return vector_bool_char;\n-\n-   pragma Import\n-     (LL_Altivec, vec_vspltb_vbc_cint_r_vbc, \"__builtin_altivec_vspltb\");\n-\n-   -- vec_splat_s8 --\n-\n-   function vec_splat_s8_cint_r_vsc\n-     (A : c_int) return vector_signed_char;\n-\n-   pragma Import\n-     (LL_Altivec, vec_splat_s8_cint_r_vsc, \"__builtin_altivec_vspltisb\");\n-\n-   -- vec_splat_s16 --\n-\n-   function vec_splat_s16_cint_r_vss\n-     (A : c_int) return vector_signed_short;\n-\n-   pragma Import\n-     (LL_Altivec, vec_splat_s16_cint_r_vss, \"__builtin_altivec_vspltish\");\n-\n-   -- vec_splat_s32 --\n-\n-   function vec_splat_s32_cint_r_vsi\n-     (A : c_int) return vector_signed_int;\n-\n-   pragma Import\n-     (LL_Altivec, vec_splat_s32_cint_r_vsi, \"__builtin_altivec_vspltisw\");\n-\n-   -- vec_splat_u8 --\n-\n-   function vec_splat_u8_cint_r_vuc\n-     (A : c_int) return vector_unsigned_char;\n-\n-   pragma Import\n-     (LL_Altivec, vec_splat_u8_cint_r_vuc, \"__builtin_altivec_vspltisb\");\n-\n-   -- vec_splat_u16 --\n-\n-   function vec_splat_u16_cint_r_vus\n-     (A : c_int) return vector_unsigned_short;\n-\n-   pragma Import\n-     (LL_Altivec, vec_splat_u16_cint_r_vus, \"__builtin_altivec_vspltish\");\n-\n-   -- vec_splat_u32 --\n-\n-   function vec_splat_u32_cint_r_vui\n-     (A : c_int) return vector_unsigned_int;\n-\n-   pragma Import\n-     (LL_Altivec, vec_splat_u32_cint_r_vui, \"__builtin_altivec_vspltisw\");\n-\n-   ------------------------------------------------------------\n-   -- Imports for low-level signature consistent subprograms --\n-   ------------------------------------------------------------\n-\n    -----------------------------------------\n    -- Conversions between low level types --\n    -----------------------------------------\n \n-   use GNAT.Altivec.Low_Level_Vectors;\n-\n-   --  Something like...\n-   --\n-   --  TYPES=\"LL_VBC LL_VUC LL_VSC LL_VBS LL_VUS LL_VSS \\\n-   --         LL_VBI LL_VUI LL_VSI LL_VF LL_VP\"\n-   --  for TT in `echo $TYPES`; do\n-   --  for ST in `echo $TYPES`; do\n-   --  echo \"function To_$TT is new Ada.Unchecked_Conversion ($ST, $TT);\"\n-   --  done\n-   --  echo \"\"\n-   --  done\n-\n    function To_LL_VBC is new Ada.Unchecked_Conversion (LL_VBC, LL_VBC);\n    function To_LL_VBC is new Ada.Unchecked_Conversion (LL_VUC, LL_VBC);\n    function To_LL_VBC is new Ada.Unchecked_Conversion (LL_VSC, LL_VBC);"}, {"sha": "8dcfe177853946194edefceabf0e596ccefae4b7", "filename": "gcc/ada/g-alveop.adb", "status": "modified", "additions": 111, "deletions": 1, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8e18e73d8b84988d3c495f3eb8b3baf960b04e/gcc%2Fada%2Fg-alveop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8e18e73d8b84988d3c495f3eb8b3baf960b04e/gcc%2Fada%2Fg-alveop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-alveop.adb?ref=cd8e18e73d8b84988d3c495f3eb8b3baf960b04e", "patch": "@@ -29,7 +29,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with GNAT.Altivec.Low_Level_Vectors; use GNAT.Altivec.Low_Level_Vectors;\n+with GNAT.Altivec.Low_Level_Interface;  use GNAT.Altivec.Low_Level_Interface;\n \n package body GNAT.Altivec.Vector_Operations is\n \n@@ -8273,6 +8273,116 @@ package body GNAT.Altivec.Vector_Operations is\n       return To_LL_VP (vsplth (To_LL_VSS (A), B));\n    end vec_vsplth;\n \n+   -- vec_vspltb --\n+\n+   function vec_vspltb\n+     (A : vector_unsigned_char;\n+      B : c_int) return vector_unsigned_char\n+   is\n+   begin\n+      return To_LL_VUC (vspltb (To_LL_VSC (A), B));\n+   end vec_vspltb;\n+\n+   function vec_vspltb\n+     (A : vector_bool_char;\n+      B : c_int) return vector_bool_char\n+   is\n+   begin\n+      return To_LL_VBC (vspltb (To_LL_VSC (A), B));\n+   end vec_vspltb;\n+\n+   -- vec_splat_u8 --\n+\n+   function vec_splat_u8\n+     (A : c_int) return vector_unsigned_char\n+   is\n+   begin\n+      return To_LL_VUC (vspltisb (A));\n+   end vec_splat_u8;\n+\n+   -- vec_splat_u16 --\n+\n+   function vec_splat_u16\n+     (A : c_int) return vector_unsigned_short\n+   is\n+   begin\n+      return To_LL_VUS (vspltish (A));\n+   end vec_splat_u16;\n+\n+   -- vec_splat_u32 --\n+\n+   function vec_splat_u32\n+     (A : c_int) return vector_unsigned_int\n+   is\n+   begin\n+      return To_LL_VUI (vspltisw (A));\n+   end vec_splat_u32;\n+\n+   -- vec_sld --\n+\n+   function vec_sld\n+     (A : vector_unsigned_int;\n+      B : vector_unsigned_int;\n+      C : c_int) return vector_unsigned_int\n+   is\n+   begin\n+      return To_LL_VUI (vsldoi_4si (To_LL_VSI (A), To_LL_VSI (B), C));\n+   end vec_sld;\n+\n+   function vec_sld\n+     (A : vector_bool_int;\n+      B : vector_bool_int;\n+      C : c_int) return vector_bool_int\n+   is\n+   begin\n+      return To_LL_VBI (vsldoi_4si (To_LL_VSI (A), To_LL_VSI (B), C));\n+   end vec_sld;\n+\n+   function vec_sld\n+     (A : vector_unsigned_short;\n+      B : vector_unsigned_short;\n+      C : c_int) return vector_unsigned_short\n+   is\n+   begin\n+      return To_LL_VUS (vsldoi_8hi (To_LL_VSS (A), To_LL_VSS (B), C));\n+   end vec_sld;\n+\n+   function vec_sld\n+     (A : vector_bool_short;\n+      B : vector_bool_short;\n+      C : c_int) return vector_bool_short\n+   is\n+   begin\n+      return To_LL_VBS (vsldoi_8hi (To_LL_VSS (A), To_LL_VSS (B), C));\n+   end vec_sld;\n+\n+   function vec_sld\n+     (A : vector_pixel;\n+      B : vector_pixel;\n+      C : c_int) return vector_pixel\n+   is\n+   begin\n+      return To_LL_VP (vsldoi_8hi (To_LL_VSS (A), To_LL_VSS (B), C));\n+   end vec_sld;\n+\n+   function vec_sld\n+     (A : vector_unsigned_char;\n+      B : vector_unsigned_char;\n+      C : c_int) return vector_unsigned_char\n+   is\n+   begin\n+      return To_LL_VUC (vsldoi_16qi (To_LL_VSC (A), To_LL_VSC (B), C));\n+   end vec_sld;\n+\n+   function vec_sld\n+     (A : vector_bool_char;\n+      B : vector_bool_char;\n+      C : c_int) return vector_bool_char\n+   is\n+   begin\n+      return To_LL_VBC (vsldoi_16qi (To_LL_VSC (A), To_LL_VSC (B), C));\n+   end vec_sld;\n+\n    -----------------------------------\n    -- Bodies for Altivec predicates --\n    -----------------------------------"}, {"sha": "eb05e4e76875829d489207b59af25bd3a2fbc3ae", "filename": "gcc/ada/g-alveop.ads", "status": "modified", "additions": 225, "deletions": 222, "changes": 447, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd8e18e73d8b84988d3c495f3eb8b3baf960b04e/gcc%2Fada%2Fg-alveop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd8e18e73d8b84988d3c495f3eb8b3baf960b04e/gcc%2Fada%2Fg-alveop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-alveop.ads?ref=cd8e18e73d8b84988d3c495f3eb8b3baf960b04e", "patch": "@@ -33,14 +33,70 @@\n --  objects. It is common to both the Soft and the Hard bindings.\n \n with GNAT.Altivec.Vector_Types;  use GNAT.Altivec.Vector_Types;\n-with GNAT.Altivec.Low_Level_Interface;  use GNAT.Altivec.Low_Level_Interface;\n-with GNAT.Altivec.Low_Level_Vectors;\n+with GNAT.Altivec.Low_Level_Vectors; use GNAT.Altivec.Low_Level_Vectors;\n \n package GNAT.Altivec.Vector_Operations is\n \n-   --  The vast majority of the operations exposed here are type conversion\n-   --  wrappers around a much smaller set of low level primitives, exposed by\n-   --  the Altivec.Low_Level_Interface package.\n+   -------------------------------------\n+   -- Different flavors of interfaces --\n+   -------------------------------------\n+\n+   --  The vast majority of the user visible functions are just neutral type\n+   --  conversion wrappers around calls to low level primitives. For instance:\n+   --\n+   --        function vec_sll\n+   --          (A : vector_signed_int;\n+   --           B : vector_unsigned_char) return vector_signed_int is\n+   --        begin\n+   --          return To_VSI (vsl (To_VSI (A), To_VSI (B)));\n+   --        end vec_sll;\n+   --\n+   --  We actually don't always need an explicit wrapper and can bind directly\n+   --  with a straight Import of the low level routine, or a renaming of such\n+   --  instead.\n+   --\n+   --  A direct binding is not possible (that is, a wrapper is mandatory) in\n+   --  a number of cases:\n+   --\n+   --  o When the high-level/low-level types don't match, in which case a\n+   --  straight import would risk wrong code generation or compiler blowups in\n+   --  the Hard binding case. This is the case for 'B' in the example above.\n+   --\n+   --  o When the high-level/low-level argument lists differ, as is the case\n+   --  for most of the AltiVec predicates, relying on a low-level primitive\n+   --  which expects a control code argument, like:\n+   --\n+   --        function vec_any_ne\n+   --           (A : vector_signed_int;\n+   --            B : vector_signed_int) return c_int is\n+   --        begin\n+   --          return vcmpequw_p (CR6_LT_REV, To_VSI (A), To_VSI (B));\n+   --        end vec_any_ne;\n+   --\n+   --  o When the high-level/low-level arguments order don't match, as in:\n+   --\n+   --        function vec_cmplt\n+   --           (A : vector_unsigned_char;\n+   --            B : vector_unsigned_char) return vector_bool_char is\n+   --         begin\n+   --           return To_VBC (vcmpgtub (To_VSC (B), To_VSC (A)));\n+   --         end vec_cmplt;\n+\n+   -----------------------------\n+   -- Inlining considerations --\n+   -----------------------------\n+\n+   --  The intent in the Hard binding case is to eventually map operations to\n+   --  hardware instructions. Needless to say, intermediate function calls do\n+   --  not fit this purpose, so all the user visible subprograms need to be\n+   --  marked Inline_Always. Some of the builtins we eventually bind to expect\n+   --  literal arguments. Wrappers to such builtins are made Convention\n+   --  Intrinsic as well so we don't attempt to compile the bodies on their\n+   --  own.\n+\n+   --  In the soft case, the bulk of the work is performed by the low level\n+   --  routines, and those exported by this unit are short enough for the\n+   --  inlining to make sense and even be beneficial.\n \n    -------------------------------------------------------\n    -- [PIM-4.4 Generic and Specific AltiVec operations] --\n@@ -987,6 +1043,9 @@ package GNAT.Altivec.Vector_Operations is\n       B : c_int;\n       C : c_int);\n \n+   pragma Inline_Always (vec_dst);\n+   pragma Convention (Intrinsic, vec_dst);\n+\n    -- vec_dstst --\n \n    procedure vec_dstst\n@@ -1089,6 +1148,9 @@ package GNAT.Altivec.Vector_Operations is\n       B : c_int;\n       C : c_int);\n \n+   pragma Inline_Always (vec_dstst);\n+   pragma Convention (Intrinsic, vec_dstst);\n+\n    -- vec_dststt --\n \n    procedure vec_dststt\n@@ -1191,6 +1253,9 @@ package GNAT.Altivec.Vector_Operations is\n       B : c_int;\n       C : c_int);\n \n+   pragma Inline_Always (vec_dststt);\n+   pragma Convention (Intrinsic, vec_dststt);\n+\n    -- vec_dstt --\n \n    procedure vec_dstt\n@@ -1293,6 +1358,9 @@ package GNAT.Altivec.Vector_Operations is\n       B : c_int;\n       C : c_int);\n \n+   pragma Inline_Always (vec_dstt);\n+   pragma Convention (Intrinsic, vec_dstt);\n+\n    -- vec_expte --\n \n    function vec_expte\n@@ -2962,71 +3030,67 @@ package GNAT.Altivec.Vector_Operations is\n \n    -- vec_sld --\n \n-   function vec_sld\n-     (A : vector_float;\n-      B : vector_float;\n-      C : c_int) return vector_float\n-   renames Low_Level_Interface.vec_sld_vf_vf_cint_r_vf;\n-\n-   function vec_sld\n-     (A : vector_signed_int;\n-      B : vector_signed_int;\n-      C : c_int) return vector_signed_int\n-   renames Low_Level_Interface.vec_sld_vsi_vsi_cint_r_vsi;\n-\n    function vec_sld\n      (A : vector_unsigned_int;\n       B : vector_unsigned_int;\n-      C : c_int) return vector_unsigned_int\n-   renames Low_Level_Interface.vec_sld_vui_vui_cint_r_vui;\n+      C : c_int) return vector_unsigned_int;\n \n    function vec_sld\n      (A : vector_bool_int;\n       B : vector_bool_int;\n-      C : c_int) return vector_bool_int\n-   renames Low_Level_Interface.vec_sld_vbi_vbi_cint_r_vbi;\n-\n-   function vec_sld\n-     (A : vector_signed_short;\n-      B : vector_signed_short;\n-      C : c_int) return vector_signed_short\n-   renames Low_Level_Interface.vec_sld_vss_vss_cint_r_vss;\n+      C : c_int) return vector_bool_int;\n \n    function vec_sld\n      (A : vector_unsigned_short;\n       B : vector_unsigned_short;\n-      C : c_int) return vector_unsigned_short\n-   renames Low_Level_Interface.vec_sld_vus_vus_cint_r_vus;\n+      C : c_int) return vector_unsigned_short;\n \n    function vec_sld\n      (A : vector_bool_short;\n       B : vector_bool_short;\n-      C : c_int) return vector_bool_short\n-   renames Low_Level_Interface.vec_sld_vbs_vbs_cint_r_vbs;\n+      C : c_int) return vector_bool_short;\n \n    function vec_sld\n      (A : vector_pixel;\n       B : vector_pixel;\n-      C : c_int) return vector_pixel\n-   renames Low_Level_Interface.vec_sld_vx_vx_cint_r_vx;\n-\n-   function vec_sld\n-     (A : vector_signed_char;\n-      B : vector_signed_char;\n-      C : c_int) return vector_signed_char\n-   renames Low_Level_Interface.vec_sld_vsc_vsc_cint_r_vsc;\n+      C : c_int) return vector_pixel;\n \n    function vec_sld\n      (A : vector_unsigned_char;\n       B : vector_unsigned_char;\n-      C : c_int) return vector_unsigned_char\n-   renames Low_Level_Interface.vec_sld_vuc_vuc_cint_r_vuc;\n+      C : c_int) return vector_unsigned_char;\n \n    function vec_sld\n      (A : vector_bool_char;\n       B : vector_bool_char;\n-      C : c_int) return vector_bool_char\n-   renames Low_Level_Interface.vec_sld_vbc_vbc_cint_r_vbc;\n+      C : c_int) return vector_bool_char;\n+\n+   pragma Inline_Always (vec_sld);\n+   pragma Convention (Intrinsic, vec_sld);\n+\n+   function vec_sld\n+     (A : vector_float;\n+      B : vector_float;\n+      C : c_int) return vector_float\n+   renames Low_Level_Vectors.vsldoi_4sf;\n+\n+   function vec_sld\n+     (A : vector_signed_int;\n+      B : vector_signed_int;\n+      C : c_int) return vector_signed_int\n+   renames Low_Level_Vectors.vsldoi_4si;\n+\n+   function vec_sld\n+     (A : vector_signed_short;\n+      B : vector_signed_short;\n+      C : c_int) return vector_signed_short\n+   renames Low_Level_Vectors.vsldoi_8hi;\n+\n+   function vec_sld\n+     (A : vector_signed_char;\n+      B : vector_signed_char;\n+      C : c_int) return vector_signed_char\n+   renames Low_Level_Vectors.vsldoi_16qi;\n \n    -- vec_sll --\n \n@@ -3216,63 +3280,6 @@ package GNAT.Altivec.Vector_Operations is\n      (A : vector_unsigned_char;\n       B : vector_unsigned_char) return vector_unsigned_char;\n \n-   -- vec_splat --\n-\n-   function vec_splat\n-     (A : vector_signed_char;\n-      B : c_int) return vector_signed_char\n-   renames Low_Level_Interface.vec_splat_vsc_cint_r_vsc;\n-\n-   function vec_splat\n-     (A : vector_unsigned_char;\n-      B : c_int) return vector_unsigned_char\n-   renames Low_Level_Interface.vec_splat_vuc_cint_r_vuc;\n-\n-   function vec_splat\n-     (A : vector_bool_char;\n-      B : c_int) return vector_bool_char\n-   renames Low_Level_Interface.vec_splat_vbc_cint_r_vbc;\n-\n-   function vec_splat\n-     (A : vector_signed_short;\n-      B : c_int) return vector_signed_short\n-   renames Low_Level_Interface.vec_splat_vss_cint_r_vss;\n-\n-   function vec_splat\n-     (A : vector_unsigned_short;\n-      B : c_int) return vector_unsigned_short\n-   renames Low_Level_Interface.vec_splat_vus_cint_r_vus;\n-\n-   function vec_splat\n-     (A : vector_bool_short;\n-      B : c_int) return vector_bool_short\n-   renames Low_Level_Interface.vec_splat_vbs_cint_r_vbs;\n-\n-   function vec_splat\n-     (A : vector_pixel;\n-      B : c_int) return vector_pixel\n-   renames Low_Level_Interface.vec_splat_vx_cint_r_vx;\n-\n-   function vec_splat\n-     (A : vector_float;\n-      B : c_int) return vector_float\n-   renames Low_Level_Interface.vec_splat_vf_cint_r_vf;\n-\n-   function vec_splat\n-     (A : vector_signed_int;\n-      B : c_int) return vector_signed_int\n-   renames Low_Level_Interface.vec_splat_vsi_cint_r_vsi;\n-\n-   function vec_splat\n-     (A : vector_unsigned_int;\n-      B : c_int) return vector_unsigned_int\n-   renames Low_Level_Interface.vec_splat_vui_cint_r_vui;\n-\n-   function vec_splat\n-     (A : vector_bool_int;\n-      B : c_int) return vector_bool_int\n-   renames Low_Level_Interface.vec_splat_vbi_cint_r_vbi;\n-\n    -- vec_vspltw --\n \n    function vec_vspltw\n@@ -3319,56 +3326,39 @@ package GNAT.Altivec.Vector_Operations is\n \n    -- vec_vspltb --\n \n-   function vec_vspltb\n-     (A : vector_signed_char;\n-      B : c_int) return vector_signed_char\n-   renames Low_Level_Interface.vec_vspltb_vsc_cint_r_vsc;\n-\n    function vec_vspltb\n      (A : vector_unsigned_char;\n-      B : c_int) return vector_unsigned_char\n-   renames Low_Level_Interface.vec_vspltb_vuc_cint_r_vuc;\n+      B : c_int) return vector_unsigned_char;\n \n    function vec_vspltb\n      (A : vector_bool_char;\n-      B : c_int) return vector_bool_char\n-   renames Low_Level_Interface.vec_vspltb_vbc_cint_r_vbc;\n+      B : c_int) return vector_bool_char;\n \n-   -- vec_splat_s8 --\n+   pragma Inline_Always (vec_vspltb);\n+   pragma Convention (Intrinsic, vec_vspltb);\n \n-   function vec_splat_s8\n+   function vec_vspltb\n+     (A : vector_signed_char;\n+      B : c_int) return vector_signed_char\n+   renames Low_Level_Vectors.vspltb;\n+\n+   -- vec_vspltisb --\n+\n+   function vec_vspltisb\n      (A : c_int) return vector_signed_char\n-   renames Low_Level_Interface.vec_splat_s8_cint_r_vsc;\n+   renames Low_Level_Vectors.vspltisb;\n \n-   -- vec_splat_s16 --\n+   -- vec_vspltish --\n \n-   function vec_splat_s16\n+   function vec_vspltish\n      (A : c_int) return vector_signed_short\n-   renames Low_Level_Interface.vec_splat_s16_cint_r_vss;\n+   renames Low_Level_Vectors.vspltish;\n \n-   -- vec_splat_s32 --\n+   -- vec_vspltisw --\n \n-   function vec_splat_s32\n+   function vec_vspltisw\n      (A : c_int) return vector_signed_int\n-   renames Low_Level_Interface.vec_splat_s32_cint_r_vsi;\n-\n-   -- vec_splat_u8 --\n-\n-   function vec_splat_u8\n-     (A : c_int) return vector_unsigned_char\n-   renames Low_Level_Interface.vec_splat_u8_cint_r_vuc;\n-\n-   -- vec_splat_u16 --\n-\n-   function vec_splat_u16\n-     (A : c_int) return vector_unsigned_short\n-   renames Low_Level_Interface.vec_splat_u16_cint_r_vus;\n-\n-   -- vec_splat_u32 --\n-\n-   function vec_splat_u32\n-     (A : c_int) return vector_unsigned_int\n-   renames Low_Level_Interface.vec_splat_u32_cint_r_vui;\n+     renames Low_Level_Vectors.vspltisw;\n \n    -- vec_sr --\n \n@@ -5729,6 +5719,105 @@ package GNAT.Altivec.Vector_Operations is\n    -- Straight overloads of routines aboves --\n    -------------------------------------------\n \n+   -- vec_splat_s8 --\n+\n+   function vec_splat_s8\n+     (A : c_int) return vector_signed_char\n+   renames vec_vspltisb;\n+\n+   -- vec_splat_s16 --\n+\n+   function vec_splat_s16\n+     (A : c_int) return vector_signed_short\n+   renames vec_vspltish;\n+\n+   -- vec_splat_s32 --\n+\n+   function vec_splat_s32\n+     (A : c_int) return vector_signed_int\n+   renames vec_vspltisw;\n+\n+   -- vec_splat --\n+\n+   function vec_splat\n+     (A : vector_signed_char;\n+      B : c_int) return vector_signed_char\n+   renames vec_vspltb;\n+\n+   function vec_splat\n+     (A : vector_unsigned_char;\n+      B : c_int) return vector_unsigned_char\n+   renames vec_vspltb;\n+\n+   function vec_splat\n+     (A : vector_bool_char;\n+      B : c_int) return vector_bool_char\n+   renames vec_vspltb;\n+\n+   function vec_splat\n+     (A : vector_signed_short;\n+      B : c_int) return vector_signed_short\n+   renames vec_vsplth;\n+\n+   function vec_splat\n+     (A : vector_unsigned_short;\n+      B : c_int) return vector_unsigned_short\n+   renames vec_vsplth;\n+\n+   function vec_splat\n+     (A : vector_bool_short;\n+      B : c_int) return vector_bool_short\n+   renames vec_vsplth;\n+\n+   function vec_splat\n+     (A : vector_pixel;\n+      B : c_int) return vector_pixel\n+   renames vec_vsplth;\n+\n+   function vec_splat\n+     (A : vector_float;\n+      B : c_int) return vector_float\n+   renames vec_vspltw;\n+\n+   function vec_splat\n+     (A : vector_signed_int;\n+      B : c_int) return vector_signed_int\n+   renames vec_vspltw;\n+\n+   function vec_splat\n+     (A : vector_unsigned_int;\n+      B : c_int) return vector_unsigned_int\n+   renames vec_vspltw;\n+\n+   function vec_splat\n+     (A : vector_bool_int;\n+      B : c_int) return vector_bool_int\n+   renames vec_vspltw;\n+\n+   -- vec_splat_u8 --\n+\n+   function vec_splat_u8\n+     (A : c_int) return vector_unsigned_char;\n+\n+   pragma Inline_Always (vec_splat_u8);\n+   pragma Convention (Intrinsic, vec_splat_u8);\n+\n+   -- vec_splat_u16 --\n+\n+   function vec_splat_u16\n+     (A : c_int) return vector_unsigned_short;\n+\n+   pragma Inline_Always (vec_splat_u16);\n+   pragma Convention (Intrinsic, vec_splat_u16);\n+\n+   -- vec_splat_u32 --\n+\n+   function vec_splat_u32\n+     (A : c_int) return vector_unsigned_int;\n+\n+   pragma Inline_Always (vec_splat_u32);\n+   pragma Convention (Intrinsic, vec_splat_u32);\n+\n    -- vec_ctf --\n \n    function vec_ctf\n@@ -6997,24 +7086,6 @@ package GNAT.Altivec.Vector_Operations is\n       B : vector_unsigned_char) return vector_unsigned_char\n    renames vec_slo;\n \n-   -- vec_vspltisb --\n-\n-   function vec_vspltisb\n-     (A : c_int) return vector_signed_char\n-   renames vec_splat_s8;\n-\n-   -- vec_vspltish --\n-\n-   function vec_vspltish\n-     (A : c_int) return vector_signed_short\n-   renames vec_splat_s16;\n-\n-   -- vec_vspltisw --\n-\n-   function vec_vspltisw\n-     (A : c_int) return vector_signed_int\n-   renames vec_splat_s32;\n-\n    -- vec_vsr --\n \n    function vec_vsr\n@@ -7740,62 +7811,6 @@ package GNAT.Altivec.Vector_Operations is\n \n private\n \n-   -------------------------------------\n-   -- Different flavors of interfaces --\n-   -------------------------------------\n-\n-   --  The vast majority of the user visible functions are just neutral type\n-   --  conversion wrappers around calls to low level primitives. For instance:\n-   --\n-   --        function vec_sll\n-   --          (A : vector_signed_int;\n-   --           B : vector_unsigned_char) return vector_signed_int is\n-   --        begin\n-   --          return To_VSI (vsl (To_VSI (A), To_VSI (B)));\n-   --        end vec_sll;\n-   --\n-   --  We actually don't always need an explicit wrapper and can bind directly\n-   --  with a straight Import of the low level routine, or a renaming of such\n-   --  instead.\n-   --\n-   --  A direct binding is not possible (that is, a wrapper is mandatory) in\n-   --  a number of cases:\n-   --\n-   --  o When the high-level/low-level types don't match, in which case a\n-   --  straight import would risk wrong code generation or compiler blowups in\n-   --  the Hard binding case. This is the case for 'B' in the example above.\n-   --\n-   --  o When the high-level/low-level argument lists differ, as is the case\n-   --  for most of the AltiVec predicates, relying on a low-level primitive\n-   --  which expects a control code argument, like:\n-   --\n-   --        function vec_any_ne\n-   --           (A : vector_signed_int;\n-   --            B : vector_signed_int) return c_int is\n-   --        begin\n-   --          return vcmpequw_p (CR6_LT_REV, To_VSI (A), To_VSI (B));\n-   --        end vec_any_ne;\n-   --\n-   --  o When the high-level/low-level arguments order don't match, as in:\n-   --\n-   --        function vec_cmplt\n-   --           (A : vector_unsigned_char;\n-   --            B : vector_unsigned_char) return vector_bool_char is\n-   --         begin\n-   --           return To_VBC (vcmpgtub (To_VSC (B), To_VSC (A)));\n-   --         end vec_cmplt;\n-\n-   -----------------------------\n-   -- Inlining considerations --\n-   -----------------------------\n-\n-   --  The intent in the Hard binding case is to eventually map operations to\n-   --  hardware instructions. Needless to say, intermediate function calls do\n-   --  not fit this purpose, so all the user visible subprograms are inlined.\n-   --  In the soft case, the bulk of the work is performed by the low level\n-   --  routines, and those exported by this unit are short enough for the\n-   --  inlining to make sense and even be beneficial, so...\n-\n    pragma Inline_Always (vec_abs);\n    pragma Inline_Always (vec_abss);\n    pragma Inline_Always (vec_add);\n@@ -8000,18 +8015,6 @@ private\n    pragma Inline_Always (vec_any_numeric);\n    pragma Inline_Always (vec_any_out);\n \n-   pragma Inline_Always (vec_dst);\n-   pragma Convention (Intrinsic, vec_dst);\n-\n-   pragma Inline_Always (vec_dstt);\n-   pragma Convention (Intrinsic, vec_dstt);\n-\n-   pragma Inline_Always (vec_dstst);\n-   pragma Convention (Intrinsic, vec_dstst);\n-\n-   pragma Inline_Always (vec_dststt);\n-   pragma Convention (Intrinsic, vec_dststt);\n-\n    --  Similarly, vec_step is expected to be turned into a compile time\n    --  constant, so ...\n "}]}