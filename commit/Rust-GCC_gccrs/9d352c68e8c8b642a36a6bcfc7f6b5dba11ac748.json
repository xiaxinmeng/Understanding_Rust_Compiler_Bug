{"sha": "9d352c68e8c8b642a36a6bcfc7f6b5dba11ac748", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQzNTJjNjhlOGM4YjY0MmEzNmE2YmNmYzdmNmI1ZGJhMTFhYzc0OA==", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-07-12T17:06:18Z"}, "committer": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-07-30T21:53:39Z"}, "message": "rs6000: Add support for SSE4.1 \"blend\" intrinsics\n\n_mm_blend_epi16 and _mm_blendv_epi8 were added earlier.\nAdd these four to complete the set.\n\n2021-07-30  Paul A. Clarke  <pc@us.ibm.com>\n\ngcc\n\t* config/rs6000/smmintrin.h (_mm_blend_pd, _mm_blendv_pd,\n\t_mm_blend_ps, _mm_blendv_ps): New.", "tree": {"sha": "78e3f8044751750eda11cbdb45b734a038187ac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78e3f8044751750eda11cbdb45b734a038187ac1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d352c68e8c8b642a36a6bcfc7f6b5dba11ac748", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d352c68e8c8b642a36a6bcfc7f6b5dba11ac748", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d352c68e8c8b642a36a6bcfc7f6b5dba11ac748", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d352c68e8c8b642a36a6bcfc7f6b5dba11ac748/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7bf03cf69ccb7dcfa0320774aa7f3c51344dada", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7bf03cf69ccb7dcfa0320774aa7f3c51344dada", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7bf03cf69ccb7dcfa0320774aa7f3c51344dada"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "382f50c90c5756a0837989a83bc7a4028a6cbdc8", "filename": "gcc/config/rs6000/smmintrin.h", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d352c68e8c8b642a36a6bcfc7f6b5dba11ac748/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d352c68e8c8b642a36a6bcfc7f6b5dba11ac748/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h?ref=9d352c68e8c8b642a36a6bcfc7f6b5dba11ac748", "patch": "@@ -116,6 +116,66 @@ _mm_blendv_epi8 (__m128i __A, __m128i __B, __m128i __mask)\n   return (__m128i) vec_sel ((__v16qu) __A, (__v16qu) __B, __lmask);\n }\n \n+__inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_blend_ps (__m128 __A, __m128 __B, const int __imm8)\n+{\n+  __v16qu __pcv[] =\n+    {\n+      {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 },\n+      { 16, 17, 18, 19,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 },\n+      {  0,  1,  2,  3, 20, 21, 22, 23,  8,  9, 10, 11, 12, 13, 14, 15 },\n+      { 16, 17, 18, 19, 20, 21, 22, 23,  8,  9, 10, 11, 12, 13, 14, 15 },\n+      {  0,  1,  2,  3,  4,  5,  6,  7, 24, 25, 26, 27, 12, 13, 14, 15 },\n+      { 16, 17, 18, 19,  4,  5,  6,  7, 24, 25, 26, 27, 12, 13, 14, 15 },\n+      {  0,  1,  2,  3, 20, 21, 22, 23, 24, 25, 26, 27, 12, 13, 14, 15 },\n+      { 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 12, 13, 14, 15 },\n+      {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 28, 29, 30, 31 },\n+      { 16, 17, 18, 19,  4,  5,  6,  7,  8,  9, 10, 11, 28, 29, 30, 31 },\n+      {  0,  1,  2,  3, 20, 21, 22, 23,  8,  9, 10, 11, 28, 29, 30, 31 },\n+      { 16, 17, 18, 19, 20, 21, 22, 23,  8,  9, 10, 11, 28, 29, 30, 31 },\n+      {  0,  1,  2,  3,  4,  5,  6,  7, 24, 25, 26, 27, 28, 29, 30, 31 },\n+      { 16, 17, 18, 19,  4,  5,  6,  7, 24, 25, 26, 27, 28, 29, 30, 31 },\n+      {  0,  1,  2,  3, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 },\n+      { 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 },\n+    };\n+  __v16qu __r = vec_perm ((__v16qu) __A, (__v16qu)__B, __pcv[__imm8]);\n+  return (__m128) __r;\n+}\n+\n+__inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_blendv_ps (__m128 __A, __m128 __B, __m128 __mask)\n+{\n+  const __v4si __zero = {0};\n+  const __vector __bool int __boolmask = vec_cmplt ((__v4si) __mask, __zero);\n+  return (__m128) vec_sel ((__v4su) __A, (__v4su) __B, (__v4su) __boolmask);\n+}\n+\n+__inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_blend_pd (__m128d __A, __m128d __B, const int __imm8)\n+{\n+  __v16qu __pcv[] =\n+    {\n+      {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 },\n+      { 16, 17, 18, 19, 20, 21, 22, 23,  8,  9, 10, 11, 12, 13, 14, 15 },\n+      {  0,  1,  2,  3,  4,  5,  6,  7, 24, 25, 26, 27, 28, 29, 30, 31 },\n+      { 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }\n+    };\n+  __v16qu __r = vec_perm ((__v16qu) __A, (__v16qu)__B, __pcv[__imm8]);\n+  return (__m128d) __r;\n+}\n+\n+__inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_blendv_pd (__m128d __A, __m128d __B, __m128d __mask)\n+{\n+  const __v2di __zero = {0};\n+  const __vector __bool long long __boolmask = vec_cmplt ((__v2di) __mask, __zero);\n+  return (__m128d) vec_sel ((__v2du) __A, (__v2du) __B, (__v2du) __boolmask);\n+}\n+\n __inline int\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_testz_si128 (__m128i __A, __m128i __B)"}]}