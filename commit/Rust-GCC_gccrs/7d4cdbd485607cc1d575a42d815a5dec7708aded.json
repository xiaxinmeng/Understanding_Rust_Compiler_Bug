{"sha": "7d4cdbd485607cc1d575a42d815a5dec7708aded", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q0Y2RiZDQ4NTYwN2NjMWQ1NzVhNDJkODE1YTVkZWM3NzA4YWRlZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-06-28T11:55:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-06-28T11:55:19Z"}, "message": "tree-ssa-alias.c (nonoverlapping_component_refs_of_decl_p): Properly handle DECL_BIT_FIELD_REPRESENTATIVE occuring as COMPONENT_REF operand.\n\n2016-06-28  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-alias.c (nonoverlapping_component_refs_of_decl_p):\n\tProperly handle DECL_BIT_FIELD_REPRESENTATIVE occuring as\n\tCOMPONENT_REF operand.\n\t(nonoverlapping_component_refs_p): Likewise.\n\t* stor-layout.c (start_bitfield_representative): Mark\n\tDECL_BIT_FIELD_REPRESENTATIVE as DECL_NONADDRESSABLE_P.\n\nFrom-SVN: r237818", "tree": {"sha": "cc5f212f823778695adf1ffc90a0354537fe9967", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc5f212f823778695adf1ffc90a0354537fe9967"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d4cdbd485607cc1d575a42d815a5dec7708aded", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4cdbd485607cc1d575a42d815a5dec7708aded", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d4cdbd485607cc1d575a42d815a5dec7708aded", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4cdbd485607cc1d575a42d815a5dec7708aded/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e9ac1f86bf70e0ca794fed6ba3b8fe3026da063e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9ac1f86bf70e0ca794fed6ba3b8fe3026da063e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9ac1f86bf70e0ca794fed6ba3b8fe3026da063e"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "1ec8955cdb6cac089f0c0836a5f941fa0ee3734e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4cdbd485607cc1d575a42d815a5dec7708aded/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4cdbd485607cc1d575a42d815a5dec7708aded/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d4cdbd485607cc1d575a42d815a5dec7708aded", "patch": "@@ -1,3 +1,12 @@\n+2016-06-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-alias.c (nonoverlapping_component_refs_of_decl_p):\n+\tProperly handle DECL_BIT_FIELD_REPRESENTATIVE occuring as\n+\tCOMPONENT_REF operand.\n+\t(nonoverlapping_component_refs_p): Likewise.\n+\t* stor-layout.c (start_bitfield_representative): Mark\n+\tDECL_BIT_FIELD_REPRESENTATIVE as DECL_NONADDRESSABLE_P.\n+\n 2016-06-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Makefile.in: Don't cat ../stage_current if it does not exist."}, {"sha": "d66d769e3fc351242abafed93e003712d6f708ca", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4cdbd485607cc1d575a42d815a5dec7708aded/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4cdbd485607cc1d575a42d815a5dec7708aded/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=7d4cdbd485607cc1d575a42d815a5dec7708aded", "patch": "@@ -1808,6 +1808,11 @@ start_bitfield_representative (tree field)\n   DECL_SIZE_UNIT (repr) = DECL_SIZE_UNIT (field);\n   DECL_PACKED (repr) = DECL_PACKED (field);\n   DECL_CONTEXT (repr) = DECL_CONTEXT (field);\n+  /* There are no indirect accesses to this field.  If we introduce\n+     some then they have to use the record alias set.  This makes\n+     sure to properly conflict with [indirect] accesses to addressable\n+     fields of the bitfield group.  */\n+  DECL_NONADDRESSABLE_P (repr) = 1;\n   return repr;\n }\n "}, {"sha": "70c24b59446313b7a001f0ca32ab6f1504d8181d", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4cdbd485607cc1d575a42d815a5dec7708aded/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4cdbd485607cc1d575a42d815a5dec7708aded/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=7d4cdbd485607cc1d575a42d815a5dec7708aded", "patch": "@@ -929,13 +929,20 @@ nonoverlapping_component_refs_of_decl_p (tree ref1, tree ref2)\n       if (type1 != type2 || TREE_CODE (type1) != RECORD_TYPE)\n \t goto may_overlap;\n \n-      /* Different fields of the same record type cannot overlap.\n-\t ??? Bitfields can overlap at RTL level so punt on them.  */\n       if (field1 != field2)\n \t{\n \t  component_refs1.release ();\n \t  component_refs2.release ();\n-\t  return !(DECL_BIT_FIELD (field1) && DECL_BIT_FIELD (field2));\n+\t  /* A field and its representative need to be considered the\n+\t     same.  */\n+\t  if (DECL_BIT_FIELD_REPRESENTATIVE (field1) == field2\n+\t      || DECL_BIT_FIELD_REPRESENTATIVE (field2) == field1)\n+\t    return false;\n+\t  /* Different fields of the same record type cannot overlap.\n+\t     ??? Bitfields can overlap at RTL level so punt on them.  */\n+\t  if (DECL_BIT_FIELD (field1) && DECL_BIT_FIELD (field2))\n+\t    return false;\n+\t  return true;\n \t}\n     }\n \n@@ -1031,9 +1038,20 @@ nonoverlapping_component_refs_p (const_tree x, const_tree y)\n       if (typex == typey)\n \t{\n \t  /* We're left with accessing different fields of a structure,\n-\t     no possible overlap, unless they are both bitfields.  */\n+\t     no possible overlap.  */\n \t  if (fieldx != fieldy)\n-\t    return !(DECL_BIT_FIELD (fieldx) && DECL_BIT_FIELD (fieldy));\n+\t    {\n+\t      /* A field and its representative need to be considered the\n+\t\t same.  */\n+\t      if (DECL_BIT_FIELD_REPRESENTATIVE (fieldx) == fieldy\n+\t\t  || DECL_BIT_FIELD_REPRESENTATIVE (fieldy) == fieldx)\n+\t\treturn false;\n+\t      /* Different fields of the same record type cannot overlap.\n+\t\t ??? Bitfields can overlap at RTL level so punt on them.  */\n+\t      if (DECL_BIT_FIELD (fieldx) && DECL_BIT_FIELD (fieldy))\n+\t\treturn false;\n+\t      return true;\n+\t    }\n \t}\n       if (TYPE_UID (typex) < TYPE_UID (typey))\n \t{"}]}