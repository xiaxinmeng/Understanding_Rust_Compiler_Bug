{"sha": "f451d3a836fff435bc4bc0ed121cdc5f6e6c14d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ1MWQzYTgzNmZmZjQzNWJjNGJjMGVkMTIxY2RjNWY2ZTZjMTRkNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-03-22T16:25:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-03-22T16:25:50Z"}, "message": "re PR sanitizer/60613 (Invalid signed subtraction ubsan diagnostics)\n\n\tPR sanitizer/60613\n\t* internal-fn.c (ubsan_expand_si_overflow_addsub_check): For\n\tcode == MINUS_EXPR, never swap op0 with op1.\n\n\t* c-c++-common/ubsan/pr60613-1.c: New test.\n\t* c-c++-common/ubsan/pr60613-2.c: New test.\n\nFrom-SVN: r208766", "tree": {"sha": "99eaf3733d043efe30616738f13338abe2c28621", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99eaf3733d043efe30616738f13338abe2c28621"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f451d3a836fff435bc4bc0ed121cdc5f6e6c14d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f451d3a836fff435bc4bc0ed121cdc5f6e6c14d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f451d3a836fff435bc4bc0ed121cdc5f6e6c14d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f451d3a836fff435bc4bc0ed121cdc5f6e6c14d6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3db31fd1cc7acf87e092c0bbeba37d234c77b83b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3db31fd1cc7acf87e092c0bbeba37d234c77b83b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3db31fd1cc7acf87e092c0bbeba37d234c77b83b"}], "stats": {"total": 90, "additions": 85, "deletions": 5}, "files": [{"sha": "e085b2ac681193fab0a482c5ad6e9f76c972a303", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f451d3a836fff435bc4bc0ed121cdc5f6e6c14d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f451d3a836fff435bc4bc0ed121cdc5f6e6c14d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f451d3a836fff435bc4bc0ed121cdc5f6e6c14d6", "patch": "@@ -1,5 +1,9 @@\n 2014-03-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR sanitizer/60613\n+\t* internal-fn.c (ubsan_expand_si_overflow_addsub_check): For\n+\tcode == MINUS_EXPR, never swap op0 with op1.\n+\n \t* toplev.c (init_local_tick): Avoid signed integer multiplication\n \toverflow.\n \t* genautomata.c (reserv_sets_hash_value): Fix rotate idiom, avoid"}, {"sha": "1062ea84705d6105150aa78a5584f2b8200e03c2", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f451d3a836fff435bc4bc0ed121cdc5f6e6c14d6/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f451d3a836fff435bc4bc0ed121cdc5f6e6c14d6/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=f451d3a836fff435bc4bc0ed121cdc5f6e6c14d6", "patch": "@@ -221,22 +221,23 @@ ubsan_expand_si_overflow_addsub_check (tree_code code, gimple stmt)\n       res = expand_binop (mode, code == PLUS_EXPR ? add_optab : sub_optab,\n \t\t\t  op0, op1, NULL_RTX, false, OPTAB_LIB_WIDEN);\n \n-      /* If we can prove one of the arguments is always non-negative\n-\t or always negative, we can do just one comparison and\n-\t conditional jump instead of 2 at runtime, 3 present in the\n+      /* If we can prove one of the arguments (for MINUS_EXPR only\n+\t the second operand, as subtraction is not commutative) is always\n+\t non-negative or always negative, we can do just one comparison\n+\t and conditional jump instead of 2 at runtime, 3 present in the\n \t emitted code.  If one of the arguments is CONST_INT, all we\n \t need is to make sure it is op1, then the first\n \t emit_cmp_and_jump_insns will be just folded.  Otherwise try\n \t to use range info if available.  */\n-      if (CONST_INT_P (op0))\n+      if (code == PLUS_EXPR && CONST_INT_P (op0))\n \t{\n \t  rtx tem = op0;\n \t  op0 = op1;\n \t  op1 = tem;\n \t}\n       else if (CONST_INT_P (op1))\n \t;\n-      else if (TREE_CODE (arg0) == SSA_NAME)\n+      else if (code == PLUS_EXPR && TREE_CODE (arg0) == SSA_NAME)\n \t{\n \t  double_int arg0_min, arg0_max;\n \t  if (get_range_info (arg0, &arg0_min, &arg0_max) == VR_RANGE)"}, {"sha": "f95f4bd23c772c2c7770e1261f1a72a4aa534bb7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f451d3a836fff435bc4bc0ed121cdc5f6e6c14d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f451d3a836fff435bc4bc0ed121cdc5f6e6c14d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f451d3a836fff435bc4bc0ed121cdc5f6e6c14d6", "patch": "@@ -1,3 +1,9 @@\n+2014-03-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/60613\n+\t* c-c++-common/ubsan/pr60613-1.c: New test.\n+\t* c-c++-common/ubsan/pr60613-2.c: New test.\n+\n 2014-03-22  Matthias Klose  <doko@ubuntu.com>\n \n \t* g++.dg/cpp0x/regress: Remove empty directory."}, {"sha": "2161e0b8ec8ce9dddb3aa6d8be4103493d03a1ce", "filename": "gcc/testsuite/c-c++-common/ubsan/pr60613-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f451d3a836fff435bc4bc0ed121cdc5f6e6c14d6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr60613-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f451d3a836fff435bc4bc0ed121cdc5f6e6c14d6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr60613-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr60613-1.c?ref=f451d3a836fff435bc4bc0ed121cdc5f6e6c14d6", "patch": "@@ -0,0 +1,33 @@\n+/* PR sanitizer/60613 */\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=undefined\" } */\n+\n+long long y;\n+\n+__attribute__((noinline, noclone)) long long\n+foo (long long x)\n+{\n+  asm (\"\");\n+  if (x >= 0 || x < -2040)\n+    return 23;\n+  x += 2040;\n+  return x - y;\n+}\n+\n+__attribute__((noinline, noclone)) long long\n+bar (long long x)\n+{\n+  asm (\"\");\n+  return 8LL - x;\n+}\n+\n+int\n+main ()\n+{\n+  y = 1;\n+  if (foo (8 - 2040) != 8 - 1)\n+    __builtin_abort ();\n+  if (bar (1) != 8 - 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "92c2de81eb8b106d4c4ff8297cf9674a533d642e", "filename": "gcc/testsuite/c-c++-common/ubsan/pr60613-2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f451d3a836fff435bc4bc0ed121cdc5f6e6c14d6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr60613-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f451d3a836fff435bc4bc0ed121cdc5f6e6c14d6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr60613-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr60613-2.c?ref=f451d3a836fff435bc4bc0ed121cdc5f6e6c14d6", "patch": "@@ -0,0 +1,36 @@\n+/* PR sanitizer/60613 */\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=undefined\" } */\n+\n+long long y;\n+\n+__attribute__((noinline, noclone)) long long\n+foo (long long x)\n+{\n+  asm (\"\");\n+  if (x >= 0 || x < -2040)\n+    return 23;\n+  x += 2040;\n+  return x - y;\n+}\n+\n+__attribute__((noinline, noclone)) long long\n+bar (long long x)\n+{\n+  asm (\"\");\n+  return 8LL - x;\n+}\n+\n+int\n+main ()\n+{\n+  y = -__LONG_LONG_MAX__ + 6;\n+  if (foo (8 - 2040) != -__LONG_LONG_MAX__)\n+    __builtin_abort ();\n+  if (bar (-__LONG_LONG_MAX__ + 5) != -__LONG_LONG_MAX__ + 1)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-output \"signed integer overflow: 8 \\\\- -9223372036854775801 cannot be represented in type 'long long int'(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*signed integer overflow: 8 \\\\- -9223372036854775802 cannot be represented in type 'long long int'\" } */"}]}