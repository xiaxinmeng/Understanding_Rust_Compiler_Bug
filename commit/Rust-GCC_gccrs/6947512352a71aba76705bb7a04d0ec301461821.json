{"sha": "6947512352a71aba76705bb7a04d0ec301461821", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk0NzUxMjM1MmE3MWFiYTc2NzA1YmI3YTA0ZDBlYzMwMTQ2MTgyMQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-10-19T12:40:31Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-10-19T12:40:31Z"}, "message": "re PR c++/18047 (Wrong precedence between equality (==, !=) and < operators)\n\n2004-10-19  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR c++/18047\n\t* parser.c (enum cp_parser_prec): Give relational expressions\n\ta higher precedence than equality expressions.\n\n2004-10-19  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR c++/18047\n\n\t* g++.dg/parse/expr3.C: New test.\n\nFrom-SVN: r89272", "tree": {"sha": "dba19c74a89cbb86dc57f18fa29d12f02e9c3c4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dba19c74a89cbb86dc57f18fa29d12f02e9c3c4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6947512352a71aba76705bb7a04d0ec301461821", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6947512352a71aba76705bb7a04d0ec301461821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6947512352a71aba76705bb7a04d0ec301461821", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6947512352a71aba76705bb7a04d0ec301461821/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f94cef0a668dbea993ab630a24fdae73aecb1c5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f94cef0a668dbea993ab630a24fdae73aecb1c5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f94cef0a668dbea993ab630a24fdae73aecb1c5a"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "325fbf3db0f997945e38230189be588166155224", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6947512352a71aba76705bb7a04d0ec301461821/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6947512352a71aba76705bb7a04d0ec301461821/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6947512352a71aba76705bb7a04d0ec301461821", "patch": "@@ -1,3 +1,9 @@\n+2004-10-19  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR c++/18047\n+\t* parser.c (enum cp_parser_prec): Give relational expressions\n+\ta higher precedence than equality expressions.\n+\n 2004-10-15  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* cp-tree.h (UNIQUELY_DERIVED_FROM_P): Adjust lookup_base call."}, {"sha": "6dac467f977d66e3294946a91be1a999bc9b283d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6947512352a71aba76705bb7a04d0ec301461821/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6947512352a71aba76705bb7a04d0ec301461821/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6947512352a71aba76705bb7a04d0ec301461821", "patch": "@@ -1074,8 +1074,8 @@ enum cp_parser_prec\n   PREC_INCLUSIVE_OR_EXPRESSION,\n   PREC_EXCLUSIVE_OR_EXPRESSION,\n   PREC_AND_EXPRESSION,\n-  PREC_RELATIONAL_EXPRESSION,\n   PREC_EQUALITY_EXPRESSION,\n+  PREC_RELATIONAL_EXPRESSION,\n   PREC_SHIFT_EXPRESSION,\n   PREC_ADDITIVE_EXPRESSION,\n   PREC_MULTIPLICATIVE_EXPRESSION,"}, {"sha": "289420580b270bbf0764a753e617d2fec47bcead", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6947512352a71aba76705bb7a04d0ec301461821/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6947512352a71aba76705bb7a04d0ec301461821/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6947512352a71aba76705bb7a04d0ec301461821", "patch": "@@ -1,3 +1,9 @@\n+2004-10-19  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR c++/18047\n+\n+\t* g++.dg/parse/expr3.C: New test.\n+\n 2004-10-18  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.dg/smod-1.c: New test."}, {"sha": "95d332f41b0808e70c1ecf7262904ad58b7fd370", "filename": "gcc/testsuite/g++.dg/parse/expr3.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6947512352a71aba76705bb7a04d0ec301461821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fexpr3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6947512352a71aba76705bb7a04d0ec301461821/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fexpr3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fexpr3.C?ref=6947512352a71aba76705bb7a04d0ec301461821", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* PR/18047  Test that operators have the right precedence.  */\n+/* by bonzini@gnu.org */\n+\n+#define test(lower, higher, a, b, c, d) \\\n+  test_(lower, higher, a, b, c, d, __LINE__)\n+\n+#define test_(lower, higher, a, b, c, d, line)\\\n+   test__(lower, higher, a, b, c, d, line)\n+\n+/* The first declaration tests that the parentheses are added correctly\n+   by the expression parser.  The second tests that the two possible\n+   orderings of precedences do give different results.  */\n+#define test__(lower, higher, a, b, c, d, line) \\\n+  char test##line[ \\\n+    (a higher b lower c higher d) == \\\n+    ((a higher b) lower (c higher d)) \\\n+    ? 1 : -1]; \\\n+  char doublecheck##line[ \\\n+    (a higher b lower c higher d) == \\\n+    (a higher (b lower c) higher d) \\\n+    ? -1 : 1];\n+\n+test (||, &&, 1, 1, 0, 0)\n+test (&&, |, 5, 1, 1, 19)\n+test (|, ^, 1, 2, 2, 1)\n+test (^, &, 1, 3, 2, 6)\n+test (&, ==, 1, 3, 2, 0)\n+test (==, <, 2, 0, 0, 0)\n+test (<, <<, 2, 3, 6, 8)\n+test (<<, +, 2, 3, 4, 5)\n+test (+, *, 2, 6, 9, 13)"}]}