{"sha": "bde257ff591d390fea6af968dfc7935004c95a84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRlMjU3ZmY1OTFkMzkwZmVhNmFmOTY4ZGZjNzkzNTAwNGM5NWE4NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-10-10T19:53:29Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-10-10T19:53:29Z"}, "message": "unwind-dw2-fde.c (fde_compare_t): Change return type to int.\n\n        * unwind-dw2-fde.c (fde_compare_t): Change return type to int.\n        (fde_unencoded_compare): Likewise.  Don't use subtraction to get\n        a tristate comparison value.\n        (fde_single_encoding_compare, fde_mixed_encoding_compare): Likewise.\n\nFrom-SVN: r46157", "tree": {"sha": "f58716b402df61329744a155ca95c292f0a42a40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f58716b402df61329744a155ca95c292f0a42a40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bde257ff591d390fea6af968dfc7935004c95a84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde257ff591d390fea6af968dfc7935004c95a84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bde257ff591d390fea6af968dfc7935004c95a84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde257ff591d390fea6af968dfc7935004c95a84/comments", "author": null, "committer": null, "parents": [{"sha": "e10f3d36e5df9436d0627c424d8a4a6c194aede9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e10f3d36e5df9436d0627c424d8a4a6c194aede9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e10f3d36e5df9436d0627c424d8a4a6c194aede9"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "29db45cff6b26ee9bb60041d4716b4e8f45905c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde257ff591d390fea6af968dfc7935004c95a84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde257ff591d390fea6af968dfc7935004c95a84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bde257ff591d390fea6af968dfc7935004c95a84", "patch": "@@ -1,3 +1,10 @@\n+2001-10-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* unwind-dw2-fde.c (fde_compare_t): Change return type to int.\n+\t(fde_unencoded_compare): Likewise.  Don't use subtraction to get\n+\ta tristate comparison value.\n+\t(fde_single_encoding_compare, fde_mixed_encoding_compare): Likewise.\n+\n 2001-10-10  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \n \tPR c++/4512"}, {"sha": "729adbbd4ab7201a7abbdda6141c0b659cb26a80", "filename": "gcc/unwind-dw2-fde.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde257ff591d390fea6af968dfc7935004c95a84/gcc%2Funwind-dw2-fde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde257ff591d390fea6af968dfc7935004c95a84/gcc%2Funwind-dw2-fde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde.c?ref=bde257ff591d390fea6af968dfc7935004c95a84", "patch": "@@ -293,14 +293,18 @@ get_fde_encoding (struct dwarf_fde *f)\n \n /* Comparison routines.  Three variants of increasing complexity.  */\n \n-static saddr\n+static int\n fde_unencoded_compare (struct object *ob __attribute__((unused)),\n \t\t       fde *x, fde *y)\n {\n-  return *(saddr *)x->pc_begin - *(saddr *)y->pc_begin;\n+  if (x->pc_begin > y->pc_begin)\n+    return 1;\n+  if (x->pc_begin < y->pc_begin)\n+    return -1;\n+  return 0;\n }\n \n-static saddr\n+static int\n fde_single_encoding_compare (struct object *ob, fde *x, fde *y)\n {\n   _Unwind_Ptr base, x_ptr, y_ptr;\n@@ -309,10 +313,14 @@ fde_single_encoding_compare (struct object *ob, fde *x, fde *y)\n   read_encoded_value_with_base (ob->s.b.encoding, base, x->pc_begin, &x_ptr);\n   read_encoded_value_with_base (ob->s.b.encoding, base, y->pc_begin, &y_ptr);\n \n-  return x_ptr - y_ptr;\n+  if (x_ptr > y_ptr)\n+    return 1;\n+  if (x_ptr < y_ptr)\n+    return -1;\n+  return 0;\n }\n \n-static saddr\n+static int\n fde_mixed_encoding_compare (struct object *ob, fde *x, fde *y)\n {\n   int x_encoding, y_encoding;\n@@ -326,10 +334,14 @@ fde_mixed_encoding_compare (struct object *ob, fde *x, fde *y)\n   read_encoded_value_with_base (y_encoding, base_from_object (y_encoding, ob),\n \t\t\t\ty->pc_begin, &y_ptr);\n \n-  return x_ptr - y_ptr;\n+  if (x_ptr > y_ptr)\n+    return 1;\n+  if (x_ptr < y_ptr)\n+    return -1;\n+  return 0;\n }\n \n-typedef saddr (*fde_compare_t) (struct object *, fde *, fde *);\n+typedef int (*fde_compare_t) (struct object *, fde *, fde *);\n \n \n /* This is a special mix of insertion sort and heap sort, optimized for"}]}