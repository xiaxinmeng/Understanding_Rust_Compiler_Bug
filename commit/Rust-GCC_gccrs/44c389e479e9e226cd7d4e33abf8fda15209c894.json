{"sha": "44c389e479e9e226cd7d4e33abf8fda15209c894", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRjMzg5ZTQ3OWU5ZTIyNmNkN2Q0ZTMzYWJmOGZkYTE1MjA5Yzg5NA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-02-04T01:00:11Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-02-04T01:00:11Z"}, "message": "(find_cross_jump): Don't allow old-style and volatile asms\nto match.\n\nFrom-SVN: r13603", "tree": {"sha": "c90a3bd0b9e7fd1c73451e1075175d8c6e74c7bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c90a3bd0b9e7fd1c73451e1075175d8c6e74c7bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44c389e479e9e226cd7d4e33abf8fda15209c894", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44c389e479e9e226cd7d4e33abf8fda15209c894", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44c389e479e9e226cd7d4e33abf8fda15209c894", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44c389e479e9e226cd7d4e33abf8fda15209c894/comments", "author": null, "committer": null, "parents": [{"sha": "b91b26c962cc51f3f1058aceb4de20b31f100c8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b91b26c962cc51f3f1058aceb4de20b31f100c8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b91b26c962cc51f3f1058aceb4de20b31f100c8c"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "e1382b38e87755920d8b477f99c70e5ce7c61aad", "filename": "gcc/jump.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c389e479e9e226cd7d4e33abf8fda15209c894/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c389e479e9e226cd7d4e33abf8fda15209c894/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=44c389e479e9e226cd7d4e33abf8fda15209c894", "patch": "@@ -2605,7 +2605,19 @@ find_cross_jump (e1, e2, minimum, f1, f2)\n \t}\n #endif\n \n-      if (lose  || GET_CODE (p1) != GET_CODE (p2)\n+      /* Don't allow old-style asm or volatile extended asms to be accepted\n+\t for cross jumping purposes.  It is conceptually correct to allow\n+\t them, since cross-jumping preserves the dynamic instruction order\n+\t even though it is changing the static instruction order.  However,\n+\t if an asm is being used to emit an assembler pseudo-op, such as\n+\t the MIPS `.set reorder' pseudo-op, then the static instruction order\n+\t matters and it must be preserved.  */\n+      if (GET_CODE (p1) == ASM_INPUT || GET_CODE (p2) == ASM_INPUT\n+\t  || (GET_CODE (p1) == ASM_OPERANDS && MEM_VOLATILE_P (p1))\n+\t  || (GET_CODE (p2) == ASM_OPERANDS && MEM_VOLATILE_P (p2)))\n+\tlose = 1;\n+\n+      if (lose || GET_CODE (p1) != GET_CODE (p2)\n \t  || ! rtx_renumbered_equal_p (p1, p2))\n \t{\n \t  /* The following code helps take care of G++ cleanups.  */"}]}