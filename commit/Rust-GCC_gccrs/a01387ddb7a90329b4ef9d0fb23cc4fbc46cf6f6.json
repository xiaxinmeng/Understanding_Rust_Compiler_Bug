{"sha": "a01387ddb7a90329b4ef9d0fb23cc4fbc46cf6f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAxMzg3ZGRiN2E5MDMyOWI0ZWY5ZDBmYjIzY2M0ZmJjNDZjZjZmNg==", "commit": {"author": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-11-27T09:36:25Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-11-27T09:36:25Z"}, "message": "[multiple changes]\n\n2003-11-27  Guilhem Lavaux <guilhem@kaffe.org>\n\n\t* java/text/NumberFormat.java:\n\t(getIntegerInstance) Added the java version in the comments.\n\n2003-11-27  Mark Wielaard  <mark@klomp.org>\n\n\t* java/text/NumberFormat.java: Import java.io.InvalidObjectException.\n\t(readResolve): Reformat.\n\n2003-11-27  Guilhem Lavaux <guilhem@kaffe.org>\n\n\t* java/text/NumberFormat.java\n\t(NumberFormat.Field): New implemented class to match Java 1.4.\n\t(getIntegerInstance): Two new Java 1.4 methods.o\n\nFrom-SVN: r73985", "tree": {"sha": "0d443242cb8fe868619d5022b75db12890772b3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d443242cb8fe868619d5022b75db12890772b3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a01387ddb7a90329b4ef9d0fb23cc4fbc46cf6f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01387ddb7a90329b4ef9d0fb23cc4fbc46cf6f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a01387ddb7a90329b4ef9d0fb23cc4fbc46cf6f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01387ddb7a90329b4ef9d0fb23cc4fbc46cf6f6/comments", "author": null, "committer": null, "parents": [{"sha": "33ebe68e6423c64ec40a6f82009a6000eb078d74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33ebe68e6423c64ec40a6f82009a6000eb078d74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33ebe68e6423c64ec40a6f82009a6000eb078d74"}], "stats": {"total": 175, "additions": 174, "deletions": 1}, "files": [{"sha": "c3a798b47afd78bf11780eed072472078887aae2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01387ddb7a90329b4ef9d0fb23cc4fbc46cf6f6/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01387ddb7a90329b4ef9d0fb23cc4fbc46cf6f6/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a01387ddb7a90329b4ef9d0fb23cc4fbc46cf6f6", "patch": "@@ -1,3 +1,19 @@\n+2003-11-27  Guilhem Lavaux <guilhem@kaffe.org>\n+\n+\t* java/text/NumberFormat.java:\n+\t(getIntegerInstance) Added the java version in the comments.\n+\n+2003-11-27  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/text/NumberFormat.java: Import java.io.InvalidObjectException.\n+\t(readResolve): Reformat.\n+\n+2003-11-27  Guilhem Lavaux <guilhem@kaffe.org>\n+\n+\t* java/text/NumberFormat.java\n+\t(NumberFormat.Field): New implemented class to match Java 1.4. \n+\t(getIntegerInstance): Two new Java 1.4 methods.o\n+\n 2003-11-27  Ito Kazumitsu  <kaz@maczuka.gcd.org>\n \n \t* java/util/GregorianCalendar.java (getLinearTime): Avoid counting"}, {"sha": "aa5ed9fd88e154fcc5a508ad0e6c2a9231365d2a", "filename": "libjava/java/text/NumberFormat.java", "status": "modified", "additions": 158, "deletions": 1, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01387ddb7a90329b4ef9d0fb23cc4fbc46cf6f6/libjava%2Fjava%2Ftext%2FNumberFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01387ddb7a90329b4ef9d0fb23cc4fbc46cf6f6/libjava%2Fjava%2Ftext%2FNumberFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FNumberFormat.java?ref=a01387ddb7a90329b4ef9d0fb23cc4fbc46cf6f6", "patch": "@@ -1,5 +1,5 @@\n /* NumberFormat.java -- Formats and parses numbers\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -44,6 +44,7 @@\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.io.IOException;\n+import java.io.InvalidObjectException;\n \n /**\n  * This is the abstract superclass of all classes which format and \n@@ -79,6 +80,132 @@ public abstract class NumberFormat extends Format implements Cloneable\n    */\n   public static final int FRACTION_FIELD = 1;\n \n+  public static class Field extends Format.Field\n+  {\n+    static final long serialVersionUID = 7494728892700160890L;\n+\n+    /**\n+     * Attribute set to all characters containing digits of the integer\n+     * part.\n+     */\n+    public static final NumberFormat.Field INTEGER\n+      = new Field(\"integer\");\n+\n+    /**\n+     * Attribute set to all characters containing digits of the fractional\n+     * part.\n+     */\n+    public static final NumberFormat.Field FRACTION\n+      = new Field(\"fraction\");\n+\n+    /**\n+     * Attribute set to all characters containing digits of the exponential\n+     * part.\n+     */\n+    public static final NumberFormat.Field EXPONENT\n+      = new Field(\"exponent\");\n+\n+    /**\n+     * Attribute set to all characters containing a decimal separator.\n+     */\n+    public static final NumberFormat.Field DECIMAL_SEPARATOR\n+      = new Field(\"decimal separator\");\n+\n+    /**\n+     * Attribute set to all characters containing a sign (plus or minus).\n+     */\n+    public static final NumberFormat.Field SIGN\n+      = new Field(\"sign\");\n+\n+    /**\n+     * Attribute set to all characters containing a grouping separator (e.g.\n+     * a comma, a white space,...).\n+     */\n+    public static final NumberFormat.Field GROUPING_SEPARATOR\n+      = new Field(\"grouping separator\");\n+\n+    /**\n+     * Attribute set to all characters containing an exponential symbol (e.g.\n+     * 'E')\n+     */\n+    public static final NumberFormat.Field EXPONENT_SYMBOL\n+      = new Field(\"exponent symbol\");\n+\n+    /**\n+     * Attribute set to all characters containing a percent symbol (e.g. '%')\n+     */\n+    public static final NumberFormat.Field PERCENT\n+      = new Field(\"percent\");\n+\n+    /**\n+     * Attribute set to all characters containing a permille symbol.\n+     */\n+    public static final NumberFormat.Field PERMILLE\n+      = new Field(\"permille\");\n+\n+    /**\n+     * Attribute set to all characters containing the currency unit.\n+     */\n+    public static final NumberFormat.Field CURRENCY\n+      = new Field(\"currency\");\n+\n+    /**\n+     * Attribute set to all characters containing the exponent sign.\n+     */\n+    public static final NumberFormat.Field EXPONENT_SIGN\n+      = new Field(\"exponent sign\");\n+\n+    /**\n+     * Private fields to register all fields contained in this descriptor.\n+     */\n+    private static final NumberFormat.Field[] allFields =\n+    {\n+      INTEGER, FRACTION, EXPONENT, DECIMAL_SEPARATOR, SIGN,\n+      GROUPING_SEPARATOR, EXPONENT_SYMBOL, PERCENT,\n+      PERMILLE, CURRENCY, EXPONENT_SIGN\n+    };\n+\n+    /**\n+     * This constructor is only used by the deserializer. Without it,\n+     * it would fail to construct a valid object.\n+     */\n+    private Field()\n+    {\n+      super(\"\");\n+    }\n+\n+    /**\n+     * Create a Field instance with the specified field name.\n+     *\n+     * @param field_name Field name for the new Field instance.\n+     */\n+    protected Field(String field_name)\n+    {\n+      super (field_name);\n+    }\n+\n+    /**\n+     * This function is used by the deserializer to know which object\n+     * to use when it encounters an encoded NumberFormat.Field in a \n+     * serialization stream. If the stream is valid it should return\n+     * one of the above field. In the other case we throw an exception.\n+     *\n+     * @return a valid official NumberFormat.Field instance.\n+     *\n+     * @throws InvalidObjectException if the field name is invalid.\n+     */\n+    protected Object readResolve() throws InvalidObjectException\n+    {\n+      String s = getName();\n+      for (int i = 0; i < allFields.length; i++)\n+\tif (s.equals(allFields[i].getName()))\n+\t  return allFields[i];\n+\n+      throw new InvalidObjectException(\"no such NumberFormat field called \"\n+\t\t\t\t       + s);\n+    }\n+  }\n+\n   /**\n    * This method is a specialization of the format method that performs\n    * a simple formatting of the specified <code>long</code> number.\n@@ -325,6 +452,36 @@ public static NumberFormat getNumberInstance (Locale loc)\n     return computeInstance (loc, \"numberFormat\", \"#,##0.###\");\n   }\n \n+  /**\n+   * This method returns an integer formatting and parsing class for the\n+   * default locale. This will be a concrete subclass of <code>NumberFormat</code>,\n+   * but the actual class returned is dependent on the locale.\n+   *\n+   * @return An instance of an integer number formatter for the default locale.\n+   * @since 1.4 \n+   */\n+  public static final NumberFormat getIntegerInstance()\n+  {\n+    return getIntegerInstance (Locale.getDefault());\n+  }\n+\n+  /**\n+   * This method returns an integer formatting and parsing class for the\n+   * default locale. This will be a concrete subclass of <code>NumberFormat</code>,\n+   * but the actual class returned is dependent on the locale.\n+   *\n+   * @param locale the desired locale.\n+   *\n+   * @return An instance of an integer number formatter for the desired locale.\n+   * @since 1.4 \n+   */\n+  public static NumberFormat getIntegerInstance(Locale locale)\n+  {\n+    NumberFormat format = computeInstance (locale, \"numberFormat\", \"#,##0\");\n+    format.setParseIntegerOnly (true);\n+    return format;\n+  }\n+\n   /**\n    * This method returns an instance of <code>NumberFormat</code> suitable\n    * for formatting and parsing percentage values in the default locale."}]}