{"sha": "0b2c1781db8df9051ce3d160af2113387742fef2", "node_id": "C_kwDOANBUbNoAKDBiMmMxNzgxZGI4ZGY5MDUxY2UzZDE2MGFmMjExMzM4Nzc0MmZlZjI", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-06-24T02:20:46Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-06-24T02:25:52Z"}, "message": "libstdc++: testsuite: tolerate non-cancelling sleep\n\nThough sleep, nanosleep and clock_nanosleep are all POSIX cancellation\npoints, not all target systems follow this POSIX requirement.\n30_threads/thread/native_handle/cancel.cc will run until it times out\non such systems.\n\nRather than failing a C++ library test because of a limitation of the\ntarget system, this patch gives the test a chance to successfully\nexercise the features it intends to exercise, by introducing a\ncancellation point in a loop that would otherwise run indefinitely on\nsystems exhibiting this limitation.\n\n\nfor  libstdc++-v3/ChangeLog\n\n\t* testsuite/30_threads/thread/native_handle/cancel.cc: Add an\n\texplicit cancellation point in case sleep_for lacks one.", "tree": {"sha": "192ee0ee446b78303d044dc55168adb3b331ffb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/192ee0ee446b78303d044dc55168adb3b331ffb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b2c1781db8df9051ce3d160af2113387742fef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b2c1781db8df9051ce3d160af2113387742fef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b2c1781db8df9051ce3d160af2113387742fef2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b2c1781db8df9051ce3d160af2113387742fef2/comments", "author": null, "committer": null, "parents": [{"sha": "a5bba80e32fd96b2ae90ad1072d84dfe64cf78a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5bba80e32fd96b2ae90ad1072d84dfe64cf78a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5bba80e32fd96b2ae90ad1072d84dfe64cf78a4"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "3cef97e8c53de96ccd34d050cde8cb0c6ea68f52", "filename": "libstdc++-v3/testsuite/30_threads/thread/native_handle/cancel.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b2c1781db8df9051ce3d160af2113387742fef2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fnative_handle%2Fcancel.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b2c1781db8df9051ce3d160af2113387742fef2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fnative_handle%2Fcancel.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fnative_handle%2Fcancel.cc?ref=0b2c1781db8df9051ce3d160af2113387742fef2", "patch": "@@ -30,7 +30,11 @@ void f(std::atomic<bool>& started)\n {\n   started = true;\n   while (true)\n-    std::this_thread::sleep_for(std::chrono::milliseconds(100));\n+    {\n+      std::this_thread::sleep_for(std::chrono::milliseconds(100));\n+      // In case the target system doesn't make sleep a cancellation point...\n+      pthread_testcancel();\n+    }\n }\n \n int main()"}]}