{"sha": "cb64c638f0d61048f9a1d7a257e063f03cfce40b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I2NGM2MzhmMGQ2MTA0OGY5YTFkN2EyNTdlMDYzZjAzY2ZjZTQwYg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-06-24T20:22:48Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-06-24T20:22:48Z"}, "message": "URL.java: Renamed \"handler\" to \"ph\" in the whole file to match classpaths version.\n\n2003-06-24  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/URL.java:\n\tRenamed \"handler\" to \"ph\" in the whole file to match classpaths\n\tversion.\n\t* java/net/URLStreamHandler.java:\n\t(equals): Renamed \"handler\" to \"ph\".\n\nFrom-SVN: r68439", "tree": {"sha": "060049fd3f92b79b7798fd5651f2784b8c5c60a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/060049fd3f92b79b7798fd5651f2784b8c5c60a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb64c638f0d61048f9a1d7a257e063f03cfce40b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb64c638f0d61048f9a1d7a257e063f03cfce40b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb64c638f0d61048f9a1d7a257e063f03cfce40b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb64c638f0d61048f9a1d7a257e063f03cfce40b/comments", "author": null, "committer": null, "parents": [{"sha": "bbe53f03c8de1126e442866620409007c7df88fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbe53f03c8de1126e442866620409007c7df88fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbe53f03c8de1126e442866620409007c7df88fe"}], "stats": {"total": 92, "additions": 50, "deletions": 42}, "files": [{"sha": "6bacfb5e422b3db08ce92c8817eaaff2752126bf", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb64c638f0d61048f9a1d7a257e063f03cfce40b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb64c638f0d61048f9a1d7a257e063f03cfce40b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=cb64c638f0d61048f9a1d7a257e063f03cfce40b", "patch": "@@ -1,3 +1,11 @@\n+2003-06-24  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/URL.java:\n+\tRenamed \"handler\" to \"ph\" in the whole file to match classpaths\n+\tversion.\n+\t* java/net/URLStreamHandler.java:\n+\t(equals): Renamed \"handler\" to \"ph\".\n+\n 2003-06-24  Michael Koch  <konqueror@gmx.de>\n \n \t* javax/swing/event/AncestorEvent.java,"}, {"sha": "12c86914e3088dcf5865c0dce0143548598b8616", "filename": "libjava/java/net/URL.java", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb64c638f0d61048f9a1d7a257e063f03cfce40b/libjava%2Fjava%2Fnet%2FURL.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb64c638f0d61048f9a1d7a257e063f03cfce40b/libjava%2Fjava%2Fnet%2FURL.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURL.java?ref=cb64c638f0d61048f9a1d7a257e063f03cfce40b", "patch": "@@ -147,7 +147,7 @@ public final class URL implements Serializable\n   /**\n    * The protocol handler in use for this URL\n    */\n-  transient URLStreamHandler handler;\n+  transient URLStreamHandler ph;\n \n   /**\n    * This a table where we cache protocol handlers to avoid the overhead\n@@ -223,24 +223,25 @@ public URL(String protocol, String host, String file)\n    * @since 1.2\n    */\n   public URL(String protocol, String host, int port, String file,\n-    URLStreamHandler handler) throws MalformedURLException\n+\t     URLStreamHandler ph)\n+    throws MalformedURLException\n   {\n     if (protocol == null)\n       throw new MalformedURLException(\"null protocol\");\n     this.protocol = protocol.toLowerCase();\n \n-    if (handler != null)\n+    if (ph != null)\n       {\n \tSecurityManager s = System.getSecurityManager();\n \tif (s != null)\n \t  s.checkPermission (new NetPermission (\"specifyStreamHandler\"));\n \n-        this.handler = handler;\n+        this.ph = ph;\n       }\n     else\n-      this.handler = getURLStreamHandler(protocol);\n+      this.ph = getURLStreamHandler(protocol);\n \n-    if (this.handler == null)\n+    if (this.ph == null)\n       throw new MalformedURLException (\n \t\t      \"Protocol handler not found: \" + protocol);\n \n@@ -328,7 +329,7 @@ public URL(URL context, String spec) throws MalformedURLException\n    *\n    * @since 1.2\n    */\n-  public URL(URL context, String spec, URLStreamHandler handler)\n+  public URL(URL context, String spec, URLStreamHandler ph)\n     throws MalformedURLException\n   {\n     /* A protocol is defined by the doc as the substring before a ':'\n@@ -381,27 +382,27 @@ else if (context != null)\n       throw new\n \t  MalformedURLException(\"Absolute URL required with null context\");\n \n-    if (handler != null)\n+    if (ph != null)\n       {\n \tSecurityManager s = System.getSecurityManager ();\n \tif (s != null)\n \t  s.checkPermission (new NetPermission (\"specifyStreamHandler\"));\n \n-        this.handler = handler;\n+        this.ph = ph;\n       }\n     else\n-      this.handler = getURLStreamHandler(protocol);\n+      this.ph = getURLStreamHandler(protocol);\n \n-    if (this.handler == null)\n+    if (this.ph == null)\n       throw new MalformedURLException(\"Protocol handler not found: \"\n \t\t\t\t      + protocol);\n \n     // JDK 1.2 doc for parseURL specifically states that any '#' ref\n     // is to be excluded by passing the 'limit' as the indexOf the '#'\n     // if one exists, otherwise pass the end of the string.\n     int hashAt = spec.indexOf('#', colon + 1);\n-    this.handler.parseURL(this, spec, colon + 1,\n-\t\t\t  hashAt < 0 ? spec.length() : hashAt);\n+    this.ph.parseURL(this, spec, colon + 1,\n+\t\t     hashAt < 0 ? spec.length() : hashAt);\n     if (hashAt >= 0)\n       ref = spec.substring(hashAt + 1);\n \n@@ -423,7 +424,7 @@ public boolean equals (Object obj)\n     if (obj == null || ! (obj instanceof URL))\n       return false;\n \n-    return handler.equals (this, (URL) obj);\n+    return ph.equals (this, (URL) obj);\n   }\n \n   /**\n@@ -512,7 +513,7 @@ public int getPort()\n    */\n   public int getDefaultPort()\n   {\n-    return handler.getDefaultPort();\n+    return ph.getDefaultPort();\n   }\n \n   /**\n@@ -566,7 +567,7 @@ public int hashCode()\n     if (hashCode != 0)\n       return hashCode;\t\t// Use cached value if available.\n     else\n-      return handler.hashCode (this);\n+      return ph.hashCode (this);\n   }\n \n   /**\n@@ -579,7 +580,7 @@ public int hashCode()\n    */\n   public URLConnection openConnection() throws IOException\n   {\n-    return handler.openConnection(this);\n+    return ph.openConnection(this);\n   }\n \n   /**\n@@ -605,7 +606,7 @@ public final InputStream openStream() throws IOException\n    */\n   public boolean sameFile(URL other)\n   {\n-    return handler.sameFile(this, other);\n+    return ph.sameFile(this, other);\n   }\n \n   /**\n@@ -627,7 +628,7 @@ protected void set(String protocol, String host, int port, String file,\n     // invalid protocol.  It will cause the handler to be set to null\n     // thus overriding a valid handler.  Callers of this method should\n     // be aware of this.\n-    this.handler = getURLStreamHandler(protocol);\n+    this.ph = getURLStreamHandler(protocol);\n     this.protocol = protocol.toLowerCase();\n     this.authority = null;\n     this.port = port;\n@@ -652,7 +653,7 @@ protected void set(String protocol, String host, int port,\n     // invalid protocol.  It will cause the handler to be set to null\n     // thus overriding a valid handler.  Callers of this method should\n     // be aware of this.\n-    this.handler = getURLStreamHandler(protocol);\n+    this.ph = getURLStreamHandler(protocol);\n     this.protocol = protocol.toLowerCase();\n     if (userInfo == null)\n       this.host = host;\n@@ -701,7 +702,7 @@ protected void set(String protocol, String host, int port,\n   public String toExternalForm()\n   {\n     // Identical to toString().\n-    return handler.toExternalForm(this);\n+    return ph.toExternalForm(this);\n   }\n \n   /**\n@@ -714,24 +715,24 @@ public String toExternalForm()\n   public String toString()\n   {\n     // Identical to toExternalForm().\n-    return handler.toExternalForm(this);\n+    return ph.toExternalForm(this);\n   }\n \n   private static synchronized URLStreamHandler\n     getURLStreamHandler (String protocol)\n   {\n-    URLStreamHandler handler;\n+    URLStreamHandler ph;\n \n     // See if a handler has been cached for this protocol.\n-    if ((handler = (URLStreamHandler) handlers.get(protocol)) != null)\n-      return handler;\n+    if ((ph = (URLStreamHandler) handlers.get(protocol)) != null)\n+      return ph;\n \n     // If a non-default factory has been set, use it to find the protocol.\n     if (factory != null)\n-      handler = factory.createURLStreamHandler(protocol);\n+      ph = factory.createURLStreamHandler(protocol);\n     else if (protocol.equals (\"core\"))\n       {\n- \thandler = new gnu.gcj.protocol.core.Handler ();\n+ \tph = new gnu.gcj.protocol.core.Handler ();\n       }\n     else if (protocol.equals (\"file\"))\n       {\n@@ -745,12 +746,12 @@ else if (protocol.equals (\"file\"))\n \t// fix this problem.  If other protocols are required in a\n \t// statically linked application they will need to be handled in\n \t// the same way as \"file\".\n-\thandler = new gnu.gcj.protocol.file.Handler ();\n+\tph = new gnu.gcj.protocol.file.Handler ();\n       }\n \n     // Non-default factory may have returned null or a factory wasn't set.\n     // Use the default search algorithm to find a handler for this protocol.\n-    if (handler == null)\n+    if (ph == null)\n       {\n \t// Get the list of packages to check and append our default handler\n \t// to it, along with the JDK specified default as a last resort.\n@@ -767,34 +768,33 @@ else if (protocol.equals (\"file\"))\n \t\t\t\t\".Handler\";\n \t    try\n \t      {\n-\t\thandler =\n-\t\t  (URLStreamHandler) Class.forName(facName).newInstance();\n+\t\tph = (URLStreamHandler) Class.forName(facName).newInstance();\n \t      }\n \t    catch (Exception e)\n \t      {\n \t\t// Can't instantiate; handler still null, go on to next element.\n \t      }\n-\t  } while ((handler == null ||\n-\t\t    ! (handler instanceof URLStreamHandler)) &&\n+\t  } while ((ph == null ||\n+\t\t    ! (ph instanceof URLStreamHandler)) &&\n \t\t   pkgPrefix.hasMoreTokens());\n       }\n \n     // Update the hashtable with the new protocol handler.\n-    if (handler != null)\n-      if (handler instanceof URLStreamHandler)\n-\thandlers.put(protocol, handler);\n+    if (ph != null)\n+      if (ph instanceof URLStreamHandler)\n+\thandlers.put(protocol, ph);\n       else\n-\thandler = null;\n+\tph = null;\n \n-    return handler;\n+    return ph;\n   }\n \n   private void readObject(ObjectInputStream ois)\n     throws IOException, ClassNotFoundException\n   {\n     ois.defaultReadObject();\n-    this.handler = getURLStreamHandler(protocol);\n-    if (this.handler == null)\n+    this.ph = getURLStreamHandler(protocol);\n+    if (this.ph == null)\n       throw new IOException(\"Handler for protocol \" + protocol + \" not found\");\n   }\n "}, {"sha": "93a8ab278148cd71e13ddd10f4b7ba9de123501c", "filename": "libjava/java/net/URLStreamHandler.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb64c638f0d61048f9a1d7a257e063f03cfce40b/libjava%2Fjava%2Fnet%2FURLStreamHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb64c638f0d61048f9a1d7a257e063f03cfce40b/libjava%2Fjava%2Fnet%2FURLStreamHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLStreamHandler.java?ref=cb64c638f0d61048f9a1d7a257e063f03cfce40b", "patch": "@@ -269,10 +269,10 @@ protected boolean sameFile(URL url1, URL url2)\n       return false;\n     int p1 = url1.getPort ();\n     if (p1 == -1)\n-      p1 = url1.handler.getDefaultPort ();\n+      p1 = url1.ph.getDefaultPort ();\n     int p2 = url2.getPort ();\n     if (p2 == -1)\n-      p2 = url2.handler.getDefaultPort ();\n+      p2 = url2.ph.getDefaultPort ();\n     if (p1 != p2)\n       return false;\n     String s1, s2;"}]}