{"sha": "6bc088ca0e315896c3efe1ed273f6a345e5418b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJjMDg4Y2EwZTMxNTg5NmMzZWZlMWVkMjczZjZhMzQ1ZTU0MThiOA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-09-04T20:42:06Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-09-04T20:42:06Z"}, "message": "DWARF: Allow hard frame pointer even if frame pointer isn't used\n\nr251028\n\ncommit cd557ff63f388ad27c376d0a225e74d3594a6f9d\nAuthor: hjl <hjl@138bc75d-0d04-0410-961f-82ee72b054a4>\nDate:   Thu Aug 10 15:29:05 2017 +0000\n\n    i386: Don't use frame pointer without stack access\n\n    When there is no stack access, there is no need to use frame pointer\n    even if -fno-omit-frame-pointer is used and caller's frame pointer is\n    unchanged.\n\nframe pointer may not be available even if -fno-omit-frame-pointer is\nused.  When this happened, arg pointer may be eliminated by hard frame\npointer.  Since hard frame pointer is encoded with DW_OP_fbreg which\nuses the DW_AT_frame_base attribute, not hard frame pointer directly,\nwe should allow hard frame pointer when generating DWARF info even if\nframe pointer isn't used.\n\ngcc/\n\n\tPR debug/86593\n\t* dwarf2out.c (based_loc_descr): Allow hard frame pointer even\n\tif frame pointer isn't used.\n\t(compute_frame_pointer_to_fb_displacement): Likewise.\n\ngcc/testsuite/\n\n\tPR debug/86593\n\t* g++.dg/pr86593.C: New test.\n\nFrom-SVN: r264096", "tree": {"sha": "3d3d5fc25fe9c14be6b2a015025f3846801904d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d3d5fc25fe9c14be6b2a015025f3846801904d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bc088ca0e315896c3efe1ed273f6a345e5418b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc088ca0e315896c3efe1ed273f6a345e5418b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bc088ca0e315896c3efe1ed273f6a345e5418b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc088ca0e315896c3efe1ed273f6a345e5418b8/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f93810d3b7cc7540e31397697f5df9db18daba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f93810d3b7cc7540e31397697f5df9db18daba4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f93810d3b7cc7540e31397697f5df9db18daba4"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "4b19487000ac914d606883871d6d7190347cd541", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc088ca0e315896c3efe1ed273f6a345e5418b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc088ca0e315896c3efe1ed273f6a345e5418b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6bc088ca0e315896c3efe1ed273f6a345e5418b8", "patch": "@@ -1,3 +1,10 @@\n+2018-09-04  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR debug/86593\n+\t* dwarf2out.c (based_loc_descr): Allow hard frame pointer even\n+\tif frame pointer isn't used.\n+\t(compute_frame_pointer_to_fb_displacement): Likewise.\n+\n 2018-09-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/87198"}, {"sha": "40cfdf5633752ee764b1ac5882ffc61af39398c9", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc088ca0e315896c3efe1ed273f6a345e5418b8/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc088ca0e315896c3efe1ed273f6a345e5418b8/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=6bc088ca0e315896c3efe1ed273f6a345e5418b8", "patch": "@@ -14325,13 +14325,13 @@ based_loc_descr (rtx reg, poly_int64 offset,\n \n       if (elim != reg)\n \t{\n+\t  /* Allow hard frame pointer here even if frame pointer\n+\t    isn't used since hard frame pointer is encoded with\n+\t    DW_OP_fbreg which uses the DW_AT_frame_base attribute,\n+\t    not hard frame pointer directly.  */\n \t  elim = strip_offset_and_add (elim, &offset);\n-\t  gcc_assert ((SUPPORTS_STACK_ALIGNMENT\n-\t\t       && (elim == hard_frame_pointer_rtx\n-\t\t\t   || elim == stack_pointer_rtx))\n-\t              || elim == (frame_pointer_needed\n-\t\t\t\t  ? hard_frame_pointer_rtx\n-\t\t\t\t  : stack_pointer_rtx));\n+\t  gcc_assert (elim == hard_frame_pointer_rtx\n+\t\t      || elim == stack_pointer_rtx);\n \n \t  /* If drap register is used to align stack, use frame\n \t     pointer + offset to access stack variables.  If stack\n@@ -20512,14 +20512,13 @@ compute_frame_pointer_to_fb_displacement (poly_int64 offset)\n      in which to eliminate.  This is because it's stack pointer isn't \n      directly accessible as a register within the ISA.  To work around\n      this, assume that while we cannot provide a proper value for\n-     frame_pointer_fb_offset, we won't need one either.  */\n+     frame_pointer_fb_offset, we won't need one either.  We can use\n+     hard frame pointer in debug info even if frame pointer isn't used\n+     since hard frame pointer in debug info is encoded with DW_OP_fbreg\n+     which uses the DW_AT_frame_base attribute, not hard frame pointer\n+     directly.  */\n   frame_pointer_fb_offset_valid\n-    = ((SUPPORTS_STACK_ALIGNMENT\n-\t&& (elim == hard_frame_pointer_rtx\n-\t    || elim == stack_pointer_rtx))\n-       || elim == (frame_pointer_needed\n-\t\t   ? hard_frame_pointer_rtx\n-\t\t   : stack_pointer_rtx));\n+    = (elim == hard_frame_pointer_rtx || elim == stack_pointer_rtx);\n }\n \n /* Generate a DW_AT_name attribute given some string value to be included as"}, {"sha": "8b3578f38f20ca9c1a9148a39285dd45044fcde2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc088ca0e315896c3efe1ed273f6a345e5418b8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc088ca0e315896c3efe1ed273f6a345e5418b8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6bc088ca0e315896c3efe1ed273f6a345e5418b8", "patch": "@@ -1,3 +1,8 @@\n+2018-09-04  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR debug/86593\n+\t* g++.dg/pr86593.C: New test.\n+\n 2018-09-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/87198"}, {"sha": "feed8c3743eb37b1eb05e547d69296ad67df0fff", "filename": "gcc/testsuite/g++.dg/pr86593.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc088ca0e315896c3efe1ed273f6a345e5418b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr86593.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc088ca0e315896c3efe1ed273f6a345e5418b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr86593.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr86593.C?ref=6bc088ca0e315896c3efe1ed273f6a345e5418b8", "patch": "@@ -0,0 +1,11 @@\n+// { dg-options \"-O -g -fno-omit-frame-pointer\" }\n+\n+struct Foo\n+{\n+  int bar(int a, int b, int c, int i1, int i2, int i3, int d);\n+};\n+\n+int Foo::bar(int a, int b, int c, int i1, int i2, int i3, int d)\n+{\n+  return 0;\n+}"}]}