{"sha": "e455bc273ebd4e45e4383b9031f8c4d48a4728a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ1NWJjMjczZWJkNGU0NWU0MzgzYjkwMzFmOGM0ZDQ4YTQ3MjhhOA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-06-27T21:21:08Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-06-27T21:21:08Z"}, "message": "re PR c++/10796 (ICE (segfault) when defining an enum with two values: -1 and MAX_INT_64BIT)\n\n\tPR c++/10796\n\t* decl.c (finish_enum): Implement DR377.\n\n\t* decl.c (cp_finish_decl): Don't make variables with reference\n\ttype readonly while they are being initialized.\n\n\tPR c++/10796\n\t* g++.dg/init/enum1.C: New test.\n\nFrom-SVN: r68610", "tree": {"sha": "b9408cbb00f6506219f8eaca4f93ac88b1312eec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9408cbb00f6506219f8eaca4f93ac88b1312eec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e455bc273ebd4e45e4383b9031f8c4d48a4728a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e455bc273ebd4e45e4383b9031f8c4d48a4728a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e455bc273ebd4e45e4383b9031f8c4d48a4728a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e455bc273ebd4e45e4383b9031f8c4d48a4728a8/comments", "author": null, "committer": null, "parents": [{"sha": "dc65c307c80fc0817b0452685f3e4b804f1d521e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc65c307c80fc0817b0452685f3e4b804f1d521e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc65c307c80fc0817b0452685f3e4b804f1d521e"}], "stats": {"total": 62, "additions": 49, "deletions": 13}, "files": [{"sha": "3e1fa5d4ab09c9baf517903836d688324b6f7c35", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e455bc273ebd4e45e4383b9031f8c4d48a4728a8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e455bc273ebd4e45e4383b9031f8c4d48a4728a8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e455bc273ebd4e45e4383b9031f8c4d48a4728a8", "patch": "@@ -1,3 +1,11 @@\n+2003-06-27  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/10796\n+\t* decl.c (finish_enum): Implement DR377.\n+\n+\t* decl.c (cp_finish_decl): Don't make variables with reference\n+\ttype readonly while they are being initialized.\n+\n 2003-06-26  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/11332"}, {"sha": "66257c0d6c4ab9c1be31f049684132fa2313deb0", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e455bc273ebd4e45e4383b9031f8c4d48a4728a8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e455bc273ebd4e45e4383b9031f8c4d48a4728a8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e455bc273ebd4e45e4383b9031f8c4d48a4728a8", "patch": "@@ -8101,7 +8101,8 @@ cp_finish_decl (tree decl, tree init, tree asmspec_tree, int flags)\n     ttype = target_type (type);\n \n   if (! DECL_EXTERNAL (decl) && TREE_READONLY (decl)\n-      && TYPE_NEEDS_CONSTRUCTING (type))\n+      && (TYPE_NEEDS_CONSTRUCTING (type) \n+\t  || TREE_CODE (type) == REFERENCE_TYPE))\n     {\n       /* Currently, GNU C++ puts constants in text space, making them\n \t impossible to initialize.  In the future, one would hope for\n@@ -13106,24 +13107,36 @@ finish_enum (tree enumtype)\n   highprec = min_precision (maxnode, unsignedp);\n   precision = MAX (lowprec, highprec);\n \n-  /* Set TYPE_MIN_VALUE and TYPE_MAX_VALUE according to `precision'.  */\n-  TYPE_SIZE (enumtype) = NULL_TREE;\n+  /* DR 377\n+       \n+     IF no integral type can represent all the enumerator values, the\n+     enumeration is ill-formed.  */\n+  if (precision > TYPE_PRECISION (long_long_integer_type_node))\n+    {\n+      error (\"no integral type can represent all of the enumerator values \"\n+\t     \"for `%T'\", enumtype);\n+      precision = TYPE_PRECISION (long_long_integer_type_node);\n+    }\n+\n+  /* Compute the minium and maximum values for the type, the size of\n+     the type, and so forth.  */\n   TYPE_PRECISION (enumtype) = precision;\n+  TYPE_SIZE (enumtype) = NULL_TREE;\n   if (unsignedp)\n     fixup_unsigned_type (enumtype);\n   else\n     fixup_signed_type (enumtype);\n \n-  if (flag_short_enums || (precision > TYPE_PRECISION (integer_type_node)))\n-    /* Use the width of the narrowest normal C type which is wide\n-       enough.  */\n-    TYPE_PRECISION (enumtype) = TYPE_PRECISION (c_common_type_for_size\n-\t\t\t\t\t\t(precision, 1));\n-  else\n-    TYPE_PRECISION (enumtype) = TYPE_PRECISION (integer_type_node);\n-\n-  TYPE_SIZE (enumtype) = NULL_TREE;\n-  layout_type (enumtype);\n+  /* We use \"int\" or \"unsigned int\" as the underlying type, unless all\n+     the values will not fit or the user has requested that we try to\n+     use shorter types where possible.  */\n+  if (precision < TYPE_PRECISION (integer_type_node)\n+      && !flag_short_enums)\n+    {\n+      TYPE_PRECISION (enumtype) = TYPE_PRECISION (integer_type_node);\n+      TYPE_SIZE (enumtype) = NULL_TREE;\n+      layout_type (enumtype);\n+    }\n \n   /* Fix up all variant types of this enum type.  */\n   for (t = TYPE_MAIN_VARIANT (enumtype); t; t = TYPE_NEXT_VARIANT (t))"}, {"sha": "b407402ed3f97e12f354ca2a3a94e72b010c4cbb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e455bc273ebd4e45e4383b9031f8c4d48a4728a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e455bc273ebd4e45e4383b9031f8c4d48a4728a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e455bc273ebd4e45e4383b9031f8c4d48a4728a8", "patch": "@@ -1,3 +1,8 @@\n+2003-06-27  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/10796\n+\t* g++.dg/init/enum1.C: New test.\n+\n 2003-06-27  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* gcc.dg/20030627-1.c: New test."}, {"sha": "f74a5ad2b55cd4e2c917ab9b91fc4b7a8b3b100d", "filename": "gcc/testsuite/g++.dg/init/enum1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e455bc273ebd4e45e4383b9031f8c4d48a4728a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fenum1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e455bc273ebd4e45e4383b9031f8c4d48a4728a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fenum1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fenum1.C?ref=e455bc273ebd4e45e4383b9031f8c4d48a4728a8", "patch": "@@ -0,0 +1,10 @@\n+enum test {\n+  acceptable = -1,\n+  unacceptable = 0xffffffffffffffffLL\n+}; // { dg-error \"\" }\n+\n+enum test t = acceptable, u = unacceptable;\n+\n+int main() {\n+    return 0;\n+}"}]}