{"sha": "135d47df2157e1f04f519f18e893b4fb68e3d341", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM1ZDQ3ZGYyMTU3ZTFmMDRmNTE5ZjE4ZTg5M2I0ZmI2OGUzZDM0MQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-07-13T11:47:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-07-13T11:47:58Z"}, "message": "re PR c++/44908 (SFINAE vs pointer to member via virtual base)\n\ncp/\n2010-07-13  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/44908\n\t* call.c (convert_like_real): Adjust convert_ptrmem call, pass\n\tcomplain argument.\n\t* typeck.c (get_delta_difference): Update prototype, add a\n\ttsubst_flags_t parameter; update get_delta_difference_1 calls and\n\tadd checks for error_mark_node.\n\t(get_delta_difference_1): Update prototype, add a tsubst_flags_t\n\tparameter; update lookup_base call.\n\t(build_ptrmemfunc): Update prototype, add a tsubst_flags_t\n\tparameter; update get_delta_difference call and add check for\n\terror_mark_node.\n\t(convert_ptrmem): Update prototype, add a tsubst_flags_t\n\tparameter; update get_delta_difference call and add check for\n\terror_mark_node;  update build_ptrmemfunc call.\n\t(build_static_cast_1): Adjust convert_ptrmem call.\n\t(expand_ptrmemfunc_cst): Adjust get_delta_difference call.\n\t(cp_build_unary_op): Adjust build_ptrmemfunc call.\n\t* cvt.c (cp_convert_to_pointer, convert_force): Adjust convert_ptrmem\n\tand build_ptrmemfunc calls.\n\t* cp-tree.h: Update build_ptrmemfunc and convert_ptrmem prototypes.\n\ntestsuite/\n2010-07-13  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/44908\n\t* g++.dg/template/sfinae21.C: New.\n\t* g++.dg/template/sfinae22.C: Likewise.\n\nFrom-SVN: r162138", "tree": {"sha": "f22cdbec5caa431704f8cc4c895d9644d5bf307c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f22cdbec5caa431704f8cc4c895d9644d5bf307c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/135d47df2157e1f04f519f18e893b4fb68e3d341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/135d47df2157e1f04f519f18e893b4fb68e3d341", "html_url": "https://github.com/Rust-GCC/gccrs/commit/135d47df2157e1f04f519f18e893b4fb68e3d341", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/135d47df2157e1f04f519f18e893b4fb68e3d341/comments", "author": null, "committer": null, "parents": [{"sha": "2eb0b984b67816b22c98b2287d7bd3cabf017b30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eb0b984b67816b22c98b2287d7bd3cabf017b30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eb0b984b67816b22c98b2287d7bd3cabf017b30"}], "stats": {"total": 211, "additions": 178, "deletions": 33}, "files": [{"sha": "4e2c0e48c39096e206a713b3d46f2c32cfaee875", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135d47df2157e1f04f519f18e893b4fb68e3d341/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135d47df2157e1f04f519f18e893b4fb68e3d341/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=135d47df2157e1f04f519f18e893b4fb68e3d341", "patch": "@@ -1,3 +1,26 @@\n+2010-07-13  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/44908\n+\t* call.c (convert_like_real): Adjust convert_ptrmem call, pass\n+\tcomplain argument.\n+\t* typeck.c (get_delta_difference): Update prototype, add a\n+\ttsubst_flags_t parameter; update get_delta_difference_1 calls and\n+\tadd checks for error_mark_node.\n+\t(get_delta_difference_1): Update prototype, add a tsubst_flags_t\n+\tparameter; update lookup_base call.\n+\t(build_ptrmemfunc): Update prototype, add a tsubst_flags_t\n+\tparameter; update get_delta_difference call and add check for\n+\terror_mark_node.\n+\t(convert_ptrmem): Update prototype, add a tsubst_flags_t\n+\tparameter; update get_delta_difference call and add check for\n+\terror_mark_node;  update build_ptrmemfunc call.\n+\t(build_static_cast_1): Adjust convert_ptrmem call.\n+\t(expand_ptrmemfunc_cst): Adjust get_delta_difference call.\n+\t(cp_build_unary_op): Adjust build_ptrmemfunc call.\n+\t* cvt.c (cp_convert_to_pointer, convert_force): Adjust convert_ptrmem\n+\tand build_ptrmemfunc calls.\n+\t* cp-tree.h: Update build_ptrmemfunc and convert_ptrmem prototypes.\n+\n 2010-07-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/44907"}, {"sha": "1c6414950bb5b71772d3b0c6d2caba1f56cfcc2a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135d47df2157e1f04f519f18e893b4fb68e3d341/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135d47df2157e1f04f519f18e893b4fb68e3d341/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=135d47df2157e1f04f519f18e893b4fb68e3d341", "patch": "@@ -5246,7 +5246,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \n     case ck_pmem:\n       return convert_ptrmem (totype, expr, /*allow_inverse_p=*/false,\n-\t\t\t     c_cast_p);\n+\t\t\t     c_cast_p, complain);\n \n     default:\n       break;"}, {"sha": "cf128dc315a9defc082117c5cb28d7891c943b46", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135d47df2157e1f04f519f18e893b4fb68e3d341/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135d47df2157e1f04f519f18e893b4fb68e3d341/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=135d47df2157e1f04f519f18e893b4fb68e3d341", "patch": "@@ -5488,7 +5488,8 @@ extern int comp_ptr_ttypes\t\t\t(tree, tree);\n extern bool comp_ptr_ttypes_const\t\t(tree, tree);\n extern bool error_type_p\t\t\t(const_tree);\n extern int ptr_reasonably_similar\t\t(const_tree, const_tree);\n-extern tree build_ptrmemfunc\t\t\t(tree, tree, int, bool);\n+extern tree build_ptrmemfunc\t\t\t(tree, tree, int, bool,\n+\t\t\t\t\t\t tsubst_flags_t);\n extern int cp_type_quals\t\t\t(const_tree);\n extern int type_memfn_quals\t\t\t(const_tree);\n extern tree apply_memfn_quals\t\t\t(tree, cp_cv_quals);\n@@ -5517,7 +5518,8 @@ extern tree non_reference\t\t\t(tree);\n extern tree lookup_anon_field\t\t\t(tree, tree);\n extern bool invalid_nonstatic_memfn_p\t\t(const_tree, tsubst_flags_t);\n extern tree convert_member_func_to_ptr\t\t(tree, tree);\n-extern tree convert_ptrmem\t\t\t(tree, tree, bool, bool);\n+extern tree convert_ptrmem\t\t\t(tree, tree, bool, bool,\n+\t\t\t\t\t\t tsubst_flags_t);\n extern int lvalue_or_else\t\t\t(tree, enum lvalue_use,\n                                                  tsubst_flags_t);\n extern void check_template_keyword\t\t(tree);"}, {"sha": "26c4442a94bc9764d34ef5ad393c83d7f3e3929c", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135d47df2157e1f04f519f18e893b4fb68e3d341/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135d47df2157e1f04f519f18e893b4fb68e3d341/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=135d47df2157e1f04f519f18e893b4fb68e3d341", "patch": "@@ -176,7 +176,7 @@ cp_convert_to_pointer (tree type, tree expr)\n   else if ((TYPE_PTRMEM_P (type) && TYPE_PTRMEM_P (intype))\n \t   || (TYPE_PTRMEMFUNC_P (type) && TYPE_PTRMEMFUNC_P (intype)))\n     return convert_ptrmem (type, expr, /*allow_inverse_p=*/false,\n-\t\t\t   /*c_cast_p=*/false);\n+\t\t\t   /*c_cast_p=*/false, tf_warning_or_error);\n   else if (TYPE_PTRMEMFUNC_P (intype))\n     {\n       if (!warn_pmf2ptr)\n@@ -200,7 +200,7 @@ cp_convert_to_pointer (tree type, tree expr)\n     {\n       if (TYPE_PTRMEMFUNC_P (type))\n \treturn build_ptrmemfunc (TYPE_PTRMEMFUNC_FN_TYPE (type), expr, 0,\n-\t\t\t\t /*c_cast_p=*/false);\n+\t\t\t\t /*c_cast_p=*/false, tf_warning_or_error);\n \n       if (TYPE_PTRMEM_P (type))\n \t{\n@@ -1376,7 +1376,7 @@ convert_force (tree type, tree expr, int convtype)\n       && TYPE_PTRMEMFUNC_P (type))\n     /* compatible pointer to member functions.  */\n     return build_ptrmemfunc (TYPE_PTRMEMFUNC_FN_TYPE (type), e, 1,\n-\t\t\t     /*c_cast_p=*/1);\n+\t\t\t     /*c_cast_p=*/1, tf_warning_or_error);\n \n   return ocp_convert (type, e, CONV_C_CAST|convtype, LOOKUP_NORMAL);\n }"}, {"sha": "d5e43dedcf8bb5ffffae20e47d2134a557600d12", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 62, "deletions": 27, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135d47df2157e1f04f519f18e893b4fb68e3d341/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135d47df2157e1f04f519f18e893b4fb68e3d341/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=135d47df2157e1f04f519f18e893b4fb68e3d341", "patch": "@@ -1,6 +1,6 @@\n /* Build expressions with type checking for C++ compiler.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n@@ -53,7 +53,7 @@ static int comp_ptr_ttypes_real (tree, tree, int);\n static bool comp_except_types (tree, tree, bool);\n static bool comp_array_types (const_tree, const_tree, bool);\n static tree pointer_diff (tree, tree, tree);\n-static tree get_delta_difference (tree, tree, bool, bool);\n+static tree get_delta_difference (tree, tree, bool, bool, tsubst_flags_t);\n static void casts_away_constness_r (tree *, tree *);\n static bool casts_away_constness (tree, tree);\n static void maybe_warn_about_returning_address_of_local (tree);\n@@ -5254,7 +5254,8 @@ cp_build_unary_op (enum tree_code code, tree xarg, int noconvert,\n \t{\n \t  build_ptrmemfunc_type (argtype);\n \t  val = build_ptrmemfunc (argtype, val, 0,\n-\t\t\t\t  /*c_cast_p=*/false);\n+\t\t\t\t  /*c_cast_p=*/false,\n+\t\t\t\t  tf_warning_or_error);\n \t}\n \n       return val;\n@@ -5669,7 +5670,7 @@ check_for_casting_away_constness (tree src_type, tree dest_type,\n \n tree\n convert_ptrmem (tree type, tree expr, bool allow_inverse_p,\n-\t\tbool c_cast_p)\n+\t\tbool c_cast_p, tsubst_flags_t complain)\n {\n   if (TYPE_PTRMEM_P (type))\n     {\n@@ -5680,7 +5681,10 @@ convert_ptrmem (tree type, tree expr, bool allow_inverse_p,\n       delta = get_delta_difference (TYPE_PTRMEM_CLASS_TYPE (TREE_TYPE (expr)),\n \t\t\t\t    TYPE_PTRMEM_CLASS_TYPE (type),\n \t\t\t\t    allow_inverse_p,\n-\t\t\t\t    c_cast_p);\n+\t\t\t\t    c_cast_p, complain);\n+      if (delta == error_mark_node)\n+\treturn error_mark_node;\n+\n       if (!integer_zerop (delta))\n \t{\n \t  tree cond, op1, op2;\n@@ -5704,7 +5708,7 @@ convert_ptrmem (tree type, tree expr, bool allow_inverse_p,\n     }\n   else\n     return build_ptrmemfunc (TYPE_PTRMEMFUNC_FN_TYPE (type), expr,\n-\t\t\t     allow_inverse_p, c_cast_p);\n+\t\t\t     allow_inverse_p, c_cast_p, complain);\n }\n \n /* If EXPR is an INTEGER_CST and ORIG is an arithmetic constant, return\n@@ -5940,7 +5944,7 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n \t  if (!c_cast_p)\n \t    check_for_casting_away_constness (intype, type, STATIC_CAST_EXPR);\n \t  return convert_ptrmem (type, expr, /*allow_inverse_p=*/1,\n-\t\t\t\t c_cast_p);\n+\t\t\t\t c_cast_p, tf_warning_or_error);\n \t}\n     }\n \n@@ -6855,20 +6859,32 @@ build_x_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n \n /* Helper function for get_delta_difference which assumes FROM is a base\n    class of TO.  Returns a delta for the conversion of pointer-to-member\n-   of FROM to pointer-to-member of TO.  If the conversion is invalid,\n+   of FROM to pointer-to-member of TO.  If the conversion is invalid and \n+   tf_error is not set in COMPLAIN returns error_mark_node, otherwise\n    returns zero.  If FROM is not a base class of TO, returns NULL_TREE.\n-   If C_CAST_P is true, this conversion is taking place as part of a C-style\n-   cast.  */\n+   If C_CAST_P is true, this conversion is taking place as part of a \n+   C-style cast.  */\n \n static tree\n-get_delta_difference_1 (tree from, tree to, bool c_cast_p)\n+get_delta_difference_1 (tree from, tree to, bool c_cast_p,\n+\t\t\ttsubst_flags_t complain)\n {\n   tree binfo;\n   base_kind kind;\n+  base_access access = c_cast_p ? ba_unique : ba_check;\n+\n+  /* Note: ba_quiet does not distinguish between access control and\n+     ambiguity.  */\n+  if (!(complain & tf_error))\n+    access |= ba_quiet;\n+\n+  binfo = lookup_base (to, from, access, &kind);\n \n-  binfo = lookup_base (to, from, c_cast_p ? ba_unique : ba_check, &kind);\n   if (kind == bk_inaccessible || kind == bk_ambig)\n     {\n+      if (!(complain & tf_error))\n+\treturn error_mark_node;\n+\n       error (\"   in pointer to member function conversion\");\n       return size_zero_node;\n     }\n@@ -6880,22 +6896,26 @@ get_delta_difference_1 (tree from, tree to, bool c_cast_p)\n \t/* FROM is a virtual base class of TO.  Issue an error or warning\n \t   depending on whether or not this is a reinterpret cast.  */\n \t{\n+\t  if (!(complain & tf_error))\n+\t    return error_mark_node;\n+\n \t  error (\"pointer to member conversion via virtual base %qT\",\n \t\t BINFO_TYPE (binfo_from_vbase (binfo)));\n \n \t  return size_zero_node;\n \t}\n       }\n-    else\n-      return NULL_TREE;\n+  else\n+    return NULL_TREE;\n }\n \n /* Get difference in deltas for different pointer to member function\n-   types.  Returns an integer constant of type PTRDIFF_TYPE_NODE.  If\n-   the conversion is invalid, the constant is zero.  If\n-   ALLOW_INVERSE_P is true, then allow reverse conversions as well.\n-   If C_CAST_P is true this conversion is taking place as part of a\n-   C-style cast.\n+   types.  If the conversion is invalid and tf_error is not set in\n+   COMPLAIN, returns error_mark_node, otherwise returns an integer\n+   constant of type PTRDIFF_TYPE_NODE and its value is zero if the\n+   conversion is invalid.  If ALLOW_INVERSE_P is true, then allow reverse\n+   conversions as well.  If C_CAST_P is true this conversion is taking\n+   place as part of a C-style cast.\n \n    Note that the naming of FROM and TO is kind of backwards; the return\n    value is what we add to a TO in order to get a FROM.  They are named\n@@ -6905,33 +6925,45 @@ get_delta_difference_1 (tree from, tree to, bool c_cast_p)\n static tree\n get_delta_difference (tree from, tree to,\n \t\t      bool allow_inverse_p,\n-\t\t      bool c_cast_p)\n+\t\t      bool c_cast_p, tsubst_flags_t complain)\n {\n   tree result;\n \n   if (same_type_ignoring_top_level_qualifiers_p (from, to))\n     /* Pointer to member of incomplete class is permitted*/\n     result = size_zero_node;\n   else\n-    result = get_delta_difference_1 (from, to, c_cast_p);\n+    result = get_delta_difference_1 (from, to, c_cast_p, complain);\n+\n+  if (result == error_mark_node)\n+    return error_mark_node;\n \n   if (!result)\n   {\n     if (!allow_inverse_p)\n       {\n+\tif (!(complain & tf_error))\n+\t  return error_mark_node;\n+\n \terror_not_base_type (from, to);\n \terror (\"   in pointer to member conversion\");\n-\tresult = size_zero_node;\n+      \tresult = size_zero_node;\n       }\n     else\n       {\n-\tresult = get_delta_difference_1 (to, from, c_cast_p);\n+\tresult = get_delta_difference_1 (to, from, c_cast_p, complain);\n+\n+\tif (result == error_mark_node)\n+\t  return error_mark_node;\n \n \tif (result)\n \t  result = size_diffop_loc (input_location,\n-\t\t\t\tsize_zero_node, result);\n+\t\t\t\t    size_zero_node, result);\n \telse\n \t  {\n+\t    if (!(complain & tf_error))\n+\t      return error_mark_node;\n+\n \t    error_not_base_type (from, to);\n \t    error (\"   in pointer to member conversion\");\n \t    result = size_zero_node;\n@@ -6990,7 +7022,8 @@ build_ptrmemfunc1 (tree type, tree delta, tree pfn)\n    Return error_mark_node, if something goes wrong.  */\n \n tree\n-build_ptrmemfunc (tree type, tree pfn, int force, bool c_cast_p)\n+build_ptrmemfunc (tree type, tree pfn, int force, bool c_cast_p,\n+\t\t  tsubst_flags_t complain)\n {\n   tree fn;\n   tree pfn_type;\n@@ -7017,7 +7050,9 @@ build_ptrmemfunc (tree type, tree pfn, int force, bool c_cast_p)\n       n = get_delta_difference (TYPE_PTRMEMFUNC_OBJECT_TYPE (pfn_type),\n \t\t\t\tTYPE_PTRMEMFUNC_OBJECT_TYPE (to_type),\n \t\t\t\tforce,\n-\t\t\t\tc_cast_p);\n+\t\t\t\tc_cast_p, complain);\n+      if (n == error_mark_node)\n+\treturn error_mark_node;\n \n       /* We don't have to do any conversion to convert a\n \t pointer-to-member to its own type.  But, we don't want to\n@@ -7100,7 +7135,7 @@ expand_ptrmemfunc_cst (tree cst, tree *delta, tree *pfn)\n \n   /* First, calculate the adjustment to the function's class.  */\n   *delta = get_delta_difference (fn_class, ptr_class, /*force=*/0,\n-\t\t\t\t /*c_cast_p=*/0);\n+\t\t\t\t /*c_cast_p=*/0, tf_warning_or_error);\n \n   if (!DECL_VIRTUAL_P (fn))\n     *pfn = convert (TYPE_PTRMEMFUNC_FN_TYPE (type), build_addr_func (fn));"}, {"sha": "186a4c613f4fc2556b5cc973cab1df962329555f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135d47df2157e1f04f519f18e893b4fb68e3d341/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135d47df2157e1f04f519f18e893b4fb68e3d341/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=135d47df2157e1f04f519f18e893b4fb68e3d341", "patch": "@@ -1,3 +1,9 @@\n+2010-07-13  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/44908\n+\t* g++.dg/template/sfinae21.C: New.\n+\t* g++.dg/template/sfinae22.C: Likewise.\n+\n 2010-07-13  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* gcc.c-torture/execute/pr44683.x: New."}, {"sha": "6086f2f9e7d70c7337d07336a350aaf52f5f0034", "filename": "gcc/testsuite/g++.dg/template/sfinae21.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135d47df2157e1f04f519f18e893b4fb68e3d341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135d47df2157e1f04f519f18e893b4fb68e3d341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae21.C?ref=135d47df2157e1f04f519f18e893b4fb68e3d341", "patch": "@@ -0,0 +1,40 @@\n+// PR c++/44908\n+\n+struct A { };\n+\n+struct B\n+: public virtual A { };\n+\n+template<bool, typename T = void> struct enable_if { typedef T type; };\n+template<typename T> struct enable_if<false, T> { };\n+\n+template<typename From, typename To>\n+  class mini_is_convertible\n+  {\n+    typedef char one;\n+    typedef struct { char arr[2]; } two;\n+\n+    template<typename To1>\n+      static void test_aux(To1);\n+\n+    template<typename To1, typename From1>\n+      static typename\n+      enable_if<(sizeof(test_aux<To1>(From1()), 1) > 0), one>::type\n+      test(int);\n+\n+    template<typename, typename>\n+      static two test(...);\n+\n+    public:\n+      static const bool value = sizeof(test<To, From>(0)) == 1;\n+  }; \n+\n+template<typename From, typename To>\n+  const bool mini_is_convertible<From, To>::value;\n+\n+int Test1[mini_is_convertible<int (B::*) (int),\n+\t  int (A::*) (int)>::value ? -1 : 1];\n+int Test2[mini_is_convertible<int (B::*), int (A::*)>::value ? -1 : 1];\n+int Test3[mini_is_convertible<int (A::*) (int),\n+\t  int (B::*) (int)>::value ? -1 : 1];\n+int Test4[mini_is_convertible<int (A::*), int (B::*)>::value ? -1 : 1];"}, {"sha": "cdac99d91b7cd2450ebf3468df252242712024f9", "filename": "gcc/testsuite/g++.dg/template/sfinae22.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135d47df2157e1f04f519f18e893b4fb68e3d341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135d47df2157e1f04f519f18e893b4fb68e3d341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae22.C?ref=135d47df2157e1f04f519f18e893b4fb68e3d341", "patch": "@@ -0,0 +1,39 @@\n+// PR c++/44908\n+// { dg-options \"-std=c++0x\" }\n+\n+#include <utility> \n+\n+struct A { };\n+\n+struct B\n+: public virtual A { };\n+\n+template<typename From, typename To>\n+  class mini_is_convertible\n+  {\n+    typedef char one;\n+    typedef struct { char arr[2]; } two;\n+\n+    template<typename To1>\n+      static void test_aux(To1);\n+\n+    template<typename To1, typename From1>\n+      static decltype(test_aux<To1>(std::declval<From1>()), one())\n+      test(int);\n+\n+    template<typename, typename>\n+      static two test(...);\n+\n+    public:\n+      static const bool value = sizeof(test<To, From>(0)) == 1;\n+  }; \n+\n+template<typename From, typename To>\n+  const bool mini_is_convertible<From, To>::value;\n+\n+static_assert (!mini_is_convertible<int (B::*) (int),\n+\t       int (A::*) (int)>::value, \"\");\n+static_assert (!mini_is_convertible<int (B::*), int (A::*)>::value, \"\");\n+static_assert (!mini_is_convertible<int (A::*) (int),\n+\t       int (B::*) (int)>::value, \"\"); \n+static_assert (!mini_is_convertible<int (A::*), int (B::*)>::value, \"\");"}]}