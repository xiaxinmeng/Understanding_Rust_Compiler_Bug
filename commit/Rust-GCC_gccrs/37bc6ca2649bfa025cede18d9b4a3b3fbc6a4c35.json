{"sha": "37bc6ca2649bfa025cede18d9b4a3b3fbc6a4c35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdiYzZjYTI2NDliZmEwMjVjZWRlMThkOWI0YTNiM2ZiYzZhNGMzNQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-12-30T14:54:45Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-12-30T14:54:45Z"}, "message": "acinclude.m4: Remove trailing whitespace.\n\n2002-12-30  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* acinclude.m4:  Remove trailing whitespace.\n\t(GLIBCPP_ENABLE_CXX_FLAGS):  Fix.\n\t* aclocal.m4, configure:  Regenerate.\n\nFrom-SVN: r60631", "tree": {"sha": "00c315492ca8973295b44d78ae127ae5883cac08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00c315492ca8973295b44d78ae127ae5883cac08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37bc6ca2649bfa025cede18d9b4a3b3fbc6a4c35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37bc6ca2649bfa025cede18d9b4a3b3fbc6a4c35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37bc6ca2649bfa025cede18d9b4a3b3fbc6a4c35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37bc6ca2649bfa025cede18d9b4a3b3fbc6a4c35/comments", "author": null, "committer": null, "parents": [{"sha": "07fa4878595a4d496d066941d948186fe701afdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07fa4878595a4d496d066941d948186fe701afdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07fa4878595a4d496d066941d948186fe701afdf"}], "stats": {"total": 3391, "additions": 1711, "deletions": 1680}, "files": [{"sha": "84669c5f402ada1bdb4cdd6249444dd633561aff", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37bc6ca2649bfa025cede18d9b4a3b3fbc6a4c35/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37bc6ca2649bfa025cede18d9b4a3b3fbc6a4c35/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=37bc6ca2649bfa025cede18d9b4a3b3fbc6a4c35", "patch": "@@ -1,3 +1,9 @@\n+2002-12-30  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* acinclude.m4:  Remove trailing whitespace.\n+\t(GLIBCPP_ENABLE_CXX_FLAGS):  Fix.\n+\t* aclocal.m4, configure:  Regenerate.\n+\n 2002-12-29  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* include/std/std_bitset.h:  Better comments."}, {"sha": "8ea606dba2147b01903c16f79f247d92104bf287", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 114, "deletions": 113, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37bc6ca2649bfa025cede18d9b4a3b3fbc6a4c35/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37bc6ca2649bfa025cede18d9b4a3b3fbc6a4c35/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=37bc6ca2649bfa025cede18d9b4a3b3fbc6a4c35", "patch": "@@ -207,8 +207,8 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n \n dnl\n dnl Check to see if g++ can compile this library, and if so, if any version-\n-dnl specific precautions need to be taken. \n-dnl \n+dnl specific precautions need to be taken.\n+dnl\n dnl GLIBCPP_CHECK_COMPILER_VERSION\n AC_DEFUN(GLIBCPP_CHECK_COMPILER_VERSION, [\n if test ! -f stamp-sanity-compiler; then\n@@ -333,14 +333,14 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n \n     # Check for -Wl,--gc-sections\n     # XXX This test is broken at the moment, as symbols required for\n-    # linking are now in libsupc++ (not built yet.....). In addition, \n+    # linking are now in libsupc++ (not built yet.....). In addition,\n     # this test has cored on solaris in the past. In addition,\n     # --gc-sections doesn't really work at the moment (keeps on discarding\n     # used sections, first .eh_frame and now some of the glibc sections for\n     # iconv). Bzzzzt. Thanks for playing, maybe next time.\n     AC_MSG_CHECKING([for ld that supports -Wl,--gc-sections])\n     AC_TRY_RUN([\n-     int main(void) \n+     int main(void)\n      {\n        try { throw 1; }\n        catch (...) { };\n@@ -385,8 +385,8 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_1, [\n \t\t      #ifdef HAVE_IEEEFP_H\n \t\t      #include <ieeefp.h>\n \t\t      #endif\n-\t\t     ], \n-                     [ $1(0);], \n+\t\t     ],\n+                     [ $1(0);],\n                      [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n@@ -410,19 +410,19 @@ dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1\n AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1, [\n   GLIBCPP_CHECK_MATH_DECL_1($1)\n   if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n-    AC_CHECK_FUNCS($1)    \n+    AC_CHECK_FUNCS($1)\n   else\n     GLIBCPP_CHECK_MATH_DECL_1(_$1)\n     if test x$glibcpp_cv_func__$1_use = x\"yes\"; then\n-      AC_CHECK_FUNCS(_$1)    \n+      AC_CHECK_FUNCS(_$1)\n     fi\n   fi\n ])\n \n \n dnl\n dnl Like GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1, but does a bunch of\n-dnl of functions at once.  It's an all-or-nothing check -- either \n+dnl of functions at once.  It's an all-or-nothing check -- either\n dnl HAVE_XYZ is defined for each of the functions, or for none of them.\n dnl Doing it this way saves significant configure time.\n AC_DEFUN(GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1, [\n@@ -453,8 +453,8 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_2, [\n     AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n-      AC_TRY_COMPILE([#include <math.h>], \n-                     [ $1(0, 0);], \n+      AC_TRY_COMPILE([#include <math.h>],\n+                     [ $1(0, 0);],\n                      [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n@@ -477,11 +477,11 @@ dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2\n AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2, [\n   GLIBCPP_CHECK_MATH_DECL_2($1)\n   if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n-    AC_CHECK_FUNCS($1)    \n+    AC_CHECK_FUNCS($1)\n   else\n     GLIBCPP_CHECK_MATH_DECL_2(_$1)\n     if test x$glibcpp_cv_func__$1_use = x\"yes\"; then\n-      AC_CHECK_FUNCS(_$1)    \n+      AC_CHECK_FUNCS(_$1)\n     fi\n   fi\n ])\n@@ -499,8 +499,8 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_3, [\n     AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n-      AC_TRY_COMPILE([#include <math.h>], \n-                     [ $1(0, 0, 0);], \n+      AC_TRY_COMPILE([#include <math.h>],\n+                     [ $1(0, 0, 0);],\n                      [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n@@ -523,11 +523,11 @@ dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3\n AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3, [\n   GLIBCPP_CHECK_MATH_DECL_3($1)\n   if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n-    AC_CHECK_FUNCS($1)    \n+    AC_CHECK_FUNCS($1)\n   else\n     GLIBCPP_CHECK_MATH_DECL_3(_$1)\n     if test x$glibcpp_cv_func__$1_use = x\"yes\"; then\n-      AC_CHECK_FUNCS(_$1)    \n+      AC_CHECK_FUNCS(_$1)\n     fi\n   fi\n ])\n@@ -549,15 +549,15 @@ AC_DEFUN(GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2, [\n     AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n-      AC_TRY_COMPILE([#include <stdlib.h>], \n-                     [ $1(0, 0);], \n+      AC_TRY_COMPILE([#include <stdlib.h>],\n+                     [ $1(0, 0);],\n                      [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n   fi\n   AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n   if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n-    AC_CHECK_FUNCS($1)    \n+    AC_CHECK_FUNCS($1)\n   fi\n ])\n \n@@ -578,15 +578,15 @@ AC_DEFUN(GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_3, [\n     AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n-      AC_TRY_COMPILE([#include <stdlib.h>], \n-                     [ $1(0, 0, 0);], \n+      AC_TRY_COMPILE([#include <stdlib.h>],\n+                     [ $1(0, 0, 0);],\n                      [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n   fi\n   AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n   if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n-    AC_CHECK_FUNCS($1)    \n+    AC_CHECK_FUNCS($1)\n   fi\n ])\n \n@@ -606,20 +606,20 @@ AC_DEFUN(GLIBCPP_CHECK_UNISTD_DECL_AND_LINKAGE_1, [\n     AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n-      AC_TRY_COMPILE([#include <unistd.h>], \n-                     [ $1(0);], \n+      AC_TRY_COMPILE([#include <unistd.h>],\n+                     [ $1(0);],\n                      [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n   fi\n   AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n   if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n-    AC_CHECK_FUNCS($1)    \n+    AC_CHECK_FUNCS($1)\n   fi\n ])\n \n dnl\n-dnl Because the builtins are picky picky picky about the arguments they take, \n+dnl Because the builtins are picky picky picky about the arguments they take,\n dnl do an explict linkage tests here.\n dnl Check to see if the (math function) argument passed is\n dnl 1) declared when using the c++ compiler\n@@ -638,8 +638,8 @@ AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1, [\n     AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n-      AC_TRY_COMPILE([#include <math.h>], \n-                     [ $1(0);], \n+      AC_TRY_COMPILE([#include <math.h>],\n+                     [ $1(0);],\n                      [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n@@ -649,8 +649,8 @@ AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1, [\n     AC_MSG_CHECKING([for $1 linkage])\n     if test x${glibcpp_cv_func_$1_link+set} != xset; then\n       AC_CACHE_VAL(glibcpp_cv_func_$1_link, [\n-        AC_TRY_LINK([#include <math.h>], \n-                    [ $1(0);], \n+        AC_TRY_LINK([#include <math.h>],\n+                    [ $1(0);],\n                     [glibcpp_cv_func_$1_link=yes], [glibcpp_cv_func_$1_link=no])\n       ])\n     fi\n@@ -684,7 +684,7 @@ dnl\n dnl GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT, [\n   dnl Test for builtin math functions.\n-  dnl These are made in gcc/c-common.c \n+  dnl These are made in gcc/c-common.c\n   GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_abs)\n   GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fabsf)\n   GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fabs)\n@@ -730,7 +730,7 @@ AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT, [\n \n dnl\n dnl Check to see what the underlying c library is like\n-dnl These checks need to do two things: \n+dnl These checks need to do two things:\n dnl 1) make sure the name is declared when using the c++ compiler\n dnl 2) make sure the name has \"C\" linkage\n dnl This might seem like overkill but experience has shown that it's not...\n@@ -754,7 +754,7 @@ AC_DEFUN(GLIBCPP_CHECK_STDLIB_SUPPORT, [\n \n dnl\n dnl Check to see what the underlying c library is like\n-dnl These checks need to do two things: \n+dnl These checks need to do two things:\n dnl 1) make sure the name is declared when using the c++ compiler\n dnl 2) make sure the name has \"C\" linkage\n dnl This might seem like overkill but experience has shown that it's not...\n@@ -768,13 +768,13 @@ AC_DEFUN(GLIBCPP_CHECK_UNISTD_SUPPORT, [\n   CXXFLAGS='-fno-builtins -D_GNU_SOURCE'\n \n   GLIBCPP_CHECK_UNISTD_DECL_AND_LINKAGE_1(isatty)\n-  \n+\n   CXXFLAGS=\"$ac_save_CXXFLAGS\"\n ])\n \n dnl\n dnl Check to see what the underlying c library or math library is like.\n-dnl These checks need to do two things: \n+dnl These checks need to do two things:\n dnl 1) make sure the name is declared when using the c++ compiler\n dnl 2) make sure the name has \"C\" linkage\n dnl This might seem like overkill but experience has shown that it's not...\n@@ -886,7 +886,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n \n \n dnl\n-dnl Check to see if there is native support for complex \n+dnl Check to see if there is native support for complex\n dnl\n dnl Don't compile bits in math/* if native support exits.\n dnl\n@@ -902,7 +902,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   AC_CHECK_FUNCS([__signbit], , [LIBMATHOBJS=\"$LIBMATHOBJS signbit.lo\"])\n   AC_CHECK_FUNCS([__signbitf], , [LIBMATHOBJS=\"$LIBMATHOBJS signbitf.lo\"])\n \n-  dnl Compile the long double complex functions only if the function \n+  dnl Compile the long double complex functions only if the function\n   dnl provides the non-complex long double functions that are needed.\n   dnl Currently this includes copysignl, which should be\n   dnl cached from the GLIBCPP_CHECK_MATH_SUPPORT macro, above.\n@@ -921,7 +921,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n dnl Check to see what architecture and operating system we are compiling\n dnl for.  Also, if architecture- or OS-specific flags are required for\n dnl compilation, pick them up here.\n-dnl \n+dnl\n dnl GLIBCPP_CHECK_TARGET\n AC_DEFUN(GLIBCPP_CHECK_TARGET, [\n   . [$]{glibcpp_basedir}/configure.target\n@@ -935,7 +935,7 @@ dnl Check to see if this target can enable the wchar_t parts of libstdc++.\n dnl If --disable-c-mbchar was given, no wchar_t stuff is enabled.  (This\n dnl must have been previously checked.)\n dnl\n-dnl Define _GLIBCPP_USE_WCHAR_T if all the bits are found \n+dnl Define _GLIBCPP_USE_WCHAR_T if all the bits are found\n dnl Define HAVE_MBSTATE_T if mbstate_t is not in wchar.h\n dnl\n dnl GLIBCPP_CHECK_WCHAR_T_SUPPORT\n@@ -945,7 +945,7 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n   dnl others even if wchar_t support is not on.\n   AC_MSG_CHECKING([for mbstate_t])\n   AC_TRY_COMPILE([#include <wchar.h>],\n-  [mbstate_t teststate;], \n+  [mbstate_t teststate;],\n   have_mbstate_t=yes, have_mbstate_t=no)\n   AC_MSG_RESULT($have_mbstate_t)\n   if test x\"$have_mbstate_t\" = xyes; then\n@@ -955,20 +955,20 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n   dnl Sanity check for existence of ISO C99 headers for extended encoding.\n   AC_CHECK_HEADERS(wchar.h, ac_has_wchar_h=yes, ac_has_wchar_h=no)\n   AC_CHECK_HEADERS(wctype.h, ac_has_wctype_h=yes, ac_has_wctype_h=no)\n-  \n+\n   dnl Only continue checking if the ISO C99 headers exist and support is on.\n   if test x\"$ac_has_wchar_h\" = xyes &&\n      test x\"$ac_has_wctype_h\" = xyes &&\n      test x\"$enable_c_mbchar\" != xno; then\n-      \n+\n     dnl Test wchar.h for WCHAR_MIN, WCHAR_MAX, which is needed before\n     dnl numeric_limits can instantiate type_traits<wchar_t>\n     AC_MSG_CHECKING([for WCHAR_MIN and WCHAR_MAX])\n     AC_TRY_COMPILE([#include <wchar.h>],\n-    [int i = WCHAR_MIN; int j = WCHAR_MAX;], \n+    [int i = WCHAR_MIN; int j = WCHAR_MAX;],\n     has_wchar_minmax=yes, has_wchar_minmax=no)\n     AC_MSG_RESULT($has_wchar_minmax)\n-    \n+\n     dnl Test wchar.h for WEOF, which is what we use to determine whether\n     dnl to specialize for char_traits<wchar_t> or not.\n     AC_MSG_CHECKING([for WEOF])\n@@ -978,12 +978,12 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n     [wint_t i = WEOF;],\n     has_weof=yes, has_weof=no)\n     AC_MSG_RESULT($has_weof)\n-  \n+\n     dnl Tests for wide character functions used in char_traits<wchar_t>.\n     ac_wfuncs=yes\n     AC_CHECK_FUNCS(wcslen wmemchr wmemcmp wmemcpy wmemmove wmemset,, \\\n     ac_wfuncs=no)\n-  \n+\n     dnl Checks for names injected into std:: by the c_std headers.\n     AC_CHECK_FUNCS(btowc wctob fgetwc fgetwc fgetws fputwc fputws fwide \\\n     fwprintf fwscanf swprintf swscanf vfwprintf vfwscanf vswprintf vswscanf \\\n@@ -1002,8 +1002,8 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n       ac_isoC99_wchar_t=no\n     fi\n     AC_MSG_RESULT($ac_isoC99_wchar_t)\n-  \n-    dnl Use iconv for wchar_t to char conversions. As such, check for \n+\n+    dnl Use iconv for wchar_t to char conversions. As such, check for\n     dnl X/Open Portability Guide, version 2 features (XPG2).\n     AC_CHECK_HEADER(iconv.h, ac_has_iconv_h=yes, ac_has_iconv_h=no)\n     AC_CHECK_HEADER(langinfo.h, ac_has_langinfo_h=yes, ac_has_langinfo_h=no)\n@@ -1015,7 +1015,7 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n \n     AC_CHECK_FUNCS(iconv_open iconv_close iconv nl_langinfo, \\\n     ac_XPG2funcs=yes, ac_XPG2funcs=no)\n-  \n+\n     LIBS=\"$ac_save_LIBS\"\n \n     AC_MSG_CHECKING([for XPG2 wchar_t support])\n@@ -1027,7 +1027,7 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n       ac_XPG2_wchar_t=no\n     fi\n     AC_MSG_RESULT($ac_XPG2_wchar_t)\n-  \n+\n     dnl At the moment, only enable wchar_t specializations if all the\n     dnl above support is present.\n     AC_MSG_CHECKING([for enabled wchar_t specializations])\n@@ -1039,7 +1039,7 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n       AC_MSG_RESULT(\"no\")\n     fi\n   else\n-    dnl Wide characters disabled by the user. \n+    dnl Wide characters disabled by the user.\n     AC_MSG_WARN([wchar_t support disabled.])\n   fi\n ])\n@@ -1050,11 +1050,11 @@ dnl Check to see if debugging libraries are to be built.\n dnl\n dnl GLIBCPP_ENABLE_DEBUG\n dnl\n-dnl --enable-debug \n+dnl --enable-debug\n dnl builds a separate set of debugging libraries in addition to the\n dnl normal (shared, static) libstdc++ binaries.\n dnl\n-dnl --disable-debug \n+dnl --disable-debug\n dnl builds only one (non-debug) version of libstdc++.\n dnl\n dnl --enable-debug-flags=FLAGS\n@@ -1077,16 +1077,16 @@ changequote([, ])dnl\n enable_debug=GLIBCPP_ENABLE_DEBUG_DEFAULT)dnl\n AC_MSG_CHECKING([for additional debug build])\n AC_MSG_RESULT($enable_debug)\n-AM_CONDITIONAL(GLIBCPP_BUILD_DEBUG, test \"$enable_debug\" = yes)\t\n+AM_CONDITIONAL(GLIBCPP_BUILD_DEBUG, test \"$enable_debug\" = yes)\n ])\n \n \n dnl Check for explicit debug flags.\n dnl\n dnl GLIBCPP_ENABLE_DEBUG_FLAGS\n dnl\n-dnl --enable-debug-flags='-O1' \n-dnl is a general method for passing flags to be used when \n+dnl --enable-debug-flags='-O1'\n+dnl is a general method for passing flags to be used when\n dnl building debug libraries with --enable-debug.\n dnl\n dnl --disable-debug-flags does nothing.\n@@ -1097,7 +1097,7 @@ AC_DEFUN(GLIBCPP_ENABLE_DEBUG_FLAGS, [dnl\n define([GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT], ifelse($1,,, $1))dnl\n AC_ARG_ENABLE(debug_flags,\n changequote(<<, >>)dnl\n-<<  --enable-debug-flags=FLAGS    pass compiler FLAGS when building debug \n+<<  --enable-debug-flags=FLAGS    pass compiler FLAGS when building debug\n \t                library;[default=>>GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT],\n changequote([, ])dnl\n [case \"${enableval}\" in\n@@ -1109,15 +1109,15 @@ enable_debug_flags=GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT)dnl\n \n dnl Option parsed, now set things appropriately\n case x\"$enable_debug\" in\n-    xyes) \n+    xyes)\n         case \"$enable_debug_flags\" in\n-\t  none) \n+\t  none)\n             DEBUG_FLAGS=\"-g3 -O0\";;\n \t  -*) #valid input\n \t    DEBUG_FLAGS=\"${enableval}\"\n         esac\n-        ;; \n-    xno)   \n+        ;;\n+    xno)\n         DEBUG_FLAGS=\"\"\n         ;;\n esac\n@@ -1145,21 +1145,21 @@ dnl       If \"default flags\" is an empty string (or \"none\"), the effect is\n dnl       the same as --disable or --enable=no.\n AC_DEFUN(GLIBCPP_ENABLE_CXX_FLAGS, [dnl\n define([GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT], ifelse($1,,, $1))dnl\n+AC_MSG_CHECKING([for extra compiler flags for building])\n AC_ARG_ENABLE(cxx_flags,\n changequote(<<, >>)dnl\n <<  --enable-cxx-flags=FLAGS      pass compiler FLAGS when building library;\n-                                [default=>>GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT],\n+                                  [default=>>GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT],\n changequote([, ])dnl\n-enable_cxx_flags='GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT')\n-\n-case \"x$enable_cxx_flags\" in\n- xyes)   \n-        AC_MSG_ERROR([--enable-cxx-flags needs compiler flags as arguments]) ;;\n- xno | xnone | x)  \n-        enable_cxx_flags='' ;;\n- *)      \n-        enable_cxx_flags=\"$enableval\" ;;\n-esac\t\n+[case \"x$enable_cxx_flags\" in\n+  xyes)\n+    AC_MSG_ERROR([--enable-cxx-flags needs compiler flags as arguments]) ;;\n+  xno | xnone | x)\n+    enable_cxx_flags='' ;;\n+  *)\n+    enable_cxx_flags=\"$enableval\" ;;\n+esac],\n+enable_cxx_flags=GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT)\n \n dnl Run through flags (either default or command-line) and set anything\n dnl extra (e.g., #defines) that must accompany particular g++ options.\n@@ -1174,6 +1174,7 @@ if test -n \"$enable_cxx_flags\"; then\n   done\n fi\n EXTRA_CXX_FLAGS=\"$enable_cxx_flags\"\n+AC_MSG_RESULT($EXTRA_CXX_FLAGS)\n AC_SUBST(EXTRA_CXX_FLAGS)\n ])\n \n@@ -1184,15 +1185,15 @@ dnl\n dnl GLIBCPP_ENABLE_CLOCALE\n dnl --enable-clocale=gnu sets config/locale/c_locale_gnu.cc and friends\n dnl --enable-clocale=generic sets config/locale/c_locale_generic.cc and friends\n-dnl \n+dnl\n dnl default is generic\n dnl\n AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n   AC_MSG_CHECKING([for clocale to use])\n   AC_ARG_ENABLE(clocale,\n-  [  --enable-clocale        enable model for target locale package. \n+  [  --enable-clocale        enable model for target locale package.\n   --enable-clocale=MODEL  use MODEL target-speific locale package. [default=generic]\n-  ], \n+  ],\n   if test x$enable_clocale = xno; then\n      enable_clocale=no\n   fi,\n@@ -1207,7 +1208,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       xlinux* | xgnu*)\n \tAC_EGREP_CPP([_GLIBCPP_ok], [\n         #include <features.h>\n-        #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 2) \n+        #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 2)\n           _GLIBCPP_ok\n         #endif\n         ], enable_clocale_flag=gnu, enable_clocale_flag=generic)\n@@ -1237,7 +1238,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n   \t    j = __strcoll_l(__one, __two, loc_dup);\n   \t    return 0;\n \t  }\n-\t  ], \n+\t  ],\n \t  [enable_clocale_flag=gnu],[enable_clocale_flag=generic],\n \t  [enable_clocale_flag=generic])\n   \tfi\n@@ -1356,15 +1357,15 @@ dnl Check for which I/O library to use:  libio, or something specific.\n dnl\n dnl GLIBCPP_ENABLE_CSTDIO\n dnl --enable-cstdio=libio sets config/io/c_io_libio.h and friends\n-dnl \n+dnl\n dnl default is stdio\n dnl\n AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   AC_MSG_CHECKING([for cstdio to use])\n   AC_ARG_ENABLE(cstdio,\n-  [  --enable-cstdio         enable stdio for target io package. \n+  [  --enable-cstdio         enable stdio for target io package.\n   --enable-cstdio=LIB     use LIB target-speific io package. [default=stdio]\n-  ], \n+  ],\n   if test x$enable_cstdio = xno; then\n      enable_cstdio=stdio\n   fi,\n@@ -1384,15 +1385,15 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n       AC_CHECK_HEADER(libio.h,  has_libio=yes, has_libio=no)\n \n       # Need to check and see what version of glibc is being used. If\n-      # it's not glibc-2.2 or higher, then we'll need to go ahead and \n+      # it's not glibc-2.2 or higher, then we'll need to go ahead and\n       # compile most of libio for linux systems.\n       if test x$has_libio = x\"yes\"; then\n         case \"$target\" in\n           *-*-linux*)\n               AC_MSG_CHECKING([for glibc version >= 2.2])\n               AC_EGREP_CPP([ok], [\n             #include <features.h>\n-              #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 2) \n+              #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 2)\n                     ok\n               #endif\n               ], glibc_satisfactory=yes, glibc_satisfactory=no)\n@@ -1402,11 +1403,11 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n \n         # XXX at the moment, admit defeat and force the recompilation\n         # XXX of glibc even on glibc-2.2 systems, because libio is not synched.\n-        glibc_satisfactory=no        \n+        glibc_satisfactory=no\n \n         if test x$glibc_satisfactory = x\"yes\"; then\n            need_libio=no\n-           need_wlibio=no        \n+           need_wlibio=no\n         else\n            need_libio=yes\n            # bkoz XXX need to add checks to enable this\n@@ -1530,7 +1531,7 @@ void foo()\n   bar();\n }\n EOF\n-   old_CXXFLAGS=\"$CXXFLAGS\"  \n+   old_CXXFLAGS=\"$CXXFLAGS\"\n    CXXFLAGS=-S\n    if AC_TRY_EVAL(ac_compile); then\n      if grep _Unwind_SjLj_Resume conftest.s >/dev/null 2>&1 ; then\n@@ -1609,7 +1610,7 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n    *)   AC_MSG_ERROR([Unknown argument to enable/disable C99]) ;;\n    esac],\n   enable_c99=GLIBCPP_ENABLE_C99_DEFAULT)dnl\n- \n+\n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n \n@@ -1668,8 +1669,8 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n   ac_c99_stdlib=yes;\n   AC_MSG_CHECKING([for lldiv_t declaration])\n   AC_CACHE_VAL(ac_c99_lldiv_t, [\n-  AC_TRY_COMPILE([#include <stdlib.h>], \n-                   [ lldiv_t mydivt;], \n+  AC_TRY_COMPILE([#include <stdlib.h>],\n+                   [ lldiv_t mydivt;],\n                    [ac_c99_lldiv_t=yes], [ac_c99_lldiv_t=no])\n   ])\n   AC_MSG_RESULT($ac_c99_lldiv_t)\n@@ -1684,19 +1685,19 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n   AC_TRY_COMPILE([#include <stdlib.h>], [atoll(\"10\");],, [ac_c99_stdlib=no])\n   AC_TRY_COMPILE([#include <stdlib.h>], [_Exit(0);],, [ac_c99_stdlib=no])\n   if test x\"$ac_c99_lldiv_t\" = x\"no\"; then\n-    ac_c99_stdlib=no; \n-  fi; \n+    ac_c99_stdlib=no;\n+  fi;\n   AC_MSG_RESULT($ac_c99_stdlib)\n \n   # Check for the existence of <wchar.h> functions used if C99 is enabled.\n   # XXX the wchar.h checks should be rolled into the general C99 bits.\n   ac_c99_wchar=yes;\n   AC_MSG_CHECKING([for additional ISO C99 support in <wchar.h>])\n-  AC_TRY_COMPILE([#include <wchar.h>], \n+  AC_TRY_COMPILE([#include <wchar.h>],\n \t         [wcstold(L\"10.0\", NULL);],, [ac_c99_wchar=no])\n-  AC_TRY_COMPILE([#include <wchar.h>], \n+  AC_TRY_COMPILE([#include <wchar.h>],\n \t         [wcstoll(L\"10\", NULL, 10);],, [ac_c99_wchar=no])\n-  AC_TRY_COMPILE([#include <wchar.h>], \n+  AC_TRY_COMPILE([#include <wchar.h>],\n \t         [wcstoull(L\"10\", NULL, 10);],, [ac_c99_wchar=no])\n   AC_MSG_RESULT($ac_c99_wchar)\n \n@@ -1705,8 +1706,8 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n      test x\"$ac_c99_stdio\" = x\"no\" ||\n      test x\"$ac_c99_stdlib\" = x\"no\" ||\n      test x\"$ac_c99_wchar\" = x\"no\"; then\n-    enable_c99=no; \n-  fi; \n+    enable_c99=no;\n+  fi;\n   AC_MSG_RESULT($enable_c99)\n \n   # Option parsed, now set things appropriately\n@@ -1783,24 +1784,24 @@ changequote(<<, >>)dnl\n <<  --enable-cheaders=MODEL       construct \"C\" header files for g++ [default=>>GLIBCPP_ENABLE_CHEADERS_DEFAULT],\n changequote([, ])\n   [case \"$enableval\" in\n-   c) \n-        enable_cheaders=c \n+   c)\n+        enable_cheaders=c\n         ;;\n-   c_std)  \n-        enable_cheaders=c_std \n+   c_std)\n+        enable_cheaders=c_std\n         ;;\n-   *)   AC_MSG_ERROR([Unknown argument to enable/disable \"C\" headers]) \n+   *)   AC_MSG_ERROR([Unknown argument to enable/disable \"C\" headers])\n         ;;\n   esac],\n   enable_cheaders=GLIBCPP_ENABLE_CHEADERS_DEFAULT)\n   AC_MSG_RESULT($enable_cheaders)\n \n   dnl Option parsed, now set things appropriately\n   case \"$enable_cheaders\" in\n-    c_std)   \n+    c_std)\n         C_INCLUDE_DIR='${glibcpp_srcdir}/include/c_std'\n         ;;\n-    c)   \n+    c)\n         C_INCLUDE_DIR='${glibcpp_srcdir}/include/c'\n         ;;\n   esac\n@@ -1878,8 +1879,8 @@ dnl Set up *_FLAGS and *FLAGS variables for all sundry Makefile.am's.\n dnl\n AC_DEFUN(GLIBCPP_EXPORT_FLAGS, [\n   # Optimization flags that are probably a good idea for thrill-seekers. Just\n-  # uncomment the lines below and make, everything else is ready to go... \n-  # OPTIMIZE_CXXFLAGS = -O3 -fstrict-aliasing -fvtable-gc \n+  # uncomment the lines below and make, everything else is ready to go...\n+  # OPTIMIZE_CXXFLAGS = -O3 -fstrict-aliasing -fvtable-gc\n   OPTIMIZE_CXXFLAGS=\n   AC_SUBST(OPTIMIZE_CXXFLAGS)\n \n@@ -1955,7 +1956,7 @@ fi\n \n # Calculate glibcpp_toolexecdir, glibcpp_toolexeclibdir\n # Install a library built with a cross compiler in tooldir, not libdir.\n-if test x\"$glibcpp_toolexecdir\" = x\"no\"; then \n+if test x\"$glibcpp_toolexecdir\" = x\"no\"; then\n   if test -n \"$with_cross_host\" &&\n      test x\"$with_cross_host\" != x\"no\"; then\n     glibcpp_toolexecdir='$(exec_prefix)/$(target_alias)'\n@@ -2091,8 +2092,8 @@ AC_DEFUN(GLIBCPP_CHECK_SETRLIMIT, [\n       AC_TRY_COMPILE([#include <unistd.h>\n                   #include <sys/time.h>\n                   #include <sys/resource.h>\n-\t\t     ], \n-                     [ struct rlimit r; setrlimit(0, &r);], \n+\t\t     ],\n+                     [ struct rlimit r; setrlimit(0, &r);],\n                      [ac_setrlimit=yes], [ac_setrlimit=no])\n     ])\n   fi\n@@ -2220,9 +2221,9 @@ changequote([, ])dnl\n enable_symvers=GLIBCPP_ENABLE_SYMVERS_DEFAULT)dnl\n \n # If we never went through the GLIBCPP_CHECK_LINKER_FEATURES macro, then we\n-# don't know enough about $LD to do tricks... \n-if test x$enable_shared = xno || \n-\ttest \"x$LD\" = x || \n+# don't know enough about $LD to do tricks...\n+if test x$enable_shared = xno ||\n+\ttest \"x$LD\" = x ||\n \ttest x$glibcpp_gnu_ld_version = x; then\n   enable_symvers=no\n fi\n@@ -2242,7 +2243,7 @@ fi\n glibcpp_min_gnu_ld_version=21200\n \n # Check to see if unspecified \"yes\" value can win, given results\n-# above.  \n+# above.\n if test $enable_symvers = yes ; then\n   if test $with_gnu_ld = yes &&\n     test $glibcpp_shared_libgcc = yes ;\n@@ -2279,7 +2280,7 @@ case $enable_symvers in\n       ;;\n   gnu)\n       SYMVER_MAP=config/linker-map.gnu\n-      AC_DEFINE(_GLIBCPP_SYMVER)\t\n+      AC_DEFINE(_GLIBCPP_SYMVER)\n       ;;\n esac\n "}, {"sha": "3cb88f719008cd3a1d5e067b5788160bdfcad577", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 151, "deletions": 118, "changes": 269, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37bc6ca2649bfa025cede18d9b4a3b3fbc6a4c35/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37bc6ca2649bfa025cede18d9b4a3b3fbc6a4c35/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=37bc6ca2649bfa025cede18d9b4a3b3fbc6a4c35", "patch": "@@ -1,4 +1,4 @@\n-dnl aclocal.m4 generated automatically by aclocal 1.4-p5\n+dnl aclocal.m4 generated automatically by aclocal 1.4-p6\n \n dnl Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n dnl This file is free software; the Free Software Foundation\n@@ -219,8 +219,8 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n \n dnl\n dnl Check to see if g++ can compile this library, and if so, if any version-\n-dnl specific precautions need to be taken. \n-dnl \n+dnl specific precautions need to be taken.\n+dnl\n dnl GLIBCPP_CHECK_COMPILER_VERSION\n AC_DEFUN(GLIBCPP_CHECK_COMPILER_VERSION, [\n if test ! -f stamp-sanity-compiler; then\n@@ -345,14 +345,14 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n \n     # Check for -Wl,--gc-sections\n     # XXX This test is broken at the moment, as symbols required for\n-    # linking are now in libsupc++ (not built yet.....). In addition, \n+    # linking are now in libsupc++ (not built yet.....). In addition,\n     # this test has cored on solaris in the past. In addition,\n     # --gc-sections doesn't really work at the moment (keeps on discarding\n     # used sections, first .eh_frame and now some of the glibc sections for\n     # iconv). Bzzzzt. Thanks for playing, maybe next time.\n     AC_MSG_CHECKING([for ld that supports -Wl,--gc-sections])\n     AC_TRY_RUN([\n-     int main(void) \n+     int main(void)\n      {\n        try { throw 1; }\n        catch (...) { };\n@@ -397,8 +397,8 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_1, [\n \t\t      #ifdef HAVE_IEEEFP_H\n \t\t      #include <ieeefp.h>\n \t\t      #endif\n-\t\t     ], \n-                     [ $1(0);], \n+\t\t     ],\n+                     [ $1(0);],\n                      [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n@@ -422,19 +422,19 @@ dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1\n AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1, [\n   GLIBCPP_CHECK_MATH_DECL_1($1)\n   if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n-    AC_CHECK_FUNCS($1)    \n+    AC_CHECK_FUNCS($1)\n   else\n     GLIBCPP_CHECK_MATH_DECL_1(_$1)\n     if test x$glibcpp_cv_func__$1_use = x\"yes\"; then\n-      AC_CHECK_FUNCS(_$1)    \n+      AC_CHECK_FUNCS(_$1)\n     fi\n   fi\n ])\n \n \n dnl\n dnl Like GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1, but does a bunch of\n-dnl of functions at once.  It's an all-or-nothing check -- either \n+dnl of functions at once.  It's an all-or-nothing check -- either\n dnl HAVE_XYZ is defined for each of the functions, or for none of them.\n dnl Doing it this way saves significant configure time.\n AC_DEFUN(GLIBCPP_CHECK_MATH_DECLS_AND_LINKAGES_1, [\n@@ -465,8 +465,8 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_2, [\n     AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n-      AC_TRY_COMPILE([#include <math.h>], \n-                     [ $1(0, 0);], \n+      AC_TRY_COMPILE([#include <math.h>],\n+                     [ $1(0, 0);],\n                      [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n@@ -489,11 +489,11 @@ dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2\n AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2, [\n   GLIBCPP_CHECK_MATH_DECL_2($1)\n   if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n-    AC_CHECK_FUNCS($1)    \n+    AC_CHECK_FUNCS($1)\n   else\n     GLIBCPP_CHECK_MATH_DECL_2(_$1)\n     if test x$glibcpp_cv_func__$1_use = x\"yes\"; then\n-      AC_CHECK_FUNCS(_$1)    \n+      AC_CHECK_FUNCS(_$1)\n     fi\n   fi\n ])\n@@ -511,8 +511,8 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_3, [\n     AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n-      AC_TRY_COMPILE([#include <math.h>], \n-                     [ $1(0, 0, 0);], \n+      AC_TRY_COMPILE([#include <math.h>],\n+                     [ $1(0, 0, 0);],\n                      [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n@@ -535,11 +535,11 @@ dnl GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3\n AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3, [\n   GLIBCPP_CHECK_MATH_DECL_3($1)\n   if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n-    AC_CHECK_FUNCS($1)    \n+    AC_CHECK_FUNCS($1)\n   else\n     GLIBCPP_CHECK_MATH_DECL_3(_$1)\n     if test x$glibcpp_cv_func__$1_use = x\"yes\"; then\n-      AC_CHECK_FUNCS(_$1)    \n+      AC_CHECK_FUNCS(_$1)\n     fi\n   fi\n ])\n@@ -561,15 +561,15 @@ AC_DEFUN(GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2, [\n     AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n-      AC_TRY_COMPILE([#include <stdlib.h>], \n-                     [ $1(0, 0);], \n+      AC_TRY_COMPILE([#include <stdlib.h>],\n+                     [ $1(0, 0);],\n                      [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n   fi\n   AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n   if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n-    AC_CHECK_FUNCS($1)    \n+    AC_CHECK_FUNCS($1)\n   fi\n ])\n \n@@ -590,15 +590,15 @@ AC_DEFUN(GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_3, [\n     AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n-      AC_TRY_COMPILE([#include <stdlib.h>], \n-                     [ $1(0, 0, 0);], \n+      AC_TRY_COMPILE([#include <stdlib.h>],\n+                     [ $1(0, 0, 0);],\n                      [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n   fi\n   AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n   if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n-    AC_CHECK_FUNCS($1)    \n+    AC_CHECK_FUNCS($1)\n   fi\n ])\n \n@@ -618,20 +618,20 @@ AC_DEFUN(GLIBCPP_CHECK_UNISTD_DECL_AND_LINKAGE_1, [\n     AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n-      AC_TRY_COMPILE([#include <unistd.h>], \n-                     [ $1(0);], \n+      AC_TRY_COMPILE([#include <unistd.h>],\n+                     [ $1(0);],\n                      [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n   fi\n   AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n   if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n-    AC_CHECK_FUNCS($1)    \n+    AC_CHECK_FUNCS($1)\n   fi\n ])\n \n dnl\n-dnl Because the builtins are picky picky picky about the arguments they take, \n+dnl Because the builtins are picky picky picky about the arguments they take,\n dnl do an explict linkage tests here.\n dnl Check to see if the (math function) argument passed is\n dnl 1) declared when using the c++ compiler\n@@ -650,8 +650,8 @@ AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1, [\n     AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n       AC_LANG_SAVE\n       AC_LANG_CPLUSPLUS\n-      AC_TRY_COMPILE([#include <math.h>], \n-                     [ $1(0);], \n+      AC_TRY_COMPILE([#include <math.h>],\n+                     [ $1(0);],\n                      [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n       AC_LANG_RESTORE\n     ])\n@@ -661,8 +661,8 @@ AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1, [\n     AC_MSG_CHECKING([for $1 linkage])\n     if test x${glibcpp_cv_func_$1_link+set} != xset; then\n       AC_CACHE_VAL(glibcpp_cv_func_$1_link, [\n-        AC_TRY_LINK([#include <math.h>], \n-                    [ $1(0);], \n+        AC_TRY_LINK([#include <math.h>],\n+                    [ $1(0);],\n                     [glibcpp_cv_func_$1_link=yes], [glibcpp_cv_func_$1_link=no])\n       ])\n     fi\n@@ -696,7 +696,7 @@ dnl\n dnl GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT, [\n   dnl Test for builtin math functions.\n-  dnl These are made in gcc/c-common.c \n+  dnl These are made in gcc/c-common.c\n   GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_abs)\n   GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fabsf)\n   GLIBCPP_CHECK_BUILTIN_MATH_DECL_AND_LINKAGE_1(__builtin_fabs)\n@@ -742,7 +742,7 @@ AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT, [\n \n dnl\n dnl Check to see what the underlying c library is like\n-dnl These checks need to do two things: \n+dnl These checks need to do two things:\n dnl 1) make sure the name is declared when using the c++ compiler\n dnl 2) make sure the name has \"C\" linkage\n dnl This might seem like overkill but experience has shown that it's not...\n@@ -766,7 +766,7 @@ AC_DEFUN(GLIBCPP_CHECK_STDLIB_SUPPORT, [\n \n dnl\n dnl Check to see what the underlying c library is like\n-dnl These checks need to do two things: \n+dnl These checks need to do two things:\n dnl 1) make sure the name is declared when using the c++ compiler\n dnl 2) make sure the name has \"C\" linkage\n dnl This might seem like overkill but experience has shown that it's not...\n@@ -780,13 +780,13 @@ AC_DEFUN(GLIBCPP_CHECK_UNISTD_SUPPORT, [\n   CXXFLAGS='-fno-builtins -D_GNU_SOURCE'\n \n   GLIBCPP_CHECK_UNISTD_DECL_AND_LINKAGE_1(isatty)\n-  \n+\n   CXXFLAGS=\"$ac_save_CXXFLAGS\"\n ])\n \n dnl\n dnl Check to see what the underlying c library or math library is like.\n-dnl These checks need to do two things: \n+dnl These checks need to do two things:\n dnl 1) make sure the name is declared when using the c++ compiler\n dnl 2) make sure the name has \"C\" linkage\n dnl This might seem like overkill but experience has shown that it's not...\n@@ -898,7 +898,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n \n \n dnl\n-dnl Check to see if there is native support for complex \n+dnl Check to see if there is native support for complex\n dnl\n dnl Don't compile bits in math/* if native support exits.\n dnl\n@@ -914,7 +914,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   AC_CHECK_FUNCS([__signbit], , [LIBMATHOBJS=\"$LIBMATHOBJS signbit.lo\"])\n   AC_CHECK_FUNCS([__signbitf], , [LIBMATHOBJS=\"$LIBMATHOBJS signbitf.lo\"])\n \n-  dnl Compile the long double complex functions only if the function \n+  dnl Compile the long double complex functions only if the function\n   dnl provides the non-complex long double functions that are needed.\n   dnl Currently this includes copysignl, which should be\n   dnl cached from the GLIBCPP_CHECK_MATH_SUPPORT macro, above.\n@@ -933,7 +933,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n dnl Check to see what architecture and operating system we are compiling\n dnl for.  Also, if architecture- or OS-specific flags are required for\n dnl compilation, pick them up here.\n-dnl \n+dnl\n dnl GLIBCPP_CHECK_TARGET\n AC_DEFUN(GLIBCPP_CHECK_TARGET, [\n   . [$]{glibcpp_basedir}/configure.target\n@@ -947,7 +947,7 @@ dnl Check to see if this target can enable the wchar_t parts of libstdc++.\n dnl If --disable-c-mbchar was given, no wchar_t stuff is enabled.  (This\n dnl must have been previously checked.)\n dnl\n-dnl Define _GLIBCPP_USE_WCHAR_T if all the bits are found \n+dnl Define _GLIBCPP_USE_WCHAR_T if all the bits are found\n dnl Define HAVE_MBSTATE_T if mbstate_t is not in wchar.h\n dnl\n dnl GLIBCPP_CHECK_WCHAR_T_SUPPORT\n@@ -957,7 +957,7 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n   dnl others even if wchar_t support is not on.\n   AC_MSG_CHECKING([for mbstate_t])\n   AC_TRY_COMPILE([#include <wchar.h>],\n-  [mbstate_t teststate;], \n+  [mbstate_t teststate;],\n   have_mbstate_t=yes, have_mbstate_t=no)\n   AC_MSG_RESULT($have_mbstate_t)\n   if test x\"$have_mbstate_t\" = xyes; then\n@@ -967,20 +967,20 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n   dnl Sanity check for existence of ISO C99 headers for extended encoding.\n   AC_CHECK_HEADERS(wchar.h, ac_has_wchar_h=yes, ac_has_wchar_h=no)\n   AC_CHECK_HEADERS(wctype.h, ac_has_wctype_h=yes, ac_has_wctype_h=no)\n-  \n+\n   dnl Only continue checking if the ISO C99 headers exist and support is on.\n   if test x\"$ac_has_wchar_h\" = xyes &&\n      test x\"$ac_has_wctype_h\" = xyes &&\n      test x\"$enable_c_mbchar\" != xno; then\n-      \n+\n     dnl Test wchar.h for WCHAR_MIN, WCHAR_MAX, which is needed before\n     dnl numeric_limits can instantiate type_traits<wchar_t>\n     AC_MSG_CHECKING([for WCHAR_MIN and WCHAR_MAX])\n     AC_TRY_COMPILE([#include <wchar.h>],\n-    [int i = WCHAR_MIN; int j = WCHAR_MAX;], \n+    [int i = WCHAR_MIN; int j = WCHAR_MAX;],\n     has_wchar_minmax=yes, has_wchar_minmax=no)\n     AC_MSG_RESULT($has_wchar_minmax)\n-    \n+\n     dnl Test wchar.h for WEOF, which is what we use to determine whether\n     dnl to specialize for char_traits<wchar_t> or not.\n     AC_MSG_CHECKING([for WEOF])\n@@ -990,12 +990,12 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n     [wint_t i = WEOF;],\n     has_weof=yes, has_weof=no)\n     AC_MSG_RESULT($has_weof)\n-  \n+\n     dnl Tests for wide character functions used in char_traits<wchar_t>.\n     ac_wfuncs=yes\n     AC_CHECK_FUNCS(wcslen wmemchr wmemcmp wmemcpy wmemmove wmemset,, \\\n     ac_wfuncs=no)\n-  \n+\n     dnl Checks for names injected into std:: by the c_std headers.\n     AC_CHECK_FUNCS(btowc wctob fgetwc fgetwc fgetws fputwc fputws fwide \\\n     fwprintf fwscanf swprintf swscanf vfwprintf vfwscanf vswprintf vswscanf \\\n@@ -1014,8 +1014,8 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n       ac_isoC99_wchar_t=no\n     fi\n     AC_MSG_RESULT($ac_isoC99_wchar_t)\n-  \n-    dnl Use iconv for wchar_t to char conversions. As such, check for \n+\n+    dnl Use iconv for wchar_t to char conversions. As such, check for\n     dnl X/Open Portability Guide, version 2 features (XPG2).\n     AC_CHECK_HEADER(iconv.h, ac_has_iconv_h=yes, ac_has_iconv_h=no)\n     AC_CHECK_HEADER(langinfo.h, ac_has_langinfo_h=yes, ac_has_langinfo_h=no)\n@@ -1027,7 +1027,7 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n \n     AC_CHECK_FUNCS(iconv_open iconv_close iconv nl_langinfo, \\\n     ac_XPG2funcs=yes, ac_XPG2funcs=no)\n-  \n+\n     LIBS=\"$ac_save_LIBS\"\n \n     AC_MSG_CHECKING([for XPG2 wchar_t support])\n@@ -1039,7 +1039,7 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n       ac_XPG2_wchar_t=no\n     fi\n     AC_MSG_RESULT($ac_XPG2_wchar_t)\n-  \n+\n     dnl At the moment, only enable wchar_t specializations if all the\n     dnl above support is present.\n     AC_MSG_CHECKING([for enabled wchar_t specializations])\n@@ -1051,7 +1051,7 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n       AC_MSG_RESULT(\"no\")\n     fi\n   else\n-    dnl Wide characters disabled by the user. \n+    dnl Wide characters disabled by the user.\n     AC_MSG_WARN([wchar_t support disabled.])\n   fi\n ])\n@@ -1062,11 +1062,11 @@ dnl Check to see if debugging libraries are to be built.\n dnl\n dnl GLIBCPP_ENABLE_DEBUG\n dnl\n-dnl --enable-debug \n+dnl --enable-debug\n dnl builds a separate set of debugging libraries in addition to the\n dnl normal (shared, static) libstdc++ binaries.\n dnl\n-dnl --disable-debug \n+dnl --disable-debug\n dnl builds only one (non-debug) version of libstdc++.\n dnl\n dnl --enable-debug-flags=FLAGS\n@@ -1089,16 +1089,16 @@ changequote([, ])dnl\n enable_debug=GLIBCPP_ENABLE_DEBUG_DEFAULT)dnl\n AC_MSG_CHECKING([for additional debug build])\n AC_MSG_RESULT($enable_debug)\n-AM_CONDITIONAL(GLIBCPP_BUILD_DEBUG, test \"$enable_debug\" = yes)\t\n+AM_CONDITIONAL(GLIBCPP_BUILD_DEBUG, test \"$enable_debug\" = yes)\n ])\n \n \n dnl Check for explicit debug flags.\n dnl\n dnl GLIBCPP_ENABLE_DEBUG_FLAGS\n dnl\n-dnl --enable-debug-flags='-O1' \n-dnl is a general method for passing flags to be used when \n+dnl --enable-debug-flags='-O1'\n+dnl is a general method for passing flags to be used when\n dnl building debug libraries with --enable-debug.\n dnl\n dnl --disable-debug-flags does nothing.\n@@ -1109,7 +1109,7 @@ AC_DEFUN(GLIBCPP_ENABLE_DEBUG_FLAGS, [dnl\n define([GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT], ifelse($1,,, $1))dnl\n AC_ARG_ENABLE(debug_flags,\n changequote(<<, >>)dnl\n-<<  --enable-debug-flags=FLAGS    pass compiler FLAGS when building debug \n+<<  --enable-debug-flags=FLAGS    pass compiler FLAGS when building debug\n \t                library;[default=>>GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT],\n changequote([, ])dnl\n [case \"${enableval}\" in\n@@ -1121,15 +1121,15 @@ enable_debug_flags=GLIBCPP_ENABLE_DEBUG_FLAGS_DEFAULT)dnl\n \n dnl Option parsed, now set things appropriately\n case x\"$enable_debug\" in\n-    xyes) \n+    xyes)\n         case \"$enable_debug_flags\" in\n-\t  none) \n+\t  none)\n             DEBUG_FLAGS=\"-g3 -O0\";;\n \t  -*) #valid input\n \t    DEBUG_FLAGS=\"${enableval}\"\n         esac\n-        ;; \n-    xno)   \n+        ;;\n+    xno)\n         DEBUG_FLAGS=\"\"\n         ;;\n esac\n@@ -1157,21 +1157,21 @@ dnl       If \"default flags\" is an empty string (or \"none\"), the effect is\n dnl       the same as --disable or --enable=no.\n AC_DEFUN(GLIBCPP_ENABLE_CXX_FLAGS, [dnl\n define([GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT], ifelse($1,,, $1))dnl\n+AC_MSG_CHECKING([for extra compiler flags for building])\n AC_ARG_ENABLE(cxx_flags,\n changequote(<<, >>)dnl\n <<  --enable-cxx-flags=FLAGS      pass compiler FLAGS when building library;\n-                                [default=>>GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT],\n+                                  [default=>>GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT],\n changequote([, ])dnl\n-enable_cxx_flags='GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT')\n-\n-case \"x$enable_cxx_flags\" in\n- xyes)   \n-        AC_MSG_ERROR([--enable-cxx-flags needs compiler flags as arguments]) ;;\n- xno | xnone | x)  \n-        enable_cxx_flags='' ;;\n- *)      \n-        enable_cxx_flags=\"$enableval\" ;;\n-esac\t\n+[case \"x$enable_cxx_flags\" in\n+  xyes)\n+    AC_MSG_ERROR([--enable-cxx-flags needs compiler flags as arguments]) ;;\n+  xno | xnone | x)\n+    enable_cxx_flags='' ;;\n+  *)\n+    enable_cxx_flags=\"$enableval\" ;;\n+esac],\n+enable_cxx_flags=GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT)\n \n dnl Run through flags (either default or command-line) and set anything\n dnl extra (e.g., #defines) that must accompany particular g++ options.\n@@ -1186,6 +1186,7 @@ if test -n \"$enable_cxx_flags\"; then\n   done\n fi\n EXTRA_CXX_FLAGS=\"$enable_cxx_flags\"\n+AC_MSG_RESULT($EXTRA_CXX_FLAGS)\n AC_SUBST(EXTRA_CXX_FLAGS)\n ])\n \n@@ -1196,15 +1197,15 @@ dnl\n dnl GLIBCPP_ENABLE_CLOCALE\n dnl --enable-clocale=gnu sets config/locale/c_locale_gnu.cc and friends\n dnl --enable-clocale=generic sets config/locale/c_locale_generic.cc and friends\n-dnl \n+dnl\n dnl default is generic\n dnl\n AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n   AC_MSG_CHECKING([for clocale to use])\n   AC_ARG_ENABLE(clocale,\n-  [  --enable-clocale        enable model for target locale package. \n+  [  --enable-clocale        enable model for target locale package.\n   --enable-clocale=MODEL  use MODEL target-speific locale package. [default=generic]\n-  ], \n+  ],\n   if test x$enable_clocale = xno; then\n      enable_clocale=no\n   fi,\n@@ -1219,7 +1220,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       xlinux* | xgnu*)\n \tAC_EGREP_CPP([_GLIBCPP_ok], [\n         #include <features.h>\n-        #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 2) \n+        #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 2)\n           _GLIBCPP_ok\n         #endif\n         ], enable_clocale_flag=gnu, enable_clocale_flag=generic)\n@@ -1249,7 +1250,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n   \t    j = __strcoll_l(__one, __two, loc_dup);\n   \t    return 0;\n \t  }\n-\t  ], \n+\t  ],\n \t  [enable_clocale_flag=gnu],[enable_clocale_flag=generic],\n \t  [enable_clocale_flag=generic])\n   \tfi\n@@ -1368,15 +1369,15 @@ dnl Check for which I/O library to use:  libio, or something specific.\n dnl\n dnl GLIBCPP_ENABLE_CSTDIO\n dnl --enable-cstdio=libio sets config/io/c_io_libio.h and friends\n-dnl \n+dnl\n dnl default is stdio\n dnl\n AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   AC_MSG_CHECKING([for cstdio to use])\n   AC_ARG_ENABLE(cstdio,\n-  [  --enable-cstdio         enable stdio for target io package. \n+  [  --enable-cstdio         enable stdio for target io package.\n   --enable-cstdio=LIB     use LIB target-speific io package. [default=stdio]\n-  ], \n+  ],\n   if test x$enable_cstdio = xno; then\n      enable_cstdio=stdio\n   fi,\n@@ -1396,15 +1397,15 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n       AC_CHECK_HEADER(libio.h,  has_libio=yes, has_libio=no)\n \n       # Need to check and see what version of glibc is being used. If\n-      # it's not glibc-2.2 or higher, then we'll need to go ahead and \n+      # it's not glibc-2.2 or higher, then we'll need to go ahead and\n       # compile most of libio for linux systems.\n       if test x$has_libio = x\"yes\"; then\n         case \"$target\" in\n           *-*-linux*)\n               AC_MSG_CHECKING([for glibc version >= 2.2])\n               AC_EGREP_CPP([ok], [\n             #include <features.h>\n-              #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 2) \n+              #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 2)\n                     ok\n               #endif\n               ], glibc_satisfactory=yes, glibc_satisfactory=no)\n@@ -1414,11 +1415,11 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n \n         # XXX at the moment, admit defeat and force the recompilation\n         # XXX of glibc even on glibc-2.2 systems, because libio is not synched.\n-        glibc_satisfactory=no        \n+        glibc_satisfactory=no\n \n         if test x$glibc_satisfactory = x\"yes\"; then\n            need_libio=no\n-           need_wlibio=no        \n+           need_wlibio=no\n         else\n            need_libio=yes\n            # bkoz XXX need to add checks to enable this\n@@ -1542,7 +1543,7 @@ void foo()\n   bar();\n }\n EOF\n-   old_CXXFLAGS=\"$CXXFLAGS\"  \n+   old_CXXFLAGS=\"$CXXFLAGS\"\n    CXXFLAGS=-S\n    if AC_TRY_EVAL(ac_compile); then\n      if grep _Unwind_SjLj_Resume conftest.s >/dev/null 2>&1 ; then\n@@ -1621,7 +1622,7 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n    *)   AC_MSG_ERROR([Unknown argument to enable/disable C99]) ;;\n    esac],\n   enable_c99=GLIBCPP_ENABLE_C99_DEFAULT)dnl\n- \n+\n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n \n@@ -1680,8 +1681,8 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n   ac_c99_stdlib=yes;\n   AC_MSG_CHECKING([for lldiv_t declaration])\n   AC_CACHE_VAL(ac_c99_lldiv_t, [\n-  AC_TRY_COMPILE([#include <stdlib.h>], \n-                   [ lldiv_t mydivt;], \n+  AC_TRY_COMPILE([#include <stdlib.h>],\n+                   [ lldiv_t mydivt;],\n                    [ac_c99_lldiv_t=yes], [ac_c99_lldiv_t=no])\n   ])\n   AC_MSG_RESULT($ac_c99_lldiv_t)\n@@ -1696,19 +1697,19 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n   AC_TRY_COMPILE([#include <stdlib.h>], [atoll(\"10\");],, [ac_c99_stdlib=no])\n   AC_TRY_COMPILE([#include <stdlib.h>], [_Exit(0);],, [ac_c99_stdlib=no])\n   if test x\"$ac_c99_lldiv_t\" = x\"no\"; then\n-    ac_c99_stdlib=no; \n-  fi; \n+    ac_c99_stdlib=no;\n+  fi;\n   AC_MSG_RESULT($ac_c99_stdlib)\n \n   # Check for the existence of <wchar.h> functions used if C99 is enabled.\n   # XXX the wchar.h checks should be rolled into the general C99 bits.\n   ac_c99_wchar=yes;\n   AC_MSG_CHECKING([for additional ISO C99 support in <wchar.h>])\n-  AC_TRY_COMPILE([#include <wchar.h>], \n+  AC_TRY_COMPILE([#include <wchar.h>],\n \t         [wcstold(L\"10.0\", NULL);],, [ac_c99_wchar=no])\n-  AC_TRY_COMPILE([#include <wchar.h>], \n+  AC_TRY_COMPILE([#include <wchar.h>],\n \t         [wcstoll(L\"10\", NULL, 10);],, [ac_c99_wchar=no])\n-  AC_TRY_COMPILE([#include <wchar.h>], \n+  AC_TRY_COMPILE([#include <wchar.h>],\n \t         [wcstoull(L\"10\", NULL, 10);],, [ac_c99_wchar=no])\n   AC_MSG_RESULT($ac_c99_wchar)\n \n@@ -1717,8 +1718,8 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n      test x\"$ac_c99_stdio\" = x\"no\" ||\n      test x\"$ac_c99_stdlib\" = x\"no\" ||\n      test x\"$ac_c99_wchar\" = x\"no\"; then\n-    enable_c99=no; \n-  fi; \n+    enable_c99=no;\n+  fi;\n   AC_MSG_RESULT($enable_c99)\n \n   # Option parsed, now set things appropriately\n@@ -1795,24 +1796,24 @@ changequote(<<, >>)dnl\n <<  --enable-cheaders=MODEL       construct \"C\" header files for g++ [default=>>GLIBCPP_ENABLE_CHEADERS_DEFAULT],\n changequote([, ])\n   [case \"$enableval\" in\n-   c) \n-        enable_cheaders=c \n+   c)\n+        enable_cheaders=c\n         ;;\n-   c_std)  \n-        enable_cheaders=c_std \n+   c_std)\n+        enable_cheaders=c_std\n         ;;\n-   *)   AC_MSG_ERROR([Unknown argument to enable/disable \"C\" headers]) \n+   *)   AC_MSG_ERROR([Unknown argument to enable/disable \"C\" headers])\n         ;;\n   esac],\n   enable_cheaders=GLIBCPP_ENABLE_CHEADERS_DEFAULT)\n   AC_MSG_RESULT($enable_cheaders)\n \n   dnl Option parsed, now set things appropriately\n   case \"$enable_cheaders\" in\n-    c_std)   \n+    c_std)\n         C_INCLUDE_DIR='${glibcpp_srcdir}/include/c_std'\n         ;;\n-    c)   \n+    c)\n         C_INCLUDE_DIR='${glibcpp_srcdir}/include/c'\n         ;;\n   esac\n@@ -1890,8 +1891,8 @@ dnl Set up *_FLAGS and *FLAGS variables for all sundry Makefile.am's.\n dnl\n AC_DEFUN(GLIBCPP_EXPORT_FLAGS, [\n   # Optimization flags that are probably a good idea for thrill-seekers. Just\n-  # uncomment the lines below and make, everything else is ready to go... \n-  # OPTIMIZE_CXXFLAGS = -O3 -fstrict-aliasing -fvtable-gc \n+  # uncomment the lines below and make, everything else is ready to go...\n+  # OPTIMIZE_CXXFLAGS = -O3 -fstrict-aliasing -fvtable-gc\n   OPTIMIZE_CXXFLAGS=\n   AC_SUBST(OPTIMIZE_CXXFLAGS)\n \n@@ -1967,7 +1968,7 @@ fi\n \n # Calculate glibcpp_toolexecdir, glibcpp_toolexeclibdir\n # Install a library built with a cross compiler in tooldir, not libdir.\n-if test x\"$glibcpp_toolexecdir\" = x\"no\"; then \n+if test x\"$glibcpp_toolexecdir\" = x\"no\"; then\n   if test -n \"$with_cross_host\" &&\n      test x\"$with_cross_host\" != x\"no\"; then\n     glibcpp_toolexecdir='$(exec_prefix)/$(target_alias)'\n@@ -2103,8 +2104,8 @@ AC_DEFUN(GLIBCPP_CHECK_SETRLIMIT, [\n       AC_TRY_COMPILE([#include <unistd.h>\n                   #include <sys/time.h>\n                   #include <sys/resource.h>\n-\t\t     ], \n-                     [ struct rlimit r; setrlimit(0, &r);], \n+\t\t     ],\n+                     [ struct rlimit r; setrlimit(0, &r);],\n                      [ac_setrlimit=yes], [ac_setrlimit=no])\n     ])\n   fi\n@@ -2232,9 +2233,9 @@ changequote([, ])dnl\n enable_symvers=GLIBCPP_ENABLE_SYMVERS_DEFAULT)dnl\n \n # If we never went through the GLIBCPP_CHECK_LINKER_FEATURES macro, then we\n-# don't know enough about $LD to do tricks... \n-if test x$enable_shared = xno || \n-\ttest \"x$LD\" = x || \n+# don't know enough about $LD to do tricks...\n+if test x$enable_shared = xno ||\n+\ttest \"x$LD\" = x ||\n \ttest x$glibcpp_gnu_ld_version = x; then\n   enable_symvers=no\n fi\n@@ -2254,7 +2255,7 @@ fi\n glibcpp_min_gnu_ld_version=21200\n \n # Check to see if unspecified \"yes\" value can win, given results\n-# above.  \n+# above.\n if test $enable_symvers = yes ; then\n   if test $with_gnu_ld = yes &&\n     test $glibcpp_shared_libgcc = yes ;\n@@ -2291,7 +2292,7 @@ case $enable_symvers in\n       ;;\n   gnu)\n       SYMVER_MAP=config/linker-map.gnu\n-      AC_DEFINE(_GLIBCPP_SYMVER)\t\n+      AC_DEFINE(_GLIBCPP_SYMVER)\n       ;;\n esac\n \n@@ -2302,14 +2303,16 @@ AC_MSG_RESULT($enable_symvers)\n ])\n \n \n-# isc-posix.m4 serial 1 (gettext-0.10.40)\n+# isc-posix.m4 serial 2 (gettext-0.11.2)\n dnl Copyright (C) 1995-2002 Free Software Foundation, Inc.\n dnl This file is free software, distributed under the terms of the GNU\n dnl General Public License.  As a special exception to the GNU General\n dnl Public License, this file may be distributed as part of a program\n dnl that contains a configuration script generated by Autoconf, under\n dnl the same distribution terms as the rest of that program.\n \n+# This file is not needed with autoconf-2.53 and newer.  Remove it in 2005.\n+\n # This test replaces the one in autoconf.\n # Currently this macro should have the same name as the autoconf macro\n # because gettext's gettext.m4 (distributed in the automake package)\n@@ -2370,7 +2373,8 @@ dnl Usage:\n dnl AM_INIT_AUTOMAKE(package,version, [no-define])\n \n AC_DEFUN([AM_INIT_AUTOMAKE],\n-[AC_REQUIRE([AC_PROG_INSTALL])\n+[AC_REQUIRE([AM_SET_CURRENT_AUTOMAKE_VERSION])dnl\n+AC_REQUIRE([AC_PROG_INSTALL])\n PACKAGE=[$1]\n AC_SUBST(PACKAGE)\n VERSION=[$2]\n@@ -2386,13 +2390,42 @@ AC_REQUIRE([AM_SANITY_CHECK])\n AC_REQUIRE([AC_ARG_PROGRAM])\n dnl FIXME This is truly gross.\n missing_dir=`cd $ac_aux_dir && pwd`\n-AM_MISSING_PROG(ACLOCAL, aclocal, $missing_dir)\n+AM_MISSING_PROG(ACLOCAL, aclocal-${am__api_version}, $missing_dir)\n AM_MISSING_PROG(AUTOCONF, autoconf, $missing_dir)\n-AM_MISSING_PROG(AUTOMAKE, automake, $missing_dir)\n+AM_MISSING_PROG(AUTOMAKE, automake-${am__api_version}, $missing_dir)\n AM_MISSING_PROG(AUTOHEADER, autoheader, $missing_dir)\n AM_MISSING_PROG(MAKEINFO, makeinfo, $missing_dir)\n AC_REQUIRE([AC_PROG_MAKE_SET])])\n \n+# Copyright 2002  Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n+\n+# AM_AUTOMAKE_VERSION(VERSION)\n+# ----------------------------\n+# Automake X.Y traces this macro to ensure aclocal.m4 has been\n+# generated from the m4 files accompanying Automake X.Y.\n+AC_DEFUN([AM_AUTOMAKE_VERSION],[am__api_version=\"1.4\"])\n+\n+# AM_SET_CURRENT_AUTOMAKE_VERSION\n+# -------------------------------\n+# Call AM_AUTOMAKE_VERSION so it can be traced.\n+# This function is AC_REQUIREd by AC_INIT_AUTOMAKE.\n+AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],\n+\t [AM_AUTOMAKE_VERSION([1.4-p6])])\n+\n #\n # Check to make sure that the build environment is sane.\n #"}, {"sha": "42cc59c8246b5741652fb5e9e48d14be0e3f5578", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1440, "deletions": 1449, "changes": 2889, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37bc6ca2649bfa025cede18d9b4a3b3fbc6a4c35/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37bc6ca2649bfa025cede18d9b4a3b3fbc6a4c35/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=37bc6ca2649bfa025cede18d9b4a3b3fbc6a4c35"}]}