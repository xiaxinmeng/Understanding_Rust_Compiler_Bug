{"sha": "8a5ee94a082b3d485b5cf7acc2b40b26cccb129f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE1ZWU5NGEwODJiM2Q0ODViNWNmN2FjYzJiNDBiMjZjY2NiMTI5Zg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-11-16T16:12:36Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-11-16T16:12:36Z"}, "message": "PR tree-optimization/82588 - missing -Warray-bounds on a excessively large index\n\nPR tree-optimization/82588 - missing -Warray-bounds on a excessively large index\nPR tree-optimization/82583 - missing -Warray-bounds on out-of-bounds inner indic\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/82588\n\tPR tree-optimization/82583\n\t* tree-vrp.c (check_array_ref): Handle flexible array members,\n\tstring literals, and inner indices.\n\t(search_for_addr_array): Add detail to diagnostics.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/82588\n\tPR tree-optimization/82583\n\t* c-c++-common/Warray-bounds.c: New test.\n\t* gcc.dg/Warray-bounds-11.c: Adjust.\n\t* gcc.dg/Warray-bounds-22.c: New test.\n\nFrom-SVN: r254830", "tree": {"sha": "08a6c6319b08277f262d9f9a882dfbaa10a55ede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08a6c6319b08277f262d9f9a882dfbaa10a55ede"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a5ee94a082b3d485b5cf7acc2b40b26cccb129f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5ee94a082b3d485b5cf7acc2b40b26cccb129f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a5ee94a082b3d485b5cf7acc2b40b26cccb129f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5ee94a082b3d485b5cf7acc2b40b26cccb129f/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "79cefe9d7d04cb9634ebfca6dec5f7c22c1104e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79cefe9d7d04cb9634ebfca6dec5f7c22c1104e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79cefe9d7d04cb9634ebfca6dec5f7c22c1104e3"}], "stats": {"total": 453, "additions": 428, "deletions": 25}, "files": [{"sha": "f6e0f181ccf0a856b506f14dadeb51dc99d20835", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5ee94a082b3d485b5cf7acc2b40b26cccb129f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5ee94a082b3d485b5cf7acc2b40b26cccb129f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a5ee94a082b3d485b5cf7acc2b40b26cccb129f", "patch": "@@ -1,3 +1,11 @@\n+2017-11-16  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/82588\n+\tPR tree-optimization/82583\n+\t* tree-vrp.c (check_array_ref): Handle flexible array members,\n+\tstring literals, and inner indices.\n+\t(search_for_addr_array): Add detail to diagnostics.\n+\n 2017-11-16  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/82836"}, {"sha": "30082bf182183735b8ba845efdcd1975ada4c639", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5ee94a082b3d485b5cf7acc2b40b26cccb129f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5ee94a082b3d485b5cf7acc2b40b26cccb129f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a5ee94a082b3d485b5cf7acc2b40b26cccb129f", "patch": "@@ -1,3 +1,11 @@\n+2017-11-16  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/82588\n+\tPR tree-optimization/82583\n+\t* c-c++-common/Warray-bounds.c: New test.\n+\t* gcc.dg/Warray-bounds-11.c: Adjust.\n+\t* gcc.dg/Warray-bounds-22.c: New test.\n+\n 2017-11-16  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/82836"}, {"sha": "bea36fb04b78e6bc37e829313f030333eb1dcf0d", "filename": "gcc/testsuite/c-c++-common/Warray-bounds.c", "status": "added", "additions": 259, "deletions": 0, "changes": 259, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5ee94a082b3d485b5cf7acc2b40b26cccb129f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5ee94a082b3d485b5cf7acc2b40b26cccb129f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds.c?ref=8a5ee94a082b3d485b5cf7acc2b40b26cccb129f", "patch": "@@ -0,0 +1,259 @@\n+/* PR tree-optimization/82588 - missing -Warray-bounds on an excessively\n+   large index\n+   { dg-do compile }\n+   { dg-require-effective-target alloca }\n+   { dg-options \"-O2 -Warray-bounds -ftrack-macro-expansion=0\" }  */\n+\n+#define SIZE_MAX  __SIZE_MAX__\n+#define DIFF_MAX  __PTRDIFF_MAX__\n+#define DIFF_MIN  (-DIFF_MAX - 1)\n+\n+#define offsetof(T, m)   __builtin_offsetof (T, m)\n+\n+typedef __PTRDIFF_TYPE__ ssize_t;\n+typedef __SIZE_TYPE__    size_t;\n+\n+extern ssize_t signed_value (void)\n+{\n+  extern volatile ssize_t signed_value_source;\n+  return signed_value_source;\n+}\n+\n+extern size_t unsigned_value (void)\n+{\n+  extern volatile size_t unsigned_value_source;\n+  return unsigned_value_source;\n+}\n+\n+ssize_t signed_range (ssize_t min, ssize_t max)\n+{\n+  ssize_t val = signed_value ();\n+  return val < min || max < val ? min : val;\n+}\n+\n+typedef struct AX { int n; char ax[]; } AX;\n+\n+typedef struct A1 { int i; char a1[1]; } A1;\n+typedef struct B { int i; struct A1 a1x[]; } B;\n+\n+void sink (int, ...);\n+\n+#define R(min, max) signed_range (min, max)\n+#define T(expr)     sink (0, expr)\n+\n+struct __attribute__ ((packed)) S16 { unsigned i: 16; };\n+\n+void farr_char (void)\n+{\n+  extern char ac[];\n+\n+  T (ac[DIFF_MIN]);                       /* { dg-warning \"array subscript -\\[0-9\\]+ is below array bounds of .char *\\\\\\[].\" } */\n+  T (ac[-1]);                             /* { dg-warning \"array subscript -1 is below array bounds\" } */\n+  T (ac[0]);\n+\n+  T (ac[DIFF_MAX - 1]);\n+  T (ac[DIFF_MAX]);                       /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (ac[DIFF_MAX + (size_t)1]);           /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (ac[SIZE_MAX]);                       /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (ac[R (DIFF_MAX - 1, DIFF_MAX)]);\n+  T (ac[R (DIFF_MIN + 1, -1)]);           /* { dg-warning \"array subscript -1 is below array bounds\" } */\n+  T (ac[R (DIFF_MIN + 1, 0)]);\n+  T (ac[R (-1, 0)]);\n+  T (ac[R (-1, 1)]);\n+}\n+\n+void farr_s16 (void)\n+{\n+  extern struct S16 ax[];\n+\n+  T (ax[DIFF_MIN]);                       /* { dg-warning \"array subscript -\\[0-9\\]+ is below array bounds of .(struct )?S16 *\\\\\\[].\" } */\n+  T (ax[-1]);                             /* { dg-warning \"array subscript -1 is below array bounds\" } */\n+  T (ax[0]);\n+\n+  T (ax[DIFF_MAX / 2 - 1]);\n+  T (ax[DIFF_MAX / 2]);                   /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (ax[DIFF_MAX / 2 + (size_t)1]);       /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (ax[SIZE_MAX]);                       /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (ax[R (DIFF_MIN, -1)]);               /* { dg-warning \"array subscript -1 is below array bounds\" } */\n+  T (ax[R (DIFF_MAX / 2 - 1, DIFF_MAX)]);\n+  T (ax[R (DIFF_MAX / 2, DIFF_MAX)]);     /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+}\n+\n+void farr_s16_7 (void)\n+{\n+  extern struct S16 ax_7[][7];\n+\n+  T (ax_7[0][DIFF_MIN]);                  /* { dg-warning \"array subscript -\\[0-9\\]+ is below array bounds of .(struct )?S16 *\\\\\\[7].\" } */\n+  T (ax_7[0][-1]);                        /* { dg-warning \"array subscript -1 is below array bounds\" } */\n+  T (ax_7[0][0]);\n+  T (ax_7[0][7]);                         /* { dg-warning \"array subscript 7 is above array bounds of .(struct )?S16 *\\\\\\[7].\" } */\n+  T (ax_7[0][8]);                         /* { dg-warning \"array subscript 8 is above array bounds of .(struct )?S16 *\\\\\\[7].\" } */\n+\n+  T (ax_7[0][DIFF_MAX / 2]);             /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (ax_7[0][SIZE_MAX]);                 /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+\n+  T (ax_7[DIFF_MIN][0]);                 /* { dg-warning \"array subscript -\\[0-9\\]+ is below array bounds of .(struct )?S16 *\\\\\\[]\\\\\\[7].\" } */\n+  T (ax_7[-1][0]);                        /* { dg-warning \"array subscript -1 is below array bounds\" } */\n+\n+  T (ax_7[DIFF_MAX / 2][0]);              /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (ax_7[SIZE_MAX][0]);                  /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+\n+  ssize_t i = R (DIFF_MIN, -1);\n+  T (ax_7[i][0]);                         /* { dg-warning \"array subscript -1 is below array bounds\" } */\n+\n+  T (ax_7[R (DIFF_MIN, -1)][0]);          /* { dg-warning \"array subscript -1 is below array bounds\" } */\n+  T (ax_7[R (DIFF_MIN, 0)][0]);\n+  T (ax_7[R (-2, -1)][0]);                /* { dg-warning \"array subscript -1 is below array bounds\" } */\n+  T (ax_7[R (-1, 0)][0]);\n+  T (ax_7[R (-1, 1)][0]);\n+  T (ax_7[R (-1, 7)][0]);\n+  T (ax_7[R (-1, DIFF_MAX)][0]);\n+\n+  T (ax_7[R ( 1, DIFF_MAX)][0]);\n+  T (ax_7[R (DIFF_MAX / 14 - 1, DIFF_MAX)][0]);\n+\n+  i = R (DIFF_MAX / 14, DIFF_MAX);\n+  T (ax_7[i][0]);                         /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+\n+  T (ax_7[0][R (DIFF_MIN, 0)]);\n+  T (ax_7[0][R (-1, 0)]);\n+  T (ax_7[0][R (-1, 1)]);\n+  T (ax_7[0][R (-1, 7)]);\n+  T (ax_7[0][R (-1, DIFF_MAX)]);\n+  T (ax_7[0][R (-1, DIFF_MAX)]);\n+\n+  T (ax_7[0][R (1, DIFF_MAX)]);\n+  T (ax_7[0][R (7, DIFF_MAX)]);           /* { dg-warning \"array subscript 7 is above array bounds\" } */\n+\n+}\n+\n+void farr_x_5_7 (void)\n+{\n+  extern struct S16 a[][5][7];\n+\n+  T (a[0][0][-3]);                        /* { dg-warning \"array subscript -3 is below array bounds of .(struct )?S16 *\\\\\\[7].\" } */\n+  T (a[0][-2][0]);                        /* { dg-warning \"array subscript -2 is below array bounds of .(struct )?S16 *\\\\\\[5]\\\\\\[7].\" } */\n+  T (a[-1][0][0]);                        /* { dg-warning \"array subscript -1 is below array bounds of .(struct )?S16 *\\\\\\[]\\\\\\[5]\\\\\\[7].\" } */\n+  T (a[R (-4, -3)][0][0]);                /* { dg-warning \"array subscript -3 is below array bounds\" } */\n+  T (a[0][R (-3, -2)][0]);                /* { dg-warning \"array subscript -2 is below array bounds\" } */\n+  T (a[0][0][R (-2, -1)]);                /* { dg-warning \"array subscript -1 is below array bounds\" } */\n+}\n+\n+\n+void fax (struct AX *p)\n+{\n+  T (p->ax[DIFF_MIN]);                   /* { dg-warning \"array subscript -\\[0-9\\]+ is below array bounds\" } */\n+  T (p->ax[-1]);                          /* { dg-warning \"array subscript -1 is below array bounds\" } */\n+  T (p->ax[0]);\n+  T (p->ax[DIFF_MAX - sizeof *p - 1]);\n+  T (p->ax[DIFF_MAX - sizeof *p]);        /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (p->ax[DIFF_MAX - sizeof *p + 1]);    /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (p->ax[SIZE_MAX]);                    /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (p->ax[R (DIFF_MIN, -1)]);            /* { dg-warning \"array subscript -1 is below array bounds\" } */\n+  T (p->ax[R (-1, 1)]);\n+  T (p->ax[R (0, DIFF_MAX - 1)]);\n+  T (p->ax[R (DIFF_MAX - 1, DIFF_MAX)]);/* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+}\n+\n+void fa1 (struct A1 *p)\n+{\n+  T (p->a1[DIFF_MIN]);                    /* { dg-warning \"array subscript -\\[0-9\\]+ is below array bounds\" } */\n+  T (p->a1[-1]);                          /* { dg-warning \"array subscript -1 is below array bounds\" } */\n+  T (p->a1[0]);\n+  T (p->a1[9]);\n+  T (p->a1[DIFF_MAX - offsetof (A1, a1) - 1]);\n+  T (p->a1[DIFF_MAX - offsetof (A1, a1)]);/* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (p->a1[DIFF_MAX - offsetof (A1, a1) + 1]); /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (p->a1[SIZE_MAX]);                    /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+}\n+\n+void fb (struct B *p)\n+{\n+  T (p->a1x->a1[DIFF_MIN]);               /* { dg-warning \"array subscript -\\[0-9\\]+ is below array bounds\" } */\n+  T (p->a1x->a1[-1]);                     /* { dg-warning \"array subscript -1 is below array bounds\" } */\n+  T (p->a1x->a1[0]);\n+  T (p->a1x->a1[9]);                      /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (p->a1x->a1[DIFF_MAX - sizeof *p]);   /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (p->a1x->a1[DIFF_MAX - sizeof *p + 1]); /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (p->a1x->a1[SIZE_MAX]);               /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+\n+  T (p->a1x[1].a1[DIFF_MIN]);             /* { dg-warning \"array subscript -\\[0-9\\]+ is below array bounds\" } */\n+  T (p->a1x[1].a1[-1]);                   /* { dg-warning \"array subscript -1 is below array bounds\" } */\n+  T (p->a1x[1].a1[0]);\n+  T (p->a1x[1].a1[9]);                    /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (p->a1x[1].a1[DIFF_MAX - sizeof *p]); /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (p->a1x[1].a1[DIFF_MAX - sizeof *p + 1]); /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (p->a1x[1].a1[SIZE_MAX]);             /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+\n+  T (p->a1x[2].a1[DIFF_MIN]);             /* { dg-warning \"array subscript -\\[0-9\\]+ is below array bounds\" } */\n+  T (p->a1x[2].a1[-1]);                   /* { dg-warning \"array subscript -1 is below array bounds\" } */\n+  T (p->a1x[2].a1[0]);\n+  T (p->a1x[2].a1[9]);                    /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (p->a1x[2].a1[DIFF_MAX - sizeof *p]);/* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (p->a1x[2].a1[DIFF_MAX - sizeof *p + 1]); /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (p->a1x[2].a1[SIZE_MAX]);             /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+\n+  T (p->a1x[3].a1[DIFF_MIN]);             /* { dg-warning \"array subscript -\\[0-9\\]+ is below array bounds\" } */\n+  T (p->a1x[3].a1[-1]);                   /* { dg-warning \"array subscript -1 is below array bounds\" } */\n+  T (p->a1x[3].a1[0]);\n+  T (p->a1x[3].a1[9]);                    /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+\n+  T (p->a1x[9].a1[0]);\n+\n+  enum { MAX = DIFF_MAX / sizeof *p->a1x - sizeof *p };\n+\n+  T (p->a1x[DIFF_MIN].a1);                /* { dg-warning \"array subscript -\\[0-9\\]+ is below array bounds\" } */\n+  T (p->a1x[-1].a1);                      /* { dg-warning \"array subscript -1 is below array bounds\" } */\n+  T (p->a1x[MAX].a1);\n+  T (p->a1x[MAX + 2].a1);                 /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+\n+  T (p->a1x[DIFF_MAX].a1);                /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (p->a1x[SIZE_MAX].a1);                /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+\n+  T (p->a1x[DIFF_MIN].a1[0]);             /* { dg-warning \"array subscript -\\[0-9\\]+ is below array bounds\" } */\n+  T (p->a1x[-1].a1[0])                    /* { dg-warning \"array subscript -1 is below array bounds\" } */;\n+  T (p->a1x[MAX - 1].a1[0]);\n+  T (p->a1x[MAX].a1[0]);                  /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (p->a1x[MAX + 1].a1[0]);              /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+\n+  T (p->a1x[DIFF_MAX].a1[0]);             /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+  T (p->a1x[SIZE_MAX].a1[0]);             /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" } */\n+}\n+\n+void f_cststring (int i)\n+{\n+  T (\"\"[DIFF_MIN]);                       /* { dg-warning \"array subscript -\\[0-9\\]+ is below array bounds of .(const )?char *\\\\\\[1]\" \"string\" { xfail lp64 } } */\n+  T (\"\"[DIFF_MIN + 1]);                   /* { dg-warning \"array subscript -\\[0-9\\]+ is below array bounds of .(const )?char *\\\\\\[1]\" \"string\" } */\n+  T (\"\"[-1]);                             /* { dg-warning \"array subscript -1 is below array bounds of .(const )?char *\\\\\\[1]\" \"string\" } */\n+  T (\"\"[0]);\n+  T (\"\"[1]);                              /* { dg-warning \"array subscript 1 is above array bounds of .(const )?char *\\\\\\[1]\" \"string\" } */\n+  T (\"0\"[2]);                             /* { dg-warning \"array subscript 2 is above array bounds of .(const )?char *\\\\\\[2]\" \"string\" } */\n+  T (\"012\"[2]);\n+  T (\"012\"[3]);\n+  T (\"012\"[4]);                           /* { dg-warning \"array subscript 4 is above array bounds of .(const )?char *\\\\\\[4]\" \"string\" } */\n+  T (\"0123\"[DIFF_MAX]);                   /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds of .(const )?char *\\\\\\[5]\" \"string\" } */\n+  T (\"0123\"[SIZE_MAX]);                   /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds of .(const )?char *\\\\\\[5]\" \"string\" } */\n+}\n+\n+void fb_strlen (struct B *p)\n+{\n+#define strlen __builtin_strlen\n+\n+  T (strlen (&p->a1x[0].a1[2]));          /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" \"strlen\" } */\n+  T (strlen (p->a1x[0].a1 + 2));          /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" \"strlen\" { xfail *-*-* } } */\n+}\n+\n+\n+void f_vla (unsigned n)\n+{\n+  char vla[n];\n+\n+  T (vla[DIFF_MIN]);                      /* { dg-warning \"array subscript -\\[0-9\\]+ is below array bounds\" \"vla\" } */\n+  T (vla[-1]);                            /* { dg-warning \"array subscript -1 is below array bounds\" \"vla\" } */\n+  T (vla[0]);\n+  T (vla[1]);\n+  T (vla[n - 1]);\n+  /* It would be nice to diagnose this. */\n+  T (vla[n]);                             /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" \"bug 82608\" { xfail *-*-*} } */\n+  T (vla[DIFF_MAX]);                      /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" \"vla\" } */\n+}"}, {"sha": "c9fc461942f8230d666e4265392583044154fbde", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-11.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5ee94a082b3d485b5cf7acc2b40b26cccb129f/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5ee94a082b3d485b5cf7acc2b40b26cccb129f/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-11.c?ref=8a5ee94a082b3d485b5cf7acc2b40b26cccb129f", "patch": "@@ -57,19 +57,19 @@ struct h3b {\n \n void foo(int (*a)[3])\n {\n-\t(*a)[4] = 1;\t/* { dg-warning \"subscript is above array bound\" } */\n+\t(*a)[4] = 1;\t/* { dg-warning \"subscript 4 is above array bound\" } */\n \ta[0][0] = 1;\t// ok\n \ta[1][0] = 1;\t// ok\n-\ta[1][4] = 1;\t/* { dg-warning \"subscript is above array bound\" } */\n+\ta[1][4] = 1;\t/* { dg-warning \"subscript 4 is above array bound\" } */\n \n \tint c[3] = { 0 };\n \n-\tc[4] = 1;\t/* { dg-warning \"subscript is above array bound\" } */\n+\tc[4] = 1;\t/* { dg-warning \"subscript 4 is above array bound\" } */\n \n-\te[4] = 1;\t/* { dg-warning \"subscript is above array bound\" } */\n+\te[4] = 1;\t/* { dg-warning \"subscript 4 is above array bound\" } */\n \n \tstruct f f;\n-\tf.f[4] = 1;\t/* { dg-warning \"subscript is above array bound\" } */\n+\tf.f[4] = 1;\t/* { dg-warning \"subscript 4 is above array bound\" } */\n \n \tstruct h* h = malloc(sizeof(struct h) + 3 * sizeof(int));\n \tstruct h0* h0 = malloc(sizeof(struct h0) + 3 * sizeof(int));\n@@ -78,15 +78,15 @@ void foo(int (*a)[3])\n \n \th->j[4] = 1;\t// flexible array member\n \th0->j[4] = 1;\t// zero-sized array extension\n-\th1->j[4] = 1;\t/* { dg-warning \"subscript is above array bound\" } */\n-\th3->j[4] = 1;\t/* { dg-warning \"subscript is above array bound\" } */\n+\th1->j[4] = 1;\t/* { dg-warning \"subscript 4 is above array bound\" } */\n+\th3->j[4] = 1;\t/* { dg-warning \"subscript 4 is above array bound\" } */\n \n \tstruct h0b* h0b = malloc(sizeof(struct h) + 3 * sizeof(int));\n \tstruct h1b* h1b = malloc(sizeof(struct h1b) + 3 * sizeof(int));\n \tstruct h3b* h3b = malloc(sizeof(struct h3b));\n //\th0b->j[4] = 1;\n-\th1b->j[4] = 1;;\t/* { dg-warning \"subscript is above array bound\" } */\n-\th3b->j[4] = 1;;\t/* { dg-warning \"subscript is above array bound\" } */\n+\th1b->j[4] = 1;;\t/* { dg-warning \"subscript 4 is above array bound\" } */\n+\th3b->j[4] = 1;;\t/* { dg-warning \"subscript 4 is above array bound\" } */\n \n \t// make sure nothing gets optimized away\n \tbar(*a);"}, {"sha": "f66bfb3d70bc399fc093523f92eb287609d08466", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-22.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5ee94a082b3d485b5cf7acc2b40b26cccb129f/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5ee94a082b3d485b5cf7acc2b40b26cccb129f/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-22.c?ref=8a5ee94a082b3d485b5cf7acc2b40b26cccb129f", "patch": "@@ -0,0 +1,96 @@\n+/* PR tree-optimization/82588 - missing -Warray-bounds on an excessively\n+   large index\n+   { dg-do compile }\n+   { dg-require-effective-target alloca }\n+   { dg-options \"-O2 -Warray-bounds -ftrack-macro-expansion=0\" }  */\n+\n+#define SIZE_MAX  __SIZE_MAX__\n+#define DIFF_MAX __PTRDIFF_MAX__\n+#define DIFF_MIN (-DIFF_MAX - 1)\n+\n+typedef __PTRDIFF_TYPE__ ptrdiff_t;\n+typedef __SIZE_TYPE__    size_t;\n+\n+extern ptrdiff_t signed_value (void)\n+{\n+  extern volatile ptrdiff_t signed_value_source;\n+  return signed_value_source;\n+}\n+\n+ptrdiff_t signed_range (ptrdiff_t min, ptrdiff_t max)\n+{\n+  ptrdiff_t val = signed_value ();\n+  return val < min || max < val ? min : val;\n+}\n+\n+typedef struct AX { int n; char ax[]; } AX;\n+\n+typedef struct A1 { int i; char a1[1]; } A1;\n+typedef struct B { int i; struct A1 a1x[]; } B;\n+\n+void sink (int, ...);\n+\n+#define T(expr)   sink (0, (expr))\n+\n+void test_vla (unsigned m, unsigned n)\n+{\n+  char vla1[m];\n+\n+  T (vla1[DIFF_MIN]);                     /* { dg-warning \"array subscript -\\[0-9\\]+ is below array bounds\" \"vla\" } */\n+  T (vla1[-1]);                           /* { dg-warning \"array subscript -1 is below array bounds\" \"vla\" } */\n+  T (vla1[0]);\n+  T (vla1[1]);\n+  T (vla1[m - 1]);\n+  /* It would be nice to diagnose this. */\n+  T (vla1[m]);                            /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" \"bug 82608\" { xfail *-*-*} } */\n+  T (vla1[DIFF_MAX - 1]);\n+  T (vla1[DIFF_MAX]);                     /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" \"vla\" } */\n+\n+  ptrdiff_t i = signed_range (DIFF_MAX - 1, DIFF_MAX);\n+  T (vla1[i]);\n+\n+  char vla2[m][n];\n+\n+  T (vla2[0][DIFF_MIN]);                  /* { dg-warning \"array subscript -\\[0-9\\]+ is below array bounds\" \"vla\" } */\n+  T (vla2[0][-1]);                        /* { dg-warning \"array subscript -1 is below array bounds\" \"vla\" } */\n+  T (vla2[0][0]);\n+  T (vla2[1][1]);\n+  T (vla2[m - 1][n - 1]);\n+  /* It would be nice to diagnose this. */\n+  T (vla2[m][0]);                         /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" \"bug 82608\" { xfail *-*-*} } */\n+  T (vla2[m + 1][0]);                     /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" \"bug 82608\" { xfail *-*-*} } */\n+  T (vla2[0][n]);                         /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" \"bug 82608\" { xfail *-*-*} } */\n+  T (vla2[0][n + 1]);                     /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" \"bug 82608\" { xfail *-*-*} } */\n+  T (vla2[m][n]);                         /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" \"bug 82608\" { xfail *-*-*} } */\n+  T (vla2[m + 1][n + 1]);                 /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" \"bug 82608\" { xfail *-*-*} } */\n+\n+  T (vla2[0][DIFF_MAX]);                  /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" \"vla\" } */\n+  T (vla2[DIFF_MAX][0]);                  /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" \"vla\" { xfail *-*-* } } */\n+  T (vla2[DIFF_MAX][DIFF_MAX]);           /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" \"vla\" } */\n+\n+  struct S256 { char a[256]; } vla3[m];\n+\n+  T (vla3[DIFF_MIN].a[0]);                /* { dg-warning \"array subscript -\\[0-9\\]+ is below array bounds\" \"vla\" } */\n+  T (vla3[-1].a[0]);                      /* { dg-warning \"array subscript -1 is below array bounds\" \"vla\" } */\n+  T (vla3[0].a[0]);\n+  T (vla3[1].a[0]);\n+  T (vla3[m - 1].a[0]);\n+  T (vla3[DIFF_MAX / 256 - 1].a[0]);\n+  T (vla3[DIFF_MAX / 256].a[0]);          /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" \"vla\" } */\n+\n+  i = signed_range (DIFF_MAX / 256 - 1, DIFF_MAX);\n+  T (vla3[i].a[0]);\n+\n+  i = signed_range (DIFF_MAX / 256, DIFF_MAX);\n+  T (vla3[i].a[0]);                       /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" \"vla\" } */\n+\n+  struct VLA { char vla[n]; } x;\n+\n+  T (x.vla[DIFF_MIN]);                    /* { dg-warning \"array subscript -\\[0-9\\]+ is below array bounds\" \"vla\" } */\n+  T (x.vla[-1]);                          /* { dg-warning \"array subscript -1 is below array bounds\" \"vla\" } */\n+  T (x.vla[0]);\n+  T (x.vla[1]);\n+  T (x.vla[n - 1]);\n+  T (x.vla[DIFF_MAX - 1]);\n+  T (x.vla[DIFF_MAX]);                    /* { dg-warning \"array subscript \\[0-9\\]+ is above array bounds\" \"vla\" } */\n+}"}, {"sha": "e248f59a67f35a9b6ea31e6845838ae077f85f68", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 48, "deletions": 16, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5ee94a082b3d485b5cf7acc2b40b26cccb129f/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5ee94a082b3d485b5cf7acc2b40b26cccb129f/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=8a5ee94a082b3d485b5cf7acc2b40b26cccb129f", "patch": "@@ -42,6 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-iterator.h\"\n #include \"gimple-walk.h\"\n #include \"tree-cfg.h\"\n+#include \"tree-dfa.h\"\n #include \"tree-ssa-loop-manip.h\"\n #include \"tree-ssa-loop-niter.h\"\n #include \"tree-ssa-loop.h\"\n@@ -65,6 +66,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stringpool.h\"\n #include \"attribs.h\"\n #include \"vr-values.h\"\n+#include \"builtins.h\"\n \n /* Set of SSA names found live during the RPO traversal of the function\n    for still active basic-blocks.  */\n@@ -4781,26 +4783,51 @@ vrp_prop::check_array_ref (location_t location, tree ref,\n   low_sub = up_sub = TREE_OPERAND (ref, 1);\n   up_bound = array_ref_up_bound (ref);\n \n-  /* Can not check flexible arrays.  */\n   if (!up_bound\n-      || TREE_CODE (up_bound) != INTEGER_CST)\n-    return;\n+      || TREE_CODE (up_bound) != INTEGER_CST\n+      || (warn_array_bounds < 2\n+\t  && array_at_struct_end_p (ref)))\n+    {\n+      /* Accesses to trailing arrays via pointers may access storage\n+\t beyond the types array bounds.  For such arrays, or for flexible\n+\t array members, as well as for other arrays of an unknown size,\n+\t replace the upper bound with a more permissive one that assumes\n+\t the size of the largest object is PTRDIFF_MAX.  */\n+      tree eltsize = array_ref_element_size (ref);\n+\n+      /* FIXME: Handle VLAs.  */\n+      if (TREE_CODE (eltsize) != INTEGER_CST)\n+\treturn;\n \n-  /* Accesses to trailing arrays via pointers may access storage\n-     beyond the types array bounds.  */\n-  if (warn_array_bounds < 2\n-      && array_at_struct_end_p (ref))\n-    return;\n+      tree maxbound = TYPE_MAX_VALUE (ptrdiff_type_node);\n+\n+      up_bound_p1 = int_const_binop (TRUNC_DIV_EXPR, maxbound, eltsize);\n+\n+      tree arg = TREE_OPERAND (ref, 0);\n+\n+      HOST_WIDE_INT off;\n+      if (get_addr_base_and_unit_offset (arg, &off))\n+\tup_bound_p1 = wide_int_to_tree (sizetype,\n+\t\t\t\t\twi::sub (wi::to_wide (up_bound_p1),\n+\t\t\t\t\t\t off));\n+\n+      up_bound = int_const_binop (MINUS_EXPR, up_bound_p1,\n+\t\t\t\t  build_int_cst (ptrdiff_type_node, 1));\n+    }\n+  else\n+    up_bound_p1 = int_const_binop (PLUS_EXPR, up_bound,\n+\t\t\t\t   build_int_cst (TREE_TYPE (up_bound), 1));\n \n   low_bound = array_ref_low_bound (ref);\n-  up_bound_p1 = int_const_binop (PLUS_EXPR, up_bound,\n-\t\t\t\t build_int_cst (TREE_TYPE (up_bound), 1));\n+\n+  tree artype = TREE_TYPE (TREE_OPERAND (ref, 0));\n \n   /* Empty array.  */\n   if (tree_int_cst_equal (low_bound, up_bound_p1))\n     {\n       warning_at (location, OPT_Warray_bounds,\n-\t\t  \"array subscript is above array bounds\");\n+\t\t  \"array subscript %E is above array bounds of %qT\",\n+\t\t  low_bound, artype);\n       TREE_NO_WARNING (ref) = 1;\n     }\n \n@@ -4824,7 +4851,8 @@ vrp_prop::check_array_ref (location_t location, tree ref,\n           && tree_int_cst_le (low_sub, low_bound))\n         {\n           warning_at (location, OPT_Warray_bounds,\n-\t\t      \"array subscript is outside array bounds\");\n+\t\t      \"array subscript [%E, %E] is outside array bounds of %qT\",\n+\t\t      low_sub, up_sub, artype);\n           TREE_NO_WARNING (ref) = 1;\n         }\n     }\n@@ -4840,7 +4868,8 @@ vrp_prop::check_array_ref (location_t location, tree ref,\n \t  fprintf (dump_file, \"\\n\");\n \t}\n       warning_at (location, OPT_Warray_bounds,\n-\t\t  \"array subscript is above array bounds\");\n+\t\t  \"array subscript %E is above array bounds of %qT\",\n+\t\t  up_sub, artype);\n       TREE_NO_WARNING (ref) = 1;\n     }\n   else if (TREE_CODE (low_sub) == INTEGER_CST\n@@ -4853,7 +4882,8 @@ vrp_prop::check_array_ref (location_t location, tree ref,\n \t  fprintf (dump_file, \"\\n\");\n \t}\n       warning_at (location, OPT_Warray_bounds,\n-\t\t  \"array subscript is below array bounds\");\n+\t\t  \"array subscript %E is below array bounds of %qT\",\n+\t\t  low_sub, artype);\n       TREE_NO_WARNING (ref) = 1;\n     }\n }\n@@ -4908,7 +4938,8 @@ vrp_prop::search_for_addr_array (tree t, location_t location)\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \t  warning_at (location, OPT_Warray_bounds,\n-\t\t      \"array subscript is below array bounds\");\n+\t\t      \"array subscript %wi is below array bounds of %qT\",\n+\t\t      idx.to_shwi (), TREE_TYPE (tem));\n \t  TREE_NO_WARNING (t) = 1;\n \t}\n       else if (idx > (wi::to_offset (up_bound)\n@@ -4921,7 +4952,8 @@ vrp_prop::search_for_addr_array (tree t, location_t location)\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \t  warning_at (location, OPT_Warray_bounds,\n-\t\t      \"array subscript is above array bounds\");\n+\t\t      \"array subscript %wu is above array bounds of %qT\",\n+\t\t      idx.to_uhwi (), TREE_TYPE (tem));\n \t  TREE_NO_WARNING (t) = 1;\n \t}\n     }"}]}