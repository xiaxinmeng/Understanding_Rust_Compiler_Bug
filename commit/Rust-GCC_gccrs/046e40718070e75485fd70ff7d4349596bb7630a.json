{"sha": "046e40718070e75485fd70ff7d4349596bb7630a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ2ZTQwNzE4MDcwZTc1NDg1ZmQ3MGZmN2Q0MzQ5NTk2YmI3NjMwYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-11-13T18:27:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-11-13T18:27:09Z"}, "message": "re PR c++/34054 (ICE with parameter pack in return type)\n\n\tPR c++/34054\n\tPR c++/34056\n\tPR c++/34057\n\tPR c++/34058\n\tPR c++/34060\n\t* pt.c (find_parameter_packs_r): If ppd->set_packs_to_error,\n\tset to error_mark_node the outermost POINTER_TYPE to the pack if\n\tit is seen in a POINTER_TYPE.\n\t(push_template_decl_real): If check_for_bare_parameter_packs\n\tfails for function return type, set the return type to\n\tinteger_type_node.  If check_for_bare_parameter_packs failed\n\tfor non-function, return error_mark_node.\n\n\t* g++.dg/parse/crash36.C: Add another dg-error.\n\t* g++.dg/cpp0x/pr34054.C: New test.\n\t* g++.dg/cpp0x/pr34056.C: New test.\n\t* g++.dg/cpp0x/pr34057.C: New test.\n\t* g++.dg/cpp0x/pr34058.C: New test.\n\t* g++.dg/cpp0x/pr34060.C: New test.\n\nFrom-SVN: r130152", "tree": {"sha": "35c42534fc87425283ca5817c084bcdc35bb88eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35c42534fc87425283ca5817c084bcdc35bb88eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/046e40718070e75485fd70ff7d4349596bb7630a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/046e40718070e75485fd70ff7d4349596bb7630a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/046e40718070e75485fd70ff7d4349596bb7630a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/046e40718070e75485fd70ff7d4349596bb7630a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f6ee9faefced4284e4d602a84a745e3456a58f2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ee9faefced4284e4d602a84a745e3456a58f2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6ee9faefced4284e4d602a84a745e3456a58f2e"}], "stats": {"total": 93, "additions": 88, "deletions": 5}, "files": [{"sha": "efc48a95bd71a16d536b4f32e23393010983f723", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046e40718070e75485fd70ff7d4349596bb7630a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046e40718070e75485fd70ff7d4349596bb7630a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=046e40718070e75485fd70ff7d4349596bb7630a", "patch": "@@ -1,5 +1,18 @@\n 2007-11-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/34054\n+\tPR c++/34056\n+\tPR c++/34057\n+\tPR c++/34058\n+\tPR c++/34060\n+\t* pt.c (find_parameter_packs_r): If ppd->set_packs_to_error,\n+\tset to error_mark_node the outermost POINTER_TYPE to the pack if\n+\tit is seen in a POINTER_TYPE.\n+\t(push_template_decl_real): If check_for_bare_parameter_packs\n+\tfails for function return type, set the return type to\n+\tinteger_type_node.  If check_for_bare_parameter_packs failed\n+\tfor non-function, return error_mark_node.\n+\n \tPR c++/29225\n \t* call.c (build_new_op): Call resolve_args before calling\n \tbuild_over_call."}, {"sha": "8a95ccf7f74dac52748057b797d4bfa0753e5b5b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046e40718070e75485fd70ff7d4349596bb7630a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046e40718070e75485fd70ff7d4349596bb7630a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=046e40718070e75485fd70ff7d4349596bb7630a", "patch": "@@ -2454,6 +2454,7 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n       return NULL_TREE;\n     }\n \n+recheck:\n   /* Identify whether this is a parameter pack or not.  */\n   switch (TREE_CODE (t))\n     {\n@@ -2478,6 +2479,16 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n         }\n       break;\n \n+    case POINTER_TYPE:\n+      if (ppd->set_packs_to_error)\n+\t/* Pointer types are shared, set in that case the outermost\n+\t   POINTER_TYPE to error_mark_node rather than the parameter pack.  */\n+\t{\n+\t  t = TREE_TYPE (t);\n+\t  goto recheck;\n+\t}\n+      break;\n+\n     default:\n       /* Not a parameter pack.  */\n       break;\n@@ -2553,7 +2564,6 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n                    ppd, NULL);\n       *walk_subtrees = 0;\n       return NULL_TREE;\n-\n       \n     case TYPE_PACK_EXPANSION:\n     case EXPR_PACK_EXPANSION:\n@@ -3864,11 +3874,15 @@ push_template_decl_real (tree decl, bool is_friend)\n \n       /* Check for bare parameter packs in the return type and the\n          exception specifiers.  */\n-      check_for_bare_parameter_packs (&TREE_TYPE (type));\n+      if (!check_for_bare_parameter_packs (&TREE_TYPE (type)))\n+\t/* Errors were already issued, set return type to int\n+\t   as the frontend doesn't expect error_mark_node as\n+\t   the return type.  */\n+\tTREE_TYPE (type) = integer_type_node;\n       check_for_bare_parameter_packs (&TYPE_RAISES_EXCEPTIONS (type));\n     }\n-  else\n-    check_for_bare_parameter_packs (&TREE_TYPE (decl));\n+  else if (!check_for_bare_parameter_packs (&TREE_TYPE (decl)))\n+    return error_mark_node;\n \n   if (is_partial)\n     return process_partial_specialization (decl);"}, {"sha": "f4337d28539035bafbbc609618ce8aa76682569e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046e40718070e75485fd70ff7d4349596bb7630a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046e40718070e75485fd70ff7d4349596bb7630a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=046e40718070e75485fd70ff7d4349596bb7630a", "patch": "@@ -1,5 +1,17 @@\n 2007-11-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/34054\n+\tPR c++/34056\n+\tPR c++/34057\n+\tPR c++/34058\n+\tPR c++/34060\n+\t* g++.dg/parse/crash36.C: Add another dg-error.\n+\t* g++.dg/cpp0x/pr34054.C: New test.\n+\t* g++.dg/cpp0x/pr34056.C: New test.\n+\t* g++.dg/cpp0x/pr34057.C: New test.\n+\t* g++.dg/cpp0x/pr34058.C: New test.\n+\t* g++.dg/cpp0x/pr34060.C: New test.\n+\n \tPR tree-optimization/34063\n \t* g++.dg/tree-ssa/pr34063.C: New test.\n "}, {"sha": "cfc6c4bdc76bd6facdc34793a7a406c2da905b2f", "filename": "gcc/testsuite/g++.dg/cpp0x/pr34054.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046e40718070e75485fd70ff7d4349596bb7630a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr34054.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046e40718070e75485fd70ff7d4349596bb7630a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr34054.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr34054.C?ref=046e40718070e75485fd70ff7d4349596bb7630a", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/34054\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+template<typename... T> T foo() {} // { dg-error \"not expanded|T\" }"}, {"sha": "0e5246b6ab60bbf2ffa341d3ff2d6af0a2d1ed9c", "filename": "gcc/testsuite/g++.dg/cpp0x/pr34056.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046e40718070e75485fd70ff7d4349596bb7630a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr34056.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046e40718070e75485fd70ff7d4349596bb7630a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr34056.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr34056.C?ref=046e40718070e75485fd70ff7d4349596bb7630a", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/34056\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+template<typename... T> struct A\n+{\n+  void foo (T *) { ++p; }\t// { dg-error \"not expanded|T\" }\n+  void bar (T **) { }\t\t// { dg-error \"not expanded|T\" }\n+  T *p;\t\t\t\t// { dg-error \"not expanded|T\" }\n+};"}, {"sha": "38da5ff50157ad07678e5427614d8670a93fb66c", "filename": "gcc/testsuite/g++.dg/cpp0x/pr34057.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046e40718070e75485fd70ff7d4349596bb7630a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr34057.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046e40718070e75485fd70ff7d4349596bb7630a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr34057.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr34057.C?ref=046e40718070e75485fd70ff7d4349596bb7630a", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/34057\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+template <typename... T> struct A\n+{\n+  typedef T X __attribute__ ((vector_size (8))); // { dg-error \"not expanded|T\" }\n+};"}, {"sha": "0cf1faec73f02e54b1ce9e1242e4e0131b05d190", "filename": "gcc/testsuite/g++.dg/cpp0x/pr34058.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046e40718070e75485fd70ff7d4349596bb7630a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr34058.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046e40718070e75485fd70ff7d4349596bb7630a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr34058.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr34058.C?ref=046e40718070e75485fd70ff7d4349596bb7630a", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/34058\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+template <typename...T> struct A\n+{\n+  typedef T X;\t// { dg-error \"not expanded|T\" }\n+};\n+\n+A<int> a;"}, {"sha": "8e0d321b2ac860b74a6e49e73eed26a9c53109c1", "filename": "gcc/testsuite/g++.dg/cpp0x/pr34060.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046e40718070e75485fd70ff7d4349596bb7630a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr34060.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046e40718070e75485fd70ff7d4349596bb7630a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr34060.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr34060.C?ref=046e40718070e75485fd70ff7d4349596bb7630a", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/34060\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+template <int> struct A\n+{\n+  template <typename... > struct B {};\n+  template <typename... T> struct B <int, T *> {}; // { dg-error \"not expanded|T\" }\n+};\n+\n+A<0>::B<int>b;"}, {"sha": "bcd96e4ec1f91b2811abf4de9a8b019b73bc5850", "filename": "gcc/testsuite/g++.dg/parse/crash36.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046e40718070e75485fd70ff7d4349596bb7630a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046e40718070e75485fd70ff7d4349596bb7630a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash36.C?ref=046e40718070e75485fd70ff7d4349596bb7630a", "patch": "@@ -5,7 +5,7 @@\n template <typename... T> struct A\t// { dg-error \"does not include variadic templates\" }\n {\n   static T &t;\t\t\t\t// { dg-error \"not expanded with|T\" }\n-  static const int i = sizeof (++t);\n+  static const int i = sizeof (++t);\t// { dg-error \"was not declared in this scope\" }\n };\n \n int x[A <int>::i];\t// { dg-error \"is not an integral constant-expression\" }"}]}