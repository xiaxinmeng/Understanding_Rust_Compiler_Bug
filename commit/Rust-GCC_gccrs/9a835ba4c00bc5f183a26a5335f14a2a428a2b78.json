{"sha": "9a835ba4c00bc5f183a26a5335f14a2a428a2b78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE4MzViYTRjMDBiYzVmMTgzYTI2YTUzMzVmMTRhMmE0MjhhMmI3OA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2020-02-26T13:47:43Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2020-10-30T08:25:26Z"}, "message": "Introduce support for vxworks7r2 on x86 and x86_64\n\nThis change extends the VxWorks support on intel CPUs to\nVxWorks7r2 for x86_64 as well as x86, with a \"mcmodel=large\"\nadditional multilib for the 64bit configuration.\n\nThe support for fPIC is not functional yet for this model,\nso we just don't add the corresponding multilib.\n\nWe extend the range of CPU families handled by TARGET_OS_CPP_BUILTINS,\naccounting for the fact that archs older than PENTIUM4 are\nnot supported (any more) by VxWorks 7.\n\nAs we did for powerpc, we leverage VX_CPU_PREFIX to emit different\nforms of definitions for different families of VxWorks as the system\nheaders's expectations has evolved between Vx 5, 6 and 7.\n\n2020-10-27  Olivier Hainque  <hainque@adacore.com>\n\ngcc/\n\t* config.gcc: Adjust the ix86/x86_64-wrs-vxworks filters\n\tto apply to VxWorks 7 as well.\n\t* config/i386/t-vxworks (MULTILIB_OPTIONS, MULTILIB_DIRNAMES):\n\tRemove the fPIC multilib and add one for the large code model\n\ton x86_64.\n\t* config/i386/vxworks.h: Separate sections for TARGET_VXWORKS7,\n\tother variants and common bits.\n\t(TARGET_OS_CPP_BUILTINS): Augment to support a range of CPU\n\tfamilies. Leverage VX_CPU_PREFIX.\n\t(CC1_SPEC): Add definition.\n\t(STACK_CHECK_PROTECT): Use conditional expression instead of\n\theavier to read conditioned macro definitions.\n\nlibgcc/\n\t* config.host: Adjust the ix86/x86_64-wrs-vxworks filters\n\tto apply to VxWorks 7 as well.\n\nCo-authored-by: Douglas Rupp <rupp@adacore.com>\nCo-authored-by: Pat Bernardi <bernardi@adacore.com>", "tree": {"sha": "c74b9a1cd40916910151671ef919c49370bdca04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c74b9a1cd40916910151671ef919c49370bdca04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a835ba4c00bc5f183a26a5335f14a2a428a2b78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a835ba4c00bc5f183a26a5335f14a2a428a2b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a835ba4c00bc5f183a26a5335f14a2a428a2b78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a835ba4c00bc5f183a26a5335f14a2a428a2b78/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71e713209adcb3b7f65d14906eb200317cc1c2ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71e713209adcb3b7f65d14906eb200317cc1c2ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71e713209adcb3b7f65d14906eb200317cc1c2ae"}], "stats": {"total": 119, "additions": 81, "deletions": 38}, "files": [{"sha": "b169f2fc3aadb2ae46a327f52940b7b8a3e38b33", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a835ba4c00bc5f183a26a5335f14a2a428a2b78/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a835ba4c00bc5f183a26a5335f14a2a428a2b78/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=9a835ba4c00bc5f183a26a5335f14a2a428a2b78", "patch": "@@ -2050,7 +2050,7 @@ i[34567]86-*-solaris2* | x86_64-*-solaris2*)\n \t\tesac\n \tfi\n \t;;\n-i[4567]86-wrs-vxworks|i[4567]86-wrs-vxworksae|i[4567]86-wrs-vxworks7|x86_64-wrs-vxworks7)\n+i[4567]86-wrs-vxworks*|x86_64-wrs-vxworks7*)\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h elfos.h\"\n \tcase ${target} in\n \t  x86_64-*)"}, {"sha": "8f5e8c73b71e632300faf6914c1bb4b38abec23d", "filename": "gcc/config/i386/t-vxworks", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a835ba4c00bc5f183a26a5335f14a2a428a2b78/gcc%2Fconfig%2Fi386%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a835ba4c00bc5f183a26a5335f14a2a428a2b78/gcc%2Fconfig%2Fi386%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-vxworks?ref=9a835ba4c00bc5f183a26a5335f14a2a428a2b78", "patch": "@@ -1,8 +1,19 @@\n # Multilibs for VxWorks.\n \n-# Build multilibs for normal, -mrtp, and -mrtp -fPIC.\n-MULTILIB_OPTIONS = mrtp fPIC\n-MULTILIB_DIRNAMES =\n+# The common variant across the board is for -mrtp\n+MULTILIB_OPTIONS = mrtp\n+MULTILIB_DIRNAMES = mrtp\n+\n+# Then variants for the \"large\" code model on x86_64, or fPIC on x86,\n+# RTP only. -fPIC -mrtp -mcmodel=large is not functional yet.\n+ifneq (,$(findstring x86_64, $(target)))\n+MULTILIB_OPTIONS += mcmodel=large\n+MULTILIB_DIRNAMES += large\n+else\n+MULTILIB_OPTIONS += fPIC\n+MULTILIB_DIRNAMES += fPIC\n MULTILIB_MATCHES = fPIC=fpic\n-MULTILIB_EXCEPTIONS = fPIC\n \n+# -fPIC is only supported in combination with -mrtp\n+MULTILIB_EXCEPTIONS = fPIC\n+endif"}, {"sha": "891b4ff04b5f325540fecc8a97e3cbf64365adb9", "filename": "gcc/config/i386/vxworks.h", "status": "modified", "additions": 64, "deletions": 32, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a835ba4c00bc5f183a26a5335f14a2a428a2b78/gcc%2Fconfig%2Fi386%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a835ba4c00bc5f183a26a5335f14a2a428a2b78/gcc%2Fconfig%2Fi386%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fvxworks.h?ref=9a835ba4c00bc5f183a26a5335f14a2a428a2b78", "patch": "@@ -18,12 +18,21 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n+/* VxWorks after 7 SR0600 use the ELF ABI and the system environment is llvm\n+   based.  Earlier versions have GNU based environment components and use the\n+   same ABI as Solaris 2.  */\n+\n+#if TARGET_VXWORKS7\n+\n+#undef VXWORKS_PERSONALITY\n+#define VXWORKS_PERSONALITY \"llvm\"\n+\n+#else\n+\n #undef ASM_OUTPUT_ALIGNED_BSS\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n   asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n \n-/* VxWorks uses the same ABI as Solaris 2, so use i386/sol2.h version.  */\n-\n #undef TARGET_SUBTARGET_DEFAULT\n #define TARGET_SUBTARGET_DEFAULT \\\n \t(MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_VECT8_RETURNS)\n@@ -41,43 +50,73 @@ along with GCC; see the file COPYING3.  If not see\n #undef SIZE_TYPE\n #define SIZE_TYPE (TARGET_LP64 ? \"long unsigned int\" : \"unsigned int\")\n \n+/* We cannot use PC-relative accesses for VxWorks PIC because there is no\n+   fixed gap between segments.  */\n+#undef ASM_PREFERRED_EH_DATA_FORMAT\n+\n #if TARGET_64BIT_DEFAULT\n #undef VXWORKS_SYSCALL_LIBS_RTP\n #define VXWORKS_SYSCALL_LIBS_RTP \"-lsyscall\"\n #endif\n \n+#endif\n+\n+/* CPU macro definitions, ordered to account for VxWorks 7 not\n+   supporting CPUs older than PENTIUM4 since SR0650.  */\n+\n+#define VX_CPUDEF(CPU) builtin_define(VX_CPU_PREFIX \"CPU=\" #CPU)\n+#define VX_CPUVDEF(CPU) builtin_define(VX_CPU_PREFIX \"CPU_VARIANT=\" #CPU)\n+\n #define TARGET_OS_CPP_BUILTINS()\t\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n       VXWORKS_OS_CPP_BUILTINS ();\t\t\t\\\n-      if (TARGET_386)\t\t\t\t\t\\\n-        builtin_define (\"CPU=I80386\");\t\t\t\\\n+      if (TARGET_64BIT)\t\t\t\t\t\\\n+\tVX_CPUDEF (X86_64);\t\t\t\t\\\n+      else if (TARGET_PENTIUM4)\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  VX_CPUDEF (PENTIUM4);\t\t\t\t\\\n+\t  VX_CPUVDEF (PENTIUM4);\t\t\t\\\n+\t}\t\t\t\t\t\t\\\n+      else if (TARGET_CORE2)\t\t\t\t\\\n+\tVX_CPUDEF (CORE2);\t\t\t\t\\\n+      else if (TARGET_NEHALEM)\t\t\t\t\\\n+\tVX_CPUDEF (NEHALEM);\t\t\t\t\\\n+      else if (TARGET_SANDYBRIDGE)\t\t\t\\\n+\tVX_CPUDEF (SANDYBRIDGE);\t\t\t\\\n+      else if (TARGET_HASWELL)\t\t\t\t\\\n+\tVX_CPUDEF (HASWELL);\t\t\t\t\\\n+      else if (TARGET_SILVERMONT)\t\t\t\\\n+\tVX_CPUDEF (SILVERMONT);\t\t\t\t\\\n+      else if (TARGET_SKYLAKE || TARGET_SKYLAKE_AVX512) \\\n+\tVX_CPUDEF (SKYLAKE);\t\t\t\t\\\n+      else if (TARGET_GOLDMONT)\t\t\t\t\\\n+\tVX_CPUDEF (GOLDMONT);\t\t\t\t\\\n+      else if (TARGET_VXWORKS7)\t\t\t\t\\\n+\tVX_CPUDEF (PENTIUM4);\t\t\t\t\\\n+      else if (TARGET_386)\t\t\t\t\\\n+\tVX_CPUDEF (I80386);\t\t\t\t\\\n       else if (TARGET_486)\t\t\t\t\\\n-        builtin_define (\"CPU=I80486\");\t\t\t\\\n+\tVX_CPUDEF (I80486);\t\t\t\t\\\n       else if (TARGET_PENTIUM)\t\t\t\t\\\n-        {\t\t\t\t\t\t\\\n-          builtin_define (\"CPU=PENTIUM\");\t\t\\\n-          builtin_define (\"CPU_VARIANT=PENTIUM\");\t\\\n-        }\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  VX_CPUDEF (PENTIUM);\t\t\t\t\\\n+\t  VX_CPUVDEF (PENTIUM);\t\t\t\t\\\n+\t}\t\t\t\t\t\t\\\n       else if (TARGET_PENTIUMPRO)\t\t\t\\\n-        {\t\t\t\t\t\t\\\n-          builtin_define (\"CPU=PENTIUM2\");\t\t\\\n-          builtin_define (\"CPU_VARIANT=PENTIUMPRO\");\t\\\n-        }\t\t\t\t\t\t\\\n-      else if (TARGET_PENTIUM4)\t\t\t\t\\\n-        {\t\t\t\t\t\t\\\n-          builtin_define (\"CPU=PENTIUM4\");\t\t\\\n-          builtin_define (\"CPU_VARIANT=PENTIUM4\");\t\\\n-        }\t\t\t\t\t\t\\\n-      else if (TARGET_64BIT)\t\t\t\t\\\n-          builtin_define (\"CPU=X86_64\");\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  VX_CPUDEF (PENTIUM2);\t\t\t\t\\\n+\t  VX_CPUVDEF (PENTIUMPRO);\t\t\t\\\n+\t}\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\\\n-          builtin_define (\"CPU=I80386\");\t\t\\\n-    } \t\t\t\t\t\t\t\\\n+\tVX_CPUDEF (I80386);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n   while (0)\n \n #undef  CPP_SPEC\n #define CPP_SPEC VXWORKS_ADDITIONAL_CPP_SPEC\n+#undef  CC1_SPEC\n+#define CC1_SPEC VXWORKS_CC1_SPEC\n #undef  LIB_SPEC\n #define LIB_SPEC VXWORKS_LIB_SPEC\n #undef  STARTFILE_SPEC\n@@ -97,18 +136,11 @@ along with GCC; see the file COPYING3.  If not see\n #undef FUNCTION_PROFILER\n #define FUNCTION_PROFILER(FILE,LABELNO) VXWORKS_FUNCTION_PROFILER(FILE,LABELNO)\n \n-/* We cannot use PC-relative accesses for VxWorks PIC because there is no\n-   fixed gap between segments.  */\n-#undef ASM_PREFERRED_EH_DATA_FORMAT\n-\n /* Define this to be nonzero if static stack checking is supported.  */\n #define STACK_CHECK_STATIC_BUILTIN 1\n \n /* This platform supports the probing method of stack checking (RTP mode).\n-   8K is reserved in the stack to propagate exceptions in case of overflow. \n+   8K is reserved in the stack to propagate exceptions in case of overflow.\n    On 64-bit targets, we double that size.  */\n-#if TARGET_64BIT_DEFAULT\n-#define STACK_CHECK_PROTECT 16384\n-#else\n-#define STACK_CHECK_PROTECT 8192\n-#endif\n+\n+#define STACK_CHECK_PROTECT (TARGET_64BIT_DEFAULT ? 16 * 1024 : 8 * 1024)"}, {"sha": "40823f0cff43de0e300fb0426041a829a311bf22", "filename": "libgcc/config.host", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a835ba4c00bc5f183a26a5335f14a2a428a2b78/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a835ba4c00bc5f183a26a5335f14a2a428a2b78/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=9a835ba4c00bc5f183a26a5335f14a2a428a2b78", "patch": "@@ -774,7 +774,7 @@ i[34567]86-*-solaris2* | x86_64-*-solaris2*)\n \ttm_file=\"${tm_file} i386/elf-lib.h\"\n \tmd_unwind_header=i386/sol2-unwind.h\n \t;;\n-i[4567]86-wrs-vxworks|i[4567]86-wrs-vxworksae|i[4567]86-wrs-vxworks7|x86_64-wrs-vxworks7)\n+i[4567]86-wrs-vxworks*|x86_64-wrs-vxworks*)\n \t;;\n i[34567]86-*-cygwin*)\n \textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtfastmath.o\""}]}