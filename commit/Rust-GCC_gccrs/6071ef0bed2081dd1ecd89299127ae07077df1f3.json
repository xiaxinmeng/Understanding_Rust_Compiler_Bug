{"sha": "6071ef0bed2081dd1ecd89299127ae07077df1f3", "node_id": "C_kwDOANBUbNoAKDYwNzFlZjBiZWQyMDgxZGQxZWNkODkyOTkxMjdhZTA3MDc3ZGYxZjM", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-06-20T22:50:54Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-13T10:01:19Z"}, "message": "[Ada] Fix wrong access check with access-to-unconstrained-array\n\nThe current implementation may create dangling references from a superset\nof the alias set of the dummy pointer-to-array type when it exists.\n\ngcc/ada/\n\n\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <E_Array_Type>: Save\n\tand restore the alias set of the dummy pointer-to-array type.", "tree": {"sha": "8ec4553a66b9ce8337def6aa714e15e1515fd286", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ec4553a66b9ce8337def6aa714e15e1515fd286"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6071ef0bed2081dd1ecd89299127ae07077df1f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6071ef0bed2081dd1ecd89299127ae07077df1f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6071ef0bed2081dd1ecd89299127ae07077df1f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6071ef0bed2081dd1ecd89299127ae07077df1f3/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84d3047b14b85b680ee3c88a9a214bbea9c260fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84d3047b14b85b680ee3c88a9a214bbea9c260fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84d3047b14b85b680ee3c88a9a214bbea9c260fc"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "2510ee8bc67d235b99b887acee2bd448f46d13d1", "filename": "gcc/ada/gcc-interface/decl.cc", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6071ef0bed2081dd1ecd89299127ae07077df1f3/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6071ef0bed2081dd1ecd89299127ae07077df1f3/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.cc?ref=6071ef0bed2081dd1ecd89299127ae07077df1f3", "patch": "@@ -2102,15 +2102,15 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \tconst bool convention_fortran_p\n \t  = (Convention (gnat_entity) == Convention_Fortran);\n \tconst int ndim = Number_Dimensions (gnat_entity);\n-\ttree gnu_template_type;\n-\ttree gnu_ptr_template;\n-\ttree gnu_template_reference, gnu_template_fields, gnu_fat_type;\n+\ttree gnu_fat_type, gnu_template_type, gnu_ptr_template;\n+\ttree gnu_template_reference, gnu_template_fields;\n \ttree *gnu_index_types = XALLOCAVEC (tree, ndim);\n \ttree *gnu_temp_fields = XALLOCAVEC (tree, ndim);\n-\ttree gnu_max_size = size_one_node, tem, obj;\n+\ttree gnu_max_size = size_one_node;\n+\ttree comp_type, tem, obj;\n \tEntity_Id gnat_index;\n+\talias_set_type ptr_set = -1;\n \tint index;\n-\ttree comp_type;\n \n \t/* Create the type for the component now, as it simplifies breaking\n \t   type reference loops.  */\n@@ -2181,6 +2181,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \tif (COMPLETE_TYPE_P (gnu_fat_type))\n \t  {\n \t    tem = TYPE_FIELDS (gnu_fat_type);\n+\t    if (TYPE_ALIAS_SET_KNOWN_P (TREE_TYPE (tem)))\n+\t      ptr_set = TYPE_ALIAS_SET (TREE_TYPE (tem));\n \t    TREE_TYPE (tem) = ptr_type_node;\n \t    TREE_TYPE (DECL_CHAIN (tem)) = gnu_ptr_template;\n \t    TYPE_DECL_SUPPRESS_DEBUG (TYPE_STUB_DECL (gnu_fat_type)) = 0;\n@@ -2389,7 +2391,10 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t  tem = change_qualified_type (tem, TYPE_QUAL_VOLATILE);\n \n \t/* Adjust the type of the pointer-to-array field of the fat pointer\n-\t   and record the aliasing relationships if necessary.  If this is\n+\t   and preserve its existing alias set, if any.  Note that calling\n+\t   again record_component_aliases on the fat pointer is not enough\n+\t   because this may leave dangling references to the existing alias\n+\t   set from types containing a fat pointer component.  If this is\n \t   a packed type implemented specially, then use a ref-all pointer\n \t   type since the implementation type may vary between constrained\n \t   subtypes and unconstrained base type.  */\n@@ -2398,8 +2403,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t    = build_pointer_type_for_mode (tem, ptr_mode, true);\n \telse\n \t  TREE_TYPE (TYPE_FIELDS (gnu_fat_type)) = build_pointer_type (tem);\n-\tif (TYPE_ALIAS_SET_KNOWN_P (gnu_fat_type))\n-\t  record_component_aliases (gnu_fat_type);\n+\tif (ptr_set != -1)\n+\t  TYPE_ALIAS_SET (TREE_TYPE (TYPE_FIELDS (gnu_fat_type))) = ptr_set;\n \n \t/* If the maximum size doesn't overflow, use it.  */\n \tif (gnu_max_size"}]}