{"sha": "19796dddf05ca0349ec84b54b8743eb12106e3fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk3OTZkZGRmMDVjYTAzNDllYzg0YjU0Yjg3NDNlYjEyMTA2ZTNmYw==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2020-06-18T18:15:47Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-27T08:05:20Z"}, "message": "[Ada] Wrong accessibility on 'Access of formal in call\n\ngcc/ada/\n\n\t* exp_ch6.adb (Expand_Call_Helper): Modify addition of the extra\n\taccessibility parameter to take into account the extra\n\taccessibility of formals within the calling subprogram.", "tree": {"sha": "ad2dacf79747065d4092d2cff6fd46a1176e0dd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad2dacf79747065d4092d2cff6fd46a1176e0dd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19796dddf05ca0349ec84b54b8743eb12106e3fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19796dddf05ca0349ec84b54b8743eb12106e3fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19796dddf05ca0349ec84b54b8743eb12106e3fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19796dddf05ca0349ec84b54b8743eb12106e3fc/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "116e8b669eddc96b0294c6cf114372a0d346072e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/116e8b669eddc96b0294c6cf114372a0d346072e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/116e8b669eddc96b0294c6cf114372a0d346072e"}], "stats": {"total": 62, "additions": 16, "deletions": 46}, "files": [{"sha": "57d3884f9c4c8be5d16e5335a401d3cad04f2d8d", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 16, "deletions": 46, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19796dddf05ca0349ec84b54b8743eb12106e3fc/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19796dddf05ca0349ec84b54b8743eb12106e3fc/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=19796dddf05ca0349ec84b54b8743eb12106e3fc", "patch": "@@ -3264,7 +3264,7 @@ package body Exp_Ch6 is\n       Param_Count   : Natural := 0;\n       Parent_Formal : Entity_Id;\n       Parent_Subp   : Entity_Id;\n-      Pref_Entity   : Entity_Id;\n+      Prev_Ult      : Node_Id;\n       Scop          : Entity_Id;\n       Subp          : Entity_Id;\n \n@@ -3824,60 +3824,30 @@ package body Exp_Ch6 is\n                                 Expression (Original_Node (Prev_Orig));\n                            end if;\n \n-                           --  If this is an Access attribute applied to the\n-                           --  the current instance object passed to a type\n-                           --  initialization procedure, then use the level\n-                           --  of the type itself. This is not really correct,\n-                           --  as there should be an extra level parameter\n-                           --  passed in with _init formals (only in the case\n-                           --  where the type is immutably limited), but we\n-                           --  don't have an easy way currently to create such\n-                           --  an extra formal (init procs aren't ever frozen).\n-                           --  For now we just use the level of the type,\n-                           --  which may be too shallow, but that works better\n-                           --  than passing Object_Access_Level of the type,\n-                           --  which can be one level too deep in some cases.\n-                           --  ???\n-\n-                           --  A further case that requires special handling\n-                           --  is the common idiom E.all'access. If E is a\n-                           --  formal of the enclosing subprogram, the\n-                           --  accessibility of the expression is that of E.\n-\n-                           if Is_Entity_Name (Prev_Orig) then\n-                              Pref_Entity := Entity (Prev_Orig);\n-\n-                           elsif Nkind (Prev_Orig) = N_Explicit_Dereference\n-                             and then Is_Entity_Name (Prefix (Prev_Orig))\n-                           then\n-                              Pref_Entity := Entity (Prefix ((Prev_Orig)));\n+                           --  Obtain the ultimate prefix so we can check for\n+                           --  the case where we are taking 'Access of a\n+                           --  component of an anonymous access formal - which\n+                           --  would mean we need to pass said formal's\n+                           --  corresponding extra accessibility formal.\n \n-                           else\n-                              Pref_Entity := Empty;\n-                           end if;\n+                           Prev_Ult := Ultimate_Prefix (Prev_Orig);\n \n-                           if Is_Entity_Name (Prev_Orig)\n-                             and then Is_Type (Entity (Prev_Orig))\n-                           then\n-                              Add_Extra_Actual\n-                                (Expr =>\n-                                   Make_Integer_Literal (Loc,\n-                                     Intval =>\n-                                       Type_Access_Level (Pref_Entity)),\n-                                 EF   => Get_Accessibility (Formal));\n-\n-                           elsif Nkind (Prev_Orig) = N_Explicit_Dereference\n-                             and then Present (Pref_Entity)\n-                             and then Is_Formal (Pref_Entity)\n+                           if Is_Entity_Name (Prev_Ult)\n+                             and then not Is_Type (Entity (Prev_Ult))\n                              and then Present\n-                                        (Get_Accessibility (Pref_Entity))\n+                                        (Get_Accessibility\n+                                          (Entity (Prev_Ult)))\n                            then\n                               Add_Extra_Actual\n                                 (Expr =>\n                                    New_Occurrence_Of\n-                                     (Get_Accessibility (Pref_Entity), Loc),\n+                                     (Get_Accessibility\n+                                        (Entity (Prev_Ult)), Loc),\n                                  EF   => Get_Accessibility (Formal));\n \n+                           --  Normal case, call Object_Access_Level. Note:\n+                           --  should be Dynamic_Accessibility_Level ???\n+\n                            else\n                               Add_Extra_Actual\n                                 (Expr =>"}]}