{"sha": "b1eb3e036c6fb5acc28c714375e6309fb5aa9ec8", "node_id": "C_kwDOANBUbNoAKGIxZWIzZTAzNmM2ZmI1YWNjMjhjNzE0Mzc1ZTYzMDlmYjVhYTllYzg", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-05-12T22:48:18Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-05-13T15:39:41Z"}, "message": "backend: Compile range patterns", "tree": {"sha": "95fa5b04afbe6b66a3faece7399782c8305dab11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95fa5b04afbe6b66a3faece7399782c8305dab11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1eb3e036c6fb5acc28c714375e6309fb5aa9ec8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1eb3e036c6fb5acc28c714375e6309fb5aa9ec8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1eb3e036c6fb5acc28c714375e6309fb5aa9ec8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1eb3e036c6fb5acc28c714375e6309fb5aa9ec8/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9757a898a2c54e3faab00b4cda5e621f94f4960", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9757a898a2c54e3faab00b4cda5e621f94f4960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9757a898a2c54e3faab00b4cda5e621f94f4960"}], "stats": {"total": 134, "additions": 133, "deletions": 1}, "files": [{"sha": "aefa4eb08bbf36e87aa0677defa0fe5d9718d9dc", "filename": "gcc/rust/backend/rust-compile-pattern.cc", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1eb3e036c6fb5acc28c714375e6309fb5aa9ec8/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1eb3e036c6fb5acc28c714375e6309fb5aa9ec8/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc?ref=b1eb3e036c6fb5acc28c714375e6309fb5aa9ec8", "patch": "@@ -105,6 +105,64 @@ CompilePatternCaseLabelExpr::visit (HIR::LiteralPattern &pattern)\n   case_label_expr = build_case_label (lit, NULL_TREE, associated_case_label);\n }\n \n+static tree\n+compile_range_pattern_bound (HIR::RangePatternBound *bound,\n+\t\t\t     Analysis::NodeMapping mappings, Location locus,\n+\t\t\t     Context *ctx)\n+{\n+  tree result = NULL_TREE;\n+  switch (bound->get_bound_type ())\n+    {\n+      case HIR::RangePatternBound::RangePatternBoundType::LITERAL: {\n+\tHIR::RangePatternBoundLiteral &ref\n+\t  = *static_cast<HIR::RangePatternBoundLiteral *> (bound);\n+\n+\tHIR::LiteralExpr *litexpr\n+\t  = new HIR::LiteralExpr (mappings, ref.get_literal (), locus,\n+\t\t\t\t  std::vector<AST::Attribute> ());\n+\n+\tresult = CompileExpr::Compile (litexpr, ctx);\n+      }\n+      break;\n+\n+      case HIR::RangePatternBound::RangePatternBoundType::PATH: {\n+\tHIR::RangePatternBoundPath &ref\n+\t  = *static_cast<HIR::RangePatternBoundPath *> (bound);\n+\n+\tresult = ResolvePathRef::Compile (ref.get_path (), ctx);\n+\n+\t// If the path resolves to a const expression, fold it.\n+\tresult = ConstCtx::fold (result);\n+      }\n+      break;\n+\n+      case HIR::RangePatternBound::RangePatternBoundType::QUALPATH: {\n+\tHIR::RangePatternBoundQualPath &ref\n+\t  = *static_cast<HIR::RangePatternBoundQualPath *> (bound);\n+\n+\tresult = ResolvePathRef::Compile (ref.get_qualified_path (), ctx);\n+\n+\t// If the path resolves to a const expression, fold it.\n+\tresult = ConstCtx::fold (result);\n+      }\n+    }\n+\n+  return result;\n+}\n+\n+void\n+CompilePatternCaseLabelExpr::visit (HIR::RangePattern &pattern)\n+{\n+  tree upper = compile_range_pattern_bound (pattern.get_upper_bound ().get (),\n+\t\t\t\t\t    pattern.get_pattern_mappings (),\n+\t\t\t\t\t    pattern.get_locus (), ctx);\n+  tree lower = compile_range_pattern_bound (pattern.get_lower_bound ().get (),\n+\t\t\t\t\t    pattern.get_pattern_mappings (),\n+\t\t\t\t\t    pattern.get_locus (), ctx);\n+\n+  case_label_expr = build_case_label (lower, upper, associated_case_label);\n+}\n+\n // setup the bindings\n \n void"}, {"sha": "0eb5d61249b2cf06a0f2dbf5bbbe3fb591adfe3c", "filename": "gcc/rust/backend/rust-compile-pattern.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1eb3e036c6fb5acc28c714375e6309fb5aa9ec8/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1eb3e036c6fb5acc28c714375e6309fb5aa9ec8/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h?ref=b1eb3e036c6fb5acc28c714375e6309fb5aa9ec8", "patch": "@@ -37,13 +37,13 @@ class CompilePatternCaseLabelExpr : public HIRCompileBase,\n   void visit (HIR::StructPattern &pattern) override;\n   void visit (HIR::TupleStructPattern &pattern) override;\n   void visit (HIR::WildcardPattern &pattern) override;\n+  void visit (HIR::RangePattern &pattern) override;\n \n   // Empty visit for unused Pattern HIR nodes.\n   void visit (HIR::GroupedPattern &) override {}\n   void visit (HIR::IdentifierPattern &) override {}\n   void visit (HIR::LiteralPattern &) override;\n   void visit (HIR::QualifiedPathInExpression &) override {}\n-  void visit (HIR::RangePattern &) override {}\n   void visit (HIR::ReferencePattern &) override {}\n   void visit (HIR::SlicePattern &) override {}\n   void visit (HIR::TuplePattern &) override {}"}, {"sha": "8fe8f4c766f42e57916f4fbd34e3acdfee19afff", "filename": "gcc/testsuite/rust/execute/torture/match_range1.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1eb3e036c6fb5acc28c714375e6309fb5aa9ec8/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1eb3e036c6fb5acc28c714375e6309fb5aa9ec8/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range1.rs?ref=b1eb3e036c6fb5acc28c714375e6309fb5aa9ec8", "patch": "@@ -0,0 +1,34 @@\n+// { dg-output \"zero to END_RANGE\\nzero to END_RANGE\\nelse\\n\" }\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+const END_RANGE: i32 = 15;\n+\n+fn foo (x: i32) {\n+    match x {\n+        0..=END_RANGE => {\n+            let a = \"zero to END_RANGE\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+\n+        _ => {\n+            let a = \"else\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+    }\n+}\n+\n+fn main () -> i32 {\n+\n+    foo (11);\n+    foo (15);\n+    foo (21);\n+\n+    0\n+}"}, {"sha": "82980c2f0c5931169b4feb351b67265aeeccd38b", "filename": "gcc/testsuite/rust/execute/torture/match_range2.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1eb3e036c6fb5acc28c714375e6309fb5aa9ec8/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1eb3e036c6fb5acc28c714375e6309fb5aa9ec8/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range2.rs?ref=b1eb3e036c6fb5acc28c714375e6309fb5aa9ec8", "patch": "@@ -0,0 +1,40 @@\n+// { dg-output \"lowercase\\nuppercase\\nother\\n\" }\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+const BIG_A: char = 'A';\n+const BIG_Z: char = 'Z';\n+\n+fn bar (x: char) {\n+    match x {\n+\n+        'a'..='z' => {\n+            let a = \"lowercase\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+        BIG_A..=BIG_Z => {\n+            let a = \"uppercase\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+        _ => {\n+            let a = \"other\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf (c);\n+        }\n+    }\n+}\n+\n+fn main () -> i32 {\n+    bar ('b');\n+    bar ('X');\n+    bar ('!');\n+\n+    0\n+}"}]}