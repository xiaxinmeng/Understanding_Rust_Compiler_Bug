{"sha": "f4ed267fa5b82d6dafbc8afc82baf45bfcae549c", "node_id": "C_kwDOANBUbNoAKGY0ZWQyNjdmYTViODJkNmRhZmJjOGFmYzgyYmFmNDViZmNhZTU0OWM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-23T10:05:50Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-23T11:15:30Z"}, "message": "Support SSA name declarations with pointer type\n\nCurrently we fail to parse\n\n  int * _3;\n\nas SSA name and instead get a VAR_DECL because of the way the C\nfrontends declarator specs work.  That causes havoc if those\nsupposed SSA names are used in PHIs or in other places where\nVAR_DECLs are not allowed.  The following fixes the pointer case\nin an ad-hoc way - for more complex type declarators we probably\nhave to find a way to re-use the C frontend grokdeclarator without\nactually creating a VAR_DECL there (or maybe make it create an\nSSA name).\n\nPointers appear too often to be neglected though, thus the following\nad-hoc fix for this.  This also adds verification that we do not\nend up with SSA names without definitions as can happen when\nreducing a GIMPLE testcase.  Instead of working through segfaults\none-by-one we emit errors for all of those at once now.\n\n2022-02-23  Richard Biener  <rguenther@suse.de>\n\ngcc/c\n\t* gimple-parser.cc (c_parser_parse_gimple_body): Diagnose\n\tSSA names without definition.\n\t(c_parser_gimple_declaration): Handle pointer typed SSA names.\n\ngcc/testsuite/\n\t* gcc.dg/gimplefe-49.c: New testcase.\n\t* gcc.dg/gimplefe-error-13.c: Likewise.", "tree": {"sha": "54be74e6d0c9f7ad42ba5bde1aaf5605e3ec37f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54be74e6d0c9f7ad42ba5bde1aaf5605e3ec37f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4ed267fa5b82d6dafbc8afc82baf45bfcae549c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ed267fa5b82d6dafbc8afc82baf45bfcae549c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ed267fa5b82d6dafbc8afc82baf45bfcae549c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ed267fa5b82d6dafbc8afc82baf45bfcae549c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e80c4f1ad9046b0a7c105660cc7b3dcae0fdb8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e80c4f1ad9046b0a7c105660cc7b3dcae0fdb8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e80c4f1ad9046b0a7c105660cc7b3dcae0fdb8f"}], "stats": {"total": 72, "additions": 66, "deletions": 6}, "files": [{"sha": "d1afd42556ce17f45c25c1dd235d296315bff024", "filename": "gcc/c/gimple-parser.cc", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ed267fa5b82d6dafbc8afc82baf45bfcae549c/gcc%2Fc%2Fgimple-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ed267fa5b82d6dafbc8afc82baf45bfcae549c/gcc%2Fc%2Fgimple-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.cc?ref=f4ed267fa5b82d6dafbc8afc82baf45bfcae549c", "patch": "@@ -330,13 +330,17 @@ c_parser_parse_gimple_body (c_parser *cparser, char *gimple_pass,\n \t\t  }\n \t\tgsi_remove (&gsi, true);\n \t      }\n-\t  /* Fill SSA name gaps, putting them on the freelist.  */\n+\t  /* Fill SSA name gaps, putting them on the freelist and diagnose\n+\t     SSA names without definition.  */\n \t  for (unsigned i = 1; i < num_ssa_names; ++i)\n \t    if (!ssa_name (i))\n \t      {\n \t\ttree name = make_ssa_name_fn (cfun, integer_type_node, NULL, i);\n \t\trelease_ssa_name_fn (cfun, name);\n \t      }\n+\t    else if (!SSA_NAME_DEF_STMT (ssa_name (i)))\n+\t      error (\"SSA name %qE with version %d has no definition\",\n+\t\t     ssa_name (i), i);\n \t  /* No explicit virtual operands (yet).  */\n \t  bitmap_obstack_initialize (NULL);\n \t  update_ssa (TODO_update_ssa_only_virtuals);\n@@ -2061,16 +2065,34 @@ c_parser_gimple_declaration (gimple_parser &parser)\n       /* Handle SSA name decls specially, they do not go into the identifier\n          table but we simply build the SSA name for later lookup.  */\n       unsigned version, ver_offset;\n-      if (declarator->kind == cdk_id\n-\t  && is_gimple_reg_type (specs->type)\n-\t  && c_parser_parse_ssa_name_id (declarator->u.id.id,\n+      /* Handle SSA pointer declarations in a very simplistic ways, we\n+\t probably would like to call grokdeclarator in a special mode to\n+\t just build the type of the decl - start_decl already pushes\n+\t the identifier to the bindings for lookup, something we do not\n+\t want.  */\n+      struct c_declarator *id_declarator = declarator;\n+      while (id_declarator->kind == cdk_pointer)\n+\tid_declarator = id_declarator->declarator;\n+      if (id_declarator->kind == cdk_id\n+\t  && (declarator->kind == cdk_pointer\n+\t      || is_gimple_reg_type (specs->type))\n+\t  && c_parser_parse_ssa_name_id (id_declarator->u.id.id,\n \t\t\t\t\t &version, &ver_offset)\n \t  /* The following restricts it to unnamed anonymous SSA names\n \t     which fails parsing of named ones in dumps (we could\n \t     decide to not dump their name for -gimple).  */\n \t  && ver_offset == 0)\n-\tc_parser_parse_ssa_name (parser, declarator->u.id.id, specs->type,\n-\t\t\t\t version, ver_offset);\n+\t{\n+\t  struct c_declarator *p = declarator;\n+\t  tree type = specs->type;\n+\t  while (p->kind == cdk_pointer)\n+\t    {\n+\t      type = build_pointer_type (type);\n+\t      p = p->declarator;\n+\t    }\n+\t  c_parser_parse_ssa_name (parser, id_declarator->u.id.id, type,\n+\t\t\t\t   version, ver_offset);\n+\t}\n       else\n \t{\n \t  tree postfix_attrs = NULL_TREE;"}, {"sha": "d28dc70841eaee61ac1f6234c07ecdbfcc23971c", "filename": "gcc/testsuite/gcc.dg/gimplefe-49.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ed267fa5b82d6dafbc8afc82baf45bfcae549c/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-49.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ed267fa5b82d6dafbc8afc82baf45bfcae549c/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-49.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-49.c?ref=f4ed267fa5b82d6dafbc8afc82baf45bfcae549c", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgimple\" } */\n+\n+__GIMPLE (ssa) int *\n+bar (int i, int a, int b)\n+{\n+  int * _3;\n+  int *p;\n+\n+__BB(2):\n+  if (i_24(D) <= 0)\n+    goto __BB3;\n+  else\n+    goto __BB4;\n+\n+__BB(3):\n+  _3 = &a;\n+  goto __BB5;\n+\n+__BB(4):\n+  p_4 = &b;\n+  goto __BB5;\n+\n+__BB(5):\n+  p_5 = __PHI (__BB3: _3, __BB4: p_4);\n+  return p_5;\n+}"}, {"sha": "637ed322edb24deb997808dc8da2ec75ebe34dc8", "filename": "gcc/testsuite/gcc.dg/gimplefe-error-13.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ed267fa5b82d6dafbc8afc82baf45bfcae549c/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-error-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ed267fa5b82d6dafbc8afc82baf45bfcae549c/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-error-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-error-13.c?ref=f4ed267fa5b82d6dafbc8afc82baf45bfcae549c", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgimple\" } */\n+\n+__GIMPLE (ssa) void\n+bar (void)\n+{\n+  int _3;\n+\n+__BB(2):\n+  return;\n+} /* { dg-error \"version 3 has no definition\" } */"}]}