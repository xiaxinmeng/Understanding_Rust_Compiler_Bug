{"sha": "bea31ffbcb70ab3185f9c323952e3c35f3029326", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVhMzFmZmJjYjcwYWIzMTg1ZjljMzIzOTUyZTNjMzVmMzAyOTMyNg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-11-26T06:40:06Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-11-26T06:40:06Z"}, "message": "Fix for PR libgcj/2024, plus other class name cleanups:\n\n\t* include/jvm.h (_Jv_VerifyFieldSignature,\n\t_Jv_VerifyMethodSignature, _Jv_VerifyClassName,\n\t_Jv_VerifyIdentifier, _Jv_ClassNameSamePackage): Moved from ...\n\t* include/java-interp.h: ... here.\n\t* defineclass.cc (UTF8_PEEK): No longer conditional on\n\tinterpreter.\n\t(_Jv_VerifyOne): Likewise.\n\t(_Jv_VerifyFieldSignature): Likewise.\n\t(_Jv_VerifyMethodSignature): Likewise.\n\t(is_identifier_start): Likewise.\n\t(is_identifier_part): Likewise.\n\t(_Jv_VerifyIdentifier): Likewise.\n\t(_Jv_VerifyClassName): Likewise.\n\t(_Jv_VerifyClassName): Likewise.\n\t(_Jv_ClassNameSamePackage): Likewise.\n\t(_Jv_VerifyClassName): Fail if class name is too long.\n\t* java/lang/natClassLoader.cc (_Jv_NewArrayClass): Disallow array\n\tof void.\n\t* java/lang/natClass.cc (forName): Check syntax of class name.\n\tInclude IllegalArgumentException.h.\n\nFrom-SVN: r47334", "tree": {"sha": "9c832cb85fa044528c84acb63e744ae94c2fc47d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c832cb85fa044528c84acb63e744ae94c2fc47d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bea31ffbcb70ab3185f9c323952e3c35f3029326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea31ffbcb70ab3185f9c323952e3c35f3029326", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bea31ffbcb70ab3185f9c323952e3c35f3029326", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea31ffbcb70ab3185f9c323952e3c35f3029326/comments", "author": null, "committer": null, "parents": [{"sha": "4bdd26e6080d2eb035aeee8e6d7b1300cae32665", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bdd26e6080d2eb035aeee8e6d7b1300cae32665", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bdd26e6080d2eb035aeee8e6d7b1300cae32665"}], "stats": {"total": 204, "additions": 118, "deletions": 86}, "files": [{"sha": "2969f0f47837779fe93bcf41589c3ff097c1042f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea31ffbcb70ab3185f9c323952e3c35f3029326/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea31ffbcb70ab3185f9c323952e3c35f3029326/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=bea31ffbcb70ab3185f9c323952e3c35f3029326", "patch": "@@ -1,3 +1,27 @@\n+2001-11-25  Tom Tromey  <tromey@redhat.com>\n+\n+\tFix for PR libgcj/2024, plus other class name cleanups:\n+\t* include/jvm.h (_Jv_VerifyFieldSignature,\n+\t_Jv_VerifyMethodSignature, _Jv_VerifyClassName,\n+\t_Jv_VerifyIdentifier, _Jv_ClassNameSamePackage): Moved from ...\n+\t* include/java-interp.h: ... here.\n+\t* defineclass.cc (UTF8_PEEK): No longer conditional on\n+\tinterpreter.\n+\t(_Jv_VerifyOne): Likewise.\n+\t(_Jv_VerifyFieldSignature): Likewise.\n+\t(_Jv_VerifyMethodSignature): Likewise.\n+\t(is_identifier_start): Likewise.\n+\t(is_identifier_part): Likewise.\n+\t(_Jv_VerifyIdentifier): Likewise.\n+\t(_Jv_VerifyClassName): Likewise.\n+\t(_Jv_VerifyClassName): Likewise.\n+\t(_Jv_ClassNameSamePackage): Likewise.\n+\t(_Jv_VerifyClassName): Fail if class name is too long.\n+\t* java/lang/natClassLoader.cc (_Jv_NewArrayClass): Disallow array\n+\tof void.\n+\t* java/lang/natClass.cc (forName): Check syntax of class name.\n+\tInclude IllegalArgumentException.h.\n+\n 2001-11-22  Tom Tromey  <tromey@redhat.com>\n \n \t* verify.cc (_Jv_BytecodeVerifier::branch_prepass): Use"}, {"sha": "3a6eaba92276c306f1ec8360ec0ab9ff0f02dc45", "filename": "libjava/defineclass.cc", "status": "modified", "additions": 77, "deletions": 77, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea31ffbcb70ab3185f9c323952e3c35f3029326/libjava%2Fdefineclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea31ffbcb70ab3185f9c323952e3c35f3029326/libjava%2Fdefineclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fdefineclass.cc?ref=bea31ffbcb70ab3185f9c323952e3c35f3029326", "patch": "@@ -22,8 +22,6 @@ details.  */\n \n #include <java-interp.h>\n \n-#ifdef INTERPRETER\n-\n #include <stdlib.h>\n #include <java-cpool.h>\n #include <gcj/cni.h>\n@@ -43,6 +41,8 @@ details.  */\n \n using namespace gcj;\n \n+#ifdef INTERPRETER\n+\n // these go in some separate functions, to avoid having _Jv_InitClass\n // inserted all over the place.\n static void throw_internal_error (char *msg)\n@@ -1368,6 +1368,50 @@ void _Jv_ClassReader::throw_class_format_error (char *msg)\n   ::throw_class_format_error (str);\n }\n \f\n+/** Here we define the exceptions that can be thrown */\n+\n+static void\n+throw_no_class_def_found_error (jstring msg)\n+{\n+  throw (msg\n+\t ? new java::lang::NoClassDefFoundError (msg)\n+\t : new java::lang::NoClassDefFoundError);\n+}\n+\n+static void\n+throw_no_class_def_found_error (char *msg)\n+{\n+  throw_no_class_def_found_error (JvNewStringLatin1 (msg));\n+}\n+\n+static void\n+throw_class_format_error (jstring msg)\n+{\n+  throw (msg\n+\t ? new java::lang::ClassFormatError (msg)\n+\t : new java::lang::ClassFormatError);\n+}\n+\n+static void\n+throw_internal_error (char *msg)\n+{\n+  throw new java::lang::InternalError (JvNewStringLatin1 (msg));\n+}\n+\n+static void throw_incompatible_class_change_error (jstring msg)\n+{\n+  throw new java::lang::IncompatibleClassChangeError (msg);\n+}\n+\n+static void throw_class_circularity_error (jstring msg)\n+{\n+  throw new java::lang::ClassCircularityError (msg);\n+}\n+\n+#endif /* INTERPRETER */\n+\n+\f\n+\n /** This section takes care of verifying integrity of identifiers,\n     signatures, field ddescriptors, and class names */\n \n@@ -1376,7 +1420,7 @@ void _Jv_ClassReader::throw_class_format_error (char *msg)\n      int xxch = UTF8_GET(PTR,LIMIT); \\\n      PTR = xxkeep; xxch; })\n \n-/* verify one element of a type descriptor or signature */\n+/* Verify one element of a type descriptor or signature.  */\n static unsigned char*\n _Jv_VerifyOne (unsigned char* ptr, unsigned char* limit, bool void_ok)\n {\n@@ -1388,7 +1432,8 @@ _Jv_VerifyOne (unsigned char* ptr, unsigned char* limit, bool void_ok)\n   switch (ch)\n     {\n     case 'V':\n-      if (! void_ok) return 0;\n+      if (! void_ok)\n+\treturn 0;\n \n     case 'S': case 'B': case 'I': case 'J':\n     case 'Z': case 'C': case 'F': case 'D': \n@@ -1397,16 +1442,18 @@ _Jv_VerifyOne (unsigned char* ptr, unsigned char* limit, bool void_ok)\n     case 'L':\n       {\n \tunsigned char *start = ptr, *end;\n-\tdo {\n-\t  if (ptr > limit)\n-\t    return 0;\n-\t\t\n-\t  end = ptr;\n-\t\t\n-\t  if ((ch = UTF8_GET (ptr, limit)) == -1)\n-\t    return 0;\n-\t\t\n-\t} while (ch != ';');\n+\tdo\n+\t  {\n+\t    if (ptr > limit)\n+\t      return 0;\n+\n+\t    end = ptr;\n+\n+\t    if ((ch = UTF8_GET (ptr, limit)) == -1)\n+\t      return 0;\n+\n+\t  }\n+\twhile (ch != ';');\n \tif (! _Jv_VerifyClassName (start, (unsigned short) (end-start)))\n \t  return 0;\n       }\n@@ -1415,18 +1462,15 @@ _Jv_VerifyOne (unsigned char* ptr, unsigned char* limit, bool void_ok)\n     case '[':\n       return _Jv_VerifyOne (ptr, limit, false);\n       break;\n-\t\n+\n     default:\n       return 0;\n     }\n \n   return ptr;\n-    \n }\n \n-\n-/** verification and loading procedures **/\n-\n+/* Verification and loading procedures.  */\n bool\n _Jv_VerifyFieldSignature (_Jv_Utf8Const*sig)\n {\n@@ -1449,7 +1493,7 @@ _Jv_VerifyMethodSignature (_Jv_Utf8Const*sig)\n \n   while (ptr && UTF8_PEEK (ptr, limit) != ')')\n     ptr = _Jv_VerifyOne (ptr, limit, false);\n-    \n+\n   if (UTF8_GET (ptr, limit) != ')')\n     return false;\n \n@@ -1459,9 +1503,8 @@ _Jv_VerifyMethodSignature (_Jv_Utf8Const*sig)\n   return ptr == limit;\n }\n \n-/* we try to avoid calling the Character methods all the time, \n-   in fact, they will only be called for non-standard things */\n-\n+/* We try to avoid calling the Character methods all the time, in\n+   fact, they will only be called for non-standard things. */\n static __inline__ int \n is_identifier_start (int c)\n {\n@@ -1522,7 +1565,10 @@ _Jv_VerifyClassName (unsigned char* ptr, _Jv_ushort length)\n \n   if ('[' == UTF8_PEEK (ptr, limit))\n     {\n-      if (! _Jv_VerifyOne (++ptr, limit, false))\n+      unsigned char *end = _Jv_VerifyOne (++ptr, limit, false);\n+      // _Jv_VerifyOne must leave us looking at the terminating nul\n+      // byte.\n+      if (! end || *end)\n \treturn false;\n       else\n         return true;\n@@ -1554,9 +1600,8 @@ _Jv_VerifyClassName (_Jv_Utf8Const *name)\n \t\t\t      (_Jv_ushort) name->length);\n }\n \n-/** returns true, if name1 and name2 represents classes in the same\n-    package. */\n-    \n+/* Returns true, if NAME1 and NAME2 represent classes in the same\n+   package.  */\n bool\n _Jv_ClassNameSamePackage (_Jv_Utf8Const *name1, _Jv_Utf8Const *name2)\n {\n@@ -1571,22 +1616,22 @@ _Jv_ClassNameSamePackage (_Jv_Utf8Const *name1, _Jv_Utf8Const *name2)\n \n     if (ch1 == '.')\n       last1 = ptr1;\n-\t\n+\n     else if (ch1 == -1)\n       return false;\n   }\n \n-  // now the length of name1's package name is len\n+  // Now the length of NAME1's package name is LEN.\n   int len = last1 - (unsigned char*) name1->data;\n \n-  // if this is longer than name2, then we're off\n+  // If this is longer than NAME2, then we're off.\n   if (len > name2->length)\n     return false;\n \n-  // then compare the first len bytes for equality\n+  // Then compare the first len bytes for equality.\n   if (memcmp ((void*) name1->data, (void*) name2->data, len) == 0)\n     {\n-      // check that there are no .'s after position len in name2\n+      // Check that there are no .'s after position LEN in NAME2.\n \n       unsigned char* ptr2 = (unsigned char*) name2->data + len;\n       unsigned char* limit2 =\n@@ -1602,48 +1647,3 @@ _Jv_ClassNameSamePackage (_Jv_Utf8Const *name1, _Jv_Utf8Const *name2)\n     }\n   return false;\n }\n-\n-\n-\f\n-/** Here we define the exceptions that can be thrown */\n-\n-static void\n-throw_no_class_def_found_error (jstring msg)\n-{\n-  throw (msg\n-\t ? new java::lang::NoClassDefFoundError (msg)\n-\t : new java::lang::NoClassDefFoundError);\n-}\n-\n-static void\n-throw_no_class_def_found_error (char *msg)\n-{\n-  throw_no_class_def_found_error (JvNewStringLatin1 (msg));\n-}\n-\n-static void\n-throw_class_format_error (jstring msg)\n-{\n-  throw (msg\n-\t ? new java::lang::ClassFormatError (msg)\n-\t : new java::lang::ClassFormatError);\n-}\n-\n-static void\n-throw_internal_error (char *msg)\n-{\n-  throw new java::lang::InternalError (JvNewStringLatin1 (msg));\n-}\n-\n-static void throw_incompatible_class_change_error (jstring msg)\n-{\n-  throw new java::lang::IncompatibleClassChangeError (msg);\n-}\n-\n-static void throw_class_circularity_error (jstring msg)\n-{\n-  throw new java::lang::ClassCircularityError (msg);\n-}\n-\n-#endif /* INTERPRETER */\n-"}, {"sha": "bc1f3ca1cf4680f79021e1f54bc672e24449c507", "filename": "libjava/include/java-interp.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea31ffbcb70ab3185f9c323952e3c35f3029326/libjava%2Finclude%2Fjava-interp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea31ffbcb70ab3185f9c323952e3c35f3029326/libjava%2Finclude%2Fjava-interp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-interp.h?ref=bea31ffbcb70ab3185f9c323952e3c35f3029326", "patch": "@@ -33,12 +33,6 @@ _Jv_IsInterpretedClass (jclass c)\n \n struct _Jv_ResolvedMethod;\n \n-bool _Jv_VerifyFieldSignature (_Jv_Utf8Const*sig);\n-bool _Jv_VerifyMethodSignature (_Jv_Utf8Const*sig);\n-bool _Jv_VerifyClassName (unsigned char* ptr, _Jv_ushort length);\n-bool _Jv_VerifyClassName (_Jv_Utf8Const *name);\n-bool _Jv_VerifyIdentifier (_Jv_Utf8Const *);\n-bool _Jv_ClassNameSamePackage (_Jv_Utf8Const *name1, _Jv_Utf8Const *name2);\n void _Jv_DefineClass (jclass, jbyteArray, jint, jint);\n \n void _Jv_InitField (jobject, jclass, int);"}, {"sha": "1cba08cf675ee689088359304614376ec2717205", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea31ffbcb70ab3185f9c323952e3c35f3029326/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea31ffbcb70ab3185f9c323952e3c35f3029326/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=bea31ffbcb70ab3185f9c323952e3c35f3029326", "patch": "@@ -341,6 +341,14 @@ void _Jv_SetCurrentJNIEnv (_Jv_JNIEnv *);\n struct _Jv_JavaVM;\n _Jv_JavaVM *_Jv_GetJavaVM (); \n \n+// Some verification functions from defineclass.cc.\n+bool _Jv_VerifyFieldSignature (_Jv_Utf8Const*sig);\n+bool _Jv_VerifyMethodSignature (_Jv_Utf8Const*sig);\n+bool _Jv_VerifyClassName (unsigned char* ptr, _Jv_ushort length);\n+bool _Jv_VerifyClassName (_Jv_Utf8Const *name);\n+bool _Jv_VerifyIdentifier (_Jv_Utf8Const *);\n+bool _Jv_ClassNameSamePackage (_Jv_Utf8Const *name1, _Jv_Utf8Const *name2);\n+\n #ifdef ENABLE_JVMPI\n #include \"jvmpi.h\"\n "}, {"sha": "e7f9a35cc3caad1e36e1c248b23679ad2ce42477", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea31ffbcb70ab3185f9c323952e3c35f3029326/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea31ffbcb70ab3185f9c323952e3c35f3029326/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=bea31ffbcb70ab3185f9c323952e3c35f3029326", "patch": "@@ -34,6 +34,7 @@ details.  */\n #include <java/lang/ExceptionInInitializerError.h>\n #include <java/lang/IllegalAccessException.h>\n #include <java/lang/IllegalAccessError.h>\n+#include <java/lang/IllegalArgumentException.h>\n #include <java/lang/IncompatibleClassChangeError.h>\n #include <java/lang/InstantiationException.h>\n #include <java/lang/NoClassDefFoundError.h>\n@@ -75,10 +76,11 @@ java::lang::Class::forName (jstring className, jboolean initialize,\n   char buffer[length];\n   _Jv_GetStringUTFRegion (className, 0, length, buffer);\n \n-  // FIXME: should check syntax of CLASSNAME and throw\n-  // IllegalArgumentException on failure.\n   _Jv_Utf8Const *name = _Jv_makeUtf8Const (buffer, length);\n \n+  if (! _Jv_VerifyClassName (name))\n+    throw new java::lang::ClassNotFoundException (className);\n+\n   // FIXME: should use bootstrap class loader if loader is null.\n   jclass klass = (buffer[0] == '[' \n \t\t  ? _Jv_FindClassFromSignature (name->data, loader)"}, {"sha": "c9a58726a3c9a2da055db6ee767395ce7775938a", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea31ffbcb70ab3185f9c323952e3c35f3029326/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea31ffbcb70ab3185f9c323952e3c35f3029326/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=bea31ffbcb70ab3185f9c323952e3c35f3029326", "patch": "@@ -598,7 +598,11 @@ _Jv_NewArrayClass (jclass element, java::lang::ClassLoader *loader,\n     return;\n \n   if (element->isPrimitive())\n-    len = 3;\n+    {\n+      if (element == JvPrimClass (void))\n+\tthrow new java::lang::ClassNotFoundException ();\n+      len = 3;\n+    }\n   else\n     len = element->name->length + 5;\n "}]}