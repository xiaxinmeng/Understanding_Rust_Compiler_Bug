{"sha": "594726e49e3716e204648651f8fb55b24adf558d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk0NzI2ZTQ5ZTM3MTZlMjA0NjQ4NjUxZjhmYjU1YjI0YWRmNTU4ZA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-09-06T13:21:38Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-09-06T13:21:38Z"}, "message": "[Patch ARM] Add \"type\" attribute to Everything!\n\ngcc/\n\t* config/arm/types.md: Add \"no_insn\", \"multiple\" and \"untyped\"\n\ttypes.\n\t* config/arm/arm-fixed.md: Add type attribute to all insn\n\tpatterns.\n\t* config/arm/vfp.md: Add type attribute to all insn patterns.\n\t* config/arm/arm.md: Add type attribute to all insn patterns.\n\t* config/arm/thumb2.md: Add type attribute to all insn patterns.\n\t* config/arm/arm1020e.md: Update with new attributes.\n\t* config/arm/arm1026ejs.md: Update with new attributes.\n\t* config/arm/arm1136jfs.md: Update with new attributes.\n\t* config/arm/arm926ejs.md: Update with new attributes.\n\t* config/arm/cortex-a15.md: Update with new attributes.\n\t* config/arm/cortex-a5.md: Update with new attributes.\n\t* config/arm/cortex-a53.md: Update with new attributes.\n\t* config/arm/cortex-a7.md: Update with new attributes.\n\t* config/arm/cortex-a8.md: Update with new attributes.\n\t* config/arm/cortex-a9.md: Update with new attributes.\n\t* config/arm/cortex-m4.md: Update with new attributes.\n\t* config/arm/cortex-r4.md: Update with new attributes.\n\t* config/arm/fa526.md: Update with new attributes.\n\t* config/arm/fa606te.md: Update with new attributes.\n\t* config/arm/fa626te.md: Update with new attributes.\n\t* config/arm/fa726te.md: Update with new attributes.\n\nFrom-SVN: r202323", "tree": {"sha": "398d855b0783f107bd55db01bb6105ffe1b654db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/398d855b0783f107bd55db01bb6105ffe1b654db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/594726e49e3716e204648651f8fb55b24adf558d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/594726e49e3716e204648651f8fb55b24adf558d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/594726e49e3716e204648651f8fb55b24adf558d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/594726e49e3716e204648651f8fb55b24adf558d/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c83b6738a30cff17008d301bfe4cdd9ae45e727", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c83b6738a30cff17008d301bfe4cdd9ae45e727", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c83b6738a30cff17008d301bfe4cdd9ae45e727"}], "stats": {"total": 1012, "additions": 752, "deletions": 260}, "files": [{"sha": "28b0896f7d2f0ca5877932d7a98445fd52672d3c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 264, "deletions": 0, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594726e49e3716e204648651f8fb55b24adf558d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594726e49e3716e204648651f8fb55b24adf558d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=594726e49e3716e204648651f8fb55b24adf558d", "patch": "@@ -1,3 +1,267 @@\n+2013-09-06  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/arm/types.md: Add \"no_insn\", \"multiple\" and \"untyped\"\n+\ttypes.\n+\t* config/arm/arm-fixed.md: Add type attribute to all insn\n+\tpatterns.\n+\t(add<mode>3): Add type attribute.\n+\t(add<mode>3): Likewise.\n+\t(usadd<mode>3): Likewise.\n+\t(ssadd<mode>3): Likewise.\n+\t(sub<mode>3): Likewise.\n+\t(sub<mode>3): Likewise.\n+\t(ussub<mode>3): Likewise.\n+\t(sssub<mode>3): Likewise.\n+\t(ssmulsa3): Likewise.\n+\t(usmulusa3): Likewise.\n+\t(arm_usatsihi): Likewise.\n+\t* config/arm/vfp.md\n+\t(*movdi_vfp): Add types for all instructions.\n+\t(*movdi_vfp_cortexa8): Likewise.\n+\t(*movhf_vfp_neon): Likewise.\n+\t(*movhf_vfp): Likewise.\n+\t(*movdf_vfp): Likewise.\n+\t(*thumb2_movdf_vfp): Likewise.\n+\t(*thumb2_movdfcc_vfp): Likewise.\n+\t* config/arm/arm.md: Add type attribute to all insn patterns.\n+\t(*thumb1_adddi3): Add type attribute.\n+\t(*arm_adddi3): Likewise.\n+\t(*adddi_sesidi_di): Likewise.\n+\t(*adddi_zesidi_di): Likewise.\n+\t(*thumb1_addsi3): Likewise.\n+\t(addsi3_compare0): Likewise.\n+\t(*addsi3_compare0_scratch): Likewise.\n+\t(*compare_negsi_si): Likewise.\n+\t(cmpsi2_addneg): Likewise.\n+\t(*addsi3_carryin_<optab>): Likewise.\n+\t(*addsi3_carryin_alt2_<optab>): Likewise.\n+\t(*addsi3_carryin_clobercc_<optab>): Likewise.\n+\t(*subsi3_carryin): Likewise.\n+\t(*subsi3_carryin_const): Likewise.\n+\t(*subsi3_carryin_compare): Likewise.\n+\t(*subsi3_carryin_compare_const): Likewise.\n+\t(*arm_subdi3): Likewise.\n+\t(*thumb_subdi3): Likewise.\n+\t(*subdi_di_zesidi): Likewise.\n+\t(*subdi_di_sesidi): Likewise.\n+\t(*subdi_zesidi_di): Likewise.\n+\t(*subdi_sesidi_di): Likewise.\n+\t(*subdi_zesidi_ze): Likewise.\n+\t(thumb1_subsi3_insn): Likewise.\n+\t(*arm_subsi3_insn): Likewise.\n+\t(*anddi3_insn): Likewise.\n+\t(*anddi_zesidi_di): Likewise.\n+\t(*anddi_sesdi_di): Likewise.\n+\t(*ne_zeroextracts): Likewise.\n+\t(*ne_zeroextracts): Likewise.\n+\t(*ite_ne_zeroextr): Likewise.\n+\t(*ite_ne_zeroextr): Likewise.\n+\t(*anddi_notdi_di): Likewise.\n+\t(*anddi_notzesidi): Likewise.\n+\t(*anddi_notsesidi): Likewise.\n+\t(andsi_notsi_si): Likewise.\n+\t(thumb1_bicsi3): Likewise.\n+\t(*iordi3_insn): Likewise.\n+\t(*iordi_zesidi_di): Likewise.\n+\t(*iordi_sesidi_di): Likewise.\n+\t(*thumb1_iorsi3_insn): Likewise.\n+\t(*xordi3_insn): Likewise.\n+\t(*xordi_zesidi_di): Likewise.\n+\t(*xordi_sesidi_di): Likewise.\n+\t(*arm_xorsi3): Likewise.\n+\t(*andsi_iorsi3_no): Likewise.\n+\t(*smax_0): Likewise.\n+\t(*smax_m1): Likewise.\n+\t(*arm_smax_insn): Likewise.\n+\t(*smin_0): Likewise.\n+\t(*arm_smin_insn): Likewise.\n+\t(*arm_umaxsi3): Likewise.\n+\t(*arm_uminsi3): Likewise.\n+\t(*minmax_arithsi): Likewise.\n+\t(*minmax_arithsi_): Likewise.\n+\t(*satsi_<SAT:code>): Likewise.\n+\t(arm_ashldi3_1bit): Likewise.\n+\t(arm_ashrdi3_1bit): Likewise.\n+\t(arm_lshrdi3_1bit): Likewise.\n+\t(*arm_negdi2): Likewise.\n+\t(*thumb1_negdi2): Likewise.\n+\t(*arm_negsi2): Likewise.\n+\t(*thumb1_negsi2): Likewise.\n+\t(*negdi_extendsid): Likewise.\n+\t(*negdi_zero_extend): Likewise.\n+\t(*arm_abssi2): Likewise.\n+\t(*thumb1_abssi2): Likewise.\n+\t(*arm_neg_abssi2): Likewise.\n+\t(*thumb1_neg_abss): Likewise.\n+\t(one_cmpldi2): Likewise.\n+\t(extend<mode>di2): Likewise.\n+\t(*compareqi_eq0): Likewise.\n+\t(*arm_extendhisi2addsi): Likewise.\n+\t(*arm_movdi): Likewise.\n+\t(*thumb1_movdi_insn): Likewise.\n+\t(*arm_movt): Likewise.\n+\t(*thumb1_movsi_insn): Likewise.\n+\t(pic_add_dot_plus_four): Likewise.\n+\t(pic_add_dot_plus_eight): Likewise.\n+\t(tls_load_dot_plus_eight): Likewise.\n+\t(*thumb1_movhi_insn): Likewise.\n+\t(*thumb1_movsf_insn): Likewise.\n+\t(*movdf_soft_insn): Likewise.\n+\t(*thumb_movdf_insn): Likewise.\n+\t(cbranchsi4_insn): Likewise.\n+\t(cbranchsi4_scratch): Likewise.\n+\t(*negated_cbranchsi4): Likewise.\n+\t(*tbit_cbranch): Likewise.\n+\t(*tlobits_cbranch): Likewise.\n+\t(*tstsi3_cbranch): Likewise.\n+\t(*cbranchne_decr1): Likewise.\n+\t(*addsi3_cbranch): Likewise.\n+\t(*addsi3_cbranch_scratch): Likewise.\n+\t(*arm_cmpdi_insn): Likewise.\n+\t(*arm_cmpdi_unsig): Likewise.\n+\t(*arm_cmpdi_zero): Likewise.\n+\t(*thumb_cmpdi_zero): Likewise.\n+\t(*deleted_compare): Likewise.\n+\t(*mov_scc): Likewise.\n+\t(*mov_negscc): Likewise.\n+\t(*mov_notscc): Likewise.\n+\t(*cstoresi_eq0_thumb1_insn): Likewise.\n+\t(cstoresi_nltu_thumb1): Likewise.\n+\t(cstoresi_ltu_thu): Likewise.\n+\t(thumb1_addsi3_addgeu): Likewise.\n+\t(*arm_jump): Likewise.\n+\t(*thumb_jump): Likewise.\n+\t(*check_arch2): Likewise.\n+\t(arm_casesi_internal): Likewise.\n+\t(thumb1_casesi_dispatch): Likewise.\n+\t(*arm_indirect_jump): Likewise.\n+\t(*thumb1_indirect_jump): Likewise.\n+\t(nop): Likewise.\n+\t(*and_scc): Likewise.\n+\t(*ior_scc): Likewise.\n+\t(*compare_scc): Likewise.\n+\t(*cond_move): Likewise.\n+\t(*cond_arith): Likewise.\n+\t(*cond_sub): Likewise.\n+\t(*cmp_ite0): Likewise.\n+\t(*cmp_ite1): Likewise.\n+\t(*cmp_and): Likewise.\n+\t(*cmp_ior): Likewise.\n+\t(*ior_scc_scc): Likewise.\n+\t(*ior_scc_scc_cmp): Likewise.\n+\t(*and_scc_scc): Likewise.\n+\t(*and_scc_scc_cmp): Likewise.\n+\t(*and_scc_scc_nod): Likewise.\n+\t(*negscc): Likewise.\n+\t(movcond_addsi): Likewise.\n+\t(movcond): Likewise.\n+\t(*ifcompare_plus_move): Likewise.\n+\t(*if_plus_move): Likewise.\n+\t(*ifcompare_move_plus): Likewise.\n+\t(*if_move_plus): Likewise.\n+\t(*ifcompare_arith_arith): Likewise.\n+\t(*if_arith_arith): Likewise.\n+\t(*ifcompare_arith_move): Likewise.\n+\t(*if_arith_move): Likewise.\n+\t(*ifcompare_move_arith): Likewise.\n+\t(*if_move_arith): Likewise.\n+\t(*ifcompare_move_not): Likewise.\n+\t(*if_move_not): Likewise.\n+\t(*ifcompare_not_move): Likewise.\n+\t(*if_not_move): Likewise.\n+\t(*ifcompare_shift_move): Likewise.\n+\t(*if_shift_move): Likewise.\n+\t(*ifcompare_move_shift): Likewise.\n+\t(*if_move_shift): Likewise.\n+\t(*ifcompare_shift_shift): Likewise.\n+\t(*ifcompare_not_arith): Likewise.\n+\t(*ifcompare_arith_not): Likewise.\n+\t(*if_arith_not): Likewise.\n+\t(*ifcompare_neg_move): Likewise.\n+\t(*if_neg_move): Likewise.\n+\t(*ifcompare_move_neg): Likewise.\n+\t(*if_move_neg): Likewise.\n+\t(prologue_thumb1_interwork): Likewise.\n+\t(*cond_move_not): Likewise.\n+\t(*sign_extract_onebit): Likewise.\n+\t(*not_signextract_onebit): Likewise.\n+\t(stack_tie): Likewise.\n+\t(align_4): Likewise.\n+\t(align_8): Likewise.\n+\t(consttable_end): Likewise.\n+\t(consttable_1): Likewise.\n+\t(consttable_2): Likewise.\n+\t(consttable_4): Likewise.\n+\t(consttable_8): Likewise.\n+\t(consttable_16): Likewise.\n+\t(*thumb1_tablejump): Likewise.\n+\t(prefetch): Likewise.\n+\t(force_register_use): Likewise.\n+\t(thumb_eh_return): Likewise.\n+\t(load_tp_hard): Likewise.\n+\t(load_tp_soft): Likewise.\n+\t(tlscall): Likewise.\n+\t(*arm_movtas_ze): Likewise.\n+\t(*arm_rev): Likewise.\n+\t(*arm_revsh): Likewise.\n+\t(*arm_rev16): Likewise.\n+\t* config/arm/thumb2.md\n+\t(*thumb2_smaxsi3): Likewise.\n+\t(*thumb2_sminsi3): Likewise.\n+\t(*thumb32_umaxsi3): Likewise.\n+\t(*thumb2_uminsi3): Likewise.\n+\t(*thumb2_negdi2): Likewise.\n+\t(*thumb2_abssi2): Likewise.\n+\t(*thumb2_neg_abss): Likewise.\n+\t(*thumb2_movsi_insn): Likewise.\n+\t(tls_load_dot_plus_four): Likewise.\n+\t(*thumb2_movhi_insn): Likewise.\n+\t(*thumb2_mov_scc): Likewise.\n+\t(*thumb2_mov_negs): Likewise.\n+\t(*thumb2_mov_negs): Likewise.\n+\t(*thumb2_mov_nots): Likewise.\n+\t(*thumb2_mov_nots): Likewise.\n+\t(*thumb2_movsicc_): Likewise.\n+\t(*thumb2_movsfcc_soft_insn): Likewise.\n+\t(*thumb2_indirect_jump): Likewise.\n+\t(*thumb2_and_scc): Likewise.\n+\t(*thumb2_ior_scc): Likewise.\n+\t(*thumb2_ior_scc_strict_it): Likewise.\n+\t(*thumb2_cond_move): Likewise.\n+\t(*thumb2_cond_arith): Likewise.\n+\t(*thumb2_cond_ari): Likewise.\n+\t(*thumb2_cond_sub): Likewise.\n+\t(*thumb2_negscc): Likewise.\n+\t(*thumb2_movcond): Likewise.\n+\t(thumb2_casesi_internal): Likewise.\n+\t(thumb2_casesi_internal_pic): Likewise.\n+\t(*thumb2_alusi3_short): Likewise.\n+\t(*thumb2_mov<mode>_shortim): Likewise.\n+\t(*thumb2_addsi_short): Likewise.\n+\t(*thumb2_subsi_short): Likewise.\n+\t(thumb2_addsi3_compare0): Likewise.\n+\t(*thumb2_cbz): Likewise.\n+\t(*thumb2_cbnz): Likewise.\n+\t(*thumb2_one_cmplsi2_short): Likewise.\n+\t(*thumb2_negsi2_short): Likewise.\n+\t(*orsi_notsi_si): Likewise.\n+\t* config/arm/arm1020e.md: Update with new attributes.\n+\t* config/arm/arm1026ejs.md: Update with new attributes.\n+\t* config/arm/arm1136jfs.md: Update with new attributes.\n+\t* config/arm/arm926ejs.md: Update with new attributes.\n+\t* config/arm/cortex-a15.md: Update with new attributes.\n+\t* config/arm/cortex-a5.md: Update with new attributes.\n+\t* config/arm/cortex-a53.md: Update with new attributes.\n+\t* config/arm/cortex-a7.md: Update with new attributes.\n+\t* config/arm/cortex-a8.md: Update with new attributes.\n+\t* config/arm/cortex-a9.md: Update with new attributes.\n+\t* config/arm/cortex-m4.md: Update with new attributes.\n+\t* config/arm/cortex-r4.md: Update with new attributes.\n+\t* config/arm/fa526.md: Update with new attributes.\n+\t* config/arm/fa606te.md: Update with new attributes.\n+\t* config/arm/fa626te.md: Update with new attributes.\n+\t* config/arm/fa726te.md: Update with new attributes.\n+\n 2013-09-06  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64-simd.md"}, {"sha": "3972a850990a6ede8b74fbc43d302564c4ec1a07", "filename": "gcc/config/arm/arm-fixed.md", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Farm-fixed.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Farm-fixed.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-fixed.md?ref=594726e49e3716e204648651f8fb55b24adf558d", "patch": "@@ -25,7 +25,8 @@\n   \"TARGET_32BIT\"\n   \"add%?\\\\t%0, %1, %2\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"yes,no\")])\n+   (set_attr \"predicable_short_it\" \"yes,no\")\n+   (set_attr \"type\" \"alu_reg\")])\n \n (define_insn \"add<mode>3\"\n   [(set (match_operand:ADDSUB 0 \"s_register_operand\" \"=r\")\n@@ -34,7 +35,8 @@\n   \"TARGET_INT_SIMD\"\n   \"sadd<qaddsub_suf>%?\\\\t%0, %1, %2\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")])\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"alu_reg\")])\n \n (define_insn \"usadd<mode>3\"\n   [(set (match_operand:UQADDSUB 0 \"s_register_operand\" \"=r\")\n@@ -43,7 +45,8 @@\n   \"TARGET_INT_SIMD\"\n   \"uqadd<qaddsub_suf>%?\\\\t%0, %1, %2\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")])\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"alu_reg\")])\n \n (define_insn \"ssadd<mode>3\"\n   [(set (match_operand:QADDSUB 0 \"s_register_operand\" \"=r\")\n@@ -52,7 +55,8 @@\n   \"TARGET_INT_SIMD\"\n   \"qadd<qaddsub_suf>%?\\\\t%0, %1, %2\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")])\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"alu_reg\")])\n \n (define_insn \"sub<mode>3\"\n   [(set (match_operand:FIXED 0 \"s_register_operand\" \"=l,r\")\n@@ -61,7 +65,8 @@\n   \"TARGET_32BIT\"\n   \"sub%?\\\\t%0, %1, %2\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"yes,no\")])\n+   (set_attr \"predicable_short_it\" \"yes,no\")\n+   (set_attr \"type\" \"alu_reg\")])\n \n (define_insn \"sub<mode>3\"\n   [(set (match_operand:ADDSUB 0 \"s_register_operand\" \"=r\")\n@@ -70,7 +75,8 @@\n   \"TARGET_INT_SIMD\"\n   \"ssub<qaddsub_suf>%?\\\\t%0, %1, %2\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")])\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"alu_reg\")])\n \n (define_insn \"ussub<mode>3\"\n   [(set (match_operand:UQADDSUB 0 \"s_register_operand\" \"=r\")\n@@ -80,7 +86,8 @@\n   \"TARGET_INT_SIMD\"\n   \"uqsub<qaddsub_suf>%?\\\\t%0, %1, %2\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")])\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"alu_reg\")])\n \n (define_insn \"sssub<mode>3\"\n   [(set (match_operand:QADDSUB 0 \"s_register_operand\" \"=r\")\n@@ -89,7 +96,8 @@\n   \"TARGET_INT_SIMD\"\n   \"qsub<qaddsub_suf>%?\\\\t%0, %1, %2\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")])\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"alu_reg\")])\n \n ;; Fractional multiplies.\n \n@@ -246,6 +254,7 @@\n   return \"\";\n }\n   [(set_attr \"conds\" \"clob\")\n+   (set_attr \"type\" \"multiple\")\n    (set (attr \"length\")\n \t(if_then_else (eq_attr \"is_thumb\" \"yes\")\n \t\t      (if_then_else (match_test \"arm_restrict_it\")\n@@ -305,6 +314,7 @@\n   return \"\";\n }\n   [(set_attr \"conds\" \"clob\")\n+   (set_attr \"type\" \"multiple\")\n    (set (attr \"length\")\n \t(if_then_else (eq_attr \"is_thumb\" \"yes\")\n \t\t      (if_then_else (match_test \"arm_restrict_it\")\n@@ -414,5 +424,6 @@\n   \"TARGET_INT_SIMD\"\n   \"usat%?\\\\t%0, #16, %1\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")]\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"alu_imm\")]\n )"}, {"sha": "5ed8ee7dc6293bf93869545bef4cd3f60966908b", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 342, "deletions": 188, "changes": 530, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=594726e49e3716e204648651f8fb55b24adf558d", "patch": "@@ -461,7 +461,8 @@\n   ]\n   \"TARGET_THUMB1\"\n   \"add\\\\t%Q0, %Q0, %Q2\\;adc\\\\t%R0, %R0, %R2\"\n-  [(set_attr \"length\" \"4\")]\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*arm_adddi3\"\n@@ -489,7 +490,8 @@\n     operands[2] = gen_lowpart (SImode, operands[2]);\n   }\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*adddi_sesidi_di\"\n@@ -518,7 +520,8 @@\n     operands[2] = gen_lowpart (SImode, operands[2]);\n   }\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*adddi_zesidi_di\"\n@@ -545,7 +548,8 @@\n     operands[2] = gen_lowpart (SImode, operands[2]);\n   }\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_expand \"addsi3\"\n@@ -671,7 +675,9 @@\n     operands[3] = GEN_INT (offset);\n     operands[2] = GEN_INT (INTVAL (operands[2]) - offset);\n   }\n-  [(set_attr \"length\" \"2,2,2,2,2,2,2,4,4,4\")]\n+  [(set_attr \"length\" \"2,2,2,2,2,2,2,4,4,4\")\n+   (set_attr \"type\" \"alus_imm,alus_imm,alus_reg,alus_reg,alus_reg,\n+\t\t     alus_reg,alus_reg,multiple,multiple,multiple\")]\n )\n \n ;; Reloading and elimination of the frame pointer can\n@@ -702,7 +708,7 @@\n    sub%.\\\\t%0, %1, #%n2\n    add%.\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"alus_imm,alus_imm,*\")]\n+   (set_attr \"type\" \"alus_imm,alus_imm,alus_reg\")]\n )\n \n (define_insn \"*addsi3_compare0_scratch\"\n@@ -718,8 +724,7 @@\n    cmn%?\\\\t%0, %1\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"alus_imm,alus_imm,*\")\n-   ]\n+   (set_attr \"type\" \"alus_imm,alus_imm,alus_reg\")]\n )\n \n (define_insn \"*compare_negsi_si\"\n@@ -733,7 +738,8 @@\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"arch\" \"t2,*\")\n    (set_attr \"length\" \"2,4\")\n-   (set_attr \"predicable_short_it\" \"yes,no\")]\n+   (set_attr \"predicable_short_it\" \"yes,no\")\n+   (set_attr \"type\" \"alus_reg\")]\n )\n \n ;; This is the canonicalization of addsi3_compare0_for_combiner when the\n@@ -750,7 +756,8 @@\n   \"@\n    add%.\\\\t%0, %1, %3\n    sub%.\\\\t%0, %1, #%n3\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"alus_reg\")]\n )\n \n ;; Convert the sequence\n@@ -884,7 +891,8 @@\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"arch\" \"t2,*,*\")\n    (set_attr \"length\" \"4\")\n-   (set_attr \"predicable_short_it\" \"yes,no,no\")]\n+   (set_attr \"predicable_short_it\" \"yes,no,no\")\n+   (set_attr \"type\" \"adc_reg,adc_reg,adc_imm\")]\n )\n \n (define_insn \"*addsi3_carryin_alt2_<optab>\"\n@@ -901,7 +909,8 @@\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"arch\" \"t2,*,*\")\n    (set_attr \"length\" \"4\")\n-   (set_attr \"predicable_short_it\" \"yes,no,no\")]\n+   (set_attr \"predicable_short_it\" \"yes,no,no\")\n+   (set_attr \"type\" \"adc_reg,adc_reg,adc_imm\")]\n )\n \n (define_insn \"*addsi3_carryin_shift_<optab>\"\n@@ -930,7 +939,8 @@\n    (clobber (reg:CC CC_REGNUM))]\n    \"TARGET_32BIT\"\n    \"adc%.\\\\t%0, %1, %2\"\n-   [(set_attr \"conds\" \"set\")]\n+   [(set_attr \"conds\" \"set\")\n+    (set_attr \"type\" \"adcs_reg\")]\n )\n \n (define_insn \"*subsi3_carryin\"\n@@ -945,7 +955,8 @@\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"arch\" \"*,a\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")]\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"adc_reg,adc_imm\")]\n )\n \n (define_insn \"*subsi3_carryin_const\"\n@@ -955,7 +966,8 @@\n                   (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n   \"TARGET_32BIT\"\n   \"sbc\\\\t%0, %1, #%B2\"\n-  [(set_attr \"conds\" \"use\")]\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"type\" \"adc_imm\")]\n )\n \n (define_insn \"*subsi3_carryin_compare\"\n@@ -968,7 +980,8 @@\n                   (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n   \"TARGET_32BIT\"\n   \"sbcs\\\\t%0, %1, %2\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"adcs_reg\")]\n )\n \n (define_insn \"*subsi3_carryin_compare_const\"\n@@ -981,7 +994,8 @@\n                   (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n   \"TARGET_32BIT\"\n   \"sbcs\\\\t%0, %1, #%B2\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"adcs_imm\")]\n )\n \n (define_insn \"*subsi3_carryin_shift\"\n@@ -1088,7 +1102,8 @@\n     operands[2] = gen_lowpart (SImode, operands[2]);\n    }\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*thumb_subdi3\"\n@@ -1098,7 +1113,8 @@\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_THUMB1\"\n   \"sub\\\\t%Q0, %Q0, %Q2\\;sbc\\\\t%R0, %R0, %R2\"\n-  [(set_attr \"length\" \"4\")]\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*subdi_di_zesidi\"\n@@ -1123,7 +1139,8 @@\n     operands[5] = GEN_INT (~0);\n    }\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*subdi_di_sesidi\"\n@@ -1149,7 +1166,8 @@\n     operands[1] = gen_lowpart (SImode, operands[1]);\n   }\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*subdi_zesidi_di\"\n@@ -1175,7 +1193,8 @@\n     operands[1] = gen_lowpart (SImode, operands[1]);\n   }\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*subdi_sesidi_di\"\n@@ -1204,7 +1223,8 @@\n     operands[1] = gen_lowpart (SImode, operands[1]);\n   }\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*subdi_zesidi_zesidi\"\n@@ -1227,7 +1247,8 @@\n        operands[0] = gen_lowpart (SImode, operands[0]);\n   }\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_expand \"subsi3\"\n@@ -1258,7 +1279,9 @@\n   \"TARGET_THUMB1\"\n   \"sub\\\\t%0, %1, %2\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"conds\" \"set\")])\n+   (set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"alus_reg\")]\n+)\n \n ; ??? Check Thumb-2 split length\n (define_insn_and_split \"*arm_subsi3_insn\"\n@@ -1288,7 +1311,7 @@\n    (set_attr \"arch\" \"t2,t2,t2,t2,*,*,*,*,*\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"yes,yes,yes,yes,no,no,no,no,no\")\n-   (set_attr \"type\"  \"*,*,*,*,alu_imm,alu_imm,*,*,alu_imm\")]\n+   (set_attr \"type\" \"alu_reg,alu_reg,alu_reg,alu_reg,alu_imm,alu_imm,alu_reg,alu_reg,multiple\")]\n )\n \n (define_peephole2\n@@ -2140,7 +2163,7 @@\n                                            gen_highpart_mode (SImode, DImode, operands[2]));\n \n   }\"\n-  [(set_attr \"type\" \"neon_int_1,neon_int_1,*,*,*,*,neon_int_1,neon_int_1\")\n+  [(set_attr \"type\" \"neon_int_1,neon_int_1,multiple,multiple,multiple,multiple,neon_int_1,neon_int_1\")\n    (set_attr \"arch\" \"neon_for_64bits,neon_for_64bits,*,*,*,*,\n                      avoid_neon_for_64bits,avoid_neon_for_64bits\")\n    (set_attr \"length\" \"*,*,8,8,8,8,*,*\")\n@@ -2165,7 +2188,8 @@\n     operands[0] = gen_lowpart (SImode, operands[0]);\n     operands[1] = gen_lowpart (SImode, operands[1]);\n   }\"\n-  [(set_attr \"length\" \"8\")]\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*anddi_sesdi_di\"\n@@ -2175,7 +2199,8 @@\n \t\t(match_operand:DI  1 \"s_register_operand\" \"0,r\")))]\n   \"TARGET_32BIT\"\n   \"#\"\n-  [(set_attr \"length\" \"8\")]\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_expand \"andsi3\"\n@@ -2386,7 +2411,8 @@\n    (set (attr \"length\")\n \t(if_then_else (eq_attr \"is_thumb\" \"yes\")\n \t\t      (const_int 12)\n-\t\t      (const_int 8)))]\n+\t\t      (const_int 8)))\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*ne_zeroextractsi_shifted\"\n@@ -2411,7 +2437,8 @@\n   operands[2] = GEN_INT (32 - INTVAL (operands[2]));\n   \"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*ite_ne_zeroextractsi\"\n@@ -2449,7 +2476,8 @@\n \t\t\t << INTVAL (operands[3])); \n   \"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*ite_ne_zeroextractsi_shifted\"\n@@ -2476,7 +2504,8 @@\n   operands[2] = GEN_INT (32 - INTVAL (operands[2]));\n   \"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_split\n@@ -2816,7 +2845,8 @@\n     operands[2] = gen_lowpart (SImode, operands[2]);\n   }\"\n   [(set_attr \"length\" \"8\")\n-   (set_attr \"predicable\" \"yes\")]\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*anddi_notzesidi_di\"\n@@ -2844,7 +2874,8 @@\n   }\"\n   [(set_attr \"length\" \"4,8\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")]\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*anddi_notsesidi_di\"\n@@ -2868,7 +2899,8 @@\n   }\"\n   [(set_attr \"length\" \"8\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")]\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"andsi_notsi_si\"\n@@ -2878,7 +2910,8 @@\n   \"TARGET_32BIT\"\n   \"bic%?\\\\t%0, %1, %2\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")]\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"logic_reg\")]\n )\n \n (define_insn \"thumb1_bicsi3\"\n@@ -2888,7 +2921,9 @@\n   \"TARGET_THUMB1\"\n   \"bic\\\\t%0, %1\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"conds\" \"set\")])\n+   (set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"logics_reg\")]\n+)\n \n (define_insn \"andsi_not_shiftsi_si\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -2978,7 +3013,7 @@\n                                            gen_highpart_mode (SImode, DImode, operands[2]));\n \n   }\"\n-  [(set_attr \"type\" \"neon_int_1,neon_int_1,*,*,*,*,neon_int_1,neon_int_1\")\n+  [(set_attr \"type\" \"neon_int_1,neon_int_1,multiple,multiple,multiple,multiple,neon_int_1,neon_int_1\")\n    (set_attr \"length\" \"*,*,8,8,8,8,*,*\")\n    (set_attr \"arch\" \"neon_for_64bits,neon_for_64bits,*,*,*,*,avoid_neon_for_64bits,avoid_neon_for_64bits\")]\n )\n@@ -2994,7 +3029,8 @@\n    #\"\n   [(set_attr \"length\" \"4,8\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")]\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"logic_reg,multiple\")]\n )\n \n (define_insn \"*iordi_sesidi_di\"\n@@ -3005,7 +3041,8 @@\n   \"TARGET_32BIT\"\n   \"#\"\n   [(set_attr \"length\" \"8\")\n-   (set_attr \"predicable\" \"yes\")]\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_expand \"iorsi3\"\n@@ -3073,7 +3110,8 @@\n   \"TARGET_THUMB1\"\n   \"orr\\\\t%0, %2\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"conds\" \"set\")])\n+   (set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"logics_reg\")])\n \n (define_peephole2\n   [(match_scratch:SI 3 \"r\")\n@@ -3157,7 +3195,7 @@\n \n   }\"\n   [(set_attr \"length\" \"*,8,8,8,8,*\")\n-   (set_attr \"type\" \"neon_int_1,*,*,*,*,neon_int_1\")\n+   (set_attr \"type\" \"neon_int_1,multiple,multiple,multiple,multiple,neon_int_1\")\n    (set_attr \"arch\" \"neon_for_64bits,*,*,*,*,avoid_neon_for_64bits\")]\n )\n \n@@ -3172,7 +3210,8 @@\n    #\"\n   [(set_attr \"length\" \"4,8\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")]\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"logic_reg\")]\n )\n \n (define_insn \"*xordi_sesidi_di\"\n@@ -3183,7 +3222,8 @@\n   \"TARGET_32BIT\"\n   \"#\"\n   [(set_attr \"length\" \"8\")\n-   (set_attr \"predicable\" \"yes\")]\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_expand \"xorsi3\"\n@@ -3236,7 +3276,7 @@\n   [(set_attr \"length\" \"4,4,4,16\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no,yes,no,no\")\n-   (set_attr \"type\"  \"logic_imm,logic_reg,logic_reg,logic_reg\")]\n+   (set_attr \"type\"  \"logic_imm,logic_reg,logic_reg,multiple\")]\n )\n \n (define_insn \"*thumb1_xorsi3_insn\"\n@@ -3305,7 +3345,8 @@\n   [(set_attr \"length\" \"8\")\n    (set_attr \"ce_count\" \"2\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")]\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n ; ??? Are these four splitters still beneficial when the Thumb-2 bitfield\n@@ -3442,7 +3483,8 @@\n   \"TARGET_32BIT\"\n   \"bic%?\\\\t%0, %1, %1, asr #31\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")]\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"logic_shift_reg\")]\n )\n \n (define_insn \"*smax_m1\"\n@@ -3452,7 +3494,8 @@\n   \"TARGET_32BIT\"\n   \"orr%?\\\\t%0, %1, %1, asr #31\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")]\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"logic_shift_reg\")]\n )\n \n (define_insn_and_split \"*arm_smax_insn\"\n@@ -3473,7 +3516,8 @@\n                          (match_dup 2)))]\n   \"\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8,12\")]\n+   (set_attr \"length\" \"8,12\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_expand \"sminsi3\"\n@@ -3501,7 +3545,8 @@\n   \"TARGET_32BIT\"\n   \"and%?\\\\t%0, %1, %1, asr #31\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")]\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"logic_shift_reg\")]\n )\n \n (define_insn_and_split \"*arm_smin_insn\"\n@@ -3522,7 +3567,8 @@\n                          (match_dup 2)))]\n   \"\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8,12\")]\n+   (set_attr \"length\" \"8,12\")\n+   (set_attr \"type\" \"multiple,multiple\")]\n )\n \n (define_expand \"umaxsi3\"\n@@ -3554,7 +3600,8 @@\n                          (match_dup 2)))]\n   \"\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8,8,12\")]\n+   (set_attr \"length\" \"8,8,12\")\n+   (set_attr \"type\" \"store1\")]\n )\n \n (define_expand \"uminsi3\"\n@@ -3586,7 +3633,8 @@\n                          (match_dup 2)))]\n   \"\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8,8,12\")]\n+   (set_attr \"length\" \"8,8,12\")\n+   (set_attr \"type\" \"store1\")]\n )\n \n (define_insn \"*store_minmaxsi\"\n@@ -3655,7 +3703,8 @@\n    (set (attr \"length\")\n \t(if_then_else (eq_attr \"is_thumb\" \"yes\")\n \t\t      (const_int 14)\n-\t\t      (const_int 12)))]\n+\t\t      (const_int 12)))\n+   (set_attr \"type\" \"multiple\")]\n )\n \n ; Reject the frame pointer in operand[1], since reloading this after\n@@ -3703,7 +3752,8 @@\n    (set (attr \"length\")\n \t(if_then_else (eq_attr \"is_thumb\" \"yes\")\n \t\t      (const_int 14)\n-\t\t      (const_int 12)))]\n+\t\t      (const_int 12)))\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_code_iterator SAT [smin smax])\n@@ -3732,7 +3782,8 @@\n     return \"usat%?\\t%0, %1, %3\";\n }\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")]\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"alus_imm\")]\n )\n \n (define_insn \"*satsi_<SAT:code>_shift\"\n@@ -3838,7 +3889,8 @@\n     operands[1] = gen_lowpart (SImode, operands[1]);\n   }\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_expand \"ashlsi3\"\n@@ -3935,7 +3987,8 @@\n     operands[1] = gen_lowpart (SImode, operands[1]);\n   }\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*rrx\"\n@@ -4040,7 +4093,8 @@\n     operands[1] = gen_lowpart (SImode, operands[1]);\n   }\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_expand \"lshrsi3\"\n@@ -4593,7 +4647,8 @@\n     operands[1] = gen_lowpart (SImode, operands[1]);\n   }\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*thumb1_negdi2\"\n@@ -4602,7 +4657,8 @@\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_THUMB1\"\n   \"mov\\\\t%R0, #0\\;neg\\\\t%Q0, %Q1\\;sbc\\\\t%R0, %R1\"\n-  [(set_attr \"length\" \"6\")]\n+  [(set_attr \"length\" \"6\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_expand \"negsi2\"\n@@ -4620,15 +4676,17 @@\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"yes,no\")\n    (set_attr \"arch\" \"t2,*\")\n-   (set_attr \"length\" \"4\")]\n+   (set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"alu_reg\")]\n )\n \n (define_insn \"*thumb1_negsi2\"\n   [(set (match_operand:SI         0 \"register_operand\" \"=l\")\n \t(neg:SI (match_operand:SI 1 \"register_operand\" \"l\")))]\n   \"TARGET_THUMB1\"\n   \"neg\\\\t%0, %1\"\n-  [(set_attr \"length\" \"2\")]\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"type\" \"alu_imm\")]\n )\n \n (define_expand \"negsf2\"\n@@ -4686,7 +4744,8 @@\n      DONE;\n   }\n   [(set_attr \"length\" \"8,8,4,4\")\n-   (set_attr \"arch\" \"a,a,t2,t2\")]\n+   (set_attr \"arch\" \"a,a,t2,t2\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*negdi_zero_extendsidi\"\n@@ -4708,7 +4767,8 @@\n     operands[0] = gen_lowpart (SImode, operands[0]);\n   }\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")]   ;; length in thumb is 4\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]   ;; length in thumb is 4\n )\n \n ;; abssi2 doesn't really clobber the condition codes if a different register\n@@ -4793,7 +4853,8 @@\n   [(set_attr \"conds\" \"clob,*\")\n    (set_attr \"shift\" \"1\")\n    (set_attr \"predicable\" \"no, yes\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*thumb1_abssi2\"\n@@ -4807,7 +4868,8 @@\n    (set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))\n    (set (match_dup 0) (xor:SI (match_dup 0) (match_dup 2)))]\n   \"\"\n-  [(set_attr \"length\" \"6\")]\n+  [(set_attr \"length\" \"6\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*arm_neg_abssi2\"\n@@ -4863,7 +4925,8 @@\n   [(set_attr \"conds\" \"clob,*\")\n    (set_attr \"shift\" \"1\")\n    (set_attr \"predicable\" \"no, yes\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*thumb1_neg_abssi2\"\n@@ -4877,7 +4940,8 @@\n    (set (match_dup 0) (minus:SI (match_dup 2) (match_dup 1)))\n    (set (match_dup 0) (xor:SI (match_dup 0) (match_dup 2)))]\n   \"\"\n-  [(set_attr \"length\" \"6\")]\n+  [(set_attr \"length\" \"6\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_expand \"abssf2\"\n@@ -4926,7 +4990,7 @@\n   }\"\n   [(set_attr \"length\" \"*,8,8,*\")\n    (set_attr \"predicable\" \"no,yes,yes,no\")\n-   (set_attr \"type\" \"neon_int_1,*,*,neon_int_1\")\n+   (set_attr \"type\" \"neon_int_1,multiple,multiple,neon_int_1\")\n    (set_attr \"arch\" \"neon_for_64bits,*,*,avoid_neon_for_64bits\")]\n )\n \n@@ -5113,7 +5177,8 @@\n    (set_attr \"ce_count\" \"2\")\n    (set_attr \"shift\" \"1\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"arch\" \"neon_for_64bits,*,a,t,avoid_neon_for_64bits\")]\n+   (set_attr \"arch\" \"neon_for_64bits,*,a,t,avoid_neon_for_64bits\")\n+   (set_attr \"type\" \"multiple,mov_reg,multiple,multiple,multiple\")]\n )\n \n ;; Splits for all extensions to DImode\n@@ -5418,7 +5483,8 @@\n   \"tst%?\\\\t%0, #255\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")]\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"logic_imm\")]\n )\n \n (define_expand \"extendhisi2\"\n@@ -5615,6 +5681,7 @@\n \t\t (match_operand:SI 2 \"s_register_operand\" \"r\")))]\n   \"TARGET_INT_SIMD\"\n   \"sxtah%?\\\\t%0, %2, %1\"\n+  [(set_attr \"type\" \"alu_shift_reg\")]\n )\n \n (define_expand \"extendqihi2\"\n@@ -5935,7 +6002,7 @@\n     }\n   \"\n   [(set_attr \"length\" \"8,12,16,8,8\")\n-   (set_attr \"type\" \"*,*,*,load2,store2\")\n+   (set_attr \"type\" \"multiple,multiple,multiple,load2,store2\")\n    (set_attr \"arm_pool_range\" \"*,*,*,1020,*\")\n    (set_attr \"arm_neg_pool_range\" \"*,*,*,1004,*\")\n    (set_attr \"thumb2_pool_range\" \"*,*,*,4094,*\")\n@@ -6075,7 +6142,7 @@\n     }\n   }\"\n   [(set_attr \"length\" \"4,4,6,2,2,6,4,4\")\n-   (set_attr \"type\" \"*,mov_reg,*,load2,store2,load2,store2,mov_reg\")\n+   (set_attr \"type\" \"multiple,mov_reg,multiple,load2,store2,load2,store2,mov_reg\")\n    (set_attr \"pool_range\" \"*,*,*,*,*,1018,*,*\")]\n )\n \n@@ -6173,7 +6240,8 @@\n   \"movt%?\\t%0, #:upper16:%c2\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n-   (set_attr \"length\" \"4\")]\n+   (set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"mov_imm\")]\n )\n \n (define_insn \"*arm_movsi_insn\"\n@@ -6245,7 +6313,7 @@\n    str\\\\t%1, %0\n    mov\\\\t%0, %1\"\n   [(set_attr \"length\" \"2,2,4,4,2,2,2,2,2\")\n-   (set_attr \"type\" \"*,*,*,*,load1,store1,load1,store1,*\")\n+   (set_attr \"type\" \"mov_reg,mov_imm,multiple,multiple,load1,store1,load1,store1,mov_reg\")\n    (set_attr \"pool_range\" \"*,*,*,*,*,*,1018,*,*\")\n    (set_attr \"conds\" \"set,clob,*,*,nocond,nocond,nocond,nocond,nocond\")])\n \n@@ -6401,7 +6469,8 @@\n \t\t\t\t     INTVAL (operands[2]));\n   return \\\"add\\\\t%0, %|pc\\\";\n   \"\n-  [(set_attr \"length\" \"2\")]\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"type\" \"alu_reg\")]\n )\n \n (define_insn \"pic_add_dot_plus_eight\"\n@@ -6416,7 +6485,8 @@\n \t\t\t\t       INTVAL (operands[2]));\n     return \\\"add%?\\\\t%0, %|pc, %1\\\";\n   \"\n-  [(set_attr \"predicable\" \"yes\")]\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"alu_reg\")]\n )\n \n (define_insn \"tls_load_dot_plus_eight\"\n@@ -6431,7 +6501,8 @@\n \t\t\t\t       INTVAL (operands[2]));\n     return \\\"ldr%?\\\\t%0, [%|pc, %1]\\t\\t@ tls_load_dot_plus_eight\\\";\n   \"\n-  [(set_attr \"predicable\" \"yes\")]\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"load1\")]\n )\n \n ;; PIC references to local variables can generate pic_add_dot_plus_eight\n@@ -6838,7 +6909,7 @@\n       return \\\"ldrh\t%0, %1\\\";\n     }\"\n   [(set_attr \"length\" \"2,4,2,2,2,2\")\n-   (set_attr \"type\" \"*,load1,store1,*,*,*\")\n+   (set_attr \"type\" \"alus_imm,load1,store1,mov_reg,mov_reg,mov_imm\")\n    (set_attr \"conds\" \"clob,nocond,nocond,nocond,nocond,clob\")])\n \n \n@@ -7264,7 +7335,7 @@\n    mov\\\\t%0, %1\n    mov\\\\t%0, %1\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"type\" \"*,load1,store1,load1,store1,mov_reg,mov_reg\")\n+   (set_attr \"type\" \"alus_imm,load1,store1,load1,store1,mov_reg,mov_reg\")\n    (set_attr \"pool_range\" \"*,*,*,1018,*,*,*\")\n    (set_attr \"conds\" \"clob,nocond,nocond,nocond,nocond,nocond,nocond\")]\n )\n@@ -7352,7 +7423,7 @@\n     }\n   \"\n   [(set_attr \"length\" \"8,12,16,8,8\")\n-   (set_attr \"type\" \"*,*,*,load2,store2\")\n+   (set_attr \"type\" \"multiple,multiple,multiple,load2,store2\")\n    (set_attr \"arm_pool_range\" \"*,*,*,1020,*\")\n    (set_attr \"thumb2_pool_range\" \"*,*,*,1018,*\")\n    (set_attr \"arm_neg_pool_range\" \"*,*,*,1004,*\")\n@@ -7396,7 +7467,7 @@\n     }\n   \"\n   [(set_attr \"length\" \"4,2,2,6,4,4\")\n-   (set_attr \"type\" \"*,load2,store2,load2,store2,mov_reg\")\n+   (set_attr \"type\" \"multiple,load2,store2,load2,store2,mov_reg\")\n    (set_attr \"pool_range\" \"*,*,*,1018,*,*\")]\n )\n \f\n@@ -7704,7 +7775,8 @@\n \t        (and (ge (minus (match_dup 3) (pc)) (const_int -2040))\n \t\t     (le (minus (match_dup 3) (pc)) (const_int 2048)))\n \t\t(const_int 6)\n-\t\t(const_int 8))))]\n+\t\t(const_int 8))))\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"cbranchsi4_scratch\"\n@@ -7740,7 +7812,8 @@\n \t        (and (ge (minus (match_dup 3) (pc)) (const_int -2040))\n \t\t     (le (minus (match_dup 3) (pc)) (const_int 2048)))\n \t\t(const_int 6)\n-\t\t(const_int 8))))]\n+\t\t(const_int 8))))\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*negated_cbranchsi4\"\n@@ -7775,7 +7848,8 @@\n \t        (and (ge (minus (match_dup 3) (pc)) (const_int -2040))\n \t\t     (le (minus (match_dup 3) (pc)) (const_int 2048)))\n \t\t(const_int 6)\n-\t\t(const_int 8))))]\n+\t\t(const_int 8))))\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*tbit_cbranch\"\n@@ -7819,7 +7893,8 @@\n \t        (and (ge (minus (match_dup 3) (pc)) (const_int -2040))\n \t\t     (le (minus (match_dup 3) (pc)) (const_int 2048)))\n \t\t(const_int 6)\n-\t\t(const_int 8))))]\n+\t\t(const_int 8))))\n+   (set_attr \"type\" \"multiple\")]\n )\n   \n (define_insn \"*tlobits_cbranch\"\n@@ -7863,7 +7938,8 @@\n \t        (and (ge (minus (match_dup 3) (pc)) (const_int -2040))\n \t\t     (le (minus (match_dup 3) (pc)) (const_int 2048)))\n \t\t(const_int 6)\n-\t\t(const_int 8))))]\n+\t\t(const_int 8))))\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*tstsi3_cbranch\"\n@@ -7900,7 +7976,8 @@\n \t        (and (ge (minus (match_dup 2) (pc)) (const_int -2040))\n \t\t     (le (minus (match_dup 2) (pc)) (const_int 2048)))\n \t\t(const_int 6)\n-\t\t(const_int 8))))]\n+\t\t(const_int 8))))\n+   (set_attr \"type\" \"multiple\")]\n )\n   \n (define_insn \"*cbranchne_decr1\"\n@@ -8003,7 +8080,8 @@\n \t   (and (ge (minus (match_dup 4) (pc)) (const_int -2038))\n \t\t(le (minus (match_dup 4) (pc)) (const_int 2048)))\n \t   (const_int 8)\n-\t   (const_int 10)))])]\n+\t   (const_int 10)))])\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*addsi3_cbranch\"\n@@ -8084,7 +8162,8 @@\n \t   (and (ge (minus (match_dup 5) (pc)) (const_int -2038))\n \t\t(le (minus (match_dup 5) (pc)) (const_int 2048)))\n \t   (const_int 8)\n-\t   (const_int 10)))))]\n+\t   (const_int 10)))))\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*addsi3_cbranch_scratch\"\n@@ -8152,7 +8231,8 @@\n \t   (and (ge (minus (match_dup 4) (pc)) (const_int -2040))\n \t\t(le (minus (match_dup 4) (pc)) (const_int 2048)))\n \t   (const_int 6)\n-\t   (const_int 8))))]\n+\t   (const_int 8))))\n+   (set_attr \"type\" \"multiple\")]\n )\n \n \n@@ -8255,7 +8335,8 @@\n     operands[2] = gen_lowpart (SImode, operands[2]);\n   }\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*arm_cmpdi_unsigned\"\n@@ -8283,7 +8364,8 @@\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"enabled_for_depr_it\" \"yes,yes,no\")\n    (set_attr \"arch\" \"t2,t2,*\")\n-   (set_attr \"length\" \"6,6,8\")]\n+   (set_attr \"length\" \"6,6,8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*arm_cmpdi_zero\"\n@@ -8293,7 +8375,8 @@\n    (clobber (match_scratch:SI 1 \"=r\"))]\n   \"TARGET_32BIT\"\n   \"orr%.\\\\t%1, %Q0, %R0\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"logics_reg\")]\n )\n \n (define_insn \"*thumb_cmpdi_zero\"\n@@ -8304,7 +8387,8 @@\n   \"TARGET_THUMB1\"\n   \"orr\\\\t%1, %Q0, %R0\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"length\" \"2\")]\n+   (set_attr \"length\" \"2\")\n+   (set_attr \"type\" \"logics_reg\")]\n )\n \n ; This insn allows redundant compares to be removed by cse, nothing should\n@@ -8318,7 +8402,8 @@\n   \"TARGET_32BIT\"\n   \"\\\\t%@ deleted compare\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"length\" \"0\")]\n+   (set_attr \"length\" \"0\")\n+   (set_attr \"type\" \"no_insn\")]\n )\n \n \f\n@@ -8419,7 +8504,8 @@\n                          (const_int 0)))]\n   \"\"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*mov_negscc\"\n@@ -8437,7 +8523,8 @@\n     operands[3] = GEN_INT (~0);\n   }\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*mov_notscc\"\n@@ -8456,7 +8543,8 @@\n     operands[4] = GEN_INT (~0);\n   }\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_expand \"cstoresi4\"\n@@ -8661,7 +8749,8 @@\n   \"@\n    neg\\\\t%0, %1\\;adc\\\\t%0, %0, %1\n    neg\\\\t%2, %1\\;adc\\\\t%0, %1, %2\"\n-  [(set_attr \"length\" \"4\")]\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*cstoresi_ne0_thumb1_insn\"\n@@ -8681,7 +8770,8 @@\n \t\t\t(match_operand:SI 2 \"thumb1_cmp_operand\" \"lI*h,*r\"))))]\n   \"TARGET_THUMB1\"\n   \"cmp\\\\t%1, %2\\;sbc\\\\t%0, %0, %0\"\n-  [(set_attr \"length\" \"4\")]\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"cstoresi_ltu_thumb1\"\n@@ -8695,7 +8785,8 @@\n \t(neg:SI (ltu:SI (match_dup 1) (match_dup 2))))\n    (set (match_dup 0) (neg:SI (match_dup 3)))]\n   \"operands[3] = gen_reg_rtx (SImode);\"\n-  [(set_attr \"length\" \"4\")]\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n ;; Used as part of the expansion of thumb les sequence.\n@@ -8707,7 +8798,8 @@\n \t\t\t (match_operand:SI 4 \"thumb1_cmp_operand\" \"lI\"))))]\n   \"TARGET_THUMB1\"\n   \"cmp\\\\t%3, %4\\;adc\\\\t%0, %1, %2\"\n-  [(set_attr \"length\" \"4\")]\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n \f\n@@ -8925,7 +9017,8 @@\n \t\t(and (ge (minus (match_dup 0) (pc)) (const_int -2044))\n \t\t     (le (minus (match_dup 0) (pc)) (const_int 2048))))\n \t   (const_int 2)\n-\t   (const_int 4)))]\n+\t   (const_int 4)))\n+   (set_attr \"type\" \"branch\")]\n )\n \n (define_insn \"*thumb_jump\"\n@@ -8947,7 +9040,8 @@\n \t    (and (ge (minus (match_dup 0) (pc)) (const_int -2044))\n \t\t (le (minus (match_dup 0) (pc)) (const_int 2048)))\n   \t    (const_int 2)\n-\t    (const_int 4)))]\n+\t    (const_int 4)))\n+   (set_attr \"type\" \"branch\")]\n )\n \n (define_expand \"call\"\n@@ -9431,7 +9525,8 @@\n   \"TARGET_ARM\"\n   \"teq\\\\t%|r0, %|r0\\;teq\\\\t%|pc, %|pc\"\n   [(set_attr \"length\" \"8\")\n-   (set_attr \"conds\" \"set\")]\n+   (set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n ;; Call subroutine returning any type.\n@@ -9622,7 +9717,8 @@\n     return   \\\"cmp\\\\t%0, %1\\;ldrls\\\\t%|pc, [%|pc, %0, asl #2]\\;b\\\\t%l3\\\";\n   \"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"12\")]\n+   (set_attr \"length\" \"12\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_expand \"thumb1_casesi_internal_pic\"\n@@ -9653,7 +9749,8 @@\n               (clobber (reg:SI LR_REGNUM))])]\n   \"TARGET_THUMB1\"\n   \"* return thumb1_output_casesi(operands);\"\n-  [(set_attr \"length\" \"4\")]\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_expand \"indirect_jump\"\n@@ -9679,7 +9776,8 @@\n \t(match_operand:SI 0 \"s_register_operand\" \"r\"))]\n   \"TARGET_ARM\"\n   \"mov%?\\\\t%|pc, %0\\\\t%@ indirect register jump\"\n-  [(set_attr \"predicable\" \"yes\")]\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"branch\")]\n )\n \n (define_insn \"*load_indirect_jump\"\n@@ -9700,7 +9798,8 @@\n   \"TARGET_THUMB1\"\n   \"mov\\\\tpc, %0\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"2\")]\n+   (set_attr \"length\" \"2\")\n+   (set_attr \"type\" \"branch\")]\n )\n \n \f\n@@ -9719,7 +9818,8 @@\n   [(set (attr \"length\")\n \t(if_then_else (eq_attr \"is_thumb\" \"yes\")\n \t\t      (const_int 2)\n-\t\t      (const_int 4)))]\n+\t\t      (const_int 4)))\n+   (set_attr \"type\" \"mov_reg\")]\n )\n \n \f\n@@ -9884,7 +9984,7 @@\n     operands[5] = gen_rtx_fmt_ee (rc, VOIDmode, operands[2], const0_rtx);\n   }\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"type\" \"mov_reg\")\n+   (set_attr \"type\" \"multiple\")\n    (set_attr \"length\" \"8\")]\n )\n \n@@ -9918,7 +10018,8 @@\n     operands[5] = gen_rtx_fmt_ee (rc, VOIDmode, operands[2], const0_rtx);\n   }\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"length\" \"4,8\")]\n+   (set_attr \"length\" \"4,8\")\n+   (set_attr \"type\" \"logic_imm,multiple\")]\n )\n \n ; A series of splitters for the compare_scc pattern below.  Note that\n@@ -10020,7 +10121,9 @@\n   else\n     rc = reverse_condition (rc);\n   operands[4] = gen_rtx_fmt_ee (rc, VOIDmode, tmp1, const0_rtx);\n-})\n+}\n+  [(set_attr \"type\" \"multiple\")]\n+)\n \n ;; Attempt to improve the sequence generated by the compare_scc splitters\n ;; not to use conditional execution.\n@@ -10137,7 +10240,7 @@\n     return \\\"\\\";\n   \"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"type\" \"mov_reg\")\n+   (set_attr \"type\" \"mov_reg,mov_reg,multiple\")\n    (set_attr \"length\" \"4,4,8\")]\n )\n \n@@ -10164,7 +10267,8 @@\n     return \\\"%i5%d4\\\\t%0, %1, #1\\\";\n   \"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"12\")]\n+   (set_attr \"length\" \"12\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*cond_sub\"\n@@ -10182,7 +10286,8 @@\n     return \\\"sub%d4\\\\t%0, %1, #1\\\";\n   \"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8,12\")]\n+   (set_attr \"length\" \"8,12\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*cmp_ite0\"\n@@ -10246,6 +10351,7 @@\n   }\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"arch\" \"t2,t2,t2,t2,t2,any,any,any,any\")\n+   (set_attr \"type\" \"multiple\")\n    (set_attr_alternative \"length\"\n       [(const_int 6)\n        (const_int 8)\n@@ -10345,7 +10451,8 @@\n            (const_int 10))\n        (if_then_else (eq_attr \"is_thumb\" \"no\")\n            (const_int 8)\n-           (const_int 10))])]\n+           (const_int 10))])\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*cmp_and\"\n@@ -10426,7 +10533,8 @@\n            (const_int 10))\n        (if_then_else (eq_attr \"is_thumb\" \"no\")\n            (const_int 8)\n-           (const_int 10))])]\n+           (const_int 10))])\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*cmp_ior\"\n@@ -10507,7 +10615,8 @@\n            (const_int 10))\n        (if_then_else (eq_attr \"is_thumb\" \"no\")\n            (const_int 8)\n-           (const_int 10))])]\n+           (const_int 10))])\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*ior_scc_scc\"\n@@ -10536,7 +10645,9 @@\n \t\t\t\t\t\t  DOM_CC_X_OR_Y),\n \t\t    CC_REGNUM);\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"16\")])\n+   (set_attr \"length\" \"16\")\n+   (set_attr \"type\" \"multiple\")]\n+)\n \n ; If the above pattern is followed by a CMP insn, then the compare is \n ; redundant, since we can rework the conditional instruction that follows.\n@@ -10564,7 +10675,9 @@\n    (set (match_dup 7) (ne:SI (match_dup 0) (const_int 0)))]\n   \"\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"length\" \"16\")])\n+   (set_attr \"length\" \"16\")\n+   (set_attr \"type\" \"multiple\")]\n+)\n \n (define_insn_and_split \"*and_scc_scc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=Ts\")\n@@ -10594,7 +10707,9 @@\n \t\t\t\t\t\t  DOM_CC_X_AND_Y),\n \t\t    CC_REGNUM);\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"16\")])\n+   (set_attr \"length\" \"16\")\n+   (set_attr \"type\" \"multiple\")]\n+)\n \n ; If the above pattern is followed by a CMP insn, then the compare is \n ; redundant, since we can rework the conditional instruction that follows.\n@@ -10622,7 +10737,9 @@\n    (set (match_dup 7) (ne:SI (match_dup 0) (const_int 0)))]\n   \"\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"length\" \"16\")])\n+   (set_attr \"length\" \"16\")\n+   (set_attr \"type\" \"multiple\")]\n+)\n \n ;; If there is no dominance in the comparison, then we can still save an\n ;; instruction in the AND case, since we can know that the second compare\n@@ -10656,7 +10773,9 @@\n    operands[8] = gen_rtx_COMPARE (GET_MODE (operands[7]), operands[4],\n \t\t\t\t  operands[5]);\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"20\")])\n+   (set_attr \"length\" \"20\")\n+   (set_attr \"type\" \"multiple\")]\n+)\n \n (define_split\n   [(set (reg:CC_NOOV CC_REGNUM)\n@@ -10767,7 +10886,8 @@\n      FAIL;\n   }\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"12\")]\n+   (set_attr \"length\" \"12\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"movcond_addsi\"\n@@ -10805,7 +10925,8 @@\n   }\n   \"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"enabled_for_depr_it\" \"no,yes,yes\")]\n+   (set_attr \"enabled_for_depr_it\" \"no,yes,yes\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"movcond\"\n@@ -10868,7 +10989,8 @@\n   return \\\"\\\";\n   \"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8,8,12\")]\n+   (set_attr \"length\" \"8,8,12\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n ;; ??? The patterns below need checking for Thumb-2 usefulness.\n@@ -10886,7 +11008,8 @@\n   \"TARGET_ARM\"\n   \"#\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8,12\")]\n+   (set_attr \"length\" \"8,12\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*if_plus_move\"\n@@ -10909,10 +11032,10 @@\n    (set_attr_alternative \"type\"\n                          [(if_then_else (match_operand 3 \"const_int_operand\" \"\")\n                                         (const_string \"alu_imm\" )\n-                                        (const_string \"*\"))\n+                                        (const_string \"alu_reg\"))\n                           (const_string \"alu_imm\")\n-                          (const_string \"*\")\n-                          (const_string \"*\")])]\n+                          (const_string \"alu_reg\")\n+                          (const_string \"alu_reg\")])]\n )\n \n (define_insn \"*ifcompare_move_plus\"\n@@ -10928,7 +11051,8 @@\n   \"TARGET_ARM\"\n   \"#\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8,12\")]\n+   (set_attr \"length\" \"8,12\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*if_move_plus\"\n@@ -10948,13 +11072,7 @@\n    sub%D4\\\\t%0, %2, #%n3\\;mov%d4\\\\t%0, %1\"\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"length\" \"4,4,8,8\")\n-   (set_attr_alternative \"type\"\n-                         [(if_then_else (match_operand 3 \"const_int_operand\" \"\")\n-                                        (const_string \"alu_imm\" )\n-                                        (const_string \"*\"))\n-                          (const_string \"alu_imm\")\n-                          (const_string \"*\")\n-                          (const_string \"*\")])]\n+   (set_attr \"type\" \"alu_reg,alu_imm,multiple,multiple\")]\n )\n \n (define_insn \"*ifcompare_arith_arith\"\n@@ -10972,7 +11090,8 @@\n   \"TARGET_ARM\"\n   \"#\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"12\")]\n+   (set_attr \"length\" \"12\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*if_arith_arith\"\n@@ -10988,7 +11107,8 @@\n   \"TARGET_ARM\"\n   \"%I6%d5\\\\t%0, %1, %2\\;%I7%D5\\\\t%0, %3, %4\"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*ifcompare_arith_move\"\n@@ -11029,7 +11149,8 @@\n   return \\\"\\\";\n   \"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8,12\")]\n+   (set_attr \"length\" \"8,12\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*if_arith_move\"\n@@ -11046,7 +11167,7 @@\n    %I5%d4\\\\t%0, %2, %3\\;mov%D4\\\\t%0, %1\"\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"length\" \"4,8\")\n-   (set_attr \"type\" \"*,*\")]\n+   (set_attr \"type\" \"alu_shift_reg,multiple\")]\n )\n \n (define_insn \"*ifcompare_move_arith\"\n@@ -11088,7 +11209,8 @@\n   return \\\"%I7%D6\\\\t%0, %2, %3\\\";\n   \"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8,12\")]\n+   (set_attr \"length\" \"8,12\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*if_move_arith\"\n@@ -11106,7 +11228,7 @@\n    %I5%D4\\\\t%0, %2, %3\\;mov%d4\\\\t%0, %1\"\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"length\" \"4,8\")\n-   (set_attr \"type\" \"*,*\")]\n+   (set_attr \"type\" \"alu_shift_reg,multiple\")]\n )\n \n (define_insn \"*ifcompare_move_not\"\n@@ -11122,7 +11244,8 @@\n   \"TARGET_ARM\"\n   \"#\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8,12\")]\n+   (set_attr \"length\" \"8,12\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*if_move_not\"\n@@ -11139,7 +11262,8 @@\n    mvn%d4\\\\t%0, #%B1\\;mvn%D4\\\\t%0, %2\"\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"type\" \"mvn_reg\")\n-   (set_attr \"length\" \"4,8,8\")]\n+   (set_attr \"length\" \"4,8,8\")\n+   (set_attr \"type\" \"mvn_reg,multiple,multiple\")]\n )\n \n (define_insn \"*ifcompare_not_move\"\n@@ -11155,7 +11279,8 @@\n   \"TARGET_ARM\"\n   \"#\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8,12\")]\n+   (set_attr \"length\" \"8,12\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*if_not_move\"\n@@ -11171,7 +11296,7 @@\n    mov%D4\\\\t%0, %1\\;mvn%d4\\\\t%0, %2\n    mvn%D4\\\\t%0, #%B1\\;mvn%d4\\\\t%0, %2\"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"type\" \"mvn_reg\")\n+   (set_attr \"type\" \"mvn_reg,multiple,multiple\")\n    (set_attr \"length\" \"4,8,8\")]\n )\n \n@@ -11189,7 +11314,8 @@\n   \"TARGET_ARM\"\n   \"#\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8,12\")]\n+   (set_attr \"length\" \"8,12\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*if_shift_move\"\n@@ -11209,9 +11335,7 @@\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"shift\" \"2\")\n    (set_attr \"length\" \"4,8,8\")\n-   (set (attr \"type\") (if_then_else (match_operand 3 \"const_int_operand\" \"\")\n-\t\t      (const_string \"mov_shift\")\n-\t\t      (const_string \"mov_shift_reg\")))]\n+   (set_attr \"type\" \"mov_shift_reg,multiple,multiple\")]\n )\n \n (define_insn \"*ifcompare_move_shift\"\n@@ -11228,7 +11352,8 @@\n   \"TARGET_ARM\"\n   \"#\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8,12\")]\n+   (set_attr \"length\" \"8,12\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*if_move_shift\"\n@@ -11248,9 +11373,7 @@\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"shift\" \"2\")\n    (set_attr \"length\" \"4,8,8\")\n-   (set (attr \"type\") (if_then_else (match_operand 3 \"const_int_operand\" \"\")\n-\t\t      (const_string \"mov_shift\")\n-\t\t      (const_string \"mov_shift_reg\")))]\n+   (set_attr \"type\" \"mov_shift_reg,multiple,multiple\")]\n )\n \n (define_insn \"*ifcompare_shift_shift\"\n@@ -11269,7 +11392,8 @@\n   \"TARGET_ARM\"\n   \"#\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"12\")]\n+   (set_attr \"length\" \"12\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*if_shift_shift\"\n@@ -11309,7 +11433,8 @@\n   \"TARGET_ARM\"\n   \"#\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"12\")]\n+   (set_attr \"length\" \"12\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*if_not_arith\"\n@@ -11342,7 +11467,8 @@\n   \"TARGET_ARM\"\n   \"#\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"12\")]\n+   (set_attr \"length\" \"12\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*if_arith_not\"\n@@ -11357,7 +11483,7 @@\n   \"TARGET_ARM\"\n   \"mvn%D5\\\\t%0, %1\\;%I6%d5\\\\t%0, %2, %3\"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"type\" \"mvn_reg\")\n+   (set_attr \"type\" \"multiple\")\n    (set_attr \"length\" \"8\")]\n )\n \n@@ -11373,7 +11499,8 @@\n   \"TARGET_ARM\"\n   \"#\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8,12\")]\n+   (set_attr \"length\" \"8,12\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*if_neg_move\"\n@@ -11389,7 +11516,8 @@\n    mov%D4\\\\t%0, %1\\;rsb%d4\\\\t%0, %2, #0\n    mvn%D4\\\\t%0, #%B1\\;rsb%d4\\\\t%0, %2, #0\"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"length\" \"4,8,8\")]\n+   (set_attr \"length\" \"4,8,8\")\n+   (set_attr \"type\" \"logic_shift_imm,multiple,multiple\")]\n )\n \n (define_insn \"*ifcompare_move_neg\"\n@@ -11404,7 +11532,8 @@\n   \"TARGET_ARM\"\n   \"#\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8,12\")]\n+   (set_attr \"length\" \"8,12\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*if_move_neg\"\n@@ -11420,7 +11549,8 @@\n    mov%d4\\\\t%0, %1\\;rsb%D4\\\\t%0, %2, #0\n    mvn%d4\\\\t%0, #%B1\\;rsb%D4\\\\t%0, %2, #0\"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"length\" \"4,8,8\")]\n+   (set_attr \"length\" \"4,8,8\")\n+   (set_attr \"type\" \"logic_shift_imm,multiple,multiple\")]\n )\n \n (define_insn \"*arith_adjacentmem\"\n@@ -11618,7 +11748,8 @@\n   [(unspec_volatile [(const_int 0)] VUNSPEC_THUMB1_INTERWORK)]\n   \"TARGET_THUMB1\"\n   \"* return thumb1_output_interwork ();\"\n-  [(set_attr \"length\" \"8\")]\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n ;; Note - although unspec_volatile's USE all hard registers,\n@@ -11805,7 +11936,7 @@\n    mvn%D4\\\\t%0, %2\n    mov%d4\\\\t%0, %1\\;mvn%D4\\\\t%0, %2\"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"type\" \"mvn_reg\")\n+   (set_attr \"type\" \"mvn_reg,multiple\")\n    (set_attr \"length\" \"4,8\")]\n )\n \n@@ -11825,7 +11956,8 @@\n     return \\\"mvnne\\\\t%0, #0\\\";\n   \"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*not_signextract_onebit\"\n@@ -11843,7 +11975,8 @@\n     return \\\"movne\\\\t%0, #0\\\";\n   \"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"12\")]\n+   (set_attr \"length\" \"12\")\n+   (set_attr \"type\" \"multiple\")]\n )\n ;; ??? The above patterns need auditing for Thumb-2\n \n@@ -11905,7 +12038,8 @@\n \t\t    UNSPEC_PRLG_STK))]\n   \"\"\n   \"\"\n-  [(set_attr \"length\" \"0\")]\n+  [(set_attr \"length\" \"0\")\n+   (set_attr \"type\" \"block\")]\n )\n \n ;; Pop (as used in epilogue RTL)\n@@ -12035,6 +12169,7 @@\n   assemble_align (32);\n   return \\\"\\\";\n   \"\n+  [(set_attr \"type\" \"no_insn\")]\n )\n \n (define_insn \"align_8\"\n@@ -12044,6 +12179,7 @@\n   assemble_align (64);\n   return \\\"\\\";\n   \"\n+  [(set_attr \"type\" \"no_insn\")]\n )\n \n (define_insn \"consttable_end\"\n@@ -12053,6 +12189,7 @@\n   making_const_table = FALSE;\n   return \\\"\\\";\n   \"\n+  [(set_attr \"type\" \"no_insn\")]\n )\n \n (define_insn \"consttable_1\"\n@@ -12064,7 +12201,8 @@\n   assemble_zeros (3);\n   return \\\"\\\";\n   \"\n-  [(set_attr \"length\" \"4\")]\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"no_insn\")]\n )\n \n (define_insn \"consttable_2\"\n@@ -12077,7 +12215,8 @@\n   assemble_zeros (2);\n   return \\\"\\\";\n   \"\n-  [(set_attr \"length\" \"4\")]\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"no_insn\")]\n )\n \n (define_insn \"consttable_4\"\n@@ -12113,7 +12252,8 @@\n       }\n     return \\\"\\\";\n   }\"\n-  [(set_attr \"length\" \"4\")]\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"no_insn\")]\n )\n \n (define_insn \"consttable_8\"\n@@ -12137,7 +12277,8 @@\n       }\n     return \\\"\\\";\n   }\"\n-  [(set_attr \"length\" \"8\")]\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"no_insn\")]\n )\n \n (define_insn \"consttable_16\"\n@@ -12161,7 +12302,8 @@\n       }\n     return \\\"\\\";\n   }\"\n-  [(set_attr \"length\" \"16\")]\n+  [(set_attr \"length\" \"16\")\n+   (set_attr \"type\" \"no_insn\")]\n )\n \n ;; Miscellaneous Thumb patterns\n@@ -12189,7 +12331,8 @@\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"TARGET_THUMB1\"\n   \"mov\\\\t%|pc, %0\"\n-  [(set_attr \"length\" \"2\")]\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"type\" \"no_insn\")]\n )\n \n ;; V5 Instructions,\n@@ -12231,7 +12374,9 @@\n \t     (match_operand:SI 1 \"\" \"\")\n \t     (match_operand:SI 2 \"\" \"\"))]\n   \"TARGET_32BIT && arm_arch5e\"\n-  \"pld\\\\t%a0\")\n+  \"pld\\\\t%a0\"\n+  [(set_attr \"type\" \"load1\")]\n+)\n \n ;; General predication pattern\n \n@@ -12248,7 +12393,8 @@\n   [(unspec:SI [(match_operand:SI 0 \"register_operand\" \"\")] UNSPEC_REGISTER_USE)]\n   \"\"\n   \"%@ %0 needed\"\n-  [(set_attr \"length\" \"0\")]\n+  [(set_attr \"length\" \"0\")\n+   (set_attr \"type\" \"no_insn\")]\n )\n \n \n@@ -12296,6 +12442,7 @@\n     thumb_set_return_address (operands[0], operands[1]);\n     DONE;\n   }\"\n+  [(set_attr \"type\" \"mov_reg\")]\n )\n \n \f\n@@ -12306,7 +12453,8 @@\n \t(unspec:SI [(const_int 0)] UNSPEC_TLS))]\n   \"TARGET_HARD_TP\"\n   \"mrc%?\\\\tp15, 0, %0, c13, c0, 3\\\\t@ load_tp_hard\"\n-  [(set_attr \"predicable\" \"yes\")]\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"mov_reg\")]\n )\n \n ;; Doesn't clobber R1-R3.  Must use r0 for the first operand.\n@@ -12317,7 +12465,8 @@\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_SOFT_TP\"\n   \"bl\\\\t__aeabi_read_tp\\\\t@ load_tp_soft\"\n-  [(set_attr \"conds\" \"clob\")]\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"type\" \"branch\")]\n )\n \n ;; tls descriptor call\n@@ -12336,7 +12485,8 @@\n     return \"bl\\\\t%c0(tlscall)\";\n   }\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"4\")]\n+   (set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"branch\")]\n )\n \n ;; For thread pointer builtin\n@@ -12362,7 +12512,8 @@\n   \"movt%?\\t%0, %L1\"\n  [(set_attr \"predicable\" \"yes\")\n   (set_attr \"predicable_short_it\" \"no\")\n-  (set_attr \"length\" \"4\")]\n+  (set_attr \"length\" \"4\")\n+  (set_attr \"type\" \"mov_imm\")]\n )\n \n (define_insn \"*arm_rev\"\n@@ -12374,7 +12525,8 @@\n    rev%?\\t%0, %1\n    rev%?\\t%0, %1\"\n   [(set_attr \"arch\" \"t1,t2,32\")\n-   (set_attr \"length\" \"2,2,4\")]\n+   (set_attr \"length\" \"2,2,4\")\n+   (set_attr \"type\" \"rev\")]\n )\n \n (define_expand \"arm_legacy_rev\"\n@@ -12474,7 +12626,8 @@\n   revsh%?\\t%0, %1\n   revsh%?\\t%0, %1\"\n   [(set_attr \"arch\" \"t1,t2,32\")\n-   (set_attr \"length\" \"2,2,4\")]\n+   (set_attr \"length\" \"2,2,4\")\n+   (set_attr \"type\" \"rev\")]\n )\n \n (define_insn \"*arm_rev16\"\n@@ -12486,7 +12639,8 @@\n    rev16%?\\t%0, %1\n    rev16%?\\t%0, %1\"\n   [(set_attr \"arch\" \"t1,t2,32\")\n-   (set_attr \"length\" \"2,2,4\")]\n+   (set_attr \"length\" \"2,2,4\")\n+   (set_attr \"type\" \"rev\")]\n )\n \n (define_expand \"bswaphi2\""}, {"sha": "615c6a5b16de647cbd8c0fa947f8b763a1353ee3", "filename": "gcc/config/arm/arm1020e.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Farm1020e.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Farm1020e.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm1020e.md?ref=594726e49e3716e204648651f8fb55b24adf558d", "patch": "@@ -71,7 +71,8 @@\n                        adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n                        adr,bfm,rev,\\\n                        shift_imm,shift_reg,\\\n-                       mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n+                       mov_imm,mov_reg,mvn_imm,mvn_reg,\\\n+                       multiple,no_insn\"))\n  \"1020a_e,1020a_m,1020a_w\")\n \n ;; ALU operations with a shift-by-constant operand"}, {"sha": "f5a0447f5da6df88f0519ff693820d13c2e1f70d", "filename": "gcc/config/arm/arm1026ejs.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Farm1026ejs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Farm1026ejs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm1026ejs.md?ref=594726e49e3716e204648651f8fb55b24adf558d", "patch": "@@ -71,7 +71,8 @@\n                        adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n                        adr,bfm,rev,\\\n                        shift_imm,shift_reg,\\\n-                       mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n+                       mov_imm,mov_reg,mvn_imm,mvn_reg,\\\n+                       multiple,no_insn\"))\n  \"a_e,a_m,a_w\")\n \n ;; ALU operations with a shift-by-constant operand"}, {"sha": "f6e0b8da8b62fb0e7da26b1982ac0c19721e1003", "filename": "gcc/config/arm/arm1136jfs.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Farm1136jfs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Farm1136jfs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm1136jfs.md?ref=594726e49e3716e204648651f8fb55b24adf558d", "patch": "@@ -80,7 +80,8 @@\n                        adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n                        adr,bfm,rev,\\\n                        shift_imm,shift_reg,\\\n-                       mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n+                       mov_imm,mov_reg,mvn_imm,mvn_reg,\\\n+                       multiple,no_insn\"))\n  \"e_1,e_2,e_3,e_wb\")\n \n ;; ALU operations with a shift-by-constant operand"}, {"sha": "d2b0e9e3cf8635d182c0ec37fe6b0ae2d5fed7c6", "filename": "gcc/config/arm/arm926ejs.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Farm926ejs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Farm926ejs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm926ejs.md?ref=594726e49e3716e204648651f8fb55b24adf558d", "patch": "@@ -66,7 +66,8 @@\n                        logic_shift_imm,logics_shift_imm,\\\n                        shift_imm,shift_reg,extend,\\\n                        mov_imm,mov_reg,mov_shift,\\\n-                       mvn_imm,mvn_reg,mvn_shift\"))\n+                       mvn_imm,mvn_reg,mvn_shift,\\\n+                       multiple,no_insn\"))\n  \"e,m,w\")\n \n ;; ALU operations with a shift-by-register operand"}, {"sha": "6b1559260246a11e6d74f7f467dbeae761d934ea", "filename": "gcc/config/arm/cortex-a15.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Fcortex-a15.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Fcortex-a15.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a15.md?ref=594726e49e3716e204648651f8fb55b24adf558d", "patch": "@@ -67,7 +67,8 @@\n                         adr,bfm,rev,\\\n                         shift_imm,shift_reg,\\\n                         mov_imm,mov_reg,\\\n-                        mvn_imm,mvn_reg\"))\n+                        mvn_imm,mvn_reg,\\\n+                        multiple,no_insn\"))\n   \"ca15_issue1,(ca15_sx1,ca15_sx1_alu)|(ca15_sx2,ca15_sx2_alu)\")\n \n ;; ALU ops with immediate shift"}, {"sha": "8930baf8daff5be2d2872324cd41fd5a1cd03778", "filename": "gcc/config/arm/cortex-a5.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Fcortex-a5.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Fcortex-a5.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a5.md?ref=594726e49e3716e204648651f8fb55b24adf558d", "patch": "@@ -63,7 +63,8 @@\n                         adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n                         adr,bfm,rev,\\\n                         shift_imm,shift_reg,\\\n-                        mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n+                        mov_imm,mov_reg,mvn_imm,mvn_reg,\\\n+                        multiple,no_insn\"))\n   \"cortex_a5_ex1\")\n \n (define_insn_reservation \"cortex_a5_alu_shift\" 2"}, {"sha": "66d4cb436f5fb43b545f94ac57a8c5e909360353", "filename": "gcc/config/arm/cortex-a53.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Fcortex-a53.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Fcortex-a53.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a53.md?ref=594726e49e3716e204648651f8fb55b24adf558d", "patch": "@@ -72,7 +72,8 @@\n                         adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n                         adr,bfm,csel,rev,\\\n                         shift_imm,shift_reg,\\\n-                        mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n+                        mov_imm,mov_reg,mvn_imm,mvn_reg,\\\n+                        multiple,no_insn\"))\n   \"cortex_a53_slot_any\")\n \n (define_insn_reservation \"cortex_a53_alu_shift\" 2\n@@ -81,7 +82,7 @@\n                         logic_shift_imm,logics_shift_imm,\\\n                         alu_shift_reg,alus_shift_reg,\\\n                         logic_shift_reg,logics_shift_reg,\\\n-                        mov_shift,mov_shift_reg,\\\n+                        extend,mov_shift,mov_shift_reg,\\\n                         mvn_shift,mvn_shift_reg\"))\n   \"cortex_a53_slot_any\")\n "}, {"sha": "bd7aecda021ef50209cd6d94758626fa015a123f", "filename": "gcc/config/arm/cortex-a7.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Fcortex-a7.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Fcortex-a7.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a7.md?ref=594726e49e3716e204648651f8fb55b24adf558d", "patch": "@@ -109,7 +109,8 @@\n                         alu_shift_reg,alus_shift_reg,\\\n                         logic_shift_reg,logics_shift_reg,\\\n                         mov_shift,mov_shift_reg,\\\n-                        mvn_shift,mvn_shift_reg\"))\n+                        mvn_shift,mvn_shift_reg,\\\n+                        multiple,no_insn\"))\n   \"cortex_a7_ex1\")\n \n ;; Forwarding path for unshifted operands."}, {"sha": "ed0b351365c8ef363fbecf476e23f25c4e17cc08", "filename": "gcc/config/arm/cortex-a8.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Fcortex-a8.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Fcortex-a8.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a8.md?ref=594726e49e3716e204648651f8fb55b24adf558d", "patch": "@@ -89,7 +89,8 @@\n                         alu_reg,alus_reg,logic_reg,logics_reg,\\\n                         adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n                         adr,bfm,clz,rbit,rev,\\\n-                        shift_imm,shift_reg\"))\n+                        shift_imm,shift_reg,\\\n+                        multiple,no_insn\"))\n   \"cortex_a8_default\")\n \n (define_insn_reservation \"cortex_a8_alu_shift\" 2"}, {"sha": "4703bf36b2f8ad6a68363211f4708393924ed8a0", "filename": "gcc/config/arm/cortex-a9.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Fcortex-a9.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Fcortex-a9.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a9.md?ref=594726e49e3716e204648651f8fb55b24adf558d", "patch": "@@ -86,7 +86,8 @@ cortex_a9_p1_e2 + cortex_a9_p0_e1 + cortex_a9_p1_e1\")\n                         adr,bfm,rev,\\\n                         shift_imm,shift_reg,\\\n                         mov_imm,mov_reg,mvn_imm,mvn_reg,\\\n-                        mov_shift_reg,mov_shift\"))\n+                        mov_shift_reg,mov_shift,\\\n+                        multiple,no_insn\"))\n   \"cortex_a9_p0_default|cortex_a9_p1_default\")\n \n ;; An instruction using the shifter will go down E1."}, {"sha": "8663eb77fa109b8cec20aa20e2392829a947c833", "filename": "gcc/config/arm/cortex-m4.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Fcortex-m4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Fcortex-m4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-m4.md?ref=594726e49e3716e204648651f8fb55b24adf558d", "patch": "@@ -41,7 +41,8 @@\n                              alu_shift_reg,alus_shift_reg,\\\n                              logic_shift_reg,logics_shift_reg,\\\n                              mov_imm,mov_reg,mov_shift,mov_shift_reg,\\\n-                             mvn_imm,mvn_reg,mvn_shift,mvn_shift_reg\")\n+                             mvn_imm,mvn_reg,mvn_shift,mvn_shift_reg,\\\n+                             multiple,no_insn\")\n \t    (ior (eq_attr \"mul32\" \"yes\")\n \t\t (eq_attr \"mul64\" \"yes\"))))\n   \"cortex_m4_ex\")"}, {"sha": "11a6e6419f53eba692b418870467f0ae7d6b2d32", "filename": "gcc/config/arm/cortex-r4.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Fcortex-r4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Fcortex-r4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-r4.md?ref=594726e49e3716e204648651f8fb55b24adf558d", "patch": "@@ -101,7 +101,8 @@\n   (and (eq_attr \"tune_cortexr4\" \"yes\")\n        (eq_attr \"type\" \"alu_shift_reg,alus_shift_reg,\\\n                        logic_shift_reg,logics_shift_reg,\\\n-                       mov_shift_reg,mvn_shift_reg\"))\n+                       mov_shift_reg,mvn_shift_reg,\\\n+                       multiple,no_insn\"))\n   \"cortex_r4_alu_shift_reg\")\n \n ;; An ALU instruction followed by an ALU instruction with no early dep."}, {"sha": "ddd48fe107e49e4dbf6f0614081dd54910698810", "filename": "gcc/config/arm/fa526.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Ffa526.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Ffa526.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffa526.md?ref=594726e49e3716e204648651f8fb55b24adf558d", "patch": "@@ -67,7 +67,8 @@\n                        adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n                        adr,bfm,rev,\\\n                        shift_imm,shift_reg,\\\n-                       mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n+                       mov_imm,mov_reg,mvn_imm,mvn_reg,\\\n+                       multiple,no_insn\"))\n  \"fa526_core\")\n \n (define_insn_reservation \"526_alu_shift_op\" 2"}, {"sha": "892ea31fccd92629f9699cf98ddda8c70789d0fd", "filename": "gcc/config/arm/fa606te.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Ffa606te.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Ffa606te.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffa606te.md?ref=594726e49e3716e204648651f8fb55b24adf558d", "patch": "@@ -72,7 +72,8 @@\n                        alu_shift_reg,alus_shift_reg,\\\n                        logic_shift_reg,logics_shift_reg,\\\n                        mov_imm,mov_reg,mov_shift,mov_shift_reg,\\\n-                       mvn_imm,mvn_reg,mvn_shift,mvn_shift_reg\"))\n+                       mvn_imm,mvn_reg,mvn_shift,mvn_shift_reg,\\\n+                       multiple,no_insn\"))\n  \"fa606te_core\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}, {"sha": "8b9253171d4db7114bb878f7f82e9a5aced9d8ef", "filename": "gcc/config/arm/fa626te.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Ffa626te.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Ffa626te.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffa626te.md?ref=594726e49e3716e204648651f8fb55b24adf558d", "patch": "@@ -73,7 +73,8 @@\n                        adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n                        adr,bfm,rev,\\\n                        shift_imm,shift_reg,\\\n-                       mov_imm,mov_reg,mvn_imm,mvn_reg\"))\n+                       mov_imm,mov_reg,mvn_imm,mvn_reg,\\\n+                       multiple,no_insn\"))\n  \"fa626te_core\")\n \n (define_insn_reservation \"626te_alu_shift_op\" 2"}, {"sha": "28be92de75a91910fad526f4d948f9a3857e77ec", "filename": "gcc/config/arm/fa726te.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Ffa726te.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Ffa726te.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffa726te.md?ref=594726e49e3716e204648651f8fb55b24adf558d", "patch": "@@ -90,7 +90,8 @@\n                        alu_reg,alus_reg,logic_reg,logics_reg,\\\n                        adc_imm,adcs_imm,adc_reg,adcs_reg,\\\n                        adr,bfm,rev,\\\n-                       shift_imm,shift_reg\"))\n+                       shift_imm,shift_reg,\\\n+                       multiple,no_insn\"))\n   \"fa726te_issue+(fa726te_alu0_pipe|fa726te_alu1_pipe)\")\n \n ;; ALU operations with a shift-by-register operand."}, {"sha": "3b5944a014a5875297da6e1969fa063e403aa807", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 75, "deletions": 38, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=594726e49e3716e204648651f8fb55b24adf558d", "patch": "@@ -58,7 +58,8 @@\n   \"\"\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"enabled_for_depr_it\" \"yes,yes,no\")\n-   (set_attr \"length\" \"6,6,10\")]\n+   (set_attr \"length\" \"6,6,10\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*thumb2_sminsi3\"\n@@ -78,7 +79,8 @@\n   \"\"\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"enabled_for_depr_it\" \"yes,yes,no\")\n-   (set_attr \"length\" \"6,6,10\")]\n+   (set_attr \"length\" \"6,6,10\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*thumb32_umaxsi3\"\n@@ -98,7 +100,8 @@\n   \"\"\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"length\" \"6,6,10\")\n-   (set_attr \"enabled_for_depr_it\" \"yes,yes,no\")]\n+   (set_attr \"enabled_for_depr_it\" \"yes,yes,no\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*thumb2_uminsi3\"\n@@ -118,7 +121,8 @@\n   \"\"\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"length\" \"6,6,10\")\n-   (set_attr \"enabled_for_depr_it\" \"yes,yes,no\")]\n+   (set_attr \"enabled_for_depr_it\" \"yes,yes,no\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n ;; Thumb-2 does not have rsc, so use a clever trick with shifter operands.\n@@ -143,7 +147,8 @@\n     operands[1] = gen_lowpart (SImode, operands[1]);\n   }\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*thumb2_abssi2\"\n@@ -200,7 +205,8 @@\n    (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"enabled_for_depr_it\" \"yes,yes,no\")\n    (set_attr \"ce_count\" \"2\")\n-   (set_attr \"length\" \"8,6,10\")]\n+   (set_attr \"length\" \"8,6,10\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*thumb2_neg_abssi2\"\n@@ -257,7 +263,8 @@\n    (set_attr \"enabled_for_depr_it\" \"yes,yes,no\")\n    (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"ce_count\" \"2\")\n-   (set_attr \"length\" \"8,6,10\")]\n+   (set_attr \"length\" \"8,6,10\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n ;; We have two alternatives here for memory loads (and similarly for stores)\n@@ -282,7 +289,7 @@\n    ldr%?\\\\t%0, %1\n    str%?\\\\t%1, %0\n    str%?\\\\t%1, %0\"\n-  [(set_attr \"type\" \"*,alu_imm,alu_imm,alu_imm,*,load1,load1,store1,store1\")\n+  [(set_attr \"type\" \"mov_reg,alu_imm,alu_imm,alu_imm,mov_imm,load1,load1,store1,store1\")\n    (set_attr \"length\" \"2,4,2,4,4,4,4,4,4\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"yes,no,yes,no,no,no,no,no,no\")\n@@ -303,7 +310,8 @@\n \t\t\t     INTVAL (operands[3]));\n   return \\\"add\\\\t%2, %|pc\\;ldr%?\\\\t%0, [%2]\\\";\n   \"\n-  [(set_attr \"length\" \"4,4,6,6\")]\n+  [(set_attr \"length\" \"4,4,6,6\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n ;; Thumb-2 always has load/store halfword instructions, so we can avoid a lot\n@@ -319,7 +327,7 @@\n    movw%?\\\\t%0, %L1\\\\t%@ movhi\n    str%(h%)\\\\t%1, %0\\\\t%@ movhi\n    ldr%(h%)\\\\t%0, %1\\\\t%@ movhi\"\n-  [(set_attr \"type\" \"*,*,store1,load1\")\n+  [(set_attr \"type\" \"mov_imm,mov_reg,store1,load1\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"*,*,*,4094\")\n    (set_attr \"neg_pool_range\" \"*,*,*,250\")]\n@@ -367,7 +375,8 @@\n   \"\"\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"enabled_for_depr_it\" \"yes,no\")\n-   (set_attr \"length\" \"8,10\")]\n+   (set_attr \"length\" \"8,10\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*thumb2_mov_negscc\"\n@@ -385,7 +394,8 @@\n     operands[3] = GEN_INT (~0);\n   }\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"length\" \"10\")]\n+   (set_attr \"length\" \"10\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*thumb2_mov_negscc_strict_it\"\n@@ -413,7 +423,8 @@\n \n   }\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*thumb2_mov_notscc\"\n@@ -432,7 +443,8 @@\n     operands[4] = GEN_INT (~0);\n   }\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"length\" \"10\")]\n+   (set_attr \"length\" \"10\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*thumb2_mov_notscc_strict_it\"\n@@ -454,7 +466,8 @@\n                                   VOIDmode, operands[2], const0_rtx);\n   }\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*thumb2_movsicc_insn\"\n@@ -514,7 +527,8 @@\n   }\n   [(set_attr \"length\" \"4,4,6,6,6,6,10,10,10,10,6\")\n    (set_attr \"enabled_for_depr_it\" \"yes,yes,no,no,no,no,no,no,no,no,yes\")\n-   (set_attr \"conds\" \"use\")]\n+   (set_attr \"conds\" \"use\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*thumb2_movsfcc_soft_insn\"\n@@ -528,7 +542,8 @@\n    it\\\\t%D3\\;mov%D3\\\\t%0, %2\n    it\\\\t%d3\\;mov%d3\\\\t%0, %1\"\n   [(set_attr \"length\" \"6,6\")\n-   (set_attr \"conds\" \"use\")]\n+   (set_attr \"conds\" \"use\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*call_reg_thumb2\"\n@@ -557,7 +572,8 @@\n \t(match_operand:SI 0 \"register_operand\" \"l*r\"))]\n   \"TARGET_THUMB2\"\n   \"bx\\\\t%0\"\n-  [(set_attr \"conds\" \"clob\")]\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"type\" \"branch\")]\n )\n ;; Don't define thumb2_load_indirect_jump because we can't guarantee label\n ;; addresses will have the thumb bit set correctly.\n@@ -585,6 +601,7 @@\n     operands[4] = gen_rtx_fmt_ee (rc, VOIDmode, operands[2], const0_rtx);\n   }\n   [(set_attr \"conds\" \"use\")\n+   (set_attr \"type\" \"multiple\")\n    (set (attr \"length\") (if_then_else (match_test \"arm_restrict_it\")\n                                       (const_int 8)\n                                       (const_int 10)))]\n@@ -617,7 +634,8 @@\n     operands[5] = gen_rtx_fmt_ee (rc, VOIDmode, operands[2], const0_rtx);\n   }\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"length\" \"6,10\")]\n+   (set_attr \"length\" \"6,10\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*thumb2_ior_scc_strict_it\"\n@@ -630,7 +648,8 @@\n    it\\\\t%d2\\;mov%d2\\\\t%0, #1\\;it\\\\t%d2\\;orr%d2\\\\t%0, %1\n    mov\\\\t%0, #1\\;orr\\\\t%0, %1\\;it\\\\t%D2\\;mov%D2\\\\t%0, %1\"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*thumb2_cond_move\"\n@@ -679,7 +698,8 @@\n     return \\\"\\\";\n   \"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"length\" \"6,6,10\")]\n+   (set_attr \"length\" \"6,6,10\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*thumb2_cond_arith\"\n@@ -716,7 +736,8 @@\n     return \\\"%i5%d4\\\\t%0, %1, #1\\\";\n   \"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"14\")]\n+   (set_attr \"length\" \"14\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*thumb2_cond_arith_strict_it\"\n@@ -785,7 +806,8 @@\n      FAIL;\n   }\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"12\")]\n+   (set_attr \"length\" \"12\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*thumb2_cond_sub\"\n@@ -816,7 +838,8 @@\n     return \\\"sub%d4\\\\t%0, %1, #1\\\";\n   \"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"10,14\")]\n+   (set_attr \"length\" \"10,14\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn_and_split \"*thumb2_negscc\"\n@@ -884,7 +907,8 @@\n     FAIL;\n   }\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"14\")]\n+   (set_attr \"length\" \"14\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*thumb2_movcond\"\n@@ -967,7 +991,8 @@\n   return \\\"\\\";\n   \"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"10,10,14\")]\n+   (set_attr \"length\" \"10,10,14\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n ;; Zero and sign extension instructions.\n@@ -1030,7 +1055,8 @@\n   \"TARGET_THUMB2 && !flag_pic\"\n   \"* return thumb2_output_casesi(operands);\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"16\")]\n+   (set_attr \"length\" \"16\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"thumb2_casesi_internal_pic\"\n@@ -1048,7 +1074,8 @@\n   \"TARGET_THUMB2 && flag_pic\"\n   \"* return thumb2_output_casesi(operands);\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"20\")]\n+   (set_attr \"length\" \"20\")\n+   (set_attr \"type\" \"multiple\")]\n )\n \n (define_insn \"*thumb2_return\"\n@@ -1085,7 +1112,8 @@\n    && GET_CODE(operands[3]) != MINUS\"\n   \"%I3%!\\\\t%0, %1, %2\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"length\" \"2\")]\n+   (set_attr \"length\" \"2\")\n+   (set_attr \"type\" \"alu_reg\")]\n )\n \n (define_insn \"*thumb2_shiftsi3_short\"\n@@ -1113,7 +1141,8 @@\n   \"TARGET_THUMB2 && reload_completed\"\n   \"mov%!\\t%0, %1\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"length\" \"2\")]\n+   (set_attr \"length\" \"2\")\n+   (set_attr \"type\" \"mov_imm\")]\n )\n \n (define_insn \"*thumb2_addsi_short\"\n@@ -1137,7 +1166,8 @@\n       return \\\"add%!\\\\t%0, %1, %2\\\";\n   \"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"length\" \"2\")]\n+   (set_attr \"length\" \"2\")\n+   (set_attr \"type\" \"alu_reg\")]\n )\n \n (define_insn \"*thumb2_subsi_short\"\n@@ -1148,7 +1178,8 @@\n   \"TARGET_THUMB2 && reload_completed\"\n   \"sub%!\\\\t%0, %1, %2\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"length\" \"2\")]\n+   (set_attr \"length\" \"2\")\n+   (set_attr \"type\" \"alu_reg\")]\n )\n \n (define_peephole2\n@@ -1200,7 +1231,8 @@\n       return \\\"adds\\\\t%0, %1, %2\\\";\n   \"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"length\" \"2,2,4\")]\n+   (set_attr \"length\" \"2,2,4\")\n+   (set_attr \"type\" \"alu_reg\")]\n )\n \n (define_insn \"*thumb2_addsi3_compare0_scratch\"\n@@ -1284,7 +1316,8 @@\n \t         (le (minus (match_dup 1) (pc)) (const_int 128))\n \t         (not (match_test \"which_alternative\")))\n \t    (const_int 2)\n-\t    (const_int 8)))]\n+\t    (const_int 8)))\n+   (set_attr \"type\" \"branch,multiple\")]\n )\n \n (define_insn \"*thumb2_cbnz\"\n@@ -1307,7 +1340,8 @@\n \t         (le (minus (match_dup 1) (pc)) (const_int 128))\n \t         (not (match_test \"which_alternative\")))\n \t    (const_int 2)\n-\t    (const_int 8)))]\n+\t    (const_int 8)))\n+   (set_attr \"type\" \"branch,multiple\")]\n )\n \n (define_insn \"*thumb2_one_cmplsi2_short\"\n@@ -1317,7 +1351,8 @@\n   \"TARGET_THUMB2 && reload_completed\"\n   \"mvn%!\\t%0, %1\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"length\" \"2\")]\n+   (set_attr \"length\" \"2\")\n+   (set_attr \"type\" \"mvn_reg\")]\n )\n \n (define_insn \"*thumb2_negsi2_short\"\n@@ -1327,7 +1362,8 @@\n   \"TARGET_THUMB2 && reload_completed\"\n   \"neg%!\\t%0, %1\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"length\" \"2\")]\n+   (set_attr \"length\" \"2\")\n+   (set_attr \"type\" \"alu_reg\")]\n )\n \n (define_insn \"*orsi_notsi_si\"\n@@ -1337,7 +1373,8 @@\n   \"TARGET_THUMB2\"\n   \"orn%?\\\\t%0, %1, %2\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"no\")]\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"type\" \"logic_reg\")]\n )\n \n (define_insn \"*orsi_not_shiftsi_si\""}, {"sha": "ed2522b0cfef29e21c2bd9037962482ff2065f17", "filename": "gcc/config/arm/types.md", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Ftypes.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Ftypes.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ftypes.md?ref=594726e49e3716e204648651f8fb55b24adf558d", "patch": "@@ -105,10 +105,14 @@\n ; mov_shift_reg      simple MOV instruction, shifted operand by a register.\n ; mul                integer multiply.\n ; muls               integer multiply, flag setting.\n+; multiple           more than one instruction, candidate for future\n+;                    splitting, or better modeling.\n ; mvn_imm            inverting move instruction, immediate.\n ; mvn_reg            inverting move instruction, register.\n ; mvn_shift          inverting move instruction, shifted operand by a constant.\n ; mvn_shift_reg      inverting move instruction, shifted operand by a register.\n+; no_insn            an insn which does not represent an instruction in the\n+;                    final output, thus having no impact on scheduling.\n ; rbit               reverse bits.\n ; rev                reverse bytes.\n ; sdiv               signed division.\n@@ -150,6 +154,8 @@\n ; umlals             unsigned multiply accumulate long, flag setting.\n ; umull              unsigned multiply long.\n ; umulls             unsigned multiply long, flag setting.\n+; untyped            insn without type information - default, and error,\n+;                    case.\n ;\n ; The classification below is for instructions used by the Wireless MMX\n ; Technology. Each attribute value is used to classify an instruction of the\n@@ -301,6 +307,7 @@\n   branch,\\\n   call,\\\n   clz,\\\n+  no_insn,\\\n   csel,\\\n   extend,\\\n   f_cvt,\\\n@@ -360,10 +367,12 @@\n   mov_shift_reg,\\\n   mul,\\\n   muls,\\\n+  multiple,\\\n   mvn_imm,\\\n   mvn_reg,\\\n   mvn_shift,\\\n   mvn_shift_reg,\\\n+  nop,\\\n   rbit,\\\n   rev,\\\n   sdiv,\\\n@@ -403,6 +412,7 @@\n   umlals,\\\n   umull,\\\n   umulls,\\\n+  untyped,\\\n   wmmx_tandc,\\\n   wmmx_tbcst,\\\n   wmmx_textrc,\\\n@@ -524,7 +534,7 @@\n   neon_vst2_4_regs_vst3_vst4,\\\n   neon_vst3_vst4_lane,\\\n   neon_vst3_vst4\"\n-    (const_string \"alu_imm\"))\n+    (const_string \"untyped\"))\n \n ; Is this an (integer side) multiply with a 32-bit (or smaller) result?\n (define_attr \"mul32\" \"no,yes\""}, {"sha": "419a78984b8200f61c7ad4a88e15f5faa4078620", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594726e49e3716e204648651f8fb55b24adf558d/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=594726e49e3716e204648651f8fb55b24adf558d", "patch": "@@ -144,7 +144,7 @@\n       gcc_unreachable ();\n     }\n   \"\n-  [(set_attr \"type\" \"*,*,*,*,load2,load2,store2,f_mcrr,f_mrrc,ffarithd,f_loadd,f_stored\")\n+  [(set_attr \"type\" \"multiple,multiple,multiple,multiple,load2,load2,store2,f_mcrr,f_mrrc,ffarithd,f_loadd,f_stored\")\n    (set (attr \"length\") (cond [(eq_attr \"alternative\" \"1,4,5,6\") (const_int 8)\n                               (eq_attr \"alternative\" \"2\") (const_int 12)\n                               (eq_attr \"alternative\" \"3\") (const_int 16)\n@@ -192,7 +192,7 @@\n       gcc_unreachable ();\n     }\n   \"\n-  [(set_attr \"type\" \"*,*,*,*,load2,load2,store2,f_mcrr,f_mrrc,ffarithd,f_loadd,f_stored\")\n+  [(set_attr \"type\" \"multiple,multiple,multiple,multiple,load2,load2,store2,f_mcrr,f_mrrc,ffarithd,f_loadd,f_stored\")\n    (set (attr \"length\") (cond [(eq_attr \"alternative\" \"1\") (const_int 8)\n                                (eq_attr \"alternative\" \"2\") (const_int 12)\n                                (eq_attr \"alternative\" \"3\") (const_int 16)\n@@ -261,7 +261,7 @@\n   \"\n   [(set_attr \"conds\" \"unconditional\")\n    (set_attr \"type\" \"neon_vld1_1_2_regs,neon_vst1_1_2_regs_vst2_2_regs,\\\n-                     load1,store1,fcpys,*,f_mcr,f_mrc,*\")\n+                     load1,store1,fcpys,mov_reg,f_mcr,f_mrc,multiple\")\n    (set_attr \"length\" \"4,4,4,4,4,4,4,4,8\")]\n )\n \n@@ -311,7 +311,7 @@\n     }\n   \"\n   [(set_attr \"conds\" \"unconditional\")\n-   (set_attr \"type\" \"load1,store1,fcpys,*,f_mcr,f_mrc,*\")\n+   (set_attr \"type\" \"load1,store1,fcpys,mov_reg,f_mcr,f_mrc,multiple\")\n    (set_attr \"length\" \"4,4,4,4,4,4,8\")]\n )\n \n@@ -429,7 +429,7 @@\n     }\n   \"\n   [(set_attr \"type\" \"f_mcrr,f_mrrc,fconstd,f_loadd,f_stored,\\\n-                     load2,store2,ffarithd,*\")\n+                     load2,store2,ffarithd,multiple\")\n    (set (attr \"length\") (cond [(eq_attr \"alternative\" \"5,6,8\") (const_int 8)\n \t\t\t       (eq_attr \"alternative\" \"7\")\n \t\t\t\t(if_then_else\n@@ -474,7 +474,7 @@\n     }\n   \"\n   [(set_attr \"type\" \"f_mcrr,f_mrrc,fconstd,f_loadd,\\\n-                     f_stored,load2,store2,ffarithd,*\")\n+                     f_stored,load2,store2,ffarithd,multiple\")\n    (set (attr \"length\") (cond [(eq_attr \"alternative\" \"5,6,8\") (const_int 8)\n \t\t\t       (eq_attr \"alternative\" \"7\")\n \t\t\t\t(if_then_else\n@@ -578,7 +578,7 @@\n    ite\\\\t%D3\\;fmrrd%D3\\\\t%Q0, %R0, %P2\\;fmrrd%d3\\\\t%Q0, %R0, %P1\"\n    [(set_attr \"conds\" \"use\")\n     (set_attr \"length\" \"6,6,10,6,6,10,6,6,10\")\n-    (set_attr \"type\" \"ffarithd,ffarithd,ffarithd,f_mcr,f_mcr,f_mcr,f_mrrc,f_mrrc,f_mrrc\")]\n+    (set_attr \"type\" \"ffarithd,ffarithd,ffarithd,f_mcr,f_mcr,f_mcrr,f_mrrc,f_mrrc,f_mrrc\")]\n )\n \n "}]}