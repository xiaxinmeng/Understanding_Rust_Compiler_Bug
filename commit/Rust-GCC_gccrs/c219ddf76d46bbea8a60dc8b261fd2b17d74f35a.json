{"sha": "c219ddf76d46bbea8a60dc8b261fd2b17d74f35a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIxOWRkZjc2ZDQ2YmJlYThhNjBkYzhiMjYxZmQyYjE3ZDc0ZjM1YQ==", "commit": {"author": {"name": "Brendan Kehoe", "email": "brendan@cygnus.com", "date": "1999-11-30T12:02:09Z"}, "committer": {"name": "Brendan Kehoe", "email": "brendan@gcc.gnu.org", "date": "1999-11-30T12:02:09Z"}, "message": "sparc.h (MASK_FASTER_STRUCTS, [...]): Define.\n\n        * sparc.h (MASK_FASTER_STRUCTS, TARGET_FASTER_STRUCTS): Define.\n        (TARGET_SWITCHES): Add -mfaster-structs/-mno-faster-structs flags.\n        (ROUND_TYPE_ALIGN): Use better value of -mfaster-structs.\n        * sparc.md (sparclite86x_branch, sparclite86x_shift): New function\n        units for the sparclite86x chip.\n        (flush): Revert October 14th change; add SImode specifically.\n        (flushdi): Copy of flush, but DImode, to avoid genrecog warnings.\n        * invoke.texi: Document it.\n\nFrom-SVN: r30722", "tree": {"sha": "3a081b864306660d35aef9453f67eaccaf191d74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a081b864306660d35aef9453f67eaccaf191d74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c219ddf76d46bbea8a60dc8b261fd2b17d74f35a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c219ddf76d46bbea8a60dc8b261fd2b17d74f35a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c219ddf76d46bbea8a60dc8b261fd2b17d74f35a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c219ddf76d46bbea8a60dc8b261fd2b17d74f35a/comments", "author": null, "committer": null, "parents": [{"sha": "4c82e145460d5317eeadd5f6dab4993f45fd8497", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c82e145460d5317eeadd5f6dab4993f45fd8497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c82e145460d5317eeadd5f6dab4993f45fd8497"}], "stats": {"total": 87, "additions": 78, "deletions": 9}, "files": [{"sha": "9823098261f45f847cbaafcf31658d9fdf9a5e3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c219ddf76d46bbea8a60dc8b261fd2b17d74f35a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c219ddf76d46bbea8a60dc8b261fd2b17d74f35a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c219ddf76d46bbea8a60dc8b261fd2b17d74f35a", "patch": "@@ -1,3 +1,14 @@\n+1999-11-30  Brendan Kehoe  <brendan@cygnus.com>\n+\n+\t* sparc.h (MASK_FASTER_STRUCTS, TARGET_FASTER_STRUCTS): Define.\n+\t(TARGET_SWITCHES): Add -mfaster-structs/-mno-faster-structs flags.\n+\t(ROUND_TYPE_ALIGN): Use better value of -mfaster-structs.\n+\t* sparc.md (sparclite86x_branch, sparclite86x_shift): New function\n+\tunits for the sparclite86x chip.\n+\t(flush): Revert October 14th change; add SImode specifically.\n+\t(flushdi): Copy of flush, but DImode, to avoid genrecog warnings.\n+\t* invoke.texi: Document it.\n+\n Tue Nov 30 14:58:14 1999  Nick Clifton  <nickc@cygnus.com>\n \n \t* config/mn10200/mn10200.h (PREDICATE_CODES): Add"}, {"sha": "7d02de32def70e92f8b0589f5678d8c168c52427", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c219ddf76d46bbea8a60dc8b261fd2b17d74f35a/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c219ddf76d46bbea8a60dc8b261fd2b17d74f35a/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=c219ddf76d46bbea8a60dc8b261fd2b17d74f35a", "patch": "@@ -545,6 +545,11 @@ extern int target_flags;\n #define MASK_V8PLUS 0x2000000\n #define TARGET_V8PLUS (target_flags & MASK_V8PLUS)                            \n \n+/* Force a the fastest alignment on structures to take advantage of\n+   faster copies.  */\n+#define MASK_FASTER_STRUCTS 0x4000000\n+#define TARGET_FASTER_STRUCTS (target_flags & MASK_FASTER_STRUCTS)\n+\n /* TARGET_HARD_MUL: Use hardware multiply instructions but not %y.\n    TARGET_HARD_MUL32: Use hardware multiply instructions with rd %y\n    to get high 32 bits.  False in V8+ or V9 because multiply stores\n@@ -603,6 +608,8 @@ extern int target_flags;\n     {\"64\", MASK_64BIT,\t\t\t\t\t\"Use 64-bit ABI\" }, \\\n     {\"stack-bias\", MASK_STACK_BIAS,\t\t\t\"Use stack bias\" }, \\\n     {\"no-stack-bias\", -MASK_STACK_BIAS,\t\t\t\"Do not use stack bias\" }, \\\n+    {\"faster-structs\", MASK_FASTER_STRUCTS,\t\t\t\"Use structs on stronger alignment for double-word copies\" }, \\\n+    {\"no-faster-structs\", -MASK_FASTER_STRUCTS,\t\t\"Do not use structs on stronger alignment for double-word copies\" }, \\\n     SUBTARGET_SWITCHES\t\t\t\\\n     { \"\", TARGET_DEFAULT, \"\"}}\n \n@@ -799,6 +806,23 @@ if (TARGET_ARCH64\t\t\t\t\\\n /* The best alignment to use in cases where we have a choice.  */\n #define FASTEST_ALIGNMENT 64\n \n+/* Define this macro as an expression for the alignment of a structure\n+   (given by STRUCT as a tree node) if the alignment computed in the\n+   usual way is COMPUTED and the alignment explicitly specified was\n+   SPECIFIED.\n+\n+   The default is to use SPECIFIED if it is larger; otherwise, use\n+   the smaller of COMPUTED and `BIGGEST_ALIGNMENT' */\n+#define ROUND_TYPE_ALIGN(STRUCT, COMPUTED, SPECIFIED)\t\\\n+ (TARGET_FASTER_STRUCTS ?\t\t\t\t\\\n+  ((TREE_CODE (STRUCT) == RECORD_TYPE\t\t\t\\\n+    || TREE_CODE (STRUCT) == UNION_TYPE                 \\\n+    || TREE_CODE (STRUCT) == QUAL_UNION_TYPE)           \\\n+   && TYPE_FIELDS (STRUCT) != 0                         \\\n+     ? MAX (MAX ((COMPUTED), (SPECIFIED)), BIGGEST_ALIGNMENT) \\\n+     : MAX ((COMPUTED), (SPECIFIED)))\t\t\t\\\n+   :  MAX ((COMPUTED), (SPECIFIED)))\n+\n /* Make strings word-aligned so strcpy from constants will be faster.  */\n #define CONSTANT_ALIGNMENT(EXP, ALIGN)  \\\n   ((TREE_CODE (EXP) == STRING_CST\t\\"}, {"sha": "90d86419faa13cdba0f1cb4f4ef24d7db6dbccaf", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c219ddf76d46bbea8a60dc8b261fd2b17d74f35a/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c219ddf76d46bbea8a60dc8b261fd2b17d74f35a/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=c219ddf76d46bbea8a60dc8b261fd2b17d74f35a", "patch": "@@ -365,6 +365,17 @@\n     (eq_attr \"type\" \"store,fpstore\"))\n   2 1)\n \n+(define_function_unit \"sparclite86x_branch\" 1 0\n+  (and (eq_attr \"cpu\" \"sparclite86x\")\n+    (eq_attr \"type\" \"branch\"))\n+  1 1)\n+\n+;; integer multiply insns \n+(define_function_unit \"sparclite86x_shift\" 1 0\n+  (and (eq_attr \"cpu\" \"sparclite86x\")\n+    (eq_attr \"type\" \"shift\"))\n+  1 1)\n+\n (define_function_unit \"fp_alu\" 1 0\n   (and (ior (eq_attr \"cpu\" \"hypersparc\") (eq_attr \"cpu\" \"sparclite86x\"))\n     (eq_attr \"type\" \"fp,fpmove,fpcmp\"))\n@@ -7884,12 +7895,23 @@\n \n ;; Special pattern for the FLUSH instruction.\n \n+; We do SImode and DImode versions of this to quiet down genrecog's complaints\n+; of the define_insn otherwise missing a mode.  We make \"flush\", aka\n+; gen_flush, the default one since sparc_initialize_trampoline uses\n+; it on SImode mem values.\n+\n (define_insn \"flush\"\n-  [(unspec_volatile [(mem (match_operand 0 \"address_operand\" \"p\"))] 4)]\n+  [(unspec_volatile [(match_operand:SI 0 \"memory_operand\" \"m\")] 3)]\n   \"\"\n-  \"* return TARGET_V9 ? \\\"flush\\\\t%a0\\\" : \\\"iflush\\\\t%a0\\\";\"\n-  [(set_attr \"type\" \"misc\")\n-   (set_attr \"length\" \"1\")])\n+  \"* return TARGET_V9 ? \\\"flush %f0\\\" : \\\"iflush %f0\\\";\"\n+  [(set_attr \"type\" \"misc\")])\n+\n+(define_insn \"flushdi\"\n+  [(unspec_volatile [(match_operand:DI 0 \"memory_operand\" \"m\")] 3)]\n+  \"\"\n+  \"* return TARGET_V9 ? \\\"flush %f0\\\" : \\\"iflush %f0\\\";\"\n+  [(set_attr \"type\" \"misc\")])\n+\n \f\n ;; find first set.\n "}, {"sha": "567c2a2f092389bf4621d6ed8f7e3fb6dcee35a3", "filename": "gcc/invoke.texi", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c219ddf76d46bbea8a60dc8b261fd2b17d74f35a/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c219ddf76d46bbea8a60dc8b261fd2b17d74f35a/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=c219ddf76d46bbea8a60dc8b261fd2b17d74f35a", "patch": "@@ -231,11 +231,12 @@ in the following sections.\n -mtune=@var{cpu type}\n -mcmodel=@var{code model}\n -m32  -m64\n--mapp-regs  -mbroken-saverestore  -mcypress  -mepilogue\n--mflat  -mfpu  -mhard-float  -mhard-quad-float\n--mimpure-text  -mlive-g0  -mno-app-regs  -mno-epilogue\n--mno-flat  -mno-fpu  -mno-impure-text\n--mno-stack-bias  -mno-unaligned-doubles\n+-mapp-regs  -mbroken-saverestore  -mcypress\n+-mepilogue -mfaster-structs -mflat\n+-mfpu  -mhard-float  -mhard-quad-float\n+-mimpure-text  -mlive-g0  -mno-app-regs\n+-mno-epilogue -mno-faster-structs -mno-flat  -mno-fpu\n+-mno-impure-text -mno-stack-bias  -mno-unaligned-doubles\n -msoft-float  -msoft-quad-float  -msparclite  -mstack-bias\n -msupersparc  -munaligned-doubles  -mv8\n \n@@ -3946,6 +3947,17 @@ Specifying this option avoids some rare compatibility problems with code\n generated by other compilers.  It is not the default because it results\n in a performance loss, especially for floating point code.\n \n+@item -mno-faster-structs\n+@itemx -mfaster-structs\n+With @samp{-mfaster-structs}, the compiler assumes that structures\n+should have 8 byte alignment.  This enables the use of pairs of\n+@code{ldd} and @code{std} instructions for copies in structure\n+assignment, in place of twice as many @code{ld} and @code{st} pairs.\n+However, the use of this changed alignment directly violates the Sparc\n+ABI.  Thus, it's intended only for use on targets where the developer\n+acknowledges that their resulting code will not be directly in line with\n+the rules of the ABI.\n+\n @item -mv8\n @itemx -msparclite\n These two options select variations on the SPARC architecture."}]}