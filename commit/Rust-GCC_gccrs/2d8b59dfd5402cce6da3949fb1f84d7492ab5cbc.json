{"sha": "2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ4YjU5ZGZkNTQwMmNjZTZkYTM5NDlmYjFmODRkNzQ5MmFiNWNiYw==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2004-05-22T11:03:17Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-05-22T11:03:17Z"}, "message": "invoke.texi: Document -Wunderflow and spell check.\n\n\t* invoke.texi: Document -Wunderflow and spell check.\n\t* lang.opt: Add Wunderflow.\n\t* gfortran.h (gfc_option_t): Add warn_underflow option.\n\t* options.c (gfc_init_options, set_Wall): Use it.\n\t* primary.c (match_real_constant): Explicitly handle UNDERFLOW.\n\t* arith.c (gfc_arith_uminus, gfc_arith_plus, gfc_arith_minus,\n\tgfc_arith_times, gfc_arith_divide, gfc_arith_power, gfc_real2real,\n\tgfc_real2complex, gfc_complex2real, gfc_complex2complex): Ditto.\n\t* arith.c (common_logarithm): Fix typo in comment.\n\nFrom-SVN: r82130", "tree": {"sha": "5e2d923df60ffc2a25a7691f24bdb163cf4a7da7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e2d923df60ffc2a25a7691f24bdb163cf4a7da7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc/comments", "author": null, "committer": null, "parents": [{"sha": "9fd47435098270dd5687b9bbaa34d1b9ecb494e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fd47435098270dd5687b9bbaa34d1b9ecb494e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fd47435098270dd5687b9bbaa34d1b9ecb494e7"}], "stats": {"total": 194, "additions": 162, "deletions": 32}, "files": [{"sha": "7b24d0472006f31179b841752f825db8c0dd47e7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc", "patch": "@@ -1,3 +1,15 @@\n+2004-05-22  Steven G. Kargl  <kargls@comcast.net>\n+\n+\t* invoke.texi: Document -Wunderflow and spell check.\n+\t* lang.opt: Add Wunderflow.\n+\t* gfortran.h (gfc_option_t): Add warn_underflow option.\n+\t* options.c (gfc_init_options, set_Wall): Use it.\n+\t* primary.c (match_real_constant): Explicitly handle UNDERFLOW.\n+\t* arith.c (gfc_arith_uminus, gfc_arith_plus, gfc_arith_minus,\n+\tgfc_arith_times, gfc_arith_divide, gfc_arith_power, gfc_real2real,\n+\tgfc_real2complex, gfc_complex2real, gfc_complex2complex): Ditto.\n+\t* arith.c (common_logarithm): Fix typo in comment.\n+\n 2004-05-21  Roger Sayle  <roger@eyesopen.com>\n \n \t* io.c (check_format): As a GNU extension, allow the comma after a"}, {"sha": "6b7b29a18ad581b41a7afb1cf4430071093895c6", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 115, "deletions": 18, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc", "patch": "@@ -153,7 +153,7 @@ natural_logarithm (mpf_t * arg, mpf_t * result)\n \n \n /* Calculate the common logarithm of arg.  We use the natural\n-   logaritm of arg and of 10:\n+   logarithm of arg and of 10:\n \n    log10(arg) = log(arg)/log(10)  */\n \n@@ -1173,7 +1173,9 @@ gfc_arith_neqv (gfc_expr * op1, gfc_expr * op2, gfc_expr ** resultp)\n \n \n /* Make sure a constant numeric expression is within the range for\n-   its type and kind.  Note that there's also a gfc_check_range(),\n+   its type and kind.  GMP is doing 130 bit arithmetic, so an UNDERFLOW\n+   is numerically zero for REAL(4) and REAL(8) types.  Reset the value(s)\n+   to exactly 0 for UNDERFLOW.  Note that there's also a gfc_check_range(),\n    but that one deals with the intrinsic RANGE function.  */\n \n arith\n@@ -1189,12 +1191,20 @@ gfc_range_check (gfc_expr * e)\n \n     case BT_REAL:\n       rc = gfc_check_real_range (e->value.real, e->ts.kind);\n+      if (rc == ARITH_UNDERFLOW)\n+        mpf_set_ui (e->value.real, 0);\n       break;\n \n     case BT_COMPLEX:\n       rc = gfc_check_real_range (e->value.complex.r, e->ts.kind);\n-      if (rc == ARITH_OK)\n-\trc = gfc_check_real_range (e->value.complex.i, e->ts.kind);\n+      if (rc == ARITH_UNDERFLOW)\n+        mpf_set_ui (e->value.real, 0);\n+      if (rc == ARITH_OK || rc == ARITH_UNDERFLOW)\n+        {\n+          rc = gfc_check_real_range (e->value.complex.i, e->ts.kind);\n+          if (rc == ARITH_UNDERFLOW)\n+            mpf_set_ui (e->value.real, 0);\n+        }\n \n       break;\n \n@@ -1248,7 +1258,14 @@ gfc_arith_uminus (gfc_expr * op1, gfc_expr ** resultp)\n \n   rc = gfc_range_check (result);\n \n-  if (rc != ARITH_OK)\n+  if (rc == ARITH_UNDERFLOW)\n+    {\n+      if (gfc_option.warn_underflow)\n+        gfc_warning (\"%s at %L\", gfc_arith_error (rc), &op1->where);\n+      rc = ARITH_OK;\n+      *resultp = result;\n+    }\n+  else if (rc != ARITH_OK)\n     gfc_free_expr (result);\n   else\n     *resultp = result;\n@@ -1289,7 +1306,14 @@ gfc_arith_plus (gfc_expr * op1, gfc_expr * op2, gfc_expr ** resultp)\n \n   rc = gfc_range_check (result);\n \n-  if (rc != ARITH_OK)\n+  if (rc == ARITH_UNDERFLOW)\n+    {\n+      if (gfc_option.warn_underflow)\n+        gfc_warning (\"%s at %L\", gfc_arith_error (rc), &op1->where);\n+      rc = ARITH_OK;\n+      *resultp = result;\n+    }\n+  else if (rc != ARITH_OK)\n     gfc_free_expr (result);\n   else\n     *resultp = result;\n@@ -1331,7 +1355,14 @@ gfc_arith_minus (gfc_expr * op1, gfc_expr * op2, gfc_expr ** resultp)\n \n   rc = gfc_range_check (result);\n \n-  if (rc != ARITH_OK)\n+  if (rc == ARITH_UNDERFLOW)\n+    {\n+      if (gfc_option.warn_underflow)\n+        gfc_warning (\"%s at %L\", gfc_arith_error (rc), &op1->where);\n+      rc = ARITH_OK;\n+      *resultp = result;\n+    }\n+  else if (rc != ARITH_OK)\n     gfc_free_expr (result);\n   else\n     *resultp = result;\n@@ -1382,7 +1413,14 @@ gfc_arith_times (gfc_expr * op1, gfc_expr * op2, gfc_expr ** resultp)\n \n   rc = gfc_range_check (result);\n \n-  if (rc != ARITH_OK)\n+  if (rc == ARITH_UNDERFLOW)\n+    {\n+      if (gfc_option.warn_underflow)\n+        gfc_warning (\"%s at %L\", gfc_arith_error (rc), &op1->where);\n+      rc = ARITH_OK;\n+      *resultp = result;\n+    }\n+  else if (rc != ARITH_OK)\n     gfc_free_expr (result);\n   else\n     *resultp = result;\n@@ -1464,7 +1502,14 @@ gfc_arith_divide (gfc_expr * op1, gfc_expr * op2, gfc_expr ** resultp)\n   if (rc == ARITH_OK)\n     rc = gfc_range_check (result);\n \n-  if (rc != ARITH_OK)\n+  if (rc == ARITH_UNDERFLOW)\n+    {\n+      if (gfc_option.warn_underflow)\n+        gfc_warning (\"%s at %L\", gfc_arith_error (rc), &op1->where);\n+      rc = ARITH_OK;\n+      *resultp = result;\n+    }\n+  else if (rc != ARITH_OK)\n     gfc_free_expr (result);\n   else\n     *resultp = result;\n@@ -1642,7 +1687,14 @@ gfc_arith_power (gfc_expr * op1, gfc_expr * op2, gfc_expr ** resultp)\n   if (rc == ARITH_OK)\n     rc = gfc_range_check (result);\n \n-  if (rc != ARITH_OK)\n+  if (rc == ARITH_UNDERFLOW)\n+    {\n+      if (gfc_option.warn_underflow)\n+        gfc_warning (\"%s at %L\", gfc_arith_error (rc), &op1->where);\n+      rc = ARITH_OK;\n+      *resultp = result;\n+    }\n+  else if (rc != ARITH_OK)\n     gfc_free_expr (result);\n   else\n     *resultp = result;\n@@ -2531,8 +2583,8 @@ arith_error (arith rc, gfc_typespec * from, gfc_typespec * to, locus * where)\n   gfc_error (\"%s converting %s to %s at %L\", gfc_arith_error (rc),\n \t     gfc_typename (from), gfc_typename (to), where);\n \n-  /* TODO: Do something about the error, ie underflow rounds to 0,\n-     throw exception, return NaN, etc.  */\n+  /* TODO: Do something about the error, ie, throw exception, return\n+     NaN, etc.  */\n }\n \n /* Convert integers to integers.  */\n@@ -2642,7 +2694,15 @@ gfc_real2real (gfc_expr * src, int kind)\n \n   mpf_set (result->value.real, src->value.real);\n \n-  if ((rc = gfc_check_real_range (result->value.real, kind)) != ARITH_OK)\n+  rc = gfc_check_real_range (result->value.real, kind);\n+\n+  if (rc == ARITH_UNDERFLOW)\n+    {\n+      if (gfc_option.warn_underflow)\n+        gfc_warning (\"%s at %L\", gfc_arith_error (rc), &src->where);\n+      mpf_set_ui(result->value.real, 0);\n+    }\n+  else if (rc != ARITH_OK)\n     {\n       arith_error (rc, &src->ts, &result->ts, &src->where);\n       gfc_free_expr (result);\n@@ -2666,7 +2726,15 @@ gfc_real2complex (gfc_expr * src, int kind)\n   mpf_set (result->value.complex.r, src->value.real);\n   mpf_set_ui (result->value.complex.i, 0);\n \n-  if ((rc = gfc_check_real_range (result->value.complex.r, kind)) != ARITH_OK)\n+  rc = gfc_check_real_range (result->value.complex.r, kind);\n+\n+  if (rc == ARITH_UNDERFLOW)\n+    {\n+      if (gfc_option.warn_underflow)\n+        gfc_warning (\"%s at %L\", gfc_arith_error (rc), &src->where);\n+      mpf_set_ui(result->value.complex.r, 0);\n+    }\n+  else if (rc != ARITH_OK)\n     {\n       arith_error (rc, &src->ts, &result->ts, &src->where);\n       gfc_free_expr (result);\n@@ -2713,7 +2781,15 @@ gfc_complex2real (gfc_expr * src, int kind)\n \n   mpf_set (result->value.real, src->value.complex.r);\n \n-  if ((rc = gfc_check_real_range (result->value.real, kind)) != ARITH_OK)\n+  rc = gfc_check_real_range (result->value.real, kind);\n+\n+  if (rc == ARITH_UNDERFLOW) \n+    {\n+      if (gfc_option.warn_underflow)\n+        gfc_warning (\"%s at %L\", gfc_arith_error (rc), &src->where);\n+      mpf_set_ui(result->value.real, 0);\n+    }\n+  if (rc != ARITH_OK)\n     {\n       arith_error (rc, &src->ts, &result->ts, &src->where);\n       gfc_free_expr (result);\n@@ -2737,9 +2813,30 @@ gfc_complex2complex (gfc_expr * src, int kind)\n   mpf_set (result->value.complex.r, src->value.complex.r);\n   mpf_set (result->value.complex.i, src->value.complex.i);\n \n-  if ((rc = gfc_check_real_range (result->value.complex.r, kind)) != ARITH_OK\n-      || (rc =\n-\t  gfc_check_real_range (result->value.complex.i, kind)) != ARITH_OK)\n+  rc = gfc_check_real_range (result->value.complex.r, kind);\n+\n+  if (rc == ARITH_UNDERFLOW)\n+    {\n+      if (gfc_option.warn_underflow)\n+        gfc_warning (\"%s at %L\", gfc_arith_error (rc), &src->where);\n+      mpf_set_ui(result->value.complex.r, 0);\n+    }\n+  else if (rc != ARITH_OK)\n+    {\n+      arith_error (rc, &src->ts, &result->ts, &src->where);\n+      gfc_free_expr (result);\n+      return NULL;\n+    }\n+  \n+  rc = gfc_check_real_range (result->value.complex.i, kind);\n+\n+  if (rc == ARITH_UNDERFLOW)\n+    {\n+      if (gfc_option.warn_underflow)\n+        gfc_warning (\"%s at %L\", gfc_arith_error (rc), &src->where);\n+      mpf_set_ui(result->value.complex.i, 0);\n+    }\n+  else if (rc != ARITH_OK)\n     {\n       arith_error (rc, &src->ts, &result->ts, &src->where);\n       gfc_free_expr (result);"}, {"sha": "35c2e0852bb1995c4b673d800cd538de6a675445", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc", "patch": "@@ -1215,6 +1215,7 @@ typedef struct\n   int warn_conversion;\n   int warn_implicit_interface;\n   int warn_line_truncation;\n+  int warn_underflow;\n   int warn_surprising;\n   int warn_unused_labels;\n "}, {"sha": "138951b221e36d947190230736743ad03f2c7068", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc", "patch": "@@ -126,7 +126,7 @@ by type.  Explanations are in the following sections.\n @gccoptlist{\n -fsyntax-only  -pedantic  -pedantic-errors @gol\n -w  -Wall  -Waliasing  -Wconversion @gol\n--Wimplicit-interface  -Wsurprising  -Wunused-labels @gol\n+-Wimplicit-interface  -Wsurprising  -Wunderflow -Wunused-labels @gol\n -Wline-truncation @gol\n -Werror  -W}\n \n@@ -222,7 +222,7 @@ to them to fill out the line.\n Specify the maximum allowed identifier length. Typical values are\n 31 (Fortran 95) and 63 (Fortran 200x).\n \n-@cindex -fimpicit-none option\n+@cindex -fimplicit-none option\n @cindex options, -fimplicit-none\n @item -fimplicit-none\n Specify that no implicit typing is allowed, unless overridden by explicit\n@@ -318,7 +318,7 @@ Inhibit all warning messages.\n @cindex warnings, all\n Enables commonly used warning options that which pertain to usage that\n we recommend avoiding and that we believe is easy to avoid.\n-This currenly includes @option{-Wunused-labels}, @option{-Waliasing},\n+This currently includes @option{-Wunused-labels}, @option{-Waliasing},\n @option{-Wsurprising} and @option{-Wline-truncation}.\n \n \n@@ -327,7 +327,7 @@ This currenly includes @option{-Wunused-labels}, @option{-Waliasing},\n @item -Waliasing\n @cindex aliasing\n Warn about possible aliasing of dummy arguments. The following example\n-witll trigger teh warhing as it would be illegal to @code{bar} to\n+will trigger the warning as it would be illegal to @code{bar} to\n modify either parameter.\n @smallexample\n   INTEGER A\n@@ -354,8 +354,8 @@ check that the declared interfaces are consistent across program units.\n @cindex options, -Wsurprising\n @item -Wsurprising\n @cindex Suspicious\n-Produce a warning when ``suspicous'' code constructs are encountered.\n-While techically legal these usually indicate that an error has been made.\n+Produce a warning when ``suspicious'' code constructs are encountered.\n+While technically legal these usually indicate that an error has been made.\n \n This currently produces a warning under the following circumstances:\n \n@@ -368,6 +368,14 @@ lower value that is greater than its upper value.\n A LOGICAL SELECT construct has three CASE statements.\n @end itemize\n \n+@cindex -Wunderflow\n+@cindex options, -Wunderflow\n+@item -Wunderflow\n+@cindex UNDERFLOW\n+Produce a warning when numerical constant expressions are\n+encountered, which yield an UNDERFLOW during compilation.\n+\n+\n @cindex -Wunused-labels option\n @cindex options, -Wunused-labels\n @item -Wunused-labels\n@@ -412,7 +420,7 @@ either your program or @command{gfortran}\n @cindex option, -fdump-parse-tree\n @item -fdump-parse-tree\n Output the internal parse tree before starting code generation.  Only\n-really usedful for debugging gfortran itself.\n+really useful for debugging gfortran itself.\n @end table\n \n @xref{Debugging Options,,Options for Debugging Your Program or GCC,\n@@ -432,7 +440,7 @@ for files specified via the @code{INCLUDE} directive, and where it searches\n for previously compiled modules.\n \n It also affects the search paths used by @command{cpp} when used to preprocess\n-fortran source.\n+Fortran source.\n \n @table @gcctabopt\n @cindex -Idir option\n@@ -463,8 +471,8 @@ gcc,Using the GNU Compiler Collection (GCC)}, for information on the\n @cindex option, -Mdir\n @item -M@var{dir}\n @item -J@var{dir}\n-This option specifies where to put @samp{.mod} files for compiled modiles.\n-It is also added to the list of directories to searhed by an @code{USE}\n+This option specifies where to put @samp{.mod} files for compiled modules.\n+It is also added to the list of directories to searched by an @code{USE}\n statement.\n \n The default is the current directory.\n@@ -596,7 +604,7 @@ and against the declared minimum and maximum values.  It also\n checks array indices for assumed and deferred\n shape arrays against the actual allocated bounds.\n \n-In the future this may also include other forms of checking, eg. checing\n+In the future this may also include other forms of checking, eg. checking\n substring references.\n \n \n@@ -615,7 +623,7 @@ The default value for @var{n} is 32768.\n @item -fpackderived\n @cindex Structure packing\n This option tells gfortran to pack derived type members as closely as\n-possible.  Code compiled with this option is likley to be incompatible\n+possible.  Code compiled with this option is likely to be incompatible\n with code compiled without this option, and may execute slower.\n \n @cindex -frepack-arrays option"}, {"sha": "ff670d66f2b69b294dd86b69a819b2d23b20483c", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc", "patch": "@@ -57,6 +57,10 @@ Wsurprising\n F95\n Warn about \\\"suspicious\\\" constructs\n \n+Wunderflow\n+F95\n+Warn about underflow of numerical constant expressions\n+\n Wunused-labels\n F95\n Warn when a label is unused"}, {"sha": "b0f9a76e5f2350e14fda9c7d45f906e30a14279a", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc", "patch": "@@ -56,6 +56,7 @@ gfc_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n   gfc_option.warn_conversion = 0;\n   gfc_option.warn_implicit_interface = 0;\n   gfc_option.warn_line_truncation = 0;\n+  gfc_option.warn_underflow = 1;\n   gfc_option.warn_surprising = 0;\n   gfc_option.warn_unused_labels = 0;\n \n@@ -123,6 +124,7 @@ set_Wall (void)\n \n   gfc_option.warn_aliasing = 1;\n   gfc_option.warn_line_truncation = 1;\n+  gfc_option.warn_underflow = 1;\n   gfc_option.warn_surprising = 1;\n   gfc_option.warn_unused_labels = 1;\n \n@@ -198,6 +200,10 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       gfc_option.warn_line_truncation = value;\n       break;\n \n+    case OPT_Wunderflow:\n+      gfc_option.warn_underflow = value;\n+      break;\n+\n     case OPT_Wsurprising:\n       gfc_option.warn_surprising = value;\n       break;"}, {"sha": "a55c5aa678188572e19c846f4e6956c8ee7597f5", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc", "patch": "@@ -489,8 +489,10 @@ match_real_constant (gfc_expr ** result, int signflag)\n       goto cleanup;\n \n     case ARITH_UNDERFLOW:\n-      gfc_error (\"Real constant underflows its kind at %C\");\n-      goto cleanup;\n+      if (gfc_option.warn_underflow)\n+        gfc_warning (\"Real constant underflows its kind at %C\");\n+      mpf_set_ui(e->value.real, 0);\n+      break;\n \n     default:\n       gfc_internal_error (\"gfc_range_check() returned bad value\");"}]}