{"sha": "9730c5ccd522cd955bcb6e65295023621cade8b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTczMGM1Y2NkNTIyY2Q5NTViY2I2ZTY1Mjk1MDIzNjIxY2FkZThiNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-15T08:08:49Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-15T08:08:49Z"}, "message": "[AArch64] Use SVE [SU]ABD in conditional arithmetic\n\nThis patch extends the [SU]ABD support so that it handles\nconditional arithmetic.  We're relying on combine for this,\nsince there's no associated IFN_COND_* (yet?).\n\n2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (*aarch64_cond_<su>abd<mode>_2)\n\t(*aarch64_cond_<su>abd<mode>_any): New patterns.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cond_abd_1.c: New test.\n\t* gcc.target/aarch64/sve/cond_abd_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_abd_2.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_abd_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_abd_3.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_abd_3_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_abd_4.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_abd_4_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_abd_5.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_abd_5_run.c: Likewise.\n\nCo-Authored-By: Kugan Vivekanandarajah <kuganv@linaro.org>\n\nFrom-SVN: r274506", "tree": {"sha": "97bb1c94dad62b6270672a293661523cd4c870b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97bb1c94dad62b6270672a293661523cd4c870b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9730c5ccd522cd955bcb6e65295023621cade8b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9730c5ccd522cd955bcb6e65295023621cade8b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9730c5ccd522cd955bcb6e65295023621cade8b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9730c5ccd522cd955bcb6e65295023621cade8b6/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20103c0ea9336d2b5286eb7f2605ace3fd49a431", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20103c0ea9336d2b5286eb7f2605ace3fd49a431", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20103c0ea9336d2b5286eb7f2605ace3fd49a431"}], "stats": {"total": 481, "additions": 481, "deletions": 0}, "files": [{"sha": "08e779cc0944b30ddf48c15215026c4def62ac9d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9730c5ccd522cd955bcb6e65295023621cade8b6", "patch": "@@ -1,3 +1,9 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* config/aarch64/aarch64-sve.md (*aarch64_cond_<su>abd<mode>_2)\n+\t(*aarch64_cond_<su>abd<mode>_any): New patterns.\n+\n 2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n "}, {"sha": "5839970935b70a821fb845407455c8118d24512a", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=9730c5ccd522cd955bcb6e65295023621cade8b6", "patch": "@@ -2073,6 +2073,84 @@\n   [(set_attr \"movprfx\" \"*,yes\")]\n )\n \n+;; Predicated integer absolute difference, merging with the first input.\n+(define_insn_and_rewrite \"*aarch64_cond_<su>abd<mode>_2\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (minus:SVE_I\n+\t     (unspec:SVE_I\n+\t       [(match_operand 4)\n+\t\t(USMAX:SVE_I\n+\t\t  (match_operand:SVE_I 2 \"register_operand\" \"0, w\")\n+\t\t  (match_operand:SVE_I 3 \"register_operand\" \"w, w\"))]\n+\t       UNSPEC_PRED_X)\n+\t     (unspec:SVE_I\n+\t       [(match_operand 5)\n+\t\t(<max_opp>:SVE_I\n+\t\t  (match_dup 2)\n+\t\t  (match_dup 3))]\n+\t       UNSPEC_PRED_X))\n+\t   (match_dup 2)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\"\n+  \"@\n+   <su>abd\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0, %2\\;<su>abd\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n+  \"&& (!CONSTANT_P (operands[4]) || !CONSTANT_P (operands[5]))\"\n+  {\n+    operands[4] = operands[5] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Predicated integer absolute difference, merging with an independent value.\n+(define_insn_and_rewrite \"*aarch64_cond_<su>abd<mode>_any\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=&w, &w, &w, &w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl, Upl\")\n+\t   (minus:SVE_I\n+\t     (unspec:SVE_I\n+\t       [(match_operand 5)\n+\t\t(USMAX:SVE_I\n+\t\t  (match_operand:SVE_I 2 \"register_operand\" \"0, w, w, w, w\")\n+\t\t  (match_operand:SVE_I 3 \"register_operand\" \"w, 0, w, w, w\"))]\n+\t       UNSPEC_PRED_X)\n+\t     (unspec:SVE_I\n+\t       [(match_operand 6)\n+\t\t(<max_opp>:SVE_I\n+\t\t  (match_dup 2)\n+\t\t  (match_dup 3))]\n+\t       UNSPEC_PRED_X))\n+\t   (match_operand:SVE_I 4 \"aarch64_simd_reg_or_zero\" \"Dz, Dz, Dz, 0, w\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\n+   && !rtx_equal_p (operands[2], operands[4])\n+   && !rtx_equal_p (operands[3], operands[4])\"\n+  \"@\n+   movprfx\\t%0.<Vetype>, %1/z, %0.<Vetype>\\;<su>abd\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %0.<Vetype>\\;<su>abd\\t%0.<Vetype>, %1/m, %0.<Vetype>, %2.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %2.<Vetype>\\;<su>abd\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/m, %2.<Vetype>\\;<su>abd\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   #\"\n+  \"&& 1\"\n+  {\n+    if (!CONSTANT_P (operands[5]) || !CONSTANT_P (operands[6]))\n+      operands[5] = operands[6] = CONSTM1_RTX (<VPRED>mode);\n+    else if (reload_completed\n+\t     && register_operand (operands[4], <MODE>mode)\n+\t     && !rtx_equal_p (operands[0], operands[4]))\n+      {\n+\temit_insn (gen_vcond_mask_<mode><vpred> (operands[0], operands[2],\n+\t\t\t\t\t\t operands[4], operands[1]));\n+\toperands[4] = operands[2] = operands[0];\n+      }\n+    else\n+      FAIL;\n+  }\n+  [(set_attr \"movprfx\" \"yes\")]\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [INT] Highpart multiplication\n ;; -------------------------------------------------------------------------"}, {"sha": "19ce33750e24d7c2166185df8402770986a3adb6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9730c5ccd522cd955bcb6e65295023621cade8b6", "patch": "@@ -1,3 +1,17 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* gcc.target/aarch64/sve/cond_abd_1.c: New test.\n+\t* gcc.target/aarch64/sve/cond_abd_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_abd_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_abd_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_abd_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_abd_3_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_abd_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_abd_4_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_abd_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_abd_5_run.c: Likewise.\n+\n 2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n "}, {"sha": "c02e8ae8e83f42102c343ef068f154eb2ee1b88d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_abd_1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_1.c?ref=9730c5ccd522cd955bcb6e65295023621cade8b6", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define abd(A, B) (((A) < (B) ? (B) : (A)) - ((A) < (B) ? (A) : (B)))\n+\n+#define DEF_LOOP(TYPE)\t\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\\\n+  test_##TYPE (TYPE *__restrict r, TYPE *__restrict a,\t\\\n+\t       TYPE *__restrict b, TYPE *__restrict c,\t\\\n+\t       int n)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = a[i] < 20 ? abd (b[i], c[i]) : b[i];\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (int8_t) \\\n+  T (uint8_t) \\\n+  T (int16_t) \\\n+  T (uint16_t) \\\n+  T (int32_t) \\\n+  T (uint32_t) \\\n+  T (int64_t) \\\n+  T (uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "a45beefc26fe566bb2202e22a38a73b70e9d4e93", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_abd_1_run.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_1_run.c?ref=9730c5ccd522cd955bcb6e65295023621cade8b6", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_abd_1.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], c[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tc[i] = ((i + 2) % 3) * (i + 1);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE (r, a, b, c, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = a[i] < 20 ? abd (b[i], c[i]) : b[i];\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "97901b6f84894197058fb545a9f60fb3bd593e8c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_abd_2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_2.c?ref=9730c5ccd522cd955bcb6e65295023621cade8b6", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define abd(A, B) (((A) < (B) ? (B) : (A)) - ((A) < (B) ? (A) : (B)))\n+\n+#define DEF_LOOP(TYPE)\t\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\\\n+  test_##TYPE (TYPE *__restrict r, TYPE *__restrict a,\t\\\n+\t       TYPE *__restrict b, TYPE *__restrict c,\t\\\n+\t       int n)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = a[i] < 20 ? abd (b[i], c[i]) : c[i];\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (int8_t) \\\n+  T (uint8_t) \\\n+  T (int16_t) \\\n+  T (uint16_t) \\\n+  T (int32_t) \\\n+  T (uint32_t) \\\n+  T (int64_t) \\\n+  T (uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "474bc0f9a1083b75833135b9c9adb13276ab1e96", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_abd_2_run.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_2_run.c?ref=9730c5ccd522cd955bcb6e65295023621cade8b6", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_abd_2.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], c[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tc[i] = ((i + 2) % 3) * (i + 1);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE (r, a, b, c, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = a[i] < 20 ? abd (b[i], c[i]) : c[i];\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "dc8bc3cee9c60196f0a9515dd4e8d62abe2e3eef", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_abd_3.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_3.c?ref=9730c5ccd522cd955bcb6e65295023621cade8b6", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define abd(A, B) (((A) < (B) ? (B) : (A)) - ((A) < (B) ? (A) : (B)))\n+\n+#define DEF_LOOP(TYPE)\t\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\\\n+  test_##TYPE (TYPE *__restrict r, TYPE *__restrict a,\t\\\n+\t       TYPE *__restrict b, TYPE *__restrict c,\t\\\n+\t       int n)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = a[i] < 20 ? abd (b[i], c[i]) : a[i];\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (int8_t) \\\n+  T (uint8_t) \\\n+  T (int16_t) \\\n+  T (uint16_t) \\\n+  T (int32_t) \\\n+  T (uint32_t) \\\n+  T (int64_t) \\\n+  T (uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "9f1ac2df849e7267492627fca8d9bdb84954a3a5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_abd_3_run.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_3_run.c?ref=9730c5ccd522cd955bcb6e65295023621cade8b6", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_abd_3.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], c[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tc[i] = ((i + 2) % 3) * (i + 1);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE (r, a, b, c, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = a[i] < 20 ? abd (b[i], c[i]) : a[i];\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "5c65e59ed6af81ef96c7c30ecfa294ce5e9577e2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_abd_4.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_4.c?ref=9730c5ccd522cd955bcb6e65295023621cade8b6", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define abd(A, B) (((A) < (B) ? (B) : (A)) - ((A) < (B) ? (A) : (B)))\n+\n+#define DEF_LOOP(TYPE)\t\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\\\n+  test_##TYPE (TYPE *__restrict r, TYPE *__restrict a,\t\\\n+\t       TYPE *__restrict b, TYPE *__restrict c,\t\\\n+\t       int n)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = a[i] < 20 ? abd (b[i], c[i]) : 79;\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (int8_t) \\\n+  T (uint8_t) \\\n+  T (int16_t) \\\n+  T (uint16_t) \\\n+  T (int32_t) \\\n+  T (uint32_t) \\\n+  T (int64_t) \\\n+  T (uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\t} 8 } } */"}, {"sha": "47fd9e09f183444ba88312f1bddfa7b5cb6ab23b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_abd_4_run.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_4_run.c?ref=9730c5ccd522cd955bcb6e65295023621cade8b6", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_abd_4.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], c[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tc[i] = ((i + 2) % 3) * (i + 1);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE (r, a, b, c, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = a[i] < 20 ? abd (b[i], c[i]) : 79;\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "f2c0131585340e7b9a1a936198eaeb861c8669d9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_abd_5.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_5.c?ref=9730c5ccd522cd955bcb6e65295023621cade8b6", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define abd(A, B) (((A) < (B) ? (B) : (A)) - ((A) < (B) ? (A) : (B)))\n+\n+#define DEF_LOOP(TYPE)\t\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\\\n+  test_##TYPE (TYPE *__restrict r, TYPE *__restrict a,\t\\\n+\t       TYPE *__restrict b, TYPE *__restrict c,\t\\\n+\t       int n)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = a[i] < 20 ? abd (b[i], c[i]) : 0;\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (int8_t) \\\n+  T (uint8_t) \\\n+  T (int16_t) \\\n+  T (uint16_t) \\\n+  T (int32_t) \\\n+  T (uint32_t) \\\n+  T (int64_t) \\\n+  T (uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/z, z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "7cd44be38b737eeae6dc7c0ee5cea18f24a8cea0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_abd_5_run.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_5_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9730c5ccd522cd955bcb6e65295023621cade8b6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_5_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_abd_5_run.c?ref=9730c5ccd522cd955bcb6e65295023621cade8b6", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_abd_5.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], c[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tc[i] = ((i + 2) % 3) * (i + 1);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE (r, a, b, c, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = a[i] < 20 ? abd (b[i], c[i]) : 0;\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}]}