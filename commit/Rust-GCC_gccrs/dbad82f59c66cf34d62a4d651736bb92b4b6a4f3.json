{"sha": "dbad82f59c66cf34d62a4d651736bb92b4b6a4f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJhZDgyZjU5YzY2Y2YzNGQ2MmE0ZDY1MTczNmJiOTJiNGI2YTRmMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-09-17T09:00:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-09-17T09:00:23Z"}, "message": "re PR rtl-optimization/45678 (crash on vector code with -m32 -msse)\n\n2010-09-17  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/45678\n\t* builtins.c (fold_builtin_memory_op): Always properly adjust\n\talignment of memory accesses.\n\nFrom-SVN: r164356", "tree": {"sha": "4a30594d5197d1ab67d4bb385ff0565f90546283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a30594d5197d1ab67d4bb385ff0565f90546283"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbad82f59c66cf34d62a4d651736bb92b4b6a4f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbad82f59c66cf34d62a4d651736bb92b4b6a4f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbad82f59c66cf34d62a4d651736bb92b4b6a4f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbad82f59c66cf34d62a4d651736bb92b4b6a4f3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52b3b3c7e24d8ef6de75310eb4a1437f45c1f469", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52b3b3c7e24d8ef6de75310eb4a1437f45c1f469", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52b3b3c7e24d8ef6de75310eb4a1437f45c1f469"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "04eeac74099ba027f56bb4e128060f3277701433", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbad82f59c66cf34d62a4d651736bb92b4b6a4f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbad82f59c66cf34d62a4d651736bb92b4b6a4f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbad82f59c66cf34d62a4d651736bb92b4b6a4f3", "patch": "@@ -1,3 +1,9 @@\n+2010-09-17  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/45678\n+\t* builtins.c (fold_builtin_memory_op): Always properly adjust\n+\talignment of memory accesses.\n+\n 2010-09-16  Jan Hubicka  <jh@suse.cz>\n \n \t* lto-cgraph.c (input_overwrite_node): Do not set DECL_EXTERNAL when"}, {"sha": "384a81a035bd14b239c8c6dd72d2205b728f419c", "filename": "gcc/builtins.c", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbad82f59c66cf34d62a4d651736bb92b4b6a4f3/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbad82f59c66cf34d62a4d651736bb92b4b6a4f3/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=dbad82f59c66cf34d62a4d651736bb92b4b6a4f3", "patch": "@@ -8555,12 +8555,21 @@ fold_builtin_memory_op (location_t loc, tree dest, tree src,\n       STRIP_NOPS (srcvar);\n       if (TREE_CODE (srcvar) == ADDR_EXPR\n \t  && var_decl_component_p (TREE_OPERAND (srcvar, 0))\n-\t  && tree_int_cst_equal (TYPE_SIZE_UNIT (srctype), len)\n-\t  && (!STRICT_ALIGNMENT\n-\t      || !destvar\n-\t      || src_align >= TYPE_ALIGN (desttype)))\n-\tsrcvar = fold_build2 (MEM_REF, destvar ? desttype : srctype,\n-\t\t\t      srcvar, off0);\n+\t  && tree_int_cst_equal (TYPE_SIZE_UNIT (srctype), len))\n+\t{\n+\t  if (!destvar\n+\t      || src_align >= TYPE_ALIGN (desttype))\n+\t    srcvar = fold_build2 (MEM_REF, destvar ? desttype : srctype,\n+\t\t\t\t  srcvar, off0);\n+\t  else if (!STRICT_ALIGNMENT)\n+\t    {\n+\t      srctype = build_aligned_type (TYPE_MAIN_VARIANT (desttype),\n+\t\t\t\t\t    src_align);\n+\t      srcvar = fold_build2 (MEM_REF, srctype, srcvar, off0);\n+\t    }\n+\t  else\n+\t    srcvar = NULL_TREE;\n+\t}\n       else\n \tsrcvar = NULL_TREE;\n \n@@ -8569,19 +8578,31 @@ fold_builtin_memory_op (location_t loc, tree dest, tree src,\n \n       if (srcvar == NULL_TREE)\n \t{\n-\t  if (STRICT_ALIGNMENT\n-\t      && src_align < TYPE_ALIGN (desttype))\n-\t    return NULL_TREE;\n \t  STRIP_NOPS (src);\n-\t  srcvar = fold_build2 (MEM_REF, desttype, src, off0);\n+\t  if (src_align >= TYPE_ALIGN (desttype))\n+\t    srcvar = fold_build2 (MEM_REF, desttype, src, off0);\n+\t  else\n+\t    {\n+\t      if (STRICT_ALIGNMENT)\n+\t\treturn NULL_TREE;\n+\t      srctype = build_aligned_type (TYPE_MAIN_VARIANT (desttype),\n+\t\t\t\t\t    src_align);\n+\t      srcvar = fold_build2 (MEM_REF, srctype, src, off0);\n+\t    }\n \t}\n       else if (destvar == NULL_TREE)\n \t{\n-\t  if (STRICT_ALIGNMENT\n-\t      && dest_align < TYPE_ALIGN (srctype))\n-\t    return NULL_TREE;\n \t  STRIP_NOPS (dest);\n-\t  destvar = fold_build2 (MEM_REF, srctype, dest, off0);\n+\t  if (dest_align >= TYPE_ALIGN (srctype))\n+\t    destvar = fold_build2 (MEM_REF, srctype, dest, off0);\n+\t  else\n+\t    {\n+\t      if (STRICT_ALIGNMENT)\n+\t\treturn NULL_TREE;\n+\t      desttype = build_aligned_type (TYPE_MAIN_VARIANT (srctype),\n+\t\t\t\t\t     dest_align);\n+\t      destvar = fold_build2 (MEM_REF, desttype, dest, off0);\n+\t    }\n \t}\n \n       expr = build2 (MODIFY_EXPR, TREE_TYPE (destvar), destvar, srcvar);"}]}