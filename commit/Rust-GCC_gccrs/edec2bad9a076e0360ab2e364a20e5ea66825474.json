{"sha": "edec2bad9a076e0360ab2e364a20e5ea66825474", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRlYzJiYWQ5YTA3NmUwMzYwYWIyZTM2NGEyMGU1ZWE2NjgyNTQ3NA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-10-08T05:49:12Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-10-08T05:49:12Z"}, "message": "list (list<>::cbegin()): Use C++11 direct initialization.\n\n2018-10-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/debug/list (list<>::cbegin()): Use C++11 direct\n\tinitialization.\n\t(list<>::cend()): Likewise.\n\t(list<>::emplace<>(const_iterator, _Args&&...)): Likewise.\n\t(list<>::insert(const_iterator, initializer_list<>)): Likewise.\n\t(list<>::insert(const_iterator, size_type, const _Tp&)): Likewise.\n\t(list<>::erase(const_iterator, const_iterator)): Ensure consistent\n\titerator comparisons.\n\t(list<>::splice(const_iterator, list&&, const_iterator,\n\tconst_iterator)): Likewise.\n\nFrom-SVN: r264911", "tree": {"sha": "c3250aa2585568e21dbe8f9045ecca834966f135", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3250aa2585568e21dbe8f9045ecca834966f135"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edec2bad9a076e0360ab2e364a20e5ea66825474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edec2bad9a076e0360ab2e364a20e5ea66825474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edec2bad9a076e0360ab2e364a20e5ea66825474", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edec2bad9a076e0360ab2e364a20e5ea66825474/comments", "author": null, "committer": null, "parents": [{"sha": "c0485831b79ec7f8e0e4e1975c395f97f26020d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0485831b79ec7f8e0e4e1975c395f97f26020d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0485831b79ec7f8e0e4e1975c395f97f26020d7"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "e812b34d1d084df56242faf890a4d5425721bb8f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edec2bad9a076e0360ab2e364a20e5ea66825474/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edec2bad9a076e0360ab2e364a20e5ea66825474/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=edec2bad9a076e0360ab2e364a20e5ea66825474", "patch": "@@ -1,3 +1,16 @@\n+2018-10-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/list (list<>::cbegin()): Use C++11 direct\n+\tinitialization.\n+\t(list<>::cend()): Likewise.\n+\t(list<>::emplace<>(const_iterator, _Args&&...)): Likewise.\n+\t(list<>::insert(const_iterator, initializer_list<>)): Likewise.\n+\t(list<>::insert(const_iterator, size_type, const _Tp&)): Likewise.\n+\t(list<>::erase(const_iterator, const_iterator)): Ensure consistent\n+\titerator comparisons.\n+\t(list<>::splice(const_iterator, list&&, const_iterator,\n+\tconst_iterator)): Likewise.\n+\n 2018-10-05  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/stl_tree.h"}, {"sha": "879e117749787c66d0a002d355673c9108029a7f", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edec2bad9a076e0360ab2e364a20e5ea66825474/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edec2bad9a076e0360ab2e364a20e5ea66825474/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=edec2bad9a076e0360ab2e364a20e5ea66825474", "patch": "@@ -244,11 +244,11 @@ namespace __debug\n #if __cplusplus >= 201103L\n       const_iterator\n       cbegin() const noexcept\n-      { return const_iterator(_Base::begin(), this); }\n+      { return { _Base::begin(), this }; }\n \n       const_iterator\n       cend() const noexcept\n-      { return const_iterator(_Base::end(), this); }\n+      { return { _Base::end(), this }; }\n \n       const_reverse_iterator\n       crbegin() const noexcept\n@@ -405,8 +405,8 @@ namespace __debug\n \templace(const_iterator __position, _Args&&... __args)\n \t{\n \t  __glibcxx_check_insert(__position);\n-\t  return iterator(_Base::emplace(__position.base(),\n-\t\t\t\t\tstd::forward<_Args>(__args)...), this);\n+\t  return  { _Base::emplace(__position.base(),\n+\t\t\t\t   std::forward<_Args>(__args)...), this };\n \t}\n #endif\n \n@@ -430,7 +430,7 @@ namespace __debug\n       insert(const_iterator __p, initializer_list<value_type> __l)\n       {\n \t__glibcxx_check_insert(__p);\n-\treturn iterator(_Base::insert(__p.base(), __l), this);\n+\treturn { _Base::insert(__p.base(), __l), this };\n       }\n #endif\n \n@@ -439,7 +439,7 @@ namespace __debug\n       insert(const_iterator __position, size_type __n, const _Tp& __x)\n       {\n \t__glibcxx_check_insert(__position);\n-\treturn iterator(_Base::insert(__position.base(), __n, __x), this);\n+\treturn { _Base::insert(__position.base(), __n, __x), this };\n       }\n #else\n       void\n@@ -465,7 +465,7 @@ namespace __debug\n \t\t_Base::insert(__position.base(),\n \t\t\t      __gnu_debug::__unsafe(__first),\n \t\t\t      __gnu_debug::__unsafe(__last)),\n-\t\t  this\n+\t\tthis\n \t      };\n \t  else\n \t    return { _Base::insert(__position.base(), __first, __last), this };\n@@ -521,15 +521,17 @@ namespace __debug\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container\n \t__glibcxx_check_erase_range(__first, __last);\n-\tfor (_Base_const_iterator __victim = __first.base();\n+\tfor (__decltype(__first.base()) __victim = __first.base();\n \t     __victim != __last.base(); ++__victim)\n \t  {\n-\t    _GLIBCXX_DEBUG_VERIFY(__victim != _Base::end(),\n-\t\t\t\t  _M_message(__gnu_debug::__msg_valid_range)\n-\t\t\t\t  ._M_iterator(__first, \"position\")\n-\t\t\t\t  ._M_iterator(__last, \"last\"));\n+\t    _GLIBCXX_DEBUG_VERIFY(\n+\t\t__victim != __first._M_get_sequence()->_M_base().end(),\n+\t\t_M_message(__gnu_debug::__msg_valid_range)\n+\t\t._M_iterator(__first, \"position\")\n+\t\t._M_iterator(__last, \"last\"));\n \t    this->_M_invalidate_if(_Equal(__victim));\n \t  }\n+\n \treturn iterator(_Base::erase(__first.base(), __last.base()), this);\n       }\n \n@@ -586,7 +588,7 @@ namespace __debug\n \t\t\t      ._M_iterator(__i, \"__i\"));\n \t_GLIBCXX_DEBUG_VERIFY(__i._M_attached_to(std::__addressof(__x)),\n \t\t\t      _M_message(__gnu_debug::__msg_splice_other)\n-\t\t\t     ._M_iterator(__i, \"__i\")._M_sequence(__x, \"__x\"));\n+\t\t\t      ._M_iterator(__i, \"__i\")._M_sequence(__x, \"__x\"));\n \n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 250. splicing invalidates iterators\n@@ -620,19 +622,21 @@ namespace __debug\n \t// We used to perform the splice_alloc check:  not anymore, redundant\n \t// after implementing the relevant bits of N1599.\n \n-\tfor (_Base_const_iterator __tmp = __first.base();\n+\tfor (__decltype(__first.base()) __tmp = __first.base();\n \t     __tmp != __last.base(); ++__tmp)\n \t  {\n-\t    _GLIBCXX_DEBUG_VERIFY(__tmp != _Base::end(),\n-\t\t\t\t  _M_message(__gnu_debug::__msg_valid_range)\n-\t\t\t\t  ._M_iterator(__first, \"first\")\n-\t\t\t\t  ._M_iterator(__last, \"last\"));\n+\t    _GLIBCXX_DEBUG_VERIFY(\n+\t\t__tmp != __first._M_get_sequence()->_M_base().end(),\n+\t\t_M_message(__gnu_debug::__msg_valid_range)\n+\t\t._M_iterator(__first, \"first\")\n+\t\t._M_iterator(__last, \"last\"));\n \t    _GLIBCXX_DEBUG_VERIFY(std::__addressof(__x) != this\n \t\t\t\t  || __tmp != __position.base(),\n \t\t\t\t_M_message(__gnu_debug::__msg_splice_overlap)\n \t\t\t\t  ._M_iterator(__tmp, \"position\")\n \t\t\t\t  ._M_iterator(__first, \"first\")\n \t\t\t\t  ._M_iterator(__last, \"last\"));\n+\n \t    // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t    // 250. splicing invalidates iterators\n \t    this->_M_transfer_from_if(__x, _Equal(__tmp));"}]}