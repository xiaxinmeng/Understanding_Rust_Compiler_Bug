{"sha": "36d7571c0d377bd9a4e40d55ad803e6bf7b55cd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZkNzU3MWMwZDM3N2JkOWE0ZTQwZDU1YWQ4MDNlNmJmN2I1NWNkOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-12-20T23:04:37Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-12-20T23:04:37Z"}, "message": "re PR middle-end/18776 (Libgfortran doesn't build again)\n\n\tPR middle-end/18776\n\t* expr.c (write_complex_part): Use a subreg if the original object\n\tis a hard reg that spans an even number of regs or a MEM.\n\t(read_complex_part): Likewise.\n\nFrom-SVN: r92440", "tree": {"sha": "2e5a8433ef74f4121b60230ab0144e0d67dd6523", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e5a8433ef74f4121b60230ab0144e0d67dd6523"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36d7571c0d377bd9a4e40d55ad803e6bf7b55cd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d7571c0d377bd9a4e40d55ad803e6bf7b55cd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36d7571c0d377bd9a4e40d55ad803e6bf7b55cd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d7571c0d377bd9a4e40d55ad803e6bf7b55cd9/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "def9360c67e43763c98a0579164ce400fc9f411c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/def9360c67e43763c98a0579164ce400fc9f411c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/def9360c67e43763c98a0579164ce400fc9f411c"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "d5e223c5b32b47e635863dcde668c50acfcc95d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d7571c0d377bd9a4e40d55ad803e6bf7b55cd9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d7571c0d377bd9a4e40d55ad803e6bf7b55cd9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36d7571c0d377bd9a4e40d55ad803e6bf7b55cd9", "patch": "@@ -1,3 +1,10 @@\n+2004-12-20  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR middle-end/18776\n+\t* expr.c (write_complex_part): Use a subreg if the original object\n+\tis a hard reg that spans an even number of regs or a MEM.\n+\t(read_complex_part): Likewise.\n+\n 2004-12-20  Mark Mitchell  <mark@codesourcery.com>\n \n \t* Makefile.in (install-common): Do not install the specs file"}, {"sha": "bfc6b68af4d35436c0a0f95a14f46513cd2b2f0c", "filename": "gcc/expr.c", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d7571c0d377bd9a4e40d55ad803e6bf7b55cd9/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d7571c0d377bd9a4e40d55ad803e6bf7b55cd9/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=36d7571c0d377bd9a4e40d55ad803e6bf7b55cd9", "patch": "@@ -2598,14 +2598,32 @@ write_complex_part (rtx cplx, rtx val, bool imag_p)\n      will work.  This special case is important, since store_bit_field\n      wants to operate on integer modes, and there's rarely an OImode to\n      correspond to TCmode.  */\n-  if (ibitsize >= BITS_PER_WORD)\n+  if (ibitsize >= BITS_PER_WORD\n+      /* For hard regs we have exact predicates.  Assume we can split\n+\t the original object if it spans an even number of hard regs.\n+\t This special case is important for SCmode on 64-bit platforms\n+\t where the natural size of floating-point regs is 32-bit.  */\n+      || (GET_CODE (cplx) == REG\n+\t  && REGNO (cplx) < FIRST_PSEUDO_REGISTER\n+\t  && hard_regno_nregs[REGNO (cplx)][cmode] % 2 == 0)\n+      /* For MEMs we always try to make a \"subreg\", that is to adjust\n+\t the MEM, because store_bit_field may generate overly\n+\t convoluted RTL for sub-word fields.  */\n+      || MEM_P (cplx))\n     {\n       rtx part = simplify_gen_subreg (imode, cplx, cmode,\n \t\t\t\t      imag_p ? GET_MODE_SIZE (imode) : 0);\n-      emit_move_insn (part, val);\n+      if (part)\n+        {\n+\t  emit_move_insn (part, val);\n+\t  return;\n+\t}\n+      else\n+\t/* simplify_gen_subreg may fail for sub-word MEMs.  */\n+\tgcc_assert (MEM_P (cplx) && ibitsize < BITS_PER_WORD);\n     }\n-  else\n-    store_bit_field (cplx, ibitsize, imag_p ? ibitsize : 0, imode, val);\n+\n+  store_bit_field (cplx, ibitsize, imag_p ? ibitsize : 0, imode, val);\n }\n \n /* Extract one of the components of the complex value CPLX.  Extract the\n@@ -2640,12 +2658,26 @@ read_complex_part (rtx cplx, bool imag_p)\n      will work.  This special case is important, since extract_bit_field\n      wants to operate on integer modes, and there's rarely an OImode to\n      correspond to TCmode.  */\n-  if (ibitsize >= BITS_PER_WORD)\n+  if (ibitsize >= BITS_PER_WORD\n+      /* For hard regs we have exact predicates.  Assume we can split\n+\t the original object if it spans an even number of hard regs.\n+\t This special case is important for SCmode on 64-bit platforms\n+\t where the natural size of floating-point regs is 32-bit.  */\n+      || (GET_CODE (cplx) == REG\n+\t  && REGNO (cplx) < FIRST_PSEUDO_REGISTER\n+\t  && hard_regno_nregs[REGNO (cplx)][cmode] % 2 == 0)\n+      /* For MEMs we always try to make a \"subreg\", that is to adjust\n+\t the MEM, because extract_bit_field may generate overly\n+\t convoluted RTL for sub-word fields.  */\n+      || MEM_P (cplx))\n     {\n       rtx ret = simplify_gen_subreg (imode, cplx, cmode,\n \t\t\t\t     imag_p ? GET_MODE_SIZE (imode) : 0);\n-      gcc_assert (ret != NULL);\n-      return ret;\n+      if (ret)\n+        return ret;\n+      else\n+\t/* simplify_gen_subreg may fail for sub-word MEMs.  */\n+\tgcc_assert (MEM_P (cplx) && ibitsize < BITS_PER_WORD);\n     }\n \n   return extract_bit_field (cplx, ibitsize, imag_p ? ibitsize : 0,"}]}