{"sha": "01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFmOWU5NjRiZDU1ZmQwZjUyZjRhMDg0ZjcwZWU3YTVlMDcxY2ZhOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2001-07-05T15:39:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-07-05T15:39:36Z"}, "message": "cvt.c (convert_lvalue): New fn.\n\n        * cvt.c (convert_lvalue): New fn.\n        * cp-tree.h: Declare it.\n        * method.c (do_build_assign_ref): Use it.\n        (do_build_copy_constructor): Convert parm to base types\n        before calling base constructors.\n\n        * typeck.c (check_return_expr): Check DECL_ALIGN instead of\n        DECL_USER_ALIGN.  Check flag_elide_constructors instead of\n        optimize.\n        * semantics.c (cp_expand_stmt): Don't destroy the named return value.\n\nFrom-SVN: r43780", "tree": {"sha": "0709114363ae3b357e7e3dc92f90a62a000a2673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0709114363ae3b357e7e3dc92f90a62a000a2673"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "021c4bfd955ee14e054e0af78941e7401dbb9012", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021c4bfd955ee14e054e0af78941e7401dbb9012", "html_url": "https://github.com/Rust-GCC/gccrs/commit/021c4bfd955ee14e054e0af78941e7401dbb9012"}], "stats": {"total": 64, "additions": 48, "deletions": 16}, "files": [{"sha": "5e6195cf5322bcd6789a6f4a6e6b30491cadf5a8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9", "patch": "@@ -1,3 +1,16 @@\n+2001-07-05  Jason Merrill  <jason_merrill@redhat.com>\n+\n+\t* cvt.c (convert_lvalue): New fn.\n+\t* cp-tree.h: Declare it.\n+\t* method.c (do_build_assign_ref): Use it.\n+\t(do_build_copy_constructor): Convert parm to base types\n+\tbefore calling base constructors.\n+\n+\t* typeck.c (check_return_expr): Check DECL_ALIGN instead of\n+\tDECL_USER_ALIGN.  Check flag_elide_constructors instead of\n+\toptimize.\n+\t* semantics.c (cp_expand_stmt): Don't destroy the named return value.\n+\n 2001-07-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* optimize.c (optimize_inline_calls): New function, broken out"}, {"sha": "2ccb3b71655a18da48522d7979548fa5ab25a84e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9", "patch": "@@ -3735,6 +3735,7 @@ extern tree get_primary_binfo                   PARAMS ((tree));\n /* in cvt.c */\n extern tree convert_to_reference\t\tPARAMS ((tree, tree, int, int, tree));\n extern tree convert_from_reference\t\tPARAMS ((tree));\n+extern tree convert_lvalue\t\t\tPARAMS ((tree, tree));\n extern tree convert_pointer_to_real\t\tPARAMS ((tree, tree));\n extern tree convert_pointer_to\t\t\tPARAMS ((tree, tree));\n extern tree ocp_convert\t\t\t\tPARAMS ((tree, tree, int, int));"}, {"sha": "33be568ed14feb56c18a6589ef6c466d6ba1b4bc", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9", "patch": "@@ -597,6 +597,20 @@ convert_from_reference (val)\n     return build_indirect_ref (val, NULL);\n   return val;\n }\n+\n+/* Implicitly convert the lvalue EXPR to another lvalue of type TOTYPE,\n+   preserving cv-qualification.  */\n+\n+tree\n+convert_lvalue (totype, expr)\n+     tree totype, expr;\n+{\n+  totype = cp_build_qualified_type (totype, TYPE_QUALS (TREE_TYPE (expr)));\n+  totype = build_reference_type (totype);\n+  expr = convert_to_reference (totype, expr, CONV_IMPLICIT, LOOKUP_NORMAL,\n+\t\t\t       NULL_TREE);\n+  return convert_from_reference (expr);\n+}\n \f\n /* Call this when we know (for any reason) that expr is not, in fact,\n    zero.  This routine is like convert_pointer_to, but it pays"}, {"sha": "6f6a14b53a3898a3e19d7fbffe8f85fd6978fd14", "filename": "gcc/cp/method.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9", "patch": "@@ -557,25 +557,31 @@ do_build_copy_constructor (fndecl)\n       int cvquals = CP_TYPE_QUALS (TREE_TYPE (parm));\n       int i;\n \n-      /* Initialize all the base-classes.  */\n+      /* Initialize all the base-classes with the parameter converted to\n+         their type so that we get their copy constructor and not another\n+         constructor that takes current_class_type.  */\n       for (t = CLASSTYPE_VBASECLASSES (current_class_type); t;\n \t   t = TREE_CHAIN (t))\n-\tbase_init_list \n-\t  = tree_cons (BINFO_TYPE (TREE_VALUE (t)), parm, \n-\t\t       base_init_list);\n+\t{\n+\t  tree type = BINFO_TYPE (TREE_VALUE (t));\n+\t  base_init_list = tree_cons (type, convert_lvalue (type, parm),\n+\t\t\t\t      base_init_list);\n+\t}\n+\n       for (i = 0; i < n_bases; ++i)\n \t{\n \t  t = TREE_VEC_ELT (binfos, i);\n \t  if (TREE_VIA_VIRTUAL (t))\n \t    continue; \n \n-\t  base_init_list \n-\t    = tree_cons (BINFO_TYPE (t), parm, base_init_list);\n+\t  t = BINFO_TYPE (t);\n+\t  base_init_list = tree_cons (t, convert_lvalue (t, parm),\n+\t\t\t\t      base_init_list);\n \t}\n \n       for (; fields; fields = TREE_CHAIN (fields))\n \t{\n-\t  tree init, t;\n+\t  tree init;\n \t  tree field = fields;\n \n \t  if (TREE_CODE (field) != FIELD_DECL)\n@@ -645,12 +651,7 @@ do_build_assign_ref (fndecl)\n       for (i = 0; i < n_bases; ++i)\n \t{\n \t  tree basetype = BINFO_TYPE (TREE_VEC_ELT (binfos, i));\n-\t  tree p = build_qualified_type (basetype, cvquals);\n-\n-\t  p = convert_to_reference\n-\t    (build_reference_type (p), parm,\n-\t     CONV_IMPLICIT, LOOKUP_COMPLAIN, NULL_TREE);\n-\t  p = convert_from_reference (p);\n+\t  tree p = convert_lvalue (basetype, parm);\n \t  p = build_member_call (basetype, ansi_assopname (NOP_EXPR),\n \t\t\t\t build_tree_list (NULL_TREE, p));\n \t  finish_expr_stmt (p);"}, {"sha": "66f36ab2c5c03b606bb2e0f3b9313c564d3e1e31", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9", "patch": "@@ -2156,7 +2156,9 @@ cp_expand_stmt (t)\n   switch (TREE_CODE (t))\n     {\n     case CLEANUP_STMT:\n-      genrtl_decl_cleanup (CLEANUP_DECL (t), CLEANUP_EXPR (t));\n+      /* Don't destroy the chosen named return value.  */\n+      if (CLEANUP_DECL (t) != current_function_return_value)\n+\tgenrtl_decl_cleanup (CLEANUP_DECL (t), CLEANUP_EXPR (t));\n       break;\n \n     case CTOR_STMT:"}, {"sha": "43f38f3e1de0074e6b66d968440c334d964b47bb", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=01f9e964bd55fd0f52f4a084f70ee7a5e071cfa9", "patch": "@@ -6684,15 +6684,16 @@ check_return_expr (retval)\n      returned expression uses the chosen variable somehow.  And people expect\n      this restriction, anyway.  (jason 2000-11-19) */\n \n-  if (fn_returns_value_p && optimize)\n+  if (fn_returns_value_p && flag_elide_constructors)\n     {\n       if (retval != NULL_TREE\n \t  && (current_function_return_value == NULL_TREE\n \t      || current_function_return_value == retval)\n \t  && TREE_CODE (retval) == VAR_DECL\n \t  && DECL_CONTEXT (retval) == current_function_decl\n \t  && ! TREE_STATIC (retval)\n-\t  && ! DECL_USER_ALIGN (retval)\n+\t  && (DECL_ALIGN (retval)\n+\t      == DECL_ALIGN (DECL_RESULT (current_function_decl)))\n \t  && same_type_p (TREE_TYPE (retval),\n \t\t\t  TREE_TYPE (TREE_TYPE (current_function_decl))))\n \tcurrent_function_return_value = retval;"}]}