{"sha": "fba9fcae321660fdc760fd293d92970e52489706", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJhOWZjYWUzMjE2NjBmZGM3NjBmZDI5M2Q5Mjk3MGU1MjQ4OTcwNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-08-12T09:01:38Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-12T09:01:38Z"}, "message": "[Ada] Small comment tweaks for 3 predicates on bit-aligned references\n\nThey fix a few glitches left and right.  No functional changes.\n\n2019-08-12  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_util.ads (Component_May_Be_Bit_Aligned): Small comment\n\ttweaks.\n\t(Possible_Bit_Aligned_Component): Likewise.\n\t(Type_May_Have_Bit_Aligned_Components): Likewise.\n\t* exp_util.adb (Component_May_Be_Bit_Aligned): Likewise.\n\t(Possible_Bit_Aligned_Component): Likewise.\n\t(Type_May_Have_Bit_Aligned_Components): Likewise.\n\nFrom-SVN: r274304", "tree": {"sha": "02e667dc908cc3a3c58da6273298a1d480b97bd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02e667dc908cc3a3c58da6273298a1d480b97bd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fba9fcae321660fdc760fd293d92970e52489706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba9fcae321660fdc760fd293d92970e52489706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fba9fcae321660fdc760fd293d92970e52489706", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba9fcae321660fdc760fd293d92970e52489706/comments", "author": null, "committer": null, "parents": [{"sha": "009070260dd9ac941d30b119638a6f3839eb2e6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009070260dd9ac941d30b119638a6f3839eb2e6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/009070260dd9ac941d30b119638a6f3839eb2e6b"}], "stats": {"total": 100, "additions": 58, "deletions": 42}, "files": [{"sha": "64f4c6bb9ac2f5d544efec9edbc8101f77ea736d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba9fcae321660fdc760fd293d92970e52489706/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba9fcae321660fdc760fd293d92970e52489706/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fba9fcae321660fdc760fd293d92970e52489706", "patch": "@@ -1,3 +1,13 @@\n+2019-08-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_util.ads (Component_May_Be_Bit_Aligned): Small comment\n+\ttweaks.\n+\t(Possible_Bit_Aligned_Component): Likewise.\n+\t(Type_May_Have_Bit_Aligned_Components): Likewise.\n+\t* exp_util.adb (Component_May_Be_Bit_Aligned): Likewise.\n+\t(Possible_Bit_Aligned_Component): Likewise.\n+\t(Type_May_Have_Bit_Aligned_Components): Likewise.\n+\n 2019-08-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* exp_ch4.adb (Expand_N_Op_Eq): Expand the array equality if"}, {"sha": "41708c3097f328401cf9bc14730aaa9916e8b774", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba9fcae321660fdc760fd293d92970e52489706/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba9fcae321660fdc760fd293d92970e52489706/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=fba9fcae321660fdc760fd293d92970e52489706", "patch": "@@ -4444,8 +4444,8 @@ package body Exp_Util is\n \n    begin\n       --  If no component clause, then everything is fine, since the back end\n-      --  never bit-misaligns by default, even if there is a pragma Packed for\n-      --  the record.\n+      --  never misaligns from byte boundaries by default, even if there is a\n+      --  pragma Pack for the record.\n \n       if No (Comp) or else No (Component_Clause (Comp)) then\n          return False;\n@@ -10707,9 +10707,9 @@ package body Exp_Util is\n                Ptyp : constant Entity_Id := Etype (P);\n \n             begin\n-               --  If we know the component size and it is less than 64, then\n-               --  we are definitely OK. The back end always does assignment of\n-               --  misaligned small objects correctly.\n+               --  If we know the component size and it is not larger than 64,\n+               --  then we are definitely OK. The back end does the assignment\n+               --  of misaligned small objects correctly.\n \n                if Known_Static_Component_Size (Ptyp)\n                  and then Component_Size (Ptyp) <= 64\n@@ -10732,13 +10732,15 @@ package body Exp_Util is\n                Comp : constant Entity_Id := Entity (Selector_Name (N));\n \n             begin\n-               --  If there is no component clause, then we are in the clear\n-               --  since the back end will never misalign a large component\n-               --  unless it is forced to do so. In the clear means we need\n-               --  only the recursive test on the prefix.\n+               --  This is the crucial test: if the component itself causes\n+               --  trouble, then we can stop and return True.\n \n                if Component_May_Be_Bit_Aligned (Comp) then\n                   return True;\n+\n+               --  Otherwise, we need to test the prefix, to see if we are\n+               --  selecting from a possibly unaligned component.\n+\n                else\n                   return Possible_Bit_Aligned_Component (P);\n                end if;\n@@ -10751,7 +10753,7 @@ package body Exp_Util is\n             return Possible_Bit_Aligned_Component (Prefix (N));\n \n          --  For an unchecked conversion, check whether the expression may\n-         --  be bit-aligned.\n+         --  be bit aligned.\n \n          when N_Unchecked_Type_Conversion =>\n             return Possible_Bit_Aligned_Component (Expression (N));\n@@ -13505,9 +13507,17 @@ package body Exp_Util is\n          begin\n             E := First_Component_Or_Discriminant (Typ);\n             while Present (E) loop\n-               if Component_May_Be_Bit_Aligned (E)\n-                 or else Type_May_Have_Bit_Aligned_Components (Etype (E))\n-               then\n+               --  This is the crucial test: if the component itself causes\n+               --  trouble, then we can stop and return True.\n+\n+               if Component_May_Be_Bit_Aligned (E) then\n+                  return True;\n+               end if;\n+\n+               --  Otherwise, we need to test its type, to see if it may\n+               --  itself contain a troublesome component.\n+\n+               if Type_May_Have_Bit_Aligned_Components (Etype (E)) then\n                   return True;\n                end if;\n "}, {"sha": "30a3c71bd906e5b222e964668888f2692352f208", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 25, "deletions": 29, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba9fcae321660fdc760fd293d92970e52489706/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba9fcae321660fdc760fd293d92970e52489706/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=fba9fcae321660fdc760fd293d92970e52489706", "patch": "@@ -401,32 +401,27 @@ package Exp_Util is\n    --  case overflow.\n \n    function Component_May_Be_Bit_Aligned (Comp : Entity_Id) return Boolean;\n-   --  This function is in charge of detecting record components that may\n-   --  cause trouble in the back end if an attempt is made to assign the\n-   --  component. The back end can handle such assignments with no problem if\n-   --  the components involved are small (64-bits or less) records or scalar\n-   --  items (including bit-packed arrays represented with modular types) or\n-   --  are both aligned on a byte boundary (starting on a byte boundary, and\n-   --  occupying an integral number of bytes).\n+   --  This function is in charge of detecting record components that may cause\n+   --  trouble for the back end if an attempt is made to access the component\n+   --  as a whole. The back end can handle such accesses with no problem if the\n+   --  components involved are small (64 bits or less) records or scalar items\n+   --  (including bit-packed arrays represented with a modular type), or else\n+   --  if they are aligned on byte boundaries (i.e. starting on a byte boundary\n+   --  and occupying an integral number of bytes).\n    --\n    --  However, problems arise for records larger than 64 bits, or for arrays\n    --  (other than bit-packed arrays represented with a modular type) if the\n-   --  component starts on a non-byte boundary, or does not occupy an integral\n-   --  number of bytes (i.e. there are some bits possibly shared with fields\n-   --  at the start or beginning of the component). The back end cannot handle\n-   --  loading and storing such components in a single operation.\n+   --  component either does not start on a byte boundary or does not occupy an\n+   --  integral number of bytes (i.e. there are some bits possibly shared with\n+   --  other components at the start or the end of the component). The back end\n+   --  cannot handle loading from or storing to such components as a whole.\n    --\n-   --  This function is used to detect the troublesome situation. it is\n-   --  conservative in the sense that it produces True unless it knows for\n-   --  sure that the component is safe (as outlined in the first paragraph\n-   --  above). The code generation for record and array assignment checks for\n-   --  trouble using this function, and if so the assignment is generated\n+   --  This function is used to detect the troublesome situation. It is meant\n+   --  to be conservative in the sense that it produces True unless it knows\n+   --  for sure that the component is safe (as outlined in the first paragraph\n+   --  above). The processing for record and array assignment indirectly checks\n+   --  for trouble using this function and, if so, the assignment is expanded\n    --  component-wise, which the back end is required to handle correctly.\n-   --\n-   --  Note that in GNAT 3, the back end will reject such components anyway,\n-   --  so the hard work in checking for this case is wasted in GNAT 3, but\n-   --  it is harmless, so it is easier to do it in all cases, rather than\n-   --  conditionalize it in GNAT 5 or beyond.\n \n    function Containing_Package_With_Ext_Axioms\n      (E : Entity_Id) return Entity_Id;\n@@ -962,12 +957,12 @@ package Exp_Util is\n    --  returned only if the replacement is safe.\n \n    function Possible_Bit_Aligned_Component (N : Node_Id) return Boolean;\n-   --  This function is used during processing the assignment of a record or\n-   --  indexed component. The argument N is either the left hand or right hand\n-   --  side of an assignment, and this function determines if there is a record\n-   --  component reference where the record may be bit aligned in a manner that\n-   --  causes trouble for the back end (see Component_May_Be_Bit_Aligned for\n-   --  further details).\n+   --  This function is used during processing the assignment of a record or an\n+   --  array, or the construction of an aggregate. The argument N is either the\n+   --  left or the right hand side of an assignment and the function determines\n+   --  whether there is a record component reference where the component may be\n+   --  bit aligned in a manner that causes trouble for the back end (see also\n+   --  Component_May_Be_Bit_Aligned for further details).\n \n    function Power_Of_Two (N : Node_Id) return Nat;\n    --  Determines if N is a known at compile time value which  is of the form\n@@ -1170,8 +1165,9 @@ package Exp_Util is\n    function Type_May_Have_Bit_Aligned_Components\n      (Typ : Entity_Id) return Boolean;\n    --  Determines if Typ is a composite type that has within it (looking down\n-   --  recursively at any subcomponents), a record type which has component\n-   --  that may be bit aligned (see Possible_Bit_Aligned_Component). The result\n+   --  recursively at subcomponents) a record which contains a component that\n+   --  may be bit aligned in a manner that causes trouble for the back end\n+   --  (see also Component_May_Be_Bit_Aligned for further details). The result\n    --  is conservative, in that a result of False is decisive. A result of True\n    --  means that such a component may or may not be present.\n "}]}