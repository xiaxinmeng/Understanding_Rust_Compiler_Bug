{"sha": "a37a22da2d9304489f6e4b91d0a357c25e0a0a79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM3YTIyZGEyZDkzMDQ0ODlmNmU0YjkxZDBhMzU3YzI1ZTBhMGE3OQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2015-11-26T10:16:56Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2015-11-26T10:16:56Z"}, "message": "implement-c.texi (Integers Implementation): Make GCC's promises about signed left shift stronger and clarify the cases when...\n\n2015-11-26  Paolo Bonzini <bonzini@gnu.org>\n\n\t* doc/implement-c.texi (Integers Implementation): Make GCC's promises\n\tabout signed left shift stronger and clarify the cases when they're\n\tbroken.\n\nFrom-SVN: r230931", "tree": {"sha": "f08c5c4a84f39509e9a5612c1b230f50aa30910a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f08c5c4a84f39509e9a5612c1b230f50aa30910a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a37a22da2d9304489f6e4b91d0a357c25e0a0a79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a37a22da2d9304489f6e4b91d0a357c25e0a0a79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a37a22da2d9304489f6e4b91d0a357c25e0a0a79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a37a22da2d9304489f6e4b91d0a357c25e0a0a79/comments", "author": null, "committer": null, "parents": [{"sha": "b3877860a8dbefda221923faa57ba7f3c88ff4e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3877860a8dbefda221923faa57ba7f3c88ff4e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3877860a8dbefda221923faa57ba7f3c88ff4e9"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "3405b1d4538acee2ba94250afeb119ac33ee5ae9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37a22da2d9304489f6e4b91d0a357c25e0a0a79/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37a22da2d9304489f6e4b91d0a357c25e0a0a79/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a37a22da2d9304489f6e4b91d0a357c25e0a0a79", "patch": "@@ -1,3 +1,9 @@\n+2015-11-26  Paolo Bonzini <bonzini@gnu.org>\n+\n+\t* doc/implement-c.texi (Integers Implementation): Make GCC's promises\n+\tabout signed left shift stronger and clarify the cases when they're\n+\tbroken.\n+\n 2015-11-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n             Bernd Schmidt  <bschmidt@redhat.com>\n \n@@ -7682,6 +7688,9 @@\n \n \t* fold-const.c (fold_binary_loc) : Move (-A) * (-B) -> A * B\n \tto match.pd.\n+* doc/implement-c.texi (Integers Implementation): Make GCC's promises\n+about signed left shift stronger and clarify the cases when they're\n+broken.\n \tMove (a * (1 << b)) is (a << b) to match.pd.\n \tMove convert (C1/X)*C2 into (C1*C2)/X to match.pd.\n \tMove ~X & X, (X == 0) & X, and !X & X are zero to match.pd."}, {"sha": "7fa3fb4087f7f91a286561b91f155554b8e275c2", "filename": "gcc/doc/implement-c.texi", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37a22da2d9304489f6e4b91d0a357c25e0a0a79/gcc%2Fdoc%2Fimplement-c.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37a22da2d9304489f6e4b91d0a357c25e0a0a79/gcc%2Fdoc%2Fimplement-c.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fimplement-c.texi?ref=a37a22da2d9304489f6e4b91d0a357c25e0a0a79", "patch": "@@ -266,9 +266,11 @@ both the sign and value bits, where the sign bit is considered\n immediately above the highest-value value bit.  Signed @samp{>>} acts\n on negative numbers by sign extension.\n \n-GCC does not use the latitude given in C99 and C11 only to treat certain\n-aspects of signed @samp{<<} as undefined, but this is subject to\n-change.\n+As an extension to the C language, GCC does not use the latitude given in\n+C99 and C11 only to treat certain aspects of signed @samp{<<} as undefined.\n+However, @option{-fsanitize=shift} (and @option{-fsanitize=undefined}) will\n+diagnose such cases.  They are also diagnosed where constant\n+expressions are required.\n \n @item\n @cite{The sign of the remainder on integer division (C90 6.3.5).}"}]}