{"sha": "90708f87b8d13da61f7d5cba7c6597fee0025bb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA3MDhmODdiOGQxM2RhNjFmN2Q1Y2JhN2M2NTk3ZmVlMDAyNWJiMQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-26T00:16:39Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-26T00:16:39Z"}, "message": "Daily bump.", "tree": {"sha": "1eebefd0bbf7ccbb1dd6e633ba8ddf9a928abaec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1eebefd0bbf7ccbb1dd6e633ba8ddf9a928abaec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90708f87b8d13da61f7d5cba7c6597fee0025bb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90708f87b8d13da61f7d5cba7c6597fee0025bb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90708f87b8d13da61f7d5cba7c6597fee0025bb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90708f87b8d13da61f7d5cba7c6597fee0025bb1/comments", "author": null, "committer": null, "parents": [{"sha": "f9c80eb12c58126a94ad869380af5b88b752c06f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9c80eb12c58126a94ad869380af5b88b752c06f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9c80eb12c58126a94ad869380af5b88b752c06f"}], "stats": {"total": 358, "additions": 357, "deletions": 1}, "files": [{"sha": "aa38933be09546f32786678c831b13da15f5a466", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90708f87b8d13da61f7d5cba7c6597fee0025bb1/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90708f87b8d13da61f7d5cba7c6597fee0025bb1/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=90708f87b8d13da61f7d5cba7c6597fee0025bb1", "patch": "@@ -1,3 +1,7 @@\n+2021-06-25  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* MAINTAINERS: Add myself for write after approval and DCO\n+\n 2021-06-24  prathamesh.kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* .gitignore: Add entry for cscope.out."}, {"sha": "d58c03479f6c6207e3f223c07c8b49842ccc7004", "filename": "gcc/ChangeLog", "status": "modified", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90708f87b8d13da61f7d5cba7c6597fee0025bb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90708f87b8d13da61f7d5cba7c6597fee0025bb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90708f87b8d13da61f7d5cba7c6597fee0025bb1", "patch": "@@ -1,3 +1,131 @@\n+2021-06-25  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/101216\n+\t* calls.c (maybe_warn_rdwr_sizes): Use the no_warning constant.\n+\n+2021-06-25  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* config/h8300/h8300.c (select_cc_mode): Handle ASHIFTRT and LSHIFTRT.\n+\n+2021-06-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101202\n+\t* tree-vect-slp.c (vect_optimize_slp): Explicitely handle\n+\tfailed nodes.\n+\n+2021-06-25  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp-patterns.c (addsub_pattern::build): Copy\n+\tSTMT_VINFO_REDUC_DEF from the original representative.\n+\n+2021-06-25  Martin Sebor  <msebor@redhat.com>\n+\n+\t* builtins.c (warn_string_no_nul): Replace uses of TREE_NO_WARNING,\n+\tgimple_no_warning_p and gimple_set_no_warning with\n+\twarning_suppressed_p, and suppress_warning.\n+\t(c_strlen): Same.\n+\t(maybe_warn_for_bound): Same.\n+\t(warn_for_access): Same.\n+\t(check_access): Same.\n+\t(expand_builtin_strncmp): Same.\n+\t(fold_builtin_varargs): Same.\n+\t* calls.c (maybe_warn_nonstring_arg): Same.\n+\t(maybe_warn_rdwr_sizes): Same.\n+\t* cfgexpand.c (expand_call_stmt): Same.\n+\t* cgraphunit.c (check_global_declaration): Same.\n+\t* fold-const.c (fold_undefer_overflow_warnings): Same.\n+\t(fold_truth_not_expr): Same.\n+\t(fold_unary_loc): Same.\n+\t(fold_checksum_tree): Same.\n+\t* gimple-array-bounds.cc (array_bounds_checker::check_array_ref): Same.\n+\t(array_bounds_checker::check_mem_ref): Same.\n+\t(array_bounds_checker::check_addr_expr): Same.\n+\t(array_bounds_checker::check_array_bounds): Same.\n+\t* gimple-expr.c (copy_var_decl): Same.\n+\t* gimple-fold.c (gimple_fold_builtin_strcpy): Same.\n+\t(gimple_fold_builtin_strncat): Same.\n+\t(gimple_fold_builtin_stxcpy_chk): Same.\n+\t(gimple_fold_builtin_stpcpy): Same.\n+\t(gimple_fold_builtin_sprintf): Same.\n+\t(fold_stmt_1): Same.\n+\t* gimple-ssa-isolate-paths.c (diag_returned_locals): Same.\n+\t* gimple-ssa-nonnull-compare.c (do_warn_nonnull_compare): Same.\n+\t* gimple-ssa-sprintf.c (handle_printf_call): Same.\n+\t* gimple-ssa-store-merging.c (imm_store_chain_info::output_merged_store): Same.\n+\t* gimple-ssa-warn-restrict.c (maybe_diag_overlap): Same.\n+\t* gimple-ssa-warn-restrict.h: Adjust declarations.\n+\t(maybe_diag_access_bounds): Replace uses of TREE_NO_WARNING,\n+\tgimple_no_warning_p and gimple_set_no_warning with\n+\twarning_suppressed_p, and suppress_warning.\n+\t(check_call): Same.\n+\t(check_bounds_or_overlap): Same.\n+\t* gimple.c (gimple_build_call_from_tree): Same.\n+\t* gimplify.c (gimplify_return_expr): Same.\n+\t(gimplify_cond_expr): Same.\n+\t(gimplify_modify_expr_complex_part): Same.\n+\t(gimplify_modify_expr): Same.\n+\t(gimple_push_cleanup): Same.\n+\t(gimplify_expr): Same.\n+\t* omp-expand.c (expand_omp_for_generic): Same.\n+\t(expand_omp_taskloop_for_outer): Same.\n+\t* omp-low.c (lower_rec_input_clauses): Same.\n+\t(lower_lastprivate_clauses): Same.\n+\t(lower_send_clauses): Same.\n+\t(lower_omp_target): Same.\n+\t* tree-cfg.c (pass_warn_function_return::execute): Same.\n+\t* tree-complex.c (create_one_component_var): Same.\n+\t* tree-inline.c (remap_gimple_op_r): Same.\n+\t(copy_tree_body_r): Same.\n+\t(declare_return_variable): Same.\n+\t(expand_call_inline): Same.\n+\t* tree-nested.c (lookup_field_for_decl): Same.\n+\t* tree-sra.c (create_access_replacement): Same.\n+\t(generate_subtree_copies): Same.\n+\t* tree-ssa-ccp.c (pass_post_ipa_warn::execute): Same.\n+\t* tree-ssa-forwprop.c (combine_cond_expr_cond): Same.\n+\t* tree-ssa-loop-ch.c (ch_base::copy_headers): Same.\n+\t* tree-ssa-loop-im.c (execute_sm): Same.\n+\t* tree-ssa-phiopt.c (cond_store_replacement): Same.\n+\t* tree-ssa-strlen.c (maybe_warn_overflow): Same.\n+\t(handle_builtin_strcpy): Same.\n+\t(maybe_diag_stxncpy_trunc): Same.\n+\t(handle_builtin_stxncpy_strncat): Same.\n+\t(handle_builtin_strcat): Same.\n+\t* tree-ssa-uninit.c (get_no_uninit_warning): Same.\n+\t(set_no_uninit_warning): Same.\n+\t(uninit_undefined_value_p): Same.\n+\t(warn_uninit): Same.\n+\t(maybe_warn_operand): Same.\n+\t* tree-vrp.c (compare_values_warnv): Same.\n+\t* vr-values.c (vr_values::extract_range_for_var_from_comparison_expr): Same.\n+\t(test_for_singularity): Same.\n+\t* gimple.h (warning_suppressed_p): New function.\n+\t(suppress_warning): Same.\n+\t(copy_no_warning): Same.\n+\t(gimple_set_block): Call gimple_set_location.\n+\t(gimple_set_location): Call copy_warning.\n+\n+2021-06-25  Martin Sebor  <msebor@redhat.com>\n+\n+\t* tree.h (warning_suppressed_at, copy_warning,\n+\twarning_suppressed_p, suppress_warning): New functions.\n+\n+2021-06-25  Martin Sebor  <msebor@redhat.com>\n+\n+\t* Makefile.in (OBJS-libcommon): Add diagnostic-spec.o.\n+\t* gengtype.c (open_base_files): Add diagnostic-spec.h.\n+\t* diagnostic-spec.c: New file.\n+\t* diagnostic-spec.h: New file.\n+\t* tree.h (no_warning, all_warnings, suppress_warning_at): New\n+\tdeclarations.\n+\t* warning-control.cc: New file.\n+\n+2021-06-25  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/101185\n+\t* config/i386/i386.c (x86_order_regs_for_local_alloc):\n+\tRevert r12-1669.\n+\n 2021-06-24  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR tree-optimization/101189"}, {"sha": "ed547dc89b053139d8b3860b186b2ea353e7b285", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90708f87b8d13da61f7d5cba7c6597fee0025bb1/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90708f87b8d13da61f7d5cba7c6597fee0025bb1/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=90708f87b8d13da61f7d5cba7c6597fee0025bb1", "patch": "@@ -1 +1 @@\n-20210625\n+20210626"}, {"sha": "fe6a44c1bd96e52201d95b6a7ecc81342e3aadf1", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90708f87b8d13da61f7d5cba7c6597fee0025bb1/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90708f87b8d13da61f7d5cba7c6597fee0025bb1/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=90708f87b8d13da61f7d5cba7c6597fee0025bb1", "patch": "@@ -1,3 +1,16 @@\n+2021-06-25  Martin Sebor  <msebor@redhat.com>\n+\n+\t* c-common.c (c_wrap_maybe_const): Remove TREE_NO_WARNING.\n+\t(c_common_truthvalue_conversion): Replace direct uses of\n+\tTREE_NO_WARNING with warning_suppressed_p, suppress_warning, and\n+\tcopy_no_warning.\n+\t(check_function_arguments_recurse): Same.\n+\t* c-gimplify.c (c_gimplify_expr): Same.\n+\t* c-warn.c (overflow_warning): Same.\n+\t(warn_logical_operator): Same.\n+\t(warn_if_unused_value): Same.\n+\t(do_warn_unused_parameter): Same.\n+\n 2021-06-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-common.h (enum c_omp_region_type): Add C_ORT_TARGET and"}, {"sha": "ba53da8c371c8fce3dac0bd13f7071d87d8021f1", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90708f87b8d13da61f7d5cba7c6597fee0025bb1/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90708f87b8d13da61f7d5cba7c6597fee0025bb1/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=90708f87b8d13da61f7d5cba7c6597fee0025bb1", "patch": "@@ -1,3 +1,29 @@\n+2021-06-25  Martin Sebor  <msebor@redhat.com>\n+\n+\t* c-decl.c (pop_scope): Replace direct uses of TREE_NO_WARNING with\n+\twarning_suppressed_p, suppress_warning, and copy_no_warning.\n+\t(diagnose_mismatched_decls): Same.\n+\t(duplicate_decls): Same.\n+\t(grokdeclarator): Same.\n+\t(finish_function): Same.\n+\t(c_write_global_declarations_1): Same.\n+\t* c-fold.c (c_fully_fold_internal): Same.\n+\t* c-parser.c (c_parser_expr_no_commas): Same.\n+\t(c_parser_postfix_expression): Same.\n+\t* c-typeck.c (array_to_pointer_conversion): Same.\n+\t(function_to_pointer_conversion): Same.\n+\t(default_function_array_conversion): Same.\n+\t(convert_lvalue_to_rvalue): Same.\n+\t(default_conversion): Same.\n+\t(build_indirect_ref): Same.\n+\t(build_function_call_vec): Same.\n+\t(build_atomic_assign): Same.\n+\t(build_unary_op): Same.\n+\t(c_finish_return): Same.\n+\t(emit_side_effect_warnings): Same.\n+\t(c_finish_stmt_expr): Same.\n+\t(c_omp_clause_copy_ctor): Same.\n+\n 2021-06-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/101176"}, {"sha": "c53fb0c13b2919959230fbdda73cb6618a2a9ba2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90708f87b8d13da61f7d5cba7c6597fee0025bb1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90708f87b8d13da61f7d5cba7c6597fee0025bb1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=90708f87b8d13da61f7d5cba7c6597fee0025bb1", "patch": "@@ -1,3 +1,65 @@\n+2021-06-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/100752\n+\t* parser.c (cp_parser_declarator): Pass flags down to\n+\tcp_parser_declarator.  Also pass static_p/member_p.\n+\n+2021-06-25  Martin Sebor  <msebor@redhat.com>\n+\n+\t* call.c (build_over_call): Replace direct uses of TREE_NO_WARNING\n+\twith warning_suppressed_p, suppress_warning, and copy_no_warning, or\n+\tnothing if not necessary.\n+\t(set_up_extended_ref_temp): Same.\n+\t* class.c (layout_class_type): Same.\n+\t* constraint.cc (constraint_satisfaction_value): Same.\n+\t* coroutines.cc (finish_co_await_expr): Same.\n+\t(finish_co_yield_expr): Same.\n+\t(finish_co_return_stmt): Same.\n+\t(build_actor_fn): Same.\n+\t(coro_rewrite_function_body): Same.\n+\t(morph_fn_to_coro): Same.\n+\t* cp-gimplify.c (genericize_eh_spec_block): Same.\n+\t(gimplify_expr_stmt): Same.\n+\t(cp_genericize_r): Same.\n+\t(cp_fold): Same.\n+\t* cp-ubsan.c (cp_ubsan_instrument_vptr): Same.\n+\t* cvt.c (cp_fold_convert): Same.\n+\t(convert_to_void): Same.\n+\t* decl.c (wrapup_namespace_globals): Same.\n+\t(grokdeclarator): Same.\n+\t(finish_function): Same.\n+\t(require_deduced_type): Same.\n+\t* decl2.c (no_linkage_error): Same.\n+\t(c_parse_final_cleanups): Same.\n+\t* except.c (expand_end_catch_block): Same.\n+\t* init.c (build_new_1): Same.\n+\t(build_new): Same.\n+\t(build_vec_delete_1): Same.\n+\t(build_vec_init): Same.\n+\t(build_delete): Same.\n+\t* method.c (defaultable_fn_check): Same.\n+\t* parser.c (cp_parser_fold_expression): Same.\n+\t(cp_parser_primary_expression): Same.\n+\t* pt.c (push_tinst_level_loc): Same.\n+\t(tsubst_copy): Same.\n+\t(tsubst_omp_udr): Same.\n+\t(tsubst_copy_and_build): Same.\n+\t* rtti.c (build_if_nonnull): Same.\n+\t* semantics.c (maybe_convert_cond): Same.\n+\t(finish_return_stmt): Same.\n+\t(finish_parenthesized_expr): Same.\n+\t(cp_check_omp_declare_reduction): Same.\n+\t* tree.c (build_cplus_array_type): Same.\n+\t* typeck.c (build_ptrmemfunc_access_expr): Same.\n+\t(cp_build_indirect_ref_1): Same.\n+\t(cp_build_function_call_vec): Same.\n+\t(warn_for_null_address): Same.\n+\t(cp_build_binary_op): Same.\n+\t(unary_complex_lvalue): Same.\n+\t(cp_build_modify_expr): Same.\n+\t(build_x_modify_expr): Same.\n+\t(convert_for_assignment): Same.\n+\n 2021-06-24  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/98832"}, {"sha": "80322a44dded558aeea57d03791604577e8964f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90708f87b8d13da61f7d5cba7c6597fee0025bb1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90708f87b8d13da61f7d5cba7c6597fee0025bb1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=90708f87b8d13da61f7d5cba7c6597fee0025bb1", "patch": "@@ -1,3 +1,42 @@\n+2021-06-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/100752\n+\t* g++.dg/cpp0x/noexcept69.C: New test.\n+\t* g++.dg/parse/saved1.C: Adjust dg-error.\n+\t* g++.dg/template/crash50.C: Likewise.\n+\n+2021-06-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit.dg/test-vector-rvalues.cc (check_div): Add specialization\n+\tfor v4f, to avoid relying on exact floating-point equality.\n+\t* jit.dg/test-vector-types.cc (check_div): Likewise.\n+\n+2021-06-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit.dg/test-asm.c: Remove i?86-*-* from target specifier.\n+\t* jit.dg/test-asm.cc: Likewise.\n+\n+2021-06-25  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/101216\n+\t* gcc.dg/Wnonnull-7.c: New test.\n+\n+2021-06-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101202\n+\t* gcc.dg/torture/pr101202.c: New testcase.\n+\n+2021-06-25  Xi Ruoyao  <xry111@mengyan1223.wang>\n+\n+\t* g++.dg/no-stack-protector-attr-3.C (dg-final): Adjust for MIPS.\n+\n+2021-06-25  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/101185\n+\t* gcc.target/i386/bitwise_mask_op-3.c: Add xfail to\n+\ttemporarily avoid regression, eventually xfail should be\n+\tremoved.\n+\n 2021-06-24  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gcc.dg/tree-ssa/evrp30.c: New."}, {"sha": "c0f2a5fc9a7d2e0f130f1a1773a7429c9617e97b", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90708f87b8d13da61f7d5cba7c6597fee0025bb1/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90708f87b8d13da61f7d5cba7c6597fee0025bb1/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=90708f87b8d13da61f7d5cba7c6597fee0025bb1", "patch": "@@ -1,3 +1,9 @@\n+2021-06-25  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR testsuite/101114\n+\t* testsuite/libgomp.c-c++-common/struct-elem-5.c:\n+\tAdd \"target offload_device_nonshared_as\" condition for enabling test.\n+\n 2021-06-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/libgomp.c-c++-common/target-in-reduction-1.c: New test."}, {"sha": "162d707415e7d10666fc8471d7ce4f09d127ef47", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90708f87b8d13da61f7d5cba7c6597fee0025bb1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90708f87b8d13da61f7d5cba7c6597fee0025bb1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=90708f87b8d13da61f7d5cba7c6597fee0025bb1", "patch": "@@ -1,3 +1,74 @@\n+2021-06-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ostream.tcc (basic_ostream::write): Call sputn\n+\tdirectly instead of using _M_write. Do setstate(__err) all\n+\toutside the try-catch block.\n+\t* include/std/ostream (basic_ostream::_M_write): Declare\n+\tprivate. Use __ostream_insert. Do not define for the versioned\n+\tnamespace.\n+\n+2021-06-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/intro.xml: Document LWG 581 change.\n+\t* doc/html/manual/bugs.html: Regenerate.\n+\t* include/bits/basic_ios.tcc: Whitespace.\n+\t* include/bits/ostream.tcc (basic_ostream::flush()): Construct\n+\tsentry.\n+\t* testsuite/27_io/basic_ostream/flush/char/2.cc: Check\n+\tadditional cases.\n+\t* testsuite/27_io/basic_ostream/flush/char/exceptions_badbit_throw.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_ostream/flush/wchar_t/2.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/flush/wchar_t/exceptions_badbit_throw.cc:\n+\tLikewise.\n+\n+2021-06-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ostream.tcc (sentry): Only set failbit if badbit\n+\tis set, not if eofbit is set.\n+\t(tellp, seekp, seekp): Create sentry object. Do not set badbit\n+\ton exceptions.\n+\t* testsuite/27_io/basic_ostream/seekp/char/exceptions_badbit_throw.cc:\n+\tAdjust expected behaviour.\n+\t* testsuite/27_io/basic_ostream/seekp/wchar_t/exceptions_badbit_throw.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_ostream/tellp/char/exceptions_badbit_throw.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_ostream/tellp/wchar_t/exceptions_badbit_throw.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_ostream/seekp/char/n3168.cc: New test.\n+\t* testsuite/27_io/basic_ostream/seekp/wchar_t/n3168.cc: New test.\n+\t* testsuite/27_io/basic_ostream/tellp/char/n3168.cc: New test.\n+\t* testsuite/27_io/basic_ostream/tellp/wchar_t/n3168.cc: New test.\n+\n+2021-06-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/syncstream (basic_syncbuf::swap()): Remove\n+\tnoexcept, as per LWG 3498.\n+\n+2021-06-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97088\n+\t* testsuite/17_intro/names.cc: Undef more names for newlib and\n+\talso for arm-none-linux-gnueabi.\n+\t* testsuite/experimental/names.cc: Disable PCH.\n+\n+2021-06-25  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* include/experimental/bits/simd.h (__bit_cast): Implement via\n+\t__builtin_bit_cast #if available.\n+\t(__proposed::simd_bit_cast): Add overloads for simd and\n+\tsimd_mask, which use __builtin_bit_cast (or __bit_cast #if not\n+\tavailable), which return an object of the requested type with\n+\tthe same bits as the argument.\n+\t* include/experimental/bits/simd_math.h: Use simd_bit_cast\n+\tinstead of __bit_cast to allow casts to fixed_size_simd.\n+\t(copysign): Remove branch that was only required if __bit_cast\n+\tcannot be constexpr.\n+\t* testsuite/experimental/simd/tests/bits/test_values.h: Switch\n+\tfrom __bit_cast to __proposed::simd_bit_cast since the former\n+\twill not cast fixed_size objects anymore.\n+\n 2021-06-24  Matthias Kretz  <m.kretz@gsi.de>\n \n \t* include/experimental/bits/simd_math.h"}, {"sha": "cf8827626e0483528e21dbef628dbb96a2ed08a2", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90708f87b8d13da61f7d5cba7c6597fee0025bb1/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90708f87b8d13da61f7d5cba7c6597fee0025bb1/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=90708f87b8d13da61f7d5cba7c6597fee0025bb1", "patch": "@@ -1,3 +1,10 @@\n+2021-06-25  Richard Biener  <rguenther@suse.de>\n+\n+\t* lto-plugin.c (ltrans_objects): New global.\n+\t(all_symbols_read_handler): If -ltrans-objects was specified,\n+\tadd the output files from the specified file directly.\n+\t(process_option): Handle -ltrans-objects.\n+\n 2021-05-10  Martin Liska  <mliska@suse.cz>\n \n \t* lto-plugin.c (LTO_SEGMENT_NAME): Remove."}]}