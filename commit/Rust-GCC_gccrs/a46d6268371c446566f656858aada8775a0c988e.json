{"sha": "a46d6268371c446566f656858aada8775a0c988e", "node_id": "C_kwDOANBUbNoAKGE0NmQ2MjY4MzcxYzQ0NjU2NmY2NTY4NThhYWRhODc3NWEwYzk4OGU", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-05-13T18:00:34Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-05-13T18:00:34Z"}, "message": "OpenMP/Fortran: Use firstprivat not alloc for ptr attach for arrays\n\nFor a non-descriptor array,  map(A(n:m)) was mapped as\n  map(tofrom:A[n-1] [len: ...]) map(alloc:A [pointer assign, bias: ...])\nwith this patch, it is changed to\n  map(tofrom:A[n-1] [len: ...]) map(firstprivate:A [pointer assign, bias: ...])\n\nThe latter avoids an alloc - and also avoids the race condition with\nnowait in the enclosed testcase. (Note: predantically, the testcase is\ninvalid since OpenMP 5.1, violating the map clause restriction at [354:10-13].\n\ngcc/fortran/ChangeLog:\n\n\t* trans-openmp.cc (gfc_trans_omp_clauses): When mapping nondescriptor\n\tarray sections, use GOMP_MAP_FIRSTPRIVATE_POINTER instead of\n\tGOMP_MAP_POINTER for the pointer attachment.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.fortran/target-nowait-array-section.f90: New test.", "tree": {"sha": "d8a936caa2c14b43489d72edb77c5be0e1981c8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8a936caa2c14b43489d72edb77c5be0e1981c8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a46d6268371c446566f656858aada8775a0c988e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46d6268371c446566f656858aada8775a0c988e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a46d6268371c446566f656858aada8775a0c988e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46d6268371c446566f656858aada8775a0c988e/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc25483c055d62f94f8c289f80843dda3c4a6ff4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc25483c055d62f94f8c289f80843dda3c4a6ff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc25483c055d62f94f8c289f80843dda3c4a6ff4"}], "stats": {"total": 68, "additions": 65, "deletions": 3}, "files": [{"sha": "eb5870c3bc518bd3af99c43163549fa603351eeb", "filename": "gcc/fortran/trans-openmp.cc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46d6268371c446566f656858aada8775a0c988e/gcc%2Ffortran%2Ftrans-openmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46d6268371c446566f656858aada8775a0c988e/gcc%2Ffortran%2Ftrans-openmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.cc?ref=a46d6268371c446566f656858aada8775a0c988e", "patch": "@@ -3312,9 +3312,15 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t  /* An array element or array section which is not part of a\n \t\t     derived type, etc.  */\n \t\t  bool element = n->expr->ref->u.ar.type == AR_ELEMENT;\n-\t\t  gfc_trans_omp_array_section (block, n, decl, element,\n-\t\t\t\t\t       GOMP_MAP_POINTER, node, node2,\n-\t\t\t\t\t       node3, node4);\n+\t\t  tree type = TREE_TYPE (decl);\n+\t\t  gomp_map_kind k = GOMP_MAP_POINTER;\n+\t\t  if (!openacc\n+\t\t      && !GFC_DESCRIPTOR_TYPE_P (type)\n+\t\t      && !(POINTER_TYPE_P (type)\n+\t\t\t   && GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (type))))\n+\t\t    k = GOMP_MAP_FIRSTPRIVATE_POINTER;\n+\t\t  gfc_trans_omp_array_section (block, n, decl, element, k,\n+\t\t\t\t\t       node, node2, node3, node4);\n \t\t}\n \t      else if (n->expr\n \t\t       && n->expr->expr_type == EXPR_VARIABLE"}, {"sha": "7560cff746ba5e2ad6a91f73ebfe6a3897c74742", "filename": "libgomp/testsuite/libgomp.fortran/target-nowait-array-section.f90", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46d6268371c446566f656858aada8775a0c988e/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-nowait-array-section.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46d6268371c446566f656858aada8775a0c988e/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-nowait-array-section.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-nowait-array-section.f90?ref=a46d6268371c446566f656858aada8775a0c988e", "patch": "@@ -0,0 +1,56 @@\n+! Runs the the target region asynchrolously and checks for it\n+!\n+! Note that  map(alloc: work(:, i)) + nowait  should be save\n+! given that a nondescriptor array is used. However, it still\n+! violates a map clause restriction, added in OpenMP 5.1 [354:10-13].\n+\n+PROGRAM test_target_teams_distribute_nowait\n+  USE ISO_Fortran_env, only: INT64\n+  implicit none\n+    INTEGER, parameter :: N = 1024, N_TASKS = 16\n+    INTEGER :: i, j, k, my_ticket\n+    INTEGER :: order(n_tasks)\n+    INTEGER(INT64) :: work(n, n_tasks)\n+    INTEGER :: ticket\n+    logical :: async\n+\n+    ticket = 0\n+\n+    !$omp target enter data map(to: ticket, order)\n+\n+    !$omp parallel do num_threads(n_tasks)\n+    DO i = 1, n_tasks\n+       !$omp target map(alloc: work(:, i), ticket) private(my_ticket) nowait\n+       !!$omp target teams distribute map(alloc: work(:, i), ticket) private(my_ticket) nowait\n+       DO j = 1, n\n+          ! Waste cyles\n+!          work(j, i) = 0\n+!          DO k = 1, n*(n_tasks - i)\n+!             work(j, i) = work(j, i) + i*j*k\n+!          END DO\n+          my_ticket = 0\n+          !$omp atomic capture\n+          ticket = ticket + 1\n+          my_ticket = ticket\n+          !$omp end atomic\n+          !$omp atomic write\n+          order(i) = my_ticket\n+       END DO\n+       !$omp end target !teams distribute\n+    END DO\n+    !$omp end parallel do\n+\n+    !$omp target exit data map(from:ticket, order)\n+\n+    IF (ticket .ne. n_tasks*n) stop 1\n+    if (maxval(order) /= n_tasks*n) stop 2\n+    ! order(i) == n*i if synchronous and between n and n*n_tasks if run concurrently\n+    do i = 1, n_tasks\n+      if (order(i) < n .or. order(i) > n*n_tasks) stop 3\n+    end do\n+    async = .false.\n+    do i = 1, n_tasks\n+      if (order(i) /= n*i) async = .true.\n+    end do\n+    if (.not. async) stop 4 ! Did not run asynchronously\n+end"}]}