{"sha": "b9c6b842a913ca6b98f12c8291a40a6cc90b41bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjljNmI4NDJhOTEzY2E2Yjk4ZjEyYzgyOTFhNDBhNmNjOTBiNDFiYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-07-12T21:10:09Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-07-12T21:10:09Z"}, "message": "re PR c++/36628 ([c++0x] incorrect decltype() handling of conditional operator)\n\n\tPR c++/36628\n\t* tree.c (rvalue): Use lvalue_or_rvalue_with_address_p.\n\nFrom-SVN: r149536", "tree": {"sha": "a751c0382b5f576ef6622bc469bde0488d9cccf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a751c0382b5f576ef6622bc469bde0488d9cccf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9c6b842a913ca6b98f12c8291a40a6cc90b41bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9c6b842a913ca6b98f12c8291a40a6cc90b41bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9c6b842a913ca6b98f12c8291a40a6cc90b41bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9c6b842a913ca6b98f12c8291a40a6cc90b41bc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7ca6f6d65a12c6c4a0ba9a2348367a4147abdf2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ca6f6d65a12c6c4a0ba9a2348367a4147abdf2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ca6f6d65a12c6c4a0ba9a2348367a4147abdf2b"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "9c4cd015178e0dd6132acc645f9535e41524c897", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9c6b842a913ca6b98f12c8291a40a6cc90b41bc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9c6b842a913ca6b98f12c8291a40a6cc90b41bc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b9c6b842a913ca6b98f12c8291a40a6cc90b41bc", "patch": "@@ -1,5 +1,8 @@\n 2009-07-12  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/36628\n+\t* tree.c (rvalue): Use lvalue_or_rvalue_with_address_p.\n+\n \tPR c++/37206\n \t* cp-tree.h (enum cp_lvalue_kind_flags): Add clk_rvalueref.\n \t* tree.c (lvalue_p_1): Return it.  Remove"}, {"sha": "a003b44e9de4e74ca3f32822d8180defa78b063a", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9c6b842a913ca6b98f12c8291a40a6cc90b41bc/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9c6b842a913ca6b98f12c8291a40a6cc90b41bc/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=b9c6b842a913ca6b98f12c8291a40a6cc90b41bc", "patch": "@@ -532,7 +532,9 @@ rvalue (tree expr)\n   if (!CLASS_TYPE_P (type) && cp_type_quals (type))\n     type = TYPE_MAIN_VARIANT (type);\n \n-  if (!processing_template_decl && real_lvalue_p (expr))\n+  /* We need to do this for rvalue refs as well to get the right answer\n+     from decltype; see c++/36628.  */\n+  if (!processing_template_decl && lvalue_or_rvalue_with_address_p (expr))\n     expr = build1 (NON_LVALUE_EXPR, type, expr);\n   else if (type != TREE_TYPE (expr))\n     expr = build_nop (type, expr);"}, {"sha": "cb82940f6e7e5d55f0e55b1c310b5e3f760c2ddb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9c6b842a913ca6b98f12c8291a40a6cc90b41bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9c6b842a913ca6b98f12c8291a40a6cc90b41bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b9c6b842a913ca6b98f12c8291a40a6cc90b41bc", "patch": "@@ -1,5 +1,8 @@\n 2009-07-12  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/36628\n+\t* g++.dg/cpp0x/decltype17.C: New.\n+\n \tPR c++/37206\n \t* g++.dg/cpp0x/rv10.C: New.\n "}, {"sha": "3c98105fced1445585804c5c44a6dc1200a8b304", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype17.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9c6b842a913ca6b98f12c8291a40a6cc90b41bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9c6b842a913ca6b98f12c8291a40a6cc90b41bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype17.C?ref=b9c6b842a913ca6b98f12c8291a40a6cc90b41bc", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/36628\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do run }\n+\n+#include <typeinfo>\n+#include <string.h>\n+\n+int  rvalue();\n+int& lvalueref();\n+int&& rvalueref();\n+\n+decltype(true ? rvalue() : rvalue()) f()\n+{}\n+\n+decltype(true ? lvalueref() : lvalueref()) g()\n+{}\n+\n+decltype(true ? rvalueref() : rvalueref()) h()\n+{}\n+\n+int main()\n+{\n+  if (strcmp (typeid(f).name(), \"FivE\") != 0)\n+    return 1;\n+  if (strcmp (typeid(g).name(), \"FRivE\") != 0)\n+    return 2;\n+  if (strcmp (typeid(h).name(), \"FivE\") != 0)\n+    return 3;\n+}"}]}