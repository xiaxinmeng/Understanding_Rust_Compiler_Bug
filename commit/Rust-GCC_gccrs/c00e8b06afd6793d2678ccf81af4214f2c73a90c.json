{"sha": "c00e8b06afd6793d2678ccf81af4214f2c73a90c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAwZThiMDZhZmQ2NzkzZDI2NzhjY2Y4MWFmNDIxNGYyYzczYTkwYw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-11-26T19:05:49Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-11-26T19:05:49Z"}, "message": "c-common.c (conversion_warning): Use get_unwidened instead of get_narrower.\n\n2007-11-26  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\t\n\t* c-common.c (conversion_warning): Use get_unwidened instead of\n\tget_narrower.\n\nFrom-SVN: r130447", "tree": {"sha": "e35d8ec6c9fac2c7d233c8d59b9f841c47c427ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e35d8ec6c9fac2c7d233c8d59b9f841c47c427ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c00e8b06afd6793d2678ccf81af4214f2c73a90c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c00e8b06afd6793d2678ccf81af4214f2c73a90c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c00e8b06afd6793d2678ccf81af4214f2c73a90c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c00e8b06afd6793d2678ccf81af4214f2c73a90c/comments", "author": null, "committer": null, "parents": [{"sha": "b4b560332c6978dde1aafaff5cbca1a4347cd718", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4b560332c6978dde1aafaff5cbca1a4347cd718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4b560332c6978dde1aafaff5cbca1a4347cd718"}], "stats": {"total": 39, "additions": 11, "deletions": 28}, "files": [{"sha": "627b8324eec1c24f5adb94a0b7965992da2de938", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00e8b06afd6793d2678ccf81af4214f2c73a90c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00e8b06afd6793d2678ccf81af4214f2c73a90c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c00e8b06afd6793d2678ccf81af4214f2c73a90c", "patch": "@@ -1,3 +1,8 @@\n+2007-11-26  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\t\n+\t* c-common.c (conversion_warning): Use get_unwidened instead of\n+\tget_narrower.\n+\t\n 2007-11-26  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c/23722"}, {"sha": "36afd6b4e8b2894325f8eed4585859a7864c4e0e", "filename": "gcc/c-common.c", "status": "modified", "additions": 6, "deletions": 28, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00e8b06afd6793d2678ccf81af4214f2c73a90c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00e8b06afd6793d2678ccf81af4214f2c73a90c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c00e8b06afd6793d2678ccf81af4214f2c73a90c", "patch": "@@ -1281,12 +1281,7 @@ conversion_warning (tree type, tree expr)\n                && TREE_CODE (type) == INTEGER_TYPE)\n         {\n \t  /* Don't warn about unsigned char y = 0xff, x = (int) y;  */\n-\t  int uns;\n-\t  tree orig_expr = expr;\n-\t  expr = get_narrower (expr, &uns);\n-\n-\t  if (expr == orig_expr)\n-\t    uns = TYPE_UNSIGNED (TREE_TYPE (expr));\n+\t  expr = get_unwidened (expr, 0);\n \n           /* Warn for integer types converted to smaller integer types.  */\n           if (formal_prec < TYPE_PRECISION (TREE_TYPE (expr))) \n@@ -1295,31 +1290,14 @@ conversion_warning (tree type, tree expr)\n \t  /* When they are the same width but different signedness,\n \t     then the value may change.  */\n \t  else if ((formal_prec == TYPE_PRECISION (TREE_TYPE (expr))\n-\t\t    && uns != TYPE_UNSIGNED (type))\n+\t\t    && TYPE_UNSIGNED (TREE_TYPE (expr)) != TYPE_UNSIGNED (type))\n \t\t   /* Even when converted to a bigger type, if the type is\n \t\t      unsigned but expr is signed, then negative values\n \t\t      will be changed.  */\n-\t\t   || (TYPE_UNSIGNED (type) && !uns))\n-\t    {\n-\t      if (uns != TYPE_UNSIGNED (TREE_TYPE (expr)))\n-\t\t{\n-\t\t  /* For signed char s1, s2 = (int) (unsigned char) s1;\n-\t\t     get_narrower returns s1, but uns = 1.  Find the\n-\t\t     narrowest type with uns == TYPE_UNSIGNED (type).  */\n-\t\t  tree unsexpr = orig_expr;\n-\n-\t\t  while (TREE_CODE (unsexpr) == NOP_EXPR\n-\t\t\t && unsexpr != expr\n-\t\t\t && TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (unsexpr,\n-\t\t\t\t\t\t\t\t    0)))\n-\t\t\t    == uns)\n-\t\t    unsexpr = TREE_OPERAND (unsexpr, 0);\n-\t\t  expr = unsexpr;\n-\t\t}\n-\t      warning (OPT_Wsign_conversion,\n-\t\t       \"conversion to %qT from %qT may change the sign of the result\",\n-\t\t       type, TREE_TYPE (expr));\n-\t    }\n+\t\t   || (TYPE_UNSIGNED (type) && !TYPE_UNSIGNED (TREE_TYPE (expr))))\n+\t    warning (OPT_Wsign_conversion,\n+\t\t     \"conversion to %qT from %qT may change the sign of the result\",\n+\t\t     type, TREE_TYPE (expr));\n         }\n \n       /* Warn for integer types converted to real types if and only if"}]}