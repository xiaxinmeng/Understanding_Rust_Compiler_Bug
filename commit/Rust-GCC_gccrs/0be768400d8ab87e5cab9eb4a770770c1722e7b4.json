{"sha": "0be768400d8ab87e5cab9eb4a770770c1722e7b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJlNzY4NDAwZDhhYjg3ZTVjYWI5ZWI0YTc3MDc3MGMxNzIyZTdiNA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-11-25T05:13:41Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-11-25T05:13:41Z"}, "message": "rs6000.c (rs6000_sr_alias_set): Delete.\n\n        * config/rs6000/rs6000.c (rs6000_sr_alias_set): Delete.\n        (rs6000_override_options): Remove initialization of\n        rs6000_sr_alias_set.\n        (rs6000_emit_eh_reg_restore): Use gen_frame_mem.\n        (rs6000_emit_stack_tie): Same.\n        (emit_frame_save): Same.\n        (gen_frame_mem_offset): Same.\n        (rs6000_emit_prologue): Same.\n        (rs6000_emit_epilogue): Same.\n\nFrom-SVN: r107489", "tree": {"sha": "f2ad9ee7a066fa968cb76a46cb1a22e24ca6ec3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2ad9ee7a066fa968cb76a46cb1a22e24ca6ec3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0be768400d8ab87e5cab9eb4a770770c1722e7b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0be768400d8ab87e5cab9eb4a770770c1722e7b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0be768400d8ab87e5cab9eb4a770770c1722e7b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0be768400d8ab87e5cab9eb4a770770c1722e7b4/comments", "author": null, "committer": null, "parents": [{"sha": "7934558dd1bb546c99903507337c94ba37dc68f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7934558dd1bb546c99903507337c94ba37dc68f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7934558dd1bb546c99903507337c94ba37dc68f3"}], "stats": {"total": 130, "additions": 49, "deletions": 81}, "files": [{"sha": "6b19608c8ffd4a6b99fd0a1fccae284aac1f1fab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be768400d8ab87e5cab9eb4a770770c1722e7b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be768400d8ab87e5cab9eb4a770770c1722e7b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0be768400d8ab87e5cab9eb4a770770c1722e7b4", "patch": "@@ -1,3 +1,15 @@\n+2005-11-25  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.c (rs6000_sr_alias_set): Delete.\n+\t(rs6000_override_options): Remove initialization of\n+\trs6000_sr_alias_set.\n+\t(rs6000_emit_eh_reg_restore): Use gen_frame_mem.\n+\t(rs6000_emit_stack_tie): Same.\n+\t(emit_frame_save): Same.\n+\t(gen_frame_mem_offset): Same.\n+\t(rs6000_emit_prologue): Same.\n+\t(rs6000_emit_epilogue): Same.\n+\n 2005-11-25  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR middle-end/24989"}, {"sha": "d8d00a5b0371bfa11e01b4c580bd97ef8032fedb", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 37, "deletions": 81, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be768400d8ab87e5cab9eb4a770770c1722e7b4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be768400d8ab87e5cab9eb4a770770c1722e7b4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0be768400d8ab87e5cab9eb4a770770c1722e7b4", "patch": "@@ -234,9 +234,6 @@ static enum {\n int toc_initialized;\n char toc_label_name[10];\n \n-/* Alias set for saves and restores from the rs6000 stack.  */\n-static GTY(()) int rs6000_sr_alias_set;\n-\n /* Control alignment for fields within structures.  */\n /* String from -malign-XXXXX.  */\n int rs6000_alignment_flags;\n@@ -1406,9 +1403,6 @@ rs6000_override_options (const char *default_cpu)\n       && (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN))\n     REAL_MODE_FORMAT (TFmode) = &ibm_extended_format;\n \n-  /* Allocate an alias set for register saves & restores from stack.  */\n-  rs6000_sr_alias_set = new_alias_set ();\n-\n   if (TARGET_TOC)\n     ASM_GENERATE_INTERNAL_LABEL (toc_label_name, \"LCTOC\", 1);\n \n@@ -13443,19 +13437,15 @@ rs6000_emit_eh_reg_restore (rtx source, rtx scratch)\n \t  || current_function_calls_alloca\n \t  || info->total_size > 32767)\n \t{\n-\t  tmp = gen_rtx_MEM (Pmode, frame_rtx);\n-\t  MEM_NOTRAP_P (tmp) = 1;\n-\t  set_mem_alias_set (tmp, rs6000_sr_alias_set);\n+\t  tmp = gen_frame_mem (Pmode, frame_rtx);\n \t  emit_move_insn (operands[1], tmp);\n \t  frame_rtx = operands[1];\n \t}\n       else if (info->push_p)\n \tsp_offset = info->total_size;\n \n       tmp = plus_constant (frame_rtx, info->lr_save_offset + sp_offset);\n-      tmp = gen_rtx_MEM (Pmode, tmp);\n-      MEM_NOTRAP_P (tmp) = 1;\n-      set_mem_alias_set (tmp, rs6000_sr_alias_set);\n+      tmp = gen_frame_mem (Pmode, tmp);\n       emit_move_insn (tmp, operands[0]);\n     }\n   else\n@@ -13550,15 +13540,15 @@ rs6000_aix_emit_builtin_unwind_init (void)\n   emit_label (no_toc_save_needed);\n }\n \f\n-/* This ties together stack memory (MEM with an alias set of\n-   rs6000_sr_alias_set) and the change to the stack pointer.  */\n+/* This ties together stack memory (MEM with an alias set of frame_alias_set)\n+   and the change to the stack pointer.  */\n \n static void\n rs6000_emit_stack_tie (void)\n {\n-  rtx mem = gen_rtx_MEM (BLKmode, gen_rtx_REG (Pmode, STACK_POINTER_REGNUM));\n+  rtx mem = gen_frame_mem (BLKmode,\n+\t\t\t   gen_rtx_REG (Pmode, STACK_POINTER_REGNUM));\n \n-  set_mem_alias_set (mem, rs6000_sr_alias_set);\n   emit_insn (gen_stack_tie (mem));\n }\n \n@@ -13898,8 +13888,7 @@ emit_frame_save (rtx frame_reg, rtx frame_ptr, enum machine_mode mode,\n \n   reg = gen_rtx_REG (mode, regno);\n   addr = gen_rtx_PLUS (Pmode, frame_reg, offset_rtx);\n-  mem = gen_rtx_MEM (mode, addr);\n-  set_mem_alias_set (mem, rs6000_sr_alias_set);\n+  mem = gen_frame_mem (mode, addr);\n \n   insn = emit_move_insn (mem, reg);\n \n@@ -13925,7 +13914,7 @@ gen_frame_mem_offset (enum machine_mode mode, rtx reg, int offset)\n   else\n     offset_rtx = int_rtx;\n \n-  return gen_rtx_MEM (mode, gen_rtx_PLUS (Pmode, reg, offset_rtx));\n+  return gen_frame_mem (mode, gen_rtx_PLUS (Pmode, reg, offset_rtx));\n }\n \n /* Look for user-defined global regs.  We should not save and restore these,\n@@ -14068,8 +14057,7 @@ rs6000_emit_prologue (void)\n \t  rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t\t   GEN_INT (info->fp_save_offset\n \t\t\t\t\t    + sp_offset + 8 * i));\n-\t  rtx mem = gen_rtx_MEM (DFmode, addr);\n-\t  set_mem_alias_set (mem, rs6000_sr_alias_set);\n+\t  rtx mem = gen_frame_mem (DFmode, addr);\n \n \t  RTVEC_ELT (p, j++) = gen_rtx_SET (VOIDmode, mem, reg);\n \t}\n@@ -14079,8 +14067,7 @@ rs6000_emit_prologue (void)\n \t  rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t\t   GEN_INT (info->altivec_save_offset\n \t\t\t\t\t    + sp_offset + 16 * i));\n-\t  rtx mem = gen_rtx_MEM (V4SImode, addr);\n-\t  set_mem_alias_set (mem, rs6000_sr_alias_set);\n+\t  rtx mem = gen_frame_mem (V4SImode, addr);\n \n \t  RTVEC_ELT (p, j++) = gen_rtx_SET (VOIDmode, mem, reg);\n \t}\n@@ -14090,8 +14077,7 @@ rs6000_emit_prologue (void)\n \t  rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t\t   GEN_INT (info->gp_save_offset\n \t\t\t\t\t    + sp_offset + reg_size * i));\n-\t  rtx mem = gen_rtx_MEM (reg_mode, addr);\n-\t  set_mem_alias_set (mem, rs6000_sr_alias_set);\n+\t  rtx mem = gen_frame_mem (reg_mode, addr);\n \n \t  RTVEC_ELT (p, j++) = gen_rtx_SET (VOIDmode, mem, reg);\n \t}\n@@ -14102,8 +14088,7 @@ rs6000_emit_prologue (void)\n \trtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t\t GEN_INT (info->cr_save_offset\n \t\t\t\t\t  + sp_offset));\n-\trtx mem = gen_rtx_MEM (reg_mode, addr);\n-\tset_mem_alias_set (mem, rs6000_sr_alias_set);\n+\trtx mem = gen_frame_mem (reg_mode, addr);\n \n \tRTVEC_ELT (p, j++) = gen_rtx_SET (VOIDmode, mem, reg);\n       }\n@@ -14154,10 +14139,8 @@ rs6000_emit_prologue (void)\n \t    emit_move_insn (areg, GEN_INT (offset));\n \n \t    /* AltiVec addressing mode is [reg+reg].  */\n-\t    mem = gen_rtx_MEM (V4SImode,\n-\t\t\t       gen_rtx_PLUS (Pmode, frame_reg_rtx, areg));\n-\n-\t    set_mem_alias_set (mem, rs6000_sr_alias_set);\n+\t    mem = gen_frame_mem (V4SImode,\n+\t\t\t\t gen_rtx_PLUS (Pmode, frame_reg_rtx, areg));\n \n \t    insn = emit_move_insn (mem, savereg);\n \n@@ -14193,10 +14176,9 @@ rs6000_emit_prologue (void)\n \t{\n           /* Save VRSAVE.  */\n           offset = info->vrsave_save_offset + sp_offset;\n-          mem\n-\t    = gen_rtx_MEM (SImode,\n-\t\t           gen_rtx_PLUS (Pmode, frame_reg_rtx, GEN_INT (offset)));\n-          set_mem_alias_set (mem, rs6000_sr_alias_set);\n+          mem = gen_frame_mem (SImode,\n+\t\t\t       gen_rtx_PLUS (Pmode, frame_reg_rtx,\n+\t\t\t\t\t     GEN_INT (offset)));\n           insn = emit_move_insn (mem, reg);\n \t}\n \n@@ -14272,8 +14254,7 @@ rs6000_emit_prologue (void)\n \t  addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t       GEN_INT (info->fp_save_offset\n \t\t\t\t\t+ sp_offset + 8*i));\n-\t  mem = gen_rtx_MEM (DFmode, addr);\n-\t  set_mem_alias_set (mem, rs6000_sr_alias_set);\n+\t  mem = gen_frame_mem (DFmode, addr);\n \n \t  RTVEC_ELT (p, i + 2) = gen_rtx_SET (VOIDmode, mem, reg);\n \t}\n@@ -14297,8 +14278,7 @@ rs6000_emit_prologue (void)\n \t\t\t       GEN_INT (info->gp_save_offset\n \t\t\t\t\t+ sp_offset\n \t\t\t\t\t+ reg_size * i));\n-\t  mem = gen_rtx_MEM (reg_mode, addr);\n-\t  set_mem_alias_set (mem, rs6000_sr_alias_set);\n+\t  mem = gen_frame_mem (reg_mode, addr);\n \n \t  RTVEC_ELT (p, i) = gen_rtx_SET (VOIDmode, mem, reg);\n \t}\n@@ -14336,8 +14316,7 @@ rs6000_emit_prologue (void)\n \t\t  b = GEN_INT (offset);\n \n \t\taddr = gen_rtx_PLUS (Pmode, frame_reg_rtx, b);\n-\t\tmem = gen_rtx_MEM (V2SImode, addr);\n-\t\tset_mem_alias_set (mem, rs6000_sr_alias_set);\n+\t\tmem = gen_frame_mem (V2SImode, addr);\n \t\tinsn = emit_move_insn (mem, reg);\n \n \t\tif (GET_CODE (b) == CONST_INT)\n@@ -14353,8 +14332,7 @@ rs6000_emit_prologue (void)\n \t\t\t\t     GEN_INT (info->gp_save_offset\n \t\t\t\t\t      + sp_offset\n \t\t\t\t\t      + reg_size * i));\n-\t\tmem = gen_rtx_MEM (reg_mode, addr);\n-\t\tset_mem_alias_set (mem, rs6000_sr_alias_set);\n+\t\tmem = gen_frame_mem (reg_mode, addr);\n \n \t\tinsn = emit_move_insn (mem, reg);\n \t\trs6000_frame_related (insn, frame_ptr_rtx, info->total_size,\n@@ -14377,8 +14355,7 @@ rs6000_emit_prologue (void)\n \t  reg = gen_rtx_REG (reg_mode, 2);\n \t  addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t       GEN_INT (sp_offset + 5 * reg_size));\n-\t  mem = gen_rtx_MEM (reg_mode, addr);\n-\t  set_mem_alias_set (mem, rs6000_sr_alias_set);\n+\t  mem = gen_frame_mem (reg_mode, addr);\n \n \t  insn = emit_move_insn (mem, reg);\n \t  rs6000_frame_related (insn, frame_ptr_rtx, info->total_size,\n@@ -14406,7 +14383,7 @@ rs6000_emit_prologue (void)\n \t\t\t       GEN_INT (info->lr_save_offset + sp_offset));\n       rtx reg = gen_rtx_REG (Pmode, 0);\n       rtx mem = gen_rtx_MEM (Pmode, addr);\n-      /* This should not be of rs6000_sr_alias_set, because of\n+      /* This should not be of frame_alias_set, because of\n \t __builtin_return_address.  */\n \n       insn = emit_move_insn (mem, reg);\n@@ -14419,12 +14396,10 @@ rs6000_emit_prologue (void)\n     {\n       rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t       GEN_INT (info->cr_save_offset + sp_offset));\n-      rtx mem = gen_rtx_MEM (SImode, addr);\n+      rtx mem = gen_frame_mem (SImode, addr);\n       /* See the large comment above about why CR2_REGNO is used.  */\n       rtx magic_eh_cr_reg = gen_rtx_REG (SImode, CR2_REGNO);\n \n-      set_mem_alias_set (mem, rs6000_sr_alias_set);\n-\n       /* If r12 was used to hold the original sp, copy cr into r0 now\n \t that it's free.  */\n       if (REGNO (frame_reg_rtx) == 12)\n@@ -14667,8 +14642,7 @@ rs6000_emit_epilogue (int sibcall)\n \trtx reg = gen_rtx_REG (reg_mode, CR2_REGNO);\n \trtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t\t GEN_INT (info->cr_save_offset));\n-\trtx mem = gen_rtx_MEM (reg_mode, addr);\n-\tset_mem_alias_set (mem, rs6000_sr_alias_set);\n+\trtx mem = gen_frame_mem (reg_mode, addr);\n \n \tRTVEC_ELT (p, j++) = gen_rtx_SET (VOIDmode, reg, mem);\n       }\n@@ -14679,8 +14653,7 @@ rs6000_emit_epilogue (int sibcall)\n \t  rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t\t   GEN_INT (info->gp_save_offset\n \t\t\t\t\t    + reg_size * i));\n-\t  rtx mem = gen_rtx_MEM (reg_mode, addr);\n-\t  set_mem_alias_set (mem, rs6000_sr_alias_set);\n+\t  rtx mem = gen_frame_mem (reg_mode, addr);\n \n \t  RTVEC_ELT (p, j++) = gen_rtx_SET (VOIDmode, reg, mem);\n \t}\n@@ -14690,8 +14663,7 @@ rs6000_emit_epilogue (int sibcall)\n \t  rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t\t   GEN_INT (info->altivec_save_offset\n \t\t\t\t\t    + 16 * i));\n-\t  rtx mem = gen_rtx_MEM (V4SImode, addr);\n-\t  set_mem_alias_set (mem, rs6000_sr_alias_set);\n+\t  rtx mem = gen_frame_mem (V4SImode, addr);\n \n \t  RTVEC_ELT (p, j++) = gen_rtx_SET (VOIDmode, reg, mem);\n \t}\n@@ -14701,8 +14673,7 @@ rs6000_emit_epilogue (int sibcall)\n \t  rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t\t   GEN_INT (info->fp_save_offset\n \t\t\t\t\t    + 8 * i));\n-\t  rtx mem = gen_rtx_MEM (DFmode, addr);\n-\t  set_mem_alias_set (mem, rs6000_sr_alias_set);\n+\t  rtx mem = gen_frame_mem (DFmode, addr);\n \n \t  RTVEC_ELT (p, j++) = gen_rtx_SET (VOIDmode, reg, mem);\n \t}\n@@ -14768,8 +14739,7 @@ rs6000_emit_epilogue (int sibcall)\n \n \t    /* AltiVec addressing mode is [reg+reg].  */\n \t    addr = gen_rtx_PLUS (Pmode, frame_reg_rtx, areg);\n-\t    mem = gen_rtx_MEM (V4SImode, addr);\n-\t    set_mem_alias_set (mem, rs6000_sr_alias_set);\n+\t    mem = gen_frame_mem (V4SImode, addr);\n \n \t    emit_move_insn (gen_rtx_REG (V4SImode, i), mem);\n \t  }\n@@ -14783,8 +14753,7 @@ rs6000_emit_epilogue (int sibcall)\n \n       addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t   GEN_INT (info->vrsave_save_offset + sp_offset));\n-      mem = gen_rtx_MEM (SImode, addr);\n-      set_mem_alias_set (mem, rs6000_sr_alias_set);\n+      mem = gen_frame_mem (SImode, addr);\n       reg = gen_rtx_REG (SImode, 12);\n       emit_move_insn (reg, mem);\n \n@@ -14797,8 +14766,6 @@ rs6000_emit_epilogue (int sibcall)\n       rtx mem = gen_frame_mem_offset (Pmode, frame_reg_rtx,\n \t\t\t\t      info->lr_save_offset + sp_offset);\n \n-      set_mem_alias_set (mem, rs6000_sr_alias_set);\n-\n       emit_move_insn (gen_rtx_REG (Pmode, 0), mem);\n     }\n \n@@ -14807,9 +14774,7 @@ rs6000_emit_epilogue (int sibcall)\n     {\n       rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t       GEN_INT (info->cr_save_offset + sp_offset));\n-      rtx mem = gen_rtx_MEM (SImode, addr);\n-\n-      set_mem_alias_set (mem, rs6000_sr_alias_set);\n+      rtx mem = gen_frame_mem (SImode, addr);\n \n       emit_move_insn (gen_rtx_REG (SImode, 12), mem);\n     }\n@@ -14828,9 +14793,7 @@ rs6000_emit_epilogue (int sibcall)\n \t{\n \t  rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t\t   GEN_INT (sp_offset + 5 * reg_size));\n-\t  rtx mem = gen_rtx_MEM (reg_mode, addr);\n-\n-\t  set_mem_alias_set (mem, rs6000_sr_alias_set);\n+\t  rtx mem = gen_frame_mem (reg_mode, addr);\n \n \t  emit_move_insn (gen_rtx_REG (reg_mode, 2), mem);\n \t}\n@@ -14846,7 +14809,6 @@ rs6000_emit_epilogue (int sibcall)\n \t  mem = gen_frame_mem_offset (reg_mode, frame_reg_rtx,\n \t\t\t\t      info->ehrd_offset + sp_offset\n \t\t\t\t      + reg_size * (int) i);\n-\t  set_mem_alias_set (mem, rs6000_sr_alias_set);\n \n \t  emit_move_insn (gen_rtx_REG (reg_mode, regno), mem);\n \t}\n@@ -14864,9 +14826,7 @@ rs6000_emit_epilogue (int sibcall)\n \t\t\t\t   GEN_INT (info->gp_save_offset\n \t\t\t\t\t    + sp_offset\n \t\t\t\t\t    + reg_size * i));\n-\t  rtx mem = gen_rtx_MEM (reg_mode, addr);\n-\n-\t  set_mem_alias_set (mem, rs6000_sr_alias_set);\n+\t  rtx mem = gen_frame_mem (reg_mode, addr);\n \n \t  RTVEC_ELT (p, i) =\n \t    gen_rtx_SET (VOIDmode,\n@@ -14889,7 +14849,7 @@ rs6000_emit_epilogue (int sibcall)\n \t\t\t\t   GEN_INT (info->gp_save_offset\n \t\t\t\t\t    + sp_offset\n \t\t\t\t\t    + reg_size * i));\n-\t  rtx mem = gen_rtx_MEM (reg_mode, addr);\n+\t  rtx mem = gen_frame_mem (reg_mode, addr);\n \n \t  /* Restore 64-bit quantities for SPE.  */\n \t  if (TARGET_SPE_ABI && info->spe_64bit_regs_used != 0)\n@@ -14906,11 +14866,9 @@ rs6000_emit_epilogue (int sibcall)\n \t\tb = GEN_INT (offset);\n \n \t      addr = gen_rtx_PLUS (Pmode, frame_reg_rtx, b);\n-\t      mem = gen_rtx_MEM (V2SImode, addr);\n+\t      mem = gen_frame_mem (V2SImode, addr);\n \t    }\n \n-\t  set_mem_alias_set (mem, rs6000_sr_alias_set);\n-\n \t  emit_move_insn (gen_rtx_REG (reg_mode,\n \t\t\t\t       info->first_gp_reg_save + i), mem);\n \t}\n@@ -14926,8 +14884,7 @@ rs6000_emit_epilogue (int sibcall)\n \t\t\t       GEN_INT (info->fp_save_offset\n \t\t\t\t\t+ sp_offset\n \t\t\t\t\t+ 8 * i));\n-\t  mem = gen_rtx_MEM (DFmode, addr);\n-\t  set_mem_alias_set (mem, rs6000_sr_alias_set);\n+\t  mem = gen_frame_mem (DFmode, addr);\n \n \t  emit_move_insn (gen_rtx_REG (DFmode,\n \t\t\t\t       info->first_fp_reg_save + i),\n@@ -15047,8 +15004,7 @@ rs6000_emit_epilogue (int sibcall)\n \t      rtx addr, mem;\n \t      addr = gen_rtx_PLUS (Pmode, sp_reg_rtx,\n \t\t\t\t   GEN_INT (info->fp_save_offset + 8*i));\n-\t      mem = gen_rtx_MEM (DFmode, addr);\n-\t      set_mem_alias_set (mem, rs6000_sr_alias_set);\n+\t      mem = gen_frame_mem (DFmode, addr);\n \n \t      RTVEC_ELT (p, i+3) =\n \t\tgen_rtx_SET (VOIDmode,"}]}