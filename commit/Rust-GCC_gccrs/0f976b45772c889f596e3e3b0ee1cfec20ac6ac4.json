{"sha": "0f976b45772c889f596e3e3b0ee1cfec20ac6ac4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY5NzZiNDU3NzJjODg5ZjU5NmUzZTNiMGVlMWNmZWMyMGFjNmFjNA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@stanford.edu", "date": "2001-04-25T00:58:04Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-04-25T00:58:04Z"}, "message": "Makefile.in (LIB2FUNCS): Remove _varargs and __dummy.\n\n\t* Makefile.in (LIB2FUNCS): Remove _varargs and __dummy.\n\t* libgcc-std.ver: Remove __builtin_saveregs, __dummy, and __empty.\n\t* libgcc2.c: Remove __dummy and __builtin_saveregs.\n\t* libgcc2.h: Don't prototype __builtin_saveregs or __dummy.\n\t* config/i860/varargs.asm: New file - preserve i860 __builtin_saveregs\n\tfor future reference.\n\nFrom-SVN: r41529", "tree": {"sha": "5eb54027ae34e9fb45a2802e3735657f09b0d385", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5eb54027ae34e9fb45a2802e3735657f09b0d385"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f976b45772c889f596e3e3b0ee1cfec20ac6ac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f976b45772c889f596e3e3b0ee1cfec20ac6ac4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f976b45772c889f596e3e3b0ee1cfec20ac6ac4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f976b45772c889f596e3e3b0ee1cfec20ac6ac4/comments", "author": null, "committer": null, "parents": [{"sha": "47c84870c65386096ccbc8b2aa5abc0ed3bd7d75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c84870c65386096ccbc8b2aa5abc0ed3bd7d75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47c84870c65386096ccbc8b2aa5abc0ed3bd7d75"}], "stats": {"total": 445, "additions": 211, "deletions": 234}, "files": [{"sha": "5d310632b7a36a21f208c2f88dff76d1a5315955", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f976b45772c889f596e3e3b0ee1cfec20ac6ac4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f976b45772c889f596e3e3b0ee1cfec20ac6ac4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f976b45772c889f596e3e3b0ee1cfec20ac6ac4", "patch": "@@ -1,3 +1,12 @@\n+2001-04-24  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* Makefile.in (LIB2FUNCS): Remove _varargs and __dummy.\n+\t* libgcc-std.ver: Remove __builtin_saveregs, __dummy, and __empty.\n+\t* libgcc2.c: Remove __dummy and __builtin_saveregs.\n+\t* libgcc2.h: Don't prototype __builtin_saveregs or __dummy.\n+\t* config/i860/varargs.asm: New file - preserve i860 __builtin_saveregs\n+\tfor future reference.\n+\n 2001-04-24  Jason Merrill  <jason_merrill@redhat.com>\n \n \t* except.c (reachable_handlers): Step out one level from a RESX."}, {"sha": "948a52217e95f6ae5a39ad8a0e468065ad61a2de", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f976b45772c889f596e3e3b0ee1cfec20ac6ac4/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f976b45772c889f596e3e3b0ee1cfec20ac6ac4/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=0f976b45772c889f596e3e3b0ee1cfec20ac6ac4", "patch": "@@ -797,7 +797,7 @@ LIB2FUNCS = _muldi3 _divdi3 _moddi3 _udivdi3 _umoddi3 _negdi2 \\\n     _fixunsdfsi _fixunssfsi _fixunsdfdi _fixdfdi _fixunssfdi _fixsfdi \\\n     _fixxfdi _fixunsxfdi _floatdixf _fixunsxfsi \\\n     _fixtfdi _fixunstfdi _floatditf \\\n-    __gcc_bcmp _varargs __dummy _eprintf \\\n+    __gcc_bcmp _eprintf \\\n     _bb _clear_cache _trampoline __main _exit \\\n     _absvsi2 _absvdi2 _addvsi3 _addvdi3 _subvsi3 _subvdi3 \\\n     _mulvsi3 _mulvdi3 _negvsi2 _negvdi2 \\"}, {"sha": "8f870063c4164574ef2981c51c16412330b391e4", "filename": "gcc/config/i860/varargs.asm", "status": "added", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f976b45772c889f596e3e3b0ee1cfec20ac6ac4/gcc%2Fconfig%2Fi860%2Fvarargs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f976b45772c889f596e3e3b0ee1cfec20ac6ac4/gcc%2Fconfig%2Fi860%2Fvarargs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fvarargs.asm?ref=0f976b45772c889f596e3e3b0ee1cfec20ac6ac4", "patch": "@@ -0,0 +1,201 @@\n+/* Special varargs support for i860.\n+   Copyright (C) 2001  Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#if defined(__svr4__) || defined(__alliant__)\n+\t.text\n+\t.align\t4\n+\n+/* The Alliant needs the added underscore.  */\n+\t.globl\t__builtin_saveregs\n+__builtin_saveregs:\n+\t.globl\t___builtin_saveregs\n+___builtin_saveregs:\n+\n+\tandnot\t0x0f,%sp,%sp\t/* round down to 16-byte boundary */\n+\tadds\t-96,%sp,%sp  /* allocate stack space for reg save\n+\t\t\t   area and also for a new va_list\n+\t\t\t   structure */\n+\t/* Save all argument registers in the arg reg save area.  The\n+\t   arg reg save area must have the following layout (according\n+\t   to the svr4 ABI):\n+\n+\tstruct {\n+\t  union  {\n+\t    float freg[8];\n+\t    double dreg[4];\n+\t  } float_regs;\n+\t  long\tireg[12];\n+\t};\n+\t*/\n+\n+\tfst.q\t%f8,  0(%sp) /* save floating regs (f8-f15)  */\n+\tfst.q\t%f12,16(%sp) \n+\n+\tst.l\t%r16,32(%sp) /* save integer regs (r16-r27) */\n+\tst.l\t%r17,36(%sp) \n+\tst.l\t%r18,40(%sp)\n+\tst.l\t%r19,44(%sp)\n+\tst.l\t%r20,48(%sp)\n+\tst.l\t%r21,52(%sp)\n+\tst.l\t%r22,56(%sp)\n+\tst.l\t%r23,60(%sp)\n+\tst.l\t%r24,64(%sp)\n+\tst.l\t%r25,68(%sp)\n+\tst.l\t%r26,72(%sp)\n+\tst.l\t%r27,76(%sp)\n+\n+\tadds\t80,%sp,%r16  /* compute the address of the new\n+\t\t\t   va_list structure.  Put in into\n+\t\t\t   r16 so that it will be returned\n+\t\t\t   to the caller.  */\n+\n+\t/* Initialize all fields of the new va_list structure.  This\n+\t   structure looks like:\n+\n+\ttypedef struct {\n+\t    unsigned long\tireg_used;\n+\t    unsigned long\tfreg_used;\n+\t    long\t*reg_base;\n+\t    long\t*mem_ptr;\n+\t} va_list;\n+\t*/\n+\n+\tst.l\t%r0, 0(%r16) /* nfixed */\n+\tst.l\t%r0, 4(%r16) /* nfloating */\n+\tst.l    %sp, 8(%r16) /* __va_ctl points to __va_struct.  */\n+\tbri\t%r1\t/* delayed return */\n+\tst.l\t%r28,12(%r16) /* pointer to overflow args */\n+\n+#else /* not __svr4__ */\n+#if defined(__PARAGON__)\n+\t/*\n+\t *\twe'll use SVR4-ish varargs but need SVR3.2 assembler syntax,\n+\t *\tand we stand a better chance of hooking into libraries\n+\t *\tcompiled by PGI.  [andyp@ssd.intel.com]\n+\t */\n+\t.text\n+\t.align\t4\n+\t.globl\t__builtin_saveregs\n+__builtin_saveregs:\n+\t.globl\t___builtin_saveregs\n+___builtin_saveregs:\n+\n+\tandnot\t0x0f,sp,sp\t/* round down to 16-byte boundary */\n+\tadds\t-96,sp,sp\t/* allocate stack space for reg save\n+\t\t\t   area and also for a new va_list\n+\t\t\t   structure */\n+\t/* Save all argument registers in the arg reg save area.  The\n+\t   arg reg save area must have the following layout (according\n+\t   to the svr4 ABI):\n+\n+\tstruct {\n+\t  union  {\n+\t    float freg[8];\n+\t    double dreg[4];\n+\t  } float_regs;\n+\t  long\tireg[12];\n+\t};\n+\t*/\n+\n+\tfst.q\tf8,  0(sp)\n+\tfst.q\tf12,16(sp) \n+\tst.l\tr16,32(sp)\n+\tst.l\tr17,36(sp) \n+\tst.l\tr18,40(sp)\n+\tst.l\tr19,44(sp)\n+\tst.l\tr20,48(sp)\n+\tst.l\tr21,52(sp)\n+\tst.l\tr22,56(sp)\n+\tst.l\tr23,60(sp)\n+\tst.l\tr24,64(sp)\n+\tst.l\tr25,68(sp)\n+\tst.l\tr26,72(sp)\n+\tst.l\tr27,76(sp)\n+\n+\tadds\t80,sp,r16  /* compute the address of the new\n+\t\t\t   va_list structure.  Put in into\n+\t\t\t   r16 so that it will be returned\n+\t\t\t   to the caller.  */\n+\n+\t/* Initialize all fields of the new va_list structure.  This\n+\t   structure looks like:\n+\n+\ttypedef struct {\n+\t    unsigned long\tireg_used;\n+\t    unsigned long\tfreg_used;\n+\t    long\t*reg_base;\n+\t    long\t*mem_ptr;\n+\t} va_list;\n+\t*/\n+\n+\tst.l\tr0, 0(r16) /* nfixed */\n+\tst.l\tr0, 4(r16) /* nfloating */\n+\tst.l    sp, 8(r16) /* __va_ctl points to __va_struct.  */\n+\tbri\tr1\t/* delayed return */\n+\tst.l\tr28,12(r16) /* pointer to overflow args */\n+#else /* not __PARAGON__ */\n+\t.text\n+\t.align\t4\n+\n+\t.globl\t___builtin_saveregs\n+___builtin_saveregs:\n+\tmov\tsp,r30\n+\tandnot\t0x0f,sp,sp\n+\tadds\t-96,sp,sp  /* allocate sufficient space on the stack */\n+\n+/* Fill in the __va_struct.  */\n+\tst.l\tr16, 0(sp) /* save integer regs (r16-r27) */\n+\tst.l\tr17, 4(sp) /* int\tfixed[12] */\n+\tst.l\tr18, 8(sp)\n+\tst.l\tr19,12(sp)\n+\tst.l\tr20,16(sp)\n+\tst.l\tr21,20(sp)\n+\tst.l\tr22,24(sp)\n+\tst.l\tr23,28(sp)\n+\tst.l\tr24,32(sp)\n+\tst.l\tr25,36(sp)\n+\tst.l\tr26,40(sp)\n+\tst.l\tr27,44(sp)\n+\n+\tfst.q\tf8, 48(sp) /* save floating regs (f8-f15) */\n+\tfst.q\tf12,64(sp) /* int floating[8] */\n+\n+/* Fill in the __va_ctl.  */\n+\tst.l    sp, 80(sp) /* __va_ctl points to __va_struct.  */\n+\tst.l\tr28,84(sp) /* pointer to more args */\n+\tst.l\tr0, 88(sp) /* nfixed */\n+\tst.l\tr0, 92(sp) /* nfloating */\n+\n+\tadds\t80,sp,r16  /* return address of the __va_ctl.  */\n+\tbri\tr1\n+\tmov\tr30,sp\n+\t\t/* recover stack and pass address to start \n+\t\t   of data.  */\n+#endif /* not __PARAGON__ */\n+#endif /* not __svr4__ */"}, {"sha": "3344a19d4dc885e5863fb44ff486a5ff752c0c93", "filename": "gcc/libgcc-std.ver", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f976b45772c889f596e3e3b0ee1cfec20ac6ac4/gcc%2Flibgcc-std.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f976b45772c889f596e3e3b0ee1cfec20ac6ac4/gcc%2Flibgcc-std.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc-std.ver?ref=0f976b45772c889f596e3e3b0ee1cfec20ac6ac4", "patch": "@@ -106,10 +106,7 @@ GCC_3.0 {\n   __bb_trace_ret\n \n   # ??? Symbols that perhaps unused should be nuked.\n-  __builtin_saveregs\n   __clear_cache\n-  __dummy\n-  __empty\n   __eprintf\n   __gcc_bcmp\n "}, {"sha": "1d772ee7737b7f7c8ba0623c62e8b7bc8c09d99d", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 0, "deletions": 228, "changes": 228, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f976b45772c889f596e3e3b0ee1cfec20ac6ac4/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f976b45772c889f596e3e3b0ee1cfec20ac6ac4/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=0f976b45772c889f596e3e3b0ee1cfec20ac6ac4", "patch": "@@ -1237,234 +1237,6 @@ __gcc_bcmp (const unsigned char *s1, const unsigned char *s2, size_t size)\n   return 0;\n }\n \n-#endif\n-\f\f\n-#ifdef L__dummy\n-void\n-__dummy (void) {}\n-#endif\n-\n-#ifdef L_varargs\n-#ifdef __i860__\n-#if defined(__svr4__) || defined(__alliant__)\n-\tasm (\"\t.text\");\n-\tasm (\"\t.align\t4\");\n-\n-/* The Alliant needs the added underscore.  */\n-\tasm (\".globl\t__builtin_saveregs\");\n-asm (\"__builtin_saveregs:\");\n-\tasm (\".globl\t___builtin_saveregs\");\n-asm (\"___builtin_saveregs:\");\n-\n-        asm (\"\tandnot\t0x0f,%sp,%sp\");\t/* round down to 16-byte boundary */\n-\tasm (\"\tadds\t-96,%sp,%sp\");  /* allocate stack space for reg save\n-\t\t\t\t\t   area and also for a new va_list\n-\t\t\t\t\t   structure */\n-\t/* Save all argument registers in the arg reg save area.  The\n-\t   arg reg save area must have the following layout (according\n-\t   to the svr4 ABI):\n-\n-\t\tstruct {\n-\t\t  union  {\n-\t\t    float freg[8];\n-\t\t    double dreg[4];\n-\t\t  } float_regs;\n-\t\t  long\tireg[12];\n-\t\t};\n-\t*/\n-\n-\tasm (\"\tfst.q\t%f8,  0(%sp)\"); /* save floating regs (f8-f15)  */\n-\tasm (\"\tfst.q\t%f12,16(%sp)\"); \n-\n-\tasm (\"\tst.l\t%r16,32(%sp)\"); /* save integer regs (r16-r27) */\n-\tasm (\"\tst.l\t%r17,36(%sp)\"); \n-\tasm (\"\tst.l\t%r18,40(%sp)\");\n-\tasm (\"\tst.l\t%r19,44(%sp)\");\n-\tasm (\"\tst.l\t%r20,48(%sp)\");\n-\tasm (\"\tst.l\t%r21,52(%sp)\");\n-\tasm (\"\tst.l\t%r22,56(%sp)\");\n-\tasm (\"\tst.l\t%r23,60(%sp)\");\n-\tasm (\"\tst.l\t%r24,64(%sp)\");\n-\tasm (\"\tst.l\t%r25,68(%sp)\");\n-\tasm (\"\tst.l\t%r26,72(%sp)\");\n-\tasm (\"\tst.l\t%r27,76(%sp)\");\n-\n-\tasm (\"\tadds\t80,%sp,%r16\");  /* compute the address of the new\n-\t\t\t\t\t   va_list structure.  Put in into\n-\t\t\t\t\t   r16 so that it will be returned\n-\t\t\t\t\t   to the caller.  */\n-\n-\t/* Initialize all fields of the new va_list structure.  This\n-\t   structure looks like:\n-\n-\t\ttypedef struct {\n-\t\t    unsigned long\tireg_used;\n-\t\t    unsigned long\tfreg_used;\n-\t\t    long\t\t*reg_base;\n-\t\t    long\t\t*mem_ptr;\n-\t\t} va_list;\n-\t*/\n-\n-\tasm (\"\tst.l\t%r0, 0(%r16)\"); /* nfixed */\n-\tasm (\"\tst.l\t%r0, 4(%r16)\"); /* nfloating */\n-\tasm (\"  st.l    %sp, 8(%r16)\"); /* __va_ctl points to __va_struct.  */\n-\tasm (\"\tbri\t%r1\");\t\t/* delayed return */\n-\tasm (\"\tst.l\t%r28,12(%r16)\"); /* pointer to overflow args */\n-\n-#else /* not __svr4__ */\n-#if defined(__PARAGON__)\n-\t/*\n-\t *\twe'll use SVR4-ish varargs but need SVR3.2 assembler syntax,\n-\t *\tand we stand a better chance of hooking into libraries\n-\t *\tcompiled by PGI.  [andyp@ssd.intel.com]\n-\t */\n-\tasm (\"\t.text\");\n-\tasm (\"\t.align\t4\");\n-\tasm (\".globl\t__builtin_saveregs\");\n-asm (\"__builtin_saveregs:\");\n-\tasm (\".globl\t___builtin_saveregs\");\n-asm (\"___builtin_saveregs:\");\n-\n-        asm (\"\tandnot\t0x0f,sp,sp\");\t/* round down to 16-byte boundary */\n-\tasm (\"\tadds\t-96,sp,sp\");\t/* allocate stack space for reg save\n-\t\t\t\t\t   area and also for a new va_list\n-\t\t\t\t\t   structure */\n-\t/* Save all argument registers in the arg reg save area.  The\n-\t   arg reg save area must have the following layout (according\n-\t   to the svr4 ABI):\n-\n-\t\tstruct {\n-\t\t  union  {\n-\t\t    float freg[8];\n-\t\t    double dreg[4];\n-\t\t  } float_regs;\n-\t\t  long\tireg[12];\n-\t\t};\n-\t*/\n-\n-\tasm (\"\tfst.q\tf8,  0(sp)\");\n-\tasm (\"\tfst.q\tf12,16(sp)\"); \n-\tasm (\"\tst.l\tr16,32(sp)\");\n-\tasm (\"\tst.l\tr17,36(sp)\"); \n-\tasm (\"\tst.l\tr18,40(sp)\");\n-\tasm (\"\tst.l\tr19,44(sp)\");\n-\tasm (\"\tst.l\tr20,48(sp)\");\n-\tasm (\"\tst.l\tr21,52(sp)\");\n-\tasm (\"\tst.l\tr22,56(sp)\");\n-\tasm (\"\tst.l\tr23,60(sp)\");\n-\tasm (\"\tst.l\tr24,64(sp)\");\n-\tasm (\"\tst.l\tr25,68(sp)\");\n-\tasm (\"\tst.l\tr26,72(sp)\");\n-\tasm (\"\tst.l\tr27,76(sp)\");\n-\n-\tasm (\"\tadds\t80,sp,r16\");  /* compute the address of the new\n-\t\t\t\t\t   va_list structure.  Put in into\n-\t\t\t\t\t   r16 so that it will be returned\n-\t\t\t\t\t   to the caller.  */\n-\n-\t/* Initialize all fields of the new va_list structure.  This\n-\t   structure looks like:\n-\n-\t\ttypedef struct {\n-\t\t    unsigned long\tireg_used;\n-\t\t    unsigned long\tfreg_used;\n-\t\t    long\t\t*reg_base;\n-\t\t    long\t\t*mem_ptr;\n-\t\t} va_list;\n-\t*/\n-\n-\tasm (\"\tst.l\tr0, 0(r16)\"); /* nfixed */\n-\tasm (\"\tst.l\tr0, 4(r16)\"); /* nfloating */\n-\tasm (\"  st.l    sp, 8(r16)\"); /* __va_ctl points to __va_struct.  */\n-\tasm (\"\tbri\tr1\");\t\t/* delayed return */\n-\tasm (\"\t st.l\tr28,12(r16)\"); /* pointer to overflow args */\n-#else /* not __PARAGON__ */\n-\tasm (\"\t.text\");\n-\tasm (\"\t.align\t4\");\n-\n-\tasm (\".globl\t___builtin_saveregs\");\n-\tasm (\"___builtin_saveregs:\");\n-\tasm (\"\tmov\tsp,r30\");\n-\tasm (\"\tandnot\t0x0f,sp,sp\");\n-\tasm (\"\tadds\t-96,sp,sp\");  /* allocate sufficient space on the stack */\n-\n-/* Fill in the __va_struct.  */\n-\tasm (\"\tst.l\tr16, 0(sp)\"); /* save integer regs (r16-r27) */\n-\tasm (\"\tst.l\tr17, 4(sp)\"); /* int\tfixed[12] */\n-\tasm (\"\tst.l\tr18, 8(sp)\");\n-\tasm (\"\tst.l\tr19,12(sp)\");\n-\tasm (\"\tst.l\tr20,16(sp)\");\n-\tasm (\"\tst.l\tr21,20(sp)\");\n-\tasm (\"\tst.l\tr22,24(sp)\");\n-\tasm (\"\tst.l\tr23,28(sp)\");\n-\tasm (\"\tst.l\tr24,32(sp)\");\n-\tasm (\"\tst.l\tr25,36(sp)\");\n-\tasm (\"\tst.l\tr26,40(sp)\");\n-\tasm (\"\tst.l\tr27,44(sp)\");\n-\n-\tasm (\"\tfst.q\tf8, 48(sp)\"); /* save floating regs (f8-f15) */\n-\tasm (\"\tfst.q\tf12,64(sp)\"); /* int floating[8] */\n-\n-/* Fill in the __va_ctl.  */\n-\tasm (\"  st.l    sp, 80(sp)\"); /* __va_ctl points to __va_struct.  */\n-\tasm (\"\tst.l\tr28,84(sp)\"); /* pointer to more args */\n-\tasm (\"\tst.l\tr0, 88(sp)\"); /* nfixed */\n-\tasm (\"\tst.l\tr0, 92(sp)\"); /* nfloating */\n-\n-\tasm (\"\tadds\t80,sp,r16\");  /* return address of the __va_ctl.  */\n-\tasm (\"\tbri\tr1\");\n-\tasm (\"\tmov\tr30,sp\");\n-\t\t\t\t/* recover stack and pass address to start \n-\t\t\t\t   of data.  */\n-#endif /* not __PARAGON__ */\n-#endif /* not __svr4__ */\n-#else /* not __i860__ */\n-#ifdef __sparc__\n-\tasm (\".global __builtin_saveregs\");\n-\tasm (\"__builtin_saveregs:\");\n-\tasm (\".global ___builtin_saveregs\");\n-\tasm (\"___builtin_saveregs:\");\n-#ifdef NEED_PROC_COMMAND\n-\tasm (\".proc 020\");\n-#endif\n-\tasm (\"st %i0,[%fp+68]\");\n-\tasm (\"st %i1,[%fp+72]\");\n-\tasm (\"st %i2,[%fp+76]\");\n-\tasm (\"st %i3,[%fp+80]\");\n-\tasm (\"st %i4,[%fp+84]\");\n-\tasm (\"retl\");\n-\tasm (\"st %i5,[%fp+88]\");\n-#ifdef NEED_TYPE_COMMAND\n-\tasm (\".type __builtin_saveregs,#function\");\n-\tasm (\".size __builtin_saveregs,.-__builtin_saveregs\");\n-#endif\n-#else /* not __sparc__ */\n-#if defined(__MIPSEL__) | defined(__R3000__) | defined(__R2000__) | defined(__mips__)\n-\n-  asm (\"\t.text\");\n-#ifdef __mips16\n-  asm (\"\t.set nomips16\");\n-#endif\n-  asm (\"\t.ent __builtin_saveregs\");\n-  asm (\"\t.globl __builtin_saveregs\");\n-  asm (\"__builtin_saveregs:\");\n-  asm (\"\tsw\t$4,0($30)\");\n-  asm (\"\tsw\t$5,4($30)\");\n-  asm (\"\tsw\t$6,8($30)\");\n-  asm (\"\tsw\t$7,12($30)\");\n-  asm (\"\tj\t$31\");\n-  asm (\"\t.end __builtin_saveregs\");\n-#else /* not __mips__, etc.  */\n-\n-void * ATTRIBUTE_NORETURN\n-__builtin_saveregs ()\n-{\n-  abort ();\n-}\n-\n-#endif /* not __mips__ */\n-#endif /* not __sparc__ */\n-#endif /* not __i860__ */\n #endif\n \f\n #ifdef L_eprintf"}, {"sha": "693c2f78bb63ced2836cac9162e93e30b9100e81", "filename": "gcc/libgcc2.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f976b45772c889f596e3e3b0ee1cfec20ac6ac4/gcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f976b45772c889f596e3e3b0ee1cfec20ac6ac4/gcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.h?ref=0f976b45772c889f596e3e3b0ee1cfec20ac6ac4", "patch": "@@ -23,8 +23,6 @@ Boston, MA 02111-1307, USA.  */\n #define __LIBGCC2_H__\n \n extern int __gcc_bcmp (const unsigned char *, const unsigned char *, size_t);\n-extern void *__builtin_saveregs (void);\n-extern void __dummy (void);\n extern void __clear_cache (char *, char *);\n extern void __eprintf (const char *, const char *, unsigned int, const char *)\n   __attribute__ ((__noreturn__));"}]}