{"sha": "42ec4ec863b784b6d03093929a0b6a82ad544d9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJlYzRlYzg2M2I3ODRiNmQwMzA5MzkyOWEwYjZhODJhZDU0NGQ5ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-09-03T14:13:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-09-03T14:13:54Z"}, "message": "dwarf2out.c (flush_limbo_die_list): Split out from ...\n\n2015-09-03  Richard Biener  <rguenther@suse.de>\n\n\t* dwarf2out.c (flush_limbo_die_list): Split out from ...\n\t(dwarf2out_early_finish): ... here.\n\t(dwarf2out_finish): Do not call dwarf2out_early_finish but\n\tflush_limbo_die_list.  Assert we have no deferred asm names.\n\nFrom-SVN: r227446", "tree": {"sha": "9b0731ed9172075586269ff1081b94ceceef1fda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b0731ed9172075586269ff1081b94ceceef1fda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42ec4ec863b784b6d03093929a0b6a82ad544d9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42ec4ec863b784b6d03093929a0b6a82ad544d9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42ec4ec863b784b6d03093929a0b6a82ad544d9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42ec4ec863b784b6d03093929a0b6a82ad544d9d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5179d2a2137d80c429ecd01dd0aeab415ffd299e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5179d2a2137d80c429ecd01dd0aeab415ffd299e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5179d2a2137d80c429ecd01dd0aeab415ffd299e"}], "stats": {"total": 123, "additions": 71, "deletions": 52}, "files": [{"sha": "3a04aaf9506cc3b83042429f329ea086af4ef50b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42ec4ec863b784b6d03093929a0b6a82ad544d9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42ec4ec863b784b6d03093929a0b6a82ad544d9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42ec4ec863b784b6d03093929a0b6a82ad544d9d", "patch": "@@ -1,3 +1,10 @@\n+2015-09-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* dwarf2out.c (flush_limbo_die_list): Split out from ...\n+\t(dwarf2out_early_finish): ... here.\n+\t(dwarf2out_finish): Do not call dwarf2out_early_finish but\n+\tflush_limbo_die_list.  Assert we have no deferred asm names.\n+\n 2015-09-03  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* optabs.c (expand_binop): Don't create a broadcast vector with a"}, {"sha": "b6ab869e0d1c6772aa627335d6e3f654865400b5", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 64, "deletions": 52, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42ec4ec863b784b6d03093929a0b6a82ad544d9d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42ec4ec863b784b6d03093929a0b6a82ad544d9d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=42ec4ec863b784b6d03093929a0b6a82ad544d9d", "patch": "@@ -25127,6 +25127,62 @@ optimize_location_lists (dw_die_ref die)\n   optimize_location_lists_1 (die, &htab);\n }\n \f\n+/* Traverse the limbo die list, and add parent/child links.  The only\n+   dies without parents that should be here are concrete instances of\n+   inline functions, and the comp_unit_die.  We can ignore the comp_unit_die.\n+   For concrete instances, we can get the parent die from the abstract\n+   instance.  */\n+\n+static void\n+flush_limbo_die_list (void)\n+{\n+  limbo_die_node *node, *next_node;\n+\n+  for (node = limbo_die_list; node; node = next_node)\n+    {\n+      dw_die_ref die = node->die;\n+      next_node = node->next;\n+\n+      if (die->die_parent == NULL)\n+\t{\n+\t  dw_die_ref origin = get_AT_ref (die, DW_AT_abstract_origin);\n+\n+\t  if (origin && origin->die_parent)\n+\t    add_child_die (origin->die_parent, die);\n+\t  else if (is_cu_die (die))\n+\t    ;\n+\t  else if (seen_error ())\n+\t    /* It's OK to be confused by errors in the input.  */\n+\t    add_child_die (comp_unit_die (), die);\n+\t  else\n+\t    {\n+\t      /* In certain situations, the lexical block containing a\n+\t\t nested function can be optimized away, which results\n+\t\t in the nested function die being orphaned.  Likewise\n+\t\t with the return type of that nested function.  Force\n+\t\t this to be a child of the containing function.\n+\n+\t\t It may happen that even the containing function got fully\n+\t\t inlined and optimized out.  In that case we are lost and\n+\t\t assign the empty child.  This should not be big issue as\n+\t\t the function is likely unreachable too.  */\n+\t      gcc_assert (node->created_for);\n+\n+\t      if (DECL_P (node->created_for))\n+\t\torigin = get_context_die (DECL_CONTEXT (node->created_for));\n+\t      else if (TYPE_P (node->created_for))\n+\t\torigin = scope_die_for (node->created_for, comp_unit_die ());\n+\t      else\n+\t\torigin = comp_unit_die ();\n+\n+\t      add_child_die (origin, die);\n+\t    }\n+\t}\n+    }\n+\n+  limbo_die_list = NULL;\n+}\n+\n /* Output stuff that dwarf requires at the end of every file,\n    and generate the DWARF-2 debugging info.  */\n \n@@ -25137,7 +25193,11 @@ dwarf2out_finish (const char *filename)\n   dw_die_ref main_comp_unit_die;\n \n   /* Flush out any latecomers to the limbo party.  */\n-  dwarf2out_early_finish ();\n+  flush_limbo_die_list ();\n+\n+  /* We shouldn't have any symbols with delayed asm names for\n+     DIEs generated after early finish.  */\n+  gcc_assert (deferred_asm_name == NULL);\n \n   /* PCH might result in DW_AT_producer string being restored from the\n      header compilation, so always fill it with empty string initially\n@@ -25483,7 +25543,7 @@ dwarf2out_finish (const char *filename)\n static void\n dwarf2out_early_finish (void)\n {\n-  limbo_die_node *node, *next_node;\n+  limbo_die_node *node;\n \n   /* Add DW_AT_linkage_name for all deferred DIEs.  */\n   for (node = deferred_asm_name; node; node = node->next)\n@@ -25501,57 +25561,9 @@ dwarf2out_early_finish (void)\n     }\n   deferred_asm_name = NULL;\n \n-  /* Traverse the limbo die list, and add parent/child links.  The only\n-     dies without parents that should be here are concrete instances of\n-     inline functions, and the comp_unit_die.  We can ignore the comp_unit_die.\n-     For concrete instances, we can get the parent die from the abstract\n-     instance.\n-\n-     The point here is to flush out the limbo list so that it is empty\n+  /* The point here is to flush out the limbo list so that it is empty\n      and we don't need to stream it for LTO.  */\n-  for (node = limbo_die_list; node; node = next_node)\n-    {\n-      dw_die_ref die = node->die;\n-      next_node = node->next;\n-\n-      if (die->die_parent == NULL)\n-\t{\n-\t  dw_die_ref origin = get_AT_ref (die, DW_AT_abstract_origin);\n-\n-\t  if (origin && origin->die_parent)\n-\t    add_child_die (origin->die_parent, die);\n-\t  else if (is_cu_die (die))\n-\t    ;\n-\t  else if (seen_error ())\n-\t    /* It's OK to be confused by errors in the input.  */\n-\t    add_child_die (comp_unit_die (), die);\n-\t  else\n-\t    {\n-\t      /* In certain situations, the lexical block containing a\n-\t\t nested function can be optimized away, which results\n-\t\t in the nested function die being orphaned.  Likewise\n-\t\t with the return type of that nested function.  Force\n-\t\t this to be a child of the containing function.\n-\n-\t\t It may happen that even the containing function got fully\n-\t\t inlined and optimized out.  In that case we are lost and\n-\t\t assign the empty child.  This should not be big issue as\n-\t\t the function is likely unreachable too.  */\n-\t      gcc_assert (node->created_for);\n-\n-\t      if (DECL_P (node->created_for))\n-\t\torigin = get_context_die (DECL_CONTEXT (node->created_for));\n-\t      else if (TYPE_P (node->created_for))\n-\t\torigin = scope_die_for (node->created_for, comp_unit_die ());\n-\t      else\n-\t\torigin = comp_unit_die ();\n-\n-\t      add_child_die (origin, die);\n-\t    }\n-\t}\n-    }\n-\n-  limbo_die_list = NULL;\n+  flush_limbo_die_list ();\n }\n \n /* Reset all state within dwarf2out.c so that we can rerun the compiler"}]}