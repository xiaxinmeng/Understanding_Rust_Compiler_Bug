{"sha": "58b9f26a61eb587028067093cd903f7e830b48ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThiOWYyNmE2MWViNTg3MDI4MDY3MDkzY2Q5MDNmN2U4MzBiNDhiYQ==", "commit": {"author": {"name": "Jim Xochellis", "email": "jimxoch@yahoo.gr", "date": "2007-07-09T09:00:34Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-07-09T09:00:34Z"}, "message": "stl_algo.h (search(_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2)): Tidy.\n\n2007-07-09  Jim Xochellis  <jimxoch@yahoo.gr>\n\t    Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_algo.h (search(_ForwardIterator1,\n\t_ForwardIterator1, _ForwardIterator2, _ForwardIterator2)): Tidy.\n\t(search(_ForwardIterator1, _ForwardIterator1, _ForwardIterator2,\n\t_ForwardIterator2, _BinaryPredicate)): Likewise.\n\nCo-Authored-By: Paolo Carlini <pcarlini@suse.de>\n\nFrom-SVN: r126479", "tree": {"sha": "00b64ba3c077ca2bfac328c54d450e8b9b3a8e9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00b64ba3c077ca2bfac328c54d450e8b9b3a8e9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58b9f26a61eb587028067093cd903f7e830b48ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58b9f26a61eb587028067093cd903f7e830b48ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58b9f26a61eb587028067093cd903f7e830b48ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58b9f26a61eb587028067093cd903f7e830b48ba/comments", "author": null, "committer": null, "parents": [{"sha": "57728874d2a68f3918a2e44c65c6ae100e34eaf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57728874d2a68f3918a2e44c65c6ae100e34eaf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57728874d2a68f3918a2e44c65c6ae100e34eaf6"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "0c38956f52c2b4c1db90b642cd9086007ebd0f7a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b9f26a61eb587028067093cd903f7e830b48ba/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b9f26a61eb587028067093cd903f7e830b48ba/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=58b9f26a61eb587028067093cd903f7e830b48ba", "patch": "@@ -1,3 +1,11 @@\n+2007-07-09  Jim Xochellis  <jimxoch@yahoo.gr>\n+\t    Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_algo.h (search(_ForwardIterator1,\n+\t_ForwardIterator1, _ForwardIterator2, _ForwardIterator2)): Tidy.\n+\t(search(_ForwardIterator1, _ForwardIterator1, _ForwardIterator2,\n+\t_ForwardIterator2, _BinaryPredicate)): Likewise.\n+\n 2007-07-06  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* testsuite/lib/libstdc++.exp (v3-build_support): Use env(AR)"}, {"sha": "160dc2f8abc43d5bc779fc8b363d9b1b81c97e64", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b9f26a61eb587028067093cd903f7e830b48ba/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b9f26a61eb587028067093cd903f7e830b48ba/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=58b9f26a61eb587028067093cd903f7e830b48ba", "patch": "@@ -624,19 +624,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    typename iterator_traits<_ForwardIterator2>::value_type>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n       __glibcxx_requires_valid_range(__first2, __last2);\n+\n       // Test for empty ranges\n       if (__first1 == __last1 || __first2 == __last2)\n \treturn __first1;\n \n       // Test for a pattern of length 1.\n-      _ForwardIterator2 __tmp(__first2);\n-      ++__tmp;\n-      if (__tmp == __last2)\n+      _ForwardIterator2 __p1(__first2);\n+      if (++__p1 == __last2)\n \treturn std::find(__first1, __last1, *__first2);\n \n       // General case.\n-      _ForwardIterator2 __p1, __p;\n-      __p1 = __first2; ++__p1;\n+      _ForwardIterator2 __p;\n       _ForwardIterator1 __current = __first1;\n \n       for (;;)\n@@ -703,9 +702,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \treturn __first1;\n \n       // Test for a pattern of length 1.\n-      _ForwardIterator2 __tmp(__first2);\n-      ++__tmp;\n-      if (__tmp == __last2)\n+      _ForwardIterator2 __p1(__first2);\n+      if (++__p1 == __last2)\n \t{\n \t  while (__first1 != __last1\n \t\t && !bool(__predicate(*__first1, *__first2)))\n@@ -714,8 +712,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n \n       // General case.\n-      _ForwardIterator2 __p1, __p;\n-      __p1 = __first2; ++__p1;\n+      _ForwardIterator2 __p;\n       _ForwardIterator1 __current = __first1;\n \n       for (;;)"}]}