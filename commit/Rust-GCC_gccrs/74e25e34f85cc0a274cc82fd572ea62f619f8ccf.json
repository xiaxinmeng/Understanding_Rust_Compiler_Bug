{"sha": "74e25e34f85cc0a274cc82fd572ea62f619f8ccf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRlMjVlMzRmODVjYzBhMjc0Y2M4MmZkNTcyZWE2MmY2MTlmOGNjZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-11-20T13:58:12Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-11-20T13:58:12Z"}, "message": "arm.c (arm_dwarf_register_span): Take into account the endianness of the D registers for the legacy encodings.\n\n\t* config/arm/arm.c (arm_dwarf_register_span): Take into account the\n\tendianness of the D registers for the legacy encodings.\n\nFrom-SVN: r205118", "tree": {"sha": "a8aae0c036dd880dbf4332000688e9f9a37e0d06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8aae0c036dd880dbf4332000688e9f9a37e0d06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74e25e34f85cc0a274cc82fd572ea62f619f8ccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e25e34f85cc0a274cc82fd572ea62f619f8ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74e25e34f85cc0a274cc82fd572ea62f619f8ccf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e25e34f85cc0a274cc82fd572ea62f619f8ccf/comments", "author": null, "committer": null, "parents": [{"sha": "c34fb198320a6a433f5ad4c10b9d0c7e6f280e28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c34fb198320a6a433f5ad4c10b9d0c7e6f280e28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c34fb198320a6a433f5ad4c10b9d0c7e6f280e28"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "02b9cf54b45f1e8e68bf07b1fb13c1773900769f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e25e34f85cc0a274cc82fd572ea62f619f8ccf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e25e34f85cc0a274cc82fd572ea62f619f8ccf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74e25e34f85cc0a274cc82fd572ea62f619f8ccf", "patch": "@@ -1,3 +1,8 @@\n+2013-11-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/arm/arm.c (arm_dwarf_register_span): Take into account the\n+\tendianness of the D registers for the legacy encodings.\n+\n 2013-11-20  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR rtl-optimization/54300"}, {"sha": "0d68f018f4d9122a1e5b56ab5e26470a70c80af3", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e25e34f85cc0a274cc82fd572ea62f619f8ccf/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e25e34f85cc0a274cc82fd572ea62f619f8ccf/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=74e25e34f85cc0a274cc82fd572ea62f619f8ccf", "patch": "@@ -27992,10 +27992,11 @@ arm_dbx_register_number (unsigned int regno)\n static rtx\n arm_dwarf_register_span (rtx rtl)\n {\n+  enum machine_mode mode;\n   unsigned regno;\n+  rtx parts[8];\n   int nregs;\n   int i;\n-  rtx p;\n \n   regno = REGNO (rtl);\n   if (!IS_VFP_REGNUM (regno))\n@@ -28008,15 +28009,33 @@ arm_dwarf_register_span (rtx rtl)\n      corresponding D register.  Until GDB supports this, we shall use the\n      legacy encodings.  We also use these encodings for D0-D15 for\n      compatibility with older debuggers.  */\n-  if (VFP_REGNO_OK_FOR_SINGLE (regno))\n+  mode = GET_MODE (rtl);\n+  if (GET_MODE_SIZE (mode) < 8)\n     return NULL_RTX;\n \n-  nregs = GET_MODE_SIZE (GET_MODE (rtl)) / 8;\n-  p = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (nregs));\n-  for (i = 0; i < nregs; i++)\n-    XVECEXP (p, 0, i) = gen_rtx_REG (DImode, regno + i);\n+  if (VFP_REGNO_OK_FOR_SINGLE (regno))\n+    {\n+      nregs = GET_MODE_SIZE (mode) / 4;\n+      for (i = 0; i < nregs; i += 2)\n+\tif (TARGET_BIG_END)\n+\t  {\n+\t    parts[i] = gen_rtx_REG (SImode, regno + i + 1);\n+\t    parts[i + 1] = gen_rtx_REG (SImode, regno + i);\n+\t  }\n+\telse\n+\t  {\n+\t    parts[i] = gen_rtx_REG (SImode, regno + i);\n+\t    parts[i + 1] = gen_rtx_REG (SImode, regno + i + 1);\n+\t  }\n+    }\n+  else\n+    {\n+      nregs = GET_MODE_SIZE (mode) / 8;\n+      for (i = 0; i < nregs; i++)\n+\tparts[i] = gen_rtx_REG (DImode, regno + i);\n+    }\n \n-  return p;\n+  return gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (nregs , parts));\n }\n \n #if ARM_UNWIND_INFO"}]}