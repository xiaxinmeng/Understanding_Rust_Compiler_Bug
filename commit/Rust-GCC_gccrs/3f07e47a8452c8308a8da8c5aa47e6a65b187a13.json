{"sha": "3f07e47a8452c8308a8da8c5aa47e6a65b187a13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YwN2U0N2E4NDUyYzgzMDhhOGRhOGM1YWE0N2U2YTY1YjE4N2ExMw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-02-27T02:36:26Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-02-27T02:36:26Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r359", "tree": {"sha": "5a76e90a13daf77c394b0043ddaa5b53ebc45d02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a76e90a13daf77c394b0043ddaa5b53ebc45d02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f07e47a8452c8308a8da8c5aa47e6a65b187a13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f07e47a8452c8308a8da8c5aa47e6a65b187a13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f07e47a8452c8308a8da8c5aa47e6a65b187a13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f07e47a8452c8308a8da8c5aa47e6a65b187a13/comments", "author": null, "committer": null, "parents": [{"sha": "1eb9bc802b726a5c7e2c9fc1637eaa158427bb6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eb9bc802b726a5c7e2c9fc1637eaa158427bb6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eb9bc802b726a5c7e2c9fc1637eaa158427bb6e"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "f8f549578c67e0767983fca47751392177735990", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f07e47a8452c8308a8da8c5aa47e6a65b187a13/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f07e47a8452c8308a8da8c5aa47e6a65b187a13/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=3f07e47a8452c8308a8da8c5aa47e6a65b187a13", "patch": "@@ -790,11 +790,11 @@\n   else if (GET_CODE (op1) == CONST_DOUBLE)\n     {\n       operands[0] = operand_subword (op0, 1, 0, DImode);\n-      operands[1] = gen_rtx (CONST_INT, VOIDmode, CONST_DOUBLE_HIGH (op1));\n+      operands[1] = gen_rtx (CONST_INT, VOIDmode, CONST_DOUBLE_LOW (op1));\n       output_asm_insn (\\\"sethi %%hi(%a1),%0\\\", operands);\n \n       operands[0] = operand_subword (op0, 0, 0, DImode);\n-      operands[1] = gen_rtx (CONST_INT, VOIDmode, CONST_DOUBLE_LOW (op1));\n+      operands[1] = gen_rtx (CONST_INT, VOIDmode, CONST_DOUBLE_HIGH (op1));\n       output_asm_insn (singlemove_string (operands), operands);\n     }\n   else\n@@ -824,7 +824,14 @@\n \t(lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t   (match_operand:DI 2 \"immediate_operand\" \"in\")))]\n   \"\"\n-  \"or %R1,%%lo(%a2),%R0\"\n+  \"*\n+{\n+  /* Don't output a 64 bit constant, since we can't trust the assembler to\n+     handle it correctly.  */\n+  if (GET_CODE (operands[2]) == CONST_DOUBLE)\n+    operands[2] = gen_rtx (CONST_INT, VOIDmode, CONST_DOUBLE_LOW (operands[2]));\n+  return \\\"or %R1,%%lo(%a2),%R0\\\";\n+}\"\n   ;; Need to set length for this arith insn because operand2\n   ;; is not an \"arith_operand\".\n   [(set_attr \"length\" \"1\")])"}, {"sha": "86c229df14c4759f75c0e0571df7574e9acf9809", "filename": "gcc/unroll.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f07e47a8452c8308a8da8c5aa47e6a65b187a13/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f07e47a8452c8308a8da8c5aa47e6a65b187a13/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=3f07e47a8452c8308a8da8c5aa47e6a65b187a13", "patch": "@@ -1461,8 +1461,10 @@ copy_loop_body (copy_start, copy_end, map, exit_label, last_iteration,\n \t      for (tv = bl->giv; tv; tv = tv->next_iv)\n \t\tif (tv->giv_type == DEST_ADDR && tv->same == v)\n \t\t  {\n+\t\t    /* Increment the giv by the amount that was calculated in\n+\t\t       find_splittable_givs, and saved in add_val.  */\n \t\t    tv->dest_reg = plus_constant (tv->dest_reg,\n-\t\t\t\t\t\t  INTVAL (giv_inc));\n+\t\t\t\t\t\t  INTVAL (tv->add_val));\n \t\t    *tv->location = tv->dest_reg;\n \t\t    \n \t\t    if (last_iteration && unroll_type != UNROLL_COMPLETELY)\n@@ -2596,7 +2598,14 @@ find_splittable_givs (bl, unroll_type, loop_start, loop_end, increment,\n \t\t      addr_combined_regs[REGNO (v->new_reg)] = v;\n \t\t    }\n \t\t}\n-\t      \n+\n+\t      /* Overwrite the old add_val, which is no longer needed, and\n+\t\t substitute the amount that the giv is incremented on each\n+\t\t iteration.  We need to save this somewhere, so we know how\n+\t\t much to increment split DEST_ADDR giv's in copy_loop_body.  */\n+\n+\t      v->add_val = giv_inc;\n+\n \t      if (loop_dump_stream)\n \t\tfprintf (loop_dump_stream, \"DEST_ADDR giv being split.\\n\");\n \t    }"}]}