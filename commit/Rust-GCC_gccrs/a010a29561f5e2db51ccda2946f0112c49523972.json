{"sha": "a010a29561f5e2db51ccda2946f0112c49523972", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAxMGEyOTU2MWY1ZTJkYjUxY2NkYTI5NDZmMDExMmM0OTUyMzk3Mg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2005-02-22T13:02:11Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-02-22T13:02:11Z"}, "message": "2005-02-22  Michael Koch  <konqueror@gmx.de>\n\n\t* java/nio/DirectByteBufferImpl.java\n\t(owner): Fixed formatting of javadoc.\n\t* java/text/DateFormat.java\n\t(getAvailableLocales): Fixed formatting.\n\t* java/text/SimpleDateFormat.java:\n\tFixed formatting and import statement order.\n\t* java/util/Calendar.java\n\t(Calendar): Fixed javadoc to be HTML compliant.\n\t* java/util/SimpleTimeZone.java:\n\tFixed javadocs.\n\nFrom-SVN: r95392", "tree": {"sha": "a6292178d291461e4d7cdeef5f47fcf2be86c28c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6292178d291461e4d7cdeef5f47fcf2be86c28c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a010a29561f5e2db51ccda2946f0112c49523972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a010a29561f5e2db51ccda2946f0112c49523972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a010a29561f5e2db51ccda2946f0112c49523972", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a010a29561f5e2db51ccda2946f0112c49523972/comments", "author": null, "committer": null, "parents": [{"sha": "44f366767942717c2378f6e37415e32b6b52204c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f366767942717c2378f6e37415e32b6b52204c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44f366767942717c2378f6e37415e32b6b52204c"}], "stats": {"total": 58, "additions": 37, "deletions": 21}, "files": [{"sha": "13d475129cdbe3df3241f4ed423c64cd786b5851", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a010a29561f5e2db51ccda2946f0112c49523972/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a010a29561f5e2db51ccda2946f0112c49523972/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a010a29561f5e2db51ccda2946f0112c49523972", "patch": "@@ -1,3 +1,16 @@\n+2005-02-22  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/nio/DirectByteBufferImpl.java\n+\t(owner): Fixed formatting of javadoc.\n+\t* java/text/DateFormat.java\n+\t(getAvailableLocales): Fixed formatting.\n+\t* java/text/SimpleDateFormat.java:\n+\tFixed formatting and import statement order.\n+\t* java/util/Calendar.java\n+\t(Calendar): Fixed javadoc to be HTML compliant.\n+\t* java/util/SimpleTimeZone.java:\n+\tFixed javadocs.\n+\n 2005-02-22  Roman Kennke <roman@ontographics.com>\n \n \t* javax/swing/plaf/basic/BasicLookAndFeel.java"}, {"sha": "83279382a22f0e883aa933d95785c903b54cef39", "filename": "libjava/java/nio/DirectByteBufferImpl.java", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a010a29561f5e2db51ccda2946f0112c49523972/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a010a29561f5e2db51ccda2946f0112c49523972/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java?ref=a010a29561f5e2db51ccda2946f0112c49523972", "patch": "@@ -42,18 +42,19 @@\n \n abstract class DirectByteBufferImpl extends ByteBuffer\n {\n-  /** The owner is used to keep alive the object that actually owns the\n-    * memory. There are three possibilities:\n-    *  1) owner == this: We allocated the memory and we should free it,\n-    *                    but *only* in finalize (if we've been sliced\n-    *                    other objects will also have access to the\n-    *                    memory).\n-    *  2) owner == null: The byte buffer was created thru\n-    *                    JNI.NewDirectByteBuffer. The JNI code is\n-    *                    responsible for freeing the memory.\n-    *  3) owner == some other object: The other object allocated the\n-    *                                 memory and should free it.\n-    */\n+  /**\n+   * The owner is used to keep alive the object that actually owns the\n+   * memory. There are three possibilities:\n+   *  1) owner == this: We allocated the memory and we should free it,\n+   *                    but *only* in finalize (if we've been sliced\n+   *                    other objects will also have access to the\n+   *                    memory).\n+   *  2) owner == null: The byte buffer was created thru\n+   *                    JNI.NewDirectByteBuffer. The JNI code is\n+   *                    responsible for freeing the memory.\n+   *  3) owner == some other object: The other object allocated the\n+   *                                 memory and should free it.\n+   */\n   private final Object owner;\n \n   static final class ReadOnly extends DirectByteBufferImpl"}, {"sha": "1571672dc43e197471c90ec181b1fda640e867b0", "filename": "libjava/java/text/DateFormat.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a010a29561f5e2db51ccda2946f0112c49523972/libjava%2Fjava%2Ftext%2FDateFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a010a29561f5e2db51ccda2946f0112c49523972/libjava%2Fjava%2Ftext%2FDateFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FDateFormat.java?ref=a010a29561f5e2db51ccda2946f0112c49523972", "patch": "@@ -494,7 +494,7 @@ public abstract StringBuffer format (Date date,\n    * This method returns a list of available locales supported by this\n    * class.\n    */\n-  public static Locale[] getAvailableLocales ()\n+  public static Locale[] getAvailableLocales()\n   {\n     // FIXME\n     Locale[] l = new Locale[1];"}, {"sha": "ce833b661a8adf6843e05345561211511363923e", "filename": "libjava/java/text/SimpleDateFormat.java", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a010a29561f5e2db51ccda2946f0112c49523972/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a010a29561f5e2db51ccda2946f0112c49523972/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java?ref=a010a29561f5e2db51ccda2946f0112c49523972", "patch": "@@ -45,8 +45,8 @@\n import gnu.java.text.FormatCharacterIterator;\n import gnu.java.text.StringFormatBuffer;\n \n-import java.io.InvalidObjectException;\n import java.io.IOException;\n+import java.io.InvalidObjectException;\n import java.io.ObjectInputStream;\n import java.util.ArrayList;\n import java.util.Calendar;\n@@ -97,7 +97,8 @@ public class SimpleDateFormat extends DateFormat\n      * @param s the size of the field.\n      * @param c the character used.\n      */\n-    public CompiledField(int f, int s, char c) {\n+    public CompiledField(int f, int s, char c)\n+    {\n       field = f;\n       size = s;\n       character = c;\n@@ -169,7 +170,7 @@ public String toString()\n    * @see DateFormatSymbols\n    * @serial The localisation data.  May not be null.\n    */\n-  private DateFormatSymbols formatData;  // formatData\n+  private DateFormatSymbols formatData;\n \n   /**\n    * The date representing the start of the century"}, {"sha": "0e9284c7c212479e8fe8fe26b616d55a39f1ead6", "filename": "libjava/java/util/Calendar.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a010a29561f5e2db51ccda2946f0112c49523972/libjava%2Fjava%2Futil%2FCalendar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a010a29561f5e2db51ccda2946f0112c49523972/libjava%2Fjava%2Futil%2FCalendar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FCalendar.java?ref=a010a29561f5e2db51ccda2946f0112c49523972", "patch": "@@ -1,5 +1,5 @@\n /* Calendar.java --\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -398,10 +398,10 @@ public abstract class Calendar implements Serializable, Cloneable\n    * The version of the serialized data on the stream.\n    * <dl><dt>0 or not present</dt>\n    * <dd> JDK 1.1.5 or later.</dd>\n-   * <dl><dt>1</dt>\n+   * <dt>1</dt>\n    * <dd>JDK 1.1.6 or later.  This always writes a correct `time' value\n    * on the stream, as well as the other fields, to be compatible with\n-   * earlier versions</dd>\n+   * earlier versions</dd></dl>\n    * @since JDK1.1.6\n    * @serial\n    */"}, {"sha": "4da1847a29c21f1305daf18fc8e58016e12257bf", "filename": "libjava/java/util/SimpleTimeZone.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a010a29561f5e2db51ccda2946f0112c49523972/libjava%2Fjava%2Futil%2FSimpleTimeZone.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a010a29561f5e2db51ccda2946f0112c49523972/libjava%2Fjava%2Futil%2FSimpleTimeZone.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FSimpleTimeZone.java?ref=a010a29561f5e2db51ccda2946f0112c49523972", "patch": "@@ -1,5 +1,5 @@\n /* java.util.SimpleTimeZone\n-   Copyright (C) 1998, 1999, 2000, 2003, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2003, 2004, 2005  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -71,7 +71,7 @@ public class SimpleTimeZone extends TimeZone\n   /**\n    * The daylight savings offset.  This is a positive offset in\n    * milliseconds with respect to standard time.  Typically this\n-   * is one hour, but for some time zones this may be half an our.\n+   * is one hour, but for some time zones this may be half an hour.\n    * @serial\n    * @since JDK1.1.4\n    */\n@@ -228,6 +228,7 @@ public class SimpleTimeZone extends TimeZone\n    * startMode, endMode and dstSavings.  And there is a optional section\n    * as described in writeObject.\n    * </dd>\n+   * </dl>\n    *\n    * XXX - JDK 1.2 Beta 4 docu states 1.1.4, but my 1.1.5 has the old\n    * version."}]}