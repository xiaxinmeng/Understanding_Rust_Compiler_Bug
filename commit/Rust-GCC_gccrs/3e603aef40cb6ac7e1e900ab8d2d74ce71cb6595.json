{"sha": "3e603aef40cb6ac7e1e900ab8d2d74ce71cb6595", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U2MDNhZWY0MGNiNmFjN2UxZTkwMGFiOGQyZDc0Y2U3MWNiNjU5NQ==", "commit": {"author": {"name": "David Daney", "email": "ddaney@avtrex.com", "date": "2008-01-23T23:00:39Z"}, "committer": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2008-01-23T23:00:39Z"}, "message": "2008-01-23  David Daney  <ddaney@avtrex.com>\n\n\t* class.c (hide)  Rename to...\n\t(java_hide_decl) ... this throughout, and make public.\n\t* resource.c (Jr_count): Remove.\n\t(compile_resource_data): Call java_mangle_resource_name to generate\n\tdecl name.  Make resource decl public and hidden.\n\t* mangle.c (java_mangle_resource_name): New function.\n\t* java-tree.h (java_hide_decl, java_mangle_resource_name): Declare\n\tfunctions.\n\nFrom-SVN: r131767", "tree": {"sha": "c5724340e6d582282ffea2d456a266bb7efcdf72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5724340e6d582282ffea2d456a266bb7efcdf72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e603aef40cb6ac7e1e900ab8d2d74ce71cb6595", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e603aef40cb6ac7e1e900ab8d2d74ce71cb6595", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e603aef40cb6ac7e1e900ab8d2d74ce71cb6595", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e603aef40cb6ac7e1e900ab8d2d74ce71cb6595/comments", "author": null, "committer": null, "parents": [{"sha": "6c660aeb0e8079ee3267af0dc3682ce9cdc91385", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c660aeb0e8079ee3267af0dc3682ce9cdc91385", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c660aeb0e8079ee3267af0dc3682ce9cdc91385"}], "stats": {"total": 91, "additions": 76, "deletions": 15}, "files": [{"sha": "d93dd3d43ebef55f60d052ed121f19627bc07d20", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e603aef40cb6ac7e1e900ab8d2d74ce71cb6595/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e603aef40cb6ac7e1e900ab8d2d74ce71cb6595/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=3e603aef40cb6ac7e1e900ab8d2d74ce71cb6595", "patch": "@@ -1,3 +1,14 @@\n+2008-01-23  David Daney  <ddaney@avtrex.com>\n+\n+\t* class.c (hide)  Rename to...\n+\t(java_hide_decl) ... this throughout, and make public.\n+\t* resource.c (Jr_count): Remove.\n+\t(compile_resource_data): Call java_mangle_resource_name to generate\n+\tdecl name.  Make resource decl public and hidden.\n+\t* mangle.c (java_mangle_resource_name): New function.\n+\t* java-tree.h (java_hide_decl, java_mangle_resource_name): Declare\n+\tfunctions.\n+\n 2008-01-04  Andrew Haley  <aph@redhat.com>\n \n \tPR java/17779"}, {"sha": "2aec3a5addf833b0e1a5b90d5a08170a675858c2", "filename": "gcc/java/class.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e603aef40cb6ac7e1e900ab8d2d74ce71cb6595/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e603aef40cb6ac7e1e900ab8d2d74ce71cb6595/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=3e603aef40cb6ac7e1e900ab8d2d74ce71cb6595", "patch": "@@ -742,8 +742,8 @@ build_java_method_type (tree fntype, tree this_class, int access_flags)\n   return fntype;\n }\n \n-static void\n-hide (tree decl ATTRIBUTE_UNUSED)\n+void\n+java_hide_decl (tree decl ATTRIBUTE_UNUSED)\n {\n #ifdef HAVE_GAS_HIDDEN\n   DECL_VISIBILITY (decl) = VISIBILITY_HIDDEN;\n@@ -872,7 +872,7 @@ add_field (tree class, tree name, tree field_type, int flags)\n       /* Hide everything that shouldn't be visible outside a DSO.  */\n       if (flag_indirect_classes\n \t  || (FIELD_PRIVATE (field)))\n-\thide (field);\n+\tjava_hide_decl (field);\n       /* Considered external unless we are compiling it into this\n \t object file.  */\n       DECL_EXTERNAL (field) = (is_compiled_class (class) != 2);\n@@ -1031,7 +1031,7 @@ build_static_class_ref (tree type)\n \t{\n \t  TREE_PUBLIC (decl) = 1;\n \t  if (CLASS_PRIVATE (TYPE_NAME (type)))\n-\t    hide (decl);\n+\t    java_hide_decl (decl);\n \t}\n       DECL_IGNORED_P (decl) = 1;\n       DECL_ARTIFICIAL (decl) = 1;\n@@ -1071,7 +1071,7 @@ build_classdollar_field (tree type)\n       TREE_CONSTANT (decl) = 1;\n       TREE_READONLY (decl) = 1;\n       TREE_PUBLIC (decl) = 1;\n-      hide (decl);\n+      java_hide_decl (decl);\n       DECL_IGNORED_P (decl) = 1;\n       DECL_ARTIFICIAL (decl) = 1;\n       MAYBE_CREATE_VAR_LANG_DECL_SPECIFIC (decl);\n@@ -1760,7 +1760,7 @@ make_class_data (tree type)\n       /* The only dispatch table exported from a DSO is the dispatch\n \t table for java.lang.Class.  */\n       if (DECL_NAME (type_decl) != id_class)\n-\thide (dtable_decl);\n+\tjava_hide_decl (dtable_decl);\n       if (! flag_indirect_classes)\n \trest_of_decl_compilation (dtable_decl, 1, 0);\n       /* Maybe we're compiling Class as the first class.  If so, set\n@@ -2613,7 +2613,7 @@ layout_class_method (tree this_class, tree super_class,\n       || (METHOD_PRIVATE (method_decl) && METHOD_STATIC (method_decl)\n \t  && ! METHOD_NATIVE (method_decl)\n \t  && ! special_method_p (method_decl)))\n-    hide (method_decl);\n+    java_hide_decl (method_decl);\n \n   /* Considered external unless it is being compiled into this object\n      file, or it was already flagged as external.  */"}, {"sha": "a19d400d608c356ec6a86151c1079194759e42ff", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e603aef40cb6ac7e1e900ab8d2d74ce71cb6595/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e603aef40cb6ac7e1e900ab8d2d74ce71cb6595/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=3e603aef40cb6ac7e1e900ab8d2d74ce71cb6595", "patch": "@@ -1026,6 +1026,7 @@ extern tree parse_signature (struct JCF *jcf, int sig_index);\n extern tree add_field (tree, tree, tree, int);\n extern tree add_method (tree, int, tree, tree);\n extern tree add_method_1 (tree, int, tree, tree);\n+extern void java_hide_decl (tree);\n extern tree make_class (void);\n extern tree push_class (tree, tree);\n extern tree unmangle_classname (const char *name, int name_length);\n@@ -1205,6 +1206,7 @@ extern void java_check_methods (tree);\n extern void java_mangle_decl (tree);\n extern tree java_mangle_class_field (struct obstack *, tree);\n extern tree java_mangle_vtable (struct obstack *, tree);\n+extern tree java_mangle_resource_name (const char *);\n extern void append_gpp_mangled_name (const char *, int);\n \n extern void add_predefined_file (tree);"}, {"sha": "c92be1c0693e70e03cdd08989027e8375a885e2a", "filename": "gcc/java/mangle.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e603aef40cb6ac7e1e900ab8d2d74ce71cb6595/gcc%2Fjava%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e603aef40cb6ac7e1e900ab8d2d74ce71cb6595/gcc%2Fjava%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fmangle.c?ref=3e603aef40cb6ac7e1e900ab8d2d74ce71cb6595", "patch": "@@ -796,6 +796,59 @@ compression_table_add (tree type)\n   TREE_VEC_ELT (compression_table, compression_next++) = type;\n }\n \n+/* Mangle an embedded resource file name.  \"_ZGr\" is the prefix.  A\n+   '_' is prepended to the name so that names starting with a digit\n+   can be demangled.  The length and then the resulting name itself\n+   are appended while escaping '$', '.', and '/' to: \"$$\", \"$_\", and\n+   \"$S\".  */\n+\n+tree\n+java_mangle_resource_name (const char *name)\n+{\n+  int len = strlen (name);\n+  char *buf = (char *) alloca (2 * len + 1);\n+  char *pos;\n+  const unsigned char *w1 = (const unsigned char *) name;\n+  const unsigned char *w2;\n+  const unsigned char *limit = w1 + len;\n+\n+  pos = buf;\n+\n+  init_mangling ();\n+  MANGLE_RAW_STRING (\"Gr\");\n+\n+  *pos++ = '_';\n+  while (w1 < limit)\n+    {\n+      int ch;\n+      w2 = w1;\n+      ch = UTF8_GET (w1, limit);\n+      gcc_assert (ch > 0);\n+      switch (ch)\n+\t{\n+\tcase '$':\n+\t  *pos++ = '$';\n+\t  *pos++ = '$';\n+\t  break;\n+\tcase '.':\n+\t  *pos++ = '$';\n+\t  *pos++ = '_';\n+\t  break;\n+\tcase '/':\n+\t  *pos++ = '$';\n+\t  *pos++ = 'S';\n+\t  break;\n+\tdefault:\n+\t  memcpy (pos, w2, w1 - w2);\n+\t  pos += w1 - w2;\n+\t  break;\n+\t}\n+    }\n+  append_gpp_mangled_name (buf, pos - buf);\n+\n+  return finish_mangling ();\n+}\n+\n /* Mangling initialization routine.  */\n \n static void"}, {"sha": "e0a403e7a0a78d70618ba91e86e3aca3f795863c", "filename": "gcc/java/resource.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e603aef40cb6ac7e1e900ab8d2d74ce71cb6595/gcc%2Fjava%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e603aef40cb6ac7e1e900ab8d2d74ce71cb6595/gcc%2Fjava%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fresource.c?ref=3e603aef40cb6ac7e1e900ab8d2d74ce71cb6595", "patch": "@@ -51,14 +51,10 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n /* A list of all the resources files.  */\n static GTY(()) tree resources = NULL;\n \n-/* Count of all the resources compiled in this invocation.  */\n-static int Jr_count = 0;\n-\n void\n compile_resource_data (const char *name, const char *buffer, int length)\n {\n   tree rtype, field = NULL_TREE, data_type, rinit, data, decl;\n-  char buf[60];\n \n   data_type = build_prim_array_type (unsigned_byte_type_node,\n \t\t\t\t     strlen (name) + length);\n@@ -79,11 +75,10 @@ compile_resource_data (const char *name, const char *buffer, int length)\n   TREE_CONSTANT (rinit) = 1;\n   TREE_INVARIANT (rinit) = 1;\n \n-  /* Generate a unique-enough identifier.  */\n-  sprintf (buf, \"_Jr%d\", ++Jr_count);\n-\n-  decl = build_decl (VAR_DECL, get_identifier (buf), rtype);\n+  decl = build_decl (VAR_DECL, java_mangle_resource_name (name), rtype);\n   TREE_STATIC (decl) = 1;\n+  TREE_PUBLIC (decl) = 1;\n+  java_hide_decl (decl);\n   DECL_ARTIFICIAL (decl) = 1;\n   DECL_IGNORED_P (decl) = 1;\n   TREE_READONLY (decl) = 1;"}]}