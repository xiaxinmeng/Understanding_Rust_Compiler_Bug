{"sha": "23db99134a4328ba276164414a11e099ce66aef1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNkYjk5MTM0YTQzMjhiYTI3NjE2NDQxNGExMWUwOTljZTY2YWVmMQ==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2009-10-30T22:37:47Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2009-10-30T22:37:47Z"}, "message": "PR libfortran/41219 Fix build warnings\n\nFrom-SVN: r153769", "tree": {"sha": "25af13e566ef745afd4c93c235445549fb0096a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25af13e566ef745afd4c93c235445549fb0096a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23db99134a4328ba276164414a11e099ce66aef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23db99134a4328ba276164414a11e099ce66aef1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23db99134a4328ba276164414a11e099ce66aef1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23db99134a4328ba276164414a11e099ce66aef1/comments", "author": null, "committer": null, "parents": [{"sha": "52669d592bce4316c5345c1853fbb64fc880650b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52669d592bce4316c5345c1853fbb64fc880650b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52669d592bce4316c5345c1853fbb64fc880650b"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "b749ea108b77024f501614c2ff81703fc4b6e196", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23db99134a4328ba276164414a11e099ce66aef1/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23db99134a4328ba276164414a11e099ce66aef1/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=23db99134a4328ba276164414a11e099ce66aef1", "patch": "@@ -1,3 +1,17 @@\n+2009-10-31  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/41219\n+\t* intrinsics/unpack_generic.c (unpack_internal): Remove unused\n+\targument from prototype.\n+\t(unpack1): Update unpack_internal call.\n+\t(unpack1_char): Likewise.\n+\t(unpack1_char4): Likewise.\n+\t(unpack0): Likewise.\n+\t(unpack0_char): Likewise.\n+\t(unpack0_char4): Likewise.\n+\t* intrinsics/iso_c_binding.c (c_f_pointer_u0): Get rid of\n+\tuninitialized variable warning.\n+\n 2009-10-29  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/41711"}, {"sha": "d0549b03dfa34783ce0a7a894c7312eaae14da41", "filename": "libgfortran/intrinsics/iso_c_binding.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23db99134a4328ba276164414a11e099ce66aef1/libgfortran%2Fintrinsics%2Fiso_c_binding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23db99134a4328ba276164414a11e099ce66aef1/libgfortran%2Fintrinsics%2Fiso_c_binding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fiso_c_binding.c?ref=23db99134a4328ba276164414a11e099ce66aef1", "patch": "@@ -94,11 +94,11 @@ ISO_C_BINDING_PREFIX (c_f_pointer_u0) (void *c_ptr_in,\n \n   if (shape != NULL)\n     {\n-      index_type source_stride;\n-      index_type size, str;\n+      index_type source_stride, size;\n+      index_type str = 1;\n       char *p;\n \n-      f_ptr_out->offset = 0;\n+      f_ptr_out->offset = str;\n       shapeSize = 0;\n       p = shape->data;\n       size = GFC_DESCRIPTOR_SIZE(shape);\n@@ -145,12 +145,7 @@ ISO_C_BINDING_PREFIX (c_f_pointer_u0) (void *c_ptr_in,\n \t    }\n \t  p += source_stride;\n \n-\t  if (i == 0)\n-\t    {\n-\t      str = 1;\n-\t      f_ptr_out->offset = str;\n-\t    }\n-\t  else\n+\t  if (i != 0)\n \t    {\n \t      str = str * GFC_DESCRIPTOR_EXTENT(f_ptr_out,i-1);\n \t      f_ptr_out->offset += str;"}, {"sha": "a457988095a24b74746488e1fa4fcc179a26ab48", "filename": "libgfortran/intrinsics/unpack_generic.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23db99134a4328ba276164414a11e099ce66aef1/libgfortran%2Fintrinsics%2Funpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23db99134a4328ba276164414a11e099ce66aef1/libgfortran%2Fintrinsics%2Funpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Funpack_generic.c?ref=23db99134a4328ba276164414a11e099ce66aef1", "patch": "@@ -57,7 +57,7 @@ unpack_bounds (gfc_array_char *ret, const gfc_array_char *vector,\n static void\n unpack_internal (gfc_array_char *ret, const gfc_array_char *vector,\n \t\t const gfc_array_l1 *mask, const gfc_array_char *field,\n-\t\t index_type size, index_type fsize)\n+\t\t index_type size)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -345,8 +345,7 @@ unpack1 (gfc_array_char *ret, const gfc_array_char *vector,\n #endif\n     }\n \n-  unpack_internal (ret, vector, mask, field, size,\n-\t\t   GFC_DESCRIPTOR_SIZE (field));\n+  unpack_internal (ret, vector, mask, field, size);\n }\n \n \n@@ -361,13 +360,13 @@ unpack1_char (gfc_array_char *ret,\n \t      GFC_INTEGER_4 ret_length __attribute__((unused)),\n \t      const gfc_array_char *vector, const gfc_array_l1 *mask,\n \t      const gfc_array_char *field, GFC_INTEGER_4 vector_length,\n-\t      GFC_INTEGER_4 field_length)\n+\t      GFC_INTEGER_4 field_length __attribute__((unused)))\n {\n \n   if (unlikely(compile_options.bounds_check))\n     unpack_bounds (ret, vector, mask, field);\n \n-  unpack_internal (ret, vector, mask, field, vector_length, field_length);\n+  unpack_internal (ret, vector, mask, field, vector_length);\n }\n \n \n@@ -382,15 +381,14 @@ unpack1_char4 (gfc_array_char *ret,\n \t       GFC_INTEGER_4 ret_length __attribute__((unused)),\n \t       const gfc_array_char *vector, const gfc_array_l1 *mask,\n \t       const gfc_array_char *field, GFC_INTEGER_4 vector_length,\n-\t       GFC_INTEGER_4 field_length)\n+\t       GFC_INTEGER_4 field_length __attribute__((unused)))\n {\n \n   if (unlikely(compile_options.bounds_check))\n     unpack_bounds (ret, vector, mask, field);\n \n   unpack_internal (ret, vector, mask, field,\n-\t\t   vector_length * sizeof (gfc_char4_t),\n-\t\t   field_length * sizeof (gfc_char4_t));\n+\t\t   vector_length * sizeof (gfc_char4_t));\n }\n \n \n@@ -543,7 +541,7 @@ unpack0 (gfc_array_char *ret, const gfc_array_char *vector,\n   memset (&tmp, 0, sizeof (tmp));\n   tmp.dtype = 0;\n   tmp.data = field;\n-  unpack_internal (ret, vector, mask, &tmp, GFC_DESCRIPTOR_SIZE (vector), 0);\n+  unpack_internal (ret, vector, mask, &tmp, GFC_DESCRIPTOR_SIZE (vector));\n }\n \n \n@@ -567,7 +565,7 @@ unpack0_char (gfc_array_char *ret,\n   memset (&tmp, 0, sizeof (tmp));\n   tmp.dtype = 0;\n   tmp.data = field;\n-  unpack_internal (ret, vector, mask, &tmp, vector_length, 0);\n+  unpack_internal (ret, vector, mask, &tmp, vector_length);\n }\n \n \n@@ -592,5 +590,5 @@ unpack0_char4 (gfc_array_char *ret,\n   tmp.dtype = 0;\n   tmp.data = field;\n   unpack_internal (ret, vector, mask, &tmp,\n-\t\t   vector_length * sizeof (gfc_char4_t), 0);\n+\t\t   vector_length * sizeof (gfc_char4_t));\n }"}]}