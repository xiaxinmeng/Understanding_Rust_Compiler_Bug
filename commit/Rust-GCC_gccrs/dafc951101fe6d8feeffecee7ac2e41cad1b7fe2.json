{"sha": "dafc951101fe6d8feeffecee7ac2e41cad1b7fe2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFmYzk1MTEwMWZlNmQ4ZmVlZmZlY2VlN2FjMmU0MWNhZDFiN2ZlMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-04-20T13:11:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-04-20T13:11:06Z"}, "message": "re PR rtl-optimization/48695 (Runtime with an array of std::vectors)\n\n2011-04-20  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/48695\n\t* tree-ssa-alias.c (aliasing_component_refs_p): Compute base\n\tobjects and types here.  Adjust for their offset before\n\tcomparing.\n\n\t* g++.dg/torture/pr48695.C: New testcase.\n\nFrom-SVN: r172768", "tree": {"sha": "b3a25e98ef6189242b112ca0b310ad489a0b856c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3a25e98ef6189242b112ca0b310ad489a0b856c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dafc951101fe6d8feeffecee7ac2e41cad1b7fe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dafc951101fe6d8feeffecee7ac2e41cad1b7fe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dafc951101fe6d8feeffecee7ac2e41cad1b7fe2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dafc951101fe6d8feeffecee7ac2e41cad1b7fe2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d72dd5f9ec19aa2f55669c533eac7042e09b93ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d72dd5f9ec19aa2f55669c533eac7042e09b93ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d72dd5f9ec19aa2f55669c533eac7042e09b93ea"}], "stats": {"total": 79, "additions": 72, "deletions": 7}, "files": [{"sha": "da88769f6ca2b80b1f7b84ffccecfafdfde34497", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafc951101fe6d8feeffecee7ac2e41cad1b7fe2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafc951101fe6d8feeffecee7ac2e41cad1b7fe2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dafc951101fe6d8feeffecee7ac2e41cad1b7fe2", "patch": "@@ -1,3 +1,10 @@\n+2011-04-20  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/48695\n+\t* tree-ssa-alias.c (aliasing_component_refs_p): Compute base\n+\tobjects and types here.  Adjust for their offset before\n+\tcomparing.\n+\n 2011-04-20  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* doc/md.texi, optabs.h, genopinit.c, internal-fn.def"}, {"sha": "a4b42d9b91b1b9c8a2f6c3ca7650a434a3812c17", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafc951101fe6d8feeffecee7ac2e41cad1b7fe2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafc951101fe6d8feeffecee7ac2e41cad1b7fe2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dafc951101fe6d8feeffecee7ac2e41cad1b7fe2", "patch": "@@ -1,3 +1,8 @@\n+2011-04-20  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/48695\n+\t* g++.dg/torture/pr48695.C: New testcase.\n+\n 2011-04-20  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* gcc.dg/pr42629.c: Add dg-require-effective-target int32plus"}, {"sha": "44e6c771dbaae4c0d9a23b9ca981111952c685ef", "filename": "gcc/testsuite/g++.dg/torture/pr48695.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafc951101fe6d8feeffecee7ac2e41cad1b7fe2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr48695.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafc951101fe6d8feeffecee7ac2e41cad1b7fe2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr48695.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr48695.C?ref=dafc951101fe6d8feeffecee7ac2e41cad1b7fe2", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do run }\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+inline void *operator new (size_t, void *__p) throw() { return __p; }\n+\n+struct _Vector_impl\n+{\n+  int *_M_start;\n+  int *_M_finish;\n+  _Vector_impl () :_M_start (0), _M_finish (0) {}\n+};\n+\n+struct vector\n+{\n+  _Vector_impl _M_impl;\n+  int *_M_allocate (size_t __n)\n+  {\n+    return __n != 0 ? new int[__n] : 0;\n+  }\n+  void push_back ()\n+  {\n+    new (this->_M_impl._M_finish) int ();\n+    this->_M_impl._M_finish =\n+      this->_M_allocate (this->_M_impl._M_finish - this->_M_impl._M_start) + 1;\n+  }\n+};\n+\n+int\n+main ()\n+{\n+  for (int i = 0; i <= 1; i++)\n+    for (int j = 0; j <= 1; j++)\n+      {\n+\tvector a[2];\n+\ta[i].push_back ();\n+      }\n+}"}, {"sha": "a77c803b98c08ed9fafd2f3fffbde81732aad227", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafc951101fe6d8feeffecee7ac2e41cad1b7fe2/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafc951101fe6d8feeffecee7ac2e41cad1b7fe2/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=dafc951101fe6d8feeffecee7ac2e41cad1b7fe2", "patch": "@@ -593,11 +593,11 @@ same_type_for_tbaa (tree type1, tree type2)\n    are the respective alias sets.  */\n \n static bool\n-aliasing_component_refs_p (tree ref1, tree type1,\n+aliasing_component_refs_p (tree ref1,\n \t\t\t   alias_set_type ref1_alias_set,\n \t\t\t   alias_set_type base1_alias_set,\n \t\t\t   HOST_WIDE_INT offset1, HOST_WIDE_INT max_size1,\n-\t\t\t   tree ref2, tree type2,\n+\t\t\t   tree ref2,\n \t\t\t   alias_set_type ref2_alias_set,\n \t\t\t   alias_set_type base2_alias_set,\n \t\t\t   HOST_WIDE_INT offset2, HOST_WIDE_INT max_size2,\n@@ -609,9 +609,21 @@ aliasing_component_refs_p (tree ref1, tree type1,\n        struct A { int i; int j; } *q;\n        struct B { struct A a; int k; } *p;\n      disambiguating q->i and p->a.j.  */\n+  tree base1, base2;\n+  tree type1, type2;\n   tree *refp;\n   int same_p;\n \n+  /* Choose bases and base types to search for.  */\n+  base1 = ref1;\n+  while (handled_component_p (base1))\n+    base1 = TREE_OPERAND (base1, 0);\n+  type1 = TREE_TYPE (base1);\n+  base2 = ref2;\n+  while (handled_component_p (base2))\n+    base2 = TREE_OPERAND (base2, 0);\n+  type2 = TREE_TYPE (base2);\n+\n   /* Now search for the type1 in the access path of ref2.  This\n      would be a common base for doing offset based disambiguation on.  */\n   refp = &ref2;\n@@ -627,6 +639,8 @@ aliasing_component_refs_p (tree ref1, tree type1,\n       HOST_WIDE_INT offadj, sztmp, msztmp;\n       get_ref_base_and_extent (*refp, &offadj, &sztmp, &msztmp);\n       offset2 -= offadj;\n+      get_ref_base_and_extent (base1, &offadj, &sztmp, &msztmp);\n+      offset1 -= offadj;\n       return ranges_overlap_p (offset1, max_size1, offset2, max_size2);\n     }\n   /* If we didn't find a common base, try the other way around.  */\n@@ -643,6 +657,8 @@ aliasing_component_refs_p (tree ref1, tree type1,\n       HOST_WIDE_INT offadj, sztmp, msztmp;\n       get_ref_base_and_extent (*refp, &offadj, &sztmp, &msztmp);\n       offset1 -= offadj;\n+      get_ref_base_and_extent (base2, &offadj, &sztmp, &msztmp);\n+      offset2 -= offadj;\n       return ranges_overlap_p (offset1, max_size1, offset2, max_size2);\n     }\n \n@@ -804,11 +820,10 @@ indirect_ref_may_alias_decl_p (tree ref1 ATTRIBUTE_UNUSED, tree base1,\n       && TREE_CODE (base1) != TARGET_MEM_REF\n       && (TREE_CODE (base1) != MEM_REF\n \t  || same_type_for_tbaa (TREE_TYPE (base1), TREE_TYPE (ptrtype1)) == 1))\n-    return aliasing_component_refs_p (ref1, TREE_TYPE (ptrtype1),\n+    return aliasing_component_refs_p (ref1,\n \t\t\t\t      ref1_alias_set, base1_alias_set,\n \t\t\t\t      offset1, max_size1,\n-\t\t\t\t      ref2, TREE_TYPE\n-\t\t\t\t              (reference_alias_ptr_type (ref2)),\n+\t\t\t\t      ref2,\n \t\t\t\t      ref2_alias_set, base2_alias_set,\n \t\t\t\t      offset2, max_size2, true);\n \n@@ -951,10 +966,10 @@ indirect_refs_may_alias_p (tree ref1 ATTRIBUTE_UNUSED, tree base1,\n \t  || same_type_for_tbaa (TREE_TYPE (base1), TREE_TYPE (ptrtype1)) == 1)\n       && (TREE_CODE (base2) != MEM_REF\n \t  || same_type_for_tbaa (TREE_TYPE (base2), TREE_TYPE (ptrtype2)) == 1))\n-    return aliasing_component_refs_p (ref1, TREE_TYPE (ptrtype1),\n+    return aliasing_component_refs_p (ref1,\n \t\t\t\t      ref1_alias_set, base1_alias_set,\n \t\t\t\t      offset1, max_size1,\n-\t\t\t\t      ref2, TREE_TYPE (ptrtype2),\n+\t\t\t\t      ref2,\n \t\t\t\t      ref2_alias_set, base2_alias_set,\n \t\t\t\t      offset2, max_size2, false);\n "}]}