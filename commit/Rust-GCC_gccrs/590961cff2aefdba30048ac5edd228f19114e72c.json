{"sha": "590961cff2aefdba30048ac5edd228f19114e72c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkwOTYxY2ZmMmFlZmRiYTMwMDQ4YWM1ZWRkMjI4ZjE5MTE0ZTcyYw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-03-24T13:57:19Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-03-24T13:57:19Z"}, "message": "S/390: movdf improvements\n\nThis patch add the vector load element from immediate instruction to the\nmovdf/dd pattern for loading a FP zero and it removes the vector\ninstructions from the mov<mode>_64 pattern. These were pointless in\nthere because z13 support implies DFP support so these instructions will\nalways be matched in the mov<mode>_64dfp pattern instead.\n\nRegression tested on s390x\n\ngcc/ChangeLog:\n\n2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/s390.md (\"mov<mode>_64dfp\" DD_DF): Use vleig for loading a\n\tFP zero.\n\t(\"*mov<mode>_64\" DD_DF): Remove the vector instructions. These\n\twill anyway by matched by mov<mode>_64dfp.\n\nFrom-SVN: r246448", "tree": {"sha": "f7ddeb2d33ab5d8a1d7a4d21340f2de453a4fd7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7ddeb2d33ab5d8a1d7a4d21340f2de453a4fd7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/590961cff2aefdba30048ac5edd228f19114e72c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/590961cff2aefdba30048ac5edd228f19114e72c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/590961cff2aefdba30048ac5edd228f19114e72c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/590961cff2aefdba30048ac5edd228f19114e72c/comments", "author": null, "committer": null, "parents": [{"sha": "298f464762bb4b6c07c5e6ce5a94654bafee23c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298f464762bb4b6c07c5e6ce5a94654bafee23c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/298f464762bb4b6c07c5e6ce5a94654bafee23c0"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "bf69f7a4d8dd3c77850c9212ad2663963fe16176", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/590961cff2aefdba30048ac5edd228f19114e72c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/590961cff2aefdba30048ac5edd228f19114e72c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=590961cff2aefdba30048ac5edd228f19114e72c", "patch": "@@ -1,3 +1,10 @@\n+2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.md (\"mov<mode>_64dfp\" DD_DF): Use vleig for loading a\n+\tFP zero.\n+\t(\"*mov<mode>_64\" DD_DF): Remove the vector instructions. These\n+\twill anyway by matched by mov<mode>_64dfp.\n+\n 2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/s390.md (\"mov<mode>\" SD_SF): Change vleg/vsteg to"}, {"sha": "554fb37a1c6e463cc6ea116b56427d452edd1f6a", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/590961cff2aefdba30048ac5edd228f19114e72c/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/590961cff2aefdba30048ac5edd228f19114e72c/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=590961cff2aefdba30048ac5edd228f19114e72c", "patch": "@@ -2460,9 +2460,9 @@\n \n (define_insn \"*mov<mode>_64dfp\"\n   [(set (match_operand:DD_DF 0 \"nonimmediate_operand\"\n-\t\t\t       \"=f,f,f,d,f,f,R,T,d,d,d,d,b,T,v,v,d,v,R\")\n+\t\t\t       \"=f,f,f,d,f,f,R,T,d,d,d,d,b,T,v,v,v,d,v,R\")\n         (match_operand:DD_DF 1 \"general_operand\"\n-\t\t\t       \" G,f,d,f,R,T,f,f,G,d,b,T,d,d,v,d,v,R,v\"))]\n+\t\t\t       \" G,f,d,f,R,T,f,f,G,d,b,T,d,d,v,G,d,v,R,v\"))]\n   \"TARGET_DFP\"\n   \"@\n    lzdr\\t%0\n@@ -2480,19 +2480,20 @@\n    stgrl\\t%1,%0\n    stg\\t%1,%0\n    vlr\\t%v0,%v1\n+   vleig\\t%v0,0,0\n    vlvgg\\t%v0,%1,0\n    vlgvg\\t%0,%v1,0\n    vleg\\t%0,%1,0\n    vsteg\\t%1,%0,0\"\n-  [(set_attr \"op_type\" \"RRE,RR,RRE,RRE,RX,RXY,RX,RXY,RI,RRE,RIL,RXY,RIL,RXY,VRR,VRS,VRS,VRX,VRX\")\n+  [(set_attr \"op_type\" \"RRE,RR,RRE,RRE,RX,RXY,RX,RXY,RI,RRE,RIL,RXY,RIL,RXY,VRR,VRI,VRS,VRS,VRX,VRX\")\n    (set_attr \"type\" \"fsimpdf,floaddf,floaddf,floaddf,floaddf,floaddf,\n-                     fstoredf,fstoredf,*,lr,load,load,store,store,*,*,*,load,store\")\n-   (set_attr \"z10prop\" \"*,*,*,*,*,*,*,*,z10_fwd_A1,z10_fr_E1,z10_fwd_A3,z10_fwd_A3,z10_rec,z10_rec,*,*,*,*,*\")\n-   (set_attr \"cpu_facility\" \"z196,*,*,*,*,longdisp,*,longdisp,*,*,z10,*,z10,*,vx,vx,vx,vx,vx\")])\n+                     fstoredf,fstoredf,*,lr,load,load,store,store,*,*,*,*,load,store\")\n+   (set_attr \"z10prop\" \"*,*,*,*,*,*,*,*,z10_fwd_A1,z10_fr_E1,z10_fwd_A3,z10_fwd_A3,z10_rec,z10_rec,*,*,*,*,*,*\")\n+   (set_attr \"cpu_facility\" \"z196,*,*,*,*,longdisp,*,longdisp,*,*,z10,*,z10,*,vx,vx,vx,vx,vx,vx\")])\n \n (define_insn \"*mov<mode>_64\"\n-  [(set (match_operand:DD_DF 0 \"nonimmediate_operand\" \"=f,f,f,f,R,T,d,d,d,d,b,T,v,v,R\")\n-        (match_operand:DD_DF 1 \"general_operand\"      \" G,f,R,T,f,f,G,d,b,T,d,d,v,R,v\"))]\n+  [(set (match_operand:DD_DF 0 \"nonimmediate_operand\" \"=f,f,f,f,R,T,d,d,d,d,b,T\")\n+        (match_operand:DD_DF 1 \"general_operand\"      \" G,f,R,T,f,f,G,d,b,T,d,d\"))]\n   \"TARGET_ZARCH\"\n   \"@\n    lzdr\\t%0\n@@ -2506,15 +2507,12 @@\n    lgrl\\t%0,%1\n    lg\\t%0,%1\n    stgrl\\t%1,%0\n-   stg\\t%1,%0\n-   vlr\\t%v0,%v1\n-   vleg\\t%v0,%1,0\n-   vsteg\\t%v1,%0,0\"\n-  [(set_attr \"op_type\" \"RRE,RR,RX,RXY,RX,RXY,RI,RRE,RIL,RXY,RIL,RXY,VRR,VRX,VRX\")\n+   stg\\t%1,%0\"\n+  [(set_attr \"op_type\" \"RRE,RR,RX,RXY,RX,RXY,RI,RRE,RIL,RXY,RIL,RXY\")\n    (set_attr \"type\"    \"fsimpdf,fload<mode>,fload<mode>,fload<mode>,\n-                        fstore<mode>,fstore<mode>,*,lr,load,load,store,store,*,load,store\")\n-   (set_attr \"z10prop\" \"*,*,*,*,*,*,z10_fwd_A1,z10_fr_E1,z10_fwd_A3,z10_fwd_A3,z10_rec,z10_rec,*,*,*\")\n-   (set_attr \"cpu_facility\" \"z196,*,*,longdisp,*,longdisp,*,*,z10,*,z10,*,vx,vx,vx\")])\n+                        fstore<mode>,fstore<mode>,*,lr,load,load,store,store\")\n+   (set_attr \"z10prop\" \"*,*,*,*,*,*,z10_fwd_A1,z10_fr_E1,z10_fwd_A3,z10_fwd_A3,z10_rec,z10_rec\")\n+   (set_attr \"cpu_facility\" \"z196,*,*,longdisp,*,longdisp,*,*,z10,*,z10,*\")])\n \n (define_insn \"*mov<mode>_31\"\n   [(set (match_operand:DD_DF 0 \"nonimmediate_operand\""}]}