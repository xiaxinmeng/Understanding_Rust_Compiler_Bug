{"sha": "4991e20923b658ce9fbdf5621cab39f71b98fbc2", "node_id": "C_kwDOANBUbNoAKDQ5OTFlMjA5MjNiNjU4Y2U5ZmJkZjU2MjFjYWIzOWY3MWI5OGZiYzI", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-08-13T13:52:45Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-08-13T13:52:45Z"}, "message": "Move V1TI shift/rotate lowering from expand to pre-reload split on x86_64.\n\nThis patch moves the lowering of 128-bit V1TImode shifts and rotations by\nconstant bit counts to sequences of SSE operations from the RTL expansion\npass to the pre-reload split pass.  Postponing this splitting of shifts\nand rotates enables (will enable) the TImode equivalents of these operations/\ninstructions to be considered as candidates by the (TImode) STV pass.\nTechnically, this patch changes the existing expanders to continue to\nlower shifts by variable amounts, but constant operands become RTL\ninstructions, specified by define_insn_and_split that are triggered by\nx86_pre_reload_split.  The one minor complication is that logical shifts\nby multiples of eight, don't get split, but are handled by existing insn\npatterns, such as sse2_ashlv1ti3 and sse2_lshrv1ti3.  There should be no\nchanges in generated code with this patch, which just adjusts the pass\nin which transformations get applied.\n\n2022-08-13  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog\n\t* config/i386/predicates.md (const_0_to_255_not_mul_8_operand):\n\tNew predicate for values between 0/1 and 255, not multiples of 8.\n\t* config/i386/sse.md (ashlv1ti3): Delay lowering of logical left\n\tshifts by constant bit counts.\n\t(*ashlvti3_internal): New define_insn_and_split that lowers\n\tlogical left shifts by constant bit counts, that aren't multiples\n\tof 8, before reload.\n\t(lshrv1ti3): Delay lowering of logical right shifts by constant.\n\t(*lshrv1ti3_internal): New define_insn_and_split that lowers\n\tlogical right shifts by constant bit counts, that aren't multiples\n\tof 8, before reload.\n\t(ashrv1ti3):: Delay lowering of arithmetic right shifts by\n\tconstant bit counts.\n\t(*ashrv1ti3_internal): New define_insn_and_split that lowers\n\tarithmetic right shifts by constant bit counts before reload.\n\t(rotlv1ti3): Delay lowering of rotate left by constant.\n\t(*rotlv1ti3_internal): New define_insn_and_split that lowers\n\trotate left by constant bits counts before reload.\n\t(rotrv1ti3): Delay lowering of rotate right by constant.\n\t(*rotrv1ti3_internal): New define_insn_and_split that lowers\n\trotate right by constant bits counts before reload.", "tree": {"sha": "d18dbf8cb46954502f3147339c29e2b769445571", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d18dbf8cb46954502f3147339c29e2b769445571"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4991e20923b658ce9fbdf5621cab39f71b98fbc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4991e20923b658ce9fbdf5621cab39f71b98fbc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4991e20923b658ce9fbdf5621cab39f71b98fbc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4991e20923b658ce9fbdf5621cab39f71b98fbc2/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21d52d11df82e55abfdde3c5c49fbcc103d83861", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21d52d11df82e55abfdde3c5c49fbcc103d83861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21d52d11df82e55abfdde3c5c49fbcc103d83861"}], "stats": {"total": 103, "additions": 101, "deletions": 2}, "files": [{"sha": "4f16bb748b550a9bb7b3ca6f0030eeb0d7fde8f6", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4991e20923b658ce9fbdf5621cab39f71b98fbc2/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4991e20923b658ce9fbdf5621cab39f71b98fbc2/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=4991e20923b658ce9fbdf5621cab39f71b98fbc2", "patch": "@@ -931,6 +931,14 @@\n   return val <= 255*8 && val % 8 == 0;\n })\n \n+;; Match 1 to 255 except multiples of 8\n+(define_predicate \"const_0_to_255_not_mul_8_operand\"\n+  (match_code \"const_int\")\n+{\n+  unsigned HOST_WIDE_INT val = INTVAL (op);\n+  return val <= 255 && val % 8 != 0;\n+})\n+\n ;; Return true if OP is CONST_INT >= 1 and <= 31 (a valid operand\n ;; for shift & compare patterns, as shifting by 0 does not change flags).\n (define_predicate \"const_1_to_31_operand\""}, {"sha": "b23f07e08c60564c46761b6fd1683a6fda3ec425", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 93, "deletions": 2, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4991e20923b658ce9fbdf5621cab39f71b98fbc2/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4991e20923b658ce9fbdf5621cab39f71b98fbc2/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=4991e20923b658ce9fbdf5621cab39f71b98fbc2", "patch": "@@ -15994,11 +15994,29 @@\n })\n \n (define_expand \"ashlv1ti3\"\n+  [(set (match_operand:V1TI 0 \"register_operand\")\n+        (ashift:V1TI\n+         (match_operand:V1TI 1 \"register_operand\")\n+         (match_operand:QI 2 \"general_operand\")))]\n+  \"TARGET_SSE2 && TARGET_64BIT\"\n+{\n+  if (!CONST_INT_P (operands[2]))\n+    {\n+      ix86_expand_v1ti_shift (ASHIFT, operands);\n+      DONE;\n+    }\n+})\n+\n+(define_insn_and_split \"*ashlv1ti3_internal\"\n   [(set (match_operand:V1TI 0 \"register_operand\")\n \t(ashift:V1TI\n \t (match_operand:V1TI 1 \"register_operand\")\n-\t (match_operand:QI 2 \"general_operand\")))]\n-  \"TARGET_SSE2 && TARGET_64BIT\"\n+\t (match_operand:SI 2 \"const_0_to_255_not_mul_8_operand\")))]\n+  \"TARGET_SSE2 && TARGET_64BIT\n+   && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n {\n   ix86_expand_v1ti_shift (ASHIFT, operands);\n   DONE;\n@@ -16010,6 +16028,24 @@\n \t (match_operand:V1TI 1 \"register_operand\")\n \t (match_operand:QI 2 \"general_operand\")))]\n   \"TARGET_SSE2 && TARGET_64BIT\"\n+{\n+  if (!CONST_INT_P (operands[2]))\n+    {\n+      ix86_expand_v1ti_shift (LSHIFTRT, operands);\n+      DONE;\n+    }\n+})\n+\n+(define_insn_and_split \"*lshrv1ti3_internal\"\n+  [(set (match_operand:V1TI 0 \"register_operand\")\n+\t(lshiftrt:V1TI\n+\t (match_operand:V1TI 1 \"register_operand\")\n+\t (match_operand:SI 2 \"const_0_to_255_not_mul_8_operand\")))]\n+  \"TARGET_SSE2 && TARGET_64BIT\n+   && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n {\n   ix86_expand_v1ti_shift (LSHIFTRT, operands);\n   DONE;\n@@ -16021,6 +16057,25 @@\n \t (match_operand:V1TI 1 \"register_operand\")\n \t (match_operand:QI 2 \"general_operand\")))]\n   \"TARGET_SSE2 && TARGET_64BIT\"\n+{\n+  if (!CONST_INT_P (operands[2]))\n+    {\n+      ix86_expand_v1ti_ashiftrt (operands);\n+      DONE;\n+    }\n+})\n+\n+\n+(define_insn_and_split \"*ashrv1ti3_internal\"\n+  [(set (match_operand:V1TI 0 \"register_operand\")\n+\t(ashiftrt:V1TI\n+\t (match_operand:V1TI 1 \"register_operand\")\n+\t (match_operand:SI 2 \"const_0_to_255_operand\")))]\n+  \"TARGET_SSE2 && TARGET_64BIT\n+   && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n {\n   ix86_expand_v1ti_ashiftrt (operands);\n   DONE;\n@@ -16032,6 +16087,24 @@\n \t (match_operand:V1TI 1 \"register_operand\")\n \t (match_operand:QI 2 \"general_operand\")))]\n   \"TARGET_SSE2 && TARGET_64BIT\"\n+{\n+  if (!CONST_INT_P (operands[2]))\n+    {\n+      ix86_expand_v1ti_rotate (ROTATE, operands);\n+      DONE;\n+    }\n+})\n+\n+(define_insn_and_split \"*rotlv1ti3_internal\"\n+  [(set (match_operand:V1TI 0 \"register_operand\")\n+\t(rotate:V1TI\n+\t (match_operand:V1TI 1 \"register_operand\")\n+\t (match_operand:SI 2 \"const_0_to_255_operand\")))]\n+  \"TARGET_SSE2 && TARGET_64BIT\n+   && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n {\n   ix86_expand_v1ti_rotate (ROTATE, operands);\n   DONE;\n@@ -16043,6 +16116,24 @@\n \t (match_operand:V1TI 1 \"register_operand\")\n \t (match_operand:QI 2 \"general_operand\")))]\n   \"TARGET_SSE2 && TARGET_64BIT\"\n+{\n+  if (!CONST_INT_P (operands[2]))\n+    {\n+      ix86_expand_v1ti_rotate (ROTATERT, operands);\n+      DONE;\n+    }\n+})\n+\n+(define_insn_and_split \"*rotrv1ti3_internal\"\n+  [(set (match_operand:V1TI 0 \"register_operand\")\n+\t(rotatert:V1TI\n+\t (match_operand:V1TI 1 \"register_operand\")\n+\t (match_operand:SI 2 \"const_0_to_255_operand\")))]\n+  \"TARGET_SSE2 && TARGET_64BIT\n+   && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n {\n   ix86_expand_v1ti_rotate (ROTATERT, operands);\n   DONE;"}]}