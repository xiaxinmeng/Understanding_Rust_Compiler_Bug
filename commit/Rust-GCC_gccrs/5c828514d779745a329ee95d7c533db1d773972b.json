{"sha": "5c828514d779745a329ee95d7c533db1d773972b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM4Mjg1MTRkNzc5NzQ1YTMyOWVlOTVkN2M1MzNkYjFkNzczOTcyYg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-11T11:50:52Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-11T11:54:25Z"}, "message": "Keep track of canonical paths in the mappings\n\nWe need to be able to lookup the canonical path for items to persue\ncorrect naming and name mangling in code generation.\n\nWe allow for duplicates node-ids in the mapper so long as the paths are\nequal or assert and ignore the new path so long as it is shorter than the\nexisting one.\n\nThis is the case because we are inserting relative paths for names which\nwill be shorter that the fully qualified path but also have the same NodeId", "tree": {"sha": "a7756b9e7d369a3c90e2450d572074d9fd241e5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7756b9e7d369a3c90e2450d572074d9fd241e5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c828514d779745a329ee95d7c533db1d773972b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c828514d779745a329ee95d7c533db1d773972b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c828514d779745a329ee95d7c533db1d773972b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c828514d779745a329ee95d7c533db1d773972b/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06bfea60dd9bb2d1ecabc5a898f321a9114f6257", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06bfea60dd9bb2d1ecabc5a898f321a9114f6257", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06bfea60dd9bb2d1ecabc5a898f321a9114f6257"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "1b26a46ff85d51af63728cec556e38db3eb57a18", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c828514d779745a329ee95d7c533db1d773972b/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c828514d779745a329ee95d7c533db1d773972b/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=5c828514d779745a329ee95d7c533db1d773972b", "patch": "@@ -62,6 +62,9 @@ class Rib\n     reverse_mappings.insert (std::pair<NodeId, CanonicalPath> (id, path));\n     decls_within_rib.insert (std::pair<NodeId, Location> (id, locus));\n     references[id] = {};\n+\n+    auto mappings = Analysis::Mappings::get ();\n+    mappings->insert_canonical_path (mappings->get_current_crate (), id, path);\n   }\n \n   bool lookup_name (const CanonicalPath &ident, NodeId *id)"}, {"sha": "d6ba90da99532cba1f29b90590914bd5742c6e64", "filename": "gcc/rust/util/rust-canonical-path.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c828514d779745a329ee95d7c533db1d773972b/gcc%2Frust%2Futil%2Frust-canonical-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c828514d779745a329ee95d7c533db1d773972b/gcc%2Frust%2Futil%2Frust-canonical-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-canonical-path.h?ref=5c828514d779745a329ee95d7c533db1d773972b", "patch": "@@ -110,17 +110,21 @@ class CanonicalPath\n       }\n   }\n \n+  size_t size () const { return segs.size (); }\n+\n   NodeId get_id () const\n   {\n     rust_assert (!segs.empty ());\n     return segs.back ().first;\n   }\n \n-  bool operator== (const CanonicalPath &b) const\n+  bool is_equal (const CanonicalPath &b) const\n   {\n     return get ().compare (b.get ()) == 0;\n   }\n \n+  bool operator== (const CanonicalPath &b) const { return is_equal (b); }\n+\n   bool operator< (const CanonicalPath &b) const { return get () < b.get (); }\n \n private:"}, {"sha": "5c839b0af586712ddf181247b61a79eb608591b1", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c828514d779745a329ee95d7c533db1d773972b/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c828514d779745a329ee95d7c533db1d773972b/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=5c828514d779745a329ee95d7c533db1d773972b", "patch": "@@ -22,6 +22,7 @@\n #include \"rust-system.h\"\n #include \"rust-location.h\"\n #include \"rust-mapping-common.h\"\n+#include \"rust-canonical-path.h\"\n \n #include \"rust-ast-full-decls.h\"\n #include \"rust-hir-full-decls.h\"\n@@ -227,6 +228,42 @@ class Mappings\n     return lookup->second;\n   }\n \n+  void insert_canonical_path (CrateNum crate, NodeId id,\n+\t\t\t      const Resolver::CanonicalPath path)\n+  {\n+    const Resolver::CanonicalPath *p = nullptr;\n+    if (lookup_canonical_path (crate, id, &p))\n+      {\n+\t// if we have already stored a canonical path this is ok so long as this\n+\t// new path is equal or is smaller that the existing one but in that\n+\t// case we ignore it.\n+\tif (p->is_equal (path))\n+\t  return;\n+\telse\n+\t  {\n+\t    rust_assert (p->size () >= path.size ());\n+\t    return;\n+\t  }\n+      }\n+\n+    paths[crate].emplace (id, std::move (path));\n+  }\n+\n+  bool lookup_canonical_path (CrateNum crate, NodeId id,\n+\t\t\t      const Resolver::CanonicalPath **path)\n+  {\n+    auto it = paths.find (crate);\n+    if (it == paths.end ())\n+      return false;\n+\n+    auto iy = it->second.find (id);\n+    if (iy == it->second.end ())\n+      return false;\n+\n+    *path = &iy->second;\n+    return true;\n+  }\n+\n private:\n   Mappings ();\n \n@@ -263,6 +300,9 @@ class Mappings\n     hirGenericParamMappings;\n   std::map<HirId, HIR::Trait *> hirTraitItemsToTraitMappings;\n \n+  // canonical paths\n+  std::map<CrateNum, std::map<NodeId, const Resolver::CanonicalPath> > paths;\n+\n   // location info\n   std::map<CrateNum, std::map<NodeId, Location> > locations;\n "}]}