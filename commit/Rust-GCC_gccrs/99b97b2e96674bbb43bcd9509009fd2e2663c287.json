{"sha": "99b97b2e96674bbb43bcd9509009fd2e2663c287", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTliOTdiMmU5NjY3NGJiYjQzYmNkOTUwOTAwOWZkMmUyNjYzYzI4Nw==", "commit": {"author": {"name": "Doug Rupp", "email": "rupp@adacore.com", "date": "2005-06-16T08:30:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T08:30:18Z"}, "message": "adaint.c (__gnat_to_canonical_file_spec): Check for error returns in call to decc$translate_vms.\n\n2005-06-14  Doug Rupp  <rupp@adacore.com>\n\t    Pascal Obry  <obry@adacore.com>\n\n\t* adaint.c (__gnat_to_canonical_file_spec): Check for error returns in\n\tcall to decc$translate_vms.\n\t(__gnat_locate_regular_file): Check if the path_val contains quotes. We\n\tneed to remove those quotes before catenating the filename.\n\t(__gnat_locate_exec_on_path): improvements to the Win32 section:\n\t* avoid allocating the memory twice for better efficiency;\n\t* allocate 32K buffer for environment expansion as suggested by MSDN;\n\t* prepend \".;\" to the path so that current directory is searched too.\n\nFrom-SVN: r101020", "tree": {"sha": "844344f2c331434b0910c59cb402352ca3d232dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/844344f2c331434b0910c59cb402352ca3d232dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99b97b2e96674bbb43bcd9509009fd2e2663c287", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b97b2e96674bbb43bcd9509009fd2e2663c287", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99b97b2e96674bbb43bcd9509009fd2e2663c287", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b97b2e96674bbb43bcd9509009fd2e2663c287/comments", "author": {"login": "Cementitious", "id": 115579865, "node_id": "U_kgDOBuOb2Q", "avatar_url": "https://avatars.githubusercontent.com/u/115579865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cementitious", "html_url": "https://github.com/Cementitious", "followers_url": "https://api.github.com/users/Cementitious/followers", "following_url": "https://api.github.com/users/Cementitious/following{/other_user}", "gists_url": "https://api.github.com/users/Cementitious/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cementitious/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cementitious/subscriptions", "organizations_url": "https://api.github.com/users/Cementitious/orgs", "repos_url": "https://api.github.com/users/Cementitious/repos", "events_url": "https://api.github.com/users/Cementitious/events{/privacy}", "received_events_url": "https://api.github.com/users/Cementitious/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e813ab6c01a9a4628f991c7a91719e4988c590c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e813ab6c01a9a4628f991c7a91719e4988c590c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e813ab6c01a9a4628f991c7a91719e4988c590c"}], "stats": {"total": 74, "additions": 55, "deletions": 19}, "files": [{"sha": "51c01ab901eb54d63b41029e0258dfeceab08828", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 55, "deletions": 19, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b97b2e96674bbb43bcd9509009fd2e2663c287/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b97b2e96674bbb43bcd9509009fd2e2663c287/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=99b97b2e96674bbb43bcd9509009fd2e2663c287", "patch": "@@ -1939,13 +1939,30 @@ char *\n __gnat_locate_regular_file (char *file_name, char *path_val)\n {\n   char *ptr;\n-  int absolute = __gnat_is_absolute_path (file_name, strlen (file_name));\n+  char *file_path = alloca (strlen (file_name) + 1);\n+  int absolute;\n+\n+  /* Remove quotes around file_name if present */\n+\n+  ptr = file_name;\n+  if (*ptr == '\"')\n+    ptr++;\n+\n+  strcpy (file_path, ptr);\n+\n+  ptr = file_path + strlen (file_path) - 1;\n+\n+  if (*ptr == '\"')\n+    *ptr = '\\0';\n \n   /* Handle absolute pathnames.  */\n+\n+  absolute = __gnat_is_absolute_path (file_path, strlen (file_name));\n+\n   if (absolute)\n     {\n-     if (__gnat_is_regular_file (file_name))\n-       return xstrdup (file_name);\n+     if (__gnat_is_regular_file (file_path))\n+       return xstrdup (file_path);\n \n       return 0;\n     }\n@@ -1976,10 +1993,21 @@ __gnat_locate_regular_file (char *file_name, char *path_val)\n       if (*path_val == 0)\n         return 0;\n \n+      /* Skip the starting quote */\n+\n+      if (*path_val == '\"')\n+\tpath_val++;\n+\n       for (ptr = file_path; *path_val && *path_val != PATH_SEPARATOR; )\n-        *ptr++ = *path_val++;\n+\t*ptr++ = *path_val++;\n \n       ptr--;\n+\n+      /* Skip the ending quote */\n+\n+      if (*ptr == '\"')\n+\tptr--;\n+\n       if (*ptr != '/' && *ptr != DIR_SEPARATOR)\n         *++ptr = DIR_SEPARATOR;\n \n@@ -2026,20 +2054,24 @@ __gnat_locate_exec_on_path (char *exec_name)\n #endif\n #ifdef _WIN32\n   /* In Win32 systems we expand the PATH as for XP environment\n-     variables are not automatically expanded.  */\n-  int len = strlen (path_val) * 3;\n-  char *expanded_path_val = alloca (len + 1);\n+     variables are not automatically expanded. We also prepend the\n+     \".;\" to the path to match normal NT path search semantics */\n \n-  DWORD res = ExpandEnvironmentStrings (path_val, expanded_path_val, len);\n+  #define EXPAND_BUFFER_SIZE 32767\n \n-  if (res != 0)\n-    {\n-      path_val = expanded_path_val;\n-    }\n-#endif\n+  apath_val = alloca (EXPAND_BUFFER_SIZE);\n+\n+  apath_val [0] = '.';\n+  apath_val [1] = ';';\n \n+  DWORD res = ExpandEnvironmentStrings\n+    (path_val, apath_val + 2, EXPAND_BUFFER_SIZE - 2);\n+\n+  if (!res) apath_val [0] = '\\0';\n+#else\n   apath_val = alloca (strlen (path_val) + 1);\n   strcpy (apath_val, path_val);\n+#endif\n \n   return __gnat_locate_exec (exec_name, apath_val);\n }\n@@ -2218,15 +2250,19 @@ __gnat_to_canonical_file_spec (char *filespec)\n \n   if (strchr (filespec, ']') || strchr (filespec, ':'))\n     {\n-      strncpy (new_canonical_filespec,\n-\t       (char *) decc$translate_vms (filespec), MAXPATH);\n+      char *tspec = (char *) decc$translate_vms (filespec);\n+\n+      if (tspec != (char *) -1)\n+\tstrncpy (new_canonical_filespec, tspec, MAXPATH);\n     }\n   else if ((strlen (filespec) == strspn (filespec,\n \t    \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\"))\n \t&& (filespec1 = getenv (filespec)))\n     {\n-      strncpy (new_canonical_filespec,\n-\t       (char *) decc$translate_vms (filespec1), MAXPATH);\n+      char *tspec = (char *) decc$translate_vms (filespec1);\n+\n+      if (tspec != (char *) -1)\n+\tstrncpy (new_canonical_filespec, tspec, MAXPATH);\n     }\n   else\n     {\n@@ -2484,7 +2520,7 @@ _flush_cache()\n \n #if defined (CROSS_COMPILE)  \\\n   || (! (defined (sparc) && defined (sun) && defined (__SVR4)) \\\n-      && ! (defined (linux) && defined (i386)) \\\n+      && ! (defined (linux) && (defined (i386) || defined (__x86_64__))) \\\n       && ! defined (__FreeBSD__) \\\n       && ! defined (__hpux__) \\\n       && ! defined (__APPLE__) \\\n@@ -2494,7 +2530,7 @@ _flush_cache()\n       && ! (defined (__mips) && defined (__sgi)))\n \n /* Dummy function to satisfy g-trasym.o.  Currently Solaris sparc, HP/UX,\n-   GNU/Linux x86, Tru64 & Windows provide a non-dummy version of this\n+   GNU/Linux x86{_64}, Tru64 & Windows provide a non-dummy version of this\n    procedure in libaddr2line.a.  */\n \n void"}]}