{"sha": "553488851dd150c09c245ee64b2c0c3c15f75bbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUzNDg4ODUxZGQxNTBjMDljMjQ1ZWU2NGIyYzBjM2MxNWY3NWJiZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-03-14T17:51:14Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-03-14T17:52:13Z"}, "message": "i386: Some more -mavx512vl -mno-avx512bw fixes [PR99321]\n\n2021-03-14  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\t* config/i386/sse.md (*vec_extract<mode>): Merge alternative 0 with\n\talternative 2 and alternative 1 with alternative 3 using\n\tYW register constraint.\n\t(*vec_extract<PEXTR_MODE12:mode>_zext): Merge alternatives\n\tusing YW register constraint.\n\t(*vec_extractv16qi_zext): Ditto.\n\t(*vec_extractv4si): Merge alternatives 4 and 5\n\tusing Yw register constraint.\n\t(*ssse3_palignr<mode>_perm): Use Yw instead of v for alternative 3.", "tree": {"sha": "56c4ddc0ae5e15cfd31e6ad95407f48c798632bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56c4ddc0ae5e15cfd31e6ad95407f48c798632bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/553488851dd150c09c245ee64b2c0c3c15f75bbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/553488851dd150c09c245ee64b2c0c3c15f75bbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/553488851dd150c09c245ee64b2c0c3c15f75bbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/553488851dd150c09c245ee64b2c0c3c15f75bbd/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e93c2f08f35883376695506c3aaa9235174c00c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e93c2f08f35883376695506c3aaa9235174c00c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e93c2f08f35883376695506c3aaa9235174c00c"}], "stats": {"total": 58, "additions": 24, "deletions": 34}, "files": [{"sha": "43e4d57ec6a3d5575a20bea7b827a33969d1b6bd", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 24, "deletions": 34, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553488851dd150c09c245ee64b2c0c3c15f75bbd/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553488851dd150c09c245ee64b2c0c3c15f75bbd/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=553488851dd150c09c245ee64b2c0c3c15f75bbd", "patch": "@@ -15483,18 +15483,16 @@\n   [(V16QI \"TARGET_SSE4_1\") V8HI])\n \n (define_insn \"*vec_extract<mode>\"\n-  [(set (match_operand:<ssescalarmode> 0 \"register_sse4nonimm_operand\" \"=r,m,r,m\")\n+  [(set (match_operand:<ssescalarmode> 0 \"register_sse4nonimm_operand\" \"=r,m\")\n \t(vec_select:<ssescalarmode>\n-\t  (match_operand:PEXTR_MODE12 1 \"register_operand\" \"x,x,v,v\")\n+\t  (match_operand:PEXTR_MODE12 1 \"register_operand\" \"YW,YW\")\n \t  (parallel\n \t    [(match_operand:SI 2 \"const_0_to_<ssescalarnummask>_operand\")])))]\n   \"TARGET_SSE2\"\n   \"@\n    %vpextr<ssemodesuffix>\\t{%2, %1, %k0|%k0, %1, %2}\n-   %vpextr<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\n-   vpextr<ssemodesuffix>\\t{%2, %1, %k0|%k0, %1, %2}\n-   vpextr<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"*,sse4,avx512bw,avx512bw\")\n+   %vpextr<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"*,sse4\")\n    (set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set (attr \"prefix_extra\")\n@@ -15504,23 +15502,20 @@\n        (const_string \"*\")\n        (const_string \"1\")))\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex,maybe_vex,evex,evex\")\n+   (set_attr \"prefix\" \"maybe_vex,maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*vec_extract<PEXTR_MODE12:mode>_zext\"\n-  [(set (match_operand:SWI48 0 \"register_operand\" \"=r,r\")\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n \t(zero_extend:SWI48\n \t  (vec_select:<PEXTR_MODE12:ssescalarmode>\n-\t    (match_operand:PEXTR_MODE12 1 \"register_operand\" \"x,v\")\n+\t    (match_operand:PEXTR_MODE12 1 \"register_operand\" \"YW\")\n \t    (parallel\n \t      [(match_operand:SI 2\n \t\t\"const_0_to_<PEXTR_MODE12:ssescalarnummask>_operand\")]))))]\n   \"TARGET_SSE2\"\n-  \"@\n-   %vpextr<PEXTR_MODE12:ssemodesuffix>\\t{%2, %1, %k0|%k0, %1, %2}\n-   vpextr<PEXTR_MODE12:ssemodesuffix>\\t{%2, %1, %k0|%k0, %1, %2}\"\n-  [(set_attr \"isa\" \"*,avx512bw\")\n-   (set_attr \"type\" \"sselog1\")\n+  \"%vpextr<PEXTR_MODE12:ssemodesuffix>\\t{%2, %1, %k0|%k0, %1, %2}\"\n+  [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set (attr \"prefix_extra\")\n      (if_then_else\n@@ -15532,18 +15527,15 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*vec_extractv16qi_zext\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(zero_extend:HI\n \t  (vec_select:QI\n-\t    (match_operand:V16QI 1 \"register_operand\" \"x,v\")\n+\t    (match_operand:V16QI 1 \"register_operand\" \"YW\")\n \t    (parallel\n \t      [(match_operand:SI 2 \"const_0_to_15_operand\")]))))]\n   \"TARGET_SSE4_1\"\n-  \"@\n-   %vpextrb\\t{%2, %1, %k0|%k0, %1, %2}\n-   vpextrb\\t{%2, %1, %k0|%k0, %1, %2}\"\n-  [(set_attr \"isa\" \"*,avx512bw\")\n-   (set_attr \"type\" \"sselog1\")\n+  \"%vpextrb\\t{%2, %1, %k0|%k0, %1, %2}\"\n+  [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n@@ -15650,9 +15642,9 @@\n   \"operands[1] = gen_lowpart (SImode, operands[1]);\")\n \n (define_insn \"*vec_extractv4si\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,rm,Yr,*x,x,Yv\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,rm,Yr,*x,Yw\")\n \t(vec_select:SI\n-\t  (match_operand:V4SI 1 \"register_operand\" \"x,v,0,0,x,v\")\n+\t  (match_operand:V4SI 1 \"register_operand\" \"  x, v, 0, 0,Yw\")\n \t  (parallel [(match_operand:SI 2 \"const_0_to_3_operand\")])))]\n   \"TARGET_SSE4_1\"\n {\n@@ -15668,22 +15660,21 @@\n       return \"psrldq\\t{%2, %0|%0, %2}\";\n \n     case 4:\n-    case 5:\n       operands[2] = GEN_INT (INTVAL (operands[2]) * 4);\n       return \"vpsrldq\\t{%2, %1, %0|%0, %1, %2}\";\n \n     default:\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"isa\" \"*,avx512dq,noavx,noavx,avx,avx512bw\")\n-   (set_attr \"type\" \"sselog1,sselog1,sseishft1,sseishft1,sseishft1,sseishft1\")\n+  [(set_attr \"isa\" \"*,avx512dq,noavx,noavx,avx\")\n+   (set_attr \"type\" \"sselog1,sselog1,sseishft1,sseishft1,sseishft1\")\n    (set (attr \"prefix_extra\")\n      (if_then_else (eq_attr \"alternative\" \"0,1\")\n \t\t   (const_string \"1\")\n \t\t   (const_string \"*\")))\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex,evex,orig,orig,vex,evex\")\n+   (set_attr \"prefix\" \"maybe_vex,evex,orig,orig,maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*vec_extractv4si_zext\"\n@@ -21599,11 +21590,11 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"*ssse3_palignr<mode>_perm\"\n-  [(set (match_operand:V_128 0 \"register_operand\" \"=x,x,v\")\n+  [(set (match_operand:V_128 0 \"register_operand\" \"=x,Yw\")\n       (vec_select:V_128\n-\t(match_operand:V_128 1 \"register_operand\" \"0,x,v\")\n+\t(match_operand:V_128 1 \"register_operand\" \"0,Yw\")\n \t(match_parallel 2 \"palignr_operand\"\n-\t  [(match_operand 3 \"const_int_operand\" \"n,n,n\")])))]\n+\t  [(match_operand 3 \"const_int_operand\" \"n,n\")])))]\n   \"TARGET_SSSE3\"\n {\n   operands[2] = (GEN_INT (INTVAL (operands[3])\n@@ -21614,19 +21605,18 @@\n     case 0:\n       return \"palignr\\t{%2, %1, %0|%0, %1, %2}\";\n     case 1:\n-    case 2:\n       return \"vpalignr\\t{%2, %1, %1, %0|%0, %1, %1, %2}\";\n     default:\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"isa\" \"noavx,avx,avx512bw\")\n+  [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseishft\")\n    (set_attr \"atom_unit\" \"sishuf\")\n-   (set_attr \"prefix_data16\" \"1,*,*\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"orig,vex,evex\")])\n+   (set_attr \"prefix\" \"orig,maybe_evex\")])\n \n (define_expand \"avx512vl_vinsert<mode>\"\n   [(match_operand:VI48F_256 0 \"register_operand\")"}]}