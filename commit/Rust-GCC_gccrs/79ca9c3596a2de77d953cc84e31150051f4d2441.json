{"sha": "79ca9c3596a2de77d953cc84e31150051f4d2441", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzljYTljMzU5NmEyZGU3N2Q5NTNjYzg0ZTMxMTUwMDUxZjRkMjQ0MQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2018-08-21T15:38:36Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-08-21T15:38:36Z"}, "message": "PR c++/86981, Implement -Wpessimizing-move.\n\n\t* c.opt (Wpessimizing-move): New option.\n\n\t* typeck.c (decl_in_std_namespace_p): New.\n\t(is_std_move_p): New.\n\t(maybe_warn_pessimizing_move): New.\n\t(can_do_nrvo_p): New, factored out of ...\n\t(check_return_expr): ... here.  Warn about potentially harmful\n\tstd::move in a return statement.\n\n\t* doc/invoke.texi: Document -Wpessimizing-move.\n\n\t* g++.dg/cpp0x/Wpessimizing-move1.C: New test.\n\t* g++.dg/cpp0x/Wpessimizing-move2.C: New test.\n\t* g++.dg/cpp0x/Wpessimizing-move3.C: New test.\n\t* g++.dg/cpp0x/Wpessimizing-move4.C: New test.\n\t* g++.dg/cpp1z/Wpessimizing-move1.C: New test.\n\nFrom-SVN: r263741", "tree": {"sha": "b04486ba9b0aaa7af7f595797d4939cc9fa32b38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b04486ba9b0aaa7af7f595797d4939cc9fa32b38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79ca9c3596a2de77d953cc84e31150051f4d2441", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ca9c3596a2de77d953cc84e31150051f4d2441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79ca9c3596a2de77d953cc84e31150051f4d2441", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ca9c3596a2de77d953cc84e31150051f4d2441/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "992931ba3d02d107b3abf51781b4b4625d2cce7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/992931ba3d02d107b3abf51781b4b4625d2cce7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/992931ba3d02d107b3abf51781b4b4625d2cce7c"}], "stats": {"total": 442, "additions": 423, "deletions": 19}, "files": [{"sha": "264d183f818ada35b45859c7149a09f4e84bdae3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79ca9c3596a2de77d953cc84e31150051f4d2441", "patch": "@@ -1,3 +1,8 @@\n+2018-08-21  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/86981, Implement -Wpessimizing-move.\n+\t* doc/invoke.texi: Document -Wpessimizing-move.\n+\n 2018-08-21  Jan Hubicka  <jh@suse.cz>\n \n \t* tree.c (find_decls_types_r): Do not check for redundant typedefs."}, {"sha": "790df09eb595f110cd20cdade4e81e750a01a09d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=79ca9c3596a2de77d953cc84e31150051f4d2441", "patch": "@@ -1,3 +1,8 @@\n+2018-08-21  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/86981, Implement -Wpessimizing-move.\n+\t* c.opt (Wpessimizing-move): New option.\n+\n 2018-08-20  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR other/84889"}, {"sha": "76840dd77addee0f3db384e23cbc751aaf3bd6a0", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=79ca9c3596a2de77d953cc84e31150051f4d2441", "patch": "@@ -937,6 +937,10 @@ Wpedantic\n C ObjC C++ ObjC++ CPP(cpp_pedantic) CppReason(CPP_W_PEDANTIC) Warning\n ; Documented in common.opt\n \n+Wpessimizing-move\n+C++ ObjC++ Var(warn_pessimizing_move) Warning LangEnabledBy(C++ ObjC++, Wall)\n+Warn about calling std::move on a local object in a return statement preventing copy elision.\n+\n Wpmf-conversions\n C++ ObjC++ Var(warn_pmf2ptr) Init(1) Warning\n Warn when converting the type of pointers to member functions."}, {"sha": "6e6724428bf1fce33cb9a412756bce9382a1af32", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=79ca9c3596a2de77d953cc84e31150051f4d2441", "patch": "@@ -1,5 +1,13 @@\n 2018-08-21  Marek Polacek  <polacek@redhat.com>\n \n+\tPR c++/86981, Implement -Wpessimizing-move.\n+\t* typeck.c (decl_in_std_namespace_p): New.\n+\t(is_std_move_p): New.\n+\t(maybe_warn_pessimizing_move): New.\n+\t(can_do_nrvo_p): New, factored out of ...\n+\t(check_return_expr): ... here.  Warn about potentially harmful\n+\tstd::move in a return statement.\n+\n \tPR c++/65043\n \t* call.c (standard_conversion): Set check_narrowing.\n \t* typeck2.c (check_narrowing): Use CP_INTEGRAL_TYPE_P rather"}, {"sha": "122d9dcd4b3c923976a7390c28a9b8dd43b5715a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 98, "deletions": 19, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=79ca9c3596a2de77d953cc84e31150051f4d2441", "patch": "@@ -9126,6 +9126,100 @@ maybe_warn_about_returning_address_of_local (tree retval)\n   return false;\n }\n \n+/* Returns true if DECL is in the std namespace.  */\n+\n+static bool\n+decl_in_std_namespace_p (tree decl)\n+{\n+  return (decl != NULL_TREE\n+\t  && DECL_NAMESPACE_STD_P (decl_namespace_context (decl)));\n+}\n+\n+/* Returns true if FN, a CALL_EXPR, is a call to std::move.  */\n+\n+static bool\n+is_std_move_p (tree fn)\n+{\n+  /* std::move only takes one argument.  */\n+  if (call_expr_nargs (fn) != 1)\n+    return false;\n+\n+  tree fndecl = cp_get_callee_fndecl_nofold (fn);\n+  if (!decl_in_std_namespace_p (fndecl))\n+    return false;\n+\n+  tree name = DECL_NAME (fndecl);\n+  return name && id_equal (name, \"move\");\n+}\n+\n+/* Returns true if RETVAL is a good candidate for the NRVO as per\n+   [class.copy.elision].  FUNCTYPE is the type the function is declared\n+   to return.  */\n+\n+static bool\n+can_do_nrvo_p (tree retval, tree functype)\n+{\n+  tree result = DECL_RESULT (current_function_decl);\n+  return (retval != NULL_TREE\n+\t  && !processing_template_decl\n+\t  /* Must be a local, automatic variable.  */\n+\t  && VAR_P (retval)\n+\t  && DECL_CONTEXT (retval) == current_function_decl\n+\t  && !TREE_STATIC (retval)\n+\t  /* And not a lambda or anonymous union proxy.  */\n+\t  && !DECL_HAS_VALUE_EXPR_P (retval)\n+\t  && (DECL_ALIGN (retval) <= DECL_ALIGN (result))\n+\t  /* The cv-unqualified type of the returned value must be the\n+\t     same as the cv-unqualified return type of the\n+\t     function.  */\n+\t  && same_type_p ((TYPE_MAIN_VARIANT (TREE_TYPE (retval))),\n+\t\t\t  (TYPE_MAIN_VARIANT (functype)))\n+\t  /* And the returned value must be non-volatile.  */\n+\t  && !TYPE_VOLATILE (TREE_TYPE (retval)));\n+}\n+\n+/* Warn about wrong usage of std::move in a return statement.  RETVAL\n+   is the expression we are returning; FUNCTYPE is the type the function\n+   is declared to return.  */\n+\n+static void\n+maybe_warn_pessimizing_move (tree retval, tree functype)\n+{\n+  if (!warn_pessimizing_move)\n+    return;\n+\n+  /* C++98 doesn't know move.  */\n+  if (cxx_dialect < cxx11)\n+    return;\n+\n+  /* This is only interesting for class types.  */\n+  if (!CLASS_TYPE_P (functype))\n+    return;\n+\n+  /* We're looking for *std::move<T&> (&arg).  */\n+  if (REFERENCE_REF_P (retval)\n+      && TREE_CODE (TREE_OPERAND (retval, 0)) == CALL_EXPR)\n+    {\n+      tree fn = TREE_OPERAND (retval, 0);\n+      if (is_std_move_p (fn))\n+\t{\n+\t  tree arg = CALL_EXPR_ARG (fn, 0);\n+\t  STRIP_NOPS (arg);\n+\t  if (TREE_CODE (arg) == ADDR_EXPR)\n+\t    arg = TREE_OPERAND (arg, 0);\n+\t  /* Warn if we could do copy elision were it not for the move.  */\n+\t  if (can_do_nrvo_p (arg, functype))\n+\t    {\n+\t      auto_diagnostic_group d;\n+\t      if (warning_at (location_of (retval), OPT_Wpessimizing_move,\n+\t\t\t      \"moving a local object in a return statement \"\n+\t\t\t      \"prevents copy elision\"))\n+\t\tinform (location_of (retval), \"remove %<std::move%> call\");\n+\t    }\n+\t}\n+    }\n+}\n+\n /* Check that returning RETVAL from the current function is valid.\n    Return an expression explicitly showing all conversions required to\n    change RETVAL into the function return type, and to assign it to\n@@ -9143,7 +9237,6 @@ check_return_expr (tree retval, bool *no_warning)\n      the declared type is incomplete.  */\n   tree functype;\n   int fn_returns_value_p;\n-  bool named_return_value_okay_p;\n \n   *no_warning = false;\n \n@@ -9355,24 +9448,7 @@ check_return_expr (tree retval, bool *no_warning)\n \n      See finish_function and finalize_nrv for the rest of this optimization.  */\n \n-  named_return_value_okay_p = \n-    (retval != NULL_TREE\n-     && !processing_template_decl\n-     /* Must be a local, automatic variable.  */\n-     && VAR_P (retval)\n-     && DECL_CONTEXT (retval) == current_function_decl\n-     && ! TREE_STATIC (retval)\n-     /* And not a lambda or anonymous union proxy.  */\n-     && !DECL_HAS_VALUE_EXPR_P (retval)\n-     && (DECL_ALIGN (retval) <= DECL_ALIGN (result))\n-     /* The cv-unqualified type of the returned value must be the\n-        same as the cv-unqualified return type of the\n-        function.  */\n-     && same_type_p ((TYPE_MAIN_VARIANT (TREE_TYPE (retval))),\n-                     (TYPE_MAIN_VARIANT (functype)))\n-     /* And the returned value must be non-volatile.  */\n-     && ! TYPE_VOLATILE (TREE_TYPE (retval)));\n-     \n+  bool named_return_value_okay_p = can_do_nrvo_p (retval, functype);\n   if (fn_returns_value_p && flag_elide_constructors)\n     {\n       if (named_return_value_okay_p\n@@ -9388,6 +9464,9 @@ check_return_expr (tree retval, bool *no_warning)\n   if (!retval)\n     return NULL_TREE;\n \n+  if (!named_return_value_okay_p)\n+    maybe_warn_pessimizing_move (retval, functype);\n+\n   /* Do any required conversions.  */\n   if (retval == result || DECL_CONSTRUCTOR_P (current_function_decl))\n     /* No conversions are required.  */"}, {"sha": "e4148297a87ae53cda0ea8b124e40c873c539cf1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=79ca9c3596a2de77d953cc84e31150051f4d2441", "patch": "@@ -231,6 +231,7 @@ in the following sections.\n -Wdelete-non-virtual-dtor -Wdeprecated-copy  -Wliteral-suffix @gol\n -Wmultiple-inheritance @gol\n -Wnamespaces  -Wnarrowing @gol\n+-Wpessimizing-move @gol\n -Wnoexcept  -Wnoexcept-type  -Wclass-memaccess @gol\n -Wnon-virtual-dtor  -Wreorder  -Wregister @gol\n -Weffc++  -Wstrict-null-sentinel  -Wtemplates @gol\n@@ -3132,6 +3133,31 @@ The compiler rearranges the member initializers for @code{i}\n and @code{j} to match the declaration order of the members, emitting\n a warning to that effect.  This warning is enabled by @option{-Wall}.\n \n+@item -Wno-pessimizing-move @r{(C++ and Objective-C++ only)}\n+@opindex Wpessimizing-move\n+@opindex Wno-pessimizing-move\n+This warning warns when a call to @code{std::move} prevents copy\n+elision.  A typical scenario when copy elision can occur is when returning in\n+a function with a class return type, when the expression being returned is the\n+name of a non-volatile automatic object, and is not a function parameter, and\n+has the same type as the function return type.\n+\n+@smallexample\n+struct T @{\n+@dots{}\n+@};\n+T fn()\n+@{\n+  T t;\n+  @dots{}\n+  return std::move (t);\n+@}\n+@end smallexample\n+\n+But in this example, the @code{std::move} call prevents copy elision.\n+\n+This warning is enabled by @option{-Wall}.\n+\n @item -fext-numeric-literals @r{(C++ and Objective-C++ only)}\n @opindex fext-numeric-literals\n @opindex fno-ext-numeric-literals\n@@ -4037,6 +4063,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n -Wnonnull-compare  @gol\n -Wopenmp-simd @gol\n -Wparentheses  @gol\n+-Wpessimizing-move @r{(only for C++)}  @gol\n -Wpointer-sign  @gol\n -Wreorder   @gol\n -Wrestrict   @gol"}, {"sha": "6c87f8017d3569e1784980e7d154ee97773400a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=79ca9c3596a2de77d953cc84e31150051f4d2441", "patch": "@@ -1,5 +1,12 @@\n 2018-08-21  Marek Polacek  <polacek@redhat.com>\n \n+\tPR c++/86981, Implement -Wpessimizing-move.\n+\t* g++.dg/cpp0x/Wpessimizing-move1.C: New test.\n+\t* g++.dg/cpp0x/Wpessimizing-move2.C: New test.\n+\t* g++.dg/cpp0x/Wpessimizing-move3.C: New test.\n+\t* g++.dg/cpp0x/Wpessimizing-move4.C: New test.\n+\t* g++.dg/cpp1z/Wpessimizing-move1.C: New test.\n+\n \tPR c++/65043\n \t* g++.dg/concepts/pr67595.C: Add dg-warning.\n \t* g++.dg/cpp0x/Wnarrowing11.C: New test."}, {"sha": "858bed6065eb7d9ba6e9bc432a5df92271dbf17d", "filename": "gcc/testsuite/g++.dg/cpp0x/Wpessimizing-move1.C", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWpessimizing-move1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWpessimizing-move1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWpessimizing-move1.C?ref=79ca9c3596a2de77d953cc84e31150051f4d2441", "patch": "@@ -0,0 +1,132 @@\n+// PR c++/86981\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wpessimizing-move\" }\n+\n+// Define std::move.\n+namespace std {\n+  template<typename _Tp>\n+    struct remove_reference\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    constexpr typename std::remove_reference<_Tp>::type&&\n+    move(_Tp&& __t) noexcept\n+    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n+}\n+\n+struct T {\n+  T() { }\n+  T(const T&) { }\n+  T(T&&) { }\n+};\n+struct U {\n+  U() { }\n+  U(const U&) { }\n+  U(U&&) { }\n+  U(T) { }\n+};\n+\n+T g;\n+\n+T\n+fn1 ()\n+{\n+  T t;\n+  return std::move (t); // { dg-warning \"moving a local object in a return statement prevents copy elision\" }\n+}\n+\n+T\n+fn2 ()\n+{\n+  // Not a local variable.\n+  return std::move (g);\n+}\n+\n+int\n+fn3 ()\n+{\n+  int i = 42;\n+  // Not a class type.\n+  return std::move (i);\n+}\n+\n+T\n+fn4 (bool b)\n+{\n+  T t;\n+  if (b)\n+    throw std::move (t);\n+  return std::move (t); // { dg-warning \"moving a local object in a return statement prevents copy elision\" }\n+}\n+\n+T\n+fn5 (T t)\n+{\n+  // Function parameter; std::move is redundant but not pessimizing.\n+  return std::move (t);\n+}\n+\n+U\n+fn6 (T t, U u, bool b)\n+{\n+  if (b)\n+    return std::move (t);\n+  else\n+    // Function parameter; std::move is redundant but not pessimizing.\n+    return std::move (u);\n+}\n+\n+U\n+fn6 (bool b)\n+{\n+  T t;\n+  U u;\n+  if (b)\n+    return std::move (t);\n+  else\n+    return std::move (u); // { dg-warning \"moving a local object in a return statement prevents copy elision\" }\n+}\n+\n+T\n+fn7 ()\n+{\n+  static T t;\n+  // Non-local; don't warn.\n+  return std::move (t);\n+}\n+\n+T\n+fn8 ()\n+{\n+  return T();\n+}\n+\n+T\n+fn9 (int i)\n+{\n+  T t;\n+\n+  switch (i)\n+    {\n+    case 1:\n+      return std::move ((t)); // { dg-warning \"moving a local object in a return statement prevents copy elision\" }\n+    case 2:\n+      return (std::move (t)); // { dg-warning \"moving a local object in a return statement prevents copy elision\" }\n+    default:\n+      return (std::move ((t))); // { dg-warning \"moving a local object in a return statement prevents copy elision\" }\n+    }\n+}\n+\n+int\n+fn10 ()\n+{\n+  return std::move (42);\n+}"}, {"sha": "0ee6e0535dcbc12ba73504d7bcd8c5063184e314", "filename": "gcc/testsuite/g++.dg/cpp0x/Wpessimizing-move2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWpessimizing-move2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWpessimizing-move2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWpessimizing-move2.C?ref=79ca9c3596a2de77d953cc84e31150051f4d2441", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/86981\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wpessimizing-move\" }\n+\n+#include <string>\n+#include <tuple>\n+#include <utility>\n+\n+std::tuple<std::string, std::string>\n+foo ()\n+{\n+  std::pair<std::string, std::string> p;\n+  return std::move (p);\n+}"}, {"sha": "a1af1230b682c2bb92bfc9dbe6c9339bd3010dab", "filename": "gcc/testsuite/g++.dg/cpp0x/Wpessimizing-move3.C", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWpessimizing-move3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWpessimizing-move3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWpessimizing-move3.C?ref=79ca9c3596a2de77d953cc84e31150051f4d2441", "patch": "@@ -0,0 +1,59 @@\n+// PR c++/86981\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wpessimizing-move\" }\n+\n+// Define std::move.\n+namespace std {\n+  template<typename _Tp>\n+    struct remove_reference\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    constexpr typename std::remove_reference<_Tp>::type&&\n+    move(_Tp&& __t) noexcept\n+    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n+}\n+\n+struct T { };\n+struct U { U(T); };\n+\n+template<typename Tp>\n+T\n+fn1 ()\n+{\n+  T t;\n+  // Non-dependent type.\n+  return std::move (t); // { dg-warning \"moving a local object in a return statement prevents copy elision\" }\n+}\n+\n+template<typename Tp1, typename Tp2>\n+Tp1\n+fn2 ()\n+{\n+  Tp2 t;\n+  return std::move (t); // { dg-warning \"moving a local object in a return statement prevents copy elision\" }\n+}\n+\n+template<typename Tp1, typename Tp2>\n+Tp1\n+fn3 ()\n+{\n+  Tp2 t;\n+  return std::move (t);\n+}\n+\n+int\n+main ()\n+{\n+  fn1<T>();\n+  fn2<T, T>();\n+  fn3<U, T>();\n+}"}, {"sha": "59e148e9f91798bddd3fd61fab8286d2b73e1b8b", "filename": "gcc/testsuite/g++.dg/cpp0x/Wpessimizing-move4.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWpessimizing-move4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWpessimizing-move4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWpessimizing-move4.C?ref=79ca9c3596a2de77d953cc84e31150051f4d2441", "patch": "@@ -0,0 +1,46 @@\n+// PR c++/86981\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wpessimizing-move\" }\n+\n+// Define std::move.\n+namespace std {\n+  template<typename _Tp>\n+    struct remove_reference\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    constexpr typename std::remove_reference<_Tp>::type&&\n+    move(_Tp&& __t) noexcept\n+    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n+}\n+\n+struct T { };\n+\n+T\n+fn1 ()\n+{\n+  T t;\n+  return (1, std::move (t));\n+}\n+\n+T\n+fn2 ()\n+{\n+  T t;\n+  return [&](){ return std::move (t); }();\n+}\n+\n+T\n+fn3 ()\n+{\n+  T t;\n+  return [=](){ return std::move (t); }();\n+}"}, {"sha": "59741889707924320a37d75cf43d11013744d414", "filename": "gcc/testsuite/g++.dg/cpp1z/Wpessimizing-move1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2FWpessimizing-move1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ca9c3596a2de77d953cc84e31150051f4d2441/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2FWpessimizing-move1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2FWpessimizing-move1.C?ref=79ca9c3596a2de77d953cc84e31150051f4d2441", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/86981\n+// { dg-options \"-Wpessimizing-move -std=c++17\" }\n+\n+#include <utility>\n+#include <optional>\n+\n+struct T {\n+  T() { }\n+  T(const T&) { }\n+  T(T&&) { }\n+};\n+\n+std::optional<T>\n+fn ()\n+{\n+  T t;\n+  return std::move (t);\n+}"}]}