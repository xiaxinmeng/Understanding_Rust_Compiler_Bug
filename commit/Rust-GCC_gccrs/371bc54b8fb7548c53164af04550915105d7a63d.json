{"sha": "371bc54b8fb7548c53164af04550915105d7a63d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcxYmM1NGI4ZmI3NTQ4YzUzMTY0YWYwNDU1MDkxNTEwNWQ3YTYzZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-03-25T13:03:31Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-03-25T13:03:31Z"}, "message": "i386.md (ashldi3, [...]): Change predicates to shiftdi_operand; use ix86_expand_binary_operator\n\n\t* i386.md (ashldi3, ashrdi3, lshrdi3): Change predicates to\n\tshiftdi_operand;\n\tuse ix86_expand_binary_operator\n\t(?sh??i_?): Disable for 64bit.\n\t* i386.h (PREDICATE_CODES): Add shiftdi_operand.\n\t* i386.c (shiftdi_operand): New predicate.\n\n\t* (ashldi3_1_rex64, ashldi3_cmp_rex64, ashlsi3_1_zext, ashlsi3_cmp_zext,\n\tashrdi3_63_rex64, ashrdi3_1_one_bit_rex64, ashrdi3_1_rex64,\n\tashrdi3_one_bit_cmp_rex64, ashrdi3_cmp_rex64, ashrsi3_31_zext,\n\tashrsi3_1_one_bit_zext, ashrsi3_1_zext, ashrsi3_one_bit_cmp_zext,\n\tashrsi3_cmp_zext, lshrdi3_1_one_bit_rex64, lshrdi3_1_rex64,\n\tlshrdi3_cmp_one_bit_rex64, lshrdi3_cmp_rex64, lshrsi3_1_one_bit_zext,\n\tlshrsi3_1_zext, lshrsi3_cmp_one_bit_zext, lshrsi3_cmp_zext,\n\trotlsi3_1_one_bit_rex64, rotldi3_1_rex64,\n\trotlsi3_1_one_bit_zext, rotlsi3_1_zext, rotrdi3_1_one_bit_rex64,\n\trotrdi3_1_rex64, rotrsi3_1_one_bit_zext, rotrsi3_1_zext): New patterns.\n\t(rotldi3, rotrdi3): New expanders.\n\nFrom-SVN: r40827", "tree": {"sha": "4d50151522c755fee14cbc08a23185216d4f0e51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d50151522c755fee14cbc08a23185216d4f0e51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/371bc54b8fb7548c53164af04550915105d7a63d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/371bc54b8fb7548c53164af04550915105d7a63d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/371bc54b8fb7548c53164af04550915105d7a63d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/371bc54b8fb7548c53164af04550915105d7a63d/comments", "author": null, "committer": null, "parents": [{"sha": "0945b39d44197d6beffecaec708c89a1695a199b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0945b39d44197d6beffecaec708c89a1695a199b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0945b39d44197d6beffecaec708c89a1695a199b"}], "stats": {"total": 669, "additions": 648, "deletions": 21}, "files": [{"sha": "bd87ea7531da925cf8c57c4d27d42a20c60562fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371bc54b8fb7548c53164af04550915105d7a63d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371bc54b8fb7548c53164af04550915105d7a63d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=371bc54b8fb7548c53164af04550915105d7a63d", "patch": "@@ -1,3 +1,24 @@\n+Sun Mar 25 15:01:40 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (ashldi3, ashrdi3, lshrdi3): Change predicates to\n+\tshiftdi_operand;\n+\tuse ix86_expand_binary_operator\n+\t(?sh??i_?): Disable for 64bit.\n+\t* i386.h (PREDICATE_CODES): Add shiftdi_operand.\n+\t* i386.c (shiftdi_operand): New predicate.\n+\n+\t* (ashldi3_1_rex64, ashldi3_cmp_rex64, ashlsi3_1_zext, ashlsi3_cmp_zext,\n+\tashrdi3_63_rex64, ashrdi3_1_one_bit_rex64, ashrdi3_1_rex64,\n+\tashrdi3_one_bit_cmp_rex64, ashrdi3_cmp_rex64, ashrsi3_31_zext,\n+\tashrsi3_1_one_bit_zext, ashrsi3_1_zext, ashrsi3_one_bit_cmp_zext,\n+\tashrsi3_cmp_zext, lshrdi3_1_one_bit_rex64, lshrdi3_1_rex64,\n+\tlshrdi3_cmp_one_bit_rex64, lshrdi3_cmp_rex64, lshrsi3_1_one_bit_zext,\n+\tlshrsi3_1_zext, lshrsi3_cmp_one_bit_zext, lshrsi3_cmp_zext,\n+\trotlsi3_1_one_bit_rex64, rotldi3_1_rex64,\n+\trotlsi3_1_one_bit_zext, rotlsi3_1_zext, rotrdi3_1_one_bit_rex64,\n+\trotrdi3_1_rex64, rotrsi3_1_one_bit_zext, rotrsi3_1_zext): New patterns.\n+\t(rotldi3, rotrdi3): New expanders.\n+\n Sun Mar 25 14:25:33 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (movstrsi): Move offline."}, {"sha": "fa6633d22602dbf09ba753775da76424dedf32aa", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371bc54b8fb7548c53164af04550915105d7a63d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371bc54b8fb7548c53164af04550915105d7a63d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=371bc54b8fb7548c53164af04550915105d7a63d", "patch": "@@ -1411,6 +1411,20 @@ incdec_operand (op, mode)\n   return 0;\n }\n \n+/* Return nonzero if OP is acceptable as operand of DImode shift\n+   expander.  */\n+\n+int\n+shiftdi_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  if (TARGET_64BIT)\n+    return nonimmediate_operand (op, mode);\n+  else\n+    return register_operand (op, mode);\n+}\n+\n /* Return false if this is the stack pointer, or any other fake\n    register eliminable to the stack pointer.  Otherwise, this is\n    a register operand."}, {"sha": "7312108dfcb39208f94d5f5cba4cc01e30e49ed7", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371bc54b8fb7548c53164af04550915105d7a63d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371bc54b8fb7548c53164af04550915105d7a63d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=371bc54b8fb7548c53164af04550915105d7a63d", "patch": "@@ -3036,6 +3036,7 @@ do { long l;\t\t\t\t\t\t\\\n \t\t\t\t   SYMBOL_REF, LABEL_REF, CONST}},\t\\\n   {\"x86_64_zext_immediate_operand\", {CONST_INT, CONST_DOUBLE, CONST,\t\\\n \t\t\t\t       SYMBOL_REF, LABEL_REF}},\t\t\\\n+  {\"shiftdi_operand\", {SUBREG, REG, MEM}},\t\t\t\t\\\n   {\"const_int_1_operand\", {CONST_INT}},\t\t\t\t\t\\\n   {\"symbolic_operand\", {SYMBOL_REF, LABEL_REF, CONST}},\t\t\t\\\n   {\"aligned_operand\", {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\t\\"}, {"sha": "4850ca491b1617fcda40933a0ec3f728d6d46da8", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 612, "deletions": 21, "changes": 633, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/371bc54b8fb7548c53164af04550915105d7a63d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/371bc54b8fb7548c53164af04550915105d7a63d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=371bc54b8fb7548c53164af04550915105d7a63d", "patch": "@@ -9963,8 +9963,8 @@\n ;; than 31.\n \n (define_expand \"ashldi3\"\n-  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n+  [(parallel [(set (match_operand:DI 0 \"shiftdi_operand\" \"\")\n+\t\t   (ashift:DI (match_operand:DI 1 \"shiftdi_operand\" \"\")\n \t\t\t      (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n   \"\"\n@@ -9975,16 +9975,122 @@\n       emit_insn (gen_ashldi3_1 (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n-  ix86_expand_binary_operator (ASHIFT, DImode, operands); DONE;\n+  ix86_expand_binary_operator (ASHIFT, DImode, operands);\n+  DONE;\n }\")\n \n+(define_insn \"*ashldi3_1_rex64\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm,r\")\n+\t(ashift:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,r\")\n+\t\t   (match_operand:QI 2 \"nonmemory_operand\" \"c,M\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (ASHIFT, DImode, operands)\"\n+  \"*\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_ALU:\n+      if (operands[2] != const1_rtx)\n+\tabort ();\n+      if (!rtx_equal_p (operands[0], operands[1]))\n+\tabort ();\n+      return \\\"add{q}\\\\t{%0, %0|%0, %0}\\\";\n+\n+    case TYPE_LEA:\n+      if (GET_CODE (operands[2]) != CONST_INT\n+\t  || (unsigned HOST_WIDE_INT) INTVAL (operands[2]) > 3)\n+\tabort ();\n+      operands[1] = gen_rtx_MULT (DImode, operands[1],\n+\t\t\t\t  GEN_INT (1 << INTVAL (operands[2])));\n+      return \\\"lea{q}\\\\t{%a1, %0|%0, %a1}\\\";\n+\n+    default:\n+      if (REG_P (operands[2]))\n+\treturn \\\"sal{q}\\\\t{%b2, %0|%0, %b2}\\\";\n+      else if (GET_CODE (operands[2]) == CONST_INT\n+\t       && INTVAL (operands[2]) == 1\n+\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\treturn \\\"sal{q}\\\\t%0\\\";\n+      else\n+\treturn \\\"sal{q}\\\\t{%2, %0|%0, %2}\\\";\n+    }\n+}\"\n+  [(set (attr \"type\")\n+     (cond [(eq_attr \"alternative\" \"1\")\n+\t      (const_string \"lea\")\n+            (and (and (ne (symbol_ref \"TARGET_DOUBLE_WITH_ADD\")\n+\t\t          (const_int 0))\n+\t\t      (match_operand 0 \"register_operand\" \"\"))\n+\t\t (match_operand 2 \"const1_operand\" \"\"))\n+\t      (const_string \"alu\")\n+\t   ]\n+\t   (const_string \"ishift\")))\n+   (set_attr \"mode\" \"DI\")])\n+\n+;; Convert lea to the lea pattern to avoid flags dependency.\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t   (match_operand:QI 2 \"immediate_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"reload_completed\n+   && TARGET_64BIT\n+   && true_regnum (operands[0]) != true_regnum (operands[1])\"\n+  [(set (match_dup 0)\n+\t(mult:DI (match_dup 1)\n+\t\t (match_dup 2)))]\n+  \"operands[2] = GEN_INT (1 << INTVAL (operands[2]));\")\n+\n+;; This pattern can't accept a variable shift count, since shifts by\n+;; zero don't affect the flags.  We assume that shifts by constant\n+;; zero are optimized away.\n+(define_insn \"*ashldi3_cmp_rex64\"\n+  [(set (reg 17)\n+\t(compare\n+\t  (ashift:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"immediate_operand\" \"e\"))\n+\t  (const_int 0)))\n+   (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(ashift:DI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFT, DImode, operands)\"\n+  \"*\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_ALU:\n+      if (operands[2] != const1_rtx)\n+\tabort ();\n+      return \\\"add{q}\\\\t{%0, %0|%0, %0}\\\";\n+\n+    default:\n+      if (REG_P (operands[2]))\n+\treturn \\\"sal{q}\\\\t{%b2, %0|%0, %b2}\\\";\n+      else if (GET_CODE (operands[2]) == CONST_INT\n+\t       && INTVAL (operands[2]) == 1\n+\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\treturn \\\"sal{q}\\\\t%0\\\";\n+      else\n+\treturn \\\"sal{q}\\\\t{%2, %0|%0, %2}\\\";\n+    }\n+}\"\n+  [(set (attr \"type\")\n+     (cond [(and (and (ne (symbol_ref \"TARGET_DOUBLE_WITH_ADD\")\n+\t\t          (const_int 0))\n+\t\t      (match_operand 0 \"register_operand\" \"\"))\n+\t\t (match_operand 2 \"const1_operand\" \"\"))\n+\t      (const_string \"alu\")\n+\t   ]\n+\t   (const_string \"ishift\")))\n+   (set_attr \"mode\" \"DI\")])\n+\n (define_insn \"ashldi3_1\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashift:DI (match_operand:DI 1 \"register_operand\" \"0\")\n \t\t   (match_operand:QI 2 \"nonmemory_operand\" \"Jc\")))\n    (clobber (match_scratch:SI 3 \"=&r\"))\n    (clobber (reg:CC 17))]\n-  \"TARGET_CMOVE\"\n+  \"!TARGET_64BIT && TARGET_CMOVE\"\n   \"#\"\n   [(set_attr \"type\" \"multi\")])\n \n@@ -9993,7 +10099,7 @@\n \t(ashift:DI (match_operand:DI 1 \"register_operand\" \"0\")\n \t\t   (match_operand:QI 2 \"nonmemory_operand\" \"Jc\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"#\"\n   [(set_attr \"type\" \"multi\")])\n \n@@ -10003,7 +10109,7 @@\n \t\t   (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n    (clobber (match_scratch:SI 3 \"\"))\n    (clobber (reg:CC 17))]\n-  \"TARGET_CMOVE && reload_completed\"\n+  \"!TARGET_64BIT && TARGET_CMOVE && reload_completed\"\n   [(const_int 0)]\n   \"ix86_split_ashldi (operands, operands[3]); DONE;\")\n \n@@ -10012,7 +10118,7 @@\n \t(ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t   (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"reload_completed\"\n+  \"!TARGET_64BIT && reload_completed\"\n   [(const_int 0)]\n   \"ix86_split_ashldi (operands, NULL_RTX); DONE;\")\n \n@@ -10152,6 +10258,61 @@\n   DONE;\n }\")\n \n+(define_insn \"*ashlsi3_1_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:DI (ashift:SI (match_operand:SI 1 \"register_operand\" \"0,r\")\n+\t\t\t(match_operand:QI 2 \"nonmemory_operand\" \"cI,M\"))))\n+   (clobber (reg:CC 17))]\n+  \"ix86_binary_operator_ok (ASHIFT, SImode, operands) && TARGET_64BIT\"\n+  \"*\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_ALU:\n+      if (operands[2] != const1_rtx)\n+\tabort ();\n+      return \\\"add{l}\\\\t{%k0, %k0|%k0, %k0}\\\";\n+\n+    case TYPE_LEA:\n+      return \\\"#\\\";\n+\n+    default:\n+      if (REG_P (operands[2]))\n+\treturn \\\"sal{l}\\\\t{%b2, %k0|%k0, %b2}\\\";\n+      else if (GET_CODE (operands[2]) == CONST_INT\n+\t       && INTVAL (operands[2]) == 1\n+\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\treturn \\\"sal{l}\\\\t%k0\\\";\n+      else\n+\treturn \\\"sal{l}\\\\t{%2, %k0|%k0, %2}\\\";\n+    }\n+}\"\n+  [(set (attr \"type\")\n+     (cond [(eq_attr \"alternative\" \"1\")\n+\t      (const_string \"lea\")\n+            (and (ne (symbol_ref \"TARGET_DOUBLE_WITH_ADD\")\n+\t\t     (const_int 0))\n+\t\t (match_operand 2 \"const1_operand\" \"\"))\n+\t      (const_string \"alu\")\n+\t   ]\n+\t   (const_string \"ishift\")))\n+   (set_attr \"mode\" \"SI\")])\n+\n+;; Convert lea to the lea pattern to avoid flags dependency.\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(zero_extend:DI (ashift (match_operand 1 \"register_operand\" \"\")\n+\t\t\t\t(match_operand:QI 2 \"const_int_operand\" \"\"))))\n+   (clobber (reg:CC 17))]\n+  \"reload_completed\n+   && true_regnum (operands[0]) != true_regnum (operands[1])\"\n+  [(set (match_dup 0) (zero_extend:DI (subreg:SI (mult:SI (match_dup 1) (match_dup 2)) 0)))]\n+  \"\n+{\n+  operands[1] = gen_lowpart (Pmode, operands[1]);\n+  operands[2] = GEN_INT (1 << INTVAL (operands[2]));\n+}\")\n+\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n@@ -10195,6 +10356,45 @@\n \t   (const_string \"ishift\")))\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*ashlsi3_cmp_zext\"\n+  [(set (reg 17)\n+\t(compare\n+\t  (ashift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"immediate_operand\" \"I\"))\n+\t  (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI (ashift:SI (match_dup 1) (match_dup 2))))]\n+  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFT, SImode, operands)\"\n+  \"*\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_ALU:\n+      if (operands[2] != const1_rtx)\n+\tabort ();\n+      return \\\"add{l}\\\\t{%k0, %k0|%k0, %k0}\\\";\n+\n+    default:\n+      if (REG_P (operands[2]))\n+\treturn \\\"sal{l}\\\\t{%b2, %k0|%k0, %b2}\\\";\n+      else if (GET_CODE (operands[2]) == CONST_INT\n+\t       && INTVAL (operands[2]) == 1\n+\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\treturn \\\"sal{l}\\\\t%k0\\\";\n+      else\n+\treturn \\\"sal{l}\\\\t{%2, %k0|%k0, %2}\\\";\n+    }\n+}\"\n+  [(set (attr \"type\")\n+     (cond [(and (ne (symbol_ref \"TARGET_DOUBLE_WITH_ADD\")\n+\t\t     (const_int 0))\n+\t\t (match_operand 2 \"const1_operand\" \"\"))\n+\t      (const_string \"alu\")\n+\t   ]\n+\t   (const_string \"ishift\")))\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_expand \"ashlhi3\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n \t(ashift:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n@@ -10494,27 +10694,110 @@\n ;; See comment above `ashldi3' about how this works.\n \n (define_expand \"ashrdi3\"\n-  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t\t   (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-\t\t\t\t(match_operand:QI 2 \"nonmemory_operand\" \"Jc\")))\n+  [(parallel [(set (match_operand:DI 0 \"shiftdi_operand\" \"\")\n+\t\t   (ashiftrt:DI (match_operand:DI 1 \"shiftdi_operand\" \"\")\n+\t\t\t\t(match_operand:QI 2 \"nonmemory_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n   \"\"\n   \"\n {\n-  if (TARGET_CMOVE && ! immediate_operand (operands[2], QImode))\n+  if (!TARGET_64BIT && TARGET_CMOVE && ! immediate_operand (operands[2], QImode))\n     {\n       emit_insn (gen_ashrdi3_1 (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n+  ix86_expand_binary_operator (ASHIFTRT, DImode, operands);\n+  DONE;\n }\")\n \n+(define_insn \"ashrdi3_63_rex64\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=*d,rm\")\n+\t(ashiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"*a,0\")\n+\t\t     (match_operand:DI 2 \"const_int_operand\" \"i,i\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_64BIT && INTVAL (operands[2]) == 63 && (TARGET_USE_CLTD || optimize_size)\n+   && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n+  \"@\n+   {cqto|cqo}\n+   sar{q}\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"imovx,ishift\")\n+   (set_attr \"prefix_0f\" \"0,*\")\n+   (set_attr \"length_immediate\" \"0,*\")\n+   (set_attr \"modrm\" \"0,1\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"*ashrdi3_1_one_bit_rex64\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(ashiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"sar{q}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:DI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n+(define_insn \"*ashrdi3_1_rex64\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm,rm\")\n+\t(ashiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,0\")\n+\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"n,c\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n+  \"@\n+   sar{q}\\\\t{%2, %0|%0, %2}\n+   sar{q}\\\\t{%b2, %0|%0, %b2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+;; This pattern can't accept a variable shift count, since shifts by\n+;; zero don't affect the flags.  We assume that shifts by constant\n+;; zero are optimized away.\n+(define_insn \"*ashrdi3_one_bit_cmp_rex64\"\n+  [(set (reg 17)\n+\t(compare\n+\t  (ashiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))\n+\t  (const_int 0)))\n+   (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(ashiftrt:DI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n+   && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n+  \"sar{q}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:DI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n+;; This pattern can't accept a variable shift count, since shifts by\n+;; zero don't affect the flags.  We assume that shifts by constant\n+;; zero are optimized away.\n+(define_insn \"*ashrdi3_cmp_rex64\"\n+  [(set (reg 17)\n+\t(compare\n+\t  (ashiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const_int_operand\" \"n\"))\n+\t  (const_int 0)))\n+   (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(ashiftrt:DI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n+  \"sar{q}\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+\n (define_insn \"ashrdi3_1\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"Jc\")))\n    (clobber (match_scratch:SI 3 \"=&r\"))\n    (clobber (reg:CC 17))]\n-  \"TARGET_CMOVE\"\n+  \"!TARGET_64BIT && TARGET_CMOVE\"\n   \"#\"\n   [(set_attr \"type\" \"multi\")])\n \n@@ -10523,7 +10806,7 @@\n \t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"Jc\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"#\"\n   [(set_attr \"type\" \"multi\")])\n \n@@ -10533,7 +10816,7 @@\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n    (clobber (match_scratch:SI 3 \"\"))\n    (clobber (reg:CC 17))]\n-  \"TARGET_CMOVE && reload_completed\"\n+  \"!TARGET_64BIT && TARGET_CMOVE && reload_completed\"\n   [(const_int 0)]\n   \"ix86_split_ashrdi (operands, operands[3]); DONE;\")\n \n@@ -10542,7 +10825,7 @@\n \t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"reload_completed\"\n+  \"!TARGET_64BIT && reload_completed\"\n   [(const_int 0)]\n   \"ix86_split_ashrdi (operands, NULL_RTX); DONE;\")\n \n@@ -10608,6 +10891,22 @@\n    (set_attr \"modrm\" \"0,1\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*ashrsi3_31_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=*d,r\")\n+\t(zero_extend:DI (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"*a,0\")\n+\t\t\t\t     (match_operand:SI 2 \"const_int_operand\" \"i,i\"))))\n+   (clobber (reg:CC 17))]\n+  \"INTVAL (operands[2]) == 31 && (TARGET_USE_CLTD || optimize_size)\n+   && TARGET_64BIT && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n+  \"@\n+   {cltd|cdq}\n+   sar{l}\\\\t{%2, %k0|%k0, %2}\"\n+  [(set_attr \"type\" \"imovx,ishift\")\n+   (set_attr \"prefix_0f\" \"0,*\")\n+   (set_attr \"length_immediate\" \"0,*\")\n+   (set_attr \"modrm\" \"0,1\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_expand \"ashrsi3\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n@@ -10630,6 +10929,17 @@\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n+(define_insn \"*ashrsi3_1_one_bit_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\"))))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"sar{l}\\\\t%k0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"length\" \"2\")])\n+\n (define_insn \"*ashrsi3_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,rm\")\n \t(ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n@@ -10642,6 +10952,18 @@\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*ashrsi3_1_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:DI (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n+\t\t\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"I,c\"))))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n+  \"@\n+   sar{l}\\\\t{%2, %k0|%k0, %2}\n+   sar{l}\\\\t{%b2, %k0|%k0, %b2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"mode\" \"SI\")])\n+\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n@@ -10663,6 +10985,21 @@\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n+(define_insn \"*ashrsi3_one_bit_cmp_zext\"\n+  [(set (reg 17)\n+\t(compare\n+\t  (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))\n+\t  (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI (ashiftrt:SI (match_dup 1) (match_dup 2))))]\n+  \"TARGET_64BIT && ix86_match_ccmode (insn, CCmode)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n+   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n+  \"sar{l}\\\\t%k0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"length\" \"2\")])\n+\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n@@ -10680,6 +11017,20 @@\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*ashrsi3_cmp_zext\"\n+  [(set (reg 17)\n+\t(compare\n+\t  (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"immediate_operand\" \"I\"))\n+\t  (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI (ashiftrt:SI (match_dup 1) (match_dup 2))))]\n+  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n+  \"sar{l}\\\\t{%2, %k0|%k0, %2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_expand \"ashrhi3\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n \t(ashiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n@@ -10829,20 +11180,86 @@\n ;; See comment above `ashldi3' about how this works.\n \n (define_expand \"lshrdi3\"\n-  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t\t   (lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-\t\t\t        (match_operand:QI 2 \"nonmemory_operand\" \"Jc\")))\n+  [(parallel [(set (match_operand:DI 0 \"shiftdi_operand\" \"\")\n+\t\t   (lshiftrt:DI (match_operand:DI 1 \"shiftdi_operand\" \"\")\n+\t\t\t        (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n   \"\"\n   \"\n {\n-  if (TARGET_CMOVE && ! immediate_operand (operands[2], QImode))\n+  if (!TARGET_64BIT && TARGET_CMOVE && ! immediate_operand (operands[2], QImode))\n     {\n       emit_insn (gen_lshrdi3_1 (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n+  ix86_expand_binary_operator (LSHIFTRT, DImode, operands);\n+  DONE;\n }\")\n \n+(define_insn \"*lshrdi3_1_one_bit_rex64\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(lshiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"shr{q}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:DI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n+(define_insn \"*lshrdi3_1_rex64\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm,rm\")\n+\t(lshiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,0\")\n+\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"J,c\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+  \"@\n+   shr{q}\\\\t{%2, %0|%0, %2}\n+   shr{q}\\\\t{%b2, %0|%0, %b2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+;; This pattern can't accept a variable shift count, since shifts by\n+;; zero don't affect the flags.  We assume that shifts by constant\n+;; zero are optimized away.\n+(define_insn \"*lshrdi3_cmp_one_bit_rex64\"\n+  [(set (reg 17)\n+\t(compare\n+\t  (lshiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))\n+\t  (const_int 0)))\n+   (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(lshiftrt:DI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+  \"shr{q}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:DI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n+;; This pattern can't accept a variable shift count, since shifts by\n+;; zero don't affect the flags.  We assume that shifts by constant\n+;; zero are optimized away.\n+(define_insn \"*lshrdi3_cmp_rex64\"\n+  [(set (reg 17)\n+\t(compare\n+\t  (lshiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const_int_operand\" \"e\"))\n+\t  (const_int 0)))\n+   (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(lshiftrt:DI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+  \"shr{q}\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"mode\" \"DI\")])\n+\n (define_insn \"lshrdi3_1\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n@@ -10903,6 +11320,17 @@\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n+(define_insn \"*lshrsi3_1_one_bit_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(lshiftrt:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"0\"))\n+\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"shr{l}\\\\t%k0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"length\" \"2\")])\n+\n (define_insn \"*lshrsi3_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,rm\")\n \t(lshiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n@@ -10915,6 +11343,19 @@\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*lshrsi3_1_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:DI\n+\t  (lshiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n+\t\t       (match_operand:QI 2 \"nonmemory_operand\" \"I,c\"))))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+  \"@\n+   shr{l}\\\\t{%2, %k0|%k0, %2}\n+   shr{l}\\\\t{%b2, %k0|%k0, %b2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"mode\" \"SI\")])\n+\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n@@ -10936,6 +11377,21 @@\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n+(define_insn \"*lshrsi3_cmp_one_bit_zext\"\n+  [(set (reg 17)\n+\t(compare\n+\t  (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))\n+\t  (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(lshiftrt:DI (zero_extend:DI (match_dup 1)) (match_dup 2)))]\n+  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+  \"shr{l}\\\\t%k0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"length\" \"2\")])\n+\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n@@ -10953,6 +11409,20 @@\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*lshrsi3_cmp_zext\"\n+  [(set (reg 17)\n+\t(compare\n+\t  (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"immediate_operand\" \"I\"))\n+\t  (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(lshiftrt:DI (zero_extend:DI (match_dup 1)) (match_dup 2)))]\n+  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+  \"shr{l}\\\\t{%2, %k0|%k0, %2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_expand \"lshrhi3\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n \t(lshiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n@@ -11099,6 +11569,40 @@\n \f\n ;; Rotate instructions\n \n+(define_expand \"rotldi3\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n+\t(rotate:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\")\n+\t\t   (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_64BIT\"\n+  \"ix86_expand_binary_operator (ROTATE, DImode, operands); DONE;\")\n+\n+(define_insn \"*rotlsi3_1_one_bit_rex64\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(rotate:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n+\t\t   (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (ROTATE, DImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"rol{q}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:DI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n+(define_insn \"*rotldi3_1_rex64\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm,rm\")\n+\t(rotate:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,0\")\n+\t\t   (match_operand:QI 2 \"nonmemory_operand\" \"e,c\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (ROTATE, DImode, operands)\"\n+  \"@\n+   rol{q}\\\\t{%2, %0|%0, %2}\n+   rol{q}\\\\t{%b2, %0|%0, %b2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"mode\" \"DI\")])\n+\n (define_expand \"rotlsi3\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(rotate:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n@@ -11121,6 +11625,18 @@\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n+(define_insn \"*rotlsi3_1_one_bit_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (rotate:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\"))))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (ROTATE, SImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"rol{l}\\\\t%k0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"length\" \"2\")])\n+\n (define_insn \"*rotlsi3_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,rm\")\n \t(rotate:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n@@ -11133,6 +11649,19 @@\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*rotlsi3_1_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:DI\n+\t  (rotate:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n+\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"I,c\"))))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (ROTATE, SImode, operands)\"\n+  \"@\n+   rol{l}\\\\t{%2, %k0|%k0, %2}\n+   rol{l}\\\\t{%b2, %k0|%k0, %b2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_expand \"rotlhi3\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n \t(rotate:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n@@ -11201,6 +11730,40 @@\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"QI\")])\n \n+(define_expand \"rotrdi3\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n+\t(rotatert:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\")\n+\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_64BIT\"\n+  \"ix86_expand_binary_operator (ROTATERT, DImode, operands); DONE;\")\n+\n+(define_insn \"*rotrdi3_1_one_bit_rex64\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(rotatert:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (ROTATERT, DImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"ror{q}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:DI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n+(define_insn \"*rotrdi3_1_rex64\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm,rm\")\n+\t(rotatert:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,0\")\n+\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"J,c\")))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (ROTATERT, DImode, operands)\"\n+  \"@\n+   ror{q}\\\\t{%2, %0|%0, %2}\n+   ror{q}\\\\t{%b2, %0|%0, %b2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"mode\" \"DI\")])\n+\n (define_expand \"rotrsi3\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(rotatert:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n@@ -11223,6 +11786,21 @@\n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n+(define_insn \"*rotrsi3_1_one_bit_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (rotatert:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (ROTATERT, SImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"ror{l}\\\\t%k0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n (define_insn \"*rotrsi3_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,rm\")\n \t(rotatert:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n@@ -11235,6 +11813,19 @@\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*rotrsi3_1_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:DI\n+\t  (rotatert:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n+\t\t       (match_operand:QI 2 \"nonmemory_operand\" \"I,c\"))))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (ROTATERT, SImode, operands)\"\n+  \"@\n+   ror{l}\\\\t{%2, %k0|%k0, %2}\n+   ror{l}\\\\t{%b2, %k0|%k0, %b2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_expand \"rotrhi3\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n \t(rotatert:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n@@ -13560,7 +14151,7 @@\n \t\t (const_int 4)))\n    (use (reg:SI 19))]\n   \"!TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n-  \"movsl|movsd\"\n+  \"{movsl|movsd}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"memory\" \"both\")])\n@@ -13576,7 +14167,7 @@\n \t\t (const_int 4)))\n    (use (reg:SI 19))]\n   \"TARGET_64BIT && (TARGET_SINGLE_STRINGOP || optimize_size)\"\n-  \"movsl|movsd\"\n+  \"{movsl|movsd}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"memory\" \"both\")])"}]}