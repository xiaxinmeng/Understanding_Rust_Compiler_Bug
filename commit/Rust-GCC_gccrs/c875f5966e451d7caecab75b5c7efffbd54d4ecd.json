{"sha": "c875f5966e451d7caecab75b5c7efffbd54d4ecd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg3NWY1OTY2ZTQ1MWQ3Y2FlY2FiNzViNWM3ZWZmZmJkNTRkNGVjZA==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@google.com", "date": "2011-09-15T21:00:03Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2011-09-15T21:00:03Z"}, "message": "Makefile.in (SYSROOT_CFLAGS_FOR_TARGET): Define from @SYSROOT_CFLAGS_FOR_TARGET@.\n\n\t* Makefile.in (SYSROOT_CFLAGS_FOR_TARGET): Define from\n\t@SYSROOT_CFLAGS_FOR_TARGET@.\n\t* configure.ac (SYSROOT_CFLAGS_FOR_TARGET): Set from\n\tbuild-sysroot.\n\t* configure: Regenerate.\n\t(site.exp): Add definition of TEST_ALWAYS_FLAGS.\n\tRemove setting of GCC_UNDER_TEST.\n\ntestsuite/ChangeLog\n\n\t* lib/g++.exp (g++_init): Add $TEST_ALWAYS_FLAGS to\n\tALWAYS_CXXFLAGS, if defined.\n\t* lib/gfortran.exp (gfortran_init): Add $TEST_ALWAYS_FLAGS to\n\tALWAYS_GFORTRANFLAGS, if defined.\n\t* lib/go.exp (go_target_compile): Add $TEST_ALWAYS_FLAGS to\n\tALWAYS_GOCFLAGS, if defined.\n\t* lib/obj-c++.exp (obj-c++_init): Add $TEST_ALWAYS_FLAGS to\n\tALWAYS_OBJCXXFLAGS, if defined.\n\t* lib/gcc.exp (gcc_target_compile): Add $TEST_ALWAYS_FLAGS to\n\tadditional_flags, if defined.\n\t* lib/gnat.exp (gnat_target_compile): Likewise.\n\t* lib/objc.exp (objc_target_compile): Likewise.\n\t* lib/target-supports-dg.exp (dg-add-options): Handle\n\tTEST_ALWAYS_FLAGS.\n\nFrom-SVN: r178897", "tree": {"sha": "701e6a3873944b6f2226d0e7a4c7b25e7c11f7fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/701e6a3873944b6f2226d0e7a4c7b25e7c11f7fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c875f5966e451d7caecab75b5c7efffbd54d4ecd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c875f5966e451d7caecab75b5c7efffbd54d4ecd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c875f5966e451d7caecab75b5c7efffbd54d4ecd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c875f5966e451d7caecab75b5c7efffbd54d4ecd/comments", "author": {"login": "dnovillo", "id": 7295335, "node_id": "MDQ6VXNlcjcyOTUzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7295335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnovillo", "html_url": "https://github.com/dnovillo", "followers_url": "https://api.github.com/users/dnovillo/followers", "following_url": "https://api.github.com/users/dnovillo/following{/other_user}", "gists_url": "https://api.github.com/users/dnovillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnovillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnovillo/subscriptions", "organizations_url": "https://api.github.com/users/dnovillo/orgs", "repos_url": "https://api.github.com/users/dnovillo/repos", "events_url": "https://api.github.com/users/dnovillo/events{/privacy}", "received_events_url": "https://api.github.com/users/dnovillo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54f80b7edf200d74dcfe78daca8a20ca38148e12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54f80b7edf200d74dcfe78daca8a20ca38148e12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54f80b7edf200d74dcfe78daca8a20ca38148e12"}], "stats": {"total": 114, "additions": 110, "deletions": 4}, "files": [{"sha": "f2b39a54a551e7362e159cf539964c9b8b6c1ae2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c875f5966e451d7caecab75b5c7efffbd54d4ecd", "patch": "@@ -1,3 +1,13 @@\n+2011-09-15   Diego Novillo  <dnovillo@google.com>\n+\n+\t* Makefile.in (SYSROOT_CFLAGS_FOR_TARGET): Define from\n+\t@SYSROOT_CFLAGS_FOR_TARGET@.\n+\t* configure.ac (SYSROOT_CFLAGS_FOR_TARGET): Set from\n+\tbuild-sysroot.\n+\t* configure: Regenerate.\n+\t(site.exp): Add definition of TEST_ALWAYS_FLAGS.\n+\tRemove setting of GCC_UNDER_TEST.\n+\n 2011-09-15  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (output_fp_compare): Return %v prefixed"}, {"sha": "92016f2f92b809fcccbb28ba7638d9a0970dae20", "filename": "gcc/Makefile.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c875f5966e451d7caecab75b5c7efffbd54d4ecd", "patch": "@@ -384,6 +384,9 @@ USER_H_INC_NEXT_POST = @user_headers_inc_next_post@\n # Don't use this as a dependency--use $(GCC_PASSES).\n GCC_FOR_TARGET = $(STAGE_CC_WRAPPER) ./xgcc -B./ -B$(build_tooldir)/bin/ -isystem $(build_tooldir)/include -isystem $(build_tooldir)/sys-include -L$(objdir)/../ld\n \n+# Set if the compiler was configured with --with-build-sysroot.\n+SYSROOT_CFLAGS_FOR_TARGET = @SYSROOT_CFLAGS_FOR_TARGET@\n+\n # This is used instead of ALL_CFLAGS when compiling with GCC_FOR_TARGET.\n # It specifies -B./.\n # It also specifies -isystem ./include to find, e.g., stddef.h.\n@@ -4923,6 +4926,9 @@ site.exp: ./config.status Makefile\n \t@echo \"set CXXFLAGS \\\"\\\"\" >> ./site.tmp\n \t@echo \"set HOSTCC \\\"$(CC)\\\"\" >> ./site.tmp\n \t@echo \"set HOSTCFLAGS \\\"$(CFLAGS)\\\"\" >> ./site.tmp\n+# TEST_ALWAYS_FLAGS are flags that should be passed to every compilation.\n+# They are passed first to allow individual tests to override them.\n+\t@echo \"set TEST_ALWAYS_FLAGS \\\"$(SYSROOT_CFLAGS_FOR_TARGET)\\\"\" >> ./site.tmp\n # When running the tests we set GCC_EXEC_PREFIX to the install tree so that\n # files that have already been installed there will be found.  The -B option\n # overrides it, so use of GCC_EXEC_PREFIX will not result in using GCC files"}, {"sha": "651471ca9c8be1e065e352acf5546a8db1d922d7", "filename": "gcc/configure", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=c875f5966e451d7caecab75b5c7efffbd54d4ecd", "patch": "@@ -764,6 +764,7 @@ CONFIGURE_SPECS\n CROSS_SYSTEM_HEADER_DIR\n TARGET_SYSTEM_ROOT_DEFINE\n TARGET_SYSTEM_ROOT\n+SYSROOT_CFLAGS_FOR_TARGET\n enable_shared\n enable_fixed_point\n enable_decimal_float\n@@ -7153,11 +7154,16 @@ fi\n \n # Check whether --with-build-sysroot was given.\n if test \"${with_build_sysroot+set}\" = set; then :\n-  withval=$with_build_sysroot;\n+  withval=$with_build_sysroot; if test x\"$withval\" != x ; then\n+     SYSROOT_CFLAGS_FOR_TARGET=\"--sysroot=$withval\"\n+   fi\n+else\n+  SYSROOT_CFLAGS_FOR_TARGET=\n fi\n \n \n \n+\n # Check whether --with-sysroot was given.\n if test \"${with_sysroot+set}\" = set; then :\n   withval=$with_sysroot;\n@@ -17915,7 +17921,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17918 \"configure\"\n+#line 17924 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18021,7 +18027,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18024 \"configure\"\n+#line 18030 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "126cb1964507dff5b23f355e61ee32d05277e3a1", "filename": "gcc/configure.ac", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=c875f5966e451d7caecab75b5c7efffbd54d4ecd", "patch": "@@ -727,7 +727,12 @@ AC_SUBST(enable_shared)\n \n AC_ARG_WITH(build-sysroot, \n   [AS_HELP_STRING([--with-build-sysroot=sysroot],\n-                  [use sysroot as the system root during the build])])\n+                  [use sysroot as the system root during the build])],\n+  [if test x\"$withval\" != x ; then\n+     SYSROOT_CFLAGS_FOR_TARGET=\"--sysroot=$withval\"\n+   fi],\n+  [SYSROOT_CFLAGS_FOR_TARGET=])\n+AC_SUBST(SYSROOT_CFLAGS_FOR_TARGET)\n \n AC_ARG_WITH(sysroot,\n [AS_HELP_STRING([[--with-sysroot[=DIR]]],"}, {"sha": "b337503f7e470585ac14f932c6c08f1300405c1c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c875f5966e451d7caecab75b5c7efffbd54d4ecd", "patch": "@@ -1,3 +1,20 @@\n+2011-09-15   Diego Novillo  <dnovillo@google.com>\n+\n+\t* lib/g++.exp (g++_init): Add $TEST_ALWAYS_FLAGS to\n+\tALWAYS_CXXFLAGS, if defined.\n+\t* lib/gfortran.exp (gfortran_init): Add $TEST_ALWAYS_FLAGS to\n+\tALWAYS_GFORTRANFLAGS, if defined.\n+\t* lib/go.exp (go_target_compile): Add $TEST_ALWAYS_FLAGS to\n+\tALWAYS_GOCFLAGS, if defined.\n+\t* lib/obj-c++.exp (obj-c++_init): Add $TEST_ALWAYS_FLAGS to\n+\tALWAYS_OBJCXXFLAGS, if defined.\n+\t* lib/gcc.exp (gcc_target_compile): Add $TEST_ALWAYS_FLAGS to\n+\tadditional_flags, if defined.\n+\t* lib/gnat.exp (gnat_target_compile): Likewise.\n+\t* lib/objc.exp (objc_target_compile): Likewise.\n+\t* lib/target-supports-dg.exp (dg-add-options): Handle\n+\tTEST_ALWAYS_FLAGS.\n+\n 2011-09-15  Tom de Vries  <tom@codesourcery.com>\n \n \tPR testsuite/50322"}, {"sha": "ff111253f125a36c837224dbca28bbe0d25f06c7", "filename": "gcc/testsuite/lib/g++.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp?ref=c875f5966e451d7caecab75b5c7efffbd54d4ecd", "patch": "@@ -190,6 +190,7 @@ proc g++_init { args } {\n     global TESTING_IN_BUILD_TREE\n     global gcc_warning_prefix\n     global gcc_error_prefix\n+    global TEST_ALWAYS_FLAGS\n \n     # We set LC_ALL and LANG to C so that we get the same error messages as expected.\n     setenv LC_ALL C\n@@ -241,6 +242,13 @@ proc g++_init { args } {\n \n     set ALWAYS_CXXFLAGS \"\"\n \n+    # TEST_ALWAYS_FLAGS are flags that should be passed to every\n+    # compilation command.  They are passed first to allow individual\n+    # tests to override them.\n+    if [info exists TEST_ALWAYS_FLAGS] {\n+\tlappend ALWAYS_CXXFLAGS \"additional_flags=$TEST_ALWAYS_FLAGS\"\n+    }\n+\n     if ![is_remote host] {\n \tif [info exists TOOL_OPTIONS] {\n \t    lappend ALWAYS_CXXFLAGS \"additional_flags=[g++_include_flags [get_multilibs ${TOOL_OPTIONS}] ]\""}, {"sha": "bb1763ad3431f5c36544f6a39114ac00a1112f27", "filename": "gcc/testsuite/lib/gcc.exp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2Ftestsuite%2Flib%2Fgcc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2Ftestsuite%2Flib%2Fgcc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc.exp?ref=c875f5966e451d7caecab75b5c7efffbd54d4ecd", "patch": "@@ -126,6 +126,7 @@ proc gcc_target_compile { source dest type options } {\n     global gluefile wrap_flags\n     global GCC_UNDER_TEST\n     global TOOL_OPTIONS\n+    global TEST_ALWAYS_FLAGS\n \t\n     if {[target_info needs_status_wrapper] != \"\" && \\\n \t    [target_info needs_status_wrapper] != \"0\" && \\\n@@ -143,11 +144,20 @@ proc gcc_target_compile { source dest type options } {\n     if [target_info exists gcc,no_label_values] {\n \tlappend options \"additional_flags=-DNO_LABEL_VALUES\"\n     }\n+\n+    # TEST_ALWAYS_FLAGS are flags that should be passed to every\n+    # compilation.  They are passed first to allow individual\n+    # tests to override them.\n+    if [info exists TEST_ALWAYS_FLAGS] {\n+\tset options [concat \"{additional_flags=$TEST_ALWAYS_FLAGS}\" $options]\n+    }\n+\n     # TOOL_OPTIONS must come first, so that it doesn't override testcase\n     # specific options.\n     if [info exists TOOL_OPTIONS] {\n \tset options [concat \"{additional_flags=$TOOL_OPTIONS}\" $options]\n     }\n+\n     lappend options \"timeout=[timeout_value]\"\n     lappend options \"compiler=$GCC_UNDER_TEST\"\n     set options [dg-additional-files-options $options $source]"}, {"sha": "d9934fc07ab4f6ee93c074ede32eb1349d158211", "filename": "gcc/testsuite/lib/gfortran.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2Ftestsuite%2Flib%2Fgfortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2Ftestsuite%2Flib%2Fgfortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgfortran.exp?ref=c875f5966e451d7caecab75b5c7efffbd54d4ecd", "patch": "@@ -144,6 +144,7 @@ proc gfortran_init { args } {\n     global TESTING_IN_BUILD_TREE\n     global gcc_warning_prefix\n     global gcc_error_prefix\n+    global TEST_ALWAYS_FLAGS\n \n     # We set LC_ALL and LANG to C so that we get the same error messages as expected.\n     setenv LC_ALL C\n@@ -194,6 +195,13 @@ proc gfortran_init { args } {\n \n     set ALWAYS_GFORTRANFLAGS \"\"\n \n+    # TEST_ALWAYS_FLAGS are flags that should be passed to every\n+    # compilation.  They are passed first to allow individual\n+    # tests to override them.\n+    if [info exists TEST_ALWAYS_FLAGS] {\n+\tlappend ALWAYS_GFORTRANFLAGS \"additional_flags=$TEST_ALWAYS_FLAGS\"\n+    }\n+\n     if ![is_remote host] {\n \tif [info exists TOOL_OPTIONS] {\n \t    lappend ALWAYS_GFORTRANFLAGS \"ldflags=[gfortran_link_flags [get_multilibs ${TOOL_OPTIONS}] ]\""}, {"sha": "21cfce4315b95c980e0bb796c6647eab31dc5054", "filename": "gcc/testsuite/lib/gnat.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2Ftestsuite%2Flib%2Fgnat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2Ftestsuite%2Flib%2Fgnat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgnat.exp?ref=c875f5966e451d7caecab75b5c7efffbd54d4ecd", "patch": "@@ -115,6 +115,7 @@ proc gnat_target_compile { source dest type options } {\n     global GNAT_UNDER_TEST\n     global TOOL_OPTIONS\n     global gnat_target_current\n+    global TEST_ALWAYS_FLAGS\n \n     # dg-require-effective-target tests must be compiled as C.\n     if [ string match \"*.c\" $source ] then {\n@@ -154,6 +155,13 @@ proc gnat_target_compile { source dest type options } {\n \tlappend options \"ldflags=$wrap_flags\"\n     }\n \n+    # TEST_ALWAYS_FLAGS are flags that should be passed to every\n+    # compilation.  They are passed first to allow individual\n+    # tests to override them.\n+    if [info exists TEST_ALWAYS_FLAGS] {\n+\tset options [concat \"{additional_flags=$TEST_ALWAYS_FLAGS}\" $options]\n+    }\n+\n     # TOOL_OPTIONS must come first, so that it doesn't override testcase\n     # specific options.\n     if [info exists TOOL_OPTIONS] {"}, {"sha": "e189ea135e157ae5bd0c2a3e035e34325cebea73", "filename": "gcc/testsuite/lib/go.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2Ftestsuite%2Flib%2Fgo.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2Ftestsuite%2Flib%2Fgo.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgo.exp?ref=c875f5966e451d7caecab75b5c7efffbd54d4ecd", "patch": "@@ -139,6 +139,7 @@ proc go_init { args } {\n     global TOOL_EXECUTABLE TOOL_OPTIONS\n     global GOC_UNDER_TEST\n     global TESTING_IN_BUILD_TREE\n+    global TEST_ALWAYS_FLAGS\n \n     # We set LC_ALL and LANG to C so that we get the same error messages as expected.\n     setenv LC_ALL C\n@@ -174,6 +175,13 @@ proc go_init { args } {\n \n     set ALWAYS_GOCFLAGS \"\"\n \n+    # TEST_ALWAYS_FLAGS are flags that should be passed to every\n+    # compilation.  They are passed first to allow individual\n+    # tests to override them.\n+    if [info exists TEST_ALWAYS_FLAGS] {\n+\tlappend ALWAYS_GOCFLAGS \"additional_flags=$TEST_ALWAYS_FLAGS\"\n+    }\n+\n     if ![is_remote host] {\n \tif [info exists TOOL_OPTIONS] {\n \t    lappend ALWAYS_GOCFLAGS \"additional_flags=[go_include_flags [get_multilibs ${TOOL_OPTIONS}] ]\""}, {"sha": "8c190cd2f58f0bf539448da7e81fc8d812658f1e", "filename": "gcc/testsuite/lib/obj-c++.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp?ref=c875f5966e451d7caecab75b5c7efffbd54d4ecd", "patch": "@@ -212,6 +212,7 @@ proc obj-c++_init { args } {\n     global TESTING_IN_BUILD_TREE\n     global gcc_warning_prefix\n     global gcc_error_prefix\n+    global TEST_ALWAYS_FLAGS\n \n     if ![info exists OBJCXX_UNDER_TEST] then {\n \tif [info exists TOOL_EXECUTABLE] {\n@@ -248,6 +249,13 @@ proc obj-c++_init { args } {\n \n     set ALWAYS_OBJCXXFLAGS \"\"\n \n+    # TEST_ALWAYS_FLAGS are flags that should be passed to every\n+    # compilation.  They are passed first to allow individual\n+    # tests to override them.\n+    if [info exists TEST_ALWAYS_FLAGS] {\n+\tlappend ALWAYS_OBJCXXFLAGS \"additional_flags=$TEST_ALWAYS_FLAGS\"\n+    }\n+\n     if ![is_remote host] {\n \tif [info exists TOOL_OPTIONS] {\n \t    lappend ALWAYS_OBJCXXFLAGS \"additional_flags=[obj-c++_include_flags [get_multilibs ${TOOL_OPTIONS}] ]\";"}, {"sha": "8cff974602f503a68cf756ff406e91fecfbe76c4", "filename": "gcc/testsuite/lib/objc.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc.exp?ref=c875f5966e451d7caecab75b5c7efffbd54d4ecd", "patch": "@@ -142,6 +142,7 @@ proc objc_target_compile { source dest type options } {\n     global ld_library_path\n     global objc_libgcc_s_path\n     global shlib_ext\n+    global TEST_ALWAYS_FLAGS\n     \n     set shlib_ext [get_shlib_extension]\n     set ld_library_path \".:${objc_libgcc_s_path}\"\n@@ -199,6 +200,14 @@ proc objc_target_compile { source dest type options } {\n     if [target_info exists objc,no_label_values] {\n \tlappend options \"additional_flags=-DNO_LABEL_VALUES\"\n     }\n+\n+    # TEST_ALWAYS_FLAGS are flags that should be passed to every\n+    # compilation.  They are passed first to allow individual\n+    # tests to override them.\n+    if [info exists TEST_ALWAYS_FLAGS] {\n+\tset options [concat \"{additional_flags=$TEST_ALWAYS_FLAGS}\" $options]\n+    }\n+\n     # TOOL_OPTIONS must come first, so that it doesn't override testcase\n     # specific options.\n     if [info exists TOOL_OPTIONS] {"}, {"sha": "a8f0a69a2e867439b2887e73faeda0b02eae09f4", "filename": "gcc/testsuite/lib/target-supports-dg.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c875f5966e451d7caecab75b5c7efffbd54d4ecd/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp?ref=c875f5966e451d7caecab75b5c7efffbd54d4ecd", "patch": "@@ -262,6 +262,7 @@ proc dg-add-options { args } {\n proc check-flags { args } {\n     global compiler_flags\n     global TOOL_OPTIONS\n+    global TEST_ALWAYS_FLAGS\n \n     # The args are within another list; pull them out.\n     set args [lindex $args 0]\n@@ -272,6 +273,8 @@ proc check-flags { args } {\n     append compiler_flags [current_compiler_flags]\n     # If running a subset of the test suite, $TOOL_OPTIONS may not exist.\n     catch {append compiler_flags \" $TOOL_OPTIONS \"}\n+    # If running a subset of the test suite, $TEST_ALWAYS_FLAGS may not exist.\n+    catch {append compiler_flags \" $TEST_ALWAYS_FLAGS \"}\n     set dest [target_info name]\n     if [board_info $dest exists multilib_flags] {\n \tappend compiler_flags \"[board_info $dest multilib_flags] \""}]}