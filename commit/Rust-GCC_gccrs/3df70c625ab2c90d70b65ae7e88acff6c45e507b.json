{"sha": "3df70c625ab2c90d70b65ae7e88acff6c45e507b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RmNzBjNjI1YWIyYzkwZDcwYjY1YWU3ZTg4YWNmZjZjNDVlNTA3Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-04-22T20:59:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-04-22T20:59:02Z"}, "message": "Core 1586\n\n\tCore 1586\n\t* parser.c (cp_parser_unqualified_id): Handle ~auto.\n\t(cp_parser_pseudo_destructor_name): Likewise.\n\t(cp_parser_postfix_dot_deref_expression): Adjust.\n\t(cp_lexer_nth_token_is_keyword): New.\n\t* semantics.c (finish_pseudo_destructor_expr): Handle ~auto.\n\t* typeck.c (lookup_destructor): Handle ~auto.\n\nFrom-SVN: r198162", "tree": {"sha": "a7ee80a1d1e803b9195fad27f8abc76c6a7fab2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7ee80a1d1e803b9195fad27f8abc76c6a7fab2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3df70c625ab2c90d70b65ae7e88acff6c45e507b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df70c625ab2c90d70b65ae7e88acff6c45e507b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3df70c625ab2c90d70b65ae7e88acff6c45e507b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df70c625ab2c90d70b65ae7e88acff6c45e507b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3579964bee6f4b621322d367de1fa6ce4b36befc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3579964bee6f4b621322d367de1fa6ce4b36befc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3579964bee6f4b621322d367de1fa6ce4b36befc"}], "stats": {"total": 82, "additions": 75, "deletions": 7}, "files": [{"sha": "e41a0799839c763fecc993fa23b22cfdf3dad52c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df70c625ab2c90d70b65ae7e88acff6c45e507b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df70c625ab2c90d70b65ae7e88acff6c45e507b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3df70c625ab2c90d70b65ae7e88acff6c45e507b", "patch": "@@ -1,5 +1,13 @@\n 2013-04-22  Jason Merrill  <jason@redhat.com>\n \n+\tCore 1586\n+\t* parser.c (cp_parser_unqualified_id): Handle ~auto.\n+\t(cp_parser_pseudo_destructor_name): Likewise.\n+\t(cp_parser_postfix_dot_deref_expression): Adjust.\n+\t(cp_lexer_nth_token_is_keyword): New.\n+\t* semantics.c (finish_pseudo_destructor_expr): Handle ~auto.\n+\t* typeck.c (lookup_destructor): Handle ~auto.\n+\n \t* pt.c (fn_type_unification): Push tinst level around\n \ttype_unification_real if we aren't explaining.\n \t* cp-tree.h (TFF_NO_TEMPLATE_BINDINGS): New."}, {"sha": "0456dd297613b802acb8d2b698cbb57b73ff2acd", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df70c625ab2c90d70b65ae7e88acff6c45e507b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df70c625ab2c90d70b65ae7e88acff6c45e507b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=3df70c625ab2c90d70b65ae7e88acff6c45e507b", "patch": "@@ -866,6 +866,12 @@ cp_lexer_next_token_is_keyword (cp_lexer* lexer, enum rid keyword)\n   return cp_lexer_peek_token (lexer)->keyword == keyword;\n }\n \n+static inline bool\n+cp_lexer_nth_token_is_keyword (cp_lexer* lexer, size_t n, enum rid keyword)\n+{\n+  return cp_lexer_peek_nth_token (lexer, n)->keyword == keyword;\n+}\n+\n /* Return true if the next token is not the indicated KEYWORD.  */\n \n static inline bool\n@@ -1860,7 +1866,7 @@ static vec<tree, va_gc> *cp_parser_parenthesized_expression_list\n /* Values for the second parameter of cp_parser_parenthesized_expression_list.  */\n enum { non_attr = 0, normal_attr = 1, id_attr = 2 };\n static void cp_parser_pseudo_destructor_name\n-  (cp_parser *, tree *, tree *);\n+  (cp_parser *, tree, tree *, tree *);\n static tree cp_parser_unary_expression\n   (cp_parser *, bool, bool, cp_id_kind *);\n static enum tree_code cp_parser_unary_operator\n@@ -4821,6 +4827,17 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t    return build_nt (BIT_NOT_EXPR, scope);\n \t  }\n \n+\t/* ~auto means the destructor of whatever the object is.  */\n+\tif (cp_parser_is_keyword (token, RID_AUTO))\n+\t  {\n+\t    if (cxx_dialect < cxx1y)\n+\t      pedwarn (input_location, 0,\n+\t\t       \"%<~auto%> only available with \"\n+\t\t       \"-std=c++1y or -std=gnu++1y\");\n+\t    cp_lexer_consume_token (parser->lexer);\n+\t    return build_nt (BIT_NOT_EXPR, make_auto ());\n+\t  }\n+\n \t/* If there was an explicit qualification (S::~T), first look\n \t   in the scope given by the qualification (i.e., S).\n \n@@ -6171,18 +6188,18 @@ cp_parser_postfix_dot_deref_expression (cp_parser *parser,\n       cp_parser_parse_tentatively (parser);\n       /* Parse the pseudo-destructor-name.  */\n       s = NULL_TREE;\n-      cp_parser_pseudo_destructor_name (parser, &s, &type);\n+      cp_parser_pseudo_destructor_name (parser, postfix_expression,\n+\t\t\t\t\t&s, &type);\n       if (dependent_p\n \t  && (cp_parser_error_occurred (parser)\n-\t      || TREE_CODE (type) != TYPE_DECL\n-\t      || !SCALAR_TYPE_P (TREE_TYPE (type))))\n+\t      || !SCALAR_TYPE_P (type)))\n \tcp_parser_abort_tentative_parse (parser);\n       else if (cp_parser_parse_definitely (parser))\n \t{\n \t  pseudo_destructor_p = true;\n \t  postfix_expression\n \t    = finish_pseudo_destructor_expr (postfix_expression,\n-\t\t\t\t\t     s, TREE_TYPE (type));\n+\t\t\t\t\t     s, type);\n \t}\n     }\n \n@@ -6443,11 +6460,28 @@ cp_parser_parenthesized_expression_list (cp_parser* parser,\n \n static void\n cp_parser_pseudo_destructor_name (cp_parser* parser,\n+\t\t\t\t  tree object,\n \t\t\t\t  tree* scope,\n \t\t\t\t  tree* type)\n {\n   bool nested_name_specifier_p;\n \n+  /* Handle ~auto.  */\n+  if (cp_lexer_next_token_is (parser->lexer, CPP_COMPL)\n+      && cp_lexer_nth_token_is_keyword (parser->lexer, 2, RID_AUTO)\n+      && !type_dependent_expression_p (object))\n+    {\n+      if (cxx_dialect < cxx1y)\n+\tpedwarn (input_location, 0,\n+\t\t \"%<~auto%> only available with \"\n+\t\t \"-std=c++1y or -std=gnu++1y\");\n+      cp_lexer_consume_token (parser->lexer);\n+      cp_lexer_consume_token (parser->lexer);\n+      *scope = NULL_TREE;\n+      *type = TREE_TYPE (object);\n+      return;\n+    }\n+\n   /* Assume that things will not work out.  */\n   *type = error_mark_node;\n \n@@ -6515,7 +6549,7 @@ cp_parser_pseudo_destructor_name (cp_parser* parser,\n \n   /* Look for the type-name again.  We are not responsible for\n      checking that it matches the first type-name.  */\n-  *type = cp_parser_nonclass_name (parser);\n+  *type = TREE_TYPE (cp_parser_nonclass_name (parser));\n }\n \n /* Parse a unary-expression."}, {"sha": "d4f0f825a4a9e6d2a5c89e9efdcb2c7960c40cb1", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df70c625ab2c90d70b65ae7e88acff6c45e507b/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df70c625ab2c90d70b65ae7e88acff6c45e507b/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=3df70c625ab2c90d70b65ae7e88acff6c45e507b", "patch": "@@ -2373,6 +2373,8 @@ finish_pseudo_destructor_expr (tree object, tree scope, tree destructor)\n \t  error (\"invalid qualifying scope in pseudo-destructor name\");\n \t  return error_mark_node;\n \t}\n+      if (is_auto (destructor))\n+\tdestructor = TREE_TYPE (object);\n       if (scope && TYPE_P (scope) && !check_dtor_name (scope, destructor))\n \t{\n \t  error (\"qualified type %qT does not match destructor name ~%qT\","}, {"sha": "c0696e08ca2c4e4e6c71d2bd9fa13a008375ab12", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df70c625ab2c90d70b65ae7e88acff6c45e507b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df70c625ab2c90d70b65ae7e88acff6c45e507b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=3df70c625ab2c90d70b65ae7e88acff6c45e507b", "patch": "@@ -2483,7 +2483,9 @@ lookup_destructor (tree object, tree scope, tree dtor_name,\n \t       scope, dtor_type);\n       return error_mark_node;\n     }\n-  if (identifier_p (dtor_type))\n+  if (is_auto (dtor_type))\n+    dtor_type = object_type;\n+  else if (identifier_p (dtor_type))\n     {\n       /* In a template, names we can't find a match for are still accepted\n \t destructor names, and we check them here.  */"}, {"sha": "71050950775a6e953d3b31662b51fbb71f2037a7", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-dtor1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df70c625ab2c90d70b65ae7e88acff6c45e507b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-dtor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df70c625ab2c90d70b65ae7e88acff6c45e507b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-dtor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-dtor1.C?ref=3df70c625ab2c90d70b65ae7e88acff6c45e507b", "patch": "@@ -0,0 +1,22 @@\n+// DR 1586\n+// { dg-options \"-std=c++1y\" }\n+// { dg-do run }\n+\n+template <class T>\n+void f (T* p)\n+{\n+  p->~auto();\n+}\n+\n+int d;\n+struct A { ~A() { ++d; } };\n+\n+int main()\n+{\n+  f(new int(42));\n+  f(new A);\n+  if (d != 1)\n+    throw;\n+\n+  (new int)->~auto();\n+}"}]}