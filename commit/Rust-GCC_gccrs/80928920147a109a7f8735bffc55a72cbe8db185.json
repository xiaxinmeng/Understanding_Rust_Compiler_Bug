{"sha": "80928920147a109a7f8735bffc55a72cbe8db185", "node_id": "C_kwDOANBUbNoAKDgwOTI4OTIwMTQ3YTEwOWE3Zjg3MzViZmZjNTVhNzJjYmU4ZGIxODU", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-07-20T23:57:32Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-08-01T18:28:43Z"}, "message": "x86: Add ix86_ifunc_ref_local_ok\n\nWe can't always use the PLT entry as the function address for local IFUNC\nfunctions.  When the PIC register is needed for PLT call, indirect call\nvia the PLT entry will fail since the PIC register may not be set up\nproperly for indirect call.  Add ix86_ifunc_ref_local_ok to return false\nwhen the PLT entry can't be used as local IFUNC function pointers.\n\ngcc/\n\n\tPR target/83782\n\t* config/i386/i386.cc (ix86_ifunc_ref_local_ok): New.\n\t(TARGET_IFUNC_REF_LOCAL_OK): Use it.\n\ngcc/testsuite/\n\n\tPR target/83782\n\t* gcc.target/i386/pr83782-1.c: Require non-ia32.\n\t* gcc.target/i386/pr83782-2.c: Likewise.\n\t* gcc.target/i386/pr83782-3.c: New test.", "tree": {"sha": "c3ac6187809c53e614b8f72a8597651aa52f1be3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3ac6187809c53e614b8f72a8597651aa52f1be3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80928920147a109a7f8735bffc55a72cbe8db185", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80928920147a109a7f8735bffc55a72cbe8db185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80928920147a109a7f8735bffc55a72cbe8db185", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80928920147a109a7f8735bffc55a72cbe8db185/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32566720f3a9135fa355f0304f024a79f107a1b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32566720f3a9135fa355f0304f024a79f107a1b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32566720f3a9135fa355f0304f024a79f107a1b8"}], "stats": {"total": 59, "additions": 50, "deletions": 9}, "files": [{"sha": "5e30dc884bf981408d9a8013f3f64c0ef276115b", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80928920147a109a7f8735bffc55a72cbe8db185/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80928920147a109a7f8735bffc55a72cbe8db185/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=80928920147a109a7f8735bffc55a72cbe8db185", "patch": "@@ -16070,6 +16070,19 @@ ix86_call_use_plt_p (rtx call_op)\n   return true;\n }\n \n+/* Implement TARGET_IFUNC_REF_LOCAL_OK.  If this hook returns true,\n+   the PLT entry will be used as the function address for local IFUNC\n+   functions.  When the PIC register is needed for PLT call, indirect\n+   call via the PLT entry will fail since the PIC register may not be\n+   set up properly for indirect call.  In this case, we should return\n+   false.  */\n+\n+static bool\n+ix86_ifunc_ref_local_ok (void)\n+{\n+  return !flag_pic || (TARGET_64BIT && ix86_cmodel != CM_LARGE_PIC);\n+}\n+\n /* Return true if the function being called was marked with attribute\n    \"noplt\" or using -fno-plt and we are compiling for non-PIC.  We need\n    to handle the non-PIC case in the backend because there is no easy\n@@ -24953,7 +24966,7 @@ ix86_libgcc_floating_mode_supported_p\n   ix86_get_multilib_abi_name\n \n #undef TARGET_IFUNC_REF_LOCAL_OK\n-#define TARGET_IFUNC_REF_LOCAL_OK hook_bool_void_true\n+#define TARGET_IFUNC_REF_LOCAL_OK ix86_ifunc_ref_local_ok\n \n #if !TARGET_MACHO && !TARGET_DLLIMPORT_DECL_ATTRIBUTES\n # undef TARGET_ASM_RELOC_RW_MASK"}, {"sha": "85674346aec85eb3d5a85c67f3ba7dc8d405441f", "filename": "gcc/testsuite/gcc.target/i386/pr83782-1.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80928920147a109a7f8735bffc55a72cbe8db185/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83782-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80928920147a109a7f8735bffc55a72cbe8db185/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83782-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83782-1.c?ref=80928920147a109a7f8735bffc55a72cbe8db185", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile } */\n+/* { dg-do compile { target { ! ia32 } } } */\n /* { dg-require-ifunc \"\" } */\n /* { dg-options \"-O2 -fpic\" } */\n \n@@ -20,7 +20,5 @@ bar(void)\n   return foo;\n }\n \n-/* { dg-final { scan-assembler {leal[ \\t]foo@GOTOFF\\(%[^,]*\\),[ \\t]%eax} { target ia32 } } } */\n-/* { dg-final { scan-assembler {lea(?:l|q)[ \\t]foo\\(%rip\\),[ \\t]%(?:e|r)ax} { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-not \"foo@GOT\\\\\\(\" { target ia32 } } } */\n-/* { dg-final { scan-assembler-not \"foo@GOTPCREL\\\\\\(\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler {lea(?:l|q)[ \\t]foo\\(%rip\\),[ \\t]%(?:e|r)ax} } } */\n+/* { dg-final { scan-assembler-not \"foo@GOTPCREL\\\\\\(\" } } */"}, {"sha": "a654ded771f91f5ca3e8cac9ba2eca4f65a5b5de", "filename": "gcc/testsuite/gcc.target/i386/pr83782-2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80928920147a109a7f8735bffc55a72cbe8db185/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83782-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80928920147a109a7f8735bffc55a72cbe8db185/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83782-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83782-2.c?ref=80928920147a109a7f8735bffc55a72cbe8db185", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile } */\n+/* { dg-do compile { target { ! ia32 } } } */\n /* { dg-require-ifunc \"\" } */\n /* { dg-options \"-O2 -fpic\" } */\n \n@@ -20,7 +20,5 @@ bar(void)\n   return foo;\n }\n \n-/* { dg-final { scan-assembler {leal[ \\t]foo@GOTOFF\\(%[^,]*\\),[ \\t]%eax} { target ia32 } } } */\n /* { dg-final { scan-assembler {lea(?:l|q)[ \\t]foo\\(%rip\\),[ \\t]%(?:e|r)ax} { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-not \"foo@GOT\\\\\\(\" { target ia32 } } } */\n /* { dg-final { scan-assembler-not \"foo@GOTPCREL\\\\\\(\" { target { ! ia32 } } } } */"}, {"sha": "1536481cb79aa717f287393180818b7bbc7352ac", "filename": "gcc/testsuite/gcc.target/i386/pr83782-3.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80928920147a109a7f8735bffc55a72cbe8db185/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83782-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80928920147a109a7f8735bffc55a72cbe8db185/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83782-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr83782-3.c?ref=80928920147a109a7f8735bffc55a72cbe8db185", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run }  */\n+/* { dg-require-ifunc \"\" } */\n+/* { dg-require-effective-target pie } */\n+/* { dg-options \"-fpie -pie\" } */\n+\n+#include <stdio.h>\n+\n+static int __attribute__((noinline))\n+implementation (void)\n+{\n+  printf (\"'ere I am JH\\n\");\n+  return 0;\n+}\n+\n+static __typeof__ (implementation) *resolver (void)\n+{\n+  return (void *)implementation;\n+}\n+\n+extern int magic (void) __attribute__ ((ifunc (\"resolver\")));\n+\n+__attribute__ ((weak))\n+int\n+call_magic (int (*ptr) (void))\n+{\n+  return ptr ();\n+}\n+\n+int main ()\n+{\n+  return call_magic (magic);\n+}"}]}