{"sha": "9e2f83a5e87d2956dd67b4ec2338426d07a730bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUyZjgzYTVlODdkMjk1NmRkNjdiNGVjMjMzODQyNmQwN2E3MzBiYw==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2007-05-14T21:58:42Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2007-05-14T21:58:42Z"}, "message": "tree-ssa-loop-niter.c (record_estimate): Use GGC_NEW to allocate struct nb_iter_bound.\n\n\t* tree-ssa-loop-niter.c (record_estimate): Use GGC_NEW to allocate\n\tstruct nb_iter_bound.\n\t(free_numbers_of_iterations_estimates_loop): Use ggc_free.\n\t* gengtype.c (open_base_files): Add cfhloop.h to the list of includes.\n\t* cfgloopmanip.c (place_new_loop): Vector larray is gc-allocated.\n\t* tree-scalar-evolution.c: Include gt-tree-scalar-evolution.h.\n\t(struct scev_info_str, scalar_evolution_info): Add GTY markers.\n\t(new_scev_info_str): Use GGC_NEW to allocate struct scev_info_str.\n\t(del_scev_info): Use ggc_free.\n\t(scev_initialize): Allocate scalar_evolution_info in gc memory.\n\t* loop-init.c: Include ggc.h.\n\t(loop_optimizer_init): Use GGC_CNEW to allocate struct loops.\n\t(loop_optimizer_finalize): Use ggc_free.\n\t* tree-ssa-loop.c (pass_tree_unswitch, pass_vectorize,\n\tpass_linear_transfom, pass_empty_loop, pass_complete_unroll,\n\tpass_iv_optimize): Add TODO_ggc_collect.\n\t* function.h (struct function): Remove skip marker from x_current_loops.\n\t* cfgloop.c: Include ggc.h.\n\t(flow_loops_free, flow_loop_free): Free the loop descriptions in gc\n\tmemory.\n\t(establish_preds): Vector superloops is gc allocated.\n\t(alloc_loop): Allocate loop using GGC_CNEW.  Allocate head of\n\tloop->exits list.\n\t(flow_loops_find): Vector larray is gc allocated.\n\t(loop_exit_free): Use ggc_free.\n\t(rescan_loop_exit): Use GGC_NEW to allocate struct loop_exit.  Reflect\n\tthat head of exits list is now not a part of struct loop.\n\t(record_loop_exits): Allocate exits table in gc memory.\n\t(get_loop_exit_edges, verify_loop_structure, single_exit): Reflect that\n\thead of exits list is now not a part of struct loop.\n\t* cfgloop.h (struct lpt_decision, struct nb_iter_bound,\n\tstruct loop_exit): Add GTY marker.\n\t(struct loop): Add GTY marker.  Make superloops vector gc allocated.\n\tAdd skip marker to aux field.  Make head of exits list a separate\n\tobject.\n\t(struct loops): Add GTY marker.  Make larray vector gc allocated.\n\tAdd param marker to exits table.\n\t(get_loops): Type changed.\n\t* Makefile.in (tree-scalar-evolution.o): Add gt-tree-scalar-evolution.h\n\tdependency.\n\t(cfgloop.o, loop-init.o): Add ggc.h dependency.\n\t(GTFILES): Add cfgloop.h and tree-scalar-evolution.c.\n\t* basic-block.h (struct basic_block_def): Remove skip marker from\n\tloop_father field.\n\nFrom-SVN: r124727", "tree": {"sha": "61d0e4895414c91784867c1c8a939465c09eb6a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61d0e4895414c91784867c1c8a939465c09eb6a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e2f83a5e87d2956dd67b4ec2338426d07a730bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2f83a5e87d2956dd67b4ec2338426d07a730bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e2f83a5e87d2956dd67b4ec2338426d07a730bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/comments", "author": null, "committer": null, "parents": [{"sha": "9c49a5e4b3295ed1376f0457cc6178aa2f95cd60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c49a5e4b3295ed1376f0457cc6178aa2f95cd60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c49a5e4b3295ed1376f0457cc6178aa2f95cd60"}], "stats": {"total": 200, "additions": 133, "deletions": 67}, "files": [{"sha": "26d474df6236b6c90e4231e8a1aa20357ca8b3f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e2f83a5e87d2956dd67b4ec2338426d07a730bc", "patch": "@@ -1,3 +1,50 @@\n+2007-05-15  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\t* tree-ssa-loop-niter.c (record_estimate): Use GGC_NEW to allocate\n+\tstruct nb_iter_bound.\n+\t(free_numbers_of_iterations_estimates_loop): Use ggc_free.\n+\t* gengtype.c (open_base_files): Add cfhloop.h to the list of includes.\n+\t* cfgloopmanip.c (place_new_loop): Vector larray is gc-allocated.\n+\t* tree-scalar-evolution.c: Include gt-tree-scalar-evolution.h.\n+\t(struct scev_info_str, scalar_evolution_info): Add GTY markers.\n+\t(new_scev_info_str): Use GGC_NEW to allocate struct scev_info_str.\n+\t(del_scev_info): Use ggc_free.\n+\t(scev_initialize): Allocate scalar_evolution_info in gc memory.\n+\t* loop-init.c: Include ggc.h.\n+\t(loop_optimizer_init): Use GGC_CNEW to allocate struct loops.\n+\t(loop_optimizer_finalize): Use ggc_free.\n+\t* tree-ssa-loop.c (pass_tree_unswitch, pass_vectorize,\n+\tpass_linear_transfom, pass_empty_loop, pass_complete_unroll,\n+\tpass_iv_optimize): Add TODO_ggc_collect.\n+\t* function.h (struct function): Remove skip marker from x_current_loops.\n+\t* cfgloop.c: Include ggc.h.\n+\t(flow_loops_free, flow_loop_free): Free the loop descriptions in gc\n+\tmemory.\n+\t(establish_preds): Vector superloops is gc allocated.\n+\t(alloc_loop): Allocate loop using GGC_CNEW.  Allocate head of\n+\tloop->exits list.\n+\t(flow_loops_find): Vector larray is gc allocated.\n+\t(loop_exit_free): Use ggc_free.\n+\t(rescan_loop_exit): Use GGC_NEW to allocate struct loop_exit.  Reflect\n+\tthat head of exits list is now not a part of struct loop.\n+\t(record_loop_exits): Allocate exits table in gc memory.\n+\t(get_loop_exit_edges, verify_loop_structure, single_exit): Reflect that\n+\thead of exits list is now not a part of struct loop.\n+\t* cfgloop.h (struct lpt_decision, struct nb_iter_bound,\n+\tstruct loop_exit): Add GTY marker.\n+\t(struct loop): Add GTY marker.  Make superloops vector gc allocated.\n+\tAdd skip marker to aux field.  Make head of exits list a separate\n+\tobject.\n+\t(struct loops): Add GTY marker.  Make larray vector gc allocated.\n+\tAdd param marker to exits table.\n+\t(get_loops): Type changed.\n+\t* Makefile.in (tree-scalar-evolution.o): Add gt-tree-scalar-evolution.h\n+\tdependency.\n+\t(cfgloop.o, loop-init.o): Add ggc.h dependency.\n+\t(GTFILES): Add cfgloop.h and tree-scalar-evolution.c.\n+\t* basic-block.h (struct basic_block_def): Remove skip marker from\n+\tloop_father field.\n+\n 2007-05-14  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* builtins.c (expand_builtin_mathfn): Use EXPAND_NORMAL instead"}, {"sha": "bdd5a86b61bac06a3e32858dc1e24b6b977bc561", "filename": "gcc/Makefile.in", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9e2f83a5e87d2956dd67b4ec2338426d07a730bc", "patch": "@@ -2188,7 +2188,8 @@ tree-chrec.o: tree-chrec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n tree-scalar-evolution.o: tree-scalar-evolution.c $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TM_H) $(GGC_H) $(TREE_H) $(REAL_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) $(DIAGNOSTIC_H) $(TREE_FLOW_H) $(TREE_DUMP_H) \\\n-   $(TIMEVAR_H) $(CFGLOOP_H) $(SCEV_H) tree-pass.h $(FLAGS_H) tree-chrec.h\n+   $(TIMEVAR_H) $(CFGLOOP_H) $(SCEV_H) tree-pass.h $(FLAGS_H) tree-chrec.h \\\n+   gt-tree-scalar-evolution.h\n tree-data-ref.o: tree-data-ref.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(GGC_H) $(TREE_H) $(RTL_H) $(BASIC_BLOCK_H) $(DIAGNOSTIC_H) \\\n    $(TREE_FLOW_H) $(TREE_DUMP_H) $(TIMEVAR_H) $(CFGLOOP_H) \\\n@@ -2571,7 +2572,8 @@ cfgcleanup.o : cfgcleanup.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(REGS_H) $(EMIT_RTL_H) $(CFGLAYOUT_H) tree-pass.h $(CFGLOOP_H) $(EXPR_H)\n cfgloop.o : cfgloop.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) coretypes.h $(TM_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(FLAGS_H) $(FUNCTION_H) \\\n-   $(OBSTACK_H) toplev.h $(TREE_FLOW_H) $(TREE_H) pointer-set.h output.h\n+   $(OBSTACK_H) toplev.h $(TREE_FLOW_H) $(TREE_H) pointer-set.h output.h \\\n+   $(GGC_H)\n cfgloopanal.o : cfgloopanal.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(EXPR_H) coretypes.h $(TM_H) \\\n    $(OBSTACK_H) output.h\n@@ -2589,7 +2591,7 @@ loop-invariant.o : loop-invariant.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n cfgloopmanip.o : cfgloopmanip.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(CFGLAYOUT_H) output.h \\\n    coretypes.h $(TM_H) cfghooks.h $(OBSTACK_H)\n-loop-init.o : loop-init.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n+loop-init.o : loop-init.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(GGC_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(CFGLAYOUT_H) \\\n    coretypes.h $(TM_H) $(OBSTACK_H) tree-pass.h $(TIMEVAR_H) $(FLAGS_H)\n loop-unswitch.o : loop-unswitch.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TM_H) \\\n@@ -2977,7 +2979,7 @@ GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/coverage.c $(srcdir)/rtl.h \\\n   $(srcdir)/optabs.h $(srcdir)/tree.h $(srcdir)/function.h $(srcdir)/libfuncs.h $(SYMTAB_H) \\\n   $(srcdir)/real.h $(srcdir)/varray.h $(srcdir)/insn-addr.h $(srcdir)/hwint.h \\\n-  $(srcdir)/ipa-reference.h $(srcdir)/output.h \\\n+  $(srcdir)/ipa-reference.h $(srcdir)/output.h $(srcdir)/cfgloop.h \\\n   $(srcdir)/cselib.h $(srcdir)/basic-block.h  $(srcdir)/cgraph.h \\\n   $(srcdir)/reload.h \\\n   $(srcdir)/alias.c $(srcdir)/bitmap.c $(srcdir)/cselib.c $(srcdir)/cgraph.c \\\n@@ -2991,7 +2993,7 @@ GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/reg-stack.c $(srcdir)/cfglayout.c $(srcdir)/cfglayout.h \\\n   $(srcdir)/sdbout.c $(srcdir)/stor-layout.c \\\n   $(srcdir)/stringpool.c $(srcdir)/tree.c $(srcdir)/varasm.c \\\n-  $(srcdir)/tree-mudflap.c $(srcdir)/tree-flow.h \\\n+  $(srcdir)/tree-mudflap.c $(srcdir)/tree-flow.h $(srcdir)/tree-scalar-evolution.c \\\n   $(srcdir)/tree-ssanames.c $(srcdir)/tree-eh.c $(srcdir)/tree-ssa-address.c \\\n   $(srcdir)/tree-phinodes.c $(srcdir)/tree-cfg.c \\\n   $(srcdir)/tree-dfa.c $(srcdir)/tree-ssa-propagate.c \\"}, {"sha": "4684369e4e0b26e072c7607b18a8401af5e01496", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=9e2f83a5e87d2956dd67b4ec2338426d07a730bc", "patch": "@@ -221,7 +221,7 @@ struct basic_block_def GTY((chain_next (\"%h.next_bb\"), chain_prev (\"%h.prev_bb\")\n   PTR GTY ((skip (\"\"))) aux;\n \n   /* Innermost loop containing the block.  */\n-  struct loop * GTY ((skip (\"\"))) loop_father;\n+  struct loop *loop_father;\n \n   /* The dominance and postdominance information node.  */\n   struct et_node * GTY ((skip (\"\"))) dom[2];"}, {"sha": "66461d994af0e65c857c459276671d6d70de4fc7", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 31, "deletions": 26, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=9e2f83a5e87d2956dd67b4ec2338426d07a730bc", "patch": "@@ -34,6 +34,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"tree-flow.h\"\n #include \"pointer-set.h\"\n #include \"output.h\"\n+#include \"ggc.h\"\n \n static void flow_loops_cfg_dump (FILE *);\n \f\n@@ -174,25 +175,27 @@ flow_loops_dump (FILE *file, void (*loop_dump_aux) (const struct loop *, FILE *,\n }\n \n /* Free data allocated for LOOP.  */\n+\n void\n flow_loop_free (struct loop *loop)\n {\n   struct loop_exit *exit, *next;\n \n-  VEC_free (loop_p, heap, loop->superloops);\n+  VEC_free (loop_p, gc, loop->superloops);\n \n   /* Break the list of the loop exit records.  They will be freed when the\n      corresponding edge is rescanned or removed, and this avoids\n      accessing the (already released) head of the list stored in the\n      loop structure.  */\n-  for (exit = loop->exits.next; exit != &loop->exits; exit = next)\n+  for (exit = loop->exits->next; exit != loop->exits; exit = next)\n     {\n       next = exit->next;\n       exit->next = exit;\n       exit->prev = exit;\n     }\n-    \n-  free (loop);\n+\n+  ggc_free (loop->exits);\n+  ggc_free (loop);\n }\n \n /* Free all the memory allocated for LOOPS.  */\n@@ -214,8 +217,7 @@ flow_loops_free (struct loops *loops)\n \t  flow_loop_free (loop);\n \t}\n \n-      VEC_free (loop_p, heap, loops->larray);\n-      loops->larray = NULL;\n+      VEC_free (loop_p, gc, loops->larray);\n     }\n }\n \n@@ -286,7 +288,7 @@ establish_preds (struct loop *loop, struct loop *father)\n   cfun->max_loop_depth = MAX (cfun->max_loop_depth, (int) depth);\n \n   VEC_truncate (loop_p, loop->superloops, 0);\n-  VEC_reserve (loop_p, heap, loop->superloops, depth);\n+  VEC_reserve (loop_p, gc, loop->superloops, depth);\n   for (i = 0; VEC_iterate (loop_p, father->superloops, i, ploop); i++)\n     VEC_quick_push (loop_p, loop->superloops, ploop);\n   VEC_quick_push (loop_p, loop->superloops, father);\n@@ -335,9 +337,11 @@ flow_loop_tree_node_remove (struct loop *loop)\n struct loop *\n alloc_loop (void)\n {\n-  struct loop *loop = XCNEW (struct loop);\n+  struct loop *loop = GGC_CNEW (struct loop);\n+\n+  loop->exits = GGC_CNEW (struct loop_exit);\n+  loop->exits->next = loop->exits->prev = loop->exits;\n \n-  loop->exits.next = loop->exits.prev = &loop->exits;\n   return loop;\n }\n \n@@ -417,7 +421,7 @@ flow_loops_find (struct loops *loops)\n     }\n \n   /* Allocate loop structures.  */\n-  loops->larray = VEC_alloc (loop_p, heap, num_loops + 1);\n+  loops->larray = VEC_alloc (loop_p, gc, num_loops + 1);\n \n   /* Dummy loop containing whole function.  */\n   root = alloc_loop ();\n@@ -961,7 +965,7 @@ loop_exit_free (void *ex)\n       exit->next->prev = exit->prev;\n       exit->prev->next = exit->next;\n \n-      free (exit);\n+      ggc_free (exit);\n     }\n }\n \n@@ -1000,11 +1004,11 @@ rescan_loop_exit (edge e, bool new_edge, bool removed)\n \t   aloop != cloop;\n \t   aloop = loop_outer (aloop))\n \t{\n-\t  exit = XNEW (struct loop_exit);\n+\t  exit = GGC_NEW (struct loop_exit);\n \t  exit->e = e;\n \n-\t  exit->next = aloop->exits.next;\n-\t  exit->prev = &aloop->exits;\n+\t  exit->next = aloop->exits->next;\n+\t  exit->prev = aloop->exits;\n \t  exit->next->prev = exit;\n \t  exit->prev->next = exit;\n \n@@ -1050,10 +1054,11 @@ record_loop_exits (void)\n   current_loops->state |= LOOPS_HAVE_RECORDED_EXITS;\n \n   gcc_assert (current_loops->exits == NULL);\n-  current_loops->exits = htab_create (2 * number_of_loops (),\n-\t\t\t\t      loop_exit_hash,\n-\t\t\t\t      loop_exit_eq,\n-\t\t\t\t      loop_exit_free);\n+  current_loops->exits = htab_create_alloc (2 * number_of_loops (),\n+\t\t\t\t\t    loop_exit_hash,\n+\t\t\t\t\t    loop_exit_eq,\n+\t\t\t\t\t    loop_exit_free,\n+\t\t\t\t\t    ggc_calloc, ggc_free);\n \n   FOR_EACH_BB (bb)\n     {\n@@ -1123,7 +1128,7 @@ get_loop_exit_edges (const struct loop *loop)\n      scan the body of the loop.  */\n   if (current_loops->state & LOOPS_HAVE_RECORDED_EXITS)\n     {\n-      for (exit = loop->exits.next; exit->e; exit = exit->next)\n+      for (exit = loop->exits->next; exit->e; exit = exit->next)\n \tVEC_safe_push (edge, heap, edges, exit->e);\n     }\n   else\n@@ -1441,7 +1446,7 @@ verify_loop_structure (void)\n   /* Check the recorded loop exits.  */\n   FOR_EACH_LOOP (li, loop, 0)\n     {\n-      if (loop->exits.e != NULL)\n+      if (!loop->exits || loop->exits->e != NULL)\n \t{\n \t  error (\"corrupted head of the exits list of loop %d\",\n \t\t loop->num);\n@@ -1451,15 +1456,15 @@ verify_loop_structure (void)\n \t{\n \t  /* Check that the list forms a cycle, and all elements except\n \t     for the head are nonnull.  */\n-\t  for (mexit = &loop->exits, exit = mexit->next, i = 0;\n+\t  for (mexit = loop->exits, exit = mexit->next, i = 0;\n \t       exit->e && exit != mexit;\n \t       exit = exit->next)\n \t    {\n \t      if (i++ & 1)\n \t\tmexit = mexit->next;\n \t    }\n \n-\t  if (exit != &loop->exits)\n+\t  if (exit != loop->exits)\n \t    {\n \t      error (\"corrupted exits list of loop %d\", loop->num);\n \t      err = 1;\n@@ -1468,7 +1473,7 @@ verify_loop_structure (void)\n \n       if ((current_loops->state & LOOPS_HAVE_RECORDED_EXITS) == 0)\n \t{\n-\t  if (loop->exits.next != &loop->exits)\n+\t  if (loop->exits->next != loop->exits)\n \t    {\n \t      error (\"nonempty exits list of loop %d, but exits are not recorded\",\n \t\t     loop->num);\n@@ -1530,7 +1535,7 @@ verify_loop_structure (void)\n       FOR_EACH_LOOP (li, loop, 0)\n \t{\n \t  eloops = 0;\n-\t  for (exit = loop->exits.next; exit->e; exit = exit->next)\n+\t  for (exit = loop->exits->next; exit->e; exit = exit->next)\n \t    eloops++;\n \t  if (eloops != sizes[loop->num])\n \t    {\n@@ -1585,12 +1590,12 @@ loop_exit_edge_p (const struct loop *loop, edge e)\n edge\n single_exit (const struct loop *loop)\n {\n-  struct loop_exit *exit = loop->exits.next;\n+  struct loop_exit *exit = loop->exits->next;\n \n   if ((current_loops->state & LOOPS_HAVE_RECORDED_EXITS) == 0)\n     return NULL;\n \n-  if (exit->e && exit->next == &loop->exits)\n+  if (exit->e && exit->next == loop->exits)\n     return exit->e;\n   else\n     return NULL;"}, {"sha": "47892ea13da2b3a824b1a579ed429f20037ac5a3", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=9e2f83a5e87d2956dd67b4ec2338426d07a730bc", "patch": "@@ -39,15 +39,15 @@ enum lpt_dec\n   LPT_UNROLL_STUPID\n };\n \n-struct lpt_decision\n+struct lpt_decision GTY (())\n {\n   enum lpt_dec decision;\n   unsigned times;\n };\n \n /* The structure describing a bound on number of iterations of a loop.  */\n \n-struct nb_iter_bound\n+struct nb_iter_bound GTY ((chain_next (\"%h.next\")))\n {\n   /* The statement STMT is executed at most ...  */\n   tree stmt;\n@@ -72,10 +72,10 @@ struct nb_iter_bound\n \n /* Description of the loop exit.  */\n \n-struct loop_exit\n+struct loop_exit GTY (())\n {\n   /* The exit edge.  */\n-  edge e;\n+  struct edge_def *e;\n \n   /* Previous and next exit in the list of the exits of the loop.  */\n   struct loop_exit *prev;\n@@ -88,18 +88,19 @@ struct loop_exit\n typedef struct loop *loop_p;\n DEF_VEC_P (loop_p);\n DEF_VEC_ALLOC_P (loop_p, heap);\n+DEF_VEC_ALLOC_P (loop_p, gc);\n \n /* Structure to hold information for each natural loop.  */\n-struct loop\n+struct loop GTY ((chain_next (\"%h.next\")))\n {\n   /* Index into loops array.  */\n   int num;\n \n   /* Basic block of loop header.  */\n-  basic_block header;\n+  struct basic_block_def *header;\n \n   /* Basic block of loop latch.  */\n-  basic_block latch;\n+  struct basic_block_def *latch;\n \n   /* For loop unrolling/peeling decision.  */\n   struct lpt_decision lpt_decision;\n@@ -114,7 +115,7 @@ struct loop\n   unsigned num_nodes;\n \n   /* Superloops of the loop, starting with the outermost loop.  */\n-  VEC (loop_p, heap) *superloops;\n+  VEC (loop_p, gc) *superloops;\n \n   /* The first inner (child) loop or NULL if innermost loop.  */\n   struct loop *inner;\n@@ -126,7 +127,7 @@ struct loop\n   struct loop *copy;\n \n   /* Auxiliary info specific to a pass.  */\n-  void *aux;\n+  PTR GTY ((skip (\"\"))) aux;\n \n   /* The number of times the latch of the loop is executed.\n      This is an INTEGER_CST or an expression containing symbolic\n@@ -158,7 +159,7 @@ struct loop\n   struct nb_iter_bound *bounds;\n \n   /* Head of the cyclic list of the exits of the loop.  */\n-  struct loop_exit exits;\n+  struct loop_exit *exits;\n };\n \n /* Flags for state of loop structure.  */\n@@ -177,18 +178,18 @@ enum\n #define AVOID_CFG_MODIFICATIONS (LOOPS_MAY_HAVE_MULTIPLE_LATCHES)\n \n /* Structure to hold CFG information about natural loops within a function.  */\n-struct loops\n+struct loops GTY (())\n {\n   /* State of loops.  */\n   int state;\n \n   /* Array of the loops.  */\n-  VEC (loop_p, heap) *larray;\n+  VEC (loop_p, gc) *larray;\n \n   /* Maps edges to the list of their descriptions as loop exits.  Edges\n      whose sources or destinations have loop_father == NULL (which may\n      happen during the cfg manipulations) should not appear in EXITS.  */\n-  htab_t exits;\n+  htab_t GTY((param_is (struct loop_exit))) exits;\n \n   /* Pointer to root of loop hierarchy tree.  */\n   struct loop *tree_root;\n@@ -428,7 +429,7 @@ loop_outer (const struct loop *loop)\n \n /* Returns the list of loops in current_loops.  */\n \n-static inline VEC (loop_p, heap) *\n+static inline VEC (loop_p, gc) *\n get_loops (void)\n {\n   if (!current_loops)"}, {"sha": "4c658df876b729f96ff8d7123ecadeea6b46050d", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=9e2f83a5e87d2956dd67b4ec2338426d07a730bc", "patch": "@@ -399,7 +399,7 @@ static void\n place_new_loop (struct loop *loop)\n {\n   loop->num = number_of_loops ();\n-  VEC_safe_push (loop_p, heap, current_loops->larray, loop);\n+  VEC_safe_push (loop_p, gc, current_loops->larray, loop);\n }\n \n /* Given LOOP structure with filled header and latch, find the body of the"}, {"sha": "c4faaf13df120d53241fdebdb76eeb0ffa76f50c", "filename": "gcc/function.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=9e2f83a5e87d2956dd67b4ec2338426d07a730bc", "patch": "@@ -191,7 +191,7 @@ struct function GTY(())\n   struct gimple_df *gimple_df;\n \n   /* The loops in this function.  */\n-  struct loops * GTY((skip)) x_current_loops;\n+  struct loops *x_current_loops;\n \n   /* Value histograms attached to particular statements.  */\n   htab_t GTY((skip)) value_histograms;"}, {"sha": "54740211674830b49a96e76287e95e25c2b4c57b", "filename": "gcc/gengtype.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=9e2f83a5e87d2956dd67b4ec2338426d07a730bc", "patch": "@@ -1535,7 +1535,7 @@ open_base_files (void)\n       \"hard-reg-set.h\", \"basic-block.h\", \"cselib.h\", \"insn-addr.h\",\n       \"optabs.h\", \"libfuncs.h\", \"debug.h\", \"ggc.h\", \"cgraph.h\",\n       \"tree-flow.h\", \"reload.h\", \"cpp-id-data.h\", \"tree-chrec.h\",\n-      \"cfglayout.h\", \"except.h\", \"output.h\", NULL\n+      \"cfglayout.h\", \"except.h\", \"output.h\", \"cfgloop.h\", NULL\n     };\n     const char *const *ifp;\n     outf_p gtype_desc_c;"}, {"sha": "3aa6527a80a804615c1f9149c24380bedd7105cf", "filename": "gcc/loop-init.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=9e2f83a5e87d2956dd67b4ec2338426d07a730bc", "patch": "@@ -31,6 +31,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"tree-pass.h\"\n #include \"timevar.h\"\n #include \"flags.h\"\n+#include \"ggc.h\"\n \n \f\n /* Initialize loop structures.  This is used by the tree and RTL loop\n@@ -43,7 +44,7 @@ loop_optimizer_init (unsigned flags)\n   struct loops *loops;\n \n   gcc_assert (!current_loops);\n-  loops = XCNEW (struct loops);\n+  loops = GGC_CNEW (struct loops);\n \n   /* Find the loops.  */\n \n@@ -116,7 +117,7 @@ loop_optimizer_finalize (void)\n   if (current_loops->state & LOOPS_HAVE_RECORDED_EXITS)\n     release_recorded_exits ();\n   flow_loops_free (current_loops);\n-  free (current_loops);\n+  ggc_free (current_loops);\n   current_loops = NULL;\n \n   FOR_ALL_BB (bb)"}, {"sha": "46831d7f5730f10977429df4cf5306dd31419a05", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=9e2f83a5e87d2956dd67b4ec2338426d07a730bc", "patch": "@@ -258,7 +258,7 @@ static tree analyze_scalar_evolution_1 (struct loop *, tree, tree);\n /* The cached information about a ssa name VAR, claiming that inside LOOP,\n    the value of VAR can be expressed as CHREC.  */\n \n-struct scev_info_str\n+struct scev_info_str GTY(())\n {\n   tree var;\n   tree chrec;\n@@ -285,7 +285,7 @@ tree chrec_known;\n \n static bitmap already_instantiated;\n \n-static htab_t scalar_evolution_info;\n+static GTY ((param_is (struct scev_info_str))) htab_t scalar_evolution_info;\n \n \f\n /* Constructs a new SCEV_INFO_STR structure.  */\n@@ -295,7 +295,7 @@ new_scev_info_str (tree var)\n {\n   struct scev_info_str *res;\n   \n-  res = XNEW (struct scev_info_str);\n+  res = GGC_NEW (struct scev_info_str);\n   res->var = var;\n   res->chrec = chrec_not_analyzed_yet;\n   \n@@ -326,7 +326,7 @@ eq_scev_info (const void *e1, const void *e2)\n static void\n del_scev_info (void *e)\n {\n-  free (e);\n+  ggc_free (e);\n }\n \n /* Get the index corresponding to VAR in the current LOOP.  If\n@@ -2746,8 +2746,12 @@ scev_initialize (void)\n   loop_iterator li;\n   struct loop *loop;\n \n-  scalar_evolution_info = htab_create (100, hash_scev_info,\n-\t\t\t\t       eq_scev_info, del_scev_info);\n+  scalar_evolution_info = htab_create_alloc (100,\n+\t\t\t\t\t     hash_scev_info,\n+\t\t\t\t\t     eq_scev_info,\n+\t\t\t\t\t     del_scev_info,\n+\t\t\t\t\t     ggc_calloc,\n+\t\t\t\t\t     ggc_free);\n   already_instantiated = BITMAP_ALLOC (NULL);\n   \n   initialize_scalar_evolutions_analyzer ();\n@@ -3008,3 +3012,5 @@ scev_const_prop (void)\n     }\n   return 0;\n }\n+\n+#include \"gt-tree-scalar-evolution.h\""}, {"sha": "301b6e340e65919d79b7fc459ad91747f6099e62", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=9e2f83a5e87d2956dd67b4ec2338426d07a730bc", "patch": "@@ -2364,7 +2364,7 @@ record_estimate (struct loop *loop, tree bound, double_int i_bound,\n      list.  */\n   if (upper)\n     {\n-      struct nb_iter_bound *elt = XNEW (struct nb_iter_bound);\n+      struct nb_iter_bound *elt = GGC_NEW (struct nb_iter_bound);\n \n       elt->bound = i_bound;\n       elt->stmt = at_stmt;\n@@ -3023,7 +3023,7 @@ free_numbers_of_iterations_estimates_loop (struct loop *loop)\n   for (bound = loop->bounds; bound; bound = next)\n     {\n       next = bound->next;\n-      free (bound);\n+      ggc_free (bound);\n     }\n \n   loop->bounds = NULL;"}, {"sha": "c5724cbcf86a194830dc8aad4f2651d0a043b7c3", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2f83a5e87d2956dd67b4ec2338426d07a730bc/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=9e2f83a5e87d2956dd67b4ec2338426d07a730bc", "patch": "@@ -171,7 +171,8 @@ struct tree_opt_pass pass_tree_unswitch =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_loops,\t/* todo_flags_finish */\n+  TODO_ggc_collect | TODO_dump_func\n+    | TODO_verify_loops,\t\t/* todo_flags_finish */\n   0\t\t\t\t\t/* letter */\n };\n \n@@ -202,7 +203,8 @@ struct tree_opt_pass pass_vectorize =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   TODO_verify_loops,\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_update_ssa,\t/* todo_flags_finish */\n+  TODO_dump_func | TODO_update_ssa\n+    | TODO_ggc_collect,\t\t\t/* todo_flags_finish */\n   0\t\t\t\t\t/* letter */\n };\n \n@@ -237,7 +239,8 @@ struct tree_opt_pass pass_linear_transform =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_loops,\t/* todo_flags_finish */\n+  TODO_dump_func | TODO_verify_loops\n+    | TODO_ggc_collect,\t\t\t/* todo_flags_finish */\n   0\t\t\t\t        /* letter */\t\n };\n \n@@ -361,7 +364,8 @@ struct tree_opt_pass pass_empty_loop =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_loops,\t/* todo_flags_finish */\n+  TODO_dump_func | TODO_verify_loops \n+    | TODO_ggc_collect,\t\t\t/* todo_flags_finish */\n   0\t\t\t\t\t/* letter */\n };\n \n@@ -427,7 +431,8 @@ struct tree_opt_pass pass_complete_unroll =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_loops,\t/* todo_flags_finish */\n+  TODO_dump_func | TODO_verify_loops\n+    | TODO_ggc_collect,\t\t\t/* todo_flags_finish */\n   0\t\t\t\t\t/* letter */\n };\n \n@@ -496,9 +501,8 @@ struct tree_opt_pass pass_iv_optimize =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func\n-  | TODO_verify_loops\n-  | TODO_update_ssa,\t\t\t/* todo_flags_finish */\n+  TODO_dump_func | TODO_verify_loops\n+  | TODO_update_ssa | TODO_ggc_collect,\t/* todo_flags_finish */\n   0\t\t\t\t\t/* letter */\n };\n "}]}