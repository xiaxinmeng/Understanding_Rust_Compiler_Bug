{"sha": "ff146a59dd0cb24043897cf90ea011eb2aa3d38b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYxNDZhNTlkZDBjYjI0MDQzODk3Y2Y5MGVhMDExZWIyYWEzZDM4Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-04-18T10:28:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-04-18T10:28:21Z"}, "message": "re PR translation/79183 (Hard coded plurals in gimple-ssa-sprintf.c:2050)\n\n\tPR translation/79183\n\t* gimple-ssa-sprintf.c (format_directive): Use inform_n instead of\n\tinform where appropriate.\n\nFrom-SVN: r270438", "tree": {"sha": "e311bd832b00f22e2cfd4f8f46335127c7a1ef5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e311bd832b00f22e2cfd4f8f46335127c7a1ef5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff146a59dd0cb24043897cf90ea011eb2aa3d38b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff146a59dd0cb24043897cf90ea011eb2aa3d38b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff146a59dd0cb24043897cf90ea011eb2aa3d38b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff146a59dd0cb24043897cf90ea011eb2aa3d38b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b73c7ef7c9c3c04610bc2d2819affea917d91d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b73c7ef7c9c3c04610bc2d2819affea917d91d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b73c7ef7c9c3c04610bc2d2819affea917d91d2"}], "stats": {"total": 62, "additions": 49, "deletions": 13}, "files": [{"sha": "783ae7adc930aa6af4dbb42559565e4289236cf0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff146a59dd0cb24043897cf90ea011eb2aa3d38b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff146a59dd0cb24043897cf90ea011eb2aa3d38b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff146a59dd0cb24043897cf90ea011eb2aa3d38b", "patch": "@@ -1,3 +1,9 @@\n+2019-04-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR translation/79183\n+\t* gimple-ssa-sprintf.c (format_directive): Use inform_n instead of\n+\tinform where appropriate.\n+\n 2019-04-18  Richard Biener  <rguenther@suse.de>\n \n \t* tree.c (get_qualified_type): Put found type variants at the"}, {"sha": "a788879df6d9c96c38b77bfe03e59e5008a2d921", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff146a59dd0cb24043897cf90ea011eb2aa3d38b/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff146a59dd0cb24043897cf90ea011eb2aa3d38b/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=ff146a59dd0cb24043897cf90ea011eb2aa3d38b", "patch": "@@ -2513,7 +2513,24 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \t{\n \t  tree remove = TREE_TYPE (newdecl);\n \t  if (TYPE_MAIN_VARIANT (remove) == remove)\n-\t    gcc_assert (TYPE_NEXT_VARIANT (remove) == NULL_TREE);\n+\t    {\n+\t      gcc_assert (TYPE_NEXT_VARIANT (remove) == NULL_TREE);\n+\t      /* If remove is the main variant, no need to remove that\n+\t\t from the list.  One of the DECL_ORIGINAL_TYPE\n+\t\t variants, e.g. created for aligned attribute, might still\n+\t\t refer to the newdecl TYPE_DECL though, so remove that one\n+\t\t in that case.  */\n+\t      if (DECL_ORIGINAL_TYPE (newdecl)\n+\t\t  && DECL_ORIGINAL_TYPE (newdecl) != remove)\n+\t\tfor (tree t = TYPE_MAIN_VARIANT (DECL_ORIGINAL_TYPE (newdecl));\n+\t\t     ; t = TYPE_MAIN_VARIANT (t))\n+\t\t  if (TYPE_NAME (TYPE_NEXT_VARIANT (t)) == newdecl)\n+\t\t    {\n+\t\t      TYPE_NEXT_VARIANT (t)\n+\t\t\t= TYPE_NEXT_VARIANT (TYPE_NEXT_VARIANT (t));\n+\t\t      break;\n+\t\t    }\n+\t    }\t    \n \t  else\n \t    for (tree t = TYPE_MAIN_VARIANT (remove); ;\n \t\t t = TYPE_NEXT_VARIANT (t))"}, {"sha": "f7cfacceb9fa5fd2ff52758b907c7a3800685d0f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff146a59dd0cb24043897cf90ea011eb2aa3d38b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff146a59dd0cb24043897cf90ea011eb2aa3d38b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ff146a59dd0cb24043897cf90ea011eb2aa3d38b", "patch": "@@ -2133,7 +2133,24 @@ next_arg:;\n \t    {\n \t      tree remove = TREE_TYPE (newdecl);\n \t      if (TYPE_MAIN_VARIANT (remove) == remove)\n-\t\tgcc_assert (TYPE_NEXT_VARIANT (remove) == NULL_TREE);\n+\t\t{\n+\t\t  gcc_assert (TYPE_NEXT_VARIANT (remove) == NULL_TREE);\n+\t\t  /* If remove is the main variant, no need to remove that\n+\t\t     from the list.  One of the DECL_ORIGINAL_TYPE\n+\t\t     variants, e.g. created for aligned attribute, might still\n+\t\t     refer to the newdecl TYPE_DECL though, so remove that one\n+\t\t     in that case.  */\n+\t\t  if (tree orig = DECL_ORIGINAL_TYPE (newdecl))\n+\t\t    if (orig != remove)\n+\t\t      for (tree t = TYPE_MAIN_VARIANT (orig); ;\n+\t\t\t   t = TYPE_MAIN_VARIANT (t))\n+\t\t\tif (TYPE_NAME (TYPE_NEXT_VARIANT (t)) == newdecl)\n+\t\t\t  {\n+\t\t\t    TYPE_NEXT_VARIANT (t)\n+\t\t\t      = TYPE_NEXT_VARIANT (TYPE_NEXT_VARIANT (t));\n+\t\t\t    break;\n+\t\t\t  }\n+\t\t}\t    \n \t      else\n \t\tfor (tree t = TYPE_MAIN_VARIANT (remove); ;\n \t\t     t = TYPE_NEXT_VARIANT (t))"}, {"sha": "80b0bf825efcbdc0255f2abface89062c00a3d2e", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff146a59dd0cb24043897cf90ea011eb2aa3d38b/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff146a59dd0cb24043897cf90ea011eb2aa3d38b/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=ff146a59dd0cb24043897cf90ea011eb2aa3d38b", "patch": "@@ -3016,12 +3016,10 @@ format_directive (const sprintf_dom_walker::call_info &info,\n \t     help the user figure out how big a buffer they need.  */\n \n \t  if (min == max)\n-\t    inform (callloc,\n-\t\t    (min == 1\n-\t\t     ? G_(\"%qE output %wu byte into a destination of size %wu\")\n-\t\t     : G_(\"%qE output %wu bytes into a destination of size \"\n-\t\t\t  \"%wu\")),\n-\t\t    info.func, min, info.objsize);\n+\t    inform_n (callloc, min,\n+\t\t      \"%qE output %wu byte into a destination of size %wu\",\n+\t\t      \"%qE output %wu bytes into a destination of size %wu\",\n+\t\t      info.func, min, info.objsize);\n \t  else if (max < HOST_WIDE_INT_MAX)\n \t    inform (callloc,\n \t\t    \"%qE output between %wu and %wu bytes into \"\n@@ -3044,11 +3042,9 @@ format_directive (const sprintf_dom_walker::call_info &info,\n \t     of printf with no destination size just print the computed\n \t     result.  */\n \t  if (min == max)\n-\t    inform (callloc,\n-\t\t    (min == 1\n-\t\t     ? G_(\"%qE output %wu byte\")\n-\t\t     : G_(\"%qE output %wu bytes\")),\n-\t\t    info.func, min);\n+\t    inform_n (callloc, min,\n+\t\t      \"%qE output %wu byte\", \"%qE output %wu bytes\",\n+\t\t      info.func, min);\n \t  else if (max < HOST_WIDE_INT_MAX)\n \t    inform (callloc,\n \t\t    \"%qE output between %wu and %wu bytes\","}]}