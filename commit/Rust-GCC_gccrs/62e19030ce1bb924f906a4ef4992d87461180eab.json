{"sha": "62e19030ce1bb924f906a4ef4992d87461180eab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJlMTkwMzBjZTFiYjkyNGY5MDZhNGVmNDk5MmQ4NzQ2MTE4MGVhYg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-10-09T17:33:02Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-10-09T17:33:02Z"}, "message": "re PR c++/17524 (ICE with initializing a variable of type void)\n\n\tPR c++/17524\n\t* cp-tree.h (check_var_type): New function.\n\t* decl.c (check_var_type): New function, split out from ...\n\t(grokdeclarator): ... here.\n\t* pt.c (tsubst_decl): Use check_var_type.\n\n\tPR c++/17685\n\t* decl.c (grokdeclarator): Disallow declarations of operators as\n\n\tPR c++/17524\n\t* g++.dg/template/static9.C: New test.\n\n\tPR c++/17685\n\t* g++.dg/parse/operator5.C: New test.\n\nFrom-SVN: r88820", "tree": {"sha": "72dce6660c8f0305d6023aaf4f8fd8d3760cacc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72dce6660c8f0305d6023aaf4f8fd8d3760cacc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62e19030ce1bb924f906a4ef4992d87461180eab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e19030ce1bb924f906a4ef4992d87461180eab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e19030ce1bb924f906a4ef4992d87461180eab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e19030ce1bb924f906a4ef4992d87461180eab/comments", "author": null, "committer": null, "parents": [{"sha": "5c76089acfa0d689a4e7a1839c3dbf807c0ebbdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c76089acfa0d689a4e7a1839c3dbf807c0ebbdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c76089acfa0d689a4e7a1839c3dbf807c0ebbdf"}], "stats": {"total": 93, "additions": 74, "deletions": 19}, "files": [{"sha": "5c4c7c846819561e0ca97e1f5b840c6aab82f266", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e19030ce1bb924f906a4ef4992d87461180eab/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e19030ce1bb924f906a4ef4992d87461180eab/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=62e19030ce1bb924f906a4ef4992d87461180eab", "patch": "@@ -1,3 +1,15 @@\n+2004-10-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/17524\n+\t* cp-tree.h (check_var_type): New function.\n+\t* decl.c (check_var_type): New function, split out from ...\n+\t(grokdeclarator): ... here.\n+\t* pt.c (tsubst_decl): Use check_var_type.\n+\n+\tPR c++/17685\n+\t* decl.c (grokdeclarator): Disallow declarations of operators as\n+\tnon-functions.\n+\t\n 2004-10-08  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/17868"}, {"sha": "ca0722a442eaeb1ac6edf2e2b01b2a877a27a7f2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e19030ce1bb924f906a4ef4992d87461180eab/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e19030ce1bb924f906a4ef4992d87461180eab/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=62e19030ce1bb924f906a4ef4992d87461180eab", "patch": "@@ -3759,6 +3759,7 @@ extern void warn_extern_redeclared_static (tree, tree);\n extern const char *cxx_comdat_group             (tree);\n extern bool cp_missing_noreturn_ok_p\t\t(tree);\n extern void initialize_artificial_var            (tree, tree);\n+extern tree check_var_type (tree, tree);\n \n extern bool have_extern_spec;\n "}, {"sha": "fa50faae994c08d914493cef8210736e16f295ed", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e19030ce1bb924f906a4ef4992d87461180eab/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e19030ce1bb924f906a4ef4992d87461180eab/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=62e19030ce1bb924f906a4ef4992d87461180eab", "patch": "@@ -6395,6 +6395,31 @@ check_special_function_return_type (special_function_kind sfk,\n   return type;\n }\n \n+/* A variable or data member (whose unqualified name is IDENTIFIER)\n+   has been declared with the indicated TYPE.  If the TYPE is not\n+   acceptable, issue an error message and return a type to use for\n+   error-recovery purposes. */\n+\n+tree\n+check_var_type (tree identifier, tree type)\n+{\n+  if (VOID_TYPE_P (type))\n+    {\n+      if (!identifier)\n+\terror (\"unnamed variable or field declared void\");\n+      else if (TREE_CODE (identifier) == IDENTIFIER_NODE)\n+\t{\n+\t  gcc_assert (!IDENTIFIER_OPNAME_P (identifier));\n+\t  error (\"variable or field %qE declared void\", identifier);\n+\t}\n+      else\n+\terror (\"variable or field declared void\");\n+      type = integer_type_node;\n+    }\n+  \n+  return type;\n+}\n+\n /* Given declspecs and a declarator (abstract or otherwise), determine\n    the name and type of the object declared and construct a DECL node\n    for it.\n@@ -7743,25 +7768,21 @@ grokdeclarator (const cp_declarator *declarator,\n       unqualified_id = make_anon_name ();\n     }\n \n-  /* `void' at top level (not within pointer)\n-     is allowed only in typedefs or type names.\n-     We don't complain about parms either, but that is because\n-     a better error message can be made later.  */\n-\n-  if (TREE_CODE (type) == VOID_TYPE && decl_context != PARM)\n+  /* Only functions may be declared using an operator-function-id.  */\n+  if (unqualified_id\n+      && IDENTIFIER_OPNAME_P (unqualified_id)\n+      && TREE_CODE (type) != FUNCTION_TYPE\n+      && TREE_CODE (type) != METHOD_TYPE)\n     {\n-      if (! unqualified_id)\n-\terror (\"unnamed variable or field declared void\");\n-      else if (TREE_CODE (unqualified_id) == IDENTIFIER_NODE)\n-\t{\n-\t  gcc_assert (!IDENTIFIER_OPNAME_P (unqualified_id));\n-\t  error (\"variable or field %qs declared void\", name);\n-\t}\n-      else\n-\terror (\"variable or field declared void\");\n-      type = integer_type_node;\n+      error (\"declaration of %qD as non-function\", unqualified_id);\n+      return error_mark_node;\n     }\n \n+  /* We don't check parameter types here because we can emit a better\n+     error message later.  */\n+  if (decl_context != PARM)\n+    type = check_var_type (unqualified_id, type);\n+\n   /* Now create the decl, which may be a VAR_DECL, a PARM_DECL\n      or a FUNCTION_DECL, depending on DECL_CONTEXT and TYPE.  */\n "}, {"sha": "c794e35bf4efbdc64c35906f9c70e3dbc64742fd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e19030ce1bb924f906a4ef4992d87461180eab/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e19030ce1bb924f906a4ef4992d87461180eab/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=62e19030ce1bb924f906a4ef4992d87461180eab", "patch": "@@ -6508,6 +6508,7 @@ tsubst_decl (tree t, tree args, tree type, tsubst_flags_t complain)\n \t    type = complete_type (type);\n \t    DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (r)\n \t      = DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (t);\n+\t    type = check_var_type (DECL_NAME (r), type);\n \t  }\n \telse if (DECL_SELF_REFERENCE_P (t))\n \t  SET_DECL_SELF_REFERENCE_P (r);\n@@ -6548,9 +6549,6 @@ tsubst_decl (tree t, tree args, tree type, tsubst_flags_t complain)\n \t  register_local_specialization (r, t);\n \n \tTREE_CHAIN (r) = NULL_TREE;\n-\tif (TREE_CODE (r) == VAR_DECL && VOID_TYPE_P (type))\n-\t  cp_error_at (\"instantiation of %qD as type %qT\", r, type);\n-\t/* Compute the size, alignment, etc. of R.  */\n \tlayout_decl (r, 0);\n       }\n       break;"}, {"sha": "b91dec57d8b3f085bdbe11d8bb93c22919ece4a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e19030ce1bb924f906a4ef4992d87461180eab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e19030ce1bb924f906a4ef4992d87461180eab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62e19030ce1bb924f906a4ef4992d87461180eab", "patch": "@@ -1,3 +1,11 @@\n+2004-10-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/17524\n+\t* g++.dg/template/static9.C: New test.\n+\n+\tPR c++/17685\n+\t* g++.dg/parse/operator5.C: New test.\n+\n 2004-10-09  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/17894"}, {"sha": "3e453bdf3581283ae7e71cb0a1fedc744cf19d8c", "filename": "gcc/testsuite/g++.dg/parse/operator5.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e19030ce1bb924f906a4ef4992d87461180eab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Foperator5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e19030ce1bb924f906a4ef4992d87461180eab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Foperator5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Foperator5.C?ref=62e19030ce1bb924f906a4ef4992d87461180eab", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/17685\n+\n+struct S {\n+  operator int; // { dg-error \"\" }\n+  operator void; // { dg-error \"\" }\n+};\n+"}, {"sha": "4575708e4e507e2766ffb6f863b17e409f76f6d9", "filename": "gcc/testsuite/g++.dg/template/static9.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e19030ce1bb924f906a4ef4992d87461180eab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e19030ce1bb924f906a4ef4992d87461180eab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic9.C?ref=62e19030ce1bb924f906a4ef4992d87461180eab", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/17524\n+\n+template<typename T> struct A\n+{\n+  static const T i = 0; // { dg-error \"\" }\n+};\n+\n+A<void> a; // { dg-error \"\" }"}]}