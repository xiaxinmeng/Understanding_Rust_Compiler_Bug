{"sha": "5bccb77a773b916d4824688e9138921f93c35039", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJjY2I3N2E3NzNiOTE2ZDQ4MjQ2ODhlOTEzODkyMWY5M2MzNTAzOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2014-02-04T05:40:21Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-02-04T05:40:21Z"}, "message": "ipa-cp.c (ipa_get_indirect_edge_target_1): Do direct lookup via vtable pointer...\n\n\n\t* ipa-cp.c (ipa_get_indirect_edge_target_1): Do direct\n\tlookup via vtable pointer; check for type consistency\n\tand turn inconsitent facts into UNREACHABLE.\n\t* ipa-prop.c (try_make_edge_direct_virtual_call): Likewise.\n\t* gimple-fold.c (gimple_get_virt_method_for_vtable): \n\tDo not ICE on type inconsistent querries; return UNREACHABLE\n\tinstead.\n\n\t* testsuite/g++.dg/ipa/devirt-25.C: New testcase.\n\nFrom-SVN: r207448", "tree": {"sha": "c78cc4b81e9fffb8c0810f34976aecfcf20b5c3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c78cc4b81e9fffb8c0810f34976aecfcf20b5c3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bccb77a773b916d4824688e9138921f93c35039", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bccb77a773b916d4824688e9138921f93c35039", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bccb77a773b916d4824688e9138921f93c35039", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bccb77a773b916d4824688e9138921f93c35039/comments", "author": null, "committer": null, "parents": [{"sha": "9de2f554ec689296676dee4f4482e059438a5991", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9de2f554ec689296676dee4f4482e059438a5991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9de2f554ec689296676dee4f4482e059438a5991"}], "stats": {"total": 185, "additions": 160, "deletions": 25}, "files": [{"sha": "c4c197a6a231e947c869a682f05e2a5c2c9a2079", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bccb77a773b916d4824688e9138921f93c35039/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bccb77a773b916d4824688e9138921f93c35039/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5bccb77a773b916d4824688e9138921f93c35039", "patch": "@@ -1,3 +1,14 @@\n+2014-02-03  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR ipa/59831\n+\t* ipa-cp.c (ipa_get_indirect_edge_target_1): Use ipa-devirt\n+\tto figure out targets of polymorphic calls with known decl.\n+\t* ipa-prop.c (try_make_edge_direct_virtual_call): Likewise.\n+\t* ipa-utils.h (get_polymorphic_call_info_from_invariant): Declare.\n+\t* ipa-devirt.c (get_polymorphic_call_info_for_decl): Break out from ...\n+\t(get_polymorphic_call_info): ... here.\n+\t(get_polymorphic_call_info_from_invariant): New function.\n+\n 2014-02-03  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-cp.c (ipa_get_indirect_edge_target_1): Do direct"}, {"sha": "68afeb0d89e445f699105dac4b715688c10c612c", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bccb77a773b916d4824688e9138921f93c35039/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bccb77a773b916d4824688e9138921f93c35039/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=5bccb77a773b916d4824688e9138921f93c35039", "patch": "@@ -1601,15 +1601,24 @@ ipa_get_indirect_edge_target_1 (struct cgraph_edge *ie,\n \n   if (TREE_CODE (t) != TREE_BINFO)\n     {\n-      tree binfo;\n-      binfo = gimple_extract_devirt_binfo_from_cst\n-\t\t (t, ie->indirect_info->otr_type);\n-      if (!binfo)\n+      ipa_polymorphic_call_context context;\n+      vec <cgraph_node *>targets;\n+      bool final;\n+\n+      if (!get_polymorphic_call_info_from_invariant\n+\t     (&context, t, ie->indirect_info->otr_type,\n+\t      anc_offset))\n \treturn NULL_TREE;\n-      binfo = get_binfo_at_offset (binfo, anc_offset, otr_type);\n-      if (!binfo)\n+      targets = possible_polymorphic_call_targets\n+\t\t (ie->indirect_info->otr_type,\n+\t\t  ie->indirect_info->otr_token,\n+\t\t  context, &final);\n+      if (!final || targets.length () > 1)\n \treturn NULL_TREE;\n-      target = gimple_get_virt_method_for_binfo (token, binfo);\n+      if (targets.length () == 1)\n+\ttarget = targets[0]->decl;\n+      else\n+\ttarget = builtin_decl_implicit (BUILT_IN_UNREACHABLE);\n     }\n   else\n     {"}, {"sha": "f13787481e256e77659d9e0b8f2f950c29a17d5c", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 56, "deletions": 8, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bccb77a773b916d4824688e9138921f93c35039/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bccb77a773b916d4824688e9138921f93c35039/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=5bccb77a773b916d4824688e9138921f93c35039", "patch": "@@ -1071,6 +1071,60 @@ vtable_pointer_value_to_binfo (tree t)\n \t\t\t\t\t offset, vtable);\n }\n \n+/* Proudce polymorphic call context for call method of instance\n+   that is located within BASE (that is assumed to be a decl) at OFFSET. */\n+\n+static void\n+get_polymorphic_call_info_for_decl (ipa_polymorphic_call_context *context,\n+\t\t\t\t    tree base, HOST_WIDE_INT offset)\n+{\n+  gcc_assert (DECL_P (base));\n+\n+  context->outer_type = TREE_TYPE (base);\n+  context->offset = offset;\n+  /* Make very conservative assumption that all objects\n+     may be in construction. \n+     TODO: ipa-prop already contains code to tell better. \n+     merge it later.  */\n+  context->maybe_in_construction = true;\n+  context->maybe_derived_type = false;\n+}\n+\n+/* CST is an invariant (address of decl), try to get meaningful\n+   polymorphic call context for polymorphic call of method \n+   if instance of OTR_TYPE that is located at OFFSET of this invariant.\n+   Return FALSE if nothing meaningful can be found.  */\n+\n+bool\n+get_polymorphic_call_info_from_invariant (ipa_polymorphic_call_context *context,\n+\t\t\t\t          tree cst,\n+\t\t\t\t          tree otr_type,\n+\t\t\t\t          HOST_WIDE_INT offset)\n+{\n+  HOST_WIDE_INT offset2, size, max_size;\n+  tree base;\n+\n+  if (TREE_CODE (cst) != ADDR_EXPR)\n+    return NULL_TREE;\n+\n+  cst = TREE_OPERAND (cst, 0);\n+  base = get_ref_base_and_extent (cst, &offset2, &size, &max_size);\n+  if (!DECL_P (base)\n+      || max_size == -1\n+      || max_size != size)\n+    return NULL_TREE;\n+\n+  /* Only type inconsistent programs can have otr_type that is\n+     not part of outer type.  */\n+  if (!contains_type_p (TREE_TYPE (base),\n+\t\t\toffset, otr_type))\n+    return NULL_TREE;\n+\n+  get_polymorphic_call_info_for_decl (context,\n+\t\t\t\t     base, offset);\n+  return true;\n+}\n+\n /* Given REF call in FNDECL, determine class of the polymorphic\n    call (OTR_TYPE), its token (OTR_TOKEN) and CONTEXT.\n    Return pointer to object described by the context  */\n@@ -1136,14 +1190,8 @@ get_polymorphic_call_info (tree fndecl,\n \t\t  if (!contains_type_p (TREE_TYPE (base),\n \t\t\t\t\tcontext->offset + offset2, *otr_type))\n \t\t    return base_pointer;\n-\t\t  context->outer_type = TREE_TYPE (base);\n-\t\t  context->offset += offset2;\n-\t\t  /* Make very conservative assumption that all objects\n-\t\t     may be in construction. \n-\t\t     TODO: ipa-prop already contains code to tell better. \n-\t\t     merge it later.  */\n-\t\t  context->maybe_in_construction = true;\n-\t\t  context->maybe_derived_type = false;\n+\t\t  get_polymorphic_call_info_for_decl (context, base,\n+\t\t\t\t\t\t      context->offset + offset2);\n \t\t  return NULL;\n \t\t}\n \t      else"}, {"sha": "69566e9f3a88b413084c2e8c41311c176fea5e6f", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bccb77a773b916d4824688e9138921f93c35039/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bccb77a773b916d4824688e9138921f93c35039/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=5bccb77a773b916d4824688e9138921f93c35039", "patch": "@@ -2731,19 +2731,38 @@ try_make_edge_direct_virtual_call (struct cgraph_edge *ie,\n \n   if (TREE_CODE (binfo) != TREE_BINFO)\n     {\n-      binfo = gimple_extract_devirt_binfo_from_cst\n-\t\t (binfo, ie->indirect_info->otr_type);\n-      if (!binfo)\n+      ipa_polymorphic_call_context context;\n+      vec <cgraph_node *>targets;\n+      bool final;\n+\n+      if (!get_polymorphic_call_info_from_invariant\n+\t     (&context, binfo, ie->indirect_info->otr_type,\n+\t      ie->indirect_info->offset))\n+\treturn NULL;\n+      targets = possible_polymorphic_call_targets\n+\t\t (ie->indirect_info->otr_type,\n+\t\t  ie->indirect_info->otr_token,\n+\t\t  context, &final);\n+      if (!final || targets.length () > 1)\n \treturn NULL;\n+      if (targets.length () == 1)\n+\ttarget = targets[0]->decl;\n+      else\n+\t{\n+          target = builtin_decl_implicit (BUILT_IN_UNREACHABLE);\n+\t  cgraph_get_create_node (target);\n+\t}\n     }\n-\n-  binfo = get_binfo_at_offset (binfo, ie->indirect_info->offset,\n-\t\t\t       ie->indirect_info->otr_type);\n-  if (binfo)\n-    target = gimple_get_virt_method_for_binfo (ie->indirect_info->otr_token,\n-\t\t\t\t\t       binfo);\n   else\n-    return NULL;\n+    {\n+      binfo = get_binfo_at_offset (binfo, ie->indirect_info->offset,\n+\t\t\t\t   ie->indirect_info->otr_type);\n+      if (binfo)\n+\ttarget = gimple_get_virt_method_for_binfo (ie->indirect_info->otr_token,\n+\t\t\t\t\t\t   binfo);\n+      else\n+\treturn NULL;\n+    }\n \n   if (target)\n     {"}, {"sha": "d595e8a969bb6c0970b217301b0cf6086cd43893", "filename": "gcc/ipa-utils.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bccb77a773b916d4824688e9138921f93c35039/gcc%2Fipa-utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bccb77a773b916d4824688e9138921f93c35039/gcc%2Fipa-utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.h?ref=5bccb77a773b916d4824688e9138921f93c35039", "patch": "@@ -87,6 +87,8 @@ tree method_class_type (tree);\n tree get_polymorphic_call_info (tree, tree, tree *,\n \t\t\t\tHOST_WIDE_INT *,\n \t\t\t\tipa_polymorphic_call_context *);\n+bool get_polymorphic_call_info_from_invariant (ipa_polymorphic_call_context *,\n+\t\t\t\t\t       tree, tree, HOST_WIDE_INT);\n tree vtable_pointer_value_to_binfo (tree t);\n bool vtable_pointer_value_to_vtable (tree, tree *, unsigned HOST_WIDE_INT *);\n "}, {"sha": "131b6c9a12568938375b690d4d2616a41698c8f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bccb77a773b916d4824688e9138921f93c35039/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bccb77a773b916d4824688e9138921f93c35039/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5bccb77a773b916d4824688e9138921f93c35039", "patch": "@@ -1,3 +1,8 @@\n+2014-02-03  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR ipa/59831\n+\t* g++.dg/ipa/devirt-22.C: New testcase.\n+\n 2014-02-03  Jan Hubicka  <jh@suse.cz>\n \n \t* g++.dg/ipa/devirt-25.C: New testcase."}, {"sha": "8b8279ae0f23c6fe080c8dcec6424a9e0024be4c", "filename": "gcc/testsuite/g++.dg/ipa/devirt-22.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bccb77a773b916d4824688e9138921f93c35039/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bccb77a773b916d4824688e9138921f93c35039/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-22.C?ref=5bccb77a773b916d4824688e9138921f93c35039", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fno-early-inlining -fno-ipa-sra -fdump-ipa-cp\"  } */\n+class A {};\n+class B {\n+public:\n+  A &operator[](int);\n+};\n+class C : B {\n+public:\n+  virtual int m_fn1() { return 0; }\n+  A &operator[](int p1) {\n+    int a;\n+    a = m_fn1();\n+    static_cast<void>(__builtin_expect(a, 0) ?: 0);\n+    return B::operator[](p1);\n+  }\n+};\n+\n+C b;\n+int *e;\n+static void sort(C &p1, C &p2) {\n+  for (int i=0;; i++) {\n+    A c, d = p2[0];\n+    p1[0] = c;\n+    p2[0] = d;\n+  }\n+}\n+\n+void lookupSourceDone() { b[0]; }\n+\n+void update_sources() {\n+  if (e) {\n+    C f;\n+    sort(f, b);\n+  }\n+}\n+/* Note that we miss one devirtualization because we are not able to track the\n+   vtbl store in destructor.  \n+   Previously we devirtualized to C::m_fn1 instead of B::m_fn1.  */\n+/* { dg-final { scan-tree-dump-times \"Discovered a virtual call to a known target\" 1 \"cp\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"cp\" } } */"}]}