{"sha": "43331dfbb8266227a13bb5919dd9f1c4b74a8d16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMzMzFkZmJiODI2NjIyN2ExM2JiNTkxOWRkOWYxYzRiNzRhOGQxNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-02-23T14:01:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-02-23T14:01:51Z"}, "message": "mem-stats.h (struct mem_usage): Use PRIu64 for printing size_t.\n\n2016-02-23  Richard Biener  <rguenther@suse.de>\n\n\t* mem-stats.h (struct mem_usage): Use PRIu64 for printing size_t.\n\t* bitmap.h (struct bitmap_usage): Likewise.\n\t(bitmap_move): Declare.\n\t* bitmap.c (register_overhead): Take size_t argument.\n\t(bitmap_move): New function.\n\t* df-problems.c (df_rd_transfer_function): Use bitmap_move\n\tto properly account overhead.\n\t* tree.c (free_node): Use tree_size.\n\nFrom-SVN: r233633", "tree": {"sha": "09fcc969fcebe3a9bbdca051a20be5196aedb6d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09fcc969fcebe3a9bbdca051a20be5196aedb6d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43331dfbb8266227a13bb5919dd9f1c4b74a8d16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43331dfbb8266227a13bb5919dd9f1c4b74a8d16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43331dfbb8266227a13bb5919dd9f1c4b74a8d16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43331dfbb8266227a13bb5919dd9f1c4b74a8d16/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c60ec7c23830edc6e4f33b2f7858df8e84ce2c37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c60ec7c23830edc6e4f33b2f7858df8e84ce2c37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c60ec7c23830edc6e4f33b2f7858df8e84ce2c37"}], "stats": {"total": 69, "additions": 52, "deletions": 17}, "files": [{"sha": "ce8d366012620c5f811e9075ca61701ac49e2791", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43331dfbb8266227a13bb5919dd9f1c4b74a8d16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43331dfbb8266227a13bb5919dd9f1c4b74a8d16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43331dfbb8266227a13bb5919dd9f1c4b74a8d16", "patch": "@@ -1,3 +1,14 @@\n+2016-02-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* mem-stats.h (struct mem_usage): Use PRIu64 for printing size_t.\n+\t* bitmap.h (struct bitmap_usage): Likewise.\n+\t(bitmap_move): Declare.\n+\t* bitmap.c (register_overhead): Take size_t argument.\n+\t(bitmap_move): New function.\n+\t* df-problems.c (df_rd_transfer_function): Use bitmap_move\n+\tto properly account overhead.\n+\t* tree.c (free_node): Use tree_size.\n+\n 2016-02-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/69902"}, {"sha": "ac20ae5830f4a9d7f422bbc2277fc4b4055e34cf", "filename": "gcc/bitmap.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43331dfbb8266227a13bb5919dd9f1c4b74a8d16/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43331dfbb8266227a13bb5919dd9f1c4b74a8d16/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=43331dfbb8266227a13bb5919dd9f1c4b74a8d16", "patch": "@@ -35,7 +35,7 @@ bitmap_register (bitmap b MEM_STAT_DECL)\n \n /* Account the overhead.  */\n static void\n-register_overhead (bitmap b, int amount)\n+register_overhead (bitmap b, size_t amount)\n {\n   if (bitmap_mem_desc.contains_descriptor_for_instance (b))\n     bitmap_mem_desc.register_instance_overhead (amount, b);\n@@ -468,6 +468,27 @@ bitmap_copy (bitmap to, const_bitmap from)\n       to_ptr = to_elt;\n     }\n }\n+\n+/* Move a bitmap to another bitmap.  */\n+\n+void\n+bitmap_move (bitmap to, bitmap from)\n+{\n+  gcc_assert (to->obstack == from->obstack);\n+\n+  bitmap_clear (to);\n+\n+  *to = *from;\n+\n+  if (GATHER_STATISTICS)\n+    {\n+      size_t sz = 0;\n+      for (bitmap_element *e = to->first; e; e = e->next)\n+\tsz += sizeof (bitmap_element);\n+      register_overhead (to, sz);\n+      register_overhead (from, -sz);\n+    }\n+}\n \f\n /* Find a bitmap element that would hold a bitmap's bit.\n    Update the `current' field even if we can't find an element that"}, {"sha": "805e37eb47bb4aec230f691a2020fea0811d271b", "filename": "gcc/bitmap.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43331dfbb8266227a13bb5919dd9f1c4b74a8d16/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43331dfbb8266227a13bb5919dd9f1c4b74a8d16/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=43331dfbb8266227a13bb5919dd9f1c4b74a8d16", "patch": "@@ -157,12 +157,14 @@ struct bitmap_usage: public mem_usage\n   {\n     char *location_string = loc->to_string ();\n \n-    fprintf (stderr, \"%-48s %10li:%5.1f%%%10li%10li:%5.1f%%%12li%12li%10s\\n\",\n-\t     location_string,\n-\t     (long)m_allocated, get_percent (m_allocated, total.m_allocated),\n-\t     (long)m_peak, (long)m_times,\n+    fprintf (stderr, \"%-48s %10\" PRIu64 \":%5.1f%%\"\n+\t     \"%10\" PRIu64 \"%10\" PRIu64 \":%5.1f%%\"\n+\t     \"%12\" PRIu64 \"%12\" PRIu64 \"%10s\\n\",\n+\t     location_string, (uint64_t)m_allocated,\n+\t     get_percent (m_allocated, total.m_allocated),\n+\t     (uint64_t)m_peak, (uint64_t)m_times,\n \t     get_percent (m_times, total.m_times),\n-\t     (long)m_nsearches, (long)m_search_iter,\n+\t     m_nsearches, m_search_iter,\n \t     loc->m_ggc ? \"ggc\" : \"heap\");\n \n     free (location_string);\n@@ -253,6 +255,9 @@ extern void bitmap_clear (bitmap);\n /* Copy a bitmap to another bitmap.  */\n extern void bitmap_copy (bitmap, const_bitmap);\n \n+/* Move a bitmap to another bitmap.  */\n+extern void bitmap_move (bitmap, bitmap);\n+\n /* True if two bitmaps are identical.  */\n extern bool bitmap_equal_p (const_bitmap, const_bitmap);\n "}, {"sha": "f7bf3c8e488a34ff7fb8f0515682ea5a17e55e2b", "filename": "gcc/df-problems.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43331dfbb8266227a13bb5919dd9f1c4b74a8d16/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43331dfbb8266227a13bb5919dd9f1c4b74a8d16/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=43331dfbb8266227a13bb5919dd9f1c4b74a8d16", "patch": "@@ -517,10 +517,7 @@ df_rd_transfer_function (int bb_index)\n       bitmap_ior_into (&tmp, gen);\n       changed = !bitmap_equal_p (&tmp, out);\n       if (changed)\n-\t{\n-\t  bitmap_clear (out);\n-\t  bb_info->out = tmp;\n-\t}\n+\tbitmap_move (out, &tmp);\n       else\n \tbitmap_clear (&tmp);\n     }"}, {"sha": "d3a324eb4a927745da356af666c99f3142aed58f", "filename": "gcc/mem-stats.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43331dfbb8266227a13bb5919dd9f1c4b74a8d16/gcc%2Fmem-stats.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43331dfbb8266227a13bb5919dd9f1c4b74a8d16/gcc%2Fmem-stats.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmem-stats.h?ref=43331dfbb8266227a13bb5919dd9f1c4b74a8d16", "patch": "@@ -190,10 +190,11 @@ struct mem_usage\n   {\n     char *location_string = loc->to_string ();\n \n-    fprintf (stderr, \"%-48s %10li:%5.1f%%%10li%10li:%5.1f%%%10s\\n\",\n-\t     location_string,\n-\t     (long)m_allocated, get_percent (m_allocated, total.m_allocated),\n-\t     (long)m_peak, (long)m_times,\n+    fprintf (stderr, \"%-48s %10\" PRIu64 \":%5.1f%%\"\n+\t     \"%10\" PRIu64 \"%10\" PRIu64 \":%5.1f%%%10s\\n\",\n+\t     location_string, (uint64_t)m_allocated,\n+\t     get_percent (m_allocated, total.m_allocated),\n+\t     (uint64_t)m_peak, (uint64_t)m_times,\n \t     get_percent (m_times, total.m_times), loc->m_ggc ? \"ggc\" : \"heap\");\n \n     free (location_string);\n@@ -204,8 +205,8 @@ struct mem_usage\n   dump_footer () const\n   {\n     print_dash_line ();\n-    fprintf (stderr, \"%s%54li%27li\\n\", \"Total\", (long)m_allocated,\n-\t     (long)m_times);\n+    fprintf (stderr, \"%s%54\" PRIu64 \"%27\" PRIu64 \"\\n\", \"Total\",\n+\t     (uint64_t)m_allocated, (uint64_t)m_times);\n     print_dash_line ();\n   }\n "}, {"sha": "a265623bc78346e50ac2b05c097ab6831fab5938", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43331dfbb8266227a13bb5919dd9f1c4b74a8d16/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43331dfbb8266227a13bb5919dd9f1c4b74a8d16/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=43331dfbb8266227a13bb5919dd9f1c4b74a8d16", "patch": "@@ -1114,7 +1114,7 @@ free_node (tree node)\n     {\n       tree_code_counts[(int) TREE_CODE (node)]--;\n       tree_node_counts[(int) t_kind]--;\n-      tree_node_sizes[(int) t_kind] -= tree_code_size (TREE_CODE (node));\n+      tree_node_sizes[(int) t_kind] -= tree_size (node);\n     }\n   if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n     vec_free (CONSTRUCTOR_ELTS (node));"}]}