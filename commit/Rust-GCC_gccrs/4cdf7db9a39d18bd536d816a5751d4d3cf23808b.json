{"sha": "4cdf7db9a39d18bd536d816a5751d4d3cf23808b", "node_id": "C_kwDOANBUbNoAKDRjZGY3ZGI5YTM5ZDE4YmQ1MzZkODE2YTU3NTFkNGQzY2YyMzgwOGI", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2021-11-16T18:14:22Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2021-11-16T18:14:22Z"}, "message": "rs6000: MMA test case emits wrong code when building a vector pair [PR102976]\n\nPR102976 shows a test case where we generate wrong code when building\na vector pair from 2 vector registers.  The bug here is that with unlucky\nregister assignments, we can clobber one of the input operands before\nwe write both registers of the output operand.  The solution is to use\nearly-clobbers in the assemble pair and accumulator patterns.\n\n2021-11-16  Peter Bergner  <bergner@linux.ibm.com>\n\ngcc/\n\tPR target/102976\n\t* config/rs6000/mma.md (*vsx_assemble_pair): Add early-clobber for\n\toutput operand.\n\t(*mma_assemble_acc): Likewise.\n\ngcc/testsuite/\n\tPR target/102976\n\t* gcc.target/powerpc/pr102976.c: New test.", "tree": {"sha": "6b23eb7b51feb857c3207e4d8331375337cede24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b23eb7b51feb857c3207e4d8331375337cede24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cdf7db9a39d18bd536d816a5751d4d3cf23808b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cdf7db9a39d18bd536d816a5751d4d3cf23808b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cdf7db9a39d18bd536d816a5751d4d3cf23808b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cdf7db9a39d18bd536d816a5751d4d3cf23808b/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48a8c5be5b98240d664672a2b7b7d26f3c36cf84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48a8c5be5b98240d664672a2b7b7d26f3c36cf84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48a8c5be5b98240d664672a2b7b7d26f3c36cf84"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "fa081608c4c87aa3eb2d85186ebebcf487cef012", "filename": "gcc/config/rs6000/mma.md", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdf7db9a39d18bd536d816a5751d4d3cf23808b/gcc%2Fconfig%2Frs6000%2Fmma.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdf7db9a39d18bd536d816a5751d4d3cf23808b/gcc%2Fconfig%2Frs6000%2Fmma.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fmma.md?ref=4cdf7db9a39d18bd536d816a5751d4d3cf23808b", "patch": "@@ -338,8 +338,11 @@\n   DONE;\n })\n \n+;; We cannot update the two output registers atomically, so mark the output\n+;; as an early clobber so we don't accidentally clobber the input operands.  */\n+\n (define_insn_and_split \"*vsx_assemble_pair\"\n-  [(set (match_operand:OO 0 \"vsx_register_operand\" \"=wa\")\n+  [(set (match_operand:OO 0 \"vsx_register_operand\" \"=&wa\")\n \t(unspec:OO [(match_operand:V16QI 1 \"mma_assemble_input_operand\" \"mwa\")\n \t\t    (match_operand:V16QI 2 \"mma_assemble_input_operand\" \"mwa\")]\n \t\t    UNSPEC_MMA_ASSEMBLE))]\n@@ -404,8 +407,11 @@\n   DONE;\n })\n \n+;; We cannot update the four output registers atomically, so mark the output\n+;; as an early clobber so we don't accidentally clobber the input operands.  */\n+\n (define_insn_and_split \"*mma_assemble_acc\"\n-  [(set (match_operand:XO 0 \"fpr_reg_operand\" \"=d\")\n+  [(set (match_operand:XO 0 \"fpr_reg_operand\" \"=&d\")\n \t(unspec:XO [(match_operand:V16QI 1 \"mma_assemble_input_operand\" \"mwa\")\n \t\t    (match_operand:V16QI 2 \"mma_assemble_input_operand\" \"mwa\")\n \t\t    (match_operand:V16QI 3 \"mma_assemble_input_operand\" \"mwa\")"}, {"sha": "5a4320f8e0a32b82fe7de3afad488f1080f96577", "filename": "gcc/testsuite/gcc.target/powerpc/pr102976.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdf7db9a39d18bd536d816a5751d4d3cf23808b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr102976.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdf7db9a39d18bd536d816a5751d4d3cf23808b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr102976.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr102976.c?ref=4cdf7db9a39d18bd536d816a5751d4d3cf23808b", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+#include <altivec.h>\n+void\n+bug (__vector_pair *dst)\n+{\n+  register vector unsigned char vec0 asm (\"vs44\");\n+  register vector unsigned char vec1 asm (\"vs32\");\n+  __builtin_vsx_build_pair (dst, vec0, vec1);\n+}\n+\n+/* { dg-final { scan-assembler-times {(?p)\\mxxlor \\d+,44,44\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {(?p)\\mxxlor \\d+,32,32\\M} 1 } } */"}]}