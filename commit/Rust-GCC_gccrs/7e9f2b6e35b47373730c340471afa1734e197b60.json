{"sha": "7e9f2b6e35b47373730c340471afa1734e197b60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U5ZjJiNmUzNWI0NzM3MzczMGMzNDA0NzFhZmExNzM0ZTE5N2I2MA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2012-11-21T17:04:45Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2012-11-21T17:04:45Z"}, "message": "re PR tree-optimization/55260 (ICE: in ipa_get_parm_lattices, at ipa-cp.c:263 with -O2 -fno-inline -fipa-cp-clone)\n\n2012-11-21  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/55260\n\t* ipa-cp.c (intersect_aggregates_with_edge): New function.\n\t(find_aggregate_values_for_callers_subset): Part moved to the function\n\tabove.  Call it.\n\t(cgraph_edge_brings_all_agg_vals_for_node): Reimplemented using\n\tintersect_aggregates_with_edge.\n\n\t* testsuite/g++.dg/torture/pr55260-2.C: New test.\n\nFrom-SVN: r193700", "tree": {"sha": "9e8061f624d67b7b06a839882525f10a7e5687b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e8061f624d67b7b06a839882525f10a7e5687b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e9f2b6e35b47373730c340471afa1734e197b60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e9f2b6e35b47373730c340471afa1734e197b60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e9f2b6e35b47373730c340471afa1734e197b60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e9f2b6e35b47373730c340471afa1734e197b60/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3358fd40546fa1c360f625ca9e7a911ac3ba80cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3358fd40546fa1c360f625ca9e7a911ac3ba80cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3358fd40546fa1c360f625ca9e7a911ac3ba80cd"}], "stats": {"total": 327, "additions": 200, "deletions": 127}, "files": [{"sha": "58f69d1747cf1da6873c9592c0e6e7b79bb23499", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9f2b6e35b47373730c340471afa1734e197b60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9f2b6e35b47373730c340471afa1734e197b60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e9f2b6e35b47373730c340471afa1734e197b60", "patch": "@@ -1,3 +1,12 @@\n+2012-11-21  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/55260\n+\t* ipa-cp.c (intersect_aggregates_with_edge): New function.\n+\t(find_aggregate_values_for_callers_subset): Part moved to the function\n+\tabove.  Call it.\n+\t(cgraph_edge_brings_all_agg_vals_for_node): Reimplemented using\n+\tintersect_aggregates_with_edge.\n+\n 2012-11-21  Matthias Klose  <doko@ubuntu.com>\n \n \t* config/s390/t-linux64: Add multiarch names in MULTILIB_OSDIRNAMES."}, {"sha": "16cf990dc67193c4c79a9d9e0db5acbb8823847b", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 170, "deletions": 127, "changes": 297, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9f2b6e35b47373730c340471afa1734e197b60/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9f2b6e35b47373730c340471afa1734e197b60/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=7e9f2b6e35b47373730c340471afa1734e197b60", "patch": "@@ -2850,6 +2850,127 @@ intersect_with_agg_replacements (struct cgraph_node *node, int index,\n     }\n }\n \n+/* Intersect values in INTER with aggregate values that come along edge CS to\n+   parameter number INDEX and return it.  If INTER does not actually exist yet,\n+   copy all incoming values to it.  If we determine we ended up with no values\n+   whatsoever, return a released vector.  */\n+\n+static vec<ipa_agg_jf_item_t>\n+intersect_aggregates_with_edge (struct cgraph_edge *cs, int index,\n+\t\t\t\tvec<ipa_agg_jf_item_t> inter)\n+{\n+  struct ipa_jump_func *jfunc;\n+  jfunc = ipa_get_ith_jump_func (IPA_EDGE_REF (cs), index);\n+  if (jfunc->type == IPA_JF_PASS_THROUGH\n+      && ipa_get_jf_pass_through_operation (jfunc) == NOP_EXPR)\n+    {\n+      struct ipa_node_params *caller_info = IPA_NODE_REF (cs->caller);\n+      int src_idx = ipa_get_jf_pass_through_formal_id (jfunc);\n+\n+      if (caller_info->ipcp_orig_node)\n+\t{\n+\t  struct cgraph_node *orig_node = caller_info->ipcp_orig_node;\n+\t  struct ipcp_param_lattices *orig_plats;\n+\t  orig_plats = ipa_get_parm_lattices (IPA_NODE_REF (orig_node),\n+\t\t\t\t\t      src_idx);\n+\t  if (agg_pass_through_permissible_p (orig_plats, jfunc))\n+\t    {\n+\t      if (!inter.exists ())\n+\t\tinter = agg_replacements_to_vector (cs->caller, 0);\n+\t      else\n+\t\tintersect_with_agg_replacements (cs->caller, src_idx,\n+\t\t\t\t\t\t &inter, 0);\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  struct ipcp_param_lattices *src_plats;\n+\t  src_plats = ipa_get_parm_lattices (caller_info, src_idx);\n+\t  if (agg_pass_through_permissible_p (src_plats, jfunc))\n+\t    {\n+\t      /* Currently we do not produce clobber aggregate jump\n+\t\t functions, adjust when we do.  */\n+\t      gcc_checking_assert (!jfunc->agg.items);\n+\t      if (!inter.exists ())\n+\t\tinter = copy_plats_to_inter (src_plats, 0);\n+\t      else\n+\t\tintersect_with_plats (src_plats, &inter, 0);\n+\t    }\n+\t}\n+    }\n+  else if (jfunc->type == IPA_JF_ANCESTOR\n+\t   && ipa_get_jf_ancestor_agg_preserved (jfunc))\n+    {\n+      struct ipa_node_params *caller_info = IPA_NODE_REF (cs->caller);\n+      int src_idx = ipa_get_jf_ancestor_formal_id (jfunc);\n+      struct ipcp_param_lattices *src_plats;\n+      HOST_WIDE_INT delta = ipa_get_jf_ancestor_offset (jfunc);\n+\n+      if (caller_info->ipcp_orig_node)\n+\t{\n+\t  if (!inter.exists ())\n+\t    inter = agg_replacements_to_vector (cs->caller, delta);\n+\t  else\n+\t    intersect_with_agg_replacements (cs->caller, index, &inter,\n+\t\t\t\t\t     delta);\n+\t}\n+      else\n+\t{\n+\t  src_plats = ipa_get_parm_lattices (caller_info, src_idx);;\n+\t  /* Currently we do not produce clobber aggregate jump\n+\t     functions, adjust when we do.  */\n+\t  gcc_checking_assert (!src_plats->aggs || !jfunc->agg.items);\n+\t  if (!inter.exists ())\n+\t    inter = copy_plats_to_inter (src_plats, delta);\n+\t  else\n+\t    intersect_with_plats (src_plats, &inter, delta);\n+\t}\n+    }\n+  else if (jfunc->agg.items)\n+    {\n+      struct ipa_agg_jf_item *item;\n+      int k;\n+\n+      if (!inter.exists ())\n+\tfor (unsigned i = 0; i < jfunc->agg.items->length (); i++)\n+\t  inter.safe_push ((*jfunc->agg.items)[i]);\n+      else\n+\tFOR_EACH_VEC_ELT (inter, k, item)\n+\t  {\n+\t    int l = 0;\n+\t    bool found = false;;\n+\n+\t    if (!item->value)\n+\t      continue;\n+\n+\t    while ((unsigned) l < jfunc->agg.items->length ())\n+\t      {\n+\t\tstruct ipa_agg_jf_item *ti;\n+\t\tti = &(*jfunc->agg.items)[l];\n+\t\tif (ti->offset > item->offset)\n+\t\t  break;\n+\t\tif (ti->offset == item->offset)\n+\t\t  {\n+\t\t    gcc_checking_assert (ti->value);\n+\t\t    if (values_equal_for_ipcp_p (item->value,\n+\t\t\t\t\t\t ti->value))\n+\t\t      found = true;\n+\t\t    break;\n+\t\t  }\n+\t\tl++;\n+\t      }\n+\t    if (!found)\n+\t      item->value = NULL;\n+\t  }\n+    }\n+  else\n+    {\n+      inter.release();\n+      return vec<ipa_agg_jf_item_t>();\n+    }\n+  return inter;\n+}\n+\n /* Look at edges in CALLERS and collect all known aggregate values that arrive\n    from all of them.  */\n \n@@ -2883,111 +3004,7 @@ find_aggregate_values_for_callers_subset (struct cgraph_node *node,\n \n       FOR_EACH_VEC_ELT (callers, j, cs)\n \t{\n-\t  struct ipa_jump_func *jfunc;\n-\t  jfunc = ipa_get_ith_jump_func (IPA_EDGE_REF (cs), i);\n-\t  if (jfunc->type == IPA_JF_PASS_THROUGH\n-\t      && ipa_get_jf_pass_through_operation (jfunc) == NOP_EXPR)\n-\t    {\n-\t      struct ipa_node_params *caller_info = IPA_NODE_REF (cs->caller);\n-\t      int src_idx = ipa_get_jf_pass_through_formal_id (jfunc);\n-\n-\t      if (caller_info->ipcp_orig_node)\n-\t\t{\n-\t\t  struct cgraph_node *orig_node = caller_info->ipcp_orig_node;\n-\t\t  struct ipcp_param_lattices *orig_plats;\n-\t\t  orig_plats = ipa_get_parm_lattices (IPA_NODE_REF (orig_node),\n-\t\t\t\t\t\t      src_idx);\n-\t\t  if (agg_pass_through_permissible_p (orig_plats, jfunc))\n-\t\t    {\n-\t\t      if (!inter.exists ())\n-\t\t\tinter = agg_replacements_to_vector (cs->caller, 0);\n-\t\t      else\n-\t\t\tintersect_with_agg_replacements (cs->caller, src_idx,\n-\t\t\t\t\t\t\t &inter, 0);\n-\t\t    }\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  struct ipcp_param_lattices *src_plats;\n-\t\t  src_plats = ipa_get_parm_lattices (caller_info, src_idx);\n-\t\t  if (agg_pass_through_permissible_p (src_plats, jfunc))\n-\t\t    {\n-\t\t      /* Currently we do not produce clobber aggregate jump\n-\t\t\t functions, adjust when we do.  */\n-\t\t      gcc_checking_assert (!jfunc->agg.items);\n-\t\t      if (!inter.exists ())\n-\t\t\tinter = copy_plats_to_inter (src_plats, 0);\n-\t\t      else\n-\t\t\tintersect_with_plats (src_plats, &inter, 0);\n-\t\t    }\n-\t\t}\n-\t    }\n-\t  else if (jfunc->type == IPA_JF_ANCESTOR\n-\t\t   && ipa_get_jf_ancestor_agg_preserved (jfunc))\n-\t    {\n-\t      struct ipa_node_params *caller_info = IPA_NODE_REF (cs->caller);\n-\t      int src_idx = ipa_get_jf_ancestor_formal_id (jfunc);\n-\t      struct ipcp_param_lattices *src_plats;\n-\t      HOST_WIDE_INT delta = ipa_get_jf_ancestor_offset (jfunc);\n-\n-\t      if (caller_info->ipcp_orig_node)\n-\t\t{\n-\t\t  if (!inter.exists ())\n-\t\t    inter = agg_replacements_to_vector (cs->caller, delta);\n-\t\t  else\n-\t\t    intersect_with_agg_replacements (cs->caller, i, &inter,\n-\t\t\t\t\t\t     delta);\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  src_plats = ipa_get_parm_lattices (caller_info, src_idx);;\n-\t\t  /* Currently we do not produce clobber aggregate jump\n-\t\t     functions, adjust when we do.  */\n-\t\t  gcc_checking_assert (!src_plats->aggs || !jfunc->agg.items);\n-\t\t  if (!inter.exists ())\n-\t\t    inter = copy_plats_to_inter (src_plats, delta);\n-\t\t  else\n-\t\t    intersect_with_plats (src_plats, &inter, delta);\n-\t\t}\n-\t    }\n-\t  else if (jfunc->agg.items)\n-\t    {\n-\t      int k;\n-\n-\t      if (!inter.exists ())\n-\t\tfor (unsigned i = 0; i < jfunc->agg.items->length (); i++)\n-\t\t  inter.safe_push ((*jfunc->agg.items)[i]);\n-\t      else\n-\t\tFOR_EACH_VEC_ELT (inter, k, item)\n-\t\t  {\n-\t\t    int l = 0;\n-\t\t    bool found = false;;\n-\n-\t\t    if (!item->value)\n-\t\t      continue;\n-\n-\t\t    while ((unsigned) l < jfunc->agg.items->length ())\n-\t\t      {\n-\t\t\tstruct ipa_agg_jf_item *ti;\n-\t\t        ti = &(*jfunc->agg.items)[l];\n-\t\t\tif (ti->offset > item->offset)\n-\t\t\t  break;\n-\t\t\tif (ti->offset == item->offset)\n-\t\t\t  {\n-\t\t\t    gcc_checking_assert (ti->value);\n-\t\t\t    if (values_equal_for_ipcp_p (item->value,\n-\t\t\t\t\t\t\t  ti->value))\n-\t\t\t      found = true;\n-\t\t\t    break;\n-\t\t\t  }\n-\t\t\tl++;\n-\t\t      }\n-\t\t    if (!found)\n-\t\t      item->value = NULL;\n-\t\t  }\n-\t    }\n-\t  else\n-\t    goto next_param;\n+\t  inter = intersect_aggregates_with_edge (cs, i, inter);\n \n \t  if (!inter.exists ())\n \t    goto next_param;\n@@ -3079,37 +3096,63 @@ static bool\n cgraph_edge_brings_all_agg_vals_for_node (struct cgraph_edge *cs,\n \t\t\t\t\t  struct cgraph_node *node)\n {\n-  struct ipa_node_params *caller_info = IPA_NODE_REF (cs->caller);\n+  struct ipa_node_params *orig_caller_info = IPA_NODE_REF (cs->caller);\n   struct ipa_agg_replacement_value *aggval;\n+  int i, ec, count;\n \n   aggval = ipa_get_agg_replacements_for_node (node);\n-  while (aggval)\n+  if (!aggval)\n+    return true;\n+\n+  count = ipa_get_param_count (IPA_NODE_REF (node));\n+  ec = ipa_get_cs_argument_count (IPA_EDGE_REF (cs));\n+  if (ec < count)\n+    for (struct ipa_agg_replacement_value *av = aggval; av; av = av->next)\n+      if (aggval->index >= ec)\n+\treturn false;\n+\n+  if (orig_caller_info->ipcp_orig_node)\n+    orig_caller_info = IPA_NODE_REF (orig_caller_info->ipcp_orig_node);\n+\n+  for (i = 0; i < count; i++)\n     {\n-      bool found = false;\n+      static vec<ipa_agg_jf_item_t> values = vec<ipa_agg_jf_item_t>();\n       struct ipcp_param_lattices *plats;\n-      plats = ipa_get_parm_lattices (caller_info, aggval->index);\n-      if (plats->aggs_bottom || plats->aggs_contain_variable)\n+      bool interesting = false;\n+      for (struct ipa_agg_replacement_value *av = aggval; av; av = av->next)\n+\tif (aggval->index == i)\n+\t  {\n+\t    interesting = true;\n+\t    break;\n+\t  }\n+      if (!interesting)\n+\tcontinue;\n+\n+      plats = ipa_get_parm_lattices (orig_caller_info, aggval->index);\n+      if (plats->aggs_bottom)\n \treturn false;\n-      for (struct ipcp_agg_lattice *aglat = plats->aggs;\n-\t   aglat;\n-\t   aglat = aglat->next)\n-\t  if (aglat->offset == aggval->offset)\n-\t    {\n-\t      if (ipa_lat_is_single_const (aglat)\n-\t\t  && values_equal_for_ipcp_p (aggval->value,\n-\t\t\t\t\t      aglat->values->value))\n-\t\t{\n-\t\t  found = true;\n-\t\t  break;\n-\t\t}\n-\t      else\n-\t\treturn false;\n-\t    }\n \n-      if (!found)\n+      values = intersect_aggregates_with_edge (cs, i, values);\n+      if (!values.exists())\n \treturn false;\n \n-      aggval = aggval->next;\n+      for (struct ipa_agg_replacement_value *av = aggval; av; av = av->next)\n+\tif (aggval->index == i)\n+\t  {\n+\t    struct ipa_agg_jf_item *item;\n+\t    int j;\n+\t    bool found = false;\n+\t    FOR_EACH_VEC_ELT (values, j, item)\n+\t      if (item->value\n+\t\t  && item->offset == av->offset\n+\t\t  && values_equal_for_ipcp_p (item->value, av->value))\n+\t\tfound = true;\n+\t    if (!found)\n+\t      {\n+\t\tvalues.release();\n+\t\treturn false;\n+\t      }\n+\t  }\n     }\n   return true;\n }"}, {"sha": "5def603e53539456a6e29d0ed772b293c9538a70", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9f2b6e35b47373730c340471afa1734e197b60/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9f2b6e35b47373730c340471afa1734e197b60/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e9f2b6e35b47373730c340471afa1734e197b60", "patch": "@@ -1,3 +1,8 @@\n+2012-11-21  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/55260\n+\t* g++.dg/torture/pr55260-2.C: New test.\n+\n 2012-11-21  Martin Jambor  <mjambor@suse.cz>\n \n \t* gcc.dg/torture/pr55238.c: Remove hidden attribute."}, {"sha": "43ed1e775a6ee9428c99266c7ea6c7e8a4c534f9", "filename": "gcc/testsuite/g++.dg/torture/pr55260-2.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9f2b6e35b47373730c340471afa1734e197b60/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr55260-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9f2b6e35b47373730c340471afa1734e197b60/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr55260-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr55260-2.C?ref=7e9f2b6e35b47373730c340471afa1734e197b60", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-add-options bind_pic_locally } */\n+\n+struct B\n+{\n+    virtual void test_suite_finish ();\n+};\n+void\n+fn1 (B & p2)\n+{\n+    fn1 (p2);\n+    B & a = p2;\n+    a.test_suite_finish ();\n+    B b;\n+    fn1 (b);\n+}"}]}