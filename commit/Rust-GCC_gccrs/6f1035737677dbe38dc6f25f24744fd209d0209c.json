{"sha": "6f1035737677dbe38dc6f25f24744fd209d0209c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYxMDM1NzM3Njc3ZGJlMzhkYzZmMjVmMjQ3NDRmZDIwOWQwMjA5Yw==", "commit": {"author": {"name": "Yizhe", "email": "yizhe@pku.edu.cn", "date": "2021-02-26T09:14:16Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-03-01T10:42:27Z"}, "message": "Fix formatting", "tree": {"sha": "8245702867a2f7abc173a0fe6493d5d8e8474811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8245702867a2f7abc173a0fe6493d5d8e8474811"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f1035737677dbe38dc6f25f24744fd209d0209c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f1035737677dbe38dc6f25f24744fd209d0209c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f1035737677dbe38dc6f25f24744fd209d0209c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f1035737677dbe38dc6f25f24744fd209d0209c/comments", "author": {"login": "YizhePKU", "id": 42838469, "node_id": "MDQ6VXNlcjQyODM4NDY5", "avatar_url": "https://avatars.githubusercontent.com/u/42838469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YizhePKU", "html_url": "https://github.com/YizhePKU", "followers_url": "https://api.github.com/users/YizhePKU/followers", "following_url": "https://api.github.com/users/YizhePKU/following{/other_user}", "gists_url": "https://api.github.com/users/YizhePKU/gists{/gist_id}", "starred_url": "https://api.github.com/users/YizhePKU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YizhePKU/subscriptions", "organizations_url": "https://api.github.com/users/YizhePKU/orgs", "repos_url": "https://api.github.com/users/YizhePKU/repos", "events_url": "https://api.github.com/users/YizhePKU/events{/privacy}", "received_events_url": "https://api.github.com/users/YizhePKU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ebeb3165cfdaa1b95ed39779760b634974a80e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ebeb3165cfdaa1b95ed39779760b634974a80e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ebeb3165cfdaa1b95ed39779760b634974a80e5"}], "stats": {"total": 104, "additions": 54, "deletions": 50}, "files": [{"sha": "7d193709f1a9d4794aed95562386b703071ab512", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1035737677dbe38dc6f25f24744fd209d0209c/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1035737677dbe38dc6f25f24744fd209d0209c/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=6f1035737677dbe38dc6f25f24744fd209d0209c", "patch": "@@ -402,7 +402,8 @@ class ASTLoweringExpr : public ASTLoweringBase\n       = new HIR::ArithmeticOrLogicalExpr (mapping,\n \t\t\t\t\t  std::unique_ptr<HIR::Expr> (lhs),\n \t\t\t\t\t  std::unique_ptr<HIR::Expr> (rhs),\n-\t\t\t\t\t  expr.get_expr_type(), expr.get_locus ());\n+\t\t\t\t\t  expr.get_expr_type (),\n+\t\t\t\t\t  expr.get_locus ());\n   }\n \n   void visit (AST::ComparisonExpr &expr)\n@@ -419,8 +420,8 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n     translated\n       = new HIR::ComparisonExpr (mapping, std::unique_ptr<HIR::Expr> (lhs),\n-\t\t\t\t std::unique_ptr<HIR::Expr> (rhs), expr.get_expr_type(),\n-\t\t\t\t expr.get_locus ());\n+\t\t\t\t std::unique_ptr<HIR::Expr> (rhs),\n+\t\t\t\t expr.get_expr_type (), expr.get_locus ());\n   }\n \n   void visit (AST::LazyBooleanExpr &expr)\n@@ -437,8 +438,8 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n     translated\n       = new HIR::LazyBooleanExpr (mapping, std::unique_ptr<HIR::Expr> (lhs),\n-\t\t\t\t  std::unique_ptr<HIR::Expr> (rhs), expr.get_expr_type(),\n-\t\t\t\t  expr.get_locus ());\n+\t\t\t\t  std::unique_ptr<HIR::Expr> (rhs),\n+\t\t\t\t  expr.get_expr_type (), expr.get_locus ());\n   }\n \n   void visit (AST::NegationExpr &expr)\n@@ -454,14 +455,16 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t   UNKNOWN_LOCAL_DEFID);\n     translated\n       = new HIR::NegationExpr (mapping,\n-\t\t\t       std::unique_ptr<HIR::Expr> (negated_value), expr.get_expr_type(),\n-\t\t\t       std::move (outer_attribs), expr.get_locus ());\n+\t\t\t       std::unique_ptr<HIR::Expr> (negated_value),\n+\t\t\t       expr.get_expr_type (), std::move (outer_attribs),\n+\t\t\t       expr.get_locus ());\n   }\n \n   /* Compound assignment expression is compiled away. */\n   void visit (AST::CompoundAssignmentExpr &expr)\n   {\n-      /* First we need to find the corresponding arithmetic or logical operator. */\n+    /* First we need to find the corresponding arithmetic or logical operator.\n+     */\n     ArithmeticOrLogicalOperator op;\n     switch (expr.get_expr_type ())\n       {"}, {"sha": "fb5f665d436379da90ab3ec1586af135dca8bba7", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1035737677dbe38dc6f25f24744fd209d0209c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1035737677dbe38dc6f25f24744fd209d0209c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=6f1035737677dbe38dc6f25f24744fd209d0209c", "patch": "@@ -1687,10 +1687,10 @@ NegationExpr::as_string () const\n \n   switch (expr_type)\n     {\n-        case NegationOperator::NEGATE:\n+    case NegationOperator::NEGATE:\n       str = \"-\";\n       break;\n-        case NegationOperator::NOT:\n+    case NegationOperator::NOT:\n       str = \"!\";\n       break;\n     default:\n@@ -1748,22 +1748,22 @@ ComparisonExpr::as_string () const\n \n   switch (expr_type)\n     {\n-        case ComparisonOperator::EQUAL:\n+    case ComparisonOperator::EQUAL:\n       str += \" == \";\n       break;\n-        case ComparisonOperator::NOT_EQUAL:\n+    case ComparisonOperator::NOT_EQUAL:\n       str += \" != \";\n       break;\n-        case ComparisonOperator::GREATER_THAN:\n+    case ComparisonOperator::GREATER_THAN:\n       str += \" > \";\n       break;\n-        case ComparisonOperator::LESS_THAN:\n+    case ComparisonOperator::LESS_THAN:\n       str += \" < \";\n       break;\n-        case ComparisonOperator::GREATER_OR_EQUAL:\n+    case ComparisonOperator::GREATER_OR_EQUAL:\n       str += \" >= \";\n       break;\n-        case ComparisonOperator::LESS_OR_EQUAL:\n+    case ComparisonOperator::LESS_OR_EQUAL:\n       str += \" <= \";\n       break;\n     default:\n@@ -1832,10 +1832,10 @@ LazyBooleanExpr::as_string () const\n \n   switch (expr_type)\n     {\n-        case LazyBooleanOperator::LOGICAL_OR:\n+    case LazyBooleanOperator::LOGICAL_OR:\n       str += \" || \";\n       break;\n-        case LazyBooleanOperator::LOGICAL_AND:\n+    case LazyBooleanOperator::LOGICAL_AND:\n       str += \" && \";\n       break;\n     default:\n@@ -2000,34 +2000,34 @@ ArithmeticOrLogicalExpr::as_string () const\n   // get operator string\n   switch (expr_type)\n     {\n-        case ArithmeticOrLogicalOperator::ADD:\n+    case ArithmeticOrLogicalOperator::ADD:\n       operator_str = \"+\";\n       break;\n-        case ArithmeticOrLogicalOperator::SUBTRACT:\n+    case ArithmeticOrLogicalOperator::SUBTRACT:\n       operator_str = \"-\";\n       break;\n-        case ArithmeticOrLogicalOperator::MULTIPLY:\n+    case ArithmeticOrLogicalOperator::MULTIPLY:\n       operator_str = \"*\";\n       break;\n-        case ArithmeticOrLogicalOperator::DIVIDE:\n+    case ArithmeticOrLogicalOperator::DIVIDE:\n       operator_str = \"/\";\n       break;\n-        case ArithmeticOrLogicalOperator::MODULUS:\n+    case ArithmeticOrLogicalOperator::MODULUS:\n       operator_str = \"%\";\n       break;\n-        case ArithmeticOrLogicalOperator::BITWISE_AND:\n+    case ArithmeticOrLogicalOperator::BITWISE_AND:\n       operator_str = \"&\";\n       break;\n-        case ArithmeticOrLogicalOperator::BITWISE_OR:\n+    case ArithmeticOrLogicalOperator::BITWISE_OR:\n       operator_str = \"|\";\n       break;\n-        case ArithmeticOrLogicalOperator::BITWISE_XOR:\n+    case ArithmeticOrLogicalOperator::BITWISE_XOR:\n       operator_str = \"^\";\n       break;\n-        case ArithmeticOrLogicalOperator::LEFT_SHIFT:\n+    case ArithmeticOrLogicalOperator::LEFT_SHIFT:\n       operator_str = \"<<\";\n       break;\n-        case ArithmeticOrLogicalOperator::RIGHT_SHIFT:\n+    case ArithmeticOrLogicalOperator::RIGHT_SHIFT:\n       operator_str = \">>\";\n       break;\n     default:"}, {"sha": "5cbd8a56b658b53acd9b49ec2e8ed76fcf76cad6", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1035737677dbe38dc6f25f24744fd209d0209c/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1035737677dbe38dc6f25f24744fd209d0209c/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=6f1035737677dbe38dc6f25f24744fd209d0209c", "patch": "@@ -12528,9 +12528,10 @@ Parser<ManagedTokenSource>::left_denotation (\n       // sum expression - binary infix\n       /*return parse_binary_plus_expr (tok, std::move (left),\n \t\t\t\t     std::move (outer_attrs), restrictions);*/\n-      return parse_arithmetic_or_logical_expr (\n-\ttok, std::move (left), std::move (outer_attrs),\n-\tArithmeticOrLogicalOperator::ADD, restrictions);\n+      return parse_arithmetic_or_logical_expr (tok, std::move (left),\n+\t\t\t\t\t       std::move (outer_attrs),\n+\t\t\t\t\t       ArithmeticOrLogicalOperator::ADD,\n+\t\t\t\t\t       restrictions);\n     case MINUS:\n       // difference expression - binary infix\n       /*return parse_binary_minus_expr (tok, std::move (left),\n@@ -12600,8 +12601,7 @@ Parser<ManagedTokenSource>::left_denotation (\n \t\t\t\t      std::move (outer_attrs), restrictions);*/\n       return parse_comparison_expr (tok, std::move (left),\n \t\t\t\t    std::move (outer_attrs),\n-\t\t\t\t    ComparisonOperator::EQUAL,\n-\t\t\t\t    restrictions);\n+\t\t\t\t    ComparisonOperator::EQUAL, restrictions);\n     case NOT_EQUAL:\n       // not equal to expression - binary infix (no associativity)\n       /*return parse_binary_not_equal_expr (tok, std::move (left),\n@@ -12634,17 +12634,19 @@ Parser<ManagedTokenSource>::left_denotation (\n       /*return parse_binary_greater_equal_expr (tok, std::move (left),\n \t\t\t\t\t      std::move (outer_attrs),\n \t\t\t\t\t      restrictions);*/\n-      return parse_comparison_expr (\n-\ttok, std::move (left), std::move (outer_attrs),\n-\tComparisonOperator::GREATER_OR_EQUAL, restrictions);\n+      return parse_comparison_expr (tok, std::move (left),\n+\t\t\t\t    std::move (outer_attrs),\n+\t\t\t\t    ComparisonOperator::GREATER_OR_EQUAL,\n+\t\t\t\t    restrictions);\n     case LESS_OR_EQUAL:\n       // less than or equal to expression - binary infix (no associativity)\n       /*return parse_binary_less_equal_expr (tok, std::move (left),\n \t\t\t\t\t   std::move (outer_attrs),\n \t\t\t\t\t   restrictions);*/\n-      return parse_comparison_expr (\n-\ttok, std::move (left), std::move (outer_attrs),\n-\tComparisonOperator::LESS_OR_EQUAL, restrictions);\n+      return parse_comparison_expr (tok, std::move (left),\n+\t\t\t\t    std::move (outer_attrs),\n+\t\t\t\t    ComparisonOperator::LESS_OR_EQUAL,\n+\t\t\t\t    restrictions);\n     case OR:\n       // lazy logical or expression - binary infix\n       return parse_lazy_or_expr (tok, std::move (left), std::move (outer_attrs),\n@@ -12692,9 +12694,10 @@ Parser<ManagedTokenSource>::left_denotation (\n        * associativity) */\n       /*return parse_div_assig_expr (tok, std::move (left),\n \t\t\t\t   std::move (outer_attrs), restrictions);*/\n-      return parse_compound_assignment_expr (\n-\ttok, std::move (left), std::move (outer_attrs),\n-\tCompoundAssignmentOperator::DIVIDE, restrictions);\n+      return parse_compound_assignment_expr (tok, std::move (left),\n+\t\t\t\t\t     std::move (outer_attrs),\n+\t\t\t\t\t     CompoundAssignmentOperator::DIVIDE,\n+\t\t\t\t\t     restrictions);\n     case PERCENT_EQ:\n       /* modulo-assignment expression - binary infix (note right-to-left\n        * associativity) */\n@@ -12901,8 +12904,7 @@ Parser<ManagedTokenSource>::parse_binary_plus_expr (\n \n   return std::unique_ptr<AST::ArithmeticOrLogicalExpr> (\n     new AST::ArithmeticOrLogicalExpr (std::move (left), std::move (right),\n-\t\t\t\t      ArithmeticOrLogicalOperator::ADD,\n-\t\t\t\t      locus));\n+\t\t\t\t      ArithmeticOrLogicalOperator::ADD, locus));\n }\n \n // Parses a binary subtraction expression (with Pratt parsing)."}, {"sha": "183f41a3aa74a67b694d37cb3db131cb3a30481f", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1035737677dbe38dc6f25f24744fd209d0209c/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1035737677dbe38dc6f25f24744fd209d0209c/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=6f1035737677dbe38dc6f25f24744fd209d0209c", "patch": "@@ -379,8 +379,8 @@ class Backend\n   // Return an expression for the operation LEFT OP RIGHT.\n   // Supported values of OP are enumerated in ComparisonOperator.\n   virtual Bexpression *comparison_expression (ComparisonOperator op,\n-\t\t\t\t\t       Bexpression *left,\n-\t\t\t\t\t       Bexpression *right, Location)\n+\t\t\t\t\t      Bexpression *left,\n+\t\t\t\t\t      Bexpression *right, Location)\n     = 0;\n \n   // Return an expression for the operation LEFT OP RIGHT."}, {"sha": "f8033af35f3e5659a2192a7eb0dee1046dcae0d4", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1035737677dbe38dc6f25f24744fd209d0209c/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1035737677dbe38dc6f25f24744fd209d0209c/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=6f1035737677dbe38dc6f25f24744fd209d0209c", "patch": "@@ -300,9 +300,8 @@ class Gcc_backend : public Backend\n \t\t\t\t\t\t Bexpression *left,\n \t\t\t\t\t\t Bexpression *right, Location);\n \n-  Bexpression *comparison_expression (ComparisonOperator op,\n-\t\t\t\t       Bexpression *left, Bexpression *right,\n-\t\t\t\t       Location);\n+  Bexpression *comparison_expression (ComparisonOperator op, Bexpression *left,\n+\t\t\t\t      Bexpression *right, Location);\n \n   Bexpression *lazy_boolean_expression (LazyBooleanOperator op,\n \t\t\t\t\tBexpression *left, Bexpression *right,\n@@ -1812,7 +1811,7 @@ Gcc_backend::arithmetic_or_logical_expression (ArithmeticOrLogicalOperator op,\n // Return an expression for the comparison operation LEFT OP RIGHT.\n Bexpression *\n Gcc_backend::comparison_expression (ComparisonOperator op, Bexpression *left,\n-\t\t\t\t     Bexpression *right, Location location)\n+\t\t\t\t    Bexpression *right, Location location)\n {\n   /* Check if either expression is an error, in which case we return an error\n      expression. */"}]}