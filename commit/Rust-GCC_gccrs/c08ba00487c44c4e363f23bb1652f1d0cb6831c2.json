{"sha": "c08ba00487c44c4e363f23bb1652f1d0cb6831c2", "node_id": "C_kwDOANBUbNoAKGMwOGJhMDA0ODdjNDRjNGUzNjNmMjNiYjE2NTJmMWQwY2I2ODMxYzI", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-06-10T12:22:21Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-06-10T16:27:40Z"}, "message": "c++: Adjust module initializer calling emission\n\nWe special-case emitting the calls of module initializer functions.  It's\nsimpler to just emit a static fn do do that, and add it onto the front of\nthe global init fn chain.  We can also move the calculation of the set of\ninitializers to call to the point of use.\n\n\tgcc/cp/\n\t* cp-tree.h (module_has_import_init): Rename to ...\n\t(module_determined_import_inits): ... here.\n\t* decl2.cc (start_objects): Do not handle module initializers\n\there.\n\t(c_parse_final_cleanups): Generate a separate module\n\tinitializer calling function and add it to the list.  Shrink\n\tthe c-lang region.\n\t* module.cc (num_init_calls_needed): Delete.\n\t (module_has_import_init): Rename to ...\n\t(module_determined_import_inits): ... here. Do the\n\tcalculation here ...\n\t(finish_module_processing): ... rather than here.\n\t(module_add_import_initializers): Reformat.\n\n\tgcc/testsuite/\n\t* g++.dg/modules/init-3_a.C: New.\n\t* g++.dg/modules/init-3_b.C: New.\n\t* g++.dg/modules/init-3_c.C: New.", "tree": {"sha": "bc98d94e3d94c3eab70e1713a407590528346f22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc98d94e3d94c3eab70e1713a407590528346f22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c08ba00487c44c4e363f23bb1652f1d0cb6831c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c08ba00487c44c4e363f23bb1652f1d0cb6831c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c08ba00487c44c4e363f23bb1652f1d0cb6831c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c08ba00487c44c4e363f23bb1652f1d0cb6831c2/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1459b55d24ce6508330690bf4c932f7a5218c9f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1459b55d24ce6508330690bf4c932f7a5218c9f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1459b55d24ce6508330690bf4c932f7a5218c9f3"}], "stats": {"total": 199, "additions": 117, "deletions": 82}, "files": [{"sha": "f1294dac7d5b6a254582fcf572606015136e41a2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08ba00487c44c4e363f23bb1652f1d0cb6831c2/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08ba00487c44c4e363f23bb1652f1d0cb6831c2/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c08ba00487c44c4e363f23bb1652f1d0cb6831c2", "patch": "@@ -7180,7 +7180,7 @@ extern module_state *get_module (tree name, module_state *parent = NULL,\n extern bool module_may_redeclare (tree decl);\n \n extern bool module_global_init_needed ();\n-extern bool module_has_import_inits ();\n+extern bool module_determine_import_inits ();\n extern void module_add_import_initializers ();\n \n /* Where the namespace-scope decl was originally declared.  */"}, {"sha": "ff1c36745cf4a48170353cdff2bff7c4f64e1a10", "filename": "gcc/cp/decl2.cc", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08ba00487c44c4e363f23bb1652f1d0cb6831c2/gcc%2Fcp%2Fdecl2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08ba00487c44c4e363f23bb1652f1d0cb6831c2/gcc%2Fcp%2Fdecl2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.cc?ref=c08ba00487c44c4e363f23bb1652f1d0cb6831c2", "patch": "@@ -3903,8 +3903,7 @@ start_objects (bool initp, unsigned priority, bool has_body)\n \n   tree body = begin_compound_stmt (BCS_FN_BODY);\n \n-  bool has_import_inits = default_init && module_has_import_inits ();\n-  if (is_module_init && (has_import_inits || has_body))\n+  if (is_module_init && has_body)\n     {\n       // If the function is going to be empty, don't emit idempotency.\n       // 'static bool __in_chrg = false;\n@@ -3930,9 +3929,6 @@ start_objects (bool initp, unsigned priority, bool has_body)\n       finish_expr_stmt (assign);\n     }\n \n-  if (has_import_inits)\n-    module_add_import_initializers ();\n-\n   return body;\n }\n \n@@ -5195,6 +5191,12 @@ c_parse_final_cleanups (void)\n \n   maybe_warn_sized_delete ();\n \n+  // Place the init fns in the right order.  We need to do this now,\n+  // so that any module init will go at the start.\n+  if (static_init_fini_fns[true])\n+    for (auto iter : *static_init_fini_fns[true])\n+      iter.second = nreverse (iter.second);\n+  \n   /* Then, do the Objective-C stuff.  This is where all the\n      Objective-C module stuff gets generated (symtab,\n      class/protocol/selector lists etc).  This must be done after C++\n@@ -5203,11 +5205,18 @@ c_parse_final_cleanups (void)\n   if (c_dialect_objc ())\n     objc_write_global_declarations ();\n \n-  /* We give C linkage to static constructors and destructors.  */\n-  push_lang_context (lang_name_c);\n+  if (module_determine_import_inits ())\n+    {\n+      input_location = locus_at_end_of_parsing;\n+      tree body = start_partial_init_fini_fn (true, DEFAULT_INIT_PRIORITY,\n+\t\t\t\t\t      ssdf_count++);\n+      module_add_import_initializers ();\n+      input_location = locus_at_end_of_parsing;\n+      finish_partial_init_fini_fn (body);\n+    }\n \n   if ((c_dialect_objc () && objc_static_init_needed_p ())\n-      || module_global_init_needed () || module_has_import_inits ())\n+      || module_global_init_needed ())\n     {\n       // Make sure there's a default priority entry.\n       if (!static_init_fini_fns[true])\n@@ -5216,32 +5225,24 @@ c_parse_final_cleanups (void)\n     } \n \n   /* Generate initialization and destruction functions for all\n-     priorities for which they are required.  */\n+     priorities for which they are required.  They have C-language\n+     linkage.  */\n+  push_lang_context (lang_name_c);\n   for (unsigned initp = 2; initp--;)\n     if (static_init_fini_fns[initp])\n       {\n \tfor (auto iter : *static_init_fini_fns[initp])\n-\t  {\n-\t    tree fns = iter.second;\n-\t    // The list of functions was constructed in reverse\n-\t    // order, which we only want for dtors.\n-\t    if (initp)\n-\t      fns = nreverse (fns);\n-\t    generate_ctor_or_dtor_function (initp, iter.first, fns,\n-\t\t\t\t\t    locus_at_end_of_parsing);\n-\t  }\n+\t  generate_ctor_or_dtor_function (initp, iter.first, iter.second,\n+\t\t\t\t\t  locus_at_end_of_parsing);\n \tstatic_init_fini_fns[initp] = nullptr;\n       }\n-  \n+  pop_lang_context ();\n+\n   fini_modules ();\n \n   /* Generate any missing aliases.  */\n   maybe_apply_pending_pragma_weaks ();\n \n-  /* We're done with static constructors, so we can go back to \"C++\"\n-     linkage now.  */\n-  pop_lang_context ();\n-\n   if (flag_vtable_verify)\n     {\n       vtv_recover_class_info ();"}, {"sha": "2b1877ea82e3c30fa8297df3b6a65d5046470844", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 52, "deletions": 58, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08ba00487c44c4e363f23bb1652f1d0cb6831c2/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08ba00487c44c4e363f23bb1652f1d0cb6831c2/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=c08ba00487c44c4e363f23bb1652f1d0cb6831c2", "patch": "@@ -3783,9 +3783,6 @@ static unsigned loaded_clusters;\n /* What the current TU is.  */\n unsigned module_kind;\n \n-/* Number of global init calls needed.  */\n-unsigned num_init_calls_needed = 0;\n-\n /* Global trees.  */\n static const std::pair<tree *, unsigned> global_tree_arys[] =\n   {\n@@ -19035,12 +19032,43 @@ module_global_init_needed ()\n   return module_has_cmi_p () && !header_module_p ();\n }\n \n-/* Return true IFF we have import global inits to call.  */\n+/* Calculate which, if any, import initializers need calling.  */\n \n bool\n-module_has_import_inits ()\n+module_determine_import_inits ()\n {\n-  return bool (num_init_calls_needed);\n+  if (!modules || header_module_p ())\n+    return false;\n+\n+  /* Determine call_init_p.  We need the same bitmap allocation\n+     scheme as for the imports member.  */\n+  function_depth++; /* Disable GC.  */\n+  bitmap indirect_imports (BITMAP_GGC_ALLOC ());\n+\n+  bool any = false;\n+\n+  /* Because indirect imports are before their direct import, and\n+     we're scanning the array backwards, we only need one pass!  */\n+  for (unsigned ix = modules->length (); --ix;)\n+    {\n+      module_state *import = (*modules)[ix];\n+\n+      if (!import->is_header ()\n+\t  && !bitmap_bit_p (indirect_imports, ix))\n+\t{\n+\t  /* Everything this imports is therefore indirectly\n+\t     imported.  */\n+\t  bitmap_ior_into (indirect_imports, import->imports);\n+\t  /* We don't have to worry about the self-import bit,\n+\t     because of the single pass.  */\n+\n+\t  import->call_init_p = true;\n+\t  any = true;\n+\t}\n+    }\n+  function_depth--;\n+\n+  return any;\n }\n \n /* Emit calls to each direct import's global initializer.  Including\n@@ -19054,35 +19082,30 @@ module_has_import_inits ()\n void\n module_add_import_initializers ()\n {\n-  unsigned calls = 0;\n-  if (modules)\n-    {\n-      tree fntype = build_function_type (void_type_node, void_list_node);\n-      releasing_vec args;  // There are no args\n+  if (!modules || header_module_p ())\n+    return;\n \n-      for (unsigned ix = modules->length (); --ix;)\n+  tree fntype = build_function_type (void_type_node, void_list_node);\n+  releasing_vec args;  // There are no args\n+\n+  for (unsigned ix = modules->length (); --ix;)\n+    {\n+      module_state *import = (*modules)[ix];\n+      if (import->call_init_p)\n \t{\n-\t  module_state *import = (*modules)[ix];\n-\t  if (import->call_init_p)\n-\t    {\n-\t      tree name = mangle_module_global_init (ix);\n-\t      tree fndecl = build_lang_decl (FUNCTION_DECL, name, fntype);\n+\t  tree name = mangle_module_global_init (ix);\n+\t  tree fndecl = build_lang_decl (FUNCTION_DECL, name, fntype);\n \n-\t      DECL_CONTEXT (fndecl) = FROB_CONTEXT (global_namespace);\n-\t      SET_DECL_ASSEMBLER_NAME (fndecl, name);\n-\t      TREE_PUBLIC (fndecl) = true;\n-\t      determine_visibility (fndecl);\n+\t  DECL_CONTEXT (fndecl) = FROB_CONTEXT (global_namespace);\n+\t  SET_DECL_ASSEMBLER_NAME (fndecl, name);\n+\t  TREE_PUBLIC (fndecl) = true;\n+\t  determine_visibility (fndecl);\n \n-\t      tree call = cp_build_function_call_vec (fndecl, &args,\n-\t\t\t\t\t\t      tf_warning_or_error);\n-\t      finish_expr_stmt (call);\n-\t      \n-\t      calls++;\n-\t    }\n+\t  tree call = cp_build_function_call_vec (fndecl, &args,\n+\t\t\t\t\t\t  tf_warning_or_error);\n+\t  finish_expr_stmt (call);\n \t}\n     }\n-\n-  gcc_checking_assert (calls == num_init_calls_needed);\n }\n \n /* NAME & LEN are a preprocessed header name, possibly including the\n@@ -19951,35 +19974,6 @@ finish_module_processing (cpp_reader *reader)\n \t\t       (available_clusters + !available_clusters));\n       dump.pop (n);\n     }\n-\n-  if (modules && !header_module_p ())\n-    {\n-      /* Determine call_init_p.  We need the same bitmap allocation\n-         scheme as for the imports member.  */\n-      function_depth++; /* Disable GC.  */\n-      bitmap indirect_imports (BITMAP_GGC_ALLOC ());\n-\n-      /* Because indirect imports are before their direct import, and\n-\t we're scanning the array backwards, we only need one pass!  */\n-      for (unsigned ix = modules->length (); --ix;)\n-\t{\n-\t  module_state *import = (*modules)[ix];\n-\n-\t  if (!import->is_header ()\n-\t      && !bitmap_bit_p (indirect_imports, ix))\n-\t    {\n-\t      /* Everything this imports is therefore indirectly\n-\t\t imported.  */\n-\t      bitmap_ior_into (indirect_imports, import->imports);\n-\t      /* We don't have to worry about the self-import bit,\n-\t\t because of the single pass.  */\n-\n-\t      import->call_init_p = true;\n-\t      num_init_calls_needed++;\n-\t    }\n-\t}\n-      function_depth--;\n-    }\n }\n \n void"}, {"sha": "f0e27ec04cd571e118ff3babb44e0575dc08592b", "filename": "gcc/testsuite/g++.dg/modules/init-3_a.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08ba00487c44c4e363f23bb1652f1d0cb6831c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-3_a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08ba00487c44c4e363f23bb1652f1d0cb6831c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-3_a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-3_a.C?ref=c08ba00487c44c4e363f23bb1652f1d0cb6831c2", "patch": "@@ -0,0 +1,17 @@\n+// { dg-module-do run }\n+// { dg-additional-options {-fmodules-ts -Wno-pedantic} }\n+module;\n+# 5 __FILE__ 1\n+extern int counter;\n+# 7 \"\" 2\n+export module One;\n+\n+export class Dyn\n+{\n+  int i;\n+public:\n+  Dyn () : i (++counter) {}\n+  operator int () const { return i; }\n+};\n+\n+export Dyn one;"}, {"sha": "a4e0036e6681cea55b3c5c01cecb715153ecbfd4", "filename": "gcc/testsuite/g++.dg/modules/init-3_b.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08ba00487c44c4e363f23bb1652f1d0cb6831c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-3_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08ba00487c44c4e363f23bb1652f1d0cb6831c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-3_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-3_b.C?ref=c08ba00487c44c4e363f23bb1652f1d0cb6831c2", "patch": "@@ -0,0 +1,6 @@\n+// { dg-additional-options {-fmodules-ts -Wno-pedantic} }\n+\n+export module Two;\n+import One;\n+\n+export Dyn two;"}, {"sha": "bb4635a6c90c6f7ab2095c95cd8d081419339437", "filename": "gcc/testsuite/g++.dg/modules/init-3_c.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08ba00487c44c4e363f23bb1652f1d0cb6831c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-3_c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08ba00487c44c4e363f23bb1652f1d0cb6831c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-3_c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-3_c.C?ref=c08ba00487c44c4e363f23bb1652f1d0cb6831c2", "patch": "@@ -0,0 +1,17 @@\n+// { dg-additional-options {-fmodules-ts -Wno-pedantic} }\n+\n+import One;\n+int counter = 0;\n+Dyn three;\n+import Two;\n+\n+int main ()\n+{\n+  if (one != 1)\n+    return 1;\n+  if (two != 2)\n+    return 2;\n+  if (three != 3)\n+    return 3;\n+  return 0;\n+}"}]}