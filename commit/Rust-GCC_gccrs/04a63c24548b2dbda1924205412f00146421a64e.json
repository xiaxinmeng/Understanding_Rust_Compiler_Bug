{"sha": "04a63c24548b2dbda1924205412f00146421a64e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRhNjNjMjQ1NDhiMmRiZGExOTI0MjA1NDEyZjAwMTQ2NDIxYTY0ZQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2016-04-21T22:01:34Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2016-04-21T22:01:34Z"}, "message": "X86: Fix a typo in call_insn_operand\n\nr231923 has\n\n ;; Test for a valid operand for a call instruction.\n ;; Allow constant call address operands in Pmode only.\n (define_special_predicate \"call_insn_operand\"\n   (ior (match_test \"constant_call_address_operand\n \t\t     (op, mode == VOIDmode ? mode : Pmode)\")\n        (match_operand 0 \"call_register_no_elim_operand\")\n-       (and (not (match_test \"TARGET_X32\"))\n-\t    (match_operand 0 \"memory_operand\"))))\n+       (ior (and (not (match_test \"TARGET_X32\"))\n+\t\t (match_operand 0 \"sibcall_memory_operand\"))\n                                   ^^^^^^^^^^^^^^^^^^^^^^^ A typo.\n+\t    (and (match_test \"TARGET_X32 && Pmode == DImode\")\n+\t\t (match_operand 0 \"GOT_memory_operand\")))))\n\n\"sibcall_memory_operand\" should be \"memory_operand\".\n\ngcc/\n\n\tPR target/70750\n\t* config/i386/predicates.md (call_insn_operand): Replace\n\tsibcall_memory_operand with memory_operand.\n\ngcc/testsuite/\n\n\tPR target/70750\n\t* gcc.target/i386/pr70750-1.c: New test.\n\t* gcc.target/i386/pr70750-2.c: Likewise.\n\nFrom-SVN: r235353", "tree": {"sha": "d37bcb94f9f4f567d51e69e1e77e0ed3c7883b6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d37bcb94f9f4f567d51e69e1e77e0ed3c7883b6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04a63c24548b2dbda1924205412f00146421a64e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a63c24548b2dbda1924205412f00146421a64e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04a63c24548b2dbda1924205412f00146421a64e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a63c24548b2dbda1924205412f00146421a64e/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e07f9aaf35eeb81ac81a521b9b5d818a5062761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e07f9aaf35eeb81ac81a521b9b5d818a5062761", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e07f9aaf35eeb81ac81a521b9b5d818a5062761"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "06ff30c1ac0c1123bd51861c20ae709ef8aa343e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a63c24548b2dbda1924205412f00146421a64e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a63c24548b2dbda1924205412f00146421a64e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04a63c24548b2dbda1924205412f00146421a64e", "patch": "@@ -1,3 +1,9 @@\n+2016-04-21  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/70750\n+\t* config/i386/predicates.md (call_insn_operand): Replace\n+\tsibcall_memory_operand with memory_operand.\n+\n 2016-04-21  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \t* tree-vrp.c (register_edge_assert_for_2): Remove redundant"}, {"sha": "93dda7bb0e7cc4d6bee0f5880437e82a577c4adf", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a63c24548b2dbda1924205412f00146421a64e/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a63c24548b2dbda1924205412f00146421a64e/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=04a63c24548b2dbda1924205412f00146421a64e", "patch": "@@ -637,7 +637,7 @@\n \t\t     (op, mode == VOIDmode ? mode : Pmode)\")\n        (match_operand 0 \"call_register_no_elim_operand\")\n        (ior (and (not (match_test \"TARGET_X32\"))\n-\t\t (match_operand 0 \"sibcall_memory_operand\"))\n+\t\t (match_operand 0 \"memory_operand\"))\n \t    (and (match_test \"TARGET_X32 && Pmode == DImode\")\n \t\t (match_operand 0 \"GOT_memory_operand\")))))\n "}, {"sha": "38b18c9073ffd351c33db1e754432d49a48e1dc2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a63c24548b2dbda1924205412f00146421a64e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a63c24548b2dbda1924205412f00146421a64e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04a63c24548b2dbda1924205412f00146421a64e", "patch": "@@ -1,3 +1,9 @@\n+2016-04-21  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/70750\n+\t* gcc.target/i386/pr70750-1.c: New test.\n+\t* gcc.target/i386/pr70750-2.c: Likewise.\n+\n 2016-04-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/70540"}, {"sha": "9fcab17dc9c89d6d4cd111bdaa8e5193f98c62ad", "filename": "gcc/testsuite/gcc.target/i386/pr70750-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a63c24548b2dbda1924205412f00146421a64e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70750-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a63c24548b2dbda1924205412f00146421a64e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70750-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70750-1.c?ref=04a63c24548b2dbda1924205412f00146421a64e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+f (int (**p) (void))\n+{\n+  return p[1]();\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\].*\\\\(%rdi\\\\)\" { target { lp64 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]\\\\*%rax\" { target { x32 } } } } */"}, {"sha": "afbef37fc9096cac342edbc0ea035afb8da1e463", "filename": "gcc/testsuite/gcc.target/i386/pr70750-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a63c24548b2dbda1924205412f00146421a64e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70750-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a63c24548b2dbda1924205412f00146421a64e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70750-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70750-2.c?ref=04a63c24548b2dbda1924205412f00146421a64e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+f (int (**p) (void))\n+{\n+  return -p[1]();\n+}\n+\n+/* { dg-final { scan-assembler \"call\\[ \\t\\].*\\\\(%rdi\\\\)\" { target { lp64 } } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]\\\\*%rax\" { target { x32 } } } } */"}]}