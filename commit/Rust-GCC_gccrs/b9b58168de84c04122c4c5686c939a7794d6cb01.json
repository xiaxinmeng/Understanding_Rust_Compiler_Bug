{"sha": "b9b58168de84c04122c4c5686c939a7794d6cb01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjliNTgxNjhkZTg0YzA0MTIyYzRjNTY4NmM5MzlhNzc5NGQ2Y2IwMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2006-01-05T21:06:47Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2006-01-05T21:06:47Z"}, "message": "* c-parser.c (c_parser_objc_methodprotolist): Handle CPP_PRAGMA.\n\nFrom-SVN: r109388", "tree": {"sha": "6958c989792a6d8aa787334e7df27e2397ad1119", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6958c989792a6d8aa787334e7df27e2397ad1119"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9b58168de84c04122c4c5686c939a7794d6cb01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9b58168de84c04122c4c5686c939a7794d6cb01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9b58168de84c04122c4c5686c939a7794d6cb01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9b58168de84c04122c4c5686c939a7794d6cb01/comments", "author": null, "committer": null, "parents": [{"sha": "068e6bb3f17ed3bcd09863ecb54f7ee0739d8c74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/068e6bb3f17ed3bcd09863ecb54f7ee0739d8c74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/068e6bb3f17ed3bcd09863ecb54f7ee0739d8c74"}], "stats": {"total": 33, "additions": 12, "deletions": 21}, "files": [{"sha": "99809f0d4fa2670a3631c11c77d98ae3b0d76cce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b58168de84c04122c4c5686c939a7794d6cb01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b58168de84c04122c4c5686c939a7794d6cb01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9b58168de84c04122c4c5686c939a7794d6cb01", "patch": "@@ -1,3 +1,7 @@\n+2006-01-05  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-parser.c (c_parser_objc_methodprotolist): Handle CPP_PRAGMA.\n+\n 2006-01-05  Carlos O'Donell  <carlos@codesourcery.com>\n \n \t* c-typeck.c: Update copyright date."}, {"sha": "91a9d299ca0e77c15c80dd9b97c1c8d2e9ef2e84", "filename": "gcc/c-parser.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b58168de84c04122c4c5686c939a7794d6cb01/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b58168de84c04122c4c5686c939a7794d6cb01/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=b9b58168de84c04122c4c5686c939a7794d6cb01", "patch": "@@ -5866,6 +5866,9 @@ c_parser_objc_methodprotolist (c_parser *parser)\n \tcase CPP_MINUS:\n \t  c_parser_objc_methodproto (parser);\n \t  break;\n+\tcase CPP_PRAGMA:\n+\t  c_parser_pragma (parser, pragma_external);\n+\t  break;\n \tcase CPP_EOF:\n \t  return;\n \tdefault:"}, {"sha": "0c3010dcf30689a9b2c5a0f7685d2512e9362803", "filename": "gcc/testsuite/objc.dg/pragma-1.m", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b58168de84c04122c4c5686c939a7794d6cb01/gcc%2Ftestsuite%2Fobjc.dg%2Fpragma-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b58168de84c04122c4c5686c939a7794d6cb01/gcc%2Ftestsuite%2Fobjc.dg%2Fpragma-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fpragma-1.m?ref=b9b58168de84c04122c4c5686c939a7794d6cb01", "patch": "@@ -1,23 +1,7 @@\n-/* It is OK to use #pragma inside @implementation body. This test checks that.  */\n-/* Ziemowit Laski  <zlaski@apple.com>.  */\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* ??? Is there a better pragma that is handled for all targets, not\n+   handled by the preprocessor, that would be better for testing here?  */\n \n-@interface A\n-{\n-   int p;\n-}\n-+(int) foo;\n--(int) bar;\n-@end\n-\n-@implementation A\n-#pragma mark -\n-#pragma mark init / dealloc\n-+ (int)foo {\n-  return 1;\n-}\n-#pragma mark -\n-#pragma mark Private Functions\n-- (int)bar {\n-  return 2;\n-}\n+@interface a {}\n+#pragma mark --- Output ---\n @end"}]}