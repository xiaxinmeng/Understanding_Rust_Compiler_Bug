{"sha": "19c5b1cf0db62c006ae055b8f12a52eea73b82cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTljNWIxY2YwZGI2MmMwMDZhZTA1NWI4ZjEyYTUyZWVhNzNiODJjZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-03-13T14:20:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-03-13T14:20:17Z"}, "message": "varasm.c (globalize_decl): New fn.\n\n        * varasm.c (globalize_decl): New fn.\n        (assemble_start_function): Use it.\n        (asm_emit_uninitialized): Use it.\n        (assemble_alias): Use it.\n        (assemble_variable): Use it.\n\nFrom-SVN: r50736", "tree": {"sha": "b9254ce674c129b502ae8d4ae9716875be953aa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9254ce674c129b502ae8d4ae9716875be953aa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19c5b1cf0db62c006ae055b8f12a52eea73b82cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19c5b1cf0db62c006ae055b8f12a52eea73b82cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19c5b1cf0db62c006ae055b8f12a52eea73b82cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19c5b1cf0db62c006ae055b8f12a52eea73b82cf/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a15f5e1e277a72a2c5e3fbb2a020328f92f73a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a15f5e1e277a72a2c5e3fbb2a020328f92f73a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a15f5e1e277a72a2c5e3fbb2a020328f92f73a9"}], "stats": {"total": 89, "additions": 39, "deletions": 50}, "files": [{"sha": "2ee542cae722ac231f18ff41f736d0b5c397aa12", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19c5b1cf0db62c006ae055b8f12a52eea73b82cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19c5b1cf0db62c006ae055b8f12a52eea73b82cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19c5b1cf0db62c006ae055b8f12a52eea73b82cf", "patch": "@@ -1,3 +1,11 @@\n+2002-03-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* varasm.c (globalize_decl): New fn.\n+\t(assemble_start_function): Use it.\n+\t(asm_emit_uninitialized): Use it.\n+\t(assemble_alias): Use it.\n+\t(assemble_variable): Use it.\n+\n 2002-03-13  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config/cris/cris.c (cris_target_asm_function_prologue): Revert"}, {"sha": "5d41f638ab1f0250960cbc84ea054b0c580d24cf", "filename": "gcc/varasm.c", "status": "modified", "additions": 31, "deletions": 50, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19c5b1cf0db62c006ae055b8f12a52eea73b82cf/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19c5b1cf0db62c006ae055b8f12a52eea73b82cf/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=19c5b1cf0db62c006ae055b8f12a52eea73b82cf", "patch": "@@ -171,6 +171,7 @@ static void mark_weak_decls\t\tPARAMS ((void *));\n #if defined (ASM_WEAKEN_LABEL) || defined (ASM_WEAKEN_DECL)\n static void remove_from_pending_weak_list\tPARAMS ((const char *));\n #endif\n+static void globalize_decl\t\tPARAMS ((tree));\n static void maybe_assemble_visibility\tPARAMS ((tree));\n static int in_named_entry_eq\t\tPARAMS ((const PTR, const PTR));\n static hashval_t in_named_entry_hash\tPARAMS ((const PTR));\n@@ -1237,22 +1238,7 @@ assemble_start_function (decl, fnname)\n \t    weak_global_object_name = name;\n \t}\n \n-#if defined (ASM_WEAKEN_LABEL) || defined (ASM_WEAKEN_DECL)\n-      if (DECL_WEAK (decl))\n-\t{\n-#ifdef ASM_WEAKEN_DECL\n-\t  ASM_WEAKEN_DECL (asm_out_file, decl, fnname, 0);\n-#else\n-\t  ASM_WEAKEN_LABEL (asm_out_file, fnname);\n-#endif\n-\t  /* Remove this function from the pending weak list so that\n-\t     we do not emit multiple .weak directives for it.  */\n-\t  remove_from_pending_weak_list\n-\t    (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)));\n-\t}\n-      else\n-#endif\n-      ASM_GLOBALIZE_LABEL (asm_out_file, fnname);\n+      globalize_decl (decl);\n \n       maybe_assemble_visibility (decl);\n     }\n@@ -1443,6 +1429,7 @@ asm_emit_uninitialised (decl, name, size, rounded)\n     {\n #ifdef ASM_EMIT_BSS\n     case asm_dest_bss:\n+      globalize_decl (decl);\n       ASM_EMIT_BSS (decl, name, size, rounded);\n       break;\n #endif\n@@ -1657,24 +1644,7 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n \n   /* First make the assembler name(s) global if appropriate.  */\n   if (TREE_PUBLIC (decl) && DECL_NAME (decl))\n-    {\n-#if defined (ASM_WEAKEN_LABEL) || defined (ASM_WEAKEN_DECL)\n-      if (DECL_WEAK (decl))\n-\t{\n-#ifdef ASM_WEAKEN_DECL\n-\t  ASM_WEAKEN_DECL (asm_out_file, decl, name, 0);\n-#else\n-\t  ASM_WEAKEN_LABEL (asm_out_file, name);\n-#endif\n-\t   /* Remove this variable from the pending weak list so that\n-\t      we do not emit multiple .weak directives for it.  */\n-\t  remove_from_pending_weak_list\n-\t    (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)));\n-\t}\n-      else\n-#endif\n-      ASM_GLOBALIZE_LABEL (asm_out_file, name);\n-    }\n+    globalize_decl (decl);\n \n   /* Output any data that we will need to use the address of.  */\n   if (DECL_INITIAL (decl) == error_mark_node)\n@@ -5151,6 +5121,32 @@ remove_from_pending_weak_list (name)\n }\n #endif /* defined (ASM_WEAKEN_LABEL) || defined (ASM_WEAKEN_DECL) */\n \n+/* Emit the assembly bits to indicate that DECL is globally visible.  */\n+\n+static void\n+globalize_decl (decl)\n+     tree decl;\n+{\n+  const char *name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+\n+#if defined (ASM_WEAKEN_LABEL) || defined (ASM_WEAKEN_DECL)\n+  if (DECL_WEAK (decl))\n+    {\n+#ifdef ASM_WEAKEN_DECL\n+      ASM_WEAKEN_DECL (asm_out_file, decl, name, 0);\n+#else\n+      ASM_WEAKEN_LABEL (asm_out_file, name);\n+#endif\n+      /* Remove this function from the pending weak list so that\n+\t we do not emit multiple .weak directives for it.  */\n+      remove_from_pending_weak_list (name);\n+      return;\n+    }\n+  /* else */\n+#endif\n+  ASM_GLOBALIZE_LABEL (asm_out_file, name);\n+}\n+\n /* Emit an assembler directive to make the symbol for DECL an alias to\n    the symbol for TARGET.  */\n \n@@ -5171,22 +5167,7 @@ assemble_alias (decl, target)\n \n   if (TREE_PUBLIC (decl))\n     {\n-#if defined (ASM_WEAKEN_LABEL) || defined (ASM_WEAKEN_DECL)\n-      if (DECL_WEAK (decl))\n-\t{\n-#ifdef ASM_WEAKEN_DECL\n-\t  ASM_WEAKEN_DECL (asm_out_file, decl, name, 0);\n-#else\n-\t  ASM_WEAKEN_LABEL (asm_out_file, name);\n-#endif\n-\t  /* Remove this function from the pending weak list so that\n-\t     we do not emit multiple .weak directives for it.  */\n-\t  remove_from_pending_weak_list\n-\t    (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)));\n-\t}\n-      else\n-#endif\n-\tASM_GLOBALIZE_LABEL (asm_out_file, name);\n+      globalize_decl (decl);\n \n       maybe_assemble_visibility (decl);\n     }"}]}