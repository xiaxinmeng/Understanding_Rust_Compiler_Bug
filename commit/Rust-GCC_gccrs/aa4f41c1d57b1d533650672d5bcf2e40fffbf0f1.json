{"sha": "aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE0ZjQxYzFkNTdiMWQ1MzM2NTA2NzJkNWJjZjJlNDBmZmZiZjBmMQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2006-09-07T04:17:01Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2006-09-07T04:17:01Z"}, "message": "configure.ac (ACX_PROG_CC_WARNING_OPTS): Add -Wcast-qual.\n\n\t* configure.ac (ACX_PROG_CC_WARNING_OPTS): Add -Wcast-qual.\n\t* configure, config.in: Regenerate.\n\n\t* decContext.c (decContextStatusToString): Constify.\n\t* decContext.h (decContextStatusToString): Likewise.\n\t* decNumber.c (decNumberToString, decNumberToEngString,\n\tdecNumberAbs, decNumberAdd, decNumberCompare, decNumberDivide,\n\tdecNumberDivideInteger, decNumberMax, decNumberMin,\n\tdecNumberMinus, decNumberPlus, decNumberMultiply,\n\tdecNumberNormalize, decNumberQuantize, decNumberRescale,\n\t decNumberRemainder, decNumberRemainderNear,\n\tdecNumberSameQuantum, decNumberSquareRoot, decNumberSubtract,\n\tdecNumberToIntegralValue, decNumberCopy, decToString, decAddOp,\n\tdecDivideOp, decMultiplyOp, decQuantizeOp, decCompareOp,\n\tdecCompare, decUnitCompare, decUnitAddSub, decRoundOperand,\n\tdecCopyFit, decSetCoeff, decGetInt, decNaNs, decGetDigits,\n\tdecNumberShow, decDumpAr, decCheckOperands, decCheckNumber):\n\tLikewise.\n\t* decNumber.h (decNumberToString, decNumberToEngString,\n\tdecNumberAbs, decNumberAdd, decNumberCompare, decNumberDivide,\n\tdecNumberDivideInteger, decNumberMax, decNumberMin,\n\tdecNumberMinus, decNumberMultiply, decNumberNormalize,\n\tdecNumberPlus, decNumberQuantize, decNumberRemainder,\n\t decNumberRemainderNear, decNumberRescale,\n\tdecNumberSameQuantum, decNumberSquareRoot, decNumberSubtract,\n\tdecNumberToIntegralValue, decNumberCopy): Likewise.\n\t* decUtility.c (decDensePackCoeff, decDenseUnpackCoeff):\n\tLikewise.\n\t* decUtility.h (decDensePackCoeff, decDenseUnpackCoeff):\n\tLikewise.\n\t* decimal128.c (decimal128FromNumber, decimal128ToNumber,\n\tdecimal128ToString, decimal128ToEngString, decimal128Show):\n\tLikewise.\n\t* decimal128.h (decimal128ToString, decimal128ToEngString,\n\tdecimal128FromNumber, decimal128ToNumber): Likewise.\n\t* decimal32.c (decimal32FromNumber, decimal32ToNumber,\n\tdecimal32ToString, decimal32ToEngString, decimal32Show):\n\tLikewise.\n\t* decimal32.h (decimal32ToString, decimal32ToEngString,\n\tdecimal32FromNumber, decimal32ToNumber): Likewise.\n\t* decimal64.c (decimal64FromNumber, decimal64ToNumber,\n\tdecimal64ToString, decimal64ToEngString, decimal64Show):\n\tLikewise.\n\t* decimal64.h (decimal64ToString, decimal64ToEngString,\n\tdecimal64FromNumber, decimal64ToNumber): Likewise.\n\nFrom-SVN: r116738", "tree": {"sha": "5200917b2b0f4279e9d0a776d59ddb3811991471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5200917b2b0f4279e9d0a776d59ddb3811991471"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/comments", "author": null, "committer": null, "parents": [{"sha": "c08cd4c1f169c138784d2a97c47950eed2ae8010", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c08cd4c1f169c138784d2a97c47950eed2ae8010", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c08cd4c1f169c138784d2a97c47950eed2ae8010"}], "stats": {"total": 453, "additions": 247, "deletions": 206}, "files": [{"sha": "3661c7c447fdfee70970891c1eda2fb18df45855", "filename": "libdecnumber/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FChangeLog?ref=aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1", "patch": "@@ -1,3 +1,51 @@\n+2006-09-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* configure.ac (ACX_PROG_CC_WARNING_OPTS): Add -Wcast-qual.\n+\t* configure, config.in: Regenerate.\n+\n+\t* decContext.c (decContextStatusToString): Constify.\n+\t* decContext.h (decContextStatusToString): Likewise.\n+\t* decNumber.c (decNumberToString, decNumberToEngString,\n+\tdecNumberAbs, decNumberAdd, decNumberCompare, decNumberDivide,\n+\tdecNumberDivideInteger, decNumberMax, decNumberMin,\n+\tdecNumberMinus, decNumberPlus, decNumberMultiply,\n+\tdecNumberNormalize, decNumberQuantize, decNumberRescale,\n+\t decNumberRemainder, decNumberRemainderNear,\n+\tdecNumberSameQuantum, decNumberSquareRoot, decNumberSubtract,\n+\tdecNumberToIntegralValue, decNumberCopy, decToString, decAddOp,\n+\tdecDivideOp, decMultiplyOp, decQuantizeOp, decCompareOp,\n+\tdecCompare, decUnitCompare, decUnitAddSub, decRoundOperand,\n+\tdecCopyFit, decSetCoeff, decGetInt, decNaNs, decGetDigits,\n+\tdecNumberShow, decDumpAr, decCheckOperands, decCheckNumber):\n+\tLikewise.\n+\t* decNumber.h (decNumberToString, decNumberToEngString,\n+\tdecNumberAbs, decNumberAdd, decNumberCompare, decNumberDivide,\n+\tdecNumberDivideInteger, decNumberMax, decNumberMin,\n+\tdecNumberMinus, decNumberMultiply, decNumberNormalize,\n+\tdecNumberPlus, decNumberQuantize, decNumberRemainder,\n+\t decNumberRemainderNear, decNumberRescale,\n+\tdecNumberSameQuantum, decNumberSquareRoot, decNumberSubtract,\n+\tdecNumberToIntegralValue, decNumberCopy): Likewise.\n+\t* decUtility.c (decDensePackCoeff, decDenseUnpackCoeff):\n+\tLikewise.\n+\t* decUtility.h (decDensePackCoeff, decDenseUnpackCoeff):\n+\tLikewise.\n+\t* decimal128.c (decimal128FromNumber, decimal128ToNumber,\n+\tdecimal128ToString, decimal128ToEngString, decimal128Show):\n+\tLikewise.\n+\t* decimal128.h (decimal128ToString, decimal128ToEngString,\n+\tdecimal128FromNumber, decimal128ToNumber): Likewise.\n+\t* decimal32.c (decimal32FromNumber, decimal32ToNumber,\n+\tdecimal32ToString, decimal32ToEngString, decimal32Show):\n+\tLikewise.\n+\t* decimal32.h (decimal32ToString, decimal32ToEngString,\n+\tdecimal32FromNumber, decimal32ToNumber): Likewise.\n+\t* decimal64.c (decimal64FromNumber, decimal64ToNumber,\n+\tdecimal64ToString, decimal64ToEngString, decimal64Show):\n+\tLikewise.\n+\t* decimal64.h (decimal64ToString, decimal64ToEngString,\n+\tdecimal64FromNumber, decimal64ToNumber): Likewise.\n+\n 2006-08-21  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* decContext.c (decContextSetStatusFromString): Constify."}, {"sha": "1d4e9a3f98b6816536aa6803e7ef9de0c605877a", "filename": "libdecnumber/config.in", "status": "modified", "additions": 8, "deletions": 25, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fconfig.in?ref=aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1", "patch": "@@ -1,20 +1,5 @@\n /* config.in.  Generated from configure.ac by autoheader.  */\n \n-/* Define to one of `_getb67', `GETB67', `getb67' for Cray-2 and Cray-YMP\n-   systems. This function is required for `alloca.c' support on those systems.\n-   */\n-#undef CRAY_STACKSEG_END\n-\n-/* Define to 1 if using `alloca.c'. */\n-#undef C_ALLOCA\n-\n-/* Define to 1 if you have `alloca', as a function or macro. */\n-#undef HAVE_ALLOCA\n-\n-/* Define to 1 if you have <alloca.h> and it should be used (not on Ultrix).\n-   */\n-#undef HAVE_ALLOCA_H\n-\n /* Define to 1 if you have the <ctype.h> header file. */\n #undef HAVE_CTYPE_H\n \n@@ -66,26 +51,24 @@\n /* Define to the version of this package. */\n #undef PACKAGE_VERSION\n \n+/* The size of a `char', as computed by sizeof. */\n+#undef SIZEOF_CHAR\n+\n /* The size of a `int', as computed by sizeof. */\n #undef SIZEOF_INT\n \n /* The size of a `long', as computed by sizeof. */\n #undef SIZEOF_LONG\n \n-/* If using the C implementation of alloca, define if you know the\n-   direction of stack growth for your system; otherwise it will be\n-   automatically deduced at run-time.\n-\tSTACK_DIRECTION > 0 => grows toward higher addresses\n-\tSTACK_DIRECTION < 0 => grows toward lower addresses\n-\tSTACK_DIRECTION = 0 => direction of growth unknown */\n-#undef STACK_DIRECTION\n+/* The size of a `short', as computed by sizeof. */\n+#undef SIZEOF_SHORT\n+\n+/* The size of a `void *', as computed by sizeof. */\n+#undef SIZEOF_VOID_P\n \n /* Define to 1 if you have the ANSI C header files. */\n #undef STDC_HEADERS\n \n-/* Define if you can safely include both <string.h> and <strings.h>. */\n-#undef STRING_WITH_STRINGS\n-\n /* Define to empty if `const' does not conform to ANSI C. */\n #undef const\n "}, {"sha": "f9cb0ef5666f574c4f9bbeb4783afb7d8cdea7bf", "filename": "libdecnumber/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fconfigure?ref=aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1", "patch": "@@ -2492,7 +2492,7 @@ WARN_CFLAGS=\n save_CFLAGS=\"$CFLAGS\"\n for option in -W -Wall -Wwrite-strings -Wstrict-prototypes \\\n \t\t\t  -Wmissing-prototypes -Wold-style-definition \\\n-\t\t\t  -Wmissing-format-attribute; do\n+\t\t\t  -Wmissing-format-attribute -Wcast-qual; do\n   as_acx_Woption=`echo \"acx_cv_prog_cc_warning_$option\" | $as_tr_sh`\n \n   echo \"$as_me:$LINENO: checking whether $CC supports $option\" >&5"}, {"sha": "90884a8fe159b953a0feb05c95f185bcca67657f", "filename": "libdecnumber/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fconfigure.ac?ref=aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1", "patch": "@@ -40,7 +40,7 @@ AC_CHECK_PROGS([AUTOHEADER], [autoheader], [$MISSING autoheader])\n \n ACX_PROG_CC_WARNING_OPTS([-W -Wall -Wwrite-strings -Wstrict-prototypes \\\n \t\t\t  -Wmissing-prototypes -Wold-style-definition \\\n-\t\t\t  -Wmissing-format-attribute])\n+\t\t\t  -Wmissing-format-attribute -Wcast-qual])\n ACX_PROG_CC_WARNING_ALMOST_PEDANTIC([-Wno-long-long])\n \n # Only enable with --enable-werror-always until existing warnings are"}, {"sha": "428c77e191bf6851ebafd950387bca753993efdc", "filename": "libdecnumber/decContext.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2FdecContext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2FdecContext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FdecContext.c?ref=aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1", "patch": "@@ -109,7 +109,7 @@ decContextDefault (decContext * context, Int kind)\n /*    (or no) flags are set, a generic constant message is returned.  */\n /* ------------------------------------------------------------------ */\n const char *\n-decContextStatusToString (decContext * context)\n+decContextStatusToString (const decContext * context)\n {\n   Int status = context->status;\n   if (status == DEC_Conversion_syntax)"}, {"sha": "41c4b52a4003bfbd1d7f4fb17e5eb48b6e6d3720", "filename": "libdecnumber/decContext.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2FdecContext.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2FdecContext.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FdecContext.h?ref=aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1", "patch": "@@ -172,7 +172,7 @@ typedef struct\n #endif\n decContext *decContextDefault (decContext *, int32_t);\n decContext *decContextSetStatus (decContext *, uint32_t);\n-const char *decContextStatusToString (decContext *);\n+const char *decContextStatusToString (const decContext *);\n decContext *decContextSetStatusFromString (decContext *, const char *);\n \n #endif"}, {"sha": "a086327d72de6d09713dced9cda1a93b0082ad6a", "filename": "libdecnumber/decNumber.c", "status": "modified", "additions": 112, "deletions": 106, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2FdecNumber.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2FdecNumber.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FdecNumber.c?ref=aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1", "patch": "@@ -206,47 +206,48 @@ typedef unsigned long long uLong;\n #endif\n \n /* Local routines */\n-static decNumber *decAddOp (decNumber *, decNumber *, decNumber *,\n-\t\t\t    decContext *, uByte, uInt *);\n+static decNumber *decAddOp (decNumber *, const decNumber *,\n+\t\t\t    const decNumber *, decContext *,\n+\t\t\t    uByte, uInt *);\n static void decApplyRound (decNumber *, decContext *, Int, uInt *);\n-static Int decCompare (decNumber * lhs, decNumber * rhs);\n-static decNumber *decCompareOp (decNumber *, decNumber *, decNumber *,\n+static Int decCompare (const decNumber * lhs, const decNumber * rhs);\n+static decNumber *decCompareOp (decNumber *, const decNumber *, const decNumber *,\n \t\t\t\tdecContext *, Flag, uInt *);\n-static void decCopyFit (decNumber *, decNumber *, decContext *,\n+static void decCopyFit (decNumber *, const decNumber *, decContext *,\n \t\t\tInt *, uInt *);\n-static decNumber *decDivideOp (decNumber *, decNumber *, decNumber *,\n+static decNumber *decDivideOp (decNumber *, const decNumber *, const decNumber *,\n \t\t\t       decContext *, Flag, uInt *);\n static void decFinalize (decNumber *, decContext *, Int *, uInt *);\n-static Int decGetDigits (Unit *, Int);\n+static Int decGetDigits (const Unit *, Int);\n #if DECSUBSET\n-static Int decGetInt (decNumber *, decContext *);\n+static Int decGetInt (const decNumber *, decContext *);\n #else\n-static Int decGetInt (decNumber *);\n+static Int decGetInt (const decNumber *);\n #endif\n-static decNumber *decMultiplyOp (decNumber *, decNumber *, decNumber *,\n-\t\t\t\t decContext *, uInt *);\n-static decNumber *decNaNs (decNumber *, decNumber *, decNumber *, uInt *);\n-static decNumber *decQuantizeOp (decNumber *, decNumber *, decNumber *,\n-\t\t\t\t decContext *, Flag, uInt *);\n-static void decSetCoeff (decNumber *, decContext *, Unit *,\n+static decNumber *decMultiplyOp (decNumber *, const decNumber *,\n+\t\t\t\t const decNumber *, decContext *, uInt *);\n+static decNumber *decNaNs (decNumber *, const decNumber *, const decNumber *, uInt *);\n+static decNumber *decQuantizeOp (decNumber *, const decNumber *,\n+\t\t\t\t const decNumber *, decContext *, Flag, uInt *);\n+static void decSetCoeff (decNumber *, decContext *, const Unit *,\n \t\t\t Int, Int *, uInt *);\n static void decSetOverflow (decNumber *, decContext *, uInt *);\n static void decSetSubnormal (decNumber *, decContext *, Int *, uInt *);\n static Int decShiftToLeast (Unit *, Int, Int);\n static Int decShiftToMost (Unit *, Int, Int);\n static void decStatus (decNumber *, uInt, decContext *);\n static Flag decStrEq (const char *, const char *);\n-static void decToString (decNumber *, char[], Flag);\n+static void decToString (const decNumber *, char[], Flag);\n static decNumber *decTrim (decNumber *, Flag, Int *);\n-static Int decUnitAddSub (Unit *, Int, Unit *, Int, Int, Unit *, Int);\n-static Int decUnitCompare (Unit *, Int, Unit *, Int, Int);\n+static Int decUnitAddSub (const Unit *, Int, const Unit *, Int, Int, Unit *, Int);\n+static Int decUnitCompare (const Unit *, Int, const Unit *, Int, Int);\n \n #if !DECSUBSET\n /* decFinish == decFinalize when no subset arithmetic needed */\n #define decFinish(a,b,c,d) decFinalize(a,b,c,d)\n #else\n static void decFinish (decNumber *, decContext *, Int *, uInt *);\n-static decNumber *decRoundOperand (decNumber *, decContext *, uInt *);\n+static decNumber *decRoundOperand (const decNumber *, decContext *, uInt *);\n #endif\n \n /* Diagnostic macros, etc. */\n@@ -275,15 +276,15 @@ uInt decAllocBytes = 0;\t\t/* count of bytes allocated */\n /* fastest routines (and adds 600+ bytes), so should not normally be */\n /* used in 'production'. */\n #define DECUNUSED (void *)(0xffffffff)\n-static Flag decCheckOperands (decNumber *, decNumber *, decNumber *,\n-\t\t\t      decContext *);\n-static Flag decCheckNumber (decNumber *, decContext *);\n+static Flag decCheckOperands (decNumber *, const decNumber *,\n+\t\t\t      const decNumber *, decContext *);\n+static Flag decCheckNumber (const decNumber *, decContext *);\n #endif\n \n #if DECTRACE || DECCHECK\n /* Optional trace/debugging routines. */\n-void decNumberShow (decNumber *);\t/* displays the components of a number */\n-static void decDumpAr (char, Unit *, Int);\n+void decNumberShow (const decNumber *);\t/* displays the components of a number */\n+static void decDumpAr (char, const Unit *, Int);\n #endif\n \n /* ================================================================== */\n@@ -305,14 +306,14 @@ static void decDumpAr (char, Unit *, Int);\n /*  No error is possible, and no status can be set.                   */\n /* ------------------------------------------------------------------ */\n char *\n-decNumberToString (decNumber * dn, char *string)\n+decNumberToString (const decNumber * dn, char *string)\n {\n   decToString (dn, string, 0);\n   return string;\n }\n \n char *\n-decNumberToEngString (decNumber * dn, char *string)\n+decNumberToEngString (const decNumber * dn, char *string)\n {\n   decToString (dn, string, 1);\n   return string;\n@@ -640,7 +641,7 @@ decNumberFromString (decNumber * dn, const char chars[], decContext * set)\n /* in which case it has the same effect as decNumberMinus.            */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decNumberAbs (decNumber * res, decNumber * rhs, decContext * set)\n+decNumberAbs (decNumber * res, const decNumber * rhs, decContext * set)\n {\n   decNumber dzero;\t\t/* for 0 */\n   uInt status = 0;\t\t/* accumulator */\n@@ -672,8 +673,8 @@ decNumberAbs (decNumber * res, decNumber * rhs, decContext * set)\n /* ------------------------------------------------------------------ */\n /* This just calls the routine shared with Subtract                   */\n decNumber *\n-decNumberAdd (decNumber * res, decNumber * lhs, decNumber * rhs,\n-\t      decContext * set)\n+decNumberAdd (decNumber * res, const decNumber * lhs,\n+\t      const decNumber * rhs, decContext * set)\n {\n   uInt status = 0;\t\t/* accumulator */\n   decAddOp (res, lhs, rhs, set, 0, &status);\n@@ -695,8 +696,8 @@ decNumberAdd (decNumber * res, decNumber * lhs, decNumber * rhs,\n /* C must have space for one digit.                                   */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decNumberCompare (decNumber * res, decNumber * lhs, decNumber * rhs,\n-\t\t  decContext * set)\n+decNumberCompare (decNumber * res, const decNumber * lhs,\n+\t\t  const decNumber * rhs, decContext * set)\n {\n   uInt status = 0;\t\t/* accumulator */\n   decCompareOp (res, lhs, rhs, set, COMPARE, &status);\n@@ -718,8 +719,8 @@ decNumberCompare (decNumber * res, decNumber * lhs, decNumber * rhs,\n /* C must have space for set->digits digits.                          */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decNumberDivide (decNumber * res, decNumber * lhs,\n-\t\t decNumber * rhs, decContext * set)\n+decNumberDivide (decNumber * res, const decNumber * lhs,\n+\t\t const decNumber * rhs, decContext * set)\n {\n   uInt status = 0;\t\t/* accumulator */\n   decDivideOp (res, lhs, rhs, set, DIVIDE, &status);\n@@ -741,8 +742,8 @@ decNumberDivide (decNumber * res, decNumber * lhs,\n /* C must have space for set->digits digits.                          */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decNumberDivideInteger (decNumber * res, decNumber * lhs,\n-\t\t\tdecNumber * rhs, decContext * set)\n+decNumberDivideInteger (decNumber * res, const decNumber * lhs,\n+\t\t\tconst decNumber * rhs, decContext * set)\n {\n   uInt status = 0;\t\t/* accumulator */\n   decDivideOp (res, lhs, rhs, set, DIVIDEINT, &status);\n@@ -764,8 +765,8 @@ decNumberDivideInteger (decNumber * res, decNumber * lhs,\n /* C must have space for set->digits digits.                          */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decNumberMax (decNumber * res, decNumber * lhs, decNumber * rhs,\n-\t      decContext * set)\n+decNumberMax (decNumber * res, const decNumber * lhs,\n+\t      const decNumber * rhs, decContext * set)\n {\n   uInt status = 0;\t\t/* accumulator */\n   decCompareOp (res, lhs, rhs, set, COMPMAX, &status);\n@@ -787,8 +788,8 @@ decNumberMax (decNumber * res, decNumber * lhs, decNumber * rhs,\n /* C must have space for set->digits digits.                          */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decNumberMin (decNumber * res, decNumber * lhs, decNumber * rhs,\n-\t      decContext * set)\n+decNumberMin (decNumber * res, const decNumber * lhs,\n+\t      const decNumber * rhs, decContext * set)\n {\n   uInt status = 0;\t\t/* accumulator */\n   decCompareOp (res, lhs, rhs, set, COMPMIN, &status);\n@@ -811,7 +812,7 @@ decNumberMin (decNumber * res, decNumber * lhs, decNumber * rhs,\n /* We simply use AddOp for the subtract, which will do the necessary. */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decNumberMinus (decNumber * res, decNumber * rhs, decContext * set)\n+decNumberMinus (decNumber * res, const decNumber * rhs, decContext * set)\n {\n   decNumber dzero;\n   uInt status = 0;\t\t/* accumulator */\n@@ -845,7 +846,7 @@ decNumberMinus (decNumber * res, decNumber * rhs, decContext * set)\n /* check operands and apply rounding and overflow/underflow testing.  */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decNumberPlus (decNumber * res, decNumber * rhs, decContext * set)\n+decNumberPlus (decNumber * res, const decNumber * rhs, decContext * set)\n {\n   decNumber dzero;\n   uInt status = 0;\t\t/* accumulator */\n@@ -876,8 +877,8 @@ decNumberPlus (decNumber * res, decNumber * rhs, decContext * set)\n /* C must have space for set->digits digits.                          */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decNumberMultiply (decNumber * res, decNumber * lhs,\n-\t\t   decNumber * rhs, decContext * set)\n+decNumberMultiply (decNumber * res, const decNumber * lhs,\n+\t\t   const decNumber * rhs, decContext * set)\n {\n   uInt status = 0;\t\t/* accumulator */\n   decMultiplyOp (res, lhs, rhs, set, &status);\n@@ -898,7 +899,7 @@ decNumberMultiply (decNumber * res, decNumber * lhs,\n /* C must have space for set->digits digits.                          */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decNumberNormalize (decNumber * res, decNumber * rhs, decContext * set)\n+decNumberNormalize (decNumber * res, const decNumber * rhs, decContext * set)\n {\n   decNumber *allocrhs = NULL;\t/* non-NULL if rounded rhs allocated */\n   uInt status = 0;\t\t/* as usual */\n@@ -1248,8 +1249,8 @@ decNumberPower (decNumber * res, decNumber * lhs,\n /* after the operation is guaranteed to be equal to that of B.        */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decNumberQuantize (decNumber * res, decNumber * lhs,\n-\t\t   decNumber * rhs, decContext * set)\n+decNumberQuantize (decNumber * res, const decNumber * lhs,\n+\t\t   const decNumber * rhs, decContext * set)\n {\n   uInt status = 0;\t\t/* accumulator */\n   decQuantizeOp (res, lhs, rhs, set, 1, &status);\n@@ -1277,8 +1278,8 @@ decNumberQuantize (decNumber * res, decNumber * lhs,\n /* after the operation is guaranteed to be equal to B.                */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decNumberRescale (decNumber * res, decNumber * lhs,\n-\t\t  decNumber * rhs, decContext * set)\n+decNumberRescale (decNumber * res, const decNumber * lhs,\n+\t\t  const decNumber * rhs, decContext * set)\n {\n   uInt status = 0;\t\t/* accumulator */\n   decQuantizeOp (res, lhs, rhs, set, 0, &status);\n@@ -1300,8 +1301,8 @@ decNumberRescale (decNumber * res, decNumber * lhs,\n /* C must have space for set->digits digits.                          */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decNumberRemainder (decNumber * res, decNumber * lhs,\n-\t\t    decNumber * rhs, decContext * set)\n+decNumberRemainder (decNumber * res, const decNumber * lhs,\n+\t\t    const decNumber * rhs, decContext * set)\n {\n   uInt status = 0;\t\t/* accumulator */\n   decDivideOp (res, lhs, rhs, set, REMAINDER, &status);\n@@ -1323,8 +1324,8 @@ decNumberRemainder (decNumber * res, decNumber * lhs,\n /* C must have space for set->digits digits.                          */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decNumberRemainderNear (decNumber * res, decNumber * lhs,\n-\t\t\tdecNumber * rhs, decContext * set)\n+decNumberRemainderNear (decNumber * res, const decNumber * lhs,\n+\t\t\tconst decNumber * rhs, decContext * set)\n {\n   uInt status = 0;\t\t/* accumulator */\n   decDivideOp (res, lhs, rhs, set, REMNEAR, &status);\n@@ -1343,7 +1344,7 @@ decNumberRemainderNear (decNumber * res, decNumber * lhs,\n /* No errors are possible and no context is needed.                   */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decNumberSameQuantum (decNumber * res, decNumber * lhs, decNumber * rhs)\n+decNumberSameQuantum (decNumber * res, const decNumber * lhs, const decNumber * rhs)\n {\n   uByte merged;\t\t\t/* merged flags */\n   Unit ret = 0;\t\t\t/* return value */\n@@ -1440,7 +1441,7 @@ decNumberSameQuantum (decNumber * res, decNumber * lhs, decNumber * rhs)\n /* end sqrt                                                           */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decNumberSquareRoot (decNumber * res, decNumber * rhs, decContext * set)\n+decNumberSquareRoot (decNumber * res, const decNumber * rhs, decContext * set)\n {\n   decContext workset, approxset;\t/* work contexts */\n   decNumber dzero;\t\t/* used for constant zero */\n@@ -1781,8 +1782,8 @@ decNumberSquareRoot (decNumber * res, decNumber * rhs, decContext * set)\n /* C must have space for set->digits digits.                          */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decNumberSubtract (decNumber * res, decNumber * lhs,\n-\t\t   decNumber * rhs, decContext * set)\n+decNumberSubtract (decNumber * res, const decNumber * lhs,\n+\t\t   const decNumber * rhs, decContext * set)\n {\n   uInt status = 0;\t\t/* accumulator */\n \n@@ -1810,7 +1811,7 @@ decNumberSubtract (decNumber * res, decNumber * lhs,\n /* the digits setting is ignored.                                     */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decNumberToIntegralValue (decNumber * res, decNumber * rhs, decContext * set)\n+decNumberToIntegralValue (decNumber * res, const decNumber * rhs, decContext * set)\n {\n   decNumber dn;\n   decContext workset;\t\t/* working context */\n@@ -1860,7 +1861,7 @@ decNumberToIntegralValue (decNumber * res, decNumber * rhs, decContext * set)\n /* so special values are unchanged and no error is possible.          */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decNumberCopy (decNumber * dest, decNumber * src)\n+decNumberCopy (decNumber * dest, const decNumber * src)\n {\n \n #if DECCHECK\n@@ -1881,7 +1882,8 @@ decNumberCopy (decNumber * dest, decNumber * src)\n   dest->lsu[0] = src->lsu[0];\n   if (src->digits > DECDPUN)\n     {\t\t\t\t/* more Units to come */\n-      Unit *s, *d, *smsup;\t/* work */\n+      Unit *d;\t\t\t/* work */\n+      const Unit *s, *smsup;\t/* work */\n       /* memcpy for the remaining Units would be safe as they cannot */\n       /* overlap.  However, this explicit loop is faster in short cases. */\n       d = dest->lsu + 1;\t/* -> first destination */\n@@ -1987,14 +1989,14 @@ decNumberZero (decNumber * dn)\n   }\n \n static void\n-decToString (decNumber * dn, char *string, Flag eng)\n+decToString (const decNumber * dn, char *string, Flag eng)\n {\n   Int exp = dn->exponent;\t/* local copy */\n   Int e;\t\t\t/* E-part value */\n   Int pre;\t\t\t/* digits before the '.' */\n   Int cut;\t\t\t/* for counting digits in a Unit */\n   char *c = string;\t\t/* work [output pointer] */\n-  Unit *up = dn->lsu + D2U (dn->digits) - 1;\t/* -> msu [input pointer] */\n+  const Unit *up = dn->lsu + D2U (dn->digits) - 1;\t/* -> msu [input pointer] */\n   uInt u, pow;\t\t\t/* work */\n \n #if DECCHECK\n@@ -2214,8 +2216,8 @@ decToString (decNumber * dn, char *string, Flag eng)\n /* to make returning as fast as possible, by flagging any allocation. */\n /* ------------------------------------------------------------------ */\n static decNumber *\n-decAddOp (decNumber * res, decNumber * lhs,\n-\t  decNumber * rhs, decContext * set, uByte negate, uInt * status)\n+decAddOp (decNumber * res, const decNumber * lhs,\n+\t  const decNumber * rhs, decContext * set, uByte negate, uInt * status)\n {\n   decNumber *alloclhs = NULL;\t/* non-NULL if rounded lhs allocated */\n   decNumber *allocrhs = NULL;\t/* .., rhs */\n@@ -2439,7 +2441,7 @@ decAddOp (decNumber * res, decNumber * lhs,\n \t  Flag swapped = 0;\n \t  if (padding < 0)\n \t    {\t\t\t/* LHS needs the padding */\n-\t      decNumber *t;\n+\t      const decNumber *t;\n \t      padding = -padding;\t/* will be +ve */\n \t      bits = (uByte) (rhs->bits ^ negate);\t/* assumed sign is now that of RHS */\n \t      t = lhs;\n@@ -2692,7 +2694,7 @@ decAddOp (decNumber * res, decNumber * lhs,\n /* ------------------------------------------------------------------ */\n static decNumber *\n decDivideOp (decNumber * res,\n-\t     decNumber * lhs, decNumber * rhs,\n+\t     const decNumber * lhs, const decNumber * rhs,\n \t     decContext * set, Flag op, uInt * status)\n {\n   decNumber *alloclhs = NULL;\t/* non-NULL if rounded lhs allocated */\n@@ -2709,12 +2711,13 @@ decDivideOp (decNumber * res,\n   Unit *var1 = varbuff;\t\t/* -> var1 array for long subtraction */\n   Unit *varalloc = NULL;\t/* -> allocated buffer, iff used */\n \n-  Unit *var2;\t\t\t/* -> var2 array */\n+  const Unit *var2;\t\t/* -> var2 array */\n \n   Int var1units, var2units;\t/* actual lengths */\n   Int var2ulen;\t\t\t/* logical length (units) */\n   Int var1initpad = 0;\t\t/* var1 initial padding (digits) */\n-  Unit *msu1, *msu2;\t\t/* -> msu of each var */\n+  Unit *msu1;\t\t\t/* -> msu of each var */\n+  const Unit *msu2;\t\t/* -> msu of each var */\n   Int msu2plus;\t\t\t/* msu2 plus one [does not vary] */\n   eInt msu2pair;\t\t/* msu2 pair plus one [does not vary] */\n   Int maxdigits;\t\t/* longest LHS or required acc length */\n@@ -2726,7 +2729,8 @@ decDivideOp (decNumber * res,\n   Int maxexponent = 0;\t\t/* DIVIDE maximum exponent if unrounded */\n   uByte bits;\t\t\t/* working sign */\n   uByte merged;\t\t\t/* merged flags */\n-  Unit *target, *source;\t/* work */\n+  Unit *target;\t\t\t/* work */\n+  const Unit *source;\t\t/* work */\n   uInt const *pow;\t\t/* .. */\n   Int shift, cut;\t\t/* .. */\n #if DECSUBSET\n@@ -3049,7 +3053,8 @@ decDivideOp (decNumber * res,\n \t      if (var1units == var2ulen)\n \t\t{\t\t/* unit-by-unit compare needed */\n \t\t  /* compare the two numbers, from msu */\n-\t\t  Unit *pv1, *pv2, v2;\t/* units to compare */\n+\t\t  Unit *pv1, v2;\t/* units to compare */\n+\t\t  const Unit *pv2;\t/* units to compare */\n \t\t  pv2 = msu2;\t/* -> msu */\n \t\t  for (pv1 = msu1;; pv1--, pv2--)\n \t\t    {\n@@ -3411,15 +3416,15 @@ decDivideOp (decNumber * res,\n /* We always have to use a buffer for the accumulator.                */\n /* ------------------------------------------------------------------ */\n static decNumber *\n-decMultiplyOp (decNumber * res, decNumber * lhs,\n-\t       decNumber * rhs, decContext * set, uInt * status)\n+decMultiplyOp (decNumber * res, const decNumber * lhs,\n+\t       const decNumber * rhs, decContext * set, uInt * status)\n {\n   decNumber *alloclhs = NULL;\t/* non-NULL if rounded lhs allocated */\n   decNumber *allocrhs = NULL;\t/* .., rhs */\n   Unit accbuff[D2U (DECBUFFER * 2 + 1)];\t/* local buffer (+1 in case DECBUFFER==0) */\n   Unit *acc = accbuff;\t\t/* -> accumulator array for exact result */\n   Unit *allocacc = NULL;\t/* -> allocated buffer, iff allocated */\n-  Unit *mer, *mermsup;\t\t/* work */\n+  const Unit *mer, *mermsup;\t/* work */\n   Int accunits;\t\t\t/* Units of accumulator in use */\n   Int madlength;\t\t/* Units in multiplicand */\n   Int shift;\t\t\t/* Units to shift multiplicand by */\n@@ -3486,7 +3491,7 @@ decMultiplyOp (decNumber * res, decNumber * lhs,\n       /* multiplier (rhs) and the longer as the multiplicand (lhs) */\n       if (lhs->digits < rhs->digits)\n \t{\t\t\t/* swap... */\n-\t  decNumber *hold = lhs;\n+\t  const decNumber *hold = lhs;\n \t  lhs = rhs;\n \t  rhs = hold;\n \t}\n@@ -3593,12 +3598,12 @@ decMultiplyOp (decNumber * res, decNumber * lhs,\n /* after the operation is guaranteed to be that requested.            */\n /* ------------------------------------------------------------------ */\n static decNumber *\n-decQuantizeOp (decNumber * res, decNumber * lhs,\n-\t       decNumber * rhs, decContext * set, Flag quant, uInt * status)\n+decQuantizeOp (decNumber * res, const decNumber * lhs,\n+\t       const decNumber * rhs, decContext * set, Flag quant, uInt * status)\n {\n   decNumber *alloclhs = NULL;\t/* non-NULL if rounded lhs allocated */\n   decNumber *allocrhs = NULL;\t/* .., rhs */\n-  decNumber *inrhs = rhs;\t/* save original rhs */\n+  const decNumber *inrhs = rhs;\t/* save original rhs */\n   Int reqdigits = set->digits;\t/* requested DIGITS */\n   Int reqexp;\t\t\t/* requested exponent [-scale] */\n   Int residue = 0;\t\t/* rounding residue */\n@@ -3776,7 +3781,7 @@ decQuantizeOp (decNumber * res, decNumber * lhs,\n /* coefficient comparison if possible.                                */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decCompareOp (decNumber * res, decNumber * lhs, decNumber * rhs,\n+decCompareOp (decNumber * res, const decNumber * lhs, const decNumber * rhs,\n \t      decContext * set, Flag op, uInt * status)\n {\n   decNumber *alloclhs = NULL;\t/* non-NULL if rounded lhs allocated */\n@@ -3873,7 +3878,7 @@ decCompareOp (decNumber * res, decNumber * lhs, decNumber * rhs,\n \t{\t\t\t/* MAX or MIN, non-NaN result */\n \t  Int residue = 0;\t/* rounding accumulator */\n \t  /* choose the operand for the result */\n-\t  decNumber *choice;\n+\t  const decNumber *choice;\n \t  if (result == 0)\n \t    {\t\t\t/* operands are numerically equal */\n \t      /* choose according to sign then exponent (see 754r) */\n@@ -3940,7 +3945,7 @@ decCompareOp (decNumber * res, decNumber * lhs, decNumber * rhs,\n /* ------------------------------------------------------------------ */\n /* This could be merged into decCompareOp */\n static Int\n-decCompare (decNumber * lhs, decNumber * rhs)\n+decCompare (const decNumber * lhs, const decNumber * rhs)\n {\n   Int result;\t\t\t/* result value */\n   Int sigr;\t\t\t/* rhs signum */\n@@ -3977,7 +3982,7 @@ decCompare (decNumber * lhs, decNumber * rhs)\n   if (lhs->exponent > rhs->exponent)\n     {\t\t\t\t/* LHS exponent larger */\n       /* swap sides, and sign */\n-      decNumber *temp = lhs;\n+      const decNumber *temp = lhs;\n       lhs = rhs;\n       rhs = temp;\n       result = -result;\n@@ -4009,13 +4014,13 @@ decCompare (decNumber * lhs, decNumber * rhs)\n /*  (the only possible failure is an allocation error)                */\n /* ------------------------------------------------------------------ */\n static Int\n-decUnitCompare (Unit * a, Int alength, Unit * b, Int blength, Int exp)\n+decUnitCompare (const Unit * a, Int alength, const Unit * b, Int blength, Int exp)\n {\n   Unit *acc;\t\t\t/* accumulator for result */\n   Unit accbuff[D2U (DECBUFFER + 1)];\t/* local buffer */\n   Unit *allocacc = NULL;\t/* -> allocated acc buffer, iff allocated */\n   Int accunits, need;\t\t/* units in use or needed for acc */\n-  Unit *l, *r, *u;\t\t/* work */\n+  const Unit *l, *r, *u;\t/* work */\n   Int expunits, exprem, result;\t/* .. */\n \n   if (exp == 0)\n@@ -4129,10 +4134,10 @@ decUnitCompare (Unit * a, Int alength, Unit * b, Int blength, Int exp)\n /* (IBM Warwick, UK) for some of the ideas used in this routine.      */\n /* ------------------------------------------------------------------ */\n static Int\n-decUnitAddSub (Unit * a, Int alength,\n-\t       Unit * b, Int blength, Int bshift, Unit * c, Int m)\n+decUnitAddSub (const Unit * a, Int alength,\n+\t       const Unit * b, Int blength, Int bshift, Unit * c, Int m)\n {\n-  Unit *alsu = a;\t\t/* A lsu [need to remember it] */\n+  const Unit *alsu = a;\t\t/* A lsu [need to remember it] */\n   Unit *clsu = c;\t\t/* C ditto */\n   Unit *minC;\t\t\t/* low water mark for C */\n   Unit *maxC;\t\t\t/* high water mark for C */\n@@ -4556,7 +4561,7 @@ decShiftToLeast (Unit * uar, Int units, Int shift)\n /* is returned.                                                       */\n /* ------------------------------------------------------------------ */\n static decNumber *\n-decRoundOperand (decNumber * dn, decContext * set, uInt * status)\n+decRoundOperand (const decNumber * dn, decContext * set, uInt * status)\n {\n   decNumber *res;\t\t/* result structure */\n   uInt newstatus = 0;\t\t/* status from round */\n@@ -4595,7 +4600,7 @@ decRoundOperand (decNumber * dn, decContext * set, uInt * status)\n /* All fields are updated as required.                                */\n /* ------------------------------------------------------------------ */\n static void\n-decCopyFit (decNumber * dest, decNumber * src, decContext * set,\n+decCopyFit (decNumber * dest, const decNumber * src, decContext * set,\n \t    Int * residue, uInt * status)\n {\n   dest->bits = src->bits;\n@@ -4643,14 +4648,15 @@ decCopyFit (decNumber * dest, decNumber * src, decContext * set,\n /*                             0  1  2  3  4  5  6  7  8  9 */\n static const uByte resmap[10] = { 0, 3, 3, 3, 3, 5, 7, 7, 7, 7 };\n static void\n-decSetCoeff (decNumber * dn, decContext * set, Unit * lsu,\n+decSetCoeff (decNumber * dn, decContext * set, const Unit * lsu,\n \t     Int len, Int * residue, uInt * status)\n {\n   Int discard;\t\t\t/* number of digits to discard */\n   uInt discard1;\t\t/* first discarded digit */\n   uInt cut;\t\t\t/* cut point in Unit */\n   uInt quot, rem;\t\t/* for divisions */\n-  Unit *up, *target;\t\t/* work */\n+  Unit *target;\t\t\t/* work */\n+  const Unit *up;\t\t/* work */\n   Int count;\t\t\t/* .. */\n #if DECDPUN<=4\n   uInt temp;\t\t\t/* .. */\n@@ -5246,8 +5252,8 @@ decSetOverflow (decNumber * dn, decContext * set, uInt * status)\n /* necessary.  Underflow is set if the result is Inexact.             */\n /* ------------------------------------------------------------------ */\n static void\n-decSetSubnormal (decNumber * dn, decContext * set, Int * residue,\n-\t\t uInt * status)\n+decSetSubnormal (decNumber * dn, decContext * set,\n+\t\t Int * residue, uInt * status)\n {\n   decContext workset;\t\t/* work */\n   Int etiny, adjust;\t\t/* .. */\n@@ -5342,15 +5348,15 @@ decSetSubnormal (decNumber * dn, decContext * set, Int * residue,\n /* ------------------------------------------------------------------ */\n #if DECSUBSET\n static Int\n-decGetInt (decNumber * dn, decContext * set)\n+decGetInt (const decNumber * dn, decContext * set)\n {\n #else\n static Int\n-decGetInt (decNumber * dn)\n+decGetInt (const decNumber * dn)\n {\n #endif\n   Int theInt;\t\t\t/* result accumulator */\n-  Unit *up;\t\t\t/* work */\n+  const Unit *up;\t\t/* work */\n   Int got;\t\t\t/* digits (real or not) processed */\n   Int ilength = dn->digits + dn->exponent;\t/* integral length */\n \n@@ -5472,7 +5478,7 @@ decStrEq (const char *str1, const char *str2)\n /* to a qNaN and Invalid operation is set.                            */\n /* ------------------------------------------------------------------ */\n static decNumber *\n-decNaNs (decNumber * res, decNumber * lhs, decNumber * rhs, uInt * status)\n+decNaNs (decNumber * res, const decNumber * lhs, const decNumber * rhs, uInt * status)\n {\n   /* This decision tree ends up with LHS being the source pointer, */\n   /* and status updated if need be */\n@@ -5543,9 +5549,9 @@ decStatus (decNumber * dn, uInt status, decContext * set)\n /* ------------------------------------------------------------------ */\n /* This may be called twice during some operations. */\n static Int\n-decGetDigits (Unit * uar, Int len)\n+decGetDigits (const Unit * uar, Int len)\n {\n-  Unit *up = uar + len - 1;\t/* -> msu */\n+  const Unit *up = uar + len - 1;\t/* -> msu */\n   Int digits = len * DECDPUN;\t/* maximum possible digits */\n   uInt const *pow;\t\t/* work */\n \n@@ -5584,9 +5590,9 @@ decGetDigits (Unit * uar, Int len)\n /* ------------------------------------------------------------------ */\n /* this is public so other modules can use it */\n void\n-decNumberShow (decNumber * dn)\n+decNumberShow (const decNumber * dn)\n {\n-  Unit *up;\t\t\t/* work */\n+  const Unit *up;\t\t/* work */\n   uInt u, d;\t\t\t/* .. */\n   Int cut;\t\t\t/* .. */\n   char isign = '+';\t\t/* main sign */\n@@ -5652,13 +5658,13 @@ decNumberShow (decNumber * dn)\n /*   len  is the length of the array in Units                         */\n /* ------------------------------------------------------------------ */\n static void\n-decDumpAr (char name, Unit * ar, Int len)\n+decDumpAr (char name, const Unit * ar, Int len)\n {\n   Int i;\n #if DECDPUN==4\n-  char *spec = \"%04d \";\n+  const char *spec = \"%04d \";\n #else\n-  char *spec = \"%d \";\n+  const char *spec = \"%d \";\n #endif\n   printf (\"  :%c: \", name);\n   for (i = len - 1; i >= 0; i--)\n@@ -5688,8 +5694,8 @@ decDumpAr (char name, Unit * ar, Int len)\n /* The caller is expected to abandon immediately if 1 is returned.    */\n /* ------------------------------------------------------------------ */\n static Flag\n-decCheckOperands (decNumber * res, decNumber * lhs,\n-\t\t  decNumber * rhs, decContext * set)\n+decCheckOperands (decNumber * res, const decNumber * lhs,\n+\t\t  const decNumber * rhs, decContext * set)\n {\n   Flag bad = 0;\n   if (set == NULL)\n@@ -5746,9 +5752,9 @@ decCheckOperands (decNumber * res, decNumber * lhs,\n /* operation in some valid context (not necessarily the current one). */\n /* ------------------------------------------------------------------ */\n Flag\n-decCheckNumber (decNumber * dn, decContext * set)\n+decCheckNumber (const decNumber * dn, decContext * set)\n {\n-  Unit *up;\t\t\t/* work */\n+  const Unit *up;\t\t/* work */\n   uInt maxuint;\t\t\t/* .. */\n   Int ae, d, digits;\t\t/* .. */\n   Int emin, emax;\t\t/* .. */"}, {"sha": "a64a4d5baedbbbaef4f491d1161737934c2f9e99", "filename": "libdecnumber/decNumber.h", "status": "modified", "additions": 34, "deletions": 31, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2FdecNumber.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2FdecNumber.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FdecNumber.h?ref=aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1", "patch": "@@ -130,43 +130,46 @@ typedef struct\n \n   /* Conversions */\n decNumber *decNumberFromString (decNumber *, const char *, decContext *);\n-char *decNumberToString (decNumber *, char *);\n-char *decNumberToEngString (decNumber *, char *);\n+char *decNumberToString (const decNumber *, char *);\n+char *decNumberToEngString (const decNumber *, char *);\n \n   /* Operators */\n-decNumber *decNumberAbs (decNumber *, decNumber *, decContext *);\n-decNumber *decNumberAdd (decNumber *, decNumber *, decNumber *, decContext *);\n-decNumber *decNumberCompare (decNumber *, decNumber *, decNumber *,\n-\t\t\t     decContext *);\n-decNumber *decNumberDivide (decNumber *, decNumber *, decNumber *,\n-\t\t\t    decContext *);\n-decNumber *decNumberDivideInteger (decNumber *, decNumber *, decNumber *,\n-\t\t\t\t   decContext *);\n-decNumber *decNumberMax (decNumber *, decNumber *, decNumber *, decContext *);\n-decNumber *decNumberMin (decNumber *, decNumber *, decNumber *, decContext *);\n-decNumber *decNumberMinus (decNumber *, decNumber *, decContext *);\n-decNumber *decNumberMultiply (decNumber *, decNumber *, decNumber *,\n-\t\t\t      decContext *);\n-decNumber *decNumberNormalize (decNumber *, decNumber *, decContext *);\n-decNumber *decNumberPlus (decNumber *, decNumber *, decContext *);\n+decNumber *decNumberAbs (decNumber *, const decNumber *, decContext *);\n+decNumber *decNumberAdd (decNumber *, const decNumber *,\n+\t\t\t const decNumber *, decContext *);\n+decNumber *decNumberCompare (decNumber *, const decNumber *,\n+\t\t\t     const decNumber *, decContext *);\n+decNumber *decNumberDivide (decNumber *, const decNumber *,\n+\t\t\t    const decNumber *, decContext *);\n+decNumber *decNumberDivideInteger (decNumber *, const decNumber *,\n+\t\t\t\t   const decNumber *, decContext *);\n+decNumber *decNumberMax (decNumber *, const decNumber *,\n+\t\t\t const decNumber *, decContext *);\n+decNumber *decNumberMin (decNumber *, const decNumber *,\n+\t\t\t const decNumber *, decContext *);\n+decNumber *decNumberMinus (decNumber *, const decNumber *, decContext *);\n+decNumber *decNumberMultiply (decNumber *, const decNumber *,\n+\t\t\t      const decNumber *, decContext *);\n+decNumber *decNumberNormalize (decNumber *, const decNumber *, decContext *);\n+decNumber *decNumberPlus (decNumber *, const decNumber *, decContext *);\n decNumber *decNumberPower (decNumber *, decNumber *, decNumber *,\n \t\t\t   decContext *);\n-decNumber *decNumberQuantize (decNumber *, decNumber *, decNumber *,\n-\t\t\t      decContext *);\n-decNumber *decNumberRemainder (decNumber *, decNumber *, decNumber *,\n-\t\t\t       decContext *);\n-decNumber *decNumberRemainderNear (decNumber *, decNumber *, decNumber *,\n-\t\t\t\t   decContext *);\n-decNumber *decNumberRescale (decNumber *, decNumber *, decNumber *,\n-\t\t\t     decContext *);\n-decNumber *decNumberSameQuantum (decNumber *, decNumber *, decNumber *);\n-decNumber *decNumberSquareRoot (decNumber *, decNumber *, decContext *);\n-decNumber *decNumberSubtract (decNumber *, decNumber *, decNumber *,\n-\t\t\t      decContext *);\n-decNumber *decNumberToIntegralValue (decNumber *, decNumber *, decContext *);\n+decNumber *decNumberQuantize (decNumber *, const decNumber *,\n+\t\t\t      const decNumber *, decContext *);\n+decNumber *decNumberRemainder (decNumber *, const decNumber *,\n+\t\t\t       const decNumber *, decContext *);\n+decNumber *decNumberRemainderNear (decNumber *, const decNumber *,\n+\t\t\t\t   const decNumber *, decContext *);\n+decNumber *decNumberRescale (decNumber *, const decNumber *,\n+\t\t\t     const decNumber *, decContext *);\n+decNumber *decNumberSameQuantum (decNumber *, const decNumber *, const decNumber *);\n+decNumber *decNumberSquareRoot (decNumber *, const decNumber *, decContext *);\n+decNumber *decNumberSubtract (decNumber *, const decNumber *,\n+\t\t\t      const decNumber *, decContext *);\n+decNumber *decNumberToIntegralValue (decNumber *, const decNumber *, decContext *);\n \n   /* Utilities */\n-decNumber *decNumberCopy (decNumber *, decNumber *);\n+decNumber *decNumberCopy (decNumber *, const decNumber *);\n decNumber *decNumberTrim (decNumber *);\n const char *decNumberVersion (void);\n decNumber *decNumberZero (decNumber *);"}, {"sha": "83f388665addd870c5bcc7c250f1fd4b33e4e425", "filename": "libdecnumber/decUtility.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2FdecUtility.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2FdecUtility.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FdecUtility.c?ref=aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1", "patch": "@@ -64,15 +64,15 @@\n /* No error is possible.                                              */\n /* ------------------------------------------------------------------ */\n void\n-decDensePackCoeff (decNumber * dn, uByte * bytes, Int len, Int shift)\n+decDensePackCoeff (const decNumber * dn, uByte * bytes, Int len, Int shift)\n {\n   Int cut;\t\t\t/* work */\n   Int n;\t\t\t/* output bunch counter */\n   Int digits = dn->digits;\t/* digit countdown */\n   uInt dpd;\t\t\t/* densely packed decimal value */\n   uInt bin;\t\t\t/* binary value 0-999 */\n   uByte *bout;\t\t\t/* -> current output byte */\n-  Unit *inu = dn->lsu;\t\t/* -> current input unit */\n+  const Unit *inu = dn->lsu;\t/* -> current input unit */\n   Unit uar[DECMAXUNITS];\t/* working copy of units, iff shifted */\n #if DECDPUN!=3\t\t\t/* not fast path */\n   Unit in;\t\t\t/* current input unit */\n@@ -83,7 +83,8 @@ decDensePackCoeff (decNumber * dn, uByte * bytes, Int len, Int shift)\n       /* shift the units array to the left by pad digits and copy */\n       /* [this code is a special case of decShiftToMost, which could */\n       /* be used instead if exposed and the array were copied first] */\n-      Unit *target, *source, *first;\t/* work */\n+      Unit *target, *first;\t/* work */\n+      const Unit *source;\t/* work */\n       uInt next = 0;\t\t/* work */\n \n       source = dn->lsu + D2U (digits) - 1;\t/* where msu comes from */\n@@ -211,12 +212,12 @@ decDensePackCoeff (decNumber * dn, uByte * bytes, Int len, Int shift)\n /* No error is possible [the redundant 888 codes are allowed].        */\n /* ------------------------------------------------------------------ */\n void\n-decDenseUnpackCoeff (uByte * bytes, Int len, decNumber * dn,\n+decDenseUnpackCoeff (const uByte * bytes, Int len, decNumber * dn,\n \t\t     Int bunches, Int odd)\n {\n   uInt dpd = 0;\t\t\t/* collector for 10 bits */\n   Int n;\t\t\t/* counter */\n-  uByte *bin;\t\t\t/* -> current input byte */\n+  const uByte *bin;\t\t/* -> current input byte */\n   Unit *uout = dn->lsu;\t\t/* -> current output unit */\n   Unit out = 0;\t\t\t/* accumulator */\n   Int cut = 0;\t\t\t/* power of ten in current unit */"}, {"sha": "dec7e269717a8038eae7c6818e19d0bbb56f8523", "filename": "libdecnumber/decUtility.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2FdecUtility.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2FdecUtility.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FdecUtility.h?ref=aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1", "patch": "@@ -24,5 +24,5 @@\n #define decDenseUnpackCoeff __decDenseUnpackCoeff\n #endif\n \n-extern void decDensePackCoeff (decNumber *, uByte *, Int, Int);\n-extern void decDenseUnpackCoeff (uByte *, Int, decNumber *, Int, Int);\n+extern void decDensePackCoeff (const decNumber *, uByte *, Int, Int);\n+extern void decDenseUnpackCoeff (const uByte *, Int, decNumber *, Int, Int);"}, {"sha": "90f400912e4a2e3140cf88778275865214789248", "filename": "libdecnumber/decimal128.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2Fdecimal128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2Fdecimal128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fdecimal128.c?ref=aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1", "patch": "@@ -38,8 +38,8 @@\n #include \"decUtility.h\"\t\t/* utility routines */\n \n #if DECTRACE || DECCHECK\n-void decimal128Show (decimal128 *);\t/* for debug */\n-void decNumberShow (decNumber *);\t/* .. */\n+void decimal128Show (const decimal128 *);\t/* for debug */\n+void decNumberShow (const decNumber *);\t/* .. */\n #endif\n \n /* Useful macro */\n@@ -64,7 +64,7 @@ void decNumberShow (decNumber *);\t/* .. */\n /* power of ten, or if the exponent on a zero had to be clamped.      */\n /* ------------------------------------------------------------------ */\n decimal128 *\n-decimal128FromNumber (decimal128 * d128, decNumber * dn, decContext * set)\n+decimal128FromNumber (decimal128 * d128, const decNumber * dn, decContext * set)\n {\n   uInt status = 0;\t\t/* status accumulator */\n   Int pad = 0;\t\t\t/* coefficient pad digits */\n@@ -184,7 +184,7 @@ decimal128FromNumber (decimal128 * d128, decNumber * dn, decContext * set)\n /* No error is possible.                                              */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decimal128ToNumber (decimal128 * d128, decNumber * dn)\n+decimal128ToNumber (const decimal128 * d128, decNumber * dn)\n {\n   uInt msd;\t\t\t/* coefficient MSD */\n   decimal128 wk;\t\t/* working copy, if needed */\n@@ -263,7 +263,7 @@ decimal128ToNumber (decimal128 * d128, decNumber * dn)\n /*  No error is possible, and no status can be set.                   */\n /* ------------------------------------------------------------------ */\n char *\n-decimal128ToString (decimal128 * d128, char *string)\n+decimal128ToString (const decimal128 * d128, char *string)\n {\n   decNumber dn;\t\t\t/* work */\n   decimal128ToNumber (d128, &dn);\n@@ -272,7 +272,7 @@ decimal128ToString (decimal128 * d128, char *string)\n }\n \n char *\n-decimal128ToEngString (decimal128 * d128, char *string)\n+decimal128ToEngString (const decimal128 * d128, char *string)\n {\n   decNumber dn;\t\t\t/* work */\n   decimal128ToNumber (d128, &dn);\n@@ -321,7 +321,7 @@ decimal128FromString (decimal128 * result, const char *string, decContext * set)\n /* ------------------------------------------------------------------ */\n /* Also shows sign/cob/expconfields extracted */\n void\n-decimal128Show (decimal128 * d128)\n+decimal128Show (const decimal128 * d128)\n {\n   char buf[DECIMAL128_Bytes * 2 + 1];\n   Int i, j;"}, {"sha": "cabe600e113b3d91509ff24aa87976d7ac96687c", "filename": "libdecnumber/decimal128.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2Fdecimal128.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2Fdecimal128.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fdecimal128.h?ref=aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1", "patch": "@@ -103,11 +103,11 @@ typedef struct\n \n   /* String conversions */\n decimal128 *decimal128FromString (decimal128 *, const char *, decContext *);\n-char *decimal128ToString (decimal128 *, char *);\n-char *decimal128ToEngString (decimal128 *, char *);\n+char *decimal128ToString (const decimal128 *, char *);\n+char *decimal128ToEngString (const decimal128 *, char *);\n \n   /* decNumber conversions */\n-decimal128 *decimal128FromNumber (decimal128 *, decNumber *, decContext *);\n-decNumber *decimal128ToNumber (decimal128 *, decNumber *);\n+decimal128 *decimal128FromNumber (decimal128 *, const decNumber *, decContext *);\n+decNumber *decimal128ToNumber (const decimal128 *, decNumber *);\n \n #endif"}, {"sha": "8e4f1ce8ad2befbc52be0fb735dbb79dce69c818", "filename": "libdecnumber/decimal32.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2Fdecimal32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2Fdecimal32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fdecimal32.c?ref=aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1", "patch": "@@ -38,8 +38,8 @@\n #include \"decUtility.h\"\t\t/* utility routines */\n \n #if DECTRACE || DECCHECK\n-void decimal32Show (decimal32 *);\t/* for debug */\n-void decNumberShow (decNumber *);\t/* .. */\n+void decimal32Show (const decimal32 *);\t/* for debug */\n+void decNumberShow (const decNumber *);\t/* .. */\n #endif\n \n /* Useful macro */\n@@ -64,7 +64,7 @@ void decNumberShow (decNumber *);\t/* .. */\n /* power of ten, or if the exponent on a zero had to be clamped.      */\n /* ------------------------------------------------------------------ */\n decimal32 *\n-decimal32FromNumber (decimal32 * d32, decNumber * dn, decContext * set)\n+decimal32FromNumber (decimal32 * d32, const decNumber * dn, decContext * set)\n {\n   uInt status = 0;\t\t/* status accumulator */\n   Int pad = 0;\t\t\t/* coefficient pad digits */\n@@ -181,7 +181,7 @@ decimal32FromNumber (decimal32 * d32, decNumber * dn, decContext * set)\n /* No error is possible.                                              */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decimal32ToNumber (decimal32 * d32, decNumber * dn)\n+decimal32ToNumber (const decimal32 * d32, decNumber * dn)\n {\n   uInt msd;\t\t\t/* coefficient MSD */\n   decimal32 wk;\t\t\t/* working copy, if needed */\n@@ -255,7 +255,7 @@ decimal32ToNumber (decimal32 * d32, decNumber * dn)\n /*  No error is possible, and no status can be set.                   */\n /* ------------------------------------------------------------------ */\n char *\n-decimal32ToString (decimal32 * d32, char *string)\n+decimal32ToString (const decimal32 * d32, char *string)\n {\n   decNumber dn;\t\t\t/* work */\n   decimal32ToNumber (d32, &dn);\n@@ -264,7 +264,7 @@ decimal32ToString (decimal32 * d32, char *string)\n }\n \n char *\n-decimal32ToEngString (decimal32 * d32, char *string)\n+decimal32ToEngString (const decimal32 * d32, char *string)\n {\n   decNumber dn;\t\t\t/* work */\n   decimal32ToNumber (d32, &dn);\n@@ -312,7 +312,7 @@ decimal32FromString (decimal32 * result, const char *string, decContext * set)\n /* ------------------------------------------------------------------ */\n /* Also shows sign/cob/expconfields extracted */\n void\n-decimal32Show (decimal32 * d32)\n+decimal32Show (const decimal32 * d32)\n {\n   char buf[DECIMAL32_Bytes * 2 + 1];\n   Int i, j;"}, {"sha": "f824b58af10c005813a40b4b07501af6ae86cda8", "filename": "libdecnumber/decimal32.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2Fdecimal32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2Fdecimal32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fdecimal32.h?ref=aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1", "patch": "@@ -93,11 +93,11 @@ typedef struct\n \n /* String conversions.  */\n decimal32 *decimal32FromString (decimal32 *, const char *, decContext *);\n-char *decimal32ToString (decimal32 *, char *);\n-char *decimal32ToEngString (decimal32 *, char *);\n+char *decimal32ToString (const decimal32 *, char *);\n+char *decimal32ToEngString (const decimal32 *, char *);\n \n /* decNumber conversions.  */\n-decimal32 *decimal32FromNumber (decimal32 *, decNumber *, decContext *);\n-decNumber *decimal32ToNumber (decimal32 *, decNumber *);\n+decimal32 *decimal32FromNumber (decimal32 *, const decNumber *, decContext *);\n+decNumber *decimal32ToNumber (const decimal32 *, decNumber *);\n \n #endif"}, {"sha": "8ae6f102920d08b9b69d8e2f6c1ab43496ee1d87", "filename": "libdecnumber/decimal64.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2Fdecimal64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2Fdecimal64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fdecimal64.c?ref=aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1", "patch": "@@ -38,8 +38,8 @@\n #include \"decUtility.h\"\t\t/* utility routines */\n \n #if DECTRACE || DECCHECK\n-void decimal64Show (decimal64 *);\t/* for debug */\n-void decNumberShow (decNumber *);\t/* .. */\n+void decimal64Show (const decimal64 *);\t/* for debug */\n+void decNumberShow (const decNumber *);\t/* .. */\n #endif\n \n /* Useful macro */\n@@ -64,7 +64,7 @@ void decNumberShow (decNumber *);\t/* .. */\n /* power of ten, or if the exponent on a zero had to be clamped.      */\n /* ------------------------------------------------------------------ */\n decimal64 *\n-decimal64FromNumber (decimal64 * d64, decNumber * dn, decContext * set)\n+decimal64FromNumber (decimal64 * d64, const decNumber * dn, decContext * set)\n {\n   uInt status = 0;\t\t/* status accumulator */\n   Int pad = 0;\t\t\t/* coefficient pad digits */\n@@ -180,7 +180,7 @@ decimal64FromNumber (decimal64 * d64, decNumber * dn, decContext * set)\n /* No error is possible.                                              */\n /* ------------------------------------------------------------------ */\n decNumber *\n-decimal64ToNumber (decimal64 * d64, decNumber * dn)\n+decimal64ToNumber (const decimal64 * d64, decNumber * dn)\n {\n   uInt msd;\t\t\t/* coefficient MSD */\n   decimal64 wk;\t\t\t/* working copy, if needed */\n@@ -254,7 +254,7 @@ decimal64ToNumber (decimal64 * d64, decNumber * dn)\n /*  No error is possible, and no status can be set.                   */\n /* ------------------------------------------------------------------ */\n char *\n-decimal64ToString (decimal64 * d64, char *string)\n+decimal64ToString (const decimal64 * d64, char *string)\n {\n   decNumber dn;\t\t\t/* work */\n   decimal64ToNumber (d64, &dn);\n@@ -263,7 +263,7 @@ decimal64ToString (decimal64 * d64, char *string)\n }\n \n char *\n-decimal64ToEngString (decimal64 * d64, char *string)\n+decimal64ToEngString (const decimal64 * d64, char *string)\n {\n   decNumber dn;\t\t\t/* work */\n   decimal64ToNumber (d64, &dn);\n@@ -312,7 +312,7 @@ decimal64FromString (decimal64 * result, const char *string, decContext * set)\n /* ------------------------------------------------------------------ */\n /* Also shows sign/cob/expconfields extracted */\n void\n-decimal64Show (decimal64 * d64)\n+decimal64Show (const decimal64 * d64)\n {\n   char buf[DECIMAL64_Bytes * 2 + 1];\n   Int i, j;"}, {"sha": "cb7810bbf0ea851d3b331cb2bd654bf6365ff20a", "filename": "libdecnumber/decimal64.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2Fdecimal64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1/libdecnumber%2Fdecimal64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fdecimal64.h?ref=aa4f41c1d57b1d533650672d5bcf2e40fffbf0f1", "patch": "@@ -97,11 +97,11 @@ typedef struct\n \n   /* String conversions */\n decimal64 *decimal64FromString (decimal64 *, const char *, decContext *);\n-char *decimal64ToString (decimal64 *, char *);\n-char *decimal64ToEngString (decimal64 *, char *);\n+char *decimal64ToString (const decimal64 *, char *);\n+char *decimal64ToEngString (const decimal64 *, char *);\n \n   /* decNumber conversions */\n-decimal64 *decimal64FromNumber (decimal64 *, decNumber *, decContext *);\n-decNumber *decimal64ToNumber (decimal64 *, decNumber *);\n+decimal64 *decimal64FromNumber (decimal64 *, const decNumber *, decContext *);\n+decNumber *decimal64ToNumber (const decimal64 *, decNumber *);\n \n #endif"}]}