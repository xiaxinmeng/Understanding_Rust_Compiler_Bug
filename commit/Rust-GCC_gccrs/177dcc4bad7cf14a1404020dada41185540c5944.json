{"sha": "177dcc4bad7cf14a1404020dada41185540c5944", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc3ZGNjNGJhZDdjZjE0YTE0MDQwMjBkYWRhNDExODU1NDBjNTk0NA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-12-19T09:48:28Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-12-19T09:48:28Z"}, "message": "2003-12-19  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/net/protocol/jar/Handler.java\n\t(parseURL): New method.\n\t(toExternalForm): New method.\n\nFrom-SVN: r74827", "tree": {"sha": "6e49cd962d755a57d5142556aa599f42794ded46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e49cd962d755a57d5142556aa599f42794ded46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/177dcc4bad7cf14a1404020dada41185540c5944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/177dcc4bad7cf14a1404020dada41185540c5944", "html_url": "https://github.com/Rust-GCC/gccrs/commit/177dcc4bad7cf14a1404020dada41185540c5944", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/177dcc4bad7cf14a1404020dada41185540c5944/comments", "author": null, "committer": null, "parents": [{"sha": "1b4513069a1ba56abff09f27977da3d10ffcd7f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b4513069a1ba56abff09f27977da3d10ffcd7f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b4513069a1ba56abff09f27977da3d10ffcd7f3"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "aeca31281e8f20a3c8a4d435b554f1bc4c1fb42b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177dcc4bad7cf14a1404020dada41185540c5944/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177dcc4bad7cf14a1404020dada41185540c5944/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=177dcc4bad7cf14a1404020dada41185540c5944", "patch": "@@ -1,3 +1,9 @@\n+2003-12-19  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/net/protocol/jar/Handler.java\n+\t(parseURL): New method.\n+\t(toExternalForm): New method.\n+\n 2003-12-18  Fernando Nasser  <fnasser@redhat.com>\n \n \t* java/awt/List.java (replaceItem): Prevent selection to move with"}, {"sha": "76ba6fddf3b9a306b155e3922de27396d50b3d33", "filename": "libjava/gnu/java/net/protocol/jar/Handler.java", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177dcc4bad7cf14a1404020dada41185540c5944/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fjar%2FHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177dcc4bad7cf14a1404020dada41185540c5944/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fjar%2FHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fjar%2FHandler.java?ref=177dcc4bad7cf14a1404020dada41185540c5944", "patch": "@@ -68,4 +68,86 @@ protected URLConnection openConnection(URL url) throws IOException\n   {\n     return new Connection(url);\n   }\n+\n+  /**\n+   * This method overrides URLStreamHandler's for parsing url of protocol \"jar\"\n+   *\n+   * @param url The URL object in which to store the results\n+   * @param url_string The String-ized URL to parse\n+   * @param start The position in the string to start scanning from\n+   * @param end The position in the string to stop scanning\n+   */\n+  protected void parseURL (URL url, String url_string, int start, int end)\n+  {\n+    // This method does not throw an exception or return a value.  Thus our\n+    // strategy when we encounter an error in parsing is to return without\n+    // doing anything.\n+    String file = url.getFile();\n+    \n+    if (file != null\n+        && file != \"\")\n+      { //has context url\n+\turl_string = url_string.substring (start, end);\n+        if (url_string.startsWith(\"/\"))\n+          { //url string is an absolute path\n+            int idx = file.lastIndexOf (\"!/\");\n+            if (idx == -1) //context path is weird\n+                file = file + \"!\" + url_string; \n+            else\n+                file = file.substring (0, idx + 1) + url_string;\n+          }\n+        else\n+          {\n+            int idx = file.lastIndexOf (\"/\");\n+            if (idx == -1) //context path is weird\n+              file = \"/\" + url_string; \n+            else if (idx == (file.length() - 1))\n+              //just concatenate two parts\n+              file = file + url_string;\n+            else\n+              // according to Java API Documentation, here is a little different \n+              // with URLStreamHandler.parseURL\n+              // but JDK seems doesn't handle it well\n+              file = file + \"/\" + url_string;\n+          }\n+        \n+        setURL (url, \"jar\", url.getHost(), url.getPort(), file, null);\n+        return;\n+      }\n+\n+    // Bunches of things should be true.  Make sure.\n+    if (end < start)\n+      return;\n+    if (end - start < 2)\n+      return;\n+    if (start > url_string.length())\n+      return;\n+    \n+    // Skip remains of protocol\n+    url_string = url_string.substring (start, end);\n+    \n+    if (!url.getProtocol().equals (\"jar\") )\n+      return;\n+        \n+    setURL (url, \"jar\", url.getHost(), url.getPort(), url_string, null);\n+  }\n+\n+  /**\n+   * This method converts a Jar URL object into a String.\n+   *\n+   * @param url The URL object to convert\n+   */\n+  protected String toExternalForm (URL url)\n+  {\n+    String file = url.getFile();\n+\n+    // return \"jar:\" + file;\n+    // Performance!!: \n+    //  Do the concatenation manually to avoid resize StringBuffer's \n+    //  internal buffer.\n+    StringBuffer sb = new StringBuffer (file.length() + 5);\n+    sb.append (\"jar:\");\n+    sb.append (file);\n+    return sb.toString();\n+  }\n }"}]}