{"sha": "5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVhZDY3ZjYwM2QyODdjZTBhNGM2NmUxNzNmNTU2YWYwZDdhZThmNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2008-06-27T16:53:54Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2008-06-27T16:53:54Z"}, "message": "c-format.c (handle_format_attribute): Fix -Wc++-compat and/or -Wcast-qual warnings.\n\n\t* c-format.c (handle_format_attribute): Fix -Wc++-compat and/or\n\t-Wcast-qual warnings.\n\t* c-pragma.c (dpm_eq, handle_pragma_push_macro,\n\thandle_pragma_pop_macro): Likewise.\n\t* collect2.c (resolve_lib_name): Likewise.\n\t* config/arc/arc.c (arc_init): Likewise.\n\t* config/arm/arm.c (neon_builtin_compare,\n\tlocate_neon_builtin_icode): Likewise.\n\t* config/arm/pe.c (arm_mark_dllexport, arm_pe_unique_section):\n\tLikewise.\n\t* config/bfin/bfin.c (bfin_init_machine_status,\n\tbfin_optimize_loop): Likewise.\n\t* config/bfin/bfin.h (TARGET_CPU_CPP_BUILTINS): Likewise.\n\t* config/cris/cris.c (cris_init_expanders): Likewise.\n\t* config/darwin-c.c (frameworks_in_use, add_framework): Likewise.\n\t* config/darwin.c (machopic_indirection_eq,\n\tmachopic_indirection_name, machopic_output_indirection):\n\tLikewise.\n\t* config/frv/frv.c (frv_init_machine_status, frv_compare_insns,\n\tfrv_io_check_address, frv_io_handle_set, frv_io_handle_use_1,\n\tfrv_optimize_membar): Likewise.\n\t* config/i386/cygwin.h (mingw_scan,\n\tGCC_DRIVER_HOST_INITIALIZATION): Likewise.\n\t* config/i386/cygwin1.c (mingw_scan): Likewise.\n\t* config/i386/i386.c (machopic_output_stub): Likewise.\n\t* config/i386/winnt.c (gen_stdcall_or_fastcall_suffix,\n\ti386_pe_unique_section): Likewise.\n\t* config/ia64/ia64.c (ia64_init_machine_status,\n\tia64_h_i_d_extended, get_free_bundle_state, bundling, ia64_reorg):\n\tLikewise.\n\t* config/iq2000/iq2000.c, iq2000_init_machine_status): Likewise.\n\t* config/m68hc11/m68hc11.c (m68hc11_encode_label): Likewise.\n\t* config/m68k/m68k.c (m68k_handle_option,\n\tm68k_sched_md_init_global): Likewise.\n\t* config/mcore/mcore.c (mcore_mark_dllexport,\n\tmcore_mark_dllimport, mcore_unique_section): Likewise.\n\t* config/mips/mips.c (mips_block_move_straight,\n\tmips16_rewrite_pool_refs, mips_sim_wait_regs_2,\n\tmips_sim_record_set): Likewise.\n\t* config/mmix/mmix.c (mmix_init_machine_status,\n\tmmix_encode_section_info): Likewise.\n\t* config/pa/pa.c (pa_init_machine_status, hppa_encode_label):\n\tLikewise.\n\t* config/rs6000/rs6000.c (rs6000_init_machine_status,\n\tprint_operand_address, output_toc, redefine_groups,\n\trs6000_elf_encode_section_info, machopic_output_stub): Likewise.\n\t* config/s390/s390.c (s390_init_machine_status): Likewise.\n\t* config/score/score.c (score_block_move_straight,\n\tscore_block_move_loop_body): Likewise.\n\t* config/sparc/sparc.c (sparc_init_machine_status): Likewise.\n\t* config/xtensa/xtensa.c (xtensa_init_machine_status): Likewise.\n\t* emit-rtl.c (find_auto_inc): Likewise.\n\t* gcc.c (translate_options, process_command): Likewise.\n\t* reorg.c (dbr_schedule): Likewise.\n\t* sdbout.c (sdbout_start_source_file, sdbout_init): Likewise.\n\t* xcoffout.c (xcoffout_declare_function): Likewise.\n\nFrom-SVN: r137191", "tree": {"sha": "6251910fa634d4bb4d3646027e5beddf48fda5f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6251910fa634d4bb4d3646027e5beddf48fda5f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/comments", "author": null, "committer": null, "parents": [{"sha": "d1caaa7618334bb5153e473828da8ec4bf4737b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1caaa7618334bb5153e473828da8ec4bf4737b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1caaa7618334bb5153e473828da8ec4bf4737b7"}], "stats": {"total": 257, "additions": 161, "deletions": 96}, "files": [{"sha": "01390700f3f0af8f5e097496edf64656e7a64a8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -1,3 +1,62 @@\n+2008-06-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-format.c (handle_format_attribute): Fix -Wc++-compat and/or\n+\t-Wcast-qual warnings.\n+\t* c-pragma.c (dpm_eq, handle_pragma_push_macro,\n+\thandle_pragma_pop_macro): Likewise.\n+\t* collect2.c (resolve_lib_name): Likewise.\n+\t* config/arc/arc.c (arc_init): Likewise.\n+\t* config/arm/arm.c (neon_builtin_compare,\n+\tlocate_neon_builtin_icode): Likewise.\n+\t* config/arm/pe.c (arm_mark_dllexport, arm_pe_unique_section):\n+\tLikewise.\n+\t* config/bfin/bfin.c (bfin_init_machine_status,\n+\tbfin_optimize_loop): Likewise.\n+\t* config/bfin/bfin.h (TARGET_CPU_CPP_BUILTINS): Likewise.\n+\t* config/cris/cris.c (cris_init_expanders): Likewise.\n+\t* config/darwin-c.c (frameworks_in_use, add_framework): Likewise.\n+\t* config/darwin.c (machopic_indirection_eq,\n+\tmachopic_indirection_name, machopic_output_indirection):\n+\tLikewise.\n+\t* config/frv/frv.c (frv_init_machine_status, frv_compare_insns,\n+\tfrv_io_check_address, frv_io_handle_set, frv_io_handle_use_1,\n+\tfrv_optimize_membar): Likewise.\n+\t* config/i386/cygwin.h (mingw_scan,\n+\tGCC_DRIVER_HOST_INITIALIZATION): Likewise.\n+\t* config/i386/cygwin1.c (mingw_scan): Likewise.\n+\t* config/i386/i386.c (machopic_output_stub): Likewise.\n+\t* config/i386/winnt.c (gen_stdcall_or_fastcall_suffix,\n+\ti386_pe_unique_section): Likewise.\n+\t* config/ia64/ia64.c (ia64_init_machine_status,\n+\tia64_h_i_d_extended, get_free_bundle_state, bundling, ia64_reorg):\n+\tLikewise.\n+\t* config/iq2000/iq2000.c, iq2000_init_machine_status): Likewise.\n+\t* config/m68hc11/m68hc11.c (m68hc11_encode_label): Likewise.\n+\t* config/m68k/m68k.c (m68k_handle_option,\n+\tm68k_sched_md_init_global): Likewise.\n+\t* config/mcore/mcore.c (mcore_mark_dllexport,\n+\tmcore_mark_dllimport, mcore_unique_section): Likewise.\n+\t* config/mips/mips.c (mips_block_move_straight,\n+\tmips16_rewrite_pool_refs, mips_sim_wait_regs_2,\n+\tmips_sim_record_set): Likewise.\n+\t* config/mmix/mmix.c (mmix_init_machine_status,\n+\tmmix_encode_section_info): Likewise.\n+\t* config/pa/pa.c (pa_init_machine_status, hppa_encode_label):\n+\tLikewise.\n+\t* config/rs6000/rs6000.c (rs6000_init_machine_status,\n+\tprint_operand_address, output_toc, redefine_groups,\n+\trs6000_elf_encode_section_info, machopic_output_stub): Likewise.\n+\t* config/s390/s390.c (s390_init_machine_status): Likewise.\n+\t* config/score/score.c (score_block_move_straight,\n+\tscore_block_move_loop_body): Likewise.\n+\t* config/sparc/sparc.c (sparc_init_machine_status): Likewise.\n+\t* config/xtensa/xtensa.c (xtensa_init_machine_status): Likewise.\n+\t* emit-rtl.c (find_auto_inc): Likewise.\n+\t* gcc.c (translate_options, process_command): Likewise.\n+\t* reorg.c (dbr_schedule): Likewise.\n+\t* sdbout.c (sdbout_start_source_file, sdbout_init): Likewise.\n+\t* xcoffout.c (xcoffout_declare_function): Likewise.\n+\n 2008-06-27  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* tree-ssa-structalias.c (find_func_aliases): Trivial fix to get"}, {"sha": "fa28763028f9d2dffdf30d4327e610c944e5242e", "filename": "gcc/c-format.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -2804,8 +2804,8 @@ handle_format_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n      add them to FORMAT_TYPES at first use.  */\n   if (TARGET_FORMAT_TYPES != NULL && !dynamic_format_types)\n     {\n-      dynamic_format_types = xmalloc ((n_format_types + TARGET_N_FORMAT_TYPES)\n-\t\t\t\t      * sizeof (dynamic_format_types[0]));\n+      dynamic_format_types = XNEWVEC (format_kind_info,\n+\t\t\t\t      n_format_types + TARGET_N_FORMAT_TYPES);\n       memcpy (dynamic_format_types, format_types_orig,\n \t      sizeof (format_types_orig));\n       memcpy (&dynamic_format_types[n_format_types], TARGET_FORMAT_TYPES,"}, {"sha": "e7bb928c8a9c4835ce976869154a30572a660dd0", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -270,7 +270,8 @@ dpm_hash (const void *p)\n static int\n dpm_eq (const void *pa, const void *pb)\n {\n-  const struct def_pragma_macro *a = pa, *b = pb;\n+  const struct def_pragma_macro *const a = (const struct def_pragma_macro *) pa,\n+    *const b = (const struct def_pragma_macro *) pb;\n   return a->hash == b->hash && strcmp (a->name, b->name) == 0;\n }\n \n@@ -315,18 +316,18 @@ handle_pragma_push_macro (cpp_reader *reader)\n   dummy.name = macroname;\n   slot = htab_find_slot_with_hash (pushed_macro_table, &dummy,\n \t\t\t\t   dummy.hash, INSERT);\n-  c = *slot;\n+  c = (struct def_pragma_macro *) *slot;\n   if (c == NULL)\n     {\n-      *slot = c = ggc_alloc (sizeof (struct def_pragma_macro));\n+      *slot = c = GGC_NEW (struct def_pragma_macro);\n       c->hash = dummy.hash;\n       c->name = ggc_alloc_string (macroname, TREE_STRING_LENGTH (id) - 1);\n       c->value.prev = NULL;\n     }\n   else\n     {\n       struct def_pragma_macro_value *v;\n-      v = ggc_alloc (sizeof (struct def_pragma_macro_value));\n+      v = GGC_NEW (struct def_pragma_macro_value);\n       *v = c->value;\n       c->value.prev = v;\n     }\n@@ -372,7 +373,7 @@ handle_pragma_pop_macro (cpp_reader *reader)\n \t\t\t\t     dummy.hash, NO_INSERT);\n   if (slot == NULL)\n     return;\n-  c = *slot;\n+  c = (struct def_pragma_macro *) *slot;\n \n   cpp_pop_definition (reader, c->name, c->value.value);\n "}, {"sha": "314d30d7717a8005e53c8c503cbb9bf82c770448", "filename": "gcc/collect2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -2628,7 +2628,7 @@ resolve_lib_name (const char *name)\n     if (libpaths[i]->max_len > l)\n       l = libpaths[i]->max_len;\n \n-  lib_buf = xmalloc (l + strlen(name) + 10);\n+  lib_buf = XNEWVEC (char, l + strlen(name) + 10);\n \n   for (i = 0; libpaths[i]; i++)\n     {"}, {"sha": "067d9f7ec79c5a3586a683989fa00769a200643b", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -173,11 +173,11 @@ arc_init (void)\n   char *tmp;\n   \n   /* Set the pseudo-ops for the various standard sections.  */\n-  arc_text_section = tmp = xmalloc (strlen (arc_text_string) + sizeof (ARC_SECTION_FORMAT) + 1);\n+  arc_text_section = tmp = XNEWVEC (char, strlen (arc_text_string) + sizeof (ARC_SECTION_FORMAT) + 1);\n   sprintf (tmp, ARC_SECTION_FORMAT, arc_text_string);\n-  arc_data_section = tmp = xmalloc (strlen (arc_data_string) + sizeof (ARC_SECTION_FORMAT) + 1);\n+  arc_data_section = tmp = XNEWVEC (char, strlen (arc_data_string) + sizeof (ARC_SECTION_FORMAT) + 1);\n   sprintf (tmp, ARC_SECTION_FORMAT, arc_data_string);\n-  arc_rodata_section = tmp = xmalloc (strlen (arc_rodata_string) + sizeof (ARC_SECTION_FORMAT) + 1);\n+  arc_rodata_section = tmp = XNEWVEC (char, strlen (arc_rodata_string) + sizeof (ARC_SECTION_FORMAT) + 1);\n   sprintf (tmp, ARC_SECTION_FORMAT, arc_rodata_string);\n \n   arc_init_reg_tables ();"}, {"sha": "fa3d06dcd758e8d15bdda0a496f8c0cd6892acd2", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -15609,8 +15609,8 @@ arm_expand_unop_builtin (enum insn_code icode,\n static int\n neon_builtin_compare (const void *a, const void *b)\n {\n-  const neon_builtin_datum *key = a;\n-  const neon_builtin_datum *memb = b;\n+  const neon_builtin_datum *const key = (const neon_builtin_datum *) a;\n+  const neon_builtin_datum *const memb = (const neon_builtin_datum *) b;\n   unsigned int soughtcode = key->base_fcode;\n \n   if (soughtcode >= memb->base_fcode\n@@ -15629,7 +15629,8 @@ locate_neon_builtin_icode (int fcode, neon_itype *itype)\n   int idx;\n \n   key.base_fcode = fcode;\n-  found = bsearch (&key, &neon_builtin_data[0], ARRAY_SIZE (neon_builtin_data),\n+  found = (neon_builtin_datum *)\n+    bsearch (&key, &neon_builtin_data[0], ARRAY_SIZE (neon_builtin_data),\n \t\t   sizeof (neon_builtin_data[0]), neon_builtin_compare);\n   gcc_assert (found);\n   idx = fcode - (int) found->base_fcode;"}, {"sha": "8b8adff0e149bdb68dd74c73e8b114674442a5fa", "filename": "gcc/config/arm/pe.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Farm%2Fpe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Farm%2Fpe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -112,7 +112,7 @@ arm_mark_dllexport (tree decl)\n   else if (arm_dllexport_name_p (oldname))\n     return; /* already done */\n \n-  newname = alloca (strlen (oldname) + 4);\n+  newname = XALLOCAVEC (char, strlen (oldname) + 4);\n   sprintf (newname, \"%ce.%s\", ARM_PE_FLAG_CHAR, oldname);\n \n   /* We pass newname through get_identifier to ensure it has a unique\n@@ -178,7 +178,7 @@ arm_mark_dllimport (tree decl)\n       TREE_PUBLIC (decl) = 1;\n     }\n \n-  newname = alloca (strlen (oldname) + 11);\n+  newname = XALLOCAVEC (char, strlen (oldname) + 11);\n   sprintf (newname, \"%ci.__imp_%s\", ARM_PE_FLAG_CHAR, oldname);\n \n   /* We pass newname through get_identifier to ensure it has a unique\n@@ -250,7 +250,7 @@ arm_pe_unique_section (tree decl, int reloc)\n   else\n     prefix = \".data$\";\n   len = strlen (name) + strlen (prefix);\n-  string = alloca (len + 1);\n+  string = XALLOCAVEC (char, len + 1);\n   sprintf (string, \"%s%s\", prefix, name);\n \n   DECL_SECTION_NAME (decl) = build_string (len, string);"}, {"sha": "05a5e495ceabd8af6ff1acdee20946c2c72ff356", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -2436,7 +2436,7 @@ bfin_init_machine_status (void)\n {\n   struct machine_function *f;\n \n-  f = ggc_alloc_cleared (sizeof (struct machine_function));\n+  f = GGC_CNEW (struct machine_function);\n \n   return f;\n }\n@@ -3838,7 +3838,7 @@ bfin_optimize_loop (loop_info loop)\n \n   if (JUMP_P (last_insn))\n     {\n-      loop_info inner = bb->aux;\n+      loop_info inner = (loop_info) bb->aux;\n       if (inner\n \t  && inner->outer == loop\n \t  && inner->loop_end == last_insn"}, {"sha": "6f2d16c98d6a824e6008974ae6b6c3f9383419b1", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -121,7 +121,7 @@ extern int target_flags;\n       if (bfin_si_revision != -1)\t\t\\\n \t{\t\t\t\t\t\\\n \t  /* space of 0xnnnn and a NUL */\t\\\n-\t  char *buf = alloca (7);\t\t\\\n+\t  char *buf = XALLOCAVEC (char, 7);\t\\\n \t\t\t\t\t\t\\\n \t  sprintf (buf, \"0x%04x\", bfin_si_revision);\t\t\t\\\n \t  builtin_define_with_value (\"__SILICON_REVISION__\", buf, 0);\t\\"}, {"sha": "3a0eb2de06609d68cc78ad9220d935a9b8bc36eb", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -2533,7 +2533,7 @@ cris_init_expanders (void)\n static struct machine_function *\n cris_init_machine_status (void)\n {\n-  return ggc_alloc_cleared (sizeof (struct machine_function));\n+  return GGC_CNEW (struct machine_function);\n }\n \n /* Split a 2 word move (DI or presumably DF) into component parts."}, {"sha": "9f3b444d6bc6766ecfea776bcd3716129f528edd", "filename": "gcc/config/darwin-c.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fdarwin-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fdarwin-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-c.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -179,7 +179,7 @@ darwin_pragma_ms_struct (cpp_reader *pfile ATTRIBUTE_UNUSED)\n     BAD (\"junk at end of '#pragma ms_struct'\");\n }\n \n-static struct {\n+static struct frameworks_in_use {\n   size_t len;\n   const char *name;\n   cpp_dir* dir;\n@@ -211,8 +211,8 @@ add_framework (const char *name, size_t len, cpp_dir *dir)\n     {\n       max_frameworks = i*2;\n       max_frameworks += i == 0;\n-      frameworks_in_use = xrealloc (frameworks_in_use,\n-\t\t\t\t    max_frameworks*sizeof(*frameworks_in_use));\n+      frameworks_in_use = XRESIZEVEC (struct frameworks_in_use,\n+\t\t\t\t      frameworks_in_use, max_frameworks);\n     }\n   dir_name = XNEWVEC (char, len + 1);\n   memcpy (dir_name, name, len);"}, {"sha": "20cce264101b6357d8f5774642f8a61926d1abdd", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -366,7 +366,8 @@ machopic_indirection_hash (const void *slot)\n static int\n machopic_indirection_eq (const void *slot, const void *key)\n {\n-  return strcmp (((const machopic_indirection *) slot)->ptr_name, key) == 0;\n+  return strcmp (((const machopic_indirection *) slot)->ptr_name,\n+\t\t (const char *) key) == 0;\n }\n \n /* Return the name of the non-lazy pointer (if STUB_P is false) or\n@@ -420,7 +421,7 @@ machopic_indirection_name (rtx sym_ref, bool stub_p)\n   else\n     suffix = NON_LAZY_POINTER_SUFFIX;\n \n-  buffer = alloca (strlen (\"&L\")\n+  buffer = XALLOCAVEC (char, strlen (\"&L\")\n \t\t   + strlen (prefix)\n \t\t   + namelen\n \t\t   + strlen (suffix)\n@@ -969,15 +970,15 @@ machopic_output_indirection (void **slot, void *data)\n \t    sym_name = IDENTIFIER_POINTER (id);\n \t}\n \n-      sym = alloca (strlen (sym_name) + 2);\n+      sym = XALLOCAVEC (char, strlen (sym_name) + 2);\n       if (sym_name[0] == '*' || sym_name[0] == '&')\n \tstrcpy (sym, sym_name + 1);\n       else if (sym_name[0] == '-' || sym_name[0] == '+')\n \tstrcpy (sym, sym_name);\n       else\n \tsprintf (sym, \"%s%s\", user_label_prefix, sym_name);\n \n-      stub = alloca (strlen (ptr_name) + 2);\n+      stub = XALLOCAVEC (char, strlen (ptr_name) + 2);\n       if (ptr_name[0] == '*' || ptr_name[0] == '&')\n \tstrcpy (stub, ptr_name + 1);\n       else"}, {"sha": "6ba924b1df7d02e03969920aebc9b27897f12cd9", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -6950,7 +6950,7 @@ frv_assemble_integer (rtx value, unsigned int size, int aligned_p)\n static struct machine_function *\n frv_init_machine_status (void)\n {\n-  return ggc_alloc_cleared (sizeof (struct machine_function));\n+  return GGC_CNEW (struct machine_function);\n }\n \f\n /* Implement TARGET_SCHED_ISSUE_RATE.  */\n@@ -7525,7 +7525,8 @@ frv_sort_insn_group_1 (enum frv_insn_group group,\n static int\n frv_compare_insns (const void *first, const void *second)\n {\n-  const rtx *insn1 = first, *insn2 = second;\n+  const rtx *const insn1 = (rtx const *) first,\n+    *const insn2 = (rtx const *) second;\n   return frv_insn_unit (*insn1) - frv_insn_unit (*insn2);\n }\n \n@@ -7758,7 +7759,7 @@ frv_extract_membar (struct frv_io *io, rtx insn)\n static void\n frv_io_check_address (rtx x, const_rtx pat ATTRIBUTE_UNUSED, void *data)\n {\n-  rtx *other = data;\n+  rtx *other = (rtx *) data;\n \n   if (REG_P (x) && *other != 0 && reg_overlap_mentioned_p (x, *other))\n     *other = 0;\n@@ -7770,7 +7771,7 @@ frv_io_check_address (rtx x, const_rtx pat ATTRIBUTE_UNUSED, void *data)\n static void\n frv_io_handle_set (rtx x, const_rtx pat ATTRIBUTE_UNUSED, void *data)\n {\n-  HARD_REG_SET *set = data;\n+  HARD_REG_SET *set = (HARD_REG_SET *) data;\n   unsigned int regno;\n \n   if (REG_P (x))\n@@ -7784,7 +7785,7 @@ frv_io_handle_set (rtx x, const_rtx pat ATTRIBUTE_UNUSED, void *data)\n static int\n frv_io_handle_use_1 (rtx *x, void *data)\n {\n-  HARD_REG_SET *set = data;\n+  HARD_REG_SET *set = (HARD_REG_SET *) data;\n   unsigned int regno;\n \n   if (REG_P (*x))\n@@ -8005,8 +8006,8 @@ frv_optimize_membar (void)\n   rtx *last_membar;\n \n   compute_bb_for_insn ();\n-  first_io = xcalloc (last_basic_block, sizeof (struct frv_io));\n-  last_membar = xcalloc (last_basic_block, sizeof (rtx));\n+  first_io = XCNEWVEC (struct frv_io, last_basic_block);\n+  last_membar = XCNEWVEC (rtx, last_basic_block);\n \n   FOR_EACH_BB (bb)\n     frv_optimize_membar_local (bb, &first_io[bb->index],"}, {"sha": "f61cacb3e1ac78a298843bf5021058e69c9946d6", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -203,12 +203,12 @@ char *cvt_to_mingw[] =\n #undef GEN_CVT_ARRAY\n #endif /*GEN_CVT_ARRAY*/\n \n-void mingw_scan (int, const char * const *, char **);\n+void mingw_scan (int, const char * const *, const char **);\n #if 1\n #define GCC_DRIVER_HOST_INITIALIZATION \\\n do \\\n { \\\n-  mingw_scan(argc, (const char * const *) argv, (char **) &spec_machine); \\\n+  mingw_scan(argc, (const char * const *) argv, &spec_machine); \\\n   } \\\n while (0)\n #else"}, {"sha": "3ba812fe44945695d3390c807bd3d7b061a471a7", "filename": "gcc/config/i386/cygwin1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fi386%2Fcygwin1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fi386%2Fcygwin1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin1.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -27,7 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n void\n mingw_scan (int argc ATTRIBUTE_UNUSED,\n             const char *const *argv,\n-            char **spec_machine)\n+            const char **spec_machine)\n {\n   putenv (xstrdup (\"GCC_CYGWIN_MINGW=0\"));\n  \n@@ -42,7 +42,7 @@ mingw_scan (int argc ATTRIBUTE_UNUSED,\n \tif (p)\n \t  {\n \t    int len = p - *spec_machine;\n-\t    char *s = xmalloc (strlen (*spec_machine) + 3);\n+\t    char *s = XNEWVEC (char, strlen (*spec_machine) + 3);\n \t    memcpy (s, *spec_machine, len);\n \t    strcpy (s + len, \"-mingw32\");\n \t    *spec_machine = s;"}, {"sha": "319d0b7f66155326defca8a9c99f05e6f3140556", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -22967,11 +22967,11 @@ machopic_output_stub (FILE *file, const char *symb, const char *stub)\n   symb = (*targetm.strip_name_encoding) (symb);\n \n   length = strlen (stub);\n-  binder_name = alloca (length + 32);\n+  binder_name = XALLOCAVEC (char, length + 32);\n   GEN_BINDER_NAME_FOR_STUB (binder_name, stub, length);\n \n   length = strlen (symb);\n-  symbol_name = alloca (length + 32);\n+  symbol_name = XALLOCAVEC (char, length + 32);\n   GEN_SYMBOL_NAME_FOR_SYMBOL (symbol_name, symb, length);\n \n   sprintf (lazy_ptr_name, \"L%d$lz\", label);"}, {"sha": "7fdd89471a8adae3c6384238cfd4a02c8566ad9c", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -199,7 +199,7 @@ gen_stdcall_or_fastcall_suffix (tree decl, tree id, bool fastcall)\n \t}\n       }\n   /* Assume max of 8 base 10 digits in the suffix.  */\n-  p = new_str = alloca (1 + strlen (old_str) + 1 + 8 + 1);\n+  p = new_str = XALLOCAVEC (char, 1 + strlen (old_str) + 1 + 8 + 1);\n   if (fastcall)\n     *p++ = FASTCALL_PREFIX;\n   sprintf (p, \"%s@\" HOST_WIDE_INT_PRINT_DEC, old_str, total);\n@@ -380,7 +380,7 @@ i386_pe_unique_section (tree decl, int reloc)\n   else\n     prefix = \".data$\";\n   len = strlen (name) + strlen (prefix);\n-  string = alloca (len + 1);\n+  string = XALLOCAVEC (char, len + 1);\n   sprintf (string, \"%s%s\", prefix, name);\n \n   DECL_SECTION_NAME (decl) = build_string (len, string);"}, {"sha": "d1928f6b3c7490d413e379504109fada4b37ebaf", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -5248,7 +5248,7 @@ void ia64_init_expanders (void)\n static struct machine_function *\n ia64_init_machine_status (void)\n {\n-  return ggc_alloc_cleared (sizeof (struct machine_function));\n+  return GGC_CNEW (struct machine_function);\n }\n \f\n static enum attr_itanium_class ia64_safe_itanium_class (rtx);\n@@ -6772,7 +6772,7 @@ ia64_h_i_d_extended (void)\n     {\n       int new_max_uid = get_max_uid () + 1;\n \n-      spec_check_no = xrecalloc (spec_check_no, new_max_uid,\n+      spec_check_no = (int *) xrecalloc (spec_check_no, new_max_uid,\n \t\t\t\t max_uid, sizeof (*spec_check_no));\n       max_uid = new_max_uid;\n     }\n@@ -6781,14 +6781,14 @@ ia64_h_i_d_extended (void)\n     {\n       int new_clocks_length = get_max_uid () + 1;\n       \n-      stops_p = xrecalloc (stops_p, new_clocks_length, clocks_length, 1);\n+      stops_p = (char *) xrecalloc (stops_p, new_clocks_length, clocks_length, 1);\n       \n       if (ia64_tune == PROCESSOR_ITANIUM)\n \t{\n-\t  clocks = xrecalloc (clocks, new_clocks_length, clocks_length,\n-\t\t\t      sizeof (int));\n-\t  add_cycles = xrecalloc (add_cycles, new_clocks_length, clocks_length,\n-\t\t\t\t  sizeof (int));\n+\t  clocks = (int *) xrecalloc (clocks, new_clocks_length, clocks_length,\n+\t\t\t\t      sizeof (int));\n+\t  add_cycles = (int *) xrecalloc (add_cycles, new_clocks_length,\n+\t\t\t\t\t  clocks_length, sizeof (int));\n \t}\n       \n       clocks_length = new_clocks_length;\n@@ -7410,7 +7410,7 @@ get_free_bundle_state (void)\n     }\n   else\n     {\n-      result = xmalloc (sizeof (struct bundle_state));\n+      result = XNEW (struct bundle_state);\n       result->dfa_state = xmalloc (dfa_state_size);\n       result->allocated_states_chain = allocated_bundle_states_chain;\n       allocated_bundle_states_chain = result;\n@@ -7920,8 +7920,7 @@ bundling (FILE *dump, int verbose, rtx prev_head_insn, rtx tail)\n   bundling_p = 1;\n   dfa_clean_insn_cache ();\n   initiate_bundle_state_table ();\n-  index_to_bundle_states = xmalloc ((insn_num + 2)\n-\t\t\t\t    * sizeof (struct bundle_state *));\n+  index_to_bundle_states = XNEWVEC (struct bundle_state *, insn_num + 2);\n   /* First (forward) pass -- generation of bundle states.  */\n   curr_state = get_free_bundle_state ();\n   curr_state->insn = NULL;\n@@ -8612,11 +8611,11 @@ ia64_reorg (void)\n       PREV_INSN (ia64_nop) = NEXT_INSN (ia64_nop) = NULL_RTX;\n       recog_memoized (ia64_nop);\n       clocks_length = get_max_uid () + 1;\n-      stops_p = xcalloc (1, clocks_length);\n+      stops_p = XCNEWVEC (char, clocks_length);\n       if (ia64_tune == PROCESSOR_ITANIUM)\n \t{\n-\t  clocks = xcalloc (clocks_length, sizeof (int));\n-\t  add_cycles = xcalloc (clocks_length, sizeof (int));\n+\t  clocks = XCNEWVEC (int, clocks_length);\n+\t  add_cycles = XCNEWVEC (int, clocks_length);\n \t}\n       if (ia64_tune == PROCESSOR_ITANIUM2)\n \t{"}, {"sha": "b66a485dbb11202721aa8727bdbb2166cbe8a4ca", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -1389,7 +1389,7 @@ iq2000_init_machine_status (void)\n {\n   struct machine_function *f;\n \n-  f = ggc_alloc_cleared (sizeof (struct machine_function));\n+  f = GGC_CNEW (struct machine_function);\n \n   return f;\n }"}, {"sha": "314feb183a6f9e742d03a9deb7535134bcb2c160", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -1172,7 +1172,7 @@ m68hc11_encode_label (tree decl)\n {\n   const char *str = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n   int len = strlen (str);\n-  char *newstr = alloca (len + 2);\n+  char *newstr = XALLOCAVEC (char, len + 2);\n \n   newstr[0] = '@';\n   strcpy (&newstr[1], str);"}, {"sha": "947304f56a08a1114c5f26de001a9e4565dddcb5", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -500,7 +500,11 @@ m68k_handle_option (size_t code, const char *arg, int value)\n \terror (\"-mshared-library-id=%s is not between 0 and %d\",\n \t       arg, MAX_LIBRARY_ID);\n       else\n-\tasprintf ((char **) &m68k_library_id_string, \"%d\", (value * -4) - 4);\n+        {\n+\t  char *tmp;\n+\t  asprintf (&tmp, \"%d\", (value * -4) - 4);\n+\t  m68k_library_id_string = tmp;\n+\t}\n       return true;\n \n     default:\n@@ -5446,8 +5450,7 @@ m68k_sched_md_init_global (FILE *sched_dump ATTRIBUTE_UNUSED,\n   {\n     rtx insn;\n \n-    sched_branch_type = xcalloc (get_max_uid () + 1,\n-\t\t\t\t sizeof (*sched_branch_type));\n+    sched_branch_type = XCNEWVEC (enum attr_type, get_max_uid () + 1);\n \n     for (insn = get_insns (); insn != NULL_RTX; insn = NEXT_INSN (insn))\n       {\n@@ -5504,8 +5507,7 @@ m68k_sched_md_init_global (FILE *sched_dump ATTRIBUTE_UNUSED,\n     case CPU_CFV3:\n       max_insn_size = 3;\n       sched_ib.records.n_insns = 8;\n-      sched_ib.records.adjust = xmalloc (sched_ib.records.n_insns\n-\t\t\t\t\t * sizeof (*sched_ib.records.adjust));\n+      sched_ib.records.adjust = XNEWVEC (int, sched_ib.records.n_insns);\n       break;\n \n     default:"}, {"sha": "227f7dcd8e8165830ec09ae52b37979bd1e0038d", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -2851,7 +2851,7 @@ mcore_mark_dllexport (tree decl)\n   if (mcore_dllexport_name_p (oldname))\n     return;  /* Already done.  */\n \n-  newname = alloca (strlen (oldname) + 4);\n+  newname = XALLOCAVEC (char, strlen (oldname) + 4);\n   sprintf (newname, \"@e.%s\", oldname);\n \n   /* We pass newname through get_identifier to ensure it has a unique\n@@ -2909,7 +2909,7 @@ mcore_mark_dllimport (tree decl)\n       TREE_PUBLIC (decl) = 1;\n     }\n \n-  newname = alloca (strlen (oldname) + 11);\n+  newname = XALLOCAVEC (char, strlen (oldname) + 11);\n   sprintf (newname, \"@i.__imp_%s\", oldname);\n \n   /* We pass newname through get_identifier to ensure it has a unique\n@@ -3066,7 +3066,7 @@ mcore_unique_section (tree decl, int reloc ATTRIBUTE_UNUSED)\n     prefix = \".data$\";\n   \n   len = strlen (name) + strlen (prefix);\n-  string = alloca (len + 1);\n+  string = XALLOCAVEC (char, len + 1);\n   \n   sprintf (string, \"%s%s\", prefix, name);\n "}, {"sha": "aa74d0c747d3edbc13a1147734b88c611426ef50", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -5833,7 +5833,7 @@ mips_block_move_straight (rtx dest, rtx src, HOST_WIDE_INT length)\n   delta = bits / BITS_PER_UNIT;\n \n   /* Allocate a buffer for the temporary registers.  */\n-  regs = alloca (sizeof (rtx) * length / delta);\n+  regs = XALLOCAVEC (rtx, length / delta);\n \n   /* Load as many BITS-sized chunks as possible.  Use a normal load if\n      the source has enough alignment, otherwise use left/right pairs.  */\n@@ -11428,7 +11428,8 @@ struct mips16_rewrite_pool_refs_info {\n static int\n mips16_rewrite_pool_refs (rtx *x, void *data)\n {\n-  struct mips16_rewrite_pool_refs_info *info = data;\n+  struct mips16_rewrite_pool_refs_info *info =\n+    (struct mips16_rewrite_pool_refs_info *) data;\n \n   if (force_to_mem_operand (*x, Pmode))\n     {\n@@ -11603,7 +11604,7 @@ static int\n mips_sim_wait_regs_2 (rtx *x, void *data)\n {\n   if (REG_P (*x))\n-    mips_sim_wait_reg (data, mips_sim_insn, *x);\n+    mips_sim_wait_reg ((struct mips_sim *) data, mips_sim_insn, *x);\n   return 0;\n }\n \n@@ -11657,7 +11658,7 @@ mips_sim_record_set (rtx x, const_rtx pat ATTRIBUTE_UNUSED, void *data)\n {\n   struct mips_sim *state;\n \n-  state = data;\n+  state = (struct mips_sim *) data;\n   if (REG_P (x))\n     {\n       unsigned int regno, end_regno;"}, {"sha": "fe38bb01eca33e26abea8ef02cd12bed81050629", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -241,7 +241,7 @@ mmix_init_expanders (void)\n static struct machine_function *\n mmix_init_machine_status (void)\n {\n-  return ggc_alloc_cleared (sizeof (struct machine_function));\n+  return GGC_CNEW (struct machine_function);\n }\n \n /* DATA_ALIGNMENT.\n@@ -1158,7 +1158,7 @@ mmix_encode_section_info (tree decl, rtx rtl, int first)\n \n       const char *str = XSTR (XEXP (rtl, 0), 0);\n       int len = strlen (str);\n-      char *newstr = alloca (len + 2);\n+      char *newstr = XALLOCAVEC (char, len + 2);\n       newstr[0] = '@';\n       strcpy (newstr + 1, str);\n       XSTR (XEXP (rtl, 0), 0) = ggc_alloc_string (newstr, len + 1);"}, {"sha": "0529a86a68cd5007f78045420e26cf97b64add87", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -538,7 +538,7 @@ pa_init_builtins (void)\n static struct machine_function *\n pa_init_machine_status (void)\n {\n-  return ggc_alloc_cleared (sizeof (machine_function));\n+  return GGC_CNEW (machine_function);\n }\n \n /* If FROM is a probable pointer register, mark TO as a probable\n@@ -7861,7 +7861,7 @@ hppa_encode_label (rtx sym)\n   int len = strlen (str) + 1;\n   char *newstr, *p;\n \n-  p = newstr = alloca (len + 1);\n+  p = newstr = XALLOCAVEC (char, len + 1);\n   *p++ = '@';\n   strcpy (p, str);\n "}, {"sha": "4833ad76d9144888580ad41778d02a791210b0f9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -11525,7 +11525,7 @@ rs6000_got_register (rtx value ATTRIBUTE_UNUSED)\n static struct machine_function *\n rs6000_init_machine_status (void)\n {\n-  return ggc_alloc_cleared (sizeof (machine_function));\n+  return GGC_CNEW (machine_function);\n }\n \f\n /* These macros test for integers and extract the low-order bits.  */\n@@ -12402,7 +12402,7 @@ print_operand_address (FILE *file, rtx x)\n \t      char *newname;\n \n \t      name = XSTR (symref, 0);\n-\t      newname = alloca (strlen (name) + sizeof (\"@toc\"));\n+\t      newname = XALLOCAVEC (char, strlen (name) + sizeof (\"@toc\"));\n \t      strcpy (newname, name);\n \t      strcat (newname, \"@toc\");\n \t      XSTR (symref, 0) = newname;\n@@ -17846,7 +17846,7 @@ output_toc (FILE *file, rtx x, int labelno, enum machine_mode mode)\n \ttoc_hash_table = htab_create_ggc (1021, toc_hash_function,\n \t\t\t\t\t  toc_hash_eq, NULL);\n \n-      h = ggc_alloc (sizeof (*h));\n+      h = GGC_NEW (struct toc_hash_struct);\n       h->key = x;\n       h->key_mode = mode;\n       h->labelno = labelno;\n@@ -19905,7 +19905,7 @@ redefine_groups (FILE *dump, int sched_verbose, rtx prev_head_insn, rtx tail)\n \n   /* Initialize.  */\n   issue_rate = rs6000_issue_rate ();\n-  group_insns = alloca (issue_rate * sizeof (rtx));\n+  group_insns = XALLOCAVEC (rtx, issue_rate);\n   for (i = 0; i < issue_rate; i++)\n     {\n       group_insns[i] = 0;\n@@ -20501,7 +20501,7 @@ rs6000_elf_encode_section_info (tree decl, rtx rtl, int first)\n     {\n       rtx sym_ref = XEXP (rtl, 0);\n       size_t len = strlen (XSTR (sym_ref, 0));\n-      char *str = alloca (len + 2);\n+      char *str = XALLOCAVEC (char, len + 2);\n       str[0] = '.';\n       memcpy (str + 1, XSTR (sym_ref, 0), len + 1);\n       XSTR (sym_ref, 0) = ggc_alloc_string (str, len + 1);\n@@ -20800,10 +20800,10 @@ machopic_output_stub (FILE *file, const char *symb, const char *stub)\n \n \n   length = strlen (symb);\n-  symbol_name = alloca (length + 32);\n+  symbol_name = XALLOCAVEC (char, length + 32);\n   GEN_SYMBOL_NAME_FOR_SYMBOL (symbol_name, symb, length);\n \n-  lazy_ptr_name = alloca (length + 32);\n+  lazy_ptr_name = XALLOCAVEC (char, length + 32);\n   GEN_LAZY_PTR_NAME_FOR_SYMBOL (lazy_ptr_name, symb, length);\n \n   if (flag_pic == 2)\n@@ -20819,7 +20819,7 @@ machopic_output_stub (FILE *file, const char *symb, const char *stub)\n       fprintf (file, \"\\t.indirect_symbol %s\\n\", symbol_name);\n \n       label++;\n-      local_label_0 = alloca (sizeof (\"\\\"L00000000000$spb\\\"\"));\n+      local_label_0 = XALLOCAVEC (char, sizeof (\"\\\"L00000000000$spb\\\"\"));\n       sprintf (local_label_0, \"\\\"L%011d$spb\\\"\", label);\n \n       fprintf (file, \"\\tmflr r0\\n\");"}, {"sha": "b9f231729a60c2e18e86c9c145e79e10d05ecf12", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -1451,7 +1451,7 @@ s390_narrow_logical_operator (enum rtx_code code, rtx *memop, rtx *immop)\n static struct machine_function *\n s390_init_machine_status (void)\n {\n-  return ggc_alloc_cleared (sizeof (struct machine_function));\n+  return GGC_CNEW (struct machine_function);\n }\n \n /* Change optimizations to be performed, depending on the"}, {"sha": "4f383da88ddb30b0057f2b0a8344028d219b5008", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -922,7 +922,7 @@ score_block_move_straight (rtx dst, rtx src, HOST_WIDE_INT length)\n   length -= leftover;\n   reg_count = length / UNITS_PER_WORD;\n \n-  regs = alloca (sizeof (rtx) * reg_count);\n+  regs = XALLOCAVEC (rtx, reg_count);\n   for (i = 0; i < reg_count; i++)\n     regs[i] = gen_reg_rtx (SImode);\n \n@@ -1006,7 +1006,7 @@ score_block_move_loop_body (rtx dst_reg, HOST_WIDE_INT dst_align,\n                             HOST_WIDE_INT length)\n {\n   int reg_count = length / UNITS_PER_WORD;\n-  rtx *regs = alloca (sizeof (rtx) * reg_count);\n+  rtx *regs = XALLOCAVEC (rtx, reg_count);\n   int i;\n   bool src_unaligned = (src_align < BITS_PER_WORD);\n   bool dst_unaligned = (dst_align < BITS_PER_WORD);"}, {"sha": "5e6f5748672087dec5fb2d35b80c18169a9c3517", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -8848,7 +8848,7 @@ sparc_can_output_mi_thunk (const_tree thunk_fndecl ATTRIBUTE_UNUSED,\n static struct machine_function *\n sparc_init_machine_status (void)\n {\n-  return ggc_alloc_cleared (sizeof (struct machine_function));\n+  return GGC_CNEW (struct machine_function);\n }\n \n /* Locate some local-dynamic symbol still in use by this function"}, {"sha": "6e26d76daad2e1fec35a58f473ac5c17c64135b0", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -1208,7 +1208,7 @@ xtensa_expand_nonlocal_goto (rtx *operands)\n static struct machine_function *\n xtensa_init_machine_status (void)\n {\n-  return ggc_alloc_cleared (sizeof (struct machine_function));\n+  return GGC_CNEW (struct machine_function);\n }\n \n "}, {"sha": "418da241b667da35b9946238247a438cddedd961", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -3101,7 +3101,7 @@ static int\n find_auto_inc (rtx *xp, void *data)\n {\n   rtx x = *xp;\n-  rtx reg = data;\n+  rtx reg = (rtx) data;\n \n   if (GET_RTX_CLASS (GET_CODE (x)) != RTX_AUTOINC)\n     return 0;"}, {"sha": "3da40a8c2a7a1123f250c3bcd38edb674eb40086", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -1242,7 +1242,7 @@ translate_options (int *argcp, const char *const **argvp)\n \t\t}\n \n \t      newvsize += spaces * sizeof (const char *);\n-\t      newv =  xrealloc (newv, newvsize);\n+\t      newv =  XRESIZEVAR (const char *, newv, newvsize);\n \n \t      sp = target_option_translations[tott_idx].replacements;\n \t      np = xstrdup (sp);\n@@ -3955,7 +3955,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t      for (j = 0; j < ARRAY_SIZE (modify_target); j++)\n \t\tif (! strcmp (argv[i], modify_target[j].sw))\n \t\t  {\n-\t\t    char *new_name = xmalloc (strlen (modify_target[j].str)\n+\t\t    char *new_name = XNEWVEC (char, strlen (modify_target[j].str)\n \t\t\t\t\t      + strlen (spec_machine));\n \t\t    const char *p, *r;\n \t\t    char *q;"}, {"sha": "7135a1885747e982f45cd7a87093028b34c081ca", "filename": "gcc/reorg.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -3834,15 +3834,15 @@ dbr_schedule (rtx first)\n \tepilogue_insn = insn;\n     }\n \n-  uid_to_ruid = xmalloc ((max_uid + 1) * sizeof (int));\n+  uid_to_ruid = XNEWVEC (int, max_uid + 1);\n   for (i = 0, insn = first; insn; i++, insn = NEXT_INSN (insn))\n     uid_to_ruid[INSN_UID (insn)] = i;\n \n   /* Initialize the list of insns that need filling.  */\n   if (unfilled_firstobj == 0)\n     {\n       gcc_obstack_init (&unfilled_slots_obstack);\n-      unfilled_firstobj = obstack_alloc (&unfilled_slots_obstack, 0);\n+      unfilled_firstobj = XOBNEWVAR (&unfilled_slots_obstack, rtx, 0);\n     }\n \n   for (insn = next_active_insn (first); insn; insn = next_active_insn (insn))\n@@ -3917,7 +3917,7 @@ dbr_schedule (rtx first)\n   obstack_free (&unfilled_slots_obstack, unfilled_firstobj);\n \n   /* It is not clear why the line below is needed, but it does seem to be.  */\n-  unfilled_firstobj = obstack_alloc (&unfilled_slots_obstack, 0);\n+  unfilled_firstobj = XOBNEWVAR (&unfilled_slots_obstack, rtx, 0);\n \n   if (dump_file)\n     {"}, {"sha": "8836a975e386a1faceb3065b8e793474a366e461", "filename": "gcc/sdbout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -1636,7 +1636,7 @@ sdbout_start_source_file (unsigned int line ATTRIBUTE_UNUSED,\n \t\t\t  const char *filename ATTRIBUTE_UNUSED)\n {\n #ifdef MIPS_DEBUGGING_INFO\n-  struct sdb_file *n = xmalloc (sizeof *n);\n+  struct sdb_file *n = XNEW (struct sdb_file);\n \n   n->next = current_file;\n   n->name = filename;\n@@ -1668,7 +1668,7 @@ sdbout_init (const char *input_file_name ATTRIBUTE_UNUSED)\n   tree t;\n \n #ifdef MIPS_DEBUGGING_INFO\n-  current_file = xmalloc (sizeof *current_file);\n+  current_file = XNEW (struct sdb_file);\n   current_file->next = NULL;\n   current_file->name = input_file_name;\n #endif"}, {"sha": "3c63e81a1de1a819604142e4a31c6e735233a578", "filename": "gcc/xcoffout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fxcoffout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ead67f603d287ce0a4c66e173f556af0d7ae8f7/gcc%2Fxcoffout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.c?ref=5ead67f603d287ce0a4c66e173f556af0d7ae8f7", "patch": "@@ -413,7 +413,7 @@ xcoffout_declare_function (FILE *file, tree decl, const char *name)\n   len = strlen (name);\n   if (name[len - 1] == ']')\n     {\n-      char *n = alloca (len - 3);\n+      char *n = XALLOCAVEC (char, len - 3);\n       memcpy (n, name, len - 4);\n       n[len - 4] = '\\0';\n       name = n;"}]}