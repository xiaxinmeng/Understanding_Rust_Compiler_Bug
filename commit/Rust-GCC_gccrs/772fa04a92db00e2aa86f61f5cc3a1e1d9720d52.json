{"sha": "772fa04a92db00e2aa86f61f5cc3a1e1d9720d52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcyZmEwNGE5MmRiMDBlMmFhODZmNjFmNWNjM2ExZTFkOTcyMGQ1Mg==", "commit": {"author": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1993-08-24T10:01:23Z"}, "committer": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1993-08-24T10:01:23Z"}, "message": "(objc_msg_sendv): Use new encoding facilities.\n\n(__objc_update_dispatch_table_for_class):\n        Don't free dtable... (memory leak to make posing work)\n(__objc_update_dispatch_table_for_class):\n        Free old dispatch table and install a new.\n\nFrom-SVN: r5205", "tree": {"sha": "d136b0452caba46f46cccd62ee8da986c91e19db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d136b0452caba46f46cccd62ee8da986c91e19db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/772fa04a92db00e2aa86f61f5cc3a1e1d9720d52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/772fa04a92db00e2aa86f61f5cc3a1e1d9720d52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/772fa04a92db00e2aa86f61f5cc3a1e1d9720d52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/772fa04a92db00e2aa86f61f5cc3a1e1d9720d52/comments", "author": null, "committer": null, "parents": [{"sha": "2224b8ccb3168be658d6462abd66900aa496ff7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2224b8ccb3168be658d6462abd66900aa496ff7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2224b8ccb3168be658d6462abd66900aa496ff7d"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "01a1b13633134ded077e584b24edd5820525b51d", "filename": "gcc/objc/sendmsg.c", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772fa04a92db00e2aa86f61f5cc3a1e1d9720d52/gcc%2Fobjc%2Fsendmsg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772fa04a92db00e2aa86f61f5cc3a1e1d9720d52/gcc%2Fobjc%2Fsendmsg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fsendmsg.c?ref=772fa04a92db00e2aa86f61f5cc3a1e1d9720d52", "patch": "@@ -26,6 +26,7 @@ You should have received a copy of the GNU General Public License along with\n \n #include \"runtime.h\"\n #include \"sarray.h\"\n+#include \"encoding.h\"\n \n /* The uninstalled dispatch table */\n struct sarray* __objc_uninstalled_dtable = 0;\n@@ -87,20 +88,15 @@ objc_msg_lookup_super (Super_t super, SEL sel)\n }\n \n retval_t\n-objc_msg_sendv(id object, SEL op, size_t frame_size, arglist_t arg_frame)\n+objc_msg_sendv(id object, SEL op, arglist_t arg_frame)\n {\n-#ifdef __objc_frame_receiver\n-  __objc_frame_receiver(arg_frame) = object;\n-  __objc_frame_selector(arg_frame) = op;\n-  return __builtin_apply((apply_t)get_imp(object->class_pointer, op),\n+  Method* m = class_get_instance_method(object->class_pointer, op);\n+  const char *type;\n+  *((id*)method_get_first_argument (m, arg_frame, &type)) = object;\n+  *((SEL*)method_get_next_argument (arg_frame, &type)) = op;\n+  return __builtin_apply((apply_t)m->method_imp, \n \t\t\t arg_frame,\n-\t\t\t frame_size);\n-#else\n-#warning performv:: will not work\n-  va_list nothing;\n-  (*_objc_error)(object, \"objc_msg_sendv (performv::) not supported\\n\", nothing);\n-  return 0;\n-#endif\n+\t\t\t method_get_sizeof_arguments (m));\n }\n \n void __objc_init_dispatch_tables()\n@@ -247,9 +243,9 @@ __objc_install_dispatch_table_for_class (Class* class)\n       while (counter >= 0)\n         {\n           Method_t method = &(mlist->method_list[counter]);\n-\t  sarray_at_put (class->dtable,\n-\t\t\t (sidx) method->method_name,\n-\t\t\t method->method_imp);\n+\t  sarray_at_put_safe (class->dtable,\n+\t\t\t      (sidx) method->method_name,\n+\t\t\t      method->method_imp);\n           counter -= 1;\n         }\n     }\n@@ -264,14 +260,14 @@ void __objc_update_dispatch_table_for_class (Class* class)\n   if (class->dtable == __objc_uninstalled_dtable) \n     return;\n \n-  save = class->dtable;\n-  __objc_install_premature_dtable (class);\n-  sarray_free (save);\n-\n+  sarray_free (class->dtable);\t/* release memory */\n+  __objc_install_premature_dtable (class); /* someone might require it... */\n+  __objc_install_dispatch_table_for_class (class); /* could have been lazy... */\n \n   if (class->subclass_list)\t/* Traverse subclasses */\n     for (next = class->subclass_list; next; next = next->sibling_class)\n       __objc_update_dispatch_table_for_class (next);\n+\n }\n \n "}]}