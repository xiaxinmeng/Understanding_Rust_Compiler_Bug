{"sha": "c8cd06a8137b153b373c16a2d681aaca2c423425", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhjZDA2YTgxMzdiMTUzYjM3M2MxNmEyZDY4MWFhY2EyYzQyMzQyNQ==", "commit": {"author": {"name": "Hans Boehm", "email": "Hans_Boehm@hp.com", "date": "2001-04-07T00:11:43Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2001-04-07T00:11:43Z"}, "message": "misc.c: Back out buggy changes to stack clearing code.\n\n\n\t* misc.c: Back out buggy changes to stack clearing code.\n\tReduce CLEAR_SIZE to 1/4 of original value to reduce time\n\tspent clearing memory.\n\nFrom-SVN: r41172", "tree": {"sha": "45fce1262c5241e4b2007ad637999e4734424ffb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45fce1262c5241e4b2007ad637999e4734424ffb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8cd06a8137b153b373c16a2d681aaca2c423425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8cd06a8137b153b373c16a2d681aaca2c423425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8cd06a8137b153b373c16a2d681aaca2c423425", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8cd06a8137b153b373c16a2d681aaca2c423425/comments", "author": null, "committer": null, "parents": [{"sha": "14bc1c0e15633ea781d76d0ae4274b2e27d51db5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14bc1c0e15633ea781d76d0ae4274b2e27d51db5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14bc1c0e15633ea781d76d0ae4274b2e27d51db5"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "091f27d6d835e71cb5e55de8336bbdfb39a338f3", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cd06a8137b153b373c16a2d681aaca2c423425/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cd06a8137b153b373c16a2d681aaca2c423425/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=c8cd06a8137b153b373c16a2d681aaca2c423425", "patch": "@@ -1,3 +1,9 @@\n+2001-04-05  Hans Boehm  <hans_boehm@hp.com>\n+\n+\t* misc.c: Back out buggy changes to stack clearing code.\n+\tReduce CLEAR_SIZE to 1/4 of original value to reduce time\n+\tspent clearing memory.\n+\n 2001-04-04  Hans Boehm  <hans_boehm@hp.com>\n \n \t* finalize.c:"}, {"sha": "9edb9453bb4169ef3bc8fd89e514676b4be3ac93", "filename": "boehm-gc/misc.c", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cd06a8137b153b373c16a2d681aaca2c423425/boehm-gc%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cd06a8137b153b373c16a2d681aaca2c423425/boehm-gc%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fmisc.c?ref=c8cd06a8137b153b373c16a2d681aaca2c423425", "patch": "@@ -206,10 +206,10 @@ extern signed_word GC_mem_found;\n  */\n word GC_stack_last_cleared = 0;\t/* GC_no when we last did this */\n # ifdef THREADS\n-#   define BIG_CLEAR_SIZE 2048\t/* Clear this much now and then.\t*/\n-#   define SMALL_CLEAR_SIZE 256 /* Clear this much every time.\t\t*/\n+#   define CLEAR_SIZE 512\n+# else\n+#   define CLEAR_SIZE 213\n # endif\n-# define CLEAR_SIZE 213  /* Granularity for GC_clear_stack_inner */\n # define DEGRADE_RATE 50\n \n word GC_min_sp;\t\t/* Coolest stack pointer value from which we've */\n@@ -266,12 +266,10 @@ ptr_t arg;\n {\n     register word sp = (word)GC_approx_sp();  /* Hotter than actual sp */\n #   ifdef THREADS\n-        word dummy[SMALL_CLEAR_SIZE];\n-\tunsigned random_no = 0;  /* Should be more random than it is ... */\n-\t\t\t\t /* Used to occasionally clear a bigger\t */\n-\t\t\t\t /* chunk.\t\t\t\t */\n+        word dummy[CLEAR_SIZE];\n+#   else\n+    \tregister word limit;\n #   endif\n-    register word limit;\n     \n #   define SLOP 400\n \t/* Extra bytes we clear every time.  This clears our own\t*/\n@@ -289,14 +287,7 @@ ptr_t arg;\n \t/* thus more junk remains accessible, thus the heap gets\t*/\n \t/* larger ...\t\t\t\t\t\t\t*/\n # ifdef THREADS\n-    if (++random_no % 13 == 0) {\n-\tlimit = sp;\n-\tMAKE_HOTTER(limit, BIG_CLEAR_SIZE*sizeof(word));\n-\treturn GC_lear_stack_inner(arg, limit);\n-    } else {\n-\tBZERO(dummy, SMALL_CLEAR_SIZE*sizeof(word));\n-\treturn arg;\n-    }\n+    BZERO(dummy, CLEAR_SIZE*sizeof(word));\n # else\n     if (GC_gc_no > GC_stack_last_cleared) {\n         /* Start things over, so we clear the entire stack again */"}]}