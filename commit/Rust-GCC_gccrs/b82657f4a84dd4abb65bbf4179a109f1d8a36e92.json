{"sha": "b82657f4a84dd4abb65bbf4179a109f1d8a36e92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgyNjU3ZjRhODRkZDRhYmI2NWJiZjQxNzlhMTA5ZjFkOGEzNmU5Mg==", "commit": {"author": {"name": "Daniel Kraft", "email": "d@domob.eu", "date": "2008-10-05T06:39:37Z"}, "committer": {"name": "Daniel Kraft", "email": "domob@gcc.gnu.org", "date": "2008-10-05T06:39:37Z"}, "message": "re PR fortran/37638 (ICE in update_arglist_pass)\n\n2008-10-05  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/37638\n\t* gfortran.h (struct gfc_typebound_proc): New flag `error'.\n\t* resolve.c (update_arglist_pass): Added assertion.\n\t(update_compcall_arglist): Fail early for erraneous procedures to avoid\n\tconfusion later.\n\t(resolve_typebound_generic_call): Ignore erraneous specific targets\n\tand added assertions.\n\t(resolve_typebound_procedure): Set new `error' flag.\n\n2008-10-05  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/37638\n\t* gfortran.dg/typebound_call_9.f03: New test.\n\nFrom-SVN: r140880", "tree": {"sha": "78ecce3a29fd3893b90181a49404d11b877e45ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78ecce3a29fd3893b90181a49404d11b877e45ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b82657f4a84dd4abb65bbf4179a109f1d8a36e92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b82657f4a84dd4abb65bbf4179a109f1d8a36e92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b82657f4a84dd4abb65bbf4179a109f1d8a36e92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b82657f4a84dd4abb65bbf4179a109f1d8a36e92/comments", "author": {"login": "domob1812", "id": 4943644, "node_id": "MDQ6VXNlcjQ5NDM2NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domob1812", "html_url": "https://github.com/domob1812", "followers_url": "https://api.github.com/users/domob1812/followers", "following_url": "https://api.github.com/users/domob1812/following{/other_user}", "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}", "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions", "organizations_url": "https://api.github.com/users/domob1812/orgs", "repos_url": "https://api.github.com/users/domob1812/repos", "events_url": "https://api.github.com/users/domob1812/events{/privacy}", "received_events_url": "https://api.github.com/users/domob1812/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee9ef10338020843b9df3c21297bd1c61bbd45b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee9ef10338020843b9df3c21297bd1c61bbd45b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee9ef10338020843b9df3c21297bd1c61bbd45b4"}], "stats": {"total": 93, "additions": 93, "deletions": 0}, "files": [{"sha": "df358b89c3dbf197e041b6da524f55b46f5863b3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b82657f4a84dd4abb65bbf4179a109f1d8a36e92/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b82657f4a84dd4abb65bbf4179a109f1d8a36e92/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b82657f4a84dd4abb65bbf4179a109f1d8a36e92", "patch": "@@ -1,3 +1,14 @@\n+2008-10-05  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/37638\n+\t* gfortran.h (struct gfc_typebound_proc): New flag `error'.\n+\t* resolve.c (update_arglist_pass): Added assertion.\n+\t(update_compcall_arglist): Fail early for erraneous procedures to avoid\n+\tconfusion later.\n+\t(resolve_typebound_generic_call): Ignore erraneous specific targets\n+\tand added assertions.\n+\t(resolve_typebound_procedure): Set new `error' flag.\n+\n 2008-10-04  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/37706"}, {"sha": "55cca728769278eb1cc70346733c9574c11260b5", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b82657f4a84dd4abb65bbf4179a109f1d8a36e92/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b82657f4a84dd4abb65bbf4179a109f1d8a36e92/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=b82657f4a84dd4abb65bbf4179a109f1d8a36e92", "patch": "@@ -1037,6 +1037,7 @@ typedef struct gfc_typebound_proc\n   unsigned non_overridable:1;\n   unsigned is_generic:1;\n   unsigned function:1, subroutine:1;\n+  unsigned error:1; /* Ignore it, when an error occurred during resolution.  */\n }\n gfc_typebound_proc;\n "}, {"sha": "6976e64e0c85f82e3e3d322238fa65a31cce85e3", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b82657f4a84dd4abb65bbf4179a109f1d8a36e92/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b82657f4a84dd4abb65bbf4179a109f1d8a36e92/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=b82657f4a84dd4abb65bbf4179a109f1d8a36e92", "patch": "@@ -4366,6 +4366,8 @@ fixup_charlen (gfc_expr *e)\n static gfc_actual_arglist*\n update_arglist_pass (gfc_actual_arglist* lst, gfc_expr* po, unsigned argpos)\n {\n+  gcc_assert (argpos > 0);\n+\n   if (argpos == 1)\n     {\n       gfc_actual_arglist* result;\n@@ -4417,6 +4419,9 @@ update_compcall_arglist (gfc_expr* e)\n \n   tbp = e->value.compcall.tbp;\n \n+  if (tbp->error)\n+    return FAILURE;\n+\n   po = extract_compcall_passed_object (e);\n   if (!po)\n     return FAILURE;\n@@ -4497,6 +4502,10 @@ resolve_typebound_generic_call (gfc_expr* e)\n \t  bool matches;\n \n \t  gcc_assert (g->specific);\n+\n+\t  if (g->specific->error)\n+\t    continue;\n+\n \t  target = g->specific->u.specific->n.sym;\n \n \t  /* Get the right arglist by handling PASS/NOPASS.  */\n@@ -4508,6 +4517,8 @@ resolve_typebound_generic_call (gfc_expr* e)\n \t      if (!po)\n \t\treturn FAILURE;\n \n+\t      gcc_assert (g->specific->pass_arg_num > 0);\n+\t      gcc_assert (!g->specific->error);\n \t      args = update_arglist_pass (args, po, g->specific->pass_arg_num);\n \t    }\n \t  resolve_actual_arglist (args, target->attr.proc,\n@@ -8448,10 +8459,12 @@ resolve_typebound_procedure (gfc_symtree* stree)\n       goto error;\n     }\n \n+  stree->typebound->error = 0;\n   return;\n \n error:\n   resolve_bindings_result = FAILURE;\n+  stree->typebound->error = 1;\n }\n \n static gfc_try"}, {"sha": "8ea4bef2bf3a25b0e86893f1712acd32e805861f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b82657f4a84dd4abb65bbf4179a109f1d8a36e92/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b82657f4a84dd4abb65bbf4179a109f1d8a36e92/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b82657f4a84dd4abb65bbf4179a109f1d8a36e92", "patch": "@@ -1,3 +1,8 @@\n+2008-10-05  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/37638\n+\t* gfortran.dg/typebound_call_9.f03: New test.\n+\n 2008-10-04  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/37706"}, {"sha": "f2e128d3cb2a96fb08ad48a0f682d539a64e54a9", "filename": "gcc/testsuite/gfortran.dg/typebound_call_9.f03", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b82657f4a84dd4abb65bbf4179a109f1d8a36e92/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_9.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b82657f4a84dd4abb65bbf4179a109f1d8a36e92/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_9.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_9.f03?ref=b82657f4a84dd4abb65bbf4179a109f1d8a36e92", "patch": "@@ -0,0 +1,63 @@\n+! { dg-do compile }\n+\n+! FIXME: Remove once polymorphic PASS is resolved\n+! { dg-options \"-w\" }\n+\n+! PR fortran/37638\n+! If a PASS(arg) is invalid, a call to this routine later would ICE in\n+! resolving.  Check that this also works for GENERIC, in addition to the\n+! PR's original test.\n+\n+! Contributed by Salvatore Filippone <sfilippone@uniroma2.it>\n+\n+module foo_mod\n+  implicit none \n+\n+  type base_foo_type \n+    integer           :: nr,nc\n+    integer, allocatable :: iv1(:), iv2(:)\n+\n+  contains\n+\n+    procedure, pass(a) :: makenull ! { dg-error \"has no argument 'a'\" }\n+    generic :: null2 => makenull\n+\n+  end type base_foo_type\n+\n+contains\n+\n+  subroutine makenull(m)\n+    implicit none\n+    type(base_foo_type), intent(inout) :: m\n+\n+    m%nr=0\n+    m%nc=0\n+\n+  end subroutine makenull\n+\n+  subroutine foo_free(a,info)\n+    implicit none\n+    Type(base_foo_type), intent(inout)  :: A\n+    Integer, intent(out)        :: info\n+    integer             :: iret\n+    info  = 0\n+\n+\n+    if (allocated(a%iv1)) then\n+      deallocate(a%iv1,stat=iret)\n+      if (iret /= 0) info = max(info,2)\n+    endif\n+    if (allocated(a%iv2)) then\n+      deallocate(a%iv2,stat=iret)\n+      if (iret /= 0) info = max(info,3)\n+    endif\n+\n+    call a%makenull()\n+    call a%null2 () ! { dg-error \"no matching specific binding\" }\n+\n+    Return\n+  End Subroutine foo_free\n+\n+end module foo_mod\n+\n+! { dg-final { cleanup-modules \"foo_mod\" } }"}]}