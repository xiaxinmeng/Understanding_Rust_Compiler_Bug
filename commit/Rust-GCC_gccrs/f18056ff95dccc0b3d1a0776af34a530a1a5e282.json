{"sha": "f18056ff95dccc0b3d1a0776af34a530a1a5e282", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE4MDU2ZmY5NWRjY2MwYjNkMWEwNzc2YWYzNGE1MzBhMWE1ZTI4Mg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@wasabisystems.com", "date": "2004-01-14T03:02:35Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2004-01-14T03:02:35Z"}, "message": "* cxxfilt.c: Remove unused file.\n\nFrom-SVN: r75839", "tree": {"sha": "f990aeced4b1d1800ccf73a6aeef5f5fd5ea1dbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f990aeced4b1d1800ccf73a6aeef5f5fd5ea1dbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f18056ff95dccc0b3d1a0776af34a530a1a5e282", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18056ff95dccc0b3d1a0776af34a530a1a5e282", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f18056ff95dccc0b3d1a0776af34a530a1a5e282", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18056ff95dccc0b3d1a0776af34a530a1a5e282/comments", "author": null, "committer": null, "parents": [{"sha": "b98d154e3eddc1812f391f11ca060eda6f17201d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b98d154e3eddc1812f391f11ca060eda6f17201d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b98d154e3eddc1812f391f11ca060eda6f17201d"}], "stats": {"total": 299, "additions": 4, "deletions": 295}, "files": [{"sha": "5c7220d4570091779a661fa97339e868de514575", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18056ff95dccc0b3d1a0776af34a530a1a5e282/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18056ff95dccc0b3d1a0776af34a530a1a5e282/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f18056ff95dccc0b3d1a0776af34a530a1a5e282", "patch": "@@ -1,3 +1,7 @@\n+2004-01-13  Ian Lance Taylor  <ian@wasabisystems.com>\n+\n+\t* cxxfilt.c: Remove unused file.\n+\n 2004-01-14  Jan Hubicka  <jh@suse.cz>\n \n \tPartial fix to PR c++/12850"}, {"sha": "289f6adcec0c7b59b5fae3207950374730f31c6b", "filename": "gcc/cp/cxxfilt.c", "status": "removed", "additions": 0, "deletions": 295, "changes": 295, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b98d154e3eddc1812f391f11ca060eda6f17201d/gcc%2Fcp%2Fcxxfilt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b98d154e3eddc1812f391f11ca060eda6f17201d/gcc%2Fcp%2Fcxxfilt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxxfilt.c?ref=b98d154e3eddc1812f391f11ca060eda6f17201d", "patch": "@@ -1,295 +0,0 @@\n-/* Demangler for GNU C++ - main program\n-   Copyright 1989, 1991, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002 Free Software Foundation, Inc.\n-   Written by James Clark (jjc@jclark.uucp)\n-   Rewritten by Fred Fish (fnf@cygnus.com) for ARM and Lucid demangling\n-   Modified by Satish Pai (pai@apollo.hp.com) for HP demangling\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 2, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING.  If not, write to the Free\n-Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n-02111-1307, USA.  */\n-\n-#include \"config.h\"\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"demangle.h\"\n-#include \"getopt.h\"\n-#include \"version.h\"\n-\n-static const char *program_name;\n-static int flags = DMGL_PARAMS | DMGL_ANSI | DMGL_VERBOSE;\n-\n-static void demangle_it (char *);\n-static void usage (FILE *, int) ATTRIBUTE_NORETURN;\n-static void fatal (const char *) ATTRIBUTE_NORETURN;\n-static void print_demangler_list (FILE *);\n-\n-static void\n-demangle_it (char *mangled_name)\n-{\n-  char *result;\n-\n-  /* For command line args, also try to demangle type encodings.  */\n-  result = cplus_demangle (mangled_name, flags | DMGL_TYPES);\n-  if (result == NULL)\n-    {\n-      printf (\"%s\\n\", mangled_name);\n-    }\n-  else\n-    {\n-      printf (\"%s\\n\", result);\n-      free (result);\n-    }\n-}\n-\n-static void \n-print_demangler_list (FILE *stream)\n-{\n-  const struct demangler_engine *demangler; \n-\n-  fprintf (stream, \"{%s\", libiberty_demanglers->demangling_style_name);\n-  \n-  for (demangler = libiberty_demanglers + 1;\n-       demangler->demangling_style != unknown_demangling;\n-       ++demangler)\n-    fprintf (stream, \",%s\", demangler->demangling_style_name);\n-\n-  fprintf (stream, \"}\");\n-}\n-\n-static void\n-usage (FILE *stream, int status)\n-{\n-  fprintf (stream, \"\\\n-Usage: %s [-_] [-n] [--strip-underscores] [--no-strip-underscores] \\n\",\n-\t   program_name);\n-\n-  fprintf (stream, \"\\\n-       [-s \");\n-  print_demangler_list (stream);\n-  fprintf (stream, \"]\\n\");\n-\n-  fprintf (stream, \"\\\n-       [--format \");\n-  print_demangler_list (stream);\n-  fprintf (stream, \"]\\n\");\n-\n-  fprintf (stream, \"\\\n-       [--help] [--version] [arg...]\\n\");\n-  exit (status);\n-}\n-\n-#define MBUF_SIZE 32767\n-char mbuffer[MBUF_SIZE];\n-\n-bool strip_underscore = false;\n-\n-static const struct option long_options[] = {\n-  {\"strip-underscores\", no_argument, 0, '_'},\n-  {\"format\", required_argument, 0, 's'},\n-  {\"help\", no_argument, 0, 'h'},\n-  {\"no-strip-underscores\", no_argument, 0, 'n'},\n-  {\"version\", no_argument, 0, 'v'},\n-  {0, no_argument, 0, 0}\n-};\n-\n-static const char *standard_symbol_characters (void);\n-\n-static const char *hp_symbol_characters (void);\n-\n-/* Return the string of non-alnum characters that may occur \n-   as a valid symbol component, in the standard assembler symbol\n-   syntax.  */\n-\n-static const char *\n-standard_symbol_characters (void)\n-{\n-  return \"_$.\";\n-}\n-\n-\n-/* Return the string of non-alnum characters that may occur\n-   as a valid symbol name component in an HP object file.\n-\n-   Note that, since HP's compiler generates object code straight from\n-   C++ source, without going through an assembler, its mangled\n-   identifiers can use all sorts of characters that no assembler would\n-   tolerate, so the alphabet this function creates is a little odd.\n-   Here are some sample mangled identifiers offered by HP:\n-\n-\ttypeid*__XT24AddressIndExpClassMember_\n-\t[Vftptr]key:__dt__32OrdinaryCompareIndExpClassMemberFv\n-\t__ct__Q2_9Elf64_Dyn18{unnamed.union.#1}Fv\n-\n-   This still seems really weird to me, since nowhere else in this\n-   file is there anything to recognize curly brackets, parens, etc.\n-   I've talked with Srikanth <srikanth@cup.hp.com>, and he assures me\n-   this is right, but I still strongly suspect that there's a\n-   misunderstanding here.\n-\n-   If we decide it's better for c++filt to use HP's assembler syntax\n-   to scrape identifiers out of its input, here's the definition of\n-   the symbol name syntax from the HP assembler manual:\n-\n-       Symbols are composed of uppercase and lowercase letters, decimal\n-       digits, dollar symbol, period (.), ampersand (&), pound sign(#) and\n-       underscore (_). A symbol can begin with a letter, digit underscore or\n-       dollar sign. If a symbol begins with a digit, it must contain a\n-       non-digit character.\n-\n-   So have fun.  */\n-static const char *\n-hp_symbol_characters (void)\n-{\n-  return \"_$.<>#,*&[]:(){}\";\n-}\n-\n-extern int main (int, char **);\n-\n-int\n-main (int argc, char **argv)\n-{\n-  char *result;\n-  int c;\n-  const char *valid_symbols;\n-  enum demangling_styles style = auto_demangling;\n-\n-  program_name = argv[0];\n-\n-  strip_underscore = (USER_LABEL_PREFIX[0] == '_');\n-\n-  while ((c = getopt_long (argc, argv, \"_ns:\", long_options, (int *) 0)) != EOF)\n-    {\n-      switch (c)\n-\t{\n-\tcase '?':\n-\t  usage (stderr, 1);\n-\t  break;\n-\tcase 'h':\n-\t  usage (stdout, 0);\n-\tcase 'n':\n-\t  strip_underscore = false;\n-\t  break;\n-\tcase 'v':\n-\t  printf (\"GNU %s (C++ demangler), version %s\\n\",\n-\t\t  program_name, version_string);\n-\t  return (0);\n-\tcase '_':\n-\t  strip_underscore = true;\n-\t  break;\n-\tcase 's':\n-\t  {\n-\t    style = cplus_demangle_name_to_style (optarg);\n-\t    if (style == unknown_demangling)\n-\t      {\n-\t\tfprintf (stderr, \"%s: unknown demangling style `%s'\\n\",\n-\t\t\t program_name, optarg);\n-\t\treturn (1);\n-\t      }\n-\t    else\n-\t      cplus_demangle_set_style (style);\n-\t  }\n-\t  break;\n-\t}\n-    }\n-\n-  if (optind < argc)\n-    {\n-      for ( ; optind < argc; optind++)\n-\t{\n-\t  demangle_it (argv[optind]);\n-\t}\n-    }\n-  else\n-    {\n-      switch (current_demangling_style)\n-\t{\n-\tcase gnu_demangling:\n-\tcase lucid_demangling:\n-\tcase arm_demangling:\n-\tcase java_demangling:\n-\tcase edg_demangling:\n-\tcase gnat_demangling:\n-\tcase gnu_v3_demangling:\n-\tcase auto_demangling:\n-\t  valid_symbols = standard_symbol_characters ();\n-\t  break;\n-\tcase hp_demangling:\n-\t  valid_symbols = hp_symbol_characters ();\n-\t  break;\n-\tdefault:\n-\t  /* Folks should explicitly indicate the appropriate alphabet for\n-\t     each demangling.  Providing a default would allow the\n-\t     question to go unconsidered.  */\n-\t  fatal (\"Internal error: no symbol alphabet for current style\");\n-\t}\n-\n-      for (;;)\n-\t{\n-\t  int i = 0;\n-\t  c = getchar ();\n-\t  /* Try to read a label.  */\n-\t  while (c != EOF && (ISALNUM (c) || strchr (valid_symbols, c)))\n-\t    {\n-\t      if (i >= MBUF_SIZE-1)\n-\t\tbreak;\n-\t      mbuffer[i++] = c;\n-\t      c = getchar ();\n-\t    }\n-\t  if (i > 0)\n-\t    {\n-\t      int skip_first = 0;\n-\n-\t      mbuffer[i] = 0;\n-\t      if (mbuffer[0] == '.' || mbuffer[0] == '$')\n-\t\t++skip_first;\n-\t      if (strip_underscore && mbuffer[skip_first] == '_')\n-\t\t++skip_first;\n-\n-\t      if (skip_first > i)\n-\t\tskip_first = i;\n-\n-\t      flags |= (int) style;\n-\t      result = cplus_demangle (mbuffer + skip_first, flags);\n-\t      if (result)\n-\t\t{\n-\t\t  if (mbuffer[0] == '.')\n-\t\t    putc ('.', stdout);\n-\t\t  fputs (result, stdout);\n-\t\t  free (result);\n-\t\t}\n-\t      else\n-\t\tfputs (mbuffer, stdout);\n-\n-\t      fflush (stdout);\n-\t    }\n-\t  if (c == EOF)\n-\t    break;\n-\t  putchar (c);\n-\t  fflush (stdout);\n-\t}\n-    }\n-\n-  return (0);\n-}\n-\n-static void\n-fatal (const char *str)\n-{\n-  fprintf (stderr, \"%s: %s\\n\", program_name, str);\n-  exit (1);\n-}"}]}