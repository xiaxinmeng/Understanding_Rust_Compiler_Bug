{"sha": "e901811a8be42e9c292324550c84be46d4f27e4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkwMTgxMWE4YmU0MmU5YzI5MjMyNDU1MGM4NGJlNDZkNGYyN2U0Yw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-02-06T16:47:39Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-02-06T16:47:39Z"}, "message": "re PR tree-optimization/38844 (deadlock with __attribute__((always_inline)) at -O1 and above)\n\n\n\tPR tree-optimization/38844\n\t* ipa-inline.c (try_inline): Stop inlining recursion when edge\n\tis already inlined.\n\nFrom-SVN: r143985", "tree": {"sha": "13b4a0dad8ff6765da899597c5f23d8ed89e8d45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13b4a0dad8ff6765da899597c5f23d8ed89e8d45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e901811a8be42e9c292324550c84be46d4f27e4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e901811a8be42e9c292324550c84be46d4f27e4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e901811a8be42e9c292324550c84be46d4f27e4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e901811a8be42e9c292324550c84be46d4f27e4c/comments", "author": null, "committer": null, "parents": [{"sha": "3cfa762bf031f655442405487b7e206fbe5f6ddc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cfa762bf031f655442405487b7e206fbe5f6ddc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cfa762bf031f655442405487b7e206fbe5f6ddc"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "f7ed966138f15490faaabedcdd60dce5a6012c83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e901811a8be42e9c292324550c84be46d4f27e4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e901811a8be42e9c292324550c84be46d4f27e4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e901811a8be42e9c292324550c84be46d4f27e4c", "patch": "@@ -1,3 +1,9 @@\n+2009-02-06  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/38844\n+\t* ipa-inline.c (try_inline): Stop inlining recursion when edge\n+\tis already inlined.\n+\n 2009-02-06  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/38977"}, {"sha": "e6b956c8106df33a000e4ddc60655a68e15e5e2c", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e901811a8be42e9c292324550c84be46d4f27e4c/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e901811a8be42e9c292324550c84be46d4f27e4c/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=e901811a8be42e9c292324550c84be46d4f27e4c", "patch": "@@ -1303,16 +1303,18 @@ try_inline (struct cgraph_edge *e, enum inlining_mode mode, int depth)\n \t       cgraph_node_name (e->caller));\n     }\n   if (e->inline_failed)\n-    cgraph_mark_inline (e);\n+    {\n+      cgraph_mark_inline (e);\n \n-  /* In order to fully inline always_inline functions, we need to\n-     recurse here, since the inlined functions might not be processed by\n-     incremental inlining at all yet.  \n+      /* In order to fully inline always_inline functions, we need to\n+\t recurse here, since the inlined functions might not be processed by\n+\t incremental inlining at all yet.  \n \n-     Also flattening needs to be done recursively.  */\n+\t Also flattening needs to be done recursively.  */\n \n-  if (mode == INLINE_ALL || always_inline)\n-    cgraph_decide_inlining_incrementally (e->callee, mode, depth + 1);\n+      if (mode == INLINE_ALL || always_inline)\n+\tcgraph_decide_inlining_incrementally (e->callee, mode, depth + 1);\n+    }\n   callee->aux = (void *)(size_t) callee_mode;\n   return true;\n }"}]}