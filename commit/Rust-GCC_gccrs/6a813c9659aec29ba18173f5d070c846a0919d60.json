{"sha": "6a813c9659aec29ba18173f5d070c846a0919d60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE4MTNjOTY1OWFlYzI5YmExODE3M2Y1ZDA3MGM4NDZhMDkxOWQ2MA==", "commit": {"author": {"name": "Dominik Vogt", "email": "vogt@linux.vnet.ibm.com", "date": "2016-05-27T11:38:59Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-05-27T11:38:59Z"}, "message": "combine: Take known zero bits into account when checking extraction.\n\ngcc/ChangeLog:\n\n\t* combine.c (make_compound_operation): Take known zero bits into\n\taccount when checking for possible zero_extend.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/zero_bits_compound-1.c: New test.\n\t* gcc.dg/zero_bits_compound-2.c: New test.\n\nFrom-SVN: r236813", "tree": {"sha": "0fff9490dbeec47e35828223b26554340ab7390f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fff9490dbeec47e35828223b26554340ab7390f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a813c9659aec29ba18173f5d070c846a0919d60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a813c9659aec29ba18173f5d070c846a0919d60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a813c9659aec29ba18173f5d070c846a0919d60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a813c9659aec29ba18173f5d070c846a0919d60/comments", "author": {"login": "vogtd", "id": 9690100, "node_id": "MDQ6VXNlcjk2OTAxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/9690100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vogtd", "html_url": "https://github.com/vogtd", "followers_url": "https://api.github.com/users/vogtd/followers", "following_url": "https://api.github.com/users/vogtd/following{/other_user}", "gists_url": "https://api.github.com/users/vogtd/gists{/gist_id}", "starred_url": "https://api.github.com/users/vogtd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vogtd/subscriptions", "organizations_url": "https://api.github.com/users/vogtd/orgs", "repos_url": "https://api.github.com/users/vogtd/repos", "events_url": "https://api.github.com/users/vogtd/events{/privacy}", "received_events_url": "https://api.github.com/users/vogtd/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4bc72f35f3322302a0672165bc9dc90ca0fc4b97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bc72f35f3322302a0672165bc9dc90ca0fc4b97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bc72f35f3322302a0672165bc9dc90ca0fc4b97"}], "stats": {"total": 119, "additions": 119, "deletions": 0}, "files": [{"sha": "59aa6d1f09ad708acc3d5e7dd3109bd46a0548cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a813c9659aec29ba18173f5d070c846a0919d60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a813c9659aec29ba18173f5d070c846a0919d60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a813c9659aec29ba18173f5d070c846a0919d60", "patch": "@@ -1,3 +1,8 @@\n+2016-05-27  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\t* combine.c (make_compound_operation): Take known zero bits into\n+\taccount when checking for possible zero_extend.\n+\n 2016-05-27  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.md (ashl<mode>3, SHORT modes):"}, {"sha": "4db11b03df1ae447790256cc9ecc62b84dad497e", "filename": "gcc/combine.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a813c9659aec29ba18173f5d070c846a0919d60/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a813c9659aec29ba18173f5d070c846a0919d60/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=6a813c9659aec29ba18173f5d070c846a0919d60", "patch": "@@ -7988,6 +7988,34 @@ make_compound_operation (rtx x, enum rtx_code in_code)\n \t\t\t\t\t\t\tnext_code),\n \t\t\t       i, NULL_RTX, 1, 1, 0, 1);\n \n+      /* If the one operand is a paradoxical subreg of a register or memory and\n+\t the constant (limited to the smaller mode) has only zero bits where\n+\t the sub expression has known zero bits, this can be expressed as\n+\t a zero_extend.  */\n+      else if (GET_CODE (XEXP (x, 0)) == SUBREG)\n+\t{\n+\t  rtx sub;\n+\n+\t  sub = XEXP (XEXP (x, 0), 0);\n+\t  machine_mode sub_mode = GET_MODE (sub);\n+\t  if ((REG_P (sub) || MEM_P (sub))\n+\t      && GET_MODE_PRECISION (sub_mode) < mode_width)\n+\t    {\n+\t      unsigned HOST_WIDE_INT mode_mask = GET_MODE_MASK (sub_mode);\n+\t      unsigned HOST_WIDE_INT mask;\n+\n+\t      /* original AND constant with all the known zero bits set */\n+\t      mask = UINTVAL (XEXP (x, 1)) | (~nonzero_bits (sub, sub_mode));\n+\t      if ((mask & mode_mask) == mode_mask)\n+\t\t{\n+\t\t  new_rtx = make_compound_operation (sub, next_code);\n+\t\t  new_rtx = make_extraction (mode, new_rtx, 0, 0,\n+\t\t\t\t\t     GET_MODE_PRECISION (sub_mode),\n+\t\t\t\t\t     1, 0, in_code == COMPARE);\n+\t\t}\n+\t    }\n+\t}\n+\n       break;\n \n     case LSHIFTRT:"}, {"sha": "c209d98a547c6f321f6f689bce3bef57860f5ace", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a813c9659aec29ba18173f5d070c846a0919d60/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a813c9659aec29ba18173f5d070c846a0919d60/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6a813c9659aec29ba18173f5d070c846a0919d60", "patch": "@@ -1,3 +1,8 @@\n+2016-05-27  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\t* gcc.dg/zero_bits_compound-1.c: New test.\n+\t* gcc.dg/zero_bits_compound-2.c: New test.\n+\n 2016-05-27  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR middle-end/71279"}, {"sha": "d78dc43d0a4d9c22b9c19a8435ca0f976b9819b6", "filename": "gcc/testsuite/gcc.dg/zero_bits_compound-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a813c9659aec29ba18173f5d070c846a0919d60/gcc%2Ftestsuite%2Fgcc.dg%2Fzero_bits_compound-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a813c9659aec29ba18173f5d070c846a0919d60/gcc%2Ftestsuite%2Fgcc.dg%2Fzero_bits_compound-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fzero_bits_compound-1.c?ref=6a813c9659aec29ba18173f5d070c846a0919d60", "patch": "@@ -0,0 +1,42 @@\n+/* Test whether an AND mask or'ed with the know zero bits that equals a mode\n+   mask is a candidate for zero extendion.  */\n+\n+/* Note: This test requires that char, int and long have different sizes and the\n+   target has a way to do 32 -> 64 bit zero extension other than AND.  */\n+\n+/* { dg-do compile { target x86_64-*-* s390*-*-* } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O3 -dP\" } */\n+\n+unsigned long foo (unsigned char c)\n+{\n+  unsigned long l;\n+  unsigned int i;\n+\n+  i = ((unsigned int)c) << 8;\n+  i |= ((unsigned int)c) << 20;\n+  asm volatile (\"\":::);\n+  i = i & 0x0ff0ff00;\n+  asm volatile (\"\":::);\n+  l = (unsigned long)i;\n+\n+  return l;\n+}\n+\n+unsigned long bar (unsigned char c)\n+{\n+  unsigned long l;\n+  unsigned int i;\n+\n+  i = ((unsigned int)c) << 8;\n+  i |= ((unsigned int)c) << 20;\n+  asm volatile (\"\":::);\n+  i = i & 0x0ffffff0;\n+  asm volatile (\"\":::);\n+  l = (unsigned long)i;\n+\n+  return l;\n+}\n+\n+/* Check that no pattern containing an AND expression was used.  */\n+/* { dg-final { scan-assembler-not \"\\\\(and:\" } } */"}, {"sha": "80fd363d9552e221d48801d2f29717ca5f3a42d4", "filename": "gcc/testsuite/gcc.dg/zero_bits_compound-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a813c9659aec29ba18173f5d070c846a0919d60/gcc%2Ftestsuite%2Fgcc.dg%2Fzero_bits_compound-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a813c9659aec29ba18173f5d070c846a0919d60/gcc%2Ftestsuite%2Fgcc.dg%2Fzero_bits_compound-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fzero_bits_compound-2.c?ref=6a813c9659aec29ba18173f5d070c846a0919d60", "patch": "@@ -0,0 +1,39 @@\n+/* Test whether an AND mask or'ed with the know zero bits that equals a mode\n+   mask is a candidate for zero extendion.  */\n+\n+/* { dg-do compile { target x86_64-*-* s390*-*-* } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O3 -dP\" } */\n+\n+unsigned long foo (unsigned char c)\n+{\n+  unsigned long l;\n+  unsigned int i;\n+\n+  i = ((unsigned int)c) << 8;\n+  i |= ((unsigned int)c) << 20;\n+  asm volatile (\"\":::);\n+  i = i & 0x0fe0fe00;\n+  asm volatile (\"\":::);\n+  l = (unsigned long)i;\n+\n+  return l;\n+}\n+\n+unsigned long bar (unsigned char c)\n+{\n+  unsigned long l;\n+  unsigned int i;\n+\n+  i = ((unsigned int)c) << 8;\n+  i |= ((unsigned int)c) << 20;\n+  asm volatile (\"\":::);\n+  i = i & 0x07f007f0;\n+  asm volatile (\"\":::);\n+  l = (unsigned long)i;\n+\n+  return l;\n+}\n+\n+/* Check that an AND expression was used.  */\n+/* { dg-final { scan-assembler-times \"\\\\(and:\" 2 } } */"}]}