{"sha": "a6d1d98047f0fdc4beb0cedaf5f062db87a09782", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZkMWQ5ODA0N2YwZmRjNGJlYjBjZWRhZjVmMDYyZGI4N2EwOTc4Mg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-04-12T10:18:59Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-04-12T10:18:59Z"}, "message": "* config/ns32k/ns32k.h (target_flags, MASK_32081, MASK_RTD)\n\t(MASK_REGPARM, MASK_32532, MASK_32332, MASK_NO_SB, MASK_NO_BITFIELD)\n\t(MASK_HIMEM, MASK_32381, MASK_MULT_ADD, MASK_SRC, MASK_IEEE_COMPARE)\n\t(TARGET_32081, TARGET_32381, TARGET_MULT_ADD, TARGET_RTD)\n\t(TARGET_REGPARM, TARGET_32532, TARGET_32332, TARGET_SB, TARGET_HIMEM)\n\t(TARGET_BITFIELD, TARGET_IEEE_COMPARE, TARGET_SWITCHES): Delete.\n\t(OVERRIDE_OPTIONS): Clear MASK_SB instead of setting MASK_NO_SB.\n\t* config/ns32k/netbsd.h (TARGET_DEFAULT): Remove MASK_NO_SB and\n\tMASK_NO_BITFIELD.\n\t* config/ns32k/ns32k.c (ns32k_handle_option): New function.\n\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Override defaults.\n\t* config/ns32k/ns32k.opt: New file.\n\nFrom-SVN: r98018", "tree": {"sha": "87ddf8c8ce4763044460b964ddcd5c40fb3af58c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87ddf8c8ce4763044460b964ddcd5c40fb3af58c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6d1d98047f0fdc4beb0cedaf5f062db87a09782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6d1d98047f0fdc4beb0cedaf5f062db87a09782", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6d1d98047f0fdc4beb0cedaf5f062db87a09782", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6d1d98047f0fdc4beb0cedaf5f062db87a09782/comments", "author": null, "committer": null, "parents": [{"sha": "4af06170d801916fc4b047df1fcff57783494dee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4af06170d801916fc4b047df1fcff57783494dee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4af06170d801916fc4b047df1fcff57783494dee"}], "stats": {"total": 256, "additions": 160, "deletions": 96}, "files": [{"sha": "52c5cc64854acb657cea4b7ca4850a120b0bdea2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d1d98047f0fdc4beb0cedaf5f062db87a09782/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d1d98047f0fdc4beb0cedaf5f062db87a09782/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6d1d98047f0fdc4beb0cedaf5f062db87a09782", "patch": "@@ -1,3 +1,18 @@\n+2005-04-12  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/ns32k/ns32k.h (target_flags, MASK_32081, MASK_RTD)\n+\t(MASK_REGPARM, MASK_32532, MASK_32332, MASK_NO_SB, MASK_NO_BITFIELD)\n+\t(MASK_HIMEM, MASK_32381, MASK_MULT_ADD, MASK_SRC, MASK_IEEE_COMPARE)\n+\t(TARGET_32081, TARGET_32381, TARGET_MULT_ADD, TARGET_RTD)\n+\t(TARGET_REGPARM, TARGET_32532, TARGET_32332, TARGET_SB, TARGET_HIMEM)\n+\t(TARGET_BITFIELD, TARGET_IEEE_COMPARE, TARGET_SWITCHES): Delete.\n+\t(OVERRIDE_OPTIONS): Clear MASK_SB instead of setting MASK_NO_SB.\n+\t* config/ns32k/netbsd.h (TARGET_DEFAULT): Remove MASK_NO_SB and\n+\tMASK_NO_BITFIELD.\n+\t* config/ns32k/ns32k.c (ns32k_handle_option): New function.\n+\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Override defaults.\n+\t* config/ns32k/ns32k.opt: New file.\n+\n 2005-04-12  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config.gcc (m68k-*-linux*): Add m68k/ieee.opt to $extra_options."}, {"sha": "f0e8cf009aa7703a7c55a0082d93ac87495d080b", "filename": "gcc/config/ns32k/netbsd.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d1d98047f0fdc4beb0cedaf5f062db87a09782/gcc%2Fconfig%2Fns32k%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d1d98047f0fdc4beb0cedaf5f062db87a09782/gcc%2Fconfig%2Fns32k%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fnetbsd.h?ref=a6d1d98047f0fdc4beb0cedaf5f062db87a09782", "patch": "@@ -36,8 +36,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT \\\n-  (MASK_32532 | MASK_NO_SB | MASK_NO_BITFIELD | \\\n-   MASK_32381 | MASK_IEEE_COMPARE | MASK_MULT_ADD)\n+  (MASK_32532 | MASK_32381 | MASK_IEEE_COMPARE | MASK_MULT_ADD)\n \n /* 32-bit alignment for efficiency */\n "}, {"sha": "8cf3fa7d1cb069ae7a5cb3bb5053f12a72814e85", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d1d98047f0fdc4beb0cedaf5f062db87a09782/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d1d98047f0fdc4beb0cedaf5f062db87a09782/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=a6d1d98047f0fdc4beb0cedaf5f062db87a09782", "patch": "@@ -64,6 +64,7 @@ const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER] =\n \n static const char *const ns32k_out_reg_names[] = OUTPUT_REGISTER_NAMES;\n \n+static bool ns32k_handle_option (size_t, const char *, int);\n static rtx gen_indexed_expr (rtx, rtx, rtx);\n static const char *singlemove_string (rtx *);\n static void move_tail (rtx[], int, int);\n@@ -94,6 +95,11 @@ static int ns32k_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE ns32k_output_function_epilogue\n \n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION ns32k_handle_option\n+\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS ns32k_rtx_costs\n #undef TARGET_ADDRESS_COST\n@@ -110,6 +116,35 @@ static int ns32k_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+ns32k_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED,\n+\t\t     int value ATTRIBUTE_UNUSED)\n+{\n+  switch (code)\n+    {\n+    case OPT_m32081:\n+      target_flags &= ~MASK_32381;\n+      return true;\n+\n+    case OPT_msoft_float:\n+      target_flags &= ~(MASK_32081 | MASK_32381);\n+      return true;\n+\n+    case OPT_m32332:\n+      target_flags &= ~MASK_32532;\n+      return true;\n+\n+    case OPT_m32032:\n+      target_flags &= ~(MASK_32332 | MASK_32532);\n+      return true;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\f\n /* Generate the assembly code for function entry.  FILE is a stdio\n    stream to output the code to.  SIZE is an int: how many units of\n    temporary storage to allocate."}, {"sha": "db7df7d269193aafcafec18b26c6db19ca2b2b91", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 1, "deletions": 94, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d1d98047f0fdc4beb0cedaf5f062db87a09782/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d1d98047f0fdc4beb0cedaf5f062db87a09782/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=a6d1d98047f0fdc4beb0cedaf5f062db87a09782", "patch": "@@ -78,99 +78,6 @@ Boston, MA 02111-1307, USA.  */\n #define PUT_EXTERNAL_PREFIX(FILE)\n #endif\n \n-/* Run-time compilation parameters selecting different hardware subsets.  */\n-\n-extern int target_flags;\n-\n-/* Masks for target_flags */\n-#define MASK_32081\t\t1\n-#define MASK_RTD\t\t2\n-#define MASK_REGPARM\t\t4\n-#define MASK_32532\t\t8\n-#define MASK_32332\t\t16\n-#define MASK_NO_SB\t\t32\n-#define MASK_NO_BITFIELD\t64\n-#define MASK_HIMEM\t\t128\n-#define MASK_32381\t\t256\n-#define MASK_MULT_ADD\t\t512\n-#define MASK_SRC\t\t1024\n-#define MASK_IEEE_COMPARE 2048\n-\n-/* Macros used in the machine description to test the flags.  */\n-\n-/* Compile 32081 insns for floating point (not library calls). */\n-#define TARGET_32081 (target_flags & MASK_32081)\n-#define TARGET_32381 (target_flags & MASK_32381)\n-\n-/* The use of multiply-add instructions is optional because there may\n- * be cases where it produces worse code.\n- */\n-\n-#define TARGET_MULT_ADD (target_flags & MASK_MULT_ADD)\n-\n-/* Compile using rtd insn calling sequence.\n-   This will not work unless you use prototypes at least\n-   for all functions that can take varying numbers of args.  */\n-#define TARGET_RTD (target_flags & MASK_RTD)\n-\n-/* Compile passing first two args in regs 0 and 1.  */\n-#define TARGET_REGPARM (target_flags & MASK_REGPARM)\n-\n-/* Options to select type of CPU, for better optimization.\n-   The output is correct for any kind of 32000 regardless of these options.  */\n-#define TARGET_32532 (target_flags & MASK_32532)\n-#define TARGET_32332 (target_flags & MASK_32332)\n-\n-/* Ok to use the static base register (and presume it's 0) */\n-#define TARGET_SB    ((target_flags & MASK_NO_SB) == 0)\n-\n-#define TARGET_HIMEM (target_flags & MASK_HIMEM)\n-\n-/* Compile using bit-field insns.  */\n-#define TARGET_BITFIELD ((target_flags & MASK_NO_BITFIELD) == 0)\n-\n-#define TARGET_IEEE_COMPARE (target_flags & MASK_IEEE_COMPARE)\n-\n-/* Macro to define tables used to set the flags.\n-   This is a list in braces of pairs in braces,\n-   each pair being { \"NAME\", VALUE }\n-   where VALUE is the bits to set or minus the bits to clear.\n-   An empty string NAME is used to identify the default VALUE.  */\n-#define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n-  { { \"32081\", MASK_32081, N_(\"Use hardware fp\")},\t\t\t\\\n-    { \"soft-float\", -(MASK_32081|MASK_32381),\t\t\t\t\\\n-      N_(\"Don't use hardware fp\")},\t\t\t\t\t\\\n-    { \"rtd\", MASK_RTD, N_(\"Alternative calling convention\")},\t\t\\\n-    { \"nortd\", -MASK_RTD, N_(\"Use normal calling convention\")},\t\t\\\n-    { \"regparm\", MASK_REGPARM, N_(\"Pass some arguments in registers\")},\t\\\n-    { \"noregparm\", -MASK_REGPARM, N_(\"Pass all arguments on stack\")},\t\\\n-    { \"32532\", MASK_32532|MASK_32332, N_(\"Optimize for 32532 cpu\")},\t\\\n-    { \"32332\", MASK_32332, N_(\"Optimize for 32332 cpu\")},\t\t\\\n-    { \"32332\", -MASK_32532, 0},\t\t\t\t\t\t\\\n-    { \"32032\", -(MASK_32532|MASK_32332), N_(\"Optimize for 32032\")},\t\\\n-    { \"sb\", -MASK_NO_SB,\t\t\t\t\t\t\\\n-      N_(\"Register sb is zero. Use for absolute addressing\")},\t\t\\\n-    { \"nosb\", MASK_NO_SB, N_(\"Do not use register sb\")},\t\t\\\n-    { \"bitfield\", -MASK_NO_BITFIELD,\t\t\t\t\t\\\n-      N_(\"Use bit-field instructions\")},\t\t\t\t\\\n-    { \"nobitfield\", MASK_NO_BITFIELD,\t\t\t\t\t\\\n-      N_(\"Do not use bit-field instructions\")},\t\t\t\t\\\n-    { \"himem\", MASK_HIMEM, N_(\"Generate code for high memory\")},\t\\\n-    { \"nohimem\", -MASK_HIMEM, N_(\"Generate code for low memory\")},\t\\\n-    { \"32381\", MASK_32381, N_(\"32381 fpu\")},\t\t\t\t\\\n-    { \"mult-add\", MASK_MULT_ADD,\t\t\t\t\t\\\n-      N_(\"Use multiply-accumulate fp instructions\")},\t\t\t\\\n-    { \"nomult-add\", -MASK_MULT_ADD,\t\t\t\t\t\\\n-      N_(\"Do not use multiply-accumulate fp instructions\") },\t\t\\\n-    { \"src\", MASK_SRC, N_(\"\\\"Small register classes\\\" kludge\")},\t\\\n-    { \"nosrc\", -MASK_SRC, N_(\"No \\\"Small register classes\\\" kludge\")},\t\\\n-    { \"ieee-compare\", MASK_IEEE_COMPARE, N_(\"Use IEEE math for fp comparisons\")},\t\\\n-    { \"noieee-compare\", -MASK_IEEE_COMPARE,\t\t\t\t\t\\\n-      N_(\"Do not use IEEE math for fp comparisons\")},\t\t\t\\\n-    { \"\", TARGET_DEFAULT, 0}}\n-\n-/* TARGET_DEFAULT is defined in encore.h, pc532.h, etc.  */\n-\n /* When we are generating PIC, the sb is used as a pointer\n    to the GOT. 32381 is a superset of 32081  */\n \n@@ -179,7 +86,7 @@ extern int target_flags;\n   if (target_flags & MASK_32532)\t\t\\\n     target_flags |= MASK_32332; \t\t\\\n   if (flag_pic || TARGET_HIMEM)\t\t\t\\\n-    target_flags |= MASK_NO_SB;\t\t\t\\\n+    target_flags &= ~MASK_SB;\t\t\t\\\n   if (TARGET_32381)\t\t\t\t\\\n     target_flags |= MASK_32081;\t\t\t\\\n   else\t\t\t\t\t\t\\"}, {"sha": "d31bdafea9d26d6022e1eecbcffd9d75d895ba2f", "filename": "gcc/config/ns32k/ns32k.opt", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d1d98047f0fdc4beb0cedaf5f062db87a09782/gcc%2Fconfig%2Fns32k%2Fns32k.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d1d98047f0fdc4beb0cedaf5f062db87a09782/gcc%2Fconfig%2Fns32k%2Fns32k.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.opt?ref=a6d1d98047f0fdc4beb0cedaf5f062db87a09782", "patch": "@@ -0,0 +1,108 @@\n+; Options for the NS32000 port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+m32032\n+Target RejectNegative\n+Optimize for 32032\n+\n+m32081\n+Target RejectNegative Report Mask(32081)\n+Use hardware fp\n+\n+m32332\n+Target RejectNegative Report Mask(32332)\n+Optimize for 32332\n+\n+m32381\n+Target RejectNegative Report Mask(32381)\n+Use the 32381 fpu\n+\n+m32532\n+Target RejectNegative Report Mask(32532)\n+Optimize for 32532\n+\n+mbitfield\n+Target RejectNegative Report Mask(BITFIELD)\n+Use bit-field instructions\n+\n+mhimem\n+Target RejectNegative Report Mask(HIMEM)\n+Generate code for high memory\n+\n+mieee-compare\n+Target RejectNegative Report Mask(IEEE_COMPARE)\n+Use IEEE math for fp comparisons\n+\n+mmult-add\n+Target RejectNegative Report Mask(MULT_ADD)\n+Use multiply-accumulate fp instructions\n+\n+mnobitfield\n+Target RejectNegative Report InverseMask(BITFIELD)\n+Do not use bit-field instructions\n+\n+mnohimem\n+Target RejectNegative Report InverseMask(HIMEM)\n+Generate code for low memory\n+\n+mnoieee-compare\n+Target RejectNegative Report InverseMask(IEEE_COMPARE)\n+Do not use IEEE math for fp comparisons\n+\n+mnomult-add\n+Target RejectNegative Report InverseMask(MULT_ADD)\n+Do not use multiply-accumulate fp instructions\n+\n+mnoregparm\n+Target RejectNegative Report InverseMask(REGPARM)\n+Pass all arguments on the stack\n+\n+mnortd\n+Target RejectNegative Report InverseMask(RTD)\n+Use the normal calling convention\n+\n+mnosb\n+Target RejectNegative Report InverseMask(SB)\n+Do not use register sb\n+\n+mnosrc\n+Target RejectNegative Report InverseMask(SRC)\n+Do not use the 'small register classes' kludge\n+\n+mregparm\n+Target RejectNegative Report Mask(REGPARM)\n+Pass some arguments in registers\n+\n+mrtd\n+Target RejectNegative Report Mask(RTD)\n+Use an alternative calling convention\n+\n+msb\n+Target RejectNegative Report Mask(SB)\n+Register sb is zero, use it for absolute addressing\n+\n+msoft-float\n+Target RejectNegative\n+Do not use hardware fp\n+\n+msrc\n+Target RejectNegative Report Mask(SRC)\n+Use the 'small register classes' kludge"}]}