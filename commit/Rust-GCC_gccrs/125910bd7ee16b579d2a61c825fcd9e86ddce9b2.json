{"sha": "125910bd7ee16b579d2a61c825fcd9e86ddce9b2", "node_id": "C_kwDOANBUbNoAKDEyNTkxMGJkN2VlMTZiNTc5ZDJhNjFjODI1ZmNkOWU4NmRkY2U5YjI", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-11-26T14:52:04Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-11-30T21:40:56Z"}, "message": "d: Add language reference section to documentation files.\n\nAdds an initial body of documentation for the D front-end - other than\nthe existing documentation for command-line usage/the man page.\n\nDocumentation covers code generation choices specific to GNU D - what\nattributes are supported, intrinsics, pragmas, predefined versions,\nlanguage extensions, missing features and deviations from spec.\n\nMore could be added or elaborated upon, such as what linkage do\ndifferent symbols get, mixed language programming with C and C++, the\nanatomy of a TypeInfo and ModuleInfo object, and so on.  This is enough\nas a first wave just to get it off the ground.\n\ngcc/d/ChangeLog:\n\n\t* Make-lang.in (D_TEXI_FILES): Add d/implement-d.texi.\n\t* gdc.texi: Adjust introduction, include implement-d.texi.\n\t* implement-d.texi: New file.", "tree": {"sha": "91c42cca21597262856cd2bb70182977ccfb0eae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91c42cca21597262856cd2bb70182977ccfb0eae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/125910bd7ee16b579d2a61c825fcd9e86ddce9b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/125910bd7ee16b579d2a61c825fcd9e86ddce9b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/125910bd7ee16b579d2a61c825fcd9e86ddce9b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/125910bd7ee16b579d2a61c825fcd9e86ddce9b2/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7870100db7b755e5916144e569e80cfa19e361eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7870100db7b755e5916144e569e80cfa19e361eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7870100db7b755e5916144e569e80cfa19e361eb"}], "stats": {"total": 2527, "additions": 2523, "deletions": 4}, "files": [{"sha": "b5264613db0cf08c37cde13e4a145ff43840b12d", "filename": "gcc/d/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/125910bd7ee16b579d2a61c825fcd9e86ddce9b2/gcc%2Fd%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/125910bd7ee16b579d2a61c825fcd9e86ddce9b2/gcc%2Fd%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FMake-lang.in?ref=125910bd7ee16b579d2a61c825fcd9e86ddce9b2", "patch": "@@ -239,6 +239,7 @@ d21$(exeext): $(D_ALL_OBJS) attribs.o $(BACKEND) $(LIBDEPS) $(d.prev)\n \n D_TEXI_FILES = \\\n \td/gdc.texi \\\n+\td/implement-d.texi \\\n \t$(gcc_docdir)/include/fdl.texi \\\n \t$(gcc_docdir)/include/gpl_v3.texi \\\n \t$(gcc_docdir)/include/gcc-common.texi \\"}, {"sha": "c99c36558a9f7ca640cd9fdb1c65db3e8f87d1ea", "filename": "gcc/d/gdc.texi", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/125910bd7ee16b579d2a61c825fcd9e86ddce9b2/gcc%2Fd%2Fgdc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/125910bd7ee16b579d2a61c825fcd9e86ddce9b2/gcc%2Fd%2Fgdc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fgdc.texi?ref=125910bd7ee16b579d2a61c825fcd9e86ddce9b2", "patch": "@@ -65,13 +65,15 @@ Boston, MA 02110-1301, USA@*\n @top Introduction\n \n This manual describes how to use @command{gdc}, the GNU compiler for\n-the D programming language.  This manual is specifically about\n-@command{gdc}.  For more information about the D programming\n-language in general, including language specifications and standard\n-package documentation, see @uref{https://dlang.org/}.\n+the D programming language.  This manual is specifically about how to\n+invoke @command{gdc}, as well as its features and incompatibilities.\n+For more information about the D programming language in general,\n+including language specifications and standard package documentation,\n+see @uref{https://dlang.org/}.\n \n @menu\n * Invoking gdc::                How to run gdc.\n+* D Implementation::            User-visible implementation details.\n * Copying::                     The GNU General Public License.\n * GNU Free Documentation License::\n                                 How you can share and copy this manual.\n@@ -838,6 +840,8 @@ and all @code{function} bodies that are being compiled.\n \n @c man end\n \n+@include implement-d.texi\n+\n @include gpl_v3.texi\n @include fdl.texi\n "}, {"sha": "8f3f825e7973af7f614ecd6a45de33ccf962f45a", "filename": "gcc/d/implement-d.texi", "status": "added", "additions": 2514, "deletions": 0, "changes": 2514, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/125910bd7ee16b579d2a61c825fcd9e86ddce9b2/gcc%2Fd%2Fimplement-d.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/125910bd7ee16b579d2a61c825fcd9e86ddce9b2/gcc%2Fd%2Fimplement-d.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fimplement-d.texi?ref=125910bd7ee16b579d2a61c825fcd9e86ddce9b2", "patch": "@@ -0,0 +1,2514 @@\n+@ignore\n+Copyright (C) 2022 Free Software Foundation, Inc.\n+This is part of the GNU D manual.\n+For copying conditions, see the file gdc.texi.\n+@end ignore\n+\n+@node D Implementation\n+@chapter Language Reference\n+@cindex language reference, D language\n+\n+The implementation of the D programming language used by the GNU D compiler is\n+shared with parts of the front-end for the Digital Mars D compiler, hosted at\n+@uref{https://github.com/dlang/dmd/}.  This common front-end covers lexical\n+analysis, parsing, and semantic analysis of the D programming language defined\n+in the documents at @uref{https://dlang.org/}.\n+\n+The implementation details described in this manual are GNU D extensions to the\n+D programming language.  If you want to write code that checks whether these\n+features are available, you can test for the predefined version @code{GNU}, or\n+you can check whether a specific feature is compilable using\n+@code{__traits(compiles)}.\n+\n+@smallexample\n+version (GNU)\n+@{\n+    import gcc.builtins;\n+    return __builtin_atan2(x, y);\n+@}\n+\n+static if (__traits(compiles, @{ asm @{\"\";@} @}))\n+@{\n+    asm @{ \"magic instruction\"; @}\n+@}\n+@end smallexample\n+\n+@menu\n+* Attributes::          Implementation-defined attributes.\n+* Builtin Functions::   GCC built-ins module.\n+* ImportC::             Importing C sources into D.\n+* Inline Assembly::     Interfacing D with assembler.\n+* Intrinsics::          Intrinsic functions supported by GDC.\n+* Predefined Pragmas::  Pragmas accepted by GDC.\n+* Predefined Versions:: List of versions for conditional compilation.\n+* Special Enums::       Intrinsic type interoperability with C and C++.\n+* Traits::              Compile-time reflection extensions.\n+* Vector Extensions::   Using vector types and supported operations.\n+* Vector Intrinsics::   Vector instructions through intrinsics.\n+* Missing Features::    Deviations from the D2 specification in GDC.\n+@end menu\n+\n+\n+@c --------------------------------------------------------\n+\n+@node Attributes\n+@section Attributes\n+@cindex attributes\n+\n+User-Defined Attributes (UDA) are compile-time expressions introduced by the\n+@code{@@} token that can be attached to a declaration.  These attributes can\n+then be queried, extracted, and manipulated at compile time.\n+\n+GNU D provides a number of extra special attributes to control specific\n+compiler behavior that may help the compiler optimize or check code more\n+carefully for correctness.  The attributes are defined in the\n+@code{gcc.attributes} module.\n+\n+There is some overlap between the purposes of attributes and pragmas.  It has\n+been found more convenient to use @code{@@attribute} to achieve a natural\n+attachment of attributes to their corresponding declarations, whereas\n+@code{pragma} is of use for compatibility with other compilers or constructs\n+that do not naturally form part of the grammar.\n+\n+@menu\n+* Attribute Syntax::\n+* Common Attributes::\n+* Other Attributes::\n+* Target Attributes::\n+@end menu\n+\n+@c --------------------------------------------------------\n+\n+@node Attribute Syntax\n+@subsection Attribute Syntax\n+\n+@code{@@(gcc.attributes.attribute)} is the generic entrypoint for applying GCC\n+attributes to a function, variable, or type.  There is no type checking done,\n+as well as no deprecation path for attributes removed from the compiler.  So\n+the recommendation is to use any of the other UDAs available as described in\n+@ref{Common Attributes} unless it is a target-specific attribute\n+(@xref{Target Attributes}).\n+\n+Function attributes introduced by the @code{@@attribute} UDA are used in the\n+declaration of a function, followed by an attribute name string and any\n+arguments separated by commas enclosed in parentheses.\n+\n+@smallexample\n+import gcc.attributes;\n+@@attribute(\"regparm\", 1) int func(int size);\n+@end smallexample\n+\n+@noindent\n+Multiple attributes can be applied to a single declaration either with multiple\n+@code{@@attribute} attributes, or passing all attributes as a comma-separated\n+list enclosed by parentheses.\n+\n+@smallexample\n+// Both func1 and func2 have the same attributes applied.\n+@@attribute(\"noinline\") @@attribute(\"noclone\") void func1();\n+@@(attribute(\"noinline\"), attribute(\"noclone\")) void func2();\n+@end smallexample\n+\n+@noindent\n+There are some problems with the semantics of such attributes in D.  For\n+example, there are no manglings for attributes, although they may affect code\n+generation, so problems may arise when attributed types are used in conjunction\n+with templates or overloading.  Similarly, @code{typeid} does not distinguish\n+between types with different attributes.  Support for attributes in D are\n+restricted to declarations only.\n+\n+@c --------------------------------------------------------\n+\n+@node Common Attributes\n+@subsection Common Attributes\n+\n+The following attributes are supported on most targets.\n+\n+@table @code\n+\n+@item @@(gcc.attributes.alloc_size (@var{sizeArgIdx}))\n+@itemx @@(gcc.attributes.alloc_size (@var{sizeArgIdx}, @var{numArgIdx}))\n+@itemx @@(gcc.attributes.alloc_size (@var{sizeArgIdx}, @var{numArgIdx}, @var{zeroBasedNumbering}))\n+@cindex @code{alloc_size} function attribute\n+@cindex @code{alloc_size} variable attribute\n+\n+The @code{@@alloc_size} attribute may be applied to a function - or a function\n+pointer variable -  that returns a pointer and takes at least one argument of\n+an integer or enumerated type.  It indicates that the returned pointer points\n+to memory whose size is given by the function argument at @code{sizeArgIdx}, or\n+by the product of the arguments at @code{sizeArgIdx} and @code{numArgIdx}.\n+Meaningful sizes are positive values less than @code{ptrdiff_t.max}.  Unless\n+@code{zeroBasedNumbering} is true, argument numbering starts at one for\n+ordinary functions, and at two for non-static member functions.\n+\n+If @code{numArgIdx} is less than @code{0}, it is taken to mean there is no\n+argument specifying the element count.\n+\n+@smallexample\n+@@alloc_size(1) void* malloc(size_t);\n+@@alloc_size(3,2) void* reallocarray(void *, size_t, size_t);\n+@@alloc_size(1,2) void* my_calloc(size_t, size_t, bool);\n+void malloc_cb(@@alloc_size(1) void* function(size_t) ptr) @{ @}\n+@end smallexample\n+\n+@item @@(gcc.attributes.always_inline)\n+@cindex @code{always_inline} function attribute\n+\n+The @code{@@always_inline} attribute inlines the function independent of any\n+restrictions that otherwise apply to inlining.  Failure to inline such a\n+function is diagnosed as an error.\n+\n+@smallexample\n+@@always_inline int func();\n+@end smallexample\n+\n+@item @@(gcc.attributes.cold)\n+@cindex @code{cold} function attribute\n+\n+The @code{@@cold} attribute on functions is used to inform the compiler that the\n+function is unlikely to be executed.  The function is optimized for size\n+rather than speed and on many targets it is placed into a special subsection\n+of the text section so all cold functions appear close together, improving\n+code locality of non-cold parts of program.  The paths leading to calls of\n+cold functions within code are considered to be cold too.\n+\n+@smallexample\n+@@cold int func();\n+@end smallexample\n+\n+@item @@(gcc.attributes.flatten)\n+@cindex @code{flatten} function attribute\n+\n+The @code{@@flatten} attribute is used to inform the compiler that every call\n+inside this function should be inlined, if possible.  Functions declared with\n+attribute @code{@@noinline} and similar are not inlined.\n+\n+@smallexample\n+@@flatten int func();\n+@end smallexample\n+\n+@item @@(gcc.attributes.no_icf)\n+@cindex @code{no_icf} function attribute\n+\n+The @code{@@no_icf} attribute prevents a function from being merged with\n+another semantically equivalent function.\n+\n+@smallexample\n+@@no_icf int func();\n+@end smallexample\n+\n+@item @@(gcc.attributes.no_sanitize (\"@var{sanitize_option}\"))\n+@cindex @code{no_sanitize} function attribute\n+\n+The @code{@@no_sanitize} attribute on functions is used to inform the compiler\n+that it should not do sanitization of any option mentioned in\n+@var{sanitize_option}.  A list of values acceptable by the @option{-fsanitize}\n+option can be provided.\n+\n+@smallexample\n+@@no_sanitize(\"alignment\", \"object-size\") void func1() @{ @}\n+@@no_sanitize(\"alignment,object-size\") void func2() @{ @}\n+@end smallexample\n+\n+@item @@(gcc.attributes.noclone)\n+@cindex @code{noclone} function attribute\n+\n+The @code{@@noclone} attribute prevents a function from being considered for\n+cloning - a mechanism that produces specialized copies of functions and which\n+is (currently) performed by interprocedural constant propagation.\n+\n+@smallexample\n+@@noclone int func();\n+@end smallexample\n+\n+@item @@(gcc.attributes.noinline)\n+@cindex @code{noinline} function attribute\n+\n+The @code{@@noinline} attribute prevents a function from being considered for\n+inlining.  If the function does not have side effects, there are optimizations\n+other than inlining that cause function calls to be optimized away, although\n+the function call is live.  To keep such calls from being optimized away, put\n+@code{asm @{ \"\"; @}} in the called function, to serve as a special side effect.\n+\n+@smallexample\n+@@noinline int func();\n+@end smallexample\n+\n+@item @@(gcc.attributes.noipa)\n+@cindex @code{noipa} function attribute\n+\n+The @code{@@noipa} attribute disables interprocedural optimizations between the\n+function with this attribute and its callers, as if the body of the function is\n+not available when optimizing callers and the callers are unavailable when\n+optimizing the body.  This attribute implies @code{@@noinline},\n+@code{@@noclone}, and @code{@@no_icf} attributes.  However, this attribute is\n+not equivalent to a combination of other attributes, because its purpose is to\n+suppress existing and future optimizations employing interprocedural analysis,\n+including those that do not have an attribute suitable for disabling them\n+individually.\n+\n+This attribute is supported mainly for the purpose of testing the compiler.\n+\n+@smallexample\n+@@noipa int func();\n+@end smallexample\n+\n+@item @@(gcc.attributes.noplt)\n+@cindex @code{noplt} function attribute\n+\n+The @code{@@noplt} attribute is the counterpart to option @option{-fno-plt}.\n+Calls to functions marked with this attribute in position-independent code do\n+not use the PLT in position-independent code.\n+\n+In position-dependant code, a few targets also convert call to functions that\n+are marked to not use the PLT to use the GOT instead.\n+\n+@smallexample\n+@@noplt int func();\n+@end smallexample\n+\n+@item @@(gcc.attributes.optimize (@var{arguments}))\n+@cindex @code{optimize} function attribute\n+\n+The @code{@@optimize} attribute is used to specify that a function is to be\n+compiled with different optimization options than specified on the command\n+line.  Valid @var{arguments} are constant non-negative integers and strings.\n+Multiple arguments can be provided, separated by commas to specify multiple\n+options.  Each numeric argument specifies an optimization level.  Each string\n+argument that begins with the letter @code{O} refers to an optimization option\n+such as @option{-O0} or @option{-Os}.  Other options are taken as suffixes to\n+the @code{-f} prefix jointly forming the name of an optimization option.\n+\n+Not every optimization option that starts with the @code{-f} prefix\n+specified by the attribute necessarily has an effect on the function.\n+The @code{@@optimize} attribute should be used for debugging purposes only.\n+It is not suitable in production code.\n+\n+@smallexample\n+@@optimize(2) double fn0(double x);\n+@@optimize(\"2\") double fn1(double x);\n+@@optimize(\"s\") double fn2(double x);\n+@@optimize(\"Ofast\") double fn3(double x);\n+@@optimize(\"-O2\") double fn4(double x);\n+@@optimize(\"tree-vectorize\") double fn5(double x);\n+@@optimize(\"-ftree-vectorize\") double fn6(double x);\n+@@optimize(\"no-finite-math-only\", 3) double fn7(double x);\n+@end smallexample\n+\n+@item @@(gcc.attributes.register (\"@var{registerName}\"))\n+@cindex @code{register} variable attribute\n+\n+The @code{@@register} attribute specifies that a local or @code{__gshared}\n+variable is to be given a register storage-class in the C99 sense of the term,\n+and will be placed into a register named @var{registerName}.\n+\n+The variable needs to boiled down to a data type that fits the target register.\n+It also cannot have either thread-local or @code{extern} storage.  It is an\n+error to take the address of a register variable.\n+\n+@smallexample\n+@@register(\"ebx\") __gshared int ebx = void;\n+void func() @{ @@register(\"r10\") long r10 = 0x2a; @}\n+@end smallexample\n+\n+@item @@(gcc.attributes.restrict)\n+@cindex @code{restrict} parameter attribute\n+\n+The @code{@@restrict} attribute specifies that a function parameter is to be\n+restrict-qualified in the C99 sense of the term.  The parameter needs to boil\n+down to either a pointer or reference type, such as a D pointer, class\n+reference, or a @code{ref} parameter.\n+\n+@smallexample\n+void func(@@restrict ref const float[16] array);\n+@end smallexample\n+\n+@item @@(gcc.attributes.section (\"@var{sectionName}\"))\n+@cindex @code{section} function attribute\n+@cindex @code{section} variable attribute\n+\n+The @code{@@section} attribute specifies that a function or variable lives in a\n+particular section.  For when you need certain particular functions to appear\n+in special sections.\n+\n+Some file formats do not support arbitrary sections so the section attribute is\n+not available on all platforms.  If you need to map the entire contents of a\n+module to a particular section, consider using the facilities of the linker\n+instead.\n+\n+@smallexample\n+@@section(\"bar\") extern void func();\n+@@section(\"stack\") ubyte[10000] stack;\n+@end smallexample\n+\n+@item @@(gcc.attributes.simd)\n+@cindex @code{simd} function attribute\n+\n+The @code{@@simd} attribute enables creation of one or more function versions\n+that can process multiple arguments using SIMD instructions from a single\n+invocation.  Specifying this attribute allows compiler to assume that such\n+versions are available at link time (provided in the same or another module).\n+Generated versions are target-dependent and described in the corresponding\n+Vector ABI document.\n+\n+@smallexample\n+@@simd double sqrt(double x);\n+@end smallexample\n+\n+@item @@(gcc.attributes.simd_clones (\"@var{mask}\"))\n+@cindex @code{simd_clones} function attribute\n+\n+The @code{@@simd_clones} attribute is the same as @code{@@simd}, but also\n+includes a @var{mask} argument.  Valid masks values are @code{notinbranch} or\n+@code{inbranch}, and instructs the compiler to generate non-masked or masked\n+clones correspondingly.\n+\n+@smallexample\n+@@simd_clones(\"notinbranch\") double atan2(double y, double x);\n+@end smallexample\n+\n+@item @@(gcc.attributes.symver (\"@var{arguments}\"))\n+@cindex @code{symver} function attribute\n+\n+The @code{@@symver} attribute creates a symbol version on ELF targets.\n+The syntax of the string parameter is @code{\"@var{name}@@@var{nodename}\"}.\n+The @var{name} part of the parameter is the actual name of the symbol by which\n+it will be externally referenced.  The @var{nodename} portion should be the\n+name of a node specified in the version script supplied to the linker when\n+building a shared library.  Versioned symbol must be defined and must be\n+exported with default visibility.\n+\n+Finally if the parameter is @code{\"@var{name}@@@@@var{nodename}\"} then in\n+addition to creating a symbol version (as if\n+@code{\"@var{name}@@@var{nodename}\"} was used) the version will be also used to\n+resolve @var{name} by the linker.\n+\n+@smallexample\n+@@symver(\"foo@@VERS_1\") int foo_v1();\n+@end smallexample\n+\n+@item @@(gcc.attributes.target (\"@var{options}\"))\n+@cindex @code{target} function attribute\n+\n+The @code{@@target} attribute is used to specify that a function is to be\n+compiled with different target options than specified on the command line.  One\n+or more strings can be provided as arguments, separated by commas to specify\n+multiple options.  Each string consists of one or more comma-separated suffixes\n+to the @option{-m} prefix jointly forming the name of a machine-dependent\n+option.\n+\n+The target attribute can be used for instance to have a function compiled with\n+a different ISA (instruction set architecture) than the default.\n+\n+The options supported are specific to each target.\n+\n+@smallexample\n+@@target(\"arch=core2\") void core2_func();\n+@@target(\"sse3\") void sse3_func();\n+@end smallexample\n+\n+@item @@(gcc.attributes.target_clones (\"@var{options}\"))\n+@cindex @code{target_clones} function attribute\n+\n+The @code{@@target_clones} attribute is used to specify that a function be\n+cloned into multiple versions compiled with different target @var{options} than\n+specified on the command line.  The supported options and restrictions are the\n+same as for @code{@@target} attribute.\n+\n+It also creates a resolver function that dynamically selects a clone suitable\n+for current architecture.  The resolver is created only if there is a usage of\n+a function with @code{@@target_clones} attribute.\n+\n+@smallexample\n+@@target_clones(\"sse4.1,avx,default\") double func(double x);\n+@end smallexample\n+\n+@item @@(gcc.attributes.used)\n+@cindex @code{used} function attribute\n+@cindex @code{used} variable attribute\n+\n+The @code{@@used} attribute, annotated to a function or variable, means that\n+code must be emitted for the function even if it appears that the function is\n+not referenced.  This is useful, for example, when the function is referenced\n+only in inline assembly.\n+\n+@smallexample\n+@@used __gshared int var = 0x1000;\n+@end smallexample\n+\n+@item @@(gcc.attributes.visibility (\"@var{visibilityName}\"))\n+@cindex @code{visibility} function attribute\n+@cindex @code{visibility} variable attribute\n+\n+The @code{@@visibility} attribute affects the linkage of the declaration to\n+which it is attached.  It can be applied to variables, types, and functions.\n+\n+There are four supported visibility_type values: @code{default}, @code{hidden},\n+@code{protected}, or @code{internal} visibility.\n+\n+@smallexample\n+@@visibility(\"protected\") void func() @{  @}\n+@end smallexample\n+\n+@item @@(gcc.attributes.weak)\n+@cindex @code{weak} function attribute\n+@cindex @code{weak} variable attribute\n+\n+The @code{@@weak} attribute causes a declaration of an external symbol to be\n+emitted as a weak symbol rather than a global.  This is primarily useful in\n+defining library functions that can be overridden in user code, though it can\n+also be used with non-function declarations.  The overriding symbol must have\n+the same type as the weak symbol.  In addition, if it designates a variable it\n+must also have the same size and alignment as the weak symbol.\n+\n+Weak symbols are supported for ELF targets, and also for a.out targets when\n+using the GNU assembler and linker.\n+\n+@smallexample\n+@@weak int func() @{ return 1; @}\n+@end smallexample\n+\n+@end table\n+\n+@c --------------------------------------------------------\n+\n+@node Other Attributes\n+@subsection Other Attributes\n+\n+The following attributes are defined for compatibility with other compilers.\n+\n+@table @code\n+\n+@item @@(gcc.attributes.allocSize (@var{sizeArgIdx}))\n+@itemx @@(gcc.attributes.allocSize (@var{sizeArgIdx}, @var{numArgIdx}))\n+@item @@(gcc.attributes.allocSize (@var{sizeArgIdx}))\n+@cindex @code{allocSize} function attribute\n+\n+These attributes are a synonym for\n+@code{@@alloc_size(@var{sizeArgIdx}, @var{numArgIdx}, true)}.\n+Unlike @code{@@alloc_size}, it uses 0-based index of the function arguments.\n+\n+@item @@(gcc.attributes.assumeUsed)\n+@cindex @code{assumeUsed} function attribute\n+@cindex @code{assumeUsed} variable attribute\n+\n+This attribute is a synonym for @code{@@used}.\n+\n+@item @@(gcc.attributes.dynamicCompile)\n+@itemx @@(gcc.attributes.dynamicCompileConst)\n+@itemx @@(gcc.attributes.dynamicCompileEmit)\n+@cindex @code{dynamicCompile} function attribute\n+\n+These attributes are accepted, but have no effect.\n+\n+@item @@(gcc.attributes.fastmath)\n+@cindex @code{fastmath} function attribute\n+\n+This attribute is a synonym for @code{@@optimize(\"Ofast\")}.  Explicitly sets\n+\"fast-math\" for a function, enabling aggressive math optimizations.\n+\n+@item @@(gcc.attributes.hidden)\n+@cindex @code{hidden} function attribute\n+@cindex @code{hidden} variable attribute\n+\n+This attribute is a synonym for @code{@@visibility(\"hidden\")}.  Sets the\n+visibility of a function or global variable to \"hidden\".\n+\n+@item @@(gcc.attributes.naked)\n+@cindex @code{naked} function attribute\n+\n+This attribute is a synonym for @code{@@attribute(\"naked\")}.  Adds GCC's\n+\"naked\" attribute to a function, disabling function prologue / epilogue\n+emission.  Intended to be used in combination with basic @code{asm} statements.\n+While using extended @code{asm} or a mixture of basic @code{asm} and D code may\n+appear to work, they cannot be depended upon to work reliably and are not\n+supported.\n+\n+@item @@(gcc.attributes.noSanitize (\"@var{sanitize_option}\"))\n+@cindex @code{noSanitize} function attribute\n+\n+This attribute is a synonym for @code{@@no_sanitize(\"sanitize_option\")}.\n+\n+\n+@item @@(gcc.attributes.optStrategy (\"@var{strategy}\"))\n+@cindex @code{optStrategy} function attribute\n+\n+This attribute is a synonym for @code{@@optimize(\"O0\")} and\n+@code{@@optimize(\"Os\")}.  Sets the optimization strategy for a function.  Valid\n+strategies are \"none\", \"optsize\", \"minsize\".  The strategies are mutually\n+exclusive.\n+\n+@item @@(gcc.attributes.polly)\n+\n+This attribute is a synonym for\n+@code{@@optimize(\"loop-parallelize-all\", \"loop-nest-optimize\")}.\n+Only effective when GDC was built with ISL included.\n+\n+@end table\n+\n+@c --------------------------------------------------------\n+\n+@node Target Attributes\n+@subsection Target-specific Attributes\n+\n+Many targets have their own target-specific attributes.  These are also exposed\n+via the @code{gcc.attributes} module with use of the generic\n+@code{@@(gcc.attributes.attribute)} UDA function.\n+\n+@xref{Attribute Syntax}, for details of the exact syntax for using attributes.\n+\n+See the function and variable attribute documentation in the GCC manual for\n+more information about what attributes are available on each target.\n+\n+Examples of using x86-specific target attributes are shown as follows:\n+\n+@smallexample\n+import gcc.attributes;\n+\n+@@attribute(\"cdecl\")\n+@@attribute(\"fastcall\")\n+@@attribute(\"ms_abi\")\n+@@attribute(\"sysv_abi\")\n+@@attribute(\"callee_pop_aggregate_return\", 1)\n+@@attribute(\"ms_hook_prologue\")\n+@@attribute(\"naked\")\n+@@attribute(\"regparm\", 2)\n+@@attribute(\"sseregparm\")\n+@@attribute(\"force_align_arg_pointer\")\n+@@attribute(\"stdcall\")\n+@@attribute(\"no_caller_saved_registers\")\n+@@attribute(\"interrupt\")\n+@@attribute(\"indirect_branch\", \"thunk\")\n+@@attribute(\"function_return\", \"keep\"))\n+@@attribute(\"nocf_check\")\n+@@attribute(\"cf_check\")\n+@@attribute(\"indirect_return\")\n+@@attribute(\"fentry_name\", \"nop\")\n+@@attribute(\"fentry_section\", \"__entry_loc\")\n+@@attribute(\"nodirect_extern_access\")\n+\n+@end smallexample\n+\n+\n+@c --------------------------------------------------------\n+\n+@node Builtin Functions\n+@section Built-in Functions\n+@cindex built-in functions\n+\n+GCC provides a large number of built-in functions that are made available in\n+GNU D by importing the @code{gcc.builtins} module.  Declarations in this module\n+are automatically created by the compiler.  All declarations start with\n+@code{__builtin_}.  Refer to the built-in function documentation in the GCC\n+manual for a full list of functions that are available.\n+\n+@menu\n+* Builtin Types::\n+* Query Builtins::\n+* Other Builtins::\n+@end menu\n+\n+@c --------------------------------------------------------\n+\n+@node Builtin Types\n+@subsection Built-in Types\n+@cindex built-in types\n+\n+In addition to built-in functions, the following types are defined in the\n+@code{gcc.builtins} module.\n+\n+@table @code\n+@item ___builtin_clong\n+The D equivalent of the target's C @code{long} type.\n+\n+@item ___builtin_clonglong\n+The D equivalent of the target's C @code{long long} type.\n+\n+@item ___builtin_culong\n+The D equivalent of the target's C @code{unsigned long} type.\n+\n+@item ___builtin_culonglong\n+The D equivalent of the target's C @code{unsigned long long} type.\n+\n+@item ___builtin_machine_byte\n+Signed unit-sized integer type.\n+\n+@item ___builtin_machine_int\n+Signed word-sized integer type.\n+\n+@item ___builtin_machine_ubyte\n+Unsigned unit-sized integer type.\n+\n+@item ___builtin_machine_uint\n+Unsigned word-sized integer type.\n+\n+@item ___builtin_pointer_int\n+Signed pointer-sized integer type.\n+\n+@item ___builtin_pointer_uint\n+Unsigned pointer-sized integer type.\n+\n+@item ___builtin_unwind_int\n+The D equivalent of the target's C @code{_Unwind_Sword} type.\n+\n+@item ___builtin_unwind_uint\n+The D equivalent of the target's C @code{_Unwind_Word} type.\n+\n+@item ___builtin_va_list\n+The target's @code{va_list} type.\n+@end table\n+\n+@c --------------------------------------------------------\n+\n+@node Query Builtins\n+@subsection Querying Available Built-ins\n+@cindex built-in functions\n+\n+Not all of the functions are supported, and some target-specific functions may\n+only be available when compiling for a particular ISA.  One way of finding out\n+what is exposed by the built-ins module is by generating a D interface file.\n+Assuming you have no file @file{builtins.d}, the command\n+@smallexample\n+  echo \"module gcc.builtins;\" > builtins.d; gdc -H -fsyntax-only builtins.d\n+@end smallexample\n+@noindent\n+will save all built-in declarations to the file @file{builtins.di}.\n+\n+Another way to determine whether a specific built-in is available is by using\n+compile-time reflection.\n+@smallexample\n+enum X86_HAVE_SSE3 = __traits(compiles, __builtin_ia32_haddps);\n+enum X86_HAVE_SSSE3 = __traits(compiles, __builtin_ia32_pmulhrsw128);\n+enum X86_HAVE_SSE41 = __traits(compiles, __builtin_ia32_dpps);\n+enum X86_HAVE_SSE42 = __traits(compiles, __builtin_ia32_pcmpgtq);\n+enum X86_HAVE_AVX = __traits(compiles, __builtin_ia32_vbroadcastf128_pd256);\n+enum X86_HAVE_AVX2 = __traits(compiles, __builtin_ia32_gathersiv2df);\n+enum X86_HAVE_BMI2 = __traits(compiles, __builtin_ia32_pext_si);\n+@end smallexample\n+\n+@c --------------------------------------------------------\n+\n+@node Other Builtins\n+@subsection Other Built-in Functions\n+@cindex built-in functions\n+@opindex fno-builtin\n+\n+As well as built-ins being available from the @code{gcc.builtins} module, GNU D\n+will also recognize when an @code{extern(C)} library function is a GCC\n+built-in.  Many of these functions are only optimized in certain cases; if they\n+are not optimized in a particular case, a call to the library function is\n+emitted.  This optimization can be disabled with the @option{-fno-builtin}\n+option (@pxref{Runtime Options}).\n+\n+In the @code{core.stdc.complex} module, the functions\n+@code{cabs}, @code{cabsf}, @code{cabsl}, @code{cacos}, @code{cacosf},\n+@code{cacosh}, @code{cacoshf}, @code{cacoshl}, @code{cacosl}, @code{carg},\n+@code{cargf}, @code{cargl}, @code{casin}, @code{casinf}, @code{casinh},\n+@code{casinhf}, @code{casinhl}, @code{casinl}, @code{catan}, @code{catanf},\n+@code{catanh}, @code{catanhf}, @code{catanhl}, @code{catanl}, @code{ccos},\n+@code{ccosf}, @code{ccosh}, @code{ccoshf}, @code{ccoshl}, @code{ccosl},\n+@code{cexp}, @code{cexpf}, @code{cexpl}, @code{clog}, @code{clogf},\n+@code{clogl}, @code{conj}, @code{conjf}, @code{conjl}, @code{cpow},\n+@code{cpowf}, @code{cpowl}, @code{cproj}, @code{cprojf}, @code{cprojl},\n+@code{csin}, @code{csinf}, @code{csinh}, @code{csinhf}, @code{csinhl},\n+@code{csinl}, @code{csqrt}, @code{csqrtf}, @code{csqrtl}, @code{ctan},\n+@code{ctanf}, @code{ctanh}, @code{ctanhf}, @code{ctanhl}, @code{ctanl}\n+may be handled as built-in functions.  All these functions have corresponding\n+versions prefixed with @code{__builtin_} in the @code{gcc.builtins} module.\n+\n+In the @code{core.stdc.ctype} module, the functions\n+@code{isalnum}, @code{isalpha}, @code{isblank}, @code{iscntrl}, @code{isdigit},\n+@code{isgraph}, @code{islower}, @code{isprint}, @code{ispunct}, @code{isspace},\n+@code{isupper}, @code{isxdigit}, @code{tolower}, @code{toupper}\n+may be handled as built-in functions.  All these functions have corresponding\n+versions prefixed with @code{__builtin_} in the @code{gcc.builtins} module.\n+\n+In the @code{core.stdc.fenv} module, the functions\n+@code{feclearexcept}, @code{fegetenv}, @code{fegetexceptflag},\n+@code{fegetround}, @code{feholdexcept}, @code{feraiseexcept}, @code{fesetenv},\n+@code{fesetexceptflag}, @code{fesetround}, @code{fetestexcept},\n+@code{feupdateenv}\n+may be handled as built-in functions.  All these functions have corresponding\n+versions prefixed with @code{__builtin_} in the @code{gcc.builtins} module.\n+\n+In the @code{core.stdc.inttypes} module, the function @code{imaxabs} may be\n+handled as a built-in function.  All these functions have corresponding\n+versions prefixed with @code{__builtin_} in the @code{gcc.builtins} module.\n+\n+In the @code{core.stdc.math} module, the functions\n+@code{acos}, @code{acosf}, @code{acosh}, @code{acoshf}, @code{acoshl},\n+@code{acosl}, @code{asin}, @code{asinf}, @code{asinh}, @code{asinhf},\n+@code{asinhl}, @code{asinl}, @code{atan}, @code{atan2}, @code{atan2f},\n+@code{atan2l}, @code{atanf}, @code{atanh}, @code{atanhf}, @code{atanhl},\n+@code{atanl}, @code{cbrt}, @code{cbrtf}, @code{cbrtl}, @code{ceil},\n+@code{ceilf}, @code{ceill}, @code{copysign}, @code{copysignf},\n+@code{copysignl}, @code{cos}, @code{cosf}, @code{cosh}, @code{coshf},\n+@code{coshl}, @code{cosl}, @code{erf}, @code{erfc}, @code{erfcf}, @code{erfcl},\n+@code{erff}, @code{erfl}, @code{exp}, @code{exp2}, @code{exp2f}, @code{exp2l},\n+@code{expf}, @code{expl}, @code{expm1}, @code{expm1f}, @code{expm1l},\n+@code{fabs}, @code{fabsf}, @code{fabsl}, @code{fdim}, @code{fdimf},\n+@code{fdiml}, @code{floor}, @code{floorf}, @code{floorl}, @code{fma},\n+@code{fmaf}, @code{fmal}, @code{fmax}, @code{fmaxf}, @code{fmaxl}, @code{fmin},\n+@code{fminf}, @code{fminl}, @code{fmod}, @code{fmodf}, @code{fmodl},\n+@code{frexp}, @code{frexpf}, @code{frexpl}, @code{hypot}, @code{hypotf},\n+@code{hypotl}, @code{ilogb}, @code{ilogbf}, @code{ilogbl}, @code{isinf},\n+@code{isnan}, @code{ldexp}, @code{ldexpf}, @code{ldexpl}, @code{lgamma},\n+@code{lgammaf}, @code{lgammal}, @code{llrint}, @code{llrintf}, @code{llrintl},\n+@code{llround}, @code{llroundf}, @code{llroundl}, @code{log}, @code{log10},\n+@code{log10f}, @code{log10l}, @code{log1p}, @code{log1pf}, @code{log1pl},\n+@code{log2}, @code{log2f}, @code{log2l}, @code{logb}, @code{logbf},\n+@code{logbl}, @code{logf}, @code{logl}, @code{lrint}, @code{lrintf},\n+@code{lrintl}, @code{lround}, @code{lroundf}, @code{lroundl}, @code{modf},\n+@code{modff}, @code{modfl}, @code{nan}, @code{nanf}, @code{nanl},\n+@code{nearbyint}, @code{nearbyintf}, @code{nearbyintl}, @code{nextafter},\n+@code{nextafterf}, @code{nextafterl}, @code{nexttoward}, @code{nexttowardf},\n+@code{nexttowardl}, @code{pow}, @code{powf}, @code{powl}, @code{remainder},\n+@code{remainderf}, @code{remainderl}, @code{remquo}, @code{remquof},\n+@code{remquol}, @code{rint}, @code{rintf}, @code{rintl}, @code{round},\n+@code{roundf}, @code{roundl}, @code{scalbln}, @code{scalblnf}, @code{scalblnl},\n+@code{scalbn}, @code{scalbnf}, @code{scalbnl}, @code{signbit}, @code{sin},\n+@code{sinf}, @code{sinh}, @code{sinhf}, @code{sinhl}, @code{sinl}, @code{sqrt},\n+@code{sqrtf}, @code{sqrtl}, @code{tan}, @code{tanf}, @code{tanh}, @code{tanhf},\n+@code{tanhl}, @code{tanl}, @code{tgamma}, @code{tgammaf}, @code{tgammal},\n+@code{trunc}, @code{truncf}, @code{truncl}\n+may be handled as built-in functions.  All these functions have corresponding\n+versions prefixed with @code{__builtin_} in the @code{gcc.builtins} module.\n+\n+In the @code{core.stdc.stdio} module, the functions\n+@code{fprintf}, @code{fputc}, @code{fputc_unlocked}, @code{fputs},\n+@code{fwrite}, @code{printf}, @code{puts}, @code{snprintf}, @code{sprintf},\n+@code{vfprintf}, @code{vprintf}, @code{vsnprintf}, @code{vsprintf}\n+may be handled as built-in functions.  All these functions have corresponding\n+versions prefixed with @code{__builtin_} in the @code{gcc.builtins} module.\n+\n+In the @code{core.stdc.stdlib} module, the functions\n+@code{abort}, @code{abs}, @code{aligned_alloc}, @code{alloca}, @code{calloc},\n+@code{exit}, @code{_Exit}, @code{free}, @code{labs}, @code{llabs},\n+@code{malloc}, @code{realloc}\n+may be handled as built-in functions.  All these functions have corresponding\n+versions prefixed with @code{__builtin_} in the @code{gcc.builtins} module.\n+\n+In the @code{core.stdc.string} module, the functions\n+@code{memchr}, @code{memcmp}, @code{memcpy}, @code{memmove}, @code{memset},\n+@code{strcat}, @code{strchr}, @code{strcmp}, @code{strcpy}, @code{strcspn},\n+@code{strdup}, @code{strlen}, @code{strncat}, @code{strncmp}, @code{strncpy},\n+@code{strpbrk}, @code{strrchr}, @code{strspn}, @code{strstr}\n+may be handled as built-in functions.  All these functions have corresponding\n+versions prefixed with @code{__builtin_} in the @code{gcc.builtins} module.\n+\n+In the @code{core.stdc.time} module, the function @code{strftime} may be\n+handled as a built-in function.  All these functions have corresponding\n+versions prefixed with @code{__builtin_} in the @code{gcc.builtins} module.\n+\n+In the @code{core.stdc.wctype} module, the functions\n+@code{iswalnum}, @code{iswalpha}, @code{iswblank}, @code{iswcntrl},\n+@code{iswdigit}, @code{iswgraph}, @code{iswlower}, @code{iswprint},\n+@code{iswpunct}, @code{iswspace}, @code{iswupper}, @code{iswxdigit},\n+@code{towlower}, @code{towupper}\n+may be handled as built-in functions.  All these functions have corresponding\n+versions prefixed with @code{__builtin_} in the @code{gcc.builtins} module.\n+\n+Within the @code{core.sys} package for POSIX and platform definitions, the\n+functions\n+@code{putchar_unlocked}, @code{putc_unlocked}, @code{posix_memalign},\n+@code{ffs}, @code{strcasecmp}, @code{strncasecmp}, @code{stpcpy},\n+@code{stpncpy}, @code{strndup}, @code{strnlen}, @code{execl}, @code{execle},\n+@code{execlp}, @code{execv}, @code{execve}, @code{execvp}, @code{_exit},\n+@code{fork}\n+may be handled as built-in functions.  All these functions have corresponding\n+versions prefixed with @code{__builtin_} in the @code{gcc.builtins} module.\n+\n+\n+@c --------------------------------------------------------\n+\n+@node ImportC\n+@section Importing C Sources into D\n+@cindex importC\n+\n+ImportC is a C preprocessor and parser embedded into the GNU D implementation.\n+It enables direct importation of C files, without needing to manually prepare a\n+D file corresponding to the declarations in the C file.\n+\n+ImportC is an implementation of ISO/IEC 9899:2011, which will be referred to as\n+C11.  Prior versions, such as C99, C89, and K+R C, are not supported. \n+\n+Assuming you have no file @file{cstdio.c} or @file{main.d}, the commands\n+@smallexample\n+  cat > cstdio.c << @@EOC\n+  int printf(const char*, ...);\n+  @@EOC\n+  cat > main.d << @@EOD\n+  import cstdio;\n+  void main() @{ printf(\"Hello ImportC\\n\"); @}\n+  @@EOD\n+  gdc main.d -o main; ./main\n+@end smallexample\n+will generate a program which will print @samp{Hello ImportC}.\n+\n+ImportC does not have a preprocessor.  It is designed to compile C files after\n+they have been first run through the C preprocessor.  If the C file has a\n+@samp{.i} extension, the file is presumed to be already preprocessed.\n+Preprocessing can be run manually:\n+@smallexample\n+  gcc -E file.c > file.i\n+@end smallexample\n+\n+@noindent\n+ImportC collects all the @code{#define} macros from the preprocessor run when\n+it is run automatically. The macros that look like manifest constants, such as:\n+@smallexample\n+#define COLOR 0x123456\n+@end smallexample\n+are interpreted as D manifest constant declarations of the form:\n+@smallexample\n+enum COLOR = 0x123456;\n+@end smallexample\n+\n+@noindent\n+The variety of macros that can be interpreted as D declarations may be\n+expanded, but will never encompass all the metaprogramming uses of C macros. \n+\n+GNU D does not directly compile C files into modules that can be linked in with\n+D code to form an executable.  When given a source file with the suffix\n+@samp{.c}, the compiler driver program @command{gdc} instead runs the\n+subprogram @command{cc1}.\n+\n+@smallexample\n+gdc file1.d file2.c // d21 file1.d -o file1.s\n+                    // cc1 file2.c -o file2.s\n+                    // as file1.s -o file1.o\n+                    // as file2.s -o file2.o\n+                    // ld file1.o file2.o\n+@end smallexample\n+\n+\n+@c --------------------------------------------------------\n+\n+@node Inline Assembly\n+@section Inline Assembly\n+@cindex assembly language in D\n+\n+The @code{asm} keyword allows you to embed assembler instructions within D\n+code.  GNU D provides two forms of inline @code{asm} statements.  A @dfn{basic\n+@code{asm}} statement is one with no operands, while an @dfn{extended\n+@code{asm}} statement includes one or more operands.\n+\n+@example\n+asm @var{FunctionAttributes} @{\n+        @var{AssemblerInstruction} ;\n+@}\n+\n+asm @var{FunctionAttributes} @{\n+        @var{AssemblerTemplate}\n+         : @var{OutputOperands}\n+         @r{[} : @var{InputOperands}\n+         @r{[} : @var{Clobbers}\n+         @r{[} : @var{GotoLabels} @r{]} @r{]} @r{]} ;\n+@}\n+@end example\n+\n+@noindent\n+The extended form is preferred for mixing D and assembly language within a\n+function, but to include assembly language in a function declared with the\n+@code{naked} attribute you must use basic @code{asm}.\n+\n+@smallexample\n+uint incr (uint value)\n+@{\n+    uint result;\n+    asm @{ \"incl %0\"\n+          : \"=a\" (result)\n+          : \"a\" (value);\n+    @}\n+    return result;\n+@}\n+@end smallexample\n+\n+@noindent\n+Multiple assembler instructions can appear within an @code{asm} block, or the\n+instruction template can be a multi-line or concatenated string.  In both\n+cases, GCC's optimizers won't discard or move any instruction within the\n+statement block.\n+@smallexample\n+bool hasCPUID()\n+@{ \n+    uint flags = void;\n+    asm nothrow @@nogc @{\n+        \"pushfl\";\n+        \"pushfl\";\n+        \"xorl %0, (%%esp)\" :: \"i\" (0x00200000);\n+        \"popfl\";\n+        \"pushfl\";\n+        \"popl %0\" : \"=a\" (flags);\n+        \"xorl (%%esp), %0\" : \"=a\" (flags);\n+        \"popfl\";\n+    @}\n+    return (flags & 0x0020_0000) != 0;\n+@} \n+@end smallexample\n+\n+@noindent\n+The instruction templates for both basic and extended @code{asm} can be any\n+expression that can be evaluated at compile-time to a string, not just string\n+literals.\n+\n+@smallexample\n+uint invert(uint v)\n+@{\n+    uint result;\n+    asm @@safe @@nogc nothrow pure @{\n+        genAsmInsn(`invert`)\n+        : [res] `=r` (result)\n+        : [arg1] `r` (v);\n+    @}\n+    return result;\n+\n+@}\n+@end smallexample\n+\n+@noindent\n+The total number of input + output + goto operands is limited to 30.\n+\n+\n+@c --------------------------------------------------------\n+\n+@node Intrinsics\n+@section Intrinsics\n+@cindex intrinsics\n+\n+The D language specification itself does not define any intrinsics that a\n+compatible compiler must implement.  Rather, within the D core library there\n+are a number of modules that define primitives with generic implementations.\n+While the generic versions of these functions are computationally expensive\n+relative to the cost of the operation itself, compiler implementations are free\n+to recognize them and generate equivalent and faster code.\n+\n+The following are the kinds of intrinsics recognized by GNU D.\n+\n+@menu\n+* Bit Operation Intrinsics::\n+* Integer Overflow Intrinsics::\n+* Math Intrinsics::\n+* Variadic Intrinsics::\n+* Volatile Intrinsics::\n+* CTFE Intrinsics::\n+@end menu\n+\n+@c --------------------------------------------------------\n+\n+@node Bit Operation Intrinsics\n+@subsection Bit Operation Intrinsics\n+@cindex intrinsics, bitop\n+\n+The following functions are a collection of intrinsics that do bit-level\n+operations, available by importing the @code{core.bitop} module.\n+\n+Although most are named after x86 hardware instructions, it is not guaranteed\n+that they will result in generating equivalent assembly on x86.  If the\n+compiler determines there is a better way to get the same result in hardware,\n+then that will be used instead.\n+\n+@deftypefn {Function} {int} core.bitop.bsf (uint @var{v})\n+@deftypefnx {Function} {int} core.bitop.bsf (ulong @var{v})\n+\n+Scans the bits in @var{v} starting with bit @code{0}, looking for the first set\n+bit.  Returns the bit number of the first bit set.  The return value is\n+undefined if @var{v} is zero.\n+\n+This intrinsic is the same as the GCC built-in function @code{__builtin_ctz}.\n+@end deftypefn\n+\n+@deftypefn {Function} {int} core.bitop.bsr (uint @var{v})\n+@deftypefnx {Function} {int} core.bitop.bsr (ulong @var{v})\n+\n+Scans the bits in @var{v} from the most significant bit to the least\n+significant bit, looking for the first set bit.  Returns the bit number of the\n+first bit set.  The return value is undefined if @var{v} is zero.\n+\n+This intrinsic is equivalent to writing the following:\n+@smallexample\n+result = __builtin_clz(v) ^ (v.sizeof * 8 - 1)\n+@end smallexample\n+@end deftypefn\n+\n+@deftypefn {Function} {int} core.bitop.bt (scope const(uint*) @var{p}, uint @var{bitnum})\n+@deftypefnx {Function} {int} core.bitop.bt (scope const(uint*) @var{p}, uint @var{bitnum})\n+\n+Tests the bit @var{bitnum} in the input parameter @var{p}.  Returns a non-zero\n+value if the bit was set, and a zero if it was clear.\n+\n+This intrinsic is equivalent to writing the following:\n+@smallexample\n+immutable bits_per_unit = (*p).sizeof * 8;\n+immutable bit_mask = size_t(1) << (bitnum % bits_per_unit);\n+\n+result = (p[bitnum / bits_per_unit] & bit_mask) != 0;\n+@end smallexample\n+@end deftypefn\n+\n+@deftypefn {Function} {int} core.bitop.btc (uint* @var{p}, uint @var{bitnum})\n+@deftypefnx {Function} {int} core.bitop.btc (ulong* @var{p}, ulong @var{bitnum})\n+\n+Tests and complements the bit @var{bitnum} in the input parameter @var{p}.\n+Returns a non-zero value if the bit was set, and a zero if it was clear.\n+\n+This intrinsic is equivalent to writing the following:\n+@smallexample\n+immutable bits_per_unit = (*p).sizeof * 8;\n+immutable bit_mask = size_t(1) << (bitnum % bits_per_unit);\n+\n+result = (p[bitnum / bits_per_unit] & bit_mask) != 0;\n+\n+p[bitnum / bits_per_unit] ^= bit_mask;\n+@end smallexample\n+@end deftypefn\n+\n+@deftypefn {Function} {int} core.bitop.btr (uint* @var{p}, uint @var{bitnum})\n+@deftypefnx {Function} {int} core.bitop.btr (ulong* @var{p}, ulong @var{bitnum})\n+\n+Tests and resets (sets to 0) the bit @var{bitnum} in the input parameter\n+@var{p}.  Returns a non-zero value if the bit was set, and a zero if it was\n+clear.\n+\n+This intrinsic is equivalent to writing the following:\n+@smallexample\n+immutable bits_per_unit = (*p).sizeof * 8;\n+immutable bit_mask = size_t(1) << (bitnum % bits_per_unit);\n+\n+result = (p[bitnum / bits_per_unit] & bit_mask) != 0;\n+\n+p[bitnum / bits_per_unit] &= ~bit_mask;\n+@end smallexample\n+@end deftypefn\n+\n+@deftypefn {Function} {int} core.bitop.bts (uint* @var{p}, uint @var{bitnum})\n+@deftypefnx {Function} {int} core.bitop.bts (ulong* @var{p}, ulong @var{bitnum})\n+\n+Tests and sets the bit @var{bitnum} in the input parameter @var{p}.  Returns a\n+non-zero value if the bit was set, and a zero if it was clear.\n+\n+This intrinsic is equivalent to writing the following:\n+@smallexample\n+immutable bits_per_unit = (*p).sizeof * 8;\n+immutable bit_mask = size_t(1) << (bitnum % bits_per_unit);\n+\n+result = (p[bitnum / bits_per_unit] & bit_mask) != 0;\n+\n+p[bitnum / bits_per_unit] |= bit_mask;\n+@end smallexample\n+@end deftypefn\n+\n+\n+@deftypefn {Function} {ushort} core.bitop.byteswap (ushort @var{x})\n+@deftypefnx {Function} {uint} core.bitop.bswap (uint @var{x})\n+@deftypefnx {Function} {ulong} core.bitop.bswap (ulong @var{x})\n+\n+Swaps the bytes in @var{x} end-to-end; for example, in a 4-byte @code{uint},\n+byte @code{0} becomes byte @code{3}, byte @code{1} becomes byte @code{2}, etc.\n+\n+This intrinsic is the same as the GCC built-in function @code{__builtin_bswap}.\n+@end deftypefn\n+\n+@deftypefn {Function} {int} core.bitop.popcnt (uint @var{x})\n+@deftypefnx {Function} {int} core.bitop.popcnt (ulong @var{x})\n+\n+Calculates the number of set bits in @var{x}.\n+\n+This intrinsic is the same as the GCC built-in function\n+@code{__builtin_popcount}.\n+@end deftypefn\n+\n+@deftypefn {Template} {T} core.bitop.rol (T)(const T @var{value}, const uint @var{count})\n+@deftypefnx {Template} {T} core.bitop.rol (uint @var{count}, T)(const T @var{value})\n+\n+Bitwise rotate @var{value} left by @var{count} bit positions.\n+\n+This intrinsic is equivalent to writing the following:\n+@smallexample\n+result = cast(T) ((value << count) | (value >> (T.sizeof * 8 - count)));\n+@end smallexample\n+@end deftypefn\n+\n+@deftypefn {Template} {T} core.bitop.ror (T)(const T @var{value}, const uint @var{count})\n+@deftypefnx {Template} {T} core.bitop.ror (uint @var{count}, T)(const T @var{value})\n+\n+Bitwise rotate @var{value} right by @var{count} bit positions.\n+\n+This intrinsic is equivalent to writing the following:\n+@smallexample\n+result = cast(T) ((value >> count) | (value << (T.sizeof * 8 - count)));\n+@end smallexample\n+@end deftypefn\n+\n+@c --------------------------------------------------------\n+\n+@node Integer Overflow Intrinsics\n+@subsection Integer Overflow Intrinsics\n+@cindex intrinsics, checkedint\n+\n+The following functions are a collection of intrinsics that implement integral\n+arithmetic primitives that check for out-of-range results, available by\n+importing the @code{core.checkedint} module.\n+\n+In all intrinsics, the overflow is sticky, meaning a sequence of operations can\n+be done and overflow need only be checked at the end.\n+\n+@deftypefn {Function} {int} core.checkedint.adds (int @var{x}, int @var{y}, @\n+                                                  ref bool @var{overflow})\n+@deftypefnx {Function} {long} core.checkedint.adds (long @var{x}, long @var{y}, @\n+                                                    ref bool @var{overflow})\n+\n+Add two signed integers, checking for overflow.\n+\n+This intrinsic is the same as the GCC built-in function\n+@code{__builtin_sadd_overflow}.\n+@end deftypefn\n+\n+@deftypefn {Function} {int} core.checkedint.addu (int @var{x}, int @var{y}, @\n+                                                  ref bool @var{overflow})\n+@deftypefnx {Function} {long} core.checkedint.addu (long @var{x}, long @var{y}, @\n+                                                    ref bool @var{overflow})\n+\n+Add two unsigned integers, checking for overflow.\n+\n+This intrinsic is the same as the GCC built-in function\n+@code{__builtin_uadd_overflow}.\n+@end deftypefn\n+\n+@deftypefn {Function} {int} core.checkedint.muls (int @var{x}, int @var{y}, @\n+                                                  ref bool @var{overflow})\n+@deftypefnx {Function} {long} core.checkedint.muls (long @var{x}, long @var{y}, @\n+                                                    ref bool @var{overflow})\n+\n+Multiply two signed integers, checking for overflow.\n+\n+This intrinsic is the same as the GCC built-in function\n+@code{__builtin_smul_overflow}.\n+@end deftypefn\n+\n+@deftypefn {Function} {int} core.checkedint.mulu (int @var{x}, int @var{y}, @\n+                                                  ref bool @var{overflow})\n+@deftypefnx {Function} {long} core.checkedint.mulu (long @var{x}, long @var{y}, @\n+                                                    ref bool @var{overflow})\n+\n+Multiply two unsigned integers, checking for overflow.\n+\n+This intrinsic is the same as the GCC built-in function\n+@code{__builtin_umul_overflow}.\n+@end deftypefn\n+\n+@deftypefn {Function} {int} core.checkedint.negs (int @var{x}, @\n+                                                  ref bool @var{overflow})\n+@deftypefnx {Function} {long} core.checkedint.negs (long @var{x}, @\n+                                                    ref bool @var{overflow})\n+\n+Negates an integer.\n+\n+This intrinsic is equivalent to writing the following:\n+@smallexample\n+result = __builtin_ssub (0, x, overflow);\n+@end smallexample\n+@end deftypefn\n+\n+@deftypefn {Function} {int} core.checkedint.subs (int @var{x}, int @var{y}, @\n+                                                  ref bool @var{overflow})\n+@deftypefnx {Function} {long} core.checkedint.subs (long @var{x}, long @var{y}, @\n+                                                    ref bool @var{overflow})\n+\n+Substract two signed integers, checking for overflow.\n+\n+This intrinsic is the same as the GCC built-in function\n+@code{__builtin_ssub_overflow}.\n+@end deftypefn\n+\n+@deftypefn {Function} {int} core.checkedint.subu (int @var{x}, int @var{y}, @\n+                                                  ref bool @var{overflow})\n+@deftypefnx {Function} {long} core.checkedint.subu (long @var{x}, long @var{y}, @\n+                                                    ref bool @var{overflow})\n+\n+Substract two unsigned integers, checking for overflow.\n+\n+This intrinsic is the same as the GCC built-in function\n+@code{__builtin_usub_overflow}.\n+@end deftypefn\n+\n+@c --------------------------------------------------------\n+\n+@node Math Intrinsics\n+@subsection Math Intrinsics\n+@cindex intrinsics, math\n+\n+The following functions are a collection of mathematical intrinsics, available\n+by importing the @code{core.math} module.\n+\n+@deftypefn {Function} {float} core.math.cos (float x)\n+@deftypefnx {Function} {double} core.math.cos (double x)\n+@deftypefnx {Function} {real} core.math.cos (real x)\n+\n+Returns cosine of @var{x}, where @var{x} is in radians.  The return value is\n+undefined if @var{x} is greater than @math{2^{64}}.\n+\n+This intrinsic is the same as the GCC built-in function @code{__builtin_cos}.\n+@end deftypefn\n+\n+@deftypefn {Function} {float} core.math.fabs (float x)\n+@deftypefnx {Function} {double} core.math.fabs (double x)\n+@deftypefnx {Function} {real} core.math.fabs (real x)\n+\n+Compute the absolute value of @var{x}.\n+\n+This intrinsic is the same as the GCC built-in function @code{__builtin_fabs}.\n+@end deftypefn\n+\n+@deftypefn {Function} {float} core.math.ldexp (float n, int exp)\n+@deftypefnx {Function} {double} core.math.ldexp (double n, int exp)\n+@deftypefnx {Function} {real} core.math.ldexp (real n, int exp)\n+\n+Compute @math{n * 2^{exp}}.\n+\n+This intrinsic is the same as the GCC built-in function @code{__builtin_ldexp}.\n+@end deftypefn\n+\n+@deftypefn {Function} {float} core.math.rint (float x)\n+@deftypefnx {Function} {double} core.math.rint (double x)\n+@deftypefnx {Function} {real} core.math.rint (real x)\n+\n+Rounds @var{x} to the nearest integer value, using the current rounding mode.\n+If the return value is not equal to @var{x}, the @code{FE_INEXACT} exception is\n+raised. @code{nearbyint} performs the same operation, but does not set the\n+@code{FE_INEXACT} exception.\n+\n+This intrinsic is the same as the GCC built-in function @code{__builtin_rint}.\n+@end deftypefn\n+\n+@deftypefn {Function} {float} core.math.rndtol (float x)\n+@deftypefnx {Function} {double} core.math.rndtol (double x)\n+@deftypefnx {Function} {real} core.math.rndtol (real x)\n+\n+Returns @var{x} rounded to a long value using the current rounding mode.\n+If the integer value of @var{x} is greater than @code{long.max}, the result\n+is indeterminate.\n+\n+This intrinsic is the same as the GCC built-in function\n+@code{__builtin_llround}.\n+@end deftypefn\n+\n+@deftypefn {Function} {float} core.math.sin (float x)\n+@deftypefnx {Function} {double} core.math.sin (double x)\n+@deftypefnx {Function} {real} core.math.sin (real x)\n+\n+Returns sine of @var{x}, where @var{x} is in radians.  The return value is\n+undefined if @var{x} is greater than @math{2^{64}}.\n+\n+This intrinsic is the same as the GCC built-in function @code{__builtin_sin}.\n+@end deftypefn\n+\n+@deftypefn {Function} {float} core.math.sqrt (float x)\n+@deftypefnx {Function} {double} core.math.sqrt (double x)\n+@deftypefnx {Function} {real} core.math.sqrt (real x)\n+\n+Compute the sqrt of @var{x}.\n+\n+This intrinsic is the same as the GCC built-in function @code{__builtin_sqrt}.\n+@end deftypefn\n+\n+@deftypefn {Template} {T} core.math.toPrec (T)(float f)\n+@deftypefnx {Template} {T} core.math.toPrec (T)(double f)\n+@deftypefnx {Template} {T} core.math.toPrec (T)(real f)\n+\n+Round @var{f} to a specific precision.\n+\n+In floating-point operations, D language types specify only a minimum\n+precision, not a maximum.  The @code{toPrec} function forces rounding of the\n+argument @var{f} to the precision of the specified floating point type\n+@code{T}.  The rounding mode used is inevitably target-dependent, but will be\n+done in a way to maximize accuracy.  In most cases, the default is\n+round-to-nearest.\n+@end deftypefn\n+\n+@c --------------------------------------------------------\n+\n+@node Variadic Intrinsics\n+@subsection Variadic Intrinsics\n+@cindex intrinsics, stdarg\n+\n+The following functions are a collection of variadic intrinsics, available by\n+importing the @code{core.stdc.stdarg} module.\n+\n+@deftypefn {Template} {void} core.stdc.stdarg.va_arg (T)(ref va_list ap, ref T parmn)\n+\n+Retrieve and store in @var{parmn} the next value from the @code{va_list}\n+@var{ap} that is of type @code{T}.\n+\n+This intrinsic is equivalent to writing the following:\n+@smallexample\n+parmn = __builtin_va_arg (ap, T);\n+@end smallexample\n+@end deftypefn\n+\n+@deftypefn {Template} {T} core.stdc.stdarg.va_arg (T)(ref va_list ap)\n+\n+Retrieve and return the next value from the @code{va_list} @var{ap} that is of\n+type @code{T}.\n+\n+This intrinsic is equivalent to writing the following:\n+@smallexample\n+result = __builtin_va_arg (ap, T);\n+@end smallexample\n+@end deftypefn\n+\n+@deftypefn {Function} {void} core.stdc.stdarg.va_copy (out va_list dest, va_list src)\n+\n+Make a copy of @var{src} in its current state and store to @var{dest}.\n+\n+This intrinsic is the same as the GCC built-in function @code{__builtin_va_copy}.\n+@end deftypefn\n+\n+@deftypefn {Function} {void} core.stdc.stdarg.va_end (va_list ap)\n+\n+Destroy @var{ap} so that it is no longer useable.\n+\n+This intrinsic is the same as the GCC built-in function @code{__builtin_va_end}.\n+@end deftypefn\n+\n+@deftypefn {Template} {void} core.stdc.stdarg.va_start (T)(out va_list ap, ref T parmn)\n+\n+Initialize @var{ap} so that it can be used to access the variable arguments\n+that follow the named argument @var{parmn}.\n+\n+This intrinsic is the same as the GCC built-in function @code{__builtin_va_start}.\n+@end deftypefn\n+\n+@c --------------------------------------------------------\n+\n+@node Volatile Intrinsics\n+@subsection Volatile Intrinsics\n+@cindex intrinsics, volatile\n+\n+The following functions are a collection of intrinsics for volatile operations,\n+available by importing the @code{core.volatile} module.\n+\n+Calls to them are guaranteed to not be removed (as dead assignment elimination\n+or presumed to have no effect) or reordered in the same thread.\n+\n+These reordering guarantees are only made with regards to other operations done\n+through these functions; the compiler is free to reorder regular loads/stores\n+with regards to loads/stores done through these functions.\n+\n+This is useful when dealing with memory-mapped I/O (MMIO) where a store can\n+have an effect other than just writing a value, or where sequential loads with\n+no intervening stores can retrieve different values from the same location due\n+to external stores to the location.\n+\n+These functions will, when possible, do the load/store as a single operation.\n+In general, this is possible when the size of the operation is less than or\n+equal to @code{(void*).sizeof}, although some targets may support larger\n+operations.  If the load/store cannot be done as a single operation, multiple\n+smaller operations will be used.\n+\n+These are not to be conflated with atomic operations.  They do not guarantee\n+any atomicity.  This may be provided by coincidence as a result of the\n+instructions used on the target, but this should not be relied on for portable\n+programs.  Further, no memory fences are implied by these functions.  They\n+should not be used for communication between threads.  They may be used to\n+guarantee a write or read cycle occurs at a specified address.\n+\n+@deftypefn {Function} {ubyte} core.volatile.volatileLoad (ubyte* ptr)\n+@deftypefnx {Function} {ushort} core.volatile.volatileLoad (ushort* ptr)\n+@deftypefnx {Function} {uint} core.volatile.volatileLoad (uint* ptr)\n+@deftypefnx {Function} {ulong} core.volatile.volatileLoad (ulong* ptr)\n+\n+Read value from the memory location indicated by @var{ptr}.\n+@end deftypefn\n+\n+@deftypefn {Function} {ubyte} core.volatile.volatileStore (ubyte* ptr, ubyte value)\n+@deftypefnx {Function} {ushort} core.volatile.volatileStore (ushort* ptr, ushort value)\n+@deftypefnx {Function} {uint} core.volatile.volatileStore (uint* ptr, uint value)\n+@deftypefnx {Function} {ulong} core.volatile.volatileStore (ulong* ptr, ulong value)\n+\n+Write @var{value} to the memory location indicated by @var{ptr}.\n+@end deftypefn\n+\n+@c --------------------------------------------------------\n+\n+@node CTFE Intrinsics\n+@subsection CTFE Intrinsics\n+@cindex intrinsics, ctfe\n+\n+The following functions are only treated as intrinsics during compile-time\n+function execution (CTFE) phase of compilation to allow more functions to be\n+computable at compile-time, either because their generic implementations are\n+too complex, or do some low-level bit manipulation of floating point types.\n+\n+Calls to these functions that exist after CTFE has finished will get standard\n+code-generation without any special compiler intrinsic suppport.\n+\n+@deftypefn {Function} {float} std.math.exponential.exp (float x)\n+@deftypefnx {Function} {double} std.math.exponential.exp (double x)\n+@deftypefnx {Function} {real} std.math.exponential.exp (real x)\n+\n+Calculates @math{e^x}.\n+\n+This function is evaluated during CTFE as the GCC built-in function\n+@code{__builtin_exp}.\n+@end deftypefn\n+\n+@deftypefn {Function} {float} std.math.exponential.expm1 (float x)\n+@deftypefnx {Function} {double} std.math.exponential.expm1 (double x)\n+@deftypefnx {Function} {real} std.math.exponential.expm1 (real x)\n+\n+Calculates @math{e^x-1.0}.\n+\n+This function is evaluated during CTFE as the GCC built-in function\n+@code{__builtin_expm1}.\n+@end deftypefn\n+\n+@deftypefn {Function} {float} std.math.exponential.exp2 (float x)\n+@deftypefnx {Function} {double} std.math.exponential.exp2 (double x)\n+@deftypefnx {Function} {real} std.math.exponential.exp2 (real x)\n+\n+Calculates @math{2^x}.\n+\n+This function is evaluated during CTFE as the GCC built-in function\n+@code{__builtin_exp2}.\n+@end deftypefn\n+\n+@deftypefn {Function} {float} std.math.exponential.log (float x)\n+@deftypefnx {Function} {double} std.math.exponential.log (double x)\n+@deftypefnx {Function} {real} std.math.exponential.log (real x)\n+\n+Calculate the natural logarithm of @var{x}.\n+\n+This function is evaluated during CTFE as the GCC built-in function\n+@code{__builtin_log}.\n+@end deftypefn\n+\n+@deftypefn {Function} {float} std.math.exponential.log10 (float x)\n+@deftypefnx {Function} {double} std.math.exponential.log10 (double x)\n+@deftypefnx {Function} {real} std.math.exponential.log10 (real x)\n+\n+Calculates the base-10 logarithm of @var{x}.\n+\n+This function is evaluated during CTFE as the GCC built-in function\n+@code{__builtin_log10}.\n+@end deftypefn\n+\n+@deftypefn {Function} {float} std.math.exponential.log2 (float x)\n+@deftypefnx {Function} {double} std.math.exponential.log2 (double x)\n+@deftypefnx {Function} {real} std.math.exponential.log2 (real x)\n+\n+Calculates the base-2 logarithm of @var{x}.\n+\n+This function is evaluated during CTFE as the GCC built-in function\n+@code{__builtin_log2}.\n+@end deftypefn\n+\n+@deftypefn {Template} {Largest!(F, G)} std.math.exponential.pow (F, G) (F x, G y)\n+@deftypefnx {Template} {real} std.math.exponential.pow (I, F)(I x, F y)\n+\n+Calculates @math{x^y}, where @var{y} is a float.\n+\n+This function is evaluated during CTFE as the GCC built-in function\n+@code{__builtin_pow}.\n+@end deftypefn\n+\n+@deftypefn {Template} {F} std.math.exponential.pow (F, G) (F x, G n)\n+\n+Calculates @math{x^n}, where @var{n} is an integer.\n+\n+This function is evaluated during CTFE as the GCC built-in function\n+@code{__builtin_powi}.\n+@end deftypefn\n+\n+@deftypefn {Function} {real} std.math.operations.fma (real x, real y, real z)\n+\n+Returns @code{(x * y) + z}, rounding only once according to the current\n+rounding mode.\n+\n+This function is evaluated during CTFE as the GCC built-in function\n+@code{__builtin_fma}.\n+@end deftypefn\n+\n+@deftypefn {Template} {F} std.math.operations.fmax (F)(const F x, const F y)\n+\n+Returns the larger of @var{x} and @var{y}.\n+\n+This function is evaluated during CTFE as the GCC built-in function\n+@code{__builtin_fmax}.\n+@end deftypefn\n+\n+@deftypefn {Template} {F} std.math.operations.fmin (F)(const F x, const F y)\n+\n+Returns the smaller of @var{x} and @var{y}.\n+\n+This function is evaluated during CTFE as the GCC built-in function\n+@code{__builtin_fmin}.\n+@end deftypefn\n+\n+@deftypefn {Function} {float} std.math.rounding.ceil (float x)\n+@deftypefnx {Function} {double} std.math.rounding.ceil (double x)\n+@deftypefnx {Function} {real} std.math.rounding.ceil (real x)\n+\n+Returns the value of @var{x} rounded upward to the next integer (toward\n+positive infinity).\n+\n+This function is evaluated during CTFE as the GCC built-in function\n+@code{__builtin_ceil}.\n+@end deftypefn\n+\n+@deftypefn {Function} {float} std.math.rounding.floor (float x)\n+@deftypefnx {Function} {double} std.math.rounding.floor (double x)\n+@deftypefnx {Function} {real} std.math.rounding.floor (real x)\n+\n+Returns the value of @var{x} rounded downward to the next integer (toward\n+negative infinity).\n+\n+This function is evaluated during CTFE as the GCC built-in function\n+@code{__builtin_floor}.\n+@end deftypefn\n+\n+@deftypefn {Function} {real} std.math.rounding.round (real x)\n+\n+Return the value of @var{x} rounded to the nearest integer.  If the fractional\n+part of @var{x} is exactly 0.5, the return value is rounded away from zero.\n+\n+This function is evaluated during CTFE as the GCC built-in function\n+@code{__builtin_round}.\n+@end deftypefn\n+\n+@deftypefn {Function} {real} std.math.rounding.trunc (real x)\n+\n+Returns the integer portion of @var{x}, dropping the fractional portion.\n+\n+This function is evaluated during CTFE as the GCC built-in function\n+@code{__builtin_trunc}.\n+@end deftypefn\n+\n+@deftypefn {Template} {R} std.math.traits.copysign (R, X)(R to, X from)\n+\n+Returns a value composed of @var{to} with @var{from}'s sign bit.\n+\n+This function is evaluated during CTFE as the GCC built-in function\n+@code{__builtin_copysign}.\n+@end deftypefn\n+\n+@deftypefn {Template} {bool} std.math.traits.isFinite (X)(X x)\n+\n+Returns true if @var{x} is finite.\n+\n+This function is evaluated during CTFE as the GCC built-in function\n+@code{__builtin_isfinite}.\n+@end deftypefn\n+\n+@deftypefn {Template} {bool} std.math.traits.isInfinity (X)(X x)\n+\n+Returns true if @var{x} is infinite.\n+\n+This function is evaluated during CTFE as the GCC built-in function\n+@code{__builtin_isinf}.\n+@end deftypefn\n+\n+@deftypefn {Template} {bool} std.math.traits.isNaN (X)(X x)\n+\n+Returns true if @var{x} is NaN.\n+\n+This function is evaluated during CTFE as the GCC built-in function\n+@code{__builtin_isnan}.\n+@end deftypefn\n+\n+@deftypefn {Function} {float} std.math.trigoometry.tan (float x)\n+@deftypefnx {Function} {double} std.math.trigoometry.tan (double x)\n+@deftypefnx {Function} {real} std.math.trigonometry.tan (real x)\n+\n+Returns tangent of @var{x}, where @var{x} is in radians.\n+\n+This intrinsic is the same as the GCC built-in function @code{__builtin_tan}.\n+@end deftypefn\n+\n+\n+@c --------------------------------------------------------\n+\n+@node Predefined Pragmas\n+@section Predefined Pragmas\n+@cindex predefined pragmas\n+@cindex @code{pragma}\n+\n+The @code{@w{pragma}} operator is used as a way to pass special information to the\n+implementation and allow the addition of vendor specific extensions.  The\n+standard predefined pragmas are documented by the D language specification\n+hosted at @uref{https://dlang.org/spec/pragma.html#predefined-pragmas}.  A D\n+compiler must recognize, but is free to ignore any pragma in this list.\n+\n+Where a pragma is ignored, the GNU D compiler will emit a warning when the\n+@option{-Wunknown-pragmas} option is seen on the command-line.\n+\n+@table @code\n+@item pragma(crt_constructor)\n+@code{pragma(crt_constructor)} annotates a function so it is run after the C\n+runtime library is initialized and before the D runtime library is initialized.\n+Functions with this pragma must return @code{void}.\n+@smallexample\n+pragma(crt_constructor) void init() @{ @}\n+@end smallexample\n+\n+@item pragma(crt_destructor)\n+@code{pragma(crt_destructor)} annotates a function so it is run after the D\n+runtime library is terminated and before the C runtime library is terminated.\n+Calling @code{exit} function also causes the annotated functions to run.\n+Functions with this pragma must return @code{void}.\n+@smallexample\n+pragma(crt_destructor) void init() @{ @}\n+@end smallexample\n+\n+@item pragma(inline)\n+@itemx pragma(inline, false)\n+@itemx pragma(inline, true)\n+@code{pragma(inline)} affects whether functions are declared inlined or not.\n+The pragma takes two forms.  In the first form, inlining is controlled by the\n+command-line options for inlining.\n+\n+Functions annotated with @code{pragma(inline, false)} are marked uninlinable.\n+Functions annotated with @code{pragma(inline, true)} are always inlined.\n+\n+@item pragma(lib)\n+This pragma is accepted, but has no effect.\n+@smallexample\n+pragma(lib, \"advapi32\");\n+@end smallexample\n+\n+@item pragma(linkerDirective)\n+This pragma is accepted, but has no effect.\n+@smallexample\n+pragma(linkerDirective, \"/FAILIFMISMATCH:_ITERATOR_DEBUG_LEVEL=2\");\n+@end smallexample\n+\n+@item pragma(mangle)\n+@code{pragma(mangle, \"symbol_name\")} overrides the default mangling for a\n+function or variable symbol.  The symbol name can be any expression that must\n+evaluate at compile time to a string literal.  This enables linking to a symbol\n+which is a D keyword, since an identifier cannot be a keyword.\n+\n+Targets are free to apply a prefix to the user label of the symbol name in\n+assembly.  For example, on @code{x86_64-apple-darwin}, @samp{symbol_name} would\n+produce @samp{_symbol_name}.  If the mangle string begins with @samp{*}, then\n+@code{pragma(mangle)} will output the rest of the string unchanged.\n+\n+@smallexample\n+pragma(mangle, \"body\")\n+extern(C) void body_func();\n+\n+pragma(mangle, \"function\")\n+extern(C++) struct _function @{@}\n+@end smallexample\n+\n+@item pragma(msg)\n+@code{pragma(msg, \"message\")} causes the compiler to print an informational\n+message with the text @samp{message}.  The pragma accepts multiple arguments,\n+each to which is evaluated at compile time and then all are combined into one\n+concatenated message.\n+@smallexample\n+pragma(msg, \"compiling...\", 6, 1.0); // prints \"compiling...61.0\"\n+@end smallexample\n+\n+@item pragma(printf)\n+@itemx pragma(scanf)\n+\n+@code{pragma(printf)} and @code{pragma(scanf)} specifies that a function\n+declaration with @code{printf} or @code{scanf} style arguments that should be\n+type-checked against a format string. \n+\n+A printf-like or scanf-like function can either be an @code{extern(C)} or\n+@code{extern(C++)} function with a @var{format} parameter accepting a pointer\n+to a 0-terminated @code{char} string, immediately followed by either a\n+@code{...} variadic argument list or a parameter of type @code{va_list} as the\n+last parameter.\n+\n+@smallexample\n+extern(C):\n+pragma(printf)\n+int printf(scope const char* format, scope const ...);\n+\n+pragma(scanf)\n+int vscanf(scope const char* format, va_list arg);\n+@end smallexample\n+\n+@item pragma(startaddress)\n+This pragma is accepted, but has no effect.\n+@smallexample\n+void foo() @{ @}\n+pragma(startaddress, foo);\n+@end smallexample\n+\n+@end table\n+\n+\n+@c --------------------------------------------------------\n+\n+@node Predefined Versions\n+@section Predefined Versions\n+@cindex predefined versions\n+@cindex @code{version}\n+\n+Several conditional version identifiers are predefined; you use them without\n+supplying their definitions.  They fall into three classes: standard, common,\n+and target-specific.\n+\n+Predefined version identifiers from this list cannot be set from the command\n+line or from version statements.  This prevents things like both @code{Windows}\n+and @code{linux} being simultaneously set.\n+\n+@menu\n+* Standard Predefined Versions::\n+* Common Predefined Versions::\n+* Target Predefined Versions::\n+@end menu\n+\n+@c --------------------------------------------------------\n+\n+@node Standard Predefined Versions\n+@subsection Standard Predefined Versions\n+@cindex standard predefined versions\n+\n+The standard predefined versions are documented by the D language specification\n+hosted at @uref{https://dlang.org/spec/version.html#predefined-versions}.\n+\n+@table @code\n+@item all\n+@itemx none\n+Version @code{none} is never defined; used to just disable a section of code.\n+Version @code{all} is always defined; used as the opposite of @code{none}.\n+\n+@item BigEndian\n+@itemx LittleEndian\n+These versions reflect the byte order of multi-byte data in memory.\n+@code{LittleEndian} is set when the least significant byte is first.\n+@code{BigEndian} is set when the most significant byte is first.\n+\n+@item CRuntime_Bionic\n+@itemx CRuntime_Glibc\n+@itemx CRuntime_Microsoft\n+@itemx CRuntime_Musl\n+@itemx CRuntime_Newlib\n+@itemx CRuntime_UClibc\n+\n+These versions reflect which standard C library is being linked in.\n+@code{CRuntime_Bionic} is set when Bionic is the default C library.\n+@code{CRuntime_Glibc} is set when GLIBC is the default C library.\n+@code{CRuntime_Microsoft} is set when MSVCRT is the default C library.\n+@code{CRuntime_Musl} is set when musl is the default C library.\n+@code{CRuntime_Newlib} is set when Newlib is the default C library.\n+@code{CRuntime_UClibc} is set when uClibc is the default C library.\n+\n+@item CppRuntime_Gcc\n+This version is defined when the standard C++ library being linked in is @file{libstdc++}.\n+\n+@item D_BetterC\n+This version is defined when the standard D libraries are not being implicitly\n+linked in.  This also implies that features of the D language that rely on\n+exceptions, module information, or run-time type information are disabled as\n+well.  Enabled by @option{-fno-druntime}.\n+\n+@item D_Coverage\n+This version is defined when code coverage analysis instrumentation is being\n+generated.  Enabled by @option{-ftest-coverage}.\n+\n+@item D_Ddoc\n+This version is defined when Ddoc documentation is being generated.  Enabled by\n+@option{-fdoc}.\n+\n+@item D_Exceptions\n+This version is defined when exception handling is supported.  Disabled by\n+@option{-fno-exceptions}.\n+\n+@item D_HardFloat\n+@itemx D_SoftFloat\n+These versions reflect the floating-point ABI in use by the target.\n+@code{D_HardFloat} is set when the target hardware has a floating-point unit.\n+@code{D_SoftFloat} is set when the target hardware does not have a\n+floating-point unit.\n+\n+@item D_Invariants\n+This version is defined when checks are being emitted for class invariants and\n+struct invariants.  Enabled by @option{-finvariants}.\n+\n+@item D_LP64\n+This version is defined when pointers are 64-bits.  Not to be confused with\n+with C's @code{__LP64__} model.\n+\n+@item D_ModuleInfo\n+This version is defined when run-time module information (also known as\n+@code{ModuleInfo}) is supported.  Disabled by @option{-fno-moduleinfo}.\n+\n+@item D_NoBoundsChecks\n+This version is defined when array bounds checks are disabled.  Enabled by\n+@option{-fno-bounds-checks}.\n+\n+@item D_Optimized\n+This version is defined in all optimizing compilations.\n+\n+@item D_PIC\n+This version is defined when position-independent code is being generated.\n+Enabled by @option{-fPIC}.\n+\n+@item D_PIE\n+This version is defined when position-independent code that can be only linked\n+into executables is being generated.  Enabled by @option{-fPIE}.\n+\n+@item D_PreConditions\n+This version is defined when checks are being emitted for @code{in} contracts.\n+Disabled by @option{-fno-preconditions}.\n+\n+@item D_PostConditions\n+This version is defined when checks are being emitted for @code{out} contracts.\n+Disabled by @option{-fno-postconditions}.\n+\n+@item D_TypeInfo\n+This version is defined when run-time type information (also known as\n+@code{TypeInfo}) is supported.  Disabled by @option{-fno-rtti}.\n+\n+@item D_Version2\n+This version defined when this is a D version 2 compiler.\n+\n+@item unittest\n+This version is defined when the @code{unittest} code is being compiled in.\n+Enabled by @option{-funittest}.\n+\n+@end table\n+\n+@c --------------------------------------------------------\n+\n+@node Common Predefined Versions\n+@subsection Common Predefined Versions\n+@cindex common predefined versions\n+\n+The common predefined macros are GNU D extensions.  They are available\n+with the same meanings regardless of the machine or operating system on\n+which you are using GNU D.  Their names all start with @code{GNU}.\n+\n+@table @code\n+\n+@item GNU\n+This version is defined by the GNU D compiler.  If all you need to know is\n+whether or not your D program is being compiled by GDC, or a non-GDC compiler,\n+you can simply test @code{version(GNU)}.\n+\n+@item GNU_DWARF2_Exceptions\n+@itemx GNU_SEH_Exceptions\n+@itemx GNU_SjLj_Exceptions\n+These versions reflect the mechanism that will be used for exception handling\n+by the target.  @code{GNU_DWARF2_Exceptions} is defined when the target uses\n+DWARF 2 exceptions.  @code{GNU_SEH_Exceptions} is defined when the target uses\n+SEH exceptions.  @code{GNU_SjLj_Exceptions} is defined when the target uses the\n+@code{setjmp}/@code{longjmp}-based exception handling scheme.\n+\n+@item GNU_EMUTLS\n+This version is defined if the target does not support thread-local storage,\n+and an emulation layer is used instead.\n+\n+@item GNU_InlineAsm\n+This version is defined when @code{asm} statements use GNU D style syntax.\n+(@pxref{Inline Assembly})\n+\n+@item GNU_StackGrowsDown\n+This version is defined if pushing a word onto the stack moves the stack\n+pointer to a smaller address, and is undefined otherwise.\n+\n+@end table\n+\n+@c --------------------------------------------------------\n+\n+@node Target Predefined Versions\n+@subsection Target-specific Predefined Versions\n+@cindex target-specific predefined versions\n+\n+The D compiler normally predefines several versions that indicate what type of\n+system and machine is in use.  They are obviously different on each target\n+supported by GCC.\n+\n+@table @code\n+@item AArch64\n+Version relating to the AArch64 family of processors.\n+\n+@item Android\n+Version relating to the Android platform.\n+\n+@item ARM\n+@itemx ARM_HardFloat\n+@itemx ARM_SoftFloat\n+@itemx ARM_SoftFP\n+@itemx ARM_Thumb\n+Versions relating to the ARM family of processors.\n+\n+@item Cygwin\n+Version relating to the Cygwin environment.\n+\n+@item darwin\n+Deprecated; use @code{OSX} instead.\n+\n+@item DragonFlyBSD\n+Versions relating to DragonFlyBSD systems.\n+\n+@item FreeBSD\n+@item FreeBSD_9\n+@item FreeBSD_10\n+@item FreeBSD_11\n+@item FreeBSD_...\n+Versions relating to FreeBSD systems.  The FreeBSD major version number is\n+inferred from the target triplet.\n+\n+@item HPPA\n+@itemx HPPA64\n+Versions relating to the HPPA family of processors.\n+\n+@item Hurd\n+Version relating to GNU Hurd systems.\n+\n+@item linux\n+Version relating to Linux systems.\n+\n+@item MinGW\n+Version relating to the MinGW environment.\n+\n+@item MIPS32\n+@itemx MIPS64\n+@itemx MIPS_EABI\n+@itemx MIPS_HardFloat\n+@itemx MIPS_N32\n+@itemx MIPS_N64\n+@itemx MIPS_O32\n+@itemx MIPS_O64\n+@itemx MIPS_SoftFloat\n+Versions relating to the MIPS family of processors.\n+\n+@item NetBSD\n+Version relating to NetBSD systems.\n+\n+@item OpenBSD\n+Version relating to OpenBSD systems.\n+\n+@item OSX\n+Version relating to OSX systems.\n+\n+@item Posix\n+Version relating to POSIX systems (includes Linux, FreeBSD, OSX, Solaris, etc).\n+\n+@item PPC\n+@itemx PPC64\n+@itemx PPC_HardFloat\n+@itemx PPC_SoftFloat\n+Versions relating to the PowerPC family of processors.\n+\n+@item RISCV32\n+@itemx RISCV64\n+Versions relating to the RISC-V family of processors.\n+\n+@item S390\n+@itemx SystemZ\n+Versions relating to the S/390 and System Z family of processors.\n+\n+@item S390X\n+Deprecated; use @code{SystemZ} instead.\n+\n+@item Solaris\n+Versions relating to Solaris systems.\n+\n+@item SPARC\n+@itemx SPARC64\n+@itemx SPARC_HardFloat\n+@itemx SPARC_SoftFloat\n+@itemx SPARC_V8Plus\n+Versions relating to the SPARC family of processors.\n+\n+@item Thumb\n+Deprecated; use @code{ARM_Thumb} instead.\n+\n+@item D_X32\n+@itemx X86\n+@itemx X86_64\n+Versions relating to the x86-32 and x86-64 family of processors.\n+\n+@item Windows\n+@itemx Win32\n+@itemx Win64\n+Versions relating to Microsoft Windows systems.\n+\n+@end table\n+\n+\n+@c --------------------------------------------------------\n+\n+@node Special Enums\n+@section Special Enums\n+@cindex special enums\n+\n+Special @code{enum} names are used to represent types that do not have an\n+equivalent basic D type.  For example, C++ types used by the C++ name mangler.\n+\n+Special enums are declared opaque, with a base type explicitly set.  Unlike\n+regular opaque enums, special enums can be used as any other value type.  They\n+have a default @code{.init} value, as well as other enum properties available\n+(@code{.min}, @code{.max}).  Special enums can be declared in any module, and\n+will be recognized by the compiler.\n+\n+@smallexample\n+import gcc.builtins;\n+enum __c_long : __builtin_clong;\n+__c_long var = 0x800A;\n+@end smallexample\n+\n+@noindent\n+The following identifiers are recognized by GNU D.\n+\n+@table @code\n+@item __c_complex_double\n+C @code{_Complex double} type.\n+@item __c_complex_float\n+C @code{_Complex float} type.\n+@item __c_complex_real\n+C @code{_Complex long double} type.\n+@item __c_long\n+C++ @code{long} type.\n+@item __c_longlong\n+C++ @code{long long} type.\n+@item __c_long_double\n+C @code{long double} type.\n+@item __c_ulong\n+C++ @code{unsigned long} type.\n+@item __c_ulonglong\n+C++ @code{unsigned long long} type.\n+@item __c_wchar_t\n+C++ @code{wchar_t} type.\n+@end table\n+\n+The @code{core.stdc.config} module declares the following shorthand alias types\n+for convenience: @code{c_complex_double}, @code{c_complex_float},\n+@code{c_complex_real}, @code{cpp_long}, @code{cpp_longlong},\n+@code{c_long_double}, @code{cpp_ulong}, @code{cpp_ulonglong}.\n+\n+\n+@c --------------------------------------------------------\n+\n+@node Traits\n+@section Traits\n+@cindex traits\n+\n+Traits are extensions to the D programming language to enable programs, at\n+compile time, to get at information internal to the compiler.  This is also\n+known as compile time reflection.\n+\n+GNU D implements a @code{__traits(getTargetInfo)} trait that receives a string\n+key as its argument.  The result is an expression describing the requested\n+target information.\n+\n+@smallexample\n+version (OSX)\n+@{\n+    static assert(__traits(getTargetInfo, \"objectFormat\") == \"macho\");\n+@}\n+@end smallexample\n+\n+@noindent\n+Keys for the trait are implementation defined, allowing target-specific data\n+for exotic targets.  A reliable subset exists which a D compiler must\n+recognize.  These are documented by the D language specification hosted at\n+@uref{https://dlang.org/spec/traits.html#getTargetInfo}.\n+\n+The following keys are recognized by GNU D.\n+\n+@table @code\n+@item cppRuntimeLibrary\n+The C++ runtime library affinity for this toolchain.\n+\n+@item cppStd\n+The version of the C++ standard supported by @code{extern(C++)} code,\n+equivalent to the @code{__cplusplus} macro in a C++ compiler.\n+\n+@item floatAbi\n+Floating point ABI; may be @samp{hard}, @samp{soft}, or @samp{softfp}.\n+\n+@item objectFormat\n+Target object format.\n+\n+@end table\n+\n+\n+@c --------------------------------------------------------\n+\n+@node Vector Extensions\n+@section Vector Extensions\n+@cindex vector extensions\n+@cindex simd\n+\n+CPUs often support specialized vector types and vector operations (aka media\n+instructions).  Vector types are a fixed array of floating or integer types,\n+and vector operations operate simultaneously on them.\n+\n+@smallexample\n+alias int4 = __vector(int[4]);\n+@end smallexample\n+\n+@noindent\n+All the basic integer types can be used as base types, both as signed and as\n+unsigned: @code{byte}, @code{short}, @code{int}, @code{long}.  In addition,\n+@code{float} and @code{double} can be used to build floating-point vector\n+types, and @code{void} to build vectors of untyped data.  Only sizes that are\n+positive power-of-two multiples of the base type size are currently allowed.\n+\n+@noindent\n+The @code{core.simd} module has the following shorthand aliases for commonly\n+supported vector types:\n+@code{byte8}, @code{byte16}, @code{byte32}, @code{byte64},\n+@code{double1}, @code{double2}, @code{double4}, @code{double8},\n+@code{float2}, @code{float4}, @code{float8}, @code{float16},\n+@code{int2}, @code{int4}, @code{int8}, @code{int16},\n+@code{long1}, @code{long2}, @code{long4}, @code{long8},\n+@code{short4}, @code{short8}, @code{short16}, @code{short32},\n+@code{ubyte8}, @code{ubyte16}, @code{ubyte32}, @code{ubyte64},\n+@code{uint2}, @code{uint4}, @code{uint8}, @code{uint16},\n+@code{ulong1}, @code{ulong2}, @code{ulong4}, @code{ulong8},\n+@code{ushort4}, @code{ushort8}, @code{ushort16}, @code{ushort32},\n+@code{void8}, @code{void16}, @code{void32}, @code{void64}.\n+All these aliases correspond to @code{__vector(type[N])}.\n+\n+Which vector types are supported depends on the target.  Only vector types that\n+are implemented for the current architecture are supported at compile-time.\n+Vector operations that are not supported in hardware cause GNU D to synthesize\n+the instructions using a narrower mode.\n+\n+@smallexample\n+alias v4i = __vector(int[4]);\n+alias v128f = __vector(float[128]);    // Error: not supported on this platform\n+\n+int4 a, b, c;\n+\n+c = a * b;    // Natively supported on x86 with SSE4\n+c = a / b;    // Always synthesized\n+@end smallexample\n+\n+@noindent\n+Vector types can be used with a subset of normal D operations.  Currently, GNU\n+D allows using the following operators on these types: @code{+, -, *, /,\n+unary+, unary-}@.\n+\n+@smallexample\n+alias int4 = __vector(int[4]);\n+\n+int4 a, b, c;\n+\n+c = a + b;\n+@end smallexample\n+\n+@noindent\n+It is also possible to use shifting operators @code{<<}, @code{>>}, the modulus\n+operator @code{%}, logical operations @code{&, |, ^}, and the complement\n+operator @code{unary~} on integer-type vectors.\n+\n+For convenience, it is allowed to use a binary vector operation where one\n+operand is a scalar.  In that case the compiler transforms the scalar operand\n+into a vector where each element is the scalar from the operation.  The\n+transformation happens only if the scalar could be safely converted to the\n+vector-element type.  Consider the following code.\n+\n+@smallexample\n+alias int4 = __vector(int[4]);\n+\n+int4 a, b;\n+long l;\n+\n+a = b + 1;    // a = b + [1,1,1,1];\n+a = 2 * b;    // a = [2,2,2,2] * b;\n+\n+a = l + a;    // Error, incompatible types.\n+@end smallexample\n+\n+@noindent\n+Vector comparison is supported with standard comparison operators:\n+@code{==, !=, <, <=, >, >=}.  Comparison operands can be vector expressions of\n+integer-type or real-type.  Comparison between integer-type vectors and\n+real-type vectors are not supported.  The result of the comparison is a vector\n+of the same width and number of elements as the comparison operands with a\n+signed integral element type.\n+\n+Vectors are compared element-wise producing 0 when comparison is false\n+and -1 (constant of the appropriate type where all bits are set)\n+otherwise.  Consider the following example.\n+\n+@smallexample\n+alias int4 = __vector(int[4]);\n+\n+int4 a = [1,2,3,4];\n+int4 b = [3,2,1,4];\n+int4 c;\n+\n+c = a >  b;     // The result would be [0, 0,-1, 0]\n+c = a == b;     // The result would be [0,-1, 0,-1]\n+@end smallexample\n+\n+\n+@c --------------------------------------------------------\n+\n+@node Vector Intrinsics\n+@section Vector Intrinsics\n+@cindex intrinsics, vector\n+\n+The following functions are a collection of vector operation intrinsics,\n+available by importing the @code{gcc.simd} module.\n+\n+@deftypefn {Template} {void} gcc.simd.prefetch (bool @var{rw}, @\n+                                                ubyte @var{locality}) @\n+                                               (const(void)* @var{addr})\n+\n+Emit the prefetch instruction.  The value of @var{addr} is the address of the\n+memory to prefetch.  The value of @var{rw} is a compile-time constant one or\n+zero; one means that the prefetch is preparing for a write to the memory\n+address and zero, the default, means that the prefetch is preparing for a read.\n+The value @var{locality} must be a compile-time constant integer between zero\n+and three.\n+\n+This intrinsic is the same as the GCC built-in function\n+@code{__builtin_prefetch}.\n+\n+@smallexample\n+for (i = 0; i < n; i++)\n+@{\n+    import gcc.simd : prefetch;\n+    a[i] = a[i] + b[i];\n+    prefetch!(true, 1)(&a[i+j]);\n+    prefetch!(false, 1)(&b[i+j]);\n+    // @r{@dots{}}\n+@}\n+@end smallexample\n+@end deftypefn\n+\n+@deftypefn {Template} {V} gcc.simd.loadUnaligned (V)(const V* @var{p})\n+\n+Load unaligned vector from the address @var{p}.\n+\n+@smallexample\n+float4 v;\n+ubyte[16] arr;\n+\n+v = loadUnaligned(cast(float4*)arr.ptr);\n+@end smallexample\n+@end deftypefn\n+\n+@deftypefn {Template} {V} gcc.simd.storeUnaligned (V)(V* @var{p}, V @var{value})\n+\n+Store vector @var{value} to unaligned address @var{p}.\n+\n+@smallexample\n+float4 v;\n+ubyte[16] arr;\n+\n+storeUnaligned(cast(float4*)arr.ptr, v);\n+@end smallexample\n+@end deftypefn\n+\n+@deftypefn {Template} {V0} gcc.simd.shuffle (V0, V1, M)(V0 @var{op1}, @\n+                                                        V1 @var{op2}, @\n+                                                        M @var{mask})\n+@deftypefnx {Template} {V} gcc.simd.shuffle (V, M)(V @var{op1}, M @var{mask})\n+\n+Construct a permutation of elements from one or two vectors, returning a vector\n+of the same type as the input vector(s).  The @var{mask} is an integral vector\n+with the same width and element count as the output vector.\n+\n+This intrinsic is the same as the GCC built-in function\n+@code{__builtin_shuffle}.\n+\n+@smallexample\n+int4 a = [1, 2, 3, 4];\n+int4 b = [5, 6, 7, 8];\n+int4 mask1 = [0, 1, 1, 3];\n+int4 mask2 = [0, 4, 2, 5];\n+int4 res;\n+\n+res = shuffle(a, mask1);    // res is [1,2,2,4]\n+res = shuffle(a, b, mask2); // res is [1,5,3,6]\n+@end smallexample\n+@end deftypefn\n+\n+@deftypefn {Template} {V} gcc.simd.shufflevector (V1, V2, M...)(V1 @var{op1}, @\n+                                                  V2 @var{op2}, M @var{mask})\n+@deftypefnx {Template} {V} gcc.simd.shufflevector (V, @var{mask}...)(V @\n+                                                   @var{op1}, V @var{op2})\n+\n+Construct a permutation of elements from two vectors, returning a vector with\n+the same element type as the input vector(s), and same length as the\n+@var{mask}.\n+\n+This intrinsic is the same as the GCC built-in function\n+@code{__builtin_shufflevector}.\n+\n+@smallexample\n+int8 a = [1, -2, 3, -4, 5, -6, 7, -8];\n+int4 b = shufflevector(a, a, 0, 2, 4, 6);   // b is [1,3,5,7]\n+int4 c = [-2, -4, -6, -8];\n+int8 d = shufflevector!(int8, 4, 0, 5, 1, 6, 2, 7, 3)(c, b); // d is a\n+@end smallexample\n+@end deftypefn\n+\n+@deftypefn {Template} {E} gcc.simd.extractelement (V, int idx)(V @var{val})\n+Extracts a single scalar element from a vector @var{val} at a specified index\n+@var{idx}.\n+\n+@smallexample\n+int4 a = [0, 10, 20, 30];\n+int k = extractelement!(int4, 2)(a);    // a is 20\n+@end smallexample\n+@end deftypefn\n+\n+@deftypefn {Template} {V} gcc.simd.insertelement (V, int idx)(V val, B @var{e})\n+Inserts a scalar element @var{e} into a vector @var{val} at a specified index\n+@var{idx}.\n+\n+@smallexample\n+int4 a = [0, 10, 20, 30];\n+int4 b = insertelement!(int4, 2)(a, 50); // b is [0,10,50,30]\n+@end smallexample\n+@end deftypefn\n+\n+@deftypefn {Template} {V} gcc.simd.convertvector (V, T)(T val)\n+Convert a vector @var{val} from one integral or floating vector type to\n+another.  The result is an integral or floating vector that has had every\n+element cast to the element type of the return type.\n+\n+This intrinsic is the same as the GCC built-in function\n+@code{__builtin_convertvector}.\n+\n+@smallexample\n+int4 a = [1, -2, 3, -4];\n+float4 b = [1.5, -2.5, 3, 7];\n+float4 c = convertvector!float4(a);    // c is [1,-2,3,-4]\n+double4 d = convertvector!double4(a);  // d is [1,-2,3,-4]\n+double4 e = convertvector!double4(b);  // e is [1.5,-2.5,3,7]\n+int4 f = convertvector!int4(b);        // f is [1,-2,3,7]\n+@end smallexample\n+@end deftypefn\n+\n+@deftypefn {Template} {V0} gcc.simd.blendvector (V0, V1, M)(V0 @var{op0}, @\n+                                                            V1 @var{op1}, @\n+                                                            M @var{mask})\n+\n+Construct a conditional merge of elements from two vectors, returning a vector\n+of the same type as the input vector(s).  The @var{mask} is an integral vector\n+with the same width and element count as the output vector.\n+\n+@smallexample\n+int4 a = [1, 2, 3, 4];\n+int4 b = [3, 2, 1, 4];\n+auto c = blendvector(a, b, a > b);  // c is [3,2,3,4]\n+auto d = blendvector(a, b, a < b);  // d is [1,2,1,4]\n+@end smallexample\n+@end deftypefn\n+\n+\n+@c --------------------------------------------------------\n+\n+@node Missing Features\n+@section Missing Features and Deviations\n+@cindex missing features\n+@cindex D spec deviations\n+\n+Some parts of the D specification are hard or impossible to implement with\n+GCC, they should be listed here.\n+\n+@table @asis\n+@item Bit Operation Intrinsics\n+The Digital Mars D compiler implements the @code{core.bitop} intrinsics\n+@code{inp}, @code{inpw}, @code{inpl}, @code{outp}, @code{outpw}, and\n+@code{outpl}.  These are not recognized by GNU D.  On most targets, equivalent\n+intrinsics that have the same effect would be @code{core.volatile.loadVolatile}\n+and @code{core.volatile.storeVolatile} respectively\n+(@pxref{Volatile Intrinsics}).\n+\n+On x86 targets, if an @code{in} or @code{out} instruction is specifically\n+required, that can be achieved using assembler statements instead.\n+@smallexample\n+ubyte inp(uint port)\n+@{\n+    ubyte value;\n+    asm @{ \"inb %w1, %b0\" : \"=a\" (value) : \"Nd\" (port); @}\n+    return value;\n+@}\n+\n+void outp(uint port, ushort value)\n+@{\n+    asm @{ \"outb %b0, %w1\" : : \"a\" (value), \"Nd\" (port); @}\n+@}\n+@end smallexample\n+\n+@item Floating-Point Intermediate Values\n+\n+GNU D uses a software compile-time floating-point type that assists in\n+cross-compilation and support for arbitrary target @code{real} precisions wider\n+than 80 bits.  Because of this, the result of floating-point CTFE operations\n+may have different results in GNU D compared with other D compilers that use\n+the host's native floating-point type for storage and CTFE.  In particular, GNU\n+D won't overflow or underflow when a target real features a higher precision\n+than the host.  Differences also extend to @code{.stringof} representations of\n+intermediate values due to formatting differences with @code{sprintf(\"%Lg\")}.\n+@smallexample\n+version(GNU)\n+    assert((25.5).stringof ~ (3.01).stringof == \"2.55e+13.01e+0\");\n+else\n+    assert((25.5).stringof ~ (3.01).stringof == \"25.53.01\");\n+@end smallexample\n+\n+@item Function Calling Conventions\n+GNU D does not implement the @code{extern(D)} calling convention for x86 as\n+described in the D specification hosted at\n+@uref{https://dlang.org/spec/abi.html#function_calling_conventions}.\n+\n+Instead, there is no distinction between @code{extern(C)} and @code{extern(D)}\n+other than name mangling.\n+\n+@item ImportC Limitations\n+GNU D does not run the preprocessor automatically for any ImportC sources.\n+Instead all C files are expected to be manually preprocessed before they are\n+imported into the compilation.\n+\n+@item Inline Assembler\n+GNU D does not implement the D inline assembler for x86 and x86_64 as described\n+in the D specification hosted at @uref{https://dlang.org/spec/iasm.html}.  Nor\n+does GNU D predefine the @code{D_InlineAsm_X86} and @code{D_InlineAsm_X86_64}\n+version identifiers to indicate support.\n+\n+The GNU D compiler uses an alternative, GCC-based syntax for inline assembler\n+(@pxref{Inline Assembly}).\n+\n+@item Interfacing to Objective-C\n+GNU D does not support interfacing with Objective-C, nor its protocols,\n+classes, subclasses, instance variables, instance methods and class methods.\n+The @code{extern(Objective-C)} linkage is ignored, as are the @code{@@optional}\n+and @code{@@selector} attributes.  The @code{D_ObjectiveC} version identifier\n+is not predefined for compilations.\n+\n+@item Pragma Directives\n+Pragmas that are designed to embed information into object files or otherwise\n+pass options to the linker are not supported by GNU D.  These include\n+@code{pragma(lib)}, @code{pragma(linkerDirective)}, and\n+@code{pragma(startaddress)}.\n+\n+@item SIMD Intrinsics\n+The Digital Mars D compiler implements the @code{core.simd} intrinsics\n+@code{__simd}, @code{__simd_ib}, @code{__simd_sto}.  These are not recognized\n+by GNU D, nor does GNU D predefine the @code{D_SIMD} version identifier to\n+indicate support.\n+\n+On x86 targets, all intrinsics are available as functions in the\n+@code{gcc.builtins} module, and have predictable equivalents.\n+@smallexample\n+version (DigitalMars)\n+@{\n+    __simd(XMM.PSLLW, op1, op2);\n+    __simd_ib(XMM.PSLLW, op1, imm8);\n+@}\n+version (GNU)\n+@{\n+    __builtin_ia32_psllw(op1, op2);\n+    __builtin_ia32_psllwi(op1, imm8);\n+@}\n+@end smallexample\n+\n+@end table"}]}