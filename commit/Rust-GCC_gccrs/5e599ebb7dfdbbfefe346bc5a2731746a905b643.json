{"sha": "5e599ebb7dfdbbfefe346bc5a2731746a905b643", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU1OTllYmI3ZGZkYmJmZWZlMzQ2YmM1YTI3MzE3NDZhOTA1YjY0Mw==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain.sandoe@sandoe-acoustics.co.uk", "date": "2010-03-24T22:52:47Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2010-03-24T22:52:47Z"}, "message": "re PR testsuite/41609 (Torture tests do not check \"trivial.{m,mm}\" for each run case.)\n\n2010-03-24  Iain Sandoe  <iain.sandoe@sandoe-acoustics.co.uk>\n\n\tPR testsuite/41609\n\t* lib/objc-torture.exp (objc-set-runtime-options): New.\n\t* objc/execute/execute.exp: Check runtime options on each pass.\n\t* objc/execute/exceptions/exceptions.exp: Ditto.\n\t* objc/compile/compile.exp: Ditto.\n\nFrom-SVN: r157716", "tree": {"sha": "2072fcb7218f4f64d1e3de60890f956a3892ec7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2072fcb7218f4f64d1e3de60890f956a3892ec7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e599ebb7dfdbbfefe346bc5a2731746a905b643", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e599ebb7dfdbbfefe346bc5a2731746a905b643", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e599ebb7dfdbbfefe346bc5a2731746a905b643", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e599ebb7dfdbbfefe346bc5a2731746a905b643/comments", "author": null, "committer": null, "parents": [{"sha": "9debda96f54bfe9cbc2dbecc580d5099765432fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9debda96f54bfe9cbc2dbecc580d5099765432fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9debda96f54bfe9cbc2dbecc580d5099765432fe"}], "stats": {"total": 110, "additions": 80, "deletions": 30}, "files": [{"sha": "367625a1af8bdd9b1b5c03c7ff28576bfe6f89c0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e599ebb7dfdbbfefe346bc5a2731746a905b643/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e599ebb7dfdbbfefe346bc5a2731746a905b643/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e599ebb7dfdbbfefe346bc5a2731746a905b643", "patch": "@@ -1,5 +1,11 @@\n 2010-03-24  Iain Sandoe  <iain.sandoe@sandoe-acoustics.co.uk>\n \n+\tPR testsuite/41609\n+\t* lib/objc-torture.exp (objc-set-runtime-options): New.\n+\t* objc/execute/execute.exp: Check runtime options on each pass.\n+\t* objc/execute/exceptions/exceptions.exp: Ditto.\n+\t* objc/compile/compile.exp: Ditto.\n+\n \tPR testsuite/42348\n \t* lib/target-supports.exp: Add support for ObjC/ObjC++ tools in\n \tstandard tests."}, {"sha": "0b6362bb1d88efd8b23543e04e63e85eb83080e7", "filename": "gcc/testsuite/lib/objc-torture.exp", "status": "modified", "additions": 68, "deletions": 26, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e599ebb7dfdbbfefe346bc5a2731746a905b643/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e599ebb7dfdbbfefe346bc5a2731746a905b643/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp?ref=5e599ebb7dfdbbfefe346bc5a2731746a905b643", "patch": "@@ -18,24 +18,61 @@\n # This file was written by Rob Savoye. (rob@cygnus.com)\n \n load_lib file-format.exp\n+load_lib target-supports.exp\n \n-if ![info exists OBJC_RUNTIME_OPTIONS] {\n-  set OBJC_RUNTIME_OPTIONS \"\"\n-  foreach type {-fgnu-runtime -fnext-runtime} {\n-    global srcdir subdir\n+# Make sure that the runtime list is re-evaluated for each multilib.\n+proc objc-set-runtime-options { dowhat args } {\n+    global OBJC_RUNTIME_OPTIONS\n+    if ![info exists OBJC_RUNTIME_OPTIONS] {\n+\tset rtlist [list \"-fgnu-runtime\" \"-fnext-runtime\" ]\n+    } else {\n+\tset rtlist [list \"-fgnu-runtime\" \"-fnext-runtime\" ]\n+\tforeach other $OBJC_RUNTIME_OPTIONS {\n+\t    # Don't do tests twice...\n+\t    if { ( $other == \"-fnext-runtime\"  || $other == \"-fgnu-runtime\" ) } {\n+\t\tcontinue\n+\t    }\n+\t    lappend rtlist $other\n+\t}\n+    }\n \n-    set comp_output [objc_target_compile \\\n-    \"$srcdir/$subdir/trivial.m\" \"trivial.exe\" executable \"additional_flags=$type\"]\n+    set OBJC_RUNTIME_OPTIONS \"\"\n \n-    # If we get any error, then we failed\n-    if ![string match \"\" $comp_output] then {\n-      continue;\n+    foreach type $rtlist {\n+\tglobal srcdir subdir target_triplet tmpdir\n+\n+\tset options \"additional_flags=$type\"\n+\tif [info exists args] {\n+\t    lappend options $args\n+\t}\n+\tverbose \"options $options\"\n+\tset test_obj \"trivial.exe\"\n+\tset comp_output [objc_target_compile \\\n+\t\"$srcdir/$subdir/trivial.m\" $test_obj executable $options]\n+\n+\t# If we get any error, then we failed.\n+\tif ![string match \"\" $comp_output] then {\n+\t    remote_file build delete $test_obj\n+\t    continue;\n+\t}\n+\tif [info exists dowhat] {\n+\t    if { $dowhat == \"execute\" } {\n+\t\tset result [objc_load \"$tmpdir/$test_obj\" \"\" \"\"]\n+\t\tset status [lindex $result 0]\n+\t\tset output [lindex $result 1]\n+\t\tif { $status != \"pass\" } {\n+\t\t    remote_file build delete $test_obj\n+\t\t    verbose -log \"trivial execute failed with $status $output\"\n+\t\t    continue;\n+\t\t}\n+\t    }\n+\t}\n+\tremote_file build delete $test_obj\n+\tlappend OBJC_RUNTIME_OPTIONS $type\n     }\n-    lappend OBJC_RUNTIME_OPTIONS $type\n-  }\n-}\n-verbose -log \"Using the following runtimes: $OBJC_RUNTIME_OPTIONS\"\n \n+    verbose -log \"Using the following runtimes: $OBJC_RUNTIME_OPTIONS\"\n+}\n \n # The default option list can be overridden by\n # TORTURE_OPTIONS=\"{ { list1 } ... { listN } }\"\n@@ -62,7 +99,7 @@ if [info exists TORTURE_OPTIONS] {\n }\n \n if [info exists ADDITIONAL_TORTURE_OPTIONS] {\n-  set OBJC_TORTURE_OPTIONS \\\n+    set OBJC_TORTURE_OPTIONS \\\n \t[concat $OBJC_TORTURE_OPTIONS $ADDITIONAL_TORTURE_OPTIONS]\n }\n \n@@ -150,6 +187,9 @@ proc objc-torture-execute { src args } {\n     set oldstatus \"foo\"\n     foreach option $option_list {\n \tif { $count > 0 } {\n+\t    if [info exists oldexec] {\n+\t\tremote_file build delete $oldexec\n+\t    }\n \t    set oldexec $execname\n \t}\n \tset execname \"${executable}${count}\"\n@@ -164,7 +204,7 @@ proc objc-torture-execute { src args } {\n \t# torture_execute_before_{compile,execute} can be set by the .x script\n \t# (if present)\n \tif [info exists torture_eval_before_compile] {\n-            set ignore_me [eval $torture_eval_before_compile]\n+\t  set ignore_me [eval $torture_eval_before_compile]\n \t}\n \n \tremote_file build delete $execname\n@@ -188,6 +228,7 @@ proc objc-torture-execute { src args } {\n \tif [target_info exists no_long_long] then {\n \t    if [expr [search_for $src \"long long\"]] then {\n \t\tunsupported \"$testcase execution, $option\"\n+\t\tremote_file build delete $execname\n \t\tcontinue\n \t    }\n \t}\n@@ -197,7 +238,7 @@ proc objc-torture-execute { src args } {\n \t}\n \n \tif [info exists torture_eval_before_execute] {\n-            set ignore_me [eval $torture_eval_before_execute]\n+\t    set ignore_me [eval $torture_eval_before_execute]\n \t}\n \n \n@@ -218,23 +259,24 @@ proc objc-torture-execute { src args } {\n \tif { ![isnative] && [info exists oldexec] } {\n \t    if { [remote_file build cmp $oldexec $execname] == 0 } {\n \t\tset skip 1\n+\t\tset status $oldstatus\n \t    }\n \t}\n \tif { $skip == 0 } {\n \t    set result [objc_load \"$execname\" \"\" \"\"]\n \t    set status [lindex $result 0]\n \t    set output [lindex $result 1]\n \t}\n-        if { $oldstatus == \"pass\" } {\n-\t    remote_file build delete $oldexec\n-        }\n \t$status \"$testcase execution, $option\"\n \tset oldstatus $status\n+    # for each option\n+    } \n+    # tidy up\n+    if [info exists execname] {\n+\tremote_file build delete $execname\n     }\n-    if [info exists status] {\n-\tif { $status == \"pass\" } {\n-\t    remote_file build delete $execname\n-\t}\n+    if [info exists oldexec] {\n+\tremote_file build delete $oldexec\n     }\n }\n \n@@ -293,9 +335,9 @@ proc objc-torture { args } {\n     # don't pass -funroll[-all]-loops.\n     global torture_with_loops torture_without_loops\n     if [expr [search_for $src \"for*(\"]+[search_for $src \"while*(\"]] then {\n-\tset option_list $torture_with_loops\n+\t    set option_list $torture_with_loops\n     } else {\n-\tset option_list $torture_without_loops\n+\t    set option_list $torture_without_loops\n     }\n \n     # loop through all the options\n@@ -307,7 +349,7 @@ proc objc-torture { args } {\n \n \t# torture_execute_before_compile is set by the .x script (if present)\n \tif [info exists torture_eval_before_compile] {\n-            set ignore_me [eval $torture_eval_before_compile]\n+\t    set ignore_me [eval $torture_eval_before_compile]\n \t}\n \n \tobjc-torture-compile $src \"$option $options\""}, {"sha": "da280212fce300d17df5748e0a45d0fc5a24187b", "filename": "gcc/testsuite/objc/compile/compile.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e599ebb7dfdbbfefe346bc5a2731746a905b643/gcc%2Ftestsuite%2Fobjc%2Fcompile%2Fcompile.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e599ebb7dfdbbfefe346bc5a2731746a905b643/gcc%2Ftestsuite%2Fobjc%2Fcompile%2Fcompile.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fcompile%2Fcompile.exp?ref=5e599ebb7dfdbbfefe346bc5a2731746a905b643", "patch": "@@ -27,7 +27,8 @@ load_lib objc-torture.exp\n load_lib torture-options.exp\n \n torture-init\n-set-torture-options $OBJC_TORTURE_OPTIONS $OBJC_RUNTIME_OPTIONS\n+objc-set-runtime-options \"compile\" \n+set-torture-options $OBJC_TORTURE_OPTIONS $OBJC_RUNTIME_OPTIONS \n \n #\n # main test loop"}, {"sha": "60d833e593c7ee53c9ddc6d4ea365f4dab18e760", "filename": "gcc/testsuite/objc/execute/exceptions/exceptions.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e599ebb7dfdbbfefe346bc5a2731746a905b643/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fexceptions.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e599ebb7dfdbbfefe346bc5a2731746a905b643/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fexceptions.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fexceptions.exp?ref=5e599ebb7dfdbbfefe346bc5a2731746a905b643", "patch": "@@ -25,13 +25,13 @@ if $tracelevel then {\n \n set additional_flags \"\"\n lappend additional_flags \"-fobjc-exceptions\"\n-\n # load support procs\n load_lib objc-torture.exp\n load_lib torture-options.exp\n \n torture-init\n-set-torture-options $OBJC_TORTURE_OPTIONS $OBJC_RUNTIME_OPTIONS\n+objc-set-runtime-options \"execute\" \"additional_flags=-fobjc-exceptions\"\n+set-torture-options $OBJC_TORTURE_OPTIONS $OBJC_RUNTIME_OPTIONS \n \n #\n # main test loop"}, {"sha": "539c4fbf07b240718549b1938813a914cc8c980c", "filename": "gcc/testsuite/objc/execute/execute.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e599ebb7dfdbbfefe346bc5a2731746a905b643/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexecute.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e599ebb7dfdbbfefe346bc5a2731746a905b643/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexecute.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexecute.exp?ref=5e599ebb7dfdbbfefe346bc5a2731746a905b643", "patch": "@@ -28,7 +28,8 @@ load_lib objc-torture.exp\n load_lib torture-options.exp\n \n torture-init\n-set-torture-options $OBJC_TORTURE_OPTIONS $OBJC_RUNTIME_OPTIONS\n+objc-set-runtime-options \"execute\"\n+set-torture-options $OBJC_TORTURE_OPTIONS $OBJC_RUNTIME_OPTIONS \n \n #\n # main test loop"}]}