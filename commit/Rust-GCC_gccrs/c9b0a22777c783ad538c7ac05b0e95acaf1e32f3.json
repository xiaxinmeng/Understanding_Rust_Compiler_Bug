{"sha": "c9b0a22777c783ad538c7ac05b0e95acaf1e32f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzliMGEyMjc3N2M3ODNhZDUzOGM3YWMwNWIwZTk1YWNhZjFlMzJmMw==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2016-09-22T13:16:17Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2016-09-22T13:16:17Z"}, "message": "make next/prev _nonnote_insn take rtx_insn *\n\ngcc/ChangeLog:\n\n2016-09-22  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* emit-rtl.c (next_nonnote_insn): Change argument type to\n\trtx_insn *.\n\t(prev_nonnote_insn): Likewise.\n\t* jump.c (reversed_comparison_code_parts): Likewise.\n\t(reversed_comparison): Likewise.\n\t* rtl.h: Adjust prototypes.\n\t* config/arc/arc.md: Adjust.\n\t* cse.c (find_comparison_args): Likewise.\n\t* reorg.c (redundant_insn): Change return type to rtx_insn *.\n\t(fix_reg_dead_note): Change argument type to rtx_insn *.\n\t(delete_prior_computation): Likewise.\n\t(delete_computation): Likewise.\n\t(fill_slots_from_thread): Adjust.\n\t(relax_delay_slots): Likewise.\n\t* simplify-rtx.c (simplify_unary_operation_1): Likewise.\n\t(simplify_relational_operation_1): Likewise.\n\t(simplify_ternary_operation): Likewise.\n\nFrom-SVN: r240357", "tree": {"sha": "92b31a63603a695e7016ba3e11fd65002b118de2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92b31a63603a695e7016ba3e11fd65002b118de2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9b0a22777c783ad538c7ac05b0e95acaf1e32f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b0a22777c783ad538c7ac05b0e95acaf1e32f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9b0a22777c783ad538c7ac05b0e95acaf1e32f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b0a22777c783ad538c7ac05b0e95acaf1e32f3/comments", "author": null, "committer": null, "parents": [{"sha": "82082f658e42c072e780b50744bbf93e8b1ee949", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82082f658e42c072e780b50744bbf93e8b1ee949", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82082f658e42c072e780b50744bbf93e8b1ee949"}], "stats": {"total": 89, "additions": 54, "deletions": 35}, "files": [{"sha": "deca9dc12ce6f236a8d5669100016427d1ac7402", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b0a22777c783ad538c7ac05b0e95acaf1e32f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b0a22777c783ad538c7ac05b0e95acaf1e32f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9b0a22777c783ad538c7ac05b0e95acaf1e32f3", "patch": "@@ -1,3 +1,23 @@\n+2016-09-22  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* emit-rtl.c (next_nonnote_insn): Change argument type to\n+\trtx_insn *.\n+\t(prev_nonnote_insn): Likewise.\n+\t* jump.c (reversed_comparison_code_parts): Likewise.\n+\t(reversed_comparison): Likewise.\n+\t* rtl.h: Adjust prototypes.\n+\t* config/arc/arc.md: Adjust.\n+\t* cse.c (find_comparison_args): Likewise.\n+\t* reorg.c (redundant_insn): Change return type to rtx_insn *.\n+\t(fix_reg_dead_note): Change argument type to rtx_insn *.\n+\t(delete_prior_computation): Likewise.\n+\t(delete_computation): Likewise.\n+\t(fill_slots_from_thread): Adjust.\n+\t(relax_delay_slots): Likewise.\n+\t* simplify-rtx.c (simplify_unary_operation_1): Likewise.\n+\t(simplify_relational_operation_1): Likewise.\n+\t(simplify_ternary_operation): Likewise.\n+\n 2016-09-22  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* config/arc/arc-protos.h (arc_label_align): Change type of"}, {"sha": "22fdbbaa78b0ded0208f5d16607e87ae32ca7c17", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b0a22777c783ad538c7ac05b0e95acaf1e32f3/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b0a22777c783ad538c7ac05b0e95acaf1e32f3/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=c9b0a22777c783ad538c7ac05b0e95acaf1e32f3", "patch": "@@ -3879,7 +3879,7 @@\n   \"\"\n   \"*\n {\n-  rtx diff_vec = PATTERN (next_nonnote_insn (operands[3]));\n+  rtx diff_vec = PATTERN (next_nonnote_insn (as_a<rtx_insn *> (operands[3])));\n \n   if (GET_CODE (diff_vec) != ADDR_DIFF_VEC)\n     {\n@@ -3907,10 +3907,12 @@\n   [(set_attr \"type\" \"load\")\n    (set_attr_alternative \"iscompact\"\n      [(cond\n-\t[(ne (symbol_ref \"GET_MODE (PATTERN (next_nonnote_insn (operands[3])))\")\n+\t[(ne (symbol_ref \"GET_MODE (PATTERN (next_nonnote_insn\n+\t\t\t\t\t       (as_a<rtx_insn *> (operands[3]))))\")\n \t     (symbol_ref \"QImode\"))\n \t (const_string \"false\")\n-\t (match_test \"!ADDR_DIFF_VEC_FLAGS (PATTERN (next_nonnote_insn (operands[3]))).offset_unsigned\")\n+\t (match_test \"!ADDR_DIFF_VEC_FLAGS (PATTERN (next_nonnote_insn\n+\t\t\t\t\t\t       (as_a<rtx_insn *> (operands[3])))).offset_unsigned\")\n \t (const_string \"false\")]\n \t(const_string \"true\"))\n       (const_string \"false\")\n@@ -3946,7 +3948,7 @@\n   \"TARGET_COMPACT_CASESI\"\n   \"*\n {\n-  rtx diff_vec = PATTERN (next_nonnote_insn (operands[1]));\n+  rtx diff_vec = PATTERN (next_nonnote_insn (as_a<rtx_insn *> (operands[1])));\n   int unalign = arc_get_unalign ();\n   rtx xop[3];\n   const char *s;"}, {"sha": "7069fab6b3850401eff51a9366d72bc180a88ad6", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b0a22777c783ad538c7ac05b0e95acaf1e32f3/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b0a22777c783ad538c7ac05b0e95acaf1e32f3/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=c9b0a22777c783ad538c7ac05b0e95acaf1e32f3", "patch": "@@ -3054,7 +3054,7 @@ find_comparison_args (enum rtx_code code, rtx *parg1, rtx *parg2,\n \t with floating-point operands.  */\n       if (reverse_code)\n \t{\n-\t  enum rtx_code reversed = reversed_comparison_code (x, NULL_RTX);\n+\t  enum rtx_code reversed = reversed_comparison_code (x, NULL);\n \t  if (reversed == UNKNOWN)\n \t    break;\n \t  else"}, {"sha": "49907d10781f9bcb85e86293734df118b997505c", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b0a22777c783ad538c7ac05b0e95acaf1e32f3/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b0a22777c783ad538c7ac05b0e95acaf1e32f3/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=c9b0a22777c783ad538c7ac05b0e95acaf1e32f3", "patch": "@@ -3301,9 +3301,8 @@ previous_insn (rtx_insn *insn)\n    look inside SEQUENCEs.  */\n \n rtx_insn *\n-next_nonnote_insn (rtx uncast_insn)\n+next_nonnote_insn (rtx_insn *insn)\n {\n-  rtx_insn *insn = safe_as_a <rtx_insn *> (uncast_insn);\n   while (insn)\n     {\n       insn = NEXT_INSN (insn);\n@@ -3337,10 +3336,8 @@ next_nonnote_insn_bb (rtx_insn *insn)\n    not look inside SEQUENCEs.  */\n \n rtx_insn *\n-prev_nonnote_insn (rtx uncast_insn)\n+prev_nonnote_insn (rtx_insn *insn)\n {\n-  rtx_insn *insn = safe_as_a <rtx_insn *> (uncast_insn);\n-\n   while (insn)\n     {\n       insn = PREV_INSN (insn);"}, {"sha": "87a1a5d88739d36ab8cbbbeccba50634381794a1", "filename": "gcc/jump.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b0a22777c783ad538c7ac05b0e95acaf1e32f3/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b0a22777c783ad538c7ac05b0e95acaf1e32f3/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=c9b0a22777c783ad538c7ac05b0e95acaf1e32f3", "patch": "@@ -62,7 +62,7 @@ static void mark_all_labels (rtx_insn *);\n static void mark_jump_label_1 (rtx, rtx_insn *, bool, bool);\n static void mark_jump_label_asm (rtx, rtx_insn *);\n static void redirect_exp_1 (rtx *, rtx, rtx, rtx);\n-static int invert_exp_1 (rtx, rtx);\n+static int invert_exp_1 (rtx, rtx_insn *);\n \f\n /* Worker for rebuild_jump_labels and rebuild_jump_labels_chain.  */\n static void\n@@ -360,7 +360,7 @@ mark_all_labels (rtx_insn *f)\n    to help this function avoid overhead in these cases.  */\n enum rtx_code\n reversed_comparison_code_parts (enum rtx_code code, const_rtx arg0,\n-\t\t\t\tconst_rtx arg1, const_rtx insn)\n+\t\t\t\tconst_rtx arg1, const rtx_insn *insn)\n {\n   machine_mode mode;\n \n@@ -422,7 +422,7 @@ reversed_comparison_code_parts (enum rtx_code code, const_rtx arg0,\n       /* These CONST_CAST's are okay because prev_nonnote_insn just\n \t returns its argument and we assign it to a const_rtx\n \t variable.  */\n-      for (rtx_insn *prev = prev_nonnote_insn (CONST_CAST_RTX (insn));\n+      for (rtx_insn *prev = prev_nonnote_insn (const_cast<rtx_insn *> (insn));\n \t   prev != 0 && !LABEL_P (prev);\n \t   prev = prev_nonnote_insn (prev))\n \t{\n@@ -470,7 +470,7 @@ reversed_comparison_code_parts (enum rtx_code code, const_rtx arg0,\n /* A wrapper around the previous function to take COMPARISON as rtx\n    expression.  This simplifies many callers.  */\n enum rtx_code\n-reversed_comparison_code (const_rtx comparison, const_rtx insn)\n+reversed_comparison_code (const_rtx comparison, const rtx_insn *insn)\n {\n   if (!COMPARISON_P (comparison))\n     return UNKNOWN;\n@@ -484,7 +484,7 @@ reversed_comparison_code (const_rtx comparison, const_rtx insn)\n rtx\n reversed_comparison (const_rtx exp, machine_mode mode)\n {\n-  enum rtx_code reversed_code = reversed_comparison_code (exp, NULL_RTX);\n+  enum rtx_code reversed_code = reversed_comparison_code (exp, NULL);\n   if (reversed_code == UNKNOWN)\n     return NULL_RTX;\n   else\n@@ -1623,7 +1623,7 @@ redirect_jump_2 (rtx_jump_insn *jump, rtx olabel, rtx nlabel, int delete_unused,\n /* Invert the jump condition X contained in jump insn INSN.  Accrue the\n    modifications into the change group.  Return nonzero for success.  */\n static int\n-invert_exp_1 (rtx x, rtx insn)\n+invert_exp_1 (rtx x, rtx_insn *insn)\n {\n   RTX_CODE code = GET_CODE (x);\n "}, {"sha": "bc05930ce8fd73d797448ce1dff93e12a14b59cc", "filename": "gcc/reorg.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b0a22777c783ad538c7ac05b0e95acaf1e32f3/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b0a22777c783ad538c7ac05b0e95acaf1e32f3/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=c9b0a22777c783ad538c7ac05b0e95acaf1e32f3", "patch": "@@ -219,12 +219,12 @@ static void steal_delay_list_from_fallthrough (rtx_insn *, rtx, rtx_sequence *,\n \t\t\t\t\t       struct resources *,\n \t\t\t\t\t       int, int *, int *);\n static void try_merge_delay_insns (rtx_insn *, rtx_insn *);\n-static rtx redundant_insn (rtx, rtx_insn *, const vec<rtx_insn *> &);\n+static rtx_insn *redundant_insn (rtx, rtx_insn *, const vec<rtx_insn *> &);\n static int own_thread_p (rtx, rtx, int);\n static void update_block (rtx_insn *, rtx);\n static int reorg_redirect_jump (rtx_jump_insn *, rtx);\n static void update_reg_dead_notes (rtx_insn *, rtx_insn *);\n-static void fix_reg_dead_note (rtx, rtx);\n+static void fix_reg_dead_note (rtx_insn *, rtx);\n static void update_reg_unused_notes (rtx, rtx);\n static void fill_simple_delay_slots (int);\n static void fill_slots_from_thread (rtx_jump_insn *, rtx, rtx, rtx,\n@@ -1449,7 +1449,7 @@ try_merge_delay_insns (rtx_insn *insn, rtx_insn *thread)\n    redundant insn, but the cost of splitting seems greater than the possible\n    gain in rare cases.  */\n \n-static rtx\n+static rtx_insn *\n redundant_insn (rtx insn, rtx_insn *target, const vec<rtx_insn *> &delay_list)\n {\n   rtx target_main = target;\n@@ -1606,7 +1606,7 @@ redundant_insn (rtx insn, rtx_insn *target, const vec<rtx_insn *> &delay_list)\n \t     resource requirements as we go.  */\n \t  for (i = seq->len () - 1; i > 0; i--)\n \t    {\n-\t      rtx candidate = seq->element (i);\n+\t      rtx_insn *candidate = seq->insn (i);\n \n \t      /* If an insn will be annulled if the branch is false, it isn't\n \t\t considered as a possible duplicate insn.  */\n@@ -1773,7 +1773,7 @@ update_reg_dead_notes (rtx_insn *insn, rtx_insn *delayed_insn)\n    confused into thinking the register is dead.  */\n \n static void\n-fix_reg_dead_note (rtx start_insn, rtx stop_insn)\n+fix_reg_dead_note (rtx_insn *start_insn, rtx stop_insn)\n {\n   rtx link, next;\n   rtx_insn *p;\n@@ -2417,7 +2417,7 @@ fill_slots_from_thread (rtx_jump_insn *insn, rtx condition,\n \t\t\t      && (! own_thread || ! sets_cc0_p (pat)))))\n \t  && ! can_throw_internal (trial))\n \t{\n-\t  rtx prior_insn;\n+\t  rtx_insn *prior_insn;\n \n \t  /* If TRIAL is redundant with some insn before INSN, we don't\n \t     actually need to add it to the delay list; we can merely pretend\n@@ -2904,16 +2904,16 @@ fill_eager_delay_slots (void)\n     }\n }\n \f\n-static void delete_computation (rtx insn);\n+static void delete_computation (rtx_insn *insn);\n \n /* Recursively delete prior insns that compute the value (used only by INSN\n    which the caller is deleting) stored in the register mentioned by NOTE\n    which is a REG_DEAD note associated with INSN.  */\n \n static void\n-delete_prior_computation (rtx note, rtx insn)\n+delete_prior_computation (rtx note, rtx_insn *insn)\n {\n-  rtx our_prev;\n+  rtx_insn *our_prev;\n   rtx reg = XEXP (note, 0);\n \n   for (our_prev = prev_nonnote_insn (insn);\n@@ -3025,7 +3025,7 @@ delete_prior_computation (rtx note, rtx insn)\n    delete the insn that set it.  */\n \n static void\n-delete_computation (rtx insn)\n+delete_computation (rtx_insn *insn)\n {\n   rtx note, next;\n \n@@ -3367,7 +3367,7 @@ relax_delay_slots (rtx_insn *first)\n       if (! INSN_ANNULLED_BRANCH_P (delay_jump_insn)\n \t  && ! condjump_in_parallel_p (delay_jump_insn)\n \t  && prev_active_insn (target_label) == insn\n-\t  && ! BARRIER_P (prev_nonnote_insn (target_label))\n+\t  && ! BARRIER_P (prev_nonnote_insn (as_a<rtx_insn *> (target_label)))\n \t  /* If the last insn in the delay slot sets CC0 for some insn,\n \t     various code assumes that it is in a delay slot.  We could\n \t     put it back where it belonged and delete the register notes,"}, {"sha": "0d121bcefeeea39ee92d5fd597dbaa1a93084b9e", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b0a22777c783ad538c7ac05b0e95acaf1e32f3/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b0a22777c783ad538c7ac05b0e95acaf1e32f3/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=c9b0a22777c783ad538c7ac05b0e95acaf1e32f3", "patch": "@@ -2834,9 +2834,9 @@ extern void add_function_usage_to (rtx, rtx);\n extern rtx_call_insn *last_call_insn (void);\n extern rtx_insn *previous_insn (rtx_insn *);\n extern rtx_insn *next_insn (rtx_insn *);\n-extern rtx_insn *prev_nonnote_insn (rtx);\n+extern rtx_insn *prev_nonnote_insn (rtx_insn *);\n extern rtx_insn *prev_nonnote_insn_bb (rtx);\n-extern rtx_insn *next_nonnote_insn (rtx);\n+extern rtx_insn *next_nonnote_insn (rtx_insn *);\n extern rtx_insn *next_nonnote_insn_bb (rtx_insn *);\n extern rtx_insn *prev_nondebug_insn (rtx);\n extern rtx_insn *next_nondebug_insn (rtx);\n@@ -3498,9 +3498,9 @@ extern int redirect_jump (rtx_jump_insn *, rtx, int);\n extern void rebuild_jump_labels (rtx_insn *);\n extern void rebuild_jump_labels_chain (rtx_insn *);\n extern rtx reversed_comparison (const_rtx, machine_mode);\n-extern enum rtx_code reversed_comparison_code (const_rtx, const_rtx);\n+extern enum rtx_code reversed_comparison_code (const_rtx, const rtx_insn *);\n extern enum rtx_code reversed_comparison_code_parts (enum rtx_code, const_rtx,\n-\t\t\t\t\t\t     const_rtx, const_rtx);\n+\t\t\t\t\t\t     const_rtx, const rtx_insn *);\n extern void delete_for_peephole (rtx_insn *, rtx_insn *);\n extern int condjump_in_parallel_p (const rtx_insn *);\n "}, {"sha": "67902792cdf96d341173aa2404ce8e4f0fafd8b3", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b0a22777c783ad538c7ac05b0e95acaf1e32f3/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b0a22777c783ad538c7ac05b0e95acaf1e32f3/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=c9b0a22777c783ad538c7ac05b0e95acaf1e32f3", "patch": "@@ -886,7 +886,7 @@ simplify_unary_operation_1 (enum rtx_code code, machine_mode mode, rtx op)\n \t comparison is all ones.   */\n       if (COMPARISON_P (op)\n \t  && (mode == BImode || STORE_FLAG_VALUE == -1)\n-\t  && ((reversed = reversed_comparison_code (op, NULL_RTX)) != UNKNOWN))\n+\t  && ((reversed = reversed_comparison_code (op, NULL)) != UNKNOWN))\n \treturn simplify_gen_relational (reversed, mode, VOIDmode,\n \t\t\t\t\tXEXP (op, 0), XEXP (op, 1));\n \n@@ -1009,7 +1009,7 @@ simplify_unary_operation_1 (enum rtx_code code, machine_mode mode, rtx op)\n \t       || (GET_CODE (false_rtx) == NEG\n \t\t   && rtx_equal_p (XEXP (false_rtx, 0), true_rtx)))\n \t    {\n-\t      if (reversed_comparison_code (cond, NULL_RTX) != UNKNOWN)\n+\t      if (reversed_comparison_code (cond, NULL) != UNKNOWN)\n \t\ttemp = reversed_comparison (cond, mode);\n \t      else\n \t\t{\n@@ -4627,7 +4627,7 @@ simplify_relational_operation_1 (enum rtx_code code, machine_mode mode,\n \t}\n       else if (code == EQ)\n \t{\n-\t  enum rtx_code new_code = reversed_comparison_code (op0, NULL_RTX);\n+\t  enum rtx_code new_code = reversed_comparison_code (op0, NULL);\n \t  if (new_code != UNKNOWN)\n \t    return simplify_gen_relational (new_code, mode, VOIDmode,\n \t\t\t\t\t    XEXP (op0, 0), XEXP (op0, 1));\n@@ -5487,7 +5487,7 @@ simplify_ternary_operation (enum rtx_code code, machine_mode mode,\n \t      else if (t == 0 && f == STORE_FLAG_VALUE)\n \t\t{\n \t\t  enum rtx_code tmp;\n-\t\t  tmp = reversed_comparison_code (op0, NULL_RTX);\n+\t\t  tmp = reversed_comparison_code (op0, NULL);\n \t\t  if (tmp == UNKNOWN)\n \t\t    break;\n \t\t  code = tmp;"}]}