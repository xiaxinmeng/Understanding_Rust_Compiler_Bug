{"sha": "430c89274d7f82810724126637ffdc5507d442f0", "node_id": "C_kwDOANBUbNoAKDQzMGM4OTI3NGQ3ZjgyODEwNzI0MTI2NjM3ZmZkYzU1MDdkNDQyZjA", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-02-25T19:56:13Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-02-28T16:37:49Z"}, "message": "c++: Lost deprecated/unavailable attr in class tmpl [PR104682]\n\nWhen looking into the other PR I noticed that we fail to give a warning\nfor a deprecated enumerator when the enum is in a class template.  This\nonly happens when the attribute doesn't have an argument.  The reason is\nthat when we tsubst_enum, we create a new enumerator:\n\n      build_enumerator (DECL_NAME (decl), value, newtag,\n           DECL_ATTRIBUTES (decl), DECL_SOURCE_LOCATION (decl));\n\nbut DECL_ATTRIBUTES (decl) is null when the attribute was provided\nwithout an argument -- in that case it simply melts into a tree flag.\nhandle_deprecated_attribute has:\n\n      if (!args)\n         *no_add_attrs = true;\n\nso the attribute isn't retained and we lose it when tsubsting.  Same\nthing when the attribute is on the enum itself.\n\nAttribute unavailable is a similar case, but it's different in that\nit can be a late attribute whereas \"deprecated\" can't:\nis_late_template_attribute has\n\n                /* But some attributes specifically apply to templates.  */\n                && !is_attribute_p (\"abi_tag\", name)\n                && !is_attribute_p (\"deprecated\", name)\n                && !is_attribute_p (\"visibility\", name))\n         return true;\n       else\n         return false;\n\nwhich looks strange, but attr-unavailable-9.C tests that we don't error when\nthe attribute is applied on a template.\n\n\tPR c++/104682\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (build_enumerator): Adjust.\n\t* decl.cc (finish_enum): Make it return the new decl.\n\t* pt.cc (tsubst_enum): Propagate TREE_DEPRECATED and TREE_UNAVAILABLE.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ext/attr-unavailable-10.C: New test.\n\t* g++.dg/ext/attr-unavailable-11.C: New test.\n\t* g++.dg/warn/deprecated-17.C: New test.\n\t* g++.dg/warn/deprecated-18.C: New test.", "tree": {"sha": "bc4c5c862fc47548e3a9e77f62f9e5739965005e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc4c5c862fc47548e3a9e77f62f9e5739965005e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/430c89274d7f82810724126637ffdc5507d442f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/430c89274d7f82810724126637ffdc5507d442f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/430c89274d7f82810724126637ffdc5507d442f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/430c89274d7f82810724126637ffdc5507d442f0/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8b0571e334792c0c789438617cfb7faf86ab599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b0571e334792c0c789438617cfb7faf86ab599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8b0571e334792c0c789438617cfb7faf86ab599"}], "stats": {"total": 139, "additions": 133, "deletions": 6}, "files": [{"sha": "80994e9479336d366b72001bad210536c901354f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430c89274d7f82810724126637ffdc5507d442f0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430c89274d7f82810724126637ffdc5507d442f0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=430c89274d7f82810724126637ffdc5507d442f0", "patch": "@@ -6833,7 +6833,7 @@ extern void xref_basetypes\t\t\t(tree, tree);\n extern tree start_enum\t\t\t\t(tree, tree, tree, tree, bool, bool *);\n extern void finish_enum_value_list\t\t(tree);\n extern void finish_enum\t\t\t\t(tree);\n-extern void build_enumerator\t\t\t(tree, tree, tree, tree, location_t);\n+extern tree build_enumerator\t\t\t(tree, tree, tree, tree, location_t);\n extern tree lookup_enumerator\t\t\t(tree, tree);\n extern bool start_preparsed_function\t\t(tree, tree, int);\n extern bool start_function\t\t\t(cp_decl_specifier_seq *,"}, {"sha": "7f80f9d4d7a5d352828c3b1b6e974a593aa74dc1", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430c89274d7f82810724126637ffdc5507d442f0/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430c89274d7f82810724126637ffdc5507d442f0/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=430c89274d7f82810724126637ffdc5507d442f0", "patch": "@@ -16409,7 +16409,7 @@ finish_enum (tree enumtype)\n    Apply ATTRIBUTES if available.  LOC is the location of NAME.\n    Assignment of sequential values by default is handled here.  */\n \n-void\n+tree\n build_enumerator (tree name, tree value, tree enumtype, tree attributes,\n \t\t  location_t loc)\n {\n@@ -16611,6 +16611,8 @@ incremented enumerator value is too large for %<long%>\"));\n \n   /* Add this enumeration constant to the list for this type.  */\n   TYPE_VALUES (enumtype) = tree_cons (name, decl, TYPE_VALUES (enumtype));\n+\n+  return decl;\n }\n \n /* Look for an enumerator with the given NAME within the enumeration"}, {"sha": "8fb17349ee1b44bbac6b70a2340624a9fa0cd8bd", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430c89274d7f82810724126637ffdc5507d442f0/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430c89274d7f82810724126637ffdc5507d442f0/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=430c89274d7f82810724126637ffdc5507d442f0", "patch": "@@ -26944,9 +26944,8 @@ tsubst_enum (tree tag, tree newtag, tree args)\n   for (e = TYPE_VALUES (tag); e; e = TREE_CHAIN (e))\n     {\n       tree value;\n-      tree decl;\n+      tree decl = TREE_VALUE (e);\n \n-      decl = TREE_VALUE (e);\n       /* Note that in a template enum, the TREE_VALUE is the\n \t CONST_DECL, not the corresponding INTEGER_CST.  */\n       value = tsubst_expr (DECL_INITIAL (decl),\n@@ -26958,8 +26957,14 @@ tsubst_enum (tree tag, tree newtag, tree args)\n \n       /* Actually build the enumerator itself.  Here we're assuming that\n \t enumerators can't have dependent attributes.  */\n-      build_enumerator (DECL_NAME (decl), value, newtag,\n-\t\t\tDECL_ATTRIBUTES (decl), DECL_SOURCE_LOCATION (decl));\n+      tree newdecl = build_enumerator (DECL_NAME (decl), value, newtag,\n+\t\t\t\t       DECL_ATTRIBUTES (decl),\n+\t\t\t\t       DECL_SOURCE_LOCATION (decl));\n+      /* Attribute deprecated without an argument isn't sticky: it'll\n+\t melt into a tree flag, so we need to propagate the flag here,\n+\t since we just created a new enumerator.  */\n+      TREE_DEPRECATED (newdecl) = TREE_DEPRECATED (decl);\n+      TREE_UNAVAILABLE (newdecl) = TREE_UNAVAILABLE (decl);\n     }\n \n   if (SCOPED_ENUM_P (newtag))\n@@ -26970,6 +26975,10 @@ tsubst_enum (tree tag, tree newtag, tree args)\n \n   DECL_SOURCE_LOCATION (TYPE_NAME (newtag))\n     = DECL_SOURCE_LOCATION (TYPE_NAME (tag));\n+  TREE_DEPRECATED (newtag) = TREE_DEPRECATED (tag);\n+  /* We don't need to propagate TREE_UNAVAILABLE here, because it is, unlike\n+     deprecated, applied at instantiation time rather than template\n+     definition time.  */\n }\n \n /* DECL is a FUNCTION_DECL that is a template specialization.  Return"}, {"sha": "cfb99476b9fb9ec5c553979a08c5a612cc2d682c", "filename": "gcc/testsuite/g++.dg/ext/attr-unavailable-10.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430c89274d7f82810724126637ffdc5507d442f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430c89274d7f82810724126637ffdc5507d442f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-10.C?ref=430c89274d7f82810724126637ffdc5507d442f0", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/104682\n+// { dg-do compile { target c++11 } }\n+\n+template<typename>\n+struct S {\n+  enum E1 {\n+    A __attribute__((unavailable))\n+  };\n+};\n+\n+struct S2 {\n+  enum E2 {\n+    A __attribute__((unavailable))\n+  };\n+};\n+\n+void\n+g ()\n+{\n+  auto a1 = S<int>::E1::A; // { dg-error \"is unavailable\" }\n+  auto b1 = S2::E2::A; // { dg-error \"is unavailable\" }\n+}"}, {"sha": "fce24528908e036ad27db4c8a064ff13f2d9de1c", "filename": "gcc/testsuite/g++.dg/ext/attr-unavailable-11.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430c89274d7f82810724126637ffdc5507d442f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430c89274d7f82810724126637ffdc5507d442f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-11.C?ref=430c89274d7f82810724126637ffdc5507d442f0", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/104682\n+// { dg-do compile { target c++11 } }\n+\n+template<typename>\n+struct S {\n+  enum B {\n+    A\n+  } __attribute__((unavailable)) ;\n+};\n+\n+struct S2 {\n+  enum B {\n+    A\n+  } __attribute__((unavailable));\n+};\n+\n+void\n+g ()\n+{\n+  S<int>::B a1; // { dg-error \"is unavailable\" }\n+  S2::B a2; // { dg-error \"is unavailable\" }\n+}"}, {"sha": "c4e768538fa1b605cb7865023d31113c167a0d7d", "filename": "gcc/testsuite/g++.dg/warn/deprecated-17.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430c89274d7f82810724126637ffdc5507d442f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430c89274d7f82810724126637ffdc5507d442f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-17.C?ref=430c89274d7f82810724126637ffdc5507d442f0", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/104682\n+// { dg-do compile { target c++11 } }\n+\n+template<typename>\n+struct S {\n+  enum E1 {\n+    A __attribute__((deprecated)),\n+    B __attribute__((deprecated(\"B\"))),\n+    C [[deprecated]],\n+    D [[deprecated(\"D\")]]\n+  };\n+};\n+\n+struct S2 {\n+  enum E2 {\n+    A __attribute__((deprecated)),\n+    B __attribute__((deprecated(\"B\"))),\n+    C [[deprecated]],\n+    D [[deprecated(\"D\")]]\n+  };\n+};\n+\n+void\n+g ()\n+{\n+  auto a1 = S<int>::E1::A; // { dg-warning \"is deprecated\" }\n+  auto a2 = S<int>::E1::B; // { dg-warning \"is deprecated\" }\n+  auto a3 = S<int>::E1::C; // { dg-warning \"is deprecated\" }\n+  auto a4 = S<int>::E1::D; // { dg-warning \"is deprecated\" }\n+  \n+  auto b1 = S2::A; // { dg-warning \"is deprecated\" }\n+  auto b2 = S2::B; // { dg-warning \"is deprecated\" }\n+  auto b3 = S2::C; // { dg-warning \"is deprecated\" }\n+  auto b4 = S2::D; // { dg-warning \"is deprecated\" }\n+}"}, {"sha": "0d101a9cc90e103d4178f7a2e9e7a76531a52098", "filename": "gcc/testsuite/g++.dg/warn/deprecated-18.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430c89274d7f82810724126637ffdc5507d442f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430c89274d7f82810724126637ffdc5507d442f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-18.C?ref=430c89274d7f82810724126637ffdc5507d442f0", "patch": "@@ -0,0 +1,37 @@\n+// PR c++/104682\n+// { dg-do compile { target c++11 } }\n+\n+template<typename>\n+struct S {\n+  enum B {\n+    A\n+  } __attribute__((deprecated)) ;\n+};\n+\n+struct S2 {\n+  enum B {\n+    A\n+  } __attribute__((deprecated));\n+};\n+\n+template<typename>\n+struct S3 {\n+  enum [[deprecated]] B {\n+    A\n+  };\n+};\n+\n+struct S4 {\n+  enum [[deprecated]] B {\n+    A\n+  };\n+};\n+\n+void\n+g ()\n+{\n+  S<int>::B a1; // { dg-warning \"is deprecated\" }\n+  S2::B a2; // { dg-warning \"is deprecated\" }\n+  S3<int>::B a3; // { dg-warning \"is deprecated\" }\n+  S4::B a4; // { dg-warning \"is deprecated\" }\n+}"}]}