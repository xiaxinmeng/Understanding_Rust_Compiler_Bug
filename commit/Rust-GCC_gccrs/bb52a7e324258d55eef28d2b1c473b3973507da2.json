{"sha": "bb52a7e324258d55eef28d2b1c473b3973507da2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI1MmE3ZTMyNDI1OGQ1NWVlZjI4ZDJiMWM0NzNiMzk3MzUwN2RhMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-24T16:45:45Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-24T16:45:45Z"}, "message": "Make directory iterators become end iterator on error\n\n\t* src/filesystem/dir.cc (open_dir): Return same value for errors\n\twhether ignored or not.\n\t(_Dir::advance(error_code*, directory_options)): Return false on\n\terror.\n\t(directory_iterator(const path&, directory_options, error_code*)):\n\tCreate end iterator on error (LWG 2723).\n\t(recursive_directory_iterator(const path&, directory_options,\n\terror_code*)): Likewise.\n\t* testsuite/experimental/filesystem/iterators/directory_iterator.cc:\n\tUpdate expected behaviour on error.\n\t* testsuite/experimental/filesystem/iterators/\n\trecursive_directory_iterator.cc: Likewise.\n\nFrom-SVN: r241486", "tree": {"sha": "b0a81fd73f5641a0b09b1bf140fb87f20759da78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0a81fd73f5641a0b09b1bf140fb87f20759da78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb52a7e324258d55eef28d2b1c473b3973507da2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb52a7e324258d55eef28d2b1c473b3973507da2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb52a7e324258d55eef28d2b1c473b3973507da2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb52a7e324258d55eef28d2b1c473b3973507da2/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfef9c1ea79749cb3fc40b3ef869a29470c6073c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfef9c1ea79749cb3fc40b3ef869a29470c6073c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfef9c1ea79749cb3fc40b3ef869a29470c6073c"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "7c65fb0488161289a575c209b726018f0e02891c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb52a7e324258d55eef28d2b1c473b3973507da2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb52a7e324258d55eef28d2b1c473b3973507da2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bb52a7e324258d55eef28d2b1c473b3973507da2", "patch": "@@ -1,5 +1,18 @@\n 2016-10-24  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* src/filesystem/dir.cc (open_dir): Return same value for errors\n+\twhether ignored or not.\n+\t(_Dir::advance(error_code*, directory_options)): Return false on\n+\terror.\n+\t(directory_iterator(const path&, directory_options, error_code*)):\n+\tCreate end iterator on error (LWG 2723).\n+\t(recursive_directory_iterator(const path&, directory_options,\n+\terror_code*)): Likewise.\n+\t* testsuite/experimental/filesystem/iterators/directory_iterator.cc:\n+\tUpdate expected behaviour on error.\n+\t* testsuite/experimental/filesystem/iterators/\n+\trecursive_directory_iterator.cc: Likewise.\n+\n \t* src/filesystem/ops.cc (close_fd): Remove.\n \t(do_copy_file): Just use close(3) instead of close_fd, to prevent\n \tretrying on error."}, {"sha": "4640d751127130713ce70052653abc1623091654", "filename": "libstdc++-v3/src/filesystem/dir.cc", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb52a7e324258d55eef28d2b1c473b3973507da2/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb52a7e324258d55eef28d2b1c473b3973507da2/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc?ref=bb52a7e324258d55eef28d2b1c473b3973507da2", "patch": "@@ -79,8 +79,7 @@ namespace\n       return (obj & bits) != Bitmask::none;\n     }\n \n-  // Returns {dirp, p} on success, {nullptr, p} on error.\n-  // If an ignored EACCES error occurs returns {}.\n+  // Returns {dirp, p} on success, {} on error (whether ignored or not).\n   inline fs::_Dir\n   open_dir(const fs::path& p, fs::directory_options options,\n \t   std::error_code* ec)\n@@ -102,7 +101,7 @@ namespace\n             std::error_code(err, std::generic_category())));\n \n     ec->assign(err, std::generic_category());\n-    return {nullptr, p};\n+    return {};\n   }\n \n   inline fs::file_type\n@@ -169,7 +168,7 @@ fs::_Dir::advance(error_code* ec, directory_options options)\n \t      \"directory iterator cannot advance\",\n \t      std::error_code(err, std::generic_category())));\n       ec->assign(err, std::generic_category());\n-      return true;\n+      return false;\n     }\n   else\n     {\n@@ -191,12 +190,6 @@ directory_iterator(const path& p, directory_options options, error_code* ec)\n       if (sp->advance(ec, options))\n \t_M_dir.swap(sp);\n     }\n-  else if (!dir.path.empty())\n-    {\n-      // An error occurred, we need a non-empty shared_ptr so that *this will\n-      // not compare equal to the end iterator.\n-      _M_dir.reset(static_cast<fs::_Dir*>(nullptr));\n-    }\n }\n \n const fs::directory_entry&\n@@ -270,10 +263,6 @@ recursive_directory_iterator(const path& p, directory_options options,\n \t      std::error_code(err, std::generic_category())));\n \n       ec->assign(err, std::generic_category());\n-\n-      // An error occurred, we need a non-empty shared_ptr so that *this will\n-      // not compare equal to the end iterator.\n-      _M_dirs.reset(static_cast<_Dir_stack*>(nullptr));\n     }\n }\n "}, {"sha": "5788700317fc89429625a26bad70cafcad4547dc", "filename": "libstdc++-v3/testsuite/experimental/filesystem/iterators/directory_iterator.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb52a7e324258d55eef28d2b1c473b3973507da2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb52a7e324258d55eef28d2b1c473b3973507da2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc?ref=bb52a7e324258d55eef28d2b1c473b3973507da2", "patch": "@@ -34,7 +34,7 @@ test01()\n   const auto p = __gnu_test::nonexistent_path();\n   fs::directory_iterator iter(p, ec);\n   VERIFY( ec );\n-  VERIFY( iter != fs::directory_iterator() );\n+  VERIFY( iter == fs::directory_iterator() );\n \n   // Test empty directory.\n   create_directory(p, fs::current_path(), ec);\n@@ -58,7 +58,7 @@ test01()\n   VERIFY( !ec );\n   iter = fs::directory_iterator(p, ec);\n   VERIFY( ec );\n-  VERIFY( iter != fs::directory_iterator() );\n+  VERIFY( iter == fs::directory_iterator() );\n \n   // Test inaccessible directory, skipping permission denied.\n   const auto opts = fs::directory_options::skip_permission_denied;"}, {"sha": "b41c394b41a07a505c90336f682c89d44d741403", "filename": "libstdc++-v3/testsuite/experimental/filesystem/iterators/recursive_directory_iterator.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb52a7e324258d55eef28d2b1c473b3973507da2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb52a7e324258d55eef28d2b1c473b3973507da2/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc?ref=bb52a7e324258d55eef28d2b1c473b3973507da2", "patch": "@@ -34,7 +34,7 @@ test01()\n   const auto p = __gnu_test::nonexistent_path();\n   fs::recursive_directory_iterator iter(p, ec);\n   VERIFY( ec );\n-  VERIFY( iter != fs::recursive_directory_iterator() );\n+  VERIFY( iter == fs::recursive_directory_iterator() );\n \n   // Test empty directory.\n   create_directory(p, fs::current_path(), ec);\n@@ -60,7 +60,7 @@ test01()\n   VERIFY( !ec );\n   iter = fs::recursive_directory_iterator(p, ec);\n   VERIFY( ec );\n-  VERIFY( iter != fs::recursive_directory_iterator() );\n+  VERIFY( iter == fs::recursive_directory_iterator() );\n \n   // Test inaccessible directory, skipping permission denied.\n   const auto opts = fs::directory_options::skip_permission_denied;"}]}