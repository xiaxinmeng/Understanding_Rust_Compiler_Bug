{"sha": "4437b50d212393791a10cf46c45fabebe199ece2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQzN2I1MGQyMTIzOTM3OTFhMTBjZjQ2YzQ1ZmFiZWJlMTk5ZWNlMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-01-14T10:47:48Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-01-14T10:47:48Z"}, "message": "tree-eh.c (add_stmt_to_eh_region_fn): Do not add call_exprs separately.\n\n\t* tree-eh.c (add_stmt_to_eh_region_fn): Do not add call_exprs\n\tseparately.\n\t(remove_stmt_from_eh_region_fn): Do not remove call_exprs.\n\t(verify_eh_throw_stmt_node, verify_eh_throw_table_statements): Kill.\n\t* except.h (verify_eh_throw_table_statements): Kill prototype.\n\t* cfgexpand.c (expand_gimple_basic_block): Propagate Eh regions\n\tinto call exrepssions.\n\t* tree-optimize.c (execute_free_cfg_annotatiosn): Do not call\n\teh trhow verifier.\n\t* tree-cfg.c: Include pointer-set.h.\n\t(verify_node_sharing): Work on pointer set.\n\t(verify_eh_throw_stmt_node): New.\n\t(verify_stmts): Use pointers sets, verify throw_stmt.\n\nFrom-SVN: r120766", "tree": {"sha": "ba3d2a54e12acf5a6f8ebf12cf291d3eb2f05ffb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba3d2a54e12acf5a6f8ebf12cf291d3eb2f05ffb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4437b50d212393791a10cf46c45fabebe199ece2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4437b50d212393791a10cf46c45fabebe199ece2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4437b50d212393791a10cf46c45fabebe199ece2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4437b50d212393791a10cf46c45fabebe199ece2/comments", "author": null, "committer": null, "parents": [{"sha": "843b634331abe3739193f745e5dbf66abc6dfd6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/843b634331abe3739193f745e5dbf66abc6dfd6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/843b634331abe3739193f745e5dbf66abc6dfd6f"}], "stats": {"total": 114, "additions": 59, "deletions": 55}, "files": [{"sha": "e79b7de7a85333efe68c1d77dc281d1a1603132f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4437b50d212393791a10cf46c45fabebe199ece2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4437b50d212393791a10cf46c45fabebe199ece2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4437b50d212393791a10cf46c45fabebe199ece2", "patch": "@@ -1,3 +1,19 @@\n+2007-01-14  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-eh.c (add_stmt_to_eh_region_fn): Do not add call_exprs\n+\tseparately.\n+\t(remove_stmt_from_eh_region_fn): Do not remove call_exprs.\n+\t(verify_eh_throw_stmt_node, verify_eh_throw_table_statements): Kill.\n+\t* except.h (verify_eh_throw_table_statements): Kill prototype.\n+\t* cfgexpand.c (expand_gimple_basic_block): Propagate Eh regions\n+\tinto call exrepssions.\n+\t* tree-optimize.c (execute_free_cfg_annotatiosn): Do not call\n+\teh trhow verifier.\n+\t* tree-cfg.c: Include pointer-set.h.\n+\t(verify_node_sharing): Work on pointer set.\n+\t(verify_eh_throw_stmt_node): New.\n+\t(verify_stmts): Use pointers sets, verify throw_stmt.\n+\n 2007-01-13  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* ipa-reference.c (analyze_function): Consider also addresses taken"}, {"sha": "b91af8ef799ee3ff945466ca398c8f328786eb47", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4437b50d212393791a10cf46c45fabebe199ece2/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4437b50d212393791a10cf46c45fabebe199ece2/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=4437b50d212393791a10cf46c45fabebe199ece2", "patch": "@@ -1512,6 +1512,13 @@ expand_gimple_basic_block (basic_block bb)\n       else\n \t{\n \t  tree call = get_call_expr_in (stmt);\n+\t  int region;\n+\t  /* For the benefit of calls.c, converting all this to rtl,\n+\t     we need to record the call expression, not just the outer\n+\t     modify statement.  */\n+\t  if (call && call != stmt\n+\t      && (region = lookup_stmt_eh_region (stmt)) > 0)\n+\t    add_stmt_to_eh_region (call, region);\n \t  if (call && CALL_EXPR_TAILCALL (call))\n \t    {\n \t      bool can_fallthru;"}, {"sha": "1f7f0ad674267b54de4b4c4cea1ba2d903b54129", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4437b50d212393791a10cf46c45fabebe199ece2/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4437b50d212393791a10cf46c45fabebe199ece2/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=4437b50d212393791a10cf46c45fabebe199ece2", "patch": "@@ -481,6 +481,7 @@ cgraph_release_function_body (struct cgraph_node *node)\n       current_function_decl = node->decl;\n       delete_tree_ssa ();\n       delete_tree_cfg_annotations ();\n+      cfun->eh = NULL;\n       current_function_decl = old_decl;\n       pop_cfun();\n     }"}, {"sha": "5b50d2aa8c89648bfd0c0ea2004123a3c5d8bc27", "filename": "gcc/except.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4437b50d212393791a10cf46c45fabebe199ece2/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4437b50d212393791a10cf46c45fabebe199ece2/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=4437b50d212393791a10cf46c45fabebe199ece2", "patch": "@@ -176,7 +176,3 @@ struct throw_stmt_node GTY(())\n \n extern struct htab *get_eh_throw_stmt_table (struct function *);\n extern void set_eh_throw_stmt_table (struct function *, struct htab *);\n-\n-#ifdef ENABLE_CHECKING\n-extern void verify_eh_throw_table_statements (void);\n-#endif"}, {"sha": "e4971384438f03336d1365378a0a1b9fcb88dff7", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4437b50d212393791a10cf46c45fabebe199ece2/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4437b50d212393791a10cf46c45fabebe199ece2/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=4437b50d212393791a10cf46c45fabebe199ece2", "patch": "@@ -47,6 +47,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"hashtab.h\"\n #include \"tree-ssa-propagate.h\"\n #include \"value-prof.h\"\n+#include \"pointer-set.h\"\n \n /* This file contains functions for building the Control Flow Graph (CFG)\n    for a function tree.  */\n@@ -3525,19 +3526,16 @@ tree_node_can_be_shared (tree t)\n static tree\n verify_node_sharing (tree * tp, int *walk_subtrees, void *data)\n {\n-  htab_t htab = (htab_t) data;\n-  void **slot;\n+  struct pointer_set_t *visited = (struct pointer_set_t *) data;\n \n   if (tree_node_can_be_shared (*tp))\n     {\n       *walk_subtrees = false;\n       return NULL;\n     }\n \n-  slot = htab_find_slot (htab, *tp, INSERT);\n-  if (*slot)\n-    return (tree) *slot;\n-  *slot = *tp;\n+  if (pointer_set_insert (visited, *tp))\n+    return *tp;\n \n   return NULL;\n }\n@@ -3572,6 +3570,22 @@ verify_gimple_tuples (tree t)\n   return walk_tree (&t, verify_gimple_tuples_1, NULL, NULL) != NULL;\n }\n \n+static bool eh_error_found;\n+static int\n+verify_eh_throw_stmt_node (void **slot, void *data)\n+{\n+  struct throw_stmt_node *node = (struct throw_stmt_node *)*slot;\n+  struct pointer_set_t *visited = (struct pointer_set_t *) data;\n+\n+  if (!pointer_set_contains (visited, node->stmt))\n+    {\n+      error (\"Dead STMT in EH table\");\n+      debug_generic_stmt (node->stmt);\n+      eh_error_found = true;\n+    }\n+  return 0;\n+}\n+\n /* Verify the GIMPLE statement chain.  */\n \n void\n@@ -3580,11 +3594,12 @@ verify_stmts (void)\n   basic_block bb;\n   block_stmt_iterator bsi;\n   bool err = false;\n-  htab_t htab;\n+  struct pointer_set_t *visited, *visited_stmts;\n   tree addr;\n \n   timevar_push (TV_TREE_STMT_VERIFY);\n-  htab = htab_create (37, htab_hash_pointer, htab_eq_pointer, NULL);\n+  visited = pointer_set_create ();\n+  visited_stmts = pointer_set_create ();\n \n   FOR_EACH_BB (bb)\n     {\n@@ -3595,6 +3610,7 @@ verify_stmts (void)\n \t{\n \t  int phi_num_args = PHI_NUM_ARGS (phi);\n \n+\t  pointer_set_insert (visited_stmts, phi);\n \t  if (bb_for_stmt (phi) != bb)\n \t    {\n \t      error (\"bb_for_stmt (phi) is set to a wrong basic block\");\n@@ -3625,7 +3641,7 @@ verify_stmts (void)\n \t\t  err |= true;\n \t\t}\n \n-\t      addr = walk_tree (&t, verify_node_sharing, htab, NULL);\n+\t      addr = walk_tree (&t, verify_node_sharing, visited, NULL);\n \t      if (addr)\n \t\t{\n \t\t  error (\"incorrect sharing of tree nodes\");\n@@ -3640,6 +3656,7 @@ verify_stmts (void)\n \t{\n \t  tree stmt = bsi_stmt (bsi);\n \n+\t  pointer_set_insert (visited_stmts, stmt);\n \t  err |= verify_gimple_tuples (stmt);\n \n \t  if (bb_for_stmt (stmt) != bb)\n@@ -3650,7 +3667,7 @@ verify_stmts (void)\n \n \t  bsi_next (&bsi);\n \t  err |= verify_stmt (stmt, bsi_end_p (bsi));\n-\t  addr = walk_tree (&stmt, verify_node_sharing, htab, NULL);\n+\t  addr = walk_tree (&stmt, verify_node_sharing, visited, NULL);\n \t  if (addr)\n \t    {\n \t      error (\"incorrect sharing of tree nodes\");\n@@ -3660,11 +3677,17 @@ verify_stmts (void)\n \t    }\n \t}\n     }\n+  eh_error_found = false;\n+  if (get_eh_throw_stmt_table (cfun))\n+    htab_traverse (get_eh_throw_stmt_table (cfun),\n+\t\t   verify_eh_throw_stmt_node,\n+\t\t   visited_stmts);\n \n-  if (err)\n+  if (err | eh_error_found)\n     internal_error (\"verify_stmts failed\");\n \n-  htab_delete (htab);\n+  pointer_set_destroy (visited);\n+  pointer_set_destroy (visited_stmts);\n   verify_histograms ();\n   timevar_pop (TV_TREE_STMT_VERIFY);\n }"}, {"sha": "2965357f9b5fd5f1c5b8464d47a1269894700758", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4437b50d212393791a10cf46c45fabebe199ece2/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4437b50d212393791a10cf46c45fabebe199ece2/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=4437b50d212393791a10cf46c45fabebe199ece2", "patch": "@@ -112,12 +112,6 @@ add_stmt_to_eh_region_fn (struct function *ifun, tree t, int num)\n   slot = htab_find_slot (get_eh_throw_stmt_table (ifun), n, INSERT);\n   gcc_assert (!*slot);\n   *slot = n;\n-  /* ??? For the benefit of calls.c, converting all this to rtl,\n-     we need to record the call expression, not just the outer\n-     modify statement.  */\n-  if (TREE_CODE (t) == GIMPLE_MODIFY_STMT\n-      && (t = get_call_expr_in (t)))\n-    add_stmt_to_eh_region_fn (ifun, t, num);\n }\n \n void\n@@ -141,12 +135,6 @@ remove_stmt_from_eh_region_fn (struct function *ifun, tree t)\n   if (slot)\n     {\n       htab_clear_slot (get_eh_throw_stmt_table (ifun), slot);\n-      /* ??? For the benefit of calls.c, converting all this to rtl,\n-\t we need to record the call expression, not just the outer\n-\t modify statement.  */\n-      if (TREE_CODE (t) == GIMPLE_MODIFY_STMT\n-\t  && (t = get_call_expr_in (t)))\n-\tremove_stmt_from_eh_region_fn (ifun, t);\n       return true;\n     }\n   else\n@@ -2074,25 +2062,3 @@ maybe_clean_or_replace_eh_stmt (tree old_stmt, tree new_stmt)\n \n   return false;\n }\n-\n-#ifdef ENABLE_CHECKING\n-static int\n-verify_eh_throw_stmt_node (void **slot, void *data ATTRIBUTE_UNUSED)\n-{\n-  struct throw_stmt_node *node = (struct throw_stmt_node *)*slot;\n-\n-  gcc_assert (node->stmt->base.ann == NULL);\n-  return 1;\n-}\n-\n-void\n-verify_eh_throw_table_statements (void)\n-{\n-  if (!get_eh_throw_stmt_table (cfun))\n-    return;\n-  htab_traverse (get_eh_throw_stmt_table (cfun),\n-\t\t verify_eh_throw_stmt_node,\n-\t\t NULL);\n-}\n-\n-#endif"}, {"sha": "a2439be7574f4ef95be103968760febf9f99158e", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4437b50d212393791a10cf46c45fabebe199ece2/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4437b50d212393791a10cf46c45fabebe199ece2/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=4437b50d212393791a10cf46c45fabebe199ece2", "patch": "@@ -247,11 +247,6 @@ execute_free_cfg_annotations (void)\n   /* And get rid of annotations we no longer need.  */\n   delete_tree_cfg_annotations ();\n \n-#ifdef ENABLE_CHECKING\n-  /* Once the statement annotations have been removed, we can verify\n-     the integrity of statements in the EH throw table.  */\n-  verify_eh_throw_table_statements ();\n-#endif\n   return 0;\n }\n "}]}