{"sha": "2be28ee21bfcd151e5753eeab602bd42c5adeb05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJlMjhlZTIxYmZjZDE1MWU1NzUzZWVhYjYwMmJkNDJjNWFkZWIwNQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2001-01-03T14:08:30Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2001-01-03T14:08:30Z"}, "message": "Add extra arg to cse_rtx_varies_p\n\nFrom-SVN: r38656", "tree": {"sha": "40e5f85b83c34ab890ea6559f0ca4249e1f1fc29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40e5f85b83c34ab890ea6559f0ca4249e1f1fc29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2be28ee21bfcd151e5753eeab602bd42c5adeb05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be28ee21bfcd151e5753eeab602bd42c5adeb05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2be28ee21bfcd151e5753eeab602bd42c5adeb05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be28ee21bfcd151e5753eeab602bd42c5adeb05/comments", "author": null, "committer": null, "parents": [{"sha": "a338321ef92cecdd360a097d4c167d5fc882a52c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a338321ef92cecdd360a097d4c167d5fc882a52c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a338321ef92cecdd360a097d4c167d5fc882a52c"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "d73f68c700c62f0f8c7fb351d76bade1d9c47680", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be28ee21bfcd151e5753eeab602bd42c5adeb05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be28ee21bfcd151e5753eeab602bd42c5adeb05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2be28ee21bfcd151e5753eeab602bd42c5adeb05", "patch": "@@ -8,6 +8,9 @@ Wed Jan  3 08:53:50 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* builtins.c (expand_builtin_return_addr): Don't use MEM_ALIAS_SET on\n \ta REG rtx.\n \n+\t* cse.c (cse_rtx_varies_p): Accept additional FROM_ALIAS arg.  All\n+\tcallers changed.\n+\n 2001-01-03  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* combine.c (simplify_shift_const): Even if we're sign-extracting,"}, {"sha": "1b90e842cc622b206033c1e1b21afc68a8f67a6a", "filename": "gcc/cse.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be28ee21bfcd151e5753eeab602bd42c5adeb05/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be28ee21bfcd151e5753eeab602bd42c5adeb05/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=2be28ee21bfcd151e5753eeab602bd42c5adeb05", "patch": "@@ -656,7 +656,7 @@ static struct table_elt *insert PARAMS ((rtx, struct table_elt *, unsigned,\n static void merge_equiv_classes PARAMS ((struct table_elt *,\n \t\t\t\t\t struct table_elt *));\n static void invalidate\t\tPARAMS ((rtx, enum machine_mode));\n-static int cse_rtx_varies_p\tPARAMS ((rtx));\n+static int cse_rtx_varies_p\tPARAMS ((rtx, int));\n static void remove_invalid_refs\tPARAMS ((unsigned int));\n static void remove_invalid_subreg_refs\tPARAMS ((unsigned int, unsigned int,\n \t\t\t\t\t\t enum machine_mode));\n@@ -2691,8 +2691,9 @@ exp_equiv_p (x, y, validate, equal_values)\n    against certain constants or near-constants.  */\n \n static int\n-cse_rtx_varies_p (x)\n+cse_rtx_varies_p (x, from_alias)\n      register rtx x;\n+     int from_alias ATTRIBUTE_UNUSED;\n {\n   /* We need not check for X and the equivalence class being of the same\n      mode because if X is equivalent to a constant in some mode, it\n@@ -2745,7 +2746,7 @@ cse_rtx_varies_p (x)\n \treturn 0;\n     }\n \n-  return rtx_varies_p (x, 0);\n+  return rtx_varies_p (x, from_alias);\n }\n \f\n /* Canonicalize an expression:\n@@ -6595,7 +6596,7 @@ invalidate_skipped_set (dest, set, data)\n \t a BLKmode or nonscalar memory reference or a reference to a\n \t variable address.  */\n       && (MEM_IN_STRUCT_P (dest) || GET_MODE (dest) == BLKmode\n-\t  || cse_rtx_varies_p (XEXP (dest, 0))))\n+\t  || cse_rtx_varies_p (XEXP (dest, 0), 0)))\n     {\n       invalidate_memory ();\n       return;"}]}