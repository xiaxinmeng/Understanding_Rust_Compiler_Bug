{"sha": "f6155fda7b053edb7ef6c84eed778495e57f7aab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYxNTVmZGE3YjA1M2VkYjdlZjZjODRlZWQ3Nzg0OTVlNTdmN2FhYg==", "commit": {"author": {"name": "Stan Shebs", "email": "shebs@apple.com", "date": "2001-07-10T06:18:36Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2001-07-10T06:18:36Z"}, "message": "target.h (struct gcc_target): New fields init_builtins and expand_builtin.\n\n\t* target.h (struct gcc_target): New fields init_builtins and\n\texpand_builtin.\n\t* target-def.h (TARGET_INIT_BUILTINS): New macro.\n\t(TARGET_EXPAND_BUILTIN): New macro.\n\t(TARGET_INITIALIZER): Add them.\n\t* builtins.c: Include target.h.\n\t(expand_builtin): Use targetm.expand_builtin.\n\t(default_init_builtins): New function.\n\t(default_expand_builtin): New function.\n\t* expr.h (default_init_builtins): Declare.\n\t(default_expand_builtin): Declare.\n\t* c-common.c (c_common_nodes_and_builtins): Use\n\ttargetm.init_builtins.\n\t* defaults.h (MD_INIT_BUILTINS): Remove.\n\t* Makefile.in (builtins.o): Depend on target.h.\n\n\t* config/arm/arm.c (TARGET_INIT_BUILTINS): Define.\n\t(TARGET_EXPAND_BUILTIN): Define.\n\t* config/arm/arm.h (MD_INIT_BUILTINS): Remove.\n\t(MD_EXPAND_BUILTIN): Remove.\n\n\t* config/c4x/c4x.c (TARGET_INIT_BUILTINS): Define.\n\t(TARGET_EXPAND_BUILTIN): Define.\n\t(c4x_init_builtins): Make endlink arg a local.\n\t(c4x_print_operand): Fix typos in adjust_address usages.\n\t* config/c4x/c4x-protos.h (c4x_init_builtins): Update decl.\n\t* config/c4x/c4x.h (MD_INIT_BUILTINS): Remove.\n\t(MD_EXPAND_BUILTIN): Remove.\n\n\t* config/i386/i386.c (TARGET_INIT_BUILTINS): Define.\n\t(TARGET_EXPAND_BUILTIN): Define.\n\t(ix86_init_mmx_sse_builtins): New function, was ix86_init_builtins.\n\t(ix86_init_builtins): Call new function only if TARGET_MMX.\n\t* config/i386/i386-protos.h (ix86_init_mmx_sse_builtins): Declare.\n\t* config/i386/i386.h (MD_INIT_BUILTINS): Remove.\n\t(MD_EXPAND_BUILTIN): Remove.\n\n\t* config/ia64/ia64.c (TARGET_INIT_BUILTINS): Define.\n\t(TARGET_EXPAND_BUILTIN): Define.\n\t* config/ia64/ia64.h (MD_INIT_BUILTINS): Remove.\n\t(MD_EXPAND_BUILTIN): Remove.\n\n\t* doc/tm.texi: Document these changes.\n\nFrom-SVN: r43888", "tree": {"sha": "787fa7c05c30080cd6bcbf66af8b1d34d439a975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/787fa7c05c30080cd6bcbf66af8b1d34d439a975"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6155fda7b053edb7ef6c84eed778495e57f7aab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6155fda7b053edb7ef6c84eed778495e57f7aab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6155fda7b053edb7ef6c84eed778495e57f7aab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6155fda7b053edb7ef6c84eed778495e57f7aab/comments", "author": null, "committer": null, "parents": [{"sha": "4c1643f818ced4e9ad62fcaa9bb37695d8ea76af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c1643f818ced4e9ad62fcaa9bb37695d8ea76af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c1643f818ced4e9ad62fcaa9bb37695d8ea76af"}], "stats": {"total": 223, "additions": 148, "deletions": 75}, "files": [{"sha": "bd62dc46827620dbe39ed96a38c0fd262bb8dd7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6155fda7b053edb7ef6c84eed778495e57f7aab", "patch": "@@ -1,3 +1,49 @@\n+2001-07-09  Stan Shebs  <shebs@apple.com>\n+\n+\t* target.h (struct gcc_target): New fields init_builtins and\n+\texpand_builtin.\n+\t* target-def.h (TARGET_INIT_BUILTINS): New macro.\n+\t(TARGET_EXPAND_BUILTIN): New macro.\n+\t(TARGET_INITIALIZER): Add them.\n+\t* builtins.c: Include target.h.\n+\t(expand_builtin): Use targetm.expand_builtin.\n+\t(default_init_builtins): New function.\n+\t(default_expand_builtin): New function.\n+\t* expr.h (default_init_builtins): Declare.\n+\t(default_expand_builtin): Declare.\n+\t* c-common.c (c_common_nodes_and_builtins): Use\n+\ttargetm.init_builtins.\n+\t* defaults.h (MD_INIT_BUILTINS): Remove.\n+\t* Makefile.in (builtins.o): Depend on target.h.\n+\n+\t* config/arm/arm.c (TARGET_INIT_BUILTINS): Define.\n+\t(TARGET_EXPAND_BUILTIN): Define.\n+\t* config/arm/arm.h (MD_INIT_BUILTINS): Remove.\n+\t(MD_EXPAND_BUILTIN): Remove.\n+\n+\t* config/c4x/c4x.c (TARGET_INIT_BUILTINS): Define.\n+\t(TARGET_EXPAND_BUILTIN): Define.\n+\t(c4x_init_builtins): Make endlink arg a local.\n+\t(c4x_print_operand): Fix typos in adjust_address usages.\n+\t* config/c4x/c4x-protos.h (c4x_init_builtins): Update decl.\n+\t* config/c4x/c4x.h (MD_INIT_BUILTINS): Remove.\n+\t(MD_EXPAND_BUILTIN): Remove.\n+\n+\t* config/i386/i386.c (TARGET_INIT_BUILTINS): Define.\n+\t(TARGET_EXPAND_BUILTIN): Define.\n+\t(ix86_init_mmx_sse_builtins): New function, was ix86_init_builtins.\n+\t(ix86_init_builtins): Call new function only if TARGET_MMX.\n+\t* config/i386/i386-protos.h (ix86_init_mmx_sse_builtins): Declare.\n+\t* config/i386/i386.h (MD_INIT_BUILTINS): Remove.\n+\t(MD_EXPAND_BUILTIN): Remove.\n+\n+\t* config/ia64/ia64.c (TARGET_INIT_BUILTINS): Define.\n+\t(TARGET_EXPAND_BUILTIN): Define.\n+\t* config/ia64/ia64.h (MD_INIT_BUILTINS): Remove.\n+\t(MD_EXPAND_BUILTIN): Remove.\n+\n+\t* doc/tm.texi: Document these changes.\n+\n 2001-07-09  Diego Novillo  <dnovillo@redhat.com>\n \n \t* basic-block.h (tree_node): Forward declare if needed."}, {"sha": "8d2fb1c51c2efd872b520c8ff6255967eb749276", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f6155fda7b053edb7ef6c84eed778495e57f7aab", "patch": "@@ -1377,7 +1377,7 @@ expr.o : expr.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h function.h \\\n    output.h typeclass.h hard-reg-set.h toplev.h hard-reg-set.h except.h \\\n    reload.h $(GGC_H) intl.h $(TM_P_H)\n builtins.o : builtins.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n-   function.h $(REGS_H) $(EXPR_H) insn-config.h \\\n+   $(TARGET_H) function.h $(REGS_H) $(EXPR_H) insn-config.h \\\n    $(RECOG_H) output.h typeclass.h hard-reg-set.h toplev.h hard-reg-set.h \\\n    except.h $(TM_P_H) $(PREDICT_H)\n calls.o : calls.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h $(EXPR_H) \\"}, {"sha": "0c84715468024173cceefc907c97e2d8a435dd82", "filename": "gcc/builtins.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=f6155fda7b053edb7ef6c84eed778495e57f7aab", "patch": "@@ -38,6 +38,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"predict.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n \n #define CALLED_AS_BUILT_IN(NODE) \\\n    (!strncmp (IDENTIFIER_POINTER (DECL_NAME (NODE)), \"__builtin_\", 10))\n@@ -3401,10 +3402,8 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n   tree arglist = TREE_OPERAND (exp, 1);\n   enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n \n-#ifdef MD_EXPAND_BUILTIN\n   if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n-    return MD_EXPAND_BUILTIN (exp, target, subtarget, mode, ignore);\n-#endif\n+    return (*targetm.expand_builtin) (exp, target, subtarget, mode, ignore);\n   \n   /* When not optimizing, generate calls to library functions for a certain\n      set of builtins.  */\n@@ -3897,3 +3896,23 @@ validate_arglist VPARAMS ((tree arglist, ...))\n     arglist = TREE_CHAIN (arglist);\n   } while (1);\n }\n+\n+/* Default version of target-specific builtin setup that does nothing.  */\n+\n+void\n+default_init_builtins ()\n+{\n+}\n+\n+/* Default target-specific builtin expander that does nothing.  */\n+\n+rtx\n+default_expand_builtin (exp, target, subtarget, mode, ignore)\n+     tree exp ATTRIBUTE_UNUSED;\n+     rtx target ATTRIBUTE_UNUSED;\n+     rtx subtarget ATTRIBUTE_UNUSED;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+     int ignore ATTRIBUTE_UNUSED;\n+{\n+  return NULL_RTX;\n+}"}, {"sha": "0213843be9ed7c0f5385dd5e92298b355796d9be", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=f6155fda7b053edb7ef6c84eed778495e57f7aab", "patch": "@@ -3009,7 +3009,7 @@ c_common_nodes_and_builtins ()\n \t\t\t\t c_language != clk_cplusplus)\n \t\t\t       ? const_string_type_node : const_ptr_type_node);\n \n-  MD_INIT_BUILTINS;\n+  (*targetm.init_builtins) ();\n \n   /* This is special for C++ so functions can be overloaded.  */\n   wchar_type_node = get_identifier (flag_short_wchar"}, {"sha": "35c520c31ec5944e72d6246357518d45fef584e7", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f6155fda7b053edb7ef6c84eed778495e57f7aab", "patch": "@@ -148,6 +148,12 @@ static void\t arm_set_default_type_attributes\tPARAMS ((tree));\n #undef TARGET_SET_DEFAULT_TYPE_ATTRIBUTES\n #define TARGET_SET_DEFAULT_TYPE_ATTRIBUTES arm_set_default_type_attributes\n \n+#undef TARGET_INIT_BUILTINS\n+#define TARGET_INIT_BUILTINS arm_init_builtins\n+\n+#undef TARGET_EXPAND_BUILTIN\n+#define TARGET_EXPAND_BUILTIN arm_expand_builtin\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */"}, {"sha": "143e1d4614b40b7771e6da407c8178b1a7b14667", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=f6155fda7b053edb7ef6c84eed778495e57f7aab", "patch": "@@ -2954,14 +2954,4 @@ enum arm_builtins\n   ARM_BUILTIN_PREFETCH,\n   ARM_BUILTIN_MAX\n };\n-\n-#define MD_INIT_BUILTINS\t\\\n-  do\t\t\t\t\\\n-    {\t\t\t\t\\\n-      arm_init_builtins ();\t\\\n-    }\t\t\t\t\\\n-  while (0)\n-\n-#define MD_EXPAND_BUILTIN(EXP, TARGET, SUBTARGET, MODE, IGNORE) \\\n-    arm_expand_builtin ((EXP), (TARGET), (SUBTARGET), (MODE), (IGNORE))\n #endif /* ! GCC_ARM_H */"}, {"sha": "99ce1cc5470a930579408a68424e5616bcdc9f00", "filename": "gcc/config/c4x/c4x-protos.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h?ref=f6155fda7b053edb7ef6c84eed778495e57f7aab", "patch": "@@ -69,10 +69,10 @@ extern void c4x_va_start PARAMS ((int, tree, rtx));\n \n extern struct rtx_def *c4x_va_arg PARAMS ((tree, tree));\n \n-extern rtx c4x_expand_builtin PARAMS((tree, rtx, rtx,\n-\t\t\t\t      enum machine_mode, int));\n+extern rtx c4x_expand_builtin PARAMS ((tree, rtx, rtx,\n+\t\t\t\t       enum machine_mode, int));\n \n-extern void c4x_init_builtins PARAMS((tree));\n+extern void c4x_init_builtins PARAMS ((void));\n \n #endif /* TREE_CODE and RTX_CODE*/\n "}, {"sha": "02a3dcd22a7226eb629100b0d68ea5f07c6408ca", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=f6155fda7b053edb7ef6c84eed778495e57f7aab", "patch": "@@ -199,6 +199,12 @@ static void c4x_insert_attributes PARAMS ((tree, tree *));\n #undef TARGET_INSERT_ATTRIBUTES\n #define TARGET_INSERT_ATTRIBUTES c4x_insert_attributes\n \n+#undef TARGET_INIT_BUILTINS\n+#define TARGET_INIT_BUILTINS c4x_init_builtins\n+\n+#undef TARGET_EXPAND_BUILTIN\n+#define TARGET_EXPAND_BUILTIN c4x_expand_builtin\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Called to register all of our global variables with the garbage\n@@ -1925,7 +1931,7 @@ c4x_print_operand (file, op, letter)\n           if (GET_CODE(op1) == CONST_INT || GET_CODE(op1) == SYMBOL_REF)\n \t    {\n \t      asm_fprintf (file, \"\\t%s\\t@\", TARGET_C3X ? \"ldp\" : \"ldpk\");\n-\t      output_address (XEXP (adjust_address (op, VOIDmodem, 1), 0));\n+\t      output_address (XEXP (adjust_address (op, VOIDmode, 1), 0));\n \t      asm_fprintf (file, \"\\n\");\n \t    }\n \t}\n@@ -1947,7 +1953,7 @@ c4x_print_operand (file, op, letter)\n       if (code == MEM && c4x_autoinc_operand (op, Pmode))\n \tbreak;\n       else if (code == MEM)\n-\toutput_address (XEXP (adjust_address (op, 1), VOIDmode, 0));\n+\toutput_address (XEXP (adjust_address (op, VOIDmode, 1), 0));\n       else if (code == REG)\n \tfprintf (file, \"%s\", reg_names[REGNO (op) + 1]);\n       else\n@@ -5037,9 +5043,10 @@ c4x_adjust_cost (insn, link, dep_insn, cost)\n }\n \n void\n-c4x_init_builtins (endlink)\n-     tree endlink;\n+c4x_init_builtins ()\n {\n+  tree endlink = void_list_node;\n+\n   builtin_function (\"fast_ftoi\",\n \t\t    build_function_type \n \t\t    (integer_type_node,"}, {"sha": "102346f6a04352e4dbee2eb1336c1ab2b88d0c54", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=f6155fda7b053edb7ef6c84eed778495e57f7aab", "patch": "@@ -2744,10 +2744,3 @@ enum c4x_builtins\n   C4X_BUILTIN_FRIEEE,\t/*\tfrieee\t   (only C4x)\t*/\n   C4X_BUILTIN_RCPF\t/*\tfast_invf  (only C4x)\t*/\n };\n-\n-#define MD_INIT_BUILTINS do { \\\n-    c4x_init_builtins (void_list_node); \\\n-  } while (0)\n-\n-#define MD_EXPAND_BUILTIN(EXP, TARGET, SUBTARGET, MODE, IGNORE) \\\n-    c4x_expand_builtin ((EXP), (TARGET), (SUBTARGET), (MODE), (IGNORE))"}, {"sha": "f98b95ba2fd6336c3c3627d8b0a484b2a458a06b", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=f6155fda7b053edb7ef6c84eed778495e57f7aab", "patch": "@@ -163,6 +163,7 @@ extern rtx function_arg PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int\n extern void function_arg_advance PARAMS ((CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\ttree, int));\n extern void ix86_init_builtins PARAMS ((void));\n+extern void ix86_init_mmx_sse_builtins PARAMS ((void));\n extern rtx ix86_expand_builtin PARAMS ((tree, rtx, rtx, enum machine_mode, int));\n #endif\n "}, {"sha": "9b32180f22394882d98bf2437db778382d98a0c1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f6155fda7b053edb7ef6c84eed778495e57f7aab", "patch": "@@ -624,6 +624,12 @@ static int ix86_comp_type_attributes PARAMS ((tree, tree));\n #undef TARGET_COMP_TYPE_ATTRIBUTES\n #define TARGET_COMP_TYPE_ATTRIBUTES ix86_comp_type_attributes\n \n+#undef TARGET_INIT_BUILTINS\n+#define TARGET_INIT_BUILTINS ix86_init_builtins\n+\n+#undef TARGET_EXPAND_BUILTIN\n+#define TARGET_EXPAND_BUILTIN ix86_expand_builtin\n+\n #if defined (OSF_OS) || defined (TARGET_OSF1ELF)\n    static void ix86_osf_output_function_prologue PARAMS ((FILE *,\n \t\t\t\t\t\t\t  HOST_WIDE_INT));\n@@ -9340,11 +9346,19 @@ static struct builtin_description bdesc_1arg[] =\n \n };\n \n-/* Expand all the target specific builtins.  This is not called if TARGET_MMX\n+/* Set up all the target-specific builtins.  */\n+void\n+ix86_init_builtins ()\n+{\n+  if (TARGET_MMX)\n+    ix86_init_mmx_sse_builtins ();\n+}\n+\n+/* Set up all the MMX/SSE builtins.  This is not called if TARGET_MMX\n    is zero.  Otherwise, if TARGET_SSE is not set, only expand the MMX\n    builtins.  */\n void\n-ix86_init_builtins ()\n+ix86_init_mmx_sse_builtins ()\n {\n   struct builtin_description * d;\n   size_t i;"}, {"sha": "5869602ef51e56fcc400d1ba2b0aa6eb556e35c6", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f6155fda7b053edb7ef6c84eed778495e57f7aab", "patch": "@@ -2176,21 +2176,6 @@ enum ix86_builtins\n \n   IX86_BUILTIN_MAX\n };\n-\n-/* Initialize the target-specific builtin functions.  Only do something\n-   if TARGET_MMX is nonzero; we take care in ix86_init_builtins not to\n-   enable any SSE builtins if TARGET_SSE is zero.  */\n-#define MD_INIT_BUILTINS\t\\\n-  do\t\t\t\t\\\n-    {\t\t\t\t\\\n-      if (TARGET_MMX)\t\t\\\n-\tix86_init_builtins ();\t\\\n-    }\t\t\t\t\\\n-  while (0)\n-\n-/* Expand a target-specific builtin function.  */\n-#define MD_EXPAND_BUILTIN(EXP, TARGET, SUBTARGET, MODE, IGNORE) \\\n-  ix86_expand_builtin (EXP, TARGET, SUBTARGET, MODE, IGNORE)\n \f\n /* Define this macro if references to a symbol must be treated\n    differently depending on something about the variable or"}, {"sha": "394c910e9cff4236b503f228c4a22e20c1f7a576", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=f6155fda7b053edb7ef6c84eed778495e57f7aab", "patch": "@@ -145,6 +145,12 @@ static void ia64_output_function_end_prologue PARAMS ((FILE *));\n #undef TARGET_VALID_TYPE_ATTRIBUTE\n #define TARGET_VALID_TYPE_ATTRIBUTE ia64_valid_type_attribute\n \n+#undef TARGET_INIT_BUILTINS\n+#define TARGET_INIT_BUILTINS ia64_init_builtins\n+\n+#undef TARGET_EXPAND_BUILTIN\n+#define TARGET_EXPAND_BUILTIN ia64_expand_builtin\n+\n #undef TARGET_ASM_FUNCTION_PROLOGUE\n #define TARGET_ASM_FUNCTION_PROLOGUE ia64_output_function_prologue\n #undef TARGET_ASM_FUNCTION_END_PROLOGUE"}, {"sha": "218b9a017de1adbf8799a3d1520047bb7cdcd7b9", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=f6155fda7b053edb7ef6c84eed778495e57f7aab", "patch": "@@ -2859,11 +2859,4 @@ enum fetchop_code {\n   IA64_ADD_OP, IA64_SUB_OP, IA64_OR_OP, IA64_AND_OP, IA64_XOR_OP, IA64_NAND_OP\n };\n \n-#define MD_INIT_BUILTINS do { \\\n-    ia64_init_builtins (); \\\n-  } while (0)\n-\n-#define MD_EXPAND_BUILTIN(EXP, TARGET, SUBTARGET, MODE, IGNORE) \\\n-    ia64_expand_builtin ((EXP), (TARGET), (SUBTARGET), (MODE), (IGNORE))\n-\n /* End of ia64.h */"}, {"sha": "a1001b992591a8514dacd0c48a6eb6abd8b0d3fe", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=f6155fda7b053edb7ef6c84eed778495e57f7aab", "patch": "@@ -364,12 +364,4 @@ do {\t\t\t\t\t\t\t\t\\\n #define TARGET_ALLOWS_PROFILING_WITHOUT_FRAME_POINTER true\n #endif\n \n-/* Define this macro if you have any machine-specific builtin\n-   functions that need to be defined.  It should be a C expression\n-   that performs the necessary setup. */\n-\n-#ifndef MD_INIT_BUILTINS\n-#define MD_INIT_BUILTINS\n-#endif\n-\n #endif  /* ! GCC_DEFAULTS_H */"}, {"sha": "a06e47cd64456e2da80f20b0762509a1023dacd7", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=f6155fda7b053edb7ef6c84eed778495e57f7aab", "patch": "@@ -8663,10 +8663,9 @@ A C expression to cancel any machine dependent modifications in\n converting code to conditional execution in the basic blocks\n @code{TEST_BB}, @code{THEN_BB}, @code{ELSE_BB}, and @code{JOIN_BB}.\n \n-@findex MD_INIT_BUILTINS\n-@item MD_INIT_BUILTINS\n-Define this macro if you have any machine-specific built-in functions that\n-need to be defined.  It should be a C expression that performs the\n+@deftypefn {Target Hook} void TARGET_INIT_BUILTINS ()\n+Define this hook if you have any machine-specific built-in functions\n+that need to be defined.  It should be a function that performs the\n necessary setup.\n \n Machine specific built-in functions can be useful to expand special machine\n@@ -8678,17 +8677,17 @@ To create a built-in function, call the function @code{builtin_function}\n which is defined by the language front end.  You can use any type nodes set\n up by @code{build_common_tree_nodes} and @code{build_common_tree_nodes_2};\n only language front ends that use these two functions will use\n-@samp{MD_INIT_BUILTINS}.\n+@samp{TARGET_INIT_BUILTINS}.\n \n-@findex MD_EXPAND_BUILTIN\n-@item MD_EXPAND_BUILTIN(@var{exp}, @var{target}, @var{subtarget}, @var{mode}, @var{ignore})\n+@deftypefn {Target Hook} rtx TARGET_EXPAND_BUILTIN (tree @var{exp}, rtx @var{target}, rtx @var{subtarget}, enum machine_mode @var{mode}, int @var{ignore})\n \n Expand a call to a machine specific built-in function that was set up by\n-@samp{MD_INIT_BUILTINS}.  @var{exp} is the expression for the function call;\n-the result should go to @var{target} if that is convenient, and have mode\n-@var{mode} if that is convenient.  @var{subtarget} may be used as the target\n-for computing one of @var{exp}'s operands.  @var{ignore} is nonzero if the value\n-is to be ignored.\n-This macro should return the result of the call to the built-in function.\n+@samp{TARGET_INIT_BUILTINS}.  @var{exp} is the expression for the\n+function call; the result should go to @var{target} if that is\n+convenient, and have mode @var{mode} if that is convenient.\n+@var{subtarget} may be used as the target for computing one of\n+@var{exp}'s operands.  @var{ignore} is nonzero if the value is to be\n+ignored.  This function should return the result of the call to the\n+built-in function.\n \n @end table"}, {"sha": "f43b08ca291f7c6631066493dff7e6778782a903", "filename": "gcc/expr.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=f6155fda7b053edb7ef6c84eed778495e57f7aab", "patch": "@@ -907,6 +907,9 @@ extern rtx expand_builtin PARAMS ((tree, rtx, rtx, enum machine_mode, int));\n extern void std_expand_builtin_va_start PARAMS ((int, tree, rtx));\n extern rtx std_expand_builtin_va_arg PARAMS ((tree, tree));\n extern rtx expand_builtin_va_arg PARAMS ((tree, tree));\n+extern void default_init_builtins PARAMS ((void));\n+extern rtx default_expand_builtin PARAMS ((tree, rtx, rtx,\n+\t\t\t\t\t   enum machine_mode, int));\n #endif\n \n extern void expand_builtin_setjmp_setup PARAMS ((rtx, rtx));"}, {"sha": "264d22bda1af59fb2ad96c0eb719cbba365b86f0", "filename": "gcc/target-def.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=f6155fda7b053edb7ef6c84eed778495e57f7aab", "patch": "@@ -49,6 +49,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_SET_DEFAULT_TYPE_ATTRIBUTES default_set_default_type_attributes\n #define TARGET_INSERT_ATTRIBUTES default_insert_attributes\n \n+/* In builtins.c.  */\n+#define TARGET_INIT_BUILTINS default_init_builtins\n+#define TARGET_EXPAND_BUILTIN default_expand_builtin\n+\n /* The whole shebang.  */\n #define TARGET_INITIALIZER\t\t\t\\\n {\t\t\t\t\t\t\\\n@@ -59,5 +63,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_VALID_TYPE_ATTRIBUTE,\t\t\t\\\n   TARGET_COMP_TYPE_ATTRIBUTES,\t\t\t\\\n   TARGET_SET_DEFAULT_TYPE_ATTRIBUTES,\t\t\\\n-  TARGET_INSERT_ATTRIBUTES\t\t\t\\\n+  TARGET_INSERT_ATTRIBUTES,\t\t\t\\\n+  TARGET_INIT_BUILTINS,\t\t\t\t\\\n+  TARGET_EXPAND_BUILTIN\t\t\t\t\\\n }"}, {"sha": "fdd0bb16aaa5ff8496c0125727690745328fca3e", "filename": "gcc/target.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6155fda7b053edb7ef6c84eed778495e57f7aab/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=f6155fda7b053edb7ef6c84eed778495e57f7aab", "patch": "@@ -44,6 +44,9 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n    to gradually reduce the amount of conditional compilation that is\n    scattered throughout GCC.  */\n \n+/* Forward declaration for the benefit of prototypes.  */\n+struct rtx_def;\n+\n struct gcc_target\n {\n   /* Functions that output assembler for the target.  */\n@@ -93,6 +96,16 @@ struct gcc_target\n \n   /* Insert attributes on the newly created DECL.  */\n   void (* insert_attributes) PARAMS ((tree decl, tree *attributes));\n+\n+  /* Set up target-specific built-in functions.  */\n+  void (* init_builtins) PARAMS ((void));\n+\n+  /* Expand a target-specific builtin.  */\n+  struct rtx_def * (* expand_builtin) PARAMS ((tree exp,\n+\t\t\t\t\t       struct rtx_def *target,\n+\t\t\t\t\t       struct rtx_def *subtarget,\n+\t\t\t\t\t       enum machine_mode mode,\n+\t\t\t\t\t       int ignore));\n };\n \n extern struct gcc_target targetm;"}]}