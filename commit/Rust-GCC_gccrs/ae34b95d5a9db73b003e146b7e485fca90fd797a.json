{"sha": "ae34b95d5a9db73b003e146b7e485fca90fd797a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUzNGI5NWQ1YTlkYjczYjAwM2UxNDZiN2U0ODVmY2E5MGZkNzk3YQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-08T18:59:54Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-08T18:59:54Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r939", "tree": {"sha": "951f57649f408a62574af2243ebdfa417a01ba10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/951f57649f408a62574af2243ebdfa417a01ba10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae34b95d5a9db73b003e146b7e485fca90fd797a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae34b95d5a9db73b003e146b7e485fca90fd797a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae34b95d5a9db73b003e146b7e485fca90fd797a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae34b95d5a9db73b003e146b7e485fca90fd797a/comments", "author": null, "committer": null, "parents": [{"sha": "92b4cee19af3c822c3757ff69b5cd26ef505b616", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92b4cee19af3c822c3757ff69b5cd26ef505b616", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92b4cee19af3c822c3757ff69b5cd26ef505b616"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "0533b4bc95a94598fb15213e78659c0fbe1dbc52", "filename": "gcc/cccp.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae34b95d5a9db73b003e146b7e485fca90fd797a/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae34b95d5a9db73b003e146b7e485fca90fd797a/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=ae34b95d5a9db73b003e146b7e485fca90fd797a", "patch": "@@ -4503,7 +4503,12 @@ pass_thru_directive (buf, limit, op, keyword)\n     *op->bufp++ = ' ';\n   bcopy (buf, op->bufp, limit - buf);\n   op->bufp += (limit - buf);\n+#if 0\n   *op->bufp++ = '\\n';\n+  /* Count the line we have just made in the output,\n+     to get in sync properly.  */\n+  op->lineno++;\n+#endif\n }\n \f\n /* The arglist structure is built by do_define to tell\n@@ -8012,38 +8017,38 @@ initialize_builtins (inp, outp)\n       char directive[2048];\n       register struct directive *dp = &directive_table[0];\n \n-      sprintf (directive, \" __BASE_FILE__ \\\"%s\\\"\",\n+      sprintf (directive, \" __BASE_FILE__ \\\"%s\\\"\\n\",\n \t       instack[0].nominal_fname);\n       output_line_command (inp, outp, 0, same_file);\n       pass_thru_directive (directive, &directive[strlen (directive)], outp, dp);\n \n-      sprintf (directive, \" __VERSION__ \\\"%s\\\"\", version_string);\n+      sprintf (directive, \" __VERSION__ \\\"%s\\\"\\n\", version_string);\n       output_line_command (inp, outp, 0, same_file);\n       pass_thru_directive (directive, &directive[strlen (directive)], outp, dp);\n \n-      sprintf (directive, \" __SIZE_TYPE__ %s\", SIZE_TYPE);\n+      sprintf (directive, \" __SIZE_TYPE__ %s\\n\", SIZE_TYPE);\n       output_line_command (inp, outp, 0, same_file);\n       pass_thru_directive (directive, &directive[strlen (directive)], outp, dp);\n \n-      sprintf (directive, \" __PTRDIFF_TYPE__ %s\", PTRDIFF_TYPE);\n+      sprintf (directive, \" __PTRDIFF_TYPE__ %s\\n\", PTRDIFF_TYPE);\n       output_line_command (inp, outp, 0, same_file);\n       pass_thru_directive (directive, &directive[strlen (directive)], outp, dp);\n \n-      sprintf (directive, \" __WCHAR_TYPE__ %s\", WCHAR_TYPE);\n+      sprintf (directive, \" __WCHAR_TYPE__ %s\\n\", WCHAR_TYPE);\n       output_line_command (inp, outp, 0, same_file);\n       pass_thru_directive (directive, &directive[strlen (directive)], outp, dp);\n \n-      sprintf (directive, \" __WCHAR_TYPE__ %s\", WCHAR_TYPE);\n+      sprintf (directive, \" __WCHAR_TYPE__ %s\\n\", WCHAR_TYPE);\n       output_line_command (inp, outp, 0, same_file);\n       pass_thru_directive (directive, &directive[strlen (directive)], outp, dp);\n \n-      sprintf (directive, \" __DATE__ \\\"%s %2d %4d\\\"\",\n+      sprintf (directive, \" __DATE__ \\\"%s %2d %4d\\\"\\n\",\n \t       monthnames[timebuf->tm_mon],\n \t       timebuf->tm_mday, timebuf->tm_year + 1900);\n       output_line_command (inp, outp, 0, same_file);\n       pass_thru_directive (directive, &directive[strlen (directive)], outp, dp);\n \n-      sprintf (directive, \" __TIME__ \\\"%02d:%02d:%02d\\\"\",\n+      sprintf (directive, \" __TIME__ \\\"%02d:%02d:%02d\\\"\\n\",\n \t       timebuf->tm_hour, timebuf->tm_min, timebuf->tm_sec);\n       output_line_command (inp, outp, 0, same_file);\n       pass_thru_directive (directive, &directive[strlen (directive)], outp, dp);"}]}