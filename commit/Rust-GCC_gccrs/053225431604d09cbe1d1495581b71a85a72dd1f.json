{"sha": "053225431604d09cbe1d1495581b71a85a72dd1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUzMjI1NDMxNjA0ZDA5Y2JlMWQxNDk1NTgxYjcxYTg1YTcyZGQxZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-06-20T14:40:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-06-20T14:40:19Z"}, "message": "re PR c++/48138 (__attribute__((aligned)) should give an error when applied to a typedef or template parameter, at least in C++0x mode.)\n\n\tPR c++/48138\n\t* tree.c (strip_typedefs): Use build_aligned_type.\n\nFrom-SVN: r175215", "tree": {"sha": "2582cba7aba4912881fdb6ed06448bc6d805f397", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2582cba7aba4912881fdb6ed06448bc6d805f397"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/053225431604d09cbe1d1495581b71a85a72dd1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053225431604d09cbe1d1495581b71a85a72dd1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/053225431604d09cbe1d1495581b71a85a72dd1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053225431604d09cbe1d1495581b71a85a72dd1f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2602f8fe61dcf2388890bbbdb938e46ce9d2936b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2602f8fe61dcf2388890bbbdb938e46ce9d2936b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2602f8fe61dcf2388890bbbdb938e46ce9d2936b"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "d88dc6089dac6b17e039c34a56cbb1af96310226", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053225431604d09cbe1d1495581b71a85a72dd1f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053225431604d09cbe1d1495581b71a85a72dd1f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=053225431604d09cbe1d1495581b71a85a72dd1f", "patch": "@@ -1,5 +1,8 @@\n 2011-06-20  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48138\n+\t* tree.c (strip_typedefs): Use build_aligned_type.\n+\n \tPR c++/49205\n \t* call.c (sufficient_parms_p): Allow parameter packs too.\n "}, {"sha": "31005084b3cd80421b9af84beb57739076b219c1", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053225431604d09cbe1d1495581b71a85a72dd1f/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053225431604d09cbe1d1495581b71a85a72dd1f/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=053225431604d09cbe1d1495581b71a85a72dd1f", "patch": "@@ -1167,6 +1167,16 @@ strip_typedefs (tree t)\n \n   if (!result)\n       result = TYPE_MAIN_VARIANT (t);\n+  if (TYPE_USER_ALIGN (t) != TYPE_USER_ALIGN (result)\n+      || TYPE_ALIGN (t) != TYPE_ALIGN (result))\n+    {\n+      gcc_assert (TYPE_USER_ALIGN (t));\n+      if (TYPE_ALIGN (t) == TYPE_ALIGN (result))\n+\tresult = build_variant_type_copy (result);\n+      else\n+\tresult = build_aligned_type (result, TYPE_ALIGN (t));\n+      TYPE_USER_ALIGN (result) = true;\n+    }\n   if (TYPE_ATTRIBUTES (t))\n     result = cp_build_type_attribute_variant (result, TYPE_ATTRIBUTES (t));\n   return cp_build_qualified_type (result, cp_type_quals (t));"}, {"sha": "99d4d3d410a60f59182bd808f303c24ebc5d472d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053225431604d09cbe1d1495581b71a85a72dd1f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053225431604d09cbe1d1495581b71a85a72dd1f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=053225431604d09cbe1d1495581b71a85a72dd1f", "patch": "@@ -1,5 +1,8 @@\n 2011-06-20  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48138\n+\t* g++.dg/ext/attr-aligned01.C: New.\n+\n \tPR c++/49205\n \t* g++.dg/cpp0x/variadic-default.C: New.\n "}, {"sha": "a051c6e98d3090cbd63d13d7dc3dd7f6fc0166c6", "filename": "gcc/testsuite/g++.dg/ext/attr-aligned01.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053225431604d09cbe1d1495581b71a85a72dd1f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-aligned01.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053225431604d09cbe1d1495581b71a85a72dd1f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-aligned01.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-aligned01.C?ref=053225431604d09cbe1d1495581b71a85a72dd1f", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/48138\n+// { dg-options -std=c++0x }\n+\n+#define ALIGNED(x) __attribute__((aligned(x)))\n+#define SA(X) static_assert ((X),#X)\n+\n+template<typename T>\n+void type_alignment(const T&) {\n+  struct { char c; T t; } s;\n+  SA((char*)&s.t - (char*)&s.c == 8);\n+}\n+\n+int main() {\n+  typedef char unaligned[15];\n+  typedef char aligned[15] ALIGNED(8);\n+\n+  aligned z;\n+  type_alignment(z);\n+  type_alignment<unaligned ALIGNED(8)>(z);\n+}"}]}