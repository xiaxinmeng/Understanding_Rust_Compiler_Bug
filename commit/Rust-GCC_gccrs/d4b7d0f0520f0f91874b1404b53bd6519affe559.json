{"sha": "d4b7d0f0520f0f91874b1404b53bd6519affe559", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRiN2QwZjA1MjBmMGY5MTg3NGIxNDA0YjUzYmQ2NTE5YWZmZTU1OQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2008-08-23T21:04:01Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2008-08-23T21:04:01Z"}, "message": "gfortran.h (gfc_component): Add field \"symbol_attribute attr\"...\n\n2008-08-23  Janus Weil  <janus@gcc.gnu.org>\n\n\t* gfortran.h (gfc_component): Add field \"symbol_attribute attr\", remove\n\tfields \"pointer\", \"allocatable\", \"dimension\", \"access\".\n\tRemove functions \"gfc_set_component_attr\" and \"gfc_get_component_attr\".\n\t* interface.c (gfc_compare_derived_types): Ditto.\n\t* trans-array.c (gfc_array_allocate,structure_alloc_comps): Ditto.\n\t* trans-expr.c (gfc_conv_component_ref,gfc_trans_subcomponent_assign,\n\tgfc_conv_structure): Ditto.\n\t* symbol.c (gfc_find_component,free_components,gfc_set_component_attr,\n\tgfc_get_component_attr,verify_bind_c_derived_type,\n\tgenerate_isocbinding_symbol): Ditto.\n\t* decl.c (build_struct): Ditto.\n\t* dump-parse-tree.c (show_components): Ditto.\n\t* trans-stmt.c (gfc_trans_deallocate): Ditto.\n\t* expr.c (gfc_check_assign,gfc_check_pointer_assign,\n\tgfc_default_initializer): Ditto.\n\t* module.c (mio_component): Ditto.\n\t* trans-types.c (copy_dt_decls_ifequal,gfc_get_derived_type): Ditto.\n\t* resolve.c (has_default_initializer,resolve_structure_cons,\n\tgfc_iso_c_func_interface,find_array_spec,resolve_ref,\n\tresolve_deallocate_expr,resolve_allocate_expr,resolve_fl_derived,\n\tresolve_equivalence_derived): Ditto.\n\t* trans-io.c (transfer_expr): Ditto.\n\t* parse.c (parse_derived): Ditto.\n\t* dependency.c (gfc_check_dependency): Ditto.\n\t* primary.c (gfc_variable_attr): Ditto.\n\nFrom-SVN: r139524", "tree": {"sha": "bd962221be72af567e44311a383658a3085306b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd962221be72af567e44311a383658a3085306b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4b7d0f0520f0f91874b1404b53bd6519affe559", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b7d0f0520f0f91874b1404b53bd6519affe559", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4b7d0f0520f0f91874b1404b53bd6519affe559", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b7d0f0520f0f91874b1404b53bd6519affe559/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00fc23337d06089d5662383e2f6bdea105055894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00fc23337d06089d5662383e2f6bdea105055894", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00fc23337d06089d5662383e2f6bdea105055894"}], "stats": {"total": 218, "additions": 106, "deletions": 112}, "files": [{"sha": "e939f96a13ab4f2ab7fb1d58d7e366ce6d5d8f17", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d4b7d0f0520f0f91874b1404b53bd6519affe559", "patch": "@@ -1,3 +1,31 @@\n+2008-08-23  Janus Weil  <janus@gcc.gnu.org>\n+\n+\t* gfortran.h (gfc_component): Add field \"symbol_attribute attr\", remove\n+\tfields \"pointer\", \"allocatable\", \"dimension\", \"access\".\n+\tRemove functions \"gfc_set_component_attr\" and \"gfc_get_component_attr\".\n+\t* interface.c (gfc_compare_derived_types): Ditto.\n+\t* trans-array.c (gfc_array_allocate,structure_alloc_comps): Ditto.\n+\t* trans-expr.c (gfc_conv_component_ref,gfc_trans_subcomponent_assign,\n+\tgfc_conv_structure): Ditto.\n+\t* symbol.c (gfc_find_component,free_components,gfc_set_component_attr,\n+\tgfc_get_component_attr,verify_bind_c_derived_type,\n+\tgenerate_isocbinding_symbol): Ditto.\n+\t* decl.c (build_struct): Ditto.\n+\t* dump-parse-tree.c (show_components): Ditto.\n+\t* trans-stmt.c (gfc_trans_deallocate): Ditto.\n+\t* expr.c (gfc_check_assign,gfc_check_pointer_assign,\n+\tgfc_default_initializer): Ditto.\n+\t* module.c (mio_component): Ditto.\n+\t* trans-types.c (copy_dt_decls_ifequal,gfc_get_derived_type): Ditto.\n+\t* resolve.c (has_default_initializer,resolve_structure_cons,\n+\tgfc_iso_c_func_interface,find_array_spec,resolve_ref,\n+\tresolve_deallocate_expr,resolve_allocate_expr,resolve_fl_derived,\n+\tresolve_equivalence_derived): Ditto.\n+\t* trans-io.c (transfer_expr): Ditto.\n+\t* parse.c (parse_derived): Ditto.\n+\t* dependency.c (gfc_check_dependency): Ditto.\n+\t* primary.c (gfc_variable_attr): Ditto.\n+\n 2008-08-23  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/37076"}, {"sha": "ab4a64f567be443fb83779157875859b22c5884d", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=d4b7d0f0520f0f91874b1404b53bd6519affe559", "patch": "@@ -1403,19 +1403,19 @@ build_struct (const char *name, gfc_charlen *cl, gfc_expr **init,\n \n   c->ts = current_ts;\n   c->ts.cl = cl;\n-  gfc_set_component_attr (c, &current_attr);\n+  c->attr = current_attr;\n \n   c->initializer = *init;\n   *init = NULL;\n \n   c->as = *as;\n   if (c->as != NULL)\n-    c->dimension = 1;\n+    c->attr.dimension = 1;\n   *as = NULL;\n \n   /* Should this ever get more complicated, combine with similar section\n      in add_init_expr_to_sym into a separate function.  */\n-  if (c->ts.type == BT_CHARACTER && !c->pointer && c->initializer && c->ts.cl\n+  if (c->ts.type == BT_CHARACTER && !c->attr.pointer && c->initializer && c->ts.cl\n       && c->ts.cl->length && c->ts.cl->length->expr_type == EXPR_CONSTANT)\n     {\n       int len;\n@@ -1461,9 +1461,9 @@ build_struct (const char *name, gfc_charlen *cl, gfc_expr **init,\n     }\n \n   /* Check array components.  */\n-  if (!c->dimension)\n+  if (!c->attr.dimension)\n     {\n-      if (c->allocatable)\n+      if (c->attr.allocatable)\n \t{\n \t  gfc_error (\"Allocatable component at %C must be an array\");\n \t  return FAILURE;\n@@ -1472,7 +1472,7 @@ build_struct (const char *name, gfc_charlen *cl, gfc_expr **init,\n \treturn SUCCESS;\n     }\n \n-  if (c->pointer)\n+  if (c->attr.pointer)\n     {\n       if (c->as->type != AS_DEFERRED)\n \t{\n@@ -1481,7 +1481,7 @@ build_struct (const char *name, gfc_charlen *cl, gfc_expr **init,\n \t  return FAILURE;\n \t}\n     }\n-  else if (c->allocatable)\n+  else if (c->attr.allocatable)\n     {\n       if (c->as->type != AS_DEFERRED)\n \t{"}, {"sha": "e58c9aaa0e9ba77fbc3b5745dd0098b822fb4e62", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=d4b7d0f0520f0f91874b1404b53bd6519affe559", "patch": "@@ -639,13 +639,13 @@ gfc_check_dependency (gfc_expr *expr1, gfc_expr *expr2, bool identical)\n \t  if (expr1->symtree->n.sym->attr.pointer)\n \t    return 1;\n \t  for (ref = expr1->ref; ref; ref = ref->next)\n-\t    if (ref->type == REF_COMPONENT && ref->u.c.component->pointer)\n+\t    if (ref->type == REF_COMPONENT && ref->u.c.component->attr.pointer)\n \t      return 1;\n \n \t  if (expr2->symtree->n.sym->attr.pointer)\n \t    return 1;\n \t  for (ref = expr2->ref; ref; ref = ref->next)\n-\t    if (ref->type == REF_COMPONENT && ref->u.c.component->pointer)\n+\t    if (ref->type == REF_COMPONENT && ref->u.c.component->attr.pointer)\n \t      return 1;\n \n \t  /* Otherwise distinct symbols have no dependencies.  */"}, {"sha": "c829ebddc3c2c92d3846ded59a8be73ad54a4903", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=d4b7d0f0520f0f91874b1404b53bd6519affe559", "patch": "@@ -631,14 +631,14 @@ show_components (gfc_symbol *sym)\n     {\n       fprintf (dumpfile, \"(%s \", c->name);\n       show_typespec (&c->ts);\n-      if (c->pointer)\n+      if (c->attr.pointer)\n \tfputs (\" POINTER\", dumpfile);\n-      if (c->dimension)\n+      if (c->attr.dimension)\n \tfputs (\" DIMENSION\", dumpfile);\n       fputc (' ', dumpfile);\n       show_array_spec (c->as);\n-      if (c->access)\n-\tfprintf (dumpfile, \" %s\", gfc_code2string (access_types, c->access));\n+      if (c->attr.access)\n+\tfprintf (dumpfile, \" %s\", gfc_code2string (access_types, c->attr.access));\n       fputc (')', dumpfile);\n       if (c->next != NULL)\n \tfputc (' ', dumpfile);"}, {"sha": "297597552bdf3b5286dda96579cd2f24696a5fd3", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=d4b7d0f0520f0f91874b1404b53bd6519affe559", "patch": "@@ -2675,7 +2675,7 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform)\n   has_pointer = sym->attr.pointer;\n \n   for (ref = lvalue->ref; ref; ref = ref->next)\n-    if (ref->type == REF_COMPONENT && ref->u.c.component->pointer)\n+    if (ref->type == REF_COMPONENT && ref->u.c.component->attr.pointer)\n       {\n \thas_pointer = 1;\n \tbreak;\n@@ -2907,7 +2907,7 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n       if (pointer)\n \tcheck_intent_in = 0;\n \n-      if (ref->type == REF_COMPONENT && ref->u.c.component->pointer)\n+      if (ref->type == REF_COMPONENT && ref->u.c.component->attr.pointer)\n \tpointer = 1;\n     }\n \n@@ -3056,7 +3056,7 @@ gfc_default_initializer (gfc_typespec *ts)\n \n   /* See if we have a default initializer.  */\n   for (c = ts->derived->components; c; c = c->next)\n-    if (c->initializer || c->allocatable)\n+    if (c->initializer || c->attr.allocatable)\n       break;\n \n   if (!c)\n@@ -3082,7 +3082,7 @@ gfc_default_initializer (gfc_typespec *ts)\n       if (c->initializer)\n \ttail->expr = gfc_copy_expr (c->initializer);\n \n-      if (c->allocatable)\n+      if (c->attr.allocatable)\n \t{\n \t  tail->expr = gfc_get_expr ();\n \t  tail->expr->expr_type = EXPR_NULL;"}, {"sha": "7ab1b4988f84b4475fba05551214113e8a1833c7", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=d4b7d0f0520f0f91874b1404b53bd6519affe559", "patch": "@@ -834,8 +834,7 @@ typedef struct gfc_component\n   const char *name;\n   gfc_typespec ts;\n \n-  int pointer, allocatable, dimension;\n-  gfc_access access;\n+  symbol_attribute attr;\n   gfc_array_spec *as;\n \n   tree backend_decl;\n@@ -2132,9 +2131,6 @@ bool gfc_is_intrinsic_typename (const char *);\n gfc_typespec *gfc_get_default_type (gfc_symbol *, gfc_namespace *);\n gfc_try gfc_set_default_type (gfc_symbol *, int, gfc_namespace *);\n \n-void gfc_set_component_attr (gfc_component *, symbol_attribute *);\n-void gfc_get_component_attr (symbol_attribute *, gfc_component *);\n-\n void gfc_set_sym_referenced (gfc_symbol *);\n \n gfc_try gfc_add_attribute (symbol_attribute *, locus *);"}, {"sha": "b03be73accc7598215f7f9fb4546038087af9604", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=d4b7d0f0520f0f91874b1404b53bd6519affe559", "patch": "@@ -392,19 +392,19 @@ gfc_compare_derived_types (gfc_symbol *derived1, gfc_symbol *derived2)\n       if (strcmp (dt1->name, dt2->name) != 0)\n \treturn 0;\n \n-      if (dt1->access != dt2->access)\n+      if (dt1->attr.access != dt2->attr.access)\n \treturn 0;\n \n-      if (dt1->pointer != dt2->pointer)\n+      if (dt1->attr.pointer != dt2->attr.pointer)\n \treturn 0;\n \n-      if (dt1->dimension != dt2->dimension)\n+      if (dt1->attr.dimension != dt2->attr.dimension)\n \treturn 0;\n \n-     if (dt1->allocatable != dt2->allocatable)\n+     if (dt1->attr.allocatable != dt2->attr.allocatable)\n \treturn 0;\n \n-      if (dt1->dimension && gfc_compare_array_spec (dt1->as, dt2->as) == 0)\n+      if (dt1->attr.dimension && gfc_compare_array_spec (dt1->as, dt2->as) == 0)\n \treturn 0;\n \n       /* Make sure that link lists do not put this function into an "}, {"sha": "d5cf382154720a385ffd68ee76cf0d7f34ad6920", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=d4b7d0f0520f0f91874b1404b53bd6519affe559", "patch": "@@ -2252,10 +2252,8 @@ mio_component (gfc_component *c)\n   mio_typespec (&c->ts);\n   mio_array_spec (&c->as);\n \n-  mio_integer (&c->dimension);\n-  mio_integer (&c->pointer);\n-  mio_integer (&c->allocatable);\n-  c->access = MIO_NAME (gfc_access) (c->access, access_types); \n+  mio_symbol_attribute (&c->attr);\n+  c->attr.access = MIO_NAME (gfc_access) (c->attr.access, access_types); \n \n   mio_expr (&c->initializer);\n   mio_rparen ();"}, {"sha": "f9c37058c3f47a45121842b5f51b449ceb6807ff", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=d4b7d0f0520f0f91874b1404b53bd6519affe559", "patch": "@@ -1867,15 +1867,15 @@ parse_derived (void)\n   for (c = sym->components; c; c = c->next)\n     {\n       /* Look for allocatable components.  */\n-      if (c->allocatable\n+      if (c->attr.allocatable\n \t  || (c->ts.type == BT_DERIVED && c->ts.derived->attr.alloc_comp))\n \t{\n \t  sym->attr.alloc_comp = 1;\n \t  break;\n \t}\n \n       /* Look for pointer components.  */\n-      if (c->pointer\n+      if (c->attr.pointer\n \t  || (c->ts.type == BT_DERIVED && c->ts.derived->attr.pointer_comp))\n \t{\n \t  sym->attr.pointer_comp = 1;\n@@ -1884,7 +1884,7 @@ parse_derived (void)\n \n       /* Look for private components.  */\n       if (sym->component_access == ACCESS_PRIVATE\n-\t  || c->access == ACCESS_PRIVATE\n+\t  || c->attr.access == ACCESS_PRIVATE\n \t  || (c->ts.type == BT_DERIVED && c->ts.derived->attr.private_comp))\n \t{\n \t  sym->attr.private_comp = 1;"}, {"sha": "4865b7584a23ae6831fc6f4367521d68a75f6140", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=d4b7d0f0520f0f91874b1404b53bd6519affe559", "patch": "@@ -1898,7 +1898,7 @@ gfc_variable_attr (gfc_expr *expr, gfc_typespec *ts)\n \tbreak;\n \n       case REF_COMPONENT:\n-\tgfc_get_component_attr (&attr, ref->u.c.component);\n+\tattr = ref->u.c.component->attr;\n \tif (ts != NULL)\n \t  {\n \t    *ts = ref->u.c.component->ts;\n@@ -1909,8 +1909,8 @@ gfc_variable_attr (gfc_expr *expr, gfc_typespec *ts)\n \t\tts->cl = NULL;\n \t  }\n \n-\tpointer = ref->u.c.component->pointer;\n-\tallocatable = ref->u.c.component->allocatable;\n+\tpointer = ref->u.c.component->attr.pointer;\n+\tallocatable = ref->u.c.component->attr.allocatable;\n \tif (pointer)\n \t  target = 1;\n "}, {"sha": "51d0654c0ef8eb301237edfcdb8fb7bcc4a90ed6", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=d4b7d0f0520f0f91874b1404b53bd6519affe559", "patch": "@@ -648,7 +648,7 @@ has_default_initializer (gfc_symbol *der)\n   for (c = der->components; c; c = c->next)\n     if ((c->ts.type != BT_DERIVED && c->initializer)\n \t|| (c->ts.type == BT_DERIVED\n-\t    && (!c->pointer && has_default_initializer (c->ts.derived))))\n+\t    && (!c->attr.pointer && has_default_initializer (c->ts.derived))))\n       break;\n \n   return c != NULL;\n@@ -810,7 +810,7 @@ resolve_structure_cons (gfc_expr *expr)\n \n       rank = comp->as ? comp->as->rank : 0;\n       if (cons->expr->expr_type != EXPR_NULL && rank != cons->expr->rank\n-\t  && (comp->allocatable || cons->expr->rank))\n+\t  && (comp->attr.allocatable || cons->expr->rank))\n \t{\n \t  gfc_error (\"The rank of the element in the derived type \"\n \t\t     \"constructor at %L does not match that of the \"\n@@ -824,7 +824,7 @@ resolve_structure_cons (gfc_expr *expr)\n       if (!gfc_compare_types (&cons->expr->ts, &comp->ts))\n \t{\n \t  t = FAILURE;\n-\t  if (comp->pointer && cons->expr->ts.type != BT_UNKNOWN)\n+\t  if (comp->attr.pointer && cons->expr->ts.type != BT_UNKNOWN)\n \t    gfc_error (\"The element in the derived type constructor at %L, \"\n \t\t       \"for pointer component '%s', is %s but should be %s\",\n \t\t       &cons->expr->where, comp->name,\n@@ -835,7 +835,7 @@ resolve_structure_cons (gfc_expr *expr)\n \t}\n \n       if (cons->expr->expr_type == EXPR_NULL\n-\t    && !(comp->pointer || comp->allocatable))\n+\t    && !(comp->attr.pointer || comp->attr.allocatable))\n \t{\n \t  t = FAILURE;\n \t  gfc_error (\"The NULL in the derived type constructor at %L is \"\n@@ -844,7 +844,7 @@ resolve_structure_cons (gfc_expr *expr)\n \t\t     comp->name);\n \t}\n \n-      if (!comp->pointer || cons->expr->expr_type == EXPR_NULL)\n+      if (!comp->attr.pointer || cons->expr->expr_type == EXPR_NULL)\n \tcontinue;\n \n       a = gfc_expr_attr (cons->expr);\n@@ -1996,7 +1996,7 @@ gfc_iso_c_func_interface (gfc_symbol *sym, gfc_actual_arglist *args,\n \t  if (!(args_sym->attr.target)\n \t      && !(args_sym->attr.pointer)\n \t      && (parent_ref == NULL ||\n-\t\t  !parent_ref->u.c.component->pointer))\n+\t\t  !parent_ref->u.c.component->attr.pointer))\n             {\n               gfc_error_now (\"Parameter '%s' to '%s' at %L must be either \"\n                              \"a TARGET or an associated pointer\",\n@@ -2084,7 +2084,7 @@ gfc_iso_c_func_interface (gfc_symbol *sym, gfc_actual_arglist *args,\n                 }\n               else if ((args_sym->attr.pointer == 1 ||\n \t\t\t(parent_ref != NULL \n-\t\t\t && parent_ref->u.c.component->pointer))\n+\t\t\t && parent_ref->u.c.component->attr.pointer))\n \t\t       && is_scalar_expr_ptr (args->expr) != SUCCESS)\n                 {\n                   /* Case 1c, section 15.1.2.5, J3/04-007: an associated\n@@ -3624,7 +3624,7 @@ find_array_spec (gfc_expr *e)\n \tif (c == NULL)\n \t  gfc_internal_error (\"find_array_spec(): Component not found\");\n \n-\tif (c->dimension)\n+\tif (c->attr.dimension)\n \t  {\n \t    if (as != NULL)\n \t      gfc_internal_error (\"find_array_spec(): unused as(1)\");\n@@ -3897,14 +3897,14 @@ resolve_ref (gfc_expr *expr)\n \tcase REF_COMPONENT:\n \t  if (current_part_dimension || seen_part_dimension)\n \t    {\n-\t      if (ref->u.c.component->pointer)\n+\t      if (ref->u.c.component->attr.pointer)\n \t\t{\n \t\t  gfc_error (\"Component to the right of a part reference \"\n \t\t\t     \"with nonzero rank must not have the POINTER \"\n \t\t\t     \"attribute at %L\", &expr->where);\n \t\t  return FAILURE;\n \t\t}\n-\t      else if (ref->u.c.component->allocatable)\n+\t      else if (ref->u.c.component->attr.allocatable)\n \t\t{\n \t\t  gfc_error (\"Component to the right of a part reference \"\n \t\t\t     \"with nonzero rank must not have the ALLOCATABLE \"\n@@ -4630,7 +4630,7 @@ resolve_deallocate_expr (gfc_expr *e)\n \tcase REF_COMPONENT:\n \t  allocatable = (ref->u.c.component->as != NULL\n \t\t\t && ref->u.c.component->as->type == AS_DEFERRED);\n-\t  pointer = ref->u.c.component->pointer;\n+\t  pointer = ref->u.c.component->attr.pointer;\n \t  break;\n \n \tcase REF_SUBSTRING:\n@@ -4777,8 +4777,8 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n \t\tallocatable = (ref->u.c.component->as != NULL\n \t\t\t       && ref->u.c.component->as->type == AS_DEFERRED);\n \n-\t\tpointer = ref->u.c.component->pointer;\n-\t\tdimension = ref->u.c.component->dimension;\n+\t\tpointer = ref->u.c.component->attr.pointer;\n+\t\tdimension = ref->u.c.component->attr.dimension;\n \t\tbreak;\n \n \t      case REF_SUBSTRING:\n@@ -7682,7 +7682,7 @@ resolve_fl_derived (gfc_symbol *sym)\n \t    }\n \t}\n \n-      if (c->ts.type == BT_DERIVED && c->pointer\n+      if (c->ts.type == BT_DERIVED && c->attr.pointer\n \t  && c->ts.derived->components == NULL\n \t  && !c->ts.derived->attr.zero_comp)\n \t{\n@@ -7698,11 +7698,11 @@ resolve_fl_derived (gfc_symbol *sym)\n       if (c->ts.type == BT_DERIVED\n \t    && c->ts.derived\n \t    && c->ts.derived->components\n-\t    && c->pointer\n+\t    && c->attr.pointer\n \t    && sym != c->ts.derived)\n \tadd_dt_to_dt_list (c->ts.derived);\n \n-      if (c->pointer || c->allocatable ||  c->as == NULL)\n+      if (c->attr.pointer || c->attr.allocatable ||  c->as == NULL)\n \tcontinue;\n \n       for (i = 0; i < c->as->rank; i++)\n@@ -8891,7 +8891,7 @@ resolve_equivalence_derived (gfc_symbol *derived, gfc_symbol *sym, gfc_expr *e)\n \n       /* Shall not be an object of sequence derived type containing a pointer\n \t in the structure.  */\n-      if (c->pointer)\n+      if (c->attr.pointer)\n \t{\n \t  gfc_error (\"Derived type variable '%s' at %L with pointer \"\n \t\t     \"component(s) cannot be an EQUIVALENCE object\","}, {"sha": "6244eedd5b20042f6d15226ad1752a929f7e127e", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 6, "deletions": 34, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=d4b7d0f0520f0f91874b1404b53bd6519affe559", "patch": "@@ -1874,7 +1874,7 @@ gfc_find_component (gfc_symbol *sym, const char *name)\n \n   else if (sym->attr.use_assoc)\n     {\n-      if (p->access == ACCESS_PRIVATE)\n+      if (p->attr.access == ACCESS_PRIVATE)\n \t{\n \t  gfc_error (\"Component '%s' at %C is a PRIVATE component of '%s'\",\n \t\t     name, sym->name);\n@@ -1883,7 +1883,7 @@ gfc_find_component (gfc_symbol *sym, const char *name)\n \t\n       /* If there were components given and all components are private, error\n \t out at this place.  */\n-      if (p->access != ACCESS_PUBLIC && sym->component_access == ACCESS_PRIVATE)\n+      if (p->attr.access != ACCESS_PUBLIC && sym->component_access == ACCESS_PRIVATE)\n \t{\n \t  gfc_error (\"All components of '%s' are PRIVATE in structure\"\n \t\t     \" constructor at %C\", sym->name);\n@@ -1915,34 +1915,6 @@ free_components (gfc_component *p)\n }\n \n \n-/* Set component attributes from a standard symbol attribute structure.  */\n-\n-void\n-gfc_set_component_attr (gfc_component *c, symbol_attribute *attr)\n-{\n-\n-  c->dimension = attr->dimension;\n-  c->pointer = attr->pointer;\n-  c->allocatable = attr->allocatable;\n-  c->access = attr->access;\n-}\n-\n-\n-/* Get a standard symbol attribute structure given the component\n-   structure.  */\n-\n-void\n-gfc_get_component_attr (symbol_attribute *attr, gfc_component *c)\n-{\n-\n-  gfc_clear_attr (attr);\n-  attr->dimension = c->dimension;\n-  attr->pointer = c->pointer;\n-  attr->allocatable = c->allocatable;\n-  attr->access = c->access;\n-}\n-\n-\n /******************** Statement label management ********************/\n \n /* Comparison function for statement labels, used for managing the\n@@ -3354,7 +3326,7 @@ verify_bind_c_derived_type (gfc_symbol *derived_sym)\n     {\n       /* The components cannot be pointers (fortran sense).  \n          J3/04-007, Section 15.2.3, C1505.\t*/\n-      if (curr_comp->pointer != 0)\n+      if (curr_comp->attr.pointer != 0)\n         {\n           gfc_error (\"Component '%s' at %L cannot have the \"\n                      \"POINTER attribute because it is a member \"\n@@ -3366,7 +3338,7 @@ verify_bind_c_derived_type (gfc_symbol *derived_sym)\n \n       /* The components cannot be allocatable.\n          J3/04-007, Section 15.2.3, C1505.\t*/\n-      if (curr_comp->allocatable != 0)\n+      if (curr_comp->attr.allocatable != 0)\n         {\n           gfc_error (\"Component '%s' at %L cannot have the \"\n                      \"ALLOCATABLE attribute because it is a member \"\n@@ -4081,8 +4053,8 @@ generate_isocbinding_symbol (const char *mod_name, iso_c_binding_symbol s,\n         index = get_c_kind (\"c_ptr\", c_interop_kinds_table);\n         tmp_comp->ts.kind = c_interop_kinds_table[index].value;\n \n-        tmp_comp->pointer = 0;\n-        tmp_comp->dimension = 0;\n+        tmp_comp->attr.pointer = 0;\n+        tmp_comp->attr.dimension = 0;\n \n         /* Mark the component as C interoperable.  */\n         tmp_comp->ts.is_c_interop = 1;"}, {"sha": "2d574a3bc77655cb6126592e7dc8a0f226c77bb2", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=d4b7d0f0520f0f91874b1404b53bd6519affe559", "patch": "@@ -3760,7 +3760,7 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree pstat)\n   if (!prev_ref)\n     allocatable_array = expr->symtree->n.sym->attr.allocatable;\n   else\n-    allocatable_array = prev_ref->u.c.component->allocatable;\n+    allocatable_array = prev_ref->u.c.component->attr.allocatable;\n \n   /* Figure out the size of the array.  */\n   switch (ref->u.ar.type)\n@@ -5530,7 +5530,7 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \tcase DEALLOCATE_ALLOC_COMP:\n \t  /* Do not deallocate the components of ultimate pointer\n \t     components.  */\n-\t  if (cmp_has_alloc_comps && !c->pointer)\n+\t  if (cmp_has_alloc_comps && !c->attr.pointer)\n \t    {\n \t      comp = fold_build3 (COMPONENT_REF, ctype,\n \t\t\t\t  decl, cdecl, NULL_TREE);\n@@ -5540,7 +5540,7 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t      gfc_add_expr_to_block (&fnblock, tmp);\n \t    }\n \n-\t  if (c->allocatable)\n+\t  if (c->attr.allocatable)\n \t    {\n \t      comp = fold_build3 (COMPONENT_REF, ctype,\n \t\t\t\t  decl, cdecl, NULL_TREE);\n@@ -5550,9 +5550,9 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t  break;\n \n \tcase NULLIFY_ALLOC_COMP:\n-\t  if (c->pointer)\n+\t  if (c->attr.pointer)\n \t    continue;\n-\t  else if (c->allocatable)\n+\t  else if (c->attr.allocatable)\n \t    {\n \t      comp = fold_build3 (COMPONENT_REF, ctype,\n \t\t\t\t  decl, cdecl, NULL_TREE);\n@@ -5570,15 +5570,15 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t  break;\n \n \tcase COPY_ALLOC_COMP:\n-\t  if (c->pointer)\n+\t  if (c->attr.pointer)\n \t    continue;\n \n \t  /* We need source and destination components.  */\n \t  comp = fold_build3 (COMPONENT_REF, ctype, decl, cdecl, NULL_TREE);\n \t  dcmp = fold_build3 (COMPONENT_REF, ctype, dest, cdecl, NULL_TREE);\n \t  dcmp = fold_convert (TREE_TYPE (comp), dcmp);\n \n-\t  if (c->allocatable && !cmp_has_alloc_comps)\n+\t  if (c->attr.allocatable && !cmp_has_alloc_comps)\n \t    {\n \t      tmp = gfc_duplicate_allocatable(dcmp, comp, ctype, c->as->rank);\n \t      gfc_add_expr_to_block (&fnblock, tmp);"}, {"sha": "c85cbb262190f561ac6c80242db501a45b6fdead", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=d4b7d0f0520f0f91874b1404b53bd6519affe559", "patch": "@@ -390,7 +390,7 @@ gfc_conv_component_ref (gfc_se * se, gfc_ref * ref)\n       se->string_length = tmp;\n     }\n \n-  if (c->pointer && c->dimension == 0 && c->ts.type != BT_CHARACTER)\n+  if (c->attr.pointer && c->attr.dimension == 0 && c->ts.type != BT_CHARACTER)\n     se->expr = build_fold_indirect_ref (se->expr);\n }\n \n@@ -3432,11 +3432,11 @@ gfc_trans_subcomponent_assign (tree dest, gfc_component * cm, gfc_expr * expr)\n \n   gfc_start_block (&block);\n \n-  if (cm->pointer)\n+  if (cm->attr.pointer)\n     {\n       gfc_init_se (&se, NULL);\n       /* Pointer component.  */\n-      if (cm->dimension)\n+      if (cm->attr.dimension)\n \t{\n \t  /* Array pointer.  */\n \t  if (expr->expr_type == EXPR_NULL)\n@@ -3462,11 +3462,11 @@ gfc_trans_subcomponent_assign (tree dest, gfc_component * cm, gfc_expr * expr)\n \t  gfc_add_block_to_block (&block, &se.post);\n \t}\n     }\n-  else if (cm->dimension)\n+  else if (cm->attr.dimension)\n     {\n-      if (cm->allocatable && expr->expr_type == EXPR_NULL)\n+      if (cm->attr.allocatable && expr->expr_type == EXPR_NULL)\n  \tgfc_conv_descriptor_data_set (&block, dest, null_pointer_node);\n-      else if (cm->allocatable)\n+      else if (cm->attr.allocatable)\n \t{\n \t  tree tmp2;\n \n@@ -3637,11 +3637,11 @@ gfc_conv_structure (gfc_se * se, gfc_expr * expr, int init)\n \t components.  Although the latter have a default initializer\n \t of EXPR_NULL,... by default, the static nullify is not needed\n \t since this is done every time we come into scope.  */\n-      if (!c->expr || cm->allocatable)\n+      if (!c->expr || cm->attr.allocatable)\n         continue;\n \n       val = gfc_conv_initializer (c->expr, &cm->ts,\n-\t  TREE_TYPE (cm->backend_decl), cm->dimension, cm->pointer);\n+\t  TREE_TYPE (cm->backend_decl), cm->attr.dimension, cm->attr.pointer);\n \n       /* Append it to the constructor list.  */\n       CONSTRUCTOR_APPEND_ELT (v, cm->backend_decl, val);"}, {"sha": "2452939be7b39f1304bc9633ed5e5ecffd819ed3", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=d4b7d0f0520f0f91874b1404b53bd6519affe559", "patch": "@@ -2087,14 +2087,14 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr, gfc_code * code)\n \t  tmp = fold_build3 (COMPONENT_REF, TREE_TYPE (field),\n \t\t\t     expr, field, NULL_TREE);\n \n-          if (c->dimension)\n+          if (c->attr.dimension)\n             {\n               tmp = transfer_array_component (tmp, c, & code->loc);\n               gfc_add_expr_to_block (&se->pre, tmp);\n             }\n           else\n             {\n-              if (!c->pointer)\n+              if (!c->attr.pointer)\n                 tmp = build_fold_addr_expr (tmp);\n               transfer_expr (se, &c->ts, tmp, code);\n             }"}, {"sha": "11882d793d9dec6c411f8691d1cecd73cf8865d4", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=d4b7d0f0520f0f91874b1404b53bd6519affe559", "patch": "@@ -3970,7 +3970,7 @@ gfc_trans_deallocate (gfc_code * code)\n \n \t  /* Do not deallocate the components of a derived type\n \t     ultimate pointer component.  */\n-\t  if (!(last && last->u.c.component->pointer)\n+\t  if (!(last && last->u.c.component->attr.pointer)\n \t\t   && !(!last && expr->symtree->n.sym->attr.pointer))\n \t    {\n \t      tmp = gfc_deallocate_alloc_comp (expr->ts.derived, se.expr,"}, {"sha": "49ab6a461e11b09fe2278971fe680afa9706a006", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b7d0f0520f0f91874b1404b53bd6519affe559/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=d4b7d0f0520f0f91874b1404b53bd6519affe559", "patch": "@@ -1764,7 +1764,7 @@ copy_dt_decls_ifequal (gfc_symbol *from, gfc_symbol *to)\n   for (; to_cm; to_cm = to_cm->next, from_cm = from_cm->next)\n     {\n       to_cm->backend_decl = from_cm->backend_decl;\n-      if (!from_cm->pointer && from_cm->ts.type == BT_DERIVED)\n+      if (!from_cm->attr.pointer && from_cm->ts.type == BT_DERIVED)\n \tgfc_get_derived_type (to_cm->ts.derived);\n \n       else if (from_cm->ts.type == BT_CHARACTER)\n@@ -1848,7 +1848,7 @@ gfc_get_derived_type (gfc_symbol * derived)\n       if (c->ts.type != BT_DERIVED)\n \tcontinue;\n \n-      if (!c->pointer || c->ts.derived->backend_decl == NULL)\n+      if (!c->attr.pointer || c->ts.derived->backend_decl == NULL)\n \tc->ts.derived->backend_decl = gfc_get_derived_type (c->ts.derived);\n \n       if (c->ts.derived && c->ts.derived->attr.is_iso_c)\n@@ -1893,12 +1893,12 @@ gfc_get_derived_type (gfc_symbol * derived)\n \n       /* This returns an array descriptor type.  Initialization may be\n          required.  */\n-      if (c->dimension)\n+      if (c->attr.dimension)\n \t{\n-\t  if (c->pointer || c->allocatable)\n+\t  if (c->attr.pointer || c->attr.allocatable)\n \t    {\n \t      enum gfc_array_kind akind;\n-\t      if (c->pointer)\n+\t      if (c->attr.pointer)\n \t\takind = GFC_ARRAY_POINTER;\n \t      else\n \t\takind = GFC_ARRAY_ALLOCATABLE;\n@@ -1910,7 +1910,7 @@ gfc_get_derived_type (gfc_symbol * derived)\n \t    field_type = gfc_get_nodesc_array_type (field_type, c->as,\n \t\t\t\t\t\t    PACKED_STATIC);\n \t}\n-      else if (c->pointer)\n+      else if (c->attr.pointer)\n \tfield_type = build_pointer_type (field_type);\n \n       field = gfc_add_field_to_struct (&fieldlist, typenode,"}]}