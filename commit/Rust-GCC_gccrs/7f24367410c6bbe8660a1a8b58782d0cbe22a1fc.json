{"sha": "7f24367410c6bbe8660a1a8b58782d0cbe22a1fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YyNDM2NzQxMGM2YmJlODY2MGExYThiNTg3ODJkMGNiZTIyYTFmYw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2002-06-13T12:24:00Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2002-06-13T12:24:00Z"}, "message": "alias.c (argument_registers): Remove.\n\n\t* alias.c (argument_registers): Remove.\n\t(init_alias_once): Initialize static_reg_base_value here.  Remove\n\tinitialization of argument_registers.\n\t(init_alias_once_per_function): Remove.\n\t(init_alias_analysis): Copy all the entries from static_reg_base_value\n\tinto new_reg_base_value all at once.\n\t* rtl.h (init_alias_once_per_function): Remove declaration.\n\t* function.c (prepare_function_start): Do not call\n\tinit_alias_once_per_function.\n\n\t* caller-save.c (init_caller_save): Use gen_rtx_INSN instead of\n\tstarting a sequence and emitting an INSN.\n\nFrom-SVN: r54582", "tree": {"sha": "5218699378f79927c1690e5a183af1d8fba6c628", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5218699378f79927c1690e5a183af1d8fba6c628"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f24367410c6bbe8660a1a8b58782d0cbe22a1fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f24367410c6bbe8660a1a8b58782d0cbe22a1fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f24367410c6bbe8660a1a8b58782d0cbe22a1fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f24367410c6bbe8660a1a8b58782d0cbe22a1fc/comments", "author": null, "committer": null, "parents": [{"sha": "a336f2e55fbd2f1da98a44d4f92679f988d1a29e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a336f2e55fbd2f1da98a44d4f92679f988d1a29e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a336f2e55fbd2f1da98a44d4f92679f988d1a29e"}], "stats": {"total": 73, "additions": 21, "deletions": 52}, "files": [{"sha": "dfca31f7ea50aa78246fb0d9f99d92051101d88e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f24367410c6bbe8660a1a8b58782d0cbe22a1fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f24367410c6bbe8660a1a8b58782d0cbe22a1fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f24367410c6bbe8660a1a8b58782d0cbe22a1fc", "patch": "@@ -1,3 +1,18 @@\n+2002-06-13  Jeffrey Law  <law@redhat.com>\n+\n+\t* alias.c (argument_registers): Remove.\n+\t(init_alias_once): Initialize static_reg_base_value here.  Remove\n+\tinitialization of argument_registers.\n+\t(init_alias_once_per_function): Remove.\n+\t(init_alias_analysis): Copy all the entries from static_reg_base_value\n+\tinto new_reg_base_value all at once.\n+\t* rtl.h (init_alias_once_per_function): Remove declaration.\n+\t* function.c (prepare_function_start): Do not call\n+\tinit_alias_once_per_function.\n+\n+\t* caller-save.c (init_caller_save): Use gen_rtx_INSN instead of\n+\tstarting a sequence and emitting an INSN.\n+\n 2002-06-13  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/r3900.h (MIPS_CPU_STRING_DEFAULT): Make lower case."}, {"sha": "d892926b453bed06aa67d3b3ca7674f28d78e1b6", "filename": "gcc/alias.c", "status": "modified", "additions": 4, "deletions": 42, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f24367410c6bbe8660a1a8b58782d0cbe22a1fc/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f24367410c6bbe8660a1a8b58782d0cbe22a1fc/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=7f24367410c6bbe8660a1a8b58782d0cbe22a1fc", "patch": "@@ -2621,8 +2621,6 @@ mark_constant_function ()\n }\n \f\n \n-static HARD_REG_SET argument_registers;\n-\n void\n init_alias_once ()\n {\n@@ -2637,36 +2635,9 @@ init_alias_once ()\n        numbers, so translate if necessary due to register windows.  */\n     if (FUNCTION_ARG_REGNO_P (OUTGOING_REGNO (i))\n \t&& HARD_REGNO_MODE_OK (i, Pmode))\n-      SET_HARD_REG_BIT (argument_registers, i);\n-\n-  alias_sets = splay_tree_new (splay_tree_compare_ints, 0, 0);\n-}\n-\n-/* Per-function initializer for the aliasing code.\n-\n-   Allocate RTL for argument and other special use registers once\n-   per function here intead of multiple times per function in \n-   init_alias_analysis.  */\n-\n-void\n-init_alias_once_per_function ()\n-{\n-  int i;\n-\n-  /* Generate and mark all hard registers which may contain an address.\n-     The stack, frame and argument pointers may contain an address.\n-     An argument register which can hold a Pmode value may contain\n-     an address even if it is not in BASE_REGS.\n-\n-     The address expression is VOIDmode for an argument and\n-     Pmode for other registers.  */\n-\n-  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-    if (TEST_HARD_REG_BIT (argument_registers, i))\n       static_reg_base_value[i]\n \t= gen_rtx_ADDRESS (VOIDmode, gen_rtx_REG (Pmode, i));\n \n-\n   static_reg_base_value[STACK_POINTER_REGNUM]\n     = gen_rtx_ADDRESS (Pmode, stack_pointer_rtx);\n   static_reg_base_value[ARG_POINTER_REGNUM]\n@@ -2677,6 +2648,8 @@ init_alias_once_per_function ()\n   static_reg_base_value[HARD_FRAME_POINTER_REGNUM]\n     = gen_rtx_ADDRESS (Pmode, hard_frame_pointer_rtx);\n #endif\n+\n+  alias_sets = splay_tree_new (splay_tree_compare_ints, 0, 0);\n }\n \n /* Initialize the aliasing machinery.  Initialize the REG_KNOWN_VALUE\n@@ -2764,20 +2737,9 @@ init_alias_analysis ()\n \t The address expression is VOIDmode for an argument and\n \t Pmode for other registers.  */\n \n-      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-\tif (TEST_HARD_REG_BIT (argument_registers, i))\n-\t  new_reg_base_value[i] = static_reg_base_value[i];\n+      memcpy (new_reg_base_value, static_reg_base_value,\n+\t      FIRST_PSEUDO_REGISTER * sizeof (rtx));\n \n-      new_reg_base_value[STACK_POINTER_REGNUM]\n-\t= static_reg_base_value[STACK_POINTER_REGNUM];\n-      new_reg_base_value[ARG_POINTER_REGNUM]\n-\t= static_reg_base_value[ARG_POINTER_REGNUM];\n-      new_reg_base_value[FRAME_POINTER_REGNUM]\n-\t= static_reg_base_value[FRAME_POINTER_REGNUM];\n-#if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n-      new_reg_base_value[HARD_FRAME_POINTER_REGNUM]\n-\t= static_reg_base_value[HARD_FRAME_POINTER_REGNUM];\n-#endif\n       /* Walk the insns adding values to the new_reg_base_value array.  */\n       for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n \t{"}, {"sha": "b7e3ceac7b5da8ccea592cadfe9a0cade857b2fc", "filename": "gcc/caller-save.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f24367410c6bbe8660a1a8b58782d0cbe22a1fc/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f24367410c6bbe8660a1a8b58782d0cbe22a1fc/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=7f24367410c6bbe8660a1a8b58782d0cbe22a1fc", "patch": "@@ -192,10 +192,8 @@ init_caller_save ()\n   savepat = gen_rtx_SET (VOIDmode, test_mem, test_reg);\n   restpat = gen_rtx_SET (VOIDmode, test_reg, test_mem);\n \n-  start_sequence ();\n-\n-  saveinsn = emit_insn (savepat);\n-  restinsn = emit_insn (restpat);\n+  saveinsn = gen_rtx_INSN (VOIDmode, 0, 0, 0, 0, 0, savepat, -1, 0, 0);\n+  restinsn = gen_rtx_INSN (VOIDmode, 0, 0, 0, 0, 0, restpat, -1, 0, 0);\n \n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     for (mode = 0 ; mode < MAX_MACHINE_MODE; mode++)\n@@ -251,8 +249,6 @@ init_caller_save ()\n \t      SET_HARD_REG_BIT (call_fixed_reg_set, i);\n \t    }\n \t}\n-\n-  end_sequence ();\n }\n \f\n /* Initialize save areas by showing that we haven't allocated any yet.  */"}, {"sha": "95306777038e1422de2263dda1ee44fd55fb1fe8", "filename": "gcc/function.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f24367410c6bbe8660a1a8b58782d0cbe22a1fc/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f24367410c6bbe8660a1a8b58782d0cbe22a1fc/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=7f24367410c6bbe8660a1a8b58782d0cbe22a1fc", "patch": "@@ -6210,9 +6210,6 @@ prepare_function_start ()\n   /* Initialize the RTL mechanism.  */\n   init_emit ();\n \n-  /* Do per-function initialization of the alias analyzer.  */\n-  init_alias_once_per_function ();\n-\n   /* Initialize the queue of pending postincrement and postdecrements,\n      and some other info in expr.c.  */\n   init_expr ();"}, {"sha": "57a0be416ab1ada2a76b66f628c520dd0ff75bfd", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f24367410c6bbe8660a1a8b58782d0cbe22a1fc/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f24367410c6bbe8660a1a8b58782d0cbe22a1fc/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=7f24367410c6bbe8660a1a8b58782d0cbe22a1fc", "patch": "@@ -2160,7 +2160,6 @@ extern int anti_dependence\t\tPARAMS ((rtx, rtx));\n extern int output_dependence\t\tPARAMS ((rtx, rtx));\n extern void mark_constant_function\tPARAMS ((void));\n extern void init_alias_once\t\tPARAMS ((void));\n-extern void init_alias_once_per_function PARAMS ((void));\n extern void init_alias_analysis\t\tPARAMS ((void));\n extern void end_alias_analysis\t\tPARAMS ((void));\n extern rtx addr_side_effect_eval\tPARAMS ((rtx, int, int));"}]}