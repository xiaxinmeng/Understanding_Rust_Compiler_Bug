{"sha": "8be568519bf08098e056567d57a75c3f38416ac2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJlNTY4NTE5YmYwODA5OGUwNTY1NjdkNTdhNzVjM2YzODQxNmFjMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2015-03-26T18:31:11Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2015-03-26T18:31:11Z"}, "message": "re PR libstdc++/65033 (C++11 atomics: is_lock_free result does not always match the real lock-free property)\n\nPR libstdc++/65033\n\n * include/bits/atomic_base.h (__atomic_base<T>::is_lock_free): Build\n a fake pointer indicating type alignment.\n (__atomic_base<T *>::is_lock_free): Likewise.\n * include/std/atomic (atomic<T>::is_lock_free): Likewise.\n\nFrom-SVN: r221701", "tree": {"sha": "cfeb96ebc205c54e8e802c9284eb6658d380533e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfeb96ebc205c54e8e802c9284eb6658d380533e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8be568519bf08098e056567d57a75c3f38416ac2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be568519bf08098e056567d57a75c3f38416ac2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8be568519bf08098e056567d57a75c3f38416ac2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be568519bf08098e056567d57a75c3f38416ac2/comments", "author": null, "committer": null, "parents": [{"sha": "41b38772ccd584a384945c7b1fdd61f4712d9792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41b38772ccd584a384945c7b1fdd61f4712d9792", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41b38772ccd584a384945c7b1fdd61f4712d9792"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "cd4640a39e30947dd812dba90655c66fdd29d902", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be568519bf08098e056567d57a75c3f38416ac2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be568519bf08098e056567d57a75c3f38416ac2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8be568519bf08098e056567d57a75c3f38416ac2", "patch": "@@ -1,3 +1,11 @@\n+2015-03-26  Richard Henderson  <rth@redhat.com>\n+\n+\tPR libstdc++/65033\n+\t* include/bits/atomic_base.h (__atomic_base<T>::is_lock_free): Build\n+\ta fake pointer indicating type alignment.\n+\t(__atomic_base<T *>::is_lock_free): Likewise.\n+\t* include/std/atomic (atomic<T>::is_lock_free): Likewise.\n+\n 2015-03-25  Alan Lawrence  <alan.lawrence@arm.com>\n \n \tPR libstdc++/33394"}, {"sha": "8104c986b5298c3abe6b7983e8099a2e080630e8", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be568519bf08098e056567d57a75c3f38416ac2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be568519bf08098e056567d57a75c3f38416ac2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=8be568519bf08098e056567d57a75c3f38416ac2", "patch": "@@ -346,11 +346,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       bool\n       is_lock_free() const noexcept\n-      { return __atomic_is_lock_free(sizeof(_M_i), nullptr); }\n+      {\n+\t// Produce a fake, minimally aligned pointer.\n+\tvoid *__a = reinterpret_cast<void *>(-__alignof(_M_i));\n+\treturn __atomic_is_lock_free(sizeof(_M_i), __a);\n+      }\n \n       bool\n       is_lock_free() const volatile noexcept\n-      { return __atomic_is_lock_free(sizeof(_M_i), nullptr); }\n+      {\n+\t// Produce a fake, minimally aligned pointer.\n+\tvoid *__a = reinterpret_cast<void *>(-__alignof(_M_i));\n+\treturn __atomic_is_lock_free(sizeof(_M_i), __a);\n+      }\n \n       _GLIBCXX_ALWAYS_INLINE void\n       store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept\n@@ -653,11 +661,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       bool\n       is_lock_free() const noexcept\n-      { return __atomic_is_lock_free(sizeof(__pointer_type), nullptr); }\n+      {\n+\t// Produce a fake, minimally aligned pointer.\n+\tvoid *__a = reinterpret_cast<void *>(-__alignof(_M_p));\n+\treturn __atomic_is_lock_free(sizeof(_M_p), __a);\n+      }\n \n       bool\n       is_lock_free() const volatile noexcept\n-      { return __atomic_is_lock_free(sizeof(__pointer_type), nullptr); }\n+      {\n+\t// Produce a fake, minimally aligned pointer.\n+\tvoid *__a = reinterpret_cast<void *>(-__alignof(_M_p));\n+\treturn __atomic_is_lock_free(sizeof(_M_p), __a);\n+      }\n \n       _GLIBCXX_ALWAYS_INLINE void\n       store(__pointer_type __p,"}, {"sha": "cc4b5f1a94c04869bee7401b62c0e1f71be90c01", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be568519bf08098e056567d57a75c3f38416ac2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be568519bf08098e056567d57a75c3f38416ac2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=8be568519bf08098e056567d57a75c3f38416ac2", "patch": "@@ -198,11 +198,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       bool\n       is_lock_free() const noexcept\n-      { return __atomic_is_lock_free(sizeof(_M_i), nullptr); }\n+      {\n+\t// Produce a fake, minimally aligned pointer.\n+\tvoid *__a = reinterpret_cast<void *>(-__alignof(_M_i));\n+\treturn __atomic_is_lock_free(sizeof(_M_i), __a);\n+      }\n \n       bool\n       is_lock_free() const volatile noexcept\n-      { return __atomic_is_lock_free(sizeof(_M_i), nullptr); }\n+      {\n+\t// Produce a fake, minimally aligned pointer.\n+\tvoid *__a = reinterpret_cast<void *>(-__alignof(_M_i));\n+\treturn __atomic_is_lock_free(sizeof(_M_i), __a);\n+      }\n \n       void\n       store(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept"}]}