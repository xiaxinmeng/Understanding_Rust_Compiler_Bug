{"sha": "f10ed928e2f8ecc2c859abff8f2f9296b11b8d95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEwZWQ5MjhlMmY4ZWNjMmM4NTlhYmZmOGYyZjkyOTZiMTFiOGQ5NQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-09-21T13:28:58Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-09-21T13:28:58Z"}, "message": "libstdc++: Make std::assume_aligned a constexpr function [PR 97132]\n\nThe cast from void* to T* in std::assume_aligned is not valid in a\nconstexpr function. The optimization hint is redundant during constant\nevaluation anyway (the compiler can see the object and knows its\nalignment). Simply return the original pointer without applying the\n__builtin_assume_aligned hint to it when doing constant evaluation.\n\nThis change also removes the preprocessor branch that works around\nuintptr_t not being available. We already assume that type is present\nelsewhere in the library.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/97132\n\t* include/bits/align.h (align) [!_GLIBCXX_USE_C99_STDINT_TR1]:\n\tRemove unused code.\n\t(assume_aligned): Do not use __builtin_assume_aligned during\n\tconstant evaluation.\n\t* testsuite/20_util/assume_aligned/1.cc: Improve test.\n\t* testsuite/20_util/assume_aligned/97132.cc: New test.", "tree": {"sha": "0f741066ee5f536a96dd61d3f28e9a9ac83498df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f741066ee5f536a96dd61d3f28e9a9ac83498df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f10ed928e2f8ecc2c859abff8f2f9296b11b8d95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10ed928e2f8ecc2c859abff8f2f9296b11b8d95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f10ed928e2f8ecc2c859abff8f2f9296b11b8d95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10ed928e2f8ecc2c859abff8f2f9296b11b8d95/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5187b01a4fcbea82f52798240595a32ddf7e0fe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5187b01a4fcbea82f52798240595a32ddf7e0fe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5187b01a4fcbea82f52798240595a32ddf7e0fe5"}], "stats": {"total": 83, "additions": 71, "deletions": 12}, "files": [{"sha": "faa92bec2f892bec7cbabb88f93f203c57da52f1", "filename": "libstdc++-v3/include/bits/align.h", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10ed928e2f8ecc2c859abff8f2f9296b11b8d95/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falign.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10ed928e2f8ecc2c859abff8f2f9296b11b8d95/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falign.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falign.h?ref=f10ed928e2f8ecc2c859abff8f2f9296b11b8d95", "patch": "@@ -41,7 +41,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n /**\n  *  @brief Fit aligned storage in buffer.\n- *  @ingroup memory\n  *\n  *  This function tries to fit @a __size bytes of storage with alignment\n  *  @a __align into the buffer @a __ptr of size @a __space bytes.  If such\n@@ -56,18 +55,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n  *  @param __space   Size of the buffer pointed to by @a __ptr.\n  *  @return the updated pointer if the aligned storage fits, otherwise nullptr.\n  *\n+ *  @ingroup memory\n  */\n inline void*\n align(size_t __align, size_t __size, void*& __ptr, size_t& __space) noexcept\n {\n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n   const auto __intptr = reinterpret_cast<uintptr_t>(__ptr);\n-#else\n-  // Cannot use std::uintptr_t so assume that std::size_t can be used instead.\n-  static_assert(sizeof(size_t) >= sizeof(void*),\n-      \"std::size_t must be a suitable substitute for std::uintptr_t\");\n-  const auto __intptr = reinterpret_cast<unsigned long long>(__ptr);\n-#endif\n   const auto __aligned = (__intptr - 1u + __align) & -__align;\n   const auto __diff = __aligned - __intptr;\n   if ((__size + __diff) > __space)\n@@ -86,15 +79,26 @@ align(size_t __align, size_t __size, void*& __ptr, size_t& __space) noexcept\n    *  @tparam _Align An alignment value (i.e. a power of two)\n    *  @tparam _Tp    An object type\n    *  @param  __ptr  A pointer that is aligned to _Align\n+   *\n+   *  C++20 20.10.6 [ptr.align]\n+   *\n    *  @ingroup memory\n    */\n   template<size_t _Align, class _Tp>\n     [[nodiscard,__gnu__::__always_inline__]]\n-    constexpr _Tp* assume_aligned(_Tp* __ptr)\n+    constexpr _Tp*\n+    assume_aligned(_Tp* __ptr) noexcept\n     {\n       static_assert(std::has_single_bit(_Align));\n-      _GLIBCXX_DEBUG_ASSERT((std::uintptr_t)__ptr % _Align == 0);\n-      return static_cast<_Tp*>(__builtin_assume_aligned(__ptr, _Align));\n+      if (std::is_constant_evaluated())\n+\treturn __ptr;\n+      else\n+\t{\n+\t  // This function is expected to be used in hot code, where\n+\t  // __glibcxx_assert would add unwanted overhead.\n+\t  _GLIBCXX_DEBUG_ASSERT((uintptr_t)__ptr % _Align == 0);\n+\t  return static_cast<_Tp*>(__builtin_assume_aligned(__ptr, _Align));\n+\t}\n     }\n #endif // C++2a\n "}, {"sha": "16bf22caefeb70e8d6c65b2caac17bad178c1dd3", "filename": "libstdc++-v3/testsuite/20_util/assume_aligned/1.cc", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10ed928e2f8ecc2c859abff8f2f9296b11b8d95/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fassume_aligned%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10ed928e2f8ecc2c859abff8f2f9296b11b8d95/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fassume_aligned%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fassume_aligned%2F1.cc?ref=f10ed928e2f8ecc2c859abff8f2f9296b11b8d95", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++2a\" }\n+// { dg-options \"-std=gnu++2a -O2\" }\n // { dg-do run { target c++2a } }\n \n #include <memory>\n@@ -29,7 +29,28 @@ test01()\n   VERIFY( p == &i );\n }\n \n+[[gnu::noipa,gnu::noinline]]\n+int*\n+create_aligned(std::size_t alignment, void* p, std::size_t n)\n+{\n+  return ::new(std::align(alignment, sizeof(int), p, n)) int(42);\n+}\n+\n+extern \"C\" void undefined(); // call to this should be optimized away\n+\n+void\n+test02()\n+{\n+  unsigned char buf[sizeof(int) * 128];\n+  int* p = create_aligned(64, buf + 1, sizeof(buf) - 1);\n+  int* q = std::assume_aligned<64>(p);\n+  if ((std::uintptr_t)q % 64)\n+    undefined();\n+  VERIFY( p == q );\n+}\n+\n int main()\n {\n   test01();\n+  test02();\n }"}, {"sha": "887e347065132fb511b3d161a48d4ab793cd277f", "filename": "libstdc++-v3/testsuite/20_util/assume_aligned/97132.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10ed928e2f8ecc2c859abff8f2f9296b11b8d95/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fassume_aligned%2F97132.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10ed928e2f8ecc2c859abff8f2f9296b11b8d95/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fassume_aligned%2F97132.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fassume_aligned%2F97132.cc?ref=f10ed928e2f8ecc2c859abff8f2f9296b11b8d95", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <memory>\n+\n+// PR libstdc++/97132 - assume_aligned is not constexpr\n+\n+constexpr bool test01()\n+{\n+  struct alignas(32) S { int i; };\n+  S s{42};\n+  int* p = std::assume_aligned<32>(&s.i);\n+  *p = 48;\n+  return s.i == 48;\n+}\n+\n+static_assert( test01() );"}]}