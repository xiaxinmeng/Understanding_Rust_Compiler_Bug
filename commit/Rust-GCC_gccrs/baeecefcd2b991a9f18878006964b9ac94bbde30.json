{"sha": "baeecefcd2b991a9f18878006964b9ac94bbde30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFlZWNlZmNkMmI5OTFhOWYxODg3ODAwNjk2NGI5YWM5NGJiZGUzMA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2012-03-21T11:19:23Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2012-03-21T11:19:23Z"}, "message": "neon.md (neon_vget_lanev2di): Use gen_lowpart and gen_highpart.\n\n* neon.md (neon_vget_lanev2di): Use gen_lowpart and gen_highpart.\n* config/arm/neon.ml (Fixed_return_reg): Renamed to fixed_vector_reg.\nAll callers changed.\n(Fixed_core_reg): New feature.\n(Vget_lane [sizes S64 and U64]): Add Fixed_core_reg.  Allow fmrrd in\ndisassembly.\n* neon-testgen.ml: Handle Fixed_core_reg.\n\n* gcc.target/arm/neon/vgetQ_laneu64.c: Regenerated.\n* gcc.target/arm/neon/vgetQ_lanes64.c: Likewise.\n\nFrom-SVN: r185603", "tree": {"sha": "8dd9b4b1472e94b3d93e543f0337299f58f2adfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dd9b4b1472e94b3d93e543f0337299f58f2adfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/baeecefcd2b991a9f18878006964b9ac94bbde30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baeecefcd2b991a9f18878006964b9ac94bbde30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baeecefcd2b991a9f18878006964b9ac94bbde30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baeecefcd2b991a9f18878006964b9ac94bbde30/comments", "author": null, "committer": null, "parents": [{"sha": "216c92c9844afbca5fb8d8881daa48e0bb4ea5ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/216c92c9844afbca5fb8d8881daa48e0bb4ea5ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/216c92c9844afbca5fb8d8881daa48e0bb4ea5ae"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "56893bcf44f0b29b36861751c82c247a189f71c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baeecefcd2b991a9f18878006964b9ac94bbde30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baeecefcd2b991a9f18878006964b9ac94bbde30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=baeecefcd2b991a9f18878006964b9ac94bbde30", "patch": "@@ -1,3 +1,13 @@\n+2012-03-21  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* neon.md (neon_vget_lanev2di): Use gen_lowpart and gen_highpart.\n+\t* config/arm/neon.ml (Fixed_return_reg): Renamed to fixed_vector_reg.\n+\tAll callers changed.\n+\t(Fixed_core_reg): New feature.\n+\t(Vget_lane [sizes S64 and U64]): Add Fixed_core_reg.  Allow fmrrd in\n+\tdisassembly.\n+\t* neon-testgen.ml: Handle Fixed_core_reg.\n+\n 2012-03-21  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/arm/arm.c (thumb2_reorg): Add complete support"}, {"sha": "a69a53917b10be4549c1f847283090b5e39c5935", "filename": "gcc/config/arm/neon-testgen.ml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baeecefcd2b991a9f18878006964b9ac94bbde30/gcc%2Fconfig%2Farm%2Fneon-testgen.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baeecefcd2b991a9f18878006964b9ac94bbde30/gcc%2Fconfig%2Farm%2Fneon-testgen.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon-testgen.ml?ref=baeecefcd2b991a9f18878006964b9ac94bbde30", "patch": "@@ -79,9 +79,12 @@ let emit_automatics chan c_types features =\n           (* The intrinsic returns a value.  We need to do explict register\n              allocation for vget_low tests or they fail because of copy\n              elimination.  *)\n-          ((if List.mem Fixed_return_reg features then\n+          ((if List.mem Fixed_vector_reg features then\n               Printf.fprintf chan \"  register %s out_%s asm (\\\"d18\\\");\\n\"\n                              return_ty return_ty\n+            else if List.mem Fixed_core_reg features then\n+              Printf.fprintf chan \"  register %s out_%s asm (\\\"r0\\\");\\n\"\n+                             return_ty return_ty\n             else\n               Printf.fprintf chan \"  %s out_%s;\\n\" return_ty return_ty);\n \t   emit ())"}, {"sha": "c0a46d06b850897fc00d32f9c55c63170d4cce86", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baeecefcd2b991a9f18878006964b9ac94bbde30/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baeecefcd2b991a9f18878006964b9ac94bbde30/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=baeecefcd2b991a9f18878006964b9ac94bbde30", "patch": "@@ -2720,14 +2720,24 @@\n })\n \n (define_expand \"neon_vget_lanev2di\"\n-  [(match_operand:DI 0 \"s_register_operand\" \"=r\")\n-   (match_operand:V2DI 1 \"s_register_operand\" \"w\")\n-   (match_operand:SI 2 \"immediate_operand\" \"i\")\n-   (match_operand:SI 3 \"immediate_operand\" \"i\")]\n+  [(match_operand:DI 0 \"s_register_operand\" \"\")\n+   (match_operand:V2DI 1 \"s_register_operand\" \"\")\n+   (match_operand:SI 2 \"immediate_operand\" \"\")\n+   (match_operand:SI 3 \"immediate_operand\" \"\")]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[2], 0, 2);\n-  emit_insn (gen_vec_extractv2di (operands[0], operands[1], operands[2]));\n+  switch (INTVAL (operands[2]))\n+    {\n+    case 0:\n+      emit_move_insn (operands[0], gen_lowpart (DImode, operands[1]));\n+      break;\n+    case 1:\n+      emit_move_insn (operands[0], gen_highpart (DImode, operands[1]));\n+      break;\n+    default:\n+      neon_lane_bounds (operands[2], 0, 1);\n+      FAIL;\n+    }\n   DONE;\n })\n "}, {"sha": "677468876af00078af7c6b5fdd2e40a32f7d502e", "filename": "gcc/config/arm/neon.ml", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baeecefcd2b991a9f18878006964b9ac94bbde30/gcc%2Fconfig%2Farm%2Fneon.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baeecefcd2b991a9f18878006964b9ac94bbde30/gcc%2Fconfig%2Farm%2Fneon.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.ml?ref=baeecefcd2b991a9f18878006964b9ac94bbde30", "patch": "@@ -234,7 +234,8 @@ type features =\n        cases.  The function supplied must return the integer to be written\n        into the testcase for the argument number (0-based) supplied to it.  *)\n   | Const_valuator of (int -> int)\n-  | Fixed_return_reg\n+  | Fixed_vector_reg\n+  | Fixed_core_reg\n \n exception MixedMode of elts * elts\n \n@@ -1009,7 +1010,8 @@ let ops =\n     Vget_lane,\n       [InfoWord;\n        Disassembles_as [Use_operands [| Corereg; Corereg; Dreg |]];\n-       Instruction_name [\"vmov\"]; Const_valuator (fun _ -> 0)],\n+       Instruction_name [\"vmov\"; \"fmrrd\"]; Const_valuator (fun _ -> 0);\n+       Fixed_core_reg],\n       Use_operands [| Corereg; Qreg; Immed |],\n       \"vgetQ_lane\", notype_2, [S64; U64];\n \n@@ -1125,7 +1127,7 @@ let ops =\n       notype_1, pf_su_8_64;\n     Vget_low, [Instruction_name [\"vmov\"];\n                Disassembles_as [Use_operands [| Dreg; Dreg |]];\n-\t       Fixed_return_reg],\n+\t       Fixed_vector_reg],\n       Use_operands [| Dreg; Qreg |], \"vget_low\",\n       notype_1, pf_su_8_32;\n      Vget_low, [No_op],"}, {"sha": "efc48131bb1a7eee59117de85419dfe7f6459c54", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baeecefcd2b991a9f18878006964b9ac94bbde30/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baeecefcd2b991a9f18878006964b9ac94bbde30/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=baeecefcd2b991a9f18878006964b9ac94bbde30", "patch": "@@ -1,3 +1,8 @@\n+2012-03-21  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* gcc.target/arm/neon/vgetQ_laneu64.c: Regenerated.\n+\t* gcc.target/arm/neon/vgetQ_lanes64.c: Likewise.\n+\n 2012-03-21  Martin Jambor  <mjambor@suse.cz>\n \n \tPR testsuite/52641"}, {"sha": "e3d3c178e50f7d014cfbe4a54742c1eea058481d", "filename": "gcc/testsuite/gcc.target/arm/neon/vgetQ_lanes64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baeecefcd2b991a9f18878006964b9ac94bbde30/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvgetQ_lanes64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baeecefcd2b991a9f18878006964b9ac94bbde30/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvgetQ_lanes64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvgetQ_lanes64.c?ref=baeecefcd2b991a9f18878006964b9ac94bbde30", "patch": "@@ -10,11 +10,11 @@\n \n void test_vgetQ_lanes64 (void)\n {\n-  int64_t out_int64_t;\n+  register int64_t out_int64_t asm (\"r0\");\n   int64x2_t arg0_int64x2_t;\n \n   out_int64_t = vgetq_lane_s64 (arg0_int64x2_t, 0);\n }\n \n-/* { dg-final { scan-assembler \"vmov\\[ \t\\]+\\[rR\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"((vmov)|(fmrrd))\\[ \t\\]+\\[rR\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "3426e469487970f9dc7d26e7ec3a606dc621f84f", "filename": "gcc/testsuite/gcc.target/arm/neon/vgetQ_laneu64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baeecefcd2b991a9f18878006964b9ac94bbde30/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvgetQ_laneu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baeecefcd2b991a9f18878006964b9ac94bbde30/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvgetQ_laneu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvgetQ_laneu64.c?ref=baeecefcd2b991a9f18878006964b9ac94bbde30", "patch": "@@ -10,11 +10,11 @@\n \n void test_vgetQ_laneu64 (void)\n {\n-  uint64_t out_uint64_t;\n+  register uint64_t out_uint64_t asm (\"r0\");\n   uint64x2_t arg0_uint64x2_t;\n \n   out_uint64_t = vgetq_lane_u64 (arg0_uint64x2_t, 0);\n }\n \n-/* { dg-final { scan-assembler \"vmov\\[ \t\\]+\\[rR\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { scan-assembler \"((vmov)|(fmrrd))\\[ \t\\]+\\[rR\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}]}