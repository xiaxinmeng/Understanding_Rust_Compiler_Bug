{"sha": "f89a0507b1ccf673f58c81c823644d39b9c98f52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg5YTA1MDdiMWNjZjY3M2Y1OGM4MWM4MjM2NDRkMzliOWM5OGY1Mg==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@spamcop.net", "date": "2010-11-04T20:44:03Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-11-04T20:44:03Z"}, "message": "re PR target/44750 (pdp-11 fails to build)\n\n        PR target/44750\n        * config/pdp11/pdp11.c: (pdp11_secondary_reload): Now static.\n        (pdp11_preferred_reload_class): Rename class to rclass.\n        (pdp11_preferred_output_reload_class): Likewise.\n        * config/pdp11/t-pdp11 (dwarf2out.o): Add -Wno-error=type-limits to\n        ALL_COMPILERFLAGS .\n        (java/constants.o): Add -Wno-error to ALL_COMPILERFLAGS.\n\nFrom-SVN: r166331", "tree": {"sha": "6ead4971061f224dbf3923e729c573ccd548a8fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ead4971061f224dbf3923e729c573ccd548a8fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f89a0507b1ccf673f58c81c823644d39b9c98f52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f89a0507b1ccf673f58c81c823644d39b9c98f52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f89a0507b1ccf673f58c81c823644d39b9c98f52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f89a0507b1ccf673f58c81c823644d39b9c98f52/comments", "author": null, "committer": null, "parents": [{"sha": "d4e55f308ea4309fcf10008224e892e40f835c1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4e55f308ea4309fcf10008224e892e40f835c1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4e55f308ea4309fcf10008224e892e40f835c1d"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "dd8c938f92623ade3a3376f589c5b13c75500e6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f89a0507b1ccf673f58c81c823644d39b9c98f52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f89a0507b1ccf673f58c81c823644d39b9c98f52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f89a0507b1ccf673f58c81c823644d39b9c98f52", "patch": "@@ -88,6 +88,14 @@\n \tPR bootstrap/44756\n \t* varasm.c (asm_output_bss): Add ATTRIBUTE_UNUSED to function.\n \n+\tPR target/44750\n+\t* config/pdp11/pdp11.c: (pdp11_secondary_reload): Now static.\n+\t(pdp11_preferred_reload_class): Rename class to rclass.\n+\t(pdp11_preferred_output_reload_class): Likewise.\n+\t* config/pdp11/t-pdp11 (dwarf2out.o): Add -Wno-error=type-limits to\n+\tALL_COMPILERFLAGS .\n+\t(java/constants.o): Add -Wno-error to ALL_COMPILERFLAGS.\n+\n 2010-11-04  Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-optimization/46213"}, {"sha": "31e85c7e6f83ce963df80dfde0d993818e9584ea", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f89a0507b1ccf673f58c81c823644d39b9c98f52/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f89a0507b1ccf673f58c81c823644d39b9c98f52/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=f89a0507b1ccf673f58c81c823644d39b9c98f52", "patch": "@@ -1630,18 +1630,18 @@ pdp11_cannot_change_mode_class (enum machine_mode from,\n loading is easier into LOAD_FPU_REGS than FPU_REGS! */\n \n static reg_class_t\n-pdp11_preferred_reload_class (rtx x, reg_class_t class)\n+pdp11_preferred_reload_class (rtx x, reg_class_t rclass)\n {\n-  if (class == FPU_REGS)\n+  if (rclass == FPU_REGS)\n     return LOAD_FPU_REGS;\n-  if (class == ALL_REGS)\n+  if (rclass == ALL_REGS)\n     {\n       if (FLOAT_MODE_P (GET_MODE (x)))\n \treturn LOAD_FPU_REGS;\n       else\n \treturn GENERAL_REGS;\n     }\n-  return class;\n+  return rclass;\n }\n \n /* TARGET_PREFERRED_OUTPUT_RELOAD_CLASS\n@@ -1654,18 +1654,18 @@ pdp11_preferred_reload_class (rtx x, reg_class_t class)\n loading is easier into LOAD_FPU_REGS than FPU_REGS! */\n \n static reg_class_t\n-pdp11_preferred_output_reload_class (rtx x, reg_class_t class)\n+pdp11_preferred_output_reload_class (rtx x, reg_class_t rclass)\n {\n-  if (class == FPU_REGS)\n+  if (rclass == FPU_REGS)\n     return LOAD_FPU_REGS;\n-  if (class == ALL_REGS)\n+  if (rclass == ALL_REGS)\n     {\n       if (FLOAT_MODE_P (GET_MODE (x)))\n \treturn LOAD_FPU_REGS;\n       else\n \treturn GENERAL_REGS;\n     }\n-  return class;\n+  return rclass;\n }\n \n \n@@ -1674,7 +1674,7 @@ pdp11_preferred_output_reload_class (rtx x, reg_class_t class)\n    FPU registers AC4 and AC5 (class NO_LOAD_FPU_REGS) require an \n    intermediate register (AC0-AC3: LOAD_FPU_REGS).  Everything else\n    can be loade/stored directly.  */\n-reg_class_t \n+static reg_class_t \n pdp11_secondary_reload (bool in_p ATTRIBUTE_UNUSED,\n \t\t\trtx x,\n \t\t\treg_class_t reload_class,"}, {"sha": "5be7fa2cc146a916c47aff67d9a562c33a8be464", "filename": "gcc/config/pdp11/t-pdp11", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f89a0507b1ccf673f58c81c823644d39b9c98f52/gcc%2Fconfig%2Fpdp11%2Ft-pdp11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f89a0507b1ccf673f58c81c823644d39b9c98f52/gcc%2Fconfig%2Fpdp11%2Ft-pdp11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Ft-pdp11?ref=f89a0507b1ccf673f58c81c823644d39b9c98f52", "patch": "@@ -34,3 +34,13 @@ dp-bit.c: $(srcdir)/config/fp-bit.c\n \tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n \n MULTILIB_OPTIONS = msoft-float\n+\n+# Because the pdp11 POINTER_SIZE is only 16, in dwarf2out.c,\n+# DWARF_ARANGES_PAD_SIZE is 0, thus a loop in output_aranges that checks\n+# (i < (unsigned) DWARF_ARANGES_PAD_SIZE) elicits a warning that the\n+# comparison is always false.\n+dwarf2out.o: ALL_COMPILERFLAGS += -Wno-error=type-limits\n+\n+# Likewise, java/constants.c:build_constants_constructor has a negative shift\n+# count (in never-executed code) due to the small POINTER_SIZE.\n+java/constants.o: ALL_COMPILERFLAGS += -Wno-error"}]}