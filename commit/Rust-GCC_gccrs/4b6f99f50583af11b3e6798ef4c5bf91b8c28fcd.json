{"sha": "4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI2Zjk5ZjUwNTgzYWYxMWIzZTY3OThlZjRjNWJmOTFiOGMyOGZjZA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2015-01-06T09:12:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-06T09:12:53Z"}, "message": "exp_strm.adb (Build_Elementary_Input_Call): Clarify comments in previous checkin.\n\n2015-01-06  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_strm.adb (Build_Elementary_Input_Call): Clarify comments\n\tin previous checkin.\n\t* freeze.adb (Freeze_Fixed_Point_Type): Add warning for shaving\n\tof bounds.\n\t* sem_prag.adb, sem_ch10.adb, sem_ch6.adb: Minor reformatting.\n\nFrom-SVN: r219229", "tree": {"sha": "a622bfbb577e8db77b39114e5c4b8d8cb6f76d19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a622bfbb577e8db77b39114e5c4b8d8cb6f76d19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd/comments", "author": null, "committer": null, "parents": [{"sha": "21f30884bcd502e083f531cc0f5fa1b89c4e22b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21f30884bcd502e083f531cc0f5fa1b89c4e22b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21f30884bcd502e083f531cc0f5fa1b89c4e22b5"}], "stats": {"total": 103, "additions": 71, "deletions": 32}, "files": [{"sha": "c66023d2ac169c24e8a4f0e924724ddb66b548d9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd", "patch": "@@ -1,3 +1,11 @@\n+2015-01-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_strm.adb (Build_Elementary_Input_Call): Clarify comments\n+\tin previous checkin.\n+\t* freeze.adb (Freeze_Fixed_Point_Type): Add warning for shaving\n+\tof bounds.\n+\t* sem_prag.adb, sem_ch10.adb, sem_ch6.adb: Minor reformatting.\n+\n 2015-01-06  Vincent Celier  <celier@adacore.com>\n \n \t* a-strsup.adb (Times (Natural;String;Positive)): Raise"}, {"sha": "21d94472e2412c75ab430be6c91883a43595ede6", "filename": "gcc/ada/exp_strm.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd/gcc%2Fada%2Fexp_strm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd/gcc%2Fada%2Fexp_strm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.adb?ref=4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd", "patch": "@@ -650,7 +650,8 @@ package body Exp_Strm is\n \n          --  Now convert to the base type if we do not have a biased type. Note\n          --  that we did not do this in some older versions, and the result was\n-         --  losing some required range checking for the 'Read case.\n+         --  losing a required range check in the case where 'Input is being\n+         --  called from 'Read.\n \n          if not Has_Biased_Representation (P_Type) then\n             return Unchecked_Convert_To (Base_Type (P_Type), Res);\n@@ -683,7 +684,6 @@ package body Exp_Strm is\n       Libent  : Entity_Id;\n \n    begin\n-\n       --  Compute the size of the stream element. This is either the size of\n       --  the first subtype or if given the size of the Stream_Size attribute.\n "}, {"sha": "cc5553e09ab9c4b175d5d538cf3ba1d29080ad19", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd", "patch": "@@ -6711,7 +6711,12 @@ package body Freeze is\n       Hival : Ureal;\n       Atype : Entity_Id;\n \n+      Orig_Lo : Ureal;\n+      Orig_Hi : Ureal;\n+      --  Save original bounds (for shaving tests)\n+\n       Actual_Size : Nat;\n+      --  Actual size chosen\n \n       function Fsize (Lov, Hiv : Ureal) return Nat;\n       --  Returns size of type with given bounds. Also leaves these\n@@ -6762,6 +6767,9 @@ package body Freeze is\n       Loval := Realval (Lo);\n       Hival := Realval (Hi);\n \n+      Orig_Lo := Loval;\n+      Orig_Hi := Hival;\n+\n       --  Ordinary fixed-point case\n \n       if Is_Ordinary_Fixed_Point_Type (Typ) then\n@@ -7130,6 +7138,24 @@ package body Freeze is\n             Set_RM_Size (Typ, Minsiz);\n          end if;\n       end;\n+\n+      --  Check for shaving\n+\n+      if Comes_From_Source (Typ) then\n+         if Orig_Lo < Expr_Value_R (Lo) then\n+            Error_Msg_N\n+              (\"declared low bound of type & is outside type range??\", Typ);\n+            Error_Msg_N\n+              (\"\\low bound adjusted up by delta (RM 3.5.9(13))??\", Typ);\n+         end if;\n+\n+         if Orig_Hi > Expr_Value_R (Hi) then\n+            Error_Msg_N\n+              (\"declared high bound of type & is outside type range??\", Typ);\n+            Error_Msg_N\n+              (\"\\high bound adjusted down by delta (RM 3.5.9(13))??\", Typ);\n+         end if;\n+      end if;\n    end Freeze_Fixed_Point_Type;\n \n    ------------------"}, {"sha": "39bbcd09f56142465338ed568235cb3618167bbd", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd", "patch": "@@ -6494,6 +6494,10 @@ package body Sem_Ch10 is\n          Item := First (Context_Items (Comp_Unit));\n          while Present (Item) loop\n             if Nkind (Item) = N_With_Clause\n+\n+              --  The following guard is needed to ensure that the name has\n+              --  been properly analyzed before we go fetching its entity.\n+\n               and then Is_Entity_Name (Name (Item))\n               and then Entity (Name (Item)) = E\n               and then not Private_Present (Item)"}, {"sha": "946f217ce3b05e246a4880ba33fd972ab896f65e", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd", "patch": "@@ -321,7 +321,8 @@ package body Sem_Ch6 is\n       --  check whether any of them is completed by the expression function.\n       --  In a generic context a formal subprogram has no completion.\n \n-      if Present (Prev) and then Is_Overloadable (Prev)\n+      if Present (Prev)\n+        and then Is_Overloadable (Prev)\n         and then not Is_Formal_Subprogram (Prev)\n       then\n          Def_Id := Analyze_Subprogram_Specification (Spec);\n@@ -380,7 +381,8 @@ package body Sem_Ch6 is\n       --  scope. The entity itself may be internally created if within a body\n       --  to be inlined.\n \n-      elsif Present (Prev) and then Comes_From_Source (Parent (Prev))\n+      elsif Present (Prev)\n+        and then Comes_From_Source (Parent (Prev))\n         and then not Is_Formal_Subprogram (Prev)\n       then\n          Set_Has_Completion (Prev, False);\n@@ -2043,7 +2045,7 @@ package body Sem_Ch6 is\n \n             elsif Ekind (Typ) = E_Incomplete_Type\n               or else (Is_Class_Wide_Type (Typ)\n-                         and then Ekind (Root_Type (Typ)) = E_Incomplete_Type)\n+                        and then Ekind (Root_Type (Typ)) = E_Incomplete_Type)\n             then\n                --  AI05-0151: Tagged incomplete types are allowed in all formal\n                --  parts. Untagged incomplete types are not allowed in bodies.\n@@ -2556,13 +2558,13 @@ package body Sem_Ch6 is\n             --  a null access (see Expand_Interface_Conversion)\n \n            and then not (Is_Interface (Designated_Type (Etype (Scop)))\n-                           and then not Comes_From_Source (Parent (Scop)))\n+                          and then not Comes_From_Source (Parent (Scop)))\n \n            and then (Has_Task (Designated_Type (Etype (Scop)))\n                       or else\n-                       (Is_Class_Wide_Type (Designated_Type (Etype (Scop)))\n-                          and then\n-                        Is_Limited_Record (Designated_Type (Etype (Scop)))))\n+                        (Is_Class_Wide_Type (Designated_Type (Etype (Scop)))\n+                           and then\n+                         Is_Limited_Record (Designated_Type (Etype (Scop)))))\n            and then Expander_Active\n \n            --  Avoid cases with no tasking support\n@@ -2633,9 +2635,8 @@ package body Sem_Ch6 is\n               Nkind (N) = N_Pragma\n                 and then\n                   (Pragma_Name (N) = Name_Inline_Always\n-                    or else\n-                      (Front_End_Inlining\n-                        and then Pragma_Name (N) = Name_Inline))\n+                    or else (Front_End_Inlining\n+                              and then Pragma_Name (N) = Name_Inline))\n                 and then\n                   Chars\n                     (Expression (First (Pragma_Argument_Associations (N)))) =\n@@ -2822,8 +2823,9 @@ package body Sem_Ch6 is\n                if To_Corresponding then\n                   if Is_Concurrent_Type (Formal_Typ)\n                     and then Present (Corresponding_Record_Type (Formal_Typ))\n-                    and then Present (Interfaces (\n-                               Corresponding_Record_Type (Formal_Typ)))\n+                    and then\n+                      Present (Interfaces\n+                                 (Corresponding_Record_Type (Formal_Typ)))\n                   then\n                      Set_Etype (Formal,\n                        Corresponding_Record_Type (Formal_Typ));\n@@ -3018,7 +3020,7 @@ package body Sem_Ch6 is\n       begin\n          if Must_Override (Body_Spec) then\n             if Nkind (Spec_Id) = N_Defining_Operator_Symbol\n-              and then  Operator_Matches_Spec (Spec_Id, Spec_Id)\n+              and then Operator_Matches_Spec (Spec_Id, Spec_Id)\n             then\n                null;\n \n@@ -3044,7 +3046,7 @@ package body Sem_Ch6 is\n                   Body_Spec, Spec_Id);\n \n             elsif Nkind (Spec_Id) = N_Defining_Operator_Symbol\n-              and then  Operator_Matches_Spec (Spec_Id, Spec_Id)\n+              and then Operator_Matches_Spec (Spec_Id, Spec_Id)\n             then\n                Error_Msg_NE\n                  (\"subprogram& overrides predefined operator \",\n@@ -3407,7 +3409,7 @@ package body Sem_Ch6 is\n               and then not Comes_From_Source (N)\n               and then\n                 (Nkind (Original_Node (Spec_Decl)) =\n-                                        N_Subprogram_Renaming_Declaration\n+                                          N_Subprogram_Renaming_Declaration\n                   or else (Present (Corresponding_Body (Spec_Decl))\n                             and then\n                               Nkind (Unit_Declaration_Node\n@@ -4962,19 +4964,19 @@ package body Sem_Ch6 is\n            --  F_Ptr. We catch this case in the code below.\n \n            and then (Ekind (Old_Formal_Base) = Ekind (New_Formal_Base)\n-                  or else\n-                    (Is_Generic_Type (Old_Formal_Base)\n-                       and then Is_Generic_Type (New_Formal_Base)\n-                       and then Is_Internal (New_Formal_Base)\n-                       and then Etype (Etype (New_Formal_Base)) =\n-                                  Old_Formal_Base))\n-           and then Directly_Designated_Type (Old_Formal_Base) =\n-                    Directly_Designated_Type (New_Formal_Base)\n+                      or else\n+                        (Is_Generic_Type (Old_Formal_Base)\n+                          and then Is_Generic_Type (New_Formal_Base)\n+                          and then Is_Internal (New_Formal_Base)\n+                          and then Etype (Etype (New_Formal_Base)) =\n+                                                          Old_Formal_Base))\n+               and then Directly_Designated_Type (Old_Formal_Base) =\n+                                    Directly_Designated_Type (New_Formal_Base)\n            and then ((Is_Itype (Old_Formal_Base)\n                        and then Can_Never_Be_Null (Old_Formal_Base))\n-                    or else\n-                     (Is_Itype (New_Formal_Base)\n-                       and then Can_Never_Be_Null (New_Formal_Base)));\n+                     or else\n+                      (Is_Itype (New_Formal_Base)\n+                        and then Can_Never_Be_Null (New_Formal_Base)));\n \n          --  Types must always match. In the visible part of an instance,\n          --  usual overloading rules for dispatching operations apply, and"}, {"sha": "dad23daf3d143f1ef3e98c67c9e1ec4db23f5271", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=4b6f99f50583af11b3e6798ef4c5bf91b8c28fcd", "patch": "@@ -1382,8 +1382,7 @@ package body Sem_Prag is\n \n                --    (Output =>+ null)\n \n-               --  Remove the null input and replace it with a copy of the\n-               --  output:\n+               --  Remove null input and replace it with a copy of the output:\n \n                --    (Output => Output)\n \n@@ -1459,8 +1458,8 @@ package body Sem_Prag is\n                Propagate_Output (Output, Inputs);\n \n                --  A list with multiple outputs is slowly trimmed until only\n-               --  one element remains. When this happens, replace the\n-               --  aggregate with the element itself.\n+               --  one element remains. When this happens, replace aggregate\n+               --  with the element itself.\n \n                if Multiple then\n                   Remove  (Output);"}]}