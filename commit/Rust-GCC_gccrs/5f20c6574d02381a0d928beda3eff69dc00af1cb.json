{"sha": "5f20c6574d02381a0d928beda3eff69dc00af1cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYyMGM2NTc0ZDAyMzgxYTBkOTI4YmVkYTNlZmY2OWRjMDBhZjFjYg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-07-27T21:23:53Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-07-27T21:23:53Z"}, "message": "coretypes.h (struct cl_option_handlers): Declare.\n\n\t* coretypes.h (struct cl_option_handlers): Declare.\n\t* hooks.c (hook_int_size_t_constcharptr_int_0): Remove.\n\t* hooks.h (hook_int_size_t_constcharptr_int_0): Remove.\n\t* langhooks-def.h (lhd_handle_option): Declare.\n\t(LANG_HOOKS_HANDLE_OPTION): Use lhd_handle_option.\n\t* langhooks.c (lhd_handle_option): New.\n\t* langhooks.h (struct lang_hooks): Update prototype and return\n\tvalue type of handle_option hook.\n\t* optc-gen.awk: Generate target_flags_explicit definition for the\n\tdriver.\n\t* opts-common.c: Include diagnostic.h.\n\t(handle_option): Move from opts.c.  Update prototype and return\n\tvalue type.  Use handlers structure.\n\t(read_cmdline_option): Move from opts.c.  Update prototype.  Use\n\thandlers structure.\n\t(set_option): Move from opts.c.\n\t* opts.c (common_handle_option): Update prototype and return value\n\ttype.  Update calls to handle_option and enable_warning_as_error.\n\t(unknown_option_callback, post_handling_callback,\n\tlang_handle_option, target_handle_option): New.\n\t(handle_option, read_cmdline_option): Move to opts-common.c.\n\t(read_cmdline_options): Update prototype.  Update call to\n\tread_cmdline_option.\n\t(decode_options): Initialize and use handlers structure.\n\t(set_option): Move to opts-common.c.\n\t(enable_warning_as_error): Update prototype.  Update call to\n\thandle_option.\n\t* opts.h (struct cl_option_handler_func, struct\n\tcl_option_handlers): New.\n\t(handle_option, enable_warning_as_error): Update prototypes.\n\t(read_cmdline_option): Declare.\n\t* Makefile.in (opts-common.o): Update dependencies.\n\nada:\n\t* gcc-interface/misc.c (gnat_handle_option): Update prototype and\n\treturn value type.  Don't check for missing arguments here.\n\nc-family:\n\t* c-common.h (c_common_handle_option): Update prototype and return\n\tvalue type.\n\t* c-opts.c (c_common_handle_option): Update prototype and return\n\tvalue type.  Update calls to handle_option and\n\tenable_warning_as_error.\n\nfortran:\n\t* gfortran.h (gfc_handle_option): Update prototype and return\n\tvalue type.\n\t* options.c (gfc_handle_option): Update prototype and return value\n\ttype.\n\njava:\n\t* lang.c (java_handle_option): Update prototype and return value\n\ttype.\n\nlto:\n\t* lto-lang.c (lto_handle_option): Update prototype and return\n\tvalue type.  Remove duplicate assignment to result.\n\nFrom-SVN: r162601", "tree": {"sha": "f94ec6c06f2efb7241fe151e3dc75cfb9af059a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f94ec6c06f2efb7241fe151e3dc75cfb9af059a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f20c6574d02381a0d928beda3eff69dc00af1cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f20c6574d02381a0d928beda3eff69dc00af1cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f20c6574d02381a0d928beda3eff69dc00af1cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f20c6574d02381a0d928beda3eff69dc00af1cb/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "689d6c4a78eb67a4eb256d27647660a7523958a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/689d6c4a78eb67a4eb256d27647660a7523958a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/689d6c4a78eb67a4eb256d27647660a7523958a4"}], "stats": {"total": 608, "additions": 390, "deletions": 218}, "files": [{"sha": "eb5bad8211a0c3812635e824694b1084e1cfc859", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -1,3 +1,38 @@\n+2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* coretypes.h (struct cl_option_handlers): Declare.\n+\t* hooks.c (hook_int_size_t_constcharptr_int_0): Remove.\n+\t* hooks.h (hook_int_size_t_constcharptr_int_0): Remove.\n+\t* langhooks-def.h (lhd_handle_option): Declare.\n+\t(LANG_HOOKS_HANDLE_OPTION): Use lhd_handle_option.\n+\t* langhooks.c (lhd_handle_option): New.\n+\t* langhooks.h (struct lang_hooks): Update prototype and return\n+\tvalue type of handle_option hook.\n+\t* optc-gen.awk: Generate target_flags_explicit definition for the\n+\tdriver.\n+\t* opts-common.c: Include diagnostic.h.\n+\t(handle_option): Move from opts.c.  Update prototype and return\n+\tvalue type.  Use handlers structure.\n+\t(read_cmdline_option): Move from opts.c.  Update prototype.  Use\n+\thandlers structure.\n+\t(set_option): Move from opts.c.\n+\t* opts.c (common_handle_option): Update prototype and return value\n+\ttype.  Update calls to handle_option and enable_warning_as_error.\n+\t(unknown_option_callback, post_handling_callback,\n+\tlang_handle_option, target_handle_option): New.\n+\t(handle_option, read_cmdline_option): Move to opts-common.c.\n+\t(read_cmdline_options): Update prototype.  Update call to\n+\tread_cmdline_option.\n+\t(decode_options): Initialize and use handlers structure.\n+\t(set_option): Move to opts-common.c.\n+\t(enable_warning_as_error): Update prototype.  Update call to\n+\thandle_option.\n+\t* opts.h (struct cl_option_handler_func, struct\n+\tcl_option_handlers): New.\n+\t(handle_option, enable_warning_as_error): Update prototypes.\n+\t(read_cmdline_option): Declare.\n+\t* Makefile.in (opts-common.o): Update dependencies.\n+\n 2010-07-27  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* config/arm/arm.c (params.h): Include."}, {"sha": "6a99e23fceef50838b2b4388737dae3f7ce58aa8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -2806,7 +2806,7 @@ opts.o : opts.c opts.h options.h $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) $(CONFIG_H) $(\n    $(FLAGS_H) $(PARAMS_H) $(TREE_PASS_H) $(DBGCNT_H) debug.h \\\n    $(PLUGIN_H) $(EXCEPT_H) $(LTO_STREAMER_H) opts-diagnostic.h\n opts-common.o : opts-common.c opts.h options.h $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h intl.h\n+   coretypes.h intl.h $(DIAGNOSTIC_H)\n targhooks.o : targhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n    $(EXPR_H) $(TM_H) $(RTL_H) $(TM_P_H) $(FUNCTION_H) output.h $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) \\\n    $(MACHMODE_H) $(TARGET_DEF_H) $(TARGET_H) $(GGC_H) gt-targhooks.h \\"}, {"sha": "7324c3a9256d739917490fdff8c0924dc804bfda", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -1,3 +1,8 @@\n+2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc-interface/misc.c (gnat_handle_option): Update prototype and\n+\treturn value type.  Don't check for missing arguments here.\n+\n 2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc-interface/misc.c (gnat_option_lang_mask): New."}, {"sha": "01b33a3f9c4341cd3a76b305a3685e4543289705", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -64,7 +64,8 @@ static bool gnat_init\t\t\t(void);\n static unsigned int gnat_option_lang_mask (void);\n static void gnat_init_options\t\t(unsigned int,\n \t\t\t\t\t struct cl_decoded_option *);\n-static int gnat_handle_option\t\t(size_t, const char *, int, int);\n+static bool gnat_handle_option\t\t(size_t, const char *, int, int,\n+\t\t\t\t\t const struct cl_option_handlers *);\n static bool gnat_post_options\t\t(const char **);\n static alias_set_type gnat_get_alias_set (tree);\n static void gnat_print_decl\t\t(FILE *, tree, int);\n@@ -186,22 +187,15 @@ gnat_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n \n /* Decode all the language specific options that cannot be decoded by GCC.\n    The option decoding phase of GCC calls this routine on the flags that\n-   it cannot decode.  Return the number of consecutive arguments from ARGV\n-   that have been successfully decoded or 0 on failure.  */\n+   are marked as Ada-specific.  Return true on success or false on failure.  */\n \n-static int\n-gnat_handle_option (size_t scode, const char *arg, int value,\n-\t\t    int kind ATTRIBUTE_UNUSED)\n+static bool\n+gnat_handle_option (size_t scode, const char *arg ATTRIBUTE_UNUSED, int value,\n+\t\t    int kind ATTRIBUTE_UNUSED,\n+\t\t    const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED)\n {\n-  const struct cl_option *option = &cl_options[scode];\n   enum opt_code code = (enum opt_code) scode;\n \n-  if (arg == NULL && (option->flags & (CL_JOINED | CL_SEPARATE)))\n-    {\n-      error (\"missing argument to \\\"-%s\\\"\", option->opt_text);\n-      return 1;\n-    }\n-\n   switch (code)\n     {\n     case OPT_Wall:\n@@ -250,7 +244,7 @@ gnat_handle_option (size_t scode, const char *arg, int value,\n       gcc_unreachable ();\n     }\n \n-  return 1;\n+  return true;\n }\n \n /* Return language mask for option processing.  */"}, {"sha": "c7c3a1f8b739c30bae2a352c2bf86e13c8ea39da", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -1,3 +1,11 @@\n+2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.h (c_common_handle_option): Update prototype and return\n+\tvalue type.\n+\t* c-opts.c (c_common_handle_option): Update prototype and return\n+\tvalue type.  Update calls to handle_option and\n+\tenable_warning_as_error.\n+\n 2010-07-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/45079"}, {"sha": "3f22485b6acbc23810edf3b2af46d3c9f8fbef4e", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -658,7 +658,8 @@ extern void set_Wformat (int);\n extern tree handle_format_attribute (tree *, tree, tree, int, bool *);\n extern tree handle_format_arg_attribute (tree *, tree, tree, int, bool *);\n extern bool attribute_takes_identifier_p (const_tree);\n-extern int c_common_handle_option (size_t code, const char *arg, int value, int kind);\n+extern bool c_common_handle_option (size_t, const char *, int, int,\n+\t\t\t\t    const struct cl_option_handlers *);\n extern tree c_common_type_for_mode (enum machine_mode, int);\n extern tree c_common_type_for_size (unsigned int, int);\n extern tree c_common_fixed_point_type_for_size (unsigned int, unsigned int,"}, {"sha": "2c8245e2a5e8d8dc48074f7925b7d721f0883dd4", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -319,16 +319,15 @@ c_common_init_options (unsigned int decoded_options_count,\n }\n \n /* Handle switch SCODE with argument ARG.  VALUE is true, unless no-\n-   form of an -f or -W option was given.  Returns 0 if the switch was\n-   invalid, a negative number to prevent language-independent\n-   processing in toplev.c (a hack necessary for the short-term).  */\n-int\n+   form of an -f or -W option was given.  Returns false if the switch was\n+   invalid, true if valid.  Use HANDLERS in recursive handle_option calls.  */\n+bool\n c_common_handle_option (size_t scode, const char *arg, int value,\n-\t\t\tint kind)\n+\t\t\tint kind, const struct cl_option_handlers *handlers)\n {\n   const struct cl_option *option = &cl_options[scode];\n   enum opt_code code = (enum opt_code) scode;\n-  int result = 1;\n+  bool result = true;\n \n   /* Prevent resetting the language standard to a C dialect when the driver\n      has already determined that we're looking at assembler input.  */\n@@ -341,10 +340,10 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \t{\n \t  if ((option->flags & CL_TARGET)\n \t      && ! targetcm.handle_c_option (scode, arg, value))\n-\t    result = 0;\n+\t    result = false;\n \t  break;\n \t}\n-      result = 0;\n+      result = false;\n       break;\n \n     case OPT__output_pch_:\n@@ -438,7 +437,8 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n     case OPT_Wall:\n       warn_unused = value;\n       set_Wformat (value);\n-      handle_option (OPT_Wimplicit, value, NULL, c_family_lang_mask, kind);\n+      handle_option (OPT_Wimplicit, NULL, value, c_family_lang_mask, kind,\n+\t\t     handlers);\n       warn_char_subscripts = value;\n       warn_missing_braces = value;\n       warn_parentheses = value;\n@@ -524,7 +524,8 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n     case OPT_Werror_implicit_function_declaration:\n       /* For backward compatibility, this is the same as\n \t -Werror=implicit-function-declaration.  */\n-      enable_warning_as_error (\"implicit-function-declaration\", value, CL_C | CL_ObjC);\n+      enable_warning_as_error (\"implicit-function-declaration\", value,\n+\t\t\t       CL_C | CL_ObjC, handlers);\n       break;\n \n     case OPT_Wformat:\n@@ -538,11 +539,11 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n     case OPT_Wimplicit:\n       gcc_assert (value == 0 || value == 1);\n       if (warn_implicit_int == -1)\n-\thandle_option (OPT_Wimplicit_int, value, NULL,\n-\t\t       c_family_lang_mask, kind);\n+\thandle_option (OPT_Wimplicit_int, NULL, value,\n+\t\t       c_family_lang_mask, kind, handlers);\n       if (warn_implicit_function_declaration == -1)\n-\thandle_option (OPT_Wimplicit_function_declaration, value, NULL,\n-\t\t       c_family_lang_mask, kind);\n+\thandle_option (OPT_Wimplicit_function_declaration, NULL, value,\n+\t\t       c_family_lang_mask, kind, handlers);\n       break;\n \n     case OPT_Wimport:\n@@ -655,7 +656,7 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \n     case OPT_fbuiltin_:\n       if (value)\n-\tresult = 0;\n+\tresult = false;\n       else\n \tdisable_builtin_function (arg);\n       break;"}, {"sha": "f23741ad762afa68ecfe804203718d9d565eafce", "filename": "gcc/coretypes.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -68,6 +68,7 @@ struct cl_target_option;\n struct cl_optimization;\n struct cl_option;\n struct cl_decoded_option;\n+struct cl_option_handlers;\n struct gimple_seq_d;\n typedef struct gimple_seq_d *gimple_seq;\n typedef const struct gimple_seq_d *const_gimple_seq;"}, {"sha": "fb49a8dc85bb8f63606532eff9b668c99763cd84", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -1,3 +1,10 @@\n+2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gfortran.h (gfc_handle_option): Update prototype and return\n+\tvalue type.\n+\t* options.c (gfc_handle_option): Update prototype and return value\n+\ttype.\n+\n 2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n \n \t* cpp.c (gfc_cpp_init_options): Update prototype.  Use number of"}, {"sha": "15ae26f530c0c7af85eae105f3a3cc70c608e657", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -2358,7 +2358,8 @@ int get_c_kind (const char *, CInteropKind_t *);\n unsigned int gfc_option_lang_mask (void);\n void gfc_init_options (unsigned int,\n \t\t       struct cl_decoded_option *);\n-int gfc_handle_option (size_t, const char *, int, int);\n+bool gfc_handle_option (size_t, const char *, int, int,\n+\t\t\tconst struct cl_option_handlers *);\n bool gfc_post_options (const char **);\n \n /* f95-lang.c */"}, {"sha": "c49620a24f64169501e1bbdf86d141a2950dbe1c", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -542,20 +542,21 @@ gfc_handle_runtime_check_option (const char *arg)\n /* Handle command-line options.  Returns 0 if unrecognized, 1 if\n    recognized and handled.  */\n \n-int\n+bool\n gfc_handle_option (size_t scode, const char *arg, int value,\n-\t\t   int kind ATTRIBUTE_UNUSED)\n+\t\t   int kind ATTRIBUTE_UNUSED,\n+\t\t   const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED)\n {\n-  int result = 1;\n+  bool result = true;\n   enum opt_code code = (enum opt_code) scode;\n \n   if (gfc_cpp_handle_option (scode, arg, value) == 1)\n-    return 1;\n+    return true;\n \n   switch (code)\n     {\n     default:\n-      result = 0;\n+      result = false;\n       break;\n \n     case OPT_Wall:"}, {"sha": "52a40484054d6937aaeed76d8a9fbe3ff4e95e19", "filename": "gcc/hooks.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -160,14 +160,6 @@ hook_int_rtx_bool_0 (rtx a ATTRIBUTE_UNUSED, bool b ATTRIBUTE_UNUSED)\n   return 0;\n }\n \n-int\n-hook_int_size_t_constcharptr_int_0 (size_t a ATTRIBUTE_UNUSED,\n-\t\t\t\t    const char *b ATTRIBUTE_UNUSED,\n-\t\t\t\t    int c ATTRIBUTE_UNUSED)\n-{\n-  return 0;\n-}\n-\n unsigned int\n hook_uint_void_0 (void)\n {"}, {"sha": "a89a355f879da6a841417b2b91e6c0ca39ad190c", "filename": "gcc/hooks.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -63,7 +63,6 @@ extern int hook_int_const_tree_0 (const_tree);\n extern int hook_int_const_tree_const_tree_1 (const_tree, const_tree);\n extern int hook_int_rtx_0 (rtx);\n extern int hook_int_rtx_bool_0 (rtx, bool);\n-extern int hook_int_size_t_constcharptr_int_0 (size_t, const char *, int);\n \n extern tree hook_tree_const_tree_null (const_tree);\n "}, {"sha": "00e7ce754c63e028f1c8effe082e9754fb596e0a", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -1,3 +1,8 @@\n+2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lang.c (java_handle_option): Update prototype and return value\n+\ttype.\n+\n 2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n \n \t* lang.c (java_option_lang_mask): New."}, {"sha": "06edd5ee6f38ca159d1ef2454e6a4958e3b3ea98", "filename": "gcc/java/lang.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -50,7 +50,8 @@ static unsigned int java_option_lang_mask (void);\n static void java_init_options (unsigned int, struct cl_decoded_option *);\n static bool java_post_options (const char **);\n \n-static int java_handle_option (size_t scode, const char *arg, int value, int kind);\n+static bool java_handle_option (size_t, const char *, int, int,\n+\t\t\t\tconst struct cl_option_handlers *);\n static void put_decl_string (const char *, int);\n static void put_decl_node (tree, int);\n static void java_print_error_function (diagnostic_context *, const char *,\n@@ -174,11 +175,12 @@ struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n /*\n  * process java-specific compiler command-line options\n- * return 0, but do not complain if the option is not recognized.\n+ * return false, but do not complain if the option is not recognized.\n  */\n-static int\n+static bool\n java_handle_option (size_t scode, const char *arg, int value,\n-\t\t    int kind ATTRIBUTE_UNUSED)\n+\t\t    int kind ATTRIBUTE_UNUSED,\n+\t\t    const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED)\n {\n   enum opt_code code = (enum opt_code) scode;\n \n@@ -269,7 +271,7 @@ java_handle_option (size_t scode, const char *arg, int value,\n \n     case OPT_fdump_:\n       if (!dump_switch_p (arg))\n-\treturn 0;\n+\treturn false;\n       break;\n \n     case OPT_fencoding_:\n@@ -298,7 +300,7 @@ java_handle_option (size_t scode, const char *arg, int value,\n       gcc_unreachable ();\n     }\n \n-  return 1;\n+  return true;\n }\n \n /* Global open file.  */"}, {"sha": "c89763bbee0319448c98c2e7864b31c817f644fd", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -69,6 +69,8 @@ extern void lhd_initialize_diagnostics (struct diagnostic_context *);\n extern void lhd_init_options (unsigned int,\n \t\t\t      struct cl_decoded_option *);\n extern bool lhd_complain_wrong_lang_p (const struct cl_option *);\n+extern bool lhd_handle_option (size_t, const char *, int, int,\n+\t\t\t       const struct cl_option_handlers *);\n extern tree lhd_callgraph_analyze_expr (tree *, int *);\n \n \n@@ -89,7 +91,7 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n #define LANG_HOOKS_INIT_OPTIONS\t\tlhd_init_options\n #define LANG_HOOKS_INITIALIZE_DIAGNOSTICS lhd_initialize_diagnostics\n #define LANG_HOOKS_COMPLAIN_WRONG_LANG_P lhd_complain_wrong_lang_p\n-#define LANG_HOOKS_HANDLE_OPTION\thook_int_size_t_constcharptr_int_0\n+#define LANG_HOOKS_HANDLE_OPTION\tlhd_handle_option\n #define LANG_HOOKS_POST_OPTIONS\t\tlhd_post_options\n #define LANG_HOOKS_MISSING_NORETURN_OK_P hook_bool_tree_true\n #define LANG_HOOKS_GET_ALIAS_SET\tlhd_get_alias_set"}, {"sha": "7a585085ef04c6653da099b32601db86a37c9f6d", "filename": "gcc/langhooks.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -351,6 +351,16 @@ lhd_complain_wrong_lang_p (const struct cl_option *option ATTRIBUTE_UNUSED)\n   return true;\n }\n \n+/* By default, no language-specific options are valid.  */\n+bool\n+lhd_handle_option (size_t code ATTRIBUTE_UNUSED,\n+\t\t   const char *arg ATTRIBUTE_UNUSED,\n+\t\t   int value ATTRIBUTE_UNUSED, int kind ATTRIBUTE_UNUSED,\n+\t\t   const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED)\n+{\n+  return false;\n+}\n+\n /* The default function to print out name of current function that caused\n    an error.  */\n void"}, {"sha": "87bac2826d034396cdce59e83686055aef304032", "filename": "gcc/langhooks.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -292,11 +292,12 @@ struct lang_hooks\n      which points to permanent storage.  The handler is responsible for\n      checking whether ARG is NULL, which indicates that no argument\n      was in fact supplied.  For -f and -W switches, VALUE is 1 or 0\n-     for the positive and negative forms respectively.\n+     for the positive and negative forms respectively.  HANDLERS should\n+     be passed to any recursive handle_option calls.\n \n-     Return 1 if the switch is valid, 0 if invalid, and -1 if it's\n-     valid and should not be treated as language-independent too.  */\n-  int (*handle_option) (size_t code, const char *arg, int value, int kind);\n+     Return true if the switch is valid, false if invalid.  */\n+  bool (*handle_option) (size_t code, const char *arg, int value, int kind,\n+\t\t\t const struct cl_option_handlers *handlers);\n \n   /* Called when all command line options have been parsed to allow\n      further processing and initialization"}, {"sha": "4a7260617a4f144d500d40a9eacd770937f5861d", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -1,3 +1,8 @@\n+2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lto-lang.c (lto_handle_option): Update prototype and return\n+\tvalue type.  Remove duplicate assignment to result.\n+\n 2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n \n \t* lto-lang.c (lto_option_lang_mask, lto_complain_wrong_lang_p):"}, {"sha": "388a46c199cb9bb9967b6a5e53136986c93d51d7", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -631,18 +631,18 @@ lto_init_options (unsigned int decoded_options_count ATTRIBUTE_UNUSED,\n    of the option was supplied.  */\n \n const char *resolution_file_name;\n-static int\n+static bool\n lto_handle_option (size_t scode, const char *arg,\n-\t\t   int value ATTRIBUTE_UNUSED, int kind ATTRIBUTE_UNUSED)\n+\t\t   int value ATTRIBUTE_UNUSED, int kind ATTRIBUTE_UNUSED,\n+\t\t   const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED)\n {\n   enum opt_code code = (enum opt_code) scode;\n-  int result = 1;\n+  bool result = true;\n \n   switch (code)\n     {\n     case OPT_fresolution_:\n       resolution_file_name = arg;\n-      result = 1;\n       break;\n \n     case OPT_Wabi:"}, {"sha": "d0a07f8a5d3f3ea37bb296d2ca686fa5c601044d", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -73,6 +73,7 @@ print \"#include \" quote \"intl.h\" quote\n print \"\"\n print \"#ifdef GCC_DRIVER\"\n print \"int target_flags;\"\n+print \"int target_flags_explicit;\"\n print \"#else\"\n print \"#include \" quote \"flags.h\" quote\n print \"#include \" quote \"target.h\" quote"}, {"sha": "d84938ac9a35dfa8c535b443f9a25069c8081557", "filename": "gcc/opts-common.c", "status": "modified", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"opts.h\"\n #include \"options.h\"\n+#include \"diagnostic.h\"\n \n /* Perform a binary search to find which option the command-line INPUT\n    matches.  Returns its index in the option array, and\n@@ -453,3 +454,136 @@ prune_options (int *argcp, char ***argvp)\n \n   free (options);\n }\n+\n+/* Handle option OPT_INDEX, and argument ARG, for the language\n+   indicated by LANG_MASK, using the handlers in HANDLERS.  VALUE is\n+   the option value as for the value field of cl_decoded_option.  KIND\n+   is the diagnostic_t if this is a diagnostics option, DK_UNSPECIFIED\n+   otherwise.  Returns false if the switch was invalid.  */\n+\n+bool\n+handle_option (size_t opt_index, const char *arg, int value,\n+\t       unsigned int lang_mask, int kind,\n+\t       const struct cl_option_handlers *handlers)\n+{\n+  const struct cl_option *option = &cl_options[opt_index];\n+  size_t i;\n+\n+  if (option->flag_var)\n+    set_option (opt_index, value, arg, kind);\n+\n+  for (i = 0; i < handlers->num_handlers; i++)\n+    if (option->flags & handlers->handlers[i].mask)\n+      {\n+\tif (!handlers->handlers[i].handler (opt_index, arg, value,\n+\t\t\t\t\t    lang_mask, kind, handlers))\n+\t  return false;\n+\telse\n+\t  handlers->post_handling_callback (opt_index, arg, value,\n+\t\t\t\t\t    handlers->handlers[i].mask);\n+      }\n+  \n+  return true;\n+}\n+\n+/* Handle the switch DECODED for the language indicated by LANG_MASK,\n+   using the handlers in *HANDLERS.  */\n+\n+void\n+read_cmdline_option (struct cl_decoded_option *decoded,\n+\t\t     unsigned int lang_mask,\n+\t\t     const struct cl_option_handlers *handlers)\n+{\n+  const struct cl_option *option;\n+  const char *opt;\n+\n+  if (decoded->opt_index == OPT_SPECIAL_unknown)\n+    {\n+      opt = decoded->arg;\n+\n+      if (handlers->unknown_option_callback (opt))\n+\terror (\"unrecognized command line option %qs\", opt);\n+      return;\n+    }\n+\n+  option = &cl_options[decoded->opt_index];\n+  opt = decoded->orig_option_with_args_text;\n+\n+  if (decoded->errors & CL_ERR_DISABLED)\n+    {\n+      error (\"command line option %qs\"\n+\t     \" is not supported by this configuration\", opt);\n+      return;\n+    }\n+\n+  if (decoded->errors & CL_ERR_WRONG_LANG)\n+    {\n+      handlers->wrong_lang_callback (opt, option, lang_mask);\n+      return;\n+    }\n+\n+  if (decoded->errors & CL_ERR_MISSING_ARG)\n+    {\n+      if (option->missing_argument_error)\n+\terror (option->missing_argument_error, opt);\n+      else\n+\terror (\"missing argument to %qs\", opt);\n+      return;\n+    }\n+\n+  if (decoded->errors & CL_ERR_UINT_ARG)\n+    {\n+      error (\"argument to %qs should be a non-negative integer\",\n+\t     option->opt_text);\n+      return;\n+    }\n+\n+  gcc_assert (!decoded->errors);\n+\n+  if (!handle_option (decoded->opt_index, decoded->arg, decoded->value,\n+\t\t      lang_mask, DK_UNSPECIFIED, handlers))\n+    error (\"unrecognized command line option %qs\", opt);\n+}\n+\n+/* Set any variable for option OPT_INDEX according to VALUE and ARG,\n+   diagnostic kind KIND.  */\n+\n+void\n+set_option (int opt_index, int value, const char *arg, int kind)\n+{\n+  const struct cl_option *option = &cl_options[opt_index];\n+\n+  if (!option->flag_var)\n+    return;\n+\n+  switch (option->var_type)\n+    {\n+    case CLVC_BOOLEAN:\n+\t*(int *) option->flag_var = value;\n+\tbreak;\n+\n+    case CLVC_EQUAL:\n+\t*(int *) option->flag_var = (value\n+\t\t\t\t     ? option->var_value\n+\t\t\t\t     : !option->var_value);\n+\tbreak;\n+\n+    case CLVC_BIT_CLEAR:\n+    case CLVC_BIT_SET:\n+\tif ((value != 0) == (option->var_type == CLVC_BIT_SET))\n+\t  *(int *) option->flag_var |= option->var_value;\n+\telse\n+\t  *(int *) option->flag_var &= ~option->var_value;\n+\tif (option->flag_var == &target_flags)\n+\t  target_flags_explicit |= option->var_value;\n+\tbreak;\n+\n+    case CLVC_STRING:\n+\t*(const char **) option->flag_var = arg;\n+\tbreak;\n+    }\n+\n+  if ((diagnostic_t) kind != DK_UNSPECIFIED)\n+    diagnostic_classify_diagnostic (global_dc, opt_index, (diagnostic_t) kind,\n+\t\t\t\t    UNKNOWN_LOCATION);\n+}"}, {"sha": "eaa31c5b572c6a243e179005cea04f10fe03ecb3", "filename": "gcc/opts.c", "status": "modified", "additions": 75, "deletions": 154, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -372,8 +372,9 @@ bool flag_warn_unused_result = false;\n const char **in_fnames;\n unsigned num_in_fnames;\n \n-static int common_handle_option (size_t scode, const char *arg, int value,\n-\t\t\t\t unsigned int lang_mask, int kind);\n+static bool common_handle_option (size_t scode, const char *arg, int value,\n+\t\t\t\t  unsigned int lang_mask, int kind,\n+\t\t\t\t  const struct cl_option_handlers *handlers);\n static void handle_param (const char *);\n static char *write_langs (unsigned int lang_mask);\n static void complain_wrong_lang (const char *, const struct cl_option *,\n@@ -460,112 +461,58 @@ void print_ignored_options (void)\n   input_location = saved_loc;\n }\n \n+/* Handle an unknown option ARG, returning true if an error should be\n+   given.  */\n \n-/* Handle option OPT_INDEX, and argument ARG, for the language\n-   indicated by LANG_MASK.  VALUE is true, unless no- form of an -f or\n-   -W option was given.  KIND is the diagnostic_t if this is a\n-   diagnostics option, DK_UNSPECIFIED otherwise.  Returns false if the\n-   switch was invalid.  */\n-bool\n-handle_option (int opt_index, int value, const char *arg,\n-\t\tunsigned int lang_mask, int kind)\n+static bool\n+unknown_option_callback (const char *opt)\n {\n-  const struct cl_option *option = &cl_options[opt_index];\n-\n-  if (option->flag_var)\n-    set_option (opt_index, value, arg, kind);\n-  \n-  if (option->flags & lang_mask)\n+  if (opt[1] == 'W' && opt[2] == 'n' && opt[3] == 'o' && opt[4] == '-')\n     {\n-      if (lang_hooks.handle_option (opt_index, arg, value, kind) == 0)\n-\treturn false;\n-#ifdef ENABLE_LTO\n-      else\n-\tlto_register_user_option (opt_index, arg, value, lang_mask);\n- #endif\n+      /* We don't generate warnings for unknown -Wno-* options unless\n+\t we issue diagnostics.  */\n+      postpone_unknown_option_warning (opt);\n+      return false;\n     }\n+  else\n+    return true;\n+}\n \n-  if (option->flags & CL_COMMON)\n-    {\n-      if (common_handle_option (opt_index, arg, value, lang_mask, kind) == 0)\n-\treturn false;\n-#ifdef ENABLE_LTO\n-      else\n-\tlto_register_user_option (opt_index, arg, value, CL_COMMON);\n-#endif\n-    }\n+/* Note that an option (index OPT_INDEX, argument ARG, value VALUE)\n+   has been successfully handled with a handler for mask MASK.  */\n \n-  if (option->flags & CL_TARGET)\n-    {\n-      if (!targetm.handle_option (opt_index, arg, value))\n-\treturn false;\n+static void\n+post_handling_callback (size_t opt_index ATTRIBUTE_UNUSED,\n+\t\t\tconst char *arg ATTRIBUTE_UNUSED,\n+\t\t\tint value ATTRIBUTE_UNUSED,\n+\t\t\tunsigned int mask ATTRIBUTE_UNUSED)\n+{\n #ifdef ENABLE_LTO\n-      else\n-\tlto_register_user_option (opt_index, arg, value, CL_TARGET);\n+  lto_register_user_option (opt_index, arg, value, mask);\n #endif\n-    }\n-  return true;\n }\n \n-/* Handle the switch DECODED for the language indicated by\n-   LANG_MASK.  */\n-static void\n-read_cmdline_option (struct cl_decoded_option *decoded,\n-\t\t     unsigned int lang_mask)\n-{\n-  const struct cl_option *option;\n-  const char *opt;\n-\n-  if (decoded->opt_index == OPT_SPECIAL_unknown)\n-    {\n-      opt = decoded->arg;\n-\n-      if (opt[1] == 'W' && opt[2] == 'n' && opt[3] == 'o' && opt[4] == '-')\n-\t/* We don't generate warnings for unknown -Wno-* options\n-\t   unless we issue diagnostics.  */\n-\t  postpone_unknown_option_warning (opt);\n-      else\n-\terror (\"unrecognized command line option %qs\", opt);\n-      return;\n-    }\n-\n-  option = &cl_options[decoded->opt_index];\n-  opt = decoded->orig_option_with_args_text;\n-\n-  if (decoded->errors & CL_ERR_DISABLED)\n-    {\n-      error (\"command line option %qs\"\n-\t     \" is not supported by this configuration\", opt);\n-      return;\n-    }\n-\n-  if (decoded->errors & CL_ERR_WRONG_LANG)\n-    {\n-      complain_wrong_lang (opt, option, lang_mask);\n-      return;\n-    }\n-\n-  if (decoded->errors & CL_ERR_MISSING_ARG)\n-    {\n-      if (option->missing_argument_error)\n-\terror (option->missing_argument_error, opt);\n-      else\n-\terror (\"missing argument to %qs\", opt);\n-      return;\n-    }\n+/* Handle a front-end option; arguments and return value as for\n+   handle_option.  */\n \n-  if (decoded->errors & CL_ERR_UINT_ARG)\n-    {\n-      error (\"argument to %qs should be a non-negative integer\",\n-\t     option->opt_text);\n-      return;\n-    }\n+static bool\n+lang_handle_option (size_t opt_index, const char *arg, int value,\n+\t\t    unsigned int lang_mask ATTRIBUTE_UNUSED, int kind,\n+\t\t    const struct cl_option_handlers *handlers)\n+{\n+  return lang_hooks.handle_option (opt_index, arg, value, kind, handlers);\n+}\n \n-  gcc_assert (!decoded->errors);\n+/* Handle a back-end option; arguments and return value as for\n+   handle_option.  */\n \n-  if (!handle_option (decoded->opt_index, decoded->value, decoded->arg,\n-\t\t      lang_mask, DK_UNSPECIFIED))\n-    error (\"unrecognized command line option %qs\", opt);\n+static bool\n+target_handle_option (size_t opt_index, const char *arg, int value,\n+\t\t    unsigned int lang_mask ATTRIBUTE_UNUSED, int kind,\n+\t\t    const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED)\n+{\n+  gcc_assert (kind == DK_UNSPECIFIED);\n+  return targetm.handle_option (opt_index, arg, value);\n }\n \n /* Handle FILENAME from the command line.  */\n@@ -659,11 +606,12 @@ flag_instrument_functions_exclude_p (tree fndecl)\n \n /* Handle the vector of command line options.  LANG_MASK\n    contains has a single bit set representing the current\n-   language.  */\n+   language.  HANDLERS describes what functions to call for the options.  */\n static void\n read_cmdline_options (struct cl_decoded_option *decoded_options,\n \t\t      unsigned int decoded_options_count,\n-\t\t      unsigned int lang_mask)\n+\t\t      unsigned int lang_mask,\n+\t\t      const struct cl_option_handlers *handlers)\n {\n   unsigned int i;\n \n@@ -681,7 +629,7 @@ read_cmdline_options (struct cl_decoded_option *decoded_options,\n \t  continue;\n \t}\n \n-      read_cmdline_option (decoded_options + i, lang_mask);\n+      read_cmdline_option (decoded_options + i, lang_mask, handlers);\n     }\n }\n \n@@ -698,6 +646,7 @@ decode_options (unsigned int argc, const char **argv,\n   static int initial_max_fields_for_field_sensitive;\n   static int initial_loop_invariant_max_bbs_in_loop;\n   static unsigned int initial_lang_mask;\n+  struct cl_option_handlers handlers;\n \n   unsigned int i, lang_mask;\n   int opt1;\n@@ -730,6 +679,17 @@ decode_options (unsigned int argc, const char **argv,\n     /* Perform language-specific options initialization.  */\n     lang_hooks.init_options (*decoded_options_count, *decoded_options);\n \n+  handlers.unknown_option_callback = unknown_option_callback;\n+  handlers.wrong_lang_callback = complain_wrong_lang;\n+  handlers.post_handling_callback = post_handling_callback;\n+  handlers.num_handlers = 3;\n+  handlers.handlers[0].handler = lang_handle_option;\n+  handlers.handlers[0].mask = lang_mask;\n+  handlers.handlers[1].handler = common_handle_option;\n+  handlers.handlers[1].mask = CL_COMMON;\n+  handlers.handlers[2].handler = target_handle_option;\n+  handlers.handlers[2].mask = CL_TARGET;\n+\n   /* Scan to see what optimization level has been specified.  That will\n      determine the default value of many flags.  */\n   for (i = 1; i < *decoded_options_count; i++)\n@@ -904,7 +864,7 @@ decode_options (unsigned int argc, const char **argv,\n     }\n \n   /* Enable -Werror=coverage-mismatch by default */\n-  enable_warning_as_error(\"coverage-mismatch\", 1, lang_mask);\n+  enable_warning_as_error (\"coverage-mismatch\", 1, lang_mask, &handlers);\n \n   if (first_time_p)\n     {\n@@ -932,7 +892,8 @@ decode_options (unsigned int argc, const char **argv,\n   OPTIMIZATION_OPTIONS (optimize, optimize_size);\n #endif\n \n-  read_cmdline_options (*decoded_options, *decoded_options_count, lang_mask);\n+  read_cmdline_options (*decoded_options, *decoded_options_count, lang_mask,\n+\t\t\t&handlers);\n \n   if (dump_base_name && ! IS_ABSOLUTE_PATH (dump_base_name))\n     {\n@@ -1426,9 +1387,10 @@ print_specific_help (unsigned int include_flags,\n    extra handling need to be listed here; if you simply want\n    VALUE assigned to a variable, it happens automatically.  */\n \n-static int\n+static bool\n common_handle_option (size_t scode, const char *arg, int value,\n-\t\t      unsigned int lang_mask, int kind ATTRIBUTE_UNUSED)\n+\t\t      unsigned int lang_mask, int kind ATTRIBUTE_UNUSED,\n+\t\t      const struct cl_option_handlers *handlers)\n {\n   static bool verbose = false;\n   enum opt_code code = (enum opt_code) scode;\n@@ -1610,7 +1572,7 @@ common_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_Werror_:\n-      enable_warning_as_error (arg, value, lang_mask);\n+      enable_warning_as_error (arg, value, lang_mask, handlers);\n       break;\n \n     case OPT_Wlarger_than_:\n@@ -1736,7 +1698,7 @@ common_handle_option (size_t scode, const char *arg, int value,\n \tdiagnostic_prefixing_rule (global_dc)\n \t  = DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE;\n       else\n-\treturn 0;\n+\treturn false;\n       break;\n \n     case OPT_fdiagnostics_show_option:\n@@ -1745,7 +1707,7 @@ common_handle_option (size_t scode, const char *arg, int value,\n \n     case OPT_fdump_:\n       if (!dump_switch_p (arg))\n-\treturn 0;\n+\treturn false;\n       break;\n \n     case OPT_fexcess_precision_:\n@@ -1909,7 +1871,7 @@ common_handle_option (size_t scode, const char *arg, int value,\n     case OPT_frandom_seed:\n       /* The real switch is -fno-random-seed.  */\n       if (value)\n-\treturn 0;\n+\treturn false;\n       set_random_seed (NULL);\n       break;\n \n@@ -1927,7 +1889,7 @@ common_handle_option (size_t scode, const char *arg, int value,\n       fix_sched_param (\"verbose\", arg);\n       break;\n #else\n-      return 0;\n+      return false;\n #endif\n \n     case OPT_fsched_stalled_insns_:\n@@ -1974,7 +1936,7 @@ common_handle_option (size_t scode, const char *arg, int value,\n     case OPT_fstack_limit:\n       /* The real switch is -fno-stack-limit.  */\n       if (value)\n-\treturn 0;\n+\treturn false;\n       stack_limit_rtx = NULL_RTX;\n       break;\n \n@@ -2141,7 +2103,7 @@ common_handle_option (size_t scode, const char *arg, int value,\n       break;\n     }\n \n-  return 1;\n+  return true;\n }\n \n /* Handle --param NAME=VALUE.  */\n@@ -2356,49 +2318,6 @@ get_option_state (int option, struct cl_option_state *state)\n   return true;\n }\n \n-/* Set *OPTION according to VALUE and ARG.  */\n-\n-void\n-set_option (int opt_index, int value, const char *arg, int kind)\n-{\n-  const struct cl_option *option = &cl_options[opt_index];\n-\n-  if (!option->flag_var)\n-    return;\n-\n-  switch (option->var_type)\n-    {\n-    case CLVC_BOOLEAN:\n-\t*(int *) option->flag_var = value;\n-\tbreak;\n-\n-    case CLVC_EQUAL:\n-\t*(int *) option->flag_var = (value\n-\t\t\t\t     ? option->var_value\n-\t\t\t\t     : !option->var_value);\n-\tbreak;\n-\n-    case CLVC_BIT_CLEAR:\n-    case CLVC_BIT_SET:\n-\tif ((value != 0) == (option->var_type == CLVC_BIT_SET))\n-\t  *(int *) option->flag_var |= option->var_value;\n-\telse\n-\t  *(int *) option->flag_var &= ~option->var_value;\n-\tif (option->flag_var == &target_flags)\n-\t  target_flags_explicit |= option->var_value;\n-\tbreak;\n-\n-    case CLVC_STRING:\n-\t*(const char **) option->flag_var = arg;\n-\tbreak;\n-    }\n-\n-  if ((diagnostic_t)kind != DK_UNSPECIFIED)\n-    diagnostic_classify_diagnostic (global_dc, opt_index, (diagnostic_t)kind,\n-\t\t\t\t    UNKNOWN_LOCATION);\n-}\n-\n-\n /* Callback function, called when -Werror= enables a warning.  */\n \n static void (*warning_as_error_callback) (int) = NULL;\n@@ -2416,7 +2335,8 @@ register_warning_as_error_callback (void (*callback) (int))\n    also by legacy Werror-implicit-function-declaration.  */\n \n void\n-enable_warning_as_error (const char *arg, int value, unsigned int lang_mask)\n+enable_warning_as_error (const char *arg, int value, unsigned int lang_mask,\n+\t\t\t const struct cl_option_handlers *handlers)\n {\n   char *new_option;\n   int option_index;\n@@ -2441,7 +2361,8 @@ enable_warning_as_error (const char *arg, int value, unsigned int lang_mask)\n \n \t  /* -Werror=foo implies -Wfoo.  */\n \t  if (option->var_type == CLVC_BOOLEAN)\n-\t    handle_option (option_index, value, arg, lang_mask, (int)kind);\n+\t    handle_option (option_index, arg, value, lang_mask, (int)kind,\n+\t\t\t   handlers);\n \n \t  if (warning_as_error_callback)\n \t    warning_as_error_callback (option_index);"}, {"sha": "6613da0c3b05d9b19ca64b96f46b246019eed51c", "filename": "gcc/opts.h", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f20c6574d02381a0d928beda3eff69dc00af1cb/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=5f20c6574d02381a0d928beda3eff69dc00af1cb", "patch": "@@ -135,6 +135,47 @@ struct cl_decoded_option\n   int errors;\n };\n \n+/* Structure describing a single option-handling callback.  */\n+\n+struct cl_option_handler_func\n+{\n+  /* The function called to handle the option.  */\n+  bool (*handler) (size_t opt_index, const char *arg, int value,\n+\t\t   unsigned int lang_mask, int kind,\n+\t\t   const struct cl_option_handlers *handlers);\n+\n+  /* The mask that must have some bit in common with the flags for the\n+     option for this particular handler to be used.  */\n+  unsigned int mask;\n+};\n+\n+/* Structure describing the callbacks used in handling options.  */\n+\n+struct cl_option_handlers\n+{\n+  /* Callback for an unknown option to determine whether to give an\n+     error for it, and possibly store information to diagnose the\n+     option at a later point.  Return true if an error should be\n+     given, false otherwise.  */\n+  bool (*unknown_option_callback) (const char *opt);\n+\n+  /* Callback to handle, and possibly diagnose, an option for another\n+     language.  */\n+  void (*wrong_lang_callback) (const char *text,\n+\t\t\t       const struct cl_option *option,\n+\t\t\t       unsigned int lang_mask);\n+\n+  /* Callback to call after the successful handling of any option.  */\n+  void (*post_handling_callback) (size_t opt_index, const char *arg,\n+\t\t\t\t  int value, unsigned int mask);\n+\n+  /* The number of individual handlers.  */\n+  size_t num_handlers;\n+\n+  /* The handlers themselves.  */\n+  struct cl_option_handler_func handlers[3];\n+};\n+\n /* Input file names.  */\n \n extern const char **in_fnames;\n@@ -157,10 +198,15 @@ extern void decode_options (unsigned int argc, const char **argv,\n extern int option_enabled (int opt_idx);\n extern bool get_option_state (int, struct cl_option_state *);\n extern void set_option (int opt_index, int value, const char *arg, int);\n-bool handle_option (int opt_index, int value, const char *arg,\n-\t\t    unsigned int lang_mask, int kind);\n+bool handle_option (size_t opt_index, const char *arg, int value,\n+\t\t    unsigned int lang_mask, int kind,\n+\t\t    const struct cl_option_handlers *handlers);\n+extern void read_cmdline_option (struct cl_decoded_option *decoded,\n+\t\t\t\t unsigned int lang_mask,\n+\t\t\t\t const struct cl_option_handlers *handlers);\n extern void register_warning_as_error_callback (void (*callback) (int));\n extern void enable_warning_as_error (const char *arg, int value,\n-\t\t\t\t     unsigned int lang_mask);\n+\t\t\t\t     unsigned int lang_mask,\n+\t\t\t\t     const struct cl_option_handlers *handlers);\n extern void print_ignored_options (void);\n #endif"}]}