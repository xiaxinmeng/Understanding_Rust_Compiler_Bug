{"sha": "65f8403f1a99f965ad3ed36adc4f889cf95ee1eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVmODQwM2YxYTk5Zjk2NWFkM2VkMzZhZGM0Zjg4OWNmOTVlZTFlYg==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-07-05T22:52:39Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-07-05T23:17:25Z"}, "message": "cris.md: Reinstate add/sub with extend\n\nWhen cleaning out the multitude of patterns with unknown\ncoverage, this one went the way of the bathwater.  It's use is\nbarely common enough to mark when diffing libgcc, and has a\nminimal impact on performance-testsuites.  Anyway, reinstated\nwith a couple of test-cases.  It's suboptimal of gcc-core not to\nmake use of the SImode pattern when performing HImode; see the\nFIXME (which is actually also reinstated).\n\nThis version uses match_operator, for continuity but will be\nreplaced with a version making use of iterators (like it does\nfor the mode).\n\ngcc:\n\t* config/cris/cris.md (\"*extopqihi\", \"*extop<mode>si<setnz>_swap\")\n\t(\"*extop<mode>si<setnz>\", \"*addxqihi_swap\"): Reinstate.\n\ngcc/testsuite:\n\t* gcc.target/cris/pr93372-36.c, gcc.target/cris/pr93372-37.c,\n\tgcc.target/cris/pr93372-38.c: New tests.", "tree": {"sha": "21ff95af33cf2bc8ce70be715619cb5336bea220", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21ff95af33cf2bc8ce70be715619cb5336bea220"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65f8403f1a99f965ad3ed36adc4f889cf95ee1eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f8403f1a99f965ad3ed36adc4f889cf95ee1eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65f8403f1a99f965ad3ed36adc4f889cf95ee1eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f8403f1a99f965ad3ed36adc4f889cf95ee1eb/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc9a9229285a26ac12bc8de53237ce9c4d42f867", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc9a9229285a26ac12bc8de53237ce9c4d42f867", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc9a9229285a26ac12bc8de53237ce9c4d42f867"}], "stats": {"total": 176, "additions": 176, "deletions": 0}, "files": [{"sha": "e700819d510f528a2b10f0190608af63b571bec5", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f8403f1a99f965ad3ed36adc4f889cf95ee1eb/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f8403f1a99f965ad3ed36adc4f889cf95ee1eb/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=65f8403f1a99f965ad3ed36adc4f889cf95ee1eb", "patch": "@@ -1108,6 +1108,89 @@\n   [(set_attr \"slottable\" \"yes,yes,yes,yes,no,no\")\n    (set_attr \"cc<ccnz>\" \"normal,normal,clobber,clobber,normal,normal\")])\n \f\n+;; Extend versions (zero/sign) of normal add/sub (no side-effects).\n+\n+;; QImode to HImode\n+;; FIXME: GCC should widen.\n+\n+(define_insn \"*extopqihi\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,r\")\n+\t(match_operator:HI\n+\t 3 \"cris_additive_operand_extend_operator\"\n+\t [(match_operand:HI 1 \"register_operand\" \"0,0,0,r\")\n+\t  (match_operator:HI\n+\t   4 \"cris_extend_operator\"\n+\t   [(match_operand:QI 2 \"nonimmediate_operand\" \"r,Q>,m,!To\")])]))\n+   (clobber (reg:CC CRIS_CC0_REGNUM))]\n+  \"GET_MODE_SIZE (GET_MODE (operands[0])) <= UNITS_PER_WORD\n+   && (operands[1] != frame_pointer_rtx || GET_CODE (operands[3]) != PLUS)\"\n+  \"@\n+   %x3%E4.%m4 %2,%0\n+   %x3%E4.%m4 %2,%0\n+   %x3%E4.%m4 %2,%0\n+   %x3%E4.%m4 %2,%1,%0\"\n+  [(set_attr \"slottable\" \"yes,yes,no,no\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n+(define_insn \"*extop<mode>si<setnz>\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r\")\n+\t(match_operator:SI\n+\t 3 \"cris_operand_extend_operator\"\n+\t [(match_operand:SI 1 \"register_operand\" \"0,0,0,r\")\n+\t  (match_operator:SI\n+\t   4 \"cris_extend_operator\"\n+\t   [(match_operand:BW 2 \"nonimmediate_operand\" \"r,Q>,m,!To\")])]))\n+   (clobber (reg:CC CRIS_CC0_REGNUM))]\n+  \"(GET_CODE (operands[3]) != UMIN || GET_CODE (operands[4]) == ZERO_EXTEND)\n+   && GET_MODE_SIZE (GET_MODE (operands[0])) <= UNITS_PER_WORD\n+   && (operands[1] != frame_pointer_rtx || GET_CODE (operands[3]) != PLUS)\"\n+  \"@\n+   %x3%E4<m> %2,%0\n+   %x3%E4<m> %2,%0\n+   %x3%E4<m> %2,%0\n+   %x3%E4<m> %2,%1,%0\"\n+  [(set_attr \"slottable\" \"yes,yes,no,no\")])\n+\f\n+;; We may have swapped operands for add or bound.\n+;; For commutative operands, these are the canonical forms.\n+\n+;; QImode to HImode\n+\n+(define_insn \"*addxqihi_swap\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,r\")\n+\t(plus:HI\n+\t (match_operator:HI\n+\t  3 \"cris_extend_operator\"\n+\t  [(match_operand:QI 2 \"nonimmediate_operand\" \"r,Q>,m,!To\")])\n+\t (match_operand:HI 1 \"register_operand\" \"0,0,0,r\")))\n+   (clobber (reg:CC CRIS_CC0_REGNUM))]\n+  \"operands[1] != frame_pointer_rtx\"\n+  \"@\n+   add%e3.b %2,%0\n+   add%e3.b %2,%0\n+   add%e3.b %2,%0\n+   add%e3.b %2,%1,%0\"\n+  [(set_attr \"slottable\" \"yes,yes,no,no\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n+(define_insn \"*extop<mode>si<setnz>_swap\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r\")\n+\t(match_operator:SI\n+\t 4 \"cris_plus_or_bound_operator\"\n+\t [(match_operator:SI\n+\t   3 \"cris_extend_operator\"\n+\t   [(match_operand:BW 2 \"nonimmediate_operand\" \"r,Q>,m,!To\")])\n+\t  (match_operand:SI 1 \"register_operand\" \"0,0,0,r\")]))\n+   (clobber (reg:CC CRIS_CC0_REGNUM))]\n+  \"(GET_CODE (operands[4]) != UMIN || GET_CODE (operands[3]) == ZERO_EXTEND)\n+   && operands[1] != frame_pointer_rtx\"\n+  \"@\n+   %x4%E3<m> %2,%0\n+   %x4%E3<m> %2,%0\n+   %x4%E3<m> %2,%0\n+   %x4%E3<m> %2,%1,%0\"\n+  [(set_attr \"slottable\" \"yes,yes,no,no\")])\n+\f\n ;; This is the special case when we use what corresponds to the\n ;; instruction above in \"casesi\".  Do *not* change it to use the generic\n ;; pattern and \"REG 15\" as pc; I did that and it led to madness and"}, {"sha": "84fbdb7091de8ae436703cce227aa85ebbd1d15c", "filename": "gcc/testsuite/gcc.target/cris/pr93372-36.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f8403f1a99f965ad3ed36adc4f889cf95ee1eb/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f8403f1a99f965ad3ed36adc4f889cf95ee1eb/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-36.c?ref=65f8403f1a99f965ad3ed36adc4f889cf95ee1eb", "patch": "@@ -0,0 +1,37 @@\n+/* Check that we produce sign- and zero-extended additions and\n+   subtractions, and that no (eliminable) test- or compare-instructions\n+   are used. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not {\\tcmp|\\ttest|\\tsub\\.|\\tadd\\.|\\tmovs} } } */\n+/* { dg-final { scan-assembler \"\\tadds\" } } */\n+/* { dg-final { scan-assembler \"\\tsubs\" } } */\n+\n+#ifndef t\n+#define t signed char\n+#define s _sc\n+#endif\n+\n+#ifndef t2\n+#define t2 int\n+#endif\n+\n+#ifndef f\n+#define f0(a, s) a ## s\n+#define f(a, s) f0(a, s)\n+#endif\n+\n+extern void g(int);\n+\n+t2 f(a, s) (t2 a, t *b, int *c)\n+{\n+  t2 d = a + *b;\n+  *c = d == 0;\n+  return d;\n+}\n+t2 f(b, s) (t2 a, t *b, int *c)\n+{\n+  t2 d = a - *b;\n+  *c = d == 0;\n+  return d;\n+}"}, {"sha": "0c43d77fc72dbb3295a17620a48db65e01917be0", "filename": "gcc/testsuite/gcc.target/cris/pr93372-37.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f8403f1a99f965ad3ed36adc4f889cf95ee1eb/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f8403f1a99f965ad3ed36adc4f889cf95ee1eb/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-37.c?ref=65f8403f1a99f965ad3ed36adc4f889cf95ee1eb", "patch": "@@ -0,0 +1,26 @@\n+/* Check that we produce sign- and zero-extended additions and\n+   subtractions, and that no (eliminable) test- or compare-instructions\n+   are used. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not {\\tcmp|\\ttest|\\tsub\\.|\\tadd\\.|\\tmovu|\\tmovs} } } */\n+/* { dg-final { scan-assembler-times \"\\tadds\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tsubs\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\taddu\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tsubu\" 2 } } */\n+\n+#define t unsigned char\n+#define s _uc\n+#include \"pr93372-36.c\"\n+\n+#undef t\n+#undef s\n+#define t signed short int\n+#define s _ss\n+#include \"pr93372-36.c\"\n+\n+#undef t\n+#undef s\n+#define t unsigned short int\n+#define s _us\n+#include \"pr93372-36.c\""}, {"sha": "c7cba3b4f15fe8864c4e0432ea876d1e97555e23", "filename": "gcc/testsuite/gcc.target/cris/pr93372-38.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f8403f1a99f965ad3ed36adc4f889cf95ee1eb/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-38.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f8403f1a99f965ad3ed36adc4f889cf95ee1eb/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-38.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-38.c?ref=65f8403f1a99f965ad3ed36adc4f889cf95ee1eb", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not {\\tcmp|\\tsub\\.|\\tadd\\.|\\tmovu|\\tmovs} } } */\n+/* { dg-final { scan-assembler-times \"\\ttest\\.w\" 4 } } */\n+/* { dg-final { scan-assembler-times \"\\tadds\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tsubs\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\taddu\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tsubu\" 1 } } */\n+\n+/* Check that we produce sign- and zero-extended additions and\n+   subtractions, also for 8-bit to 16-bit results.  Note that we can't\n+   eliminate compare insns, as the condition codes reflect the 32-bit\n+   result.\n+   This test-case is brittle, as with the presence of compare\n+   instructions, there are several optimal instruction sequence, some of\n+   which match the non-matcher patterns and do not contain the matching\n+   patterns. */\n+\n+#define t unsigned char\n+#define t2 unsigned short\n+#define s _us\n+#include \"pr93372-36.c\"\n+\n+#undef t\n+#undef s\n+#undef t2\n+#define t signed char\n+#define t2 signed short\n+#define s _ss\n+#include \"pr93372-36.c\""}]}