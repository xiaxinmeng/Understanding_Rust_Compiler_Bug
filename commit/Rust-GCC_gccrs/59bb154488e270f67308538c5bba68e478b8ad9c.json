{"sha": "59bb154488e270f67308538c5bba68e478b8ad9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTliYjE1NDQ4OGUyNzBmNjczMDg1MzhjNWJiYTY4ZTQ3OGI4YWQ5Yw==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2013-09-20T14:10:14Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2013-09-20T14:10:14Z"}, "message": "re PR middle-end/57748 (ICE when expanding assignment to unaligned zero-sized array)\n\n2013-09-20  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR middle-end/57748\n        * expr.c (expand_assignment): Remove misalignp code path.\n\ntestsuite/\n\n        PR middle-end/57748\n        * gcc.dg/torture/pr57748-1.c: New test.\n        * gcc.dg/torture/pr57748-2.c: New test.\n\nFrom-SVN: r202778", "tree": {"sha": "43f1354bf199e4c44aa97bee28fbf5063ffe50a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43f1354bf199e4c44aa97bee28fbf5063ffe50a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59bb154488e270f67308538c5bba68e478b8ad9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59bb154488e270f67308538c5bba68e478b8ad9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59bb154488e270f67308538c5bba68e478b8ad9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59bb154488e270f67308538c5bba68e478b8ad9c/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a54300190578a207d66e7db8931eabe936261c14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a54300190578a207d66e7db8931eabe936261c14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a54300190578a207d66e7db8931eabe936261c14"}], "stats": {"total": 151, "additions": 104, "deletions": 47}, "files": [{"sha": "7c2b467db1a9aa0d64117b03bcb9bc13e78914a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59bb154488e270f67308538c5bba68e478b8ad9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59bb154488e270f67308538c5bba68e478b8ad9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59bb154488e270f67308538c5bba68e478b8ad9c", "patch": "@@ -1,3 +1,8 @@\n+2013-09-20  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR middle-end/57748\n+\t* expr.c (expand_assignment): Remove misalignp code path.\n+\n 2013-09-20  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/58413"}, {"sha": "073c33527474396e831471d1c9caf8ef1e088acd", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 47, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59bb154488e270f67308538c5bba68e478b8ad9c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59bb154488e270f67308538c5bba68e478b8ad9c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=59bb154488e270f67308538c5bba68e478b8ad9c", "patch": "@@ -4709,8 +4709,6 @@ expand_assignment (tree to, tree from, bool nontemporal)\n       int unsignedp;\n       int volatilep = 0;\n       tree tem;\n-      bool misalignp;\n-      rtx mem = NULL_RTX;\n \n       push_temp_slots ();\n       tem = get_inner_reference (to, &bitsize, &bitpos, &offset, &mode1,\n@@ -4720,40 +4718,7 @@ expand_assignment (tree to, tree from, bool nontemporal)\n \t  && DECL_BIT_FIELD_TYPE (TREE_OPERAND (to, 1)))\n \tget_bit_range (&bitregion_start, &bitregion_end, to, &bitpos, &offset);\n \n-      /* If we are going to use store_bit_field and extract_bit_field,\n-\t make sure to_rtx will be safe for multiple use.  */\n-      mode = TYPE_MODE (TREE_TYPE (tem));\n-      if (TREE_CODE (tem) == MEM_REF\n-\t  && mode != BLKmode\n-\t  && ((align = get_object_alignment (tem))\n-\t      < GET_MODE_ALIGNMENT (mode))\n-\t  && ((icode = optab_handler (movmisalign_optab, mode))\n-\t      != CODE_FOR_nothing))\n-\t{\n-\t  struct expand_operand ops[2];\n-\n-\t  misalignp = true;\n-\t  to_rtx = gen_reg_rtx (mode);\n-\t  mem = expand_expr (tem, NULL_RTX, VOIDmode, EXPAND_WRITE);\n-\n-\t  /* If the misaligned store doesn't overwrite all bits, perform\n-\t     rmw cycle on MEM.  */\n-\t  if (bitsize != GET_MODE_BITSIZE (mode))\n-\t    {\n-\t      create_input_operand (&ops[0], to_rtx, mode);\n-\t      create_fixed_operand (&ops[1], mem);\n-\t      /* The movmisalign<mode> pattern cannot fail, else the assignment\n-\t\t would silently be omitted.  */\n-\t      expand_insn (icode, 2, ops);\n-\n-\t      mem = copy_rtx (mem);\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  misalignp = false;\n-\t  to_rtx = expand_expr (tem, NULL_RTX, VOIDmode, EXPAND_WRITE);\n-\t}\n+      to_rtx = expand_expr (tem, NULL_RTX, VOIDmode, EXPAND_WRITE);\n \n       /* If the bitfield is volatile, we want to access it in the\n \t field's mode, not the computed mode.\n@@ -4892,17 +4857,6 @@ expand_assignment (tree to, tree from, bool nontemporal)\n \t\t\t\t  get_alias_set (to), nontemporal);\n \t}\n \n-      if (misalignp)\n-\t{\n-\t  struct expand_operand ops[2];\n-\n-\t  create_fixed_operand (&ops[0], mem);\n-\t  create_input_operand (&ops[1], to_rtx, mode);\n-\t  /* The movmisalign<mode> pattern cannot fail, else the assignment\n-\t     would silently be omitted.  */\n-\t  expand_insn (icode, 2, ops);\n-\t}\n-\n       if (result)\n \tpreserve_temp_slots (result);\n       pop_temp_slots ();"}, {"sha": "0d6438b0eb87264e9c6b2dd037f91ccc40e547ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59bb154488e270f67308538c5bba68e478b8ad9c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59bb154488e270f67308538c5bba68e478b8ad9c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=59bb154488e270f67308538c5bba68e478b8ad9c", "patch": "@@ -1,3 +1,9 @@\n+2013-09-20  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR middle-end/57748\n+\t* gcc.dg/torture/pr57748-1.c: New test.\n+\t* gcc.dg/torture/pr57748-2.c: New test.\n+\n 2013-09-20  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/58413"}, {"sha": "dc0fcdc3b857c854fb8a52b8ddb24e869e7396a0", "filename": "gcc/testsuite/gcc.dg/torture/pr57748-1.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59bb154488e270f67308538c5bba68e478b8ad9c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57748-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59bb154488e270f67308538c5bba68e478b8ad9c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57748-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57748-1.c?ref=59bb154488e270f67308538c5bba68e478b8ad9c", "patch": "@@ -0,0 +1,49 @@\n+/* PR middle-end/57748 */\n+/* { dg-do run } */\n+/* ICE in expand_assignment:\n+   misalignp == true, !MEM_P (to_rtx), offset != 0,\n+   => gcc_assert (TREE_CODE (offset) == INTEGER_CST) */\n+\n+#include <stdlib.h>\n+\n+extern void abort (void);\n+\n+typedef long long V\n+  __attribute__ ((vector_size (2 * sizeof (long long)), may_alias));\n+\n+typedef struct S { V a; V b[0]; } P __attribute__((aligned (1)));\n+\n+struct __attribute__((packed)) T { char c; P s; };\n+\n+void __attribute__((noinline, noclone))\n+check (struct T *t)\n+{\n+  if (t->s.b[0][0] != 3 || t->s.b[0][1] != 4)\n+    abort ();\n+}\n+\n+int __attribute__((noinline, noclone))\n+get_i (void)\n+{\n+  return 0;\n+}\n+\n+void __attribute__((noinline, noclone))\n+foo (P *p)\n+{\n+  V a = { 3, 4 };\n+  int i = get_i ();\n+  p->b[i] = a;\n+}\n+\n+int\n+main ()\n+{\n+  struct T *t = (struct T *) calloc (128, 1);\n+\n+  foo (&t->s);\n+  check (t);\n+\n+  free (t);\n+  return 0;\n+}"}, {"sha": "4e3b4b88468cd6f4712811999c3d8e15ccdd3ec1", "filename": "gcc/testsuite/gcc.dg/torture/pr57748-2.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59bb154488e270f67308538c5bba68e478b8ad9c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57748-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59bb154488e270f67308538c5bba68e478b8ad9c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57748-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57748-2.c?ref=59bb154488e270f67308538c5bba68e478b8ad9c", "patch": "@@ -0,0 +1,43 @@\n+/* PR middle-end/57748 */\n+/* { dg-do run } */\n+/* wrong code in expand_assignment:\n+   misalignp == true, !MEM_P (to_rtx),\n+   offset == 0, bitpos >= GET_MODE_PRECISION,\n+   => result = NULL.  */\n+\n+#include <stdlib.h>\n+\n+extern void abort (void);\n+\n+typedef long long V\n+  __attribute__ ((vector_size (2 * sizeof (long long)), may_alias));\n+\n+typedef struct S { V a; V b[0]; } P __attribute__((aligned (1)));\n+\n+struct __attribute__((packed)) T { char c; P s; };\n+\n+void __attribute__((noinline, noclone))\n+check (struct T *t)\n+{\n+  if (t->s.b[0][0] != 3 || t->s.b[0][1] != 4)\n+    abort ();\n+}\n+\n+void __attribute__((noinline, noclone))\n+foo (P *p)\n+{\n+  V a = { 3, 4 };\n+  p->b[0] = a;\n+}\n+\n+int\n+main ()\n+{\n+  struct T *t = (struct T *) calloc (128, 1);\n+\n+  foo (&t->s);\n+  check (t);\n+\n+  free (t);\n+  return 0;\n+}"}]}