{"sha": "34a47f6fa975c142898ced6c8d036d6a4a1cd4d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRhNDdmNmZhOTc1YzE0Mjg5OGNlZDZjOGQwMzZkNmE0YTFjZDRkOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2010-05-02T13:10:40Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-05-02T13:10:40Z"}, "message": "revert: hwint.h (HOST_WIDE_INT_PRINT_DOUBLE_HEX): Change format string placeholder from 0x%x to %#x.\n\n\tRevert:\n\t* hwint.h (HOST_WIDE_INT_PRINT_DOUBLE_HEX): Change format string\n\tplaceholder from 0x%x to %#x.\n\t(HOST_WIDEST_INT_PRINT_DOUBLE_HEX): Ditto.\n\t* config/i386/i386.c (output_pic_addr_const): Ditto.\n\nFrom-SVN: r158972", "tree": {"sha": "ea3cf85e21a1429c274541a6dc4c91a4ccdd9191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea3cf85e21a1429c274541a6dc4c91a4ccdd9191"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34a47f6fa975c142898ced6c8d036d6a4a1cd4d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a47f6fa975c142898ced6c8d036d6a4a1cd4d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34a47f6fa975c142898ced6c8d036d6a4a1cd4d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a47f6fa975c142898ced6c8d036d6a4a1cd4d8/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "306fa8b75f4857b52ae27144a00447edddb2e31c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a47f6fa975c142898ced6c8d036d6a4a1cd4d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a47f6fa975c142898ced6c8d036d6a4a1cd4d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34a47f6fa975c142898ced6c8d036d6a4a1cd4d8", "patch": "@@ -1,3 +1,11 @@\n+2010-05-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tRevert:\n+\t* hwint.h (HOST_WIDE_INT_PRINT_DOUBLE_HEX): Change format string\n+\tplaceholder from 0x%x to %#x.\n+\t(HOST_WIDEST_INT_PRINT_DOUBLE_HEX): Ditto.\n+\t* config/i386/i386.c (output_pic_addr_const): Ditto.\n+\n 2010-05-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* vmsdbgout.c (ASM_OUTPUT_DEBUG_DATA1): Change format string"}, {"sha": "b722c4d832b91b222f887401b244fde8f41ae14e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a47f6fa975c142898ced6c8d036d6a4a1cd4d8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a47f6fa975c142898ced6c8d036d6a4a1cd4d8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=34a47f6fa975c142898ced6c8d036d6a4a1cd4d8", "patch": "@@ -10843,7 +10843,7 @@ output_pic_addr_const (FILE *file, rtx x, int code)\n \t{\n \t  /* We can use %d if the number is <32 bits and positive.  */\n \t  if (CONST_DOUBLE_HIGH (x) || CONST_DOUBLE_LOW (x) < 0)\n-\t    fprintf (file, \"%#lx%08lx\",\n+\t    fprintf (file, \"0x%lx%08lx\",\n \t\t     (unsigned long) CONST_DOUBLE_HIGH (x),\n \t\t     (unsigned long) CONST_DOUBLE_LOW (x));\n \t  else"}, {"sha": "c7fcd345bec84cc132cf33b9a00f67c81b1a8d2b", "filename": "gcc/hwint.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a47f6fa975c142898ced6c8d036d6a4a1cd4d8/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a47f6fa975c142898ced6c8d036d6a4a1cd4d8/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=34a47f6fa975c142898ced6c8d036d6a4a1cd4d8", "patch": "@@ -82,17 +82,17 @@ extern char sizeof_long_long_must_be_8[sizeof(long long) == 8 ? 1 : -1];\n      must be tweaked accordingly.  */\n # if HOST_BITS_PER_WIDE_INT == 64\n #  define HOST_WIDE_INT_PRINT_DOUBLE_HEX \\\n-     \"%#\" HOST_LONG_FORMAT \"x%016\" HOST_LONG_FORMAT \"x\"\n+     \"0x%\" HOST_LONG_FORMAT \"x%016\" HOST_LONG_FORMAT \"x\"\n # else\n #  define HOST_WIDE_INT_PRINT_DOUBLE_HEX \\\n-     \"%#\" HOST_LONG_FORMAT \"x%08\" HOST_LONG_FORMAT \"x\"\n+     \"0x%\" HOST_LONG_FORMAT \"x%08\" HOST_LONG_FORMAT \"x\"\n # endif\n #else\n # define HOST_WIDE_INT_PRINT HOST_LONG_LONG_FORMAT\n # define HOST_WIDE_INT_PRINT_C \"LL\"\n   /* We can assume that 'long long' is at least 64 bits.  */\n # define HOST_WIDE_INT_PRINT_DOUBLE_HEX \\\n-    \"%#\" HOST_LONG_LONG_FORMAT \"x%016\" HOST_LONG_LONG_FORMAT \"x\"\n+    \"0x%\" HOST_LONG_LONG_FORMAT \"x%016\" HOST_LONG_LONG_FORMAT \"x\"\n #endif /* HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG */\n \n #define HOST_WIDE_INT_PRINT_DEC \"%\" HOST_WIDE_INT_PRINT \"d\"\n@@ -131,7 +131,7 @@ extern char sizeof_long_long_must_be_8[sizeof(long long) == 8 ? 1 : -1];\n # define HOST_WIDEST_INT_PRINT_UNSIGNED\t      \"%\" HOST_LONG_LONG_FORMAT \"u\"\n # define HOST_WIDEST_INT_PRINT_HEX\t      \"%#\" HOST_LONG_LONG_FORMAT \"x\"\n # define HOST_WIDEST_INT_PRINT_DOUBLE_HEX     \\\n-    \"%#\" HOST_LONG_LONG_FORMAT \"x%016\" HOST_LONG_LONG_FORMAT \"x\"\n+    \"0x%\" HOST_LONG_LONG_FORMAT \"x%016\" HOST_LONG_LONG_FORMAT \"x\"\n #endif\n \n /* Define HOST_WIDEST_FAST_INT to the widest integer type supported"}]}