{"sha": "715dd933bd56edc7498495dc7dfe66768347f7b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE1ZGQ5MzNiZDU2ZWRjNzQ5ODQ5NWRjN2RmZTY2NzY4MzQ3ZjdiNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-04-18T06:57:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-04-18T06:57:45Z"}, "message": "re PR c++/84463 (Supposedly-incompliant \"error: '* key0' is not a constant expression\")\n\n\tPR c++/84463\n\t* typeck.c (cp_build_addr_expr_1): Move handling of offsetof-like\n\ttricks from here to ...\n\t* cp-gimplify.c (cp_fold) <case ADDR_EXPR>: ... here.  Only use it\n\tif INDIRECT_REF's operand is INTEGER_CST cast to pointer type.\n\n\t* g++.dg/cpp0x/constexpr-nullptr-1.C: Add -O1 to dg-options.\n\t* g++.dg/cpp0x/constexpr-nullptr-2.C: Expect different diagnostics\n\tin two cases.  Uncomment two other tests and add expected dg-error for\n\tthem.\n\t* g++.dg/init/struct2.C: Cast to int rather than long to avoid\n\t-Wnarrowing diagnostics on some targets for c++11.\n\t* g++.dg/parse/array-size2.C: Remove xfail.\n\t* g++.dg/cpp0x/constexpr-84463.C: New test.\n\nFrom-SVN: r259458", "tree": {"sha": "f9814ccf3cf6d6f69a67656064fc3303ac49c7d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9814ccf3cf6d6f69a67656064fc3303ac49c7d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/715dd933bd56edc7498495dc7dfe66768347f7b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/715dd933bd56edc7498495dc7dfe66768347f7b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/715dd933bd56edc7498495dc7dfe66768347f7b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/715dd933bd56edc7498495dc7dfe66768347f7b5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a56e2f69fede451499cfcbb58bab7687e4b1643a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a56e2f69fede451499cfcbb58bab7687e4b1643a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a56e2f69fede451499cfcbb58bab7687e4b1643a"}], "stats": {"total": 93, "additions": 72, "deletions": 21}, "files": [{"sha": "c80b281d3130ae317b84e827f1bbaa2897592b5f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715dd933bd56edc7498495dc7dfe66768347f7b5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715dd933bd56edc7498495dc7dfe66768347f7b5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=715dd933bd56edc7498495dc7dfe66768347f7b5", "patch": "@@ -1,3 +1,11 @@\n+2018-04-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/84463\n+\t* typeck.c (cp_build_addr_expr_1): Move handling of offsetof-like\n+\ttricks from here to ...\n+\t* cp-gimplify.c (cp_fold) <case ADDR_EXPR>: ... here.  Only use it\n+\tif INDIRECT_REF's operand is INTEGER_CST cast to pointer type.\n+\n 2018-04-18  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR c++/80290"}, {"sha": "74490654631fe66d5954779415039ff4ba8c91d5", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715dd933bd56edc7498495dc7dfe66768347f7b5/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715dd933bd56edc7498495dc7dfe66768347f7b5/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=715dd933bd56edc7498495dc7dfe66768347f7b5", "patch": "@@ -2215,6 +2215,28 @@ cp_fold (tree x)\n       goto unary;\n \n     case ADDR_EXPR:\n+      loc = EXPR_LOCATION (x);\n+      op0 = cp_fold_maybe_rvalue (TREE_OPERAND (x, 0), false);\n+\n+      /* Cope with user tricks that amount to offsetof.  */\n+      if (op0 != error_mark_node\n+\t  && TREE_CODE (TREE_TYPE (op0)) != FUNCTION_TYPE\n+\t  && TREE_CODE (TREE_TYPE (op0)) != METHOD_TYPE)\n+\t{\n+\t  tree val = get_base_address (op0);\n+\t  if (val\n+\t      && INDIRECT_REF_P (val)\n+\t      && COMPLETE_TYPE_P (TREE_TYPE (val))\n+\t      && TREE_CONSTANT (TREE_OPERAND (val, 0)))\n+\t    {\n+\t      val = TREE_OPERAND (val, 0);\n+\t      STRIP_NOPS (val);\n+\t      if (TREE_CODE (val) == INTEGER_CST)\n+\t\treturn fold_convert (TREE_TYPE (x), fold_offsetof_1 (op0));\n+\t    }\n+\t}\n+      goto finish_unary;\n+\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n       rval_ops = false;\n@@ -2232,6 +2254,7 @@ cp_fold (tree x)\n       loc = EXPR_LOCATION (x);\n       op0 = cp_fold_maybe_rvalue (TREE_OPERAND (x, 0), rval_ops);\n \n+    finish_unary:\n       if (op0 != TREE_OPERAND (x, 0))\n \t{\n \t  if (op0 == error_mark_node)"}, {"sha": "f5081c1661c5811bd2d9e6100b6bcb34bf646f35", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715dd933bd56edc7498495dc7dfe66768347f7b5/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715dd933bd56edc7498495dc7dfe66768347f7b5/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=715dd933bd56edc7498495dc7dfe66768347f7b5", "patch": "@@ -5893,19 +5893,6 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n       return arg;\n     }\n \n-  /* ??? Cope with user tricks that amount to offsetof.  */\n-  if (TREE_CODE (argtype) != FUNCTION_TYPE\n-      && TREE_CODE (argtype) != METHOD_TYPE\n-      && argtype != unknown_type_node\n-      && (val = get_base_address (arg))\n-      && COMPLETE_TYPE_P (TREE_TYPE (val))\n-      && INDIRECT_REF_P (val)\n-      && TREE_CONSTANT (TREE_OPERAND (val, 0)))\n-    {\n-      tree type = build_pointer_type (argtype);\n-      return fold_convert (type, fold_offsetof_1 (arg));\n-    }\n-\n   /* Handle complex lvalues (when permitted)\n      by reduction to simpler cases.  */\n   val = unary_complex_lvalue (ADDR_EXPR, arg);"}, {"sha": "658b52de5272d8812fda1604c881a46a4a2033bc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715dd933bd56edc7498495dc7dfe66768347f7b5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715dd933bd56edc7498495dc7dfe66768347f7b5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=715dd933bd56edc7498495dc7dfe66768347f7b5", "patch": "@@ -1,3 +1,15 @@\n+2018-04-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/84463\n+\t* g++.dg/cpp0x/constexpr-nullptr-1.C: Add -O1 to dg-options.\n+\t* g++.dg/cpp0x/constexpr-nullptr-2.C: Expect different diagnostics\n+\tin two cases.  Uncomment two other tests and add expected dg-error for\n+\tthem.\n+\t* g++.dg/init/struct2.C: Cast to int rather than long to avoid\n+\t-Wnarrowing diagnostics on some targets for c++11.\n+\t* g++.dg/parse/array-size2.C: Remove xfail.\n+\t* g++.dg/cpp0x/constexpr-84463.C: New test.\n+\n 2018-04-17  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \t* gcc.target/powerpc/undef-bool-2.c: Add -mvsx."}, {"sha": "0743059be5311855c3ae8bff8ed136be364d9c61", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-84463.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715dd933bd56edc7498495dc7dfe66768347f7b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-84463.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715dd933bd56edc7498495dc7dfe66768347f7b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-84463.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-84463.C?ref=715dd933bd56edc7498495dc7dfe66768347f7b5", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/84463\n+// { dg-do compile { target c++11 } }\n+\n+struct S { int r; const unsigned char s[5]; };\n+static constexpr S a[] = { { 0, \"abcd\" } };\n+struct T { const unsigned char s[5]; };\n+static constexpr T b[] = { { \"abcd\" } };\n+\n+constexpr int\n+foo (const unsigned char *x)\n+{\n+  return x[0];\n+}\n+\n+constexpr static const S *j = &a[0];\n+constexpr static const int k = j->s[0];\n+constexpr static int l = foo (a[0].s);\n+constexpr static int m = foo (j->s);\n+constexpr static const T *n = &b[0];\n+constexpr static const int o = n->s[0];\n+constexpr static int p = foo (b[0].s);\n+constexpr static int q = foo (n->s);"}, {"sha": "ed53fcd69aaa74f51a7a041cfef01a4666cc988a", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-nullptr-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715dd933bd56edc7498495dc7dfe66768347f7b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-nullptr-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715dd933bd56edc7498495dc7dfe66768347f7b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-nullptr-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-nullptr-1.C?ref=715dd933bd56edc7498495dc7dfe66768347f7b5", "patch": "@@ -6,7 +6,7 @@\n // c++/67376 on gcc-patches for additional background.\n \n // { dg-do compile { target c++11 } }\n-// { dg-options \"-fdelete-null-pointer-checks -fdump-tree-optimized\" }\n+// { dg-options \"-O1 -fdelete-null-pointer-checks -fdump-tree-optimized\" }\n \n // Runtime assert.  Used for potentially invalid expressions.\n #define RA(e)  ((e) ? (void)0 : __builtin_abort ())"}, {"sha": "3b3f01adea3eac9b305f6f402e2e2d4a4688abda", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-nullptr-2.C", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715dd933bd56edc7498495dc7dfe66768347f7b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-nullptr-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715dd933bd56edc7498495dc7dfe66768347f7b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-nullptr-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-nullptr-2.C?ref=715dd933bd56edc7498495dc7dfe66768347f7b5", "patch": "@@ -192,12 +192,11 @@ constexpr bool b11 = ps >= (S*)0;\n constexpr S* ps1 = ps;\n constexpr S* ps2 = ps1;\n \n-// The following aren't diagnosed due to a bug.\n-// constexpr int* pi0 = &((S*)0)->i;\n-// constexpr int* pi1 = &((S*)nullptr)->i;\n+constexpr int* pi0 = &((S*)0)->i;\t// { dg-error \"null pointer|not a constant\" }\n+constexpr int* pi1 = &((S*)nullptr)->i;\t// { dg-error \"null pointer|not a constant\" }\n \n-constexpr int* pj0 = &((S*)0)->j;\t// { dg-error \"not a constant expression\" }\n-constexpr int* pj1 = &((S*)nullptr)->j;  // { dg-error \"not a constant expression\" }\n+constexpr int* pj0 = &((S*)0)->j;\t// { dg-error \"null pointer|not a constant\" }\n+constexpr int* pj1 = &((S*)nullptr)->j;\t// { dg-error \"null pointer|not a constant\" }\n \n constexpr int* psi = &ps->i;\t    // { dg-error \"null pointer|not a constant\" }\n constexpr int* psj = &ps->j;\t    // { dg-error \"null pointer|not a constant\" }"}, {"sha": "4396febdc469249591814527441b5b9a58d4484d", "filename": "gcc/testsuite/g++.dg/init/struct2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715dd933bd56edc7498495dc7dfe66768347f7b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstruct2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715dd933bd56edc7498495dc7dfe66768347f7b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstruct2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstruct2.C?ref=715dd933bd56edc7498495dc7dfe66768347f7b5", "patch": "@@ -15,7 +15,7 @@ void saveOrLoad() {\n     };    \n \n     SaveLoadEntry trackEntries = {\n-\t((long) (__SIZE_TYPE__) (&((Track *) 42)->soundName[0])) - 42,\n+\t((int) (__SIZE_TYPE__) (&((Track *) 42)->soundName[0])) - 42,\n         0, 1\n     };\n     saveLoadEntries(&trackEntries);"}, {"sha": "d0bc47fe746618e1e45ffc713d5d8d949b42349d", "filename": "gcc/testsuite/g++.dg/parse/array-size2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715dd933bd56edc7498495dc7dfe66768347f7b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Farray-size2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715dd933bd56edc7498495dc7dfe66768347f7b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Farray-size2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Farray-size2.C?ref=715dd933bd56edc7498495dc7dfe66768347f7b5", "patch": "@@ -15,6 +15,6 @@ void\n foo (void)\n {\n   char g[(char *) &((struct S *) 0)->b - (char *) 0]; // { dg-error \"constant\" }\n-  char h[(__SIZE_TYPE__) &((struct S *) 8)->b];\t      // { dg-error \"constant\" \"\" { xfail *-*-* } }\n+  char h[(__SIZE_TYPE__) &((struct S *) 8)->b];\t      // { dg-error \"constant\" }\n   bar (g, h);\n }"}]}