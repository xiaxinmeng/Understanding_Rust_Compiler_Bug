{"sha": "045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ1YTUyYzgyZWIzZGJkN2EwNmJlZTc4ZDg5ZjdiNmMwYjBmZDU0Mw==", "commit": {"author": {"name": "Dave Korn", "email": "dave.korn.cygwin@gmail.com", "date": "2010-03-21T19:34:19Z"}, "committer": {"name": "Dave Korn", "email": "davek@gcc.gnu.org", "date": "2010-03-21T19:34:19Z"}, "message": "PR target/42811 (prerequisite)\n\n\tPR target/42811 (prerequisite)\n\t* include/private/gc_priv.h (struct roots) [CYGWIN32]: Don't\n\tdeclare r_next member on Cygwin as on other windows hosts.\n\t(LOG_RT_SIZE) [CYGWIN32]: Don't define likewise.\n\t(RT_SIZE) [CYGWIN32]: Likewise.\n\t(struct _GC_arrays) [CYGWIN32]: Do declare _heap_bases[] member\n\tlikewise.\n\t(GC_heap_bases) [CYGWIN32]: Do define likewise.\n\t(struct _SYSTEM_INFO) [CYGWIN32]: Do forward-declare likewise.\n\t(GC_sysinfo) [CYGWIN32]: Do declare extern likewise.\n\t(GC_n_heap_bases) [CYGWIN32]: Likewise.\n\t(GC_is_tmp_root) [CYGWIN32]: Do prototype likewise.\n\t* include/private/gcconfig.h (GC_win32_get_mem) [CYGWIN32]: Likewise.\n\t(GET_MEM) [CYGWIN32]: Do define likewise.\n\t* boehm-gc/ptr_chck.c (GC_is_visible) [CYGWIN32]: Do handle dynamic\n\tregistration likewise.\n\t* boehm-gc/os_dep.c (GC_setpagesize) [CYGWIN32]: Do define likewise.\n\t(GC_no_win32_dlls) [CYGWIN32]: Define as constant false, unlike\n\tother windows hosts.\n\t(GC_sysinfo) [CYGWIN32]: Define as on other windows hosts.\n\t(GC_n_heap_bases) [CYGWIN32]: Likewise.\n\t(GLOBAL_ALLOC_TEST) [CYGWIN32]: Likewise.\n\t(GC_win32_get_mem) [CYGWIN32]: Likewise, but wrapping GC_unix_get_mem\n\trather than GlobalAlloc/VirtualAlloc.\n\t(GC_win32_free_heap) [CYGWIN32]: Likewise, but wrapping free instead\n\tof GlobalFree (even though the function body is optimised away).\n\t* boehm-gc/mark_rts.c (add_roots_to_index) [CYGWIN32]: Define as on\n\tother windows hosts.\n\t(GC_add_roots_inner) [CYGWIN32]: Avoid overlapping or adjacent\n\tintervals likewise.\n\t(GC_clear_roots) [CYGWIN32]: Clear GC_root_index[] likewise.\n\t(GC_rebuild_root_index) [CYGWIN32]: Define as on other windows hosts.\n\t(GC_remove_tmp_roots) [CYGWIN32]: Call it likewise.\n\t(GC_remove_roots) [CYGWIN32]: Don't define, as on other windows hosts.\n\t(GC_is_tmp_root) [CYGWIN32]: Define, as on other windows hosts.\n\t(GC_cond_register_dynamic_libraries) [CYGWIN32]: Handle temporary\n\troots and dynamic registration likewise.\n\t* boehm-gc/dyn_load.c (GC_has_static_roots) [CYGWIN32]: Define as on\n\tother windows hosts.\n\t(GC_register_has_static_roots_callback) [CYGWIN32]: Likewise.\n\t(GC_cond_add_roots) [CYGWIN32]: Likewise.\n\t(GC_register_main_static_data) [CYGWIN32]: Define to always return\n\tfalse, as on MSWINCE\n\t(HAVE_REGISTER_MAIN_STATIC_DATA) [CYGWIN32]: Define as on other\n\twindows hosts.\n\t(GC_warn_fb) [CYGWIN32]: Likewise.\n\t(GC_disallow_ignore_fb) [CYGWIN32]: Likewise.\n\t(GC_ignore_fb_mb) [CYGWIN32]: Likewise.\n\t(GC_ignore_fb) [CYGWIN32]: Likewise.\n\t(is_frame_buffer) [CYGWIN32]: Likewise.\n\t(GC_dump_meminfo) [CYGWIN32]: Likewise.\n\t(GC_wnt) [CYGWIN32]: Define to constant true.\n\t(GC_register_dynamic_libraries) [CYGWIN32]: Define as on other\n\twindows hosts.\n\nFrom-SVN: r157604", "tree": {"sha": "c6fa9007c1930ea8acd78fbef42d3a79115e9884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6fa9007c1930ea8acd78fbef42d3a79115e9884"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543", "html_url": "https://github.com/Rust-GCC/gccrs/commit/045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543/comments", "author": {"login": "davek-cygwin", "id": 530057, "node_id": "MDQ6VXNlcjUzMDA1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/530057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davek-cygwin", "html_url": "https://github.com/davek-cygwin", "followers_url": "https://api.github.com/users/davek-cygwin/followers", "following_url": "https://api.github.com/users/davek-cygwin/following{/other_user}", "gists_url": "https://api.github.com/users/davek-cygwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/davek-cygwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davek-cygwin/subscriptions", "organizations_url": "https://api.github.com/users/davek-cygwin/orgs", "repos_url": "https://api.github.com/users/davek-cygwin/repos", "events_url": "https://api.github.com/users/davek-cygwin/events{/privacy}", "received_events_url": "https://api.github.com/users/davek-cygwin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "242ba3086f634ff47a6fe7701ac94f3a5fa249e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/242ba3086f634ff47a6fe7701ac94f3a5fa249e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/242ba3086f634ff47a6fe7701ac94f3a5fa249e1"}], "stats": {"total": 148, "additions": 112, "deletions": 36}, "files": [{"sha": "0591dd6068a69ff20ce56e8184531fff1f41752b", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543", "patch": "@@ -1,3 +1,60 @@\n+2010-03-21  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\tPR target/42811 (prerequisite)\n+\t* include/private/gc_priv.h (struct roots) [CYGWIN32]: Don't\n+\tdeclare r_next member on Cygwin as on other windows hosts.\n+\t(LOG_RT_SIZE) [CYGWIN32]: Don't define likewise.\n+\t(RT_SIZE) [CYGWIN32]: Likewise.\n+\t(struct _GC_arrays) [CYGWIN32]: Do declare _heap_bases[] member\n+\tlikewise.\n+\t(GC_heap_bases) [CYGWIN32]: Do define likewise.\n+\t(struct _SYSTEM_INFO) [CYGWIN32]: Do forward-declare likewise.\n+\t(GC_sysinfo) [CYGWIN32]: Do declare extern likewise.\n+\t(GC_n_heap_bases) [CYGWIN32]: Likewise.\n+\t(GC_is_tmp_root) [CYGWIN32]: Do prototype likewise.\n+\t* include/private/gcconfig.h (GC_win32_get_mem) [CYGWIN32]: Likewise.\n+\t(GET_MEM) [CYGWIN32]: Do define likewise.\n+\t* boehm-gc/ptr_chck.c (GC_is_visible) [CYGWIN32]: Do handle dynamic\n+\tregistration likewise.\n+\t* boehm-gc/os_dep.c (GC_setpagesize) [CYGWIN32]: Do define likewise.\n+\t(GC_no_win32_dlls) [CYGWIN32]: Define as constant false, unlike\n+\tother windows hosts.\n+\t(GC_sysinfo) [CYGWIN32]: Define as on other windows hosts.\n+\t(GC_n_heap_bases) [CYGWIN32]: Likewise.\n+\t(GLOBAL_ALLOC_TEST) [CYGWIN32]: Likewise.\n+\t(GC_win32_get_mem) [CYGWIN32]: Likewise, but wrapping GC_unix_get_mem\n+\trather than GlobalAlloc/VirtualAlloc.\n+\t(GC_win32_free_heap) [CYGWIN32]: Likewise, but wrapping free instead\n+\tof GlobalFree (even though the function body is optimised away).\n+\t* boehm-gc/mark_rts.c (add_roots_to_index) [CYGWIN32]: Define as on\n+\tother windows hosts.\n+\t(GC_add_roots_inner) [CYGWIN32]: Avoid overlapping or adjacent\n+\tintervals likewise.\n+\t(GC_clear_roots) [CYGWIN32]: Clear GC_root_index[] likewise.\n+\t(GC_rebuild_root_index) [CYGWIN32]: Define as on other windows hosts.\n+\t(GC_remove_tmp_roots) [CYGWIN32]: Call it likewise.\n+\t(GC_remove_roots) [CYGWIN32]: Don't define, as on other windows hosts.\n+\t(GC_is_tmp_root) [CYGWIN32]: Define, as on other windows hosts.\n+\t(GC_cond_register_dynamic_libraries) [CYGWIN32]: Handle temporary\n+\troots and dynamic registration likewise.\n+\t* boehm-gc/dyn_load.c (GC_has_static_roots) [CYGWIN32]: Define as on\n+\tother windows hosts.\n+\t(GC_register_has_static_roots_callback) [CYGWIN32]: Likewise.\n+\t(GC_cond_add_roots) [CYGWIN32]: Likewise.\n+\t(GC_register_main_static_data) [CYGWIN32]: Define to always return\n+\tfalse, as on MSWINCE\n+\t(HAVE_REGISTER_MAIN_STATIC_DATA) [CYGWIN32]: Define as on other\n+\twindows hosts.\n+\t(GC_warn_fb) [CYGWIN32]: Likewise.\n+\t(GC_disallow_ignore_fb) [CYGWIN32]: Likewise.\n+\t(GC_ignore_fb_mb) [CYGWIN32]: Likewise.\n+\t(GC_ignore_fb) [CYGWIN32]: Likewise.\n+\t(is_frame_buffer) [CYGWIN32]: Likewise.\n+\t(GC_dump_meminfo) [CYGWIN32]: Likewise.\n+\t(GC_wnt) [CYGWIN32]: Define to constant true.\n+\t(GC_register_dynamic_libraries) [CYGWIN32]: Define as on other\n+\twindows hosts.\n+\n 2009-12-09  Matthias Klose  <doko@ubuntu.com> \n \n \t* include/private/gc_locks.h: For __ARM_EABI__ define"}, {"sha": "5bebc1c155d13e6f4670a6a3cbfed073b22aa331", "filename": "boehm-gc/dyn_load.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543/boehm-gc%2Fdyn_load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543/boehm-gc%2Fdyn_load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fdyn_load.c?ref=045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543", "patch": "@@ -49,10 +49,13 @@\n #   undef GC_must_restore_redefined_dlopen\n # endif\n \n-#if (defined(DYNAMIC_LOADING) || defined(MSWIN32) || defined(MSWINCE)) \\\n+#if (defined(DYNAMIC_LOADING) \\\n+\t|| defined(MSWIN32)   \\\n+\t|| defined(MSWINCE)   \\\n+\t|| defined(CYGWIN32)) \\\n     && !defined(PCR)\n #if !defined(SUNOS4) && !defined(SUNOS5DL) && !defined(IRIX5) && \\\n-    !defined(MSWIN32) && !defined(MSWINCE) && \\\n+    !defined(MSWIN32) && !defined(MSWINCE) && !defined(CYGWIN32) && \\\n     !(defined(ALPHA) && defined(OSF1)) && \\\n     !defined(HPUX) && !(defined(LINUX) && defined(__ELF__)) && \\\n     !defined(RS6000) && !defined(SCO_ELF) && !defined(DGUX) && \\\n@@ -717,7 +720,7 @@ void GC_register_dynamic_libraries()\n \n # endif /* USE_PROC || IRIX5 */\n \n-# if defined(MSWIN32) || defined(MSWINCE)\n+# if defined(MSWIN32) || defined(MSWINCE) || defined(CYGWIN32)\n \n # define WIN32_LEAN_AND_MEAN\n # define NOSERVICE\n@@ -761,7 +764,7 @@ void GC_register_dynamic_libraries()\n     }\n # endif\n \n-# ifdef MSWINCE\n+# if defined(MSWINCE) || defined(CYGWIN32)\n   /* Do we need to separately register the main static data segment? */\n   GC_bool GC_register_main_static_data()\n   {\n@@ -868,8 +871,12 @@ void GC_register_dynamic_libraries()\n   }\n # endif /* DEBUG_VIRTUALQUERY */\n \n-  extern GC_bool GC_wnt;  /* Is Windows NT derivative.\t\t*/\n-  \t\t\t  /* Defined and set in os_dep.c.\t*/\n+# ifdef CYGWIN32\n+#   define GC_wnt (TRUE)\n+# else\n+    extern GC_bool GC_wnt;  /* Is Windows NT derivative.\t*/\n+  \t\t\t    /* Defined and set in os_dep.c.\t*/\n+# endif\n \n   void GC_register_dynamic_libraries()\n   {\n@@ -934,7 +941,7 @@ void GC_register_dynamic_libraries()\n     GC_cond_add_roots(base, limit);\n   }\n \n-#endif /* MSWIN32 || MSWINCE */\n+#endif /* MSWIN32 || MSWINCE || CYGWIN32 */\n   \n #if defined(ALPHA) && defined(OSF1)\n "}, {"sha": "4dbfa7d1fedb18e992178fd6b7b11fd9a582902e", "filename": "boehm-gc/include/private/gc_priv.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543/boehm-gc%2Finclude%2Fprivate%2Fgc_priv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543/boehm-gc%2Finclude%2Fprivate%2Fgc_priv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fprivate%2Fgc_priv.h?ref=045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543", "patch": "@@ -833,14 +833,14 @@ struct exclusion {\n struct roots {\n \tptr_t r_start;\n \tptr_t r_end;\n-#\tif !defined(MSWIN32) && !defined(MSWINCE)\n+#\tif !defined(MSWIN32) && !defined(MSWINCE) && !defined(CYGWIN32)\n \t  struct roots * r_next;\n #\tendif\n \tGC_bool r_tmp;\n \t  \t/* Delete before registering new dynamic libraries */\n };\n \n-#if !defined(MSWIN32) && !defined(MSWINCE)\n+#if !defined(MSWIN32) && !defined(MSWINCE) && !defined(CYGWIN32)\n     /* Size of hash table index to roots.\t*/\n #   define LOG_RT_SIZE 6\n #   define RT_SIZE (1 << LOG_RT_SIZE) /* Power of 2, may be != MAX_ROOT_SETS */\n@@ -1024,7 +1024,7 @@ struct _GC_arrays {\n   struct HeapSect {\n       ptr_t hs_start; word hs_bytes;\n   } _heap_sects[MAX_HEAP_SECTS];\n-# if defined(MSWIN32) || defined(MSWINCE)\n+# if defined(MSWIN32) || defined(MSWINCE) || defined(CYGWIN32)\n     ptr_t _heap_bases[MAX_HEAP_SECTS];\n     \t\t/* Start address of memory regions obtained from kernel. */\n # endif\n@@ -1033,7 +1033,7 @@ struct _GC_arrays {\n     \t\t/* Commited lengths of memory regions obtained from kernel. */\n # endif\n   struct roots _static_roots[MAX_ROOT_SETS];\n-# if !defined(MSWIN32) && !defined(MSWINCE)\n+# if !defined(MSWIN32) && !defined(MSWINCE) && !defined(CYGWIN32)\n     struct roots * _root_index[RT_SIZE];\n # endif\n   struct exclusion _excl_table[MAX_EXCLUSIONS];\n@@ -1091,7 +1091,7 @@ GC_API GC_FAR struct _GC_arrays GC_arrays;\n # ifdef USE_MUNMAP\n #   define GC_unmapped_bytes GC_arrays._unmapped_bytes\n # endif\n-# if defined(MSWIN32) || defined(MSWINCE)\n+# if defined(MSWIN32) || defined(MSWINCE) || defined (CYGWIN32)\n #   define GC_heap_bases GC_arrays._heap_bases\n # endif\n # ifdef MSWINCE\n@@ -1187,7 +1187,7 @@ extern word GC_n_heap_sects;\t/* Number of separately added heap\t*/\n \n extern word GC_page_size;\n \n-# if defined(MSWIN32) || defined(MSWINCE)\n+# if defined(MSWIN32) || defined(MSWINCE) || defined(CYGWIN32)\n   struct _SYSTEM_INFO;\n   extern struct _SYSTEM_INFO GC_sysinfo;\n   extern word GC_n_heap_bases;\t/* See GC_heap_bases.\t*/\n@@ -1479,7 +1479,7 @@ void GC_remove_roots_inner GC_PROTO((char * b, char * e));\n GC_bool GC_is_static_root GC_PROTO((ptr_t p));\n   \t\t/* Is the address p in one of the registered static\t*/\n   \t\t/* root sections?\t\t\t\t\t*/\n-# if defined(MSWIN32) || defined(_WIN32_WCE_EMULATION)\n+# if defined(MSWIN32) || defined(_WIN32_WCE_EMULATION) || defined(CYGWIN32)\n GC_bool GC_is_tmp_root GC_PROTO((ptr_t p));\n \t\t/* Is the address p in one of the temporary static\t*/\n \t\t/* root sections?\t\t\t\t\t*/"}, {"sha": "c729130cb26b8cd54fd1a5c96581155f98274782", "filename": "boehm-gc/include/private/gcconfig.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h?ref=045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543", "patch": "@@ -2375,7 +2375,7 @@\n \t\t\t\t\t      calloc(1, (size_t)bytes + GC_page_size) \\\n \t\t\t\t\t      + GC_page_size-1)\n #     else\n-#\tifdef MSWIN32\n+#\tif defined(MSWIN32) || defined(CYGWIN32)\n \t  extern ptr_t GC_win32_get_mem();\n #         define GET_MEM(bytes) (struct hblk *)GC_win32_get_mem(bytes)\n #\telse"}, {"sha": "94eb0ddb37f3e81f70260e9361e67f517cce81f7", "filename": "boehm-gc/mark_rts.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543/boehm-gc%2Fmark_rts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543/boehm-gc%2Fmark_rts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fmark_rts.c?ref=045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543", "patch": "@@ -22,7 +22,7 @@\n struct roots {\n \tptr_t r_start;\n \tptr_t r_end;\n- #\tif !defined(MSWIN32) && !defined(MSWINCE)\n+ #\tif !defined(MSWIN32) && !defined(MSWINCE) && !defined(CYGWIN32)\n \t  struct roots * r_next;\n  #\tendif\n \tGC_bool r_tmp;\n@@ -87,7 +87,7 @@ ptr_t p;\n     return(FALSE);\n }\n \n-#if !defined(MSWIN32) && !defined(MSWINCE)\n+#if !defined(MSWIN32) && !defined(MSWINCE) && !defined(CYGWIN32)\n /* \n #   define LOG_RT_SIZE 6\n #   define RT_SIZE (1 << LOG_RT_SIZE)  -- Power of 2, may be != MAX_ROOT_SETS\n@@ -139,7 +139,7 @@ struct roots *p;\n     GC_root_index[h] = p;\n }\n \n-# else /* MSWIN32 || MSWINCE */\n+# else /* MSWIN32 || MSWINCE || CYGWIN32 */\n \n #   define add_roots_to_index(p)\n \n@@ -175,7 +175,7 @@ GC_bool tmp;\n {\n     struct roots * old;\n     \n-#   if defined(MSWIN32) || defined(MSWINCE)\n+#   if defined(MSWIN32) || defined(MSWINCE) || defined(CYGWIN32)\n       /* Spend the time to ensure that there are no overlapping\t*/\n       /* or adjacent intervals.\t\t\t\t\t*/\n       /* This could be done faster with e.g. a\t\t\t*/\n@@ -244,7 +244,7 @@ GC_bool tmp;\n     GC_static_roots[n_root_sets].r_start = (ptr_t)b;\n     GC_static_roots[n_root_sets].r_end = (ptr_t)e;\n     GC_static_roots[n_root_sets].r_tmp = tmp;\n-#   if !defined(MSWIN32) && !defined(MSWINCE)\n+#   if !defined(MSWIN32) && !defined(MSWINCE) && !defined(CYGWIN32)\n       GC_static_roots[n_root_sets].r_next = 0;\n #   endif\n     add_roots_to_index(GC_static_roots + n_root_sets);\n@@ -263,7 +263,7 @@ void GC_clear_roots GC_PROTO((void))\n     roots_were_cleared = TRUE;\n     n_root_sets = 0;\n     GC_root_size = 0;\n-#   if !defined(MSWIN32) && !defined(MSWINCE)\n+#   if !defined(MSWIN32) && !defined(MSWINCE) && !defined(CYGWIN32)\n     {\n     \tregister int i;\n     \t\n@@ -285,7 +285,7 @@ int i;\n     n_root_sets--;\n }\n \n-#if !defined(MSWIN32) && !defined(MSWINCE)\n+#if !defined(MSWIN32) && !defined(MSWINCE) && !defined(CYGWIN32)\n static void GC_rebuild_root_index()\n {\n     register int i;\n@@ -308,12 +308,12 @@ void GC_remove_tmp_roots()\n     \t    i++;\n     }\n     }\n-    #if !defined(MSWIN32) && !defined(MSWINCE)\n+    #if !defined(MSWIN32) && !defined(MSWINCE) && !defined(CYGWIN32)\n     GC_rebuild_root_index();\n     #endif\n }\n \n-#if !defined(MSWIN32) && !defined(MSWINCE)\n+#if !defined(MSWIN32) && !defined(MSWINCE) && !defined(CYGWIN32)\n void GC_remove_roots(b, e)\n char * b; char * e;\n {\n@@ -340,9 +340,9 @@ char * b; char * e;\n     }\n     GC_rebuild_root_index();\n }\n-#endif /* !defined(MSWIN32) && !defined(MSWINCE) */\n+#endif /* !defined(MSWIN32) && !defined(MSWINCE) && !defined(CYGWIN32) */\n \n-#if defined(MSWIN32) || defined(_WIN32_WCE_EMULATION)\n+#if defined(MSWIN32) || defined(_WIN32_WCE_EMULATION) || defined(CYGWIN32)\n /* Workaround for the OS mapping and unmapping behind our back:\t\t*/\n /* Is the address p in one of the temporary static root sections?\t*/\n GC_bool GC_is_tmp_root(p)\n@@ -364,7 +364,7 @@ ptr_t p;\n     }\n     return(FALSE);\n }\n-#endif /* MSWIN32 || _WIN32_WCE_EMULATION */\n+#endif /* MSWIN32 || _WIN32_WCE_EMULATION || defined(CYGWIN32) */\n \n ptr_t GC_approx_sp()\n {\n@@ -557,7 +557,7 @@ void GC_push_gc_structures GC_PROTO((void))\n void GC_cond_register_dynamic_libraries()\n {\n # if (defined(DYNAMIC_LOADING) || defined(MSWIN32) || defined(MSWINCE) \\\n-     || defined(PCR)) && !defined(SRC_M3)\n+     || defined(CYGWIN32) || defined(PCR)) && !defined(SRC_M3)\n     GC_remove_tmp_roots();\n     if (!GC_no_dls) GC_register_dynamic_libraries();\n # else"}, {"sha": "ca8be1a8236cbd149a75aed7fb21c7de8b994d62", "filename": "boehm-gc/os_dep.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543/boehm-gc%2Fos_dep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543/boehm-gc%2Fos_dep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fos_dep.c?ref=045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543", "patch": "@@ -107,7 +107,7 @@\n # undef GC_AMIGA_DEF\n #endif\n \n-#if defined(MSWIN32) || defined(MSWINCE)\n+#if defined(MSWIN32) || defined(MSWINCE) || defined(CYGWIN32)\n # define WIN32_LEAN_AND_MEAN\n # define NOSERVICE\n # include <windows.h>\n@@ -584,7 +584,7 @@ void GC_enable_signals()\n /* Find the page size */\n word GC_page_size;\n \n-# if defined(MSWIN32) || defined(MSWINCE)\n+# if defined(MSWIN32) || defined(MSWINCE) || defined (CYGWIN32)\n   void GC_setpagesize()\n   {\n     GetSystemInfo(&GC_sysinfo);\n@@ -1169,7 +1169,11 @@ void GC_register_data_segments()\n \n # else /* !OS2 */\n \n-# if defined(MSWIN32) || defined(MSWINCE)\n+# if defined(MSWIN32) || defined(MSWINCE) || defined (CYGWIN32)\n+\n+# ifdef CYGWIN32\n+#    define GC_no_win32_dlls (FALSE)\n+# endif\n \n # ifdef MSWIN32\n   /* Unfortunately, we have to handle win32s very differently from NT, \t*/\n@@ -1664,25 +1668,28 @@ void * os2_alloc(size_t bytes)\n # endif /* OS2 */\n \n \n-# if defined(MSWIN32) || defined(MSWINCE)\n+# if defined(MSWIN32) || defined(MSWINCE) || defined(CYGWIN32)\n SYSTEM_INFO GC_sysinfo;\n # endif\n \n-# ifdef MSWIN32\n+# if defined(MSWIN32) || defined(CYGWIN32)\n+\n+word GC_n_heap_bases = 0;\n \n # ifdef USE_GLOBAL_ALLOC\n #   define GLOBAL_ALLOC_TEST 1\n # else\n #   define GLOBAL_ALLOC_TEST GC_no_win32_dlls\n # endif\n \n-word GC_n_heap_bases = 0;\n-\n ptr_t GC_win32_get_mem(bytes)\n word bytes;\n {\n     ptr_t result;\n \n+# ifdef CYGWIN32\n+    result = GC_unix_get_mem (bytes);\n+# else\n     if (GLOBAL_ALLOC_TEST) {\n     \t/* VirtualAlloc doesn't like PAGE_EXECUTE_READWRITE.\t*/\n     \t/* There are also unconfirmed rumors of other\t\t*/\n@@ -1702,6 +1709,7 @@ word bytes;\n     \t\t\t\t      MEM_COMMIT | MEM_RESERVE,\n     \t\t\t\t      PAGE_EXECUTE_READWRITE);\n     }\n+#endif\n     if (HBLKDISPL(result) != 0) ABORT(\"Bad VirtualAlloc result\");\n     \t/* If I read the documentation correctly, this can\t*/\n     \t/* only happen if HBLKSIZE > 64k or not a power of 2.\t*/\n@@ -1714,7 +1722,11 @@ void GC_win32_free_heap ()\n {\n     if (GC_no_win32_dlls) {\n  \twhile (GC_n_heap_bases > 0) {\n+# ifdef CYGWIN32\n+ \t    free (GC_heap_bases[--GC_n_heap_bases]);\n+# else\n  \t    GlobalFree (GC_heap_bases[--GC_n_heap_bases]);\n+# endif\n  \t    GC_heap_bases[GC_n_heap_bases] = 0;\n  \t}\n     }"}, {"sha": "09c86cb599d183d8f5e344e388ef9de1817dea57", "filename": "boehm-gc/ptr_chck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543/boehm-gc%2Fptr_chck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543/boehm-gc%2Fptr_chck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fptr_chck.c?ref=045a52c82eb3dbd7a06bee78d89f7b6c0b0fd543", "patch": "@@ -247,7 +247,7 @@ ptr_t p;\n     \t    if (GC_is_static_root(p)) return(p);\n     \t    /* Else do it again correctly:\t*/\n #           if (defined(DYNAMIC_LOADING) || defined(MSWIN32) || \\\n-\t\tdefined(MSWINCE) || defined(PCR)) \\\n+\t\tdefined(MSWINCE) || defined (CYGWIN32) || defined(PCR)) \\\n                 && !defined(SRC_M3)\n     \t        DISABLE_SIGNALS();\n     \t        GC_register_dynamic_libraries();"}]}