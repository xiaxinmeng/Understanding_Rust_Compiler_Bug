{"sha": "1eab9b561459199edc53a6d1c2b883eedf887282", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVhYjliNTYxNDU5MTk5ZWRjNTNhNmQxYzJiODgzZWVkZjg4NzI4Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-10-18T04:11:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-10-18T04:11:07Z"}, "message": "decl.c (grokdeclarator): Embedded attrs bind to the right, not the left.\n\n\t* decl.c (grokdeclarator): Embedded attrs bind to the right,\n\tnot the left.\n\nFrom-SVN: r23160", "tree": {"sha": "51c9bef71114fa408a387d819ef34cd6b507b770", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51c9bef71114fa408a387d819ef34cd6b507b770"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1eab9b561459199edc53a6d1c2b883eedf887282", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eab9b561459199edc53a6d1c2b883eedf887282", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eab9b561459199edc53a6d1c2b883eedf887282", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eab9b561459199edc53a6d1c2b883eedf887282/comments", "author": null, "committer": null, "parents": [{"sha": "52fbc84763ecd3141cdb690d5d61a8750b625c62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52fbc84763ecd3141cdb690d5d61a8750b625c62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52fbc84763ecd3141cdb690d5d61a8750b625c62"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "37e730016f44cd556a967c1ba572a6d9e7b40df4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eab9b561459199edc53a6d1c2b883eedf887282/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eab9b561459199edc53a6d1c2b883eedf887282/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1eab9b561459199edc53a6d1c2b883eedf887282", "patch": "@@ -1,5 +1,8 @@\n 1998-10-18  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* decl.c (grokdeclarator): Embedded attrs bind to the right,\n+\tnot the left.\n+\n \t* parse.y (fn.def2): Fix 'attrs' format.\n \n 1998-10-18  Alastair J. Houghton <ajh8@doc.ic.ac.uk>"}, {"sha": "dc6b9e95a30662c3ee2fe44e8f101474ef1bf67c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eab9b561459199edc53a6d1c2b883eedf887282/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eab9b561459199edc53a6d1c2b883eedf887282/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1eab9b561459199edc53a6d1c2b883eedf887282", "patch": "@@ -8534,6 +8534,8 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n   tree raises = NULL_TREE;\n   int template_count = 0;\n   tree in_namespace = NULL_TREE;\n+  tree inner_attrs;\n+  int ignore_attrs;\n \n   RIDBIT_RESET_ALL (specbits);\n   if (decl_context == FUNCDEF)\n@@ -9389,6 +9391,9 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n      Descend through it, creating more complex types, until we reach\n      the declared identifier (or NULL_TREE, in an absolute declarator).  */\n \n+  inner_attrs = NULL_TREE;\n+  ignore_attrs = 0;  \n+\n   while (declarator && TREE_CODE (declarator) != IDENTIFIER_NODE\n \t && TREE_CODE (declarator) != TEMPLATE_ID_EXPR)\n     {\n@@ -9435,15 +9440,29 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t      quals = NULL_TREE;\n \t    }\n \t}\n+\n+      /* See the comment for the TREE_LIST case, below.  */\n+      if (ignore_attrs)\n+\tignore_attrs = 0;\n+      else if (inner_attrs)\n+\t{\n+\t  decl_attributes (type, inner_attrs, NULL_TREE);\n+\t  inner_attrs = NULL_TREE;\n+\t}\n+\n       switch (TREE_CODE (declarator))\n \t{\n \tcase TREE_LIST:\n \t  {\n \t    /* We encode a declarator with embedded attributes using\n-\t       a TREE_LIST.  */\n-\t    tree attrs = TREE_PURPOSE (declarator);\n+\t       a TREE_LIST.  The attributes apply to the declarator\n+\t       directly inside them, so we have to skip an iteration\n+\t       before applying them to the type.  If the declarator just\n+\t       inside is the declarator-id, we apply the attrs to the\n+\t       decl itself.  */\n+\t    inner_attrs = TREE_PURPOSE (declarator);\n+\t    ignore_attrs = 1;\n \t    declarator = TREE_VALUE (declarator);\n-\t    decl_attributes (type, attrs, NULL_TREE);\n \t  }\n \t  break;\n \n@@ -10087,6 +10106,17 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t}\n     }\n \n+  /* See the comment for the TREE_LIST case, above.  */\n+  if (inner_attrs)\n+    {\n+      if (! ignore_attrs)\n+\tdecl_attributes (type, inner_attrs, NULL_TREE);\n+      else if (attrlist)\n+\tTREE_VALUE (attrlist) = chainon (inner_attrs, TREE_VALUE (attrlist));\n+      else\n+\tattrlist = build_decl_list (NULL_TREE, inner_attrs);\n+    }\n+\n   if (explicitp == 1)\n     {\n       error (\"only constructors can be declared `explicit'\");"}]}