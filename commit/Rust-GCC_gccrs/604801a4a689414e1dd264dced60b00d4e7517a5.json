{"sha": "604801a4a689414e1dd264dced60b00d4e7517a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA0ODAxYTRhNjg5NDE0ZTFkZDI2NGRjZWQ2MGIwMGQ0ZTc1MTdhNQ==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2019-12-12T10:03:01Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-12-12T10:03:01Z"}, "message": "[Ada] Fix repeated words and typos in doc and comments\n\n2019-12-12  Piotr Trojanek  <trojanek@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/g-altive.ads: Fix typo in comment.\n\t* bindo-graphs.adb: Fix repeated words in comment.\n\t* exp_ch4.adb: Likewise.\n\t* exp_ch5.adb: Likewise.\n\t* exp_ch7.adb: Likewise.\n\t* exp_pakd.adb: Likewise.\n\t* exp_unst.adb: Likewise.\n\t* exp_util.adb: Likewise.\n\t* freeze.adb: Likewise.\n\t* inline.adb: Likewise.\n\t* layout.adb: Likewise.\n\t* sem_ch12.adb: Likewise.\n\t* sem_ch13.adb: Likewise.\n\t* sem_ch4.adb: Likewise.\n\t* sem_ch9.adb: Likewise.\n\t* sem_elab.adb: Likewise.\n\t* doc/gnat_ugn/gnat_and_program_execution.rst: Fix repeated\n\twords in user documentation.\n\t* gnat_ugn.texi: Regenerate.\n\nFrom-SVN: r279294", "tree": {"sha": "9dafd457a788c84e90c610b4fb5ed59923010db2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dafd457a788c84e90c610b4fb5ed59923010db2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/604801a4a689414e1dd264dced60b00d4e7517a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604801a4a689414e1dd264dced60b00d4e7517a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/604801a4a689414e1dd264dced60b00d4e7517a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604801a4a689414e1dd264dced60b00d4e7517a5/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "955379e4ed77883365cd041840bb17245810c095", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/955379e4ed77883365cd041840bb17245810c095", "html_url": "https://github.com/Rust-GCC/gccrs/commit/955379e4ed77883365cd041840bb17245810c095"}], "stats": {"total": 100, "additions": 60, "deletions": 40}, "files": [{"sha": "09200b513e0b6654d341c8f5a1305ef8ccbb9a3a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=604801a4a689414e1dd264dced60b00d4e7517a5", "patch": "@@ -1,3 +1,25 @@\n+2019-12-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/g-altive.ads: Fix typo in comment.\n+\t* bindo-graphs.adb: Fix repeated words in comment.\n+\t* exp_ch4.adb: Likewise.\n+\t* exp_ch5.adb: Likewise.\n+\t* exp_ch7.adb: Likewise.\n+\t* exp_pakd.adb: Likewise.\n+\t* exp_unst.adb: Likewise.\n+\t* exp_util.adb: Likewise.\n+\t* freeze.adb: Likewise.\n+\t* inline.adb: Likewise.\n+\t* layout.adb: Likewise.\n+\t* sem_ch12.adb: Likewise.\n+\t* sem_ch13.adb: Likewise.\n+\t* sem_ch4.adb: Likewise.\n+\t* sem_ch9.adb: Likewise.\n+\t* sem_elab.adb: Likewise.\n+\t* doc/gnat_ugn/gnat_and_program_execution.rst: Fix repeated\n+\twords in user documentation.\n+\t* gnat_ugn.texi: Regenerate.\n+\n 2019-12-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* exp_attr.adb (Expand_Size_Attribute): Look directly at the"}, {"sha": "7802e7df8659bdfb1cc8b35f1872fa9f6eccc689", "filename": "gcc/ada/bindo-graphs.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fbindo-graphs.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fbindo-graphs.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-graphs.adb?ref=604801a4a689414e1dd264dced60b00d4e7517a5", "patch": "@@ -1676,7 +1676,7 @@ package body Bindo.Graphs is\n          --  successor and predecessor are kept consistent in both cases, and\n          --  Add_Edge_With_Return will prevent the creation of the second edge.\n \n-         --  Assume that that no Body_Before_Spec is necessary\n+         --  Assume that no Body_Before_Spec is necessary\n \n          Edge := No_Library_Graph_Edge;\n "}, {"sha": "0fb9bdd3282773b8a11eff7ff51d381f141cb5e1", "filename": "gcc/ada/doc/gnat_ugn/gnat_and_program_execution.rst", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst?ref=604801a4a689414e1dd264dced60b00d4e7517a5", "patch": "@@ -1214,8 +1214,7 @@ for more information.\n Profiling\n =========\n \n-This section describes how to use the the ``gprof`` profiler tool on Ada\n-programs.\n+This section describes how to use the ``gprof`` profiler tool on Ada programs.\n \n .. index:: !  gprof\n .. index:: Profiling"}, {"sha": "bd45f70b95ae827b73912c09d23f7f7b2b964176", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=604801a4a689414e1dd264dced60b00d4e7517a5", "patch": "@@ -11840,7 +11840,7 @@ package body Exp_Ch4 is\n            --  The case where the target type is an anonymous access type of\n            --  a discriminant is excluded, because the level of such a type\n            --  depends on the context and currently the level returned for such\n-           --  types is zero, resulting in warnings about about check failures\n+           --  types is zero, resulting in warnings about check failures\n            --  in certain legal cases involving class-wide interfaces as the\n            --  designated type (some cases, such as return statements, are\n            --  checked at run time, but not clear if these are handled right\n@@ -12320,8 +12320,8 @@ package body Exp_Ch4 is\n \n    --  Remove the unchecked expression node from the tree. Its job was simply\n    --  to make sure that its constituent expression was handled with checks\n-   --  off, and now that that is done, we can remove it from the tree, and\n-   --  indeed must, since Gigi does not expect to see these nodes.\n+   --  off, and now that is done, we can remove it from the tree, and indeed\n+   --  must, since Gigi does not expect to see these nodes.\n \n    procedure Expand_N_Unchecked_Expression (N : Node_Id) is\n       Exp : constant Node_Id := Expression (N);"}, {"sha": "b30171e7f7b7756f796ec5d76bfa8d8381776c2f", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=604801a4a689414e1dd264dced60b00d4e7517a5", "patch": "@@ -1065,8 +1065,8 @@ package body Exp_Ch5 is\n                end if;\n \n                --  Reset the Analyzed flag, because the bounds of the index\n-               --  type itself may be universal, and must must be reanalyzed\n-               --  to acquire the proper type for the back end.\n+               --  type itself may be universal, and must be reanalyzed to\n+               --  acquire the proper type for the back end.\n \n                Set_Analyzed (Cleft_Lo, False);\n                Set_Analyzed (Cright_Lo, False);"}, {"sha": "125eba6353102cb5b2d17fa137b2fe59febfc573", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=604801a4a689414e1dd264dced60b00d4e7517a5", "patch": "@@ -376,7 +376,7 @@ package body Exp_Ch7 is\n \n    procedure Check_Unnesting_In_Decls_Or_Stmts (Decls_Or_Stmts : List_Id);\n    --  Similarly, the declarations or statements in library-level packages may\n-   --  have created blocks blocks with nested subprograms. Such a block must be\n+   --  have created blocks with nested subprograms. Such a block must be\n    --  transformed into a procedure followed by a call to it, so that unnesting\n    --  can handle uplevel references within these nested subprograms (typically\n    --  subprograms that handle finalization actions). This also applies to"}, {"sha": "7dcf241e247100e7893b4a192ad84d974564b7b5", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=604801a4a689414e1dd264dced60b00d4e7517a5", "patch": "@@ -1564,7 +1564,7 @@ package body Exp_Pakd is\n          Silly_Boolean_Array_Xor_Test (N, R, Rtyp);\n       end if;\n \n-      --  Now that that silliness is taken care of, get packed array type\n+      --  Now that silliness is taken care of, get packed array type\n \n       Convert_To_PAT_Type (L);\n       Convert_To_PAT_Type (R);"}, {"sha": "6c1eb4b5a55b59b48e7e69aa884398915153ab9f", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=604801a4a689414e1dd264dced60b00d4e7517a5", "patch": "@@ -526,8 +526,8 @@ package body Exp_Unst is\n                procedure Note_Uplevel_Bound (N : Node_Id; Ref : Node_Id) is\n                begin\n                   --  Entity name case. Make sure that the entity is declared\n-                  --  in a subprogram. This may not be the case for for a type\n-                  --  in a loop appearing in a precondition.\n+                  --  in a subprogram. This may not be the case for a type in a\n+                  --  loop appearing in a precondition.\n                   --  Exclude explicitly  discriminants (that can appear\n                   --  in bounds of discriminated components).\n "}, {"sha": "7bd90e727ee0ef10c1ced57e44bbae6e2ce631d1", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=604801a4a689414e1dd264dced60b00d4e7517a5", "patch": "@@ -9718,7 +9718,7 @@ package body Exp_Util is\n       end if;\n \n       --  Do not generate a check within an internal subprogram (stream\n-      --  functions and the like, including including predicate functions).\n+      --  functions and the like, including predicate functions).\n \n       if Within_Internal_Subprogram then\n          return Make_Null_Statement (Loc);"}, {"sha": "add415318e910b2975ccd116cda775297d7cad92", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=604801a4a689414e1dd264dced60b00d4e7517a5", "patch": "@@ -1502,7 +1502,7 @@ package body Freeze is\n \n             --  In GNATprove mode this is where we can collect the inherited\n             --  conditions, because we do not create the Check pragmas that\n-            --  normally convey the the modified class-wide conditions on\n+            --  normally convey the modified class-wide conditions on\n             --  overriding operations.\n \n             if GNATprove_Mode then"}, {"sha": "07db41f2f05f9fc16ddb7ba79ec8155d3451b2a3", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=604801a4a689414e1dd264dced60b00d4e7517a5", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT User's Guide for Native Platforms , Oct 09, 2019\n+GNAT User's Guide for Native Platforms , Dec 10, 2019\n \n AdaCore\n \n@@ -20730,8 +20730,7 @@ for more information.\n @section Profiling\n \n \n-This section describes how to use the the @code{gprof} profiler tool on Ada\n-programs.\n+This section describes how to use the @code{gprof} profiler tool on Ada programs.\n \n @geindex gprof\n "}, {"sha": "c32c0c9f073cce47bf6ec473d757ea66cf922d58", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=604801a4a689414e1dd264dced60b00d4e7517a5", "patch": "@@ -256,7 +256,7 @@ package body Inline is\n    --  the call is in the main compilation unit, Caller is Empty.\n \n    procedure Add_Inlined_Instance (E : Entity_Id);\n-   --  Add instance E to the list of of inlined instances for the unit\n+   --  Add instance E to the list of inlined instances for the unit\n \n    procedure Add_Inlined_Subprogram (E : Entity_Id);\n    --  Add subprogram E to the list of inlined subprograms for the unit"}, {"sha": "4fc502bc7b0eaad16dd65b893cab8eae342f81c9", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=604801a4a689414e1dd264dced60b00d4e7517a5", "patch": "@@ -764,9 +764,9 @@ package body Layout is\n          end if;\n \n          --  Check components. If any component requires a higher alignment,\n-         --  then we set that higher alignment in any case. Don't do this if\n-         --  we have Optimize_Alignment set to Space. Note that that covers\n-         --  the case of packed records, where we already set alignment to 1.\n+         --  then we set that higher alignment in any case. Don't do this if we\n+         --  have Optimize_Alignment set to Space. Note that covers the case of\n+         --  packed records, where we already set alignment to 1.\n \n          if not Optimize_Alignment_Space (E) then\n             declare"}, {"sha": "a77a60d2b2ad2eda8f955745a54357e1482c5295", "filename": "gcc/ada/libgnat/g-altive.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Flibgnat%2Fg-altive.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Flibgnat%2Fg-altive.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-altive.ads?ref=604801a4a689414e1dd264dced60b00d4e7517a5", "patch": "@@ -494,7 +494,7 @@ end GNAT.Altivec;\n \n --  The central idea for the Ada bindings is to leverage on the existing GCC\n --  architecture, with the introduction of a Low_Level_Vectors abstraction.\n---  This abstaction acts as a representative of the vector-types and builtins\n+--  This abstraction acts as a representative of the vector-types and builtins\n --  compiler interface for either the Hard or the Soft case.\n \n --  For the Hard binding, Low_Level_Vectors exposes data types with a GCC"}, {"sha": "6932368b9b317201d00b9d6b7b7e5e98520115fb", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=604801a4a689414e1dd264dced60b00d4e7517a5", "patch": "@@ -4501,7 +4501,7 @@ package body Sem_Ch12 is\n          --  the case of nested instances for the time being.\n \n          --  When we generate a nested instance body, calling stubs for any\n-         --  relevant subprogram will be be inserted immediately after the\n+         --  relevant subprogram will be inserted immediately after the\n          --  subprogram declarations, and will take precedence over the\n          --  subsequent (original) body. (The stub and original body will be\n          --  complete homographs, but this is permitted in an instance).\n@@ -5431,8 +5431,8 @@ package body Sem_Ch12 is\n                   Instantiating => True),\n              Name          => New_Occurrence_Of (Anon_Id, Loc));\n \n-         --  The generic may be a a child unit. The renaming needs an\n-         --  identifier with the proper name.\n+         --  The generic may be a child unit. The renaming needs an identifier\n+         --  with the proper name.\n \n          Set_Defining_Unit_Name (Specification (Unit_Renaming),\n             Make_Defining_Identifier (Loc, Chars (Gen_Unit)));"}, {"sha": "759b7ce05097faa016594d1df19161f3f58c6bd1", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=604801a4a689414e1dd264dced60b00d4e7517a5", "patch": "@@ -770,8 +770,8 @@ package body Sem_Ch13 is\n                   --     1 .. 4       3 .. 6         1         3\n                   --     4 .. 7       0 .. 3         4         0\n \n-                  --  The rule is that the first bit is is obtained by\n-                  --  subtracting the old ending bit from storage_unit - 1.\n+                  --  The rule is that the first bit is obtained by subtracting\n+                  --  the old ending bit from storage_unit - 1.\n \n                   Set_Component_Bit_Offset (Comp,\n                     (Storage_Unit_Offset * System_Storage_Unit) +\n@@ -13344,9 +13344,9 @@ package body Sem_Ch13 is\n                   =>\n                      --  Build predicate function specification and preanalyze\n                      --  expression after type replacement. The function\n-                     --  declaration must be analyzed in the scope of the\n-                     --  type, but the the expression can reference components\n-                     --  and discriminants of the type.\n+                     --  declaration must be analyzed in the scope of the type,\n+                     --  but the expression can reference components and\n+                     --  discriminants of the type.\n \n                      if No (Predicate_Function (E)) then\n                         declare"}, {"sha": "58e178e967f4178f01af26aa79e2a536fe9d6600", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=604801a4a689414e1dd264dced60b00d4e7517a5", "patch": "@@ -1555,7 +1555,7 @@ package body Sem_Ch4 is\n             --  there is only a limited view of it and there is nothing in\n             --  the context of the current unit that has required a regular\n             --  compilation of the unit containing the type. We recognize\n-            --  this unusual case by the fact that that unit is not analyzed.\n+            --  this unusual case by the fact that unit is not analyzed.\n             --  Note that the call being analyzed is in a different unit from\n             --  the function declaration, and nothing indicates that the type\n             --  is a limited view."}, {"sha": "82bf021179399f886d9e3997580c97d5a38cf1fe", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=604801a4a689414e1dd264dced60b00d4e7517a5", "patch": "@@ -2758,7 +2758,7 @@ package body Sem_Ch9 is\n       Insert_After (N, Obj_Decl);\n       Mark_Rewrite_Insertion (Obj_Decl);\n \n-      --  Relocate aspect Part_Of from the the original single protected\n+      --  Relocate aspect Part_Of from the original single protected\n       --  declaration to the anonymous object declaration. This emulates the\n       --  placement of an equivalent source pragma.\n "}, {"sha": "f3cac46d0fdf842dd257937bdd568f1d5feb64a9", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604801a4a689414e1dd264dced60b00d4e7517a5/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=604801a4a689414e1dd264dced60b00d4e7517a5", "patch": "@@ -1457,7 +1457,7 @@ package body Sem_Elab is\n       -- Types --\n       -----------\n \n-      --  The following type enumerates all possible Ghost mode mode kinds\n+      --  The following type enumerates all possible Ghost mode kinds\n \n       type Extended_Ghost_Mode is\n         (Is_Ignored,\n@@ -4963,7 +4963,7 @@ package body Sem_Elab is\n             Output_Active_Scenarios (Attr, New_In_State);\n          end if;\n \n-         --  Treat the attribute an an immediate invocation of the target when\n+         --  Treat the attribute an immediate invocation of the target when\n          --  switch -gnatd.o (conservative elaboration order for indirect\n          --  calls) is in effect. This has the following desirable effects:\n          --\n@@ -10015,8 +10015,8 @@ package body Sem_Elab is\n       function Find_Enclosing_Context (N : Node_Id) return Node_Id;\n       pragma Inline (Find_Enclosing_Context);\n       --  Return the nearest enclosing non-library-level or compilation unit\n-      --  node which which encapsulates arbitrary node N. Return Empty is no\n-      --  such context is available.\n+      --  node which encapsulates arbitrary node N. Return Empty is no such\n+      --  context is available.\n \n       function In_Nested_Context\n         (Outer : Node_Id;\n@@ -10916,8 +10916,8 @@ package body Sem_Elab is\n          Spec_Id : Entity_Id;\n \n       begin\n-         --  The the task type has already been expanded, it carries the\n-         --  procedure which emulates the behavior of the task body.\n+         --  The task type has already been expanded, it carries the procedure\n+         --  which emulates the behavior of the task body.\n \n          if Present (Task_Body_Id) then\n             Spec_Id := Task_Body_Id;\n@@ -10951,8 +10951,8 @@ package body Sem_Elab is\n          Spec_Id : Entity_Id;\n \n       begin\n-         --  The the task type has already been expanded, it carries the\n-         --  procedure which emulates the behavior of the task body.\n+         --  The task type has already been expanded, it carries the procedure\n+         --  which emulates the behavior of the task body.\n \n          if Present (Task_Body_Id) then\n             Spec_Id := Task_Body_Id;"}]}