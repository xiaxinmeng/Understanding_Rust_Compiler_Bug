{"sha": "05ab6e211953ae57922079c17b8e138b7778a03f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVhYjZlMjExOTUzYWU1NzkyMjA3OWMxN2I4ZTEzOGI3Nzc4YTAzZg==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-02-05T11:42:50Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-02-05T11:42:50Z"}, "message": "[ARM Documentation] Clarify -mcpu, -mtune, -march\n\ngcc/\n\n\tPR target/59718\n\t* doc/invoke.texi (-march=): Clarify documentation for ARM.\n\t(-mtune=): Likewise.\n\t(-mcpu=): Likewise.\n\nFrom-SVN: r207501", "tree": {"sha": "7f97f651148e9e2724b2a149b9da7a2aa26987e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f97f651148e9e2724b2a149b9da7a2aa26987e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05ab6e211953ae57922079c17b8e138b7778a03f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05ab6e211953ae57922079c17b8e138b7778a03f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05ab6e211953ae57922079c17b8e138b7778a03f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05ab6e211953ae57922079c17b8e138b7778a03f/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d55d9ed0aedfa9c6e5344b47379078f0a05dbb05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d55d9ed0aedfa9c6e5344b47379078f0a05dbb05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d55d9ed0aedfa9c6e5344b47379078f0a05dbb05"}], "stats": {"total": 96, "additions": 53, "deletions": 43}, "files": [{"sha": "be732f1416eea793437d8b1242d7e444b71b2ebf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ab6e211953ae57922079c17b8e138b7778a03f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ab6e211953ae57922079c17b8e138b7778a03f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05ab6e211953ae57922079c17b8e138b7778a03f", "patch": "@@ -1,3 +1,10 @@\n+2014-02-05  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\tPR target/59718\n+\t* doc/invoke.texi (-march): Clarify documentation for ARM.\n+\t(-mtune): Likewise.\n+\t(-mcpu): Likewise.\n+\n 2014-02-05  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-loop.c (vect_analyze_loop_2): Be more informative"}, {"sha": "e3dc9dfcc343dda34ce0b8453d334b453d11490a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 46, "deletions": 43, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ab6e211953ae57922079c17b8e138b7778a03f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ab6e211953ae57922079c17b8e138b7778a03f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=05ab6e211953ae57922079c17b8e138b7778a03f", "patch": "@@ -12221,11 +12221,38 @@ option should only be used if you require compatibility with code for\n big-endian ARM processors generated by versions of the compiler prior to\n 2.8.  This option is now deprecated.\n \n-@item -mcpu=@var{name}\n-@opindex mcpu\n-This specifies the name of the target ARM processor.  GCC uses this name\n-to determine what kind of instructions it can emit when generating\n-assembly code.  Permissible names are: @samp{arm2}, @samp{arm250},\n+@item -march=@var{name}\n+@opindex march\n+This specifies the name of the target ARM architecture.  GCC uses this\n+name to determine what kind of instructions it can emit when generating\n+assembly code.  This option can be used in conjunction with or instead\n+of the @option{-mcpu=} option.  Permissible names are: @samp{armv2},\n+@samp{armv2a}, @samp{armv3}, @samp{armv3m}, @samp{armv4}, @samp{armv4t},\n+@samp{armv5}, @samp{armv5t}, @samp{armv5e}, @samp{armv5te},\n+@samp{armv6}, @samp{armv6j},\n+@samp{armv6t2}, @samp{armv6z}, @samp{armv6zk}, @samp{armv6-m},\n+@samp{armv7}, @samp{armv7-a}, @samp{armv7-r}, @samp{armv7-m}, @samp{armv7ve},\n+@samp{armv8-a}, @samp{armv8-a+crc},\n+@samp{iwmmxt}, @samp{iwmmxt2}, @samp{ep9312}.\n+\n+@option{-march=armv7ve} is the armv7-a architecture with virtualization\n+extensions.\n+\n+@option{-march=armv8-a+crc} enables code generation for the ARMv8-A\n+architecture together with the optional CRC32 extensions.\n+\n+@option{-march=native} causes the compiler to auto-detect the architecture\n+of the build computer.  At present, this feature is only supported on\n+Linux, and not all architectures are recognized.  If the auto-detect is\n+unsuccessful the option has no effect.\n+\n+@item -mtune=@var{name}\n+@opindex mtune\n+This option specifies the name of the target ARM processor for\n+which GCC should tune the performance of the code.\n+For some ARM implementations better performance can be obtained by using\n+this option.\n+Permissible names are: @samp{arm2}, @samp{arm250},\n @samp{arm3}, @samp{arm6}, @samp{arm60}, @samp{arm600}, @samp{arm610},\n @samp{arm620}, @samp{arm7}, @samp{arm7m}, @samp{arm7d}, @samp{arm7dm},\n @samp{arm7di}, @samp{arm7dmi}, @samp{arm70}, @samp{arm700},\n@@ -12259,26 +12286,6 @@ Additionally, this option can specify that GCC should tune the performance\n of the code for a big.LITTLE system.  Permissible names are:\n @samp{cortex-a15.cortex-a7}, @samp{cortex-a57.cortex-a53}.\n \n-@option{-mcpu=generic-@var{arch}} is also permissible, and is\n-equivalent to @option{-march=@var{arch} -mtune=generic-@var{arch}}.\n-See @option{-mtune} for more information.\n-\n-@option{-mcpu=native} causes the compiler to auto-detect the CPU\n-of the build computer.  At present, this feature is only supported on\n-Linux, and not all architectures are recognized.  If the auto-detect is\n-unsuccessful the option has no effect.\n-\n-@item -mtune=@var{name}\n-@opindex mtune\n-This option is very similar to the @option{-mcpu=} option, except that\n-instead of specifying the actual target processor type, and hence\n-restricting which instructions can be used, it specifies that GCC should\n-tune the performance of the code as if the target were of the type\n-specified in this option, but still choosing the instructions it\n-generates based on the CPU specified by a @option{-mcpu=} option.\n-For some ARM implementations better performance can be obtained by using\n-this option.\n-\n @option{-mtune=generic-@var{arch}} specifies that GCC should tune the\n performance for a blend of processors within architecture @var{arch}.\n The aim is to generate code that run well on the current most popular\n@@ -12291,27 +12298,23 @@ of the build computer.  At present, this feature is only supported on\n Linux, and not all architectures are recognized.  If the auto-detect is\n unsuccessful the option has no effect.\n \n-@item -march=@var{name}\n-@opindex march\n-This specifies the name of the target ARM architecture.  GCC uses this\n-name to determine what kind of instructions it can emit when generating\n-assembly code.  This option can be used in conjunction with or instead\n-of the @option{-mcpu=} option.  Permissible names are: @samp{armv2},\n-@samp{armv2a}, @samp{armv3}, @samp{armv3m}, @samp{armv4}, @samp{armv4t},\n-@samp{armv5}, @samp{armv5t}, @samp{armv5e}, @samp{armv5te},\n-@samp{armv6}, @samp{armv6j},\n-@samp{armv6t2}, @samp{armv6z}, @samp{armv6zk}, @samp{armv6-m},\n-@samp{armv7}, @samp{armv7-a}, @samp{armv7-r}, @samp{armv7-m}, @samp{armv7ve},\n-@samp{armv8-a}, @samp{armv8-a+crc},\n-@samp{iwmmxt}, @samp{iwmmxt2}, @samp{ep9312}.\n+@item -mcpu=@var{name}\n+@opindex mcpu\n+This specifies the name of the target ARM processor.  GCC uses this name\n+to derive the name of the target ARM architecture (as if specified\n+by @option{-march}) and the ARM processor type for which to tune for\n+performance (as if specified by @option{-mtune}).  Where this option\n+is used in conjunction with @option{-march} or @option{-mtune},\n+those options take precedence over the appropriate part of this option.\n \n-@option{-march=armv7ve} is the armv7-a architecture with virtualization\n-extensions.\n+Permissible names for this option are the same as those for\n+@option{-mtune}.\n \n-@option{-march=armv8-a+crc} enables code generation for the ARMv8-A\n-architecture together with the optional CRC32 extensions.\n+@option{-mcpu=generic-@var{arch}} is also permissible, and is\n+equivalent to @option{-march=@var{arch} -mtune=generic-@var{arch}}.\n+See @option{-mtune} for more information.\n \n-@option{-march=native} causes the compiler to auto-detect the architecture\n+@option{-mcpu=native} causes the compiler to auto-detect the CPU\n of the build computer.  At present, this feature is only supported on\n Linux, and not all architectures are recognized.  If the auto-detect is\n unsuccessful the option has no effect."}]}