{"sha": "650dc14a737860cafd34eb4dea683cee87891589", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUwZGMxNGE3Mzc4NjBjYWZkMzRlYjRkZWE2ODNjZWU4Nzg5MTU4OQ==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2012-05-22T03:50:26Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2012-05-22T03:50:26Z"}, "message": "PR c++/53322 - -Wunused-local-typedefs is not enabled by Wall or Wunused\n\nAs the audit trail of this shows, -Wunused-local-typedefs is not\nturned on by -Wunused after all.  Sigh.\n\nNow that we have the EnabledBy construct for the *.opt files, it's\nmore precise and concise to use that to make -Wunused-local-typedefs\nbe triggered by -Wunused.\n\nI have changed the gcc+.dg/warn/Wunused-local-typedefs.C test case to\nmake it use -Wunused instead of -Wunused-local-typedefs.  I had to\nadjust it to avoid the warnings due to the other -W* options triggered\nby -Wunused there.\n\nWhile testing the compiler, it turned out that some local typedefs\nwere not being used when the experimental \"Concepts\" support is turned\noff, in the libstdc++ test suite.  I also had to remove some obvious\nuseless local typedef usage in the fortran front-end.  Fixed thus.\n\nBootstrapped and tested on x86_64-unknown-linux-gnu against trunk.\n\ngcc/c-family/\n\n\tPR c++/53322\n\t* c.opt (Wunused-local-typedefs): Use EnabledBy(Wunused).\n\nlibstdc++-v3/\n\n\tPR c++/53322\n\t* include/bits/stl_algobase.h (lower_bound)\n\t(lexicographical_compare): Do not declare unused local typedefs\n\there when Concepts are turned off.\n\ngcc/fortran/\n\n\tPR c++/53322\n\t* f95-lang.c (gfc_init_builtin_functions): Remove the unused\n\ttypedef builtin_type.\n\ngcc/testsuite/\n\n\tPR c++/53322\n\t* g++.dg/warn/Wunused-local-typedefs.C: Adjust to use -Wunused\n\tinstead of -Wunused-local-typedefs.\n\nFrom-SVN: r187757", "tree": {"sha": "3abe77217bb08403458a1264d8b096fc73f1553f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3abe77217bb08403458a1264d8b096fc73f1553f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/650dc14a737860cafd34eb4dea683cee87891589", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650dc14a737860cafd34eb4dea683cee87891589", "html_url": "https://github.com/Rust-GCC/gccrs/commit/650dc14a737860cafd34eb4dea683cee87891589", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650dc14a737860cafd34eb4dea683cee87891589/comments", "author": null, "committer": null, "parents": [{"sha": "00d7b6e2c4a5e90177a93cfda6ea401b34dc184f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d7b6e2c4a5e90177a93cfda6ea401b34dc184f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d7b6e2c4a5e90177a93cfda6ea401b34dc184f"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "b71174d18634c4830a9c72b626c63bfbf45a585a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650dc14a737860cafd34eb4dea683cee87891589/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650dc14a737860cafd34eb4dea683cee87891589/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=650dc14a737860cafd34eb4dea683cee87891589", "patch": "@@ -1,3 +1,8 @@\n+2012-05-22  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/53322\n+\t* c.opt (Wunused-local-typedefs): Use EnabledBy(Wunused).\n+\n 2012-05-17  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* c.opt (--pedantic-errors,-pedantic-errors): Do not handle here."}, {"sha": "0b72d79ae918305ef5fded10c146046def3836e0", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650dc14a737860cafd34eb4dea683cee87891589/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650dc14a737860cafd34eb4dea683cee87891589/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=650dc14a737860cafd34eb4dea683cee87891589", "patch": "@@ -671,7 +671,7 @@ C ObjC Var(warn_unsuffixed_float_constants) Warning\n Warn about unsuffixed float constants\n \n Wunused-local-typedefs\n-C ObjC C++ ObjC++ Var(warn_unused_local_typedefs) Warning\n+C ObjC C++ ObjC++ Var(warn_unused_local_typedefs) Warning EnabledBy(Wunused)\n Warn when typedefs locally defined in a function are not used\n \n Wunused-macros"}, {"sha": "0880b3172292d4d3f5427c4ced68327a95e25335", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650dc14a737860cafd34eb4dea683cee87891589/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650dc14a737860cafd34eb4dea683cee87891589/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=650dc14a737860cafd34eb4dea683cee87891589", "patch": "@@ -1,3 +1,9 @@\n+2012-05-22  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/53322\n+\t* f95-lang.c (gfc_init_builtin_functions): Remove the unused\n+    \ttypedef builtin_type.\n+\n 2012-05-14  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR fortran/52428"}, {"sha": "7250ca2d769f097c1ff1b912e46570ea5d642095", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650dc14a737860cafd34eb4dea683cee87891589/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650dc14a737860cafd34eb4dea683cee87891589/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=650dc14a737860cafd34eb4dea683cee87891589", "patch": "@@ -641,7 +641,6 @@ gfc_init_builtin_functions (void)\n #undef DEF_POINTER_TYPE\n     BT_LAST\n   };\n-  typedef enum builtin_type builtin_type;\n \n   tree mfunc_float[6];\n   tree mfunc_double[6];"}, {"sha": "5aa76109b6b2eeda53a47d19eaf209ba8b585457", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650dc14a737860cafd34eb4dea683cee87891589/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650dc14a737860cafd34eb4dea683cee87891589/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=650dc14a737860cafd34eb4dea683cee87891589", "patch": "@@ -1,3 +1,9 @@\n+2012-05-22  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/53322\n+\t* g++.dg/warn/Wunused-local-typedefs.C: Adjust to use -Wunused\n+    \tinstead of -Wunused-local-typedefs.\n+\n 2012-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51184"}, {"sha": "4fc8640ed7b2337ed2986a3038ebee48556bc669", "filename": "gcc/testsuite/g++.dg/warn/Wunused-local-typedefs.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650dc14a737860cafd34eb4dea683cee87891589/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-local-typedefs.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650dc14a737860cafd34eb4dea683cee87891589/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-local-typedefs.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-local-typedefs.C?ref=650dc14a737860cafd34eb4dea683cee87891589", "patch": "@@ -1,5 +1,5 @@\n // Origin PR c++/33255\n-// { dg-options \"-Wunused-local-typedefs\" }\n+// { dg-options \"-Wunused\" } <-- should trigger -Wunused-local-typedefs\n // { dg-do compile }\n \n void\n@@ -59,7 +59,7 @@ test3_tmpl(void)\n {\n     typedef struct ST<int> foo;\n     ST<int> v;\n-    const foo &var = v;\n+    const foo __attribute__((unused))&var = v;\n }\n \n void\n@@ -72,7 +72,7 @@ void\n test4(void)\n {\n   typedef int foo;\n-  int vec[1] = {sizeof (foo)};\n+  int __attribute__((unused))vec[1] = {sizeof (foo)};\n }\n \n void\n@@ -87,11 +87,11 @@ test5(void)\n   typedef C0 T4;\n \n   int v0 = (T0) 2;\n-  char v1 = static_cast<T1> (0);\n-  reinterpret_cast<T2> (&v0);\n+  char __attribute__((unused)) v1 = static_cast<T1> (0);\n+  if (reinterpret_cast<T2> (&v0));\n   unsigned* const c = 0;\n-  unsigned* v2 = const_cast<T3* const> (c);\n-  C0 *p0 = 0;\n+  unsigned* __attribute__((unused))v2 = const_cast<T3* const> (c);\n+  C0 *__attribute__((unused))p0 = 0;\n   C1 *p1 = 0;\n   p0 = dynamic_cast<T4*> (p1);  \n }\n@@ -101,7 +101,7 @@ test6(void)\n {\n   struct C0 {};\n   typedef C0 foo;\n-  C0 *v = new foo;\n+  C0 *__attribute__((unused))v = new foo;\n }\n \n template<class T, class U>"}, {"sha": "23afda31337a8bf2f98f99f227778034152346f7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650dc14a737860cafd34eb4dea683cee87891589/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650dc14a737860cafd34eb4dea683cee87891589/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=650dc14a737860cafd34eb4dea683cee87891589", "patch": "@@ -1,3 +1,10 @@\n+2012-05-22  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/53322\n+\t* include/bits/stl_algobase.h (lower_bound)\n+    \t(lexicographical_compare): Do not declare unused local typedefs\n+    \there when Concepts are turned off.\n+\n 2012-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/22_locale/num_put/put/char/9780-2.cc: Avoid -Wall warnings."}, {"sha": "fe30f6ce9f5e7c2931cfb424257f2e27ca4a7650", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650dc14a737860cafd34eb4dea683cee87891589/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650dc14a737860cafd34eb4dea683cee87891589/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=650dc14a737860cafd34eb4dea683cee87891589", "patch": "@@ -944,8 +944,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     lower_bound(_ForwardIterator __first, _ForwardIterator __last,\n \t\tconst _Tp& __val)\n     {\n+#ifdef _GLIBCXX_CONCEPT_CHECKS\n       typedef typename iterator_traits<_ForwardIterator>::value_type\n \t_ValueType;\n+#endif\n       typedef typename iterator_traits<_ForwardIterator>::difference_type\n \t_DistanceType;\n \n@@ -1083,9 +1085,11 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n     lexicographical_compare(_II1 __first1, _II1 __last1,\n \t\t\t    _II2 __first2, _II2 __last2)\n     {\n+#ifdef _GLIBCXX_CONCEPT_CHECKS\n       // concept requirements\n       typedef typename iterator_traits<_II1>::value_type _ValueType1;\n       typedef typename iterator_traits<_II2>::value_type _ValueType2;\n+#endif\n       __glibcxx_function_requires(_InputIteratorConcept<_II1>)\n       __glibcxx_function_requires(_InputIteratorConcept<_II2>)\n       __glibcxx_function_requires(_LessThanOpConcept<_ValueType1, _ValueType2>)"}]}