{"sha": "f580c1f44c47b7b06d2a87ba4dfb3384082cc881", "node_id": "C_kwDOANBUbNoAKGY1ODBjMWY0NGM0N2I3YjA2ZDJhODdiYTRkZmIzMzg0MDgyY2M4ODE", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-23T19:30:53Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-03-30T14:48:27Z"}, "message": "ast: Add multiple formatting stub functions\n\nAdd multiple stub functions depending on the context. This will allow an\neasier unification of ast dump.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-tokenstream.cc (TokenStream::visit_as_line): Add\n\tformatting calls.\n\t(TokenStream::visit_items_as_block): Likewise.\n\t(TokenStream::newline): Add stub.\n\t(TokenStream::indentation): Add stub.\n\t(TokenStream::increment_indentation): Add stub.\n\t(TokenStream::decrement_indentation): Add stub.\n\t(TokenStream::visit): Add formatting calls.\n\t(TokenStream::visit_function_common): Likewise.\n\t* ast/rust-ast-tokenstream.h: Add stub prototypes.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "737f7d531e7a58530bb0eb343b0c368a8f10c448", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/737f7d531e7a58530bb0eb343b0c368a8f10c448"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f580c1f44c47b7b06d2a87ba4dfb3384082cc881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f580c1f44c47b7b06d2a87ba4dfb3384082cc881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f580c1f44c47b7b06d2a87ba4dfb3384082cc881", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f580c1f44c47b7b06d2a87ba4dfb3384082cc881/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08c2c0e02b13a16cdac47a69ec952a46f9670886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08c2c0e02b13a16cdac47a69ec952a46f9670886", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08c2c0e02b13a16cdac47a69ec952a46f9670886"}], "stats": {"total": 101, "additions": 95, "deletions": 6}, "files": [{"sha": "3150baaf1ccfeabe850b5f5c59a9225ba47cd7ef", "filename": "gcc/rust/ast/rust-ast-tokenstream.cc", "status": "modified", "additions": 91, "deletions": 6, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f580c1f44c47b7b06d2a87ba4dfb3384082cc881/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f580c1f44c47b7b06d2a87ba4dfb3384082cc881/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc?ref=f580c1f44c47b7b06d2a87ba4dfb3384082cc881", "patch": "@@ -67,9 +67,11 @@ template <typename T>\n void\n TokenStream::visit_as_line (T &item, std::vector<TokenPtr> trailing)\n {\n+  indentation ();\n   visit (item);\n   for (auto &token : trailing)\n     tokens.push_back (token);\n+  newline ();\n }\n \n template <typename T>\n@@ -88,8 +90,21 @@ TokenStream::visit_items_as_block (T &collection,\n \t\t\t\t   TokenId left_brace, TokenId right_brace)\n {\n   tokens.push_back (Rust::Token::make (left_brace, Location ()));\n-  visit_items_as_lines (collection);\n-  tokens.push_back (Rust::Token::make (right_brace, Location ()));\n+  if (collection.empty ())\n+    {\n+      tokens.push_back (Rust::Token::make (right_brace, Location ()));\n+      newline ();\n+    }\n+  else\n+    {\n+      newline ();\n+      increment_indentation ();\n+      visit_items_as_lines (collection);\n+      decrement_indentation ();\n+      indentation ();\n+      tokens.push_back (Rust::Token::make (right_brace, Location ()));\n+      newline ();\n+    }\n }\n \n void\n@@ -101,6 +116,22 @@ TokenStream::trailing_comma ()\n     }\n }\n \n+void\n+TokenStream::newline ()\n+{}\n+\n+void\n+TokenStream::indentation ()\n+{}\n+\n+void\n+TokenStream::increment_indentation ()\n+{}\n+\n+void\n+TokenStream::decrement_indentation ()\n+{}\n+\n void\n TokenStream::visit (FunctionParam &param)\n {\n@@ -350,10 +381,16 @@ TokenStream::visit (Token &tok)\n void\n TokenStream::visit (DelimTokenTree &delim_tok_tree)\n {\n+  increment_indentation ();\n+  newline ();\n+  indentation ();\n   for (auto &token : delim_tok_tree.to_token_stream ())\n     {\n       visit (token);\n     }\n+  decrement_indentation ();\n+  newline ();\n+  indentation ();\n }\n \n void\n@@ -1155,13 +1192,21 @@ void\n TokenStream::visit (BlockExpr &expr)\n {\n   tokens.push_back (Rust::Token::make (LEFT_CURLY, expr.get_locus ()));\n+  newline ();\n+  increment_indentation ();\n \n-  visit_items_joined_by_separator (expr.get_statements (), SEMICOLON);\n+  visit_items_as_lines (expr.get_statements (),\n+\t\t\t{Rust::Token::make (SEMICOLON, Location ())});\n \n   if (expr.has_tail_expr ())\n-    visit (expr.get_tail_expr ());\n+    {\n+      visit (expr.get_tail_expr ());\n+      newline ();\n+    }\n \n+  decrement_indentation ();\n   tokens.push_back (Rust::Token::make (RIGHT_CURLY, expr.get_locus ()));\n+  newline ();\n }\n \n void\n@@ -1319,6 +1364,7 @@ void\n TokenStream::visit (IfExprConseqElse &expr)\n {\n   visit (static_cast<IfExpr &> (expr));\n+  indentation ();\n   tokens.push_back (Rust::Token::make (ELSE, expr.get_locus ()));\n   visit (expr.get_else_block ());\n }\n@@ -1327,6 +1373,7 @@ void\n TokenStream::visit (IfExprConseqIf &expr)\n {\n   visit (static_cast<IfExpr &> (expr));\n+  indentation ();\n   tokens.push_back (Rust::Token::make (ELSE, expr.get_locus ()));\n   // The \"if\" part of the \"else if\" is printed by the next visitor\n   visit (expr.get_conseq_if_expr ());\n@@ -1336,6 +1383,7 @@ void\n TokenStream::visit (IfExprConseqIfLet &expr)\n {\n   visit (static_cast<IfExpr &> (expr));\n+  indentation ();\n   tokens.push_back (Rust::Token::make (ELSE, expr.get_locus ()));\n   visit (expr.get_conseq_if_let_expr ());\n }\n@@ -1358,6 +1406,7 @@ void\n TokenStream::visit (IfLetExprConseqElse &expr)\n {\n   visit (static_cast<IfLetExpr &> (expr));\n+  indentation ();\n   tokens.push_back (Rust::Token::make (ELSE, expr.get_locus ()));\n   visit (expr.get_else_block ());\n }\n@@ -1366,6 +1415,7 @@ void\n TokenStream::visit (IfLetExprConseqIf &expr)\n {\n   visit (static_cast<IfLetExpr &> (expr));\n+  indentation ();\n   tokens.push_back (Rust::Token::make (ELSE, expr.get_locus ()));\n   visit (expr.get_conseq_if_expr ());\n }\n@@ -1374,6 +1424,7 @@ void\n TokenStream::visit (IfLetExprConseqIfLet &expr)\n {\n   visit (static_cast<IfLetExpr &> (expr));\n+  indentation ();\n   tokens.push_back (Rust::Token::make (ELSE, expr.get_locus ()));\n   visit (expr.get_conseq_if_let_expr ());\n }\n@@ -1469,7 +1520,10 @@ TokenStream::visit (WhereClause &rule)\n   //  \t| TypeBoundWhereClauseItem\n \n   tokens.push_back (Rust::Token::make (WHERE, Location ()));\n+  newline ();\n+  increment_indentation ();\n   visit_items_joined_by_separator (rule.get_items (), COMMA);\n+  decrement_indentation ();\n }\n \n void\n@@ -1534,6 +1588,7 @@ TokenStream::visit (Method &method)\n     tokens.push_back (Rust::Token::make (SEMICOLON, Location ()));\n   else\n     visit (block);\n+  newline ();\n }\n \n void\n@@ -1555,15 +1610,21 @@ TokenStream::visit (Module &module)\n   if (module.get_kind () == Module::UNLOADED)\n     {\n       tokens.push_back (Rust::Token::make (SEMICOLON, Location ()));\n+      newline ();\n     }\n   else /* Module::LOADED */\n     {\n       tokens.push_back (Rust::Token::make (LEFT_CURLY, Location ()));\n+      newline ();\n+      increment_indentation ();\n \n       visit_items_as_lines (module.get_inner_attrs ());\n       visit_items_as_lines (module.get_items ());\n \n+      decrement_indentation ();\n+\n       tokens.push_back (Rust::Token::make (RIGHT_CURLY, Location ()));\n+      newline ();\n     }\n }\n \n@@ -1583,6 +1644,7 @@ TokenStream::visit (ExternCrate &crate)\n \tRust::Token::make_identifier (Location (), std::move (as_clause)));\n     }\n   tokens.push_back (Rust::Token::make (SEMICOLON, Location ()));\n+  newline ();\n }\n \n void\n@@ -1660,6 +1722,7 @@ TokenStream::visit (UseDeclaration &decl)\n   tokens.push_back (Rust::Token::make (USE, decl.get_locus ()));\n   visit (*decl.get_tree ());\n   tokens.push_back (Rust::Token::make (SEMICOLON, Location ()));\n+  newline ();\n }\n \n void\n@@ -1698,6 +1761,7 @@ TokenStream::visit (Function &function)\n     tokens.push_back (Rust::Token::make (SEMICOLON, Location ()));\n   else\n     visit (block);\n+  newline ();\n }\n \n void\n@@ -1735,7 +1799,10 @@ TokenStream::visit (StructStruct &struct_item)\n   if (struct_item.has_where_clause ())\n     visit (struct_item.get_where_clause ());\n   if (struct_item.is_unit_struct ())\n-    tokens.push_back (Rust::Token::make (SEMICOLON, Location ()));\n+    {\n+      tokens.push_back (Rust::Token::make (SEMICOLON, Location ()));\n+      newline ();\n+    }\n   else\n     visit_items_as_block (struct_item.get_fields (),\n \t\t\t  {Rust::Token::make (COMMA, Location ())});\n@@ -1757,6 +1824,7 @@ TokenStream::visit (TupleStruct &tuple_struct)\n   visit_items_joined_by_separator (tuple_struct.get_fields (), COMMA);\n   tokens.push_back (Rust::Token::make (RIGHT_PAREN, Location ()));\n   tokens.push_back (Rust::Token::make (SEMICOLON, Location ()));\n+  newline ();\n }\n \n void\n@@ -1893,7 +1961,10 @@ TokenStream::visit_function_common (std::unique_ptr<Type> &return_type,\n \t}\n     }\n   else\n-    tokens.push_back (Rust::Token::make (SEMICOLON, Location ()));\n+    {\n+      tokens.push_back (Rust::Token::make (SEMICOLON, Location ()));\n+      newline ();\n+    }\n }\n \n void\n@@ -1960,20 +2031,24 @@ void\n TokenStream::visit (TraitItemConst &item)\n {\n   auto id = item.get_identifier ();\n+  indentation ();\n   tokens.push_back (Rust::Token::make (CONST, item.get_locus ()));\n   tokens.push_back (Rust::Token::make_identifier (Location (), std::move (id)));\n   tokens.push_back (Rust::Token::make (COLON, Location ()));\n   visit (item.get_type ());\n   tokens.push_back (Rust::Token::make (SEMICOLON, Location ()));\n+  newline ();\n }\n \n void\n TokenStream::visit (TraitItemType &item)\n {\n   auto id = item.get_identifier ();\n+  indentation ();\n   tokens.push_back (Rust::Token::make (TYPE, item.get_locus ()));\n   tokens.push_back (Rust::Token::make_identifier (Location (), std::move (id)));\n   tokens.push_back (Rust::Token::make (SEMICOLON, Location ()));\n+  newline ();\n }\n \n void\n@@ -1982,6 +2057,8 @@ TokenStream::visit (Trait &trait)\n   for (auto &attr : trait.get_outer_attrs ())\n     {\n       visit (attr);\n+      newline ();\n+      indentation ();\n     }\n \n   visit (trait.get_visibility ());\n@@ -2026,13 +2103,21 @@ TokenStream::visit (TraitImpl &impl)\n   tokens.push_back (Rust::Token::make (FOR, Location ()));\n   visit (impl.get_type ());\n   tokens.push_back (Rust::Token::make (LEFT_CURLY, Location ()));\n+  newline ();\n+\n+  increment_indentation ();\n \n   for (auto &item : impl.get_impl_items ())\n     {\n+      indentation ();\n       visit (item);\n     }\n \n+  decrement_indentation ();\n+  newline ();\n+\n   tokens.push_back (Rust::Token::make (RIGHT_CURLY, Location ()));\n+  newline ();\n }\n \n void"}, {"sha": "29be91eb1d94be677413ac6877821a097876a3f2", "filename": "gcc/rust/ast/rust-ast-tokenstream.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f580c1f44c47b7b06d2a87ba4dfb3384082cc881/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f580c1f44c47b7b06d2a87ba4dfb3384082cc881/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h?ref=f580c1f44c47b7b06d2a87ba4dfb3384082cc881", "patch": "@@ -88,6 +88,10 @@ class TokenStream : public ASTVisitor\n \t\t\t     TokenId right_brace = RIGHT_CURLY);\n \n   void trailing_comma ();\n+  void newline ();\n+  void indentation ();\n+  void increment_indentation ();\n+  void decrement_indentation ();\n   /**\n    * Visit common items of functions: Parameters, return type, block\n    */"}]}