{"sha": "d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdkZjBiOTEyZWVlZDJmYmU5YzQyZGRkZDZmMmM2YTZhNGVkNGIxNw==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2010-03-31T09:21:02Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2010-03-31T09:21:02Z"}, "message": "re PR c++/43558 (Rejects specialization)\n\nFix PR c++/43558\n\ngcc/cp/ChangeLog:\n\tPR c++/43558\n\t* cp-tree.h (TEMPLATE_TYPE_PARM_SIBLING_PARMS): New accessor macro.\n\t* pt.c (end_template_parm_list): Store sibling template parms of\n\teach TEMPLATE_TYPE_PARMs into its TEMPLATE_TYPE_PARM_SIBLING_PARMS.\n\t(push_template_decl_real): Don't store the containing template decl\n\tinto the DECL_CONTEXT of TEMPLATE_TYPE_PARMs anymore.\n\t* typeck.c (get_template_parms_of_dependent_type): Get sibling parms\n\tof a TEMPLATE_TYPE_PARM from TEMPLATE_TYPE_PARM_SIBLING_PARMS.\n\tSimplify the logic.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/43558\n\t* g++.dg/template/typedef31.C: New test.\n\nFrom-SVN: r157857", "tree": {"sha": "9c61e3b92286af000161c01dd1cffdf7c1439882", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c61e3b92286af000161c01dd1cffdf7c1439882"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17/comments", "author": null, "committer": null, "parents": [{"sha": "f0c01ffd7723295ca7ca90a7e87351c8fb6f20e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0c01ffd7723295ca7ca90a7e87351c8fb6f20e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0c01ffd7723295ca7ca90a7e87351c8fb6f20e2"}], "stats": {"total": 76, "additions": 52, "deletions": 24}, "files": [{"sha": "56c11b89c8958ba8fc1d705ef84a0251634b90a0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17", "patch": "@@ -1,3 +1,15 @@\n+2010-03-31  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/43558\n+\t* cp-tree.h (TEMPLATE_TYPE_PARM_SIBLING_PARMS): New accessor macro.\n+\t* pt.c (end_template_parm_list): Store sibling template parms of\n+\teach TEMPLATE_TYPE_PARMs into its TEMPLATE_TYPE_PARM_SIBLING_PARMS.\n+\t(push_template_decl_real): Don't store the containing template decl\n+\tinto the DECL_CONTEXT of TEMPLATE_TYPE_PARMs anymore.\n+\t* typeck.c (get_template_parms_of_dependent_type): Get sibling parms\n+\tof a TEMPLATE_TYPE_PARM from TEMPLATE_TYPE_PARM_SIBLING_PARMS.\n+\tSimplify the logic.\n+\n 2010-03-30  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/43076"}, {"sha": "fb67965b20910fb121a8c01b16955f7505136396", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17", "patch": "@@ -4240,6 +4240,10 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, TYPENAME_FLAG };\n   (TEMPLATE_PARM_DECL (TEMPLATE_TYPE_PARM_INDEX (NODE)))\n #define TEMPLATE_TYPE_PARAMETER_PACK(NODE) \\\n   (TEMPLATE_PARM_PARAMETER_PACK (TEMPLATE_TYPE_PARM_INDEX (NODE)))\n+/* The list of template parms that a given template parameter of type\n+   TEMPLATE_TYPE_PARM belongs to.*/\n+#define TEMPLATE_TYPE_PARM_SIBLING_PARMS(NODE) \\\n+  (TREE_CHECK ((NODE), TEMPLATE_TYPE_PARM))->type.maxval\n \n /* These constants can used as bit flags in the process of tree formatting.\n "}, {"sha": "3e2927c16139b8118ab10bfa096f8ac50c4f0b5c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17", "patch": "@@ -3571,6 +3571,9 @@ end_template_parm_list (tree parms)\n       next = TREE_CHAIN (parm);\n       TREE_VEC_ELT (saved_parmlist, nparms) = parm;\n       TREE_CHAIN (parm) = NULL_TREE;\n+      if (TREE_CODE (TREE_VALUE (parm)) == TYPE_DECL)\n+\tTEMPLATE_TYPE_PARM_SIBLING_PARMS (TREE_TYPE (TREE_VALUE (parm))) =\n+\t      current_template_parms;\n     }\n \n   --processing_template_parmlist;\n@@ -4622,9 +4625,6 @@ template arguments to %qD do not match original template %qD\",\n \t  tree parm = TREE_VALUE (TREE_VEC_ELT (parms, i));\n \t  if (TREE_CODE (parm) == TEMPLATE_DECL)\n \t    DECL_CONTEXT (parm) = tmpl;\n-\n-\t  if (TREE_CODE (TREE_TYPE (parm)) == TEMPLATE_TYPE_PARM)\n-\t    DECL_CONTEXT (TYPE_NAME (TREE_TYPE (parm))) = tmpl;\n \t}\n     }\n "}, {"sha": "4b91912b9e65f2a40011b47906d5445d4d50f18d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17", "patch": "@@ -1110,36 +1110,22 @@ get_template_parms_of_dependent_type (tree t)\n      template info from T itself.  */\n   if ((tinfo = get_template_info (t)))\n     ;\n-  /* If T1 is a typedef or whatever has a template info associated\n-     to its context, get the template parameters from that context.  */\n+  else if (TREE_CODE (t) == TEMPLATE_TYPE_PARM)\n+    return TEMPLATE_TYPE_PARM_SIBLING_PARMS (t);\n   else if (typedef_variant_p (t)\n \t   && !NAMESPACE_SCOPE_P (TYPE_NAME (t)))\n     tinfo = get_template_info (DECL_CONTEXT (TYPE_NAME (t)));\n-  else if (TREE_CODE (t) == TEMPLATE_TYPE_PARM\n-\t   && DECL_CONTEXT (TYPE_NAME (t)) == NULL_TREE)\n-    /* We have not yet created the DECL_TEMPLATE this\n-       template type parm belongs to. It probably means\n-       that we are in the middle of parsing the template parameters\n-       of a template, and T is one of the parameters we have parsed.\n-       Let's return the list of template parms we have parsed so far.  */\n-    return get_template_parms_at_level (current_template_parms,\n-\t\t\t\t\tTEMPLATE_TYPE_LEVEL (t));\n+  /* If T is a TYPENAME_TYPE which context is a template type\n+     parameter, get the template parameters from that context.  */\n+  else if (TYPE_CONTEXT (t)\n+\t   && TREE_CODE (TYPE_CONTEXT (t)) == TEMPLATE_TYPE_PARM)\n+   return TEMPLATE_TYPE_PARM_SIBLING_PARMS (TYPE_CONTEXT (t));\n   else if (TYPE_CONTEXT (t)\n \t   && !NAMESPACE_SCOPE_P (t))\n     tinfo = get_template_info (TYPE_CONTEXT (t));\n \n   if (tinfo)\n     tparms = DECL_TEMPLATE_PARMS (TI_TEMPLATE (tinfo));\n-  /* If T is a template type parameter, get the template parameter\n-     set it is part of.  */\n-  else if (TREE_CODE (t) == TEMPLATE_TYPE_PARM\n-\t   && DECL_CONTEXT (TYPE_NAME (t)))\n-    tparms = DECL_TEMPLATE_PARMS (DECL_CONTEXT (TYPE_NAME (t)));\n-  /* If T is a TYPENAME_TYPE which context is a template type\n-     parameter, get the template parameters from that context.  */\n-  else if (TYPE_CONTEXT (t)\n-\t   && TREE_CODE (TYPE_CONTEXT (t)) == TEMPLATE_TYPE_PARM)\n-    tparms = get_template_parms_of_dependent_type (TYPE_CONTEXT (t));\n \n   return tparms;\n }"}, {"sha": "4b0fb1a2be88e3e37ad569a4ca09a0b0910ebd83", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17", "patch": "@@ -1,3 +1,8 @@\n+2010-03-31  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/43558\n+\t* g++.dg/template/typedef31.C: New test.\n+\n 2010-03-31  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* g++.dg/ext/visibility/pragma-override1.C: Allow for .hidden in"}, {"sha": "7d66e3f5b0d43703ab1fcd09e21c58eb6501d040", "filename": "gcc/testsuite/g++.dg/template/typedef31.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef31.C?ref=d7df0b912eeed2fbe9c42dddd6f2c6a6a4ed4b17", "patch": "@@ -0,0 +1,21 @@\n+// Origin: PR c++/43558\n+// { dg-do compile }\n+\n+class Compressible;\n+template <class T, class EngineTag> class Engine;\n+template <class T>\n+class Engine<T, Compressible>\n+{\n+  public:\n+    typedef T Element_t;\n+      //Element_t read(int);\n+      T read(int);\n+};\n+\n+template <class T>\n+T Engine<T, Compressible>::read(int)\n+{\n+}\n+\n+Engine<int, Compressible> x;\n+"}]}