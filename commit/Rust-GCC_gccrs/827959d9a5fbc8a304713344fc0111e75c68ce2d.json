{"sha": "827959d9a5fbc8a304713344fc0111e75c68ce2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI3OTU5ZDlhNWZiYzhhMzA0NzEzMzQ0ZmMwMTExZTc1YzY4Y2UyZA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-03-21T20:27:50Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-03-21T20:27:50Z"}, "message": "re PR target/50751 (SH Target: Displacement addressing does not work for QImode and HImode)\n\n\tPR target/50751\n\t* gcc/target/sh/pr50751-1.c: New.\n\t* gcc/target/sh/pr50751-2.c: New.\n\t* gcc/target/sh/pr50751-3.c: New.\n\nFrom-SVN: r185619", "tree": {"sha": "7a24fd6dfb2d98c44e541d7e54ee5fdf5d4cc373", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a24fd6dfb2d98c44e541d7e54ee5fdf5d4cc373"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/827959d9a5fbc8a304713344fc0111e75c68ce2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/827959d9a5fbc8a304713344fc0111e75c68ce2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/827959d9a5fbc8a304713344fc0111e75c68ce2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/827959d9a5fbc8a304713344fc0111e75c68ce2d/comments", "author": null, "committer": null, "parents": [{"sha": "0dbc5be552804ad5b54aacaeedec5bee5ee9d5e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dbc5be552804ad5b54aacaeedec5bee5ee9d5e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dbc5be552804ad5b54aacaeedec5bee5ee9d5e6"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "473b0188cfc2f8f348ba37288e4693d6ead64026", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827959d9a5fbc8a304713344fc0111e75c68ce2d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827959d9a5fbc8a304713344fc0111e75c68ce2d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=827959d9a5fbc8a304713344fc0111e75c68ce2d", "patch": "@@ -1,3 +1,10 @@\n+2012-03-21  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/50751\n+\t* gcc/target/sh/pr50751-1.c: New.\n+\t* gcc/target/sh/pr50751-2.c: New.\n+\t* gcc/target/sh/pr50751-3.c: New.\n+\n 2012-03-21  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/52479"}, {"sha": "3793bd0d4eb6bd006a5bf42e810caffb64e05ed6", "filename": "gcc/testsuite/gcc.target/sh/pr50751-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827959d9a5fbc8a304713344fc0111e75c68ce2d/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827959d9a5fbc8a304713344fc0111e75c68ce2d/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-1.c?ref=827959d9a5fbc8a304713344fc0111e75c68ce2d", "patch": "@@ -0,0 +1,30 @@\n+/* Check that the mov.b displacement addressing insn is generated.\n+   If the insn is generated as expected, there should be no address \n+   calculations outside the mov insns.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } } */\n+/* { dg-final { scan-assembler-not \"add|sub\" } } */\n+\n+void\n+testfunc_00 (const char* ap, char* bp, char val)\n+{\n+  bp[0] = ap[15];\n+  bp[2] = ap[5];\n+  bp[9] = ap[7];\n+  bp[0] = ap[15];\n+  bp[4] = val;\n+  bp[14] = val;\n+}\n+\n+void\n+testfunc_01 (volatile const char* ap, volatile char* bp, char val)\n+{\n+  bp[0] = ap[15];\n+  bp[2] = ap[5];\n+  bp[9] = ap[7];\n+  bp[0] = ap[15];\n+  bp[4] = val;\n+  bp[14] = val;\n+}\n+"}, {"sha": "ae4b0af5d4130434ef7a04846cc60cf63f324922", "filename": "gcc/testsuite/gcc.target/sh/pr50751-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827959d9a5fbc8a304713344fc0111e75c68ce2d/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827959d9a5fbc8a304713344fc0111e75c68ce2d/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-2.c?ref=827959d9a5fbc8a304713344fc0111e75c68ce2d", "patch": "@@ -0,0 +1,27 @@\n+/* Check that the mov.b displacement addressing insn is generated and the \n+   base address is adjusted only once.  On SH2A this test is skipped because\n+   there is a 4 byte mov.b insn that can handle larger displacements.  Thus\n+   on SH2A the base address will not be adjusted in this case.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" \"-m2a*\" } { \"\" } } */\n+/* { dg-final { scan-assembler-times \"add\" 2 } } */\n+\n+void\n+testfunc_00 (const char* ap, char* bp)\n+{\n+  bp[0] = ap[15];\n+  bp[2] = ap[5];\n+  bp[9] = ap[7];\n+  bp[0] = ap[25];\n+}\n+\n+void\n+testfunc_01 (volatile const char* ap, volatile char* bp)\n+{\n+  bp[0] = ap[15];\n+  bp[2] = ap[5];\n+  bp[9] = ap[7];\n+  bp[0] = ap[25];\n+}\n+"}, {"sha": "58c85f833126cbc19127fa07e3108282754f28b6", "filename": "gcc/testsuite/gcc.target/sh/pr50751-3.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827959d9a5fbc8a304713344fc0111e75c68ce2d/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827959d9a5fbc8a304713344fc0111e75c68ce2d/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-3.c?ref=827959d9a5fbc8a304713344fc0111e75c68ce2d", "patch": "@@ -0,0 +1,26 @@\n+/* Check that on SH2A the 4 byte mov.b displacement insn is generated to\n+   handle larger displacements.  If it is generated correctly, there should\n+   be no base address adjustments outside the mov.b insns.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n+/* { dg-final { scan-assembler-not \"add|sub\" } } */\n+\n+void\n+testfunc_00 (const char* ap, char* bp)\n+{\n+  bp[100] = ap[15];\n+  bp[200] = ap[50];\n+  bp[900] = ap[71];\n+  bp[0] = ap[25];\n+}\n+\n+void\n+testfunc_01 (volatile const char* ap, volatile char* bp)\n+{\n+  bp[100] = ap[15];\n+  bp[200] = ap[50];\n+  bp[900] = ap[71];\n+  bp[0] = ap[25];\n+}\n+"}]}