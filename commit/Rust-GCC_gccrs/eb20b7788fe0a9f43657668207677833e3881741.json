{"sha": "eb20b7788fe0a9f43657668207677833e3881741", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIyMGI3Nzg4ZmUwYTlmNDM2NTc2NjgyMDc2Nzc4MzNlMzg4MTc0MQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2012-11-21T17:13:48Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2012-11-21T17:13:48Z"}, "message": "ipa-prop.h (struct ipa_node_params): Rename clone_for_all_contexts to do_clone_for_all_contexts.\n\n2012-11-21  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-prop.h (struct ipa_node_params): Rename clone_for_all_contexts to\n\tdo_clone_for_all_contexts.  Update all uses.  New flag\n\tis_all_contexts_clone.\n\t* ipa-cp.c (cgraph_edge_brings_value_p): Also consider the case when cs\n\tleads to the clone for all contexts.\n\t(perhaps_add_new_callers): Likewise.\n\t(decide_whether_version_node): Remove bogus !plats->aggs test.  Set\n\tis_all_contexts_clone when cloning for all contexts.\n\n\t* testsuite/gcc.dg/ipa/ipcp-agg-7.c: New test.\n\t* testsuite/gcc.dg/ipa/ipcp-agg-8.c: Likewise.\n\nFrom-SVN: r193701", "tree": {"sha": "19097a42aba8e5dd844fbeecb52d7e94b245e809", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19097a42aba8e5dd844fbeecb52d7e94b245e809"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb20b7788fe0a9f43657668207677833e3881741", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb20b7788fe0a9f43657668207677833e3881741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb20b7788fe0a9f43657668207677833e3881741", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb20b7788fe0a9f43657668207677833e3881741/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7e9f2b6e35b47373730c340471afa1734e197b60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e9f2b6e35b47373730c340471afa1734e197b60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e9f2b6e35b47373730c340471afa1734e197b60"}], "stats": {"total": 152, "additions": 140, "deletions": 12}, "files": [{"sha": "7853c37ff140d49f27530d6532a32fde2a92d63a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb20b7788fe0a9f43657668207677833e3881741/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb20b7788fe0a9f43657668207677833e3881741/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb20b7788fe0a9f43657668207677833e3881741", "patch": "@@ -1,3 +1,14 @@\n+2012-11-21  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-prop.h (struct ipa_node_params): Rename clone_for_all_contexts to\n+\tdo_clone_for_all_contexts.  Update all uses.  New flag\n+\tis_all_contexts_clone.\n+\t* ipa-cp.c (cgraph_edge_brings_value_p): Also consider the case when cs\n+\tleads to the clone for all contexts.\n+\t(perhaps_add_new_callers): Likewise.\n+\t(decide_whether_version_node): Remove bogus !plats->aggs test.  Set\n+\tis_all_contexts_clone when cloning for all contexts.\n+\n 2012-11-21  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/55260"}, {"sha": "12e199d2a5331b117031bc1fa5f884430544f5b5", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb20b7788fe0a9f43657668207677833e3881741/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb20b7788fe0a9f43657668207677833e3881741/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=eb20b7788fe0a9f43657668207677833e3881741", "patch": "@@ -1828,7 +1828,7 @@ estimate_local_effects (struct cgraph_node *node)\n       if (size <= 0\n \t  || cgraph_will_be_removed_from_program_if_no_direct_calls (node))\n \t{\n-\t  info->clone_for_all_contexts = true;\n+\t  info->do_clone_for_all_contexts = true;\n \t  base_time = time;\n \n \t  if (dump_file)\n@@ -1841,7 +1841,7 @@ estimate_local_effects (struct cgraph_node *node)\n \t{\n \t  if (size + overall_size <= max_new_size)\n \t    {\n-\t      info->clone_for_all_contexts = true;\n+\t      info->do_clone_for_all_contexts = true;\n \t      base_time = time;\n \t      overall_size += size;\n \n@@ -2312,8 +2312,9 @@ cgraph_edge_brings_value_p (struct cgraph_edge *cs,\n \t\t\t    struct ipcp_value_source *src)\n {\n   struct ipa_node_params *caller_info = IPA_NODE_REF (cs->caller);\n+  struct ipa_node_params *dst_info = IPA_NODE_REF (cs->callee);\n \n-  if (IPA_NODE_REF (cs->callee)->ipcp_orig_node\n+  if ((dst_info->ipcp_orig_node && !dst_info->is_all_contexts_clone)\n       || caller_info->node_dead)\n     return false;\n   if (!src->val)\n@@ -3175,8 +3176,9 @@ perhaps_add_new_callers (struct cgraph_node *node, struct ipcp_value *val)\n       while (cs)\n \t{\n \t  enum availability availability;\n-\n-\t  if (cgraph_function_node (cs->callee, &availability) == node\n+\t  struct cgraph_node *dst = cgraph_function_node (cs->callee,\n+\t\t\t\t\t\t\t  &availability);\n+\t  if ((dst == node || IPA_NODE_REF (dst)->is_all_contexts_clone)\n \t      && availability > AVAIL_OVERWRITABLE\n \t      && cgraph_edge_brings_value_p (cs, src))\n \t    {\n@@ -3335,8 +3337,8 @@ decide_whether_version_node (struct cgraph_node *node)\n \t     cgraph_node_name (node), node->uid);\n \n   gather_context_independent_values (info, &known_csts, &known_binfos,\n-\t\t\t\t     info->clone_for_all_contexts ? &known_aggs\n-\t\t\t\t     : NULL, NULL);\n+\t\t\t\t  info->do_clone_for_all_contexts ? &known_aggs\n+\t\t\t\t  : NULL, NULL);\n \n   for (i = 0; i < count ;i++)\n     {\n@@ -3351,7 +3353,7 @@ decide_whether_version_node (struct cgraph_node *node)\n \t  ret |= decide_about_value (node, i, -1, val, known_csts,\n \t\t\t\t     known_binfos);\n \n-      if (!plats->aggs_bottom || !plats->aggs)\n+      if (!plats->aggs_bottom)\n \t{\n \t  struct ipcp_agg_lattice *aglat;\n \t  struct ipcp_value *val;\n@@ -3368,8 +3370,9 @@ decide_whether_version_node (struct cgraph_node *node)\n         info = IPA_NODE_REF (node);\n     }\n \n-  if (info->clone_for_all_contexts)\n+  if (info->do_clone_for_all_contexts)\n     {\n+      struct cgraph_node *clone;\n       vec<cgraph_edge_p> callers;\n \n       if (dump_file)\n@@ -3379,11 +3382,12 @@ decide_whether_version_node (struct cgraph_node *node)\n \n       callers = collect_callers_of_node (node);\n       move_binfos_to_values (known_csts, known_binfos);\n-      create_specialized_node (node, known_csts,\n+      clone = create_specialized_node (node, known_csts,\n \t\t\t       known_aggs_to_agg_replacement_list (known_aggs),\n \t\t\t       callers);\n       info = IPA_NODE_REF (node);\n-      info->clone_for_all_contexts = false;\n+      info->do_clone_for_all_contexts = false;\n+      IPA_NODE_REF (clone)->is_all_contexts_clone = true;\n       ret = true;\n     }\n   else"}, {"sha": "95442dc5582c1af43689d0b6c49c6b789ae6a9bc", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb20b7788fe0a9f43657668207677833e3881741/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb20b7788fe0a9f43657668207677833e3881741/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=eb20b7788fe0a9f43657668207677833e3881741", "patch": "@@ -328,7 +328,9 @@ struct ipa_node_params\n   unsigned node_enqueued : 1;\n   /* Whether we should create a specialized version based on values that are\n      known to be constant in all contexts.  */\n-  unsigned clone_for_all_contexts : 1;\n+  unsigned do_clone_for_all_contexts : 1;\n+  /* Set if this is an IPA-CP clone for all contexts.  */\n+  unsigned is_all_contexts_clone : 1;\n   /* Node has been completely replaced by clones and will be removed after\n      ipa-cp is finished.  */\n   unsigned node_dead : 1;"}, {"sha": "3a12c817764cb2db23c7b28e6cba672f619e7c95", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb20b7788fe0a9f43657668207677833e3881741/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb20b7788fe0a9f43657668207677833e3881741/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eb20b7788fe0a9f43657668207677833e3881741", "patch": "@@ -1,3 +1,8 @@\n+2012-11-21  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* gcc.dg/ipa/ipcp-agg-7.c: New test.\n+\t* gcc.dg/ipa/ipcp-agg-8.c: Likewise.\n+\n 2012-11-21  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/55260"}, {"sha": "e85ca1a9d0928d0422307b1c3f01c537c5bc3613", "filename": "gcc/testsuite/gcc.dg/ipa/ipcp-agg-7.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb20b7788fe0a9f43657668207677833e3881741/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-agg-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb20b7788fe0a9f43657668207677833e3881741/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-agg-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-agg-7.c?ref=eb20b7788fe0a9f43657668207677833e3881741", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fno-ipa-sra -fdump-ipa-cp-details -fdump-tree-optimized-slim\"  } */\n+/* { dg-add-options bind_pic_locally } */\n+\n+struct S\n+{\n+  int a, b, c;\n+};\n+\n+void *blah(int, void *);\n+\n+static void __attribute__ ((noinline)) foo (int x, int z, struct S *p);\n+\n+static void __attribute__ ((noinline))\n+bar (int x, int z, struct S *p)\n+{\n+  foo (z, x, p);\n+}\n+\n+static void __attribute__ ((noinline))\n+foo (int x, int z, struct S *p)\n+{\n+  int i, c = p->c;\n+  int b = p->b - z;\n+  void *v = (void *) p;\n+\n+  if (z)\n+    {\n+      z--;\n+      bar (z, x, p);\n+    }\n+  for (i = 0; i< c; i++)\n+    v = blah(b + x + i, v);\n+}\n+\n+void\n+entry (int c)\n+{\n+  struct S s;\n+  int i;\n+\n+  for (i = 0; i<c; i++)\n+    {\n+      s.a = c;\n+      s.b = 64;\n+      s.c = 32;\n+      foo (4, i, &s);\n+    }\n+}\n+/* { dg-final { scan-ipa-dump-times \"Clone of bar\" 1 \"cp\" } } */\n+/* { dg-final { scan-ipa-dump-times \"Clone of foo\" 1 \"cp\" } } */\n+/* { dg-final { cleanup-ipa-dump \"cp\" } } */\n+/* { dg-final { scan-tree-dump-not \"->c;\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "5014ffd3b7612aae41393c191e41fc6d6cb721ad", "filename": "gcc/testsuite/gcc.dg/ipa/ipcp-agg-8.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb20b7788fe0a9f43657668207677833e3881741/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-agg-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb20b7788fe0a9f43657668207677833e3881741/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-agg-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-agg-8.c?ref=eb20b7788fe0a9f43657668207677833e3881741", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fno-ipa-sra -fdump-tree-optimized-slim\"  } */\n+/* { dg-add-options bind_pic_locally } */\n+\n+struct S\n+{\n+  int a, b, c;\n+};\n+\n+void *blah(int, void *);\n+\n+static void __attribute__ ((noinline)) foo (int x, int z, struct S *p);\n+\n+static void __attribute__ ((noinline))\n+bar (int x, int z, struct S *p)\n+{\n+  p->b = 0;\n+  foo (z, x, p);\n+}\n+\n+static void __attribute__ ((noinline))\n+foo (int x, int z, struct S *p)\n+{\n+  int i, c = p->c;\n+  int b = p->b - z;\n+  void *v = (void *) p;\n+\n+  if (z)\n+    {\n+      z--;\n+      bar (z, x, p);\n+    }\n+  for (i = 0; i< c; i++)\n+    v = blah(b + x + i, v);\n+}\n+\n+void\n+entry (int c)\n+{\n+  struct S s;\n+  int i;\n+\n+  for (i = 0; i<c; i++)\n+    {\n+      s.a = c;\n+      s.b = 64;\n+      s.c = 32;\n+      foo (4, i, &s);\n+    }\n+}\n+/* { dg-final { scan-tree-dump \"->b;\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}