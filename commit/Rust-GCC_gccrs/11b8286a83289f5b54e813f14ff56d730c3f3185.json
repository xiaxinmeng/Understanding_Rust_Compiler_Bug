{"sha": "11b8286a83289f5b54e813f14ff56d730c3f3185", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFiODI4NmE4MzI4OWY1YjU0ZTgxM2YxNGZmNTZkNzMwYzNmMzE4NQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-05-20T14:11:37Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-05-21T18:09:59Z"}, "message": "[OpenACC privatization] Largely extend diagnostics and corresponding testsuite coverage [PR90115]\n\n\tgcc/\n\tPR middle-end/90115\n\t* flag-types.h (enum openacc_privatization): New.\n\t* params.opt (-param=openacc-privatization): New.\n\t* doc/invoke.texi (openacc-privatization): Document it.\n\t* omp-general.h (get_openacc_privatization_dump_flags): New\n\tfunction.\n\t* omp-low.c (oacc_privatization_candidate_p): Add diagnostics.\n\t* omp-offload.c (execute_oacc_device_lower)\n\t<IFN_UNIQUE_OACC_PRIVATE>: Re-work diagnostics.\n\t* target.def (goacc.adjust_private_decl): Add 'location_t'\n\tparameter.\n\t* doc/tm.texi: Regenerate.\n\t* config/gcn/gcn-protos.h (gcn_goacc_adjust_private_decl): Adjust.\n\t* config/gcn/gcn-tree.c (gcn_goacc_adjust_private_decl): Likewise.\n\t* config/nvptx/nvptx.c (nvptx_goacc_adjust_private_decl):\n\tLikewise.  Preserve it for...\n\t(nvptx_goacc_expand_var_decl): ... use here.\n\tgcc/testsuite/\n\tPR middle-end/90115\n\t* c-c++-common/goacc/privatization-1-compute-loop.c: New file.\n\t* c-c++-common/goacc/privatization-1-compute.c: Likewise.\n\t* c-c++-common/goacc/privatization-1-routine_gang-loop.c:\n\tLikewise.\n\t* c-c++-common/goacc/privatization-1-routine_gang.c: Likewise.\n\t* gfortran.dg/goacc/privatization-1-compute-loop.f90: Likewise.\n\t* gfortran.dg/goacc/privatization-1-compute.f90: Likewise.\n\t* gfortran.dg/goacc/privatization-1-routine_gang-loop.f90:\n\tLikewise.\n\t* gfortran.dg/goacc/privatization-1-routine_gang.f90: Likewise.\n\t* c-c++-common/goacc-gomp/nesting-1.c: Update.\n\t* c-c++-common/goacc/private-reduction-1.c: Likewise.\n\t* gfortran.dg/goacc/private-3.f95: Likewise.\n\tlibgomp/\n\tPR middle-end/90115\n\t* testsuite/libgomp.oacc-fortran/private-atomic-1-vector.f90: New\n\tfile.\n\t* testsuite/libgomp.oacc-c-c++-common/firstprivate-1.c: Update.\n\t* testsuite/libgomp.oacc-c-c++-common/host_data-7.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-decompose-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-2.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-3.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-4.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-5.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-2.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-3.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-4.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-5.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-6.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-vector-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-vector-2.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-2.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-3.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-4.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-5.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-6.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-7.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-g-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-g-2.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-gwv-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-gwv-2.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-g-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-gwv-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-v-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-v-2.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-w-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-w-2.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-wv-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-v-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-w-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-wv-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/parallel-reduction.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/private-atomic-1-gang.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/private-atomic-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/private-variables.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-4.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/static-variable-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/acc_on_device-1-1.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/acc_on_device-1-2.f: Likewise.\n\t* testsuite/libgomp.oacc-fortran/acc_on_device-1-3.f: Likewise.\n\t* testsuite/libgomp.oacc-fortran/declare-1.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/host_data-5.F90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/if-1.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-1.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-2.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-3.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-6.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-vector-1.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-vector-2.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-1.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-2.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-3.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-4.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-5.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-6.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-7.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/optional-private.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/parallel-dims.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/private-atomic-1-gang.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/private-atomic-1-worker.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/private-variables.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/privatized-ref-2.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/routine-7.f90: Likewise.", "tree": {"sha": "ce58a5ebd24e4a620cd89c5d531a005205802372", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce58a5ebd24e4a620cd89c5d531a005205802372"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11b8286a83289f5b54e813f14ff56d730c3f3185", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b8286a83289f5b54e813f14ff56d730c3f3185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11b8286a83289f5b54e813f14ff56d730c3f3185", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b8286a83289f5b54e813f14ff56d730c3f3185/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d42c10563e23d846b61c9c4a4abe75da70f7838d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d42c10563e23d846b61c9c4a4abe75da70f7838d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d42c10563e23d846b61c9c4a4abe75da70f7838d"}], "stats": {"total": 2595, "additions": 2342, "deletions": 253}, "files": [{"sha": "8bd0b434a84096476a60b99e270665e963d7252f", "filename": "gcc/config/gcn/gcn-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Fconfig%2Fgcn%2Fgcn-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Fconfig%2Fgcn%2Fgcn-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-protos.h?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -40,7 +40,7 @@ extern rtx gcn_gen_undef (machine_mode);\n extern bool gcn_global_address_p (rtx);\n extern tree gcn_goacc_adjust_propagation_record (tree record_type, bool sender,\n \t\t\t\t\t\t const char *name);\n-extern tree gcn_goacc_adjust_private_decl (tree var, int level);\n+extern tree gcn_goacc_adjust_private_decl (location_t, tree var, int level);\n extern void gcn_goacc_reduction (gcall *call);\n extern bool gcn_hard_regno_rename_ok (unsigned int from_reg,\n \t\t\t\t      unsigned int to_reg);"}, {"sha": "1eb8882d4bf16da13db99de26b86b55650c9e16c", "filename": "gcc/config/gcn/gcn-tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Fconfig%2Fgcn%2Fgcn-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Fconfig%2Fgcn%2Fgcn-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-tree.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -578,7 +578,7 @@ gcn_goacc_adjust_propagation_record (tree record_type, bool sender,\n }\n \n tree\n-gcn_goacc_adjust_private_decl (tree var, int level)\n+gcn_goacc_adjust_private_decl (location_t, tree var, int level)\n {\n   if (level != GOMP_DIM_GANG)\n     return var;"}, {"sha": "6642bdfa86728595738a2bac0695062962f9ec52", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 52, "deletions": 9, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -6680,7 +6680,7 @@ nvptx_truly_noop_truncation (poly_uint64, poly_uint64)\n /* Implement TARGET_GOACC_ADJUST_PRIVATE_DECL.  */\n \n static tree\n-nvptx_goacc_adjust_private_decl (tree decl, int level)\n+nvptx_goacc_adjust_private_decl (location_t loc, tree decl, int level)\n {\n   gcc_checking_assert (!lookup_attribute (\"oacc gang-private\",\n \t\t\t\t\t  DECL_ATTRIBUTES (decl)));\n@@ -6689,14 +6689,12 @@ nvptx_goacc_adjust_private_decl (tree decl, int level)\n      declarations.  */\n   if (level == GOMP_DIM_GANG)\n     {\n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t{\n-\t  fprintf (dump_file, \"Setting 'oacc gang-private' attribute for decl:\");\n-\t  print_generic_decl (dump_file, decl, TDF_SLIM);\n-\t  fputc ('\\n', dump_file);\n-\t}\n       tree id = get_identifier (\"oacc gang-private\");\n-      DECL_ATTRIBUTES (decl) = tree_cons (id, NULL, DECL_ATTRIBUTES (decl));\n+      /* For later diagnostic purposes, pass LOC as VALUE (wrapped as a\n+\t TREE).  */\n+      tree loc_tree = build_empty_stmt (loc);\n+      DECL_ATTRIBUTES (decl)\n+\t= tree_cons (id, loc_tree, DECL_ATTRIBUTES (decl));\n     }\n \n   return decl;\n@@ -6708,7 +6706,8 @@ static rtx\n nvptx_goacc_expand_var_decl (tree var)\n {\n   /* Place \"oacc gang-private\" variables in shared memory.  */\n-  if (lookup_attribute (\"oacc gang-private\", DECL_ATTRIBUTES (var)))\n+  if (tree attr = lookup_attribute (\"oacc gang-private\",\n+\t\t\t\t    DECL_ATTRIBUTES (var)))\n     {\n       gcc_checking_assert (VAR_P (var));\n \n@@ -6728,6 +6727,50 @@ nvptx_goacc_expand_var_decl (tree var)\n \t  bool existed = gang_private_shared_hmap.put (var, offset);\n \t  gcc_checking_assert (!existed);\n \t  gang_private_shared_size += tree_to_uhwi (DECL_SIZE_UNIT (var));\n+\n+\t  location_t loc = EXPR_LOCATION (TREE_VALUE (attr));\n+#if 0 /* For some reason, this doesn't work.  */\n+\t  if (dump_enabled_p ())\n+\t    {\n+\t      dump_flags_t l_dump_flags\n+\t\t= get_openacc_privatization_dump_flags ();\n+\n+\t      const dump_user_location_t d_u_loc\n+\t\t= dump_user_location_t::from_location_t (loc);\n+/* PR100695 \"Format decoder, quoting in 'dump_printf' etc.\" */\n+#if __GNUC__ >= 10\n+# pragma GCC diagnostic push\n+# pragma GCC diagnostic ignored \"-Wformat\"\n+#endif\n+\t      dump_printf_loc (l_dump_flags, d_u_loc,\n+\t\t\t       \"variable %<%T%> adjusted for OpenACC\"\n+\t\t\t       \" privatization level: %qs\\n\",\n+\t\t\t       var, \"gang\");\n+#if __GNUC__ >= 10\n+# pragma GCC diagnostic pop\n+#endif\n+\t    }\n+#else /* ..., thus emulate that, good enough for testsuite usage.  */\n+\t  if (param_openacc_privatization != OPENACC_PRIVATIZATION_QUIET)\n+\t    inform (loc,\n+\t\t    \"variable %qD adjusted for OpenACC privatization level:\"\n+\t\t    \" %qs\",\n+\t\t    var, \"gang\");\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    {\n+\t      /* 'dumpfile.c:dump_loc' */\n+\t      fprintf (dump_file, \"%s:%d:%d: \", LOCATION_FILE (loc),\n+\t\t       LOCATION_LINE (loc), LOCATION_COLUMN (loc));\n+\t      fprintf (dump_file, \"%s: \", \"note\");\n+\n+\t      fprintf (dump_file,\n+\t\t       \"variable '\");\n+\t      print_generic_expr (dump_file, var, TDF_SLIM);\n+\t      fprintf (dump_file,\n+\t\t       \"' adjusted for OpenACC privatization level: '%s'\\n\",\n+\t\t       \"gang\");\n+\t    }\n+#endif\n \t}\n       rtx addr = plus_constant (Pmode, gang_private_shared_sym, offset);\n       return gen_rtx_MEM (TYPE_MODE (TREE_TYPE (var)), addr);"}, {"sha": "5cd4e2d993c99ae55954e35d1023b1510965b6f4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -14425,6 +14425,14 @@ With @option{--param=openacc-kernels=parloops}, OpenACC `kernels'\n constructs are handled by the @samp{parloops} pass, en bloc.\n This is the current default.\n \n+@item openacc-privatization\n+Specify mode of OpenACC privatization diagnostics for\n+@option{-fopt-info-omp-note} and applicable\n+@option{-fdump-tree-*-details}.\n+With @option{--param=openacc-privatization=quiet}, don't diagnose.\n+This is the current default.\n+With @option{--param=openacc-privatization=noisy}, do diagnose.\n+\n @end table\n \n The following choices of @var{name} are available on AArch64 targets:"}, {"sha": "e3a080e4a7c4fa698b613c1d4149cce0f1cdc5be", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -6236,12 +6236,13 @@ like @code{cond_add@var{m}}.  The default implementation returns a zero\n constant of type @var{type}.\n @end deftypefn\n \n-@deftypefn {Target Hook} tree TARGET_GOACC_ADJUST_PRIVATE_DECL (tree @var{var}, int @var{level})\n+@deftypefn {Target Hook} tree TARGET_GOACC_ADJUST_PRIVATE_DECL (location_t @var{loc}, tree @var{var}, int @var{level})\n This hook, if defined, is used by accelerator target back-ends to adjust\n OpenACC variable declarations that should be made private to the given\n parallelism level (i.e. @code{GOMP_DIM_GANG}, @code{GOMP_DIM_WORKER} or\n @code{GOMP_DIM_VECTOR}).  A typical use for this hook is to force variable\n declarations at the @code{gang} level to reside in GPU shared memory.\n+@var{loc} may be used for diagnostic purposes.\n \n You may also use the @code{TARGET_GOACC_EXPAND_VAR_DECL} hook if the\n adjusted variable declaration needs to be expanded to RTL in a non-standard"}, {"sha": "375448ebf5f68d9ffdc0f3cc13603b329740a768", "filename": "gcc/flag-types.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -442,6 +442,13 @@ enum openacc_kernels\n   OPENACC_KERNELS_PARLOOPS\n };\n \n+/* Modes of OpenACC privatization diagnostics.  */\n+enum openacc_privatization\n+{\n+  OPENACC_PRIVATIZATION_QUIET,\n+  OPENACC_PRIVATIZATION_NOISY\n+};\n+\n #endif\n \n #endif /* ! GCC_FLAG_TYPES_H */"}, {"sha": "5c3e0f0e205866c7e4b49b15e9886cdba5013ec3", "filename": "gcc/omp-general.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Fomp-general.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Fomp-general.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.h?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -132,4 +132,17 @@ enum omp_requires {\n \n extern GTY(()) enum omp_requires omp_requires_mask;\n \n+static inline dump_flags_t\n+get_openacc_privatization_dump_flags ()\n+{\n+  dump_flags_t l_dump_flags = MSG_NOTE;\n+\n+  /* For '--param=openacc-privatization=quiet', diagnostics only go to dump\n+     files.  */\n+  if (param_openacc_privatization == OPENACC_PRIVATIZATION_QUIET)\n+    l_dump_flags |= MSG_PRIORITY_INTERNALS;\n+\n+  return l_dump_flags;\n+}\n+\n #endif /* GCC_OMP_GENERAL_H */"}, {"sha": "0d63e8243aedcebfd93ccf546ffa8a8b3c06ef42", "filename": "gcc/omp-low.c", "status": "modified", "additions": 70, "deletions": 5, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -10160,16 +10160,81 @@ lower_omp_for_lastprivate (struct omp_for_data *fd, gimple_seq *body_p,\n    sometimes, using shared memory directly would be faster than\n    broadcasting.  */\n \n+static void\n+oacc_privatization_begin_diagnose_var (const dump_flags_t l_dump_flags,\n+\t\t\t\t       const location_t loc, const tree c,\n+\t\t\t\t       const tree decl)\n+{\n+  const dump_user_location_t d_u_loc\n+    = dump_user_location_t::from_location_t (loc);\n+/* PR100695 \"Format decoder, quoting in 'dump_printf' etc.\" */\n+#if __GNUC__ >= 10\n+# pragma GCC diagnostic push\n+# pragma GCC diagnostic ignored \"-Wformat\"\n+#endif\n+  dump_printf_loc (l_dump_flags, d_u_loc,\n+\t\t   \"variable %<%T%> \", decl);\n+#if __GNUC__ >= 10\n+# pragma GCC diagnostic pop\n+#endif\n+  if (c)\n+    dump_printf (l_dump_flags,\n+\t\t \"in %qs clause \",\n+\t\t omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+  else\n+    dump_printf (l_dump_flags,\n+\t\t \"declared in block \");\n+}\n+\n static bool\n-oacc_privatization_candidate_p (const tree decl)\n+oacc_privatization_candidate_p (const location_t loc, const tree c,\n+\t\t\t\tconst tree decl)\n {\n+  dump_flags_t l_dump_flags = get_openacc_privatization_dump_flags ();\n+\n   bool res = true;\n \n   if (res && !VAR_P (decl))\n-    res = false;\n+    {\n+      res = false;\n+\n+      if (dump_enabled_p ())\n+\t{\n+\t  oacc_privatization_begin_diagnose_var (l_dump_flags, loc, c, decl);\n+\t  dump_printf (l_dump_flags,\n+\t\t       \"potentially has improper OpenACC privatization level: %qs\\n\",\n+\t\t       get_tree_code_name (TREE_CODE (decl)));\n+\t}\n+    }\n \n   if (res && !TREE_ADDRESSABLE (decl))\n-    res = false;\n+    {\n+      res = false;\n+\n+      if (dump_enabled_p ())\n+\t{\n+\t  oacc_privatization_begin_diagnose_var (l_dump_flags, loc, c, decl);\n+\t  dump_printf (l_dump_flags,\n+\t\t       \"isn%'t candidate for adjusting OpenACC privatization level: %s\\n\",\n+\t\t       \"not addressable\");\n+\t}\n+    }\n+\n+  if (res)\n+    {\n+      if (dump_enabled_p ())\n+\t{\n+\t  oacc_privatization_begin_diagnose_var (l_dump_flags, loc, c, decl);\n+\t  dump_printf (l_dump_flags,\n+\t\t       \"is candidate for adjusting OpenACC privatization level\\n\");\n+\t}\n+    }\n+\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      print_generic_decl (dump_file, decl, dump_flags);\n+      fprintf (dump_file, \"\\n\");\n+    }\n \n   return res;\n }\n@@ -10185,7 +10250,7 @@ oacc_privatization_scan_clause_chain (omp_context *ctx, tree clauses)\n       {\n \ttree decl = OMP_CLAUSE_DECL (c);\n \n-\tif (!oacc_privatization_candidate_p (decl))\n+\tif (!oacc_privatization_candidate_p (OMP_CLAUSE_LOCATION (c), c, decl))\n \t  continue;\n \n \tgcc_checking_assert (!ctx->oacc_privatization_candidates.contains (decl));\n@@ -10201,7 +10266,7 @@ oacc_privatization_scan_decl_chain (omp_context *ctx, tree decls)\n {\n   for (tree decl = decls; decl; decl = DECL_CHAIN (decl))\n     {\n-      if (!oacc_privatization_candidate_p (decl))\n+      if (!oacc_privatization_candidate_p (gimple_location (ctx->stmt), NULL, decl))\n \tcontinue;\n \n       gcc_checking_assert (!ctx->oacc_privatization_candidates.contains (decl));"}, {"sha": "e9078278382d9ab73b7d98294d1bd5001442bbc6", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 58, "deletions": 15, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -2137,6 +2137,15 @@ execute_oacc_device_lower ()\n \n \t\tcase IFN_UNIQUE_OACC_PRIVATE:\n \t\t  {\n+\t\t    dump_flags_t l_dump_flags\n+\t\t      = get_openacc_privatization_dump_flags ();\n+\n+\t\t    location_t loc = gimple_location (stmt);\n+\t\t    if (LOCATION_LOCUS (loc) == UNKNOWN_LOCATION)\n+\t\t      loc = DECL_SOURCE_LOCATION (current_function_decl);\n+\t\t    const dump_user_location_t d_u_loc\n+\t\t      = dump_user_location_t::from_location_t (loc);\n+\n \t\t    HOST_WIDE_INT level\n \t\t      = TREE_INT_CST_LOW (gimple_call_arg (call, 2));\n \t\t    gcc_checking_assert (level == -1\n@@ -2146,31 +2155,65 @@ execute_oacc_device_lower ()\n \t\t\t i < gimple_call_num_args (call);\n \t\t\t i++)\n \t\t      {\n+\t\t\tstatic char const *const axes[] =\n+\t\t\t/* Must be kept in sync with GOMP_DIM enumeration.  */\n+\t\t\t  { \"gang\", \"worker\", \"vector\" };\n+\n \t\t\ttree arg = gimple_call_arg (call, i);\n \t\t\tgcc_checking_assert (TREE_CODE (arg) == ADDR_EXPR);\n \t\t\ttree decl = TREE_OPERAND (arg, 0);\n-\t\t\tif (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t\tif (dump_enabled_p ())\n+/* PR100695 \"Format decoder, quoting in 'dump_printf' etc.\" */\n+#if __GNUC__ >= 10\n+# pragma GCC diagnostic push\n+# pragma GCC diagnostic ignored \"-Wformat\"\n+#endif\n+\t\t\t  dump_printf_loc (l_dump_flags, d_u_loc,\n+\t\t\t\t\t   \"variable %<%T%> ought to be\"\n+\t\t\t\t\t   \" adjusted for OpenACC\"\n+\t\t\t\t\t   \" privatization level: %qs\\n\",\n+\t\t\t\t\t   decl,\n+\t\t\t\t\t   (level == -1\n+\t\t\t\t\t    ? \"UNKNOWN\" : axes[level]));\n+#if __GNUC__ >= 10\n+# pragma GCC diagnostic pop\n+#endif\n+\t\t\tbool adjusted;\n+\t\t\tif (level == -1)\n+\t\t\t  adjusted = false;\n+\t\t\telse if (!targetm.goacc.adjust_private_decl)\n+\t\t\t  adjusted = false;\n+\t\t\telse if (level == GOMP_DIM_VECTOR)\n \t\t\t  {\n-\t\t\t    static char const *const axes[] =\n-\t\t\t      /* Must be kept in sync with GOMP_DIM\n-\t\t\t\t enumeration.  */\n-\t\t\t      { \"gang\", \"worker\", \"vector\" };\n-\t\t\t    fprintf (dump_file, \"Decl UID %u has %s \"\n-\t\t\t\t     \"partitioning:\", DECL_UID (decl),\n-\t\t\t\t     (level == -1 ? \"UNKNOWN\" : axes[level]));\n-\t\t\t    print_generic_decl (dump_file, decl, TDF_SLIM);\n-\t\t\t    fputc ('\\n', dump_file);\n+\t\t\t    /* That's the default behavior.  */\n+\t\t\t    adjusted = true;\n \t\t\t  }\n-\t\t\tif (level != -1\n-\t\t\t    && targetm.goacc.adjust_private_decl)\n+\t\t\telse\n \t\t\t  {\n \t\t\t    tree oldtype = TREE_TYPE (decl);\n \t\t\t    tree newdecl\n-\t\t\t      = targetm.goacc.adjust_private_decl (decl, level);\n-\t\t\t    if (TREE_TYPE (newdecl) != oldtype\n-\t\t\t\t|| newdecl != decl)\n+\t\t\t      = targetm.goacc.adjust_private_decl (loc, decl,\n+\t\t\t\t\t\t\t\t   level);\n+\t\t\t    adjusted = (TREE_TYPE (newdecl) != oldtype\n+\t\t\t\t\t|| newdecl != decl);\n+\t\t\t    if (adjusted)\n \t\t\t      adjusted_vars.put (decl, newdecl);\n \t\t\t  }\n+\t\t\tif (adjusted\n+\t\t\t    && dump_enabled_p ())\n+/* PR100695 \"Format decoder, quoting in 'dump_printf' etc.\" */\n+#if __GNUC__ >= 10\n+# pragma GCC diagnostic push\n+# pragma GCC diagnostic ignored \"-Wformat\"\n+#endif\n+\t\t\t  dump_printf_loc (l_dump_flags, d_u_loc,\n+\t\t\t\t\t   \"variable %<%T%> adjusted for\"\n+\t\t\t\t\t   \" OpenACC privatization level:\"\n+\t\t\t\t\t   \" %qs\\n\",\n+\t\t\t\t\t   decl, axes[level]);\n+#if __GNUC__ >= 10\n+# pragma GCC diagnostic pop\n+#endif\n \t\t      }\n \t\t    remove = true;\n \t\t  }"}, {"sha": "0d0dcd216f6d97336534191405c77751556fc08c", "filename": "gcc/params.opt", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -795,6 +795,19 @@ Enum(openacc_kernels) String(decompose) Value(OPENACC_KERNELS_DECOMPOSE)\n EnumValue\n Enum(openacc_kernels) String(parloops) Value(OPENACC_KERNELS_PARLOOPS)\n \n+-param=openacc-privatization=\n+Common Joined Enum(openacc_privatization) Var(param_openacc_privatization) Init(OPENACC_PRIVATIZATION_QUIET) Param\n+--param=openacc-privatization=[quiet|noisy]\tSpecify mode of OpenACC privatization diagnostics.\n+\n+Enum\n+Name(openacc_privatization) Type(enum openacc_privatization)\n+\n+EnumValue\n+Enum(openacc_privatization) String(quiet) Value(OPENACC_PRIVATIZATION_QUIET)\n+\n+EnumValue\n+Enum(openacc_privatization) String(noisy) Value(OPENACC_PRIVATIZATION_NOISY)\n+\n -param=parloops-chunk-size=\n Common Joined UInteger Var(param_parloops_chunk_size) Param Optimization\n Chunk size of omp schedule for loops parallelized by parloops."}, {"sha": "1dffedc81e4f5eafc95939551edc422464fc4dfa", "filename": "gcc/target.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1733,11 +1733,12 @@ OpenACC variable declarations that should be made private to the given\\n\\\n parallelism level (i.e. @code{GOMP_DIM_GANG}, @code{GOMP_DIM_WORKER} or\\n\\\n @code{GOMP_DIM_VECTOR}).  A typical use for this hook is to force variable\\n\\\n declarations at the @code{gang} level to reside in GPU shared memory.\\n\\\n+@var{loc} may be used for diagnostic purposes.\\n\\\n \\n\\\n You may also use the @code{TARGET_GOACC_EXPAND_VAR_DECL} hook if the\\n\\\n adjusted variable declaration needs to be expanded to RTL in a non-standard\\n\\\n way.\",\n-tree, (tree var, int level),\n+tree, (location_t loc, tree var, int level),\n NULL)\n \n DEFHOOK"}, {"sha": "b0b7837401699e903f38db29bd66f492beb0afd8", "filename": "gcc/testsuite/c-c++-common/goacc-gomp/nesting-1.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fnesting-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fnesting-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fnesting-1.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,7 +1,14 @@\n+/* { dg-additional-options \"-fopt-info-omp-note\" } */\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" } for\n+   testing/documenting aspects of that functionality.  */\n+\n+\n void\n f_acc_data (void)\n {\n #pragma acc data\n+  /* { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+  /* { dg-note {variable 'i' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-2 } */\n   {\n     int i;\n #pragma omp atomic write\n@@ -13,6 +20,8 @@ void\n f_acc_kernels (void)\n {\n #pragma acc kernels\n+  /* { dg-note {variable 'i' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-1 }\n+     { dg-note {variable 'i' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } .-2 } */\n   {\n     int i;\n #pragma omp atomic write\n@@ -27,6 +36,9 @@ f_acc_loop (void)\n   int i;\n \n #pragma acc loop\n+  /* { dg-note {variable 'i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+  /* { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-2 }\n+     { dg-bogus {note: variable 'i' ought to be adjusted for OpenACC privatization level: 'UNKNOWN'} \"TODO\" { xfail *-*-* } .-3 } */\n   for (i = 0; i < 2; ++i)\n     {\n #pragma omp atomic write\n@@ -38,6 +50,8 @@ void\n f_acc_parallel (void)\n {\n #pragma acc parallel\n+  /* { dg-note {variable 'i' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-1 }\n+     { dg-note {variable 'i' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } .-2 } */\n   {\n     int i;\n #pragma omp atomic write"}, {"sha": "38f6b7acf2bc8837a4c8f0d0079eb240e9771543", "filename": "gcc/testsuite/c-c++-common/goacc/private-reduction-1.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivate-reduction-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivate-reduction-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivate-reduction-1.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,10 +1,16 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" } for\n+   testing/documenting aspects of that functionality.  */\n+\n int\n reduction ()\n {\n   int i, r;\n \n   #pragma acc parallel\n   #pragma acc loop private (r) reduction (+:r)\n+  /* { dg-note {variable 'r' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} r { target *-*-* } .-1 } */\n+  /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} i { target *-*-* } .-2 } */\n   for (i = 0; i < 100; i++)\n     r += 10;\n "}, {"sha": "4bfb5270690d970b6dc9630bacea8d5785fdfb79", "filename": "gcc/testsuite/c-c++-common/goacc/privatization-1-compute-loop.c", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-compute-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-compute-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-compute-loop.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -0,0 +1,95 @@\n+/* OpenACC privatization: 'loop' construct inside compute construct */\n+\n+/* { dg-additional-options \"-fopt-info-omp-note\" } */\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" } for\n+   testing/documenting aspects of that functionality.  */\n+\n+/* See also '../../gfortran.dg/goacc/privatization-1-compute-loop.f90'.  */\n+\n+/* It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n+   passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n+   so to maintain compatibility with earlier Tcl releases, we manually\n+   initialize counter variables:\n+   { dg-line l_dummy[variable c_loop 0] }\n+   { dg-message \"dummy\" \"\" { target iN-VAl-Id } l_dummy } to avoid\n+   \"WARNING: dg-line var l_dummy defined, but not used\".  */\n+\n+extern int e;\n+static int s;\n+int g;\n+\n+void\n+f (int i, int j, int a)\n+{\n+  extern int ex;\n+  static int st;\n+  int x, y;\n+#pragma acc parallel\n+#pragma acc loop collapse(2) private(a) private (e, s, g) private(ex, st, x, y) /* { dg-line l_loop[incr c_loop] } */\n+  for (i = 0; i < 20; ++i)\n+    for (j = 0; j < 25; ++j)\n+      {\n+\t__label__ ll;\n+\t/* Nested scopes fun.  */\n+\t{\n+\t  struct s_ss { int i; } ss;\n+\t  {\n+\t    extern int func (int *, int *, int *);\n+\t    /* Don't know how to effect a 'CONST_DECL' here.  (See Fortran example.)  */\n+\t    /* Don't know how to effect a 'RESULT_DECL' here; only saw this for OpenMP 'lastprivate'.  */\n+\n+\t    a = func (&i, &j, &a);\n+\t  }\n+\t  ss.i = a;\n+\t  {\n+\t    extern int func2 (int *, int *, int *, int *, int *, int *, int *);\n+\t    extern int ext;\n+\t    static int sta;\n+\t    a = func2 (&e, &s, &g, &ex, &st, &ext, &sta);\n+\t  }\n+\t}\n+\tx = a;\n+#pragma acc atomic write\n+\ty = a;\n+\t{\n+\t  int xx, yy;\n+\t  xx = a;\n+#pragma acc atomic write\n+\t  yy = a;\n+\t}\n+\n+      ll:\n+\t;\n+      }\n+  /* { dg-note {variable 'y' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 'y' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'st' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 'st' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'ex' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 'ex' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'g' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 'g' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 's' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 's' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'e' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 'e' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'a' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'j\\.1' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'i\\.0' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'j' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'i' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'll' declared in block potentially has improper OpenACC privatization level: 'label_decl'} \"TODO\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'struct struct s_ss' declared in block potentially has improper OpenACC privatization level: 'type_decl'} \"TODO\" { target c } l_loop$c_loop }\n+     { dg-note {variable 's_ss' declared in block potentially has improper OpenACC privatization level: 'type_decl'} \"TODO\" { target c++ } l_loop$c_loop } */\n+  /* { dg-note {variable 'ss' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'func' declared in block potentially has improper OpenACC privatization level: 'function_decl'} \"TODO\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'func2' declared in block potentially has improper OpenACC privatization level: 'function_decl'} \"TODO\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'ext' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 'ext' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'sta' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 'sta' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'xx' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'yy' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 'yy' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n+}"}, {"sha": "4de45e5c1eda88de8a13ec37d23a3f2ee4ab3d1d", "filename": "gcc/testsuite/c-c++-common/goacc/privatization-1-compute.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-compute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-compute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-compute.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -0,0 +1,90 @@\n+/* OpenACC privatization: compute construct */\n+\n+/* { dg-additional-options \"-fopt-info-omp-note\" } */\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" } for\n+   testing/documenting aspects of that functionality.  */\n+\n+/* See also '../../gfortran.dg/goacc/privatization-1-compute.f90'.  */\n+\n+/* It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n+   passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n+   so to maintain compatibility with earlier Tcl releases, we manually\n+   initialize counter variables:\n+   { dg-line l_dummy[variable c_compute 0] }\n+   { dg-message \"dummy\" \"\" { target iN-VAl-Id } l_dummy } to avoid\n+   \"WARNING: dg-line var l_dummy defined, but not used\".  */\n+\n+extern int e;\n+static int s;\n+int g;\n+\n+void\n+f (int i, int j, int a)\n+{\n+  extern int ex;\n+  static int st;\n+  int x, y;\n+#pragma acc parallel private(i, j, a) private (e, s, g) private(ex, st, x, y) /* { dg-line l_compute[incr c_compute] } */\n+      {\n+\t__label__ ll;\n+\t/* Nested scopes fun.  */\n+\t{\n+\t  struct s_ss { int i; } ss;\n+\t  {\n+\t    extern int func (int *, int *, int *);\n+\t    /* Don't know how to effect a 'CONST_DECL' here.  (See Fortran example.)  */\n+\t    /* Don't know how to effect a 'RESULT_DECL' here; only saw this for OpenMP 'lastprivate'.  */\n+\n+\t    a = func (&i, &j, &a);\n+\t  }\n+\t  ss.i = a;\n+\t  {\n+\t    extern int func2 (int *, int *, int *, int *, int *, int *, int *);\n+\t    extern int ext;\n+\t    static int sta;\n+\t    a = func2 (&e, &s, &g, &ex, &st, &ext, &sta);\n+\t  }\n+\t}\n+\tx = a;\n+#pragma acc atomic write\n+\ty = a;\n+\t{\n+\t  int xx, yy;\n+\t  xx = a;\n+#pragma acc atomic write\n+\t  yy = a;\n+\t}\n+\n+      ll:\n+\t;\n+      }\n+  /* { dg-note {variable 'y' in 'private' clause is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'y' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"TODO\" { xfail *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'st' in 'private' clause is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'st' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'ex' in 'private' clause is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'ex' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'g' in 'private' clause is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'g' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 's' in 'private' clause is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_compute$c_compute }\n+     { dg-note {variable 's' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'e' in 'private' clause is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'e' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'a' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { xfail *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'j' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { xfail *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'i' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { xfail *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'll' declared in block potentially has improper OpenACC privatization level: 'label_decl'} \"TODO\" { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'struct struct s_ss' declared in block potentially has improper OpenACC privatization level: 'type_decl'} \"TODO\" { target c } l_compute$c_compute }\n+     { dg-note {variable 's_ss' declared in block potentially has improper OpenACC privatization level: 'type_decl'} \"TODO\" { target c++ } l_compute$c_compute } */\n+  /* { dg-note {variable 'ss' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'func' declared in block potentially has improper OpenACC privatization level: 'function_decl'} \"TODO\" { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'func2' declared in block potentially has improper OpenACC privatization level: 'function_decl'} \"TODO\" { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'ext' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'ext' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'sta' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'sta' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'xx' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'yy' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'yy' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_compute$c_compute } */\n+}"}, {"sha": "fcc233b088608903af208a3067e151e324398640", "filename": "gcc/testsuite/c-c++-common/goacc/privatization-1-routine_gang-loop.c", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-routine_gang-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-routine_gang-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-routine_gang-loop.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -0,0 +1,95 @@\n+/* OpenACC privatization: 'loop' construct inside 'routine' */\n+\n+/* { dg-additional-options \"-fopt-info-omp-note\" } */\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" } for\n+   testing/documenting aspects of that functionality.  */\n+\n+/* See also '../../gfortran.dg/goacc/privatization-1-routine_gang-loop.f90'.  */\n+\n+/* It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n+   passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n+   so to maintain compatibility with earlier Tcl releases, we manually\n+   initialize counter variables:\n+   { dg-line l_dummy[variable c_loop 0] }\n+   { dg-message \"dummy\" \"\" { target iN-VAl-Id } l_dummy } to avoid\n+   \"WARNING: dg-line var l_dummy defined, but not used\".  */\n+\n+extern int e;\n+static int s;\n+int g;\n+\n+#pragma acc routine gang\n+void\n+f (int i, int j, int a)\n+{\n+  extern int ex;\n+  static int st;\n+  int x, y;\n+#pragma acc loop collapse(2) private(a) private (e, s, g) private(ex, st, x, y) /* { dg-line l_loop[incr c_loop] } */\n+  for (i = 0; i < 20; ++i)\n+    for (j = 0; j < 25; ++j)\n+      {\n+\t__label__ ll;\n+\t/* Nested scopes fun.  */\n+\t{\n+\t  struct s_ss { int i; } ss;\n+\t  {\n+\t    extern int func (int *, int *, int *);\n+\t    /* Don't know how to effect a 'CONST_DECL' here.  (See Fortran example.)  */\n+\t    /* Don't know how to effect a 'RESULT_DECL' here; only saw this for OpenMP 'lastprivate'.  */\n+\n+\t    a = func (&i, &j, &a);\n+\t  }\n+\t  ss.i = a;\n+\t  {\n+\t    extern int func2 (int *, int *, int *, int *, int *, int *, int *);\n+\t    extern int ext;\n+\t    static int sta;\n+\t    a = func2 (&e, &s, &g, &ex, &st, &ext, &sta);\n+\t  }\n+\t}\n+\tx = a;\n+#pragma acc atomic write\n+\ty = a;\n+\t{\n+\t  int xx, yy;\n+\t  xx = a;\n+#pragma acc atomic write\n+\t  yy = a;\n+\t}\n+\n+      ll:\n+\t;\n+      }\n+  /* { dg-note {variable 'y' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 'y' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'st' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 'st' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'ex' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 'ex' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'g' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 'g' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 's' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 's' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'e' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 'e' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'a' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'j\\.1' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'i\\.0' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'j' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'i' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'll' declared in block potentially has improper OpenACC privatization level: 'label_decl'} \"TODO\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'struct struct s_ss' declared in block potentially has improper OpenACC privatization level: 'type_decl'} \"TODO\" { target c } l_loop$c_loop }\n+     { dg-note {variable 's_ss' declared in block potentially has improper OpenACC privatization level: 'type_decl'} \"TODO\" { target c++ } l_loop$c_loop } */\n+  /* { dg-note {variable 'ss' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'func' declared in block potentially has improper OpenACC privatization level: 'function_decl'} \"TODO\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'func2' declared in block potentially has improper OpenACC privatization level: 'function_decl'} \"TODO\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'ext' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 'ext' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'sta' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 'sta' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'xx' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'yy' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 'yy' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n+}"}, {"sha": "cd6708ff205f5a3d2cffe07427f95e0368088bf8", "filename": "gcc/testsuite/c-c++-common/goacc/privatization-1-routine_gang.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-routine_gang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-routine_gang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-routine_gang.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -0,0 +1,93 @@\n+/* OpenACC privatization: 'routine' */\n+\n+/* { dg-additional-options \"-fopt-info-omp-note\" } */\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" } for\n+   testing/documenting aspects of that functionality.  */\n+\n+/* See also '../../gfortran.dg/goacc/privatization-1-routine_gang.f90'.  */\n+\n+/* It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n+   passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n+   so to maintain compatibility with earlier Tcl releases, we manually\n+   initialize counter variables:\n+   { dg-line l_dummy[variable c_routine 0] }\n+   { dg-message \"dummy\" \"\" { target iN-VAl-Id } l_dummy } to avoid\n+   \"WARNING: dg-line var l_dummy defined, but not used\".  */\n+\n+extern int e;\n+static int s;\n+int g;\n+#pragma acc declare device_resident(e, s, g)\n+\n+#pragma acc routine gang /* { dg-line l_routine[incr c_routine] } */\n+void\n+f (int i, int j, int a)\n+{\n+  extern int ex;\n+  static int st;\n+#pragma acc declare device_resident(ex /* , st */)\n+  int x, y;\n+      {\n+\t__label__ ll;\n+\t/* Nested scopes fun.  */\n+\t{\n+\t  struct s_ss { int i; } ss;\n+\t  {\n+\t    extern int func (int *, int *, int *);\n+\t    /* Don't know how to effect a 'CONST_DECL' here.  (See Fortran example.)  */\n+\t    /* Don't know how to effect a 'RESULT_DECL' here; only saw this for OpenMP 'lastprivate'.  */\n+\n+\t    a = func (&i, &j, &a);\n+\t  }\n+\t  ss.i = a;\n+\t  {\n+\t    extern int func2 (int *, int *, int *, int *, int *, int *, int *);\n+\t    extern int ext;\n+\t    static int sta;\n+#pragma acc declare device_resident(ext /* , sta */)\n+\t    a = func2 (&e, &s, &g, &ex, &st, &ext, &sta);\n+\t  }\n+\t}\n+\tx = a;\n+#pragma acc atomic write\n+\ty = a;\n+\t{\n+\t  int xx, yy;\n+\t  xx = a;\n+#pragma acc atomic write\n+\t  yy = a;\n+\t}\n+\n+      ll:\n+\t;\n+      }\n+}\n+  /* { dg-note {variable 'y' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n+     { dg-note {variable 'y' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n+  /* { dg-note {variable 'x' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n+  /* { dg-note {variable 'st' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n+     { dg-note {variable 'st' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n+  /* { dg-note {variable 'ex' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n+     { dg-note {variable 'ex' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n+  /* { dg-note {variable 'g' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n+     { dg-note {variable 'g' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n+  /* { dg-note {variable 's' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n+     { dg-note {variable 's' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n+  /* { dg-note {variable 'e' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n+     { dg-note {variable 'e' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n+  /* { dg-note {variable 'a' declared in block potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n+  /* { dg-note {variable 'j' declared in block potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n+  /* { dg-note {variable 'i' declared in block potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n+  /* { dg-note {variable 'll' declared in block potentially has improper OpenACC privatization level: 'label_decl'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n+  /* { dg-note {variable 'struct struct s_ss' declared in block potentially has improper OpenACC privatization level: 'type_decl'} \"TODO\" { target c xfail *-*-* } l_routine$c_routine }\n+     { dg-note {variable 's_ss' declared in block potentially has improper OpenACC privatization level: 'type_decl'} \"TODO\" { target c++ xfail *-*-* } l_routine$c_routine } */\n+  /* { dg-note {variable 'ss' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n+  /* { dg-note {variable 'func' declared in block potentially has improper OpenACC privatization level: 'function_decl'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n+  /* { dg-note {variable 'func2' declared in block potentially has improper OpenACC privatization level: 'function_decl'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n+  /* { dg-note {variable 'ext' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n+     { dg-note {variable 'ext' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n+  /* { dg-note {variable 'sta' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n+     { dg-note {variable 'sta' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n+  /* { dg-note {variable 'xx' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n+  /* { dg-note {variable 'yy' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n+     { dg-note {variable 'yy' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */"}, {"sha": "1bfb4f1554de300aa8fa289342f454f59216e774", "filename": "gcc/testsuite/gfortran.dg/goacc/private-3.f95", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivate-3.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivate-3.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivate-3.f95?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,7 +1,9 @@\n-! { dg-do compile }\n-\n ! test for private variables in a reduction clause\n \n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" } for\n+! testing/documenting aspects of that functionality.\n+\n program test\n   implicit none\n   integer, parameter :: n = 100\n@@ -16,6 +18,7 @@ program test\n   !$acc parallel private (k)\n   k = 0\n   !$acc loop reduction (+:k)\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n   do i = 1, n\n      k = k + 1\n   end do"}, {"sha": "bcd7159ae5bdab65c14e5757dcac157c155730aa", "filename": "gcc/testsuite/gfortran.dg/goacc/privatization-1-compute-loop.f90", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-compute-loop.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-compute-loop.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-compute-loop.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -0,0 +1,57 @@\n+! OpenACC privatization: 'loop' construct\n+\n+! { dg-additional-options \"-fopt-info-omp-note\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" } for\n+! testing/documenting aspects of that functionality.\n+\n+! See also '../../c-c++-common/goacc/privatization-1-compute-loop.c'.\n+!TODO More cases should be added here.\n+\n+! It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n+! passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n+! so to maintain compatibility with earlier Tcl releases, we manually\n+! initialize counter variables:\n+! { dg-line l_dummy[variable c_loop 0] }\n+! { dg-message \"dummy\" \"\" { target iN-VAl-Id } l_dummy } to avoid\n+! \"WARNING: dg-line var l_dummy defined, but not used\".\n+\n+module m\n+contains\n+  subroutine f (i, j, a)\n+    implicit none\n+    integer :: i, j, a\n+    integer :: x, y\n+    integer, parameter :: c = 3\n+    integer, external :: g\n+\n+    !$acc parallel\n+    !$acc loop collapse(2) private(a) private(x, y) ! { dg-line l_loop[incr c_loop] }\n+    do i = 1, 20\n+       do j = 1, 25\n+          ! Can't have nested scopes fun.  (Fortran 'block' construct supported only starting with OpenACC 3.1.)\n+\n+          ! Don't know how to effect a 'LABEL_DECL' here.\n+          ! Don't know how to effect a 'TYPE_DECL' here.\n+          ! Don't know how to effect a 'FUNCTION_DECL' here.\n+          ! Don't know how to effect a 'RESULT_DECL' here.\n+          ! Don't know how to effect a 'VAR_DECL' here.\n+          ! (See C/C++ example.)\n+\n+          a = g (i, j, a, c)\n+          x = a\n+          !$acc atomic write\n+          y = a\n+       end do\n+    end do\n+    ! { dg-note {variable 'count\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'i' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'j' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'a' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'y' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'y' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop }\n+    !$acc end parallel\n+  end subroutine f\n+end module m"}, {"sha": "ed7e9ec64379cd369168d799c9e656deb1105cf9", "filename": "gcc/testsuite/gfortran.dg/goacc/privatization-1-compute.f90", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-compute.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-compute.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-compute.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -0,0 +1,48 @@\n+! OpenACC privatization: compute construct\n+\n+! { dg-additional-options \"-fopt-info-omp-note\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" } for\n+! testing/documenting aspects of that functionality.\n+\n+! See also '../../c-c++-common/goacc/privatization-1-compute.c'.\n+!TODO More cases should be added here.\n+\n+! It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n+! passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n+! so to maintain compatibility with earlier Tcl releases, we manually\n+! initialize counter variables:\n+! { dg-line l_dummy[variable c_compute 0] }\n+! { dg-message \"dummy\" \"\" { target iN-VAl-Id } l_dummy } to avoid\n+! \"WARNING: dg-line var l_dummy defined, but not used\".\n+\n+module m\n+contains\n+  subroutine f (i, j, a)\n+    implicit none\n+    integer :: i, j, a\n+    integer :: x, y\n+    integer, parameter :: c = 3\n+    integer, external :: g\n+\n+    !$acc parallel private(i, j, a) private(x, y) ! { dg-line l_compute[incr c_compute] }\n+          ! Can't have nested scopes fun.  (Fortran 'block' construct supported only starting with OpenACC 3.1.)\n+\n+          ! Don't know how to effect a 'LABEL_DECL' here.\n+          ! Don't know how to effect a 'TYPE_DECL' here.\n+          ! Don't know how to effect a 'FUNCTION_DECL' here.\n+          ! Don't know how to effect a 'RESULT_DECL' here.\n+          ! Don't know how to effect a 'VAR_DECL' here.\n+          ! (See C/C++ example.)\n+\n+          a = g (i, j, a, c)\n+          x = a\n+          !$acc atomic write ! ... to force 'TREE_ADDRESSABLE'.\n+          y = a\n+    !$acc end parallel\n+    ! { dg-note {variable 'i' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { xfail *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'j' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { xfail *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'a' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { xfail *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+  end subroutine f\n+end module m"}, {"sha": "db6d8226ed02b1b45e969caec7b2fdfe613f29e2", "filename": "gcc/testsuite/gfortran.dg/goacc/privatization-1-routine_gang-loop.f90", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-routine_gang-loop.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-routine_gang-loop.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-routine_gang-loop.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -0,0 +1,56 @@\n+! OpenACC privatization: 'loop' construct inside 'routine'\n+\n+! { dg-additional-options \"-fopt-info-omp-note\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" } for\n+! testing/documenting aspects of that functionality.\n+\n+! See also '../../c-c++-common/goacc/privatization-1-routine_gang-loop.c'.\n+!TODO More cases should be added here.\n+\n+! It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n+! passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n+! so to maintain compatibility with earlier Tcl releases, we manually\n+! initialize counter variables:\n+! { dg-line l_dummy[variable c_loop 0] }\n+! { dg-message \"dummy\" \"\" { target iN-VAl-Id } l_dummy } to avoid\n+! \"WARNING: dg-line var l_dummy defined, but not used\".\n+\n+module m\n+contains\n+  subroutine f (i, j, a)\n+    implicit none\n+    integer :: i, j, a\n+    !$acc routine (f) gang\n+    integer :: x, y\n+    integer, parameter :: c = 3\n+    integer, external :: g\n+\n+    !$acc loop collapse(2) private(a) private(x, y) ! { dg-line l_loop[incr c_loop] }\n+    do i = 1, 20\n+       do j = 1, 25\n+          ! Can't have nested scopes fun.  (Fortran 'block' construct supported only starting with OpenACC 3.1.)\n+\n+          ! Don't know how to effect a 'LABEL_DECL' here.\n+          ! Don't know how to effect a 'TYPE_DECL' here.\n+          ! Don't know how to effect a 'FUNCTION_DECL' here.\n+          ! Don't know how to effect a 'RESULT_DECL' here.\n+          ! Don't know how to effect a 'VAR_DECL' here.\n+          ! (See C/C++ example.)\n+\n+          a = g (i, j, a, c)\n+          x = a\n+          !$acc atomic write\n+          y = a\n+       end do\n+    end do\n+    ! { dg-note {variable 'count\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'i' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'j' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'a' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'y' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'y' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop }\n+  end subroutine f\n+end module m"}, {"sha": "725bd5e2ebe9ac532df425b50062766d7e4bdcad", "filename": "gcc/testsuite/gfortran.dg/goacc/privatization-1-routine_gang.f90", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-routine_gang.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-routine_gang.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-routine_gang.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -0,0 +1,47 @@\n+! OpenACC privatization: 'routine'\n+\n+! { dg-additional-options \"-fopt-info-omp-note\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" } for\n+! testing/documenting aspects of that functionality.\n+\n+! See also '../../c-c++-common/goacc/privatization-1-routine_gang.c'.\n+!TODO More cases should be added here.\n+\n+! It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n+! passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n+! so to maintain compatibility with earlier Tcl releases, we manually\n+! initialize counter variables:\n+! { dg-line l_dummy[variable c_routine 0] }\n+! { dg-message \"dummy\" \"\" { target iN-VAl-Id } l_dummy } to avoid\n+! \"WARNING: dg-line var l_dummy defined, but not used\".\n+\n+module m\n+contains\n+  subroutine f (i, j, a)\n+    implicit none\n+    integer :: i, j, a\n+    !$acc routine (f) gang ! { dg-line l_routine[incr c_routine] }\n+    integer :: x, y\n+    integer, parameter :: c = 3\n+    integer, external :: g\n+\n+          ! Can't have nested scopes fun.  (Fortran 'block' construct supported only starting with OpenACC 3.1.)\n+\n+          ! Don't know how to effect a 'LABEL_DECL' here.\n+          ! Don't know how to effect a 'TYPE_DECL' here.\n+          ! Don't know how to effect a 'FUNCTION_DECL' here.\n+          ! Don't know how to effect a 'RESULT_DECL' here.\n+          ! Don't know how to effect a 'VAR_DECL' here.\n+          ! (See C/C++ example.)\n+\n+          a = g (i, j, a, c)\n+          x = a\n+          !$acc atomic write ! ... to force 'TREE_ADDRESSABLE'.\n+          y = a\n+  end subroutine f\n+    ! { dg-note {variable 'i' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n+    ! { dg-note {variable 'j' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n+    ! { dg-note {variable 'a' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n+    ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n+    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n+end module m"}, {"sha": "fff0c28e8ad7f57db4b7133cc1326665320af7cd", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/firstprivate-1.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-1.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n /* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n    aspects of that functionality.  */\n \n@@ -15,9 +21,11 @@ void t1 ()\n     ary[i] = ~0;\n   \n #pragma acc parallel num_gangs (32) copy (ok) firstprivate (val) copy(ary, ondev)\n+  /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   {\n     ondev = acc_on_device (acc_device_not_host);\n #pragma acc loop gang(static:1)\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n     for (unsigned i = 0; i < 32; i++)\n       {\n \tif (val != 2)\n@@ -79,6 +87,7 @@ void t3 ()\n \n   #pragma acc parallel num_gangs (n) firstprivate (a)\n   #pragma acc loop gang\n+  /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   for (i = 0; i < n; i++)\n     {\n       a = a + i;\n@@ -124,6 +133,7 @@ void t4 ()\n   /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n   {\n #pragma acc loop gang\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n     for (i = 0; i < 32; i++)\n       arr[i] += x;\n   }"}, {"sha": "66501e614fbc0a9b216fac79a4dfd5045096398b", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/host_data-7.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-7.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,6 +1,11 @@\n-/* { dg-do run } */\n-\n /* Test if, if_present clauses on host_data construct.  */\n+\n+/* { dg-additional-options \"-fopt-info-all-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-all-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n /* C/C++ variant of 'libgomp.oacc-fortran/host_data-5.F90' */\n \n #include <assert.h>\n@@ -14,15 +19,19 @@ foo (float *p, intptr_t host_p, int cond)\n #pragma acc data copyin(host_p)\n   {\n #pragma acc host_data use_device(p) if_present\n+    /* { dg-note {variable 'host_p\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n     /* p not mapped yet, so it will be equal to the host pointer.  */\n     assert (p == (float *) host_p);\n \n #pragma acc data copy(p[0:100])\n+    /* { dg-note {variable 'host_p\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+    /* { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n     {\n       /* Not inside a host_data construct, so p is still the host pointer.  */\n       assert (p == (float *) host_p);\n \n #pragma acc host_data use_device(p)\n+      /* { dg-note {variable 'host_p\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n       {\n #if ACC_MEM_SHARED\n \tassert (p == (float *) host_p);\n@@ -33,6 +42,7 @@ foo (float *p, intptr_t host_p, int cond)\n       }\n \n #pragma acc host_data use_device(p) if_present\n+      /* { dg-note {variable 'host_p\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n       {\n #if ACC_MEM_SHARED\n \tassert (p == (float *) host_p);\n@@ -43,6 +53,8 @@ foo (float *p, intptr_t host_p, int cond)\n       }\n \n #pragma acc host_data use_device(p) if(cond)\n+      /* { dg-note {variable 'host_p\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+      /* { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target { ! openacc_host_selected } } .-2 } */\n       {\n #if ACC_MEM_SHARED\n \tassert (p == (float *) host_p);"}, {"sha": "e08cfa56e3c92585f0d9737b14d166ec0dabe842", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-decompose-1.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-decompose-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-decompose-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-decompose-1.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -3,11 +3,17 @@\n /* { dg-additional-options \"-fopt-info-omp-all\" } */\n /* { dg-additional-options \"--param=openacc-kernels=decompose\" } */\n \n+/* { dg-additional-options \"-fopt-info-all-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-all-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n /* It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n    passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n    so to maintain compatibility with earlier Tcl releases, we manually\n    initialize counter variables:\n-   { dg-line l_dummy[variable c_loop_i 0] }\n+   { dg-line l_dummy[variable c_compute 0 c_loop_i 0] }\n    { dg-message \"dummy\" \"\" { target iN-VAl-Id } l_dummy } to avoid\n    \"WARNING: dg-line var l_dummy defined, but not used\".  */\n \n@@ -22,15 +28,19 @@ int main()\n #define N 123\n   int b[N] = { 0 };\n \n-#pragma acc kernels\n+#pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n   {\n     int c = 234; /* { dg-message \"note: beginning 'gang-single' part in OpenACC 'kernels' region\" } */\n+    /* { dg-note {variable 'c' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'c\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n \n     /*TODO Hopefully, this is the same issue as '../../../gcc/testsuite/c-c++-common/goacc/kernels-decompose-ice-1.c'.  */\n     (volatile int *) &c;\n \n #pragma acc loop independent gang /* { dg-line l_loop_i[incr c_loop_i] } */\n     /* { dg-message \"note: parallelized loop nest in OpenACC 'kernels' region\" \"\" { target *-*-* } l_loop_i$c_loop_i } */\n+    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop_i$c_loop_i } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop_i$c_loop_i } */\n     /* { dg-optimized \"assigned OpenACC gang loop parallelism\" \"\" { target *-*-* } l_loop_i$c_loop_i } */\n     for (int i = 0; i < N; ++i)\n       b[i] = c;"}, {"sha": "f28513dd2083de68c07dec60a8f9906490a07af0", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-1.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-1.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <assert.h>\n \n /* Test of worker-private variables declared in a local scope, broadcasting\n@@ -12,30 +18,40 @@ main (int argc, char* argv[])\n     arr[i] = i;\n \n   #pragma acc kernels copy(arr)\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   {\n     int j;\n \n     #pragma acc loop gang(num:32)\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n     for (i = 0; i < 32; i++)\n       {\n \t#pragma acc loop worker(num:32)\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+\t/* { dg-note {variable 'x' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \t    int x = i ^ j * 3;\n \n \t    #pragma acc loop vector(length:32)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += x * k;\n \t  }\n \n \t#pragma acc loop worker(num:32)\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+\t/* { dg-note {variable 'x' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \t    int x = i | j * 5;\n \t    \n \t    #pragma acc loop vector(length:32)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += x * k;\n \t  }"}, {"sha": "21f25114d687bdc0c3cd7b06d6901b48d9b5224b", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-2.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-2.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <assert.h>\n \n /* Test of worker-private variables declared in a local scope, broadcasting\n@@ -12,25 +18,32 @@ main (int argc, char* argv[])\n     arr[i] = i;\n \n   #pragma acc kernels copy(arr)\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   {\n     int j;\n \n     #pragma acc loop gang(num:32)\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n     for (i = 0; i < 32; i++)\n       {\n         #pragma acc loop worker(num:32)\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+\t/* { dg-note {variable 'x' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \t    int x = i ^ j * 3;\n \n \t    #pragma acc loop vector(length:32)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += x * k;\n \t    \n \t    x = i | j * 5;\n \t    \n \t    #pragma acc loop vector(length:32)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += x * k;\n \t  }"}, {"sha": "8b4cde87ce9f70220d5efc374648a7fba9151220", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-3.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-3.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <assert.h>\n \n /* Test of worker-private variables declared in a local scope, broadcasting\n@@ -17,13 +23,18 @@ main (int argc, char* argv[])\n     arr[i] = i;\n \n   #pragma acc kernels copy(arr)\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   {\n     int j;\n \n     #pragma acc loop gang(num:32)\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n     for (i = 0; i < 32; i++)\n       {\n         #pragma acc loop worker(num:32)\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+\t/* { dg-note {variable 'pt' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n@@ -33,10 +44,12 @@ main (int argc, char* argv[])\n \t    pt.y = i | j * 5;\n \n \t    #pragma acc loop vector(length:32)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += pt.x * k;\n \t    \n \t    #pragma acc loop vector(length:32)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += pt.y * k;\n \t  }"}, {"sha": "a658d1672368c29b722e7eb69d0bf1578036c205", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-4.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-4.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <assert.h>\n \n /* Test of worker-private variables declared in a local scope, broadcasting\n@@ -17,13 +23,19 @@ main (int argc, char* argv[])\n     arr[i] = i;\n \n   #pragma acc kernels copy(arr)\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   {\n     int j;\n \n     #pragma acc loop gang(num:32)\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n     for (i = 0; i < 32; i++)\n       {\n         #pragma acc loop worker(num:32)\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+\t/* { dg-note {variable 'pt' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-3 } */\n+\t/* { dg-note {variable 'ptp' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n@@ -34,12 +46,14 @@ main (int argc, char* argv[])\n \t    pt.x = i ^ j * 3;\n \n \t    #pragma acc loop vector(length:32)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += ptp->x * k;\n \n \t    ptp->y = i | j * 5;\n \t    \n \t    #pragma acc loop vector(length:32)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += pt.y * k;\n \t  }"}, {"sha": "b82b9bf210afab6a524dc62c9e113e959e9d0feb", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-5.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-5.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <assert.h>\n \n /* Test of worker-private variables declared in a local scope, broadcasting\n@@ -12,13 +18,18 @@ main (int argc, char* argv[])\n     arr[i] = i;\n \n   #pragma acc kernels copy(arr)\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   {\n     int j;\n \n     #pragma acc loop gang(num:32)\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n     for (i = 0; i < 32; i++)\n       {\n         #pragma acc loop worker(num:32)\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+\t/* { dg-note {variable 'pt' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n@@ -27,12 +38,14 @@ main (int argc, char* argv[])\n \t    pt[0] = i ^ j * 3;\n \n \t    #pragma acc loop vector(length:32)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += pt[0] * k;\n \n \t    pt[1] = i | j * 5;\n \t    \n \t    #pragma acc loop vector(length:32)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += pt[1] * k;\n \t  }"}, {"sha": "38d89c726ca04b2f8685420d0cee89ebb996d62b", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-1.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-1.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <assert.h>\n \n /* Test of gang-private variables declared on loop directive.  */\n@@ -13,6 +19,8 @@ main (int argc, char* argv[])\n   #pragma acc kernels copy(arr)\n   {\n     #pragma acc loop gang(num:32) private(x)\n+    /* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n     for (i = 0; i < 32; i++)\n       {\n \tx = i * 2;"}, {"sha": "62dd12fb790ce2d97506d36782e7afc4f1e9c350", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-2.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-2.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <assert.h>\n \n /* Test of gang-private variables declared on loop directive, with broadcasting\n@@ -14,11 +20,15 @@ main (int argc, char* argv[])\n   #pragma acc kernels copy(arr)\n   {\n     #pragma acc loop gang(num:32) private(x)\n+    /* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+    /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n     for (i = 0; i < 32; i++)\n       {\n \tx = i * 2;\n \n \t#pragma acc loop worker(num:32)\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \tfor (int j = 0; j < 32; j++)\n \t  arr[i * 32 + j] += x;\n       }"}, {"sha": "c22c3b43e3104989f9b9f48abb73081e57e5ad5d", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-3.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-3.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <assert.h>\n \n /* Test of gang-private variables declared on loop directive, with broadcasting\n@@ -14,11 +20,15 @@ main (int argc, char* argv[])\n   #pragma acc kernels copy(arr)\n   {\n     #pragma acc loop gang(num:32) private(x)\n+    /* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+    /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n     for (i = 0; i < 32; i++)\n       {\n \tx = i * 2;\n \n \t#pragma acc loop vector(length:32)\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \tfor (int j = 0; j < 32; j++)\n \t  arr[i * 32 + j] += x;\n       }"}, {"sha": "27a8e804129fe6f2e44204385d684061d520a616", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-4.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-4.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <assert.h>\n \n /* Test of gang-private addressable variable declared on loop directive, with\n@@ -14,13 +20,18 @@ main (int argc, char* argv[])\n   #pragma acc kernels copy(arr)\n   {\n     #pragma acc loop gang(num:32) private(x)\n+    /* { dg-note {variable 'x' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-1 } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+    /* { dg-note {variable 'p' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n+    /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 } */\n     for (i = 0; i < 32; i++)\n       {\n         int *p = &x;\n \n \tx = i * 2;\n \n \t#pragma acc loop worker(num:32)\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \tfor (int j = 0; j < 32; j++)\n \t  arr[i * 32 + j] += x;\n "}, {"sha": "f570c222940e0de94bfab22ce9e43d702c9f5a0d", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-5.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-5.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <assert.h>\n \n /* Test of gang-private array variable declared on loop directive, with\n@@ -14,12 +20,16 @@ main (int argc, char* argv[])\n   #pragma acc kernels copy(arr)\n   {\n     #pragma acc loop gang(num:32) private(x)\n+    /* { dg-note {variable 'x' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-1 } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+    /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n     for (i = 0; i < 32; i++)\n       {\n         for (int j = 0; j < 8; j++)\n \t  x[j] = j * 2;\n \n \t#pragma acc loop worker(num:32)\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \tfor (int j = 0; j < 32; j++)\n \t  arr[i * 32 + j] += x[j % 8];\n       }"}, {"sha": "5b776f18f72015c4d970aba776f7ca01d395f89a", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-6.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-6.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <assert.h>\n \n /* Test of gang-private aggregate variable declared on loop directive, with\n@@ -20,6 +26,9 @@ main (int argc, char* argv[])\n   #pragma acc kernels copy(arr)\n   {\n     #pragma acc loop gang private(pt)\n+    /* { dg-note {variable 'pt' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+    /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n     for (i = 0; i < 32; i++)\n       {\n         pt.x = i;\n@@ -28,6 +37,7 @@ main (int argc, char* argv[])\n \tpt.attr[5] = i * 6;\n \n \t#pragma acc loop worker\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \tfor (int j = 0; j < 32; j++)\n \t  arr[i * 32 + j] += pt.x + pt.y + pt.z + pt.attr[5];\n       }"}, {"sha": "696da0f204facbc77b93786708c886cac863717c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-vector-1.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-vector-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-vector-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-vector-1.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <assert.h>\n \n /* Test of vector-private variables declared on loop directive.  */\n@@ -11,25 +17,33 @@ main (int argc, char* argv[])\n     arr[i] = i;\n \n   #pragma acc kernels copy(arr)\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   {\n     int j;\n \n     #pragma acc loop gang(num:32)\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n     for (i = 0; i < 32; i++)\n       {\n         #pragma acc loop worker(num:32)\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \n \t    #pragma acc loop vector(length:32) private(x)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+\t    /* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n \t    for (k = 0; k < 32; k++)\n \t      {\n \t\tx = i ^ j * 3;\n \t\tarr[i * 1024 + j * 32 + k] += x * k;\n \t      }\n \n \t    #pragma acc loop vector(length:32) private(x)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+\t    /* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n \t    for (k = 0; k < 32; k++)\n \t      {\n \t\tx = i | j * 5;"}, {"sha": "2e3b635b0233ecc289a90c90b9b50a3fec729458", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-vector-2.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-vector-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-vector-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-vector-2.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <assert.h>\n \n /* Test of vector-private variables declared on loop directive. Array type.  */\n@@ -11,18 +17,24 @@ main (int argc, char* argv[])\n     arr[i] = i;\n \n   #pragma acc kernels copy(arr)\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   {\n     int j;\n \n     #pragma acc loop gang(num:32)\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n     for (i = 0; i < 32; i++)\n       {\n         #pragma acc loop worker(num:32)\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \n \t    #pragma acc loop vector(length:32) private(pt)\n+\t    /* { dg-note {variable 'pt' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n \t    for (k = 0; k < 32; k++)\n \t      {\n \t        pt[0] = i ^ j * 3;"}, {"sha": "1aedc7964e2188a4ebcd3d3bc96923f0be062742", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-1.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-1.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <assert.h>\n \n /* Test of worker-private variables declared on a loop directive.  */\n@@ -11,13 +17,17 @@ main (int argc, char* argv[])\n     arr[i] = i;\n \n   #pragma acc kernels copy(arr)\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   {\n     int j;\n \n     #pragma acc loop gang(num:32)\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n     for (i = 0; i < 32; i++)\n       {\n         #pragma acc loop worker(num:32) private(x)\n+\t/* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    x = i ^ j * 3;"}, {"sha": "3bf62aae17405a90b996e299b49e5020e405e144", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-2.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-2.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <assert.h>\n \n /* Test of worker-private variables declared on a loop directive, broadcasting\n@@ -12,19 +18,25 @@ main (int argc, char* argv[])\n     arr[i] = i;\n \n   #pragma acc kernels copy(arr)\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   {\n     int j;\n \n     #pragma acc loop gang(num:32)\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n     for (i = 0; i < 32; i++)\n       {\n         #pragma acc loop worker(num:32) private(x)\n+\t/* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \t    x = i ^ j * 3;\n \n \t    #pragma acc loop vector(length:32)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += x * k;\n \t  }"}, {"sha": "8de551635ea9482048d2b7401171bf3ddb34f9d3", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-3.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-3.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <assert.h>\n \n /* Test of worker-private variables declared on a loop directive, broadcasting\n@@ -12,30 +18,40 @@ main (int argc, char* argv[])\n     arr[i] = i;\n \n   #pragma acc kernels copy(arr)\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   {\n     int j;\n \n     #pragma acc loop gang(num:32)\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n     for (i = 0; i < 32; i++)\n       {\n         #pragma acc loop worker(num:32) private(x)\n+\t/* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \t    x = i ^ j * 3;\n \n \t    #pragma acc loop vector(length:32)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += x * k;\n \t  }\n \n \t#pragma acc loop worker(num:32) private(x)\n+\t/* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \t    x = i | j * 5;\n \t    \n \t    #pragma acc loop vector(length:32)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += x * k;\n \t  }"}, {"sha": "425fe6321fa849aee0c63bb1d476b51ebfd41284", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-4.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-4.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <assert.h>\n \n /* Test of worker-private variables declared on a loop directive, broadcasting\n@@ -12,25 +18,32 @@ main (int argc, char* argv[])\n     arr[i] = i;\n \n   #pragma acc kernels copy(arr)\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   {\n     int j;\n \n     #pragma acc loop gang(num:32)\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n     for (i = 0; i < 32; i++)\n       {\n         #pragma acc loop worker(num:32) private(x)\n+\t/* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \t    x = i ^ j * 3;\n \n \t    #pragma acc loop vector(length:32)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += x * k;\n \t    \n \t    x = i | j * 5;\n \t    \n \t    #pragma acc loop vector(length:32)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += x * k;\n \t  }"}, {"sha": "c027c024b9c8c11c70600a9c5141d4f62c340d2f", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-5.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-5.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <assert.h>\n \n /* Test of worker-private variables declared on a loop directive, broadcasting\n@@ -12,13 +18,19 @@ main (int argc, char* argv[])\n     arr[i] = i;\n \n   #pragma acc kernels copy(arr)\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   {\n     int j;\n \n     #pragma acc loop gang(num:32)\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n     for (i = 0; i < 32; i++)\n       {\n         #pragma acc loop worker(num:32) private(x)\n+\t/* { dg-note {variable 'x' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-1 } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n+\t/* { dg-note {variable 'p' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n@@ -27,12 +39,14 @@ main (int argc, char* argv[])\n \t    x = i ^ j * 3;\n \n \t    #pragma acc loop vector(length:32)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += x * k;\n \t    \n \t    *p = i | j * 5;\n \t    \n \t    #pragma acc loop vector(length:32)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += x * k;\n \t  }"}, {"sha": "4f17566f8f9717f2c1d9806bace5d86bbb874f97", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-6.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-6.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <assert.h>\n \n /* Test of worker-private variables declared on a loop directive, broadcasting\n@@ -18,13 +24,18 @@ main (int argc, char* argv[])\n     arr[i] = i;\n \n   #pragma acc kernels copy(arr)\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   {\n     int j;\n \n     #pragma acc loop gang(num:32)\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n     for (i = 0; i < 32; i++)\n       {\n         #pragma acc loop worker(num:32) private(pt)\n+\t/* { dg-note {variable 'pt' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n@@ -33,10 +44,12 @@ main (int argc, char* argv[])\n \t    pt.y = i | j * 5;\n \n \t    #pragma acc loop vector(length:32)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += pt.x * k;\n \t    \n \t    #pragma acc loop vector(length:32)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += pt.y * k;\n \t  }"}, {"sha": "12b4c548156af4d0bb13dccc0a65d657e768bdff", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-7.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-7.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <assert.h>\n \n /* Test of worker-private variables declared on loop directive, broadcasting\n@@ -15,27 +21,34 @@ main (int argc, char* argv[])\n   /* \"pt\" is treated as \"present_or_copy\" on the kernels directive because it\n      is an array variable.  */\n   #pragma acc kernels copy(arr)\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   {\n     int j;\n \n     #pragma acc loop gang(num:32)\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n     for (i = 0; i < 32; i++)\n       {\n         /* But here, it is made private per-worker.  */\n         #pragma acc loop worker(num:32) private(pt)\n+\t/* { dg-note {variable 'pt' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \t    \n \t    pt[0] = i ^ j * 3;\n \n \t    #pragma acc loop vector(length:32)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += pt[0] * k;\n \n \t    pt[1] = i | j * 5;\n \t    \n \t    #pragma acc loop vector(length:32)\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += pt[1] * k;\n \t  }"}, {"sha": "12272add4719cc646689164cbdc19943f1a621bd", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-g-1.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-g-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-g-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-g-1.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <stdio.h>\n #include <openacc.h>\n #include <gomp-constants.h>\n@@ -14,8 +20,13 @@ int main ()\n     ary[ix] = -1;\n   \n #pragma acc parallel num_gangs(32) copy(ary) copy(ondev)\n+  /* { dg-note {variable 'ix' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   {\n #pragma acc loop gang\n+    /* { dg-note {variable 'ix' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+    /* { dg-note {variable 'g' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+    /* { dg-note {variable 'w' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n+    /* { dg-note {variable 'v' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 } */\n     for (unsigned ix = 0; ix < N; ix++)\n       {\n \tif (acc_on_device (acc_device_not_host))"}, {"sha": "683bd12627902227e011434a9a8518b674e37d94", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-g-2.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-g-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-g-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-g-2.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <stdio.h>\n #include <openacc.h>\n #include <gomp-constants.h>\n@@ -14,8 +20,13 @@ int main ()\n     ary[ix] = -1;\n   \n #pragma acc parallel num_gangs(32) copy(ary) copy(ondev)\n+  /* { dg-note {variable 'ix' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   {\n #pragma acc loop gang (static:1)\n+    /* { dg-note {variable 'ix' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+    /* { dg-note {variable 'g' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+    /* { dg-note {variable 'w' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n+    /* { dg-note {variable 'v' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 } */\n     for (unsigned ix = 0; ix < N; ix++)\n       {\n \tif (acc_on_device (acc_device_not_host))"}, {"sha": "e5ed2ab70062e3ce8f7f3cff2a4cac0dcd152553", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-gwv-1.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-gwv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-gwv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-gwv-1.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <stdio.h>\n #include <openacc.h>\n #include <gomp-constants.h>\n@@ -16,8 +22,13 @@ int main ()\n   \n #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n \t    copy(ary) copy(ondev) copyout(gangsize, workersize, vectorsize)\n+  /* { dg-note {variable 'ix' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n   {\n #pragma acc loop gang worker vector\n+    /* { dg-note {variable 'ix' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+    /* { dg-note {variable 'g' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+    /* { dg-note {variable 'w' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n+    /* { dg-note {variable 'v' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 } */\n     for (unsigned ix = 0; ix < N; ix++)\n       {\n \tif (acc_on_device (acc_device_not_host))"}, {"sha": "cb3878b8d4e41d4491f51c49a1769126b983a48c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-gwv-2.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-gwv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-gwv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-gwv-2.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <stdio.h>\n #include <openacc.h>\n #include <alloca.h>\n@@ -49,8 +55,13 @@ int main ()\n \n #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n \t    copy(ary) copyout(gangsize, workersize, vectorsize)\n+  /* { dg-note {variable 'ix' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n   {\n #pragma acc loop gang worker vector\n+    /* { dg-note {variable 'ix' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+    /* { dg-note {variable 'g' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+    /* { dg-note {variable 'w' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n+    /* { dg-note {variable 'v' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 } */\n     for (unsigned ix = 0; ix < N; ix++)\n       {\n \tint g, w, v;"}, {"sha": "0c8402703e7a04364041ba3834f55002100e0232", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-g-1.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-g-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-g-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-g-1.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <stdio.h>\n #include <openacc.h>\n #include <gomp-constants.h>\n@@ -10,8 +16,14 @@ int main ()\n   int t = 0, h = 0;\n   \n #pragma acc parallel num_gangs(32) copy(ondev)\n+  /* { dg-note {variable 'ix' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   {\n #pragma acc loop gang  reduction (+:t)\n+    /* { dg-note {variable 'ix' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+    /* { dg-note {variable 'val' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+    /* { dg-note {variable 'g' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n+    /* { dg-note {variable 'w' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 } */\n+    /* { dg-note {variable 'v' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-5 } */\n     for (unsigned ix = 0; ix < N; ix++)\n       {\n \tint val = ix;"}, {"sha": "c1a2d0cffe1193ac74970840339e787ddc883532", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-gwv-1.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-gwv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-gwv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-gwv-1.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <stdio.h>\n #include <openacc.h>\n #include <gomp-constants.h>\n@@ -12,8 +18,14 @@ int main ()\n \n #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n \tcopy(ondev) copyout(gangsize, workersize, vectorsize)\n+  /* { dg-note {variable 'ix' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n   {\n #pragma acc loop gang worker vector reduction(+:t)\n+    /* { dg-note {variable 'ix' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+    /* { dg-note {variable 'val' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+    /* { dg-note {variable 'g' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n+    /* { dg-note {variable 'w' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 } */\n+    /* { dg-note {variable 'v' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-5 } */\n     for (unsigned ix = 0; ix < N; ix++)\n       {\n \tint val = ix;"}, {"sha": "58c7b6ab57fa6216dfe1920c7d7f3c9a26f3cf29", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-v-1.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-1.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <stdio.h>\n #include <openacc.h>\n #include <gomp-constants.h>\n@@ -12,8 +18,14 @@ int main ()\n   int vectorsize;\n \n #pragma acc parallel vector_length(32) copy(ondev) copyout(vectorsize)\n+  /* { dg-note {variable 'ix' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   {\n #pragma acc loop vector reduction (+:t)\n+    /* { dg-note {variable 'ix' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+    /* { dg-note {variable 'val' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+    /* { dg-note {variable 'g' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n+    /* { dg-note {variable 'w' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 } */\n+    /* { dg-note {variable 'v' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-5 } */\n     for (unsigned ix = 0; ix < N; ix++)\n       {\n \tint val = ix;"}, {"sha": "85931f5e43348610402759c0ff77ac4161a42738", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-v-2.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-2.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <stdio.h>\n #include <openacc.h>\n #include <gomp-constants.h>\n@@ -12,10 +18,17 @@ int main ()\n   int vectorsize;\n \n #pragma acc parallel vector_length(32) copy(q) copy(ondev) copyout(vectorsize)\n+  /* { dg-note {variable 't' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+  /* { dg-note {variable 'ix' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n   {\n     int t = q;\n     \n #pragma acc loop vector reduction (+:t)\n+    /* { dg-note {variable 'ix' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+    /* { dg-note {variable 'val' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+    /* { dg-note {variable 'g' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n+    /* { dg-note {variable 'w' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 } */\n+    /* { dg-note {variable 'v' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-5 } */\n     for (unsigned ix = 0; ix < N; ix++)\n       {\n \tint val = ix;"}, {"sha": "b9ceec9887da4f03c74eaf52f57dcb5d4813fece", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-w-1.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-1.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n /* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n    aspects of that functionality.  */\n \n@@ -15,9 +21,15 @@ int main ()\n \n #pragma acc parallel num_workers(32) vector_length(32) copy(ondev) \\\n \t    copyout(workersize)\n-  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n+  /* { dg-note {variable 'ix' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-3 } */\n   {\n #pragma acc loop worker reduction(+:t)\n+    /* { dg-note {variable 'ix' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+    /* { dg-note {variable 'val' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+    /* { dg-note {variable 'g' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n+    /* { dg-note {variable 'w' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 } */\n+    /* { dg-note {variable 'v' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-5 } */\n     for (unsigned ix = 0; ix < N; ix++)\n       {\n \tint val = ix;"}, {"sha": "ff5e4a1656bab25443498862639965fcf3f5be39", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-w-2.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-2.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n /* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n    aspects of that functionality.  */\n \n@@ -15,11 +21,18 @@ int main ()\n \n #pragma acc parallel num_workers(32) vector_length(32) copy(q) copy(ondev) \\\n \t    copyout(workersize)\n-  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n+  /* { dg-note {variable 't' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+  /* { dg-note {variable 'ix' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-4 } */\n   {\n     int t = q;\n     \n #pragma acc loop worker reduction(+:t)\n+    /* { dg-note {variable 'ix' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+    /* { dg-note {variable 'val' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+    /* { dg-note {variable 'g' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n+    /* { dg-note {variable 'w' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 } */\n+    /* { dg-note {variable 'v' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-5 } */\n     for (unsigned ix = 0; ix < N; ix++)\n       {\n \tint val = ix;"}, {"sha": "5d60899acc10ffad9518b48f74bf39c98efe04ab", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-wv-1.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-wv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-wv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-wv-1.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <stdio.h>\n #include <openacc.h>\n #include <gomp-constants.h>\n@@ -12,8 +18,14 @@ int main ()\n   \n #pragma acc parallel num_workers(32) vector_length(32) copy(ondev) \\\n \t    copyout(workersize, vectorsize)\n+  /* { dg-note {variable 'ix' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n   {\n #pragma acc loop worker vector reduction (+:t)\n+    /* { dg-note {variable 'ix' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+    /* { dg-note {variable 'val' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+    /* { dg-note {variable 'g' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n+    /* { dg-note {variable 'w' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 } */\n+    /* { dg-note {variable 'v' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-5 } */\n     for (unsigned ix = 0; ix < N; ix++)\n       {\n \tint val = ix;"}, {"sha": "9ccc1a89b13ccf004f2ad26fd89fd8ee51cf6198", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-v-1.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-v-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-v-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-v-1.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <stdio.h>\n #include <openacc.h>\n #include <gomp-constants.h>\n@@ -16,8 +22,13 @@ int main ()\n   \n #pragma acc parallel vector_length(32) copy(ary) copy(ondev) \\\n \t    copyout(vectorsize)\n+  /* { dg-note {variable 'ix' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n   {\n #pragma acc loop vector\n+    /* { dg-note {variable 'ix' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+    /* { dg-note {variable 'g' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+    /* { dg-note {variable 'w' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n+    /* { dg-note {variable 'v' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 } */\n     for (unsigned ix = 0; ix < N; ix++)\n       {\n \tif (acc_on_device (acc_device_not_host))"}, {"sha": "0e99ec6203859c5b75f276da7a7e3b0f7ac53730", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-w-1.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-w-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-w-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-w-1.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n /* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n    aspects of that functionality.  */\n \n@@ -19,9 +25,14 @@ int main ()\n   \n #pragma acc parallel num_workers(32) vector_length(32) copy(ary) copy(ondev) \\\n \t    copyout(workersize)\n-  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"vector\" { target *-*-* } .-2 } */\n+  /* { dg-note {variable 'ix' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"vector\" { target *-*-* } .-3 } */\n   {\n #pragma acc loop worker\n+    /* { dg-note {variable 'ix' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+    /* { dg-note {variable 'g' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+    /* { dg-note {variable 'w' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n+    /* { dg-note {variable 'v' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 } */\n     for (unsigned ix = 0; ix < N; ix++)\n       {\n \tif (acc_on_device (acc_device_not_host))"}, {"sha": "f4707d153944a29864ac41967672b30b539beb39", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-wv-1.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-wv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-wv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-wv-1.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <stdio.h>\n #include <openacc.h>\n #include <gomp-constants.h>\n@@ -16,8 +22,13 @@ int main ()\n   \n #pragma acc parallel num_workers(32) vector_length(32) copy(ary) copy(ondev) \\\n \t    copyout(workersize, vectorsize)\n+  /* { dg-note {variable 'ix' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n   {\n #pragma acc loop worker vector\n+    /* { dg-note {variable 'ix' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+    /* { dg-note {variable 'g' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n+    /* { dg-note {variable 'w' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 } */\n+    /* { dg-note {variable 'v' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 } */\n     for (unsigned ix = 0; ix < N; ix++)\n       {\n \tif (acc_on_device (acc_device_not_host))"}, {"sha": "f88babce5d6d48a487b601235bf8df56988c6835", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/parallel-reduction.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-reduction.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n /* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n    aspects of that functionality.  */\n \n@@ -63,6 +69,7 @@ main ()\n #pragma acc parallel num_gangs (10) reduction (+:s1) copy(s1)\n   {\n #pragma acc loop gang reduction (+:s1)\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n     for (i = 0; i < 10; i++)\n       s1++;\n   }"}, {"sha": "2c1ffb15be1be63987318608f4541ff2c50fba8c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/private-atomic-1-gang.c", "status": "modified", "additions": 73, "deletions": 12, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fprivate-atomic-1-gang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fprivate-atomic-1-gang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fprivate-atomic-1-gang.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,38 +1,99 @@\n+/* Tests for gang-private variables, 'atomic' access */\n+\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n+/* It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n+   passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n+   so to maintain compatibility with earlier Tcl releases, we manually\n+   initialize counter variables:\n+   { dg-line l_dummy[variable c_compute 0 c_loop 0] }\n+   { dg-message \"dummy\" \"\" { target iN-VAl-Id } l_dummy } to avoid\n+   \"WARNING: dg-line var l_dummy defined, but not used\".  */\n+\n #include <assert.h>\n+#include <openacc.h>\n \n int main (void)\n {\n   int ret;\n \n-  #pragma acc parallel num_gangs(1) num_workers(32) copyout(ret)\n+\n+  ret = 0;\n+  #pragma acc parallel num_gangs(1444) num_workers(32) reduction(+: ret) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {variable 'w' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'w' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'w' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! openacc_host_selected } } l_compute$c_compute } */\n+  /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n   {\n-    int w = 0;\n+    int w = -22;\n \n-    #pragma acc loop worker\n-    for (int i = 0; i < 32; i++)\n+    #pragma acc loop worker /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+    for (int i = 0; i < 2232; i++)\n       {\n \t#pragma acc atomic update\n \tw++;\n       }\n \n-    ret = (w == 32);\n+    ret = (w == -22 + 2232);\n   }\n-  assert (ret);\n+  if (acc_get_device_type () == acc_device_host)\n+    assert (ret == 1);\n+  else\n+    assert (ret == 1444);\n+\n \n-  #pragma acc parallel num_gangs(1) vector_length(32) copyout(ret)\n+  ret = 0;\n+  #pragma acc parallel num_gangs(1414) vector_length(32) reduction(+: ret) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {variable 'v' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'v' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'v' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! openacc_host_selected } } l_compute$c_compute } */\n+  /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n   {\n-    int v = 0;\n+    int v = 10;\n \n-    #pragma acc loop vector\n-    for (int i = 0; i < 32; i++)\n+    #pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+    for (int i = 0; i < 3201; i++)\n       {\n \t#pragma acc atomic update\n \tv++;\n       }\n \n-    ret = (v == 32);\n+    ret = (v == 10 + 3201);\n+  }\n+  if (acc_get_device_type () == acc_device_host)\n+    assert (ret == 1);\n+  else\n+    assert (ret == 1414);\n+\n+\n+  ret = 0;\n+#pragma acc parallel num_gangs(314) reduction(+: ret) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {variable 'v' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'v' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'v' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! openacc_host_selected } } l_compute$c_compute } */\n+  {\n+    int v = -222;\n+\n+#pragma acc atomic update\n+    ++v;\n+#pragma acc atomic update\n+    ++v;\n+#pragma acc atomic update\n+    ++v;\n+\n+    ret += (v == -222 + 3);\n   }\n-  assert (ret);\n+  if (acc_get_device_type () == acc_device_host)\n+    assert (ret == 1);\n+  else\n+    assert (ret == 314);\n+\n \n   return 0;\n }"}, {"sha": "e651012f46386b69db54ccf80201d0a3b45a8e91", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/private-atomic-1.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fprivate-atomic-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fprivate-atomic-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fprivate-atomic-1.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,5 +1,11 @@\n // 'atomic' access of thread-private variable\n \n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <assert.h>\n \n int main (void)\n@@ -8,13 +14,20 @@ int main (void)\n \n   res = 0;\n #pragma acc parallel reduction(+: res)\n+  /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   {\n #pragma acc loop vector reduction(+: res)\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n+    /* { dg-note {variable 'v' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-2 }\n+       { dg-note {variable 'v' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } .-3 }\n+       { dg-note {variable 'v' adjusted for OpenACC privatization level: 'vector'} \"\" { target { ! openacc_host_selected } } .-4 } */\n+    /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-5 } */\n     for (int i = 0; i < 2322; i++)\n     {\n       int v = -222;\n \n #pragma acc loop seq\n+      /* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n       for (int j = 0; j < 121; ++j)\n \t{\n #pragma acc atomic update"}, {"sha": "366f818a14d7237472f2699320439ce6d94e6bea", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/private-variables.c", "status": "modified", "additions": 271, "deletions": 107, "changes": 378, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fprivate-variables.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fprivate-variables.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fprivate-variables.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,6 +1,20 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n /* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n    aspects of that functionality.  */\n \n+/* It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n+   passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n+   so to maintain compatibility with earlier Tcl releases, we manually\n+   initialize counter variables:\n+   { dg-line l_dummy[variable c_compute 0 c_loop 0] }\n+   { dg-message \"dummy\" \"\" { target iN-VAl-Id } l_dummy } to avoid\n+   \"WARNING: dg-line var l_dummy defined, but not used\".  */\n+\n #include <assert.h>\n #include <openacc.h>\n \n@@ -24,17 +38,20 @@ void local_g_1()\n   for (i = 0; i < 32; i++)\n     arr[i] = 3;\n \n-  #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n-  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 } */\n-  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n+  #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {variable 'x' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } l_compute$c_compute } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } l_compute$c_compute } */\n   {\n     int x;\n \n-    #pragma acc loop gang(static:1)\n+    #pragma acc loop gang(static:1) /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       x = i * 2;\n \n-    #pragma acc loop gang(static:1)\n+    #pragma acc loop gang(static:1) /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n \tif (acc_on_device (acc_device_host))\n@@ -58,31 +75,41 @@ void local_w_1()\n   for (i = 0; i < 32 * 32 * 32; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32)\n+  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n   {\n     int j;\n \n-    #pragma acc loop gang\n+    #pragma acc loop gang /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n-        #pragma acc loop worker\n+        #pragma acc loop worker /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'x' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \t    int x = i ^ j * 3;\n \n-\t    #pragma acc loop vector\n+\t    #pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += x * k;\n \t  }\n \n-\t#pragma acc loop worker\n+\t#pragma acc loop worker /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'x' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \t    int x = i | j * 5;\n \t    \n-\t    #pragma acc loop vector\n+\t    #pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += x * k;\n \t  }\n@@ -109,26 +136,33 @@ void local_w_2()\n   for (i = 0; i < 32 * 32 * 32; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32)\n+  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n   {\n     int j;\n \n-    #pragma acc loop gang\n+    #pragma acc loop gang /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n-        #pragma acc loop worker\n+        #pragma acc loop worker /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'x' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \t    int x = i ^ j * 3;\n \n-\t    #pragma acc loop vector\n+\t    #pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += x * k;\n \t    \n \t    x = i | j * 5;\n \t    \n-\t    #pragma acc loop vector\n+\t    #pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += x * k;\n \t  }\n@@ -155,14 +189,19 @@ void local_w_3()\n   for (i = 0; i < 32 * 32 * 32; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32)\n+  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n   {\n     int j;\n \n-    #pragma acc loop gang\n+    #pragma acc loop gang /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n-        #pragma acc loop worker\n+        #pragma acc loop worker /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'pt' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n@@ -171,11 +210,13 @@ void local_w_3()\n \t    pt.x = i ^ j * 3;\n \t    pt.y = i | j * 5;\n \n-\t    #pragma acc loop vector\n+\t    #pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += pt.x * k;\n \t    \n-\t    #pragma acc loop vector\n+\t    #pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += pt.y * k;\n \t  }\n@@ -202,14 +243,22 @@ void local_w_4()\n   for (i = 0; i < 32 * 32 * 32; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32)\n+  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n   {\n     int j;\n \n-    #pragma acc loop gang\n+    #pragma acc loop gang /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n-        #pragma acc loop worker\n+        #pragma acc loop worker /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'pt' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+\t   { dg-note {variable 'pt' ought to be adjusted for OpenACC privatization level: 'worker'} \"\" { target *-*-* } l_loop$c_loop }\n+\t   { dg-note {variable 'pt' adjusted for OpenACC privatization level: 'worker'} \"TODO\" { target { ! openacc_host_selected } xfail *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'ptp' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n@@ -219,13 +268,15 @@ void local_w_4()\n \t    \n \t    pt.x = i ^ j * 3;\n \n-\t    #pragma acc loop vector\n+\t    #pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += ptp->x * k;\n \n \t    ptp->y = i | j * 5;\n \t    \n-\t    #pragma acc loop vector\n+\t    #pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += pt.y * k;\n \t  }\n@@ -252,28 +303,35 @@ void local_w_5()\n   for (i = 0; i < 32 * 32 * 32; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32)\n+  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n   {\n     int j;\n \n-    #pragma acc loop gang\n+    #pragma acc loop gang /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n-        #pragma acc loop worker\n+        #pragma acc loop worker /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'pt' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \t    int pt[2];\n \t    \n \t    pt[0] = i ^ j * 3;\n \n-\t    #pragma acc loop vector\n+\t    #pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += pt[0] * k;\n \n \t    pt[1] = i | j * 5;\n \t    \n-\t    #pragma acc loop vector\n+\t    #pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += pt[1] * k;\n \t  }\n@@ -299,11 +357,13 @@ void loop_g_1()\n   for (i = 0; i < 32; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n-  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 } */\n-  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n+  #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } l_compute$c_compute } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } l_compute$c_compute } */\n   {\n-    #pragma acc loop gang private(x)\n+    #pragma acc loop gang private(x) /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+    /* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n \tx = i * 2;\n@@ -326,15 +386,19 @@ void loop_g_2()\n   for (i = 0; i < 32 * 32; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n-  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 } */\n+  #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } l_compute$c_compute } */\n   {\n-    #pragma acc loop gang private(x)\n+    #pragma acc loop gang private(x) /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+    /* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+    /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n \tx = i * 2;\n \n-\t#pragma acc loop worker\n+\t#pragma acc loop worker /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \tfor (int j = 0; j < 32; j++)\n \t  arr[i * 32 + j] += x;\n       }\n@@ -355,15 +419,19 @@ void loop_g_3()\n   for (i = 0; i < 32 * 32; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n-  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 } */\n+  #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } l_compute$c_compute } */\n   {\n-    #pragma acc loop gang private(x)\n+    #pragma acc loop gang private(x) /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+    /* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+    /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n \tx = i * 2;\n \n-\t#pragma acc loop vector\n+\t#pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \tfor (int j = 0; j < 32; j++)\n \t  arr[i * 32 + j] += x;\n       }\n@@ -384,17 +452,33 @@ void loop_g_4()\n   for (i = 0; i < 32 * 32; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n-  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 } */\n+  #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } l_compute$c_compute } */\n   {\n-    #pragma acc loop gang private(x)\n+    #pragma acc loop gang private(x) /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'x' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+       But, with optimizations enabled, per the '*.ssa' dump ('gcc/tree-ssa.c:execute_update_addresses_taken'):\n+           No longer having address taken: x\n+\t   Now a gimple register: x\n+       However, 'x' remains in the candidate set:\n+       { dg-note {variable 'x' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_loop$c_loop }\n+       Now, for GCN offloading, 'adjust_private_decl' does the privatization change right away:\n+       { dg-note {variable 'x' adjusted for OpenACC privatization level: 'gang'} \"\" { target openacc_radeon_accel_selected } l_loop$c_loop }\n+       For nvptx offloading however, we first mark up 'x', and then later apply the privatization change -- or, with optimizations enabled, don't, because we then don't actually call 'expand_var_decl'.\n+       { dg-note {variable 'x' adjusted for OpenACC privatization level: 'gang'} \"\" { target { openacc_nvidia_accel_selected && { ! __OPTIMIZE__ } } } l_loop$c_loop }\n+       { dg-bogus {note: variable 'x' adjusted for OpenACC privatization level: 'gang'} \"\" { target { openacc_nvidia_accel_selected && __OPTIMIZE__ } } l_loop$c_loop }\n+    */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+    /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+    /* { dg-note {variable 'p' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n         int *p = &x;\n \n \tx = i * 2;\n \n-\t#pragma acc loop worker\n+\t#pragma acc loop worker /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \tfor (int j = 0; j < 32; j++)\n \t  arr[i * 32 + j] += x;\n \n@@ -417,16 +501,22 @@ void loop_g_5()\n   for (i = 0; i < 32 * 32; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n-  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 } */\n+  #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } l_compute$c_compute } */\n   {\n-    #pragma acc loop gang private(x)\n+    #pragma acc loop gang private(x) /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'x' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+       { dg-note {variable 'x' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_loop$c_loop }\n+       { dg-note {variable 'x' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! openacc_host_selected } } l_loop$c_loop } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+    /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n         for (int j = 0; j < 8; j++)\n \t  x[j] = j * 2;\n \n-\t#pragma acc loop worker\n+\t#pragma acc loop worker /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \tfor (int j = 0; j < 32; j++)\n \t  arr[i * 32 + j] += x[j % 8];\n       }\n@@ -448,18 +538,22 @@ void loop_g_6()\n   for (i = 0; i < 32 * 32; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n-  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 } */\n+  #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } l_compute$c_compute } */\n   {\n-    #pragma acc loop gang private(pt)\n+    #pragma acc loop gang private(pt) /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+    /* { dg-note {variable 'pt' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+    /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n         pt.x = i;\n \tpt.y = i * 2;\n \tpt.z = i * 4;\n \tpt.attr[5] = i * 6;\n \n-\t#pragma acc loop worker\n+\t#pragma acc loop worker /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \tfor (int j = 0; j < 32; j++)\n \t  arr[i * 32 + j] += pt.x + pt.y + pt.z + pt.attr[5];\n       }\n@@ -479,26 +573,34 @@ void loop_v_1()\n   for (i = 0; i < 32 * 32 * 32; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32)\n+  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n   {\n     int j;\n \n-    #pragma acc loop gang\n+    #pragma acc loop gang /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n-        #pragma acc loop worker\n+        #pragma acc loop worker /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \n-\t    #pragma acc loop vector private(x)\n+\t    #pragma acc loop vector private(x) /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t    /* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      {\n \t\tx = i ^ j * 3;\n \t\tarr[i * 1024 + j * 32 + k] += x * k;\n \t      }\n \n-\t    #pragma acc loop vector private(x)\n+\t    #pragma acc loop vector private(x) /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t    /* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      {\n \t\tx = i | j * 5;\n@@ -527,19 +629,25 @@ void loop_v_2()\n   for (i = 0; i < 32 * 32 * 32; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32)\n+  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n   {\n     int j;\n \n-    #pragma acc loop gang\n+    #pragma acc loop gang /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n-        #pragma acc loop worker\n+        #pragma acc loop worker /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \n-\t    #pragma acc loop vector private(pt)\n+\t    #pragma acc loop vector private(pt) /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t    /* { dg-note {variable 'pt' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      {\n \t        pt[0] = i ^ j * 3;\n@@ -570,15 +678,19 @@ void loop_w_1()\n   for (i = 0; i < 32 * 32; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n-  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 } */\n+  #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } l_compute$c_compute } */\n   {\n     int j;\n \n-    #pragma acc loop gang\n+    #pragma acc loop gang /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n-        #pragma acc loop worker private(x)\n+        #pragma acc loop worker private(x) /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    x = i ^ j * 3;\n@@ -605,20 +717,26 @@ void loop_w_2()\n   for (i = 0; i < 32 * 32 * 32; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32)\n+  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n   {\n     int j;\n \n-    #pragma acc loop gang\n+    #pragma acc loop gang /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n-        #pragma acc loop worker private(x)\n+        #pragma acc loop worker private(x) /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \t    x = i ^ j * 3;\n \n-\t    #pragma acc loop vector\n+\t    #pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += x * k;\n \t  }\n@@ -645,31 +763,41 @@ void loop_w_3()\n   for (i = 0; i < 32 * 32 * 32; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32)\n+  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n   {\n     int j;\n \n-    #pragma acc loop gang\n+    #pragma acc loop gang /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n-        #pragma acc loop worker private(x)\n+        #pragma acc loop worker private(x) /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \t    x = i ^ j * 3;\n \n-\t    #pragma acc loop vector\n+\t    #pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += x * k;\n \t  }\n \n-\t#pragma acc loop worker private(x)\n+\t#pragma acc loop worker private(x) /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \t    x = i | j * 5;\n \t    \n-\t    #pragma acc loop vector\n+\t    #pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += x * k;\n \t  }\n@@ -696,26 +824,33 @@ void loop_w_4()\n   for (i = 0; i < 32 * 32 * 32; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32)\n+  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n   {\n     int j;\n \n-    #pragma acc loop gang\n+    #pragma acc loop gang /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n-        #pragma acc loop worker private(x)\n+        #pragma acc loop worker private(x) /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \t    x = i ^ j * 3;\n \n-\t    #pragma acc loop vector\n+\t    #pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += x * k;\n \t    \n \t    x = i | j * 5;\n \t    \n-\t    #pragma acc loop vector\n+\t    #pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += x * k;\n \t  }\n@@ -742,28 +877,38 @@ void loop_w_5()\n   for (i = 0; i < 32 * 32 * 32; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32)\n+  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n   {\n     int j;\n \n-    #pragma acc loop gang\n+    #pragma acc loop gang /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n-        #pragma acc loop worker private(x)\n+        #pragma acc loop worker private(x) /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'x' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+\t   { dg-note {variable 'x' ought to be adjusted for OpenACC privatization level: 'worker'} \"\" { target *-*-* } l_loop$c_loop }\n+\t   { dg-note {variable 'x' adjusted for OpenACC privatization level: 'worker'} \"TODO\" { target { ! openacc_host_selected } xfail *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'p' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \t    int *p = &x;\n \t    \n \t    x = i ^ j * 3;\n \n-\t    #pragma acc loop vector\n+\t    #pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += x * k;\n \t    \n \t    *p = i | j * 5;\n \t    \n-\t    #pragma acc loop vector\n+\t    #pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += x * k;\n \t  }\n@@ -791,26 +936,33 @@ void loop_w_6()\n   for (i = 0; i < 32 * 32 * 32; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32)\n+  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n   {\n     int j;\n \n-    #pragma acc loop gang\n+    #pragma acc loop gang /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n-        #pragma acc loop worker private(pt)\n+        #pragma acc loop worker private(pt) /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'pt' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \t    \n \t    pt.x = i ^ j * 3;\n \t    pt.y = i | j * 5;\n \n-\t    #pragma acc loop vector\n+\t    #pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += pt.x * k;\n \t    \n-\t    #pragma acc loop vector\n+\t    #pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += pt.y * k;\n \t  }\n@@ -840,28 +992,35 @@ void loop_w_7()\n \n   /* \"pt\" is treated as \"present_or_copy\" on the parallel directive because it\n      is an array variable.  */\n-  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32)\n+  #pragma acc parallel copy(arr) num_gangs(32) num_workers(32) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n   {\n     int j;\n \n-    #pragma acc loop gang\n+    #pragma acc loop gang /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n         /* But here, it is made private per-worker.  */\n-        #pragma acc loop worker private(pt)\n+        #pragma acc loop worker private(pt) /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'pt' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+\t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n \t    int k;\n \t    \n \t    pt[0] = i ^ j * 3;\n \n-\t    #pragma acc loop vector\n+\t    #pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += pt[0] * k;\n \n \t    pt[1] = i | j * 5;\n \t    \n-\t    #pragma acc loop vector\n+\t    #pragma acc loop vector /* { dg-line l_loop[incr c_loop] } */\n+\t    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \t    for (k = 0; k < 32; k++)\n \t      arr[i * 1024 + j * 32 + k] += pt[1] * k;\n \t  }\n@@ -887,15 +1046,17 @@ void parallel_g_1()\n   for (i = 0; i < 32; i++)\n     arr[i] = 3;\n \n-  #pragma acc parallel private(x) copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n-  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 } */\n-  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n+  #pragma acc parallel private(x) copy(arr) num_gangs(32) num_workers(8) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } l_compute$c_compute } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } l_compute$c_compute } */\n   {\n-    #pragma acc loop gang(static:1)\n+    #pragma acc loop gang(static:1) /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       x = i * 2;\n \n-    #pragma acc loop gang(static:1)\n+    #pragma acc loop gang(static:1) /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n \tif (acc_on_device (acc_device_host))\n@@ -918,17 +1079,20 @@ void parallel_g_2()\n   for (i = 0; i < 32 * 32; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel private(x) copy(arr) num_gangs(32) num_workers(2) vector_length(32)\n-  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 } */\n+  #pragma acc parallel private(x) copy(arr) num_gangs(32) num_workers(2) vector_length(32) /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } l_compute$c_compute } */\n   {\n-    #pragma acc loop gang\n+    #pragma acc loop gang /* { dg-line l_loop[incr c_loop] } */\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n+    /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n     for (i = 0; i < 32; i++)\n       {\n         int j;\n \tfor (j = 0; j < 32; j++)\n \t  x[j] = j * 2;\n \t\n-\t#pragma acc loop worker\n+\t#pragma acc loop worker /* { dg-line l_loop[incr c_loop] } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n \tfor (j = 0; j < 32; j++)\n \t  arr[i * 32 + j] += x[31 - j];\n       }"}, {"sha": "0402e44e3c552389ba546e89e5a25165da8f16d5", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-4.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-4.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,3 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n #include <stdlib.h>\n #include <stdio.h>\n \n@@ -11,6 +17,7 @@ vector (int *a)\n   int i;\n \n #pragma acc loop vector\n+  /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   for (i = 0; i < N; i++)\n     a[i] -= a[i]; \n }\n@@ -22,9 +29,11 @@ worker (int *b)\n   int i, j;\n \n #pragma acc loop worker\n+  /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   for (i = 0; i < N; i++)\n     {\n #pragma acc loop vector\n+      /* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n       for (j = 0; j < M; j++)\n         b[i * M + j] += b[i  * M + j]; \n     }\n@@ -37,6 +46,7 @@ gang (int *a)\n   int i;\n \n #pragma acc loop gang worker vector\n+  /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n   for (i = 0; i < N; i++)\n     a[i] -= i; \n }\n@@ -66,6 +76,7 @@ main(int argc, char **argv)\n #pragma acc parallel copy (a[0:N])\n   {\n #pragma acc loop seq\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n     for (i = 0; i < N; i++)\n       seq (&a[0]);\n   }\n@@ -79,6 +90,7 @@ main(int argc, char **argv)\n #pragma acc parallel copy (a[0:N])\n   {\n #pragma acc loop seq\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n     for (i = 0; i < N; i++)\n       gang (&a[0]);\n   }\n@@ -109,6 +121,7 @@ main(int argc, char **argv)\n #pragma acc parallel copy (a[0:N])\n   {\n #pragma acc loop\n+    /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n     for (i = 0; i < N; i++)\n       vector (&a[0]);\n   }"}, {"sha": "6a4c6a0e85feecb7a7cc7cd18b156e9a425ac639", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/static-variable-1.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstatic-variable-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstatic-variable-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstatic-variable-1.c?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -9,6 +9,12 @@\n    variables\" (only visible to members of the GitHub OpenACC organization).\n */\n \n+/* { dg-additional-options \"-fopt-info-note-omp\" }\n+   { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   for testing/documenting aspects of that functionality.  */\n+\n /* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n    aspects of that functionality.  */\n \n@@ -40,6 +46,9 @@ static void t0_c(void)\n #pragma acc parallel \\\n   reduction(max:num_gangs_actual) \\\n   reduction(max:result)\n+      /* { dg-note {variable 'var' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-3 }\n+\t { dg-note {variable 'var' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } .-4 }\n+\t { dg-note {variable 'var' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! openacc_host_selected } } .-5 } */\n       {\n \tnum_gangs_actual = 1 + __builtin_goacc_parlevel_id(GOMP_DIM_GANG);\n \n@@ -134,6 +143,9 @@ static void t1_c(void)\n   num_gangs(num_gangs_request) \\\n   reduction(max:num_gangs_actual) \\\n   reduction(max:result)\n+      /* { dg-note {variable 'var' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-4 }\n+\t { dg-note {variable 'var' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } .-5 }\n+\t { dg-note {variable 'var' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! openacc_host_selected } } .-6 } */\n       {\n \tnum_gangs_actual = 1 + __builtin_goacc_parlevel_id(GOMP_DIM_GANG);\n \n@@ -290,6 +302,7 @@ static void t2(void)\n \n #pragma acc data \\\n   copy(results_1, results_2, results_3)\n+  /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 } */\n   {\n     for (int i = 0; i < i_limit; ++i)\n       {\n@@ -304,6 +317,10 @@ static void t2(void)\n   present(results_1) \\\n   num_gangs(num_gangs_request_1) \\\n   async(1)\n+\t/* { dg-note {variable 'var' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-4 }\n+\t   { dg-note {variable 'var' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } .-5 }\n+\t   { dg-note {variable 'var' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! openacc_host_selected } } .-6 } */\n+\t/* { dg-note {variable 'tmp' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-7 } */\n \t{\n \t  static int var = var_init_1;\n \n@@ -327,6 +344,10 @@ static void t2(void)\n   present(results_3) \\\n   num_gangs(num_gangs_request_3) \\\n   async(3)\n+\t/* { dg-note {variable 'var' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-4 }\n+\t   { dg-note {variable 'var' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } .-5 }\n+\t   { dg-note {variable 'var' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! openacc_host_selected } } .-6 } */\n+\t/* { dg-note {variable 'tmp' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-7 } */\n \t{\n \t  static int var = var_init_3;\n \n@@ -447,6 +468,9 @@ static void pr84992_1(void)\n   int n[1];\n   n[0] = 3;\n #pragma acc parallel copy(n)\n+  /* { dg-note {variable 'test' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-1 }\n+     { dg-note {variable 'test' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } .-2 }\n+     { dg-note {variable 'test' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! openacc_host_selected } } .-3 } */\n   {\n     static const int test[] = {1,2,3,4};\n     n[0] = test[n[0]];"}, {"sha": "ace935817dcc5e3221b6547b1c879c1be75444a9", "filename": "libgomp/testsuite/libgomp.oacc-fortran/acc_on_device-1-1.f90", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Facc_on_device-1-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Facc_on_device-1-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Facc_on_device-1-1.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,6 +1,12 @@\n ! { dg-do run }\n ! { dg-additional-options \"-cpp\" }\n-!\n+\n+! { dg-additional-options \"-fopt-info-all-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-all-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n ! TODO: Have to disable the acc_on_device builtin for we want to test the\n ! libgomp library function?  The command line option\n ! '-fno-builtin-acc_on_device' is valid for C/C++/ObjC/ObjC++ but not for\n@@ -20,6 +26,8 @@\n ! Host via offloading fallback mode.\n \n !$acc parallel if(.false.)\n+! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } .-1 }\n+!TODO Unhandled 'CONST_DECL' instances for constant arguments in 'acc_on_device' calls.\n if (.not. acc_on_device (acc_device_none)) STOP 5\n if (.not. acc_on_device (acc_device_host)) STOP 6\n if (acc_on_device (acc_device_not_host)) STOP 7\n@@ -32,6 +40,7 @@\n ! Offloaded.\n \n !$acc parallel\n+! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target { ! openacc_host_selected } } .-1 }\n if (acc_on_device (acc_device_none)) STOP 9\n if (acc_on_device (acc_device_host)) STOP 10\n if (.not. acc_on_device (acc_device_not_host)) STOP 11"}, {"sha": "56270b129702d32f6638fa801cb9925b75d80ba9", "filename": "libgomp/testsuite/libgomp.oacc-fortran/acc_on_device-1-2.f", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Facc_on_device-1-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Facc_on_device-1-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Facc_on_device-1-2.f?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,6 +1,12 @@\n ! { dg-do run }\n ! { dg-additional-options \"-cpp\" }\n-!\n+\n+! { dg-additional-options \"-fopt-info-all-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-all-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n ! TODO: Have to disable the acc_on_device builtin for we want to test\n ! the libgomp library function?  The command line option\n ! '-fno-builtin-acc_on_device' is valid for C/C++/ObjC/ObjC++ but not\n@@ -20,6 +26,8 @@\n !Host via offloading fallback mode.\n \n !$ACC PARALLEL IF(.FALSE.)\n+! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } .-1 }\n+!TODO Unhandled 'CONST_DECL' instances for constant arguments in 'acc_on_device' calls.\n       IF (.NOT. ACC_ON_DEVICE (ACC_DEVICE_NONE)) STOP 5\n       IF (.NOT. ACC_ON_DEVICE (ACC_DEVICE_HOST)) STOP 6\n       IF (ACC_ON_DEVICE (ACC_DEVICE_NOT_HOST)) STOP 7\n@@ -32,6 +40,7 @@\n ! Offloaded.\n \n !$ACC PARALLEL\n+! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target { ! openacc_host_selected } } .-1 }\n       IF (ACC_ON_DEVICE (ACC_DEVICE_NONE)) STOP 9\n       IF (ACC_ON_DEVICE (ACC_DEVICE_HOST)) STOP 10\n       IF (.NOT. ACC_ON_DEVICE (ACC_DEVICE_NOT_HOST)) STOP 11"}, {"sha": "a8b9cddd1ae10093cb26cd7e09b558264e7c5555", "filename": "libgomp/testsuite/libgomp.oacc-fortran/acc_on_device-1-3.f", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Facc_on_device-1-3.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Facc_on_device-1-3.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Facc_on_device-1-3.f?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,6 +1,12 @@\n ! { dg-do run }\n ! { dg-additional-options \"-cpp\" }\n-!\n+\n+! { dg-additional-options \"-fopt-info-all-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-all-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n ! TODO: Have to disable the acc_on_device builtin for we want to test\n ! the libgomp library function?  The command line option\n ! '-fno-builtin-acc_on_device' is valid for C/C++/ObjC/ObjC++ but not\n@@ -20,6 +26,8 @@\n !Host via offloading fallback mode.\n \n !$ACC PARALLEL IF(.FALSE.)\n+! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } .-1 }\n+!TODO Unhandled 'CONST_DECL' instances for constant arguments in 'acc_on_device' calls.\n       IF (.NOT. ACC_ON_DEVICE (ACC_DEVICE_NONE)) STOP 5\n       IF (.NOT. ACC_ON_DEVICE (ACC_DEVICE_HOST)) STOP 6\n       IF (ACC_ON_DEVICE (ACC_DEVICE_NOT_HOST)) STOP 7\n@@ -32,6 +40,7 @@\n ! Offloaded.\n \n !$ACC PARALLEL\n+! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target { ! openacc_host_selected } } .-1 }\n       IF (ACC_ON_DEVICE (ACC_DEVICE_NONE)) STOP 9\n       IF (ACC_ON_DEVICE (ACC_DEVICE_HOST)) STOP 10\n       IF (.NOT. ACC_ON_DEVICE (ACC_DEVICE_NOT_HOST)) STOP 11"}, {"sha": "51776a1d260ec46fac6ca81425ac778ae81419ce", "filename": "libgomp/testsuite/libgomp.oacc-fortran/declare-1.f90", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-1.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,6 +1,12 @@\n ! { dg-do run }\n ! { dg-skip-if \"\" { *-*-* } { \"-DACC_MEM_SHARED=1\" } }\n \n+! { dg-additional-options \"-fopt-info-all-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-all-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n ! Tests to exercise the declare directive along with\n ! the clauses: copy\n !              copyin\n@@ -34,6 +40,7 @@ subroutine subr5 (a, b, c, d)\n   i = 0\n \n   !$acc parallel\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n     do i = 1, N\n       b(i) = a(i)\n       c(i) = b(i)\n@@ -55,6 +62,7 @@ subroutine subr4 (a, b)\n   i = 0\n \n   !$acc parallel\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n   do i = 1, N\n     b(i) = a(i)\n   end do\n@@ -74,6 +82,7 @@ subroutine subr3 (a, c)\n   i = 0\n \n   !$acc parallel\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n   do i = 1, N\n     a(i) = c(i)\n     c(i) = 0\n@@ -96,6 +105,7 @@ subroutine subr2 (a, b, c)\n   i = 0\n \n   !$acc parallel\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n   do i = 1, N\n     b(i) = a(i)\n     c(i) = b(i) + c(i) + 1\n@@ -114,6 +124,7 @@ subroutine subr1 (a)\n   i = 0\n \n   !$acc parallel\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n   do i = 1, N\n     a(i) = a(i) + 1\n   end do\n@@ -133,6 +144,9 @@ subroutine test (a, e)\n end subroutine\n \n subroutine subr0 (a, b, c, d)\n+  ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } .-1 }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n+  ! { dg-note {variable 'a\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 }\n   implicit none\n   integer, parameter :: N = 8\n   integer :: a(N)\n@@ -198,6 +212,10 @@ subroutine subr0 (a, b, c, d)\n end subroutine\n \n program main\n+  ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } .-1 }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n+  ! { dg-note {variable 'S\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 }\n+  ! { dg-note {variable 'desc\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-4 }\n   use vars\n   use openacc\n   implicit none"}, {"sha": "93e9ee09818dcd0e5a9f36d3dab8692e50e90148", "filename": "libgomp/testsuite/libgomp.oacc-fortran/host_data-5.F90", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fhost_data-5.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fhost_data-5.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fhost_data-5.F90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,7 +1,13 @@\n ! { dg-do run }\n !\n ! Test if, if_present clauses on host_data construct.\n-!\n+\n+! { dg-additional-options \"-fopt-info-all-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-all-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n ! Fortran variant of 'libgomp.oacc-c-c++-common/host_data-7.c'.\n !\n program main\n@@ -33,11 +39,24 @@ subroutine foo (p2, parr, host_p, host_parr, cond)\n #endif\n   \n   !$acc data copyin(host_p, host_parr)\n+  ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target { ! openacc_host_selected } } .-1 }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target { ! openacc_host_selected } } .-2 }\n+  ! { dg-note {variable 'p\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 }\n+  ! { dg-note {variable 'parr\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 }\n+  ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target { ! openacc_host_selected } } .-5 }\n #if !ACC_MEM_SHARED\n     if (acc_is_present(p, c_sizeof(p))) stop 5\n     if (acc_is_present(parr, 1)) stop 6\n #endif\n     !$acc host_data use_device(p, parr) if_present\n+    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+    ! { dg-note {variable 'transfer\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n+    ! { dg-note {variable 'host_p\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 }\n+    ! { dg-note {variable 'parr\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 }\n+    ! { dg-note {variable 'host_parr\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-5 }\n+    ! { dg-note {variable 'D\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-6 }\n+    ! { dg-note {variable 'transfer\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-7 }\n+    ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-8 }\n       ! not mapped yet, so it will be equal to the host pointer.\n       if (transfer(c_loc(p), host_p) /= host_p) stop 7\n       if (transfer(c_loc(parr), host_parr) /= host_parr) stop 8\n@@ -48,13 +67,32 @@ subroutine foo (p2, parr, host_p, host_parr, cond)\n #endif\n \n     !$acc data copy(p, parr)\n+    ! { dg-note {variable 'p\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n+    ! { dg-note {variable 'parr\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 }\n+    ! { dg-note {variable 'transfer\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 }\n+    ! { dg-note {variable 'host_p\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-5 }\n+    ! { dg-note {variable 'host_parr\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-6 }\n+    ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } .-7 }\n+    ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-8 }\n+    ! { dg-note {variable 'D\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-9 }\n+    ! { dg-note {variable 'transfer\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-10 }\n+    ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-11 }\n       if (.not. acc_is_present(p, c_sizeof(p))) stop 11\n       if (.not. acc_is_present(parr, 1)) stop 12\n       ! Not inside a host_data construct, so still the host pointer.\n       if (transfer(c_loc(p), host_p) /= host_p) stop 13\n       if (transfer(c_loc(parr), host_parr) /= host_parr) stop 14\n       \n       !$acc host_data use_device(p, parr)\n+      ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+      ! { dg-note {variable 'transfer\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n+      ! { dg-note {variable 'host_p\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 }\n+      ! { dg-note {variable 'parr\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 }\n+      ! { dg-note {variable 'host_parr\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-5 }\n+      ! { dg-note {variable 'D\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-6 }\n+      ! { dg-note {variable 'transfer\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-7 }\n+      ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-8 }\n #if ACC_MEM_SHARED\n         if (transfer(c_loc(p), host_p) /= host_p) stop 15\n         if (transfer(c_loc(parr), host_parr) /= host_parr) stop 16\n@@ -66,6 +104,14 @@ subroutine foo (p2, parr, host_p, host_parr, cond)\n       !$acc end host_data\n \n       !$acc host_data use_device(p, parr) if_present\n+        ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+        ! { dg-note {variable 'transfer\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n+        ! { dg-note {variable 'host_p\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 }\n+        ! { dg-note {variable 'parr\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 }\n+        ! { dg-note {variable 'host_parr\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-5 }\n+        ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-6 }\n+        ! { dg-note {variable 'D\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-7 }\n+        ! { dg-note {variable 'transfer\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-8 }\n #if ACC_MEM_SHARED\n         if (transfer(c_loc(p), host_p) /= host_p) stop 19\n         if (transfer(c_loc(parr), host_parr) /= host_parr) stop 20\n@@ -77,6 +123,14 @@ subroutine foo (p2, parr, host_p, host_parr, cond)\n       !$acc end host_data\n \n       !$acc host_data use_device(p, parr) if(cond)\n+        ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+        ! { dg-note {variable 'transfer\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n+        ! { dg-note {variable 'host_p\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 }\n+        ! { dg-note {variable 'parr\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-4 }\n+        ! { dg-note {variable 'host_parr\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-5 }\n+        ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-6 }\n+        ! { dg-note {variable 'D\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-7 }\n+        ! { dg-note {variable 'transfer\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { target *-*-* } .-8 }\n #if ACC_MEM_SHARED\n         if (transfer(c_loc(p), host_p) /= host_p) stop 23\n         if (transfer(c_loc(parr), host_parr) /= host_parr) stop 24"}, {"sha": "3089d6a0c43fabe06a75a0c33a7163eaab550ce5", "filename": "libgomp/testsuite/libgomp.oacc-fortran/if-1.f90", "status": "modified", "additions": 119, "deletions": 30, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fif-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fif-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fif-1.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,6 +1,20 @@\n ! { dg-do run }\n ! { dg-additional-options \"-cpp\" }\n \n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n+! It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n+! passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n+! so to maintain compatibility with earlier Tcl releases, we manually\n+! initialize counter variables:\n+! { dg-line l_dummy[variable c_compute 0] }\n+! { dg-message \"dummy\" \"\" { target iN-VAl-Id } l_dummy } to avoid\n+! \"WARNING: dg-line var l_dummy defined, but not used\".  */\n+\n program main\n   use openacc\n   implicit none\n@@ -19,8 +33,11 @@ program main\n \n   a(:) = 4.0\n \n-  !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if (1 == 1)\n+  !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if (1 == 1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n      do i = 1, N\n+        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n+        !TODO Unhandled 'CONST_DECL' instances for constant argument in 'acc_on_device' call.\n         if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n           b(i) = a(i) + 1\n         else\n@@ -41,8 +58,10 @@ program main\n \n   a(:) = 16.0\n \n-  !$acc parallel if (0 == 1)\n+  !$acc parallel if (0 == 1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n      do i = 1, N\n+        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n        if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n          b(i) = a(i) + 1\n        else\n@@ -57,8 +76,10 @@ program main\n \n   a(:) = 8.0\n \n-  !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if (one == 1)\n+  !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if (one == 1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n+       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n         b(i) = a(i) + 1\n       else\n@@ -79,8 +100,10 @@ program main\n \n   a(:) = 22.0\n \n-  !$acc parallel if (zero == 1)\n+  !$acc parallel if (zero == 1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n+       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n         b(i) = a(i) + 1\n       else\n@@ -95,8 +118,10 @@ program main\n \n   a(:) = 16.0\n \n-  !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if (.TRUE.)\n+  !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if (.TRUE.) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n+       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n         b(i) = a(i) + 1\n       else\n@@ -117,8 +142,10 @@ program main\n \n   a(:) = 76.0\n \n-  !$acc parallel if (.FALSE.)\n+  !$acc parallel if (.FALSE.) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n+       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n         b(i) = a(i) + 1\n       else\n@@ -135,8 +162,10 @@ program main\n \n   nn = 1\n \n-  !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if (nn == 1)\n+  !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if (nn == 1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n+       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n         b(i) = a(i) + 1\n       else\n@@ -159,8 +188,10 @@ program main\n \n   nn = 0\n \n-  !$acc parallel if (nn == 1)\n+  !$acc parallel if (nn == 1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n+       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n         b(i) = a(i) + 1\n       else\n@@ -177,8 +208,10 @@ program main\n \n   nn = 1\n \n-  !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if ((nn + nn) > 0)\n+  !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if ((nn + nn) > 0) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n+       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n         b(i) = a(i) + 1\n       else\n@@ -201,8 +234,10 @@ program main\n \n   nn = 0;\n \n-  !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if ((nn + nn) > 0)\n+  !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if ((nn + nn) > 0) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n+       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n         b(i) = a(i) + 1\n       else\n@@ -217,8 +252,10 @@ program main\n \n   a(:) = 91.0\n \n-  !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if (-2 > 0)\n+  !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if (-2 > 0) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n+       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n         b(i) = a(i) + 1\n       else\n@@ -233,8 +270,10 @@ program main\n \n   a(:) = 43.0\n \n-  !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if (one == 1)\n+  !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if (one == 1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n+       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n         b(i) = a(i) + 1\n       else\n@@ -255,8 +294,10 @@ program main\n \n   a(:) = 87.0\n \n-  !$acc parallel if (one == 0)\n+  !$acc parallel if (one == 0) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n+       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n         b(i) = a(i) + 1\n       else\n@@ -333,8 +374,11 @@ program main\n   b(:) = 0.0\n \n   !$acc data copyin (a(1:N)) copyout (b(1:N)) if (1 == 1)\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+  ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n \n-    !$acc parallel present (a(1:N))\n+    !$acc parallel present (a(1:N)) ! { dg-line l_compute[incr c_compute] }\n+    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n        do i = 1, N\n            b(i) = a(i)\n        end do\n@@ -349,6 +393,7 @@ program main\n   b(:) = 1.0\n \n   !$acc data copyin (a(1:N)) copyout (b(1:N)) if (0 == 1)\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target { ! openacc_host_selected } } .-1 }\n \n #if !ACC_MEM_SHARED\n   if (acc_is_present (a) .eqv. .TRUE.) STOP 21\n@@ -361,18 +406,25 @@ program main\n   b(:) = 21.0\n \n   !$acc data copyin (a(1:N)) if (1 == 1)\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+  ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n \n #if !ACC_MEM_SHARED\n     if (acc_is_present (a) .eqv. .FALSE.) STOP 23\n #endif\n \n     !$acc data copyout (b(1:N)) if (0 == 1)\n+    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+    ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n #if !ACC_MEM_SHARED\n       if (acc_is_present (b) .eqv. .TRUE.) STOP 24\n #endif\n         !$acc data copyout (b(1:N)) if (1 == 1)\n+        ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+        ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n \n-        !$acc parallel present (a(1:N)) present (b(1:N))\n+        !$acc parallel present (a(1:N)) present (b(1:N)) ! { dg-line l_compute[incr c_compute] }\n+        ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n           do i = 1, N\n             b(i) = a(i)\n           end do\n@@ -452,8 +504,10 @@ program main\n \n   a(:) = 4.0\n \n-  !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (1 == 1)\n+  !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (1 == 1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n      do i = 1, N\n+        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n         if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n           b(i) = a(i) + 1\n         else\n@@ -474,8 +528,10 @@ program main\n \n   a(:) = 16.0\n \n-  !$acc kernels if (0 == 1)\n+  !$acc kernels if (0 == 1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n      do i = 1, N\n+        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n        if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n          b(i) = a(i) + 1\n        else\n@@ -490,8 +546,10 @@ program main\n \n   a(:) = 8.0\n \n-  !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (one == 1)\n+  !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (one == 1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n+       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n         b(i) = a(i) + 1\n       else\n@@ -512,8 +570,10 @@ program main\n \n   a(:) = 22.0\n \n-  !$acc kernels if (zero == 1)\n+  !$acc kernels if (zero == 1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n+       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n         b(i) = a(i) + 1\n       else\n@@ -528,8 +588,10 @@ program main\n \n   a(:) = 16.0\n \n-  !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (.TRUE.)\n+  !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (.TRUE.) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n+       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n         b(i) = a(i) + 1\n       else\n@@ -550,8 +612,10 @@ program main\n \n   a(:) = 76.0\n \n-  !$acc kernels if (.FALSE.)\n+  !$acc kernels if (.FALSE.) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n+       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n         b(i) = a(i) + 1\n       else\n@@ -568,8 +632,10 @@ program main\n \n   nn = 1\n \n-  !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (nn == 1)\n+  !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (nn == 1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n+       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n         b(i) = a(i) + 1\n       else\n@@ -592,8 +658,10 @@ program main\n \n   nn = 0\n \n-  !$acc kernels if (nn == 1)\n+  !$acc kernels if (nn == 1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n+       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n         b(i) = a(i) + 1\n       else\n@@ -610,8 +678,10 @@ program main\n \n   nn = 1\n \n-  !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if ((nn + nn) > 0)\n+  !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if ((nn + nn) > 0) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n+       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n         b(i) = a(i) + 1\n       else\n@@ -634,8 +704,10 @@ program main\n \n   nn = 0;\n \n-  !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if ((nn + nn) > 0)\n+  !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if ((nn + nn) > 0) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n+       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n         b(i) = a(i) + 1\n       else\n@@ -650,8 +722,10 @@ program main\n \n   a(:) = 91.0\n \n-  !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (-2 > 0)\n+  !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (-2 > 0) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n+       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n         b(i) = a(i) + 1\n       else\n@@ -666,8 +740,10 @@ program main\n \n   a(:) = 43.0\n \n-  !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (one == 1)\n+  !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (one == 1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n+       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n         b(i) = a(i) + 1\n       else\n@@ -688,8 +764,10 @@ program main\n \n   a(:) = 87.0\n \n-  !$acc kernels if (one == 0)\n+  !$acc kernels if (one == 0) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n+      ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n         b(i) = a(i) + 1\n       else\n@@ -766,8 +844,11 @@ program main\n   b(:) = 0.0\n \n   !$acc data copyin (a(1:N)) copyout (b(1:N)) if (1 == 1)\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+  ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n \n-    !$acc kernels present (a(1:N))\n+    !$acc kernels present (a(1:N)) ! { dg-line l_compute[incr c_compute] }\n+    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n        do i = 1, N\n            b(i) = a(i)\n        end do\n@@ -782,6 +863,7 @@ program main\n   b(:) = 1.0\n \n   !$acc data copyin (a(1:N)) copyout (b(1:N)) if (0 == 1)\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target { ! openacc_host_selected } } .-1 }\n \n #if !ACC_MEM_SHARED\n   if (acc_is_present (a) .eqv. .TRUE.) STOP 56\n@@ -794,18 +876,25 @@ program main\n   b(:) = 21.0\n \n   !$acc data copyin (a(1:N)) if (1 == 1)\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+  ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n \n #if !ACC_MEM_SHARED\n     if (acc_is_present (a) .eqv. .FALSE.) STOP 58\n #endif\n \n     !$acc data copyout (b(1:N)) if (0 == 1)\n+    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+    ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n #if !ACC_MEM_SHARED\n       if (acc_is_present (b) .eqv. .TRUE.) STOP 59\n #endif\n         !$acc data copyout (b(1:N)) if (1 == 1)\n+        ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+        ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n \n-        !$acc kernels present (a(1:N)) present (b(1:N))\n+        !$acc kernels present (a(1:N)) present (b(1:N)) ! { dg-line l_compute[incr c_compute] }\n+        ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n           do i = 1, N\n             b(i) = a(i)\n           end do"}, {"sha": "0ae7c4bc76135ec14f4a862ad32018e29e70d15f", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-1.f90", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-1.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -2,6 +2,12 @@\n \n ! { dg-do run }\n \n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n program main\n   integer :: x, i, arr(32)\n \n@@ -11,6 +17,8 @@ program main\n \n   !$acc kernels copy(arr)\n   !$acc loop gang(num:32) private(x)\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+  ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n   do i = 1, 32\n      x = i * 2;\n      arr(i) = arr(i) + x;"}, {"sha": "e3ff24848b696783cd4f7316e170dc62ff21d0a4", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-2.f90", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-2.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -3,6 +3,12 @@\n \n ! { dg-do run }\n \n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n program main\n   integer :: x, i, j, arr(0:32*32)\n \n@@ -12,10 +18,13 @@ program main\n \n   !$acc kernels copy(arr)\n   !$acc loop gang(num:32) private(x)\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+  ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n   do i = 0, 31\n      x = i * 2;\n \n      !$acc loop worker(num:32)\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n      do j = 0, 31\n         arr(i * 32 + j) = arr(i * 32 + j) + x;\n      end do"}, {"sha": "370a25a7db65f369d57870393c6ace50f7339e21", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-3.f90", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-3.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -3,6 +3,12 @@\n \n ! { dg-do run }\n \n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n program main\n   integer :: x, i, j, arr(0:32*32)\n \n@@ -12,10 +18,13 @@ program main\n \n   !$acc kernels copy(arr)\n   !$acc loop gang(num:32) private(x)\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+  ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n   do i = 0, 31\n      x = i * 2;\n \n      !$acc loop vector(length:32)\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n      do j = 0, 31\n         arr(i * 32 + j) = arr(i * 32 + j) + x;\n      end do"}, {"sha": "abb86d0824f55a516729c02e9aeb9ed174ef05b8", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-6.f90", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-6.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -3,6 +3,12 @@\n \n ! { dg-do run }\n \n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n program main\n   type vec3\n      integer x, y, z, attr(13)\n@@ -17,13 +23,16 @@ program main\n \n   !$acc kernels copy(arr)\n   !$acc loop gang(num:32) private(pt)\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+  ! { dg-note {variable 'pt' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-2 }\n   do i = 0, 31\n      pt%x = i\n      pt%y = i * 2\n      pt%z = i * 4\n      pt%attr(5) = i * 6\n \n      !$acc loop vector(length:32)\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n      do j = 0, 31\n         arr(i * 32 + j) = arr(i * 32 + j) + pt%x + pt%y + pt%z + pt%attr(5);\n      end do"}, {"sha": "fe796f3ba465dc447c90af527c662e3248695e0e", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-vector-1.f90", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-vector-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-vector-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-vector-1.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -2,6 +2,12 @@\n \n ! { dg-do run }\n \n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n program main\n   integer :: x, i, j, k, idx, arr(0:32*32*32)\n \n@@ -11,15 +17,21 @@ program main\n \n   !$acc kernels copy(arr)\n   !$acc loop gang(num:32)\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n   do i = 0, 31\n      !$acc loop worker(num:8)\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n      do j = 0, 31\n         !$acc loop vector(length:32) private(x)\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+        ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n         do k = 0, 31\n            x = ieor(i, j * 3)\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n         end do\n         !$acc loop vector(length:32) private(x)\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+        ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n         do k = 0, 31\n            x = ior(i, j * 5)\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k"}, {"sha": "b5cefeccc22b0f3b80f02d22208c42060ca7e15a", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-vector-2.f90", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-vector-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-vector-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-vector-2.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -2,6 +2,12 @@\n \n ! { dg-do run }\n \n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n program main\n   integer :: i, j, k, idx, arr(0:32*32*32), pt(2)\n \n@@ -11,10 +17,14 @@ program main\n \n   !$acc kernels copy(arr)\n   !$acc loop gang(num:32)\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n   do i = 0, 31\n      !$acc loop worker(num:8)\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n      do j = 0, 31\n         !$acc loop vector(length:32) private(x, pt)\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+        ! { dg-note {variable 'pt' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-2 }\n         do k = 0, 31\n            pt(1) = ieor(i, j * 3)\n            pt(2) = ior(i, j * 5)"}, {"sha": "3fd1239da4b316ccec80ff04bb647a9e9f5b36c1", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-1.f90", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-1.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -2,6 +2,12 @@\n \n ! { dg-do run }\n \n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n program main\n   integer :: x, i, j, arr(0:32*32)\n   common x\n@@ -12,8 +18,11 @@ program main\n \n   !$acc kernels copy(arr)\n   !$acc loop gang(num:32) private(x)\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n   do i = 0, 31\n      !$acc loop worker(num:8) private(x)\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+     ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n      do j = 0, 31\n         x = ieor(i, j * 3)\n         arr(i * 32 + j) = arr(i * 32 + j) + x"}, {"sha": "1dc5d9e8eff8671eb564f02a8c2c7a6316aa21c7", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-2.f90", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-2.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -3,6 +3,12 @@\n \n ! { dg-do run }\n \n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n program main\n   integer :: x, i, j, k, idx, arr(0:32*32*32)\n \n@@ -12,12 +18,16 @@ program main\n \n   !$acc kernels copy(arr)\n   !$acc loop gang(num:32)\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n   do i = 0, 31\n      !$acc loop worker(num:8) private(x)\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+     ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n      do j = 0, 31\n         x = ieor(i, j * 3)\n \n         !$acc loop vector(length:32)\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n         do k = 0, 31\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n         end do"}, {"sha": "25bc67abb8b7627b0c568bc083412048685ea45f", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-3.f90", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-3.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -3,6 +3,12 @@\n \n ! { dg-do run }\n \n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n program main\n   integer :: x, i, j, k, idx, arr(0:32*32*32)\n \n@@ -12,22 +18,29 @@ program main\n \n   !$acc kernels copy(arr)\n   !$acc loop gang(num:32)\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n   do i = 0, 31\n      !$acc loop worker(num:8) private(x)\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+     ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n      do j = 0, 31\n         x = ieor(i, j * 3)\n \n         !$acc loop vector(length:32)\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n         do k = 0, 31\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n         end do\n      end do\n \n      !$acc loop worker(num:8) private(x)\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+     ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n      do j = 0, 31\n         x = ior(i, j * 5)\n \n         !$acc loop vector(length:32)\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n         do k = 0, 31\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n         end do"}, {"sha": "b3f66eaf7732c650f48c0fc74efee9887bd6b46e", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-4.f90", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-4.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -3,6 +3,12 @@\n \n ! { dg-do run }\n \n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n program main\n   integer :: x, i, j, k, idx, arr(0:32*32*32)\n \n@@ -12,19 +18,24 @@ program main\n \n   !$acc kernels copy(arr)\n   !$acc loop gang(num:32)\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n   do i = 0, 31\n      !$acc loop worker(num:8) private(x)\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+     ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n      do j = 0, 31\n         x = ieor(i, j * 3)\n \n         !$acc loop vector(length:32)\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n         do k = 0, 31\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n         end do\n \n         x = ior(i, j * 5)\n \n         !$acc loop vector(length:32)\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n         do k = 0, 31\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n         end do"}, {"sha": "d9dbb0736f3a7ae0f4864c22fdcc93cd580dd43a", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-5.f90", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-5.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -3,6 +3,12 @@\n \n ! { dg-do run }\n \n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n program main\n   integer :: i, j, k, idx, arr(0:32*32*32)\n   integer, target :: x\n@@ -14,20 +20,26 @@ program main\n \n   !$acc kernels copy(arr)\n   !$acc loop gang(num:32)\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n   do i = 0, 31\n      !$acc loop worker(num:8) private(x, p)\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+     ! { dg-note {variable 'x' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-2 }\n+     ! { dg-note {variable 'p' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-3 }\n      do j = 0, 31\n         p => x\n         x = ieor(i, j * 3)\n \n         !$acc loop vector(length:32)\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n         do k = 0, 31\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n         end do\n \n         p = ior(i, j * 5)\n \n         !$acc loop vector(length:32)\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n         do k = 0, 31\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n         end do"}, {"sha": "b4225c2bf470f03ee2f9f7f7c448337621eca67b", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-6.f90", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-6.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -3,6 +3,12 @@\n \n ! { dg-do run }\n \n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n program main\n   type vec2\n      integer x, y\n@@ -17,18 +23,23 @@ program main\n \n   !$acc kernels copy(arr)\n   !$acc loop gang(num:32)\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n   do i = 0, 31\n      !$acc loop worker(num:8) private(pt)\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+     ! { dg-note {variable 'pt' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n      do j = 0, 31\n         pt%x = ieor(i, j * 3)\n         pt%y = ior(i, j * 5)\n         \n         !$acc loop vector(length:32)\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n         do k = 0, 31\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + pt%x * k\n         end do\n \n         !$acc loop vector(length:32)\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n         do k = 0, 31\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + pt%y * k\n         end do"}, {"sha": "76bbda72787efb282635fcd2bc75de3dcfd66566", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-7.f90", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-7.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -3,6 +3,12 @@\n \n ! { dg-do run }\n \n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n program main\n   integer :: i, j, k, idx, arr(0:32*32*32), pt(2)\n \n@@ -12,18 +18,23 @@ program main\n \n   !$acc kernels copy(arr)\n   !$acc loop gang(num:32)\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n   do i = 0, 31\n      !$acc loop worker(num:8) private(pt)\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+     ! { dg-note {variable 'pt' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-2 }\n      do j = 0, 31\n         pt(1) = ieor(i, j * 3)\n         pt(2) = ior(i, j * 5)\n         \n         !$acc loop vector(length:32)\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n         do k = 0, 31\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + pt(1) * k\n         end do\n \n         !$acc loop vector(length:32)\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n         do k = 0, 31\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + pt(2) * k\n         end do"}, {"sha": "4e67809f7692a6db8a234aa7265c3e0c965aa413", "filename": "libgomp/testsuite/libgomp.oacc-fortran/optional-private.f90", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Foptional-private.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Foptional-private.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Foptional-private.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -4,9 +4,16 @@\n \n ! { dg-do run }\n \n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n ! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n ! aspects of that functionality.\n \n+\n program main\n   implicit none\n \n@@ -36,6 +43,8 @@ subroutine t1(x)\n     ! { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 }\n     ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 }\n     !$acc loop gang private(x)\n+    ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+    ! { dg-note {variable 'x' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } .-2 }\n     do i = 1, 32\n        x = i * 2;\n        arr(i) = arr(i) + x\n@@ -62,13 +71,16 @@ subroutine t2(pt)\n     !$acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n     ! { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 }\n     !$acc loop gang private(pt)\n+    ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+    ! { dg-note {variable 'pt' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } .-2 }\n     do i = 0, 31\n        pt%x = i\n        pt%y = i * 2\n        pt%z = i * 4\n        pt%attr(5) = i * 6\n \n        !$acc loop vector\n+       ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n        do j = 0, 31\n           arr(i * 32 + j) = arr(i * 32 + j) + pt%x + pt%y + pt%z + pt%attr(5);\n        end do\n@@ -92,10 +104,14 @@ subroutine t3(pt)\n \n     !$acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n     !$acc loop gang\n+    ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n     do i = 0, 31\n        !$acc loop worker\n+       ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n        do j = 0, 31\n           !$acc loop vector private(pt)\n+          ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+          ! { dg-note {variable 'pt' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } .-2 }\n           do k = 0, 31\n              pt(1) = ieor(i, j * 3)\n              pt(2) = ior(i, j * 5)"}, {"sha": "fad3d9d6a80764112b3de6e2e0cdffaa3cd6f3db", "filename": "libgomp/testsuite/libgomp.oacc-fortran/parallel-dims.f90", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -5,6 +5,12 @@\n ! { dg-do run }\n ! { dg-prune-output \"command-line option '-fintrinsic-modules-path=.*' is valid for Fortran but not for C\" }\n \n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n ! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n ! aspects of that functionality.\n \n@@ -62,6 +68,7 @@ program main\n   vectors_max = -huge(gangs_max) - 1 ! INT_MIN\n   !$acc serial &\n   !$acc   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max) ! { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } }\n+  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n   do i = 100, -99, -1\n      gangs_min = acc_gang ();\n      gangs_max = acc_gang ();\n@@ -90,6 +97,8 @@ program main\n   ! { dg-bogus \"\\[Ww\\]arning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-1 }\n   ! { dg-bogus \"\\[Ww\\]arning: region contains worker partitioned code but is not worker partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-2 }\n   ! { dg-bogus \"\\[Ww\\]arning: region contains vector partitioned code but is not vector partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-3 }\n+  ! { dg-note {variable 'C.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } .-4 }\n+  !TODO Unhandled 'CONST_DECL' instance for constant argument in 'acc_on_device' call.\n   if (acc_on_device (acc_device_nvidia)) then\n      ! The GCC nvptx back end enforces vector_length (32).\n      ! It's unclear if that's actually permissible here;\n@@ -98,10 +107,14 @@ program main\n    vectors_actual = 32\n   end if\n   !$acc loop gang reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n   do i = 100, -99, -1\n      !$acc loop worker reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+     ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n      do j = 100, -99, -1\n         !$acc loop vector reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n         do k = 100 * vectors_actual, -99 * vectors_actual, -1\n            gangs_min = acc_gang ();\n            gangs_max = acc_gang ();"}, {"sha": "4be7507e7ab99d4d252c131d2c2d828ffb092750", "filename": "libgomp/testsuite/libgomp.oacc-fortran/private-atomic-1-gang.f90", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivate-atomic-1-gang.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivate-atomic-1-gang.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivate-atomic-1-gang.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,17 +1,27 @@\n-! Test for \"oacc gang-private\" attribute on gang-private variables\n+! 'atomic' access of gang-private variable\n \n ! { dg-do run }\n-! { dg-additional-options \"-fdump-tree-oaccdevlow-details -w\" }\n+\n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n \n program main\n   integer :: w, arr(0:31)\n \n   !$acc parallel num_gangs(32) num_workers(32) copyout(arr)\n     !$acc loop gang private(w)\n-! { dg-final { scan-tree-dump-times \"Decl UID \\[0-9\\]+ has gang partitioning:  integer\\\\(kind=4\\\\) w;\" 1 \"oaccdevlow\" } } */\n+    ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+    ! { dg-note {variable 'w' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-2 }\n+    ! { dg-note {variable 'w' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } .-3 }\n+    ! { dg-note {variable 'w' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! openacc_host_selected } } .-4 }\n     do j = 0, 31\n       w = 0\n       !$acc loop seq\n+      ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n       do i = 0, 31\n         !$acc atomic update\n         w = w + 1"}, {"sha": "e916837fc8fbad4e933da692b5446ba3f356c689", "filename": "libgomp/testsuite/libgomp.oacc-fortran/private-atomic-1-vector.f90", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivate-atomic-1-vector.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivate-atomic-1-vector.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivate-atomic-1-vector.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -0,0 +1,42 @@\n+! 'atomic' access of vector-private variable\n+\n+! { dg-do run }\n+\n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n+\n+program main\n+  integer :: w, arr(0:31)\n+\n+  !$acc parallel num_gangs(32) num_workers(32) copyout(arr)\n+    !$acc loop gang worker vector private(w)\n+    ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+    ! { dg-note {variable 'w' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-2 }\n+    ! { dg-note {variable 'w' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } .-3 }\n+    ! { dg-note {variable 'w' adjusted for OpenACC privatization level: 'vector'} \"\" { target { ! openacc_host_selected } } .-4 }\n+    do j = 0, 31\n+      w = 0\n+      !$acc loop seq\n+      ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+      do i = 0, 31\n+        !$acc atomic update\n+        w = w + 1\n+        ! nvptx offloading: PR83812 \"operation not supported on global/shared address space\".\n+        ! { dg-output \"(\\n|\\r\\n|\\r)libgomp: cuStreamSynchronize error: operation not supported on global/shared address space(\\n|\\r\\n|\\r)$\" { target openacc_nvidia_accel_selected } }\n+        !   Scan for what we expect in the \"XFAILed\" case (without actually XFAILing).\n+        ! { dg-shouldfail \"XFAILed\" { openacc_nvidia_accel_selected } }\n+        !   ... instead of 'dg-xfail-run-if' so that 'dg-output' is evaluated at all.\n+        ! { dg-final { if { [dg-process-target { xfail openacc_nvidia_accel_selected }] == \"F\" } { xfail \"[testname-for-summary] really is XFAILed\" } } }\n+        !   ... so that we still get an XFAIL visible in the log.\n+        !$acc end atomic\n+      end do\n+      arr(j) = w\n+    end do\n+  !$acc end parallel\n+\n+  if (any (arr .ne. 32)) stop 1\n+end program main"}, {"sha": "5fa157b1674c504be0d09c85aa7a6d89a4969ac7", "filename": "libgomp/testsuite/libgomp.oacc-fortran/private-atomic-1-worker.f90", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivate-atomic-1-worker.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivate-atomic-1-worker.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivate-atomic-1-worker.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -1,17 +1,27 @@\n-! Test for worker-private variables\n+! 'atomic' access of worker-private variable\n \n ! { dg-do run }\n-! { dg-additional-options \"-fdump-tree-oaccdevlow-details\" }\n+\n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n \n program main\n   integer :: w, arr(0:31)\n \n   !$acc parallel num_gangs(32) num_workers(32) copyout(arr)\n     !$acc loop gang worker private(w)\n-! { dg-final { scan-tree-dump-times \"Decl UID \\[0-9\\]+ has worker partitioning:  integer\\\\(kind=4\\\\) w;\" 1 \"oaccdevlow\" } } */\n+    ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+    ! { dg-note {variable 'w' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-2 }\n+    ! { dg-note {variable 'w' ought to be adjusted for OpenACC privatization level: 'worker'} \"\" { target *-*-* } .-3 }\n+    ! { dg-note {variable 'w' adjusted for OpenACC privatization level: 'worker'} \"TODO\" { target { ! openacc_host_selected } xfail *-*-* } .-4 }\n     do j = 0, 31\n       w = 0\n       !$acc loop seq\n+      ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n       do i = 0, 31\n         !$acc atomic update\n         w = w + 1"}, {"sha": "e40a82fff1011c97b5cd2c2f2e3d8bf2ed1b0c3f", "filename": "libgomp/testsuite/libgomp.oacc-fortran/private-variables.f90", "status": "modified", "additions": 133, "deletions": 42, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivate-variables.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivate-variables.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivate-variables.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -2,9 +2,23 @@\n \n ! { dg-do run }\n \n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n ! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n ! aspects of that functionality.\n \n+! It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n+! passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n+! so to maintain compatibility with earlier Tcl releases, we manually\n+! initialize counter variables:\n+! { dg-line l_dummy[variable c_loop 0] }\n+! { dg-message \"dummy\" \"\" { target iN-VAl-Id } l_dummy } to avoid\n+! \"WARNING: dg-line var l_dummy defined, but not used\".\n+\n \n ! Test of gang-private variables declared on loop directive.\n \n@@ -18,7 +32,9 @@ subroutine t1()\n   !$acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n   ! { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 }\n   ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 }\n-  !$acc loop gang private(x)\n+  !$acc loop gang private(x) ! { dg-line l_loop[incr c_loop] }\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+  ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n   do i = 1, 32\n      x = i * 2;\n      arr(i) = arr(i) + x\n@@ -43,11 +59,14 @@ subroutine t2()\n \n   !$acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n   ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 }\n-  !$acc loop gang private(x)\n+  !$acc loop gang private(x) ! { dg-line l_loop[incr c_loop] }\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+  ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n   do i = 0, 31\n      x = i * 2;\n \n-     !$acc loop worker\n+     !$acc loop worker ! { dg-line l_loop[incr c_loop] }\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n      do j = 0, 31\n         arr(i * 32 + j) = arr(i * 32 + j) + x\n      end do\n@@ -72,11 +91,14 @@ subroutine t3()\n \n   !$acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n   ! { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 }\n-  !$acc loop gang private(x)\n+  !$acc loop gang private(x) ! { dg-line l_loop[incr c_loop] }\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+  ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n   do i = 0, 31\n      x = i * 2;\n \n-     !$acc loop vector\n+     !$acc loop vector ! { dg-line l_loop[incr c_loop] }\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n      do j = 0, 31\n         arr(i * 32 + j) = arr(i * 32 + j) + x\n      end do\n@@ -106,14 +128,26 @@ subroutine t4()\n \n   !$acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n   ! { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 }\n-  !$acc loop gang private(pt)\n+  !$acc loop gang private(pt) ! { dg-line l_loop[incr c_loop] }\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+  ! { dg-note {variable 'pt' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+  ! But, with optimizations enabled, per the '*.ssa' dump ('gcc/tree-ssa.c:execute_update_addresses_taken'):\n+  !     No longer having address taken: pt\n+  ! However, 'pt' remains in the candidate set:\n+  ! { dg-note {variable 'pt' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_loop$c_loop }\n+  ! Now, for GCN offloading, 'adjust_private_decl' does the privatization change right away:\n+  ! { dg-note {variable 'pt' adjusted for OpenACC privatization level: 'gang'} \"\" { target openacc_radeon_accel_selected } l_loop$c_loop }\n+  ! For nvptx offloading however, we first mark up 'pt', and then later apply the privatization change -- or, with optimizations enabled, don't, because we then don't actually call 'expand_var_decl'.\n+  ! { dg-note {variable 'pt' adjusted for OpenACC privatization level: 'gang'} \"\" { target { openacc_nvidia_accel_selected && { ! __OPTIMIZE__ } } } l_loop$c_loop }\n+  ! { dg-bogus {note: variable 'pt' adjusted for OpenACC privatization level: 'gang'} \"\" { target { openacc_nvidia_accel_selected && __OPTIMIZE__ } } l_loop$c_loop }\n   do i = 0, 31\n      pt%x = i\n      pt%y = i * 2\n      pt%z = i * 4\n      pt%attr(5) = i * 6\n \n-     !$acc loop vector\n+     !$acc loop vector ! { dg-line l_loop[incr c_loop] }\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n      do j = 0, 31\n         arr(i * 32 + j) = arr(i * 32 + j) + pt%x + pt%y + pt%z + pt%attr(5);\n      end do\n@@ -136,16 +170,22 @@ subroutine t5()\n   end do\n \n   !$acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n-  !$acc loop gang\n+  !$acc loop gang ! { dg-line l_loop[incr c_loop] }\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n   do i = 0, 31\n-     !$acc loop worker\n+     !$acc loop worker ! { dg-line l_loop[incr c_loop] }\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n      do j = 0, 31\n-        !$acc loop vector private(x)\n+        !$acc loop vector private(x) ! { dg-line l_loop[incr c_loop] }\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+        ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n         do k = 0, 31\n            x = ieor(i, j * 3)\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n         end do\n-        !$acc loop vector private(x)\n+        !$acc loop vector private(x) ! { dg-line l_loop[incr c_loop] }\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+        ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n         do k = 0, 31\n            x = ior(i, j * 5)\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n@@ -177,11 +217,18 @@ subroutine t6()\n   end do\n \n   !$acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n-  !$acc loop gang\n+  !$acc loop gang ! { dg-line l_loop[incr c_loop] }\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n   do i = 0, 31\n-     !$acc loop worker\n+     !$acc loop worker ! { dg-line l_loop[incr c_loop] }\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n      do j = 0, 31\n-        !$acc loop vector private(x, pt)\n+        !$acc loop vector private(x, pt) ! { dg-line l_loop[incr c_loop] }\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+        ! { dg-bogus {note: variable 'x' in 'private' clause} \"\" { target *-*-* } l_loop$c_loop }\n+        ! { dg-note {variable 'pt' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+        ! { dg-note {variable 'pt' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop }\n+        ! { dg-note {variable 'pt' adjusted for OpenACC privatization level: 'vector'} \"\" { target { ! openacc_host_selected } } l_loop$c_loop }\n         do k = 0, 31\n            pt(1) = ieor(i, j * 3)\n            pt(2) = ior(i, j * 5)\n@@ -217,9 +264,13 @@ subroutine t7()\n \n   !$acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n   ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 }\n-  !$acc loop gang private(x)\n+  !$acc loop gang private(x) ! { dg-line l_loop[incr c_loop] }\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+  ! { dg-bogus {note: variable 'x' in 'private' clause} \"\" { target *-*-* } l_loop$c_loop }\n   do i = 0, 31\n-     !$acc loop worker private(x)\n+     !$acc loop worker private(x) ! { dg-line l_loop[incr c_loop] }\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+     ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n      do j = 0, 31\n         x = ieor(i, j * 3)\n         arr(i * 32 + j) = arr(i * 32 + j) + x\n@@ -244,13 +295,17 @@ subroutine t8()\n   end do\n \n   !$acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n-  !$acc loop gang\n+  !$acc loop gang ! { dg-line l_loop[incr c_loop] }\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n   do i = 0, 31\n-     !$acc loop worker private(x)\n+     !$acc loop worker private(x) ! { dg-line l_loop[incr c_loop] }\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+     ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n      do j = 0, 31\n         x = ieor(i, j * 3)\n \n-        !$acc loop vector\n+        !$acc loop vector ! { dg-line l_loop[incr c_loop] }\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n         do k = 0, 31\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n         end do\n@@ -280,23 +335,30 @@ subroutine t9()\n   end do\n \n   !$acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n-  !$acc loop gang\n+  !$acc loop gang ! { dg-line l_loop[incr c_loop] }\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n   do i = 0, 31\n-     !$acc loop worker private(x)\n+     !$acc loop worker private(x) ! { dg-line l_loop[incr c_loop] }\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+     ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n      do j = 0, 31\n         x = ieor(i, j * 3)\n \n-        !$acc loop vector\n+        !$acc loop vector ! { dg-line l_loop[incr c_loop] }\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n         do k = 0, 31\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n         end do\n      end do\n \n-     !$acc loop worker private(x)\n+     !$acc loop worker private(x) ! { dg-line l_loop[incr c_loop] }\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+     ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n      do j = 0, 31\n         x = ior(i, j * 5)\n \n-        !$acc loop vector\n+        !$acc loop vector ! { dg-line l_loop[incr c_loop] }\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n         do k = 0, 31\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n         end do\n@@ -328,20 +390,25 @@ subroutine t10()\n   end do\n \n   !$acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n-  !$acc loop gang\n+  !$acc loop gang ! { dg-line l_loop[incr c_loop] }\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n   do i = 0, 31\n-     !$acc loop worker private(x)\n+     !$acc loop worker private(x) ! { dg-line l_loop[incr c_loop] }\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+     ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n      do j = 0, 31\n         x = ieor(i, j * 3)\n \n-        !$acc loop vector\n+        !$acc loop vector ! { dg-line l_loop[incr c_loop] }\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n         do k = 0, 31\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n         end do\n \n         x = ior(i, j * 5)\n \n-        !$acc loop vector\n+        !$acc loop vector ! { dg-line l_loop[incr c_loop] }\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n         do k = 0, 31\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n         end do\n@@ -375,21 +442,29 @@ subroutine t11()\n   end do\n \n   !$acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n-  !$acc loop gang\n+  !$acc loop gang ! { dg-line l_loop[incr c_loop] }\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n   do i = 0, 31\n-     !$acc loop worker private(x, p)\n+     !$acc loop worker private(x, p) ! { dg-line l_loop[incr c_loop] }\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+     ! { dg-note {variable 'x' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     ! { dg-note {variable 'x' ought to be adjusted for OpenACC privatization level: 'worker'} \"\" { target *-*-* } l_loop$c_loop }\n+     ! { dg-note {variable 'x' adjusted for OpenACC privatization level: 'worker'} \"TODO\" { target { ! openacc_host_selected } xfail *-*-* } l_loop$c_loop }\n+     ! { dg-note {variable 'p' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n      do j = 0, 31\n         p => x\n         x = ieor(i, j * 3)\n \n-        !$acc loop vector\n+        !$acc loop vector ! { dg-line l_loop[incr c_loop] }\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n         do k = 0, 31\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n         end do\n \n         p = ior(i, j * 5)\n \n-        !$acc loop vector\n+        !$acc loop vector ! { dg-line l_loop[incr c_loop] }\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n         do k = 0, 31\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n         end do\n@@ -426,19 +501,24 @@ subroutine t12()\n   end do\n \n   !$acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n-  !$acc loop gang\n+  !$acc loop gang ! { dg-line l_loop[incr c_loop] }\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n   do i = 0, 31\n-     !$acc loop worker private(pt)\n+     !$acc loop worker private(pt) ! { dg-line l_loop[incr c_loop] }\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+     ! { dg-note {variable 'pt' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n      do j = 0, 31\n         pt%x = ieor(i, j * 3)\n         pt%y = ior(i, j * 5)\n         \n-        !$acc loop vector\n+        !$acc loop vector ! { dg-line l_loop[incr c_loop] }\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n         do k = 0, 31\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + pt%x * k\n         end do\n \n-        !$acc loop vector\n+        !$acc loop vector ! { dg-line l_loop[incr c_loop] }\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n         do k = 0, 31\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + pt%y * k\n         end do\n@@ -470,19 +550,26 @@ subroutine t13()\n   end do\n \n   !$acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n-  !$acc loop gang\n+  !$acc loop gang ! { dg-line l_loop[incr c_loop] }\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n   do i = 0, 31\n-     !$acc loop worker private(pt)\n+     !$acc loop worker private(pt) ! { dg-line l_loop[incr c_loop] }\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+     ! { dg-note {variable 'pt' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     ! { dg-note {variable 'pt' ought to be adjusted for OpenACC privatization level: 'worker'} \"\" { target *-*-* } l_loop$c_loop }\n+     ! { dg-note {variable 'pt' adjusted for OpenACC privatization level: 'worker'} \"TODO\" { target { ! openacc_host_selected } xfail *-*-* } l_loop$c_loop } */\n      do j = 0, 31\n         pt(1) = ieor(i, j * 3)\n         pt(2) = ior(i, j * 5)\n         \n-        !$acc loop vector\n+        !$acc loop vector ! { dg-line l_loop[incr c_loop] }\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n         do k = 0, 31\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + pt(1) * k\n         end do\n \n-        !$acc loop vector\n+        !$acc loop vector ! { dg-line l_loop[incr c_loop] }\n+        ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n         do k = 0, 31\n            arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + pt(2) * k\n         end do\n@@ -518,13 +605,17 @@ subroutine t14()\n   !$acc parallel private(x) copy(arr) num_gangs(n) num_workers(8) vector_length(32)\n   ! { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 }\n   ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 }\n-    !$acc loop gang(static:1)\n+    !$acc loop gang(static:1) ! { dg-line l_loop[incr c_loop] }\n+    ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n     do i = 1, n\n       x = i * 2;\n     end do\n \n-   !$acc loop gang(static:1)\n+   !$acc loop gang(static:1) ! { dg-line l_loop[incr c_loop] }\n+    ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n     do i = 1, n\n+       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_loop$c_loop }\n+       !TODO Unhandled 'CONST_DECL' instance for constant argument in 'acc_on_device' call.\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) x = i * 2\n       arr(i) = arr(i) + x\n     end do"}, {"sha": "ba638da8628c3f81aa2e5d52a62fd78e0acb9ab9", "filename": "libgomp/testsuite/libgomp.oacc-fortran/privatized-ref-2.f90", "status": "modified", "additions": 61, "deletions": 10, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -7,6 +7,20 @@\n ! XFAIL the \"UNRESOLVED: [...] compilation failed to produce executable\", or\n ! get rid of it, unfortunately.\n \n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n+! It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n+! passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n+! so to maintain compatibility with earlier Tcl releases, we manually\n+! initialize counter variables:\n+! { dg-line l_dummy[variable c_compute 0 c_loop 0] }\n+! { dg-message \"dummy\" \"\" { target iN-VAl-Id } l_dummy } to avoid\n+! \"WARNING: dg-line var l_dummy defined, but not used\".  */\n+\n program main\n   implicit none (type, external)\n   integer :: j\n@@ -28,10 +42,18 @@ subroutine foo (array, nn)\n     integer :: i, nn\n     integer :: array(nn)\n \n-    !$acc parallel copyout(array)\n+    !$acc parallel copyout(array) ! { dg-line l_compute[incr c_compute] }\n+    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'atmp\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'shadow_loopvar\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'offset\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'S\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'test\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     array = [(-i, i = 1, nn)]\n-    !$acc loop gang private(array)\n-    ! { dg-message {sorry, unimplemented: target cannot support alloca} PR65181 { target openacc_nvidia_accel_selected } .-1 }\n+    !$acc loop gang private(array) ! { dg-line l_loop[incr c_loop] }\n+    ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'array' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-message {sorry, unimplemented: target cannot support alloca} PR65181 { target openacc_nvidia_accel_selected } l_loop$c_loop }\n     do i = 1, 10\n       array(i) = i\n     end do\n@@ -42,10 +64,26 @@ subroutine bar (array)\n     integer :: i\n     integer :: array(:)\n \n-    !$acc parallel copyout(array)\n+    !$acc parallel copyout(array) ! { dg-line l_compute[incr c_compute] }\n+    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'atmp\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'shadow_loopvar\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'offset\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'S\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'test\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'parm\\.[0-9]+' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'parm\\.[0-9]+' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! { openacc_host_selected || openacc_nvidia_accel_selected } } } l_compute$c_compute }\n+    ! { dg-note {variable 'A\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'A\\.[0-9]+' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'A\\.[0-9]+' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! { openacc_host_selected || openacc_nvidia_accel_selected } } } l_compute$c_compute }\n     array = [(-2*i, i = 1, size(array))]\n-    !$acc loop gang private(array)\n-    ! { dg-message {sorry, unimplemented: target cannot support alloca} PR65181 { target openacc_nvidia_accel_selected } .-1 }\n+    !$acc loop gang private(array) ! { dg-line l_loop[incr c_loop] }\n+    ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'array\\.[0-9]+' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'array\\.[0-9]+' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'array\\.[0-9]+' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! { openacc_host_selected || openacc_nvidia_accel_selected } } } l_loop$c_loop }\n+    ! { dg-message {sorry, unimplemented: target cannot support alloca} PR65181 { target openacc_nvidia_accel_selected } l_loop$c_loop }\n     do i = 1, 10\n       array(i) = 9*i\n     end do\n@@ -56,10 +94,17 @@ subroutine foo_str(str)\n     integer :: i\n     character(len=*) :: str\n \n-    !$acc parallel copyout(str)\n+    !$acc parallel copyout(str) ! { dg-line l_compute[incr c_compute] }\n+    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     str = \"abcdefghij\"\n-    !$acc loop gang private(str)\n-    ! { dg-message {sorry, unimplemented: target cannot support alloca} PR65181 { target openacc_nvidia_accel_selected } .-1 }\n+    !$acc loop gang private(str) ! { dg-line l_loop[incr c_loop] }\n+    ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'str' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'char\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'char\\.[0-9]+' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'char\\.[0-9]+' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! { openacc_host_selected || openacc_nvidia_accel_selected } } } l_loop$c_loop }\n+    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-message {sorry, unimplemented: target cannot support alloca} PR65181 { target openacc_nvidia_accel_selected } l_loop$c_loop }\n     do i = 1, 10\n       str(i:i) = achar(ichar('A') + i)\n     end do\n@@ -88,7 +133,13 @@ subroutine foobar (scalar)\n \n     !$acc parallel copyout(scalar)\n     scalar = \"abcdefghi-12345\"\n-    !$acc loop gang private(scalar)\n+    !$acc loop gang private(scalar) ! { dg-line l_loop[incr c_loop] }\n+    ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'scalar' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'char\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'char\\.[0-9]+' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'char\\.[0-9]+' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! { openacc_host_selected || openacc_nvidia_accel_selected } } } l_loop$c_loop }\n+    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n     do i = 1, 15\n       scalar(i:i) = achar(ichar('A') + i)\n     end do"}, {"sha": "75660bb39b5477142a7df939a69c9a0e1d34e9f9", "filename": "libgomp/testsuite/libgomp.oacc-fortran/routine-7.f90", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8286a83289f5b54e813f14ff56d730c3f3185/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-7.f90?ref=11b8286a83289f5b54e813f14ff56d730c3f3185", "patch": "@@ -2,6 +2,12 @@\n ! { dg-do run }\n ! { dg-additional-options \"-cpp\" }\n \n+! { dg-additional-options \"-fopt-info-note-omp\" }\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+! for testing/documenting aspects of that functionality.\n+\n ! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n ! aspects of that functionality.\n !TODO { dg-additional-options \"-fno-inline\" } for stable results regarding OpenACC 'routine'.\n@@ -20,6 +26,7 @@ program main\n \n   !$acc parallel copy (a)\n   !$acc loop seq\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n     do i = 1, N\n       call seq (a)\n     end do\n@@ -31,6 +38,7 @@ program main\n \n   !$acc parallel copy (a)\n   !$acc loop seq\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n     do i = 1, N \n       call gang (a)\n     end do\n@@ -46,6 +54,7 @@ program main\n \n   !$acc parallel copy (b)\n   !$acc loop seq\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n     do i = 1, N\n       call worker (b)\n     end do\n@@ -61,6 +70,7 @@ program main\n \n   !$acc parallel copy (a)\n   !$acc loop seq\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n     do i = 1, N\n       call vector (a)\n     end do\n@@ -78,6 +88,7 @@ subroutine vector (a)\n   integer :: i\n \n   !$acc loop vector\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n   do i = 1, N\n     a(i) = a(i) - a(i) \n   end do\n@@ -90,8 +101,10 @@ subroutine worker (b)\n   integer :: i, j\n \n   !$acc loop worker\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n   do i = 1, N\n   !$acc loop vector\n+     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n     do j = 1, M\n       b(j + ((i - 1) * M)) = b(j + ((i - 1) * M)) + 1\n     end do\n@@ -107,6 +120,7 @@ subroutine gang (a)\n   integer :: i\n \n   !$acc loop gang\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n   do i = 1, N\n     a(i) = a(i) - i \n   end do"}]}