{"sha": "14f45d6b9fc14b4dcfb86464cb61536de48023cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRmNDVkNmI5ZmMxNGI0ZGNmYjg2NDY0Y2I2MTUzNmRlNDgwMjNjYw==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "1999-03-17T18:33:17Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "1999-03-17T18:33:17Z"}, "message": "sparc.h (TARGET_SWITCHES, [...]): Add descriptions.\n\n\t* config/sparc/sparc.h (TARGET_SWITCHES, TARGET_OPTIONS):\n\tAdd descriptions.\n\t* config/sparc/sp64-elf.h (SUBTARGET_SWITCHES): Likewise.\n\t* config/sparc/splet.h (SUBTARGET_SWITCHES): Likewise.\n\nFrom-SVN: r25827", "tree": {"sha": "cda8d9fba7eff464fc8b2f918f64db2f12d49ad6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cda8d9fba7eff464fc8b2f918f64db2f12d49ad6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14f45d6b9fc14b4dcfb86464cb61536de48023cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f45d6b9fc14b4dcfb86464cb61536de48023cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14f45d6b9fc14b4dcfb86464cb61536de48023cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f45d6b9fc14b4dcfb86464cb61536de48023cc/comments", "author": null, "committer": null, "parents": [{"sha": "46eb0ae4fbecefc324ffc977f12a94d9b29292a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46eb0ae4fbecefc324ffc977f12a94d9b29292a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46eb0ae4fbecefc324ffc977f12a94d9b29292a7"}], "stats": {"total": 103, "additions": 55, "deletions": 48}, "files": [{"sha": "17611fcbdc3a59b86938f729f3fe329660b0b5e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f45d6b9fc14b4dcfb86464cb61536de48023cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f45d6b9fc14b4dcfb86464cb61536de48023cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14f45d6b9fc14b4dcfb86464cb61536de48023cc", "patch": "@@ -1,3 +1,10 @@\n+Wed Mar 17 18:20:24 1999  David S. Miller  <davem@redhat.com>\n+\n+\t* config/sparc/sparc.h (TARGET_SWITCHES, TARGET_OPTIONS):\n+\tAdd descriptions.\n+\t* config/sparc/sp64-elf.h (SUBTARGET_SWITCHES): Likewise.\n+\t* config/sparc/splet.h (SUBTARGET_SWITCHES): Likewise.\n+\n Wed Mar 17 14:51:19 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* alpha.h (HARD_REGNO_MODE_OK): Allow only 4 and 8 byte unit modes"}, {"sha": "4fd81c55c4702b6781f07f132d7567165a0a2508", "filename": "gcc/config/sparc/sp64-elf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f45d6b9fc14b4dcfb86464cb61536de48023cc/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f45d6b9fc14b4dcfb86464cb61536de48023cc/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h?ref=14f45d6b9fc14b4dcfb86464cb61536de48023cc", "patch": "@@ -80,8 +80,8 @@ crtbegin.o%s \\\n /* V9 chips can handle either endianness.  */\n #undef SUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES \\\n-{\"big-endian\", -MASK_LITTLE_ENDIAN}, \\\n-{\"little-endian\", MASK_LITTLE_ENDIAN},\n+{\"big-endian\", -MASK_LITTLE_ENDIAN, \"Generate code for big endian\" }, \\\n+{\"little-endian\", MASK_LITTLE_ENDIAN, \"Generate code for little endian\" },\n \n #undef BYTES_BIG_ENDIAN\n #define BYTES_BIG_ENDIAN (! TARGET_LITTLE_ENDIAN)"}, {"sha": "c25d0fd6339e9b3b45da456d0587e605c39602e8", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f45d6b9fc14b4dcfb86464cb61536de48023cc/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f45d6b9fc14b4dcfb86464cb61536de48023cc/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=14f45d6b9fc14b4dcfb86464cb61536de48023cc", "patch": "@@ -569,42 +569,42 @@ extern int target_flags;\n    An empty string NAME is used to identify the default VALUE.  */\n \n #define TARGET_SWITCHES  \\\n-  { {\"fpu\", MASK_FPU | MASK_FPU_SET},\t\\\n-    {\"no-fpu\", -MASK_FPU},\t\t\\\n-    {\"no-fpu\", MASK_FPU_SET},\t\t\\\n-    {\"hard-float\", MASK_FPU | MASK_FPU_SET}, \\\n-    {\"soft-float\", -MASK_FPU},\t\t\\\n-    {\"soft-float\", MASK_FPU_SET},\t\\\n-    {\"epilogue\", MASK_EPILOGUE},\t\\\n-    {\"no-epilogue\", -MASK_EPILOGUE},\t\\\n-    {\"unaligned-doubles\", MASK_UNALIGNED_DOUBLES}, \\\n-    {\"no-unaligned-doubles\", -MASK_UNALIGNED_DOUBLES}, \\\n-    {\"impure-text\", MASK_IMPURE_TEXT},\t\\\n-    {\"no-impure-text\", -MASK_IMPURE_TEXT}, \\\n-    {\"flat\", MASK_FLAT},\t\t\\\n-    {\"no-flat\", -MASK_FLAT},\t\t\\\n-    {\"app-regs\", MASK_APP_REGS},\t\\\n-    {\"no-app-regs\", -MASK_APP_REGS},\t\\\n-    {\"hard-quad-float\", MASK_HARD_QUAD}, \\\n-    {\"soft-quad-float\", -MASK_HARD_QUAD}, \\\n-    {\"v8plus\", MASK_V8PLUS},\t\t\\\n-    {\"no-v8plus\", -MASK_V8PLUS},\t\\\n-    {\"vis\", MASK_VIS},\t\t\t\\\n-    {\"no-vis\", -MASK_VIS},\t\t\\\n+  { {\"fpu\", MASK_FPU | MASK_FPU_SET,\t\t\t\"Use hardware fp\" },\t\t\\\n+    {\"no-fpu\", -MASK_FPU,\t\t\t\t\"Do not use hardware fp\" },\t\\\n+    {\"no-fpu\", MASK_FPU_SET,\t\t\t\t\"Do not use hardware fp\" },\t\\\n+    {\"hard-float\", MASK_FPU | MASK_FPU_SET,\t\t\"Use hardware fp\" },\t\t\\\n+    {\"soft-float\", -MASK_FPU,\t\t\t\t\"Do not use hardware fp\" },\t\\\n+    {\"soft-float\", MASK_FPU_SET,\t\t\t\"Do not use hardware fp\" },\t\\\n+    {\"epilogue\", MASK_EPILOGUE,\t\t\t\t\"Use FUNCTION_EPILOGUE\" },\t\\\n+    {\"no-epilogue\", -MASK_EPILOGUE,\t\t\t\"Do not use FUNCTION_EPILOGUE\" }, \t\\\n+    {\"unaligned-doubles\", MASK_UNALIGNED_DOUBLES,\t\"Assume possible double misalignment\" },\\\n+    {\"no-unaligned-doubles\", -MASK_UNALIGNED_DOUBLES,\t\"Assume all doubles are aligned\" }, \\\n+    {\"impure-text\", MASK_IMPURE_TEXT,\t\t\t\"Pass -assert pure-text to linker\" }, \\\n+    {\"no-impure-text\", -MASK_IMPURE_TEXT,\t\t\"Do not pass -assert pure-text to linker\" }, \\\n+    {\"flat\", MASK_FLAT,\t\t\t\t\t\"Use flat register window model\" }, \\\n+    {\"no-flat\", -MASK_FLAT,\t\t\t\t\"Do not use flat register window model\" }, \\\n+    {\"app-regs\", MASK_APP_REGS,\t\t\t\t\"Use ABI reserved registers\" },\t\\\n+    {\"no-app-regs\", -MASK_APP_REGS,\t\t\t\"Do not use ABI reserved registers\" }, \\\n+    {\"hard-quad-float\", MASK_HARD_QUAD,\t\t\t\"Use hardware quad fp instructions\" }, \\\n+    {\"soft-quad-float\", -MASK_HARD_QUAD,\t\t\"Do not use hardware quad fp instructions\" }, \\\n+    {\"v8plus\", MASK_V8PLUS,\t\t\t\t\"Compile for v8plus ABI\" },\t\\\n+    {\"no-v8plus\", -MASK_V8PLUS,\t\t\t\t\"Do not compile for v8plus ABI\" }, \\\n+    {\"vis\", MASK_VIS,\t\t\t\t\t\"Utilize Visual Instruction Set\" }, \\\n+    {\"no-vis\", -MASK_VIS,\t\t\t\t\"Do not utilize Visual Instruction Set\" }, \\\n     /* ??? These are deprecated, coerced to -mcpu=.  Delete in 2.9.  */ \\\n-    {\"cypress\", 0},\t\t\t\\\n-    {\"sparclite\", 0},\t\t\t\\\n-    {\"f930\", 0},\t\t\t\\\n-    {\"f934\", 0},\t\t\t\\\n-    {\"v8\", 0},\t\t\t\t\\\n-    {\"supersparc\", 0},\t\t\t\\\n+    {\"cypress\", 0,\t\t\t\t\t\"Optimize for Cypress processors\" }, \\\n+    {\"sparclite\", 0,\t\t\t\t\t\"Optimize for SparcLite processors\" }, \\\n+    {\"f930\", 0,\t\t\t\t\t\t\"Optimize for F930 processors\" }, \\\n+    {\"f934\", 0,\t\t\t\t\t\t\"Optimize for F934 processors\" }, \\\n+    {\"v8\", 0,\t\t\t\t\t\t\"Use V8 Sparc ISA\" }, \\\n+    {\"supersparc\", 0,\t\t\t\t\t\"Optimize for SuperSparc processors\" }, \\\n     /* End of deprecated options.  */\t\\\n-    {\"ptr64\", MASK_PTR64},\t\t\\\n-    {\"ptr32\", -MASK_PTR64},\t\t\\\n-    {\"32\", -MASK_64BIT},\t\t\\\n-    {\"64\", MASK_64BIT},\t\t\t\\\n-    {\"stack-bias\", MASK_STACK_BIAS},\t\\\n-    {\"no-stack-bias\", -MASK_STACK_BIAS}, \\\n+    {\"ptr64\", MASK_PTR64,\t\t\t\t\"Pointers are 64-bit\" }, \\\n+    {\"ptr32\", -MASK_PTR64,\t\t\t\t\"Pointers are 32-bit\" }, \\\n+    {\"32\", -MASK_64BIT,\t\t\t\t\t\"Use 32-bit ABI\" }, \\\n+    {\"64\", MASK_64BIT,\t\t\t\t\t\"Use 64-bit ABI\" }, \\\n+    {\"stack-bias\", MASK_STACK_BIAS,\t\t\t\"Use stack bias\" }, \\\n+    {\"no-stack-bias\", -MASK_STACK_BIAS,\t\t\t\"Do not use stack bias\" }, \\\n     SUBTARGET_SWITCHES\t\t\t\\\n     { \"\", TARGET_DEFAULT}}\n \n@@ -660,12 +660,12 @@ extern enum processor_type sparc_cpu;\n \n #define TARGET_OPTIONS \\\n {\t\t\t\t\t\t\t\\\n-  { \"cpu=\",  &sparc_select[1].string },\t\t\t\\\n-  { \"tune=\", &sparc_select[2].string },\t\t\t\\\n-  { \"cmodel=\", &sparc_cmodel_string },\t\t\t\\\n-  { \"align-loops=\",\t&sparc_align_loops_string },\t\\\n-  { \"align-jumps=\",\t&sparc_align_jumps_string },\t\\\n-  { \"align-functions=\",\t&sparc_align_funcs_string },\t\\\n+  { \"cpu=\",  &sparc_select[1].string, \"Use features of and schedule code for given CPU\" }, \\\n+  { \"tune=\", &sparc_select[2].string, \"Schedule code for given CPU\" }, \\\n+  { \"cmodel=\", &sparc_cmodel_string, \"Use given Sparc code model\" }, \\\n+  { \"align-loops=\",\t&sparc_align_loops_string, \"Loop code aligned to this power of 2\" }, \\\n+  { \"align-jumps=\",\t&sparc_align_jumps_string, \"Jump targets are aligned to this power of 2\" }, \\\n+  { \"align-functions=\",\t&sparc_align_funcs_string, \"Function starts are aligned to this power of 2\" }, \\\n   SUBTARGET_OPTIONS \t\t\t\t\t\\\n }\n "}, {"sha": "d924e708996374845280179dab109a4a35c4de8e", "filename": "gcc/config/sparc/splet.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f45d6b9fc14b4dcfb86464cb61536de48023cc/gcc%2Fconfig%2Fsparc%2Fsplet.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f45d6b9fc14b4dcfb86464cb61536de48023cc/gcc%2Fconfig%2Fsparc%2Fsplet.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsplet.h?ref=14f45d6b9fc14b4dcfb86464cb61536de48023cc", "patch": "@@ -29,12 +29,12 @@ Boston, MA 02111-1307, USA.  */\n /* -mlive-g0 is only supported on the sparclet.  */\n #undef SUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES \\\n-{\"big-endian\", -MASK_LITTLE_ENDIAN},\t\t\\\n-{\"little-endian\", MASK_LITTLE_ENDIAN},\t\t\\\n-{\"live-g0\", MASK_LIVE_G0},\t\t\t\\\n-{\"no-live-g0\", -MASK_LIVE_G0},\t\t\t\\\n-{\"broken-saverestore\", MASK_BROKEN_SAVERESTORE},\t\\\n-{\"no-broken-saverestore\", -MASK_BROKEN_SAVERESTORE},\n+{\"big-endian\", -MASK_LITTLE_ENDIAN, \"Generate code for big endian\" }, \\\n+{\"little-endian\", MASK_LITTLE_ENDIAN, \"Generate code for little endian\" }, \\\n+{\"live-g0\", MASK_LIVE_G0, \"Use g0 as a normal register\" }, \\\n+{\"no-live-g0\", -MASK_LIVE_G0, \"Register g0 is fixed with a zero value\" }, \\\n+{\"broken-saverestore\", MASK_BROKEN_SAVERESTORE, \"Enable save/restore bug workarounds\" }, \\\n+{\"no-broken-saverestore\", -MASK_BROKEN_SAVERESTORE, \"Disable save/restore bug workarouns\" },\n \n #undef ASM_SPEC\n #define ASM_SPEC \"%{mlittle-endian:-EL} %(asm_cpu)\""}]}