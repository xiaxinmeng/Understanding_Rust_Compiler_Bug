{"sha": "387fd02d7e0ec8bdca519b096dc464d2f267a979", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg3ZmQwMmQ3ZTBlYzhiZGNhNTE5YjA5NmRjNDY0ZDJmMjY3YTk3OQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-03-21T22:05:05Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-03-21T22:05:05Z"}, "message": "(seq, sne, sgt, slt, sge, sle): Add support for\n!TARGET_HARD_QUAD.\n\nFrom-SVN: r6839", "tree": {"sha": "89086df532e2a473dbc29162958a41814475b275", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89086df532e2a473dbc29162958a41814475b275"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/387fd02d7e0ec8bdca519b096dc464d2f267a979", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387fd02d7e0ec8bdca519b096dc464d2f267a979", "html_url": "https://github.com/Rust-GCC/gccrs/commit/387fd02d7e0ec8bdca519b096dc464d2f267a979", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387fd02d7e0ec8bdca519b096dc464d2f267a979/comments", "author": null, "committer": null, "parents": [{"sha": "ce0e109b79a541106262867f004c937fac67c47c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce0e109b79a541106262867f004c937fac67c47c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce0e109b79a541106262867f004c937fac67c47c"}], "stats": {"total": 58, "additions": 52, "deletions": 6}, "files": [{"sha": "c6f6392d0c07d2307e1b714f92a170d484266a4d", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 52, "deletions": 6, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387fd02d7e0ec8bdca519b096dc464d2f267a979/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387fd02d7e0ec8bdca519b096dc464d2f267a979/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=387fd02d7e0ec8bdca519b096dc464d2f267a979", "patch": "@@ -264,12 +264,19 @@\n \t(eq:SI (match_dup 1) (const_int 0)))]\n   \"\"\n   \"\n-{ if (GET_MODE (sparc_compare_op0) == SImode)\n+{\n+  if (GET_MODE (sparc_compare_op0) == SImode)\n     {\n       emit_insn (gen_seq_special (operands[0], sparc_compare_op0,\n \t\t\t\t  sparc_compare_op1));\n       DONE;\n     }\n+  else if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n+    {\n+      emit_float_lib_cmp (sparc_compare_op0, sparc_compare_op1, EQ);\n+      emit_insn (gen_sne (operands[0]));\n+      DONE;\n+    }      \n   else\n     operands[1] = gen_compare_reg (EQ, sparc_compare_op0, sparc_compare_op1);\n }\")\n@@ -279,12 +286,19 @@\n \t(ne:SI (match_dup 1) (const_int 0)))]\n   \"\"\n   \"\n-{ if (GET_MODE (sparc_compare_op0) == SImode)\n+{\n+  if (GET_MODE (sparc_compare_op0) == SImode)\n     {\n       emit_insn (gen_sne_special (operands[0], sparc_compare_op0,\n \t\t\t\t  sparc_compare_op1));\n       DONE;\n     }\n+  else if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n+    {\n+      emit_float_lib_cmp (sparc_compare_op0, sparc_compare_op1, NE);\n+      emit_insn (gen_sne (operands[0]));\n+      DONE;\n+    }      \n   else\n     operands[1] = gen_compare_reg (NE, sparc_compare_op0, sparc_compare_op1);\n }\")\n@@ -294,28 +308,60 @@\n \t(gt:SI (match_dup 1) (const_int 0)))]\n   \"\"\n   \"\n-{ operands[1] = gen_compare_reg (GT, sparc_compare_op0, sparc_compare_op1); }\")\n+{\n+  if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n+    {\n+      emit_float_lib_cmp (sparc_compare_op0, sparc_compare_op1, GT);\n+      emit_insn (gen_sne (operands[0]));\n+      DONE;\n+    }\n+  operands[1] = gen_compare_reg (GT, sparc_compare_op0, sparc_compare_op1);\n+}\")\n \n (define_expand \"slt\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(lt:SI (match_dup 1) (const_int 0)))]\n   \"\"\n   \"\n-{ operands[1] = gen_compare_reg (LT, sparc_compare_op0, sparc_compare_op1); }\")\n+{\n+  if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n+    {\n+      emit_float_lib_cmp (sparc_compare_op0, sparc_compare_op1, LT);\n+      emit_insn (gen_sne (operands[0]));\n+      DONE;\n+    }\n+  operands[1] = gen_compare_reg (LT, sparc_compare_op0, sparc_compare_op1);\n+}\")\n \n (define_expand \"sge\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(ge:SI (match_dup 1) (const_int 0)))]\n   \"\"\n   \"\n-{ operands[1] = gen_compare_reg (GE, sparc_compare_op0, sparc_compare_op1); }\")\n+{\n+  if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n+    {\n+      emit_float_lib_cmp (sparc_compare_op0, sparc_compare_op1, GE);\n+      emit_insn (gen_sne (operands[0]));\n+      DONE;\n+    }\n+  operands[1] = gen_compare_reg (GE, sparc_compare_op0, sparc_compare_op1);\n+}\")\n \n (define_expand \"sle\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(le:SI (match_dup 1) (const_int 0)))]\n   \"\"\n   \"\n-{ operands[1] = gen_compare_reg (LE, sparc_compare_op0, sparc_compare_op1); }\")\n+{\n+  if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n+    {\n+      emit_float_lib_cmp (sparc_compare_op0, sparc_compare_op1, LE);\n+      emit_insn (gen_sne (operands[0]));\n+      DONE;\n+    }\n+  operands[1] = gen_compare_reg (LE, sparc_compare_op0, sparc_compare_op1);\n+}\")\n \n (define_expand \"sgtu\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")"}]}