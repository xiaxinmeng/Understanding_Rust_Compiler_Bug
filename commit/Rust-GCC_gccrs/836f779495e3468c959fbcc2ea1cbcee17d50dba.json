{"sha": "836f779495e3468c959fbcc2ea1cbcee17d50dba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM2Zjc3OTQ5NWUzNDY4Yzk1OWZiY2MyZWExY2JjZWUxN2Q1MGRiYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2007-07-02T20:01:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-07-02T20:01:32Z"}, "message": "tree.h (alias_sets_might_conflict_p): Rename into alias_sets_must_conflict_p.\n\n\t* tree.h (alias_sets_might_conflict_p): Rename into\n\talias_sets_must_conflict_p.\n\t* alias.c (alias_sets_might_conflict_p): Likewise.\n\t(alias_sets_conflict_p): Use it.\n\t(objects_must_conflict_p): Likewise.\n\t* c-common.c (strict_aliasing_warning): Adjust.\n\nFrom-SVN: r126233", "tree": {"sha": "f7db65dfa2caa203ff0ea981d01b96e5c7e60545", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7db65dfa2caa203ff0ea981d01b96e5c7e60545"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/836f779495e3468c959fbcc2ea1cbcee17d50dba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/836f779495e3468c959fbcc2ea1cbcee17d50dba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/836f779495e3468c959fbcc2ea1cbcee17d50dba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/836f779495e3468c959fbcc2ea1cbcee17d50dba/comments", "author": null, "committer": null, "parents": [{"sha": "f4e9e7fa002a82dd6d0d94acd56892e867842b3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e9e7fa002a82dd6d0d94acd56892e867842b3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e9e7fa002a82dd6d0d94acd56892e867842b3b"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "6f583792d9bff6f0dcc99f1c5ce734f67aa80671", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/836f779495e3468c959fbcc2ea1cbcee17d50dba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/836f779495e3468c959fbcc2ea1cbcee17d50dba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=836f779495e3468c959fbcc2ea1cbcee17d50dba", "patch": "@@ -1,3 +1,12 @@\n+2007-07-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree.h (alias_sets_might_conflict_p): Rename into\n+\talias_sets_must_conflict_p.\n+\t* alias.c (alias_sets_might_conflict_p): Likewise.\n+\t(alias_sets_conflict_p): Use it.\n+\t(objects_must_conflict_p): Likewise.\n+\t* c-common.c (strict_aliasing_warning): Adjust.\n+\n 2007-07-02  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \t* rtlhooks.c (gen_lowpart_if_possible): Check for"}, {"sha": "7c258c7470e2bee63889f268407c31b2d42c2809", "filename": "gcc/alias.c", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/836f779495e3468c959fbcc2ea1cbcee17d50dba/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/836f779495e3468c959fbcc2ea1cbcee17d50dba/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=836f779495e3468c959fbcc2ea1cbcee17d50dba", "patch": "@@ -320,11 +320,8 @@ alias_sets_conflict_p (HOST_WIDE_INT set1, HOST_WIDE_INT set2)\n {\n   alias_set_entry ase;\n \n-  /* If have no alias set information for one of the operands, we have\n-     to assume it can alias anything.  */\n-  if (set1 == 0 || set2 == 0\n-      /* If the two alias sets are the same, they may alias.  */\n-      || set1 == set2)\n+  /* The easy case.  */\n+  if (alias_sets_must_conflict_p (set1, set2))\n     return 1;\n \n   /* See if the first alias set is a subset of the second.  */\n@@ -344,23 +341,21 @@ alias_sets_conflict_p (HOST_WIDE_INT set1, HOST_WIDE_INT set2)\n     return 1;\n \n   /* The two alias sets are distinct and neither one is the\n-     child of the other.  Therefore, they cannot alias.  */\n+     child of the other.  Therefore, they cannot conflict.  */\n   return 0;\n }\n \n-/* Return 1 if the two specified alias sets might conflict, or if any subtype\n-   of these alias sets might conflict.  */\n+/* Return 1 if the two specified alias sets will always conflict.  */\n \n int\n-alias_sets_might_conflict_p (HOST_WIDE_INT set1, HOST_WIDE_INT set2)\n+alias_sets_must_conflict_p (HOST_WIDE_INT set1, HOST_WIDE_INT set2)\n {\n   if (set1 == 0 || set2 == 0 || set1 == set2)\n     return 1;\n \n   return 0;\n }\n \n-\f\n /* Return 1 if any MEM object of type T1 will always conflict (using the\n    dependency routines in this file) with any MEM object of type T2.\n    This is used when allocating temporary storage.  If T1 and/or T2 are\n@@ -386,12 +381,11 @@ objects_must_conflict_p (tree t1, tree t2)\n   set1 = t1 ? get_alias_set (t1) : 0;\n   set2 = t2 ? get_alias_set (t2) : 0;\n \n-  /* Otherwise they conflict if they have no alias set or the same. We\n-     can't simply use alias_sets_conflict_p here, because we must make\n-     sure that every subtype of t1 will conflict with every subtype of\n+  /* We can't use alias_sets_conflict_p because we must make sure\n+     that every subtype of t1 will conflict with every subtype of\n      t2 for which a pair of subobjects of these respective subtypes\n      overlaps on the stack.  */\n-  return set1 == 0 || set2 == 0 || set1 == set2;\n+  return alias_sets_must_conflict_p (set1, set2);\n }\n \f\n /* T is an expression with pointer type.  Find the DECL on which this"}, {"sha": "b1c20a6069d194eb604015069fa06ffb7601a938", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/836f779495e3468c959fbcc2ea1cbcee17d50dba/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/836f779495e3468c959fbcc2ea1cbcee17d50dba/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=836f779495e3468c959fbcc2ea1cbcee17d50dba", "patch": "@@ -1050,7 +1050,7 @@ strict_aliasing_warning (tree otype, tree type, tree expr)\n \t      return true;\n \t    }\n           else if (warn_strict_aliasing == 2\n-\t\t   && !alias_sets_might_conflict_p (set1, set2))\n+\t\t   && !alias_sets_must_conflict_p (set1, set2))\n \t    {\n \t      warning (OPT_Wstrict_aliasing, \"dereferencing type-punned \"\n \t\t       \"pointer might break strict-aliasing rules\");\n@@ -1068,7 +1068,7 @@ strict_aliasing_warning (tree otype, tree type, tree expr)\n         HOST_WIDE_INT set1 = get_alias_set (TREE_TYPE (otype));\n         HOST_WIDE_INT set2 = get_alias_set (TREE_TYPE (type));\n         if (!COMPLETE_TYPE_P(type)\n-            || !alias_sets_might_conflict_p (set1, set2))\n+            || !alias_sets_must_conflict_p (set1, set2))\n \t  {\n             warning (OPT_Wstrict_aliasing, \"dereferencing type-punned \"\n                      \"pointer might break strict-aliasing rules\");"}, {"sha": "a28f20b3af962e4ca27fbac7ac023462c55e087e", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/836f779495e3468c959fbcc2ea1cbcee17d50dba/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/836f779495e3468c959fbcc2ea1cbcee17d50dba/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=836f779495e3468c959fbcc2ea1cbcee17d50dba", "patch": "@@ -4565,7 +4565,7 @@ extern tree strip_float_extensions (tree);\n extern void record_component_aliases (tree);\n extern HOST_WIDE_INT get_alias_set (tree);\n extern int alias_sets_conflict_p (HOST_WIDE_INT, HOST_WIDE_INT);\n-extern int alias_sets_might_conflict_p (HOST_WIDE_INT, HOST_WIDE_INT);\n+extern int alias_sets_must_conflict_p (HOST_WIDE_INT, HOST_WIDE_INT);\n extern int objects_must_conflict_p (tree, tree);\n \n /* In tree.c */"}]}