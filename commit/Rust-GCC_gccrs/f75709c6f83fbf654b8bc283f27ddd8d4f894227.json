{"sha": "f75709c6f83fbf654b8bc283f27ddd8d4f894227", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc1NzA5YzZmODNmYmY2NTRiOGJjMjgzZjI3ZGRkOGQ0Zjg5NDIyNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2006-12-06T01:37:38Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2006-12-06T01:37:38Z"}, "message": "statistics.h (ALONE_PASS_MEM_STAT, [...]): New macros.\n\n\n\t* statistics.h (ALONE_PASS_MEM_STAT, ALONE_MEM_STAT_INFO,\n\tALONE_MEM_STAT_DECL): New macros.\n\t* bitmap.h: Include statistics.h\n\t(struct bitmap_head_def): Add variant with pointer to bitmap descriptor.\n\t(bitmap_initialize_stat): Rename from bitmap_initialize; add statistics.\n\t(bitmap_obstack_alloc_stat, bitmap_gc_alloc_stat): Declare.\n\t* bitmap.c: Include hashtab.h\n\t(bitmap_descriptor): New.\n\t(bitmap_hash): New static variable\n\t(hash_descriptor, eq_descriptor, bitmap_descriptor, register_overhead):\n\tNew static functions.\n\t(bitmap_register): New.\n\t(bitmap_element_free, bitmap_element_allocate, bitmap_elt_clear_from,\n\tbitmap_obstack_release): Do accounting.\n\t(bitmap_obstack_alloc_stat): Rename from bitmap_obstack_alloc ; do\n\taccounting.\n\t(bitmap_gc_alloc_stat): Likewise.\n\t(bitmap_obstack_free, bitmap_find_bit): Do statictics.\n\t(print_statistics, dump_bitmap_statistics): New functions.\n\t* toplev.c (finalize): Dump bitmap statistics.\n\nFrom-SVN: r119573", "tree": {"sha": "a3f8d22463404090d46e02a6a9634a4d654930fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3f8d22463404090d46e02a6a9634a4d654930fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f75709c6f83fbf654b8bc283f27ddd8d4f894227", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f75709c6f83fbf654b8bc283f27ddd8d4f894227", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f75709c6f83fbf654b8bc283f27ddd8d4f894227", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f75709c6f83fbf654b8bc283f27ddd8d4f894227/comments", "author": null, "committer": null, "parents": [{"sha": "2372a0625790417f2ca021d3e5016554930900a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2372a0625790417f2ca021d3e5016554930900a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2372a0625790417f2ca021d3e5016554930900a4"}], "stats": {"total": 245, "additions": 236, "deletions": 9}, "files": [{"sha": "09fdbb95655091beec64860cae352a65f95314ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75709c6f83fbf654b8bc283f27ddd8d4f894227/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75709c6f83fbf654b8bc283f27ddd8d4f894227/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f75709c6f83fbf654b8bc283f27ddd8d4f894227", "patch": "@@ -1,3 +1,26 @@\n+2006-12-06  Jan Hubicka  <jh@suse.cz>\n+\n+\t* statistics.h (ALONE_PASS_MEM_STAT, ALONE_MEM_STAT_INFO,\n+\tALONE_MEM_STAT_DECL): New macros.\n+\t* bitmap.h: Include statistics.h\n+\t(struct bitmap_head_def): Add variant with pointer to bitmap descriptor.\n+\t(bitmap_initialize_stat): Rename from bitmap_initialize; add statistics.\n+\t(bitmap_obstack_alloc_stat, bitmap_gc_alloc_stat): Declare.\n+\t* bitmap.c: Include hashtab.h\n+\t(bitmap_descriptor): New.\n+\t(bitmap_hash): New static variable\n+\t(hash_descriptor, eq_descriptor, bitmap_descriptor, register_overhead):\n+\tNew static functions.\n+\t(bitmap_register): New.\n+\t(bitmap_element_free, bitmap_element_allocate, bitmap_elt_clear_from,\n+\tbitmap_obstack_release): Do accounting.\n+\t(bitmap_obstack_alloc_stat): Rename from bitmap_obstack_alloc ; do\n+\taccounting.\n+\t(bitmap_gc_alloc_stat): Likewise.\n+\t(bitmap_obstack_free, bitmap_find_bit): Do statictics.\n+\t(print_statistics, dump_bitmap_statistics): New functions.\n+\t* toplev.c (finalize): Dump bitmap statistics.\n+\n 2006-12-06  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* reload1.c (delete_output_reload): Count occurrences in"}, {"sha": "83b553cd5c2786a8abccf759863d903fc90db8f3", "filename": "gcc/bitmap.c", "status": "modified", "additions": 177, "deletions": 4, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75709c6f83fbf654b8bc283f27ddd8d4f894227/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75709c6f83fbf654b8bc283f27ddd8d4f894227/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=f75709c6f83fbf654b8bc283f27ddd8d4f894227", "patch": "@@ -28,6 +28,94 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"obstack.h\"\n #include \"ggc.h\"\n #include \"bitmap.h\"\n+#include \"hashtab.h\"\n+\n+#ifdef GATHER_STATISTICS\n+\n+/* Store information about each particular bitmap.  */\n+struct bitmap_descriptor\n+{\n+  const char *function;\n+  const char *file;\n+  int line;\n+  int allocated;\n+  int created;\n+  int peak;\n+  int current;\n+  int nsearches;\n+};\n+\n+/* Hashtable mapping bitmap names to descriptors.  */\n+static htab_t bitmap_desc_hash;\n+\n+/* Hashtable helpers.  */\n+static hashval_t\n+hash_descriptor (const void *p)\n+{\n+  const struct bitmap_descriptor *d = p;\n+  return htab_hash_pointer (d->file) + d->line;\n+}\n+struct loc\n+{\n+  const char *file;\n+  const char *function;\n+  int line;\n+};\n+static int\n+eq_descriptor (const void *p1, const void *p2)\n+{\n+  const struct bitmap_descriptor *d = p1;\n+  const struct loc *l = p2;\n+  return d->file == l->file && d->function == l->function && d->line == l->line;\n+}\n+\n+/* For given file and line, return descriptor, create new if needed.  */\n+static struct bitmap_descriptor *\n+bitmap_descriptor (const char *file, const char *function, int line)\n+{\n+  struct bitmap_descriptor **slot;\n+  struct loc loc;\n+\n+  loc.file = file;\n+  loc.function = function;\n+  loc.line = line;\n+\n+  if (!bitmap_desc_hash)\n+    bitmap_desc_hash = htab_create (10, hash_descriptor, eq_descriptor, NULL);\n+\n+  slot = (struct bitmap_descriptor **)\n+    htab_find_slot_with_hash (bitmap_desc_hash, &loc,\n+\t\t\t      htab_hash_pointer (file) + line,\n+\t\t\t      1);\n+  if (*slot)\n+    return *slot;\n+  *slot = xcalloc (sizeof (**slot), 1);\n+  (*slot)->file = file;\n+  (*slot)->function = function;\n+  (*slot)->line = line;\n+  return *slot;\n+}\n+\n+/* Register new bitmap.  */\n+void\n+bitmap_register (bitmap b MEM_STAT_DECL)\n+{\n+  b->desc = bitmap_descriptor (_loc_name, _loc_function, _loc_line);\n+  b->desc->created++;\n+}\n+\n+/* Account the overhead.  */\n+static void\n+register_overhead (bitmap b, int amount)\n+{\n+  b->desc->current += amount;\n+  if (amount > 0)\n+    b->desc->allocated += amount;\n+  gcc_assert (b->desc->current >= 0);\n+  if (b->desc->peak < b->desc->current)\n+    b->desc->peak = b->desc->current;\n+}\n+#endif\n \n /* Global data */\n bitmap_element bitmap_zero_bits;  /* An element of all zero bits.  */\n@@ -92,6 +180,9 @@ bitmap_element_free (bitmap head, bitmap_element *elt)\n       else\n \thead->indx = 0;\n     }\n+#ifdef GATHER_STATISTICS\n+  register_overhead (head, -((int)sizeof (bitmap_element)));\n+#endif\n   bitmap_elem_to_freelist (head, elt);\n }\n \f\n@@ -139,6 +230,9 @@ bitmap_element_allocate (bitmap head)\n \telement = GGC_NEW (bitmap_element);\n     }\n \n+#ifdef GATHER_STATISTICS\n+  register_overhead (head, sizeof (bitmap_element));\n+#endif\n   memset (element->bits, 0, sizeof (element->bits));\n \n   return element;\n@@ -151,8 +245,17 @@ bitmap_elt_clear_from (bitmap head, bitmap_element *elt)\n {\n   bitmap_element *prev;\n   bitmap_obstack *bit_obstack = head->obstack;\n+#ifdef GATHER_STATISTICS\n+  int n;\n+#endif\n \n   if (!elt) return;\n+#ifdef GATHER_STATISTICS\n+  n = 0;\n+  for (prev = elt; prev; prev = prev->next)\n+    n++;\n+  register_overhead (head, -sizeof (bitmap_element) * n);\n+#endif\n \n   prev = elt->prev;\n   if (prev)\n@@ -232,7 +335,7 @@ bitmap_obstack_release (bitmap_obstack *bit_obstack)\n    it on the default bitmap obstack.  */\n \n bitmap\n-bitmap_obstack_alloc (bitmap_obstack *bit_obstack)\n+bitmap_obstack_alloc_stat (bitmap_obstack *bit_obstack MEM_STAT_DECL)\n {\n   bitmap map;\n \n@@ -243,20 +346,26 @@ bitmap_obstack_alloc (bitmap_obstack *bit_obstack)\n     bit_obstack->heads = (void *)map->first;\n   else\n     map = XOBNEW (&bit_obstack->obstack, bitmap_head);\n-  bitmap_initialize (map, bit_obstack);\n+  bitmap_initialize_stat (map, bit_obstack PASS_MEM_STAT);\n+#ifdef GATHER_STATISTICS\n+  register_overhead (map, sizeof (bitmap_head));\n+#endif\n \n   return map;\n }\n \n /* Create a new GCd bitmap.  */\n \n bitmap\n-bitmap_gc_alloc (void)\n+bitmap_gc_alloc_stat (ALONE_MEM_STAT_DECL)\n {\n   bitmap map;\n \n   map = GGC_NEW (struct bitmap_head_def);\n-  bitmap_initialize (map, NULL);\n+  bitmap_initialize_stat (map, NULL PASS_MEM_STAT);\n+#ifdef GATHER_STATISTICS\n+  register_overhead (map, sizeof (bitmap_head));\n+#endif\n \n   return map;\n }\n@@ -270,6 +379,9 @@ bitmap_obstack_free (bitmap map)\n     {\n       bitmap_clear (map);\n       map->first = (void *)map->obstack->heads;\n+#ifdef GATHER_STATISTICS\n+      register_overhead (map, -((int)sizeof (bitmap_head)));\n+#endif\n       map->obstack->heads = map;\n     }\n }\n@@ -430,6 +542,9 @@ bitmap_find_bit (bitmap head, unsigned int bit)\n   bitmap_element *element;\n   unsigned int indx = bit / BITMAP_ELEMENT_ALL_BITS;\n \n+#ifdef GATHER_STATISTICS\n+  head->desc->nsearches++;\n+#endif\n   if (head->current == 0\n       || head->indx == indx)\n     return head->current;\n@@ -1519,6 +1634,64 @@ bitmap_print (FILE *file, bitmap head, const char *prefix, const char *suffix)\n     }\n   fputs (suffix, file);\n }\n+#ifdef GATHER_STATISTICS\n+\n+\n+/* Used to accumulate statistics about bitmap sizes.  */\n+struct output_info\n+{\n+  int count;\n+  int size;\n+};\n+\n+/* Called via htab_traverse.  Output bitmap descriptor pointed out by SLOT\n+   and update statistics.  */\n+static int\n+print_statistics (void **slot, void *b)\n+{\n+  struct bitmap_descriptor *d = (struct bitmap_descriptor *) *slot;\n+  struct output_info *i = (struct output_info *) b;\n+  char s[4096];\n+\n+  if (d->allocated)\n+    {\n+      const char *s1 = d->file;\n+      const char *s2;\n+      while ((s2 = strstr (s1, \"gcc/\")))\n+\ts1 = s2 + 4;\n+      sprintf (s, \"%s:%i (%s)\", s1, d->line, d->function);\n+      s[41] = 0;\n+      fprintf (stderr, \"%-41s %6d %10d %10d %10d %10d\\n\", s,\n+\t       d->created, d->allocated, d->peak, d->current, d->nsearches);\n+      i->size += d->allocated;\n+      i->count += d->created;\n+    }\n+  return 1;\n+}\n+#endif\n+/* Output per-bitmap memory usage statistics.  */\n+void\n+dump_bitmap_statistics (void)\n+{\n+#ifdef GATHER_STATISTICS\n+  struct output_info info;\n+\n+  if (!bitmap_desc_hash)\n+    return;\n+\n+  fprintf (stderr, \"\\nBitmap                                     Overall \"\n+\t\t   \"Allocated     Peak        Leak   searched \"\n+\t\t   \"  per search\\n\");\n+  fprintf (stderr, \"---------------------------------------------------------------------------------\\n\");\n+  info.count = 0;\n+  info.size = 0;\n+  htab_traverse (bitmap_desc_hash, print_statistics, &info);\n+  fprintf (stderr, \"---------------------------------------------------------------------------------\\n\");\n+  fprintf (stderr, \"%-40s %7d %10d\\n\",\n+\t   \"Total\", info.count, info.size);\n+  fprintf (stderr, \"---------------------------------------------------------------------------------\\n\");\n+#endif\n+}\n \n /* Compute hash of bitmap (for purposes of hashing).  */\n hashval_t"}, {"sha": "515527c08e8fcd0e7d3d96e1513f4bd000c546f1", "filename": "gcc/bitmap.h", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75709c6f83fbf654b8bc283f27ddd8d4f894227/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75709c6f83fbf654b8bc283f27ddd8d4f894227/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=f75709c6f83fbf654b8bc283f27ddd8d4f894227", "patch": "@@ -22,6 +22,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #ifndef GCC_BITMAP_H\n #define GCC_BITMAP_H\n #include \"hashtab.h\"\n+#include \"statistics.h\"\n \n /* Fundamental storage type for bitmap.  */\n \n@@ -68,15 +69,30 @@ typedef struct bitmap_element_def GTY(())\n   BITMAP_WORD bits[BITMAP_ELEMENT_WORDS]; /* Bits that are set.  */\n } bitmap_element;\n \n-/* Head of bitmap linked list.  */\n+struct bitmap_descriptor;\n+/* Head of bitmap linked list.  \n+   The gengtype doesn't cope with ifdefs inside the definition,\n+   but for statistics we need bitmap descriptor pointer in.\n+   Trick it by two copies of the definition.  This is safe\n+   because the bitmap descriptor is not grabagecollected.  */\n+#ifndef GATHER_STATISTICS\n typedef struct bitmap_head_def GTY(()) {\n   bitmap_element *first;\t/* First element in linked list.  */\n   bitmap_element *current;\t/* Last element looked at.  */\n   unsigned int indx;\t\t/* Index of last element looked at.  */\n   bitmap_obstack *obstack;\t/* Obstack to allocate elements from.\n \t\t\t\t   If NULL, then use ggc_alloc.  */\n } bitmap_head;\n-\n+#else\n+typedef struct bitmap_head_def {\n+  bitmap_element *first;\t/* First element in linked list.  */\n+  bitmap_element *current;\t/* Last element looked at.  */\n+  unsigned int indx;\t\t/* Index of last element looked at.  */\n+  bitmap_obstack *obstack;\t/* Obstack to allocate elements from.\n+\t\t\t\t   If NULL, then use ggc_alloc.  */\n+  struct bitmap_descriptor *desc;\n+} bitmap_head;\n+#endif\n \n /* Global data */\n extern bitmap_element bitmap_zero_bits;\t/* Zero bitmap element */\n@@ -144,20 +160,28 @@ extern void bitmap_print (FILE *, bitmap, const char *, const char *);\n /* Initialize and release a bitmap obstack.  */\n extern void bitmap_obstack_initialize (bitmap_obstack *);\n extern void bitmap_obstack_release (bitmap_obstack *);\n+extern void bitmap_register (bitmap MEM_STAT_DECL);\n+extern void dump_bitmap_statistics (void);\n \n /* Initialize a bitmap header.  OBSTACK indicates the bitmap obstack\n    to allocate from, NULL for GC'd bitmap.  */\n \n static inline void\n-bitmap_initialize (bitmap head, bitmap_obstack *obstack)\n+bitmap_initialize_stat (bitmap head, bitmap_obstack *obstack MEM_STAT_DECL)\n {\n   head->first = head->current = NULL;\n   head->obstack = obstack;\n+#ifdef GATHER_STATISTICS\n+  bitmap_register (head PASS_MEM_STAT);\n+#endif\n }\n+#define bitmap_initialize(h,o) bitmap_initialize_stat (h,o MEM_STAT_INFO)\n \n /* Allocate and free bitmaps from obstack, malloc and gc'd memory.  */\n-extern bitmap bitmap_obstack_alloc (bitmap_obstack *obstack);\n-extern bitmap bitmap_gc_alloc (void);\n+extern bitmap bitmap_obstack_alloc_stat (bitmap_obstack *obstack MEM_STAT_DECL);\n+#define bitmap_obstack_alloc(t) bitmap_obstack_alloc_stat (t MEM_STAT_INFO)\n+extern bitmap bitmap_gc_alloc_stat (ALONE_MEM_STAT_DECL);\n+#define bitmap_gc_alloc() bitmap_gc_alloc_stat (ALONE_MEM_STAT_INFO)\n extern void bitmap_obstack_free (bitmap);\n \n /* A few compatibility/functions macros for compatibility with sbitmaps */"}, {"sha": "b7bdcd70f409fb6e8df5188ab7f199fc4f93c2b5", "filename": "gcc/statistics.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75709c6f83fbf654b8bc283f27ddd8d4f894227/gcc%2Fstatistics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75709c6f83fbf654b8bc283f27ddd8d4f894227/gcc%2Fstatistics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstatistics.h?ref=f75709c6f83fbf654b8bc283f27ddd8d4f894227", "patch": "@@ -24,11 +24,17 @@\n #define GCC_STATISTICS\n #ifdef GATHER_STATISTICS\n #define MEM_STAT_DECL , const char * ARG_UNUSED (_loc_name), int ARG_UNUSED (_loc_line), const char * ARG_UNUSED (_loc_function)\n+#define ALONE_MEM_STAT_DECL const char * ARG_UNUSED (_loc_name), int ARG_UNUSED (_loc_line), const char * ARG_UNUSED (_loc_function)\n #define PASS_MEM_STAT , _loc_name, _loc_line,  _loc_function\n+#define ALONE_PASS_MEM_STAT _loc_name, _loc_line,  _loc_function\n #define MEM_STAT_INFO , __FILE__, __LINE__, __FUNCTION__\n+#define ALONE_MEM_STAT_INFO __FILE__, __LINE__, __FUNCTION__\n #else\n #define MEM_STAT_DECL\n+#define ALONE_MEM_STAT_DECL void\n #define PASS_MEM_STAT\n+#define ALONE_PASS_MEM_STAT\n #define MEM_STAT_INFO\n+#define ALONE_MEM_STAT_INFO\n #endif\n #endif"}, {"sha": "9cc814d7fd001761aee157949ced1c49a2e0a6d0", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75709c6f83fbf654b8bc283f27ddd8d4f894227/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75709c6f83fbf654b8bc283f27ddd8d4f894227/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=f75709c6f83fbf654b8bc283f27ddd8d4f894227", "patch": "@@ -1971,6 +1971,7 @@ finalize (void)\n       dump_rtx_statistics ();\n       dump_varray_statistics ();\n       dump_alloc_pool_statistics ();\n+      dump_bitmap_statistics ();\n       dump_ggc_loc_statistics ();\n     }\n "}]}