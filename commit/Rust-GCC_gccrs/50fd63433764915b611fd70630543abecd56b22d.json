{"sha": "50fd63433764915b611fd70630543abecd56b22d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBmZDYzNDMzNzY0OTE1YjYxMWZkNzA2MzA1NDNhYmVjZDU2YjIyZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-09-13T10:12:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-09-13T10:12:07Z"}, "message": "call.c (build_conditional_expr): Always use a TARGET_EXPR for class rvalues again.\n\n\t* call.c (build_conditional_expr): Always use a TARGET_EXPR for\n\tclass rvalues again.\n\nFrom-SVN: r29372", "tree": {"sha": "e6f867d99d5385ece9a7559f43e821c12c713526", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6f867d99d5385ece9a7559f43e821c12c713526"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50fd63433764915b611fd70630543abecd56b22d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50fd63433764915b611fd70630543abecd56b22d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50fd63433764915b611fd70630543abecd56b22d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50fd63433764915b611fd70630543abecd56b22d/comments", "author": null, "committer": null, "parents": [{"sha": "0924404c5424a0cd34cfbc242d2d7ccf4ac80681", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0924404c5424a0cd34cfbc242d2d7ccf4ac80681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0924404c5424a0cd34cfbc242d2d7ccf4ac80681"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "d2d8e7781eeaca98c66169a840c18985554ba4bd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50fd63433764915b611fd70630543abecd56b22d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50fd63433764915b611fd70630543abecd56b22d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=50fd63433764915b611fd70630543abecd56b22d", "patch": "@@ -1,3 +1,8 @@\n+1999-09-13  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (build_conditional_expr): Always use a TARGET_EXPR for\n+\tclass rvalues again.\n+\n Sun Sep 12 23:29:07 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Make-lang.in (g++spec.o): Depend on system.h and gcc.h."}, {"sha": "bfc430de831c80e252cc5ee2728f5a4285cc7269", "filename": "gcc/cp/call.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50fd63433764915b611fd70630543abecd56b22d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50fd63433764915b611fd70630543abecd56b22d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=50fd63433764915b611fd70630543abecd56b22d", "patch": "@@ -2977,10 +2977,23 @@ build_conditional_expr (arg1, arg2, arg3)\n \n      Lvalue-to-rvalue (_conv.lval_), array-to-pointer (_conv.array_),\n      and function-to-pointer (_conv.func_) standard conversions are\n-     performed on the second and third operands.  */\n-  arg2 = decay_conversion (arg2);\n+     performed on the second and third operands.\n+\n+     We need to force the lvalue-to-rvalue conversion here for class types,\n+     so we get TARGET_EXPRs; trying to deal with a COND_EXPR of class rvalues\n+     that isn't wrapped with a TARGET_EXPR plays havoc with exception\n+     regions.  */\n+\n+  if (IS_AGGR_TYPE (TREE_TYPE (arg2)) && real_lvalue_p (arg2))\n+    arg2 = build_user_type_conversion (TREE_TYPE (arg2), arg2, LOOKUP_NORMAL);\n+  else\n+    arg2 = decay_conversion (arg2);\n   arg2_type = TREE_TYPE (arg2);\n-  arg3 = decay_conversion (arg3);\n+\n+  if (IS_AGGR_TYPE (TREE_TYPE (arg3)) && real_lvalue_p (arg3))\n+    arg3 = build_user_type_conversion (TREE_TYPE (arg3), arg3, LOOKUP_NORMAL);\n+  else\n+    arg3 = decay_conversion (arg3);\n   arg3_type = TREE_TYPE (arg3);\n \n   /* [expr.cond]\n@@ -3061,8 +3074,9 @@ build_conditional_expr (arg1, arg2, arg3)\n  valid_operands:\n   result = fold (build (COND_EXPR, result_type, arg1, arg2, arg3));\n   /* Expand both sides into the same slot, hopefully the target of the\n-     ?: expression.  */\n-  if (TREE_CODE (arg2) == TARGET_EXPR && TREE_CODE (arg3) == TARGET_EXPR)\n+     ?: expression.  We used to check for TARGET_EXPRs here, but now we\n+     sometimes wrap them in NOP_EXPRs so the test would fail.  */\n+  if (!lvalue_p && IS_AGGR_TYPE (result_type))\n     {\n       tree slot = build (VAR_DECL, result_type);\n       layout_decl (slot, 0);"}]}