{"sha": "91a95ad2ae0e0f2fa953fafe55ff2ec32c8277d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFhOTVhZDJhZTBlMGYyZmE5NTNmYWZlNTVmZjJlYzMyYzgyNzdkNQ==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2020-10-23T22:28:17Z"}, "committer": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2021-01-29T17:34:59Z"}, "message": "[PATCH, rs6000] improve vec_ctf invalid parameter handling.\n\nHi,\n  Per PR91903, GCC ICEs when we attempt to pass a variable\n(or out of range value) into the vec_ctf() builtin.  Per\ninvestigation, the parameter checking exists for this\nbuiltin with the int types, but was missing for\nthe long long types. This problem also occurs for the\nvec_cts() builtin, which is also fixed by this patch.\n\nThis patch adds the missing CODE_FOR_* entries to the\nrs6000_expand_binup_builtin to cover that scenario.\nThis patch also updates some existing tests to remove\ncalls to vec_ctf() and vec_cts() that contain negative\nvalues.\n\nPR target/91903\n\n2020-01-29  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\ngcc/ChangeLog:\n\t* config/rs6000/rs6000-call.c (rs6000_expand_binup_builtin): Add\n\tclauses for CODE_FOR_vsx_xvcvuxddp_scale and\n\tCODE_FOR_vsx_xvcvsxddp_scale to the parameter checking code.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.target/powerpc/pr91903.c: New test.\n\t* gcc.target/powerpc/builtins-1.fold.h: Update.\n\t* gcc.target/powerpc/builtins-2.c: Update.", "tree": {"sha": "f00a6fb4f2923d80c59fb17fd0370ce8ecd882b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f00a6fb4f2923d80c59fb17fd0370ce8ecd882b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91a95ad2ae0e0f2fa953fafe55ff2ec32c8277d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a95ad2ae0e0f2fa953fafe55ff2ec32c8277d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91a95ad2ae0e0f2fa953fafe55ff2ec32c8277d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a95ad2ae0e0f2fa953fafe55ff2ec32c8277d5/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83bdc9f70347e6438822e719c30c3793c81df18e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83bdc9f70347e6438822e719c30c3793c81df18e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83bdc9f70347e6438822e719c30c3793c81df18e"}], "stats": {"total": 87, "additions": 81, "deletions": 6}, "files": [{"sha": "de0ce50796d750be7264ea5ee0497821dc7621ae", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a95ad2ae0e0f2fa953fafe55ff2ec32c8277d5/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a95ad2ae0e0f2fa953fafe55ff2ec32c8277d5/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=91a95ad2ae0e0f2fa953fafe55ff2ec32c8277d5", "patch": "@@ -9564,7 +9564,9 @@ rs6000_expand_binop_builtin (enum insn_code icode, tree exp, rtx target)\n   else if (icode == CODE_FOR_altivec_vcfux\n       || icode == CODE_FOR_altivec_vcfsx\n       || icode == CODE_FOR_altivec_vctsxs\n-      || icode == CODE_FOR_altivec_vctuxs)\n+      || icode == CODE_FOR_altivec_vctuxs\n+      || icode == CODE_FOR_vsx_xvcvuxddp_scale\n+      || icode == CODE_FOR_vsx_xvcvsxddp_scale)\n     {\n       /* Only allow 5-bit unsigned literals.  */\n       STRIP_NOPS (arg1);"}, {"sha": "42d552295e3e17132b021fb296a2fed2ab6e0e6b", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-1.fold.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a95ad2ae0e0f2fa953fafe55ff2ec32c8277d5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a95ad2ae0e0f2fa953fafe55ff2ec32c8277d5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.fold.h?ref=91a95ad2ae0e0f2fa953fafe55ff2ec32c8277d5", "patch": "@@ -214,10 +214,10 @@ int main ()\n   extern vector long long l8; l8 = vec_mul (l3, l4);\n   extern vector unsigned long long u6; u6 = vec_mul (u3, u4);\n \n-  extern vector double dh; dh = vec_ctf (la, -2);\n+  extern vector double dh; dh = vec_ctf (la, 2);\n   extern vector double di; di = vec_ctf (ua, 2);\n   extern vector int sz; sz = vec_cts (fa, 0x1F);\n-  extern vector long long l9; l9 = vec_cts (dh, -2);\n+  extern vector long long l9; l9 = vec_cts (dh, 2);\n   extern vector unsigned long long u7; u7 = vec_ctu (di, 2);\n   extern vector unsigned int usz; usz = vec_ctu (fa, 0x1F);\n "}, {"sha": "30acae47faff9a01719c00decea3d2caa638026d", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a95ad2ae0e0f2fa953fafe55ff2ec32c8277d5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a95ad2ae0e0f2fa953fafe55ff2ec32c8277d5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-2.c?ref=91a95ad2ae0e0f2fa953fafe55ff2ec32c8277d5", "patch": "@@ -42,12 +42,12 @@ int main ()\n       || ue[0] != 27L || ue[1] != 27L || uf[0] != 14L || uf[1] != 14L)\n     abort ();\n \n-  vector double da = vec_ctf (sa, -2);\n+  vector double da = vec_ctf (sa, 2);\n   vector double db = vec_ctf (ua, 2);\n-  vector long long sg = vec_cts (da, -2);\n+  vector long long sg = vec_cts (da, 2);\n   vector unsigned long long ug = vec_ctu (db, 2);\n \n-  if (da[0] != 108.0 || da[1] != -56.0 || db[0] != 6.75 || db[1] != 3.5\n+  if (da[0] != 6.75 || da[1] != -3.5 || db[0] != 6.75 || db[1] != 3.5\n       || sg[0] != 27L || sg[1] != -14L || ug[0] != 27L || ug[1] != 14L)\n     abort ();\n "}, {"sha": "efd217e5b81d9aaacbd274ee7e217a2245d7dea0", "filename": "gcc/testsuite/gcc.target/powerpc/pr91903.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a95ad2ae0e0f2fa953fafe55ff2ec32c8277d5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr91903.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a95ad2ae0e0f2fa953fafe55ff2ec32c8277d5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr91903.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr91903.c?ref=91a95ad2ae0e0f2fa953fafe55ff2ec32c8277d5", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-do compile */\n+/* { dg-require-effective-target p8vector_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power8\" } */\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <altivec.h>\n+\n+vector double retd;\n+vector float retf;\n+vector signed int retsi;\n+\n+void test_int(vector signed int a, const int b)\n+{\n+\tretf = vec_ctf(a,b); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretf = vec_ctf(a,-1); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretf = vec_ctf(a,-31); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretf = vec_ctf(a,-32); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretf = vec_ctf(a,1);\n+\tretf = vec_ctf(a,31);\n+\tretf = vec_ctf(a,32); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretf = vec_ctf(a,42); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+}\n+\n+void test_uint(vector unsigned int a, const int b)\n+{\n+\tretf = vec_ctf(a,b); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretf = vec_ctf(a,-1); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretf = vec_ctf(a,-31); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretf = vec_ctf(a,-32); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretf = vec_ctf(a,1);\n+\tretf = vec_ctf(a,31);\n+\tretf = vec_ctf(a,32); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretf = vec_ctf(a,42); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+}\n+\n+void test_longlong(vector signed long long a, const int b,int x)\n+{\n+\tretd = vec_ctf(a,b); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\"  } */\n+\tretd = vec_ctf(a,-1); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretd = vec_ctf(a,-31); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretd = vec_ctf(a,-32); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretd = vec_ctf(a,1);\n+\tretd = vec_ctf(a,31);\n+\tretd = vec_ctf(a,32); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretd = vec_ctf(a,42); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+}\n+\n+void test_ulonglong(vector unsigned long long a, const int b,int x)\n+{\n+\tretd = vec_ctf(a,b); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretd = vec_ctf(a,-1); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretd = vec_ctf(a,-31); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretd = vec_ctf(a,-32); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretd = vec_ctf(a,1);\n+\tretd = vec_ctf(a,31);\n+\tretd = vec_ctf(a,32); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretd = vec_ctf(a,42); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+}\n+\n+\n+void test_cts_1(vector float a, const int b)\n+{\n+\tretsi = vec_cts(a,b); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretsi = vec_cts(a,-1); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretsi = vec_cts(a,-31); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretsi = vec_cts(a,-32); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretsi = vec_cts(a,1);\n+\tretsi = vec_cts(a,31);\n+\tretsi = vec_cts(a,32); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+\tretsi = vec_cts(a,42); /* { dg-error \"argument 2 must be a 5-bit unsigned literal\" } */\n+}\n+"}]}