{"sha": "fc8a92c4874730b193fbd78140a4b5486ffce752", "node_id": "C_kwDOANBUbNoAKGZjOGE5MmM0ODc0NzMwYjE5M2ZiZDc4MTQwYTRiNTQ4NmZmY2U3NTI", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-02-13T14:33:11Z"}, "committer": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-30T11:52:29Z"}, "message": "libproc_macro: Add TokenTree type interface\n\nAdd TokenTree rust type interface to libproc_macro.\n\nChangeLog:\n\n\t* librust/proc_macro/rust/lib.rs: Add TokenTree type.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "2b246f3af85fe26608109ae359e865ea5a51ac9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b246f3af85fe26608109ae359e865ea5a51ac9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc8a92c4874730b193fbd78140a4b5486ffce752", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc8a92c4874730b193fbd78140a4b5486ffce752", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc8a92c4874730b193fbd78140a4b5486ffce752", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc8a92c4874730b193fbd78140a4b5486ffce752/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e59c6f19aa7c4b6d7090d7af23fb407c2fc397ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e59c6f19aa7c4b6d7090d7af23fb407c2fc397ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e59c6f19aa7c4b6d7090d7af23fb407c2fc397ef"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "4b6272dc11b86672e451b8571a5a4f51c37c2ea8", "filename": "librust/proc_macro/rust/lib.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8a92c4874730b193fbd78140a4b5486ffce752/librust%2Fproc_macro%2Frust%2Flib.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8a92c4874730b193fbd78140a4b5486ffce752/librust%2Fproc_macro%2Frust%2Flib.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Flib.rs?ref=fc8a92c4874730b193fbd78140a4b5486ffce752", "patch": "@@ -12,6 +12,67 @@ mod literal;\n mod punct;\n mod span;\n \n+/// A single token or a delimited sequence of token trees.\n+#[derive(Clone)]\n+pub enum TokenTree {\n+    Group(Group),\n+    Ident(Ident),\n+    Punct(Punct),\n+    Literal(Literal),\n+}\n+\n+impl TokenTree {\n+    /// Get the [`Span`] for this TokenTree.\n+    pub fn span(&self) -> Span {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    /// Set the span for this TokenTree.\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * `span` - The new span value.\n+    pub fn set_span(&mut self, _span: Span) {\n+        todo!(\"Implement this function\")\n+    }\n+}\n+\n+impl fmt::Debug for TokenTree {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        todo!(\"Implement this function\")\n+    }\n+}\n+\n+impl fmt::Display for TokenTree {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        todo!(\"Implement this function\")\n+    }\n+}\n+\n+impl From<Group> for TokenTree {\n+    fn from(_g: Group) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+}\n+\n+impl From<Ident> for TokenTree {\n+    fn from(_i: Ident) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+}\n+\n+impl From<Punct> for TokenTree {\n+    fn from(_p: Punct) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+}\n+\n+impl From<Literal> for TokenTree {\n+    fn from(_l: Literal) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+}\n+\n /// Error returned from `from_str` functions.\n #[derive(Debug)]\n pub struct LexError;"}]}