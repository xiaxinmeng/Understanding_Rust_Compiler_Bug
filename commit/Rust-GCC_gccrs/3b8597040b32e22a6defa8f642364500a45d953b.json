{"sha": "3b8597040b32e22a6defa8f642364500a45d953b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I4NTk3MDQwYjMyZTIyYTZkZWZhOGY2NDIzNjQ1MDBhNDVkOTUzYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2013-05-25T16:00:12Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-05-25T16:00:12Z"}, "message": "re PR rtl-optimization/53916 ([mips16] divide operation compiled result incorrect with GCC-4.6.3 '-O2' option)\n\ngcc/\n\tPR target/53916\n\t* config/mips/constraints.md (kl): New constraint.\n\t* config/mips/mips.md (divmod<mode>4, udivmod<mode>4): Delete.\n\t(divmod<mode>4_internal): Rename to divmod<mode>4.  Use \"kl\" as the\n\tconstraint for operand 0.  Split after CSE for MIPS16.  Emit a move\n\tfrom LO for MIPS16.\n\t(udivmod<mode>4_internal): Likewise udivmod<mode>4.\n\ngcc/testsuite/\n\tPR target/53916\n\t* gcc.target/mips/div-13.c: New test.\n\nFrom-SVN: r199329", "tree": {"sha": "1d76677de125339268a0b5ae0da765fa4bc78cda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d76677de125339268a0b5ae0da765fa4bc78cda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b8597040b32e22a6defa8f642364500a45d953b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8597040b32e22a6defa8f642364500a45d953b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b8597040b32e22a6defa8f642364500a45d953b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8597040b32e22a6defa8f642364500a45d953b/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c979d5f525e854fb26e8ff7a7ef34812abef8550", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c979d5f525e854fb26e8ff7a7ef34812abef8550", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c979d5f525e854fb26e8ff7a7ef34812abef8550"}], "stats": {"total": 108, "additions": 58, "deletions": 50}, "files": [{"sha": "e2879fc338f761bfc8993b6094c683073fa29693", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8597040b32e22a6defa8f642364500a45d953b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8597040b32e22a6defa8f642364500a45d953b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b8597040b32e22a6defa8f642364500a45d953b", "patch": "@@ -1,3 +1,13 @@\n+2013-05-25  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR target/53916\n+\t* config/mips/constraints.md (kl): New constraint.\n+\t* config/mips/mips.md (divmod<mode>4, udivmod<mode>4): Delete.\n+\t(divmod<mode>4_internal): Rename to divmod<mode>4.  Use \"kl\" as the\n+\tconstraint for operand 0.  Split after CSE for MIPS16.  Emit a move\n+\tfrom LO for MIPS16.\n+\t(udivmod<mode>4_internal): Likewise udivmod<mode>4.\n+\n 2013-05-25  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tPR target/55777"}, {"sha": "1fe6119d0758cb1ee536da7889dc3732bd362981", "filename": "gcc/config/mips/constraints.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8597040b32e22a6defa8f642364500a45d953b/gcc%2Fconfig%2Fmips%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8597040b32e22a6defa8f642364500a45d953b/gcc%2Fconfig%2Fmips%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fconstraints.md?ref=3b8597040b32e22a6defa8f642364500a45d953b", "patch": "@@ -92,6 +92,12 @@\n ;; but the DSP version allows any accumulator target.\n (define_register_constraint \"ka\" \"ISA_HAS_DSP_MULT ? ACC_REGS : MD_REGS\")\n \n+;; The register class to use for an allocatable division result.\n+;; MIPS16 uses M16_REGS because LO is fixed.\n+(define_register_constraint \"kl\"\n+  \"TARGET_MIPS16 ? M16_REGS : TARGET_BIG_ENDIAN ? MD1_REG : MD0_REG\"\n+  \"@internal\")\n+\n (define_constraint \"kf\"\n   \"@internal\"\n   (match_operand 0 \"force_to_mem_operand\"))"}, {"sha": "6f6484b0d8c10a6e506f59021eae777afed587d9", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 20, "deletions": 50, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8597040b32e22a6defa8f642364500a45d953b/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8597040b32e22a6defa8f642364500a45d953b/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=3b8597040b32e22a6defa8f642364500a45d953b", "patch": "@@ -2560,80 +2560,50 @@\n \n ;; VR4120 errata MD(A1): signed division instructions do not work correctly\n ;; with negative operands.  We use special libgcc functions instead.\n-(define_expand \"divmod<mode>4\"\n-  [(set (match_operand:GPR 0 \"register_operand\")\n-\t(div:GPR (match_operand:GPR 1 \"register_operand\")\n-\t\t (match_operand:GPR 2 \"register_operand\")))\n-   (set (match_operand:GPR 3 \"register_operand\")\n-\t(mod:GPR (match_dup 1)\n-\t\t (match_dup 2)))]\n-  \"!TARGET_FIX_VR4120\"\n-{\n-  if (TARGET_MIPS16)\n-    {\n-      emit_insn (gen_divmod<mode>4_split (operands[3], operands[1],\n-\t\t\t\t\t  operands[2]));\n-      emit_move_insn (operands[0], gen_rtx_REG (<MODE>mode, LO_REGNUM));\n-    }\n-  else\n-    emit_insn (gen_divmod<mode>4_internal (operands[0], operands[1],\n-\t\t\t\t\t   operands[2], operands[3]));\n-  DONE;\n-})\n-\n-(define_insn_and_split \"divmod<mode>4_internal\"\n-  [(set (match_operand:GPR 0 \"muldiv_target_operand\" \"=l\")\n+;;\n+;; Expand generates divmod instructions for individual division and modulus\n+;; operations.  We then rely on CSE to reuse earlier divmods where possible.\n+;; This means that, when generating MIPS16 code, it is better not to expose\n+;; the fixed LO register until after CSE has finished.  However, it's still\n+;; better to split before register allocation, so that we don't allocate\n+;; one of the scarce MIPS16 registers to an unused result.\n+(define_insn_and_split \"divmod<mode>4\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=kl\")\n \t(div:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n \t\t (match_operand:GPR 2 \"register_operand\" \"d\")))\n    (set (match_operand:GPR 3 \"register_operand\" \"=d\")\n \t(mod:GPR (match_dup 1)\n \t\t (match_dup 2)))]\n-  \"!TARGET_FIX_VR4120 && !TARGET_MIPS16\"\n+  \"!TARGET_FIX_VR4120\"\n   \"#\"\n-  \"&& reload_completed\"\n+  \"&& ((TARGET_MIPS16 && cse_not_expected) || reload_completed)\"\n   [(const_int 0)]\n {\n   emit_insn (gen_divmod<mode>4_split (operands[3], operands[1], operands[2]));\n+  if (TARGET_MIPS16)\n+    emit_move_insn (operands[0], gen_rtx_REG (<MODE>mode, LO_REGNUM));\n   DONE;\n }\n  [(set_attr \"type\" \"idiv\")\n   (set_attr \"mode\" \"<MODE>\")\n   (set_attr \"length\" \"8\")])\n \n-(define_expand \"udivmod<mode>4\"\n-  [(set (match_operand:GPR 0 \"register_operand\")\n-\t(udiv:GPR (match_operand:GPR 1 \"register_operand\")\n-\t\t  (match_operand:GPR 2 \"register_operand\")))\n-   (set (match_operand:GPR 3 \"register_operand\")\n-\t(umod:GPR (match_dup 1)\n-\t\t  (match_dup 2)))]\n-  \"\"\n-{\n-  if (TARGET_MIPS16)\n-    {\n-      emit_insn (gen_udivmod<mode>4_split (operands[3], operands[1],\n-\t\t\t\t\t   operands[2]));\n-      emit_move_insn (operands[0], gen_rtx_REG (<MODE>mode, LO_REGNUM));\n-    }\n-  else\n-    emit_insn (gen_udivmod<mode>4_internal (operands[0], operands[1],\n-\t\t\t\t\t    operands[2], operands[3]));\n-  DONE;\n-})\n-\n-(define_insn_and_split \"udivmod<mode>4_internal\"\n-  [(set (match_operand:GPR 0 \"muldiv_target_operand\" \"=l\")\n+;; See the comment above \"divmod<mode>4\" for the MIPS16 handling.\n+(define_insn_and_split \"udivmod<mode>4\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=kl\")\n \t(udiv:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n \t\t  (match_operand:GPR 2 \"register_operand\" \"d\")))\n    (set (match_operand:GPR 3 \"register_operand\" \"=d\")\n \t(umod:GPR (match_dup 1)\n \t\t  (match_dup 2)))]\n-  \"!TARGET_MIPS16\"\n+  \"\"\n   \"#\"\n-  \"reload_completed\"\n+  \"(TARGET_MIPS16 && cse_not_expected) || reload_completed\"\n   [(const_int 0)]\n {\n   emit_insn (gen_udivmod<mode>4_split (operands[3], operands[1], operands[2]));\n+  if (TARGET_MIPS16)\n+    emit_move_insn (operands[0], gen_rtx_REG (<MODE>mode, LO_REGNUM));\n   DONE;\n }\n  [(set_attr \"type\" \"idiv\")"}, {"sha": "38985d6119afdf89fdd2df24061e5f4571022666", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8597040b32e22a6defa8f642364500a45d953b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8597040b32e22a6defa8f642364500a45d953b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b8597040b32e22a6defa8f642364500a45d953b", "patch": "@@ -1,3 +1,8 @@\n+2013-05-25  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR target/53916\n+\t* gcc.target/mips/div-13.c: New test.\n+\n 2013-05-25  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tPR target/55777"}, {"sha": "cf746a66306babd48741903289843a700c7bb12a", "filename": "gcc/testsuite/gcc.target/mips/div-13.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8597040b32e22a6defa8f642364500a45d953b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8597040b32e22a6defa8f642364500a45d953b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdiv-13.c?ref=3b8597040b32e22a6defa8f642364500a45d953b", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-options \"(-mips16) -mgp64\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int int32_t;\n+typedef unsigned int uint32_t;\n+typedef long long int64_t;\n+typedef unsigned long long uint64_t;\n+\n+MIPS16 int32_t f1 (int32_t x, int32_t y) { return x / y + x % y; }\n+MIPS16 uint32_t f2 (uint32_t x, uint32_t y) { return x / y + x % y; }\n+MIPS16 int64_t f3 (int64_t x, int64_t y) { return x / y + x % y; }\n+MIPS16 uint64_t f4 (uint64_t x, uint64_t y) { return x / y + x % y; }\n+\n+/* { dg-final { scan-assembler-times \"\\tdiv\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tdivu\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tddiv\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tddivu\\t\" 1 } } */"}]}