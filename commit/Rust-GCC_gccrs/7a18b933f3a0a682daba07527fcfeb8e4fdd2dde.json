{"sha": "7a18b933f3a0a682daba07527fcfeb8e4fdd2dde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ExOGI5MzNmM2EwYTY4MmRhYmEwNzUyN2ZjZmViOGU0ZmRkMmRkZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-09-04T09:36:20Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-09-04T09:36:20Z"}, "message": "cp-tree.h (finish_sizeof, [...]): Remove.\n\ncp:\n\t* cp-tree.h (finish_sizeof, finish_alignof): Remove.\n\t(expr_sizeof): Replace with ...\n\t(cxx_sizeof_or_alignof_expr): ... here.\n\t(cxx_sizeof_or_alignof_type): Make complain parameter a bool.\n\t* parser.c (cp_parser_unary_expression): Commonize alignof and\n\tsizeof handling.\n\t* pt.c (tsubst_copy_and_build): Adjust alignof and sizeof\n\tsubstitution.\n\t* semantics.c (finish_sizeof, finish_alignof): Remove.\n\t* typeck.c (cxx_sizeof_or_alignof_type): Complain parameter\n\tbecomes bool. Set TREE_READONLY.\n\t(expr_sizeof): Replace with ...\n\t(cxx_sizeof_or_alignof_expr): ... here. Clear TREE_SIDE_EFFECTS.\n\nFrom-SVN: r71054", "tree": {"sha": "54f8ff1cf3fcfad94194deea3ba83734c6c92f8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54f8ff1cf3fcfad94194deea3ba83734c6c92f8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a18b933f3a0a682daba07527fcfeb8e4fdd2dde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a18b933f3a0a682daba07527fcfeb8e4fdd2dde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a18b933f3a0a682daba07527fcfeb8e4fdd2dde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a18b933f3a0a682daba07527fcfeb8e4fdd2dde/comments", "author": null, "committer": null, "parents": [{"sha": "b379a5939dfaad14eb2285dfb078251fbcdf9bf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b379a5939dfaad14eb2285dfb078251fbcdf9bf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b379a5939dfaad14eb2285dfb078251fbcdf9bf3"}], "stats": {"total": 127, "additions": 68, "deletions": 59}, "files": [{"sha": "3c3112dc5252b2cba13eab694c216c7a1f2e538e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a18b933f3a0a682daba07527fcfeb8e4fdd2dde/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a18b933f3a0a682daba07527fcfeb8e4fdd2dde/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7a18b933f3a0a682daba07527fcfeb8e4fdd2dde", "patch": "@@ -1,3 +1,19 @@\n+2003-09-04  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cp-tree.h (finish_sizeof, finish_alignof): Remove.\n+\t(expr_sizeof): Replace with ...\n+\t(cxx_sizeof_or_alignof_expr): ... here.\n+\t(cxx_sizeof_or_alignof_type): Make complain parameter a bool.\n+\t* parser.c (cp_parser_unary_expression): Commonize alignof and\n+\tsizeof handling.\n+\t* pt.c (tsubst_copy_and_build): Adjust alignof and sizeof\n+\tsubstitution.\n+\t* semantics.c (finish_sizeof, finish_alignof): Remove.\n+\t* typeck.c (cxx_sizeof_or_alignof_type): Complain parameter\n+\tbecomes bool. Set TREE_READONLY.\n+\t(expr_sizeof): Replace with ...\n+\t(cxx_sizeof_or_alignof_expr): ... here. Clear TREE_SIDE_EFFECTS.\n+\n 2003-09-04  Mark Mitchell  <mark@codesourcery.com>\n \n \tRemove cast-as-lvalue extension."}, {"sha": "278f5d627ef41c8c58ee360e9614dce94b35cbad", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a18b933f3a0a682daba07527fcfeb8e4fdd2dde/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a18b933f3a0a682daba07527fcfeb8e4fdd2dde/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7a18b933f3a0a682daba07527fcfeb8e4fdd2dde", "patch": "@@ -4137,8 +4137,6 @@ extern tree finish_id_expression                (tree, tree, tree,\n \t\t\t\t\t\t bool, bool, bool *, \n \t\t\t\t\t\t const char **);\n extern tree finish_typeof\t\t\t(tree);\n-extern tree finish_sizeof\t\t\t(tree);\n-extern tree finish_alignof\t\t\t(tree);\n extern void finish_decl_cleanup                 (tree, tree);\n extern void finish_eh_cleanup                   (tree);\n extern void expand_body                         (tree);\n@@ -4248,8 +4246,8 @@ extern bool comptypes\t\t\t\t(tree, tree, int);\n extern bool compparms\t\t\t\t(tree, tree);\n extern int comp_cv_qualification                (tree, tree);\n extern int comp_cv_qual_signature               (tree, tree);\n-extern tree expr_sizeof\t\t\t\t(tree);\n-extern tree cxx_sizeof_or_alignof_type    (tree, enum tree_code, int);\n+extern tree cxx_sizeof_or_alignof_expr    (tree, enum tree_code);\n+extern tree cxx_sizeof_or_alignof_type    (tree, enum tree_code, bool);\n #define cxx_sizeof_nowarn(T) cxx_sizeof_or_alignof_type (T, SIZEOF_EXPR, false)\n extern tree inline_conversion\t\t\t(tree);\n extern tree decay_conversion\t\t\t(tree);"}, {"sha": "786e1ee4bd58c2bb946568e2a2b10a01ba0c609f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a18b933f3a0a682daba07527fcfeb8e4fdd2dde/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a18b933f3a0a682daba07527fcfeb8e4fdd2dde/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=7a18b933f3a0a682daba07527fcfeb8e4fdd2dde", "patch": "@@ -3969,32 +3969,21 @@ cp_parser_unary_expression (cp_parser *parser, bool address_p)\n       switch (keyword)\n \t{\n \tcase RID_ALIGNOF:\n-\t  {\n-\t    /* Consume the `alignof' token.  */\n-\t    cp_lexer_consume_token (parser->lexer);\n-\t    /* Parse the operand.  */\n-\t    return finish_alignof (cp_parser_sizeof_operand \n-\t\t\t\t   (parser, keyword));\n-\t  }\n-\n \tcase RID_SIZEOF:\n \t  {\n \t    tree operand;\n+\t    enum tree_code op;\n \t    \n-\t    /* Consume the `sizeof' token.  */\n+\t    op = keyword == RID_ALIGNOF ? ALIGNOF_EXPR : SIZEOF_EXPR;\n+\t    /* Consume the token.  */\n \t    cp_lexer_consume_token (parser->lexer);\n \t    /* Parse the operand.  */\n \t    operand = cp_parser_sizeof_operand (parser, keyword);\n \n-\t    /* If the type of the operand cannot be determined build a\n-\t       SIZEOF_EXPR.  */\n-\t    if (TYPE_P (operand)\n-\t\t? dependent_type_p (operand)\n-\t\t: type_dependent_expression_p (operand))\n-\t      return build_min (SIZEOF_EXPR, size_type_node, operand);\n-\t    /* Otherwise, compute the constant value.  */\n+\t    if (TYPE_P (operand))\n+\t      return cxx_sizeof_or_alignof_type (operand, op, true);\n \t    else\n-\t      return finish_sizeof (operand);\n+\t      return cxx_sizeof_or_alignof_expr (operand, op);\n \t  }\n \n \tcase RID_NEW:"}, {"sha": "53d483c1a9fffca034242f995d2e8912754304bf", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a18b933f3a0a682daba07527fcfeb8e4fdd2dde/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a18b933f3a0a682daba07527fcfeb8e4fdd2dde/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7a18b933f3a0a682daba07527fcfeb8e4fdd2dde", "patch": "@@ -8048,10 +8048,10 @@ tsubst_copy_and_build (tree t,\n \t  op1 = RECUR (op1);\n \t  --skip_evaluation;\n \t}\n-      if (TREE_CODE (t) == SIZEOF_EXPR)\n-\treturn finish_sizeof (op1);\n+      if (TYPE_P (op1))\n+\treturn cxx_sizeof_or_alignof_type (op1, TREE_CODE (t), true);\n       else\n-\treturn finish_alignof (op1);\n+\treturn cxx_sizeof_or_alignof_expr (op1, TREE_CODE (t));\n \n     case MODOP_EXPR:\n       return build_x_modify_expr"}, {"sha": "d3191a977278f0d5365c360e2b43369a0e00e61b", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a18b933f3a0a682daba07527fcfeb8e4fdd2dde/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a18b933f3a0a682daba07527fcfeb8e4fdd2dde/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=7a18b933f3a0a682daba07527fcfeb8e4fdd2dde", "patch": "@@ -2668,26 +2668,6 @@ finish_typeof (tree expr)\n   return type;\n }\n \n-/* Compute the value of the `sizeof' operator.  */\n-\n-tree\n-finish_sizeof (tree t)\n-{\n-  return TYPE_P (t) ? cxx_sizeof (t) : expr_sizeof (t);\n-}\n-\n-/* Implement the __alignof keyword: Return the minimum required\n-   alignment of T, measured in bytes.  */\n-\n-tree\n-finish_alignof (tree t)\n-{\n-  if (processing_template_decl)\n-    return build_min (ALIGNOF_EXPR, size_type_node, t);\n-\n-  return TYPE_P (t) ? cxx_alignof (t) : c_alignof_expr (t);\n-}\n-\n /* Generate RTL for the statement T, and its substatements, and any\n    other statements at its nesting level.  */\n "}, {"sha": "4823aba8d3cc3c1a89e24d9761acdb9334fb0ab8", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 41, "deletions": 15, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a18b933f3a0a682daba07527fcfeb8e4fdd2dde/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a18b933f3a0a682daba07527fcfeb8e4fdd2dde/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7a18b933f3a0a682daba07527fcfeb8e4fdd2dde", "patch": "@@ -1177,16 +1177,26 @@ compparms (tree parms1, tree parms2)\n }\n \n \f\n+/* Process a sizeof or alignof expression where the operand is a\n+   type.  */\n+\n tree\n-cxx_sizeof_or_alignof_type (tree type, enum tree_code op, int complain)\n+cxx_sizeof_or_alignof_type (tree type, enum tree_code op, bool complain)\n {\n   enum tree_code type_code;\n   tree value;\n   const char *op_name;\n \n   my_friendly_assert (op == SIZEOF_EXPR || op == ALIGNOF_EXPR, 20020720);\n+  if (type == error_mark_node)\n+    return error_mark_node;\n+  \n   if (processing_template_decl)\n-    return build_min (op, size_type_node, type);\n+    {\n+      value = build_min (op, size_type_node, type);\n+      TREE_READONLY (value) = 1;\n+      return value;\n+    }\n   \n   op_name = operator_name_info[(int) op].name;\n \n@@ -1205,30 +1215,46 @@ cxx_sizeof_or_alignof_type (tree type, enum tree_code op, int complain)\n   return value;\n }\n \n+/* Process a sizeof or alignof expression where the operand is an\n+   expression.  */\n+\n tree\n-expr_sizeof (tree e)\n+cxx_sizeof_or_alignof_expr (tree e, enum tree_code op)\n {\n+  const char *op_name = operator_name_info[(int) op].name;\n+  \n+  if (e == error_mark_node)\n+    return error_mark_node;\n+  \n   if (processing_template_decl)\n-    return build_min (SIZEOF_EXPR, size_type_node, e);\n-\n+    {\n+      e = build_min (op, size_type_node, e);\n+      TREE_SIDE_EFFECTS (e) = 0;\n+      TREE_READONLY (e) = 1;\n+      \n+      return e;\n+    }\n+  \n   if (TREE_CODE (e) == COMPONENT_REF\n       && DECL_C_BIT_FIELD (TREE_OPERAND (e, 1)))\n-    error (\"sizeof applied to a bit-field\");\n-  if (is_overloaded_fn (e))\n     {\n-      pedwarn (\"ISO C++ forbids applying `sizeof' to an expression of function type\");\n-      return c_sizeof (char_type_node);\n+      error (\"invalid application of `%s' to a bit-field\", op_name);\n+      e = char_type_node;\n+    }\n+  else if (is_overloaded_fn (e))\n+    {\n+      pedwarn (\"ISO C++ forbids applying `%s' to an expression of function type\", op_name);\n+      e = char_type_node;\n     }\n   else if (type_unknown_p (e))\n     {\n       cxx_incomplete_type_error (e, TREE_TYPE (e));\n-      return c_sizeof (char_type_node);\n+      e = char_type_node;\n     }\n-\n-  if (e == error_mark_node)\n-    return e;\n-\n-  return cxx_sizeof (TREE_TYPE (e));\n+  else\n+    e = TREE_TYPE (e);\n+  \n+  return cxx_sizeof_or_alignof_type (e, op, true);\n }\n   \n \f"}]}