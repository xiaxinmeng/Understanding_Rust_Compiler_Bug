{"sha": "b66e72b43e1e8f402dc958ce3cca35f7c273340d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY2ZTcyYjQzZTFlOGY0MDJkYzk1OGNlM2NjYTM1ZjdjMjczMzQwZA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-19T12:36:14Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-19T17:27:13Z"}, "message": "libphobos: Add D runtime support code for MinGW (PR99794)\n\nlibphobos/ChangeLog:\n\n\tPR d/99794\n\t* libdruntime/Makefile.am (DRUNTIME_SOURCES_CONFIGURED): Add\n\tconfig/mingw/msvc.c on DRUNTIME_OS_MINGW.\n\t* libdruntime/Makefile.in: Regenerate.\n\t* libdruntime/config/mingw/msvc.c: New file.\n\t* libdruntime/config/mingw/switchcontext.S (fiber_switchContext): Fix\n\tfunction definition.\n\t* libdruntime/gcc/deh.d (__gdc_personality_seh0): Fix call to\n\t_GCC_specific_handler.\n\t* libdruntime/gcc/gthread.d (__gthread_once_t): Fix definition.\n\t* libdruntime/gcc/unwind/generic.d (_GCC_specific_handler): Fix\n\tdeclaration.\n\t* libdruntime/rt/dmain2.d (rt_loadLibrary): Remove function.\n\t(rt_loadLibraryW): Remove function.\n\t(initLibrary): Remove function.\n\t(rt_unloadLibrary): Remove function.", "tree": {"sha": "f78d66de08d1529c625b16c2114ba42e4ef4d12e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f78d66de08d1529c625b16c2114ba42e4ef4d12e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b66e72b43e1e8f402dc958ce3cca35f7c273340d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b66e72b43e1e8f402dc958ce3cca35f7c273340d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b66e72b43e1e8f402dc958ce3cca35f7c273340d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b66e72b43e1e8f402dc958ce3cca35f7c273340d/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d86e60855f05a0e493f8362c12bfd40d5432d337", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d86e60855f05a0e493f8362c12bfd40d5432d337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d86e60855f05a0e493f8362c12bfd40d5432d337"}], "stats": {"total": 317, "additions": 223, "deletions": 94}, "files": [{"sha": "fdac627364dc30ae624d9b96da63f89e22e38edb", "filename": "libphobos/libdruntime/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e72b43e1e8f402dc958ce3cca35f7c273340d/libphobos%2Flibdruntime%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e72b43e1e8f402dc958ce3cca35f7c273340d/libphobos%2Flibdruntime%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.am?ref=b66e72b43e1e8f402dc958ce3cca35f7c273340d", "patch": "@@ -69,7 +69,8 @@ if DRUNTIME_OS_LINUX\n     DRUNTIME_SOURCES_CONFIGURED += $(DRUNTIME_DSOURCES_LINUX)\n endif\n if DRUNTIME_OS_MINGW\n-    DRUNTIME_SOURCES_CONFIGURED += $(DRUNTIME_DSOURCES_WINDOWS)\n+    DRUNTIME_SOURCES_CONFIGURED += $(DRUNTIME_DSOURCES_WINDOWS) \\\n+\t\t\t\t   config/mingw/msvc.c\n endif\n if DRUNTIME_OS_SOLARIS\n     DRUNTIME_SOURCES_CONFIGURED += $(DRUNTIME_DSOURCES_SOLARIS)"}, {"sha": "1ff2ac665ee856989efce56b126c2de6f6c6c58c", "filename": "libphobos/libdruntime/Makefile.in", "status": "modified", "additions": 35, "deletions": 21, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e72b43e1e8f402dc958ce3cca35f7c273340d/libphobos%2Flibdruntime%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e72b43e1e8f402dc958ce3cca35f7c273340d/libphobos%2Flibdruntime%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.in?ref=b66e72b43e1e8f402dc958ce3cca35f7c273340d", "patch": "@@ -117,7 +117,9 @@ target_triplet = @target@\n @DRUNTIME_OS_NETBSD_TRUE@am__append_6 = $(DRUNTIME_DSOURCES_NETBSD)\n @DRUNTIME_OS_OPENBSD_TRUE@am__append_7 = $(DRUNTIME_DSOURCES_OPENBSD)\n @DRUNTIME_OS_LINUX_TRUE@am__append_8 = $(DRUNTIME_DSOURCES_LINUX)\n-@DRUNTIME_OS_MINGW_TRUE@am__append_9 = $(DRUNTIME_DSOURCES_WINDOWS)\n+@DRUNTIME_OS_MINGW_TRUE@am__append_9 = $(DRUNTIME_DSOURCES_WINDOWS) \\\n+@DRUNTIME_OS_MINGW_TRUE@\t\t\t\t   config/mingw/msvc.c\n+\n @DRUNTIME_OS_SOLARIS_TRUE@am__append_10 = $(DRUNTIME_DSOURCES_SOLARIS)\n # CPU specific sources\n @DRUNTIME_CPU_AARCH64_TRUE@am__append_11 = config/aarch64/switchcontext.S\n@@ -428,7 +430,8 @@ am__objects_19 = core/sys/windows/accctrl.lo \\\n \tcore/sys/windows/winsvc.lo core/sys/windows/winuser.lo \\\n \tcore/sys/windows/winver.lo core/sys/windows/wtsapi32.lo \\\n \tcore/sys/windows/wtypes.lo\n-@DRUNTIME_OS_MINGW_TRUE@am__objects_20 = $(am__objects_19)\n+@DRUNTIME_OS_MINGW_TRUE@am__objects_20 = $(am__objects_19) \\\n+@DRUNTIME_OS_MINGW_TRUE@\tconfig/mingw/libgdruntime_la-msvc.lo\n am__objects_21 = core/sys/solaris/dlfcn.lo core/sys/solaris/elf.lo \\\n \tcore/sys/solaris/err.lo core/sys/solaris/execinfo.lo \\\n \tcore/sys/solaris/libelf.lo core/sys/solaris/link.lo \\\n@@ -463,24 +466,26 @@ am_libgdruntime_la_OBJECTS = $(am__objects_33)\n libgdruntime_la_OBJECTS = $(am_libgdruntime_la_OBJECTS)\n am__DEPENDENCIES_2 = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)\n am__objects_34 = core/stdc/libgdruntime_convenience_la-errno_.lo\n-@DRUNTIME_CPU_AARCH64_TRUE@am__objects_35 = config/aarch64/libgdruntime_convenience_la-switchcontext.lo\n-@DRUNTIME_CPU_ARM_TRUE@am__objects_36 = config/arm/libgdruntime_convenience_la-switchcontext.lo\n-@DRUNTIME_CPU_MIPS_TRUE@am__objects_37 = config/mips/libgdruntime_convenience_la-switchcontext.lo\n-@DRUNTIME_CPU_POWERPC_TRUE@am__objects_38 = config/powerpc/libgdruntime_convenience_la-switchcontext.lo\n-@DRUNTIME_CPU_X86_TRUE@@DRUNTIME_OS_MINGW_TRUE@am__objects_39 = config/mingw/libgdruntime_convenience_la-switchcontext.lo\n-@DRUNTIME_CPU_X86_TRUE@@DRUNTIME_OS_MINGW_FALSE@am__objects_40 = config/x86/libgdruntime_convenience_la-switchcontext.lo\n-@DRUNTIME_CPU_SYSTEMZ_TRUE@am__objects_41 = config/systemz/libgdruntime_convenience_la-get_tls_offset.lo\n-@DRUNTIME_CPU_S390_TRUE@am__objects_42 = config/s390/libgdruntime_convenience_la-get_tls_offset.lo\n-am__objects_43 = $(am__objects_4) $(am__objects_6) $(am__objects_8) \\\n+@DRUNTIME_OS_MINGW_TRUE@am__objects_35 = $(am__objects_19) \\\n+@DRUNTIME_OS_MINGW_TRUE@\tconfig/mingw/libgdruntime_convenience_la-msvc.lo\n+@DRUNTIME_CPU_AARCH64_TRUE@am__objects_36 = config/aarch64/libgdruntime_convenience_la-switchcontext.lo\n+@DRUNTIME_CPU_ARM_TRUE@am__objects_37 = config/arm/libgdruntime_convenience_la-switchcontext.lo\n+@DRUNTIME_CPU_MIPS_TRUE@am__objects_38 = config/mips/libgdruntime_convenience_la-switchcontext.lo\n+@DRUNTIME_CPU_POWERPC_TRUE@am__objects_39 = config/powerpc/libgdruntime_convenience_la-switchcontext.lo\n+@DRUNTIME_CPU_X86_TRUE@@DRUNTIME_OS_MINGW_TRUE@am__objects_40 = config/mingw/libgdruntime_convenience_la-switchcontext.lo\n+@DRUNTIME_CPU_X86_TRUE@@DRUNTIME_OS_MINGW_FALSE@am__objects_41 = config/x86/libgdruntime_convenience_la-switchcontext.lo\n+@DRUNTIME_CPU_SYSTEMZ_TRUE@am__objects_42 = config/systemz/libgdruntime_convenience_la-get_tls_offset.lo\n+@DRUNTIME_CPU_S390_TRUE@am__objects_43 = config/s390/libgdruntime_convenience_la-get_tls_offset.lo\n+am__objects_44 = $(am__objects_4) $(am__objects_6) $(am__objects_8) \\\n \t$(am__objects_10) $(am__objects_12) $(am__objects_14) \\\n-\t$(am__objects_16) $(am__objects_18) $(am__objects_20) \\\n-\t$(am__objects_22) $(am__objects_35) $(am__objects_36) \\\n-\t$(am__objects_37) $(am__objects_38) $(am__objects_39) \\\n-\t$(am__objects_40) $(am__objects_41) $(am__objects_42)\n-am__objects_44 = $(am__objects_1) $(am__objects_34) $(am__objects_43) \\\n+\t$(am__objects_16) $(am__objects_18) $(am__objects_35) \\\n+\t$(am__objects_22) $(am__objects_36) $(am__objects_37) \\\n+\t$(am__objects_38) $(am__objects_39) $(am__objects_40) \\\n+\t$(am__objects_41) $(am__objects_42) $(am__objects_43)\n+am__objects_45 = $(am__objects_1) $(am__objects_34) $(am__objects_44) \\\n \t$(am__objects_32)\n-am__objects_45 = $(am__objects_44)\n-am_libgdruntime_convenience_la_OBJECTS = $(am__objects_45)\n+am__objects_46 = $(am__objects_45)\n+am_libgdruntime_convenience_la_OBJECTS = $(am__objects_46)\n libgdruntime_convenience_la_OBJECTS =  \\\n \t$(am_libgdruntime_convenience_la_OBJECTS)\n AM_V_P = $(am__v_P_@AM_V@)\n@@ -1732,6 +1737,10 @@ core/sys/windows/winuser.lo: core/sys/windows/$(am__dirstamp)\n core/sys/windows/winver.lo: core/sys/windows/$(am__dirstamp)\n core/sys/windows/wtsapi32.lo: core/sys/windows/$(am__dirstamp)\n core/sys/windows/wtypes.lo: core/sys/windows/$(am__dirstamp)\n+config/mingw/$(am__dirstamp):\n+\t@$(MKDIR_P) config/mingw\n+\t@: > config/mingw/$(am__dirstamp)\n+config/mingw/libgdruntime_la-msvc.lo: config/mingw/$(am__dirstamp)\n core/sys/solaris/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/solaris\n \t@: > core/sys/solaris/$(am__dirstamp)\n@@ -1781,9 +1790,6 @@ config/powerpc/$(am__dirstamp):\n \t@: > config/powerpc/$(am__dirstamp)\n config/powerpc/libgdruntime_la-switchcontext.lo:  \\\n \tconfig/powerpc/$(am__dirstamp)\n-config/mingw/$(am__dirstamp):\n-\t@$(MKDIR_P) config/mingw\n-\t@: > config/mingw/$(am__dirstamp)\n config/mingw/libgdruntime_la-switchcontext.lo:  \\\n \tconfig/mingw/$(am__dirstamp)\n config/x86/$(am__dirstamp):\n@@ -1808,6 +1814,8 @@ libgdruntime.la: $(libgdruntime_la_OBJECTS) $(libgdruntime_la_DEPENDENCIES) $(EX\n \t$(AM_V_GEN)$(libgdruntime_la_LINK) -rpath $(toolexeclibdir) $(libgdruntime_la_OBJECTS) $(libgdruntime_la_LIBADD) $(LIBS)\n core/stdc/libgdruntime_convenience_la-errno_.lo:  \\\n \tcore/stdc/$(am__dirstamp)\n+config/mingw/libgdruntime_convenience_la-msvc.lo:  \\\n+\tconfig/mingw/$(am__dirstamp)\n config/aarch64/libgdruntime_convenience_la-switchcontext.lo:  \\\n \tconfig/aarch64/$(am__dirstamp)\n config/arm/libgdruntime_convenience_la-switchcontext.lo:  \\\n@@ -2003,9 +2011,15 @@ config/s390/libgdruntime_convenience_la-get_tls_offset.lo: config/s390/get_tls_o\n core/stdc/libgdruntime_la-errno_.lo: core/stdc/errno_.c\n \t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgdruntime_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o core/stdc/libgdruntime_la-errno_.lo `test -f 'core/stdc/errno_.c' || echo '$(srcdir)/'`core/stdc/errno_.c\n \n+config/mingw/libgdruntime_la-msvc.lo: config/mingw/msvc.c\n+\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgdruntime_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o config/mingw/libgdruntime_la-msvc.lo `test -f 'config/mingw/msvc.c' || echo '$(srcdir)/'`config/mingw/msvc.c\n+\n core/stdc/libgdruntime_convenience_la-errno_.lo: core/stdc/errno_.c\n \t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgdruntime_convenience_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o core/stdc/libgdruntime_convenience_la-errno_.lo `test -f 'core/stdc/errno_.c' || echo '$(srcdir)/'`core/stdc/errno_.c\n \n+config/mingw/libgdruntime_convenience_la-msvc.lo: config/mingw/msvc.c\n+\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgdruntime_convenience_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o config/mingw/libgdruntime_convenience_la-msvc.lo `test -f 'config/mingw/msvc.c' || echo '$(srcdir)/'`config/mingw/msvc.c\n+\n mostlyclean-libtool:\n \t-rm -f *.lo\n "}, {"sha": "da40718e3ed7ddf49532ec33b541cba5f77d02a8", "filename": "libphobos/libdruntime/config/mingw/msvc.c", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e72b43e1e8f402dc958ce3cca35f7c273340d/libphobos%2Flibdruntime%2Fconfig%2Fmingw%2Fmsvc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e72b43e1e8f402dc958ce3cca35f7c273340d/libphobos%2Flibdruntime%2Fconfig%2Fmingw%2Fmsvc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fconfig%2Fmingw%2Fmsvc.c?ref=b66e72b43e1e8f402dc958ce3cca35f7c273340d", "patch": "@@ -0,0 +1,169 @@\n+/* Windows support code to wrap differences between different\n+   versions of the Microsoft C libaries.\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifdef __MINGW32__\n+#include <_mingw.h>\n+#endif\n+#include <stdio.h>\n+\n+/* The D runtime library defines stdin, stdout, and stderr as extern(C) symbols\n+   in the core.stdc.stdio module, and require initializing at start-up.  */\n+__attribute__((weakref (\"stdin\")))\n+static FILE *core_stdc_stdin;\n+\n+__attribute__((weakref (\"stdout\")))\n+static FILE *core_stdc_stdout;\n+\n+__attribute__((weakref (\"stderr\")))\n+static FILE *core_stdc_stderr;\n+\n+/* Set to 1 if runtime is using libucrt.dll.  */\n+unsigned char msvcUsesUCRT;\n+\n+void\n+init_msvc (void)\n+{\n+  core_stdc_stdin = stdin;\n+  core_stdc_stdout = stdout;\n+  core_stdc_stderr = stderr;\n+\n+#if __MSVCRT_VERSION__ >= 0xE00\n+  msvcUsedUCRT = 1;\n+#endif\n+}\n+\n+/* Phobos std.stdio module assumes these functions are present at link time,\n+   and not absent or macros.  */\n+#ifdef _fgetc_nolock\n+#undef _fgetc_nolock\n+\n+int\n+_fgetc_nolock (FILE *fp)\n+{\n+  fp->_cnt--;\n+  if (fp->_cnt >= 0)\n+    {\n+      const int c = *fp->_ptr;\n+      fp->_ptr++;\n+      return c & 0xff;\n+    }\n+  else\n+    return _filbuf (fp);\n+}\n+\n+#endif /* _fgetc_nolock */\n+\n+#ifdef _fputc_nolock\n+#undef _fputc_nolock\n+\n+int\n+_fputc_nolock (int c, FILE *fp)\n+{\n+  fp->_cnt--;\n+  if (fp->_cnt >= 0)\n+    {\n+      *fp->_ptr = (char) c;\n+      fp->_ptr++;\n+      return c & 0xff;\n+    }\n+  else\n+    return _flsbuf (c, fp);\n+}\n+\n+#endif /* _fputc_nolock */\n+\n+#ifdef rewind\n+#undef rewind\n+\n+void\n+rewind (FILE *fp)\n+{\n+  fseek (fp, 0, SEEK_SET);\n+  fp->_flag &= ~_IOERR;\n+}\n+\n+#endif /* rewind */\n+\n+#ifdef clearerr\n+#undef clearerr\n+\n+void\n+clearerr (FILE *fp)\n+{\n+  fp->_flag &= ~(_IOERR | _IOEOF);\n+}\n+\n+#endif /* clearerr */\n+\n+#ifdef feof\n+#undef feof\n+\n+int\n+feof (FILE *fp)\n+{\n+  return fp->_flag & _IOEOF;\n+}\n+\n+#endif /* feof */\n+\n+#ifdef ferror\n+#undef ferror\n+\n+int\n+ferror (FILE *fp)\n+{\n+  return fp->_flag & _IOERR;\n+}\n+\n+#endif /* ferror */\n+\n+#ifdef fileno\n+#undef fileno\n+\n+int\n+fileno (FILE *fp)\n+{\n+  return fp->_file;\n+}\n+\n+#endif /* fileno */\n+\n+/* Phobos std.stdio module has a dependency on the UCRT library, so provide\n+   stubs that forward to the nearest equivalent.  */\n+#if __MSVCRT_VERSION__ < 0x800\n+\n+wint_t\n+_fgetwc_nolock (FILE *fp)\n+{\n+  return fgetwc (fp);\n+}\n+\n+wint_t\n+_fputwc_nolock (wchar_t c, FILE *fp)\n+{\n+    return fputwc(c, fp);\n+}\n+\n+#endif /* __MSVCRT_VERSION__ < 0x800*/"}, {"sha": "0cb8b015bfcf964d008c1149adb5ad9d3cb3e4a7", "filename": "libphobos/libdruntime/config/mingw/switchcontext.S", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e72b43e1e8f402dc958ce3cca35f7c273340d/libphobos%2Flibdruntime%2Fconfig%2Fmingw%2Fswitchcontext.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e72b43e1e8f402dc958ce3cca35f7c273340d/libphobos%2Flibdruntime%2Fconfig%2Fmingw%2Fswitchcontext.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fconfig%2Fmingw%2Fswitchcontext.S?ref=b66e72b43e1e8f402dc958ce3cca35f7c273340d", "patch": "@@ -28,7 +28,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n     .text\n     .globl CSYM(fiber_switchContext)\n-    .type CSYM(fiber_switchContext), @function\n+    .def CSYM(fiber_switchContext)\n+    .scl 2\n+    .type 32\n+    .endef\n     .align 16\n CSYM(fiber_switchContext):\n     .cfi_startproc\n@@ -63,13 +66,15 @@ CSYM(fiber_switchContext):\n     popq %RCX;\n     jmp *%RCX;\n     .cfi_endproc\n-    .size CSYM(fiber_switchContext),.-CSYM(fiber_switchContext)\n \n #elif defined(_X86_)\n \n     .text\n     .globl CSYM(fiber_switchContext)\n-    .type CSYM(fiber_switchContext), @function\n+    .def CSYM(fiber_switchContext)\n+    .scl 2\n+    .type 32\n+    .endef\n     .align 16\n CSYM(fiber_switchContext):\n     .cfi_startproc\n@@ -104,6 +109,5 @@ CSYM(fiber_switchContext):\n     // 'return' to complete switch\n     ret;\n     .cfi_endproc\n-    .size CSYM(fiber_switchContext),.-CSYM(fiber_switchContext)\n \n #endif"}, {"sha": "5ce4869d09604b4e06f1816277cf246c99588ef3", "filename": "libphobos/libdruntime/gcc/deh.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e72b43e1e8f402dc958ce3cca35f7c273340d/libphobos%2Flibdruntime%2Fgcc%2Fdeh.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e72b43e1e8f402dc958ce3cca35f7c273340d/libphobos%2Flibdruntime%2Fgcc%2Fdeh.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcc%2Fdeh.d?ref=b66e72b43e1e8f402dc958ce3cca35f7c273340d", "patch": "@@ -805,7 +805,7 @@ version (GNU_SEH_Exceptions)\n                                                            void* ms_orig_context, void* ms_disp)\n     {\n         return _GCC_specific_handler(ms_exc, this_frame, ms_orig_context,\n-                                     ms_disp, &__gdc_personality_imp);\n+                                     ms_disp, &gdc_personality);\n     }\n }\n else version (GNU_SjLj_Exceptions)"}, {"sha": "5003637b9ead79c5f5ca927bc78d74f23ad9fbf4", "filename": "libphobos/libdruntime/gcc/gthread.d", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e72b43e1e8f402dc958ce3cca35f7c273340d/libphobos%2Flibdruntime%2Fgcc%2Fgthread.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e72b43e1e8f402dc958ce3cca35f7c273340d/libphobos%2Flibdruntime%2Fgcc%2Fgthread.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcc%2Fgthread.d?ref=b66e72b43e1e8f402dc958ce3cca35f7c273340d", "patch": "@@ -86,10 +86,12 @@ else static if (GNU_Thread_Model == ThreadModel.Single)\n }\n else static if (GNU_Thread_Model == ThreadModel.Win32)\n {\n+    import core.stdc.config;\n+\n     struct __gthread_once_t\n     {\n-        INT done;\n-        LONG started;\n+        int done;\n+        c_long started;\n     }\n \n     int __gthr_win32_key_create(__gthread_key_t* keyp, GthreadDestroyFn dtor);"}, {"sha": "592b3afcb718380a4881d1b8f6dc87fb8e3ba4c7", "filename": "libphobos/libdruntime/gcc/unwind/generic.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e72b43e1e8f402dc958ce3cca35f7c273340d/libphobos%2Flibdruntime%2Fgcc%2Funwind%2Fgeneric.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e72b43e1e8f402dc958ce3cca35f7c273340d/libphobos%2Flibdruntime%2Fgcc%2Funwind%2Fgeneric.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcc%2Funwind%2Fgeneric.d?ref=b66e72b43e1e8f402dc958ce3cca35f7c273340d", "patch": "@@ -269,6 +269,6 @@ version (GNU_SEH_Exceptions)\n         ExceptionCollidedUnwind\n     }\n \n-    extern(C) EXCEPTION_DISPOSITION _GCC_specific_handler(void*, void*, void*,\n+    extern(C) EXCEPTION_DISPOSITION _GCC_specific_handler(void*, void*, void*, void*,\n                                                           _Unwind_Personality_Fn);\n }"}, {"sha": "e6acbd5105f242cf65a97751b51f0c78b1a029f7", "filename": "libphobos/libdruntime/rt/dmain2.d", "status": "modified", "additions": 3, "deletions": 64, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e72b43e1e8f402dc958ce3cca35f7c273340d/libphobos%2Flibdruntime%2Frt%2Fdmain2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e72b43e1e8f402dc958ce3cca35f7c273340d/libphobos%2Flibdruntime%2Frt%2Fdmain2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Fdmain2.d?ref=b66e72b43e1e8f402dc958ce3cca35f7c273340d", "patch": "@@ -9,6 +9,9 @@\n  * Source: $(DRUNTIMESRC src/rt/_dmain2.d)\n  */\n \n+/* NOTE: This file has been patched from the original DMD distribution to\n+ * work with the GDC compiler.\n+ */\n module rt.dmain2;\n \n private\n@@ -70,70 +73,6 @@ version (CRuntime_Microsoft)\n     extern(C) void init_msvc();\n }\n \n-/***********************************\n- * These are a temporary means of providing a GC hook for DLL use.  They may be\n- * replaced with some other similar functionality later.\n- */\n-extern (C)\n-{\n-    void* gc_getProxy();\n-    void  gc_setProxy(void* p);\n-    void  gc_clrProxy();\n-\n-    alias void* function()      gcGetFn;\n-    alias void  function(void*) gcSetFn;\n-    alias void  function()      gcClrFn;\n-}\n-\n-version (Windows)\n-{\n-    /*******************************************\n-     * Loads a DLL written in D with the name 'name'.\n-     * Returns:\n-     *      opaque handle to the DLL if successfully loaded\n-     *      null if failure\n-     */\n-    extern (C) void* rt_loadLibrary(const char* name)\n-    {\n-        return initLibrary(.LoadLibraryA(name));\n-    }\n-\n-    extern (C) void* rt_loadLibraryW(const wchar_t* name)\n-    {\n-        return initLibrary(.LoadLibraryW(name));\n-    }\n-\n-    void* initLibrary(void* mod)\n-    {\n-        // BUG: LoadLibrary() call calls rt_init(), which fails if proxy is not set!\n-        // (What? LoadLibrary() is a Windows API call, it shouldn't call rt_init().)\n-        if (mod is null)\n-            return mod;\n-        gcSetFn gcSet = cast(gcSetFn) GetProcAddress(mod, \"gc_setProxy\");\n-        if (gcSet !is null)\n-        {   // BUG: Set proxy, but too late\n-            gcSet(gc_getProxy());\n-        }\n-        return mod;\n-    }\n-\n-    /*************************************\n-     * Unloads DLL that was previously loaded by rt_loadLibrary().\n-     * Input:\n-     *      ptr     the handle returned by rt_loadLibrary()\n-     * Returns:\n-     *      1   succeeded\n-     *      0   some failure happened\n-     */\n-    extern (C) int rt_unloadLibrary(void* ptr)\n-    {\n-        gcClrFn gcClr  = cast(gcClrFn) GetProcAddress(ptr, \"gc_clrProxy\");\n-        if (gcClr !is null)\n-            gcClr();\n-        return FreeLibrary(ptr) != 0;\n-    }\n-}\n-\n /* To get out-of-band access to the args[] passed to main().\n  */\n "}]}