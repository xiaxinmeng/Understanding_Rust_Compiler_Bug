{"sha": "786f715dc6869bac7a3018e880a4ffde41940422", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg2ZjcxNWRjNjg2OWJhYzdhMzAxOGU4ODBhNGZmZGU0MTk0MDQyMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-05-14T18:55:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-05-14T18:55:10Z"}, "message": "re PR c++/44127 (G++ emits unnecessary EH code)\n\n\tPR c++/44127\ngcc:\n\t* gimplify.c (gimplify_seq_add_stmt): No longer static.\n\t* gimple.h: Declare it.\n\t* gimple.c (gimple_build_eh_filter): No ops.\ngcc/cp:\n\t* cp-gimplify.c (gimplify_must_not_throw_expr): Use\n\tgimple_build_eh_must_not_throw.\n\nFrom-SVN: r159407", "tree": {"sha": "f181defcfc86100bea4bb762184c7584637432cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f181defcfc86100bea4bb762184c7584637432cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/786f715dc6869bac7a3018e880a4ffde41940422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786f715dc6869bac7a3018e880a4ffde41940422", "html_url": "https://github.com/Rust-GCC/gccrs/commit/786f715dc6869bac7a3018e880a4ffde41940422", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786f715dc6869bac7a3018e880a4ffde41940422/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "19fb0b860f5b70c3fa0bbf7ef02afd7b95634231", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19fb0b860f5b70c3fa0bbf7ef02afd7b95634231", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19fb0b860f5b70c3fa0bbf7ef02afd7b95634231"}], "stats": {"total": 63, "additions": 58, "deletions": 5}, "files": [{"sha": "a5309e1764986eaddc8121781fda0fea626e1fe6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786f715dc6869bac7a3018e880a4ffde41940422/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786f715dc6869bac7a3018e880a4ffde41940422/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=786f715dc6869bac7a3018e880a4ffde41940422", "patch": "@@ -1,3 +1,10 @@\n+2010-05-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/44127\n+\t* gimplify.c (gimplify_seq_add_stmt): No longer static.\n+\t* gimple.h: Declare it.\n+\t* gimple.c (gimple_build_eh_filter): No ops.\n+\n 2010-05-14  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa.c (enqueue_cgraph_node): Update comment; do not re-enqueue"}, {"sha": "eca1aaaa92c762450882262393e2fc4f38924f1a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786f715dc6869bac7a3018e880a4ffde41940422/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786f715dc6869bac7a3018e880a4ffde41940422/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=786f715dc6869bac7a3018e880a4ffde41940422", "patch": "@@ -1,3 +1,9 @@\n+2010-05-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/44127\n+\t* cp-gimplify.c (gimplify_must_not_throw_expr): Use\n+\tgimple_build_eh_must_not_throw.\n+\n 2010-05-14  Martin Jambor  <mjambor@suse.cz>\n \n \t* cp-lang.c (LANG_HOOKS_FOLD_OBJ_TYPE_REF): Remove both its undef"}, {"sha": "2e3f11d09466208243d82ee5795128f639084733", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786f715dc6869bac7a3018e880a4ffde41940422/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786f715dc6869bac7a3018e880a4ffde41940422/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=786f715dc6869bac7a3018e880a4ffde41940422", "patch": "@@ -480,11 +480,16 @@ gimplify_must_not_throw_expr (tree *expr_p, gimple_seq *pre_p)\n   tree stmt = *expr_p;\n   tree temp = voidify_wrapper_expr (stmt, NULL);\n   tree body = TREE_OPERAND (stmt, 0);\n+  gimple_seq try_ = NULL;\n+  gimple_seq catch_ = NULL;\n+  gimple mnt;\n \n-  stmt = build_gimple_eh_filter_tree (body, NULL_TREE,\n-\t\t\t\t      build_call_n (terminate_node, 0));\n+  gimplify_and_add (body, &try_);\n+  mnt = gimple_build_eh_must_not_throw (terminate_node);\n+  gimplify_seq_add_stmt (&catch_, mnt);\n+  mnt = gimple_build_try (try_, catch_, GIMPLE_TRY_CATCH);\n \n-  gimplify_and_add (stmt, pre_p);\n+  gimplify_seq_add_stmt (pre_p, mnt);\n   if (temp)\n     {\n       *expr_p = temp;"}, {"sha": "dd691a810d25acd4b41d81f2063dc8bad7b1f9fa", "filename": "gcc/gimple.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786f715dc6869bac7a3018e880a4ffde41940422/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786f715dc6869bac7a3018e880a4ffde41940422/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=786f715dc6869bac7a3018e880a4ffde41940422", "patch": "@@ -636,7 +636,7 @@ gimple_build_eh_filter (tree types, gimple_seq failure)\n gimple\n gimple_build_eh_must_not_throw (tree decl)\n {\n-  gimple p = gimple_alloc (GIMPLE_EH_MUST_NOT_THROW, 1);\n+  gimple p = gimple_alloc (GIMPLE_EH_MUST_NOT_THROW, 0);\n \n   gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);\n   gcc_assert (flags_from_decl_or_type (decl) & ECF_NORETURN);"}, {"sha": "8ecf7eb0a4edde50d95dc8c461e2ca906de0a2ed", "filename": "gcc/gimple.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786f715dc6869bac7a3018e880a4ffde41940422/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786f715dc6869bac7a3018e880a4ffde41940422/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=786f715dc6869bac7a3018e880a4ffde41940422", "patch": "@@ -221,6 +221,13 @@ gimple_seq_empty_p (const_gimple_seq s)\n \n void gimple_seq_add_stmt (gimple_seq *, gimple);\n \n+/* Link gimple statement GS to the end of the sequence *SEQ_P.  If\n+   *SEQ_P is NULL, a new sequence is allocated.  This function is\n+   similar to gimple_seq_add_stmt, but does not scan the operands.\n+   During gimplification, we need to manipulate statement sequences\n+   before the def/use vectors have been constructed.  */\n+void gimplify_seq_add_stmt (gimple_seq *, gimple);\n+\n /* Allocate a new sequence and initialize its first element with STMT.  */\n \n static inline gimple_seq"}, {"sha": "6d00fefe9ad453a55f9b1dbed3aa392ee3abed38", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786f715dc6869bac7a3018e880a4ffde41940422/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786f715dc6869bac7a3018e880a4ffde41940422/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=786f715dc6869bac7a3018e880a4ffde41940422", "patch": "@@ -158,7 +158,7 @@ gimple_tree_eq (const void *p1, const void *p2)\n    During gimplification, we need to manipulate statement sequences\n    before the def/use vectors have been constructed.  */\n \n-static void\n+void\n gimplify_seq_add_stmt (gimple_seq *seq_p, gimple gs)\n {\n   gimple_stmt_iterator si;"}, {"sha": "331b142e024ee70e781a4aa5c5e099b2a54c9527", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786f715dc6869bac7a3018e880a4ffde41940422/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786f715dc6869bac7a3018e880a4ffde41940422/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=786f715dc6869bac7a3018e880a4ffde41940422", "patch": "@@ -1,3 +1,8 @@\n+2010-05-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/44127\n+\t* g++.dg/eh/terminate1.C: New.\n+\n 2010-05-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gfortran.dg/gomp/pr44036-1.f90: Adjust."}, {"sha": "cd60bccb48b9ba33f586d6b7967193d318b0bb42", "filename": "gcc/testsuite/g++.dg/eh/terminate1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786f715dc6869bac7a3018e880a4ffde41940422/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fterminate1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786f715dc6869bac7a3018e880a4ffde41940422/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fterminate1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fterminate1.C?ref=786f715dc6869bac7a3018e880a4ffde41940422", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/44127\n+\n+// This is basically the same test as g++.eh/terminate1.C, but that one\n+// tests runtime behavior and this tests the assembly output.  The test\n+// should call terminate (because initializing the catch parm throws), but\n+// from the personality routine, not directly.\n+\n+// { dg-final { scan-assembler-not \"_ZSt9terminatev\" } }\n+\n+struct A\n+{\n+  A() { }\n+  A (const A&) { throw 1; }\n+};\n+\n+int main()\n+{\n+  try\n+    {\n+      throw A();\n+    }\n+  catch (A) { }\n+}"}]}