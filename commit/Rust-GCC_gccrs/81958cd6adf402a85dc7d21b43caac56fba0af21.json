{"sha": "81958cd6adf402a85dc7d21b43caac56fba0af21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE5NThjZDZhZGY0MDJhODVkYzdkMjFiNDNjYWFjNTZmYmEwYWYyMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-09T11:32:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-09T11:32:22Z"}, "message": "c++: Fix ICE during constexpr virtual call evaluation [PR93633]\n\nThe first (valid) testcase ICEs because for\n  A *a = new B ();\n  a->foo (); // virtual method call\nwe actually see &heap  and the \"heap \" objects don't have the class or\nwhatever else type was used in new expression, but an array type containing\none (or more of those for array new) and so when using TYPE_BINFO (objtype)\non it we ICE.\nThis patch handles this special case, and otherwise punts (as shown e.g. in\nthe second testcase, where because the heap object is already deleted,\nwe don't really want to allow it to be used.\n\n2020-02-09  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/93633\n\t* constexpr.c (cxx_eval_constant_expression): If obj is heap var with\n\tARRAY_TYPE, use the element type.  Punt if objtype after that is not\n\ta class type.\n\n\t* g++.dg/cpp2a/constexpr-new11.C: New test.\n\t* g++.dg/cpp2a/constexpr-new12.C: New test.\n\t* g++.dg/cpp2a/constexpr-new13.C: New test.", "tree": {"sha": "9e08c80b11eb8a78776f879ad7b0a4f3027110c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e08c80b11eb8a78776f879ad7b0a4f3027110c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81958cd6adf402a85dc7d21b43caac56fba0af21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81958cd6adf402a85dc7d21b43caac56fba0af21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81958cd6adf402a85dc7d21b43caac56fba0af21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81958cd6adf402a85dc7d21b43caac56fba0af21/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bc3b95dfefd37d860c5dc0004f8a53f6290fbb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc3b95dfefd37d860c5dc0004f8a53f6290fbb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bc3b95dfefd37d860c5dc0004f8a53f6290fbb1"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "90f26c90918df78684a57042bdb73add685c37c7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81958cd6adf402a85dc7d21b43caac56fba0af21/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81958cd6adf402a85dc7d21b43caac56fba0af21/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=81958cd6adf402a85dc7d21b43caac56fba0af21", "patch": "@@ -1,3 +1,10 @@\n+2020-02-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/93633\n+\t* constexpr.c (cxx_eval_constant_expression): If obj is heap var with\n+\tARRAY_TYPE, use the element type.  Punt if objtype after that is not\n+\ta class type.\n+\n 2020-02-08  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/90691"}, {"sha": "6495cf88e6916add1a73f71b3ed536c73a552ce6", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81958cd6adf402a85dc7d21b43caac56fba0af21/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81958cd6adf402a85dc7d21b43caac56fba0af21/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=81958cd6adf402a85dc7d21b43caac56fba0af21", "patch": "@@ -6063,6 +6063,17 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t       && DECL_FIELD_IS_BASE (TREE_OPERAND (obj, 1)))\n \t  obj = TREE_OPERAND (obj, 0);\n \ttree objtype = TREE_TYPE (obj);\n+\tif (VAR_P (obj)\n+\t    && DECL_NAME (obj) == heap_identifier\n+\t    && TREE_CODE (objtype) == ARRAY_TYPE)\n+\t  objtype = TREE_TYPE (objtype);\n+\tif (!CLASS_TYPE_P (objtype))\n+\t  {\n+\t    if (!ctx->quiet)\n+\t      error_at (loc, \"expression %qE is not a constant expression\", t);\n+\t    *non_constant_p = true;\n+\t    return t;\n+\t  }\n \t/* Find the function decl in the virtual functions list.  TOKEN is\n \t   the DECL_VINDEX that says which function we're looking for.  */\n \ttree virtuals = BINFO_VIRTUALS (TYPE_BINFO (objtype));"}, {"sha": "66806752bb60852e440ad4d9bbbd0d8790710469", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81958cd6adf402a85dc7d21b43caac56fba0af21/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81958cd6adf402a85dc7d21b43caac56fba0af21/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=81958cd6adf402a85dc7d21b43caac56fba0af21", "patch": "@@ -1,3 +1,10 @@\n+2020-02-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/93633\n+\t* g++.dg/cpp2a/constexpr-new11.C: New test.\n+\t* g++.dg/cpp2a/constexpr-new12.C: New test.\n+\t* g++.dg/cpp2a/constexpr-new13.C: New test.\n+\n 2020-02-08  Andrew Pinski  <apinski@marvel.com>\n \n \tPR target/91927"}, {"sha": "26658d0a477a474245bc0e8bf40436b829729774", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new11.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81958cd6adf402a85dc7d21b43caac56fba0af21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81958cd6adf402a85dc7d21b43caac56fba0af21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new11.C?ref=81958cd6adf402a85dc7d21b43caac56fba0af21", "patch": "@@ -0,0 +1,31 @@\n+// PR c++/93633\n+// { dg-do compile { target c++2a } }\n+\n+struct A {\n+  constexpr A () : a (0) {}\n+  constexpr virtual int foo () { return 1 + a * 4; }\n+  int a;\n+};\n+\n+struct B : A {\n+  constexpr B () : b (0) {}\n+  constexpr virtual int foo () { return 0 + b * 4; }\n+  int b;\n+};\n+\n+constexpr int\n+foo ()\n+{\n+  A *a = new B ();\n+  a->a = 4;\n+  int r = a->foo ();\n+  delete a;\n+  return r;\n+}\n+\n+int\n+main ()\n+{\n+  constexpr auto a = foo ();\n+  static_assert (a == 0);\n+}"}, {"sha": "2dedcd22b587ea475daffaaa9294edf9de22838d", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new12.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81958cd6adf402a85dc7d21b43caac56fba0af21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81958cd6adf402a85dc7d21b43caac56fba0af21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new12.C?ref=81958cd6adf402a85dc7d21b43caac56fba0af21", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/93633\n+// { dg-do compile { target c++2a } }\n+\n+struct A {\n+  constexpr A () : a (0) {}\n+  constexpr virtual int foo () { return 1 + a * 4; }\n+  int a;\n+};\n+\n+struct B : A {\n+  constexpr B () : b (0) {}\n+  constexpr virtual int foo () { return 0 + b * 4; }\n+  int b;\n+};\n+\n+constexpr int\n+foo ()\n+{\n+  A *a = new B ();\n+  a->a = 4;\n+  delete a;\n+  int r = a->foo ();\n+  return r;\n+}\n+\n+constexpr auto a = foo ();\t// { dg-error \"is not a constant expression\" }"}, {"sha": "21219039152b2db72fa53ad913b3cf407922b1b2", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new13.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81958cd6adf402a85dc7d21b43caac56fba0af21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81958cd6adf402a85dc7d21b43caac56fba0af21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new13.C?ref=81958cd6adf402a85dc7d21b43caac56fba0af21", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/93633\n+// { dg-do compile { target c++2a } }\n+\n+struct A {\n+  constexpr A () : a (0) {}\n+  virtual int foo () { return 1 + a * 4; }\n+  int a;\n+};\n+\n+struct B : A {\n+  constexpr B () : b (0) {}\n+  virtual int foo () { return 0 + b * 4; }\t// { dg-message \"declared here\" }\n+  int b;\n+};\n+\n+constexpr int\n+foo ()\n+{\n+  A *a = new B ();\n+  a->a = 4;\n+  int r = a->foo ();\t// { dg-error \"call to non-.constexpr. function\" }\n+  delete a;\n+  return r;\n+}\n+\n+constexpr auto a = foo ();"}]}