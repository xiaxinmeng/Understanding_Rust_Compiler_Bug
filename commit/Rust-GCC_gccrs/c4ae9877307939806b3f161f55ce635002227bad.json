{"sha": "c4ae9877307939806b3f161f55ce635002227bad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRhZTk4NzczMDc5Mzk4MDZiM2YxNjFmNTVjZTYzNTAwMjIyN2JhZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-11-06T11:03:45Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-11-06T11:03:45Z"}, "message": "atomic_base.h: Don't include <cstddef>, use nullptr.\n\n2012-11-06  Paolo Carlini  <paolo.carlini@oracle.com>\n  \n\t* include/bits/atomic_base.h: Don't include <cstddef>, use nullptr.\n\t* include/std/atomic: Likewise.\n\t* include/tr2/dynamic_bitset: Likewise.\n\n\t* libsupc++/vec.cc (compute_size(std::size_t, std::size_t,\n\tstd::size_t)): Fix for -fno-exceptions.\n\nFrom-SVN: r193232", "tree": {"sha": "a099706908fd75531c11a09c384562cc3830e35d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a099706908fd75531c11a09c384562cc3830e35d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4ae9877307939806b3f161f55ce635002227bad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ae9877307939806b3f161f55ce635002227bad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4ae9877307939806b3f161f55ce635002227bad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ae9877307939806b3f161f55ce635002227bad/comments", "author": null, "committer": null, "parents": [{"sha": "1115dd7ed7f7aec9c532b74ae01390e0fc0f57cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1115dd7ed7f7aec9c532b74ae01390e0fc0f57cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1115dd7ed7f7aec9c532b74ae01390e0fc0f57cf"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "5a252ed33ff357eba4284f8f97f01d329bef51eb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ae9877307939806b3f161f55ce635002227bad/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ae9877307939806b3f161f55ce635002227bad/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c4ae9877307939806b3f161f55ce635002227bad", "patch": "@@ -1,3 +1,12 @@\n+2012-11-06  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/atomic_base.h: Don't include <cstddef>, use nullptr.\n+\t* include/std/atomic: Likewise.\n+\t* include/tr2/dynamic_bitset: Likewise.\n+\n+\t* libsupc++/vec.cc (compute_size(std::size_t, std::size_t,\n+\tstd::size_t)): Fix for -fno-exceptions.\n+\n 2012-11-06  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/profile/map.h (map::emplace_hint): Add missing return."}, {"sha": "8ce55530dd9fac6c348665fd9233a6c0016a79ba", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ae9877307939806b3f161f55ce635002227bad/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ae9877307939806b3f161f55ce635002227bad/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=c4ae9877307939806b3f161f55ce635002227bad", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header.\n \n-// Copyright (C) 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n+// Copyright (C) 2008-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,7 +35,6 @@\n #include <bits/c++config.h>\n #include <stdbool.h>\n #include <stdint.h>\n-#include <cstddef>\n #include <bits/atomic_lockfree_defines.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -423,11 +422,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       bool\n       is_lock_free() const noexcept\n-      { return __atomic_is_lock_free(sizeof(_M_i), NULL); }\n+      { return __atomic_is_lock_free(sizeof(_M_i), nullptr); }\n \n       bool\n       is_lock_free() const volatile noexcept\n-      { return __atomic_is_lock_free(sizeof(_M_i), NULL); }\n+      { return __atomic_is_lock_free(sizeof(_M_i), nullptr); }\n \n       void\n       store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept\n@@ -717,11 +716,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       bool\n       is_lock_free() const noexcept\n-      { return __atomic_is_lock_free(_M_type_size(1), NULL); }\n+      { return __atomic_is_lock_free(_M_type_size(1), nullptr); }\n \n       bool\n       is_lock_free() const volatile noexcept\n-      { return __atomic_is_lock_free(_M_type_size(1), NULL); }\n+      { return __atomic_is_lock_free(_M_type_size(1), nullptr); }\n \n       void\n       store(__pointer_type __p,"}, {"sha": "4f9cd5035a39aacf1f4c22e0258bf7281f0cd409", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ae9877307939806b3f161f55ce635002227bad/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ae9877307939806b3f161f55ce635002227bad/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=c4ae9877307939806b3f161f55ce635002227bad", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header.\n \n-// Copyright (C) 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n+// Copyright (C) 2008-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -184,11 +184,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       bool\n       is_lock_free() const noexcept\n-      { return __atomic_is_lock_free(sizeof(_M_i), NULL); }\n+      { return __atomic_is_lock_free(sizeof(_M_i), nullptr); }\n \n       bool\n       is_lock_free() const volatile noexcept\n-      { return __atomic_is_lock_free(sizeof(_M_i), NULL); }\n+      { return __atomic_is_lock_free(sizeof(_M_i), nullptr); }\n \n       void\n       store(_Tp __i, memory_order _m = memory_order_seq_cst) noexcept"}, {"sha": "5ea0ea5dc7df5b13f4a7574d25d1e6c5a8e6be1b", "filename": "libstdc++-v3/include/tr2/dynamic_bitset", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ae9877307939806b3f161f55ce635002227bad/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ae9877307939806b3f161f55ce635002227bad/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset?ref=c4ae9877307939806b3f161f55ce635002227bad", "patch": "@@ -33,7 +33,6 @@\n \n #include <limits>\n #include <vector>\n-#include <cstddef> // For size_t\n #include <string>\n #include <memory> // For std::allocator\n #include <bits/functexcept.h>   // For invalid_argument, out_of_range,"}, {"sha": "507514ec76a48e5fc7029dd0d2d09eeba4f2d16e", "filename": "libstdc++-v3/libsupc++/vec.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ae9877307939806b3f161f55ce635002227bad/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ae9877307939806b3f161f55ce635002227bad/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc?ref=c4ae9877307939806b3f161f55ce635002227bad", "patch": "@@ -28,6 +28,7 @@\n #include <cxxabi.h>\n #include <new>\n #include <exception>\n+#include <cstdlib>\n #include <bits/exception_defines.h>\n #include \"unwind-cxx.h\"\n \n@@ -65,10 +66,18 @@ namespace __cxxabiv1\n \t\t\t     std::size_t padding_size)\n     {\n       if (element_size && element_count > std::size_t(-1) / element_size)\n+#ifdef __EXCEPTIONS\n \tthrow std::bad_alloc();\n+#else\n+        std::abort();\n+#endif\n       std::size_t size = element_count * element_size;\n       if (size + padding_size < size)\n+#ifdef __EXCEPTIONS\n \tthrow std::bad_alloc();\n+#else\n+        std::abort();\n+#endif\n       return size + padding_size;\n     }\n   }"}]}