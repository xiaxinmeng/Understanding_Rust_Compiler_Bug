{"sha": "300ea2831b894fc143539fe0319f39062b6e4daf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAwZWEyODMxYjg5NGZjMTQzNTM5ZmUwMzE5ZjM5MDYyYjZlNGRhZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-09-30T00:50:24Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-09-30T00:50:24Z"}, "message": "random.tcc: Define static const data members.\n\n2009-09-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/random.tcc: Define static const data members.\n\t* include/tr1/random.tcc: Likewise.\n\t* testsuite/26_numerics/random/subtract_with_carry_engine/\n\trequirements/constants.cc: New.\n\t* testsuite/26_numerics/random/mersenne_twister_engine/\n\trequirements/constants.cc: Likewise.\n\t* testsuite/26_numerics/random/linear_congruential_engine/\n\trequirements/constants.cc: Likewise.\n\t* testsuite/26_numerics/random/shuffle_order_engine/requirements/\n\tconstants.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/subtract_with_carry/\n\trequirements/constants.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/\n\tsubtract_with_carry_01/requirements/constants.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/discard_block/\n\trequirements/constants.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/linear_congruential/\n\trequirements/constants.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/mersenne_twister/\n\trequirements/constants.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/xor_combine/\n\trequirements/constants.cc: Likewise.\n\nFrom-SVN: r152317", "tree": {"sha": "92998be8e05be8e8b4891da6586bae2e8596cf7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92998be8e05be8e8b4891da6586bae2e8596cf7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/300ea2831b894fc143539fe0319f39062b6e4daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/300ea2831b894fc143539fe0319f39062b6e4daf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/300ea2831b894fc143539fe0319f39062b6e4daf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/300ea2831b894fc143539fe0319f39062b6e4daf/comments", "author": null, "committer": null, "parents": [{"sha": "0b70519f0101c104871d90f285ba0ab20306a84e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b70519f0101c104871d90f285ba0ab20306a84e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b70519f0101c104871d90f285ba0ab20306a84e"}], "stats": {"total": 737, "additions": 732, "deletions": 5}, "files": [{"sha": "6cdbedf0c6ff7a0d1f8bc8f7c32c8edd537b4d4d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=300ea2831b894fc143539fe0319f39062b6e4daf", "patch": "@@ -1,4 +1,29 @@\n-2009-09-30  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+2009-09-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/random.tcc: Define static const data members.\n+\t* include/tr1/random.tcc: Likewise.\n+\t* testsuite/26_numerics/random/subtract_with_carry_engine/\n+\trequirements/constants.cc: New.\n+\t* testsuite/26_numerics/random/mersenne_twister_engine/\n+\trequirements/constants.cc: Likewise.\n+\t* testsuite/26_numerics/random/linear_congruential_engine/\n+\trequirements/constants.cc: Likewise.\n+\t* testsuite/26_numerics/random/shuffle_order_engine/requirements/\n+\tconstants.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/subtract_with_carry/\n+\trequirements/constants.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/\n+\tsubtract_with_carry_01/requirements/constants.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/discard_block/\n+\trequirements/constants.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/linear_congruential/\n+\trequirements/constants.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/mersenne_twister/\n+\trequirements/constants.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/xor_combine/\n+\trequirements/constants.cc: Likewise.\n+\n+2009-09-29  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \tPR libstdc++/38923\n \t* acinclude.m4 (GLIBCXX_CHECK_LINKER_FEATURES): Avoid 'head',\n@@ -8,10 +33,10 @@\n \n 2009-09-28  Benjamin Kosnik  <bkoz@redhat.com>\n \n-\t*  libsupc++/eh_terminate.cc: Fixes for -fno-exceptions.\n-\t*  libsupc++/vec.cc: Same.\n-\t*  libsupc++/vterminate.cc: Same.\n-\t*  libsupc++/new_opnt.cc: Same.\n+\t* libsupc++/eh_terminate.cc: Fixes for -fno-exceptions.\n+\t* libsupc++/vec.cc: Same.\n+\t* libsupc++/vterminate.cc: Same.\n+\t* libsupc++/new_opnt.cc: Same.\n \n 2009-09-28  Johannes Singler  <singler@ira.uka.de>\n "}, {"sha": "712426ec9b6475a95f0192facac197ff6f5157fd", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=300ea2831b894fc143539fe0319f39062b6e4daf", "patch": "@@ -89,6 +89,23 @@ namespace std\n       };\n   } // namespace __detail\n \n+\n+  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n+    const _UIntType\n+    linear_congruential_engine<_UIntType, __a, __c, __m>::multiplier;\n+\n+  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n+    const _UIntType\n+    linear_congruential_engine<_UIntType, __a, __c, __m>::increment;\n+\n+  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n+    const _UIntType\n+    linear_congruential_engine<_UIntType, __a, __c, __m>::modulus;\n+\n+  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n+    const _UIntType\n+    linear_congruential_engine<_UIntType, __a, __c, __m>::default_seed;\n+\n   /**\n    * Seeds the LCR with integral value @p __s, adjusted so that the\n    * ring identity is never a member of the convergence set.\n@@ -169,6 +186,133 @@ namespace std\n     }\n \n \n+  template<typename _UIntType,\n+\t   size_t __w, size_t __n, size_t __m, size_t __r,\n+\t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n+\t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n+\t   _UIntType __f>\n+    const size_t\n+    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n+\t\t\t    __s, __b, __t, __c, __l, __f>::word_size;\n+\n+  template<typename _UIntType,\n+\t   size_t __w, size_t __n, size_t __m, size_t __r,\n+\t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n+\t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n+\t   _UIntType __f>\n+    const size_t\n+    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n+\t\t\t    __s, __b, __t, __c, __l, __f>::state_size;\n+\n+  template<typename _UIntType,\n+\t   size_t __w, size_t __n, size_t __m, size_t __r,\n+\t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n+\t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n+\t   _UIntType __f>\n+    const size_t\n+    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n+\t\t\t    __s, __b, __t, __c, __l, __f>::shift_size;\n+\n+  template<typename _UIntType,\n+\t   size_t __w, size_t __n, size_t __m, size_t __r,\n+\t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n+\t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n+\t   _UIntType __f>\n+    const size_t\n+    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n+\t\t\t    __s, __b, __t, __c, __l, __f>::mask_bits;\n+\n+  template<typename _UIntType,\n+\t   size_t __w, size_t __n, size_t __m, size_t __r,\n+\t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n+\t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n+\t   _UIntType __f>\n+    const _UIntType\n+    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n+\t\t\t    __s, __b, __t, __c, __l, __f>::xor_mask;\n+\n+  template<typename _UIntType,\n+\t   size_t __w, size_t __n, size_t __m, size_t __r,\n+\t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n+\t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n+\t   _UIntType __f>\n+    const size_t\n+    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n+\t\t\t    __s, __b, __t, __c, __l, __f>::tempering_u;\n+   \n+  template<typename _UIntType,\n+\t   size_t __w, size_t __n, size_t __m, size_t __r,\n+\t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n+\t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n+\t   _UIntType __f>\n+    const _UIntType\n+    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n+\t\t\t    __s, __b, __t, __c, __l, __f>::tempering_d;\n+\n+  template<typename _UIntType,\n+\t   size_t __w, size_t __n, size_t __m, size_t __r,\n+\t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n+\t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n+\t   _UIntType __f>\n+    const size_t\n+    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n+\t\t\t    __s, __b, __t, __c, __l, __f>::tempering_s;\n+\n+  template<typename _UIntType,\n+\t   size_t __w, size_t __n, size_t __m, size_t __r,\n+\t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n+\t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n+\t   _UIntType __f>\n+    const _UIntType\n+    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n+\t\t\t    __s, __b, __t, __c, __l, __f>::tempering_b;\n+\n+  template<typename _UIntType,\n+\t   size_t __w, size_t __n, size_t __m, size_t __r,\n+\t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n+\t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n+\t   _UIntType __f>\n+    const size_t\n+    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n+\t\t\t    __s, __b, __t, __c, __l, __f>::tempering_t;\n+\n+  template<typename _UIntType,\n+\t   size_t __w, size_t __n, size_t __m, size_t __r,\n+\t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n+\t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n+\t   _UIntType __f>\n+    const _UIntType\n+    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n+\t\t\t    __s, __b, __t, __c, __l, __f>::tempering_c;\n+\n+  template<typename _UIntType,\n+\t   size_t __w, size_t __n, size_t __m, size_t __r,\n+\t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n+\t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n+\t   _UIntType __f>\n+    const size_t\n+    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n+\t\t\t    __s, __b, __t, __c, __l, __f>::tempering_l;\n+\n+  template<typename _UIntType,\n+\t   size_t __w, size_t __n, size_t __m, size_t __r,\n+\t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n+\t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n+\t   _UIntType __f>\n+    const _UIntType\n+    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n+\t\t\t    __s, __b, __t, __c, __l, __f>::\n+                                              initialization_multiplier;\n+\n+  template<typename _UIntType,\n+\t   size_t __w, size_t __n, size_t __m, size_t __r,\n+\t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n+\t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n+\t   _UIntType __f>\n+    const _UIntType\n+    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n+\t\t\t    __s, __b, __t, __c, __l, __f>::default_seed;\n+\n   template<typename _UIntType,\n \t   size_t __w, size_t __n, size_t __m, size_t __r,\n \t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n@@ -340,6 +484,22 @@ namespace std\n     }\n \n \n+  template<typename _UIntType, size_t __w, size_t __s, size_t __r>\n+    const size_t\n+    subtract_with_carry_engine<_UIntType, __w, __s, __r>::word_size;\n+\n+  template<typename _UIntType, size_t __w, size_t __s, size_t __r>\n+    const size_t\n+    subtract_with_carry_engine<_UIntType, __w, __s, __r>::short_lag;\n+\n+  template<typename _UIntType, size_t __w, size_t __s, size_t __r>\n+    const size_t\n+    subtract_with_carry_engine<_UIntType, __w, __s, __r>::long_lag;\n+\n+  template<typename _UIntType, size_t __w, size_t __s, size_t __r>\n+    const _UIntType\n+    subtract_with_carry_engine<_UIntType, __w, __s, __r>::default_seed;\n+\n   template<typename _UIntType, size_t __w, size_t __s, size_t __r>\n     void\n     subtract_with_carry_engine<_UIntType, __w, __s, __r>::\n@@ -474,6 +634,14 @@ namespace std\n     }\n \n \n+  template<typename _RandomNumberEngine, size_t __p, size_t __r>\n+    const size_t\n+    discard_block_engine<_RandomNumberEngine, __p, __r>::block_size;\n+\n+  template<typename _RandomNumberEngine, size_t __p, size_t __r>\n+    const size_t\n+    discard_block_engine<_RandomNumberEngine, __p, __r>::used_block;\n+\n   template<typename _RandomNumberEngine, size_t __p, size_t __r>\n     typename discard_block_engine<_RandomNumberEngine,\n \t\t\t   __p, __r>::result_type\n@@ -576,6 +744,10 @@ namespace std\n     }\n \n \n+  template<typename _RandomNumberEngine, size_t __k>\n+    const size_t\n+    shuffle_order_engine<_RandomNumberEngine, __k>::table_size;\n+\n   template<typename _RandomNumberEngine, size_t __k>\n     typename shuffle_order_engine<_RandomNumberEngine, __k>::result_type\n     shuffle_order_engine<_RandomNumberEngine, __k>::"}, {"sha": "818777d3e227bc9eb829a4a8e02599f240d30537", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "modified", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=300ea2831b894fc143539fe0319f39062b6e4daf", "patch": "@@ -89,6 +89,19 @@ namespace tr1\n       };\n   } // namespace __detail\n \n+\n+  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n+    const _UIntType\n+    linear_congruential<_UIntType, __a, __c, __m>::multiplier;\n+\n+  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n+    const _UIntType\n+    linear_congruential<_UIntType, __a, __c, __m>::increment;\n+\n+  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n+    const _UIntType\n+    linear_congruential<_UIntType, __a, __c, __m>::modulus;\n+\n   /**\n    * Seeds the LCR with integral value @p __x0, adjusted so that the \n    * ring identity is never a member of the convergence set.\n@@ -174,6 +187,83 @@ namespace tr1\n     } \n \n \n+  template<class _UIntType, int __w, int __n, int __m, int __r,\n+\t   _UIntType __a, int __u, int __s,\n+\t   _UIntType __b, int __t, _UIntType __c, int __l>\n+    const int\n+    mersenne_twister<_UIntType, __w, __n, __m, __r, __a, __u, __s,\n+\t\t     __b, __t, __c, __l>::word_size;\n+\n+  template<class _UIntType, int __w, int __n, int __m, int __r,\n+\t   _UIntType __a, int __u, int __s,\n+\t   _UIntType __b, int __t, _UIntType __c, int __l>\n+    const int\n+    mersenne_twister<_UIntType, __w, __n, __m, __r, __a, __u, __s,\n+\t\t     __b, __t, __c, __l>::state_size;\n+    \n+  template<class _UIntType, int __w, int __n, int __m, int __r,\n+\t   _UIntType __a, int __u, int __s,\n+\t   _UIntType __b, int __t, _UIntType __c, int __l>\n+    const int\n+    mersenne_twister<_UIntType, __w, __n, __m, __r, __a, __u, __s,\n+\t\t     __b, __t, __c, __l>::shift_size;\n+\n+  template<class _UIntType, int __w, int __n, int __m, int __r,\n+\t   _UIntType __a, int __u, int __s,\n+\t   _UIntType __b, int __t, _UIntType __c, int __l>\n+    const int\n+    mersenne_twister<_UIntType, __w, __n, __m, __r, __a, __u, __s,\n+\t\t     __b, __t, __c, __l>::mask_bits;\n+\n+  template<class _UIntType, int __w, int __n, int __m, int __r,\n+\t   _UIntType __a, int __u, int __s,\n+\t   _UIntType __b, int __t, _UIntType __c, int __l>\n+    const _UIntType\n+    mersenne_twister<_UIntType, __w, __n, __m, __r, __a, __u, __s,\n+\t\t     __b, __t, __c, __l>::parameter_a;\n+\n+  template<class _UIntType, int __w, int __n, int __m, int __r,\n+\t   _UIntType __a, int __u, int __s,\n+\t   _UIntType __b, int __t, _UIntType __c, int __l>\n+    const int\n+    mersenne_twister<_UIntType, __w, __n, __m, __r, __a, __u, __s,\n+\t\t     __b, __t, __c, __l>::output_u;\n+\n+  template<class _UIntType, int __w, int __n, int __m, int __r,\n+\t   _UIntType __a, int __u, int __s,\n+\t   _UIntType __b, int __t, _UIntType __c, int __l>\n+    const int\n+    mersenne_twister<_UIntType, __w, __n, __m, __r, __a, __u, __s,\n+\t\t     __b, __t, __c, __l>::output_s;\n+\n+  template<class _UIntType, int __w, int __n, int __m, int __r,\n+\t   _UIntType __a, int __u, int __s,\n+\t   _UIntType __b, int __t, _UIntType __c, int __l>\n+    const _UIntType\n+    mersenne_twister<_UIntType, __w, __n, __m, __r, __a, __u, __s,\n+\t\t     __b, __t, __c, __l>::output_b;\n+\n+  template<class _UIntType, int __w, int __n, int __m, int __r,\n+\t   _UIntType __a, int __u, int __s,\n+\t   _UIntType __b, int __t, _UIntType __c, int __l>\n+    const int\n+    mersenne_twister<_UIntType, __w, __n, __m, __r, __a, __u, __s,\n+\t\t     __b, __t, __c, __l>::output_t;\n+\n+  template<class _UIntType, int __w, int __n, int __m, int __r,\n+\t   _UIntType __a, int __u, int __s,\n+\t   _UIntType __b, int __t, _UIntType __c, int __l>\n+    const _UIntType\n+    mersenne_twister<_UIntType, __w, __n, __m, __r, __a, __u, __s,\n+\t\t     __b, __t, __c, __l>::output_c;\n+\n+  template<class _UIntType, int __w, int __n, int __m, int __r,\n+\t   _UIntType __a, int __u, int __s,\n+\t   _UIntType __b, int __t, _UIntType __c, int __l>\n+    const int\n+    mersenne_twister<_UIntType, __w, __n, __m, __r, __a, __u, __s,\n+\t\t     __b, __t, __c, __l>::output_l;\n+\n   template<class _UIntType, int __w, int __n, int __m, int __r,\n \t   _UIntType __a, int __u, int __s,\n \t   _UIntType __b, int __t, _UIntType __c, int __l>\n@@ -311,6 +401,18 @@ namespace tr1\n     }\n \n \n+  template<typename _IntType, _IntType __m, int __s, int __r>\n+    const _IntType\n+    subtract_with_carry<_IntType, __m, __s, __r>::modulus;\n+\n+  template<typename _IntType, _IntType __m, int __s, int __r>\n+    const int\n+    subtract_with_carry<_IntType, __m, __s, __r>::long_lag;\n+\n+  template<typename _IntType, _IntType __m, int __s, int __r>\n+    const int\n+    subtract_with_carry<_IntType, __m, __s, __r>::short_lag;\n+\n   template<typename _IntType, _IntType __m, int __s, int __r>\n     void\n     subtract_with_carry<_IntType, __m, __s, __r>::\n@@ -431,6 +533,18 @@ namespace tr1\n     }\n \n \n+  template<typename _RealType, int __w, int __s, int __r>\n+    const int\n+    subtract_with_carry_01<_RealType, __w, __s, __r>::word_size;\n+\n+  template<typename _RealType, int __w, int __s, int __r>\n+    const int\n+    subtract_with_carry_01<_RealType, __w, __s, __r>::long_lag;\n+\n+  template<typename _RealType, int __w, int __s, int __r>\n+    const int\n+    subtract_with_carry_01<_RealType, __w, __s, __r>::short_lag;\n+\n   template<typename _RealType, int __w, int __s, int __r>\n     void\n     subtract_with_carry_01<_RealType, __w, __s, __r>::\n@@ -576,6 +690,13 @@ namespace tr1\n       return __is;\n     }\n \n+  template<class _UniformRandomNumberGenerator, int __p, int __r>\n+    const int\n+    discard_block<_UniformRandomNumberGenerator, __p, __r>::block_size;\n+\n+  template<class _UniformRandomNumberGenerator, int __p, int __r>\n+    const int\n+    discard_block<_UniformRandomNumberGenerator, __p, __r>::used_block;\n \n   template<class _UniformRandomNumberGenerator, int __p, int __r>\n     typename discard_block<_UniformRandomNumberGenerator,\n@@ -639,6 +760,18 @@ namespace tr1\n     }\n \n \n+  template<class _UniformRandomNumberGenerator1, int __s1,\n+\t   class _UniformRandomNumberGenerator2, int __s2>\n+    const int\n+    xor_combine<_UniformRandomNumberGenerator1, __s1,\n+\t\t_UniformRandomNumberGenerator2, __s2>::shift1;\n+     \n+  template<class _UniformRandomNumberGenerator1, int __s1,\n+\t   class _UniformRandomNumberGenerator2, int __s2>\n+    const int\n+    xor_combine<_UniformRandomNumberGenerator1, __s1,\n+\t\t_UniformRandomNumberGenerator2, __s2>::shift2;\n+\n   template<class _UniformRandomNumberGenerator1, int __s1,\n \t   class _UniformRandomNumberGenerator2, int __s2>\n     void"}, {"sha": "af0c4b1e356c0d8523ac31af2ce4b9e9116f44a4", "filename": "libstdc++-v3/testsuite/26_numerics/random/linear_congruential_engine/requirements/constants.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Frequirements%2Fconstants.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Frequirements%2Fconstants.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Frequirements%2Fconstants.cc?ref=300ea2831b894fc143539fe0319f39062b6e4daf", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do link }\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-09-29  Paolo Carlini <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <random>\n+\n+void test01()\n+{\n+  std::minstd_rand0 lc;\n+\n+  const void* p = &lc.multiplier;\n+  p = &lc.increment;\n+  p = &lc.modulus;\n+  p = &lc.default_seed;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2abc5ab9b6475c1089cecd594e835a74e19ed781", "filename": "libstdc++-v3/testsuite/26_numerics/random/mersenne_twister_engine/requirements/constants.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Frequirements%2Fconstants.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Frequirements%2Fconstants.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Frequirements%2Fconstants.cc?ref=300ea2831b894fc143539fe0319f39062b6e4daf", "patch": "@@ -0,0 +1,50 @@\n+// { dg-do link }\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-09-29  Paolo Carlini <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <random>\n+\n+void test01()\n+{\n+  std::mt19937 mt;\n+\n+  const void* p = &mt.word_size;\n+  p = &mt.state_size;\n+  p = &mt.shift_size;\n+  p = &mt.mask_bits;\n+  p = &mt.xor_mask;\n+  p = &mt.tempering_u;\n+  p = &mt.tempering_d;\n+  p = &mt.tempering_s;\n+  p = &mt.tempering_b;\n+  p = &mt.tempering_t;\n+  p = &mt.tempering_c;\n+  p = &mt.tempering_l;\n+  p = &mt.initialization_multiplier;\n+  p = &mt.default_seed;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c1d5b3a2e450f88a7de3d03d29d5338e4cc242c0", "filename": "libstdc++-v3/testsuite/26_numerics/random/shuffle_order_engine/requirements/constants.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Frequirements%2Fconstants.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Frequirements%2Fconstants.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Frequirements%2Fconstants.cc?ref=300ea2831b894fc143539fe0319f39062b6e4daf", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do link }\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-09-29  Paolo Carlini <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <random>\n+\n+void test01()\n+{\n+  std::knuth_b so;\n+\n+  const void* p = &so.table_size;\n+  p = &so.table_size;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2ab13a30309ee9d9189e2bef0eecc363fb4148b5", "filename": "libstdc++-v3/testsuite/26_numerics/random/subtract_with_carry_engine/requirements/constants.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Frequirements%2Fconstants.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Frequirements%2Fconstants.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Frequirements%2Fconstants.cc?ref=300ea2831b894fc143539fe0319f39062b6e4daf", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do link }\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-09-29  Paolo Carlini <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <random>\n+\n+void test01()\n+{\n+  std::ranlux24_base swc;\n+\n+  const void* p = &swc.word_size;\n+  p = &swc.short_lag;\n+  p = &swc.long_lag;\n+  p = &swc.default_seed;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2c43732041c5f6a0112f58c337d788b0a0bb4886", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/discard_block/requirements/constants.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fdiscard_block%2Frequirements%2Fconstants.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fdiscard_block%2Frequirements%2Fconstants.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fdiscard_block%2Frequirements%2Fconstants.cc?ref=300ea2831b894fc143539fe0319f39062b6e4daf", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do link }\n+//\n+// 2009-09-29  Paolo Carlini <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tr1/random>\n+\n+void test01()\n+{\n+  std::tr1::ranlux3 db;\n+\n+  const void* p = &db.block_size;\n+  p = &db.used_block;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c38254f13d4d8b02828f01e89a2b55ecb00c0952", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/linear_congruential/requirements/constants.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Frequirements%2Fconstants.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Frequirements%2Fconstants.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Flinear_congruential%2Frequirements%2Fconstants.cc?ref=300ea2831b894fc143539fe0319f39062b6e4daf", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do link }\n+//\n+// 2009-09-29  Paolo Carlini <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tr1/random>\n+\n+void test01()\n+{\n+  std::tr1::minstd_rand0 lc;\n+\n+  const void* p = &lc.multiplier;\n+  p = &lc.increment;\n+  p = &lc.modulus;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9ebddd8c6d0d5e8fefde782a5ab8d7777521f98b", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/mersenne_twister/requirements/constants.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Frequirements%2Fconstants.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Frequirements%2Fconstants.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fmersenne_twister%2Frequirements%2Fconstants.cc?ref=300ea2831b894fc143539fe0319f39062b6e4daf", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do link }\n+//\n+// 2009-09-29  Paolo Carlini <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tr1/random>\n+\n+void test01()\n+{\n+  std::tr1::mt19937 mt;\n+\n+  const void* p = &mt.word_size;\n+  p = &mt.state_size;\n+  p = &mt.shift_size;\n+  p = &mt.mask_bits;\n+  p = &mt.parameter_a;\n+  p = &mt.output_u;\n+  p = &mt.output_s;\n+  p = &mt.output_b;\n+  p = &mt.output_t;\n+  p = &mt.output_c;\n+  p = &mt.output_l;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c68002d2766f4704514b11facbf4d5606bde043c", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry/requirements/constants.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Frequirements%2Fconstants.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Frequirements%2Fconstants.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry%2Frequirements%2Fconstants.cc?ref=300ea2831b894fc143539fe0319f39062b6e4daf", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do link }\n+//\n+// 2009-09-29  Paolo Carlini <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tr1/random>\n+\n+void test01()\n+{\n+  std::tr1::subtract_with_carry<unsigned long, (1UL << 24), 10, 24> swc;\n+\n+  const void* p = &swc.modulus;\n+  p = &swc.long_lag;\n+  p = &swc.short_lag;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c1715264d3ab4edf830c207c94bd8f4bf416d9b9", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/subtract_with_carry_01/requirements/constants.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Frequirements%2Fconstants.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Frequirements%2Fconstants.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fsubtract_with_carry_01%2Frequirements%2Fconstants.cc?ref=300ea2831b894fc143539fe0319f39062b6e4daf", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do link }\n+//\n+// 2009-09-29  Paolo Carlini <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tr1/random>\n+\n+void test01()\n+{\n+  std::tr1::ranlux_base_01 swc_01;\n+\n+  const void* p = &swc_01.word_size;\n+  p = &swc_01.long_lag;\n+  p = &swc_01.short_lag;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0318b0d5e18d7d843ab5d972adb8b8c8876fd496", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/xor_combine/requirements/constants.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Frequirements%2Fconstants.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300ea2831b894fc143539fe0319f39062b6e4daf/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Frequirements%2Fconstants.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Frequirements%2Fconstants.cc?ref=300ea2831b894fc143539fe0319f39062b6e4daf", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do link }\n+//\n+// 2009-09-29  Paolo Carlini <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tr1/random>\n+\n+void test01()\n+{\n+  std::tr1::xor_combine<std::tr1::minstd_rand, 1, std::tr1::mt19937, 2>\n+    xor_c;\n+\n+  const void* p = &xor_c.shift1;\n+  p = &xor_c.shift2;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}