{"sha": "7d9b63781d61a9cdab679a94f1cb1486f19bfbd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q5YjYzNzgxZDYxYTljZGFiNjc5YTk0ZjFjYjE0ODZmMTliZmJkNw==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2002-03-29T17:07:59Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2002-03-29T17:07:59Z"}, "message": "mmix.c (mmix_target_asm_function_prologue): Correct unwind information when frame_pointer_needed.\n\n\t* config/mmix/mmix.c (mmix_target_asm_function_prologue): Correct\n\tunwind information when frame_pointer_needed.\n\t(mmix_assemble_integer): Tweak wording in comment.\n\nFrom-SVN: r51562", "tree": {"sha": "3078c19fc4f15a106fd069e391433d67a360a8b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3078c19fc4f15a106fd069e391433d67a360a8b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d9b63781d61a9cdab679a94f1cb1486f19bfbd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9b63781d61a9cdab679a94f1cb1486f19bfbd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d9b63781d61a9cdab679a94f1cb1486f19bfbd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9b63781d61a9cdab679a94f1cb1486f19bfbd7/comments", "author": null, "committer": null, "parents": [{"sha": "1d5af8719fce9f8e99f0a5cf06abab3f5358c85e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d5af8719fce9f8e99f0a5cf06abab3f5358c85e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d5af8719fce9f8e99f0a5cf06abab3f5358c85e"}], "stats": {"total": 67, "additions": 42, "deletions": 25}, "files": [{"sha": "702a2d378fc229781f5c6bf3ee4e14e329eb6435", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9b63781d61a9cdab679a94f1cb1486f19bfbd7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9b63781d61a9cdab679a94f1cb1486f19bfbd7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d9b63781d61a9cdab679a94f1cb1486f19bfbd7", "patch": "@@ -1,3 +1,9 @@\n+2002-03-29  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* config/mmix/mmix.c (mmix_target_asm_function_prologue): Correct\n+\tunwind information when frame_pointer_needed.\n+\t(mmix_assemble_integer): Tweak wording in comment.\n+\n 2002-03-29  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* Makefile.in (except.o): Update."}, {"sha": "c59baf3f776b488dcfd131bc5de168559e1b5f3f", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 36, "deletions": 25, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9b63781d61a9cdab679a94f1cb1486f19bfbd7/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9b63781d61a9cdab679a94f1cb1486f19bfbd7/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=7d9b63781d61a9cdab679a94f1cb1486f19bfbd7", "patch": "@@ -734,8 +734,9 @@ mmix_target_asm_function_prologue (stream, locals_size)\n \t\t     setting; they don't accumulate.  We must keep track\n \t\t     of the offset ourselves.  */\n \t\t  cfa_offset += stack_chunk;\n-\t\t  dwarf2out_def_cfa (\"\", MMIX_STACK_POINTER_REGNUM,\n-\t\t\t\t     cfa_offset);\n+\t\t  if (!frame_pointer_needed)\n+\t\t    dwarf2out_def_cfa (\"\", MMIX_STACK_POINTER_REGNUM,\n+\t\t\t\t       cfa_offset);\n \t\t}\n \t      offset += stack_chunk;\n \t      stack_space_to_allocate -= stack_chunk;\n@@ -768,11 +769,7 @@ mmix_target_asm_function_prologue (stream, locals_size)\n \t\t   reg_names[MMIX_STACK_POINTER_REGNUM],\n \t\t   stack_chunk);\n \t  if (doing_dwarf)\n-\t    {\n-\t      cfa_offset += stack_chunk;\n-\t      dwarf2out_def_cfa (\"\", MMIX_STACK_POINTER_REGNUM,\n-\t\t\t\t cfa_offset);\n-\t    }\n+\t    cfa_offset += stack_chunk;\n \t  offset += stack_chunk;\n \t  stack_space_to_allocate -= stack_chunk;\n \t}\n@@ -785,8 +782,18 @@ mmix_target_asm_function_prologue (stream, locals_size)\n \t       reg_names[MMIX_STACK_POINTER_REGNUM],\n \t       offset + 8);\n       if (doing_dwarf)\n-\tdwarf2out_reg_save (\"\", MMIX_FRAME_POINTER_REGNUM,\n-\t\t\t    -cfa_offset + offset);\n+\t{\n+\t  /* If we're using the frame-pointer, then we just need this CFA\n+\t     definition basing on that value (often equal to the CFA).\n+\t     Further changes to the stack-pointer do not affect the\n+\t     frame-pointer, so we conditionalize them below on\n+\t     !frame_pointer_needed.  */\n+\t  dwarf2out_def_cfa (\"\", MMIX_FRAME_POINTER_REGNUM,\n+\t\t\t     -cfa_offset + offset + 8);\n+\n+\t  dwarf2out_reg_save (\"\", MMIX_FRAME_POINTER_REGNUM,\n+\t\t\t      -cfa_offset + offset);\n+\t}\n \n       offset -= 8;\n     }\n@@ -811,8 +818,9 @@ mmix_target_asm_function_prologue (stream, locals_size)\n \t  if (doing_dwarf)\n \t    {\n \t      cfa_offset += stack_chunk;\n-\t      dwarf2out_def_cfa (\"\", MMIX_STACK_POINTER_REGNUM,\n-\t\t\t\t cfa_offset);\n+\t      if (!frame_pointer_needed)\n+\t\tdwarf2out_def_cfa (\"\", MMIX_STACK_POINTER_REGNUM,\n+\t\t\t\t   cfa_offset);\n \t    }\n \t  offset += stack_chunk;\n \t  stack_space_to_allocate -= stack_chunk;\n@@ -850,7 +858,8 @@ mmix_target_asm_function_prologue (stream, locals_size)\n \t  if (doing_dwarf)\n \t    {\n \t      cfa_offset += stack_chunk;\n-\t      dwarf2out_def_cfa (\"\", MMIX_STACK_POINTER_REGNUM,\n+\t      if (!frame_pointer_needed)\n+\t\tdwarf2out_def_cfa (\"\", MMIX_STACK_POINTER_REGNUM,\n \t\t\t\t cfa_offset);\n \t    }\n \t}\n@@ -910,8 +919,9 @@ mmix_target_asm_function_prologue (stream, locals_size)\n \t\tif (doing_dwarf)\n \t\t  {\n \t\t    cfa_offset += stack_chunk;\n-\t\t    dwarf2out_def_cfa (\"\", MMIX_STACK_POINTER_REGNUM,\n-\t\t\t\t       cfa_offset);\n+\t\t    if (!frame_pointer_needed)\n+\t\t      dwarf2out_def_cfa (\"\", MMIX_STACK_POINTER_REGNUM,\n+\t\t\t\t\t cfa_offset);\n \t\t  }\n \t      }\n \t    else\n@@ -925,8 +935,9 @@ mmix_target_asm_function_prologue (stream, locals_size)\n \t\tif (doing_dwarf)\n \t\t  {\n \t\t    cfa_offset += stack_chunk;\n-\t\t    dwarf2out_def_cfa (\"\", MMIX_STACK_POINTER_REGNUM,\n-\t\t\t\t       cfa_offset);\n+\t\t    if (!frame_pointer_needed)\n+\t\t      dwarf2out_def_cfa (\"\", MMIX_STACK_POINTER_REGNUM,\n+\t\t\t\t\t cfa_offset);\n \t\t  }\n \t      }\n \n@@ -965,8 +976,9 @@ mmix_target_asm_function_prologue (stream, locals_size)\n       if (doing_dwarf)\n \t{\n \t  cfa_offset += stack_space_to_allocate;\n-\t  dwarf2out_def_cfa (\"\", MMIX_STACK_POINTER_REGNUM,\n-\t\t\t     cfa_offset);\n+\t  if (!frame_pointer_needed)\n+\t    dwarf2out_def_cfa (\"\", MMIX_STACK_POINTER_REGNUM,\n+\t\t\t       cfa_offset);\n \t}\n     }\n \n@@ -1913,13 +1925,12 @@ mmix_assemble_integer (x, size, aligned_p)\n       {\n \t/* We handle a limited number of types of operands in here.  But\n \t   that's ok, because we can punt to generic functions.  We then\n-\t   pretend that we don't emit aligned data is needed, so the usual\n-\t   .pseudo syntax is used (which work for aligned data too).  We\n-\t   actually *must* do that, since we say we don't have simple\n-\t   aligned pseudos, causing this function to be called.  We just\n-\t   try and keep as much compatibility as possible with mmixal\n-\t   syntax for normal cases (i.e. without GNU extensions and C\n-\t   only).  */\n+\t   pretend that aligned data isn't needed, so the usual .<pseudo>\n+\t   syntax is used (which works for aligned data too).  We actually\n+\t   *must* do that, since we say we don't have simple aligned\n+\t   pseudos, causing this function to be called.  We just try and\n+\t   keep as much compatibility as possible with mmixal syntax for\n+\t   normal cases (i.e. without GNU extensions and C only).  */\n       case 1:\n \tif (GET_CODE (x) != CONST_INT)\n \t  {"}]}