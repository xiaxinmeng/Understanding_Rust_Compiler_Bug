{"sha": "b621a4ddc72206d4cef5f2957237d1f488e4660e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYyMWE0ZGRjNzIyMDZkNGNlZjVmMjk1NzIzN2QxZjQ4OGU0NjYwZQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-10-24T20:10:53Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-10-24T20:10:53Z"}, "message": "c-common.h (struct c_common_identifier): Remove rid_code field.\n\n\t* c-common.h (struct c_common_identifier): Remove rid_code field.\n\t(C_RID_CODE): Use ->node.rid_code instead of ->rid_code.\n\n\t* c-typeck.c (constructor_designated): New local flag.\n\t(struct constructor_stack): Add \"designated\" field to match.\n\t(start_init): Clear it.\n\t(really_start_incremental_init, push_init_level): Push and\n\tclear it.\n\t(pop_init_level): Pop it.\n\t(set_designator): Set it.\n\n\t(pop_init_level): Suppress \"missing initializer\" warnings if\n\tconstructor_designated is true.\n\t(process_init_element): Suppress warning about union\n\tinitialization under traditional C, if constructor_designated\n\tis true.\n\n\t* intl/loadmsgcat.c (INTTYPE_SIGNED, INTTYPE_MINIMUM,\n\tINTTYPE_MAXIMUM): Clone from system.h.\n\t(_nl_load_domain): Use them when testing for overflow of size_t.\n\tCast result of sizeof to off_t to compare to st_size value.\n\tMove side effects out of conditional for comprehensibility.\n\n\t* testsuite/gcc.dg/20011021-1.c: New test.\n\nFrom-SVN: r46472", "tree": {"sha": "c0538b67d74f1cd1505eb648f2f17be9f0ccc09c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0538b67d74f1cd1505eb648f2f17be9f0ccc09c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b621a4ddc72206d4cef5f2957237d1f488e4660e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b621a4ddc72206d4cef5f2957237d1f488e4660e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b621a4ddc72206d4cef5f2957237d1f488e4660e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b621a4ddc72206d4cef5f2957237d1f488e4660e/comments", "author": null, "committer": null, "parents": [{"sha": "724035826b67d8c72b865893451555100f3d4af4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/724035826b67d8c72b865893451555100f3d4af4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/724035826b67d8c72b865893451555100f3d4af4"}], "stats": {"total": 136, "additions": 120, "deletions": 16}, "files": [{"sha": "773395322b89e4578a437df471f1a0b7450b0fa4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b621a4ddc72206d4cef5f2957237d1f488e4660e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b621a4ddc72206d4cef5f2957237d1f488e4660e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b621a4ddc72206d4cef5f2957237d1f488e4660e", "patch": "@@ -1,3 +1,22 @@\n+2001-10-24  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* c-common.h (struct c_common_identifier): Remove rid_code field.\n+\t(C_RID_CODE): Use ->node.rid_code instead of ->rid_code.\n+\n+\t* c-typeck.c (constructor_designated): New local flag.\n+\t(struct constructor_stack): Add \"designated\" field to match.\n+\t(start_init): Clear it.\n+\t(really_start_incremental_init, push_init_level): Push and\n+\tclear it.\n+\t(pop_init_level): Pop it.\n+\t(set_designator): Set it.\n+\n+\t(pop_init_level): Suppress \"missing initializer\" warnings if\n+\tconstructor_designated is true.\n+\t(process_init_element): Suppress warning about union\n+\tinitialization under traditional C, if constructor_designated\n+\tis true.\n+\n Wed Oct 24 15:35:38 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* integrate.c (copy_rtx_and_substitute, case CALL): Fix error in last\n@@ -10,7 +29,7 @@ Wed Oct 24 13:26:12 2001  Jeffrey A Law  (law@cygnus.com)\n 2001-10-24  Dan Nicolaescu  <dann@ics.uci.edu>\n \n \t* ssa-ccp.c (ssa_ccp_substitute_constants): Don't do anything if\n-\tthe node was already a set to a constant. \n+\tthe node was already a set to a constant.\n \n Wed Oct 24 12:41:19 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n@@ -1811,8 +1830,8 @@ Wed Oct  3 12:22:11 EDT 2001  John Wehle  (john@feith.com)\n \t* cppmain.c: Update comments.\n \n Tue Oct  2 12:46:01 CEST 2001  Bo Thorsen     <bo@suse.co.uk>,\n-\t\t\t       Andreas Jaeger <aj@suse.de>,\n-\t\t\t       Jan Hubicka    <jh@suse.cz>\n+\t\t\t\tAndreas Jaeger <aj@suse.de>,\n+\t\t\t\tJan Hubicka    <jh@suse.cz>\n \n \t* doc/invoke.texi (i386 Options): Document x86-64 options.\n \t(i386 and x86-64 Options): Rename i386 options section.\n@@ -8410,7 +8429,7 @@ Sun Jul 29 18:59:13 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t(try_optimize_cfg): Update call of try_forward_edges.\n \n Sun Jul 29 18:59:56 CEST 2001  Roman Zippel  <zippel@linux-m68k.org>\n-\t\t\t       Jan Hubicka  <jh@suse.cz>\n+\t\t\t\tJan Hubicka  <jh@suse.cz>\n \n \t* (validate_replace_rtx_1): Fix simplification of MINUS.\n \n@@ -9145,7 +9164,7 @@ Sun Jul 22 21:31:04 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \tinsns to delete in the presence of cc0 in a jump insn.\n \n Fri Jul 20 22:14:49 CEST 2001  Roman Zippel  <zippel@linux-m68k.org>\n-\t\t\t       Jan Hubicka  <jh@suse.cz>\n+\t\t\t\tJan Hubicka  <jh@suse.cz>\n \n \t* m68k.md (zero_extend?i?i2 expander): Use gen_lowpart instead\n \tof doing the change by hand.\n@@ -9428,7 +9447,7 @@ Wed Jul 18 20:47:36 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t* aclocal.m4 (AM_ICONV): New macro from Bruno Haible.\n \n Wed Jul 18 18:46:30 CEST 2001  Richard Henderson <rth@cygnus.com>\n-\t\t\t       Jan Hubicka  <jh@suse.cz>\n+\t\t\t\tJan Hubicka  <jh@suse.cz>\n \n \t* flow.c (redirect_edge_and_branch): Bail out on complex edges.\n \t(try_optimize_cfg): Do not remove tail recursive labels before sibcall.\n@@ -9485,9 +9504,9 @@ Wed Jul 18 12:05:29 2001  Nicola Pero  <n.pero@mi.flashnet.it>\n \n 2001-07-17  Andreas Schwab  <schwab@suse.de>\n \n-       * configure.in  (assembler eh_frame optimization): Handle big\n-       endian.\n-       * configure: Regenerated.\n+\t* configure.in  (assembler eh_frame optimization): Handle big\n+\tendian.\n+\t* configure: Regenerated.\n \n Tue Jul 17 23:43:31 CEST 2001  Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "d8bb629d4bb7f812a33613852e1b6ded168bdf33", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b621a4ddc72206d4cef5f2957237d1f488e4660e/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b621a4ddc72206d4cef5f2957237d1f488e4660e/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=b621a4ddc72206d4cef5f2957237d1f488e4660e", "patch": "@@ -177,15 +177,14 @@ enum c_tree_index\n     CTI_MAX\n };\n \n-#define C_RID_CODE(id)\t(((struct c_common_identifier *) (id))->rid_code)\n+#define C_RID_CODE(id)\t(((struct c_common_identifier *) (id))->node.rid_code)\n \n /* Identifier part common to the C front ends.  Inherits from\n    tree_identifier, despite appearances.  */\n struct c_common_identifier\n {\n   struct tree_common common;\n   struct cpp_hashnode node;\n-  ENUM_BITFIELD(rid) rid_code: CHAR_BIT;\n };\n \n #define wchar_type_node\t\t\tc_global_trees[CTI_WCHAR_TYPE]"}, {"sha": "aa7e89f7f2a14c343bba86d88cad07f72cf47966", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b621a4ddc72206d4cef5f2957237d1f488e4660e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b621a4ddc72206d4cef5f2957237d1f488e4660e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=b621a4ddc72206d4cef5f2957237d1f488e4660e", "patch": "@@ -4943,6 +4943,9 @@ static const char *constructor_asmspec;\n /* Nonzero if this is an initializer for a top-level decl.  */\n static int constructor_top_level;\n \n+/* Nonzero if there were any member designators in this initializer.  */\n+static int constructor_designated;\n+\n /* Nesting depth of designator list.  */\n static int designator_depth;\n \n@@ -4980,6 +4983,7 @@ struct constructor_stack\n   char erroneous;\n   char outer;\n   char incremental;\n+  char designated;\n };\n \n struct constructor_stack *constructor_stack;\n@@ -5056,6 +5060,7 @@ start_init (decl, asmspec_tree, top_level)\n   constructor_decl = decl;\n   constructor_asmspec = asmspec;\n   constructor_subconstants_deferred = 0;\n+  constructor_designated = 0;\n   constructor_top_level = top_level;\n \n   if (decl != 0)\n@@ -5165,6 +5170,7 @@ really_start_incremental_init (type)\n   p->range_stack = 0;\n   p->outer = 0;\n   p->incremental = constructor_incremental;\n+  p->designated = constructor_designated;\n   p->next = 0;\n   constructor_stack = p;\n \n@@ -5175,6 +5181,7 @@ really_start_incremental_init (type)\n   constructor_pending_elts = 0;\n   constructor_type = type;\n   constructor_incremental = 1;\n+  constructor_designated = 0;\n   designator_depth = 0;\n   designator_errorneous = 0;\n \n@@ -5276,6 +5283,7 @@ push_init_level (implicit)\n   p->implicit = implicit;\n   p->outer = 0;\n   p->incremental = constructor_incremental;\n+  p->designated = constructor_designated;\n   p->next = constructor_stack;\n   p->range_stack = 0;\n   constructor_stack = p;\n@@ -5285,6 +5293,7 @@ push_init_level (implicit)\n   constructor_depth = SPELLING_DEPTH ();\n   constructor_elements = 0;\n   constructor_incremental = 1;\n+  constructor_designated = 0;\n   constructor_pending_elts = 0;\n   if (!implicit)\n     {\n@@ -5465,7 +5474,9 @@ pop_init_level (implicit)\n \t\t   || integer_zerop (DECL_SIZE (constructor_unfilled_fields))))\n \t  constructor_unfilled_fields = TREE_CHAIN (constructor_unfilled_fields);\n \n-\tif (constructor_unfilled_fields)\n+\t/* Do not warn if this level of the initializer uses member\n+\t   designators; it is likely to be deliberate.  */\n+\tif (constructor_unfilled_fields && !constructor_designated)\n \t  {\n \t    push_member_name (constructor_unfilled_fields);\n \t    warning_init (\"missing initializer\");\n@@ -5531,6 +5542,7 @@ pop_init_level (implicit)\n   constructor_simple = p->simple;\n   constructor_erroneous = p->erroneous;\n   constructor_incremental = p->incremental;\n+  constructor_designated = p->designated;\n   constructor_pending_elts = p->pending_elts;\n   constructor_depth = p->depth;\n   if (!p->implicit)\n@@ -5577,6 +5589,7 @@ set_designator (array)\n \t braces.  */\n       while (constructor_stack->implicit)\n \tprocess_init_element (pop_init_level (1));\n+      constructor_designated = 1;\n       return 0;\n     }\n \n@@ -5612,6 +5625,7 @@ set_designator (array)\n       return 1;\n     }\n \n+  constructor_designated = 1;\n   push_init_level (2);\n   return 0;\n }\n@@ -6589,8 +6603,12 @@ process_init_element (value)\n \t     under the assumption that the zero initializer in user\n \t     code appears conditioned on e.g. __STDC__ to avoid\n \t     \"missing initializer\" warnings and relies on default\n-\t     initialization to zero in the traditional C case.  */\n-\t  if (warn_traditional && !in_system_header\n+\t     initialization to zero in the traditional C case.\n+\t     We also skip the warning if the initializer is designated,\n+\t     again on the assumption that this must be conditional on\n+\t     __STDC__ anyway (and we've already complained about the\n+\t     member-designator already).  */\n+\t  if (warn_traditional && !in_system_header && !constructor_designated\n \t      && !(value && (integer_zerop (value) || real_zerop (value))))\n \t    warning (\"traditional C rejects initialization of unions\");\n "}, {"sha": "a677ba5e467a3f47bf124842e2e9966345f32598", "filename": "gcc/intl/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b621a4ddc72206d4cef5f2957237d1f488e4660e/gcc%2Fintl%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b621a4ddc72206d4cef5f2957237d1f488e4660e/gcc%2Fintl%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintl%2FChangeLog?ref=b621a4ddc72206d4cef5f2957237d1f488e4660e", "patch": "@@ -1,3 +1,11 @@\n+2001-10-24  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* loadmsgcat.c (INTTYPE_SIGNED, INTTYPE_MINIMUM,\n+\tINTTYPE_MAXIMUM): Clone from system.h.\n+\t(_nl_load_domain): Use them when testing for overflow of size_t.\n+\tCast result of sizeof to off_t to compare to st_size value.\n+\tMove side effects out of conditional for comprehensibility.\n+\n 2001-10-21  Zack Weinberg  <zack@codesourcery.com>\n \n \t* dcigettext.c: Don't use #elif."}, {"sha": "7055e52fadc9c3811800bce078ab7bd98fbb656e", "filename": "gcc/intl/loadmsgcat.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b621a4ddc72206d4cef5f2957237d1f488e4660e/gcc%2Fintl%2Floadmsgcat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b621a4ddc72206d4cef5f2957237d1f488e4660e/gcc%2Fintl%2Floadmsgcat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintl%2Floadmsgcat.c?ref=b621a4ddc72206d4cef5f2957237d1f488e4660e", "patch": "@@ -78,6 +78,15 @@ char *alloca ();\n # include \"../locale/localeinfo.h\"\n #endif\n \n+/* GCC LOCAL: These macros are used below.  */\n+/* The extra casts work around common compiler bugs.  */\n+#define INTTYPE_SIGNED(t) (! ((t) 0 < (t) -1))\n+/* The outer cast is needed to work around a bug in Cray C 5.0.3.0.\n+   It is necessary at least when t == time_t.  */\n+#define INTTYPE_MINIMUM(t) ((t) (INTTYPE_SIGNED (t) \\\n+                             ? ~ (t) 0 << (sizeof(t) * CHAR_BIT - 1) : (t) 0))\n+#define INTTYPE_MAXIMUM(t) ((t) (~ (t) 0 - INTTYPE_MINIMUM (t)))\n+\n /* @@ end of prolog @@ */\n \n #ifdef _LIBC\n@@ -373,19 +382,23 @@ _nl_load_domain (domain_file, domainbinding)\n     return;\n \n   /* We must know about the size of the file.  */\n+  /* GCC_LOCAL: Use INTTYPE_MAXIMUM for overflow check, cast sizeof to\n+     off_t, move set of size below if.  */\n   if (\n #ifdef _LIBC\n       __builtin_expect (fstat64 (fd, &st) != 0, 0)\n #else\n       __builtin_expect (fstat (fd, &st) != 0, 0)\n #endif\n-      || __builtin_expect ((size = (size_t) st.st_size) != st.st_size, 0)\n-      || __builtin_expect (size < sizeof (struct mo_file_header), 0))\n+      || __builtin_expect (st.st_size > INTTYPE_MAXIMUM (ssize_t), 0)\n+      || __builtin_expect (st.st_size < (off_t) sizeof (struct mo_file_header),\n+\t\t\t   0))\n     {\n       /* Something went wrong.  */\n       close (fd);\n       return;\n     }\n+  size = (size_t) st.st_size;\n \n #ifdef HAVE_MMAP\n   /* Now we are ready to load the file.  If mmap() is available we try"}, {"sha": "a4701cfd900b65f86854d96c5945e33e6beaa219", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b621a4ddc72206d4cef5f2957237d1f488e4660e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b621a4ddc72206d4cef5f2957237d1f488e4660e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b621a4ddc72206d4cef5f2957237d1f488e4660e", "patch": "@@ -1,3 +1,7 @@\n+2001-10-24  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* gcc.dg/20011021-1.c: New test.\n+\n 2001-10-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c-torture/compile/20011023-1.c: New test."}, {"sha": "821db47c2eda23dd1541370a11be93c0fcdd2ecf", "filename": "gcc/testsuite/gcc.dg/20011021-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b621a4ddc72206d4cef5f2957237d1f488e4660e/gcc%2Ftestsuite%2Fgcc.dg%2F20011021-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b621a4ddc72206d4cef5f2957237d1f488e4660e/gcc%2Ftestsuite%2Fgcc.dg%2F20011021-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20011021-1.c?ref=b621a4ddc72206d4cef5f2957237d1f488e4660e", "patch": "@@ -0,0 +1,43 @@\n+/* Test for various initializer warnings being suppressed by use of\n+   designated initializers.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -W -Wall -Wtraditional\" } */\n+\n+\n+struct t\n+{\n+  int a;\n+  int b;\n+  int c;\n+};\n+\n+union u\n+{\n+  int n;\n+  float i;\n+};\n+\n+struct multilevel\n+{\n+   int x;\n+   struct t t;\n+   union u u;\n+   union u v;\n+   char *f;\n+};\n+\n+struct t T0 = { 1 };\t\t/* { dg-warning \"(missing|near) init\" } */\n+struct t T1 = { .a = 1 };\t/* { dg-bogus \"(missing|near) init\" } */\n+\n+union u U0 = { 1 };\t\t/* { dg-warning \"initialization of union\" } */\n+union u U1 = { .i = 1 };\t/* { dg-bogus \"initialization of union\" } */\n+\n+struct multilevel M =\n+{\n+  12,\n+  { .b = 3 },\t\t\t/* { dg-bogus \"(missing|near) init\" } */\n+  { 4 },\t\t\t/* { dg-warning \"initialization of union\" } */\n+  { .n = 9 },\t\t\t/* { dg-bogus \"initialization of union\" } */\n+  /* \"string here\" */\n+};\t\t\t\t/* { dg-warning \"(missing|near) init\" } */"}]}