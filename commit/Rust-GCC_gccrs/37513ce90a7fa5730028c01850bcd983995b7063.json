{"sha": "37513ce90a7fa5730028c01850bcd983995b7063", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc1MTNjZTkwYTdmYTU3MzAwMjhjMDE4NTBiY2Q5ODM5OTViNzA2Mw==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-08-18T14:23:35Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-08-18T14:23:35Z"}, "message": "re PR fortran/40870 ([F03] include formal args in backend_decl of PPCs)\n\n2009-08-18  Janus Weil  <janus@gcc.gnu.org>\n\t    Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/40870\n\t* trans-types.c (gfc_get_ppc_type): Include formal args in backend_decl\n\tusing the interface symbol. Character types are returned by reference.\n\t(gfc_get_derived_type): Prevent infinite recursion loop\n\tif a PPC has a derived-type formal arg.\n\n2009-08-18  Janus Weil  <janus@gcc.gnu.org>\n\t    Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/40870\n\t* gfortran.dg/proc_ptr_comp_13.f90: Extended.\n\n\nCo-Authored-By: Paul Thomas <pault@gcc.gnu.org>\n\nFrom-SVN: r150875", "tree": {"sha": "5f299580b33dab7565509be79483281c6771ddd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f299580b33dab7565509be79483281c6771ddd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37513ce90a7fa5730028c01850bcd983995b7063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37513ce90a7fa5730028c01850bcd983995b7063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37513ce90a7fa5730028c01850bcd983995b7063", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37513ce90a7fa5730028c01850bcd983995b7063/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "776e7174167360fdf2ba990e7c7c22536fe9227a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/776e7174167360fdf2ba990e7c7c22536fe9227a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/776e7174167360fdf2ba990e7c7c22536fe9227a"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "d78732609330797f50770146e4c79af1681d589f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37513ce90a7fa5730028c01850bcd983995b7063/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37513ce90a7fa5730028c01850bcd983995b7063/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=37513ce90a7fa5730028c01850bcd983995b7063", "patch": "@@ -1,3 +1,12 @@\n+2009-08-18  Janus Weil  <janus@gcc.gnu.org>\n+\t    Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/40870\n+\t* trans-types.c (gfc_get_ppc_type): Include formal args in backend_decl\n+\tusing the interface symbol. Character types are returned by reference.\n+\t(gfc_get_derived_type): Prevent infinite recursion loop\n+\tif a PPC has a derived-type formal arg.\n+\n 2008-08-17  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/41062"}, {"sha": "90e82d488d728c86a8e9afc48d771ff70a05d587", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37513ce90a7fa5730028c01850bcd983995b7063/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37513ce90a7fa5730028c01850bcd983995b7063/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=37513ce90a7fa5730028c01850bcd983995b7063", "patch": "@@ -1895,16 +1895,17 @@ tree\n gfc_get_ppc_type (gfc_component* c)\n {\n   tree t;\n-  if (c->attr.function && !c->attr.dimension)\n-    {\n-      if (c->ts.type == BT_DERIVED)\n-\tt = c->ts.u.derived->backend_decl;\n-      else\n-\tt = gfc_typenode_for_spec (&c->ts);\n-    }\n+\n+  /* Explicit interface.  */\n+  if (c->attr.if_source != IFSRC_UNKNOWN && c->ts.interface)\n+    return build_pointer_type (gfc_get_function_type (c->ts.interface));\n+\n+  /* Implicit interface (only return value may be known).  */\n+  if (c->attr.function && !c->attr.dimension && c->ts.type != BT_CHARACTER)\n+    t = gfc_typenode_for_spec (&c->ts);\n   else\n     t = void_type_node;\n-  /* TODO: Build argument list.  */\n+\n   return build_pointer_type (build_function_type (t, NULL_TREE));\n }\n \n@@ -2012,8 +2013,11 @@ gfc_get_derived_type (gfc_symbol * derived)\n      components' backend_decl may have not been built.  */\n   if (derived->backend_decl)\n     {\n-      /* Its components' backend_decl have been built.  */\n-      if (TYPE_FIELDS (derived->backend_decl))\n+      /* Its components' backend_decl have been built or we are\n+\t seeing recursion through the formal arglist of a procedure\n+\t pointer component.  */\n+      if (TYPE_FIELDS (derived->backend_decl)\n+\t    || derived->attr.proc_pointer_comp)\n         return derived->backend_decl;\n       else\n         typenode = derived->backend_decl;"}, {"sha": "c0d49236d950165729af273408b9baa092d55b17", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37513ce90a7fa5730028c01850bcd983995b7063/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37513ce90a7fa5730028c01850bcd983995b7063/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=37513ce90a7fa5730028c01850bcd983995b7063", "patch": "@@ -1,3 +1,9 @@\n+2009-08-18  Janus Weil  <janus@gcc.gnu.org>\n+\t    Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/40870\n+\t* gfortran.dg/proc_ptr_comp_13.f90: Extended.\n+\n 2009-08-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/41094"}, {"sha": "afc8f55b5d3b66da413c6923ed4b1842ada8d333", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_comp_13.f90", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37513ce90a7fa5730028c01850bcd983995b7063/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37513ce90a7fa5730028c01850bcd983995b7063/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_13.f90?ref=37513ce90a7fa5730028c01850bcd983995b7063", "patch": "@@ -1,6 +1,7 @@\n ! { dg-do run }\n !\n-! PR 40882: [F03] infinite recursion in gfc_get_derived_type with PPC returning derived type\n+! PR 40882: [F03] infinite recursion in gfc_get_derived_type with PPC returning derived type.\n+! At the same time, check that a formal argument does not cause infinite recursion (PR 40870).\n !\n ! Contributed by Janus Weil <janus@gcc.gnu.org>\n \n@@ -9,14 +10,15 @@\n type :: t\n   integer :: data\n   procedure(foo), pointer, nopass :: ppc\n+  procedure(type(t)), pointer, nopass :: ppc2\n end type\n \n type(t) :: o,o2\n \n o%data = 1\n o%ppc => foo\n \n-o2 = o%ppc()\n+o2 = o%ppc(o)\n \n if (o%data /= 1) call abort()\n if (o2%data /= 5) call abort()\n@@ -25,9 +27,9 @@\n \n contains\n \n-  function foo()\n-    type(t) :: foo\n-    foo%data = 5\n+  function foo(arg)\n+    type(t) :: foo, arg\n+    foo%data = arg%data * 5\n     foo%ppc => NULL()\n   end function\n "}]}