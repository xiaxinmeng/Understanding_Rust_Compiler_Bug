{"sha": "994ae26cb557ee48ab34a1b88b2c9cf036b3c276", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk0YWUyNmNiNTU3ZWU0OGFiMzRhMWI4OGIyYzljZjAzNmIzYzI3Ng==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2010-01-09T14:41:51Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2010-01-09T14:41:51Z"}, "message": "re PR rtl-optimization/42631 (\"-fcompare-debug failure\" with \"-O1 -funroll-loops\")\n\ngcc/ChangeLog:\nPR debug/42631\n* web.c (union_defs): Add used argument, to combine uses of\nuninitialized regs.\n(entry_register): Adjust type and tests of used argument.\n(web_main): Widen used for new use.  Pass it to union_defs.\n* df.h (union_defs): Adjust prototype.\ngcc/testsuite/ChangeLog:\nPR debug/42631\n* gcc.dg/pr42631.c: New.\n\nFrom-SVN: r155765", "tree": {"sha": "ed5ab688eeb1a68f38482e716ff1ef905d7d4d17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed5ab688eeb1a68f38482e716ff1ef905d7d4d17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/994ae26cb557ee48ab34a1b88b2c9cf036b3c276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/994ae26cb557ee48ab34a1b88b2c9cf036b3c276", "html_url": "https://github.com/Rust-GCC/gccrs/commit/994ae26cb557ee48ab34a1b88b2c9cf036b3c276", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/994ae26cb557ee48ab34a1b88b2c9cf036b3c276/comments", "author": null, "committer": null, "parents": [{"sha": "60c48e4c8d74d72e45418c5c6348c91f5c6aeafa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c48e4c8d74d72e45418c5c6348c91f5c6aeafa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60c48e4c8d74d72e45418c5c6348c91f5c6aeafa"}], "stats": {"total": 107, "additions": 77, "deletions": 30}, "files": [{"sha": "ea2df0afd27fe68cbf9f8ccaedc3047f9bb2c78b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994ae26cb557ee48ab34a1b88b2c9cf036b3c276/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994ae26cb557ee48ab34a1b88b2c9cf036b3c276/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=994ae26cb557ee48ab34a1b88b2c9cf036b3c276", "patch": "@@ -1,3 +1,12 @@\n+2010-01-09  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR debug/42631\n+\t* web.c (union_defs): Add used argument, to combine uses of\n+\tuninitialized regs.\n+\t(entry_register): Adjust type and tests of used argument.\n+\t(web_main): Widen used for new use.  Pass it to union_defs.\n+\t* df.h (union_defs): Adjust prototype.\n+\n 2010-01-09  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/42630"}, {"sha": "e1421d17281a53f4978807c19c35214c33a41f0e", "filename": "gcc/df.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994ae26cb557ee48ab34a1b88b2c9cf036b3c276/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994ae26cb557ee48ab34a1b88b2c9cf036b3c276/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=994ae26cb557ee48ab34a1b88b2c9cf036b3c276", "patch": "@@ -1115,8 +1115,8 @@ struct web_entry\n \n extern struct web_entry *unionfind_root (struct web_entry *);\n extern bool unionfind_union (struct web_entry *, struct web_entry *);\n-extern void union_defs (df_ref,\n-                        struct web_entry *, struct web_entry *,\n+extern void union_defs (df_ref, struct web_entry *,\n+\t\t\tunsigned int *used, struct web_entry *,\n \t\t\tbool (*fun) (struct web_entry *, struct web_entry *));\n \n #endif /* GCC_DF_H */"}, {"sha": "0b2c3a56a34db8b7c90f1a21a869350b28494c74", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994ae26cb557ee48ab34a1b88b2c9cf036b3c276/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994ae26cb557ee48ab34a1b88b2c9cf036b3c276/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=994ae26cb557ee48ab34a1b88b2c9cf036b3c276", "patch": "@@ -1,3 +1,8 @@\n+2010-01-09  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR debug/42631\n+\t* gcc.dg/pr42631.c: New.\n+\n 2010-01-09  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/42630"}, {"sha": "f5ac5a53a107db8653d56045b589064aa1d0e071", "filename": "gcc/testsuite/gcc.dg/pr42631.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994ae26cb557ee48ab34a1b88b2c9cf036b3c276/gcc%2Ftestsuite%2Fgcc.dg%2Fpr42631.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994ae26cb557ee48ab34a1b88b2c9cf036b3c276/gcc%2Ftestsuite%2Fgcc.dg%2Fpr42631.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr42631.c?ref=994ae26cb557ee48ab34a1b88b2c9cf036b3c276", "patch": "@@ -0,0 +1,23 @@\n+/* The function below expands to a loop whose latch block starts with\n+   a PHI node and the corresponding debug stmt.  In RTL, there are no\n+   PHI nodes, but the debug insn that references the incoming k\n+   remains, even though one of the incoming edges has it\n+   uninitialized.  After unrolling, however, the debug insn becomes\n+   unconditional, and this exposed a problem in the webizer.  Because\n+   DF doesn't combine the uses of an uninitialized pseudo into a\n+   single UD chain, we created a separate web for each use.\n+   Allocating separate registers or stack slots for each uninitialized\n+   use is wasteful, but the problem became more apparent in\n+   -fcompare-debug tests: register numbers went out of sync, and could\n+   have caused codegen differences depending on whether or not the\n+   debug insns were present.  The fix was to arrange for web to\n+   combine uninitialized uses into a single web.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-g -O1 -funroll-loops -fcompare-debug\" } */\n+\n+void foo()\n+{\n+  unsigned k;\n+  while (--k > 0);\n+}"}, {"sha": "d562807ec6061f0c2bc28aa6dc6a4a0be243775f", "filename": "gcc/web.c", "status": "modified", "additions": 38, "deletions": 28, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994ae26cb557ee48ab34a1b88b2c9cf036b3c276/gcc%2Fweb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994ae26cb557ee48ab34a1b88b2c9cf036b3c276/gcc%2Fweb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fweb.c?ref=994ae26cb557ee48ab34a1b88b2c9cf036b3c276", "patch": "@@ -28,14 +28,6 @@ along with GCC; see the file COPYING3.  If not see\n    is almost unusable.\n \n    TODO\n-    - Add code to keep debugging up-to-date after splitting user variable\n-      pseudos.  This can be done by keeping track of all the pseudos used\n-      for the variable and using life analysis information before reload\n-      to determine which one is live and, in case more than one are live,\n-      choose the one with the latest definition.\n-\n-      Other optimization passes can benefit from the infrastructure too.\n-\n     - We may use profile information and ignore infrequent use for the\n       purpose of web unifying, inserting the compensation code later to\n       implement full induction variable expansion for loops (currently\n@@ -60,9 +52,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n \n \n-static rtx entry_register (struct web_entry *, df_ref, char *);\n-static void replace_ref (df_ref, rtx);\n-\n /* Find the root of unionfind tree (the representative of set).  */\n \n struct web_entry *\n@@ -98,11 +87,16 @@ unionfind_union (struct web_entry *first, struct web_entry *second)\n \n /* For each use, all possible defs reaching it must come in the same\n    register, union them.\n-   FUN is the function that does the union.  */\n+   FUN is the function that does the union.\n+\n+   In USED, we keep the DF_REF_ID of the first uninitialized uses of a\n+   register, so that all uninitialized uses of the register can be\n+   combined into a single web.  We actually offset it by 2, because\n+   the values 0 and 1 are reserved for use by entry_register.  */\n \n void\n union_defs (df_ref use, struct web_entry *def_entry,\n- \t    struct web_entry *use_entry,\n+\t    unsigned int *used, struct web_entry *use_entry,\n  \t    bool (*fun) (struct web_entry *, struct web_entry *))\n {\n   struct df_insn_info *insn_info = DF_REF_INSN_INFO (use);\n@@ -169,6 +163,25 @@ union_defs (df_ref use, struct web_entry *def_entry,\n \t    def_link++;\n \t  }\n     }\n+\n+  /* UD chains of uninitialized REGs are empty.  Keeping all uses of\n+     the same uninitialized REG in a single web is not necessary for\n+     correctness, since the uses are undefined, but it's wasteful to\n+     allocate one register or slot for each reference.  Furthermore,\n+     creating new pseudos for uninitialized references in debug insns\n+     (see PR 42631) causes -fcompare-debug failures.  We record the\n+     number of the first uninitialized reference we found, and merge\n+     with it any other uninitialized references to the same\n+     register.  */\n+  if (!link)\n+    {\n+      int regno = REGNO (DF_REF_REAL_REG (use));\n+      if (used[regno])\n+\t(*fun) (use_entry + DF_REF_ID (use), use_entry + used[regno] - 2);\n+      else\n+\tused[regno] = DF_REF_ID (use) + 2;\n+    }\n+\n   while (link)\n     {\n       (*fun) (use_entry + DF_REF_ID (use),\n@@ -201,7 +214,7 @@ union_defs (df_ref use, struct web_entry *def_entry,\n /* Find the corresponding register for the given entry.  */\n \n static rtx\n-entry_register (struct web_entry *entry, df_ref ref, char *used)\n+entry_register (struct web_entry *entry, df_ref ref, unsigned int *used)\n {\n   struct web_entry *root;\n   rtx reg, newreg;\n@@ -214,17 +227,14 @@ entry_register (struct web_entry *entry, df_ref ref, char *used)\n   /* We are seeing this web for the first time, do the assignment.  */\n   reg = DF_REF_REAL_REG (ref);\n \n-  /* In case the original register is already assigned, generate new one.  */\n-  if (!used[REGNO (reg)])\n+  /* In case the original register is already assigned, generate new\n+     one.  Since we use USED to merge uninitialized refs into a single\n+     web, we might found an element to be nonzero without our having\n+     used it.  Test for 1, because union_defs saves it for our use,\n+     and there won't be any use for the other values when we get to\n+     this point.  */\n+  if (used[REGNO (reg)] != 1)\n     newreg = reg, used[REGNO (reg)] = 1;\n-  else if (REG_USERVAR_P (reg) && 0/*&& !flag_messy_debugging*/)\n-    {\n-      newreg = reg;\n-      if (dump_file)\n-\tfprintf (dump_file,\n-\t\t \"New web forced to keep reg=%i (user variable)\\n\",\n-\t\t REGNO (reg));\n-    }\n   else\n     {\n       newreg = gen_reg_rtx (GET_MODE (reg));\n@@ -273,7 +283,7 @@ web_main (void)\n   struct web_entry *def_entry;\n   struct web_entry *use_entry;\n   unsigned int max = max_reg_num ();\n-  char *used;\n+  unsigned int *used;\n   basic_block bb;\n   unsigned int uses_num = 0;\n   rtx insn;\n@@ -308,7 +318,7 @@ web_main (void)\n \n   /* Record the number of uses and defs at the beginning of the optimization.  */\n   def_entry = XCNEWVEC (struct web_entry, DF_DEFS_TABLE_SIZE());\n-  used = XCNEWVEC (char, max);\n+  used = XCNEWVEC (unsigned, max);\n   use_entry = XCNEWVEC (struct web_entry, uses_num);\n \n   /* Produce the web.  */\n@@ -323,13 +333,13 @@ web_main (void)\n \t    {\n \t      df_ref use = *use_rec;\n \t      if (DF_REF_REGNO (use) >= FIRST_PSEUDO_REGISTER)\n-\t\tunion_defs (use, def_entry, use_entry, unionfind_union);\n+\t\tunion_defs (use, def_entry, used, use_entry, unionfind_union);\n \t    }\n \t  for (use_rec = DF_INSN_UID_EQ_USES (uid); *use_rec; use_rec++)\n \t    {\n \t      df_ref use = *use_rec;\n \t      if (DF_REF_REGNO (use) >= FIRST_PSEUDO_REGISTER)\n-\t\tunion_defs (use, def_entry, use_entry, unionfind_union);\n+\t\tunion_defs (use, def_entry, used, use_entry, unionfind_union);\n \t    }\n \t}\n     }"}]}