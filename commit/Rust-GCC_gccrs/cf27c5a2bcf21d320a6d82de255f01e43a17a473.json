{"sha": "cf27c5a2bcf21d320a6d82de255f01e43a17a473", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YyN2M1YTJiY2YyMWQzMjBhNmQ4MmRlMjU1ZjAxZTQzYTE3YTQ3Mw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-02-20T09:45:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-02-20T09:45:50Z"}, "message": "exp_ch3.adb (Default_Initialize_Object): Call Add_Inlined_Body on the Abort_Undefer_Direct function.\n\n2015-02-20  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* exp_ch3.adb (Default_Initialize_Object): Call Add_Inlined_Body on the\n\tAbort_Undefer_Direct function.\n\t* exp_ch5.adb (Expand_N_Assignment_Statement): Likewise.\n\t* exp_intr.adb (Expand_Unc_Deallocation): Likewise.\n\t* exp_prag.adb (Expand_Pragma_Abort_Defer): Likewise.\n\t* exp_ch4.adb (Expand_N_Selected_Component): Adjust call to\n\tAdd_Inlined_Body.\n\t* exp_ch6.adb (Expand_Call): Adjust calls to Add_Inlined_Body.\n\t Remove call to Register_Backend_Call and move code resetting\n\tNeeds_Debug_Info on inlined subprograms to...\n\t* inline.ads (Add_Inlined_Body): Add N parameter.\n\t(Register_Backend_Call): Delete.\n\t* inline.adb (Add_Inlined_Body): ...here and simplify.\n\t Register the call with Backend_Calls directly.\n\t(Register_Backend_Call): Delete.\n\t* s-stalib.ads (Abort_Undefer_Direct): Restore pragma Inline.\n\nFrom-SVN: r220841", "tree": {"sha": "43e8ac3d1e607e353a9b68c5520cfacd4776a6c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43e8ac3d1e607e353a9b68c5520cfacd4776a6c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf27c5a2bcf21d320a6d82de255f01e43a17a473", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf27c5a2bcf21d320a6d82de255f01e43a17a473", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf27c5a2bcf21d320a6d82de255f01e43a17a473", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf27c5a2bcf21d320a6d82de255f01e43a17a473/comments", "author": null, "committer": null, "parents": [{"sha": "2ac4a591c1673e190c131dbfd452bb1550cf9dbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ac4a591c1673e190c131dbfd452bb1550cf9dbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ac4a591c1673e190c131dbfd452bb1550cf9dbf"}], "stats": {"total": 172, "additions": 104, "deletions": 68}, "files": [{"sha": "7a2d6d112e58899391cd8b098893e2fd98791851", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf27c5a2bcf21d320a6d82de255f01e43a17a473/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf27c5a2bcf21d320a6d82de255f01e43a17a473/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cf27c5a2bcf21d320a6d82de255f01e43a17a473", "patch": "@@ -1,3 +1,22 @@\n+2015-02-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Default_Initialize_Object): Call Add_Inlined_Body on the\n+\tAbort_Undefer_Direct function.\n+\t* exp_ch5.adb (Expand_N_Assignment_Statement): Likewise.\n+\t* exp_intr.adb (Expand_Unc_Deallocation): Likewise.\n+\t* exp_prag.adb (Expand_Pragma_Abort_Defer): Likewise.\n+\t* exp_ch4.adb (Expand_N_Selected_Component): Adjust call to\n+\tAdd_Inlined_Body.\n+\t* exp_ch6.adb (Expand_Call): Adjust calls to Add_Inlined_Body.\n+\t Remove call to Register_Backend_Call and move code resetting\n+\tNeeds_Debug_Info on inlined subprograms to...\n+\t* inline.ads (Add_Inlined_Body): Add N parameter.\n+\t(Register_Backend_Call): Delete.\n+\t* inline.adb (Add_Inlined_Body): ...here and simplify.\n+\t Register the call with Backend_Calls directly.\n+\t(Register_Backend_Call): Delete.\n+\t* s-stalib.ads (Abort_Undefer_Direct): Restore pragma Inline.\n+\n 2015-02-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* s-stalib.ads: Fix typo."}, {"sha": "c2ba50af70ba3ff32557df3ffb290afcc3ef0b17", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf27c5a2bcf21d320a6d82de255f01e43a17a473/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf27c5a2bcf21d320a6d82de255f01e43a17a473/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=cf27c5a2bcf21d320a6d82de255f01e43a17a473", "patch": "@@ -44,6 +44,7 @@ with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n with Freeze;   use Freeze;\n with Ghost;    use Ghost;\n+with Inline;   use Inline;\n with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n@@ -5321,11 +5322,20 @@ package body Exp_Ch3 is\n                --       Abort_Undefer_Direct;\n                --    end;\n \n-               Abrt_HSS :=\n-                 Make_Handled_Sequence_Of_Statements (Loc,\n-                   Statements  => Fin_Stmts,\n-                   At_End_Proc =>\n-                     New_Occurrence_Of (RTE (RE_Abort_Undefer_Direct), Loc));\n+               declare\n+                  AUD : constant Entity_Id := RTE (RE_Abort_Undefer_Direct);\n+\n+               begin\n+                  Abrt_HSS :=\n+                    Make_Handled_Sequence_Of_Statements (Loc,\n+                      Statements  => Fin_Stmts,\n+                      At_End_Proc => New_Occurrence_Of (AUD, Loc));\n+\n+                  --  Present the Abort_Undefer_Direct function to the backend\n+                  --  so that it can inline the call to the function.\n+\n+                  Add_Inlined_Body (AUD, N);\n+               end;\n \n                Abrt_Blk :=\n                  Make_Block_Statement (Loc,"}, {"sha": "3fcd8247fd8e7ce26cd298e3173dcaecf38f15a7", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf27c5a2bcf21d320a6d82de255f01e43a17a473/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf27c5a2bcf21d320a6d82de255f01e43a17a473/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=cf27c5a2bcf21d320a6d82de255f01e43a17a473", "patch": "@@ -9485,7 +9485,8 @@ package body Exp_Ch4 is\n \n             Add_Inlined_Body\n               (Discriminant_Checking_Func\n-                (Original_Record_Component (Entity (S))));\n+                (Original_Record_Component (Entity (S))),\n+               N);\n \n             --  Now reset the flag and generate the call\n "}, {"sha": "c45dcb98e81afe8a5288c0e01445adc0ba552411", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf27c5a2bcf21d320a6d82de255f01e43a17a473/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf27c5a2bcf21d320a6d82de255f01e43a17a473/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=cf27c5a2bcf21d320a6d82de255f01e43a17a473", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,6 +38,7 @@ with Exp_Dbug; use Exp_Dbug;\n with Exp_Pakd; use Exp_Pakd;\n with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n+with Inline;   use Inline;\n with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n@@ -2342,6 +2343,7 @@ package body Exp_Ch5 is\n                   Blk : constant Entity_Id :=\n                           New_Internal_Entity\n                             (E_Block, Current_Scope, Sloc (N), 'B');\n+                  AUD : constant Entity_Id := RTE (RE_Abort_Undefer_Direct);\n \n                begin\n                   Set_Scope (Blk, Current_Scope);\n@@ -2350,7 +2352,13 @@ package body Exp_Ch5 is\n \n                   Prepend_To (L, Build_Runtime_Call (Loc, RE_Abort_Defer));\n                   Set_At_End_Proc (Handled_Statement_Sequence (N),\n-                    New_Occurrence_Of (RTE (RE_Abort_Undefer_Direct), Loc));\n+                    New_Occurrence_Of (AUD, Loc));\n+\n+                  --  Present the Abort_Undefer_Direct function to the backend\n+                  --  so that it can inline the call to the function.\n+\n+                  Add_Inlined_Body (AUD, N);\n+\n                   Expand_At_End_Handler\n                     (Handled_Statement_Sequence (N), Blk);\n                end;"}, {"sha": "0195b74632cf691c91558476c855739929628e7f", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf27c5a2bcf21d320a6d82de255f01e43a17a473/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf27c5a2bcf21d320a6d82de255f01e43a17a473/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=cf27c5a2bcf21d320a6d82de255f01e43a17a473", "patch": "@@ -43,7 +43,6 @@ with Exp_Pakd; use Exp_Pakd;\n with Exp_Prag; use Exp_Prag;\n with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n-with Fname;    use Fname;\n with Freeze;   use Freeze;\n with Inline;   use Inline;\n with Lib;      use Lib;\n@@ -3757,7 +3756,7 @@ package body Exp_Ch6 is\n                else\n                   --  Let the back end handle it\n \n-                  Add_Inlined_Body (Subp);\n+                  Add_Inlined_Body (Subp, Call_Node);\n \n                   if Front_End_Inlining\n                     and then Nkind (Spec) = N_Subprogram_Declaration\n@@ -3780,30 +3779,7 @@ package body Exp_Ch6 is\n                                                  N_Subprogram_Declaration\n            or else No (Body_To_Inline (Unit_Declaration_Node (Subp)))\n          then\n-            Add_Inlined_Body (Subp);\n-            Register_Backend_Call (Call_Node);\n-\n-            --  If the call is to a function in a run-time unit that is marked\n-            --  Inline_Always, we must suppress debugging information on it,\n-            --  so that the code that is eventually inlined will not affect\n-            --  debugging of the user program.\n-\n-            if Is_Predefined_File_Name\n-                 (Unit_File_Name (Get_Source_Unit (Sloc (Subp))))\n-              and then In_Extended_Main_Source_Unit (N)\n-            then\n-               --  We make an exception for calls to the Ada hierarchy if call\n-               --  comes from source, because some user applications need the\n-               --  debugging information for such calls.\n-\n-               if Comes_From_Source (Call_Node)\n-                 and then Name_Buffer (1 .. 2) = \"a-\"\n-               then\n-                  null;\n-               else\n-                  Set_Needs_Debug_Info (Subp, False);\n-               end if;\n-            end if;\n+            Add_Inlined_Body (Subp, Call_Node);\n \n          --  Front end expansion of simple functions returning unconstrained\n          --  types (see Check_And_Split_Unconstrained_Function) and simple"}, {"sha": "9bda8aab152744c67d1bbd126b47b417739f86d0", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf27c5a2bcf21d320a6d82de255f01e43a17a473/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf27c5a2bcf21d320a6d82de255f01e43a17a473/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=cf27c5a2bcf21d320a6d82de255f01e43a17a473", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,6 +37,7 @@ with Exp_Code; use Exp_Code;\n with Exp_Fixd; use Exp_Fixd;\n with Exp_Util; use Exp_Util;\n with Freeze;   use Freeze;\n+with Inline;   use Inline;\n with Nmake;    use Nmake;\n with Nlists;   use Nlists;\n with Opt;      use Opt;\n@@ -1082,12 +1083,23 @@ package body Exp_Intr is\n          if Abort_Allowed then\n             Prepend_To (Final_Code, Build_Runtime_Call (Loc, RE_Abort_Defer));\n \n-            Blk :=\n-              Make_Block_Statement (Loc, Handled_Statement_Sequence =>\n-                Make_Handled_Sequence_Of_Statements (Loc,\n-                  Statements  => Final_Code,\n-                  At_End_Proc =>\n-                    New_Occurrence_Of (RTE (RE_Abort_Undefer_Direct), Loc)));\n+            declare\n+               AUD : constant Entity_Id := RTE (RE_Abort_Undefer_Direct);\n+\n+            begin\n+               Blk :=\n+                 Make_Block_Statement (Loc,\n+                   Handled_Statement_Sequence =>\n+                     Make_Handled_Sequence_Of_Statements (Loc,\n+                       Statements  => Final_Code,\n+                       At_End_Proc => New_Occurrence_Of (AUD, Loc)));\n+\n+               --  Present the Abort_Undefer_Direct function to the backend so\n+               --  that it can inline the call to the function.\n+\n+               Add_Inlined_Body (AUD, N);\n+            end;\n+\n             Add_Block_Identifier (Blk, Blk_Id);\n \n             Append (Blk, Stmts);"}, {"sha": "d4196e77328aab839866f7d62123e10e44f140e8", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf27c5a2bcf21d320a6d82de255f01e43a17a473/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf27c5a2bcf21d320a6d82de255f01e43a17a473/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=cf27c5a2bcf21d320a6d82de255f01e43a17a473", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,6 +32,7 @@ with Errout;   use Errout;\n with Exp_Ch11; use Exp_Ch11;\n with Exp_Util; use Exp_Util;\n with Expander; use Expander;\n+with Inline;   use Inline;\n with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n@@ -888,11 +889,11 @@ package body Exp_Prag is\n       Stms : List_Id;\n       HSS  : Node_Id;\n       Blk  : constant Entity_Id :=\n-        New_Internal_Entity (E_Block, Current_Scope, Sloc (N), 'B');\n+               New_Internal_Entity (E_Block, Current_Scope, Sloc (N), 'B');\n+      AUD : constant Entity_Id := RTE (RE_Abort_Undefer_Direct);\n \n    begin\n       Stms := New_List (Build_Runtime_Call (Loc, RE_Abort_Defer));\n-\n       loop\n          Stm := Remove_Next (N);\n          exit when No (Stm);\n@@ -901,9 +902,13 @@ package body Exp_Prag is\n \n       HSS :=\n         Make_Handled_Sequence_Of_Statements (Loc,\n-          Statements => Stms,\n-          At_End_Proc =>\n-            New_Occurrence_Of (RTE (RE_Abort_Undefer_Direct), Loc));\n+          Statements  => Stms,\n+          At_End_Proc => New_Occurrence_Of (AUD, Loc));\n+\n+      --  Present the Abort_Undefer_Direct function to the backend so that it\n+      --  can inline the call to the function.\n+\n+      Add_Inlined_Body (AUD, N);\n \n       Rewrite (N,\n         Make_Block_Statement (Loc,"}, {"sha": "74b39710a1d5aa238d0cc9cecf66fb91920318b0", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf27c5a2bcf21d320a6d82de255f01e43a17a473/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf27c5a2bcf21d320a6d82de255f01e43a17a473/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=cf27c5a2bcf21d320a6d82de255f01e43a17a473", "patch": "@@ -291,7 +291,7 @@ package body Inline is\n    -- Add_Inlined_Body --\n    ----------------------\n \n-   procedure Add_Inlined_Body (E : Entity_Id) is\n+   procedure Add_Inlined_Body (E : Entity_Id; N : Node_Id) is\n \n       type Inline_Level_Type is (Dont_Inline, Inline_Call, Inline_Package);\n       --  Level of inlining for the call: Dont_Inline means no inlining,\n@@ -376,6 +376,8 @@ package body Inline is\n    --  Start of processing for Add_Inlined_Body\n \n    begin\n+      Append_New_Elmt (N, To => Backend_Calls);\n+\n       --  Find unit containing E, and add to list of inlined bodies if needed.\n       --  If the body is already present, no need to load any other unit. This\n       --  is the case for an initialization procedure, which appears in the\n@@ -397,6 +399,7 @@ package body Inline is\n       end if;\n \n       Level := Must_Inline;\n+\n       if Level /= Dont_Inline then\n          declare\n             Pack : constant Entity_Id := Get_Code_Unit_Entity (E);\n@@ -444,6 +447,21 @@ package body Inline is\n                   Inlined_Bodies.Table (Inlined_Bodies.Last) := Pack;\n                end if;\n             end if;\n+\n+            --  If the call was generated by the compiler and is to a function\n+            --  in a run-time unit, we need to suppress debugging information\n+            --  for it, so that the code that is eventually inlined will not\n+            --  affect debugging of the program. We do not do it if the call\n+            --  comes from source because, even if the call is inlined, the\n+            --  user may expect it to be present in the debugging information.\n+\n+            if not Comes_From_Source (N)\n+               and then In_Extended_Main_Source_Unit (N)\n+               and then\n+                 Is_Predefined_File_Name (Unit_File_Name (Get_Source_Unit (E)))\n+            then\n+               Set_Needs_Debug_Info (E, False);\n+            end if;\n          end;\n       end if;\n    end Add_Inlined_Body;\n@@ -3937,15 +3955,6 @@ package body Inline is\n       Inlined.Release;\n    end Lock;\n \n-   ---------------------------\n-   -- Register_Backend_Call --\n-   ---------------------------\n-\n-   procedure Register_Backend_Call (N : Node_Id) is\n-   begin\n-      Append_New_Elmt (N, To => Backend_Calls);\n-   end Register_Backend_Call;\n-\n    --------------------------------\n    -- Remove_Aspects_And_Pragmas --\n    --------------------------------"}, {"sha": "bd22e45ef77514e5b35fd660b756e2aa569d7b32", "filename": "gcc/ada/inline.ads", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf27c5a2bcf21d320a6d82de255f01e43a17a473/gcc%2Fada%2Finline.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf27c5a2bcf21d320a6d82de255f01e43a17a473/gcc%2Fada%2Finline.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.ads?ref=cf27c5a2bcf21d320a6d82de255f01e43a17a473", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -149,11 +149,11 @@ package Inline is\n    --  instantiate the bodies of generic instantiations that appear in the\n    --  compilation unit.\n \n-   procedure Add_Inlined_Body (E : Entity_Id);\n-   --  E is an inlined subprogram appearing in a call, either explicitly, or\n-   --  a discriminant check for which gigi builds a call.  Add E's enclosing\n-   --  unit to Inlined_Bodies so that body of E can be subsequently retrieved\n-   --  and analyzed.\n+   procedure Add_Inlined_Body (E : Entity_Id; N : Node_Id);\n+   --  E is an inlined subprogram appearing in a call, either explicitly or in\n+   --  a discriminant check for which gigi builds a call or an at-end handler.\n+   --  Add E's enclosing unit to Inlined_Bodies so that E can be subsequently\n+   --  retrieved and analyzed. N is the node giving rise to the call to E.\n \n    procedure Analyze_Inlined_Bodies;\n    --  At end of compilation, analyze the bodies of all units that contain\n@@ -247,9 +247,6 @@ package Inline is\n    --  Generate listing of calls inlined by the frontend plus listing of\n    --  calls to inline subprograms passed to the backend.\n \n-   procedure Register_Backend_Call (N : Node_Id);\n-   --  Append N to the list Backend_Calls\n-\n    procedure Remove_Dead_Instance (N : Node_Id);\n    --  If an instantiation appears in unreachable code, delete the pending\n    --  body instance."}, {"sha": "447662b5e9150be34a870c7e00128fc9fc543c2a", "filename": "gcc/ada/s-stalib.ads", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf27c5a2bcf21d320a6d82de255f01e43a17a473/gcc%2Fada%2Fs-stalib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf27c5a2bcf21d320a6d82de255f01e43a17a473/gcc%2Fada%2Fs-stalib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stalib.ads?ref=cf27c5a2bcf21d320a6d82de255f01e43a17a473", "patch": "@@ -239,10 +239,9 @@ package System.Standard_Library is\n    -----------------\n \n    procedure Abort_Undefer_Direct;\n+   pragma Inline (Abort_Undefer_Direct);\n    --  A little procedure that just calls Abort_Undefer.all, for use in\n    --  clean up procedures, which only permit a simple subprogram name.\n-   --  ??? This procedure is not marked inline because the front-end\n-   --  cannot currently mark its calls from at-end handlers as inlined.\n \n    procedure Adafinal;\n    --  Performs the Ada Runtime finalization the first time it is invoked."}]}