{"sha": "60e9d01cf742140d4d56eb8aaf7eced14a923141", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBlOWQwMWNmNzQyMTQwZDRkNTZlYjhhYWY3ZWNlZDE0YTkyMzE0MQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-09-17T19:39:56Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-09-17T19:39:56Z"}, "message": "c-decl.c (grokdeclarator): Don't give a warning about defaulting to int for plain complex which defaults...\n\n\t* c-decl.c (grokdeclarator): Don't give a warning about defaulting\n\tto int for plain complex which defaults to complex double.  Do\n\twarn about defaulting to complex double if pedantic.  Warn about\n\tcomplex integer types if pedantic.  Warn about complex types if\n\tpedantic and not in C99 mode.\n\t* c-typeck.c (build_unary_op): If pedantic, warn about use of ~\n\tfor complex conjugation.\n\ntestsuite:\n\t* gcc.dg/c90-complex-1.c, gcc.dg/c99-complex-1.c: New tests.\n\nFrom-SVN: r36478", "tree": {"sha": "334934f9502cc4e6f33fbd5069958392abed651a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/334934f9502cc4e6f33fbd5069958392abed651a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60e9d01cf742140d4d56eb8aaf7eced14a923141", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60e9d01cf742140d4d56eb8aaf7eced14a923141", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60e9d01cf742140d4d56eb8aaf7eced14a923141", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60e9d01cf742140d4d56eb8aaf7eced14a923141/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc5006c72549c530c630f8a749612ea5ec2bb9e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc5006c72549c530c630f8a749612ea5ec2bb9e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc5006c72549c530c630f8a749612ea5ec2bb9e7"}], "stats": {"total": 79, "additions": 75, "deletions": 4}, "files": [{"sha": "2d08c82d4e235e3363564832bacf91798e6c6d5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e9d01cf742140d4d56eb8aaf7eced14a923141/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e9d01cf742140d4d56eb8aaf7eced14a923141/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60e9d01cf742140d4d56eb8aaf7eced14a923141", "patch": "@@ -1,3 +1,13 @@\n+2000-09-17  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-decl.c (grokdeclarator): Don't give a warning about defaulting\n+\tto int for plain complex which defaults to complex double.  Do\n+\twarn about defaulting to complex double if pedantic.  Warn about\n+\tcomplex integer types if pedantic.  Warn about complex types if\n+\tpedantic and not in C99 mode.\n+\t* c-typeck.c (build_unary_op): If pedantic, warn about use of ~\n+\tfor complex conjugation.\n+\n 2000-09-17  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* contrib.texi: Update my entry."}, {"sha": "8287eefb2e466cccedb78b6e783be09deadc1edc", "filename": "gcc/c-decl.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e9d01cf742140d4d56eb8aaf7eced14a923141/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e9d01cf742140d4d56eb8aaf7eced14a923141/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=60e9d01cf742140d4d56eb8aaf7eced14a923141", "patch": "@@ -4078,7 +4078,8 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n     {\n       if ((! (specbits & ((1 << (int) RID_LONG) | (1 << (int) RID_SHORT)\n \t\t\t  | (1 << (int) RID_SIGNED)\n-\t\t\t  | (1 << (int) RID_UNSIGNED))))\n+\t\t\t  | (1 << (int) RID_UNSIGNED)\n+\t\t\t  | (1 << (int) RID_COMPLEX))))\n \t  /* Don't warn about typedef foo = bar.  */\n \t  && ! (specbits & (1 << (int) RID_TYPEDEF) && initialized)\n \t  && ! in_system_header)\n@@ -4209,6 +4210,8 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \n   if (specbits & 1 << (int) RID_COMPLEX)\n     {\n+      if (pedantic && !flag_isoc99)\n+\tpedwarn (\"ISO C89 does not support complex types\");\n       /* If we just have \"complex\", it is equivalent to\n \t \"complex double\", but if any modifiers at all are specified it is\n \t the complex form of TYPE.  E.g, \"complex short\" is\n@@ -4218,17 +4221,29 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t  && ! (specbits & ((1 << (int) RID_LONG) | (1 << (int) RID_SHORT)\n \t\t\t    | (1 << (int) RID_SIGNED)\n \t\t\t    | (1 << (int) RID_UNSIGNED))))\n-\ttype = complex_double_type_node;\n+\t{\n+\t  if (pedantic)\n+\t    pedwarn (\"ISO C does not support plain `complex' meaning `double complex'\");\n+\t  type = complex_double_type_node;\n+\t}\n       else if (type == integer_type_node)\n-\ttype = complex_integer_type_node;\n+\t{\n+\t  if (pedantic)\n+\t    pedwarn (\"ISO C does not support complex integer types\");\n+\t  type = complex_integer_type_node;\n+\t}\n       else if (type == float_type_node)\n \ttype = complex_float_type_node;\n       else if (type == double_type_node)\n \ttype = complex_double_type_node;\n       else if (type == long_double_type_node)\n \ttype = complex_long_double_type_node;\n       else\n-\ttype = build_complex_type (type);\n+\t{\n+\t  if (pedantic)\n+\t    pedwarn (\"ISO C does not support complex integer types\");\n+\t  type = build_complex_type (type);\n+\t}\n     }\n \n   /* Figure out the type qualifiers for the declaration.  There are"}, {"sha": "75fb57a6b6179d124cb0b36bd30c33e49db8c5f2", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e9d01cf742140d4d56eb8aaf7eced14a923141/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e9d01cf742140d4d56eb8aaf7eced14a923141/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=60e9d01cf742140d4d56eb8aaf7eced14a923141", "patch": "@@ -2807,6 +2807,8 @@ build_unary_op (code, xarg, noconvert)\n       if (typecode == COMPLEX_TYPE)\n \t{\n \t  code = CONJ_EXPR;\n+\t  if (pedantic)\n+\t    pedwarn (\"ISO C does not support `~' for complex conjugation\");\n \t  if (!noconvert)\n \t    arg = default_conversion (arg);\n \t}"}, {"sha": "0362ad7f2f62cb07a43f9d04c4cc713417c45882", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e9d01cf742140d4d56eb8aaf7eced14a923141/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e9d01cf742140d4d56eb8aaf7eced14a923141/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=60e9d01cf742140d4d56eb8aaf7eced14a923141", "patch": "@@ -1,3 +1,7 @@\n+2000-09-17  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c90-complex-1.c, gcc.dg/c99-complex-1.c: New tests.\n+\n 2000-09-17  Greg McGary  <greg@mcgary.org>\n \n \t* gcc.c-torture/execute/20000917-1.c: New test."}, {"sha": "b65fc6873e9e2547bf920d4156d30a9aac62624b", "filename": "gcc/testsuite/gcc.dg/c90-complex-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e9d01cf742140d4d56eb8aaf7eced14a923141/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-complex-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e9d01cf742140d4d56eb8aaf7eced14a923141/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-complex-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-complex-1.c?ref=60e9d01cf742140d4d56eb8aaf7eced14a923141", "patch": "@@ -0,0 +1,7 @@\n+/* Test for _Complex: in C99 only.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+_Complex double foo; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"C\" \"_Complex not in C90\" { target *-*-* } 6 } */"}, {"sha": "2e1ba7df539ad664e254d39bee36825b38c9e377", "filename": "gcc/testsuite/gcc.dg/c99-complex-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e9d01cf742140d4d56eb8aaf7eced14a923141/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-complex-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e9d01cf742140d4d56eb8aaf7eced14a923141/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-complex-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-complex-1.c?ref=60e9d01cf742140d4d56eb8aaf7eced14a923141", "patch": "@@ -0,0 +1,33 @@\n+/* Test for _Complex: in C99 only.  A few basic tests.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+/* Test _Complex allowed on floating types.  */\n+\n+float _Complex a;\n+_Complex float b;\n+double _Complex c;\n+_Complex double d;\n+long double _Complex e;\n+_Complex long double f;\n+\n+/* Plain `_Complex' for complex double is a GNU extension.  */\n+_Complex g; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"plain\" \"plain _Complex\" { target *-*-* } 16 } */\n+\n+/* Complex integer types are GNU extensions.  */\n+_Complex int h; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"complex integer\" \"_Complex int\" { target *-*-* } 20 } */\n+_Complex long i; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"complex integer\" \"_Complex long\" { target *-*-* } 22 } */\n+\n+/* Use of ~ for complex conjugation is a GNU extension, but a constraint\n+   violation (6.5.3.3p1) in C99.\n+*/\n+_Complex double\n+foo (_Complex double z)\n+{\n+  return ~z; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+  /* { dg-error \"complex conj\" \"~ for conjugation\" { target *-*-* } 31 } */\n+}"}]}