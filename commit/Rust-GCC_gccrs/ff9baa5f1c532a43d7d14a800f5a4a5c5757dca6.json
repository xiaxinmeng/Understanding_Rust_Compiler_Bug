{"sha": "ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY5YmFhNWYxYzUzMmE0M2Q3ZDE0YTgwMGY1YTRhNWM1NzU3ZGNhNg==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2017-06-21T11:24:51Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-06-21T11:24:51Z"}, "message": "DWARF: make it possible to emit debug info for declarations only\n\nThe DWARF back-end used to systematically ignore file-scope function and\nvariable declarations.  While this is justified in language like C/C++,\nwhere such declarations can appear in several translation units and thus\nbloat uselessly the debug info, this behavior is counter-productive in\nlanguages with a well-defined module system.  Specifically, it prevents\nthe description of imported entities, that belong to foreign languages,\nmaking them unavailable from debuggers.\n\nTake for instance:\n\n    package C_Binding is\n        function My_C_Function (I : Integer) return Integer;\n        pragma Import (C, My_C_Function, \"my_c_function\");\n    end C_Binding;\n\nThis makes available for Ada programs the C function \"my_c_function\"\nunder the following name: C_Binding.My_C_Function.  When GCC compiles\nit, though, it is represented as a FUNCTION_DECL node with DECL_EXTERNAL\nset and a null DECL_INITIAL, which used to be discarded unconditionally\nin the DWARF back-end.\n\nThis patch moves such filter from the DWARF back-end to the relevant\ncallers: passes.c:rest_of_decl_compilation and\ngodump.c:go_early_global_decl. It also This patch also updates the Ada\nfront-end to call debug hooks for functions such as in the above\nexample, so that we do generate debugging information for them.\n\ngcc/\n\t* dwarf2out.c (gen_decl_die): Remove the guard to skip file-scope\n\tFUNCTION_DECL declarations.\n\t(dwarf2out_early_global_decl): Remove the guard to skip FUNCTION_DECL\n\tdeclarations.\n\t(dwaf2out_decl): Likewise.\n\t* godump.c (go_early_global_decl): Skip call to the real debug hook\n\tfor FUNCTION_DECL declarations.\n\t* passes.c (rest_of_decl_compilation): Skip call to the\n\tearly_global_decl debug hook for FUNCTION_DECL declarations, unless\n\t-fdump-go-spec is passed.\n\ngcc/ada/\n\t* gcc-interface/ada-tree.h (DECL_FUNCTION_IS_DEF): Update copyright\n\tnotice.  New macro.\n\t* gcc-interface/trans.c (Subprogram_Body_to_gnu): Tag the subprogram\n\tas a definition.\n\t(Compilation_Unit_to_gnu): Tag the elaboration procedure as a\n\tdefinition.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Tag declarations of\n\timported subprograms for the current compilation unit as\n\tdefinitions.  Disable debug info for references to variables.\n\t* gcc-interface/gigi.h (create_subprog_decl): Update declaration.\n\t* gcc-interface/utils.c (gnat_pushdecl): Add external DECLs that are\n\tnot built-in functions to their binding scope.\n\t(create_subprog_decl): Add a DEFINITION parameter.  If it is true, tag\n\tthe function as a definition.  Update all callers.\n\t(gnat_write_global_declarations): Emit debug info for imported\n\tfunctions.  Filter out external variables for which debug info\n\tis disabled.\n\ngcc/testsuite/\n\t* gnat.dg/debug11_pkg.adb, gnat.dg/debug11_pkg.ads,\n\tgnat.dg/debug11_pkg2.ads: New testcase.\n\nFrom-SVN: r249449", "tree": {"sha": "7395ae997bed267b7d956093500e639f090e9fc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7395ae997bed267b7d956093500e639f090e9fc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/comments", "author": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a23ba8ccd0d3e16de01dfccf6304b9014e84f64f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23ba8ccd0d3e16de01dfccf6304b9014e84f64f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a23ba8ccd0d3e16de01dfccf6304b9014e84f64f"}], "stats": {"total": 266, "additions": 172, "deletions": 94}, "files": [{"sha": "0926a49f0d21e8de0090d320738322953e429fc4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6", "patch": "@@ -1,3 +1,16 @@\n+2017-06-21  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* dwarf2out.c (gen_decl_die): Remove the guard to skip file-scope\n+\tFUNCTION_DECL declarations.\n+\t(dwarf2out_early_global_decl): Remove the guard to skip FUNCTION_DECL\n+\tdeclarations.\n+\t(dwaf2out_decl): Likewise.\n+\t* godump.c (go_early_global_decl): Skip call to the real debug hook\n+\tfor FUNCTION_DECL declarations.\n+\t* passes.c (rest_of_decl_compilation): Skip call to the\n+\tearly_global_decl debug hook for FUNCTION_DECL declarations, unless\n+\t-fdump-go-spec is passed.\n+\n 2017-06-21  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* config/i386/i386.c (struct builtin_isa): New field pure_p."}, {"sha": "fce09a0666f99100f0df6f88f315adda46c5de4e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6", "patch": "@@ -1,3 +1,23 @@\n+2017-06-21  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* gcc-interface/ada-tree.h (DECL_FUNCTION_IS_DEF): Update copyright\n+\tnotice.  New macro.\n+\t* gcc-interface/trans.c (Subprogram_Body_to_gnu): Tag the subprogram\n+\tas a definition.\n+\t(Compilation_Unit_to_gnu): Tag the elaboration procedure as a\n+\tdefinition.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Tag declarations of\n+\timported subprograms for the current compilation unit as\n+\tdefinitions.  Disable debug info for references to variables.\n+\t* gcc-interface/gigi.h (create_subprog_decl): Update declaration.\n+\t* gcc-interface/utils.c (gnat_pushdecl): Add external DECLs that are\n+\tnot built-in functions to their binding scope.\n+\t(create_subprog_decl): Add a DEFINITION parameter.  If it is true, tag\n+\tthe function as a definition.  Update all callers.\n+\t(gnat_write_global_declarations): Emit debug info for imported\n+\tfunctions.  Filter out external variables for which debug info\n+\tis disabled.\n+\n 2017-06-15  Nicolas Boulenguez  <nicolas.boulenguez@free.fr>\n \n \tPR ada/81105"}, {"sha": "511a0bd81732c3039b7a9d7a162f2aca6ce87113", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2016, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2017, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -463,6 +463,11 @@ do {\t\t\t\t\t\t   \\\n    a discriminant of a discriminated type without default expression.  */\n #define DECL_INVARIANT_P(NODE) DECL_LANG_FLAG_4 (FIELD_DECL_CHECK (NODE))\n \n+/* Nonzero in a FUNCTION_DECL if this is a definition, i.e. if it was created\n+   by a call to gnat_to_gnu_entity with definition set to True.  */\n+#define DECL_FUNCTION_IS_DEF(NODE) \\\n+  DECL_LANG_FLAG_4 (FUNCTION_DECL_CHECK (NODE))\n+\n /* Nonzero in a VAR_DECL if it is a temporary created to hold the return\n    value of a function call or 'reference to a function call.  */\n #define DECL_RETURN_VALUE_P(NODE) DECL_LANG_FLAG_5 (VAR_DECL_CHECK (NODE))"}, {"sha": "83b9d0749fe3ccd12f4ce0e2124e43de21637806", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6", "patch": "@@ -1392,7 +1392,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t      = create_var_decl (create_concat_name (gnat_entity, \"ALIGN\"),\n \t\t\t\t NULL_TREE, gnu_new_type, NULL_TREE,\n \t\t\t\t false, false, false, false, false,\n-\t\t\t\t true, debug_info_p, NULL, gnat_entity);\n+\t\t\t\t true, debug_info_p && definition, NULL,\n+\t\t\t\t gnat_entity);\n \n \t    /* Initialize the aligned field if we have an initializer.  */\n \t    if (gnu_expr)\n@@ -1441,7 +1442,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t\t\t\t      NULL_TREE, gnu_type, gnu_expr,\n \t\t\t\t      const_flag, Is_Public (gnat_entity),\n \t\t\t\t      imported_p || !definition, static_flag,\n-\t\t\t\t      volatile_flag, true, debug_info_p,\n+\t\t\t\t      volatile_flag, true,\n+\t\t\t\t      debug_info_p && definition,\n \t\t\t\t      NULL, gnat_entity);\n \t\tgnu_expr = build_unary_op (ADDR_EXPR, NULL_TREE, gnu_unc_var);\n \t\tTREE_CONSTANT (gnu_expr) = 1;\n@@ -1492,8 +1494,9 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t  = create_var_decl (gnu_entity_name, gnu_ext_name, gnu_type,\n \t\t\t     gnu_expr, const_flag, Is_Public (gnat_entity),\n \t\t\t     imported_p || !definition, static_flag,\n-\t\t\t     volatile_flag, artificial_p, debug_info_p,\n-\t\t\t     attr_list, gnat_entity, !renamed_obj);\n+\t\t\t     volatile_flag, artificial_p,\n+\t\t\t     debug_info_p && definition, attr_list,\n+\t\t\t     gnat_entity, !renamed_obj);\n \tDECL_BY_REF_P (gnu_decl) = used_by_ref;\n \tDECL_POINTS_TO_READONLY_P (gnu_decl) = used_by_ref && inner_const_flag;\n \tDECL_CAN_NEVER_BE_NULL_P (gnu_decl) = Can_Never_Be_Null (gnat_entity);\n@@ -1545,8 +1548,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t      = create_var_decl (gnu_entity_name, gnu_ext_name, gnu_type,\n \t\t\t\t gnu_expr, true, Is_Public (gnat_entity),\n \t\t\t\t !definition, static_flag, volatile_flag,\n-\t\t\t\t artificial_p, debug_info_p, attr_list,\n-\t\t\t\t gnat_entity, false);\n+\t\t\t\t artificial_p, debug_info_p && definition,\n+\t\t\t\t attr_list, gnat_entity, false);\n \n \t    SET_DECL_CONST_CORRESPONDING_VAR (gnu_decl, gnu_corr_var);\n \t  }\n@@ -4083,7 +4086,9 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t\t\t\t\t gnu_type, gnu_param_list,\n \t\t\t\t\t inline_status, public_flag,\n \t\t\t\t\t extern_flag, artificial_p,\n-\t\t\t\t\t debug_info_p, attr_list, gnat_entity);\n+\t\t\t\t\t debug_info_p,\n+\t\t\t\t\t definition && imported_p, attr_list,\n+\t\t\t\t\t gnat_entity);\n \n \t\tDECL_STUBBED_P (gnu_decl)\n \t\t  = (Convention (gnat_entity) == Convention_Stubbed);"}, {"sha": "0e25b6129a3fa79d7e99eeb6dade1f44417bbf15", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6", "patch": "@@ -720,6 +720,8 @@ extern tree create_label_decl (tree name, Node_Id gnat_node);\n \n    DEBUG_INFO_P is true if we need to write debug information for it.\n \n+   DEFINITION is true if the subprogram is to be considered as a definition.\n+\n    ATTR_LIST is the list of attributes to be attached to the subprogram.\n \n    GNAT_NODE is used for the position of the decl.  */\n@@ -728,7 +730,8 @@ extern tree create_subprog_decl (tree name, tree asm_name, tree type,\n \t\t\t\t enum inline_status_t inline_status,\n \t\t\t\t bool public_flag, bool extern_flag,\n \t\t\t\t bool artificial_p, bool debug_info_p,\n-\t\t\t\t struct attrib *attr_list, Node_Id gnat_node);\n+\t\t\t\t bool definition, struct attrib *attr_list,\n+\t\t\t\t Node_Id gnat_node);\n \n /* Given a subprogram declaration DECL, its assembler name and its type,\n    finish constructing the subprogram declaration from ASM_NAME and TYPE.  */"}, {"sha": "79d099538c96c2cb5e64609e38020d48037fef9a", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6", "patch": "@@ -398,23 +398,23 @@ gigi (Node_Id gnat_root,\n     = create_subprog_decl (get_identifier (\"__gnat_malloc\"), NULL_TREE,\n \t\t\t   ftype,\n \t\t\t   NULL_TREE, is_disabled, true, true, true, false,\n-\t\t\t   NULL, Empty);\n+\t\t\t   false, NULL, Empty);\n   DECL_IS_MALLOC (malloc_decl) = 1;\n \n   ftype = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n   free_decl\n     = create_subprog_decl (get_identifier (\"__gnat_free\"), NULL_TREE,\n \t\t\t   ftype,\n \t\t\t   NULL_TREE, is_disabled, true, true, true, false,\n-\t\t\t   NULL, Empty);\n+\t\t\t   false, NULL, Empty);\n \n   ftype = build_function_type_list (ptr_type_node, ptr_type_node, sizetype,\n \t\t\t\t    NULL_TREE);\n   realloc_decl\n     = create_subprog_decl (get_identifier (\"__gnat_realloc\"), NULL_TREE,\n \t\t\t   ftype,\n \t\t\t   NULL_TREE, is_disabled, true, true, true, false,\n-\t\t\t   NULL, Empty);\n+\t\t\t   false, NULL, Empty);\n \n   /* This is used for 64-bit multiplication with overflow checking.  */\n   int64_type = gnat_type_for_size (64, 0);\n@@ -423,7 +423,7 @@ gigi (Node_Id gnat_root,\n \t\t\t   build_function_type_list (int64_type, int64_type,\n \t\t\t\t\t\t     int64_type, NULL_TREE),\n \t\t\t   NULL_TREE, is_disabled, true, true, true, false,\n-\t\t\t   NULL, Empty);\n+\t\t\t   false, NULL, Empty);\n \n   /* Name of the _Parent field in tagged record types.  */\n   parent_name_id = get_identifier (Get_Name_String (Name_uParent));\n@@ -446,21 +446,21 @@ gigi (Node_Id gnat_root,\n     = create_subprog_decl\n       (get_identifier (\"system__soft_links__get_jmpbuf_address_soft\"),\n        NULL_TREE, build_function_type_list (jmpbuf_ptr_type, NULL_TREE),\n-       NULL_TREE, is_disabled, true, true, true, false, NULL, Empty);\n+       NULL_TREE, is_disabled, true, true, true, false, false, NULL, Empty);\n \n   set_jmpbuf_decl\n     = create_subprog_decl\n       (get_identifier (\"system__soft_links__set_jmpbuf_address_soft\"),\n        NULL_TREE, build_function_type_list (void_type_node, jmpbuf_ptr_type,\n \t\t\t\t\t    NULL_TREE),\n-       NULL_TREE, is_disabled, true, true, true, false, NULL, Empty);\n+       NULL_TREE, is_disabled, true, true, true, false, false, NULL, Empty);\n \n   get_excptr_decl\n     = create_subprog_decl\n       (get_identifier (\"system__soft_links__get_gnat_exception\"), NULL_TREE,\n        build_function_type_list (build_pointer_type (except_type_node),\n \t\t\t\t NULL_TREE),\n-       NULL_TREE, is_disabled, true, true, true, false, NULL, Empty);\n+       NULL_TREE, is_disabled, true, true, true, false, false, NULL, Empty);\n \n   not_handled_by_others_decl = get_identifier (\"not_handled_by_others\");\n   for (t = TYPE_FIELDS (except_type_node); t; t = DECL_CHAIN (t))\n@@ -478,7 +478,7 @@ gigi (Node_Id gnat_root,\n       (get_identifier (\"__builtin_setjmp\"), NULL_TREE,\n        build_function_type_list (integer_type_node, jmpbuf_ptr_type,\n \t\t\t\t NULL_TREE),\n-       NULL_TREE, is_disabled, true, true, true, false, NULL, Empty);\n+       NULL_TREE, is_disabled, true, true, true, false, false, NULL, Empty);\n   DECL_BUILT_IN_CLASS (setjmp_decl) = BUILT_IN_NORMAL;\n   DECL_FUNCTION_CODE (setjmp_decl) = BUILT_IN_SETJMP;\n \n@@ -488,7 +488,7 @@ gigi (Node_Id gnat_root,\n     = create_subprog_decl\n       (get_identifier (\"__builtin_update_setjmp_buf\"), NULL_TREE,\n        build_function_type_list (void_type_node, jmpbuf_ptr_type, NULL_TREE),\n-       NULL_TREE, is_disabled, true, true, true, false, NULL, Empty);\n+       NULL_TREE, is_disabled, true, true, true, false, false, NULL, Empty);\n   DECL_BUILT_IN_CLASS (update_setjmp_buf_decl) = BUILT_IN_NORMAL;\n   DECL_FUNCTION_CODE (update_setjmp_buf_decl) = BUILT_IN_UPDATE_SETJMP_BUF;\n \n@@ -500,41 +500,45 @@ gigi (Node_Id gnat_root,\n   raise_nodefer_decl\n     = create_subprog_decl\n       (get_identifier (\"__gnat_raise_nodefer_with_msg\"), NULL_TREE, ftype,\n-       NULL_TREE, is_disabled, true, true, true, false, NULL, Empty);\n+       NULL_TREE, is_disabled, true, true, true, false, false, NULL, Empty);\n \n   set_exception_parameter_decl\n     = create_subprog_decl\n       (get_identifier (\"__gnat_set_exception_parameter\"), NULL_TREE,\n        build_function_type_list (void_type_node, ptr_type_node, ptr_type_node,\n \t\t\t\t NULL_TREE),\n-       NULL_TREE, is_disabled, true, true, true, false, NULL, Empty);\n+       NULL_TREE, is_disabled, true, true, true, false, false, NULL, Empty);\n \n   /* Hooks to call when entering/leaving an exception handler.  */\n   ftype = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n \n   begin_handler_decl\n     = create_subprog_decl (get_identifier (\"__gnat_begin_handler\"), NULL_TREE,\n \t\t\t   ftype, NULL_TREE,\n-\t\t\t   is_disabled, true, true, true, false, NULL, Empty);\n+\t\t\t   is_disabled, true, true, true, false, false, NULL,\n+\t\t\t   Empty);\n   /* __gnat_begin_handler is a dummy procedure.  */\n   TREE_NOTHROW (begin_handler_decl) = 1;\n \n   end_handler_decl\n     = create_subprog_decl (get_identifier (\"__gnat_end_handler\"), NULL_TREE,\n \t\t\t   ftype, NULL_TREE,\n-\t\t\t   is_disabled, true, true, true, false, NULL, Empty);\n+\t\t\t   is_disabled, true, true, true, false, false, NULL,\n+\t\t\t   Empty);\n \n   unhandled_except_decl\n     = create_subprog_decl (get_identifier (\"__gnat_unhandled_except_handler\"),\n \t\t\t   NULL_TREE, ftype, NULL_TREE,\n-\t\t\t   is_disabled, true, true, true, false, NULL, Empty);\n+\t\t\t   is_disabled, true, true, true, false, false, NULL,\n+\t\t\t   Empty);\n \n   /* Indicate that it never returns.  */\n   ftype = build_qualified_type (ftype, TYPE_QUAL_VOLATILE);\n   reraise_zcx_decl\n     = create_subprog_decl (get_identifier (\"__gnat_reraise_zcx\"), NULL_TREE,\n \t\t\t   ftype, NULL_TREE,\n-\t\t\t   is_disabled, true, true, true, false, NULL, Empty);\n+\t\t\t   is_disabled, true, true, true, false, false, NULL,\n+\t\t\t   Empty);\n \n   /* Dummy objects to materialize \"others\" and \"all others\" in the exception\n      tables.  These are exported by a-exexpr-gcc.adb, so see this unit for\n@@ -573,7 +577,8 @@ gigi (Node_Id gnat_root,\n       tree decl\n \t= create_subprog_decl\n \t  (get_identifier (\"__gnat_last_chance_handler\"), NULL_TREE, ftype,\n-\t   NULL_TREE, is_disabled, true, true, true, false, NULL, Empty);\n+\t   NULL_TREE, is_disabled, true, true, true, false, false, NULL,\n+\t   Empty);\n       for (i = 0; i < (int) ARRAY_SIZE (gnat_raise_decls); i++)\n \tgnat_raise_decls[i] = decl;\n     }\n@@ -739,7 +744,7 @@ build_raise_check (int check, enum exception_info_kind kind)\n   result\n     = create_subprog_decl (get_identifier (Name_Buffer), NULL_TREE, ftype,\n \t\t\t   NULL_TREE, is_disabled, true, true, true, false,\n-\t\t\t   NULL, Empty);\n+\t\t\t   false, NULL, Empty);\n \n   return result;\n }\n@@ -3745,6 +3750,7 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n     = gnat_to_gnu_entity (gnat_subprog_id, NULL_TREE,\n \t\t\t  Acts_As_Spec (gnat_node)\n \t\t\t  && !present_gnu_tree (gnat_subprog_id));\n+  DECL_FUNCTION_IS_DEF (gnu_subprog_decl) = true;\n   gnu_result_decl = DECL_RESULT (gnu_subprog_decl);\n   gnu_subprog_type = TREE_TYPE (gnu_subprog_decl);\n   gnu_cico_list = TYPE_CI_CO_LIST (gnu_subprog_type);\n@@ -5417,12 +5423,15 @@ Compilation_Unit_to_gnu (Node_Id gnat_node)\n   const Entity_Id gnat_unit_entity = Defining_Entity (gnat_unit);\n   Entity_Id gnat_entity;\n   Node_Id gnat_pragma;\n-  /* Make the decl for the elaboration procedure.  */\n+  /* Make the decl for the elaboration procedure.  Emit debug info for it, so\n+     that users can break into their elaboration code in debuggers.  Kludge:\n+     don't consider it as a definition so that we have a line map for its body,\n+     but no subprogram description in debug info. */\n   tree gnu_elab_proc_decl\n     = create_subprog_decl\n       (create_concat_name (gnat_unit_entity, body_p ? \"elabb\" : \"elabs\"),\n        NULL_TREE, void_ftype, NULL_TREE,\n-       is_disabled, true, false, true, true, NULL, gnat_unit);\n+       is_disabled, true, false, true, true, false, NULL, gnat_unit);\n   struct elab_info *info;\n \n   vec_safe_push (gnu_elab_proc_stack, gnu_elab_proc_decl);\n@@ -6453,7 +6462,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\tgnu_prefix = gnat_to_gnu (gnat_prefix);\n \t\tgnu_prefix = maybe_implicit_deref (gnu_prefix);\n \t      }\n-\t\t\n+\n \t    gnu_result\n \t      = build_component_ref (gnu_prefix, gnu_field,\n \t\t\t\t     (Nkind (Parent (gnat_node))\n@@ -6484,7 +6493,8 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\t\t\t (Entity (Prefix (gnat_node)),\n \t\t\t\t  attr == Attr_Elab_Body ? \"elabb\" : \"elabs\"),\n \t\t\t\t NULL_TREE, void_ftype, NULL_TREE, is_disabled,\n-\t\t\t\t true, true, true, true, NULL, gnat_node);\n+\t\t\t\t true, true, true, true, false, NULL,\n+\t\t\t\t gnat_node);\n \n \tgnu_result = Attribute_to_gnu (gnat_node, &gnu_result_type, attr);\n       }"}, {"sha": "9e656579dda2203a1bb8d6152c4cbf3c99606711", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6", "patch": "@@ -763,11 +763,13 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n   if (!(TREE_CODE (decl) == TYPE_DECL\n         && TREE_CODE (TREE_TYPE (decl)) == UNCONSTRAINED_ARRAY_TYPE))\n     {\n-      if (DECL_EXTERNAL (decl))\n-\t{\n-\t  if (TREE_CODE (decl) == FUNCTION_DECL && DECL_BUILT_IN (decl))\n-\t    vec_safe_push (builtin_decls, decl);\n-\t}\n+      /* External declarations must go to the binding level they belong to.\n+\t This will make corresponding imported entities are available in the\n+\t debugger at the proper time.  */\n+      if (DECL_EXTERNAL (decl)\n+\t  && TREE_CODE (decl) == FUNCTION_DECL\n+\t  && DECL_BUILT_IN (decl))\n+\tvec_safe_push (builtin_decls, decl);\n       else if (global_bindings_p ())\n \tvec_safe_push (global_decls, decl);\n       else\n@@ -3189,6 +3191,8 @@ create_label_decl (tree name, Node_Id gnat_node)\n \n    DEBUG_INFO_P is true if we need to write debug information for it.\n \n+   DEFINITION is true if the subprogram is to be considered as a definition.\n+\n    ATTR_LIST is the list of attributes to be attached to the subprogram.\n \n    GNAT_NODE is used for the position of the decl.  */\n@@ -3197,7 +3201,8 @@ tree\n create_subprog_decl (tree name, tree asm_name, tree type, tree param_decl_list,\n \t\t     enum inline_status_t inline_status, bool public_flag,\n \t\t     bool extern_flag, bool artificial_p, bool debug_info_p,\n-\t\t     struct attrib *attr_list, Node_Id gnat_node)\n+\t\t     bool definition, struct attrib *attr_list,\n+\t\t     Node_Id gnat_node)\n {\n   tree subprog_decl = build_decl (input_location, FUNCTION_DECL, name, type);\n   DECL_ARGUMENTS (subprog_decl) = param_decl_list;\n@@ -3208,6 +3213,8 @@ create_subprog_decl (tree name, tree asm_name, tree type, tree param_decl_list,\n \n   if (!debug_info_p)\n     DECL_IGNORED_P (subprog_decl) = 1;\n+  if (definition)\n+    DECL_FUNCTION_IS_DEF (subprog_decl) = 1;\n \n   switch (inline_status)\n     {\n@@ -5523,10 +5530,22 @@ gnat_write_global_declarations (void)\n     if (TREE_CODE (iter) == TYPE_DECL && !DECL_IGNORED_P (iter))\n       debug_hooks->type_decl (iter, false);\n \n+  /* Output imported functions.  */\n+  FOR_EACH_VEC_SAFE_ELT (global_decls, i, iter)\n+    if (TREE_CODE (iter) == FUNCTION_DECL\n+\t&& DECL_EXTERNAL (iter)\n+\t&& DECL_INITIAL (iter) == NULL\n+\t&& !DECL_IGNORED_P (iter)\n+\t&& DECL_FUNCTION_IS_DEF (iter))\n+      debug_hooks->early_global_decl (iter);\n+\n   /* Then output the global variables.  We need to do that after the debug\n-     information for global types is emitted so that they are finalized.  */\n+     information for global types is emitted so that they are finalized.  Skip\n+     external global variables, unless we need to emit debug info for them:\n+     this is useful for imported variables, for instance.  */\n   FOR_EACH_VEC_SAFE_ELT (global_decls, i, iter)\n-    if (TREE_CODE (iter) == VAR_DECL)\n+    if (TREE_CODE (iter) == VAR_DECL\n+\t&& (!DECL_EXTERNAL (iter) || !DECL_IGNORED_P (iter)))\n       rest_of_decl_compilation (iter, true, 0);\n \n   /* Output the imported modules/declarations.  In GNAT, these are only"}, {"sha": "c277d27e8e81d4dd1ff86a31df55a1c604d5fde6", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6", "patch": "@@ -25289,14 +25289,6 @@ gen_decl_die (tree decl, tree origin, struct vlr_context *ctx,\n       break;\n \n     case FUNCTION_DECL:\n-      /* Don't output any DIEs to represent mere function declarations,\n-\t unless they are class members or explicit block externs.  */\n-      if (DECL_INITIAL (decl_or_origin) == NULL_TREE\n-          && DECL_FILE_SCOPE_P (decl_or_origin)\n-\t  && (current_function_decl == NULL_TREE\n-\t      || DECL_ARTIFICIAL (decl_or_origin)))\n-\tbreak;\n-\n #if 0\n       /* FIXME */\n       /* This doesn't work because the C frontend sets DECL_ABSTRACT_ORIGIN\n@@ -25501,11 +25493,6 @@ dwarf2out_early_global_decl (tree decl)\n       tree save_fndecl = current_function_decl;\n       if (TREE_CODE (decl) == FUNCTION_DECL)\n \t{\n-\t  /* No cfun means the symbol has no body, so there's nothing\n-\t     to emit.  */\n-\t  if (!DECL_STRUCT_FUNCTION (decl))\n-\t    goto early_decl_exit;\n-\n \t  /* For nested functions, make sure we have DIEs for the parents first\n \t     so that all nested DIEs are generated at the proper scope in the\n \t     first shot.  */\n@@ -25522,7 +25509,6 @@ dwarf2out_early_global_decl (tree decl)\n       if (TREE_CODE (decl) == FUNCTION_DECL)\n \tcurrent_function_decl = save_fndecl;\n     }\n- early_decl_exit:\n   symtab->global_info_ready = save;\n }\n \n@@ -25761,42 +25747,6 @@ dwarf2out_decl (tree decl)\n       return;\n \n     case FUNCTION_DECL:\n-      /* What we would really like to do here is to filter out all mere\n-\t file-scope declarations of file-scope functions which are never\n-\t referenced later within this translation unit (and keep all of ones\n-\t that *are* referenced later on) but we aren't clairvoyant, so we have\n-\t no idea which functions will be referenced in the future (i.e. later\n-\t on within the current translation unit). So here we just ignore all\n-\t file-scope function declarations which are not also definitions.  If\n-\t and when the debugger needs to know something about these functions,\n-\t it will have to hunt around and find the DWARF information associated\n-\t with the definition of the function.\n-\n-\t We can't just check DECL_EXTERNAL to find out which FUNCTION_DECL\n-\t nodes represent definitions and which ones represent mere\n-\t declarations.  We have to check DECL_INITIAL instead. That's because\n-\t the C front-end supports some weird semantics for \"extern inline\"\n-\t function definitions.  These can get inlined within the current\n-\t translation unit (and thus, we need to generate Dwarf info for their\n-\t abstract instances so that the Dwarf info for the concrete inlined\n-\t instances can have something to refer to) but the compiler never\n-\t generates any out-of-lines instances of such things (despite the fact\n-\t that they *are* definitions).\n-\n-\t The important point is that the C front-end marks these \"extern\n-\t inline\" functions as DECL_EXTERNAL, but we need to generate DWARF for\n-\t them anyway. Note that the C++ front-end also plays some similar games\n-\t for inline function definitions appearing within include files which\n-\t also contain `#pragma interface' pragmas.\n-\n-\t If we are called from dwarf2out_abstract_function output a DIE\n-\t anyway.  We can end up here this way with early inlining and LTO\n-\t where the inlined function is output in a different LTRANS unit\n-\t or not at all.  */\n-      if (DECL_INITIAL (decl) == NULL_TREE\n-\t  && ! DECL_ABSTRACT_P (decl))\n-\treturn;\n-\n       /* If we're a nested function, initially use a parent of NULL; if we're\n \t a plain function, this will be fixed up in decls_for_scope.  If\n \t we're a method, it will be ignored, since we already have a DIE.  */"}, {"sha": "3e905319b8fcf20565c11ddc5cb6c707fc89563e", "filename": "gcc/godump.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Fgodump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Fgodump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgodump.c?ref=ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6", "patch": "@@ -504,7 +504,8 @@ static void\n go_early_global_decl (tree decl)\n {\n   go_decl (decl);\n-  real_debug_hooks->early_global_decl (decl);\n+  if (TREE_CODE (decl) != FUNCTION_DECL || DECL_STRUCT_FUNCTION (decl) != NULL)\n+    real_debug_hooks->early_global_decl (decl);\n }\n \n /* A global variable decl.  */"}, {"sha": "374f6f77897644de89be0748a203e772fae4294d", "filename": "gcc/passes.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6", "patch": "@@ -262,17 +262,18 @@ rest_of_decl_compilation (tree decl,\n      finalize_compilation_unit (and by consequence, locally scoped\n      symbols), or by rest_of_type_compilation below.\n \n-     Also, pick up function prototypes, which will be mostly ignored\n-     by the different early_global_decl() hooks, but will at least be\n-     used by Go's hijack of the debug_hooks to implement\n-     -fdump-go-spec.  */\n+     For Go's hijack of the debug_hooks to implement -fdump-go-spec, pick up\n+     function prototypes.  Go's debug_hooks will not forward them to the\n+     wrapped hooks.  */\n   if (!in_lto_p\n       && (TREE_CODE (decl) != FUNCTION_DECL\n \t  /* This will pick up function prototypes with no bodies,\n \t     which are not visible in finalize_compilation_unit()\n \t     while iterating with FOR_EACH_*_FUNCTION through the\n \t     symbol table.  */\n-\t  || !DECL_SAVED_TREE (decl))\n+\t  || (flag_dump_go_spec != NULL\n+\t      && !DECL_SAVED_TREE (decl)\n+\t      && DECL_STRUCT_FUNCTION (decl) == NULL))\n \n       /* We need to check both decl_function_context and\n \t current_function_decl here to make sure local extern"}, {"sha": "a31bba470d2ff61328b19ff58ddc860dd574fec7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6", "patch": "@@ -1,3 +1,8 @@\n+2017-06-21  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* gnat.dg/debug11_pkg.adb, gnat.dg/debug11_pkg.ads,\n+\tgnat.dg/debug11_pkg2.ads: New testcase.\n+\n 2017-06-21  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* gcc.target/i386/getround.c: New file."}, {"sha": "336f2fd69bee5a5e946e4967572d4ff8d35cd19e", "filename": "gcc/testsuite/gnat.dg/debug11_pkg.adb", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug11_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug11_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug11_pkg.adb?ref=ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6", "patch": "@@ -0,0 +1,26 @@\n+--  { dg-options \"-cargs -g -dA -margs\" }\n+--  { dg-final { scan-assembler \"local_imported_func\" } }\n+--  { dg-final { scan-assembler \"local_imported_var\" } }\n+--  { dg-final { scan-assembler \"global_imported_func\" } }\n+--  { dg-final { scan-assembler \"global_imported_var\" } }\n+--  { dg-final { scan-assembler-not \"foreign_imported_func\" } }\n+--  { dg-final { scan-assembler-not \"foreign_imported_var\" } }\n+\n+with Debug11_Pkg2;\n+\n+package body Debug11_Pkg is\n+\n+   procedure Dummy is\n+      Local_Imported_Var : Integer;\n+      pragma Import (C, Local_Imported_Var, \"imported_var\");\n+\n+      function Local_Imported_Func return Integer;\n+      pragma Import (C, Local_Imported_Func, \"imported_func\");\n+   begin\n+      Local_Imported_Var := Local_Imported_Func;\n+      Global_Imported_Var := Global_Imported_Func;\n+      Debug11_Pkg2.Foreign_Imported_Var :=\n+         Debug11_Pkg2.Foreign_Imported_Func;\n+   end Dummy;\n+\n+end Debug11_Pkg;"}, {"sha": "dc453100d41f589cbf7857433c23415acf1ab968", "filename": "gcc/testsuite/gnat.dg/debug11_pkg.ads", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug11_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug11_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug11_pkg.ads?ref=ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6", "patch": "@@ -0,0 +1,11 @@\n+package Debug11_Pkg is\n+\n+   Global_Imported_Var : Integer;\n+   pragma Import (C, Global_Imported_Var, \"imported_var\");\n+\n+   function Global_Imported_Func return Integer;\n+   pragma Import (C, Global_Imported_Func, \"imported_func\");\n+\n+   procedure Dummy;\n+\n+end Debug11_Pkg;"}, {"sha": "350f51c5b40a41a4152f500016814f55ac7a356e", "filename": "gcc/testsuite/gnat.dg/debug11_pkg2.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug11_pkg2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug11_pkg2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug11_pkg2.ads?ref=ff9baa5f1c532a43d7d14a800f5a4a5c5757dca6", "patch": "@@ -0,0 +1,9 @@\n+package Debug11_Pkg2 is\n+\n+   Foreign_Imported_Var : Integer;\n+   pragma Import (C, Foreign_Imported_Var, \"imported_var\");\n+\n+   function Foreign_Imported_Func return Integer;\n+   pragma Import (C, Foreign_Imported_Func, \"imported_func\");\n+\n+end Debug11_Pkg2;"}]}