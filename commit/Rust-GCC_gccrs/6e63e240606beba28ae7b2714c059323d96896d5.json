{"sha": "6e63e240606beba28ae7b2714c059323d96896d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU2M2UyNDA2MDZiZWJhMjhhZTdiMjcxNGMwNTkzMjNkOTY4OTZkNQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2007-01-11T22:40:13Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2007-01-11T22:40:13Z"}, "message": "typeck.c (convert): Don't use flag_emit_class_files.\n\n\t* typeck.c (convert): Don't use flag_emit_class_files.\n\t* lang.c (java_post_options): Don't use flag_emit_class_files.\n\t(java_handle_option): Don't use flag_extraneous_semicolon or\n\tflag_redundant.\n\t* jcf-parse.c (HANDLE_CONSTANTVALUE): Don't use\n\tflag_emit_class_files.\n\t(load_class): Likewise.\n\t* java-tree.h (flag_emit_class_files): Don't declare.\n\t(STATIC_CLASS_INIT_OPT_P): Don't use flag_emit_class_files.\n\t(flag_extraneous_semicolon): Don't declare.\n\t(flag_not_overriding): Likewise.\n\t(flag_static_local_jdk1_1): Likewise.\n\t(flag_redundant): Likewise.\n\t* expr.c (build_newarray): Don't use flag_emit_class_files.\n\t* class.c (DEFAULT_ENABLE_ASSERT): Don't use\n\tflag_emit_class_files.\n\t(build_class_ref): Likewise.\n\t* builtins.c (check_for_builtin): Don't use\n\tflag_emit_class_files.\n\nFrom-SVN: r120687", "tree": {"sha": "2a6d291c47f722d46c49688cc8abaf9c5e8de5d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a6d291c47f722d46c49688cc8abaf9c5e8de5d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e63e240606beba28ae7b2714c059323d96896d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e63e240606beba28ae7b2714c059323d96896d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e63e240606beba28ae7b2714c059323d96896d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e63e240606beba28ae7b2714c059323d96896d5/comments", "author": null, "committer": null, "parents": [{"sha": "2a33a75f60261a6012d4840ac3bbe15c5e2c84d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a33a75f60261a6012d4840ac3bbe15c5e2c84d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a33a75f60261a6012d4840ac3bbe15c5e2c84d8"}], "stats": {"total": 97, "additions": 33, "deletions": 64}, "files": [{"sha": "fb7ae5d145c32446fd529aa9d7e784384690336a", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e63e240606beba28ae7b2714c059323d96896d5/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e63e240606beba28ae7b2714c059323d96896d5/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=6e63e240606beba28ae7b2714c059323d96896d5", "patch": "@@ -1,3 +1,25 @@\n+2007-01-11  Tom Tromey  <tromey@redhat.com>\n+\n+\t* typeck.c (convert): Don't use flag_emit_class_files.\n+\t* lang.c (java_post_options): Don't use flag_emit_class_files.\n+\t(java_handle_option): Don't use flag_extraneous_semicolon or\n+\tflag_redundant.\n+\t* jcf-parse.c (HANDLE_CONSTANTVALUE): Don't use\n+\tflag_emit_class_files.\n+\t(load_class): Likewise.\n+\t* java-tree.h (flag_emit_class_files): Don't declare.\n+\t(STATIC_CLASS_INIT_OPT_P): Don't use flag_emit_class_files.\n+\t(flag_extraneous_semicolon): Don't declare.\n+\t(flag_not_overriding): Likewise.\n+\t(flag_static_local_jdk1_1): Likewise.\n+\t(flag_redundant): Likewise.\n+\t* expr.c (build_newarray): Don't use flag_emit_class_files.\n+\t* class.c (DEFAULT_ENABLE_ASSERT): Don't use\n+\tflag_emit_class_files.\n+\t(build_class_ref): Likewise.\n+\t* builtins.c (check_for_builtin): Don't use\n+\tflag_emit_class_files.\n+\n 2007-01-10  Tom Tromey  <tromey@redhat.com>\n \n \t* lang.c (java_can_use_bit_fields_p): Removed."}, {"sha": "9b5353b2644d3986beda8d0060365c3d08f68cdb", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e63e240606beba28ae7b2714c059323d96896d5/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e63e240606beba28ae7b2714c059323d96896d5/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=6e63e240606beba28ae7b2714c059323d96896d5", "patch": "@@ -1,5 +1,5 @@\n /* Built-in and inline functions for gcj\n-   Copyright (C) 2001, 2003, 2004, 2005, 2006\n+   Copyright (C) 2001, 2003, 2004, 2005, 2006, 2007\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -578,7 +578,7 @@ initialize_builtins (void)\n tree\n check_for_builtin (tree method, tree call)\n {\n-  if (! flag_emit_class_files && optimize && TREE_CODE (call) == CALL_EXPR)\n+  if (optimize && TREE_CODE (call) == CALL_EXPR)\n     {\n       int i;\n       tree method_arguments = TREE_OPERAND (call, 1);"}, {"sha": "a22a9368bb2813a6d3f92807e7f4e8f46a9b1b2c", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e63e240606beba28ae7b2714c059323d96896d5/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e63e240606beba28ae7b2714c059323d96896d5/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=6e63e240606beba28ae7b2714c059323d96896d5", "patch": "@@ -209,7 +209,7 @@ add_assume_compiled (const char *ident, int excludep)\n \n /* The default value returned by enable_assertions. */\n \n-#define DEFAULT_ENABLE_ASSERT (flag_emit_class_files || optimize == 0)\n+#define DEFAULT_ENABLE_ASSERT (optimize == 0)\n \n /* Enter IDENT (a class or package name) into the enable-assertions table.\n    VALUE is true to enable and false to disable. */\n@@ -1059,40 +1059,6 @@ build_class_ref (tree type)\n \t  const char *name;\n \t  tree decl_name;\n \t  char buffer[25];\n-\t  if (flag_emit_class_files)\n-\t    {\n-\t      const char *prim_class_name;\n-\t      tree prim_class;\n-\t      if (type == char_type_node)\n-\t\tprim_class_name = \"java.lang.Character\";\n-\t      else if (type == boolean_type_node)\n-\t\tprim_class_name = \"java.lang.Boolean\";\n-\t      else if (type == byte_type_node)\n-\t\tprim_class_name = \"java.lang.Byte\";\n-\t      else if (type == short_type_node)\n-\t\tprim_class_name = \"java.lang.Short\";\n-\t      else if (type == int_type_node)\n-\t\tprim_class_name = \"java.lang.Integer\";\n-\t      else if (type == long_type_node)\n-\t\tprim_class_name = \"java.lang.Long\";\n-\t      else if (type == float_type_node)\n-                prim_class_name = \"java.lang.Float\";\n-\t      else if (type == double_type_node)\n-                prim_class_name = \"java.lang.Double\";\n-\t      else if (type == void_type_node)\n-                prim_class_name = \"java.lang.Void\";\n-\t      else\n-\t\tgcc_unreachable ();\n-\n-\t      prim_class = lookup_class (get_identifier (prim_class_name));\n-\t      /* We wrap the class in a NOP_EXPR, because it is a\n-\t         type.  We can't hold it in the COMPONENT_REF itself,\n-\t         as that type must remain NULL.  */\n-\t      prim_class = build1 (NOP_EXPR, prim_class, NULL_TREE);\n-\t      \n-\t      return build3 (COMPONENT_REF, NULL_TREE,\n-\t\t\t     prim_class, TYPE_identifier_node, NULL_TREE);\n-\t    }\n \t  decl_name = TYPE_NAME (type);\n \t  if (TREE_CODE (decl_name) == TYPE_DECL)\n \t    decl_name = DECL_NAME (decl_name);"}, {"sha": "662ef833567c3a3f59e06c90974ea56cd2fc9398", "filename": "gcc/java/expr.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e63e240606beba28ae7b2714c059323d96896d5/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e63e240606beba28ae7b2714c059323d96896d5/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=6e63e240606beba28ae7b2714c059323d96896d5", "patch": "@@ -1059,13 +1059,9 @@ build_newarray (int atype_value, tree length)\n \t\t\t     host_integerp (length, 0) == INTEGER_CST\n \t\t\t     ? tree_low_cst (length, 0) : -1);\n \n-  /* If compiling to native, pass a reference to the primitive type class \n-     and save the runtime some work. However, the bytecode generator\n-     expects to find the type_code int here. */\n-  if (flag_emit_class_files)\n-    type_arg = build_int_cst (NULL_TREE, atype_value);\n-  else\n-    type_arg = build_class_ref (prim_type);\n+  /* Pass a reference to the primitive type class and save the runtime\n+     some work.  */\n+  type_arg = build_class_ref (prim_type);\n \n   return build3 (CALL_EXPR, promote_type (type),\n \t\t build_address_of (soft_newarray_node),"}, {"sha": "dbc85d564a753e874572373a3dec173393caeb85", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e63e240606beba28ae7b2714c059323d96896d5/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e63e240606beba28ae7b2714c059323d96896d5/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=6e63e240606beba28ae7b2714c059323d96896d5", "patch": "@@ -131,8 +131,6 @@ struct JCF;\n /* The virtual offset symbol table. Used by the runtime to fill out\n    the otable. */\n \n-extern int flag_emit_class_files;\n-\n extern int flag_filelist_file;\n \n /* When nonzero, permit the use of the assert keyword.  */\n@@ -144,10 +142,6 @@ extern int flag_assert;\n \n extern int flag_jni;\n \n-/* When nonzero, report the now deprecated empty statements.  */\n-\n-extern int flag_extraneous_semicolon;\n-\n /* When nonzero, always check for a non gcj generated classes archive.  */\n \n extern int flag_force_classes_archive_check;\n@@ -158,8 +152,6 @@ extern const char *resource_name;\n /* Turned to 1 if -Wall was encountered. See lang.c for their meanings.  */\n extern int flag_wall;\n extern int flag_redundant;\n-extern int flag_not_overriding;\n-extern int flag_static_local_jdk1_1;\n \n /* When nonzero, warn when source file is newer than matching class\n    file.  */\n@@ -1674,7 +1666,7 @@ extern tree *type_map;\n \n /* True when we can perform static class initialization optimization */\n #define STATIC_CLASS_INIT_OPT_P() \\\n-  (flag_optimize_sci && (optimize >= 2) && ! flag_emit_class_files)\n+  (flag_optimize_sci && (optimize >= 2))\n \n /* These are the possible values for the `state' field of the class\n    structure.  This must be kept in sync with libgcj.  */"}, {"sha": "947f76d618cac61449c193a7dfa2565f1ef21085", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e63e240606beba28ae7b2714c059323d96896d5/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e63e240606beba28ae7b2714c059323d96896d5/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=6e63e240606beba28ae7b2714c059323d96896d5", "patch": "@@ -912,7 +912,7 @@ handle_signature_attribute (int member_index, JCF *jcf,\n \n #define HANDLE_CONSTANTVALUE(INDEX) \\\n { tree constant;  int index = INDEX; \\\n-  if (! flag_emit_class_files && JPOOL_TAG (jcf, index) == CONSTANT_String) { \\\n+  if (JPOOL_TAG (jcf, index) == CONSTANT_String) { \\\n     tree name = get_name_constant (jcf, JPOOL_USHORT1 (jcf, index)); \\\n     constant = build_utf8_ref (name); \\\n   } \\\n@@ -1469,8 +1469,7 @@ load_class (tree class_or_name, int verbose)\n   \n   if (!class_loaded)\n     {\n-      if (flag_verify_invocations || ! flag_indirect_dispatch\n-\t  || flag_emit_class_files)\n+      if (flag_verify_invocations || ! flag_indirect_dispatch)\n \t{\n \t  if (verbose)\n \t    error (\"cannot find file for class %s\", IDENTIFIER_POINTER (saved));"}, {"sha": "431efe1fa0e1f469ac7bdba4f490a698a84c3c9a", "filename": "gcc/java/lang.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e63e240606beba28ae7b2714c059323d96896d5/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e63e240606beba28ae7b2714c059323d96896d5/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=6e63e240606beba28ae7b2714c059323d96896d5", "patch": "@@ -270,8 +270,6 @@ java_handle_option (size_t scode, const char *arg, int value)\n \n     case OPT_Wall:\n       flag_wall = value;\n-      flag_redundant = value;\n-      flag_extraneous_semicolon = value;\n       /* When -Wall given, enable -Wunused.  We do this because the C\n \t compiler does it, and people expect it.  */\n       set_Wunused (value);\n@@ -657,8 +655,6 @@ java_post_options (const char **pfilename)\n \t\t     target name here.  */\n \t\t  if ((dependency_tracking & DEPEND_TARGET_SET))\n \t\t    ; /* Nothing.  */\n-\t\t  else if (flag_emit_class_files)\n-\t\t    jcf_dependency_set_target (NULL);\n \t\t  else\n \t\t    {\n \t\t      strcpy (buf + (dot - filename), TARGET_OBJECT_SUFFIX);"}, {"sha": "395168fa706afa2fed2875ee2b792c0b8adb6784", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e63e240606beba28ae7b2714c059323d96896d5/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e63e240606beba28ae7b2714c059323d96896d5/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=6e63e240606beba28ae7b2714c059323d96896d5", "patch": "@@ -1,5 +1,5 @@\n /* Handle types for the GNU compiler for the Java(TM) language.\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2007\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -131,9 +131,7 @@ convert (tree type, tree expr)\n     {\n       if (type == char_type_node || type == promoted_char_type_node)\n \treturn fold_convert (type, expr);\n-      if ((really_constant_p (expr)\n-\t   || (! flag_unsafe_math_optimizations\n-\t       && ! flag_emit_class_files))\n+      if ((really_constant_p (expr) || ! flag_unsafe_math_optimizations)\n \t  && TREE_CODE (TREE_TYPE (expr)) == REAL_TYPE\n \t  && TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT)\n \treturn convert_ieee_real_to_integer (type, expr);"}]}