{"sha": "c3bf3e6eba663670b5cc64df7374607bfa474e71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNiZjNlNmViYTY2MzY3MGI1Y2M2NGRmNzM3NDYwN2JmYTQ3NGU3MQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-05-09T17:14:22Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-05-09T17:14:22Z"}, "message": "cpplib.c (cpp_init_internal_pragmas): Remove #pragma poison.\n\n\t* cpplib.c (cpp_init_internal_pragmas): Remove #pragma poison.\n\t* cppmacro.c (paste_all_tokens): Bad pastes are a hard error.\ndoc:\n\t* cpp.texi: Update for removal of obsolete features.\ntestsuite:\n\t* gcc.dg/cpp/poison.c: Update.\n\t* gcc.dg/cpp/20000625-2.c: Remove.\n\t* gcc.dg/cpp/direct2s.c: Remove final test.\n\nFrom-SVN: r53333", "tree": {"sha": "01f729c62216201f8c59feee2235f99cff88f964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01f729c62216201f8c59feee2235f99cff88f964"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3bf3e6eba663670b5cc64df7374607bfa474e71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3bf3e6eba663670b5cc64df7374607bfa474e71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3bf3e6eba663670b5cc64df7374607bfa474e71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3bf3e6eba663670b5cc64df7374607bfa474e71/comments", "author": null, "committer": null, "parents": [{"sha": "2cb008afaa3d246ca7fe8c72e89f0198a836e7a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cb008afaa3d246ca7fe8c72e89f0198a836e7a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cb008afaa3d246ca7fe8c72e89f0198a836e7a8"}], "stats": {"total": 107, "additions": 23, "deletions": 84}, "files": [{"sha": "2a492d2d1bf2d15dfd99c4627a0d855bcb4ca146", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bf3e6eba663670b5cc64df7374607bfa474e71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bf3e6eba663670b5cc64df7374607bfa474e71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3bf3e6eba663670b5cc64df7374607bfa474e71", "patch": "@@ -1,3 +1,10 @@\n+2002-05-09  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cpplib.c (cpp_init_internal_pragmas): Remove #pragma poison.\n+\t* cppmacro.c (paste_all_tokens): Bad pastes are a hard error.\n+doc:\n+\t* cpp.texi: Update for removal of obsolete features.\n+\n Thu May  9 07:46:18 2002  Jan Hubicka <jh@suse.cz>\n \t\t\t  Jeffrey A Law  (law@redhat.com)\n "}, {"sha": "2773ed93e4ea82b8474b5edf5c8173cbfaee5c42", "filename": "gcc/cpplib.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bf3e6eba663670b5cc64df7374607bfa474e71/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bf3e6eba663670b5cc64df7374607bfa474e71/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=c3bf3e6eba663670b5cc64df7374607bfa474e71", "patch": "@@ -1049,7 +1049,6 @@ _cpp_init_internal_pragmas (pfile)\n      cpp_reader *pfile;\n {\n   /* Pragmas in the global namespace.  */\n-  cpp_register_pragma (pfile, 0, \"poison\", do_pragma_poison);\n   cpp_register_pragma (pfile, 0, \"once\", do_pragma_once);\n \n   /* New GCC-specific pragmas should be put in the GCC namespace.  */\n@@ -1122,8 +1121,8 @@ do_pragma_once (pfile)\n   check_eol (pfile);\n }\n \n-/* Handle #pragma poison, to poison one or more identifiers so that\n-   the lexer produces a hard error for each subsequent usage.  */\n+/* Handle #pragma GCC poison, to poison one or more identifiers so\n+   that the lexer produces a hard error for each subsequent usage.  */\n static void\n do_pragma_poison (pfile)\n      cpp_reader *pfile;"}, {"sha": "b9859954656505f366851112800cfd5077769dbc", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bf3e6eba663670b5cc64df7374607bfa474e71/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bf3e6eba663670b5cc64df7374607bfa474e71/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=c3bf3e6eba663670b5cc64df7374607bfa474e71", "patch": "@@ -435,9 +435,9 @@ paste_all_tokens (pfile, lhs)\n \t{\n \t  _cpp_backup_tokens (pfile, 1);\n \n-\t  /* Mandatory warning for all apart from assembler.  */\n+\t  /* Mandatory error for all apart from assembler.  */\n \t  if (CPP_OPTION (pfile, lang) != CLK_ASM)\n-\t    cpp_error (pfile, DL_WARNING,\n+\t    cpp_error (pfile, DL_ERROR,\n \t \"pasting \\\"%s\\\" and \\\"%s\\\" does not give a valid preprocessing token\",\n \t\t       cpp_token_as_text (pfile, lhs),\n \t\t       cpp_token_as_text (pfile, rhs));"}, {"sha": "a7f3cd2e8dbd9a621f6fc63469c0df501d3068e1", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bf3e6eba663670b5cc64df7374607bfa474e71/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bf3e6eba663670b5cc64df7374607bfa474e71/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=c3bf3e6eba663670b5cc64df7374607bfa474e71", "patch": "@@ -176,7 +176,6 @@ Obsolete Features\n \n * Assertions::\n * Obsolete once-only headers::\n-* Miscellaneous obsolete features::\n \n @end detailmenu\n @end menu\n@@ -3625,7 +3624,6 @@ In some cases, we plan to remove the feature in a future version of GCC@.\n @menu\n * Assertions::\n * Obsolete once-only headers::\n-* Miscellaneous obsolete features::\n @end menu\n \n @node Assertions\n@@ -3748,41 +3746,6 @@ matter what.\n but it is not recognized by all preprocessors, so you cannot rely on it\n in a portable program.\n \n-@node Miscellaneous obsolete features\n-@subsection Miscellaneous obsolete features\n-\n-Here are a few more obsolete features.\n-\n-@itemize @bullet\n-@cindex invalid token paste\n-@item Attempting to paste two tokens which together do not form a valid\n-preprocessing token.\n-\n-The preprocessor currently warns about this and outputs the two tokens\n-adjacently, which is probably the behavior the programmer intends.  It\n-may not work in future, though.\n-\n-Most of the time, when you get this warning, you will find that @samp{##}\n-is being used superstitiously, to guard against whitespace appearing\n-between two tokens.  It is almost always safe to delete the @samp{##}.\n-\n-@cindex pragma poison\n-@item @code{#pragma poison}\n-\n-This is the same as @code{#pragma GCC poison}.  The version without the\n-@code{GCC} prefix is deprecated.  @xref{Pragmas}.\n-\n-@cindex multi-line string constants\n-@item Multi-line string constants\n-\n-Older versions of GCC allowed string constants to extend across\n-multiple logical lines of the source file.  This ill-considered\n-extension has now been removed.  Instead, make use of ISO C\n-concatenation of adjacent string literals, or use @samp{\\n} followed\n-by a backslash-newline.\n-\n-@end itemize\n-\n @node Differences from previous versions\n @section Differences from previous versions\n @cindex differences from previous versions"}, {"sha": "363389a8a604bdecb03e02a8808d6299667d21c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bf3e6eba663670b5cc64df7374607bfa474e71/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bf3e6eba663670b5cc64df7374607bfa474e71/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3bf3e6eba663670b5cc64df7374607bfa474e71", "patch": "@@ -1,3 +1,9 @@\n+2002-05-09  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* gcc.dg/cpp/poison.c: Update.\n+\t* gcc.dg/cpp/20000625-2.c: Remove.\n+\t* gcc.dg/cpp/direct2s.c: Remove final test.\n+\n 2002-05-08  Tom Rix  <trix@redhat.com>\n \n \t* gcc.c-torture/execute/20020508-1.c: New test."}, {"sha": "72e2604faff3d8f9539c0a8bfe255717aab0aed9", "filename": "gcc/testsuite/gcc.dg/cpp/20000625-2.c", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb008afaa3d246ca7fe8c72e89f0198a836e7a8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000625-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb008afaa3d246ca7fe8c72e89f0198a836e7a8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000625-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000625-2.c?ref=2cb008afaa3d246ca7fe8c72e89f0198a836e7a8", "patch": "@@ -1,30 +0,0 @@\n-/* More paste corner cases from glibc.  */\n-/* { dg-do run } */\n-\n-#include <stdlib.h>\n-#include <string.h>\n-\n-#define symbol_version(name, version) name##@##version\n-#define str(x) xstr(x)\n-#define xstr(x) #x\n-\n-/* This testcase is bogus, as it testing undefined behaviour.  We can\n-   get the behaviour GLIBC desires by removing the space before\n-   GCLIB_2.0 in this line.  */\n-const char a[] = str(symbol_version(getrlimit,GLIBC_2.0));\n-/* { dg-warning \"valid preprocessing token\" \"\" { target *-*-* } 14 } */\n-const char b[] = str(getrlimit@GLIBC_2.0);\n-const char c[] = \"getrlimit@GLIBC_2.0\";\n-\n-int\n-main(void)\n-{\n-  if(strcmp(a, b))\n-    abort();\n-  if(strcmp(b, c))\n-    abort();\n-  if(strcmp(c, a))\n-    abort();\n-\n-  return 0;\n-}"}, {"sha": "4d970a63722b17479d59195eae9d86573dcf232e", "filename": "gcc/testsuite/gcc.dg/cpp/direct2s.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bf3e6eba663670b5cc64df7374607bfa474e71/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2s.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bf3e6eba663670b5cc64df7374607bfa474e71/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2s.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2s.c?ref=c3bf3e6eba663670b5cc64df7374607bfa474e71", "patch": "@@ -31,9 +31,3 @@ void f ()\n   int i = X;    /* { dg-error \"undeclared|for each\" \"no macro X\" } */\n   int j = Y;    /* { dg-error \"undeclared|for each\" \"no macro Y\" } */\n }\n-\n-#define slashstar /##*\n-#define starslash *##/\n-\n-slashstar starslash /* { dg-error \"parse error\" \"not a comment\" } */\n-/* { dg-warning \"does not give\" \"paste warning(s)\" { target *-*-* } 38 } */"}, {"sha": "d667183de316f443096123acaa23f5b456edccfb", "filename": "gcc/testsuite/gcc.dg/cpp/poison.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3bf3e6eba663670b5cc64df7374607bfa474e71/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpoison.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3bf3e6eba663670b5cc64df7374607bfa474e71/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpoison.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpoison.c?ref=c3bf3e6eba663670b5cc64df7374607bfa474e71", "patch": "@@ -1,17 +1,17 @@\n /* { dg-do preprocess }\n    { dg-options \"-fno-show-column\" } */\n \n-#pragma poison foo\n+#pragma GCC poison foo\n foo\t\t\t/* { dg-error \"foo\" \"use of foo\" } */\n-#pragma poison foo2 foo3\n+#pragma GCC poison foo2 foo3\n foo2\t\t\t/* { dg-error \"foo2\" \"use of foo2\" } */\n foo3\t\t\t/* { dg-error \"foo3\" \"use of foo3\" } */\n-#pragma   poison\tfoo4 \tfoo5\n+#pragma GCC poison\tfoo4 \tfoo5\n foo4\t\t\t/* { dg-error \"foo4\" \"use of foo4\" } */\n foo5\t\t\t/* { dg-error \"foo5\" \"use of foo5\" } */\n-#pragma poison +++\t/* { dg-error \"invalid\" \"poison non-identifier\" } */\n+#pragma GCC poison +++\t/* { dg-error \"invalid\" \"poison non-identifier\" } */\n #define foo6 123\n-#pragma poison foo6\t/* { dg-warning \"foo6\" \"poison defined macro\" } */\n+#pragma GCC poison foo6\t/* { dg-warning \"foo6\" \"poison defined macro\" } */\n #define foo6 345\t/* { dg-error \"foo6\" \"def of foo6\" } */\n #define foo6 456\t/* { dg-error \"foo6\" \"redef of foo6\" } */\n #ifdef foo6\t\t/* { dg-error \"foo6\" \"#ifdef foo6\" } */\n@@ -22,4 +22,4 @@ foo5\t\t\t/* { dg-error \"foo5\" \"use of foo5\" } */\n #else\n foo6\t\t\t/* { dg-error \"foo6\" \"use of foo6\" } */\n #endif\n-#pragma poison\n+#pragma GCC poison"}]}