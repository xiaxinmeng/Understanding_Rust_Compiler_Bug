{"sha": "6f9e35784d327805a4210efd91a9028c6ad21ee4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY5ZTM1Nzg0ZDMyNzgwNWE0MjEwZWZkOTFhOTAyOGM2YWQyMWVlNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-11-23T23:10:18Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-11-23T23:10:18Z"}, "message": "emit-rtl.c, rtl.h (subreg_hard_regno): Remove.\n\n        * emit-rtl.c, rtl.h (subreg_hard_regno): Remove.\n        * caller-save.c (mark_set_regs): Use subreg_regno instead.\n        * final.c (alter_subreg): Likewise.\n        * local-alloc.c (reg_is_born): Likewise.\n\nFrom-SVN: r91115", "tree": {"sha": "0eb629e5dc927e8a4d0db60b6b3e5ed4d5772763", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0eb629e5dc927e8a4d0db60b6b3e5ed4d5772763"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f9e35784d327805a4210efd91a9028c6ad21ee4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f9e35784d327805a4210efd91a9028c6ad21ee4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f9e35784d327805a4210efd91a9028c6ad21ee4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f9e35784d327805a4210efd91a9028c6ad21ee4/comments", "author": null, "committer": null, "parents": [{"sha": "4488a8b8769d54a19634d22c42bd9ec111a89be5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4488a8b8769d54a19634d22c42bd9ec111a89be5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4488a8b8769d54a19634d22c42bd9ec111a89be5"}], "stats": {"total": 44, "additions": 10, "deletions": 34}, "files": [{"sha": "d1e06e7d82236ce9fd34e02805748f7a7f0196e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9e35784d327805a4210efd91a9028c6ad21ee4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9e35784d327805a4210efd91a9028c6ad21ee4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f9e35784d327805a4210efd91a9028c6ad21ee4", "patch": "@@ -1,3 +1,10 @@\n+2004-11-23  Richard Henderson  <rth@redhat.com>\n+\n+\t* emit-rtl.c, rtl.h (subreg_hard_regno): Remove.\n+\t* caller-save.c (mark_set_regs): Use subreg_regno instead.\n+\t* final.c (alter_subreg): Likewise.\n+\t* local-alloc.c (reg_is_born): Likewise.\n+\n 2004-11-23  Richard Henderson  <rth@redhat.com>\n \n \t* simplify-rtx.c (simplify_subreg): Use subreg_regno_offset directly"}, {"sha": "26be6176fb6a35432b1924cb88859510c51e1c9b", "filename": "gcc/caller-save.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9e35784d327805a4210efd91a9028c6ad21ee4/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9e35784d327805a4210efd91a9028c6ad21ee4/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=6f9e35784d327805a4210efd91a9028c6ad21ee4", "patch": "@@ -500,8 +500,7 @@ mark_set_regs (rtx reg, rtx setter ATTRIBUTE_UNUSED,\n       rtx inner = SUBREG_REG (reg);\n       if (!REG_P (inner) || REGNO (inner) >= FIRST_PSEUDO_REGISTER)\n \treturn;\n-\n-      regno = subreg_hard_regno (reg, 1);\n+      regno = subreg_regno (reg);\n     }\n   else if (REG_P (reg)\n \t   && REGNO (reg) < FIRST_PSEUDO_REGISTER)"}, {"sha": "c24ba25586516076787ca788594ab55404149ce6", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9e35784d327805a4210efd91a9028c6ad21ee4/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9e35784d327805a4210efd91a9028c6ad21ee4/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=6f9e35784d327805a4210efd91a9028c6ad21ee4", "patch": "@@ -1018,34 +1018,6 @@ maybe_set_first_label_num (rtx x)\n     first_label_num = CODE_LABEL_NUMBER (x);\n }\n \f\n-/* Return the final regno of X, which is a SUBREG of a hard\n-   register.  */\n-int\n-subreg_hard_regno (rtx x, int check_mode)\n-{\n-  enum machine_mode mode = GET_MODE (x);\n-  unsigned int byte_offset, base_regno, final_regno;\n-  rtx reg = SUBREG_REG (x);\n-\n-  /* This is where we attempt to catch illegal subregs\n-     created by the compiler.  */\n-  gcc_assert (GET_CODE (x) == SUBREG && REG_P (reg));\n-  base_regno = REGNO (reg);\n-  gcc_assert (base_regno < FIRST_PSEUDO_REGISTER);\n-  gcc_assert (!check_mode || HARD_REGNO_MODE_OK (base_regno, GET_MODE (reg)));\n-#ifdef ENABLE_CHECKING\n-  gcc_assert (subreg_offset_representable_p (REGNO (reg), GET_MODE (reg),\n-\t\t\t\t\t     SUBREG_BYTE (x), mode));\n-#endif\n-  /* Catch non-congruent offsets too.  */\n-  byte_offset = SUBREG_BYTE (x);\n-  gcc_assert (!(byte_offset % GET_MODE_SIZE (mode)));\n-\n-  final_regno = subreg_regno (x);\n-\n-  return final_regno;\n-}\n-\n /* Return a value representing some low-order bits of X, where the number\n    of low-order bits is given by MODE.  Note that no conversion is done\n    between floating-point and fixed-point values, rather, the bit"}, {"sha": "03806be2fa8ae0e6d045f3a588c6c768e862fe00", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9e35784d327805a4210efd91a9028c6ad21ee4/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9e35784d327805a4210efd91a9028c6ad21ee4/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=6f9e35784d327805a4210efd91a9028c6ad21ee4", "patch": "@@ -2636,8 +2636,7 @@ alter_subreg (rtx *xp)\n       else\n \t{\n \t  /* Simplify_subreg can't handle some REG cases, but we have to.  */\n-\t  unsigned int regno = subreg_hard_regno (x, 1);\n-\t  \n+\t  unsigned int regno = subreg_regno (x);\n \t  gcc_assert (REG_P (y));\n \t  *xp = gen_rtx_REG_offset (y, GET_MODE (x), regno, SUBREG_BYTE (x));\n \t}"}, {"sha": "5d33f566b4f805ffd14054fb69f6d70ae692aa28", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9e35784d327805a4210efd91a9028c6ad21ee4/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9e35784d327805a4210efd91a9028c6ad21ee4/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=6f9e35784d327805a4210efd91a9028c6ad21ee4", "patch": "@@ -2011,7 +2011,7 @@ reg_is_born (rtx reg, int birth)\n     {\n       regno = REGNO (SUBREG_REG (reg));\n       if (regno < FIRST_PSEUDO_REGISTER)\n-\tregno = subreg_hard_regno (reg, 1);\n+\tregno = subreg_regno (reg);\n     }\n   else\n     regno = REGNO (reg);"}, {"sha": "978c92dd7e5420a2d9eb079dd1b441179ef16d4b", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9e35784d327805a4210efd91a9028c6ad21ee4/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9e35784d327805a4210efd91a9028c6ad21ee4/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=6f9e35784d327805a4210efd91a9028c6ad21ee4", "patch": "@@ -1375,7 +1375,6 @@ extern rtvec gen_rtvec_v (int, rtx *);\n extern rtx gen_reg_rtx (enum machine_mode);\n extern rtx gen_rtx_REG_offset (rtx, enum machine_mode, unsigned int, int);\n extern rtx gen_label_rtx (void);\n-extern int subreg_hard_regno (rtx, int);\n extern rtx gen_lowpart_common (enum machine_mode, rtx);\n \n /* In cse.c */"}]}