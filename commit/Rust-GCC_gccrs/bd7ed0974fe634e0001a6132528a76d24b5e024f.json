{"sha": "bd7ed0974fe634e0001a6132528a76d24b5e024f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ3ZWQwOTc0ZmU2MzRlMDAwMWE2MTMyNTI4YTc2ZDI0YjVlMDI0Zg==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2020-11-06T22:49:37Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2020-11-06T23:09:55Z"}, "message": "rs6000: Use the correct minimized testcase\n\nUse the correct minimized test case source rather than the large test\nsource.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/pr64505.c: Run everywhere.  Use correct minimized\n\ttest case.", "tree": {"sha": "82f2ef7d2b85aed2d87c847c838082dd05282354", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82f2ef7d2b85aed2d87c847c838082dd05282354"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd7ed0974fe634e0001a6132528a76d24b5e024f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd7ed0974fe634e0001a6132528a76d24b5e024f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd7ed0974fe634e0001a6132528a76d24b5e024f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd7ed0974fe634e0001a6132528a76d24b5e024f/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a37b5bcf15a682f22ac10d8b7069aa8d115caaef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a37b5bcf15a682f22ac10d8b7069aa8d115caaef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a37b5bcf15a682f22ac10d8b7069aa8d115caaef"}], "stats": {"total": 265, "additions": 43, "deletions": 222}, "files": [{"sha": "42b961f3df548257ee31b2c36b653807c4bd1543", "filename": "gcc/testsuite/gcc.target/powerpc/pr64505.c", "status": "modified", "additions": 43, "deletions": 222, "changes": 265, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7ed0974fe634e0001a6132528a76d24b5e024f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr64505.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7ed0974fe634e0001a6132528a76d24b5e024f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr64505.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr64505.c?ref=bd7ed0974fe634e0001a6132528a76d24b5e024f", "patch": "@@ -1,231 +1,52 @@\n-/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */\n+/* { dg-do compile } */\n /* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n-/* { dg-options \"-O2 -mpowerpc64\" } */\n+/* { dg-options \"-w -O2 -mpowerpc64\" } */\n \n /*\n- * (below is inlined and simplified from previously included headers)\n+ * (below is minimized test case)\n  */\n \n-struct fltcom_st {\n-    short fltbuf[950];\n-} fltcom_  __attribute__((common))  ;\n-#define CM_PLIBOR (*(((double *)&fltcom_ + 1)))\n-#define CM_QMRG (*(((double *)&fltcom_ + 2)))\n+extern double pow(double x, double y);\n+extern long func ();\n+short global0, global1;\n+static int i0, i1, i2, i3, i4, i5;\n+double dbl, *array0, *array1;\n \n-struct fltcom2_st {\n-    short fltbuf2[56];\n-} fltcom2_  __attribute__((common))  ;\n-#define CM_FLPRV ((short *)&fltcom2_ + 17)\n-#define CM_FLNXT ((short *)&fltcom2_ + 20)\n-#define CM_FLCPN (*(((double *)&fltcom2_)))\n-#define CM_FLCNT (*(((short *)&fltcom2_ + 12)))\n-\n-struct aidatcm_st {\n-    double cm_aid, cm_ext, cm_basis;\n-    short cm_aiday, cm_exday, cm_dperd, cm_aiexf, cm_aidex, cm_aiok,\n-            cm_aigdo, cm_aildo, cm_prev[3], cm_next[3], cm_aid_pad[2];\n-    double cm_rvgfact, cm_ai1st, cm_ai2nd;\n-    int cm_aieurok;\n-} aidatcm_  __attribute__((common))  ;\n-#define CM_EXDAY aidatcm_.cm_exday\n-#define CM_BASIS aidatcm_.cm_basis\n-#define CM_PREV aidatcm_.cm_prev\n-\n-struct cshfcm_st {\n-    short bufff[10862];\n-} cshfcm_  __attribute__((common))  ;\n-#define CM_FNUM (*(((short *)&cshfcm_ + 9038)))\n-#define CM_FIFLX ((double *)&cshfcm_ + 1)\n-#define CM_FEXTX ((double *)&cshfcm_ + 1201)\n-#define CM_FSHDT ((short *)&cshfcm_ + 7230)\n-\n-struct calctsdb_st {\n-    short calctsdbbuff[115];\n-} calctsdb_  __attribute__((common))  ;\n-#define CM_CTUP_GOOD_TO_GO (*(((short *)&calctsdb_ + 16)))\n-#define CM_PAYMENT_FREQUENCY (*(((short *)&calctsdb_ + 61)))\n-#define CM_DISCOUNTING_DAYTYP (*(((short *)&calctsdb_ + 59)))\n-\n-struct cf600cm_st {\n-    short bufcf[14404];\n-} cf600cm_  __attribute__((common)) ;\n-#define CM_FLT_RFIXRATES ((double *)&cf600cm_ + 600)\n-\n-typedef struct { int id; int type; const char *name; } bregdb_bitinfo_t;\n-\n-int\n-bregdb_eval_bbitcxt_bool_rv(const bregdb_bitinfo_t * const bbit,\n-                            const int bbit_default,\n-                            const void * const bregucxt);\n-\n-static const bregdb_bitinfo_t bbit_calc_dr_d33 =\n-  { 160667, 5, \"bbit_calc_dr_d33\" };\n-#define bbit_calc_dr_d33__value() \\\n-  bregdb_eval_bbitcxt_bool_rv(&bbit_calc_dr_d33, 0, 0)\n-static const bregdb_bitinfo_t bbit_calc_sx_b24 =\n-  { 158854, 5, \"bbit_calc_sx_b24\" };\n-#define bbit_calc_sx_b24__value() \\\n-  bregdb_eval_bbitcxt_bool_rv(&bbit_calc_sx_b24, 0, 0)\n-static const bregdb_bitinfo_t bbit_calc_dr_d36 =\n-  { 161244, 5, \"bbit_calc_dr_d36\" };\n-#define bbit_calc_dr_d36__value() \\\n-  bregdb_eval_bbitcxt_bool_rv(&bbit_calc_dr_d36, 0, 0)\n-static const bregdb_bitinfo_t bbit_calc_dr_d37 =\n-  { 161315, 5, \"bbit_calc_dr_d37\" };\n-#define bbit_calc_dr_d37__value() \\\n-  bregdb_eval_bbitcxt_bool_rv(&bbit_calc_dr_d37, 0, 0)\n-static const bregdb_bitinfo_t bbit_calc_dr_d47 =\n-  { 163259, 5, \"bbit_calc_dr_d47\" };\n-#define bbit_calc_dr_d47__value() \\\n-  bregdb_eval_bbitcxt_bool_rv(&bbit_calc_dr_d47, 0, 0)\n-static const bregdb_bitinfo_t bbit_calc_dr_d46 =\n-  { 163239, 5, \"bbit_calc_dr_d46\" };\n-#define bbit_calc_dr_d46__value() \\\n-  bregdb_eval_bbitcxt_bool_rv(&bbit_calc_dr_d46, 0, 0)\n-static const bregdb_bitinfo_t bbit_calc_dr_d62 =\n-  { 166603, 5, \"bbit_calc_dr_d62\" };\n-#define bbit_calc_dr_d62__value() \\\n-  bregdb_eval_bbitcxt_bool_rv(&bbit_calc_dr_d62, 0, 0)\n-\n-\n-\n-int dtyp_is_actact_(short *daytyp);\n-double rnd_trunc_numb(double in, short num_digits, short rnd_or_trunc);\n-void datetrn_(const short* dt, short* dt2);\n-short difday_(short* daytyp_in, short* srtdti, short* enddti, short* ercode);\n-\n-\n-double pow(double x, double y);\n-\n-\n-/*\n- * (above is inlined and simplified from previously included headers)\n- */\n-\n-\n-void calc_1566(\n-  short  sCalcType,\n-  short  sDayType,\n-  short  sFreq,\n-  short  asSettleDt[3],\n-  short  asMtyDt[3],\n-  short  asIssueDt[3],\n-  short  asFCpnDt[3],\n-  double dCpn,\n-  short  *psNoPer,\n-  double *pdExt,\n-  double *pdAI,\n-  double *pdAI2,\n-  double *pdFCpn,\n-  short  *psRcode)\n+void\n+pr64505 (short *arg0, double *arg1)\n {\n-\n-    short ercode = 0;\n-    int isactact;\n-    short days_to_next_cpn = 0;\n-    const short discDaytype = CM_DISCOUNTING_DAYTYP;\n-\n-    if(bbit_calc_sx_b24__value())\n-        isactact = (dtyp_is_actact_(&sDayType) != 0);\n-    else\n-        isactact = (sDayType == 1 || sDayType == 10);\n-\n-    short days_in_current_period = difday_(&sDayType,CM_FLPRV,CM_FLNXT,&ercode);\n-    const short sfreq1 = (CM_CTUP_GOOD_TO_GO == 1 && CM_PAYMENT_FREQUENCY == 1);\n-\n-    for (int j = 0; j < CM_FNUM; j++) {\n-\n-        if(j == 0) {\n-            days_to_next_cpn = difday_(&sDayType,asSettleDt,CM_FLNXT,&ercode);\n-\n-            if(isactact) {\n-                CM_FIFLX[j] = CM_FLCPN / sFreq;\n-                CM_FEXTX[j] = (double)days_to_next_cpn / (double)days_in_current_period;\n-            }\n-            else {\n-                CM_FIFLX[j] = CM_FLCPN * days_in_current_period;\n-                CM_FEXTX[j] = (double)days_to_next_cpn / (double)(1/sfreq1);\n-            }\n-\n-            if(CM_FNUM == 1) {\n-                CM_FEXTX[j] = (double)days_to_next_cpn / ((double)1/sfreq1);\n-            }\n-        }\n-        else {\n-\n-            short days_from_settle, days_in_period;\n-\n-            if(bbit_calc_dr_d46__value()){\n-             days_from_settle = difday_(&sDayType,asSettleDt,\n-                                             &CM_FSHDT[j*3],&ercode);\n-             days_in_period =  difday_(&sDayType,&CM_FSHDT[(j-1)*3],\n-                                            &CM_FSHDT[j*3],&ercode);\n-            }\n-\n-            double cpn_rate = CM_PLIBOR;\n-\n-            if(bbit_calc_dr_d62__value()) {\n-              if(j < CM_FLCNT && CM_FLT_RFIXRATES[j] != 0) cpn_rate = CM_FLT_RFIXRATES[j];\n-            }\n-            else {\n-              if(j < CM_FLCNT ) cpn_rate = CM_FLT_RFIXRATES[j];\n-            }\n-\n-            if(bbit_calc_dr_d37__value()&& j >= CM_FLCNT && sCalcType == 1570) {\n-                cpn_rate = CM_PLIBOR + CM_QMRG;\n-\n-                if(bbit_calc_dr_d36__value()){\n-                double projected_rate = pow((1 + CM_PLIBOR/100.0),\n-                                            (days_in_period)) - 1;\n-\n-                projected_rate = projected_rate + CM_QMRG/100.0 * days_in_period;\n-                cpn_rate = 100 * projected_rate * (1/days_in_period);\n-                }\n-            }\n-\n-\n-            if(isactact) {\n-                CM_FIFLX[j] = cpn_rate / sFreq;\n-                CM_FEXTX[j] = CM_FEXTX[j-1] + 1;\n-\n-                if(bbit_calc_dr_d46__value() && discDaytype != 0) {\n-                    CM_FEXTX[j] = (double)days_from_settle / (double)(1/sfreq1);\n-                }\n-            }\n-            else {\n-                if(!bbit_calc_dr_d46__value()){\n-                days_from_settle = difday_(&sDayType,asSettleDt,\n-                                               &CM_FSHDT[j*3],&ercode);\n-                days_in_period =  difday_(&sDayType,&CM_FSHDT[(j-1)*3],\n-                                               &CM_FSHDT[j*3],&ercode);\n-\n-                }\n-\n-                CM_FIFLX[j] = cpn_rate * days_in_period;\n-                CM_FEXTX[j] = (double)days_from_settle / (double)(1/sfreq1);\n-            }\n-\n-        }\n-\n-        if(bbit_calc_dr_d33__value() && CM_CTUP_GOOD_TO_GO != 0) {\n-            CM_FIFLX[j] = rnd_trunc_numb (CM_FIFLX[j], 0, 0);\n-        }\n-\n+  int error = 0;\n+  short num = func (&global1 + 15, &error);\n+  for (int j = 0; j < array0[0]; j++)\n+    {\n+      if (j == 0)\n+\t{\n+\t  func (arg0, &global1 + 20, &error);\n+\t  array0[0] = num;\n+\t}\n+      else\n+\t{\n+\t  double cr = (&dbl)[1];\n+\t  if (func (&i4))\n+\t    func (0, &(&array0)[j]);\n+\t  if (func (&i5))\n+\t    {\n+\t      if ((&global1)[12])\n+\t\tcr = array1[j];\n+\t    }\n+\t  if (func (&i2)\n+\t      && (&global1)[12])\n+\t    {\n+\t      if (func (&i1))\n+\t        pow ((&dbl)[1], 2);\n+\t    }\n+\t    array0[j] = cr;\n+\t}\n+      if (func (&i0) && global0)\n+        func (((short *) array0 + 1)[j]);\n     }\n-\n-\n-    short accrued_days = difday_(&sDayType,CM_FLPRV,asSettleDt,&ercode);\n-\n-    if(!bbit_calc_dr_d47__value()) {\n-    if(isactact) {\n-        *pdAI = (CM_FLCPN / sFreq)* accrued_days / ((double)days_in_current_period);\n-    }\n-    else{\n-        *pdAI = (CM_FLCPN / sFreq)* accrued_days / ((double)1/sFreq);\n-    }\n-    }\n-\n-    CM_EXDAY = days_to_next_cpn;\n-    CM_BASIS = days_in_current_period;\n-    datetrn_(CM_FLPRV,CM_PREV);\n+  short ad = func (&global1 + 15, 0);\n+  if (func (&i3) && func ())\n+    *arg1 = *((double *) &global1) * ad;\n+  func (&global1 + 15);\n }"}]}