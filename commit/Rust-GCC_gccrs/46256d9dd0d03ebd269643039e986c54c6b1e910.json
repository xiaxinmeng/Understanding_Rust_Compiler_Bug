{"sha": "46256d9dd0d03ebd269643039e986c54c6b1e910", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYyNTZkOWRkMGQwM2ViZDI2OTY0MzAzOWU5ODZjNTRjNmIxZTkxMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-10T09:57:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-10T09:57:37Z"}, "message": "[multiple changes]\n\n2010-09-10  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Add section on intent of style checking options.\n\n2010-09-10  Arnaud Charlet  <charlet@adacore.com>\n\n\t* xref_lib.adb (Get_Full_Type): Fix handling of 'a' char.\n\n2010-09-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb: Improve error message on derivation from class-wide type\n\n2010-09-10  Steve Baird  <baird@adacore.com>\n\n\t* gnat1drv.adb (Adjust_Global_Switches): Enable Expression_With_Actions\n\tgeneration when Generate_SCIL is True.\n\n2010-09-10  Geert Bosch  <bosch@adacore.com>\n\n\t* gnatlink.adb (Check_ Existing_Executable): New procedure for checking\n\tvalidity of executable name and removing any existing executable\n\t(Gnatlink): Call Check_Existing_Executable.\n\nFrom-SVN: r164154", "tree": {"sha": "c4b0656553329eed6d33379035b426abfcd5d89c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4b0656553329eed6d33379035b426abfcd5d89c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46256d9dd0d03ebd269643039e986c54c6b1e910", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46256d9dd0d03ebd269643039e986c54c6b1e910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46256d9dd0d03ebd269643039e986c54c6b1e910", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46256d9dd0d03ebd269643039e986c54c6b1e910/comments", "author": null, "committer": null, "parents": [{"sha": "e976a775e259c5a85907a4b4e9a2b707c7ce9cca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e976a775e259c5a85907a4b4e9a2b707c7ce9cca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e976a775e259c5a85907a4b4e9a2b707c7ce9cca"}], "stats": {"total": 98, "additions": 80, "deletions": 18}, "files": [{"sha": "13d20301ba606c73d35c9cc310cf5fc92c3dd6dc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46256d9dd0d03ebd269643039e986c54c6b1e910/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46256d9dd0d03ebd269643039e986c54c6b1e910/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=46256d9dd0d03ebd269643039e986c54c6b1e910", "patch": "@@ -1,3 +1,26 @@\n+2010-09-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Add section on intent of style checking options.\n+\n+2010-09-10  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* xref_lib.adb (Get_Full_Type): Fix handling of 'a' char.\n+\n+2010-09-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb: Improve error message on derivation from class-wide type\n+\n+2010-09-10  Steve Baird  <baird@adacore.com>\n+\n+\t* gnat1drv.adb (Adjust_Global_Switches): Enable Expression_With_Actions\n+\tgeneration when Generate_SCIL is True.\n+\n+2010-09-10  Geert Bosch  <bosch@adacore.com>\n+\n+\t* gnatlink.adb (Check_ Existing_Executable): New procedure for checking\n+\tvalidity of executable name and removing any existing executable\n+\t(Gnatlink): Call Check_Existing_Executable.\n+\n 2010-09-10  Arnaud Charlet  <charlet@adacore.com>\n \n \t* s-tporft.adb, s-taskin.ads (Register_Foreign_Thread): Move"}, {"sha": "7a72e19040541fe0d6a1ddba37427f5191350de8", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46256d9dd0d03ebd269643039e986c54c6b1e910/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46256d9dd0d03ebd269643039e986c54c6b1e910/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=46256d9dd0d03ebd269643039e986c54c6b1e910", "patch": "@@ -355,11 +355,6 @@ procedure Gnat1drv is\n       elsif Debug_Flag_Dot_YY then\n          Use_Expression_With_Actions := False;\n \n-      --  If no debug flags, usage off for SCIL\n-\n-      elsif Generate_SCIL then\n-         Use_Expression_With_Actions := False;\n-\n       --  Otherwise this feature is implemented, so we allow its use\n \n       else"}, {"sha": "2f58df180c128a25f463507a2e8593e560b5a583", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46256d9dd0d03ebd269643039e986c54c6b1e910/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46256d9dd0d03ebd269643039e986c54c6b1e910/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=46256d9dd0d03ebd269643039e986c54c6b1e910", "patch": "@@ -6144,6 +6144,17 @@ specified style check, an appropriate message is given, preceded by\n the character sequence ``(style)''. This message does not prevent\n successful compilation (unless the @option{-gnatwe} switch is used).\n \n+Note that this is by no means intended to be a general facility for\n+checking arbitrary coding standards. It is simply an embedding of the\n+style rules we have chosen for the GNAT sources. If you are starting\n+a project which does not have established style standards, you may\n+find it useful to adopt the entire set of GNAT coding standards, or\n+some subset of them. If you already have an established set of coding\n+standards, then it may be that selected style checking options do\n+indeed correspond to choices you have made, but for general checking\n+of an existing set of coding rules, you should look to the gnatcheck\n+tool, which is designed for that purpose.\n+\n @ifset vms\n @code{(option,option,@dots{})} is a sequence of keywords\n @end ifset"}, {"sha": "3cf65eb2d47138f6c64ba535e0a051d5ca2f69ac", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46256d9dd0d03ebd269643039e986c54c6b1e910/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46256d9dd0d03ebd269643039e986c54c6b1e910/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=46256d9dd0d03ebd269643039e986c54c6b1e910", "patch": "@@ -199,6 +199,13 @@ procedure Gnatlink is\n    function Base_Name (File_Name : String) return String;\n    --  Return just the file name part without the extension (if present)\n \n+   procedure Check_Existing_Executable (File_Name : String);\n+   --  Delete any existing executable to avoid accidentally updating\n+   --  the target of a symbolic link, but produce a Fatail_Error if\n+   --  File_Name matches any of the source file names. This avoids\n+   --  overwriting of extensionless source files by accident on systems\n+   --  where executables do not have extensions.\n+\n    procedure Delete (Name : String);\n    --  Wrapper to unlink as status is ignored by this application\n \n@@ -258,6 +265,31 @@ procedure Gnatlink is\n       return File_Name (Findex1 .. Findex2 - 1);\n    end Base_Name;\n \n+   -------------------------------\n+   -- Check_Existing_Executable --\n+   -------------------------------\n+\n+   procedure Check_Existing_Executable (File_Name : String) is\n+      Ename : String := File_Name;\n+      Efile : File_Name_Type;\n+      Sfile : File_Name_Type;\n+   begin\n+      Canonical_Case_File_Name (Ename);\n+      Name_Len := 0;\n+      Add_Str_To_Name_Buffer (Ename);\n+      Efile := Name_Find;\n+\n+      for J in Units.Table'First .. Units.Last loop\n+         Sfile := Units.Table (J).Sfile;\n+         if Sfile = Efile then\n+            Exit_With_Error (\"executable name \"\"\" & File_Name & \"\"\" matches \"\n+              & \"source file name \"\"\" & Get_Name_String (Sfile) & \"\"\"\");\n+         end if;\n+      end loop;\n+\n+      Delete (File_Name);\n+   end Check_Existing_Executable;\n+\n    ------------\n    -- Delete --\n    ------------\n@@ -1759,16 +1791,7 @@ begin\n         new String'(Output_File_Name.all);\n    end if;\n \n-   --  Delete existing executable, in case it is a symbolic link, to avoid\n-   --  modifying the target of the symbolic link.\n-\n-   declare\n-      Dummy : Boolean;\n-      pragma Unreferenced (Dummy);\n-\n-   begin\n-      Delete_File (Output_File_Name.all, Dummy);\n-   end;\n+   Check_Existing_Executable (Output_File_Name.all);\n \n    --  Warn if main program is called \"test\", as that may be a built-in command\n    --  on Unix. On non-Unix systems executables have a suffix, so the warning"}, {"sha": "c39e93936e55d0e3123b46a9a7c0df62a3a3be95", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46256d9dd0d03ebd269643039e986c54c6b1e910/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46256d9dd0d03ebd269643039e986c54c6b1e910/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=46256d9dd0d03ebd269643039e986c54c6b1e910", "patch": "@@ -13520,8 +13520,18 @@ package body Sem_Ch3 is\n          if not Is_Generic_Actual_Type (Parent_Type)\n            or else In_Visible_Part (Scope (Parent_Type))\n          then\n-            Error_Msg_N\n-              (\"type derived from tagged type must have extension\", Indic);\n+            if Is_Class_Wide_Type (Parent_Type) then\n+               Error_Msg_N\n+                 (\"parent type must not be a class-wide type\", Indic);\n+\n+               --  Use specific type to prevent cascaded errors.\n+\n+               Parent_Type := Etype (Parent_Type);\n+\n+            else\n+               Error_Msg_N\n+                 (\"type derived from tagged type must have extension\", Indic);\n+            end if;\n          end if;\n       end if;\n "}, {"sha": "5ea51bdf3691192645368d5f0a4dfe826b673b6b", "filename": "gcc/ada/xref_lib.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46256d9dd0d03ebd269643039e986c54c6b1e910/gcc%2Fada%2Fxref_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46256d9dd0d03ebd269643039e986c54c6b1e910/gcc%2Fada%2Fxref_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fxref_lib.adb?ref=46256d9dd0d03ebd269643039e986c54c6b1e910", "patch": "@@ -518,7 +518,7 @@ package body Xref_Lib is\n          when 'T' => return \"task type\";\n          when 'W' => return \"protected type\";\n \n-         when 'a' => return \"array type\";\n+         when 'a' => return Param_String & \"array object\";\n          when 'b' => return Param_String & \"boolean object\";\n          when 'c' => return Param_String & \"class-wide object\";\n          when 'd' => return Param_String & \"decimal object\";"}]}