{"sha": "d2e74f6fd5b8dfff688b382b2fcb076f4f87a724", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJlNzRmNmZkNWI4ZGZmZjY4OGIzODJiMmZjYjA3NmY0Zjg3YTcyNA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-10-09T15:48:24Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-10-09T15:48:24Z"}, "message": "re PR middle-end/17894 (div/compare folding incorrect)\n\n\n\tPR middle-end/17894\n\t* fold-const.c (fold_div_compare): When optimizing X/C1 op C2, the\n\trelational comparison operator op needs to be swapped/reversed when\n\tC1 is negative.  i.e. X/-10 < 1 becomes X >= -9, not X < -9.\n\n\t* gcc.c-torture/execute/divcmp-4.c: New test case.\n\nFrom-SVN: r88818", "tree": {"sha": "170040c8e28a24edb9414cf344d53a3ab20d0b53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/170040c8e28a24edb9414cf344d53a3ab20d0b53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2e74f6fd5b8dfff688b382b2fcb076f4f87a724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2e74f6fd5b8dfff688b382b2fcb076f4f87a724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2e74f6fd5b8dfff688b382b2fcb076f4f87a724", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2e74f6fd5b8dfff688b382b2fcb076f4f87a724/comments", "author": null, "committer": null, "parents": [{"sha": "0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d2e6ffef6be51ec2e1fd9f593c26e1e53b23825"}], "stats": {"total": 217, "additions": 217, "deletions": 0}, "files": [{"sha": "5d968b14c704bf305ef3e752e87ab29f6008aa44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e74f6fd5b8dfff688b382b2fcb076f4f87a724/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e74f6fd5b8dfff688b382b2fcb076f4f87a724/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2e74f6fd5b8dfff688b382b2fcb076f4f87a724", "patch": "@@ -1,3 +1,10 @@\n+2004-10-09  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/17894\n+\t* fold-const.c (fold_div_compare): When optimizing X/C1 op C2, the\n+\trelational comparison operator op needs to be swapped/reversed when\n+\tC1 is negative.  i.e. X/-10 < 1 becomes X >= -9, not X < -9.\n+\n 2004-10-08  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR tree-opt/17902"}, {"sha": "41feda3ef1eb9a1c44043f51749c959dd54d90c5", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e74f6fd5b8dfff688b382b2fcb076f4f87a724/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e74f6fd5b8dfff688b382b2fcb076f4f87a724/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=d2e74f6fd5b8dfff688b382b2fcb076f4f87a724", "patch": "@@ -5720,6 +5720,9 @@ fold_div_compare (enum tree_code code, tree type, tree arg0, tree arg1)\n     }\n   else\n     {\n+      /* A negative divisor reverses the relational operators.  */\n+      code = swap_tree_comparison (code);\n+\n       tmp = int_const_binop (PLUS_EXPR, arg01, integer_one_node, 0);\n       switch (tree_int_cst_sgn (arg1))\n \t{"}, {"sha": "28d0a1121b1ae75cf0594dedde6ed21b987ea34a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e74f6fd5b8dfff688b382b2fcb076f4f87a724/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e74f6fd5b8dfff688b382b2fcb076f4f87a724/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d2e74f6fd5b8dfff688b382b2fcb076f4f87a724", "patch": "@@ -1,3 +1,8 @@\n+2004-10-09  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/17894\n+\t* gcc.c-torture/execute/divcmp-4.c: New test case.\n+\n 2004-10-08  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR tree-opt/17902"}, {"sha": "ebc09a10e3981e89e2f98a6778bf3f1c42f41e32", "filename": "gcc/testsuite/gcc.c-torture/execute/divcmp-4.c", "status": "added", "additions": 202, "deletions": 0, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e74f6fd5b8dfff688b382b2fcb076f4f87a724/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fdivcmp-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e74f6fd5b8dfff688b382b2fcb076f4f87a724/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fdivcmp-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fdivcmp-4.c?ref=d2e74f6fd5b8dfff688b382b2fcb076f4f87a724", "patch": "@@ -0,0 +1,202 @@\n+/* PR middle-end/17894 */\n+\n+extern void abort(void);\n+\n+int test1(int x)\n+{\n+  return x/-10 == 2;\n+}\n+\n+int test2(int x)\n+{\n+  return x/-10 == 0;\n+}\n+\n+int test3(int x)\n+{\n+  return x/-10 != 2;\n+}\n+\n+int test4(int x)\n+{\n+  return x/-10 != 0;\n+}\n+\n+int test5(int x)\n+{\n+  return x/-10 < 2;\n+}\n+\n+int test6(int x)\n+{\n+  return x/-10 < 0;\n+}\n+\n+int test7(int x)\n+{\n+  return x/-10  <= 2;\n+}\n+\n+int test8(int x)\n+{\n+  return x/-10 <= 0;\n+}\n+\n+int test9(int x)\n+{\n+  return x/-10 > 2;\n+}\n+\n+int test10(int x)\n+{\n+  return x/-10 > 0;\n+}\n+\n+int test11(int x)\n+{\n+  return x/-10 >= 2;\n+}\n+\n+int test12(int x)\n+{\n+  return x/-10 >= 0;\n+}\n+\n+\n+int main()\n+{\n+  if (test1(-30) != 0)\n+    abort ();\n+  if (test1(-29) != 1)\n+    abort ();\n+  if (test1(-20) != 1)\n+    abort ();\n+  if (test1(-19) != 0)\n+    abort ();\n+\n+  if (test2(0) != 1)\n+    abort ();\n+  if (test2(9) != 1)\n+    abort ();\n+  if (test2(10) != 0)\n+    abort ();\n+  if (test2(-1) != 1)\n+    abort ();\n+  if (test2(-9) != 1)\n+    abort ();\n+  if (test2(-10) != 0)\n+    abort ();\n+\n+  if (test3(-30) != 1)\n+    abort ();\n+  if (test3(-29) != 0)\n+    abort ();\n+  if (test3(-20) != 0)\n+    abort ();\n+  if (test3(-19) != 1)\n+    abort ();\n+\n+  if (test4(0) != 0)\n+    abort ();\n+  if (test4(9) != 0)\n+    abort ();\n+  if (test4(10) != 1)\n+    abort ();\n+  if (test4(-1) != 0)\n+    abort ();\n+  if (test4(-9) != 0)\n+    abort ();\n+  if (test4(-10) != 1)\n+    abort ();\n+\n+  if (test5(-30) != 0)\n+    abort ();\n+  if (test5(-29) != 0)\n+    abort ();\n+  if (test5(-20) != 0)\n+    abort ();\n+  if (test5(-19) != 1)\n+    abort ();\n+\n+  if (test6(0) != 0)\n+    abort ();\n+  if (test6(9) != 0)\n+    abort ();\n+  if (test6(10) != 1)\n+    abort ();\n+  if (test6(-1) != 0)\n+    abort ();\n+  if (test6(-9) != 0)\n+    abort ();\n+  if (test6(-10) != 0)\n+    abort ();\n+\n+  if (test7(-30) != 0)\n+    abort ();\n+  if (test7(-29) != 1)\n+    abort ();\n+  if (test7(-20) != 1)\n+    abort ();\n+  if (test7(-19) != 1)\n+    abort ();\n+\n+  if (test8(0) != 1)\n+    abort ();\n+  if (test8(9) != 1)\n+    abort ();\n+  if (test8(10) != 1)\n+    abort ();\n+  if (test8(-1) != 1)\n+    abort ();\n+  if (test8(-9) != 1)\n+    abort ();\n+  if (test8(-10) != 0)\n+    abort ();\n+\n+  if (test9(-30) != 1)\n+    abort ();\n+  if (test9(-29) != 0)\n+    abort ();\n+  if (test9(-20) != 0)\n+    abort ();\n+  if (test9(-19) != 0)\n+    abort ();\n+\n+  if (test10(0) != 0)\n+    abort ();\n+  if (test10(9) != 0)\n+    abort ();\n+  if (test10(10) != 0)\n+    abort ();\n+  if (test10(-1) != 0)\n+    abort ();\n+  if (test10(-9) != 0)\n+    abort ();\n+  if (test10(-10) != 1)\n+    abort ();\n+\n+  if (test11(-30) != 1)\n+    abort ();\n+  if (test11(-29) != 1)\n+    abort ();\n+  if (test11(-20) != 1)\n+    abort ();\n+  if (test11(-19) != 0)\n+    abort ();\n+\n+  if (test12(0) != 1)\n+    abort ();\n+  if (test12(9) != 1)\n+    abort ();\n+  if (test12(10) != 0)\n+    abort ();\n+  if (test12(-1) != 1)\n+    abort ();\n+  if (test12(-9) != 1)\n+    abort ();\n+  if (test12(-10) != 1)\n+    abort ();\n+\n+  return 0;\n+}\n+"}]}