{"sha": "77ee207e17d02e4aec502c6aedd9b0ba36a08de3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdlZTIwN2UxN2QwMmU0YWVjNTAyYzZhZWRkOWIwYmEzNmEwOGRlMw==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-11-23T14:24:43Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-11-23T14:29:41Z"}, "message": "MSP430: Remove target-specific handling of the \"persistent\" attribute\n\nThe \"persistent\" attribute is now handled generically, and does not\nneed specific support in the MSP430 back end.\n\ngcc/ChangeLog:\n\n\t* config/msp430/msp430.c (msp430_section_attr): Don't warn for \"lower\"\n\tattribute used with \"noinit\" or \"persistent\" attributes.\n\t(msp430_persist_attr): Remove.\n\t(attr_lower_exclusions): Remove ATTR_PERSIST exclusion.\n\t(attr_upper_exclusions): Likewise.\n\t(attr_either_exclusions): Likewise.\n\t(attr_persist_exclusions): Remove.\n\t(msp430_attribute_table): Remove ATTR_PERSIST handling.\n\t(msp430_handle_generic_attribute): Remove ATTR_PERSIST section conflict\n\thandling.\n\t(TARGET_ASM_INIT_SECTIONS): Remove.\n\t(msp430_init_sections): Remove.\n\t(msp430_select_section): Use default_elf_select_section for decls with\n\tthe \"persistent\" attribute.\n\t(msp430_section_type_flags): Remove \".persistent\" section handling.\n\t* doc/extend.texi (MSP430 Variable Attributes): Remove \"noinit\" and\n\t\"persistent\" documentation.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/msp430/data-attributes.C: Remove expected warnings for\n\t\"lower\" attribute conflicts.\n\tAdjust expected wording for \"persistent\" attribute misuse.\n\t* gcc.target/msp430/data-attributes-2.c: Likewise.\n\t* gcc.target/msp430/pr78818-auto-warn.c: Likewise.", "tree": {"sha": "60d92acc8f0d8c268f546c72f42c4d9a038c8f04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60d92acc8f0d8c268f546c72f42c4d9a038c8f04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77ee207e17d02e4aec502c6aedd9b0ba36a08de3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77ee207e17d02e4aec502c6aedd9b0ba36a08de3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77ee207e17d02e4aec502c6aedd9b0ba36a08de3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77ee207e17d02e4aec502c6aedd9b0ba36a08de3/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "692d3b772755b798cc527a80ca2d02e23bc4e2bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/692d3b772755b798cc527a80ca2d02e23bc4e2bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/692d3b772755b798cc527a80ca2d02e23bc4e2bf"}], "stats": {"total": 168, "additions": 36, "deletions": 132}, "files": [{"sha": "db3a9ff53305e7399fd3fd11fdc2c61296828215", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 16, "deletions": 98, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ee207e17d02e4aec502c6aedd9b0ba36a08de3/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ee207e17d02e4aec502c6aedd9b0ba36a08de3/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=77ee207e17d02e4aec502c6aedd9b0ba36a08de3", "patch": "@@ -1968,15 +1968,18 @@ msp430_section_attr (tree * node,\n \n   const char * message = NULL;\n \n-  /* The \"noinit\" and \"section\" attributes are handled generically, so we\n-     cannot set up additional target-specific attribute exclusions using the\n-     existing mechanism.  */\n-  if (has_attr (ATTR_NOINIT, *node))\n+  /* The \"noinit\", \"persistent\", and \"section\" attributes are handled\n+     generically, so we cannot set up additional target-specific attribute\n+     exclusions using the existing mechanism.  */\n+  if (has_attr (ATTR_NOINIT, *node) && !TREE_NAME_EQ (name, \"lower\"))\n     message = G_(\"ignoring attribute %qE because it conflicts with \"\n \t\t \"attribute %<noinit%>\");\n   else if (has_attr (\"section\", *node) && !TREE_NAME_EQ (name, \"lower\"))\n     message = G_(\"ignoring attribute %qE because it conflicts with \"\n \t\t \"attribute %<section%>\");\n+  else if (has_attr (ATTR_PERSIST, *node) && !TREE_NAME_EQ (name, \"lower\"))\n+    message = G_(\"ignoring attribute %qE because it conflicts with \"\n+\t\t \"attribute %<persistent%>\");\n   /* It does not make sense to use upper/lower/either attributes without\n      -mlarge.\n      Without -mlarge, \"lower\" is the default and only region, so is redundant.\n@@ -1997,56 +2000,6 @@ msp430_section_attr (tree * node,\n   return NULL_TREE;\n }\n \n-static tree\n-msp430_persist_attr (tree *node,\n-\t\t  tree   name,\n-\t\t  tree   args,\n-\t\t  int    flags ATTRIBUTE_UNUSED,\n-\t\t  bool * no_add_attrs ATTRIBUTE_UNUSED)\n-{\n-  const char * message = NULL;\n-\n-  gcc_assert (DECL_P (* node));\n-  gcc_assert (args == NULL);\n-  gcc_assert (TREE_NAME_EQ (name, ATTR_PERSIST));\n-\n-  /* Check for the section attribute separately from DECL_SECTION_NAME so\n-     we can provide a clearer warning.  */\n-  if (has_attr (\"section\", *node))\n-    message = G_(\"ignoring attribute %qE because it conflicts with \"\n-\t\t \"attribute %<section%>\");\n-  /* Check that it's possible for the variable to have a section.  */\n-  else if ((TREE_STATIC (*node) || DECL_EXTERNAL (*node) || in_lto_p)\n-\t   && (DECL_SECTION_NAME (*node)))\n-    message = G_(\"%qE attribute cannot be applied to variables with specific \"\n-\t\t \"sections\");\n-  else if (has_attr (ATTR_NOINIT, *node))\n-    message = G_(\"ignoring attribute %qE because it conflicts with \"\n-\t\t \"attribute %<noinit%>\");\n-  else if (TREE_CODE (*node) != VAR_DECL)\n-    message = G_(\"%qE attribute only applies to variables\");\n-  else if (!TREE_STATIC (*node) && !TREE_PUBLIC (*node)\n-\t   && !DECL_EXTERNAL (*node))\n-    message = G_(\"%qE attribute has no effect on automatic variables\");\n-  else if (DECL_COMMON (*node) || DECL_INITIAL (*node) == NULL)\n-    message = G_(\"variables marked with %qE attribute must be initialized\");\n-  else\n-    /* It's not clear if there is anything that can be set here to prevent the\n-       front end placing the variable before the back end can handle it, in a\n-       similar way to how DECL_COMMON is cleared for .noinit variables in\n-       handle_noinit_attribute (gcc/c-family/c-attribs.c).\n-       So just place the variable in the .persistent section now.  */\n-    set_decl_section_name (* node, \".persistent\");\n-\n-  if (message)\n-    {\n-      warning (OPT_Wattributes, message, name);\n-      * no_add_attrs = true;\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n /* Helper to define attribute exclusions.  */\n #define ATTR_EXCL(name, function, type, variable)\t\\\n   { name, function, type, variable }\n@@ -2081,31 +2034,20 @@ static const struct attribute_spec::exclusions attr_lower_exclusions[] =\n {\n   ATTR_EXCL (ATTR_UPPER, true, true, true),\n   ATTR_EXCL (ATTR_EITHER, true, true, true),\n-  ATTR_EXCL (ATTR_PERSIST, true, true, true),\n   ATTR_EXCL (NULL, false, false, false)\n };\n \n static const struct attribute_spec::exclusions attr_upper_exclusions[] =\n {\n   ATTR_EXCL (ATTR_LOWER, true, true, true),\n   ATTR_EXCL (ATTR_EITHER, true, true, true),\n-  ATTR_EXCL (ATTR_PERSIST, true, true, true),\n   ATTR_EXCL (NULL, false, false, false)\n };\n \n static const struct attribute_spec::exclusions attr_either_exclusions[] =\n {\n   ATTR_EXCL (ATTR_LOWER, true, true, true),\n   ATTR_EXCL (ATTR_UPPER, true, true, true),\n-  ATTR_EXCL (ATTR_PERSIST, true, true, true),\n-  ATTR_EXCL (NULL, false, false, false)\n-};\n-\n-static const struct attribute_spec::exclusions attr_persist_exclusions[] =\n-{\n-  ATTR_EXCL (ATTR_LOWER, true, true, true),\n-  ATTR_EXCL (ATTR_UPPER, true, true, true),\n-  ATTR_EXCL (ATTR_EITHER, true, true, true),\n   ATTR_EXCL (NULL, false, false, false)\n };\n \n@@ -2133,9 +2075,6 @@ const struct attribute_spec msp430_attribute_table[] =\n     { ATTR_EITHER,      0, 0, true,  false, false, false, msp430_section_attr,\n       attr_either_exclusions },\n \n-    { ATTR_PERSIST,     0, 0, true,  false, false, false, msp430_persist_attr,\n-      attr_persist_exclusions },\n-\n     { NULL,\t\t0, 0, false, false, false, false, NULL,  NULL }\n   };\n \n@@ -2152,14 +2091,13 @@ msp430_handle_generic_attribute (tree *node,\n {\n   const char *message = NULL;\n \n-  /* The front end has set up an exclusion between the \"noinit\" and \"section\"\n-     attributes.  */\n-  if (!(TREE_NAME_EQ (name, ATTR_NOINIT) || TREE_NAME_EQ (name, \"section\")))\n-    return NULL_TREE;\n-\n-  /* We allow the \"lower\" attribute to be used on variables with the \"section\"\n-     attribute.  */\n-  if (has_attr (ATTR_LOWER, *node) && !TREE_NAME_EQ (name, \"section\"))\n+  /* Permit the \"lower\" attribute to be set on variables with the \"section\",\n+     \"noinit\" and \"persistent\" attributes.  This is used to indicate that the\n+     corresponding output section will be in lower memory, so a 430X\n+     instruction is not required to handle it.  */\n+  if (has_attr (ATTR_LOWER, *node)\n+      && !(TREE_NAME_EQ (name, \"section\") || TREE_NAME_EQ (name, ATTR_PERSIST)\n+\t   || TREE_NAME_EQ (name, ATTR_NOINIT)))\n     message = G_(\"ignoring attribute %qE because it conflicts with \"\n \t\t \"attribute %<lower%>\");\n   else if (has_attr (ATTR_UPPER, *node))\n@@ -2168,9 +2106,6 @@ msp430_handle_generic_attribute (tree *node,\n   else if (has_attr (ATTR_EITHER, *node))\n     message = G_(\"ignoring attribute %qE because it conflicts with \"\n \t\t \"attribute %<either%>\");\n-  else if (has_attr (ATTR_PERSIST, *node))\n-    message = G_(\"ignoring attribute %qE because it conflicts with \"\n-\t\t \"attribute %<persistent%>\");\n \n   if (message)\n     {\n@@ -2428,18 +2363,6 @@ gen_prefix (tree decl)\n   return NULL;\n }\n \n-static section * persist_section;\n-\n-#undef  TARGET_ASM_INIT_SECTIONS\n-#define TARGET_ASM_INIT_SECTIONS msp430_init_sections\n-\n-static void\n-msp430_init_sections (void)\n-{\n-  persist_section = get_unnamed_section (0, output_section_asm_op,\n-\t\t\t\t\t \".section .persistent,\\\"aw\\\"\");\n-}\n-\n #undef  TARGET_ASM_SELECT_SECTION\n #define TARGET_ASM_SELECT_SECTION msp430_select_section\n \n@@ -2465,11 +2388,8 @@ msp430_select_section (tree decl, int reloc, unsigned HOST_WIDE_INT align)\n       && is_interrupt_func (decl))\n     return get_section (\".lowtext\", SECTION_CODE | SECTION_WRITE , decl);\n \n-  if (has_attr (ATTR_PERSIST, decl))\n-    return persist_section;\n-\n-  /* ATTR_NOINIT is handled generically.  */\n-  if (has_attr (ATTR_NOINIT, decl))\n+  /* The \"noinit\" and \"persistent\" attributes are handled generically.  */\n+  if (has_attr (ATTR_NOINIT, decl) || has_attr (ATTR_PERSIST, decl))\n     return default_elf_select_section (decl, reloc, align);\n \n   prefix = gen_prefix (decl);\n@@ -2565,8 +2485,6 @@ msp430_section_type_flags (tree decl, const char * name, int reloc)\n     name += strlen (upper_prefix);\n   else if (strncmp (name, either_prefix, strlen (either_prefix)) == 0)\n     name += strlen (either_prefix);\n-  else if (strcmp (name, \".persistent\") == 0)\n-    return SECTION_WRITE | SECTION_NOTYPE;\n \n   return default_section_type_flags (decl, name, reloc);\n }"}, {"sha": "23ede966bae9b12659c6e79d110d6d9a8eaa6aa2", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ee207e17d02e4aec502c6aedd9b0ba36a08de3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ee207e17d02e4aec502c6aedd9b0ba36a08de3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=77ee207e17d02e4aec502c6aedd9b0ba36a08de3", "patch": "@@ -7863,23 +7863,6 @@ The @code{shared} attribute is only available on Microsoft Windows@.\n @subsection MSP430 Variable Attributes\n \n @table @code\n-@item noinit\n-@cindex @code{noinit} variable attribute, MSP430 \n-Any data with the @code{noinit} attribute will not be initialised by\n-the C runtime startup code, or the program loader.  Not initialising\n-data in this way can reduce program startup times.\n-\n-@item persistent\n-@cindex @code{persistent} variable attribute, MSP430 \n-Any variable with the @code{persistent} attribute will not be\n-initialised by the C runtime startup code.  Instead its value will be\n-set once, when the application is loaded, and then never initialised\n-again, even if the processor is reset or the program restarts.\n-Persistent data is intended to be placed into FLASH RAM, where its\n-value will be retained across resets.  The linker script being used to\n-create the application should ensure that persistent data is correctly\n-placed.\n-\n @item upper\n @itemx either\n @cindex @code{upper} variable attribute, MSP430 "}, {"sha": "b7faf2ce7e5399d361565e83de3b567ad04cf2e1", "filename": "gcc/testsuite/g++.target/msp430/data-attributes.C", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ee207e17d02e4aec502c6aedd9b0ba36a08de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fmsp430%2Fdata-attributes.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ee207e17d02e4aec502c6aedd9b0ba36a08de3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fmsp430%2Fdata-attributes.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fmsp430%2Fdata-attributes.C?ref=77ee207e17d02e4aec502c6aedd9b0ba36a08de3", "patch": "@@ -2,22 +2,25 @@\n /* { dg-skip-if \"\" { *-*-* } { \"-mcpu=msp430\" } } */\n /* { dg-options \"-mlarge\" } */\n \n-/* The msp430-specific variable attributes \"lower\", \"upper\", either\", \"noinit\"\n+/* The msp430-specific variable attributes \"upper\", either\", \"noinit\"\n    and \"persistent\", all conflict with one another.\n+   \"lower\" can be used to indicate that a variable with a section set by the\n+   \"section\", \"noinit\", or \"persistent\" attributes is in lower memory, so it\n+   does not conflict with these.\n    These attributes also conflict with the \"section\" attribute, since they\n    specify sections to put the variables into.  */\n int __attribute__((persistent)) p = 10;\n-int __attribute__((persistent,lower)) pl = 20; /* { dg-warning \"ignoring attribute 'lower' because it conflicts with attribute 'persistent'\" } */\n+int __attribute__((persistent,lower)) pl = 20;\n int __attribute__((persistent,upper)) pu = 20; /* { dg-warning \"ignoring attribute 'upper' because it conflicts with attribute 'persistent'\" } */\n int __attribute__((persistent,either)) pe = 20; /* { dg-warning \"ignoring attribute 'either' because it conflicts with attribute 'persistent'\" } */\n /* This one results in an error because the handler for persistent sets the\n    section to .persistent there and then.  */\n-int __attribute__((persistent,section(\".data.foo\"))) ps = 20; /* { dg-error \"section of 'ps' conflicts with previous declaration\" } */\n-int __attribute__((persistent,noinit)) pn = 2; /* { dg-warning \"'noinit' attribute cannot be applied to variables with specific sections\" } */\n-int __attribute__((persistent)) zz; /* { dg-warning \"variables marked with 'persistent' attribute must be initialized\" } */\n+int __attribute__((persistent,section(\".data.foo\"))) ps = 20; /* { dg-warning \"ignoring attribute 'section' because it conflicts with attribute 'persistent'\" } */\n+int __attribute__((persistent,noinit)) pn = 2; /* { dg-warning \"ignoring attribute 'noinit' because it conflicts with attribute 'persistent'\" } */\n+int __attribute__((persistent)) zz; /* { dg-warning \"ignoring 'persistent' attribute set on uninitialized variable\" } */\n \n int __attribute__((noinit)) n;\n-int __attribute__((noinit,lower)) nl; /* { dg-warning \"ignoring attribute 'lower' because it conflicts with attribute 'noinit'\" } */\n+int __attribute__((noinit,lower)) nl;\n int __attribute__((noinit,upper)) nu; /* { dg-warning \"ignoring attribute 'upper' because it conflicts with attribute 'noinit'\" } */\n int __attribute__((noinit,either)) ne; /* { dg-warning \"ignoring attribute 'either' because it conflicts with attribute 'noinit'\" } */\n int __attribute__((noinit,persistent)) np; /* { dg-warning \"ignoring attribute 'persistent' because it conflicts with attribute 'noinit'\" } */\n@@ -26,8 +29,8 @@ int __attribute__((noinit,section(\".data.foo\"))) ns; /* { dg-warning \"ignoring a\n int __attribute__((lower)) l = 20;\n int __attribute__((lower,upper)) lu = 20; /* { dg-warning \"ignoring attribute 'upper' because it conflicts with attribute 'lower'\" } */\n int __attribute__((lower,either)) le = 20; /* { dg-warning \"ignoring attribute 'either' because it conflicts with attribute 'lower'\" } */\n-int __attribute__((lower,persistent)) lp = 20; /* { dg-warning \"ignoring attribute 'persistent' because it conflicts with attribute 'lower'\" } */\n-int __attribute__((lower,noinit)) ln; /* { dg-warning \"ignoring attribute 'noinit' because it conflicts with attribute 'lower'\" } */\n+int __attribute__((lower,persistent)) lp = 20;\n+int __attribute__((lower,noinit)) ln;\n int __attribute__((lower,section(\".data.foo\"))) ls = 30;\n \n int __attribute__((upper)) u = 20;"}, {"sha": "cf456f1b2a8f1d1ef30dbbbbd03b97d2c4e84e69", "filename": "gcc/testsuite/gcc.target/msp430/data-attributes-2.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ee207e17d02e4aec502c6aedd9b0ba36a08de3/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdata-attributes-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ee207e17d02e4aec502c6aedd9b0ba36a08de3/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdata-attributes-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdata-attributes-2.c?ref=77ee207e17d02e4aec502c6aedd9b0ba36a08de3", "patch": "@@ -7,17 +7,17 @@\n    These attributes also conflict with the \"section\" attribute, since they\n    specify sections to put the variables into.  */\n int __attribute__((persistent)) p = 10;\n-int __attribute__((persistent,lower)) pl = 20; /* { dg-warning \"ignoring attribute 'lower' because it conflicts with attribute 'persistent'\" } */\n+int __attribute__((persistent,lower)) pl = 20;\n int __attribute__((persistent,upper)) pu = 20; /* { dg-warning \"ignoring attribute 'upper' because it conflicts with attribute 'persistent'\" } */\n int __attribute__((persistent,either)) pe = 20; /* { dg-warning \"ignoring attribute 'either' because it conflicts with attribute 'persistent'\" } */\n /* This one results in an error because the handler for persistent sets the\n    section to .persistent there and then.  */\n-int __attribute__((persistent,section(\".data.foo\"))) ps = 20; /* { dg-error \"section of 'ps' conflicts with previous declaration\" } */\n-int __attribute__((persistent,noinit)) pn = 2; /* { dg-warning \"'noinit' attribute cannot be applied to variables with specific sections\" } */\n-int __attribute__((persistent)) zz; /* { dg-warning \"variables marked with 'persistent' attribute must be initialized\" } */\n+int __attribute__((persistent,section(\".data.foo\"))) ps = 20; /* { dg-warning \"ignoring attribute 'section' because it conflicts with attribute 'persistent'\" } */\n+int __attribute__((persistent,noinit)) pn = 2; /* { dg-warning \"ignoring attribute 'noinit' because it conflicts with attribute 'persistent'\" } */\n+int __attribute__((persistent)) zz; /* { dg-warning \"ignoring 'persistent' attribute set on uninitialized variable\" } */\n \n int __attribute__((noinit)) n;\n-int __attribute__((noinit,lower)) nl; /* { dg-warning \"ignoring attribute 'lower' because it conflicts with attribute 'noinit'\" } */\n+int __attribute__((noinit,lower)) nl;\n int __attribute__((noinit,upper)) nu; /* { dg-warning \"ignoring attribute 'upper' because it conflicts with attribute 'noinit'\" } */\n int __attribute__((noinit,either)) ne; /* { dg-warning \"ignoring attribute 'either' because it conflicts with attribute 'noinit'\" } */\n int __attribute__((noinit,persistent)) np; /* { dg-warning \"ignoring attribute 'persistent' because it conflicts with attribute 'noinit'\" } */\n@@ -26,8 +26,8 @@ int __attribute__((noinit,section(\".data.foo\"))) ns; /* { dg-warning \"ignoring a\n int __attribute__((lower)) l = 20;\n int __attribute__((lower,upper)) lu = 20; /* { dg-warning \"ignoring attribute 'upper' because it conflicts with attribute 'lower'\" } */\n int __attribute__((lower,either)) le = 20; /* { dg-warning \"ignoring attribute 'either' because it conflicts with attribute 'lower'\" } */\n-int __attribute__((lower,persistent)) lp = 20; /* { dg-warning \"ignoring attribute 'persistent' because it conflicts with attribute 'lower'\" } */\n-int __attribute__((lower,noinit)) ln; /* { dg-warning \"ignoring attribute 'noinit' because it conflicts with attribute 'lower'\" } */\n+int __attribute__((lower,persistent)) lp = 20;\n+int __attribute__((lower,noinit)) ln;\n int __attribute__((lower,section(\".data.foo\"))) ls = 30;\n \n int __attribute__((upper)) u = 20;"}, {"sha": "7ed5ca83000dbcc73e97f67d2fe4f8c4fb63fde8", "filename": "gcc/testsuite/gcc.target/msp430/pr78818-auto-warn.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ee207e17d02e4aec502c6aedd9b0ba36a08de3/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr78818-auto-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ee207e17d02e4aec502c6aedd9b0ba36a08de3/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr78818-auto-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr78818-auto-warn.c?ref=77ee207e17d02e4aec502c6aedd9b0ba36a08de3", "patch": "@@ -8,8 +8,8 @@ static __attribute__((persistent)) int persistent_4_g = 0;\n int\n main (void)\n {\n-  __attribute__((persistent)) int persistent_1 = 1; /* { dg-warning \"attribute has no effect on automatic\" } */\n-  __attribute__((persistent)) int persistent_2 = 0; /* { dg-warning \"attribute has no effect on automatic\" } */\n+  __attribute__((persistent)) int persistent_1 = 1; /* { dg-error \"'persistent' attribute cannot be specified for local variables\" } */\n+  __attribute__((persistent)) int persistent_2 = 0; /* { dg-error \"'persistent' attribute cannot be specified for local variables\" } */\n   static __attribute__((persistent)) int persistent_3 = 1;\n   static __attribute__((persistent)) int persistent_4 = 0;\n   return 0;"}]}