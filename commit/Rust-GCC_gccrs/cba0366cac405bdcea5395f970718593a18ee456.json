{"sha": "cba0366cac405bdcea5395f970718593a18ee456", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JhMDM2NmNhYzQwNWJkY2VhNTM5NWY5NzA3MTg1OTNhMThlZTQ1Ng==", "commit": {"author": {"name": "Fabien Ch\u00eane", "email": "fabien@gcc.gnu.org", "date": "2012-06-07T05:36:18Z"}, "committer": {"name": "Fabien Ch\u00eane", "email": "fabien@gcc.gnu.org", "date": "2012-06-07T05:36:18Z"}, "message": "re PR c++/51214 ([C++11] name lookup issue with c++11 enums)\n\ngcc/testsuite/ChangeLog\n\n2012-06-07  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n\n\tPR c++/51214\n\t* g++.dg/cpp0x/forw_enum11.C: New.\n\ngcc/cp/ChangeLog\n\n2012-06-07  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n\n\tPR c++/51214\n\t* cp-tree.h (insert_late_enum_def_into_classtype_sorted_fields):\n\tDeclare.\n\t* class.c (insert_into_classtype_sorted_fields): New.\n\t(add_enum_fields_to_record_type): New.\n\t(count_fields): Adjust the comment.\n\t(add_fields_to_record_type): Likewise.\n\t(finish_struct_1): Move the code that inserts the fields for the\n\tsorted case, into insert_into_classtype_sorted_fields, and call\n\tit.\n\t(insert_late_enum_def_into_classtype_sorted_fields): Define.\n\t* decl.c (finish_enum_value_list): Call\n\tinsert_late_enum_def_into_classtype_sorted_fields if a late enum\n\tdefinition is encountered.\n\nFrom-SVN: r188294", "tree": {"sha": "beaa374199a40a79b0a42592c6bd3803677126bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beaa374199a40a79b0a42592c6bd3803677126bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cba0366cac405bdcea5395f970718593a18ee456", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba0366cac405bdcea5395f970718593a18ee456", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cba0366cac405bdcea5395f970718593a18ee456", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba0366cac405bdcea5395f970718593a18ee456/comments", "author": null, "committer": null, "parents": [{"sha": "0d7afaa749574e40058b94bb762fe90e96c12896", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d7afaa749574e40058b94bb762fe90e96c12896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d7afaa749574e40058b94bb762fe90e96c12896"}], "stats": {"total": 127, "additions": 113, "deletions": 14}, "files": [{"sha": "832ba9eac43e7cc60e15144fb7d8bc1011f50065", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba0366cac405bdcea5395f970718593a18ee456/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba0366cac405bdcea5395f970718593a18ee456/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cba0366cac405bdcea5395f970718593a18ee456", "patch": "@@ -1,3 +1,20 @@\n+2012-06-07  Fabien Ch\ufffdne  <fabien@gcc.gnu.org>\n+\n+\tPR c++/51214\n+\t* cp-tree.h (insert_late_enum_def_into_classtype_sorted_fields):\n+\tDeclare.\n+\t* class.c (insert_into_classtype_sorted_fields): New.\n+\t(add_enum_fields_to_record_type): New.\n+\t(count_fields): Adjust the comment.\n+\t(add_fields_to_record_type): Likewise.\n+\t(finish_struct_1): Move the code that inserts the fields for the\n+\tsorted case, into insert_into_classtype_sorted_fields, and call\n+\tit.\n+\t(insert_late_enum_def_into_classtype_sorted_fields): Define.\n+\t* decl.c (finish_enum_value_list): Call\n+\tinsert_late_enum_def_into_classtype_sorted_fields if a late enum\n+\tdefinition is encountered.\n+\n 2012-06-06  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/53567"}, {"sha": "4bb9dd2c1684a627fe58e3024195717190ab4efc", "filename": "gcc/cp/class.c", "status": "modified", "additions": 61, "deletions": 14, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba0366cac405bdcea5395f970718593a18ee456/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba0366cac405bdcea5395f970718593a18ee456/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=cba0366cac405bdcea5395f970718593a18ee456", "patch": "@@ -139,6 +139,7 @@ static void build_vtbl_initializer (tree, tree, tree, tree, int *,\n \t\t\t\t    VEC(constructor_elt,gc) **);\n static int count_fields (tree);\n static int add_fields_to_record_type (tree, struct sorted_fields_type*, int);\n+static void insert_into_classtype_sorted_fields (tree, tree, int);\n static bool check_bitfield_decl (tree);\n static void check_field_decl (tree, tree, int *, int *, int *);\n static void check_field_decls (tree, tree *, int *, int *);\n@@ -2832,8 +2833,9 @@ add_implicitly_declared_members (tree t,\n   declare_virt_assop_and_dtor (t);\n }\n \n-/* Subroutine of finish_struct_1.  Recursively count the number of fields\n-   in TYPE, including anonymous union members.  */\n+/* Subroutine of insert_into_classtype_sorted_fields.  Recursively\n+   count the number of fields in TYPE, including anonymous union\n+   members.  */\n \n static int\n count_fields (tree fields)\n@@ -2850,8 +2852,9 @@ count_fields (tree fields)\n   return n_fields;\n }\n \n-/* Subroutine of finish_struct_1.  Recursively add all the fields in the\n-   TREE_LIST FIELDS to the SORTED_FIELDS_TYPE elts, starting at offset IDX.  */\n+/* Subroutine of insert_into_classtype_sorted_fields.  Recursively add\n+   all the fields in the TREE_LIST FIELDS to the SORTED_FIELDS_TYPE\n+   elts, starting at offset IDX.  */\n \n static int\n add_fields_to_record_type (tree fields, struct sorted_fields_type *field_vec, int idx)\n@@ -2867,6 +2870,20 @@ add_fields_to_record_type (tree fields, struct sorted_fields_type *field_vec, in\n   return idx;\n }\n \n+/* Add all of the enum values of ENUMTYPE, to the FIELD_VEC elts,\n+   starting at offset IDX.  */\n+\n+static int\n+add_enum_fields_to_record_type (tree enumtype,\n+\t\t\t\tstruct sorted_fields_type *field_vec,\n+\t\t\t\tint idx)\n+{\n+  tree values;\n+  for (values = TYPE_VALUES (enumtype); values; values = TREE_CHAIN (values))\n+      field_vec->elts[idx++] = TREE_VALUE (values);\n+  return idx;\n+}\n+\n /* FIELD is a bit-field.  We are finishing the processing for its\n    enclosing type.  Issue any appropriate messages and set appropriate\n    flags.  Returns false if an error has been diagnosed.  */\n@@ -5994,7 +6011,6 @@ finish_struct_1 (tree t)\n   tree x;\n   /* A TREE_LIST.  The TREE_VALUE of each node is a FUNCTION_DECL.  */\n   tree virtuals = NULL_TREE;\n-  int n_fields = 0;\n \n   if (COMPLETE_TYPE_P (t))\n     {\n@@ -6112,15 +6128,7 @@ finish_struct_1 (tree t)\n      ultimately as the search bores through the inheritance\n      hierarchy), and we want this failure to occur quickly.  */\n \n-  n_fields = count_fields (TYPE_FIELDS (t));\n-  if (n_fields > 7)\n-    {\n-      struct sorted_fields_type *field_vec = sorted_fields_type_new (n_fields);\n-      add_fields_to_record_type (TYPE_FIELDS (t), field_vec, 0);\n-      qsort (field_vec->elts, n_fields, sizeof (tree),\n-\t     field_decl_cmp);\n-      CLASSTYPE_SORTED_FIELDS (t) = field_vec;\n-    }\n+  insert_into_classtype_sorted_fields (TYPE_FIELDS (t), t, 8);\n \n   /* Complain if one of the field types requires lower visibility.  */\n   constrain_class_visibility (t);\n@@ -6193,6 +6201,45 @@ finish_struct_1 (tree t)\n     }\n }\n \n+/* Insert FIELDS into T for the sorted case if the FIELDS count is\n+   equal to THRESHOLD or greater than THRESHOLD.  */\n+\n+static void \n+insert_into_classtype_sorted_fields (tree fields, tree t, int threshold)\n+{\n+  int n_fields = count_fields (fields);\n+  if (n_fields >= threshold)\n+    {\n+      struct sorted_fields_type *field_vec = sorted_fields_type_new (n_fields);\n+      add_fields_to_record_type (fields, field_vec, 0);\n+      qsort (field_vec->elts, n_fields, sizeof (tree), field_decl_cmp);\n+      CLASSTYPE_SORTED_FIELDS (t) = field_vec;\n+    }\n+}\n+\n+/* Insert lately defined enum ENUMTYPE into T for the sorted case.  */\n+\n+void\n+insert_late_enum_def_into_classtype_sorted_fields (tree enumtype, tree t)\n+{\n+  struct sorted_fields_type *sorted_fields = CLASSTYPE_SORTED_FIELDS (t);\n+  if (sorted_fields)\n+    {\n+      int i;\n+      int n_fields\n+\t= list_length (TYPE_VALUES (enumtype)) + sorted_fields->len;\n+      struct sorted_fields_type *field_vec = sorted_fields_type_new (n_fields);\n+      \n+      for (i = 0; i < sorted_fields->len; ++i)\n+\tfield_vec->elts[i] = sorted_fields->elts[i];\n+\n+      add_enum_fields_to_record_type (enumtype, field_vec,\n+\t\t\t\t      sorted_fields->len);\n+      qsort (field_vec->elts, n_fields, sizeof (tree), field_decl_cmp);\n+      CLASSTYPE_SORTED_FIELDS (t) = field_vec;\n+    }\n+}\n+\n /* When T was built up, the member declarations were added in reverse\n    order.  Rearrange them to declaration order.  */\n "}, {"sha": "a4b7ae3716df38e3a8bf6aa748a39e7e1dc61a15", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba0366cac405bdcea5395f970718593a18ee456/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba0366cac405bdcea5395f970718593a18ee456/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=cba0366cac405bdcea5395f970718593a18ee456", "patch": "@@ -4998,6 +4998,7 @@ extern tree* decl_cloned_function_p\t\t(const_tree, bool);\n extern void clone_function_decl\t\t\t(tree, int);\n extern void adjust_clone_args\t\t\t(tree);\n extern void deduce_noexcept_on_destructor       (tree);\n+extern void insert_late_enum_def_into_classtype_sorted_fields (tree, tree);\n \n /* in cvt.c */\n extern tree convert_to_reference\t\t(tree, tree, int, int, tree,"}, {"sha": "da23bda2980d5bafd74755b08c7b948d8226bd57", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba0366cac405bdcea5395f970718593a18ee456/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba0366cac405bdcea5395f970718593a18ee456/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=cba0366cac405bdcea5395f970718593a18ee456", "patch": "@@ -12384,6 +12384,12 @@ finish_enum_value_list (tree enumtype)\n   for (t = TYPE_MAIN_VARIANT (enumtype); t; t = TYPE_NEXT_VARIANT (t))\n     TYPE_VALUES (t) = TYPE_VALUES (enumtype);\n \n+  if (current_class_type\n+      && COMPLETE_TYPE_P (current_class_type)\n+      && UNSCOPED_ENUM_P (enumtype))\n+    insert_late_enum_def_into_classtype_sorted_fields (enumtype,\n+\t\t\t\t\t\t       current_class_type);\n+\n   /* Finish debugging output for this type.  */\n   rest_of_type_compilation (enumtype, namespace_bindings_p ());\n }"}, {"sha": "42fcf829444a145be63d984b099b3267bf88d890", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba0366cac405bdcea5395f970718593a18ee456/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba0366cac405bdcea5395f970718593a18ee456/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cba0366cac405bdcea5395f970718593a18ee456", "patch": "@@ -1,3 +1,8 @@\n+2012-06-07  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n+\n+\tPR c++/51214\n+\t* g++.dg/cpp0x/forw_enum11.C: New.\n+\n 2012-06-06  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/53567"}, {"sha": "8cabc038fcea758233b6ae5ed7b7d499af3e2122", "filename": "gcc/testsuite/g++.dg/cpp0x/forw_enum11.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba0366cac405bdcea5395f970718593a18ee456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba0366cac405bdcea5395f970718593a18ee456/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum11.C?ref=cba0366cac405bdcea5395f970718593a18ee456", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile { target c++11 } }\n+\n+enum { A = 1 };\n+struct T\n+{\n+  int i1, i2, i3, i4, i5, i6, i7;\n+  enum E2 : int;\n+\n+  void f();\n+};\n+\n+enum T::E2 : int { A1 = A, A2 = 23 };\n+\n+static_assert(int(T::A1) == 1, \"error\");\n+static_assert(int(T::A2) == 23, \"error\");\n+\n+void T::f()\n+{\n+  static_assert(int(T::A1) == 1, \"error\");\n+  static_assert(int(T::A2) == 23, \"error\");\n+  static_assert(int(A1) == 1, \"error\");\n+  static_assert(int(A2) == 23, \"error\");\n+}"}]}