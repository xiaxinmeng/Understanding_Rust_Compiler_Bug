{"sha": "92905f614e206a94d4ba72a4d425f78859ead418", "node_id": "C_kwDOANBUbNoAKDkyOTA1ZjYxNGUyMDZhOTRkNGJhNzJhNGQ0MjVmNzg4NTllYWQ0MTg", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2022-11-18T14:29:36Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2022-11-18T14:29:36Z"}, "message": "aarch64: Fix LDAPURS assembly output\n\n... And another follow-up once I realised that the sign-extending load, of course,\nneeds to have strictly an X-reg as a destination for DImode extensions and a W-reg\nfor SImode ones.\n\nTested on aarch64-none-linux.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/atomics.md (*aarch64_atomic_load<ALLX:mode>_rcpc_sext):\n\tUse <GPI:w>  for destination format.\n\t* config/aarch64/iterators.md (w_sz): Delete.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/ldapr-sext.c: Adjust expected output.", "tree": {"sha": "73333eb512865b2dfeca07f02aa8eaf494957835", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73333eb512865b2dfeca07f02aa8eaf494957835"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92905f614e206a94d4ba72a4d425f78859ead418", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92905f614e206a94d4ba72a4d425f78859ead418", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92905f614e206a94d4ba72a4d425f78859ead418", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92905f614e206a94d4ba72a4d425f78859ead418/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20d2a8c24f3ca487ffd35fefcc9b1562bb10b609", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20d2a8c24f3ca487ffd35fefcc9b1562bb10b609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20d2a8c24f3ca487ffd35fefcc9b1562bb10b609"}], "stats": {"total": 10, "additions": 3, "deletions": 7}, "files": [{"sha": "5407cf7be49949c18577bc0e637bb06ccba1d49d", "filename": "gcc/config/aarch64/atomics.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92905f614e206a94d4ba72a4d425f78859ead418/gcc%2Fconfig%2Faarch64%2Fatomics.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92905f614e206a94d4ba72a4d425f78859ead418/gcc%2Fconfig%2Faarch64%2Fatomics.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fatomics.md?ref=92905f614e206a94d4ba72a4d425f78859ead418", "patch": "@@ -723,7 +723,7 @@\n          (match_operand:SI 2 \"const_int_operand\")]\t\t\t;; model\n        UNSPECV_LDAP)))]\n   \"TARGET_RCPC2 && (<GPI:sizen> > <ALLX:sizen>)\"\n-  \"ldapurs<ALLX:size>\\t%<ALLX:w_sx>0, %1\"\n+  \"ldapurs<ALLX:size>\\t%<GPI:w>0, %1\"\n )\n \n (define_insn \"atomic_store<mode>\""}, {"sha": "7c7fcbbc24b99b3ad8687097a432fea64af47226", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92905f614e206a94d4ba72a4d425f78859ead418/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92905f614e206a94d4ba72a4d425f78859ead418/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=92905f614e206a94d4ba72a4d425f78859ead418", "patch": "@@ -1012,10 +1012,6 @@\n ;; 32-bit version and \"%x0\" in the 64-bit version.\n (define_mode_attr w [(QI \"w\") (HI \"w\") (SI \"w\") (DI \"x\") (SF \"s\") (DF \"d\")])\n \n-;; Similar to w above, but used for sign-extending loads where we want to\n-;; use %x0 for SImode.\n-(define_mode_attr w_sx [(QI \"w\") (HI \"w\") (SI \"x\")])\n-\n ;; The size of access, in bytes.\n (define_mode_attr ldst_sz [(SI \"4\") (DI \"8\")])\n ;; Likewise for load/store pair."}, {"sha": "f57c09d0580624d884fd538075b4e2028aeea733", "filename": "gcc/testsuite/gcc.target/aarch64/ldapr-sext.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92905f614e206a94d4ba72a4d425f78859ead418/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldapr-sext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92905f614e206a94d4ba72a4d425f78859ead418/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldapr-sext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldapr-sext.c?ref=92905f614e206a94d4ba72a4d425f78859ead418", "patch": "@@ -24,7 +24,7 @@ test_##name (void)\t\t\t\t\t\t\\\n /*\n **test_s8_s64:\n **...\n-**\tldapursb\tw0, \\[x[0-9]+\\]\n+**\tldapursb\tx0, \\[x[0-9]+\\]\n **\tret\n */\n \n@@ -33,7 +33,7 @@ TEST(s8_s64, s8, long long)\n /*\n **test_s16_s64:\n **...\n-**\tldapursh\tw0, \\[x[0-9]+\\]\n+**\tldapursh\tx0, \\[x[0-9]+\\]\n **\tret\n */\n "}]}