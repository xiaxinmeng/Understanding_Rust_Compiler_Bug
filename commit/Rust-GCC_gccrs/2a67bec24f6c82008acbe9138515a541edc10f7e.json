{"sha": "2a67bec24f6c82008acbe9138515a541edc10f7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE2N2JlYzI0ZjZjODIwMDhhY2JlOTEzODUxNWE1NDFlZGMxMGY3ZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2006-12-14T05:49:06Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2006-12-14T05:49:06Z"}, "message": "re PR c++/19564 (-Wparentheses does not work with the C++ front-end)\n\n\tPR c++/19564\n\tPR c++/19756\ngcc/:\n\t* c-typeck.c (parser_build_binary_op): Move parentheses warnings\n\tto warn_about_parentheses in c-common.c.\n\t* c-common.c (warn_about_parentheses): New function.\n\t* c-common.h (warn_about_parentheses): Declare.\n\t* doc/invoke.texi (Warning Options): Update -Wparentheses\n\tdescription.\ngcc/cp/:\n\t* parser.c (cp_parser_expression_stack_entry): Add field\n\tlhs_type.\n\t(cp_parser_binary_expression): Track tree code of left hand side\n\tof expression.  Use it when calling build_x_binary_op.\n\t(cp_parser_selection_statement): Add if_p parameter.  Change all\n\tcallers.  Warn about ambiguous else.\n\t(cp_parser_statement): Add if_p parameter.  Change all callers.\n\t(cp_parser_implicitly_scoped_statement): Likewise.\n\t* typeck.c (build_x_binary_op): Add parameters arg1_code and\n\targ2_code.  Change all callers.  Call warn_about_parentheses.\n\t* cp-tree.h (build_x_binary_op): Update declaration.\ngcc/testsuite/:\n\t* g++.dg/warn/Wparentheses-5.C: New test.\n\t* g++.dg/warn/Wparentheses-6.C: New test.\n\t* g++.dg/warn/Wparentheses-7.C: New test.\n\t* g++.dg/warn/Wparentheses-8.C: New test.\n\t* g++.dg/warn/Wparentheses-9.C: New test.\n\t* g++.dg/warn/Wparentheses-10.C: New test.\n\t* g++.dg/warn/Wparentheses-11.C: New test.\n\t* g++.dg/warn/Wparentheses-12.C: New test.\n\t* g++.dg/warn/Wparentheses-13.C: New test.\n\t* g++.dg/warn/Wparentheses-14.C: New test.\n\t* g++.dg/warn/Wparentheses-15.C: New test.\n\t* g++.dg/warn/Wparentheses-16.C: New test.\n\t* g++.dg/warn/Wparentheses-17.C: New test.\n\t* g++.dg/warn/Wparentheses-18.C: New test.\n\t* g++.dg/warn/Wparentheses-19.C: New test.\n\t* g++.dg/warn/Wparentheses-20.C: New test.\n\t* g++.dg/warn/Wparentheses-21.C: New test.\nlibstdc++-v3/:\n\t* include/bits/locale_facets.tcc (num_get<>::_M_extract_float):\n\tAdd parentheses around && within || to avoid warning.\n\t(num_get<>::_M_extract_int): Likewise.\n\t(money_get<>::_M_extract): Likewise.\n\t(num_get<>::do_get(iter_type, iter_type, ios_base&,\n\tios_base::iostate&, void*&)): Add parentheses around & within | to\n\tavoid warning.\n\t(num_put<>::do_put(iter_type, ios_base&, char_type, const void*)):\n\tLikewise.\n\t* include/bits/streambuf_iterator.h (istreambuf_iterator::equal):\n\tAdd parentheses around && within || to avoid warning.\n\t* libsupc++/tinfo.cc (__do_dyncast): Likewise.\n\t* src/locale.cc (locale::_S_normalize_category): Likewise.\n\t* include/bits/stl_tree.h (_Rb_tree<>::_M_insert_unique): Add\n\tbraces to avoid ambiguous else warning.\n\t* src/strstream.cc (strstreambuf::_M_free): Likewise.\n\t* src/tree.cc (_Rb_tree_rebalance_for_erase): Likewise.\n\nFrom-SVN: r119855", "tree": {"sha": "50f6bb9f779d4a706c820c0da135fd92bcd9c11a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50f6bb9f779d4a706c820c0da135fd92bcd9c11a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a67bec24f6c82008acbe9138515a541edc10f7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a67bec24f6c82008acbe9138515a541edc10f7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a67bec24f6c82008acbe9138515a541edc10f7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a67bec24f6c82008acbe9138515a541edc10f7e/comments", "author": null, "committer": null, "parents": [{"sha": "73f30c6308cc7e246841e83969a1f4551bac3d3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f30c6308cc7e246841e83969a1f4551bac3d3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73f30c6308cc7e246841e83969a1f4551bac3d3d"}], "stats": {"total": 1774, "additions": 1633, "deletions": 141}, "files": [{"sha": "83c65d1df163fbee0be20d61b3ba33edfeb17ff8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -1,3 +1,14 @@\n+2006-12-13  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR c++/19564\n+\tPR c++/19756\n+\t* c-typeck.c (parser_build_binary_op): Move parentheses warnings\n+\tto warn_about_parentheses in c-common.c.\n+\t* c-common.c (warn_about_parentheses): New function.\n+\t* c-common.h (warn_about_parentheses): Declare.\n+\t* doc/invoke.texi (Warning Options): Update -Wparentheses\n+\tdescription.\n+\n 2006-12-13  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* tree-ssa-loop-ivopts.c: Include tree-affine.h."}, {"sha": "4771a53ff24be725a4cceaf4593e1fef19cabce0", "filename": "gcc/c-common.c", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -6606,5 +6606,87 @@ warn_array_subscript_with_type_char (tree index)\n     warning (OPT_Wchar_subscripts, \"array subscript has type %<char%>\");\n }\n \n+/* Implement -Wparentheses for the unexpected C precedence rules, to\n+   cover cases like x + y << z which readers are likely to\n+   misinterpret.  We have seen an expression in which CODE is a binary\n+   operator used to combine expressions headed by CODE_LEFT and\n+   CODE_RIGHT.  CODE_LEFT and CODE_RIGHT may be ERROR_MARK, which\n+   means that that side of the expression was not formed using a\n+   binary operator, or it was enclosed in parentheses.  */\n+\n+void\n+warn_about_parentheses (enum tree_code code, enum tree_code code_left,\n+\t\t\tenum tree_code code_right)\n+{\n+  if (!warn_parentheses)\n+    return;\n+\n+  if (code == LSHIFT_EXPR || code == RSHIFT_EXPR)\n+    {\n+      if (code_left == PLUS_EXPR || code_left == MINUS_EXPR\n+\t  || code_right == PLUS_EXPR || code_right == MINUS_EXPR)\n+\twarning (OPT_Wparentheses,\n+\t\t \"suggest parentheses around + or - inside shift\");\n+    }\n+\n+  if (code == TRUTH_ORIF_EXPR)\n+    {\n+      if (code_left == TRUTH_ANDIF_EXPR\n+\t  || code_right == TRUTH_ANDIF_EXPR)\n+\twarning (OPT_Wparentheses,\n+\t\t \"suggest parentheses around && within ||\");\n+    }\n+\n+  if (code == BIT_IOR_EXPR)\n+    {\n+      if (code_left == BIT_AND_EXPR || code_left == BIT_XOR_EXPR\n+\t  || code_left == PLUS_EXPR || code_left == MINUS_EXPR\n+\t  || code_right == BIT_AND_EXPR || code_right == BIT_XOR_EXPR\n+\t  || code_right == PLUS_EXPR || code_right == MINUS_EXPR)\n+\twarning (OPT_Wparentheses,\n+\t\t \"suggest parentheses around arithmetic in operand of |\");\n+      /* Check cases like x|y==z */\n+      if (TREE_CODE_CLASS (code_left) == tcc_comparison\n+\t  || TREE_CODE_CLASS (code_right) == tcc_comparison)\n+\twarning (OPT_Wparentheses,\n+\t\t \"suggest parentheses around comparison in operand of |\");\n+    }\n+\n+  if (code == BIT_XOR_EXPR)\n+    {\n+      if (code_left == BIT_AND_EXPR\n+\t  || code_left == PLUS_EXPR || code_left == MINUS_EXPR\n+\t  || code_right == BIT_AND_EXPR\n+\t  || code_right == PLUS_EXPR || code_right == MINUS_EXPR)\n+\twarning (OPT_Wparentheses,\n+\t\t \"suggest parentheses around arithmetic in operand of ^\");\n+      /* Check cases like x^y==z */\n+      if (TREE_CODE_CLASS (code_left) == tcc_comparison\n+\t  || TREE_CODE_CLASS (code_right) == tcc_comparison)\n+\twarning (OPT_Wparentheses,\n+\t\t \"suggest parentheses around comparison in operand of ^\");\n+    }\n+\n+  if (code == BIT_AND_EXPR)\n+    {\n+      if (code_left == PLUS_EXPR || code_left == MINUS_EXPR\n+\t  || code_right == PLUS_EXPR || code_right == MINUS_EXPR)\n+\twarning (OPT_Wparentheses,\n+\t\t \"suggest parentheses around + or - in operand of &\");\n+      /* Check cases like x&y==z */\n+      if (TREE_CODE_CLASS (code_left) == tcc_comparison\n+\t  || TREE_CODE_CLASS (code_right) == tcc_comparison)\n+\twarning (OPT_Wparentheses,\n+\t\t \"suggest parentheses around comparison in operand of &\");\n+    }\n+\n+  /* Similarly, check for cases like 1<=i<=10 that are probably errors.  */\n+  if (TREE_CODE_CLASS (code) == tcc_comparison\n+      && (TREE_CODE_CLASS (code_left) == tcc_comparison\n+\t  || TREE_CODE_CLASS (code_right) == tcc_comparison))\n+    warning (OPT_Wparentheses, \"comparisons like X<=Y<=Z do not \"\n+\t     \"have their mathematical meaning\");\n+}\n+\n \n #include \"gt-c-common.h\""}, {"sha": "b2b10bd2d7bfce29a522d9c976991c1d7f57fb65", "filename": "gcc/c-common.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -859,6 +859,9 @@ extern int complete_array_type (tree *, tree, bool);\n extern tree builtin_type_for_size (int, bool);\n \n extern void warn_array_subscript_with_type_char (tree);\n+extern void warn_about_parentheses (enum tree_code, enum tree_code,\n+\t\t\t\t    enum tree_code);\n+\n \n /* In c-gimplify.c  */\n extern void c_genericize (tree);"}, {"sha": "08f7d4a3a7965f4637c69571f6653fd5453cf873", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 67, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -2629,73 +2629,7 @@ parser_build_binary_op (enum tree_code code, struct c_expr arg1,\n   /* Check for cases such as x+y<<z which users are likely\n      to misinterpret.  */\n   if (warn_parentheses)\n-    {\n-      if (code == LSHIFT_EXPR || code == RSHIFT_EXPR)\n-\t{\n-\t  if (code1 == PLUS_EXPR || code1 == MINUS_EXPR\n-\t      || code2 == PLUS_EXPR || code2 == MINUS_EXPR)\n-\t    warning (OPT_Wparentheses,\n-\t\t     \"suggest parentheses around + or - inside shift\");\n-\t}\n-\n-      if (code == TRUTH_ORIF_EXPR)\n-\t{\n-\t  if (code1 == TRUTH_ANDIF_EXPR\n-\t      || code2 == TRUTH_ANDIF_EXPR)\n-\t    warning (OPT_Wparentheses,\n-\t\t     \"suggest parentheses around && within ||\");\n-\t}\n-\n-      if (code == BIT_IOR_EXPR)\n-\t{\n-\t  if (code1 == BIT_AND_EXPR || code1 == BIT_XOR_EXPR\n-\t      || code1 == PLUS_EXPR || code1 == MINUS_EXPR\n-\t      || code2 == BIT_AND_EXPR || code2 == BIT_XOR_EXPR\n-\t      || code2 == PLUS_EXPR || code2 == MINUS_EXPR)\n-\t    warning (OPT_Wparentheses,\n-\t\t     \"suggest parentheses around arithmetic in operand of |\");\n-\t  /* Check cases like x|y==z */\n-\t  if (TREE_CODE_CLASS (code1) == tcc_comparison\n-\t      || TREE_CODE_CLASS (code2) == tcc_comparison)\n-\t    warning (OPT_Wparentheses,\n-\t\t     \"suggest parentheses around comparison in operand of |\");\n-\t}\n-\n-      if (code == BIT_XOR_EXPR)\n-\t{\n-\t  if (code1 == BIT_AND_EXPR\n-\t      || code1 == PLUS_EXPR || code1 == MINUS_EXPR\n-\t      || code2 == BIT_AND_EXPR\n-\t      || code2 == PLUS_EXPR || code2 == MINUS_EXPR)\n-\t    warning (OPT_Wparentheses,\n-\t\t     \"suggest parentheses around arithmetic in operand of ^\");\n-\t  /* Check cases like x^y==z */\n-\t  if (TREE_CODE_CLASS (code1) == tcc_comparison\n-\t      || TREE_CODE_CLASS (code2) == tcc_comparison)\n-\t    warning (OPT_Wparentheses,\n-\t\t     \"suggest parentheses around comparison in operand of ^\");\n-\t}\n-\n-      if (code == BIT_AND_EXPR)\n-\t{\n-\t  if (code1 == PLUS_EXPR || code1 == MINUS_EXPR\n-\t      || code2 == PLUS_EXPR || code2 == MINUS_EXPR)\n-\t    warning (OPT_Wparentheses,\n-\t\t     \"suggest parentheses around + or - in operand of &\");\n-\t  /* Check cases like x&y==z */\n-\t  if (TREE_CODE_CLASS (code1) == tcc_comparison\n-\t      || TREE_CODE_CLASS (code2) == tcc_comparison)\n-\t    warning (OPT_Wparentheses,\n-\t\t     \"suggest parentheses around comparison in operand of &\");\n-\t}\n-      /* Similarly, check for cases like 1<=i<=10 that are probably errors.  */\n-      if (TREE_CODE_CLASS (code) == tcc_comparison\n-\t  && (TREE_CODE_CLASS (code1) == tcc_comparison\n-\t      || TREE_CODE_CLASS (code2) == tcc_comparison))\n-\twarning (OPT_Wparentheses, \"comparisons like X<=Y<=Z do not \"\n-\t\t \"have their mathematical meaning\");\n-\n-    }\n+    warn_about_parentheses (code, code1, code2);\n \n   /* Warn about comparisons against string literals, with the exception\n      of testing for equality or inequality of a string literal with NULL.  */"}, {"sha": "5f8b607676eb70a959bba5c2f3ad5a848c36f2b3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -1,3 +1,19 @@\n+2006-12-13  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR c++/19564\n+\tPR c++/19756\n+\t* parser.c (cp_parser_expression_stack_entry): Add field\n+\tlhs_type.\n+\t(cp_parser_binary_expression): Track tree code of left hand side\n+\tof expression.  Use it when calling build_x_binary_op.\n+\t(cp_parser_selection_statement): Add if_p parameter.  Change all\n+\tcallers.  Warn about ambiguous else.\n+\t(cp_parser_statement): Add if_p parameter.  Change all callers.\n+\t(cp_parser_implicitly_scoped_statement): Likewise.\n+\t* typeck.c (build_x_binary_op): Add parameters arg1_code and\n+\targ2_code.  Change all callers.  Call warn_about_parentheses.\n+\t* cp-tree.h (build_x_binary_op): Update declaration.\n+\n 2006-12-12  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* decl.c (build_enumerator): Update error message to match C"}, {"sha": "3f63b8fc8d9cb3b64e116cd26d3d450d0773a13c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -4458,8 +4458,9 @@ extern tree build_x_indirect_ref\t\t(tree, const char *);\n extern tree build_indirect_ref\t\t\t(tree, const char *);\n extern tree build_array_ref\t\t\t(tree, tree);\n extern tree get_member_function_from_ptrfunc\t(tree *, tree);\n-extern tree build_x_binary_op\t\t\t(enum tree_code, tree, tree,\n-\t\t\t\t\t\t bool *);\n+extern tree build_x_binary_op\t\t\t(enum tree_code, tree,\n+\t\t\t\t\t\t enum tree_code, tree,\n+\t\t\t\t\t\t enum tree_code, bool *);\n extern tree build_x_unary_op\t\t\t(enum tree_code, tree);\n extern tree unary_complex_lvalue\t\t(enum tree_code, tree);\n extern tree build_x_conditional_expr\t\t(tree, tree, tree);"}, {"sha": "0521136249b8f9922fb06b87d32dcc95008fdded", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 80, "deletions": 21, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -1158,8 +1158,15 @@ typedef enum cp_parser_status_kind\n \n typedef struct cp_parser_expression_stack_entry\n {\n+  /* Left hand side of the binary operation we are currently\n+     parsing.  */\n   tree lhs;\n+  /* Original tree code for left hand side, if it was a binary\n+     expression itself (used for -Wparentheses).  */\n+  enum tree_code lhs_type;\n+  /* Tree code for the binary operation we are parsing.  */\n   enum tree_code tree_type;\n+  /* Precedence of the binary operation we are parsing.  */\n   int prec;\n } cp_parser_expression_stack_entry;\n \n@@ -1517,7 +1524,7 @@ static tree cp_parser_builtin_offsetof\n /* Statements [gram.stmt.stmt]  */\n \n static void cp_parser_statement\n-  (cp_parser *, tree, bool);\n+  (cp_parser *, tree, bool, bool *);\n static void cp_parser_label_for_labeled_statement\n   (cp_parser *);\n static tree cp_parser_expression_statement\n@@ -1527,7 +1534,7 @@ static tree cp_parser_compound_statement\n static void cp_parser_statement_seq_opt\n   (cp_parser *, tree);\n static tree cp_parser_selection_statement\n-  (cp_parser *);\n+  (cp_parser *, bool *);\n static tree cp_parser_condition\n   (cp_parser *);\n static tree cp_parser_iteration_statement\n@@ -1540,7 +1547,7 @@ static void cp_parser_declaration_statement\n   (cp_parser *);\n \n static tree cp_parser_implicitly_scoped_statement\n-  (cp_parser *);\n+  (cp_parser *, bool *);\n static void cp_parser_already_scoped_statement\n   (cp_parser *);\n \n@@ -5685,12 +5692,13 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p)\n   cp_parser_expression_stack_entry *sp = &stack[0];\n   tree lhs, rhs;\n   cp_token *token;\n-  enum tree_code tree_type;\n+  enum tree_code tree_type, lhs_type, rhs_type;\n   enum cp_parser_prec prec = PREC_NOT_OPERATOR, new_prec, lookahead_prec;\n   bool overloaded_p;\n \n   /* Parse the first expression.  */\n   lhs = cp_parser_cast_expression (parser, /*address_p=*/false, cast_p);\n+  lhs_type = ERROR_MARK;\n \n   for (;;)\n     {\n@@ -5723,6 +5731,7 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p)\n       /* Extract another operand.  It may be the RHS of this expression\n \t or the LHS of a new, higher priority expression.  */\n       rhs = cp_parser_simple_cast_expression (parser);\n+      rhs_type = ERROR_MARK;\n \n       /* Get another operator token.  Look up its precedence to avoid\n \t building a useless (immediately popped) stack entry for common\n@@ -5738,8 +5747,10 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p)\n \t  sp->prec = prec;\n \t  sp->tree_type = tree_type;\n \t  sp->lhs = lhs;\n+\t  sp->lhs_type = lhs_type;\n \t  sp++;\n \t  lhs = rhs;\n+\t  lhs_type = rhs_type;\n \t  prec = new_prec;\n \t  new_prec = lookahead_prec;\n \t  goto get_rhs;\n@@ -5756,11 +5767,15 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p)\n \t  prec = sp->prec;\n \t  tree_type = sp->tree_type;\n \t  rhs = lhs;\n+\t  rhs_type = lhs_type;\n \t  lhs = sp->lhs;\n+\t  lhs_type = sp->lhs_type;\n \t}\n \n       overloaded_p = false;\n-      lhs = build_x_binary_op (tree_type, lhs, rhs, &overloaded_p);\n+      lhs = build_x_binary_op (tree_type, lhs, lhs_type, rhs, rhs_type,\n+\t\t\t       &overloaded_p);\n+      lhs_type = tree_type;\n \n       /* If the binary operator required the use of an overloaded operator,\n \t then this expression cannot be an integral constant-expression.\n@@ -6177,17 +6192,23 @@ cp_parser_builtin_offsetof (cp_parser *parser)\n      try-block\n \n   IN_COMPOUND is true when the statement is nested inside a\n-  cp_parser_compound_statement; this matters for certain pragmas.  */\n+  cp_parser_compound_statement; this matters for certain pragmas.\n+\n+  If IF_P is not NULL, *IF_P is set to indicate whether the statement\n+  is a (possibly labeled) if statement which is not enclosed in braces\n+  and has an else clause.  This is used to implement -Wparentheses.  */\n \n static void\n cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n-\t\t     bool in_compound)\n+\t\t     bool in_compound, bool *if_p)\n {\n   tree statement;\n   cp_token *token;\n   location_t statement_location;\n \n  restart:\n+  if (if_p != NULL)\n+    *if_p = false;\n   /* There is no statement yet.  */\n   statement = NULL_TREE;\n   /* Peek at the next token.  */\n@@ -6212,7 +6233,7 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n \n \tcase RID_IF:\n \tcase RID_SWITCH:\n-\t  statement = cp_parser_selection_statement (parser);\n+\t  statement = cp_parser_selection_statement (parser, if_p);\n \t  break;\n \n \tcase RID_WHILE:\n@@ -6477,7 +6498,7 @@ cp_parser_statement_seq_opt (cp_parser* parser, tree in_statement_expr)\n \tbreak;\n \n       /* Parse the statement.  */\n-      cp_parser_statement (parser, in_statement_expr, true);\n+      cp_parser_statement (parser, in_statement_expr, true, NULL);\n     }\n }\n \n@@ -6488,14 +6509,22 @@ cp_parser_statement_seq_opt (cp_parser* parser, tree in_statement_expr)\n      if ( condition ) statement else statement\n      switch ( condition ) statement\n \n-   Returns the new IF_STMT or SWITCH_STMT.  */\n+   Returns the new IF_STMT or SWITCH_STMT.\n+\n+   If IF_P is not NULL, *IF_P is set to indicate whether the statement\n+   is a (possibly labeled) if statement which is not enclosed in\n+   braces and has an else clause.  This is used to implement\n+   -Wparentheses.  */\n \n static tree\n-cp_parser_selection_statement (cp_parser* parser)\n+cp_parser_selection_statement (cp_parser* parser, bool *if_p)\n {\n   cp_token *token;\n   enum rid keyword;\n \n+  if (if_p != NULL)\n+    *if_p = false;\n+\n   /* Peek at the next token.  */\n   token = cp_parser_require (parser, CPP_KEYWORD, \"selection-statement\");\n \n@@ -6531,11 +6560,13 @@ cp_parser_selection_statement (cp_parser* parser)\n \n \tif (keyword == RID_IF)\n \t  {\n+\t    bool nested_if;\n+\n \t    /* Add the condition.  */\n \t    finish_if_stmt_cond (condition, statement);\n \n \t    /* Parse the then-clause.  */\n-\t    cp_parser_implicitly_scoped_statement (parser);\n+\t    cp_parser_implicitly_scoped_statement (parser, &nested_if);\n \t    finish_then_clause (statement);\n \n \t    /* If the next token is `else', parse the else-clause.  */\n@@ -6546,8 +6577,28 @@ cp_parser_selection_statement (cp_parser* parser)\n \t\tcp_lexer_consume_token (parser->lexer);\n \t\tbegin_else_clause (statement);\n \t\t/* Parse the else-clause.  */\n-\t\tcp_parser_implicitly_scoped_statement (parser);\n+\t\tcp_parser_implicitly_scoped_statement (parser, NULL);\n \t\tfinish_else_clause (statement);\n+\n+\t\t/* If we are currently parsing a then-clause, then\n+\t\t   IF_P will not be NULL.  We set it to true to\n+\t\t   indicate that this if statement has an else clause.\n+\t\t   This may trigger the Wparentheses warning below\n+\t\t   when we get back up to the parent if statement.  */\n+\t\tif (if_p != NULL)\n+\t\t  *if_p = true;\n+\t      }\n+\t    else\n+\t      {\n+\t\t/* This if statement does not have an else clause.  If\n+\t\t   NESTED_IF is true, then the then-clause is an if\n+\t\t   statement which does have an else clause.  We warn\n+\t\t   about the potential ambiguity.  */\n+\t\tif (nested_if)\n+\t\t  warning (OPT_Wparentheses,\n+\t\t\t   (\"%Hsuggest explicit braces \"\n+\t\t\t    \"to avoid ambiguous %<else%>\"),\n+\t\t\t   EXPR_LOCUS (statement));\n \t      }\n \n \t    /* Now we're all done with the if-statement.  */\n@@ -6566,7 +6617,7 @@ cp_parser_selection_statement (cp_parser* parser)\n \t    in_statement = parser->in_statement;\n \t    parser->in_switch_statement_p = true;\n \t    parser->in_statement |= IN_SWITCH_STMT;\n-\t    cp_parser_implicitly_scoped_statement (parser);\n+\t    cp_parser_implicitly_scoped_statement (parser, NULL);\n \t    parser->in_switch_statement_p = in_switch_statement_p;\n \t    parser->in_statement = in_statement;\n \n@@ -6744,7 +6795,7 @@ cp_parser_iteration_statement (cp_parser* parser)\n \tstatement = begin_do_stmt ();\n \t/* Parse the body of the do-statement.  */\n \tparser->in_statement = IN_ITERATION_STMT;\n-\tcp_parser_implicitly_scoped_statement (parser);\n+\tcp_parser_implicitly_scoped_statement (parser, NULL);\n \tparser->in_statement = in_statement;\n \tfinish_do_body (statement);\n \t/* Look for the `while' keyword.  */\n@@ -6986,13 +7037,21 @@ cp_parser_declaration_statement (cp_parser* parser)\n    but ensures that is in its own scope, even if it is not a\n    compound-statement.\n \n+   If IF_P is not NULL, *IF_P is set to indicate whether the statement\n+   is a (possibly labeled) if statement which is not enclosed in\n+   braces and has an else clause.  This is used to implement\n+   -Wparentheses.\n+\n    Returns the new statement.  */\n \n static tree\n-cp_parser_implicitly_scoped_statement (cp_parser* parser)\n+cp_parser_implicitly_scoped_statement (cp_parser* parser, bool *if_p)\n {\n   tree statement;\n \n+  if (if_p != NULL)\n+    *if_p = false;\n+\n   /* Mark if () ; with a special NOP_EXPR.  */\n   if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))\n     {\n@@ -7008,7 +7067,7 @@ cp_parser_implicitly_scoped_statement (cp_parser* parser)\n       /* Create a compound-statement.  */\n       statement = begin_compound_stmt (0);\n       /* Parse the dependent-statement.  */\n-      cp_parser_statement (parser, NULL_TREE, false);\n+      cp_parser_statement (parser, NULL_TREE, false, if_p);\n       /* Finish the dummy compound-statement.  */\n       finish_compound_stmt (statement);\n     }\n@@ -7027,7 +7086,7 @@ cp_parser_already_scoped_statement (cp_parser* parser)\n {\n   /* If the token is a `{', then we must take special action.  */\n   if (cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_BRACE))\n-    cp_parser_statement (parser, NULL_TREE, false);\n+    cp_parser_statement (parser, NULL_TREE, false, NULL);\n   else\n     {\n       /* Avoid calling cp_parser_compound_statement, so that we\n@@ -18654,7 +18713,7 @@ cp_parser_omp_structured_block (cp_parser *parser)\n   tree stmt = begin_omp_structured_block ();\n   unsigned int save = cp_parser_begin_omp_structured_block (parser);\n \n-  cp_parser_statement (parser, NULL_TREE, false);\n+  cp_parser_statement (parser, NULL_TREE, false, NULL);\n \n   cp_parser_end_omp_structured_block (parser, save);\n   return finish_omp_structured_block (stmt);\n@@ -18899,7 +18958,7 @@ cp_parser_omp_for_loop (cp_parser *parser)\n   /* Note that the grammar doesn't call for a structured block here,\n      though the loop as a whole is a structured block.  */\n   body = push_stmt_list ();\n-  cp_parser_statement (parser, NULL_TREE, false);\n+  cp_parser_statement (parser, NULL_TREE, false, NULL);\n   body = pop_stmt_list (body);\n \n   return finish_omp_for (loc, decl, init, cond, incr, body, pre_body);\n@@ -18992,7 +19051,7 @@ cp_parser_omp_sections_scope (cp_parser *parser)\n \n       while (1)\n \t{\n-\t  cp_parser_statement (parser, NULL_TREE, false);\n+\t  cp_parser_statement (parser, NULL_TREE, false, NULL);\n \n \t  tok = cp_lexer_peek_token (parser->lexer);\n \t  if (tok->pragma_kind == PRAGMA_OMP_SECTION)"}, {"sha": "f9a728fa4b5e7bc299590913e8b9d359f798fb59", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -9105,7 +9105,13 @@ tsubst_copy_and_build (tree t,\n       return build_x_binary_op\n \t(TREE_CODE (t),\n \t RECUR (TREE_OPERAND (t, 0)),\n+\t (TREE_NO_WARNING (TREE_OPERAND (t, 0))\n+\t  ? ERROR_MARK\n+\t  : TREE_CODE (TREE_OPERAND (t, 0))),\n \t RECUR (TREE_OPERAND (t, 1)),\n+\t (TREE_NO_WARNING (TREE_OPERAND (t, 1))\n+\t  ? ERROR_MARK\n+\t  : TREE_CODE (TREE_OPERAND (t, 1))),\n \t /*overloaded_p=*/NULL);\n \n     case SCOPE_REF:\n@@ -9114,7 +9120,14 @@ tsubst_copy_and_build (tree t,\n     case ARRAY_REF:\n       op1 = tsubst_non_call_postfix_expression (TREE_OPERAND (t, 0),\n \t\t\t\t\t\targs, complain, in_decl);\n-      return build_x_binary_op (ARRAY_REF, op1, RECUR (TREE_OPERAND (t, 1)),\n+      return build_x_binary_op (ARRAY_REF, op1,\n+\t\t\t\t(TREE_NO_WARNING (TREE_OPERAND (t, 0))\n+\t\t\t\t ? ERROR_MARK\n+\t\t\t\t : TREE_CODE (TREE_OPERAND (t, 0))),\n+\t\t\t\tRECUR (TREE_OPERAND (t, 1)),\n+\t\t\t\t(TREE_NO_WARNING (TREE_OPERAND (t, 1))\n+\t\t\t\t ? ERROR_MARK\n+\t\t\t\t : TREE_CODE (TREE_OPERAND (t, 1))),\n \t\t\t\t/*overloaded_p=*/NULL);\n \n     case SIZEOF_EXPR:"}, {"sha": "cb09d4c987c027e7322fc14759194a7be66ffd4a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -1648,17 +1648,20 @@ rationalize_conditional_expr (enum tree_code code, tree t)\n      are equal, so we know what conditional expression this used to be.  */\n   if (TREE_CODE (t) == MIN_EXPR || TREE_CODE (t) == MAX_EXPR)\n     {\n+      tree op0 = TREE_OPERAND (t, 0);\n+      tree op1 = TREE_OPERAND (t, 1);\n+\n       /* The following code is incorrect if either operand side-effects.  */\n-      gcc_assert (!TREE_SIDE_EFFECTS (TREE_OPERAND (t, 0))\n-\t\t  && !TREE_SIDE_EFFECTS (TREE_OPERAND (t, 1)));\n+      gcc_assert (!TREE_SIDE_EFFECTS (op0)\n+\t\t  && !TREE_SIDE_EFFECTS (op1));\n       return\n \tbuild_conditional_expr (build_x_binary_op ((TREE_CODE (t) == MIN_EXPR\n \t\t\t\t\t\t    ? LE_EXPR : GE_EXPR),\n-\t\t\t\t\t\t   TREE_OPERAND (t, 0),\n-\t\t\t\t\t\t   TREE_OPERAND (t, 1),\n+\t\t\t\t\t\t   op0, TREE_CODE (op0),\n+\t\t\t\t\t\t   op1, TREE_CODE (op1),\n \t\t\t\t\t\t   /*overloaded_p=*/NULL),\n-\t\t\t    build_unary_op (code, TREE_OPERAND (t, 0), 0),\n-\t\t\t    build_unary_op (code, TREE_OPERAND (t, 1), 0));\n+\t\t\t    build_unary_op (code, op0, 0),\n+\t\t\t    build_unary_op (code, op1, 0));\n     }\n \n   return\n@@ -2865,11 +2868,19 @@ convert_arguments (tree typelist, tree values, tree fndecl, int flags)\n }\n \f\n /* Build a binary-operation expression, after performing default\n-   conversions on the operands.  CODE is the kind of expression to build.  */\n+   conversions on the operands.  CODE is the kind of expression to\n+   build.  ARG1 and ARG2 are the arguments.  ARG1_CODE and ARG2_CODE\n+   are the tree codes which correspond to ARG1 and ARG2 when issuing\n+   warnings about possibly misplaced parentheses.  They may differ\n+   from the TREE_CODE of ARG1 and ARG2 if the parser has done constant\n+   folding (e.g., if the parser sees \"a | 1 + 1\", it may call this\n+   routine with ARG2 being an INTEGER_CST and ARG2_CODE == PLUS_EXPR).\n+   To avoid issuing any parentheses warnings, pass ARG1_CODE and/or\n+   ARG2_CODE as ERROR_MARK.  */\n \n tree\n-build_x_binary_op (enum tree_code code, tree arg1, tree arg2,\n-\t\t   bool *overloaded_p)\n+build_x_binary_op (enum tree_code code, tree arg1, enum tree_code arg1_code,\n+\t\t   tree arg2, enum tree_code arg2_code, bool *overloaded_p)\n {\n   tree orig_arg1;\n   tree orig_arg2;\n@@ -2893,6 +2904,17 @@ build_x_binary_op (enum tree_code code, tree arg1, tree arg2,\n     expr = build_new_op (code, LOOKUP_NORMAL, arg1, arg2, NULL_TREE,\n \t\t\t overloaded_p);\n \n+  /* Check for cases such as x+y<<z which users are likely to\n+     misinterpret.  But don't warn about obj << x + y, since that is a\n+     common idiom for I/O.  */\n+  if (warn_parentheses\n+      && !processing_template_decl\n+      && !error_operand_p (arg1)\n+      && !error_operand_p (arg2)\n+      && (code != LSHIFT_EXPR\n+\t  || !CLASS_TYPE_P (TREE_TYPE (arg1))))\n+    warn_about_parentheses (code, arg1_code, arg2_code);\n+\n   if (processing_template_decl && expr != error_mark_node)\n     return build_min_non_dep (code, expr, orig_arg1, orig_arg2);\n "}, {"sha": "4a803b3e29cb302f16e3e220c845bd891970e03e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -2531,9 +2531,7 @@ Warn if a user-supplied include directory does not exist.\n Warn if parentheses are omitted in certain contexts, such\n as when there is an assignment in a context where a truth value\n is expected, or when operators are nested whose precedence people\n-often get confused about.  Only the warning for an assignment used as\n-a truth value is supported when compiling C++; the other warnings are\n-only supported when compiling C@.\n+often get confused about.\n \n Also warn if a comparison like @samp{x<=y<=z} appears; this is\n equivalent to @samp{(x<=y ? 1 : 0) <= z}, which is a different\n@@ -2555,14 +2553,15 @@ such a case:\n @end group\n @end smallexample\n \n-In C, every @code{else} branch belongs to the innermost possible @code{if}\n-statement, which in this example is @code{if (b)}.  This is often not\n-what the programmer expected, as illustrated in the above example by\n-indentation the programmer chose.  When there is the potential for this\n-confusion, GCC will issue a warning when this flag is specified.\n-To eliminate the warning, add explicit braces around the innermost\n-@code{if} statement so there is no way the @code{else} could belong to\n-the enclosing @code{if}.  The resulting code would look like this:\n+In C/C++, every @code{else} branch belongs to the innermost possible\n+@code{if} statement, which in this example is @code{if (b)}.  This is\n+often not what the programmer expected, as illustrated in the above\n+example by indentation the programmer chose.  When there is the\n+potential for this confusion, GCC will issue a warning when this flag\n+is specified.  To eliminate the warning, add explicit braces around\n+the innermost @code{if} statement so there is no way the @code{else}\n+could belong to the enclosing @code{if}.  The resulting code would\n+look like this:\n \n @smallexample\n @group"}, {"sha": "3a2369897d63da1f851db906b8893103b4a0cddc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -1,3 +1,25 @@\n+2006-12-13  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR c++/19564\n+\tPR c++/19756\n+\t* g++.dg/warn/Wparentheses-5.C: New test.\n+\t* g++.dg/warn/Wparentheses-6.C: New test.\n+\t* g++.dg/warn/Wparentheses-7.C: New test.\n+\t* g++.dg/warn/Wparentheses-8.C: New test.\n+\t* g++.dg/warn/Wparentheses-9.C: New test.\n+\t* g++.dg/warn/Wparentheses-10.C: New test.\n+\t* g++.dg/warn/Wparentheses-11.C: New test.\n+\t* g++.dg/warn/Wparentheses-12.C: New test.\n+\t* g++.dg/warn/Wparentheses-13.C: New test.\n+\t* g++.dg/warn/Wparentheses-14.C: New test.\n+\t* g++.dg/warn/Wparentheses-15.C: New test.\n+\t* g++.dg/warn/Wparentheses-16.C: New test.\n+\t* g++.dg/warn/Wparentheses-17.C: New test.\n+\t* g++.dg/warn/Wparentheses-18.C: New test.\n+\t* g++.dg/warn/Wparentheses-19.C: New test.\n+\t* g++.dg/warn/Wparentheses-20.C: New test.\n+\t* g++.dg/warn/Wparentheses-21.C: New test.\n+\n 2006-12-13  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR testsuite/30157"}, {"sha": "c30df090f5ebf292bcd89772d9400946012c6f3b", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-10.C", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-10.C?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -0,0 +1,119 @@\n+// { dg-do compile }\n+// { dg-options \"-Wparentheses\" }\n+\n+// C++ version of gcc.dg/Wparentheses-7.c\n+\n+int foo (int);\n+\n+int\n+bar (int a, int b, int c)\n+{\n+  foo (a & b ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a & b) ^ c);\n+  foo (a & (b ^ c));\n+  foo (1 & 2 ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) ^ c);\n+  foo (1 & (2 ^ c));\n+  foo (1 & 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) ^ 3);\n+  foo (1 & (2 ^ 3));\n+  foo (a ^ b & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a ^ b) & c);\n+  foo (a ^ (b & c));\n+  foo (1 ^ 2 & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) & c);\n+  foo (1 ^ (2 & c));\n+  foo (1 ^ 2 & 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) & 3);\n+  foo (1 ^ (2 & 3));\n+  foo (a + b ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a + b) ^ c);\n+  foo (a + (b ^ c));\n+  foo (1 + 2 ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 + 2) ^ c);\n+  foo (1 + (2 ^ c));\n+  foo (1 + 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 + 2) ^ 3);\n+  foo (1 + (2 ^ 3));\n+  foo (a ^ b + c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a ^ b) + c);\n+  foo (a ^ (b + c));\n+  foo (1 ^ 2 + c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) + c);\n+  foo (1 ^ (2 + c));\n+  foo (1 ^ 2 + 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) + 3);\n+  foo (1 ^ (2 + 3));\n+  foo (a - b ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a - b) ^ c);\n+  foo (a - (b ^ c));\n+  foo (1 - 2 ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 - 2) ^ c);\n+  foo (1 - (2 ^ c));\n+  foo (1 - 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 - 2) ^ 3);\n+  foo (1 - (2 ^ 3));\n+  foo (a ^ b - c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a ^ b) - c);\n+  foo (a ^ (b - c));\n+  foo (1 ^ 2 - c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) - c);\n+  foo (1 ^ (2 - c));\n+  foo (1 ^ 2 - 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) - 3);\n+  foo (1 ^ (2 - 3));\n+  foo (a >= b ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a >= b) ^ c);\n+  foo (a >= (b ^ c));\n+  foo (1 >= 2 ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 >= 2) ^ c);\n+  foo (1 >= (2 ^ c));\n+  foo (1 >= 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 >= 2) ^ 3);\n+  foo (1 >= (2 ^ 3));\n+  foo (a ^ b >= c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a ^ b) >= c);\n+  foo (a ^ (b >= c));\n+  foo (1 ^ 2 >= c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) >= c);\n+  foo (1 ^ (2 >= c));\n+  foo (1 ^ 2 >= 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) >= 3);\n+  foo (1 ^ (2 >= 3));\n+  foo (a == b ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a == b) ^ c);\n+  foo (a == (b ^ c));\n+  foo (1 == 2 ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 == 2) ^ c);\n+  foo (1 == (2 ^ c));\n+  foo (1 == 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 == 2) ^ 3);\n+  foo (1 == (2 ^ 3));\n+  foo (a ^ b == c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a ^ b) == c);\n+  foo (a ^ (b == c));\n+  foo (1 ^ 2 == c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) == c);\n+  foo (1 ^ (2 == c));\n+  foo (1 ^ 2 == 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) == 3);\n+  foo (1 ^ (2 == 3));\n+  foo (a < b ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a < b) ^ c);\n+  foo (a < (b ^ c));\n+  foo (1 < 2 ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 < 2) ^ c);\n+  foo (1 < (2 ^ c));\n+  foo (1 < 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 < 2) ^ 3);\n+  foo (1 < (2 ^ 3));\n+  foo (a ^ b < c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a ^ b) < c);\n+  foo (a ^ (b < c));\n+  foo (1 ^ 2 < c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) < c);\n+  foo (1 ^ (2 < c));\n+  foo (1 ^ 2 < 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) < 3);\n+  foo (1 ^ (2 < 3));\n+}"}, {"sha": "912c3b7ae76e49d06593479cf7cf1738f157d825", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-11.C", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-11.C?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -0,0 +1,101 @@\n+// { dg-do compile }\n+// { dg-options \"-Wparentheses\" }\n+\n+// C++ version of gcc.dg/Wparentheses-8.c\n+\n+int foo (int);\n+\n+int\n+bar (int a, int b, int c)\n+{\n+  foo (a + b & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a + b) & c);\n+  foo (a + (b & c));\n+  foo (1 + 2 & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 + 2) & c);\n+  foo (1 + (2 & c));\n+  foo (1 + 2 & 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 + 2) & 3);\n+  foo (1 + (2 & 3));\n+  foo (a & b + c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a & b) + c);\n+  foo (a & (b + c));\n+  foo (1 & 2 + c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) + c);\n+  foo (1 & (2 + c));\n+  foo (1 & 2 + 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) + 3);\n+  foo (1 & (2 + 3));\n+  foo (a - b & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a - b) & c);\n+  foo (a - (b & c));\n+  foo (1 - 2 & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 - 2) & c);\n+  foo (1 - (2 & c));\n+  foo (1 - 2 & 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 - 2) & 3);\n+  foo (1 - (2 & 3));\n+  foo (a & b - c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a & b) - c);\n+  foo (a & (b - c));\n+  foo (1 & 2 - c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) - c);\n+  foo (1 & (2 - c));\n+  foo (1 & 2 - 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) - 3);\n+  foo (1 & (2 - 3));\n+  foo (a < b & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a < b) & c);\n+  foo (a < (b & c));\n+  foo (1 < 2 & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 < 2) & c);\n+  foo (1 < (2 & c));\n+  foo (1 < 2 & 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 < 2) & 3);\n+  foo (1 < (2 & 3));\n+  foo (a & b < c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a & b) < c);\n+  foo (a & (b < c));\n+  foo (1 & 2 < c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) < c);\n+  foo (1 & (2 < c));\n+  foo (1 & 2 < 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) < 3);\n+  foo (1 & (2 < 3));\n+  foo (a == b & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a == b) & c);\n+  foo (a == (b & c));\n+  foo (1 == 2 & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 == 2) & c);\n+  foo (1 == (2 & c));\n+  foo (1 == 2 & 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 == 2) & 3);\n+  foo (1 == (2 & 3));\n+  foo (a & b == c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a & b) == c);\n+  foo (a & (b == c));\n+  foo (1 & 2 == c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) == c);\n+  foo (1 & (2 == c));\n+  foo (1 & 2 == 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) == 3);\n+  foo (1 & (2 == 3));\n+  foo (a != b & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a != b) & c);\n+  foo (a != (b & c));\n+  foo (1 != 2 & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 != 2) & c);\n+  foo (1 != (2 & c));\n+  foo (1 != 2 & 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 != 2) & 3);\n+  foo (1 != (2 & 3));\n+  foo (a & b != c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a & b) != c);\n+  foo (a & (b != c));\n+  foo (1 & 2 != c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) != c);\n+  foo (1 & (2 != c));\n+  foo (1 & 2 != 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) != 3);\n+  foo (1 & (2 != 3));\n+}"}, {"sha": "b04529827d5a4bf7b39fa9555ccf36e484946541", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-12.C", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-12.C?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -0,0 +1,60 @@\n+// { dg-do compile }\n+// { dg-options \"-Wparentheses\" }\n+\n+// C++ version of gcc.dg/Wparentheses-9.c\n+\n+int foo (int);\n+\n+int a, b, c;\n+\n+int\n+bar (void)\n+{\n+  if (a)\n+    foo (0);\n+  if (b)\n+    foo (1);\n+  else\n+    foo (2);\n+  if (c) // { dg-warning \"ambiguous\" \"correct warning\" }\n+    if (a)\n+      foo (3);\n+    else\n+      foo (4);\n+  if (a)\n+    if (c)\n+      foo (5);\n+  if (a)\n+    if (b) // { dg-warning \"ambiguous\" \"correct warning\" }\n+      if (c)\n+\tfoo (6);\n+      else\n+\tfoo (7);\n+  if (a) // { dg-warning \"ambiguous\" \"correct warning\" }\n+    if (b)\n+      if (c)\n+\tfoo (8);\n+      else\n+\tfoo (9);\n+    else\n+      foo (10);\n+  if (a)\n+    if (b)\n+      if (c)\n+\tfoo (11);\n+      else\n+\tfoo (12);\n+    else\n+      foo (13);\n+  else\n+    foo (14);\n+  if (a) {\n+    if (b)\n+      if (c)\n+\tfoo (15);\n+      else\n+\tfoo (16);\n+    else\n+      foo (17);\n+  }\n+}"}, {"sha": "22525cd9d1c867936ebdedc0ab2147c9a75ecf00", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-13.C", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-13.C?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -0,0 +1,69 @@\n+// { dg-do compile }\n+// { dg-options \"-Wparentheses\" }\n+\n+// Template version of Wparentheses-1.C.\n+\n+int foo (int);\n+\n+int a, b, c;\n+bool d;\n+\n+template<class T>\n+void\n+bar (T)\n+{\n+  if (a = b) // { dg-warning \"assignment\" \"correct warning\" }\n+    foo (0);\n+  if ((a = b))\n+    foo (1);\n+  if (a = a) // { dg-warning \"assignment\" \"correct warning\" }\n+    foo (2);\n+  if ((a = a))\n+    foo (3);\n+  if (b = c) // { dg-warning \"assignment\" \"correct warning\" }\n+    foo (4);\n+  else\n+    foo (5);\n+  if ((b = c))\n+    foo (6);\n+  else\n+    foo (7);\n+  if (b = b) // { dg-warning \"assignment\" \"correct warning\" }\n+    foo (8);\n+  else\n+    foo (9);\n+  if ((b = b))\n+    foo (10);\n+  else\n+    foo (11);\n+  while (c = b) // { dg-warning \"assignment\" \"correct warning\" }\n+    foo (12);\n+  while ((c = b))\n+    foo (13);\n+  while (c = c) // { dg-warning \"assignment\" \"correct warning\" }\n+    foo (14);\n+  while ((c = c))\n+    foo (15);\n+  do foo (16); while (a = b); // { dg-warning \"assignment\" \"correct warning\" }\n+  do foo (17); while ((a = b));\n+  do foo (18); while (a = a); // { dg-warning \"assignment\" \"correct warning\" }\n+  do foo (19); while ((a = a));\n+  for (;c = b;) // { dg-warning \"assignment\" \"correct warning\" }\n+    foo (20);\n+  for (;(c = b);)\n+    foo (21);\n+  for (;c = c;) // { dg-warning \"assignment\" \"correct warning\" }\n+    foo (22);\n+  for (;(c = c);)\n+    foo (23);\n+  d = a = b; // { dg-warning \"assignment\" \"correct warning\" }\n+  foo (24);\n+  d = (a = b);\n+  foo (25);\n+  d = a = a; // { dg-warning \"assignment\" \"correct warning\" }\n+  foo (26);\n+  d = (a = a);\n+  foo (27);\n+}\n+\n+template void bar<int> (int); // { dg-warning \"instantiated\" }"}, {"sha": "67bd43ec5cc1e84d50f9bc5d67f214c10f5eceb8", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-14.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-14.C?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do compile }\n+// { dg-options \"-Wparentheses\" }\n+\n+// Template version of Wparentheses-2.C.\n+\n+int foo (int);\n+\n+int a, b, c;\n+bool d;\n+\n+template<class T>\n+void\n+bar (T)\n+{\n+  if (a += b)\n+    foo (0);\n+  if (a -= a)\n+    foo (1);\n+  if (b *= c)\n+    foo (2);\n+  else\n+    foo (3);\n+  if (b /= b)\n+    foo (4);\n+  else\n+    foo (5);\n+  while (c %= b)\n+    foo (6);\n+  while (c <<= c)\n+    foo (7);\n+  do foo (8); while (a >>= b);\n+  do foo (9); while (a &= a);\n+  for (;c ^= b;)\n+    foo (10);\n+  for (;c |= c;)\n+    foo (11);\n+  d = a += b;\n+  foo (12);\n+  d = a -= a;\n+  foo (13);\n+}\n+\n+template void bar<int> (int);"}, {"sha": "ab156b757e00dd85be4fffa6748702fc452e6ff4", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-15.C", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-15.C?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -0,0 +1,68 @@\n+// { dg-do compile }\n+// { dg-options \"-Wparentheses\" }\n+\n+// Template version of Wparentheses-6.C.\n+\n+int foo (int);\n+\n+template<class T>\n+void\n+bar (T a, T b, T c)\n+{\n+  foo (a <= b <= c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((a <= b) <= c);\n+  foo (a <= (b <= c));\n+  foo (1 <= 2 <= c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 <= 2) <= c);\n+  foo (1 <= (2 <= c));\n+  foo (1 <= 2 <= 3); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 <= 2) <= 3);\n+  foo (1 <= (2 <= 3));\n+  foo (a > b > c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((a > b) > c);\n+  foo (a > (b > c));\n+  foo (1 > 2 > c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 > 2) > c);\n+  foo (1 > (2 > c));\n+  foo (1 > 2 > 3); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 > 2) > 3);\n+  foo (1 > (2 > 3));\n+  foo (a < b <= c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((a < b) <= c);\n+  foo (a < (b <= c));\n+  foo (1 < 2 <= c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 < 2) <= c);\n+  foo (1 < (2 <= c));\n+  foo (1 < 2 <= 3); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 < 2) <= 3);\n+  foo (1 < (2 <= 3));\n+  foo (a <= b > c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((a <= b) > c);\n+  foo (a <= (b > c));\n+  foo (1 <= 2 > c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 <= 2) > c);\n+  foo (1 <= (2 > c));\n+  foo (1 <= 2 > 3); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 <= 2) > 3);\n+  foo (1 <= (2 > 3));\n+  foo (a <= b == c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((a <= b) == c);\n+  foo (a <= (b == c));\n+  foo (1 <= 2 == c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 <= 2) == c);\n+  foo (1 <= (2 == c));\n+  foo (1 <= 2 == 3); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 <= 2) == 3);\n+  foo (1 <= (2 == 3));\n+  foo (a != b != c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((a != b) != c);\n+  foo (a != (b != c));\n+  foo (1 != 2 != c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 != 2) != c);\n+  foo (1 != (2 != c));\n+  foo (1 != 2 != 3); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 != 2) != 3);\n+  foo (1 != (2 != 3));\n+}\n+\n+template void bar<int> (int, int, int); // { dg-warning \"instantiated\" }"}, {"sha": "d8151aecdd17b98e80c632744fcd25fc59aa503c", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-16.C", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-16.C?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -0,0 +1,86 @@\n+// { dg-do compile }\n+// { dg-options \"-Wparentheses\" }\n+\n+// Template version of Wparentheses-7.C.\n+\n+int foo (int);\n+\n+template<class T>\n+void\n+bar (T a, T b, T c)\n+{\n+  foo (a + b << c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a + b) << c);\n+  foo (a + (b << c));\n+  foo (1 + 2 << c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 + 2) << c);\n+  foo (1 + (2 << c));\n+  foo (1 + 2 << 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 + 2) << 3);\n+  foo (1 + (2 << 3));\n+  foo (a << b + c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a << b) + c);\n+  foo (a << (b + c));\n+  foo (1 << 2 + c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 << 2) + c);\n+  foo (1 << (2 + c));\n+  foo (1 << 2 + 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 << 2) + 3);\n+  foo (1 << (2 + 3));\n+  foo (a + b >> c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a + b) >> c);\n+  foo (a + (b >> c));\n+  foo (1 + 2 >> c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 + 2) >> c);\n+  foo (1 + (2 >> c));\n+  foo (1 + 2 >> 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 + 2) >> 3);\n+  foo (1 + (2 >> 3));\n+  foo (a >> b + c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a >> b) + c);\n+  foo (a >> (b + c));\n+  foo (1 >> 2 + c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 >> 2) + c);\n+  foo (1 >> (2 + c));\n+  foo (1 >> 2 + 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 >> 2) + 3);\n+  foo (1 >> (2 + 3));\n+  foo (a - b << c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a - b) << c);\n+  foo (a - (b << c));\n+  foo (6 - 5 << c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((6 - 5) << c);\n+  foo (6 - (5 << c));\n+  foo (6 - 5 << 4); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((6 - 5) << 4);\n+  foo (6 - (5 << 4));\n+  foo (a << b - c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a << b) - c);\n+  foo (a << (b - c));\n+  foo (6 << 5 - c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((6 << 5) - c);\n+  foo (6 << (5 - c));\n+  foo (6 << 5 - 4); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((6 << 5) - 4);\n+  foo (6 << (5 - 4));\n+  foo (a - b >> c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a - b) >> c);\n+  foo (a - (b >> c));\n+  foo (6 - 5 >> c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((6 - 5) >> c);\n+  foo (6 - (5 >> c));\n+  foo (6 - 5 >> 4); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((6 - 5) >> 4);\n+  foo (6 - (5 >> 4));\n+  foo (a >> b - c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a >> b) - c);\n+  foo (a >> (b - c));\n+  foo (6 >> 5 - c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((6 >> 5) - c);\n+  foo (6 >> (5 - c));\n+  foo (6 >> 5 - 4); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((6 >> 5) - 4);\n+  foo (6 >> (5 - 4));\n+}\n+\n+template void bar<int> (int, int, int); // { dg-warning \"instantiated\" }"}, {"sha": "def181a12dc0e2ef6058449143fc22f3ab895477", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-17.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-17.C?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+// { dg-options \"-Wparentheses\" }\n+\n+// Template version of Wparentheses-8.C.\n+\n+int foo (int);\n+\n+template<class T>\n+void\n+bar (T a, T b, T c)\n+{\n+  foo (a && b || c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a && b) || c);\n+  foo (a && (b || c));\n+  foo (1 && 2 || c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 && 2) || c);\n+  foo (1 && (2 || c));\n+  foo (1 && 2 || 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 && 2) || 3);\n+  foo (1 && (2 || 3));\n+  foo (a || b && c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a || b) && c);\n+  foo (a || (b && c));\n+  foo (1 || 2 && c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 || 2) && c);\n+  foo (1 || (2 && c));\n+  foo (1 || 2 && 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 || 2) && 3);\n+  foo (1 || (2 && 3));\n+}\n+\n+template void bar<int> (int, int, int); // { dg-warning \"instantiated\" }"}, {"sha": "32fa1fe958fa8e9dab15d128260e6d8a5c17e87d", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-18.C", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-18.C?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -0,0 +1,122 @@\n+// { dg-do compile }\n+// { dg-options \"-Wparentheses\" }\n+\n+// Template version of Wparentheses-9.C.\n+\n+int foo (int);\n+\n+template<class T>\n+void\n+bar (T a, T b, T c)\n+{\n+  foo (a & b | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a & b) | c);\n+  foo (a & (b | c));\n+  foo (1 & 2 | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) | c);\n+  foo (1 & (2 | c));\n+  foo (1 & 2 | 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) | 3);\n+  foo (1 & (2 | 3));\n+  foo (a | b & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a | b) & c);\n+  foo (a | (b & c));\n+  foo (1 | 2 & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) & c);\n+  foo (1 | (2 & c));\n+  foo (1 | 2 & 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) & 3);\n+  foo (1 | (2 & 3));\n+  foo (a ^ b | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a ^ b) | c);\n+  foo (a ^ (b | c));\n+  foo (1 ^ 2 | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) | c);\n+  foo (1 ^ (2 | c));\n+  foo (1 ^ 2 | 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) | 3);\n+  foo (1 ^ (2 | 3));\n+  foo (a | b ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a | b) ^ c);\n+  foo (a | (b ^ c));\n+  foo (1 | 2 ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) ^ c);\n+  foo (1 | (2 ^ c));\n+  foo (1 | 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) ^ 3);\n+  foo (1 | (2 ^ 3));\n+  foo (a + b | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a + b) | c);\n+  foo (a + (b | c));\n+  foo (1 + 2 | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 + 2) | c);\n+  foo (1 + (2 | c));\n+  foo (1 + 2 | 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 + 2) | 3);\n+  foo (1 + (2 | 3));\n+  foo (a | b + c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a | b) + c);\n+  foo (a | (b + c));\n+  foo (1 | 2 + c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) + c);\n+  foo (1 | (2 + c));\n+  foo (1 | 2 + 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) + 3);\n+  foo (1 | (2 + 3));\n+  foo (a - b | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a - b) | c);\n+  foo (a - (b | c));\n+  foo (1 - 2 | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 - 2) | c);\n+  foo (1 - (2 | c));\n+  foo (1 - 2 | 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 - 2) | 3);\n+  foo (1 - (2 | 3));\n+  foo (a | b - c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a | b) - c);\n+  foo (a | (b - c));\n+  foo (1 | 2 - c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) - c);\n+  foo (1 | (2 - c));\n+  foo (1 | 2 - 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) - 3);\n+  foo (1 | (2 - 3));\n+  foo (a > b | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a > b) | c);\n+  foo (a > (b | c));\n+  foo (1 > 2 | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 > 2) | c);\n+  foo (1 > (2 | c));\n+  foo (1 > 2 | 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 > 2) | 3);\n+  foo (1 > (2 | 3));\n+  foo (a | b > c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a | b) > c);\n+  foo (a | (b > c));\n+  foo (1 | 2 > c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) > c);\n+  foo (1 | (2 > c));\n+  foo (1 | 2 > 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) > 3);\n+  foo (1 | (2 > 3));\n+  foo (a <= b | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a <= b) | c);\n+  foo (a <= (b | c));\n+  foo (1 <= 2 | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 <= 2) | c);\n+  foo (1 <= (2 | c));\n+  foo (1 <= 2 | 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 <= 2) | 3);\n+  foo (1 <= (2 | 3));\n+  foo (a | b <= c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a | b) <= c);\n+  foo (a | (b <= c));\n+  foo (1 | 2 <= c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) <= c);\n+  foo (1 | (2 <= c));\n+  foo (1 | 2 <= 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) <= 3);\n+  foo (1 | (2 <= 3));\n+}\n+\n+template void bar<int> (int, int, int); // { dg-warning \"instantiated\" }"}, {"sha": "c7e45cf1afc543a0247383d2be60bf7115faa33e", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-19.C", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-19.C?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -0,0 +1,122 @@\n+// { dg-do compile }\n+// { dg-options \"-Wparentheses\" }\n+\n+// Template version of Wparentheses-10.C.\n+\n+int foo (int);\n+\n+template<class T>\n+void\n+bar (T a, T b, T c)\n+{\n+  foo (a & b ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a & b) ^ c);\n+  foo (a & (b ^ c));\n+  foo (1 & 2 ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) ^ c);\n+  foo (1 & (2 ^ c));\n+  foo (1 & 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) ^ 3);\n+  foo (1 & (2 ^ 3));\n+  foo (a ^ b & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a ^ b) & c);\n+  foo (a ^ (b & c));\n+  foo (1 ^ 2 & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) & c);\n+  foo (1 ^ (2 & c));\n+  foo (1 ^ 2 & 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) & 3);\n+  foo (1 ^ (2 & 3));\n+  foo (a + b ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a + b) ^ c);\n+  foo (a + (b ^ c));\n+  foo (1 + 2 ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 + 2) ^ c);\n+  foo (1 + (2 ^ c));\n+  foo (1 + 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 + 2) ^ 3);\n+  foo (1 + (2 ^ 3));\n+  foo (a ^ b + c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a ^ b) + c);\n+  foo (a ^ (b + c));\n+  foo (1 ^ 2 + c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) + c);\n+  foo (1 ^ (2 + c));\n+  foo (1 ^ 2 + 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) + 3);\n+  foo (1 ^ (2 + 3));\n+  foo (a - b ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a - b) ^ c);\n+  foo (a - (b ^ c));\n+  foo (1 - 2 ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 - 2) ^ c);\n+  foo (1 - (2 ^ c));\n+  foo (1 - 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 - 2) ^ 3);\n+  foo (1 - (2 ^ 3));\n+  foo (a ^ b - c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a ^ b) - c);\n+  foo (a ^ (b - c));\n+  foo (1 ^ 2 - c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) - c);\n+  foo (1 ^ (2 - c));\n+  foo (1 ^ 2 - 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) - 3);\n+  foo (1 ^ (2 - 3));\n+  foo (a >= b ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a >= b) ^ c);\n+  foo (a >= (b ^ c));\n+  foo (1 >= 2 ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 >= 2) ^ c);\n+  foo (1 >= (2 ^ c));\n+  foo (1 >= 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 >= 2) ^ 3);\n+  foo (1 >= (2 ^ 3));\n+  foo (a ^ b >= c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a ^ b) >= c);\n+  foo (a ^ (b >= c));\n+  foo (1 ^ 2 >= c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) >= c);\n+  foo (1 ^ (2 >= c));\n+  foo (1 ^ 2 >= 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) >= 3);\n+  foo (1 ^ (2 >= 3));\n+  foo (a == b ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a == b) ^ c);\n+  foo (a == (b ^ c));\n+  foo (1 == 2 ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 == 2) ^ c);\n+  foo (1 == (2 ^ c));\n+  foo (1 == 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 == 2) ^ 3);\n+  foo (1 == (2 ^ 3));\n+  foo (a ^ b == c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a ^ b) == c);\n+  foo (a ^ (b == c));\n+  foo (1 ^ 2 == c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) == c);\n+  foo (1 ^ (2 == c));\n+  foo (1 ^ 2 == 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) == 3);\n+  foo (1 ^ (2 == 3));\n+  foo (a < b ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a < b) ^ c);\n+  foo (a < (b ^ c));\n+  foo (1 < 2 ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 < 2) ^ c);\n+  foo (1 < (2 ^ c));\n+  foo (1 < 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 < 2) ^ 3);\n+  foo (1 < (2 ^ 3));\n+  foo (a ^ b < c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a ^ b) < c);\n+  foo (a ^ (b < c));\n+  foo (1 ^ 2 < c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) < c);\n+  foo (1 ^ (2 < c));\n+  foo (1 ^ 2 < 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) < 3);\n+  foo (1 ^ (2 < 3));\n+}\n+\n+template void bar<int> (int, int, int); // { dg-warning \"instantiated\" }"}, {"sha": "8789d592f9a21f1763543ffeb14f17b24937301b", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-20.C", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-20.C?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -0,0 +1,104 @@\n+// { dg-do compile }\n+// { dg-options \"-Wparentheses\" }\n+\n+// Template version of Wparentheses-11.C.\n+\n+int foo (int);\n+\n+template<class T>\n+void\n+bar (T a, T b, T c)\n+{\n+  foo (a + b & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a + b) & c);\n+  foo (a + (b & c));\n+  foo (1 + 2 & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 + 2) & c);\n+  foo (1 + (2 & c));\n+  foo (1 + 2 & 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 + 2) & 3);\n+  foo (1 + (2 & 3));\n+  foo (a & b + c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a & b) + c);\n+  foo (a & (b + c));\n+  foo (1 & 2 + c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) + c);\n+  foo (1 & (2 + c));\n+  foo (1 & 2 + 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) + 3);\n+  foo (1 & (2 + 3));\n+  foo (a - b & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a - b) & c);\n+  foo (a - (b & c));\n+  foo (1 - 2 & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 - 2) & c);\n+  foo (1 - (2 & c));\n+  foo (1 - 2 & 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 - 2) & 3);\n+  foo (1 - (2 & 3));\n+  foo (a & b - c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a & b) - c);\n+  foo (a & (b - c));\n+  foo (1 & 2 - c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) - c);\n+  foo (1 & (2 - c));\n+  foo (1 & 2 - 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) - 3);\n+  foo (1 & (2 - 3));\n+  foo (a < b & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a < b) & c);\n+  foo (a < (b & c));\n+  foo (1 < 2 & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 < 2) & c);\n+  foo (1 < (2 & c));\n+  foo (1 < 2 & 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 < 2) & 3);\n+  foo (1 < (2 & 3));\n+  foo (a & b < c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a & b) < c);\n+  foo (a & (b < c));\n+  foo (1 & 2 < c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) < c);\n+  foo (1 & (2 < c));\n+  foo (1 & 2 < 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) < 3);\n+  foo (1 & (2 < 3));\n+  foo (a == b & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a == b) & c);\n+  foo (a == (b & c));\n+  foo (1 == 2 & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 == 2) & c);\n+  foo (1 == (2 & c));\n+  foo (1 == 2 & 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 == 2) & 3);\n+  foo (1 == (2 & 3));\n+  foo (a & b == c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a & b) == c);\n+  foo (a & (b == c));\n+  foo (1 & 2 == c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) == c);\n+  foo (1 & (2 == c));\n+  foo (1 & 2 == 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) == 3);\n+  foo (1 & (2 == 3));\n+  foo (a != b & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a != b) & c);\n+  foo (a != (b & c));\n+  foo (1 != 2 & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 != 2) & c);\n+  foo (1 != (2 & c));\n+  foo (1 != 2 & 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 != 2) & 3);\n+  foo (1 != (2 & 3));\n+  foo (a & b != c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a & b) != c);\n+  foo (a & (b != c));\n+  foo (1 & 2 != c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) != c);\n+  foo (1 & (2 != c));\n+  foo (1 & 2 != 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) != 3);\n+  foo (1 & (2 != 3));\n+}\n+\n+template void bar<int> (int, int, int); // { dg-warning \"instantiated\" }"}, {"sha": "588b4fdb79963131df715edda2f2a4e33f8a7aba", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-21.C", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-21.C?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -0,0 +1,66 @@\n+// { dg-do compile }\n+// { dg-options \"-Wparentheses\" }\n+\n+// Template version of Wparentheses-12.C.  Note that we currently warn\n+// when we initially parse the template, not when we are instantiating\n+// it.  That seems reasonable since the template parameters can not\n+// affect the syntax parsing.\n+\n+int foo (int);\n+\n+int a, b, c;\n+\n+template<class T>\n+void\n+bar (T)\n+{\n+  if (a)\n+    foo (0);\n+  if (b)\n+    foo (1);\n+  else\n+    foo (2);\n+  if (c) // { dg-warning \"ambiguous\" \"correct warning\" }\n+    if (a)\n+      foo (3);\n+    else\n+      foo (4);\n+  if (a)\n+    if (c)\n+      foo (5);\n+  if (a)\n+    if (b) // { dg-warning \"ambiguous\" \"correct warning\" }\n+      if (c)\n+\tfoo (6);\n+      else\n+\tfoo (7);\n+  if (a) // { dg-warning \"ambiguous\" \"correct warning\" }\n+    if (b)\n+      if (c)\n+\tfoo (8);\n+      else\n+\tfoo (9);\n+    else\n+      foo (10);\n+  if (a)\n+    if (b)\n+      if (c)\n+\tfoo (11);\n+      else\n+\tfoo (12);\n+    else\n+      foo (13);\n+  else\n+    foo (14);\n+  if (a) {\n+    if (b)\n+      if (c)\n+\tfoo (15);\n+      else\n+\tfoo (16);\n+    else\n+      foo (17);\n+  }\n+}\n+\n+template void bar<int> (int);"}, {"sha": "2cd05aaaeeb80e9e7395488978d0c1c70c74eabb", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-5.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-5.C?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile }\n+// { dg-options -Wparentheses }\n+\n+// C++ version of gcc.dg/Wparentheses-1.c.\n+\n+int foo (int a, int b)\n+{\n+  int c = (a && b) || 0;\t// { dg-bogus \"suggest parentheses\" }\n+  c = a && b || 0;\t\t// { dg-warning \"suggest parentheses\" }\n+\n+  return (a && b && 1) || 0;\t// { dg-bogus \"suggest parentheses\" }\n+}"}, {"sha": "9963d822e0562a72860fd44fa2c0b3c2afcea0c7", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-6.C", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-6.C?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -0,0 +1,65 @@\n+// { dg-do compile }\n+// { dg-options \"-Wparentheses\" }\n+\n+// C++ version of gcc.dg/Wparentheses-2.c.\n+\n+int foo (int);\n+\n+int\n+bar (int a, int b, int c)\n+{\n+  foo (a <= b <= c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((a <= b) <= c);\n+  foo (a <= (b <= c));\n+  foo (1 <= 2 <= c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 <= 2) <= c);\n+  foo (1 <= (2 <= c));\n+  foo (1 <= 2 <= 3); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 <= 2) <= 3);\n+  foo (1 <= (2 <= 3));\n+  foo (a > b > c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((a > b) > c);\n+  foo (a > (b > c));\n+  foo (1 > 2 > c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 > 2) > c);\n+  foo (1 > (2 > c));\n+  foo (1 > 2 > 3); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 > 2) > 3);\n+  foo (1 > (2 > 3));\n+  foo (a < b <= c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((a < b) <= c);\n+  foo (a < (b <= c));\n+  foo (1 < 2 <= c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 < 2) <= c);\n+  foo (1 < (2 <= c));\n+  foo (1 < 2 <= 3); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 < 2) <= 3);\n+  foo (1 < (2 <= 3));\n+  foo (a <= b > c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((a <= b) > c);\n+  foo (a <= (b > c));\n+  foo (1 <= 2 > c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 <= 2) > c);\n+  foo (1 <= (2 > c));\n+  foo (1 <= 2 > 3); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 <= 2) > 3);\n+  foo (1 <= (2 > 3));\n+  foo (a <= b == c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((a <= b) == c);\n+  foo (a <= (b == c));\n+  foo (1 <= 2 == c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 <= 2) == c);\n+  foo (1 <= (2 == c));\n+  foo (1 <= 2 == 3); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 <= 2) == 3);\n+  foo (1 <= (2 == 3));\n+  foo (a != b != c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((a != b) != c);\n+  foo (a != (b != c));\n+  foo (1 != 2 != c); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 != 2) != c);\n+  foo (1 != (2 != c));\n+  foo (1 != 2 != 3); // { dg-warning \"comparison\" \"correct warning\" }\n+  foo ((1 != 2) != 3);\n+  foo (1 != (2 != 3));\n+}"}, {"sha": "7d549c38c3162df542467d46cad834f08112dea9", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-7.C", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-7.C?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -0,0 +1,83 @@\n+// { dg-do compile }\n+// { dg-options \"-Wparentheses\" }\n+\n+// C++ copy of gcc.dg/Wparentheses-4.c\n+\n+int foo (int);\n+\n+int\n+bar (int a, int b, int c)\n+{\n+  foo (a + b << c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a + b) << c);\n+  foo (a + (b << c));\n+  foo (1 + 2 << c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 + 2) << c);\n+  foo (1 + (2 << c));\n+  foo (1 + 2 << 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 + 2) << 3);\n+  foo (1 + (2 << 3));\n+  foo (a << b + c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a << b) + c);\n+  foo (a << (b + c));\n+  foo (1 << 2 + c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 << 2) + c);\n+  foo (1 << (2 + c));\n+  foo (1 << 2 + 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 << 2) + 3);\n+  foo (1 << (2 + 3));\n+  foo (a + b >> c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a + b) >> c);\n+  foo (a + (b >> c));\n+  foo (1 + 2 >> c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 + 2) >> c);\n+  foo (1 + (2 >> c));\n+  foo (1 + 2 >> 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 + 2) >> 3);\n+  foo (1 + (2 >> 3));\n+  foo (a >> b + c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a >> b) + c);\n+  foo (a >> (b + c));\n+  foo (1 >> 2 + c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 >> 2) + c);\n+  foo (1 >> (2 + c));\n+  foo (1 >> 2 + 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 >> 2) + 3);\n+  foo (1 >> (2 + 3));\n+  foo (a - b << c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a - b) << c);\n+  foo (a - (b << c));\n+  foo (6 - 5 << c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((6 - 5) << c);\n+  foo (6 - (5 << c));\n+  foo (6 - 5 << 4); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((6 - 5) << 4);\n+  foo (6 - (5 << 4));\n+  foo (a << b - c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a << b) - c);\n+  foo (a << (b - c));\n+  foo (6 << 5 - c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((6 << 5) - c);\n+  foo (6 << (5 - c));\n+  foo (6 << 5 - 4); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((6 << 5) - 4);\n+  foo (6 << (5 - 4));\n+  foo (a - b >> c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a - b) >> c);\n+  foo (a - (b >> c));\n+  foo (6 - 5 >> c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((6 - 5) >> c);\n+  foo (6 - (5 >> c));\n+  foo (6 - 5 >> 4); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((6 - 5) >> 4);\n+  foo (6 - (5 >> 4));\n+  foo (a >> b - c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a >> b) - c);\n+  foo (a >> (b - c));\n+  foo (6 >> 5 - c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((6 >> 5) - c);\n+  foo (6 >> (5 - c));\n+  foo (6 >> 5 - 4); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((6 >> 5) - 4);\n+  foo (6 >> (5 - 4));\n+}"}, {"sha": "ddb5e64b4adac4720bec132d713fe7ba5cbc86e5", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-8.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-8.C?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+// { dg-options \"-Wparentheses\" }\n+\n+// C++ version of gcc.dg/Wparentheses-5.c\n+\n+int foo (int);\n+\n+int\n+bar (int a, int b, int c)\n+{\n+  foo (a && b || c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a && b) || c);\n+  foo (a && (b || c));\n+  foo (1 && 2 || c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 && 2) || c);\n+  foo (1 && (2 || c));\n+  foo (1 && 2 || 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 && 2) || 3);\n+  foo (1 && (2 || 3));\n+  foo (a || b && c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a || b) && c);\n+  foo (a || (b && c));\n+  foo (1 || 2 && c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 || 2) && c);\n+  foo (1 || (2 && c));\n+  foo (1 || 2 && 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 || 2) && 3);\n+  foo (1 || (2 && 3));\n+}"}, {"sha": "bad6fb1c5703371a1807c035281e8c80b1cc821e", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-9.C", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-9.C?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -0,0 +1,119 @@\n+// { dg-do compile }\n+// { dg-options \"-Wparentheses\" }\n+\n+// C++ version of gcc.dg/Wparentheses-6.c\n+\n+int foo (int);\n+\n+int\n+bar (int a, int b, int c)\n+{\n+  foo (a & b | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a & b) | c);\n+  foo (a & (b | c));\n+  foo (1 & 2 | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) | c);\n+  foo (1 & (2 | c));\n+  foo (1 & 2 | 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 & 2) | 3);\n+  foo (1 & (2 | 3));\n+  foo (a | b & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a | b) & c);\n+  foo (a | (b & c));\n+  foo (1 | 2 & c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) & c);\n+  foo (1 | (2 & c));\n+  foo (1 | 2 & 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) & 3);\n+  foo (1 | (2 & 3));\n+  foo (a ^ b | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a ^ b) | c);\n+  foo (a ^ (b | c));\n+  foo (1 ^ 2 | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) | c);\n+  foo (1 ^ (2 | c));\n+  foo (1 ^ 2 | 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 ^ 2) | 3);\n+  foo (1 ^ (2 | 3));\n+  foo (a | b ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a | b) ^ c);\n+  foo (a | (b ^ c));\n+  foo (1 | 2 ^ c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) ^ c);\n+  foo (1 | (2 ^ c));\n+  foo (1 | 2 ^ 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) ^ 3);\n+  foo (1 | (2 ^ 3));\n+  foo (a + b | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a + b) | c);\n+  foo (a + (b | c));\n+  foo (1 + 2 | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 + 2) | c);\n+  foo (1 + (2 | c));\n+  foo (1 + 2 | 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 + 2) | 3);\n+  foo (1 + (2 | 3));\n+  foo (a | b + c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a | b) + c);\n+  foo (a | (b + c));\n+  foo (1 | 2 + c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) + c);\n+  foo (1 | (2 + c));\n+  foo (1 | 2 + 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) + 3);\n+  foo (1 | (2 + 3));\n+  foo (a - b | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a - b) | c);\n+  foo (a - (b | c));\n+  foo (1 - 2 | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 - 2) | c);\n+  foo (1 - (2 | c));\n+  foo (1 - 2 | 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 - 2) | 3);\n+  foo (1 - (2 | 3));\n+  foo (a | b - c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a | b) - c);\n+  foo (a | (b - c));\n+  foo (1 | 2 - c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) - c);\n+  foo (1 | (2 - c));\n+  foo (1 | 2 - 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) - 3);\n+  foo (1 | (2 - 3));\n+  foo (a > b | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a > b) | c);\n+  foo (a > (b | c));\n+  foo (1 > 2 | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 > 2) | c);\n+  foo (1 > (2 | c));\n+  foo (1 > 2 | 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 > 2) | 3);\n+  foo (1 > (2 | 3));\n+  foo (a | b > c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a | b) > c);\n+  foo (a | (b > c));\n+  foo (1 | 2 > c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) > c);\n+  foo (1 | (2 > c));\n+  foo (1 | 2 > 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) > 3);\n+  foo (1 | (2 > 3));\n+  foo (a <= b | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a <= b) | c);\n+  foo (a <= (b | c));\n+  foo (1 <= 2 | c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 <= 2) | c);\n+  foo (1 <= (2 | c));\n+  foo (1 <= 2 | 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 <= 2) | 3);\n+  foo (1 <= (2 | 3));\n+  foo (a | b <= c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((a | b) <= c);\n+  foo (a | (b <= c));\n+  foo (1 | 2 <= c); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) <= c);\n+  foo (1 | (2 <= c));\n+  foo (1 | 2 <= 3); // { dg-warning \"parentheses\" \"correct warning\" }\n+  foo ((1 | 2) <= 3);\n+  foo (1 | (2 <= 3));\n+}"}, {"sha": "5b692ea25d91e2b6a4bfee54ba5c56ca379e4a92", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -1,3 +1,25 @@\n+2006-12-13  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR c++/19564\n+\tPR c++/19756\n+\t* include/bits/locale_facets.tcc (num_get<>::_M_extract_float):\n+\tAdd parentheses around && within || to avoid warning.\n+\t(num_get<>::_M_extract_int): Likewise.\n+\t(money_get<>::_M_extract): Likewise.\n+\t(num_get<>::do_get(iter_type, iter_type, ios_base&,\n+\tios_base::iostate&, void*&)): Add parentheses around & within | to\n+\tavoid warning.\n+\t(num_put<>::do_put(iter_type, ios_base&, char_type, const void*)):\n+\tLikewise.\n+\t* include/bits/streambuf_iterator.h (istreambuf_iterator::equal):\n+\tAdd parentheses around && within || to avoid warning.\n+\t* libsupc++/tinfo.cc (__do_dyncast): Likewise.\n+\t* src/locale.cc (locale::_S_normalize_category): Likewise.\n+\t* include/bits/stl_tree.h (_Rb_tree<>::_M_insert_unique): Add\n+\tbraces to avoid ambiguous else warning.\n+\t* src/strstream.cc (strstreambuf::_M_free): Likewise.\n+\t* src/tree.cc (_Rb_tree_rebalance_for_erase): Likewise.\n+\n 2006-12-12  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/28265"}, {"sha": "1eba5ae00779831bde39483f3d3b8f23588d3563", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -314,7 +314,7 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n       int __sep_pos = 0;\n       while (!__testeof)\n \t{\n-\t  if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep\n+\t  if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)\n \t      || __c == __lc->_M_decimal_point)\n \t    break;\n \t  else if (__c == __lit[__num_base::_S_izero])\n@@ -556,7 +556,7 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \tint __sep_pos = 0;\n \twhile (!__testeof)\n \t  {\n-\t    if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep\n+\t    if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)\n \t\t|| __c == __lc->_M_decimal_point)\n \t      break;\n \t    else if (__c == __lit[__num_base::_S_izero] \n@@ -883,7 +883,7 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n       // Prepare for hex formatted input.\n       typedef ios_base::fmtflags        fmtflags;\n       const fmtflags __fmt = __io.flags();\n-      __io.flags(__fmt & ~ios_base::basefield | ios_base::hex);\n+      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);\n \n       unsigned long __ul;\n       __beg = _M_extract_int(__beg, __end, __io, __err, __ul);\n@@ -1305,7 +1305,7 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n       const ios_base::fmtflags __fmt = ~(ios_base::basefield\n \t\t\t\t\t | ios_base::uppercase\n \t\t\t\t\t | ios_base::internal);\n-      __io.flags(__flags & __fmt | (ios_base::hex | ios_base::showbase));\n+      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));\n \n       __s = _M_insert_int(__s, __io, __fill,\n \t\t\t  reinterpret_cast<unsigned long>(__v));\n@@ -1377,9 +1377,9 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \t\t\t\t\t == money_base::space)))\n \t\t    || (__i == 2 && ((static_cast<part>(__p.field[3])\n \t\t\t\t      == money_base::value)\n-\t\t\t\t     || __mandatory_sign\n-\t\t\t\t     && (static_cast<part>(__p.field[3])\n-\t\t\t\t\t == money_base::sign))))\n+\t\t\t\t     || (__mandatory_sign\n+\t\t\t\t\t && (static_cast<part>(__p.field[3])\n+\t\t\t\t\t     == money_base::sign)))))\n \t\t  {\n \t\t    const size_type __len = __lc->_M_curr_symbol_size;\n \t\t    size_type __j = 0;"}, {"sha": "bbfb252143dbc2eb1e1c6ea9db497e46067c6dbe", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -1055,10 +1055,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n       iterator __j = iterator(__y);\n       if (__comp)\n-\tif (__j == begin())\n-\t  return pair<iterator, bool>(_M_insert_(__x, __y, __v), true);\n-\telse\n-\t  --__j;\n+\t{\n+\t  if (__j == begin())\n+\t    return pair<iterator, bool>(_M_insert_(__x, __y, __v), true);\n+\t  else\n+\t    --__j;\n+\t}\n       if (_M_impl._M_key_compare(_S_key(__j._M_node), _KeyOfValue()(__v)))\n \treturn pair<iterator, bool>(_M_insert_(__x, __y, __v), true);\n       return pair<iterator, bool>(__j, false);"}, {"sha": "c743bb311ba65e1b4b260858adb20497ce54d64d", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -160,7 +160,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       {\n \tconst bool __thiseof = _M_at_eof();\n \tconst bool __beof = __b._M_at_eof();\n-\treturn (__thiseof && __beof || (!__thiseof && !__beof));\n+\treturn ((__thiseof && __beof) || (!__thiseof && !__beof));\n       }\n \n     private:"}, {"sha": "89d9e164581e27fd64d76fc1642a1f1f9b0d8ce1", "filename": "libstdc++-v3/libsupc++/tinfo.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -490,9 +490,9 @@ __do_dyncast (ptrdiff_t src2dst,\n           result.whole2dst =\n               __sub_kind (result.whole2dst | result2.whole2dst);\n         }\n-      else if ((result.dst_ptr != 0 & result2.dst_ptr != 0)\n-\t       || (result.dst_ptr != 0 & result2_ambig)\n-\t       || (result2.dst_ptr != 0 & result_ambig))\n+      else if ((result.dst_ptr != 0 && result2.dst_ptr != 0)\n+\t       || (result.dst_ptr != 0 && result2_ambig)\n+\t       || (result2.dst_ptr != 0 && result_ambig))\n         {\n           // Found two different DST_TYPE bases, or a valid one and a set of\n           // ambiguous ones, must disambiguate. See whether SRC_PTR is"}, {"sha": "a7609948a817e784acd7115d670a10fb5d98e705", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -146,7 +146,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   locale::_S_normalize_category(category __cat) \n   {\n     int __ret = 0;\n-    if (__cat == none || (__cat & all) && !(__cat & ~all))\n+    if (__cat == none || ((__cat & all) && !(__cat & ~all)))\n       __ret = __cat;\n     else\n       {"}, {"sha": "f2214549ab7ccac12ddc0625614ff2b31ab0e090", "filename": "libstdc++-v3/src/strstream.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/libstdc%2B%2B-v3%2Fsrc%2Fstrstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/libstdc%2B%2B-v3%2Fsrc%2Fstrstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstrstream.cc?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -311,10 +311,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   strstreambuf::_M_free(char* p)\n   {\n     if (p)\n-      if (_M_free_fun)\n-\t_M_free_fun(p);\n-      else\n-\tdelete[] p;\n+      {\n+\tif (_M_free_fun)\n+\t  _M_free_fun(p);\n+\telse\n+\t  delete[] p;\n+      }\n   }\n \n   void "}, {"sha": "b23ca8e8fa7fc3445e9b12c525163e4b0c6c1d6e", "filename": "libstdc++-v3/src/tree.cc", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a67bec24f6c82008acbe9138515a541edc10f7e/libstdc%2B%2B-v3%2Fsrc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a67bec24f6c82008acbe9138515a541edc10f7e/libstdc%2B%2B-v3%2Fsrc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ftree.cc?ref=2a67bec24f6c82008acbe9138515a541edc10f7e", "patch": "@@ -316,17 +316,21 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  else\n \t    __z->_M_parent->_M_right = __x;\n \tif (__leftmost == __z) \n-\t  if (__z->_M_right == 0)        // __z->_M_left must be null also\n-\t    __leftmost = __z->_M_parent;\n-\t// makes __leftmost == _M_header if __z == __root\n-\t  else\n-\t    __leftmost = _Rb_tree_node_base::_S_minimum(__x);\n+\t  {\n+\t    if (__z->_M_right == 0)        // __z->_M_left must be null also\n+\t      __leftmost = __z->_M_parent;\n+\t    // makes __leftmost == _M_header if __z == __root\n+\t    else\n+\t      __leftmost = _Rb_tree_node_base::_S_minimum(__x);\n+\t  }\n \tif (__rightmost == __z)  \n-\t  if (__z->_M_left == 0)         // __z->_M_right must be null also\n-\t    __rightmost = __z->_M_parent;  \n-\t// makes __rightmost == _M_header if __z == __root\n-\t  else                      // __x == __z->_M_left\n-\t    __rightmost = _Rb_tree_node_base::_S_maximum(__x);\n+\t  {\n+\t    if (__z->_M_left == 0)         // __z->_M_right must be null also\n+\t      __rightmost = __z->_M_parent;  \n+\t    // makes __rightmost == _M_header if __z == __root\n+\t    else                      // __x == __z->_M_left\n+\t      __rightmost = _Rb_tree_node_base::_S_maximum(__x);\n+\t  }\n       }\n     if (__y->_M_color != _S_red) \n       { "}]}