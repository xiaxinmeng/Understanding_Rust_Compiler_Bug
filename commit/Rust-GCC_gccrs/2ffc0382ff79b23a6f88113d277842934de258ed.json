{"sha": "2ffc0382ff79b23a6f88113d277842934de258ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZmYzAzODJmZjc5YjIzYTZmODgxMTNkMjc3ODQyOTM0ZGUyNThlZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-08-29T17:21:21Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-08-29T17:21:21Z"}, "message": "20030926-1.c: Add dg-additional-options.\n\n\t* gcc.target/i386/20030926-1.c: Add dg-additional-options.\n\t* gcc.target/i386/abi-2.c: Ditto.\n\t* gcc.target/i386/interrupt-sibcall-2.c: Ditto.\n\t* gcc.target/i386/pr22076.c: Ditto.\n\t* gcc.target/i386/pr37216.c: Ditto.\n\t* gcc.target/i386/pr39431.c: Ditto.\n\t* gcc.target/i386/pr40906-1.c: Ditto.\n\t* gcc.target/i386/pr40906-2.c: Ditto.\n\t* gcc.target/i386/pr43766.c: Ditto.\n\t* gcc.target/i386/pr46226.c: Ditto.\n\t* gcc.target/i386/pr46470.c: Ditto.\n\t* gcc.target/i386/pr59929.c: Ditto.\n\t* gcc.target/i386/sse-10.c: Ditto.\n\t* gcc.target/i386/vararg-1.c: Ditto.\n\t* gcc.target/i386/vararg-1.c: Ditto.\n\t* gcc.target/i386/asm-6.c: Compile for fpic target only.\n\t* gcc.target/i386/pr44223.c: Ditto.\n\t* gcc.target/i386/bitfield1.c (dg-options): Remove target selector.\n\t* gcc.target/i386/bitfield2.c (dg-options): Ditto.\n\t* gcc.target/i386/pr67480.c (dg-options): Ditto.\n\t* gcc.target/i386/vect-cond-1.c (dg-options): Ditto.\n\t* gcc.target/i386/bittest.c (scan-assembler-times): Ditto.\n\t* gcc.target/i386/darwin-fpmath.c (dg-do): Simplify target selector.\n\t* gcc.target/i386/mvc9.c: Compile for lto target only.\n\t* gcc.target/i386/pr45234.c: Compile for ia32 target only.\n\t* gcc.target/i386/pr49866.c: Compile for lp64 target only.\n\t* gcc.target/i386/pr57091.c: Ditto.\n\t* gcc.target/i386/pr61599-2.c: Ditto.\n\nFrom-SVN: r251417", "tree": {"sha": "8c23cbdc89822452eee97ee9f864a480190d9294", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c23cbdc89822452eee97ee9f864a480190d9294"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ffc0382ff79b23a6f88113d277842934de258ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ffc0382ff79b23a6f88113d277842934de258ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ffc0382ff79b23a6f88113d277842934de258ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ffc0382ff79b23a6f88113d277842934de258ed/comments", "author": null, "committer": null, "parents": [{"sha": "be0ffecc80aec56db2bfc783e112507b4ee3a0c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be0ffecc80aec56db2bfc783e112507b4ee3a0c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be0ffecc80aec56db2bfc783e112507b4ee3a0c7"}], "stats": {"total": 136, "additions": 81, "deletions": 55}, "files": [{"sha": "1a4207ceaeb06e2d80a1bac29fc379098a3ca087", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,16 +1,46 @@\n+2017-08-29  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/20030926-1.c: Add dg-additional-options.\n+\t* gcc.target/i386/abi-2.c: Ditto.\n+\t* gcc.target/i386/interrupt-sibcall-2.c: Ditto.\n+\t* gcc.target/i386/pr22076.c: Ditto.\n+\t* gcc.target/i386/pr37216.c: Ditto.\n+\t* gcc.target/i386/pr39431.c: Ditto.\n+\t* gcc.target/i386/pr40906-1.c: Ditto.\n+\t* gcc.target/i386/pr40906-2.c: Ditto.\n+\t* gcc.target/i386/pr43766.c: Ditto.\n+\t* gcc.target/i386/pr46226.c: Ditto.\n+\t* gcc.target/i386/pr46470.c: Ditto.\n+\t* gcc.target/i386/pr59929.c: Ditto.\n+\t* gcc.target/i386/sse-10.c: Ditto.\n+\t* gcc.target/i386/vararg-1.c: Ditto.\n+\t* gcc.target/i386/vararg-1.c: Ditto.\n+\t* gcc.target/i386/asm-6.c: Compile for fpic target only.\n+\t* gcc.target/i386/pr44223.c: Ditto.\n+\t* gcc.target/i386/bitfield1.c (dg-options): Remove target selector.\n+\t* gcc.target/i386/bitfield2.c (dg-options): Ditto.\n+\t* gcc.target/i386/pr67480.c (dg-options): Ditto.\n+\t* gcc.target/i386/vect-cond-1.c (dg-options): Ditto.\n+\t* gcc.target/i386/bittest.c (scan-assembler-times): Ditto.\n+\t* gcc.target/i386/darwin-fpmath.c (dg-do): Simplify target selector.\n+\t* gcc.target/i386/mvc9.c: Compile for lto target only.\n+\t* gcc.target/i386/pr45234.c: Compile for ia32 target only.\n+\t* gcc.target/i386/pr49866.c: Compile for lp64 target only.\n+\t* gcc.target/i386/pr57091.c: Ditto.\n+\t* gcc.target/i386/pr61599-2.c: Ditto.\n+\n 2017-08-29  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/81503\n \t* gcc.c-torture/execute/pr81503.c: New file.\n \n 2017-08-29  Martin Liska  <mliska@suse.cz>\n \n-\t* gcc.dg/tree-prof/update-loopch.c: Scan patterns in\n-\tswitchlower.\n+\t* gcc.dg/tree-prof/update-loopch.c: Scan patterns in switchlower.\n \t* gcc.dg/tree-ssa/vrp104.c: Likewise.\n \n 2017-08-29  Richard Biener  <rguenther@suse.de>\n-\tDominik Infuehr <dominik.infuehr@theobroma-systems.com>\n+\t    Dominik Infuehr <dominik.infuehr@theobroma-systems.com>\n \n \t* gcc.dg/vect/costmodel/x86_64/costmodel-vect-slp.c: New testcase.\n \n@@ -129,8 +159,7 @@\n \n 2017-08-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n-\t* gcc.target/powerpc/dform-1.c: Delete -mpower9-dform*\n-\toptions.\n+\t* gcc.target/powerpc/dform-1.c: Delete -mpower9-dform* options.\n \t* gcc.target/powerpc/dform-2.c: Likewise.\n \t* gcc.target/powerpc/dform-3.c: Likewise.\n \t* gcc.target/powerpc/pr71656-1.c: Likewise.\n@@ -147,8 +176,8 @@\n \n 2017-08-24  Steven Munroe  <munroesj@gcc.gnu.org>\n \n-\t* gcc.target/powerpc/mmx-packuswb-1.c [NO_WARN_X86_INTRINSICS]:\n-\tDefine.  Suppress warning during tests.\n+\t* gcc.target/powerpc/mmx-packuswb-1.c [NO_WARN_X86_INTRINSICS]: Define.\n+\tSuppress warning during tests.\n \n 2017-08-24  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "f4c8f618d4c3ae95f2e7af36a2a740274d454660", "filename": "gcc/testsuite/gcc.target/i386/20030926-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20030926-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20030926-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20030926-1.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,7 +1,7 @@\n /* PR optimization/11741  */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -minline-all-stringops\" } */\n-/* { dg-options \"-O2 -minline-all-stringops -march=pentium4\" { target ia32 } } */\n+/* { dg-additional-options \"-march=pentium4\" { target ia32 } } */\n \n extern void *memcpy (void *, const void *, __SIZE_TYPE__);\n extern __SIZE_TYPE__ strlen (const char *);"}, {"sha": "72a17eca31fc5e450c4a7639bd9a615bc4e4c571", "filename": "gcc/testsuite/gcc.target/i386/abi-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fabi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fabi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fabi-2.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,7 +1,7 @@\n /* Make certain that we pass __m256i in the correct register for AVX.  */\n /* { dg-do compile } */\n /* { dg-options \"-O1 -mavx\" } */\n-/* { dg-options \"-mabi=sysv -O1 -mavx\" { target x86_64-*-mingw* } } */\n+/* { dg-additional-options \"-mabi=sysv\" { target x86_64-*-mingw* } } */\n \n typedef long long __m256i __attribute__ ((__vector_size__ (32)));\n __m256i foo (void) { return (__m256i){ 1, 2, 3, 4 }; }"}, {"sha": "225e3193f7ad6866841d3a77b51628813e79c27e", "filename": "gcc/testsuite/gcc.target/i386/asm-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-6.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,8 +1,8 @@\n /* PR rtl-optimization/44174 */\n /* Testcase by Jakub Jelinek <jakub@gcc.gnu.org> */\n \n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fpic\" { target fpic } } */\n+/* { dg-do compile { target fpic } } */\n+/* { dg-options \"-O2 -fpic\" } */\n \n int f0 (int, int, int, int, int);\n int f1 (void);"}, {"sha": "ecc7efe6401078b2ac9f8e502735806089e88fc6", "filename": "gcc/testsuite/gcc.target/i386/bitfield1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitfield1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitfield1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitfield1.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,8 +1,7 @@\n // Test for bitfield alignment in structs on IA-32\n // { dg-do run }\n // { dg-require-effective-target ia32 }\n-// { dg-options \"-O2\" }\n-// { dg-options \"-mno-align-double -mno-ms-bitfields\" { target i?86-*-* x86_64-*-* } }\n+// { dg-options \"-O2 -mno-align-double -mno-ms-bitfields\" }\n \n extern void abort (void);\n extern void exit (int);"}, {"sha": "58f7cea1b603f96aba0f01636f83d6e21ce8c651", "filename": "gcc/testsuite/gcc.target/i386/bitfield2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitfield2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitfield2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitfield2.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,8 +1,7 @@\n // Test for bitfield alignment in structs on IA-32\n // { dg-do run }\n // { dg-require-effective-target ia32 }\n-// { dg-options \"-O2\" }\n-// { dg-options \"-mno-align-double -mno-ms-bitfields\" { target i?86-*-* x86_64-*-* } }\n+// { dg-options \"-O2 -mno-align-double -mno-ms-bitfields\" }\n \n extern void abort (void);\n extern void exit (int);"}, {"sha": "79c389718591ac979a746cd0d7a874b24b773032", "filename": "gcc/testsuite/gcc.target/i386/bittest.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbittest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbittest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbittest.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -19,4 +19,4 @@ gate_rtl_cprop (void)\n    memory and mask off bits are unnecessary.  In theory we can just count\n    the move-with-extension, and and testb instructions.  There should be\n    only one.  */\n-/* { dg-final { scan-assembler-times \"movzbl|and|testb\" 1 { target { i?86-*-* x86_64-*-*} } } } */\n+/* { dg-final { scan-assembler-times \"movzbl|and|testb\" 1 } } */"}, {"sha": "5b047010bd1459cf81672aad64ad1f34c767dccd", "filename": "gcc/testsuite/gcc.target/i386/darwin-fpmath.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdarwin-fpmath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdarwin-fpmath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdarwin-fpmath.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target i?86-*-darwin* x86_64-*-darwin* } } */\n+/* { dg-do compile { target *-*-darwin* } } */\n /* { dg-final { scan-assembler \"addsd\" } } */\n /* Do not add -msse or -msse2 or -mfpmath=sse to the options.  GCC is\n    supposed to use SSE math on Darwin by default, and libm won't work"}, {"sha": "ae2df2870600c1c7da13d96918bee66c02b21bbd", "filename": "gcc/testsuite/gcc.target/i386/interrupt-sibcall-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-sibcall-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-sibcall-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-sibcall-2.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -mgeneral-regs-only -mno-cld -mpreferred-stack-boundary=3\" { target { ! { ia32 } } } } */\n-/* { dg-options \"-O3 -mgeneral-regs-only -mno-cld -mpreferred-stack-boundary=2\" { target { ia32 } } } */\n+/* { dg-options \"-O3 -mgeneral-regs-only -mno-cld\" } */\n+/* { dg-additional-options \"-mpreferred-stack-boundary=3\" { target { ! ia32 } } }  */\n+/* { dg-additional-options \"-mpreferred-stack-boundary=2\" { target { ia32 } } } */\n \n extern void foo (void *) __attribute__ ((interrupt));\n extern void bar (void) __attribute__ ((no_caller_saved_registers));"}, {"sha": "4052f2afb547f07067f7c15c38e37800dc24d918", "filename": "gcc/testsuite/gcc.target/i386/mvc9.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmvc9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmvc9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmvc9.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,6 +1,6 @@\n-/* { dg-do run } */\n+/* { dg-do run { target lto } } */\n /* { dg-require-ifunc \"\" } */\n-/* { dg-options \"-flto -O2\" { target lto } } */\n+/* { dg-options \"-O2 -flto\" } */\n \n __attribute__((target_clones(\"avx\",\"arch=slm\",\"arch=core-avx2\",\"default\")))\n int"}, {"sha": "6c1620b4a3b15a30d28368e68bf40f1e15a735ee", "filename": "gcc/testsuite/gcc.target/i386/pr22076.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22076.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22076.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22076.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fomit-frame-pointer -flax-vector-conversions -mmmx\" } */\n-/* { dg-options \"-O2 -fomit-frame-pointer -flax-vector-conversions -mmmx -mno-vect8-ret-in-mem\" { target *-*-vxworks* } } */\n+/* { dg-additional-options \"-mno-vect8-ret-in-mem\" { target *-*-vxworks* } } */\n \n #include <mmintrin.h>\n "}, {"sha": "e1942fe08958b28df740e19b7b1ff5a4c1154d21", "filename": "gcc/testsuite/gcc.target/i386/pr37216.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37216.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37216.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37216.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n /* { dg-options \"-O3 -msse2\" } */\n-/* { dg-options \"-O3 -msse2 -mpe-aligned-commons\" { target pe_aligned_commons } } */\n+/* { dg-additional-options \"-mpe-aligned-commons\" { target pe_aligned_commons } } */\n /* { dg-require-effective-target sse2 } */\n \n #include \"sse2-check.h\""}, {"sha": "a148dd39ba5e734bfbfc36bb18a134502a3794b5", "filename": "gcc/testsuite/gcc.target/i386/pr39431.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39431.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39431.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39431.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,7 +1,7 @@\n /* PR target/39431 */\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n-/* { dg-options \"-O2 -march=i686 -fpic\" { target { ia32 && fpic } } } */\n+/* { dg-additional-options \"-march=i686 -fpic\" { target { ia32 && fpic } } } */\n \n extern void bar (char *, int);\n "}, {"sha": "1e78c231d39d7f9a89b63fe7a62a4872f29d2dcf", "filename": "gcc/testsuite/gcc.target/i386/pr40906-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr40906-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr40906-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr40906-1.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run } */\n /* { dg-require-effective-target ia32 } */\n-/* { dg-options \"-O2 -fomit-frame-pointer -fno-asynchronous-unwind-tables -mpush-args -mno-accumulate-outgoing-args\" } */\n-/* { dg-options \"-O2 -fomit-frame-pointer -fno-asynchronous-unwind-tables -mpush-args\" { target *-*-mingw* *-*-cygwin* } } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -fno-asynchronous-unwind-tables -mpush-args\" } */\n+/* { dg-additional-options \"-mno-accumulate-outgoing-args\" { target { ! { *-*-mingw* *-*-cygwin* } } } } */\n \n void abort (void);\n "}, {"sha": "824c43254d37a82abfbcdb6518b7439a3060347c", "filename": "gcc/testsuite/gcc.target/i386/pr40906-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr40906-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr40906-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr40906-2.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run } */\n /* { dg-require-effective-target ia32 } */\n-/* { dg-options \"-O2 -Wno-psabi -fomit-frame-pointer -fno-asynchronous-unwind-tables -mpush-args -mno-accumulate-outgoing-args -m128bit-long-double\" } */\n-/* { dg-options \"-O2 -Wno-psabi -fomit-frame-pointer -fno-asynchronous-unwind-tables -mpush-args -m128bit-long-double\" { target *-*-mingw* *-*-cygwin* } } */\n+/* { dg-options \"-O2 -Wno-psabi -fomit-frame-pointer -fno-asynchronous-unwind-tables -mpush-args -m128bit-long-double\" } */\n+/* { dg-additional-options \"-mno-accumulate-outgoing-args\" { target { ! { *-*-mingw* *-*-cygwin* } } } } */\n \n void abort (void);\n "}, {"sha": "72898ccc6501dfe99f6a1b8995cc078ed3ba7016", "filename": "gcc/testsuite/gcc.target/i386/pr43766.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr43766.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr43766.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr43766.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n-/* { dg-options \"-O2 -msse -mregparm=3\" { target ia32 } } */\n+/* { dg-additional-options \"-msse -mregparm=3\" { target ia32 } } */\n \n void p (int *a, int i)\n {"}, {"sha": "9f134e72348dd1456623d5c70b7618fbaa22d457", "filename": "gcc/testsuite/gcc.target/i386/pr44223.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr44223.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr44223.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr44223.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,6 +1,6 @@\n /* PR debug/44223 */\n-/* { dg-do compile } */\n-/* { dg-options \"-O3 -fsched-pressure -fschedule-insns -fpic -march=core2 -g\" { target fpic } } */\n+/* { dg-do compile { target fpic } } */\n+/* { dg-options \"-O3 -fsched-pressure -fschedule-insns -fpic -march=core2 -g\" } */\n \n struct S { unsigned int s1; int s2; };\n struct T { int t; };"}, {"sha": "d0579b5ea8dc3463ec38eb81863995cad0a55869", "filename": "gcc/testsuite/gcc.target/i386/pr45234.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr45234.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr45234.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr45234.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,6 +1,6 @@\n /* PR middle-end/45234 */\n-/* { dg-do compile } */\n-/* { dg-options \"-march=i586\" { target ia32 } } */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-march=i586\" } */\n \n struct S { union { double b[4]; } a[18]; } s, a[5];\n void foo (struct S);"}, {"sha": "e93cbf3dda86446ab74a7c5c4051b3bf19d031d0", "filename": "gcc/testsuite/gcc.target/i386/pr46226.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46226.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46226.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46226.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n-/* { dg-options \"-Os -fomit-frame-pointer -mno-accumulate-outgoing-args -fno-asynchronous-unwind-tables\" } */\n-/* { dg-options \"-Os -fomit-frame-pointer -fno-asynchronous-unwind-tables\" { target *-*-mingw* *-*-cygwin* } } */\n+/* { dg-options \"-Os -fomit-frame-pointer -fno-asynchronous-unwind-tables\" } */\n+/* { dg-additional-options \"-mno-accumulate-outgoing-args\" { target { ! { *-*-mingw* *-*-cygwin* } } } } */\n \n extern void abort(void);\n "}, {"sha": "728ddcde8ba7302788322dc0bbe90d6f97dca43c", "filename": "gcc/testsuite/gcc.target/i386/pr46470.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46470.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46470.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46470.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -4,8 +4,9 @@\n /* These options are selected to ensure 1 word needs to be allocated\n    on the stack to maintain alignment for the call.  This should be\n    transformed to push+pop.  We also want to force unwind info updates.  */\n-/* { dg-options \"-Os -fomit-frame-pointer -fasynchronous-unwind-tables -mno-red-zone\" } */\n-/* { dg-options \"-Os -fomit-frame-pointer -mpreferred-stack-boundary=3 -fasynchronous-unwind-tables\" { target ia32 } } */\n+/* { dg-options \"-Os -fomit-frame-pointer -fasynchronous-unwind-tables\" } */\n+/* { dg-additional-options \"-mno-red-zone\" { target { ! ia32 } } } */\n+/* { dg-additional-options \"-mpreferred-stack-boundary=3\" { target ia32 } } */\n /* ms_abi has reserved stack-region.  */\n /* { dg-skip-if \"\" { x86_64-*-mingw* } } */\n void f();"}, {"sha": "622c8f656254b4ec993f4272383088e68208a076", "filename": "gcc/testsuite/gcc.target/i386/pr49866.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49866.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49866.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49866.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,6 +1,6 @@\n /* PR target/49866 */\n-/* { dg-do assemble } */\n-/* { dg-options \"-O2 -mcmodel=large\" { target lp64 } } */\n+/* { dg-do assemble { target lp64 } } */\n+/* { dg-options \"-O2 -mcmodel=large\"  } */\n \n void fn (void *, int, int);\n int fn2 (void);"}, {"sha": "86cb5f02b610c2f53095b68fc5c0d54ff0dcb6fb", "filename": "gcc/testsuite/gcc.target/i386/pr57091.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57091.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57091.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57091.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O -mcmodel=large\"  { target lp64 } } */\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-O -mcmodel=large\" } */\n void (*bar)();\n \n void foo (void)"}, {"sha": "53e0b237c2706133dd5403858b96162436d576ec", "filename": "gcc/testsuite/gcc.target/i386/pr59929.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59929.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59929.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59929.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n /* { dg-options \"-O0 -mno-accumulate-outgoing-args\" } */\n-/* { dg-options \"-O0 -mno-accumulate-outgoing-args -mx32 -maddress-mode=short\" { target x32 } } */\n+/* { dg-additional-options \"-mx32 -maddress-mode=short\" { target x32 } } */\n \n void\n __attribute__ ((noinline))"}, {"sha": "be031c05b1fa41c2f1caf9d96adffc62bc032b13", "filename": "gcc/testsuite/gcc.target/i386/pr61599-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61599-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61599-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61599-2.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,6 +1,6 @@\n /* PR target/61599 */\n /* { dg-do compile { target lp64 } } */\n-/* { dg-options \"-mcmodel=medium -fdata-sections\" { target lp64 } } */\n+/* { dg-options \"-mcmodel=medium -fdata-sections\" } */\n \n /* With -mcmodel=medium, all the arrays will be treated as large data.  */\n "}, {"sha": "aa549682dbd869ba76dc20dae726bc9d04597899", "filename": "gcc/testsuite/gcc.target/i386/pr67480.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67480.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67480.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67480.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mavx512bw -O2 -ftree-vectorize\" { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-mavx512bw -O2 -ftree-vectorize\" } */\n \n void\n foo(const char *in, char *out, unsigned n)"}, {"sha": "4d4de4f4de55df18a927dc375a45e9f8c363c041", "filename": "gcc/testsuite/gcc.target/i386/sse-10.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-10.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,7 +1,7 @@\n /* PR 17930 */\n /* { dg-do run } */\n-/* { dg-options \"-O1 -msse2 -mfpmath=sse -mno-accumulate-outgoing-args -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer\" } */\n-/* { dg-options \"-O1 -msse2 -mfpmath=sse -fno-omit-frame-pointer\" { target *-*-mingw* *-*-cygwin* } } */\n+/* { dg-options \"-O1 -msse2 -mfpmath=sse -fno-omit-frame-pointer\" } */\n+/* { dg-additional-options \"-mno-accumulate-outgoing-args -mno-omit-leaf-frame-pointer\" { target { ! { *-*-mingw* *-*-cygwin* } } } } */\n /* { dg-require-effective-target sse2 } */\n \n #include \"sse2-check.h\""}, {"sha": "cab44ed0969a413e33d3f632874f0c493fd73f9b", "filename": "gcc/testsuite/gcc.target/i386/vararg-1.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvararg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvararg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvararg-1.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,8 +1,7 @@\n /* PR middle-end/36858 */\n /* { dg-do run } */\n-/* { dg-options \"-w\" { target { ! ia32 } } } */\n-/* { dg-options \"-w\" { target { llp64 } } } */\n-/* { dg-options \"-w -msse2 -mpreferred-stack-boundary=2\" { target { ia32 } } } */\n+/* { dg-options \"-w -msse2\" } */\n+/* { dg-additional-options \"-mpreferred-stack-boundary=2\" { target { ia32 } } } */\n /* { dg-require-effective-target sse2 } */\n \n #include \"sse2-check.h\""}, {"sha": "3010f415f828e4e58dae27df0280ed05d46854dd", "filename": "gcc/testsuite/gcc.target/i386/vararg-2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvararg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvararg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvararg-2.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,8 +1,7 @@\n /* PR middle-end/36859 */\n /* { dg-do run } */\n-/* { dg-options \"-w\" { target { ! ia32 } } } */\n-/* { dg-options \"-w\" { target { llp64 } } } */\n-/* { dg-options \"-w -msse2 -mpreferred-stack-boundary=2\" { target { ia32 } } } */\n+/* { dg-options \"-w -msse2\" } */\n+/* { dg-additional-options \"-mpreferred-stack-boundary=2\" { target { ia32 } } } */\n /* { dg-require-effective-target sse2 } */\n \n #include \"sse2-check.h\""}, {"sha": "1bf7aa28a132f42034ac9d961f60e1f68cf10730", "filename": "gcc/testsuite/gcc.target/i386/vect-cond-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-cond-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-cond-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-cond-1.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -mavx2\" { target avx2 } } */\n+/* { dg-options \"-O2 -ftree-vectorize -mavx2\" } */\n \n int a[1024];\n "}, {"sha": "2b2b81ecf7aba0cbd8d821c6759b6f76673c5b88", "filename": "gcc/testsuite/gcc.target/i386/vect8-ret.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect8-ret.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffc0382ff79b23a6f88113d277842934de258ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect8-ret.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect8-ret.c?ref=2ffc0382ff79b23a6f88113d277842934de258ed", "patch": "@@ -1,5 +1,4 @@\n-/* { dg-do compile { target ia32 } } */\n-/* { dg-options \"-mmmx\" { target *-*-vxworks* } } */\n+/* { dg-do compile { target { ia32 && { ! *-*-vxworks* } } } } */\n /* { dg-options \"-mmmx -mvect8-ret-in-mem\" } */\n \n #include <mmintrin.h>"}]}