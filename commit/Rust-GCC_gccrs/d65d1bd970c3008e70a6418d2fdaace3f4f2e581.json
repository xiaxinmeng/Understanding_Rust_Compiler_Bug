{"sha": "d65d1bd970c3008e70a6418d2fdaace3f4f2e581", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY1ZDFiZDk3MGMzMDA4ZTcwYTY0MThkMmZkYWFjZTNmNGYyZTU4MQ==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2017-06-02T15:02:25Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2017-06-02T15:02:25Z"}, "message": "rs6000.c (rs6000_gimple_fold_builtin): Add handling for early expansion of vec_min and vec_max builtins.\n\n[gcc]\n\n2017-06-02  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Add handling\n\tfor early expansion of vec_min and vec_max builtins.\n\t(builtin_function_type): Add min/max unsigned variants to those\n\tidentified as having unsigned arguments.\n\n[gcc/testsuite]\n\n2017-06-02  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t*  testsuite/gcc.target/powerpc/fold-vec-minmax-char.c: New.\n\t*  testsuite/gcc.target/powerpc/fold-vec-minmax-floatdouble.c: New.\n\t*  testsuite/gcc.target/powerpc/fold-vec-minmax-int.c: New.\n\t*  testsuite/gcc.target/powerpc/fold-vec-minmax-longlong.c: New.\n\t*  testsuite/gcc.target/powerpc/fold-vec-minmax-short.c: New.\n\nFrom-SVN: r248834", "tree": {"sha": "7a20d8c639f96c9410db2eee4e59d4f168848b27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a20d8c639f96c9410db2eee4e59d4f168848b27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d65d1bd970c3008e70a6418d2fdaace3f4f2e581", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d65d1bd970c3008e70a6418d2fdaace3f4f2e581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d65d1bd970c3008e70a6418d2fdaace3f4f2e581", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d65d1bd970c3008e70a6418d2fdaace3f4f2e581/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a9945ae2868d22cfc7cce0369c32c21e298498fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9945ae2868d22cfc7cce0369c32c21e298498fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9945ae2868d22cfc7cce0369c32c21e298498fe"}], "stats": {"total": 247, "additions": 247, "deletions": 0}, "files": [{"sha": "345c3ecdc893f2bd5abb523d84bace104fe532a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65d1bd970c3008e70a6418d2fdaace3f4f2e581/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65d1bd970c3008e70a6418d2fdaace3f4f2e581/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d65d1bd970c3008e70a6418d2fdaace3f4f2e581", "patch": "@@ -1,3 +1,9 @@\n+2017-06-02  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Add handling\n+\tfor early expansion of vec_min and vec_max builtins.\n+\t(builtin_function_type): Add min/max unsigned variants to those\n+\tidentified as having unsigned arguments.\n+\n 2017-06-02  Olivier Hainque  <hainque@adacore.com>\n \n \t* config/vx-common.h (DWARF_UNWIND_INFO): Switch #define to 1."}, {"sha": "e3de2edbb58be4fc1aad121bae73722f6e237510", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65d1bd970c3008e70a6418d2fdaace3f4f2e581/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65d1bd970c3008e70a6418d2fdaace3f4f2e581/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d65d1bd970c3008e70a6418d2fdaace3f4f2e581", "patch": "@@ -17347,6 +17347,46 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \tgsi_replace (gsi, g, true);\n \treturn true;\n       }\n+    /* flavors of vec_min.  */\n+    case VSX_BUILTIN_XVMINDP:\n+    case P8V_BUILTIN_VMINSD:\n+    case P8V_BUILTIN_VMINUD:\n+    case ALTIVEC_BUILTIN_VMINSB:\n+    case ALTIVEC_BUILTIN_VMINSH:\n+    case ALTIVEC_BUILTIN_VMINSW:\n+    case ALTIVEC_BUILTIN_VMINUB:\n+    case ALTIVEC_BUILTIN_VMINUH:\n+    case ALTIVEC_BUILTIN_VMINUW:\n+    case ALTIVEC_BUILTIN_VMINFP:\n+      {\n+\targ0 = gimple_call_arg (stmt, 0);\n+\targ1 = gimple_call_arg (stmt, 1);\n+\tlhs = gimple_call_lhs (stmt);\n+\tgimple *g = gimple_build_assign (lhs, MIN_EXPR, arg0, arg1);\n+\tgimple_set_location (g, gimple_location (stmt));\n+\tgsi_replace (gsi, g, true);\n+\treturn true;\n+      }\n+    /* flavors of vec_max.  */\n+    case VSX_BUILTIN_XVMAXDP:\n+    case P8V_BUILTIN_VMAXSD:\n+    case P8V_BUILTIN_VMAXUD:\n+    case ALTIVEC_BUILTIN_VMAXSB:\n+    case ALTIVEC_BUILTIN_VMAXSH:\n+    case ALTIVEC_BUILTIN_VMAXSW:\n+    case ALTIVEC_BUILTIN_VMAXUB:\n+    case ALTIVEC_BUILTIN_VMAXUH:\n+    case ALTIVEC_BUILTIN_VMAXUW:\n+    case ALTIVEC_BUILTIN_VMAXFP:\n+      {\n+\targ0 = gimple_call_arg (stmt, 0);\n+\targ1 = gimple_call_arg (stmt, 1);\n+\tlhs = gimple_call_lhs (stmt);\n+\tgimple *g = gimple_build_assign (lhs, MAX_EXPR, arg0, arg1);\n+\tgimple_set_location (g, gimple_location (stmt));\n+\tgsi_replace (gsi, g, true);\n+\treturn true;\n+      }\n     default:\n       break;\n     }\n@@ -18985,6 +19025,14 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n     case MISC_BUILTIN_DIVDEU:\n     case MISC_BUILTIN_DIVDEUO:\n     case VSX_BUILTIN_UDIV_V2DI:\n+    case ALTIVEC_BUILTIN_VMAXUB:\n+    case ALTIVEC_BUILTIN_VMINUB:\n+    case ALTIVEC_BUILTIN_VMAXUH:\n+    case ALTIVEC_BUILTIN_VMINUH:\n+    case ALTIVEC_BUILTIN_VMAXUW:\n+    case ALTIVEC_BUILTIN_VMINUW:\n+    case P8V_BUILTIN_VMAXUD:\n+    case P8V_BUILTIN_VMINUD:\n       h.uns_p[0] = 1;\n       h.uns_p[1] = 1;\n       h.uns_p[2] = 1;"}, {"sha": "fdd4a90ddca5ab8733c8b44ede504dc7bba865ed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65d1bd970c3008e70a6418d2fdaace3f4f2e581/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65d1bd970c3008e70a6418d2fdaace3f4f2e581/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d65d1bd970c3008e70a6418d2fdaace3f4f2e581", "patch": "@@ -1,3 +1,11 @@\n+2017-06-02  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-minmax-char.c: New.\n+\t* gcc.target/powerpc/fold-vec-minmax-floatdouble.c: New.\n+\t* gcc.target/powerpc/fold-vec-minmax-int.c: New.\n+\t* gcc.target/powerpc/fold-vec-minmax-longlong.c: New.\n+\t* gcc.target/powerpc/fold-vec-minmax-short.c: New.\n+\n 2017-06-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/atomic_cmp_exchange_zero_strong_1.c: New test."}, {"sha": "9df6ecdcd75c899b4f394986b8aa3acede7018b8", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-minmax-char.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65d1bd970c3008e70a6418d2fdaace3f4f2e581/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65d1bd970c3008e70a6418d2fdaace3f4f2e581/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-char.c?ref=d65d1bd970c3008e70a6418d2fdaace3f4f2e581", "patch": "@@ -0,0 +1,37 @@\n+/* Verify that overloaded built-ins for vec_min with char\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec\" } */\n+\n+#include <altivec.h>\n+\n+vector signed char\n+test3_min (vector signed char x, vector signed char y)\n+{\n+  return vec_min (x, y);\n+}\n+\n+vector unsigned char\n+test6_min (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_min (x, y);\n+}\n+\n+vector signed char\n+test3_max (vector signed char x, vector signed char y)\n+{\n+  return vec_max (x, y);\n+}\n+\n+vector unsigned char\n+test6_max (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_max (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vminsb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vminub\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxub\" 1 } } */"}, {"sha": "1185ce28f45249f8ab4856f7209e0a36d037f759", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-minmax-floatdouble.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65d1bd970c3008e70a6418d2fdaace3f4f2e581/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-floatdouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65d1bd970c3008e70a6418d2fdaace3f4f2e581/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-floatdouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-floatdouble.c?ref=d65d1bd970c3008e70a6418d2fdaace3f4f2e581", "patch": "@@ -0,0 +1,37 @@\n+/* Verify that overloaded built-ins for vec_max with float and\n+   double inputs for VSX produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector float\n+test1_min (vector float x, vector float y)\n+{\n+  return vec_min (x, y);\n+}\n+\n+vector double\n+test2_min (vector double x, vector double y)\n+{\n+  return vec_min (x, y);\n+}\n+\n+vector float\n+test1_max (vector float x, vector float y)\n+{\n+  return vec_max (x, y);\n+}\n+\n+vector double\n+test2_max (vector double x, vector double y)\n+{\n+  return vec_max (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vminsp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmindp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxdp\" 1 } } */"}, {"sha": "1ce1c2bab1cc30144ec62d0eb1c9035a5a3bbc85", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-minmax-int.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65d1bd970c3008e70a6418d2fdaace3f4f2e581/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65d1bd970c3008e70a6418d2fdaace3f4f2e581/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-int.c?ref=d65d1bd970c3008e70a6418d2fdaace3f4f2e581", "patch": "@@ -0,0 +1,37 @@\n+/* Verify that overloaded built-ins for vec_min with int\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed int\n+test3_min (vector signed int x, vector signed int y)\n+{\n+  return vec_min (x, y);\n+}\n+\n+vector unsigned int\n+test6_min (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_min (x, y);\n+}\n+\n+vector signed int\n+test3_max (vector signed int x, vector signed int y)\n+{\n+  return vec_max (x, y);\n+}\n+\n+vector unsigned int\n+test6_max (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_max (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vminsw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vminuw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxuw\" 1 } } */"}, {"sha": "ed9c66db34b472033e8ba9e3f39d3b5ec2539c5b", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-minmax-longlong.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65d1bd970c3008e70a6418d2fdaace3f4f2e581/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65d1bd970c3008e70a6418d2fdaace3f4f2e581/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-longlong.c?ref=d65d1bd970c3008e70a6418d2fdaace3f4f2e581", "patch": "@@ -0,0 +1,37 @@\n+/* Verify that overloaded built-ins for vec_min with long long\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector\" } */\n+\n+#include <altivec.h>\n+\n+vector signed long long\n+test3_min (vector signed long long x, vector signed long long y)\n+{\n+  return vec_min (x, y);\n+}\n+\n+vector unsigned long long\n+test6_min (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_min (x, y);\n+}\n+\n+vector signed long long\n+test3_max (vector signed long long x, vector signed long long y)\n+{\n+  return vec_max (x, y);\n+}\n+\n+vector unsigned long long\n+test6_max (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_max (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vminsd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vminud\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxud\" 1 } } */"}, {"sha": "fa608c9e9bcecdd6e21450e107d32f4816b13423", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-minmax-short.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65d1bd970c3008e70a6418d2fdaace3f4f2e581/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65d1bd970c3008e70a6418d2fdaace3f4f2e581/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-short.c?ref=d65d1bd970c3008e70a6418d2fdaace3f4f2e581", "patch": "@@ -0,0 +1,37 @@\n+/* Verify that overloaded built-ins for vec_min with short\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec\" } */\n+\n+#include <altivec.h>\n+\n+vector signed short\n+test3_min (vector signed short x, vector signed short y)\n+{\n+  return vec_min (x, y);\n+}\n+\n+vector unsigned short\n+test6_min (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_min (x, y);\n+}\n+\n+vector signed short\n+test3_max (vector signed short x, vector signed short y)\n+{\n+  return vec_max (x, y);\n+}\n+\n+vector unsigned short\n+test6_max (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_max (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vminsh\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsh\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vminuh\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxuh\" 1 } } */"}]}