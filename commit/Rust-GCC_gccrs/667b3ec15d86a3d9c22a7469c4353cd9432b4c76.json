{"sha": "667b3ec15d86a3d9c22a7469c4353cd9432b4c76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY3YjNlYzE1ZDg2YTNkOWMyMmE3NDY5YzQzNTNjZDk0MzJiNGM3Ng==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2018-11-07T13:49:03Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2018-11-07T13:49:03Z"}, "message": "Update libquadmath fmaq from glibc, fix nanq issues.\n\nThis patch extends update-quadmath.py to update fmaq from glibc.\n\nThe issue in that function was that quadmath-imp.h had a struct in a\nunion with mant_high and mant_low fields (up to 64-bit) whereas glibc\nhas mantissa0, mantissa1, mantissa2 and mantissa3 (up to 32-bit).  The\npatch changes those fields to be the same as in glibc, moving printf /\nstrtod code that also uses those fields back to closer to the glibc\nform.  This allows fmaq to be updated automatically from glibc (which\nbrings in at least one bug fix from glibc from 2015).\n\nnanq was also using the mant_high field name, and had other issues: it\nonly partly initialized the union from which a value was returned, and\nsetting mant_high to 1 meant a signaling NaN would be returned rather\nthan a quiet NaN.  This patch fixes those issues as part of updating\nit to use the changed interfaces (but does not fix the issue of not\nusing the argument).\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\n\t* quadmath-imp.h (ieee854_float128): Use mantissa0, mantissa1,\n\tmantissa2 and mantissa3 fields instead of mant_high and mant_low.\n\tChange nan field to ieee_nan.\n\t* update-quadmath.py (update_sources): Also update fmaq.c.\n\t* math/nanq.c (nanq): Use ieee_nan field of union.\n\tZero-initialize f.  Set quiet_nan field.\n\t* printf/flt1282mpn.c, printf/printf_fphex.c, strtod/mpn2flt128.c,\n\tstrtod/strtoflt128.c: Use mantissa0, mantissa1, mantissa2 and\n\tmantissa3 fields.  Use ieee_nan and quiet_nan field.\n\t* math/fmaq.c: Regenerate from glibc sources with\n\tupdate-quadmath.py.\n\nFrom-SVN: r265874", "tree": {"sha": "dee0c3942cebd1d3f3ba6c46f830c4e47585ef3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dee0c3942cebd1d3f3ba6c46f830c4e47585ef3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/667b3ec15d86a3d9c22a7469c4353cd9432b4c76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/667b3ec15d86a3d9c22a7469c4353cd9432b4c76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/667b3ec15d86a3d9c22a7469c4353cd9432b4c76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/667b3ec15d86a3d9c22a7469c4353cd9432b4c76/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "296b0b042ae6de0541b07a3169f9d12a92a3d672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/296b0b042ae6de0541b07a3169f9d12a92a3d672", "html_url": "https://github.com/Rust-GCC/gccrs/commit/296b0b042ae6de0541b07a3169f9d12a92a3d672"}], "stats": {"total": 184, "additions": 93, "deletions": 91}, "files": [{"sha": "51c9ad2be9c645f95f962c5c36231de12507e8d5", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/667b3ec15d86a3d9c22a7469c4353cd9432b4c76/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/667b3ec15d86a3d9c22a7469c4353cd9432b4c76/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=667b3ec15d86a3d9c22a7469c4353cd9432b4c76", "patch": "@@ -1,3 +1,17 @@\n+2018-11-07  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* quadmath-imp.h (ieee854_float128): Use mantissa0, mantissa1,\n+\tmantissa2 and mantissa3 fields instead of mant_high and mant_low.\n+\tChange nan field to ieee_nan.\n+\t* update-quadmath.py (update_sources): Also update fmaq.c.\n+\t* math/nanq.c (nanq): Use ieee_nan field of union.\n+\tZero-initialize f.  Set quiet_nan field.\n+\t* printf/flt1282mpn.c, printf/printf_fphex.c, strtod/mpn2flt128.c,\n+\tstrtod/strtoflt128.c: Use mantissa0, mantissa1, mantissa2 and\n+\tmantissa3 fields.  Use ieee_nan and quiet_nan field.\n+\t* math/fmaq.c: Regenerate from glibc sources with\n+\tupdate-quadmath.py.\n+\n 2018-11-05  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR libquadmath/68686"}, {"sha": "5fe4c39302c7f61c9262731301c88a194e20731a", "filename": "libquadmath/math/fmaq.c", "status": "modified", "additions": 28, "deletions": 54, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/667b3ec15d86a3d9c22a7469c4353cd9432b4c76/libquadmath%2Fmath%2Ffmaq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/667b3ec15d86a3d9c22a7469c4353cd9432b4c76/libquadmath%2Fmath%2Ffmaq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffmaq.c?ref=667b3ec15d86a3d9c22a7469c4353cd9432b4c76", "patch": "@@ -1,5 +1,5 @@\n /* Compute x * y + z as ternary operation.\n-   Copyright (C) 2010-2017 Free Software Foundation, Inc.\n+   Copyright (C) 2010-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Jakub Jelinek <jakub@redhat.com>, 2010.\n \n@@ -18,16 +18,6 @@\n    <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n-#include <math.h>\n-#include <float.h>\n-#ifdef HAVE_FENV_H\n-# include <fenv.h>\n-# if defined HAVE_FEHOLDEXCEPT && defined HAVE_FESETROUND \\\n-     && defined HAVE_FEUPDATEENV && defined HAVE_FETESTEXCEPT \\\n-     && defined FE_TOWARDZERO && defined FE_INEXACT\n-#  define USE_FENV_H\n-# endif\n-#endif\n \n /* This implementation uses rounding to odd to avoid problems with\n    double rounding.  See a paper by Boldo and Melquiond:\n@@ -73,7 +63,7 @@ fmaq (__float128 x, __float128 y, __float128 z)\n       if (u.ieee.exponent + v.ieee.exponent\n \t  > 0x7fff + IEEE854_FLOAT128_BIAS)\n \treturn x * y;\n-      /* If x * y is less than 1/4 of FLT128_DENORM_MIN, neither the\n+      /* If x * y is less than 1/4 of FLT128_TRUE_MIN, neither the\n \t result nor whether there is underflow depends on its exact\n \t value, only on its sign.  */\n       if (u.ieee.exponent + v.ieee.exponent\n@@ -94,8 +84,10 @@ fmaq (__float128 x, __float128 y, __float128 z)\n \t      : (w.ieee.exponent == 0\n \t\t || (w.ieee.exponent == 1\n \t\t     && w.ieee.negative != neg\n-\t\t     && w.ieee.mant_low == 0\n-\t\t     && w.ieee.mant_high == 0)))\n+\t\t     && w.ieee.mantissa3 == 0\n+\t\t     && w.ieee.mantissa2 == 0\n+\t\t     && w.ieee.mantissa1 == 0\n+\t\t     && w.ieee.mantissa0 == 0)))\n \t    {\n \t      __float128 force_underflow = x * y;\n \t      math_force_eval (force_underflow);\n@@ -124,7 +116,7 @@ fmaq (__float128 x, __float128 y, __float128 z)\n \t     very small, adjust them up to avoid spurious underflows,\n \t     rather than down.  */\n \t  if (u.ieee.exponent + v.ieee.exponent\n-\t      <= IEEE854_FLOAT128_BIAS + FLT128_MANT_DIG)\n+\t      <= IEEE854_FLOAT128_BIAS + 2 * FLT128_MANT_DIG)\n \t    {\n \t      if (u.ieee.exponent > v.ieee.exponent)\n \t\tu.ieee.exponent += 2 * FLT128_MANT_DIG + 2;\n@@ -181,17 +173,15 @@ fmaq (__float128 x, __float128 y, __float128 z)\n     }\n \n   /* Ensure correct sign of exact 0 + 0.  */\n-  if (__builtin_expect ((x == 0 || y == 0) && z == 0, 0))\n+  if (__glibc_unlikely ((x == 0 || y == 0) && z == 0))\n     {\n       x = math_opt_barrier (x);\n       return x * y + z;\n     }\n \n-#ifdef USE_FENV_H\n   fenv_t env;\n   feholdexcept (&env);\n   fesetround (FE_TONEAREST);\n-#endif\n \n   /* Multiplication m1 + m2 = x * y using Dekker's algorithm.  */\n #define C ((1LL << (FLT128_MANT_DIG + 1) / 2) + 1)\n@@ -214,62 +204,46 @@ fmaq (__float128 x, __float128 y, __float128 z)\n   /* Ensure the arithmetic is not scheduled after feclearexcept call.  */\n   math_force_eval (m2);\n   math_force_eval (a2);\n-#ifdef USE_FENV_H\n   feclearexcept (FE_INEXACT);\n-#endif\n \n   /* If the result is an exact zero, ensure it has the correct sign.  */\n   if (a1 == 0 && m2 == 0)\n     {\n-#ifdef USE_FENV_H\n       feupdateenv (&env);\n-#endif\n       /* Ensure that round-to-nearest value of z + m1 is not reused.  */\n       z = math_opt_barrier (z);\n       return z + m1;\n     }\n \n-#ifdef USE_FENV_H\n   fesetround (FE_TOWARDZERO);\n-#endif\n   /* Perform m2 + a2 addition with round to odd.  */\n   u.value = a2 + m2;\n \n-  if (__builtin_expect (adjust == 0, 1))\n+  if (__glibc_likely (adjust == 0))\n     {\n-#ifdef USE_FENV_H\n-      if ((u.ieee.mant_low & 1) == 0 && u.ieee.exponent != 0x7fff)\n-\tu.ieee.mant_low |= fetestexcept (FE_INEXACT) != 0;\n+      if ((u.ieee.mantissa3 & 1) == 0 && u.ieee.exponent != 0x7fff)\n+\tu.ieee.mantissa3 |= fetestexcept (FE_INEXACT) != 0;\n       feupdateenv (&env);\n-#endif\n       /* Result is a1 + u.value.  */\n       return a1 + u.value;\n     }\n-  else if (__builtin_expect (adjust > 0, 1))\n+  else if (__glibc_likely (adjust > 0))\n     {\n-#ifdef USE_FENV_H\n-      if ((u.ieee.mant_low & 1) == 0 && u.ieee.exponent != 0x7fff)\n-\tu.ieee.mant_low |= fetestexcept (FE_INEXACT) != 0;\n+      if ((u.ieee.mantissa3 & 1) == 0 && u.ieee.exponent != 0x7fff)\n+\tu.ieee.mantissa3 |= fetestexcept (FE_INEXACT) != 0;\n       feupdateenv (&env);\n-#endif\n       /* Result is a1 + u.value, scaled up.  */\n       return (a1 + u.value) * 0x1p113Q;\n     }\n   else\n     {\n-#ifdef USE_FENV_H\n-      if ((u.ieee.mant_low & 1) == 0)\n-\tu.ieee.mant_low |= fetestexcept (FE_INEXACT) != 0;\n-#endif\n+      if ((u.ieee.mantissa3 & 1) == 0)\n+\tu.ieee.mantissa3 |= fetestexcept (FE_INEXACT) != 0;\n       v.value = a1 + u.value;\n       /* Ensure the addition is not scheduled after fetestexcept call.  */\n-      asm volatile (\"\" : : \"m\" (v.value));\n-#ifdef USE_FENV_H\n+      math_force_eval (v.value);\n       int j = fetestexcept (FE_INEXACT) != 0;\n       feupdateenv (&env);\n-#else\n-      int j = 0;\n-#endif\n       /* Ensure the following computations are performed in default rounding\n \t mode instead of just reusing the round to zero computation.  */\n       asm volatile (\"\" : \"=m\" (u) : \"m\" (u));\n@@ -281,11 +255,11 @@ fmaq (__float128 x, __float128 y, __float128 z)\n \t rounding will occur.  */\n       if (v.ieee.exponent > 228)\n \treturn (a1 + u.value) * 0x1p-228Q;\n-      /* If v.value * 0x1p-228Q with round to zero is a subnormal above\n-\t or equal to FLT128_MIN / 2, then v.value * 0x1p-228Q shifts mantissa\n-\t down just by 1 bit, which means v.ieee.mant_low |= j would\n+      /* If v.value * 0x1p-228L with round to zero is a subnormal above\n+\t or equal to FLT128_MIN / 2, then v.value * 0x1p-228L shifts mantissa\n+\t down just by 1 bit, which means v.ieee.mantissa3 |= j would\n \t change the round bit, not sticky or guard bit.\n-\t v.value * 0x1p-228Q never normalizes by shifting up,\n+\t v.value * 0x1p-228L never normalizes by shifting up,\n \t so round bit plus sticky bit should be already enough\n \t for proper rounding.  */\n       if (v.ieee.exponent == 228)\n@@ -301,18 +275,18 @@ fmaq (__float128 x, __float128 y, __float128 z)\n \t      if (w.ieee.exponent == 229)\n \t\treturn w.value * 0x1p-228Q;\n \t    }\n-\t  /* v.ieee.mant_low & 2 is LSB bit of the result before rounding,\n-\t     v.ieee.mant_low & 1 is the round bit and j is our sticky\n-\t     bit. */\n-\t  w.value = 0.0Q;\n-\t  w.ieee.mant_low = ((v.ieee.mant_low & 3) << 1) | j;\n+\t  /* v.ieee.mantissa3 & 2 is LSB bit of the result before rounding,\n+\t     v.ieee.mantissa3 & 1 is the round bit and j is our sticky\n+\t     bit.  */\n+\t  w.value = 0;\n+\t  w.ieee.mantissa3 = ((v.ieee.mantissa3 & 3) << 1) | j;\n \t  w.ieee.negative = v.ieee.negative;\n-\t  v.ieee.mant_low &= ~3U;\n+\t  v.ieee.mantissa3 &= ~3U;\n \t  v.value *= 0x1p-228Q;\n \t  w.value *= 0x1p-2Q;\n \t  return v.value + w.value;\n \t}\n-      v.ieee.mant_low |= j;\n+      v.ieee.mantissa3 |= j;\n       return v.value * 0x1p-228Q;\n     }\n }"}, {"sha": "52786d906c5f15acaf32759dfc2c88c96b523390", "filename": "libquadmath/math/nanq.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/667b3ec15d86a3d9c22a7469c4353cd9432b4c76/libquadmath%2Fmath%2Fnanq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/667b3ec15d86a3d9c22a7469c4353cd9432b4c76/libquadmath%2Fmath%2Fnanq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fnanq.c?ref=667b3ec15d86a3d9c22a7469c4353cd9432b4c76", "patch": "@@ -4,8 +4,8 @@ __float128\n nanq (const char *tagp __attribute__ ((unused)))\n {\n   // FIXME -- we should use the argument\n-  ieee854_float128 f;\n-  f.ieee.exponent = 0x7fff;\n-  f.ieee.mant_high = 0x1;\n+  ieee854_float128 f = { 0 };\n+  f.ieee_nan.exponent = 0x7fff;\n+  f.ieee_nan.quiet_nan = 0x1;\n   return f.value;\n }"}, {"sha": "a9a4c4fbf35eb976eb82906d4d3e35ae4c12a5e3", "filename": "libquadmath/printf/flt1282mpn.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/667b3ec15d86a3d9c22a7469c4353cd9432b4c76/libquadmath%2Fprintf%2Fflt1282mpn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/667b3ec15d86a3d9c22a7469c4353cd9432b4c76/libquadmath%2Fprintf%2Fflt1282mpn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fprintf%2Fflt1282mpn.c?ref=667b3ec15d86a3d9c22a7469c4353cd9432b4c76", "patch": "@@ -39,14 +39,14 @@ mpn_extract_flt128 (mp_ptr res_ptr, mp_size_t size,\n   *expt = (int) u.ieee.exponent - IEEE854_FLOAT128_BIAS;\n \n #if BITS_PER_MP_LIMB == 32\n-  res_ptr[0] = u.ieee.mant_low; /* Low-order 32 bits of fraction.  */\n-  res_ptr[1] = (u.ieee.mant_low >> 32);\n-  res_ptr[2] = u.ieee.mant_high;\n-  res_ptr[3] = (u.ieee.mant_high >> 32); /* High-order 32 bits.  */\n+  res_ptr[0] = u.ieee.mantissa3; /* Low-order 32 bits of fraction.  */\n+  res_ptr[1] = u.ieee.mantissa2;\n+  res_ptr[2] = u.ieee.mantissa1;\n+  res_ptr[3] = u.ieee.mantissa0; /* High-order 32 bits.  */\n   #define N 4\n #elif BITS_PER_MP_LIMB == 64\n-  res_ptr[0] = u.ieee.mant_low;\n-  res_ptr[1] = u.ieee.mant_high;\n+  res_ptr[0] = ((mp_limb_t) u.ieee.mantissa2 << 32) | u.ieee.mantissa3;\n+  res_ptr[1] = ((mp_limb_t) u.ieee.mantissa0 << 32) | u.ieee.mantissa1;\n   #define N 2\n #else\n   #error \"mp_limb size \" BITS_PER_MP_LIMB \"not accounted for\""}, {"sha": "a40a6b009456c43a34daef15bad5caeaa62aa0e7", "filename": "libquadmath/printf/printf_fphex.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/667b3ec15d86a3d9c22a7469c4353cd9432b4c76/libquadmath%2Fprintf%2Fprintf_fphex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/667b3ec15d86a3d9c22a7469c4353cd9432b4c76/libquadmath%2Fprintf%2Fprintf_fphex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fprintf%2Fprintf_fphex.c?ref=667b3ec15d86a3d9c22a7469c4353cd9432b4c76", "patch": "@@ -235,8 +235,10 @@ __quadmath_printf_fphex (struct __quadmath_printf_file *fp,\n \n       assert (sizeof (long double) == 16);\n \n-      num0 = fpnum.ieee.mant_high;\n-      num1 = fpnum.ieee.mant_low;\n+      num0 = (((unsigned long long int) fpnum.ieee.mantissa0) << 32\n+\t      | fpnum.ieee.mantissa1);\n+      num1 = (((unsigned long long int) fpnum.ieee.mantissa2) << 32\n+\t      | fpnum.ieee.mantissa3);\n \n       zero_mantissa = (num0|num1) == 0;\n "}, {"sha": "86b57878efc65d4a07ed5459e023c3314cb9a563", "filename": "libquadmath/quadmath-imp.h", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/667b3ec15d86a3d9c22a7469c4353cd9432b4c76/libquadmath%2Fquadmath-imp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/667b3ec15d86a3d9c22a7469c4353cd9432b4c76/libquadmath%2Fquadmath-imp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath-imp.h?ref=667b3ec15d86a3d9c22a7469c4353cd9432b4c76", "patch": "@@ -96,11 +96,15 @@ typedef union\n #if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n     unsigned negative:1;\n     unsigned exponent:15;\n-    uint64_t mant_high:48;\n-    uint64_t mant_low:64;\n+    unsigned mantissa0:16;\n+    unsigned mantissa1:32;\n+    unsigned mantissa2:32;\n+    unsigned mantissa3:32;\n #else\n-    uint64_t mant_low:64;\n-    uint64_t mant_high:48;\n+    unsigned mantissa3:32;\n+    unsigned mantissa2:32;\n+    unsigned mantissa1:32;\n+    unsigned mantissa0:16;\n     unsigned exponent:15;\n     unsigned negative:1;\n #endif\n@@ -142,16 +146,20 @@ typedef union\n     unsigned negative:1;\n     unsigned exponent:15;\n     unsigned quiet_nan:1;\n-    uint64_t mant_high:47;\n-    uint64_t mant_low:64;\n+    unsigned mantissa0:15;\n+    unsigned mantissa1:32;\n+    unsigned mantissa2:32;\n+    unsigned mantissa3:32;\n #else\n-    uint64_t mant_low:64;\n-    uint64_t mant_high:47;\n+    unsigned mantissa3:32;\n+    unsigned mantissa2:32;\n+    unsigned mantissa1:32;\n+    unsigned mantissa0:15;\n     unsigned quiet_nan:1;\n     unsigned exponent:15;\n     unsigned negative:1;\n #endif\n-  } nan;\n+  } ieee_nan;\n \n } ieee854_float128;\n "}, {"sha": "33cdb6232cd8c21ccad18270b59d12147c649f0f", "filename": "libquadmath/strtod/mpn2flt128.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/667b3ec15d86a3d9c22a7469c4353cd9432b4c76/libquadmath%2Fstrtod%2Fmpn2flt128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/667b3ec15d86a3d9c22a7469c4353cd9432b4c76/libquadmath%2Fstrtod%2Fmpn2flt128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fstrtod%2Fmpn2flt128.c?ref=667b3ec15d86a3d9c22a7469c4353cd9432b4c76", "patch": "@@ -34,15 +34,17 @@ mpn_construct_float128 (mp_srcptr frac_ptr, int expt, int sign)\n   u.ieee.negative = sign;\n   u.ieee.exponent = expt + IEEE854_FLOAT128_BIAS;\n #if BITS_PER_MP_LIMB == 32\n-  u.ieee.mant_low = (((uint64_t) frac_ptr[1]) << 32)\n-\t\t    | (frac_ptr[0] & 0xffffffff);\n-  u.ieee.mant_high = (((uint64_t) frac_ptr[3]\n-\t\t       & (((mp_limb_t) 1 << (FLT128_MANT_DIG - 96)) - 1))\n-\t\t      << 32) | (frac_ptr[2] & 0xffffffff);\n+  u.ieee.mantissa3 = frac_ptr[0];\n+  u.ieee.mantissa2 = frac_ptr[1];\n+  u.ieee.mantissa1 = frac_ptr[2];\n+  u.ieee.mantissa0 = frac_ptr[3] & (((mp_limb_t) 1\n+\t\t\t\t     << (FLT128_MANT_DIG - 96)) - 1);\n #elif BITS_PER_MP_LIMB == 64\n-  u.ieee.mant_low = frac_ptr[0];\n-  u.ieee.mant_high = frac_ptr[1]\n-\t\t     & (((mp_limb_t) 1 << (FLT128_MANT_DIG - 64)) - 1);\n+  u.ieee.mantissa3 = frac_ptr[0] & (((mp_limb_t) 1 << 32) - 1);\n+  u.ieee.mantissa2 = frac_ptr[0] >> 32;\n+  u.ieee.mantissa1 = frac_ptr[1] & (((mp_limb_t) 1 << 32) - 1);\n+  u.ieee.mantissa0 = (frac_ptr[1] >> 32) & (((mp_limb_t) 1\n+\t\t\t\t\t     << (FLT128_MANT_DIG - 96)) - 1);\n #else\n   #error \"mp_limb size \" BITS_PER_MP_LIMB \"not accounted for\"\n #endif"}, {"sha": "cf2da4f1a5c0c8869fe99a937594050af379641c", "filename": "libquadmath/strtod/strtoflt128.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/667b3ec15d86a3d9c22a7469c4353cd9432b4c76/libquadmath%2Fstrtod%2Fstrtoflt128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/667b3ec15d86a3d9c22a7469c4353cd9432b4c76/libquadmath%2Fstrtod%2Fstrtoflt128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fstrtod%2Fstrtoflt128.c?ref=667b3ec15d86a3d9c22a7469c4353cd9432b4c76", "patch": "@@ -30,12 +30,15 @@\n #endif\n #define MPN2FLOAT\tmpn_construct_float128\n #define FLOAT_HUGE_VAL\tHUGE_VALQ\n-#define SET_MANTISSA(flt, mant) \\\n-  do { ieee854_float128 u;\t\t\t\t\t\t      \\\n-       u.value = (flt);\t\t\t\t\t\t\t      \\\n-       u.ieee.mant_high = 0x800000000000ULL;\t\t\t\t      \\\n-       u.ieee.mant_low = mant;\t\t\t\t\t\t      \\\n-       (flt) = u.value;\t\t\t\t\t\t\t      \\\n+#define SET_MANTISSA(flt, mant)\t\t\t\\\n+  do { ieee854_float128 u;\t\t\t\\\n+       u.value = (flt);\t\t\t\t\\\n+       u.ieee_nan.mantissa0 = 0;\t\t\\\n+       u.ieee_nan.mantissa1 = 0;\t\t\\\n+       u.ieee_nan.mantissa2 = (mant) >> 32;\t\\\n+       u.ieee_nan.mantissa3 = (mant);\t\t\\\n+       u.ieee_nan.quiet_nan = 1;\t\t\\\n+       (flt) = u.value;\t\t\t\t\\\n   } while (0)\n \n static inline __attribute__((__always_inline__))"}, {"sha": "d40b2724dd332e0d555e31668ee2c130df81b328", "filename": "libquadmath/update-quadmath.py", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/667b3ec15d86a3d9c22a7469c4353cd9432b4c76/libquadmath%2Fupdate-quadmath.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/667b3ec15d86a3d9c22a7469c4353cd9432b4c76/libquadmath%2Fupdate-quadmath.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fupdate-quadmath.py?ref=667b3ec15d86a3d9c22a7469c4353cd9432b4c76", "patch": "@@ -143,8 +143,7 @@ def update_sources(glibc_srcdir, quadmath_srcdir):\n     # Replace all #includes with a single include of quadmath-imp.h.\n     repl_map['(\\n+#include[^\\n]*)+\\n+'] = '\\n\\n#include \"quadmath-imp.h\"\\n\\n'\n     # Omitted from this list because code comes from more than one\n-    # glibc source file: rem_pio2.  Omitted because of a union not\n-    # currently provided in libquadmath: fma.\n+    # glibc source file: rem_pio2.\n     ldbl_files = {\n         'e_acoshl.c': 'acoshq.c', 'e_acosl.c': 'acosq.c',\n         's_asinhl.c': 'asinhq.c', 'e_asinl.c': 'asinq.c',\n@@ -155,7 +154,7 @@ def update_sources(glibc_srcdir, quadmath_srcdir):\n         's_erfl.c': 'erfq.c', 's_expm1l.c': 'expm1q.c', 'e_expl.c': 'expq.c',\n         't_expl.h': 'expq_table.h', 's_fabsl.c': 'fabsq.c',\n         's_finitel.c': 'finiteq.c', 's_floorl.c': 'floorq.c',\n-        'e_fmodl.c': 'fmodq.c', 's_frexpl.c': 'frexpq.c',\n+        's_fmal.c': 'fmaq.c', 'e_fmodl.c': 'fmodq.c', 's_frexpl.c': 'frexpq.c',\n         'e_lgammal_r.c': 'lgammaq.c', 'lgamma_negl.c': 'lgammaq_neg.c',\n         'lgamma_productl.c': 'lgammaq_product.c', 'e_hypotl.c': 'hypotq.c',\n         'e_ilogbl.c': 'ilogbq.c', 's_isinfl.c': 'isinfq.c',"}]}