{"sha": "4aab792de6d092becf03e1d23f74a1ec2047fc27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFhYjc5MmRlNmQwOTJiZWNmMDNlMWQyM2Y3NGExZWMyMDQ3ZmMyNw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-05-27T22:06:46Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-05-27T22:06:46Z"}, "message": "basic-block.h (basic_block_def): Add phi_nodes and predictions.\n\n\t* basic-block.h (basic_block_def): Add phi_nodes and\n\tpredictions.  Remove tree_annotations.\n\t* predict.c (tree_predicted_by_p, tree_predict_edge,\n\tcombine_predictions_for_bb): Adjust references to predictions.\n\t* tree-cfg.c (init_empty_tree_cfg, create_bb): Don't call\n\tcreate_block_annotation.\n\t(create_block_annotation, free_blocks_annotatios,\n\tclear_blocks_annotations): Remove.\n\t(dump_cfg_stats): Don't print out the memory spent on\n\tbb_ann_d.\n\t(delete_tree_cfg_annotations): Don't call free_blocks_annotations.\n\t* tree-flow-inline.h (bb_ann): Remove.\n\t(phi_nodes, set_phi_nodes): Update references to phi_nodes.\n\t* tree-flow.h (bb_ann_d): Remove.\n\t* tree-if-conv.c (process_phi_nodes): Update a reference to\n\tphi_nodes.\n\t* tree-phinodes.c (reserve_phi_args_for_new_edge,\n\tcreate_phi_node, remove_phi_node): Likewise.\n\t* tree-pretty-print.c (dump_generic_bb_buff): Don't call bb_ann.\n\t* tree-ssa-dom.c (threaded_blocks): New.\n\t(tree_ssa_dominator_optimize): Initialize, clear, and free\n\tthreaded_blocks. Update a call to thread_through_all_blocks.\n\t(thread_across_edge): Use threaded_blocks instead of setting\n\tincoming_edge_threaded.\n\t* tree-ssa-threadupdate.c (threaded_through_all_blocks): Take\n\ta bitmap of blocks that are threaded through.\n\t* tree.h: Move the prototype of threaded_through_blocks to\n\ttree-flow.h.\n\nFrom-SVN: r100279", "tree": {"sha": "e30578252db88291c4c33444ffad40db62dca180", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e30578252db88291c4c33444ffad40db62dca180"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4aab792de6d092becf03e1d23f74a1ec2047fc27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aab792de6d092becf03e1d23f74a1ec2047fc27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aab792de6d092becf03e1d23f74a1ec2047fc27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aab792de6d092becf03e1d23f74a1ec2047fc27/comments", "author": null, "committer": null, "parents": [{"sha": "8dabce9822f03c6d612f1a14bf67fe83498e0ab4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dabce9822f03c6d612f1a14bf67fe83498e0ab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dabce9822f03c6d612f1a14bf67fe83498e0ab4"}], "stats": {"total": 178, "additions": 74, "deletions": 104}, "files": [{"sha": "f9753e92c7a260acb88220504d88970dfbf5edd1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4aab792de6d092becf03e1d23f74a1ec2047fc27", "patch": "@@ -1,3 +1,34 @@\n+2005-05-27  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* basic-block.h (basic_block_def): Add phi_nodes and\n+\tpredictions.  Remove tree_annotations.\n+\t* predict.c (tree_predicted_by_p, tree_predict_edge,\n+\tcombine_predictions_for_bb): Adjust references to predictions.\n+\t* tree-cfg.c (init_empty_tree_cfg, create_bb): Don't call\n+\tcreate_block_annotation.\n+\t(create_block_annotation, free_blocks_annotatios,\n+\tclear_blocks_annotations): Remove.\n+\t(dump_cfg_stats): Don't print out the memory spent on\n+\tbb_ann_d.\n+\t(delete_tree_cfg_annotations): Don't call free_blocks_annotations.\n+\t* tree-flow-inline.h (bb_ann): Remove.\n+\t(phi_nodes, set_phi_nodes): Update references to phi_nodes.\n+\t* tree-flow.h (bb_ann_d): Remove.\n+\t* tree-if-conv.c (process_phi_nodes): Update a reference to\n+\tphi_nodes.\n+\t* tree-phinodes.c (reserve_phi_args_for_new_edge,\n+\tcreate_phi_node, remove_phi_node): Likewise.\n+\t* tree-pretty-print.c (dump_generic_bb_buff): Don't call bb_ann.\n+\t* tree-ssa-dom.c (threaded_blocks): New.\n+\t(tree_ssa_dominator_optimize): Initialize, clear, and free\n+\tthreaded_blocks. Update a call to thread_through_all_blocks.\n+\t(thread_across_edge): Use threaded_blocks instead of setting\n+\tincoming_edge_threaded.\n+\t* tree-ssa-threadupdate.c (threaded_through_all_blocks): Take\n+\ta bitmap of blocks that are threaded through.\n+\t* tree.h: Move the prototype of threaded_through_blocks to\n+\ttree-flow.h.\n+\n 2005-05-27  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c: Include tree-gimple.h"}, {"sha": "cedeac5ff50c37f43b9d0daecaf3c0b753ea71da", "filename": "gcc/basic-block.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=4aab792de6d092becf03e1d23f74a1ec2047fc27", "patch": "@@ -185,6 +185,9 @@ struct loops;\n /* Declared in tree-flow.h.  */\n struct bb_ann_d;\n \n+/* Declared in tree-flow.h.  */\n+struct edge_prediction;\n+\n /* A basic block is a sequence of instructions with only entry and\n    only one exit.  If any one of the instructions are executed, they\n    will all be executed, and in sequence from first to last.\n@@ -246,8 +249,11 @@ struct basic_block_def GTY((chain_next (\"%h.next_bb\"), chain_prev (\"%h.prev_bb\")\n   /* The data used by basic block copying and reordering functions.  */\n   struct reorder_block_def * rbi;\n \n-  /* Annotations used at the tree level.  */\n-  struct bb_ann_d *tree_annotations;\n+  /* Chain of PHI nodes for this block.  */\n+  tree phi_nodes;\n+\n+  /* A list of predictions.  */\n+  struct edge_prediction *predictions;\n \n   /* Expected number of executions: calculated in profile.c.  */\n   gcov_type count;"}, {"sha": "25f97f707a669e55f7e3bc555dd3850cfc4a2ff2", "filename": "gcc/predict.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=4aab792de6d092becf03e1d23f74a1ec2047fc27", "patch": "@@ -171,8 +171,8 @@ rtl_predicted_by_p (basic_block bb, enum br_predictor predictor)\n bool\n tree_predicted_by_p (basic_block bb, enum br_predictor predictor)\n {\n-  struct edge_prediction *i = bb_ann (bb)->predictions;\n-  for (i = bb_ann (bb)->predictions; i; i = i->next)\n+  struct edge_prediction *i;\n+  for (i = bb->predictions; i; i = i->next)\n     if (i->predictor == predictor)\n       return true;\n   return false;\n@@ -233,8 +233,8 @@ tree_predict_edge (edge e, enum br_predictor predictor, int probability)\n {\n   struct edge_prediction *i = ggc_alloc (sizeof (struct edge_prediction));\n \n-  i->next = bb_ann (e->src)->predictions;\n-  bb_ann (e->src)->predictions = i;\n+  i->next = e->src->predictions;\n+  e->src->predictions = i;\n   i->probability = probability;\n   i->predictor = predictor;\n   i->edge = e;\n@@ -488,7 +488,7 @@ combine_predictions_for_bb (FILE *file, basic_block bb)\n     {\n       if (!bb->count)\n \tset_even_probabilities (bb);\n-      bb_ann (bb)->predictions = NULL;\n+      bb->predictions = NULL;\n       if (file)\n \tfprintf (file, \"%i edges in bb %i predicted to even probabilities\\n\",\n \t\t nedges, bb->index);\n@@ -500,7 +500,7 @@ combine_predictions_for_bb (FILE *file, basic_block bb)\n \n   /* We implement \"first match\" heuristics and use probability guessed\n      by predictor with smallest index.  */\n-  for (pred = bb_ann (bb)->predictions; pred; pred = pred->next)\n+  for (pred = bb->predictions; pred; pred = pred->next)\n     {\n       int predictor = pred->predictor;\n       int probability = pred->probability;\n@@ -546,7 +546,7 @@ combine_predictions_for_bb (FILE *file, basic_block bb)\n     combined_probability = best_probability;\n   dump_prediction (file, PRED_COMBINED, combined_probability, bb, true);\n \n-  for (pred = bb_ann (bb)->predictions; pred; pred = pred->next)\n+  for (pred = bb->predictions; pred; pred = pred->next)\n     {\n       int predictor = pred->predictor;\n       int probability = pred->probability;\n@@ -556,7 +556,7 @@ combine_predictions_for_bb (FILE *file, basic_block bb)\n       dump_prediction (file, predictor, probability, bb,\n \t\t       !first_match || best_predictor == predictor);\n     }\n-  bb_ann (bb)->predictions = NULL;\n+  bb->predictions = NULL;\n \n   if (!bb->count)\n     {"}, {"sha": "f0428b3693862b61ef3de3363579afc12a0cf536", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=4aab792de6d092becf03e1d23f74a1ec2047fc27", "patch": "@@ -95,9 +95,6 @@ static bool found_computed_goto;\n \n /* Basic blocks and flowgraphs.  */\n static basic_block create_bb (void *, void *, basic_block);\n-static void create_block_annotation (basic_block);\n-static void free_blocks_annotations (void);\n-static void clear_blocks_annotations (void);\n static void make_blocks (tree);\n static void factor_computed_gotos (void);\n \n@@ -149,9 +146,6 @@ init_empty_tree_cfg (void)\n \n   ENTRY_BLOCK_PTR->next_bb = EXIT_BLOCK_PTR;\n   EXIT_BLOCK_PTR->prev_bb = ENTRY_BLOCK_PTR;\n-\n-  create_block_annotation (ENTRY_BLOCK_PTR);\n-  create_block_annotation (EXIT_BLOCK_PTR);\n }\n \n /*---------------------------------------------------------------------------\n@@ -322,37 +316,6 @@ factor_computed_gotos (void)\n }\n \n \n-/* Create annotations for a single basic block.  */\n-\n-static void\n-create_block_annotation (basic_block bb)\n-{\n-  /* Verify that the tree_annotations field is clear.  */\n-  gcc_assert (!bb->tree_annotations);\n-  bb->tree_annotations = ggc_alloc_cleared (sizeof (struct bb_ann_d));\n-}\n-\n-\n-/* Free the annotations for all the basic blocks.  */\n-\n-static void free_blocks_annotations (void)\n-{\n-  clear_blocks_annotations ();  \n-}\n-\n-\n-/* Clear the annotations for all the basic blocks.  */\n-\n-static void\n-clear_blocks_annotations (void)\n-{\n-  basic_block bb;\n-\n-  FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR, NULL, next_bb)\n-    bb->tree_annotations = NULL;\n-}\n-\n-\n /* Build a flowgraph for the statement_list STMT_LIST.  */\n \n static void\n@@ -431,8 +394,6 @@ create_bb (void *h, void *e, basic_block after)\n   /* Add the newly created block to the array.  */\n   BASIC_BLOCK (last_basic_block) = bb;\n \n-  create_block_annotation (bb);\n-\n   n_basic_blocks++;\n   last_basic_block++;\n \n@@ -2561,11 +2522,6 @@ dump_cfg_stats (FILE *file)\n   total += size;\n   fprintf (file, fmt_str_1, \"Edges\", num_edges, SCALE (size), LABEL (size));\n \n-  size = n_basic_blocks * sizeof (struct bb_ann_d);\n-  total += size;\n-  fprintf (file, fmt_str_1, \"Basic block annotations\", n_basic_blocks,\n-\t   SCALE (size), LABEL (size));\n-\n   fprintf (file, \"---------------------------------------------------------\\n\");\n   fprintf (file, fmt_str_3, \"Total memory used by CFG data\", SCALE (total),\n \t   LABEL (total));\n@@ -2876,8 +2832,6 @@ void\n delete_tree_cfg_annotations (void)\n {\n   basic_block bb;\n-  if (n_basic_blocks > 0)\n-    free_blocks_annotations ();\n \n   label_to_block_map = NULL;\n   FOR_EACH_BB (bb)"}, {"sha": "d7b0aa45b50480c1a21e8d47603ccc6da5b70fec", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=4aab792de6d092becf03e1d23f74a1ec2047fc27", "patch": "@@ -494,19 +494,12 @@ addresses_taken (tree stmt)\n   return ann ? ann->addresses_taken : NULL;\n }\n \n-/* Return the basic_block annotation for BB.  */\n-static inline bb_ann_t\n-bb_ann (basic_block bb)\n-{\n-  return (bb_ann_t)bb->tree_annotations;\n-}\n-\n /* Return the PHI nodes for basic block BB, or NULL if there are no\n    PHI nodes.  */\n static inline tree\n phi_nodes (basic_block bb)\n {\n-  return bb_ann (bb)->phi_nodes;\n+  return bb->phi_nodes;\n }\n \n /* Set list of phi nodes of a basic block BB to L.  */\n@@ -516,7 +509,7 @@ set_phi_nodes (basic_block bb, tree l)\n {\n   tree phi;\n \n-  bb_ann (bb)->phi_nodes = l;\n+  bb->phi_nodes = l;\n   for (phi = l; phi; phi = PHI_CHAIN (phi))\n     set_bb_for_stmt (phi, bb);\n }"}, {"sha": "ceb2b336b9be71dee39faf7bef227d433fbbc0df", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=4aab792de6d092becf03e1d23f74a1ec2047fc27", "patch": "@@ -377,25 +377,7 @@ struct edge_prediction GTY((chain_next (\"%h.next\")))\n   int probability;\n };\n \n-/*---------------------------------------------------------------------------\n-\t\t  Block annotations stored in basic_block.tree_annotations\n----------------------------------------------------------------------------*/\n-struct bb_ann_d GTY(())\n-{\n-  /* Chain of PHI nodes for this block.  */\n-  tree phi_nodes;\n-\n-  /* Nonzero if one or more incoming edges to this block should be threaded\n-     to an outgoing edge of this block.  */\n-  unsigned incoming_edge_threaded : 1;\n-\n-  struct edge_prediction *predictions;\n-};\n-\n-typedef struct bb_ann_d *bb_ann_t;\n-\n /* Accessors for basic block annotations.  */\n-static inline bb_ann_t bb_ann (basic_block);\n static inline tree phi_nodes (basic_block);\n static inline void set_phi_nodes (basic_block, tree);\n \n@@ -782,6 +764,9 @@ extern void linear_transform_loops (struct loops *);\n /* In tree-ssa-loop-ivopts.c  */\n extern bool expr_invariant_in_loop_p (struct loop *, tree);\n \n+/* In tree-ssa-threadupdate.c.  */\n+extern bool thread_through_all_blocks (bitmap);\n+\n /* In gimplify.c  */\n tree force_gimple_operand (tree, tree *, bool, tree);\n tree force_gimple_operand_bsi (block_stmt_iterator *, tree, bool, tree);"}, {"sha": "82a710af9d5363b238844361b8b4f3921c3425b6", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=4aab792de6d092becf03e1d23f74a1ec2047fc27", "patch": "@@ -840,7 +840,7 @@ process_phi_nodes (struct loop *loop)\n \t  release_phi_node (phi);\n \t  phi = next;\n \t}\n-      bb_ann (bb)->phi_nodes = NULL;\n+      bb->phi_nodes = NULL;\n     }\n   return;\n }"}, {"sha": "7faedc907bedc260b5aebd84518b90038b498d72", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=4aab792de6d092becf03e1d23f74a1ec2047fc27", "patch": "@@ -314,7 +314,7 @@ reserve_phi_args_for_new_edge (basic_block bb)\n   int len = EDGE_COUNT (bb->preds);\n   int cap = ideal_phi_node_len (len + 4);\n \n-  for (loc = &(bb_ann (bb)->phi_nodes);\n+  for (loc = &(bb->phi_nodes);\n        *loc;\n        loc = &PHI_CHAIN (*loc))\n     {\n@@ -354,7 +354,7 @@ create_phi_node (tree var, basic_block bb)\n \n   /* Add the new PHI node to the list of PHI nodes for block BB.  */\n   PHI_CHAIN (phi) = phi_nodes (bb);\n-  bb_ann (bb)->phi_nodes = phi;\n+  bb->phi_nodes = phi;\n \n   /* Associate BB to the PHI node.  */\n   set_bb_for_stmt (phi, bb);\n@@ -450,7 +450,7 @@ remove_phi_node (tree phi, tree prev)\n     }\n   else\n     {\n-      for (loc = &(bb_ann (bb_for_stmt (phi))->phi_nodes);\n+      for (loc = &(bb_for_stmt (phi)->phi_nodes);\n \t   *loc != phi;\n \t   loc = &PHI_CHAIN (*loc))\n \t;"}, {"sha": "6ac56dd76e764f113b93c21bdfb698b82419008b", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=4aab792de6d092becf03e1d23f74a1ec2047fc27", "patch": "@@ -2341,8 +2341,7 @@ dump_generic_bb_buff (pretty_printer *buffer, basic_block bb,\n \n   dump_bb_header (buffer, bb, indent, flags);\n \n-  if (bb_ann (bb))\n-    dump_phi_nodes (buffer, bb, indent, flags);\n+  dump_phi_nodes (buffer, bb, indent, flags);\n \n   for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n     {"}, {"sha": "910ddce5a70f9297678b46a500ca4310049a9b10", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=4aab792de6d092becf03e1d23f74a1ec2047fc27", "patch": "@@ -141,6 +141,10 @@ static VEC(tree,heap) *const_and_copies_stack;\n    know their exact value.  */\n static bitmap nonzero_vars;\n \n+/* Bitmap of blocks that are scheduled to be threaded through.  This\n+   is used to communicate with thread_through_blocks.  */\n+static bitmap threaded_blocks;\n+\n /* Stack of SSA_NAMEs which need their NONZERO_VARS property cleared\n    when the current block is finalized. \n \n@@ -370,6 +374,7 @@ tree_ssa_dominator_optimize (void)\n   vrp_variables_stack = VEC_alloc (tree, heap, 20);\n   stmts_to_rescan = VEC_alloc (tree, heap, 20);\n   nonzero_vars = BITMAP_ALLOC (NULL);\n+  threaded_blocks = BITMAP_ALLOC (NULL);\n   need_eh_cleanup = BITMAP_ALLOC (NULL);\n \n   /* Setup callbacks for the generic dominator tree walker.  */\n@@ -445,7 +450,7 @@ tree_ssa_dominator_optimize (void)\n       free_all_edge_infos ();\n \n       /* Thread jumps, creating duplicate blocks as needed.  */\n-      cfg_altered |= thread_through_all_blocks ();\n+      cfg_altered |= thread_through_all_blocks (threaded_blocks);\n \n       /* Removal of statements may make some EH edges dead.  Purge\n \t such edges from the CFG as needed.  */\n@@ -480,6 +485,7 @@ tree_ssa_dominator_optimize (void)\n \n       /* Reinitialize the various tables.  */\n       bitmap_clear (nonzero_vars);\n+      bitmap_clear (threaded_blocks);\n       htab_empty (avail_exprs);\n       htab_empty (vrp_data);\n \n@@ -523,6 +529,7 @@ tree_ssa_dominator_optimize (void)\n \n   /* Free nonzero_vars.  */\n   BITMAP_FREE (nonzero_vars);\n+  BITMAP_FREE (threaded_blocks);\n   BITMAP_FREE (need_eh_cleanup);\n   \n   VEC_free (tree, heap, avail_exprs_stack);\n@@ -830,7 +837,7 @@ thread_across_edge (struct dom_walk_data *walk_data, edge e)\n \t      else\n \t\tedge_info = allocate_edge_info (e);\n \t      edge_info->redirection_target = taken_edge;\n-\t      bb_ann (e->dest)->incoming_edge_threaded = true;\n+\t      bitmap_set_bit (threaded_blocks, e->dest->index);\n \t    }\n \t}\n     }"}, {"sha": "f6bf1db7324ca37740140e9953a64ebaa5261b19", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=4aab792de6d092becf03e1d23f74a1ec2047fc27", "patch": "@@ -802,22 +802,20 @@ thread_block (basic_block bb)\n    Returns true if one or more edges were threaded, false otherwise.  */\n \n bool\n-thread_through_all_blocks (void)\n+thread_through_all_blocks (bitmap threaded_blocks)\n {\n-  basic_block bb;\n   bool retval = false;\n+  unsigned int i;\n+  bitmap_iterator bi;\n \n   rediscover_loops_after_threading = false;\n \n-  FOR_EACH_BB (bb)\n+  EXECUTE_IF_SET_IN_BITMAP (threaded_blocks, 0, i, bi)\n     {\n-      if (bb_ann (bb)->incoming_edge_threaded\n-\t  && EDGE_COUNT (bb->preds) > 0)\n-\t{\n-\t  retval |= thread_block (bb);\n-\t  bb_ann (bb)->incoming_edge_threaded = false;\n-\t  \n-\t}\n+      basic_block bb = BASIC_BLOCK (i);\n+\n+      if (EDGE_COUNT (bb->preds) > 0)\n+\tretval |= thread_block (bb);\n     }\n \n   return retval;"}, {"sha": "e72a20fddca71b9551e5211649bbe7b3938b9591", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab792de6d092becf03e1d23f74a1ec2047fc27/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=4aab792de6d092becf03e1d23f74a1ec2047fc27", "patch": "@@ -3975,9 +3975,6 @@ extern int tree_node_sizes[];\n    restricted to creating gimple expressions.  */\n extern bool in_gimple_form;\n \n-/* In tree-ssa-threadupdate.c.  */\n-extern bool thread_through_all_blocks (void);\n-\n /* In tree-gimple.c.  */\n extern tree get_base_address (tree t);\n "}]}