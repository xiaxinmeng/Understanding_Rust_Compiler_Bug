{"sha": "ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "node_id": "C_kwDOANBUbNoAKGNhNjBiZDkzZTIxNmFlMDQyNWY3OTBlMWQ0ZjRkYzRhNDg3NjNjMGU", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-08-25T07:05:47Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-09-05T08:43:31Z"}, "message": "rename DBX_REGISTER_NUMBER to DEBUGGER_REGNO\n\ngcc/ada/ChangeLog:\n\n\t* sigtramp-vxworks-target.h: Rename DBX_REGISTER_NUMBER to\n\t  DEBUGGER_REGNO.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-protos.h (aarch64_dbx_regno):\n\tRename DBX_REGISTER_NUMBER to DEBUGGER_REGNO.\n\t(aarch64_debugger_regno): Likewise.\n\t* config/aarch64/aarch64.cc (aarch64_dbx_regno): Likewise.\n\t(aarch64_debugger_regno): Likewise.\n\t* config/aarch64/aarch64.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t(DWARF_FRAME_REGNUM): Likewise.\n\t* config/alpha/alpha.h (DWARF_FRAME_REGNUM): Likewise.\n\t* config/arc/arc.cc (arc_init_reg_tables): Likewise.\n\t* config/arc/arc.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/arm/arm-protos.h (arm_dbx_regno): Likewise.\n\t(arm_debugger_regno): Likewise.\n\t* config/arm/arm.cc (arm_dbx_regno): Likewise.\n\t(arm_debugger_regno): Likewise.\n\t* config/arm/arm.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/bfin/bfin.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/c6x/c6x.cc: Likewise.\n\t* config/c6x/c6x.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/cris/cris.h (enum reg_class): Likewise.\n\t(DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/csky/csky.cc (enum reg_class): Likewise.\n\t* config/csky/csky.h (DWARF_FRAME_REGNUM): Likewise.\n\t(DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/frv/frv.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/gcn/gcn-hsa.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/gcn/gcn.cc (print_operand): Likewise.\n\t* config/i386/bsd.h (ASM_QUAD): Likewise.\n\t* config/i386/cygming.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t(DWARF_FRAME_REGNUM): Likewise.\n\t* config/i386/darwin.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/i386/djgpp.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/i386/dragonfly.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/i386/freebsd.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/i386/gas.h: Likewise.\n\t* config/i386/gnu-user.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/i386/i386.cc (enum reg_class): Likewise.\n\t* config/i386/i386.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/i386/i386elf.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/i386/iamcu.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/i386/lynx.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/i386/netbsd-elf.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/i386/nto.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/i386/openbsdelf.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/i386/sysv4.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/i386/vxworks.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/i386/x86-64.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/ia64/ia64-protos.h (ia64_dbx_regno): Likewise.\n\t(ia64_debugger_regno): Likewise.\n\t* config/ia64/ia64.cc (ia64_output_function_prologue): Likewise.\n\t(ia64_dbx_regno): Likewise.\n\t(ia64_debugger_regno): Likewise.\n\t(process_cfa_adjust_cfa): Likewise.\n\t(process_cfa_register): Likewise.\n\t(ia64_asm_unwind_emit): Likewise.\n\t* config/ia64/ia64.h: Likewise.\n\t* config/ia64/sysv4.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/lm32/lm32.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/m32c/m32c.cc (m32c_eh_return_stackadj_rtx): Likewise.\n\t* config/m32c/m32c.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/m68k/linux.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/m68k/m68k.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t(__transfer_from_trampoline): Likewise.\n\t* config/m68k/m68kelf.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/m68k/netbsd-elf.h (M68K_STATIC_CHAIN_REG_NAME): Likewise.\n\t(DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/microblaze/microblaze.cc (microblaze_option_override): Likewise.\n\t* config/microblaze/microblaze.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t(GP_DBX_FIRST): Likewise.\n\t(GP_DEBUGGER_FIRST): Likewise.\n\t* config/mips/vxworks.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/mmix/mmix-protos.h (mmix_dbx_regno): Likewise.\n\t(mmix_debugger_regno): Likewise.\n\t* config/mmix/mmix.cc (mmix_dbx_regno): Likewise.\n\t(mmix_debugger_regno): Likewise.\n\t* config/mmix/mmix.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/nds32/nds32-protos.h (nds32_dbx_regno): Likewise.\n\t(nds32_debugger_regno): Likewise.\n\t* config/nds32/nds32.cc (nds32_dbx_regno): Likewise.\n\t(nds32_debugger_regno): Likewise.\n\t(nds32_use_blocks_for_constant_p): Likewise.\n\t* config/nds32/nds32.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/nvptx/nvptx.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/or1k/or1k.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/pa/pa32-regs.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/pa/pa64-regs.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/rs6000/rs6000-protos.h (rs6000_dbx_regno): Likewise.\n\t(rs6000_debugger_regno): Likewise.\n\t* config/rs6000/rs6000.cc (rs6000_dbx_regno): Likewise.\n\t(rs6000_debugger_regno): Likewise.\n\t* config/rs6000/rs6000.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t(DWARF2_FRAME_REG_OUT): Likewise.\n\t* config/s390/s390.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/sh/elf.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/sh/linux.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/sh/sh.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t(SH_DBX_REGISTER_NUMBER): Likewise.\n\t(SH_DEBUGGER_REGNO): Likewise.\n\t* config/visium/visium.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/xtensa/elf.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/xtensa/linux.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/xtensa/uclinux.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* config/xtensa/xtensa-protos.h (xtensa_dbx_regno): Likewise.\n\t(xtensa_debugger_regno): Likewise.\n\t* config/xtensa/xtensa.cc (xtensa_dbx_regno): Likewise.\n\t(xtensa_debugger_regno): Likewise.\n\t* config/xtensa/xtensa.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t* defaults.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DEBUGGER_REGNO): Likewise.\n\t(DWARF_FRAME_REGNUM): Likewise.\n\t* doc/tm.texi: Likewise.\n\t* doc/tm.texi.in: Likewise.\n\t* dwarf2out.cc (dbx_reg_number): Likewise.\n\t(debugger_reg_number): Likewise.\n\t(reg_loc_descriptor): Likewise.\n\t(multiple_reg_loc_descriptor): Likewise.\n\t(mem_loc_descriptor): Likewise.\n\t* except.cc: Likewise.", "tree": {"sha": "ae8e45b283845bfa645fee292bf123edfc90dbf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae8e45b283845bfa645fee292bf123edfc90dbf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3424f4c34d04541005ca6d255a04d5f2f613f6b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3424f4c34d04541005ca6d255a04d5f2f613f6b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3424f4c34d04541005ca6d255a04d5f2f613f6b0"}], "stats": {"total": 431, "additions": 200, "deletions": 231}, "files": [{"sha": "3c85aa206f2b09a0759812797049074d21438a1c", "filename": "gcc/ada/sigtramp-vxworks-target.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fada%2Fsigtramp-vxworks-target.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fada%2Fsigtramp-vxworks-target.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsigtramp-vxworks-target.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -149,7 +149,7 @@\n \n    In general:\n    There is no unique numbering for the x86 architecture.  It's parameterized\n-   by DWARF_FRAME_REGNUM, which is DBX_REGISTER_NUMBER except for Windows, and\n+   by DWARF_FRAME_REGNUM, which is DEBUGGER_REGNO except for Windows, and\n    the latter depends on the platform.\n */\n "}, {"sha": "99af10ad534b6f9ab281c73cb6cca82ed0f3139a", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -878,7 +878,7 @@ rtx aarch64_simd_vect_par_cnst_half (machine_mode, int, bool);\n rtx aarch64_gen_stepped_int_parallel (unsigned int, int, int);\n bool aarch64_stepped_int_parallel_p (rtx, int);\n rtx aarch64_tls_get_addr (void);\n-unsigned aarch64_dbx_register_number (unsigned);\n+unsigned aarch64_debugger_regno (unsigned);\n unsigned aarch64_trampoline_size (void);\n void aarch64_asm_output_labelref (FILE *, const char *);\n void aarch64_cpu_cpp_builtins (cpp_reader *);"}, {"sha": "b12f13f4f22ab1042a79f2540cd83f495c3f1fbc", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -3357,7 +3357,7 @@ aarch64_reassociation_width (unsigned opc, machine_mode mode)\n \n /* Provide a mapping from gcc register numbers to dwarf register numbers.  */\n unsigned\n-aarch64_dbx_register_number (unsigned regno)\n+aarch64_debugger_regno (unsigned regno)\n {\n    if (GP_REGNUM_P (regno))\n      return AARCH64_DWARF_R0 + regno - R0_REGNUM;"}, {"sha": "2eed6e8f6f05e748372257ff89d338d3777ddbbb", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -627,12 +627,12 @@\n #define DWARF_FRAME_REGISTERS           (DWARF_ALT_FRAME_RETURN_COLUMN + 1)\n \n \n-#define DBX_REGISTER_NUMBER(REGNO)\taarch64_dbx_register_number (REGNO)\n+#define DEBUGGER_REGNO(REGNO)\taarch64_debugger_regno (REGNO)\n /* Provide a definition of DWARF_FRAME_REGNUM here so that fallback unwinders\n    can use DWARF_ALT_FRAME_RETURN_COLUMN defined below.  This is just the same\n    as the default definition in dwarf2out.cc.  */\n #undef DWARF_FRAME_REGNUM\n-#define DWARF_FRAME_REGNUM(REGNO)\tDBX_REGISTER_NUMBER (REGNO)\n+#define DWARF_FRAME_REGNUM(REGNO)\tDEBUGGER_REGNO (REGNO)\n \n #define DWARF_FRAME_RETURN_COLUMN\tDWARF_FRAME_REGNUM (LR_REGNUM)\n "}, {"sha": "1f6d2caa093674b38a663bf59c8fc87a399ad1ce", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -638,7 +638,7 @@ enum reg_class {\n    can use DWARF_ALT_FRAME_RETURN_COLUMN defined below.  This is just the same\n    as the default definition in dwarf2out.cc.  */\n #undef DWARF_FRAME_REGNUM\n-#define DWARF_FRAME_REGNUM(REG) DBX_REGISTER_NUMBER (REG)\n+#define DWARF_FRAME_REGNUM(REG) DEBUGGER_REGNO (REG)\n \n /* Before the prologue, RA lives in $26.  */\n #define INCOMING_RETURN_ADDR_RTX  gen_rtx_REG (Pmode, 26)"}, {"sha": "db4b56b23ff9fe8c4651fdc9b54418ada0f12cc9", "filename": "gcc/config/arc/arc.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Farc%2Farc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Farc%2Farc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.cc?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -1885,7 +1885,7 @@ arc_init_reg_tables (void)\n    Because mlo / mhi form a 64 bit value, we use different gcc internal\n    register numbers to make them form a register pair as the gcc internals\n    know it.  mmid gets number 57, if still available, and mlo / mhi get\n-   number 58 and 59, depending on endianness.  We use DBX_REGISTER_NUMBER\n+   number 58 and 59, depending on endianness.  We use DEBUGGER_REGNO\n    to map this back.  */\n   char rname56[5] = \"r56\";\n   char rname57[5] = \"r57\";"}, {"sha": "0280b53ad924a98271ed22eb1c6d781c0e69444e", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -1340,8 +1340,8 @@ do { \\\n #undef PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n \n-/* How to renumber registers for dbx and gdb.  */\n-#define DBX_REGISTER_NUMBER(REGNO)\t\t\t\t\\\n+/* How to renumber registers for gdb.  */\n+#define DEBUGGER_REGNO(REGNO)\t\t\t\t\\\n   ((TARGET_MULMAC_32BY16_SET && (REGNO) >= 56 && (REGNO) <= 57) \\\n    ? ((REGNO) ^ !TARGET_BIG_ENDIAN)\t\t\t\t\\\n    : (TARGET_MUL64_SET && (REGNO) >= 57 && (REGNO) <= 58)\t\\"}, {"sha": "550272facd12e60a49bf8a3b20f811cc13765b3a", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -45,7 +45,7 @@ extern HOST_WIDE_INT arm_compute_initial_elimination_offset (unsigned int,\n \t\t\t\t\t\t\t     unsigned int);\n extern HOST_WIDE_INT thumb_compute_initial_elimination_offset (unsigned int,\n \t\t\t\t\t\t\t       unsigned int);\n-extern unsigned int arm_dbx_register_number (unsigned int);\n+extern unsigned int arm_debugger_regno (unsigned int);\n extern void arm_output_fn_unwind (FILE *, bool);\n \n extern rtx arm_expand_builtin (tree exp, rtx target, rtx subtarget"}, {"sha": "1a375367ac72a51e9811ba89777a207da8ab6f2d", "filename": "gcc/config/arm/arm.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Farm%2Farm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Farm%2Farm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.cc?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -29568,7 +29568,7 @@ arm_shift_truncation_mask (machine_mode mode)\n /* Map internal gcc register numbers to DWARF2 register numbers.  */\n \n unsigned int\n-arm_dbx_register_number (unsigned int regno)\n+arm_debugger_regno (unsigned int regno)\n {\n   if (regno < 16)\n     return regno;"}, {"sha": "984ab789285dd0bb8d648fda89053b24ada93698", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -1058,7 +1058,7 @@ extern const int arm_arch_cde_coproc_bits[];\n /* VFP (VFP3) adds 32 (64) + 1 VFPCC.  */\n #define FIRST_PSEUDO_REGISTER   107\n \n-#define DBX_REGISTER_NUMBER(REGNO) arm_dbx_register_number (REGNO)\n+#define DEBUGGER_REGNO(REGNO) arm_debugger_regno (REGNO)\n \n /* Value should be nonzero if functions must have frame pointers.\n    Zero means the frame pointer need not be set up (and parms may be accessed"}, {"sha": "4e7753038a872f6ef4567558a4f62d3eed915d3f", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -1094,8 +1094,8 @@ extern rtx bfin_cc_rtx, bfin_rets_rtx;\n /* This works for GAS and some other assemblers.  */\n #define SET_ASM_OP              \".set \"\n \n-/* DBX register number for a given compiler register number */\n-#define DBX_REGISTER_NUMBER(REGNO)  (REGNO) \n+/* Debugger register number for a given compiler register number */\n+#define DEBUGGER_REGNO(REGNO)  (REGNO) \n \n #define SIZE_ASM_OP     \"\\t.size\\t\"\n "}, {"sha": "4baf30238a47d818f819e812bab61e0ffad7a58b", "filename": "gcc/config/c6x/c6x.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fc6x%2Fc6x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fc6x%2Fc6x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.cc?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -195,7 +195,7 @@ typedef int unit_req_table[2][UNIT_REQ_MAX];\n static unit_req_table unit_reqs;\n \f\n /* Register map for debugging.  */\n-unsigned const dbx_register_map[FIRST_PSEUDO_REGISTER] =\n+unsigned const debugger_register_map[FIRST_PSEUDO_REGISTER] =\n {\n   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\t/* A0 - A15.  */\n   37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\t/* A16 - A32.  */"}, {"sha": "88fc73d95c4c1fc21cfdcd15c5828f6f9c8d669c", "filename": "gcc/config/c6x/c6x.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fc6x%2Fc6x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fc6x%2Fc6x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -503,9 +503,9 @@ struct GTY(()) machine_function\n     \"B24\", \"B25\", \"B26\", \"B27\", \"B28\", \"B29\", \"B30\", \"B31\",\t\\\n     \"FP\", \"ARGP\", \"ILC\" }\n \n-#define DBX_REGISTER_NUMBER(N) (dbx_register_map[(N)])\n+#define DEBUGGER_REGNO(N) (debugger_register_map[(N)])\n \n-extern unsigned const dbx_register_map[FIRST_PSEUDO_REGISTER];\n+extern unsigned const debugger_register_map[FIRST_PSEUDO_REGISTER];\n \n #define FINAL_PRESCAN_INSN c6x_final_prescan_insn\n "}, {"sha": "16caa292b404aa472582ac58ebc5f30b3452ed74", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -570,7 +570,7 @@ enum reg_class\n    an inverse mapping from dwarf register to gcc register.  There is one\n    need in dwarf2out.cc:expand_builtin_init_dwarf_reg_sizes.  Right now, I\n    don't see that we need exact correspondence between DWARF *frame*\n-   registers and DBX_REGISTER_NUMBER, so map them onto GCC registers.  */\n+   registers and DEBUGGER_REGNO, so map them onto GCC registers.  */\n #define DWARF_FRAME_REGNUM(REG) (REG)\n \n /* Node: Stack Checking */\n@@ -888,7 +888,7 @@ struct cum_args {int regs;};\n \n /* Node: All Debuggers */\n \n-#define DBX_REGISTER_NUMBER(REGNO)\t\t\t\t\\\n+#define DEBUGGER_REGNO(REGNO)\t\t\t\t\\\n  ((REGNO) == CRIS_SRP_REGNUM ? CRIS_CANONICAL_SRP_REGNUM :\t\\\n   (REGNO) == CRIS_MOF_REGNUM ? CRIS_CANONICAL_MOF_REGNUM :\t\\\n   (REGNO) == CRIS_CC0_REGNUM ? CRIS_CANONICAL_CC0_REGNUM :\t\\"}, {"sha": "a7dc6cefeadb4990f51f8f45b643d35987ec19fe", "filename": "gcc/config/csky/csky.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fcsky%2Fcsky.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fcsky%2Fcsky.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.cc?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -172,7 +172,7 @@ enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER] =\n /* Arrays that map GCC register numbers to debugger register numbers,\n    '-1' means that is INVALID_REGNUM.\n    TODO: which rules according to here ?  */\n-const int csky_dbx_regno[FIRST_PSEUDO_REGISTER] =\n+const int csky_debugger_regno[FIRST_PSEUDO_REGISTER] =\n {\n   0,  1,  2,  3,  4,  5,  6,  7,\n   8,  9,  10, 11, 12, 13, 14, 15,"}, {"sha": "37410f0cda49644491130ac8112c8a72927744e4", "filename": "gcc/config/csky/csky.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fcsky%2Fcsky.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fcsky%2Fcsky.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -997,7 +997,7 @@ while (0)\n    is different from that used in other debug info sections.\n    Given a GCC hard register number,\n    this macro should return the .eh_frame register number.*/\n-#define DWARF_FRAME_REGNUM(REG)\t DBX_REGISTER_NUMBER (REG)\n+#define DWARF_FRAME_REGNUM(REG)\t DEBUGGER_REGNO (REG)\n \n /* If INCOMING_RETURN_ADDR_RTX is defined & the RTL is REG,\n    define DWARF_FRAME_RETURN_COLUMN to DWARF_FRAME_REGNUM.  */\n@@ -1006,9 +1006,9 @@ while (0)\n /* Use r0 and r1 to pass exception handling information.  */\n #define EH_RETURN_DATA_REGNO(N) ((N) < 2 ? N : INVALID_REGNUM)\n \n-/* How to renumber registers for dbx and gdb.  */\n-extern const int csky_dbx_regno[];\n-#define DBX_REGISTER_NUMBER(REGNO) ((unsigned int) csky_dbx_regno[REGNO])\n+/* How to renumber registers for gdb.  */\n+extern const int csky_debugger_regno[];\n+#define DEBUGGER_REGNO(REGNO) ((unsigned int) csky_debugger_regno[REGNO])\n \n \n /******************************************************************"}, {"sha": "ac5e00ce7778652c53fa861ced5f7df40bba3dec", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -1737,24 +1737,24 @@ fprintf (STREAM, \"\\t.word .L%d\\n\", VALUE)\n \f\n /* Macros Affecting all Debug Formats.  */\n \n-/* A C expression that returns the DBX register number for the compiler\n+/* A C expression that returns the debugger register number for the compiler\n    register number REGNO.  In simple cases, the value of this expression may be\n    REGNO itself.  But sometimes there are some registers that the compiler\n-   knows about and DBX does not, or vice versa.  In such cases, some register\n-   may need to have one number in the compiler and another for DBX.\n+   knows about and debugger does not, or vice versa.  In such cases, some register\n+   may need to have one number in the compiler and another for debugger.\n \n    If two registers have consecutive numbers inside GCC, and they can be\n    used as a pair to hold a multiword value, then they *must* have consecutive\n-   numbers after renumbering with `DBX_REGISTER_NUMBER'.  Otherwise, debuggers\n+   numbers after renumbering with `DEBUGGER_REGNO'.  Otherwise, debuggers\n    will be unable to access such a pair, because they expect register pairs to\n    be consecutive in their own numbering scheme.\n \n-   If you find yourself defining `DBX_REGISTER_NUMBER' in way that does not\n+   If you find yourself defining `DEBUGGER_REGNO' in way that does not\n    preserve register pairs, then what you must do instead is redefine the\n    actual register numbering scheme.\n \n    This declaration is required.  */\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n+#define DEBUGGER_REGNO(REGNO) (REGNO)\n \n #undef  PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG"}, {"sha": "85f0f2d6f69c5a90ad02cef54d125cfe74b27030", "filename": "gcc/config/gcn/gcn-hsa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -113,4 +113,4 @@ extern const char *last_arg_spec_function (int argc, const char **argv);\n #define DWARF2_DEBUGGING_INFO      1\n #define DWARF2_ASM_LINE_DEBUG_INFO 1\n #define EH_FRAME_THROUGH_COLLECT2  1\n-#define DBX_REGISTER_NUMBER(REGNO) gcn_dwarf_register_number (REGNO)\n+#define DEBUGGER_REGNO(REGNO) gcn_dwarf_register_number (REGNO)"}, {"sha": "826675565120b2a6111c29defeab2e6f8c8f9bc0", "filename": "gcc/config/gcn/gcn.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.cc?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -6510,7 +6510,7 @@ print_operand (FILE *file, rtx x, int code)\n   gcc_unreachable ();\n }\n \n-/* Implement DBX_REGISTER_NUMBER macro.\n+/* Implement DEBUGGER_REGNO macro.\n  \n    Return the DWARF register number that corresponds to the GCC internal\n    REGNO.  */"}, {"sha": "817fb6edf91304cedff8fe67043d209907244117", "filename": "gcc/config/i386/bsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbsd.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -36,7 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #define ASM_LONG \"\\t.long\\t\"\n #define ASM_QUAD \"\\t.quad\\t\"  /* Should not be used for 32bit compilation.  */\n \n-/* This was suggested, but it shouldn't be right for DBX output. -- RMS\n+/* This was suggested, but it shouldn't be right for debugger output. -- RMS\n    #define ASM_OUTPUT_SOURCE_FILENAME(FILE, NAME) */\n \n \f"}, {"sha": "4007fd96eaca82c789e4b5b78a3cfa6f5a084c70", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -72,19 +72,19 @@ along with GCC; see the file COPYING3.  If not see\n \n #endif\n \n-#undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n)\t\t\t\t\\\n-  (TARGET_64BIT ? dbx64_register_map[n]\t\t\t\\\n+#undef DEBUGGER_REGNO\n+#define DEBUGGER_REGNO(n)\t\t\t\t\\\n+  (TARGET_64BIT ? debugger64_register_map[n]\t\t\t\\\n    : (dwarf_debuginfo_p ()\t\t\t\t\\\n-      ? svr4_dbx_register_map[n] : dbx_register_map[n]))\n+      ? svr4_debugger_register_map[n] : debugger_register_map[n]))\n \n /* Map gcc register number to DWARF 2 CFA column number. For 32 bit\n-   target, always use the svr4_dbx_register_map for DWARF .eh_frame\n+   target, always use the svr4_debugger_register_map for DWARF .eh_frame\n    even if we don't use DWARF .debug_frame. */\n #undef DWARF_FRAME_REGNUM\n #define DWARF_FRAME_REGNUM(n)\t\t\t\t\\\n-  (TARGET_64BIT ? dbx64_register_map[(n)]\t\t\\\n-\t\t: svr4_dbx_register_map[(n)])\n+  (TARGET_64BIT ? debugger64_register_map[(n)]\t\t\\\n+\t\t: svr4_debugger_register_map[(n)])\n \n /* The 64-bit MS_ABI changes the set of call-used registers.  */\n #undef DWARF_FRAME_REGISTERS"}, {"sha": "5bcb7111114cfb01cb2aea2f2e88e22e469fe275", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -237,11 +237,11 @@ along with GCC; see the file COPYING3.  If not see\n /* Darwin uses the standard DWARF register numbers but the default\n    register numbers for STABS.  Fortunately for 64-bit code the\n    default and the standard are the same.  */\n-#undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n) \t\t\t\t\t\\\n-  (TARGET_64BIT ? dbx64_register_map[n]\t\t\t\t\\\n-   : dwarf_debuginfo_p () ? svr4_dbx_register_map[n]\t\t\\\n-   : dbx_register_map[n])\n+#undef DEBUGGER_REGNO\n+#define DEBUGGER_REGNO(n) \t\t\t\t\t\\\n+  (TARGET_64BIT ? debugger64_register_map[n]\t\t\t\t\\\n+   : dwarf_debuginfo_p () ? svr4_debugger_register_map[n]\t\t\\\n+   : debugger_register_map[n])\n \n /* Unfortunately, the 32-bit EH information also doesn't use the standard\n    DWARF register numbers.  */"}, {"sha": "ede50b515af2bba8a6d0eb64c50fdda44bd12eb7", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -128,8 +128,8 @@ along with GCC; see the file COPYING3.  If not see\n #undef PTRDIFF_TYPE\n #define PTRDIFF_TYPE \"int\"\n \n-#undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n) svr4_dbx_register_map[n]\n+#undef DEBUGGER_REGNO\n+#define DEBUGGER_REGNO(n) svr4_debugger_register_map[n]\n \n /* Default to pcc-struct-return.  */\n #define DEFAULT_PCC_STRUCT_RETURN 1"}, {"sha": "bf8742e50829700bbc5bbf6011390c8786f3c256", "filename": "gcc/config/i386/dragonfly.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fdragonfly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fdragonfly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdragonfly.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -34,9 +34,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #undef  ASM_APP_OFF\n #define ASM_APP_OFF \"#NO_APP\\n\"\n \n-#undef  DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n) \\\n-  (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])\n+#undef  DEBUGGER_REGNO\n+#define DEBUGGER_REGNO(n) \\\n+  (TARGET_64BIT ? debugger64_register_map[n] : svr4_debugger_register_map[n])\n \n #undef  NO_PROFILE_COUNTERS\n #define NO_PROFILE_COUNTERS\t1"}, {"sha": "9ae89815c44410aae43ae850b1c2d43360c7ab50", "filename": "gcc/config/i386/freebsd.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -32,9 +32,9 @@ along with GCC; see the file COPYING3.  If not see\n #undef  ASM_APP_OFF\n #define ASM_APP_OFF \"#NO_APP\\n\"\n \n-#undef  DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n) \\\n-  (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])\n+#undef  DEBUGGER_REGNO\n+#define DEBUGGER_REGNO(n) \\\n+  (TARGET_64BIT ? debugger64_register_map[n] : svr4_debugger_register_map[n])\n \n #undef  NO_PROFILE_COUNTERS\n #define NO_PROFILE_COUNTERS\t1"}, {"sha": "317bc868b0aa8bf903c9e392443cb56aa66acfea", "filename": "gcc/config/i386/gas.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fgas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fgas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgas.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -31,7 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n  * Next is the question of whether to uses underscores.  RMS didn't\n  * like this idea at first, but since it is now obvious that we\n  * need this separate tm file for use with gas, at least to get\n- * dbx debugging info, I think we should also switch to underscores.\n+ * debugging info, I think we should also switch to underscores.\n  * We can keep i386v for real att style output, and the few\n  * people who want both form will have to compile twice.\n  */"}, {"sha": "0f8154746da452a88b7ff53991f3ead94ab8415b", "filename": "gcc/config/i386/gnu-user.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fgnu-user.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fgnu-user.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgnu-user.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -26,9 +26,9 @@ along with GCC; see the file COPYING3.  If not see\n #undef ASM_COMMENT_START\n #define ASM_COMMENT_START \"#\"\n \n-#undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n) \\\n-  (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])\n+#undef DEBUGGER_REGNO\n+#define DEBUGGER_REGNO(n) \\\n+  (TARGET_64BIT ? debugger64_register_map[n] : svr4_debugger_register_map[n])\n \n /* Output assembler code to FILE to call the profiler.\n    To the best of my knowledge, no GNU userspace libc has required the label"}, {"sha": "dadf453d6c0a46ee9f1ef59d355a0a9612f90854", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -173,7 +173,7 @@ enum reg_class const regclass_map[FIRST_PSEUDO_REGISTER] =\n \n /* The \"default\" register map used in 32bit mode.  */\n \n-int const dbx_register_map[FIRST_PSEUDO_REGISTER] =\n+int const debugger_register_map[FIRST_PSEUDO_REGISTER] =\n {\n   /* general regs */\n   0, 2, 1, 3, 6, 7, 4, 5,\n@@ -204,7 +204,7 @@ int const dbx_register_map[FIRST_PSEUDO_REGISTER] =\n \n /* The \"default\" register map used in 64bit mode.  */\n \n-int const dbx64_register_map[FIRST_PSEUDO_REGISTER] =\n+int const debugger64_register_map[FIRST_PSEUDO_REGISTER] =\n {\n   /* general regs */\n   0, 1, 2, 3, 4, 5, 6, 7,\n@@ -283,7 +283,7 @@ int const dbx64_register_map[FIRST_PSEUDO_REGISTER] =\n \t17 for %st(6) (gcc regno = 14)\n \t18 for %st(7) (gcc regno = 15)\n */\n-int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER] =\n+int const svr4_debugger_register_map[FIRST_PSEUDO_REGISTER] =\n {\n   /* general regs */\n   0, 2, 1, 3, 6, 7, 5, 4,"}, {"sha": "900a3bc3673c268d57cae96b3624965c3450134d", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -2030,14 +2030,14 @@ do {\t\t\t\t\t\t\t\\\n   { \"zmm28\", XMM28_REG }, { \"zmm29\", XMM29_REG }, { \"zmm30\", XMM30_REG }, { \"zmm31\", XMM31_REG }  \\\n }\n \n-/* How to renumber registers for dbx and gdb.  */\n+/* How to renumber registers for gdb.  */\n \n-#define DBX_REGISTER_NUMBER(N) \\\n-  (TARGET_64BIT ? dbx64_register_map[(N)] : dbx_register_map[(N)])\n+#define DEBUGGER_REGNO(N) \\\n+  (TARGET_64BIT ? debugger64_register_map[(N)] : debugger_register_map[(N)])\n \n-extern int const dbx_register_map[FIRST_PSEUDO_REGISTER];\n-extern int const dbx64_register_map[FIRST_PSEUDO_REGISTER];\n-extern int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER];\n+extern int const debugger_register_map[FIRST_PSEUDO_REGISTER];\n+extern int const debugger64_register_map[FIRST_PSEUDO_REGISTER];\n+extern int const svr4_debugger_register_map[FIRST_PSEUDO_REGISTER];\n \n /* Before the prologue, RA is at 0(%esp).  */\n #define INCOMING_RETURN_ADDR_RTX \\"}, {"sha": "696a81cd72d7980b17fc3091cf600fa45cad17cf", "filename": "gcc/config/i386/i386elf.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fi386elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fi386elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386elf.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -36,9 +36,9 @@ along with GCC; see the file COPYING3.  If not see\n \t\t\t  %{pg:gcrt0.o%s}%{!pg:%{p:mcrt0.o%s}%{!p:crt0.o%s}}}}\\\n \t\t\tcrtbegin.o%s\"\n \n-#undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n) \\\n-  (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])\n+#undef DEBUGGER_REGNO\n+#define DEBUGGER_REGNO(n) \\\n+  (TARGET_64BIT ? debugger64_register_map[n] : svr4_debugger_register_map[n])\n \n #define LOCAL_LABEL_PREFIX\t\".\"\n "}, {"sha": "ceebbd0e98a88a52d52e1a93ac476f2a3cdab718", "filename": "gcc/config/i386/iamcu.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fiamcu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fiamcu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fiamcu.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -33,9 +33,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #undef ASM_COMMENT_START\n #define ASM_COMMENT_START \"#\"\n \n-#undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n) \\\n-  (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])\n+#undef DEBUGGER_REGNO\n+#define DEBUGGER_REGNO(n) \\\n+  (TARGET_64BIT ? debugger64_register_map[n] : svr4_debugger_register_map[n])\n \n #undef ASM_SPEC\n #define ASM_SPEC \"--32 -march=iamcu\""}, {"sha": "1e6d3ccdca4824021a780a8e1f25add41ee03c3d", "filename": "gcc/config/i386/lynx.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flynx.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -37,9 +37,9 @@ along with GCC; see the file COPYING3.  If not see\n \n /* LynxOS's GDB counts the floating point registers from 16.  */\n \n-#undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n)\t\t\t\t\t\t\\\n-  (TARGET_64BIT ? dbx64_register_map[n]\t\t\t\t\t\\\n+#undef DEBUGGER_REGNO\n+#define DEBUGGER_REGNO(n)\t\t\t\t\t\t\\\n+  (TARGET_64BIT ? debugger64_register_map[n]\t\t\t\t\t\\\n    : (n) == 0 ? 0\t\t\t\t\t\t\t\\\n    : (n) == 1 ? 2\t\t\t\t\t\t\t\\\n    : (n) == 2 ? 1\t\t\t\t\t\t\t\\"}, {"sha": "10fa9457089bdda586be1c889d1ac51e47156f3f", "filename": "gcc/config/i386/netbsd-elf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -66,8 +66,8 @@ along with GCC; see the file COPYING3.  If not see\n #undef ASM_COMMENT_START\n #define ASM_COMMENT_START \"#\"\n \n-#undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n)  svr4_dbx_register_map[n]\n+#undef DEBUGGER_REGNO\n+#define DEBUGGER_REGNO(n)  svr4_debugger_register_map[n]\n \n \n /* Output assembler code to FILE to call the profiler.  */"}, {"sha": "85418b2c5d06ad833a2758c56b4c3a79b8458744", "filename": "gcc/config/i386/nto.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fnto.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fnto.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnto.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -100,4 +100,4 @@ crti.o%s \\\n \n #define TARGET_POSIX_IO\n \n-#undef DBX_REGISTER_NUMBER\n+#undef DEBUGGER_REGNO"}, {"sha": "fc6597c8f7534ba4016babca6da5e310287795b0", "filename": "gcc/config/i386/openbsdelf.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -25,9 +25,9 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n) \\\n-  (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])\n+#undef DEBUGGER_REGNO\n+#define DEBUGGER_REGNO(n) \\\n+  (TARGET_64BIT ? debugger64_register_map[n] : svr4_debugger_register_map[n])\n \n /* This must agree with <machine/_types.h>.  */\n #undef SIZE_TYPE"}, {"sha": "3c4c11c0161117ae5ac443a4dc8948f10a38f8f3", "filename": "gcc/config/i386/sysv4.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv4.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -26,8 +26,8 @@ along with GCC; see the file COPYING3.  If not see\n #undef X86_FILE_START_VERSION_DIRECTIVE\n #define X86_FILE_START_VERSION_DIRECTIVE true\n \n-#undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n)  svr4_dbx_register_map[n]\n+#undef DEBUGGER_REGNO\n+#define DEBUGGER_REGNO(n)  svr4_debugger_register_map[n]\n \n /* A C statement (sans semicolon) to output to the stdio stream\n    FILE the assembler definition of uninitialized global DECL named"}, {"sha": "f23bdf407ca4406cd8cee9ee9f8e3511cfdf57fe", "filename": "gcc/config/i386/vxworks.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fvxworks.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -54,12 +54,12 @@ along with GCC; see the file COPYING3.  If not see\n \n #endif\n \n-/* Provide our target specific DBX_REGISTER_NUMBER.  VxWorks relies on\n+/* Provide our target specific DEBUGGER_REGNO.  VxWorks relies on\n    the SVR4 numbering.  */\n \n-#undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n) \\\n-  (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])\n+#undef DEBUGGER_REGNO\n+#define DEBUGGER_REGNO(n) \\\n+  (TARGET_64BIT ? debugger64_register_map[n] : svr4_debugger_register_map[n])\n \n /* CPU macro definitions, ordered to account for VxWorks 7 not\n    supporting CPUs older than PENTIUM4 since SR0650.  */"}, {"sha": "55aeb959b5bfa36f35a5b5c2ce1a82d429bd16c5", "filename": "gcc/config/i386/x86-64.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fx86-64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fi386%2Fx86-64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-64.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -26,9 +26,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #undef ASM_COMMENT_START\n #define ASM_COMMENT_START \"#\"\n \n-#undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n) \\\n-  (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])\n+#undef DEBUGGER_REGNO\n+#define DEBUGGER_REGNO(n) \\\n+  (TARGET_64BIT ? debugger64_register_map[n] : svr4_debugger_register_map[n])\n \n /* Output assembler code to FILE to call the profiler.  */\n #define NO_PROFILE_COUNTERS 1"}, {"sha": "23b63c87ac589310b39ad4a451658a9862743514", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -83,7 +83,7 @@ extern int ia64_epilogue_uses (int);\n extern int ia64_eh_uses (int);\n extern void emit_safe_across_calls (void);\n extern void ia64_init_builtins (void);\n-extern int ia64_dbx_register_number (int);\n+extern int ia64_debugger_regno (int);\n \n extern rtx ia64_return_addr_rtx (HOST_WIDE_INT, rtx);\n extern void ia64_split_return_addr_rtx (rtx);"}, {"sha": "50ae7aa4cd6c244481198b17127fe74cae3dcf56", "filename": "gcc/config/ia64/ia64.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fia64%2Fia64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fia64%2Fia64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.cc?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -4421,7 +4421,7 @@ ia64_output_function_prologue (FILE *file)\n \n   if (mask && TARGET_GNU_AS)\n     fprintf (file, \"\\t.prologue %d, %d\\n\", mask,\n-\t     ia64_dbx_register_number (grsave));\n+\t     ia64_debugger_regno (grsave));\n   else\n     fputs (\"\\t.prologue\\n\", file);\n \n@@ -4473,7 +4473,7 @@ ia64_output_function_epilogue (FILE *)\n }\n \n int\n-ia64_dbx_register_number (int regno)\n+ia64_debugger_regno (int regno)\n {\n   /* In ia64_expand_prologue we quite literally renamed the frame pointer\n      from its home at loc79 to something inside the register frame.  We\n@@ -10104,7 +10104,7 @@ process_cfa_adjust_cfa (FILE *out_file, rtx pat, rtx insn,\n \n       if (unwind)\n \tfprintf (out_file, \"\\t.vframe r%d\\n\",\n-\t\t ia64_dbx_register_number (REGNO (dest)));\n+\t\t ia64_debugger_regno (REGNO (dest)));\n     }\n   else\n     gcc_unreachable ();\n@@ -10125,7 +10125,7 @@ process_cfa_register (FILE *out_file, rtx pat, bool unwind)\n       /* Saving return address pointer.  */\n       if (unwind)\n \tfprintf (out_file, \"\\t.save rp, r%d\\n\",\n-\t\t ia64_dbx_register_number (dest_regno));\n+\t\t ia64_debugger_regno (dest_regno));\n       return;\n     }\n \n@@ -10137,21 +10137,21 @@ process_cfa_register (FILE *out_file, rtx pat, bool unwind)\n       gcc_assert (dest_regno == current_frame_info.r[reg_save_pr]);\n       if (unwind)\n \tfprintf (out_file, \"\\t.save pr, r%d\\n\",\n-\t\t ia64_dbx_register_number (dest_regno));\n+\t\t ia64_debugger_regno (dest_regno));\n       break;\n \n     case AR_UNAT_REGNUM:\n       gcc_assert (dest_regno == current_frame_info.r[reg_save_ar_unat]);\n       if (unwind)\n \tfprintf (out_file, \"\\t.save ar.unat, r%d\\n\",\n-\t\t ia64_dbx_register_number (dest_regno));\n+\t\t ia64_debugger_regno (dest_regno));\n       break;\n \n     case AR_LC_REGNUM:\n       gcc_assert (dest_regno == current_frame_info.r[reg_save_ar_lc]);\n       if (unwind)\n \tfprintf (out_file, \"\\t.save ar.lc, r%d\\n\",\n-\t\t ia64_dbx_register_number (dest_regno));\n+\t\t ia64_debugger_regno (dest_regno));\n       break;\n \n     default:\n@@ -10326,7 +10326,7 @@ ia64_asm_unwind_emit (FILE *out_file, rtx_insn *insn)\n \t{\n \t  if (unwind)\n \t    fprintf (out_file, \"\\t.save ar.pfs, r%d\\n\",\n-\t\t     ia64_dbx_register_number (dest_regno));\n+\t\t     ia64_debugger_regno (dest_regno));\n \t}\n       else\n \t{"}, {"sha": "b7415c535964848154b202af5408dfd5a7cc2650", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -1422,20 +1422,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Macros Affecting all Debug Formats.  */\n \n /* This is handled in sysv4.h.  */\n-\n-\f\n-/* Specific Options for DBX Output.  */\n-\n-\f\n-/* Open ended Hooks for DBX Output.  */\n-\n-/* Likewise.  */\n-\n-\f\n-/* File names in DBX format.  */\n-\n-/* Likewise.  */\n-\n \f\n /* Macros for Dwarf Output.  */\n "}, {"sha": "6a4e01779b5d67817c4b4f9b620b04b01441865b", "filename": "gcc/config/ia64/sysv4.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fia64%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fia64%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fsysv4.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -100,8 +100,8 @@ do {\t\t\t\t\t\t\\\n #undef FINI_SECTION_ASM_OP\n #define FINI_SECTION_ASM_OP\t\"\\t.section\\t.fini,\\\"ax\\\",\\\"progbits\\\"\"\n \n-#define DBX_REGISTER_NUMBER(REGNO) \\\n-  ia64_dbx_register_number(REGNO)\n+#define DEBUGGER_REGNO(REGNO) \\\n+  ia64_debugger_regno(REGNO)\n \n #undef SIZE_TYPE\n #define SIZE_TYPE \"long unsigned int\""}, {"sha": "3090185288bb6420e3c9ffc6bb8714d11ad17755", "filename": "gcc/config/lm32/lm32.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Flm32%2Flm32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Flm32%2Flm32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -491,7 +491,7 @@ do {                                                            \\\n /* Debugging.  */\n /*-------------*/\n \n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n+#define DEBUGGER_REGNO(REGNO) (REGNO)\n \n #define DEFAULT_GDB_EXTENSIONS 1\n "}, {"sha": "26601ab0e133a9ac5abaaadf5f4f6ed9aabc79bd", "filename": "gcc/config/m32c/m32c.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fm32c%2Fm32c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fm32c%2Fm32c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.cc?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -1013,7 +1013,7 @@ m32c_eh_return_stackadj_rtx (void)\n \n /* Registers That Address the Stack Frame */\n \n-/* Implements DWARF_FRAME_REGNUM and DBX_REGISTER_NUMBER.  Note that\n+/* Implements DWARF_FRAME_REGNUM and DEBUGGER_REGNO.  Note that\n    the original spec called for dwarf numbers to vary with register\n    width as well, for example, r0l, r0, and r2r0 would each have\n    different dwarf numbers.  GCC doesn't support this, and we don't do"}, {"sha": "a9b61acea9dc8cdb5fa4580707722e77a797a4ca", "filename": "gcc/config/m32c/m32c.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fm32c%2Fm32c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fm32c%2Fm32c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -452,7 +452,7 @@ enum reg_class\n \n #define DWARF_FRAME_REGISTERS 20\n #define DWARF_FRAME_REGNUM(N) m32c_dwarf_frame_regnum (N)\n-#define DBX_REGISTER_NUMBER(N) m32c_dwarf_frame_regnum (N)\n+#define DEBUGGER_REGNO(N) m32c_dwarf_frame_regnum (N)\n \n #undef ASM_PREFERRED_EH_DATA_FORMAT\n /* This is the same as the default in practice, except that by making"}, {"sha": "ba7a3ba51620ae78b281ebffaf7c96844e7ede96", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -224,8 +224,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n \n-#undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n+#undef DEBUGGER_REGNO\n+#define DEBUGGER_REGNO(REGNO) (REGNO)\n \n #undef  SIZE_TYPE\n #define SIZE_TYPE \"unsigned int\""}, {"sha": "05fa7fe8a235e117a07aa76d36d1efcea50644d2", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -707,7 +707,7 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n \n /* On the Sun-3, the floating point registers have numbers\n    18 to 25, not 16 to 23 as they do in the compiler.  */\n-#define DBX_REGISTER_NUMBER(REGNO) ((REGNO) < 16 ? (REGNO) : (REGNO) + 2)\n+#define DEBUGGER_REGNO(REGNO) ((REGNO) < 16 ? (REGNO) : (REGNO) + 2)\n \n /* Before the prologue, RA is at 0(%sp).  */\n #define INCOMING_RETURN_ADDR_RTX \\\n@@ -720,7 +720,7 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n \t\t\t\t\tUNITS_PER_WORD))\t\t   \\\n    : gen_rtx_MEM (Pmode, plus_constant (Pmode, FRAME, UNITS_PER_WORD)))\n \n-/* We must not use the DBX register numbers for the DWARF 2 CFA column\n+/* We must not use the debugger register numbers for the DWARF 2 CFA column\n    numbers because that maps to numbers beyond FIRST_PSEUDO_REGISTER.\n    Instead use the identity mapping.  */\n #define DWARF_FRAME_REGNUM(REG) \\"}, {"sha": "e5518b0ee7260d205470eb3c812460a0d4a96220", "filename": "gcc/config/m68k/m68kelf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fm68k%2Fm68kelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fm68k%2Fm68kelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kelf.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -100,8 +100,8 @@ do {\t\t\t\t\t\t\t\t\\\n    SVR4 debugger in the m68k/SVR4 reference port, where d0-d7\n    are 0-7, a0-a8 are 8-15, and fp0-fp7 are 16-23.  */\n \n-#undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n+#undef DEBUGGER_REGNO\n+#define DEBUGGER_REGNO(REGNO) (REGNO)\n \n #if 0\n /* SVR4 m68k assembler is bitching on the `comm i,1,1' which askes for "}, {"sha": "ac7ec92ce6f373926c952752ec5a2ad02bed9d6f", "filename": "gcc/config/m68k/netbsd-elf.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -215,13 +215,13 @@ while (0)\n #define M68K_STATIC_CHAIN_REG_NAME REGISTER_PREFIX \"a1\"\n \n \n-/* Now to renumber registers for dbx and gdb.\n+/* Now to renumber registers for gdb.\n    We use the Sun-3 convention, which is:\n    floating point registers have numbers 18 to 25, not\n    16 to 23 as they do in the compiler.  */\n \n-#undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(REGNO) ((REGNO) < 16 ? (REGNO) : (REGNO) + 2)\n+#undef DEBUGGER_REGNO\n+#define DEBUGGER_REGNO(REGNO) ((REGNO) < 16 ? (REGNO) : (REGNO) + 2)\n \n \n /* 1 if N is a possible register number for a function value.  For"}, {"sha": "8fcca1829f67dbe24c4f2a5cdf47f26cd5d6bdd5", "filename": "gcc/config/microblaze/microblaze.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.cc?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -193,7 +193,7 @@ struct microblaze_frame_info zero_frame_info;\n char microblaze_print_operand_punct[256];\n \n /* Map GCC register number to debugger register number.  */\n-int microblaze_dbx_regno[FIRST_PSEUDO_REGISTER];\n+int microblaze_debugger_regno[FIRST_PSEUDO_REGISTER];\n \n /* Map hard register number to register class.  */\n enum reg_class microblaze_regno_to_class[] =\n@@ -1881,11 +1881,11 @@ microblaze_option_override (void)\n      Ignore the special purpose register numbers.  */\n \n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-    microblaze_dbx_regno[i] = -1;\n+    microblaze_debugger_regno[i] = -1;\n \n-  start = GP_DBX_FIRST - GP_REG_FIRST;\n+  start = GP_DEBUGGER_FIRST - GP_REG_FIRST;\n   for (i = GP_REG_FIRST; i <= GP_REG_LAST; i++)\n-    microblaze_dbx_regno[i] = i + start;\n+    microblaze_debugger_regno[i] = i + start;\n \n   /* Set up array giving whether a given register can hold a given mode.   */\n "}, {"sha": "f70c6612c64d0de0d39dcc5b2d3bd3d5444b7430", "filename": "gcc/config/microblaze/microblaze.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -39,7 +39,7 @@ extern char microblaze_print_operand_punct[];\n extern int microblaze_section_threshold;\n \n /* Map register # to debug register # */\n-extern int microblaze_dbx_regno[];\n+extern int microblaze_debugger_regno[];\n \n extern int microblaze_no_unsafe_delay;\n extern int microblaze_has_clz;\n@@ -163,8 +163,8 @@ extern enum pipeline_type microblaze_pipe;\n \n /* Debug stuff.  */\n \n-/* How to renumber registers for dbx and gdb.  */\n-#define DBX_REGISTER_NUMBER(REGNO) microblaze_dbx_regno[(REGNO)]\n+/* How to renumber registers for gdb.  */\n+#define DEBUGGER_REGNO(REGNO) microblaze_debugger_regno[(REGNO)]\n \n /* Generate DWARF exception handling info.  */\n #define DWARF2_UNWIND_INFO 1\n@@ -276,7 +276,7 @@ extern enum pipeline_type microblaze_pipe;\n #define GP_REG_FIRST    0\n #define GP_REG_LAST     31\n #define GP_REG_NUM      (GP_REG_LAST - GP_REG_FIRST + 1)\n-#define GP_DBX_FIRST    0\n+#define GP_DEBUGGER_FIRST    0\n \n #define ST_REG\t\t32\n #define AP_REG_NUM      33"}, {"sha": "3f24d6ed816fb0a7880ac387e9d1d68b1896cc0e", "filename": "gcc/config/mips/vxworks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fmips%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fmips%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fvxworks.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -75,4 +75,4 @@ VXWORKS_LINK_SPEC\n #undef SUBTARGET_OVERRIDE_OPTIONS\n #define SUBTARGET_OVERRIDE_OPTIONS VXWORKS_OVERRIDE_OPTIONS\n \n-#undef DBX_REGISTER_NUMBER\n+#undef DEBUGGER_REGNO"}, {"sha": "c5e6eb77a395077c1cec71b6945edcfcf6bff1bf", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -42,7 +42,7 @@ extern int mmix_shiftable_wyde_value (uint64_t);\n extern void mmix_output_register_setting (FILE *, int, int64_t, int);\n extern int mmix_opposite_regno (int, int);\n extern int mmix_local_regno (int);\n-extern unsigned mmix_dbx_register_number (unsigned);\n+extern unsigned mmix_debugger_regno (unsigned);\n extern int mmix_use_simple_return (void);\n extern void mmix_make_decl_one_only (tree);\n extern int mmix_data_alignment (tree, int);"}, {"sha": "ffdd8c71cc1b4c26aacddb2dbdb08a92a48d12b6", "filename": "gcc/config/mmix/mmix.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fmmix%2Fmmix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fmmix%2Fmmix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.cc?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -1942,10 +1942,10 @@ mmix_asm_output_align (FILE *stream, int power)\n  fprintf (stream, \"\\tLOC @+(%d-@)&%d\\n\", 1 << power, (1 << power) - 1);\n }\n \n-/* DBX_REGISTER_NUMBER.  */\n+/* DEBUGGER_REGNO.  */\n \n unsigned\n-mmix_dbx_register_number (unsigned regno)\n+mmix_debugger_regno (unsigned regno)\n {\n   /* Adjust the register number to the one it will be output as, dammit.\n      It'd be nice if we could check the assumption that we're filling a\n@@ -1956,7 +1956,7 @@ mmix_dbx_register_number (unsigned regno)\n   /* We need to renumber registers to get the number of the return address\n      register in the range 0..255.  It is also space-saving if registers\n      mentioned in the call-frame information (which uses this function by\n-     defaulting DWARF_FRAME_REGNUM to DBX_REGISTER_NUMBER) are numbered\n+     defaulting DWARF_FRAME_REGNUM to DEBUGGER_REGNO) are numbered\n      0 .. 63.  So map 224 .. 256+15 -> 0 .. 47 and 0 .. 223 -> 48..223+48.  */\n   return regno >= 224 ? (regno - 224) : (regno + 48);\n }"}, {"sha": "2896f63f7ebba9e44c80851853a2867265eb41ee", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -757,17 +757,8 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n \n /* Node: All Debuggers */\n \n-#define DBX_REGISTER_NUMBER(REGNO) \\\n- mmix_dbx_register_number (REGNO)\n-\n-\n-/* Node: DBX Options */\n-/* (empty) */\n-/* Node: DBX Hooks */\n-/* (empty) */\n-/* Node: File Names and DBX */\n-/* (empty) */\n-\n+#define DEBUGGER_REGNO(REGNO) \\\n+ mmix_debugger_regno (REGNO)\n \n /* Node: DWARF */\n #define DWARF2_DEBUGGING_INFO 1"}, {"sha": "0b44ee7061ed6dbd853b54eff61c8c2a382908c8", "filename": "gcc/config/nds32/nds32-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -65,7 +65,7 @@ extern void nds32_emit_v3pop_fpr_callee_saved (int);\n \n /* Controlling Debugging Information Format.  */\n \n-extern unsigned int nds32_dbx_register_number (unsigned int);\n+extern unsigned int nds32_debugger_regno (unsigned int);\n \n /* ------------------------------------------------------------------------ */\n "}, {"sha": "67a612130fe908a1aa189d6de66139cc13904a4f", "filename": "gcc/config/nds32/nds32.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fnds32%2Fnds32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fnds32%2Fnds32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.cc?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -3889,7 +3889,7 @@ nds32_dwarf_register_span (rtx reg)\n /* Map internal gcc register numbers to DWARF2 register numbers.  */\n \n unsigned int\n-nds32_dbx_register_number (unsigned int regno)\n+nds32_debugger_regno (unsigned int regno)\n {\n   /* The nds32 port in GDB maintains a mapping between dwarf register\n      number and displayed register name.  For backward compatibility to\n@@ -5809,12 +5809,6 @@ nds32_use_blocks_for_constant_p (machine_mode mode,\n \n /* -- Macros Affecting All Debugging Formats.  */\n \n-/* -- Specific Options for DBX Output.  */\n-\n-/* -- Open-Ended Hooks for DBX Format.  */\n-\n-/* -- File Names in DBX Format.  */\n-\n /* -- Macros for DWARF Output.  */\n \n /* -- Macros for VMS Debug Format.  */"}, {"sha": "cd00b2a6547252e65e5424eec254a4c2e0f77747", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -1332,7 +1332,7 @@ enum reg_class\n    This is used to unwind the stack to an exception handler's call frame.  */\n #define EH_RETURN_STACKADJ_RTX gen_rtx_REG (Pmode, 2)\n \n-#define DBX_REGISTER_NUMBER(REGNO) nds32_dbx_register_number (REGNO)\n+#define DEBUGGER_REGNO(REGNO) nds32_debugger_regno (REGNO)\n \n #define STACK_POINTER_REGNUM SP_REGNUM\n "}, {"sha": "dc9cad1aaaf829f15578533b02c928e19e17cfc6", "filename": "gcc/config/nvptx/nvptx.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -253,7 +253,7 @@ struct GTY(()) machine_function\n #undef ASM_APP_OFF\n #define ASM_APP_OFF \"\\t// #NO_APP \\n\"\n \n-#define DBX_REGISTER_NUMBER(N) N\n+#define DEBUGGER_REGNO(N) N\n \n #define TEXT_SECTION_ASM_OP \"\"\n #define DATA_SECTION_ASM_OP \"\""}, {"sha": "c2decf3aedec1398d87f66036a901008cf368230", "filename": "gcc/config/or1k/or1k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2For1k%2For1k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2For1k%2For1k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2For1k.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -146,7 +146,7 @@\n    : (X) < 24 ? ((X) - 16) * 2 + 17\t\\\n    : ((X) - 24) * 2 + 16)\n \n-#define DBX_REGISTER_NUMBER(X)  GCC_TO_HW_REGNO(X)\n+#define DEBUGGER_REGNO(X)  GCC_TO_HW_REGNO(X)\n \n #define REGISTER_NAMES { \\\n   \"r0\",   \"r1\",   \"r2\",   \"r3\",   \"r4\",   \"r5\",   \"r6\",   \"r7\",   \\"}, {"sha": "1d511aaffcd624eac5555d8a1b8660d70b5afd16", "filename": "gcc/config/pa/pa32-regs.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fpa%2Fpa32-regs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fpa%2Fpa32-regs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa32-regs.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -227,19 +227,19 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n       || (GET_MODE_SIZE (MODE) == 8 * UNITS_PER_WORD\t\t\t\\\n \t  && ((REGNO) & 7) == 3 && (REGNO) <= 19)))\n \n-/* How to renumber registers for dbx and gdb.\n+/* How to renumber registers for gdb.\n \n    Registers 0  - 31 remain unchanged.\n \n    Registers 32 - 87 are mapped to 72 - 127\n \n    Register 88 is mapped to 32.  */\n \n-#define DBX_REGISTER_NUMBER(REGNO) \\\n+#define DEBUGGER_REGNO(REGNO) \\\n   ((REGNO) <= 31 ? (REGNO) :\t\t\t\t\t\t\\\n    ((REGNO) <= 87 ? (REGNO) + 40 : 32))\n \n-/* We must not use the DBX register numbers for the DWARF 2 CFA column\n+/* We must not use the debugger register numbers for the DWARF 2 CFA column\n    numbers because that maps to numbers beyond FIRST_PSEUDO_REGISTER.\n    Instead use the identity mapping.  */\n #define DWARF_FRAME_REGNUM(REG) REG"}, {"sha": "02b76e0eb45d7fbecfca940cd3854a2098fb7353", "filename": "gcc/config/pa/pa64-regs.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fpa%2Fpa64-regs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fpa%2Fpa64-regs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-regs.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -165,17 +165,17 @@ along with GCC; see the file COPYING3.  If not see\n       || (GET_MODE_SIZE (MODE) == 4 * UNITS_PER_WORD\t\t\t\\\n \t  && ((REGNO) & 3) == 3 && (REGNO) <= 23)))\n \n-/* How to renumber registers for dbx and gdb.\n+/* How to renumber registers for gdb.\n \n    Registers 0  - 31 remain unchanged.\n \n    Registers 32 - 59 are mapped to 72, 74, 76 ...\n \n    Register 60 is mapped to 32.  */\n-#define DBX_REGISTER_NUMBER(REGNO) \\\n+#define DEBUGGER_REGNO(REGNO) \\\n   ((REGNO) <= 31 ? (REGNO) : ((REGNO) < 60 ? (REGNO - 32) * 2 + 72 : 32))\n \n-/* We must not use the DBX register numbers for the DWARF 2 CFA column\n+/* We must not use the debugger register numbers for the DWARF 2 CFA column\n    numbers because that maps to numbers beyond FIRST_PSEUDO_REGISTER.\n    Instead use the identity mapping.  */\n #define DWARF_FRAME_REGNUM(REG) REG"}, {"sha": "d0d89320ef6871cb521fb6804717ad1e1364e289", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -291,7 +291,7 @@ extern int rs6000_trampoline_size (void);\n extern alias_set_type get_TOC_alias_set (void);\n extern void rs6000_emit_prologue (void);\n extern void rs6000_emit_load_toc_table (int);\n-extern unsigned int rs6000_dbx_register_number (unsigned int, unsigned int);\n+extern unsigned int rs6000_debugger_regno (unsigned int, unsigned int);\n extern void rs6000_emit_epilogue (enum epilogue_type);\n extern void rs6000_expand_split_stack_prologue (void);\n extern void rs6000_split_stack_space_check (rtx, rtx);"}, {"sha": "8b4edd281cafe6c02944e87883c8428c6221012c", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -23637,7 +23637,7 @@ rs6000_init_dwarf_reg_sizes_extra (tree address)\n      2 -- DWARF .eh_frame section  */\n \n unsigned int\n-rs6000_dbx_register_number (unsigned int regno, unsigned int format)\n+rs6000_debugger_regno (unsigned int regno, unsigned int format)\n {\n   /* On some platforms, we use the standard DWARF register\n      numbering for .debug_info and .debug_frame.  */"}, {"sha": "eb7b2158497017d2254b090164e937b9542e1500", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -791,7 +791,7 @@ enum data_align { align_abi, align_opt, align_both };\n #define FIRST_PSEUDO_REGISTER 111\n \n /* Use standard DWARF numbering for DWARF debugging information.  */\n-#define DBX_REGISTER_NUMBER(REGNO) rs6000_dbx_register_number ((REGNO), 0)\n+#define DEBUGGER_REGNO(REGNO) rs6000_debugger_regno ((REGNO), 0)\n \n /* Use gcc hard register numbering for eh_frame.  */\n #define DWARF_FRAME_REGNUM(REGNO) (REGNO)\n@@ -800,7 +800,7 @@ enum data_align { align_abi, align_opt, align_both };\n    collected using DWARF_FRAME_REGNUM to those that should be output in\n    .debug_frame and .eh_frame.  */\n #define DWARF2_FRAME_REG_OUT(REGNO, FOR_EH) \\\n-  rs6000_dbx_register_number ((REGNO), (FOR_EH) ? 2 : 1)\n+  rs6000_debugger_regno ((REGNO), (FOR_EH) ? 2 : 1)\n \n /* 1 for registers that have pervasive standard uses\n    and are not available for the register allocator."}, {"sha": "be566215df2470a8bde0eb646820e847420aebd6", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -701,7 +701,7 @@ extern const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER];\n /* Define the dwarf register mapping.\n    v16-v31 -> 68-83\n    rX      -> X      otherwise  */\n-#define DBX_REGISTER_NUMBER(regno)\t\t\t\t\\\n+#define DEBUGGER_REGNO(regno)\t\t\t\t\\\n   (((regno) >= 38 && (regno) <= 53) ? (regno) + 30 : (regno))\n \n /* Frame registers.  */"}, {"sha": "8530c15192f51c7e24b9bdb5aad94f0995d18058", "filename": "gcc/config/sh/elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fsh%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fsh%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Felf.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -61,7 +61,7 @@ along with GCC; see the file COPYING3.  If not see\n #define LINK_EMUL_PREFIX \"sh%{ml:l}elf\"\n #endif\n \n-#define DBX_REGISTER_NUMBER(REGNO) SH_DBX_REGISTER_NUMBER (REGNO)\n+#define DEBUGGER_REGNO(REGNO) SH_DEBUGGER_REGNO (REGNO)\n \n #undef ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(STRING, PREFIX, NUM) \\"}, {"sha": "77a83736d2d08f28c4d25ce8d5f19c35758ad5ef", "filename": "gcc/config/sh/linux.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fsh%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fsh%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flinux.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -111,11 +111,11 @@ along with GCC; see the file COPYING3.  If not see\n    in MD_FALLBACK_FRAME_STATE_FOR and its content will be read with\n    _Unwind_GetGR which uses dwarf_reg_size_table to get the size of\n    the register.  So the entry of dwarf_reg_size_table corresponding to\n-   this slot must be set.  To do this, we redefine DBX_REGISTER_NUMBER\n+   this slot must be set.  To do this, we redefine DEBUGGER_REGNO\n    so as to return itself for 16.  */\n-#undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(REGNO) \\\n-  (((REGNO) == 16) ? 16 : SH_DBX_REGISTER_NUMBER (REGNO))\n+#undef DEBUGGER_REGNO\n+#define DEBUGGER_REGNO(REGNO) \\\n+  (((REGNO) == 16) ? 16 : SH_DEBUGGER_REGNO (REGNO))\n \n /* Install the __sync libcalls.  */\n #undef TARGET_INIT_LIBFUNCS"}, {"sha": "3f60e15d79a3b5d228f0978bc6f74abc479dcfc2", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -1654,14 +1654,14 @@ extern bool current_function_interrupt;\n   fprintf ((file), \"\\tmov.l\\t@r15+,r%d\\n\", (v));\t\\\n }\n \n-/* DBX register number for a given compiler register number.  */\n+/* Debugger register number for a given compiler register number.  */\n /* GDB has FPUL at 23 and FP0 at 25, so we must add one to all FP registers\n    to match gdb.  */\n /* expand_builtin_init_dwarf_reg_sizes uses this to test if a\n    register exists, so we should return -1 for invalid register numbers.  */\n-#define DBX_REGISTER_NUMBER(REGNO) SH_DBX_REGISTER_NUMBER (REGNO)\n+#define DEBUGGER_REGNO(REGNO) SH_DEBUGGER_REGNO (REGNO)\n \n-#define SH_DBX_REGISTER_NUMBER(REGNO) \\\n+#define SH_DEBUGGER_REGNO(REGNO) \\\n   (IN_RANGE ((REGNO), \\\n \t     (unsigned HOST_WIDE_INT) FIRST_GENERAL_REG, \\\n \t     FIRST_GENERAL_REG + 15U) \\"}, {"sha": "d7de116f445ba6171593ea285a4d7cb3d301a12a", "filename": "gcc/config/visium/visium.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fvisium%2Fvisium.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fvisium%2Fvisium.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -1491,7 +1491,7 @@ do\t\t\t\t\t\t\t\t\t\\\n    This describes how to specify debugging information.\n \n     mda is known to GDB, but not to GCC. */\n-#define DBX_REGISTER_NUMBER(REGNO) \\\n+#define DEBUGGER_REGNO(REGNO) \\\n   ((REGNO) > MDB_REGNUM ? (REGNO) + 1 : (REGNO))\n \n /* `DEBUGGER_AUTO_OFFSET (X)'\n@@ -1500,7 +1500,7 @@ do\t\t\t\t\t\t\t\t\t\\\n    automatic variable having address X (an RTL expression).  The\n    default computation assumes that X is based on the frame-pointer\n    and gives the offset from the frame-pointer.  This is required for\n-   targets that produce debugging output for DBX and allow the frame-pointer\n+   targets that produce debugging output for debugger and allow the frame-pointer\n    to be eliminated when the `-g' options is used. */\n #define DEBUGGER_AUTO_OFFSET(X) \\\n   (GET_CODE (X) == PLUS ? INTVAL (XEXP (X, 1)) : 0)"}, {"sha": "fbdccc49c9b5ed5da82ac44a02e17d5081246920", "filename": "gcc/config/xtensa/elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fxtensa%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fxtensa%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Felf.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -81,7 +81,7 @@ along with GCC; see the file COPYING3.  If not see\n /* Do not force \"-fpic\" for this target.  */\n #define XTENSA_ALWAYS_PIC 0\n \n-#undef DBX_REGISTER_NUMBER\n+#undef DEBUGGER_REGNO\n \n /* Search for headers in $tooldir/arch/include and for libraries and\n    startfiles in $tooldir/arch/lib.  */"}, {"sha": "540e4bf538f8d5e2ef908a81fd4b3b0ff248b984", "filename": "gcc/config/xtensa/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fxtensa%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fxtensa%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Flinux.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -67,5 +67,5 @@ along with GCC; see the file COPYING3.  If not see\n /* Always enable \"-fpic\" for Xtensa Linux.  */\n #define XTENSA_ALWAYS_PIC 1\n \n-#undef DBX_REGISTER_NUMBER\n+#undef DEBUGGER_REGNO\n "}, {"sha": "5fcf639ccff4b3008f15d2b8ac38d4f261b092d6", "filename": "gcc/config/xtensa/uclinux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fxtensa%2Fuclinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fxtensa%2Fuclinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fuclinux.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -70,5 +70,5 @@ along with GCC; see the file COPYING3.  If not see\n #undef TARGET_LIBC_HAS_FUNCTION\n #define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function\n \n-#undef DBX_REGISTER_NUMBER\n+#undef DEBUGGER_REGNO\n "}, {"sha": "459e2aac9fc973d8ae5ae897d2a2a952c4b55138", "filename": "gcc/config/xtensa/xtensa-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -71,7 +71,7 @@ extern rtx xtensa_return_addr (int, rtx);\n #endif /* RTX_CODE */\n \n extern void xtensa_setup_frame_addresses (void);\n-extern int xtensa_dbx_register_number (int);\n+extern int xtensa_debugger_regno (int);\n extern long compute_frame_size (poly_int64);\n extern bool xtensa_use_return_instruction_p (void);\n extern void xtensa_expand_prologue (void);"}, {"sha": "93ac6562b2289bd141233aedb5bd7eb37f002299", "filename": "gcc/config/xtensa/xtensa.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -2430,7 +2430,7 @@ xtensa_cannot_force_const_mem (machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n /* Return the debugger register number to use for 'regno'.  */\n \n int\n-xtensa_dbx_register_number (int regno)\n+xtensa_debugger_regno (int regno)\n {\n   int first = -1;\n "}, {"sha": "0f3006d7af8fdb30b90c45ce6a9a61097c70f27c", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -216,7 +216,7 @@ along with GCC; see the file COPYING3.  If not see\n #define FIRST_PSEUDO_REGISTER 36\n \n /* Return the stabs register number to use for REGNO.  */\n-#define DBX_REGISTER_NUMBER(REGNO) xtensa_dbx_register_number (REGNO)\n+#define DEBUGGER_REGNO(REGNO) xtensa_debugger_regno (REGNO)\n \n /* 1 for registers that have pervasive standard uses\n    and are not available for the register allocator.  */"}, {"sha": "953605c1627b4a087799c90af2d8e48fe09324a6", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -429,17 +429,17 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n #endif\n \n-/* How to renumber registers for dbx and gdb.  If not defined, assume\n+/* How to renumber registers for gdb.  If not defined, assume\n    no renumbering is necessary.  */\n \n-#ifndef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n+#ifndef DEBUGGER_REGNO\n+#define DEBUGGER_REGNO(REGNO) (REGNO)\n #endif\n \n /* The mapping from gcc register number to DWARF 2 CFA column number.\n    By default, we just provide columns for all registers.  */\n #ifndef DWARF_FRAME_REGNUM\n-#define DWARF_FRAME_REGNUM(REG) DBX_REGISTER_NUMBER (REG)\n+#define DWARF_FRAME_REGNUM(REG) DEBUGGER_REGNO (REG)\n #endif\n \n /* The mapping from dwarf CFA reg number to internal dwarf reg numbers.  */"}, {"sha": "f8fce277eb52c12ca9b328cf607ec88933823a2b", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -3785,7 +3785,7 @@ Define this macro if the target's representation for dwarf registers\n used in .eh_frame or .debug_frame is different from that used in other\n debug info sections.  Given a GCC hard register number, this macro\n should return the .eh_frame register number.  The default is\n-@code{DBX_REGISTER_NUMBER (@var{regno})}.\n+@code{DEBUGGER_REGISTER_NUMBER (@var{regno})}.\n \n @end defmac\n \n@@ -9948,21 +9948,21 @@ This describes how to specify debugging information.\n @c prevent bad page break with this line\n These macros affect all debugging formats.\n \n-@defmac DBX_REGISTER_NUMBER (@var{regno})\n-A C expression that returns the DBX register number for the compiler\n+@defmac DEBUGGER_REGISTER_NUMBER (@var{regno})\n+A C expression that returns the debugger register number for the compiler\n register number @var{regno}.  In the default macro provided, the value\n of this expression will be @var{regno} itself.  But sometimes there are\n-some registers that the compiler knows about and DBX does not, or vice\n+some registers that the compiler knows about and debugger does not, or vice\n versa.  In such cases, some register may need to have one number in the\n-compiler and another for DBX@.\n+compiler and another for debugger@.\n \n If two registers have consecutive numbers inside GCC, and they can be\n used as a pair to hold a multiword value, then they @emph{must} have\n-consecutive numbers after renumbering with @code{DBX_REGISTER_NUMBER}.\n+consecutive numbers after renumbering with @code{DEBUGGER_REGISTER_NUMBER}.\n Otherwise, debuggers will be unable to access such a pair, because they\n expect register pairs to be consecutive in their own numbering scheme.\n \n-If you find yourself defining @code{DBX_REGISTER_NUMBER} in way that\n+If you find yourself defining @code{DEBUGGER_REGISTER_NUMBER} in way that\n does not preserve register pairs, then what you must do instead is\n redefine the actual register numbering scheme.\n @end defmac\n@@ -9972,7 +9972,7 @@ A C expression that returns the integer offset value for an automatic\n variable having address @var{x} (an RTL expression).  The default\n computation assumes that @var{x} is based on the frame-pointer and\n gives the offset from the frame-pointer.  This is required for targets\n-that produce debugging output for DBX and allow the frame-pointer to be\n+that produce debugging output for debugger and allow the frame-pointer to be\n eliminated when the @option{-g} option is used.\n @end defmac\n \n@@ -10002,8 +10002,7 @@ or @option{-gvms}.\n \n @defmac DEFAULT_GDB_EXTENSIONS\n Define this macro to control whether GCC should by default generate\n-GDB's extended version of DBX debugging information (assuming DBX-format\n-debugging information is enabled at all).  If you don't define the\n+GDB's extended version of debugging information.  If you don't define the\n macro, the default is 1: always generate the extended information\n if there is any occasion to.\n @end defmac"}, {"sha": "955343ab86ec1ddd148356d1879bd8a4ce4c7770", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -3012,7 +3012,7 @@ Define this macro if the target's representation for dwarf registers\n used in .eh_frame or .debug_frame is different from that used in other\n debug info sections.  Given a GCC hard register number, this macro\n should return the .eh_frame register number.  The default is\n-@code{DBX_REGISTER_NUMBER (@var{regno})}.\n+@code{DEBUGGER_REGISTER_NUMBER (@var{regno})}.\n \n @end defmac\n \n@@ -6618,21 +6618,21 @@ This describes how to specify debugging information.\n @c prevent bad page break with this line\n These macros affect all debugging formats.\n \n-@defmac DBX_REGISTER_NUMBER (@var{regno})\n-A C expression that returns the DBX register number for the compiler\n+@defmac DEBUGGER_REGISTER_NUMBER (@var{regno})\n+A C expression that returns the debugger register number for the compiler\n register number @var{regno}.  In the default macro provided, the value\n of this expression will be @var{regno} itself.  But sometimes there are\n-some registers that the compiler knows about and DBX does not, or vice\n+some registers that the compiler knows about and debugger does not, or vice\n versa.  In such cases, some register may need to have one number in the\n-compiler and another for DBX@.\n+compiler and another for debugger@.\n \n If two registers have consecutive numbers inside GCC, and they can be\n used as a pair to hold a multiword value, then they @emph{must} have\n-consecutive numbers after renumbering with @code{DBX_REGISTER_NUMBER}.\n+consecutive numbers after renumbering with @code{DEBUGGER_REGISTER_NUMBER}.\n Otherwise, debuggers will be unable to access such a pair, because they\n expect register pairs to be consecutive in their own numbering scheme.\n \n-If you find yourself defining @code{DBX_REGISTER_NUMBER} in way that\n+If you find yourself defining @code{DEBUGGER_REGISTER_NUMBER} in way that\n does not preserve register pairs, then what you must do instead is\n redefine the actual register numbering scheme.\n @end defmac\n@@ -6642,7 +6642,7 @@ A C expression that returns the integer offset value for an automatic\n variable having address @var{x} (an RTL expression).  The default\n computation assumes that @var{x} is based on the frame-pointer and\n gives the offset from the frame-pointer.  This is required for targets\n-that produce debugging output for DBX and allow the frame-pointer to be\n+that produce debugging output for debugger and allow the frame-pointer to be\n eliminated when the @option{-g} option is used.\n @end defmac\n \n@@ -6672,8 +6672,7 @@ or @option{-gvms}.\n \n @defmac DEFAULT_GDB_EXTENSIONS\n Define this macro to control whether GCC should by default generate\n-GDB's extended version of DBX debugging information (assuming DBX-format\n-debugging information is enabled at all).  If you don't define the\n+GDB's extended version of debugging information.  If you don't define the\n macro, the default is 1: always generate the extended information\n if there is any occasion to.\n @end defmac"}, {"sha": "e4183607ff85145eac968e3c2cfe63b1ab7c7a27", "filename": "gcc/dwarf2out.cc", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fdwarf2out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fdwarf2out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.cc?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -3850,7 +3850,7 @@ static int decl_quals (const_tree);\n static dw_die_ref modified_type_die (tree, int, bool, dw_die_ref);\n static dw_die_ref generic_parameter_die (tree, tree, bool, dw_die_ref);\n static dw_die_ref template_parameter_pack_die (tree, tree, dw_die_ref);\n-static unsigned int dbx_reg_number (const_rtx);\n+static unsigned int debugger_reg_number (const_rtx);\n static void add_loc_descr_op_piece (dw_loc_descr_ref *, int);\n static dw_loc_descr_ref reg_loc_descriptor (rtx, enum var_init_status);\n static dw_loc_descr_ref one_reg_loc_descriptor (unsigned int,\n@@ -14169,10 +14169,10 @@ template_parameter_pack_die (tree parm_pack,\n   return die;\n }\n \n-/* Return the DBX register number described by a given RTL node.  */\n+/* Return the debugger register number described by a given RTL node.  */\n \n static unsigned int\n-dbx_reg_number (const_rtx rtl)\n+debugger_reg_number (const_rtx rtl)\n {\n   unsigned regno = REGNO (rtl);\n \n@@ -14187,7 +14187,7 @@ dbx_reg_number (const_rtx rtl)\n     }\n #endif\n \n-  regno = DBX_REGISTER_NUMBER (regno);\n+  regno = DEBUGGER_REGNO (regno);\n   gcc_assert (regno != INVALID_REGNUM);\n   return regno;\n }\n@@ -14250,10 +14250,10 @@ reg_loc_descriptor (rtx rtl, enum var_init_status initialized)\n     return multiple_reg_loc_descriptor (rtl, regs, initialized);\n   else\n     {\n-      unsigned int dbx_regnum = dbx_reg_number (rtl);\n-      if (dbx_regnum == IGNORED_DWARF_REGNUM)\n+      unsigned int debugger_regnum = debugger_reg_number (rtl);\n+      if (debugger_regnum == IGNORED_DWARF_REGNUM)\n \treturn 0;\n-      return one_reg_loc_descriptor (dbx_regnum, initialized);\n+      return one_reg_loc_descriptor (debugger_regnum, initialized);\n     }\n }\n \n@@ -14302,7 +14302,7 @@ multiple_reg_loc_descriptor (rtx rtl, rtx regs,\n \t}\n #endif\n \n-      gcc_assert ((unsigned) DBX_REGISTER_NUMBER (reg) == dbx_reg_number (rtl));\n+      gcc_assert ((unsigned) DEBUGGER_REGNO (reg) == debugger_reg_number (rtl));\n       nregs = REG_NREGS (rtl);\n \n       /* At present we only track constant-sized pieces.  */\n@@ -14315,7 +14315,7 @@ multiple_reg_loc_descriptor (rtx rtl, rtx regs,\n \t{\n \t  dw_loc_descr_ref t;\n \n-\t  t = one_reg_loc_descriptor (DBX_REGISTER_NUMBER (reg),\n+\t  t = one_reg_loc_descriptor (DEBUGGER_REGNO (reg),\n \t\t\t\t      VAR_INIT_STATUS_INITIALIZED);\n \t  add_loc_descr (&loc_result, t);\n \t  add_loc_descr_op_piece (&loc_result, size);\n@@ -14337,7 +14337,7 @@ multiple_reg_loc_descriptor (rtx rtl, rtx regs,\n     {\n       dw_loc_descr_ref t;\n \n-      t = one_reg_loc_descriptor (dbx_reg_number (XVECEXP (regs, 0, i)),\n+      t = one_reg_loc_descriptor (debugger_reg_number (XVECEXP (regs, 0, i)),\n \t\t\t\t  VAR_INIT_STATUS_INITIALIZED);\n       add_loc_descr (&loc_result, t);\n       add_loc_descr_op_piece (&loc_result, size);\n@@ -15995,7 +15995,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t      ))\n \t{\n \t  dw_die_ref type_die;\n-\t  unsigned int dbx_regnum;\n+\t  unsigned int debugger_regnum;\n \n \t  if (dwarf_strict && dwarf_version < 5)\n \t    break;\n@@ -16005,11 +16005,11 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t  if (type_die == NULL)\n \t    break;\n \n-\t  dbx_regnum = dbx_reg_number (rtl);\n-\t  if (dbx_regnum == IGNORED_DWARF_REGNUM)\n+\t  debugger_regnum = debugger_reg_number (rtl);\n+\t  if (debugger_regnum == IGNORED_DWARF_REGNUM)\n \t    break;\n \t  mem_loc_result = new_loc_descr (dwarf_OP (DW_OP_regval_type),\n-\t\t\t\t\t  dbx_regnum, 0);\n+\t\t\t\t\t  debugger_regnum, 0);\n \t  mem_loc_result->dw_loc_oprnd2.val_class = dw_val_class_die_ref;\n \t  mem_loc_result->dw_loc_oprnd2.v.val_die_ref.die = type_die;\n \t  mem_loc_result->dw_loc_oprnd2.v.val_die_ref.external = 0;\n@@ -16280,10 +16280,10 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t\t\t\t      VOIDmode, VAR_INIT_STATUS_INITIALIZED);\n \t  else\n \t    {\n-              unsigned int dbx_regnum = dbx_reg_number (ENTRY_VALUE_EXP (rtl));\n-\t      if (dbx_regnum == IGNORED_DWARF_REGNUM)\n+\t      unsigned int debugger_regnum = debugger_reg_number (ENTRY_VALUE_EXP (rtl));\n+\t      if (debugger_regnum == IGNORED_DWARF_REGNUM)\n \t\treturn NULL;\n-\t      op0 = one_reg_loc_descriptor (dbx_regnum,\n+\t      op0 = one_reg_loc_descriptor (debugger_regnum,\n \t\t\t\t\t    VAR_INIT_STATUS_INITIALIZED);\n \t    }\n \t}"}, {"sha": "57064cf2533903d0cd9cd7f750c7a2d82e712d04", "filename": "gcc/except.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60bd93e216ae0425f790e1d4f4dc4a48763c0e/gcc%2Fexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.cc?ref=ca60bd93e216ae0425f790e1d4f4dc4a48763c0e", "patch": "@@ -2175,7 +2175,7 @@ expand_builtin_eh_return_data_regno (tree exp)\n #ifdef DWARF_FRAME_REGNUM\n   iwhich = DWARF_FRAME_REGNUM (iwhich);\n #else\n-  iwhich = DBX_REGISTER_NUMBER (iwhich);\n+  iwhich = DEBUGGER_REGNO (iwhich);\n #endif\n \n   return GEN_INT (iwhich);"}]}