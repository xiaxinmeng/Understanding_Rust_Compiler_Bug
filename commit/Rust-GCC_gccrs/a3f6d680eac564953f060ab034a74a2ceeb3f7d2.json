{"sha": "a3f6d680eac564953f060ab034a74a2ceeb3f7d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNmNmQ2ODBlYWM1NjQ5NTNmMDYwYWIwMzRhNzRhMmNlZWIzZjdkMg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2016-03-12T00:10:54Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2016-03-12T00:10:54Z"}, "message": "re PR target/70131 (PowerPC ISA 2.07 is inefficient at doint (float)(int)x.)\n\n[gcc]\n2016-03-11  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/70131\n\t* config/rs6000/rs6000.md (round32<mode>2_fprs): Do not do the\n\toptimization if we have direct move.\n\t(roundu32<mode>2_fprs): Likewise.\n\n[gcc/testsuite]\n2016-03-11  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/70131\n\t* gcc.target/powerpc/ppc-round2.c: New test.\n\nFrom-SVN: r234155", "tree": {"sha": "842f2126f447cf0753ef989e439bb6d932a5f5ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/842f2126f447cf0753ef989e439bb6d932a5f5ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3f6d680eac564953f060ab034a74a2ceeb3f7d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f6d680eac564953f060ab034a74a2ceeb3f7d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3f6d680eac564953f060ab034a74a2ceeb3f7d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f6d680eac564953f060ab034a74a2ceeb3f7d2/comments", "author": null, "committer": null, "parents": [{"sha": "089d955fa06e39ee11ffaca676d18df8a62aca21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/089d955fa06e39ee11ffaca676d18df8a62aca21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/089d955fa06e39ee11ffaca676d18df8a62aca21"}], "stats": {"total": 68, "additions": 62, "deletions": 6}, "files": [{"sha": "6fd40f574368f6fd5f6ec50f62f429268cc27ae2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f6d680eac564953f060ab034a74a2ceeb3f7d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f6d680eac564953f060ab034a74a2ceeb3f7d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3f6d680eac564953f060ab034a74a2ceeb3f7d2", "patch": "@@ -1,3 +1,10 @@\n+2016-03-11  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/70131\n+\t* config/rs6000/rs6000.md (round32<mode>2_fprs): Do not do the\n+\toptimization if we have direct move.\n+\t(roundu32<mode>2_fprs): Likewise.\n+\n 2016-03-11  Bernd Schmidt  <bschmidt@redhat.com>\n \n \tPR target/70123"}, {"sha": "c92c868a6391f4d2c718280ed3b15c6ed2978701", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f6d680eac564953f060ab034a74a2ceeb3f7d2/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f6d680eac564953f060ab034a74a2ceeb3f7d2/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=a3f6d680eac564953f060ab034a74a2ceeb3f7d2", "patch": "@@ -5387,10 +5387,12 @@\n    xsrdpiz %x0,%x1\"\n   [(set_attr \"type\" \"fp\")])\n \n-;; Since FCTIWZ doesn't sign extend the upper bits, we have to do a store and a\n-;; load to properly sign extend the value, but at least doing a store, load\n-;; into a GPR to sign extend, a store from the GPR and a load back into the FPR\n-;; if we have 32-bit memory ops\n+;; Opitmize converting SF/DFmode to signed SImode and back to SF/DFmode.  This\n+;; optimization prevents on ISA 2.06 systems and earlier having to store the\n+;; value from the FPR/vector unit to the stack, load the value into a GPR, sign\n+;; extend it, store it back on the stack from the GPR, load it back into the\n+;; FP/vector unit to do the rounding. If we have direct move (ISA 2.07),\n+;; disable using store and load to sign/zero extend the value.\n (define_insn_and_split \"*round32<mode>2_fprs\"\n   [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=d\")\n \t(float:SFDF\n@@ -5399,7 +5401,7 @@\n    (clobber (match_scratch:DI 3 \"=d\"))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\n    && <SI_CONVERT_FP> && TARGET_LFIWAX && TARGET_STFIWX && TARGET_FCFID\n-   && can_create_pseudo_p ()\"\n+   && !TARGET_DIRECT_MOVE && can_create_pseudo_p ()\"\n   \"#\"\n   \"\"\n   [(pc)]\n@@ -5431,7 +5433,7 @@\n    (clobber (match_scratch:DI 2 \"=d\"))\n    (clobber (match_scratch:DI 3 \"=d\"))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\n-   && TARGET_LFIWZX && TARGET_STFIWX && TARGET_FCFIDU\n+   && TARGET_LFIWZX && TARGET_STFIWX && TARGET_FCFIDU && !TARGET_DIRECT_MOVE\n    && can_create_pseudo_p ()\"\n   \"#\"\n   \"\""}, {"sha": "a2eac07f3ec6590ae3ba5b0b951f351e2a5c11ca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f6d680eac564953f060ab034a74a2ceeb3f7d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f6d680eac564953f060ab034a74a2ceeb3f7d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3f6d680eac564953f060ab034a74a2ceeb3f7d2", "patch": "@@ -1,3 +1,8 @@\n+2016-03-11  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/70131\n+\t* gcc.target/powerpc/ppc-round2.c: New test.\n+\n 2016-03-11  Bernd Schmidt  <bschmidt@redhat.com>\n \n \tPR target/70123"}, {"sha": "39375a0e9d54a7bbed19fa49b0836d71a1d51634", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-round2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f6d680eac564953f060ab034a74a2ceeb3f7d2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-round2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f6d680eac564953f060ab034a74a2ceeb3f7d2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-round2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-round2.c?ref=a3f6d680eac564953f060ab034a74a2ceeb3f7d2", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-O2 -mcpu=power8\" } */\n+/* { dg-final { scan-assembler-times \"fcfid \"      2 } } */\n+/* { dg-final { scan-assembler-times \"fcfids \"     2 } } */\n+/* { dg-final { scan-assembler-times \"fctiwuz \"    2 } } */\n+/* { dg-final { scan-assembler-times \"fctiwz \"     2 } } */\n+/* { dg-final { scan-assembler-times \"mfvsrd \"     4 } } */\n+/* { dg-final { scan-assembler-times \"mtvsrwa \"    2 } } */\n+/* { dg-final { scan-assembler-times \"mtvsrwz \"    2 } } */\n+/* { dg-final { scan-assembler-not   \"lwz\"           } } */\n+/* { dg-final { scan-assembler-not   \"lfiwax \"       } } */\n+/* { dg-final { scan-assembler-not   \"lfiwzx \"       } } */\n+/* { dg-final { scan-assembler-not   \"stw\"           } } */\n+/* { dg-final { scan-assembler-not   \"stfiwx \"       } } */\n+\n+/* Make sure we don't have loads/stores to the GPR unit.  */\n+double\n+round_double_int (double a)\n+{\n+  return (double)(int)a;\n+}\n+\n+float\n+round_float_int (float a)\n+{\n+  return (float)(int)a;\n+}\n+\n+double\n+round_double_uint (double a)\n+{\n+  return (double)(unsigned int)a;\n+}\n+\n+float\n+round_float_uint (float a)\n+{\n+  return (float)(unsigned int)a;\n+}"}]}