{"sha": "a1a5996d9ee2ae55dcc1c4e1bccb0dfb76a64caf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFhNTk5NmQ5ZWUyYWU1NWRjYzFjNGUxYmNjYjBkZmI3NmE2NGNhZg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-01-16T16:00:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-01-16T16:00:17Z"}, "message": "re PR tree-optimization/34769 (gcc.dg/vect/no-vfa-pr29145.c)\n\n2008-01-16  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/34769\n\t* tree-data-ref.c (initialize_matrix_A): Revert fix for PR34458.\n\t* tree.c (int_cst_value): Instead make this function more\n\tpermissive in what it accepts as valid input.  Document this\n\tfunction always sign-extends the value.\n\nFrom-SVN: r131573", "tree": {"sha": "7b576b7515a8cd71afd71de1f0d38d04d85e48a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b576b7515a8cd71afd71de1f0d38d04d85e48a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1a5996d9ee2ae55dcc1c4e1bccb0dfb76a64caf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a5996d9ee2ae55dcc1c4e1bccb0dfb76a64caf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1a5996d9ee2ae55dcc1c4e1bccb0dfb76a64caf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a5996d9ee2ae55dcc1c4e1bccb0dfb76a64caf/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de4af523c5a6790873770f4d1248bedc4dd6e56a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de4af523c5a6790873770f4d1248bedc4dd6e56a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de4af523c5a6790873770f4d1248bedc4dd6e56a"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "2d4f0c78dd4f28a0a9ec7236e2f43cae383e0c0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a5996d9ee2ae55dcc1c4e1bccb0dfb76a64caf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a5996d9ee2ae55dcc1c4e1bccb0dfb76a64caf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1a5996d9ee2ae55dcc1c4e1bccb0dfb76a64caf", "patch": "@@ -1,3 +1,11 @@\n+2008-01-16  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/34769\n+\t* tree-data-ref.c (initialize_matrix_A): Revert fix for PR34458.\n+\t* tree.c (int_cst_value): Instead make this function more\n+\tpermissive in what it accepts as valid input.  Document this\n+\tfunction always sign-extends the value.\n+\n 2008-01-16  Jakub Jelinek  <jakub@redhat.com>\n \tRichard Guenther  <rguenther@suse.de>\n "}, {"sha": "2f17ed1deb4b7fed9594747dd91c0cbe6401beff", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a5996d9ee2ae55dcc1c4e1bccb0dfb76a64caf/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a5996d9ee2ae55dcc1c4e1bccb0dfb76a64caf/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=a1a5996d9ee2ae55dcc1c4e1bccb0dfb76a64caf", "patch": "@@ -1823,21 +1823,12 @@ analyze_siv_subscript_cst_affine (tree chrec_a,\n static HOST_WIDE_INT\n initialize_matrix_A (lambda_matrix A, tree chrec, unsigned index, int mult)\n {\n-  tree type;\n-\n   gcc_assert (chrec);\n \n-  type = TREE_TYPE (chrec);\n   if (TREE_CODE (chrec) != POLYNOMIAL_CHREC)\n-    return tree_low_cst (chrec, TYPE_UNSIGNED (type)\n-\t\t\t\t&& !(TREE_CODE (type) == INTEGER_TYPE\n-\t\t\t\t     && TYPE_IS_SIZETYPE (type)));\n-\n-  type = TREE_TYPE (CHREC_RIGHT (chrec));\n-  A[index][0] = mult * tree_low_cst (CHREC_RIGHT (chrec),\n-\t\t\t\t     TYPE_UNSIGNED (type)\n-\t\t\t\t     && !(TREE_CODE (type) == INTEGER_TYPE\n-\t\t\t\t\t  && TYPE_IS_SIZETYPE (type)));\n+    return int_cst_value (chrec);\n+\n+  A[index][0] = mult * int_cst_value (CHREC_RIGHT (chrec));\n   return initialize_matrix_A (A, CHREC_LEFT (chrec), index + 1, mult);\n }\n "}, {"sha": "21121b27788bf7fe39f35961658a87165b7fa321", "filename": "gcc/tree.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a5996d9ee2ae55dcc1c4e1bccb0dfb76a64caf/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a5996d9ee2ae55dcc1c4e1bccb0dfb76a64caf/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a1a5996d9ee2ae55dcc1c4e1bccb0dfb76a64caf", "patch": "@@ -8036,21 +8036,26 @@ find_compatible_field (tree record, tree orig_field)\n   return orig_field;\n }\n \n-/* Return value of a constant X.  */\n+/* Return value of a constant X and sign-extend it.  */\n \n HOST_WIDE_INT\n int_cst_value (const_tree x)\n {\n   unsigned bits = TYPE_PRECISION (TREE_TYPE (x));\n   unsigned HOST_WIDE_INT val = TREE_INT_CST_LOW (x);\n-  bool negative = ((val >> (bits - 1)) & 1) != 0;\n \n-  gcc_assert (bits <= HOST_BITS_PER_WIDE_INT);\n+  /* Make sure the sign-extended value will fit in a HOST_WIDE_INT.  */\n+  gcc_assert (TREE_INT_CST_HIGH (x) == 0\n+\t      || TREE_INT_CST_HIGH (x) == -1);\n \n-  if (negative)\n-    val |= (~(unsigned HOST_WIDE_INT) 0) << (bits - 1) << 1;\n-  else\n-    val &= ~((~(unsigned HOST_WIDE_INT) 0) << (bits - 1) << 1);\n+  if (bits < HOST_BITS_PER_WIDE_INT)\n+    {\n+      bool negative = ((val >> (bits - 1)) & 1) != 0;\n+      if (negative)\n+\tval |= (~(unsigned HOST_WIDE_INT) 0) << (bits - 1) << 1;\n+      else\n+\tval &= ~((~(unsigned HOST_WIDE_INT) 0) << (bits - 1) << 1);\n+    }\n \n   return val;\n }"}]}