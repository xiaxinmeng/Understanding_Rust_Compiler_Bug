{"sha": "49c3b9a84696a13e3ef71708ef80552606dd08c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDljM2I5YTg0Njk2YTEzZTNlZjcxNzA4ZWY4MDU1MjYwNmRkMDhjNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-01-19T09:31:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-01-19T09:31:16Z"}, "message": "re PR rtl-optimization/15139 (cc1 uses excessive amounts of memory compiling small routine)\n\n\tPR rtl-optimization/15139\n\t* combine.c: Include params.h.\n\t(count_rtxs): New function.\n\t(record_value_for_reg): If replace_rtx would replace at least\n\t2 occurrences of REG in VALUE and TEM is really large, replace REG with\n\t(clobber (const_int 0)) instead of TEM.\n\t* params.def (PARAM_MAX_LAST_VALUE_RTL): New.\n\t* params.h (MAX_LAST_VALUE_RTL): New.\n\t* Makefile.in (combine.o): Depend on $(PARAMS_H).\n\t* doc/invoke.texi (--param max-last-value-rtl=N): Document.\n\n\t* gcc.dg/20050111-2.c: New test.\n\nFrom-SVN: r93892", "tree": {"sha": "ef90a2aa86b89aceaa4c818ff027effc25d5f55e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef90a2aa86b89aceaa4c818ff027effc25d5f55e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49c3b9a84696a13e3ef71708ef80552606dd08c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49c3b9a84696a13e3ef71708ef80552606dd08c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49c3b9a84696a13e3ef71708ef80552606dd08c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49c3b9a84696a13e3ef71708ef80552606dd08c4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e89be13bdf98cff1cbbdd9490e4b4d5e20e68baf"}], "stats": {"total": 99, "additions": 98, "deletions": 1}, "files": [{"sha": "d015dac1dd27a18b6153282a25b7080f9178bf34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c3b9a84696a13e3ef71708ef80552606dd08c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c3b9a84696a13e3ef71708ef80552606dd08c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49c3b9a84696a13e3ef71708ef80552606dd08c4", "patch": "@@ -1,5 +1,16 @@\n 2005-01-19  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR rtl-optimization/15139\n+\t* combine.c: Include params.h.\n+\t(count_rtxs): New function.\n+\t(record_value_for_reg): If replace_rtx would replace at least\n+\t2 occurrences of REG in VALUE and TEM is really large, replace REG with\n+\t(clobber (const_int 0)) instead of TEM.\n+\t* params.def (PARAM_MAX_LAST_VALUE_RTL): New.\n+\t* params.h (MAX_LAST_VALUE_RTL): New.\n+\t* Makefile.in (combine.o): Depend on $(PARAMS_H).\n+\t* doc/invoke.texi (--param max-last-value-rtl=N): Document.\n+\n \tPR c/17297\n \t* c-typeck.c (digest_init): Only call build_vector if all constructor\n \telements are *_CST nodes."}, {"sha": "fb857cf2128dbed0986b25c7a68e5bf4eb8f21e0", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c3b9a84696a13e3ef71708ef80552606dd08c4/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c3b9a84696a13e3ef71708ef80552606dd08c4/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=49c3b9a84696a13e3ef71708ef80552606dd08c4", "patch": "@@ -2046,7 +2046,7 @@ et-forest.o : et-forest.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) et-forest.\n combine.o : combine.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) function.h insn-config.h $(INSN_ATTR_H) $(REGS_H) $(EXPR_H) \\\n    rtlhooks-def.h $(BASIC_BLOCK_H) $(RECOG_H) real.h hard-reg-set.h \\\n-   toplev.h $(TM_P_H) $(TREE_H) $(TARGET_H) output.h\n+   toplev.h $(TM_P_H) $(TREE_H) $(TARGET_H) output.h $(PARAMS_H)\n regclass.o : regclass.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    hard-reg-set.h $(FLAGS_H) $(BASIC_BLOCK_H) $(REGS_H) insn-config.h \\\n    $(RECOG_H) reload.h real.h toplev.h function.h output.h $(GGC_H) \\"}, {"sha": "984c45e10ea6e1dc82c8742003772b0118f73614", "filename": "gcc/combine.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c3b9a84696a13e3ef71708ef80552606dd08c4/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c3b9a84696a13e3ef71708ef80552606dd08c4/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=49c3b9a84696a13e3ef71708ef80552606dd08c4", "patch": "@@ -93,6 +93,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"rtlhooks-def.h\"\n /* Include output.h for dump_file.  */\n #include \"output.h\"\n+#include \"params.h\"\n \n /* Number of attempts to combine instructions in this function.  */\n \n@@ -10733,6 +10734,47 @@ reversed_comparison (rtx exp, enum machine_mode mode, rtx op0, rtx op1)\n     return gen_binary (reversed_code, mode, op0, op1);\n }\n \f\n+/* Utility function for record_value_for_reg.  Count number of\n+   rtxs in X.  */\n+static int\n+count_rtxs (rtx x)\n+{\n+  enum rtx_code code = GET_CODE (x);\n+  const char *fmt;\n+  int i, ret = 1;\n+\n+  if (GET_RTX_CLASS (code) == '2'\n+      || GET_RTX_CLASS (code) == 'c')\n+    {\n+      rtx x0 = XEXP (x, 0);\n+      rtx x1 = XEXP (x, 1);\n+\n+      if (x0 == x1)\n+\treturn 1 + 2 * count_rtxs (x0);\n+\n+      if ((GET_RTX_CLASS (GET_CODE (x1)) == '2'\n+\t   || GET_RTX_CLASS (GET_CODE (x1)) == 'c')\n+\t  && (x0 == XEXP (x1, 0) || x0 == XEXP (x1, 1)))\n+\treturn 2 + 2 * count_rtxs (x0)\n+\t       + count_rtxs (x == XEXP (x1, 0)\n+\t\t\t     ? XEXP (x1, 1) : XEXP (x1, 0));\n+\n+      if ((GET_RTX_CLASS (GET_CODE (x0)) == '2'\n+\t   || GET_RTX_CLASS (GET_CODE (x0)) == 'c')\n+\t  && (x1 == XEXP (x0, 0) || x1 == XEXP (x0, 1)))\n+\treturn 2 + 2 * count_rtxs (x1)\n+\t       + count_rtxs (x == XEXP (x0, 0)\n+\t\t\t     ? XEXP (x0, 1) : XEXP (x0, 0));\n+    }\n+\n+  fmt = GET_RTX_FORMAT (code);\n+  for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n+    if (fmt[i] == 'e')\n+      ret += count_rtxs (XEXP (x, i));\n+\n+  return ret;\n+}\n+\f\n /* Utility function for following routine.  Called when X is part of a value\n    being stored into last_set_value.  Sets last_set_table_tick\n    for each register mentioned.  Similar to mention_regs in cse.c  */\n@@ -10835,6 +10877,13 @@ record_value_for_reg (rtx reg, rtx insn, rtx value)\n \t      && GET_CODE (XEXP (tem, 0)) == CLOBBER\n \t      && GET_CODE (XEXP (tem, 1)) == CLOBBER)\n \t    tem = XEXP (tem, 0);\n+\t  else if (count_occurrences (value, reg, 1) >= 2)\n+\t    {\n+\t      /* If there are two or more occurrences of REG in VALUE,\n+\t\t prevent the value from growing too much.  */\n+\t      if (count_rtxs (tem) > MAX_LAST_VALUE_RTL)\n+\t\ttem = gen_rtx_CLOBBER (GET_MODE (tem), const0_rtx);\n+\t    }\n \n \t  value = replace_rtx (copy_rtx (value), reg, tem);\n \t}"}, {"sha": "7013bb2e29e9c1023bf14821f6709415ddeae224", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c3b9a84696a13e3ef71708ef80552606dd08c4/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c3b9a84696a13e3ef71708ef80552606dd08c4/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=49c3b9a84696a13e3ef71708ef80552606dd08c4", "patch": "@@ -5615,6 +5615,12 @@ interblock scheduling.  The default value is 10.\n The maximum number of insns in a region to be considered for\n interblock scheduling.  The default value is 100.\n \n+@item max-last-value-rtl\n+\n+The maximum size measured as number of RTLs that can be recorded in an expression\n+in combiner for a pseudo register as last known value of that register.  The default\n+is 10000.\n+\n @item integer-share-limit\n Small integer constants can use a shared data structure, reducing the\n compiler's memory usage and increasing its speed.  This sets the maximum"}, {"sha": "3ef5893fd42fb6980232a63ec6375fa0836d8622", "filename": "gcc/params.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c3b9a84696a13e3ef71708ef80552606dd08c4/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c3b9a84696a13e3ef71708ef80552606dd08c4/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=49c3b9a84696a13e3ef71708ef80552606dd08c4", "patch": "@@ -408,6 +408,11 @@ DEFPARAM(PARAM_MAX_SCHED_REGION_INSNS,\n \t \"The maximum number of insns in a region to be considered for interblock scheduling\",\n \t 100, 0, 0)\n \n+DEFPARAM(PARAM_MAX_LAST_VALUE_RTL,\n+\t \"max-last-value-rtl\",\n+\t \"The maximum number of RTL nodes that can be recorded as combiner's last value\",\n+\t 10000, 0, 0)\n+\n /* INTEGER_CST nodes are shared for values [{-1,0} .. N) for\n    {signed,unsigned} integral types.  This determines N.\n    Experimentation shows 256 to be a good value.  */"}, {"sha": "1a668e0deff4a89216a3d42c4be9f516262c7d5e", "filename": "gcc/params.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c3b9a84696a13e3ef71708ef80552606dd08c4/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c3b9a84696a13e3ef71708ef80552606dd08c4/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=49c3b9a84696a13e3ef71708ef80552606dd08c4", "patch": "@@ -135,4 +135,6 @@ typedef enum compiler_param\n   PARAM_VALUE (PARAM_MAX_ALIASED_VOPS)\n #define INTEGER_SHARE_LIMIT \\\n   PARAM_VALUE (PARAM_INTEGER_SHARE_LIMIT)\n+#define MAX_LAST_VALUE_RTL \\\n+  PARAM_VALUE (PARAM_MAX_LAST_VALUE_RTL)\n #endif /* ! GCC_PARAMS_H */"}, {"sha": "e6749d6518cc0d7653d601fd0449dd66c142a6a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c3b9a84696a13e3ef71708ef80552606dd08c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c3b9a84696a13e3ef71708ef80552606dd08c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=49c3b9a84696a13e3ef71708ef80552606dd08c4", "patch": "@@ -1,5 +1,8 @@\n 2005-01-19  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR rtl-optimization/15139\n+\t* gcc.dg/20050111-2.c: New test.\n+\n \tPR c/17297\n \t* gcc.c-torture/compile/20050113-1.c: New testcase.\n "}, {"sha": "17e59ce968c44474ed883d17d3c90e77d09b6e84", "filename": "gcc/testsuite/gcc.dg/20050111-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49c3b9a84696a13e3ef71708ef80552606dd08c4/gcc%2Ftestsuite%2Fgcc.dg%2F20050111-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49c3b9a84696a13e3ef71708ef80552606dd08c4/gcc%2Ftestsuite%2Fgcc.dg%2F20050111-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20050111-2.c?ref=49c3b9a84696a13e3ef71708ef80552606dd08c4", "patch": "@@ -0,0 +1,21 @@\n+/* PR rtl-optimization/15139 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -funroll-loops\" } */\n+\n+void\n+foo (double **a, double **z)\n+{\n+  long int i, j;\n+  double d = -1.0;\n+\n+  for (i = 0; i < 6; i++)\n+    for (j = 0; j < 5; j++)\n+      d = z[i][j] > d ? z[i][j] : d;\n+\n+  for (i = 0; i < 6; i++)\n+    for (j = 0; j < 5; j++)\n+      z[i][j] /= d;\n+\n+  for (i = 0; i < 5; i++)\n+    a[i][j] = z[i][j];\n+}"}]}