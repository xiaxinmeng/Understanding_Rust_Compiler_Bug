{"sha": "ea5212b741b5cc751d0d8271a9666c4ad0b4e799", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE1MjEyYjc0MWI1Y2M3NTFkMGQ4MjcxYTk2NjZjNGFkMGI0ZTc5OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-03-05T08:44:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-03-05T08:44:21Z"}, "message": "re PR tree-optimization/89570 (ICE in prepare_cmp_insn, at optabs.c:4001)\n\n\tPR tree-optimization/89570\n\t* match.pd (vec_cond into cond_op simplification): Guard with\n\tvectorized_internal_fn_supported_p test and #if GIMPLE.\n\n\t* gcc.dg/pr89570.c: New test.\n\nFrom-SVN: r269385", "tree": {"sha": "9cd2d36ebc4d1b17e4ad39f8fc141105320ca083", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cd2d36ebc4d1b17e4ad39f8fc141105320ca083"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea5212b741b5cc751d0d8271a9666c4ad0b4e799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea5212b741b5cc751d0d8271a9666c4ad0b4e799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea5212b741b5cc751d0d8271a9666c4ad0b4e799", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea5212b741b5cc751d0d8271a9666c4ad0b4e799/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d6f7829a1fa2577bac1bd8815acd31730affcb92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6f7829a1fa2577bac1bd8815acd31730affcb92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6f7829a1fa2577bac1bd8815acd31730affcb92"}], "stats": {"total": 54, "additions": 46, "deletions": 8}, "files": [{"sha": "54c736b340be07cd070256abdcdc5001df1d4636", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5212b741b5cc751d0d8271a9666c4ad0b4e799/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5212b741b5cc751d0d8271a9666c4ad0b4e799/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea5212b741b5cc751d0d8271a9666c4ad0b4e799", "patch": "@@ -1,5 +1,9 @@\n 2019-03-05  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/89570\n+\t* match.pd (vec_cond into cond_op simplification): Guard with\n+\tvectorized_internal_fn_supported_p test and #if GIMPLE.\n+\n \tPR tree-optimization/89566\n \t* gimple-ssa-sprintf.c (sprintf_dom_walker::handle_gimple_call):\n \tSet info.fncode to BUILT_IN_NONE if gimple_call_builtin_p failed."}, {"sha": "8bf653549de2d0e4c9e9b59edd82b9f708df9dcf", "filename": "gcc/match.pd", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5212b741b5cc751d0d8271a9666c4ad0b4e799/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5212b741b5cc751d0d8271a9666c4ad0b4e799/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=ea5212b741b5cc751d0d8271a9666c4ad0b4e799", "patch": "@@ -5177,33 +5177,49 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    if the target can do it in one go.  This makes the operation conditional\n    on c, so could drop potentially-trapping arithmetic, but that's a valid\n    simplification if the result of the operation isn't needed.  */\n+#if GIMPLE\n (for uncond_op (UNCOND_BINARY)\n      cond_op (COND_BINARY)\n  (simplify\n   (vec_cond @0 (view_convert? (uncond_op@4 @1 @2)) @3)\n-  (with { tree op_type = TREE_TYPE (@4); }\n-   (if (element_precision (type) == element_precision (op_type))\n+  (with { tree op_type = TREE_TYPE (@4); \n+\t  internal_fn cond_fn = get_conditional_internal_fn (uncond_op); }\n+   (if (cond_fn != IFN_LAST\n+\t&& vectorized_internal_fn_supported_p (cond_fn, op_type)\n+\t&& element_precision (type) == element_precision (op_type))\n     (view_convert (cond_op @0 @1 @2 (view_convert:op_type @3))))))\n  (simplify\n   (vec_cond @0 @1 (view_convert? (uncond_op@4 @2 @3)))\n-  (with { tree op_type = TREE_TYPE (@4); }\n-   (if (element_precision (type) == element_precision (op_type))\n+  (with { tree op_type = TREE_TYPE (@4);\n+\t  internal_fn cond_fn = get_conditional_internal_fn (uncond_op); }\n+   (if (cond_fn != IFN_LAST\n+\t&& vectorized_internal_fn_supported_p (cond_fn, op_type)\n+\t&& element_precision (type) == element_precision (op_type))\n     (view_convert (cond_op (bit_not @0) @2 @3 (view_convert:op_type @1)))))))\n \n /* Same for ternary operations.  */\n (for uncond_op (UNCOND_TERNARY)\n      cond_op (COND_TERNARY)\n  (simplify\n   (vec_cond @0 (view_convert? (uncond_op@5 @1 @2 @3)) @4)\n-  (with { tree op_type = TREE_TYPE (@5); }\n-   (if (element_precision (type) == element_precision (op_type))\n+  (with { tree op_type = TREE_TYPE (@5);\n+\t  internal_fn cond_fn\n+\t    = get_conditional_internal_fn (as_internal_fn (uncond_op)); }\n+   (if (cond_fn != IFN_LAST\n+\t&& vectorized_internal_fn_supported_p (cond_fn, op_type)\n+\t&& element_precision (type) == element_precision (op_type))\n     (view_convert (cond_op @0 @1 @2 @3 (view_convert:op_type @4))))))\n  (simplify\n   (vec_cond @0 @1 (view_convert? (uncond_op@5 @2 @3 @4)))\n-  (with { tree op_type = TREE_TYPE (@5); }\n-   (if (element_precision (type) == element_precision (op_type))\n+  (with { tree op_type = TREE_TYPE (@5);\n+\t  internal_fn cond_fn\n+\t    = get_conditional_internal_fn (as_internal_fn (uncond_op)); }\n+   (if (cond_fn != IFN_LAST\n+\t&& vectorized_internal_fn_supported_p (cond_fn, op_type)\n+\t&& element_precision (type) == element_precision (op_type))\n     (view_convert (cond_op (bit_not @0) @2 @3 @4\n \t\t  (view_convert:op_type @1)))))))\n+#endif\n \n /* Detect cases in which a VEC_COND_EXPR effectively replaces the\n    \"else\" value of an IFN_COND_*.  */"}, {"sha": "f9d770c96f15a811adac1e981078ed2add2984d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5212b741b5cc751d0d8271a9666c4ad0b4e799/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5212b741b5cc751d0d8271a9666c4ad0b4e799/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea5212b741b5cc751d0d8271a9666c4ad0b4e799", "patch": "@@ -1,5 +1,8 @@\n 2019-03-05  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/89570\n+\t* gcc.dg/pr89570.c: New test.\n+\n \tPR tree-optimization/89566\n \t* c-c++-common/pr89566.c: New test.\n "}, {"sha": "cae5a25c7a6123789e11083998cd4e32495763fa", "filename": "gcc/testsuite/gcc.dg/pr89570.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5212b741b5cc751d0d8271a9666c4ad0b4e799/gcc%2Ftestsuite%2Fgcc.dg%2Fpr89570.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5212b741b5cc751d0d8271a9666c4ad0b4e799/gcc%2Ftestsuite%2Fgcc.dg%2Fpr89570.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr89570.c?ref=ea5212b741b5cc751d0d8271a9666c4ad0b4e799", "patch": "@@ -0,0 +1,15 @@\n+/* PR tree-optimization/89570 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ftree-vectorize -fno-trapping-math -fno-tree-dce -fno-tree-dominator-opts\" } */\n+/* { dg-additional-options \"-mvsx\" { target powerpc_vsx_ok } } */\n+\n+void\n+foo (double *x, double *y, double *z)\n+{\n+  int i;\n+  for (i = 0; i < 7; i += 2)\n+    {\n+      x[i] = y[i] ? z[i] / 2.0 : z[i];\n+      x[i + 1] = y[i + 1] ? z[i + 1] / 2.0 : z[i + 1];\n+    }\n+}"}]}