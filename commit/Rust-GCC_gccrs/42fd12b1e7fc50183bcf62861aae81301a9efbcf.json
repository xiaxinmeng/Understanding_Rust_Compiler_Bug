{"sha": "42fd12b1e7fc50183bcf62861aae81301a9efbcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJmZDEyYjFlN2ZjNTAxODNiY2Y2Mjg2MWFhZTgxMzAxYTllZmJjZg==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2014-11-10T15:53:12Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2014-11-10T15:53:12Z"}, "message": "cpplib.h (cpp_callbacks): Add has_attribute.\n\nlibcpp:\n\n2014-11-10  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\t* include/cpplib.h (cpp_callbacks): Add has_attribute.\n\t* internal.h (lexer_state): Add in__has_attribute__.\n\t* directives.c (lex_macro_node): Prevent use of __has_attribute__\n\tas a macro.\n\t* expr.c (parse_has_attribute): New function; (eval_token): Look for\n\t__has_attribute__ and route to parse_has_attribute.\n\t* identifiers.c (_cpp_init_hashtable): Initialize n__has_attribute__.\n\t* pch.c (cpp_read_state): Initialize n__has_attribute__.\n\t* traditional.c (enum ls): Add ls_has_attribute, ls_has_attribute_close;\n\t(_cpp_scan_out_logical_line): Attend to __has_attribute__.\n\n\ngcc/c-family:\n\n2014-11-10  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\t* c-cppbuiltin.c (__has_attribute, __has_cpp_attribute): New macros;\n\t(__cpp_rtti, __cpp_exceptions): New macros for C++98;\n\t(__cpp_range_based_for, __cpp_initializer_lists,\n\t__cpp_delegating_constructors, __cpp_nsdmi,\n\t__cpp_inheriting_constructors, __cpp_ref_qualifiers): New macros\n\tfor C++11; (__cpp_attribute_deprecated): Remove in favor of\n\t__has_cpp_attribute.\n\t* c-lex.c (cb_has_attribute): New callback CPP function;\n\t(init_c_lex): Set has_attribute callback.\n\n\ngcc/testsuite:\n\n2014-11-10  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\t* g++.dg/cpp1y/feat-cxx11.C: Test new feature macros for C++98\n\tand C++11; Test existence of __has_cpp_attribute;  Test C++11\n\tattributes.\n\t* g++.dg/cpp1y/feat-cxx11-neg.C: Ditto.\n\t* g++.dg/cpp1y/feat-cxx14.C: Ditto and test for C++14 attributes.\n\t* g++.dg/cpp1y/feat-cxx98.C: Test new feature macros for C++98.\n\t* g++.dg/cpp1y/feat-cxx98-neg.C: Ditto.\n\t* g++.dg/cpp1y/feat-neg.C: Test that __cpp_rtti, _cpp_exceptions\n\twill be undefined for -fno-rtti -fno-exceptions.\n\nFrom-SVN: r217292", "tree": {"sha": "cdf2ab35de7a1da1bcda63af97f127dea644c2ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdf2ab35de7a1da1bcda63af97f127dea644c2ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42fd12b1e7fc50183bcf62861aae81301a9efbcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42fd12b1e7fc50183bcf62861aae81301a9efbcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42fd12b1e7fc50183bcf62861aae81301a9efbcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42fd12b1e7fc50183bcf62861aae81301a9efbcf/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d64f20c8d50ce563f7b709593ac1229f2146c61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d64f20c8d50ce563f7b709593ac1229f2146c61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d64f20c8d50ce563f7b709593ac1229f2146c61"}], "stats": {"total": 447, "additions": 424, "deletions": 23}, "files": [{"sha": "f2295ed63985d099a7262944e0840a1f19fd3d4c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fd12b1e7fc50183bcf62861aae81301a9efbcf/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fd12b1e7fc50183bcf62861aae81301a9efbcf/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=42fd12b1e7fc50183bcf62861aae81301a9efbcf", "patch": "@@ -1,3 +1,15 @@\n+2014-11-10  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* c-cppbuiltin.c (__has_attribute, __has_cpp_attribute): New macros;\n+\t(__cpp_rtti, __cpp_exceptions): New macros for C++98;\n+\t(__cpp_range_based_for, __cpp_initializer_lists,\n+\t__cpp_delegating_constructors, __cpp_nsdmi,\n+\t__cpp_inheriting_constructors, __cpp_ref_qualifiers): New macros\n+\tfor C++11; (__cpp_attribute_deprecated): Remove in favor of\n+\t__has_cpp_attribute.\n+\t* c-lex.c (cb_has_attribute): New callback CPP function;\n+\t(init_c_lex): Set has_attribute callback.\n+\n 2014-11-04  Richard Biener  <rguenther@suse.de>\n \n \t* c-common.c (shorten_compare): Do not shorten mixed"}, {"sha": "a4ed5c62ba7243eaa9c50927ff261a2762087058", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fd12b1e7fc50183bcf62861aae81301a9efbcf/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fd12b1e7fc50183bcf62861aae81301a9efbcf/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=42fd12b1e7fc50183bcf62861aae81301a9efbcf", "patch": "@@ -790,11 +790,16 @@ c_cpp_builtins (cpp_reader *pfile)\n   c_stddef_cpp_builtins ();\n \n   /* Set include test macros for all C/C++ (not for just C++11 etc.)\n-     the builtins __has_include__ and __has_include_next__ are defined\n+     The builtins __has_include__ and __has_include_next__ are defined\n      in libcpp.  */\n   cpp_define (pfile, \"__has_include(STR)=__has_include__(STR)\");\n   cpp_define (pfile, \"__has_include_next(STR)=__has_include_next__(STR)\");\n \n+  /* Set attribute test macros for all C/C++ (not for just C++11 etc.)\n+     The builtin __has_attribute__ is defined in libcpp.  */\n+  cpp_define (pfile, \"__has_attribute(STR)=__has_attribute__(STR)\");\n+  cpp_define (pfile, \"__has_cpp_attribute(STR)=__has_attribute__(STR)\");\n+\n   if (c_dialect_cxx ())\n     {\n       if (flag_weak && SUPPORTS_ONE_ONLY)\n@@ -806,7 +811,10 @@ c_cpp_builtins (cpp_reader *pfile)\n \tcpp_define (pfile, \"__DEPRECATED\");\n \n       if (flag_rtti)\n-\tcpp_define (pfile, \"__GXX_RTTI\");\n+\t{\n+\t  cpp_define (pfile, \"__GXX_RTTI\");\n+\t  cpp_define (pfile, \"__cpp_rtti=199711\");\n+\t}\n \n       if (cxx_dialect >= cxx11)\n         cpp_define (pfile, \"__GXX_EXPERIMENTAL_CXX0X__\");\n@@ -824,13 +832,18 @@ c_cpp_builtins (cpp_reader *pfile)\n \t  cpp_define (pfile, \"__cpp_user_defined_literals=200809\");\n \t  cpp_define (pfile, \"__cpp_lambdas=200907\");\n \t  cpp_define (pfile, \"__cpp_constexpr=200704\");\n+\t  cpp_define (pfile, \"__cpp_range_based_for=200907\");\n \t  cpp_define (pfile, \"__cpp_static_assert=200410\");\n \t  cpp_define (pfile, \"__cpp_decltype=200707\");\n \t  cpp_define (pfile, \"__cpp_attributes=200809\");\n \t  cpp_define (pfile, \"__cpp_rvalue_reference=200610\");\n \t  cpp_define (pfile, \"__cpp_variadic_templates=200704\");\n+\t  cpp_define (pfile, \"__cpp_initializer_lists=200806\");\n+\t  cpp_define (pfile, \"__cpp_delegating_constructors=200604\");\n+\t  cpp_define (pfile, \"__cpp_nsdmi=200809\");\n+\t  cpp_define (pfile, \"__cpp_inheriting_constructors=200802\");\n+\t  cpp_define (pfile, \"__cpp_ref_qualifiers=200710\");\n \t  cpp_define (pfile, \"__cpp_alias_templates=200704\");\n-\t  cpp_define (pfile, \"__cpp_attribute_deprecated=201309\");\n \t}\n       if (cxx_dialect > cxx11)\n \t{\n@@ -853,7 +866,11 @@ c_cpp_builtins (cpp_reader *pfile)\n   /* Note that we define this for C as well, so that we know if\n      __attribute__((cleanup)) will interface with EH.  */\n   if (flag_exceptions)\n-    cpp_define (pfile, \"__EXCEPTIONS\");\n+    {\n+      cpp_define (pfile, \"__EXCEPTIONS\");\n+      if (c_dialect_cxx ())\n+\tcpp_define (pfile, \"__cpp_exceptions=199711\");\n+    }\n \n   /* Represents the C++ ABI version, always defined so it can be used while\n      preprocessing C and assembler.  */"}, {"sha": "357d1370c9e7f20b63e9e9393324a1158f755542", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fd12b1e7fc50183bcf62861aae81301a9efbcf/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fd12b1e7fc50183bcf62861aae81301a9efbcf/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=42fd12b1e7fc50183bcf62861aae81301a9efbcf", "patch": "@@ -37,6 +37,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"wide-int.h\"\n \n+#include \"attribs.h\"\n+\n /* We may keep statistics about how long which files took to compile.  */\n static int header_time, body_time;\n static splay_tree file_info_tree;\n@@ -62,6 +64,7 @@ static void cb_ident (cpp_reader *, unsigned int, const cpp_string *);\n static void cb_def_pragma (cpp_reader *, unsigned int);\n static void cb_define (cpp_reader *, unsigned int, cpp_hashnode *);\n static void cb_undef (cpp_reader *, unsigned int, cpp_hashnode *);\n+static int cb_has_attribute (cpp_reader *);\n \f\n void\n init_c_lex (void)\n@@ -86,6 +89,7 @@ init_c_lex (void)\n   cb->def_pragma = cb_def_pragma;\n   cb->valid_pch = c_common_valid_pch;\n   cb->read_pch = c_common_read_pch;\n+  cb->has_attribute = cb_has_attribute;\n \n   /* Set the debug callbacks if we can use them.  */\n   if ((debug_info_level == DINFO_LEVEL_VERBOSE\n@@ -283,6 +287,75 @@ cb_undef (cpp_reader * ARG_UNUSED (pfile), source_location loc,\n   (*debug_hooks->undef) (SOURCE_LINE (map, loc),\n \t\t\t (const char *) NODE_NAME (node));\n }\n+\n+/* Callback for has_attribute.  */\n+static int\n+cb_has_attribute (cpp_reader *pfile)\n+{\n+  int result = 0;\n+  bool paren = false;\n+  tree attr_ns = NULL_TREE, attr_id = NULL_TREE, attr_name = NULL_TREE;\n+  const cpp_token *token;\n+\n+  token = cpp_get_token (pfile);\n+  if (token->type == CPP_OPEN_PAREN)\n+    {\n+      paren = true;\n+      token = cpp_get_token (pfile);\n+    }\n+\n+  if (token->type == CPP_NAME)\n+    {\n+      //node = token->val.node.node;\n+      const cpp_token *nxt_token = cpp_peek_token (pfile, 0);\n+      if (c_dialect_cxx() && nxt_token->type == CPP_SCOPE)\n+\t{\n+\t  nxt_token = cpp_get_token (pfile); // Eat scope.\n+\t  nxt_token = cpp_get_token (pfile);\n+\t  if (nxt_token->type == CPP_NAME)\n+\t    {\n+\t      attr_ns = get_identifier (\n+\t\t\t(const char *) cpp_token_as_text (pfile, token));\n+\t      attr_id = get_identifier (\n+\t\t\t(const char *) cpp_token_as_text (pfile, nxt_token));\n+\t      attr_name = build_tree_list (attr_ns, attr_id);\n+\t    }\n+\t  else\n+\t    cpp_error (pfile, CPP_DL_ERROR,\n+\t\t       \"attribute identifier required after scope\");\n+\t}\n+      else\n+\t{\n+\t  attr_ns = get_identifier (\"gnu\");\n+\t  attr_id = get_identifier (\n+\t\t    (const char *) cpp_token_as_text (pfile, token));\n+\t  attr_name = build_tree_list (attr_ns, attr_id);\n+\t}\n+      if (attr_name)\n+\t{\n+\t  const struct attribute_spec *attr = lookup_attribute_spec (attr_name);\n+\t  if (attr)\n+\t    {\n+\t      if (is_attribute_p (\"noreturn\", TREE_VALUE (attr_name)))\n+\t\tresult = 200809;\n+\t      else if (is_attribute_p (\"deprecated\", TREE_VALUE (attr_name)))\n+\t\tresult = 201309;\n+\t      else\n+\t\tresult = 1;\n+\t    }\n+\t}\n+    }\n+  else\n+    cpp_error (pfile, CPP_DL_ERROR,\n+\t       \"operator \\\"__has_attribute__\\\" requires an identifier\");\n+\n+  if (paren && cpp_get_token (pfile)->type != CPP_CLOSE_PAREN)\n+    cpp_error (pfile, CPP_DL_ERROR,\n+\t       \"missing ')' after \\\"__has_attribute__\\\"\");\n+\n+  return result;\n+}\n+\n \f\n /* Read a token and return its type.  Fill *VALUE with its value, if\n    applicable.  Fill *CPP_FLAGS with the token's flags, if it is"}, {"sha": "4c96eb6f7a0bef8eedfd72f37811070a338e3955", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fd12b1e7fc50183bcf62861aae81301a9efbcf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fd12b1e7fc50183bcf62861aae81301a9efbcf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=42fd12b1e7fc50183bcf62861aae81301a9efbcf", "patch": "@@ -1,3 +1,15 @@\n+2014-11-10  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* g++.dg/cpp1y/feat-cxx11.C: Test new feature macros for C++98\n+\tand C++11; Test existence of __has_cpp_attribute;  Test C++11\n+\tattributes.\n+\t* g++.dg/cpp1y/feat-cxx11-neg.C: Ditto.\n+\t* g++.dg/cpp1y/feat-cxx14.C: Ditto and test for C++14 attributes.\n+\t* g++.dg/cpp1y/feat-cxx98.C: Test new feature macros for C++98.\n+\t* g++.dg/cpp1y/feat-cxx98-neg.C: Ditto.\n+\t* g++.dg/cpp1y/feat-neg.C: Test that __cpp_rtti, _cpp_exceptions\n+\twill be undefined for -fno-rtti -fno-exceptions.\n+\n 2014-11-10  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/63800"}, {"sha": "a5b41f4d67d7d67172d6fcf01b931e6775b79054", "filename": "gcc/testsuite/g++.dg/cpp1y/feat-cxx11-neg.C", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fd12b1e7fc50183bcf62861aae81301a9efbcf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx11-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fd12b1e7fc50183bcf62861aae81301a9efbcf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx11-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx11-neg.C?ref=42fd12b1e7fc50183bcf62861aae81301a9efbcf", "patch": "@@ -41,9 +41,13 @@\n #  error \"__cpp_runtime_arrays\" // { dg-error \"error\" }\n #endif\n \n-//  Attribute checks:\n+//  C++14 attributes:\n \n //  Attribute [[deprecated]] is allowed in C++11 as an extension (with pedwarn).\n-//#ifndef __cpp_attribute_deprecated\n-//#  error \"__cpp_attribute_deprecated\"\n+//#ifdef __has_cpp_attribute\n+//#  if __has_cpp_attribute(deprecated) == 201309\n+//#    error \"__has_cpp_attribute(deprecated)\" // {  }\n+//#  endif\n+//#else\n+//#  error \"__has_cpp_attribute\"\n //#endif"}, {"sha": "3d02e237a460570e861a5908f546ace7cc59987a", "filename": "gcc/testsuite/g++.dg/cpp1y/feat-cxx11.C", "status": "modified", "additions": 82, "deletions": 5, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fd12b1e7fc50183bcf62861aae81301a9efbcf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fd12b1e7fc50183bcf62861aae81301a9efbcf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx11.C?ref=42fd12b1e7fc50183bcf62861aae81301a9efbcf", "patch": "@@ -1,6 +1,20 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++11\" }\n \n+//  C++98 features:\n+\n+#ifndef __cpp_rtti\n+#  error \"__cpp_rtti\"\n+#elif  __cpp_rtti != 199711\n+#  error \"__cpp_rtti != 199711\"\n+#endif\n+\n+#ifndef __cpp_exceptions\n+#  error \"__cpp_exceptions\"\n+#elif  __cpp_exceptions != 199711\n+#  error \"__cpp_exceptions != 199711\"\n+#endif\n+\n //  C++11 features:\n \n #ifndef __cpp_unicode_characters\n@@ -39,6 +53,12 @@\n #  error \"__cpp_constexpr != 200704\"\n #endif\n \n+#ifndef __cpp_range_based_for\n+#  error \"__cpp_range_based_for\"\n+#elif __cpp_range_based_for != 200907\n+#  error \"__cpp_range_based_for != 200907\"\n+#endif\n+\n #ifndef __cpp_static_assert\n #  error \"__cpp_static_assert\"\n #elif __cpp_static_assert != 200410\n@@ -69,6 +89,36 @@\n #  error \"__cpp_variadic_templates != 200704\"\n #endif\n \n+#ifndef __cpp_initializer_lists\n+#  error \"__cpp_initializer_lists\"\n+#elif __cpp_initializer_lists != 200806\n+#  error \"__cpp_initializer_lists != 200806\"\n+#endif\n+\n+#ifndef __cpp_delegating_constructors\n+#  error \"__cpp_delegating_constructors\"\n+#elif __cpp_delegating_constructors != 200604\n+#  error \"__cpp_delegating_constructors != 200604\"\n+#endif\n+\n+#ifndef __cpp_nsdmi\n+#  error \"__cpp_nsdmi\"\n+#elif __cpp_nsdmi != 200809\n+#  error \"__cpp_nsdmi != 200809\"\n+#endif\n+\n+#ifndef __cpp_inheriting_constructors\n+#  error \"__cpp_inheriting_constructors\"\n+#elif  __cpp_inheriting_constructors!= 200802\n+#  error \"__cpp_inheriting_constructors != 200802\"\n+#endif\n+\n+#ifndef __cpp_ref_qualifiers\n+#  error \"__cpp_ref_qualifiers\"\n+#elif __cpp_ref_qualifiers != 200710\n+#  error \"__cpp_ref_qualifiers != 200710\"\n+#endif\n+\n #ifndef __cpp_alias_templates\n #  error \"__cpp_alias_templates\"\n #elif __cpp_alias_templates != 200704\n@@ -83,11 +133,38 @@\n #  error \"__cpp_binary_literals != 201304\"\n #endif\n \n-//  Attribute checks:\n+//  C++11 attributes:\n+\n+#ifdef __has_cpp_attribute\n+#  if ! __has_cpp_attribute(noreturn)\n+#    error \"__has_cpp_attribute(noreturn)\"\n+#  elif __has_cpp_attribute(noreturn) != 200809\n+#    error \"__has_cpp_attribute(noreturn) != 200809\"\n+#  endif\n+#else\n+#  error \"__has_cpp_attribute\"\n+#endif\n+\n+#ifdef __has_cpp_attribute\n+//  Attribute carries_dependency not in yet.\n+//#  if ! __has_cpp_attribute(carries_dependency)\n+//#    error \"__has_cpp_attribute(carries_dependency)\"\n+//#  elif __has_cpp_attribute(carries_dependency) != 200809\n+//#    error \"__has_cpp_attribute(carries_dependency) != 200809\"\n+//#  endif\n+#else\n+#  error \"__has_cpp_attribute\"\n+#endif\n+\n+//  C++14 attributes:\n \n //  Attribute [[deprecated]] is allowed in C++11 as an extension (with pedwarn).\n-#ifndef __cpp_attribute_deprecated\n-#  error \"__cpp_attribute_deprecated\"\n-#elif __cpp_attribute_deprecated != 201309\n-#  error \"__cpp_attribute_deprecated != 201309\"\n+#ifdef __has_cpp_attribute\n+#  if ! __has_cpp_attribute(deprecated)\n+#    error \"__has_cpp_attribute(deprecated)\"\n+#  elif __has_cpp_attribute(deprecated) != 201309\n+#    error \"__has_cpp_attribute(deprecated) != 201309\"\n+#  endif\n+#else\n+#  error \"__has_cpp_attribute\"\n #endif"}, {"sha": "74748cbf9f4a176243d68bba0499bfd76d899c83", "filename": "gcc/testsuite/g++.dg/cpp1y/feat-cxx14.C", "status": "modified", "additions": 82, "deletions": 5, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fd12b1e7fc50183bcf62861aae81301a9efbcf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fd12b1e7fc50183bcf62861aae81301a9efbcf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx14.C?ref=42fd12b1e7fc50183bcf62861aae81301a9efbcf", "patch": "@@ -1,6 +1,20 @@\n // { dg-do compile { target c++14 } }\n // { dg-options \"-I${srcdir}/g++.dg/cpp1y -I${srcdir}/g++.dg/cpp1y/testinc\" }\n \n+//  C++98 features:\n+\n+#ifndef __cpp_rtti\n+#  error \"__cpp_rtti\"\n+#elif  __cpp_rtti != 199711\n+#  error \"__cpp_rtti != 199711\"\n+#endif\n+\n+#ifndef __cpp_exceptions\n+#  error \"__cpp_exceptions\"\n+#elif  __cpp_exceptions != 199711\n+#  error \"__cpp_exceptions != 199711\"\n+#endif\n+\n //  C++11 features:\n \n #ifndef __cpp_unicode_characters\n@@ -39,6 +53,12 @@\n #  error \"__cpp_constexpr != 200704\"\n #endif\n \n+#ifndef __cpp_range_based_for\n+#  error \"__cpp_range_based_for\"\n+#elif __cpp_range_based_for != 200907\n+#  error \"__cpp_range_based_for != 200907\"\n+#endif\n+\n #ifndef __cpp_static_assert\n #  error \"__cpp_static_assert\"\n #elif __cpp_static_assert != 200410\n@@ -69,6 +89,36 @@\n #  error \"__cpp_variadic_templates != 200704\"\n #endif\n \n+#ifndef __cpp_initializer_lists\n+#  error \"__cpp_initializer_lists\"\n+#elif __cpp_initializer_lists != 200806\n+#  error \"__cpp_initializer_lists != 200806\"\n+#endif\n+\n+#ifndef __cpp_delegating_constructors\n+#  error \"__cpp_delegating_constructors\"\n+#elif __cpp_delegating_constructors != 200604\n+#  error \"__cpp_delegating_constructors != 200604\"\n+#endif\n+\n+#ifndef __cpp_nsdmi\n+#  error \"__cpp_nsdmi\"\n+#elif __cpp_nsdmi != 200809\n+#  error \"__cpp_nsdmi != 200809\"\n+#endif\n+\n+#ifndef __cpp_inheriting_constructors\n+#  error \"__cpp_inheriting_constructors\"\n+#elif  __cpp_inheriting_constructors!= 200802\n+#  error \"__cpp_inheriting_constructors != 200802\"\n+#endif\n+\n+#ifndef __cpp_ref_qualifiers\n+#  error \"__cpp_ref_qualifiers\"\n+#elif __cpp_ref_qualifiers != 200710\n+#  error \"__cpp_ref_qualifiers != 200710\"\n+#endif\n+\n #ifndef __cpp_alias_templates\n #  error \"__cpp_alias_templates\"\n #elif __cpp_alias_templates != 200704\n@@ -145,12 +195,39 @@\n #  error \"__cpp_runtime_arrays != 201304\"\n #endif\n \n-//  Attribute checks:\n+//  C++11 attributes:\n \n-#ifndef __cpp_attribute_deprecated\n-#  error \"__cpp_attribute_deprecated\"\n-#elif __cpp_attribute_deprecated != 201309\n-#  error \"__cpp_attribute_deprecated != 201309\"\n+#ifdef __has_cpp_attribute\n+#  if ! __has_cpp_attribute(noreturn)\n+#    error \"__has_cpp_attribute(noreturn)\"\n+#  elif __has_cpp_attribute(noreturn) != 200809\n+#    error \"__has_cpp_attribute(noreturn) != 200809\"\n+#  endif\n+#else\n+#  error \"__has_cpp_attribute\"\n+#endif\n+\n+//  Attribute carries_dependency not in yet.\n+//#ifdef __has_cpp_attribute\n+//#  if ! __has_cpp_attribute(carries_dependency)\n+//#    error \"__has_cpp_attribute(carries_dependency)\"\n+//#  elif __has_cpp_attribute(carries_dependency) != 200809\n+//#    error \"__has_cpp_attribute(carries_dependency) != 200809\"\n+//#  endif\n+//#else\n+//#  error \"__has_cpp_attribute\"\n+//#endif\n+\n+//  C++14 attributes:\n+\n+#ifdef __has_cpp_attribute\n+#  if ! __has_cpp_attribute(deprecated)\n+#    error \"__has_cpp_attribute(deprecated)\"\n+#  elif __has_cpp_attribute(deprecated) != 201309\n+#    error \"__has_cpp_attribute(deprecated) != 201309\"\n+#  endif\n+#else\n+#  error \"__has_cpp_attribute\"\n #endif\n \n //  Include checks:"}, {"sha": "e25cac3b130f719985bf19806fddd69b215a2a82", "filename": "gcc/testsuite/g++.dg/cpp1y/feat-cxx98-neg.C", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fd12b1e7fc50183bcf62861aae81301a9efbcf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx98-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fd12b1e7fc50183bcf62861aae81301a9efbcf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx98-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx98-neg.C?ref=42fd12b1e7fc50183bcf62861aae81301a9efbcf", "patch": "@@ -51,6 +51,26 @@\n #  error \"__cpp_variadic_templates\" // { dg-error \"error\" }\n #endif\n \n+#ifndef __cpp_initializer_lists\n+#  error \"__cpp_initializer_lists\" // { dg-error \"error\" }\n+#endif\n+\n+#ifndef __cpp_delegating_constructors\n+#  error \"__cpp_delegating_constructors\" // { dg-error \"error\" }\n+#endif\n+\n+#ifndef __cpp_nsdmi\n+#  error \"__cpp_nsdmi\" // { dg-error \"error\" }\n+#endif\n+\n+#ifndef __cpp_inheriting_constructors\n+#  error \"__cpp_inheriting_constructors\" // { dg-error \"error\" }\n+#endif\n+\n+#ifndef __cpp_ref_qualifiers\n+#  error \"__cpp_ref_qualifiers\" // { dg-error \"error\" }\n+#endif\n+\n #ifndef __cpp_alias_templates\n #  error \"__cpp_alias_templates\" // { dg-error \"error\" }\n #endif\n@@ -95,8 +115,32 @@\n //#  error \"__cpp_sized_deallocation\"\n //#endif\n \n-//  Attribute checks:\n+//  C++11 attributes:\n \n-#ifndef __cpp_attribute_deprecated\n-#  error \"__cpp_attribute_deprecated\" // { dg-error \"error\" }\n+#ifdef __has_cpp_attribute\n+#  if __has_cpp_attribute(noreturn) == 200809\n+#    error \"__has_cpp_attribute(noreturn) == 200809\" // { dg-error \"error\" }\n+#  endif\n+#else\n+#  error \"__has_cpp_attribute\"\n #endif\n+\n+//  Attribute carries_dependency not in yet.\n+//#ifdef __has_cpp_attribute\n+//#  if __has_cpp_attribute(carries_dependency) == 200809\n+//#    error \"__has_cpp_attribute(carries_dependency) == 200809\" // {  }\n+//#  endif\n+//#else\n+//#  error \"__has_cpp_attribute\"\n+//#endif\n+\n+//  C++14 attributes:\n+\n+//  Attribute [[deprecated]] is allowed in C++11 as an extension (with pedwarn).\n+//#ifdef __has_cpp_attribute\n+//#  if __has_cpp_attribute(deprecated) == 201309\n+//#    error \"__has_cpp_attribute(deprecated)\" // {  }\n+//#  endif\n+//#else\n+//#  error \"__has_cpp_attribute\"\n+//#endif"}, {"sha": "dce7029f258ffb0692af48a2017e72acb9d71b40", "filename": "gcc/testsuite/g++.dg/cpp1y/feat-cxx98.C", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fd12b1e7fc50183bcf62861aae81301a9efbcf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx98.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fd12b1e7fc50183bcf62861aae81301a9efbcf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx98.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx98.C?ref=42fd12b1e7fc50183bcf62861aae81301a9efbcf", "patch": "@@ -1,6 +1,20 @@\n // { dg-do compile { target c++98_only } }\n // { dg-options \"\" }\n \n+//  C++98 features:\n+\n+#ifndef __cpp_rtti\n+#  error \"__cpp_rtti\"\n+#elif  __cpp_rtti != 199711\n+#  error \"__cpp_rtti != 199711\"\n+#endif\n+\n+#ifndef __cpp_exceptions\n+#  error \"__cpp_exceptions\"\n+#elif  __cpp_exceptions != 199711\n+#  error \"__cpp_exceptions != 199711\"\n+#endif\n+\n //  C++14 features allowed in C++98 in non-ANSI modes:\n \n #ifndef __cpp_binary_literals"}, {"sha": "9f4a0412403984dade8d47bc4ffdaa6ddeac3dfb", "filename": "gcc/testsuite/g++.dg/cpp1y/feat-neg.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fd12b1e7fc50183bcf62861aae81301a9efbcf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fd12b1e7fc50183bcf62861aae81301a9efbcf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-neg.C?ref=42fd12b1e7fc50183bcf62861aae81301a9efbcf", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile }\n+// { dg-options \"-fno-rtti -fno-exceptions\" }\n+\n+//  C++98 features with explicit opt-out:\n+\n+#ifndef __cpp_rtti\n+#  error \"__cpp_rtti\" // { dg-error \"error\" }\n+#endif\n+\n+#ifndef __cpp_exceptions\n+#  error \"__cpp_exceptions\" // { dg-error \"error\" }\n+#endif"}, {"sha": "331a82dcd63bbab5ff1cbc6d5d489507b14bb47a", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fd12b1e7fc50183bcf62861aae81301a9efbcf/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fd12b1e7fc50183bcf62861aae81301a9efbcf/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=42fd12b1e7fc50183bcf62861aae81301a9efbcf", "patch": "@@ -1,3 +1,16 @@\n+2014-11-10  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* include/cpplib.h (cpp_callbacks): Add has_attribute.\n+\t* internal.h (lexer_state): Add in__has_attribute__.\n+\t* directives.c (lex_macro_node): Prevent use of __has_attribute__\n+\tas a macro.\n+\t* expr.c (parse_has_attribute): New function; (eval_token): Look for\n+\t__has_attribute__ and route to parse_has_attribute.\n+\t* identifiers.c (_cpp_init_hashtable): Initialize n__has_attribute__.\n+\t* pch.c (cpp_read_state): Initialize n__has_attribute__.\n+\t* traditional.c (enum ls): Add ls_has_attribute, ls_has_attribute_close;\n+\t(_cpp_scan_out_logical_line): Attend to __has_attribute__.\n+\n 2014-11-06  Joseph Myers  <joseph@codesourcery.com>\n \n \t* include/cpp-id-data.h (struct cpp_macro): Update comment"}, {"sha": "ba92ec2a6e4f3c0b19d7b280d14fcbc312caac3c", "filename": "libcpp/directives.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fd12b1e7fc50183bcf62861aae81301a9efbcf/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fd12b1e7fc50183bcf62861aae81301a9efbcf/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=42fd12b1e7fc50183bcf62861aae81301a9efbcf", "patch": "@@ -571,6 +571,10 @@ lex_macro_node (cpp_reader *pfile, bool is_def_or_undef)\n \t     || node == pfile->spec_nodes.n__has_include_next__))\n \tcpp_error (pfile, CPP_DL_ERROR,\n \t\t   \"\\\"__has_include__\\\" cannot be used as a macro name\");\n+      else if (is_def_or_undef\n+\t    && node == pfile->spec_nodes.n__has_attribute__)\n+\tcpp_error (pfile, CPP_DL_ERROR,\n+\t\t   \"\\\"__has_attribute__\\\" cannot be used as a macro name\");\n       else if (! (node->flags & NODE_POISONED))\n \treturn node;\n     }"}, {"sha": "529709c8560f4b2ceabb2ec07f1b6c201cda155f", "filename": "libcpp/expr.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fd12b1e7fc50183bcf62861aae81301a9efbcf/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fd12b1e7fc50183bcf62861aae81301a9efbcf/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=42fd12b1e7fc50183bcf62861aae81301a9efbcf", "patch": "@@ -65,6 +65,7 @@ static unsigned int interpret_int_suffix (cpp_reader *, const uchar *, size_t);\n static void check_promotion (cpp_reader *, const struct op *);\n \n static cpp_num parse_has_include (cpp_reader *, enum include_type);\n+static cpp_num parse_has_attribute (cpp_reader *);\n \n /* Token type abuse to create unary plus and minus operators.  */\n #define CPP_UPLUS ((enum cpp_ttype) (CPP_LAST_CPP_OP + 1))\n@@ -1054,6 +1055,8 @@ eval_token (cpp_reader *pfile, const cpp_token *token,\n \treturn parse_has_include (pfile, IT_INCLUDE);\n       else if (token->val.node.node == pfile->spec_nodes.n__has_include_next__)\n \treturn parse_has_include (pfile, IT_INCLUDE_NEXT);\n+      else if (token->val.node.node == pfile->spec_nodes.n__has_attribute__)\n+\treturn parse_has_attribute (pfile);\n       else if (CPP_OPTION (pfile, cplusplus)\n \t       && (token->val.node.node == pfile->spec_nodes.n_true\n \t\t   || token->val.node.node == pfile->spec_nodes.n_false))\n@@ -2147,3 +2150,21 @@ parse_has_include (cpp_reader *pfile, enum include_type type)\n \n   return result;\n }\n+\n+/* Handle meeting \"__has_attribute__\" in a preprocessor expression.  */\n+static cpp_num\n+parse_has_attribute (cpp_reader *pfile)\n+{\n+  pfile->state.in__has_attribute__++;\n+\n+  cpp_num result;\n+  result.unsignedp = false;\n+  result.high = 0;\n+  result.overflow = false;\n+\n+  result.low = pfile->cb.has_attribute (pfile);\n+\n+  pfile->state.in__has_attribute__--;\n+\n+  return result;\n+}"}, {"sha": "108939a65b23f440c04b2bf05d47c486ecbdbe08", "filename": "libcpp/identifiers.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fd12b1e7fc50183bcf62861aae81301a9efbcf/libcpp%2Fidentifiers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fd12b1e7fc50183bcf62861aae81301a9efbcf/libcpp%2Fidentifiers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fidentifiers.c?ref=42fd12b1e7fc50183bcf62861aae81301a9efbcf", "patch": "@@ -72,6 +72,7 @@ _cpp_init_hashtable (cpp_reader *pfile, cpp_hash_table *table)\n   s->n__VA_ARGS__->flags |= NODE_DIAGNOSTIC;\n   s->n__has_include__   = cpp_lookup (pfile, DSC(\"__has_include__\"));\n   s->n__has_include_next__ = cpp_lookup (pfile, DSC(\"__has_include_next__\"));\n+  s->n__has_attribute__   = cpp_lookup (pfile, DSC(\"__has_attribute__\"));\n }\n \n /* Tear down the identifier hash table.  */"}, {"sha": "406200a280522872347c0c924a1df926a4aa301d", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fd12b1e7fc50183bcf62861aae81301a9efbcf/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fd12b1e7fc50183bcf62861aae81301a9efbcf/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=42fd12b1e7fc50183bcf62861aae81301a9efbcf", "patch": "@@ -580,6 +580,9 @@ struct cpp_callbacks\n      Second argument is the location of the start of the current expansion.  */\n   void (*used) (cpp_reader *, source_location, cpp_hashnode *);\n \n+  /* Callback to identify whether an attribute exists.  */\n+  int (*has_attribute) (cpp_reader *);\n+\n   /* Callback that can change a user builtin into normal macro.  */\n   bool (*user_builtin_macro) (cpp_reader *, cpp_hashnode *);\n };"}, {"sha": "3a111c0144c5ba2e35066d634f807da23d5fd1f9", "filename": "libcpp/internal.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fd12b1e7fc50183bcf62861aae81301a9efbcf/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fd12b1e7fc50183bcf62861aae81301a9efbcf/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=42fd12b1e7fc50183bcf62861aae81301a9efbcf", "patch": "@@ -261,6 +261,9 @@ struct lexer_state\n   /* Nonzero if in a __has_include__ or __has_include_next__ statement.  */\n   unsigned char in__has_include__;\n \n+  /* Nonzero if in a __has_attribute__ statement.  */\n+  unsigned char in__has_attribute__;\n+\n   /* Nonzero if prevent_expansion is true only because output is\n      being discarded.  */\n   unsigned char discarding_output;\n@@ -284,6 +287,7 @@ struct spec_nodes\n   cpp_hashnode *n__VA_ARGS__;\t\t/* C99 vararg macros */\n   cpp_hashnode *n__has_include__;\t/* __has_include__ operator */\n   cpp_hashnode *n__has_include_next__;\t/* __has_include_next__ operator */\n+  cpp_hashnode *n__has_attribute__;\t/* __has_attribute__ operator */\n };\n \n typedef struct _cpp_line_note _cpp_line_note;"}, {"sha": "d7a2dac347f089e58444214d8bb62b809315dad9", "filename": "libcpp/pch.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fd12b1e7fc50183bcf62861aae81301a9efbcf/libcpp%2Fpch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fd12b1e7fc50183bcf62861aae81301a9efbcf/libcpp%2Fpch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpch.c?ref=42fd12b1e7fc50183bcf62861aae81301a9efbcf", "patch": "@@ -835,6 +835,7 @@ cpp_read_state (cpp_reader *r, const char *name, FILE *f,\n     s->n__VA_ARGS__     = cpp_lookup (r, DSC(\"__VA_ARGS__\"));\n     s->n__has_include__ = cpp_lookup (r, DSC(\"__has_include__\"));\n     s->n__has_include_next__ = cpp_lookup (r, DSC(\"__has_include_next__\"));\n+    s->n__has_attribute__ = cpp_lookup (r, DSC(\"__has_attribute__\"));\n   }\n \n   old_state = r->state;"}, {"sha": "664bf054a03be5eb58d1f51bab21fcfc9867c56c", "filename": "libcpp/traditional.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fd12b1e7fc50183bcf62861aae81301a9efbcf/libcpp%2Ftraditional.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fd12b1e7fc50183bcf62861aae81301a9efbcf/libcpp%2Ftraditional.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ftraditional.c?ref=42fd12b1e7fc50183bcf62861aae81301a9efbcf", "patch": "@@ -76,7 +76,9 @@ enum ls {ls_none = 0,\t\t/* Normal state.  */\n \t ls_predicate,\t\t/* After the predicate, maybe paren?  */\n \t ls_answer,\t\t/* In answer to predicate.  */\n \t ls_has_include,\t/* After __has_include__.  */\n-\t ls_has_include_close};\t/* Looking for ')' of __has_include__.  */\n+\t ls_has_include_close,\t/* Looking for ')' of __has_include__.  */\n+\t ls_has_attribute,\t/* After __has_attribute__.  */\n+\t ls_has_attribute_close}; /* Looking for ')' of __has_attribute__.  */\n \n /* Lexing TODO: Maybe handle space in escaped newlines.  Stop lex.c\n    from recognizing comments and directives during its lexing pass.  */\n@@ -533,6 +535,12 @@ _cpp_scan_out_logical_line (cpp_reader *pfile, cpp_macro *macro)\n \t\t  lex_state = ls_has_include;\n \t\t  continue;\n \t\t}\n+\t      else if (pfile->state.in_expression\n+\t\t       && node == pfile->spec_nodes.n__has_attribute__)\n+\t\t{\n+\t\t  lex_state = ls_has_attribute;\n+\t\t  continue;\n+\t\t}\n \t    }\n \t  break;\n \n@@ -558,6 +566,8 @@ _cpp_scan_out_logical_line (cpp_reader *pfile, cpp_macro *macro)\n \t\tlex_state = ls_defined_close;\n \t      else if (lex_state == ls_has_include)\n \t\tlex_state = ls_has_include_close;\n+\t      else if (lex_state == ls_has_attribute)\n+\t\tlex_state = ls_has_attribute_close;\n \t    }\n \t  break;\n \n@@ -596,7 +606,8 @@ _cpp_scan_out_logical_line (cpp_reader *pfile, cpp_macro *macro)\n \t\t    }\n \t\t}\n \t      else if (lex_state == ls_answer || lex_state == ls_defined_close\n-\t\t\t|| lex_state == ls_has_include_close)\n+\t\t\t|| lex_state == ls_has_include_close\n+\t\t\t|| lex_state == ls_has_attribute_close)\n \t\tlex_state = ls_none;\n \t    }\n \t  break;\n@@ -678,7 +689,8 @@ _cpp_scan_out_logical_line (cpp_reader *pfile, cpp_macro *macro)\n       else if (lex_state == ls_hash\n \t       || lex_state == ls_predicate\n \t       || lex_state == ls_defined\n-\t       || lex_state == ls_has_include)\n+\t       || lex_state == ls_has_include\n+\t       || lex_state == ls_has_attribute)\n \tlex_state = ls_none;\n \n       /* ls_answer and ls_defined_close keep going until ')'.  */"}]}