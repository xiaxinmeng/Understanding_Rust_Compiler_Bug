{"sha": "66aaf16f87dc08bcdfa237adf39227be51d6b2d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZhYWYxNmY4N2RjMDhiY2RmYTIzN2FkZjM5MjI3YmU1MWQ2YjJkMA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2012-08-25T17:16:05Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-08-25T17:16:05Z"}, "message": "i386.h (FP_REG_P): Remove macro.\n\n\t* config/i386/i386.h (FP_REG_P): Remove macro.\n\t(FP_REGNO_P): Ditto.\n\t(HARD_REGNO_NREGS): Use STACK_REGNO_P instead of FP_REGNO_P.\n\t(HARD_REGNO_NREGS_HAS_PADDING): Ditto.\n\t(ANY_FP_REGNO_P): Ditto.\n\t(HARD_REGNO_RENAME_OK): Use STACK_REGNO_P.\n\t* config/i386/i386.c (output_387_ffreep): Use STACK_REGNO_P\n\tinstead of FP_REGNO_P.\n\t(ix86_hard_regno_mode_ok): Ditto.\n\t* config/i386/predicates.md (fp_register_operand): Ditto.\n\t(register_and_not_fp_reg_operand): Ditto.\n\t* config/i386/sync.md (atomic_loaddi_fpu): Use STACK_REG_P instead\n\tof FP_REG_P.\n\n\t* reg-stack.c (get_true_reg): Use STACK_REG_P instead of FP_REG_P.\n\nFrom-SVN: r190667", "tree": {"sha": "b46e96592bf395fa91f05d24ec5af255cf645ee1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b46e96592bf395fa91f05d24ec5af255cf645ee1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66aaf16f87dc08bcdfa237adf39227be51d6b2d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66aaf16f87dc08bcdfa237adf39227be51d6b2d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66aaf16f87dc08bcdfa237adf39227be51d6b2d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66aaf16f87dc08bcdfa237adf39227be51d6b2d0/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b911390762464c3b679507533e8236d373d6e0e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b911390762464c3b679507533e8236d373d6e0e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b911390762464c3b679507533e8236d373d6e0e2"}], "stats": {"total": 52, "additions": 33, "deletions": 19}, "files": [{"sha": "1a822cb69f0a9acacfb7c2c436628abaa58fc26b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66aaf16f87dc08bcdfa237adf39227be51d6b2d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66aaf16f87dc08bcdfa237adf39227be51d6b2d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66aaf16f87dc08bcdfa237adf39227be51d6b2d0", "patch": "@@ -1,3 +1,21 @@\n+2012-08-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (FP_REG_P): Remove macro.\n+\t(FP_REGNO_P): Ditto.\n+\t(HARD_REGNO_NREGS): Use STACK_REGNO_P instead of FP_REGNO_P.\n+\t(HARD_REGNO_NREGS_HAS_PADDING): Ditto.\n+\t(ANY_FP_REGNO_P): Ditto.\n+\t(HARD_REGNO_RENAME_OK): Use STACK_REGNO_P.\n+\t* config/i386/i386.c (output_387_ffreep): Use STACK_REGNO_P\n+\tinstead of FP_REGNO_P.\n+\t(ix86_hard_regno_mode_ok): Ditto.\n+\t* config/i386/predicates.md (fp_register_operand): Ditto.\n+\t(register_and_not_fp_reg_operand): Ditto.\n+\t* config/i386/sync.md (atomic_loaddi_fpu): Use STACK_REG_P instead\n+\tof FP_REG_P.\n+\n+\t* reg-stack.c (get_true_reg): Use STACK_REG_P instead of FP_REG_P.\n+\n 2012-08-24  Jason Merrill  <jason@redhat.com>\n \n \t* print-tree.c (print_node): Don't check TREE_LANG_FLAG_*"}, {"sha": "c7be00185dc4f378f596506d78b26d7b6efc9e8f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66aaf16f87dc08bcdfa237adf39227be51d6b2d0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66aaf16f87dc08bcdfa237adf39227be51d6b2d0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=66aaf16f87dc08bcdfa237adf39227be51d6b2d0", "patch": "@@ -15554,7 +15554,7 @@ output_387_ffreep (rtx *operands ATTRIBUTE_UNUSED, int opno)\n       static char retval[32];\n       int regno = REGNO (operands[opno]);\n \n-      gcc_assert (FP_REGNO_P (regno));\n+      gcc_assert (STACK_REGNO_P (regno));\n \n       regno -= FIRST_STACK_REG;\n \n@@ -32169,7 +32169,7 @@ ix86_hard_regno_mode_ok (int regno, enum machine_mode mode)\n       || GET_MODE_CLASS (mode) == MODE_RANDOM\n       || GET_MODE_CLASS (mode) == MODE_PARTIAL_INT)\n     return false;\n-  if (FP_REGNO_P (regno))\n+  if (STACK_REGNO_P (regno))\n     return VALID_FP_MODE_P (mode);\n   if (SSE_REGNO_P (regno))\n     {"}, {"sha": "53ca7a5bfe80379ae240f688eac7265438d7b3db", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66aaf16f87dc08bcdfa237adf39227be51d6b2d0/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66aaf16f87dc08bcdfa237adf39227be51d6b2d0/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=66aaf16f87dc08bcdfa237adf39227be51d6b2d0", "patch": "@@ -1008,7 +1008,7 @@ enum target_cpu_default\n    applied to them.  */\n \n #define HARD_REGNO_NREGS(REGNO, MODE)\t\t\t\t\t\\\n-  (FP_REGNO_P (REGNO) || SSE_REGNO_P (REGNO) || MMX_REGNO_P (REGNO)\t\\\n+  (STACK_REGNO_P (REGNO) || SSE_REGNO_P (REGNO) || MMX_REGNO_P (REGNO)\t\\\n    ? (COMPLEX_MODE_P (MODE) ? 2 : 1)\t\t\t\t\t\\\n    : ((MODE) == XFmode\t\t\t\t\t\t\t\\\n       ? (TARGET_64BIT ? 2 : 3)\t\t\t\t\t\t\\\n@@ -1018,7 +1018,7 @@ enum target_cpu_default\n \n #define HARD_REGNO_NREGS_HAS_PADDING(REGNO, MODE)\t\t\t\\\n   ((TARGET_128BIT_LONG_DOUBLE && !TARGET_64BIT)\t\t\t\t\\\n-   ? (FP_REGNO_P (REGNO) || SSE_REGNO_P (REGNO) || MMX_REGNO_P (REGNO)\t\\\n+   ? (STACK_REGNO_P (REGNO) || SSE_REGNO_P (REGNO) || MMX_REGNO_P (REGNO) \\\n       ? 0\t\t\t\t\t\t\t\t\\\n       : ((MODE) == XFmode || (MODE) == XCmode))\t\t\t\t\\\n    : 0)\n@@ -1337,11 +1337,11 @@ enum reg_class\n #define REX_INT_REGNO_P(N) \\\n   IN_RANGE ((N), FIRST_REX_INT_REG, LAST_REX_INT_REG)\n \n-#define FP_REG_P(X) (REG_P (X) && FP_REGNO_P (REGNO (X)))\n-#define FP_REGNO_P(N) IN_RANGE ((N), FIRST_STACK_REG, LAST_STACK_REG)\n+#define STACK_REG_P(X) (REG_P (X) && STACK_REGNO_P (REGNO (X)))\n+#define STACK_REGNO_P(N) IN_RANGE ((N), FIRST_STACK_REG, LAST_STACK_REG)\n \n #define ANY_FP_REG_P(X) (REG_P (X) && ANY_FP_REGNO_P (REGNO (X)))\n-#define ANY_FP_REGNO_P(N) (FP_REGNO_P (N) || SSE_REGNO_P (N))\n+#define ANY_FP_REGNO_P(N) (STACK_REGNO_P (N) || SSE_REGNO_P (N))\n \n #define X87_FLOAT_MODE_P(MODE)\t\\\n   (TARGET_80387 && ((MODE) == SFmode || (MODE) == DFmode || (MODE) == XFmode))\n@@ -1367,9 +1367,6 @@ enum reg_class\n #define MMX_REG_P(X) (REG_P (X) && MMX_REGNO_P (REGNO (X)))\n #define MMX_REGNO_P(N) IN_RANGE ((N), FIRST_MMX_REG, LAST_MMX_REG)\n \n-#define STACK_REG_P(X) (REG_P (X) && STACK_REGNO_P (REGNO (X)))\n-#define STACK_REGNO_P(N) IN_RANGE ((N), FIRST_STACK_REG, LAST_STACK_REG)\n-\n #define STACK_TOP_P(X) (REG_P (X) && REGNO (X) == FIRST_STACK_REG)\n \n #define CC_REG_P(X) (REG_P (X) && CC_REGNO_P (REGNO (X)))\n@@ -2204,8 +2201,7 @@ enum ix86_stack_slot\n \n    ??? Maybe Pentium chips benefits from renaming, someone can try....  */\n \n-#define HARD_REGNO_RENAME_OK(SRC, TARGET)  \\\n-  (! IN_RANGE ((SRC), FIRST_STACK_REG, LAST_STACK_REG))\n+#define HARD_REGNO_RENAME_OK(SRC, TARGET) !STACK_REGNO_P (SRC)\n \n \f\n #define FASTCALL_PREFIX '@'"}, {"sha": "33000174fca761e79b7b76ad715f6d721e305c85", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66aaf16f87dc08bcdfa237adf39227be51d6b2d0/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66aaf16f87dc08bcdfa237adf39227be51d6b2d0/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=66aaf16f87dc08bcdfa237adf39227be51d6b2d0", "patch": "@@ -3388,7 +3388,7 @@\n   int r = REGNO (operands[0]);\n \n   if ((SSE_REGNO_P (r) && !standard_sse_constant_p (c))\n-      || (FP_REGNO_P (r) && standard_80387_constant_p (c) < 1))\n+      || (STACK_REGNO_P (r) && standard_80387_constant_p (c) < 1))\n     FAIL;\n })\n \n@@ -3406,7 +3406,7 @@\n   int r = REGNO (operands[0]);\n \n   if ((SSE_REGNO_P (r) && !standard_sse_constant_p (c))\n-      || (FP_REGNO_P (r) && standard_80387_constant_p (c) < 1))\n+      || (STACK_REGNO_P (r) && standard_80387_constant_p (c) < 1))\n     FAIL;\n })\n "}, {"sha": "43c15e4e76d6934f7a832d538d869fcc2eff621b", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66aaf16f87dc08bcdfa237adf39227be51d6b2d0/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66aaf16f87dc08bcdfa237adf39227be51d6b2d0/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=66aaf16f87dc08bcdfa237adf39227be51d6b2d0", "patch": "@@ -26,7 +26,7 @@\n ;; Return true if OP is an i387 fp register.\n (define_predicate \"fp_register_operand\"\n   (and (match_code \"reg\")\n-       (match_test \"FP_REGNO_P (REGNO (op))\")))\n+       (match_test \"STACK_REGNO_P (REGNO (op))\")))\n \n ;; Return true if OP is a non-fp register_operand.\n (define_predicate \"register_and_not_any_fp_reg_operand\"\n@@ -36,7 +36,7 @@\n ;; Return true if OP is a register operand other than an i387 fp register.\n (define_predicate \"register_and_not_fp_reg_operand\"\n   (and (match_code \"reg\")\n-       (not (match_test \"FP_REGNO_P (REGNO (op))\"))))\n+       (not (match_test \"STACK_REGNO_P (REGNO (op))\"))))\n \n ;; True if the operand is an MMX register.\n (define_predicate \"mmx_reg_operand\""}, {"sha": "0b79bdec92e0a0f701285150572bf7c57dc702ea", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66aaf16f87dc08bcdfa237adf39227be51d6b2d0/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66aaf16f87dc08bcdfa237adf39227be51d6b2d0/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=66aaf16f87dc08bcdfa237adf39227be51d6b2d0", "patch": "@@ -181,7 +181,7 @@\n       if (MEM_P (dst))\n \tmem = dst;\n \n-      if (FP_REG_P (tmp))\n+      if (STACK_REG_P (tmp))\n         {\n \t  emit_insn (gen_loaddi_via_fpu (tmp, src));\n \t  emit_insn (gen_storedi_via_fpu (mem, tmp));\n@@ -261,7 +261,7 @@\n \t  src = mem;\n \t}\n \n-      if (FP_REG_P (tmp))\n+      if (STACK_REG_P (tmp))\n \t{\n \t  emit_insn (gen_loaddi_via_fpu (tmp, src));\n \t  emit_insn (gen_storedi_via_fpu (dst, tmp));"}, {"sha": "797586567cddb89f9931f8166a7883ebb2f3e80f", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66aaf16f87dc08bcdfa237adf39227be51d6b2d0/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66aaf16f87dc08bcdfa237adf39227be51d6b2d0/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=66aaf16f87dc08bcdfa237adf39227be51d6b2d0", "patch": "@@ -413,7 +413,7 @@ get_true_reg (rtx *pat)\n \t   actual FP register in use.  */\n \t{\n \t  rtx subreg;\n-\t  if (FP_REG_P (subreg = SUBREG_REG (*pat)))\n+\t  if (STACK_REG_P (subreg = SUBREG_REG (*pat)))\n \t    {\n \t      int regno_off = subreg_regno_offset (REGNO (subreg),\n \t\t\t\t\t\t   GET_MODE (subreg),"}]}