{"sha": "5e2f4cd242aaa15c3b594434764660e1e96d4065", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUyZjRjZDI0MmFhYTE1YzNiNTk0NDM0NzY0NjYwZTFlOTZkNDA2NQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-12-20T02:23:49Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-12-20T02:23:49Z"}, "message": "cp-tree.h (note_decl_for_pch): New function.\n\n\t* cp-tree.h (note_decl_for_pch): New function.\n\t* class.c (build_clone): Call note_decl_for_pch.\n\t* semantics.c (finish_member_declaration): Likewise.\n\t(note_decl_for_pch): New function.\n\nFrom-SVN: r92402", "tree": {"sha": "b3695fa617f49759e8841d34d68aab1bc7d83d5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3695fa617f49759e8841d34d68aab1bc7d83d5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e2f4cd242aaa15c3b594434764660e1e96d4065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e2f4cd242aaa15c3b594434764660e1e96d4065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e2f4cd242aaa15c3b594434764660e1e96d4065", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e2f4cd242aaa15c3b594434764660e1e96d4065/comments", "author": null, "committer": null, "parents": [{"sha": "57829bc4f05c1087e005bc68adca4a0236f7e115", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57829bc4f05c1087e005bc68adca4a0236f7e115", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57829bc4f05c1087e005bc68adca4a0236f7e115"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "57affb008c273d398515fce0ff811ac14022ccb7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e2f4cd242aaa15c3b594434764660e1e96d4065/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e2f4cd242aaa15c3b594434764660e1e96d4065/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5e2f4cd242aaa15c3b594434764660e1e96d4065", "patch": "@@ -1,3 +1,10 @@\n+2004-12-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (note_decl_for_pch): New function.\n+\t* class.c (build_clone): Call note_decl_for_pch.\n+\t* semantics.c (finish_member_declaration): Likewise.\n+\t(note_decl_for_pch): New function.\n+\n 2004-12-17  Steven Bosscher  <stevenb@suse.de>\n \n \t* init.c (build_zero_init): max_index is the number of"}, {"sha": "c7b0c687db6d6a5029580271bb505c0f38b6b7b2", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e2f4cd242aaa15c3b594434764660e1e96d4065/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e2f4cd242aaa15c3b594434764660e1e96d4065/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=5e2f4cd242aaa15c3b594434764660e1e96d4065", "patch": "@@ -3786,6 +3786,8 @@ build_clone (tree fn, tree name)\n       DECL_TEMPLATE_INFO (result) = copy_node (DECL_TEMPLATE_INFO (result));\n       DECL_TI_TEMPLATE (result) = clone;\n     }\n+  else if (pch_file)\n+    note_decl_for_pch (clone);\n \n   return clone;\n }"}, {"sha": "fdc828d74f57f97fbc913050862638917fce7ee4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e2f4cd242aaa15c3b594434764660e1e96d4065/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e2f4cd242aaa15c3b594434764660e1e96d4065/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5e2f4cd242aaa15c3b594434764660e1e96d4065", "patch": "@@ -4188,6 +4188,7 @@ extern void check_accessibility_of_qualified_id (tree, tree, tree);\n extern tree finish_qualified_id_expr            (tree, tree, bool, bool);\n extern void simplify_aggr_init_expr\t\t(tree *);\n extern void finalize_nrv\t\t\t(tree *, tree, tree);\n+extern void note_decl_for_pch                   (tree);\n \n /* in tree.c */\n extern void lang_check_failed\t\t\t(const char *, int,"}, {"sha": "19c6d5d89107251ac1e2e4f5e495503fcd4aa043", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e2f4cd242aaa15c3b594434764660e1e96d4065/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e2f4cd242aaa15c3b594434764660e1e96d4065/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5e2f4cd242aaa15c3b594434764660e1e96d4065", "patch": "@@ -2226,6 +2226,40 @@ finish_member_declaration (tree decl)\n       maybe_add_class_template_decl_list (current_class_type, decl, \n \t\t\t\t\t  /*friend_p=*/0);\n     }\n+\n+  if (pch_file)\n+    note_decl_for_pch (decl);\n+}\n+\n+/* DECL has been declared while we are building a PCH file.  Perform\n+   actions that we might normally undertake lazily, but which can be\n+   performed now so that they do not have to be performed in\n+   translation units which include the PCH file.  */\n+\n+void\n+note_decl_for_pch (tree decl)\n+{\n+  gcc_assert (pch_file);\n+\n+  /* A non-template inline function with external linkage will always\n+     be COMDAT.  As we must eventually determine the linkage of all\n+     functions, and as that causes writes to the data mapped in from\n+     the PCH file, it's advantageous to mark the functions at this\n+     point.  */\n+  if (TREE_CODE (decl) == FUNCTION_DECL\n+      && TREE_PUBLIC (decl)\n+      && DECL_DECLARED_INLINE_P (decl)\n+      && !DECL_IMPLICIT_INSTANTIATION (decl))\n+    {\n+      comdat_linkage (decl);\n+      DECL_INTERFACE_KNOWN (decl) = 1;\n+    }\n+  \n+  /* There's a good chance that we'll have to mangle names at some\n+     point, even if only for emission in debugging information.  */\n+  if (TREE_CODE (decl) == VAR_DECL\n+      || TREE_CODE (decl) == FUNCTION_DECL)\n+    mangle_decl (decl);\n }\n \n /* Finish processing a complete template declaration.  The PARMS are"}]}