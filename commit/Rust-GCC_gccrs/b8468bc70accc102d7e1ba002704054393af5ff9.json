{"sha": "b8468bc70accc102d7e1ba002704054393af5ff9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg0NjhiYzcwYWNjYzEwMmQ3ZTFiYTAwMjcwNDA1NDM5M2FmNWZmOQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1998-07-13T17:20:29Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1998-07-13T17:20:29Z"}, "message": "Add --help option.\n\nFrom-SVN: r21109", "tree": {"sha": "b32468e6a5db793248f3d983d703512784c26fc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b32468e6a5db793248f3d983d703512784c26fc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8468bc70accc102d7e1ba002704054393af5ff9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8468bc70accc102d7e1ba002704054393af5ff9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8468bc70accc102d7e1ba002704054393af5ff9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8468bc70accc102d7e1ba002704054393af5ff9/comments", "author": null, "committer": null, "parents": [{"sha": "c6b0465b283d2acba778754d165025fe74410d8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b0465b283d2acba778754d165025fe74410d8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6b0465b283d2acba778754d165025fe74410d8e"}], "stats": {"total": 1253, "additions": 945, "deletions": 308}, "files": [{"sha": "a64917e122c7d61f3c1dd91e5900b783cacf86b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8468bc70accc102d7e1ba002704054393af5ff9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8468bc70accc102d7e1ba002704054393af5ff9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8468bc70accc102d7e1ba002704054393af5ff9", "patch": "@@ -1,3 +1,22 @@\n+Mon Jul 13 17:18:47 1998  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* cccp.c (main): Add support for parsing --help.\n+\t(display_help): New function: display command line switches.\n+\n+\t* cpplib.c (cpp_handle_option): Add support for parsing --help.\n+\t(display_help): New function: display command line switches.\n+\n+\t* gcc.c (main): Add support for parsing --help, and passing it on\n+\tto the sub-processes invoked by gcc.\n+\t(display_help): New function: display comman line switches.\t\n+\n+\t* tm.texi (TARGET_SWITCHES and TARGET_OPTIONS): Document\n+\t'description' field added to structure.  \n+\n+\t* toplev.c: Add support for parsing --help.\n+\tAdd documentation strings to command line option tables.\n+\t(display_help): New function: display comman line switches.\n+\n Mon Jul 13 16:15:10 1998  John Carr  <jfc@mit.edu>\n \n \t* sparc.c, sparc.h, sparc.md: New trampoline code."}, {"sha": "1bd7649ea7c227b306b5e796f994f9c8f516c045", "filename": "gcc/cccp.c", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8468bc70accc102d7e1ba002704054393af5ff9/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8468bc70accc102d7e1ba002704054393af5ff9/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=b8468bc70accc102d7e1ba002704054393af5ff9", "patch": "@@ -1047,6 +1047,7 @@ GENERIC_PTR xmalloc PROTO((size_t));\n static GENERIC_PTR xrealloc PROTO((GENERIC_PTR, size_t));\n static GENERIC_PTR xcalloc PROTO((size_t, size_t));\n static char *savestring PROTO((char *));\n+static void print_help PROTO((void));\n \f\n /* Read LEN bytes at PTR from descriptor DESC, for file FILENAME,\n    retrying if necessary.  If MAX_READ_LEN is defined, read at most\n@@ -1145,6 +1146,73 @@ eprint_string (string, length)\n   } while (length > 0);\n }\n \n+\f\n+static void\n+print_help ()\n+{\n+  printf (\"Usage: %s [switches] input output\\n\", progname);\n+  printf (\"Switches:\\n\");\n+  printf (\"  -include <file>           Include the contents of <file> before other files\\n\");\n+  printf (\"  -imacros <file>           Accept definition of marcos in <file>\\n\");\n+  printf (\"  -iprefix <path>           Specify <path> as a prefix for next two options\\n\");\n+  printf (\"  -iwithprefix <dir>        Add <dir> to the end of the system include paths\\n\");\n+  printf (\"  -iwithprefixbefore <dir>  Add <dir> to the end of the main include paths\\n\");\n+  printf (\"  -isystem <dir>            Add <dir> to the start of the system include paths\\n\");\n+  printf (\"  -idirafter <dir>          Add <dir> to the end of the system include paths\\n\");\n+  printf (\"  -I <dir>                  Add <dir> to the end of the main include paths\\n\");\n+  printf (\"  -nostdinc                 Do not search the system include directories\\n\");\n+  printf (\"  -nostdinc++               Do not search the system include directories for C++\\n\");\n+  printf (\"  -o <file>                 Put output into <file>\\n\");\n+  printf (\"  -pedantic                 Issue all warnings demanded by strict ANSI C\\n\");\n+  printf (\"  -traditional              Follow K&R pre-processor behaviour\\n\");\n+  printf (\"  -trigraphs                Support ANSI C trigraphs\\n\");\n+  printf (\"  -lang-c                   Assume that the input sources are in C\\n\");\n+  printf (\"  -lang-c89                 Assume that the input sources are in C89\\n\");\n+  printf (\"  -lang-c++                 Assume that the input sources are in C++\\n\");\n+  printf (\"  -lang-objc                Assume that the input sources are in ObjectiveC\\n\");\n+  printf (\"  -lang-objc++              Assume that the input sources are in ObjectiveC++\\n\");\n+  printf (\"  -lang-asm                 Assume that the input sources are in assembler\\n\");\n+  printf (\"  -lang-chill               Assume that the input sources are in Chill\\n\");\n+  printf (\"  -+                        Allow parsing of C++ style features\\n\");\n+  printf (\"  -w                        Inhibit warning messages\\n\");\n+  printf (\"  -Wtrigraphs               Warn if trigraphs are encountered\\n\");\n+  printf (\"  -Wno-trigraphs            Do not warn about trigraphs\\n\");\n+  printf (\"  -Wcomment{s}              Warn if one comment starts inside another\\n\");\n+  printf (\"  -Wno-comment{s}           Do not warn about comments\\n\");\n+  printf (\"  -Wtraditional             Warn if a macro argument is/would be turned into\\n\");\n+  printf (\"                             a string if -tradtional is specified\\n\");\n+  printf (\"  -Wno-traditional          Do not warn about stringification\\n\");\n+  printf (\"  -Wundef                   Warn if an undefined macro is used by #if\\n\");\n+  printf (\"  -Wno-undef                Do not warn about testing udefined macros\\n\");\n+  printf (\"  -Wimport                  Warn about the use of the #import directive\\n\");\n+  printf (\"  -Wno-import               Do not warn about the use of #import\\n\");\n+  printf (\"  -Werror                   Treat all warnings as errors\\n\");\n+  printf (\"  -Wno-error                Do not treat warnings as errors\\n\");\n+  printf (\"  -Wall                     Enable all preprocessor warnings\\n\");\n+  printf (\"  -M                        Generate make dependencies\\n\");\n+  printf (\"  -MM                       As -M, but ignore system header files\\n\");\n+  printf (\"  -MD                       As -M, but put output in a .d file\\n\");\n+  printf (\"  -MMD                      As -MD, but ignore system header files\\n\");\n+  printf (\"  -MG                       Treat missing header file as generated files\\n\");\n+  printf (\"  -g                        Include #define and #undef directives in the output\\n\");\n+  printf (\"  -D<macro>                 Define a <macro> with string '1' as its value\\n\");\n+  printf (\"  -D<macro>=<val>           Define a <macro> with <val> as its value\\n\");\n+  printf (\"  -A<question> (<answer>)   Assert the <answer> to <question>\\n\");\n+  printf (\"  -U<macro>                 Undefine <macro> \\n\");\n+  printf (\"  -u or -undef              Do not predefine any macros\\n\");\n+  printf (\"  -v                        Display the version number\\n\");\n+  printf (\"  -H                        Print the name of header files as they are used\\n\");\n+  printf (\"  -C                        Do not discard comments\\n\");\n+  printf (\"  -dM                       Display a list of macro definitions active at end\\n\");\n+  printf (\"  -dD                       Preserve macro definitions in output\\n\");\n+  printf (\"  -dN                       As -dD except that only the names are preserved\\n\");\n+  printf (\"  -dI                       Include #include directives in the output\\n\");\n+  printf (\"  -ifoutput                 Describe skipped code blocks in output \\n\");\n+  printf (\"  -P                        Do not generate #line directives\\n\");\n+  printf (\"  -$                        Do not include '$' in identifiers\\n\");\n+  printf (\"  -remap                    Remap file names when including files.\\n\");\n+  printf (\"  -h or --help              Display this information\\n\");\n+}\n \f\n int\n main (argc, argv)\n@@ -1245,7 +1313,10 @@ main (argc, argv)\n   for (i = 1; i < argc; i++) {\n     if (argv[i][0] != '-') {\n       if (out_fname != NULL)\n-\tfatal (\"Usage: %s [switches] input output\", argv[0]);\n+\t{\n+\t  print_help ();\n+\t  fatal (\"Too many arguments\");\n+\t}\n       else if (in_fname != NULL)\n \tout_fname = argv[i];\n       else\n@@ -1525,6 +1596,13 @@ main (argc, argv)\n \t  debug_output = 1;\n \tbreak;\n \n+      case '-':\n+\tif (strcmp (argv[i], \"--help\") != 0)\n+\t  return i;\n+\tprint_help ();\n+\texit (0);\n+\tbreak;\n+\n       case 'v':\n \tfprintf (stderr, \"GNU CPP version %s\", version_string);\n #ifdef TARGET_VERSION"}, {"sha": "c988097a33c9eade5d06638173f45294a37eac54", "filename": "gcc/cpplib.c", "status": "modified", "additions": 83, "deletions": 3, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8468bc70accc102d7e1ba002704054393af5ff9/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8468bc70accc102d7e1ba002704054393af5ff9/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=b8468bc70accc102d7e1ba002704054393af5ff9", "patch": "@@ -251,7 +251,8 @@ static char *savestring\t\t\tPROTO ((char *));\n static void conditional_skip\t\tPROTO ((cpp_reader *, int,\n \t\t\t\t\t       enum node_type, U_CHAR *));\n static void skip_if_group\t\tPROTO ((cpp_reader *, int));\n-static int parse_name PARAMS ((cpp_reader *, int));\n+static int parse_name                   PARAMS ((cpp_reader *, int));\n+static void print_help                  PROTO ((void));\n \n /* Last arg to output_line_command.  */\n enum file_change_code {same_file, enter_file, leave_file};\n@@ -6235,6 +6236,79 @@ push_pending (pfile, cmd, arg)\n   CPP_OPTIONS (pfile)->pending = pend;\n }\n \n+\f\n+static void\n+print_help ()\n+{\n+  printf (\"Usage: %s [switches] input output\\n\", progname);\n+  printf (\"Switches:\\n\");\n+  /* start-sanitize-obscured-headers */\n+  printf (\"  -fgenobscured=<args>      Generate obscured versions of header files used\\n\");\n+  printf (\"  -fuseobscured=<args>      Search for obscured versions of header files\\n\");\n+  /* end-sanitize-obscured-headers */\n+  printf (\"  -include <file>           Include the contents of <file> before other files\\n\");\n+  printf (\"  -imacros <file>           Accept definition of marcos in <file>\\n\");\n+  printf (\"  -iprefix <path>           Specify <path> as a prefix for next two options\\n\");\n+  printf (\"  -iwithprefix <dir>        Add <dir> to the end of the system include paths\\n\");\n+  printf (\"  -iwithprefixbefore <dir>  Add <dir> to the end of the main include paths\\n\");\n+  printf (\"  -isystem <dir>            Add <dir> to the start of the system include paths\\n\");\n+  printf (\"  -idirafter <dir>          Add <dir> to the end of the system include paths\\n\");\n+  printf (\"  -I <dir>                  Add <dir> to the end of the main include paths\\n\");\n+  printf (\"  -nostdinc                 Do not search the system include directories\\n\");\n+  printf (\"  -nostdinc++               Do not search the system include directories for C++\\n\");\n+  printf (\"  -o <file>                 Put output into <file>\\n\");\n+  printf (\"  -pedantic                 Issue all warnings demanded by strict ANSI C\\n\");\n+  printf (\"  -traditional              Follow K&R pre-processor behaviour\\n\");\n+  printf (\"  -trigraphs                Support ANSI C trigraphs\\n\");\n+  printf (\"  -lang-c                   Assume that the input sources are in C\\n\");\n+  printf (\"  -lang-c89                 Assume that the input sources are in C89\\n\");\n+  printf (\"  -lang-c++                 Assume that the input sources are in C++\\n\");\n+  printf (\"  -lang-objc                Assume that the input sources are in ObjectiveC\\n\");\n+  printf (\"  -lang-objc++              Assume that the input sources are in ObjectiveC++\\n\");\n+  printf (\"  -lang-asm                 Assume that the input sources are in assembler\\n\");\n+  printf (\"  -lang-chill               Assume that the input sources are in Chill\\n\");\n+  printf (\"  -+                        Allow parsing of C++ style features\\n\");\n+  printf (\"  -w                        Inhibit warning messages\\n\");\n+  printf (\"  -Wtrigraphs               Warn if trigraphs are encountered\\n\");\n+  printf (\"  -Wno-trigraphs            Do not warn about trigraphs\\n\");\n+  printf (\"  -Wcomment{s}              Warn if one comment starts inside another\\n\");\n+  printf (\"  -Wno-comment{s}           Do not warn about comments\\n\");\n+  printf (\"  -Wtraditional             Warn if a macro argument is/would be turned into\\n\");\n+  printf (\"                             a string if -tradtional is specified\\n\");\n+  printf (\"  -Wno-traditional          Do not warn about stringification\\n\");\n+  printf (\"  -Wundef                   Warn if an undefined macro is used by #if\\n\");\n+  printf (\"  -Wno-undef                Do not warn about testing udefined macros\\n\");\n+  printf (\"  -Wimport                  Warn about the use of the #import directive\\n\");\n+  printf (\"  -Wno-import               Do not warn about the use of #import\\n\");\n+  printf (\"  -Werror                   Treat all warnings as errors\\n\");\n+  printf (\"  -Wno-error                Do not treat warnings as errors\\n\");\n+  printf (\"  -Wall                     Enable all preprocessor warnings\\n\");\n+  printf (\"  -M                        Generate make dependencies\\n\");\n+  printf (\"  -MM                       As -M, but ignore system header files\\n\");\n+  printf (\"  -MD                       As -M, but put output in a .d file\\n\");\n+  printf (\"  -MMD                      As -MD, but ignore system header files\\n\");\n+  printf (\"  -MG                       Treat missing header file as generated files\\n\");\n+  printf (\"  -g                        Include #define and #undef directives in the output\\n\");\n+  printf (\"  -D<macro>                 Define a <macro> with string '1' as its value\\n\");\n+  printf (\"  -D<macro>=<val>           Define a <macro> with <val> as its value\\n\");\n+  printf (\"  -A<question> (<answer>)   Assert the <answer> to <question>\\n\");\n+  printf (\"  -U<macro>                 Undefine <macro> \\n\");\n+  printf (\"  -u or -undef              Do not predefine any macros\\n\");\n+  printf (\"  -v                        Display the version number\\n\");\n+  printf (\"  -H                        Print the name of header files as they are used\\n\");\n+  printf (\"  -C                        Do not discard comments\\n\");\n+  printf (\"  -dM                       Display a list of macro definitions active at end\\n\");\n+  printf (\"  -dD                       Preserve macro definitions in output\\n\");\n+  printf (\"  -dN                       As -dD except that only the names are preserved\\n\");\n+  printf (\"  -dI                       Include #include directives in the output\\n\");\n+  printf (\"  -ifoutput                 Describe skipped code blocks in output \\n\");\n+  printf (\"  -P                        Do not generate #line directives\\n\");\n+  printf (\"  -$                        Do not include '$' in identifiers\\n\");\n+  printf (\"  -remap                    Remap file names when including files.\\n\");\n+  printf (\"  -h or --help              Display this information\\n\");\n+}\n+\f\n+\n /* Handle one command-line option in (argc, argv).\n    Can be called multiple times, to handle multiple sets of options.\n    Returns number of strings consumed.  */\n@@ -6249,8 +6323,8 @@ cpp_handle_option (pfile, argc, argv)\n   if (argv[i][0] != '-') {\n     if (opts->out_fname != NULL)\n       {\n-\tcpp_fatal (pfile, \"Usage: %s [switches] input output\", argv[0]);\n-\treturn argc;\n+\tprint_help ();\n+\tcpp_fatal (pfile, \"Too many arguments\");\n       }\n     else if (opts->in_fname != NULL)\n       opts->out_fname = argv[i];\n@@ -6576,6 +6650,12 @@ cpp_handle_option (pfile, argc, argv)\n \topts->debug_output = 1;\n       break;\n       \n+    case '-':\n+      if (strcmp (argv[i], \"--help\") != 0)\n+\treturn i;\n+      print_help ();\n+      break;\n+\t\n     case 'v':\n       fprintf (stderr, \"GNU CPP version %s\", version_string);\n #ifdef TARGET_VERSION"}, {"sha": "48b94fc14fd438f5934959ad989773d1b88c1e9d", "filename": "gcc/gcc.c", "status": "modified", "additions": 147, "deletions": 42, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8468bc70accc102d7e1ba002704054393af5ff9/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8468bc70accc102d7e1ba002704054393af5ff9/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=b8468bc70accc102d7e1ba002704054393af5ff9", "patch": "@@ -156,6 +156,11 @@ static int print_multi_directory;\n \n static int print_multi_lib;\n \n+/* Flag saying to print the command line options understood by gcc and its\n+   sub-processes.  */\n+\n+static int print_help_list;\n+\n /* Flag indicating whether we should print the command and arguments */\n \n static int verbose_flag;\n@@ -241,6 +246,7 @@ static void perror_with_name\tPROTO((char *));\n static void pfatal_pexecute\tPROTO((char *, char *));\n static void fatal\t\tPVPROTO((char *, ...));\n static void error\t\tPVPROTO((char *, ...));\n+static void display_help \tPROTO((void));\n \n void fancy_abort ();\n char *xmalloc ();\n@@ -619,6 +625,7 @@ static struct compiler default_compilers[] =\n                   %{traditional-cpp:-traditional}\\\n \t\t  %{traditional} %{v:-version} %{pg:-p} %{p} %{f*}\\\n \t\t  %{aux-info*}\\\n+\t\t  %{--help:--help} \\\n \t\t  %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi} \\\n \t\t  %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n \t\t  %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n@@ -643,6 +650,7 @@ static struct compiler default_compilers[] =\n \t\t   %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi} \\\n \t\t   %{traditional} %{v:-version} %{pg:-p} %{p} %{f*}\\\n \t\t   %{aux-info*}\\\n+\t\t   %{--help:--help} \\\n \t\t   %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n \t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n               %{!S:as %a %Y\\\n@@ -2217,6 +2225,10 @@ execute ()\n \n   if (verbose_flag)\n     {\n+      /* For help listings, put a blank line between sub-processes.  */\n+      if (print_help_list)\n+\tfputc ('\\n', stderr);\n+      \n       /* Print each piped command as a separate line.  */\n       for (i = 0; i < n_commands ; i++)\n \t{\n@@ -2413,6 +2425,79 @@ convert_filename (name, do_exe)\n   return name;\n }\n #endif\n+\f\n+/* Display the command line switches accepted by gcc.  */\n+static void\n+display_help ()\n+{\n+  printf (\"Usage: %s [options] file...\\n\", programname);\n+  printf (\"Options:\\n\");\n+\n+  printf (\"  --help                   Display this information\\n\");\n+  if (! verbose_flag)\n+    printf (\"  (Use '-v --help' to display command line options of sub-processes)\\n\");\n+  printf (\"  -dumpspecs               Display all of the built in spec strings\\n\");\n+  printf (\"  -dumpversion             Display the version of the compiler\\n\");\n+  printf (\"  -dumpmachine             Display the compiler's target processor\\n\");\n+  printf (\"  -print-search-dirs       Display the directories in the compiler's search path\\n\");\n+  printf (\"  -print-libgcc-file-name  Display the name of the compiler's companion library\\n\");\n+  printf (\"  -print-file-name=<lib>   Display the full path to library <lib>\\n\");\n+  printf (\"  -print-prog-name=<prog>  Display the full path to compiler component <prog>\\n\");\n+  printf (\"  -print-multi-directory   Display the root directory for versions of libgcc\\n\");\n+  printf (\"  -print-multi-lib         Display the mapping between command line options and\\n\");\n+  printf (\"                            multiple library search directories\\n\");\n+  printf (\"  -Wa,<text>               Pass <text> on to the assembler\\n\");\n+  printf (\"  -Wp,<text>               Pass <text> on to the preprocessor\\n\");\n+  printf (\"  -Wl,<text>               Pass <text> on to the linker\\n\");\n+  printf (\"  -Xlinker <arg>           Pass <arg> on to the linker\\n\");\n+  printf (\"  -save-temps              Do not delete intermediate files\\n\");\n+  printf (\"  -pipe                    Use pipes rather than intermediate files\\n\");\n+  printf (\"  -specs=<file>            Override builtin specs with the contents of <file>\\n\");\n+  printf (\"  -B <directory>           Add <directory> to the compiler's search paths\\n\");\n+  printf (\"  -b <machine>             Run gcc for target <machine>, if installed\\n\");\n+  printf (\"  -V <version>             Run gcc version number <version>, if installed\\n\");\n+  printf (\"  -v                       Display the programs invoked by the compiler\\n\");\n+  printf (\"  -E                       Preprocess only; do not compile, assemble or link\\n\");\n+  printf (\"  -S                       Compile only; do not assemble or link\\n\");\n+  printf (\"  -c                       Compile and assemble, but do not link\\n\");\n+  printf (\"  -o <file>                Place the output into <file>\\n\");\n+  printf (\"  -x <language>            Specifiy the language of the following input files\\n\");\n+  printf (\"                            Permissable languages include: c c++ assembler none\\n\");\n+  printf (\"                            'none' means revert to the default behaviour of\\n\");\n+  printf (\"                            guessing the language based on the file's extension\\n\");\n+\n+  printf (\"\\nOptions starting with -g, -f, -m, -O or -W are automatically passed on to\\n\");\n+  printf (\"the various sub-processes invoked by %s.  In order to pass other options\\n\",\n+\t  programname);\n+  printf (\"on to these processes the -W<letter> options must be used.\\n\");\n+\n+  /* The rest of the options are displayed by invocations of the various\n+     sub-processes.  */\n+}\n+\n+#define ADD_XXX_OPTION(name) \t\t\t\t\t\t\\\n+static void \t\t\t\t\t\t\t\t\\\n+add_##name##_option (option, len)\t\t\t\t\t\\\n+     char * option;\t\t\t\t\t\t\t\\\n+     int    len;\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  n_##name##_options++;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  if (! ##name##_options)\t\t\t\t\t\t\\\n+    name##_options\t\t\t\t\t\t\t\\\n+      = (char **) xmalloc (n_##name##_options * sizeof (char **));\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    name##_options\t\t\t\t\t\t\t\\\n+      = (char **) xrealloc (##name##_options,\t\t\t\t\\\n+\t\t\t    n_##name##_options * sizeof (char **));\t\\\n+  \t\t\t\t\t\t\t\t\t\\\n+  name##_options [n_##name##_options - 1] = save_string (option, len);  \\\n+}\n+\n+ADD_XXX_OPTION (preprocessor)\n+ADD_XXX_OPTION (assembler)\n+ADD_XXX_OPTION (linker)\n+     \n \f\n /* Create the vector `switches' and its contents.\n    Store its length in `n_switches'.  */\n@@ -2604,6 +2689,19 @@ process_command (argc, argv)\n \t  printf (\"%s\\n\", spec_machine);\n \t  exit  (0);\n \t}\n+      else if (strcmp (argv[i], \"-fhelp\") == 0)\n+\t{\n+\t  /* translate_options () has turned --help into -fhelp.  */\n+\t  print_help_list = 1;\n+\n+\t  /* We will be passing a dummy file on to the sub-processes.  */\n+\t  n_infiles++;\n+\t  n_switches++;\n+\t  \n+\t  add_preprocessor_option (\"--help\", 6);\n+\t  add_assembler_option (\"--help\", 6);\n+\t  add_linker_option (\"--help\", 6);\n+\t}\n       else if (! strcmp (argv[i], \"-print-search-dirs\"))\n \tprint_search_dirs = 1;\n       else if (! strcmp (argv[i], \"-print-libgcc-file-name\"))\n@@ -2621,60 +2719,34 @@ process_command (argc, argv)\n \t  int prev, j;\n \t  /* Pass the rest of this option to the assembler.  */\n \n-\t  n_assembler_options++;\n-\t  if (!assembler_options)\n-\t    assembler_options\n-\t      = (char **) xmalloc (n_assembler_options * sizeof (char **));\n-\t  else\n-\t    assembler_options\n-\t      = (char **) xrealloc (assembler_options,\n-\t\t\t\t    n_assembler_options * sizeof (char **));\n-\n \t  /* Split the argument at commas.  */\n \t  prev = 4;\n \t  for (j = 4; argv[i][j]; j++)\n \t    if (argv[i][j] == ',')\n \t      {\n-\t\tassembler_options[n_assembler_options - 1]\n-\t\t  = save_string (argv[i] + prev, j - prev);\n-\t\tn_assembler_options++;\n-\t\tassembler_options\n-\t\t  = (char **) xrealloc (assembler_options,\n-\t\t\t\t\tn_assembler_options * sizeof (char **));\n+\t\tadd_assembler_option (argv[i] + prev, j - prev);\n \t\tprev = j + 1;\n \t      }\n+\t  \n \t  /* Record the part after the last comma.  */\n-\t  assembler_options[n_assembler_options - 1] = argv[i] + prev;\n+\t  add_assembler_option (argv[i] + prev, j - prev);\n \t}\n       else if (! strncmp (argv[i], \"-Wp,\", 4))\n \t{\n \t  int prev, j;\n \t  /* Pass the rest of this option to the preprocessor.  */\n \n-\t  n_preprocessor_options++;\n-\t  if (!preprocessor_options)\n-\t    preprocessor_options\n-\t      = (char **) xmalloc (n_preprocessor_options * sizeof (char **));\n-\t  else\n-\t    preprocessor_options\n-\t      = (char **) xrealloc (preprocessor_options,\n-\t\t\t\t    n_preprocessor_options * sizeof (char **));\n-\n \t  /* Split the argument at commas.  */\n \t  prev = 4;\n \t  for (j = 4; argv[i][j]; j++)\n \t    if (argv[i][j] == ',')\n \t      {\n-\t\tpreprocessor_options[n_preprocessor_options - 1]\n-\t\t  = save_string (argv[i] + prev, j - prev);\n-\t\tn_preprocessor_options++;\n-\t\tpreprocessor_options\n-\t\t  = (char **) xrealloc (preprocessor_options,\n-\t\t\t\t\tn_preprocessor_options * sizeof (char **));\n+\t\tadd_preprocessor_option (argv[i] + prev, j - prev);\n \t\tprev = j + 1;\n \t      }\n+\t  \n \t  /* Record the part after the last comma.  */\n-\t  preprocessor_options[n_preprocessor_options - 1] = argv[i] + prev;\n+\t  add_preprocessor_option (argv[i] + prev, j - prev);\n \t}\n       else if (argv[i][0] == '+' && argv[i][1] == 'e')\n \t/* The +e options to the C++ front-end.  */\n@@ -3010,6 +3082,25 @@ process_command (argc, argv)\n \t;\n       else if (! strcmp (argv[i], \"-print-multi-directory\"))\n \t;\n+      else if (strcmp (argv[i], \"-fhelp\") == 0)\n+\t{\n+\t  if (verbose_flag)\n+\t    {\n+\t      /* Create a dummy input file, so that we can pass --help on to\n+\t\t the various sub-processes.  */\n+\t      infiles[n_infiles].language = \"c\";\n+\t      infiles[n_infiles++].name   = \"help-dummy\";\n+\t      \n+\t      /* Preserve the --help switch so that it can bet caught by the\n+\t\t cc1 spec string.  */\n+\t      switches[n_switches].part1     = \"--help\";\n+\t      switches[n_switches].args      = 0;\n+\t      switches[n_switches].live_cond = 0;\n+\t      switches[n_switches].valid     = 0;\n+\t      \n+\t      n_switches++;\n+\t    }\n+\t}\n       else if (argv[i][0] == '+' && argv[i][1] == 'e')\n \t{\n \t  /* Compensate for the +e options to the C++ front-end;\n@@ -3634,16 +3725,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t  }\n \n \t      /* This option is new; add it.  */\n-\t      n_linker_options++;\n-\t      if (!linker_options)\n-\t\tlinker_options\n-\t\t  = (char **) xmalloc (n_linker_options * sizeof (char **));\n-\t      else\n-\t\tlinker_options\n-\t\t  = (char **) xrealloc (linker_options,\n-\t\t\t\t\tn_linker_options * sizeof (char **));\n-\n-\t      linker_options[n_linker_options - 1] = string;\n+\t      add_linker_option (string, strlen (string));\n \t    }\n \t    break;\n \n@@ -4789,6 +4871,23 @@ main (argc, argv)\n       exit (0);\n     }\n \n+  if (print_help_list)\n+    {\n+      display_help ();\n+\n+      if (! verbose_flag)\n+\t{\n+\t  printf (\"\\nReport bugs to egcs-bugs@cygnus.com.\\n\");\n+\t  printf (\"Please see the file BUGS (included with the sources) first.\\n\");\n+\t  \n+\t  exit (0);\n+\t}\n+\n+      /* We do not exit here.  Instead we have created a fake input file\n+\t called 'help-dummy' which needs to be compiled, and we pass this\n+\t on the the various sub-processes, along with the --help switch.  */\n+    }\n+  \n   if (verbose_flag)\n     {\n       int n;\n@@ -4966,6 +5065,12 @@ main (argc, argv)\n     delete_failure_queue ();\n   delete_temp_files ();\n \n+  if (print_help_list)\n+    {\n+      printf (\"\\nReport bugs to egcs-bugs@cygnus.com.\\n\");\n+      printf (\"Please see the file BUGS (included with the sources) first.\\n\");\n+    }\n+  \n   exit (error_count > 0 ? (signal_count ? 2 : 1) : 0);\n   /* NOTREACHED */\n   return 0;"}, {"sha": "1c5d3b665a2c7f0df8bb3d513e44552ac5537131", "filename": "gcc/tm.texi", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8468bc70accc102d7e1ba002704054393af5ff9/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8468bc70accc102d7e1ba002704054393af5ff9/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=b8468bc70accc102d7e1ba002704054393af5ff9", "patch": "@@ -546,10 +546,13 @@ bits in @code{target_flags}.  Its definition is an initializer\n with a subgrouping for each command option.\n \n Each subgrouping contains a string constant, that defines the option\n-name, and a number, which contains the bits to set in\n-@code{target_flags}.  A negative number says to clear bits instead;\n-the negative of the number is which bits to clear.  The actual option\n-name is made by appending @samp{-m} to the specified name.\n+name, a number, which contains the bits to set in\n+@code{target_flags}, and a second string which is the description\n+displayed by --help.  If the number is negative then the bits specified\n+by the number are cleared instead of being set.  If the description\n+string is present but empty, then no help information will be displayed\n+for that option, but it will not count as an undocumented option.  The\n+actual option name is made by appending @samp{-m} to the specified name.\n \n One of the subgroupings should have a null string.  The number in\n this grouping is the default value for @code{target_flags}.  Any\n@@ -560,9 +563,9 @@ with opposite meanings, and picks the latter as the default:\n \n @smallexample\n #define TARGET_SWITCHES \\\n-  @{ @{ \"68020\", 1@},      \\\n-    @{ \"68000\", -1@},     \\\n-    @{ \"\", 1@}@}\n+  @{ @{ \"68020\", 1, \"\" @},      \\\n+    @{ \"68000\", -1, \"Compile for the 68000\" @}, \\\n+    @{ \"\", 1, \"\" @}@}\n @end smallexample\n \n @findex TARGET_OPTIONS\n@@ -572,10 +575,10 @@ options that have values.  Its definition is an initializer with a\n subgrouping for each command option.\n \n Each subgrouping contains a string constant, that defines the fixed part\n-of the option name, and the address of a variable.  The variable, type\n-@code{char *}, is set to the variable part of the given option if the fixed\n-part matches.  The actual option name is made by appending @samp{-m} to the\n-specified name.\n+of the option name, the address of a variable, and a description string.\n+The variable, type @code{char *}, is set to the variable part of the\n+given option if the fixed part matches.  The actual option name is made\n+by appending @samp{-m} to the specified name.\n \n Here is an example which defines @samp{-mshort-data-@var{number}}.  If the\n given option is @samp{-mshort-data-512}, the variable @code{m88k_short_data}\n@@ -584,7 +587,7 @@ will be set to the string @code{\"512\"}.\n @smallexample\n extern char *m88k_short_data;\n #define TARGET_OPTIONS \\\n- @{ @{ \"short-data-\", &m88k_short_data @} @}\n+ @{ @{ \"short-data-\", &m88k_short_data, \"Specify the size of the short data section\" @} @}\n @end smallexample\n \n @findex TARGET_VERSION"}, {"sha": "fb6b8593900b27de7560149647a13629c03b28af", "filename": "gcc/toplev.c", "status": "modified", "additions": 602, "deletions": 250, "changes": 852, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8468bc70accc102d7e1ba002704054393af5ff9/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8468bc70accc102d7e1ba002704054393af5ff9/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=b8468bc70accc102d7e1ba002704054393af5ff9", "patch": "@@ -209,6 +209,7 @@ static void close_dump_file PROTO((void (*) (FILE *, rtx), rtx));\n static void dump_rtl PROTO((char *, tree, void (*) (FILE *, rtx), rtx));\n static void clean_dump_file PROTO((char *));\n static void compile_file PROTO((char *));\n+static void display_help PROTO ((void));\n \n void print_version ();\n int print_single_switch ();\n@@ -722,216 +723,376 @@ int flag_strict_aliasing = 0;\n \n extern int flag_dump_unnumbered;\n \n+\n+/* Table of supported debugging formats.  */\n+static struct\n+{\n+  char * arg;\n+  /* Since PREFERRED_DEBUGGING_TYPE isn't necessarily a\n+     constant expression, we use NO_DEBUG in its place.  */\n+  enum debug_info_type debug_type;\n+  int use_extensions_p;\n+  char * description;\n+} *da,\n+debug_args[] =\n+{\n+  { \"g\",    NO_DEBUG, DEFAULT_GDB_EXTENSIONS,\n+    \"Generate default debug format output\" },\n+  { \"ggdb\", NO_DEBUG, 1, \"Generate default extended debug format output\" },\n+#ifdef DBX_DEBUGGING_INFO\n+  { \"gstabs\",  DBX_DEBUG, 0, \"Generate STABS format debug output\" },\n+  { \"gstabs+\", DBX_DEBUG, 1, \"Generate extended STABS format debug output\" },\n+#endif\n+#ifdef DWARF_DEBUGGING_INFO\n+  { \"gdwarf\",  DWARF_DEBUG, 0, \"Generate DWARF-1 format debug output\"},\n+  { \"gdwarf+\", DWARF_DEBUG, 1,\n+    \"Generated extended DWARF-1 format debug output\" },\n+#endif\n+#ifdef DWARF2_DEBUGGING_INFO\n+  { \"gdwarf-2\", DWARF2_DEBUG, 0, \"Enable DWARF-2 debug output\" },\n+#endif\n+#ifdef XCOFF_DEBUGGING_INFO\n+  { \"gxcoff\",  XCOFF_DEBUG, 0, \"Generate XCOFF format debug output\" },\n+  { \"gxcoff+\", XCOFF_DEBUG, 1, \"Generate extended XCOFF format debug output\" },\n+#endif\n+#ifdef SDB_DEBUGGING_INFO\n+  { \"gcoff\", SDB_DEBUG, 0, \"Generate COFF format debug output\" },\n+#endif\n+  { 0, 0, 0 }\n+};\n+\n+typedef struct\n+{\n+  char * string;\n+  int *  variable;\n+  int    on_value;\n+  char * description;\n+}\n+lang_independent_options;\n+\n /* Table of language-independent -f options.\n    STRING is the option name.  VARIABLE is the address of the variable.\n    ON_VALUE is the value to store in VARIABLE\n     if `-fSTRING' is seen as an option.\n    (If `-fno-STRING' is seen as an option, the opposite value is stored.)  */\n \n-struct { char *string; int *variable; int on_value;} f_options[] =\n+lang_independent_options f_options[] =\n {\n-  {\"float-store\", &flag_float_store, 1},\n-  {\"volatile\", &flag_volatile, 1},\n-  {\"volatile-global\", &flag_volatile_global, 1},\n-  {\"defer-pop\", &flag_defer_pop, 1},\n-  {\"omit-frame-pointer\", &flag_omit_frame_pointer, 1},\n-  {\"cse-follow-jumps\", &flag_cse_follow_jumps, 1},\n-  {\"cse-skip-blocks\", &flag_cse_skip_blocks, 1},\n-  {\"expensive-optimizations\", &flag_expensive_optimizations, 1},\n-  {\"thread-jumps\", &flag_thread_jumps, 1},\n-  {\"strength-reduce\", &flag_strength_reduce, 1},\n-  {\"unroll-loops\", &flag_unroll_loops, 1},\n-  {\"unroll-all-loops\", &flag_unroll_all_loops, 1},\n-  {\"move-all-movables\", &flag_move_all_movables, 1},\n-  {\"reduce-all-givs\", &flag_reduce_all_givs, 1},\n-  {\"writable-strings\", &flag_writable_strings, 1},\n-  {\"peephole\", &flag_no_peephole, 0},\n-  {\"force-mem\", &flag_force_mem, 1},\n-  {\"force-addr\", &flag_force_addr, 1},\n-  {\"function-cse\", &flag_no_function_cse, 0},\n-  {\"inline-functions\", &flag_inline_functions, 1},\n-  {\"keep-inline-functions\", &flag_keep_inline_functions, 1},\n-  {\"inline\", &flag_no_inline, 0},\n-  {\"keep-static-consts\", &flag_keep_static_consts, 1},\n-  {\"syntax-only\", &flag_syntax_only, 1},\n-  {\"shared-data\", &flag_shared_data, 1},\n-  {\"caller-saves\", &flag_caller_saves, 1},\n-  {\"pcc-struct-return\", &flag_pcc_struct_return, 1},\n-  {\"reg-struct-return\", &flag_pcc_struct_return, 0},\n-  {\"delayed-branch\", &flag_delayed_branch, 1},\n-  {\"gcse\", &flag_gcse, 1},\n-  {\"rerun-cse-after-loop\", &flag_rerun_cse_after_loop, 1},\n-  {\"rerun-loop-opt\", &flag_rerun_loop_opt, 1},\n-  {\"pretend-float\", &flag_pretend_float, 1},\n-  {\"schedule-insns\", &flag_schedule_insns, 1},\n-  {\"schedule-insns2\", &flag_schedule_insns_after_reload, 1},\n+  {\"float-store\", &flag_float_store, 1,\n+   \"Do not store floats in registers\" },\n+  {\"volatile\", &flag_volatile, 1,\n+   \"Consider all mem refs through pointers as volatile\"},\n+  {\"volatile-global\", &flag_volatile_global, 1,\n+   \"Consider all mem refs to global data to be volatile\" },\n+  {\"defer-pop\", &flag_defer_pop, 1,\n+   \"Defer popping functions args from stack until later\" },\n+  {\"omit-frame-pointer\", &flag_omit_frame_pointer, 1,\n+   \"When possible do not generate stack frames\"},\n+  {\"cse-follow-jumps\", &flag_cse_follow_jumps, 1,\n+   \"When running CSE, follow jumps to their targets\" },\n+  {\"cse-skip-blocks\", &flag_cse_skip_blocks, 1,\n+   \"When running CSE, follow conditional jumps\" },\n+  {\"expensive-optimizations\", &flag_expensive_optimizations, 1,\n+   \"Perform a number of minor, expensive optimisations\" },\n+  {\"thread-jumps\", &flag_thread_jumps, 1,\n+   \"Perform jump threading optimisations\"},\n+  {\"strength-reduce\", &flag_strength_reduce, 1,\n+   \"Perform strength reduction optimisations\" },\n+  {\"unroll-loops\", &flag_unroll_loops, 1,\n+   \"Perform loop unrolling when interation count is known\" },\n+  {\"unroll-all-loops\", &flag_unroll_all_loops, 1,\n+   \"Perofm loop onrolling for all loops\" },\n+  {\"move-all-movables\", &flag_move_all_movables, 1,\n+   \"Force all loop invariant computations out of loops\" },\n+  {\"reduce-all-givs\", &flag_reduce_all_givs, 1,\n+   \"Strength reduce all loop general induction variables\" },\n+  {\"writable-strings\", &flag_writable_strings, 1,\n+   \"Store strings in writable data section\" },\n+  {\"peephole\", &flag_no_peephole, 0,\n+   \"Enable machine specific peephole optimisations\" },\n+  {\"force-mem\", &flag_force_mem, 1,\n+   \"Copy memory operands into registers before using\" },\n+  {\"force-addr\", &flag_force_addr, 1,\n+   \"Copy memory address constants into regs before using\" },\n+  {\"function-cse\", &flag_no_function_cse, 0,\n+   \"Allow function addresses to be held in registers\" },\n+  {\"inline-functions\", &flag_inline_functions, 1,\n+   \"Integrate simple functions into their callers\" },\n+  {\"keep-inline-functions\", &flag_keep_inline_functions, 1,\n+   \"Generate code for funcs even if they are fully inlined\" },\n+  {\"inline\", &flag_no_inline, 0,\n+   \"Pay attention to the 'inline' keyword\"},\n+  {\"keep-static-consts\", &flag_keep_static_consts, 1,\n+   \"Emit static const variables even if they are not used\" },\n+  {\"syntax-only\", &flag_syntax_only, 1,\n+   \"Check for syntax errors, then stop\" },\n+  {\"shared-data\", &flag_shared_data, 1,\n+   \"Mark data as shared rather than private\" },\n+  {\"caller-saves\", &flag_caller_saves, 1,\n+   \"Enable saving registers around function calls\" },\n+  {\"pcc-struct-return\", &flag_pcc_struct_return, 1,\n+   \"Return 'short' aggregates in memory, not registers\" },\n+  {\"reg-struct-return\", &flag_pcc_struct_return, 0,\n+   \"Return 'short' aggregates in registers\" },\n+  {\"delayed-branch\", &flag_delayed_branch, 1,\n+   \"Attempt to fill delay slots of branch instructions\" },\n+  {\"gcse\", &flag_gcse, 1,\n+   \"Perform the global common subexpression elimination\" },\n+  {\"rerun-cse-after-loop\", &flag_rerun_cse_after_loop, 1,\n+   \"Run CSE pass after loop optimisations\"},\n+  {\"rerun-loop-opt\", &flag_rerun_loop_opt, 1,\n+   \"Run the loop optimiser twice\"},\n+  {\"pretend-float\", &flag_pretend_float, 1,\n+   \"Pretend that host and target use the same FP format\"},\n+  {\"schedule-insns\", &flag_schedule_insns, 1,\n+   \"Reschedule instructions to avoid pipeline stalls\"},\n+  {\"schedule-insns2\", &flag_schedule_insns_after_reload, 1,\n+  \"Run two passes of the instruction scheduler\"},\n #ifdef HAIFA\n-  {\"sched-interblock\",&flag_schedule_interblock, 1},\n-  {\"sched-spec\",&flag_schedule_speculative, 1},\n-  {\"sched-spec-load\",&flag_schedule_speculative_load, 1},\n-  {\"sched-spec-load-dangerous\",&flag_schedule_speculative_load_dangerous, 1},\n-  {\"branch-count-reg\",&flag_branch_on_count_reg, 1},\n+  {\"sched-interblock\",&flag_schedule_interblock, 1,\n+   \"Enable scheduling across basic blocks\" },\n+  {\"sched-spec\",&flag_schedule_speculative, 1,\n+   \"Allow speculative motion of non-loads\" },\n+  {\"sched-spec-load\",&flag_schedule_speculative_load, 1,\n+   \"Allow speculative motion of some loads\" },\n+  {\"sched-spec-load-dangerous\",&flag_schedule_speculative_load_dangerous, 1,\n+   \"Allow speculative motion of more loads\" },\n+  {\"branch-count-reg\",&flag_branch_on_count_reg, 1,\n+   \"Replace add,compare,branch with branch on count register\"},\n #endif  /* HAIFA */\n-  {\"pic\", &flag_pic, 1},\n-  {\"PIC\", &flag_pic, 2},\n-  {\"exceptions\", &flag_exceptions, 1},\n-  {\"new-exceptions\", &flag_new_exceptions, 1},\n-  {\"sjlj-exceptions\", &exceptions_via_longjmp, 1},\n-  {\"asynchronous-exceptions\", &asynchronous_exceptions, 1},\n-  {\"profile-arcs\", &profile_arc_flag, 1},\n-  {\"test-coverage\", &flag_test_coverage, 1},\n-  {\"branch-probabilities\", &flag_branch_probabilities, 1},\n-  {\"fast-math\", &flag_fast_math, 1},\n-  {\"common\", &flag_no_common, 0},\n-  {\"inhibit-size-directive\", &flag_inhibit_size_directive, 1},\n-  {\"function-sections\", &flag_function_sections, 1},\n-  {\"verbose-asm\", &flag_verbose_asm, 1},\n-  {\"gnu-linker\", &flag_gnu_linker, 1},\n-  {\"regmove\", &flag_regmove, 1},\n+  {\"pic\", &flag_pic, 1,\n+   \"Generate position independent code, if possible\"},\n+  {\"PIC\", &flag_pic, 2, \"\"},\n+  {\"exceptions\", &flag_exceptions, 1,\n+   \"Enable exception handling\" },\n+  {\"new-exceptions\", &flag_new_exceptions, 1,\n+   \"Use the new model for exception handling\" },\n+  {\"sjlj-exceptions\", &exceptions_via_longjmp, 1,\n+   \"Use setjmp/longjmp to handle exceptions\" },\n+  {\"asynchronous-exceptions\", &asynchronous_exceptions, 1,\n+   \"Support asynchronous exceptions\" },\n+  {\"profile-arcs\", &profile_arc_flag, 1,\n+   \"Insert arc based program profiling code\" },\n+  {\"test-coverage\", &flag_test_coverage, 1,\n+   \"Create data files needed by gcov\" },\n+  {\"branch-probabilities\", &flag_branch_probabilities, 1,\n+   \"Use profiling information for branch porbabilities\" },\n+  {\"fast-math\", &flag_fast_math, 1,\n+   \"Improve FP speed by violating ANSI & IEEE rules\" },\n+  {\"common\", &flag_no_common, 0,\n+   \"Do not put unitialised globals in the common section\" },\n+  {\"inhibit-size-directive\", &flag_inhibit_size_directive, 1,\n+   \"Do not generate .size directives\" },\n+  {\"function-sections\", &flag_function_sections, 1,\n+   \"place each function into its own section\" },\n+  {\"verbose-asm\", &flag_verbose_asm, 1,\n+   \"Add extra commentry to assembler output\"},\n+  {\"gnu-linker\", &flag_gnu_linker, 1,\n+   \"Output GNU ld formatted global initialisers\"},\n+  {\"regmove\", &flag_regmove, 1,\n+   \"Enables a regoster move optimisation\"},\n   {\"optimize-register-move\", &flag_regmove, 1},\n-  {\"pack-struct\", &flag_pack_struct, 1},\n-  {\"stack-check\", &flag_stack_check, 1},\n-  {\"argument-alias\", &flag_argument_noalias, 0},\n-  {\"argument-noalias\", &flag_argument_noalias, 1},\n-  {\"argument-noalias-global\", &flag_argument_noalias, 2},\n-  {\"strict-aliasing\", &flag_strict_aliasing, 1},\n-  {\"check-memory-usage\", &flag_check_memory_usage, 1},\n-  {\"prefix-function-name\", &flag_prefix_function_name, 1},\n+  {\"pack-struct\", &flag_pack_struct, 1,\n+   \"Pack structure members together without holes\" },\n+  {\"stack-check\", &flag_stack_check, 1,\n+   \"Insert stack checking code into the program\" },\n+  {\"argument-alias\", &flag_argument_noalias, 0,\n+   \"Specify that arguments may alias each other & globals\"},\n+  {\"argument-noalias\", &flag_argument_noalias, 1,\n+   \"Assume arguments may alias globals but not each other\"},\n+  {\"argument-noalias-global\", &flag_argument_noalias, 2,\n+   \"Assume arguments do not alias each other or globals\" },\n+  {\"strict-aliasing\", &flag_strict_aliasing, 1,\n+   \"Assume strict aliasing rules apply\" },\n+  {\"check-memory-usage\", &flag_check_memory_usage, 1,\n+   \"Generate code to check every memory access\" },\n+  {\"prefix-function-name\", &flag_prefix_function_name, 1,\n+   \"Add a prefix to all function names\" },\n   {\"dump-unnumbered\", &flag_dump_unnumbered, 1}\n };\n \n+#define NUM_ELEM(a)  (sizeof (a) / sizeof ((a)[0]))\n+\n /* Table of language-specific options.  */\n \n-char *lang_options[] =\n+static struct lang_opt\n {\n-  \"-ansi\",\n-  \"-fallow-single-precision\",\n-\n-  \"-fsigned-bitfields\",\n-  \"-funsigned-bitfields\",\n-  \"-fno-signed-bitfields\",\n-  \"-fno-unsigned-bitfields\",\n-  \"-fsigned-char\",\n-  \"-funsigned-char\",\n-  \"-fno-signed-char\",\n-  \"-fno-unsigned-char\",\n-\n-  \"-ftraditional\",\n-  \"-traditional\",\n-  \"-fnotraditional\",\n-  \"-fno-traditional\",\n-\n-  \"-fasm\",\n-  \"-fno-asm\",\n-  \"-fbuiltin\",\n-  \"-fno-builtin\",\n-  \"-fhosted\",\n-  \"-fno-hosted\",\n-  \"-ffreestanding\",\n-  \"-fno-freestanding\",\n-  \"-fcond-mismatch\",\n-  \"-fno-cond-mismatch\",\n-  \"-fdollars-in-identifiers\",\n-  \"-fno-dollars-in-identifiers\",\n-  \"-fident\",\n-  \"-fno-ident\",\n-  \"-fshort-double\",\n-  \"-fno-short-double\",\n-  \"-fshort-enums\",\n-  \"-fno-short-enums\",\n-\n-  \"-Wall\",\n-  \"-Wbad-function-cast\",\n-  \"-Wno-bad-function-cast\",\n-  \"-Wcast-qual\",\n-  \"-Wno-cast-qual\",\n-  \"-Wchar-subscripts\",\n-  \"-Wno-char-subscripts\",\n-  \"-Wcomment\",\n-  \"-Wno-comment\",\n-  \"-Wcomments\",\n-  \"-Wno-comments\",\n-  \"-Wconversion\",\n-  \"-Wno-conversion\",\n-  \"-Wformat\",\n-  \"-Wno-format\",\n-  \"-Wimport\",\n-  \"-Wno-import\",\n-  \"-Wimplicit-function-declaration\",\n-  \"-Wno-implicit-function-declaration\",\n-  \"-Werror-implicit-function-declaration\",\n-  \"-Wimplicit-int\",\n-  \"-Wno-implicit-int\",\n-  \"-Wimplicit\",\n-  \"-Wno-implicit\",\n-  \"-Wlong-long\",\n-  \"-Wno-long-long\",\n-  \"-Wmain\",\n-  \"-Wno-main\",\n-  \"-Wmissing-braces\",\n-  \"-Wno-missing-braces\",\n-  \"-Wmissing-declarations\",\n-  \"-Wno-missing-declarations\",\n-  \"-Wmissing-prototypes\",\n-  \"-Wno-missing-prototypes\",\n-  \"-Wmultichar\",\n-  \"-Wno-multichar\",\n-  \"-Wnested-externs\",\n-  \"-Wno-nested-externs\",\n-  \"-Wparentheses\",\n-  \"-Wno-parentheses\",\n-  \"-Wpointer-arith\",\n-  \"-Wno-pointer-arith\",\n-  \"-Wredundant-decls\",\n-  \"-Wno-redundant-decls\",\n-  \"-Wsign-compare\",\n-  \"-Wno-sign-compare\",\n-  \"-Wunknown-pragmas\",\n-  \"-Wno-unknown-pragmas\",\n-  \"-Wstrict-prototypes\",\n-  \"-Wno-strict-prototypes\",\n-  \"-Wtraditional\",\n-  \"-Wno-traditional\",\n-  \"-Wtrigraphs\",\n-  \"-Wno-trigraphs\",\n-  \"-Wundef\",\n-  \"-Wno-undef\",\n-  \"-Wwrite-strings\",\n-  \"-Wno-write-strings\",\n-\n-  /* these are for obj c */\n-  \"-lang-objc\",\n-  \"-gen-decls\",\n-  \"-fgnu-runtime\",\n-  \"-fno-gnu-runtime\",\n-  \"-fnext-runtime\",\n-  \"-fno-next-runtime\",\n-  \"-Wselector\",\n-  \"-Wno-selector\",\n-  \"-Wprotocol\",\n-  \"-Wno-protocol\",\n-  \"-print-objc-runtime-info\",\n+  char * option;\n+  char * description;\n+}\n+documented_lang_options[] =\n+{\n+  /* In order not to overload the --help output, the convention\n+     used here is to only describe those options which are not\n+     enabled by default.  */\n+\n+  { \"-ansi\", \"Compile just for ANSI C\" },\n+  { \"-fallow-single-precision\",\n+    \"Do not promote floats to double if using -traditional\" },\n+\n+  { \"-fsigned-bitfields\", \"\" },\n+  { \"-funsigned-bitfields\",\"Make bitfields by unsigned by default\" },\n+  { \"-fno-signed-bitfields\", \"\" },\n+  { \"-fno-unsigned-bitfields\",\"\" },\n+  { \"-fsigned-char\", \"Make 'char' be signed by default\"},\n+  { \"-funsigned-char\", \"Make 'char' be unsigned by default\"},\n+  { \"-fno-signed-char\", \"\" },\n+  { \"-fno-unsigned-char\", \"\" },\n+\n+  { \"-ftraditional\", \"\" },\n+  { \"-traditional\", \"Attempt to support traditional K&R style C\"},\n+  { \"-fnotraditional\", \"\" },\n+  { \"-fno-traditional\", \"\" },\n+\n+  { \"-fasm\", \"\" },\n+  { \"-fno-asm\", \"Do not recognise the 'asm' keyword\" },\n+  { \"-fbuiltin\", \"\" },\n+  { \"-fno-builtin\", \"Do not recognise any built in functions\" },\n+  { \"-fhosted\", \"Assume normal C execution environment\" },\n+  { \"-fno-hosted\", \"\" },\n+  { \"-ffreestanding\",\n+    \"Assume that standard libraries & main might not exist\" },\n+  { \"-fno-freestanding\", \"\" },\n+  { \"-fcond-mismatch\", \"Allow different types as args of ? operator\"},\n+  { \"-fno-cond-mismatch\", \"\" },\n+  { \"-fdollars-in-identifiers\", \"Allow the use of $ inside indentifiers\" },\n+  { \"-fno-dollars-in-identifiers\", \"\" },\n+  { \"-fident\", \"\" },\n+  { \"-fno-ident\", \"Ignore #ident directives\" },\n+  { \"-fshort-double\", \"Use the same size for double as for float\" },\n+  { \"-fno-short-double\", \"\" },\n+  { \"-fshort-enums\", \"Use the smallest fitting integer to hold enums\"},\n+  { \"-fno-short-enums\", \"\" },\n+\n+  { \"-Wall\", \"Enable most warning messages\" },\n+  { \"-Wbad-function-cast\",\n+    \"Warn about casting functions to incompatible types\" },\n+  { \"-Wno-bad-function-cast\", \"\" },\n+  { \"-Wcast-qual\", \"Warn about casts which discard qualifiers\"},\n+  { \"-Wno-cast-qual\", \"\" },\n+  { \"-Wchar-subscripts\", \"Warn about subscripts whoes type is 'char'\"},\n+  { \"-Wno-char-subscripts\", \"\" },\n+  { \"-Wcomment\", \"Warn if nested comments are detected\" },\n+  { \"-Wno-comment\", },\n+  { \"-Wcomments\", },\n+  { \"-Wno-comments\", },\n+  { \"-Wconversion\", \"Warn about possibly confusing type conversions\" },\n+  { \"-Wno-conversion\", \"\" },\n+  { \"-Wformat\", \"Warn about printf format anomalies\" },\n+  { \"-Wno-format\", \"\" },\n+  { \"-Wimplicit-function-declaration\",\n+    \"Warn about implicit function declarations\" },\n+  { \"-Wno-implicit-function-declaration\", \"\" },\n+  { \"-Werror-implicit-function-declaration\", \"\" },\n+  { \"-Wimplicit-int\", \"Warn when a declaration does not specify a type\" },\n+  { \"-Wno-implicit-int\", \"\" },\n+  { \"-Wimplicit\", \"\" },\n+  { \"-Wno-implicit\", \"\" },\n+  { \"-Wimport\", \"Warn about the use of the #import directive\" },\n+  { \"-Wno-import\", \"\" },\n+  { \"-Wlong-long\",\"\" },\n+  { \"-Wno-long-long\", \"Do not warn about using 'long long' when -pedantic\" },\n+  { \"-Wmain\", \"Warn about suspicious declarations of main\" },\n+  { \"-Wno-main\", \"\" },\n+  { \"-Wmissing-braces\",\n+    \"Warn about possibly missing braces around initialisers\" },\n+  { \"-Wno-missing-braces\", \"\" },\n+  { \"-Wmissing-declarations\",\n+    \"Warn about global funcs without previous declarations\"},\n+  { \"-Wno-missing-declarations\", \"\" },\n+  { \"-Wmissing-prototypes\", \"Warn about global funcs without prototypes\" },\n+  { \"-Wno-missing-prototypes\", \"\" },\n+  { \"-Wmultichar\", \"Warn about use of multicharacter literals\"},\n+  { \"-Wno-multichar\", \"\" },\n+  { \"-Wnested-externs\", \"Warn about externs not at file scope level\" },\n+  { \"-Wno-nested-externs\", \"\" },\n+  { \"-Wparentheses\", \"Warn about possible missing parentheses\" },\n+  { \"-Wno-parentheses\", \"\" },\n+  { \"-Wpointer-arith\", \"Warn about function pointer arithmetic\" },\n+  { \"-Wno-pointer-arith\", \"\" },\n+  { \"-Wredundant-decls\",\n+    \"Warn about multiple declarations of the same object\" },\n+  { \"-Wno-redundant-decls\", \"\" },\n+  { \"-Wsign-compare\", \"Warn about signed/unsigned comparisons\" },\n+  { \"-Wno-sign-compare\", \"\" },\n+  { \"-Wunknown-pragmas\", \"Warn about unrecognised pragmas\" },\n+  { \"-Wno-unknown-pragmas\", \"\" },\n+  { \"-Wstrict-prototypes\", \"Warn about non-prototyped function decls\" },\n+  { \"-Wno-strict-prototypes\", \"\" },\n+  { \"-Wtraditional\", \"Warn about constructs whoes meaning change in ANSI C\"},\n+  { \"-Wno-traditional\", \"\" },\n+  { \"-Wtrigraphs\", \"Warn when trigraphs are encountered\" },\n+  { \"-Wno-trigraphs\", \"\" },\n+  { \"-Wundef\", \"\" },\n+  { \"-Wno-undef\", \"\" },\n+  { \"-Wwrite-strings\", \"Mark strings as 'const char *'\"},\n+  { \"-Wno-write-strings\", \"\" },\n \n   /* These are for languages with USE_CPPLIB.  */\n-  \"-A\",\n-  \"-D\",\n-  \"-I\",\n-  \"-U\",\n-  \"-idirafter\",\n-  \"-iprefix\",\n-  \"-isystem\",\n-  \"-lang-c\",\n-  \"-lang-c89\",\n-  \"-lang-c++\",\n-  \"-nostdinc\",\n-  \"-nostdinc++\",\n-  \"-trigraphs\",\n-  \"-undef\",\n-  \"-remap\",\n+  /* These options are already documented in cpplib.c */\n+  { \"-A\", \"\" },\n+  { \"-D\", \"\" },\n+  { \"-I\", \"\" },\n+  { \"-U\", \"\" },\n+  { \"-idirafter\", \"\" },\n+  { \"-iprefix\", \"\" },\n+  { \"-isystem\", \"\" },\n+  { \"-lang-c\", \"\" },\n+  { \"-lang-c89\", \"\" },\n+  { \"-lang-c++\", \"\" },\n+  { \"-nostdinc\", \"\" },\n+  { \"-nostdinc++\", \"\" },\n+  { \"-trigraphs\", \"\" },\n+  { \"-undef\", \"\" },\n+  { \"-remap\", \"\" },\n+  \n+#define DEFINE_LANG_NAME(NAME) { NULL, NAME },\n+  \n+  /* These are for obj c.  */\n+  DEFINE_LANG_NAME (\"Objective C\")\n+  \n+  { \"-lang-objc\", \"\" },\n+  { \"-gen-decls\", \"Dump decls to a .decl file\" },\n+  { \"-fgnu-runtime\", \"Generate code for GNU runtime envrionment\" },\n+  { \"-fno-gnu-runtime\", \"\" },\n+  { \"-fnext-runtime\", \"Generate code for NeXT runtime environment\" },\n+  { \"-fno-next-runtime\", \"\" },\n+  { \"-Wselector\", \"Warn if a selector has multiple methods\" },\n+  { \"-Wno-selector\", \"\" },\n+  { \"-Wprotocol\", \"\" },\n+  { \"-Wno-protocol\", \"Do not warn if inherited methods are unimplemented\"},\n+  { \"-print-objc-runtime-info\",\n+    \"Generate C header of platform specific features\" },\n \n #include \"options.h\"\n-  0\n+  \n };\n+\n+/* Here is a table, controlled by the tm.h file, listing each -m switch\n+   and which bits in `target_switches' it should set or clear.\n+   If VALUE is positive, it is bits to set.\n+   If VALUE is negative, -VALUE is bits to clear.\n+   (The sign bit is not used so there is no confusion.)  */\n+\n+struct\n+{\n+  char * name;\n+  int    value;\n+  char * description;\n+}\n+target_switches [] = TARGET_SWITCHES;\n+\n+/* This table is similar, but allows the switch to have a value.  */\n+\n+#ifdef TARGET_OPTIONS\n+struct\n+{\n+  char *  prefix;\n+  char ** variable;\n+  char *  description;\n+}\n+target_options [] = TARGET_OPTIONS;\n+#endif\n \f\n /* Options controlling warnings */\n \n@@ -998,16 +1159,21 @@ int warn_aggregate_return;\n \n /* Likewise for -W.  */\n \n-struct { char *string; int *variable; int on_value;} W_options[] =\n+lang_independent_options W_options[] =\n {\n-  {\"unused\", &warn_unused, 1},\n-  {\"error\", &warnings_are_errors, 1},\n-  {\"shadow\", &warn_shadow, 1},\n-  {\"switch\", &warn_switch, 1},\n-  {\"aggregate-return\", &warn_aggregate_return, 1},\n-  {\"cast-align\", &warn_cast_align, 1},\n-  {\"uninitialized\", &warn_uninitialized, 1},\n-  {\"inline\", &warn_inline, 1}\n+  {\"unused\", &warn_unused, 1, \"Warn when a variable is unused\" },\n+  {\"error\", &warnings_are_errors, 1, \"\"},\n+  {\"shadow\", &warn_shadow, 1, \"Warn when one local variable shadows another\" },\n+  {\"switch\", &warn_switch, 1,\n+   \"Warn about enumerated switches missing a specific case\" },\n+  {\"aggregate-return\", &warn_aggregate_return, 1,\n+   \"Warn about returning structures, unions or arrays\" },\n+  {\"cast-align\", &warn_cast_align, 1,\n+   \"Warn about pointer casts which increase alignment\" },\n+  {\"uninitialized\", &warn_uninitialized, 1,\n+   \"Warn about unitialized automatic variables\"},\n+  {\"inline\", &warn_inline, 1,\n+   \"Warn when an inlined function cannot be inlined\"}\n };\n \f\n /* Output files for assembler code (real compiler output)\n@@ -3767,6 +3933,232 @@ rest_of_compilation (decl)\n   parse_time -= get_run_time () - start_time;\n }\n \f\n+static void\n+display_help ()\n+{\n+  int    undoc;\n+  long\t i;\n+  char * lang;\n+  \n+  printf (\"Usage: %s input [switches]\\n\", progname);\n+  printf (\"Switches:\\n\");\n+  printf (\"  -ffixed-<register>      Mark <register> as being unavailable to the compiler\\n\");\n+  printf (\"  -fcall-used-<register>  Mark <register> as being corrupted by function calls\\n\");\n+  printf (\"  -fcall-saved-<register> Mark <register> as being preserved across functions\\n\");\n+\n+  for (i = NUM_ELEM (f_options); i--;)\n+    {\n+      char * description = f_options[i].description;\n+      \n+      if (description != NULL && * description != 0)\n+\tprintf (\"  -f%-21s %s\\n\",\n+\t\tf_options[i].string, description);\n+    }\n+  \n+  printf (\"  -O[number]              Set optimisation level to [number]\\n\");\n+  printf (\"  -Os                     Optimise for space rather than speed\\n\");\n+  printf (\"  -pedantic               Issue warnings needed by strict compliance to ANSI C\\n\");\n+  printf (\"  -pedantic-errors        Like -pedantic except that errors are produced\\n\");\n+  printf (\"  -w                      Suppress warnings\\n\");\n+  printf (\"  -W                      Enable extra warnings\\n\");\n+  \n+  for (i = NUM_ELEM (W_options); i--;)\n+    {\n+      char * description = W_options[i].description;\n+      \n+      if (description != NULL && * description != 0)\n+\tprintf (\"  -W%-21s %s\\n\",\n+\t\tW_options[i].string, description);\n+    }\n+  \n+  printf (\"  -Wid-clash-<num>        Warn if 2 identifiers have the same first <num> chars\\n\");\n+  printf (\"  -Wlarger-than-<number>  Warn if an object is larger than <number> bytes\\n\");\n+  printf (\"  -p                      Enable function profiling\\n\");\n+#if defined (BLOCK_PROFILER) || defined (FUNCTION_BLOCK_PROFILER)\n+  printf (\"  -a                      Enable block profiling \\n\");\n+#endif  \n+#if defined (BLOCK_PROFILER) || defined (FUNCTION_BLOCK_PROFILER) || defined FUNCTION_BLOCK_PROFILER_EXIT\n+  printf (\"  -ax                     Enable jump profiling \\n\");\n+#endif  \n+  printf (\"  -o <file>               Place output into <file> \\n\");\n+  printf (\"  -G <number>             Put global and static data smaller than <number>\\n\");\n+  printf (\"                           bytes into a special section [on some targets]\\n\");\n+  \n+  for (i = NUM_ELEM (debug_args); i--;)\n+    {\n+      if (debug_args[i].description != NULL)\n+\tprintf (\"  -%-22s %s\\n\", debug_args[i].arg, debug_args[i].description);\n+    }\n+  \n+  printf (\"  -aux-info <file>        Emit declaration info into <file>.X\\n\");\n+  printf (\"  -quiet                  Do not display functions compiled or elapsed time\\n\");\n+  printf (\"  -version                Display the compiler's version\\n\");\n+  printf (\"  -d[letters]             Enable dumps from specific passes of the compiler\\n\");\n+  printf (\"  -dumpbase <file>        Base name to be used for dumps from specific passes\\n\");\n+#if defined HAIFA || defined INSN_SCHEDULING\n+  printf (\"  -sched-verbose-<number> Set the verbosity level of the scheduler\\n\");\n+#endif\n+  printf (\"  --help                  Display this information\\n\");\n+\n+  undoc = 0;\n+  lang  = \"language\";\n+  \n+  /* Display descriptions of language specific options.\n+     If there is no description, note that there is an undocumented option.\n+     If the description is empty, do not display anything.  (This allows\n+     options to be deliberately undocumented, for whatever reason).\n+     If the option string is missing, then this is a marker, indicating\n+     that the description string is in fact the name of a language, whoes\n+     language specific options are to follow.  */\n+  \n+  if (NUM_ELEM (documented_lang_options) > 1)\n+    {\n+      int       looking_for_start = 0;\n+      \n+      printf (\"\\nLanguage specific options:\\n\");\n+\n+      for (i = 0; i < NUM_ELEM (documented_lang_options); i++)\n+\t{\n+\t  char * description = documented_lang_options[i].description;\n+\t  char * option      = documented_lang_options[i].option;\n+\n+\t  if (description == NULL)\n+\t    undoc = 1;\n+\t  else if (* description == 0)\n+\t    continue;\n+\t  else if (option == NULL)\n+\t    {\n+\t      if (undoc)\n+\t\tprintf\n+\t\t  (\"\\nThere are undocumented %s specific options as well.\\n\",\n+\t\t\tlang);\n+\t      undoc = 0;\n+\t      \n+\t      printf (\"\\n Options for %s:\\n\", description);\n+\n+\t      lang = description;\n+\t    }\n+\t  else\n+\t    printf (\"  %-23.23s %s\\n\", option, description);\n+\t}\n+    }\n+\n+  if (undoc)\n+    printf (\"\\nThere are undocumented %s specific options as well.\\n\", lang);\n+\n+  if (NUM_ELEM (target_switches) > 1\n+#ifdef TARGET_OPTIONS\n+      || NUM_ELEM (target_options) > 1\n+#endif\n+      )\n+    {\n+      int doc = 0;\n+      \n+      undoc = 0;\n+  \n+      printf (\"\\nTarget specific options:\\n\");\n+\n+      for (i = NUM_ELEM (target_switches); i--;)\n+\t{\n+\t  char * option      = target_switches[i].name;\n+\t  char * description = target_switches[i].description;\n+\n+\t  if (option == NULL)\n+\t    continue;\n+\t  else if (description == NULL)\n+\t    undoc = 1;\n+\t  else if (* description != 0)\n+\t    doc += printf (\"  %-23.23s %s\\n\", option, description);\n+\t}\n+      \n+#ifdef TARGET_OPTIONS      \n+      for (i = NUM_ELEM (target_options); i--;)\n+\t{\n+\t  char * option      = target_options[i].prefix;\n+\t  char * description = target_options[i].description;\n+\n+\t  if (option == NULL)\n+\t    continue;\n+\t  else if (description == NULL)\n+\t    undoc = 1;\n+\t  else if (* description != 0)\n+\t    doc += printf (\"  %-23.23s %s\\n\", option, description);\n+\t}\n+#endif\n+      if (undoc)\n+\tif (doc)\n+\t  printf (\"\\nThere are undocumented target specific options as well.\\n\");\n+\telse\n+\t  printf (\"  They exist, but they are not documented.\\n\");\n+    }\n+}\n+\n+/* Compare the user specified 'option' with the language\n+   specific 'lang_option'.  Return true if they match, or\n+   if 'option' is a viable prefix of 'lang_option'.  */\n+\n+static int\n+check_lang_option (option, lang_option)\n+     char * option;\n+     char * lang_option;\n+{\n+  lang_independent_options * indep_options;\n+  int    len;\n+  long    k;\n+\n+  /* Ignore NULL entries.  */\n+  if (option == NULL || lang_option == NULL)\n+    return 0;\n+\n+  len = strlen (lang_option);\n+\n+  /* If they do not match to the first n characters then fail.  */\n+  if (strncmp (option, lang_option, len) != 0)\n+    return 0;\n+\t  \n+  /* Do not accept a lang option, if it matches a normal -f or -W\n+     option.  Chill defines a -fpack, but we want to support\n+     -fpack-struct.  */\n+\t  \n+  /* An exact match is OK  */\n+  if (strlen (option) == len)\n+    return 1;\n+\n+  /* If it is not an -f or -W option allow the match */\n+  if (option[0] != '-')\n+    return 1;\n+\n+  switch (option[1])\n+    {\n+    case 'f': indep_options = f_options; break;\n+    case 'W': indep_options = W_options; break;\n+    default:  return 1;\n+    }\n+\n+  /* The option is a -f or -W option.\n+     Skip past the prefix and search for the remainder in the\n+     appropriate table of options.  */\n+  option += 2;\n+\t  \n+  if (option[0] == 'n' && option[1] == 'o' && option[2] == '-')\n+    option += 3;\n+\n+  for (k = NUM_ELEM (indep_options); k--;)\n+    {\n+      if (!strcmp (option, indep_options[k].string))\n+\t{\n+\t  /* The option matched a language independent option,\n+\t     do not allow the language specific match.  */\n+\n+\t  return 0;\n+\t}\n+    }\n+\n+  /* The option matches the start of the langauge specific option\n+     and it is not an exact match for a language independent option.  */\n+  return 1;\n+}\n+\f\n /* Entry point of cc1/c++.  Decode command args, then call compile_file.\n    Exit code is 35 if can't open files, 34 if fatal error,\n    33 if had nonfatal errors, else success.  */\n@@ -3914,13 +4306,14 @@ main (argc, argv, envp)\n   for (i = 1; i < argc; i++)\n     {\n       size_t j;\n+      \n       /* If this is a language-specific option,\n \t decode it in a language-specific way.  */\n-      for (j = 0; lang_options[j] != 0; j++)\n-\tif (!strncmp (argv[i], lang_options[j],\n-\t\t      strlen (lang_options[j])))\n+      for (j = NUM_ELEM (documented_lang_options); j--;)\n+\tif (check_lang_option (argv[i], documented_lang_options[j].option))\n \t  break;\n-      if (lang_options[j] != 0)\n+      \n+      if (j != -1)\n \t{\n \t  /* If the option is valid for *some* language,\n \t     treat it as valid even if this language doesn't understand it.  */\n@@ -4236,38 +4629,9 @@ main (argc, argv, envp)\n \t\t -g and -ggdb don't explicitly set the debugging format so\n \t\t -gdwarf -g3 is equivalent to -gdwarf3.  */\n \t      static int type_explicitly_set_p = 0;\n-\t      /* Table of supported debugging formats.  */\n-\t      static struct {\n-\t\tchar *arg;\n-\t\t/* Since PREFERRED_DEBUGGING_TYPE isn't necessarily a\n-\t\t   constant expression, we use NO_DEBUG in its place.  */\n-\t\tenum debug_info_type debug_type;\n-\t\tint use_extensions_p;\n-\t      } *da, debug_args[] = {\n-\t\t{ \"g\", NO_DEBUG, DEFAULT_GDB_EXTENSIONS },\n-\t\t{ \"ggdb\", NO_DEBUG, 1 },\n-#ifdef DBX_DEBUGGING_INFO\n-\t\t{ \"gstabs\", DBX_DEBUG, 0 },\n-\t\t{ \"gstabs+\", DBX_DEBUG, 1 },\n-#endif\n-#ifdef DWARF_DEBUGGING_INFO\n-\t\t{ \"gdwarf\", DWARF_DEBUG, 0 },\n-\t\t{ \"gdwarf+\", DWARF_DEBUG, 1 },\n-#endif\n-#ifdef DWARF2_DEBUGGING_INFO\n-\t\t{ \"gdwarf-2\", DWARF2_DEBUG, 0 },\n-#endif\n-#ifdef XCOFF_DEBUGGING_INFO\n-\t\t{ \"gxcoff\", XCOFF_DEBUG, 0 },\n-\t\t{ \"gxcoff+\", XCOFF_DEBUG, 1 },\n-#endif\n-#ifdef SDB_DEBUGGING_INFO\n-\t\t{ \"gcoff\", SDB_DEBUG, 0 },\n-#endif\n-\t\t{ 0, 0, 0 }\n-\t      };\n \t      /* Indexed by enum debug_info_type.  */\n-\t      static char *debug_type_names[] = {\n+\t      static char *debug_type_names[] =\n+\t      {\n \t\t\"none\", \"stabs\", \"coff\", \"dwarf-1\", \"dwarf-2\", \"xcoff\"\n \t      };\n \n@@ -4374,6 +4738,11 @@ main (argc, argv, envp)\n \t      flag_gen_aux_info = 1;\n \t      aux_info_file_name = (str[8] != '\\0' ? str+8 : argv[++i]);\n \t    }\n+\t  else if (!strcmp (str, \"-help\"))\n+\t    {\n+\t      display_help ();\n+\t      exit (0);\n+\t    }\n \t  else\n \t    error (\"Invalid option `%s'\", argv[i]);\n \t}\n@@ -4483,23 +4852,6 @@ main (argc, argv, envp)\n }\n \f\n /* Decode -m switches.  */\n-\n-/* Here is a table, controlled by the tm.h file, listing each -m switch\n-   and which bits in `target_switches' it should set or clear.\n-   If VALUE is positive, it is bits to set.\n-   If VALUE is negative, -VALUE is bits to clear.\n-   (The sign bit is not used so there is no confusion.)  */\n-\n-struct {char *name; int value;} target_switches []\n-  = TARGET_SWITCHES;\n-\n-/* This table is similar, but allows the switch to have a value.  */\n-\n-#ifdef TARGET_OPTIONS\n-struct {char *prefix; char ** variable;} target_options []\n-  = TARGET_OPTIONS;\n-#endif\n-\n /* Decode the switch -mNAME.  */\n \n void"}]}