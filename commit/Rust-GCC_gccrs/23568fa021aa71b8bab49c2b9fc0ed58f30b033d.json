{"sha": "23568fa021aa71b8bab49c2b9fc0ed58f30b033d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM1NjhmYTAyMWFhNzFiOGJhYjQ5YzJiOWZjMGVkNThmMzBiMDMzZA==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "2000-05-16T23:53:19Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2000-05-16T23:53:19Z"}, "message": "Replace (GET_RTX_CLASS(GET_CODE()) == 'i') with INSN_P()\n\nFrom-SVN: r33949", "tree": {"sha": "1450f3a982004ca04dfa33e76c4f996afd912200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1450f3a982004ca04dfa33e76c4f996afd912200"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23568fa021aa71b8bab49c2b9fc0ed58f30b033d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23568fa021aa71b8bab49c2b9fc0ed58f30b033d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23568fa021aa71b8bab49c2b9fc0ed58f30b033d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23568fa021aa71b8bab49c2b9fc0ed58f30b033d/comments", "author": null, "committer": null, "parents": [{"sha": "eaef69ce27a08681af09e8a8b36bb110fe1e8568", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaef69ce27a08681af09e8a8b36bb110fe1e8568", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaef69ce27a08681af09e8a8b36bb110fe1e8568"}], "stats": {"total": 63, "additions": 34, "deletions": 29}, "files": [{"sha": "5efee53f2c34b2dccfbd99ded1339c03779d66cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23568fa021aa71b8bab49c2b9fc0ed58f30b033d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23568fa021aa71b8bab49c2b9fc0ed58f30b033d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23568fa021aa71b8bab49c2b9fc0ed58f30b033d", "patch": "@@ -1,3 +1,14 @@\n+2000-05-16  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* config/m32r/m32r.c (small_insn_p): Use INSN_P() to replace\n+\tGET_RTX_CLASS (GET_CODE ()) == 'i'.\n+\t(large_insn_p): Ditto.\n+\t(m32r_is_insn): New function: Return true if the insn contains\n+\tan executable instruction.\n+\t(m32r_adjust_insn): Use m32r_is_insn.\n+\t(m32r_sched_reorder): Use m32r_is_insn.\n+\t(m32r_sched_variable_issue): Use m32r_is_insn.\n+\n 2000-05-16  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \n \t* rs6000/rs6000.c (rs6000_select_section): Treat CONSTRUCTOR like"}, {"sha": "5229101677283e375966180e6e03bfed38378b45", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23568fa021aa71b8bab49c2b9fc0ed58f30b033d/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23568fa021aa71b8bab49c2b9fc0ed58f30b033d/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=23568fa021aa71b8bab49c2b9fc0ed58f30b033d", "patch": "@@ -961,7 +961,7 @@ small_insn_p (op, mode)\n   if (GET_CODE (op) == CONST_INT && INTVAL (op) == 0)\n     return 1;\n \n-  if (GET_RTX_CLASS (GET_CODE (op)) != 'i')\n+  if (! INSN_P (op))\n     return 0;\n \n   return get_attr_length (op) == 2;\n@@ -974,7 +974,7 @@ large_insn_p (op, mode)\n      rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n-  if (GET_RTX_CLASS (GET_CODE (op)) != 'i')\n+  if (! INSN_P (op))\n     return 0;\n \n   return get_attr_length (op) != 2;\n@@ -1484,27 +1484,29 @@ m32r_adjust_cost (insn, link, dep_insn, cost)\n }\n \n \f\n-/* A C statement (sans semicolon) to update the integer scheduling\n-   priority `INSN_PRIORITY(INSN)'.  Reduce the priority to execute\n-   the INSN earlier, increase the priority to execute INSN later.\n-   Do not define this macro if you do not need to adjust the\n-   scheduling priorities of insns.\n+/* Return true if INSN is real instruction bearing insn.  */\n \n-   On the m32r, increase the priority of long instructions so that\n-   the short instructions are scheduled ahead of the long ones.  */\n+static int\n+m32r_is_insn (insn)\n+     rtx insn;\n+{\n+  return (INSN_P (insn)\n+\t  && GET_CODE (PATTERN (insn)) != USE\n+\t  && GET_CODE (PATTERN (insn)) != CLOBBER\n+\t  && GET_CODE (PATTERN (insn)) != ADDR_VEC);\n+}\n+\n+/* Increase the priority of long instructions so that the\n+   short instructions are scheduled ahead of the long ones.  */\n \n int\n m32r_adjust_priority (insn, priority)\n      rtx insn;\n      int priority;\n {\n-  if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n-    {\n-      enum rtx_code code = GET_CODE (PATTERN (insn));\n-      if (code != USE && code != CLOBBER && code != ADDR_VEC\n-\t  && get_attr_insn_size (insn) != INSN_SIZE_SHORT)\n-\tpriority <<= 3;\n-    }\n+  if (m32r_is_insn (insn)\n+      && get_attr_insn_size (insn) != INSN_SIZE_SHORT)\n+    priority <<= 3;\n \n   return priority;\n }\n@@ -1560,11 +1562,9 @@ m32r_sched_reorder (stream, verbose, ready, n_ready)\n \t  rtx insn = ready[i];\n \t  enum rtx_code code;\n \n-\t  if (GET_RTX_CLASS (GET_CODE (insn)) != 'i'\n-\t      || (code = GET_CODE (PATTERN (insn))) == USE\n-\t      || code == CLOBBER || code == ADDR_VEC)\n+\t  if (! m32r_is_insn (insn))\n \t    {\n-\t      /* Dump all current short/long insns just in case */\n+\t      /* Dump all current short/long insns just in case.  */\n \t      while (long_head != long_tail)\n \t\t*new_tail-- = *long_head++;\n \n@@ -1619,9 +1619,8 @@ m32r_sched_reorder (stream, verbose, ready, n_ready)\n \t      enum rtx_code code;\n \n \t      fprintf (stream, \" %d\", INSN_UID (ready[i]));\n-\t      if (GET_RTX_CLASS (GET_CODE (insn)) != 'i'\n-\t\t  || (code = GET_CODE (PATTERN (insn))) == USE\n-\t\t  || code == CLOBBER || code == ADDR_VEC)\n+\n+\t      if (! m32r_is_insn (insn))\n \t\tfputs (\"(?)\", stream);\n \n \t      else if (get_attr_insn_size (insn) != INSN_SIZE_SHORT)\n@@ -1654,12 +1653,7 @@ m32r_sched_variable_issue (stream, verbose, insn, how_many)\n   how_many--;\n   if (how_many > 0 && !TARGET_DEBUG)\n     {\n-      if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n-\thow_many++;\n-\n-      else if (GET_CODE (PATTERN (insn)) == USE\n-\t       || GET_CODE (PATTERN (insn)) == CLOBBER\n-\t       || GET_CODE (PATTERN (insn)) == ADDR_VEC)\n+      if (! m32r_is_insn (insn))\n \thow_many++;\n \n       else if (get_attr_insn_size (insn) != INSN_SIZE_SHORT)"}]}