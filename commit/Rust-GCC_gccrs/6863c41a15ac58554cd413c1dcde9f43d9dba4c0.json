{"sha": "6863c41a15ac58554cd413c1dcde9f43d9dba4c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg2M2M0MWExNWFjNTg1NTRjZDQxM2MxZGNkZTlmNDNkOWRiYTRjMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-09-22T19:22:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-09-22T19:22:37Z"}, "message": "semantics.c (finish_non_static_data_member): In diagnostic, give error at point of use and note at point of declaration.\n\n\t* semantics.c (finish_non_static_data_member): In diagnostic, give\n\terror at point of use and note at point of declaration.\n\nFrom-SVN: r215479", "tree": {"sha": "55293012afed93cc887dd441e91cd85b8989baab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55293012afed93cc887dd441e91cd85b8989baab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6863c41a15ac58554cd413c1dcde9f43d9dba4c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6863c41a15ac58554cd413c1dcde9f43d9dba4c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6863c41a15ac58554cd413c1dcde9f43d9dba4c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a546927c6a9a06b25ae85f8206b2c7afc53f4a45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a546927c6a9a06b25ae85f8206b2c7afc53f4a45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a546927c6a9a06b25ae85f8206b2c7afc53f4a45"}], "stats": {"total": 67, "additions": 32, "deletions": 35}, "files": [{"sha": "d6db39f9367bd647bc5e9f08e2cbff440f041276", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6863c41a15ac58554cd413c1dcde9f43d9dba4c0", "patch": "@@ -1,5 +1,8 @@\n 2014-09-22  Jason Merrill  <jason@redhat.com>\n \n+\t* semantics.c (finish_non_static_data_member): In diagnostic, give\n+\terror at point of use and note at point of declaration.\n+\n \tPR c++/63320\n \tPR c++/60463\n \tPR c++/60755"}, {"sha": "6e04e5efd16ac076a3cb33d685dc4de2939ae239", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=6863c41a15ac58554cd413c1dcde9f43d9dba4c0", "patch": "@@ -1692,10 +1692,10 @@ finish_non_static_data_member (tree decl, tree object, tree qualifying_scope)\n     {\n       if (current_function_decl\n \t  && DECL_STATIC_FUNCTION_P (current_function_decl))\n-\terror (\"invalid use of member %q+D in static member function\", decl);\n+\terror (\"invalid use of member %qD in static member function\", decl);\n       else\n-\terror (\"invalid use of non-static data member %q+D\", decl);\n-      error (\"from this location\");\n+\terror (\"invalid use of non-static data member %qD\", decl);\n+      inform (DECL_SOURCE_LOCATION (decl), \"declared here\");\n \n       return error_mark_node;\n     }"}, {"sha": "fa8a6e63a934e91f9918dfd0f4661e23bacf9a78", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-ice3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice3.C?ref=6863c41a15ac58554cd413c1dcde9f43d9dba4c0", "patch": "@@ -3,15 +3,15 @@\n \n class Klass\n {\n-  unsigned int local;\t\t// { dg-error \"non-static\" }\n+  unsigned int local;\n public:\n   bool dostuff();\n };\n \n bool Klass::dostuff()\n {\n   auto f = []() -> bool {\n-    if (local & 1) { return true; } // { dg-error \"not captured|this location\" }\n+    if (local & 1) { return true; } // { dg-error \"not captured|non-static\" }\n     return false;\n   };\n }"}, {"sha": "c5645ee3729937b2e6cf0c02f2a4f43b27ca50d1", "filename": "gcc/testsuite/g++.dg/lookup/scoped8.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped8.C?ref=6863c41a15ac58554cd413c1dcde9f43d9dba4c0", "patch": "@@ -7,12 +7,12 @@\n \n struct A\n {\n-    int i;\t\t\t// { dg-error \"non-static\" }\n+    int i;\t\t\t// { dg-message \"\" }\n };\n \n template <int> struct B\n {\n-    int foo() { return A::i; }\t// { dg-error \"this location\" }\n+    int foo() { return A::i; }\t// { dg-error \"non-static\" }\n };\n \n template struct B<0>;"}, {"sha": "335f492c58d396730b8f7b2581639ba6a9432a8e", "filename": "gcc/testsuite/g++.dg/other/ptrmem2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fptrmem2.C?ref=6863c41a15ac58554cd413c1dcde9f43d9dba4c0", "patch": "@@ -8,7 +8,7 @@\n \n struct D {\n   \n-  int &m;       // { dg-error \"invalid use of non-static data member\" \"\" }\n+  int &m;       // { dg-message \"\" }\n   static int &s;\n   \n   int Foo ();\n@@ -29,7 +29,7 @@ int D::Foo ()\n int Foo ()\n {\n   f1( &D::m);    // { dg-error \"cannot create pointer to ref\" \"\" }\n-  f1( &(D::m));  // { dg-error \"from this location\" \"\" }\n+  f1( &(D::m));  // { dg-error \"non-static\" }\n   f2( &D::s);    // ok\n   f2( &(D::s));  // ok\n   return 0;"}, {"sha": "8d14553352d659f83f2d7992133f57a7b2f5ca3c", "filename": "gcc/testsuite/g++.dg/template/dependent-expr5.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr5.C?ref=6863c41a15ac58554cd413c1dcde9f43d9dba4c0", "patch": "@@ -18,7 +18,7 @@ template<class F, class T> void bindb(F (T::*f)(void)) {} // { dg-message \"note\"\n \n struct foo {\n   static int baist;\n-  int bait;\t\t\t// { dg-error \"non-static data member\" }\n+  int bait;\t\t\t// { dg-message \"\" }\n   void barf ();\n   static void barf (int);\n \n@@ -31,7 +31,7 @@ struct foo {\n     bar() {\n       bind (&baist);\n       bind (&foo::baist);\n-      bind (&bait); // { dg-error \"from this location\" }\n+      bind (&bait); // { dg-error \"non-static data member\" }\n       bind (&foo::bait);\n \n       bind (&baikst);\n@@ -83,7 +83,7 @@ struct foo {\n     barT() {\n       bind (&baist);\n       bind (&foo::baist);\n-      bind (&bait); // { dg-error \"from this location\" }\n+      bind (&bait); // { dg-error \"non-static data member\" }\n       bind (&foo::bait);\n \n       bind (&baikst);"}, {"sha": "86936581cfd74a9fbad2d466ccab19ca4b853005", "filename": "gcc/testsuite/g++.dg/template/error15.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror15.C?ref=6863c41a15ac58554cd413c1dcde9f43d9dba4c0", "patch": "@@ -9,9 +9,9 @@ template <class T>\n class B {\n protected:\n     \n-  A<T> a; // { dg-error \"\" }\n+  A<T> a; // { dg-message \"\" }\n     \n-  void f(const A<T> * a1 = &a); // { dg-error \"this location\" }\n+  void f(const A<T> * a1 = &a); // { dg-error \"non-static\" }\n     \n   void g(void);\n };"}, {"sha": "3c66ed0289d314ec94a6194b232765f06eddb9a5", "filename": "gcc/testsuite/g++.dg/template/error42.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror42.C?ref=6863c41a15ac58554cd413c1dcde9f43d9dba4c0", "patch": "@@ -3,18 +3,18 @@\n \n template <int> struct A\n {\n-  int i;\t\t// { dg-error \"invalid use of non-static data member\" }\n+  int i;\t\t// { dg-message \"\" }\n   friend void foo ()\n   {\n-    int x[i];\t\t// { dg-error \"from this location\" }\n+    int x[i];\t\t// { dg-error \"non-static data member\" }\n   }\n };\n \n struct B\n {\n-  int j;\t\t// { dg-error \"invalid use of non-static data member\" }\n+  int j;\t\t// { dg-message \"\" }\n   friend int bar ()\n   {\n-    return j;\t\t// { dg-error \"from this location\" }\n+    return j;\t\t// { dg-error \"non-static data member\" }\n   }\n };"}, {"sha": "aa605ef71fa0e9b87db69d03450af6321549fd00", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash18.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash18.C?ref=6863c41a15ac58554cd413c1dcde9f43d9dba4c0", "patch": "@@ -8,11 +8,11 @@ public:\n \n     // Friend functions so that v == x works as does x == v works\n     friend int operator==(void *v, const Pix& x) // { dg-message \"previously\" }\n-    { return v == index; }  // { dg-error \"from this location\" }\n+    { return v == index; }  // { dg-error \"non-static\" }\n     // ??? should be operator!=\n     friend int operator==(void *v, const Pix& x) // { dg-error \"redefinition\" }\n     { return v != index; }\n private:\n //    friend class List<T>;\n-    element *index; // { dg-error \"invalid use of non-static data member\" }\n+    element *index; // { dg-message \"\" }\n };"}, {"sha": "07ba77884fe6b4de6a8933f02edd383581046d8b", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/nest1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest1.C?ref=6863c41a15ac58554cd413c1dcde9f43d9dba4c0", "patch": "@@ -3,12 +3,12 @@\n int x;\n class enclose {\n public:\n-  int x;\t\t\t// { dg-error \"non-static\" }\n+  int x;\t\t\t// { dg-message \"\" }\n \n   class inner {\n   public:\n     void f (int i) {\n-      x = i;// { dg-error \"\" } .*\n+      x = i;// { dg-error \"non-static\" } .*\n     }\n   };\n };"}, {"sha": "cba5551d8f9d827dc7cfff75700b16fa3587a593", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/static1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fstatic1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fstatic1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fstatic1.C?ref=6863c41a15ac58554cd413c1dcde9f43d9dba4c0", "patch": "@@ -1,4 +1,4 @@\n // { dg-do assemble  }\n // GROUPS passed static\n-class A { public: int a; };// { dg-error \"\" } .*\n+class A { public: int a; };// { dg-message \"\" } .*\n void foo7 () { A::a = 3; }// { dg-error \"\" } .*"}, {"sha": "9a16a7457b0383dccfc4d0311e8b3b56b0d95668", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900213_01.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900213_01.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900213_01.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900213_01.C?ref=6863c41a15ac58554cd413c1dcde9f43d9dba4c0", "patch": "@@ -12,7 +12,7 @@\n // keywords: non-static members, member pointers, scope resolution\n \n struct struct0 {\n-  int struct0_data_member_0;\t\t/* { dg-error \"\" } gets error from below */\n+  int struct0_data_member_0;\t\t/* { dg-message \"\" } gets error from below */\n   int struct0_function_member_0 ();\n };\n "}, {"sha": "658cbe113fc8b72af2d0170a992e9035c2b3c1f8", "filename": "gcc/testsuite/g++.old-deja/g++.gb/scope06.C", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.gb%2Fscope06.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.gb%2Fscope06.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.gb%2Fscope06.C?ref=6863c41a15ac58554cd413c1dcde9f43d9dba4c0", "patch": "@@ -1,16 +1,14 @@\n // { dg-do assemble  }\n-// { dg-prune-output \"non-static data member initializers\" }\n // GROUPS passed gb scope\n struct C {\n   struct D {\n     int x;\n     void foo ();\n   };\n-      const int Ok = 0; // { dg-error \"\" } initialization forbidden\n+  const int Ok = 0; // { dg-error \"\" \"\" { target { ! c++11 } } } initialization forbidden\n };\n \n void C::D::foo ()\n {\n-  // { dg-prune-output \"from this location\" }\n-  x = Ok;\n+  x = Ok;\t\t\t// { dg-error \"non-static\" }\n }"}, {"sha": "383cded430b0f4fa7bca8db3713112fd33bb356f", "filename": "gcc/testsuite/g++.old-deja/g++.law/cvt11.C", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fcvt11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6863c41a15ac58554cd413c1dcde9f43d9dba4c0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fcvt11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fcvt11.C?ref=6863c41a15ac58554cd413c1dcde9f43d9dba4c0", "patch": "@@ -6,15 +6,11 @@\n // Message-Id: <9211101908.AA13557@tera.com>\n // Subject: type cast of qualified const member breaks g++2.3.1\n \n-// Ignore extra errors in C++0x mode.\n-// { dg-prune-output \"non-static data member initializers\" }\n-// { dg-prune-output \"from this location\" }\n-// { dg-prune-output \"uninitialized\" }\n #include <stdio.h>\n \n class Thing{\n private: int x;\n-   public: const int N = -1; // { dg-error \"\" } bad initialization\n+public: const int N = -1; // { dg-error \"\" \"\" { target { ! c++11 } } } bad initialization\n   Thing(int y);\n };\n \n@@ -23,10 +19,10 @@ class Bar{ public: void doit(void); };\n void Bar::doit(void)\n {\n   int i, j;\n-  i = Thing::N;\n+  i = Thing::N;\t\t\t// { dg-error \"non-static\" }\n   printf(\"i = %d\\n\", i);\n \n-  j = (int)Thing::N;\n+  j = (int)Thing::N;\t\t// { dg-error \"non-static\" }\n   printf(\"i = %d\\n\", j);\n }\n Thing::Thing(int y) { x = y; }"}]}