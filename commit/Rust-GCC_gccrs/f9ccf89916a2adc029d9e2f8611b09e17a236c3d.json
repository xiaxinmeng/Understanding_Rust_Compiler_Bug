{"sha": "f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjljY2Y4OTkxNmEyYWRjMDI5ZDllMmY4NjExYjA5ZTE3YTIzNmMzZA==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2016-11-15T15:10:13Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2016-11-15T15:10:13Z"}, "message": "[ARC] New option handling, refurbish multilib support.\n\ngcc/\n2016-11-15  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc-arch.h: New file.\n\t* config/arc/arc-arches.def: Likewise.\n\t* config/arc/arc-cpus.def: Likewise.\n\t* config/arc/arc-options.def: Likewise.\n\t* config/arc/t-multilib: Likewise.\n\t* config/arc/genmultilib.awk: Likewise.\n\t* config/arc/genoptions.awk: Likewise.\n\t* config/arc/arc-tables.opt: Likewise.\n\t* config/arc/driver-arc.c: Likewise.\n\t* testsuite/gcc.target/arc/nps400-cpu-flag.c: Likewise.\n\t* common/config/arc/arc-common.c (arc_handle_option): Trace\n\ttoggled options.\n\t* config.gcc (arc*-*-*): Add arc-tables.opt to arc's extra\n\toptions; check for supported cpu against arc-cpus.def file.\n\t(arc*-*-elf*, arc*-*-linux-uclibc*): Use new make fragment; define\n\tTARGET_CPU_BUILD macro; add driver-arc.o as an extra object.\n\t* config/arc/arc-c.def: Add emacs local variables.\n\t* config/arc/arc-opts.h (processor_type): Use arc-cpus.def file.\n\t(FPU_FPUS, FPU_FPUD, FPU_FPUDA, FPU_FPUDA_DIV, FPU_FPUDA_FMA)\n\t(FPU_FPUDA_ALL, FPU_FPUS_DIV, FPU_FPUS_FMA, FPU_FPUS_ALL)\n\t(FPU_FPUD_DIV, FPU_FPUD_FMA, FPU_FPUD_ALL): New defines.\n\t(DEFAULT_arc_fpu_build): Define.\n\t(DEFAULT_arc_mpy_option): Define.\n\t* config/arc/arc-protos.h (arc_init): Delete.\n\t* config/arc/arc.c (arc_cpu_name): New variable.\n\t(arc_selected_cpu, arc_selected_arch, arc_arcem, arc_archs)\n\t(arc_arc700, arc_arc600, arc_arc601): New variable.\n\t(arc_init): Add static; remove selection of default tune value,\n\tcleanup obsolete error messages.\n\t(arc_override_options): Make use of .def files for selecting the\n\tright cpu and option configurations.\n\t* config/arc/arc.h (stdbool.h): Include.\n\t(TARGET_CPU_DEFAULT): Define.\n\t(CPP_SPEC): Remove mcpu=NPS400 handling.\n\t(arc_cpu_to_as): Declare.\n\t(EXTRA_SPEC_FUNCTIONS): Define.\n\t(OPTION_DEFAULT_SPECS): Likewise.\n\t(ASM_DEFAULT): Remove.\n\t(ASM_SPEC): Use arc_cpu_to_as.\n\t(DRIVER_SELF_SPECS): Remove deprecated options.\n\t(arc_base_cpu):\tDeclare.\n\t(TARGET_ARC600, TARGET_ARC601, TARGET_ARC700, TARGET_EM)\n\t(TARGET_HS, TARGET_V2, TARGET_ARC600): Make them use arc_base_cpu\n\tvariable.\n\t(MULTILIB_DEFAULTS): Use ARC_MULTILIB_CPU_DEFAULT.\n\t* config/arc/arc.md (attr_cpu): Remove.\n\t* config/arc/arc.opt (mno-mpy): Deprecate.\n\t(mcpu=ARC600, mcpu=ARC601, mcpu=ARC700, mcpu=NPS400, mcpu=ARCEM)\n\t(mcpu=ARCHS): Remove.\n\t(mcrc, mdsp-packa, mdvbf, mmac-d16, mmac-24, mtelephony, mrtsc):\n\tDeprecate.\n\t(mbarrel_shifte, mspfp_, mdpfp_, mdsp_pack, mmac_): Remove.\n\t(arc_fpu): Use new defines.\n\t(mpy-option): Change to use numeric or string like inputs.\n\t* config/arc/t-arc (driver-arc.o): New target.\n\t(arc-cpus, t-multilib, arc-tables.opt): Likewise.\n\t* config/arc/t-arc-newlib: Delete.\n\t* config/arc/t-arc-uClibc: Renamed to t-uClibc.\n\t* doc/invoke.texi (ARC): Update arc options.\n\nFixup\n\nFrom-SVN: r242425", "tree": {"sha": "9df4111e2b05f6dcf2e793a19e73624fde74e578", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9df4111e2b05f6dcf2e793a19e73624fde74e578"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2cf63121e9640348fa3d917dfb247da545255c61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cf63121e9640348fa3d917dfb247da545255c61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cf63121e9640348fa3d917dfb247da545255c61"}], "stats": {"total": 1690, "additions": 1332, "deletions": 358}, "files": [{"sha": "1bc0f809858f4ae83f0667fadabaa067f27961a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "patch": "@@ -1,3 +1,65 @@\n+2016-11-15  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc-arch.h: New file.\n+\t* config/arc/arc-arches.def: Likewise.\n+\t* config/arc/arc-cpus.def: Likewise.\n+\t* config/arc/arc-options.def: Likewise.\n+\t* config/arc/t-multilib: Likewise.\n+\t* config/arc/genmultilib.awk: Likewise.\n+\t* config/arc/genoptions.awk: Likewise.\n+\t* config/arc/arc-tables.opt: Likewise.\n+\t* config/arc/driver-arc.c: Likewise.\n+\t* testsuite/gcc.target/arc/nps400-cpu-flag.c: Likewise.\n+\t* common/config/arc/arc-common.c (arc_handle_option): Trace\n+\ttoggled options.\n+\t* config.gcc (arc*-*-*): Add arc-tables.opt to arc's extra\n+\toptions; check for supported cpu against arc-cpus.def file.\n+\t(arc*-*-elf*, arc*-*-linux-uclibc*): Use new make fragment; define\n+\tTARGET_CPU_BUILD macro; add driver-arc.o as an extra object.\n+\t* config/arc/arc-c.def: Add emacs local variables.\n+\t* config/arc/arc-opts.h (processor_type): Use arc-cpus.def file.\n+\t(FPU_FPUS, FPU_FPUD, FPU_FPUDA, FPU_FPUDA_DIV, FPU_FPUDA_FMA)\n+\t(FPU_FPUDA_ALL, FPU_FPUS_DIV, FPU_FPUS_FMA, FPU_FPUS_ALL)\n+\t(FPU_FPUD_DIV, FPU_FPUD_FMA, FPU_FPUD_ALL): New defines.\n+\t(DEFAULT_arc_fpu_build): Define.\n+\t(DEFAULT_arc_mpy_option): Define.\n+\t* config/arc/arc-protos.h (arc_init): Delete.\n+\t* config/arc/arc.c (arc_cpu_name): New variable.\n+\t(arc_selected_cpu, arc_selected_arch, arc_arcem, arc_archs)\n+\t(arc_arc700, arc_arc600, arc_arc601): New variable.\n+\t(arc_init): Add static; remove selection of default tune value,\n+\tcleanup obsolete error messages.\n+\t(arc_override_options): Make use of .def files for selecting the\n+\tright cpu and option configurations.\n+\t* config/arc/arc.h (stdbool.h): Include.\n+\t(TARGET_CPU_DEFAULT): Define.\n+\t(CPP_SPEC): Remove mcpu=NPS400 handling.\n+\t(arc_cpu_to_as): Declare.\n+\t(EXTRA_SPEC_FUNCTIONS): Define.\n+\t(OPTION_DEFAULT_SPECS): Likewise.\n+\t(ASM_DEFAULT): Remove.\n+\t(ASM_SPEC): Use arc_cpu_to_as.\n+\t(DRIVER_SELF_SPECS): Remove deprecated options.\n+\t(arc_base_cpu):\tDeclare.\n+\t(TARGET_ARC600, TARGET_ARC601, TARGET_ARC700, TARGET_EM)\n+\t(TARGET_HS, TARGET_V2, TARGET_ARC600): Make them use arc_base_cpu\n+\tvariable.\n+\t(MULTILIB_DEFAULTS): Use ARC_MULTILIB_CPU_DEFAULT.\n+\t* config/arc/arc.md (attr_cpu): Remove.\n+\t* config/arc/arc.opt (mno-mpy): Deprecate.\n+\t(mcpu=ARC600, mcpu=ARC601, mcpu=ARC700, mcpu=NPS400, mcpu=ARCEM)\n+\t(mcpu=ARCHS): Remove.\n+\t(mcrc, mdsp-packa, mdvbf, mmac-d16, mmac-24, mtelephony, mrtsc):\n+\tDeprecate.\n+\t(mbarrel_shifte, mspfp_, mdpfp_, mdsp_pack, mmac_): Remove.\n+\t(arc_fpu): Use new defines.\n+\t(mpy-option): Change to use numeric or string like inputs.\n+\t* config/arc/t-arc (driver-arc.o): New target.\n+\t(arc-cpus, t-multilib, arc-tables.opt): Likewise.\n+\t* config/arc/t-arc-newlib: Delete.\n+\t* config/arc/t-arc-uClibc: Renamed to t-uClibc.\n+\t* doc/invoke.texi (ARC): Update arc options.\n+\n 2016-11-15  Maciej W. Rozycki  <macro@imgtec.com>\n \n \t* config/mips/mips.c (mips16_emit_constants): Emit `consttable'"}, {"sha": "1dbddae388a6955a3540f706478f4bc3da25e3fa", "filename": "gcc/common/config/arc/arc-common.c", "status": "modified", "additions": 17, "deletions": 52, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fcommon%2Fconfig%2Farc%2Farc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fcommon%2Fconfig%2Farc%2Farc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farc%2Farc-common.c?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "patch": "@@ -2,6 +2,7 @@\n    Copyright (C) 1994-2016 Free Software Foundation, Inc.\n    Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n \t\ton behalf of Synopsys Inc.\n+\t\tClaudiu Zissulescu <Claudiu.Zissulescu@synopsys.com>\n \n This file is part of GCC.\n \n@@ -61,89 +62,53 @@ static const struct default_options arc_option_optimization_table[] =\n \n /*  Process options.  */\n static bool\n-arc_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+arc_handle_option (struct gcc_options *opts,\n+\t\t   struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n \t\t   const struct cl_decoded_option *decoded,\n \t\t   location_t loc)\n {\n   size_t code = decoded->opt_index;\n   int value = decoded->value;\n   const char *arg = decoded->arg;\n+  static int mcpu_seen = PROCESSOR_NONE;\n+  char *p;\n \n   switch (code)\n     {\n-      static int mcpu_seen = PROCESSOR_NONE;\n     case OPT_mcpu_:\n       /* N.B., at this point arc_cpu has already been set to its new value by\n \t our caller, so comparing arc_cpu with PROCESSOR_NONE is pointless.  */\n \n       if (mcpu_seen != PROCESSOR_NONE && mcpu_seen != value)\n \twarning_at (loc, 0, \"multiple -mcpu= options specified.\");\n       mcpu_seen = value;\n-\n-      switch (value)\n-\t{\n-\tcase PROCESSOR_NPS400:\n-\t  if (! (opts_set->x_TARGET_CASE_VECTOR_PC_RELATIVE) )\n-\t    opts->x_TARGET_CASE_VECTOR_PC_RELATIVE = 1;\n-\t  /* Fall through */\n-\tcase PROCESSOR_ARC600:\n-\tcase PROCESSOR_ARC700:\n-\t  if (! (opts_set->x_target_flags & MASK_BARREL_SHIFTER) )\n-\t    opts->x_target_flags |= MASK_BARREL_SHIFTER;\n-\t  break;\n-\tcase PROCESSOR_ARC601:\n-\t  if (! (opts_set->x_target_flags & MASK_BARREL_SHIFTER) )\n-\t    opts->x_target_flags &= ~MASK_BARREL_SHIFTER;\n-\t  break;\n-\tcase PROCESSOR_ARCHS:\n-\t  if ( !(opts_set->x_target_flags & MASK_BARREL_SHIFTER))\n-\t    opts->x_target_flags |= MASK_BARREL_SHIFTER;  /* Default: on.  */\n-\t  if ( !(opts_set->x_target_flags & MASK_CODE_DENSITY))\n-\t    opts->x_target_flags |= MASK_CODE_DENSITY;\t  /* Default: on.  */\n-\t  if ( !(opts_set->x_target_flags & MASK_NORM_SET))\n-\t    opts->x_target_flags |= MASK_NORM_SET;\t  /* Default: on.  */\n-\t  if ( !(opts_set->x_target_flags & MASK_SWAP_SET))\n-\t    opts->x_target_flags |= MASK_SWAP_SET;\t  /* Default: on.  */\n-\t  if ( !(opts_set->x_target_flags & MASK_DIVREM))\n-\t    opts->x_target_flags |= MASK_DIVREM;\t  /* Default: on.  */\n-\t  break;\n-\n-\tcase PROCESSOR_ARCEM:\n-\t  if ( !(opts_set->x_target_flags & MASK_BARREL_SHIFTER))\n-\t    opts->x_target_flags |= MASK_BARREL_SHIFTER;  /* Default: on.  */\n-\t  if ( !(opts_set->x_target_flags & MASK_CODE_DENSITY))\n-\t    opts->x_target_flags &= ~MASK_CODE_DENSITY;\t  /* Default: off.  */\n-\t  if ( !(opts_set->x_target_flags & MASK_NORM_SET))\n-\t    opts->x_target_flags &= ~MASK_NORM_SET;\t  /* Default: off.  */\n-\t  if ( !(opts_set->x_target_flags & MASK_SWAP_SET))\n-\t    opts->x_target_flags &= ~MASK_SWAP_SET;\t  /* Default: off.  */\n-\t  if ( !(opts_set->x_target_flags & MASK_DIVREM))\n-\t    opts->x_target_flags &= ~MASK_DIVREM;\t  /* Default: off.  */\n-\t  break;\n-\tdefault:\n-\t  gcc_unreachable ();\n-\t}\n       break;\n \n     case OPT_mmpy_option_:\n-      if (value < 0 || value > 9)\n-\terror_at (loc, \"bad value %qs for -mmpy-option switch\", arg);\n+      if (opts->x_arc_mpy_option == 1)\n+\twarning_at (loc, 0, \"Unsupported value for mmpy-option\");\n+      break;\n+\n+    default:\n       break;\n     }\n \n   return true;\n }\n \n+#undef  TARGET_OPTION_INIT_STRUCT\n #define TARGET_OPTION_INIT_STRUCT arc_option_init_struct\n+\n+#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n #define TARGET_OPTION_OPTIMIZATION_TABLE arc_option_optimization_table\n-#define TARGET_HANDLE_OPTION arc_handle_option\n \n #define DEFAULT_NO_SDATA (TARGET_SDATA_DEFAULT ? 0 : MASK_NO_SDATA_SET)\n \n-/* We default to ARC700, which has the barrel shifter enabled.  */\n-#define TARGET_DEFAULT_TARGET_FLAGS \\\n-  (MASK_BARREL_SHIFTER|MASK_VOLATILE_CACHE_SET|DEFAULT_NO_SDATA)\n+#undef  TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS (DEFAULT_NO_SDATA | MASK_VOLATILE_CACHE_SET)\n \n+#undef  TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION arc_handle_option\n \n #include \"common/common-target-def.h\"\n "}, {"sha": "595563b40ee78f0558059b197892f4f2e4e8d02a", "filename": "gcc/config.gcc", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "patch": "@@ -318,6 +318,7 @@ arc*-*-*)\n \tcpu_type=arc\n \tc_target_objs=\"arc-c.o\"\n \tcxx_target_objs=\"arc-c.o\"\n+\textra_options=\"${extra_options} arc/arc-tables.opt\"\n \t;;\n arm*-*-*)\n \tcpu_type=arm\n@@ -999,13 +1000,12 @@ alpha*-dec-*vms*)\n \t;;\n arc*-*-elf*)\n \textra_headers=\"arc-simd.h\"\n-\ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file}\"\n-\ttmake_file=\"arc/t-arc-newlib arc/t-arc\"\n-\tcase x\"${with_cpu}\" in\n-\t  xarc600|xarc601|xarc700)\n-\t\ttarget_cpu_default=\"TARGET_CPU_$with_cpu\"\n-\t\t;;\n-\tesac\n+\ttm_file=\"arc/arc-arch.h dbxelf.h elfos.h newlib-stdint.h ${tm_file}\"\n+\ttmake_file=\"arc/t-multilib arc/t-arc\"\n+\textra_gcc_objs=\"driver-arc.o\"\n+\tif test \"x$with_cpu\" != x; then\n+\t\ttm_defines=\"${tm_defines} TARGET_CPU_BUILD=PROCESSOR_$with_cpu\"\n+\tfi\n \tif test x${with_endian} = x; then\n \t\tcase ${target} in\n \t\tarc*be-*-* | arc*eb-*-*)\twith_endian=big ;;\n@@ -1022,15 +1022,14 @@ arc*-*-elf*)\n \t;;\n arc*-*-linux-uclibc*)\n \textra_headers=\"arc-simd.h\"\n-\ttm_file=\"dbxelf.h elfos.h gnu-user.h linux.h glibc-stdint.h ${tm_file}\"\n-\ttmake_file=\"${tmake_file} arc/t-arc-uClibc arc/t-arc\"\n+\ttm_file=\"arc/arc-arch.h dbxelf.h elfos.h gnu-user.h linux.h glibc-stdint.h ${tm_file}\"\n+\ttmake_file=\"${tmake_file} arc/t-uClibc arc/t-arc\"\n \ttm_defines=\"${tm_defines} TARGET_SDATA_DEFAULT=0\"\n \ttm_defines=\"${tm_defines} TARGET_MMEDIUM_CALLS_DEFAULT=1\"\n-\tcase x\"${with_cpu}\" in\n-\t  xarc600|xarc601|xarc700)\n-\t\ttarget_cpu_default=\"TARGET_CPU_$with_cpu\"\n-\t\t;;\n-\tesac\n+\textra_gcc_objs=\"driver-arc.o\"\n+\tif test \"x$with_cpu\" != x; then\n+\t\ttm_defines=\"${tm_defines} TARGET_CPU_BUILD=PROCESSOR_$with_cpu\"\n+\tfi\n \tif test x${with_endian} = x; then\n \t\tcase ${target} in\n \t\tarc*be-*-* | arc*eb-*-*)\twith_endian=big ;;\n@@ -3624,15 +3623,19 @@ case \"${target}\" in\n \t\tdone\n \t\t;;\n \n-\tarc*-*-*) # was:\tarc*-*-linux-uclibc)\n+\tarc*-*-*)\n \t\tsupported_defaults=\"cpu\"\n-\t\tcase $with_cpu in\n-\t\t  arc600|arc601|arc700)\n-\t\t\t;;\n-\t\t  *) echo \"Unknown cpu type\"\n-\t\t\texit 1\n-\t\t\t;;\n-\t\tesac\n+\n+\t\tif [ x\"$with_cpu\" = x ] \\\n+\t\t    || grep \"^ARC_CPU ($with_cpu,\" \\\n+\t\t       ${srcdir}/config/arc/arc-cpus.def \\\n+\t\t       > /dev/null; then\n+\t\t # Ok\n+\t\t true\n+\t\telse\n+\t\t echo \"Unknown cpu used in --with-cpu=$with_cpu\" 1>&2\n+\t\t exit 1\n+\t\tfi\n \t\t;;\n \n \tarm*-*-*)"}, {"sha": "bfd3f234f32a7f6a9331ab5010ccaee923f3e700", "filename": "gcc/config/arc/arc-arch.h", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc-arch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc-arch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-arch.h?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "patch": "@@ -0,0 +1,123 @@\n+/* Definitions of types that are used to store ARC architecture and\n+   device information.\n+   Copyright (C) 2016 Free Software Foundation, Inc.\n+   Contributed by Claudiu Zissulescu (claziss@synopsys.com)\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_ARC_ARCH_H\n+#define GCC_ARC_ARCH_H\n+\n+#ifndef IN_LIBGCC2\n+/* Architecture selection types.  */\n+\n+enum cpu_flags\n+  {\n+#define ARC_OPT(NAME, CODE, MASK, DOC)\t    NAME = CODE,\n+#define ARC_OPTX(NAME, CODE, VAR, VAL, DOC) NAME = CODE,\n+#include \"arc-options.def\"\n+#undef ARC_OPT\n+#undef ARC_OPTX\n+    FL_END\n+  };\n+\n+\n+/* ARC architecture variants.  */\n+\n+enum base_architecture\n+  {\n+    BASE_ARCH_NONE,\n+#define ARC_ARCH(NAME, ARCH, FLAGS, DFLAGS)  BASE_ARCH_##ARCH,\n+#include \"arc-arches.def\"\n+#undef ARC_ARCH\n+    BASE_ARCH_END\n+  };\n+\n+\n+/* Tune variants.  Needs to match the attr_tune enum.  */\n+\n+enum arc_tune_attr\n+  {\n+    ARC_TUNE_NONE,\n+    ARC_TUNE_ARC600,\n+    ARC_TUNE_ARC700_4_2_STD,\n+    ARC_TUNE_ARC700_4_2_XMAC\n+  };\n+\n+/* CPU specific properties.  */\n+\n+typedef struct\n+{\n+  /* CPU name.  */\n+  const char *const name;\n+\n+  /* Architecture class.  */\n+  enum base_architecture arch;\n+\n+  /* Specific processor type.  */\n+  enum processor_type processor;\n+\n+  /* Specific flags.  */\n+  const unsigned long long flags;\n+\n+  /* Tune value.  */\n+  enum arc_tune_attr tune;\n+} arc_cpu_t;\n+\n+\n+/* Architecture specific propoerties.  */\n+\n+typedef struct\n+{\n+  /* Architecture name.  */\n+  const char *const name;\n+\n+  /* Architecture class.  */\n+  enum base_architecture arch;\n+\n+  /* All allowed flags for this architecture.  */\n+  const unsigned long long flags;\n+\n+  /* Default flags for this architecture.  It is a subset of\n+     FLAGS.  */\n+  const unsigned long long dflags;\n+} arc_arch_t;\n+\n+\n+\n+const arc_arch_t arc_arch_types[] =\n+  {\n+    {\"none\", BASE_ARCH_NONE, 0, 0},\n+#define ARC_ARCH(NAME, ARCH, FLAGS, DFLAGS)\t\\\n+    {NAME, BASE_ARCH_##ARCH, FLAGS, DFLAGS},\n+#include \"arc-arches.def\"\n+#undef ARC_ARCH\n+    {NULL, BASE_ARCH_END, 0, 0}\n+  };\n+\n+const arc_cpu_t arc_cpu_types[] =\n+  {\n+    {\"none\", BASE_ARCH_NONE, PROCESSOR_NONE, 0, ARC_TUNE_NONE},\n+#define ARC_CPU(NAME, ARCH, FLAGS, TUNE)\t\\\n+    {#NAME, BASE_ARCH_##ARCH, PROCESSOR_##NAME, FLAGS, ARC_TUNE_##TUNE},\n+#include \"arc-cpus.def\"\n+#undef ARC_CPU\n+    {NULL, BASE_ARCH_END, PROCESSOR_NONE, 0, ARC_TUNE_NONE}\n+  };\n+\n+#endif\n+#endif /* GCC_ARC_ARCH_H */"}, {"sha": "f24babb4d5325d18ad0f8c8ae2aaa1451da554af", "filename": "gcc/config/arc/arc-arches.def", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-arches.def?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "patch": "@@ -0,0 +1,56 @@\n+/* ARC ARCH architectures.\n+   Copyright (C) 2016 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* List of all known ARC base architectures.  These defines are used\n+   to check if command line given options are valid for a specific\n+   architecture, and to set default architecture options, if needed.\n+\n+   Before including this file, define a macro:\n+\n+   ARC_ARCH (NAME, ARCH, DEV_HW_FACILITIES, DEF_HW_FACILITIES)\n+\n+   where the arguments are the fields of arc_arch_t:\n+\n+   NAME\t\t\tArchitecture given name;\n+\n+   ARCH\t\t\tArchitecture class as in enum base_architecture;\n+\n+   DEV_HW_FACILITIES\tAll allowed architecture hardware facilities.\n+\t\t\tThese facilities are represented as compiler\n+\t\t\toptions, defined in arc_options.def file.\n+\n+   DEF_HW_FACILITIES\tDefault flags for this architecture.  It is a\n+\t\t\tsubset of DEV_HW_FACILITIES.  */\n+\n+ARC_ARCH (\"arcem\", em, FL_MPYOPT_1_6 | FL_DIVREM | FL_CD | FL_NORM\t\\\n+\t  | FL_BS | FL_SWAP | FL_FPUS | FL_SPFP | FL_DPFP\t\t\\\n+\t  | FL_SIMD | FL_FPUDA, 0)\n+ARC_ARCH (\"archs\", hs, FL_MPYOPT_7_9 | FL_DIVREM | FL_NORM | FL_CD\t\\\n+\t  | FL_ATOMIC | FL_LL64 | FL_BS | FL_SWAP\t\t\t\\\n+\t  | FL_FPUS | FL_FPUD,\t\t\t\t\t\t\\\n+\t  FL_CD | FL_ATOMIC | FL_BS | FL_NORM | FL_SWAP)\n+ARC_ARCH (\"arc6xx\", 6xx, FL_BS | FL_NORM | FL_SWAP | FL_MUL64 | FL_MUL32x16 \\\n+\t  | FL_SPFP | FL_ARGONAUT | FL_DPFP, 0)\n+ARC_ARCH (\"arc700\", 700, FL_ATOMIC | FL_BS | FL_NORM | FL_SWAP | FL_EA \\\n+\t  | FL_SIMD | FL_SPFP | FL_ARGONAUT | FL_DPFP,\t\t       \\\n+\t  FL_BS | FL_NORM | FL_SWAP)\n+\n+/* Local Variables: */\n+/* mode: c */\n+/* End: */"}, {"sha": "4cfd7b6e35fd55273e68f54bf26f2d1db302f57f", "filename": "gcc/config/arc/arc-c.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc-c.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc-c.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-c.def?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "patch": "@@ -66,3 +66,7 @@ ARC_C_DEF (\"__EM__\",     TARGET_EM)\n ARC_C_DEF (\"__HS__\",     TARGET_HS)\n ARC_C_DEF (\"__Xnorm\",    TARGET_NORM)\n ARC_C_DEF (\"__Xbarrel_shifter\", TARGET_BARREL_SHIFTER)\n+\n+/* Local Variables: */\n+/* mode: c */\n+/* End: */"}, {"sha": "0ceb7344a8397dff3eedc276f601c993ea690962", "filename": "gcc/config/arc/arc-cpus.def", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-cpus.def?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "patch": "@@ -0,0 +1,75 @@\n+/* ARC CPU architectures.\n+   Copyright (C) 2016 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* List of various ARC CPU configurations.  If updated, cd to\n+   $(builddir)/gcc and run\n+\n+   $ make arc-cpus\n+\n+   This will regenerate / update the following source files:\n+\n+   -  $(srcdir)/config/arc/t-multilib\n+   -  $(srcdir)/config/arc/arc-tables.opt\n+\n+   After that, rebuild everything and check-in the new sources to the\n+   repo.  This file defines the accepted values for -mcpu=<CPU>\n+   option.\n+\n+   Before including this file, define a macro:\n+\n+   ARC_CPU (NAME, ARCH, FLAGS, TUNE)\n+\n+   where the arguments are the fields of arc_cpu_t:\n+\n+   NAME\t  A given arbitrary name.\n+   ARCH\t  Base architecture for the given CPU.\n+   FLAGS  Specific hardware flags that are enabled by this CPU configuration,\n+\t  as defined in arc-options.def file, and allowed by arc-arches.def\n+\t  file.  The specific hardware flags are enumerated without using\n+\t  spaces between the '|' character and consequtive flags.\n+   TUNE\t  Tune value for the given configuration, otherwise NONE.  */\n+\n+ARC_CPU (em,\t    em, 0, NONE)\n+ARC_CPU (arcem,\t    em, FL_MPYOPT_2|FL_CD|FL_BS, NONE)\n+ARC_CPU (em4,\t    em, FL_CD, NONE)\n+ARC_CPU (em4_dmips, em, FL_MPYOPT_2|FL_CD|FL_DIVREM|FL_NORM|FL_SWAP|FL_BS, NONE)\n+ARC_CPU (em4_fpus,  em, FL_MPYOPT_2|FL_CD|FL_DIVREM|FL_NORM|FL_SWAP|FL_BS|FL_FPU_FPUS, NONE)\n+ARC_CPU (em4_fpuda, em, FL_MPYOPT_2|FL_CD|FL_DIVREM|FL_NORM|FL_SWAP|FL_BS|FL_FPU_FPUDA, NONE)\n+\n+ARC_CPU (hs,\t     hs, 0, NONE)\n+ARC_CPU (archs,\t     hs, FL_MPYOPT_2|FL_DIVREM|FL_LL64, NONE)\n+ARC_CPU (hs34,\t     hs, FL_MPYOPT_2, NONE)\n+ARC_CPU (hs38,\t     hs, FL_MPYOPT_9|FL_DIVREM|FL_LL64, NONE)\n+ARC_CPU (hs38_linux, hs, FL_MPYOPT_9|FL_DIVREM|FL_LL64|FL_FPU_FPUD_ALL, NONE)\n+\n+ARC_CPU (arc600,\t  6xx, FL_BS, ARC600)\n+ARC_CPU (arc600_norm,\t  6xx, FL_BS|FL_NORM, ARC600)\n+ARC_CPU (arc600_mul64,\t  6xx, FL_BS|FL_NORM|FL_MUL64, ARC600)\n+ARC_CPU (arc600_mul32x16, 6xx, FL_BS|FL_NORM|FL_MUL32x16, ARC600)\n+ARC_CPU (arc601,\t  6xx, 0, ARC600)\n+ARC_CPU (arc601_norm,\t  6xx, FL_NORM, ARC600)\n+ARC_CPU (arc601_mul64,\t  6xx, FL_NORM|FL_MUL64, ARC600)\n+ARC_CPU (arc601_mul32x16, 6xx, FL_NORM|FL_MUL32x16, ARC600)\n+\n+ARC_CPU (arc700, 700, 0, ARC700_4_2_STD)\n+ARC_CPU (nps400, 700, 0, ARC700_4_2_STD)\n+\n+/* Local Variables: */\n+/* mode: c */\n+/* End: */"}, {"sha": "0f9d36ccc84df0fee23d625044516042ebef7aac", "filename": "gcc/config/arc/arc-options.def", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc-options.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc-options.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-options.def?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "patch": "@@ -0,0 +1,109 @@\n+/* ARC options.\n+   Copyright (C) 2016 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* List of all known ARC hardware modifier options (i.e., compiler\n+   options that are selecting a hardware facility).  There can be two\n+   types options: simple switches (e.g. code-density option can be\n+   on/off), or can accept multiple values (e.g., fpu options).\n+\n+   For any valid HW option, define a macro:\n+\n+   ARC_OPT (NAME, CODE, MASK, DOC)\n+\n+   where:\n+   NAME\t  Name (identifier) of a particular hardware modifier option,\n+\t  as in enum cpu_flags.\n+\n+   CODE\t  64-bit mask used to encode NAME.\n+\n+   MASK\t  Corresponding GCC's MASK_<option> macro.\n+\n+   DOC\t  A string used when emitting compiler errors or warnings.\n+\n+   For a multi-value option, define a macro for a valid value:\n+\n+   ARC_OPTX (NAME, CODE, VAR, VAL, DOC)\n+\n+   where:\n+   NAME\t  Name (identifier) of a particular hardware modifier\n+\t  configuration.\n+\n+   CODE\t  64-bit mask used to encode NAME.  It will be encoded in the\n+\t  same variable like options given via ARC_OPT.\n+\n+   VAR\t  Corresponding GCC's option variable.\n+\n+   VAL\t  Value to be set in VAR.\n+\n+   DOC\t  A string used when emitting compiler errors or warnings.\n+\n+   All multi-value options are defined using ARC_OPTX and ARC_OPT.\n+   ARC_OPT contains a mask with all valid values for the given\n+   option.  */\n+\n+ARC_OPT (FL_CD,\t      (1ULL << 0), MASK_CODE_DENSITY,\t   \"code density\")\n+ARC_OPT (FL_DIVREM,   (1ULL << 1), MASK_DIVREM,\t\t   \"div/rem\")\n+ARC_OPT (FL_NORM,     (1ULL << 2), MASK_NORM_SET,\t   \"norm\")\n+\n+ARC_OPT (FL_ATOMIC,   (1ULL << 4), MASK_ATOMIC,\t\t   \"atomic\")\n+ARC_OPT (FL_LL64,     (1ULL << 5), MASK_LL64,\t\t   \"double load/store\")\n+ARC_OPT (FL_BS,\t      (1ULL << 6), MASK_BARREL_SHIFTER,\t   \"barrel shifter\")\n+ARC_OPT (FL_SWAP,     (1ULL << 7), MASK_SWAP_SET,\t   \"swap\")\n+ARC_OPT (FL_MUL64,    (1ULL << 8), MASK_MUL64_SET,\t   \"mul64\")\n+ARC_OPT (FL_MUL32x16, (1ULL << 9), MASK_MULMAC_32BY16_SET, \"mul32x16\")\n+\n+ARC_OPT (FL_EA,\t      (1ULL << 11), MASK_EA_SET,\t   \"extended arithmetics\")\n+ARC_OPT (FL_SPFP,     (1ULL << 12), MASK_SPFP_COMPACT_SET, \"single precission FPX\")\n+ARC_OPT (FL_DPFP,     (1ULL << 13), MASK_DPFP_COMPACT_SET, \"double precission FPX\")\n+ARC_OPT (FL_ARGONAUT, (1ULL << 14), MASK_ARGONAUT_SET,\t   \"argonaut\")\n+ARC_OPT (FL_SIMD,     (1ULL << 15), MASK_SIMD_SET,\t   \"simd\")\n+\n+ARC_OPTX (FL_MPYOPT_1, (1ULL << 17), arc_mpy_option, 1, \"mpy option w\")\n+ARC_OPTX (FL_MPYOPT_2, (1ULL << 18), arc_mpy_option, 2, \"mpy option wlh1\")\n+ARC_OPTX (FL_MPYOPT_3, (1ULL << 19), arc_mpy_option, 3, \"mpy option wlh2\")\n+ARC_OPTX (FL_MPYOPT_4, (1ULL << 20), arc_mpy_option, 4, \"mpy option wlh3\")\n+ARC_OPTX (FL_MPYOPT_5, (1ULL << 21), arc_mpy_option, 5, \"mpy option wlh4\")\n+ARC_OPTX (FL_MPYOPT_6, (1ULL << 22), arc_mpy_option, 6, \"mpy option wlh5\")\n+ARC_OPTX (FL_MPYOPT_7, (1ULL << 23), arc_mpy_option, 7, \"mpy option plus_dmpy\")\n+ARC_OPTX (FL_MPYOPT_8, (1ULL << 24), arc_mpy_option, 8, \"mpy option plus_macd\")\n+ARC_OPTX (FL_MPYOPT_9, (1ULL << 25), arc_mpy_option, 9, \"mpy option plus_qmacw\")\n+\n+ARC_OPT (FL_MPYOPT_7_9, (0x01c2ULL << 17), 0, \"mpy option\")\n+ARC_OPT (FL_MPYOPT_1_6, (0x003fULL << 17), 0, \"mpy option\")\n+\n+ARC_OPTX (FL_FPU_FPUS,\t    (1ULL << 26), arc_fpu_build, FPU_FPUS,\t\"mfpu=fpus\")\n+ARC_OPTX (FL_FPU_FPUS_DIV,  (1ULL << 27), arc_fpu_build, FPU_FPUS_DIV,\t\"mfpu=fpus_div\")\n+ARC_OPTX (FL_FPU_FPUS_FMA,  (1ULL << 28), arc_fpu_build, FPU_FPUS_FMA,\t\"mfpu=fpus_fma\")\n+ARC_OPTX (FL_FPU_FPUS_ALL,  (1ULL << 29), arc_fpu_build, FPU_FPUS_ALL,\t\"mfpu=fpus_all\")\n+ARC_OPTX (FL_FPU_FPUDA,\t    (1ULL << 30), arc_fpu_build, FPU_FPUDA,\t\"mfpu=fpuda\")\n+ARC_OPTX (FL_FPU_FPUDA_DIV, (1ULL << 31), arc_fpu_build, FPU_FPUDA_DIV, \"mfpu=fpuda_div\")\n+ARC_OPTX (FL_FPU_FPUDA_FMA, (1ULL << 32), arc_fpu_build, FPU_FPUDA_FMA, \"mfpu=fpuda_fma\")\n+ARC_OPTX (FL_FPU_FPUDA_ALL, (1ULL << 33), arc_fpu_build, FPU_FPUDA_ALL, \"mfpu=fpuda_all\")\n+ARC_OPTX (FL_FPU_FPUD,\t    (1ULL << 34), arc_fpu_build, FPU_FPUD,\t\"mfpu=fpud\")\n+ARC_OPTX (FL_FPU_FPUD_DIV,  (1ULL << 35), arc_fpu_build, FPU_FPUD_DIV,\t\"mfpu=fpud_div\")\n+ARC_OPTX (FL_FPU_FPUD_FMA,  (1ULL << 36), arc_fpu_build, FPU_FPUD_FMA,\t\"mfpu=fpud_fma\")\n+ARC_OPTX (FL_FPU_FPUD_ALL,  (1ULL << 37), arc_fpu_build, FPU_FPUD_ALL,\t\"mfpu=fpud_all\")\n+\n+ARC_OPT (FL_FPUS,  (0xFULL << 26), 0, \"single precission floating point\")\n+ARC_OPT (FL_FPUDA, (0xFFULL << 26), 0, \"double precission fp assist\")\n+ARC_OPT (FL_FPUD,  (0xF0FULL << 26), 0, \"double precission floating point\")\n+\n+/* Local Variables: */\n+/* mode: c */\n+/* End: */"}, {"sha": "e5bca8494f1b10e1f7dce713d3ca7a7988725817", "filename": "gcc/config/arc/arc-opts.h", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-opts.h?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "patch": "@@ -18,15 +18,16 @@\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n+#ifndef ARC_OPTS_H\n+#define ARC_OPTS_H\n+\n enum processor_type\n {\n-  PROCESSOR_NONE,\n-  PROCESSOR_ARC600,\n-  PROCESSOR_ARC601,\n-  PROCESSOR_ARC700,\n-  PROCESSOR_NPS400,\n-  PROCESSOR_ARCEM,\n-  PROCESSOR_ARCHS\n+  PROCESSOR_NONE = 0,\n+#define ARC_CPU(NAME, ARCH, FLAGS, TUNE)  PROCESSOR_##NAME,\n+#include \"arc-cpus.def\"\n+#undef ARC_CPU\n+  PROCESSOR_generic\n };\n \n /* Single precision floating point.  */\n@@ -48,3 +49,37 @@ enum processor_type\n /* Double precision floating point assist operations.  */\n #define FPX_DP    0x0100\n \n+/* fpus option combi.  */\n+#define FPU_FPUS  (FPU_SP | FPU_SC)\n+/* fpud option combi.  */\n+#define FPU_FPUD  (FPU_SP | FPU_SC | FPU_DP | FPU_DC)\n+/* fpuda option combi.  */\n+#define FPU_FPUDA (FPU_SP | FPU_SC | FPX_DP)\n+/* fpuda_div option combi.  */\n+#define FPU_FPUDA_DIV (FPU_SP | FPU_SC | FPU_SD | FPX_DP)\n+/* fpuda_fma option combi.  */\n+#define FPU_FPUDA_FMA (FPU_SP | FPU_SC | FPU_SF | FPX_DP)\n+/* fpuda_all option combi.  */\n+#define FPU_FPUDA_ALL (FPU_SP | FPU_SC | FPU_SF | FPU_SD | FPX_DP)\n+/* fpus_div option combi.  */\n+#define FPU_FPUS_DIV  (FPU_SP | FPU_SC | FPU_SD)\n+/* fpus_fma option combi.  */\n+#define FPU_FPUS_FMA  (FPU_SP | FPU_SC | FPU_SF)\n+/* fpus_all option combi.  */\n+#define FPU_FPUS_ALL  (FPU_SP | FPU_SC | FPU_SF | FPU_SD)\n+/* fpud_div option combi.  */\n+#define FPU_FPUD_DIV  (FPU_FPUS_DIV | FPU_DP | FPU_DC | FPU_DD)\n+/* fpud_fma option combi.  */\n+#define FPU_FPUD_FMA  (FPU_FPUS_FMA | FPU_DP | FPU_DC | FPU_DF)\n+/* fpud_all option combi.  */\n+#define FPU_FPUD_ALL  (FPU_FPUS_ALL | FPU_DP | FPU_DC | FPU_DF | FPU_DD)\n+\n+/* Default FPU option value needed to mark if the variable in question\n+   is changed by a command line option or not.  This is required when\n+   we set the cpu's specific configuration.  */\n+#define DEFAULT_arc_fpu_build 0x10000000\n+\n+/* Default MPY option value.  */\n+#define DEFAULT_arc_mpy_option -1\n+\n+#endif /* ARC_OPTS_H */"}, {"sha": "d1266b4a6dbf92635d03257c8a792c711d1bc6c4", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "patch": "@@ -52,7 +52,6 @@ extern enum arc_function_type arc_compute_function_type (struct function *);\n #endif /* TREE_CODE */\n \n \n-extern void arc_init (void);\n extern unsigned int arc_compute_frame_size (int);\n extern bool arc_ccfsm_branch_deleted_p (void);\n extern void arc_ccfsm_record_branch_deleted (void);"}, {"sha": "0e7c50c7be78553956fb4b35ab0f2ce698e21312", "filename": "gcc/config/arc/arc-tables.opt", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-tables.opt?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "patch": "@@ -0,0 +1,90 @@\n+; Auto-generated Makefile Snip\n+; Generated by    : ./gcc/config/arc/genoptions.awk\n+; Generated from  : ./gcc/config/arc/arc-cpu.def\n+;\n+; Copyright (C) 2016 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+Enum\n+Name(processor_type) Type(enum processor_type)\n+Known ARC CPUs (for use with the -mcpu= option):\n+\n+EnumValue\n+Enum(processor_type) String(em) Value(PROCESSOR_em)\n+\n+EnumValue\n+Enum(processor_type) String(arcem) Value(PROCESSOR_arcem)\n+\n+EnumValue\n+Enum(processor_type) String(em4) Value(PROCESSOR_em4)\n+\n+EnumValue\n+Enum(processor_type) String(em4_dmips) Value(PROCESSOR_em4_dmips)\n+\n+EnumValue\n+Enum(processor_type) String(em4_fpus) Value(PROCESSOR_em4_fpus)\n+\n+EnumValue\n+Enum(processor_type) String(em4_fpuda) Value(PROCESSOR_em4_fpuda)\n+\n+EnumValue\n+Enum(processor_type) String(hs) Value(PROCESSOR_hs)\n+\n+EnumValue\n+Enum(processor_type) String(archs) Value(PROCESSOR_archs)\n+\n+EnumValue\n+Enum(processor_type) String(hs34) Value(PROCESSOR_hs34)\n+\n+EnumValue\n+Enum(processor_type) String(hs38) Value(PROCESSOR_hs38)\n+\n+EnumValue\n+Enum(processor_type) String(hs38_linux) Value(PROCESSOR_hs38_linux)\n+\n+EnumValue\n+Enum(processor_type) String(arc600) Value(PROCESSOR_arc600)\n+\n+EnumValue\n+Enum(processor_type) String(arc600_norm) Value(PROCESSOR_arc600_norm)\n+\n+EnumValue\n+Enum(processor_type) String(arc600_mul64) Value(PROCESSOR_arc600_mul64)\n+\n+EnumValue\n+Enum(processor_type) String(arc600_mul32x16) Value(PROCESSOR_arc600_mul32x16)\n+\n+EnumValue\n+Enum(processor_type) String(arc601) Value(PROCESSOR_arc601)\n+\n+EnumValue\n+Enum(processor_type) String(arc601_norm) Value(PROCESSOR_arc601_norm)\n+\n+EnumValue\n+Enum(processor_type) String(arc601_mul64) Value(PROCESSOR_arc601_mul64)\n+\n+EnumValue\n+Enum(processor_type) String(arc601_mul32x16) Value(PROCESSOR_arc601_mul32x16)\n+\n+EnumValue\n+Enum(processor_type) String(arc700) Value(PROCESSOR_arc700)\n+\n+EnumValue\n+Enum(processor_type) String(nps400) Value(PROCESSOR_nps400)\n+\n+"}, {"sha": "3bce7ef3661078473536ddcd1dd6c2c45a6373b1", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 95, "deletions": 84, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "patch": "@@ -65,7 +65,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"alias.h\"\n \n /* Which cpu we're compiling for (ARC600, ARC601, ARC700).  */\n-static const char *arc_cpu_string = \"\";\n+static char arc_cpu_name[10] = \"\";\n+static const char *arc_cpu_string = arc_cpu_name;\n \n /* ??? Loads can handle any constant, stores can only handle small ones.  */\n /* OTOH, LIMMs cost extra, so their usefulness is limited.  */\n@@ -242,6 +243,12 @@ static bool arc_use_by_pieces_infrastructure_p (unsigned HOST_WIDE_INT,\n \t\t\t\t\t\tenum by_pieces_operation op,\n \t\t\t\t\t\tbool);\n \n+static const arc_cpu_t *arc_selected_cpu;\n+static const arc_arch_t *arc_selected_arch;\n+\n+/* Global var which sets the current compilation architecture.  */\n+enum base_architecture arc_base_cpu;\n+\n /* Implements target hook vector_mode_supported_p.  */\n \n static bool\n@@ -669,47 +676,9 @@ make_pass_arc_predicate_delay_insns (gcc::context *ctxt)\n \n /* Called by OVERRIDE_OPTIONS to initialize various things.  */\n \n-void\n+static void\n arc_init (void)\n {\n-  enum attr_tune tune_dflt = TUNE_NONE;\n-\n-  switch (arc_cpu)\n-    {\n-    case PROCESSOR_ARC600:\n-      arc_cpu_string = \"ARC600\";\n-      tune_dflt = TUNE_ARC600;\n-      break;\n-\n-    case PROCESSOR_ARC601:\n-      arc_cpu_string = \"ARC601\";\n-      tune_dflt = TUNE_ARC600;\n-      break;\n-\n-    case PROCESSOR_ARC700:\n-      arc_cpu_string = \"ARC700\";\n-      tune_dflt = TUNE_ARC700_4_2_STD;\n-      break;\n-\n-    case PROCESSOR_NPS400:\n-      arc_cpu_string = \"NPS400\";\n-      tune_dflt = TUNE_ARC700_4_2_STD;\n-      break;\n-\n-    case PROCESSOR_ARCEM:\n-      arc_cpu_string = \"EM\";\n-      break;\n-\n-    case PROCESSOR_ARCHS:\n-      arc_cpu_string = \"HS\";\n-      break;\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-\n-  if (arc_tune == TUNE_NONE)\n-    arc_tune = tune_dflt;\n   /* Note: arc_multcost is only used in rtx_cost if speed is true.  */\n   if (arc_multcost < 0)\n     switch (arc_tune)\n@@ -740,18 +709,10 @@ arc_init (void)\n \tbreak;\n       }\n \n-  /* Support mul64 generation only for ARC600.  */\n-  if (TARGET_MUL64_SET && (!TARGET_ARC600_FAMILY))\n-      error (\"-mmul64 not supported for ARC700 or ARCv2\");\n-\n   /* MPY instructions valid only for ARC700 or ARCv2.  */\n   if (TARGET_NOMPY_SET && TARGET_ARC600_FAMILY)\n       error (\"-mno-mpy supported only for ARC700 or ARCv2\");\n \n-  /* mul/mac instructions only for ARC600.  */\n-  if (TARGET_MULMAC_32BY16_SET && (!TARGET_ARC600_FAMILY))\n-      error (\"-mmul32x16 supported only for ARC600 or ARC601\");\n-\n   if (!TARGET_DPFP && TARGET_DPFP_DISABLE_LRSR)\n       error (\"-mno-dpfp-lrsr supported only with -mdpfp\");\n \n@@ -764,23 +725,11 @@ arc_init (void)\n   if (TARGET_SPFP_FAST_SET && TARGET_ARC600_FAMILY)\n     error (\"-mspfp_fast not available on ARC600 or ARC601\");\n \n-  /* FPX-3. No FPX extensions on pre-ARC600 cores.  */\n-  if ((TARGET_DPFP || TARGET_SPFP)\n-      && (!TARGET_ARCOMPACT_FAMILY && !TARGET_EM))\n-    error (\"FPX extensions not available on pre-ARC600 cores\");\n-\n-  /* FPX-4.  No FPX extensions mixed with FPU extensions for ARC HS\n-     cpus.  */\n-  if ((TARGET_DPFP || TARGET_SPFP)\n-      && TARGET_HARD_FLOAT\n-      && TARGET_HS)\n+  /* FPX-4.  No FPX extensions mixed with FPU extensions.  */\n+  if ((TARGET_DPFP_FAST_SET || TARGET_DPFP_COMPACT_SET || TARGET_SPFP)\n+      && TARGET_HARD_FLOAT)\n     error (\"No FPX/FPU mixing allowed\");\n \n-  /* Only selected multiplier configurations are available for HS.  */\n-  if (TARGET_HS && ((arc_mpy_option > 2 && arc_mpy_option < 7)\n-\t\t    || (arc_mpy_option == 1)))\n-    error (\"This multiplier configuration is not available for HS cores\");\n-\n   /* Warn for unimplemented PIC in pre-ARC700 cores, and disable flag_pic.  */\n   if (flag_pic && TARGET_ARC600_FAMILY)\n     {\n@@ -790,26 +739,6 @@ arc_init (void)\n       flag_pic = 0;\n     }\n \n-  if (TARGET_ATOMIC && !(TARGET_ARC700 || TARGET_HS))\n-    error (\"-matomic is only supported for ARC700 or ARC HS cores\");\n-\n-  /* ll64 ops only available for HS.  */\n-  if (TARGET_LL64 && !TARGET_HS)\n-    error (\"-mll64 is only supported for ARC HS cores\");\n-\n-  /* FPU support only for V2.  */\n-  if (TARGET_HARD_FLOAT)\n-    {\n-      if (TARGET_EM\n-\t  && (arc_fpu_build & ~(FPU_SP | FPU_SF | FPU_SC | FPU_SD | FPX_DP)))\n-\terror (\"FPU double precision options are available for ARC HS only\");\n-      if (TARGET_HS && (arc_fpu_build & FPX_DP))\n-\terror (\"FPU double precision assist \"\n-\t       \"options are not available for ARC HS\");\n-      if (!TARGET_HS && !TARGET_EM)\n-\terror (\"FPU options are available for ARCv2 architecture only\");\n-    }\n-\n   arc_init_reg_tables ();\n \n   /* Initialize array for PRINT_OPERAND_PUNCT_VALID_P.  */\n@@ -854,7 +783,89 @@ static void\n arc_override_options (void)\n {\n   if (arc_cpu == PROCESSOR_NONE)\n-    arc_cpu = PROCESSOR_ARC700;\n+    arc_cpu = TARGET_CPU_DEFAULT;\n+\n+  /* Set the default cpu options.  */\n+  arc_selected_cpu = &arc_cpu_types[(int) arc_cpu];\n+  arc_selected_arch = &arc_arch_types[(int) arc_selected_cpu->arch];\n+  arc_base_cpu = arc_selected_arch->arch;\n+\n+  /* Set the architectures.  */\n+  switch (arc_selected_arch->arch)\n+    {\n+    case BASE_ARCH_em:\n+      arc_cpu_string = \"EM\";\n+      break;\n+    case BASE_ARCH_hs:\n+      arc_cpu_string = \"HS\";\n+      break;\n+    case BASE_ARCH_700:\n+      if (arc_selected_cpu->processor == PROCESSOR_nps400)\n+\tarc_cpu_string = \"NPS400\";\n+      else\n+\tarc_cpu_string = \"ARC700\";\n+      break;\n+    case BASE_ARCH_6xx:\n+      arc_cpu_string = \"ARC600\";\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  /* Set cpu flags accordingly to architecture/selected cpu.  The cpu\n+     specific flags are set in arc-common.c.  The architecture forces\n+     the default hardware configurations in, regardless what command\n+     line options are saying.  The CPU optional hw options can be\n+     turned on or off.  */\n+#define ARC_OPT(NAME, CODE, MASK, DOC)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    if ((arc_selected_cpu->flags & CODE)\t\t\\\n+\t&& ((target_flags_explicit & MASK) == 0))\t\\\n+      target_flags |= MASK;\t\t\t\t\\\n+    if (arc_selected_arch->dflags & CODE)\t\t\\\n+      target_flags |= MASK;\t\t\t\t\\\n+  } while (0);\n+#define ARC_OPTX(NAME, CODE, VAR, VAL, DOC)\t\\\n+  do {\t\t\t\t\t\t\\\n+    if ((arc_selected_cpu->flags & CODE)\t\\\n+\t&& (VAR == DEFAULT_##VAR))\t\t\\\n+      VAR = VAL;\t\t\t\t\\\n+    if (arc_selected_arch->dflags & CODE)\t\\\n+      VAR = VAL;\t\t\t\t\\\n+  } while (0);\n+\n+#include \"arc-options.def\"\n+\n+#undef ARC_OPTX\n+#undef ARC_OPT\n+\n+  /* Check options against architecture options.  Throw an error if\n+     option is not allowed.  */\n+#define ARC_OPTX(NAME, CODE, VAR, VAL, DOC)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    if ((VAR == VAL)\t\t\t\t\t\t\\\n+\t&& (!(arc_selected_arch->flags & CODE)))\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\terror (\"%s is not available for %s architecture\",\t\\\n+\t       DOC, arc_selected_arch->name);\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  } while (0);\n+#define ARC_OPT(NAME, CODE, MASK, DOC)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    if ((target_flags & MASK)\t\t\t\t\t\\\n+\t&& (!(arc_selected_arch->flags & CODE)))\t\t\\\n+      error (\"%s is not available for %s architecture\",\t\t\\\n+\t     DOC, arc_selected_arch->name);\t\t\t\\\n+  } while (0);\n+\n+#include \"arc-options.def\"\n+\n+#undef ARC_OPTX\n+#undef ARC_OPT\n+\n+  /* Set Tune option.  */\n+  if (arc_tune == TUNE_NONE)\n+    arc_tune = (enum attr_tune) arc_selected_cpu->tune;\n \n   if (arc_size_opt_level == 3)\n     optimize_size = 1;"}, {"sha": "6188a4f81ad4447b71b815661fa5b5a3513809cc", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 40, "deletions": 49, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "patch": "@@ -28,6 +28,8 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_ARC_H\n #define GCC_ARC_H\n \n+#include <stdbool.h>\n+\n /* Things to do:\n \n    - incscc, decscc?\n@@ -39,6 +41,10 @@ along with GCC; see the file COPYING3.  If not see\n #define SYMBOL_FLAG_LONG_CALL\t(SYMBOL_FLAG_MACH_DEP << 2)\n #define SYMBOL_FLAG_CMEM\t(SYMBOL_FLAG_MACH_DEP << 3)\n \n+#ifndef TARGET_CPU_DEFAULT\n+#define TARGET_CPU_DEFAULT\tPROCESSOR_arc700\n+#endif\n+\n /* Check if this symbol has a long_call attribute in its declaration */\n #define SYMBOL_REF_LONG_CALL_P(X)\t\\\n \t((SYMBOL_REF_FLAGS (X) & SYMBOL_FLAG_LONG_CALL) != 0)\n@@ -74,9 +80,11 @@ along with GCC; see the file COPYING3.  If not see\n       GNU_USER_TARGET_OS_CPP_BUILTINS (); \\\n     } \\\n   while (0)\n-#endif\n \n-/* Match the macros used in the assembler.  */\n+#endif /* DEFAULT_LIBC == LIBC_UCLIBC */\n+\n+/* Macros enabled by specific command line option.  FIXME: to be\n+   deprecatd.  */\n #define CPP_SPEC \"\\\n %{msimd:-D__Xsimd} %{mno-mpy:-D__Xno_mpy} %{mswap:-D__Xswap} \\\n %{mmin-max:-D__Xmin_max} %{mEA:-D__Xea} \\\n@@ -85,34 +93,22 @@ along with GCC; see the file COPYING3.  If not see\n %{mdsp-packa:-D__Xdsp_packa} %{mcrc:-D__Xcrc} %{mdvbf:-D__Xdvbf} \\\n %{mtelephony:-D__Xtelephony} %{mxy:-D__Xxy} %{mmul64: -D__Xmult32} \\\n %{mlock:-D__Xlock} %{mswape:-D__Xswape} %{mrtsc:-D__Xrtsc} \\\n-%{mcpu=NPS400:-D__NPS400__} \\\n-%{mcpu=nps400:-D__NPS400__} \\\n-\"\n+%{mcpu=nps400:-D__NPS400__}\"\n \n #define CC1_SPEC \"\\\n %{EB:%{EL:%emay not use both -EB and -EL}} \\\n %{EB:-mbig-endian} %{EL:-mlittle-endian} \\\n \"\n+extern const char *arc_cpu_to_as (int argc, const char **argv);\n+\n+#define EXTRA_SPEC_FUNCTIONS\t\t\t\\\n+  { \"cpu_to_as\", arc_cpu_to_as },\n+\n+#define ASM_SPEC  \"%{mbig-endian|EB:-EB} %{EL} \"\t\t\t\\\n+  \"%:cpu_to_as(%{mcpu=*:%*}) %{mspfp*} %{mdpfp*} %{mfpu=fpuda*:-mfpuda}\"\n \n-#define ASM_DEFAULT \"-mARC700 -mEA\"\n-\n-#define ASM_SPEC  \"\\\n-%{mbig-endian|EB:-EB} %{EL} \\\n-%{mcpu=ARC600:-mARC600} \\\n-%{mcpu=ARC601:-mARC601} \\\n-%{mcpu=ARC700:-mARC700} \\\n-%{mcpu=ARC700:-mEA} \\\n-%{!mcpu=*:\" ASM_DEFAULT \"} \\\n-%{mbarrel-shifter} %{mno-mpy} %{mmul64} %{mmul32x16:-mdsp-packa} %{mnorm} \\\n-%{mswap} %{mEA} %{mmin-max} %{mspfp*} %{mdpfp*} %{mfpu=fpuda*:-mfpuda} \\\n-%{msimd} \\\n-%{mmac-d16} %{mmac-24} %{mdsp-packa} %{mcrc} %{mdvbf} %{mtelephony} %{mxy} \\\n-%{mcpu=ARC700|!mcpu=*:%{mlock}} \\\n-%{mcpu=ARC700|!mcpu=*:%{mswape}} \\\n-%{mcpu=ARC700|!mcpu=*:%{mrtsc}} \\\n-%{mcpu=ARCHS:-mHS} \\\n-%{mcpu=ARCEM:-mEM} \\\n-%{matomic:-mlock}\"\n+#define OPTION_DEFAULT_SPECS\t\t\t\t\t\t\\\n+  {\"cpu\", \"%{!mcpu=*:%{!mARC*:%{!marc*:%{!mA7:%{!mA6:-mcpu=%(VALUE)}}}}}\" }\n \n #if DEFAULT_LIBC == LIBC_UCLIBC\n /* Note that the default is to link against dynamic libraries, if they are\n@@ -178,17 +174,11 @@ along with GCC; see the file COPYING3.  If not see\n #define TARGET_MMEDIUM_CALLS_DEFAULT 0\n #endif\n \n-#define DRIVER_SELF_SPECS DRIVER_ENDIAN_SELF_SPECS \\\n-  \"%{mARC600|mA6: -mcpu=ARC600 %<mARC600 %<mA6}\" \\\n-  \"%{mARC601: -mcpu=ARC601 %<mARC601}\" \\\n-  \"%{mARC700|mA7: -mcpu=ARC700 %<mARC700 %<mA7}\" \\\n-  \"%{mbarrel_shifte*: -mbarrel-shifte%* %<mbarrel_shifte*}\" \\\n-  \"%{mEA: -mea %<mEA}\" \\\n-  \"%{mspfp_*: -mspfp-%* %<mspfp_*}\" \\\n-  \"%{mdpfp_*: -mdpfp-%* %<mdpfp_*}\" \\\n-  \"%{mdsp_pack*: -mdsp-pack%* %<mdsp_pack*}\" \\\n-  \"%{mmac_*: -mmac-%* %<mmac_*}\" \\\n-  \"%{multcost=*: -mmultcost=%* %<multcost=*}\"\n+#define DRIVER_SELF_SPECS DRIVER_ENDIAN_SELF_SPECS\t\t   \\\n+  \"%{mARC600|mA6: -mcpu=arc600 %<mARC600 %<mA6 %<mARC600}\"\t   \\\n+  \"%{mARC601: -mcpu=arc601 %<mARC601}\"\t\t\t\t   \\\n+  \"%{mARC700|mA7: -mcpu=arc700 %<mARC700 %<mA7}\"\t\t   \\\n+  \"%{mEA: -mea %<mEA}\"\n \n /* Run-time compilation parameters selecting different hardware subsets.  */\n \n@@ -234,20 +224,21 @@ along with GCC; see the file COPYING3.  If not see\n    use conditional execution?  */\n #define TARGET_AT_DBR_CONDEXEC  (!TARGET_ARC700 && !TARGET_V2)\n \n-#define TARGET_ARC600 (arc_cpu == PROCESSOR_ARC600)\n-#define TARGET_ARC601 (arc_cpu == PROCESSOR_ARC601)\n-#define TARGET_ARC700 (arc_cpu == PROCESSOR_ARC700\t\\\n-\t\t       || arc_cpu == PROCESSOR_NPS400)\n-#define TARGET_EM     (arc_cpu == PROCESSOR_ARCEM)\n-#define TARGET_HS     (arc_cpu == PROCESSOR_ARCHS)\n-#define TARGET_V2\t\t\t\t\t\t\t\\\n-  ((arc_cpu == PROCESSOR_ARCHS) || (arc_cpu == PROCESSOR_ARCEM))\n-\n-/* Recast the cpu class to be the cpu attribute.  */\n-#define arc_cpu_attr ((enum attr_cpu)arc_cpu)\n-\n-#ifndef MULTILIB_DEFAULTS\n-#define MULTILIB_DEFAULTS { \"mARC700\" }\n+extern enum base_architecture arc_base_cpu;\n+\n+#define TARGET_ARC600 ((arc_base_cpu == BASE_ARCH_6xx)\t\\\n+\t\t       && (TARGET_BARREL_SHIFTER))\n+#define TARGET_ARC601 ((arc_base_cpu == BASE_ARCH_6xx)\t\\\n+\t\t       && (!TARGET_BARREL_SHIFTER))\n+#define TARGET_ARC700 (arc_base_cpu == BASE_ARCH_700)\n+#define TARGET_EM (arc_base_cpu == BASE_ARCH_em)\n+#define TARGET_HS (arc_base_cpu == BASE_ARCH_hs)\n+#define TARGET_V2 (TARGET_EM || TARGET_HS)\n+\n+#ifdef ARC_MULTILIB_CPU_DEFAULT\n+# ifndef MULTILIB_DEFAULTS\n+#  define MULTILIB_DEFAULTS { \"mcpu=\" ARC_MULTILIB_CPU_DEFAULT }\n+# endif\n #endif\n \n #ifndef UNALIGNED_ACCESS_DEFAULT"}, {"sha": "429611e4a30d284621dcb318c1504e536cef7f93", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "patch": "@@ -231,11 +231,6 @@\n \t (eq_attr \"is_CALL\" \"yes\") (const_string \"yes\")]\n \t(const_string \"no\")))\n \n-\n-;; Attribute describing the processor\n-(define_attr \"cpu\" \"none,ARC600,ARC700,ARCEM,ARCHS\"\n-  (const (symbol_ref \"arc_cpu_attr\")))\n-\n ;; true for compact instructions (those with _s suffix)\n ;; \"maybe\" means compact unless we conditionalize the insn.\n (define_attr \"iscompact\" \"true,maybe,true_limm,maybe_limm,false\""}, {"sha": "56851003eaa0726a597ef87ea677d6563fd0e538", "filename": "gcc/config/arc/arc.opt", "status": "modified", "additions": 89, "deletions": 80, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Farc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.opt?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "patch": "@@ -54,8 +54,74 @@ Target Report\n Same as -mA7.\n \n mmpy-option=\n-Target RejectNegative Joined UInteger Var(arc_mpy_option) Init(2)\n--mmpy-option={0,1,2,3,4,5,6,7,8,9} Compile ARCv2 code with a multiplier design option.  Option 2 is default on.\n+Target RejectNegative Joined Enum(arc_mpy) Var(arc_mpy_option) Init(DEFAULT_arc_mpy_option)\n+-mmpy-option=MPY Compile ARCv2 code with a multiplier design option.\n+\n+Enum\n+Name(arc_mpy) Type(int)\n+\n+EnumValue\n+Enum(arc_mpy) String(0) Value(0)\n+\n+EnumValue\n+Enum(arc_mpy) String(none) Value(0) Canonical\n+\n+EnumValue\n+Enum(arc_mpy) String(1) Value(1)\n+\n+EnumValue\n+Enum(arc_mpy) String(w) Value(1) Canonical\n+\n+EnumValue\n+Enum(arc_mpy) String(2) Value(2)\n+\n+EnumValue\n+Enum(arc_mpy) String(mpy) Value(2)\n+\n+EnumValue\n+Enum(arc_mpy) String(wlh1) Value(2) Canonical\n+\n+EnumValue\n+Enum(arc_mpy) String(3) Value(3)\n+\n+EnumValue\n+Enum(arc_mpy) String(wlh2) Value(3) Canonical\n+\n+EnumValue\n+Enum(arc_mpy) String(4) Value(4)\n+\n+EnumValue\n+Enum(arc_mpy) String(wlh3) Value(4) Canonical\n+\n+EnumValue\n+Enum(arc_mpy) String(5) Value(5)\n+\n+EnumValue\n+Enum(arc_mpy) String(wlh4) Value(5) Canonical\n+\n+EnumValue\n+Enum(arc_mpy) String(6) Value(6)\n+\n+EnumValue\n+Enum(arc_mpy) String(wlh5) Value(6) Canonical\n+\n+EnumValue\n+Enum(arc_mpy) String(7) Value(7)\n+\n+EnumValue\n+Enum(arc_mpy) String(plus_dmpy) Value(7) Canonical\n+\n+EnumValue\n+Enum(arc_mpy) String(8) Value(8)\n+\n+EnumValue\n+Enum(arc_mpy) String(plus_macd) Value(8) Canonical\n+\n+EnumValue\n+Enum(arc_mpy) String(9) Value(9)\n+\n+EnumValue\n+Enum(arc_mpy) String(plus_qmacw) Value(9) Canonical\n \n mdiv-rem\n Target Report Mask(DIVREM)\n@@ -100,7 +166,7 @@ Target Report Mask(MUL64_SET)\n Generate mul64 and mulu64 instructions.\n \n mno-mpy\n-Target Report Mask(NOMPY_SET)\n+Target Report Mask(NOMPY_SET) Warn(%qs is deprecated)\n Do not generate mpy instructions for ARC700.\n \n mea\n@@ -167,45 +233,6 @@ mcpu=\n Target RejectNegative Joined Var(arc_cpu) Enum(processor_type) Init(PROCESSOR_NONE)\n -mcpu=CPU\tCompile code for ARC variant CPU.\n \n-Enum\n-Name(processor_type) Type(enum processor_type)\n-\n-EnumValue\n-Enum(processor_type) String(ARC600) Value(PROCESSOR_ARC600)\n-\n-EnumValue\n-Enum(processor_type) String(arc600) Value(PROCESSOR_ARC600)\n-\n-EnumValue\n-Enum(processor_type) String(ARC601) Value(PROCESSOR_ARC601)\n-\n-EnumValue\n-Enum(processor_type) String(arc601) Value(PROCESSOR_ARC601)\n-\n-EnumValue\n-Enum(processor_type) String(ARC700) Value(PROCESSOR_ARC700)\n-\n-EnumValue\n-Enum(processor_type) String(arc700) Value(PROCESSOR_ARC700)\n-\n-EnumValue\n-Enum(processor_type) String(nps400) Value(PROCESSOR_NPS400)\n-\n-EnumValue\n-Enum(processor_type) String(NPS400) Value(PROCESSOR_NPS400)\n-\n-EnumValue\n-Enum(processor_type) String(ARCEM) Value(PROCESSOR_ARCEM)\n-\n-EnumValue\n-Enum(processor_type) String(arcem) Value(PROCESSOR_ARCEM)\n-\n-EnumValue\n-Enum(processor_type) String(ARCHS) Value(PROCESSOR_ARCHS)\n-\n-EnumValue\n-Enum(processor_type) String(archs) Value(PROCESSOR_ARCHS)\n-\n msize-level=\n Target RejectNegative Joined UInteger Var(arc_size_opt_level) Init(-1)\n size optimization level: 0:none 1:opportunistic 2: regalloc 3:drop align, -Os.\n@@ -308,25 +335,25 @@ Expand adddi3 and subdi3 at rtl generation time into add.f / adc etc.\n ; Flags used by the assembler, but for which we define preprocessor\n ; macro symbols as well.\n mcrc\n-Target Report\n+Target Report Warn(%qs is deprecated)\n Enable variable polynomial CRC extension.\n \n mdsp-packa\n-Target Report\n+Target Report Warn(%qs is deprecated)\n Enable DSP 3.1 Pack A extensions.\n \n mdvbf\n-Target Report\n+Target Report Warn(%qs is deprecated)\n Enable dual viterbi butterfly extension.\n \n mmac-d16\n-Target Report Undocumented\n+Target Report Undocumented Warn(%qs is deprecated)\n \n mmac-24\n-Target Report Undocumented\n+Target Report Undocumented Warn(%qs is deprecated)\n \n mtelephony\n-Target Report RejectNegative\n+Target Report RejectNegative Warn(%qs is deprecated)\n Enable Dual and Single Operand Instructions for Telephony.\n \n mxy\n@@ -343,7 +370,7 @@ Target Report\n Enable swap byte ordering extension instruction.\n \n mrtsc\n-Target Report\n+Target Report Warn(%qs is deprecated)\n Enable 64-bit Time-Stamp Counter extension instruction.\n \n EB\n@@ -394,24 +421,6 @@ Target\n multcost=\n Target RejectNegative Joined\n \n-; Unfortunately, listing the full option name gives us clashes\n-; with OPT_opt_name being claimed for both opt_name and opt-name,\n-; so we leave out the last character or more.\n-mbarrel_shifte\n-Target Joined\n-\n-mspfp_\n-Target Joined\n-\n-mdpfp_\n-Target Joined\n-\n-mdsp_pack\n-Target Joined\n-\n-mmac_\n-Target Joined\n-\n matomic\n Target Report Mask(ATOMIC)\n Enable atomic instructions.\n@@ -421,47 +430,47 @@ Target Report Mask(LL64)\n Enable double load/store instructions for ARC HS.\n \n mfpu=\n-Target RejectNegative Joined Enum(arc_fpu) Var(arc_fpu_build) Init(0)\n+Target RejectNegative Joined Enum(arc_fpu) Var(arc_fpu_build) Init(DEFAULT_arc_fpu_build)\n Specify the name of the target floating point configuration.\n \n Enum\n Name(arc_fpu) Type(int)\n \n EnumValue\n-Enum(arc_fpu) String(fpus) Value(FPU_SP | FPU_SC)\n+Enum(arc_fpu) String(fpus) Value(FPU_FPUS)\n \n EnumValue\n-Enum(arc_fpu) String(fpud) Value(FPU_SP | FPU_SC | FPU_DP | FPU_DC)\n+Enum(arc_fpu) String(fpud) Value(FPU_FPUD)\n \n EnumValue\n-Enum(arc_fpu) String(fpuda) Value(FPU_SP | FPU_SC | FPX_DP)\n+Enum(arc_fpu) String(fpuda) Value(FPU_FPUDA)\n \n EnumValue\n-Enum(arc_fpu) String(fpuda_div) Value(FPU_SP | FPU_SC | FPU_SD | FPX_DP)\n+Enum(arc_fpu) String(fpuda_div) Value(FPU_FPUDA_DIV)\n \n EnumValue\n-Enum(arc_fpu) String(fpuda_fma) Value(FPU_SP | FPU_SC | FPU_SF | FPX_DP)\n+Enum(arc_fpu) String(fpuda_fma) Value(FPU_FPUDA_FMA)\n \n EnumValue\n-Enum(arc_fpu) String(fpuda_all) Value(FPU_SP | FPU_SC | FPU_SF | FPU_SD | FPX_DP)\n+Enum(arc_fpu) String(fpuda_all) Value(FPU_FPUDA_ALL)\n \n EnumValue\n-Enum(arc_fpu) String(fpus_div) Value(FPU_SP | FPU_SC | FPU_SD)\n+Enum(arc_fpu) String(fpus_div) Value(FPU_FPUS_DIV)\n \n EnumValue\n-Enum(arc_fpu) String(fpud_div) Value(FPU_SP | FPU_SC | FPU_SD | FPU_DP | FPU_DC | FPU_DD)\n+Enum(arc_fpu) String(fpud_div) Value(FPU_FPUD_DIV)\n \n EnumValue\n-Enum(arc_fpu) String(fpus_fma) Value(FPU_SP | FPU_SC | FPU_SF)\n+Enum(arc_fpu) String(fpus_fma) Value(FPU_FPUS_FMA)\n \n EnumValue\n-Enum(arc_fpu) String(fpud_fma) Value(FPU_SP | FPU_SC | FPU_SF | FPU_DP | FPU_DC | FPU_DF)\n+Enum(arc_fpu) String(fpud_fma) Value(FPU_FPUD_FMA)\n \n EnumValue\n-Enum(arc_fpu) String(fpus_all) Value(FPU_SP | FPU_SC | FPU_SF | FPU_SD)\n+Enum(arc_fpu) String(fpus_all) Value(FPU_FPUS_ALL)\n \n EnumValue\n-Enum(arc_fpu) String(fpud_all) Value(FPU_SP | FPU_SC | FPU_SF | FPU_SD | FPU_DP | FPU_DC | FPU_DF | FPU_DD)\n+Enum(arc_fpu) String(fpud_all) Value(FPU_FPUD_ALL)\n \n mtp-regno=\n Target RejectNegative Joined UInteger Var(arc_tp_regno) Init(25)"}, {"sha": "0c24cdaf08d2871021943d016e76bfbc342aeea7", "filename": "gcc/config/arc/driver-arc.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Fdriver-arc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Fdriver-arc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fdriver-arc.c?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "patch": "@@ -0,0 +1,81 @@\n+/* Subroutines for the gcc driver.\n+   Copyright (C) 2016 Free Software Foundation, Inc.\n+   Contributed by Claudiu Zissulescu <claziss@synopsys.com>\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+\n+/* Returns command line parameters to pass to as.  */\n+\n+const char*\n+arc_cpu_to_as (int argc, const char **argv)\n+{\n+  const char *name = NULL;\n+  const arc_cpu_t *arc_selected_cpu;\n+\n+  /* No argument, check what is the default cpu.  */\n+  if (argc == 0)\n+    {\n+      arc_selected_cpu = &arc_cpu_types[(int) TARGET_CPU_DEFAULT];\n+    }\n+  else\n+    {\n+      name = argv[0];\n+      for (arc_selected_cpu = arc_cpu_types; arc_selected_cpu->name;\n+\t   arc_selected_cpu++)\n+\t{\n+\t  if (strcmp (arc_selected_cpu->name, name) == 0)\n+\t    break;\n+\t}\n+    }\n+\n+  switch (arc_selected_cpu->arch)\n+    {\n+    case BASE_ARCH_em:\n+      if (arc_selected_cpu->flags & FL_CD)\n+\tname = \"-mcode-density\";\n+      else\n+\tname = \"\";\n+      if (arc_selected_cpu->flags & FL_FPUDA)\n+\tname = concat (\"-mfpuda \", name, NULL);\n+      if (arc_selected_cpu->flags & FL_SPFP)\n+\tname = concat (\"-mspfp \", name, NULL);\n+      if (arc_selected_cpu->flags & FL_DPFP)\n+\tname = concat (\"-mdpfp \", name, NULL);\n+      return concat (\"-mcpu=arcem \", name, NULL);\n+    case BASE_ARCH_hs:\n+      return \"-mcpu=archs\";\n+    case BASE_ARCH_700:\n+      if (arc_selected_cpu->processor == PROCESSOR_nps400)\n+\treturn \"-mcpu=nps400 -mEA\";\n+      else\n+\treturn \"-mcpu=arc700 -mEA\";\n+    case BASE_ARCH_6xx:\n+      if (arc_selected_cpu->flags & FL_MUL64)\n+\treturn \"-mcpu=arc600 -mmul64 -mnorm\";\n+      if (arc_selected_cpu->flags & FL_MUL32x16)\n+\treturn \"-mcpu=arc600 -mdsp-packa -mnorm\";\n+      return \"-mcpu=arc600 -mnorm\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+  return NULL;\n+}"}, {"sha": "5934f4fcb3f21ed6bc41162a13c4644d4ae7ea27", "filename": "gcc/config/arc/genmultilib.awk", "status": "added", "additions": 203, "deletions": 0, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Fgenmultilib.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Fgenmultilib.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fgenmultilib.awk?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "patch": "@@ -0,0 +1,203 @@\n+# Copyright (C) 2016 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify it under\n+# the terms of the GNU General Public License as published by the Free\n+# Software Foundation; either version 3, or (at your option) any later\n+# version.\n+#\n+# GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+# WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+##################################################################\n+#\n+# This file is using AVR's genmultilib.awk idea.\n+# Transform CPU Information from arc-cpu.def to a\n+# Representation that is understood by GCC's multilib Machinery.\n+#\n+# The Script works as a Filter from STDIN to STDOUT.\n+#\n+# FORMAT = \"Makefile\": Generate Makefile Snipet that sets some\n+#                      MULTILIB_* Variables as needed.\n+#\n+##################################################################\n+\n+BEGIN {\n+  FS =\"[(, \\t)]+\"\n+  comment = 1\n+  n_cores = 0\n+  n_reuse = 0\n+}\n+\n+##################################################################\n+# Add some Comments to the generated Files and copy-paste\n+# Copyright Notice from above.\n+##################################################################\n+/^#/ {\n+  if (!comment)\n+    next\n+  else if (comment == 1)\n+    {\n+      if (FORMAT == \"Makefile\")\n+\t{\n+\t  print \"# Auto-generated Makefile Snip\"\n+\t  print \"# Generated by    : ./gcc/config/arc/genmultilib.awk\"\n+\t  print \"# Generated from  : ./gcc/config/arc/arc-cpu.def\"\n+\t  print \"# Used by         : tmake_file from Makefile and genmultilib\"\n+\t  print \"\"\n+\t}\n+    }\n+\n+  comment = 2;\n+\n+  print\n+}\n+\n+/^$/ {\n+  # The first empty line stops copy-pasting the GPL comments\n+  # from this file to the generated file.\n+\n+  comment = 0\n+}\n+\n+\n+/^ARC_CPU/ {\n+  name = $2\n+  #  gsub (\"\\\"\", \"\", name)\n+\n+  if ($4 != \"0\")\n+    {\n+      arch = $3\n+      if (arch == \"6xx\")\n+\tarch = 601\n+\n+      n = split ($4, cpu_flg, \"|\")\n+\n+      line = \"mcpu.\" arch\n+      for (i = 1; i <= n; i++)\n+\t{\n+\t  if (cpu_flg[i] == \"FL_MPYOPT_0\")\n+\t    line = line \"/mmpy-option.0\"\n+\t  else if (cpu_flg[i] == \"FL_MPYOPT_1\")\n+\t    line = line \"/mmpy-option.1\"\n+\t  else if (cpu_flg[i] == \"FL_MPYOPT_2\")\n+\t    line = line \"/mmpy-option.2\"\n+\t  else if (cpu_flg[i] == \"FL_MPYOPT_3\")\n+\t    line = line \"/mmpy-option.3\"\n+\t  else if (cpu_flg[i] == \"FL_MPYOPT_4\")\n+\t    line = line \"/mmpy-option.4\"\n+\t  else if (cpu_flg[i] == \"FL_MPYOPT_5\")\n+\t    line = line \"/mmpy-option.5\"\n+\t  else if (cpu_flg[i] == \"FL_MPYOPT_6\")\n+\t    line = line \"/mmpy-option.6\"\n+\t  else if (cpu_flg[i] == \"FL_MPYOPT_7\")\n+\t    line = line \"/mmpy-option.7\"\n+\t  else if (cpu_flg[i] == \"FL_MPYOPT_8\")\n+\t    line = line \"/mmpy-option.8\"\n+\t  else if (cpu_flg[i] == \"FL_MPYOPT_9\")\n+\t    line = line \"/mmpy-option.9\"\n+\t  else if (cpu_flg[i] == \"FL_CD\")\n+\t    line = line \"/mcode-density\"\n+\t  else if (cpu_flg[i] == \"FL_BS\")\n+\t    line = line \"/mbarrel-shifter\"\n+\t  else if (cpu_flg[i] == \"FL_DIVREM\")\n+\t    line = line \"/mdiv-rem\"\n+\t  else if (cpu_flg[i] == \"FL_NORM\" \\\n+\t\t   || cpu_flg[i] == \"FL_SWAP\")\n+\t    line = line \"/mnorm\"\n+\t  else if (cpu_flg[i] == \"FL_FPU_FPUS\")\n+\t    line = line \"/mfpu.fpus\"\n+\t  else if (cpu_flg[i] == \"FL_FPU_FPUDA\")\n+\t    line = line \"/mfpu.fpuda\"\n+\t  else if (cpu_flg[i] == \"FL_FPU_FPUD_ALL\")\n+\t    line = line \"/mfpu.fpud_all\"\n+\t  else if (cpu_flg[i] == \"FL_LL64\")\n+\t    line = line \"/mll64\"\n+\t  else if (cpu_flg[i] == \"FL_MUL64\")\n+\t    line = line \"/mmul64\"\n+\t  else if (cpu_flg[i] == \"FL_MUL32x16\")\n+\t    line = line \"/mmul32x16\"\n+\t  else if (cpu_flg[i] == \"FL_FPX_QUARK\")\n+\t    line = line \"/quark\"\n+\t  else if (cpu_flg[i] == \"FL_SPFP\")\n+\t    line = line \"/spfp\"\n+\t  else if (cpu_flg[i] == \"FL_DPFP\")\n+\t    line = line \"/dpfp\"\n+\t  else\n+\t    {\n+\t      print \"Don't know the flag \" cpu_flg[i] > \"/dev/stderr\"\n+\t      exit 1\n+\t    }\n+\t}\n+      line = \"mcpu.\" name \"=\" line\n+      reuse[n_reuse] = line\n+      n_reuse++\n+    }\n+\n+  core = name\n+  cores[n_cores] = core\n+  n_cores++\n+}\n+\n+##################################################################\n+#\n+# We gathered all the Information, now build/output the following:\n+#\n+#    awk Variable         target Variable          FORMAT\n+#  -----------------------------------------------------------\n+#    m_options     <->    MULTILIB_OPTIONS         Makefile\n+#    m_dirnames    <->    MULTILIB_DIRNAMES           \"\n+#\n+##################################################################\n+\n+END {\n+  m_options    = \"\\nMULTILIB_OPTIONS = \"\n+  m_dirnames   = \"\\nMULTILIB_DIRNAMES =\"\n+  m_reuse      = \"\\nMULTILIB_REUSE =\"\n+\n+  sep = \"\"\n+  for (c = 0; c < n_cores; c++)\n+    {\n+      m_options  = m_options sep \"mcpu=\" cores[c]\n+      m_dirnames = m_dirnames \" \" cores[c]\n+      sep = \"/\"\n+    }\n+\n+  sep = \"\"\n+  for (c = 0; c < n_reuse; c++)\n+    {\n+      m_reuse = m_reuse sep reuse[c]\n+      sep = \"\\nMULTILIB_REUSE +=\"\n+    }\n+  ############################################################\n+  # Output that Stuff\n+  ############################################################\n+\n+  if (FORMAT == \"Makefile\")\n+    {\n+      # Intended Target: ./gcc/config/arc/t-multilib\n+\n+      print m_options\n+      print m_dirnames\n+\n+      ############################################################\n+      # Legacy Aliases\n+      ############################################################\n+\n+      print \"\"\n+      print \"# Aliases:\"\n+      print \"MULTILIB_MATCHES  = mcpu?arc600=mcpu?ARC600\"\n+      print \"MULTILIB_MATCHES += mcpu?arc600=mARC600\"\n+      print \"MULTILIB_MATCHES += mcpu?arc600=mA6\"\n+      print \"MULTILIB_MATCHES += mcpu?arc601=mcpu?ARC601\"\n+      print \"MULTILIB_MATCHES += mcpu?arc700=mA7\"\n+      print \"MULTILIB_MATCHES += mcpu?arc700=mARC700\"\n+    }\n+}"}, {"sha": "24a93eb5e1fe7cd3b40df53a3e72d86ac6838491", "filename": "gcc/config/arc/genoptions.awk", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Fgenoptions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Fgenoptions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fgenoptions.awk?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "patch": "@@ -0,0 +1,86 @@\n+# Copyright (C) 2016 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify it under\n+# the terms of the GNU General Public License as published by the Free\n+# Software Foundation; either version 3, or (at your option) any later\n+# version.\n+#\n+# GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+# WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+##################################################################\n+#\n+# This file is using AVR's genmultilib.awk idea.\n+#\n+##################################################################\n+\n+BEGIN {\n+  FS =\"[(, \\t)]+\"\n+  comment = 1\n+  n_cores = 0\n+}\n+\n+##################################################################\n+# Add some Comments to the generated Files and copy-paste\n+# Copyright Notice from above.\n+##################################################################\n+/^#/ {\n+  if (!comment)\n+    next\n+  else if (comment == 1)\n+    {\n+      if (FORMAT == \"Makefile\")\n+\t{\n+\t  print \"; Auto-generated Makefile Snip\"\n+\t  print \"; Generated by    : ./gcc/config/arc/genoptions.awk\"\n+\t  print \"; Generated from  : ./gcc/config/arc/arc-cpu.def\"\n+\t  print \";\"\n+\t}\n+    }\n+\n+  comment = 2;\n+\n+  gsub (\"^#\", \";\", $0)\n+  print\n+}\n+\n+/^$/ {\n+    # The first empty line stops copy-pasting the GPL comments\n+    # from this file to the generated file.\n+    comment = 0\n+}\n+\n+/^ARC_CPU/ {\n+  name = $2\n+  cores[n_cores] = name;\n+  n_cores++\n+}\n+\n+END {\n+  m_option = \"\"\n+  for (c = 0; c < n_cores; c++)\n+    {\n+      m_options = m_options \"EnumValue\\nEnum(processor_type) String(\" \\\n+\tcores[c] \") Value(PROCESSOR_\" cores[c] \")\\n\\n\"\n+    }\n+\n+  ############################################################\n+  # Output that Stuff\n+  ############################################################\n+\n+  if (FORMAT == \"Makefile\")\n+    {\n+\tprint \"\\nEnum\"\n+\tprint \"Name(processor_type) Type(enum processor_type)\"\n+\tprint \"Known ARC CPUs (for use with the -mcpu= option):\\n\"\n+\tprint m_options\n+    }\n+}"}, {"sha": "bdb1328c64e56d5baea481c7956db27b85f31a30", "filename": "gcc/config/arc/t-arc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Ft-arc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Ft-arc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Ft-arc?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "patch": "@@ -19,11 +19,30 @@\n \n TM_H += $(srcdir)/config/arc/arc-c.def\n \n+driver-arc.o: $(srcdir)/config/arc/driver-arc.c \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\n arc-c.o: $(srcdir)/config/arc/arc-c.c $(CONFIG_H) $(SYSTEM_H) \\\n $(TREE_H) $(TM_H) $(TM_P_H) coretypes.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/arc/arc-c.c\n \n+#Run `arc-cpus` if you changed something in arc-cpus.def\n+\n+.PHONY: arc-cpus\n+\n+arc-cpus: $(srcdir)/config/arc/t-multilib \\\n+\t$(srcdir)/config/arc/arc-tables.opt\n+\n+$(srcdir)/config/arc/t-multilib: $(srcdir)/config/arc/genmultilib.awk \t\\\n+\t\t\t\t $(srcdir)/config/arc/arc-cpus.def\n+\t$(AWK) -f $< -v FORMAT=Makefile $< $(srcdir)/config/arc/arc-cpus.def > $@\n+\n+$(srcdir)/config/arc/arc-tables.opt: $(srcdir)/config/arc/genoptions.awk \\\n+\t\t\t\t $(srcdir)/config/arc/arc-cpus.def\n+\t$(AWK) -f $< -v FORMAT=Makefile $< $(srcdir)/config/arc/arc-cpus.def > $@\n+\n # Local Variables:\n # mode: Makefile\n # End:"}, {"sha": "c49a3fcc146fe77e3a04dc773d2536276373383f", "filename": "gcc/config/arc/t-arc-newlib", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf63121e9640348fa3d917dfb247da545255c61/gcc%2Fconfig%2Farc%2Ft-arc-newlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf63121e9640348fa3d917dfb247da545255c61/gcc%2Fconfig%2Farc%2Ft-arc-newlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Ft-arc-newlib?ref=2cf63121e9640348fa3d917dfb247da545255c61", "patch": "@@ -1,46 +0,0 @@\n-# GCC Makefile fragment for Synopsys DesignWare ARC with newlib.\n-\n-# Copyright (C) 2007-2016 Free Software Foundation, Inc.\n-\n-# This file is part of GCC.\n-\n-# GCC is free software; you can redistribute it and/or modify it under the\n-# terms of the GNU General Public License as published by the Free Software\n-# Foundation; either version 3, or (at your option) any later version.\n-\n-# GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n-# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n-# details.\n-\n-# You should have received a copy of the GNU General Public License along\n-# with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-MULTILIB_OPTIONS=mcpu=ARC600/mcpu=ARC601/mcpu=ARC700/mcpu=ARCEM/mcpu=ARCHS mmul64/mmul32x16 mnorm\n-MULTILIB_DIRNAMES=arc600 arc601 arc700 em hs mul64 mul32x16 norm\n-#\n-# Aliases:\n-MULTILIB_MATCHES  = mcpu?ARC600=mcpu?arc600\n-MULTILIB_MATCHES += mcpu?ARC600=mARC600\n-MULTILIB_MATCHES += mcpu?ARC600=mA6\n-MULTILIB_MATCHES += mcpu?ARC600=mno-mpy\n-MULTILIB_MATCHES += mcpu?ARC601=mcpu?arc601\n-MULTILIB_MATCHES += mcpu?ARC700=mA7\n-MULTILIB_MATCHES += mcpu?ARC700=mARC700\n-MULTILIB_MATCHES += mcpu?ARC700=mcpu?arc700\n-MULTILIB_MATCHES += mcpu?ARCEM=mcpu?arcem\n-MULTILIB_MATCHES += mcpu?ARCHS=mcpu?archs\n-MULTILIB_MATCHES += EL=mlittle-endian\n-MULTILIB_MATCHES += EB=mbig-endian\n-#\n-# These don't make sense for the ARC700 default target:\n-MULTILIB_EXCEPTIONS=mmul64* mmul32x16* norm*\n-# And neither of the -mmul* options make sense without -mnorm:\n-MULTILIB_EXCLUSIONS=mARC600/mmul64/!mnorm mcpu=ARC601/mmul64/!mnorm mARC600/mmul32x16/!mnorm\n-# Exclusions for ARC700\n-MULTILIB_EXCEPTIONS += mcpu=ARC700/mnorm* mcpu=ARC700/mmul64* mcpu=ARC700/mmul32x16*\n-# Exclusions for ARCv2EM\n-MULTILIB_EXCEPTIONS += mcpu=ARCEM/mmul64* mcpu=ARCEM/mmul32x16*\n-# Exclusions for ARCv2HS\n-MULTILIB_EXCEPTIONS += mcpu=ARCHS/mmul64* mcpu=ARCHS/mmul32x16* mcpu=ARCHS/mnorm*"}, {"sha": "5a36af6571e48dd109dd5650f20020fe432f3714", "filename": "gcc/config/arc/t-multilib", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Ft-multilib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Ft-multilib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Ft-multilib?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "patch": "@@ -0,0 +1,34 @@\n+# Auto-generated Makefile Snip\n+# Generated by    : ./gcc/config/arc/genmultilib.awk\n+# Generated from  : ./gcc/config/arc/arc-cpu.def\n+# Used by         : tmake_file from Makefile and genmultilib\n+\n+# Copyright (C) 2016 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify it under\n+# the terms of the GNU General Public License as published by the Free\n+# Software Foundation; either version 3, or (at your option) any later\n+# version.\n+#\n+# GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+# WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+MULTILIB_OPTIONS = mcpu=em/mcpu=arcem/mcpu=em4/mcpu=em4_dmips/mcpu=em4_fpus/mcpu=em4_fpuda/mcpu=hs/mcpu=archs/mcpu=hs34/mcpu=hs38/mcpu=hs38_linux/mcpu=arc600/mcpu=arc600_norm/mcpu=arc600_mul64/mcpu=arc600_mul32x16/mcpu=arc601/mcpu=arc601_norm/mcpu=arc601_mul64/mcpu=arc601_mul32x16/mcpu=arc700/mcpu=nps400\n+\n+MULTILIB_DIRNAMES = em arcem em4 em4_dmips em4_fpus em4_fpuda hs archs hs34 hs38 hs38_linux arc600 arc600_norm arc600_mul64 arc600_mul32x16 arc601 arc601_norm arc601_mul64 arc601_mul32x16 arc700 nps400\n+\n+# Aliases:\n+MULTILIB_MATCHES  = mcpu?arc600=mcpu?ARC600\n+MULTILIB_MATCHES += mcpu?arc600=mARC600\n+MULTILIB_MATCHES += mcpu?arc600=mA6\n+MULTILIB_MATCHES += mcpu?arc601=mcpu?ARC601\n+MULTILIB_MATCHES += mcpu?arc700=mA7\n+MULTILIB_MATCHES += mcpu?arc700=mARC700"}, {"sha": "11e81f1ee5efad56afd226f5e3d1684a3fcef57b", "filename": "gcc/config/arc/t-uClibc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Ft-uClibc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fconfig%2Farc%2Ft-uClibc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Ft-uClibc?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "previous_filename": "gcc/config/arc/t-arc-uClibc"}, {"sha": "7176037a6249f4f725621a7c214450ca8f1e54a6", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 78, "deletions": 12, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "patch": "@@ -14174,29 +14174,92 @@ values for @var{cpu} are\n @table @samp\n @opindex mA6\n @opindex mARC600\n-@item ARC600\n @item arc600\n Compile for ARC600.  Aliases: @option{-mA6}, @option{-mARC600}.\n \n-@item ARC601\n @item arc601\n @opindex mARC601\n Compile for ARC601.  Alias: @option{-mARC601}.\n \n-@item ARC700\n @item arc700\n @opindex mA7\n @opindex mARC700\n Compile for ARC700.  Aliases: @option{-mA7}, @option{-mARC700}.\n This is the default when configured with @option{--with-cpu=arc700}@.\n \n-@item ARCEM\n @item arcem\n Compile for ARC EM.\n \n-@item ARCHS\n @item archs\n Compile for ARC HS.\n+\n+@item em\n+@opindex em\n+Compile for ARC EM cpu with no hardware extension.\n+\n+@item em4\n+@opindex em4\n+Compile for ARC EM4 cpu.\n+\n+@item em4_dmips\n+@opindex em4_dmips\n+Compile for ARC EM4 DMIPS cpu.\n+\n+@item em4_fpus\n+@opindex em4_fpus\n+Compile for ARC EM4 DMIPS cpu with single precision floating point\n+extension.\n+\n+@item em4_fpuda\n+@opindex em4_fpuda\n+Compile for ARC EM4 DMIPS cpu with single precision floating point and\n+double assists instructions.\n+\n+@item hs\n+@opindex hs\n+Compile for ARC HS cpu with no hardware extension, except the atomic\n+instructions.\n+\n+@item hs34\n+@opindex hs34\n+Compile for ARC HS34 cpu.\n+\n+@item hs38\n+@opindex hs38\n+Compile for ARC HS38 cpu.\n+\n+@item hs38_linux\n+@opindex hs38_linux\n+Compile for ARC HS38 cpu with all hardware extensions on.\n+\n+@item arc600_norm\n+@opindex arc600_norm\n+Compile for ARC 600 cpu with norm instruction enabled.\n+\n+@item arc600_mul32x16\n+@opindex arc600_mul32x16\n+Compile for ARC 600 cpu with norm and mul32x16 instructions enabled.\n+\n+@item arc600_mul64\n+@opindex arc600_mul64\n+Compile for ARC 600 cpu with norm and mul64 instructions enabled.\n+\n+@item arc601_norm\n+@opindex arc601_norm\n+Compile for ARC 601 cpu with norm instruction enabled.\n+\n+@item arc601_mul32x16\n+@opindex arc601_mul32x16\n+Compile for ARC 601 cpu with norm and mul32x16 instructions enabled.\n+\n+@item arc601_mul64\n+@opindex arc601_mul64\n+Compile for ARC 601 cpu with norm and mul64 instructions enabled.\n+\n+@item nps400\n+@opindex nps400\n+Compile for ARC 700 on NPS400 chip.\n+\n @end table\n \n @item -mdpfp\n@@ -14223,7 +14286,8 @@ supported.  This is always enabled for @option{-mcpu=ARC700}.\n \n @item -mno-mpy\n @opindex mno-mpy\n-Do not generate mpy instructions for ARC700.\n+Do not generate mpy instructions for ARC700.  This instruction is\n+deprecated.\n \n @item -mmul32x16\n @opindex mmul32x16\n@@ -14430,12 +14494,14 @@ define preprocessor macro symbols.\n @item -mdsp-packa\n @opindex mdsp-packa\n Passed down to the assembler to enable the DSP Pack A extensions.\n-Also sets the preprocessor symbol @code{__Xdsp_packa}.\n+Also sets the preprocessor symbol @code{__Xdsp_packa}.  This option is\n+deprecated.\n \n @item -mdvbf\n @opindex mdvbf\n Passed down to the assembler to enable the dual viterbi butterfly\n-extension.  Also sets the preprocessor symbol @code{__Xdvbf}.\n+extension.  Also sets the preprocessor symbol @code{__Xdvbf}.  This\n+option is deprecated.\n \n @c ARC700 4.10 extension instruction\n @item -mlock\n@@ -14447,19 +14513,19 @@ Conditional extension.  Also sets the preprocessor symbol\n @item -mmac-d16\n @opindex mmac-d16\n Passed down to the assembler.  Also sets the preprocessor symbol\n-@code{__Xxmac_d16}.\n+@code{__Xxmac_d16}.  This option is deprecated.\n \n @item -mmac-24\n @opindex mmac-24\n Passed down to the assembler.  Also sets the preprocessor symbol\n-@code{__Xxmac_24}.\n+@code{__Xxmac_24}.  This option is deprecated.\n \n @c ARC700 4.10 extension instruction\n @item -mrtsc\n @opindex mrtsc\n Passed down to the assembler to enable the 64-bit Time-Stamp Counter\n extension instruction.  Also sets the preprocessor symbol\n-@code{__Xrtsc}.\n+@code{__Xrtsc}.  This option is deprecated.\n \n @c ARC700 4.10 extension instruction\n @item -mswape\n@@ -14472,7 +14538,7 @@ extension instruction.  Also sets the preprocessor symbol\n @opindex mtelephony\n Passed down to the assembler to enable dual and single operand\n instructions for telephony.  Also sets the preprocessor symbol\n-@code{__Xtelephony}.\n+@code{__Xtelephony}.  This option is deprecated.\n \n @item -mxy\n @opindex mxy"}, {"sha": "fe80ce52e33e66421cf77a7db58982fec344401e", "filename": "gcc/testsuite/gcc.target/arc/nps400-cpu-flag.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fnps400-cpu-flag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ccf89916a2adc029d9e2f8611b09e17a236c3d/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fnps400-cpu-flag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fnps400-cpu-flag.c?ref=f9ccf89916a2adc029d9e2f8611b09e17a236c3d", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=nps400\" } */\n+\n+/* { dg-final { scan-assembler \".cpu NPS400\" } } */"}]}