{"sha": "865d6730c280d0c6831de33a4bbba3696660e855", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY1ZDY3MzBjMjgwZDBjNjgzMWRlMzNhNGJiYmEzNjk2NjYwZTg1NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-14T20:25:14Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-14T20:25:14Z"}, "message": "avx-recip-vec.c: New test.\n\n\t* gcc.target/i386/avx-recip-vec.c: New test.\n\t* gcc.target/i386/avx-lrintf-vec.c: Ditto.\n\t* gcc.target/i386/avx-lrint-vec.c: Ditto.\n\t* gcc.target/i386/avx-ceilf-vec.c: Include sse4_1-ceilf-vec.c.\n\t* gcc.target/i386/avx-ceil-vec.c: Include sse4_1-ceil-vec.c.\n\t* gcc.target/i386/avx-floorf-vec.c: Include sse4_1-floorf-vec.c.\n\t* gcc.target/i386/avx-floor-vec.c: Include sse4_1-floor-vec.c.\n\t* gcc.target/i386/avx-rintf-vec.c: Include sse4_1-rintf-vec.c.\n\t* gcc.target/i386/avx-rint-vec.c: Include sse4_1-rint-vec.c.\n\t* gcc.target/i386/avx-roundf-vec.c: Include sse4_1-roundf-vec.c.\n\t* gcc.target/i386/avx-round-vec.c: Include sse4_1-round-vec.c.\n\t* gcc.target/i386/avx-truncf-vec.c: Include sse4_1-truncf-vec.c.\n\t* gcc.target/i386/avx-trunc-vec.c: Include sse4_1-trunc-vec.c.\n\t* gcc.target/i386/avx-copysignf-vec.c: Include sse-copysignf-vec.c.\n\t* gcc.target/i386/avx-copysign-vec.c: Include sse2-copysign-vec.c.\n\nFrom-SVN: r181364", "tree": {"sha": "223683da41b1725dff731fc39a6bdff03042e6aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/223683da41b1725dff731fc39a6bdff03042e6aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/865d6730c280d0c6831de33a4bbba3696660e855", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/865d6730c280d0c6831de33a4bbba3696660e855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/865d6730c280d0c6831de33a4bbba3696660e855", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/865d6730c280d0c6831de33a4bbba3696660e855/comments", "author": null, "committer": null, "parents": [{"sha": "d2027d2a83aedcebbcb0f70c59027712c134f3b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2027d2a83aedcebbcb0f70c59027712c134f3b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2027d2a83aedcebbcb0f70c59027712c134f3b6"}], "stats": {"total": 786, "additions": 230, "deletions": 556}, "files": [{"sha": "f0acdf79c0051fe763c87e214ed14894d131807f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -1,8 +1,26 @@\n+2011-11-14  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/avx-recip-vec.c: New test.\n+\t* gcc.target/i386/avx-lrintf-vec.c: Ditto.\n+\t* gcc.target/i386/avx-lrint-vec.c: Ditto.\n+\t* gcc.target/i386/avx-ceilf-vec.c: Include sse4_1-ceilf-vec.c.\n+\t* gcc.target/i386/avx-ceil-vec.c: Include sse4_1-ceil-vec.c.\n+\t* gcc.target/i386/avx-floorf-vec.c: Include sse4_1-floorf-vec.c.\n+\t* gcc.target/i386/avx-floor-vec.c: Include sse4_1-floor-vec.c.\n+\t* gcc.target/i386/avx-rintf-vec.c: Include sse4_1-rintf-vec.c.\n+\t* gcc.target/i386/avx-rint-vec.c: Include sse4_1-rint-vec.c.\n+\t* gcc.target/i386/avx-roundf-vec.c: Include sse4_1-roundf-vec.c.\n+\t* gcc.target/i386/avx-round-vec.c: Include sse4_1-round-vec.c.\n+\t* gcc.target/i386/avx-truncf-vec.c: Include sse4_1-truncf-vec.c.\n+\t* gcc.target/i386/avx-trunc-vec.c: Include sse4_1-trunc-vec.c.\n+\t* gcc.target/i386/avx-copysignf-vec.c: Include sse-copysignf-vec.c.\n+\t* gcc.target/i386/avx-copysign-vec.c: Include sse2-copysign-vec.c.\n+\n 2011-11-14  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \tPR c++/51107\n-\t* g++.dg/cpp0x/udlit-args-neg.C: Add check for void argument non-\n-\ttemplate literal operator.\n+\t* g++.dg/cpp0x/udlit-args-neg.C: Add check for void argument\n+\tnon-template literal operator.\n \n 2011-11-14  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "0e76ab8026c94a32e3dc7218f4e8986071b01ff3", "filename": "gcc/testsuite/gcc.target/i386/avx-ceil-vec.c", "status": "modified", "additions": 3, "deletions": 48, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ceil-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ceil-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ceil-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -3,52 +3,7 @@\n /* { dg-require-effective-target avx } */\n /* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n \n-#include \"avx-check.h\"\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n \n-#include <math.h>\n-\n-extern double ceil (double);\n-\n-#define NUM 64\n-\n-static void\n-__attribute__((__target__(\"fpmath=sse\")))\n-init_src (double *src)\n-{\n-  int i, sign = 1;\n-  double f = rand ();\n-\n-  for (i = 0; i < NUM; i++)\n-    {\n-      src[i] = (i + 1) * f * M_PI * sign;\n-      if (i < (NUM / 2))\n-\t{\n-          if ((i % 6) == 0)\n-\t    f = f * src[i];\n-        }\n-      else if (i == (NUM / 2))\n-\tf = rand ();\n-      else if ((i % 6) == 0)\n-\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n-      sign = -sign;\n-    }\n-}\n-\n-static void\n-__attribute__((__target__(\"fpmath=387\")))\n-avx_test (void)\n-{\n-  double a[NUM];\n-  double r[NUM];\n-  int i;\n-\n-  init_src (a);\n-\n-  for (i = 0; i < NUM; i++)\n-    r[i] = ceil (a[i]);\n-\n-  /* check results:  */\n-  for (i = 0; i < NUM; i++)\n-    if (r[i] != ceil (a[i]))\n-      abort();\n-}\n+#include \"sse4_1-ceil-vec.c\""}, {"sha": "c324a9b4f4fc6c13f7c75245e8f74e832889f5d9", "filename": "gcc/testsuite/gcc.target/i386/avx-ceilf-vec.c", "status": "modified", "additions": 3, "deletions": 48, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ceilf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ceilf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ceilf-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -3,52 +3,7 @@\n /* { dg-require-effective-target avx } */\n /* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n \n-#include \"avx-check.h\"\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n \n-#include <math.h>\n-\n-extern float ceilf (float);\n-\n-#define NUM 64\n-\n-static void\n-__attribute__((__target__(\"fpmath=sse\")))\n-init_src (float *src)\n-{\n-  int i, sign = 1;\n-  float f = rand ();\n-\n-  for (i = 0; i < NUM; i++)\n-    {\n-      src[i] = (i + 1) * f * M_PI * sign;\n-      if (i < (NUM / 2))\n-\t{\n-          if ((i % 6) == 0)\n-\t    f = f * src[i];\n-        }\n-      else if (i == (NUM / 2))\n-\tf = rand ();\n-      else if ((i % 6) == 0)\n-\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n-      sign = -sign;\n-    }\n-}\n-\n-static void\n-__attribute__((__target__(\"fpmath=387\")))\n-avx_test (void)\n-{\n-  float a[NUM];\n-  float r[NUM];\n-  int i;\n-\n-  init_src (a);\n-\n-  for (i = 0; i < NUM; i++)\n-    r[i] = ceilf (a[i]);\n-\n-  /* check results:  */\n-  for (i = 0; i < NUM; i++)\n-    if (r[i] != ceilf (a[i]))\n-      abort();\n-}\n+#include \"sse4_1-ceilf-vec.c\""}, {"sha": "9b45a093a7608fa4934025a381127dd19824933f", "filename": "gcc/testsuite/gcc.target/i386/avx-copysign-vec.c", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-copysign-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-copysign-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-copysign-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -2,26 +2,7 @@\n /* { dg-require-effective-target avx } */\n /* { dg-options \"-O2 -ftree-vectorize -mavx -mtune=generic\" } */\n \n-#include \"avx-check.h\"\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n \n-extern double copysign (double, double);\n-\n-#define N 16\n-\n-double a[N] = {-0.1,-3.2,-6.3,-9.4,-12.5,-15.6,-18.7,-21.8,24.9,27.1,30.2,33.3,36.4,39.5,42.6,45.7};\n-double b[N] = {-1.2,3.4,-5.6,7.8,-9.0,1.0,-2.0,3.0,-4.0,-5.0,6.0,7.0,-8.0,-9.0,10.0,11.0};\n-double r[N];\n-\n-static void\n-avx_test (void)\n-{  \n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    r[i] = copysign (a[i], b[i]);\n-\n-  /* check results:  */\n-  for (i = 0; i < N; i++)\n-    if (r[i] != copysign (a[i], b[i]))\n-      abort ();\n-}\n+#include \"sse2-copysign-vec.c\""}, {"sha": "00aa6f57ffa07816dff6245654ba537b7bc8d9cf", "filename": "gcc/testsuite/gcc.target/i386/avx-copysignf-vec.c", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-copysignf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-copysignf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-copysignf-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -2,26 +2,7 @@\n /* { dg-require-effective-target avx } */\n /* { dg-options \"-O2 -ftree-vectorize -mavx -mtune=generic\" } */\n \n-#include \"avx-check.h\"\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n \n-extern float copysignf (float, float);\n-\n-#define N 16\n-\n-float a[N] = {-0.1f,-3.2f,-6.3f,-9.4f,-12.5f,-15.6f,-18.7f,-21.8f,24.9f,27.1f,30.2f,33.3f,36.4f,39.5f,42.6f,45.7f};\n-float b[N] = {-1.2f,3.4f,-5.6f,7.8f,-9.0f,1.0f,-2.0f,3.0f,-4.0f,-5.0f,6.0f,7.0f,-8.0f,-9.0f,10.0f,11.0f};\n-float r[N];\n-\n-static void\n-avx_test (void)\n-{  \n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    r[i] = copysignf (a[i], b[i]);\n-\n-  /* check results:  */\n-  for (i = 0; i < N; i++)\n-    if (r[i] != copysignf (a[i], b[i]))\n-      abort ();\n-}\n+#include \"sse-copysignf-vec.c\""}, {"sha": "1d7fe5043176521df56c77462ad44439e6ee63f3", "filename": "gcc/testsuite/gcc.target/i386/avx-floor-vec.c", "status": "modified", "additions": 3, "deletions": 48, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-floor-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-floor-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-floor-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -3,52 +3,7 @@\n /* { dg-require-effective-target avx } */\n /* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n \n-#include \"avx-check.h\"\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n \n-#include <math.h>\n-\n-extern double floor (double);\n-\n-#define NUM 64\n-\n-static void\n-__attribute__((__target__(\"fpmath=sse\")))\n-init_src (double *src)\n-{\n-  int i, sign = 1;\n-  double f = rand ();\n-\n-  for (i = 0; i < NUM; i++)\n-    {\n-      src[i] = (i + 1) * f * M_PI * sign;\n-      if (i < (NUM / 2))\n-\t{\n-          if ((i % 6) == 0)\n-\t    f = f * src[i];\n-        }\n-      else if (i == (NUM / 2))\n-\tf = rand ();\n-      else if ((i % 6) == 0)\n-\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n-      sign = -sign;\n-    }\n-}\n-\n-static void\n-__attribute__((__target__(\"fpmath=387\")))\n-avx_test (void)\n-{\n-  double a[NUM];\n-  double r[NUM];\n-  int i;\n-\n-  init_src (a);\n-\n-  for (i = 0; i < NUM; i++)\n-    r[i] = floor (a[i]);\n-\n-  /* check results:  */\n-  for (i = 0; i < NUM; i++)\n-    if (r[i] != floor (a[i]))\n-      abort();\n-}\n+#include \"sse4_1-floor-vec.c\""}, {"sha": "73da85be9e19d7c8c21430a94b43ad52ea409793", "filename": "gcc/testsuite/gcc.target/i386/avx-floorf-vec.c", "status": "modified", "additions": 3, "deletions": 48, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-floorf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-floorf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-floorf-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -3,52 +3,7 @@\n /* { dg-require-effective-target avx } */\n /* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n \n-#include \"avx-check.h\"\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n \n-#include <math.h>\n-\n-extern float floorf (float);\n-\n-#define NUM 64\n-\n-static void\n-__attribute__((__target__(\"fpmath=sse\")))\n-init_src (float *src)\n-{\n-  int i, sign = 1;\n-  float f = rand ();\n-\n-  for (i = 0; i < NUM; i++)\n-    {\n-      src[i] = (i + 1) * f * M_PI * sign;\n-      if (i < (NUM / 2))\n-\t{\n-          if ((i % 6) == 0)\n-\t    f = f * src[i];\n-        }\n-      else if (i == (NUM / 2))\n-\tf = rand ();\n-      else if ((i % 6) == 0)\n-\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n-      sign = -sign;\n-    }\n-}\n-\n-static void\n-__attribute__((__target__(\"fpmath=387\")))\n-avx_test (void)\n-{\n-  float a[NUM];\n-  float r[NUM];\n-  int i;\n-\n-  init_src (a);\n-\n-  for (i = 0; i < NUM; i++)\n-    r[i] = floorf (a[i]);\n-\n-  /* check results:  */\n-  for (i = 0; i < NUM; i++)\n-    if (r[i] != floorf (a[i]))\n-      abort();\n-}\n+#include \"sse4_1-floorf-vec.c\""}, {"sha": "2df65d2035d75eef33b20d1d2bd7e983f5bae2d9", "filename": "gcc/testsuite/gcc.target/i386/avx-lrint-vec.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-lrint-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-lrint-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-lrint-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-lrint-vec.c\""}, {"sha": "e08b2f5657d40f26427c7179d3030d508c269b9b", "filename": "gcc/testsuite/gcc.target/i386/avx-lrintf-vec.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-lrintf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-lrintf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-lrintf-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-lrintf-vec.c\""}, {"sha": "efeff7ece83489894bc3392197b44797d1a7b4e0", "filename": "gcc/testsuite/gcc.target/i386/avx-recip-vec.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-recip-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-recip-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-recip-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx -mfpmath=sse -mrecip\" } */\n+/* { dg-require-effective-target avx } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-recip-vec.c\""}, {"sha": "c1d420c6c36e0880e06ab66ea826f91f790aa058", "filename": "gcc/testsuite/gcc.target/i386/avx-rint-vec.c", "status": "modified", "additions": 3, "deletions": 48, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-rint-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-rint-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-rint-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -3,52 +3,7 @@\n /* { dg-require-effective-target avx } */\n /* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n \n-#include \"avx-check.h\"\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n \n-#include <math.h>\n-\n-extern double rint (double);\n-\n-#define NUM 64\n-\n-static void\n-__attribute__((__target__(\"fpmath=sse\")))\n-init_src (double *src)\n-{\n-  int i, sign = 1;\n-  double f = rand ();\n-\n-  for (i = 0; i < NUM; i++)\n-    {\n-      src[i] = (i + 1) * f * M_PI * sign;\n-      if (i < (NUM / 2))\n-\t{\n-          if ((i % 6) == 0)\n-\t    f = f * src[i];\n-        }\n-      else if (i == (NUM / 2))\n-\tf = rand ();\n-      else if ((i % 6) == 0)\n-\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n-      sign = -sign;\n-    }\n-}\n-\n-static void\n-__attribute__((__target__(\"fpmath=387\")))\n-avx_test (void)\n-{\n-  double a[NUM];\n-  double r[NUM];\n-  int i;\n-\n-  init_src (a);\n-\n-  for (i = 0; i < NUM; i++)\n-    r[i] = rint (a[i]);\n-\n-  /* check results:  */\n-  for (i = 0; i < NUM; i++)\n-    if (r[i] != rint (a[i]))\n-      abort();\n-}\n+#include \"sse4_1-rint-vec.c\""}, {"sha": "caf365da685812fc4d14423820e0de1614c104f5", "filename": "gcc/testsuite/gcc.target/i386/avx-rintf-vec.c", "status": "modified", "additions": 3, "deletions": 48, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-rintf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-rintf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-rintf-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -3,52 +3,7 @@\n /* { dg-require-effective-target avx } */\n /* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n \n-#include \"avx-check.h\"\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n \n-#include <math.h>\n-\n-extern float rintf (float);\n-\n-#define NUM 64\n-\n-static void\n-__attribute__((__target__(\"fpmath=sse\")))\n-init_src (float *src)\n-{\n-  int i, sign = 1;\n-  float f = rand ();\n-\n-  for (i = 0; i < NUM; i++)\n-    {\n-      src[i] = (i + 1) * f * M_PI * sign;\n-      if (i < (NUM / 2))\n-\t{\n-          if ((i % 6) == 0)\n-\t    f = f * src[i];\n-        }\n-      else if (i == (NUM / 2))\n-\tf = rand ();\n-      else if ((i % 6) == 0)\n-\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n-      sign = -sign;\n-    }\n-}\n-\n-static void\n-__attribute__((__target__(\"fpmath=387\")))\n-avx_test (void)\n-{\n-  float a[NUM];\n-  float r[NUM];\n-  int i;\n-\n-  init_src (a);\n-\n-  for (i = 0; i < NUM; i++)\n-    r[i] = rintf (a[i]);\n-\n-  /* check results:  */\n-  for (i = 0; i < NUM; i++)\n-    if (r[i] != rintf (a[i]))\n-      abort();\n-}\n+#include \"sse4_1-rintf-vec.c\""}, {"sha": "c43c057049d9c86301cadb9d8be0f5cf3244f7cf", "filename": "gcc/testsuite/gcc.target/i386/avx-round-vec.c", "status": "modified", "additions": 3, "deletions": 48, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-round-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-round-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-round-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -3,52 +3,7 @@\n /* { dg-require-effective-target avx } */\n /* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n \n-#include \"avx-check.h\"\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n \n-#include <math.h>\n-\n-extern double round (double);\n-\n-#define NUM 64\n-\n-static void\n-__attribute__((__target__(\"fpmath=sse\")))\n-init_src (double *src)\n-{\n-  int i, sign = 1;\n-  double f = rand ();\n-\n-  for (i = 0; i < NUM; i++)\n-    {\n-      src[i] = (i + 1) * f * M_PI * sign;\n-      if (i < (NUM / 2))\n-\t{\n-          if ((i % 6) == 0)\n-\t    f = f * src[i];\n-        }\n-      else if (i == (NUM / 2))\n-\tf = rand ();\n-      else if ((i % 6) == 0)\n-\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n-      sign = -sign;\n-    }\n-}\n-\n-static void\n-__attribute__((__target__(\"fpmath=387\")))\n-avx_test (void)\n-{\n-  double a[NUM];\n-  double r[NUM];\n-  int i;\n-\n-  init_src (a);\n-\n-  for (i = 0; i < NUM; i++)\n-    r[i] = round (a[i]);\n-\n-  /* check results:  */\n-  for (i = 0; i < NUM; i++)\n-    if (r[i] != round (a[i]))\n-      abort();\n-}\n+#include \"sse4_1-round-vec.c\""}, {"sha": "978013eb1266253a3f763de5b8bbb1dc7034fa49", "filename": "gcc/testsuite/gcc.target/i386/avx-roundf-vec.c", "status": "modified", "additions": 3, "deletions": 48, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-roundf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-roundf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-roundf-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -3,52 +3,7 @@\n /* { dg-require-effective-target avx } */\n /* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n \n-#include \"avx-check.h\"\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n \n-#include <math.h>\n-\n-extern float roundf (float);\n-\n-#define NUM 64\n-\n-static void\n-__attribute__((__target__(\"fpmath=sse\")))\n-init_src (float *src)\n-{\n-  int i, sign = 1;\n-  float f = rand ();\n-\n-  for (i = 0; i < NUM; i++)\n-    {\n-      src[i] = (i + 1) * f * M_PI * sign;\n-      if (i < (NUM / 2))\n-\t{\n-          if ((i % 6) == 0)\n-\t    f = f * src[i];\n-        }\n-      else if (i == (NUM / 2))\n-\tf = rand ();\n-      else if ((i % 6) == 0)\n-\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n-      sign = -sign;\n-    }\n-}\n-\n-static void\n-__attribute__((__target__(\"fpmath=387\")))\n-avx_test (void)\n-{\n-  float a[NUM];\n-  float r[NUM];\n-  int i;\n-\n-  init_src (a);\n-\n-  for (i = 0; i < NUM; i++)\n-    r[i] = roundf (a[i]);\n-\n-  /* check results:  */\n-  for (i = 0; i < NUM; i++)\n-    if (r[i] != roundf (a[i]))\n-      abort();\n-}\n+#include \"sse4_1-roundf-vec.c\""}, {"sha": "a1ee6d461f399ebec9f2acdce522693ea2864111", "filename": "gcc/testsuite/gcc.target/i386/avx-trunc-vec.c", "status": "modified", "additions": 3, "deletions": 48, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-trunc-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-trunc-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-trunc-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -3,52 +3,7 @@\n /* { dg-require-effective-target avx } */\n /* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n \n-#include \"avx-check.h\"\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n \n-#include <math.h>\n-\n-extern double trunc (double);\n-\n-#define NUM 64\n-\n-static void\n-__attribute__((__target__(\"fpmath=sse\")))\n-init_src (double *src)\n-{\n-  int i, sign = 1;\n-  double f = rand ();\n-\n-  for (i = 0; i < NUM; i++)\n-    {\n-      src[i] = (i + 1) * f * M_PI * sign;\n-      if (i < (NUM / 2))\n-\t{\n-          if ((i % 6) == 0)\n-\t    f = f * src[i];\n-        }\n-      else if (i == (NUM / 2))\n-\tf = rand ();\n-      else if ((i % 6) == 0)\n-\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n-      sign = -sign;\n-    }\n-}\n-\n-static void\n-__attribute__((__target__(\"fpmath=387\")))\n-avx_test (void)\n-{\n-  double a[NUM];\n-  double r[NUM];\n-  int i;\n-\n-  init_src (a);\n-\n-  for (i = 0; i < NUM; i++)\n-    r[i] = trunc (a[i]);\n-\n-  /* check results:  */\n-  for (i = 0; i < NUM; i++)\n-    if (r[i] != trunc (a[i]))\n-      abort();\n-}\n+#include \"sse4_1-truncf-vec.c\""}, {"sha": "a1ee6d461f399ebec9f2acdce522693ea2864111", "filename": "gcc/testsuite/gcc.target/i386/avx-truncf-vec.c", "status": "modified", "additions": 3, "deletions": 48, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-truncf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-truncf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-truncf-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -3,52 +3,7 @@\n /* { dg-require-effective-target avx } */\n /* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n \n-#include \"avx-check.h\"\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n \n-#include <math.h>\n-\n-extern float truncf (float);\n-\n-#define NUM 64\n-\n-static void\n-__attribute__((__target__(\"fpmath=sse\")))\n-init_src (float *src)\n-{\n-  int i, sign = 1;\n-  float f = rand ();\n-\n-  for (i = 0; i < NUM; i++)\n-    {\n-      src[i] = (i + 1) * f * M_PI * sign;\n-      if (i < (NUM / 2))\n-\t{\n-          if ((i % 6) == 0)\n-\t    f = f * src[i];\n-        }\n-      else if (i == (NUM / 2))\n-\tf = rand ();\n-      else if ((i % 6) == 0)\n-\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n-      sign = -sign;\n-    }\n-}\n-\n-static void\n-__attribute__((__target__(\"fpmath=387\")))\n-avx_test (void)\n-{\n-  float a[NUM];\n-  float r[NUM];\n-  int i;\n-\n-  init_src (a);\n-\n-  for (i = 0; i < NUM; i++)\n-    r[i] = truncf (a[i]);\n-\n-  /* check results:  */\n-  for (i = 0; i < NUM; i++)\n-    if (r[i] != truncf (a[i]))\n-      abort();\n-}\n+#include \"sse4_1-truncf-vec.c\""}, {"sha": "5b1cfe795f21f90234d2f6a89466f072d0fcd6be", "filename": "gcc/testsuite/gcc.target/i386/sse-copysignf-vec.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-copysignf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-copysignf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-copysignf-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -2,7 +2,15 @@\n /* { dg-options \"-O2 -ftree-vectorize -msse\" } */\n /* { dg-require-effective-target sse } */\n \n-#include \"sse-check.h\"\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse_test\n+#endif\n+\n+#include CHECK_H\n \n extern float copysignf (float, float);\n \n@@ -13,7 +21,7 @@ float b[N] = {-1.2f,3.4f,-5.6f,7.8f,-9.0f,1.0f,-2.0f,3.0f,-4.0f,-5.0f,6.0f,7.0f,\n float r[N];\n \n static void\n-sse_test (void)\n+TEST (void)\n {  \n   int i;\n "}, {"sha": "de2f3d2977508dd39c7b5fa405b453006248abf1", "filename": "gcc/testsuite/gcc.target/i386/sse-recip-vec.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-recip-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-recip-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-recip-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -2,7 +2,15 @@\n /* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse -mfpmath=sse -mrecip\" } */\n /* { dg-require-effective-target sse } */\n \n-#include \"sse-check.h\"\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse_test\n+#endif\n+\n+#include CHECK_H\n \n extern float sqrtf (float);\n extern float fabsf (float);\n@@ -16,7 +24,7 @@ float r[N];\n float rc[N] = { 0.f, 3.f, 6.f, 9.f, 12.f, 18.f, 21.f, 27.f };\n \n static void\n-sse_test (void)\n+TEST (void)\n {\n   int i;\n "}, {"sha": "b336b3284d057420a168ca6dd228659d79c92864", "filename": "gcc/testsuite/gcc.target/i386/sse2-copysign-vec.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-copysign-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-copysign-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-copysign-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -2,7 +2,15 @@\n /* { dg-options \"-O2 -ftree-vectorize -msse2\" } */\n /* { dg-require-effective-target sse2 } */\n \n-#include \"sse2-check.h\"\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse2_test\n+#endif\n+\n+#include CHECK_H\n \n extern double copysign (double, double);\n \n@@ -13,7 +21,7 @@ double b[N] = {-1.2,3.4,-5.6,7.8,-9.0,1.0,-2.0,3.0,-4.0,-5.0,6.0,7.0,-8.0,-9.0,1\n double r[N];\n \n static void\n-sse2_test (void)\n+TEST (void)\n {  \n   int i;\n "}, {"sha": "111e9b2740efbbfb6cd6dff8fead55c30b57e04a", "filename": "gcc/testsuite/gcc.target/i386/sse2-lrint-vec.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-lrint-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-lrint-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-lrint-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -2,7 +2,15 @@\n /* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse2\" } */\n /* { dg-require-effective-target sse2 } */\n \n-#include \"sse2-check.h\"\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse2_test\n+#endif\n+\n+#include CHECK_H\n \n extern long lrint (double);\n \n@@ -12,7 +20,7 @@ double a[N] = {0.4,3.5,6.6,9.4,12.5,15.6,18.4,21.5,24.6,27.4,30.5,33.6,36.4,39.5\n long r[N];\n \n static void\n-sse2_test (void)\n+TEST (void)\n {\n   int i;\n "}, {"sha": "ee917623cbd0a73ce34570ea97f0adda7b94d5b1", "filename": "gcc/testsuite/gcc.target/i386/sse2-lrintf-vec.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-lrintf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-lrintf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-lrintf-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -2,7 +2,15 @@\n /* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse2\" } */\n /* { dg-require-effective-target sse2 } */\n \n-#include \"sse2-check.h\"\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse2_test\n+#endif\n+\n+#include CHECK_H\n \n extern long lrintf (float);\n \n@@ -12,7 +20,7 @@ float a[N] = {0.4,3.5,6.6,9.4,12.5,15.6,18.4,21.5,24.6,27.4,30.5,33.6,36.4,39.5,\n long r[N];\n \n static void\n-sse2_test (void)\n+TEST (void)\n {\n   int i;\n "}, {"sha": "20bb2641facf4808ff2bc3ad7abff7408fd3b91b", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-ceil-vec.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ceil-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ceil-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ceil-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -3,7 +3,15 @@\n /* { dg-require-effective-target sse4 } */\n /* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n \n-#include \"sse4_1-check.h\"\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n \n #include <math.h>\n \n@@ -36,7 +44,7 @@ init_src (double *src)\n \n static void\n __attribute__((__target__(\"fpmath=387\")))\n-sse4_1_test (void)\n+TEST (void)\n {\n   double a[NUM];\n   double r[NUM];"}, {"sha": "314be91fa6cd49fb190fee70d7d255d3a0e75828", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-ceilf-vec.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ceilf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ceilf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ceilf-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -3,7 +3,15 @@\n /* { dg-require-effective-target sse4 } */\n /* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n \n-#include \"sse4_1-check.h\"\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n \n #include <math.h>\n \n@@ -36,7 +44,7 @@ init_src (float *src)\n \n static void\n __attribute__((__target__(\"fpmath=387\")))\n-sse4_1_test (void)\n+TEST (void)\n {\n   float a[NUM];\n   float r[NUM];"}, {"sha": "d250413c1b748e10dd2599eda8a41ab71f239b8c", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-floor-vec.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-floor-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-floor-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-floor-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -3,7 +3,15 @@\n /* { dg-require-effective-target sse4 } */\n /* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n \n-#include \"sse4_1-check.h\"\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n \n #include <math.h>\n \n@@ -36,7 +44,7 @@ init_src (double *src)\n \n static void\n __attribute__((__target__(\"fpmath=387\")))\n-sse4_1_test (void)\n+TEST (void)\n {\n   double a[NUM];\n   double r[NUM];"}, {"sha": "2f339f3b50efb3998e5b9c6d0524919b7caa6a0f", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-floorf-vec.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-floorf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-floorf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-floorf-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -3,7 +3,15 @@\n /* { dg-require-effective-target sse4 } */\n /* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n \n-#include \"sse4_1-check.h\"\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n \n #include <math.h>\n \n@@ -36,7 +44,7 @@ init_src (float *src)\n \n static void\n __attribute__((__target__(\"fpmath=387\")))\n-sse4_1_test (void)\n+TEST (void)\n {\n   float a[NUM];\n   float r[NUM];"}, {"sha": "f20359a1ae2ed6df48fb012026f9b909407703bd", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-rint-vec.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-rint-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-rint-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-rint-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -3,7 +3,15 @@\n /* { dg-require-effective-target sse4 } */\n /* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n \n-#include \"sse4_1-check.h\"\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n \n #include <math.h>\n \n@@ -36,7 +44,7 @@ init_src (double *src)\n \n static void\n __attribute__((__target__(\"fpmath=387\")))\n-sse4_1_test (void)\n+TEST (void)\n {\n   double a[NUM];\n   double r[NUM];"}, {"sha": "716cad1e3fffb02010073461bc097e8d85f7f889", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-rintf-vec.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-rintf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-rintf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-rintf-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -3,7 +3,15 @@\n /* { dg-require-effective-target sse4 } */\n /* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n \n-#include \"sse4_1-check.h\"\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n \n #include <math.h>\n \n@@ -36,7 +44,7 @@ init_src (float *src)\n \n static void\n __attribute__((__target__(\"fpmath=387\")))\n-sse4_1_test (void)\n+TEST (void)\n {\n   float a[NUM];\n   float r[NUM];"}, {"sha": "bb912cef9555f1ca6a92c04efd3d4ed5ec7086ef", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-round-vec.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-round-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-round-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-round-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -3,7 +3,15 @@\n /* { dg-require-effective-target sse4 } */\n /* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n \n-#include \"sse4_1-check.h\"\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n \n #include <math.h>\n \n@@ -36,7 +44,7 @@ init_src (double *src)\n \n static void\n __attribute__((__target__(\"fpmath=387\")))\n-sse4_1_test (void)\n+TEST (void)\n {\n   double a[NUM];\n   double r[NUM];"}, {"sha": "d254aa66b89281cba58193d3a89054f134af1436", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-roundf-vec.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundf-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -3,7 +3,15 @@\n /* { dg-require-effective-target sse4 } */\n /* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n \n-#include \"sse4_1-check.h\"\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n \n #include <math.h>\n \n@@ -36,7 +44,7 @@ init_src (float *src)\n \n static void\n __attribute__((__target__(\"fpmath=387\")))\n-sse4_1_test (void)\n+TEST (void)\n {\n   float a[NUM];\n   float r[NUM];"}, {"sha": "9cbcd9b398578c7427ca5bb6226f055ea25d570c", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-trunc-vec.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-trunc-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-trunc-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-trunc-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -3,7 +3,15 @@\n /* { dg-require-effective-target sse4 } */\n /* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n \n-#include \"sse4_1-check.h\"\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n \n #include <math.h>\n \n@@ -36,7 +44,7 @@ init_src (double *src)\n \n static void\n __attribute__((__target__(\"fpmath=387\")))\n-sse4_1_test (void)\n+TEST (void)\n {\n   double a[NUM];\n   double r[NUM];"}, {"sha": "815b5081433154a295a9741a77eada3086f5f10c", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-truncf-vec.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-truncf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865d6730c280d0c6831de33a4bbba3696660e855/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-truncf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-truncf-vec.c?ref=865d6730c280d0c6831de33a4bbba3696660e855", "patch": "@@ -3,7 +3,15 @@\n /* { dg-require-effective-target sse4 } */\n /* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n \n-#include \"sse4_1-check.h\"\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n \n #include <math.h>\n \n@@ -36,7 +44,7 @@ init_src (float *src)\n \n static void\n __attribute__((__target__(\"fpmath=387\")))\n-sse4_1_test (void)\n+TEST (void)\n {\n   float a[NUM];\n   float r[NUM];"}]}