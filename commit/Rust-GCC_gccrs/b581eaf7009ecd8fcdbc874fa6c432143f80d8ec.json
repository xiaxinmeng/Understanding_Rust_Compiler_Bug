{"sha": "b581eaf7009ecd8fcdbc874fa6c432143f80d8ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU4MWVhZjcwMDllY2Q4ZmNkYmM4NzRmYTZjNDMyMTQzZjgwZDhlYw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-06-26T07:01:09Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-06-26T07:01:09Z"}, "message": "std_iterator.h: Include sbuf_iter.h via std_ios.h.\n\n\n2001-06-26  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/std_iterator.h: Include sbuf_iter.h via std_ios.h.\n\n\t* include/bits/stl_iterator.h (istream_iterator): Inherit from\n\titerator.\n\t(ostream_iterator): Same.\n\t* testsuite/24_iterators/istream_iterator.cc: New file.\n\t* testsuite/24_iterators/ostream_iterator.cc: New file.\n\n\t* include/bits/sbuf_iter.h: Remove self typedef.\n\t* testsuite/24_iterators/ostreambuf_iterator.cc: Add test.\n\t* testsuite/24_iterators/istreambuf_iterator.cc: Add test.\n\n\t* include/bits/stl_iterator.h (reverse_iterator): Remove\n\textraneous typedefs. Add typename.\n\t(__normal_iterator): Remove typedefs referring to self. Add typename.\n\t(reverse_bidiretional_iterator): Remove, not longer required.\n\nFrom-SVN: r43570", "tree": {"sha": "0fd85e82059b26ff34101160faa8506b32e2e174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fd85e82059b26ff34101160faa8506b32e2e174"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b581eaf7009ecd8fcdbc874fa6c432143f80d8ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b581eaf7009ecd8fcdbc874fa6c432143f80d8ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b581eaf7009ecd8fcdbc874fa6c432143f80d8ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b581eaf7009ecd8fcdbc874fa6c432143f80d8ec/comments", "author": null, "committer": null, "parents": [{"sha": "b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2b263e1cfd9fd2f0987c3a9526db4f13bfdfdf6"}], "stats": {"total": 810, "additions": 462, "deletions": 348}, "files": [{"sha": "0920104d9e2b73adbfb34efdd2bbb35a6c3af396", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b581eaf7009ecd8fcdbc874fa6c432143f80d8ec/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b581eaf7009ecd8fcdbc874fa6c432143f80d8ec/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b581eaf7009ecd8fcdbc874fa6c432143f80d8ec", "patch": "@@ -1,3 +1,22 @@\n+2001-06-26  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/std_iterator.h: Include sbuf_iter.h via std_ios.h.\n+\n+\t* include/bits/stl_iterator.h (istream_iterator): Inherit from\n+\titerator.\n+\t(ostream_iterator): Same.\n+\t* testsuite/24_iterators/istream_iterator.cc: New file.\n+\t* testsuite/24_iterators/ostream_iterator.cc: New file.\n+\t\n+\t* include/bits/sbuf_iter.h: Remove self typedef.\n+\t* testsuite/24_iterators/ostreambuf_iterator.cc: Add test.\n+\t* testsuite/24_iterators/istreambuf_iterator.cc: Add test.\n+\t\n+\t* include/bits/stl_iterator.h (reverse_iterator): Remove\n+\textraneous typedefs. Add typename.\n+\t(__normal_iterator): Remove typedefs referring to self. Add typename.\n+\t(reverse_bidiretional_iterator): Remove, not longer required.\n+\n 2001-06-26  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n \n \t* include/bits/stl_iterator.h (__normal_iterator<>): Qualify"}, {"sha": "054ddeb79781290f6fd9c0c13e659ceb4ac4140e", "filename": "libstdc++-v3/include/bits/sbuf_iter.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b581eaf7009ecd8fcdbc874fa6c432143f80d8ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsbuf_iter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b581eaf7009ecd8fcdbc874fa6c432143f80d8ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsbuf_iter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsbuf_iter.h?ref=b581eaf7009ecd8fcdbc874fa6c432143f80d8ec", "patch": "@@ -103,8 +103,6 @@ namespace std\n       typedef typename _Traits::int_type     \t\tint_type;\n       typedef basic_streambuf<_CharT, _Traits> \t\tstreambuf_type;\n       typedef basic_istream<_CharT, _Traits>         \tistream_type;\n-      // Non-standard Types:\n-      typedef istreambuf_iterator<_CharT, _Traits>\t__istreambufiter_type;\n \n     private:\n       // 24.5.3 istreambuf_iterator \n@@ -144,7 +142,7 @@ namespace std\n \treturn __ret;\n       }\n \t\n-      __istreambufiter_type& \n+      istreambuf_iterator& \n       operator++()\n       { \n \tif (_M_sbuf)\n@@ -153,18 +151,18 @@ namespace std\n \treturn *this; \n       }\n \n-      __istreambufiter_type\n+      istreambuf_iterator\n       operator++(int)\n       {\n-\t__istreambufiter_type __old = *this;\n+\tistreambuf_iterator __old = *this;\n \tif (_M_sbuf)\n \t  __old._M_c = _M_sbuf->sbumpc();\n \t_M_c = -2;\n \treturn __old; \n       }\n \n       bool \n-      equal(const __istreambufiter_type& __b)\n+      equal(const istreambuf_iterator& __b)\n       { \n \tint_type __eof = traits_type::eof();\n \tbool __thiseof = !_M_sbuf || _M_sbuf->sgetc() == __eof;\n@@ -177,7 +175,7 @@ namespace std\n       // 110 istreambuf_iterator::equal not const\n       // NB: there is also number 111 pending on this function.\n       bool \n-      equal(const __istreambufiter_type& __b) const\n+      equal(const istreambuf_iterator& __b) const\n       {\n \tint_type __eof = traits_type::eof();\n \tbool __thiseof = !_M_sbuf || _M_sbuf->sgetc() == __eof;"}, {"sha": "a50b3536811b38e0ae0e98bc9bd7094c806b9e09", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 277, "deletions": 337, "changes": 614, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b581eaf7009ecd8fcdbc874fa6c432143f80d8ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b581eaf7009ecd8fcdbc874fa6c432143f80d8ec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=b581eaf7009ecd8fcdbc874fa6c432143f80d8ec", "patch": "@@ -34,158 +34,155 @@\n namespace std\n {\n   // 24.4.1 Reverse iterators\n-  template<class _Iterator>\n+  template<typename _Iterator>\n     class reverse_iterator \n-      : public iterator<iterator_traits<_Iterator>::iterator_category,\n-\t\t\titerator_traits<_Iterator>::value_type,\n-\t\t        iterator_traits<_Iterator>::difference_type,\n-\t\t        iterator_traits<_Iterator>::pointer,\n-                        iterator_traits<_Iterator>::reference>\n+      : public iterator<typename iterator_traits<_Iterator>::iterator_category,\n+\t\t\ttypename iterator_traits<_Iterator>::value_type,\n+\t\t        typename iterator_traits<_Iterator>::difference_type,\n+\t\t        typename iterator_traits<_Iterator>::pointer,\n+                        typename iterator_traits<_Iterator>::reference>\n     {\n     protected:\n-      _Iterator current;\n+      _Iterator _M_current;\n \n     public:\n-      typedef iterator_traits<_Iterator>  \t\t__traits_type;\n-      typedef typename __traits_type::iterator_category\titerator_category;\n-      typedef typename __traits_type::value_type \tvalue_type;\n-      typedef typename __traits_type::difference_type \tdifference_type;\n-      typedef typename __traits_type::pointer          \tpointer;\n-      typedef typename __traits_type::reference \treference;\n-\n-      typedef _Iterator iterator_type;\n-      typedef reverse_iterator<_Iterator> _Self;\n+      typedef _Iterator \t\t\t\t       iterator_type;\n+      typedef typename iterator_traits<_Iterator>::difference_type \t\n+      \t\t\t\t\t\t\t       difference_type;\n+      typedef typename iterator_traits<_Iterator>::reference   reference;\n+      typedef typename iterator_traits<_Iterator>::pointer     pointer;\n \n     public:\n       reverse_iterator() {}\n \n       explicit \n-      reverse_iterator(iterator_type __x) : current(__x) {}\n+      reverse_iterator(iterator_type __x) : _M_current(__x) {}\n \n-      reverse_iterator(const _Self& __x) : current(__x.current) {}\n+      reverse_iterator(const reverse_iterator& __x) \n+\t: _M_current(__x._M_current) { }\n \n-      template <class _Iter>\n+      template<typename _Iter>\n         reverse_iterator(const reverse_iterator<_Iter>& __x)\n-\t: current(__x.base()) {}\n+\t: _M_current(__x.base()) {}\n     \n       iterator_type \n-      base() const { return current; }\n+      base() const { return _M_current; }\n \n       reference \n       operator*() const \n       {\n-\t_Iterator __tmp = current;\n+\t_Iterator __tmp = _M_current;\n \treturn *--__tmp;\n       }\n \n       pointer \n       operator->() const { return &(operator*()); }\n \n-      _Self& \n+      reverse_iterator& \n       operator++() \n       {\n-\t--current;\n+\t--_M_current;\n \treturn *this;\n       }\n \n-      _Self \n+      reverse_iterator \n       operator++(int) \n       {\n-\t_Self __tmp = *this;\n-\t--current;\n+\treverse_iterator __tmp = *this;\n+\t--_M_current;\n \treturn __tmp;\n       }\n \n-      _Self& \n+      reverse_iterator& \n       operator--() \n       {\n-\t++current;\n+\t++_M_current;\n \treturn *this;\n       }\n \n-      _Self operator--(int) \n+      reverse_iterator operator--(int) \n       {\n-\t_Self __tmp = *this;\n-\t++current;\n+\treverse_iterator __tmp = *this;\n+\t++_M_current;\n \treturn __tmp;\n       }\n       \n-      _Self \n+      reverse_iterator \n       operator+(difference_type __n) const \n-      { return _Self(current - __n); }\n+      { return reverse_iterator(_M_current - __n); }\n \n-      _Self& \n+      reverse_iterator& \n       operator+=(difference_type __n) \n       {\n-\tcurrent -= __n;\n+\t_M_current -= __n;\n \treturn *this;\n       }\n \n-      _Self \n+      reverse_iterator \n       operator-(difference_type __n) const \n-      { return _Self(current + __n); }\n+      { return reverse_iterator(_M_current + __n); }\n \n-      _Self& \n+      reverse_iterator& \n       operator-=(difference_type __n) \n       {\n-\tcurrent += __n;\n+\t_M_current += __n;\n \treturn *this;\n       }\n \n       reference \n       operator[](difference_type __n) const { return *(*this + __n); }  \n     }; \n  \n-  template<class _Iterator>\n+  template<typename _Iterator>\n     inline bool \n     operator==(const reverse_iterator<_Iterator>& __x, \n \t       const reverse_iterator<_Iterator>& __y) \n     { return __x.base() == __y.base(); }\n \n-  template <class _Iterator>\n+  template<typename _Iterator>\n     inline bool \n     operator<(const reverse_iterator<_Iterator>& __x, \n \t      const reverse_iterator<_Iterator>& __y) \n     { return __y.base() < __x.base(); }\n \n-  template <class _Iterator>\n+  template<typename _Iterator>\n     inline bool \n     operator!=(const reverse_iterator<_Iterator>& __x, \n \t       const reverse_iterator<_Iterator>& __y) \n     { return !(__x == __y); }\n \n-  template <class _Iterator>\n+  template<typename _Iterator>\n     inline bool \n     operator>(const reverse_iterator<_Iterator>& __x, \n \t      const reverse_iterator<_Iterator>& __y) \n     { return __y < __x; }\n \n-  template <class _Iterator>\n+  template<typename _Iterator>\n     inline bool \n     operator<=(const reverse_iterator<_Iterator>& __x, \n \t\tconst reverse_iterator<_Iterator>& __y) \n     { return !(__y < __x); }\n \n-  template <class _Iterator>\n+  template<typename _Iterator>\n     inline bool \n     operator>=(const reverse_iterator<_Iterator>& __x, \n \t       const reverse_iterator<_Iterator>& __y) \n     { return !(__x < __y); }\n \n-  template<class _Iterator>\n+  template<typename _Iterator>\n     inline typename reverse_iterator<_Iterator>::difference_type\n     operator-(const reverse_iterator<_Iterator>& __x, \n \t      const reverse_iterator<_Iterator>& __y) \n     { return __y.base() - __x.base(); }\n \n-  template <class _Iterator>\n+  template<typename _Iterator>\n     inline reverse_iterator<_Iterator> \n     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n \t      const reverse_iterator<_Iterator>& __x) \n     { return reverse_iterator<_Iterator>(__x.base() - __n); }\n \n   // 24.4.2.2.1 back_insert_iterator\n-  template <class _Container>\n+  template<typename _Container>\n   class back_insert_iterator \n     : public iterator<output_iterator_tag, void, void, void, void>\n     {\n@@ -215,12 +212,12 @@ namespace std\n       operator++(int) { return *this; }\n     };\n \n-  template <class _Container>\n+  template<typename _Container>\n     inline back_insert_iterator<_Container> \n     back_inserter(_Container& __x) \n     { return back_insert_iterator<_Container>(__x); }\n \n-  template <class _Container>\n+  template<typename _Container>\n     class front_insert_iterator \n       : public iterator<output_iterator_tag, void, void, void, void>\n     {\n@@ -241,12 +238,11 @@ namespace std\n       front_insert_iterator<_Container>& operator++(int) { return *this; }\n     };\n \n-  template <class _Container>\n-  inline front_insert_iterator<_Container> front_inserter(_Container& __x) {\n-    return front_insert_iterator<_Container>(__x);\n-  }\n+  template<typename _Container>\n+  inline front_insert_iterator<_Container> front_inserter(_Container& __x) \n+  { return front_insert_iterator<_Container>(__x); }\n \n-  template <class _Container>\n+  template<typename _Container>\n     class insert_iterator \n       : public iterator<output_iterator_tag, void, void, void, void>\n     {\n@@ -271,304 +267,248 @@ namespace std\n       insert_iterator<_Container>& operator++(int) { return *this; }\n     };\n   \n-  template <class _Container, class _Iterator>\n-  inline \n-  insert_iterator<_Container> inserter(_Container& __x, _Iterator __i)\n-  {\n-    typedef typename _Container::iterator __iter;\n-    return insert_iterator<_Container>(__x, __iter(__i));\n-  }\n+  template<typename _Container, typename _Iterator>\n+    inline \n+    insert_iterator<_Container> inserter(_Container& __x, _Iterator __i)\n+    {\n+      typedef typename _Container::iterator __iter;\n+      return insert_iterator<_Container>(__x, __iter(__i));\n+    }\n   \n-  template <class _BidirectionalIterator, class _Tp, class _Reference = _Tp&, \n-    class _Distance = ptrdiff_t> \n-  class reverse_bidirectional_iterator {\n-    typedef reverse_bidirectional_iterator<_BidirectionalIterator, _Tp, \n-      _Reference, _Distance>  _Self;\n-  protected:\n-    _BidirectionalIterator current;\n-  public:\n-    typedef bidirectional_iterator_tag iterator_category;\n-  typedef _Tp                        value_type;\n-    typedef _Distance                  difference_type;\n-  typedef _Tp*                       pointer;\n-    typedef _Reference                 reference;\n-    \n-  reverse_bidirectional_iterator() {}\n-    explicit reverse_bidirectional_iterator(_BidirectionalIterator __x)\n-      : current(__x) {}\n-    _BidirectionalIterator base() const { return current; }\n-    _Reference operator*() const {\n-      _BidirectionalIterator __tmp = current;\n-    return *--__tmp;\n-  }\n-  pointer operator->() const { return &(operator*()); }\n-  _Self& operator++() {\n-    --current;\n-    return *this;\n-  }\n-  _Self operator++(int) {\n-    _Self __tmp = *this;\n-    --current;\n-    return __tmp;\n-  }\n-  _Self& operator--() {\n-    ++current;\n-    return *this;\n-  }\n-  _Self operator--(int) {\n-    _Self __tmp = *this;\n-    ++current;\n-    return __tmp;\n-  }\n-};\n-\n-template <class _BiIter, class _Tp, class _Ref, class _Distance>\n-inline bool operator==(\n-    const reverse_bidirectional_iterator<_BiIter, _Tp, _Ref, _Distance>& __x, \n-    const reverse_bidirectional_iterator<_BiIter, _Tp, _Ref, _Distance>& __y)\n-{\n-  return __x.base() == __y.base();\n-}\n \n-template <class _BiIter, class _Tp, class _Ref, class _Distance>\n-inline bool operator!=(\n-    const reverse_bidirectional_iterator<_BiIter, _Tp, _Ref, _Distance>& __x, \n-    const reverse_bidirectional_iterator<_BiIter, _Tp, _Ref, _Distance>& __y)\n-{\n-  return !(__x == __y);\n-}\n-\n-\n-\n-template <class _Tp, \n-          class _CharT = char, class _Traits = char_traits<_CharT>,\n-          class _Dist = ptrdiff_t> \n-class istream_iterator {\n-public:\n-  typedef _CharT                         char_type;\n-  typedef _Traits                        traits_type;\n-  typedef basic_istream<_CharT, _Traits> istream_type;\n-\n-  typedef input_iterator_tag             iterator_category;\n-  typedef _Tp                            value_type;\n-  typedef _Dist                          difference_type;\n-  typedef const _Tp*                     pointer;\n-  typedef const _Tp&                     reference;\n-\n-  istream_iterator() : _M_stream(0), _M_ok(false) {}\n-  istream_iterator(istream_type& __s) : _M_stream(&__s) { _M_read(); }\n-\n-  reference operator*() const { return _M_value; }\n-  pointer operator->() const { return &(operator*()); }\n-\n-  istream_iterator& operator++() { \n-    _M_read(); \n-    return *this;\n-  }\n-  istream_iterator operator++(int)  {\n-    istream_iterator __tmp = *this;\n-    _M_read();\n-    return __tmp;\n-  }\n-\n-  bool _M_equal(const istream_iterator& __x) const\n-    { return (_M_ok == __x._M_ok) && (!_M_ok || _M_stream == __x._M_stream); }\n-\n-private:\n-  istream_type* _M_stream;\n-  _Tp _M_value;\n-  bool _M_ok;\n-\n-  void _M_read() {\n-    _M_ok = (_M_stream && *_M_stream) ? true : false;\n-    if (_M_ok) {\n-      *_M_stream >> _M_value;\n-      _M_ok = *_M_stream ? true : false;\n-    }\n-  }\n-};\n-\n-template <class _Tp, class _CharT, class _Traits, class _Dist>\n-inline bool \n-operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,\n-           const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y) {\n-  return __x._M_equal(__y);\n-}\n-\n-template <class _Tp, class _CharT, class _Traits, class _Dist>\n-inline bool \n-operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,\n-           const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y) {\n-  return !__x._M_equal(__y);\n-}\n-\n-\n-template <class _Tp,\n-          class _CharT = char, class _Traits = char_traits<_CharT> >\n-class ostream_iterator {\n-public:\n-  typedef _CharT                         char_type;\n-  typedef _Traits                        traits_type;\n-  typedef basic_ostream<_CharT, _Traits> ostream_type;\n-\n-  typedef output_iterator_tag            iterator_category;\n-  typedef void                           value_type;\n-  typedef void                           difference_type;\n-  typedef void                           pointer;\n-  typedef void                           reference;\n-\n-  ostream_iterator(ostream_type& __s) : _M_stream(&__s), _M_string(0) {}\n-  ostream_iterator(ostream_type& __s, const _CharT* __c) \n-    : _M_stream(&__s), _M_string(__c)  {}\n-  ostream_iterator<_Tp>& operator=(const _Tp& __value) { \n-    *_M_stream << __value;\n-    if (_M_string) *_M_stream << _M_string;\n-    return *this;\n-  }\n-  ostream_iterator<_Tp>& operator*() { return *this; }\n-  ostream_iterator<_Tp>& operator++() { return *this; } \n-  ostream_iterator<_Tp>& operator++(int) { return *this; } \n-private:\n-  ostream_type* _M_stream;\n-  const _CharT* _M_string;\n-};\n-\n-\n-// This iterator adapter is 'normal' in the sense that it does not\n-// change the semantics of any of the operators of its itererator\n-// parameter.  Its primary purpose is to convert an iterator that is\n-// not a class, e.g. a pointer, into an iterator that is a class.\n-// The _Container parameter exists solely so that different containers\n-// using this template can instantiate different types, even if the\n-// _Iterator parameter is the same.\n-template<typename _Iterator, typename _Container>\n-class __normal_iterator\n-  : public iterator<typename iterator_traits<_Iterator>::iterator_category,\n-                    typename iterator_traits<_Iterator>::value_type,\n-                    typename iterator_traits<_Iterator>::difference_type,\n-                    typename iterator_traits<_Iterator>::pointer,\n-                    typename iterator_traits<_Iterator>::reference>\n-{\n-  typedef iterator_traits<_Iterator> _Traits;\n+  template<typename _Tp, typename _CharT = char, \n+           typename _Traits = char_traits<_CharT>, typename _Dist = ptrdiff_t> \n+    class istream_iterator \n+      : public iterator<input_iterator_tag, _Tp, _Dist, const _Tp*, const _Tp&>\n+    {\n+    public:\n+      typedef _CharT                         char_type;\n+      typedef _Traits                        traits_type;\n+      typedef basic_istream<_CharT, _Traits> istream_type;\n+\n+    private:\n+      istream_type* \t_M_stream;\n+      _Tp \t\t_M_value;\n+      bool \t\t_M_ok;\n+\n+    public:      \n+      istream_iterator() : _M_stream(0), _M_ok(false) {}\n+      istream_iterator(istream_type& __s) : _M_stream(&__s) { _M_read(); }\n+\n+      reference \n+      operator*() const { return _M_value; }\n+\n+      pointer \n+      operator->() const { return &(operator*()); }\n+\n+      istream_iterator& \n+      operator++() \n+      { _M_read(); return *this; }\n+\n+      istream_iterator \n+      operator++(int)  \n+      {\n+\tistream_iterator __tmp = *this;\n+\t_M_read();\n+\treturn __tmp;\n+      }\n+\n+      bool \n+      _M_equal(const istream_iterator& __x) const\n+      { return (_M_ok == __x._M_ok) && (!_M_ok || _M_stream == __x._M_stream);}\n+\n+    private:      \n+      void _M_read() \n+      {\n+\t_M_ok = (_M_stream && *_M_stream) ? true : false;\n+\tif (_M_ok) \n+\t  {\n+\t    *_M_stream >> _M_value;\n+\t    _M_ok = *_M_stream ? true : false;\n+\t  }\n+      }\n+    };\n   \n-protected:\n-  _Iterator _M_current;\n+  template<typename _Tp, typename _CharT, typename _Traits, typename _Dist>\n+    inline bool \n+    operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,\n+\t       const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y) \n+    { return __x._M_equal(__y); }\n \n-public:\n-  typedef __normal_iterator<_Iterator, _Container> normal_iterator_type;\n-  typedef typename _Traits::iterator_category iterator_category;\n-  typedef typename _Traits::value_type value_type;\n-  typedef typename _Traits::difference_type difference_type;\n-  typedef typename _Traits::pointer pointer;\n-  typedef typename _Traits::reference reference;\n+  template <class _Tp, class _CharT, class _Traits, class _Dist>\n+    inline bool \n+  operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,\n+\t     const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y) \n+  { return !__x._M_equal(__y); }\n+\n+\n+  template<typename _Tp, typename _CharT = char, \n+           typename _Traits = char_traits<_CharT> >\n+    class ostream_iterator \n+      : public iterator<output_iterator_tag, void, void, void, void>\n+    {\n+    public:\n+      typedef _CharT                         char_type;\n+      typedef _Traits                        traits_type;\n+      typedef basic_ostream<_CharT, _Traits> ostream_type;\n \n-  __normal_iterator() : _M_current(_Iterator()) { }\n+    private:\n+      ostream_type* \t_M_stream;\n+      const _CharT* \t_M_string;\n \n-  explicit __normal_iterator(const _Iterator& __i) : _M_current(__i) { }\n+    public:\n+      ostream_iterator(ostream_type& __s) : _M_stream(&__s), _M_string(0) {}\n+      ostream_iterator(ostream_type& __s, const _CharT* __c) \n+\t: _M_stream(&__s), _M_string(__c)  { }\n \n-  // Allow iterator to const_iterator conversion\n-  template<typename _Iter>\n-  inline __normal_iterator(const __normal_iterator<_Iter, _Container>& __i)\n-    : _M_current(__i.base()) { }\n+      ostream_iterator& \n+      operator=(const _Tp& __value) \n+      { \n+\t*_M_stream << __value;\n+\tif (_M_string) *_M_stream << _M_string;\n+\treturn *this;\n+      }\n+      \n+      ostream_iterator& \n+      operator*() { return *this; }\n+      \n+      ostream_iterator& \n+      operator++() { return *this; } \n+      \n+      ostream_iterator& \n+      operator++(int) { return *this; } \n+    };\n+  \n+  \n+  // This iterator adapter is 'normal' in the sense that it does not\n+  // change the semantics of any of the operators of its itererator\n+  // parameter.  Its primary purpose is to convert an iterator that is\n+  // not a class, e.g. a pointer, into an iterator that is a class.\n+  // The _Container parameter exists solely so that different containers\n+  // using this template can instantiate different types, even if the\n+  // _Iterator parameter is the same.\n+  template<typename _Iterator, typename _Container>\n+    class __normal_iterator\n+      : public iterator<typename iterator_traits<_Iterator>::iterator_category,\n+                        typename iterator_traits<_Iterator>::value_type,\n+                        typename iterator_traits<_Iterator>::difference_type,\n+                        typename iterator_traits<_Iterator>::pointer,\n+                        typename iterator_traits<_Iterator>::reference>\n+    {\n+    protected:\n+      _Iterator _M_current;\n+      \n+    public:\n+      typedef typename iterator_traits<_Iterator>::difference_type \t\n+      \t\t\t\t\t\t\t       difference_type;\n+      typedef typename iterator_traits<_Iterator>::reference   reference;\n+      typedef typename iterator_traits<_Iterator>::pointer     pointer;\n \n-  // Forward iterator requirements\n-  reference\n-  operator*() const { return *_M_current; }\n+      __normal_iterator() : _M_current(_Iterator()) { }\n \n-  pointer\n-  operator->() const { return _M_current; }\n+      explicit \n+      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }\n \n-  normal_iterator_type&\n-  operator++() { ++_M_current; return *this; }\n+      // Allow iterator to const_iterator conversion\n+      template<typename _Iter>\n+      inline __normal_iterator(const __normal_iterator<_Iter, _Container>& __i)\n+\t: _M_current(__i.base()) { }\n \n-  normal_iterator_type\n-  operator++(int) { return __normal_iterator(_M_current++); }\n+      // Forward iterator requirements\n+      reference\n+      operator*() const { return *_M_current; }\n+      \n+      pointer\n+      operator->() const { return _M_current; }\n+      \n+      __normal_iterator&\n+      operator++() { ++_M_current; return *this; }\n+      \n+      __normal_iterator\n+      operator++(int) { return __normal_iterator(_M_current++); }\n+      \n+      // Bidirectional iterator requirements\n+      __normal_iterator&\n+      operator--() { --_M_current; return *this; }\n+      \n+      __normal_iterator\n+      operator--(int) { return __normal_iterator(_M_current--); }\n+      \n+      // Random access iterator requirements\n+      reference\n+      operator[](const difference_type& __n) const\n+      { return _M_current[__n]; }\n+      \n+      __normal_iterator&\n+      operator+=(const difference_type& __n)\n+      { _M_current += __n; return *this; }\n \n-  // Bidirectional iterator requirements\n-  normal_iterator_type&\n-  operator--() { --_M_current; return *this; }\n+      __normal_iterator\n+      operator+(const difference_type& __n) const\n+      { return __normal_iterator(_M_current + __n); }\n+      \n+      __normal_iterator&\n+      operator-=(const difference_type& __n)\n+      { _M_current -= __n; return *this; }\n+      \n+      __normal_iterator\n+      operator-(const difference_type& __n) const\n+      { return __normal_iterator(_M_current - __n); }\n+      \n+      difference_type\n+      operator-(const __normal_iterator& __i) const\n+      { return _M_current - __i._M_current; }\n+      \n+      const _Iterator& \n+      base() const { return _M_current; }\n+    };\n \n-  normal_iterator_type\n-  operator--(int) { return __normal_iterator(_M_current--); }\n+  // Forward iterator requirements\n+  template<typename _IteratorL, typename _IteratorR, typename _Container>\n+  inline bool\n+  operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n+\t     const __normal_iterator<_IteratorR, _Container>& __rhs)\n+  { return __lhs.base() == __rhs.base(); }\n+\n+  template<typename _IteratorL, typename _IteratorR, typename _Container>\n+  inline bool\n+  operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n+\t     const __normal_iterator<_IteratorR, _Container>& __rhs)\n+  { return !(__lhs == __rhs); }\n \n   // Random access iterator requirements\n-  reference\n-  operator[](const difference_type& __n) const\n-  { return _M_current[__n]; }\n-\n-  normal_iterator_type&\n-  operator+=(const difference_type& __n)\n-  { _M_current += __n; return *this; }\n-\n-  normal_iterator_type\n-  operator+(const difference_type& __n) const\n-  { return __normal_iterator(_M_current + __n); }\n-\n-  normal_iterator_type&\n-  operator-=(const difference_type& __n)\n-  { _M_current -= __n; return *this; }\n-\n-  normal_iterator_type\n-  operator-(const difference_type& __n) const\n-  { return __normal_iterator(_M_current - __n); }\n-\n-  difference_type\n-  operator-(const normal_iterator_type& __i) const\n-  { return _M_current - __i._M_current; }\n-\n-  const _Iterator& \n-  base() const { return _M_current; }\n-};\n-\n-// forward iterator requirements\n-\n-template<typename _IteratorL, typename _IteratorR, typename _Container>\n-inline bool\n-operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n-\t   const __normal_iterator<_IteratorR, _Container>& __rhs)\n-{ return __lhs.base() == __rhs.base(); }\n-\n-template<typename _IteratorL, typename _IteratorR, typename _Container>\n-inline bool\n-operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n-\t   const __normal_iterator<_IteratorR, _Container>& __rhs)\n-{ return !(__lhs == __rhs); }\n-\n-// random access iterator requirements\n-\n-template<typename _IteratorL, typename _IteratorR, typename _Container>\n-inline bool \n-operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,\n-\t  const __normal_iterator<_IteratorR, _Container>& __rhs)\n-{ return __lhs.base() < __rhs.base(); }\n-\n-template<typename _IteratorL, typename _IteratorR, typename _Container>\n-inline bool\n-operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,\n-\t  const __normal_iterator<_IteratorR, _Container>& __rhs)\n-{ return __rhs < __lhs; }\n-\n-template<typename _IteratorL, typename _IteratorR, typename _Container>\n-inline bool\n-operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n-\t   const __normal_iterator<_IteratorR, _Container>& __rhs)\n-{ return !(__rhs < __lhs); }\n-\n-template<typename _IteratorL, typename _IteratorR, typename _Container>\n-inline bool\n-operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n-\t   const __normal_iterator<_IteratorR, _Container>& __rhs)\n-{ return !(__lhs < __rhs); }\n-\n-template<typename _Iterator, typename _Container>\n-inline __normal_iterator<_Iterator, _Container>\n-operator+(__normal_iterator<_Iterator, _Container>::difference_type __n,\n-          const __normal_iterator<_Iterator, _Container>& __i)\n-{ return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }\n-\n+  template<typename _IteratorL, typename _IteratorR, typename _Container>\n+  inline bool \n+  operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,\n+\t    const __normal_iterator<_IteratorR, _Container>& __rhs)\n+  { return __lhs.base() < __rhs.base(); }\n+\n+  template<typename _IteratorL, typename _IteratorR, typename _Container>\n+  inline bool\n+  operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,\n+\t    const __normal_iterator<_IteratorR, _Container>& __rhs)\n+  { return __rhs < __lhs; }\n+\n+  template<typename _IteratorL, typename _IteratorR, typename _Container>\n+  inline bool\n+  operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n+\t     const __normal_iterator<_IteratorR, _Container>& __rhs)\n+  { return !(__rhs < __lhs); }\n+\n+  template<typename _IteratorL, typename _IteratorR, typename _Container>\n+  inline bool\n+  operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n+\t     const __normal_iterator<_IteratorR, _Container>& __rhs)\n+  { return !(__lhs < __rhs); }\n+\n+  template<typename _Iterator, typename _Container>\n+  inline __normal_iterator<_Iterator, _Container>\n+  operator+(__normal_iterator<_Iterator, _Container>::difference_type __n,\n+\t    const __normal_iterator<_Iterator, _Container>& __i)\n+  { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }\n } // namespace std\n \n-#endif /* __SGI_STL_INTERNAL_ITERATOR_H */\n+#endif \n \n // Local Variables:\n // mode:C++"}, {"sha": "27310a9c97db38caa2961e4867c74a8d94b2c9bc", "filename": "libstdc++-v3/testsuite/24_iterators/istream_iterator.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b581eaf7009ecd8fcdbc874fa6c432143f80d8ec/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b581eaf7009ecd8fcdbc874fa6c432143f80d8ec/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator.cc?ref=b581eaf7009ecd8fcdbc874fa6c432143f80d8ec", "patch": "@@ -0,0 +1,52 @@\n+// 2001-06-25  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 24.5.1 Template class istream_iterator\n+\n+#include <iterator>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  // Check for required base class.\n+  typedef istream_iterator<long> test_iterator;\n+  typedef iterator<input_iterator_tag, long, ptrdiff_t, const long*, \n+    \t\t   const long&> base_iterator;\n+  test_iterator  r_it;\n+  base_iterator* base = &r_it;\n+\n+  // Check for required typedefs\n+  typedef test_iterator::value_type value_type;\n+  typedef test_iterator::difference_type difference_type;\n+  typedef test_iterator::pointer pointer;\n+  typedef test_iterator::reference reference;\n+  typedef test_iterator::iterator_category iteratory_category;\n+\n+  typedef test_iterator::char_type char_type;\n+  typedef test_iterator::traits_type traits_type;\n+  typedef test_iterator::istream_type istream_type;\n+}\n+\n+int main() \n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "57713e2bd07f02027759a1535e7536d25fd41665", "filename": "libstdc++-v3/testsuite/24_iterators/istreambuf_iterator.cc", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b581eaf7009ecd8fcdbc874fa6c432143f80d8ec/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b581eaf7009ecd8fcdbc874fa6c432143f80d8ec/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator.cc?ref=b581eaf7009ecd8fcdbc874fa6c432143f80d8ec", "patch": "@@ -24,7 +24,33 @@\n #include <iterator>\n #include <debug_assert.h>\n \n-bool test01(void)\n+void test01()\n+{\n+  using namespace std;\n+\n+  // Check for required base class.\n+  typedef istreambuf_iterator<char> test_iterator;\n+  typedef char_traits<char>::off_type off_type;\n+  typedef iterator<input_iterator_tag, char, off_type, char*, char&> base_iterator;\n+\n+  istringstream isstream(\"this tag\");\n+  test_iterator  r_it(isstream);\n+  base_iterator* base = &r_it;\n+\n+  // Check for required typedefs\n+  typedef test_iterator::value_type value_type;\n+  typedef test_iterator::difference_type difference_type;\n+  typedef test_iterator::pointer pointer;\n+  typedef test_iterator::reference reference;\n+  typedef test_iterator::iterator_category iteratory_category;\n+\n+  typedef test_iterator::char_type char_type;\n+  typedef test_iterator::traits_type traits_type;\n+  typedef test_iterator::istream_type istream_type;\n+  typedef test_iterator::streambuf_type streambuf_type;\n+}\n+\n+bool test02(void)\n {\n \n   typedef std::istreambuf_iterator<char> cistreambuf_iter;\n@@ -116,7 +142,7 @@ bool test01(void)\n }\n \n // libstdc++/2627\n-void test02()\n+void test03()\n {\n   bool test = true;\n   const std::string s(\"free the vieques\");\n@@ -155,6 +181,6 @@ int main()\n {\n   test01();\n   test02();\n-\n+  test03();\n   return 0;\n }"}, {"sha": "9f43cf07580d831763775d3d9b1ce268cbb051f3", "filename": "libstdc++-v3/testsuite/24_iterators/ostream_iterator.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b581eaf7009ecd8fcdbc874fa6c432143f80d8ec/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b581eaf7009ecd8fcdbc874fa6c432143f80d8ec/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator.cc?ref=b581eaf7009ecd8fcdbc874fa6c432143f80d8ec", "patch": "@@ -0,0 +1,54 @@\n+// 2001-06-25  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 24.5.4 Template class ostream_iterator\n+\n+#include <iterator>\n+#include <ostream>\n+#include <sstream>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  // Check for required base class.\n+  typedef ostream_iterator<long> test_iterator;\n+  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n+  ostringstream osstream(\"this tag\");\n+  test_iterator  r_it(osstream);\n+  base_iterator* base = &r_it;\n+\n+  // Check for required typedefs\n+  typedef test_iterator::value_type value_type;\n+  typedef test_iterator::difference_type difference_type;\n+  typedef test_iterator::pointer pointer;\n+  typedef test_iterator::reference reference;\n+  typedef test_iterator::iterator_category iteratory_category;\n+\n+  typedef test_iterator::char_type char_type;\n+  typedef test_iterator::traits_type traits_type;\n+  typedef test_iterator::ostream_type ostream_type;\n+}\n+\n+int main() \n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "68859f7c6d1c04e0d70bee7eb375a030244b941d", "filename": "libstdc++-v3/testsuite/24_iterators/ostreambuf_iterator.cc", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b581eaf7009ecd8fcdbc874fa6c432143f80d8ec/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b581eaf7009ecd8fcdbc874fa6c432143f80d8ec/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator.cc?ref=b581eaf7009ecd8fcdbc874fa6c432143f80d8ec", "patch": "@@ -24,7 +24,31 @@\n #include <iterator>\n #include <debug_assert.h>\n \n-bool test01(void)\n+void test01()\n+{\n+  using namespace std;\n+\n+  // Check for required base class.\n+  typedef ostreambuf_iterator<char> test_iterator;\n+  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n+  ostringstream osstream(\"this tag\");\n+  test_iterator  r_it(osstream);\n+  base_iterator* base = &r_it;\n+\n+  // Check for required typedefs\n+  typedef test_iterator::value_type value_type;\n+  typedef test_iterator::difference_type difference_type;\n+  typedef test_iterator::pointer pointer;\n+  typedef test_iterator::reference reference;\n+  typedef test_iterator::iterator_category iteratory_category;\n+\n+  typedef test_iterator::char_type char_type;\n+  typedef test_iterator::traits_type traits_type;\n+  typedef test_iterator::ostream_type ostream_type;\n+  typedef test_iterator::streambuf_type streambuf_type;\n+}\n+\n+bool test02(void)\n {\n   typedef std::ostreambuf_iterator<char> costreambuf_iter;\n   typedef costreambuf_iter::streambuf_type cstreambuf_type;\n@@ -93,6 +117,7 @@ bool test01(void)\n int main()\n {\n   test01();\n+  test02();\n \n   return 0;\n }"}]}