{"sha": "f0f372fab3e70622a4ea6fe4073991e1bb506e4e", "node_id": "C_kwDOANBUbNoAKGYwZjM3MmZhYjNlNzA2MjJhNGVhNmZlNDA3Mzk5MWUxYmI1MDZlNGU", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2023-04-05T14:36:49Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2023-04-05T14:37:26Z"}, "message": "ipa: Avoid another ICE when dealing with type-incompatibilities (PR 108959)\n\nPR 108959 shows one more example where undefined code with type\nincompatible accesses to stuff passed in parameters can cause an ICE\nbecause we try to create a VIEW_CONVERT_EXPR of mismatching sizes:\n\n1. IPA-CP tries to push one type from above,\n\n2. IPA-SRA (correctly) decides the parameter is useless because it is\n   only used to construct an argument to another function which does not\n   use it and so the formal parameter should be removed,\n\n3. but the code reconciling IPA-CP and IPA-SRA transformations still\n   wants to perform the IPA-CP and overrides the built-in DCE of\n   useless statements and tries to stuff constants into them\n   instead, constants of a type with mismatching type and size.\n\nThis patch avoids the situation in IPA-SRA by purging the IPA-CP\nresults from any \"aggregate\" constants that are passed in parameters\nwhich are detected to be useless.  It also removes IPA value range and\nbits information associated with removed parameters stored in the same\nstructure so that the useless information is not streamed later on.\n\ngcc/ChangeLog:\n\n2023-03-22  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/108959\n\t* ipa-sra.cc (zap_useless_ipcp_results): New function.\n\t(process_isra_node_results): Call it.\n\ngcc/testsuite/ChangeLog:\n\n2023-03-17  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/108959\n\t* gcc.dg/ipa/pr108959.c: New test.", "tree": {"sha": "ef2fb32d8c46949b7489cec394076c408c6851b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef2fb32d8c46949b7489cec394076c408c6851b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0f372fab3e70622a4ea6fe4073991e1bb506e4e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE5elVTFt/d09Vsoczv2PBvD+kNUAFAmQth6YACgkQv2PBvD+k\nNUCURw/6AvmxPwwcWsVVVNVg54/59mmSwXDXlQIPyyniSMLiQA3w6YLDnRcGbAxA\nuT8aLc002GnYBod20mc9SJjNHgnWhTdMb3Fw4gmWJ3bcgLsklOIT+Al4nLQdM7+S\nvNk3xlYXv8R+ZJyDSGUtNjsYX6SnCvQGkPkeJyJ1VpWl6ps1STuGi9AsrRfbA0iM\nc2rgp9HjAbzspV5eeQmSRLgZHryluEiBT+8cs0TTGv5MOUuWCOGN+ZeFcVqlJ7SG\na0iZryrd6VdA1Jf0VLn95F5JOY4Cb6QNb4o+OHDb32MFUkUBkjXbE9uVf4sPEQYR\n3j1qzVTgmJOw7DaM3ULVySPYSkZ4ux2On5+ljr5hJi+mjBdyDoBVZmM/Skd8ypHv\nTsaSyMrKoanEn/r1ME1w8V4VCobC13MC75pBk+xvzO8gGo7OtTETmXhcrAaWbkry\n2ofLGO1kuR6TflPV3ld6JK62Ba+qfc0RdI2ZK/hAyE/LLpZ7o+ZuFGd3ZhHrqwLo\nVXo8HA/pabPqGIA1tnkd8bYMci1Y14rf0AarL/GSB14fKy2QnFoxrxq00eCDnrUK\nXbSR3gOKgPciKRL2tGJq7jRa4MFKeBu/KXdULkRGmj74O+vk5vIA71G296srcuIk\n26d+fGJ114h8JejkKce+cpwiOLLy3qJ7cbzTajWPV8SH5utpXXM=\n=OXw+\n-----END PGP SIGNATURE-----", "payload": "tree ef2fb32d8c46949b7489cec394076c408c6851b1\nparent ce1e682ca21400d9b59f08f0416d96e0bac369d8\nauthor Martin Jambor <mjambor@suse.cz> 1680705409 +0200\ncommitter Martin Jambor <mjambor@suse.cz> 1680705446 +0200\n\nipa: Avoid another ICE when dealing with type-incompatibilities (PR 108959)\n\nPR 108959 shows one more example where undefined code with type\nincompatible accesses to stuff passed in parameters can cause an ICE\nbecause we try to create a VIEW_CONVERT_EXPR of mismatching sizes:\n\n1. IPA-CP tries to push one type from above,\n\n2. IPA-SRA (correctly) decides the parameter is useless because it is\n   only used to construct an argument to another function which does not\n   use it and so the formal parameter should be removed,\n\n3. but the code reconciling IPA-CP and IPA-SRA transformations still\n   wants to perform the IPA-CP and overrides the built-in DCE of\n   useless statements and tries to stuff constants into them\n   instead, constants of a type with mismatching type and size.\n\nThis patch avoids the situation in IPA-SRA by purging the IPA-CP\nresults from any \"aggregate\" constants that are passed in parameters\nwhich are detected to be useless.  It also removes IPA value range and\nbits information associated with removed parameters stored in the same\nstructure so that the useless information is not streamed later on.\n\ngcc/ChangeLog:\n\n2023-03-22  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/108959\n\t* ipa-sra.cc (zap_useless_ipcp_results): New function.\n\t(process_isra_node_results): Call it.\n\ngcc/testsuite/ChangeLog:\n\n2023-03-17  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/108959\n\t* gcc.dg/ipa/pr108959.c: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0f372fab3e70622a4ea6fe4073991e1bb506e4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0f372fab3e70622a4ea6fe4073991e1bb506e4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0f372fab3e70622a4ea6fe4073991e1bb506e4e/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce1e682ca21400d9b59f08f0416d96e0bac369d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce1e682ca21400d9b59f08f0416d96e0bac369d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce1e682ca21400d9b59f08f0416d96e0bac369d8"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "7b8260bc9e1be9d7a2b921e06b32e1c43fbb85a5", "filename": "gcc/ipa-sra.cc", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0f372fab3e70622a4ea6fe4073991e1bb506e4e/gcc%2Fipa-sra.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0f372fab3e70622a4ea6fe4073991e1bb506e4e/gcc%2Fipa-sra.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-sra.cc?ref=f0f372fab3e70622a4ea6fe4073991e1bb506e4e", "patch": "@@ -4028,6 +4028,70 @@ mark_callers_calls_comdat_local (struct cgraph_node *node, void *)\n   return false;\n }\n \n+/* Remove any IPA-CP results stored in TS that are associated with removed\n+   parameters as marked in IFS. */\n+\n+static void\n+zap_useless_ipcp_results (const isra_func_summary *ifs, ipcp_transformation *ts)\n+{\n+  unsigned ts_len = vec_safe_length (ts->m_agg_values);\n+\n+  if (ts_len == 0)\n+    return;\n+\n+  bool removed_item = false;\n+  unsigned dst_index = 0;\n+\n+  for (unsigned i = 0; i < ts_len; i++)\n+    {\n+      ipa_argagg_value *v = &(*ts->m_agg_values)[i];\n+      const isra_param_desc *desc = &(*ifs->m_parameters)[v->index];\n+\n+      if (!desc->locally_unused)\n+\t{\n+\t  if (removed_item)\n+\t    (*ts->m_agg_values)[dst_index] = *v;\n+\t  dst_index++;\n+\t}\n+      else\n+\tremoved_item = true;\n+    }\n+  if (dst_index == 0)\n+    {\n+      ggc_free (ts->m_agg_values);\n+      ts->m_agg_values = NULL;\n+    }\n+  else if (removed_item)\n+    ts->m_agg_values->truncate (dst_index);\n+\n+  bool useful_bits = false;\n+  unsigned count = vec_safe_length (ts->bits);\n+  for (unsigned i = 0; i < count; i++)\n+    if ((*ts->bits)[i])\n+    {\n+      const isra_param_desc *desc = &(*ifs->m_parameters)[i];\n+      if (desc->locally_unused)\n+\t(*ts->bits)[i] = NULL;\n+      else\n+\tuseful_bits = true;\n+    }\n+  if (!useful_bits)\n+    ts->bits = NULL;\n+\n+  bool useful_vr = false;\n+  count = vec_safe_length (ts->m_vr);\n+  for (unsigned i = 0; i < count; i++)\n+    if ((*ts->m_vr)[i].known)\n+      {\n+\tconst isra_param_desc *desc = &(*ifs->m_parameters)[i];\n+\tif (desc->locally_unused)\n+\t  (*ts->m_vr)[i].known = false;\n+\telse\n+\t  useful_vr = true;\n+      }\n+  if (!useful_vr)\n+    ts->m_vr = NULL;\n+}\n \n /* Do final processing of results of IPA propagation regarding NODE, clone it\n    if appropriate.  */\n@@ -4080,6 +4144,8 @@ process_isra_node_results (cgraph_node *node,\n     }\n \n   ipcp_transformation *ipcp_ts = ipcp_get_transformation_summary (node);\n+  if (ipcp_ts)\n+    zap_useless_ipcp_results (ifs, ipcp_ts);\n   vec<ipa_adjusted_param, va_gc> *new_params = NULL;\n   if (ipa_param_adjustments *old_adjustments\n \t = cinfo ? cinfo->param_adjustments : NULL)"}, {"sha": "cd1f88658efcfb29eda1b3cefe004b81379003ee", "filename": "gcc/testsuite/gcc.dg/ipa/pr108959.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0f372fab3e70622a4ea6fe4073991e1bb506e4e/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr108959.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0f372fab3e70622a4ea6fe4073991e1bb506e4e/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr108959.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr108959.c?ref=f0f372fab3e70622a4ea6fe4073991e1bb506e4e", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+union U2 {\n+  long f0;\n+  int f1;\n+};\n+int g_16;\n+int g_70[20];\n+static int func_61(int) {\n+  for (;;)\n+    g_70[g_16] = 4;\n+}\n+static int func_43(int *p_44)\n+{\n+  func_61(*p_44);\n+}\n+int main() {\n+  union U2 l_38 = {9};\n+  int *l_49 = (int *) &l_38;\n+  func_43(l_49);\n+}"}]}