{"sha": "2a3e690ab3550c22c6e546ce354a8a91ce3eff14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEzZTY5MGFiMzU1MGMyMmM2ZTU0NmNlMzU0YThhOTFjZTNlZmYxNA==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2013-10-01T16:50:56Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-10-01T16:50:56Z"}, "message": "Import from savannah.gnu.org:\n\n        * config.guess: Update to 2013-06-10 version.\n        * config.sub: Update to 2013-10-01 version.\n\nFrom-SVN: r203071", "tree": {"sha": "3b55c803ca423e459e055e4f83730e48ed2ef2ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b55c803ca423e459e055e4f83730e48ed2ef2ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a3e690ab3550c22c6e546ce354a8a91ce3eff14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a3e690ab3550c22c6e546ce354a8a91ce3eff14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a3e690ab3550c22c6e546ce354a8a91ce3eff14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a3e690ab3550c22c6e546ce354a8a91ce3eff14/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "53426f6c14acf5e3e163bcdda4c3b918ce208a7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53426f6c14acf5e3e163bcdda4c3b918ce208a7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53426f6c14acf5e3e163bcdda4c3b918ce208a7f"}], "stats": {"total": 193, "additions": 113, "deletions": 80}, "files": [{"sha": "0d3c199e17bce327f505a1fea394194a6354fae6", "filename": "ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a3e690ab3550c22c6e546ce354a8a91ce3eff14/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a3e690ab3550c22c6e546ce354a8a91ce3eff14/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=2a3e690ab3550c22c6e546ce354a8a91ce3eff14", "patch": "@@ -1,3 +1,9 @@\n+2013-01-10  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\tImport from savannah.gnu.org:\n+\t* config.guess: Update to 2013-06-10 version.\n+\t* config.sub: Update to 2013-10-01 version.\n+\n 2013-10-01  Simon Cook  <simon.cook@embecosm.com>\n \n \tChanges to build configuration to allow big endian ARC ELF toolchain"}, {"sha": "b79252d6b1034cbcce18ed21d4ed21a405f987e9", "filename": "config.guess", "status": "modified", "additions": 86, "deletions": 63, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a3e690ab3550c22c6e546ce354a8a91ce3eff14/config.guess", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a3e690ab3550c22c6e546ce354a8a91ce3eff14/config.guess", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config.guess?ref=2a3e690ab3550c22c6e546ce354a8a91ce3eff14", "patch": "@@ -1,10 +1,8 @@\n #! /bin/sh\n # Attempt to guess a canonical system name.\n-#   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-#   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-#   2011, 2012, 2013 Free Software Foundation, Inc.\n+#   Copyright 1992-2013 Free Software Foundation, Inc.\n \n-timestamp='2012-12-30'\n+timestamp='2013-06-10'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -52,9 +50,7 @@ version=\"\\\n GNU config.guess ($timestamp)\n \n Originally written by Per Bothner.\n-Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,\n-2012, 2013 Free Software Foundation, Inc.\n+Copyright 1992-2013 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -136,6 +132,27 @@ UNAME_RELEASE=`(uname -r) 2>/dev/null` || UNAME_RELEASE=unknown\n UNAME_SYSTEM=`(uname -s) 2>/dev/null`  || UNAME_SYSTEM=unknown\n UNAME_VERSION=`(uname -v) 2>/dev/null` || UNAME_VERSION=unknown\n \n+case \"${UNAME_SYSTEM}\" in\n+Linux|GNU|GNU/*)\n+\t# If the system lacks a compiler, then just pick glibc.\n+\t# We could probably try harder.\n+\tLIBC=gnu\n+\n+\teval $set_cc_for_build\n+\tcat <<-EOF > $dummy.c\n+\t#include <features.h>\n+\t#if defined(__UCLIBC__)\n+\tLIBC=uclibc\n+\t#elif defined(__dietlibc__)\n+\tLIBC=dietlibc\n+\t#else\n+\tLIBC=gnu\n+\t#endif\n+\tEOF\n+\teval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep '^LIBC'`\n+\t;;\n+esac\n+\n # Note: order is significant - the case branches are not exclusive.\n \n case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n@@ -857,21 +874,21 @@ EOF\n \texit ;;\n     *:GNU:*:*)\n \t# the GNU system\n-\techo `echo ${UNAME_MACHINE}|sed -e 's,[-/].*$,,'`-unknown-gnu`echo ${UNAME_RELEASE}|sed -e 's,/.*$,,'`\n+\techo `echo ${UNAME_MACHINE}|sed -e 's,[-/].*$,,'`-unknown-${LIBC}`echo ${UNAME_RELEASE}|sed -e 's,/.*$,,'`\n \texit ;;\n     *:GNU/*:*:*)\n \t# other systems with GNU libc and userland\n-\techo ${UNAME_MACHINE}-unknown-`echo ${UNAME_SYSTEM} | sed 's,^[^/]*/,,' | tr '[A-Z]' '[a-z]'``echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`-gnu\n+\techo ${UNAME_MACHINE}-unknown-`echo ${UNAME_SYSTEM} | sed 's,^[^/]*/,,' | tr '[A-Z]' '[a-z]'``echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`-${LIBC}\n \texit ;;\n     i*86:Minix:*:*)\n \techo ${UNAME_MACHINE}-pc-minix\n \texit ;;\n     aarch64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-gnu\n+\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n \texit ;;\n     aarch64_be:Linux:*:*)\n \tUNAME_MACHINE=aarch64_be\n-\techo ${UNAME_MACHINE}-unknown-linux-gnu\n+\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n \texit ;;\n     alpha:Linux:*:*)\n \tcase `sed -n '/^cpu model/s/^.*: \\(.*\\)/\\1/p' < /proc/cpuinfo` in\n@@ -884,59 +901,54 @@ EOF\n \t  EV68*) UNAME_MACHINE=alphaev68 ;;\n \tesac\n \tobjdump --private-headers /bin/sh | grep -q ld.so.1\n-\tif test \"$?\" = 0 ; then LIBC=\"libc1\" ; else LIBC=\"\" ; fi\n-\techo ${UNAME_MACHINE}-unknown-linux-gnu${LIBC}\n+\tif test \"$?\" = 0 ; then LIBC=\"gnulibc1\" ; fi\n+\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\texit ;;\n+    arc:Linux:*:* | arceb:Linux:*:*)\n+\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n \texit ;;\n     arm*:Linux:*:*)\n \teval $set_cc_for_build\n \tif echo __ARM_EABI__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n \t    | grep -q __ARM_EABI__\n \tthen\n-\t    echo ${UNAME_MACHINE}-unknown-linux-gnu\n+\t    echo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n \telse\n \t    if echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\\n \t\t| grep -q __ARM_PCS_VFP\n \t    then\n-\t\techo ${UNAME_MACHINE}-unknown-linux-gnueabi\n+\t\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}eabi\n \t    else\n-\t\techo ${UNAME_MACHINE}-unknown-linux-gnueabihf\n+\t\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}eabihf\n \t    fi\n \tfi\n \texit ;;\n     avr32*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-gnu\n+\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n \texit ;;\n     cris:Linux:*:*)\n-\techo ${UNAME_MACHINE}-axis-linux-gnu\n+\techo ${UNAME_MACHINE}-axis-linux-${LIBC}\n \texit ;;\n     crisv32:Linux:*:*)\n-\techo ${UNAME_MACHINE}-axis-linux-gnu\n+\techo ${UNAME_MACHINE}-axis-linux-${LIBC}\n \texit ;;\n     frv:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-gnu\n+\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n \texit ;;\n     hexagon:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-gnu\n+\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n \texit ;;\n     i*86:Linux:*:*)\n-\tLIBC=gnu\n-\teval $set_cc_for_build\n-\tsed 's/^\t//' << EOF >$dummy.c\n-\t#ifdef __dietlibc__\n-\tLIBC=dietlibc\n-\t#endif\n-EOF\n-\teval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep '^LIBC'`\n-\techo \"${UNAME_MACHINE}-pc-linux-${LIBC}\"\n+\techo ${UNAME_MACHINE}-pc-linux-${LIBC}\n \texit ;;\n     ia64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-gnu\n+\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n \texit ;;\n     m32r*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-gnu\n+\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n \texit ;;\n     m68*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-gnu\n+\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n \texit ;;\n     mips:Linux:*:* | mips64:Linux:*:*)\n \teval $set_cc_for_build\n@@ -955,54 +967,63 @@ EOF\n \t#endif\n EOF\n \teval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep '^CPU'`\n-\ttest x\"${CPU}\" != x && { echo \"${CPU}-unknown-linux-gnu\"; exit; }\n+\ttest x\"${CPU}\" != x && { echo \"${CPU}-unknown-linux-${LIBC}\"; exit; }\n \t;;\n+    or1k:Linux:*:*)\n+\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\texit ;;\n     or32:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-gnu\n+\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n \texit ;;\n     padre:Linux:*:*)\n-\techo sparc-unknown-linux-gnu\n+\techo sparc-unknown-linux-${LIBC}\n \texit ;;\n     parisc64:Linux:*:* | hppa64:Linux:*:*)\n-\techo hppa64-unknown-linux-gnu\n+\techo hppa64-unknown-linux-${LIBC}\n \texit ;;\n     parisc:Linux:*:* | hppa:Linux:*:*)\n \t# Look for CPU level\n \tcase `grep '^cpu[^a-z]*:' /proc/cpuinfo 2>/dev/null | cut -d' ' -f2` in\n-\t  PA7*) echo hppa1.1-unknown-linux-gnu ;;\n-\t  PA8*) echo hppa2.0-unknown-linux-gnu ;;\n-\t  *)    echo hppa-unknown-linux-gnu ;;\n+\t  PA7*) echo hppa1.1-unknown-linux-${LIBC} ;;\n+\t  PA8*) echo hppa2.0-unknown-linux-${LIBC} ;;\n+\t  *)    echo hppa-unknown-linux-${LIBC} ;;\n \tesac\n \texit ;;\n     ppc64:Linux:*:*)\n-\techo powerpc64-unknown-linux-gnu\n+\techo powerpc64-unknown-linux-${LIBC}\n \texit ;;\n     ppc:Linux:*:*)\n-\techo powerpc-unknown-linux-gnu\n+\techo powerpc-unknown-linux-${LIBC}\n+\texit ;;\n+    ppc64le:Linux:*:*)\n+\techo powerpc64le-unknown-linux-${LIBC}\n+\texit ;;\n+    ppcle:Linux:*:*)\n+\techo powerpcle-unknown-linux-${LIBC}\n \texit ;;\n     s390:Linux:*:* | s390x:Linux:*:*)\n-\techo ${UNAME_MACHINE}-ibm-linux\n+\techo ${UNAME_MACHINE}-ibm-linux-${LIBC}\n \texit ;;\n     sh64*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-gnu\n+\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n \texit ;;\n     sh*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-gnu\n+\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n \texit ;;\n     sparc:Linux:*:* | sparc64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-gnu\n+\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n \texit ;;\n     tile*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-gnu\n+\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n \texit ;;\n     vax:Linux:*:*)\n-\techo ${UNAME_MACHINE}-dec-linux-gnu\n+\techo ${UNAME_MACHINE}-dec-linux-${LIBC}\n \texit ;;\n     x86_64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-gnu\n+\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n \texit ;;\n     xtensa*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-gnu\n+\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n \texit ;;\n     i*86:DYNIX/ptx:4*:*)\n \t# ptx 4.0 does uname -s correctly, with DYNIX/ptx in there.\n@@ -1235,19 +1256,21 @@ EOF\n \texit ;;\n     *:Darwin:*:*)\n \tUNAME_PROCESSOR=`uname -p` || UNAME_PROCESSOR=unknown\n-\tcase $UNAME_PROCESSOR in\n-\t    i386)\n-\t\teval $set_cc_for_build\n-\t\tif [ \"$CC_FOR_BUILD\" != 'no_compiler_found' ]; then\n-\t\t  if (echo '#ifdef __LP64__'; echo IS_64BIT_ARCH; echo '#endif') | \\\n-\t\t      (CCOPTS= $CC_FOR_BUILD -E - 2>/dev/null) | \\\n-\t\t      grep IS_64BIT_ARCH >/dev/null\n-\t\t  then\n-\t\t      UNAME_PROCESSOR=\"x86_64\"\n-\t\t  fi\n-\t\tfi ;;\n-\t    unknown) UNAME_PROCESSOR=powerpc ;;\n-\tesac\n+\teval $set_cc_for_build\n+\tif test \"$UNAME_PROCESSOR\" = unknown ; then\n+\t    UNAME_PROCESSOR=powerpc\n+\tfi\n+\tif [ \"$CC_FOR_BUILD\" != 'no_compiler_found' ]; then\n+\t    if (echo '#ifdef __LP64__'; echo IS_64BIT_ARCH; echo '#endif') | \\\n+\t\t(CCOPTS= $CC_FOR_BUILD -E - 2>/dev/null) | \\\n+\t\tgrep IS_64BIT_ARCH >/dev/null\n+\t    then\n+\t\tcase $UNAME_PROCESSOR in\n+\t\t    i386) UNAME_PROCESSOR=x86_64 ;;\n+\t\t    powerpc) UNAME_PROCESSOR=powerpc64 ;;\n+\t\tesac\n+\t    fi\n+\tfi\n \techo ${UNAME_PROCESSOR}-apple-darwin${UNAME_RELEASE}\n \texit ;;\n     *:procnto*:*:* | *:QNX:[0123456789]*:*)"}, {"sha": "61cb4bc22db8e0a490b5ea5bffe6575c10ff92e0", "filename": "config.sub", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a3e690ab3550c22c6e546ce354a8a91ce3eff14/config.sub", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a3e690ab3550c22c6e546ce354a8a91ce3eff14/config.sub", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config.sub?ref=2a3e690ab3550c22c6e546ce354a8a91ce3eff14", "patch": "@@ -1,10 +1,8 @@\n #! /bin/sh\n # Configuration validation subroutine script.\n-#   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-#   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-#   2011, 2012, 2013 Free Software Foundation, Inc.\n+#   Copyright 1992-2013 Free Software Foundation, Inc.\n \n-timestamp='2013-01-11'\n+timestamp='2013-10-01'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -70,9 +68,7 @@ Report bugs and patches to <config-patches@gnu.org>.\"\n version=\"\\\n GNU config.sub ($timestamp)\n \n-Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,\n-2012, 2013 Free Software Foundation, Inc.\n+Copyright 1992-2013 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -256,19 +252,20 @@ case $basic_machine in\n \t| alpha | alphaev[4-8] | alphaev56 | alphaev6[78] | alphapca5[67] \\\n \t| alpha64 | alpha64ev[4-8] | alpha64ev56 | alpha64ev6[78] | alpha64pca5[67] \\\n \t| am33_2.0 \\\n-\t| arc \\\n+\t| arc | arceb \\\n \t| arm | arm[bl]e | arme[lb] | armv[2-8] | armv[3-8][lb] | armv7[arm] \\\n \t| avr | avr32 \\\n \t| be32 | be64 \\\n \t| bfin \\\n-\t| c4x | clipper \\\n+\t| c4x | c8051 | clipper \\\n \t| d10v | d30v | dlx | dsp16xx \\\n \t| epiphany \\\n \t| fido | fr30 | frv \\\n \t| h8300 | h8500 | hppa | hppa1.[01] | hppa2.0 | hppa2.0[nw] | hppa64 \\\n \t| hexagon \\\n \t| i370 | i860 | i960 | ia64 \\\n \t| ip2k | iq2000 \\\n+\t| k1om \\\n \t| le32 | le64 \\\n \t| lm32 \\\n \t| m32c | m32r | m32rle | m68000 | m68k | m88k \\\n@@ -297,10 +294,10 @@ case $basic_machine in\n \t| mt \\\n \t| msp430 \\\n \t| nds32 | nds32le | nds32be \\\n-\t| nios | nios2 \\\n+\t| nios | nios2 | nios2eb | nios2el \\\n \t| ns16k | ns32k \\\n \t| open8 \\\n-\t| or32 \\\n+\t| or1k | or32 \\\n \t| pdp10 | pdp11 | pj | pjl \\\n \t| powerpc | powerpc64 | powerpc64le | powerpcle \\\n \t| pyramid \\\n@@ -328,7 +325,7 @@ case $basic_machine in\n \tc6x)\n \t\tbasic_machine=tic6x-unknown\n \t\t;;\n-\tm6811 | m68hc11 | m6812 | m68hc12 | m68hcs12x | picochip)\n+\tm6811 | m68hc11 | m6812 | m68hc12 | m68hcs12x | nvptx | picochip)\n \t\tbasic_machine=$basic_machine-unknown\n \t\tos=-none\n \t\t;;\n@@ -370,13 +367,13 @@ case $basic_machine in\n \t| aarch64-* | aarch64_be-* \\\n \t| alpha-* | alphaev[4-8]-* | alphaev56-* | alphaev6[78]-* \\\n \t| alpha64-* | alpha64ev[4-8]-* | alpha64ev56-* | alpha64ev6[78]-* \\\n-\t| alphapca5[67]-* | alpha64pca5[67]-* | arc-* \\\n+\t| alphapca5[67]-* | alpha64pca5[67]-* | arc-* | arceb-* \\\n \t| arm-*  | armbe-* | armle-* | armeb-* | armv*-* \\\n \t| avr-* | avr32-* \\\n \t| be32-* | be64-* \\\n \t| bfin-* | bs2000-* \\\n \t| c[123]* | c30-* | [cjt]90-* | c4x-* \\\n-\t| clipper-* | craynv-* | cydra-* \\\n+\t| c8051-* | clipper-* | craynv-* | cydra-* \\\n \t| d10v-* | d30v-* | dlx-* \\\n \t| elxsi-* \\\n \t| f30[01]-* | f700-* | fido-* | fr30-* | frv-* | fx80-* \\\n@@ -385,6 +382,7 @@ case $basic_machine in\n \t| hexagon-* \\\n \t| i*86-* | i860-* | i960-* | ia64-* \\\n \t| ip2k-* | iq2000-* \\\n+\t| k1om-* \\\n \t| le32-* | le64-* \\\n \t| lm32-* \\\n \t| m32c-* | m32r-* | m32rle-* \\\n@@ -414,7 +412,7 @@ case $basic_machine in\n \t| mt-* \\\n \t| msp430-* \\\n \t| nds32-* | nds32le-* | nds32be-* \\\n-\t| nios-* | nios2-* \\\n+\t| nios-* | nios2-* | nios2eb-* | nios2el-* \\\n \t| none-* | np1-* | ns16k-* | ns32k-* \\\n \t| open8-* \\\n \t| orion-* \\\n@@ -798,7 +796,7 @@ case $basic_machine in\n \t\tos=-mingw64\n \t\t;;\n \tmingw32)\n-\t\tbasic_machine=i386-pc\n+\t\tbasic_machine=i686-pc\n \t\tos=-mingw32\n \t\t;;\n \tmingw32ce)\n@@ -834,7 +832,7 @@ case $basic_machine in\n \t\tbasic_machine=`echo $basic_machine | sed -e 's/ms1-/mt-/'`\n \t\t;;\n \tmsys)\n-\t\tbasic_machine=i386-pc\n+\t\tbasic_machine=i686-pc\n \t\tos=-msys\n \t\t;;\n \tmvs)\n@@ -1550,6 +1548,9 @@ case $basic_machine in\n \tc4x-* | tic4x-*)\n \t\tos=-coff\n \t\t;;\n+\tc8051-*)\n+\t\tos=-elf\n+\t\t;;\n \thexagon-*)\n \t\tos=-elf\n \t\t;;\n@@ -1593,6 +1594,9 @@ case $basic_machine in\n \tmips*-*)\n \t\tos=-elf\n \t\t;;\n+\tor1k-*)\n+\t\tos=-elf\n+\t\t;;\n \tor32-*)\n \t\tos=-coff\n \t\t;;"}]}