{"sha": "707e9159ed25d19c174e4da18b194e530878d450", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA3ZTkxNTllZDI1ZDE5YzE3NGU0ZGExOGIxOTRlNTMwODc4ZDQ1MA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-09-12T14:48:58Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-09-12T19:34:38Z"}, "message": "d: Return promoted types in d_type_promotes_to when linkage is not D\n\nThis enables warnings to be shown when a bad type is passed to va_arg\ninside an extern(C) or extern(C++) function.\n\ngcc/d/ChangeLog:\n\n\tPR d/97002\n\t* d-codegen.cc (d_build_call): Set input_location on CALL_EXPR.\n\t* d-lang.cc: Include function.h.\n\t(d_type_promotes_to): Do default conversions for C and C++ functions.\n\t* intrinsics.cc (expand_intrinsic_vaarg): Use build1_loc to build\n\tVA_ARG_EXPR.\n\ngcc/testsuite/ChangeLog:\n\n\tPR d/97002\n\t* gdc.dg/pr97002.d: New test.", "tree": {"sha": "c28d409b32c482ff55965576c1198b0a1568d3d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c28d409b32c482ff55965576c1198b0a1568d3d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/707e9159ed25d19c174e4da18b194e530878d450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/707e9159ed25d19c174e4da18b194e530878d450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/707e9159ed25d19c174e4da18b194e530878d450", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/707e9159ed25d19c174e4da18b194e530878d450/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4011c13c1f8d51f00af61bcb8189bcbe45823b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4011c13c1f8d51f00af61bcb8189bcbe45823b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4011c13c1f8d51f00af61bcb8189bcbe45823b7"}], "stats": {"total": 116, "additions": 113, "deletions": 3}, "files": [{"sha": "1f2d65c4ae2c458baf4452f6cdba21b38be9209a", "filename": "gcc/d/d-codegen.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707e9159ed25d19c174e4da18b194e530878d450/gcc%2Fd%2Fd-codegen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707e9159ed25d19c174e4da18b194e530878d450/gcc%2Fd%2Fd-codegen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-codegen.cc?ref=707e9159ed25d19c174e4da18b194e530878d450", "patch": "@@ -2042,6 +2042,7 @@ d_build_call (TypeFunction *tf, tree callable, tree object,\n     }\n \n   tree result = build_call_vec (TREE_TYPE (ctype), callee, args);\n+  SET_EXPR_LOCATION (result, input_location);\n \n   /* Enforce left to right evaluation.  */\n   if (tf->linkage == LINKd)"}, {"sha": "fb95716f918f4163746c75041c0cf0f8aea25f33", "filename": "gcc/d/d-lang.cc", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707e9159ed25d19c174e4da18b194e530878d450/gcc%2Fd%2Fd-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707e9159ed25d19c174e4da18b194e530878d450/gcc%2Fd%2Fd-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-lang.cc?ref=707e9159ed25d19c174e4da18b194e530878d450", "patch": "@@ -43,6 +43,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n #include \"target.h\"\n+#include \"function.h\"\n #include \"stringpool.h\"\n #include \"stor-layout.h\"\n #include \"varasm.h\"\n@@ -1358,12 +1359,65 @@ d_type_for_size (unsigned bits, int unsignedp)\n   return 0;\n }\n \n-/* Implements the lang_hooks.types.type_promotes_to routine for language D.\n-   All promotions for variable arguments are handled by the D frontend.  */\n+/* Implements the lang_hooks.types.type_promotes_to routine for language D.  */\n \n static tree\n d_type_promotes_to (tree type)\n {\n+  /* Promotions are only applied on unnamed function arguments for declarations\n+     with `extern(C)' or `extern(C++)' linkage.  */\n+  if (cfun && DECL_LANG_FRONTEND (cfun->decl)\n+      && DECL_LANG_FRONTEND (cfun->decl)->linkage != LINKd)\n+    {\n+      /* In [type/integer-promotions], integer promotions are conversions of the\n+\t following types:\n+\n+\t\tbool\tint\n+\t\tbyte\tint\n+\t\tubyte\tint\n+\t\tshort\tint\n+\t\tushort\tint\n+\t\tchar\tint\n+\t\twchar\tint\n+\t\tdchar\tuint\n+\n+\t If an enum has as a base type one of the types in the left column, it\n+\t is converted to the type in the right column.  */\n+      if (TREE_CODE (type) == ENUMERAL_TYPE && ENUM_IS_SCOPED (type))\n+\ttype = TREE_TYPE (type);\n+\n+      type = TYPE_MAIN_VARIANT (type);\n+\n+      /* Check for promotions of target-defined types first.  */\n+      tree promoted_type = targetm.promoted_type (type);\n+      if (promoted_type)\n+\treturn promoted_type;\n+\n+      if (TREE_CODE (type) == BOOLEAN_TYPE)\n+\treturn d_int_type;\n+\n+      if (INTEGRAL_TYPE_P (type))\n+\t{\n+\t  if (type == d_byte_type || type == d_ubyte_type\n+\t      || type == d_short_type || type == d_ushort_type\n+\t      || type == char8_type_node || type == char16_type_node)\n+\t    return d_int_type;\n+\n+\t  if (type == char32_type_node)\n+\t    return d_uint_type;\n+\n+\t  if (TYPE_PRECISION (type) < TYPE_PRECISION (d_int_type))\n+\t    return d_int_type;\n+\t}\n+\n+      /* Float arguments are converted to doubles.  */\n+      if (type == float_type_node)\n+\treturn double_type_node;\n+\n+      if (type == ifloat_type_node)\n+\treturn idouble_type_node;\n+    }\n+\n   return type;\n }\n "}, {"sha": "a629472c6c5676f7f30a92b65add4bbed6042c17", "filename": "gcc/d/intrinsics.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707e9159ed25d19c174e4da18b194e530878d450/gcc%2Fd%2Fintrinsics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707e9159ed25d19c174e4da18b194e530878d450/gcc%2Fd%2Fintrinsics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fintrinsics.cc?ref=707e9159ed25d19c174e4da18b194e530878d450", "patch": "@@ -562,7 +562,7 @@ expand_intrinsic_vaarg (tree callexp)\n     }\n \n   /* (T) VA_ARG_EXP<ap>;  */\n-  tree exp = build1 (VA_ARG_EXPR, type, ap);\n+  tree exp = build1_loc (EXPR_LOCATION (callexp), VA_ARG_EXPR, type, ap);\n \n   /* parmn = (T) VA_ARG_EXP<ap>;  */\n   if (parmn != NULL_TREE)"}, {"sha": "5c537db3a0bec9f7128a45f0f87df674615b3cfb", "filename": "gcc/testsuite/gdc.dg/pr97002.d", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707e9159ed25d19c174e4da18b194e530878d450/gcc%2Ftestsuite%2Fgdc.dg%2Fpr97002.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707e9159ed25d19c174e4da18b194e530878d450/gcc%2Ftestsuite%2Fgdc.dg%2Fpr97002.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr97002.d?ref=707e9159ed25d19c174e4da18b194e530878d450", "patch": "@@ -0,0 +1,55 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=97002\n+// { dg-do compile }\n+\n+import core.stdc.stdarg;\n+\n+enum E1 : bool { one, two }\n+enum E2 : short { one, two }\n+enum E3 : dchar { one, two }\n+enum E4 : float { one, two }\n+\n+extern(C) void fun(void *p1, ...)\n+{\n+    va_arg!bool(_argptr);   // { dg-warning \"'bool' is promoted to 'int' when passed through '...'\" \"promoted\" }\n+    // { dg-message \"note: .so you should pass .int. not .bool. to .va_arg..\" \"int not bool\" { target *-*-* } .-1 }\n+    // { dg-message \"note: if this code is reached, the program will abort\"  \"will abort\" { target *-*-* } .-2 }\n+\n+    va_arg!byte(_argptr);   // { dg-warning \"'byte' is promoted to 'int' when passed through '...'\" \"promoted\" }\n+    // { dg-message \"note: if this code is reached, the program will abort\"  \"will abort\" { target *-*-* } .-1 }\n+\n+    va_arg!ubyte(_argptr);   // { dg-warning \"'ubyte' is promoted to 'int' when passed through '...'\" \"promoted\" }\n+    // { dg-message \"note: if this code is reached, the program will abort\"  \"will abort\" { target *-*-* } .-1 }\n+\n+    va_arg!short(_argptr);   // { dg-warning \"'short' is promoted to 'int' when passed through '...'\" \"promoted\" }\n+    // { dg-message \"note: if this code is reached, the program will abort\"  \"will abort\" { target *-*-* } .-1 }\n+\n+    va_arg!ushort(_argptr);   // { dg-warning \"'ushort' is promoted to 'int' when passed through '...'\" \"promoted\" }\n+    // { dg-message \"note: if this code is reached, the program will abort\"  \"will abort\" { target *-*-* } .-1 }\n+\n+    va_arg!char(_argptr);   // { dg-warning \"'char' is promoted to 'int' when passed through '...'\" \"promoted\" }\n+    // { dg-message \"note: if this code is reached, the program will abort\"  \"will abort\" { target *-*-* } .-1 }\n+\n+    va_arg!wchar(_argptr);   // { dg-warning \"'wchar' is promoted to 'int' when passed through '...'\" \"promoted\" }\n+    // { dg-message \"note: if this code is reached, the program will abort\"  \"will abort\" { target *-*-* } .-1 }\n+\n+    va_arg!dchar(_argptr);   // { dg-warning \"'dchar' is promoted to 'uint' when passed through '...'\" \"promoted\" }\n+    // { dg-message \"note: if this code is reached, the program will abort\"  \"will abort\" { target *-*-* } .-1 }\n+\n+    va_arg!float(_argptr);   // { dg-warning \"'float' is promoted to 'double' when passed through '...'\" \"promoted\" }\n+    // { dg-message \"note: if this code is reached, the program will abort\"  \"will abort\" { target *-*-* } .-1 }\n+\n+    va_arg!ifloat(_argptr);   // { dg-warning \"'ifloat' is promoted to 'idouble' when passed through '...'\" \"promoted\" }\n+    // { dg-message \"note: if this code is reached, the program will abort\"  \"will abort\" { target *-*-* } .-1 }\n+\n+    va_arg!E1(_argptr);   // { dg-warning \"'E1' is promoted to 'int' when passed through '...'\" \"promoted\" }\n+    // { dg-message \"note: if this code is reached, the program will abort\"  \"will abort\" { target *-*-* } .-1 }\n+\n+    va_arg!E2(_argptr);   // { dg-warning \"'E2' is promoted to 'int' when passed through '...'\" \"promoted\" }\n+    // { dg-message \"note: if this code is reached, the program will abort\"  \"will abort\" { target *-*-* } .-1 }\n+\n+    va_arg!E3(_argptr);   // { dg-warning \"'E3' is promoted to 'uint' when passed through '...'\" \"promoted\" }\n+    // { dg-message \"note: if this code is reached, the program will abort\"  \"will abort\" { target *-*-* } .-1 }\n+\n+    va_arg!E4(_argptr);   // { dg-warning \"'E4' is promoted to 'double' when passed through '...'\" \"promoted\" }\n+    // { dg-message \"note: if this code is reached, the program will abort\"  \"will abort\" { target *-*-* } .-1 }\n+}"}]}