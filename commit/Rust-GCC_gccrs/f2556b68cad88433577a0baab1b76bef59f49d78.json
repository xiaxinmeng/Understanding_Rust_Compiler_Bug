{"sha": "f2556b68cad88433577a0baab1b76bef59f49d78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI1NTZiNjhjYWQ4ODQzMzU3N2EwYmFhYjFiNzZiZWY1OWY0OWQ3OA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-02-21T13:18:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-02-21T13:18:54Z"}, "message": "re PR tree-optimization/60276 (-O3 autovectorizer breaks on a particular loop)\n\n2014-02-21  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/60276\n\t* tree-vectorizer.h (struct _stmt_vec_info): Add min_neg_dist field.\n\t(STMT_VINFO_MIN_NEG_DIST): New macro.\n\t* tree-vect-data-refs.c (vect_analyze_data_ref_dependence): Record\n\tSTMT_VINFO_MIN_NEG_DIST.\n\t* tree-vect-stmts.c (vectorizable_load): Verify if assumptions\n\tmade for negative dependence distances still hold.\n\n\t* gcc.dg/vect/pr60276.c: New testcase.\n\nFrom-SVN: r207992", "tree": {"sha": "1e75ea5d008d884d77d7e4d771c8dff421db6753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e75ea5d008d884d77d7e4d771c8dff421db6753"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2556b68cad88433577a0baab1b76bef59f49d78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2556b68cad88433577a0baab1b76bef59f49d78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2556b68cad88433577a0baab1b76bef59f49d78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2556b68cad88433577a0baab1b76bef59f49d78/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "32417082bf9a8f2633e7960f2e45979ebab43e51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32417082bf9a8f2633e7960f2e45979ebab43e51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32417082bf9a8f2633e7960f2e45979ebab43e51"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "d93ac6d37d9db58ce8c44361f8e7b7c62f0b6697", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2556b68cad88433577a0baab1b76bef59f49d78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2556b68cad88433577a0baab1b76bef59f49d78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2556b68cad88433577a0baab1b76bef59f49d78", "patch": "@@ -1,3 +1,13 @@\n+2014-02-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/60276\n+\t* tree-vectorizer.h (struct _stmt_vec_info): Add min_neg_dist field.\n+\t(STMT_VINFO_MIN_NEG_DIST): New macro.\n+\t* tree-vect-data-refs.c (vect_analyze_data_ref_dependence): Record\n+\tSTMT_VINFO_MIN_NEG_DIST.\n+\t* tree-vect-stmts.c (vectorizable_load): Verify if assumptions\n+\tmade for negative dependence distances still hold.\n+\n 2014-02-21  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/60291"}, {"sha": "ef9d0f537974ecf9cd079387f5ff5f6c24080f95", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2556b68cad88433577a0baab1b76bef59f49d78/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2556b68cad88433577a0baab1b76bef59f49d78/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f2556b68cad88433577a0baab1b76bef59f49d78", "patch": "@@ -1,3 +1,8 @@\n+2014-02-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/60276\n+\t* gcc.dg/vect/pr60276.c: New testcase.\n+\n 2014-02-21  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/60234"}, {"sha": "d4ad21980625e440ae60c42c8f3e74b6520ebf53", "filename": "gcc/testsuite/gcc.dg/vect/pr60276.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2556b68cad88433577a0baab1b76bef59f49d78/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60276.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2556b68cad88433577a0baab1b76bef59f49d78/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60276.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60276.c?ref=f2556b68cad88433577a0baab1b76bef59f49d78", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+\n+static void \n+foo (int *out, const int *lp, unsigned samples)\n+{\n+  int x, target;\n+  for (x = 0, target = 0; x < (int)samples; x += 2, target++)\n+    {\n+      out[x] = lp[target];\n+      out[x - 1] = out[x - 2] + out[x];\n+    }\n+}\n+\n+static void \n+foo_novec (int *out, const int *lp, unsigned samples)\n+{\n+  int x, target;\n+  for (x = 0, target = 0; x < (int)samples; x += 2, target++)\n+    {\n+      out[x] = lp[target];\n+      out[x - 1] = out[x - 2] + out[x];\n+      __asm__ volatile (\"\" : : : \"memory\");\n+    }\n+}\n+\n+int main(void)\n+{\n+  const int lp[25] = {\n+      0, 2, 4, 6, 8,\n+      10, 12, 14, 16,\n+      18, 20, 22, 24,\n+      26, 28, 30, 32,\n+      34, 36, 38, 40,\n+      42, 44, 46, 48,\n+  };\n+  int out[49] = {0};\n+  int out2[49] = {0};\n+  int s;\n+\n+  foo (out + 2, lp + 1, 48);\n+  foo_novec (out2 + 2, lp + 1, 48);\n+\n+  for (s = 0; s < 49; s++)\n+    if (out[s] != out2[s])\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "fbc35a3fe3cf7085bdd50db704d9ff02ecd217fb", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2556b68cad88433577a0baab1b76bef59f49d78/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2556b68cad88433577a0baab1b76bef59f49d78/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=f2556b68cad88433577a0baab1b76bef59f49d78", "patch": "@@ -403,6 +403,13 @@ vect_analyze_data_ref_dependence (struct data_dependence_relation *ddr,\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t                     \"dependence distance negative.\\n\");\n+\t  /* Record a negative dependence distance to later limit the\n+\t     amount of stmt copying / unrolling we can perform.\n+\t     Only need to handle read-after-write dependence.  */\n+\t  if (DR_IS_READ (drb)\n+\t      && (STMT_VINFO_MIN_NEG_DIST (stmtinfo_b) == 0\n+\t\t  || STMT_VINFO_MIN_NEG_DIST (stmtinfo_b) > (unsigned)dist))\n+\t    STMT_VINFO_MIN_NEG_DIST (stmtinfo_b) = dist;\n \t  continue;\n \t}\n "}, {"sha": "70fb411f8f5443ab89115be5998da1fb227beb9b", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2556b68cad88433577a0baab1b76bef59f49d78/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2556b68cad88433577a0baab1b76bef59f49d78/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=f2556b68cad88433577a0baab1b76bef59f49d78", "patch": "@@ -5629,6 +5629,20 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n       return false;\n     }\n \n+  /* Invalidate assumptions made by dependence analysis when vectorization\n+     on the unrolled body effectively re-orders stmts.  */\n+  if (ncopies > 1\n+      && STMT_VINFO_MIN_NEG_DIST (stmt_info) != 0\n+      && ((unsigned)LOOP_VINFO_VECT_FACTOR (loop_vinfo)\n+\t  > STMT_VINFO_MIN_NEG_DIST (stmt_info)))\n+    {\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t \"cannot perform implicit CSE when unrolling \"\n+\t\t\t \"with negative dependence distance\\n\");\n+      return false;\n+    }\n+\n   if (!STMT_VINFO_RELEVANT_P (stmt_info) && !bb_vinfo)\n     return false;\n \n@@ -5686,6 +5700,20 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t  else if (!vect_grouped_load_supported (vectype, group_size))\n \t    return false;\n \t}\n+\n+      /* Invalidate assumptions made by dependence analysis when vectorization\n+\t on the unrolled body effectively re-orders stmts.  */\n+      if (!PURE_SLP_STMT (stmt_info)\n+\t  && STMT_VINFO_MIN_NEG_DIST (stmt_info) != 0\n+\t  && ((unsigned)LOOP_VINFO_VECT_FACTOR (loop_vinfo)\n+\t      > STMT_VINFO_MIN_NEG_DIST (stmt_info)))\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t     \"cannot perform implicit CSE when performing \"\n+\t\t\t     \"group loads with negative dependence distance\\n\");\n+\t  return false;\n+\t}\n     }\n \n "}, {"sha": "f8efe471e065f95a03533bec93bd067a7b341414", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2556b68cad88433577a0baab1b76bef59f49d78/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2556b68cad88433577a0baab1b76bef59f49d78/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=f2556b68cad88433577a0baab1b76bef59f49d78", "patch": "@@ -622,6 +622,10 @@ typedef struct _stmt_vec_info {\n      is 1.  */\n   unsigned int gap;\n \n+  /* The minimum negative dependence distance this stmt participates in\n+     or zero if none.  */\n+  unsigned int min_neg_dist;\n+\n   /* Not all stmts in the loop need to be vectorized. e.g, the increment\n      of the loop induction variable and computation of array indexes. relevant\n      indicates whether the stmt needs to be vectorized.  */\n@@ -677,6 +681,7 @@ typedef struct _stmt_vec_info {\n #define STMT_VINFO_GROUP_SAME_DR_STMT(S)   (S)->same_dr_stmt\n #define STMT_VINFO_GROUPED_ACCESS(S)      ((S)->first_element != NULL && (S)->data_ref_info)\n #define STMT_VINFO_LOOP_PHI_EVOLUTION_PART(S) (S)->loop_phi_evolution_part\n+#define STMT_VINFO_MIN_NEG_DIST(S)\t(S)->min_neg_dist\n \n #define GROUP_FIRST_ELEMENT(S)          (S)->first_element\n #define GROUP_NEXT_ELEMENT(S)           (S)->next_element"}]}