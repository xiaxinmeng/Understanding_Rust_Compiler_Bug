{"sha": "da2dda70637ecd42a9ba3fba976a5f280e880852", "node_id": "C_kwDOANBUbNoAKGRhMmRkYTcwNjM3ZWNkNDJhOWJhM2ZiYTk3NmE1ZjI4MGU4ODA4NTI", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-27T16:48:55Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-27T16:48:55Z"}, "message": "refactor away from helper utility methods and just use the constructor directly", "tree": {"sha": "81eb97e6254ec27917d6a5d2181fec1ec0d50c85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81eb97e6254ec27917d6a5d2181fec1ec0d50c85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da2dda70637ecd42a9ba3fba976a5f280e880852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da2dda70637ecd42a9ba3fba976a5f280e880852", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da2dda70637ecd42a9ba3fba976a5f280e880852", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da2dda70637ecd42a9ba3fba976a5f280e880852/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31e63dd6c2b4753d035496b9145e34b7b7d168c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31e63dd6c2b4753d035496b9145e34b7b7d168c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31e63dd6c2b4753d035496b9145e34b7b7d168c0"}], "stats": {"total": 126, "additions": 38, "deletions": 88}, "files": [{"sha": "192ecaf42e65f8fd5478208b0750410d5304758d", "filename": "gcc/rust/resolve/rust-ast-resolve-implitem.h", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da2dda70637ecd42a9ba3fba976a5f280e880852/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da2dda70637ecd42a9ba3fba976a5f280e880852/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h?ref=da2dda70637ecd42a9ba3fba976a5f280e880852", "patch": "@@ -66,7 +66,8 @@ class ResolveToplevelImplItem : public ResolverBase\n \n   void visit (AST::ConstantItem &constant) override\n   {\n-    auto decl = ResolveConstantItemToCanonicalPath::resolve (constant);\n+    auto decl = CanonicalPath::new_seg (constant.get_node_id (),\n+\t\t\t\t\tconstant.get_identifier ());\n     auto path = prefix.append (decl);\n \n     resolver->get_name_scope ().insert (\n@@ -80,7 +81,8 @@ class ResolveToplevelImplItem : public ResolverBase\n \n   void visit (AST::Function &function) override\n   {\n-    auto decl = ResolveFunctionItemToCanonicalPath::resolve (function);\n+    auto decl = CanonicalPath::new_seg (function.get_node_id (),\n+\t\t\t\t\tfunction.get_function_name ());\n     auto path = prefix.append (decl);\n \n     resolver->get_name_scope ().insert (\n@@ -94,7 +96,8 @@ class ResolveToplevelImplItem : public ResolverBase\n \n   void visit (AST::Method &method) override\n   {\n-    auto decl = ResolveMethodItemToCanonicalPath::resolve (method);\n+    auto decl = CanonicalPath::new_seg (method.get_node_id (),\n+\t\t\t\t\tmethod.get_method_name ());\n     auto path = prefix.append (decl);\n \n     resolver->get_name_scope ().insert (\n@@ -130,7 +133,9 @@ class ResolveTopLevelTraitItems : public ResolverBase\n \n   void visit (AST::TraitItemFunc &function) override\n   {\n-    auto decl = ResolveTraitItemFunctionToCanonicalPath::resolve (function);\n+    auto decl = CanonicalPath::new_seg (\n+      function.get_node_id (),\n+      function.get_trait_function_decl ().get_identifier ());\n     auto path = prefix.append (decl);\n     auto cpath = canonical_prefix.append (decl);\n \n@@ -148,7 +153,8 @@ class ResolveTopLevelTraitItems : public ResolverBase\n \n   void visit (AST::TraitItemMethod &method) override\n   {\n-    auto decl = ResolveTraitItemMethodToCanonicalPath::resolve (method);\n+    auto decl = CanonicalPath::new_seg (\n+      method.get_node_id (), method.get_trait_method_decl ().get_identifier ());\n     auto path = prefix.append (decl);\n     auto cpath = canonical_prefix.append (decl);\n \n@@ -166,7 +172,8 @@ class ResolveTopLevelTraitItems : public ResolverBase\n \n   void visit (AST::TraitItemConst &constant) override\n   {\n-    auto decl = ResolveTraitItemConstToCanonicalPath::resolve (constant);\n+    auto decl = CanonicalPath::new_seg (constant.get_node_id (),\n+\t\t\t\t\tconstant.get_identifier ());\n     auto path = prefix.append (decl);\n     auto cpath = canonical_prefix.append (decl);\n \n@@ -184,7 +191,8 @@ class ResolveTopLevelTraitItems : public ResolverBase\n \n   void visit (AST::TraitItemType &type) override\n   {\n-    auto decl = ResolveTraitItemTypeToCanonicalPath::resolve (type);\n+    auto decl\n+      = CanonicalPath::new_seg (type.get_node_id (), type.get_identifier ());\n     auto path = prefix.append (decl);\n     auto cpath = canonical_prefix.append (decl);\n "}, {"sha": "0c9536ff38d7add0eebd7e571d31c18b0bd277fd", "filename": "gcc/rust/resolve/rust-ast-resolve-item.cc", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da2dda70637ecd42a9ba3fba976a5f280e880852/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da2dda70637ecd42a9ba3fba976a5f280e880852/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc?ref=da2dda70637ecd42a9ba3fba976a5f280e880852", "patch": "@@ -42,7 +42,8 @@ ResolveTraitItems::go (AST::TraitItem *item, const CanonicalPath &prefix,\n void\n ResolveTraitItems::visit (AST::TraitItemType &type)\n {\n-  auto decl = ResolveTraitItemTypeToCanonicalPath::resolve (type);\n+  auto decl\n+    = CanonicalPath::new_seg (type.get_node_id (), type.get_identifier ());\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n   mappings->insert_canonical_path (mappings->get_current_crate (),\n@@ -55,7 +56,8 @@ ResolveTraitItems::visit (AST::TraitItemType &type)\n void\n ResolveTraitItems::visit (AST::TraitItemFunc &func)\n {\n-  auto decl = ResolveTraitItemFunctionToCanonicalPath::resolve (func);\n+  auto decl = CanonicalPath::new_seg (\n+    func.get_node_id (), func.get_trait_function_decl ().get_identifier ());\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n   mappings->insert_canonical_path (mappings->get_current_crate (),\n@@ -102,7 +104,9 @@ ResolveTraitItems::visit (AST::TraitItemFunc &func)\n void\n ResolveTraitItems::visit (AST::TraitItemMethod &func)\n {\n-  auto decl = ResolveTraitItemMethodToCanonicalPath::resolve (func);\n+  auto decl\n+    = CanonicalPath::new_seg (func.get_node_id (),\n+\t\t\t      func.get_trait_method_decl ().get_identifier ());\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n   mappings->insert_canonical_path (mappings->get_current_crate (),\n@@ -166,7 +170,8 @@ ResolveTraitItems::visit (AST::TraitItemMethod &func)\n void\n ResolveTraitItems::visit (AST::TraitItemConst &constant)\n {\n-  auto decl = ResolveTraitItemConstToCanonicalPath::resolve (constant);\n+  auto decl = CanonicalPath::new_seg (constant.get_node_id (),\n+\t\t\t\t      constant.get_identifier ());\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n   mappings->insert_canonical_path (mappings->get_current_crate (),\n@@ -486,7 +491,8 @@ ResolveItem::visit (AST::StaticItem &var)\n void\n ResolveItem::visit (AST::ConstantItem &constant)\n {\n-  auto decl = ResolveConstantItemToCanonicalPath::resolve (constant);\n+  auto decl = CanonicalPath::new_seg (constant.get_node_id (),\n+\t\t\t\t      constant.get_identifier ());\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n   mappings->insert_canonical_path (mappings->get_current_crate (),\n@@ -501,7 +507,8 @@ ResolveItem::visit (AST::ConstantItem &constant)\n void\n ResolveItem::visit (AST::Function &function)\n {\n-  auto decl = ResolveFunctionItemToCanonicalPath::resolve (function);\n+  auto decl = CanonicalPath::new_seg (function.get_node_id (),\n+\t\t\t\t      function.get_function_name ());\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n \n@@ -638,7 +645,8 @@ ResolveItem::visit (AST::InherentImpl &impl_block)\n void\n ResolveItem::visit (AST::Method &method)\n {\n-  auto decl = ResolveMethodItemToCanonicalPath::resolve (method);\n+  auto decl\n+    = CanonicalPath::new_seg (method.get_node_id (), method.get_method_name ());\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n   mappings->insert_canonical_path (mappings->get_current_crate (),"}, {"sha": "1d2ecd352070ffdf94498c1265c1f2a946cc6c9d", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da2dda70637ecd42a9ba3fba976a5f280e880852/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da2dda70637ecd42a9ba3fba976a5f280e880852/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=da2dda70637ecd42a9ba3fba976a5f280e880852", "patch": "@@ -56,7 +56,8 @@ class ResolveStmt : public ResolverBase\n \n   void visit (AST::ConstantItem &constant) override\n   {\n-    auto decl = ResolveConstantItemToCanonicalPath::resolve (constant);\n+    auto decl = CanonicalPath::new_seg (constant.get_node_id (),\n+\t\t\t\t\tconstant.get_identifier ());\n     auto path = decl; // this ensures we have the correct relative resolution\n     auto cpath = canonical_prefix.append (decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n@@ -330,7 +331,8 @@ class ResolveStmt : public ResolverBase\n \n   void visit (AST::Function &function) override\n   {\n-    auto decl = ResolveFunctionItemToCanonicalPath::resolve (function);\n+    auto decl = CanonicalPath::new_seg (function.get_node_id (),\n+\t\t\t\t\tfunction.get_function_name ());\n     auto path = decl; // this ensures we have the correct relative resolution\n     auto cpath = canonical_prefix.append (decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),"}, {"sha": "aed8565c8d5251771c017cab7d451647ad486886", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da2dda70637ecd42a9ba3fba976a5f280e880852/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da2dda70637ecd42a9ba3fba976a5f280e880852/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=da2dda70637ecd42a9ba3fba976a5f280e880852", "patch": "@@ -283,7 +283,8 @@ class ResolveTopLevel : public ResolverBase\n \n   void visit (AST::ConstantItem &constant) override\n   {\n-    auto decl = ResolveConstantItemToCanonicalPath::resolve (constant);\n+    auto decl = CanonicalPath::new_seg (constant.get_node_id (),\n+\t\t\t\t\tconstant.get_identifier ());\n     auto path = prefix.append (decl);\n     auto cpath = canonical_prefix.append (decl);\n \n@@ -303,7 +304,8 @@ class ResolveTopLevel : public ResolverBase\n \n   void visit (AST::Function &function) override\n   {\n-    auto decl = ResolveFunctionItemToCanonicalPath::resolve (function);\n+    auto decl = CanonicalPath::new_seg (function.get_node_id (),\n+\t\t\t\t\tfunction.get_function_name ());\n     auto path = prefix.append (decl);\n     auto cpath = canonical_prefix.append (decl);\n "}, {"sha": "b8ad6d1756a2b6666ed4c9b0a90470a3088916ca", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da2dda70637ecd42a9ba3fba976a5f280e880852/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da2dda70637ecd42a9ba3fba976a5f280e880852/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=da2dda70637ecd42a9ba3fba976a5f280e880852", "patch": "@@ -25,76 +25,6 @@\n namespace Rust {\n namespace Resolver {\n \n-class ResolveConstantItemToCanonicalPath\n-{\n-public:\n-  static CanonicalPath resolve (AST::ConstantItem &constant)\n-  {\n-    return CanonicalPath::new_seg (constant.get_node_id (),\n-\t\t\t\t   constant.get_identifier ());\n-  }\n-};\n-\n-class ResolveFunctionItemToCanonicalPath\n-{\n-public:\n-  static CanonicalPath resolve (AST::Function &function)\n-  {\n-    return CanonicalPath::new_seg (function.get_node_id (),\n-\t\t\t\t   function.get_function_name ());\n-  }\n-};\n-\n-class ResolveMethodItemToCanonicalPath\n-{\n-public:\n-  static CanonicalPath resolve (AST::Method &method)\n-  {\n-    return CanonicalPath::new_seg (method.get_node_id (),\n-\t\t\t\t   method.get_method_name ());\n-  }\n-};\n-\n-class ResolveTraitItemFunctionToCanonicalPath\n-{\n-public:\n-  static CanonicalPath resolve (AST::TraitItemFunc &function)\n-  {\n-    return CanonicalPath::new_seg (\n-      function.get_node_id (),\n-      function.get_trait_function_decl ().get_identifier ());\n-  }\n-};\n-\n-class ResolveTraitItemMethodToCanonicalPath\n-{\n-public:\n-  static CanonicalPath resolve (AST::TraitItemMethod &method)\n-  {\n-    return CanonicalPath::new_seg (\n-      method.get_node_id (), method.get_trait_method_decl ().get_identifier ());\n-  }\n-};\n-\n-class ResolveTraitItemConstToCanonicalPath\n-{\n-public:\n-  static CanonicalPath resolve (AST::TraitItemConst &constant)\n-  {\n-    return CanonicalPath::new_seg (constant.get_node_id (),\n-\t\t\t\t   constant.get_identifier ());\n-  }\n-};\n-\n-class ResolveTraitItemTypeToCanonicalPath\n-{\n-public:\n-  static CanonicalPath resolve (AST::TraitItemType &type)\n-  {\n-    return CanonicalPath::new_seg (type.get_node_id (), type.get_identifier ());\n-  }\n-};\n-\n class ResolveTypeToCanonicalPath : public ResolverBase\n {\n protected:"}]}