{"sha": "407028931a0d0729690c646579fe282eff66aa16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA3MDI4OTMxYTBkMDcyOTY5MGM2NDY1NzlmZTI4MmVmZjY2YWExNg==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2015-01-31T19:45:53Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2015-01-31T19:45:53Z"}, "message": "linux-atomic.c (__kernel_cmpxchg2): Change declaration of oldval and newval to const void *.\n\n\t* config/pa/linux-atomic.c (__kernel_cmpxchg2): Change declaration of\n\toldval and newval to const void *.  Fix typo.\n\t(FETCH_AND_OP_2): Use __atomic_load_n to load value.\n\t(FETCH_AND_OP_WORD): Likewise.\n\t(OP_AND_FETCH_WORD): Likewise.\n\t(COMPARE_AND_SWAP_2): Likewise.\n\t(__sync_val_compare_and_swap_4): Likewise.\n\t(__sync_lock_test_and_set_4): Likewise.\n\t(SYNC_LOCK_RELEASE_2): Likewise.\n\tRemove support for long long atomic operations.\n\nFrom-SVN: r220307", "tree": {"sha": "cb7e3577c06aace666321ec6931174a233afae3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb7e3577c06aace666321ec6931174a233afae3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/407028931a0d0729690c646579fe282eff66aa16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/407028931a0d0729690c646579fe282eff66aa16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/407028931a0d0729690c646579fe282eff66aa16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/407028931a0d0729690c646579fe282eff66aa16/comments", "author": null, "committer": null, "parents": [{"sha": "0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d9a5f8adcbb8ce4cd89a15b98daf77205c5eac5"}], "stats": {"total": 55, "additions": 26, "deletions": 29}, "files": [{"sha": "8d7a6b02d8ebcf3e42eaeb4c4abd46837a7578a1", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407028931a0d0729690c646579fe282eff66aa16/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407028931a0d0729690c646579fe282eff66aa16/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=407028931a0d0729690c646579fe282eff66aa16", "patch": "@@ -1,3 +1,16 @@\n+2015-01-31  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/linux-atomic.c (__kernel_cmpxchg2): Change declaration of\n+\toldval and newval to const void *.  Fix typo.\n+\t(FETCH_AND_OP_2): Use __atomic_load_n to load value.\n+\t(FETCH_AND_OP_WORD): Likewise.\n+\t(OP_AND_FETCH_WORD): Likewise.\n+\t(COMPARE_AND_SWAP_2): Likewise.\n+\t(__sync_val_compare_and_swap_4): Likewise.\n+\t(__sync_lock_test_and_set_4): Likewise.\n+\t(SYNC_LOCK_RELEASE_2): Likewise.\n+\tRemove support for long long atomic operations.\n+\n 2015-01-27  Caroline Tice  <cmtice@google.com>\n \n \tCommitting VTV Cywin/Ming patch for Patrick Wollgast"}, {"sha": "5d99071fee93e576ebf6a29bc0c2e0a0a0041935", "filename": "libgcc/config/pa/linux-atomic.c", "status": "modified", "additions": 13, "deletions": 29, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407028931a0d0729690c646579fe282eff66aa16/libgcc%2Fconfig%2Fpa%2Flinux-atomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407028931a0d0729690c646579fe282eff66aa16/libgcc%2Fconfig%2Fpa%2Flinux-atomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Flinux-atomic.c?ref=407028931a0d0729690c646579fe282eff66aa16", "patch": "@@ -73,7 +73,8 @@ __kernel_cmpxchg (int oldval, int newval, int *mem)\n }\n \n static inline long\n-__kernel_cmpxchg2 (void * oldval, void * newval, void *mem, int val_size)\n+__kernel_cmpxchg2 (const void *oldval, const void *newval, void *mem,\n+\t\t   int val_size)\n {\n   register unsigned long lws_mem asm(\"r26\") = (unsigned long) (mem);\n   register long lws_ret   asm(\"r28\");\n@@ -90,7 +91,7 @@ __kernel_cmpxchg2 (void * oldval, void * newval, void *mem, int val_size)\n   if (__builtin_expect (lws_errno == -EFAULT || lws_errno == -ENOSYS, 0))\n     __builtin_trap ();\n \n-  /* If the kernel LWS call fails, retrun EBUSY */\n+  /* If the kernel LWS call fails, return EBUSY */\n   if (!lws_errno && lws_ret)\n     lws_errno = -EBUSY;\n \n@@ -113,21 +114,14 @@ __kernel_cmpxchg2 (void * oldval, void * newval, void *mem, int val_size)\n     int failure;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n-      tmp = *ptr;\t\t\t\t\t\t\t\\\n+      tmp = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\t\t\t\\\n       newval = PFX_OP (tmp INF_OP val);\t\t\t\t\t\\\n       failure = __kernel_cmpxchg2 (&tmp, &newval, ptr, INDEX);\t\t\\\n     } while (failure != 0);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     return tmp;\t\t\t\t\t\t\t\t\\\n   }\n \n-FETCH_AND_OP_2 (add,   , +, long long, 8, 3)\n-FETCH_AND_OP_2 (sub,   , -, long long, 8, 3)\n-FETCH_AND_OP_2 (or,    , |, long long, 8, 3)\n-FETCH_AND_OP_2 (and,   , &, long long, 8, 3)\n-FETCH_AND_OP_2 (xor,   , ^, long long, 8, 3)\n-FETCH_AND_OP_2 (nand, ~, &, long long, 8, 3)\n-\n FETCH_AND_OP_2 (add,   , +, short, 2, 1)\n FETCH_AND_OP_2 (sub,   , -, short, 2, 1)\n FETCH_AND_OP_2 (or,    , |, short, 2, 1)\n@@ -150,21 +144,14 @@ FETCH_AND_OP_2 (nand, ~, &, signed char, 1, 0)\n     int failure;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n-      tmp = *ptr;\t\t\t\t\t\t\t\\\n+      tmp = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\t\t\t\\\n       newval = PFX_OP (tmp INF_OP val);\t\t\t\t\t\\\n       failure = __kernel_cmpxchg2 (&tmp, &newval, ptr, INDEX);\t\t\\\n     } while (failure != 0);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     return PFX_OP (tmp INF_OP val);\t\t\t\t\t\\\n   }\n \n-OP_AND_FETCH_2 (add,   , +, long long, 8, 3)\n-OP_AND_FETCH_2 (sub,   , -, long long, 8, 3)\n-OP_AND_FETCH_2 (or,    , |, long long, 8, 3)\n-OP_AND_FETCH_2 (and,   , &, long long, 8, 3)\n-OP_AND_FETCH_2 (xor,   , ^, long long, 8, 3)\n-OP_AND_FETCH_2 (nand, ~, &, long long, 8, 3)\n-\n OP_AND_FETCH_2 (add,   , +, short, 2, 1)\n OP_AND_FETCH_2 (sub,   , -, short, 2, 1)\n OP_AND_FETCH_2 (or,    , |, short, 2, 1)\n@@ -186,7 +173,7 @@ OP_AND_FETCH_2 (nand, ~, &, signed char, 1, 0)\n     int failure, tmp;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n-      tmp = *ptr;\t\t\t\t\t\t\t\\\n+      tmp = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\t\t\t\\\n       failure = __kernel_cmpxchg (tmp, PFX_OP (tmp INF_OP val), ptr);\t\\\n     } while (failure != 0);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n@@ -207,7 +194,7 @@ FETCH_AND_OP_WORD (nand, ~, &)\n     int tmp, failure;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n-      tmp = *ptr;\t\t\t\t\t\t\t\\\n+      tmp = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\t\t\t\\\n       failure = __kernel_cmpxchg (tmp, PFX_OP (tmp INF_OP val), ptr);\t\\\n     } while (failure != 0);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n@@ -233,7 +220,7 @@ typedef unsigned char bool;\n \t\t\t\t\t\t\t\t\t\\\n     while (1)\t\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\tactual_oldval = *ptr;\t\t\t\t\t\t\\\n+\tactual_oldval = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tif (__builtin_expect (oldval != actual_oldval, 0))\t\t\\\n \t  return actual_oldval;\t\t\t\t\t\t\\\n@@ -242,7 +229,7 @@ typedef unsigned char bool;\n \t\t\t\t\t\t\t\t\t\\\n \tif (__builtin_expect (!fail, 1))\t\t\t\t\\\n \t  return actual_oldval;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   bool HIDDEN\t\t\t\t\t\t\t\t\\\n@@ -253,7 +240,6 @@ typedef unsigned char bool;\n     return (failure != 0);\t\t\t\t\t\t\\\n   }\n \n-COMPARE_AND_SWAP_2 (long long, 8, 3)\n COMPARE_AND_SWAP_2 (short, 2, 1)\n COMPARE_AND_SWAP_2 (char, 1, 0)\n \n@@ -264,7 +250,7 @@ __sync_val_compare_and_swap_4 (int *ptr, int oldval, int newval)\n     \n   while (1)\n     {\n-      actual_oldval = *ptr;\n+      actual_oldval = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\n \n       if (__builtin_expect (oldval != actual_oldval, 0))\n \treturn actual_oldval;\n@@ -291,14 +277,13 @@ TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n     int failure;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n-      oldval = *ptr;\t\t\t\t\t\t\t\\\n+      oldval = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\t\t\t\\\n       failure = __kernel_cmpxchg2 (&oldval, &val, ptr, INDEX);\t\t\\\n     } while (failure != 0);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     return oldval;\t\t\t\t\t\t\t\\\n   }\n \n-SYNC_LOCK_TEST_AND_SET_2 (long long, 8, 3)\n SYNC_LOCK_TEST_AND_SET_2 (short, 2, 1)\n SYNC_LOCK_TEST_AND_SET_2 (signed char, 1, 0)\n \n@@ -308,7 +293,7 @@ __sync_lock_test_and_set_4 (int *ptr, int val)\n   int failure, oldval;\n \n   do {\n-    oldval = *ptr;\n+    oldval = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\n     failure = __kernel_cmpxchg (oldval, val, ptr);\n   } while (failure != 0);\n \n@@ -322,12 +307,11 @@ __sync_lock_test_and_set_4 (int *ptr, int val)\n     TYPE failure, oldval, zero = 0;\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\\\n-      oldval = *ptr;\t\t\t\t\t\t\\\n+      oldval = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\t\t\\\n       failure = __kernel_cmpxchg2 (&oldval, &zero, ptr, INDEX);\t\\\n     } while (failure != 0);\t\t\t\t\t\\\n   }\n \n-SYNC_LOCK_RELEASE_2 (long long, 8, 3)\n SYNC_LOCK_RELEASE_2 (short, 2, 1)\n SYNC_LOCK_RELEASE_2 (signed char, 1, 0)\n "}]}