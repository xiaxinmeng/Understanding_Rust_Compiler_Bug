{"sha": "50e9ed7c6c75bae523aa32887b8f91b06070901d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBlOWVkN2M2Yzc1YmFlNTIzYWEzMjg4N2I4ZjkxYjA2MDcwOTAxZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-10-20T16:24:18Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-10-20T16:24:18Z"}, "message": "basic_string.h (_S_construct(const _CharT*, size_type, const _Alloc&)): New, declare.\n\n2009-10-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/basic_string.h (_S_construct(const _CharT*, size_type,\n\tconst _Alloc&)): New, declare.\n\t(_S_construct(_CharT*, _CharT*, const _Alloc&),\n\t_S_construct(const _CharT*, const _CharT*, const _Alloc&),\n\t_S_construct(iterator, iterator, const _Alloc&),\n\t_S_construct(const_iterator, const_iterator, const _Alloc&)): New,\n\tforward to the latter.\n\t* include/bits/basic_string.tcc (_S_construct(const _CharT*,\n\tsize_type, const _Alloc&)): Define.\n\t(basic_string(const basic_string&, size_type, size_type),\n\tbasic_string(const basic_string&, size_type, size_type,\n\tconst _Alloc&), basic_string(const _CharT*, size_type,\n\tconst _Alloc&), basic_string(const _CharT*, const _Alloc&),\n\tbasic_string(initializer_list<>, const _Alloc&)): Call the latter.\n\t* config/abi/pre/gnu.ver: Remove recently added exports.\n\t* src/string-inst.cc: Remove instantiations.\n\nFrom-SVN: r153023", "tree": {"sha": "b99a859bfc08400bc5dd8f0b4f2793ab1dd171d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b99a859bfc08400bc5dd8f0b4f2793ab1dd171d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50e9ed7c6c75bae523aa32887b8f91b06070901d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50e9ed7c6c75bae523aa32887b8f91b06070901d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50e9ed7c6c75bae523aa32887b8f91b06070901d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50e9ed7c6c75bae523aa32887b8f91b06070901d/comments", "author": null, "committer": null, "parents": [{"sha": "1578e91079162f7ff008520487623968fc0db687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1578e91079162f7ff008520487623968fc0db687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1578e91079162f7ff008520487623968fc0db687"}], "stats": {"total": 143, "additions": 97, "deletions": 46}, "files": [{"sha": "d23a3cedd1955c8753f35542f83f8f79df4aa8e6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e9ed7c6c75bae523aa32887b8f91b06070901d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e9ed7c6c75bae523aa32887b8f91b06070901d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=50e9ed7c6c75bae523aa32887b8f91b06070901d", "patch": "@@ -1,3 +1,22 @@\n+2009-10-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/basic_string.h (_S_construct(const _CharT*, size_type,\n+\tconst _Alloc&)): New, declare.\n+\t(_S_construct(_CharT*, _CharT*, const _Alloc&),\n+\t_S_construct(const _CharT*, const _CharT*, const _Alloc&),\n+\t_S_construct(iterator, iterator, const _Alloc&),\n+\t_S_construct(const_iterator, const_iterator, const _Alloc&)): New,\n+\tforward to the latter.\n+\t* include/bits/basic_string.tcc (_S_construct(const _CharT*,\n+\tsize_type, const _Alloc&)): Define.\n+\t(basic_string(const basic_string&, size_type, size_type),\n+\tbasic_string(const basic_string&, size_type, size_type,\n+\tconst _Alloc&), basic_string(const _CharT*, size_type,\n+\tconst _Alloc&), basic_string(const _CharT*, const _Alloc&),\n+\tbasic_string(initializer_list<>, const _Alloc&)): Call the latter.\n+\t* config/abi/pre/gnu.ver: Remove recently added exports.\n+\t* src/string-inst.cc: Remove instantiations.\n+\n 2009-10-15  Phil Muldoon <pmuldoon@redhat.com>\n \n \t* python/libstdcxx/v6/printers.py (StdTuplePrinter): New printer."}, {"sha": "bad07588b82c969e1850218bd728416c2cfadcf8", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e9ed7c6c75bae523aa32887b8f91b06070901d/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e9ed7c6c75bae523aa32887b8f91b06070901d/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=50e9ed7c6c75bae523aa32887b8f91b06070901d", "patch": "@@ -1039,10 +1039,6 @@ GLIBCXX_3.4.14 {\n     _ZNKSbIwSt11char_traitsIwESaIwEE7crbeginEv;\n     _ZNKSbIwSt11char_traitsIwESaIwEE5crendEv;\n \n-    # string|wstring ::_S_construct<> helpers\n-    _ZNSs12_S_constructI*;\n-    _ZNSbIwSt11char_traitsIwESaIwEE12_S_constructI*;\n-\n } GLIBCXX_3.4.13;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "5ef6f007f401261a64ee04a5e2ce0095514e3b27", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 41, "deletions": 13, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e9ed7c6c75bae523aa32887b8f91b06070901d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e9ed7c6c75bae523aa32887b8f91b06070901d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=50e9ed7c6c75bae523aa32887b8f91b06070901d", "patch": "@@ -419,8 +419,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       /**\n        *  @brief  Default constructor creates an empty string.\n        */\n-      inline\n-      basic_string();\n+      basic_string()\n+#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n+      : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc())\n+#else\n+      : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc())\n+#endif\n+      { }\n \n       /**\n        *  @brief  Construct an empty string using allocator @a a.\n@@ -1546,8 +1551,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  max_size(), length_error is thrown.  The value of the string doesn't\n        *  change if an error is thrown.\n       */\n-      basic_string& replace(iterator __i1, iterator __i2,\n-\t\t\t    initializer_list<_CharT> __l)\n+      basic_string&\n+      replace(iterator __i1, iterator __i2, initializer_list<_CharT> __l)\n       { return this->replace(__i1, __i2, __l.begin(), __l.end()); }\n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n@@ -1598,6 +1603,35 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  return _S_construct_aux(__beg, __end, __a, _Integral());\n         }\n \n+      static _CharT*\n+      _S_construct(_CharT* __beg, _CharT* __end, const _Alloc& __a)\n+      {\n+\t__glibcxx_requires_valid_range(__beg, __end);\n+\treturn _S_construct(__beg, __end - __beg, __a);\n+      }\n+\n+      static _CharT*\n+      _S_construct(const _CharT* __beg, const _CharT* __end, const _Alloc& __a)\n+      {\n+\t__glibcxx_requires_valid_range(__beg, __end);\n+\treturn _S_construct(__beg, __end - __beg, __a);\n+      }\n+\n+      static _CharT*\n+      _S_construct(iterator __beg, iterator __end, const _Alloc& __a)\n+      {\n+\t__glibcxx_requires_valid_range(__beg, __end);\n+\treturn _S_construct(__beg.base(), __end - __beg, __a);\n+      }\n+\n+      static _CharT*\n+      _S_construct(const_iterator __beg, const_iterator __end,\n+\t\t   const _Alloc& __a)\n+      {\n+\t__glibcxx_requires_valid_range(__beg, __end);\n+\treturn _S_construct(__beg.base(), __end - __beg, __a);\n+      }\n+\n       // For Input Iterators, used in istreambuf_iterators, etc.\n       template<class _InIterator>\n         static _CharT*\n@@ -1614,6 +1648,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       static _CharT*\n       _S_construct(size_type __req, _CharT __c, const _Alloc& __a);\n \n+      static _CharT*\n+      _S_construct(const _CharT* __s, size_type __n, const _Alloc& __a);\n+\n     public:\n \n       /**\n@@ -2179,15 +2216,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      size_type __n2) const;\n   };\n \n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    inline basic_string<_CharT, _Traits, _Alloc>::\n-    basic_string()\n-#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n-    : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }\n-#else\n-    : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc()) { }\n-#endif\n-\n   // operator+\n   /**\n    *  @brief  Concatenate two strings."}, {"sha": "1824eb7b6c06c9397298d7806e0619880c2cfefb", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e9ed7c6c75bae523aa32887b8f91b06070901d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e9ed7c6c75bae523aa32887b8f91b06070901d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=50e9ed7c6c75bae523aa32887b8f91b06070901d", "patch": "@@ -118,10 +118,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    template <typename _InIterator>\n+    template <typename _FwdIterator>\n       _CharT*\n       basic_string<_CharT, _Traits, _Alloc>::\n-      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n+      _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,\n \t\t   forward_iterator_tag)\n       {\n #ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n@@ -165,6 +165,28 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __r->_M_refdata();\n     }\n \n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    _CharT*\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    _S_construct(const _CharT* __s, size_type __n, const _Alloc& __a)\n+    {\n+#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n+      if (__n == 0 && __a == _Alloc())\n+\treturn _S_empty_rep()._M_refdata();\n+#endif\n+      // NB: Not required, but considered best practice.\n+      if (__gnu_cxx::__is_null_pointer(__s) && __n)\n+\t__throw_logic_error(__N(\"basic_string::_S_construct NULL not valid\"));\n+\n+      // Check for out_of_range and length_error exceptions.\n+      _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);\n+      if (__n)\n+\t_M_copy(__r->_M_refdata(), __s, __n);\n+\n+      __r->_M_set_length_and_sharable(__n);\n+      return __r->_M_refdata();\n+    }\n+\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>::\n     basic_string(const basic_string& __str)\n@@ -185,8 +207,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     : _M_dataplus(_S_construct(__str._M_data()\n \t\t\t       + __str._M_check(__pos,\n \t\t\t\t\t\t\"basic_string::basic_string\"),\n-\t\t\t       __str._M_data() + __str._M_limit(__pos, __n)\n-\t\t\t       + __pos, _Alloc()), _Alloc())\n+\t\t\t       __str._M_limit(__pos, __n), _Alloc()), _Alloc())\n     { }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -196,23 +217,22 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     : _M_dataplus(_S_construct(__str._M_data()\n \t\t\t       + __str._M_check(__pos,\n \t\t\t\t\t\t\"basic_string::basic_string\"),\n-\t\t\t       __str._M_data() + __str._M_limit(__pos, __n)\n-\t\t\t       + __pos, __a), __a)\n+\t\t\t       __str._M_limit(__pos, __n), __a), __a)\n     { }\n \n   // TBD: DPG annotate\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>::\n     basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)\n-    : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)\n+    : _M_dataplus(_S_construct(__s, __n, __a), __a)\n     { }\n \n   // TBD: DPG annotate\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>::\n     basic_string(const _CharT* __s, const _Alloc& __a)\n-    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) :\n-\t\t\t       __s + npos, __a), __a)\n+    : _M_dataplus(_S_construct(__s, __s ? traits_type::length(__s) : npos,\n+\t\t\t       __a), __a)\n     { }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -224,16 +244,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // TBD: DPG annotate\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     template<typename _InputIterator>\n-    basic_string<_CharT, _Traits, _Alloc>::\n-    basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)\n-    : _M_dataplus(_S_construct(__beg, __end, __a), __a)\n-    { }\n+      basic_string<_CharT, _Traits, _Alloc>::\n+      basic_string(_InputIterator __beg, _InputIterator __end,\n+\t\t   const _Alloc& __a)\n+      : _M_dataplus(_S_construct(__beg, __end, __a), __a)\n+      { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>::\n     basic_string(initializer_list<_CharT> __l, const _Alloc& __a)\n-    : _M_dataplus(_S_construct(__l.begin(), __l.end(), __a), __a)\n+    : _M_dataplus(_S_construct(__l.begin(), __l.size(), __a), __a)\n     { }\n #endif\n "}, {"sha": "eacebfb8e21068e70f9f664468ffedf238f1cc2d", "filename": "libstdc++-v3/src/string-inst.cc", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e9ed7c6c75bae523aa32887b8f91b06070901d/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e9ed7c6c75bae523aa32887b8f91b06070901d/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc?ref=50e9ed7c6c75bae523aa32887b8f91b06070901d", "patch": "@@ -1,6 +1,7 @@\n // Components for manipulating sequences of characters -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 2009, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 1997, 1998, 2009, 1999, 2000, 2001, 2002, 2003, 2004,\n+// 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -58,20 +59,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template \n     S::basic_string(S::iterator, S::iterator, const allocator<C>&);\n \n-  template \n-    C* \n-    S::_S_construct(S::iterator, S::iterator, \n-\t\t    const allocator<C>&, forward_iterator_tag);\n-\n-  template\n-    C*\n-    S::_S_construct(C*, C*, const allocator<C>&, forward_iterator_tag);\n-\n-  template\n-    C*\n-    S::_S_construct(const C*, const C*, const allocator<C>&,\n-\t\t    forward_iterator_tag);\n-\n _GLIBCXX_END_NAMESPACE\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)"}]}