{"sha": "cdcec2f8505ea12c2236cf0184d77dd2f5de4832", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RjZWMyZjg1MDVlYTEyYzIyMzZjZjAxODRkNzdkZDJmNWRlNDgzMg==", "commit": {"author": {"name": "Marcel Vollweiler", "email": "marcel@codesourcery.com", "date": "2021-05-20T15:52:34Z"}, "committer": {"name": "Marcel Vollweiler", "email": "marcel@codesourcery.com", "date": "2021-05-20T15:54:18Z"}, "message": "Fortran/OpenMP: Add support for 'close' in map clause\n\ngcc/fortran/ChangeLog:\n\n\t* openmp.c (gfc_match_omp_clauses): Support map-type-modifier 'close'.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/gomp/map-6.f90: New test.\n\t* gfortran.dg/gomp/map-7.f90: New test.\n\t* gfortran.dg/gomp/map-8.f90: New test.", "tree": {"sha": "7328b403b08d07d88da3f96823dec27508992c8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7328b403b08d07d88da3f96823dec27508992c8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdcec2f8505ea12c2236cf0184d77dd2f5de4832", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdcec2f8505ea12c2236cf0184d77dd2f5de4832", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdcec2f8505ea12c2236cf0184d77dd2f5de4832", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdcec2f8505ea12c2236cf0184d77dd2f5de4832/comments", "author": null, "committer": null, "parents": [{"sha": "325bb080259d3a00c5f5a7378872f78a2b889dfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/325bb080259d3a00c5f5a7378872f78a2b889dfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/325bb080259d3a00c5f5a7378872f78a2b889dfb"}], "stats": {"total": 165, "additions": 155, "deletions": 10}, "files": [{"sha": "cf4d7baafff1b9cc585c736880b6c10bf964c9cf", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcec2f8505ea12c2236cf0184d77dd2f5de4832/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcec2f8505ea12c2236cf0184d77dd2f5de4832/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=cdcec2f8505ea12c2236cf0184d77dd2f5de4832", "patch": "@@ -1710,27 +1710,62 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t      && gfc_match (\"map ( \") == MATCH_YES)\n \t    {\n \t      locus old_loc2 = gfc_current_locus;\n-\t      bool always = false;\n+\t      int always_modifier = 0;\n+\t      int close_modifier = 0;\n+\t      locus second_always_locus = old_loc2;\n+\t      locus second_close_locus = old_loc2;\n+\n+\t      for (;;)\n+\t\t{\n+\t\t  locus current_locus = gfc_current_locus;\n+\t\t  if (gfc_match (\"always \") == MATCH_YES)\n+\t\t    {\n+\t\t      if (always_modifier++ == 1)\n+\t\t\tsecond_always_locus = current_locus;\n+\t\t    }\n+\t\t  else if (gfc_match (\"close \") == MATCH_YES)\n+\t\t    {\n+\t\t      if (close_modifier++ == 1)\n+\t\t\tsecond_close_locus = current_locus;\n+\t\t    }\n+\t\t  else\n+\t\t    break;\n+\t\t  gfc_match (\", \");\n+\t\t}\n+\n \t      gfc_omp_map_op map_op = OMP_MAP_TOFROM;\n-\t      if (gfc_match (\"always , \") == MATCH_YES)\n-\t\talways = true;\n \t      if (gfc_match (\"alloc : \") == MATCH_YES)\n \t\tmap_op = OMP_MAP_ALLOC;\n \t      else if (gfc_match (\"tofrom : \") == MATCH_YES)\n-\t\tmap_op = always ? OMP_MAP_ALWAYS_TOFROM : OMP_MAP_TOFROM;\n+\t\tmap_op = always_modifier ? OMP_MAP_ALWAYS_TOFROM : OMP_MAP_TOFROM;\n \t      else if (gfc_match (\"to : \") == MATCH_YES)\n-\t\tmap_op = always ? OMP_MAP_ALWAYS_TO : OMP_MAP_TO;\n+\t\tmap_op = always_modifier ? OMP_MAP_ALWAYS_TO : OMP_MAP_TO;\n \t      else if (gfc_match (\"from : \") == MATCH_YES)\n-\t\tmap_op = always ? OMP_MAP_ALWAYS_FROM : OMP_MAP_FROM;\n+\t\tmap_op = always_modifier ? OMP_MAP_ALWAYS_FROM : OMP_MAP_FROM;\n \t      else if (gfc_match (\"release : \") == MATCH_YES)\n \t\tmap_op = OMP_MAP_RELEASE;\n \t      else if (gfc_match (\"delete : \") == MATCH_YES)\n \t\tmap_op = OMP_MAP_DELETE;\n-\t      else if (always)\n+\t      else\n \t\t{\n \t\t  gfc_current_locus = old_loc2;\n-\t\t  always = false;\n+\t\t  always_modifier = 0;\n+\t\t  close_modifier = 0;\n \t\t}\n+\n+\t      if (always_modifier > 1)\n+\t\t{\n+\t\t  gfc_error (\"too many %<always%> modifiers at %L\",\n+\t\t\t     &second_always_locus);\n+\t\t  break;\n+\t\t}\n+\t      if (close_modifier > 1)\n+\t\t{\n+\t\t  gfc_error (\"too many %<close%> modifiers at %L\",\n+\t\t\t     &second_close_locus);\n+\t\t  break;\n+\t\t}\n+\n \t      head = NULL;\n \t      if (gfc_match_omp_variable_list (\"\", &c->lists[OMP_LIST_MAP],\n \t\t\t\t\t       false, NULL, &head,\n@@ -1741,8 +1776,8 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t    n->u.map_op = map_op;\n \t\t  continue;\n \t\t}\n-\t      else\n-\t\tgfc_current_locus = old_loc;\n+\t      gfc_current_locus = old_loc;\n+\t      break;\n \t    }\n \t  if ((mask & OMP_CLAUSE_MERGEABLE) && !c->mergeable\n \t      && gfc_match (\"mergeable\") == MATCH_YES)"}, {"sha": "309f84543335635f931eeb68b1499a772c0a0b11", "filename": "gcc/testsuite/gfortran.dg/gomp/map-6.f90", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcec2f8505ea12c2236cf0184d77dd2f5de4832/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmap-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcec2f8505ea12c2236cf0184d77dd2f5de4832/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmap-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmap-6.f90?ref=cdcec2f8505ea12c2236cf0184d77dd2f5de4832", "patch": "@@ -0,0 +1,50 @@\n+! { dg-additional-options \"-fdump-tree-original\" }\n+\n+implicit none\n+\n+integer :: a, b, b1, b2, b3, b4, b5, b6\n+\n+!$omp target map(a)\n+!$omp end target\n+\n+!$omp target map(to : a)\n+!$omp end target\n+\n+!$omp target map(always to: a)\n+!$omp end target\n+!$omp target map(always, to: a)\n+!$omp end target\n+!$omp target map(close to: a)\n+!$omp end target\n+!$omp target map(close, to: a)\n+!$omp end target\n+\n+!$omp target map(close always to:b1)\n+!$omp end target\n+!$omp target map(close, always to:b2)\n+!$omp end target\n+!$omp target map(close, always, to:b3)\n+!$omp end target\n+!$omp target map(always close to:b4)\n+!$omp end target\n+!$omp target map(always, close to:b5)\n+!$omp end target\n+!$omp target map(always, close, to:b6)\n+!$omp end target\n+\n+\n+!$omp target map (always to : a) map (close to : b)\n+!$omp end target\n+\n+end\n+\n+! { dg-final { scan-tree-dump-not \"map\\\\(\\[^\\n\\r)]*close\\[^\\n\\r)]*to:\" \"original\" } }\n+\n+! { dg-final { scan-tree-dump-times \"#pragma omp target map\\\\(always,to:\" 9 \"original\" } }\n+\n+! { dg-final { scan-tree-dump \"#pragma omp target map\\\\(always,to:b1\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"#pragma omp target map\\\\(always,to:b2\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"#pragma omp target map\\\\(always,to:b3\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"#pragma omp target map\\\\(always,to:b4\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"#pragma omp target map\\\\(always,to:b5\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"#pragma omp target map\\\\(always,to:b6\\\\)\" \"original\" } }"}, {"sha": "009c6d495472b6c3daf5dab833c2c0f218a0e50c", "filename": "gcc/testsuite/gfortran.dg/gomp/map-7.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcec2f8505ea12c2236cf0184d77dd2f5de4832/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmap-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcec2f8505ea12c2236cf0184d77dd2f5de4832/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmap-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmap-7.f90?ref=cdcec2f8505ea12c2236cf0184d77dd2f5de4832", "patch": "@@ -0,0 +1,26 @@\n+! { dg-additional-options \"-fdump-tree-original\" }\n+\n+implicit none\n+\n+integer :: a, b, close, always, to\n+\n+!$omp target map(close)\n+!$omp end target\n+\n+!$omp target map(always)\n+!$omp end target\n+\n+!$omp target map(always, close)\n+!$omp end target\n+\n+!$omp target map(always, close, to : always, close, a)\n+!$omp end target\n+\n+!$omp target map(to, always, close)\n+!$omp end target\n+\n+end\n+\n+! { dg-final { scan-tree-dump-not \"map\\\\(\\[^\\n\\r)]*close\\[^\\n\\r)]*to:\" \"original\" } }\n+! { dg-final { scan-tree-dump \"#pragma omp target map\\\\(always,to:always\\\\) map\\\\(always,to:close\\\\) map\\\\(always,to:a\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump-not \"map\\\\(\\[^\\n\\r)]*close\\[^\\n\\r)]*to:\" \"original\" } }"}, {"sha": "92b802c67ed004a7d0db5a6f74edc92a46a1f5fa", "filename": "gcc/testsuite/gfortran.dg/gomp/map-8.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcec2f8505ea12c2236cf0184d77dd2f5de4832/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmap-8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcec2f8505ea12c2236cf0184d77dd2f5de4832/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmap-8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmap-8.f90?ref=cdcec2f8505ea12c2236cf0184d77dd2f5de4832", "patch": "@@ -0,0 +1,34 @@\n+implicit none\n+\n+integer :: a\n+\n+!$omp target map(close, delete: a) ! { dg-error \"TARGET with map-type other than TO, FROM, TOFROM, or ALLOC on MAP clause at \\\\(1\\\\)\" }\n+!$omp end target\n+\n+!$omp target map(close) ! { dg-error \"Symbol 'close' at \\\\(1\\\\) has no IMPLICIT type\" }\n+!$omp end target\n+\n+!$omp target map(always) ! { dg-error \"Symbol 'always' at \\\\(1\\\\) has no IMPLICIT type\" }\n+!$omp end target\n+\n+!$omp target map(always, always, to : a) ! { dg-error \"too many 'always' modifiers\" }\n+! !$omp end target\n+!$omp target map(always always, to : a) ! { dg-error \"too many 'always' modifiers\" }\n+! !$omp end target\n+!$omp target map(always, always to : a) ! { dg-error \"too many 'always' modifiers\" }\n+! !$omp end target\n+!$omp target map(always always to : a) ! { dg-error \"too many 'always' modifiers\" }\n+! !$omp end target\n+!$omp target map(close, close, to : a) ! { dg-error \"too many 'close' modifiers\" }\n+! !$omp end target\n+!$omp target map(close close, to : a) ! { dg-error \"too many 'close' modifiers\" }\n+! !$omp end target\n+!$omp target map(close, close to : a) ! { dg-error \"too many 'close' modifiers\" }\n+! !$omp end target\n+!$omp target map(close close to : a) ! { dg-error \"too many 'close' modifiers\" }\n+! !$omp end target\n+\n+!$omp target map(close close always always to : a) ! { dg-error \"too many 'always' modifiers\" }\n+! !$omp end target\n+\n+end"}]}