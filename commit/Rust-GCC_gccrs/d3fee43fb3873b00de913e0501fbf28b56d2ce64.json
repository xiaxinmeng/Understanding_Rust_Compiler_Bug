{"sha": "d3fee43fb3873b00de913e0501fbf28b56d2ce64", "node_id": "C_kwDOANBUbNoAKGQzZmVlNDNmYjM4NzNiMDBkZTkxM2UwNTAxZmJmMjhiNTZkMmNlNjQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-11-28T11:38:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-14T07:48:35Z"}, "message": "tree-optimization/107617 - big-endian .LEN_STORE VN\n\nThe following fixes a mistake in interpreting .LEN_STORE definitions\nduring value-numbering when in big-endian mode.  We cannot offset\nthe encoding of the RHS but instead encode to an offsetted position\nwhich is then treated correctly by the endian aware copying code.\n\n\tPR tree-optimization/107617\n\t* tree-ssa-sccvn.cc (vn_walk_cb_data::push_partial_def):\n\tHandle negative pd.rhs_off.\n\t(vn_reference_lookup_3): Properly provide pd.rhs_off\n\tfor .LEN_STORE on big-endian targets.", "tree": {"sha": "dcd34a989970e4848e3619fb54d5249f024ceaf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcd34a989970e4848e3619fb54d5249f024ceaf7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3fee43fb3873b00de913e0501fbf28b56d2ce64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3fee43fb3873b00de913e0501fbf28b56d2ce64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3fee43fb3873b00de913e0501fbf28b56d2ce64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3fee43fb3873b00de913e0501fbf28b56d2ce64/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "512098a3316f07d4b8bf0e035ab128ed2a50cb5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/512098a3316f07d4b8bf0e035ab128ed2a50cb5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/512098a3316f07d4b8bf0e035ab128ed2a50cb5e"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "fa2f65df159330cf884350d22edd859bbde5faa3", "filename": "gcc/tree-ssa-sccvn.cc", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3fee43fb3873b00de913e0501fbf28b56d2ce64/gcc%2Ftree-ssa-sccvn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3fee43fb3873b00de913e0501fbf28b56d2ce64/gcc%2Ftree-ssa-sccvn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.cc?ref=d3fee43fb3873b00de913e0501fbf28b56d2ce64", "patch": "@@ -2090,7 +2090,7 @@ vn_walk_cb_data::push_partial_def (pd_data pd,\n \t    len = ROUND_UP (pd.size, BITS_PER_UNIT) / BITS_PER_UNIT;\n \t  memset (this_buffer, 0, len);\n \t}\n-      else\n+      else if (pd.rhs_off >= 0)\n \t{\n \t  len = native_encode_expr (pd.rhs, this_buffer, bufsize,\n \t\t\t\t    (MAX (0, -pd.offset)\n@@ -2105,6 +2105,24 @@ vn_walk_cb_data::push_partial_def (pd_data pd,\n \t      return (void *)-1;\n \t    }\n \t}\n+      else /* negative pd.rhs_off indicates we want to chop off first bits */\n+\t{\n+\t  if (-pd.rhs_off >= bufsize)\n+\t    return (void *)-1;\n+\t  len = native_encode_expr (pd.rhs,\n+\t\t\t\t    this_buffer + -pd.rhs_off / BITS_PER_UNIT,\n+\t\t\t\t    bufsize - -pd.rhs_off / BITS_PER_UNIT,\n+\t\t\t\t    MAX (0, -pd.offset) / BITS_PER_UNIT);\n+\t  if (len <= 0\n+\t      || len < (ROUND_UP (pd.size, BITS_PER_UNIT) / BITS_PER_UNIT\n+\t\t\t- MAX (0, -pd.offset) / BITS_PER_UNIT))\n+\t    {\n+\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\tfprintf (dump_file, \"Failed to encode %u \"\n+\t\t\t \"partial definitions\\n\", ndefs);\n+\t      return (void *)-1;\n+\t    }\n+\t}\n \n       unsigned char *p = buffer;\n       HOST_WIDE_INT size = pd.size;\n@@ -3349,10 +3367,13 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t\t}\n \t      else if (fn == IFN_LEN_STORE)\n \t\t{\n-\t\t  pd.rhs_off = 0;\n \t\t  pd.offset = offset2i;\n \t\t  pd.size = (tree_to_uhwi (len)\n \t\t\t     + -tree_to_shwi (bias)) * BITS_PER_UNIT;\n+\t\t  if (BYTES_BIG_ENDIAN)\n+\t\t    pd.rhs_off = pd.size - tree_to_uhwi (TYPE_SIZE (vectype));\n+\t\t  else\n+\t\t    pd.rhs_off = 0;\n \t\t  if (ranges_known_overlap_p (offset, maxsize,\n \t\t\t\t\t      pd.offset, pd.size))\n \t\t    return data->push_partial_def (pd, set, set,"}]}