{"sha": "0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI2ZjI5MTdjZmNiZmJhY2NjYTgwNGUwZjAzOGFjOGM0NDU3Zjc3Mg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-08-07T18:32:13Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-08-07T18:32:13Z"}, "message": "Makefile.in (c-opts.o, [...]): Update.\n\n\t* Makefile.in (c-opts.o, c-common.o, C_AND_OBJC_OBJS): Update.\n\t* c-common.c: Don't include tree-inline.h.\n\t(c_common_init_options, c_common_post_options): Move to c-opts.c.\n\t* c-common.h (c_common_decode_option): New.\n\t* c-decl.c (c_decode_option): Remove.\n\t* c-lang.c (LANG_HOOKS_DECODE_OPTION): Use c_common_decode_option.\n\t* c-opts.c: New file.\n\t* c-tree.h (c_decode_option): Remove.\n\t* doc/passes.texi: Update.\n\t* objc/objc-act.c (objc_decode_option): Remove.\n\t* objc/objc-act.h (objc_decode_option): Remove.\n\t* objc/ojbc-lang.c (LANG_HOOKS_DECODE_OPTION): Use\n\tc_common_decode_option.\ncp:\n\t* Make-lang.in (CXX_C_OBJS): Update.\n\t* cp-lang.c (LANG_HOOKS_DECODE_OPTION): Use c_common_decode_option.\n\t* cp-tree.h (cxx_decode_option): Remove.\n\t* decl2.c (compare_options, lang_f_options, unsupported_options,\n\tcxx_decode_option): Remove.\ntestsuite:\n\t* objc.dg/const-str-2.m: Update.\n\t* gcc.dg/cpp/c++98.c: Change to C extension.\n\t* gcc.dg/cpp/c++98-pedantic.c: Similarly.\n\t* gcc.dg/cpp/cpp.exp: Process .C extensions too.\n\nFrom-SVN: r56105", "tree": {"sha": "f482610e2d7395c411d78c8b0b4b49417cca0344", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f482610e2d7395c411d78c8b0b4b49417cca0344"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e49ec17d553e4c1e5c3a18a6bb15627959c5a313", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49ec17d553e4c1e5c3a18a6bb15627959c5a313", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e49ec17d553e4c1e5c3a18a6bb15627959c5a313"}], "stats": {"total": 1853, "additions": 1152, "deletions": 701}, "files": [{"sha": "d7659d080ddd4e89932f583d32755476572e0929", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "patch": "@@ -1,3 +1,19 @@\n+2002-08-07  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* Makefile.in (c-opts.o, c-common.o, C_AND_OBJC_OBJS): Update.\n+\t* c-common.c: Don't include tree-inline.h.\n+\t(c_common_init_options, c_common_post_options): Move to c-opts.c.\n+\t* c-common.h (c_common_decode_option): New.\n+\t* c-decl.c (c_decode_option): Remove.\n+\t* c-lang.c (LANG_HOOKS_DECODE_OPTION): Use c_common_decode_option.\n+\t* c-opts.c: New file.\n+\t* c-tree.h (c_decode_option): Remove.\n+\t* doc/passes.texi: Update.\n+\t* objc/objc-act.c (objc_decode_option): Remove.\n+\t* objc/objc-act.h (objc_decode_option): Remove.\n+\t* objc/ojbc-lang.c (LANG_HOOKS_DECODE_OPTION): Use\n+\tc_common_decode_option.\n+\n 2002-08-07  Chris Demetriou  <cgd@broadcom.com>\n \n \t* config/mips/mips.md (sunlt_sf, suneq_sf, sunle_sf): Remove"}, {"sha": "33e1d4efff1f643ec08ffced90ac99909f45c101", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "patch": "@@ -714,7 +714,7 @@ CXX_TARGET_OBJS=@cxx_target_objs@\n \n # Language-specific object files for C and Objective C.\n C_AND_OBJC_OBJS = attribs.o c-errors.o c-lex.o c-pragma.o c-decl.o c-typeck.o \\\n-  c-convert.o c-aux-info.o c-common.o c-format.o c-semantics.o \\\n+  c-convert.o c-aux-info.o c-common.o c-opts.o c-format.o c-semantics.o \\\n   c-objc-common.o c-dump.o libcpp.a $(C_TARGET_OBJS)\n \n # Language-specific object files for C.\n@@ -1229,10 +1229,13 @@ s-under: $(GCC_PASSES)\n c-common.o : c-common.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(OBSTACK_H) \\\n \t$(C_COMMON_H) flags.h toplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) \\\n \t$(EXPR_H) $(TM_P_H) builtin-types.def builtin-attrs.def $(TARGET_H) \\\n-\tdiagnostic.h tree-inline.h except.h gt-c-common.h real.h langhooks.h\n+\tdiagnostic.h except.h gt-c-common.h real.h langhooks.h\n c-pretty-print.o : c-pretty-print.c c-pretty-print.h pretty-print.h \\\n \t$(C_COMMON_H) $(CONFIG_H) $(SYSTEM_H) real.h\n \n+c-opts.o : c-opts.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_COMMON_H) \\\n+        c-pragma.h flags.h toplev.h langhooks.h tree-inline.h diagnostic.h\n+\n # A file used by all variants of C and some other languages.\n \n attribs.o : attribs.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(OBSTACK_H) flags.h \\"}, {"sha": "e09eac29476cd1334afdb15802601f2fa135f66e", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "patch": "@@ -31,7 +31,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"ggc.h\"\n #include \"expr.h\"\n #include \"c-common.h\"\n-#include \"tree-inline.h\"\n #include \"diagnostic.h\"\n #include \"tm_p.h\"\n #include \"obstack.h\"\n@@ -4669,73 +4668,6 @@ boolean_increment (code, arg)\n   return val;\n }\n \f\n-/* Common initialization before parsing options.  */\n-void\n-c_common_init_options (lang)\n-     enum c_language_kind lang;\n-{\n-  c_language = lang;\n-  parse_in = cpp_create_reader (lang == clk_c || lang == clk_objective_c\n-\t\t\t\t? CLK_GNUC89 : CLK_GNUCXX);\n-  if (lang == clk_objective_c)\n-    cpp_get_options (parse_in)->objc = 1;\n-\n-  flag_const_strings = (lang == clk_cplusplus);\n-  warn_pointer_arith = (lang == clk_cplusplus);\n-  if (lang == clk_c)\n-    warn_sign_compare = -1;\n-\n-  /* Mark as \"unspecified\" (see c_common_post_options).  */\n-  flag_bounds_check = -1;\n-}\n-\n-/* Post-switch processing.  */\n-bool\n-c_common_post_options ()\n-{\n-  cpp_post_options (parse_in);\n-\n-  flag_inline_trees = 1;\n-\n-  /* Use tree inlining if possible.  Function instrumentation is only\n-     done in the RTL level, so we disable tree inlining.  */\n-  if (! flag_instrument_function_entry_exit)\n-    {\n-      if (!flag_no_inline)\n-\tflag_no_inline = 1;\n-      if (flag_inline_functions)\n-\t{\n-\t  flag_inline_trees = 2;\n-\t  flag_inline_functions = 0;\n-\t}\n-    }\n-\n-  /* If still \"unspecified\", make it match -fbounded-pointers.  */\n-  if (flag_bounds_check == -1)\n-    flag_bounds_check = flag_bounded_pointers;\n-\n-  /* Special format checking options don't work without -Wformat; warn if\n-     they are used.  */\n-  if (warn_format_y2k && !warn_format)\n-    warning (\"-Wformat-y2k ignored without -Wformat\");\n-  if (warn_format_extra_args && !warn_format)\n-    warning (\"-Wformat-extra-args ignored without -Wformat\");\n-  if (warn_format_zero_length && !warn_format)\n-    warning (\"-Wformat-zero-length ignored without -Wformat\");\n-  if (warn_format_nonliteral && !warn_format)\n-    warning (\"-Wformat-nonliteral ignored without -Wformat\");\n-  if (warn_format_security && !warn_format)\n-    warning (\"-Wformat-security ignored without -Wformat\");\n-  if (warn_missing_format_attribute && !warn_format)\n-    warning (\"-Wmissing-format-attribute ignored without -Wformat\");\n-\n-  /* If an error has occurred in cpplib, note it so we fail\n-     immediately.  */\n-  errorcount += cpp_errors (parse_in);\n-\n-  return flag_preprocess_only;\n-}\n-\n /* Hook that registers front end and target-specific built-ins.  */\n static void\n cb_register_builtins (pfile)"}, {"sha": "6544694730dedb162f3dfd05674a9b6c6b336960", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "patch": "@@ -851,6 +851,7 @@ extern tree handle_format_attribute\t\tPARAMS ((tree *, tree, tree,\n extern tree handle_format_arg_attribute\t\tPARAMS ((tree *, tree, tree,\n \t\t\t\t\t\t\t int, bool *));\n extern void c_common_insert_default_attributes\tPARAMS ((tree));\n+extern int c_common_decode_option\t\tPARAMS ((int, char **));\n extern tree c_common_type_for_mode\t\tPARAMS ((enum machine_mode,\n \t\t\t\t\t\t\t int));\n extern tree c_common_type_for_size\t\tPARAMS ((unsigned int, int));"}, {"sha": "734429274598d5d4a8aacbe6c7a9fd9538c28108", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 262, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "patch": "@@ -295,268 +295,6 @@ enum deprecated_states {\n \n static enum deprecated_states deprecated_state = DEPRECATED_NORMAL;\n \n-/* Decode the string P as a language-specific option for C.\n-   Return the number of strings consumed.  Should not complain\n-   if it does not recognise the option.  */\n-\n-int\n-c_decode_option (argc, argv)\n-     int argc ATTRIBUTE_UNUSED;\n-     char **argv;\n-{\n-  int strings_processed;\n-  char *p = argv[0];\n-\n-  static const struct {\n-      /* The name of the option.  */\n-      const char *option;\n-      /* A pointer to a flag variable to set to 0 or 1.  */\n-      int *flag;\n-  } warn_options[] = {\n-    /* This list is in alphabetical order.  Keep it like that.  */\n-    { \"bad-function-cast\", &warn_bad_function_cast },\n-    { \"cast-qual\", &warn_cast_qual },\n-    { \"char-subscripts\", &warn_char_subscripts },\n-    { \"conversion\", &warn_conversion },\n-    { \"div-by-zero\", &warn_div_by_zero },\n-    { \"float-equal\", &warn_float_equal },\n-    { \"format-extra-args\", &warn_format_extra_args },\n-    { \"format-zero-length\", &warn_format_zero_length },\n-    { \"format-nonliteral\", &warn_format_nonliteral },\n-    { \"format-security\", &warn_format_security },\n-    { \"format-y2k\", &warn_format_y2k },\n-    { \"implicit-function-declaration\", &mesg_implicit_function_declaration },\n-    { \"implicit-int\", &warn_implicit_int },\n-    { \"long-long\", &warn_long_long },\n-    { \"main\", &warn_main },\n-    { \"missing-braces\", &warn_missing_braces },\n-    { \"missing-declarations\", &warn_missing_declarations },\n-    { \"missing-format-attribute\", &warn_missing_format_attribute },\n-    { \"missing-prototypes\", &warn_missing_prototypes },\n-    { \"multichar\", &warn_multichar },\n-    { \"nested-externs\", &warn_nested_externs },\n-    { \"nonnull\", &warn_nonnull },\n-    { \"parentheses\", &warn_parentheses },\n-    { \"pointer-arith\", &warn_pointer_arith },\n-    { \"redundant-decls\", &warn_redundant_decls },\n-    { \"return-type\", &warn_return_type },\n-    { \"sequence-point\", &warn_sequence_point },\n-    { \"sign-compare\", &warn_sign_compare },\n-    { \"strict-prototypes\", &warn_strict_prototypes },\n-    { \"traditional\", &warn_traditional },\n-    { \"write-strings\", &flag_const_strings }\n-  };\n-\n-  strings_processed = cpp_handle_option (parse_in, argc, argv);\n-\n-  if (!strcmp (p, \"-fhosted\") || !strcmp (p, \"-fno-freestanding\"))\n-    {\n-      flag_hosted = 1;\n-      flag_no_builtin = 0;\n-    }\n-  else if (!strcmp (p, \"-ffreestanding\") || !strcmp (p, \"-fno-hosted\"))\n-    {\n-      flag_hosted = 0;\n-      flag_no_builtin = 1;\n-      /* warn_main will be 2 if set by -Wall, 1 if set by -Wmain */\n-      if (warn_main == 2)\n-\twarn_main = 0;\n-    }\n-  else if (!strncmp (p, \"-std=\", 5))\n-    {\n-      /* Select the appropriate language standard.  We currently\n-\t recognize:\n-\t -std=iso9899:1990\tsame as -ansi\n-\t -std=iso9899:199409\tISO C as modified in amend. 1\n-\t -std=iso9899:1999\tISO C 99\n-\t -std=c89\t\tsame as -std=iso9899:1990\n-\t -std=c99\t\tsame as -std=iso9899:1999\n-\t -std=gnu89\t\tdefault, iso9899:1990 + gnu extensions\n-\t -std=gnu99\t\tiso9899:1999 + gnu extensions\n-      */\n-      const char *const argstart = &p[5];\n-\n-      if (!strcmp (argstart, \"iso9899:1990\")\n-\t  || !strcmp (argstart, \"c89\"))\n-\t{\n-\tiso_1990:\n-\t  flag_isoc94 = 0;\n-\tiso_1994:\n-\t  flag_writable_strings = 0;\n-\t  flag_no_asm = 1;\n-\t  flag_no_nonansi_builtin = 1;\n-\t  flag_noniso_default_format_attributes = 0;\n-\t  flag_isoc99 = 0;\n-\t  flag_iso = 1;\n-\t}\n-      else if (!strcmp (argstart, \"iso9899:199409\"))\n-\t{\n-\t  flag_isoc94 = 1;\n-\t  goto iso_1994;\n-\t}\n-      else if (!strcmp (argstart, \"iso9899:199x\")\n-\t       || !strcmp (argstart, \"iso9899:1999\")\n-\t       || !strcmp (argstart, \"c9x\")\n-\t       || !strcmp (argstart, \"c99\"))\n-\t{\n-\t  flag_writable_strings = 0;\n-\t  flag_no_asm = 1;\n-\t  flag_no_nonansi_builtin = 1;\n-\t  flag_noniso_default_format_attributes = 0;\n-\t  flag_isoc99 = 1;\n-\t  flag_isoc94 = 1;\n-\t  flag_iso = 1;\n-\t}\n-      else if (!strcmp (argstart, \"gnu89\"))\n-\t{\n-\t  flag_writable_strings = 0;\n-\t  flag_no_asm = 0;\n-\t  flag_no_nonansi_builtin = 0;\n-\t  flag_noniso_default_format_attributes = 1;\n-\t  flag_isoc99 = 0;\n-\t  flag_isoc94 = 0;\n-\t}\n-      else if (!strcmp (argstart, \"gnu9x\") || !strcmp (argstart, \"gnu99\"))\n-\t{\n-\t  flag_writable_strings = 0;\n-\t  flag_no_asm = 0;\n-\t  flag_no_nonansi_builtin = 0;\n-\t  flag_noniso_default_format_attributes = 1;\n-\t  flag_isoc99 = 1;\n-\t  flag_isoc94 = 1;\n-\t}\n-      else if (!strcmp (argstart, \"c++98\"))\n-\t; /* Handled by cpplib.  */\n-      else\n-\terror (\"unknown C standard `%s'\", argstart);\n-    }\n-  else if (!strcmp (p, \"-fdollars-in-identifiers\"))\n-    dollars_in_ident = 1;\n-  else if (!strcmp (p, \"-fno-dollars-in-identifiers\"))\n-    dollars_in_ident = 0;\n-  else if (!strcmp (p, \"-fsigned-char\"))\n-    flag_signed_char = 1;\n-  else if (!strcmp (p, \"-funsigned-char\"))\n-    flag_signed_char = 0;\n-  else if (!strcmp (p, \"-fno-signed-char\"))\n-    flag_signed_char = 0;\n-  else if (!strcmp (p, \"-fno-unsigned-char\"))\n-    flag_signed_char = 1;\n-  else if (!strcmp (p, \"-fsigned-bitfields\")\n-\t   || !strcmp (p, \"-fno-unsigned-bitfields\"))\n-    {\n-      flag_signed_bitfields = 1;\n-      explicit_flag_signed_bitfields = 1;\n-    }\n-  else if (!strcmp (p, \"-funsigned-bitfields\")\n-\t   || !strcmp (p, \"-fno-signed-bitfields\"))\n-    {\n-      flag_signed_bitfields = 0;\n-      explicit_flag_signed_bitfields = 1;\n-    }\n-  else if (!strcmp (p, \"-fshort-enums\"))\n-    flag_short_enums = 1;\n-  else if (!strcmp (p, \"-fno-short-enums\"))\n-    flag_short_enums = 0;\n-  else if (!strcmp (p, \"-fshort-wchar\"))\n-    flag_short_wchar = 1;\n-  else if (!strcmp (p, \"-fno-short-wchar\"))\n-    flag_short_wchar = 0;\n-  else if (!strcmp (p, \"-fcond-mismatch\"))\n-    flag_cond_mismatch = 1;\n-  else if (!strcmp (p, \"-fno-cond-mismatch\"))\n-    flag_cond_mismatch = 0;\n-  else if (!strcmp (p, \"-fshort-double\"))\n-    flag_short_double = 1;\n-  else if (!strcmp (p, \"-fno-short-double\"))\n-    flag_short_double = 0;\n-  else if (!strcmp (p, \"-fasm\"))\n-    flag_no_asm = 0;\n-  else if (!strcmp (p, \"-fno-asm\"))\n-    flag_no_asm = 1;\n-  else if (!strcmp (p, \"-fms-extensions\"))\n-    flag_ms_extensions = 1;\n-  else if (!strcmp (p, \"-fno-ms-extensions\"))\n-    flag_ms_extensions = 0;\n-  else if (!strcmp (p, \"-fbuiltin\"))\n-    flag_no_builtin = 0;\n-  else if (!strcmp (p, \"-fno-builtin\"))\n-    flag_no_builtin = 1;\n-  else if (!strncmp (p, \"-fno-builtin-\", strlen (\"-fno-builtin-\")))\n-    disable_builtin_function (p + strlen (\"-fno-builtin-\"));\n-  else if (p[0] == '-' && p[1] == 'f' && dump_switch_p (p + 2))\n-    ;\n-  else if (!strcmp (p, \"-ansi\"))\n-    goto iso_1990;\n-  else if (!strcmp (p, \"-undef\"))\n-    flag_undef = 1;\n-  else if (!strcmp (p, \"-Werror-implicit-function-declaration\"))\n-    mesg_implicit_function_declaration = 2;\n-  else if (!strncmp (p, \"-Wformat=\", 9))\n-    set_Wformat (atoi (p + 9));\n-  else if (!strcmp (p, \"-Wformat\"))\n-    set_Wformat (1);\n-  else if (!strcmp (p, \"-Wno-format\"))\n-    set_Wformat (0);\n-  else if (!strcmp (p, \"-Wimplicit\"))\n-    {\n-      warn_implicit_int = 1;\n-      if (mesg_implicit_function_declaration != 2)\n-\tmesg_implicit_function_declaration = 1;\n-    }\n-  else if (!strcmp (p, \"-Wno-implicit\"))\n-    warn_implicit_int = 0, mesg_implicit_function_declaration = 0;\n-  else if (!strcmp (p, \"-Wno-main\"))\n-    warn_main = -1;\n-  else if (!strcmp (p, \"-Wunknown-pragmas\"))\n-    /* Set to greater than 1, so that even unknown pragmas in system\n-       headers will be warned about.  */\n-    warn_unknown_pragmas = 2;\n-  else if (!strcmp (p, \"-Wno-unknown-pragmas\"))\n-    warn_unknown_pragmas = 0;\n-  else if (!strcmp (p, \"-Wall\"))\n-    {\n-      /* We save the value of warn_uninitialized, since if they put\n-\t -Wuninitialized on the command line, we need to generate a\n-\t warning about not using it without also specifying -O.  */\n-      if (warn_uninitialized != 1)\n-\twarn_uninitialized = 2;\n-      warn_implicit_int = 1;\n-      mesg_implicit_function_declaration = 1;\n-      warn_return_type = 1;\n-      set_Wunused (1);\n-      warn_switch = 1;\n-      set_Wformat (1);\n-      warn_char_subscripts = 1;\n-      warn_parentheses = 1;\n-      warn_sequence_point = 1;\n-      warn_missing_braces = 1;\n-      /* We set this to 2 here, but 1 in -Wmain, so -ffreestanding can turn\n-\t it off only if it's not explicit.  */\n-      warn_main = 2;\n-      /* Only warn about unknown pragmas that are not in system headers.  */\n-      warn_unknown_pragmas = 1;\n-    }\n-  else if (!strcmp (p, \"-E\"))\n-    flag_preprocess_only = 1;\n-  else\n-    {\n-      size_t i;\n-      for (i = 0; i < ARRAY_SIZE (warn_options); i++)\n-\tif (strncmp (p, \"-W\", 2) == 0 \n-\t    && (strcmp (p+2, warn_options[i].option) == 0\n-\t\t|| (strncmp (p+2, \"no-\", 3) == 0\n-\t\t    && strcmp (p+5, warn_options[i].option) == 0)))\n-\t  {\n-\t    *(warn_options[i].flag) = strncmp (p+2, \"no-\", 3) != 0;\n-\t    return 1;\n-\t  }\n-      return strings_processed;\n-    }\n-\n-  return 1;\n-}\n-\n void\n c_print_identifier (file, node, indent)\n      FILE *file;"}, {"sha": "e30548332b5ac54b4dc876b11a6a785d84bc2f56", "filename": "gcc/c-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "patch": "@@ -43,7 +43,7 @@ static void c_init_options PARAMS ((void));\n #undef LANG_HOOKS_INIT_OPTIONS\n #define LANG_HOOKS_INIT_OPTIONS c_init_options\n #undef LANG_HOOKS_DECODE_OPTION\n-#define LANG_HOOKS_DECODE_OPTION c_decode_option\n+#define LANG_HOOKS_DECODE_OPTION c_common_decode_option\n #undef LANG_HOOKS_POST_OPTIONS\n #define LANG_HOOKS_POST_OPTIONS c_common_post_options\n #undef LANG_HOOKS_GET_ALIAS_SET"}, {"sha": "6ad9650222caa98f1bb7d6876209bf80694a82f1", "filename": "gcc/c-opts.c", "status": "added", "additions": 1107, "deletions": 0, "changes": 1107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "patch": "@@ -0,0 +1,1107 @@\n+/* C/ObjC/C++ command line option handling.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by Neil Booth.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"tree.h\"\n+#include \"c-common.h\"\n+#include \"c-pragma.h\"\n+#include \"flags.h\"\n+#include \"toplev.h\"\n+#include \"langhooks.h\"\n+#include \"tree-inline.h\"\n+#include \"diagnostic.h\"\n+\n+static void missing_arg PARAMS ((size_t));\n+static size_t parse_option PARAMS ((const char *, int));\n+static void set_Wimplicit PARAMS ((int));\n+static void complain_wrong_lang PARAMS ((size_t));\n+static void write_langs PARAMS ((char *, int));\n+\n+#define CL_C_ONLY\t(1 << 0) /* Only C.  */\n+#define CL_OBJC_ONLY\t(1 << 1) /* Only ObjC.  */\n+#define CL_CXX_ONLY\t(1 << 2) /* Only C++.  */\n+#define CL_OBJCXX_ONLY\t(1 << 3) /* Only ObjC++.  */\n+#define CL_JOINED\t(1 << 4) /* If takes joined argument.  */\n+#define CL_SEPARATE\t(1 << 5) /* If takes a separate argument.  */\n+\n+#define CL_ARG\t\t(CL_JOINED | CL_SEPARATE)\n+#define CL_C\t\t(CL_C_ONLY | CL_OBJC_ONLY)\n+#define CL_OBJC\t\t(CL_OBJC_ONLY | CL_OBJCXX_ONLY)\n+#define CL_CXX\t\t(CL_CXX_ONLY | CL_OBJCXX_ONLY)\n+#define CL_ALL\t\t(CL_C | CL_CXX)\n+\n+/* This is the list of all command line options, with the leading \"-\"\n+   removed.  It must be sorted in ASCII collating order.  All options\n+   beginning with \"f\" or \"W\" are implicitly assumed to take a \"no-\"\n+   form; this form should not be listed.  If you don't want a \"no-\"\n+   form, your handler should check and reject it.\n+\n+   If the user gives an option to a front end that doesn't support it,\n+   an error is output, mentioning which front ends the option is valid\n+   for.  If you don't want this, you must accept it for all front\n+   ends, and test for the front end in the option handler.  */\n+#define COMMAND_LINE_OPTIONS\t\t\t\t\t\t     \\\n+  OPT(\"E\",\t\t\tCL_ALL,   OPT_E)\t\t\t     \\\n+  OPT(\"Wall\",\t\t\tCL_ALL,   OPT_Wall)\t\t\t     \\\n+  OPT(\"Wbad-function-cast\",\tCL_C,     OPT_Wbad_function_cast)\t     \\\n+  OPT(\"Wcast-qual\",\t\tCL_ALL,   OPT_Wcast_qual)\t\t     \\\n+  OPT(\"Wchar-subscripts\",\tCL_ALL,   OPT_Wchar_subscripts)\t\t     \\\n+  OPT(\"Wconversion\",\t\tCL_ALL,   OPT_Wconversion)\t\t     \\\n+  OPT(\"Wctor-dtor-privacy\",\tCL_CXX,   OPT_Wctor_dtor_privacy)\t     \\\n+  OPT(\"Wdeprecated\",\t\tCL_CXX,   OPT_Wdeprecated)\t\t     \\\n+  OPT(\"Wdiv-by-zero\",\t\tCL_C,     OPT_Wdiv_by_zero)\t\t     \\\n+  OPT(\"Weffc++\",\t\tCL_CXX,   OPT_Weffcxx)\t\t\t     \\\n+  OPT(\"Werror-implicit-function-declaration\",\t\t\t\t     \\\n+\t     \t\t\tCL_C,     OPT_Werror_implicit_function_decl) \\\n+  OPT(\"Wfloat-equal\",\t\tCL_ALL,   OPT_Wfloat_equal)\t\t     \\\n+  OPT(\"Wformat\",\t\tCL_ALL,   OPT_Wformat)\t\t\t     \\\n+  OPT(\"Wformat-extra-args\",\tCL_ALL,   OPT_Wformat_extra_args)\t     \\\n+  OPT(\"Wformat-nonliteral\",\tCL_ALL,   OPT_Wformat_nonliteral)\t     \\\n+  OPT(\"Wformat-security\",\tCL_ALL,   OPT_Wformat_security)\t\t     \\\n+  OPT(\"Wformat-y2k\",\t\tCL_ALL,   OPT_Wformat_y2k)\t\t     \\\n+  OPT(\"Wformat-zero-length\",\tCL_C,     OPT_Wformat_zero_length)\t     \\\n+  OPT(\"Wformat=\",\t\tCL_ALL | CL_JOINED, OPT_Wformat_eq)\t     \\\n+  OPT(\"Wimplicit\",\t\tCL_CXX,   OPT_Wimplicit)\t\t     \\\n+  OPT(\"Wimplicit-function-declaration\",\tCL_C, OPT_Wimplicit_function_decl)   \\\n+  OPT(\"Wimplicit-int\",\t\tCL_C,\t  OPT_Wimplicit_int)\t\t     \\\n+  OPT(\"Wlong-long\",\t\tCL_ALL,   OPT_Wlong_long)\t\t     \\\n+  OPT(\"Wmain\",\t\t\tCL_C,     OPT_Wmain)\t\t\t     \\\n+  OPT(\"Wmissing-braces\",\tCL_ALL,   OPT_Wmissing_braces)\t\t     \\\n+  OPT(\"Wmissing-declarations\",\tCL_C,     OPT_Wmissing_declarations)\t     \\\n+  OPT(\"Wmissing-format-attribute\",CL_ALL, OPT_Wmissing_format_attribute)     \\\n+  OPT(\"Wmissing-prototypes\",\tCL_ALL,   OPT_Wmissing_prototypes)\t     \\\n+  OPT(\"Wmultichar\",\t\tCL_ALL,   OPT_Wmultichar)\t\t     \\\n+  OPT(\"Wnested-externs\",\tCL_C,     OPT_Wnested_externs)\t\t     \\\n+  OPT(\"Wnon-template-friend\",\tCL_CXX,   OPT_Wnon_template_friend)\t     \\\n+  OPT(\"Wnon-virtual-dtor\",\tCL_CXX,   OPT_Wnon_virtual_dtor)\t     \\\n+  OPT(\"Wnonnull\",\t\tCL_C,     OPT_Wnonnull)\t\t\t     \\\n+  OPT(\"Wold-style-cast\",\tCL_CXX,   OPT_Wold_style_cast)\t\t     \\\n+  OPT(\"Woverloaded-virtual\",\tCL_CXX,   OPT_Woverloaded_virtual)\t     \\\n+  OPT(\"Wparentheses\",\t\tCL_ALL,   OPT_Wparentheses)\t\t     \\\n+  OPT(\"Wpmf-conversions\",\tCL_CXX,   OPT_Wpmf_conversions)\t\t     \\\n+  OPT(\"Wpointer-arith\",\t\tCL_ALL,   OPT_Wpointer_arith)\t\t     \\\n+  OPT(\"Wprotocol\",\t\tCL_OBJC,  OPT_Wprotocol)\t\t     \\\n+  OPT(\"Wredundant-decls\",\tCL_ALL,   OPT_Wredundant_decls)\t\t     \\\n+  OPT(\"Wreorder\",\t\tCL_CXX,   OPT_Wreorder)\t\t\t     \\\n+  OPT(\"Wreturn-type\",\t\tCL_ALL,   OPT_Wreturn_type)\t\t     \\\n+  OPT(\"Wselector\",\t\tCL_OBJC,  OPT_Wselector)\t\t     \\\n+  OPT(\"Wsequence-point\",\tCL_C,     OPT_Wsequence_point)\t\t     \\\n+  OPT(\"Wsign-compare\",\t\tCL_ALL,   OPT_Wsign_compare)\t\t     \\\n+  OPT(\"Wsign-promo\",\t\tCL_CXX,   OPT_Wsign_promo)\t\t     \\\n+  OPT(\"Wstrict-prototypes\",\tCL_ALL,   OPT_Wstrict_prototypes)\t     \\\n+  OPT(\"Wsynth\",\t\t\tCL_CXX,   OPT_Wsynth)\t\t\t     \\\n+  OPT(\"Wtraditional\",\t\tCL_C,     OPT_Wtraditional)\t\t     \\\n+  OPT(\"Wunknown-pragmas\",\tCL_ALL,   OPT_Wunknown_pragmas)\t\t     \\\n+  OPT(\"Wwrite-strings\",\t\tCL_ALL,   OPT_Wwrite_strings)\t\t     \\\n+  OPT(\"ansi\",\t\t\tCL_ALL,   OPT_ansi)\t\t\t     \\\n+  OPT(\"faccess-control\",\tCL_CXX,   OPT_faccess_control)\t\t     \\\n+  OPT(\"fall-virtual\",\t\tCL_CXX,   OPT_fall_virtual)\t\t     \\\n+  OPT(\"falt-external-templates\",CL_CXX,   OPT_falt_external_templates)\t     \\\n+  OPT(\"fasm\",\t\t\tCL_ALL,   OPT_fasm)\t\t\t     \\\n+  OPT(\"fbuiltin\",\t\tCL_ALL,   OPT_fbuiltin)\t\t\t     \\\n+  OPT(\"fbuiltin-\",\t\tCL_ALL | CL_JOINED, OPT_fbuiltin_)\t     \\\n+  OPT(\"fcheck-new\",\t\tCL_CXX,   OPT_fcheck_new)\t\t     \\\n+  OPT(\"fcond-mismatch\",\t\tCL_ALL,   OPT_fcond_mismatch)\t\t     \\\n+  OPT(\"fconserve-space\",\tCL_CXX,   OPT_fconserve_space)\t\t     \\\n+  OPT(\"fconst-strings\",\t\tCL_CXX,   OPT_fconst_strings)\t\t     \\\n+  OPT(\"fconstant-string-class=\", CL_OBJC | CL_JOINED,\t\t\t     \\\n+\t\t\t\t\t  OPT_fconstant_string_class)\t     \\\n+  OPT(\"fdefault-inline\",\tCL_CXX,   OPT_fdefault_inline)\t\t     \\\n+  OPT(\"fdollars-in-identifiers\",CL_ALL,   OPT_fdollars_in_identifiers)\t     \\\n+  OPT(\"fdump-\",\t\t\tCL_ALL | CL_JOINED, OPT_fdump)\t\t     \\\n+  OPT(\"felide-constructors\",\tCL_CXX,   OPT_felide_constructors)\t     \\\n+  OPT(\"fenforce-eh-specs\",\tCL_CXX,   OPT_fenforce_eh_specs)\t     \\\n+  OPT(\"fenum-int-equiv\",\tCL_CXX,   OPT_fenum_int_equiv)\t\t     \\\n+  OPT(\"fexternal-templates\",\tCL_CXX,   OPT_fexternal_templates)\t     \\\n+  OPT(\"ffor-scope\",\t\tCL_CXX,   OPT_ffor_scope)\t\t     \\\n+  OPT(\"ffreestanding\",\t\tCL_C,     OPT_ffreestanding)\t\t     \\\n+  OPT(\"fgnu-keywords\",\t\tCL_CXX,   OPT_fgnu_keywords)\t\t     \\\n+  OPT(\"fgnu-runtime\",\t\tCL_OBJC,  OPT_fgnu_runtime)\t\t     \\\n+  OPT(\"fguiding-decls\",\t\tCL_CXX,   OPT_fguiding_decls)\t\t     \\\n+  OPT(\"fhandle-exceptions\",\tCL_CXX,   OPT_fhandle_exceptions)\t     \\\n+  OPT(\"fhonor-std\",\t\tCL_CXX,   OPT_fhonor_std)\t\t     \\\n+  OPT(\"fhosted\",\t\tCL_C,     OPT_fhosted)\t\t\t     \\\n+  OPT(\"fhuge-objects\",\t\tCL_CXX,   OPT_fhuge_objects)\t\t     \\\n+  OPT(\"fimplement-inlines\",\tCL_CXX,   OPT_fimplement_inlines)\t     \\\n+  OPT(\"fimplicit-inline-templates\", CL_CXX, OPT_fimplicit_inline_templates)  \\\n+  OPT(\"fimplicit-templates\",\tCL_CXX,   OPT_fimplicit_templates)\t     \\\n+  OPT(\"flabels-ok\",\t\tCL_CXX,   OPT_flabels_ok)\t\t     \\\n+  OPT(\"fms-extensions\",\t\tCL_ALL,   OPT_fms_extensions)\t\t     \\\n+  OPT(\"fname-mangling-version-\",CL_CXX | CL_JOINED, OPT_fname_mangling)\t     \\\n+  OPT(\"fnew-abi\",\t\tCL_CXX,   OPT_fnew_abi)\t\t\t     \\\n+  OPT(\"fnext-runtime\",\t\tCL_OBJC,  OPT_fnext_runtime)\t\t     \\\n+  OPT(\"fnonansi-builtins\",\tCL_CXX,   OPT_fnonansi_builtins)\t     \\\n+  OPT(\"fnonnull-objects\",\tCL_CXX,   OPT_fnonnull_objects)\t\t     \\\n+  OPT(\"foptional-diags\",\tCL_CXX,   OPT_foptional_diags)\t\t     \\\n+  OPT(\"fpermissive\",\t\tCL_CXX,   OPT_fpermissive)\t\t     \\\n+  OPT(\"frepo\",\t\t\tCL_CXX,   OPT_frepo)\t\t\t     \\\n+  OPT(\"frtti\",\t\t\tCL_CXX,   OPT_frtti)\t\t\t     \\\n+  OPT(\"fshort-double\",\t\tCL_ALL,   OPT_fshort_double)\t\t     \\\n+  OPT(\"fshort-enums\",\t\tCL_ALL,   OPT_fshort_enums)\t\t     \\\n+  OPT(\"fshort-wchar\",\t\tCL_ALL,   OPT_fshort_wchar)\t\t     \\\n+  OPT(\"fsigned-bitfields\",\tCL_ALL,   OPT_fsigned_bitfields)\t     \\\n+  OPT(\"fsigned-char\",\t\tCL_ALL,   OPT_fsigned_char)\t\t     \\\n+  OPT(\"fsquangle\",\t\tCL_CXX,   OPT_fsquangle)\t\t     \\\n+  OPT(\"fstats\",\t\t\tCL_CXX,   OPT_fstats)\t\t\t     \\\n+  OPT(\"fstrict-prototype\",\tCL_CXX,   OPT_fstrict_prototype)\t     \\\n+  OPT(\"ftemplate-depth-\",\tCL_CXX | CL_JOINED, OPT_ftemplate_depth)     \\\n+  OPT(\"fthis-is-variable\",\tCL_CXX,   OPT_fthis_is_variable)\t     \\\n+  OPT(\"funsigned-bitfields\",\tCL_ALL,   OPT_funsigned_bitfields)\t     \\\n+  OPT(\"funsigned-char\",\t\tCL_ALL,   OPT_funsigned_char)\t\t     \\\n+  OPT(\"fuse-cxa-atexit\",\tCL_CXX,   OPT_fuse_cxa_atexit)\t\t     \\\n+  OPT(\"fvtable-gc\",\t\tCL_CXX,   OPT_fvtable_gc)\t\t     \\\n+  OPT(\"fvtable-thunks\",\t\tCL_CXX,   OPT_fvtable_thunks)\t\t     \\\n+  OPT(\"fweak\",\t\t\tCL_CXX,   OPT_fweak)\t\t\t     \\\n+  OPT(\"fxref\",\t\t\tCL_CXX,   OPT_fxref)\t\t\t     \\\n+  OPT(\"gen-decls\",\t\tCL_OBJC,  OPT_gen_decls)\t\t     \\\n+  OPT(\"print-objc-runtime-info\", CL_OBJC, OPT_print_objc_runtime_info)\t     \\\n+  OPT(\"std=\",\t\t\tCL_ALL | CL_JOINED, OPT_std_bad)\t     \\\n+  OPT(\"std=c++98\",\t\tCL_CXX,\t  OPT_std_cplusplus98)\t\t     \\\n+  OPT(\"std=c89\",\t\tCL_C,     OPT_std_c89)\t\t\t     \\\n+  OPT(\"std=c99\",\t\tCL_C,     OPT_std_c99)\t\t\t     \\\n+  OPT(\"std=c9x\",\t\tCL_C,     OPT_std_c9x)\t\t\t     \\\n+  OPT(\"std=gnu89\",\t\tCL_C,     OPT_std_gnu89)\t\t     \\\n+  OPT(\"std=gnu99\",\t\tCL_C,     OPT_std_gnu99)\t\t     \\\n+  OPT(\"std=gnu9x\",\t\tCL_C,     OPT_std_gnu9x)\t\t     \\\n+  OPT(\"std=iso9899:1990\",\tCL_C,     OPT_std_iso9899_1990)\t\t     \\\n+  OPT(\"std=iso9899:199409\",\tCL_C,     OPT_std_iso9899_199409)\t     \\\n+  OPT(\"std=iso9899:1999\",\tCL_C,     OPT_std_iso9899_1999)\t\t     \\\n+  OPT(\"std=iso9899:199x\",\tCL_C,     OPT_std_iso9899_199x)\t\t     \\\n+  OPT(\"undef\",\t\t\tCL_ALL,   OPT_undef)\n+\n+#define OPT(text, flags, code) code,\n+enum opt_code\n+{\n+  COMMAND_LINE_OPTIONS\n+  N_OPTS\n+};\n+#undef OPT\n+\n+struct cl_option\n+{\n+  const char *opt_text;\n+  unsigned char opt_len;\n+  unsigned char flags;\n+  ENUM_BITFIELD (opt_code) opt_code : 2 * CHAR_BIT;\n+};\n+\n+#define OPT(text, flags, code) { text, sizeof(text) - 1, flags, code },\n+#ifdef HOST_EBCDIC\n+static struct cl_option cl_options[] =\n+#else\n+static const struct cl_option cl_options[] =\n+#endif\n+{\n+  COMMAND_LINE_OPTIONS\n+};\n+#undef OPT\n+#undef COMMAND_LINE_OPTIONS\n+\n+#ifdef HOST_EBCDIC\n+static int opt_comp PARAMS ((const void *, const void *));\n+\n+/* Run-time sorting of options array.  */\n+static int\n+opt_comp (p1, p2)\n+     const void *p1, *p2;\n+{\n+  return strcmp (((struct cl_option *) p1)->opt_text,\n+\t\t ((struct cl_option *) p2)->opt_text);\n+}\n+#endif\n+\n+/* Perform a binary search to find which option the command-line INPUT\n+   matches.  Returns its index in the option array, and N_OPTS on\n+   failure.\n+\n+   Complications arise since some options can be suffixed with an\n+   argument, and multiple complete matches can occur, e.g. -pedantic\n+   and -pedantic-errors.  Also, some options are only accepted by some\n+   languages.  */\n+static size_t\n+parse_option (input, lang_flag)\n+     const char *input;\n+     int lang_flag;\n+{\n+  size_t md, mn, mx;\n+  size_t opt_len;\n+  size_t wrong_lang = N_OPTS;\n+  int comp;\n+\n+  mn = 0;\n+  mx = N_OPTS;\n+\n+  while (mx > mn)\n+    {\n+      md = (mn + mx) / 2;\n+\n+      opt_len = cl_options[md].opt_len;\n+      comp = memcmp (input, cl_options[md].opt_text, opt_len);\n+\n+      if (comp < 0)\n+\tmx = md;\n+      else if (comp > 0)\n+\tmn = md + 1;\n+      else\n+\t{\n+\t  /* The switch matches.  It it an exact match?  */\n+\t  if (input[opt_len] == '\\0')\n+\t    {\n+\t    exact_match:\n+\t      if (cl_options[md].flags & lang_flag)\n+\t\treturn md;\n+\t      wrong_lang = md;\n+\t      break;\n+\t    }\n+\t  else\n+\t    {\n+\t      mn = md + 1;\n+\n+\t      /* If the switch takes no arguments this is not a proper\n+\t\t match, so we continue the search (e.g. input=\"stdc++\"\n+\t\t match was \"stdc\").  */\n+\t      if (!(cl_options[md].flags & CL_JOINED))\n+\t\tcontinue;\n+\n+\t      /* Is this switch valid for this front end?  */\n+\t      if (!(cl_options[md].flags & lang_flag))\n+\t\t{\n+\t\t  /* If subsequently we don't find a good match,\n+\t\t     report this as a bad match.  */\n+\t\t  wrong_lang = md;\n+\t\t  continue;\n+\t\t}\n+\n+\t      /* Two scenarios remain: we have the switch's argument,\n+\t\t or we match a longer option.  This can happen with\n+\t\t -iwithprefix and -withprefixbefore.  The longest\n+\t\t possible option match succeeds.\n+\n+\t\t Scan forwards, and return an exact match.  Otherwise\n+\t\t return the longest valid option-accepting match (mx).\n+\t\t This loops at most twice with current options.  */\n+\t      mx = md;\n+\t      for (md = md + 1; md < (size_t) N_OPTS; md++)\n+\t\t{\n+\t\t  opt_len = cl_options[md].opt_len;\n+\t\t  if (memcmp (input, cl_options[md].opt_text, opt_len))\n+\t\t    break;\n+\t\t  if (input[opt_len] == '\\0')\n+\t\t    goto exact_match;\n+\t\t  if (cl_options[md].flags & lang_flag\n+\t\t      && cl_options[md].flags & CL_JOINED)\n+\t\t    mx = md;\n+\t\t}\n+\n+\t      return mx;\n+\t    }\n+\t}\n+    }\n+\n+  if (wrong_lang != N_OPTS)\n+    complain_wrong_lang (wrong_lang);\n+\n+  return N_OPTS;\n+}\n+\n+/* Common initialization before parsing options.  */\n+void\n+c_common_init_options (lang)\n+     enum c_language_kind lang;\n+{\n+#ifdef HOST_EBCDIC\n+  /* For non-ASCII hosts, the cl_options array needs to be sorted at\n+     runtime.  */\n+  qsort (cl_options, N_OPTS, sizeof (struct cl_option), opt_comp);\n+#endif\n+\n+  c_language = lang;\n+  parse_in = cpp_create_reader (lang == clk_c || lang == clk_objective_c\n+\t\t\t\t? CLK_GNUC89 : CLK_GNUCXX);\n+  if (lang == clk_objective_c)\n+    cpp_get_options (parse_in)->objc = 1;\n+\n+  flag_const_strings = (lang == clk_cplusplus);\n+  warn_pointer_arith = (lang == clk_cplusplus);\n+  if (lang == clk_c)\n+    warn_sign_compare = -1;\n+\n+  /* Mark as \"unspecified\" (see c_common_post_options).  */\n+  flag_bounds_check = -1;\n+}\n+\n+/* Handle one command-line option in (argc, argv).\n+   Can be called multiple times, to handle multiple sets of options.\n+   Returns number of strings consumed.  */\n+int\n+c_common_decode_option (argc, argv)\n+     int argc;\n+     char **argv;\n+{\n+  size_t opt_index;\n+  const char *opt, *arg = 0;\n+  char *dup = 0;\n+  bool on = true;\n+  int result, lang_flag;\n+  const struct cl_option *option;\n+  enum opt_code code;\n+\n+  result = cpp_handle_option (parse_in, argc, argv);\n+  opt = argv[0];\n+\n+  /* Until handling CPP stuff, ignore non-switches.  */\n+  if (opt[0] != '-' || opt[1] == '\\0')\n+    return result;\n+\n+  switch (c_language)\n+    {\n+    case clk_c:\t\t\tlang_flag = CL_C_ONLY; break;\n+    case clk_cplusplus:\t\tlang_flag = CL_CXX_ONLY; break;\n+    case clk_objective_c:\tlang_flag = CL_OBJC_ONLY; break;\n+    default:\t\t\tabort ();\n+    }\n+\n+  /* Drop the \"no-\" from negative switches.  */\n+  if ((opt[1] == 'W' || opt[1] == 'f')\n+      && opt[2] == 'n' && opt[3] == 'o' && opt[4] == '-')\n+    {\n+      size_t len = strlen (opt) - 3;\n+\n+      dup = xmalloc (len + 1);\n+      dup[0] = '-';\n+      dup[1] = opt[1];\n+      memcpy (dup + 2, opt + 5, len - 2 + 1);\n+      opt = dup;\n+      on = false;\n+    }\n+\n+  /* Skip over '-'.  */\n+  opt_index = parse_option (opt + 1, lang_flag);\n+  if (opt_index == N_OPTS)\n+    goto done;\n+  option = &cl_options[opt_index];\n+\n+  /* Sort out any argument the switch takes.  */\n+  if (option->flags & CL_ARG)\n+    {\n+      if (option->flags & CL_JOINED)\n+\t{\n+\t  /* Have arg point to the original switch.  This is because\n+\t     some code, such as disable_builtin_function, expects its\n+\t     argument to be persistent until the program exits.  */\n+\t  arg = argv[0] + cl_options[opt_index].opt_len + 1;\n+\t  if (!on)\n+\t    arg += strlen (\"no-\");\n+\t  if (*arg == '\\0' && (option->flags & CL_SEPARATE))\n+\t    arg = 0;\n+\t}\n+\n+      /* If arg is still 0, we can only be a CL_SEPARATE switch.  */\n+      if (arg == 0)\n+\t{\n+\t  arg = argv[1];\n+\t  if (!arg)\n+\t    {\n+\t      missing_arg (opt_index);\n+\t      result = argc;\n+\t      goto done;\n+\t    }\n+\t}\n+    }\n+\n+  switch (code = cl_options[opt_index].opt_code)\n+    {\n+    case N_OPTS: /* Shut GCC up.  */\n+      break;\n+\n+    case OPT_E:\n+      flag_preprocess_only = 1;\n+      break;\n+\n+    case OPT_Wall:\n+      set_Wunused (on);\n+      set_Wformat (on);\n+      set_Wimplicit (on);\n+      warn_char_subscripts = on;\n+      warn_missing_braces = on;\n+      warn_multichar = on;\t/* Was C++ only.  */\n+      warn_parentheses = on;\n+      warn_return_type = on;\n+      warn_sequence_point = on;\t/* Was C only.  */\n+      warn_sign_compare = on;\t/* Was C++ only.  */\n+      warn_switch = on;\n+\n+      /* Only warn about unknown pragmas that are not in system\n+\t headers.  */                                        \n+      warn_unknown_pragmas = on;\n+\n+      /* We save the value of warn_uninitialized, since if they put\n+\t -Wuninitialized on the command line, we need to generate a\n+\t warning about not using it without also specifying -O.  */\n+      if (warn_uninitialized != 1)\n+\twarn_uninitialized = (on ? 2 : 0);\n+\n+      if (c_language == clk_c || c_language == clk_objective_c)\n+\t/* We set this to 2 here, but 1 in -Wmain, so -ffreestanding\n+\t   can turn it off only if it's not explicit.  */\n+\twarn_main = on * 2;\n+      else\n+\t{\n+\t  /* C++-specific warnings.  */\n+\t  warn_ctor_dtor_privacy = on;\n+\t  warn_nonvdtor = on;\n+\t  warn_reorder = on;\n+\t  warn_nontemplate_friend = on;\n+\t}\n+      break;\n+\n+    case OPT_Wbad_function_cast:\n+      warn_bad_function_cast = on;\n+      break;\n+\n+    case OPT_Wcast_qual:\n+      warn_cast_qual = on;\n+      break;\n+\n+    case OPT_Wchar_subscripts:\n+      warn_char_subscripts = on;\n+      break;\n+\n+    case OPT_Wconversion:\n+      warn_conversion = on;\n+      break;\n+\n+    case OPT_Wctor_dtor_privacy:\n+      warn_ctor_dtor_privacy = on;\n+      break;\n+\n+    case OPT_Wdeprecated:\n+      warn_deprecated = on;\n+      break;\n+\n+    case OPT_Wdiv_by_zero:\n+      warn_div_by_zero = on;\n+      break;\n+\n+    case OPT_Weffcxx:\n+      warn_ecpp = on;\n+      break;\n+\n+    case OPT_Werror_implicit_function_decl:\n+      if (!on)\n+\t{\n+\t  result = 0;\n+\t  goto done;\n+\t}\n+      mesg_implicit_function_declaration = 2;\n+      break;\n+\n+    case OPT_Wfloat_equal:\n+      warn_float_equal = on;\n+      break;\n+\n+    case OPT_Wformat:\n+      set_Wformat (on);\n+      break;\n+\n+    case OPT_Wformat_eq:\n+      set_Wformat (atoi (arg));\n+      break;\n+\n+    case OPT_Wformat_extra_args:\n+      warn_format_extra_args = on;\n+      break;\n+\n+    case OPT_Wformat_nonliteral:\n+      warn_format_nonliteral = on;\n+      break;\n+\n+    case OPT_Wformat_security:\n+      warn_format_security = on;\n+      break;\n+\n+    case OPT_Wformat_y2k:\n+      warn_format_y2k = on;\n+      break;\n+\n+    case OPT_Wformat_zero_length:\n+      warn_format_zero_length = on;\n+      break;\n+\n+    case OPT_Wimplicit:\n+      set_Wimplicit (on);\n+      break;\n+\n+    case OPT_Wimplicit_function_decl:\n+      mesg_implicit_function_declaration = on;\n+      break;\n+\n+    case OPT_Wimplicit_int:\n+      warn_implicit_int = on;\n+      break;\n+\n+    case OPT_Wlong_long:\n+      warn_long_long = on;\n+      break;\n+\n+    case OPT_Wmain:\n+      if (on)\n+\twarn_main = 1;\n+      else\n+\twarn_main = -1;\n+      break;\n+\n+    case OPT_Wmissing_braces:\n+      warn_missing_braces = on;\n+      break;\n+\n+    case OPT_Wmissing_declarations:\n+      warn_missing_declarations = on;\n+      break;\n+\n+    case OPT_Wmissing_format_attribute:\n+      warn_missing_format_attribute = on;\n+      break;\n+\n+    case OPT_Wmissing_prototypes:\n+      warn_missing_prototypes = on;\n+      break;\n+\n+    case OPT_Wmultichar:\n+      warn_multichar = on;\n+      break;\n+\n+    case OPT_Wnested_externs:\n+      warn_nested_externs = on;\n+      break;\n+\n+    case OPT_Wnon_template_friend:\n+      warn_nontemplate_friend = on;\n+      break;\n+\n+    case OPT_Wnon_virtual_dtor:\n+      warn_nonvdtor = on;\n+      break;\n+\n+    case OPT_Wnonnull:\n+      warn_nonnull = on;\n+      break;\n+\n+    case OPT_Wold_style_cast:\n+      warn_old_style_cast = on;\n+      break;\n+\n+    case OPT_Woverloaded_virtual:\n+      warn_overloaded_virtual = on;\n+      break;\n+\n+    case OPT_Wparentheses:\n+      warn_parentheses = on;\n+      break;\n+\n+    case OPT_Wpmf_conversions:\n+      warn_pmf2ptr = on;\n+      break;\n+\n+    case OPT_Wpointer_arith:\n+      warn_pointer_arith = on;\n+      break;\n+\n+    case OPT_Wprotocol:\n+      warn_protocol = on;\n+      break;\n+\n+    case OPT_Wselector:\n+      warn_selector = on;\n+      break;\n+\n+    case OPT_Wredundant_decls:\n+      warn_redundant_decls = on;\n+      break;\n+\n+    case OPT_Wreorder:\n+      warn_reorder = on;\n+      break;\n+\n+    case OPT_Wreturn_type:\n+      warn_return_type = on;\n+      break;\n+\n+    case OPT_Wsequence_point:\n+      warn_sequence_point = on;\n+      break;\n+\n+    case OPT_Wsign_compare:\n+      warn_sign_compare = on;\n+      break;\n+\n+    case OPT_Wsign_promo:\n+      warn_sign_promo = on;\n+      break;\n+\n+    case OPT_Wstrict_prototypes:\n+      if (!on && c_language == clk_cplusplus)\n+\twarning (\"-Wno-strict-prototypes is not supported in C++\");\n+      else\n+\twarn_strict_prototypes = on;\n+      break;\n+\n+    case OPT_Wsynth:\n+      warn_synth = on;\n+      break;\n+\n+    case OPT_Wtraditional:\n+      warn_traditional = on;\n+      break;\n+\n+    case OPT_Wunknown_pragmas:\n+      /* Set to greater than 1, so that even unknown pragmas in\n+\t system headers will be warned about.  */  \n+      warn_unknown_pragmas = on * 2;\n+      break;\n+\n+    case OPT_Wwrite_strings:\n+      if (c_language == clk_c || c_language == clk_objective_c)\n+\tflag_const_strings = on;\n+      else\n+\twarn_write_strings = on;\n+      break;\n+\n+    case OPT_fcond_mismatch:\n+      if (c_language == clk_c || c_language == clk_objective_c)\n+\t{\n+\t  flag_cond_mismatch = on;\n+\t  break;\n+\t}\n+      /* Fall through.  */\n+\n+    case OPT_fall_virtual:\n+    case OPT_fenum_int_equiv:\n+    case OPT_fguiding_decls:\n+    case OPT_fhonor_std:\n+    case OPT_fhuge_objects:\n+    case OPT_flabels_ok:\n+    case OPT_fname_mangling:\n+    case OPT_fnew_abi:\n+    case OPT_fnonnull_objects:\n+    case OPT_fsquangle:\n+    case OPT_fstrict_prototype:\n+    case OPT_fthis_is_variable:\n+    case OPT_fvtable_thunks:\n+    case OPT_fxref:\n+      warning (\"switch \\\"%s\\\" is no longer supported\", argv[0]);\n+      break;\n+\n+    case OPT_faccess_control:\n+      flag_access_control = on;\n+      break;\n+\n+    case OPT_falt_external_templates:\n+      flag_alt_external_templates = on;\n+      if (on)\n+\tflag_external_templates = true;\n+    cp_deprecated:\n+      warning (\"switch \\\"%s\\\" is deprecated, please see documentation for details\", argv[0]);\n+      break;\n+\n+    case OPT_fasm:\n+      flag_no_asm = !on;\n+      break;\n+\n+    case OPT_fbuiltin:\n+      flag_no_builtin = !on;\n+      break;\n+\n+    case OPT_fbuiltin_:\n+      if (on)\n+\t{\n+\t  result = 0;\n+\t  goto done;\n+\t}\n+      disable_builtin_function (arg);\n+      break;\n+\n+    case OPT_fdollars_in_identifiers:\n+      dollars_in_ident = on;\n+      break;\n+\n+    case OPT_fdump:\n+      if (!on || !dump_switch_p (argv[0] + strlen (\"-f\")))\n+\t{\n+\t  result = 0;\n+\t  goto done;\n+\t}\n+      break;\n+\n+    case OPT_ffreestanding:\n+      on = !on;\n+      /* Fall through...  */\n+    case OPT_fhosted:\n+      flag_hosted = on;\n+      flag_no_builtin = !on;\n+      /* warn_main will be 2 if set by -Wall, 1 if set by -Wmain */\n+      if (!on && warn_main == 2)\n+\twarn_main = 0;\n+      break;\n+\n+    case OPT_fshort_double:\n+      flag_short_double = on;\n+      break;\n+\n+    case OPT_fshort_enums:\n+      flag_short_enums = on;\n+      break;\n+\n+    case OPT_fshort_wchar:\n+      flag_short_wchar = on;\n+      break;\n+\n+    case OPT_fsigned_bitfields:\n+      flag_signed_bitfields = on;\n+      explicit_flag_signed_bitfields = 1;\n+      break;\n+\n+    case OPT_fsigned_char:\n+      flag_signed_char = on;\n+      break;\n+\n+    case OPT_funsigned_bitfields:\n+      flag_signed_bitfields = !on;\n+      explicit_flag_signed_bitfields = 1;\n+      break;\n+\n+    case OPT_funsigned_char:\n+      flag_signed_char = !on;\n+      break;\n+\n+    case OPT_fcheck_new:\n+      flag_check_new = on;\n+      break;\n+\n+    case OPT_fconserve_space:\n+      flag_conserve_space = on;\n+      break;\n+\n+    case OPT_fconst_strings:\n+      flag_const_strings = on;\n+      break;\n+\n+    case OPT_fconstant_string_class:\n+      if (*arg == 0)\n+\terror (\"no class name specified with -fconstant-string-class=\");\n+      else\n+\tconstant_string_class_name = arg;\n+      break;\n+\n+    case OPT_fdefault_inline:\n+      flag_default_inline = on;\n+      break;\n+\n+    case OPT_felide_constructors:\n+      flag_elide_constructors = on;\n+      break;\n+\n+    case OPT_fenforce_eh_specs:\n+      flag_enforce_eh_specs = on;\n+      break;\n+\n+    case OPT_fexternal_templates:\n+      flag_external_templates = on;\n+      goto cp_deprecated;\n+\n+    case OPT_ffor_scope:\n+      flag_new_for_scope = on;\n+      break;\n+\n+    case OPT_fgnu_keywords:\n+      flag_no_gnu_keywords = !on;\n+      break;\n+\n+    case OPT_fgnu_runtime:\n+      flag_next_runtime = !on;\n+      break;\n+\n+    case OPT_fhandle_exceptions:\n+      warning (\"-fhandle-exceptions has been renamed to -fexceptions (and is now on by default)\");\n+      flag_exceptions = on;\n+      break;\n+\n+    case OPT_fimplement_inlines:\n+      flag_implement_inlines = on;\n+      break;\n+\n+    case OPT_fimplicit_inline_templates:\n+      flag_implicit_inline_templates = on;\n+      break;\n+\n+    case OPT_fimplicit_templates:\n+      flag_implicit_templates = on;\n+      break;\n+\n+    case OPT_fms_extensions:\n+      flag_ms_extensions = on;\n+      break;\n+\n+    case OPT_fnext_runtime:\n+      flag_next_runtime = on;\n+      break;\n+\n+    case OPT_fnonansi_builtins:\n+      flag_no_nonansi_builtin = !on;\n+      break;\n+\n+    case OPT_foptional_diags:\n+      flag_optional_diags = on;\n+      break;\n+\n+    case OPT_fpermissive:\n+      flag_permissive = on;\n+      break;\n+\n+    case OPT_frepo:\n+      flag_use_repository = on;\n+      if (on)\n+\tflag_implicit_templates = 0;\n+      break;\n+\n+    case OPT_frtti:\n+      flag_rtti = on;\n+      break;\n+\n+    case OPT_fstats:\n+      flag_detailed_statistics = on;\n+      break;\n+\n+    case OPT_ftemplate_depth:\n+      max_tinst_depth = read_integral_parameter (arg, argv[0], 0);\n+      break;\n+\n+    case OPT_fvtable_gc:\n+      flag_vtable_gc = on;\n+      break;\n+\n+    case OPT_fuse_cxa_atexit:\n+      flag_use_cxa_atexit = on;\n+      break;\n+\n+    case OPT_fweak:\n+      flag_weak = on;\n+      break;\n+\n+    case OPT_gen_decls:\n+      flag_gen_declaration = 1;\n+      break;\n+\n+    case OPT_print_objc_runtime_info:\n+      print_struct_values = 1;\n+      break;\n+\n+    case OPT_std_bad:\n+      error (\"unknown standard \\\"%s\\\"\", arg);\n+      break;\n+\n+      /* Language standards.  We currently recognize:\n+\t -std=iso9899:1990\tsame as -ansi\n+\t -std=iso9899:199409\tISO C as modified in amend. 1\n+\t -std=iso9899:1999\tISO C 99\n+\t -std=c89\t\tsame as -std=iso9899:1990\n+\t -std=c99\t\tsame as -std=iso9899:1999\n+\t -std=gnu89\t\tdefault, iso9899:1990 + gnu extensions\n+\t -std=gnu99\t\tiso9899:1999 + gnu extensions\n+      */\n+\n+    case OPT_std_cplusplus98:\n+      break;\n+\n+    case OPT_std_c89:\n+    case OPT_std_iso9899_1990:\n+    case OPT_std_iso9899_199409:\n+    case OPT_ansi:\n+      /* Note: -ansi is used by both the C and C++ front ends.  */\n+      if (c_language == clk_c || c_language == clk_objective_c)\n+\t{\n+\t  flag_no_asm = 1;\n+\t  flag_writable_strings = 0;\n+\t}\n+      flag_isoc94 = (code == OPT_std_iso9899_199409);\n+      flag_no_gnu_keywords = 1;\n+      flag_no_nonansi_builtin = 1;\n+      flag_noniso_default_format_attributes = 0;\n+      flag_isoc99 = 0;\n+      flag_iso = 1;\n+      break;\n+\n+    case OPT_std_c99:\n+    case OPT_std_c9x:\n+    case OPT_std_iso9899_1999:\n+    case OPT_std_iso9899_199x:\n+      flag_writable_strings = 0;\n+      flag_no_asm = 1;\n+      flag_no_nonansi_builtin = 1;\n+      flag_noniso_default_format_attributes = 0;\n+      flag_isoc99 = 1;\n+      flag_isoc94 = 1;\n+      flag_iso = 1;\n+      break;\n+\n+    case OPT_std_gnu89:\n+      flag_writable_strings = 0;\n+      flag_no_asm = 0;\n+      flag_no_nonansi_builtin = 0;\n+      flag_noniso_default_format_attributes = 1;\n+      flag_isoc99 = 0;\n+      flag_isoc94 = 0;\n+      break;\n+\n+    case OPT_std_gnu99:\n+    case OPT_std_gnu9x:\n+      flag_writable_strings = 0;\n+      flag_no_asm = 0;\n+      flag_no_nonansi_builtin = 0;\n+      flag_noniso_default_format_attributes = 1;\n+      flag_isoc99 = 1;\n+      flag_isoc94 = 1;\n+      break;\n+\n+    case OPT_undef:\n+      flag_undef = 1;\n+      break;\n+    }\n+\n+  result = 1 + (arg == argv[1]);\n+\n+ done:\n+  if (dup)\n+    free (dup);\n+  return result;\n+}\n+\n+/* Post-switch processing.  */\n+bool\n+c_common_post_options ()\n+{\n+  cpp_post_options (parse_in);\n+\n+  flag_inline_trees = 1;\n+\n+  /* Use tree inlining if possible.  Function instrumentation is only\n+     done in the RTL level, so we disable tree inlining.  */\n+  if (! flag_instrument_function_entry_exit)\n+    {\n+      if (!flag_no_inline)\n+\tflag_no_inline = 1;\n+      if (flag_inline_functions)\n+\t{\n+\t  flag_inline_trees = 2;\n+\t  flag_inline_functions = 0;\n+\t}\n+    }\n+\n+  /* If still \"unspecified\", make it match -fbounded-pointers.  */\n+  if (flag_bounds_check == -1)\n+    flag_bounds_check = flag_bounded_pointers;\n+\n+  /* Special format checking options don't work without -Wformat; warn if\n+     they are used.  */\n+  if (warn_format_y2k && !warn_format)\n+    warning (\"-Wformat-y2k ignored without -Wformat\");\n+  if (warn_format_extra_args && !warn_format)\n+    warning (\"-Wformat-extra-args ignored without -Wformat\");\n+  if (warn_format_zero_length && !warn_format)\n+    warning (\"-Wformat-zero-length ignored without -Wformat\");\n+  if (warn_format_nonliteral && !warn_format)\n+    warning (\"-Wformat-nonliteral ignored without -Wformat\");\n+  if (warn_format_security && !warn_format)\n+    warning (\"-Wformat-security ignored without -Wformat\");\n+  if (warn_missing_format_attribute && !warn_format)\n+    warning (\"-Wmissing-format-attribute ignored without -Wformat\");\n+\n+  /* If an error has occurred in cpplib, note it so we fail\n+     immediately.  */\n+  errorcount += cpp_errors (parse_in);\n+\n+  return flag_preprocess_only;\n+}\n+\n+/* Handle setting implicit to ON.  */\n+static void\n+set_Wimplicit (on)\n+     int on;\n+{\n+  warn_implicit = on;\n+  warn_implicit_int = on;\n+  if (on)\n+    {\n+      if (mesg_implicit_function_declaration != 2)\n+\tmesg_implicit_function_declaration = 1;\n+    }\n+  else\n+    mesg_implicit_function_declaration = 0;\n+}\n+\n+/* Complain that switch OPT_INDEX expects an argument but none was\n+   provided.  This is currenlty unused, as the C front ends have no\n+   switches that take separate arguments.  Will be used when cpplib's\n+   switches are integrated.  */\n+static void\n+missing_arg (opt_index)\n+     size_t opt_index ATTRIBUTE_UNUSED;\n+{\n+  abort ();\n+}\n+\n+/* Write a slash-separated list of languages in FLAGS to BUF.  */\n+static void\n+write_langs (buf, flags)\n+     char *buf;\n+     int flags;\n+{\n+  *buf = '\\0';\n+  if (flags & CL_C_ONLY)\n+    strcat (buf, \"C\");\n+  if (flags & CL_OBJC_ONLY)\n+    {\n+      if (*buf)\n+\tstrcat (buf, \"/\");\n+      strcat (buf, \"ObjC\");\n+    }\n+  if (flags & CL_CXX_ONLY)\n+    {\n+      if (*buf)\n+\tstrcat (buf, \"/\");\n+      strcat (buf, \"C++\");\n+    }\n+}\n+\n+/* Complain that switch OPT_INDEX does not apply to this front end.  */\n+static void\n+complain_wrong_lang (opt_index)\n+     size_t opt_index;\n+{\n+  char ok_langs[60], bad_langs[60];\n+  int ok_flags = cl_options[opt_index].flags;\n+\n+  write_langs (ok_langs, ok_flags);\n+  write_langs (bad_langs, ~ok_flags);\n+  warning (\"\\\"-%s\\\" is valid for %s but not for %s\",\n+\t   cl_options[opt_index].opt_text, ok_langs, bad_langs);\n+}"}, {"sha": "74133b35d53c94149f7df776f3a8dc207f6c1793", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "patch": "@@ -195,7 +195,6 @@ extern void c_dup_lang_specific_decl\t\tPARAMS ((tree));\n extern void c_print_identifier\t\t\tPARAMS ((FILE *, tree, int));\n extern tree build_array_declarator              PARAMS ((tree, tree, int, int));\n extern tree build_enumerator                    PARAMS ((tree, tree));\n-extern int  c_decode_option                     PARAMS ((int, char **));\n extern void check_for_loop_decls                PARAMS ((void));\n extern void clear_parm_order                    PARAMS ((void));\n extern int  complete_array_type                 PARAMS ((tree, tree, int));"}, {"sha": "f5fe87b8533c6277e5a40a8746c1d0d019b5956d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "patch": "@@ -1,3 +1,11 @@\n+2002-08-07  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* Make-lang.in (CXX_C_OBJS): Update.\n+\t* cp-lang.c (LANG_HOOKS_DECODE_OPTION): Use c_common_decode_option.\n+\t* cp-tree.h (cxx_decode_option): Remove.\n+\t* decl2.c (compare_options, lang_f_options, unsupported_options,\n+\tcxx_decode_option): Remove.\n+\n 2002-08-06  Gabriel Dos Reis  <gdr@nerim.net>\n \n \t* typeck.c (build_x_unary_op): Handle pointer-to-member."}, {"sha": "738331f262914bfa36eee9e5da38fd7f45440271", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "patch": "@@ -96,7 +96,7 @@ $(DEMANGLER_PROG): cxxmain.o underscore.o $(LIBDEPS)\n # The compiler itself.\n # Shared with C front end:\n CXX_C_OBJS = attribs.o c-common.o c-format.o c-pragma.o c-semantics.o c-lex.o \\\n-\tc-dump.o $(CXX_TARGET_OBJS) c-pretty-print.o\n+\tc-dump.o $(CXX_TARGET_OBJS) c-pretty-print.o c-opts.o\n \n # Language-specific object files.\n CXX_OBJS = cp/call.o cp/decl.o cp/expr.o cp/pt.o cp/typeck2.o \\"}, {"sha": "f2689b5da97e7c6c555e7b9e533c900a519c48a6", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "patch": "@@ -44,7 +44,7 @@ static tree cp_expr_size PARAMS ((tree));\n #undef LANG_HOOKS_INIT_OPTIONS\n #define LANG_HOOKS_INIT_OPTIONS cxx_init_options\n #undef LANG_HOOKS_DECODE_OPTION\n-#define LANG_HOOKS_DECODE_OPTION cxx_decode_option\n+#define LANG_HOOKS_DECODE_OPTION c_common_decode_option\n #undef LANG_HOOKS_POST_OPTIONS\n #define LANG_HOOKS_POST_OPTIONS c_common_post_options\n #undef LANG_HOOKS_GET_ALIAS_SET"}, {"sha": "b1af9fbc56dae307afb6c8519fb090fae06c0d96", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "patch": "@@ -3744,7 +3744,6 @@ extern bool have_extern_spec;\n \n /* in decl2.c */\n extern int check_java_method\t\t\tPARAMS ((tree));\n-extern int cxx_decode_option\t\t\tPARAMS ((int, char **));\n extern int grok_method_quals\t\t\tPARAMS ((tree, tree, tree));\n extern void warn_if_unknown_interface\t\tPARAMS ((tree));\n extern void grok_x_components\t\t\tPARAMS ((tree));"}, {"sha": "26442068c4e62939f9d7a807185ff31f447cd16b", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 318, "changes": 318, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "patch": "@@ -89,7 +89,6 @@ static tree prune_vars_needing_no_initialization PARAMS ((tree));\n static void write_out_vars PARAMS ((tree));\n static void import_export_class\tPARAMS ((tree));\n static tree key_method PARAMS ((tree));\n-static int compare_options PARAMS ((const PTR, const PTR));\n static tree get_guard_bits PARAMS ((tree));\n \n /* A list of static class variables.  This is needed, because a\n@@ -122,323 +121,6 @@ tree static_dtors;\n \n tree global_namespace;\n \f\n-/* Table of language-dependent -f options.\n-   STRING is the option name.  VARIABLE is the address of the variable.\n-   ON_VALUE is the value to store in VARIABLE\n-    if `-fSTRING' is seen as an option.\n-   (If `-fno-STRING' is seen as an option, the opposite value is stored.)  */\n-\n-static const struct { const char *const string; int *const variable; const int on_value;}\n-lang_f_options[] =\n-{\n-  /* C/C++ options.  */\n-  {\"signed-char\", &flag_signed_char, 1},\n-  {\"unsigned-char\", &flag_signed_char, 0},\n-  {\"signed-bitfields\", &flag_signed_bitfields, 1},\n-  {\"unsigned-bitfields\", &flag_signed_bitfields, 0},\n-  {\"short-enums\", &flag_short_enums, 1},\n-  {\"short-double\", &flag_short_double, 1},\n-  {\"short-wchar\", &flag_short_wchar, 1},\n-  {\"asm\", &flag_no_asm, 0},\n-  {\"builtin\", &flag_no_builtin, 0},\n-\n-  /* C++-only options.  */\n-  {\"access-control\", &flag_access_control, 1},\n-  {\"check-new\", &flag_check_new, 1},\n-  {\"conserve-space\", &flag_conserve_space, 1},\n-  {\"const-strings\", &flag_const_strings, 1},\n-  {\"default-inline\", &flag_default_inline, 1},\n-  {\"dollars-in-identifiers\", &dollars_in_ident, 1},\n-  {\"elide-constructors\", &flag_elide_constructors, 1},\n-  {\"enforce-eh-specs\", &flag_enforce_eh_specs, 1},\n-  {\"external-templates\", &flag_external_templates, 1},\n-  {\"for-scope\", &flag_new_for_scope, 2},\n-  {\"gnu-keywords\", &flag_no_gnu_keywords, 0},\n-  {\"handle-exceptions\", &flag_exceptions, 1},\n-  {\"implement-inlines\", &flag_implement_inlines, 1},\n-  {\"implicit-inline-templates\", &flag_implicit_inline_templates, 1},\n-  {\"implicit-templates\", &flag_implicit_templates, 1},\n-  {\"ms-extensions\", &flag_ms_extensions, 1},\n-  {\"nonansi-builtins\", &flag_no_nonansi_builtin, 0},\n-  {\"optional-diags\", &flag_optional_diags, 1},\n-  {\"permissive\", &flag_permissive, 1},\n-  {\"repo\", &flag_use_repository, 1},\n-  {\"rtti\", &flag_rtti, 1},\n-  {\"stats\", &flag_detailed_statistics, 1},\n-  {\"vtable-gc\", &flag_vtable_gc, 1},\n-  {\"use-cxa-atexit\", &flag_use_cxa_atexit, 1},\n-  {\"weak\", &flag_weak, 1}\n-};\n-\n-/* The list of `-f' options that we no longer support.  The `-f'\n-   prefix is not given in this table.  The `-fno-' variants are not\n-   listed here.  This table must be kept in alphabetical order.  */\n-static const char * const unsupported_options[] = {\n-  \"all-virtual\",\n-  \"cond-mismatch\",\n-  \"enum-int-equiv\",\n-  \"guiding-decls\",\n-  \"honor-std\",\n-  \"huge-objects\",\n-  \"labels-ok\",\n-  \"new-abi\",\n-  \"nonnull-objects\",\n-  \"squangle\",\n-  \"strict-prototype\",\n-  \"this-is-variable\",\n-  \"vtable-thunks\",\n-  \"xref\"\n-};\n-\n-/* Compare two option strings, pointed two by P1 and P2, for use with\n-   bsearch.  */\n-\n-static int\n-compare_options (p1, p2)\n-     const PTR p1;\n-     const PTR p2;\n-{\n-  return strcmp (*((const char *const *) p1), *((const char *const *) p2));\n-}\n-\n-/* Decode the string P as a language-specific option.\n-   Return the number of strings consumed for a valid option.\n-   Otherwise return 0.  Should not complain if it does not\n-   recognise the option.  */\n-\n-int   \n-cxx_decode_option (argc, argv)\n-     int argc;\n-     char **argv;\n-{\n-  int strings_processed;\n-  const char *p = argv[0];\n-\n-  strings_processed = cpp_handle_option (parse_in, argc, argv);\n-\n-  if (p[0] == '-' && p[1] == 'f')\n-    {\n-      /* Some kind of -f option.\n-\t P's value is the option sans `-f'.\n-\t Search for it in the table of options.  */\n-      const char *option_value = NULL;\n-      const char *positive_option;\n-      size_t j;\n-\n-      p += 2;\n-      /* Try special -f options.  */\n-\n-      /* See if this is one of the options no longer supported.  We\n-\t used to support these options, so we continue to accept them,\n-\t with a warning.  */\n-      if (strncmp (p, \"no-\", strlen (\"no-\")) == 0)\n-\tpositive_option = p + strlen (\"no-\");\n-      else\n-\tpositive_option = p;\n-\n-      /* If the option is present, issue a warning.  Indicate to our\n-\t caller that the option was processed successfully.  */\n-      if (bsearch (&positive_option, \n-\t\t   unsupported_options, \n-\t\t   ARRAY_SIZE (unsupported_options),\n-\t\t   sizeof (unsupported_options[0]),\n-\t\t   compare_options))\n-\t{\n-\t  warning (\"-f%s is no longer supported\", p);\n-\t  return 1;\n-\t}\n-\n-      if (!strcmp (positive_option, \"handle-exceptions\"))\n-\twarning (\"-fhandle-exceptions has been renamed to -fexceptions (and is now on by default)\");\n-      else if (!strcmp (p, \"alt-external-templates\"))\n-\t{\n-\t  flag_external_templates = 1;\n-\t  flag_alt_external_templates = 1;\n-          cp_deprecated (\"-falt-external-templates\");\n-\t}\n-      else if (!strcmp (p, \"no-alt-external-templates\"))\n-\tflag_alt_external_templates = 0;\n-      else if (!strcmp (p, \"repo\"))\n-\t{\n-\t  flag_use_repository = 1;\n-\t  flag_implicit_templates = 0;\n-\t}\n-      else if (!strcmp (p, \"external-templates\"))\n-        {\n-          flag_external_templates = 1;\n-          cp_deprecated (\"-fexternal-templates\");\n-        }\n-      else if ((option_value\n-                = skip_leading_substring (p, \"template-depth-\")))\n-\tmax_tinst_depth\n-\t  = read_integral_parameter (option_value, p - 2, max_tinst_depth);\n-      else if ((option_value\n-                = skip_leading_substring (p, \"name-mangling-version-\")))\n-\t{\n-\t  warning (\"-fname-mangling-version is no longer supported\");\n-\t  return 1;\n-\t}\n-      else if ((option_value = skip_leading_substring (p, \"no-builtin-\")))\n-\tdisable_builtin_function (option_value);\n-      else if (dump_switch_p (p))\n-\t;\n-      else \n-\t{\n-\t  int found = 0;\n-\n-\t  for (j = 0; !found && j < ARRAY_SIZE (lang_f_options); j++)\n-\t    {\n-\t      if (!strcmp (p, lang_f_options[j].string))\n-\t\t{\n-\t\t  *lang_f_options[j].variable = lang_f_options[j].on_value;\n-\t\t  /* A goto here would be cleaner,\n-\t\t     but breaks the VAX pcc.  */\n-\t\t  found = 1;\n-\t\t}\n-\t      else if (p[0] == 'n' && p[1] == 'o' && p[2] == '-'\n-\t\t       && ! strcmp (p+3, lang_f_options[j].string))\n-\t\t{\n-\t\t  *lang_f_options[j].variable = ! lang_f_options[j].on_value;\n-\t\t  found = 1;\n-\t\t}\n-\t    }\n-\n-\t  return found;\n-\t}\n-    }\n-  else if (p[0] == '-' && p[1] == 'W')\n-    {\n-      int setting = 1;\n-\n-      /* The -W options control the warning behavior of the compiler.  */\n-      p += 2;\n-\n-      if (p[0] == 'n' && p[1] == 'o' && p[2] == '-')\n-\tsetting = 0, p += 3;\n-\n-      if (!strcmp (p, \"implicit\"))\n-\twarn_implicit = setting;\n-      else if (!strcmp (p, \"long-long\"))\n-\twarn_long_long = setting;\n-      else if (!strcmp (p, \"return-type\"))\n-\twarn_return_type = setting;\n-      else if (!strcmp (p, \"ctor-dtor-privacy\"))\n-\twarn_ctor_dtor_privacy = setting;\n-      else if (!strcmp (p, \"write-strings\"))\n-\twarn_write_strings = setting;\n-      else if (!strcmp (p, \"cast-qual\"))\n-\twarn_cast_qual = setting;\n-      else if (!strcmp (p, \"char-subscripts\"))\n-\twarn_char_subscripts = setting;\n-      else if (!strcmp (p, \"pointer-arith\"))\n-\twarn_pointer_arith = setting;\n-      else if (!strcmp (p, \"missing-prototypes\"))\n-\twarn_missing_prototypes = setting;\n-      else if (!strcmp (p, \"strict-prototypes\"))\n-\t{\n-\t  if (setting == 0)\n-\t    warning (\"-Wno-strict-prototypes is not supported in C++\");\n-\t}\n-      else if (!strcmp (p, \"redundant-decls\"))\n-\twarn_redundant_decls = setting;\n-      else if (!strcmp (p, \"missing-braces\"))\n-\twarn_missing_braces = setting;\n-      else if (!strcmp (p, \"sign-compare\"))\n-\twarn_sign_compare = setting;\n-      else if (!strcmp (p, \"float-equal\"))\n-\twarn_float_equal = setting;\n-      else if (!strcmp (p, \"format\"))\n-\tset_Wformat (setting);\n-      else if (!strcmp (p, \"format=2\"))\n-\tset_Wformat (2);\n-      else if (!strcmp (p, \"format-y2k\"))\n-\twarn_format_y2k = setting;\n-      else if (!strcmp (p, \"format-extra-args\"))\n-\twarn_format_extra_args = setting;\n-      else if (!strcmp (p, \"format-nonliteral\"))\n-\twarn_format_nonliteral = setting;\n-      else if (!strcmp (p, \"format-security\"))\n-\twarn_format_security = setting;\n-      else if (!strcmp (p, \"missing-format-attribute\"))\n-\twarn_missing_format_attribute = setting;\n-      else if (!strcmp (p, \"conversion\"))\n-\twarn_conversion = setting;\n-      else if (!strcmp (p, \"parentheses\"))\n-\twarn_parentheses = setting;\n-      else if (!strcmp (p, \"non-virtual-dtor\"))\n-\twarn_nonvdtor = setting;\n-      else if (!strcmp (p, \"reorder\"))\n-\twarn_reorder = setting;\n-      else if (!strcmp (p, \"synth\"))\n-\twarn_synth = setting;\n-      else if (!strcmp (p, \"pmf-conversions\"))\n-\twarn_pmf2ptr = setting;\n-      else if (!strcmp (p, \"effc++\"))\n-\twarn_ecpp = setting;\n-      else if (!strcmp (p, \"sign-promo\"))\n-\twarn_sign_promo = setting;\n-      else if (!strcmp (p, \"old-style-cast\"))\n-\twarn_old_style_cast = setting;\n-      else if (!strcmp (p, \"overloaded-virtual\"))\n-\twarn_overloaded_virtual = setting;\n-      else if (!strcmp (p, \"multichar\"))\n-\twarn_multichar = setting;\n-      else if (!strcmp (p, \"unknown-pragmas\"))\n-\t/* Set to greater than 1, so that even unknown pragmas in\n-\t   system headers will be warned about.  */  \n-\twarn_unknown_pragmas = setting * 2;\n-      else if (!strcmp (p, \"non-template-friend\"))\n-\twarn_nontemplate_friend = setting;\n-      else if (!strcmp (p, \"deprecated\"))\n-        warn_deprecated = setting;\n-      else if (!strcmp (p, \"all\"))\n-\t{\n-\t  warn_return_type = setting;\n-\t  set_Wunused (setting);\n-\t  warn_implicit = setting;\n-\t  warn_switch = setting;\n-\t  set_Wformat (setting);\n-\t  warn_parentheses = setting;\n-\t  warn_missing_braces = setting;\n-\t  warn_sign_compare = setting;\n-\t  warn_multichar = setting;\n-\t  /* We save the value of warn_uninitialized, since if they put\n-\t     -Wuninitialized on the command line, we need to generate a\n-\t     warning about not using it without also specifying -O.  */\n-\t  if (warn_uninitialized != 1)\n-\t    warn_uninitialized = (setting ? 2 : 0);\n-\t  /* Only warn about unknown pragmas that are not in system\n-\t     headers.  */                                        \n-\t  warn_unknown_pragmas = 1;       \n-\n-\t  /* C++-specific warnings.  */\n-\t  warn_ctor_dtor_privacy = setting;\n-\t  warn_nonvdtor = setting;\n-\t  warn_reorder = setting;\n-\t  warn_nontemplate_friend = setting;           \n-\t}\n-      else return strings_processed;\n-    }\n-  else if (!strcmp (p, \"-E\"))\n-    flag_preprocess_only = 1;\n-  else if (!strcmp (p, \"-undef\"))\n-    flag_undef = 1;\n-  else if (!strcmp (p, \"-ansi\"))\n-    flag_no_nonansi_builtin = 1, flag_iso = 1,\n-    flag_noniso_default_format_attributes = 0, flag_no_gnu_keywords = 1;\n-#ifdef SPEW_DEBUG\n-  /* Undocumented, only ever used when you're invoking cc1plus by hand, since\n-     it's probably safe to assume no sane person would ever want to use this\n-     under normal circumstances.  */\n-  else if (!strcmp (p, \"-spew-debug\"))\n-    spew_debug = 1;\n-#endif\n-  else\n-    return strings_processed;\n-\n-  return 1;\n-}\n-\f\n /* Incorporate `const' and `volatile' qualifiers for member functions.\n    FUNCTION is a TYPE_DECL or a FUNCTION_DECL.\n    QUALS is a list of qualifiers.  Returns any explicit"}, {"sha": "8ca8f8b0d6a5491b319323e704df56001ebb8096", "filename": "gcc/doc/passes.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fdoc%2Fpasses.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fdoc%2Fpasses.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fpasses.texi?ref=0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "patch": "@@ -109,6 +109,7 @@ The files\n @file{c-common.c},\n @file{c-common.def},\n @file{c-format.c},\n+@file{c-opts.c},\n @file{c-pragma.c},\n @file{c-semantics.c},\n and"}, {"sha": "7ebb9f2a20252a02673ff39b603599eec845cb97", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "patch": "@@ -495,47 +495,6 @@ finish_file ()\n   if (gen_declaration_file)\n     fclose (gen_declaration_file);\n }\n-\n-int\n-objc_decode_option (argc, argv)\n-     int argc;\n-     char **argv;\n-{\n-  const char *p = argv[0];\n-\n-  if (!strcmp (p, \"-gen-decls\"))\n-    flag_gen_declaration = 1;\n-  else if (!strcmp (p, \"-Wselector\"))\n-    warn_selector = 1;\n-  else if (!strcmp (p, \"-Wno-selector\"))\n-    warn_selector = 0;\n-  else if (!strcmp (p, \"-Wprotocol\"))\n-    warn_protocol = 1;\n-  else if (!strcmp (p, \"-Wno-protocol\"))\n-    warn_protocol = 0;\n-  else if (!strcmp (p, \"-fgnu-runtime\"))\n-    flag_next_runtime = 0;\n-  else if (!strcmp (p, \"-fno-next-runtime\"))\n-    flag_next_runtime = 0;\n-  else if (!strcmp (p, \"-fno-gnu-runtime\"))\n-    flag_next_runtime = 1;\n-  else if (!strcmp (p, \"-fnext-runtime\"))\n-    flag_next_runtime = 1;\n-  else if (!strcmp (p, \"-print-objc-runtime-info\"))\n-    print_struct_values = 1;\n-#define CSTSTRCLASS \"-fconstant-string-class=\"\n-  else if (!strncmp (p, CSTSTRCLASS, sizeof(CSTSTRCLASS) - 2)) {\n-    if (strlen (argv[0]) <= strlen (CSTSTRCLASS))\n-      error (\"no class name specified as argument to -fconstant-string-class\");\n-    constant_string_class_name = xstrdup(argv[0] + sizeof(CSTSTRCLASS) - 1);\n-  }\n-#undef CSTSTRCLASS\n-  else\n-    return c_decode_option (argc, argv);\n-\n-  return 1;\n-}\n-\n \f\n static tree\n define_decl (declarator, declspecs)"}, {"sha": "aebccf8af52a47ec5b279eb6cf45da7d0b0245be", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "patch": "@@ -24,7 +24,6 @@ Boston, MA 02111-1307, USA.  */\n /*** Public Interface (procedures) ***/\n \n const char *objc_init\t\t\t\tPARAMS ((const char *));\n-int objc_decode_option\t\t\t\tPARAMS ((int, char **));\n const char *objc_printable_name\t\t\tPARAMS ((tree, int));\n \n /* used by yyparse */"}, {"sha": "111428abffd1c50e7780250d666ccfa847b57bc5", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "patch": "@@ -40,7 +40,7 @@ static void objc_init_options                   PARAMS ((void));\n #undef LANG_HOOKS_INIT_OPTIONS\n #define LANG_HOOKS_INIT_OPTIONS objc_init_options\n #undef LANG_HOOKS_DECODE_OPTION\n-#define LANG_HOOKS_DECODE_OPTION objc_decode_option\n+#define LANG_HOOKS_DECODE_OPTION c_common_decode_option\n #undef LANG_HOOKS_POST_OPTIONS\n #define LANG_HOOKS_POST_OPTIONS c_common_post_options\n #undef LANG_HOOKS_GET_ALIAS_SET"}, {"sha": "63175ca31232ce9e2f32bd7fca66001a43d0dd39", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "patch": "@@ -1,3 +1,10 @@\n+2002-08-07  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* objc.dg/const-str-2.m: Update.\n+\t* gcc.dg/cpp/c++98.c: Change to C extension.\n+\t* gcc.dg/cpp/c++98-pedantic.c: Similarly.\n+\t* gcc.dg/cpp/cpp.exp: Process .C extensions too.\n+\n 2002-08-06  Aldy Hernandez  <aldyh@redhat.com>\n \n         * testsuite/gcc.dg/tls/diag-3.c: New."}, {"sha": "61e13c5d145a51117636edaff56a938812c78a02", "filename": "gcc/testsuite/gcc.dg/cpp/c++98-pedantic.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc%2B%2B98-pedantic.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc%2B%2B98-pedantic.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc%2B%2B98-pedantic.C?ref=0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "previous_filename": "gcc/testsuite/gcc.dg/cpp/c++98-pedantic.c"}, {"sha": "0ec4f359f0468f1183f3836d564f1515344a8cf0", "filename": "gcc/testsuite/gcc.dg/cpp/c++98.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc%2B%2B98.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc%2B%2B98.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc%2B%2B98.C?ref=0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "previous_filename": "gcc/testsuite/gcc.dg/cpp/c++98.c"}, {"sha": "d477433c3b27f00a8c3e8112fcbe103229257b95", "filename": "gcc/testsuite/gcc.dg/cpp/cpp.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcpp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcpp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcpp.exp?ref=0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "patch": "@@ -36,7 +36,7 @@ if ![info exists DEFAULT_CFLAGS] then {\n dg-init\n \n # Main loop.\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \\\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n \t\"\" $DEFAULT_CFLAGS\n \n # All done."}, {"sha": "779d40aff4e21907052567bdc68c59c43a35da8d", "filename": "gcc/testsuite/objc.dg/const-str-2.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6f2917cfcbfbaccca804e0f038ac8c4457f772/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-2.m?ref=0b6f2917cfcbfbaccca804e0f038ac8c4457f772", "patch": "@@ -1,7 +1,7 @@\n /* Test the -fconstant-string-class flag error.  */\n /* { dg-do compile } */\n-/* { dg-options \"-fconstant-string-class\" } */\n+/* { dg-options \"-fconstant-string-class=\" } */\n \n-{ dg-error \"no class name specified as argument to -fconstant-string-class\" \"\" { target *-*-* } 0 }\n+{ dg-error \"no class name specified\" \"\" { target *-*-* } 0 }\n \n void foo () {}"}]}