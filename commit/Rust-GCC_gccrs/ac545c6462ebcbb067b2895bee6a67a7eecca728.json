{"sha": "ac545c6462ebcbb067b2895bee6a67a7eecca728", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM1NDVjNjQ2MmViY2JiMDY3YjI4OTViZWU2YTY3YTdlZWNjYTcyOA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-09-05T06:59:36Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-09-05T06:59:36Z"}, "message": "fold-const.c (all_ones_mask_p, [...]): Constify.\n\n\t* fold-const.c (all_ones_mask_p, sign_bit_p, simple_operand_p,\n\tfold_real_zero_addition_p, reorder_operands_p,\n\tdiv_if_zero_remainder, fold_undefer_overflow_warnings,\n\tint_binop_types_match_p, fold_convert_const_int_from_int,\n\tfold_convert_const_int_from_real,\n\tfold_convert_const_int_from_fixed,\n\tfold_convert_const_real_from_real,\n\tfold_convert_const_real_from_fixed,\n\tfold_convert_const_fixed_from_fixed,\n\tfold_convert_const_fixed_from_int,\n\tfold_convert_const_fixed_from_real, maybe_lvalue_p,\n\tfold_checksum_tree, fold_check_failed, print_fold_checksum,\n\tdebug_fold_checksum, multiple_of_p): Constify.\n\t* tree-flow-inline.h (get_lineno): Likewise.\n\t* tree-flow.h (get_lineno): Likewise.\n\t* tree-object-size.c (compute_object_offset, addr_object_size,\n\talloc_object_size, pass_through_call): Likewise.\n\t* tree-pretty-print.c (op_symbol, print_call_name,\n\tprint_struct_decl, do_niy): Likewise.\n\t* tree.h (fold_undefer_overflow_warnings, multiple_of_p,\n\tdebug_fold_checksum): Likewise.\n\nFrom-SVN: r128120", "tree": {"sha": "171267b91dec3b204cb26bca86f8cc66a3ccb134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/171267b91dec3b204cb26bca86f8cc66a3ccb134"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac545c6462ebcbb067b2895bee6a67a7eecca728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac545c6462ebcbb067b2895bee6a67a7eecca728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac545c6462ebcbb067b2895bee6a67a7eecca728", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac545c6462ebcbb067b2895bee6a67a7eecca728/comments", "author": null, "committer": null, "parents": [{"sha": "bda9fc3983d164a64512e0a5d5d845ea008502cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bda9fc3983d164a64512e0a5d5d845ea008502cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bda9fc3983d164a64512e0a5d5d845ea008502cc"}], "stats": {"total": 148, "additions": 86, "deletions": 62}, "files": [{"sha": "ab495fee056157b14dee88250cf80d0028663fd7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac545c6462ebcbb067b2895bee6a67a7eecca728/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac545c6462ebcbb067b2895bee6a67a7eecca728/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac545c6462ebcbb067b2895bee6a67a7eecca728", "patch": "@@ -1,3 +1,27 @@\n+2007-09-05  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* fold-const.c (all_ones_mask_p, sign_bit_p, simple_operand_p,\n+\tfold_real_zero_addition_p, reorder_operands_p,\n+\tdiv_if_zero_remainder, fold_undefer_overflow_warnings,\n+\tint_binop_types_match_p, fold_convert_const_int_from_int,\n+\tfold_convert_const_int_from_real,\n+\tfold_convert_const_int_from_fixed,\n+\tfold_convert_const_real_from_real,\n+\tfold_convert_const_real_from_fixed,\n+\tfold_convert_const_fixed_from_fixed,\n+\tfold_convert_const_fixed_from_int,\n+\tfold_convert_const_fixed_from_real, maybe_lvalue_p,\n+\tfold_checksum_tree, fold_check_failed, print_fold_checksum,\n+\tdebug_fold_checksum, multiple_of_p): Constify.\n+\t* tree-flow-inline.h (get_lineno): Likewise.\n+\t* tree-flow.h (get_lineno): Likewise.\n+\t* tree-object-size.c (compute_object_offset, addr_object_size,\n+\talloc_object_size, pass_through_call): Likewise.\n+\t* tree-pretty-print.c (op_symbol, print_call_name,\n+\tprint_struct_decl, do_niy): Likewise.\n+\t* tree.h (fold_undefer_overflow_warnings, multiple_of_p,\n+\tdebug_fold_checksum): Likewise.\n+\n 2007-09-04  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR middle-end/33029"}, {"sha": "7a90b5e8508eed1b2baf2edb62b2e63bbb4fa0ab", "filename": "gcc/fold-const.c", "status": "modified", "additions": 41, "deletions": 40, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac545c6462ebcbb067b2895bee6a67a7eecca728/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac545c6462ebcbb067b2895bee6a67a7eecca728/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=ac545c6462ebcbb067b2895bee6a67a7eecca728", "patch": "@@ -114,9 +114,9 @@ static tree optimize_bit_field_compare (enum tree_code, tree, tree, tree);\n static tree decode_field_reference (tree, HOST_WIDE_INT *, HOST_WIDE_INT *,\n \t\t\t\t    enum machine_mode *, int *, int *,\n \t\t\t\t    tree *, tree *);\n-static int all_ones_mask_p (tree, int);\n-static tree sign_bit_p (tree, tree);\n-static int simple_operand_p (tree);\n+static int all_ones_mask_p (const_tree, int);\n+static tree sign_bit_p (tree, const_tree);\n+static int simple_operand_p (const_tree);\n static tree range_binop (enum tree_code, tree, tree, int, tree, int);\n static tree range_predecessor (tree);\n static tree range_successor (tree);\n@@ -134,12 +134,12 @@ static tree extract_muldiv_1 (tree, tree, enum tree_code, tree, bool *);\n static tree fold_binary_op_with_conditional_arg (enum tree_code, tree,\n \t\t\t\t\t\t tree, tree,\n \t\t\t\t\t\t tree, tree, int);\n-static bool fold_real_zero_addition_p (tree, tree, int);\n+static bool fold_real_zero_addition_p (const_tree, const_tree, int);\n static tree fold_mathfn_compare (enum built_in_function, enum tree_code,\n \t\t\t\t tree, tree, tree);\n static tree fold_inf_compare (enum tree_code, tree, tree, tree);\n static tree fold_div_compare (enum tree_code, tree, tree, tree);\n-static bool reorder_operands_p (tree, tree);\n+static bool reorder_operands_p (const_tree, const_tree);\n static tree fold_negate_const (tree, tree);\n static tree fold_not_const (tree, tree);\n static tree fold_relational_const (enum tree_code, tree, tree, tree);\n@@ -877,7 +877,7 @@ div_and_round_double (enum tree_code code, int uns,\n    Otherwise returns NULL_TREE.  */\n \n static tree\n-div_if_zero_remainder (enum tree_code code, tree arg1, tree arg2)\n+div_if_zero_remainder (enum tree_code code, const_tree arg1, const_tree arg2)\n {\n   unsigned HOST_WIDE_INT int1l, int2l;\n   HOST_WIDE_INT int1h, int2h;\n@@ -952,7 +952,7 @@ fold_defer_overflow_warnings (void)\n    deferred code.  */\n \n void\n-fold_undefer_overflow_warnings (bool issue, tree stmt, int code)\n+fold_undefer_overflow_warnings (bool issue, const_tree stmt, int code)\n {\n   const char *warnmsg;\n   location_t locus;\n@@ -1598,7 +1598,7 @@ associate_trees (tree t1, tree t2, enum tree_code code, tree type)\n    for use in int_const_binop, size_binop and size_diffop.  */\n \n static bool\n-int_binop_types_match_p (enum tree_code code, tree type1, tree type2)\n+int_binop_types_match_p (enum tree_code code, const_tree type1, const_tree type2)\n {\n   if (TREE_CODE (type1) != INTEGER_TYPE && !POINTER_TYPE_P (type1))\n     return false;\n@@ -2110,7 +2110,7 @@ size_diffop (tree arg0, tree arg1)\n    INTEGER_CST to another integer type.  */\n \n static tree\n-fold_convert_const_int_from_int (tree type, tree arg1)\n+fold_convert_const_int_from_int (tree type, const_tree arg1)\n {\n   tree t;\n \n@@ -2133,7 +2133,7 @@ fold_convert_const_int_from_int (tree type, tree arg1)\n    to an integer type.  */\n \n static tree\n-fold_convert_const_int_from_real (enum tree_code code, tree type, tree arg1)\n+fold_convert_const_int_from_real (enum tree_code code, tree type, const_tree arg1)\n {\n   int overflow = 0;\n   tree t;\n@@ -2211,7 +2211,7 @@ fold_convert_const_int_from_real (enum tree_code code, tree type, tree arg1)\n    FIXED_CST to an integer type.  */\n \n static tree\n-fold_convert_const_int_from_fixed (tree type, tree arg1)\n+fold_convert_const_int_from_fixed (tree type, const_tree arg1)\n {\n   tree t;\n   double_int temp, temp_trunc;\n@@ -2266,7 +2266,7 @@ fold_convert_const_int_from_fixed (tree type, tree arg1)\n    to another floating point type.  */\n \n static tree\n-fold_convert_const_real_from_real (tree type, tree arg1)\n+fold_convert_const_real_from_real (tree type, const_tree arg1)\n {\n   REAL_VALUE_TYPE value;\n   tree t;\n@@ -2282,7 +2282,7 @@ fold_convert_const_real_from_real (tree type, tree arg1)\n    to a floating point type.  */\n \n static tree\n-fold_convert_const_real_from_fixed (tree type, tree arg1)\n+fold_convert_const_real_from_fixed (tree type, const_tree arg1)\n {\n   REAL_VALUE_TYPE value;\n   tree t;\n@@ -2300,7 +2300,7 @@ fold_convert_const_real_from_fixed (tree type, tree arg1)\n    to another fixed-point type.  */\n \n static tree\n-fold_convert_const_fixed_from_fixed (tree type, tree arg1)\n+fold_convert_const_fixed_from_fixed (tree type, const_tree arg1)\n {\n   FIXED_VALUE_TYPE value;\n   tree t;\n@@ -2325,7 +2325,7 @@ fold_convert_const_fixed_from_fixed (tree type, tree arg1)\n    to a fixed-point type.  */\n \n static tree\n-fold_convert_const_fixed_from_int (tree type, tree arg1)\n+fold_convert_const_fixed_from_int (tree type, const_tree arg1)\n {\n   FIXED_VALUE_TYPE value;\n   tree t;\n@@ -2352,7 +2352,7 @@ fold_convert_const_fixed_from_int (tree type, tree arg1)\n    to a fixed-point type.  */\n \n static tree\n-fold_convert_const_fixed_from_real (tree type, tree arg1)\n+fold_convert_const_fixed_from_real (tree type, const_tree arg1)\n {\n   FIXED_VALUE_TYPE value;\n   tree t;\n@@ -2631,7 +2631,7 @@ fold_convert (tree type, tree arg)\n    otherwise.  */\n \n static bool\n-maybe_lvalue_p (tree x)\n+maybe_lvalue_p (const_tree x)\n {\n   /* We only need to wrap lvalue tree codes.  */\n   switch (TREE_CODE (x))\n@@ -4123,7 +4123,7 @@ decode_field_reference (tree exp, HOST_WIDE_INT *pbitsize,\n    bit positions.  */\n \n static int\n-all_ones_mask_p (tree mask, int size)\n+all_ones_mask_p (const_tree mask, int size)\n {\n   tree type = TREE_TYPE (mask);\n   unsigned int precision = TYPE_PRECISION (type);\n@@ -4147,7 +4147,7 @@ all_ones_mask_p (tree mask, int size)\n    or NULL_TREE otherwise.  */\n \n static tree\n-sign_bit_p (tree exp, tree val)\n+sign_bit_p (tree exp, const_tree val)\n {\n   unsigned HOST_WIDE_INT mask_lo, lo;\n   HOST_WIDE_INT mask_hi, hi;\n@@ -4202,7 +4202,7 @@ sign_bit_p (tree exp, tree val)\n    to be evaluated unconditionally.  */\n \n static int\n-simple_operand_p (tree exp)\n+simple_operand_p (const_tree exp)\n {\n   /* Strip any conversions that don't change the machine mode.  */\n   STRIP_NOPS (exp);\n@@ -6471,7 +6471,7 @@ fold_binary_op_with_conditional_arg (enum tree_code code,\n    modes, X + 0 is not the same as X because -0 + 0 is 0.  */\n \n static bool\n-fold_real_zero_addition_p (tree type, tree addend, int negate)\n+fold_real_zero_addition_p (const_tree type, const_tree addend, int negate)\n {\n   if (!real_zerop (addend))\n     return false;\n@@ -6984,7 +6984,7 @@ fold_single_bit_test (enum tree_code code, tree arg0, tree arg1,\n    such that the evaluation of arg1 occurs before arg0.  */\n \n static bool\n-reorder_operands_p (tree arg0, tree arg1)\n+reorder_operands_p (const_tree arg0, const_tree arg1)\n {\n   if (! flag_evaluation_order)\n       return true;\n@@ -13148,9 +13148,9 @@ fold (tree expr)\n #ifdef ENABLE_FOLD_CHECKING\n #undef fold\n \n-static void fold_checksum_tree (tree, struct md5_ctx *, htab_t);\n-static void fold_check_failed (tree, tree);\n-void print_fold_checksum (tree);\n+static void fold_checksum_tree (const_tree, struct md5_ctx *, htab_t);\n+static void fold_check_failed (const_tree, const_tree);\n+void print_fold_checksum (const_tree);\n \n /* When --enable-checking=fold, compute a digest of expr before\n    and after actual fold call to see if fold did not accidentally\n@@ -13184,7 +13184,7 @@ fold (tree expr)\n }\n \n void\n-print_fold_checksum (tree expr)\n+print_fold_checksum (const_tree expr)\n {\n   struct md5_ctx ctx;\n   unsigned char checksum[16], cnt;\n@@ -13201,15 +13201,15 @@ print_fold_checksum (tree expr)\n }\n \n static void\n-fold_check_failed (tree expr ATTRIBUTE_UNUSED, tree ret ATTRIBUTE_UNUSED)\n+fold_check_failed (const_tree expr ATTRIBUTE_UNUSED, const_tree ret ATTRIBUTE_UNUSED)\n {\n   internal_error (\"fold check: original tree changed by fold\");\n }\n \n static void\n-fold_checksum_tree (tree expr, struct md5_ctx *ctx, htab_t ht)\n+fold_checksum_tree (const_tree expr, struct md5_ctx *ctx, htab_t ht)\n {\n-  void **slot;\n+  const void **slot;\n   enum tree_code code;\n   struct tree_function_decl buf;\n   int i, len;\n@@ -13221,7 +13221,7 @@ fold_checksum_tree (tree expr, struct md5_ctx *ctx, htab_t ht)\n \t      && sizeof (struct tree_type) <= sizeof (struct tree_function_decl));\n   if (expr == NULL)\n     return;\n-  slot = htab_find_slot (ht, expr, INSERT);\n+  slot = (const void **) htab_find_slot (ht, expr, INSERT);\n   if (*slot != NULL)\n     return;\n   *slot = expr;\n@@ -13231,24 +13231,25 @@ fold_checksum_tree (tree expr, struct md5_ctx *ctx, htab_t ht)\n     {\n       /* Allow DECL_ASSEMBLER_NAME to be modified.  */\n       memcpy ((char *) &buf, expr, tree_size (expr));\n+      SET_DECL_ASSEMBLER_NAME ((tree)&buf, NULL);\n       expr = (tree) &buf;\n-      SET_DECL_ASSEMBLER_NAME (expr, NULL);\n     }\n   else if (TREE_CODE_CLASS (code) == tcc_type\n \t   && (TYPE_POINTER_TO (expr) || TYPE_REFERENCE_TO (expr)\n \t       || TYPE_CACHED_VALUES_P (expr)\n \t       || TYPE_CONTAINS_PLACEHOLDER_INTERNAL (expr)))\n     {\n       /* Allow these fields to be modified.  */\n+      tree tmp;\n       memcpy ((char *) &buf, expr, tree_size (expr));\n-      expr = (tree) &buf;\n-      TYPE_CONTAINS_PLACEHOLDER_INTERNAL (expr) = 0;\n-      TYPE_POINTER_TO (expr) = NULL;\n-      TYPE_REFERENCE_TO (expr) = NULL;\n-      if (TYPE_CACHED_VALUES_P (expr))\n+      expr = tmp = (tree) &buf;\n+      TYPE_CONTAINS_PLACEHOLDER_INTERNAL (tmp) = 0;\n+      TYPE_POINTER_TO (tmp) = NULL;\n+      TYPE_REFERENCE_TO (tmp) = NULL;\n+      if (TYPE_CACHED_VALUES_P (tmp))\n \t{\n-\t  TYPE_CACHED_VALUES_P (expr) = 0;\n-\t  TYPE_CACHED_VALUES (expr) = NULL;\n+\t  TYPE_CACHED_VALUES_P (tmp) = 0;\n+\t  TYPE_CACHED_VALUES (tmp) = NULL;\n \t}\n     }\n   md5_process_bytes (expr, tree_size (expr), ctx);\n@@ -13358,7 +13359,7 @@ fold_checksum_tree (tree expr, struct md5_ctx *ctx, htab_t ht)\n    outputs differ.  */\n \n void\n-debug_fold_checksum (tree t)\n+debug_fold_checksum (const_tree t)\n {\n   int i;\n   unsigned char checksum[16];\n@@ -13710,7 +13711,7 @@ fold_build_call_array_initializer (tree type, tree fn,\n    transformed version).  */\n \n int\n-multiple_of_p (tree type, tree top, tree bottom)\n+multiple_of_p (tree type, const_tree top, const_tree bottom)\n {\n   if (operand_equal_p (top, bottom, 0))\n     return 1;"}, {"sha": "9fa5139c04106123f5c4efde8dad016e52d8639b", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac545c6462ebcbb067b2895bee6a67a7eecca728/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac545c6462ebcbb067b2895bee6a67a7eecca728/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=ac545c6462ebcbb067b2895bee6a67a7eecca728", "patch": "@@ -313,7 +313,7 @@ may_aliases (const_tree var)\n /* Return the line number for EXPR, or return -1 if we have no line\n    number information for it.  */\n static inline int\n-get_lineno (tree expr)\n+get_lineno (const_tree expr)\n {\n   if (expr == NULL_TREE)\n     return -1;"}, {"sha": "755b51f929f2095e8b5402f59e01fc334ae96e78", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac545c6462ebcbb067b2895bee6a67a7eecca728/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac545c6462ebcbb067b2895bee6a67a7eecca728/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=ac545c6462ebcbb067b2895bee6a67a7eecca728", "patch": "@@ -530,7 +530,7 @@ static inline bool noreturn_call_p (tree);\n static inline void update_stmt (tree);\n static inline bool stmt_modified_p (tree);\n static inline bitmap may_aliases (const_tree);\n-static inline int get_lineno (tree);\n+static inline int get_lineno (const_tree);\n static inline bitmap addresses_taken (tree);\n \n /*---------------------------------------------------------------------------"}, {"sha": "371e3e52fb3897ee2316448f8ab780f38dd093ee", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac545c6462ebcbb067b2895bee6a67a7eecca728/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac545c6462ebcbb067b2895bee6a67a7eecca728/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=ac545c6462ebcbb067b2895bee6a67a7eecca728", "patch": "@@ -41,10 +41,10 @@ struct object_size_info\n \n static unsigned HOST_WIDE_INT unknown[4] = { -1, -1, 0, 0 };\n \n-static tree compute_object_offset (tree, tree);\n-static unsigned HOST_WIDE_INT addr_object_size (tree, int);\n-static unsigned HOST_WIDE_INT alloc_object_size (tree, int);\n-static tree pass_through_call (tree);\n+static tree compute_object_offset (const_tree, const_tree);\n+static unsigned HOST_WIDE_INT addr_object_size (const_tree, int);\n+static unsigned HOST_WIDE_INT alloc_object_size (const_tree, int);\n+static tree pass_through_call (const_tree);\n static void collect_object_sizes_for (struct object_size_info *, tree);\n static void expr_object_size (struct object_size_info *, tree, tree);\n static bool merge_object_sizes (struct object_size_info *, tree, tree,\n@@ -88,7 +88,7 @@ init_offset_limit (void)\n    if unknown.  */\n \n static tree\n-compute_object_offset (tree expr, tree var)\n+compute_object_offset (const_tree expr, const_tree var)\n {\n   enum tree_code code = PLUS_EXPR;\n   tree base, off, t;\n@@ -152,7 +152,7 @@ compute_object_offset (tree expr, tree var)\n    If unknown, return unknown[object_size_type].  */\n \n static unsigned HOST_WIDE_INT\n-addr_object_size (tree ptr, int object_size_type)\n+addr_object_size (const_tree ptr, int object_size_type)\n {\n   tree pt_var;\n \n@@ -226,7 +226,7 @@ addr_object_size (tree ptr, int object_size_type)\n    unknown[object_size_type].  */\n \n static unsigned HOST_WIDE_INT\n-alloc_object_size (tree call, int object_size_type)\n+alloc_object_size (const_tree call, int object_size_type)\n {\n   tree callee, bytes = NULL_TREE;\n   tree alloc_size;\n@@ -287,7 +287,7 @@ alloc_object_size (tree call, int object_size_type)\n    Otherwise return NULL.  */\n \n static tree\n-pass_through_call (tree call)\n+pass_through_call (const_tree call)\n {\n   tree callee = get_callee_fndecl (call);\n "}, {"sha": "8da7ade6a110cdf403d4c7fb7f1ffbece26b80b3", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac545c6462ebcbb067b2895bee6a67a7eecca728/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac545c6462ebcbb067b2895bee6a67a7eecca728/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=ac545c6462ebcbb067b2895bee6a67a7eecca728", "patch": "@@ -38,14 +38,14 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Local functions, macros and variables.  */\n static int op_prio (const_tree);\n-static const char *op_symbol (tree);\n+static const char *op_symbol (const_tree);\n static void pretty_print_string (pretty_printer *, const char*);\n-static void print_call_name (pretty_printer *, tree);\n+static void print_call_name (pretty_printer *, const_tree);\n static void newline_and_indent (pretty_printer *, int);\n static void maybe_init_pretty_print (FILE *);\n static void print_declaration (pretty_printer *, tree, int, int);\n-static void print_struct_decl (pretty_printer *, tree, int, int);\n-static void do_niy (pretty_printer *, tree);\n+static void print_struct_decl (pretty_printer *, const_tree, int, int);\n+static void do_niy (pretty_printer *, const_tree);\n static void dump_vops (pretty_printer *, tree, int, int);\n static void dump_generic_bb_buff (pretty_printer *, basic_block, int, int);\n \n@@ -65,7 +65,7 @@ static int initialized = 0;\n /* Try to print something for an unknown tree code.  */\n \n static void\n-do_niy (pretty_printer *buffer, tree node)\n+do_niy (pretty_printer *buffer, const_tree node)\n {\n   int i, len;\n \n@@ -2243,7 +2243,7 @@ print_declaration (pretty_printer *buffer, tree t, int spc, int flags)\n    FIXME: Still incomplete.  */\n \n static void\n-print_struct_decl (pretty_printer *buffer, tree node, int spc, int flags)\n+print_struct_decl (pretty_printer *buffer, const_tree node, int spc, int flags)\n {\n   /* Print the name of the structure.  */\n   if (TYPE_NAME (node))\n@@ -2627,15 +2627,15 @@ op_symbol_code (enum tree_code code)\n /* Return the symbol associated with operator OP.  */\n \n static const char *\n-op_symbol (tree op)\n+op_symbol (const_tree op)\n {\n   return op_symbol_code (TREE_CODE (op));\n }\n \n /* Prints the name of a CALL_EXPR.  */\n \n static void\n-print_call_name (pretty_printer *buffer, tree node)\n+print_call_name (pretty_printer *buffer, const_tree node)\n {\n   tree op0;\n "}, {"sha": "3b773445a8564983a241f514ba0a36a89567c5da", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac545c6462ebcbb067b2895bee6a67a7eecca728/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac545c6462ebcbb067b2895bee6a67a7eecca728/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ac545c6462ebcbb067b2895bee6a67a7eecca728", "patch": "@@ -4675,7 +4675,7 @@ extern tree fold_ignored_result (tree);\n extern tree fold_abs_const (tree, tree);\n extern tree fold_indirect_ref_1 (tree, tree);\n extern void fold_defer_overflow_warnings (void);\n-extern void fold_undefer_overflow_warnings (bool, tree, int);\n+extern void fold_undefer_overflow_warnings (bool, const_tree, int);\n extern void fold_undefer_and_ignore_overflow_warnings (void);\n extern bool fold_deferring_overflow_warnings_p (void);\n extern tree maybe_fold_offset_to_reference (tree, tree, tree);\n@@ -4725,7 +4725,7 @@ enum operand_equal_flag\n };\n \n extern int operand_equal_p (const_tree, const_tree, unsigned int);\n-extern int multiple_of_p (tree, tree, tree);\n+extern int multiple_of_p (tree, const_tree, const_tree);\n extern tree omit_one_operand (tree, tree, tree);\n extern tree omit_two_operands (tree, tree, tree, tree);\n extern tree invert_truthvalue (tree);\n@@ -4752,7 +4752,6 @@ extern enum tree_code invert_tree_comparison (enum tree_code, bool);\n \n extern bool tree_expr_nonzero_p (tree);\n extern bool tree_expr_nonzero_warnv_p (tree, bool *);\n-extern int multiple_of_p (tree, tree, tree);\n \n /* In builtins.c */\n extern tree fold_call_expr (tree, bool);\n@@ -4770,7 +4769,7 @@ extern enum built_in_function builtin_mathfn_code (const_tree);\n extern tree build_function_call_expr (tree, tree);\n extern tree fold_build_call_expr (tree, tree, tree, tree);\n extern tree fold_builtin_call_array (tree, tree, int, tree *);\n-extern void debug_fold_checksum (tree);\n+extern void debug_fold_checksum (const_tree);\n extern tree build_call_expr (tree, int, ...);\n extern tree mathfn_built_in (tree, enum built_in_function fn);\n extern tree strip_float_extensions (tree);"}]}