{"sha": "212aa74f9e5e721be3baa109d247588f393d3927", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEyYWE3NGY5ZTVlNzIxYmUzYmFhMTA5ZDI0NzU4OGYzOTNkMzkyNw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2011-03-24T16:38:24Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2011-03-24T16:38:24Z"}, "message": "s390.c (s390_preferred_reload_class): Return NO_REGS for invalid symbolic addresses.\n\n2011-03-24  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* config/s390/s390.c (s390_preferred_reload_class): Return NO_REGS\n\tfor invalid symbolic addresses.\n\t(s390_secondary_reload): Don't use s390_check_symref_alignment for\n\tlarl operands.\n\nFrom-SVN: r171405", "tree": {"sha": "c6909ce6aa98f3b0852a852a2ee5d3b4a8fd0416", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6909ce6aa98f3b0852a852a2ee5d3b4a8fd0416"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/212aa74f9e5e721be3baa109d247588f393d3927", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/212aa74f9e5e721be3baa109d247588f393d3927", "html_url": "https://github.com/Rust-GCC/gccrs/commit/212aa74f9e5e721be3baa109d247588f393d3927", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/212aa74f9e5e721be3baa109d247588f393d3927/comments", "author": null, "committer": null, "parents": [{"sha": "bf3b3396ef74a4993fdcdb325503f982541885d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3b3396ef74a4993fdcdb325503f982541885d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf3b3396ef74a4993fdcdb325503f982541885d9"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "64e26a09d552310410cd7230c2709994bb35609b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212aa74f9e5e721be3baa109d247588f393d3927/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212aa74f9e5e721be3baa109d247588f393d3927/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=212aa74f9e5e721be3baa109d247588f393d3927", "patch": "@@ -1,3 +1,10 @@\n+2011-03-24  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_preferred_reload_class): Return NO_REGS\n+\tfor invalid symbolic addresses.\n+\t(s390_secondary_reload): Don't use s390_check_symref_alignment for\n+\tlarl operands.\n+\n 2011-03-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* fold-const.c (fold_ternary_loc): Preserve the location (if any) of"}, {"sha": "7e84ff1fc273618788b79be0ad246174f5006db9", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212aa74f9e5e721be3baa109d247588f393d3927/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212aa74f9e5e721be3baa109d247588f393d3927/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=212aa74f9e5e721be3baa109d247588f393d3927", "patch": "@@ -2974,12 +2974,16 @@ s390_preferred_reload_class (rtx op, reg_class_t rclass)\n \t it is most likely being used as an address, so\n \t prefer ADDR_REGS.  If 'class' is not a superset\n \t of ADDR_REGS, e.g. FP_REGS, reject this reload.  */\n-      case PLUS:\n       case LABEL_REF:\n       case SYMBOL_REF:\n       case CONST:\n+\tif (!legitimate_reload_constant_p (op))\n+          return NO_REGS;\n+\t/* fallthrough */\n+      case PLUS:\n+\t/* load address will be used.  */\n \tif (reg_class_subset_p (ADDR_REGS, rclass))\n-          return ADDR_REGS;\n+\t  return ADDR_REGS;\n \telse\n \t  return NO_REGS;\n \n@@ -3097,12 +3101,16 @@ s390_secondary_reload (bool in_p, rtx x, reg_class_t rclass_i,\n \n   if (TARGET_Z10)\n     {\n+      HOST_WIDE_INT offset;\n+      rtx symref;\n+\n       /* On z10 several optimizer steps may generate larl operands with\n \t an odd addend.  */\n       if (in_p\n-\t  && s390_symref_operand_p (x, NULL, NULL)\n+\t  && s390_symref_operand_p (x, &symref, &offset)\n \t  && mode == Pmode\n-\t  && !s390_check_symref_alignment (x, 2))\n+\t  && !SYMBOL_REF_ALIGN1_P (symref)\n+\t  && (offset & 1) == 1)\n \tsri->icode = ((mode == DImode) ? CODE_FOR_reloaddi_larl_odd_addend_z10\n \t\t      : CODE_FOR_reloadsi_larl_odd_addend_z10);\n "}]}