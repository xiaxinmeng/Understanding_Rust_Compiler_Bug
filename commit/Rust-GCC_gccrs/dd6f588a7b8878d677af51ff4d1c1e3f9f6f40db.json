{"sha": "dd6f588a7b8878d677af51ff4d1c1e3f9f6f40db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ2ZjU4OGE3Yjg4NzhkNjc3YWY1MWZmNGQxYzFlM2Y5ZjZmNDBkYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-04-05T14:51:28Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-04-05T14:55:41Z"}, "message": "c++: Unneeded export query [PR 99380]\n\nThis problem got introduced fixing a module numbering problem.  When\npreprocessing a header unit, we don't need to send an EXPORT query\nunless we're also determining dependencies, or the mapper asked us\nto.  Sadly the testsuite isn't set up to test this kind of subtlety.\nI manually did that with stdin/stdout.\n\n\tPR c++/99380\n\tgcc/cp/\n\t* module.cc (name_pending_imports): Drop 'atend' parm.  Don't\n\tquery export when not needed.\n\t(preprocess_module, preprocessed_module): Adjust.", "tree": {"sha": "044c35cbed1402cb9bdbfaa0516ad308dbaca47d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/044c35cbed1402cb9bdbfaa0516ad308dbaca47d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd6f588a7b8878d677af51ff4d1c1e3f9f6f40db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd6f588a7b8878d677af51ff4d1c1e3f9f6f40db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd6f588a7b8878d677af51ff4d1c1e3f9f6f40db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd6f588a7b8878d677af51ff4d1c1e3f9f6f40db/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d8f4240c94e2e7643ac13cda1fdd0bb6ca3a3fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d8f4240c94e2e7643ac13cda1fdd0bb6ca3a3fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d8f4240c94e2e7643ac13cda1fdd0bb6ca3a3fb"}], "stats": {"total": 66, "additions": 39, "deletions": 27}, "files": [{"sha": "c80c7bcc70f1626b14ed60277e267679579642ae", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 39, "deletions": 27, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd6f588a7b8878d677af51ff4d1c1e3f9f6f40db/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd6f588a7b8878d677af51ff4d1c1e3f9f6f40db/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=dd6f588a7b8878d677af51ff4d1c1e3f9f6f40db", "patch": "@@ -19262,56 +19262,68 @@ module_begin_main_file (cpp_reader *reader, line_maps *lmaps,\n    filenames.   */\n \n static void\n-name_pending_imports (cpp_reader *reader, bool at_end)\n+name_pending_imports (cpp_reader *reader)\n {\n   auto *mapper = get_mapper (cpp_main_loc (reader));\n \n-  bool only_headers = (flag_preprocess_only\n-\t\t       && !bool (mapper->get_flags () & Cody::Flags::NameOnly)\n-\t\t       && !cpp_get_deps (reader));\n-  if (at_end\n-      && (!vec_safe_length (pending_imports) || only_headers))\n+  if (!vec_safe_length (pending_imports))\n     /* Not doing anything.  */\n     return;\n \n   timevar_start (TV_MODULE_MAPPER);\n \n   auto n = dump.push (NULL);\n   dump () && dump (\"Resolving direct import names\");\n+  bool want_deps = (bool (mapper->get_flags () & Cody::Flags::NameOnly)\n+\t\t    || cpp_get_deps (reader));\n+  bool any = false;\n \n-  mapper->Cork ();\n   for (unsigned ix = 0; ix != pending_imports->length (); ix++)\n     {\n       module_state *module = (*pending_imports)[ix];\n       gcc_checking_assert (module->is_direct ());\n-      if (!module->filename\n-\t  && !module->visited_p\n-\t  && (module->is_header () || !only_headers))\n+      if (!module->filename && !module->visited_p)\n \t{\n-\t  module->visited_p = true;\n-\t  Cody::Flags flags = (flag_preprocess_only\n-\t\t\t       ? Cody::Flags::None : Cody::Flags::NameOnly);\n+\t  bool export_p = (module->module_p\n+\t\t\t   && (module->is_partition () || module->exported_p));\n \n-\t  if (module->module_p\n-\t      && (module->is_partition () || module->exported_p))\n+\t  Cody::Flags flags = Cody::Flags::None;\n+\t  if (flag_preprocess_only\n+\t      && !(module->is_header () && !export_p))\n+\t    {\n+\t      if (!want_deps)\n+\t\tcontinue;\n+\t      flags = Cody::Flags::NameOnly;\n+\t    }\n+\n+\t  if (!any)\n+\t    {\n+\t      any = true;\n+\t      mapper->Cork ();\n+\t    }\n+\t  if (export_p)\n \t    mapper->ModuleExport (module->get_flatname (), flags);\n \t  else\n \t    mapper->ModuleImport (module->get_flatname (), flags);\n+\t  module->visited_p = true;\n \t}\n     }\n-  \n-  auto response = mapper->Uncork ();\n-  auto r_iter = response.begin ();\n-  for (unsigned ix = 0; ix != pending_imports->length (); ix++)\n+\n+  if (any)\n     {\n-      module_state *module = (*pending_imports)[ix];\n-      if (module->visited_p)\n+      auto response = mapper->Uncork ();\n+      auto r_iter = response.begin ();\n+      for (unsigned ix = 0; ix != pending_imports->length (); ix++)\n \t{\n-\t  module->visited_p = false;\n-\t  gcc_checking_assert (!module->filename);\n+\t  module_state *module = (*pending_imports)[ix];\n+\t  if (module->visited_p)\n+\t    {\n+\t      module->visited_p = false;\n+\t      gcc_checking_assert (!module->filename);\n \n-\t  module->set_filename (*r_iter);\n-\t  ++r_iter;\n+\t      module->set_filename (*r_iter);\n+\t      ++r_iter;\n+\t    }\n \t}\n     }\n \n@@ -19384,7 +19396,7 @@ preprocess_module (module_state *module, location_t from_loc,\n \t  unsigned n = dump.push (NULL);\n \n \t  dump () && dump (\"Reading %M preprocessor state\", module);\n-\t  name_pending_imports (reader, false);\n+\t  name_pending_imports (reader);\n \n \t  /* Preserve the state of the line-map.  */\n \t  unsigned pre_hwm = LINEMAPS_ORDINARY_USED (line_table);\n@@ -19446,7 +19458,7 @@ preprocessed_module (cpp_reader *reader)\n \n   dump () && dump (\"Completed phase-4 (tokenization) processing\");\n \n-  name_pending_imports (reader, true);\n+  name_pending_imports (reader);\n   vec_free (pending_imports);\n \n   spans.maybe_init ();"}]}