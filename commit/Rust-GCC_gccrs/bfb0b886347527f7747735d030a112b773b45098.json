{"sha": "bfb0b886347527f7747735d030a112b773b45098", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZiMGI4ODYzNDc1MjdmNzc0NzczNWQwMzBhMTEyYjc3M2I0NTA5OA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-09-10T15:07:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-09-10T15:07:04Z"}, "message": "re PR tree-optimization/37432 (ICE in VN_INFO, at tree-ssa-sccvn.c:180)\n\n2008-09-10  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/37432\n\t* tree-inline.c (insert_init_stmt): Make sure to not\n\tinsert invalid gimple stores.\n\n\t* gcc.c-torture/compile/pr37432.c: New testcase.\n\nFrom-SVN: r140233", "tree": {"sha": "ae5ffeb146ccb202a3b56336dbc28fbaa24e2149", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae5ffeb146ccb202a3b56336dbc28fbaa24e2149"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfb0b886347527f7747735d030a112b773b45098", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfb0b886347527f7747735d030a112b773b45098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfb0b886347527f7747735d030a112b773b45098", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfb0b886347527f7747735d030a112b773b45098/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b70e977531af718dc6b3173d0645583f2b9a4808", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b70e977531af718dc6b3173d0645583f2b9a4808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b70e977531af718dc6b3173d0645583f2b9a4808"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "c1922b1ce5a0061c5826ade35cb5e5987117cef9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfb0b886347527f7747735d030a112b773b45098/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfb0b886347527f7747735d030a112b773b45098/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bfb0b886347527f7747735d030a112b773b45098", "patch": "@@ -1,3 +1,9 @@\n+2008-09-10  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/37432\n+\t* tree-inline.c (insert_init_stmt): Make sure to not\n+\tinsert invalid gimple stores.\n+\n 2008-09-10  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR tree-optimization/37388"}, {"sha": "cfa78e97aaf14d595b63d7b77cd9aecd6f0d4071", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfb0b886347527f7747735d030a112b773b45098/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfb0b886347527f7747735d030a112b773b45098/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bfb0b886347527f7747735d030a112b773b45098", "patch": "@@ -1,3 +1,8 @@\n+2008-09-10  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/37432\n+\t* gcc.c-torture/compile/pr37432.c: New testcase.\n+\n 2008-09-10  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/37434:"}, {"sha": "747ec34c8f304ea9e272dcc57a64c419a39ea922", "filename": "gcc/testsuite/gcc.c-torture/compile/pr37432.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfb0b886347527f7747735d030a112b773b45098/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37432.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfb0b886347527f7747735d030a112b773b45098/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37432.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37432.c?ref=bfb0b886347527f7747735d030a112b773b45098", "patch": "@@ -0,0 +1,9 @@\n+static void print_wkb_byte(unsigned char val) {\n+    print_wkb_bytes((unsigned char *)&val, 1, 1);\n+}\n+void InsertMultiPoint(int b) {\n+    char a = 1;\n+    if (b) a = 0;\n+    print_wkb_byte(a);\n+}\n+"}, {"sha": "c38c322cbc3a03951436538b4c75d4a992e6fe35", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfb0b886347527f7747735d030a112b773b45098/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfb0b886347527f7747735d030a112b773b45098/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=bfb0b886347527f7747735d030a112b773b45098", "patch": "@@ -1907,6 +1907,22 @@ insert_init_stmt (basic_block bb, gimple init_stmt)\n     {\n       gimple_stmt_iterator si = gsi_last_bb (bb);\n \n+      /* We can end up with init statements that store to a non-register\n+         from a rhs with a conversion.  Handle that here by forcing the\n+\t rhs into a temporary.  gimple_regimplify_operands is not\n+\t prepared to do this for us.  */\n+      if (!is_gimple_reg (gimple_assign_lhs (init_stmt))\n+\t  && is_gimple_reg_type (TREE_TYPE (gimple_assign_lhs (init_stmt)))\n+\t  && gimple_assign_rhs_class (init_stmt) == GIMPLE_UNARY_RHS)\n+\t{\n+\t  tree rhs = build1 (gimple_assign_rhs_code (init_stmt),\n+\t\t\t     gimple_expr_type (init_stmt),\n+\t\t\t     gimple_assign_rhs1 (init_stmt));\n+\t  rhs = force_gimple_operand_gsi (&si, rhs, true, NULL_TREE, false,\n+\t\t\t\t\t  GSI_NEW_STMT);\n+\t  gimple_assign_set_rhs_code (init_stmt, TREE_CODE (rhs));\n+\t  gimple_assign_set_rhs1 (init_stmt, rhs);\n+\t}\n       gsi_insert_after (&si, init_stmt, GSI_NEW_STMT);\n       gimple_regimplify_operands (init_stmt, &si);\n       mark_symbols_for_renaming (init_stmt);"}]}