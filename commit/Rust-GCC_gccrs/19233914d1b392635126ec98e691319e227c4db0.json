{"sha": "19233914d1b392635126ec98e691319e227c4db0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkyMzM5MTRkMWIzOTI2MzUxMjZlYzk4ZTY5MTMxOWUyMjdjNGRiMA==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2016-02-18T13:00:07Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2016-02-18T13:00:07Z"}, "message": "PR target/62554\n        PR target/69610\ngcc     * config/arm/arm.c (arm_option_override_internal): Disable\n        interworking if the target does not support thumb instructions.\n        (arm_reload_in_hi): Handle the case where a register to register\n        move needs reloading because there is no simple pattern to handle\n        it.\n        (arm_reload_out_hi): Likewise.\n\ntests   * gcc.target/arm/pr62554.c: New test.\n        * gcc.target/arm/pr69610-1.c: New test.\n        * gcc.target/arm/pr69610-2.c: New test.\n\nFrom-SVN: r233518", "tree": {"sha": "b69ce481c1b4856ad7d75ac3835fef9dd38a2c86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b69ce481c1b4856ad7d75ac3835fef9dd38a2c86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19233914d1b392635126ec98e691319e227c4db0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19233914d1b392635126ec98e691319e227c4db0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19233914d1b392635126ec98e691319e227c4db0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19233914d1b392635126ec98e691319e227c4db0/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "23f278396845947f49e597363aaa236ebb4f4e0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23f278396845947f49e597363aaa236ebb4f4e0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23f278396845947f49e597363aaa236ebb4f4e0e"}], "stats": {"total": 148, "additions": 148, "deletions": 0}, "files": [{"sha": "b16cd4c6b919e246efd459bd511608bfbf200b3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19233914d1b392635126ec98e691319e227c4db0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19233914d1b392635126ec98e691319e227c4db0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19233914d1b392635126ec98e691319e227c4db0", "patch": "@@ -1,3 +1,14 @@\n+2016-02-18  Nick Clifton  <nickc@redhat.com>\n+\n+        PR target/62554\n+        PR target/69610\n+        * config/arm/arm.c (arm_option_override_internal): Disable\n+        interworking if the target does not support thumb instructions.\n+        (arm_reload_in_hi): Handle the case where a register to register\n+        move needs reloading because there is no simple pattern to handle\n+        it.\n+        (arm_reload_out_hi): Likewise.\n+\n 2016-02-18  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/69854"}, {"sha": "765d0021e8035f23685c25154eaefdd3eb99cc6c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19233914d1b392635126ec98e691319e227c4db0/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19233914d1b392635126ec98e691319e227c4db0/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=19233914d1b392635126ec98e691319e227c4db0", "patch": "@@ -2874,6 +2874,14 @@ arm_option_override_internal (struct gcc_options *opts,\n {\n   arm_override_options_after_change_1 (opts);\n \n+  if (TARGET_INTERWORK && !ARM_FSET_HAS_CPU1 (insn_flags, FL_THUMB))\n+    {\n+      /* The default is to enable interworking, so this warning message would\n+\t be confusing to users who have just compiled with, eg, -march=armv3.  */\n+      /* warning (0, \"ignoring -minterwork because target CPU does not support THUMB\"); */\n+      opts->x_target_flags &= ~MASK_INTERWORK;\n+    }\n+\n   if (TARGET_THUMB_P (opts->x_target_flags)\n       && !(ARM_FSET_HAS_CPU1 (insn_flags, FL_THUMB)))\n     {\n@@ -15440,6 +15448,17 @@ arm_reload_in_hi (rtx *operands)\n       else\n \t/* The slot is out of range, or was dressed up in a SUBREG.  */\n \tbase = reg_equiv_address (REGNO (ref));\n+\n+      /* PR 62554: If there is no equivalent memory location then just move\n+\t the value as an SImode register move.  This happens when the target\n+\t architecture variant does not have an HImode register move.  */\n+      if (base == NULL)\n+\t{\n+\t  gcc_assert (REG_P (operands[0]));\n+\t  emit_insn (gen_movsi (gen_rtx_SUBREG (SImode, operands[0], 0),\n+\t\t\t\tgen_rtx_SUBREG (SImode, ref, 0)));\n+\t  return;\n+\t}\n     }\n   else\n     base = find_replacement (&XEXP (ref, 0));\n@@ -15557,6 +15576,17 @@ arm_reload_out_hi (rtx *operands)\n       else\n \t/* The slot is out of range, or was dressed up in a SUBREG.  */\n \tbase = reg_equiv_address (REGNO (ref));\n+\n+      /* PR 62554: If there is no equivalent memory location then just move\n+\t the value as an SImode register move.  This happens when the target\n+\t architecture variant does not have an HImode register move.  */\n+      if (base == NULL)\n+\t{\n+\t  gcc_assert (REG_P (outval));\n+\t  emit_insn (gen_movsi (gen_rtx_SUBREG (SImode, ref, 0),\n+\t\t\t\tgen_rtx_SUBREG (SImode, outval, 0)));\n+\t  return;\n+\t}\n     }\n   else\n     base = find_replacement (&XEXP (ref, 0));\n@@ -19619,6 +19649,7 @@ output_return_instruction (rtx operand, bool really_return, bool reverse,\n \t  break;\n \n \tcase ARM_FT_INTERWORKED:\n+\t  gcc_assert (arm_arch5 || arm_arch4t);\n \t  sprintf (instr, \"bx%s\\t%%|lr\", conditional);\n \t  break;\n "}, {"sha": "103c78d718d94bd3281a438b7a4aae114418995f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19233914d1b392635126ec98e691319e227c4db0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19233914d1b392635126ec98e691319e227c4db0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=19233914d1b392635126ec98e691319e227c4db0", "patch": "@@ -1,3 +1,11 @@\n+2016-02-18  Nick Clifton  <nickc@redhat.com>\n+\n+        PR target/62554\n+        PR target/69610\n+        * gcc.target/arm/pr62554.c: New test.\n+        * gcc.target/arm/pr69610-1.c: New test.\n+        * gcc.target/arm/pr69610-2.c: New test.\n+\n 2016-02-18  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/69854"}, {"sha": "4d6501cba1fb5122cfa9e276766280414c338225", "filename": "gcc/testsuite/gcc.target/arm/pr62554.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19233914d1b392635126ec98e691319e227c4db0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr62554.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19233914d1b392635126ec98e691319e227c4db0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr62554.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr62554.c?ref=19233914d1b392635126ec98e691319e227c4db0", "patch": "@@ -0,0 +1,51 @@\n+/* Check that pre ARMv4 compilation still works.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-marm -march=armv3 -O\" } */\n+/* { dg-require-effective-target arm_arm_ok } */\n+\n+typedef struct\n+{\n+  char bits;\n+  short val;\n+} code;\n+\n+union uu\n+{\n+  short us;\n+  char b[2];\n+};\n+\n+int a, b, c, f, g, h;\n+code *d;\n+\n+code e;\n+\n+int\n+fn1 (void)\n+{\n+  char i;\n+  do\n+    if (e.bits)\n+      {\n+      dodist:\n+        f = c;\n+        if (e.bits & 6)\n+          {\n+            ++i;\n+            if (g)\n+              do\n+                {\n+                  union uu j;\n+                  j.b[1] = a;\n+                  h = j.us;\n+                }\n+              while (fn1);\n+          }\n+        else\n+          {\n+            e = d[b];\n+            goto dodist;\n+          }\n+      }\n+  while (i);\n+}"}, {"sha": "a671b93392bdac8679415cb49a3691dcbe672790", "filename": "gcc/testsuite/gcc.target/arm/pr69610-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19233914d1b392635126ec98e691319e227c4db0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr69610-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19233914d1b392635126ec98e691319e227c4db0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr69610-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr69610-1.c?ref=19233914d1b392635126ec98e691319e227c4db0", "patch": "@@ -0,0 +1,14 @@\n+/* Check that pre ARMv4 compilation still works.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-marm -march=armv3 -ftree-ter\" } */\n+/* { dg-require-effective-target arm_arm_ok } */\n+\n+typedef unsigned short v16u16 __attribute__ ((vector_size (16)));\n+typedef unsigned int v16u32 __attribute__ ((vector_size (16)));\n+\n+unsigned short\n+foo (v16u16 v16u16_1, v16u32 v16u32_1)\n+{\n+  v16u16_1 += (v16u16) v16u32_1;\n+  return v16u16_1[5] + v16u32_1[1];\n+}"}, {"sha": "e932c63b63962d95eff02ba26430e7eef454329f", "filename": "gcc/testsuite/gcc.target/arm/pr69610-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19233914d1b392635126ec98e691319e227c4db0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr69610-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19233914d1b392635126ec98e691319e227c4db0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr69610-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr69610-2.c?ref=19233914d1b392635126ec98e691319e227c4db0", "patch": "@@ -0,0 +1,33 @@\n+/* Check that pre ARMv4 compilation still works.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-marm -march=armv3 -O2 -fno-forward-propagate\" } */\n+/* { dg-require-effective-target arm_arm_ok } */\n+\n+typedef short v16u16 __attribute__ ((vector_size (16)));\n+typedef unsigned v16u32 __attribute__ ((vector_size (16)));\n+typedef long long v16u64 __attribute__ ((vector_size (16)));\n+\n+unsigned\n+foo\n+  (int\n+   u16_0,\n+   unsigned\n+   u32_0,\n+   int\n+   u64_0,\n+   int\n+   u16_1,\n+   unsigned\n+   u64_1,\n+   v16u16\n+   v16u16_0,\n+   v16u32\n+   v16u32_0,\n+   v16u64 v16u64_0, v16u16 v16u16_1, v16u32 v16u32_1, v16u64 v16u64_1)\n+{\n+  v16u16_1[3] -= v16u32_0[0];\n+  v16u16_0 -= (v16u16) v16u32_0;\n+  return u16_0 + u32_0 + u64_0 + u16_1 +\n+        v16u16_0[0] + v16u16_0[2] + v16u16_0[3] + v16u16_0[4] + v16u16_0[5] + v16u32_0[0] + v16u32_0[1] + v16u32_0[3] + v16u64_0[1] +\n+        v16u16_1[2] + v16u16_1[3] + v16u16_1[5] + v16u16_1[7] + v16u32_1[0] + v16u32_1[3] + v16u64_1[0] + v16u64_1[1];\n+}"}]}