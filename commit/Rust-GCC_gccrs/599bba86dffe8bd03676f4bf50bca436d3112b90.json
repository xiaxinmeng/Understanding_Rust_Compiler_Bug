{"sha": "599bba86dffe8bd03676f4bf50bca436d3112b90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk5YmJhODZkZmZlOGJkMDM2NzZmNGJmNTBiY2E0MzZkMzExMmI5MA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-04-03T22:26:37Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-04-03T22:26:37Z"}, "message": "langhooks-def.h (lhd_set_decl_assembler_name, [...]): New.\n\n\t* langhooks-def.h (lhd_set_decl_assembler_name,\n\tLANG_HOOKS_SET_DECL_ASSEMBLER_NAME): New.\n\t(LANG_HOOKS_INITIALIZER): Update.\n\t* langhooks.c (lhd_set_decl_assembler_name): New, from tree.c\n\t* langhooks.h (struct lang_hooks): New hook.\n\t* tree.c (set_decl_assembler_name): Move to langhooks.c.\n\t(lang_set_decl_assembler_name): Remove.\n\t(init_obstacks): Don't set hook.\n\t(decl_assembler_name): New function.\n\t* tree.h (DECL_ASSEMBLER_NAME): Turn into a function call.\n\t(decl_assembler_name): New.\n\t(lang_set_decl_assembler_name): Remove.\ncp:\n\t* cp-lang.c (LANG_HOOKS_SET_DECL_ASSEMBLER_NAME): Redefine.\n\t* tree.c (init_tree): Don't set hook.\n\nFrom-SVN: r51817", "tree": {"sha": "a01f3b59f8231281416c086ab666faaa4b32176c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a01f3b59f8231281416c086ab666faaa4b32176c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/599bba86dffe8bd03676f4bf50bca436d3112b90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/599bba86dffe8bd03676f4bf50bca436d3112b90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/599bba86dffe8bd03676f4bf50bca436d3112b90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/599bba86dffe8bd03676f4bf50bca436d3112b90/comments", "author": null, "committer": null, "parents": [{"sha": "cf7b8b0dc4258c4530a283000eea788c211029f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf7b8b0dc4258c4530a283000eea788c211029f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf7b8b0dc4258c4530a283000eea788c211029f9"}], "stats": {"total": 123, "additions": 73, "deletions": 50}, "files": [{"sha": "a5b6c3c73ee2a96ccfb05403113b1a59fec1ee86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599bba86dffe8bd03676f4bf50bca436d3112b90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599bba86dffe8bd03676f4bf50bca436d3112b90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=599bba86dffe8bd03676f4bf50bca436d3112b90", "patch": "@@ -1,3 +1,18 @@\n+2002-04-03  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* langhooks-def.h (lhd_set_decl_assembler_name,\n+\tLANG_HOOKS_SET_DECL_ASSEMBLER_NAME): New.\n+\t(LANG_HOOKS_INITIALIZER): Update.\n+\t* langhooks.c (lhd_set_decl_assembler_name): New, from tree.c\n+\t* langhooks.h (struct lang_hooks): New hook.\n+\t* tree.c (set_decl_assembler_name): Move to langhooks.c.\n+\t(lang_set_decl_assembler_name): Remove.\n+\t(init_obstacks): Don't set hook.\n+\t(decl_assembler_name): New function.\n+\t* tree.h (DECL_ASSEMBLER_NAME): Turn into a function call.\n+\t(decl_assembler_name): New.\n+\t(lang_set_decl_assembler_name): Remove.\n+\n 2002-04-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* configure.in (HAVE_SPARC_UA_PCREL_HIDDEN): Test whether %r_disp32()"}, {"sha": "a7ffd32d62138935cee79147bdd73ae32b6838eb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599bba86dffe8bd03676f4bf50bca436d3112b90/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599bba86dffe8bd03676f4bf50bca436d3112b90/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=599bba86dffe8bd03676f4bf50bca436d3112b90", "patch": "@@ -1,3 +1,8 @@\n+2002-04-03  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cp-lang.c (LANG_HOOKS_SET_DECL_ASSEMBLER_NAME): Redefine.\n+\t* tree.c (init_tree): Don't set hook.\n+\n 2002-04-03  Roger Sayle  <roger@eyesopen.com>\n \n \tPR c++/5998:"}, {"sha": "b7d129a7c216c742e1ac43987b8483d5696a9c66", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599bba86dffe8bd03676f4bf50bca436d3112b90/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599bba86dffe8bd03676f4bf50bca436d3112b90/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=599bba86dffe8bd03676f4bf50bca436d3112b90", "patch": "@@ -67,6 +67,8 @@ static bool ok_to_generate_alias_set_for_type PARAMS ((tree));\n #define LANG_HOOKS_MARK_TREE cxx_mark_tree\n #undef LANG_HOOKS_UNSAFE_FOR_REEVAL\n #define LANG_HOOKS_UNSAFE_FOR_REEVAL c_common_unsafe_for_reeval\n+#undef LANG_HOOKS_SET_DECL_ASSEMBLER_NAME\n+#define LANG_HOOKS_SET_DECL_ASSEMBLER_NAME mangle_decl\n #undef LANG_HOOKS_MARK_ADDRESSABLE\n #define LANG_HOOKS_MARK_ADDRESSABLE cxx_mark_addressable\n #undef LANG_HOOKS_PRINT_STATISTICS"}, {"sha": "c96f0e24d775811db2a82dba6a5759c425c64d2d", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599bba86dffe8bd03676f4bf50bca436d3112b90/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599bba86dffe8bd03676f4bf50bca436d3112b90/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=599bba86dffe8bd03676f4bf50bca436d3112b90", "patch": "@@ -2295,7 +2295,6 @@ void\n init_tree ()\n {\n   lang_statement_code_p = cp_statement_code_p;\n-  lang_set_decl_assembler_name = mangle_decl;\n   list_hash_table = htab_create (31, list_hash, list_hash_eq, NULL);\n   ggc_add_root (&list_hash_table, 1, \n \t\tsizeof (list_hash_table),"}, {"sha": "5e90a9544ee69e3c07bdf2dcd03e8c4b45eca71b", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599bba86dffe8bd03676f4bf50bca436d3112b90/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599bba86dffe8bd03676f4bf50bca436d3112b90/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=599bba86dffe8bd03676f4bf50bca436d3112b90", "patch": "@@ -55,6 +55,7 @@ extern void lhd_set_yydebug PARAMS ((int));\n extern rtx lhd_expand_expr PARAMS ((tree, rtx, enum machine_mode, int));\n extern void lhd_print_error_function PARAMS ((struct diagnostic_context *,\n \t\t\t\t\t      const char *));\n+extern void lhd_set_decl_assembler_name PARAMS ((tree));\n \n /* Declarations of default tree inlining hooks.  */\n tree lhd_tree_inlining_walk_subtrees\t\tPARAMS ((tree *, int *,\n@@ -94,6 +95,7 @@ tree lhd_tree_inlining_convert_parm_for_inlining PARAMS ((tree, tree, tree));\n #define LANG_HOOKS_UNSAVE_EXPR_NOW\tlhd_unsave_expr_now\n #define LANG_HOOKS_MAYBE_BUILD_CLEANUP\tlhd_return_null_tree\n #define LANG_HOOKS_MARK_TREE\t\tlhd_do_nothing_t\n+#define LANG_HOOKS_SET_DECL_ASSEMBLER_NAME lhd_set_decl_assembler_name\n #define LANG_HOOKS_HONOR_READONLY\tfalse\n #define LANG_HOOKS_PRINT_STATISTICS\tlhd_do_nothing\n #define LANG_HOOKS_PRINT_XNODE\t\tlhd_print_tree_nothing\n@@ -209,6 +211,7 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n   LANG_HOOKS_UNSAVE_EXPR_NOW, \\\n   LANG_HOOKS_MAYBE_BUILD_CLEANUP, \\\n   LANG_HOOKS_MARK_TREE, \\\n+  LANG_HOOKS_SET_DECL_ASSEMBLER_NAME, \\\n   LANG_HOOKS_HONOR_READONLY, \\\n   LANG_HOOKS_PRINT_STATISTICS, \\\n   LANG_HOOKS_PRINT_XNODE, \\"}, {"sha": "4cdb8abee7864d1c290ff13293dd1b1628f02a8d", "filename": "gcc/langhooks.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599bba86dffe8bd03676f4bf50bca436d3112b90/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599bba86dffe8bd03676f4bf50bca436d3112b90/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=599bba86dffe8bd03676f4bf50bca436d3112b90", "patch": "@@ -123,6 +123,33 @@ lhd_set_yydebug (value)\n     fprintf (stderr, \"warning: no yacc/bison-generated output to debug!\\n\");\n }\n \n+/* Set the DECL_ASSEMBLER_NAME for DECL.  */\n+void\n+lhd_set_decl_assembler_name (decl)\n+     tree decl;\n+{\n+  /* The language-independent code should never use the\n+     DECL_ASSEMBLER_NAME for lots of DECLs.  Only FUNCTION_DECLs and\n+     VAR_DECLs for variables with static storage duration need a real\n+     DECL_ASSEMBLER_NAME.  */\n+  if (TREE_CODE (decl) == FUNCTION_DECL\n+      || (TREE_CODE (decl) == VAR_DECL \n+\t  && (TREE_STATIC (decl) \n+\t      || DECL_EXTERNAL (decl) \n+\t      || TREE_PUBLIC (decl))))\n+    /* By default, assume the name to use in assembly code is the\n+       same as that used in the source language.  (That's correct\n+       for C, and GCC used to set DECL_ASSEMBLER_NAME to the same\n+       value as DECL_NAME in build_decl, so this choice provides\n+       backwards compatibility with existing front-ends.  */\n+    SET_DECL_ASSEMBLER_NAME (decl, DECL_NAME (decl));\n+  else\n+    /* Nobody should ever be asking for the DECL_ASSEMBLER_NAME of\n+       these DECLs -- unless they're in language-dependent code, in\n+       which case set_decl_assembler_name hook should handle things.  */\n+    abort ();\n+}\n+\n /* Provide a default routine to clear the binding stack.  This is used\n    by languages that don't need to do anything special.  */\n void"}, {"sha": "299efcd8a929b00e6a7cfbfc6d61e6679992a421", "filename": "gcc/langhooks.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599bba86dffe8bd03676f4bf50bca436d3112b90/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599bba86dffe8bd03676f4bf50bca436d3112b90/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=599bba86dffe8bd03676f4bf50bca436d3112b90", "patch": "@@ -242,6 +242,13 @@ struct lang_hooks\n   /* Mark nodes held through the lang_specific hooks in the tree.  */\n   void (*mark_tree) PARAMS ((tree));\n \n+  /* Set the DECL_ASSEMBLER_NAME for a node.  If it is the sort of\n+     thing that the assembler should talk about, set\n+     DECL_ASSEMBLER_NAME to an appropriate IDENTIFIER_NODE.\n+     Otherwise, set it to the ERROR_MARK_NODE to ensure that the\n+     assembler does not talk about it.  */\n+  void (*set_decl_assembler_name) PARAMS ((tree));\n+\n   /* Nonzero if TYPE_READONLY and TREE_READONLY should always be honored.  */\n   bool honor_readonly;\n "}, {"sha": "f4aea2602c33d35cf5a9850a86b9a646e59b8812", "filename": "gcc/tree.c", "status": "modified", "additions": 12, "deletions": 37, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599bba86dffe8bd03676f4bf50bca436d3112b90/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599bba86dffe8bd03676f4bf50bca436d3112b90/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=599bba86dffe8bd03676f4bf50bca436d3112b90", "patch": "@@ -133,43 +133,9 @@ static int type_hash_marked_p PARAMS ((const void *));\n static void type_hash_mark PARAMS ((const void *));\n static int mark_tree_hashtable_entry PARAMS((void **, void *));\n \n-/* Set the DECL_ASSEMBLER_NAME for a node.  If it is the sort of thing\n-   that the assembler should talk about, set DECL_ASSEMBLER_NAME to an\n-   appropriate IDENTIFIER_NODE.  Otherwise, set it to the\n-   ERROR_MARK_NODE to ensure that the assembler does not talk about\n-   it.  */\n-void (*lang_set_decl_assembler_name)     PARAMS ((tree));\n-\f\n tree global_trees[TI_MAX];\n tree integer_types[itk_none];\n \f\n-/* Set the DECL_ASSEMBLER_NAME for DECL.  */\n-void\n-set_decl_assembler_name (decl)\n-     tree decl;\n-{\n-  /* The language-independent code should never use the\n-     DECL_ASSEMBLER_NAME for lots of DECLs.  Only FUNCTION_DECLs and\n-     VAR_DECLs for variables with static storage duration need a real\n-     DECL_ASSEMBLER_NAME.  */\n-  if (TREE_CODE (decl) == FUNCTION_DECL\n-      || (TREE_CODE (decl) == VAR_DECL \n-\t  && (TREE_STATIC (decl) \n-\t      || DECL_EXTERNAL (decl) \n-\t      || TREE_PUBLIC (decl))))\n-    /* By default, assume the name to use in assembly code is the\n-       same as that used in the source language.  (That's correct\n-       for C, and GCC used to set DECL_ASSEMBLER_NAME to the same\n-       value as DECL_NAME in build_decl, so this choice provides\n-       backwards compatibility with existing front-ends.  */\n-    SET_DECL_ASSEMBLER_NAME (decl, DECL_NAME (decl));\n-  else\n-    /* Nobody should ever be asking for the DECL_ASSEMBLER_NAME of\n-       these DECLs -- unless they're in language-dependent code, in\n-       which case lang_set_decl_assembler_name should handle things.  */\n-    abort ();\n-}\n-\f\n /* Init the principal obstacks.  */\n \n void\n@@ -184,9 +150,6 @@ init_obstacks ()\n \t\t\t  type_hash_mark);\n   ggc_add_tree_root (global_trees, TI_MAX);\n   ggc_add_tree_root (integer_types, itk_none);\n-\n-  /* Set lang_set_decl_set_assembler_name to a default value.  */\n-  lang_set_decl_assembler_name = set_decl_assembler_name;\n }\n \n \f\n@@ -214,6 +177,18 @@ perm_calloc (nelem, size)\n   return rval;\n }\n \n+/* The name of the object as the assembler will see it (but before any\n+   translations made by ASM_OUTPUT_LABELREF).  Often this is the same\n+   as DECL_NAME.  It is an IDENTIFIER_NODE.  */\n+tree\n+decl_assembler_name (decl)\n+     tree decl;\n+{\n+  if (!DECL_ASSEMBLER_NAME_SET_P (decl))\n+    (*lang_hooks.set_decl_assembler_name) (decl);\n+  return DECL_CHECK (decl)->decl.assembler_name;\n+}\n+\n /* Compute the number of bytes occupied by 'node'.  This routine only\n    looks at TREE_CODE and, if the code is TREE_VEC, TREE_VEC_LENGTH.  */\n size_t"}, {"sha": "ad24904f1d61d4171f523a577b163568bfa1dcd9", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/599bba86dffe8bd03676f4bf50bca436d3112b90/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/599bba86dffe8bd03676f4bf50bca436d3112b90/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=599bba86dffe8bd03676f4bf50bca436d3112b90", "patch": "@@ -1352,11 +1352,7 @@ struct tree_type\n /* The name of the object as the assembler will see it (but before any\n    translations made by ASM_OUTPUT_LABELREF).  Often this is the same\n    as DECL_NAME.  It is an IDENTIFIER_NODE.  */\n-#define DECL_ASSEMBLER_NAME(NODE)\t\t\\\n-  ((DECL_ASSEMBLER_NAME_SET_P (NODE)\t\t\\\n-    ? (void) 0\t\t\t\t\t\\\n-    : (*lang_set_decl_assembler_name) (NODE)),\t\\\n-   DECL_CHECK (NODE)->decl.assembler_name)\n+#define DECL_ASSEMBLER_NAME(NODE) decl_assembler_name (NODE)\n \n /* Returns non-zero if the DECL_ASSEMBLER_NAME for NODE has been set.  If zero,\n    the NODE might still have a DECL_ASSEMBLER_NAME -- it just hasn't been set\n@@ -2057,6 +2053,7 @@ extern double approx_sqrt\t\tPARAMS ((double));\n \n extern char *permalloc\t\t\tPARAMS ((int));\n extern char *expralloc\t\t\tPARAMS ((int));\n+extern tree decl_assembler_name\t\tPARAMS ((tree));\n \n /* Compute the number of bytes occupied by 'node'.  This routine only\n    looks at TREE_CODE and, if the code is TREE_VEC, TREE_VEC_LENGTH.  */\n@@ -2811,13 +2808,6 @@ extern int alias_sets_conflict_p\t\tPARAMS ((HOST_WIDE_INT,\n extern int readonly_fields_p\t\t\tPARAMS ((tree));\n extern int objects_must_conflict_p\t\tPARAMS ((tree, tree));\n \n-/* Set the DECL_ASSEMBLER_NAME for a node.  If it is the sort of thing\n-   that the assembler should talk about, set DECL_ASSEMBLER_NAME to an\n-   appropriate IDENTIFIER_NODE.  Otherwise, set it to the\n-   ERROR_MARK_NODE to ensure that the assembler does not talk about\n-   it.  */\n-extern void (*lang_set_decl_assembler_name)     PARAMS ((tree));\n-\n struct obstack;\n \n /* In tree.c */"}]}