{"sha": "2988e8a39e50f3acb58b82c8bca8f06b5d2562a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk4OGU4YTM5ZTUwZjNhY2I1OGI4MmM4YmNhOGYwNmI1ZDI1NjJhOQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-13T18:35:12Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-13T18:35:12Z"}, "message": "Simplify extraction of YYEMPTY from cp-parse.c.\n\nGenerate c-parse.y, objc-parse.y from c-parse.in if required.\n\nFrom-SVN: r2439", "tree": {"sha": "e22c649e9edaf9499f264a892e26c22109f32b21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e22c649e9edaf9499f264a892e26c22109f32b21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2988e8a39e50f3acb58b82c8bca8f06b5d2562a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2988e8a39e50f3acb58b82c8bca8f06b5d2562a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2988e8a39e50f3acb58b82c8bca8f06b5d2562a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2988e8a39e50f3acb58b82c8bca8f06b5d2562a9/comments", "author": null, "committer": null, "parents": [{"sha": "cab554610be863878e01ceacee6c8360c8e48d7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab554610be863878e01ceacee6c8360c8e48d7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cab554610be863878e01ceacee6c8360c8e48d7b"}], "stats": {"total": 79, "additions": 68, "deletions": 11}, "files": [{"sha": "14838f24414f688282f4b4f33de35ae0be298439", "filename": "gcc/make-cc1.com", "status": "modified", "additions": 68, "deletions": 11, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2988e8a39e50f3acb58b82c8bca8f06b5d2562a9/gcc%2Fmake-cc1.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2988e8a39e50f3acb58b82c8bca8f06b5d2562a9/gcc%2Fmake-cc1.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmake-cc1.com?ref=2988e8a39e50f3acb58b82c8bca8f06b5d2562a9", "patch": "@@ -22,6 +22,7 @@ $! CC\t:=\tcc\t!uncomment for VAXC\n $ BISON\t:=\tbison\n $ RENAME\t:=\trename/new_vers\n $ LINK\t:=\tlink\n+$ EDIT :=\tedit\n $!\n $!\tCompiler options\n $!\n@@ -180,6 +181,67 @@ $!'f$verify(0)\n $\tendif\n $!\n $compile_cc1:\n+$if (DO_CC1 + DO_CC1PLUS) .ne.0\n+$\tthen\n+$write sys$output \"testing\"\n+$if (f$search(\"C-PARSE.Y\") .eqs. \"\") then goto yes_yfiles\n+$if (f$cvtime(f$file_attributes(\"C-PARSE.IN\",\"RDT\")).gts. -\n+ \t    f$cvtime(f$file_attributes(\"C-PARSE.Y\",\"RDT\")))  -\n+\t\tthen goto yes_yfiles\n+$if (f$search(\"OBJC-PARSE.Y\") .eqs. \"\") then goto yes_yfiles\n+$if (f$cvtime(f$file_attributes(\"C-PARSE.IN\",\"RDT\")).gts. -\n+ \t    f$cvtime(f$file_attributes(\"OBJC-PARSE.Y\",\"RDT\")))  -\n+\t\tthen goto yes_yfiles\n+$GOTO no_yfiles\n+$echo \"Now processing c-parse.in to generate c-parse.y and objc-parse.y.\"\n+$yes_yfiles:\n+$ edit/tpu/nojournal/nosection/nodisplay/command=sys$input\n+!\n+!     Read c-parse.in, write c-parse.y and objc-parse.y, depending on\n+!     paired lines of \"ifc\" & \"end ifc\" and \"ifobjc\" & \"end ifobjc\" to\n+!     control what goes into each file.  Most lines will be common to\n+!     both (hence not bracketed by either control pair).  Mismatched\n+!     pairs aren't detected--garbage in, garbage out...\n+!\n+\n+   PROCEDURE do_output()\n+      IF NOT objc_only THEN POSITION(END_OF(c)); COPY_TEXT(input_line); ENDIF;\n+      IF NOT c_only THEN POSITION(END_OF(objc)); COPY_TEXT(input_line); ENDIF;\n+      POSITION(input_file);                     !reset\n+   ENDPROCEDURE;\n+\n+   input_file := CREATE_BUFFER(\"input\", \"c-parse.in\");  !load data\n+\t\t SET(NO_WRITE, input_file);\n+   c          := CREATE_BUFFER(\"c_output\");     !1st output file\n+   objc       := CREATE_BUFFER(\"objc_output\");  !2nd output file\n+\n+   POSITION(BEGINNING_OF(input_file));\n+   c_only     := 0;\n+   objc_only  := 0;\n+\n+   LOOP\n+      EXITIF MARK(NONE) = END_OF(input_file);   !are we done yet?\n+\n+      input_line := CURRENT_LINE;               !access current_line just once\n+      CASE EDIT(input_line, TRIM_TRAILING, OFF, NOT_IN_PLACE)\n+\t [\"ifc\"]        : c_only := 1;\n+\t [\"end ifc\"]    : c_only := 0;\n+\t [\"ifobjc\"]     : objc_only := 1;\n+\t [\"end ifobjc\"] : objc_only := 0;\n+!         default -- add non-control line to either or both output files\n+\t [INRANGE]      : do_output();          !between \"end\" and \"if\"\n+\t [OUTRANGE]     : do_output();          !before \"end\" or after \"if\"\n+      ENDCASE;\n+\n+      MOVE_VERTICAL(1);                         !go to next line\n+   ENDLOOP;\n+\n+   WRITE_FILE(c, \"c-parse.y\");\n+   WRITE_FILE(objc, \"objc-parse.y\");\n+   QUIT\n+$\tendif\t\n+$no_yfiles:\n+$!\n $open cfile$ compilers.list\n $cloop:read cfile$ compilername/end=cdone\n $! language specific modules\n@@ -241,17 +303,12 @@ $set verify\n $\t 'BISON' /define /verbose 'flnm'.y\n $\t 'RENAME' 'flnm'_tab.c 'flnm'.c\n $\t 'RENAME' 'flnm'_tab.h 'flnm'.h\n-$\tif flnm.eqs.\"cp-parse\"\n-$\t\tthen\n-$\t\tsearch cp-parse.c \"#define YYEMPTY\"/output=t.tmp\n-$\t\topen jfile$ t.tmp\n-$\t\tread jfile$ empty_line\n-$\t\tclose jfile$\n-$\t\topen jfile$ cp-parse.h/append\n-$\t\twrite jfile$ empty_line\n-$\t\tclose jfile$\n-$\t\tdelete/nolog t.tmp;\n-$\t\tendif\n+$       if flnm.eqs.\"cp-parse\"\n+$       then            ! fgrep '#define YYEMPTY' cp-parse.c >>cp-parse.h\n+$               open/append jfile$ cp-parse.h\n+$               search/exact/output=jfile$ cp-parse.c \"#define YYEMPTY\"\n+$               close jfile$\n+$       endif\n $!'f$verify(0)\n $no_bison:\n $\tendif"}]}