{"sha": "740e5b6f17ebc8b0bd2dbf68051855a2a849177a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQwZTViNmYxN2ViYzhiMGJkMmRiZjY4MDUxODU1YTJhODQ5MTc3YQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2004-03-25T17:55:13Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2004-03-25T17:55:13Z"}, "message": "builtins.def: Add ctype builtins.\n\n\t* builtins.def: Add ctype builtins.\n\t* doc/extend.texi: Likewise.\ntestsuite:\n\t* gcc.dg/torture/builtin-ctype-1.c: New test.\n\nFrom-SVN: r79960", "tree": {"sha": "3db4f1c155cf3a143f90e5dc2df9c840cbedb918", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3db4f1c155cf3a143f90e5dc2df9c840cbedb918"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/740e5b6f17ebc8b0bd2dbf68051855a2a849177a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/740e5b6f17ebc8b0bd2dbf68051855a2a849177a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/740e5b6f17ebc8b0bd2dbf68051855a2a849177a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/740e5b6f17ebc8b0bd2dbf68051855a2a849177a/comments", "author": null, "committer": null, "parents": [{"sha": "e19f6bded7ebdab435f14256f33376d36ee94b1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e19f6bded7ebdab435f14256f33376d36ee94b1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e19f6bded7ebdab435f14256f33376d36ee94b1c"}], "stats": {"total": 184, "additions": 137, "deletions": 47}, "files": [{"sha": "071d0362e232660ea2678c3dd5942d51a3cf46ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740e5b6f17ebc8b0bd2dbf68051855a2a849177a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740e5b6f17ebc8b0bd2dbf68051855a2a849177a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=740e5b6f17ebc8b0bd2dbf68051855a2a849177a", "patch": "@@ -1,3 +1,8 @@\n+2004-03-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.def: Add ctype builtins.\n+\t* doc/extend.texi: Likewise.\n+\n 2004-03-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtins.c (fold_builtin): Add new builtin optimizations for"}, {"sha": "24118ddf58e455d9d4171d82045e093dfe5ca20d", "filename": "gcc/builtins.def", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740e5b6f17ebc8b0bd2dbf68051855a2a849177a/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740e5b6f17ebc8b0bd2dbf68051855a2a849177a/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=740e5b6f17ebc8b0bd2dbf68051855a2a849177a", "patch": "@@ -491,6 +491,24 @@ DEF_C99_BUILTIN        (BUILT_IN_VSNPRINTF, \"vsnprintf\", BT_FN_INT_STRING_SIZE_C\n DEF_LIB_BUILTIN        (BUILT_IN_VSPRINTF, \"vsprintf\", BT_FN_INT_STRING_CONST_STRING_VALIST_ARG, ATTR_FORMAT_PRINTF_2_0)\n DEF_C99_BUILTIN        (BUILT_IN_VSSCANF, \"vsscanf\", BT_FN_INT_CONST_STRING_CONST_STRING_VALIST_ARG, ATTR_FORMAT_SCANF_2_0)\n \n+/* Category: ctype builtins.  */\n+DEF_LIB_BUILTIN        (BUILT_IN_ISALNUM, \"isalnum\", BT_FN_INT_INT, ATTR_PURE_NOTHROW_LIST)\n+DEF_LIB_BUILTIN        (BUILT_IN_ISALPHA, \"isalpha\", BT_FN_INT_INT, ATTR_PURE_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISASCII, \"isascii\", BT_FN_INT_INT, ATTR_CONST_NOTHROW_LIST)\n+DEF_C99_BUILTIN        (BUILT_IN_ISBLANK, \"isblank\", BT_FN_INT_INT, ATTR_PURE_NOTHROW_LIST)\n+DEF_LIB_BUILTIN        (BUILT_IN_ISCNTRL, \"iscntrl\", BT_FN_INT_INT, ATTR_PURE_NOTHROW_LIST)\n+DEF_LIB_BUILTIN        (BUILT_IN_ISDIGIT, \"isdigit\", BT_FN_INT_INT, ATTR_PURE_NOTHROW_LIST)\n+DEF_LIB_BUILTIN        (BUILT_IN_ISGRAPH, \"isgraph\", BT_FN_INT_INT, ATTR_PURE_NOTHROW_LIST)\n+DEF_LIB_BUILTIN        (BUILT_IN_ISLOWER, \"islower\", BT_FN_INT_INT, ATTR_PURE_NOTHROW_LIST)\n+DEF_LIB_BUILTIN        (BUILT_IN_ISPRINT, \"isprint\", BT_FN_INT_INT, ATTR_PURE_NOTHROW_LIST)\n+DEF_LIB_BUILTIN        (BUILT_IN_ISPUNCT, \"ispunct\", BT_FN_INT_INT, ATTR_PURE_NOTHROW_LIST)\n+DEF_LIB_BUILTIN        (BUILT_IN_ISSPACE, \"isspace\", BT_FN_INT_INT, ATTR_PURE_NOTHROW_LIST)\n+DEF_LIB_BUILTIN        (BUILT_IN_ISUPPER, \"isupper\", BT_FN_INT_INT, ATTR_PURE_NOTHROW_LIST)\n+DEF_LIB_BUILTIN        (BUILT_IN_ISXDIGIT, \"isxdigit\", BT_FN_INT_INT, ATTR_PURE_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_TOASCII, \"toascii\", BT_FN_INT_INT, ATTR_CONST_NOTHROW_LIST)\n+DEF_LIB_BUILTIN        (BUILT_IN_TOLOWER, \"tolower\", BT_FN_INT_INT, ATTR_PURE_NOTHROW_LIST)\n+DEF_LIB_BUILTIN        (BUILT_IN_TOUPPER, \"toupper\", BT_FN_INT_INT, ATTR_PURE_NOTHROW_LIST)\n+\n /* Category: miscellaneous builtins.  */\n DEF_LIB_BUILTIN        (BUILT_IN_ABORT, \"abort\", BT_FN_VOID, ATTR_NORETURN_NOTHROW_LIST)\n DEF_LIB_BUILTIN        (BUILT_IN_ABS, \"abs\", BT_FN_INT_INT, ATTR_CONST_NOTHROW_LIST)"}, {"sha": "9eb3b7c44b1665395da83f8fa101bf10e1d5aef8", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 66, "deletions": 47, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740e5b6f17ebc8b0bd2dbf68051855a2a849177a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740e5b6f17ebc8b0bd2dbf68051855a2a849177a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=740e5b6f17ebc8b0bd2dbf68051855a2a849177a", "patch": "@@ -4886,6 +4886,19 @@ v4si f (v4si a, v4si b, v4si c)\n @findex ilogbl\n @findex imaxabs\n @findex index\n+@findex isalnum\n+@findex isalpha\n+@findex isascii\n+@findex isblank\n+@findex iscntrl\n+@findex isdigit\n+@findex isgraph\n+@findex islower\n+@findex isprint\n+@findex ispunct\n+@findex isspace\n+@findex isupper\n+@findex isxdigit\n @findex j0\n @findex j0f\n @findex j0l\n@@ -5026,6 +5039,9 @@ v4si f (v4si a, v4si b, v4si c)\n @findex tgamma\n @findex tgammaf\n @findex tgammal\n+@findex toascii\n+@findex tolower\n+@findex toupper\n @findex trunc\n @findex truncf\n @findex truncl\n@@ -5072,15 +5088,16 @@ Outside strict ISO C mode (@option{-ansi}, @option{-std=c89} or\n @code{drem}, @code{exp10f}, @code{exp10l}, @code{exp10}, @code{ffsll},\n @code{ffsl}, @code{ffs}, @code{fprintf_unlocked}, @code{fputs_unlocked},\n @code{gammaf}, @code{gammal}, @code{gamma}, @code{gettext},\n-@code{index}, @code{j0f}, @code{j0l}, @code{j0}, @code{j1f}, @code{j1l},\n-@code{j1}, @code{jnf}, @code{jnl}, @code{jn}, @code{mempcpy},\n-@code{pow10f}, @code{pow10l}, @code{pow10}, @code{printf_unlocked},\n-@code{rindex}, @code{scalbf}, @code{scalbl}, @code{scalb},\n-@code{signbit}, @code{signbitf}, @code{signbitl},\n+@code{index}, @code{isascii}, @code{j0f}, @code{j0l}, @code{j0},\n+@code{j1f}, @code{j1l}, @code{j1}, @code{jnf}, @code{jnl}, @code{jn},\n+@code{mempcpy}, @code{pow10f}, @code{pow10l}, @code{pow10},\n+@code{printf_unlocked}, @code{rindex}, @code{scalbf}, @code{scalbl},\n+@code{scalb}, @code{signbit}, @code{signbitf}, @code{signbitl},\n @code{significandf}, @code{significandl}, @code{significand},\n @code{sincosf}, @code{sincosl}, @code{sincos}, @code{stpcpy},\n-@code{strdup}, @code{strfmon}, @code{y0f}, @code{y0l}, @code{y0},\n-@code{y1f}, @code{y1l}, @code{y1}, @code{ynf}, @code{ynl} and @code{yn}\n+@code{strdup}, @code{strfmon}, @code{toascii}, @code{y0f}, @code{y0l},\n+@code{y0}, @code{y1f}, @code{y1l}, @code{y1}, @code{ynf}, @code{ynl} and\n+@code{yn}\n may be handled as built-in functions.\n All these functions have corresponding versions\n prefixed with @code{__builtin_}, which may be used even in strict C89\n@@ -5097,36 +5114,35 @@ The ISO C99 functions\n @code{catanl}, @code{catan}, @code{cbrtf}, @code{cbrtl}, @code{cbrt},\n @code{ccosf}, @code{ccoshf}, @code{ccoshl}, @code{ccosh}, @code{ccosl},\n @code{ccos}, @code{cexpf}, @code{cexpl}, @code{cexp}, @code{cimagf},\n-@code{cimagl}, @code{cimag},\n-@code{conjf}, @code{conjl}, @code{conj}, @code{copysignf},\n-@code{copysignl}, @code{copysign}, @code{cpowf}, @code{cpowl},\n-@code{cpow}, @code{cprojf}, @code{cprojl}, @code{cproj}, @code{crealf},\n-@code{creall}, @code{creal}, @code{csinf}, @code{csinhf}, @code{csinhl},\n-@code{csinh}, @code{csinl}, @code{csin}, @code{csqrtf}, @code{csqrtl},\n-@code{csqrt}, @code{ctanf}, @code{ctanhf}, @code{ctanhl}, @code{ctanh},\n-@code{ctanl}, @code{ctan}, @code{erfcf}, @code{erfcl}, @code{erfc},\n-@code{erff}, @code{erfl}, @code{erf}, @code{exp2f}, @code{exp2l},\n-@code{exp2}, @code{expm1f}, @code{expm1l}, @code{expm1}, @code{fdimf},\n-@code{fdiml}, @code{fdim}, @code{fmaf}, @code{fmal}, @code{fmaxf},\n-@code{fmaxl}, @code{fmax}, @code{fma}, @code{fminf}, @code{fminl},\n-@code{fmin}, @code{hypotf}, @code{hypotl}, @code{hypot}, @code{ilogbf},\n-@code{ilogbl}, @code{ilogb}, @code{imaxabs}, @code{lgammaf},\n-@code{lgammal}, @code{lgamma}, @code{llabs}, @code{llrintf},\n-@code{llrintl}, @code{llrint}, @code{llroundf}, @code{llroundl},\n-@code{llround}, @code{log1pf}, @code{log1pl}, @code{log1p},\n-@code{log2f}, @code{log2l}, @code{log2}, @code{logbf}, @code{logbl},\n-@code{logb}, @code{lrintf}, @code{lrintl}, @code{lrint}, @code{lroundf},\n-@code{lroundl}, @code{lround}, @code{nearbyintf}, @code{nearbyintl},\n-@code{nearbyint}, @code{nextafterf}, @code{nextafterl},\n-@code{nextafter}, @code{nexttowardf}, @code{nexttowardl},\n-@code{nexttoward}, @code{remainderf}, @code{remainderl},\n-@code{remainder}, @code{remquof}, @code{remquol}, @code{remquo},\n-@code{rintf}, @code{rintl}, @code{rint}, @code{roundf}, @code{roundl},\n-@code{round}, @code{scalblnf}, @code{scalblnl}, @code{scalbln},\n-@code{scalbnf}, @code{scalbnl}, @code{scalbn}, @code{snprintf},\n-@code{tgammaf}, @code{tgammal}, @code{tgamma}, @code{truncf},\n-@code{truncl}, @code{trunc}, @code{vfscanf}, @code{vscanf},\n-@code{vsnprintf} and @code{vsscanf}\n+@code{cimagl}, @code{cimag}, @code{conjf}, @code{conjl}, @code{conj},\n+@code{copysignf}, @code{copysignl}, @code{copysign}, @code{cpowf},\n+@code{cpowl}, @code{cpow}, @code{cprojf}, @code{cprojl}, @code{cproj},\n+@code{crealf}, @code{creall}, @code{creal}, @code{csinf}, @code{csinhf},\n+@code{csinhl}, @code{csinh}, @code{csinl}, @code{csin}, @code{csqrtf},\n+@code{csqrtl}, @code{csqrt}, @code{ctanf}, @code{ctanhf}, @code{ctanhl},\n+@code{ctanh}, @code{ctanl}, @code{ctan}, @code{erfcf}, @code{erfcl},\n+@code{erfc}, @code{erff}, @code{erfl}, @code{erf}, @code{exp2f},\n+@code{exp2l}, @code{exp2}, @code{expm1f}, @code{expm1l}, @code{expm1},\n+@code{fdimf}, @code{fdiml}, @code{fdim}, @code{fmaf}, @code{fmal},\n+@code{fmaxf}, @code{fmaxl}, @code{fmax}, @code{fma}, @code{fminf},\n+@code{fminl}, @code{fmin}, @code{hypotf}, @code{hypotl}, @code{hypot},\n+@code{ilogbf}, @code{ilogbl}, @code{ilogb}, @code{imaxabs},\n+@code{isblank}, @code{lgammaf}, @code{lgammal}, @code{lgamma},\n+@code{llabs}, @code{llrintf}, @code{llrintl}, @code{llrint},\n+@code{llroundf}, @code{llroundl}, @code{llround}, @code{log1pf},\n+@code{log1pl}, @code{log1p}, @code{log2f}, @code{log2l}, @code{log2},\n+@code{logbf}, @code{logbl}, @code{logb}, @code{lrintf}, @code{lrintl},\n+@code{lrint}, @code{lroundf}, @code{lroundl}, @code{lround},\n+@code{nearbyintf}, @code{nearbyintl}, @code{nearbyint},\n+@code{nextafterf}, @code{nextafterl}, @code{nextafter},\n+@code{nexttowardf}, @code{nexttowardl}, @code{nexttoward},\n+@code{remainderf}, @code{remainderl}, @code{remainder}, @code{remquof},\n+@code{remquol}, @code{remquo}, @code{rintf}, @code{rintl}, @code{rint},\n+@code{roundf}, @code{roundl}, @code{round}, @code{scalblnf},\n+@code{scalblnl}, @code{scalbln}, @code{scalbnf}, @code{scalbnl},\n+@code{scalbn}, @code{snprintf}, @code{tgammaf}, @code{tgammal},\n+@code{tgamma}, @code{truncf}, @code{truncl}, @code{trunc},\n+@code{vfscanf}, @code{vscanf}, @code{vsnprintf} and @code{vsscanf}\n are handled as built-in functions\n except in strict ISO C90 mode (@option{-ansi} or @option{-std=c89}).\n \n@@ -5148,16 +5164,19 @@ The ISO C90 functions\n @code{abort}, @code{abs}, @code{acos}, @code{asin}, @code{atan2},\n @code{atan}, @code{calloc}, @code{ceil}, @code{cosh}, @code{cos},\n @code{exit}, @code{exp}, @code{fabs}, @code{floor}, @code{fmod},\n-@code{fprintf}, @code{fputs}, @code{frexp}, @code{fscanf}, @code{labs},\n-@code{ldexp}, @code{log10}, @code{log}, @code{malloc}, @code{memcmp},\n-@code{memcpy}, @code{memset}, @code{modf}, @code{pow}, @code{printf},\n-@code{putchar}, @code{puts}, @code{scanf}, @code{sinh}, @code{sin},\n-@code{snprintf}, @code{sprintf}, @code{sqrt}, @code{sscanf},\n-@code{strcat}, @code{strchr}, @code{strcmp}, @code{strcpy},\n-@code{strcspn}, @code{strlen}, @code{strncat}, @code{strncmp},\n-@code{strncpy}, @code{strpbrk}, @code{strrchr}, @code{strspn},\n-@code{strstr}, @code{tanh}, @code{tan}, @code{vfprintf}, @code{vprintf}\n-and @code{vsprintf}\n+@code{fprintf}, @code{fputs}, @code{frexp}, @code{fscanf},\n+@code{isalnum}, @code{isalpha}, @code{iscntrl}, @code{isdigit},\n+@code{isgraph}, @code{islower}, @code{isprint}, @code{ispunct},\n+@code{isspace}, @code{isupper}, @code{isxdigit}, @code{tolower},\n+@code{toupper}, @code{labs}, @code{ldexp}, @code{log10}, @code{log},\n+@code{malloc}, @code{memcmp}, @code{memcpy}, @code{memset}, @code{modf},\n+@code{pow}, @code{printf}, @code{putchar}, @code{puts}, @code{scanf},\n+@code{sinh}, @code{sin}, @code{snprintf}, @code{sprintf}, @code{sqrt},\n+@code{sscanf}, @code{strcat}, @code{strchr}, @code{strcmp},\n+@code{strcpy}, @code{strcspn}, @code{strlen}, @code{strncat},\n+@code{strncmp}, @code{strncpy}, @code{strpbrk}, @code{strrchr},\n+@code{strspn}, @code{strstr}, @code{tanh}, @code{tan}, @code{vfprintf},\n+@code{vprintf} and @code{vsprintf}\n are all recognized as built-in functions unless\n @option{-fno-builtin} is specified (or @option{-fno-builtin-@var{function}}\n is specified for an individual function).  All of these functions have"}, {"sha": "7e44e7e0847df03d426078535b7e39132b9a5fb0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740e5b6f17ebc8b0bd2dbf68051855a2a849177a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740e5b6f17ebc8b0bd2dbf68051855a2a849177a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=740e5b6f17ebc8b0bd2dbf68051855a2a849177a", "patch": "@@ -1,3 +1,7 @@\n+2004-03-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/torture/builtin-ctype-1.c: New test.\n+\n 2004-03-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/torture/builtin-explog-1.c: Add new cases."}, {"sha": "ad6fc1c60b6908665e889325923389e1ab4a3fa3", "filename": "gcc/testsuite/gcc.dg/torture/builtin-ctype-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740e5b6f17ebc8b0bd2dbf68051855a2a849177a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-ctype-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740e5b6f17ebc8b0bd2dbf68051855a2a849177a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-ctype-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-ctype-1.c?ref=740e5b6f17ebc8b0bd2dbf68051855a2a849177a", "patch": "@@ -0,0 +1,44 @@\n+/* Copyright (C) 2004  Free Software Foundation.\n+\n+   Verify that built-in ctype function attributes are correctly set by\n+   the compiler.\n+\n+   Written by Kaveh Ghazi, 2004-03-23.  */\n+\n+/* { dg-do link } */\n+\n+\n+void test(int i)\n+{\n+  /* All of these ctype functions should be const/pure and thus\n+     eliminated.  */\n+#define TEST_CTYPE(FN) \\\n+  extern int FN(int); \\\n+  extern void link_failure_##FN(void); \\\n+  if (FN(i) != FN(i)) \\\n+    link_failure_##FN()\n+  \n+#ifdef __OPTIMIZE__\n+  TEST_CTYPE(isalnum);\n+  TEST_CTYPE(isalpha);\n+  TEST_CTYPE(isascii);\n+  TEST_CTYPE(isblank);\n+  TEST_CTYPE(iscntrl);\n+  TEST_CTYPE(isdigit);\n+  TEST_CTYPE(isgraph);\n+  TEST_CTYPE(islower);\n+  TEST_CTYPE(isprint);\n+  TEST_CTYPE(ispunct);\n+  TEST_CTYPE(isspace);\n+  TEST_CTYPE(isupper);\n+  TEST_CTYPE(isxdigit);\n+  TEST_CTYPE(toascii);\n+  TEST_CTYPE(tolower);\n+  TEST_CTYPE(toupper);\n+#endif /* __OPTIMIZE__ */\n+}\n+\n+int main (void)\n+{\n+  return 0;\n+}"}]}