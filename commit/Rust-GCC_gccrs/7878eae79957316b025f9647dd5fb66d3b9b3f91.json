{"sha": "7878eae79957316b025f9647dd5fb66d3b9b3f91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg3OGVhZTc5OTU3MzE2YjAyNWY5NjQ3ZGQ1ZmI2NmQzYjliM2Y5MQ==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@issan.informatik.uni-dortmund.de", "date": "1998-04-15T01:49:23Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "1998-04-15T01:49:23Z"}, "message": "m68k.md (adddi3, subdi3): Optimize for constant operand.\n\n\t* config/m68k/m68k.md (adddi3, subdi3): Optimize for constant\n\toperand.\n\nFrom-SVN: r19220", "tree": {"sha": "652f6ca5b551bea72ee90f7b95ed8188cc23d134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/652f6ca5b551bea72ee90f7b95ed8188cc23d134"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7878eae79957316b025f9647dd5fb66d3b9b3f91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7878eae79957316b025f9647dd5fb66d3b9b3f91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7878eae79957316b025f9647dd5fb66d3b9b3f91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7878eae79957316b025f9647dd5fb66d3b9b3f91/comments", "author": null, "committer": null, "parents": [{"sha": "b15fd0927e98e8c679e27ac6b822f8a0817f2abc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15fd0927e98e8c679e27ac6b822f8a0817f2abc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b15fd0927e98e8c679e27ac6b822f8a0817f2abc"}], "stats": {"total": 59, "additions": 55, "deletions": 4}, "files": [{"sha": "6c1a2fe061341aa0d496b57d673bd70afae9c50b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7878eae79957316b025f9647dd5fb66d3b9b3f91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7878eae79957316b025f9647dd5fb66d3b9b3f91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7878eae79957316b025f9647dd5fb66d3b9b3f91", "patch": "@@ -1,3 +1,8 @@\n+Wed Apr 15 10:47:21 1998  Andreas Schwab  <schwab@issan.informatik.uni-dortmund.de>\n+\n+\t* config/m68k/m68k.md (adddi3, subdi3): Optimize for constant\n+\toperand.\n+\n Wed Apr 15 01:21:21 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* emit-rtl.c (operand_subword): Rework slightly to avoid"}, {"sha": "b1501dec2ec1edfd4b32b2bfe6a71f76672b3fd0", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 50, "deletions": 4, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7878eae79957316b025f9647dd5fb66d3b9b3f91/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7878eae79957316b025f9647dd5fb66d3b9b3f91/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=7878eae79957316b025f9647dd5fb66d3b9b3f91", "patch": "@@ -2150,6 +2150,7 @@\n \t}\n       else\n \t{\n+\t  rtx xoperands[2];\n \t  if (GET_CODE (operands[2]) == REG)\n \t    operands[1] = gen_rtx_REG (SImode, REGNO (operands[2]) + 1);\n \t  else if (GET_CODE (operands[2]) == CONST_DOUBLE)\n@@ -2164,8 +2165,30 @@\n \t    }\n \t  else\n \t    operands[1] = adj_offsettable_operand (operands[2], 4);\n-\t  /* TODO : for consts, optimize move and add */\n-\t  return \\\"move%.l %2,%3\\;add%.l %1,%R0\\;addx%.l %3,%0\\\";\n+\t  xoperands[0] = operands[3];\n+\t  xoperands[1] = operands[2];\n+\t  output_asm_insn (output_move_simode (xoperands), xoperands);\n+\t  if (GET_CODE (operands[1]) == CONST_INT)\n+\t    {\n+\t      if (INTVAL (operands[1]) > 0 && INTVAL (operands[1]) <= 8)\n+\t\t{\n+#ifdef NO_ADDSUB_Q\n+\t\t  return \\\"add%.l %1,%R0\\;addx%.l %3,%0\\\";\n+#else\n+\t\t  return \\\"addq%.l %1,%R0\\;addx%.l %3,%0\\\";\n+#endif\n+\t\t}\n+\t      else if (INTVAL (operands[1]) >= -8 && INTVAL (operands[1]) < 0)\n+\t\t{\n+\t\t  operands[1] = GEN_INT (-INTVAL (operands[1]));\n+#ifdef NO_ADDSUB_Q\n+\t\t  return \\\"sub%.l %1,%R0\\;addx%.l %3,%0\\\";\n+#else\n+\t\t  return \\\"subq%.l %1,%R0\\;addx%.l %3,%0\\\";\n+#endif\n+\t\t}\n+\t    }\n+\t  return \\\"add%.l %1,%R0\\;addx%.l %3,%0\\\";\n \t}\n     }\n   else if (GET_CODE (operands[0]) == MEM)\n@@ -2680,6 +2703,7 @@\n \t}\n       else\n \t{\n+\t  rtx xoperands[2];\n \t  if (GET_CODE (operands[2]) == REG)\n \t    operands[1] = gen_rtx_REG (SImode, REGNO (operands[2]) + 1);\n \t  else if (GET_CODE (operands[2]) == CONST_DOUBLE)\n@@ -2694,8 +2718,30 @@\n \t    }\n \t  else\n \t    operands[1] = adj_offsettable_operand (operands[2], 4);\n-\t  /* TODO : for consts, optimize move and sub */\n-\t  return \\\"move%.l %2,%3\\;sub%.l %1,%R0\\;subx%.l %3,%0\\\";\n+\t  xoperands[0] = operands[3];\n+\t  xoperands[1] = operands[2];\n+\t  output_asm_insn (output_move_simode (xoperands), xoperands);\n+\t  if (GET_CODE (operands[1]) == CONST_INT)\n+\t    {\n+\t      if (INTVAL (operands[1]) > 0 && INTVAL (operands[1]) <= 8)\n+\t\t{\n+#ifdef NO_ADDSUB_Q\n+\t\t  return \\\"sub%.l %1,%R0\\;subx%.l %3,%0\\\";\n+#else\n+\t\t  return \\\"subq%.l %1,%R0\\;subx%.l %3,%0\\\";\n+#endif\n+\t\t}\n+\t      else if (INTVAL (operands[1]) >= -8 && INTVAL (operands[1]) < 0)\n+\t\t{\n+\t\t  operands[1] = GEN_INT (-INTVAL (operands[1]));\n+#ifdef NO_ADDSUB_Q\n+\t\t  return \\\"add%.l %1,%R0\\;subx%.l %3,%0\\\";\n+#else\n+\t\t  return \\\"addq%.l %1,%R0\\;subx%.l %3,%0\\\";\n+#endif\n+\t\t}\n+\t    }\n+\t  return \\\"sub%.l %1,%R0\\;subx%.l %3,%0\\\";\n \t}\n     }\n   else if (GET_CODE (operands[0]) == MEM)"}]}