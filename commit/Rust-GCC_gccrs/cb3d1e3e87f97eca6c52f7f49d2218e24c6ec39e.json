{"sha": "cb3d1e3e87f97eca6c52f7f49d2218e24c6ec39e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IzZDFlM2U4N2Y5N2VjYTZjNTJmN2Y0OWQyMjE4ZTI0YzZlYzM5ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-11-08T12:49:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-11-08T12:49:10Z"}, "message": "re PR tree-optimization/59047 (wrong code for bitfields at -O3 on x86_64-linux-gnu)\n\n2013-11-08  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/59047\n\t* tree-predcom.c (ref_at_iteration): Handle bitfield accesses\n\tproperly.\n\n\t* gcc.dg/torture/pr59047.c: New testcase.\n\nFrom-SVN: r204566", "tree": {"sha": "b2d20453dba3fa0b4453f067ab55e56ca8bf280f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2d20453dba3fa0b4453f067ab55e56ca8bf280f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb3d1e3e87f97eca6c52f7f49d2218e24c6ec39e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3d1e3e87f97eca6c52f7f49d2218e24c6ec39e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb3d1e3e87f97eca6c52f7f49d2218e24c6ec39e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3d1e3e87f97eca6c52f7f49d2218e24c6ec39e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "05ff7470028712278048d02c87c6e7682b45e099", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05ff7470028712278048d02c87c6e7682b45e099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05ff7470028712278048d02c87c6e7682b45e099"}], "stats": {"total": 78, "additions": 74, "deletions": 4}, "files": [{"sha": "19049bf3f52a3e2cb334ca3f61a4faaeeff932cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3d1e3e87f97eca6c52f7f49d2218e24c6ec39e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3d1e3e87f97eca6c52f7f49d2218e24c6ec39e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb3d1e3e87f97eca6c52f7f49d2218e24c6ec39e", "patch": "@@ -1,3 +1,9 @@\n+2013-11-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/59047\n+\t* tree-predcom.c (ref_at_iteration): Handle bitfield accesses\n+\tproperly.\n+\n 2013-11-08  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* common.opt (fcheck-pointer-bounds): Move to ..."}, {"sha": "4fc3066b528cd8c428ed2aabe5a4d498acc2f88b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3d1e3e87f97eca6c52f7f49d2218e24c6ec39e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3d1e3e87f97eca6c52f7f49d2218e24c6ec39e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb3d1e3e87f97eca6c52f7f49d2218e24c6ec39e", "patch": "@@ -1,3 +1,14 @@\n+2013-11-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/59047\n+\t* gcc.dg/torture/pr59047.c: New testcase.\n+\n+2013-11-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/59038\n+\tPR tree-optimization/58955\n+\t* gcc.dg/torture/pr59038.c: New testcase.\n+\n 2013-11-07  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/58471"}, {"sha": "fcedfcba870d6f6559b82bdde9d063b32a39b8c4", "filename": "gcc/testsuite/gcc.dg/torture/pr59047.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3d1e3e87f97eca6c52f7f49d2218e24c6ec39e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59047.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3d1e3e87f97eca6c52f7f49d2218e24c6ec39e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59047.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59047.c?ref=cb3d1e3e87f97eca6c52f7f49d2218e24c6ec39e", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+\n+struct\n+{\n+  int f0;\n+  int f1:1;\n+  int f2:2;\n+} a = {0, 0, 1};\n+\n+int b, c, *d, e, f;\n+\n+int\n+fn1 ()\n+{\n+  for (; b < 1; ++b)\n+    {\n+      for (e = 0; e < 1; e = 1)\n+\t{\n+\t  int **g = &d;\n+\t  *g = &c;\n+\t} \n+      *d = 0;\n+      f = a.f1;\n+      if (f)\n+\treturn 0;\n+    }\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  fn1 ();\n+  if (b != 1)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "6084cf62ef642ef8fed5c06fe9b0021485c57419", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3d1e3e87f97eca6c52f7f49d2218e24c6ec39e/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3d1e3e87f97eca6c52f7f49d2218e24c6ec39e/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=cb3d1e3e87f97eca6c52f7f49d2218e24c6ec39e", "patch": "@@ -1353,10 +1353,24 @@ ref_at_iteration (data_reference_p dr, int iter, gimple_seq *stmts)\n   tree addr = fold_build_pointer_plus (DR_BASE_ADDRESS (dr), off);\n   addr = force_gimple_operand_1 (addr, stmts, is_gimple_mem_ref_addr,\n \t\t\t\t NULL_TREE);\n-  return fold_build2 (MEM_REF, TREE_TYPE (DR_REF (dr)),\n-\t\t      addr,\n-\t\t      fold_convert (reference_alias_ptr_type (DR_REF (dr)),\n-\t\t\t\t    coff));\n+  tree alias_ptr = fold_convert (reference_alias_ptr_type (DR_REF (dr)), coff);\n+  /* While data-ref analysis punts on bit offsets it still handles\n+     bitfield accesses at byte boundaries.  Cope with that.  Note that\n+     we cannot simply re-apply the outer COMPONENT_REF because the\n+     byte-granular portion of it is already applied via DR_INIT and\n+     DR_OFFSET, so simply build a BIT_FIELD_REF knowing that the bits\n+     start at offset zero.  */\n+  if (TREE_CODE (DR_REF (dr)) == COMPONENT_REF\n+      && DECL_BIT_FIELD (TREE_OPERAND (DR_REF (dr), 1)))\n+    {\n+      tree field = TREE_OPERAND (DR_REF (dr), 1);\n+      return build3 (BIT_FIELD_REF, TREE_TYPE (DR_REF (dr)),\n+\t\t     build2 (MEM_REF, DECL_BIT_FIELD_TYPE (field),\n+\t\t\t     addr, alias_ptr),\n+\t\t     DECL_SIZE (field), bitsize_zero_node);\n+    }\n+  else\n+    return fold_build2 (MEM_REF, TREE_TYPE (DR_REF (dr)), addr, alias_ptr);\n }\n \n /* Get the initialization expression for the INDEX-th temporary variable"}]}