{"sha": "23a534a102ad0310ca6ccb35717bb54e102ffb3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNhNTM0YTEwMmFkMDMxMGNhNmNjYjM1NzE3YmI1NGUxMDJmZmIzZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-09-01T13:28:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-09-01T13:28:46Z"}, "message": "alias.c (ao_ref_from_mem): Adjust.\n\n2010-09-01  Richard Guenther  <rguenther@suse.de>\n\n\t* alias.c (ao_ref_from_mem): Adjust.\n\t* builtins.c (get_object_alignment): Likewise.\n\t* cfgexpand.c (expand_debug_expr): Likewise.\n\t* gimple.c (get_base_address): Likewise.\n\t* tree-dfa.c (get_ref_base_and_extent): Likewise.\n\t(get_addr_base_and_unit_offset): Likewise.  Fix for\n\tboth TMR_SYMBOL and TMR_BASE being set.\n\t* tree-eh.c (tree_could_trap_p): Likewise.\n\t* gimplify.c (gimplify_expr): Do not attempt to gimplify\n\tTMR_SYMBOL.  Always gimplify TMR_BASE.\n\t* tree-cfg.c (verify_types_in_gimple_reference): Verify\n\tTMR_BASE if there is a TMR_SYMBOL.\n\t* tree-pretty-print.c (dump_generic_node): Adjust.\n\t* tree-ssa-address.c (addr_for_mem_ref): Likewise.\n\t(tree_mem_ref_addr): Likewise.\n\t(create_mem_ref_raw): Likewise.\n\t(move_fixed_address_to_symbol): Likewise.\n\t(create_mem_ref): Likewise.\n\t(dump_mem_address): Likewise.\n\t* tree-ssa-alias.c (indirect_ref_may_alias_decl_p): Adjust.\n\tFix for both TMR_SYMBOL and TMR_BASE being set.\n\t(indirect_refs_may_alias_p): Likewise.\n\t* tree-ssa-operands.c (get_tmr_operands): Adjust.\n\t* tree.def (TARGET_MEM_REF): Adjust documentation.\n\nFrom-SVN: r163733", "tree": {"sha": "49f5344b822f529a83c1f7785cefc66b2fc375d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49f5344b822f529a83c1f7785cefc66b2fc375d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23a534a102ad0310ca6ccb35717bb54e102ffb3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23a534a102ad0310ca6ccb35717bb54e102ffb3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23a534a102ad0310ca6ccb35717bb54e102ffb3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23a534a102ad0310ca6ccb35717bb54e102ffb3e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8b08ecdf6138d3b3bd0c6b47b58d794b4bd5521", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8b08ecdf6138d3b3bd0c6b47b58d794b4bd5521", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8b08ecdf6138d3b3bd0c6b47b58d794b4bd5521"}], "stats": {"total": 121, "additions": 83, "deletions": 38}, "files": [{"sha": "6a621ecbc8f13315a8c4bba4d44d041ce3bfcdb7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23a534a102ad0310ca6ccb35717bb54e102ffb3e", "patch": "@@ -1,3 +1,30 @@\n+2010-09-01  Richard Guenther  <rguenther@suse.de>\n+\n+\t* alias.c (ao_ref_from_mem): Adjust.\n+\t* builtins.c (get_object_alignment): Likewise.\n+\t* cfgexpand.c (expand_debug_expr): Likewise.\n+\t* gimple.c (get_base_address): Likewise.\n+\t* tree-dfa.c (get_ref_base_and_extent): Likewise.\n+\t(get_addr_base_and_unit_offset): Likewise.  Fix for\n+\tboth TMR_SYMBOL and TMR_BASE being set.\n+\t* tree-eh.c (tree_could_trap_p): Likewise.\n+\t* gimplify.c (gimplify_expr): Do not attempt to gimplify\n+\tTMR_SYMBOL.  Always gimplify TMR_BASE.\n+\t* tree-cfg.c (verify_types_in_gimple_reference): Verify\n+\tTMR_BASE if there is a TMR_SYMBOL.\n+\t* tree-pretty-print.c (dump_generic_node): Adjust.\n+\t* tree-ssa-address.c (addr_for_mem_ref): Likewise.\n+\t(tree_mem_ref_addr): Likewise.\n+\t(create_mem_ref_raw): Likewise.\n+\t(move_fixed_address_to_symbol): Likewise.\n+\t(create_mem_ref): Likewise.\n+\t(dump_mem_address): Likewise.\n+\t* tree-ssa-alias.c (indirect_ref_may_alias_decl_p): Adjust.\n+\tFix for both TMR_SYMBOL and TMR_BASE being set.\n+\t(indirect_refs_may_alias_p): Likewise.\n+\t* tree-ssa-operands.c (get_tmr_operands): Adjust.\n+\t* tree.def (TARGET_MEM_REF): Adjust documentation.\n+\n 2010-09-01  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.h (enum ix86_tune_indices) <X86_TUNE_SINGLE_POP>:"}, {"sha": "580f8987d684d84464c3d7c63b93236117aafc77", "filename": "gcc/alias.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=23a534a102ad0310ca6ccb35717bb54e102ffb3e", "patch": "@@ -302,13 +302,13 @@ ao_ref_from_mem (ao_ref *ref, const_rtx mem)\n     }\n   else if (TREE_CODE (base) == TARGET_MEM_REF\n \t   && TMR_SYMBOL (base)\n-\t   && TREE_CODE (TMR_SYMBOL (base)) == VAR_DECL\n-\t   && ! TREE_STATIC (TMR_SYMBOL (base))\n+\t   && TREE_CODE (TREE_OPERAND (TMR_SYMBOL (base), 0)) == VAR_DECL\n+\t   && ! TREE_STATIC (TREE_OPERAND (TMR_SYMBOL (base), 0))\n \t   && cfun->gimple_df->decls_to_pointers != NULL)\n     {\n       void *namep;\n       namep = pointer_map_contains (cfun->gimple_df->decls_to_pointers,\n-\t\t\t\t    TMR_SYMBOL (base));\n+\t\t\t\t    TREE_OPERAND (TMR_SYMBOL (base), 0));\n       if (namep)\n \tref->base = build_simple_mem_ref (*(tree *)namep);\n     }"}, {"sha": "2cebb0e9dcd4f3740c2965efc803c327e2cc9a6f", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=23a534a102ad0310ca6ccb35717bb54e102ffb3e", "patch": "@@ -369,7 +369,8 @@ get_object_alignment (tree exp, unsigned int max_align)\n   else if (TREE_CODE (exp) == TARGET_MEM_REF\n \t   && TMR_SYMBOL (exp))\n     {\n-      align = get_object_alignment (TMR_SYMBOL (exp), max_align);\n+      align = get_object_alignment (TREE_OPERAND (TMR_SYMBOL (exp), 0),\n+\t\t\t\t    max_align);\n       if (TMR_OFFSET (exp))\n         bitpos += TREE_INT_CST_LOW (TMR_OFFSET (exp)) * BITS_PER_UNIT;\n       if (TMR_INDEX (exp) && TMR_STEP (exp))\n@@ -379,6 +380,8 @@ get_object_alignment (tree exp, unsigned int max_align)\n \t}\n       else if (TMR_INDEX (exp))\n \talign = BITS_PER_UNIT;\n+      if (TMR_BASE (exp))\n+\talign = BITS_PER_UNIT;\n     }\n   else\n     align = BITS_PER_UNIT;"}, {"sha": "1852885fba0daf83af9c6a267b606f6c908f82cf", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=23a534a102ad0310ca6ccb35717bb54e102ffb3e", "patch": "@@ -2468,7 +2468,8 @@ expand_debug_expr (tree exp)\n       return op0;\n \n     case TARGET_MEM_REF:\n-      if (TMR_SYMBOL (exp) && !DECL_RTL_SET_P (TMR_SYMBOL (exp)))\n+      if (TMR_SYMBOL (exp)\n+\t  && !DECL_RTL_SET_P (TREE_OPERAND (TMR_SYMBOL (exp), 0)))\n \treturn NULL;\n \n       op0 = expand_debug_expr"}, {"sha": "c0b5052eb5424f9b517b9b831fa9591dce6b15c0", "filename": "gcc/gimple.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=23a534a102ad0310ca6ccb35717bb54e102ffb3e", "patch": "@@ -3009,7 +3009,7 @@ get_base_address (tree t)\n     t = TREE_OPERAND (TREE_OPERAND (t, 0), 0);\n   else if (TREE_CODE (t) == TARGET_MEM_REF\n \t   && TMR_SYMBOL (t))\n-    t = TMR_SYMBOL (t);\n+    t = TREE_OPERAND (TMR_SYMBOL (t), 0);\n \n   if (SSA_VAR_P (t)\n       || TREE_CODE (t) == STRING_CST"}, {"sha": "bdb97ec9ba0061aa57286bf071777552657b28a8", "filename": "gcc/gimplify.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=23a534a102ad0310ca6ccb35717bb54e102ffb3e", "patch": "@@ -6978,9 +6978,14 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t    enum gimplify_status r0 = GS_ALL_DONE, r1 = GS_ALL_DONE;\n \n \t    if (TMR_SYMBOL (*expr_p))\n-\t      r0 = gimplify_expr (&TMR_SYMBOL (*expr_p), pre_p,\n-\t\t\t\t  post_p, is_gimple_lvalue, fb_either);\n-\t    else if (TMR_BASE (*expr_p))\n+\t      /* We can't gimplify the symbol part.  Assert it is\n+\t\t already gimple instead.\n+\t\t ???  This isn't exactly the same as ADDR_EXPR\n+\t\t plus is_gimple_mem_ref_addr (), see fixed_address_object_p.  */\n+\t      gcc_assert (TREE_CODE (TMR_SYMBOL (*expr_p)) == ADDR_EXPR\n+\t\t\t  && (TREE_CODE (TREE_OPERAND (TMR_SYMBOL (*expr_p), 0))\n+\t\t\t      == VAR_DECL));\n+\t    if (TMR_BASE (*expr_p))\n \t      r0 = gimplify_expr (&TMR_BASE (*expr_p), pre_p,\n \t\t\t\t  post_p, is_gimple_val, fb_either);\n \t    if (TMR_INDEX (*expr_p))"}, {"sha": "1dc99aaf8d7b5bc25ccbc6734fe02f6ad0dd92a9", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=23a534a102ad0310ca6ccb35717bb54e102ffb3e", "patch": "@@ -2990,6 +2990,13 @@ verify_types_in_gimple_reference (tree expr, bool require_lvalue)\n     }\n   else if (TREE_CODE (expr) == TARGET_MEM_REF)\n     {\n+      if (TMR_SYMBOL (expr)\n+\t  && TMR_BASE (expr)\n+\t  && !useless_type_conversion_p (sizetype, TREE_TYPE (TMR_BASE (expr))))\n+\t{\n+\t  error (\"Non-sizetype base in TARGET_MEM_REF with symbol\");\n+\t  return true;\n+\t}\n       if (!TMR_OFFSET (expr)\n \t  || TREE_CODE (TMR_OFFSET (expr)) != INTEGER_CST\n \t  || !POINTER_TYPE_P (TREE_TYPE (TMR_OFFSET (expr))))"}, {"sha": "c60e107f7b19697538427ff05bc8f1bba858770e", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=23a534a102ad0310ca6ccb35717bb54e102ffb3e", "patch": "@@ -882,16 +882,17 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \t  /* Hand back the decl for MEM[&decl, off].  */\n \t  if (TMR_SYMBOL (exp))\n \t    {\n-\t      /* Via the variable index we can reach the whole object.  */\n-\t      if (TMR_INDEX (exp))\n+\t      /* Via the variable index or base we can reach the\n+\t\t whole object.  */\n+\t      if (TMR_INDEX (exp) || TMR_BASE (exp))\n \t\t{\n-\t\t  exp = TMR_SYMBOL (exp);\n+\t\t  exp = TREE_OPERAND (TMR_SYMBOL (exp), 0);\n \t\t  bit_offset = 0;\n \t\t  maxsize = -1;\n \t\t  goto done;\n \t\t}\n \t      if (integer_zerop (TMR_OFFSET (exp)))\n-\t\texp = TMR_SYMBOL (exp);\n+\t\texp = TREE_OPERAND (TMR_SYMBOL (exp), 0);\n \t      else\n \t\t{\n \t\t  double_int off = mem_ref_offset (exp);\n@@ -903,7 +904,7 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \t\t  if (double_int_fits_in_shwi_p (off))\n \t\t    {\n \t\t      bit_offset = double_int_to_shwi (off);\n-\t\t      exp = TMR_SYMBOL (exp);\n+\t\t      exp = TREE_OPERAND (TMR_SYMBOL (exp), 0);\n \t\t    }\n \t\t}\n \t    }\n@@ -1045,15 +1046,15 @@ get_addr_base_and_unit_offset (tree exp, HOST_WIDE_INT *poffset)\n \t  /* Hand back the decl for MEM[&decl, off].  */\n \t  if (TMR_SYMBOL (exp))\n \t    {\n-\t      if (TMR_SYMBOL (exp))\n+\t      if (TMR_INDEX (exp) || TMR_BASE (exp))\n \t\treturn NULL_TREE;\n \t      if (!integer_zerop (TMR_OFFSET (exp)))\n \t\t{\n \t\t  double_int off = mem_ref_offset (exp);\n \t\t  gcc_assert (off.high == -1 || off.high == 0);\n \t\t  byte_offset += double_int_to_shwi (off);\n \t\t}\n-\t      exp = TMR_SYMBOL (exp);\n+\t      exp = TREE_OPERAND (TMR_SYMBOL (exp), 0);\n \t    }\n \t  goto done;\n "}, {"sha": "3d7859ba6f40bb0771478ea884d6b6dc6f0129c6", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=23a534a102ad0310ca6ccb35717bb54e102ffb3e", "patch": "@@ -2405,7 +2405,7 @@ tree_could_trap_p (tree expr)\n     {\n     case TARGET_MEM_REF:\n       if (TMR_SYMBOL (expr)\n-\t  && !TMR_INDEX (expr))\n+\t  && !TMR_INDEX (expr) && !TMR_BASE (expr))\n \treturn false;\n       return !TREE_THIS_NOTRAP (expr);\n "}, {"sha": "dbbd06cc6aef72cc2785b977b5369914014dba41", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=23a534a102ad0310ca6ccb35717bb54e102ffb3e", "patch": "@@ -858,7 +858,8 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t    pp_string (buffer, sep);\n \t    sep = \", \";\n \t    pp_string (buffer, \"symbol: \");\n-\t    dump_generic_node (buffer, tmp, spc, flags, false);\n+\t    dump_generic_node (buffer, TREE_OPERAND (tmp, 0),\n+\t\t\t       spc, flags, false);\n \t  }\n \ttmp = TMR_BASE (node);\n \tif (tmp)"}, {"sha": "d642425df3a89a401c52d4da04af4b174269416a", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=23a534a102ad0310ca6ccb35717bb54e102ffb3e", "patch": "@@ -247,8 +247,7 @@ addr_for_mem_ref (struct mem_address *addr, addr_space_t as,\n \n   /* Otherwise really expand the expressions.  */\n   sym = (addr->symbol\n-\t ? expand_expr (build_addr (addr->symbol, current_function_decl),\n-\t\t\tNULL_RTX, address_mode, EXPAND_NORMAL)\n+\t ? expand_expr (addr->symbol, NULL_RTX, address_mode, EXPAND_NORMAL)\n \t : NULL_RTX);\n   bse = (addr->base\n \t ? expand_expr (addr->base, NULL_RTX, address_mode, EXPAND_NORMAL)\n@@ -273,9 +272,10 @@ tree_mem_ref_addr (tree type, tree mem_ref)\n   tree addr_base = NULL_TREE, addr_off = NULL_TREE;\n \n   if (sym)\n-    addr_base = fold_convert (type, build_addr (sym, current_function_decl));\n-  else if (base && POINTER_TYPE_P (TREE_TYPE (base)))\n+    addr_base = fold_convert (type, sym);\n+  else if (base)\n     {\n+      gcc_assert (POINTER_TYPE_P (TREE_TYPE (base)));\n       addr_base = fold_convert (type, base);\n       base = NULL_TREE;\n     }\n@@ -363,7 +363,7 @@ create_mem_ref_raw (tree type, tree alias_ptr_type, struct mem_address *addr)\n       tree base;\n       gcc_assert (!addr->symbol ^ !addr->base);\n       if (addr->symbol)\n-\tbase = build_fold_addr_expr (addr->symbol);\n+\tbase = addr->symbol;\n       else\n \tbase = addr->base;\n       return fold_build2 (MEM_REF, type, base, addr->offset);\n@@ -408,7 +408,7 @@ move_fixed_address_to_symbol (struct mem_address *parts, aff_tree *addr)\n   if (i == addr->n)\n     return;\n \n-  parts->symbol = TREE_OPERAND (val, 0);\n+  parts->symbol = val;\n   aff_combination_remove_elt (addr, i);\n }\n \n@@ -717,7 +717,7 @@ create_mem_ref (gimple_stmt_iterator *gsi, tree type, aff_tree *addr,\n \n   if (parts.symbol)\n     {\n-      tmp = build_addr (parts.symbol, current_function_decl);\n+      tmp = parts.symbol;\n       gcc_assert (is_gimple_val (tmp));\n \n       /* Add the symbol to base, eventually forcing it to register.  */\n@@ -883,7 +883,7 @@ dump_mem_address (FILE *file, struct mem_address *parts)\n   if (parts->symbol)\n     {\n       fprintf (file, \"symbol: \");\n-      print_generic_expr (file, parts->symbol, TDF_SLIM);\n+      print_generic_expr (file, TREE_OPERAND (parts->symbol, 0), TDF_SLIM);\n       fprintf (file, \"\\n\");\n     }\n   if (parts->base)"}, {"sha": "fe017d7a15ec5926929b175ed9b75cada7f46ae3", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=23a534a102ad0310ca6ccb35717bb54e102ffb3e", "patch": "@@ -672,14 +672,14 @@ indirect_ref_may_alias_decl_p (tree ref1 ATTRIBUTE_UNUSED, tree base1,\n \n   if (TREE_CODE (base1) == TARGET_MEM_REF)\n     {\n-      if (TMR_BASE (base1))\n+      if (TMR_SYMBOL (base1))\n+\tptr1 = TMR_SYMBOL (base1);\n+      else if (TMR_BASE (base1))\n \t{\n \t  if (!POINTER_TYPE_P (TREE_TYPE (TMR_BASE (base1))))\n \t    return true;\n \t  ptr1 = TMR_BASE (base1);\n \t}\n-      else if (TMR_SYMBOL (base1))\n-\tptr1 = build_fold_addr_expr (TMR_SYMBOL (base1));\n       else\n \treturn true;\n     }\n@@ -814,14 +814,14 @@ indirect_refs_may_alias_p (tree ref1 ATTRIBUTE_UNUSED, tree base1,\n \n   if (TREE_CODE (base1) == TARGET_MEM_REF)\n     {\n-      if (TMR_BASE (base1))\n+      if (TMR_SYMBOL (base1))\n+\tptr1 = TMR_SYMBOL (base1);\n+      else if (TMR_BASE (base1))\n \t{\n \t  if (!POINTER_TYPE_P (TREE_TYPE (TMR_BASE (base1))))\n \t    return true;\n \t  ptr1 = TMR_BASE (base1);\n \t}\n-      else if (TMR_SYMBOL (base1))\n-\tptr1 = build_fold_addr_expr (TMR_SYMBOL (base1));\n       else\n \treturn true;\n     }\n@@ -830,14 +830,14 @@ indirect_refs_may_alias_p (tree ref1 ATTRIBUTE_UNUSED, tree base1,\n \n   if (TREE_CODE (base2) == TARGET_MEM_REF)\n     {\n-      if (TMR_BASE (base2))\n+      if (TMR_SYMBOL (base2))\n+\tptr2 = TMR_SYMBOL (base2);\n+      else if (TMR_BASE (base2))\n \t{\n \t  if (!POINTER_TYPE_P (TREE_TYPE (TMR_BASE (base2))))\n \t    return true;\n \t  ptr2 = TMR_BASE (base2);\n \t}\n-      else if (TMR_SYMBOL (base2))\n-\tptr2 = build_fold_addr_expr (TMR_SYMBOL (base2));\n       else\n \treturn true;\n     }"}, {"sha": "90c2460d80e8e599ac4536fe2ced670d26ad17b2", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=23a534a102ad0310ca6ccb35717bb54e102ffb3e", "patch": "@@ -756,7 +756,7 @@ get_tmr_operands (gimple stmt, tree expr, int flags)\n   get_expr_operands (stmt, &TMR_INDEX (expr), opf_use | (flags & opf_no_vops));\n \n   if (TMR_SYMBOL (expr))\n-    mark_address_taken (TMR_SYMBOL (expr));\n+    mark_address_taken (TREE_OPERAND (TMR_SYMBOL (expr), 0));\n \n   add_virtual_operand (stmt, flags);\n }"}, {"sha": "bd8434aa095fc3765cdafee04723829c1ddd0200", "filename": "gcc/tree.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a534a102ad0310ca6ccb35717bb54e102ffb3e/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=23a534a102ad0310ca6ccb35717bb54e102ffb3e", "patch": "@@ -952,8 +952,8 @@ DEFTREECODE (WITH_SIZE_EXPR, \"with_size_expr\", tcc_expression, 2)\n    generated by the builtin targetm.vectorize.mask_for_load_builtin_decl.  */\n DEFTREECODE (REALIGN_LOAD_EXPR, \"realign_load\", tcc_expression, 3)\n \n-/* Low-level memory addressing.  Operands are SYMBOL (static or global\n-   variable), BASE (register), INDEX (register), STEP (integer constant),\n+/* Low-level memory addressing.  Operands are SYMBOL (address of static or\n+   global variable), BASE (register), INDEX (register), STEP (integer constant),\n    OFFSET (integer constant).  Corresponding address is\n    SYMBOL + BASE + STEP * INDEX + OFFSET.  Only variations and values valid on\n    the target are allowed."}]}