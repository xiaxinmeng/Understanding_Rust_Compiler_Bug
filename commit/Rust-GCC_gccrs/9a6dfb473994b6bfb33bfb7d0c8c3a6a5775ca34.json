{"sha": "9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE2ZGZiNDczOTk0YjZiZmIzM2JmYjdkMGM4YzNhNmE1Nzc1Y2EzNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-09-13T12:44:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-09-13T12:44:10Z"}, "message": "mips.h (SYMBOL_FLAG_MIPS16_FUNC): Delete.\n\ngcc/\n2007-09-13  Richard Sandiford  <richard@codesourcery.com>\n\t    Sandra Loosemore <sandra@codesourcery.com>\n\n\t* config/mips/mips.h (SYMBOL_FLAG_MIPS16_FUNC): Delete.\n\t(SYMBOL_REF_MIPS16_FUNC_P): Delete.\n\t* config/mips/mips.c (mips_attribute_table): Turn mips16 and\n\tnomips16 into decl attributes.\n\t(TARGET_INSERT_ATTRIBUTES): Override.\n\t(TARGET_MERGE_DECL_ATTRIBUTES): Likewise.\n\t(TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P): Always return true.\n\t(mips_mips16_type_p, mips_nomips16_type_p): Delete in favor of...\n\t(mips_mips16_decl_p, mips_nomips16_decl_p): ...these new functions.\n\t(mips_comp_type_attributes): Remove mips16 and nomips16 handling.\n\t(mips_use_mips16_mode_p): Reimplement as a function that takes\n\ta decl and considers only decl attributes.  If the decl is nested\n\tfunction, use its parent attributes.\n\t(mips_function_ok_for_sibcall): Use mips_use_mips16_mode_p\n\tinstead of SYMBOL_REF_MIPS16_FUNC_P.\n\t(mips_set_mips16_mode): Move call to sorry here from old\n\tmips_use_mips16_mode_p.\n\t(mflip_mips16_entry): New structure.\n\t(mflip_mips16_htab): New variable.\n\t(mflip_mips16_htab_hash, mflip_mips16_htab_eq): New functions.\n\t(mflip_mips16_use_mips16_p, mips_insert_attributes): Likewise.\n\t(mips_merge_decl_attributes): New function.\n\t(mips_set_current_function): Reinstate call to mips_set_mips16_mode.\n\tUse mips_use_mips16_mode_p.\n\t(mips_output_mi_thunk): Use mips_use_mips16_mode_p instead of\n\tSYMBOL_REF_MIPS16_FUNC_P.\n\t(mips_encode_section_info): Don't set SYMBOL_FLAG_MIPS16_FUNC.\n\ngcc/testsuite/\n\t* gcc.dg/gcc-have-sync-compare-and-swap.c: Skip for -mflip-mips16.\n\t* gcc.target/mips/mips16-attributes-2.c: New test.\n\t* gcc.target/mips/mips16-attributes-3.c: Likewise.\n\t* gcc.target/mips/args-3.c: Skip for -mflip-mips16.  Do not use the\n\thard-float asm when __mips16 is defined.\n\t* gcc.target/mips/atomic-memory-1.c (main): Add a nomips16 attribute.\n\t* gcc.target/mips/atomic-memory-2.c (main): Likewise.\n\t* gcc.target/mips/fpcmp-1.c (f1, f2): Likewise.\n\t* gcc.target/mips/fpcmp-2.c (f1, f2): Likewise.\n\t* gcc.target/mips/neg-abs-1.c (f1, f2, d1, f2): Likewise.\n\t* gcc.target/mips/pr26765.c (foo): Likewise.\n\t* gcc.target/mips/gcc-have-sync-compare-and-swap-1.c: Run for all\n\ttargets, use dg-mips-options instead of dg-options, and use -mgp32\n\tto force 32-bit mode.\n\t* gcc.target/mips/gcc-have-sync-compare-and-swap-2.c: Likewise -mgp64\n\tand 64-bit mode.\n\t* gcc.target/mips/mips.exp (is_gp32_flag): Return true for -mips32*.\n\nCo-Authored-By: Sandra Loosemore <sandra@codesourcery.com>\n\nFrom-SVN: r128460", "tree": {"sha": "7ea310d5401715a64606a38ee1ab5e463b04c0cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ea310d5401715a64606a38ee1ab5e463b04c0cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/comments", "author": null, "committer": null, "parents": [{"sha": "0ad7e054218ed4a8df8843a96bf59e2c8c4b4f9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad7e054218ed4a8df8843a96bf59e2c8c4b4f9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ad7e054218ed4a8df8843a96bf59e2c8c4b4f9b"}], "stats": {"total": 351, "additions": 271, "deletions": 80}, "files": [{"sha": "cad07c6737513308b36500d05084e0b2f4719a8a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34", "patch": "@@ -1,3 +1,34 @@\n+2007-09-13  Richard Sandiford  <richard@codesourcery.com>\n+\t    Sandra Loosemore <sandra@codesourcery.com>\n+\n+\t* config/mips/mips.h (SYMBOL_FLAG_MIPS16_FUNC): Delete.\n+\t(SYMBOL_REF_MIPS16_FUNC_P): Delete.\n+\t* config/mips/mips.c (mips_attribute_table): Turn mips16 and\n+\tnomips16 into decl attributes.\n+\t(TARGET_INSERT_ATTRIBUTES): Override.\n+\t(TARGET_MERGE_DECL_ATTRIBUTES): Likewise.\n+\t(TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P): Always return true.\n+\t(mips_mips16_type_p, mips_nomips16_type_p): Delete in favor of...\n+\t(mips_mips16_decl_p, mips_nomips16_decl_p): ...these new functions.\n+\t(mips_comp_type_attributes): Remove mips16 and nomips16 handling.\n+\t(mips_use_mips16_mode_p): Reimplement as a function that takes\n+\ta decl and considers only decl attributes.  If the decl is nested\n+\tfunction, use its parent attributes.\n+\t(mips_function_ok_for_sibcall): Use mips_use_mips16_mode_p\n+\tinstead of SYMBOL_REF_MIPS16_FUNC_P.\n+\t(mips_set_mips16_mode): Move call to sorry here from old\n+\tmips_use_mips16_mode_p.\n+\t(mflip_mips16_entry): New structure.\n+\t(mflip_mips16_htab): New variable.\n+\t(mflip_mips16_htab_hash, mflip_mips16_htab_eq): New functions.\n+\t(mflip_mips16_use_mips16_p, mips_insert_attributes): Likewise.\n+\t(mips_merge_decl_attributes): New function.\n+\t(mips_set_current_function): Reinstate call to mips_set_mips16_mode.\n+\tUse mips_use_mips16_mode_p.\n+\t(mips_output_mi_thunk): Use mips_use_mips16_mode_p instead of\n+\tSYMBOL_REF_MIPS16_FUNC_P.\n+\t(mips_encode_section_info): Don't set SYMBOL_FLAG_MIPS16_FUNC.\n+\n 2007-09-13  Richard Sandiford  <richard@codesourcery.com>\n \n \t* c-parser.c (c_parser_struct_declaration): Check for a null return."}, {"sha": "410f7d7a7c75cc01fd1f27751ca926e3ba1803bd", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 166, "deletions": 60, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34", "patch": "@@ -426,6 +426,8 @@ static void mips_encode_section_info (tree, rtx, int);\n static void mips_extra_live_on_entry (bitmap);\n static int mips_comp_type_attributes (const_tree, const_tree);\n static void mips_set_mips16_mode (int);\n+static void mips_insert_attributes (tree, tree *);\n+static tree mips_merge_decl_attributes (tree, tree);\n static void mips_set_current_function (tree);\n static int mips_mode_rep_extended (enum machine_mode, enum machine_mode);\n static bool mips_offset_within_alignment_p (rtx, HOST_WIDE_INT);\n@@ -734,9 +736,13 @@ const struct attribute_spec mips_attribute_table[] =\n   { \"long_call\",   0, 0, false, true,  true,  NULL },\n   { \"far\",     \t   0, 0, false, true,  true,  NULL },\n   { \"near\",        0, 0, false, true,  true,  NULL },\n-  /* Switch MIPS16 ASE on and off per-function.  */\n-  { \"mips16\", \t   0, 0, false, true,  true,  NULL },\n-  { \"nomips16\",    0, 0, false, true,  true,  NULL },\n+  /* Switch MIPS16 ASE on and off per-function.  We would really like\n+     to make these type attributes, but GCC doesn't provide the hooks\n+     we need to support the right conversion rules.  As declaration\n+     attributes, they affect code generation but don't carry other\n+     semantics.  */\n+  { \"mips16\", \t   0, 0, true,  false, false, NULL },\n+  { \"nomips16\",    0, 0, true,  false, false, NULL },\n   { NULL,\t   0, 0, false, false, false, NULL }\n };\n \f\n@@ -1268,6 +1274,10 @@ static const unsigned char mips16e_save_restore_regs[] = {\n #undef TARGET_FUNCTION_OK_FOR_SIBCALL\n #define TARGET_FUNCTION_OK_FOR_SIBCALL mips_function_ok_for_sibcall\n \n+#undef TARGET_INSERT_ATTRIBUTES\n+#define TARGET_INSERT_ATTRIBUTES mips_insert_attributes\n+#undef TARGET_MERGE_DECL_ATTRIBUTES\n+#define TARGET_MERGE_DECL_ATTRIBUTES mips_merge_decl_attributes\n #undef TARGET_SET_CURRENT_FUNCTION\n #define TARGET_SET_CURRENT_FUNCTION mips_set_current_function\n \n@@ -1352,6 +1362,10 @@ static const unsigned char mips16e_save_restore_regs[] = {\n \n #undef TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE mips_attribute_table\n+/* All our function attributes are related to how out-of-line copies should\n+   be compiled or called.  They don't in themselves prevent inlining.  */\n+#undef TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P\n+#define TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P hook_bool_const_tree_true\n \n #undef TARGET_EXTRA_LIVE_ON_ENTRY\n #define TARGET_EXTRA_LIVE_ON_ENTRY mips_extra_live_on_entry\n@@ -1395,15 +1409,15 @@ mips_far_type_p (const_tree type)\n /* Similar predicates for \"mips16\"/\"nomips16\" attributes.  */\n \n static bool\n-mips_mips16_type_p (const_tree type)\n+mips_mips16_decl_p (const_tree decl)\n {\n-  return lookup_attribute (\"mips16\", TYPE_ATTRIBUTES (type)) != NULL;\n+  return lookup_attribute (\"mips16\", DECL_ATTRIBUTES (decl)) != NULL;\n }\n \n static bool\n-mips_nomips16_type_p (const_tree type)\n+mips_nomips16_decl_p (const_tree decl)\n {\n-  return lookup_attribute (\"nomips16\", TYPE_ATTRIBUTES (type)) != NULL;\n+  return lookup_attribute (\"nomips16\", DECL_ATTRIBUTES (decl)) != NULL;\n }\n \n /* Return 0 if the attributes for two types are incompatible, 1 if they\n@@ -1423,11 +1437,6 @@ mips_comp_type_attributes (const_tree type1, const_tree type2)\n   if (mips_near_type_p (type1) && mips_far_type_p (type2))\n     return 0;\n \n-  /* Mips16/nomips16 attributes must match exactly.  */\n-  if (mips_nomips16_type_p (type1) != mips_nomips16_type_p (type2)\n-      || mips_mips16_type_p (type1) != mips_mips16_type_p (type2))\n-    return 0;\n-\n   return 1;\n }\n \f\n@@ -4120,6 +4129,27 @@ mips_gen_conditional_trap (rtx *operands)\n \t\t\t      operands[1]));\n }\n \f\n+/* Return true if function DECL is a MIPS16 function.  Return the ambient\n+   setting if DECL is null.  */\n+\n+static bool\n+mips_use_mips16_mode_p (tree decl)\n+{\n+  if (decl)\n+    {\n+      /* Nested functions must use the same frame pointer as their\n+\t parent and must therefore use the same ISA mode.  */\n+      tree parent = decl_function_context (decl);\n+      if (parent)\n+\tdecl = parent;\n+      if (mips_mips16_decl_p (decl))\n+\treturn true;\n+      if (mips_nomips16_decl_p (decl))\n+\treturn false;\n+    }\n+  return mips_base_mips16;\n+}\n+\n /* Return true if calls to X can use R_MIPS_CALL* relocations.  */\n \n static bool\n@@ -4223,7 +4253,7 @@ mips_function_ok_for_sibcall (tree decl, tree exp ATTRIBUTE_UNUSED)\n   /* We can't do a sibcall if the called function is a MIPS16 function\n      because there is no direct \"jx\" instruction equivalent to \"jalx\" to\n      switch the ISA mode.  */\n-  if (decl && SYMBOL_REF_MIPS16_FUNC_P (XEXP (DECL_RTL (decl), 0)))\n+  if (mips_use_mips16_mode_p (decl))\n     return false;\n \n   /* Otherwise OK.  */\n@@ -5666,6 +5696,9 @@ mips_set_mips16_mode (int mips16_p)\n \t of lw and sw instead.  */\n       targetm.min_anchor_offset = 0;\n       targetm.max_anchor_offset = 127;\n+\n+      if (flag_pic || TARGET_ABICALLS)\n+\tsorry (\"MIPS16 PIC\");\n     }\n   else \n     {\n@@ -5703,12 +5736,130 @@ mips_set_mips16_mode (int mips16_p)\n   was_mips16_p = TARGET_MIPS16;\n }\n \n+/* Use a hash table to keep track of implicit mips16/nomips16 attributes\n+   for -mflip_mips16.  It maps decl names onto a boolean mode setting.  */\n+\n+struct mflip_mips16_entry GTY (()) {\n+  const char *name;\n+  bool mips16_p;\n+};\n+static GTY ((param_is (struct mflip_mips16_entry))) htab_t mflip_mips16_htab;\n+\n+/* Hash table callbacks for mflip_mips16_htab.  */\n+\n+static hashval_t\n+mflip_mips16_htab_hash (const void *entry)\n+{\n+  return htab_hash_string (((const struct mflip_mips16_entry *) entry)->name);\n+}\n+\n+static int\n+mflip_mips16_htab_eq (const void *entry, const void *name)\n+{\n+  return strcmp (((const struct mflip_mips16_entry *) entry)->name,\n+\t\t (const char *) name) == 0;\n+}\n+\n+/* DECL is a function that needs a default \"mips16\" or \"nomips16\" attribute\n+   for -mflip-mips16.  Return true if it should use \"mips16\" and false if\n+   it should use \"nomips16\".  */\n+\n+static bool\n+mflip_mips16_use_mips16_p (tree decl)\n+{\n+  struct mflip_mips16_entry *entry;\n+  const char *name;\n+  hashval_t hash;\n+  void **slot;\n+\n+  /* Use the opposite of the command-line setting for anonymous decls.  */\n+  if (!DECL_NAME (decl))\n+    return !mips_base_mips16;\n+\n+  if (!mflip_mips16_htab)\n+    mflip_mips16_htab = htab_create_ggc (37, mflip_mips16_htab_hash,\n+\t\t\t\t\t mflip_mips16_htab_eq, NULL);\n+\n+  name = IDENTIFIER_POINTER (DECL_NAME (decl));\n+  hash = htab_hash_string (name);\n+  slot = htab_find_slot_with_hash (mflip_mips16_htab, name, hash, INSERT);\n+  entry = (struct mflip_mips16_entry *) *slot;\n+  if (!entry)\n+    {\n+      mips16_flipper = !mips16_flipper;\n+      entry = GGC_NEW (struct mflip_mips16_entry);\n+      entry->name = name;\n+      entry->mips16_p = mips16_flipper ? !mips_base_mips16 : mips_base_mips16;\n+      *slot = entry;\n+    }\n+  return entry->mips16_p;\n+}\n+\n+/* Implement TARGET_INSERT_ATTRIBUTES.  */\n+\n+static void\n+mips_insert_attributes (tree decl, tree *attributes)\n+{\n+  const char *name;\n+  bool mips16_p, nomips16_p;\n+\n+  /* Check for \"mips16\" and \"nomips16\" attributes.  */\n+  mips16_p = lookup_attribute (\"mips16\", *attributes) != NULL;\n+  nomips16_p = lookup_attribute (\"nomips16\", *attributes) != NULL;\n+  if (TREE_CODE (decl) != FUNCTION_DECL)\n+    {\n+      if (mips16_p)\n+\terror (\"%qs attribute only applies to functions\", \"mips16\");\n+      if (nomips16_p)\n+\terror (\"%qs attribute only applies to functions\", \"nomips16\");\n+    }\n+  else\n+    {\n+      mips16_p |= mips_mips16_decl_p (decl);\n+      nomips16_p |= mips_nomips16_decl_p (decl);\n+      if (mips16_p || nomips16_p)\n+\t{\n+\t  /* DECL cannot be simultaneously mips16 and nomips16.  */\n+\t  if (mips16_p && nomips16_p)\n+\t    error (\"%qs cannot have both %<mips16%> and \"\n+\t\t   \"%<nomips16%> attributes\",\n+\t\t   IDENTIFIER_POINTER (DECL_NAME (decl)));\n+\t}\n+      else if (TARGET_FLIP_MIPS16 && !DECL_ARTIFICIAL (decl))\n+\t{\n+\t  /* Implement -mflip-mips16.  If DECL has neither a \"nomips16\" nor a\n+\t     \"mips16\" attribute, arbitrarily pick one.  We must pick the same\n+\t     setting for duplicate declarations of a function.  */\n+\t  name = mflip_mips16_use_mips16_p (decl) ? \"mips16\" : \"nomips16\";\n+\t  *attributes = tree_cons (get_identifier (name), NULL, *attributes);\n+\t}\n+    }\n+}\n+\n+/* Implement TARGET_MERGE_DECL_ATTRIBUTES.  */\n+\n+static tree\n+mips_merge_decl_attributes (tree olddecl, tree newdecl)\n+{\n+  /* The decls' \"mips16\" and \"nomips16\" attributes must match exactly.  */\n+  if (mips_mips16_decl_p (olddecl) != mips_mips16_decl_p (newdecl))\n+    error (\"%qs redeclared with conflicting %qs attributes\",\n+\t   IDENTIFIER_POINTER (DECL_NAME (newdecl)), \"mips16\");\n+  if (mips_nomips16_decl_p (olddecl) != mips_nomips16_decl_p (newdecl))\n+    error (\"%qs redeclared with conflicting %qs attributes\",\n+\t   IDENTIFIER_POINTER (DECL_NAME (newdecl)), \"nomips16\");\n+\n+  return merge_attributes (DECL_ATTRIBUTES (olddecl),\n+\t\t\t   DECL_ATTRIBUTES (newdecl));\n+}\n+\n /* Implement TARGET_SET_CURRENT_FUNCTION.  Decide whether the current \n    function should use the MIPS16 ISA and switch modes accordingly.  */\n \n static void\n-mips_set_current_function (tree fndecl ATTRIBUTE_UNUSED)\n+mips_set_current_function (tree fndecl)\n {\n+  mips_set_mips16_mode (mips_use_mips16_mode_p (fndecl));\n }\n \n /* Implement TARGET_HANDLE_OPTION.  */\n@@ -8783,7 +8934,7 @@ mips_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n      allowed, otherwise load the address into a register first.  */\n   fnaddr = XEXP (DECL_RTL (function), 0);\n   if (TARGET_MIPS16 || TARGET_USE_GOT || SYMBOL_REF_LONG_CALL_P (fnaddr)\n-      || SYMBOL_REF_MIPS16_FUNC_P (fnaddr))\n+      || mips_use_mips16_mode_p (function))\n     {\n       /* This is messy.  gas treats \"la $25,foo\" as part of a call\n \t sequence and may allow a global \"foo\" to be lazily bound.\n@@ -12724,43 +12875,6 @@ mips_expand_builtin_bposge (enum mips_builtin_type builtin_type, rtx target)\n \t\t\t\t       const1_rtx, const0_rtx);\n }\n \f\n-/* Return true if we should force MIPS16 mode for the function named by\n-   the SYMBOL_REF SYMBOL, which belongs to DECL and has type TYPE.\n-   FIRST is true if this is the first time handling this decl.  */\n-\n-static bool\n-mips_use_mips16_mode_p (rtx symbol, tree decl, int first, tree type)\n-{\n-  tree parent;\n-\n-  /* Explicit function attributes take precedence.  */\n-  if (mips_mips16_type_p (type))\n-    return true;\n-  if (mips_nomips16_type_p (type))\n-    return false;\n-\n-  /* A nested function should inherit the MIPS16 setting from its parent.  */\n-  parent = decl_function_context (decl);\n-  if (parent)\n-    return SYMBOL_REF_MIPS16_FUNC_P (XEXP (DECL_RTL (parent), 0));\n-\n-  /* Handle -mflip-mips16.  */\n-  if (TARGET_FLIP_MIPS16\n-      && !DECL_BUILT_IN (decl)\n-      && !DECL_ARTIFICIAL (decl))\n-    {\n-      if (!first)\n-\t/* Use the setting we picked first time around.  */\n-\treturn SYMBOL_REF_MIPS16_FUNC_P (symbol);\n-\n-      mips16_flipper = !mips16_flipper;\n-      if (mips16_flipper)\n-\treturn !mips_base_mips16;\n-    }\n-\n-  return mips_base_mips16;\n-}\n-\n /* Set SYMBOL_REF_FLAGS for the SYMBOL_REF inside RTL, which belongs to DECL.\n    FIRST is true if this is the first time handling this decl.  */\n \n@@ -12777,14 +12891,6 @@ mips_encode_section_info (tree decl, rtx rtl, int first)\n       if ((TARGET_LONG_CALLS && !mips_near_type_p (type))\n \t  || mips_far_type_p (type))\n \tSYMBOL_REF_FLAGS (symbol) |= SYMBOL_FLAG_LONG_CALL;\n-\n-      if (mips_use_mips16_mode_p (symbol, decl, first, type))\n-\t{\n-\t  if (flag_pic || TARGET_ABICALLS)\n-\t    sorry (\"MIPS16 PIC\");\n-\t  else\n-\t    SYMBOL_REF_FLAGS (symbol) |= SYMBOL_FLAG_MIPS16_FUNC;\n-\t}\n     }\n }\n "}, {"sha": "c9d2742860fcb94a9ca5ece00df1c26dc37db079", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34", "patch": "@@ -2338,11 +2338,6 @@ typedef struct mips_args {\n #define SYMBOL_REF_LONG_CALL_P(X)\t\t\t\t\t\\\n   ((SYMBOL_REF_FLAGS (X) & SYMBOL_FLAG_LONG_CALL) != 0)\n \n-/* Flag to mark a function decl symbol a \"mips16\" function.  */\n-#define SYMBOL_FLAG_MIPS16_FUNC\t(SYMBOL_FLAG_MACH_DEP << 1)\n-#define SYMBOL_REF_MIPS16_FUNC_P(RTX) \\\n-  ((SYMBOL_REF_FLAGS (RTX) & SYMBOL_FLAG_MIPS16_FUNC) != 0)\n-\n /* True if we're generating a form of MIPS16 code in which jump tables\n    are stored in the text section and encoded as 16-bit PC-relative\n    offsets.  This is only possible when general text loads are allowed,"}, {"sha": "34af18c43b8beadaa1426fd57eaaca27fe8aef89", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34", "patch": "@@ -1,3 +1,23 @@\n+2007-09-13  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* gcc.dg/gcc-have-sync-compare-and-swap.c: Skip for -mflip-mips16.\n+\t* gcc.target/mips/mips16-attributes-2.c: New test.\n+\t* gcc.target/mips/mips16-attributes-3.c: Likewise.\n+\t* gcc.target/mips/args-3.c: Skip for -mflip-mips16.  Do not use the\n+\thard-float asm when __mips16 is defined.\n+\t* gcc.target/mips/atomic-memory-1.c (main): Add a nomips16 attribute.\n+\t* gcc.target/mips/atomic-memory-2.c (main): Likewise.\n+\t* gcc.target/mips/fpcmp-1.c (f1, f2): Likewise.\n+\t* gcc.target/mips/fpcmp-2.c (f1, f2): Likewise.\n+\t* gcc.target/mips/neg-abs-1.c (f1, f2, d1, f2): Likewise.\n+\t* gcc.target/mips/pr26765.c (foo): Likewise.\n+\t* gcc.target/mips/gcc-have-sync-compare-and-swap-1.c: Run for all\n+\ttargets, use dg-mips-options instead of dg-options, and use -mgp32\n+\tto force 32-bit mode.\n+\t* gcc.target/mips/gcc-have-sync-compare-and-swap-2.c: Likewise -mgp64\n+\tand 64-bit mode.\n+\t* gcc.target/mips/mips.exp (is_gp32_flag): Return true for -mips32*.\n+\n 2007-09-12  Dwarakanath Rajagopal  <dwarak.rajagopal@amd.com>\n \t    Michael Meissner  <michael.meissner@amd.com>\n "}, {"sha": "faed818d50052501bf67b078ff0dcfbeee479069", "filename": "gcc/testsuite/gcc.dg/gcc-have-sync-compare-and-swap.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.dg%2Fgcc-have-sync-compare-and-swap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.dg%2Fgcc-have-sync-compare-and-swap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgcc-have-sync-compare-and-swap.c?ref=9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34", "patch": "@@ -1,4 +1,8 @@\n /* { dg-do link } */\n+/* MIPS only supports these built-in functions for non-MIPS16 mode, and\n+   -mflip-mips16 will change the mode of some functions to be different\n+   from the command-line setting.  */\n+/* { dg-skip-if \"\" { mips*-*-* } { \"-mflip-mips16\" } { \"\" } } */\n \n void f1()\n {"}, {"sha": "6a79ce6745ea76accd29ab0738e7fa8a0ca32987", "filename": "gcc/testsuite/gcc.target/mips/args-3.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fargs-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fargs-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fargs-3.c?ref=9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34", "patch": "@@ -1,6 +1,7 @@\n /* __mips, and related defines, guarantee that certain assembly\n    instructions can be used.  Check a few examples.  */\n /* { dg-do run } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-mflip-mips16\" } { \"\" } } */\n extern void abort (void);\n extern void exit (int);\n \n@@ -11,7 +12,7 @@ int foo (float inf, int64 in64, int32 in32)\n   int64 res64;\n   int32 res32;\n \n-#if __mips != 1 && defined (__mips_hard_float)\n+#if __mips != 1 && defined (__mips_hard_float) && !defined (__mips16)\n   __asm__ (\"trunc.w.s %0, %1\" : \"=f\" (res32) : \"f\" (inf));\n   if (res32 != 11)\n     abort ();"}, {"sha": "b44bd46cf7ee0a2d1b4094fe3bb75f6d2c03d598", "filename": "gcc/testsuite/gcc.target/mips/atomic-memory-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fatomic-memory-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fatomic-memory-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fatomic-memory-1.c?ref=9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34", "patch": "@@ -2,7 +2,9 @@\n extern void abort (void);\n extern void exit (int);\n \n-int main ()\n+#define NOMIPS16 __attribute__ ((nomips16))\n+\n+NOMIPS16 int main ()\n {\n #ifdef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4\n   unsigned v = 0;"}, {"sha": "18ec64d004ad72b01888de2910a240812b5cf46c", "filename": "gcc/testsuite/gcc.target/mips/atomic-memory-2.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fatomic-memory-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fatomic-memory-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fatomic-memory-2.c?ref=9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34", "patch": "@@ -3,7 +3,9 @@\n /* { dg-final { scan-assembler \"addiu\" } } */\n /* { dg-final { scan-assembler-not \"subu\" } } */\n \n-unsigned long\n+#define NOMIPS16 __attribute__ ((nomips16))\n+\n+NOMIPS16 unsigned long\n f(unsigned long *p)\n {\n     return __sync_fetch_and_sub (p, 5);"}, {"sha": "e3206a589a512809d807cd93c4671185585e177d", "filename": "gcc/testsuite/gcc.target/mips/fpcmp-1.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffpcmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffpcmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffpcmp-1.c?ref=9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34", "patch": "@@ -1,6 +1,8 @@\n /* We used to use c.lt.fmt instead of c.ule.fmt here.  */\n /* { dg-mips-options \"-mhard-float -O2\" } */\n-int f1 (float x, float y) { return __builtin_isless (x, y); }\n-int f2 (double x, double y) { return __builtin_isless (x, y); }\n+#define NOMIPS16 __attribute__ ((nomips16))\n+\n+NOMIPS16 int f1 (float x, float y) { return __builtin_isless (x, y); }\n+NOMIPS16 int f2 (double x, double y) { return __builtin_isless (x, y); }\n /* { dg-final { scan-assembler \"c\\\\.ule\\\\.s\" } } */\n /* { dg-final { scan-assembler \"c\\\\.ule\\\\.d\" } } */"}, {"sha": "9f89417668fb452c18b103df6fd726c9a8b82036", "filename": "gcc/testsuite/gcc.target/mips/fpcmp-2.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffpcmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffpcmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffpcmp-2.c?ref=9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34", "patch": "@@ -1,6 +1,8 @@\n /* We used to use c.le.fmt instead of c.ult.fmt here.  */\n /* { dg-mips-options \"-mhard-float -O2\" } */\n-int f1 (float x, float y) { return __builtin_islessequal (x, y); }\n-int f2 (double x, double y) { return __builtin_islessequal (x, y); }\n+#define NOMIPS16 __attribute__ ((nomips16))\n+\n+NOMIPS16 int f1 (float x, float y) { return __builtin_islessequal (x, y); }\n+NOMIPS16 int f2 (double x, double y) { return __builtin_islessequal (x, y); }\n /* { dg-final { scan-assembler \"c\\\\.ult\\\\.s\" } } */\n /* { dg-final { scan-assembler \"c\\\\.ult\\\\.d\" } } */"}, {"sha": "b1c524bcb8689a3a3a90eeddd3668f4d5ead5e0f", "filename": "gcc/testsuite/gcc.target/mips/gcc-have-sync-compare-and-swap-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fgcc-have-sync-compare-and-swap-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fgcc-have-sync-compare-and-swap-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fgcc-have-sync-compare-and-swap-1.c?ref=9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-mips32 -mabi=32\" } */\n+/* { dg-mips-options \"-mips2\" } */\n \n #ifdef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1\n #error nonono"}, {"sha": "25cd6732e08a6ba5565290b197d3e992f599fa9f", "filename": "gcc/testsuite/gcc.target/mips/gcc-have-sync-compare-and-swap-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fgcc-have-sync-compare-and-swap-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fgcc-have-sync-compare-and-swap-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fgcc-have-sync-compare-and-swap-2.c?ref=9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-do preprocess { target { mips64*-*-* } } } */\n-/* { dg-options \"-mips64 -mabi=64\" } */\n+/* { dg-do preprocess } */\n+/* { dg-mips-options \"-mgp64\" } */\n \n #ifdef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1\n #error nonono"}, {"sha": "3e10eba12a3cb5b3bfd3f85f02978b91765b026c", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34", "patch": "@@ -103,6 +103,7 @@ proc is_gp32_flag {flag} {\n     switch -glob -- $flag {\n \t-msmartmips -\n \t-mips[12] -\n+\t-mips32* -\n \t-march=mips32* -\n \t-mgp32 { return 1 }\n \tdefault { return 0 }"}, {"sha": "eeadf8129b8b5d03482a1b90f03ab95b978033bb", "filename": "gcc/testsuite/gcc.target/mips/mips16-attributes-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips16-attributes-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips16-attributes-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips16-attributes-2.c?ref=9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-skip-if \"\" { *-*-* } { \"-mflip-mips16\" } { \"\" } } */\n+\n+void f1 (void);\n+void __attribute__((mips16)) f1 (void) {} /* { dg-error \"conflicting\" } */\n+\n+void __attribute__((mips16)) f2 (void);\n+void f2 (void) {} /* { dg-error \"conflicting\" } */\n+\n+void f3 (void);\n+void __attribute__((nomips16)) f3 (void) {} /* { dg-error \"conflicting\" } */\n+\n+void __attribute__((nomips16)) f4 (void);\n+void f4 (void) {} /* { dg-error \"conflicting\" } */\n+\n+void __attribute__((mips16, nomips16)) f5 (void) {} /* { dg-error \"cannot have both\" } */"}, {"sha": "3b4e10777a42ebc7e2652f8a76696022d6ccb18f", "filename": "gcc/testsuite/gcc.target/mips/mips16-attributes-3.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips16-attributes-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips16-attributes-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips16-attributes-3.c?ref=9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34", "patch": "@@ -0,0 +1,6 @@\n+/* We should be able to assign mips16 and nomips16 functions to a pointer.  */\n+void __attribute__((mips16)) f1 (void);\n+void (*ptr1) (void) = f1;\n+\n+void __attribute__((nomips16)) f2 (void);\n+void (*ptr2) (void) = f2;"}, {"sha": "6c1d1baae5670d089bd7fe11b98b51a621e23383", "filename": "gcc/testsuite/gcc.target/mips/neg-abs-1.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fneg-abs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fneg-abs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fneg-abs-1.c?ref=9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34", "patch": "@@ -7,7 +7,9 @@\n /* { dg-final { scan-assembler \"abs.s\" } } */\n /* { dg-final { scan-assembler \"abs.d\" } } */\n \n-float f1 (float f) { return -f; }\n-float f2 (float f) { return __builtin_fabsf (f); }\n-double d1 (double d) { return -d; }\n-double d2 (double d) { return __builtin_fabs (d); }\n+#define NOMIPS16 __attribute__ ((nomips16))\n+\n+NOMIPS16 float f1 (float f) { return -f; }\n+NOMIPS16 float f2 (float f) { return __builtin_fabsf (f); }\n+NOMIPS16 double d1 (double d) { return -d; }\n+NOMIPS16 double d2 (double d) { return __builtin_fabs (d); }"}, {"sha": "cd1d9fe8badd7be0a5ef17eb213c350e30dfca04", "filename": "gcc/testsuite/gcc.target/mips/pr26765.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr26765.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr26765.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr26765.c?ref=9a6dfb473994b6bfb33bfb7d0c8c3a6a5775ca34", "patch": "@@ -6,7 +6,9 @@\n \n __thread int *a = 0;\n \n-void foo (void)\n+#define NOMIPS16 __attribute__ ((nomips16))\n+\n+NOMIPS16 void foo (void)\n {\n   extern int *b;\n   b = (int *) ((*a));"}]}