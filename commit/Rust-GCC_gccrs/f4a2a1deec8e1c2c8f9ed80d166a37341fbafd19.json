{"sha": "f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRhMmExZGVlYzhlMWMyYzhmOWVkODBkMTY2YTM3MzQxZmJhZmQxOQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2007-03-05T15:57:13Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2007-03-05T15:57:13Z"}, "message": "sources.am, [...]: Rebuilt.\n\n\t* sources.am, Makefile.in: Rebuilt.\n\t* scripts/makemake.tcl (emit_package_rule): Don't omit\n\tVMProcess.java.\n\t* Makefile.am (nat_source_files): Added natVMProcess.cc.\n\t(inner_nat_headers): Added ImmediateEOFInputStream.h.\n\t* gcj/javaprims.h: Regenerated.\n\t* java/lang/System.java (EnvironmentMap): Now package-private.\n\t(EnvironmentMap(Map)): New constructor.\n\t(EnvironmentMap.put): New method.\n\t* java/lang/natWin32Process.cc (startProcess): Update.\n\t* java/lang/Win32Process.java (Win32Process): Added 'redirect'\n\targument.\n\t(startProcess): Likewise.\n\t* java/lang/EcosProcess.java (EcosProcess): Added 'redirect'\n\targument.\n\t* java/lang/natPosixProcess.cc (nativeSpawn): Handle redirection.\n\t* java/lang/PosixProcess.java (redirect): New field.\n\t(PosixProcess): Added 'redirect' argument.\n\t* java/lang/natRuntime.cc (execInternal): Added 'redirect'\n\targument to Process creation.\n\t* java/lang/natVMProcess.cc: New file.\n\t* java/lang/ProcessBuilder.java: Removed.\n\t* java/lang/VMProcess.java: New file.\n\nFrom-SVN: r122553", "tree": {"sha": "ade62852d2118479bf46fcdfc3db7466a4d05e58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ade62852d2118479bf46fcdfc3db7466a4d05e58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/comments", "author": null, "committer": null, "parents": [{"sha": "344189f9ec005682d1e5d6a700b91184e58538b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/344189f9ec005682d1e5d6a700b91184e58538b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/344189f9ec005682d1e5d6a700b91184e58538b8"}], "stats": {"total": 364, "additions": 235, "deletions": 129}, "files": [{"sha": "3f940e242ef255d808d52f61d41d621c63b49b51", "filename": "libjava/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "patch": "@@ -1,3 +1,29 @@\n+2007-03-05  Tom Tromey  <tromey@redhat.com>\n+\n+\t* sources.am, Makefile.in: Rebuilt.\n+\t* scripts/makemake.tcl (emit_package_rule): Don't omit\n+\tVMProcess.java.\n+\t* Makefile.am (nat_source_files): Added natVMProcess.cc.\n+\t(inner_nat_headers): Added ImmediateEOFInputStream.h.\n+\t* gcj/javaprims.h: Regenerated.\n+\t* java/lang/System.java (EnvironmentMap): Now package-private.\n+\t(EnvironmentMap(Map)): New constructor.\n+\t(EnvironmentMap.put): New method.\n+\t* java/lang/natWin32Process.cc (startProcess): Update.\n+\t* java/lang/Win32Process.java (Win32Process): Added 'redirect'\n+\targument.\n+\t(startProcess): Likewise.\n+\t* java/lang/EcosProcess.java (EcosProcess): Added 'redirect'\n+\targument.\n+\t* java/lang/natPosixProcess.cc (nativeSpawn): Handle redirection.\n+\t* java/lang/PosixProcess.java (redirect): New field.\n+\t(PosixProcess): Added 'redirect' argument.\n+\t* java/lang/natRuntime.cc (execInternal): Added 'redirect'\n+\targument to Process creation.\n+\t* java/lang/natVMProcess.cc: New file.\n+\t* java/lang/ProcessBuilder.java: Removed.\n+\t* java/lang/VMProcess.java: New file.\n+\n 2007-03-03  Andrew Haley  <aph@redhat.com>\n \n \t* java/lang/natClass.cc (parseAnnotationElement): Correct long"}, {"sha": "3151444ccdfd3fd3df1f0f488d0a0f316dc8f314", "filename": "libjava/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "patch": "@@ -406,6 +406,7 @@ inner_nat_headers = java/io/ObjectOutputStream$$PutField.h \\\n \tjava/nio/DirectByteBufferImpl$$ReadWrite.h \\\n \tjava/nio/channels/Pipe$$SinkChannel.h \\\n \tjava/nio/channels/Pipe$$SourceChannel.h \\\n+\tjava/lang/VMProcess$ImmediateEOFInputStream.h \\\n \tjava/lang/reflect/Proxy$$ProxyData.h \\\n \tjava/lang/reflect/Proxy$$ProxyType.h \\\n \tgnu/java/net/PlainSocketImpl$$SocketInputStream.h \\\n@@ -883,6 +884,7 @@ java/lang/natSystem.cc \\\n java/lang/natThread.cc \\\n java/lang/natThreadLocal.cc \\\n java/lang/natVMClassLoader.cc \\\n+java/lang/natVMProcess.cc \\\n java/lang/natVMThrowable.cc \\\n java/lang/ref/natReference.cc \\\n java/lang/reflect/natArray.cc \\"}, {"sha": "04d19c327adde237b8fb38f528cb5c6f9536b3f2", "filename": "libjava/Makefile.in", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "patch": "@@ -331,8 +331,9 @@ am__libgcj_la_SOURCES_DIST = prims.cc jni.cc jvmti.cc exception.cc \\\n \tjava/lang/natString.cc java/lang/natStringBuffer.cc \\\n \tjava/lang/natStringBuilder.cc java/lang/natSystem.cc \\\n \tjava/lang/natThread.cc java/lang/natThreadLocal.cc \\\n-\tjava/lang/natVMClassLoader.cc java/lang/natVMThrowable.cc \\\n-\tjava/lang/ref/natReference.cc java/lang/reflect/natArray.cc \\\n+\tjava/lang/natVMClassLoader.cc java/lang/natVMProcess.cc \\\n+\tjava/lang/natVMThrowable.cc java/lang/ref/natReference.cc \\\n+\tjava/lang/reflect/natArray.cc \\\n \tjava/lang/reflect/natConstructor.cc \\\n \tjava/lang/reflect/natField.cc java/lang/reflect/natMethod.cc \\\n \tjava/lang/reflect/natVMProxy.cc java/net/natVMInetAddress.cc \\\n@@ -393,8 +394,9 @@ am__objects_2 = gnu/classpath/jdwp/natVMFrame.lo \\\n \tjava/lang/natString.lo java/lang/natStringBuffer.lo \\\n \tjava/lang/natStringBuilder.lo java/lang/natSystem.lo \\\n \tjava/lang/natThread.lo java/lang/natThreadLocal.lo \\\n-\tjava/lang/natVMClassLoader.lo java/lang/natVMThrowable.lo \\\n-\tjava/lang/ref/natReference.lo java/lang/reflect/natArray.lo \\\n+\tjava/lang/natVMClassLoader.lo java/lang/natVMProcess.lo \\\n+\tjava/lang/natVMThrowable.lo java/lang/ref/natReference.lo \\\n+\tjava/lang/reflect/natArray.lo \\\n \tjava/lang/reflect/natConstructor.lo \\\n \tjava/lang/reflect/natField.lo java/lang/reflect/natMethod.lo \\\n \tjava/lang/reflect/natVMProxy.lo java/net/natVMInetAddress.lo \\\n@@ -4270,7 +4272,7 @@ classpath/java/lang/Override.java \\\n classpath/java/lang/Package.java \\\n java/lang/PosixProcess.java \\\n classpath/java/lang/Process.java \\\n-java/lang/ProcessBuilder.java \\\n+classpath/java/lang/ProcessBuilder.java \\\n classpath/java/lang/Readable.java \\\n classpath/java/lang/Runnable.java \\\n java/lang/Runtime.java \\\n@@ -4302,6 +4304,7 @@ java/lang/VMClassLoader.java \\\n java/lang/VMCompiler.java \\\n java/lang/VMDouble.java \\\n java/lang/VMFloat.java \\\n+java/lang/VMProcess.java \\\n java/lang/VMThrowable.java \\\n classpath/java/lang/VerifyError.java \\\n classpath/java/lang/VirtualMachineError.java \\\n@@ -7777,6 +7780,7 @@ inner_nat_headers = java/io/ObjectOutputStream$$PutField.h \\\n \tjava/nio/DirectByteBufferImpl$$ReadWrite.h \\\n \tjava/nio/channels/Pipe$$SinkChannel.h \\\n \tjava/nio/channels/Pipe$$SourceChannel.h \\\n+\tjava/lang/VMProcess$ImmediateEOFInputStream.h \\\n \tjava/lang/reflect/Proxy$$ProxyData.h \\\n \tjava/lang/reflect/Proxy$$ProxyType.h \\\n \tgnu/java/net/PlainSocketImpl$$SocketInputStream.h \\\n@@ -7992,6 +7996,7 @@ java/lang/natSystem.cc \\\n java/lang/natThread.cc \\\n java/lang/natThreadLocal.cc \\\n java/lang/natVMClassLoader.cc \\\n+java/lang/natVMProcess.cc \\\n java/lang/natVMThrowable.cc \\\n java/lang/ref/natReference.cc \\\n java/lang/reflect/natArray.cc \\\n@@ -8503,6 +8508,8 @@ java/lang/natThreadLocal.lo: java/lang/$(am__dirstamp) \\\n \tjava/lang/$(DEPDIR)/$(am__dirstamp)\n java/lang/natVMClassLoader.lo: java/lang/$(am__dirstamp) \\\n \tjava/lang/$(DEPDIR)/$(am__dirstamp)\n+java/lang/natVMProcess.lo: java/lang/$(am__dirstamp) \\\n+\tjava/lang/$(DEPDIR)/$(am__dirstamp)\n java/lang/natVMThrowable.lo: java/lang/$(am__dirstamp) \\\n \tjava/lang/$(DEPDIR)/$(am__dirstamp)\n java/lang/ref/$(am__dirstamp):\n@@ -8950,6 +8957,8 @@ mostlyclean-compile:\n \t-rm -f java/lang/natVMDouble.lo\n \t-rm -f java/lang/natVMFloat.$(OBJEXT)\n \t-rm -f java/lang/natVMFloat.lo\n+\t-rm -f java/lang/natVMProcess.$(OBJEXT)\n+\t-rm -f java/lang/natVMProcess.lo\n \t-rm -f java/lang/natVMThrowable.$(OBJEXT)\n \t-rm -f java/lang/natVMThrowable.lo\n \t-rm -f java/lang/ref/natReference.$(OBJEXT)\n@@ -9102,6 +9111,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@java/lang/$(DEPDIR)/natVMClassLoader.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/lang/$(DEPDIR)/natVMDouble.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/lang/$(DEPDIR)/natVMFloat.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@java/lang/$(DEPDIR)/natVMProcess.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/lang/$(DEPDIR)/natVMThrowable.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/lang/ref/$(DEPDIR)/natReference.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/lang/reflect/$(DEPDIR)/natArray.Plo@am__quote@\n@@ -11057,7 +11067,7 @@ java/io.list: $(java_io_source_files)\n \n java/lang.list: $(java_lang_source_files)\n \t@$(mkinstalldirs) $(dir $@)\n-\techo $(srcdir)/classpath/lib/java/lang/*.class | tr ' ' '\\n' | fgrep -v Object.class | fgrep -v Class.class | grep -v '[^/]Process' > java/lang.list\n+\techo $(srcdir)/classpath/lib/java/lang/*.class | tr ' ' '\\n' | fgrep -v Object.class | fgrep -v Class.class | egrep -v '(Ecos|Posix|Win32)Process' > java/lang.list\n \n -include java/lang.deps\n "}, {"sha": "84ef1599bf9b4039de79545154321b965e491164", "filename": "libjava/classpath/lib/java/lang/EcosProcess.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FEcosProcess.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FEcosProcess.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FEcosProcess.class?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19"}, {"sha": "a7103f81a1ca094f14da705c8ed6187705c13341", "filename": "libjava/classpath/lib/java/lang/PosixProcess$EOFInputStream.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FPosixProcess%24EOFInputStream.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FPosixProcess%24EOFInputStream.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FPosixProcess%24EOFInputStream.class?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19"}, {"sha": "0227add131e85b5fccde4022088939d131d1aafb", "filename": "libjava/classpath/lib/java/lang/PosixProcess.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FPosixProcess.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FPosixProcess.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FPosixProcess.class?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19"}, {"sha": "d83d708d82e3805ae19989fc51e942dc75b43a20", "filename": "libjava/classpath/lib/java/lang/ProcessBuilder.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FProcessBuilder.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FProcessBuilder.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FProcessBuilder.class?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19"}, {"sha": "04ee59d55975de16a42f1ac0dacc64e527a59676", "filename": "libjava/classpath/lib/java/lang/System$EnvironmentMap.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FSystem%24EnvironmentMap.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FSystem%24EnvironmentMap.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FSystem%24EnvironmentMap.class?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19"}, {"sha": "32427879c13c5885f77978eac056529c9adb05c8", "filename": "libjava/classpath/lib/java/lang/System$EnvironmentSet.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FSystem%24EnvironmentSet.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FSystem%24EnvironmentSet.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FSystem%24EnvironmentSet.class?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19"}, {"sha": "b3702178368cea496becf5c36888ff8b333d54e1", "filename": "libjava/classpath/lib/java/lang/System.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FSystem.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FSystem.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FSystem.class?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19"}, {"sha": "5a13c77537810f5dd7bb8ad2ff2653eada860ae8", "filename": "libjava/classpath/lib/java/lang/VMProcess.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FVMProcess.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FVMProcess.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FVMProcess.class?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19"}, {"sha": "ef70db741314811d353922ba96c0a78e2ff6b566", "filename": "libjava/classpath/lib/java/lang/Win32Process.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FWin32Process.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FWin32Process.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FWin32Process.class?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19"}, {"sha": "715a96e026a29cc2ef9de0c4bbbde36f1f7a898a", "filename": "libjava/gcj/javaprims.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fgcj%2Fjavaprims.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fgcj%2Fjavaprims.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Fjavaprims.h?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "patch": "@@ -1,7 +1,7 @@\n // javaprims.h - Main external header file for libgcj.  -*- c++ -*-\n \n \n-/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n    Free Software Foundation\n \n    This file is part of libgcj.\n@@ -248,6 +248,7 @@ extern \"Java\"\n       class VMCompiler;\n       class VMDouble;\n       class VMFloat;\n+      class VMProcess;\n       class VMThrowable;\n       class VerifyError;\n       class VirtualMachineError;"}, {"sha": "a0173c30a1a0dcf88f788158a033a96a6a3d0095", "filename": "libjava/java/lang/EcosProcess.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FEcosProcess.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FEcosProcess.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FEcosProcess.h?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "patch": "@@ -20,7 +20,7 @@ class java::lang::EcosProcess : public ::java::lang::Process\n   ::java::io::InputStream * getInputStream();\n   ::java::io::OutputStream * getOutputStream();\n   jint waitFor();\n-  EcosProcess(JArray< ::java::lang::String * > *, JArray< ::java::lang::String * > *, ::java::io::File *);\n+  EcosProcess(JArray< ::java::lang::String * > *, JArray< ::java::lang::String * > *, ::java::io::File *, jboolean);\n   static ::java::lang::Class class$;\n };\n "}, {"sha": "79c2f12a55a14594dd40f7f112b1d9c018892cea", "filename": "libjava/java/lang/EcosProcess.java", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FEcosProcess.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FEcosProcess.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FEcosProcess.java?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "patch": "@@ -1,6 +1,6 @@\n // EcosProcess.java - Subclass of Process for eCos systems.\n \n-/* Copyright (C) 1998, 1999, 2006  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2006, 2007  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -51,9 +51,8 @@ public int waitFor () throws InterruptedException\n     return 0;\n   }\n \n-  public EcosProcess (String[] progarray,\n-                          String[] envp,\n-                          File dir)\n+  public EcosProcess (String[] progarray, String[] envp, File dir,\n+\t\t      boolean redirect)\n     throws IOException\n   {\n     throw new IOException (\"eCos processes unimplemented\");"}, {"sha": "a43fa0739d53c4275dd7b2511e20afd86ae0884d", "filename": "libjava/java/lang/PosixProcess.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FPosixProcess.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FPosixProcess.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FPosixProcess.h?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "patch": "@@ -31,14 +31,15 @@ class java::lang::PosixProcess : public ::java::lang::Process\n private:\n   void nativeSpawn();\n public: // actually package-private\n-  PosixProcess(JArray< ::java::lang::String * > *, JArray< ::java::lang::String * > *, ::java::io::File *);\n+  PosixProcess(JArray< ::java::lang::String * > *, JArray< ::java::lang::String * > *, ::java::io::File *, jboolean);\n   static jlong access$0(::java::lang::PosixProcess *);\n   static ::java::lang::Object * access$1();\n   static void access$2(::java::lang::PosixProcess$ProcessManager *);\n private:\n   JArray< ::java::lang::String * > * __attribute__((aligned(__alignof__( ::java::lang::Process)))) progarray;\n   JArray< ::java::lang::String * > * envp;\n   ::java::io::File * dir;\n+  jboolean redirect;\n   ::java::lang::Throwable * exception;\n   jlong pid;\n public: // actually package-private"}, {"sha": "6b1496426dd13614ffcca60f880689ebd17fa808", "filename": "libjava/java/lang/PosixProcess.java", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FPosixProcess.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FPosixProcess.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FPosixProcess.java?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "patch": "@@ -1,5 +1,5 @@\n // PosixProcess.java - Subclass of Process for POSIX systems.\n-/* Copyright (C) 1998, 1999, 2004, 2006  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2004, 2006, 2007  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -354,8 +354,8 @@ void spawn(ProcessManager pm)\n    */\n   private native void nativeSpawn();\n \n-  PosixProcess(String[] progarray, String[] envp, File dir)\n-           throws IOException\n+  PosixProcess(String[] progarray, String[] envp, File dir, boolean redirect)\n+    throws IOException\n   {\n     // Check to ensure there is something to run, and avoid\n     // dereferencing null pointers in native code.\n@@ -365,6 +365,7 @@ void spawn(ProcessManager pm)\n     this.progarray = progarray;\n     this.envp = envp;\n     this.dir = dir;\n+    this.redirect = redirect;\n \n     // Start a ProcessManager if there is not one already running.\n     synchronized (queueLock)\n@@ -419,6 +420,7 @@ void spawn(ProcessManager pm)\n   private String[] progarray;\n   private String[] envp;\n   private File dir;\n+  private boolean redirect;\n \n   /** Set by the ProcessManager on problems starting. */\n   private Throwable exception;"}, {"sha": "1220f57e28f2e580029890e7e3498a4da9e6a2ad", "filename": "libjava/java/lang/System$EnvironmentMap.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FSystem%24EnvironmentMap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FSystem%24EnvironmentMap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FSystem%24EnvironmentMap.h?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "patch": "@@ -13,16 +13,19 @@ class java::lang::System$EnvironmentMap : public ::java::util::HashMap\n \n public: // actually package-private\n   System$EnvironmentMap();\n+  System$EnvironmentMap(::java::util::Map *);\n public:\n   virtual jboolean containsKey(::java::lang::Object *);\n   virtual jboolean containsValue(::java::lang::Object *);\n   virtual ::java::util::Set * entrySet();\n   virtual ::java::lang::String * target$get(::java::lang::Object *);\n   virtual ::java::util::Set * keySet();\n+  virtual ::java::lang::String * target$put(::java::lang::String *, ::java::lang::String *);\n   virtual ::java::lang::String * target$remove(::java::lang::Object *);\n   virtual ::java::util::Collection * values();\n   virtual ::java::lang::Object * get(::java::lang::Object *);\n   virtual ::java::lang::Object * remove(::java::lang::Object *);\n+  virtual ::java::lang::Object * put(::java::lang::Object *, ::java::lang::Object *);\n private:\n   ::java::util::Set * __attribute__((aligned(__alignof__( ::java::util::HashMap)))) entries;\n   ::java::util::Set * keys;"}, {"sha": "b516a513e759a23eb2f3e715f8f7c3b0831d9aad", "filename": "libjava/java/lang/System.java", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FSystem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FSystem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FSystem.java?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "patch": "@@ -828,7 +828,7 @@ public int size()\n    *\n    * @author Andrew John Hughes (gnu_andrew@member.fsf.org)\n    */\n-  private static class EnvironmentMap\n+  static class EnvironmentMap\n     extends HashMap<String,String>\n   {\n     \n@@ -854,7 +854,20 @@ public int size()\n     {\n       super();\n     }\n-    \n+\n+    /**\n+     * Constructs a new <code>EnvironmentMap</code> containing\n+     * the contents of the specified map.\n+     *\n+     * @param m the map to be added to this.\n+     * @throws NullPointerException if a key or value is null.\n+     * @throws ClassCastException if a key or value is not a String.\n+     */    \n+    EnvironmentMap(Map<String,String> m)\n+    {\n+      super(m);\n+    }\n+\n     /**\n      * Blocks queries containing a null key or one which is not\n      * of type <code>String</code>.  All other queries\n@@ -939,7 +952,32 @@ public Set<String> keySet()\n         keys = new EnvironmentSet(super.keySet());\n       return keys;\n     }\n-    \n+\n+    /**\n+     * Associates the given key to the given value. If the\n+     * map already contains the key, its value is replaced.\n+     * The map does not accept null keys or values, or keys\n+     * and values not of type {@link String}.\n+     *\n+     * @param key the key to map.\n+     * @param value the value to be mapped.\n+     * @return the previous value of the key, or null if there was no mapping\n+     * @throws NullPointerException if a key or value is null.\n+     * @throws ClassCastException if a key or value is not a String.\n+     */\n+    public String put(String key, String value)\n+    {\n+      if (key == null)\n+\tthrow new NullPointerException(\"A new key is null.\");\n+      if (value == null)\n+\tthrow new NullPointerException(\"A new value is null.\");\n+      if (!(key instanceof String))\n+\tthrow new ClassCastException(\"A new key is not a String.\");\n+      if (!(value instanceof String))\n+\tthrow new ClassCastException(\"A new value is not a String.\");\n+      return super.put(key, value);\n+    }\n+\n     /**\n      * Removes a key-value pair from the map.  The queried key may not\n      * be null or of a type other than a <code>String</code>."}, {"sha": "c0912e5c21e6746e494bf6b7dc9589ebab91fbfe", "filename": "libjava/java/lang/VMProcess.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FVMProcess.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FVMProcess.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FVMProcess.h?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "patch": "@@ -0,0 +1,24 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __java_lang_VMProcess__\n+#define __java_lang_VMProcess__\n+\n+#pragma interface\n+\n+#include <java/lang/Object.h>\n+#include <gcj/array.h>\n+\n+\n+class java::lang::VMProcess : public ::java::lang::Object\n+{\n+\n+public: // actually package-private\n+  VMProcess();\n+  static ::java::lang::Process * nativeExec(JArray< ::java::lang::String * > *, JArray< ::java::lang::String * > *, ::java::io::File *, jboolean);\n+  static ::java::lang::Process * exec(::java::util::List *, ::java::util::Map *, ::java::io::File *, jboolean);\n+public:\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __java_lang_VMProcess__"}, {"sha": "c0c7bebc10cd4da0c0c14cfcaabc880c174d4c0f", "filename": "libjava/java/lang/VMProcess.java", "status": "renamed", "additions": 21, "deletions": 71, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FVMProcess.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FVMProcess.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FVMProcess.java?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "patch": "@@ -1,5 +1,5 @@\n-/* ProcessBuilder.java - Represent spawned system process\n-   Copyright (C) 2005, 2006  Free Software Foundation, Inc.\n+/* java.lang.VMProcess -- VM implementation of java.lang.ProcessBuilder\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,84 +35,34 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-\n package java.lang;\n \n import java.io.File;\n import java.io.IOException;\n-import java.util.Arrays;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n \n-public final class ProcessBuilder\n+final class VMProcess\n {\n-  private File directory = new File(System.getProperty(\"user.dir\"));\n-  private List<String> command;\n-  // FIXME: make a copy.\n-  private Map<String, String> environment = System.getenv();\n-  private boolean redirect = false;\n-\n-  public ProcessBuilder(List<String> command)\n-  {\n-    this.command = command;\n-  }\n-\n-  public ProcessBuilder(String... command)\n-  {\n-    this.command = Arrays.asList(command);\n-  }\n-\n-  public List<String> command()\n-  {\n-    return command;\n-  }\n-\n-  public ProcessBuilder command(List<String> command)\n-  {\n-    this.command = command;\n-    return this;\n-  }\n-\n-  public ProcessBuilder command(String... command)\n-  {\n-    this.command = Arrays.asList(command);\n-    return this;\n-  }\n-\n-  public File directory()\n-  {\n-    return directory;\n-  }\n-\n-  public ProcessBuilder directory(File directory)\n-  {\n-    this.directory = directory;\n-    return this;\n-  }\n-\n-  public Map<String, String> environment()\n-  {\n-    return environment;\n-  }\n-\n-  public boolean redirectErrorStream()\n-  {\n-    return redirect;\n-  }\n-\n-  public ProcessBuilder redirectErrorStream(boolean redirect)\n-  {\n-    this.redirect = redirect;\n-    return this;\n-  }\n+  static native Process nativeExec(String[] cmd, String[] env,\n+\t\t\t\t   File dir, boolean redirect)\n+    throws IOException;\n \n-  public Process start() throws IOException\n+  static Process exec(List<String> cmd, Map<String, String> env,\n+\t\t      File dir, boolean redirect) throws IOException\n   {\n-    SecurityManager sm = SecurityManager.current; // Be thread-safe!\n-    if (sm != null)\n-      sm.checkExec(command.get(0));\n-    //    return VMProcess.exec(command, environment, directory, redirect);\n-    // FIXME\n-    return null;\n+    String[] acmd = (String[]) cmd.toArray(new String[cmd.size()]);\n+    String[] aenv = new String[env.size()];\n+\n+    int i = 0;\n+    Iterator iter = env.entrySet().iterator();\n+    while (iter.hasNext())\n+      {\n+\tMap.Entry entry = (Map.Entry) iter.next();\n+\taenv[i++] = entry.getKey() + \"=\" + entry.getValue();\n+      }\n+\n+    return nativeExec(acmd, aenv, dir, redirect);\n   }\n }", "previous_filename": "libjava/java/lang/ProcessBuilder.java"}, {"sha": "5e22934a99046b23b5f1a1ccfe3880a9489afcc9", "filename": "libjava/java/lang/Win32Process.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FWin32Process.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FWin32Process.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FWin32Process.h?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "patch": "@@ -20,10 +20,10 @@ class java::lang::Win32Process : public ::java::lang::Process\n   ::java::io::InputStream * getInputStream();\n   ::java::io::OutputStream * getOutputStream();\n   jint waitFor();\n-  Win32Process(JArray< ::java::lang::String * > *, JArray< ::java::lang::String * > *, ::java::io::File *);\n+  Win32Process(JArray< ::java::lang::String * > *, JArray< ::java::lang::String * > *, ::java::io::File *, jboolean);\n private:\n   jboolean hasExited();\n-  void startProcess(JArray< ::java::lang::String * > *, JArray< ::java::lang::String * > *, ::java::io::File *);\n+  void startProcess(JArray< ::java::lang::String * > *, JArray< ::java::lang::String * > *, ::java::io::File *, jboolean);\n   void cleanup();\n   ::java::io::OutputStream * __attribute__((aligned(__alignof__( ::java::lang::Process)))) outputStream;\n   ::java::io::InputStream * inputStream;"}, {"sha": "e817a0c90905ec7ef440cfa9210f854610b4e6c4", "filename": "libjava/java/lang/Win32Process.java", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FWin32Process.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FWin32Process.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FWin32Process.java?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "patch": "@@ -1,6 +1,6 @@\n // Win32Process.java - Subclass of Process for Win32 systems.\n \n-/* Copyright (C) 2002, 2003, 2006  Free Software Foundation\n+/* Copyright (C) 2002, 2003, 2006, 2007  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -51,9 +51,8 @@ public OutputStream getOutputStream ()\n \n   public native int waitFor () throws InterruptedException;\n \n-  public Win32Process (String[] progarray,\n-                          String[] envp,\n-                          File dir)\n+  public Win32Process (String[] progarray, String[] envp, File dir,\n+\t\t       boolean redirect)\n     throws IOException\n   {\n     for (int i = 0; i < progarray.length; i++)\n@@ -64,7 +63,7 @@ public Win32Process (String[] progarray,\n           progarray[i] = \"\\\"\" + s + \"\\\"\";\n       }\n \n-    startProcess (progarray, envp, dir);\n+    startProcess (progarray, envp, dir, redirect);\n   }\n \n   // The standard streams (stdin, stdout and stderr, respectively)\n@@ -81,8 +80,9 @@ public Win32Process (String[] progarray,\n \n   private native boolean hasExited ();\n   private native void startProcess (String[] progarray,\n-           String[] envp,\n-           File dir)\n+\t\t\t\t    String[] envp,\n+\t\t\t\t    File dir,\n+\t\t\t\t    boolean redirect)\n     throws IOException;\n   private native void cleanup ();\n }"}, {"sha": "149b5d8ba3416bc6999f852341f5f56d9822d79c", "filename": "libjava/java/lang/natPosixProcess.cc", "status": "modified", "additions": 36, "deletions": 22, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FnatPosixProcess.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FnatPosixProcess.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatPosixProcess.cc?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "patch": "@@ -1,6 +1,6 @@\n // natPosixProcess.cc - Native side of POSIX process code.\n \n-/* Copyright (C) 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -41,6 +41,7 @@ details.  */\n #include <java/io/FileOutputStream.h>\n #include <java/io/IOException.h>\n #include <java/lang/OutOfMemoryError.h>\n+#include <java/lang/PosixProcess$EOFInputStream.h>\n \n using gnu::java::nio::channels::FileChannelImpl;\n \n@@ -231,7 +232,7 @@ java::lang::PosixProcess::nativeSpawn ()\n   try\n     {\n       // Transform arrays to native form.\n-    args = (char **) _Jv_Malloc ((progarray->length + 1) * sizeof (char *));\n+      args = (char **) _Jv_Malloc ((progarray->length + 1) * sizeof (char *));\n \n       // Initialize so we can gracefully recover.\n       jstring *elts = elements (progarray);\n@@ -262,23 +263,30 @@ java::lang::PosixProcess::nativeSpawn ()\n \tpath = new_string (dir->getPath ());\n \n       // Create pipes for I/O.  MSGP is for communicating exec()\n-      // status.\n-      if (pipe (inp) || pipe (outp) || pipe (errp) || pipe (msgp)\n+      // status.  If redirecting stderr to stdout, we don't need to\n+      // create the ERRP pipe.\n+      if (pipe (inp) || pipe (outp) || pipe (msgp)\n \t  || fcntl (msgp[1], F_SETFD, FD_CLOEXEC))\n-      throw new IOException (JvNewStringUTF (strerror (errno)));\n+\tthrow new IOException (JvNewStringUTF (strerror (errno)));\n+      if (! redirect && pipe (errp))\n+\tthrow new IOException (JvNewStringUTF (strerror (errno)));\n \n       // We create the streams before forking.  Otherwise if we had an\n       // error while creating the streams we would have run the child\n       // with no way to communicate with it.\n-    errorStream =\n-      new FileInputStream (new\n-                           FileChannelImpl (errp[0], FileChannelImpl::READ));\n-    inputStream =\n-      new FileInputStream (new\n-                           FileChannelImpl (inp[0], FileChannelImpl::READ));\n-    outputStream =\n-      new FileOutputStream (new FileChannelImpl (outp[1],\n-                                             FileChannelImpl::WRITE));\n+      if (redirect)\n+\terrorStream = PosixProcess$EOFInputStream::instance;\n+      else\n+\terrorStream =\n+\t  new FileInputStream (new\n+\t\t\t       FileChannelImpl (errp[0],\n+\t\t\t\t\t\tFileChannelImpl::READ));\n+      inputStream =\n+\tnew FileInputStream (new\n+\t\t\t     FileChannelImpl (inp[0], FileChannelImpl::READ));\n+      outputStream =\n+\tnew FileOutputStream (new FileChannelImpl (outp[1],\n+\t\t\t\t\t\t   FileChannelImpl::WRITE));\n \n       // We don't use vfork() because that would cause the local\n       // environment to be set by the child.\n@@ -319,14 +327,17 @@ java::lang::PosixProcess::nativeSpawn ()\n \t  // We ignore errors from dup2 because they should never occur.\n \t  dup2 (outp[0], 0);\n \t  dup2 (inp[1], 1);\n-\t  dup2 (errp[1], 2);\n+\t  dup2 (redirect ? inp[1] : errp[1], 2);\n \n \t  // Use close and not myclose -- we're in the child, and we\n \t  // aren't worried about the possible race condition.\n \t  close (inp[0]);\n \t  close (inp[1]);\n-\t  close (errp[0]);\n-\t  close (errp[1]);\n+\t  if (! redirect)\n+\t    {\n+\t      close (errp[0]);\n+\t      close (errp[1]);\n+\t    }\n \t  close (outp[0]);\n \t  close (outp[1]);\n \t  close (msgp[0]);\n@@ -362,7 +373,8 @@ java::lang::PosixProcess::nativeSpawn ()\n \n       myclose (outp[0]);\n       myclose (inp[1]);\n-      myclose (errp[1]);\n+      if (! redirect)\n+\tmyclose (errp[1]);\n       myclose (msgp[1]);\n \n       char c;\n@@ -406,7 +418,7 @@ java::lang::PosixProcess::nativeSpawn ()\n \t{\n \t  if (errorStream != NULL)\n \t    errorStream->close ();\n-\t  else\n+\t  else if (! redirect)\n \t    myclose (errp[0]);\n \t}\n       catch (java::lang::Throwable *ignore)\n@@ -417,10 +429,11 @@ java::lang::PosixProcess::nativeSpawn ()\n       // the use of myclose.\n       myclose (outp[0]);\n       myclose (inp[1]);\n-      myclose (errp[1]);\n+      if (! redirect)\n+\tmyclose (errp[1]);\n       myclose (msgp[1]);\n \n-    exception = thrown;\n+      exception = thrown;\n     }\n \n   myclose (msgp[0]);\n@@ -430,6 +443,7 @@ java::lang::PosixProcess::nativeSpawn ()\n     {\n       fcntl (outp[1], F_SETFD, FD_CLOEXEC);\n       fcntl (inp[0], F_SETFD, FD_CLOEXEC);\n-      fcntl (errp[0], F_SETFD, FD_CLOEXEC);\n+      if (! redirect)\n+\tfcntl (errp[0], F_SETFD, FD_CLOEXEC);\n     }\n }"}, {"sha": "02842b1dfdacdff65c3759b51862fb0fc18e7e62", "filename": "libjava/java/lang/natRuntime.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FnatRuntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FnatRuntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatRuntime.cc?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "patch": "@@ -1,6 +1,6 @@\n // natRuntime.cc - Implementation of native side of Runtime class.\n \n-/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -297,7 +297,7 @@ java::lang::Runtime::execInternal (jstringArray cmd,\n \t\t\t\t   jstringArray env,\n \t\t\t\t   java::io::File *dir)\n {\n-  return new _Jv_platform_process (cmd, env, dir);\n+  return new _Jv_platform_process (cmd, env, dir, false);\n }\n \n jint"}, {"sha": "0a14465c4bb48bbc49683667b7fa74671bb5b14e", "filename": "libjava/java/lang/natVMProcess.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FnatVMProcess.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FnatVMProcess.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatVMProcess.cc?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "patch": "@@ -0,0 +1,34 @@\n+// natVMProcess.cc - native code for ProcessBuilder\n+\n+/* Copyright (C) 2007 Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+\n+#include <gcj/cni.h>\n+#include <jvm.h>\n+\n+#include <platform.h>\n+\n+#include <java/lang/VMProcess.h>\n+#include <java/lang/Process.h>\n+#include <java/io/File.h>\n+\n+// It is convenient and safe to simply include all of these.\n+#include <java/lang/Win32Process.h>\n+#include <java/lang/EcosProcess.h>\n+#include <java/lang/PosixProcess.h>\n+\n+::java::lang::Process *\n+java::lang::VMProcess::nativeExec (jstringArray cmd,\n+\t\t\t\t   jstringArray env,\n+\t\t\t\t   ::java::io::File *dir,\n+\t\t\t\t   jboolean redirect)\n+{\n+  return new _Jv_platform_process (cmd, env, dir, redirect);\n+}"}, {"sha": "c836b5630f551347cbb0547b4d2fe15abc40e58f", "filename": "libjava/java/lang/natWin32Process.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FnatWin32Process.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fjava%2Flang%2FnatWin32Process.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatWin32Process.cc?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "patch": "@@ -1,6 +1,6 @@\n // natWin32Process.cc - Native side of Win32 process code.\n \n-/* Copyright (C) 2003, 2006  Free Software Foundation\n+/* Copyright (C) 2003, 2006, 2007  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -210,8 +210,9 @@ HANDLE ChildProcessPipe::getChildHandle()\n \n void\n java::lang::Win32Process::startProcess (jstringArray progarray,\n-                                           jstringArray envp,\n-                                           java::io::File *dir)\n+\t\t\t\t\tjstringArray envp,\n+\t\t\t\t\tjava::io::File *dir,\n+\t\t\t\t\tjboolean redirect)\n {\n   using namespace java::io;\n "}, {"sha": "4ac29a5fa30b9beeff544c00439aa63ee974e301", "filename": "libjava/scripts/makemake.tcl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fscripts%2Fmakemake.tcl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fscripts%2Fmakemake.tcl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fscripts%2Fmakemake.tcl?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "patch": "@@ -304,7 +304,7 @@ proc emit_package_rule {package} {\n     # Object and Class are special cases due to an apparent compiler\n     # bug.  Process is a special case because we don't build all\n     # concrete implementations of Process on all platforms.\n-    set omit \"| tr ' ' '\\\\n' | fgrep -v Object.class | fgrep -v Class.class | grep -v '\\[^/\\]Process' \"\n+    set omit \"| tr ' ' '\\\\n' | fgrep -v Object.class | fgrep -v Class.class | egrep -v '\\(Ecos\\|Posix\\|Win32\\)Process' \"\n   } else {\n     set omit \"\"\n   }"}, {"sha": "4bf9956f161e91958b32e0586869727a4161adcc", "filename": "libjava/sources.am", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fsources.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19/libjava%2Fsources.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsources.am?ref=f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "patch": "@@ -4721,7 +4721,7 @@ classpath/java/lang/Override.java \\\n classpath/java/lang/Package.java \\\n java/lang/PosixProcess.java \\\n classpath/java/lang/Process.java \\\n-java/lang/ProcessBuilder.java \\\n+classpath/java/lang/ProcessBuilder.java \\\n classpath/java/lang/Readable.java \\\n classpath/java/lang/Runnable.java \\\n java/lang/Runtime.java \\\n@@ -4753,6 +4753,7 @@ java/lang/VMClassLoader.java \\\n java/lang/VMCompiler.java \\\n java/lang/VMDouble.java \\\n java/lang/VMFloat.java \\\n+java/lang/VMProcess.java \\\n java/lang/VMThrowable.java \\\n classpath/java/lang/VerifyError.java \\\n classpath/java/lang/VirtualMachineError.java \\\n@@ -4763,7 +4764,7 @@ java_lang_header_files = $(filter-out java/lang/Object.h java/lang/Class.h,$(pat\n \n java/lang.list: $(java_lang_source_files)\n \t@$(mkinstalldirs) $(dir $@)\n-\techo $(srcdir)/classpath/lib/java/lang/*.class | tr ' ' '\\n' | fgrep -v Object.class | fgrep -v Class.class | grep -v '[^/]Process' > java/lang.list\n+\techo $(srcdir)/classpath/lib/java/lang/*.class | tr ' ' '\\n' | fgrep -v Object.class | fgrep -v Class.class | egrep -v '(Ecos|Posix|Win32)Process' > java/lang.list\n \n -include java/lang.deps\n "}]}