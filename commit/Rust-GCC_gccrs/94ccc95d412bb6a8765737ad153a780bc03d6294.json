{"sha": "94ccc95d412bb6a8765737ad153a780bc03d6294", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRjY2M5NWQ0MTJiYjZhODc2NTczN2FkMTUzYTc4MGJjMDNkNjI5NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-05-21T15:12:13Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-05-21T15:12:13Z"}, "message": "re PR c++/51184 (Abstract class in function return type)\n\n/cp\n2012-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51184\n\t* decl.c (grokdeclarator): Diagnose functions returning abstract\n\tclass types as TYPENAME.\n\t* cp-tree.h (ABSTRACT_CLASS_TYPE_P): Add.\n\t* except.c (is_admissible_throw_operand_or_catch_parameter): Use it.\n\t* pt.c (tsubst): Likewise.\n\t* semantics.c (trait_expr_value): Likewise.\n\n/testsuite\n2012-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51184\n\t* g++.dg/other/abstract4.C: New-\n\n/cp\n2012-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/40821\n\t* parser.c (cp_parser_attributes_opt): Enforce error checking of\n\tunbalanced parentheses in the presence of tentative parsing.\n\n/testsuite\n2012-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/40821\n\t* g++.dg/ext/attrib46.C: New.\n\nFrom-SVN: r187720", "tree": {"sha": "20b95919451d60b9d5a2471d9910f3df493c84e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20b95919451d60b9d5a2471d9910f3df493c84e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94ccc95d412bb6a8765737ad153a780bc03d6294", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ccc95d412bb6a8765737ad153a780bc03d6294", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94ccc95d412bb6a8765737ad153a780bc03d6294", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ccc95d412bb6a8765737ad153a780bc03d6294/comments", "author": null, "committer": null, "parents": [{"sha": "cb0c9fc30529a672fb0105d505523668da17da33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb0c9fc30529a672fb0105d505523668da17da33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb0c9fc30529a672fb0105d505523668da17da33"}], "stats": {"total": 72, "additions": 67, "deletions": 5}, "files": [{"sha": "391407fb9daa129dd1f41e4d98eba1dec7266c1a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ccc95d412bb6a8765737ad153a780bc03d6294/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ccc95d412bb6a8765737ad153a780bc03d6294/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=94ccc95d412bb6a8765737ad153a780bc03d6294", "patch": "@@ -1,3 +1,19 @@\n+2012-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/51184\n+\t* decl.c (grokdeclarator): Diagnose functions returning abstract\n+\tclass types as TYPENAME.\n+\t* cp-tree.h (ABSTRACT_CLASS_TYPE_P): Add.\n+\t* except.c (is_admissible_throw_operand_or_catch_parameter): Use it.\n+\t* pt.c (tsubst): Likewise.\n+\t* semantics.c (trait_expr_value): Likewise.\n+\n+2012-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/40821\n+\t* parser.c (cp_parser_attributes_opt): Enforce error checking of\n+\tunbalanced parentheses in the presence of tentative parsing.\n+\n 2012-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/39681"}, {"sha": "626c61f995acce143574c0487142b072e6b3cb38", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ccc95d412bb6a8765737ad153a780bc03d6294/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ccc95d412bb6a8765737ad153a780bc03d6294/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=94ccc95d412bb6a8765737ad153a780bc03d6294", "patch": "@@ -1658,6 +1658,10 @@ struct GTY((variable_size)) lang_type {\n #define CLASSTYPE_PURE_VIRTUALS(NODE) \\\n   (LANG_TYPE_CLASS_CHECK (NODE)->pure_virtuals)\n \n+/* Nonzero means that this type is an abstract class type.  */\n+#define ABSTRACT_CLASS_TYPE_P(NODE) \\\n+  (CLASS_TYPE_P (NODE) && CLASSTYPE_PURE_VIRTUALS(NODE))\n+\n /* Nonzero means that this type has an X() constructor.  */\n #define TYPE_HAS_DEFAULT_CONSTRUCTOR(NODE) \\\n   (LANG_TYPE_CLASS_CHECK (NODE)->h.has_default_ctor)"}, {"sha": "d883da6b6406a84fc85990ef784f5ea63995cd92", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ccc95d412bb6a8765737ad153a780bc03d6294/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ccc95d412bb6a8765737ad153a780bc03d6294/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=94ccc95d412bb6a8765737ad153a780bc03d6294", "patch": "@@ -9194,6 +9194,11 @@ grokdeclarator (const cp_declarator *declarator,\n \t\terror (\"%qs declared as function returning an array\", name);\n \t\treturn error_mark_node;\n \t      }\n+\t    /* When decl_context == NORMAL we emit a better error message\n+\t       later in abstract_virtuals_error.  */\n+\t    if (decl_context == TYPENAME && ABSTRACT_CLASS_TYPE_P (type))\n+\t      error (\"%qs declared as function returning an abstract \"\n+\t\t     \"class type\", name);\n \n \t    /* Pick up type qualifiers which should be applied to `this'.  */\n \t    memfn_quals = declarator->u.function.qualifiers;"}, {"sha": "8998c7d70916c34d0501dae87073006bc8808800", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ccc95d412bb6a8765737ad153a780bc03d6294/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ccc95d412bb6a8765737ad153a780bc03d6294/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=94ccc95d412bb6a8765737ad153a780bc03d6294", "patch": "@@ -974,7 +974,7 @@ is_admissible_throw_operand_or_catch_parameter (tree t, bool is_throw)\n   /* 10.4/3 An abstract class shall not be used as a parameter type,\n \t    as a function return type or as type of an explicit\n \t    conversion.  */\n-  else if (CLASS_TYPE_P (type) && CLASSTYPE_PURE_VIRTUALS (type))\n+  else if (ABSTRACT_CLASS_TYPE_P (type))\n     {\n       if (is_throw)\n \terror (\"expression %qE of abstract class type %qT cannot \""}, {"sha": "56e54634a4eacd3186b692c22de56e03e034c42b", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ccc95d412bb6a8765737ad153a780bc03d6294/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ccc95d412bb6a8765737ad153a780bc03d6294/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=94ccc95d412bb6a8765737ad153a780bc03d6294", "patch": "@@ -20052,6 +20052,7 @@ cp_parser_attributes_opt (cp_parser* parser)\n     {\n       cp_token *token;\n       tree attribute_list;\n+      bool ok = true;\n \n       /* Peek at the next token.  */\n       token = cp_lexer_peek_token (parser->lexer);\n@@ -20076,8 +20077,12 @@ cp_parser_attributes_opt (cp_parser* parser)\n \tattribute_list = NULL;\n \n       /* Look for the two `)' tokens.  */\n-      cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n-      cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n+      if (!cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN))\n+\tok = false;\n+      if (!cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN))\n+\tok = false;\n+      if (!ok)\n+\tcp_parser_skip_to_end_of_statement (parser);\n \n       /* Add these new attributes to the list.  */\n       attributes = chainon (attributes, attribute_list);"}, {"sha": "fa994baf8590f7b11592d6f1a39ccb2f68b98788", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ccc95d412bb6a8765737ad153a780bc03d6294/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ccc95d412bb6a8765737ad153a780bc03d6294/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=94ccc95d412bb6a8765737ad153a780bc03d6294", "patch": "@@ -11646,7 +11646,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t      error (\"creating array of %qT\", type);\n \t    return error_mark_node;\n \t  }\n-\tif (CLASS_TYPE_P (type) && CLASSTYPE_PURE_VIRTUALS (type))\n+\tif (ABSTRACT_CLASS_TYPE_P (type))\n \t  {\n \t    if (complain & tf_error)\n \t      error (\"creating array of %qT, which is an abstract class type\","}, {"sha": "8b53d277fbd876af12a7298355cbda2a50f07c01", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ccc95d412bb6a8765737ad153a780bc03d6294/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ccc95d412bb6a8765737ad153a780bc03d6294/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=94ccc95d412bb6a8765737ad153a780bc03d6294", "patch": "@@ -5441,7 +5441,7 @@ trait_expr_value (cp_trait_kind kind, tree type1, tree type2)\n       return type_has_virtual_destructor (type1);\n \n     case CPTK_IS_ABSTRACT:\n-      return (CLASS_TYPE_P (type1) && CLASSTYPE_PURE_VIRTUALS (type1));\n+      return (ABSTRACT_CLASS_TYPE_P (type1));\n \n     case CPTK_IS_BASE_OF:\n       return (NON_UNION_CLASS_TYPE_P (type1) && NON_UNION_CLASS_TYPE_P (type2)"}, {"sha": "28993f7e4dd9bccbd0ce3394376a1d6a83d4934b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ccc95d412bb6a8765737ad153a780bc03d6294/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ccc95d412bb6a8765737ad153a780bc03d6294/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=94ccc95d412bb6a8765737ad153a780bc03d6294", "patch": "@@ -1,3 +1,13 @@\n+2012-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/51184\n+\t* g++.dg/other/abstract4.C: New-\n+\n+2012-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/40821\n+\t* g++.dg/ext/attrib46.C: New.\n+\n 2012-05-21  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/53148"}, {"sha": "1c71990fc5547e76d73b91d2844df4d82c93a88d", "filename": "gcc/testsuite/g++.dg/ext/attrib46.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ccc95d412bb6a8765737ad153a780bc03d6294/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ccc95d412bb6a8765737ad153a780bc03d6294/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib46.C?ref=94ccc95d412bb6a8765737ad153a780bc03d6294", "patch": "@@ -0,0 +1,4 @@\n+// PR c++/40821\n+\n+struct __attribute__((aligned(8)) S1 { int i; }; // { dg-error \"expected\" }\n+struct __attribute__( aligned(8)  S2 { int i; }; // { dg-error \"expected\" }"}, {"sha": "68b2eb27b8c3cad0423dcfe08973cfa480de6732", "filename": "gcc/testsuite/g++.dg/other/abstract4.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ccc95d412bb6a8765737ad153a780bc03d6294/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fabstract4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ccc95d412bb6a8765737ad153a780bc03d6294/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fabstract4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fabstract4.C?ref=94ccc95d412bb6a8765737ad153a780bc03d6294", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/51184\n+\n+template<typename T>\n+struct S { };\n+\n+template<typename T>\n+void foo();\n+\n+struct Abs\n+{\n+  virtual void bar() = 0;\n+};\n+\n+int main()\n+{\n+  S<Abs(int)> s;     // { dg-error \"abstract\" }\n+  foo<Abs(int)>();   // { dg-error \"abstract\" }\n+}"}]}