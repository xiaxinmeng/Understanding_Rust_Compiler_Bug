{"sha": "cb8bbba89e8db9b585dd0d3935ffef5e77920d5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I4YmJiYTg5ZThkYjliNTg1ZGQwZDM5MzVmZmVmNWU3NzkyMGQ1YQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-09-27T02:10:10Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-09-27T02:10:10Z"}, "message": "Improve code generation for edge and pixel-compare...\n\nImprove code generation for edge and pixel-compare, specifically avoid\nsign and zero extensions on 64-bit and allow such instructions to be\nplaced in delay slots.\n\ngcc/\n\n\t* config/sparc/sparc.md (edge{8,16,32}{,l}): Return Pmode.\n\t(fcmp{le,ne,gt,eq}{16,32}): Likewise.\n\t* config/sparc/visintrin.h: Update edge and pixel-compare\n\tintrinsics to return 'long' instead of 'int'.\n\t* doc/extend.texi: Update documentation to match.\n\t* config/sparc/sparc.c (eligible_for_return_delay): When leaf or\n\tflat, allow any instruction.  Otherwise, when V9 allow parallels\n\twhich consist only of sets to registers outside of %o0 to %o5.\n\t(sparc_vis_init_builtins): Update VIS builtin types for edge\n\tand pixel-compare.\n\ngcc/testsuite/\n\n\t* gcc.target/sparc/edge.c: Update for new return types.\n\t* gcc.target/sparc/fcmp.c: Likewise.\n\nFrom-SVN: r179227", "tree": {"sha": "d8e42dd1926af159fe00a417353501088bd00c7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8e42dd1926af159fe00a417353501088bd00c7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb8bbba89e8db9b585dd0d3935ffef5e77920d5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb8bbba89e8db9b585dd0d3935ffef5e77920d5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb8bbba89e8db9b585dd0d3935ffef5e77920d5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb8bbba89e8db9b585dd0d3935ffef5e77920d5a/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca17c07b4504b72788afdb4cb0d774264c2470b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca17c07b4504b72788afdb4cb0d774264c2470b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca17c07b4504b72788afdb4cb0d774264c2470b7"}], "stats": {"total": 297, "additions": 185, "deletions": 112}, "files": [{"sha": "ecdb26beb35449084f793b5f29ce58d35537dfbc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8bbba89e8db9b585dd0d3935ffef5e77920d5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8bbba89e8db9b585dd0d3935ffef5e77920d5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb8bbba89e8db9b585dd0d3935ffef5e77920d5a", "patch": "@@ -1,5 +1,16 @@\n 2011-09-26  David S. Miller  <davem@davemloft.net>\n \n+\t* config/sparc/sparc.md (edge{8,16,32}{,l}): Return Pmode.\n+\t(fcmp{le,ne,gt,eq}{16,32}): Likewise.\n+\t* config/sparc/visintrin.h: Update edge and pixel-compare\n+\tintrinsics to return 'long' instead of 'int'.\n+\t* doc/extend.texi: Update documentation to match.\n+\t* config/sparc/sparc.c (eligible_for_return_delay): When leaf or\n+\tflat, allow any instruction.  Otherwise, when V9 allow parallels\n+\twhich consist only of sets to registers outside of %o0 to %o5.\n+\t(sparc_vis_init_builtins): Update VIS builtin types for edge\n+\tand pixel-compare.\n+\n \t* config/sparc/sparc.c (sparc_conditional_register_usage): When VIS\n \tis enabled, mark %gsr as global.\n \t* config/sparc/sparc.md (UNSPEC_WRGSR): Delete."}, {"sha": "d1d835564959ab7fa35bfb7ebf176ef9d71171a1", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 85, "deletions": 26, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8bbba89e8db9b585dd0d3935ffef5e77920d5a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8bbba89e8db9b585dd0d3935ffef5e77920d5a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=cb8bbba89e8db9b585dd0d3935ffef5e77920d5a", "patch": "@@ -2857,9 +2857,10 @@ eligible_for_restore_insn (rtx trial, bool return_p)\n int\n eligible_for_return_delay (rtx trial)\n {\n+  int regno;\n   rtx pat;\n \n-  if (GET_CODE (trial) != INSN || GET_CODE (PATTERN (trial)) != SET)\n+  if (GET_CODE (trial) != INSN)\n     return 0;\n \n   if (get_attr_length (trial) != 1)\n@@ -2876,17 +2877,45 @@ eligible_for_return_delay (rtx trial)\n       get_attr_in_uncond_branch_delay (trial) == IN_UNCOND_BRANCH_DELAY_TRUE;\n \n   pat = PATTERN (trial);\n+  if (GET_CODE (pat) == PARALLEL)\n+    {\n+      int i;\n+\n+      if (! TARGET_V9)\n+\treturn 0;\n+      for (i = XVECLEN (pat, 0) - 1; i >= 0; i--)\n+\t{\n+\t  rtx expr = XVECEXP (pat, 0, i);\n+\t  if (GET_CODE (expr) != SET)\n+\t    return 0;\n+\t  if (GET_CODE (SET_DEST (expr)) != REG)\n+\t    return 0;\n+\t  regno = REGNO (SET_DEST (expr));\n+\t  if (regno >= 8 && regno < 24)\n+\t    return 0;\n+\t}\n+      return !epilogue_renumber (&pat, 1)\n+\t&& (get_attr_in_uncond_branch_delay (trial)\n+\t    == IN_UNCOND_BRANCH_DELAY_TRUE);\n+    }\n+\n+  if (GET_CODE (pat) != SET)\n+    return 0;\n+\n+  if (GET_CODE (SET_DEST (pat)) != REG)\n+    return 0;\n+\n+  regno = REGNO (SET_DEST (pat));\n \n   /* Otherwise, only operations which can be done in tandem with\n      a `restore' or `return' insn can go into the delay slot.  */\n-  if (GET_CODE (SET_DEST (pat)) != REG\n-      || (REGNO (SET_DEST (pat)) >= 8 && REGNO (SET_DEST (pat)) < 24))\n+  if (regno >= 8 && regno < 24)\n     return 0;\n \n   /* If this instruction sets up floating point register and we have a return\n      instruction, it can probably go in.  But restore will not work\n      with FP_REGS.  */\n-  if (REGNO (SET_DEST (pat)) >= 32)\n+  if (regno >= 32)\n     return (TARGET_V9\n \t    && !epilogue_renumber (&pat, 1)\n \t    && get_attr_in_uncond_branch_delay (trial)\n@@ -9172,10 +9201,17 @@ sparc_vis_init_builtins (void)\n   tree si_ftype_ptr_ptr = build_function_type_list (intSI_type_node,\n \t\t        \t\t\t    ptr_type_node,\n \t\t\t\t\t            ptr_type_node, 0);\n+  tree di_ftype_ptr_ptr = build_function_type_list (intDI_type_node,\n+\t\t        \t\t\t    ptr_type_node,\n+\t\t\t\t\t            ptr_type_node, 0);\n   tree si_ftype_v4hi_v4hi = build_function_type_list (intSI_type_node,\n \t\t\t\t\t\t      v4hi, v4hi, 0);\n   tree si_ftype_v2si_v2si = build_function_type_list (intSI_type_node,\n \t\t\t\t\t\t      v2si, v2si, 0);\n+  tree di_ftype_v4hi_v4hi = build_function_type_list (intDI_type_node,\n+\t\t\t\t\t\t      v4hi, v4hi, 0);\n+  tree di_ftype_v2si_v2si = build_function_type_list (intDI_type_node,\n+\t\t\t\t\t\t      v2si, v2si, 0);\n   tree void_ftype_di = build_function_type_list (void_type_node,\n \t\t\t\t\t\t intDI_type_node, 0);\n   tree di_ftype_void = build_function_type_list (intDI_type_node,\n@@ -9247,17 +9283,17 @@ sparc_vis_init_builtins (void)\n   if (TARGET_ARCH64)\n     {\n       def_builtin_const (\"__builtin_vis_edge8\", CODE_FOR_edge8di_vis,\n-\t\t\t si_ftype_ptr_ptr);\n+\t\t\t di_ftype_ptr_ptr);\n       def_builtin_const (\"__builtin_vis_edge8l\", CODE_FOR_edge8ldi_vis,\n-\t\t\t si_ftype_ptr_ptr);\n+\t\t\t di_ftype_ptr_ptr);\n       def_builtin_const (\"__builtin_vis_edge16\", CODE_FOR_edge16di_vis,\n-\t\t\t si_ftype_ptr_ptr);\n+\t\t\t di_ftype_ptr_ptr);\n       def_builtin_const (\"__builtin_vis_edge16l\", CODE_FOR_edge16ldi_vis,\n-\t\t\t si_ftype_ptr_ptr);\n+\t\t\t di_ftype_ptr_ptr);\n       def_builtin_const (\"__builtin_vis_edge32\", CODE_FOR_edge32di_vis,\n-\t\t\t si_ftype_ptr_ptr);\n+\t\t\t di_ftype_ptr_ptr);\n       def_builtin_const (\"__builtin_vis_edge32l\", CODE_FOR_edge32ldi_vis,\n-\t\t\t si_ftype_ptr_ptr);\n+\t\t\t di_ftype_ptr_ptr);\n     }\n   else\n     {\n@@ -9275,22 +9311,45 @@ sparc_vis_init_builtins (void)\n \t\t\t si_ftype_ptr_ptr);\n     }\n \n-  def_builtin_const (\"__builtin_vis_fcmple16\", CODE_FOR_fcmple16_vis,\n-\t\t     si_ftype_v4hi_v4hi);\n-  def_builtin_const (\"__builtin_vis_fcmple32\", CODE_FOR_fcmple32_vis,\n-\t\t     si_ftype_v2si_v2si);\n-  def_builtin_const (\"__builtin_vis_fcmpne16\", CODE_FOR_fcmpne16_vis,\n-\t\t     si_ftype_v4hi_v4hi);\n-  def_builtin_const (\"__builtin_vis_fcmpne32\", CODE_FOR_fcmpne32_vis,\n-\t\t     si_ftype_v2si_v2si);\n-  def_builtin_const (\"__builtin_vis_fcmpgt16\", CODE_FOR_fcmpgt16_vis,\n-\t\t     si_ftype_v4hi_v4hi);\n-  def_builtin_const (\"__builtin_vis_fcmpgt32\", CODE_FOR_fcmpgt32_vis,\n-\t\t     si_ftype_v2si_v2si);\n-  def_builtin_const (\"__builtin_vis_fcmpeq16\", CODE_FOR_fcmpeq16_vis,\n-\t\t     si_ftype_v4hi_v4hi);\n-  def_builtin_const (\"__builtin_vis_fcmpeq32\", CODE_FOR_fcmpeq32_vis,\n-\t\t     si_ftype_v2si_v2si);\n+  /* Pixel compare.  */\n+  if (TARGET_ARCH64)\n+    {\n+      def_builtin_const (\"__builtin_vis_fcmple16\", CODE_FOR_fcmple16di_vis,\n+\t\t\t di_ftype_v4hi_v4hi);\n+      def_builtin_const (\"__builtin_vis_fcmple32\", CODE_FOR_fcmple32di_vis,\n+\t\t\t di_ftype_v2si_v2si);\n+      def_builtin_const (\"__builtin_vis_fcmpne16\", CODE_FOR_fcmpne16di_vis,\n+\t\t\t di_ftype_v4hi_v4hi);\n+      def_builtin_const (\"__builtin_vis_fcmpne32\", CODE_FOR_fcmpne32di_vis,\n+\t\t\t di_ftype_v2si_v2si);\n+      def_builtin_const (\"__builtin_vis_fcmpgt16\", CODE_FOR_fcmpgt16di_vis,\n+\t\t\t di_ftype_v4hi_v4hi);\n+      def_builtin_const (\"__builtin_vis_fcmpgt32\", CODE_FOR_fcmpgt32di_vis,\n+\t\t\t di_ftype_v2si_v2si);\n+      def_builtin_const (\"__builtin_vis_fcmpeq16\", CODE_FOR_fcmpeq16di_vis,\n+\t\t\t di_ftype_v4hi_v4hi);\n+      def_builtin_const (\"__builtin_vis_fcmpeq32\", CODE_FOR_fcmpeq32di_vis,\n+\t\t\t di_ftype_v2si_v2si);\n+    }\n+  else\n+    {\n+      def_builtin_const (\"__builtin_vis_fcmple16\", CODE_FOR_fcmple16si_vis,\n+\t\t\t si_ftype_v4hi_v4hi);\n+      def_builtin_const (\"__builtin_vis_fcmple32\", CODE_FOR_fcmple32si_vis,\n+\t\t\t si_ftype_v2si_v2si);\n+      def_builtin_const (\"__builtin_vis_fcmpne16\", CODE_FOR_fcmpne16si_vis,\n+\t\t\t si_ftype_v4hi_v4hi);\n+      def_builtin_const (\"__builtin_vis_fcmpne32\", CODE_FOR_fcmpne32si_vis,\n+\t\t\t si_ftype_v2si_v2si);\n+      def_builtin_const (\"__builtin_vis_fcmpgt16\", CODE_FOR_fcmpgt16si_vis,\n+\t\t\t si_ftype_v4hi_v4hi);\n+      def_builtin_const (\"__builtin_vis_fcmpgt32\", CODE_FOR_fcmpgt32si_vis,\n+\t\t\t si_ftype_v2si_v2si);\n+      def_builtin_const (\"__builtin_vis_fcmpeq16\", CODE_FOR_fcmpeq16si_vis,\n+\t\t\t si_ftype_v4hi_v4hi);\n+      def_builtin_const (\"__builtin_vis_fcmpeq32\", CODE_FOR_fcmpeq32si_vis,\n+\t\t\t si_ftype_v2si_v2si);\n+    }\n }\n \n /* Handle TARGET_EXPAND_BUILTIN target hook."}, {"sha": "6e38298e5a3b13715970c8de4f812cd324011f83", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8bbba89e8db9b585dd0d3935ffef5e77920d5a/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8bbba89e8db9b585dd0d3935ffef5e77920d5a/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=cb8bbba89e8db9b585dd0d3935ffef5e77920d5a", "patch": "@@ -8088,8 +8088,8 @@\n         (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n \t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n \t\t\t (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE8))]\n+   (set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (unspec:P [(match_dup 1) (match_dup 2)] UNSPEC_EDGE8))]\n   \"TARGET_VIS\"\n   \"edge8\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"edge\")])\n@@ -8099,8 +8099,8 @@\n         (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n \t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n \t\t\t (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE8L))]\n+   (set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (unspec:P [(match_dup 1) (match_dup 2)] UNSPEC_EDGE8L))]\n   \"TARGET_VIS\"\n   \"edge8l\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"edge\")])\n@@ -8110,8 +8110,8 @@\n         (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n \t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n \t\t\t (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE16))]\n+   (set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (unspec:P [(match_dup 1) (match_dup 2)] UNSPEC_EDGE16))]\n   \"TARGET_VIS\"\n   \"edge16\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"edge\")])\n@@ -8121,8 +8121,8 @@\n         (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n \t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n \t\t\t (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE16L))]\n+   (set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (unspec:P [(match_dup 1) (match_dup 2)] UNSPEC_EDGE16L))]\n   \"TARGET_VIS\"\n   \"edge16l\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"edge\")])\n@@ -8132,8 +8132,8 @@\n         (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n \t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n \t\t\t (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE32))]\n+   (set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (unspec:P [(match_dup 1) (match_dup 2)] UNSPEC_EDGE32))]\n   \"TARGET_VIS\"\n   \"edge32\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"edge\")])\n@@ -8143,85 +8143,85 @@\n         (compare:CC_NOOV (minus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n \t\t\t  \t  (match_operand:P 2 \"register_operand\" \"rJ\"))\n \t\t\t (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE32L))]\n+   (set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (unspec:P [(match_dup 1) (match_dup 2)] UNSPEC_EDGE32L))]\n   \"TARGET_VIS\"\n   \"edge32l\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"edge\")])\n \n-(define_insn \"fcmple16_vis\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-  \t(unspec:SI [(match_operand:V4HI 1 \"register_operand\" \"e\")\n-\t\t    (match_operand:V4HI 2 \"register_operand\" \"e\")]\n+(define_insn \"fcmple16<P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+  \t(unspec:P [(match_operand:V4HI 1 \"register_operand\" \"e\")\n+\t\t   (match_operand:V4HI 2 \"register_operand\" \"e\")]\n \t UNSPEC_FCMPLE))]\n   \"TARGET_VIS\"\n   \"fcmple16\\t%1, %2, %0\"\n   [(set_attr \"type\" \"fpmul\")\n    (set_attr \"fptype\" \"double\")])\n \n-(define_insn \"fcmple32_vis\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-  \t(unspec:SI [(match_operand:V2SI 1 \"register_operand\" \"e\")\n-\t\t    (match_operand:V2SI 2 \"register_operand\" \"e\")]\n+(define_insn \"fcmple32<P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+  \t(unspec:P [(match_operand:V2SI 1 \"register_operand\" \"e\")\n+\t\t   (match_operand:V2SI 2 \"register_operand\" \"e\")]\n \t UNSPEC_FCMPLE))]\n   \"TARGET_VIS\"\n   \"fcmple32\\t%1, %2, %0\"\n   [(set_attr \"type\" \"fpmul\")\n    (set_attr \"fptype\" \"double\")])\n \n-(define_insn \"fcmpne16_vis\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-  \t(unspec:SI [(match_operand:V4HI 1 \"register_operand\" \"e\")\n-\t\t    (match_operand:V4HI 2 \"register_operand\" \"e\")]\n+(define_insn \"fcmpne16<P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+  \t(unspec:P [(match_operand:V4HI 1 \"register_operand\" \"e\")\n+\t\t   (match_operand:V4HI 2 \"register_operand\" \"e\")]\n \t UNSPEC_FCMPNE))]\n   \"TARGET_VIS\"\n   \"fcmpne16\\t%1, %2, %0\"\n   [(set_attr \"type\" \"fpmul\")\n    (set_attr \"fptype\" \"double\")])\n \n-(define_insn \"fcmpne32_vis\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-  \t(unspec:SI [(match_operand:V2SI 1 \"register_operand\" \"e\")\n-\t\t    (match_operand:V2SI 2 \"register_operand\" \"e\")]\n+(define_insn \"fcmpne32<P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+  \t(unspec:P [(match_operand:V2SI 1 \"register_operand\" \"e\")\n+\t\t   (match_operand:V2SI 2 \"register_operand\" \"e\")]\n \t UNSPEC_FCMPNE))]\n   \"TARGET_VIS\"\n   \"fcmpne32\\t%1, %2, %0\"\n   [(set_attr \"type\" \"fpmul\")\n    (set_attr \"fptype\" \"double\")])\n \n-(define_insn \"fcmpgt16_vis\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-  \t(unspec:SI [(match_operand:V4HI 1 \"register_operand\" \"e\")\n-\t\t    (match_operand:V4HI 2 \"register_operand\" \"e\")]\n+(define_insn \"fcmpgt16<P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+  \t(unspec:P [(match_operand:V4HI 1 \"register_operand\" \"e\")\n+\t\t   (match_operand:V4HI 2 \"register_operand\" \"e\")]\n \t UNSPEC_FCMPGT))]\n   \"TARGET_VIS\"\n   \"fcmpgt16\\t%1, %2, %0\"\n   [(set_attr \"type\" \"fpmul\")\n    (set_attr \"fptype\" \"double\")])\n \n-(define_insn \"fcmpgt32_vis\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-  \t(unspec:SI [(match_operand:V2SI 1 \"register_operand\" \"e\")\n-\t\t    (match_operand:V2SI 2 \"register_operand\" \"e\")]\n+(define_insn \"fcmpgt32<P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+  \t(unspec:P [(match_operand:V2SI 1 \"register_operand\" \"e\")\n+\t\t   (match_operand:V2SI 2 \"register_operand\" \"e\")]\n \t UNSPEC_FCMPGT))]\n   \"TARGET_VIS\"\n   \"fcmpgt32\\t%1, %2, %0\"\n   [(set_attr \"type\" \"fpmul\")\n    (set_attr \"fptype\" \"double\")])\n \n-(define_insn \"fcmpeq16_vis\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-  \t(unspec:SI [(match_operand:V4HI 1 \"register_operand\" \"e\")\n-\t\t    (match_operand:V4HI 2 \"register_operand\" \"e\")]\n+(define_insn \"fcmpeq16<P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+  \t(unspec:P [(match_operand:V4HI 1 \"register_operand\" \"e\")\n+\t\t   (match_operand:V4HI 2 \"register_operand\" \"e\")]\n \t UNSPEC_FCMPEQ))]\n   \"TARGET_VIS\"\n   \"fcmpeq16\\t%1, %2, %0\"\n   [(set_attr \"type\" \"fpmul\")\n    (set_attr \"fptype\" \"double\")])\n \n-(define_insn \"fcmpeq32_vis\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-  \t(unspec:SI [(match_operand:V2SI 1 \"register_operand\" \"e\")\n+(define_insn \"fcmpeq32<P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+  \t(unspec:P [(match_operand:V2SI 1 \"register_operand\" \"e\")\n \t\t    (match_operand:V2SI 2 \"register_operand\" \"e\")]\n \t UNSPEC_FCMPEQ))]\n   \"TARGET_VIS\""}, {"sha": "d37bd95188d4de3501eaf0470f90c0f9f77cbc4e", "filename": "gcc/config/sparc/visintrin.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8bbba89e8db9b585dd0d3935ffef5e77920d5a/gcc%2Fconfig%2Fsparc%2Fvisintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8bbba89e8db9b585dd0d3935ffef5e77920d5a/gcc%2Fconfig%2Fsparc%2Fvisintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvisintrin.h?ref=cb8bbba89e8db9b585dd0d3935ffef5e77920d5a", "patch": "@@ -178,98 +178,98 @@ __vis_pdist (__v8qi __A, __v8qi __B, __i64 __C)\n   return __builtin_vis_pdist (__A, __B, __C);\n }\n \n-extern __inline int\n+extern __inline long\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n __vis_edge8 (void *__A, void *__B)\n {\n   return __builtin_vis_edge8 (__A, __B);\n }\n \n-extern __inline int\n+extern __inline long\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n __vis_edge8l (void *__A, void *__B)\n {\n   return __builtin_vis_edge8l (__A, __B);\n }\n \n-extern __inline int\n+extern __inline long\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n __vis_edge16 (void *__A, void *__B)\n {\n   return __builtin_vis_edge16 (__A, __B);\n }\n \n-extern __inline int\n+extern __inline long\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n __vis_edge16l (void *__A, void *__B)\n {\n   return __builtin_vis_edge16l (__A, __B);\n }\n \n-extern __inline int\n+extern __inline long\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n __vis_edge32 (void *__A, void *__B)\n {\n   return __builtin_vis_edge32 (__A, __B);\n }\n \n-extern __inline int\n+extern __inline long\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n __vis_edge32l (void *__A, void *__B)\n {\n   return __builtin_vis_edge32l (__A, __B);\n }\n \n-extern __inline int\n+extern __inline long\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n __vis_fcmple16 (__v4hi __A, __v4hi __B)\n {\n   return __builtin_vis_fcmple16 (__A, __B);\n }\n \n-extern __inline int\n+extern __inline long\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n __vis_fcmple32 (__v2si __A, __v2si __B)\n {\n   return __builtin_vis_fcmple32 (__A, __B);\n }\n \n-extern __inline int\n+extern __inline long\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n __vis_fcmpne16 (__v4hi __A, __v4hi __B)\n {\n   return __builtin_vis_fcmpne16 (__A, __B);\n }\n \n-extern __inline int\n+extern __inline long\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n __vis_fcmpne32 (__v2si __A, __v2si __B)\n {\n   return __builtin_vis_fcmpne32 (__A, __B);\n }\n \n-extern __inline int\n+extern __inline long\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n __vis_fcmpgt16 (__v4hi __A, __v4hi __B)\n {\n   return __builtin_vis_fcmpgt16 (__A, __B);\n }\n \n-extern __inline int\n+extern __inline long\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n __vis_fcmpgt32 (__v2si __A, __v2si __B)\n {\n   return __builtin_vis_fcmpgt32 (__A, __B);\n }\n \n-extern __inline int\n+extern __inline long\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n __vis_fcmpeq16 (__v4hi __A, __v4hi __B)\n {\n   return __builtin_vis_fcmpeq16 (__A, __B);\n }\n \n-extern __inline int\n+extern __inline long\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n __vis_fcmpeq32 (__v2si __A, __v2si __B)\n {"}, {"sha": "e9d0bc7d8a34a899be2bf52cf5d01c50b91a6afd", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8bbba89e8db9b585dd0d3935ffef5e77920d5a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8bbba89e8db9b585dd0d3935ffef5e77920d5a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=cb8bbba89e8db9b585dd0d3935ffef5e77920d5a", "patch": "@@ -12962,21 +12962,21 @@ v8qi __builtin_vis_fpmerge (v4qi, v4qi);\n \n int64_t __builtin_vis_pdist (v8qi, v8qi, int64_t);\n \n-int __builtin_vis_edge8 (void *, void *);\n-int __builtin_vis_edge8l (void *, void *);\n-int __builtin_vis_edge16 (void *, void *);\n-int __builtin_vis_edge16l (void *, void *);\n-int __builtin_vis_edge32 (void *, void *);\n-int __builtin_vis_edge32l (void *, void *);\n-\n-int __builtin_vis_fcmple16 (v4hi, v4hi);\n-int __builtin_vis_fcmple32 (v2si, v2si);\n-int __builtin_vis_fcmpne16 (v4hi, v4hi);\n-int __builtin_vis_fcmpne32 (v2si, v2si);\n-int __builtin_vis_fcmpgt16 (v4hi, v4hi);\n-int __builtin_vis_fcmpgt32 (v2si, v2si);\n-int __builtin_vis_fcmpeq16 (v4hi, v4hi);\n-int __builtin_vis_fcmpeq32 (v2si, v2si);\n+long __builtin_vis_edge8 (void *, void *);\n+long __builtin_vis_edge8l (void *, void *);\n+long __builtin_vis_edge16 (void *, void *);\n+long __builtin_vis_edge16l (void *, void *);\n+long __builtin_vis_edge32 (void *, void *);\n+long __builtin_vis_edge32l (void *, void *);\n+\n+long __builtin_vis_fcmple16 (v4hi, v4hi);\n+long __builtin_vis_fcmple32 (v2si, v2si);\n+long __builtin_vis_fcmpne16 (v4hi, v4hi);\n+long __builtin_vis_fcmpne32 (v2si, v2si);\n+long __builtin_vis_fcmpgt16 (v4hi, v4hi);\n+long __builtin_vis_fcmpgt32 (v2si, v2si);\n+long __builtin_vis_fcmpeq16 (v4hi, v4hi);\n+long __builtin_vis_fcmpeq32 (v2si, v2si);\n @end smallexample\n \n @node SPU Built-in Functions"}, {"sha": "ebc9385a111d45f61b9f8f30e8c40f2a22c46bbe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8bbba89e8db9b585dd0d3935ffef5e77920d5a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8bbba89e8db9b585dd0d3935ffef5e77920d5a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb8bbba89e8db9b585dd0d3935ffef5e77920d5a", "patch": "@@ -11,6 +11,9 @@\n \t* gcc.target/sparc/edge.c: New test.\n \t* gcc.target/sparc/fcmp.c: New test.\n \n+\t* gcc.target/sparc/edge.c: Update for new return types.\n+\t* gcc.target/sparc/fcmp.c: Likewise.\n+\n 2011-09-26  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/50515"}, {"sha": "81d8d88563cb60d5e9b1768df5471652a5c08c2c", "filename": "gcc/testsuite/gcc.target/sparc/edge.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8bbba89e8db9b585dd0d3935ffef5e77920d5a/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8bbba89e8db9b585dd0d3935ffef5e77920d5a/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fedge.c?ref=cb8bbba89e8db9b585dd0d3935ffef5e77920d5a", "patch": "@@ -1,32 +1,32 @@\n /* { dg-do compile } */\n /* { dg-options \"-O -mcpu=ultrasparc -mvis\" } */\n \n-int test_edge8 (void *p1, void *p2)\n+long test_edge8 (void *p1, void *p2)\n {\n   return __builtin_vis_edge8 (p1, p2);\n }\n \n-int test_edge8l (void *p1, void *p2)\n+long test_edge8l (void *p1, void *p2)\n {\n   return __builtin_vis_edge8l (p1, p2);\n }\n \n-int test_edge16 (void *p1, void *p2)\n+long test_edge16 (void *p1, void *p2)\n {\n   return __builtin_vis_edge16 (p1, p2);\n }\n \n-int test_edge16l (void *p1, void *p2)\n+long test_edge16l (void *p1, void *p2)\n {\n   return __builtin_vis_edge16l (p1, p2);\n }\n \n-int test_edge32 (void *p1, void *p2)\n+long test_edge32 (void *p1, void *p2)\n {\n   return __builtin_vis_edge32 (p1, p2);\n }\n \n-int test_edge32l (void *p1, void *p2)\n+long test_edge32l (void *p1, void *p2)\n {\n   return __builtin_vis_edge32l (p1, p2);\n }"}, {"sha": "959a674e1e772b656a59082b629bb9bd73513910", "filename": "gcc/testsuite/gcc.target/sparc/fcmp.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8bbba89e8db9b585dd0d3935ffef5e77920d5a/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8bbba89e8db9b585dd0d3935ffef5e77920d5a/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffcmp.c?ref=cb8bbba89e8db9b585dd0d3935ffef5e77920d5a", "patch": "@@ -3,42 +3,42 @@\n typedef int vec32 __attribute__((vector_size(8)));\n typedef short vec16 __attribute__((vector_size(8)));\n \n-int test_fcmple16 (vec16 a, vec16 b)\n+long test_fcmple16 (vec16 a, vec16 b)\n {\n   return __builtin_vis_fcmple16 (a, b);\n }\n \n-int test_fcmple32 (vec32 a, vec32 b)\n+long test_fcmple32 (vec32 a, vec32 b)\n {\n   return __builtin_vis_fcmple32 (a, b);\n }\n \n-int test_fcmpne16 (vec16 a, vec16 b)\n+long test_fcmpne16 (vec16 a, vec16 b)\n {\n   return __builtin_vis_fcmpne16 (a, b);\n }\n \n-int test_fcmpne32 (vec32 a, vec32 b)\n+long test_fcmpne32 (vec32 a, vec32 b)\n {\n   return __builtin_vis_fcmpne32 (a, b);\n }\n \n-int test_fcmpgt16 (vec16 a, vec16 b)\n+long test_fcmpgt16 (vec16 a, vec16 b)\n {\n   return __builtin_vis_fcmpgt16 (a, b);\n }\n \n-int test_fcmpgt32 (vec32 a, vec32 b)\n+long test_fcmpgt32 (vec32 a, vec32 b)\n {\n   return __builtin_vis_fcmpgt32 (a, b);\n }\n \n-int test_fcmpeq16 (vec16 a, vec16 b)\n+long test_fcmpeq16 (vec16 a, vec16 b)\n {\n   return __builtin_vis_fcmpeq16 (a, b);\n }\n \n-int test_fcmpeq32 (vec32 a, vec32 b)\n+long test_fcmpeq32 (vec32 a, vec32 b)\n {\n   return __builtin_vis_fcmpeq32 (a, b);\n }"}]}