{"sha": "bbd07239326b4a507d872b193b110f1afd542455", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJkMDcyMzkzMjZiNGE1MDdkODcyYjE5M2IxMTBmMWFmZDU0MjQ1NQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2010-05-29T14:16:11Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2010-05-29T14:16:11Z"}, "message": "re PR target/44261 (Multiplying -1 by NaN is not valid.)\n\n\tPR target/44261\n\tconfig/pa/pa.md (negdf2_slow, negsf2_slow): New patterns.\n\t(negdf2): Adjust expander pattern and use negdf2_slow.\n\t(negsf2): Likewise.\n\nFrom-SVN: r160027", "tree": {"sha": "b6669125b9b31f6b767c0d1492509b6a65ac767f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6669125b9b31f6b767c0d1492509b6a65ac767f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbd07239326b4a507d872b193b110f1afd542455", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbd07239326b4a507d872b193b110f1afd542455", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbd07239326b4a507d872b193b110f1afd542455", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbd07239326b4a507d872b193b110f1afd542455/comments", "author": null, "committer": null, "parents": [{"sha": "673c6299d6e26ca661faa388f54fc1a1cfb07b04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/673c6299d6e26ca661faa388f54fc1a1cfb07b04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/673c6299d6e26ca661faa388f54fc1a1cfb07b04"}], "stats": {"total": 64, "additions": 44, "deletions": 20}, "files": [{"sha": "5ac55b6fdb46a6b84ee44099bbe3095a8a54f448", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd07239326b4a507d872b193b110f1afd542455/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd07239326b4a507d872b193b110f1afd542455/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbd07239326b4a507d872b193b110f1afd542455", "patch": "@@ -1,3 +1,10 @@\n+2010-05-29  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR target/44261\n+\tconfig/pa/pa.md (negdf2_slow, negsf2_slow): New patterns.\n+\t(negdf2): Adjust expander pattern and use negdf2_slow.\n+\t(negsf2): Likewise.\n+\n 2010-05-29  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* basic-block.h (struct control_flow_graph): Move last_label_uid field up."}, {"sha": "c189ca2d6ceafd768abd99e829d9311cb9484e90", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 37, "deletions": 20, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd07239326b4a507d872b193b110f1afd542455/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd07239326b4a507d872b193b110f1afd542455/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=bbd07239326b4a507d872b193b110f1afd542455", "patch": "@@ -5976,27 +5976,41 @@\n ;; Processors prior to PA 2.0 don't have a fneg instruction.  Fast\n ;; negation can be done by subtracting from plus zero.  However, this\n ;; violates the IEEE standard when negating plus and minus zero.\n+;; The slow path toggles the sign bit in the general registers.\n (define_expand \"negdf2\"\n-  [(parallel [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t\t   (neg:DF (match_operand:DF 1 \"register_operand\" \"\")))\n-\t      (use (match_dup 2))])]\n-  \"! TARGET_SOFT_FLOAT\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(neg:DF (match_operand:DF 1 \"register_operand\" \"\")))]\n+  \"!TARGET_SOFT_FLOAT\"\n {\n   if (TARGET_PA_20 || flag_unsafe_math_optimizations)\n     emit_insn (gen_negdf2_fast (operands[0], operands[1]));\n   else\n-    {\n-      operands[2] = force_reg (DFmode,\n-\tCONST_DOUBLE_FROM_REAL_VALUE (dconstm1, DFmode));\n-      emit_insn (gen_muldf3 (operands[0], operands[1], operands[2]));\n-    }\n+    emit_insn (gen_negdf2_slow (operands[0], operands[1]));\n   DONE;\n })\n \n+(define_insn \"negdf2_slow\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=r\")\n+\t(neg:DF (match_operand:DF 1 \"register_operand\" \"r\")))]\n+  \"!TARGET_SOFT_FLOAT && !TARGET_PA_20\"\n+  \"*\n+{\n+  if (rtx_equal_p (operands[0], operands[1]))\n+    return \\\"and,< %1,%1,%0\\;depi,tr 1,0,1,%0\\;depi 0,0,1,%0\\\";\n+  else\n+    return \\\"and,< %1,%1,%0\\;depi,tr 1,0,1,%0\\;depi 0,0,1,%0\\;copy %R1,%R0\\\";\n+}\"\n+  [(set_attr \"type\" \"multi\")\n+   (set (attr \"length\")\n+\t(if_then_else (ne (symbol_ref \"rtx_equal_p (operands[0], operands[1])\")\n+\t\t\t  (const_int 0))\n+\t    (const_int 12)\n+\t    (const_int 16)))])\n+\n (define_insn \"negdf2_fast\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(neg:DF (match_operand:DF 1 \"register_operand\" \"f\")))]\n-  \"! TARGET_SOFT_FLOAT && (TARGET_PA_20 || flag_unsafe_math_optimizations)\"\n+  \"!TARGET_SOFT_FLOAT\"\n   \"*\n {\n   if (TARGET_PA_20)\n@@ -6008,26 +6022,29 @@\n    (set_attr \"length\" \"4\")])\n \n (define_expand \"negsf2\"\n-  [(parallel [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t\t   (neg:SF (match_operand:SF 1 \"register_operand\" \"\")))\n-\t      (use (match_dup 2))])]\n-  \"! TARGET_SOFT_FLOAT\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(neg:SF (match_operand:SF 1 \"register_operand\" \"\")))]\n+  \"!TARGET_SOFT_FLOAT\"\n {\n   if (TARGET_PA_20 || flag_unsafe_math_optimizations)\n     emit_insn (gen_negsf2_fast (operands[0], operands[1]));\n   else\n-    {\n-      operands[2] = force_reg (SFmode,\n-\tCONST_DOUBLE_FROM_REAL_VALUE (dconstm1, SFmode));\n-      emit_insn (gen_mulsf3 (operands[0], operands[1], operands[2]));\n-    }\n+    emit_insn (gen_negsf2_slow (operands[0], operands[1]));\n   DONE;\n })\n \n+(define_insn \"negsf2_slow\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=r\")\n+\t(neg:SF (match_operand:SF 1 \"register_operand\" \"r\")))]\n+  \"!TARGET_SOFT_FLOAT && !TARGET_PA_20\"\n+  \"and,< %1,%1,%0\\;depi,tr 1,0,1,%0\\;depi 0,0,1,%0\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"12\")])\n+\n (define_insn \"negsf2_fast\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(neg:SF (match_operand:SF 1 \"register_operand\" \"f\")))]\n-  \"! TARGET_SOFT_FLOAT && (TARGET_PA_20 || flag_unsafe_math_optimizations)\"\n+  \"!TARGET_SOFT_FLOAT\"\n   \"*\n {\n   if (TARGET_PA_20)"}]}