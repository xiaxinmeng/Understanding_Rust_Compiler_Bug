{"sha": "e53bb1965db9c7882ded4a70296340d8db52053a", "node_id": "C_kwDOANBUbNoAKGU1M2JiMTk2NWRiOWM3ODgyZGVkNGE3MDI5NjM0MGQ4ZGI1MjA1M2E", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-02-25T01:03:32Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-02-25T01:03:32Z"}, "message": "Copy EH phi args for throwing hardened compares\n\nWhen we duplicate a throwing compare for hardening, the EH edge from\nthe original compare gets duplicated for the inverted compare, but we\nfailed to adjust any PHI nodes in the EH block.  This patch adds the\nneeded adjustment, copying the PHI args from those of the preexisting\nedge.\n\n\nfor  gcc/ChangeLog\n\n\tPR tree-optimization/103856\n\t* gimple-harden-conditionals.cc (non_eh_succ_edge): Enable the\n\teh edge to be requested through an extra parameter.\n\t(pass_harden_compares::execute): Copy PHI args in the EH dest\n\tblock for the new EH edge added for the inverted compare.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR tree-optimization/103856\n\t* g++.dg/pr103856.C: New.", "tree": {"sha": "344b592f8562c46ed3e888a2212d28e86b8203b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/344b592f8562c46ed3e888a2212d28e86b8203b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e53bb1965db9c7882ded4a70296340d8db52053a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53bb1965db9c7882ded4a70296340d8db52053a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e53bb1965db9c7882ded4a70296340d8db52053a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53bb1965db9c7882ded4a70296340d8db52053a/comments", "author": null, "committer": null, "parents": [{"sha": "756a61851c11ffb6b5bcc21f147f6f102bf8e1f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/756a61851c11ffb6b5bcc21f147f6f102bf8e1f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/756a61851c11ffb6b5bcc21f147f6f102bf8e1f3"}], "stats": {"total": 48, "additions": 45, "deletions": 3}, "files": [{"sha": "6a5fc3fb9e1a27c4feaf0df70374210b5b3b5260", "filename": "gcc/gimple-harden-conditionals.cc", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53bb1965db9c7882ded4a70296340d8db52053a/gcc%2Fgimple-harden-conditionals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53bb1965db9c7882ded4a70296340d8db52053a/gcc%2Fgimple-harden-conditionals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-harden-conditionals.cc?ref=e53bb1965db9c7882ded4a70296340d8db52053a", "patch": "@@ -361,9 +361,9 @@ make_pass_harden_conditional_branches (gcc::context *ctxt)\n }\n \n /* Return the fallthru edge of a block whose other edge is an EH\n-   edge.  */\n+   edge.  If EHP is not NULL, store the EH edge in it.  */\n static inline edge\n-non_eh_succ_edge (basic_block bb)\n+non_eh_succ_edge (basic_block bb, edge *ehp = NULL)\n {\n   gcc_checking_assert (EDGE_COUNT (bb->succs) == 2);\n \n@@ -375,6 +375,9 @@ non_eh_succ_edge (basic_block bb)\n   gcc_checking_assert (!(ret->flags & EDGE_EH)\n \t\t       && (eh->flags & EDGE_EH));\n \n+  if (ehp)\n+    *ehp = eh;\n+\n   return ret;\n }\n \n@@ -538,15 +541,37 @@ pass_harden_compares::execute (function *fun)\n \t    add_stmt_to_eh_lp (asgnck, lookup_stmt_eh_lp (asgn));\n \t    make_eh_edges (asgnck);\n \n+\t    edge ckeh;\n \t    basic_block nbb = split_edge (non_eh_succ_edge\n-\t\t\t\t\t  (gimple_bb (asgnck)));\n+\t\t\t\t\t  (gimple_bb (asgnck), &ckeh));\n \t    gsi_split = gsi_start_bb (nbb);\n \n \t    if (dump_file)\n \t      fprintf (dump_file,\n \t\t       \"Splitting non-EH edge from block %i into %i after\"\n \t\t       \" the newly-inserted reversed throwing compare\\n\",\n \t\t       gimple_bb (asgnck)->index, nbb->index);\n+\n+\t    if (!gimple_seq_empty_p (phi_nodes (ckeh->dest)))\n+\t      {\n+\t\tedge aseh;\n+\t\tnon_eh_succ_edge (gimple_bb (asgn), &aseh);\n+\n+\t\tgcc_checking_assert (aseh->dest == ckeh->dest);\n+\n+\t\tfor (gphi_iterator psi = gsi_start_phis (ckeh->dest);\n+\t\t     !gsi_end_p (psi); gsi_next (&psi))\n+\t\t  {\n+\t\t    gphi *phi = psi.phi ();\n+\t\t    add_phi_arg (phi, PHI_ARG_DEF_FROM_EDGE (phi, aseh), ckeh,\n+\t\t\t\t gimple_phi_arg_location_from_edge (phi, aseh));\n+\t\t  }\n+\n+\t\tif (dump_file)\n+\t\t  fprintf (dump_file,\n+\t\t\t   \"Copying PHI args in EH block %i from %i to %i\\n\",\n+\t\t\t   aseh->dest->index, aseh->src->index, ckeh->src->index);\n+\t      }\n \t  }\n \n \tgcc_checking_assert (single_succ_p (gsi_bb (gsi_split)));"}, {"sha": "26c7d8750255ae4fd44231c334920552d8dffe8a", "filename": "gcc/testsuite/g++.dg/pr103856.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53bb1965db9c7882ded4a70296340d8db52053a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr103856.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53bb1965db9c7882ded4a70296340d8db52053a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr103856.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr103856.C?ref=e53bb1965db9c7882ded4a70296340d8db52053a", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Og -fnon-call-exceptions -fsignaling-nans -fharden-compares\" } */\n+\n+struct S {\n+  S(float);\n+  S();\n+  operator float();\n+  ~S() {}\n+};\n+\n+int\n+main() {\n+  S s_arr[] = {2};\n+  S var1;\n+  if (var1)\n+    ;\n+}"}]}