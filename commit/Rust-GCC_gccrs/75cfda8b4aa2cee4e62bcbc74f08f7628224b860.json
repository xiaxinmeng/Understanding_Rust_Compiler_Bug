{"sha": "75cfda8b4aa2cee4e62bcbc74f08f7628224b860", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVjZmRhOGI0YWEyY2VlNGU2MmJjYmM3NGYwOGY3NjI4MjI0Yjg2MA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2019-07-09T07:55:00Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-09T07:55:00Z"}, "message": "[Ada] Task-related circularities in Elaboration order v4.0\n\nThis patch adds another suggestion to the elaboration order diagnostics.\nAn elaboration circularity involving a task activation may be resolved\nthrough pragma Restrictions (No_Entry_Calls_In_Elaboration_Code).\n\n------------\n-- Source --\n------------\n\n--  no_entry_calls.txt\n\npragma Restrictions (No_Entry_Calls_In_Elaboration_Code);\n\n--  a.ads\n\npackage A is\n   task type Task_Typ is\n      entry Start;\n   end Task_Typ;\n\n   procedure Proc;\nend A;\n\n--  a.adb\n\nwith B;\n\npackage body A is\n   task body Task_Typ is\n   begin\n      accept Start;\n      B.Proc;\n   end Task_Typ;\n\n   Elab : Task_Typ;\n\n   procedure Proc is null;\nend A;\n\n--  b.ads\n\npackage B is\n   procedure Proc;\nend B;\n\n--  b.adb\n\nwith A;\n\npackage body B is\n   procedure Proc is\n   begin\n      A.Proc;\n   end Proc;\nend B;\n\n--  main.adb\n\nwith A;\n\n--  +--> A spec               B spec\n--  |      ^                  ^ ^\n--  |      |        with      | |\n--  |  sbb | +----------------+ | sbb\n--  |      | |                  |\n--  |      | |   Invocation     |\n--  |    A body ------------> B body\n--  |      ^                  | |\n--  |      |     Invocation   | |\n--  |      +------------------+ |\n--  |                           |\n--  |            Invocation     |\n--  +---------------------------+\n--\n--  The cycle is:\n--\n--    A body --> A body\n\nprocedure Main is begin null; end Main;\n\n----------------------------\n-- Compilation and output --\n----------------------------\n\n$ gnatmake -f -q main.adb -gnatd_F\n$ gnatmake -f -q main.adb -gnatec=no_entry_calls.txt\nerror: Elaboration circularity detected\ninfo:\ninfo:    Reason:\ninfo:\ninfo:      unit \"a (body)\" depends on its own elaboration\ninfo:\ninfo:    Circularity:\ninfo:\ninfo:      unit \"a (body)\" invokes a construct of unit \"a (body)\" at\n             elaboration time\ninfo:        path 1:\ninfo:          elaboration of unit \"a (body)\"\ninfo:          activation of local task declared at \"a.ads\":2:14\ninfo:          call to subprogram \"proc\" declared at \"b.ads\":2:14\ninfo:          call to subprogram \"proc\" declared at \"a.ads\":6:14\ninfo:\ninfo:    Suggestions:\ninfo:\ninfo:      use pragma Restrictions (No_Entry_Calls_In_Elaboration_Code)\ninfo:      use the dynamic elaboration model (compiler switch -gnatE)\ninfo:\ngnatmake: *** bind failed.\n\n2019-07-09  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* bindo.ads: Move type Precedence_Kind from the private to the\n\tvisible part of the unit.\n\t* bindo-augmentors.adb: Remove the use of global data as it is\n\tbad practice.\n\t(Augment_Library_Graph): Update the parameter profile.\n\t(Is_Visited, Set_Is_Visited): Remove.\n\t(Visit_Elaboration_Root, Visit_Elaboration_Roots): Update the\n\tparameter profile and comment on usage.\n\t(Visit_Vertex): Likewise.  Also keep track of which invocation\n\tedge activates a task.\n\t* bindo-augmentors.ads (Augment_Library_Graph): Update the\n\tparameter profile and comment on usage.\n\t* bindo-builders.adb (Create_Forced_Edge,\n\tCreate_Spec_And_Body_Edge, Create_With_Edge): Update the call to\n\tAdd_Edge.\n\t* bindo-diagnostics.adb: Add with end use clauses for Restrict\n\tand Rident.\n\t(Output_Dynamic_Model_Suggestions): Remove.\n\t(Output_Invocation_Related_Suggestions): New routine.\n\t(Output_Suggestions): Output all invocation-related suggestions\n\ttogether.\n\t* bindo-elaborators.adb: Remove types Comparator_Ptr and\n\tPredicate_Ptr.\n\t(Find_Best_Vertex): Update the parameter profile.\n\t* bindo-graphs.adb (Activates_Task): New routine.\n\t(Add_Body_Before_Spec_Edge): Update the call to\n\tAdd_Edge_With_Return.\n\t(Add_Edge): Update the parameter profile and the call to\n\tAdd_Edge_With_Return.\n\t(Add_Edge_With_Return): Update the parameter profile and comment\n\ton usage.\n\t(At_Least_One_Edge_Satisfies): New routine.\n\t(Contains_Elaborate_All_Edge): Reimplement.\n\t(Contains_Static_Successor_Edge, Contains_Task_Activation): New\n\troutine.\n\t(Contains_Weak_Static_Successor): Remove.\n\t(Is_Static_Successor_Edge): New routine.\n\t* bindo-graphs.ads: Add types LGE_Predicate_Ptr,\n\tLGV_Comparator_Ptr, and LGV_Predicate_Ptr.  Update type\n\tLibrary_Graph_Edge_Attributes to capture whether an invocation\n\tedge activates a task.  Update the value of\n\tNo_Library_Graph_Edge_Attributes.\n\t(Activates_Task): Update the parameter profile and comment on\n\tusage.\n\t(Contains_Static_Successor_Edge, Contains_Task_Activation): New\n\troutines.\n\t(Contains_Weak_Static_Successor): Remove.\n\t* doc/gnat_ugn/elaboration_order_handling_in_gnat.rst:\n\tUpdate the documentation to reflect the new task-related advice.\n\t* gnat_ugn.texi: Regenerate.\n\nFrom-SVN: r273286", "tree": {"sha": "07a163b714abb986594c5ec235e3910db6b02b05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07a163b714abb986594c5ec235e3910db6b02b05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75cfda8b4aa2cee4e62bcbc74f08f7628224b860", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75cfda8b4aa2cee4e62bcbc74f08f7628224b860", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75cfda8b4aa2cee4e62bcbc74f08f7628224b860", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "727e4d37be92715947de468ebf26b4f1cddc2e66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/727e4d37be92715947de468ebf26b4f1cddc2e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/727e4d37be92715947de468ebf26b4f1cddc2e66"}], "stats": {"total": 690, "additions": 441, "deletions": 249}, "files": [{"sha": "66de5272698c3e78f737534c0485518eedd8088b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=75cfda8b4aa2cee4e62bcbc74f08f7628224b860", "patch": "@@ -1,3 +1,56 @@\n+2019-07-09  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* bindo.ads: Move type Precedence_Kind from the private to the\n+\tvisible part of the unit.\n+\t* bindo-augmentors.adb: Remove the use of global data as it is\n+\tbad practice.\n+\t(Augment_Library_Graph): Update the parameter profile.\n+\t(Is_Visited, Set_Is_Visited): Remove.\n+\t(Visit_Elaboration_Root, Visit_Elaboration_Roots): Update the\n+\tparameter profile and comment on usage.\n+\t(Visit_Vertex): Likewise.  Also keep track of which invocation\n+\tedge activates a task.\n+\t* bindo-augmentors.ads (Augment_Library_Graph): Update the\n+\tparameter profile and comment on usage.\n+\t* bindo-builders.adb (Create_Forced_Edge,\n+\tCreate_Spec_And_Body_Edge, Create_With_Edge): Update the call to\n+\tAdd_Edge.\n+\t* bindo-diagnostics.adb: Add with end use clauses for Restrict\n+\tand Rident.\n+\t(Output_Dynamic_Model_Suggestions): Remove.\n+\t(Output_Invocation_Related_Suggestions): New routine.\n+\t(Output_Suggestions): Output all invocation-related suggestions\n+\ttogether.\n+\t* bindo-elaborators.adb: Remove types Comparator_Ptr and\n+\tPredicate_Ptr.\n+\t(Find_Best_Vertex): Update the parameter profile.\n+\t* bindo-graphs.adb (Activates_Task): New routine.\n+\t(Add_Body_Before_Spec_Edge): Update the call to\n+\tAdd_Edge_With_Return.\n+\t(Add_Edge): Update the parameter profile and the call to\n+\tAdd_Edge_With_Return.\n+\t(Add_Edge_With_Return): Update the parameter profile and comment\n+\ton usage.\n+\t(At_Least_One_Edge_Satisfies): New routine.\n+\t(Contains_Elaborate_All_Edge): Reimplement.\n+\t(Contains_Static_Successor_Edge, Contains_Task_Activation): New\n+\troutine.\n+\t(Contains_Weak_Static_Successor): Remove.\n+\t(Is_Static_Successor_Edge): New routine.\n+\t* bindo-graphs.ads: Add types LGE_Predicate_Ptr,\n+\tLGV_Comparator_Ptr, and LGV_Predicate_Ptr.  Update type\n+\tLibrary_Graph_Edge_Attributes to capture whether an invocation\n+\tedge activates a task.  Update the value of\n+\tNo_Library_Graph_Edge_Attributes.\n+\t(Activates_Task): Update the parameter profile and comment on\n+\tusage.\n+\t(Contains_Static_Successor_Edge, Contains_Task_Activation): New\n+\troutines.\n+\t(Contains_Weak_Static_Successor): Remove.\n+\t* doc/gnat_ugn/elaboration_order_handling_in_gnat.rst:\n+\tUpdate the documentation to reflect the new task-related advice.\n+\t* gnat_ugn.texi: Regenerate.\n+\n 2019-07-09  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* exp_util.adb (Containing_Package_With_Ext_Axioms): Replace"}, {"sha": "bb68a2e4ca5772b91c3ce28c7136bc60dcd09d60", "filename": "gcc/ada/bindo-augmentors.adb", "status": "modified", "additions": 62, "deletions": 84, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/gcc%2Fada%2Fbindo-augmentors.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/gcc%2Fada%2Fbindo-augmentors.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-augmentors.adb?ref=75cfda8b4aa2cee4e62bcbc74f08f7628224b860", "patch": "@@ -37,14 +37,6 @@ package body Bindo.Augmentors is\n \n    package body Library_Graph_Augmentors is\n \n-      -----------------\n-      -- Global data --\n-      -----------------\n-\n-      Inv_Graph : Invocation_Graph        := Invocation_Graphs.Nil;\n-      Lib_Graph : Library_Graph           := Library_Graphs.Nil;\n-      Visited   : IGV_Sets.Membership_Set := IGV_Sets.Nil;\n-\n       ----------------\n       -- Statistics --\n       ----------------\n@@ -61,20 +53,10 @@ package body Bindo.Augmentors is\n       -- Local subprograms --\n       -----------------------\n \n-      function Is_Visited\n-        (Vertex : Invocation_Graph_Vertex_Id) return Boolean;\n-      pragma Inline (Is_Visited);\n-      --  Determine whether invocation graph vertex Vertex has been visited\n-      --  during the traversal.\n-\n-      procedure Set_Is_Visited\n-        (Vertex : Invocation_Graph_Vertex_Id;\n-         Val    : Boolean := True);\n-      pragma Inline (Set_Is_Visited);\n-      --  Mark invocation graph vertex Vertex as visited during the traversal\n-      --  depending on value Val.\n-\n-      procedure Visit_Elaboration_Root (Root : Invocation_Graph_Vertex_Id);\n+      procedure Visit_Elaboration_Root\n+        (Inv_Graph : Invocation_Graph;\n+         Lib_Graph : Library_Graph;\n+         Root      : Invocation_Graph_Vertex_Id);\n       pragma Inline (Visit_Elaboration_Root);\n       --  Start a DFS traversal from elaboration root Root to:\n       --\n@@ -83,7 +65,9 @@ package body Bindo.Augmentors is\n       --    * Create invocation edges for each such transition where the\n       --      successor is Root.\n \n-      procedure Visit_Elaboration_Roots;\n+      procedure Visit_Elaboration_Roots\n+        (Inv_Graph : Invocation_Graph;\n+         Lib_Graph : Library_Graph);\n       pragma Inline (Visit_Elaboration_Roots);\n       --  Start a DFS traversal from all elaboration roots to:\n       --\n@@ -93,9 +77,13 @@ package body Bindo.Augmentors is\n       --      successor is the current root.\n \n       procedure Visit_Vertex\n-        (Invoker                    : Invocation_Graph_Vertex_Id;\n+        (Inv_Graph                  : Invocation_Graph;\n+         Lib_Graph                  : Library_Graph;\n+         Invoker                    : Invocation_Graph_Vertex_Id;\n          Last_Vertex                : Library_Graph_Vertex_Id;\n          Root_Vertex                : Library_Graph_Vertex_Id;\n+         Visited_Invokers           : IGV_Sets.Membership_Set;\n+         Activates_Task             : Boolean;\n          Internal_Controlled_Action : Boolean;\n          Path                       : Natural);\n       pragma Inline (Visit_Vertex);\n@@ -124,86 +112,56 @@ package body Bindo.Augmentors is\n       ---------------------------\n \n       procedure Augment_Library_Graph\n-        (Inv_G : Invocation_Graph;\n-         Lib_G : Library_Graph)\n+        (Inv_Graph : Invocation_Graph;\n+         Lib_Graph : Library_Graph)\n       is\n       begin\n-         pragma Assert (Present (Lib_G));\n+         pragma Assert (Present (Lib_Graph));\n \n          --  Nothing to do when there is no invocation graph\n \n-         if not Present (Inv_G) then\n+         if not Present (Inv_Graph) then\n             return;\n          end if;\n \n-         --  Prepare the global data. Note that Visited is initialized for each\n-         --  elaboration root.\n+         --  Prepare the statistics data\n \n-         Inv_Graph     := Inv_G;\n-         Lib_Graph     := Lib_G;\n          Longest_Path  := 0;\n          Total_Visited := 0;\n \n-         Visit_Elaboration_Roots;\n+         Visit_Elaboration_Roots (Inv_Graph, Lib_Graph);\n          Write_Statistics;\n       end Augment_Library_Graph;\n \n-      ----------------\n-      -- Is_Visited --\n-      ----------------\n-\n-      function Is_Visited\n-        (Vertex : Invocation_Graph_Vertex_Id) return Boolean\n-      is\n-      begin\n-         pragma Assert (IGV_Sets.Present (Visited));\n-         pragma Assert (Present (Vertex));\n-\n-         return IGV_Sets.Contains (Visited, Vertex);\n-      end Is_Visited;\n-\n-      --------------------\n-      -- Set_Is_Visited --\n-      --------------------\n-\n-      procedure Set_Is_Visited\n-        (Vertex : Invocation_Graph_Vertex_Id;\n-         Val    : Boolean := True)\n-      is\n-      begin\n-         pragma Assert (IGV_Sets.Present (Visited));\n-         pragma Assert (Present (Vertex));\n-\n-         if Val then\n-            IGV_Sets.Insert (Visited, Vertex);\n-         else\n-            IGV_Sets.Delete (Visited, Vertex);\n-         end if;\n-      end Set_Is_Visited;\n-\n       ----------------------------\n       -- Visit_Elaboration_Root --\n       ----------------------------\n \n-      procedure Visit_Elaboration_Root (Root : Invocation_Graph_Vertex_Id) is\n+      procedure Visit_Elaboration_Root\n+        (Inv_Graph : Invocation_Graph;\n+         Lib_Graph : Library_Graph;\n+         Root      : Invocation_Graph_Vertex_Id)\n+      is\n          pragma Assert (Present (Inv_Graph));\n-         pragma Assert (Present (Root));\n          pragma Assert (Present (Lib_Graph));\n+         pragma Assert (Present (Root));\n \n          Root_Vertex : constant Library_Graph_Vertex_Id :=\n                          Body_Vertex (Inv_Graph, Root);\n \n-         pragma Assert (Present (Root_Vertex));\n+         Visited : IGV_Sets.Membership_Set;\n \n       begin\n-         --  Prepare the global data\n-\n          Visited := IGV_Sets.Create (Number_Of_Vertices (Inv_Graph));\n \n          Visit_Vertex\n-           (Invoker                    => Root,\n+           (Inv_Graph                  => Inv_Graph,\n+            Lib_Graph                  => Lib_Graph,\n+            Invoker                    => Root,\n             Last_Vertex                => Root_Vertex,\n             Root_Vertex                => Root_Vertex,\n+            Visited_Invokers           => Visited,\n+            Activates_Task             => False,\n             Internal_Controlled_Action => False,\n             Path                       => 0);\n \n@@ -214,18 +172,25 @@ package body Bindo.Augmentors is\n       -- Visit_Elaboration_Roots --\n       -----------------------------\n \n-      procedure Visit_Elaboration_Roots is\n+      procedure Visit_Elaboration_Roots\n+        (Inv_Graph : Invocation_Graph;\n+         Lib_Graph : Library_Graph)\n+      is\n          Iter : Elaboration_Root_Iterator;\n          Root : Invocation_Graph_Vertex_Id;\n \n       begin\n          pragma Assert (Present (Inv_Graph));\n+         pragma Assert (Present (Lib_Graph));\n \n          Iter := Iterate_Elaboration_Roots (Inv_Graph);\n          while Has_Next (Iter) loop\n             Next (Iter, Root);\n \n-            Visit_Elaboration_Root (Root);\n+            Visit_Elaboration_Root\n+              (Inv_Graph => Inv_Graph,\n+               Lib_Graph => Lib_Graph,\n+               Root      => Root);\n          end loop;\n       end Visit_Elaboration_Roots;\n \n@@ -234,15 +199,20 @@ package body Bindo.Augmentors is\n       ------------------\n \n       procedure Visit_Vertex\n-        (Invoker                    : Invocation_Graph_Vertex_Id;\n+        (Inv_Graph                  : Invocation_Graph;\n+         Lib_Graph                  : Library_Graph;\n+         Invoker                    : Invocation_Graph_Vertex_Id;\n          Last_Vertex                : Library_Graph_Vertex_Id;\n          Root_Vertex                : Library_Graph_Vertex_Id;\n+         Visited_Invokers           : IGV_Sets.Membership_Set;\n+         Activates_Task             : Boolean;\n          Internal_Controlled_Action : Boolean;\n          Path                       : Natural)\n       is\n          New_Path : constant Natural := Path + 1;\n \n          Edge           : Invocation_Graph_Edge_Id;\n+         Edge_Kind      : Invocation_Kind;\n          Invoker_Vertex : Library_Graph_Vertex_Id;\n          Iter           : Edges_To_Targets_Iterator;\n \n@@ -252,15 +222,16 @@ package body Bindo.Augmentors is\n          pragma Assert (Present (Invoker));\n          pragma Assert (Present (Last_Vertex));\n          pragma Assert (Present (Root_Vertex));\n+         pragma Assert (IGV_Sets.Present (Visited_Invokers));\n \n          --  Nothing to do when the current invocation graph vertex has already\n          --  been visited.\n \n-         if Is_Visited (Invoker) then\n+         if IGV_Sets.Contains (Visited_Invokers, Invoker) then\n             return;\n          end if;\n \n-         Set_Is_Visited (Invoker);\n+         IGV_Sets.Insert (Visited_Invokers, Invoker);\n \n          --  Update the statistics\n \n@@ -294,10 +265,11 @@ package body Bindo.Augmentors is\n \n             else\n                Add_Edge\n-                 (G    => Lib_Graph,\n-                  Pred => Invoker_Vertex,\n-                  Succ => Root_Vertex,\n-                  Kind => Invocation_Edge);\n+                 (G              => Lib_Graph,\n+                  Pred           => Invoker_Vertex,\n+                  Succ           => Root_Vertex,\n+                  Kind           => Invocation_Edge,\n+                  Activates_Task => Activates_Task);\n             end if;\n          end if;\n \n@@ -307,15 +279,21 @@ package body Bindo.Augmentors is\n          Iter := Iterate_Edges_To_Targets (Inv_Graph, Invoker);\n          while Has_Next (Iter) loop\n             Next (Iter, Edge);\n+            Edge_Kind := Kind (Inv_Graph, Edge);\n \n             Visit_Vertex\n-              (Invoker                    => Target (Inv_Graph, Edge),\n+              (Inv_Graph                  => Inv_Graph,\n+               Lib_Graph                  => Lib_Graph,\n+               Invoker                    => Target (Inv_Graph, Edge),\n                Last_Vertex                => Invoker_Vertex,\n                Root_Vertex                => Root_Vertex,\n+               Visited_Invokers           => Visited_Invokers,\n+               Activates_Task             =>\n+                 Activates_Task\n+                   or else Edge_Kind = Task_Activation,\n                Internal_Controlled_Action =>\n                  Internal_Controlled_Action\n-                   or else Kind (Inv_Graph, Edge) in\n-                             Internal_Controlled_Invocation_Kind,\n+                   or else Edge_Kind in Internal_Controlled_Invocation_Kind,\n                Path                       => New_Path);\n          end loop;\n       end Visit_Vertex;"}, {"sha": "c00d5c0a916bd690ddbdad7a995d2ee0169dff69", "filename": "gcc/ada/bindo-augmentors.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/gcc%2Fada%2Fbindo-augmentors.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/gcc%2Fada%2Fbindo-augmentors.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-augmentors.ads?ref=75cfda8b4aa2cee4e62bcbc74f08f7628224b860", "patch": "@@ -43,10 +43,10 @@ package Bindo.Augmentors is\n \n    package Library_Graph_Augmentors is\n       procedure Augment_Library_Graph\n-        (Inv_G : Invocation_Graph;\n-         Lib_G : Library_Graph);\n-      --  Augment library graph Lib_G with information from invocation graph\n-      --  Inv_G as follows:\n+        (Inv_Graph : Invocation_Graph;\n+         Lib_Graph : Library_Graph);\n+      --  Augment library graph Lib_Graph with information from invocation\n+      --  graph Inv_Graph as follows:\n       --\n       --    1) Traverse the invocation graph starting from each elaboration\n       --       procedure of unit Root."}, {"sha": "351b10d8fc81734a8ce217b5743eae912cbbd9d7", "filename": "gcc/ada/bindo-builders.adb", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/gcc%2Fada%2Fbindo-builders.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/gcc%2Fada%2Fbindo-builders.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-builders.adb?ref=75cfda8b4aa2cee4e62bcbc74f08f7628224b860", "patch": "@@ -415,10 +415,11 @@ package body Bindo.Builders is\n          Write_Eol;\n \n          Add_Edge\n-           (G    => Lib_Graph,\n-            Pred => Pred_Vertex,\n-            Succ => Succ_Vertex,\n-            Kind => Forced_Edge);\n+           (G              => Lib_Graph,\n+            Pred           => Pred_Vertex,\n+            Succ           => Succ_Vertex,\n+            Kind           => Forced_Edge,\n+            Activates_Task => False);\n       end Create_Forced_Edge;\n \n       -------------------------\n@@ -497,10 +498,11 @@ package body Bindo.Builders is\n             Set_Corresponding_Item (Lib_Graph, Vertex, Extra_Vertex);\n \n             Add_Edge\n-              (G    => Lib_Graph,\n-               Pred => Extra_Vertex,\n-               Succ => Vertex,\n-               Kind => Spec_Before_Body_Edge);\n+              (G              => Lib_Graph,\n+               Pred           => Extra_Vertex,\n+               Succ           => Vertex,\n+               Kind           => Spec_Before_Body_Edge,\n+               Activates_Task => False);\n \n          --  The unit denotes a spec with a completing body. Link the spec and\n          --  body.\n@@ -570,12 +572,13 @@ package body Bindo.Builders is\n \n             if Is_Spec_With_Body (Lib_Graph, Withed_Vertex) then\n                Add_Edge\n-                 (G    => Lib_Graph,\n-                  Pred =>\n+                 (G              => Lib_Graph,\n+                  Pred           =>\n                     Corresponding_Vertex\n                       (Lib_Graph, Corresponding_Body (Withed_U_Id)),\n-                  Succ => Succ,\n-                  Kind => Kind);\n+                  Succ           => Succ,\n+                  Kind           => Kind,\n+                  Activates_Task => False);\n             end if;\n \n          --  The with comes with pragma Elaborate_All. Treat the edge as a with\n@@ -597,10 +600,11 @@ package body Bindo.Builders is\n          --  successor.\n \n          Add_Edge\n-           (G    => Lib_Graph,\n-            Pred => Withed_Vertex,\n-            Succ => Succ,\n-            Kind => Kind);\n+           (G              => Lib_Graph,\n+            Pred           => Withed_Vertex,\n+            Succ           => Succ,\n+            Kind           => Kind,\n+            Activates_Task => False);\n       end Create_With_Edge;\n \n       -----------------------"}, {"sha": "9dbdfc0c0672d1416798b3f8883bb2d212d5c964", "filename": "gcc/ada/bindo-diagnostics.adb", "status": "modified", "additions": 55, "deletions": 35, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/gcc%2Fada%2Fbindo-diagnostics.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/gcc%2Fada%2Fbindo-diagnostics.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-diagnostics.adb?ref=75cfda8b4aa2cee4e62bcbc74f08f7628224b860", "patch": "@@ -23,9 +23,11 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Binderr; use Binderr;\n-with Debug;   use Debug;\n-with Types;   use Types;\n+with Binderr;  use Binderr;\n+with Debug;    use Debug;\n+with Restrict; use Restrict;\n+with Rident;   use Rident;\n+with Types;    use Types;\n \n with Bindo.Validators;\n use  Bindo.Validators;\n@@ -77,13 +79,6 @@ package body Bindo.Diagnostics is\n    --  Suggest the diagnostic of all cycles in library graph G if circumstances\n    --  allow it.\n \n-   procedure Output_Dynamic_Model_Suggestions\n-     (G     : Library_Graph;\n-      Cycle : Library_Graph_Cycle_Id);\n-   pragma Inline (Output_Dynamic_Model_Suggestions);\n-   --  Suggest the use of the dynamic elaboration model to break cycle Cycle of\n-   --  library graph G if circumstances allow it.\n-\n    procedure Output_Elaborate_All_Suggestions\n      (G    : Library_Graph;\n       Pred : Library_Graph_Vertex_Id;\n@@ -192,6 +187,13 @@ package body Bindo.Diagnostics is\n    --  Output a transition through edge Edge of invocation graph G, which is\n    --  part of an invocation path. Lib_Graph is the related library graph.\n \n+   procedure Output_Invocation_Related_Suggestions\n+     (G     : Library_Graph;\n+      Cycle : Library_Graph_Cycle_Id);\n+   pragma Inline (Output_Invocation_Related_Suggestions);\n+   --  Suggest ways to break cycle Cycle of library graph G that involves at\n+   --  least one invocation edge.\n+\n    procedure Output_Invocation_Transition\n      (Inv_Graph   : Invocation_Graph;\n       Lib_Graph   : Library_Graph;\n@@ -522,30 +524,6 @@ package body Bindo.Diagnostics is\n       end if;\n    end Output_All_Cycles_Suggestions;\n \n-   --------------------------------------\n-   -- Output_Dynamic_Model_Suggestions --\n-   --------------------------------------\n-\n-   procedure Output_Dynamic_Model_Suggestions\n-     (G     : Library_Graph;\n-      Cycle : Library_Graph_Cycle_Id)\n-   is\n-   begin\n-      pragma Assert (Present (G));\n-      pragma Assert (Present (Cycle));\n-\n-      --  The cycle contains at least one invocation edge where the successor\n-      --  was statically elaborated. Using the dynamic model may eliminate an\n-      --  invocation edge, and thus the cycle.\n-\n-      if Invocation_Edge_Count (G, Cycle) > 0\n-        and then Contains_Weak_Static_Successor (G, Cycle)\n-      then\n-         Error_Msg_Info\n-           (\"    use the dynamic elaboration model (compiler switch -gnatE)\");\n-      end if;\n-   end Output_Dynamic_Model_Suggestions;\n-\n    --------------------------------------\n    -- Output_Elaborate_All_Suggestions --\n    --------------------------------------\n@@ -1155,6 +1133,48 @@ package body Bindo.Diagnostics is\n       end case;\n    end Output_Invocation_Path_Transition;\n \n+   -------------------------------------------\n+   -- Output_Invocation_Related_Suggestions --\n+   -------------------------------------------\n+\n+   procedure Output_Invocation_Related_Suggestions\n+     (G     : Library_Graph;\n+      Cycle : Library_Graph_Cycle_Id)\n+   is\n+   begin\n+      pragma Assert (Present (G));\n+      pragma Assert (Present (Cycle));\n+\n+      --  Nothing to do when the cycle does not contain an invocation edge\n+\n+      if Invocation_Edge_Count (G, Cycle) = 0 then\n+         return;\n+      end if;\n+\n+      --  The cycle contains at least one invocation edge, where at least\n+      --  one of the paths the edge represents activates a task. The use of\n+      --  restriction No_Entry_Calls_In_Elaboration_Code may halt the flow\n+      --  within the task body on a select or accept statement, eliminating\n+      --  subsequent invocation edges, thus breaking the cycle.\n+\n+      if not Restriction_Active (No_Entry_Calls_In_Elaboration_Code)\n+        and then Contains_Task_Activation (G, Cycle)\n+      then\n+         Error_Msg_Info\n+           (\"    use pragma Restrictions \"\n+            & \"(No_Entry_Calls_In_Elaboration_Code)\");\n+      end if;\n+\n+      --  The cycle contains at least one invocation edge where the successor\n+      --  was statically elaborated. The use of the dynamic model may remove\n+      --  one of the invocation edges in the cycle, thus breaking the cycle.\n+\n+      if Contains_Static_Successor_Edge (G, Cycle) then\n+         Error_Msg_Info\n+           (\"    use the dynamic elaboration model (compiler switch -gnatE)\");\n+      end if;\n+   end Output_Invocation_Related_Suggestions;\n+\n    ----------------------------------\n    -- Output_Invocation_Transition --\n    ----------------------------------\n@@ -1257,7 +1277,7 @@ package body Bindo.Diagnostics is\n \n       --  Output general purpose suggestions\n \n-      Output_Dynamic_Model_Suggestions\n+      Output_Invocation_Related_Suggestions\n         (G     => G,\n          Cycle => Cycle);\n "}, {"sha": "6d3a1e242cda98bece8e6d0a04c22e433307b105", "filename": "gcc/ada/bindo-elaborators.adb", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/gcc%2Fada%2Fbindo-elaborators.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/gcc%2Fada%2Fbindo-elaborators.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-elaborators.adb?ref=75cfda8b4aa2cee4e62bcbc74f08f7628224b860", "patch": "@@ -180,20 +180,11 @@ package body Bindo.Elaborators is\n       --  can be elaborated. Step is the current step in the elaboration order.\n       --  Indent is the desired indentation level for tracing.\n \n-      type Comparator_Ptr is access function\n-        (G           : Library_Graph;\n-         Vertex      : Library_Graph_Vertex_Id;\n-         Compared_To : Library_Graph_Vertex_Id) return Precedence_Kind;\n-\n-      type Predicate_Ptr is access function\n-        (G      : Library_Graph;\n-         Vertex : Library_Graph_Vertex_Id) return Boolean;\n-\n       function Find_Best_Vertex\n         (G                   : Library_Graph;\n          Set                 : LGV_Sets.Membership_Set;\n-         Is_Suitable_Vertex  : Predicate_Ptr;\n-         Compare_Vertices    : Comparator_Ptr;\n+         Is_Suitable_Vertex  : LGV_Predicate_Ptr;\n+         Compare_Vertices    : LGV_Comparator_Ptr;\n          Initial_Best_Msg    : String;\n          Subsequent_Best_Msg : String;\n          Step                : Elaboration_Order_Step;\n@@ -917,8 +908,8 @@ package body Bindo.Elaborators is\n       function Find_Best_Vertex\n         (G                   : Library_Graph;\n          Set                 : LGV_Sets.Membership_Set;\n-         Is_Suitable_Vertex  : Predicate_Ptr;\n-         Compare_Vertices    : Comparator_Ptr;\n+         Is_Suitable_Vertex  : LGV_Predicate_Ptr;\n+         Compare_Vertices    : LGV_Comparator_Ptr;\n          Initial_Best_Msg    : String;\n          Subsequent_Best_Msg : String;\n          Step                : Elaboration_Order_Step;"}, {"sha": "840f01adeb2c727195bbed2f051831e035051f98", "filename": "gcc/ada/bindo-graphs.adb", "status": "modified", "additions": 152, "deletions": 78, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/gcc%2Fada%2Fbindo-graphs.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/gcc%2Fada%2Fbindo-graphs.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-graphs.adb?ref=75cfda8b4aa2cee4e62bcbc74f08f7628224b860", "patch": "@@ -1058,15 +1058,17 @@ package body Bindo.Graphs is\n       --  for tracing.\n \n       function Add_Edge_With_Return\n-        (G    : Library_Graph;\n-         Pred : Library_Graph_Vertex_Id;\n-         Succ : Library_Graph_Vertex_Id;\n-         Kind : Library_Graph_Edge_Kind) return Library_Graph_Edge_Id;\n+        (G              : Library_Graph;\n+         Pred           : Library_Graph_Vertex_Id;\n+         Succ           : Library_Graph_Vertex_Id;\n+         Kind           : Library_Graph_Edge_Kind;\n+         Activates_Task : Boolean) return Library_Graph_Edge_Id;\n       pragma Inline (Add_Edge_With_Return);\n       --  Create a new edge in library graph G with source vertex Pred and\n       --  destination vertex Succ, and return its handle. Kind denotes the\n-      --  nature of the edge. If Pred and Succ are already related, no edge\n-      --  is created and No_Library_Graph_Edge is returned.\n+      --  nature of the edge. Activates_Task should be set when the edge\n+      --  involves a task activation. If Pred and Succ are already related,\n+      --  no edge is created and No_Library_Graph_Edge is returned.\n \n       procedure Add_Vertex_And_Complement\n         (G             : Library_Graph;\n@@ -1078,6 +1080,14 @@ package body Bindo.Graphs is\n       --  part of an Elaborate_Body pair, or flag Do_Complement is set, add\n       --  the complementary vertex to the set.\n \n+      function At_Least_One_Edge_Satisfies\n+        (G         : Library_Graph;\n+         Cycle     : Library_Graph_Cycle_Id;\n+         Predicate : LGE_Predicate_Ptr) return Boolean;\n+      pragma Inline (At_Least_One_Edge_Satisfies);\n+      --  Determine whether at least one edge of cycle Cycle of library graph G\n+      --  satisfies predicate Predicate.\n+\n       function Copy_Cycle_Path\n         (Cycle_Path : LGE_Lists.Doubly_Linked_List)\n          return LGE_Lists.Doubly_Linked_List;\n@@ -1306,6 +1316,13 @@ package body Bindo.Graphs is\n       --  Determine whether a predecessor vertex and a successor vertex\n       --  described by relation Rel are already linked in library graph G.\n \n+      function Is_Static_Successor_Edge\n+        (G    : Library_Graph;\n+         Edge : Library_Graph_Edge_Id) return Boolean;\n+      pragma Inline (Is_Static_Successor_Edge);\n+      --  Determine whether the successor of invocation edge Edge represents a\n+      --  unit that was compile with the static model.\n+\n       function Links_Vertices_In_Same_Component\n         (G    : Library_Graph;\n          Edge : Library_Graph_Edge_Id) return Boolean;\n@@ -1491,6 +1508,23 @@ package body Bindo.Graphs is\n       --  LGE_Is's successor vertex of library graph G must wait on before\n       --  it can be elaborated.\n \n+      --------------------\n+      -- Activates_Task --\n+      --------------------\n+\n+      function Activates_Task\n+        (G    : Library_Graph;\n+         Edge : Library_Graph_Edge_Id) return Boolean\n+      is\n+      begin\n+         pragma Assert (Present (G));\n+         pragma Assert (Present (Edge));\n+\n+         return\n+           Kind (G, Edge) = Invocation_Edge\n+            and then Get_LGE_Attributes (G, Edge).Activates_Task;\n+      end Activates_Task;\n+\n       -------------------------------\n       -- Add_Body_Before_Spec_Edge --\n       -------------------------------\n@@ -1533,20 +1567,22 @@ package body Bindo.Graphs is\n          if Is_Body_With_Spec (G, Vertex) then\n             Edge :=\n               Add_Edge_With_Return\n-                (G    => G,\n-                 Pred => Vertex,                           --  body\n-                 Succ => Corresponding_Item (G, Vertex),   --  spec\n-                 Kind => Body_Before_Spec_Edge);\n+                (G              => G,\n+                 Pred           => Vertex,\n+                 Succ           => Corresponding_Item (G, Vertex),\n+                 Kind           => Body_Before_Spec_Edge,\n+                 Activates_Task => False);\n \n          --  A spec with a completing body\n \n          elsif Is_Spec_With_Body (G, Vertex) then\n             Edge :=\n               Add_Edge_With_Return\n-                (G    => G,\n-                 Pred => Corresponding_Item (G, Vertex),   --  body\n-                 Succ => Vertex,                           --  spec\n-                 Kind => Body_Before_Spec_Edge);\n+                (G              => G,\n+                 Pred           => Corresponding_Item (G, Vertex),\n+                 Succ           => Vertex,\n+                 Kind           => Body_Before_Spec_Edge,\n+                 Activates_Task => False);\n          end if;\n \n          if Present (Edge) then\n@@ -1623,10 +1659,11 @@ package body Bindo.Graphs is\n       --------------\n \n       procedure Add_Edge\n-        (G    : Library_Graph;\n-         Pred : Library_Graph_Vertex_Id;\n-         Succ : Library_Graph_Vertex_Id;\n-         Kind : Library_Graph_Edge_Kind)\n+        (G              : Library_Graph;\n+         Pred           : Library_Graph_Vertex_Id;\n+         Succ           : Library_Graph_Vertex_Id;\n+         Kind           : Library_Graph_Edge_Kind;\n+         Activates_Task : Boolean)\n       is\n          Edge : Library_Graph_Edge_Id;\n          pragma Unreferenced (Edge);\n@@ -1636,24 +1673,27 @@ package body Bindo.Graphs is\n          pragma Assert (Present (Pred));\n          pragma Assert (Present (Succ));\n          pragma Assert (Kind /= No_Edge);\n+         pragma Assert (not Activates_Task or else Kind = Invocation_Edge);\n \n          Edge :=\n            Add_Edge_With_Return\n-             (G    => G,\n-              Pred => Pred,\n-              Succ => Succ,\n-              Kind => Kind);\n+             (G              => G,\n+              Pred           => Pred,\n+              Succ           => Succ,\n+              Kind           => Kind,\n+              Activates_Task => Activates_Task);\n       end Add_Edge;\n \n       --------------------------\n       -- Add_Edge_With_Return --\n       --------------------------\n \n       function Add_Edge_With_Return\n-        (G    : Library_Graph;\n-         Pred : Library_Graph_Vertex_Id;\n-         Succ : Library_Graph_Vertex_Id;\n-         Kind : Library_Graph_Edge_Kind) return Library_Graph_Edge_Id\n+        (G              : Library_Graph;\n+         Pred           : Library_Graph_Vertex_Id;\n+         Succ           : Library_Graph_Vertex_Id;\n+         Kind           : Library_Graph_Edge_Kind;\n+         Activates_Task : Boolean) return Library_Graph_Edge_Id\n       is\n          pragma Assert (Present (G));\n          pragma Assert (Present (Pred));\n@@ -1691,7 +1731,9 @@ package body Bindo.Graphs is\n          Set_LGE_Attributes\n            (G    => G,\n             Edge => Edge,\n-            Val  => (Kind => Kind));\n+            Val  =>\n+              (Activates_Task => Activates_Task,\n+               Kind           => Kind));\n \n          --  Mark the predecessor and successor as related by the new edge.\n          --  This prevents all further attempts to link the same predecessor\n@@ -1785,6 +1827,43 @@ package body Bindo.Graphs is\n          end if;\n       end Add_Vertex_And_Complement;\n \n+      ---------------------------------\n+      -- At_Least_One_Edge_Satisfies --\n+      ---------------------------------\n+\n+      function At_Least_One_Edge_Satisfies\n+        (G         : Library_Graph;\n+         Cycle     : Library_Graph_Cycle_Id;\n+         Predicate : LGE_Predicate_Ptr) return Boolean\n+      is\n+         Edge      : Library_Graph_Edge_Id;\n+         Iter      : Edges_Of_Cycle_Iterator;\n+         Satisfied : Boolean;\n+\n+      begin\n+         pragma Assert (Present (G));\n+         pragma Assert (Present (Cycle));\n+         pragma Assert (Predicate /= null);\n+\n+         --  Assume that the predicate cannot be satisfied\n+\n+         Satisfied := False;\n+\n+         --  IMPORTANT:\n+         --\n+         --    * The iteration must run to completion in order to unlock the\n+         --      edges of the cycle.\n+\n+         Iter := Iterate_Edges_Of_Cycle (G, Cycle);\n+         while Has_Next (Iter) loop\n+            Next (Iter, Edge);\n+\n+            Satisfied := Satisfied or else Predicate.all (G, Edge);\n+         end loop;\n+\n+         return Satisfied;\n+      end At_Least_One_Edge_Satisfies;\n+\n       --------------------------\n       -- Complementary_Vertex --\n       --------------------------\n@@ -1848,76 +1927,54 @@ package body Bindo.Graphs is\n         (G     : Library_Graph;\n          Cycle : Library_Graph_Cycle_Id) return Boolean\n       is\n-         Edge : Library_Graph_Edge_Id;\n-         Iter : Edges_Of_Cycle_Iterator;\n-         Seen : Boolean;\n-\n       begin\n          pragma Assert (Present (G));\n          pragma Assert (Present (Cycle));\n \n-         --  Assume that no Elaborate_All edge has been seen\n-\n-         Seen := False;\n-\n-         --  IMPORTANT:\n-         --\n-         --    * The iteration must run to completion in order to unlock the\n-         --      edges of the cycle.\n-\n-         Iter := Iterate_Edges_Of_Cycle (G, Cycle);\n-         while Has_Next (Iter) loop\n-            Next (Iter, Edge);\n-\n-            if not Seen\n-              and then Is_Elaborate_All_Edge (G, Edge)\n-            then\n-               Seen := True;\n-            end if;\n-         end loop;\n-\n-         return Seen;\n+         return\n+           At_Least_One_Edge_Satisfies\n+             (G         => G,\n+              Cycle     => Cycle,\n+              Predicate => Is_Elaborate_All_Edge'Access);\n       end Contains_Elaborate_All_Edge;\n \n       ------------------------------------\n-      -- Contains_Weak_Static_Successor --\n+      -- Contains_Static_Successor_Edge --\n       ------------------------------------\n \n-      function Contains_Weak_Static_Successor\n+      function Contains_Static_Successor_Edge\n         (G     : Library_Graph;\n          Cycle : Library_Graph_Cycle_Id) return Boolean\n       is\n-         Edge : Library_Graph_Edge_Id;\n-         Iter : Edges_Of_Cycle_Iterator;\n-         Seen : Boolean;\n-\n       begin\n          pragma Assert (Present (G));\n          pragma Assert (Present (Cycle));\n \n-         --  Assume that no weak static successor has been seen\n-\n-         Seen := False;\n-\n-         --  IMPORTANT:\n-         --\n-         --    * The iteration must run to completion in order to unlock the\n-         --      edges of the cycle.\n+         return\n+           At_Least_One_Edge_Satisfies\n+             (G         => G,\n+              Cycle     => Cycle,\n+              Predicate => Is_Static_Successor_Edge'Access);\n+      end Contains_Static_Successor_Edge;\n \n-         Iter := Iterate_Edges_Of_Cycle (G, Cycle);\n-         while Has_Next (Iter) loop\n-            Next (Iter, Edge);\n+      ------------------------------\n+      -- Contains_Task_Activation --\n+      ------------------------------\n \n-            if not Seen\n-              and then Is_Invocation_Edge (G, Edge)\n-              and then not Is_Dynamically_Elaborated (G, Successor (G, Edge))\n-            then\n-               Seen := True;\n-            end if;\n-         end loop;\n+      function Contains_Task_Activation\n+        (G     : Library_Graph;\n+         Cycle : Library_Graph_Cycle_Id) return Boolean\n+      is\n+      begin\n+         pragma Assert (Present (G));\n+         pragma Assert (Present (Cycle));\n \n-         return Seen;\n-      end Contains_Weak_Static_Successor;\n+         return\n+           At_Least_One_Edge_Satisfies\n+             (G         => G,\n+              Cycle     => Cycle,\n+              Predicate => Activates_Task'Access);\n+      end Contains_Task_Activation;\n \n       ---------------------\n       -- Copy_Cycle_Path --\n@@ -3632,6 +3689,23 @@ package body Bindo.Graphs is\n              and then Has_Elaborate_Body (G, Vertex);\n       end Is_Spec_With_Elaborate_Body;\n \n+      ------------------------------\n+      -- Is_Static_Successor_Edge --\n+      ------------------------------\n+\n+      function Is_Static_Successor_Edge\n+        (G    : Library_Graph;\n+         Edge : Library_Graph_Edge_Id) return Boolean\n+      is\n+      begin\n+         pragma Assert (Present (G));\n+         pragma Assert (Present (Edge));\n+\n+         return\n+           Is_Invocation_Edge (G, Edge)\n+             and then not Is_Dynamically_Elaborated (G, Successor (G, Edge));\n+      end Is_Static_Successor_Edge;\n+\n       ---------------------------------\n       -- Is_Weakly_Elaborable_Vertex --\n       ----------------------------------"}, {"sha": "53bc4eebe62cd3dabd9981b281c2681a1fddc164", "filename": "gcc/ada/bindo-graphs.ads", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/gcc%2Fada%2Fbindo-graphs.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/gcc%2Fada%2Fbindo-graphs.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-graphs.ads?ref=75cfda8b4aa2cee4e62bcbc74f08f7628224b860", "patch": "@@ -732,18 +732,33 @@ package Bindo.Graphs is\n       type Library_Graph is private;\n       Nil : constant Library_Graph;\n \n+      type LGE_Predicate_Ptr is access function\n+        (G    : Library_Graph;\n+         Edge : Library_Graph_Edge_Id) return Boolean;\n+\n+      type LGV_Comparator_Ptr is access function\n+        (G           : Library_Graph;\n+         Vertex      : Library_Graph_Vertex_Id;\n+         Compared_To : Library_Graph_Vertex_Id) return Precedence_Kind;\n+\n+      type LGV_Predicate_Ptr is access function\n+        (G      : Library_Graph;\n+         Vertex : Library_Graph_Vertex_Id) return Boolean;\n+\n       ----------------------\n       -- Graph operations --\n       ----------------------\n \n       procedure Add_Edge\n-        (G    : Library_Graph;\n-         Pred : Library_Graph_Vertex_Id;\n-         Succ : Library_Graph_Vertex_Id;\n-         Kind : Library_Graph_Edge_Kind);\n+        (G              : Library_Graph;\n+         Pred           : Library_Graph_Vertex_Id;\n+         Succ           : Library_Graph_Vertex_Id;\n+         Kind           : Library_Graph_Edge_Kind;\n+         Activates_Task : Boolean);\n       pragma Inline (Add_Edge);\n       --  Create a new edge in library graph G with source vertex Pred and\n-      --  destination vertex Succ. Kind denotes the nature of the edge.\n+      --  destination vertex Succ. Kind denotes the nature of the edge. Flag\n+      --  Activates_Task should be set when the edge involves task activation.\n \n       procedure Add_Vertex\n         (G    : Library_Graph;\n@@ -895,6 +910,12 @@ package Bindo.Graphs is\n       -- Edge attributes --\n       ---------------------\n \n+      function Activates_Task\n+        (G    : Library_Graph;\n+         Edge : Library_Graph_Edge_Id) return Boolean;\n+      pragma Inline (Activates_Task);\n+      --  Determine whether edge Edge of library graph G activates a task\n+\n       function Kind\n         (G    : Library_Graph;\n          Edge : Library_Graph_Edge_Id) return Library_Graph_Edge_Kind;\n@@ -987,13 +1008,21 @@ package Bindo.Graphs is\n       --  Determine whether cycle Cycle of library graph G contains an\n       --  Elaborate_All edge.\n \n-      function Contains_Weak_Static_Successor\n+      function Contains_Static_Successor_Edge\n         (G     : Library_Graph;\n          Cycle : Library_Graph_Cycle_Id) return Boolean;\n-      pragma Inline (Contains_Weak_Static_Successor);\n-      --  Determine whether cycle Cycle of library graph G contains a weak edge\n+      pragma Inline (Contains_Static_Successor_Edge);\n+      --  Determine whether cycle Cycle of library graph G contains an edge\n       --  where the successor was compiled using the static model.\n \n+      function Contains_Task_Activation\n+        (G     : Library_Graph;\n+         Cycle : Library_Graph_Cycle_Id) return Boolean;\n+      pragma Inline (Contains_Task_Activation);\n+      --  Determine whether cycle Cycle of library graph G contains an\n+      --  invocation edge where the path it represents involves a task\n+      --  activation.\n+\n       function Has_Elaborate_All_Cycle (G : Library_Graph) return Boolean;\n       pragma Inline (Has_Elaborate_All_Cycle);\n       --  Determine whether library graph G contains a cycle involving pragma\n@@ -1439,13 +1468,18 @@ package Bindo.Graphs is\n       --  The following type represents the attributes of a library graph edge\n \n       type Library_Graph_Edge_Attributes is record\n+         Activates_Task : Boolean := False;\n+         --  Set for an invocation edge, where at least one of the paths the\n+         --  edge represents activates a task.\n+\n          Kind : Library_Graph_Edge_Kind := No_Edge;\n          --  The nature of the library graph edge\n       end record;\n \n       No_Library_Graph_Edge_Attributes :\n         constant Library_Graph_Edge_Attributes :=\n-          (Kind => No_Edge);\n+          (Activates_Task => False,\n+           Kind           => No_Edge);\n \n       procedure Destroy_Library_Graph_Edge_Attributes\n         (Attrs : in out Library_Graph_Edge_Attributes);"}, {"sha": "b0ebe628bd7f4dd765967d1386481b3a8f87a9d5", "filename": "gcc/ada/bindo.ads", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/gcc%2Fada%2Fbindo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/gcc%2Fada%2Fbindo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo.ads?ref=75cfda8b4aa2cee4e62bcbc74f08f7628224b860", "patch": "@@ -31,6 +31,14 @@ with Namet; use Namet;\n \n package Bindo is\n \n+   --  The following type represents the various kinds of precedence between\n+   --  two items.\n+\n+   type Precedence_Kind is\n+     (Lower_Precedence,\n+      Equal_Precedence,\n+      Higher_Precedence);\n+\n    procedure Find_Elaboration_Order\n      (Order         : out Unit_Id_Table;\n       Main_Lib_File : File_Name_Type);\n@@ -41,14 +49,4 @@ package Bindo is\n    --  exists, it is returned in Order, otherwise Unrecoverable_Error is\n    --  raised.\n \n-private\n-\n-   --  The following type represents the various kinds of precedence between\n-   --  two items.\n-\n-   type Precedence_Kind is\n-     (Lower_Precedence,\n-      Equal_Precedence,\n-      Higher_Precedence);\n-\n end Bindo;"}, {"sha": "b27aa739c48b0b67501777c843fac5bd210daa14", "filename": "gcc/ada/doc/gnat_ugn/elaboration_order_handling_in_gnat.rst", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst?ref=75cfda8b4aa2cee4e62bcbc74f08f7628224b860", "patch": "@@ -1014,6 +1014,23 @@ following tactics to eliminate the circularity:\n \n   The programmer should remove the pragma as advised, and rebuild the program.\n \n+* Use of pragma Restrictions\n+\n+  ::\n+\n+     use pragma Restrictions (No_Entry_Calls_In_Elaboration_Code)\n+\n+  This tactic is suggested when the binder has determined that a task\n+  activation at elaboration time\n+\n+  - Prevents a set of units from being elaborated.\n+\n+  Note that the binder cannot determine with certainty whether the task will\n+  block at elaboration time.\n+\n+  The programmer should create a configuration file, place the pragma within,\n+  update the general compilation arguments, and rebuild the program.\n+\n * Use of dynamic elaboration model\n \n   ::"}, {"sha": "2d565cc5844d76278ab47748bc1abeba2473fd45", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cfda8b4aa2cee4e62bcbc74f08f7628224b860/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=75cfda8b4aa2cee4e62bcbc74f08f7628224b860", "patch": "@@ -28457,6 +28457,29 @@ declared in the spec by elaboration code in the body.\n \n The programmer should remove the pragma as advised, and rebuild the program.\n \n+@item \n+Use of pragma Restrictions\n+\n+@example\n+use pragma Restrictions (No_Entry_Calls_In_Elaboration_Code)\n+@end example\n+\n+This tactic is suggested when the binder has determined that a task\n+activation at elaboration time\n+\n+\n+@itemize -\n+\n+@item \n+Prevents a set of units from being elaborated.\n+@end itemize\n+\n+Note that the binder cannot determine with certainty whether the task will\n+block at elaboration time.\n+\n+The programmer should create a configuration file, place the pragma within,\n+update the general compilation arguments, and rebuild the program.\n+\n @item \n Use of dynamic elaboration model\n "}]}