{"sha": "aa388f29a30a2fa98275479ee44b9448786f62ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEzODhmMjlhMzBhMmZhOTgyNzU0NzllZTQ0Yjk0NDg3ODZmNjJlZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-09-23T12:36:06Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-09-23T12:36:06Z"}, "message": "builtins.c, [...]: Include tm_p.h.\n\n        * builtins.c, dbxout.c, varasm.c: Include tm_p.h.\n\n        * alpha/alpha.c (print_operand): Fix type of `code'.\n        (alpha_output_filename): Constify.\n        * alpha/alpha.h: Move all function declarations ...\n        * alpha/alpha-protos.h: ... here.  New file.\n        * alpha/elf.h (CONST_SECTION_FUNCTION): Prototype the function.\n        (SECTION_FUNCTION_TEMPLATE): Likewise.\n\nFrom-SVN: r29614", "tree": {"sha": "a97648bf96d707dcaa472fb69d4985af422b600b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a97648bf96d707dcaa472fb69d4985af422b600b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa388f29a30a2fa98275479ee44b9448786f62ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa388f29a30a2fa98275479ee44b9448786f62ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa388f29a30a2fa98275479ee44b9448786f62ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa388f29a30a2fa98275479ee44b9448786f62ed/comments", "author": null, "committer": null, "parents": [{"sha": "1c0290eaac40944ba6baed8323b74f42ab7f05c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c0290eaac40944ba6baed8323b74f42ab7f05c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c0290eaac40944ba6baed8323b74f42ab7f05c9"}], "stats": {"total": 244, "additions": 155, "deletions": 89}, "files": [{"sha": "1896e349505f9d7cce61399b94ecb0f58cd97da8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa388f29a30a2fa98275479ee44b9448786f62ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa388f29a30a2fa98275479ee44b9448786f62ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa388f29a30a2fa98275479ee44b9448786f62ed", "patch": "@@ -1,3 +1,14 @@\n+Thu Sep 23 05:32:06 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* builtins.c, dbxout.c, varasm.c: Include tm_p.h.\n+\n+\t* alpha/alpha.c (print_operand): Fix type of `code'.\n+\t(alpha_output_filename): Constify.\n+\t* alpha/alpha.h: Move all function declarations ...\n+\t* alpha/alpha-protos.h: ... here.  New file.\n+\t* alpha/elf.h (CONST_SECTION_FUNCTION): Prototype the function.\n+\t(SECTION_FUNCTION_TEMPLATE): Likewise.\n+\n Thu Sep 23 11:15:36 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* expmed.c (do_cmp_and_jump): Pass ccp_jump to can_compare_p."}, {"sha": "a5a197e017bd76a8441e0e9b6202e2d6505bc070", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa388f29a30a2fa98275479ee44b9448786f62ed/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa388f29a30a2fa98275479ee44b9448786f62ed/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=aa388f29a30a2fa98275479ee44b9448786f62ed", "patch": "@@ -38,6 +38,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"typeclass.h\"\n #include \"defaults.h\"\n #include \"toplev.h\"\n+#include \"tm_p.h\"\n \n #define CALLED_AS_BUILT_IN(NODE) \\\n    (!strncmp (IDENTIFIER_POINTER (DECL_NAME (NODE)), \"__builtin_\", 10))"}, {"sha": "1a45d6b55ffbf0d0d91f892ba109e57992323d72", "filename": "gcc/config/alpha/alpha-protos.h", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa388f29a30a2fa98275479ee44b9448786f62ed/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa388f29a30a2fa98275479ee44b9448786f62ed/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=aa388f29a30a2fa98275479ee44b9448786f62ed", "patch": "@@ -0,0 +1,116 @@\n+/* Prototypes for alpha.c functions used in the md file & elsewhere.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+extern void override_options PROTO ((void));\n+extern int zap_mask PROTO ((HOST_WIDE_INT));\n+extern int direct_return PROTO ((void));\n+\n+extern int alpha_sa_size PROTO ((void));\n+extern int alpha_pv_save_size PROTO ((void));\n+extern int alpha_using_fp PROTO ((void));\n+extern void alpha_write_verstamp PROTO ((FILE *));\n+extern void alpha_expand_prologue PROTO ((void));\n+extern void output_end_prologue PROTO ((FILE *));\n+extern void alpha_expand_epilogue PROTO ((void));\n+extern void alpha_output_filename PROTO ((FILE *, const char *));\n+extern void alpha_output_lineno PROTO ((FILE *, int));\n+\n+#ifdef RTX_CODE\n+extern int reg_or_0_operand PROTO ((rtx, enum machine_mode));\n+extern int reg_or_6bit_operand PROTO ((rtx, enum machine_mode));\n+extern int reg_or_8bit_operand PROTO ((rtx, enum machine_mode));\n+extern int cint8_operand PROTO ((rtx, enum machine_mode));\n+extern int add_operand PROTO ((rtx, enum machine_mode));\n+extern int sext_add_operand PROTO ((rtx, enum machine_mode));\n+extern int const48_operand PROTO ((rtx, enum machine_mode));\n+extern int and_operand PROTO ((rtx, enum machine_mode));\n+extern int or_operand PROTO ((rtx, enum machine_mode));\n+extern int mode_width_operand PROTO ((rtx, enum machine_mode));\n+extern int mode_mask_operand PROTO ((rtx, enum machine_mode));\n+extern int mul8_operand PROTO ((rtx, enum machine_mode));\n+extern int fp0_operand PROTO ((rtx, enum machine_mode));\n+extern int reg_or_fp0_operand PROTO ((rtx, enum machine_mode));\n+extern int hard_fp_register_operand PROTO ((rtx, enum machine_mode));\n+extern int reg_or_cint_operand PROTO ((rtx, enum machine_mode));\n+extern int some_operand PROTO ((rtx, enum machine_mode));\n+extern int input_operand PROTO ((rtx, enum machine_mode));\n+extern int current_file_function_operand PROTO ((rtx, enum machine_mode));\n+extern int call_operand PROTO ((rtx, enum machine_mode));\n+extern int alpha_comparison_operator PROTO ((rtx, enum machine_mode));\n+extern int alpha_swapped_comparison_operator PROTO ((rtx, enum machine_mode));\n+extern int signed_comparison_operator PROTO ((rtx, enum machine_mode));\n+extern int divmod_operator PROTO ((rtx, enum machine_mode));\n+extern int aligned_memory_operand PROTO ((rtx, enum machine_mode));\n+extern int unaligned_memory_operand PROTO ((rtx, enum machine_mode));\n+extern int reg_or_unaligned_mem_operand PROTO ((rtx, enum machine_mode));\n+extern int any_memory_operand PROTO ((rtx, enum machine_mode));\n+extern int reg_not_elim_operand PROTO ((rtx, enum machine_mode));\n+extern int normal_memory_operand PROTO ((rtx, enum machine_mode));\n+extern int reg_no_subreg_operand PROTO ((rtx, enum machine_mode));\n+\n+extern void get_aligned_mem PROTO ((rtx, rtx *, rtx *));\n+extern rtx get_unaligned_address PROTO ((rtx, int));\n+\n+extern void alpha_set_memflags PROTO ((rtx, rtx));\n+extern rtx alpha_emit_set_const PROTO ((rtx, enum machine_mode,\n+\t\t\t\t\tHOST_WIDE_INT, int));\n+extern rtx alpha_emit_set_long_const PROTO ((rtx, HOST_WIDE_INT,\n+\t\t\t\t\t     HOST_WIDE_INT));\n+extern rtx alpha_emit_conditional_branch PROTO ((enum rtx_code));\n+extern rtx alpha_emit_conditional_move PROTO ((rtx, enum machine_mode));\n+extern void alpha_expand_unaligned_load PROTO ((rtx, rtx, HOST_WIDE_INT,\n+\t\t\t\t\t\tHOST_WIDE_INT, int));\n+extern void alpha_expand_unaligned_store PROTO ((rtx, rtx, HOST_WIDE_INT,\n+\t\t\t\t\t\t HOST_WIDE_INT));\n+extern int alpha_expand_block_move PROTO ((rtx []));\n+extern int alpha_expand_block_clear PROTO ((rtx []));\n+extern int alpha_adjust_cost PROTO ((rtx, rtx, rtx, int));\n+extern rtx alpha_return_addr PROTO ((int, rtx));\n+extern void print_operand PROTO ((FILE *, rtx, int));\n+extern void print_operand_address PROTO ((FILE *, rtx));\n+extern void alpha_initialize_trampoline PROTO ((rtx, rtx, rtx, int, int, int));\n+extern void alpha_reorg PROTO ((rtx));\n+#endif /* RTX_CODE */\n+\n+#ifdef REAL_VALUE_TYPE\n+extern int check_float_value PROTO ((enum machine_mode,\n+\t\t\t\t     REAL_VALUE_TYPE *, int));\n+#endif\n+\n+#if OPEN_VMS\n+#ifdef HAVE_MACHINE_MODES\n+extern enum avms_arg_type alpha_arg_type PROTO ((enum machine_mode));\n+#endif\n+extern rtx alpha_arg_info_reg_val PROTO ((CUMULATIVE_ARGS));\n+extern void alpha_write_linkage PROTO ((FILE *));\n+#endif /* OPEN_VMS */\n+\n+extern void alpha_need_linkage PROTO ((char *, int));\n+\n+#ifdef TREE_CODE\n+extern tree alpha_build_va_list PROTO ((void));\n+#ifdef RTX_CODE\n+extern void alpha_va_start PROTO ((int, tree, rtx));\n+extern rtx alpha_va_arg PROTO ((tree, tree));\n+#endif\n+extern int vms_valid_decl_attribute_p PROTO ((tree, tree, tree, tree));\n+extern void alpha_start_function PROTO ((FILE *, char *, tree));\n+extern void alpha_end_function PROTO ((FILE *, char *, tree));\n+#endif /* TREE CODE */"}, {"sha": "36cd20721f30d313e0d9c9599ec520d65f9cd12f", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa388f29a30a2fa98275479ee44b9448786f62ed/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa388f29a30a2fa98275479ee44b9448786f62ed/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=aa388f29a30a2fa98275479ee44b9448786f62ed", "patch": "@@ -41,6 +41,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"toplev.h\"\n #include \"ggc.h\"\n+#include \"tm_p.h\"\n \n /* External data.  */\n extern char *version_string;\n@@ -2642,7 +2643,7 @@ void\n print_operand (file, x, code)\n     FILE *file;\n     rtx x;\n-    char code;\n+    int code;\n {\n   int i;\n \n@@ -4149,7 +4150,7 @@ long alpha_auto_offset;\n void\n alpha_output_filename (stream, name)\n      FILE *stream;\n-     char *name;\n+     const char *name;\n {\n   static int first_time = TRUE;\n   char ltext_label_name[100];\n@@ -5186,7 +5187,7 @@ alpha_arg_type (mode)\n /* Return an rtx for an integer representing the VMS Argument Information\n    register value.  */\n \n-struct rtx_def *\n+rtx\n alpha_arg_info_reg_val (cum)\n      CUMULATIVE_ARGS cum;\n {"}, {"sha": "a894969aba71ca9e2fb5db119a7d6baab2c3e171", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa388f29a30a2fa98275479ee44b9448786f62ed/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa388f29a30a2fa98275479ee44b9448786f62ed/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=aa388f29a30a2fa98275479ee44b9448786f62ed", "patch": "@@ -351,7 +351,6 @@ extern const char *alpha_mlat_string;\t/* For -mmemory-latency= */\n    On the Alpha, it is used to translate target-option strings into\n    numeric values.  */\n \n-extern void override_options ();\n #define OVERRIDE_OPTIONS override_options ()\n \n \n@@ -795,7 +794,6 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, ALL_REGS,\n    : (C) == 'S' ? (GET_CODE (OP) == CONST_INT\t\t\t\t\\\n \t\t   && (unsigned HOST_WIDE_INT) INTVAL (OP) < 64)\t\\\n    : 0)\n-extern int normal_memory_operand ();\n \n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use.\n@@ -1188,10 +1186,6 @@ extern int alpha_memory_latency;\n    where the output has been placed if it can be done and the insns have been\n    emitted.  If it would take more than N insns, zero is returned and no\n    insns and emitted.  */\n-extern struct rtx_def *alpha_emit_set_const ();\n-extern struct rtx_def *alpha_emit_set_long_const ();\n-extern struct rtx_def *alpha_emit_conditional_branch ();\n-extern struct rtx_def *alpha_emit_conditional_move ();\n \n /* Define the information needed to generate branch and scc insns.  This is\n    stored from the compare operation.  Note that we can't use \"rtx\" here\n@@ -1218,7 +1212,6 @@ struct machine_function\n \n /* Make (or fake) .linkage entry for function call.\n    IS_LOCAL is 0 if name is used in call, 1 if name is used in definition.  */\n-extern void alpha_need_linkage ();\n \n /* This macro defines the start of an assembly comment.  */\n \n@@ -1228,18 +1221,15 @@ extern void alpha_need_linkage ();\n \n #define ASM_DECLARE_FUNCTION_NAME(FILE,NAME,DECL) \\\n   alpha_start_function(FILE,NAME,DECL);\n-extern void alpha_start_function ();\n \n /* This macro closes up a function definition for the assembler.  */\n \n #define ASM_DECLARE_FUNCTION_SIZE(FILE,NAME,DECL) \\\n   alpha_end_function(FILE,NAME,DECL)\n-extern void alpha_end_function ();\n    \n /* This macro notes the end of the prologue.  */\n \n #define FUNCTION_END_PROLOGUE(FILE)  output_end_prologue (FILE)\n-extern void output_end_prologue ();\n \n /* Output any profiling code before the prologue.  */\n \n@@ -1327,15 +1317,13 @@ do {\t\t\t\t\t\t\\\n \n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) \\\n   alpha_initialize_trampoline (TRAMP, FNADDR, CXT, 16, 24, 8)\n-extern void alpha_initialize_trampoline ();\n \n /* A C expression whose value is RTL representing the value of the return\n    address for the frame COUNT steps up from the current frame.\n    FRAMEADDR is the frame pointer of the COUNT frame, or the frame pointer of\n    the COUNT-1 frame if RETURN_ADDR_IN_PREVIOUS_FRAME is defined.  */\n \n #define RETURN_ADDR_RTX  alpha_return_addr\n-extern struct rtx_def *alpha_return_addr ();\n \n /* Before the prologue, RA lives in $26. */\n #define INCOMING_RETURN_ADDR_RTX  gen_rtx_REG (Pmode, 26)\n@@ -2401,11 +2389,9 @@ extern long alpha_auto_offset;\n \n #define ASM_OUTPUT_SOURCE_LINE(STREAM, LINE)\t\t\t\t\\\n   alpha_output_lineno (STREAM, LINE)\n-extern void alpha_output_lineno ();\n \n #define ASM_OUTPUT_SOURCE_FILENAME(STREAM, NAME)\t\t\t\\\n   alpha_output_filename (STREAM, NAME)\n-extern void alpha_output_filename ();\n \n /* mips-tfile.c limits us to strings of one page.  We must underestimate this\n    number, because the real length runs past this up to the next\n@@ -2514,55 +2500,3 @@ do {\t\t\t\t\t\t\t\\\n \n /* The system headers under Alpha systems are generally C++-aware.  */\n #define NO_IMPLICIT_EXTERN_C\n-\n-/* Prototypes for alpha.c functions used in the md file & elsewhere.  */\n-extern struct rtx_def *get_unaligned_address ();\n-extern void alpha_write_verstamp ();\n-extern void alpha_reorg ();\n-extern int check_float_value ();\n-extern int direct_return ();\n-extern int const48_operand ();\n-extern int add_operand ();\n-extern int and_operand ();\n-extern int unaligned_memory_operand ();\n-extern int zap_mask ();\n-extern int current_file_function_operand ();\n-extern int alpha_sa_size ();\n-extern int alpha_adjust_cost ();\n-extern void print_operand ();\n-extern void print_operand_address ();\n-extern int reg_or_0_operand ();\n-extern int reg_or_8bit_operand ();\n-extern int mul8_operand ();\n-extern int reg_or_6bit_operand ();\n-extern int alpha_comparison_operator ();\n-extern int alpha_swapped_comparison_operator ();\n-extern int sext_add_operand ();\n-extern int cint8_operand ();\n-extern int mode_mask_operand ();\n-extern int or_operand ();\n-extern int mode_width_operand ();\n-extern int reg_or_fp0_operand ();\n-extern int signed_comparison_operator ();\n-extern int fp0_operand ();\n-extern int some_operand ();\n-extern int input_operand ();\n-extern int divmod_operator ();\n-extern int call_operand ();\n-extern int reg_or_cint_operand ();\n-extern int hard_fp_register_operand ();\n-extern int reg_not_elim_operand ();\n-extern int normal_memory_operand ();\n-extern int reg_no_subreg_operand ();\n-extern void alpha_set_memflags ();\n-extern int aligned_memory_operand ();\n-extern void get_aligned_mem ();\n-extern void alpha_expand_unaligned_load ();\n-extern void alpha_expand_unaligned_store ();\n-extern int alpha_expand_block_move ();\n-extern int alpha_expand_block_clear ();\n-extern void alpha_expand_prologue ();\n-extern void alpha_expand_epilogue ();\n-extern union tree_node *alpha_build_va_list ();\n-extern void alpha_va_start ();\n-extern struct rtx_def *alpha_va_arg ();"}, {"sha": "a4e1acc1c9c02ef145be52a0cf054a1b671b08b5", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa388f29a30a2fa98275479ee44b9448786f62ed/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa388f29a30a2fa98275479ee44b9448786f62ed/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=aa388f29a30a2fa98275479ee44b9448786f62ed", "patch": "@@ -270,27 +270,29 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n extern void text_section ();\n \n-#define CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-const_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (!USE_CONST_SECTION)\t\t\t\t\t\t\\\n-    text_section();\t\t\t\t\t\t\t\\\n-  else if (in_section != in_const)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP);\t\t\\\n-      in_section = in_const;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+#define CONST_SECTION_FUNCTION\t\t\t\t\t\\\n+void const_section PROTO ((void));\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+const_section ()\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (!USE_CONST_SECTION)\t\t\t\t\t\\\n+    text_section();\t\t\t\t\t\t\\\n+  else if (in_section != in_const)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP);\t\\\n+      in_section = in_const;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n }\n \n-#define SECTION_FUNCTION_TEMPLATE(FN, ENUM, OP)\t\t\t\t\\\n-void FN ()\t\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != ENUM)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", OP);\t\t\t\t\\\n-      in_section = ENUM;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+#define SECTION_FUNCTION_TEMPLATE(FN, ENUM, OP)\t\\\n+void FN PROTO ((void));\t\t\t\t\\\n+void FN ()\t\t\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  if (in_section != ENUM)\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", OP);\t\\\n+      in_section = ENUM;\t\t\t\\\n+    }\t\t\t\t\t\t\\\n }\n \n "}, {"sha": "3ed9c4ba64a957f4cf21d6bd6eb8e306692b8a89", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa388f29a30a2fa98275479ee44b9448786f62ed/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa388f29a30a2fa98275479ee44b9448786f62ed/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=aa388f29a30a2fa98275479ee44b9448786f62ed", "patch": "@@ -80,6 +80,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\" /* ASM_OUTPUT_SOURCE_LINE may refer to sdb functions.  */\n #include \"dbxout.h\"\n #include \"toplev.h\"\n+#include \"tm_p.h\"\n \n #ifdef XCOFF_DEBUGGING_INFO\n #include \"xcoffout.h\""}, {"sha": "d8559d4c1a0ae9d9e5389b9cad7849adffba77f9", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa388f29a30a2fa98275479ee44b9448786f62ed/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa388f29a30a2fa98275479ee44b9448786f62ed/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=aa388f29a30a2fa98275479ee44b9448786f62ed", "patch": "@@ -42,10 +42,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"dbxout.h\"\n #include \"sdbout.h\"\n-\n #include \"obstack.h\"\n #include \"c-pragma.h\"\n #include \"ggc.h\"\n+#include \"tm_p.h\"\n \n #ifdef XCOFF_DEBUGGING_INFO\n #include \"xcoffout.h\""}]}