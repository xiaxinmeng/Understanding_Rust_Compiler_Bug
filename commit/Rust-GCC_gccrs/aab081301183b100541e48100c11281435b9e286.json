{"sha": "aab081301183b100541e48100c11281435b9e286", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFiMDgxMzAxMTgzYjEwMDU0MWU0ODEwMGMxMTI4MTQzNWI5ZTI4Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-02-22T14:06:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-02-22T14:06:51Z"}, "message": "[multiple changes]\n\n2012-02-22  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch7.adb (Process_Declarations): Minor reformatting. Simplify the\n\tentry point for renamings. Detect a case where a source object has\n\tbeen transformed into a class-wide renaming of a call to\n\tAda.Tags.Displace.\n\t* exp_util.adb (Is_Displacement_Of_Ctrl_Function_Result): New routine.\n\t(Is_Finalizable_Transient): Minor reformatting.\n\t(Is_Tag_To_Class_Wide_Conversion): Minor reformatting.\n\t(Requires_Cleanup_Actions): Minor reformatting. Simplify the\n\tentry point for renamings. Detect a case where a source object\n\thas been transformed into a class-wide renaming of a call to\n\tAda.Tags.Displace.\n\t* exp_util.ads (Is_Displacement_Of_Ctrl_Function_Result): New routine.\n\t(Is_Tag_To_Class_Wide_Conversion): Minor reformatting.\n\n2012-02-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* lib-load.adb (Load_Unit): If the prefix of the name in a\n\twith-clause is a renaming, add a with-clause on the original unit.\n\t* sem_ch10.adb (Build_Unit_Name): Remove code made obsolete by\n\tnew handling of renamings in with-clauses.\n\nFrom-SVN: r184478", "tree": {"sha": "579eab415ecc35475d42bee4f58d1bcc575e91fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/579eab415ecc35475d42bee4f58d1bcc575e91fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aab081301183b100541e48100c11281435b9e286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aab081301183b100541e48100c11281435b9e286", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aab081301183b100541e48100c11281435b9e286", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aab081301183b100541e48100c11281435b9e286/comments", "author": null, "committer": null, "parents": [{"sha": "31af8899966d8096de6a78a5de2ba53c11a98bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31af8899966d8096de6a78a5de2ba53c11a98bae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31af8899966d8096de6a78a5de2ba53c11a98bae"}], "stats": {"total": 194, "additions": 152, "deletions": 42}, "files": [{"sha": "0347dcc5bd7d75b5588126db5786e4c8184ca9db", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aab081301183b100541e48100c11281435b9e286/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aab081301183b100541e48100c11281435b9e286/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=aab081301183b100541e48100c11281435b9e286", "patch": "@@ -1816,7 +1816,7 @@ package body Exp_Ch7 is\n                  and then Needs_Finalization (Obj_Typ)\n                  and then not (Ekind (Obj_Id) = E_Constant\n                                 and then not Has_Completion (Obj_Id))\n-                 and then not Is_Tag_To_CW_Conversion (Obj_Id)\n+                 and then not Is_Tag_To_Class_Wide_Conversion (Obj_Id)\n                then\n                   Processing_Actions;\n \n@@ -1894,10 +1894,7 @@ package body Exp_Ch7 is\n \n             --  Specific cases of object renamings\n \n-            elsif Nkind (Decl) = N_Object_Renaming_Declaration\n-              and then Nkind (Name (Decl)) = N_Explicit_Dereference\n-              and then Nkind (Prefix (Name (Decl))) = N_Identifier\n-            then\n+            elsif Nkind (Decl) = N_Object_Renaming_Declaration then\n                Obj_Id  := Defining_Identifier (Decl);\n                Obj_Typ := Base_Type (Etype (Obj_Id));\n \n@@ -1919,6 +1916,19 @@ package body Exp_Ch7 is\n                  and then Present (Return_Flag_Or_Transient_Decl (Obj_Id))\n                then\n                   Processing_Actions (Has_No_Init => True);\n+\n+               --  Detect a case where a source object has been initialized by\n+               --  a controlled function call which was later rewritten as a\n+               --  class-wide conversion of Ada.Tags.Displace.\n+\n+               --     Obj : Class_Wide_Type := Function_Call (...);\n+\n+               --     Temp : ... := Function_Call (...)'reference;\n+               --     Obj  : Class_Wide_Type renames\n+               --              (... Ada.Tags.Displace (Temp));\n+\n+               elsif Is_Displacement_Of_Ctrl_Function_Result (Obj_Id) then\n+                  Processing_Actions (Has_No_Init => True);\n                end if;\n \n             --  Inspect the freeze node of an access-to-controlled type and"}, {"sha": "34bf030e2050571da655873df250abb4d0ef90cb", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 109, "deletions": 11, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aab081301183b100541e48100c11281435b9e286/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aab081301183b100541e48100c11281435b9e286/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=aab081301183b100541e48100c11281435b9e286", "patch": "@@ -3940,6 +3940,92 @@ package body Exp_Util is\n       return True;\n    end Is_All_Null_Statements;\n \n+   ---------------------------------------------\n+   -- Is_Displacement_Of_Ctrl_Function_Result --\n+   ---------------------------------------------\n+\n+   function Is_Displacement_Of_Ctrl_Function_Result\n+     (Obj_Id : Entity_Id) return Boolean\n+   is\n+      function Initialized_By_Ctrl_Function (N : Node_Id) return Boolean;\n+      --  Determine whether object declaration N is initialized by a controlled\n+      --  function call.\n+\n+      function Is_Displace_Call (N : Node_Id) return Boolean;\n+      --  Determine whether a particular node is a call to Ada.Tags.Displace.\n+      --  The call might be nested within other actions such as conversions.\n+\n+      ----------------------------------\n+      -- Initialized_By_Ctrl_Function --\n+      ----------------------------------\n+\n+      function Initialized_By_Ctrl_Function (N : Node_Id) return Boolean is\n+         Expr : constant Node_Id := Original_Node (Expression (N));\n+\n+      begin\n+         return\n+            Nkind (Expr) = N_Function_Call\n+              and then Needs_Finalization (Etype (Expr));\n+      end Initialized_By_Ctrl_Function;\n+\n+      ----------------------\n+      -- Is_Displace_Call --\n+      ----------------------\n+\n+      function Is_Displace_Call (N : Node_Id) return Boolean is\n+         Call : Node_Id := N;\n+\n+      begin\n+         --  Strip various actions which may precede a call to Displace\n+\n+         loop\n+            if Nkind (Call) = N_Explicit_Dereference then\n+               Call := Prefix (Call);\n+\n+            elsif Nkind_In (Call, N_Type_Conversion,\n+                                  N_Unchecked_Type_Conversion)\n+            then\n+               Call := Expression (Call);\n+            else\n+               exit;\n+            end if;\n+         end loop;\n+\n+         return\n+           Nkind (Call) = N_Function_Call\n+             and then Is_RTE (Entity (Name (Call)), RE_Displace);\n+      end Is_Displace_Call;\n+\n+      --  Local variables\n+\n+      Decl      : constant Node_Id   := Parent (Obj_Id);\n+      Obj_Typ   : constant Entity_Id := Base_Type (Etype (Obj_Id));\n+      Orig_Decl : constant Node_Id   := Original_Node (Decl);\n+\n+   --  Start of processing for Is_Displacement_Of_Ctrl_Function_Result\n+\n+   begin\n+      --  Detect the following case:\n+\n+      --     Obj : Class_Wide_Type := Function_Call (...);\n+\n+      --  which is rewritten into:\n+\n+      --     Temp : ... := Function_Call (...)'reference;\n+      --     Obj  : Class_Wide_Type renames (... Ada.Tags.Displace (Temp));\n+\n+      --  when the return type of the function and the class-wide type require\n+      --  dispatch table pointer displacement.\n+\n+      return\n+        Nkind (Decl) = N_Object_Renaming_Declaration\n+          and then Nkind (Orig_Decl) = N_Object_Declaration\n+          and then Comes_From_Source (Orig_Decl)\n+          and then Initialized_By_Ctrl_Function (Orig_Decl)\n+          and then Is_Class_Wide_Type (Obj_Typ)\n+          and then Is_Displace_Call (Renamed_Object (Obj_Id));\n+   end Is_Displacement_Of_Ctrl_Function_Result;\n+\n    ------------------------------\n    -- Is_Finalizable_Transient --\n    ------------------------------\n@@ -4321,7 +4407,7 @@ package body Exp_Util is\n \n           --  Do not consider conversions of tags to class-wide types\n \n-          and then not Is_Tag_To_CW_Conversion (Obj_Id)\n+          and then not Is_Tag_To_Class_Wide_Conversion (Obj_Id)\n \n           --  Do not consider containers in the context of iterator loops. Such\n           --  transient objects must exist for as long as the loop is around,\n@@ -4851,11 +4937,13 @@ package body Exp_Util is\n       end if;\n    end Is_Renamed_Object;\n \n-   -----------------------------\n-   -- Is_Tag_To_CW_Conversion --\n-   -----------------------------\n+   -------------------------------------\n+   -- Is_Tag_To_Class_Wide_Conversion --\n+   -------------------------------------\n \n-   function Is_Tag_To_CW_Conversion (Obj_Id : Entity_Id) return Boolean is\n+   function Is_Tag_To_Class_Wide_Conversion\n+     (Obj_Id : Entity_Id) return Boolean\n+   is\n       Expr : constant Node_Id := Expression (Parent (Obj_Id));\n \n    begin\n@@ -4864,7 +4952,7 @@ package body Exp_Util is\n           and then Present (Expr)\n           and then Nkind (Expr) = N_Unchecked_Type_Conversion\n           and then Etype (Expression (Expr)) = RTE (RE_Tag);\n-   end Is_Tag_To_CW_Conversion;\n+   end Is_Tag_To_Class_Wide_Conversion;\n \n    ----------------------------\n    -- Is_Untagged_Derivation --\n@@ -7015,7 +7103,7 @@ package body Exp_Util is\n               and then Needs_Finalization (Obj_Typ)\n               and then not (Ekind (Obj_Id) = E_Constant\n                               and then not Has_Completion (Obj_Id))\n-              and then not Is_Tag_To_CW_Conversion (Obj_Id)\n+              and then not Is_Tag_To_Class_Wide_Conversion (Obj_Id)\n             then\n                return True;\n \n@@ -7064,10 +7152,7 @@ package body Exp_Util is\n \n          --  Specific cases of object renamings\n \n-         elsif Nkind (Decl) = N_Object_Renaming_Declaration\n-           and then Nkind (Name (Decl)) = N_Explicit_Dereference\n-           and then Nkind (Prefix (Name (Decl))) = N_Identifier\n-         then\n+         elsif Nkind (Decl) = N_Object_Renaming_Declaration then\n             Obj_Id  := Defining_Identifier (Decl);\n             Obj_Typ := Base_Type (Etype (Obj_Id));\n \n@@ -7089,6 +7174,19 @@ package body Exp_Util is\n               and then Present (Return_Flag_Or_Transient_Decl (Obj_Id))\n             then\n                return True;\n+\n+            --  Detect a case where a source object has been initialized by a\n+            --  controlled function call which was later rewritten as a class-\n+            --  wide conversion of Ada.Tags.Displace.\n+\n+            --     Obj : Class_Wide_Type := Function_Call (...);\n+\n+            --     Temp : ... := Function_Call (...)'reference;\n+            --     Obj  : Class_Wide_Type renames\n+            --              (... Ada.Tags.Displace (Temp));\n+\n+            elsif Is_Displacement_Of_Ctrl_Function_Result (Obj_Id) then\n+               return True;\n             end if;\n \n          --  Inspect the freeze node of an access-to-controlled type and look"}, {"sha": "97e9b5c9a56abd3a287874f06c0f5bb7f36f1480", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aab081301183b100541e48100c11281435b9e286/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aab081301183b100541e48100c11281435b9e286/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=aab081301183b100541e48100c11281435b9e286", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -521,6 +521,12 @@ package Exp_Util is\n    --  False otherwise. True for an empty list. It is an error to call this\n    --  routine with No_List as the argument.\n \n+   function Is_Displacement_Of_Ctrl_Function_Result\n+     (Obj_Id : Entity_Id) return Boolean;\n+   --  Determine whether Obj_Id is a source object that has been initialized by\n+   --  a controlled function call later rewritten as a class-wide conversion of\n+   --  Ada.Tags.Displace.\n+\n    function Is_Finalizable_Transient\n      (Decl     : Node_Id;\n       Rel_Node : Node_Id) return Boolean;\n@@ -587,7 +593,8 @@ package Exp_Util is\n    --  We consider that a (1 .. 2) is a renamed object since it is the prefix\n    --  of the name in the renaming declaration.\n \n-   function Is_Tag_To_CW_Conversion (Obj_Id : Entity_Id) return Boolean;\n+   function Is_Tag_To_Class_Wide_Conversion\n+     (Obj_Id : Entity_Id) return Boolean;\n    --  Determine whether object Obj_Id is the result of a tag-to-class-wide\n    --  type conversion.\n "}, {"sha": "be4c5376c36116dba939f8d32fa76f82aacb780a", "filename": "gcc/ada/lib-load.adb", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aab081301183b100541e48100c11281435b9e286/gcc%2Fada%2Flib-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aab081301183b100541e48100c11281435b9e286/gcc%2Fada%2Flib-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.adb?ref=aab081301183b100541e48100c11281435b9e286", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -406,9 +406,25 @@ package body Lib.Load is\n               New_Child\n                 (Load_Name, Get_Unit_Name (Name (Unit (Cunit (Unump)))));\n \n+            --  If the load is for a with_clause, for visibility purposes both\n+            --  the renamed entity and renaming one must be available in the\n+            --  current unit: the renamed one in order to retrieve the child\n+            --  unit, and the original one because it may be used as a prefix\n+            --  in the body of the current unit. We add an explicit with_clause\n+            --  for the original parent so that the renaming declaration is\n+            --  properly loaded and analyzed.\n+\n+            if Present (With_Node) then\n+               Insert_After (With_Node,\n+                 Make_With_Clause (Sloc (With_Node),\n+                   Name => Copy_Separate_Tree (Prefix (Name (With_Node)))));\n+            end if;\n+\n             --  Save the renaming entity, to establish its visibility when\n             --  installing the context. The implicit with is on this entity,\n-            --  not on the package it renames.\n+            --  not on the package it renames. This is somewhat redundant given\n+            --  the with_clause just created, but it simplifies subsequent\n+            --  expansion of the current with_clause. Optimizable ???\n \n             if Nkind (Error_Node) = N_With_Clause\n               and then Nkind (Name (Error_Node)) = N_Selected_Component"}, {"sha": "1aa25c2a54293f551d80add4c3ce4541e2ba4b5e", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aab081301183b100541e48100c11281435b9e286/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aab081301183b100541e48100c11281435b9e286/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=aab081301183b100541e48100c11281435b9e286", "patch": "@@ -2936,32 +2936,11 @@ package body Sem_Ch10 is\n \n       function Build_Unit_Name (Nam : Node_Id) return Node_Id is\n          Ent      : Entity_Id;\n-         Renaming : Entity_Id;\n          Result   : Node_Id;\n \n       begin\n          if Nkind (Nam) = N_Identifier then\n-\n-            --  If the parent unit P in the name of the with_clause for P.Q is\n-            --  a renaming of package R, then the entity of the parent is set\n-            --  to R, but the identifier retains Chars (P) to be consistent\n-            --  with the source (see details in lib-load). However the implicit\n-            --  with_clause for the parent must make the entity for P visible,\n-            --  because P.Q may be used as a prefix within the current unit.\n-            --  The entity for P is the current_entity with that name, because\n-            --  the package renaming declaration for it has just been analyzed.\n-            --  Note that this case can only happen if P.Q has already appeared\n-            --  in a previous with_clause in a related unit, such as the\n-            --  library body of the current unit.\n-\n-            if Chars (Nam) /= Chars (Entity (Nam)) then\n-               Renaming := Current_Entity (Nam);\n-               pragma Assert (Renamed_Entity (Renaming) = Entity (Nam));\n-               return New_Occurrence_Of (Renaming, Loc);\n-\n-            else\n-               return New_Occurrence_Of (Entity (Nam), Loc);\n-            end if;\n+            return New_Occurrence_Of (Entity (Nam), Loc);\n \n          else\n             Ent := Entity (Nam);"}]}