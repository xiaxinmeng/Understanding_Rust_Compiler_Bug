{"sha": "1394237ec94d0d377f7c2cf7359f3c899c2ff482", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM5NDIzN2VjOTRkMGQzNzdmN2MyY2Y3MzU5ZjNjODk5YzJmZjQ4Mg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-10-14T14:32:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-10-14T14:32:24Z"}, "message": "lto.c (gimple_canonical_types): Move out-of GC space.\n\n2013-10-14  Richard Biener  <rguenther@suse.de>\n\n\tlto/\n\t* lto.c (gimple_canonical_types): Move out-of GC space.\n\t(canonical_type_hash_cache): Make a pointer-map.\n\t(num_canonical_type_hash_entries, num_canonical_type_hash_queries):\n\tNew counters.\n\t(iterative_hash_canonical_type): Adjust.\n\t(read_cgraph_and_symbols): Likewise.\n\t(print_lto_report_1): Likewise.\n\nFrom-SVN: r203566", "tree": {"sha": "116ede8c80be40e20d338b6fbe01ebdbc3466f28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/116ede8c80be40e20d338b6fbe01ebdbc3466f28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1394237ec94d0d377f7c2cf7359f3c899c2ff482", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1394237ec94d0d377f7c2cf7359f3c899c2ff482", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1394237ec94d0d377f7c2cf7359f3c899c2ff482", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1394237ec94d0d377f7c2cf7359f3c899c2ff482/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "23e0b03aa69a73312b9892a1cd298c284bef0fba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23e0b03aa69a73312b9892a1cd298c284bef0fba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23e0b03aa69a73312b9892a1cd298c284bef0fba"}], "stats": {"total": 55, "additions": 28, "deletions": 27}, "files": [{"sha": "15c9c01f65dc2fc275df62a9ab96c95c5e7e627a", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1394237ec94d0d377f7c2cf7359f3c899c2ff482/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1394237ec94d0d377f7c2cf7359f3c899c2ff482/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=1394237ec94d0d377f7c2cf7359f3c899c2ff482", "patch": "@@ -1,3 +1,13 @@\n+2013-10-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* lto.c (gimple_canonical_types): Move out-of GC space.\n+\t(canonical_type_hash_cache): Make a pointer-map.\n+\t(num_canonical_type_hash_entries, num_canonical_type_hash_queries):\n+\tNew counters.\n+\t(iterative_hash_canonical_type): Adjust.\n+\t(read_cgraph_and_symbols): Likewise.\n+\t(print_lto_report_1): Likewise.\n+\n 2013-10-14  Richard Biener  <rguenther@suse.de>\n \n \t* lto.c (gimple_types, type_hash_cache, struct type_pair_d,"}, {"sha": "ee89609ee447f4699e55bb5d6dd478b949635aa7", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1394237ec94d0d377f7c2cf7359f3c899c2ff482/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1394237ec94d0d377f7c2cf7359f3c899c2ff482/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=1394237ec94d0d377f7c2cf7359f3c899c2ff482", "patch": "@@ -255,10 +255,10 @@ lto_read_in_decl_state (struct data_in *data_in, const uint32_t *data,\n \n \n /* Global canonical type table.  */\n-static GTY((if_marked (\"ggc_marked_p\"), param_is (union tree_node)))\n-  htab_t gimple_canonical_types;\n-static GTY((if_marked (\"tree_int_map_marked_p\"), param_is (struct tree_int_map)))\n-  htab_t canonical_type_hash_cache;\n+static htab_t gimple_canonical_types;\n+static pointer_map <hashval_t> *canonical_type_hash_cache;\n+static unsigned long num_canonical_type_hash_entries;\n+static unsigned long num_canonical_type_hash_queries;\n \n /* Returning a hash value for gimple type TYPE combined with VAL.\n \n@@ -269,12 +269,12 @@ static hashval_t\n iterative_hash_canonical_type (tree type, hashval_t val)\n {\n   hashval_t v;\n-  void **slot;\n-  struct tree_int_map *mp, m;\n+  hashval_t *slot;\n \n-  m.base.from = type;\n-  if ((slot = htab_find_slot (canonical_type_hash_cache, &m, NO_INSERT)))\n-    return iterative_hash_hashval_t (((struct tree_int_map *) *slot)->to, val);\n+  num_canonical_type_hash_queries++;\n+  slot = canonical_type_hash_cache->contains (type);\n+  if (slot)\n+    return iterative_hash_hashval_t (*slot, val);\n \n   /* Combine a few common features of types so that types are grouped into\n      smaller sets; when searching for existing matching types to merge,\n@@ -374,14 +374,9 @@ iterative_hash_canonical_type (tree type, hashval_t val)\n     }\n \n   /* Cache the just computed hash value.  */\n-  mp = ggc_alloc_cleared_tree_int_map ();\n-  mp->base.from = type;\n-  mp->to = v;\n-  /* As we recurse the hashtable may expand between looking up the\n-     cached value (and not finding one) and here, so we have to\n-     re-lookup the slot.  */\n-  slot = htab_find_slot (canonical_type_hash_cache, &m, INSERT);\n-  *slot = (void *) mp;\n+  num_canonical_type_hash_entries++;\n+  slot = canonical_type_hash_cache->insert (type);\n+  *slot = v;\n \n   return iterative_hash_hashval_t (v, val);\n }\n@@ -2749,8 +2744,7 @@ read_cgraph_and_symbols (unsigned nfiles, const char **fnames)\n     }\n   cgraph_state = CGRAPH_LTO_STREAMING;\n \n-  canonical_type_hash_cache = htab_create_ggc (512, tree_int_map_hash,\n-\t\t\t\t\t       tree_int_map_eq, NULL);\n+  canonical_type_hash_cache = new pointer_map <hashval_t>;\n   gimple_canonical_types = htab_create_ggc (16381, gimple_canonical_type_hash,\n \t\t\t\t\t    gimple_canonical_type_eq, 0);\n   gcc_obstack_init (&tree_scc_hash_obstack);\n@@ -2817,7 +2811,7 @@ read_cgraph_and_symbols (unsigned nfiles, const char **fnames)\n   obstack_free (&tree_scc_hash_obstack, NULL);\n   htab_delete (gimple_canonical_types);\n   gimple_canonical_types = NULL;\n-  htab_delete (canonical_type_hash_cache);\n+  delete canonical_type_hash_cache;\n   canonical_type_hash_cache = NULL;\n   ggc_collect ();\n \n@@ -3023,13 +3017,10 @@ print_lto_report_1 (void)\n \t       (long) gimple_canonical_types->searches,\n \t       (long) gimple_canonical_types->collisions,\n \t       htab_collisions (gimple_canonical_types));\n-      fprintf (stderr, \"[%s] GIMPLE canonical type hash table: size %ld, \"\n-\t       \"%ld elements, %ld searches, %ld collisions (ratio: %f)\\n\", pfx,\n-\t       (long) htab_size (canonical_type_hash_cache),\n-\t       (long) htab_elements (canonical_type_hash_cache),\n-\t       (long) canonical_type_hash_cache->searches,\n-\t       (long) canonical_type_hash_cache->collisions,\n-\t       htab_collisions (canonical_type_hash_cache));\n+      fprintf (stderr, \"[%s] GIMPLE canonical type pointer-map: \"\n+\t       \"%lu elements, %ld searches\\n\", pfx,\n+\t       num_canonical_type_hash_entries,\n+\t       num_canonical_type_hash_queries);\n     }\n \n   print_lto_report (pfx);"}]}