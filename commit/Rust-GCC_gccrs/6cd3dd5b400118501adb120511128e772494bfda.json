{"sha": "6cd3dd5b400118501adb120511128e772494bfda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNkM2RkNWI0MDAxMTg1MDFhZGIxMjA1MTExMjhlNzcyNDk0YmZkYQ==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@il.ibm.com", "date": "2005-03-08T11:12:00Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2005-03-08T11:12:00Z"}, "message": "tree-vect-analyze.c (vect_object_analysis): Analyze initial condition of access function instead of base.\n\n        * tree-vect-analyze.c (vect_object_analysis): Analyze initial\n        condition of access function instead of base.\n\nFrom-SVN: r96092", "tree": {"sha": "30d5b23102a5d34d1cd60781d1132cca58e12209", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30d5b23102a5d34d1cd60781d1132cca58e12209"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cd3dd5b400118501adb120511128e772494bfda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd3dd5b400118501adb120511128e772494bfda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cd3dd5b400118501adb120511128e772494bfda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd3dd5b400118501adb120511128e772494bfda/comments", "author": {"login": "irar2", "id": 16818592, "node_id": "MDQ6VXNlcjE2ODE4NTky", "avatar_url": "https://avatars.githubusercontent.com/u/16818592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irar2", "html_url": "https://github.com/irar2", "followers_url": "https://api.github.com/users/irar2/followers", "following_url": "https://api.github.com/users/irar2/following{/other_user}", "gists_url": "https://api.github.com/users/irar2/gists{/gist_id}", "starred_url": "https://api.github.com/users/irar2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irar2/subscriptions", "organizations_url": "https://api.github.com/users/irar2/orgs", "repos_url": "https://api.github.com/users/irar2/repos", "events_url": "https://api.github.com/users/irar2/events{/privacy}", "received_events_url": "https://api.github.com/users/irar2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e561e5685285946d787a7e185b7739685fdecb53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e561e5685285946d787a7e185b7739685fdecb53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e561e5685285946d787a7e185b7739685fdecb53"}], "stats": {"total": 55, "additions": 52, "deletions": 3}, "files": [{"sha": "192220b347a3d023baab2f150a6a516d63fad497", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd3dd5b400118501adb120511128e772494bfda/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd3dd5b400118501adb120511128e772494bfda/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6cd3dd5b400118501adb120511128e772494bfda", "patch": "@@ -1,3 +1,9 @@\n+2005-03-08  Ira Rosen  <irar@il.ibm.com>\n+\n+\tPR tree-optimization/20122\n+\t* tree-vect-analyze.c (vect_object_analysis): Analyze initial\n+\tcondition of access function instead of base.\n+\n 2005-03-07  Jeff Law  <law@redhat.com>\n \t    Steven Bosscher  <stevenb@suse.de>\n "}, {"sha": "5ad5eedbef79a87b969a75689b86bc78c0e91a12", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd3dd5b400118501adb120511128e772494bfda/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd3dd5b400118501adb120511128e772494bfda/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6cd3dd5b400118501adb120511128e772494bfda", "patch": "@@ -1,3 +1,7 @@\n+2005-03-08  Ira Rosen  <irar@il.ibm.com>\n+\n+\t* gcc.dg/vect/pr20122.c: New test.\n+\n 2005-03-07  Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/tree-ssa/20030821-1.c: Verify that the computed goto"}, {"sha": "ff6ec75e5abb0471dad4661956fe950396663c76", "filename": "gcc/testsuite/gcc.dg/vect/pr20122.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd3dd5b400118501adb120511128e772494bfda/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr20122.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd3dd5b400118501adb120511128e772494bfda/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr20122.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr20122.c?ref=6cd3dd5b400118501adb120511128e772494bfda", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+typedef short ashort __attribute__ ((__aligned__(16)));\n+ashort Kernshort[24];\n+static void VecBug(ashort Kernel[8][24]) __attribute__((noinline));\n+static void VecBug(ashort Kernel[8][24]);\n+\n+/* Doesn't occur of only inner-loop. */\n+static void VecBug(ashort Kernel[8][24])\n+{\n+  int k,i;\n+    for (k = 0; k<8; k++)\n+        for (i = 0; i<24; i++)\n+            Kernshort[i] = Kernel[k][i];\n+}\n+\n+int main (int argc, char **argv)\n+{\n+    check_vect ();\n+\n+    ashort Kernel[8][24];\n+    int k,i;\n+\n+    for (k = 0; k<8; k++)\n+        for (i = 0; i<24; i++)\n+            Kernel[k][i] = 0;\n+\n+    VecBug(Kernel);\n+\n+    return 0;\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" } } */\n+"}, {"sha": "37445043f67d0af59cecf2d046c48aab4992bca8", "filename": "gcc/tree-vect-analyze.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd3dd5b400118501adb120511128e772494bfda/gcc%2Ftree-vect-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd3dd5b400118501adb120511128e772494bfda/gcc%2Ftree-vect-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-analyze.c?ref=6cd3dd5b400118501adb120511128e772494bfda", "patch": "@@ -1654,10 +1654,11 @@ vect_object_analysis (tree memref, tree stmt, bool is_read,\n \t\tfprintf (vect_dump, \"not vectorized: ptr is loop invariant.\");\t\n \t      return NULL_TREE;\n \t    }\n-\t  /* Since there exists DR for MEMREF, we are analyzing the base of\n-\t     handled component, which not necessary has evolution in the \n+\t  /* Since there exists DR for MEMREF, we are analyzing the init of \n+\t     the access function, which not necessary has evolution in the \n \t     loop.  */\n-\t  address_to_analyze = TREE_OPERAND (base, 0);\n+\t  address_to_analyze = initial_condition_in_loop_num (access_fn,\n+                                                              loop->num);\n \t}\n       \n       /* 3.3 set data-reference structure for MEMREF.  */"}]}