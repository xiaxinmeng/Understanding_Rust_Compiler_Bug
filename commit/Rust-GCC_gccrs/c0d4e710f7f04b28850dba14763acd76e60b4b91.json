{"sha": "c0d4e710f7f04b28850dba14763acd76e60b4b91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBkNGU3MTBmN2YwNGIyODg1MGRiYTE0NzYzYWNkNzZlNjBiNGI5MQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-31T22:09:22Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-31T22:09:22Z"}, "message": "sh.c: Replace \"gen_rtx (FOO, \" with \"gen_rtx_FOO (\".\n\n\t* config/sh/sh.c: Replace \"gen_rtx (FOO, \" with \"gen_rtx_FOO (\".\n\t* config/sh/sh.h: Likewise.\n\t* config/sh/sh.md: Likewise.\n\nFrom-SVN: r77051", "tree": {"sha": "97f4bec0469d9f379f9c17feca84cbd77b6135cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97f4bec0469d9f379f9c17feca84cbd77b6135cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0d4e710f7f04b28850dba14763acd76e60b4b91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0d4e710f7f04b28850dba14763acd76e60b4b91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0d4e710f7f04b28850dba14763acd76e60b4b91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0d4e710f7f04b28850dba14763acd76e60b4b91/comments", "author": null, "committer": null, "parents": [{"sha": "ffa67767d08dbb9666c6e128d0273950cf4934b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffa67767d08dbb9666c6e128d0273950cf4934b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffa67767d08dbb9666c6e128d0273950cf4934b8"}], "stats": {"total": 132, "additions": 69, "deletions": 63}, "files": [{"sha": "82d69dab144d6f6de57f65cb5525e64fb19aae30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d4e710f7f04b28850dba14763acd76e60b4b91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d4e710f7f04b28850dba14763acd76e60b4b91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0d4e710f7f04b28850dba14763acd76e60b4b91", "patch": "@@ -1,3 +1,9 @@\n+2004-01-31  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/sh/sh.c: Replace \"gen_rtx (FOO, \" with \"gen_rtx_FOO (\".\n+\t* config/sh/sh.h: Likewise.\n+\t* config/sh/sh.md: Likewise.\n+\n 2004-01-31  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* doc/invoke.texi (SPARC options): Restructure and update."}, {"sha": "7d5eb7d17ac9d3c00694ee02de5ba9a435c40e09", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d4e710f7f04b28850dba14763acd76e60b4b91/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d4e710f7f04b28850dba14763acd76e60b4b91/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=c0d4e710f7f04b28850dba14763acd76e60b4b91", "patch": "@@ -676,8 +676,8 @@ expand_block_move (rtx *operands)\n \t  tree entry_name;\n \t  rtx sym;\n \t  rtx func_addr_rtx;\n-\t  rtx r4 = gen_rtx (REG, SImode, 4);\n-\t  rtx r5 = gen_rtx (REG, SImode, 5);\n+\t  rtx r4 = gen_rtx_REG (SImode, 4);\n+\t  rtx r5 = gen_rtx_REG (SImode, 5);\n \n \t  entry_name = get_identifier (\"__movstrSI12_i4\");\n \n@@ -694,9 +694,9 @@ expand_block_move (rtx *operands)\n \t  rtx sym;\n \t  rtx func_addr_rtx;\n \t  int dwords;\n-\t  rtx r4 = gen_rtx (REG, SImode, 4);\n-\t  rtx r5 = gen_rtx (REG, SImode, 5);\n-\t  rtx r6 = gen_rtx (REG, SImode, 6);\n+\t  rtx r4 = gen_rtx_REG (SImode, 4);\n+\t  rtx r5 = gen_rtx_REG (SImode, 5);\n+\t  rtx r6 = gen_rtx_REG (SImode, 6);\n \n \t  entry_name = get_identifier (bytes & 4\n \t\t\t\t       ? \"__movstr_i4_odd\"\n@@ -956,13 +956,13 @@ prepare_scc_operands (enum rtx_code code)\n \n   if (TARGET_SH4 && GET_MODE_CLASS (mode) == MODE_FLOAT)\n     (mode == SFmode ? emit_sf_insn : emit_df_insn)\n-     (gen_rtx (PARALLEL, VOIDmode, gen_rtvec (2,\n-\t\tgen_rtx (SET, VOIDmode, t_reg,\n+     (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2,\n+\t\tgen_rtx_SET (VOIDmode, t_reg,\n \t\t\t gen_rtx (code, SImode,\n \t\t\t\t  sh_compare_op0, sh_compare_op1)),\n-\t\tgen_rtx (USE, VOIDmode, get_fpscr_rtx ()))));\n+\t\tgen_rtx_USE (VOIDmode, get_fpscr_rtx ()))));\n   else\n-    emit_insn (gen_rtx (SET, VOIDmode, t_reg,\n+    emit_insn (gen_rtx_SET (VOIDmode, t_reg,\n \t\t\tgen_rtx (code, SImode, sh_compare_op0,\n \t\t\t\t sh_compare_op1)));\n \n@@ -1001,9 +1001,9 @@ from_compare (rtx *operands, int code)\n \t\t\t\t sh_compare_op1));\n   if (TARGET_SH4 && GET_MODE_CLASS (mode) == MODE_FLOAT)\n     {\n-      insn = gen_rtx (PARALLEL, VOIDmode,\n+      insn = gen_rtx_PARALLEL (VOIDmode,\n \t\t      gen_rtvec (2, insn,\n-\t\t\t\t gen_rtx (USE, VOIDmode, get_fpscr_rtx ())));\n+\t\t\t\t gen_rtx_USE (VOIDmode, get_fpscr_rtx ())));\n       (mode == SFmode ? emit_sf_insn : emit_df_insn) (insn);\n     }\n   else\n@@ -4131,7 +4131,7 @@ sh_reorg (void)\n \t\t\t}\n \t\t      last_float_move = scan;\n \t\t      last_float = src;\n-\t\t      newsrc = gen_rtx (MEM, mode,\n+\t\t      newsrc = gen_rtx_MEM (mode,\n \t\t\t\t\t(((TARGET_SH4 && ! TARGET_FMOVD)\n \t\t\t\t\t  || REGNO (dst) == FPUL_REG)\n \t\t\t\t\t ? r0_inc_rtx\n@@ -5905,7 +5905,7 @@ sh_builtin_saveregs (void)\n \t  mem = gen_rtx_MEM (DFmode, fpregs);\n \t  set_mem_alias_set (mem, alias_set);\n \t  emit_move_insn (mem, \n-\t\t\t  gen_rtx (REG, DFmode, BASE_ARG_REG (DFmode) + regno));\n+\t\t\t  gen_rtx_REG (DFmode, BASE_ARG_REG (DFmode) + regno));\n \t}\n       regno = first_floatreg;\n       if (regno & 1)\n@@ -5914,7 +5914,7 @@ sh_builtin_saveregs (void)\n \t  mem = gen_rtx_MEM (SFmode, fpregs);\n \t  set_mem_alias_set (mem, alias_set);\n \t  emit_move_insn (mem,\n-\t\t\t  gen_rtx (REG, SFmode, BASE_ARG_REG (SFmode) + regno\n+\t\t\t  gen_rtx_REG (SFmode, BASE_ARG_REG (SFmode) + regno\n \t\t\t\t\t\t- (TARGET_LITTLE_ENDIAN != 0)));\n \t}\n     }\n@@ -7654,7 +7654,7 @@ get_fpscr_rtx (void)\n {\n   if (! fpscr_rtx)\n     {\n-      fpscr_rtx = gen_rtx (REG, PSImode, FPSCR_REG);\n+      fpscr_rtx = gen_rtx_REG (PSImode, FPSCR_REG);\n       REG_USERVAR_P (fpscr_rtx) = 1;\n       mark_user_reg (fpscr_rtx);\n     }"}, {"sha": "333e967094cc97a6846ea7f82bf1ce4ddbe8d85c", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d4e710f7f04b28850dba14763acd76e60b4b91/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d4e710f7f04b28850dba14763acd76e60b4b91/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=c0d4e710f7f04b28850dba14763acd76e60b4b91", "patch": "@@ -1633,7 +1633,7 @@ extern enum reg_class reg_class_from_letter[];\n    tested here has to be kept in sync with the one in explow.c:promote_mode.  */\n \n #define FUNCTION_VALUE(VALTYPE, FUNC)\t\t\t\t\t\\\n-  gen_rtx (REG,\t\t\t\t\t\t\t\t\\\n+  gen_rtx_REG (\t\t\t\t\t\t\t\t\\\n \t   ((GET_MODE_CLASS (TYPE_MODE (VALTYPE)) == MODE_INT\t\t\\\n \t     && GET_MODE_SIZE (TYPE_MODE (VALTYPE)) < UNITS_PER_WORD\t\\\n \t     && (TREE_CODE (VALTYPE) == INTEGER_TYPE\t\t\t\\\n@@ -2561,9 +2561,9 @@ struct sh_args {\n \t prevalent.  */\t\t\t\t\t\t\t\\\n       if (GET_MODE_SIZE (MODE) + offset - offset_base <= 64)\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  sum = gen_rtx (PLUS, Pmode, XEXP (X, 0),\t\t\t\\\n+\t  sum = gen_rtx_PLUS (Pmode, XEXP (X, 0),\t\t\t\\\n \t\t\t GEN_INT (offset_base));\t\t\t\\\n-\t  X = gen_rtx (PLUS, Pmode, sum, GEN_INT (offset - offset_base));\\\n+\t  X = gen_rtx_PLUS (Pmode, sum, GEN_INT (offset - offset_base));\\\n \t  push_reload (sum, NULL_RTX, &XEXP (X, 0), NULL,\t\t\\\n \t\t       BASE_REG_CLASS, Pmode, VOIDmode, 0, 0, (OPNUM),\t\\\n \t\t       (TYPE));\t\t\t\t\t\t\\"}, {"sha": "72640bc4e71fc23f9c15dc7e593124b21f46eb7c", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d4e710f7f04b28850dba14763acd76e60b4b91/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d4e710f7f04b28850dba14763acd76e60b4b91/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=c0d4e710f7f04b28850dba14763acd76e60b4b91", "patch": "@@ -913,62 +913,62 @@\n \t{\n \tcase EQ:\n \t  emit_insn (gen_seq (tmp));\n-\t  operands[1] = gen_rtx (NE, VOIDmode, tmp, const0_rtx);\n+\t  operands[1] = gen_rtx_NE (VOIDmode, tmp, const0_rtx);\n \t  break;\n \n \tcase NE:\n \t  emit_insn (gen_seq (tmp));\n-\t  operands[1] = gen_rtx (EQ, VOIDmode, tmp, const0_rtx);\n+\t  operands[1] = gen_rtx_EQ (VOIDmode, tmp, const0_rtx);\n \t  break;\n \n \tcase GT:\n \t  emit_insn (gen_sgt (tmp));\n-\t  operands[1] = gen_rtx (NE, VOIDmode, tmp, const0_rtx);\n+\t  operands[1] = gen_rtx_NE (VOIDmode, tmp, const0_rtx);\n \t  break;\n \n \tcase LT:\n \t  emit_insn (gen_slt (tmp));\n-\t  operands[1] = gen_rtx (NE, VOIDmode, tmp, const0_rtx);\n+\t  operands[1] = gen_rtx_NE (VOIDmode, tmp, const0_rtx);\n \t  break;\n \n \tcase GE:\n \t  emit_insn (gen_slt (tmp));\n-\t  operands[1] = gen_rtx (EQ, VOIDmode, tmp, const0_rtx);\n+\t  operands[1] = gen_rtx_EQ (VOIDmode, tmp, const0_rtx);\n \t  break;\n \n \tcase LE:\n \t  emit_insn (gen_sgt (tmp));\n-\t  operands[1] = gen_rtx (EQ, VOIDmode, tmp, const0_rtx);\n+\t  operands[1] = gen_rtx_EQ (VOIDmode, tmp, const0_rtx);\n \t  break;\n \n \tcase GTU:\n \t  emit_insn (gen_sgtu (tmp));\n-\t  operands[1] = gen_rtx (NE, VOIDmode, tmp, const0_rtx);\n+\t  operands[1] = gen_rtx_NE (VOIDmode, tmp, const0_rtx);\n \t  break;\n \n \tcase LTU:\n \t  emit_insn (gen_sltu (tmp));\n-\t  operands[1] = gen_rtx (NE, VOIDmode, tmp, const0_rtx);\n+\t  operands[1] = gen_rtx_NE (VOIDmode, tmp, const0_rtx);\n \t  break;\n \n \tcase GEU:\n \t  emit_insn (gen_sltu (tmp));\n-\t  operands[1] = gen_rtx (EQ, VOIDmode, tmp, const0_rtx);\n+\t  operands[1] = gen_rtx_EQ (VOIDmode, tmp, const0_rtx);\n \t  break;\n \n \tcase LEU:\n \t  emit_insn (gen_sgtu (tmp));\n-\t  operands[1] = gen_rtx (EQ, VOIDmode, tmp, const0_rtx);\n+\t  operands[1] = gen_rtx_EQ (VOIDmode, tmp, const0_rtx);\n \t  break;\n \n \tcase UNORDERED:\n \t  emit_insn (gen_sunordered (tmp));\n-\t  operands[1] = gen_rtx (NE, VOIDmode, tmp, const0_rtx);\n+\t  operands[1] = gen_rtx_NE (VOIDmode, tmp, const0_rtx);\n \t  break;\n \n \tcase ORDERED:\n \t  emit_insn (gen_sunordered (tmp));\n-\t  operands[1] = gen_rtx (EQ, VOIDmode, tmp, const0_rtx);\n+\t  operands[1] = gen_rtx_EQ (VOIDmode, tmp, const0_rtx);\n \t  break;\n \n \tcase UNEQ:\n@@ -3360,11 +3360,11 @@\n   \"TARGET_SH2E\"\n   \"\n {\n-  rtx insn = emit_insn (gen_fpu_switch (gen_rtx (MEM, PSImode,\n-\t\t\t\t\t\t gen_rtx (PRE_DEC, Pmode,\n+  rtx insn = emit_insn (gen_fpu_switch (gen_rtx_MEM (PSImode,\n+\t\t\t\t\t\t gen_rtx_PRE_DEC (Pmode,\n \t\t\t\t\t\t\t  stack_pointer_rtx)),\n \t\t\t\t\tget_fpscr_rtx ()));\n-  REG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_INC, stack_pointer_rtx, NULL_RTX);\n+  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, stack_pointer_rtx, NULL_RTX);\n   DONE;\n }\")\n \n@@ -3374,10 +3374,10 @@\n   \"\n {\n   rtx insn = emit_insn (gen_fpu_switch (get_fpscr_rtx (),\n-\t\t\t\t\tgen_rtx (MEM, PSImode,\n-\t\t\t\t\t\t gen_rtx (POST_INC, Pmode,\n+\t\t\t\t\tgen_rtx_MEM (PSImode,\n+\t\t\t\t\t\t gen_rtx_POST_INC (Pmode,\n \t\t\t\t\t\t\t  stack_pointer_rtx))));\n-  REG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_INC, stack_pointer_rtx, NULL_RTX);\n+  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, stack_pointer_rtx, NULL_RTX);\n   DONE;\n }\")\n \n@@ -4276,19 +4276,19 @@\n       tos = gen_rtx_MEM (DFmode, stack_pointer_rtx);\n     }\n   else\n-    tos = gen_rtx (MEM, DFmode, gen_rtx (PRE_DEC, Pmode, stack_pointer_rtx));\n+    tos = gen_rtx_MEM (DFmode, gen_rtx_PRE_DEC (Pmode, stack_pointer_rtx));\n   insn = emit_insn (gen_movdf_i4 (tos, operands[1], operands[2]));\n   if (! (TARGET_SH5 && true_regnum (operands[1]) < 16))\n-    REG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_INC, stack_pointer_rtx, NULL_RTX);\n+    REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, stack_pointer_rtx, NULL_RTX);\n   if (TARGET_SH5 && true_regnum (operands[0]) < 16)\n     tos = gen_rtx_MEM (DFmode, stack_pointer_rtx);\n   else\n-    tos = gen_rtx (MEM, DFmode, gen_rtx (POST_INC, Pmode, stack_pointer_rtx));\n+    tos = gen_rtx_MEM (DFmode, gen_rtx_POST_INC (Pmode, stack_pointer_rtx));\n   insn = emit_insn (gen_movdf_i4 (operands[0], tos, operands[2]));\n   if (TARGET_SH5 && true_regnum (operands[0]) < 16)\n     emit_move_insn (stack_pointer_rtx, plus_constant (stack_pointer_rtx, 8));\n   else\n-    REG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_INC, stack_pointer_rtx, NULL_RTX);\n+    REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, stack_pointer_rtx, NULL_RTX);\n   DONE;\n }\")\n \n@@ -4327,7 +4327,7 @@\n \t  && GET_CODE (XEXP (addr, 1)) == REG)\n \t{\n \t  int offset;\n-\t  rtx reg0 = gen_rtx (REG, Pmode, 0);\n+\t  rtx reg0 = gen_rtx_REG (Pmode, 0);\n \t  rtx regop = operands[store_p], word0 ,word1;\n \n \t  if (GET_CODE (regop) == SUBREG)\n@@ -4338,9 +4338,9 @@\n \t    offset = 4;\n \t  mem = copy_rtx (mem);\n \t  PUT_MODE (mem, SImode);\n-\t  word0 = gen_rtx (SUBREG, SImode, regop, 0);\n+\t  word0 = gen_rtx_SUBREG (SImode, regop, 0);\n \t  alter_subreg (&word0);\n-\t  word1 = gen_rtx (SUBREG, SImode, regop, 4);\n+\t  word1 = gen_rtx_SUBREG (SImode, regop, 4);\n \t  alter_subreg (&word1);\n \t  if (store_p || ! refers_to_regno_p (REGNO (word0),\n \t\t\t\t\t      REGNO (word0) + 1, addr, 0))\n@@ -4419,10 +4419,10 @@\n   \"\n {\n   int dst = true_regnum (operands[0]), src = true_regnum (operands[1]);\n-  emit_insn (gen_movsf_ie (gen_rtx (REG, SFmode, dst),\n-\t\t\t   gen_rtx (REG, SFmode, src), operands[2]));\n-  emit_insn (gen_movsf_ie (gen_rtx (REG, SFmode, dst + 1),\n-\t\t\t   gen_rtx (REG, SFmode, src + 1), operands[2]));\n+  emit_insn (gen_movsf_ie (gen_rtx_REG (SFmode, dst),\n+\t\t\t   gen_rtx_REG (SFmode, src), operands[2]));\n+  emit_insn (gen_movsf_ie (gen_rtx_REG (SFmode, dst + 1),\n+\t\t\t   gen_rtx_REG (SFmode, src + 1), operands[2]));\n   DONE;\n }\")\n \n@@ -4439,15 +4439,15 @@\n {\n   int regno = true_regnum (operands[0]);\n   rtx insn;\n-  rtx mem2 = gen_rtx (MEM, SFmode, gen_rtx (POST_INC, Pmode, operands[1]));\n+  rtx mem2 = gen_rtx_MEM (SFmode, gen_rtx_POST_INC (Pmode, operands[1]));\n \n-  insn = emit_insn (gen_movsf_ie (gen_rtx (REG, SFmode,\n+  insn = emit_insn (gen_movsf_ie (gen_rtx_REG (SFmode,\n \t\t\t\t\t   regno + !! TARGET_LITTLE_ENDIAN),\n \t\t\t\t  mem2, operands[2]));\n-  REG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_INC, operands[1], NULL_RTX);\n-  insn = emit_insn (gen_movsf_ie (gen_rtx (REG, SFmode,\n+  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, operands[1], NULL_RTX);\n+  insn = emit_insn (gen_movsf_ie (gen_rtx_REG (SFmode,\n \t\t\t\t\t   regno + ! TARGET_LITTLE_ENDIAN),\n-\t\t\t\t  gen_rtx (MEM, SFmode, operands[1]),\n+\t\t\t\t  gen_rtx_MEM (SFmode, operands[1]),\n \t\t\t\t  operands[2]));\n   DONE;\n }\")\n@@ -4509,7 +4509,7 @@\n   operands[0] = copy_rtx (operands[0]);\n   PUT_MODE (operands[0], SFmode);\n   insn = emit_insn (gen_movsf_ie (operands[0],\n-\t\t\t\t  gen_rtx (REG, SFmode,\n+\t\t\t\t  gen_rtx_REG (SFmode,\n \t\t\t\t\t   regno + ! TARGET_LITTLE_ENDIAN),\n \t\t\t\t  operands[2]));\n   operands[0] = copy_rtx (operands[0]);\n@@ -4518,16 +4518,16 @@\n     {\n       adjust = gen_addsi3 (addr, addr, GEN_INT (4));\n       emit_insn_before (adjust, insn);\n-      XEXP (operands[0], 0) = addr = gen_rtx (PRE_DEC, SImode, addr);\n+      XEXP (operands[0], 0) = addr = gen_rtx_PRE_DEC (SImode, addr);\n     }\n   addr = XEXP (addr, 0);\n   if (! adjust)\n-    REG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_INC, addr, NULL_RTX);\n+    REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, addr, NULL_RTX);\n   insn = emit_insn (gen_movsf_ie (operands[0],\n-\t\t\t\t  gen_rtx (REG, SFmode,\n+\t\t\t\t  gen_rtx_REG (SFmode,\n \t\t\t\t\t   regno + !! TARGET_LITTLE_ENDIAN),\n \t\t\t\t  operands[2]));\n-  REG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_INC, addr, NULL_RTX);\n+  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, addr, NULL_RTX);\n   DONE;\n }\")\n \n@@ -8180,10 +8180,10 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   \"\n {\n   rtx insn = emit_insn (gen_fpu_switch (get_fpscr_rtx (),\n-\t\t\t\t\tgen_rtx (MEM, PSImode,\n-\t\t\t\t\t\t gen_rtx (POST_INC, Pmode,\n+\t\t\t\t\tgen_rtx_MEM (PSImode,\n+\t\t\t\t\t\t gen_rtx_POST_INC (Pmode,\n \t\t\t\t\t\t\t  operands[0]))));\n-  REG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_INC, operands[0], NULL_RTX);\n+  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, operands[0], NULL_RTX);\n }\")\n \n (define_split\n@@ -8194,10 +8194,10 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   \"\n {\n   rtx insn = emit_insn (gen_fpu_switch (get_fpscr_rtx (),\n-\t\t\t\t\tgen_rtx (MEM, PSImode,\n-\t\t\t\t\t\t gen_rtx (POST_INC, Pmode,\n+\t\t\t\t\tgen_rtx_MEM (PSImode,\n+\t\t\t\t\t\t gen_rtx_POST_INC (Pmode,\n \t\t\t\t\t\t\t  operands[0]))));\n-  REG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_INC, operands[0], NULL_RTX);\n+  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, operands[0], NULL_RTX);\n }\")\n \n ;; ??? This uses the fp unit, but has no type indicating that."}]}