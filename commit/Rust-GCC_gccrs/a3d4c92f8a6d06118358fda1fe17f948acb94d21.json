{"sha": "a3d4c92f8a6d06118358fda1fe17f948acb94d21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNkNGM5MmY4YTZkMDYxMTgzNThmZGExZmUxN2Y5NDhhY2I5NGQyMQ==", "commit": {"author": {"name": "Randolph Chung", "email": "tausq@debian.org", "date": "2003-11-27T20:02:36Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2003-11-27T20:02:36Z"}, "message": "pa.c (hppa_profile_hook): Split gen_call_profiler into separate insns.\n\n\t* pa.c (hppa_profile_hook): Split gen_call_profiler into separate\n\tinsns.  Use the regular call expander for the call to the profiler.\n\t* pa.md (call_profiler): Delete.\n\t(load_offset_label_address): New insn to load the address of the\n\tcurrent function for the profiler.\n\t(lcla1, lcla2): New insns to output a code label and load its address.\n\nCo-Authored-By: John David Anglin <dave.anglin@nrc-cnrc.gc.ca>\n\nFrom-SVN: r74004", "tree": {"sha": "93ddbd68227c51d5bf24d37999410b4265bbbce1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93ddbd68227c51d5bf24d37999410b4265bbbce1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3d4c92f8a6d06118358fda1fe17f948acb94d21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3d4c92f8a6d06118358fda1fe17f948acb94d21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3d4c92f8a6d06118358fda1fe17f948acb94d21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3d4c92f8a6d06118358fda1fe17f948acb94d21/comments", "author": null, "committer": null, "parents": [{"sha": "a27b9e3c6f8fb3017f4b12904abcbbb51c1f4644", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a27b9e3c6f8fb3017f4b12904abcbbb51c1f4644", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a27b9e3c6f8fb3017f4b12904abcbbb51c1f4644"}], "stats": {"total": 112, "additions": 74, "deletions": 38}, "files": [{"sha": "4af2b9288dc2b93216dc4fbe3d1d84c3ec006156", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d4c92f8a6d06118358fda1fe17f948acb94d21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d4c92f8a6d06118358fda1fe17f948acb94d21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3d4c92f8a6d06118358fda1fe17f948acb94d21", "patch": "@@ -1,3 +1,13 @@\n+2003-11-27  Randolph Chung  <tausq@debian.org>\n+\t    John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa.c (hppa_profile_hook): Split gen_call_profiler into separate \n+\tinsns.  Use the regular call expander for the call to the profiler.\n+\t* pa.md (call_profiler): Delete.\n+\t(load_offset_label_address): New insn to load the address of the\n+\tcurrent function for the profiler.\n+\t(lcla1, lcla2): New insns to output a code label and load its address.\n+\n 2003-11-27  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* final.c (final_scan_insn): Remove commented-out code."}, {"sha": "f724c43222c84b2be4726dd089d398161ca03bf0", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d4c92f8a6d06118358fda1fe17f948acb94d21/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d4c92f8a6d06118358fda1fe17f948acb94d21/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=a3d4c92f8a6d06118358fda1fe17f948acb94d21", "patch": "@@ -4039,12 +4039,17 @@ hppa_pic_save_rtx (void)\n void\n hppa_profile_hook (int label_no)\n {\n+  /* We use SImode for the address of the function in both 32 and\n+     64-bit code to avoid having to provide DImode versions of the\n+     lcla2 and load_offset_label_address insn patterns.  */\n+  rtx reg = gen_reg_rtx (SImode);\n+  rtx label_rtx = gen_label_rtx ();\n   rtx begin_label_rtx, call_insn;\n   char begin_label_name[16];\n \n   ASM_GENERATE_INTERNAL_LABEL (begin_label_name, FUNC_BEGIN_PROLOG_LABEL,\n \t\t\t       label_no);\n-  begin_label_rtx = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (begin_label_name));\n+  begin_label_rtx = gen_rtx_SYMBOL_REF (SImode, ggc_strdup (begin_label_name));\n \n   if (TARGET_64BIT)\n     emit_move_insn (arg_pointer_rtx,\n@@ -4053,6 +4058,18 @@ hppa_profile_hook (int label_no)\n \n   emit_move_insn (gen_rtx_REG (word_mode, 26), gen_rtx_REG (word_mode, 2));\n \n+  /* The address of the function is loaded into %r25 with a instruction-\n+     relative sequence that avoids the use of relocations.  The sequence\n+     is split so that the load_offset_label_address instruction can\n+     occupy the delay slot of the call to _mcount.  */\n+  if (TARGET_PA_20)\n+    emit_insn (gen_lcla2 (reg, label_rtx));\n+  else\n+    emit_insn (gen_lcla1 (reg, label_rtx));\n+\n+  emit_insn (gen_load_offset_label_address (gen_rtx_REG (SImode, 25), \n+\t\t\t\t\t    reg, begin_label_rtx, label_rtx));\n+\n #ifndef NO_PROFILE_COUNTERS\n   {\n     rtx count_label_rtx, addr, r24;\n@@ -4065,35 +4082,31 @@ hppa_profile_hook (int label_no)\n     r24 = gen_rtx_REG (Pmode, 24);\n     emit_move_insn (r24, addr);\n \n-    /* %r25 is set from within the output pattern.  */\n     call_insn =\n-      emit_call_insn (gen_call_profiler (gen_rtx_SYMBOL_REF (Pmode, \"_mcount\"),\n-\t\t\t\t\t GEN_INT (TARGET_64BIT ? 24 : 12),\n-\t\t\t\t\t begin_label_rtx));\n+      emit_call_insn (gen_call (gen_rtx_MEM (Pmode, \n+\t\t\t\t\t     gen_rtx_SYMBOL_REF (Pmode, \n+\t\t\t\t\t\t\t\t \"_mcount\")),\n+\t\t\t\tGEN_INT (TARGET_64BIT ? 24 : 12)));\n \n     use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), r24);\n   }\n #else\n-    /* %r25 is set from within the output pattern.  */\n+\n   call_insn =\n-    emit_call_insn (gen_call_profiler (gen_rtx_SYMBOL_REF (Pmode, \"_mcount\"),\n-\t\t\t\t       GEN_INT (TARGET_64BIT ? 16 : 8),\n-\t\t\t\t       begin_label_rtx));\n+    emit_call_insn (gen_call (gen_rtx_MEM (Pmode, \n+\t\t\t\t\t   gen_rtx_SYMBOL_REF (Pmode, \n+\t\t\t\t\t\t\t       \"_mcount\")),\n+\t\t\t      GEN_INT (TARGET_64BIT ? 16 : 8)));\n+\n #endif\n \n+  use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), gen_rtx_REG (SImode, 25));\n+  use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), gen_rtx_REG (SImode, 26));\n+\n   /* Indicate the _mcount call cannot throw, nor will it execute a\n      non-local goto.  */\n   REG_NOTES (call_insn)\n     = gen_rtx_EXPR_LIST (REG_EH_REGION, constm1_rtx, REG_NOTES (call_insn));\n-\n-  if (flag_pic)\n-    {\n-      use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), pic_offset_table_rtx);\n-      if (TARGET_64BIT)\n-\tuse_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), arg_pointer_rtx);\n-\n-      emit_move_insn (pic_offset_table_rtx, hppa_pic_save_rtx ());\n-    }\n }\n \n /* Fetch the return address for the frame COUNT steps up from"}, {"sha": "6f0cdcffb289da8645ee4cf753a8b9dda7a853a1", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d4c92f8a6d06118358fda1fe17f948acb94d21/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d4c92f8a6d06118358fda1fe17f948acb94d21/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=a3d4c92f8a6d06118358fda1fe17f948acb94d21", "patch": "@@ -6152,35 +6152,48 @@\n   DONE;\n }\")\n \n-;; Special because we use the value placed in %r2 by the bl instruction\n-;; from within its delay slot to set the value for the 2nd parameter to\n-;; the call.\n-(define_insn \"call_profiler\"\n-  [(call (mem:SI (match_operand 0 \"call_operand_address\" \"\"))\n-\t (match_operand 1 \"\" \"\"))\n-   (use (match_operand 2 \"\" \"\"))\n-   (use (reg:SI 25))\n-   (use (reg:SI 26))\n-   (clobber (reg:SI 2))]\n+; Used by hppa_profile_hook to load the starting address of the current\n+; function; operand 1 contains the address of the label in operand 3\n+(define_insn \"load_offset_label_address\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t (minus:SI (match_operand:SI 2 \"\" \"\")\n+\t\t\t   (label_ref:SI (match_operand 3 \"\" \"\")))))]\n   \"\"\n+  \"ldo %2-%l3(%1),%0\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"4\")])\n+\n+; Output a code label and load its address.\n+(define_insn \"lcla1\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (label_ref:SI (match_operand 1 \"\" \"\")))\n+   (const_int 0)]\n+  \"!TARGET_PA_20\"\n   \"*\n {\n-  rtx xoperands[3];\n-\n-  output_arg_descriptor (insn);\n-\n-  xoperands[0] = operands[0];\n-  xoperands[1] = operands[2];\n-  xoperands[2] = gen_label_rtx ();\n-  output_asm_insn (\\\"{bl|b,l} %0,%%r2\\;ldo %1-%2(%%r2),%%r25\\\", xoperands);\n-\n+  output_asm_insn (\\\"bl .+8,%0\\;depi 0,31,2,%0\\\", operands);\n   (*targetm.asm_out.internal_label) (asm_out_file, \\\"L\\\",\n-\t\t\t     CODE_LABEL_NUMBER (xoperands[2]));\n+                                     CODE_LABEL_NUMBER (operands[1]));\n   return \\\"\\\";\n }\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"8\")])\n \n+(define_insn \"lcla2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (label_ref:SI (match_operand 1 \"\" \"\")))\n+   (const_int 0)]\n+  \"TARGET_PA_20\"\n+  \"*\n+{\n+  (*targetm.asm_out.internal_label) (asm_out_file, \\\"L\\\",\n+                                     CODE_LABEL_NUMBER (operands[1]));\n+  return \\\"mfia %0\\\";\n+}\"\n+  [(set_attr \"type\" \"move\")\n+   (set_attr \"length\" \"4\")])\n+\n (define_insn \"blockage\"\n   [(unspec_volatile [(const_int 2)] 0)]\n   \"\""}]}