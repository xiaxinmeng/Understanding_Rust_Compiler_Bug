{"sha": "ec507f2d8b6a00a9139d53964d2e7df902336814", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM1MDdmMmQ4YjZhMDBhOTEzOWQ1Mzk2NGQyZTdkZjkwMjMzNjgxNA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2004-03-25T17:43:24Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2004-03-25T17:43:24Z"}, "message": "rs6000.c (rs6000_always_hint): New variable.\n\n\t* config/rs6000/rs6000.c (rs6000_always_hint): New variable.\n\t(rs6000_sched_groups): New variable.\n\t(processor_target_table): Add power5.\n\t(rs6000_override_options): Set rs6000_sched_insert_nops,\n\trs6000_sched_costly_dep and rs6000_sched_restricted_insns_priority\n\tfrom rs6000_sched_groups.\n\t(output_cbranch): Use rs6000_always_hint.\n\t(rs6000_variable_issue): Use rs6000_sched_groups.\n\t(rs6000_adjust_cost): Add CPU_POWER5.\n\t(is_microcoded_insn): Use rs6000_sched_groups.\n\t(is_dispatch_slot_restricted): Use rs6000_sched_groups.\n\tReturn 2 for POWER5 cracked instructions.\n\t(is_cracked_insn): Use rs6000_sched_groups.\n\t(is_branch_slot_insn): Use rs6000_sched_groups.\n\t(rs6000_issue_rate): Add CPU_POWER5.\n\t(rs6000_sched_finish): Use rs6000_sched_groups.\n\t(rs6000_rtx_costs): Add PROCESSOR_POWER5.\n\t* config/rs6000/rs6000.h (processor_type): Add PROCESSOR_POWER5.\n\t(DEFAULT_SCHED_COSTLY_DEP): Delete.\n\t(DEFAULT_RESTRICTED_INSNS_PRIORITY): Delete.\n\t(DEFAULT_SCHED_FINISH_NOP_INSERTION_SCHEME): Delete.\n\t* config/rs6000/rs6000.md (define_attr \"cpu\"): Add power5.\n\t* config/rs6000/power5.md: New file.\n\t* doc/invoke.texi: Add power5 option.\n\nFrom-SVN: r79958", "tree": {"sha": "98332ece2375f5866e2620006b9ac407ba1023c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98332ece2375f5866e2620006b9ac407ba1023c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec507f2d8b6a00a9139d53964d2e7df902336814", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec507f2d8b6a00a9139d53964d2e7df902336814", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec507f2d8b6a00a9139d53964d2e7df902336814", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec507f2d8b6a00a9139d53964d2e7df902336814/comments", "author": null, "committer": null, "parents": [{"sha": "03f9ea4437e6e5ce757c0f6e5a1291eb232f8c8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03f9ea4437e6e5ce757c0f6e5a1291eb232f8c8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03f9ea4437e6e5ce757c0f6e5a1291eb232f8c8e"}], "stats": {"total": 426, "additions": 382, "deletions": 44}, "files": [{"sha": "5a7d4d24bc3eb662916f778b0746d8bf13931890", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec507f2d8b6a00a9139d53964d2e7df902336814/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec507f2d8b6a00a9139d53964d2e7df902336814/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec507f2d8b6a00a9139d53964d2e7df902336814", "patch": "@@ -1,3 +1,30 @@\n+2004-03-25  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.c (rs6000_always_hint): New variable.\n+\t(rs6000_sched_groups): New variable.\n+\t(processor_target_table): Add power5.\n+\t(rs6000_override_options): Set rs6000_sched_insert_nops,\n+\trs6000_sched_costly_dep and rs6000_sched_restricted_insns_priority\n+\tfrom rs6000_sched_groups.\n+\t(output_cbranch): Use rs6000_always_hint.\n+\t(rs6000_variable_issue): Use rs6000_sched_groups.\n+\t(rs6000_adjust_cost): Add CPU_POWER5.\n+\t(is_microcoded_insn): Use rs6000_sched_groups.\n+\t(is_dispatch_slot_restricted): Use rs6000_sched_groups.\n+\tReturn 2 for POWER5 cracked instructions.\n+\t(is_cracked_insn): Use rs6000_sched_groups.\n+\t(is_branch_slot_insn): Use rs6000_sched_groups.\n+\t(rs6000_issue_rate): Add CPU_POWER5.\n+\t(rs6000_sched_finish): Use rs6000_sched_groups.\n+\t(rs6000_rtx_costs): Add PROCESSOR_POWER5.\n+\t* config/rs6000/rs6000.h (processor_type): Add PROCESSOR_POWER5.\n+\t(DEFAULT_SCHED_COSTLY_DEP): Delete.\n+\t(DEFAULT_RESTRICTED_INSNS_PRIORITY): Delete.\n+\t(DEFAULT_SCHED_FINISH_NOP_INSERTION_SCHEME): Delete.\n+\t* config/rs6000/rs6000.md (define_attr \"cpu\"): Add power5.\n+\t* config/rs6000/power5.md: New file.\n+\t* doc/invoke.texi: Add power5 option.\n+\n 2004-03-25  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* cfgrtl.c, dbxout.c, tree.def, config/darwin.h,"}, {"sha": "59baa79c30c4b09d439c102f8f0e660e0b59f2a8", "filename": "gcc/config/rs6000/power5.md", "status": "added", "additions": 299, "deletions": 0, "changes": 299, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec507f2d8b6a00a9139d53964d2e7df902336814/gcc%2Fconfig%2Frs6000%2Fpower5.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec507f2d8b6a00a9139d53964d2e7df902336814/gcc%2Fconfig%2Frs6000%2Fpower5.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower5.md?ref=ec507f2d8b6a00a9139d53964d2e7df902336814", "patch": "@@ -0,0 +1,299 @@\n+;; Scheduling description for IBM POWER5 processor.\n+;;   Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 2, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to the\n+;; Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n+;; MA 02111-1307, USA.\n+\n+;; Sources: IBM Red Book and White Paper on POWER5\n+\n+;; The POWER5 has 2 iu, 2 fpu, 2 lsu per engine (2 engines per chip).\n+;; Instructions that update more than one register get broken into two\n+;; (split) or more internal ops.  The chip can issue up to 5\n+;; internal ops per cycle.\n+\n+(define_automaton \"power5iu,power5fpu,power5misc\")\n+\n+(define_cpu_unit \"iu1_power5,iu2_power5\" \"power5iu\")\n+(define_cpu_unit \"lsu1_power5,lsu2_power5\" \"power5misc\")\n+(define_cpu_unit \"fpu1_power5,fpu2_power5\" \"power5fpu\")\n+(define_cpu_unit \"bpu_power5,cru_power5\" \"power5misc\")\n+(define_cpu_unit \"du1_power5,du2_power5,du3_power5,du4_power5,du5_power5\"\n+\t\t \"power5misc\")\n+\n+(define_reservation \"lsq_power5\"\n+\t\t    \"(du1_power5,lsu1_power5)\\\n+\t\t    |(du2_power5,lsu2_power5)\\\n+\t\t    |(du3_power5,nothing,lsu2_power5)\\\n+\t\t    |(du4_power5,nothing,lsu1_power5)\")\n+\n+(define_reservation \"iq_power5\"\n+\t\t    \"(du1_power5,iu1_power5)\\\n+\t\t    |(du2_power5,iu2_power5)\\\n+\t\t    |(du3_power5,nothing,iu2_power5)\\\n+\t\t    |(du4_power5,nothing,iu1_power5)\")\n+\n+(define_reservation \"fpq_power5\"\n+\t\t    \"(du1_power5,fpu1_power5)\\\n+\t\t    |(du2_power5,fpu2_power5)\\\n+\t\t    |(du3_power5,nothing,fpu2_power5)\\\n+\t\t    |(du4_power5,nothing,fpu1_power5)\")\n+\n+; Dispatch slots are allocated in order conforming to program order.\n+(absence_set \"du1_power5\" \"du2_power5,du3_power5,du4_power5,du5_power5\")\n+(absence_set \"du2_power5\" \"du3_power5,du4_power5,du5_power5\")\n+(absence_set \"du3_power5\" \"du4_power5,du5_power5\")\n+(absence_set \"du4_power5\" \"du5_power5\")\n+\n+\n+; Load/store\n+(define_insn_reservation \"power5-load\" 4 ; 3\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"lsq_power5\")\n+\n+(define_insn_reservation \"power5-load-ext\" 5\n+  (and (eq_attr \"type\" \"load_ext\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,lsu1_power5,nothing,nothing,iu2_power5\")\n+\n+(define_insn_reservation \"power5-load-ext-update\" 5\n+  (and (eq_attr \"type\" \"load_ext_u\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5+du3_power5+du4_power5,\\\n+   lsu1_power5+iu2_power5,nothing,nothing,iu2_power5\")\n+\n+(define_insn_reservation \"power5-load-ext-update-indexed\" 5\n+  (and (eq_attr \"type\" \"load_ext_ux\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5+du3_power5+du4_power5,\\\n+   iu1_power5,lsu2_power5+iu1_power5,nothing,nothing,iu2_power5\")\n+\n+(define_insn_reservation \"power5-load-update-indexed\" 3\n+  (and (eq_attr \"type\" \"load_ux\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5+du3_power5+du4_power5,\\\n+   iu1_power5,lsu2_power5+iu2_power5\")\n+\n+(define_insn_reservation \"power5-load-update\" 4 ; 3\n+  (and (eq_attr \"type\" \"load_u\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,lsu1_power5+iu2_power5\")\n+\n+(define_insn_reservation \"power5-fpload\" 6 ; 5\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"lsq_power5\")\n+\n+(define_insn_reservation \"power5-fpload-update\" 6 ; 5\n+  (and (eq_attr \"type\" \"fpload_u,fpload_ux\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,lsu1_power5+iu2_power5\")\n+\n+(define_insn_reservation \"power5-store\" 1\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"(du1_power5,lsu1_power5,iu1_power5)\\\n+  |(du2_power5,lsu2_power5,iu2_power5)\\\n+  |(du3_power5,lsu2_power5,nothing,iu2_power5)\\\n+  |(du4_power5,lsu1_power5,nothing,iu1_power5)\")\n+\n+(define_insn_reservation \"power5-store-update\" 1\n+  (and (eq_attr \"type\" \"store_u\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,lsu1_power5+iu2_power5,iu1_power5\")\n+\n+(define_insn_reservation \"power5-store-update-indexed\" 1\n+  (and (eq_attr \"type\" \"store_ux\")\n+       (eq_attr \"cpu\" \"power5\"))\n+   \"du1_power5+du2_power5+du3_power5+du4_power5,\\\n+    iu1_power5,lsu2_power5+iu2_power5,iu2_power5\")\n+\n+(define_insn_reservation \"power5-fpstore\" 1\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"(du1_power5,lsu1_power5,fpu1_power5)\\\n+  |(du2_power5,lsu2_power5,fpu2_power5)\\\n+  |(du3_power5,lsu2_power5,nothing,fpu2_power5)\\\n+  |(du4_power5,lsu1_power5,nothing,fpu1_power5)\")\n+\n+(define_insn_reservation \"power5-fpstore-update\" 1\n+  (and (eq_attr \"type\" \"fpstore_u,fpstore_ux\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,lsu1_power5+iu2_power5,fpu1_power5\")\n+\n+\n+; Integer latency is 2 cycles\n+(define_insn_reservation \"power5-integer\" 2\n+  (and (eq_attr \"type\" \"integer\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"iq_power5\")\n+\n+(define_insn_reservation \"power5-insert\" 4\n+  (and (eq_attr \"type\" \"insert_word\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,iu1_power5,nothing,iu2_power5\")\n+\n+(define_insn_reservation \"power5-cmp\" 3\n+  (and (eq_attr \"type\" \"cmp,fast_compare\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"iq_power5\")\n+\n+(define_insn_reservation \"power5-compare\" 2\n+  (and (eq_attr \"type\" \"compare,delayed_compare\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,iu1_power5,iu2_power5\")\n+\n+(define_bypass 4 \"power5-compare\" \"power5-branch,power5-crlogical,power5-delayedcr,power5-mfcr,power5-mfcrf\")\n+\n+(define_insn_reservation \"power5-lmul-cmp\" 7\n+  (and (eq_attr \"type\" \"lmul_compare\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,iu1_power5*6,iu2_power5\")\n+\n+(define_bypass 10 \"power5-lmul-cmp\" \"power5-branch,power5-crlogical,power5-delayedcr,power5-mfcr,power5-mfcrf\")\n+\n+(define_insn_reservation \"power5-imul-cmp\" 5\n+  (and (eq_attr \"type\" \"imul_compare\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,iu1_power5*4,iu2_power5\")\n+\n+(define_bypass 8 \"power5-imul-cmp\" \"power5-branch,power5-crlogical,power5-delayedcr,power5-mfcr,power5-mfcrf\")\n+\n+(define_insn_reservation \"power5-lmul\" 7\n+  (and (eq_attr \"type\" \"lmul\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"(du1_power5,iu1_power5*6)\\\n+  |(du2_power5,iu2_power5*6)\\\n+  |(du3_power5,iu2_power5*6)\\\n+  |(du4_power5,iu2_power5*6)\")\n+;  |(du3_power5,nothing,iu2_power5*6)\\\n+;  |(du4_power5,nothing,iu2_power5*6)\")\n+\n+(define_insn_reservation \"power5-imul\" 5\n+  (and (eq_attr \"type\" \"imul\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"(du1_power5,iu1_power5*4)\\\n+  |(du2_power5,iu2_power5*4)\\\n+  |(du3_power5,iu2_power5*4)\\\n+  |(du4_power5,iu1_power5*4)\")\n+;  |(du3_power5,nothing,iu2_power5*4)\\\n+;  |(du4_power5,nothing,iu1_power5*4)\")\n+\n+(define_insn_reservation \"power5-imul3\" 4\n+  (and (eq_attr \"type\" \"imul2,imul3\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"(du1_power5,iu1_power5*3)\\\n+  |(du2_power5,iu2_power5*3)\\\n+  |(du3_power5,iu2_power5*3)\\\n+  |(du4_power5,iu1_power5*3)\")\n+;  |(du3_power5,nothing,iu2_power5*3)\\\n+;  |(du4_power5,nothing,iu1_power5*3)\")\n+\n+\n+; SPR move only executes in first IU.\n+; Integer division only executes in second IU.\n+(define_insn_reservation \"power5-idiv\" 36\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,iu2_power5*35\")\n+\n+(define_insn_reservation \"power5-ldiv\" 68\n+  (and (eq_attr \"type\" \"ldiv\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,iu2_power5*67\")\n+\n+\n+(define_insn_reservation \"power5-mtjmpr\" 3\n+  (and (eq_attr \"type\" \"mtjmpr,mfjmpr\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5,bpu_power5\")\n+\n+\n+; Branches take dispatch Slot 4.  The presence_sets prevent other insn from\n+; grabbing previous dispatch slots once this is assigned.\n+(define_insn_reservation \"power5-branch\" 2\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"(du5_power5\\\n+   |du4_power5+du5_power5\\\n+   |du3_power5+du4_power5+du5_power5\\\n+   |du2_power5+du3_power5+du4_power5+du5_power5\\\n+   |du1_power5+du2_power5+du3_power5+du4_power5+du5_power5),bpu_power5\")\n+\n+\n+; Condition Register logical ops are split if non-destructive (RT != RB)\n+(define_insn_reservation \"power5-crlogical\" 2\n+  (and (eq_attr \"type\" \"cr_logical\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5,cru_power5\")\n+\n+(define_insn_reservation \"power5-delayedcr\" 4\n+  (and (eq_attr \"type\" \"delayed_cr\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5,cru_power5,cru_power5\")\n+\n+; 4 mfcrf (each 3 cyc, 1/cyc) + 3 fxu\n+(define_insn_reservation \"power5-mfcr\" 6\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5+du2_power5+du3_power5+du4_power5,\\\n+   du1_power5+du2_power5+du3_power5+du4_power5+cru_power5,\\\n+   cru_power5,cru_power5,cru_power5\")\n+\n+; mfcrf (1 field)\n+(define_insn_reservation \"power5-mfcrf\" 3\n+  (and (eq_attr \"type\" \"mfcrf\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5,cru_power5\")\n+\n+; mtcrf (1 field)\n+(define_insn_reservation \"power5-mtcr\" 4\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"du1_power5,iu1_power5\")\n+\n+; Basic FP latency is 6 cycles\n+(define_insn_reservation \"power5-fp\" 6\n+  (and (eq_attr \"type\" \"fp,dmul\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"fpq_power5\")\n+\n+(define_insn_reservation \"power5-fpcompare\" 5\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"fpq_power5\")\n+\n+(define_insn_reservation \"power5-sdiv\" 33\n+  (and (eq_attr \"type\" \"sdiv,ddiv\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"(du1_power5,fpu1_power5*28)\\\n+  |(du2_power5,fpu2_power5*28)\\\n+  |(du3_power5,fpu2_power5*28)\\\n+  |(du4_power5,fpu1_power5*28)\")\n+;  |(du3_power5,nothing,fpu2_power5*28)\\\n+;  |(du4_power5,nothing,fpu1_power5*28)\")\n+\n+(define_insn_reservation \"power5-sqrt\" 40\n+  (and (eq_attr \"type\" \"ssqrt,dsqrt\")\n+       (eq_attr \"cpu\" \"power5\"))\n+  \"(du1_power5,fpu1_power5*35)\\\n+  |(du2_power5,fpu2_power5*35)\\\n+  |(du3_power5,fpu2_power5*35)\\\n+  |(du4_power5,fpu2_power5*35)\")\n+;  |(du3_power5,nothing,fpu2_power5*35)\\\n+;  |(du4_power5,nothing,fpu2_power5*35)\")\n+"}, {"sha": "dc45a5092fba42d172e5f22e18188e1b25c896eb", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 50, "deletions": 27, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec507f2d8b6a00a9139d53964d2e7df902336814/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec507f2d8b6a00a9139d53964d2e7df902336814/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ec507f2d8b6a00a9139d53964d2e7df902336814", "patch": "@@ -124,6 +124,12 @@ struct rs6000_cpu_select rs6000_select[3] =\n   { (const char *)0,\t\"-mtune=\",\t\t1,\t0 },\n };\n \n+/* Always emit branch hint bits.  */\n+static GTY(()) bool rs6000_always_hint;\n+\n+/* Schedule instructions for group formation.  */\n+static GTY(()) bool rs6000_sched_groups;\n+\n /* Support adjust_priority scheduler hook \n    and -mprioritize-restricted-insns= option.  */\n const char *rs6000_sched_restricted_insns_priority_str;\n@@ -714,6 +720,8 @@ rs6000_override_options (const char *default_cpu)\n \t  POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64},\n \t {\"power4\", PROCESSOR_POWER4,\n \t  POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64},\n+\t {\"power5\", PROCESSOR_POWER5,\n+\t  POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64},\n \t {\"powerpc\", PROCESSOR_POWERPC, POWERPC_BASE_MASK},\n \t {\"powerpc64\", PROCESSOR_POWERPC64,\n \t  POWERPC_BASE_MASK | MASK_POWERPC64},\n@@ -914,6 +922,11 @@ rs6000_override_options (const char *default_cpu)\n \trs6000_long_double_type_size = 64;\n     }\n \n+  rs6000_always_hint = (rs6000_cpu != PROCESSOR_POWER4\n+\t\t\t&& rs6000_cpu != PROCESSOR_POWER5);\n+  rs6000_sched_groups = (rs6000_cpu == PROCESSOR_POWER4\n+\t\t\t || rs6000_cpu == PROCESSOR_POWER5);\n+\n   /* Handle -m(no-)longcall option.  This is a bit of a cheap hack,\n      using TARGET_OPTIONS to handle a toggle switch, but we're out of\n      bits in target_flags so TARGET_SWITCHES cannot be used.\n@@ -942,13 +955,15 @@ rs6000_override_options (const char *default_cpu)\n     }\n \n   /* Handle -mprioritize-restricted-insns option.  */\n-  rs6000_sched_restricted_insns_priority = DEFAULT_RESTRICTED_INSNS_PRIORITY;\n+  rs6000_sched_restricted_insns_priority\n+    = (rs6000_sched_groups ? 1 : 0);\n   if (rs6000_sched_restricted_insns_priority_str)\n     rs6000_sched_restricted_insns_priority =\n       atoi (rs6000_sched_restricted_insns_priority_str);\n \n   /* Handle -msched-costly-dep option.  */\n-  rs6000_sched_costly_dep = DEFAULT_SCHED_COSTLY_DEP;\n+  rs6000_sched_costly_dep\n+    = (rs6000_sched_groups ? store_to_load_dep_costly : no_dep_costly);\n   if (rs6000_sched_costly_dep_str)\n     {\n       if (! strcmp (rs6000_sched_costly_dep_str, \"no\"))  \n@@ -964,7 +979,8 @@ rs6000_override_options (const char *default_cpu)\n     }\n \n   /* Handle -minsert-sched-nops option.  */\n-  rs6000_sched_insert_nops = DEFAULT_SCHED_FINISH_NOP_INSERTION_SCHEME;\n+  rs6000_sched_insert_nops\n+    = (rs6000_sched_groups ? sched_finish_regroup_exact : sched_finish_none);\n   if (rs6000_sched_insert_nops_str)\n     {\n       if (! strcmp (rs6000_sched_insert_nops_str, \"no\"))\n@@ -10066,15 +10082,14 @@ output_cbranch (rtx op, const char *label, int reversed, rtx insn)\n     {\n       /* PROB is the difference from 50%.  */\n       int prob = INTVAL (XEXP (note, 0)) - REG_BR_PROB_BASE / 2;\n-      bool always_hint = rs6000_cpu != PROCESSOR_POWER4;\n \n       /* Only hint for highly probable/improbable branches on newer\n \t cpus as static prediction overrides processor dynamic\n \t prediction.  For older cpus we may as well always hint, but\n \t assume not taken for branches that are very close to 50% as a\n \t mispredicted taken branch is more expensive than a\n \t mispredicted not-taken branch.  */ \n-      if (always_hint\n+      if (rs6000_always_hint\n \t  || abs (prob) > REG_BR_PROB_BASE / 100 * 48)\n \t{\n \t  if (abs (prob) > REG_BR_PROB_BASE / 20\n@@ -13885,7 +13900,7 @@ rs6000_variable_issue (FILE *stream ATTRIBUTE_UNUSED,\n       || GET_CODE (PATTERN (insn)) == CLOBBER)\n     return more;\n \n-  if (rs6000_cpu == PROCESSOR_POWER4)\n+  if (rs6000_sched_groups)\n     {\n       if (is_microcoded_insn (insn))\n         return 0;\n@@ -13933,7 +13948,8 @@ rs6000_adjust_cost (rtx insn, rtx link, rtx dep_insn ATTRIBUTE_UNUSED,\n \t       || rs6000_cpu_attr == CPU_PPC750\n \t       || rs6000_cpu_attr == CPU_PPC7400\n \t       || rs6000_cpu_attr == CPU_PPC7450\n-\t       || rs6000_cpu_attr == CPU_POWER4)\n+\t       || rs6000_cpu_attr == CPU_POWER4\n+\t       || rs6000_cpu_attr == CPU_POWER5)\n \t      && recog_memoized (dep_insn)\n \t      && (INSN_CODE (dep_insn) >= 0)\n \t      && (get_attr_type (dep_insn) == TYPE_CMP\n@@ -13965,7 +13981,7 @@ is_microcoded_insn (rtx insn)\n       || GET_CODE (PATTERN (insn)) == CLOBBER)\n     return false;\n \n-  if (rs6000_cpu == PROCESSOR_POWER4)\n+  if (rs6000_sched_groups)\n     {\n       enum attr_type type = get_attr_type (insn);\n       if (type == TYPE_LOAD_EXT_U\n@@ -13990,7 +14006,7 @@ is_dispatch_slot_restricted (rtx insn)\n {\n   enum attr_type type;\n \n-  if (rs6000_cpu != PROCESSOR_POWER4)\n+  if (!rs6000_sched_groups)\n     return 0;\n \n   if (!insn\n@@ -14002,21 +14018,25 @@ is_dispatch_slot_restricted (rtx insn)\n \n   type = get_attr_type (insn);\n \n-  switch (type){\n-  case TYPE_MFCR:\n-  case TYPE_MFCRF:\n-  case TYPE_MTCR:\n-  case TYPE_DELAYED_CR:\n-  case TYPE_CR_LOGICAL:\n-  case TYPE_MTJMPR:\n-  case TYPE_MFJMPR:\n-    return 1;\n-  case TYPE_IDIV:\n-  case TYPE_LDIV:\n-    return 2;\n-  default:\n-    return 0;\n-  }\n+  switch (type)\n+    {\n+    case TYPE_MFCR:\n+    case TYPE_MFCRF:\n+    case TYPE_MTCR:\n+    case TYPE_DELAYED_CR:\n+    case TYPE_CR_LOGICAL:\n+    case TYPE_MTJMPR:\n+    case TYPE_MFJMPR:\n+      return 1;\n+    case TYPE_IDIV:\n+    case TYPE_LDIV:\n+      return 2;\n+    default:\n+      if (rs6000_cpu == PROCESSOR_POWER5\n+\t  && is_cracked_insn (insn))\n+\treturn 2;\n+      return 0;\n+    }\n }\n \n /* The function returns true if INSN is cracked into 2 instructions\n@@ -14030,7 +14050,7 @@ is_cracked_insn (rtx insn)\n       || GET_CODE (PATTERN (insn)) == CLOBBER)\n     return false;\n \n-  if (rs6000_cpu == PROCESSOR_POWER4)\n+  if (rs6000_sched_groups)\n     {\n       enum attr_type type = get_attr_type (insn);\n       if (type == TYPE_LOAD_U || type == TYPE_STORE_U\n@@ -14058,7 +14078,7 @@ is_branch_slot_insn (rtx insn)\n       || GET_CODE (PATTERN (insn)) == CLOBBER)\n     return false;\n \n-  if (rs6000_cpu == PROCESSOR_POWER4)\n+  if (rs6000_sched_groups)\n     {\n       enum attr_type type = get_attr_type (insn);\n       if (type == TYPE_BRANCH || type == TYPE_JMPREG)\n@@ -14158,6 +14178,7 @@ rs6000_issue_rate (void)\n   case CPU_PPC630:\n     return 4;\n   case CPU_POWER4:\n+  case CPU_POWER5:\n     return 5;\n   default:\n     return 1;\n@@ -14711,7 +14732,7 @@ rs6000_sched_finish (FILE *dump, int sched_verbose)\n   if (sched_verbose)\n     fprintf (dump, \"=== Finishing schedule.\\n\");\n \n-  if (reload_completed && rs6000_cpu == PROCESSOR_POWER4)\n+  if (reload_completed && rs6000_sched_groups)\n     {\n       if (rs6000_sched_insert_nops == sched_finish_none)\n         return;\n@@ -15905,6 +15926,7 @@ rs6000_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED,\n \t  return true;\n \n \tcase PROCESSOR_POWER4:\n+\tcase PROCESSOR_POWER5:\n \t  *total = (GET_CODE (XEXP (x, 1)) != CONST_INT\n \t\t    ? GET_MODE (XEXP (x, 1)) != DImode\n \t\t    ? COSTS_N_INSNS (3) : COSTS_N_INSNS (4)\n@@ -15990,6 +16012,7 @@ rs6000_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED,\n \t  return true;\n \n \tcase PROCESSOR_POWER4:\n+\tcase PROCESSOR_POWER5:\n \t  *total = (GET_MODE (XEXP (x, 1)) != DImode\n \t\t    ? COSTS_N_INSNS (18)\n \t\t    : COSTS_N_INSNS (34));"}, {"sha": "7590dfd871709a92cdec6e7ddfd888e96aa01a97", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec507f2d8b6a00a9139d53964d2e7df902336814/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec507f2d8b6a00a9139d53964d2e7df902336814/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=ec507f2d8b6a00a9139d53964d2e7df902336814", "patch": "@@ -386,7 +386,8 @@ enum processor_type\n    PROCESSOR_PPC7400,\n    PROCESSOR_PPC7450,\n    PROCESSOR_PPC8540,\n-   PROCESSOR_POWER4\n+   PROCESSOR_POWER4,\n+   PROCESSOR_POWER5\n };\n \n extern enum processor_type rs6000_cpu;\n@@ -550,19 +551,6 @@ extern const char *rs6000_warn_altivec_long_switch;\n #define TARGET_ALIGN_NATURAL 0\n #endif\n \n-/* Set a default value for DEFAULT_SCHED_COSTLY_DEP used by target hook\n-   is_costly_dependence.  */ \n-#define DEFAULT_SCHED_COSTLY_DEP                           \\\n-  (rs6000_cpu == PROCESSOR_POWER4 ? store_to_load_dep_costly : no_dep_costly)\n-\n-/* Define if the target has restricted dispatch slot instructions.  */\n-#define DEFAULT_RESTRICTED_INSNS_PRIORITY (rs6000_cpu == PROCESSOR_POWER4 ? 1 : 0)\n-\n-/* Set a default value for post scheduling nop insertion scheme\n-   (used by taget hook sched_finish).  */\n-#define DEFAULT_SCHED_FINISH_NOP_INSERTION_SCHEME          \\\n-  (rs6000_cpu == PROCESSOR_POWER4 ? sched_finish_regroup_exact : sched_finish_none)\n-\n #define TARGET_LONG_DOUBLE_128 (rs6000_long_double_type_size == 128)\n #define TARGET_ALTIVEC_ABI rs6000_altivec_abi\n #define TARGET_ALTIVEC_VRSAVE rs6000_altivec_vrsave"}, {"sha": "b88aef9fb992ea979dd945e8d5ffef4a61a46f73", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec507f2d8b6a00a9139d53964d2e7df902336814/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec507f2d8b6a00a9139d53964d2e7df902336814/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ec507f2d8b6a00a9139d53964d2e7df902336814", "patch": "@@ -82,7 +82,7 @@\n ;; Processor type -- this attribute must exactly match the processor_type\n ;; enumeration in rs6000.h.\n \n-(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc405,ppc440,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450,ppc8540,power4\"\n+(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc405,ppc440,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450,ppc8540,power4,power5\"\n   (const (symbol_ref \"rs6000_cpu_attr\")))\n \n (automata_option \"ndfa\")\n@@ -99,6 +99,7 @@\n (include \"7450.md\")\n (include \"8540.md\")\n (include \"power4.md\")\n+(include \"power5.md\")\n \n \f\n ;; Start with fixed-point load and store insns.  Here we put only the more"}, {"sha": "ac3a49ad0aeb99d83fbcd124acb98988794cb03c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec507f2d8b6a00a9139d53964d2e7df902336814/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec507f2d8b6a00a9139d53964d2e7df902336814/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ec507f2d8b6a00a9139d53964d2e7df902336814", "patch": "@@ -7041,8 +7041,8 @@ Supported values for @var{cpu_type} are @samp{401}, @samp{403},\n @samp{7450}, @samp{750}, @samp{801}, @samp{821}, @samp{823},\n @samp{860}, @samp{970}, @samp{common}, @samp{ec603e}, @samp{G3},\n @samp{G4}, @samp{G5}, @samp{power}, @samp{power2}, @samp{power3},\n-@samp{power4}, @samp{powerpc}, @samp{powerpc64}, @samp{rios},\n-@samp{rios1}, @samp{rios2}, @samp{rsc}, and @samp{rs64a}.\n+@samp{power4}, @samp{power5}, @samp{powerpc}, @samp{powerpc64},\n+@samp{rios}, @samp{rios1}, @samp{rios2}, @samp{rsc}, and @samp{rs64a}.\n \n @option{-mcpu=common} selects a completely generic processor.  Code\n generated under this option will run on any POWER or PowerPC processor."}]}