{"sha": "033aa406ca81760098f7a8b9a193d6fd2391ace6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMzYWE0MDZjYTgxNzYwMDk4ZjdhOGI5YTE5M2Q2ZmQyMzkxYWNlNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-04-14T08:09:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-04-14T08:09:06Z"}, "message": "re PR tree-optimization/59817 (ICE in extract_affine_chrec with -O2 -ftree-loop-linear)\n\n2014-04-14  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/59817\n\tPR tree-optimization/60453\n\t* graphite-scop-detection.c (graphite_can_represent_scev): Complete\n\trecursion to catch all CHRECs in the scalar evolution and restrict\n\tthe predicate for the remains appropriately.\n\n\t* gfortran.dg/graphite/pr59817.f: New testcase.\n\t* gcc.dg/graphite/pr59817-1.c: Likewise.\n\t* gcc.dg/graphite/pr59817-2.c: Likewise.\n\nFrom-SVN: r209355", "tree": {"sha": "d7e6bcc55f059e8078a20e844d75b2e20e91d772", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7e6bcc55f059e8078a20e844d75b2e20e91d772"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/033aa406ca81760098f7a8b9a193d6fd2391ace6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/033aa406ca81760098f7a8b9a193d6fd2391ace6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/033aa406ca81760098f7a8b9a193d6fd2391ace6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/033aa406ca81760098f7a8b9a193d6fd2391ace6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b82b06487ef2331db4610d74a2d2816b8bb0ddd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b82b06487ef2331db4610d74a2d2816b8bb0ddd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b82b06487ef2331db4610d74a2d2816b8bb0ddd2"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "a80c21f27decbf74b998ee9a9ca743432dace37d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033aa406ca81760098f7a8b9a193d6fd2391ace6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033aa406ca81760098f7a8b9a193d6fd2391ace6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=033aa406ca81760098f7a8b9a193d6fd2391ace6", "patch": "@@ -1,3 +1,11 @@\n+2014-04-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/59817\n+\tPR tree-optimization/60453\n+\t* graphite-scop-detection.c (graphite_can_represent_scev): Complete\n+\trecursion to catch all CHRECs in the scalar evolution and restrict\n+\tthe predicate for the remains appropriately.\n+\n 2014-04-12  Catherine Moore  <clm@codesourcery.com>\n \n \t* config/mips/constraints.md: Add new register constraint \"kb\"."}, {"sha": "821f0846ef2bbda19adef9badfba22d6f921a591", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033aa406ca81760098f7a8b9a193d6fd2391ace6/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033aa406ca81760098f7a8b9a193d6fd2391ace6/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=033aa406ca81760098f7a8b9a193d6fd2391ace6", "patch": "@@ -219,7 +219,14 @@ graphite_can_represent_scev (tree scev)\n \n   switch (TREE_CODE (scev))\n     {\n+    case NEGATE_EXPR:\n+    case BIT_NOT_EXPR:\n+    CASE_CONVERT:\n+    case NON_LVALUE_EXPR:\n+      return graphite_can_represent_scev (TREE_OPERAND (scev, 0));\n+\n     case PLUS_EXPR:\n+    case POINTER_PLUS_EXPR:\n     case MINUS_EXPR:\n       return graphite_can_represent_scev (TREE_OPERAND (scev, 0))\n \t&& graphite_can_represent_scev (TREE_OPERAND (scev, 1));\n@@ -241,13 +248,15 @@ graphite_can_represent_scev (tree scev)\n       if (!evolution_function_right_is_integer_cst (scev)\n \t  || !graphite_can_represent_init (scev))\n \treturn false;\n+      return graphite_can_represent_scev (CHREC_LEFT (scev));\n \n     default:\n       break;\n     }\n \n   /* Only affine functions can be represented.  */\n-  if (!scev_is_linear_expression (scev))\n+  if (tree_contains_chrecs (scev, NULL)\n+      || !scev_is_linear_expression (scev))\n     return false;\n \n   return true;"}, {"sha": "e09c499db71a6d6e73e584dce9d6e34278d9964b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033aa406ca81760098f7a8b9a193d6fd2391ace6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033aa406ca81760098f7a8b9a193d6fd2391ace6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=033aa406ca81760098f7a8b9a193d6fd2391ace6", "patch": "@@ -1,3 +1,11 @@\n+2014-04-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/59817\n+\tPR tree-optimization/60453\n+\t* gfortran.dg/graphite/pr59817.f: New testcase.\n+\t* gcc.dg/graphite/pr59817-1.c: Likewise.\n+\t* gcc.dg/graphite/pr59817-2.c: Likewise.\n+\n 2014-04-14  Jason Merrill  <jason@redhat.com>\n \n \tRevert:"}, {"sha": "175fa16fd71ae09ac2de855d8bf505dfeb3956de", "filename": "gcc/testsuite/gcc.dg/graphite/pr59817-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033aa406ca81760098f7a8b9a193d6fd2391ace6/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr59817-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033aa406ca81760098f7a8b9a193d6fd2391ace6/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr59817-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr59817-1.c?ref=033aa406ca81760098f7a8b9a193d6fd2391ace6", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -floop-interchange\" } */\n+\n+int kd;\n+\n+void\n+n2(void)\n+{\n+  static int so;\n+  static short int i5;\n+  int wj;\n+  int *il;\n+  int *nk = &so;\n+  for (wj = 0; wj < 2; ++wj)\n+    *nk = ((i5 += *il) || kd );\n+}"}, {"sha": "13950076814bf8337e1bf1654ec303cace1ee941", "filename": "gcc/testsuite/gcc.dg/graphite/pr59817-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033aa406ca81760098f7a8b9a193d6fd2391ace6/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr59817-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033aa406ca81760098f7a8b9a193d6fd2391ace6/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr59817-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr59817-2.c?ref=033aa406ca81760098f7a8b9a193d6fd2391ace6", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -floop-interchange\" } */\n+\n+void\n+xl(void)\n+{\n+  static int j3;\n+  for (j3 = 0; j3 < 1; ++j3) {\n+      static int f2;\n+      static int w7;\n+      short int b5;\n+      int ok;\n+      f2 = (b5 += ok) ? (w7 = 0): (w7 ? 0 : (f2 = ok));\n+  }\n+}"}, {"sha": "a9ee8f19dd7589fd7b729280d022e6f37ca7fe92", "filename": "gcc/testsuite/gfortran.dg/graphite/pr59817.f", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033aa406ca81760098f7a8b9a193d6fd2391ace6/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr59817.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033aa406ca81760098f7a8b9a193d6fd2391ace6/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr59817.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr59817.f?ref=033aa406ca81760098f7a8b9a193d6fd2391ace6", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -floop-interchange\" }\n+      SUBROUTINE PREPD(ICAST,ICAS,ICASX,ICAS1,ICAS2,NDET,NM,III,IMP,\n+     *                 CASMIN)\n+      LOGICAL CASMIN\n+      DIMENSION ICAST(NDET,NM),IMP(NM)\n+      IF(CASMIN) THEN\n+         DO K=1,NDET\n+            DO L=1,NM\n+               IF(L.EQ.K-1) ICAST(K,L) = 1\n+            END DO\n+         END DO\n+      END IF\n+      END SUBROUTINE"}]}