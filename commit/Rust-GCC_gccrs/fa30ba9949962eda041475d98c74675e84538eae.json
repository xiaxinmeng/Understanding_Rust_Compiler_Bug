{"sha": "fa30ba9949962eda041475d98c74675e84538eae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEzMGJhOTk0OTk2MmVkYTA0MTQ3NWQ5OGM3NDY3NWU4NDUzOGVhZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-11-17T07:42:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-11-17T07:42:28Z"}, "message": "re PR testsuite/82997 (gcc.dg/cpp/sysmac1.c and gcc.dg/cpp/macsyntx.c fail starting with r254707)\n\n\tPR testsuite/82997\n\t* gcc.dg/cpp/macsyntx.c (var1, rest): Don't expect\n\t\"requires at least one\" warning.\n\t* gcc.dg/cpp/sysmac1.c (foo): Likewise.\n\t* gcc.dg/cpp/macsyntx2.c: New test.\n\t* gcc.dg/cpp/sysmac3.c: New test.\n\t* gcc.dg/cpp/sysmac3.h: New file.\n\nFrom-SVN: r254857", "tree": {"sha": "5d5c5ec8c3a8e85248284f28745aa7617bd49439", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d5c5ec8c3a8e85248284f28745aa7617bd49439"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa30ba9949962eda041475d98c74675e84538eae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa30ba9949962eda041475d98c74675e84538eae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa30ba9949962eda041475d98c74675e84538eae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa30ba9949962eda041475d98c74675e84538eae/comments", "author": null, "committer": null, "parents": [{"sha": "caed5c92712701509413c579fb004faa965e4004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caed5c92712701509413c579fb004faa965e4004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caed5c92712701509413c579fb004faa965e4004"}], "stats": {"total": 134, "additions": 126, "deletions": 8}, "files": [{"sha": "165c5c976aa809a9fb0097cff623917008d28d15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa30ba9949962eda041475d98c74675e84538eae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa30ba9949962eda041475d98c74675e84538eae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa30ba9949962eda041475d98c74675e84538eae", "patch": "@@ -1,4 +1,4 @@\n-2017-11-15  Qing Zhao <qing.zhao@oracle.com>\n+2017-11-15  Qing Zhao  <qing.zhao@oracle.com>\n \n \tPR middle-end/78809\n \t* gimple-fold.c (gimple_fold_builtin_string_compare): Add handling"}, {"sha": "941b0c0f5148d5603ad9d7c1e0c27d1e10333b4a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa30ba9949962eda041475d98c74675e84538eae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa30ba9949962eda041475d98c74675e84538eae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa30ba9949962eda041475d98c74675e84538eae", "patch": "@@ -1,4 +1,14 @@\n-2017-11-15  Qing Zhao  <qing.zhao@oracle.com <mailto:qing.zhao@oracle.com>>\n+2017-11-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR testsuite/82997\n+\t* gcc.dg/cpp/macsyntx.c (var1, rest): Don't expect\n+\t\"requires at least one\" warning.\n+\t* gcc.dg/cpp/sysmac1.c (foo): Likewise.\n+\t* gcc.dg/cpp/macsyntx2.c: New test.\n+\t* gcc.dg/cpp/sysmac3.c: New test.\n+\t* gcc.dg/cpp/sysmac3.h: New file.\n+\n+2017-11-15  Qing Zhao  <qing.zhao@oracle.com>\n \n \tPR middle-end/78809\n \t* gcc.dg/strcmpopt_1.c: New test."}, {"sha": "a6c8e1191002454b3d06a1bcbd5fe473ba1b5273", "filename": "gcc/testsuite/gcc.dg/cpp/macsyntx.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa30ba9949962eda041475d98c74675e84538eae/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacsyntx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa30ba9949962eda041475d98c74675e84538eae/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacsyntx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacsyntx.c?ref=fa30ba9949962eda041475d98c74675e84538eae", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n+/* Copyright (C) 2000-2017 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n /* { dg-options \"-pedantic -std=gnu99\" } */\n@@ -51,15 +51,15 @@ one(ichi\\\n two(ichi)\t\t\t/* { dg-error \"requires 2\" } */\n var0()\t\t\t\t/* OK.  */\n var0(ichi)\t\t\t/* OK.  */\n-var1()\t\t\t\t/* { dg-warning \"requires at least one\" } */\n-var1(ichi)\t\t\t/* { dg-warning \"requires at least one\" } */\n+var1()\t\t\t\t/* { dg-bogus \"requires at least one\" } */\n+var1(ichi)\t\t\t/* { dg-bogus \"requires at least one\" } */\n var1(ichi, ni)\t\t\t/* OK.  */\n \n /* This tests two oddities of GNU rest args - omitting a comma is OK,\n    and backtracking a token on pasting an empty rest args.  */\n #define rest(x, y...) x ## y\t/* { dg-warning \"ISO C\" } */\n rest(ichi,)\t\t\t/* OK.  */\n-rest(ichi)\t\t\t/* { dg-warning \"requires at least one\" } */\n+rest(ichi)\t\t\t/* { dg-bogus \"requires at least one\" } */\n #if 23 != rest(2, 3)\t\t/* OK, no warning.  */\n #error 23 != 23 !!\n #endif"}, {"sha": "1fbd115c436ef7f765c68bc8a266d6c7e5d765e7", "filename": "gcc/testsuite/gcc.dg/cpp/macsyntx2.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa30ba9949962eda041475d98c74675e84538eae/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacsyntx2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa30ba9949962eda041475d98c74675e84538eae/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacsyntx2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacsyntx2.c?ref=fa30ba9949962eda041475d98c74675e84538eae", "patch": "@@ -0,0 +1,72 @@\n+/* Copyright (C) 2000-2017 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"-pedantic -std=c99\" } */\n+\n+/* Tests macro syntax, for both definition and invocation, including:-\n+\n+   o Full range of macro definition semantics.\n+   o No. of arguments supplied to function-like macros.\n+   o Odd GNU rest args behavior.\n+   o Macro arguments do not flow into the rest of the file.  */\n+\n+\n+/* Test basic macro definition syntax.  The macros are all called\n+   \"foo\" deliberately to provoke an (excess) redefinition warning in\n+   case the macros succeed in being entered in the macro hash table\n+   despite being an error.\n+\n+   Split a couple of the lines to check that the errors appear on the\n+   right line (i.e. are associated with the correct token).  */\n+\n+#define ;\t\t\t/* { dg-error \"identifier\" } */\n+#define SEMI;\t\t\t/* { dg-warning \"space\" } */\n+#define foo(X\t\t\t/* { dg-error \"missing\" } */\n+#define foo\\\n+(X,)\t\t\t\t/* { dg-error \"parameter name\" } */\n+#define foo(, X)\t\t/* { dg-error \"parameter name\" } */\n+#define foo(X, X)\t\t/* { dg-error \"duplicate\" } */\n+#define foo(X Y)\t\t/* { dg-error \"comma\" } */\n+#define foo(()\t\t\t/* { dg-error \"may not appear\" } */\n+#define foo(..., X)\t\t/* { dg-error \"missing\" } */\n+#define foo \\\n+__VA_ARGS__\t\t\t/* { dg-warning \"__VA_ARGS__\" } */\n+#define goo(__VA_ARGS__)\t/* { dg-warning \"__VA_ARGS__\" } */\n+#define hoo(...) __VA_ARGS__\t/* OK.  */\n+#define __VA_ARGS__\t\t/* { dg-warning \"__VA_ARGS__\" } */\n+__VA_ARGS__\t\t\t/* { dg-warning \"__VA_ARGS__\" } */\n+\n+/* test # of supplied arguments.  */\n+#define none()\n+#define one(x)\n+#define two(x, y)\n+#define var0(...)\n+#define var1(x, ...)\n+none()\t\t\t\t/* OK.  */\n+none(ichi)\t\t\t/* { dg-error \"passed 1\" } */\n+one()\t\t\t\t/* OK.  */\n+one(ichi)\t\t\t/* OK.  */\n+one(ichi\\\n+, ni)\t\t\t\t/* { dg-error \"passed 2\" } */\n+two(ichi)\t\t\t/* { dg-error \"requires 2\" } */\n+var0()\t\t\t\t/* OK.  */\n+var0(ichi)\t\t\t/* OK.  */\n+var1()\t\t\t\t/* { dg-warning \"requires at least one\" } */\n+var1(ichi)\t\t\t/* { dg-warning \"requires at least one\" } */\n+var1(ichi, ni)\t\t\t/* OK.  */\n+\n+/* This tests two oddities of GNU rest args - omitting a comma is OK,\n+   and backtracking a token on pasting an empty rest args.  */\n+#define rest(x, y...) x ## y\t/* { dg-warning \"ISO C\" } */\n+rest(ichi,)\t\t\t/* OK.  */\n+rest(ichi)\t\t\t/* { dg-warning \"requires at least one\" } */\n+#if 23 != rest(2, 3)\t\t/* OK, no warning.  */\n+#error 23 != 23 !!\n+#endif\n+\n+/* Test that we don't allow arguments to flow into the rest of the\n+   file.  */\n+#define half_invocation do_nowt(2\n+#define do_nowt(x) x\n+half_invocation )\t\t/* OK.  */\n+do_nowt (half_invocation))\t/* { dg-error \"unterminated argument\" } */"}, {"sha": "acd1365f837d60ab91619bbd1a5933e415ae1f7a", "filename": "gcc/testsuite/gcc.dg/cpp/sysmac1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa30ba9949962eda041475d98c74675e84538eae/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsysmac1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa30ba9949962eda041475d98c74675e84538eae/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsysmac1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsysmac1.c?ref=fa30ba9949962eda041475d98c74675e84538eae", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2001 Free Software Foundation, Inc.  */\n+/* Copyright (C) 2001-2017 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n /* { dg-options \"-std=gnu99 -pedantic -Wtraditional -ftrack-macro-expansion=0\" } */\n@@ -22,5 +22,5 @@\n (str);\t\t\t\t/* { dg-warning \"used with arguments\" } */\n (sys_str);\t\t\t/* { dg-bogus \"used with arguments\" } */\n \n-foo (one_arg);\t\t\t/* { dg-warning \"requires at least one\" } */\n+foo (one_arg);\t\t\t/* { dg-bogus \"requires at least one\" } */\n sys_foo (one_arg);\t\t/* { dg-bogus \"requires at least one\" } */"}, {"sha": "a0e264dd3915c542c338bd98095b6437bed1a7e5", "filename": "gcc/testsuite/gcc.dg/cpp/sysmac3.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa30ba9949962eda041475d98c74675e84538eae/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsysmac3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa30ba9949962eda041475d98c74675e84538eae/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsysmac3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsysmac3.c?ref=fa30ba9949962eda041475d98c74675e84538eae", "patch": "@@ -0,0 +1,26 @@\n+/* Copyright (C) 2001-2017 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c99 -pedantic -Wtraditional -ftrack-macro-expansion=0\" } */\n+\n+/* Tests diagnostics are suppressed for some macros defined in system\n+   headers.  */\n+\n+/* Source: Neil Booth, 15 Jan 2001.  */\n+\n+#include \"sysmac3.h\"\n+\n+#define uint 1U\n+#define str(x) x\n+#define foo(x, y...) bar(x, y)\t/* { dg-warning \"named variadic macros\" } */\n+\n+#if uint\t\t\t/* { dg-warning \"traditional C rejects\" } */\n+#endif\n+#if sys_uint\t\t\t/* { dg-bogus \"traditional C rejects\" } */\n+#endif\n+\n+(str);\t\t\t\t/* { dg-warning \"used with arguments\" } */\n+(sys_str);\t\t\t/* { dg-bogus \"used with arguments\" } */\n+\n+foo (one_arg);\t\t\t/* { dg-warning \"requires at least one\" } */\n+sys_foo (one_arg);\t\t/* { dg-bogus \"requires at least one\" } */"}, {"sha": "46077de86cdcc787c4a6b0c29c98352f9b55412d", "filename": "gcc/testsuite/gcc.dg/cpp/sysmac3.h", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa30ba9949962eda041475d98c74675e84538eae/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsysmac3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa30ba9949962eda041475d98c74675e84538eae/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsysmac3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsysmac3.h?ref=fa30ba9949962eda041475d98c74675e84538eae", "patch": "@@ -0,0 +1,10 @@\n+/* Indented to avoid \"suggest hiding ...\" warnings.   */\n+ #pragma GCC system_header\n+\n+#define sys_uint 1U\n+#define sys_str(x) x\n+#define sys_foo(x, y...) bar (x, y)\n+\n+#define sys_uint 1U\n+#define sys_fl 1.0f\n+#define sys_ld 1.0L"}]}