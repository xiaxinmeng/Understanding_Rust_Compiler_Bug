{"sha": "545ca0f2785bd261c13392cb6191640282a73ee9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ1Y2EwZjI3ODViZDI2MWMxMzM5MmNiNjE5MTY0MDI4MmE3M2VlOQ==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2012-08-23T15:42:03Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2012-08-23T15:42:03Z"}, "message": "2012-08-23  Julian Brown  <julian@codesourcery.com>\n\t    Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* config/mips/mips.md\n\t(UNSPEC_CASESI_DISPATCH): New.\n\t(MIPS16_T_REGNUM): New constant.\n\t(tablejump): Don't use for MIPS16_SHORT_JUMP_TABLES.\n\t(casesi): New.\n\t(casesi_internal_mips16_<mode>): New.\n\t* config/mips/mips.c (mips16_split_long_branches): Adjust test\n\tto ignore casesi jump tables.\n\t* config/mips/mips.h (TARGET_MIPS16_SHORT_JUMP_TABLES): Update\n\tcomment.\n\t(CASE_VECTOR_MODE): Use SImode unconditionally.\n\t(CASE_VECTOR_SHORTEN_MODE): Define.\n\t(ASM_OUTPUT_ADDR_DIFF_ELT): Output word-sized addr_diff_elts\n\twhen necessary for MIPS16_SHORT_JUMP_TABLES.\n\n\tgcc/testsuite/\n\t* gcc.target/mips/code-readable-1.c: Add -O to options.\n\nCo-Authored-By: Sandra Loosemore <sandra@codesourcery.com>\n\nFrom-SVN: r190625", "tree": {"sha": "2facdea4b5e6621f78227ef010d5ac4afd8e6332", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2facdea4b5e6621f78227ef010d5ac4afd8e6332"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/545ca0f2785bd261c13392cb6191640282a73ee9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/545ca0f2785bd261c13392cb6191640282a73ee9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/545ca0f2785bd261c13392cb6191640282a73ee9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/545ca0f2785bd261c13392cb6191640282a73ee9/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a147b6d28fa9db1c7533d53e19837009f3f7fd05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a147b6d28fa9db1c7533d53e19837009f3f7fd05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a147b6d28fa9db1c7533d53e19837009f3f7fd05"}], "stats": {"total": 150, "additions": 136, "deletions": 14}, "files": [{"sha": "5812a91128fc55a8dc39bcd0292ae32a76fce5a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/545ca0f2785bd261c13392cb6191640282a73ee9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/545ca0f2785bd261c13392cb6191640282a73ee9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=545ca0f2785bd261c13392cb6191640282a73ee9", "patch": "@@ -1,3 +1,21 @@\n+2012-08-23  Julian Brown  <julian@codesourcery.com>\n+\t    Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* config/mips/mips.md\n+\t(UNSPEC_CASESI_DISPATCH): New.\n+\t(MIPS16_T_REGNUM): New constant.\n+\t(tablejump): Don't use for MIPS16_SHORT_JUMP_TABLES.\n+\t(casesi): New.\n+\t(casesi_internal_mips16_<mode>): New.\n+\t* config/mips/mips.c (mips16_split_long_branches): Adjust test\n+\tto ignore casesi jump tables.\n+\t* config/mips/mips.h (TARGET_MIPS16_SHORT_JUMP_TABLES): Update\n+\tcomment.\n+\t(CASE_VECTOR_MODE): Use SImode unconditionally.\n+\t(CASE_VECTOR_SHORTEN_MODE): Define.\n+\t(ASM_OUTPUT_ADDR_DIFF_ELT): Output word-sized addr_diff_elts\n+\twhen necessary for MIPS16_SHORT_JUMP_TABLES.\n+\n 2012-08-23  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_density_test): Free loop body."}, {"sha": "dc9f9cfc51910fe963565c23d486f8a052354d1e", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/545ca0f2785bd261c13392cb6191640282a73ee9/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/545ca0f2785bd261c13392cb6191640282a73ee9/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=545ca0f2785bd261c13392cb6191640282a73ee9", "patch": "@@ -15575,7 +15575,8 @@ mips16_split_long_branches (void)\n       for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n \tif (JUMP_P (insn)\n \t    && USEFUL_INSN_P (insn)\n-\t    && get_attr_length (insn) > 8)\n+\t    && get_attr_length (insn) > 8\n+\t    && (any_condjump_p (insn) || any_uncondjump_p (insn)))\n \t  {\n \t    rtx old_label, new_label, temp, saved_temp;\n \t    rtx target, jump, jump_sequence;"}, {"sha": "9ff36b3144f8341bf465c8b4cc1abeaff3a8c3a5", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/545ca0f2785bd261c13392cb6191640282a73ee9/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/545ca0f2785bd261c13392cb6191640282a73ee9/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=545ca0f2785bd261c13392cb6191640282a73ee9", "patch": "@@ -2330,13 +2330,18 @@ typedef struct mips_args {\n /* True if we're generating a form of MIPS16 code in which jump tables\n    are stored in the text section and encoded as 16-bit PC-relative\n    offsets.  This is only possible when general text loads are allowed,\n-   since the table access itself will be an \"lh\" instruction.  */\n-/* ??? 16-bit offsets can overflow in large functions.  */\n+   since the table access itself will be an \"lh\" instruction.  If the\n+   PC-relative offsets grow too large, 32-bit offsets are used instead.  */\n #define TARGET_MIPS16_SHORT_JUMP_TABLES TARGET_MIPS16_TEXT_LOADS\n \n #define JUMP_TABLES_IN_TEXT_SECTION TARGET_MIPS16_SHORT_JUMP_TABLES\n \n-#define CASE_VECTOR_MODE (TARGET_MIPS16_SHORT_JUMP_TABLES ? HImode : ptr_mode)\n+#define CASE_VECTOR_MODE SImode\n+\n+/* Only use short offsets if their range will not overflow.  */\n+#define CASE_VECTOR_SHORTEN_MODE(MIN, MAX, BODY) \\\n+  (TARGET_MIPS16_SHORT_JUMP_TABLES && ((MIN) >= -32768 && (MAX) < 32768) \\\n+   ? HImode : SImode)\n \n #define CASE_VECTOR_PC_RELATIVE TARGET_MIPS16_SHORT_JUMP_TABLES\n \n@@ -2636,8 +2641,14 @@ while (0)\n #define ASM_OUTPUT_ADDR_DIFF_ELT(STREAM, BODY, VALUE, REL)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_MIPS16_SHORT_JUMP_TABLES)\t\t\t\t\t\\\n-    fprintf (STREAM, \"\\t.half\\t%sL%d-%sL%d\\n\",\t\t\t\t\\\n-\t     LOCAL_LABEL_PREFIX, VALUE, LOCAL_LABEL_PREFIX, REL);\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (GET_MODE (BODY) == HImode)\t\t\t\t\t\\\n+\tfprintf (STREAM, \"\\t.half\\t%sL%d-%sL%d\\n\",\t\t\t\\\n+\t\t LOCAL_LABEL_PREFIX, VALUE, LOCAL_LABEL_PREFIX, REL);\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tfprintf (STREAM, \"\\t.word\\t%sL%d-%sL%d\\n\",\t\t\t\\\n+\t\t LOCAL_LABEL_PREFIX, VALUE, LOCAL_LABEL_PREFIX, REL);\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n   else if (TARGET_GPWORD)\t\t\t\t\t\t\\\n     fprintf (STREAM, \"\\t%s\\t%sL%d\\n\",\t\t\t\t\t\\\n \t     ptr_mode == DImode ? \".gpdword\" : \".gpword\",\t\t\\"}, {"sha": "426a97cef539c24f0f42e49927e6b75fffa6957d", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 94, "deletions": 7, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/545ca0f2785bd261c13392cb6191640282a73ee9/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/545ca0f2785bd261c13392cb6191640282a73ee9/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=545ca0f2785bd261c13392cb6191640282a73ee9", "patch": "@@ -134,10 +134,14 @@\n   ;; Used in a call expression in place of args_size.  It's present for PIC\n   ;; indirect calls where it contains args_size and the function symbol.\n   UNSPEC_CALL_ATTR\n+\n+  ;; MIPS16 casesi jump table dispatch.\n+  UNSPEC_CASESI_DISPATCH\n ])\n \n (define_constants\n   [(TLS_GET_TP_REGNUM\t\t3)\n+   (MIPS16_T_REGNUM\t\t24)\n    (PIC_FUNCTION_ADDR_REGNUM\t25)\n    (RETURN_ADDR_REGNUM\t\t31)\n    (CPRESTORE_SLOT_REGNUM\t76)\n@@ -5904,14 +5908,9 @@\n   [(set (pc)\n \t(match_operand 0 \"register_operand\"))\n    (use (label_ref (match_operand 1 \"\")))]\n-  \"\"\n+  \"!TARGET_MIPS16_SHORT_JUMP_TABLES\"\n {\n-  if (TARGET_MIPS16_SHORT_JUMP_TABLES)\n-    operands[0] = expand_binop (Pmode, add_optab,\n-\t\t\t\tconvert_to_mode (Pmode, operands[0], false),\n-\t\t\t\tgen_rtx_LABEL_REF (Pmode, operands[1]),\n-\t\t\t\t0, 0, OPTAB_WIDEN);\n-  else if (TARGET_GPWORD)\n+  if (TARGET_GPWORD)\n     operands[0] = expand_binop (Pmode, add_optab, operands[0],\n \t\t\t\tpic_offset_table_rtx, 0, 0, OPTAB_WIDEN);\n   else if (TARGET_RTP_PIC)\n@@ -5937,6 +5936,94 @@\n   [(set_attr \"type\" \"jump\")\n    (set_attr \"mode\" \"none\")])\n \n+;; For MIPS16, we don't know whether a given jump table will use short or\n+;; word-sized offsets until late in compilation, when we are able to determine\n+;; the sizes of the insns which comprise the containing function.  This\n+;; necessitates the use of the casesi rather than the tablejump pattern, since\n+;; the latter tries to calculate the index of the offset to jump through early\n+;; in compilation, i.e. at expand time, when nothing is known about the\n+;; eventual function layout.\n+\n+(define_expand \"casesi\"\n+  [(match_operand:SI 0 \"register_operand\" \"\")\t; index to jump on\n+   (match_operand:SI 1 \"const_int_operand\" \"\")\t; lower bound\n+   (match_operand:SI 2 \"const_int_operand\" \"\")\t; total range\n+   (match_operand 3 \"\" \"\")\t\t\t; table label\n+   (match_operand 4 \"\" \"\")]\t\t\t; out of range label\n+  \"TARGET_MIPS16_SHORT_JUMP_TABLES\"\n+{\n+  if (operands[1] != const0_rtx)\n+    {\n+      rtx reg = gen_reg_rtx (SImode);\n+      rtx offset = gen_int_mode (-INTVAL (operands[1]), SImode);\n+      \n+      if (!arith_operand (offset, SImode))\n+        offset = force_reg (SImode, offset);\n+      \n+      emit_insn (gen_addsi3 (reg, operands[0], offset));\n+      operands[0] = reg;\n+    }\n+\n+  if (!arith_operand (operands[0], SImode))\n+    operands[0] = force_reg (SImode, operands[0]);\n+\n+  operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n+\n+  emit_jump_insn (PMODE_INSN (gen_casesi_internal_mips16,\n+\t\t\t      (operands[0], operands[2],\n+\t\t\t       operands[3], operands[4])));\n+\n+  DONE;\n+})\n+\n+(define_insn \"casesi_internal_mips16_<mode>\"\n+  [(set (pc)\n+     (if_then_else\n+       (leu (match_operand:SI 0 \"register_operand\" \"d\")\n+\t    (match_operand:SI 1 \"arith_operand\" \"dI\"))\n+       (unspec:P\n+        [(match_dup 0)\n+\t (label_ref (match_operand 2 \"\" \"\"))]\n+\tUNSPEC_CASESI_DISPATCH)\n+       (label_ref (match_operand 3 \"\" \"\"))))\n+   (clobber (match_scratch:P 4 \"=d\"))\n+   (clobber (match_scratch:P 5 \"=d\"))\n+   (clobber (reg:SI MIPS16_T_REGNUM))]\n+  \"TARGET_MIPS16_SHORT_JUMP_TABLES\"\n+{\n+  rtx diff_vec = PATTERN (next_real_insn (operands[2]));\n+\n+  gcc_assert (GET_CODE (diff_vec) == ADDR_DIFF_VEC);\n+  \n+  output_asm_insn (\"sltu\\t%0, %1\", operands);\n+  output_asm_insn (\"bteqz\\t%3\", operands);\n+  \n+  switch (GET_MODE (diff_vec))\n+    {\n+    case HImode:\n+      output_asm_insn (\"sll\\t%5, %0, 1\", operands);\n+      output_asm_insn (\"la\\t%4, %2\", operands);\n+      output_asm_insn (\"<d>addu\\t%5, %4, %5\", operands);\n+      output_asm_insn (\"lh\\t%5, 0(%5)\", operands);\n+      break;\n+    \n+    case SImode:\n+      output_asm_insn (\"sll\\t%5, %0, 2\", operands);\n+      output_asm_insn (\"la\\t%4, %2\", operands);\n+      output_asm_insn (\"<d>addu\\t%5, %4, %5\", operands);\n+      output_asm_insn (\"lw\\t%5, 0(%5)\", operands);\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+  \n+  output_asm_insn (\"addu\\t%4, %4, %5\", operands);\n+  \n+  return \"j\\t%4\";\n+}\n+  [(set_attr \"length\" \"32\")])\n+\n ;; For TARGET_USE_GOT, we save the gp in the jmp_buf as well.\n ;; While it is possible to either pull it off the stack (in the\n ;; o32 case) or recalculate it given t9 and our target label,"}, {"sha": "fcdfa55ca0728ce6fd492d676e775b996e99065d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/545ca0f2785bd261c13392cb6191640282a73ee9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/545ca0f2785bd261c13392cb6191640282a73ee9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=545ca0f2785bd261c13392cb6191640282a73ee9", "patch": "@@ -1,3 +1,8 @@\n+2012-08-23  Julian Brown  <julian@codesourcery.com>\n+\t    Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* gcc.target/mips/code-readable-1.c: Add -O to options.\n+\n 2012-08-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/20420"}, {"sha": "c35d60c8b1e7b861de99c69427f56aa558b6820c", "filename": "gcc/testsuite/gcc.target/mips/code-readable-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/545ca0f2785bd261c13392cb6191640282a73ee9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcode-readable-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/545ca0f2785bd261c13392cb6191640282a73ee9/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcode-readable-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcode-readable-1.c?ref=545ca0f2785bd261c13392cb6191640282a73ee9", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"(-mips16) -mcode-readable=yes -mgp32 addressing=absolute\" } */\n+/* { dg-options \"(-mips16) -mcode-readable=yes -mgp32 addressing=absolute -O\" } */\n \n MIPS16 int\n foo (int i)"}]}