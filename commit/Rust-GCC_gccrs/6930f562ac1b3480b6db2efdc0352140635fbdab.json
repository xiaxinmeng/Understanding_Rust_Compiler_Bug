{"sha": "6930f562ac1b3480b6db2efdc0352140635fbdab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkzMGY1NjJhYzFiMzQ4MGI2ZGIyZWZkYzAzNTIxNDA2MzVmYmRhYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-14T23:56:00Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-14T23:56:00Z"}, "message": "Don't crash on invalid slice composite literal.\n\nFrom-SVN: r167827", "tree": {"sha": "e569d84dd0797b065e36692ff48b90efebb2a613", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e569d84dd0797b065e36692ff48b90efebb2a613"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6930f562ac1b3480b6db2efdc0352140635fbdab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6930f562ac1b3480b6db2efdc0352140635fbdab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6930f562ac1b3480b6db2efdc0352140635fbdab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6930f562ac1b3480b6db2efdc0352140635fbdab/comments", "author": null, "committer": null, "parents": [{"sha": "10a0275d927e16d006d9e93e03a63ec949a7afc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a0275d927e16d006d9e93e03a63ec949a7afc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10a0275d927e16d006d9e93e03a63ec949a7afc8"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "74709077fabcc7a30adc3630a666d815d9a85b3f", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6930f562ac1b3480b6db2efdc0352140635fbdab/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6930f562ac1b3480b6db2efdc0352140635fbdab/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=6930f562ac1b3480b6db2efdc0352140635fbdab", "patch": "@@ -10709,6 +10709,9 @@ Open_array_construction_expression::do_get_tree(Translate_context* context)\n {\n   Type* element_type = this->type()->array_type()->element_type();\n   tree element_type_tree = element_type->get_tree(context->gogo());\n+  if (element_type_tree == error_mark_node)\n+    return error_mark_node;\n+\n   tree values;\n   tree length_tree;\n   if (this->vals() == NULL || this->vals()->empty())\n@@ -10792,6 +10795,8 @@ Open_array_construction_expression::do_get_tree(Translate_context* context)\n   // Build a constructor for the open array.\n \n   tree type_tree = this->type()->get_tree(context->gogo());\n+  if (type_tree == error_mark_node)\n+    return error_mark_node;\n   gcc_assert(TREE_CODE(type_tree) == RECORD_TYPE);\n \n   VEC(constructor_elt,gc)* init = VEC_alloc(constructor_elt, gc, 3);\n@@ -10815,6 +10820,8 @@ Open_array_construction_expression::do_get_tree(Translate_context* context)\n   elt->value = fold_convert(TREE_TYPE(field), length_tree);\n \n   tree constructor = build_constructor(type_tree, init);\n+  if (constructor == error_mark_node)\n+    return error_mark_node;\n   if (!is_in_function && is_constant_initializer)\n     TREE_CONSTANT(constructor) = 1;\n "}]}