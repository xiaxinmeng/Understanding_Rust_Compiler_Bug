{"sha": "b41059b4e32bd038b95b87ed8e4c3991dcd219d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQxMDU5YjRlMzJiZDAzOGI5NWI4N2VkOGU0YzM5OTFkY2QyMTlkMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-30T12:17:18Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-30T12:17:18Z"}, "message": "(tstdi): Use tst/subx #0 instead of neg/negx.\n\nAllow \"a\" and \">\" for operand 0.\n\nFrom-SVN: r9841", "tree": {"sha": "38dd26f8b2d12f479d68cce5cd9ab3dc40ff2465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38dd26f8b2d12f479d68cce5cd9ab3dc40ff2465"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b41059b4e32bd038b95b87ed8e4c3991dcd219d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b41059b4e32bd038b95b87ed8e4c3991dcd219d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b41059b4e32bd038b95b87ed8e4c3991dcd219d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b41059b4e32bd038b95b87ed8e4c3991dcd219d0/comments", "author": null, "committer": null, "parents": [{"sha": "28ee27fd5532e418605d1f9c5870850052a56be8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28ee27fd5532e418605d1f9c5870850052a56be8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28ee27fd5532e418605d1f9c5870850052a56be8"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "032b25e9ad677a90ad590afa6a7e6dd0c805e42d", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41059b4e32bd038b95b87ed8e4c3991dcd219d0/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41059b4e32bd038b95b87ed8e4c3991dcd219d0/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=b41059b4e32bd038b95b87ed8e4c3991dcd219d0", "patch": "@@ -283,16 +283,29 @@\n \n (define_insn \"tstdi\"\n   [(set (cc0)\n-\t(match_operand:DI 0 \"nonimmediate_operand\" \"do\"))]\n+\t(match_operand:DI 0 \"nonimmediate_operand\" \"oa>,d\"))\n+   (clobber (match_scratch:SI 1 \"=d,d\"))\n+   (clobber (match_scratch:SI 2 \"=d,\"))]\n   \"\"\n   \"*\n {\n   if (GET_CODE (operands[0]) == REG)\n-    operands[1] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+    operands[3] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+  else if (GET_CODE (operands[0]) == MEM\n+\t   && GET_CODE (XEXP (operands[0], 0)) == POST_INC)\n+    operands[3] = operands[0];\n   else\n-    operands[1] = adj_offsettable_operand (operands[0], 4);\n-  /* Just in case we come here. I hope all tst:DI are combined !!! */\n-  return \\\"neg%.l %1\\;negx%.l %0\\;neg%.l %1\\;negx%.l %0\\\";\n+    operands[3] = adj_offsettable_operand (operands[0], 4);\n+  if (DATA_REG_P (operands[0]))\n+    operands[2] = operands[0];\n+  else\n+    output_asm_insn (\\\"move%.l %0,%2\\\", operands);\n+  /*\n+  ** 'sub' clears %1, and also clears the X cc bit\n+  ** 'tst' sets the Z cc bit according to the low part of the DImode operand\n+  ** 'subx %1' (i.e. subx #0) acts as a (non-existent) tstx on the high part\n+  */\n+  return \\\"sub%.l %1,%1\\;tst%.l %3\\;subx%.l %1,%2\\\";\n }\")\n \n (define_insn \"tstsi\""}]}