{"sha": "2ce0d0b097225538935a0ac9e1b713c024183547", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNlMGQwYjA5NzIyNTUzODkzNWEwYWM5ZTFiNzEzYzAyNDE4MzU0Nw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-03-31T06:30:01Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-03-31T06:30:01Z"}, "message": "AbstractCellEditor.java, [...]: Merges from classpath.\n\n2003-03-31  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/swing/AbstractCellEditor.java,\n\tjavax/swing/AbstractListModel.java,\n\tjavax/swing/ActionMap.java,\n\tjavax/swing/BorderFactory.java,\n\tjavax/swing/ButtonGroup.java,\n\tjavax/swing/DefaultBoundedRangeModel.java,\n\tjavax/swing/DefaultButtonModel.java,\n\tjavax/swing/DefaultCellEditor.java,\n\tjavax/swing/DefaultComboBoxModel.java,\n\tjavax/swing/DefaultDesktopManager.java,\n\tjavax/swing/DefaultListCellRenderer.java,\n\tjavax/swing/DefaultSingleSelectionModel.java,\n\tjavax/swing/InputMap.java,\n\tjavax/swing/JComponent.java,\n\tjavax/swing/JMenu.java,\n\tjavax/swing/JSlider.java,\n\tjavax/swing/KeyStroke.java,\n\tjavax/swing/OverlayLayout.java,\n\tjavax/swing/ScrollPaneLayout.java,\n\tjavax/swing/SizeRequirements.java,\n\tjavax/swing/UIManager.java,\n\tjavax/swing/ViewportLayout.java,\n\tjavax/swing/border/AbstractBorder.java,\n\tjavax/swing/colorchooser/DefaultColorSelectionModel.java,\n\tjavax/swing/event/EventListenerList.java,\n\tjavax/swing/table/AbstractTableModel.java,\n\tjavax/swing/table/DefaultTableCellRenderer.java,\n\tjavax/swing/table/DefaultTableColumnModel.java,\n\tjavax/swing/table/DefaultTableModel.java,\n\tjavax/swing/table/TableColumn.java,\n\tjavax/swing/text/StyledEditorKit.java,\n\tjavax/swing/tree/DefaultMutableTreeNode.java,\n\tjavax/swing/tree/DefaultTreeModel.java,\n\tjavax/swing/tree/DefaultTreeSelectionModel.java,\n\tjavax/swing/tree/TreePath.java,\n\tjavax/swing/undo/AbstractUndoableEdit.java,\n\tjavax/swing/undo/StateEdit.java,\n\tjavax/swing/undo/StateEditable.java,\n\tjavax/swing/undo/UndoableEditSupport.java:\n\tMerges from classpath.\n\nFrom-SVN: r65077", "tree": {"sha": "14b48288634510a2d92d2fedc668b585e82853f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14b48288634510a2d92d2fedc668b585e82853f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ce0d0b097225538935a0ac9e1b713c024183547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ce0d0b097225538935a0ac9e1b713c024183547", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ce0d0b097225538935a0ac9e1b713c024183547", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ce0d0b097225538935a0ac9e1b713c024183547/comments", "author": null, "committer": null, "parents": [{"sha": "98d3d336205c751fcf2f6a31a5b5553994556060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98d3d336205c751fcf2f6a31a5b5553994556060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98d3d336205c751fcf2f6a31a5b5553994556060"}], "stats": {"total": 1153, "additions": 713, "deletions": 440}, "files": [{"sha": "142e27c84b67f107d90ffdc7b71c91d032d2e448", "filename": "libjava/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -1,3 +1,46 @@\n+2003-03-31  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/swing/AbstractCellEditor.java,\n+\tjavax/swing/AbstractListModel.java,\n+\tjavax/swing/ActionMap.java,\n+\tjavax/swing/BorderFactory.java,\n+\tjavax/swing/ButtonGroup.java,\n+\tjavax/swing/DefaultBoundedRangeModel.java,\n+\tjavax/swing/DefaultButtonModel.java,\n+\tjavax/swing/DefaultCellEditor.java,\n+\tjavax/swing/DefaultComboBoxModel.java,\n+\tjavax/swing/DefaultDesktopManager.java,\n+\tjavax/swing/DefaultListCellRenderer.java,\n+\tjavax/swing/DefaultSingleSelectionModel.java,\n+\tjavax/swing/InputMap.java,\n+\tjavax/swing/JComponent.java,\n+\tjavax/swing/JMenu.java,\n+\tjavax/swing/JSlider.java,\n+\tjavax/swing/KeyStroke.java,\n+\tjavax/swing/OverlayLayout.java,\n+\tjavax/swing/ScrollPaneLayout.java,\n+\tjavax/swing/SizeRequirements.java,\n+\tjavax/swing/UIManager.java,\n+\tjavax/swing/ViewportLayout.java,\n+\tjavax/swing/border/AbstractBorder.java,\n+\tjavax/swing/colorchooser/DefaultColorSelectionModel.java,\n+\tjavax/swing/event/EventListenerList.java,\n+\tjavax/swing/table/AbstractTableModel.java,\n+\tjavax/swing/table/DefaultTableCellRenderer.java,\n+\tjavax/swing/table/DefaultTableColumnModel.java,\n+\tjavax/swing/table/DefaultTableModel.java,\n+\tjavax/swing/table/TableColumn.java,\n+\tjavax/swing/text/StyledEditorKit.java,\n+\tjavax/swing/tree/DefaultMutableTreeNode.java,\n+\tjavax/swing/tree/DefaultTreeModel.java,\n+\tjavax/swing/tree/DefaultTreeSelectionModel.java,\n+\tjavax/swing/tree/TreePath.java,\n+\tjavax/swing/undo/AbstractUndoableEdit.java,\n+\tjavax/swing/undo/StateEdit.java,\n+\tjavax/swing/undo/StateEditable.java,\n+\tjavax/swing/undo/UndoableEditSupport.java:\n+\tMerges from classpath.\n+\n 2003-03-30  Tom Tromey  <tromey@redhat.com>\n \n \t* java/lang/String.java (data, boffset, count): Documented."}, {"sha": "e25e97b18b37df11a8c12a2b20f8a6a37ae2b4cb", "filename": "libjava/javax/swing/AbstractCellEditor.java", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FAbstractCellEditor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FAbstractCellEditor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FAbstractCellEditor.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -47,7 +47,10 @@\n  * @author\tAndrew Selkirk\n  * @version\t1.0\n  */\n-public abstract class AbstractCellEditor implements CellEditor, Serializable {\n+public abstract class AbstractCellEditor\n+  implements CellEditor, Serializable\n+{\n+  static final long serialVersionUID = -1048006551406220959L;\n \n \t//-------------------------------------------------------------\n \t// Variables --------------------------------------------------"}, {"sha": "4f7e8271c32bee9faa1f394fa51a236f8c49d16a", "filename": "libjava/javax/swing/AbstractListModel.java", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FAbstractListModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FAbstractListModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FAbstractListModel.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -48,7 +48,10 @@\n  * @author\tAndrew Selkirk\n  * @version\t1.0\n  */\n-public abstract class AbstractListModel implements ListModel, Serializable {\n+public abstract class AbstractListModel\n+  implements ListModel, Serializable\n+{\n+  static final long serialVersionUID = -3285184064379168730L;\n \n \t//-------------------------------------------------------------\n \t// Variables --------------------------------------------------"}, {"sha": "ea9e0aa362dd041a93ef02c384b9b9fc2ac3e06b", "filename": "libjava/javax/swing/ActionMap.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FActionMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FActionMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FActionMap.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -46,7 +46,9 @@\n  * @author\tAndrew Selkirk\n  * @version\t1.0\n  */\n-public class ActionMap implements Serializable {\n+public class ActionMap implements Serializable\n+{\n+  static final long serialVersionUID = -6277518704513986346L;\n \n \t//-------------------------------------------------------------\n \t// Variables --------------------------------------------------"}, {"sha": "808144fdd7ad504c7c01fb5b9817661101fbcb72", "filename": "libjava/javax/swing/BorderFactory.java", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FBorderFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FBorderFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FBorderFactory.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -1,3 +1,41 @@\n+/* BorderFactory.java\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n package javax.swing;\n \n import java.awt.*;"}, {"sha": "502d0840933f77c890a93b73a0e404f0ff68e0ee", "filename": "libjava/javax/swing/ButtonGroup.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FButtonGroup.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FButtonGroup.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FButtonGroup.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -44,6 +44,8 @@\n \n public class ButtonGroup implements Serializable \n {\n+  static final long serialVersionUID = 4259076101881721375L;\n+\n     Vector v = new Vector();\n     ButtonModel sel;\n     "}, {"sha": "c6ea1d03177054e08366276cf354ac164a36f59d", "filename": "libjava/javax/swing/DefaultBoundedRangeModel.java", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FDefaultBoundedRangeModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FDefaultBoundedRangeModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FDefaultBoundedRangeModel.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -47,7 +47,10 @@\n  * @author\tAndrew Selkirk\n  * @version\t1.0\n  */\n-public class DefaultBoundedRangeModel implements BoundedRangeModel, Serializable {\n+public class DefaultBoundedRangeModel\n+  implements BoundedRangeModel, Serializable\n+{\n+  static final long serialVersionUID = 5034068491295259790L;\n \n \t//-------------------------------------------------------------\n \t// Variables --------------------------------------------------"}, {"sha": "9d6f4089da7204f0e14f7d42c2f1b13426d4e0d5", "filename": "libjava/javax/swing/DefaultButtonModel.java", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FDefaultButtonModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FDefaultButtonModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FDefaultButtonModel.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -42,9 +42,11 @@\n import java.awt.*;\n import javax.swing.event.*;\n \n-public \n-class DefaultButtonModel implements ButtonModel, java.io.Serializable\n+public class DefaultButtonModel\n+  implements ButtonModel, java.io.Serializable\n {\n+  static final long serialVersionUID = -5342609566534980231L;\n+\n     Vector actions          = new Vector();\n \n     Vector items    = new Vector();"}, {"sha": "5e35701ff5e0bc66019ea8aa15aa51ff1aac593a", "filename": "libjava/javax/swing/DefaultCellEditor.java", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FDefaultCellEditor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FDefaultCellEditor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FDefaultCellEditor.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -50,7 +50,11 @@\n  * @author\tAndrew Selkirk\n  * @version\t1.0\n  */\n-public class DefaultCellEditor extends AbstractCellEditor implements TableCellEditor, TreeCellEditor {\n+public class DefaultCellEditor\n+  extends AbstractCellEditor\n+  implements TableCellEditor, TreeCellEditor\n+{\n+  static final long serialVersionUID = 3564035141373880027L;\n \n \t//-------------------------------------------------------------\n \t// Classes ----------------------------------------------------"}, {"sha": "5c8361a2deeb46527fc580b0f0c5aed79085ae52", "filename": "libjava/javax/swing/DefaultComboBoxModel.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FDefaultComboBoxModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FDefaultComboBoxModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FDefaultComboBoxModel.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -47,7 +47,9 @@\n  * @version\t1.0\n  */\n public class DefaultComboBoxModel extends AbstractListModel \n-\t\timplements MutableComboBoxModel, Serializable {\n+\t\timplements MutableComboBoxModel, Serializable\n+{\n+  static final long serialVersionUID = 6698657703676921904L;\n \n \t//-------------------------------------------------------------\n \t// Variables --------------------------------------------------"}, {"sha": "132fb61920c719e155bd4e933defc6f9ae0ef172", "filename": "libjava/javax/swing/DefaultDesktopManager.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FDefaultDesktopManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FDefaultDesktopManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FDefaultDesktopManager.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -46,7 +46,9 @@\n  * @author\tAndrew Selkirk\n  * @version\t1.0\n  */\n-public class DefaultDesktopManager implements DesktopManager, Serializable {\n+public class DefaultDesktopManager implements DesktopManager, Serializable\n+{\n+  static final long serialVersionUID = 4657624909838017887L;\n \n \t//-------------------------------------------------------------\n \t// Variables --------------------------------------------------"}, {"sha": "204c4ec23bf893fd19ac6e164e414be9335805b0", "filename": "libjava/javax/swing/DefaultListCellRenderer.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FDefaultListCellRenderer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FDefaultListCellRenderer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FDefaultListCellRenderer.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -49,7 +49,9 @@\n  * @version\t1.0\n  */\n public class DefaultListCellRenderer extends JLabel \n-\t\timplements ListCellRenderer, Serializable {\n+\t\timplements ListCellRenderer, Serializable\n+{\n+  static final long serialVersionUID = 7708947179685189462L;\n \n \t//-------------------------------------------------------------\n \t// Classes ----------------------------------------------------"}, {"sha": "0f6e280c951ca630dfa62869cca8d471742a6c15", "filename": "libjava/javax/swing/DefaultSingleSelectionModel.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FDefaultSingleSelectionModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FDefaultSingleSelectionModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FDefaultSingleSelectionModel.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -48,7 +48,9 @@\n  * @version\t1.0\n  */\n public class DefaultSingleSelectionModel implements \n-\t\tSingleSelectionModel, Serializable {\n+\t\tSingleSelectionModel, Serializable\n+{\n+  static final long serialVersionUID = 3676229404753786004L;\n \n \t//-------------------------------------------------------------\n \t// Variables --------------------------------------------------"}, {"sha": "861fe57ea849af9b1adfb03d4b3538479c06102c", "filename": "libjava/javax/swing/InputMap.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FInputMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FInputMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FInputMap.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -46,7 +46,9 @@\n  * @author\tAndrew Selkirk\n  * @version\t1.0\n  */\n-public class InputMap implements Serializable {\n+public class InputMap implements Serializable\n+{\n+  static final long serialVersionUID = -5429059542008604257L;\n \n \t//-------------------------------------------------------------\n \t// Variables --------------------------------------------------"}, {"sha": "119e385919382c0e6873260ac829dd5ddf633c2f", "filename": "libjava/javax/swing/JComponent.java", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FJComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FJComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJComponent.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -61,6 +61,7 @@\n  */\n public abstract class JComponent extends Container implements Serializable\n {\n+  static final long serialVersionUID = -5242478962609715464L;\n         /**\n          * accessibleContext\n          */"}, {"sha": "961d8025e708640ecd4c73f36700ee4e17fd5193", "filename": "libjava/javax/swing/JMenu.java", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FJMenu.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FJMenu.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJMenu.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -51,7 +51,11 @@\n  * @author\tAndrew Selkirk\n  * @version\t1.0\n  */\n-public class JMenu extends JMenuItem implements Accessible, MenuElement {\n+public class JMenu\n+  extends JMenuItem\n+  implements Accessible, MenuElement\n+{\n+  static final long serialVersionUID = 4227225638931828014L;\n \n \t//-------------------------------------------------------------\n \t// Classes ----------------------------------------------------"}, {"sha": "58475b67f16bfe9fc0201dbff668a537b00744b7", "filename": "libjava/javax/swing/JSlider.java", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FJSlider.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FJSlider.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJSlider.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -49,7 +49,11 @@\n  * @author\tAndrew Selkirk\n  * @version\t1.0\n  */\n-public class JSlider extends JComponent implements SwingConstants, Accessible {\n+public class JSlider\n+  extends JComponent\n+  implements SwingConstants, Accessible\n+{\n+  static final long serialVersionUID = -1441275936141218479L;\n \n \t//-------------------------------------------------------------\n \t// Classes ----------------------------------------------------"}, {"sha": "7fe06995a9f98ba15e1b0aca49ba716254dbeffb", "filename": "libjava/javax/swing/KeyStroke.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FKeyStroke.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FKeyStroke.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FKeyStroke.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -46,7 +46,9 @@\n  * @author\tAndrew Selkirk\n  * @version\t1.0\n  */\n-public class KeyStroke implements Serializable {\n+public class KeyStroke implements Serializable\n+{\n+  static final long serialVersionUID = -9060180771037902530L;\n \n \t//-------------------------------------------------------------\n \t// Variables --------------------------------------------------"}, {"sha": "4698e10bf45589990cb53a9b34bb763c52c4cc35", "filename": "libjava/javax/swing/OverlayLayout.java", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FOverlayLayout.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FOverlayLayout.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FOverlayLayout.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -46,7 +46,10 @@\n  * @author\tAndrew Selkirk\n  * @version\t1.0\n  */\n-public class OverlayLayout implements LayoutManager2, Serializable {\n+public class OverlayLayout\n+  implements LayoutManager2, Serializable\n+{\n+  static final long serialVersionUID = 18082829169631543L;\n \n \t//-------------------------------------------------------------\n \t// Variables --------------------------------------------------"}, {"sha": "bd65471d05f3225ce9ccdb8a445015872ea47e88", "filename": "libjava/javax/swing/ScrollPaneLayout.java", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FScrollPaneLayout.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FScrollPaneLayout.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FScrollPaneLayout.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -47,7 +47,10 @@\n  * @author\tAndrew Selkirk\n  * @version\t1.0\n  */\n-public class ScrollPaneLayout implements LayoutManager, ScrollPaneConstants, Serializable {\n+public class ScrollPaneLayout\n+  implements LayoutManager, ScrollPaneConstants, Serializable\n+{\n+  static final long serialVersionUID = -4480022884523193743L;\n \n \t//-------------------------------------------------------------\n \t// Classes ----------------------------------------------------"}, {"sha": "da6d1129d0f9fa5d90c01d4c16dd3ec9eb95478e", "filename": "libjava/javax/swing/SizeRequirements.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FSizeRequirements.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FSizeRequirements.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FSizeRequirements.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -45,7 +45,9 @@\n  * @author\tAndrew Selkirk\n  * @version\t1.0\n  */\n-public class SizeRequirements implements Serializable {\n+public class SizeRequirements implements Serializable\n+{\n+  static final long serialVersionUID = 9217749429906736553L;\n \n \t//-------------------------------------------------------------\n \t// Variables --------------------------------------------------"}, {"sha": "8feaccf30e3f8731de5920665504baba51b1b5cb", "filename": "libjava/javax/swing/UIManager.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FUIManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FUIManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FUIManager.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -51,6 +51,8 @@\n \n public class UIManager implements Serializable\n {\n+  static final long serialVersionUID = -5547433830339189365L;\n+\n     static class LookAndFeelInfo\n     {\n \tString name, clazz;"}, {"sha": "f735fe6207dd51c57435a416af2e4290116f46b0", "filename": "libjava/javax/swing/ViewportLayout.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FViewportLayout.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2FViewportLayout.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FViewportLayout.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -46,7 +46,9 @@\n  * @author\tAndrew Selkirk\n  * @version\t1.0\n  */\n-public class ViewportLayout implements LayoutManager, Serializable {\n+public class ViewportLayout implements LayoutManager, Serializable\n+{\n+  static final long serialVersionUID = -788225906076097229L;\n \n \t//-------------------------------------------------------------\n \t// Initialization ---------------------------------------------"}, {"sha": "d0285b33a5cc57b39ba2ab3dc4e02339b7b32794", "filename": "libjava/javax/swing/border/AbstractBorder.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Fborder%2FAbstractBorder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Fborder%2FAbstractBorder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fborder%2FAbstractBorder.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -42,6 +42,8 @@\n \n public abstract class AbstractBorder implements Border, Serializable\n {\n+  static final long serialVersionUID = -545885975315191844L;\n+\n     AbstractBorder()\n     {\n     }"}, {"sha": "1df4e325e942ad0f2a679a6125f6e4c26803d771", "filename": "libjava/javax/swing/colorchooser/DefaultColorSelectionModel.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Fcolorchooser%2FDefaultColorSelectionModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Fcolorchooser%2FDefaultColorSelectionModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fcolorchooser%2FDefaultColorSelectionModel.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -48,7 +48,9 @@\n  * @version\t1.0\n  */\n public class DefaultColorSelectionModel \n-\t\timplements ColorSelectionModel, Serializable {\n+  implements ColorSelectionModel, Serializable\n+{\n+  static final long serialVersionUID = 580150227676302096L;\n \n \t//-------------------------------------------------------------\n \t// Variables --------------------------------------------------"}, {"sha": "1197ccb353a0cccb96bd2a9c5347391247cc4b39", "filename": "libjava/javax/swing/event/EventListenerList.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Fevent%2FEventListenerList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Fevent%2FEventListenerList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fevent%2FEventListenerList.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -45,8 +45,9 @@\n  * EventListenerList\n  * @author Andrew Selkirk\n  */\n-public class EventListenerList\textends\t\tObject\n-\t\t\t\t\t\t\t\timplements\tSerializable {\n+public class EventListenerList extends Object implements Serializable\n+{\n+  static final long serialVersionUID = -5677132037850737084L;\n \n \t//-------------------------------------------------------------\n \t// Variables --------------------------------------------------"}, {"sha": "08eeb829a743947ce3b308b65cc80b34f5f97806", "filename": "libjava/javax/swing/table/AbstractTableModel.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Ftable%2FAbstractTableModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Ftable%2FAbstractTableModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftable%2FAbstractTableModel.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -46,7 +46,9 @@\n  * AbstractTableModel\n  * @author Andrew Selkirk\n  */\n-public abstract class AbstractTableModel implements TableModel, Serializable {\n+public abstract class AbstractTableModel implements TableModel, Serializable\n+{\n+  static final long serialVersionUID = -5798593159423650347L;\n \n \t//-------------------------------------------------------------\n \t// Variables --------------------------------------------------"}, {"sha": "a7bcc5c36b7cb17aa28b8f4332ec107f1adb505a", "filename": "libjava/javax/swing/table/DefaultTableCellRenderer.java", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Ftable%2FDefaultTableCellRenderer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Ftable%2FDefaultTableCellRenderer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftable%2FDefaultTableCellRenderer.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -1,3 +1,41 @@\n+/* DefaultTableCellRenderer.java\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n package javax.swing.table;\n import java.awt.Component;\n import java.io.Serializable;\n@@ -9,6 +47,8 @@\n public class DefaultTableCellRenderer extends JLabel\n   implements TableCellRenderer, Serializable\n {\n+  static final long serialVersionUID = 7878911414715528324L;\n+\n   public static class UIResource extends DefaultTableCellRenderer\n     implements javax.swing.plaf.UIResource\n   {"}, {"sha": "9ab2fff81166bebb76ce15b1ceca6692b76615b9", "filename": "libjava/javax/swing/table/DefaultTableColumnModel.java", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Ftable%2FDefaultTableColumnModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Ftable%2FDefaultTableColumnModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftable%2FDefaultTableColumnModel.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -49,7 +49,11 @@\n  * @author\tAndrew Selkirk\n  * @version\t1.0\n  */\n-public class DefaultTableColumnModel implements TableColumnModel, PropertyChangeListener, ListSelectionListener, Serializable {\n+public class DefaultTableColumnModel\n+  implements TableColumnModel, PropertyChangeListener,\n+             ListSelectionListener, Serializable\n+{\n+  static final long serialVersionUID = 6580012493508960512L;\n \n \t//-------------------------------------------------------------\n \t// Variables --------------------------------------------------"}, {"sha": "1587310856efab2e6f7b7acf0a51eba76ff89cba", "filename": "libjava/javax/swing/table/DefaultTableModel.java", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Ftable%2FDefaultTableModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Ftable%2FDefaultTableModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftable%2FDefaultTableModel.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -46,7 +46,10 @@\n  * DefaultTableModel\n  * @author\tAndrew Selkirk\n  */\n-public class DefaultTableModel extends AbstractTableModel implements Serializable {\n+public class DefaultTableModel extends AbstractTableModel\n+  implements Serializable\n+{\n+  static final long serialVersionUID = 6680042567037222321L;\n \n \t//-------------------------------------------------------------\n \t// Variables --------------------------------------------------"}, {"sha": "f5ace625675847853a5ee07aff2d1a7a6912f232", "filename": "libjava/javax/swing/table/TableColumn.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Ftable%2FTableColumn.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Ftable%2FTableColumn.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftable%2FTableColumn.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -47,7 +47,9 @@\n  * @author\tAndrew Selkirk\n  * @version\t1.0\n  */\n-public class TableColumn implements Serializable {\n+public class TableColumn implements Serializable\n+{\n+  static final long serialVersionUID = -6113660025878112608L;\n \n \t//-------------------------------------------------------------\n \t// Variables --------------------------------------------------"}, {"sha": "16af630456ac179018a358ec0bc52905d9080e71", "filename": "libjava/javax/swing/text/StyledEditorKit.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Ftext%2FStyledEditorKit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Ftext%2FStyledEditorKit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2FStyledEditorKit.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -50,7 +50,9 @@\n  * @author\tAndrew Selkirk\n  * @version\t1.0\n  */\n-public class StyledEditorKit extends DefaultEditorKit {\n+public class StyledEditorKit extends DefaultEditorKit\n+{\n+  static final long serialVersionUID = 7002391892985555948L;\n \n \t//-------------------------------------------------------------\n \t// Classes ----------------------------------------------------"}, {"sha": "0c2b5459f9921f92f26bea35fa2ca3ce8f0e4e00", "filename": "libjava/javax/swing/tree/DefaultMutableTreeNode.java", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Ftree%2FDefaultMutableTreeNode.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Ftree%2FDefaultMutableTreeNode.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftree%2FDefaultMutableTreeNode.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -45,7 +45,10 @@\n  * DefaultMutableTreeNode\n  * @author Andrew Selkirk\n  */\n-public class DefaultMutableTreeNode implements Cloneable, MutableTreeNode, Serializable {\n+public class DefaultMutableTreeNode\n+  implements Cloneable, MutableTreeNode, Serializable\n+{\n+  static final long serialVersionUID = -4298474751201349152L;\n \n \t//-------------------------------------------------------------\n \t// Variables --------------------------------------------------"}, {"sha": "d905be96cb87a62ab4df0272d697c8aecc3141f7", "filename": "libjava/javax/swing/tree/DefaultTreeModel.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Ftree%2FDefaultTreeModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Ftree%2FDefaultTreeModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftree%2FDefaultTreeModel.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -46,7 +46,9 @@\n  * DefaultTreeModel\n  * @author Andrew Selkirk\n  */\n-public class DefaultTreeModel implements Serializable, TreeModel {\n+public class DefaultTreeModel implements Serializable, TreeModel\n+{\n+  static final long serialVersionUID = -2621068368932566998L;\n \n \t//-------------------------------------------------------------\n \t// Variables --------------------------------------------------"}, {"sha": "9b5358241bddb5676f9e85b76b97c9721d14c070", "filename": "libjava/javax/swing/tree/DefaultTreeSelectionModel.java", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Ftree%2FDefaultTreeSelectionModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Ftree%2FDefaultTreeSelectionModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftree%2FDefaultTreeSelectionModel.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -48,7 +48,10 @@\n  * DefaultTreeSelectionModel\n  * @author Andrew Selkirk\n  */\n-public class DefaultTreeSelectionModel implements Cloneable, Serializable, TreeSelectionModel {\n+public class DefaultTreeSelectionModel\n+  implements Cloneable, Serializable, TreeSelectionModel\n+{\n+  static final long serialVersionUID = 3288129636638950196L;\n \n \t//-------------------------------------------------------------\n \t// Variables --------------------------------------------------"}, {"sha": "77627db77b11442a503d2fce2f0e15edd7698531", "filename": "libjava/javax/swing/tree/TreePath.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Ftree%2FTreePath.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Ftree%2FTreePath.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftree%2FTreePath.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -44,7 +44,9 @@\n  * TreePath\n  * @author Andrew Selkirk\n  */\n-public class TreePath implements Serializable {\n+public class TreePath implements Serializable\n+{\n+  static final long serialVersionUID = 4380036194768077479L;\n \n \t//-------------------------------------------------------------\n \t// Variables --------------------------------------------------"}, {"sha": "68c28130e0f59602138c94ea60b7911452a120d4", "filename": "libjava/javax/swing/undo/AbstractUndoableEdit.java", "status": "modified", "additions": 172, "deletions": 168, "changes": 340, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Fundo%2FAbstractUndoableEdit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Fundo%2FAbstractUndoableEdit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fundo%2FAbstractUndoableEdit.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -1,5 +1,5 @@\n /* AbstractTableModel.java --\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -44,171 +44,175 @@\n  * AbstractUndoableEdit\n  * @author Andrew Selkirk\n  */\n-public class AbstractUndoableEdit\textends\t\tObject\n-\t\t\t\t\t\t\t\t\timplements\tUndoableEdit,\n-\t\t\t\t\t\t\t\t\t\t\t\tSerializable {\n-\n-\t//-------------------------------------------------------------\n-\t// Constants --------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * String returned by getRedoPresentationName()\n-\t */\n-\tprotected static\tString\tRedoName\t= \"Redo\";\n-\n-\t/**\n-\t * String returned by getUndoPresentationName()\n-\t */\n-\tprotected static\tString\tUndoName\t= \"Undo\";\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Variables --------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * TODO\n-\t */\n-\tprivate \t\t\tboolean\thasBeenDone\t= false;\n-\n-\t/**\n-\t * The edit is alive\n-\t */\n-\tprivate\t\t\t\tboolean\talive \t\t= true;\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Create new AbstractUndoableEdit\n-\t */\n-\tpublic AbstractUndoableEdit() {\n-\t} // AbstractUndoableEdit()\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Interface: UndoableEdit ------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * addEdit\n-\t * @param anEdit TODO\n-\t * @returns TODO\n-\t */\n-\tpublic boolean addEdit(UndoableEdit anEdit) {\n-\t\treturn false;\n-\t} // addEdit()\n-\n-\t/**\n-\t * canRedo()\n-\t * @returns true if redoable, false otherwise\n-\t */\n-\tpublic boolean canRedo() {\n-\t\tif (alive == true && hasBeenDone == false) {\n-\t\t\treturn true;\n-\t\t} // if\n-\t\treturn false;\n-\t} // canRedo()\n-\n-\t/**\n-\t * canUndo()\n-\t * @returns true if undoable, false otherwise\n-\t */\n-\tpublic boolean canUndo() {\n-\t\tif (alive == true && hasBeenDone == true) {\n-\t\t\treturn true;\n-\t\t} // if\n-\t\treturn false;\n-\t} // canUndo()\n-\n-\t/**\n-\t * die\n-\t */\n-\tpublic void die() {\n-\t\talive = false;\n-\t} // die()\n-\n-\t/**\n-\t * getPresentation\n-\t * @returns TODO\n-\t */\n-\tpublic String getPresentationName() {\n-\t\treturn \"\";\n-\t} // getPresentationName()\n-\n-\t/**\n-\t * getRedoPresentationName\n-\t * @returns TODO\n-\t */\n-\tpublic String getRedoPresentationName()\t{\n-\t\tif (getPresentationName().equals(\"\") == true) {\n-\t\t\treturn RedoName;\n-\t\t} else {\n-\t\t\treturn RedoName + \" \" + getPresentationName();\n-\t\t}\n-\t} // getRedoPresentationName()\n-\n-\t/**\n-\t * getUndoPresentationName\n-\t * @returns TODO\n-\t */\n-\tpublic String getUndoPresentationName()\t{\n-\t\tif (getPresentationName().equals(\"\") == true) {\n-\t\t\treturn UndoName;\n-\t\t} else {\n-\t\t\treturn UndoName + \" \" + getPresentationName();\n-\t\t}\n-\t} // getUndoPresentationName()\n-\n-\t/**\n-\t * isSignificant\n-\t * @returns true\n-\t */\n-\tpublic boolean isSignificant() {\n-\t\treturn true;\n-\t} // isSignificant()\n-\n-\t/**\n-\t * redo\n-\t * @throws CannotRedoException TODO\n-\t */\n-\tpublic void redo() throws CannotRedoException {\n-\t\tif (canRedo() == false) {\n-\t\t\tthrow new CannotRedoException();\n-\t\t}\n-\t\thasBeenDone = true;\n-\t} // redo()\n-\n-\t/**\n-\t * replaceEdit\n-\t * @param anEdit TODO\n-\t * @returns TODO\n-\t */\n-\tpublic boolean replaceEdit(UndoableEdit anEdit) {\n-\t\treturn false;\n-\t} // replaceEdit()\n-\n-\t/**\n-\t * String representation\n-\t * @returns String representation\n-\t */\n-\tpublic String toString() {\n-\t\treturn null; // TODO\n-\t} // toString()\n-\n-\t/**\n-\t * undo\n-\t * @throws CannotUndoException TODO\n-\t */\n-\tpublic void undo() throws CannotUndoException {\n-\t\tif (canUndo() == false) {\n-\t\t\tthrow new CannotUndoException();\n-\t\t}\n-\t\thasBeenDone = false;\n-\t} // undo()\n-\n-\n+public class AbstractUndoableEdit implements UndoableEdit, Serializable\n+{\n+  static final long serialVersionUID = 580150227676302096L;\n+\n+  //-------------------------------------------------------------\n+  // Constants --------------------------------------------------\n+  //-------------------------------------------------------------\n+\n+  /**\n+   * String returned by getRedoPresentationName()\n+   */\n+  protected static final String RedoName = \"Redo\";\n+\n+  /**\n+   * String returned by getUndoPresentationName()\n+   */\n+  protected static final String UndoName = \"Undo\";\n+\n+\n+  //-------------------------------------------------------------\n+  // Variables --------------------------------------------------\n+  //-------------------------------------------------------------\n+\n+  /**\n+   * TODO\n+   */\n+  private boolean hasBeenDone = false;\n+\n+  /**\n+   * The edit is alive\n+   */\n+  private boolean alive = true;\n+\n+\n+  //-------------------------------------------------------------\n+  // Initialization ---------------------------------------------\n+  //-------------------------------------------------------------\n+\n+  /**\n+   * Create new AbstractUndoableEdit\n+   */\n+  public AbstractUndoableEdit()\n+  {\n+  } // AbstractUndoableEdit()\n+\n+\n+  //-------------------------------------------------------------\n+  // Interface: UndoableEdit ------------------------------------\n+  //-------------------------------------------------------------\n+\n+  /**\n+   * addEdit\n+   * @param anEdit TODO\n+   * @returns TODO\n+   */\n+  public boolean addEdit(UndoableEdit anEdit)\n+  {\n+    return false;\n+  } // addEdit()\n+\n+  /**\n+   * canRedo()\n+   * @returns true if redoable, false otherwise\n+   */\n+  public boolean canRedo()\n+  {\n+    if (alive == true && hasBeenDone == false)\n+      return true;\n+    return false;\n+  } // canRedo()\n+\n+  /**\n+   * canUndo()\n+   * @returns true if undoable, false otherwise\n+   */\n+  public boolean canUndo()\n+  {\n+    if (alive == true && hasBeenDone == true)\n+      return true;\n+    return false;\n+  } // canUndo()\n+\n+  /**\n+   * die\n+   */\n+  public void die()\n+  {\n+    alive = false;\n+  } // die()\n+\n+  /**\n+   * getPresentation\n+   * @returns TODO\n+   */\n+  public String getPresentationName()\n+  {\n+    return \"\";\n+  } // getPresentationName()\n+\n+  /**\n+   * getRedoPresentationName\n+   * @returns TODO\n+   */\n+  public String getRedoPresentationName()\n+  {\n+    if (getPresentationName().equals(\"\"))\n+      return RedoName;\n+    return RedoName + \" \" + getPresentationName();\n+  } // getRedoPresentationName()\n+\n+  /**\n+   * getUndoPresentationName\n+   * @returns TODO\n+   */\n+  public String getUndoPresentationName()\n+  {\n+    if (getPresentationName().equals(\"\"))\n+      return UndoName;\n+    return UndoName + \" \" + getPresentationName();\n+  } // getUndoPresentationName()\n+\n+  /**\n+   * isSignificant\n+   * @returns true\n+   */\n+  public boolean isSignificant()\n+  {\n+    return true;\n+  } // isSignificant()\n+\n+  /**\n+   * redo\n+   * @throws CannotRedoException TODO\n+   */\n+  public void redo() throws CannotRedoException\n+  {\n+    if (! canRedo())\n+      throw new CannotRedoException();\n+    hasBeenDone = true;\n+  } // redo()\n+\n+  /**\n+   * replaceEdit\n+   * @param anEdit TODO\n+   * @returns TODO\n+   */\n+  public boolean replaceEdit(UndoableEdit anEdit)\n+  {\n+    return false;\n+  } // replaceEdit()\n+\n+  /**\n+   * String representation\n+   * @returns String representation\n+   */\n+  public String toString()\n+  {\n+    return (super.toString() + \" hasBeenDone: \" + hasBeenDone\n+\t    + \" alive: \" + alive);\n+  }\n+\n+  /**\n+   * undo\n+   * @throws CannotUndoException TODO\n+   */\n+  public void undo() throws CannotUndoException\n+  {\n+    if (! canUndo())\n+      throw new CannotUndoException();\n+    hasBeenDone = false;\n+  } // undo()\n } // AbstractUndoableEdit"}, {"sha": "f617bc3a455482184116a5986c6aafbdddc0e62a", "filename": "libjava/javax/swing/undo/StateEdit.java", "status": "modified", "additions": 132, "deletions": 107, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Fundo%2FStateEdit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Fundo%2FStateEdit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fundo%2FStateEdit.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -1,5 +1,5 @@\n-/* AbstractTableModel.java --\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+/* StateEdit.java --\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -44,108 +44,133 @@\n  * StateEdit\n  * @author\tAndrew Selkirk\n  */\n-public class StateEdit extends AbstractUndoableEdit {\n-\n-\t//-------------------------------------------------------------\n-\t// Variables --------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * RCSID\n-\t */\n-\tprotected static final String RCSID = \"\"; // TODO\n-\n-\t/**\n-\t * object\n-\t */\n-\tprotected StateEditable object;\n-\n-\t/**\n-\t * preState\n-\t */\n-\tprotected Hashtable preState;\n-\n-\t/**\n-\t * postState\n-\t */\n-\tprotected Hashtable postState;\n-\n-\t/**\n-\t * undoRedoName\n-\t */\n-\tprotected String undoRedoName;\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Constructor StateEdit\n-\t * @param value0 TODO\n-\t */\n-\tpublic StateEdit(StateEditable value0) {\n-\t\t// TODO\n-\t} // StateEdit()\n-\n-\t/**\n-\t * Constructor StateEdit\n-\t * @param value0 TODO\n-\t * @param value1 TODO\n-\t */\n-\tpublic StateEdit(StateEditable value0, String value1) {\n-\t\t// TODO\n-\t} // StateEdit()\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Methods ----------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * init\n-\t * @param value0 TODO\n-\t * @param value1 TODO\n-\t */\n-\tprotected void init(StateEditable value0, String value1) {\n-\t\t// TODO\n-\t} // init()\n-\n-\t/**\n-\t * end\n-\t */\n-\tpublic void end() {\n-\t\t// TODO\n-\t} // end()\n-\n-\t/**\n-\t * undo\n-\t */\n-\tpublic void undo() {\n-\t\t// TODO\n-\t} // undo()\n-\n-\t/**\n-\t * redo\n-\t */\n-\tpublic void redo() {\n-\t\t// TODO\n-\t} // redo()\n-\n-\t/**\n-\t * getPresentationName\n-\t * @returns String\n-\t */\n-\tpublic String getPresentationName() {\n-\t\treturn null; // TODO\n-\t} // getPresentationName()\n-\n-\t/**\n-\t * removeRedundantState\n-\t */\n-\tprotected void removeRedundantState() {\n-\t\t// TODO\n-\t} // removeRedundantState()\n-\n-\n-} // StateEdit\n+public class StateEdit extends AbstractUndoableEdit\n+{\n+\n+  //-------------------------------------------------------------\n+  // Variables --------------------------------------------------\n+  //-------------------------------------------------------------\n+\n+  /**\n+   * RCSID\n+   */\n+  protected static final String RCSID = \"\"; // TODO\n+\n+  /**\n+   * object\n+   */\n+  protected StateEditable object;\n+\n+  /**\n+   * preState\n+   */\n+  protected Hashtable preState;\n+\n+  /**\n+   * postState\n+   */\n+  protected Hashtable postState;\n+\n+  /**\n+   * undoRedoName\n+   */\n+  protected String undoRedoName;\n+\n+\n+  //-------------------------------------------------------------\n+  // Initialization ---------------------------------------------\n+  //-------------------------------------------------------------\n+\n+  /**\n+   * Constructor StateEdit\n+   * @param obj Object to edit\n+   */\n+  public StateEdit(StateEditable obj)\n+  {\n+    init(obj, null);\n+  }\n+\n+  /**\n+   * Constructor StateEdit\n+   * @param obj Object to edit\n+   * @param name Presentation name\n+   */\n+  public StateEdit(StateEditable obj, String name)\n+  {\n+    init(obj, name);\n+  }\n+\n+\n+  //-------------------------------------------------------------\n+  // Methods ----------------------------------------------------\n+  //-------------------------------------------------------------\n+\n+  /**\n+   * Initialize this object.\n+   * @param obj Object to edit\n+   * @param name Presentation name\n+   */\n+  protected void init(StateEditable obj, String name)\n+  {\n+    object = obj;\n+    undoRedoName = name;\n+    preState = new Hashtable();\n+    postState = new Hashtable();\n+    obj.storeState(preState);\n+  }\n+\n+  /**\n+   * Indicate that all edits are finished, and update this object\n+   * with final state.\n+   */\n+  public void end()\n+  {\n+    object.storeState(postState);\n+    removeRedundantState();\n+  }\n+\n+  /**\n+   * Undo this edit by applying the initial state to the edited object.\n+   */\n+  public void undo()\n+  {\n+    object.restoreState(preState);\n+  }\n+\n+  /**\n+   * Undo this edit by applying the final state to the edited object.\n+   */\n+  public void redo()\n+  {\n+    object.restoreState(postState);\n+  }\n+\n+  /**\n+   * Return the presentation name of this object.\n+   * @returns The name, or null if not set\n+   */\n+  public String getPresentationName()\n+  {\n+    return undoRedoName;\n+  }\n+\n+  /**\n+   * removeRedundantState\n+   */\n+  protected void removeRedundantState()\n+  {\n+    Iterator i = preState.keySet().iterator();\n+    while (i.hasNext())\n+      {\n+\tObject key = i.next();\n+\tif (postState.containsKey(key))\n+\t  {\n+\t    if (preState.get(key).equals(postState.get(key)))\n+\t      {\n+\t\ti.remove();\n+\t\tpostState.remove(key);\n+\t      }\n+\t  }\n+      }\n+  }\n+}"}, {"sha": "d757438ff73efd4b8ba2c3bcaefe51bae4799594", "filename": "libjava/javax/swing/undo/StateEditable.java", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Fundo%2FStateEditable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Fundo%2FStateEditable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fundo%2FStateEditable.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -1,5 +1,5 @@\n-/* AbstractTableModel.java --\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+/* StateEditable.java --\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -46,20 +46,20 @@\n  */\n public interface StateEditable\n {\n-\n   /**\n-   * Upon receiving this message the receiver should extract any relevant\n-   * state out of state\n-   * \n+   * Restore State\n    * @param state State\n    */\n   public void restoreState(Hashtable state);\n \n   /**\n-   * Upon receiving this message the receiver should place any relevant state\n-   * into state\n-   * \n+   * Store State\n    * @param state State\n    */\n   public void storeState(Hashtable state);\n+\n+  /**\n+   * For some reason, Sun made the RCS IDs visible.\n+   */\n+  public static final String RCSID = \"We aren't compatible\";\n } // StateEditable"}, {"sha": "f09f3ffad4b00b9f634413226374642cc1933928", "filename": "libjava/javax/swing/undo/UndoableEditSupport.java", "status": "modified", "additions": 168, "deletions": 125, "changes": 293, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Fundo%2FUndoableEditSupport.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce0d0b097225538935a0ac9e1b713c024183547/libjava%2Fjavax%2Fswing%2Fundo%2FUndoableEditSupport.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fundo%2FUndoableEditSupport.java?ref=2ce0d0b097225538935a0ac9e1b713c024183547", "patch": "@@ -1,5 +1,5 @@\n-/* AbstractTableModel.java --\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+/* UndoableEditSupport.java --\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -45,126 +45,169 @@\n  * UndoableEditSupport\n  * @author\tAndrew Selkirk\n  */\n-public class UndoableEditSupport {\n-\n-\t//-------------------------------------------------------------\n-\t// Variables --------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * updateLevel\n-\t */\n-\tprotected int updateLevel;\n-\n-\t/**\n-\t * compoundEdit\n-\t */\n-\tprotected CompoundEdit compoundEdit;\n-\n-\t/**\n-\t * listeners\n-\t */\n-\tprotected Vector listeners = new Vector();\n-\n-\t/**\n-\t * realSource\n-\t */\n-\tprotected Object realSource;\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Constructor UndoableEditSupport\n-\t */\n-\tpublic UndoableEditSupport() {\n-\t\t// TODO\n-\t} // UndoableEditSupport()\n-\n-\t/**\n-\t * Constructor UndoableEditSupport\n-\t * @param object TODO\n-\t */\n-\tpublic UndoableEditSupport(Object object) {\n-\t\trealSource = object;\n-\t} // UndoableEditSupport()\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Methods ----------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * toString\n-\t * @returns String\n-\t */\n-\tpublic String toString() {\n-\t\treturn null; // TODO\n-\t} // toString()\n-\n-\t/**\n-\t * addUndoableEditListener\n-\t * @param value0 TODO\n-\t */\n-\tpublic synchronized void addUndoableEditListener(UndoableEditListener value0) {\n-\t\t// TODO\n-\t} // addUndoableEditListener()\n-\n-\t/**\n-\t * removeUndoableEditListener\n-\t * @param value0 TODO\n-\t */\n-\tpublic synchronized void removeUndoableEditListener(UndoableEditListener value0) {\n-\t\t// TODO\n-\t} // removeUndoableEditListener()\n-\n-\t/**\n-\t * _postEdit\n-\t * @param value0 TODO\n-\t */\n-\tprotected void _postEdit(UndoableEdit value0) {\n-\t\t// TODO\n-\t} // _postEdit()\n-\n-\t/**\n-\t * postEdit\n-\t * @param value0 TODO\n-\t */\n-\tpublic synchronized void postEdit(UndoableEdit value0) {\n-\t\t// TODO\n-\t} // postEdit()\n-\n-\t/**\n-\t * getUpdateLevel\n-\t * @returns int\n-\t */\n-\tpublic int getUpdateLevel() {\n-\t\treturn 0; // TODO\n-\t} // getUpdateLevel()\n-\n-\t/**\n-\t * beginUpdate\n-\t */\n-\tpublic synchronized void beginUpdate() {\n-\t\t// TODO\n-\t} // beginUpdate()\n-\n-\t/**\n-\t * createCompoundEdit\n-\t * @returns CompoundEdit\n-\t */\n-\tprotected CompoundEdit createCompoundEdit() {\n-\t\treturn null; // TODO\n-\t} // createCompoundEdit()\n-\n-\t/**\n-\t * endUpdate\n-\t */\n-\tpublic synchronized void endUpdate() {\n-\t\t// TODO\n-\t} // endUpdate()\n-\n-\n-} // UndoableEditSupport\n+public class UndoableEditSupport\n+{\n+\n+  //-------------------------------------------------------------\n+  // Variables --------------------------------------------------\n+  //-------------------------------------------------------------\n+\n+  /**\n+   * updateLevel\n+   */\n+  protected int updateLevel;\n+\n+  /**\n+   * compoundEdit\n+   */\n+  protected CompoundEdit compoundEdit;\n+\n+  /**\n+   * listeners\n+   */\n+  protected Vector listeners = new Vector();\n+\n+  /**\n+   * realSource\n+   */\n+  protected Object realSource;\n+\n+\n+  //-------------------------------------------------------------\n+  // Initialization ---------------------------------------------\n+  //-------------------------------------------------------------\n+\n+  /**\n+   * Constructor UndoableEditSupport\n+   */\n+  public UndoableEditSupport()\n+  {\n+  }\n+\n+  /**\n+   * Constructor UndoableEditSupport\n+   * @param object TODO\n+   */\n+  public UndoableEditSupport(Object object)\n+  {\n+    realSource = object;\n+  }\n+\n+\n+  //-------------------------------------------------------------\n+  // Methods ----------------------------------------------------\n+  //-------------------------------------------------------------\n+\n+  /**\n+   * toString\n+   * @returns String\n+   */\n+  public String toString()\n+  {\n+    return (super.toString() + \" realSource: \" + realSource\n+\t    + \" updateLevel: \" + updateLevel);\n+  }\n+\n+  /**\n+   * Add a listener.\n+   * @param val the listener\n+   */\n+  public synchronized void addUndoableEditListener(UndoableEditListener val)\n+  {\n+    listeners.add(val);\n+  }\n+\n+  /**\n+   * Remove a listener.\n+   * @param val the listener\n+   */\n+  public synchronized void removeUndoableEditListener(UndoableEditListener val)\n+  {\n+    listeners.removeElement(val);\n+  }\n+\n+  /**\n+   * Return an array of all listeners.\n+   * @returns all the listeners\n+   */\n+  public synchronized UndoableEditListener[] getUndoableEditListeners()\n+  {\n+    UndoableEditListener[] result = new UndoableEditListener[listeners.size()];\n+    return (UndoableEditListener[]) listeners.toArray(result);\n+  }\n+\n+  /**\n+   * _postEdit\n+   * @param value0 TODO\n+   */\n+  protected void _postEdit(UndoableEdit edit)\n+  {\n+    UndoableEditEvent event = new UndoableEditEvent(realSource, edit);\n+    int max = listeners.size();\n+    for (int i = 0; i < max; ++i)\n+      {\n+\tUndoableEditListener l\n+\t  = (UndoableEditListener) (listeners.elementAt(i));\n+\tl.undoableEditHappened(event);\n+      }\n+  }\n+\n+  /**\n+   * postEdit\n+   * @param value0 TODO\n+   */\n+  public synchronized void postEdit(UndoableEdit edit)\n+  {\n+    if (compoundEdit == null)\n+      compoundEdit.addEdit(edit);\n+    else\n+      _postEdit(edit);\n+  }\n+\n+  /**\n+   * getUpdateLevel\n+   * @returns int\n+   */\n+  public int getUpdateLevel()\n+  {\n+    return updateLevel;\n+  }\n+\n+  /**\n+   * beginUpdate\n+   */\n+  public synchronized void beginUpdate()\n+  {\n+    if (compoundEdit != null)\n+      {\n+\t// FIXME: what?  We can't push a new one.  This isn't even\n+\t// documented anyway.\n+\tendUpdate();\n+      }\n+\n+    compoundEdit = createCompoundEdit();\n+    ++updateLevel;\n+  }\n+\n+  /**\n+   * createCompoundEdit\n+   * @returns CompoundEdit\n+   */\n+  protected CompoundEdit createCompoundEdit()\n+  {\n+    return new CompoundEdit();\n+  }\n+\n+  /**\n+   * endUpdate\n+   */\n+  public synchronized void endUpdate()\n+  {\n+    // FIXME: assert updateLevel == 1;\n+    compoundEdit.end();\n+    CompoundEdit c = compoundEdit;\n+    compoundEdit = null;\n+    --updateLevel;\n+    _postEdit(c);\n+  }\n+}"}]}