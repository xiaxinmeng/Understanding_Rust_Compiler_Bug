{"sha": "0d37d3a73da98416d2020880ca8f2ec47b5a9c96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQzN2QzYTczZGE5ODQxNmQyMDIwODgwY2E4ZjJlYzQ3YjVhOWM5Ng==", "commit": {"author": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-08-02T14:11:02Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-08-02T14:11:02Z"}, "message": "install missing file from last checkin\n\nFrom-SVN: r127161", "tree": {"sha": "9c75a5b565f373257b2e7e8874d6ee23e79b57d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c75a5b565f373257b2e7e8874d6ee23e79b57d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d37d3a73da98416d2020880ca8f2ec47b5a9c96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d37d3a73da98416d2020880ca8f2ec47b5a9c96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d37d3a73da98416d2020880ca8f2ec47b5a9c96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d37d3a73da98416d2020880ca8f2ec47b5a9c96/comments", "author": null, "committer": null, "parents": [{"sha": "44f9fcef63f933908fd11e3beb4dc5298d678191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f9fcef63f933908fd11e3beb4dc5298d678191", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44f9fcef63f933908fd11e3beb4dc5298d678191"}], "stats": {"total": 119, "additions": 119, "deletions": 0}, "files": [{"sha": "9d31e4b7bfa0df750b64396a0eb41321493dfd68", "filename": "gcc/testsuite/gcc.dg/tg-tests.h", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d37d3a73da98416d2020880ca8f2ec47b5a9c96/gcc%2Ftestsuite%2Fgcc.dg%2Ftg-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d37d3a73da98416d2020880ca8f2ec47b5a9c96/gcc%2Ftestsuite%2Fgcc.dg%2Ftg-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftg-tests.h?ref=0d37d3a73da98416d2020880ca8f2ec47b5a9c96", "patch": "@@ -0,0 +1,119 @@\n+/* Test various type-generic builtins by calling \"main_tests()\".  */\n+\n+void __attribute__ ((__noinline__))\n+foo_1 (float f, double d, long double ld,\n+       int res_unord, int res_isnan, int res_isinf,\n+       int res_isfin, int res_isnorm)\n+{\n+  if (__builtin_isunordered (f, 0) != res_unord)\n+    __builtin_abort ();\n+  if (__builtin_isunordered (0, f) != res_unord)\n+    __builtin_abort ();\n+  if (__builtin_isunordered (d, 0) != res_unord)\n+    __builtin_abort ();\n+  if (__builtin_isunordered (0, d) != res_unord)\n+    __builtin_abort ();\n+  if (__builtin_isunordered (ld, 0) != res_unord)\n+    __builtin_abort ();\n+  if (__builtin_isunordered (0, ld) != res_unord)\n+    __builtin_abort ();\n+\n+  if (__builtin_isnan (f) != res_isnan)\n+    __builtin_abort ();\n+  if (__builtin_isnan (d) != res_isnan)\n+    __builtin_abort ();\n+  if (__builtin_isnan (ld) != res_isnan)\n+    __builtin_abort ();\n+  if (__builtin_isnanf (f) != res_isnan)\n+    __builtin_abort ();\n+  if (__builtin_isnanl (ld) != res_isnan)\n+    __builtin_abort ();\n+\n+  if (__builtin_isinf (f) != res_isinf)\n+    __builtin_abort ();\n+  if (__builtin_isinf (d) != res_isinf)\n+    __builtin_abort ();\n+  if (__builtin_isinf (ld) != res_isinf)\n+    __builtin_abort ();\n+  if (__builtin_isinff (f) != res_isinf)\n+    __builtin_abort ();\n+  if (__builtin_isinfl (ld) != res_isinf)\n+    __builtin_abort ();\n+\n+  if (__builtin_isnormal (f) != res_isnorm)\n+    __builtin_abort ();\n+  if (__builtin_isnormal (d) != res_isnorm)\n+    __builtin_abort ();\n+  if (__builtin_isnormal (ld) != res_isnorm)\n+    __builtin_abort ();\n+\n+  if (__builtin_isfinite (f) != res_isfin)\n+    __builtin_abort ();\n+  if (__builtin_isfinite (d) != res_isfin)\n+    __builtin_abort ();\n+  if (__builtin_isfinite (ld) != res_isfin)\n+    __builtin_abort ();\n+\n+  if (__builtin_finitef (f) != res_isfin)\n+    __builtin_abort ();\n+  if (__builtin_finite (f) != res_isfin)\n+    __builtin_abort ();\n+  if (__builtin_finite (d) != res_isfin)\n+    __builtin_abort ();\n+  if (__builtin_finitel (d) != res_isfin)\n+    __builtin_abort ();\n+  if (__builtin_finitel (ld) != res_isfin)\n+    __builtin_abort ();\n+}\n+\n+void __attribute__ ((__noinline__))\n+foo (float f, double d, long double ld,\n+     int res_unord, int res_isnan, int res_isinf,\n+     int res_isfin, int res_isnorm)\n+{\n+  foo_1 (f, d, ld, res_unord, res_isnan, res_isinf, res_isfin, res_isnorm);\n+  /* Try all the values negated as well.  */\n+  foo_1 (-f, -d, -ld, res_unord, res_isnan, res_isinf, res_isfin, res_isnorm);\n+}\n+\n+int __attribute__ ((__noinline__))\n+main_tests (void)\n+{\n+  float f;\n+  double d;\n+  long double ld;\n+  \n+  /* Test NaN.  */\n+  f = __builtin_nanf(\"\"); d = __builtin_nan(\"\"); ld = __builtin_nanl(\"\");\n+  foo(f, d, ld, /*unord=*/ 1, /*isnan=*/ 1, /*isinf=*/ 0, /*isfin=*/ 0, /*isnorm=*/ 0);\n+\n+  /* Test infinity.  */\n+  f = __builtin_inff(); d = __builtin_inf(); ld = __builtin_infl();\n+  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 1, /*isfin=*/ 0, /*isnorm=*/ 0);\n+\n+  /* Test zero.  */\n+  f = 0; d = 0; ld = 0;\n+  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 0, /*isfin=*/ 1, /*isnorm=*/ 0);\n+\n+  /* Test one.  */\n+  f = 1; d = 1; ld = 1;\n+  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 0, /*isfin=*/ 1, /*isnorm=*/ 1);\n+\n+  /* Test minimum values.  */\n+  f = __FLT_MIN__; d = __DBL_MIN__; ld = __LDBL_MIN__;\n+  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 0, /*isfin=*/ 1, /*isnorm=*/ 1);\n+\n+  /* Test subnormal values.  */\n+  f = __FLT_MIN__/2; d = __DBL_MIN__/2; ld = __LDBL_MIN__/2;\n+  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 0, /*isfin=*/ 1, /*isnorm=*/ 0);\n+\n+  /* Test maximum values.  */\n+  f = __FLT_MAX__; d = __DBL_MAX__; ld = __LDBL_MAX__;\n+  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 0, /*isfin=*/ 1, /*isnorm=*/ 1);\n+\n+  /* Test overflow values.  */\n+  f = __FLT_MAX__*2; d = __DBL_MAX__*2; ld = __LDBL_MAX__*2;\n+  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 1, /*isfin=*/ 0, /*isnorm=*/ 0);\n+\n+  return 0;\n+}"}]}