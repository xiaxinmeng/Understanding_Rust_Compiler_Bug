{"sha": "dce39da65769c10426ca404119e346371963a190", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNlMzlkYTY1NzY5YzEwNDI2Y2E0MDQxMTllMzQ2MzcxOTYzYTE5MA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-22T19:38:02Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-22T19:38:02Z"}, "message": "(emit_no_conflict_block): Just emit the insns if the block contains\nsomething not an INSN or has an embedded block.\n\nFrom-SVN: r8550", "tree": {"sha": "d000c6d989dcf2f3376992128f811adcdec740ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d000c6d989dcf2f3376992128f811adcdec740ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dce39da65769c10426ca404119e346371963a190", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dce39da65769c10426ca404119e346371963a190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dce39da65769c10426ca404119e346371963a190", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dce39da65769c10426ca404119e346371963a190/comments", "author": null, "committer": null, "parents": [{"sha": "9fe0563affeb7e0a4048cce3b694eb2f409953fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe0563affeb7e0a4048cce3b694eb2f409953fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fe0563affeb7e0a4048cce3b694eb2f409953fe"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "e5d9c177b217d0036a1be962d3e2a83c26888dea", "filename": "gcc/optabs.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dce39da65769c10426ca404119e346371963a190/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dce39da65769c10426ca404119e346371963a190/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=dce39da65769c10426ca404119e346371963a190", "patch": "@@ -2395,9 +2395,7 @@ emit_unop_insn (icode, target, op0, code)\n \n    INSNS is a block of code generated to perform the operation, not including\n    the CLOBBER and final copy.  All insns that compute intermediate values\n-   are first emitted, followed by the block as described above.  Only\n-   INSNs are allowed in the block; no library calls or jumps may be\n-   present.\n+   are first emitted, followed by the block as described above.  \n \n    TARGET, OP0, and OP1 are the output and inputs of the operations,\n    respectively.  OP1 may be zero for a unary operation.\n@@ -2406,7 +2404,8 @@ emit_unop_insn (icode, target, op0, code)\n    on the last insn.\n \n    If TARGET is not a register, INSNS is simply emitted with no special\n-   processing.\n+   processing.  Likewise if anything in INSNS is not an INSN or if\n+   there is a libcall block inside INSNS.\n \n    The final insn emitted is returned.  */\n \n@@ -2421,6 +2420,11 @@ emit_no_conflict_block (insns, target, op0, op1, equiv)\n \n   if (GET_CODE (target) != REG || reload_in_progress)\n     return emit_insns (insns);\n+  else\n+    for (insn = insns; insn; insn = NEXT_INSN (insn))\n+      if (GET_CODE (insn) != INSN\n+\t  || find_reg_note (insn, REG_LIBCALL, NULL_RTX))\n+\treturn emit_insns (insns);\n \n   /* First emit all insns that do not store into words of the output and remove\n      these from the list.  */\n@@ -2431,9 +2435,6 @@ emit_no_conflict_block (insns, target, op0, op1, equiv)\n \n       next = NEXT_INSN (insn);\n \n-      if (GET_CODE (insn) != INSN)\n-\tabort ();\n-\n       if (GET_CODE (PATTERN (insn)) == SET)\n \tset = PATTERN (insn);\n       else if (GET_CODE (PATTERN (insn)) == PARALLEL)"}]}