{"sha": "f0b4bdd55db4cf919d9e8c7c14d20b1f465210a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBiNGJkZDU1ZGI0Y2Y5MTlkOWU4YzdjMTRkMjBiMWY0NjUyMTBhMg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2008-12-19T17:22:58Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2008-12-19T17:22:58Z"}, "message": "re PR bootstrap/38578 (fatal warning during bootstrap on arm.c for output_move_double and arm_expand_prologue)\n\n\tPR bootstrap/38578\n\t* arm.c (load_multiple_sequence): Initialize ORDER array.\n\t(store_multiple_sequence): Likewise.\n\t(output_move_double): Make reg0 unsigned.\n\t(arm_output_epilogue): Make amount unsigned.\n\t(arm_expand_prologue): Move declaration of dwarf before block\n\tstatements.\n\nFrom-SVN: r142837", "tree": {"sha": "e47313add1118825f66f94764f9c52001e77764f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e47313add1118825f66f94764f9c52001e77764f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0b4bdd55db4cf919d9e8c7c14d20b1f465210a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0b4bdd55db4cf919d9e8c7c14d20b1f465210a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0b4bdd55db4cf919d9e8c7c14d20b1f465210a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0b4bdd55db4cf919d9e8c7c14d20b1f465210a2/comments", "author": null, "committer": null, "parents": [{"sha": "7bda4a1df46915335ffefe3d6497adc76e6e4598", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bda4a1df46915335ffefe3d6497adc76e6e4598", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bda4a1df46915335ffefe3d6497adc76e6e4598"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "fa2ccd68fc0db21a538efdbd0324887766f88e15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b4bdd55db4cf919d9e8c7c14d20b1f465210a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b4bdd55db4cf919d9e8c7c14d20b1f465210a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0b4bdd55db4cf919d9e8c7c14d20b1f465210a2", "patch": "@@ -1,3 +1,13 @@\n+2008-12-19  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR bootstrap/38578\n+\t* arm.c (load_multiple_sequence): Initialize ORDER array.\n+\t(store_multiple_sequence): Likewise.\n+\t(output_move_double): Make reg0 unsigned.\n+\t(arm_output_epilogue): Make amount unsigned.\n+\t(arm_expand_prologue): Move declaration of dwarf before block\n+\tstatements.\n+\n 2008-12-19  Steve Ellcey  <sje@cup.hp.com>\n \n \t* df-scan.c ( df_hard_reg_init): Move declaration of i."}, {"sha": "afaade0d1cd5a179644eee067c48fa9865742cd6", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0b4bdd55db4cf919d9e8c7c14d20b1f465210a2/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0b4bdd55db4cf919d9e8c7c14d20b1f465210a2/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f0b4bdd55db4cf919d9e8c7c14d20b1f465210a2", "patch": "@@ -7001,6 +7001,8 @@ load_multiple_sequence (rtx *operands, int nops, int *regs, int *base,\n      though could be easily extended if required.  */\n   gcc_assert (nops >= 2 && nops <= 4);\n \n+  memset (order, 0, 4 * sizeof (int));\n+\n   /* Loop over the operands and check that the memory references are\n      suitable (i.e. immediate offsets from the same base register).  At\n      the same time, extract the target register, and the memory\n@@ -7228,6 +7230,8 @@ store_multiple_sequence (rtx *operands, int nops, int *regs, int *base,\n      extended if required.  */\n   gcc_assert (nops >= 2 && nops <= 4);\n \n+  memset (order, 0, 4 * sizeof (int));\n+\n   /* Loop over the operands and check that the memory references are\n      suitable (i.e. immediate offsets from the same base register).  At\n      the same time, extract the target register, and the memory\n@@ -9986,7 +9990,7 @@ output_move_double (rtx *operands)\n \n   if (code0 == REG)\n     {\n-      int reg0 = REGNO (operands[0]);\n+      unsigned int reg0 = REGNO (operands[0]);\n \n       otherops[0] = gen_rtx_REG (SImode, 1 + reg0);\n \n@@ -11661,7 +11665,7 @@ arm_output_epilogue (rtx sibling)\n \t (where frame pointer is required to point at first register)\n \t and ARM-non-apcs-frame. Therefore, such change is postponed\n \t until real need arise.  */\n-      HOST_WIDE_INT amount;\n+      unsigned HOST_WIDE_INT amount;\n       int rfe;\n       /* Restore stack pointer if necessary.  */\n       if (TARGET_ARM && frame_pointer_needed)\n@@ -12653,11 +12657,11 @@ arm_expand_prologue (void)\n \t    insn = emit_set_insn (gen_rtx_REG (SImode, 3), ip_rtx);\n \t  else if (args_to_push == 0)\n \t    {\n+\t      rtx dwarf;\n+\n \t      gcc_assert(arm_compute_static_chain_stack_bytes() == 4);\n \t      saved_regs += 4;\n \n-\t      rtx dwarf;\n-\n \t      insn = gen_rtx_PRE_DEC (SImode, stack_pointer_rtx);\n \t      insn = emit_set_insn (gen_frame_mem (SImode, insn), ip_rtx);\n \t      fp_offset = 4;"}]}