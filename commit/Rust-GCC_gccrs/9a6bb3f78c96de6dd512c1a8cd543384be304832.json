{"sha": "9a6bb3f78c96de6dd512c1a8cd543384be304832", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE2YmIzZjc4Yzk2ZGU2ZGQ1MTJjMWE4Y2Q1NDMzODRiZTMwNDgzMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2000-07-10T07:18:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-07-10T07:18:06Z"}, "message": "tree.h (STRIP_NOPS): Check for error_mark_node.\n\n        * tree.h (STRIP_NOPS): Check for error_mark_node.\n        (STRIP_SIGN_NOPS, STRIP_TYPE_NOPS): Likewise.\n        (dwarf2out_*): Remove duplicate declarations.\n\n        * c-decl.c (duplicate_decls): Copy DECL_ABSTRACT_ORIGIN from\n        DECL_ABSTRACT_ORIGIN, not DECL_ORIGIN.\n\nFrom-SVN: r34939", "tree": {"sha": "cc6a81da130c19fb3639d7984a1e0d0c001b990d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc6a81da130c19fb3639d7984a1e0d0c001b990d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a6bb3f78c96de6dd512c1a8cd543384be304832", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a6bb3f78c96de6dd512c1a8cd543384be304832", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a6bb3f78c96de6dd512c1a8cd543384be304832", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a6bb3f78c96de6dd512c1a8cd543384be304832/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2bb5d995f27dcd3db33ecd983795ffd0654a2e5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bb5d995f27dcd3db33ecd983795ffd0654a2e5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bb5d995f27dcd3db33ecd983795ffd0654a2e5d"}], "stats": {"total": 64, "additions": 15, "deletions": 49}, "files": [{"sha": "df05c77e73caeeccb0278fdd28e0922cb815cefe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6bb3f78c96de6dd512c1a8cd543384be304832/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6bb3f78c96de6dd512c1a8cd543384be304832/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a6bb3f78c96de6dd512c1a8cd543384be304832", "patch": "@@ -1,3 +1,12 @@\n+2000-07-09  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree.h (STRIP_NOPS): Check for error_mark_node.\n+\t(STRIP_SIGN_NOPS, STRIP_TYPE_NOPS): Likewise.\n+\t(dwarf2out_*): Remove duplicate declarations.\n+\n+\t* c-decl.c (duplicate_decls): Copy DECL_ABSTRACT_ORIGIN from\n+\tDECL_ABSTRACT_ORIGIN, not DECL_ORIGIN.\n+\n 2000-07-10  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* diagnostic.c (wrap_text): New function."}, {"sha": "b2beebfe76d590f22d3125bc7c489a06bb50a318", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6bb3f78c96de6dd512c1a8cd543384be304832/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6bb3f78c96de6dd512c1a8cd543384be304832/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=9a6bb3f78c96de6dd512c1a8cd543384be304832", "patch": "@@ -1965,7 +1965,7 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \t  DECL_SAVED_INSNS (newdecl) = DECL_SAVED_INSNS (olddecl);\n \t  DECL_ARGUMENTS (newdecl) = DECL_ARGUMENTS (olddecl);\n \t  if (DECL_INLINE (newdecl))\n-\t    DECL_ABSTRACT_ORIGIN (newdecl) = DECL_ORIGIN (olddecl);\n+\t    DECL_ABSTRACT_ORIGIN (newdecl) = DECL_ABSTRACT_ORIGIN (olddecl);\n \t}\n     }\n   if (different_binding_level)"}, {"sha": "39a94c7965bcdf6dffff7ab2916911bca2f2b5a6", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 48, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6bb3f78c96de6dd512c1a8cd543384be304832/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6bb3f78c96de6dd512c1a8cd543384be304832/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9a6bb3f78c96de6dd512c1a8cd543384be304832", "patch": "@@ -350,10 +350,11 @@ extern void tree_class_check_failed PARAMS ((const tree, int,\n /* Given an expression as a tree, strip any NON_LVALUE_EXPRs and NOP_EXPRs\n    that don't change the machine mode.  */\n \n-#define STRIP_NOPS(EXP) \\\n+#define STRIP_NOPS(EXP)\t\t\t\t\t\t\\\n   while ((TREE_CODE (EXP) == NOP_EXPR\t\t\t\t\\\n \t  || TREE_CODE (EXP) == CONVERT_EXPR\t\t\t\\\n \t  || TREE_CODE (EXP) == NON_LVALUE_EXPR)\t\t\\\n+\t && TREE_OPERAND (EXP, 0) != error_mark_node\t\t\\\n \t && (TYPE_MODE (TREE_TYPE (EXP))\t\t\t\\\n \t     == TYPE_MODE (TREE_TYPE (TREE_OPERAND (EXP, 0)))))\t\\\n     (EXP) = TREE_OPERAND (EXP, 0);\n@@ -364,6 +365,7 @@ extern void tree_class_check_failed PARAMS ((const tree, int,\n   while ((TREE_CODE (EXP) == NOP_EXPR\t\t\t\t\\\n \t  || TREE_CODE (EXP) == CONVERT_EXPR\t\t\t\\\n \t  || TREE_CODE (EXP) == NON_LVALUE_EXPR)\t\t\\\n+\t && TREE_OPERAND (EXP, 0) != error_mark_node\t\t\\\n \t && (TYPE_MODE (TREE_TYPE (EXP))\t\t\t\\\n \t     == TYPE_MODE (TREE_TYPE (TREE_OPERAND (EXP, 0))))\t\\\n \t && (TREE_UNSIGNED (TREE_TYPE (EXP))\t\t\t\\\n@@ -376,6 +378,7 @@ extern void tree_class_check_failed PARAMS ((const tree, int,\n   while ((TREE_CODE (EXP) == NOP_EXPR\t\t\t\t\\\n \t  || TREE_CODE (EXP) == CONVERT_EXPR\t\t\t\\\n \t  || TREE_CODE (EXP) == NON_LVALUE_EXPR)\t\t\\\n+\t && TREE_OPERAND (EXP, 0) != error_mark_node\t\t\\\n \t && (TREE_TYPE (EXP)\t\t\t\t\t\\\n \t     == TREE_TYPE (TREE_OPERAND (EXP, 0))))\t\t\\\n     (EXP) = TREE_OPERAND (EXP, 0);\n@@ -2532,52 +2535,6 @@ extern tree invert_truthvalue\tPARAMS ((tree));\n \n extern tree (*lang_type_promotes_to)\tPARAMS ((tree));\n \f\n-/* Interface of the DWARF2 unwind info support.  */\n-\n-/* Decide whether we want to emit frame unwind information for the current\n-   translation unit.  */\n-\n-extern int dwarf2out_do_frame\t\tPARAMS ((void));\n-\n-/* Generate a new label for the CFI info to refer to.  */\n-\n-extern char *dwarf2out_cfi_label\tPARAMS ((void));\n-\n-/* Entry point to update the canonical frame address (CFA).  */\n-\n-extern void dwarf2out_def_cfa\t\tPARAMS ((const char *, unsigned, long));\n-\n-/* Add the CFI for saving a register window.  */\n-\n-extern void dwarf2out_window_save\tPARAMS ((const char *));\n-\n-/* Add a CFI to update the running total of the size of arguments pushed\n-   onto the stack.  */\n-\n-extern void dwarf2out_args_size\t\tPARAMS ((const char *, long));\n-\n-/* Entry point for saving a register to the stack.  */\n-\n-extern void dwarf2out_reg_save\t\tPARAMS ((const char *, unsigned, long));\n-\n-/* Entry point for saving the return address in the stack.  */\n-\n-extern void dwarf2out_return_save\tPARAMS ((const char *, long));\n-\n-/* Entry point for saving the return address in a register.  */\n-\n-extern void dwarf2out_return_reg\tPARAMS ((const char *, unsigned));\n-\n-/* Output a marker (i.e. a label) for the beginning of a function, before\n-   the prologue.  */\n-\n-extern void dwarf2out_begin_prologue\tPARAMS ((void));\n-\n-/* Output a marker (i.e. a label) for the absolute end of the generated\n-   code for a function definition.  */\n-\n-extern void dwarf2out_end_epilogue\tPARAMS ((void));\n-\f\n /* The language front-end must define these functions.  */\n \n /* Function of no arguments for initializing options.  */\n@@ -2910,7 +2867,7 @@ extern void dwarf2out_begin_prologue\tPARAMS ((void));\n    code for a function definition.  */\n \n extern void dwarf2out_end_epilogue\tPARAMS ((void));\n-\n+\f\n /* Redefine abort to report an internal error w/o coredump, and\n    reporting the location of the error in the source file.  This logic\n    is duplicated in rtl.h and tree.h because every file that needs the"}]}