{"sha": "1330f7d5b62599b069ae72d99a0fe68d65850bc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMzMGY3ZDViNjI1OTliMDY5YWU3MmQ5OWEwZmU2OGQ2NTg1MGJjMQ==", "commit": {"author": {"name": "Douglas B Rupp", "email": "rupp@gnat.com", "date": "2002-08-15T05:04:27Z"}, "committer": {"name": "Douglas Rupp", "email": "rupp@gcc.gnu.org", "date": "2002-08-15T05:04:27Z"}, "message": "alpha-protos.h: Update.\n\n\t* config/alpha/alpha-protos.h: Update.\n\n\t* config/alpha/alpha.c: (LINKAGE_SYMBOL_REF_P): New macro.\n\t(alpha_legitimate_address_p): Test LINKAGE_SYMBOL_REF_P.\n\t(alpha_linkage_symbol_p): New static function.\n\t(print_operand_address): Print linkage operand.\n\n\t(alpha_funcs_num, alpha_funcs_tree, alpha_links_tree): New static\n\tvariables.\n\t(reloc_kind): New enum.\n\t(struct alpha_funcs): New struct.\n\t(struct alpha_links): Add reloc_kind field. Rename links_kind field.\n\n\t(alpha_need_linkage): Rewrite.\n\t(alpha_use_linkage): New global function.\n\t(alpha_write_linkage): Rewrite and make static.\n\t(alpha_write_one_linkage): Rewrite\n\n\t(alpha_start_function): Remove procedure descriptor output.\n\t(alpha_end_function): Write linkages at end of each function.\n\n\t* config/alpha/alpha.md (call_vms, call_value_vms): Rewrite.\n\t(call_vms_1, call_value_vms_1): Rewrite.\n\n\t* config/alpha/vms.h (ASM_FILE_END): Remove.\n\nFrom-SVN: r56338", "tree": {"sha": "1b3c24145b127c1eebe4447c04e1e1968ca43b45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b3c24145b127c1eebe4447c04e1e1968ca43b45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1330f7d5b62599b069ae72d99a0fe68d65850bc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1330f7d5b62599b069ae72d99a0fe68d65850bc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1330f7d5b62599b069ae72d99a0fe68d65850bc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1330f7d5b62599b069ae72d99a0fe68d65850bc1/comments", "author": null, "committer": null, "parents": [{"sha": "d1f1cc6a0fbea6eafd29bf13a02705ccb9e4f45e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f1cc6a0fbea6eafd29bf13a02705ccb9e4f45e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1f1cc6a0fbea6eafd29bf13a02705ccb9e4f45e"}], "stats": {"total": 416, "additions": 335, "deletions": 81}, "files": [{"sha": "ab35fcff585ad50931b9c16d86539e5536736362", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1330f7d5b62599b069ae72d99a0fe68d65850bc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1330f7d5b62599b069ae72d99a0fe68d65850bc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1330f7d5b62599b069ae72d99a0fe68d65850bc1", "patch": "@@ -1,3 +1,31 @@\n+2002-08-14  Douglas B Rupp  <rupp@gnat.com>\n+\n+\t* config/alpha/alpha-protos.h: Update.\n+\n+\t* config/alpha/alpha.c: (LINKAGE_SYMBOL_REF_P): New macro.\n+\t(alpha_legitimate_address_p): Test LINKAGE_SYMBOL_REF_P.\n+\t(alpha_linkage_symbol_p): New static function.\n+\t(print_operand_address): Print linkage operand.\n+\n+\t(alpha_funcs_num, alpha_funcs_tree, alpha_links_tree): New static\n+\tvariables.\n+\t(reloc_kind): New enum.\n+\t(struct alpha_funcs): New struct.\n+\t(struct alpha_links): Add reloc_kind field. Rename links_kind field.\n+\n+\t(alpha_need_linkage): Rewrite.\n+\t(alpha_use_linkage): New global function.\n+\t(alpha_write_linkage): Rewrite and make static.\n+\t(alpha_write_one_linkage): Rewrite\n+\n+\t(alpha_start_function): Remove procedure descriptor output.\n+\t(alpha_end_function): Write linkages at end of each function.\n+\n+\t* config/alpha/alpha.md (call_vms, call_value_vms): Rewrite.\n+\t(call_vms_1, call_value_vms_1): Rewrite.\n+\n+\t* config/alpha/vms.h (ASM_FILE_END): Remove.\n+\n 2002-08-14  Richard Henderson  <rth@redhat.com>\n \n \t* ggc-page.c (RTL_SIZE): New."}, {"sha": "e52e4f461bc5bd51b69be933fe391c4f73e8f338", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1330f7d5b62599b069ae72d99a0fe68d65850bc1/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1330f7d5b62599b069ae72d99a0fe68d65850bc1/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=1330f7d5b62599b069ae72d99a0fe68d65850bc1", "patch": "@@ -159,13 +159,13 @@ extern void alpha_emit_xfloating_cvt PARAMS ((enum rtx_code, rtx[]));\n #endif\n \n extern rtx alpha_need_linkage PARAMS ((const char *, int));\n+extern rtx alpha_use_linkage PARAMS ((rtx, tree, int, int));\n \n #if TARGET_ABI_OPEN_VMS\n #ifdef HAVE_MACHINE_MODES\n extern enum avms_arg_type alpha_arg_type PARAMS ((enum machine_mode));\n #endif\n extern rtx alpha_arg_info_reg_val PARAMS ((CUMULATIVE_ARGS));\n-extern void alpha_write_linkage PARAMS ((FILE *));\n #endif /* TARGET_ABI_OPEN_VMS */\n \n extern rtx unicosmk_add_call_info_word PARAMS ((rtx));"}, {"sha": "7fa6ba03337d1a613ff8b1f17cf45a27a549604b", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 266, "deletions": 62, "changes": 328, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1330f7d5b62599b069ae72d99a0fe68d65850bc1/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1330f7d5b62599b069ae72d99a0fe68d65850bc1/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=1330f7d5b62599b069ae72d99a0fe68d65850bc1", "patch": "@@ -188,6 +188,13 @@ static void alpha_elf_select_rtx_section\n   PARAMS ((enum machine_mode, rtx, unsigned HOST_WIDE_INT));\n #endif\n \n+#if TARGET_ABI_OPEN_VMS\n+static bool alpha_linkage_symbol_p\n+  PARAMS ((const char *symname));\n+static void alpha_write_linkage\n+  PARAMS ((FILE *, const char *, tree));\n+#endif\n+\n static struct machine_function * alpha_init_machine_status\n   PARAMS ((void));\n \n@@ -1938,6 +1945,28 @@ alpha_strip_name_encoding (str)\n   return str;\n }\n \n+#if TARGET_ABI_OPEN_VMS\n+static bool\n+alpha_linkage_symbol_p (symname)\n+     const char *symname;\n+{\n+  int symlen = strlen (symname);\n+\n+  if (symlen > 4)\n+    return strcmp (&symname [symlen - 4], \"..lk\") == 0;\n+\n+  return false;\n+}\n+\n+#define LINKAGE_SYMBOL_REF_P(X) \\\n+  ((GET_CODE (X) == SYMBOL_REF   \\\n+    && alpha_linkage_symbol_p (XSTR (X, 0))) \\\n+   || (GET_CODE (X) == CONST                 \\\n+       && GET_CODE (XEXP (X, 0)) == PLUS     \\\n+       && GET_CODE (XEXP (XEXP (X, 0), 0)) == SYMBOL_REF \\\n+       && alpha_linkage_symbol_p (XSTR (XEXP (XEXP (X, 0), 0), 0))))\n+#endif\n+\n /* legitimate_address_p recognizes an RTL expression that is a valid\n    memory address for an instruction.  The MODE argument is the\n    machine mode for the MEM expression that wants to use this address.\n@@ -1977,6 +2006,11 @@ alpha_legitimate_address_p (mode, x, strict)\n   if (CONSTANT_ADDRESS_P (x))\n     return true;\n \n+#if TARGET_ABI_OPEN_VMS\n+  if (LINKAGE_SYMBOL_REF_P (x))\n+    return true;\n+#endif\n+\n   /* Register plus a small constant offset is valid.  */\n   if (GET_CODE (x) == PLUS)\n     {\n@@ -5929,6 +5963,24 @@ print_operand_address (file, addr)\n     basereg = subreg_regno (addr);\n   else if (GET_CODE (addr) == CONST_INT)\n     offset = INTVAL (addr);\n+\n+#if TARGET_ABI_OPEN_VMS\n+  else if (GET_CODE (addr) == SYMBOL_REF)\n+    {\n+      fprintf (file, \"%s\", XSTR (addr, 0));\n+      return;\n+    }\n+  else if (GET_CODE (addr) == CONST\n+\t   && GET_CODE (XEXP (addr, 0)) == PLUS\n+\t   && GET_CODE (XEXP (XEXP (addr, 0), 0)) == SYMBOL_REF)\n+    {\n+      fprintf (file, \"%s+%d\",\n+\t       XSTR (XEXP (XEXP (addr, 0), 0), 0),\n+\t       INTVAL (XEXP (XEXP (addr, 0), 1)));\n+      return;\n+    }\n+#endif\n+\n   else\n     abort ();\n \n@@ -7432,18 +7484,6 @@ alpha_start_function (file, fnname, decl)\n   fputs (\"\\t.ascii \\\"\", file);\n   assemble_name (file, fnname);\n   fputs (\"\\\\0\\\"\\n\", file);\n-\n-  link_section ();\n-  fprintf (file, \"\\t.align 3\\n\");\n-  fputs (\"\\t.name \", file);\n-  assemble_name (file, fnname);\n-  fputs (\"..na\\n\", file);\n-  ASM_OUTPUT_LABEL (file, fnname);\n-  fprintf (file, \"\\t.pdesc \");\n-  assemble_name (file, fnname);\n-  fprintf (file, \"..en,%s\\n\",\n-\t   alpha_procedure_type == PT_STACK ? \"stack\"\n-\t   : alpha_procedure_type == PT_REGISTER ? \"reg\" : \"null\");\n   alpha_need_linkage (fnname, 1);\n   text_section ();\n #endif\n@@ -7729,6 +7769,39 @@ alpha_expand_epilogue ()\n         }\n     }\n }\n+\f\n+#if TARGET_ABI_OPEN_VMS\n+#include <splay-tree.h>\n+\n+/* Structure to collect function names for final output\n+   in link section.  */\n+\n+enum links_kind {KIND_UNUSED, KIND_LOCAL, KIND_EXTERN};\n+enum reloc_kind {KIND_LINKAGE, KIND_CODEADDR};\n+\n+struct alpha_funcs\n+{\n+  int num;\n+  splay_tree links;\n+};\n+\n+struct alpha_links\n+{\n+  int num;\n+  rtx linkage;\n+  enum links_kind lkind;\n+  enum reloc_kind rkind;\n+};\n+\n+static splay_tree alpha_funcs_tree;\n+static splay_tree alpha_links_tree;\n+\n+static int mark_alpha_links_node\tPARAMS ((splay_tree_node, void *));\n+static void mark_alpha_links\t\tPARAMS ((void *));\n+static int alpha_write_one_linkage\tPARAMS ((splay_tree_node, void *));\n+\n+static int alpha_funcs_num;\n+#endif\n \n /* Output the rest of the textual info surrounding the epilogue.  */\n \n@@ -7747,6 +7820,10 @@ alpha_end_function (file, fnname, decl)\n     }\n   inside_function = FALSE;\n \n+#if TARGET_ABI_OPEN_VMS\n+  alpha_write_linkage (file, fnname, decl);\n+#endif\n+\n   /* Show that we know this function if it is called again.\n \n      Do this only for functions whose symbols bind locally.\n@@ -8931,25 +9008,6 @@ alpha_arg_info_reg_val (cum)\n   return GEN_INT (regval);\n }\n \f\n-#include <splay-tree.h>\n-\n-/* Structure to collect function names for final output\n-   in link section.  */\n-\n-enum links_kind {KIND_UNUSED, KIND_LOCAL, KIND_EXTERN};\n-\n-struct alpha_links\n-{\n-  rtx linkage;\n-  enum links_kind kind;\n-};\n-\n-static splay_tree alpha_links;\n-\n-static int mark_alpha_links_node\tPARAMS ((splay_tree_node, void *));\n-static void mark_alpha_links\t\tPARAMS ((void *));\n-static int alpha_write_one_linkage\tPARAMS ((splay_tree_node, void *));\n-\n /* Protect alpha_links from garbage collection.  */\n \n static int\n@@ -8983,46 +9041,67 @@ alpha_need_linkage (name, is_local)\n {\n   splay_tree_node node;\n   struct alpha_links *al;\n+  struct alpha_funcs *cfaf;\n \n   if (name[0] == '*')\n     name++;\n \n-  if (alpha_links)\n+  if (is_local)\n+    {\n+      alpha_funcs_tree = splay_tree_new\n+\t((splay_tree_compare_fn) splay_tree_compare_pointers, \n+\t (splay_tree_delete_key_fn) free,\n+\t (splay_tree_delete_key_fn) free);\n+    \n+      cfaf = (struct alpha_funcs *) xmalloc (sizeof (struct alpha_funcs));\n+\n+      cfaf->links = 0;\n+      cfaf->num = ++alpha_funcs_num;\n+\n+      splay_tree_insert (alpha_funcs_tree,\n+\t\t\t (splay_tree_key) current_function_decl,\n+\t\t\t (splay_tree_value) cfaf);\n+    \n+    }\n+\n+  if (alpha_links_tree)\n     {\n       /* Is this name already defined?  */\n \n-      node = splay_tree_lookup (alpha_links, (splay_tree_key) name);\n+      node = splay_tree_lookup (alpha_links_tree, (splay_tree_key) name);\n       if (node)\n \t{\n \t  al = (struct alpha_links *) node->value;\n \t  if (is_local)\n \t    {\n \t      /* Defined here but external assumed.  */\n-\t      if (al->kind == KIND_EXTERN)\n-\t\tal->kind = KIND_LOCAL;\n+\t      if (al->lkind == KIND_EXTERN)\n+\t\tal->lkind = KIND_LOCAL;\n \t    }\n \t  else\n \t    {\n \t      /* Used here but unused assumed.  */\n-\t      if (al->kind == KIND_UNUSED)\n-\t\tal->kind = KIND_LOCAL;\n+\t      if (al->lkind == KIND_UNUSED)\n+\t\tal->lkind = KIND_LOCAL;\n \t    }\n \t  return al->linkage;\n \t}\n     }\n   else\n     {\n-      alpha_links = splay_tree_new ((splay_tree_compare_fn) strcmp, \n-\t\t\t\t    (splay_tree_delete_key_fn) free,\n-\t\t\t\t    (splay_tree_delete_key_fn) free);\n-      ggc_add_root (&alpha_links, 1, 1, mark_alpha_links);\n+      alpha_links_tree = splay_tree_new\n+\t((splay_tree_compare_fn) strcmp, \n+\t (splay_tree_delete_key_fn) free,\n+\t (splay_tree_delete_key_fn) free);\n+\n+      ggc_add_root (&alpha_links_tree, 1, 1, mark_alpha_links);\n     }\n \n   al = (struct alpha_links *) xmalloc (sizeof (struct alpha_links));\n   name = xstrdup (name);\n \n   /* Assume external if no definition.  */\n-  al->kind = (is_local ? KIND_UNUSED : KIND_EXTERN);\n+  al->lkind = (is_local ? KIND_UNUSED : KIND_EXTERN);\n \n   /* Ensure we have an IDENTIFIER so assemble_name can mark it used.  */\n   get_identifier (name);\n@@ -9038,50 +9117,165 @@ alpha_need_linkage (name, is_local)\n \t\t\t\t      ggc_alloc_string (linksym, name_len + 5));\n   }\n \n-  splay_tree_insert (alpha_links, (splay_tree_key) name,\n+  splay_tree_insert (alpha_links_tree, (splay_tree_key) name,\n \t\t     (splay_tree_value) al);\n \n   return al->linkage;\n }\n \n+rtx\n+alpha_use_linkage (linkage, cfundecl, lflag, rflag)\n+     rtx linkage;\n+     tree cfundecl;\n+     int lflag;\n+     int rflag;\n+{\n+  splay_tree_node cfunnode;\n+  struct alpha_funcs *cfaf;\n+  struct alpha_links *al;\n+  const char *name = XSTR (linkage, 0);\n+\n+  cfaf = (struct alpha_funcs *) 0;\n+  al = (struct alpha_links *) 0;\n+\n+  cfunnode = splay_tree_lookup (alpha_funcs_tree, (splay_tree_key) cfundecl);\n+  cfaf = (struct alpha_funcs *) cfunnode->value;\n+\n+  if (cfaf->links)\n+    {\n+      splay_tree_node lnode;\n+\n+      /* Is this name already defined?  */\n+\n+      lnode = splay_tree_lookup (cfaf->links, (splay_tree_key) name);\n+      if (lnode)\n+\tal = (struct alpha_links *) lnode->value;\n+    }\n+  else\n+    {\n+      cfaf->links = splay_tree_new\n+\t((splay_tree_compare_fn) strcmp,\n+\t (splay_tree_delete_key_fn) free,\n+\t (splay_tree_delete_key_fn) free);\n+      ggc_add_root (&cfaf->links, 1, 1, mark_alpha_links);\n+    }\n+\n+  if (!al)\n+    {\n+      size_t name_len;\n+      size_t buflen;\n+      char buf [512];\n+      char *linksym;\n+      splay_tree_node node = 0;\n+      struct alpha_links *anl;\n+\n+      if (name[0] == '*')\n+\tname++;\n+\n+      name_len = strlen (name);\n+\n+      al = (struct alpha_links *) xmalloc (sizeof (struct alpha_links));\n+      al->num = cfaf->num;\n+\n+      node = splay_tree_lookup (alpha_links_tree, (splay_tree_key) name);\n+      if (node)\n+\t{\n+\t  anl = (struct alpha_links *) node->value;\n+\t  al->lkind = anl->lkind;\n+\t}\n+\n+      sprintf (buf, \"$%d..%s..lk\", cfaf->num, name);\n+      buflen = strlen (buf);\n+      linksym = alloca (buflen + 1);\n+      memcpy (linksym, buf, buflen + 1);\n+\n+      al->linkage = gen_rtx_SYMBOL_REF\n+\t(Pmode, ggc_alloc_string (linksym, buflen + 1));\n+\n+      splay_tree_insert (cfaf->links, (splay_tree_key) name,\n+\t\t\t (splay_tree_value) al);\n+    }\n+\n+  if (rflag)\n+    al->rkind = KIND_CODEADDR;\n+  else\n+    al->rkind = KIND_LINKAGE;\n+      \n+  if (lflag)\n+    return gen_rtx_MEM (Pmode, plus_constant (al->linkage, 8));\n+  else\n+    return al->linkage;\n+}\n+\n static int\n alpha_write_one_linkage (node, data)\n      splay_tree_node node;\n      void *data;\n {\n   const char *const name = (const char *) node->key;\n-  struct alpha_links *links = (struct alpha_links *) node->value;\n+  struct alpha_links *link = (struct alpha_links *) node->value;\n   FILE *stream = (FILE *) data;\n \n-  if (links->kind == KIND_UNUSED\n-      || ! TREE_SYMBOL_REFERENCED (get_identifier (name)))\n-    return 0;\n-\n-  fprintf (stream, \"$%s..lk:\\n\", name);\n-  if (links->kind == KIND_LOCAL)\n+  fprintf (stream, \"$%d..%s..lk:\\n\", link->num, name);\n+  if (link->rkind == KIND_CODEADDR)\n     {\n-      /* Local and used, build linkage pair.  */\n-      fprintf (stream, \"\\t.quad %s..en\\n\", name);\n-      fprintf (stream, \"\\t.quad %s\\n\", name);\n+      if (link->lkind == KIND_LOCAL)\n+\t{\n+\t  /* Local and used */\n+\t  fprintf (stream, \"\\t.quad %s..en\\n\", name);\n+\t}\n+      else\n+\t{\n+\t  /* External and used, request code address.  */\n+\t  fprintf (stream, \"\\t.code_address %s\\n\", name);\n+\t}\n     }\n   else\n     {\n-      /* External and used, request linkage pair.  */\n-      fprintf (stream, \"\\t.linkage %s\\n\", name);\n+      if (link->lkind == KIND_LOCAL)\n+\t{\n+\t  /* Local and used, build linkage pair.  */\n+\t  fprintf (stream, \"\\t.quad %s..en\\n\", name);\n+\t  fprintf (stream, \"\\t.quad %s\\n\", name);\n+\t}\n+      else\n+\t{\n+\t  /* External and used, request linkage pair.  */\n+\t  fprintf (stream, \"\\t.linkage %s\\n\", name);\n+\t}\n     }\n \n   return 0;\n }\n \n-void\n-alpha_write_linkage (stream)\n-    FILE *stream;\n+static void\n+alpha_write_linkage (stream, funname, fundecl)\n+     FILE *stream;\n+     const char *funname;\n+     tree fundecl;\n {\n-  if (alpha_links)\n+  splay_tree_node node;\n+  struct alpha_funcs *func;\n+\n+  link_section ();\n+  fprintf (stream, \"\\t.align 3\\n\");\n+  node = splay_tree_lookup (alpha_funcs_tree, (splay_tree_key) fundecl);\n+  func = (struct alpha_funcs *) node->value;\n+\n+  fputs (\"\\t.name \", stream);\n+  assemble_name (stream, funname);\n+  fputs (\"..na\\n\", stream);\n+  ASM_OUTPUT_LABEL (stream, funname);\n+  fprintf (stream, \"\\t.pdesc \");\n+  assemble_name (stream, funname);\n+  fprintf (stream, \"..en,%s\\n\",\n+\t   alpha_procedure_type == PT_STACK ? \"stack\"\n+\t   : alpha_procedure_type == PT_REGISTER ? \"reg\" : \"null\");\n+\n+  if (func->links)\n     {\n-      readonly_data_section ();\n-      fprintf (stream, \"\\t.align 3\\n\");\n-      splay_tree_foreach (alpha_links, alpha_write_one_linkage, stream);\n+      splay_tree_foreach (func->links, alpha_write_one_linkage, stream);\n+      /* splay_tree_delete (func->links); */\n     }\n }\n \n@@ -9174,6 +9368,16 @@ alpha_need_linkage (name, is_local)\n   return NULL_RTX;\n }\n \n+rtx\n+alpha_use_linkage (linkage, cfundecl, lflag, rflag)\n+     rtx linkage ATTRIBUTE_UNUSED;\n+     tree cfundecl ATTRIBUTE_UNUSED;\n+     int lflag ATTRIBUTE_UNUSED;\n+     int rflag ATTRIBUTE_UNUSED;\n+{\n+  return NULL_RTX;\n+}\n+\n #endif /* TARGET_ABI_OPEN_VMS */\n \f\n #if TARGET_ABI_UNICOSMK"}, {"sha": "7e3b3754c0998918b3fc489d519903efba11041e", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1330f7d5b62599b069ae72d99a0fe68d65850bc1/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1330f7d5b62599b069ae72d99a0fe68d65850bc1/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=1330f7d5b62599b069ae72d99a0fe68d65850bc1", "patch": "@@ -4429,11 +4429,9 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n   emit_move_insn (gen_rtx_REG (DImode, 25), operands[1]);\n   if (GET_CODE (operands[0]) == SYMBOL_REF)\n     {\n-      rtx linkage = alpha_need_linkage (XSTR (operands[0], 0), 0);\n+      alpha_need_linkage (XSTR (operands[0], 0), 0);\n \n-      emit_move_insn (gen_rtx_REG (Pmode, 26), gen_rtx_MEM (Pmode, linkage));\n-      operands[2]\n-\t= validize_mem (gen_rtx_MEM (Pmode, plus_constant (linkage, 8)));\n+      operands[2] = const0_rtx;\n     }\n   else\n     {\n@@ -4531,11 +4529,9 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n   emit_move_insn (gen_rtx_REG (DImode, 25), operands[2]);\n   if (GET_CODE (operands[1]) == SYMBOL_REF)\n     {\n-      rtx linkage = alpha_need_linkage (XSTR (operands[1], 0), 0);\n+      alpha_need_linkage (XSTR (operands[1], 0), 0);\n \n-      emit_move_insn (gen_rtx_REG (Pmode, 26), gen_rtx_MEM (Pmode, linkage));\n-      operands[3]\n-\t= validize_mem (gen_rtx_MEM (Pmode, plus_constant (linkage, 8)));\n+      operands[3] = const0_rtx;\n     }\n   else\n     {\n@@ -4720,17 +4716,31 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"*,*,12\")])\n \n+; GAS relies on the order and position of instructions output below in order\n+; to generate relocs for VMS link to potentially optimize the call.\n+; Please do not molest.\n (define_insn \"*call_vms_1\"\n   [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"r,s\"))\n \t (match_operand 1 \"\" \"\"))\n-   (use (match_operand:DI 2 \"nonimmediate_operand\" \"r,m\"))\n+   (use (match_operand:DI 2 \"nonmemory_operand\" \"r,n\"))\n    (use (reg:DI 25))\n    (use (reg:DI 26))\n    (clobber (reg:DI 27))]\n   \"TARGET_ABI_OPEN_VMS\"\n-  \"@\n-   mov %2,$27\\;jsr $26,0\\;ldq $27,0($29)\n-   ldq $27,%2\\;jsr $26,%0\\;ldq $27,0($29)\"\n+  \"*\n+{\n+  switch (which_alternative)\n+    {\n+    case 0:\n+   \treturn \\\"mov %2,$27\\;jsr $26,0\\;ldq $27,0($29)\\\";\n+    case 1:\n+\toperands [2] = alpha_use_linkage (operands [0], cfun->decl, 1, 0);\n+\toperands [3] = alpha_use_linkage (operands [0], cfun->decl, 0, 0);\n+   \treturn \\\"ldq $26,%3\\;ldq $27,%2\\;jsr $26,%0\\;ldq $27,0($29)\\\";\n+    default:\n+      abort();\n+    }\n+}\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"12,16\")])\n \n@@ -7896,18 +7906,32 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"*,*,12\")])\n \n+; GAS relies on the order and position of instructions output below in order\n+; to generate relocs for VMS link to potentially optimize the call.\n+; Please do not molest.\n (define_insn \"*call_value_vms_1\"\n   [(set (match_operand 0 \"\" \"\")\n \t(call (mem:DI (match_operand:DI 1 \"call_operand\" \"r,s\"))\n \t      (match_operand 2 \"\" \"\")))\n-   (use (match_operand:DI 3 \"nonimmediate_operand\" \"r,m\"))\n+   (use (match_operand:DI 3 \"nonmemory_operand\" \"r,n\"))\n    (use (reg:DI 25))\n    (use (reg:DI 26))\n    (clobber (reg:DI 27))]\n   \"TARGET_ABI_OPEN_VMS\"\n-  \"@\n-   mov %3,$27\\;jsr $26,0\\;ldq $27,0($29)\n-   ldq $27,%3\\;jsr $26,%1\\;ldq $27,0($29)\"\n+  \"*\n+{\n+  switch (which_alternative)\n+    {\n+    case 0:\n+   \treturn \\\"mov %3,$27\\;jsr $26,0\\;ldq $27,0($29)\\\";\n+    case 1:\n+\toperands [3] = alpha_use_linkage (operands [1], cfun->decl, 1, 0);\n+\toperands [4] = alpha_use_linkage (operands [1], cfun->decl, 0, 0);\n+   \treturn \\\"ldq $26,%4\\;ldq $27,%3\\;jsr $26,%1\\;ldq $27,0($29)\\\";\n+    default:\n+      abort();\n+    }\n+}\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"12,16\")])\n "}, {"sha": "b0da28a3cdf575bdb36facd4f3cf74047459f8ca", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1330f7d5b62599b069ae72d99a0fe68d65850bc1/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1330f7d5b62599b069ae72d99a0fe68d65850bc1/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=1330f7d5b62599b069ae72d99a0fe68d65850bc1", "patch": "@@ -300,8 +300,6 @@ extern void literals_section\tPARAMS ((void));\n #define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE) \\\n   fprintf (FILE, \"\\t.quad $L%d\\n\", (VALUE))\n \n-#define ASM_FILE_END(FILE) alpha_write_linkage (FILE);\n-\n #undef CASE_VECTOR_MODE\n #define CASE_VECTOR_MODE DImode\n #undef CASE_VECTOR_PC_RELATIVE"}]}