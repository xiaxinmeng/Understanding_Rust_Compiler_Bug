{"sha": "9cf3ae46c17783b91557dcd753b7ff25710b5562", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNmM2FlNDZjMTc3ODNiOTE1NTdkY2Q3NTNiN2ZmMjU3MTBiNTU2Mg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1997-12-12T06:23:19Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-12-12T06:23:19Z"}, "message": "m68k.h (GO_IF_LEGITIMATE_ADDRESS): No longer cater to horribly old and broken Sun3 assemblers.\n\n        * m68k.h (GO_IF_LEGITIMATE_ADDRESS): No longer cater to horribly\n        old and broken Sun3 assemblers.  Newer versions handle large\n        offsets correctly as does the GNU assembler.\n\nCo-Authored-By: Toon Moene <toon@moene.indiv.nluug.nl>\n\nFrom-SVN: r17058", "tree": {"sha": "d4aef45dbe3a1b9201da4b10e6736298c6d8d4dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4aef45dbe3a1b9201da4b10e6736298c6d8d4dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cf3ae46c17783b91557dcd753b7ff25710b5562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cf3ae46c17783b91557dcd753b7ff25710b5562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cf3ae46c17783b91557dcd753b7ff25710b5562", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cf3ae46c17783b91557dcd753b7ff25710b5562/comments", "author": null, "committer": null, "parents": [{"sha": "7cc273ade8609756edc2d4f9f58975fc90beb9e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cc273ade8609756edc2d4f9f58975fc90beb9e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cc273ade8609756edc2d4f9f58975fc90beb9e8"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "459dd59236eb8c61e925a36469fa30213e3de905", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf3ae46c17783b91557dcd753b7ff25710b5562/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf3ae46c17783b91557dcd753b7ff25710b5562/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9cf3ae46c17783b91557dcd753b7ff25710b5562", "patch": "@@ -1,3 +1,10 @@\n+Thu Dec 11 23:25:23 1997  Jeffrey A Law  (law@cygnus.com)\n+\t\t\t  Toon Moene  (toon@moene.indiv.nluug.nl)\n+\n+\t* m68k.h (GO_IF_LEGITIMATE_ADDRESS): No longer cater to horribly\n+\told and broken Sun3 assemblers.  Newer versions handle large\n+\toffsets correctly as does the GNU assembler.\n+\n Thu Dec 11 23:06:48 1997  H.J. Lu  (hjl@gnu.ai.mit.edu)\n \n \t* objc/objc-act.c (lang_report_error_function): Disable."}, {"sha": "d7765426566eb8c30c3af3fcd610eb737075886b", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf3ae46c17783b91557dcd753b7ff25710b5562/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf3ae46c17783b91557dcd753b7ff25710b5562/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=9cf3ae46c17783b91557dcd753b7ff25710b5562", "patch": "@@ -1409,7 +1409,7 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n    || (GET_CODE (X) == PLUS\t\t\t\t\t\t\\\n        && LEGITIMATE_BASE_REG_P (XEXP (X, 0))\t\t\t\t\\\n        && GET_CODE (XEXP (X, 1)) == CONST_INT\t\t\t\t\\\n-       && ((unsigned) INTVAL (XEXP (X, 1)) + 0x8000) < 0x10000)\t\t\\\n+       && (TARGET_68020 || (unsigned) INTVAL (XEXP (X, 1)) + 0x8000) < 0x10000)\t\t\\\n    || (GET_CODE (X) == PLUS && XEXP (X, 0) == pic_offset_table_rtx \t\\\n        && flag_pic && GET_CODE (XEXP (X, 1)) == SYMBOL_REF)\t\t\\\n    || (GET_CODE (X) == PLUS && XEXP (X, 0) == pic_offset_table_rtx \t\\\n@@ -1448,10 +1448,10 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n { GO_IF_INDEXING (X, ADDR);\t\t\t\t\t\t\\\n   if (GET_CODE (X) == PLUS)\t\t\t\t\t\t\\\n     { if (GET_CODE (XEXP (X, 1)) == CONST_INT\t\t\t\t\\\n-\t  && (unsigned) INTVAL (XEXP (X, 1)) + 0x80 < 0x100)\t\t\\\n+\t  && (TARGET_68020 || (unsigned) INTVAL (XEXP (X, 1)) + 0x80 < 0x100))\t\t\\\n \t{ rtx go_temp = XEXP (X, 0); GO_IF_INDEXING (go_temp, ADDR); }\t\\\n       if (GET_CODE (XEXP (X, 0)) == CONST_INT\t\t\t\t\\\n-\t  && (unsigned) INTVAL (XEXP (X, 0)) + 0x80 < 0x100)\t\t\\\n+\t  && (TARGET_68020 || (unsigned) INTVAL (XEXP (X, 0)) + 0x80 < 0x100))\t\t\\\n \t{ rtx go_temp = XEXP (X, 1); GO_IF_INDEXING (go_temp, ADDR); } } }\n \n #define LEGITIMATE_INDEX_REG_P(X)   \\"}]}