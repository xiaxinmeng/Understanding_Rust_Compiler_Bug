{"sha": "d4bc3829f139406a9b8d238d834fb1580f68e1ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRiYzM4MjlmMTM5NDA2YTliOGQyMzhkODM0ZmIxNTgwZjY4ZTFlYw==", "commit": {"author": {"name": "Julia Koval", "email": "julia.koval@intel.com", "date": "2017-11-07T19:11:08Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-11-07T19:11:08Z"}, "message": "Fix SSE bits dependencies.\n\ngcc/\n\tPR target/82812\n\t* common/config/i386/i386-common.c\n\t(OPTION_MASK_ISA_GENERAL_REGS_ONLY_UNSET): Remove MPX from flag.\n\t(ix86_handle_option): Move MPX to isa_flags2 and GFNI to isa_flags.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Ditto.\n\t* config/i386/i386.opt: Ditto.\n\t* config/i386/i386.c (ix86_target_string): Ditto.\n\t(ix86_option_override_internal): Ditto.\n\t(ix86_init_mpx_builtins): Move MPX to args2.\n\t(ix86_expand_builtin): Special handling for OPTION_MASK_ISA_GFNI.\n\t* config/i386/i386-builtin.def (__builtin_ia32_vgf2p8affineinvqb_v64qi,\n\t__builtin_ia32_vgf2p8affineinvqb_v64qi_mask,\n\t__builtin_ia32_vgf2p8affineinvqb_v32qi,\n\t__builtin_ia32_vgf2p8affineinvqb_v32qi_mask,\n\t__builtin_ia32_vgf2p8affineinvqb_v16qi,\n\t__builtin_ia32_vgf2p8affineinvqb_v16qi_mask): Move to ARGS array.\n\nFrom-SVN: r254507", "tree": {"sha": "e451bb0175417322e852a2d7ca52ff5f2bbc67cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e451bb0175417322e852a2d7ca52ff5f2bbc67cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4bc3829f139406a9b8d238d834fb1580f68e1ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4bc3829f139406a9b8d238d834fb1580f68e1ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4bc3829f139406a9b8d238d834fb1580f68e1ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4bc3829f139406a9b8d238d834fb1580f68e1ec/comments", "author": {"login": "vaalfreja", "id": 5216345, "node_id": "MDQ6VXNlcjUyMTYzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5216345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaalfreja", "html_url": "https://github.com/vaalfreja", "followers_url": "https://api.github.com/users/vaalfreja/followers", "following_url": "https://api.github.com/users/vaalfreja/following{/other_user}", "gists_url": "https://api.github.com/users/vaalfreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaalfreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaalfreja/subscriptions", "organizations_url": "https://api.github.com/users/vaalfreja/orgs", "repos_url": "https://api.github.com/users/vaalfreja/repos", "events_url": "https://api.github.com/users/vaalfreja/events{/privacy}", "received_events_url": "https://api.github.com/users/vaalfreja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8dcc3a67dc8dca69d7f03f6e9a6f2bec141b103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8dcc3a67dc8dca69d7f03f6e9a6f2bec141b103", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8dcc3a67dc8dca69d7f03f6e9a6f2bec141b103"}], "stats": {"total": 78, "additions": 50, "deletions": 28}, "files": [{"sha": "29c3349caec38a9c6f6cb41b4fa260fa87424de4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4bc3829f139406a9b8d238d834fb1580f68e1ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4bc3829f139406a9b8d238d834fb1580f68e1ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4bc3829f139406a9b8d238d834fb1580f68e1ec", "patch": "@@ -1,3 +1,22 @@\n+2017-11-07  Julia Koval  <julia.koval@intel.com>\n+\n+\tPR target/82812\n+\t* common/config/i386/i386-common.c\n+\t(OPTION_MASK_ISA_GENERAL_REGS_ONLY_UNSET): Remove MPX from flag.\n+\t(ix86_handle_option): Move MPX to isa_flags2 and GFNI to isa_flags.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Ditto.\n+\t* config/i386/i386.opt: Ditto.\n+\t* config/i386/i386.c (ix86_target_string): Ditto.\n+\t(ix86_option_override_internal): Ditto.\n+\t(ix86_init_mpx_builtins): Move MPX to args2.\n+\t(ix86_expand_builtin): Special handling for OPTION_MASK_ISA_GFNI.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_vgf2p8affineinvqb_v64qi,\n+\t__builtin_ia32_vgf2p8affineinvqb_v64qi_mask,\n+\t__builtin_ia32_vgf2p8affineinvqb_v32qi,\n+\t__builtin_ia32_vgf2p8affineinvqb_v32qi_mask,\n+\t__builtin_ia32_vgf2p8affineinvqb_v16qi,\n+\t__builtin_ia32_vgf2p8affineinvqb_v16qi_mask): Move to ARGS array.\n+\n 2017-11-07  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/80425"}, {"sha": "acad2485110ec6a5b1cd10a81dd455e2853dbf4a", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4bc3829f139406a9b8d238d834fb1580f68e1ec/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4bc3829f139406a9b8d238d834fb1580f68e1ec/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=d4bc3829f139406a9b8d238d834fb1580f68e1ec", "patch": "@@ -242,8 +242,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #define OPTION_MASK_ISA_GENERAL_REGS_ONLY_UNSET \\\n   (OPTION_MASK_ISA_MMX_UNSET \\\n-   | OPTION_MASK_ISA_SSE_UNSET \\\n-   | OPTION_MASK_ISA_MPX)\n+   | OPTION_MASK_ISA_SSE_UNSET)\n \n /* Implement TARGET_HANDLE_OPTION.  */\n \n@@ -265,8 +264,12 @@ ix86_handle_option (struct gcc_options *opts,\n \t     general registers are allowed.  */\n \t  opts->x_ix86_isa_flags\n \t    &= ~OPTION_MASK_ISA_GENERAL_REGS_ONLY_UNSET;\n+\t  opts->x_ix86_isa_flags2\n+\t    &= ~OPTION_MASK_ISA_MPX;\n \t  opts->x_ix86_isa_flags_explicit\n \t    |= OPTION_MASK_ISA_GENERAL_REGS_ONLY_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit\n+\t    |= OPTION_MASK_ISA_MPX;\n \n \t  opts->x_target_flags &= ~MASK_80387;\n \t}\n@@ -493,13 +496,13 @@ ix86_handle_option (struct gcc_options *opts,\n     case OPT_mgfni:\n       if (value)\n \t{\n-\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_GFNI_SET;\n-\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_GFNI_SET;\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_GFNI_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_GFNI_SET;\n \t}\n       else\n \t{\n-\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_GFNI_UNSET;\n-\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_GFNI_UNSET;\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_GFNI_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_GFNI_UNSET;\n \t}\n       return true;\n "}, {"sha": "3cf5eaedd4073442acbe73b866cc11037e83df22", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4bc3829f139406a9b8d238d834fb1580f68e1ec/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4bc3829f139406a9b8d238d834fb1580f68e1ec/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=d4bc3829f139406a9b8d238d834fb1580f68e1ec", "patch": "@@ -2394,6 +2394,14 @@ BDESC (OPTION_MASK_ISA_AVX512VBMI | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_\n BDESC (OPTION_MASK_ISA_AVX512VBMI | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vpermi2varv32qi3_mask, \"__builtin_ia32_vpermi2varqi256_mask\", IX86_BUILTIN_VPERMI2VARQI256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_V32QI_USI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vpermi2varv16qi3_mask, \"__builtin_ia32_vpermi2varqi128_mask\", IX86_BUILTIN_VPERMI2VARQI128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_V16QI_UHI)\n \n+/* GFNI */\n+BDESC (OPTION_MASK_ISA_GFNI, CODE_FOR_vgf2p8affineinvqb_v64qi, \"__builtin_ia32_vgf2p8affineinvqb_v64qi\", IX86_BUILTIN_VGF2P8AFFINEINVQB512, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_INT)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vgf2p8affineinvqb_v64qi_mask, \"__builtin_ia32_vgf2p8affineinvqb_v64qi_mask\", IX86_BUILTIN_VGF2P8AFFINEINVQB512MASK, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_INT_V64QI_UDI)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX, CODE_FOR_vgf2p8affineinvqb_v32qi, \"__builtin_ia32_vgf2p8affineinvqb_v32qi\", IX86_BUILTIN_VGF2P8AFFINEINVQB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_INT)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vgf2p8affineinvqb_v32qi_mask, \"__builtin_ia32_vgf2p8affineinvqb_v32qi_mask\", IX86_BUILTIN_VGF2P8AFFINEINVQB256MASK, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_INT_V32QI_USI)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_SSE, CODE_FOR_vgf2p8affineinvqb_v16qi, \"__builtin_ia32_vgf2p8affineinvqb_v16qi\", IX86_BUILTIN_VGF2P8AFFINEINVQB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_INT)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_SSE, CODE_FOR_vgf2p8affineinvqb_v16qi_mask, \"__builtin_ia32_vgf2p8affineinvqb_v16qi_mask\", IX86_BUILTIN_VGF2P8AFFINEINVQB128MASK, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_INT_V16QI_UHI)\n+\n /* Builtins with rounding support.  */\n BDESC_END (ARGS, ROUND_ARGS)\n \n@@ -2588,14 +2596,6 @@ BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ, CODE_FOR_vpopcountv8di_mask, \"__builtin_\n \n /* RDPID */\n BDESC (OPTION_MASK_ISA_RDPID, CODE_FOR_rdpid, \"__builtin_ia32_rdpid\", IX86_BUILTIN_RDPID, UNKNOWN, (int) UNSIGNED_FTYPE_VOID)\n-\n-/* GFNI */\n-BDESC (OPTION_MASK_ISA_GFNI, CODE_FOR_vgf2p8affineinvqb_v64qi, \"__builtin_ia32_vgf2p8affineinvqb_v64qi\", IX86_BUILTIN_VGF2P8AFFINEINVQB512, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_INT)\n-BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vgf2p8affineinvqb_v64qi_mask, \"__builtin_ia32_vgf2p8affineinvqb_v64qi_mask\", IX86_BUILTIN_VGF2P8AFFINEINVQB512MASK, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_INT_V64QI_UDI)\n-BDESC (OPTION_MASK_ISA_GFNI, CODE_FOR_vgf2p8affineinvqb_v32qi, \"__builtin_ia32_vgf2p8affineinvqb_v32qi\", IX86_BUILTIN_VGF2P8AFFINEINVQB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_INT)\n-BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vgf2p8affineinvqb_v32qi_mask, \"__builtin_ia32_vgf2p8affineinvqb_v32qi_mask\", IX86_BUILTIN_VGF2P8AFFINEINVQB256MASK, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_INT_V32QI_USI)\n-BDESC (OPTION_MASK_ISA_GFNI, CODE_FOR_vgf2p8affineinvqb_v16qi, \"__builtin_ia32_vgf2p8affineinvqb_v16qi\", IX86_BUILTIN_VGF2P8AFFINEINVQB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_INT)\n-BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vgf2p8affineinvqb_v16qi_mask, \"__builtin_ia32_vgf2p8affineinvqb_v16qi_mask\", IX86_BUILTIN_VGF2P8AFFINEINVQB128MASK, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_INT_V16QI_UHI)\n BDESC_END (ARGS2, MPX)\n \n /* Builtins for MPX.  */"}, {"sha": "18042cd10a84128a95791605d8549472b3d61941", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4bc3829f139406a9b8d238d834fb1580f68e1ec/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4bc3829f139406a9b8d238d834fb1580f68e1ec/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=d4bc3829f139406a9b8d238d834fb1580f68e1ec", "patch": "@@ -447,7 +447,7 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__XSAVEC__\");\n   if (isa_flag & OPTION_MASK_ISA_XSAVES)\n     def_or_undef (parse_in, \"__XSAVES__\");\n-  if (isa_flag & OPTION_MASK_ISA_MPX)\n+  if (isa_flag2 & OPTION_MASK_ISA_MPX)\n     def_or_undef (parse_in, \"__MPX__\");\n   if (isa_flag & OPTION_MASK_ISA_CLWB)\n     def_or_undef (parse_in, \"__CLWB__\");\n@@ -457,7 +457,7 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__PKU__\");\n   if (isa_flag2 & OPTION_MASK_ISA_RDPID)\n     def_or_undef (parse_in, \"__RDPID__\");\n-  if (isa_flag2 & OPTION_MASK_ISA_GFNI)\n+  if (isa_flag & OPTION_MASK_ISA_GFNI)\n     def_or_undef (parse_in, \"__GFNI__\");\n   if (isa_flag2 & OPTION_MASK_ISA_IBT)\n     {"}, {"sha": "c085a4efcd729aa660cb757e1f0f4cb8dc1b17a8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4bc3829f139406a9b8d238d834fb1580f68e1ec/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4bc3829f139406a9b8d238d834fb1580f68e1ec/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d4bc3829f139406a9b8d238d834fb1580f68e1ec", "patch": "@@ -2743,7 +2743,7 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n      ISAs come first.  Target string will be displayed in the same order.  */\n   static struct ix86_target_opts isa2_opts[] =\n   {\n-    { \"-mgfni\",\t\tOPTION_MASK_ISA_GFNI },\n+    { \"-mmpx\",\t\tOPTION_MASK_ISA_MPX },\n     { \"-mrdpid\",\tOPTION_MASK_ISA_RDPID },\n     { \"-msgx\",\t\tOPTION_MASK_ISA_SGX },\n     { \"-mavx5124vnniw\", OPTION_MASK_ISA_AVX5124VNNIW },\n@@ -2754,6 +2754,7 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n   };\n   static struct ix86_target_opts isa_opts[] =\n   {\n+    { \"-mgfni\",\t\tOPTION_MASK_ISA_GFNI },\n     { \"-mavx512vbmi\",\tOPTION_MASK_ISA_AVX512VBMI },\n     { \"-mavx512ifma\",\tOPTION_MASK_ISA_AVX512IFMA },\n     { \"-mavx512vl\",\tOPTION_MASK_ISA_AVX512VL },\n@@ -2811,7 +2812,6 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n     { \"-mlwp\",\t\tOPTION_MASK_ISA_LWP },\n     { \"-mhle\",\t\tOPTION_MASK_ISA_HLE },\n     { \"-mfxsr\",\t\tOPTION_MASK_ISA_FXSR },\n-    { \"-mmpx\",\t\tOPTION_MASK_ISA_MPX },\n     { \"-mclwb\",\t\tOPTION_MASK_ISA_CLWB }\n   };\n \n@@ -4079,8 +4079,8 @@ ix86_option_override_internal (bool main_args_p,\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_AVX512VL))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512VL;\n         if (processor_alias_table[i].flags & PTA_MPX\n-            && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_MPX))\n-          opts->x_ix86_isa_flags |= OPTION_MASK_ISA_MPX;\n+            && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA_MPX))\n+          opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_MPX;\n \tif (processor_alias_table[i].flags & PTA_AVX512VBMI\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_AVX512VBMI))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512VBMI;\n@@ -4123,10 +4123,10 @@ ix86_option_override_internal (bool main_args_p,\n \tbreak;\n       }\n \n-  if (TARGET_X32 && (opts->x_ix86_isa_flags & OPTION_MASK_ISA_MPX))\n+  if (TARGET_X32 && (opts->x_ix86_isa_flags2 & OPTION_MASK_ISA_MPX))\n     error (\"Intel MPX does not support x32\");\n \n-  if (TARGET_X32 && (ix86_isa_flags & OPTION_MASK_ISA_MPX))\n+  if (TARGET_X32 && (ix86_isa_flags2 & OPTION_MASK_ISA_MPX))\n     error (\"Intel MPX does not support x32\");\n \n   if (i == pta_size)\n@@ -30790,7 +30790,7 @@ ix86_init_mpx_builtins ()\n \tcontinue;\n \n       ftype = (enum ix86_builtin_func_type) d->flag;\n-      decl = def_builtin (d->mask, d->name, ftype, d->code);\n+      decl = def_builtin2 (d->mask, d->name, ftype, d->code);\n \n       /* With no leaf and nothrow flags for MPX builtins\n \t abnormal edges may follow its call when setjmp\n@@ -30823,7 +30823,7 @@ ix86_init_mpx_builtins ()\n \tcontinue;\n \n       ftype = (enum ix86_builtin_func_type) d->flag;\n-      decl = def_builtin_const (d->mask, d->name, ftype, d->code);\n+      decl = def_builtin_const2 (d->mask, d->name, ftype, d->code);\n \n       if (decl)\n \t{\n@@ -35178,10 +35178,10 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n      at all, -m64 is a whole TU option.  */\n   if (((ix86_builtins_isa[fcode].isa\n \t& ~(OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_MMX\n-\t    | OPTION_MASK_ISA_64BIT))\n+\t    | OPTION_MASK_ISA_64BIT | OPTION_MASK_ISA_GFNI))\n        && !(ix86_builtins_isa[fcode].isa\n \t    & ~(OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_MMX\n-\t\t| OPTION_MASK_ISA_64BIT)\n+\t\t| OPTION_MASK_ISA_64BIT | OPTION_MASK_ISA_GFNI)\n \t    & ix86_isa_flags))\n       || ((ix86_builtins_isa[fcode].isa & OPTION_MASK_ISA_AVX512VL)\n \t  && !(ix86_isa_flags & OPTION_MASK_ISA_AVX512VL))"}, {"sha": "b1bcb396935479bbe9d6e83a1520c4ede26d5ad1", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4bc3829f139406a9b8d238d834fb1580f68e1ec/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4bc3829f139406a9b8d238d834fb1580f68e1ec/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=d4bc3829f139406a9b8d238d834fb1580f68e1ec", "patch": "@@ -754,7 +754,7 @@ Target Report Mask(ISA_RDPID) Var(ix86_isa_flags2) Save\n Support RDPID built-in functions and code generation.\n \n mgfni\n-Target Report Mask(ISA_GFNI) Var(ix86_isa_flags2) Save\n+Target Report Mask(ISA_GFNI) Var(ix86_isa_flags) Save\n Support GFNI built-in functions and code generation.\n \n mbmi\n@@ -903,7 +903,7 @@ Target Report Mask(ISA_RTM) Var(ix86_isa_flags) Save\n Support RTM built-in functions and code generation.\n \n mmpx\n-Target Report Mask(ISA_MPX) Var(ix86_isa_flags) Save\n+Target Report Mask(ISA_MPX) Var(ix86_isa_flags2) Save\n Support MPX code generation.\n \n mmwaitx"}]}