{"sha": "94938aec1ab1996c4554fd3703708052144a784b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ5MzhhZWMxYWIxOTk2YzQ1NTRmZDM3MDM3MDgwNTIxNDRhNzg0Yg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-05-10T15:18:33Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-05-10T15:18:33Z"}, "message": "re PR libstdc++/54577 (deque<T>::erase() still takes iterator instead of const_iterator)\n\n2013-05-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/54577\n\t* include/bits/stl_deque.h (erase): Fix signatures in C++11 mode.\n\t(_Deque_iterator<>::_M_const_cast): Add.\n\t(deque<>::_M_erase): Declare.\n\t* include/bits/deque.tcc: ... and define.\n\t* include/bits/stl_list.h (erase): Fix signatures in C++11 mode.\n\t(_List_const_iterator<>::_M_const_cast): Add.\n\t* include/bits/list.tcc (erase (iterator)): Fix.\n\t* include/bits/stl_iterator.h (__normal_iterator<>::_M_const_cast):\n\tAdd; include <ext/cast.h>.\n\t* include/bits/stl_vector.h (erase): Fix signatures in C++11 mode.\n\t(vector<>::_M_erase): Declare.\n\t* include/bits/stl_bvector.h: Likewise.\n\t* include/bits/vector.tcc (vector<>::_M_erase): Define.\n\t* include/ext/vstring.h (erase): Fix signatures in C++11 mode.\n\t* include/debug/deque: Adjust.\n\t* include/debug/list: Likewise.\n\t* include/debug/vector: Likewise.\n\t* include/profile/deque: Likewise.\n\t* include/profile/list: Likewise.\n\t* include/profile/vector: Likewise.\n\t* testsuite/util/exception/safety.h (erase_base<deque>,\n\terase_base<deque>, erase_base<vector>): Remove.\n\t(erase_base<__versa_string>): Update.\n\t* testsuite/ext/vstring/modifiers/char/54577.cc: New.\n\t* testsuite/ext/vstring/modifiers/wchar_t/54577.cc: Likewise.\n\t* testsuite/23_containers/deque/modifiers/erase/54577.cc: Likewise.\n\t* testsuite/23_containers/list/modifiers/erase/54577.cc: Likewise.\n\t* testsuite/23_containers/vector/bool/modifiers/erase/54577.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/modifiers/erase/54577.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc:\n\tAdjust dg-error line numbers.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\nFrom-SVN: r198790", "tree": {"sha": "733216f9d05ef2101674b95a354adc2ed369f93c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/733216f9d05ef2101674b95a354adc2ed369f93c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94938aec1ab1996c4554fd3703708052144a784b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94938aec1ab1996c4554fd3703708052144a784b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94938aec1ab1996c4554fd3703708052144a784b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94938aec1ab1996c4554fd3703708052144a784b/comments", "author": null, "committer": null, "parents": [{"sha": "341427fa2da0894f3f9d6966aa802ad237bffe3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/341427fa2da0894f3f9d6966aa802ad237bffe3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/341427fa2da0894f3f9d6966aa802ad237bffe3a"}], "stats": {"total": 576, "additions": 480, "deletions": 96}, "files": [{"sha": "31d9ae286cd209f1fe4b312ea523394a3a501fa7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -1,3 +1,61 @@\n+2013-05-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/54577\n+\t* include/bits/stl_deque.h (erase): Fix signatures in C++11 mode.\n+\t(_Deque_iterator<>::_M_const_cast): Add.\n+\t(deque<>::_M_erase): Declare.\n+\t* include/bits/deque.tcc: ... and define.\n+\t* include/bits/stl_list.h (erase): Fix signatures in C++11 mode.\n+\t(_List_const_iterator<>::_M_const_cast): Add.\n+\t* include/bits/list.tcc (erase (iterator)): Fix.\n+\t* include/bits/stl_iterator.h (__normal_iterator<>::_M_const_cast):\n+\tAdd; include <ext/cast.h>.\n+\t* include/bits/stl_vector.h (erase): Fix signatures in C++11 mode.\n+\t(vector<>::_M_erase): Declare.\n+\t* include/bits/stl_bvector.h: Likewise.\n+\t* include/bits/vector.tcc (vector<>::_M_erase): Define.\n+\t* include/ext/vstring.h (erase): Fix signatures in C++11 mode.\n+\t* include/debug/deque: Adjust.\n+\t* include/debug/list: Likewise.\n+\t* include/debug/vector: Likewise.\n+\t* include/profile/deque: Likewise.\n+\t* include/profile/list: Likewise.\n+\t* include/profile/vector: Likewise.\n+\t* testsuite/util/exception/safety.h (erase_base<deque>,\n+\terase_base<deque>, erase_base<vector>): Remove.\n+\t(erase_base<__versa_string>): Update.\n+\t* testsuite/ext/vstring/modifiers/char/54577.cc: New.\n+\t* testsuite/ext/vstring/modifiers/wchar_t/54577.cc: Likewise.\n+\t* testsuite/23_containers/deque/modifiers/erase/54577.cc: Likewise.\n+\t* testsuite/23_containers/list/modifiers/erase/54577.cc: Likewise.\n+\t* testsuite/23_containers/vector/bool/modifiers/erase/54577.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/modifiers/erase/54577.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc:\n+\tAdjust dg-error line numbers.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\n 2013-05-09  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* testsuite/util/testsuite_abi.cc (check_version): Add CXXABI_1.3.8."}, {"sha": "8da73589869297a3528d96974a48a1cc25d7cea5", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -191,7 +191,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template <typename _Tp, typename _Alloc>\n     typename deque<_Tp, _Alloc>::iterator\n     deque<_Tp, _Alloc>::\n-    erase(iterator __position)\n+    _M_erase(iterator __position)\n     {\n       iterator __next = __position;\n       ++__next;\n@@ -214,7 +214,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template <typename _Tp, typename _Alloc>\n     typename deque<_Tp, _Alloc>::iterator\n     deque<_Tp, _Alloc>::\n-    erase(iterator __first, iterator __last)\n+    _M_erase(iterator __first, iterator __last)\n     {\n       if (__first == __last)\n \treturn __first;"}, {"sha": "9fc43cfe68ab9ea94258d997cb7c22cbff6c4c6f", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -106,10 +106,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Tp, typename _Alloc>\n     typename list<_Tp, _Alloc>::iterator\n     list<_Tp, _Alloc>::\n+#if __cplusplus >= 201103L\n+    erase(const_iterator __position)\n+#else\n     erase(iterator __position)\n+#endif\n     {\n       iterator __ret = iterator(__position._M_node->_M_next);\n+#if __cplusplus >= 201103L\n+      _M_erase(__position._M_const_cast());\n+#else\n       _M_erase(__position);\n+#endif\n       return __ret;\n     }\n "}, {"sha": "97424fa7a7d27ffd728d0401f0304c26a6c24f79", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -308,6 +308,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     _Bit_const_iterator(const _Bit_iterator& __x)\n     : _Bit_iterator_base(__x._M_p, __x._M_offset) { }\n \n+    _Bit_iterator\n+    _M_const_cast() const\n+    { return _Bit_iterator(_M_p, _M_offset); }\n+\n     const_reference\n     operator*() const\n     { return _Bit_reference(_M_p, 1UL << _M_offset); }\n@@ -898,21 +902,22 @@ template<typename _Alloc>\n     { --this->_M_impl._M_finish; }\n \n     iterator\n+#if __cplusplus >= 201103L\n+    erase(const_iterator __position)\n+    { return _M_erase(__position._M_const_cast()); }\n+#else\n     erase(iterator __position)\n-    {\n-      if (__position + 1 != end())\n-        std::copy(__position + 1, end(), __position);\n-      --this->_M_impl._M_finish;\n-      return __position;\n-    }\n+    { return _M_erase(__position); }\n+#endif\n \n     iterator\n+#if __cplusplus >= 201103L\n+    erase(const_iterator __first, const_iterator __last)\n+    { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }\n+#else\n     erase(iterator __first, iterator __last)\n-    {\n-      if (__first != __last)\n-\t_M_erase_at_end(std::copy(__last, end(), __first));\n-      return __first;\n-    }\n+    { return _M_erase(__first, __last); }\n+#endif\n \n     void\n     resize(size_type __new_size, bool __x = bool())\n@@ -1124,6 +1129,12 @@ template<typename _Alloc>\n     void\n     _M_erase_at_end(iterator __pos)\n     { this->_M_impl._M_finish = __pos; }\n+\n+    iterator\n+    _M_erase(iterator __pos);\n+\n+    iterator\n+    _M_erase(iterator __first, iterator __last);\n   };\n \n _GLIBCXX_END_NAMESPACE_CONTAINER"}, {"sha": "4bea82b180706f35f9297cb68184f511e88d77b2", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -136,6 +136,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       : _M_cur(__x._M_cur), _M_first(__x._M_first),\n         _M_last(__x._M_last), _M_node(__x._M_node) { }\n \n+      iterator\n+      _M_const_cast() const\n+      { return iterator(_M_cur, _M_node); }\n+\n       reference\n       operator*() const\n       { return *_M_cur; }\n@@ -1562,7 +1566,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Managing the pointer is the user's responsibility.\n        */\n       iterator\n-      erase(iterator __position);\n+#if __cplusplus >= 201103L\n+      erase(const_iterator __position)\n+      { return _M_erase(__position._M_const_cast()); }\n+#else\n+      erase(iterator __position)\n+      { return _M_erase(__position); }\n+#endif\n \n       /**\n        *  @brief  Remove a range of elements.\n@@ -1581,7 +1591,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  way.  Managing the pointer is the user's responsibility.\n        */\n       iterator\n-      erase(iterator __first, iterator __last);\n+#if __cplusplus >= 201103L\n+      erase(const_iterator __first, const_iterator __last)\n+      { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }\n+#else\n+      erase(iterator __first, iterator __last)\n+      { return _M_erase(__first, __last); }\n+#endif\n \n       /**\n        *  @brief  Swaps data with another %deque.\n@@ -1873,6 +1889,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tthis->_M_impl._M_finish = __pos;\n       }\n \n+      iterator\n+      _M_erase(iterator __pos);\n+\n+      iterator\n+      _M_erase(iterator __first, iterator __last);\n+\n #if __cplusplus >= 201103L\n       // Called by resize(sz).\n       void"}, {"sha": "a2762305109ac41e42441d33c196697b1c446f98", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -63,6 +63,7 @@\n #include <bits/cpp_type_traits.h>\n #include <ext/type_traits.h>\n #include <bits/move.h>\n+#include <ext/cast.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -733,6 +734,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      _Container>::__type>& __i)\n         : _M_current(__i.base()) { }\n \n+      __normal_iterator<typename _Container::pointer, _Container>\n+      _M_const_cast() const\n+      { return __normal_iterator<typename _Container::pointer, _Container>\n+\t  (__gnu_cxx::__const_pointer_cast<typename _Container::pointer>\n+\t   (_M_current)); }\n+\n       // Forward iterator requirements\n       reference\n       operator*() const"}, {"sha": "678947107f30554fd4f64721745f749d6c80a157", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -219,6 +219,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _List_const_iterator(const iterator& __x)\n       : _M_node(__x._M_node) { }\n \n+      iterator\n+      _M_const_cast() const\n+      { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }\n+\n       // Must downcast from List_node_base to _List_node to get to\n       // _M_data.\n       reference\n@@ -1169,7 +1173,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  any way.  Managing the pointer is the user's responsibility.\n        */\n       iterator\n+#if __cplusplus >= 201103L\n+      erase(const_iterator __position);\n+#else\n       erase(iterator __position);\n+#endif\n \n       /**\n        *  @brief  Remove a range of elements.\n@@ -1190,11 +1198,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  is the user's responsibility.\n        */\n       iterator\n+#if __cplusplus >= 201103L\n+      erase(const_iterator __first, const_iterator __last)\n+#else\n       erase(iterator __first, iterator __last)\n+#endif\n       {\n \twhile (__first != __last)\n \t  __first = erase(__first);\n+#if __cplusplus >= 201103L\n+\treturn __last._M_const_cast();\n+#else\n \treturn __last;\n+#endif\n       }\n \n       /**"}, {"sha": "5ac575460a0edf039eb42ba1c1a0c77342243825", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -1072,7 +1072,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  the pointer is the user's responsibility.\n        */\n       iterator\n-      erase(iterator __position);\n+#if __cplusplus >= 201103L\n+      erase(const_iterator __position)\n+      { return _M_erase(__position._M_const_cast()); }\n+#else\n+      erase(iterator __position)\n+      { return _M_erase(__position); }\n+#endif\n \n       /**\n        *  @brief  Remove a range of elements.\n@@ -1093,7 +1099,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Managing the pointer is the user's responsibility.\n        */\n       iterator\n-      erase(iterator __first, iterator __last);\n+#if __cplusplus >= 201103L\n+      erase(const_iterator __first, const_iterator __last)\n+      { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }\n+#else\n+      erase(iterator __first, iterator __last)\n+      { return _M_erase(__first, __last); }\n+#endif\n \n       /**\n        *  @brief  Swaps data with another %vector.\n@@ -1353,6 +1365,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tthis->_M_impl._M_finish = __pos;\n       }\n \n+      iterator\n+      _M_erase(iterator __position);\n+\n+      iterator\n+      _M_erase(iterator __first, iterator __last);\n+\n #if __cplusplus >= 201103L\n     private:\n       // Constant-time move assignment when source object's memory can be"}, {"sha": "d26cfafd1fa2f5f68e48d1225e2506359d9956d3", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -132,7 +132,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Tp, typename _Alloc>\n     typename vector<_Tp, _Alloc>::iterator\n     vector<_Tp, _Alloc>::\n-    erase(iterator __position)\n+    _M_erase(iterator __position)\n     {\n       if (__position + 1 != end())\n \t_GLIBCXX_MOVE3(__position + 1, end(), __position);\n@@ -144,7 +144,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Tp, typename _Alloc>\n     typename vector<_Tp, _Alloc>::iterator\n     vector<_Tp, _Alloc>::\n-    erase(iterator __first, iterator __last)\n+    _M_erase(iterator __first, iterator __last)\n     {\n       if (__first != __last)\n \t{\n@@ -790,6 +790,27 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t}\n     }\n \n+  template<typename _Alloc>\n+    typename vector<bool, _Alloc>::iterator\n+    vector<bool, _Alloc>::\n+    _M_erase(iterator __position)\n+    {\n+      if (__position + 1 != end())\n+        std::copy(__position + 1, end(), __position);\n+      --this->_M_impl._M_finish;\n+      return __position;\n+    }\n+\n+  template<typename _Alloc>\n+    typename vector<bool, _Alloc>::iterator\n+    vector<bool, _Alloc>::\n+    _M_erase(iterator __first, iterator __last)\n+    {\n+      if (__first != __last)\n+\t_M_erase_at_end(std::copy(__last, end(), __first));\n+      return __first;\n+    }\n+\n #if __cplusplus >= 201103L\n   template<typename _Alloc>\n     bool"}, {"sha": "2ac6d252e1ddca939ff86fd3bd7e691aafe1cba5", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -456,11 +456,19 @@ namespace __debug\n       }\n \n       iterator\n-      erase(iterator __position)\n+#if __cplusplus >= 201103L\n+      erase(const_iterator __position)\n+#else\n+      erase(iterator __position)\t\n+#endif\n       {\n \t__glibcxx_check_erase(__position);\n+#if __cplusplus >= 201103L\n+\t_Base_const_iterator __victim = __position.base();\n+#else\n \t_Base_iterator __victim = __position.base();\n-\tif (__victim == _Base::begin() || __victim == _Base::end()-1)\n+#endif\n+\tif (__victim == _Base::begin() || __victim == _Base::end() - 1)\n \t  {\n \t    this->_M_invalidate_if(_Equal(__victim));\n \t    return iterator(_Base::erase(__victim), this);\n@@ -474,19 +482,27 @@ namespace __debug\n       }\n \n       iterator\n+#if __cplusplus >= 201103L\n+      erase(const_iterator __first, const_iterator __last)\n+#else\n       erase(iterator __first, iterator __last)\n+#endif\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container\n \t__glibcxx_check_erase_range(__first, __last);\n \n \tif (__first.base() == __last.base())\n+#if __cplusplus >= 201103L\n+\t  return iterator(__first.base()._M_const_cast(), this);\n+#else\n \t  return __first;\n+#endif\n         else if (__first.base() == _Base::begin()\n \t\t || __last.base() == _Base::end())\n \t  {\n \t    this->_M_detach_singular();\n-\t    for (_Base_iterator __position = __first.base();\n+\t    for (_Base_const_iterator __position = __first.base();\n \t\t __position != __last.base(); ++__position)\n \t      {\n \t\tthis->_M_invalidate_if(_Equal(__position));"}, {"sha": "9bc47124f3939a74223864ebb05c73b64b0a8168", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -431,35 +431,48 @@ namespace __debug\n \n     private:\n       _Base_iterator\n+#if __cplusplus >= 201103L\n+      _M_erase(_Base_const_iterator __position)\n+#else\n       _M_erase(_Base_iterator __position)\n+#endif\n       {\n \tthis->_M_invalidate_if(_Equal(__position));\n \treturn _Base::erase(__position);\n       }\n+\n     public:\n       iterator\n+#if __cplusplus >= 201103L\n+      erase(const_iterator __position)\n+#else\n       erase(iterator __position)\n+#endif\n       {\n \t__glibcxx_check_erase(__position);\n \treturn iterator(_M_erase(__position.base()), this);\n       }\n \n       iterator\n-      erase(iterator __position, iterator __last)\n+#if __cplusplus >= 201103L\n+      erase(const_iterator __first, const_iterator __last)\n+#else\n+      erase(iterator __first, iterator __last)\n+#endif\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container\n-\t__glibcxx_check_erase_range(__position, __last);\n-\tfor (_Base_iterator __victim = __position.base();\n+\t__glibcxx_check_erase_range(__first, __last);\n+\tfor (_Base_const_iterator __victim = __first.base();\n \t     __victim != __last.base(); ++__victim)\n \t  {\n \t    _GLIBCXX_DEBUG_VERIFY(__victim != _Base::end(),\n \t\t\t          _M_message(__gnu_debug::__msg_valid_range)\n-\t\t\t\t  ._M_iterator(__position, \"position\")\n+\t\t\t\t  ._M_iterator(__first, \"position\")\n \t\t\t\t  ._M_iterator(__last, \"last\"));\n \t    this->_M_invalidate_if(_Equal(__victim));\n \t  }\n-\treturn iterator(_Base::erase(__position.base(), __last.base()), this);\n+\treturn iterator(_Base::erase(__first.base(), __last.base()), this);\n       }\n \n       void"}, {"sha": "4a65518bc8253e09e96442fd647868f851026427", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -514,7 +514,11 @@ namespace __debug\n \t}\n \n       iterator\n+#if __cplusplus >= 201103L\n+      erase(const_iterator __position)\n+#else\n       erase(iterator __position)\n+#endif\n       {\n \t__glibcxx_check_erase(__position);\n \tdifference_type __offset = __position.base() - _Base::begin();\n@@ -524,7 +528,11 @@ namespace __debug\n       }\n \n       iterator\n+#if __cplusplus >= 201103L\n+      erase(const_iterator __first, const_iterator __last)\n+#else\n       erase(iterator __first, iterator __last)\n+#endif\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container\n@@ -539,7 +547,11 @@ namespace __debug\n \t    return iterator(__res, this);\n \t  }\n \telse\n+#if __cplusplus >= 201103L\n+\t  return iterator(__first.base()._M_const_cast(), this);\n+#else\n \t  return __first;\n+#endif\n       }\n \n       void"}, {"sha": "716d145f1841a46033c9db70fe72cc8c29a347c1", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -1128,7 +1128,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  value of the string doesn't change if an error is thrown.\n       */\n       iterator\n-      erase(iterator __position)\n+#if __cplusplus >= 201103L\n+      erase(const_iterator __position)\n+#else\n+      erase(iterator __position)\t\n+#endif\n       {\n \t_GLIBCXX_DEBUG_PEDASSERT(__position >= _M_ibegin()\n \t\t\t\t && __position < _M_iend());\n@@ -1149,7 +1153,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  is thrown.\n       */\n       iterator\n+#if __cplusplus >= 201103L\n+      erase(const_iterator __first, const_iterator __last)\n+#else\n       erase(iterator __first, iterator __last)\n+#endif\n       {\n \t_GLIBCXX_DEBUG_PEDASSERT(__first >= _M_ibegin() && __first <= __last\n \t\t\t\t && __last <= _M_iend());"}, {"sha": "9943e1e9f02ae72dc37cdc3142247a7beea5a953", "filename": "libstdc++-v3/include/profile/deque", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -379,25 +379,25 @@ namespace __profile\n       }\n \n       iterator\n-      erase(iterator __position)\n+#if __cplusplus >= 201103L\n+      erase(const_iterator __position)\n+#else\n+      erase(iterator __position)\t\n+#endif\n       {\n-\tif (__position == begin() || __position == end()-1)\n-\t  {\n-\t    return iterator(_Base::erase(__position));\n-\t  }\n-\telse\n-\t  {\n-\t    typename _Base::iterator __res = _Base::erase(__position);\n-\t    return iterator(__res);\n-\t  }\n+\treturn _Base::erase(__position);\n       }\n \n       iterator\n+#if __cplusplus >= 201103L\n+      erase(const_iterator __first, const_iterator __last)\n+#else\n       erase(iterator __first, iterator __last)\n+#endif\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container\n-        return iterator(_Base::erase(__first, __last));\n+        return _Base::erase(__first, __last);\n       }\n \n       void"}, {"sha": "25ad11248b1d9f8aee7f755834be19680bd8053a", "filename": "libstdc++-v3/include/profile/list", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -389,11 +389,19 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n \t}\n \n       iterator\n+#if __cplusplus >= 201103L\n+      erase(const_iterator __position)\n+#else\n       erase(iterator __position)\n+#endif\n       {\treturn iterator(_Base::erase(__position.base()), this); }\n \n       iterator\n+#if __cplusplus >= 201103L\n+      erase(const_iterator __position, const_iterator __last)\n+#else\n       erase(iterator __position, iterator __last)\n+#endif\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container"}, {"sha": "d9eb15740c649226f1f14553a42a04c02a15aa3a", "filename": "libstdc++-v3/include/profile/vector", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -425,14 +425,22 @@ namespace __profile\n \n \n       iterator\n-      erase(iterator __position)\n+#if __cplusplus >= 201103L\n+      erase(const_iterator __position)\n+#else\n+      erase(iterator __position)\t\n+#endif\n       {\n \ttypename _Base::iterator __res = _Base::erase(__position.base());\n \treturn iterator(__res, this);\n       }\n \n       iterator\n+#if __cplusplus >= 201103L\n+      erase(const_iterator __first, const_iterator __last)\n+#else\n       erase(iterator __first, iterator __last)\n+#endif\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container"}, {"sha": "9553e11944dfc862c79c00452b236f2df687ca92", "filename": "libstdc++-v3/testsuite/23_containers/deque/modifiers/erase/54577.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Ferase%2F54577.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Ferase%2F54577.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Ferase%2F54577.cc?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <deque>\n+\n+void test01() \n+{\n+  std::deque<int> d1;\n+  d1.push_back(1);\n+  d1.erase(d1.cbegin());\n+\n+  std::deque<int> d2;\n+  d2.push_back(2);\n+  d2.push_back(3);\n+  d2.erase(d2.cbegin(), d2.cend());\n+}"}, {"sha": "ccb63ef83eea090d724e90d8426e589205cf73bd", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1698 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1714 }\n \n #include <deque>\n "}, {"sha": "0a5db6362b5dd4dacdea29a8d3c259d5bb782a91", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1631 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1647 }\n \n #include <deque>\n "}, {"sha": "7572322c6b460572f0736d0753ca70feb114ef58", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1631 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1647 }\n \n #include <deque>\n #include <utility>"}, {"sha": "b109d3896e40e77314be35d9351de978e90fe91d", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1782 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1798 }\n \n #include <deque>\n "}, {"sha": "7df79fba13f26b2cafd21b696677b85e3f0aea58", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/erase/54577.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Ferase%2F54577.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Ferase%2F54577.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Ferase%2F54577.cc?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <list>\n+\n+void test01() \n+{\n+  std::list<int> l1;\n+  l1.push_back(1);\n+  l1.erase(l1.cbegin());\n+\n+  std::list<int> l2;\n+  l2.push_back(2);\n+  l2.push_back(3);\n+  l2.erase(l2.cbegin(), l2.cend());\n+}"}, {"sha": "4ccd652bbd287eb4e735b7314e5de08b7391ab8a", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1529 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1545 }\n \n #include <list>\n "}, {"sha": "6bc01b7ec7c1a1403861dd55dab44dfc51a1c3d3", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1481 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1497 }\n \n #include <list>\n "}, {"sha": "1f39056e376a4f8e70bc30b503f4266325850afa", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1481 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1497 }\n \n #include <list>\n #include <utility>"}, {"sha": "902f55ab2fdc5b53a717ecadbf5f264e75196f3d", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1481 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1497 }\n \n #include <list>\n "}, {"sha": "ed18f6ab32f30ff286d9e694f0d48eb86d445648", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/modifiers/erase/54577.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fmodifiers%2Ferase%2F54577.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fmodifiers%2Ferase%2F54577.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fmodifiers%2Ferase%2F54577.cc?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+\n+void test01() \n+{\n+  std::vector<bool> vb1;\n+  vb1.push_back(true);\n+  vb1.erase(vb1.cbegin());\n+\n+  std::vector<bool> vb2;\n+  vb2.push_back(false);\n+  vb2.push_back(true);\n+  vb2.erase(vb2.cbegin(), vb2.cend());\n+}"}, {"sha": "64a87ea3bbe05e925e9d11b1ed0c56e876cff3e8", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/erase/54577.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Ferase%2F54577.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Ferase%2F54577.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Ferase%2F54577.cc?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+\n+void test01() \n+{\n+  std::vector<int> v1;\n+  v1.push_back(1);\n+  v1.erase(v1.cbegin());\n+\n+  std::vector<int> v2;\n+  v2.push_back(2);\n+  v2.push_back(3);\n+  v2.erase(v2.cbegin(), v2.cend());\n+}"}, {"sha": "2dbc60240a26c196fe0818bbbac85330c489a61f", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1240 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1252 }\n \n #include <vector>\n "}, {"sha": "7fc56bd4286bb7c8642e4f8b907d72a88e022da3", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1166 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1178 }\n \n #include <vector>\n "}, {"sha": "6a374618ce58f59282e6ae6cf06f5fd1f871fd90", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1166 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1178 }\n \n #include <vector>\n #include <utility>"}, {"sha": "3f5abb903cb145efcfd8846f89701f7cb9c8b811", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1281 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1293 }\n \n #include <vector>\n "}, {"sha": "979828bb10e3bb296bcafc82609ce3b227501384", "filename": "libstdc++-v3/testsuite/ext/vstring/modifiers/char/54577.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Fchar%2F54577.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Fchar%2F54577.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Fchar%2F54577.cc?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/vstring.h>\n+\n+void test01() \n+{\n+  __gnu_cxx::__vstring vs1;\n+  vs1.push_back('1');\n+  vs1.erase(vs1.cbegin());\n+\n+  __gnu_cxx::__vstring vs2;\n+  vs2.push_back('2');\n+  vs2.push_back('3');\n+  vs2.erase(vs2.cbegin(), vs2.cend());\n+}"}, {"sha": "f514099972b6fe0bff2bd4e0582fe32494cbf22b", "filename": "libstdc++-v3/testsuite/ext/vstring/modifiers/wchar_t/54577.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Fwchar_t%2F54577.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Fwchar_t%2F54577.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Fwchar_t%2F54577.cc?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/vstring.h>\n+\n+void test01() \n+{\n+  __gnu_cxx::__wvstring wvs1;\n+  wvs1.push_back(L'1');\n+  wvs1.erase(wvs1.cbegin());\n+\n+  __gnu_cxx::__wvstring wvs2;\n+  wvs2.push_back(L'2');\n+  wvs2.push_back(L'3');\n+  wvs2.erase(wvs2.cbegin(), wvs2.cend());\n+}"}, {"sha": "c063c9bddb715158c79727847bb2bcc064c2665d", "filename": "libstdc++-v3/testsuite/util/exception/safety.h", "status": "modified", "additions": 4, "deletions": 44, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94938aec1ab1996c4554fd3703708052144a784b/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h?ref=94938aec1ab1996c4554fd3703708052144a784b", "patch": "@@ -287,51 +287,11 @@ namespace __gnu_test\n \ttypedef __gnu_cxx::__versa_string<_Tp1, _Tp2, _Tp3, _Tp4>\n \t                                                container_type;\n \ttypedef typename container_type::iterator \titerator;\n+\ttypedef typename container_type::const_iterator const_iterator;\n \n-\titerator (container_type::* _F_erase_point)(iterator);\n-\titerator (container_type::* _F_erase_range)(iterator, iterator);\n-\n-\terase_base()\n-\t: _F_erase_point(&container_type::erase),\n-\t  _F_erase_range(&container_type::erase) { }\n-      };\n-\n-    template<typename _Tp1, typename _Tp2>\n-      struct erase_base<std::deque<_Tp1, _Tp2>>\n-      {\n-\ttypedef std::deque<_Tp1, _Tp2> \t\t        container_type;\n-\ttypedef typename container_type::iterator \titerator;\n-\n-\titerator (container_type::* _F_erase_point)(iterator);\n-\titerator (container_type::* _F_erase_range)(iterator, iterator);\n-\n-\terase_base()\n-\t: _F_erase_point(&container_type::erase),\n-\t  _F_erase_range(&container_type::erase) { }\n-      };\n-\n-    template<typename _Tp1, typename _Tp2>\n-      struct erase_base<std::list<_Tp1, _Tp2>>\n-      {\n-\ttypedef std::list<_Tp1, _Tp2> \t\t        container_type;\n-\ttypedef typename container_type::iterator \titerator;\n-\n-\titerator (container_type::* _F_erase_point)(iterator);\n-\titerator (container_type::* _F_erase_range)(iterator, iterator);\n-\n-\terase_base()\n-\t: _F_erase_point(&container_type::erase),\n-\t  _F_erase_range(&container_type::erase) { }\n-      };\n-\n-    template<typename _Tp1, typename _Tp2>\n-      struct erase_base<std::vector<_Tp1, _Tp2>>\n-      {\n-\ttypedef std::vector<_Tp1, _Tp2>\t\t        container_type;\n-\ttypedef typename container_type::iterator \titerator;\n-\n-\titerator (container_type::* _F_erase_point)(iterator);\n-\titerator (container_type::* _F_erase_range)(iterator, iterator);\n+\titerator (container_type::* _F_erase_point)(const_iterator);\n+\titerator (container_type::* _F_erase_range)(const_iterator,\n+\t\t\t\t\t\t    const_iterator);\n \n \terase_base()\n \t: _F_erase_point(&container_type::erase),"}]}