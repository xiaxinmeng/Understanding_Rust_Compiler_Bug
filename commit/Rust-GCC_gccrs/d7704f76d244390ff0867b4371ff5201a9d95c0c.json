{"sha": "d7704f76d244390ff0867b4371ff5201a9d95c0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc3MDRmNzZkMjQ0MzkwZmYwODY3YjQzNzFmZjUyMDFhOWQ5NWMwYw==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2002-08-22T02:20:43Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2002-08-22T02:20:43Z"}, "message": "where.h (struct _ffewhere_file_): Mark GTY.\n\n\t* where.h (struct _ffewhere_file_): Mark GTY.\n\t(ffewhere_file_kill): Remove prototype.\n\t* where.c: Include ggc.h.\n\t(struct _ffewhere_ll_, struct _ffewhere_root_ll_): Mark GTY.\n\t(ffewhere_root_ll_): Ditto.  Change type from struct\n\t_ffewhere_root_ll_ to struct _ffewhere_root_ll_*.  All uses\n\tchanged.\n\t(ffewhere_file_kill): Remove.\n\t(ffewhere_file_new): Use GC to allocate ffewhereFile objects.\n\t(ffewhere_file_set): Use GC to allocate ffewhereLL_ objects.\n\t(ffewhere_init_1): Use GC to allocate ffewhere_root_ll_ sentinel.\n\tInclude gt-f-where.h.\n\t* lex.c (ffelex_current_wf_, ffelex_include_wherefile_): Mark GTY.\n\tInclude gt-f-lex.h.\n\t* std.c (ffestd_S3P4): Don't call ffewhere_file_kill.\n\t* config-lang.in (gtfiles): Add f/where.h f/where.c and f/lex.c.\n\t* Make-lang.in (gt-f-lex.h gt-f-where.h): Add to dependents of\n\ts-gtype.\n\t(f/lex.o): Depend on gt-f-lex.h.\n\t(f/where.o): Depend on gt-f-where.h.\n\nFrom-SVN: r56502", "tree": {"sha": "cce6268d2a07aba745d731ecbaad376287a3b9a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cce6268d2a07aba745d731ecbaad376287a3b9a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7704f76d244390ff0867b4371ff5201a9d95c0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7704f76d244390ff0867b4371ff5201a9d95c0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7704f76d244390ff0867b4371ff5201a9d95c0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7704f76d244390ff0867b4371ff5201a9d95c0c/comments", "author": null, "committer": null, "parents": [{"sha": "44ddc79ad21811b041b844053fe1c6111ba7d075", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44ddc79ad21811b041b844053fe1c6111ba7d075", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44ddc79ad21811b041b844053fe1c6111ba7d075"}], "stats": {"total": 101, "additions": 56, "deletions": 45}, "files": [{"sha": "e96f197f88485c0a0a4889b649a4a15e1b30b3bb", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7704f76d244390ff0867b4371ff5201a9d95c0c/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7704f76d244390ff0867b4371ff5201a9d95c0c/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=d7704f76d244390ff0867b4371ff5201a9d95c0c", "patch": "@@ -1,3 +1,26 @@\n+2002-08-22  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* where.h (struct _ffewhere_file_): Mark GTY.\n+\t(ffewhere_file_kill): Remove prototype.\n+\t* where.c: Include ggc.h.\n+\t(struct _ffewhere_ll_, struct _ffewhere_root_ll_): Mark GTY.\n+\t(ffewhere_root_ll_): Ditto.  Change type from struct\n+\t_ffewhere_root_ll_ to struct _ffewhere_root_ll_*.  All uses\n+\tchanged.\n+\t(ffewhere_file_kill): Remove.\n+\t(ffewhere_file_new): Use GC to allocate ffewhereFile objects.\n+\t(ffewhere_file_set): Use GC to allocate ffewhereLL_ objects.\n+\t(ffewhere_init_1): Use GC to allocate ffewhere_root_ll_ sentinel.\n+\tInclude gt-f-where.h.\n+\t* lex.c (ffelex_current_wf_, ffelex_include_wherefile_): Mark GTY.\n+\tInclude gt-f-lex.h.\n+\t* std.c (ffestd_S3P4): Don't call ffewhere_file_kill.\n+\t* config-lang.in (gtfiles): Add f/where.h f/where.c and f/lex.c.\n+\t* Make-lang.in (gt-f-lex.h gt-f-where.h): Add to dependents of\n+\ts-gtype.\n+\t(f/lex.o): Depend on gt-f-lex.h.\n+\t(f/where.o): Depend on gt-f-where.h.\n+\n Tue Aug 20 16:49:40 2002  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* where.c (ffewhere_track): Remove impossible if-then clause."}, {"sha": "95ec02c51309d95744c3a97dffd6db2ae128e8e7", "filename": "gcc/f/Make-lang.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7704f76d244390ff0867b4371ff5201a9d95c0c/gcc%2Ff%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7704f76d244390ff0867b4371ff5201a9d95c0c/gcc%2Ff%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FMake-lang.in?ref=d7704f76d244390ff0867b4371ff5201a9d95c0c", "patch": "@@ -137,7 +137,7 @@ f/fini.o:\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) \\\n \t      -c $(srcdir)/f/fini.c $(OUTPUT_OPTION)\n \n-gt-f-com.h gt-f-ste.h gtype-f.h : s-gtype; @true\n+gt-f-lex.h gt-f-where.h gt-f-com.h gt-f-ste.h gtype-f.h : s-gtype; @true\n \n #\f\n # Build hooks:\n@@ -414,7 +414,7 @@ f/lex.o: f/lex.c f/proj.h $(CONFIG_H) $(SYSTEM_H) f/top.h f/malloc.h f/where.h \\\n  f/bld-op.def f/bit.h f/info.h f/info-b.def f/info-k.def f/info-w.def \\\n  f/target.h f/lex.h f/type.h f/intrin.h f/intrin.def f/lab.h f/symbol.h \\\n  f/symbol.def f/equiv.h f/storag.h f/global.h f/name.h f/src.h flags.h \\\n- debug.h input.h toplev.h output.h $(GGC_H)\n+ debug.h input.h toplev.h output.h $(GGC_H) gt-f-lex.h\n f/malloc.o: f/malloc.c f/proj.h $(CONFIG_H) $(SYSTEM_H) f/malloc.h\n f/name.o: f/name.c f/proj.h $(CONFIG_H) $(SYSTEM_H) f/bad.h f/bad.def f/where.h \\\n  glimits.h f/top.h f/malloc.h f/name.h f/global.h f/info.h f/info-b.def \\\n@@ -529,4 +529,4 @@ f/top.o: f/top.c f/proj.h $(CONFIG_H) $(SYSTEM_H) f/top.h f/malloc.h f/where.h \\\n f/type.o: f/type.c f/proj.h $(CONFIG_H) $(SYSTEM_H) f/type.h f/malloc.h\n f/version.o: f/version.c f/version.h\n f/where.o: f/where.c f/proj.h $(CONFIG_H) $(SYSTEM_H) f/where.h glimits.h f/top.h \\\n- f/malloc.h f/lex.h $(GGC_H)\n+ f/malloc.h f/lex.h $(GGC_H) gt-f-where.h"}, {"sha": "92ba5cca73e84e106b6b6c5cb8908ae34e48e4ce", "filename": "gcc/f/config-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7704f76d244390ff0867b4371ff5201a9d95c0c/gcc%2Ff%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7704f76d244390ff0867b4371ff5201a9d95c0c/gcc%2Ff%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fconfig-lang.in?ref=d7704f76d244390ff0867b4371ff5201a9d95c0c", "patch": "@@ -1,5 +1,5 @@\n # Top level configure fragment for GNU FORTRAN.\n-#   Copyright (C) 1995, 1996, 1997, 2000, 2001 Free Software Foundation, Inc.\n+#   Copyright (C) 1995, 1996, 1997, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n #This file is part of GNU Fortran.\n \n@@ -33,4 +33,4 @@ stagestuff=\"g77\\$(exeext) g77-cross\\$(exeext) f771\\$(exeext)\"\n \n target_libs=target-libf2c\n \n-gtfiles=\"\\$(srcdir)/f/com.c \\$(srcdir)/f/com.h \\$(srcdir)/f/ste.c\"\n+gtfiles=\"\\$(srcdir)/f/com.c \\$(srcdir)/f/com.h \\$(srcdir)/f/ste.c \\$(srcdir)/f/where.h \\$(srcdir)/f/where.c \\$(srcdir)/f/lex.c\""}, {"sha": "6d065ddd052fb356b0ef26195de67932ccc7de7d", "filename": "gcc/f/lex.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7704f76d244390ff0867b4371ff5201a9d95c0c/gcc%2Ff%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7704f76d244390ff0867b4371ff5201a9d95c0c/gcc%2Ff%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flex.c?ref=d7704f76d244390ff0867b4371ff5201a9d95c0c", "patch": "@@ -93,7 +93,7 @@ static ffelexType ffelex_first_char_[256];\n \n /* The wf argument of the most recent active ffelex_file_(fixed,free)\n    function.  */\n-static ffewhereFile ffelex_current_wf_;\n+static GTY (()) ffewhereFile ffelex_current_wf_;\n \n /* TRUE if an INCLUDE statement can be processed (ffelex_set_include\n    can be called).  */\n@@ -106,7 +106,7 @@ static bool ffelex_set_include_;\n /* Information on the pending INCLUDE file.  */\n static FILE *ffelex_include_file_;\n static bool ffelex_include_free_form_;\n-static ffewhereFile ffelex_include_wherefile_;\n+static GTY(()) ffewhereFile ffelex_include_wherefile_;\n \n /* Current master line count.  */\n static ffewhereLineNumber ffelex_linecount_current_;\n@@ -4634,3 +4634,5 @@ ffelex_token_use (ffelexToken t)\n   t->uses++;\n   return t;\n }\n+\n+#include \"gt-f-lex.h\""}, {"sha": "bd2add21f6523411a50b68b9c7c887eb70af7f30", "filename": "gcc/f/std.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7704f76d244390ff0867b4371ff5201a9d95c0c/gcc%2Ff%2Fstd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7704f76d244390ff0867b4371ff5201a9d95c0c/gcc%2Ff%2Fstd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fstd.c?ref=d7704f76d244390ff0867b4371ff5201a9d95c0c", "patch": "@@ -1,5 +1,5 @@\n /* std.c -- Implementation File (module.c template V1.0)\n-   Copyright (C) 1995, 1996, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1995, 1996, 2000, 2002 Free Software Foundation, Inc.\n    Contributed by James Craig Burley.\n \n This file is part of GNU Fortran.\n@@ -4774,9 +4774,7 @@ ffestd_S3P4 (ffebld filename)\n       fi = ffecom_open_include (ffewhere_file_name (wf),\n \t\t\t\tffelex_token_where_line (ffesta_tokens[0]),\n \t\t\t\tffelex_token_where_column (ffesta_tokens[0]));\n-      if (fi == NULL)\n-\tffewhere_file_kill (wf);\n-      else\n+      if (fi != NULL)\n \tffelex_set_include (wf, (ffelex_token_type (ffesta_tokens[0])\n \t\t\t\t == FFELEX_typeNAME), fi);\n     }"}, {"sha": "b16f965721e2f2a72b201763311680a6a90ebaf1", "filename": "gcc/f/where.c", "status": "modified", "additions": 20, "deletions": 31, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7704f76d244390ff0867b4371ff5201a9d95c0c/gcc%2Ff%2Fwhere.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7704f76d244390ff0867b4371ff5201a9d95c0c/gcc%2Ff%2Fwhere.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fwhere.c?ref=d7704f76d244390ff0867b4371ff5201a9d95c0c", "patch": "@@ -1,5 +1,5 @@\n /* where.c -- Implementation File (module.c template V1.0)\n-   Copyright (C) 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1995, 2002 Free Software Foundation, Inc.\n    Contributed by James Craig Burley.\n \n This file is part of GNU Fortran.\n@@ -33,6 +33,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"where.h\"\n #include \"lex.h\"\n #include \"malloc.h\"\n+#include \"ggc.h\"\n \n /* Externals defined here. */\n \n@@ -52,7 +53,7 @@ typedef struct _ffewhere_ll_ *ffewhereLL_;\n \n /* Internal structure definitions. */\n \n-struct _ffewhere_ll_\n+struct _ffewhere_ll_ GTY (())\n   {\n     ffewhereLL_ next;\n     ffewhereLL_ previous;\n@@ -61,7 +62,7 @@ struct _ffewhere_ll_\n     ffewhereLineNumber offset;\t/* User-desired offset (usually 1). */\n   };\n \n-struct _ffewhere_root_ll_\n+struct _ffewhere_root_ll_ GTY (())\n   {\n     ffewhereLL_ first;\n     ffewhereLL_ last;\n@@ -76,7 +77,7 @@ struct _ffewhere_root_line_\n \n /* Static objects accessed by functions in this module. */\n \n-static struct _ffewhere_root_ll_ ffewhere_root_ll_;\n+static GTY (()) struct _ffewhere_root_ll_ *ffewhere_root_ll_;\n static struct _ffewhere_root_line_ ffewhere_root_line_;\n \n /* Static functions (internal). */\n@@ -94,10 +95,10 @@ ffewhere_ll_lookup_ (ffewhereLineNumber ln)\n   ffewhereLL_ ll;\n \n   if (ln == 0)\n-    return ffewhere_root_ll_.first;\n+    return ffewhere_root_ll_->first;\n \n-  for (ll = ffewhere_root_ll_.last;\n-       ll != (ffewhereLL_) &ffewhere_root_ll_.first;\n+  for (ll = ffewhere_root_ll_->last;\n+       ll != (ffewhereLL_) &ffewhere_root_ll_->first;\n        ll = ll->previous)\n     {\n       if (ll->line_no <= ln)\n@@ -108,30 +109,13 @@ ffewhere_ll_lookup_ (ffewhereLineNumber ln)\n   return NULL;\n }\n \n-/* Kill file object.\n-\n-   Note that this object must not have been passed in a call\n-   to any other ffewhere function except ffewhere_file_name and\n-   ffewhere_file_namelen.  */\n-\n-void\n-ffewhere_file_kill (ffewhereFile wf)\n-{\n-  malloc_kill_ks (ffe_pool_file (), wf,\n-\t\t  offsetof (struct _ffewhere_file_, text)\n-\t\t  + wf->length + 1);\n-}\n-\n /* Create file object.  */\n \n ffewhereFile\n ffewhere_file_new (const char *name, size_t length)\n {\n   ffewhereFile wf;\n-\n-  wf = malloc_new_ks (ffe_pool_file (), \"ffewhereFile\",\n-\t\t      offsetof (struct _ffewhere_file_, text)\n-\t\t      + length + 1);\n+  wf = ggc_alloc (offsetof (struct _ffewhere_file_, text) + length + 1);\n   wf->length = length;\n   memcpy (&wf->text[0], name, length);\n   wf->text[length] = '\\0';\n@@ -147,10 +131,9 @@ void\n ffewhere_file_set (ffewhereFile wf, bool have_num, ffewhereLineNumber ln)\n {\n   ffewhereLL_ ll;\n-\n-  ll = malloc_new_kp (ffe_pool_file (), \"ffewhereLL_\", sizeof (*ll));\n-  ll->next = (ffewhereLL_) &ffewhere_root_ll_.first;\n-  ll->previous = ffewhere_root_ll_.last;\n+  ll = ggc_alloc (sizeof (*ll));\n+  ll->next = (ffewhereLL_) &ffewhere_root_ll_->first;\n+  ll->previous = ffewhere_root_ll_->last;\n   ll->next->previous = ll;\n   ll->previous->next = ll;\n   if (wf == NULL)\n@@ -184,8 +167,12 @@ ffewhere_init_1 ()\n   = (ffewhereLine) &ffewhere_root_line_.first;\n   ffewhere_root_line_.none = 0;\n \n-  ffewhere_root_ll_.first = ffewhere_root_ll_.last\n-    = (ffewhereLL_) &ffewhere_root_ll_.first;\n+  /* The sentinel is (must be) GGC-allocated.  It is accessed as a\n+     struct _ffewhere_ll_/ffewhereLL_ though its type contains just the\n+     first two fields (layout-wise).  */\n+  ffewhere_root_ll_ = ggc_alloc_cleared (sizeof (struct _ffewhere_ll_));\n+  ffewhere_root_ll_->first = ffewhere_root_ll_->last\n+    = (ffewhereLL_) &ffewhere_root_ll_->first;\n }\n \n /* Return the textual content of the line.  */\n@@ -529,3 +516,5 @@ ffewhere_track_kill (ffewhereLine wrl, ffewhereColumn wrc UNUSED,\n \t}\n     }\n }\n+\n+#include \"gt-f-where.h\""}, {"sha": "cce7b2a75ba8cdbef85bd38992e78edbe3652959", "filename": "gcc/f/where.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7704f76d244390ff0867b4371ff5201a9d95c0c/gcc%2Ff%2Fwhere.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7704f76d244390ff0867b4371ff5201a9d95c0c/gcc%2Ff%2Fwhere.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fwhere.h?ref=d7704f76d244390ff0867b4371ff5201a9d95c0c", "patch": "@@ -1,5 +1,5 @@\n /* where.h -- Public #include File (module.h template V1.0)\n-   Copyright (C) 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1995, 2002 Free Software Foundation, Inc.\n    Contributed by James Craig Burley.\n \n This file is part of GNU Fortran.\n@@ -65,7 +65,7 @@ typedef unsigned int ffewhereUses_;\n \n /* Structure definitions. */\n \n-struct _ffewhere_file_\n+struct _ffewhere_file_ GTY (())\n   {\n     size_t length;\n     char text[1];\n@@ -87,7 +87,6 @@ extern struct _ffewhere_line_ ffewhere_unknown_line_;\n \n /* Declare functions with prototypes. */\n \n-void ffewhere_file_kill (ffewhereFile wf);\n ffewhereFile ffewhere_file_new (const char *name, size_t length);\n void ffewhere_file_set (ffewhereFile wf, bool have_num, ffewhereLineNumber ln);\n void ffewhere_init_1 (void);"}]}