{"sha": "7699e88f68de2f5488ad260fdd35ee3a2b910014", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY5OWU4OGY2OGRlMmY1NDg4YWQyNjBmZGQzNWVlM2EyYjkxMDAxNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-02-24T08:04:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-02-24T08:04:31Z"}, "message": "re PR tree-optimization/79389 (30% performance regression in SciMark2 MonteCarlo)\n\n2017-02-24  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/79389\n\t* gimple-ssa-split-paths.c (is_feasible_trace): Verify more\n\tproperly that a threading opportunity exists.  Detect conditional\n\tcopy/constant propagation opportunities.\n\n\t* gcc.dg/tree-ssa/split-path-10.c: New testcase.\n\nFrom-SVN: r245696", "tree": {"sha": "879d6e9c772604641f126febfe83c337e3d996fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/879d6e9c772604641f126febfe83c337e3d996fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7699e88f68de2f5488ad260fdd35ee3a2b910014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7699e88f68de2f5488ad260fdd35ee3a2b910014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7699e88f68de2f5488ad260fdd35ee3a2b910014", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7699e88f68de2f5488ad260fdd35ee3a2b910014/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f83002c7baab042876e9a460e93dd528844b1eb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f83002c7baab042876e9a460e93dd528844b1eb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f83002c7baab042876e9a460e93dd528844b1eb5"}], "stats": {"total": 110, "additions": 108, "deletions": 2}, "files": [{"sha": "f90686c2d98914adc36d78d33515d6e5fe65b72c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7699e88f68de2f5488ad260fdd35ee3a2b910014/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7699e88f68de2f5488ad260fdd35ee3a2b910014/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7699e88f68de2f5488ad260fdd35ee3a2b910014", "patch": "@@ -1,3 +1,10 @@\n+2017-02-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79389\n+\t* gimple-ssa-split-paths.c (is_feasible_trace): Verify more\n+\tproperly that a threading opportunity exists.  Detect conditional\n+\tcopy/constant propagation opportunities.\n+\n 2017-02-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/visium/visium.md (type): Add trap."}, {"sha": "0f6b2417d2c0b0237e46cfdfe400e6e204995d31", "filename": "gcc/gimple-ssa-split-paths.c", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7699e88f68de2f5488ad260fdd35ee3a2b910014/gcc%2Fgimple-ssa-split-paths.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7699e88f68de2f5488ad260fdd35ee3a2b910014/gcc%2Fgimple-ssa-split-paths.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-split-paths.c?ref=7699e88f68de2f5488ad260fdd35ee3a2b910014", "patch": "@@ -232,20 +232,65 @@ is_feasible_trace (basic_block bb)\n \t      /* But for memory the PHI alone isn't good enough.  */\n \t      && ! virtual_operand_p (gimple_phi_result (stmt)))\n \t    {\n+\t      bool found_unchanged_path = false;\n \t      for (unsigned i = 0; i < gimple_phi_num_args (phi); ++i)\n \t\tif (gimple_phi_arg_def (phi, i) == gimple_phi_result (stmt))\n \t\t  {\n-\t\t    found_useful_phi = true;\n+\t\t    found_unchanged_path = true;\n \t\t    break;\n \t\t  }\n+\t      /* If we found an unchanged path this can only be a threading\n+\t         opportunity if we have uses of the loop header PHI result\n+\t\t in a stmt dominating the merge block.  Otherwise the\n+\t\t splitting may prevent if-conversion.  */\n+\t      if (found_unchanged_path)\n+\t\t{\n+\t\t  use_operand_p use2_p;\n+\t\t  imm_use_iterator iter2;\n+\t\t  FOR_EACH_IMM_USE_FAST (use2_p, iter2, gimple_phi_result (stmt))\n+\t\t    {\n+\t\t      basic_block use_bb = gimple_bb (USE_STMT (use2_p));\n+\t\t      if (use_bb != bb\n+\t\t\t  && dominated_by_p (CDI_DOMINATORS, bb, use_bb))\n+\t\t\t{\n+\t\t\t  found_useful_phi = true;\n+\t\t\t  break;\n+\t\t\t}\n+\t\t    }\n+\t\t}\n \t      if (found_useful_phi)\n \t\tbreak;\n \t    }\n \t}\n       if (found_useful_phi)\n \tbreak;\n     }\n-  if (! found_useful_phi)\n+  /* There is one exception namely a controlling condition we can propagate\n+     an equivalence from to the joiner.  */\n+  bool found_cprop_opportunity = false;\n+  basic_block dom = get_immediate_dominator (CDI_DOMINATORS, bb);\n+  gcond *cond = as_a <gcond *> (last_stmt (dom));\n+  if (gimple_cond_code (cond) == EQ_EXPR\n+      || gimple_cond_code (cond) == NE_EXPR)\n+    for (unsigned i = 0; i < 2; ++i)\n+      {\n+\ttree op = gimple_op (cond, i);\n+\tif (TREE_CODE (op) == SSA_NAME)\n+\t  {\n+\t    use_operand_p use_p;\n+\t    imm_use_iterator iter;\n+\t    FOR_EACH_IMM_USE_FAST (use_p, iter, op)\n+\t      if (gimple_bb (USE_STMT (use_p)) == bb)\n+\t\t{\n+\t\t  found_cprop_opportunity = true;\n+\t\t  break;\n+\t\t}\n+\t  }\n+\tif (found_cprop_opportunity)\n+\t  break;\n+      }\n+\n+  if (! found_useful_phi && ! found_cprop_opportunity)\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file,"}, {"sha": "6b62ae8dc0eb25bbf8e9d78c1edd102f7dcd5fd2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7699e88f68de2f5488ad260fdd35ee3a2b910014/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7699e88f68de2f5488ad260fdd35ee3a2b910014/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7699e88f68de2f5488ad260fdd35ee3a2b910014", "patch": "@@ -1,3 +1,8 @@\n+2017-02-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79389\n+\t* gcc.dg/tree-ssa/split-path-10.c: New testcase.\n+\n 2017-02-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/79361"}, {"sha": "ed208795488392de60e04a1842f1c451a626b3f9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/split-path-10.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7699e88f68de2f5488ad260fdd35ee3a2b910014/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7699e88f68de2f5488ad260fdd35ee3a2b910014/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-10.c?ref=7699e88f68de2f5488ad260fdd35ee3a2b910014", "patch": "@@ -0,0 +1,49 @@\n+/* PR tree-optimization/79389  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-split-paths-details\" } */\n+\n+typedef struct\n+{\n+  int m[17];                        \n+  int seed;                             \n+  int i;\n+  int j;\n+  int haveRange;\n+  double left;\n+  double right;\n+  double width;\n+}\n+Random_struct, *Random;\n+\n+Random new_Random_seed(int seed);\n+double Random_nextDouble(Random R);\n+void Random_delete(Random R);\n+\n+static const int SEED = 113;\n+\n+double MonteCarlo_integrate(int Num_samples)\n+{\n+\n+\n+  Random R = new_Random_seed(SEED);\n+\n+\n+  int under_curve = 0;\n+  int count;\n+\n+  for (count=0; count<Num_samples; count++)\n+    {\n+      double x= Random_nextDouble(R);\n+      double y= Random_nextDouble(R);\n+\n+      if ( x*x + y*y <= 1.0)\n+\tunder_curve ++;\n+\n+    }\n+\n+  Random_delete(R);\n+\n+  return ((double) under_curve / Num_samples) * 4.0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Duplicating join block\" 0 \"split-paths\" } } */"}]}