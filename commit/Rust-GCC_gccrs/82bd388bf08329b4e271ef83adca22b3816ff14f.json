{"sha": "82bd388bf08329b4e271ef83adca22b3816ff14f", "node_id": "C_kwDOANBUbNoAKDgyYmQzODhiZjA4MzI5YjRlMjcxZWY4M2FkY2EyMmIzODE2ZmYxNGY", "commit": {"author": {"name": "Doug Rupp", "email": "rupp@adacore.com", "date": "2021-12-20T22:25:30Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-09T09:27:30Z"}, "message": "[Ada] vx21.07: stack-checking on ppc\n\nOn VxWorks >= 7.2 and 653, signal processing code is expected to clear\nthe TCB exception count field when returning control back to user code.\nThis change arranges to do so.  It is believed that this is only an\nissue in Kernel mode, and not RTP because there is no exception count\nfield in RTP mode and no failures have been observed.\n\ngcc/ada/\n\n\t* init.c [vxworks] (CLEAR_EXCEPTION_COUNT): New macro.\n\t(__gnat_clear_exception_count): Remove.\n\t(__gnat_map_signal): Call CLEAR_EXCEPTION_COUNT().", "tree": {"sha": "ada6fcab2df41ea1b31acbeb4d356895e7efc2ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ada6fcab2df41ea1b31acbeb4d356895e7efc2ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82bd388bf08329b4e271ef83adca22b3816ff14f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82bd388bf08329b4e271ef83adca22b3816ff14f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82bd388bf08329b4e271ef83adca22b3816ff14f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82bd388bf08329b4e271ef83adca22b3816ff14f/comments", "author": {"login": "Cementitious", "id": 115579865, "node_id": "U_kgDOBuOb2Q", "avatar_url": "https://avatars.githubusercontent.com/u/115579865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cementitious", "html_url": "https://github.com/Cementitious", "followers_url": "https://api.github.com/users/Cementitious/followers", "following_url": "https://api.github.com/users/Cementitious/following{/other_user}", "gists_url": "https://api.github.com/users/Cementitious/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cementitious/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cementitious/subscriptions", "organizations_url": "https://api.github.com/users/Cementitious/orgs", "repos_url": "https://api.github.com/users/Cementitious/repos", "events_url": "https://api.github.com/users/Cementitious/events{/privacy}", "received_events_url": "https://api.github.com/users/Cementitious/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e9e014cf700a92cb7cf5a24c62b1883451452bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e9e014cf700a92cb7cf5a24c62b1883451452bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e9e014cf700a92cb7cf5a24c62b1883451452bb"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "9eedffc4a37648b7546c8c1c0b685636f693a223", "filename": "gcc/ada/init.c", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bd388bf08329b4e271ef83adca22b3816ff14f/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bd388bf08329b4e271ef83adca22b3816ff14f/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=82bd388bf08329b4e271ef83adca22b3816ff14f", "patch": "@@ -1758,8 +1758,26 @@ extern size_t vxIntStackOverflowSize;\n #define INT_OVERFLOW_SIZE vxIntStackOverflowSize\n #endif\n \n-#ifdef VTHREADS\n-#include \"private/vThreadsP.h\"\n+/* VxWorks 653 vThreads expects the field excCnt to be zeroed when a signal is.\n+   handled.  The VxWorks version of longjmp does this; GCC's builtin_longjmp\n+   doesn't.  A similar issue is present VxWorks 7.2 and affects ZCX as well\n+   as builtin_longjmp.  This field only exists in Kernel mode, not RTP.  */\n+#if defined(VTHREADS) || (!defined(__RTP__) && (_WRS_VXWORKS_MAJOR >= 7))\n+# ifdef VTHREADS\n+#  include \"private/vThreadsP.h\"\n+#  define EXCCNT vThreads.excCnt\n+# else\n+#  include \"private/taskLibP.h\"\n+#  define EXCCNT excCnt\n+# endif\n+# define CLEAR_EXCEPTION_COUNT()\t\t\t \\\n+  do\t\t\t\t\t\t\t \\\n+    {\t\t\t\t\t\t\t \\\n+      WIND_TCB *currentTask = (WIND_TCB *) taskIdSelf(); \\\n+      currentTask->EXCCNT = 0;\t\t\t\t \\\n+    } while (0)\n+#else\n+# define CLEAR_EXCEPTION_COUNT()\n #endif\n \n #ifndef __RTP__\n@@ -1835,19 +1853,6 @@ __gnat_reset_guard_page (int sig)\n   return FALSE;\n }\n \n-/* VxWorks 653 vThreads expects the field excCnt to be zeroed when a signal is.\n-   handled. The VxWorks version of longjmp does this; GCC's builtin_longjmp\n-   doesn't.  */\n-void\n-__gnat_clear_exception_count (void)\n-{\n-#ifdef VTHREADS\n-  WIND_TCB *currentTask = (WIND_TCB *) taskIdSelf();\n-\n-  currentTask->vThreads.excCnt = 0;\n-#endif\n-}\n-\n /* Handle different SIGnal to exception mappings in different VxWorks\n    versions.  */\n void\n@@ -1959,7 +1964,8 @@ __gnat_map_signal (int sig,\n           break;\n         }\n     }\n-  __gnat_clear_exception_count ();\n+\n+  CLEAR_EXCEPTION_COUNT ();\n   Raise_From_Signal_Handler (exception, msg);\n }\n "}]}