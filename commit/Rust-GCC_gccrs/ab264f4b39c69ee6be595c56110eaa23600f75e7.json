{"sha": "ab264f4b39c69ee6be595c56110eaa23600f75e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIyNjRmNGIzOWM2OWVlNmJlNTk1YzU2MTEwZWFhMjM2MDBmNzVlNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-11T05:07:27Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-11T17:57:30Z"}, "message": "compiler: encode user visible names if necessary\n\nAvoid putting weird characters into the user visible name.\nIt breaks stabs in particular, and may also cause debugger problems.\nInstead, encode those names, and use a \"g.\" prefix to tell the debugger.\n\nAlso dereference the type for the name of a recover thunk, to avoid a\npointless '*' that gets encoded.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/277232", "tree": {"sha": "11c1b635b052f87aaec7bb463b80443894b740aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11c1b635b052f87aaec7bb463b80443894b740aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab264f4b39c69ee6be595c56110eaa23600f75e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab264f4b39c69ee6be595c56110eaa23600f75e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab264f4b39c69ee6be595c56110eaa23600f75e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab264f4b39c69ee6be595c56110eaa23600f75e7/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e36ce56e81b440a97b32e527f208f26923b7aed2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e36ce56e81b440a97b32e527f208f26923b7aed2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e36ce56e81b440a97b32e527f208f26923b7aed2"}], "stats": {"total": 203, "additions": 144, "deletions": 59}, "files": [{"sha": "681debb0392d76883746b0636a5c794c0ab9d757", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab264f4b39c69ee6be595c56110eaa23600f75e7/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab264f4b39c69ee6be595c56110eaa23600f75e7/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=ab264f4b39c69ee6be595c56110eaa23600f75e7", "patch": "@@ -1,4 +1,4 @@\n-0d0b423739b2fee9788cb6cb8af9ced29375e545\n+3e8f49a2137a87fdaba51c3002ddbe41ab18ed46\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "49d7bd9b98ad6b7dc83ab24c663210872b8402f1", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab264f4b39c69ee6be595c56110eaa23600f75e7/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab264f4b39c69ee6be595c56110eaa23600f75e7/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=ab264f4b39c69ee6be595c56110eaa23600f75e7", "patch": "@@ -67,7 +67,7 @@ class Backend_name\n  public:\n   Backend_name()\n     : prefix_(NULL), components_(), count_(0), suffix_(),\n-      is_asm_name_(false)\n+      is_asm_name_(false), is_non_identifier_(false)\n   {}\n \n   // Set the prefix.  Prefixes are always constant strings.\n@@ -120,6 +120,18 @@ class Backend_name\n     this->is_asm_name_ = true;\n   }\n \n+  // Whether some component includes some characters that can't appear\n+  // in an identifier.\n+  bool\n+  is_non_identifier() const\n+  { return this->is_non_identifier_; }\n+\n+  // Record that some component includes some character that can't\n+  // appear in an identifier.\n+  void\n+  set_is_non_identifier()\n+  { this->is_non_identifier_ = true; }\n+\n   // Get the user visible name.\n   std::string\n   name() const;\n@@ -150,6 +162,9 @@ class Backend_name\n   std::string suffix_;\n   // True if components_[0] is an assembler name specified by the user.\n   bool is_asm_name_;\n+  // True if some component includes some character that can't\n+  // normally appear in an identifier.\n+  bool is_non_identifier_;\n };\n \n // An initialization function for an imported package.  This is a"}, {"sha": "f85d84ceadf86055a530f7242d929cf23836f914", "filename": "gcc/go/gofrontend/names.cc", "status": "modified", "additions": 102, "deletions": 34, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab264f4b39c69ee6be595c56110eaa23600f75e7/gcc%2Fgo%2Fgofrontend%2Fnames.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab264f4b39c69ee6be595c56110eaa23600f75e7/gcc%2Fgo%2Fgofrontend%2Fnames.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fnames.cc?ref=ab264f4b39c69ee6be595c56110eaa23600f75e7", "patch": "@@ -186,6 +186,20 @@\n // struct tag, the brace or backslash will be backslash quoted, before\n // underscore encoding.\n //\n+// Many of these names will be visible in the debugger.  The debugger\n+// will be given these names before applying any underscore encoding.\n+// These user names do not have to be unique--they are only used by\n+// the debugger, not the linker--so this is OK.  However, there is an\n+// exception: if the name would otherwise include characters that\n+// can't normally appear in an identifier, then the user name will\n+// also be underscore encoded.  This avoids problems with\n+// communicating the debug info to the assembler and with handling the\n+// debug info in the debugger.  A Go-aware debugger will need to know\n+// whether to apply underscore decoding to a name before showing it to\n+// the user.  We indicate this by adding a prefix of \"g.\", and\n+// assuming that cases of a package path of \"g\" are unusual.  This\n+// prefix will only appear in the user name, not the assembler name.\n+//\n // The underscore encoding is, naturally, an underscore followed by\n // other characters.  As there are various characters that commonly\n // appear in type literals and in package paths, we have a set of\n@@ -512,7 +526,7 @@ Gogo::recover_thunk_name(const std::string& name, const Type* rtype)\n   if (rtype != NULL)\n     {\n       Backend_name bname;\n-      rtype->backend_name(this, &bname);\n+      rtype->deref()->backend_name(this, &bname);\n       ret = bname.name();\n       ret.append(1, '.');\n     }\n@@ -634,81 +648,99 @@ Type::backend_name(Gogo* gogo, Backend_name* bname) const\n     }\n \n   std::string name;\n+  bool is_non_identifier = false;\n \n   // The do_symbol_name virtual function will set RET to the mangled\n   // name before encoding.\n-  this->do_mangled_name(gogo, &name);\n+  this->do_mangled_name(gogo, &name, &is_non_identifier);\n \n   bname->add(name);\n+  if (is_non_identifier)\n+    bname->set_is_non_identifier();\n }\n \n // The mangled name is implemented as a method on each instance of\n // Type.\n \n void\n-Error_type::do_mangled_name(Gogo*, std::string* ret) const\n+Error_type::do_mangled_name(Gogo*, std::string* ret,\n+\t\t\t    bool* is_non_identifier) const\n {\n   ret->append(\"{error}\");\n+  *is_non_identifier = true;\n }\n \n void\n-Void_type::do_mangled_name(Gogo*, std::string* ret) const\n+Void_type::do_mangled_name(Gogo*, std::string* ret,\n+\t\t\t   bool* is_non_identifier) const\n {\n   ret->append(\"{void}\");\n+  *is_non_identifier = true;\n }\n \n void\n-Boolean_type::do_mangled_name(Gogo*, std::string* ret) const\n+Boolean_type::do_mangled_name(Gogo*, std::string* ret, bool*) const\n {\n   ret->append(\"bool\");\n }\n \n void\n-Integer_type::do_mangled_name(Gogo*, std::string* ret) const\n+Integer_type::do_mangled_name(Gogo*, std::string* ret,\n+\t\t\t      bool* is_non_identifier) const\n {\n   char buf[100];\n   snprintf(buf, sizeof buf, \"%s%si%d\",\n \t   this->is_abstract_ ? \"{abstract}\" : \"\",\n \t   this->is_unsigned_ ? \"u\" : \"\",\n \t   this->bits_);\n   ret->append(buf);\n+  if (this->is_abstract_)\n+    *is_non_identifier = true;\n }\n \n void\n-Float_type::do_mangled_name(Gogo*, std::string* ret) const\n+Float_type::do_mangled_name(Gogo*, std::string* ret,\n+\t\t\t    bool* is_non_identifier) const\n {\n   char buf[100];\n   snprintf(buf, sizeof buf, \"%sfloat%d\",\n \t   this->is_abstract_ ? \"{abstract}\" : \"\",\n \t   this->bits_);\n   ret->append(buf);\n+  if (this->is_abstract_)\n+    *is_non_identifier = true;\n }\n \n void\n-Complex_type::do_mangled_name(Gogo*, std::string* ret) const\n+Complex_type::do_mangled_name(Gogo*, std::string* ret,\n+\t\t\t      bool* is_non_identifier) const\n {\n   char buf[100];\n   snprintf(buf, sizeof buf, \"%sc%d\",\n \t   this->is_abstract_ ? \"{abstract}\" : \"\",\n \t   this->bits_);\n   ret->append(buf);\n+  if (this->is_abstract_)\n+    *is_non_identifier = true;\n }\n \n void\n-String_type::do_mangled_name(Gogo*, std::string* ret) const\n+String_type::do_mangled_name(Gogo*, std::string* ret, bool*) const\n {\n   ret->append(\"string\");\n }\n \n void\n-Function_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n+Function_type::do_mangled_name(Gogo* gogo, std::string* ret,\n+\t\t\t       bool* is_non_identifier) const\n {\n   ret->append(\"func\");\n \n   if (this->receiver_ != NULL)\n     {\n       ret->push_back('(');\n-      this->append_mangled_name(this->receiver_->type(), gogo, ret);\n+      this->append_mangled_name(this->receiver_->type(), gogo, ret,\n+\t\t\t\tis_non_identifier);\n       ret->append(\")\");\n     }\n \n@@ -727,7 +759,8 @@ Function_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n \t    ret->push_back(',');\n \t  if (this->is_varargs_ && p + 1 == params->end())\n \t    ret->append(\"...\");\n-\t  this->append_mangled_name(p->type(), gogo, ret);\n+\t  this->append_mangled_name(p->type(), gogo, ret,\n+\t\t\t\t    is_non_identifier);\n \t}\n     }\n   ret->push_back(')');\n@@ -745,27 +778,34 @@ Function_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n \t    first = false;\n \t  else\n \t    ret->append(\",\");\n-\t  this->append_mangled_name(p->type(), gogo, ret);\n+\t  this->append_mangled_name(p->type(), gogo, ret, is_non_identifier);\n \t}\n     }\n   ret->push_back(')');\n+\n+  *is_non_identifier = true;\n }\n \n void\n-Pointer_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n+Pointer_type::do_mangled_name(Gogo* gogo, std::string* ret,\n+\t\t\t      bool* is_non_identifier) const\n {\n   ret->push_back('*');\n-  this->append_mangled_name(this->to_type_, gogo, ret);\n+  this->append_mangled_name(this->to_type_, gogo, ret, is_non_identifier);\n+  *is_non_identifier = true;\n }\n \n void\n-Nil_type::do_mangled_name(Gogo*, std::string* ret) const\n+Nil_type::do_mangled_name(Gogo*, std::string* ret,\n+\t\t\t  bool* is_non_identifier) const\n {\n   ret->append(\"{nil}\");\n+  *is_non_identifier = true;\n }\n \n void\n-Struct_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n+Struct_type::do_mangled_name(Gogo* gogo, std::string* ret,\n+\t\t\t     bool* is_non_identifier) const\n {\n   ret->append(\"struct{\");\n \n@@ -796,9 +836,10 @@ Struct_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n \t  if (p->is_anonymous()\n \t      && p->type()->named_type() != NULL\n \t      && p->type()->named_type()->is_alias())\n-\t    p->type()->named_type()->append_symbol_type_name(gogo, true, ret);\n+\t    p->type()->named_type()->append_symbol_type_name(gogo, true, ret,\n+\t\t\t\t\t\t\t     is_non_identifier);\n \t  else\n-\t    this->append_mangled_name(p->type(), gogo, ret);\n+\t    this->append_mangled_name(p->type(), gogo, ret, is_non_identifier);\n \n \t  if (p->has_tag())\n \t    {\n@@ -813,10 +854,13 @@ Struct_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n     }\n \n   ret->push_back('}');\n+\n+  *is_non_identifier = true;\n }\n \n void\n-Array_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n+Array_type::do_mangled_name(Gogo* gogo, std::string* ret,\n+\t\t\t    bool* is_non_identifier) const\n {\n   ret->push_back('[');\n   if (this->length_ != NULL)\n@@ -841,32 +885,38 @@ Array_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n \tret->append(\"x\");\n     }\n   ret->push_back(']');\n-  this->append_mangled_name(this->element_type_, gogo, ret);\n+  this->append_mangled_name(this->element_type_, gogo, ret, is_non_identifier);\n+  *is_non_identifier = true;\n }\n \n void\n-Map_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n+Map_type::do_mangled_name(Gogo* gogo, std::string* ret,\n+\t\t\t  bool* is_non_identifier) const\n {\n   ret->append(\"map[\");\n-  this->append_mangled_name(this->key_type_, gogo, ret);\n+  this->append_mangled_name(this->key_type_, gogo, ret, is_non_identifier);\n   ret->push_back(']');\n-  this->append_mangled_name(this->val_type_, gogo, ret);\n+  this->append_mangled_name(this->val_type_, gogo, ret, is_non_identifier);\n+  *is_non_identifier = true;\n }\n \n void\n-Channel_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n+Channel_type::do_mangled_name(Gogo* gogo, std::string* ret,\n+\t\t\t      bool* is_non_identifier) const\n {\n   if (!this->may_send_)\n     ret->append(\"<-\");\n   ret->append(\"chan\");\n   if (!this->may_receive_)\n     ret->append(\"<-\");\n   ret->push_back(' ');\n-  this->append_mangled_name(this->element_type_, gogo, ret);\n+  this->append_mangled_name(this->element_type_, gogo, ret, is_non_identifier);\n+  *is_non_identifier = true;\n }\n \n void\n-Interface_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n+Interface_type::do_mangled_name(Gogo* gogo, std::string* ret,\n+\t\t\t\tbool* is_non_identifier) const\n {\n   go_assert(this->methods_are_finalized_);\n \n@@ -892,25 +942,29 @@ Interface_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n \t      ret->push_back(' ');\n \t    }\n \n-\t  this->append_mangled_name(p->type(), gogo, ret);\n+\t  this->append_mangled_name(p->type(), gogo, ret, is_non_identifier);\n \t}\n       this->seen_ = false;\n     }\n \n   ret->push_back('}');\n+\n+  *is_non_identifier = true;\n }\n \n void\n-Named_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n+Named_type::do_mangled_name(Gogo* gogo, std::string* ret,\n+\t\t\t    bool* is_non_identifier) const\n {\n-  this->append_symbol_type_name(gogo, false, ret);\n+  this->append_symbol_type_name(gogo, false, ret, is_non_identifier);\n }\n \n void\n-Forward_declaration_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n+Forward_declaration_type::do_mangled_name(Gogo* gogo, std::string* ret,\n+\t\t\t\t\t  bool *is_non_identifier) const\n {\n   if (this->is_defined())\n-    this->append_mangled_name(this->real_type(), gogo, ret);\n+    this->append_mangled_name(this->real_type(), gogo, ret, is_non_identifier);\n   else\n     {\n       const Named_object* no = this->named_object();\n@@ -929,7 +983,8 @@ Forward_declaration_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n \n void\n Named_type::append_symbol_type_name(Gogo* gogo, bool use_alias,\n-\t\t\t\t    std::string* ret) const\n+\t\t\t\t    std::string* ret,\n+\t\t\t\t    bool* is_non_identifier) const\n {\n   if (this->is_error_)\n     return;\n@@ -938,7 +993,7 @@ Named_type::append_symbol_type_name(Gogo* gogo, bool use_alias,\n       if (this->seen_alias_)\n \treturn;\n       this->seen_alias_ = true;\n-      this->append_mangled_name(this->type_, gogo, ret);\n+      this->append_mangled_name(this->type_, gogo, ret, is_non_identifier);\n       this->seen_alias_ = false;\n       return;\n     }\n@@ -957,6 +1012,8 @@ Named_type::append_symbol_type_name(Gogo* gogo, bool use_alias,\n \t      Backend_name bname;\n \t      rcvr->type()->deref()->backend_name(gogo, &bname);\n \t      ret->append(bname.name());\n+\t      if (bname.is_non_identifier())\n+\t\t*is_non_identifier = true;\n \t    }\n \t  else if (this->in_function_->package() == NULL)\n \t    ret->append(gogo->pkgpath());\n@@ -1160,6 +1217,15 @@ Backend_name::name() const\n {\n   if (this->is_asm_name_)\n     return this->components_[0];\n+\n+  // If there is some character in the name that can't appear in an\n+  // identifier, use the assembler name as the user name.  This avoids\n+  // possible problems in the assembler or debugger.  The usual\n+  // demangling scheme will still work.  We use a prefix of \"g.\" to\n+  // tell the debugger about this.\n+  if (this->is_non_identifier_)\n+    return \"g.\" + this->asm_name();\n+\n   std::string ret;\n   if (this->prefix_ != NULL)\n     ret.append(this->prefix_);\n@@ -1203,6 +1269,8 @@ Backend_name::optional_asm_name() const\n {\n   if (this->is_asm_name_)\n     return \"\";\n+  if (this->is_non_identifier_)\n+    return this->asm_name();\n   for (int i = 0; i < this->count_; i++)\n     if (go_id_needs_encoding(this->components_[i]))\n       return this->asm_name();"}, {"sha": "f9097d5e130d57011955c31b849b1ecbced9cd0b", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab264f4b39c69ee6be595c56110eaa23600f75e7/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab264f4b39c69ee6be595c56110eaa23600f75e7/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=ab264f4b39c69ee6be595c56110eaa23600f75e7", "patch": "@@ -4602,7 +4602,7 @@ class Sink_type : public Type\n   { go_unreachable(); }\n \n   void\n-  do_mangled_name(Gogo*, std::string*) const\n+  do_mangled_name(Gogo*, std::string*, bool*) const\n   { go_unreachable(); }\n };\n \n@@ -5712,7 +5712,7 @@ class Call_multiple_result_type : public Type\n   { go_assert(saw_errors()); }\n \n   void\n-  do_mangled_name(Gogo*, std::string*) const\n+  do_mangled_name(Gogo*, std::string*, bool*) const\n   { go_assert(saw_errors()); }\n \n  private:"}, {"sha": "f2880f9c5d80e098d61e93c524afcbfa227047b4", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab264f4b39c69ee6be595c56110eaa23600f75e7/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab264f4b39c69ee6be595c56110eaa23600f75e7/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=ab264f4b39c69ee6be595c56110eaa23600f75e7", "patch": "@@ -1140,7 +1140,7 @@ class Type\n   do_reflection(Gogo*, std::string*) const = 0;\n \n   virtual void\n-  do_mangled_name(Gogo*, std::string*) const = 0;\n+  do_mangled_name(Gogo*, std::string*, bool*) const = 0;\n \n   virtual void\n   do_export(Export*) const;\n@@ -1202,8 +1202,9 @@ class Type\n \n   // For the benefit of child class mangling.\n   void\n-  append_mangled_name(const Type* type, Gogo* gogo, std::string* ret) const\n-  { type->do_mangled_name(gogo, ret); }\n+  append_mangled_name(const Type* type, Gogo* gogo, std::string* ret,\n+\t\t      bool *is_non_identifier) const\n+  { type->do_mangled_name(gogo, ret, is_non_identifier); }\n \n   // Return the backend representation for the underlying type of a\n   // named type.\n@@ -1664,7 +1665,7 @@ class Error_type : public Type\n   do_reflection(Gogo*, std::string*) const;\n \n   void\n-  do_mangled_name(Gogo*, std::string* ret) const;\n+  do_mangled_name(Gogo*, std::string*, bool*) const;\n };\n \n // The void type.\n@@ -1693,7 +1694,7 @@ class Void_type : public Type\n   { }\n \n   void\n-  do_mangled_name(Gogo*, std::string* ret) const;\n+  do_mangled_name(Gogo*, std::string*, bool*) const;\n };\n \n // The boolean type.\n@@ -1722,7 +1723,7 @@ class Boolean_type : public Type\n   { ret->append(\"bool\"); }\n \n   void\n-  do_mangled_name(Gogo*, std::string* ret) const;\n+  do_mangled_name(Gogo*, std::string*, bool*) const;\n };\n \n // The type of an integer.\n@@ -1808,7 +1809,7 @@ class Integer_type : public Type\n   do_reflection(Gogo*, std::string*) const;\n \n   void\n-  do_mangled_name(Gogo*, std::string*) const;\n+  do_mangled_name(Gogo*, std::string*, bool*) const;\n \n  private:\n   Integer_type(bool is_abstract, bool is_unsigned, int bits,\n@@ -1894,7 +1895,7 @@ class Float_type : public Type\n   do_reflection(Gogo*, std::string*) const;\n \n   void\n-  do_mangled_name(Gogo*, std::string*) const;\n+  do_mangled_name(Gogo*, std::string*, bool*) const;\n \n  private:\n   Float_type(bool is_abstract, int bits, int runtime_type_kind)\n@@ -1972,7 +1973,7 @@ class Complex_type : public Type\n   do_reflection(Gogo*, std::string*) const;\n \n   void\n-  do_mangled_name(Gogo*, std::string*) const;\n+  do_mangled_name(Gogo*, std::string*, bool*) const;\n \n  private:\n   Complex_type(bool is_abstract, int bits, int runtime_type_kind)\n@@ -2026,7 +2027,7 @@ class String_type : public Type\n   do_reflection(Gogo*, std::string*) const;\n \n   void\n-  do_mangled_name(Gogo*, std::string* ret) const;\n+  do_mangled_name(Gogo*, std::string*, bool*) const;\n \n  private:\n   // The named string type.\n@@ -2186,7 +2187,7 @@ class Function_type : public Type\n   do_reflection(Gogo*, std::string*) const;\n \n   void\n-  do_mangled_name(Gogo*, std::string*) const;\n+  do_mangled_name(Gogo*, std::string*, bool*) const;\n \n   void\n   do_export(Export*) const;\n@@ -2315,7 +2316,7 @@ class Pointer_type : public Type\n   do_reflection(Gogo*, std::string*) const;\n \n   void\n-  do_mangled_name(Gogo*, std::string*) const;\n+  do_mangled_name(Gogo*, std::string*, bool*) const;\n \n   void\n   do_export(Export*) const;\n@@ -2353,7 +2354,7 @@ class Nil_type : public Type\n   { go_unreachable(); }\n \n   void\n-  do_mangled_name(Gogo*, std::string* ret) const;\n+  do_mangled_name(Gogo*, std::string*, bool*) const;\n };\n \n // The type of a field in a struct.\n@@ -2687,7 +2688,7 @@ class Struct_type : public Type\n   do_reflection(Gogo*, std::string*) const;\n \n   void\n-  do_mangled_name(Gogo*, std::string*) const;\n+  do_mangled_name(Gogo*, std::string*, bool*) const;\n \n   void\n   do_export(Export*) const;\n@@ -2870,7 +2871,7 @@ class Array_type : public Type\n   do_reflection(Gogo*, std::string*) const;\n \n   void\n-  do_mangled_name(Gogo*, std::string*) const;\n+  do_mangled_name(Gogo*, std::string*, bool*) const;\n \n   void\n   do_export(Export*) const;\n@@ -3008,7 +3009,7 @@ class Map_type : public Type\n   do_reflection(Gogo*, std::string*) const;\n \n   void\n-  do_mangled_name(Gogo*, std::string*) const;\n+  do_mangled_name(Gogo*, std::string*, bool*) const;\n \n   void\n   do_export(Export*) const;\n@@ -3122,7 +3123,7 @@ class Channel_type : public Type\n   do_reflection(Gogo*, std::string*) const;\n \n   void\n-  do_mangled_name(Gogo*, std::string*) const;\n+  do_mangled_name(Gogo*, std::string*, bool*) const;\n \n   void\n   do_export(Export*) const;\n@@ -3298,7 +3299,7 @@ class Interface_type : public Type\n   do_reflection(Gogo*, std::string*) const;\n \n   void\n-  do_mangled_name(Gogo*, std::string*) const;\n+  do_mangled_name(Gogo*, std::string*, bool*) const;\n \n   void\n   do_export(Export*) const;\n@@ -3572,7 +3573,8 @@ class Named_type : public Type\n   // Append the symbol type name as for Type::append_mangled_name,\n   // but if USE_ALIAS use the alias name rather than the alias target.\n   void\n-  append_symbol_type_name(Gogo*, bool use_alias, std::string*) const;\n+  append_symbol_type_name(Gogo*, bool use_alias, std::string*,\n+\t\t\t  bool* is_non_identifier) const;\n \n   // Import a named type.\n   static void\n@@ -3619,7 +3621,7 @@ class Named_type : public Type\n   do_reflection(Gogo*, std::string*) const;\n \n   void\n-  do_mangled_name(Gogo*, std::string* ret) const;\n+  do_mangled_name(Gogo*, std::string*, bool*) const;\n \n   void\n   do_export(Export*) const;\n@@ -3783,7 +3785,7 @@ class Forward_declaration_type : public Type\n   do_reflection(Gogo*, std::string*) const;\n \n   void\n-  do_mangled_name(Gogo*, std::string* ret) const;\n+  do_mangled_name(Gogo*, std::string*, bool*) const;\n \n   void\n   do_export(Export*) const;"}]}