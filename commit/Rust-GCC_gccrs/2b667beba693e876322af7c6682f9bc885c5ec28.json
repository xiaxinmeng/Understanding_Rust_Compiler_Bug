{"sha": "2b667beba693e876322af7c6682f9bc885c5ec28", "node_id": "C_kwDOANBUbNoAKDJiNjY3YmViYTY5M2U4NzYzMjJhZjdjNjY4MmY5YmM4ODVjNWVjMjg", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-23T22:16:30Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-24T14:18:11Z"}, "message": "libstdc++: Simplify detection idiom using concepts\n\nAdd a simpler definition of std::__detected_or using concepts.  This\nalso replaces the __detector::value_t member which should have been using\na reserved name.\n\nUse __detected_or in pointer_traits.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/alloc_traits.h (allocator_traits::is_always_equal):\n\tOnly instantiate is_empty if needed.\n\t* include/bits/ptr_traits.h (__ptr_traits_impl::difference_type)\n\t(__ptr_traits_impl::rebind): Use __detected_or.\n\t* include/experimental/type_traits (is_same_v): Add a partial\n\tspecialization instead of instantiating the std::is_same class\n\ttemplate.\n\t(detected_t): Redefine in terms of detected_or_t.\n\t(is_detected, is_detected_v): Redefine in terms of detected_t.\n\t* include/std/type_traits [__cpp_concepts] (__detected_or): Add\n\tnew definition using concepts.\n\t(__detector::value_t): Rename to __is_detected.\n\t* testsuite/17_intro/names.cc: Check value_t isn't used.", "tree": {"sha": "9e72c426022758ff0c98a38fda2a510b647d3d62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e72c426022758ff0c98a38fda2a510b647d3d62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b667beba693e876322af7c6682f9bc885c5ec28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b667beba693e876322af7c6682f9bc885c5ec28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b667beba693e876322af7c6682f9bc885c5ec28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b667beba693e876322af7c6682f9bc885c5ec28/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad2aab5c816a6fd56b46210c0a4a4c6243da1de9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad2aab5c816a6fd56b46210c0a4a4c6243da1de9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad2aab5c816a6fd56b46210c0a4a4c6243da1de9"}], "stats": {"total": 83, "additions": 44, "deletions": 39}, "files": [{"sha": "8479bfd612f6ea831a773b441c098f8d6aae5019", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b667beba693e876322af7c6682f9bc885c5ec28/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b667beba693e876322af7c6682f9bc885c5ec28/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=2b667beba693e876322af7c6682f9bc885c5ec28", "patch": "@@ -74,7 +74,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Tp>\n       using __pocs = typename _Tp::propagate_on_container_swap;\n     template<typename _Tp>\n-      using __equal = typename _Tp::is_always_equal;\n+      using __equal = __type_identity<typename _Tp::is_always_equal>;\n   };\n \n   template<typename _Alloc, typename _Up>\n@@ -209,7 +209,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * otherwise @c is_empty<Alloc>::type\n       */\n       using is_always_equal\n-\t= __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;\n+\t= typename __detected_or_t<is_empty<_Alloc>, __equal, _Alloc>::type;\n \n       template<typename _Tp>\n \tusing rebind_alloc = __alloc_rebind<_Alloc, _Tp>;"}, {"sha": "ae8810706abfe12d9a534bfe1fd1ca30decb7efe", "filename": "libstdc++-v3/include/bits/ptr_traits.h", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b667beba693e876322af7c6682f9bc885c5ec28/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b667beba693e876322af7c6682f9bc885c5ec28/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h?ref=2b667beba693e876322af7c6682f9bc885c5ec28", "patch": "@@ -144,29 +144,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __ptr_traits_impl : __ptr_traits_ptr_to<_Ptr, _Elt>\n     {\n     private:\n-      template<typename _Tp, typename = void>\n-\tstruct __difference { using type = ptrdiff_t; };\n-\n       template<typename _Tp>\n-#if __cpp_concepts\n-\trequires requires { typename _Tp::difference_type; }\n-\tstruct __difference<_Tp>\n-#else\n-\tstruct __difference<_Tp, __void_t<typename _Tp::difference_type>>\n-#endif\n-\t{ using type = typename _Tp::difference_type; };\n-\n-      template<typename _Tp, typename _Up, typename = void>\n-\tstruct __rebind : __replace_first_arg<_Tp, _Up> { };\n+\tusing __diff_t = typename _Tp::difference_type;\n \n       template<typename _Tp, typename _Up>\n-#if __cpp_concepts\n-\trequires requires { typename _Tp::template rebind<_Up>; }\n-\tstruct __rebind<_Tp, _Up>\n-#else\n-\tstruct __rebind<_Tp, _Up, __void_t<typename _Tp::template rebind<_Up>>>\n-#endif\n-\t{ using type = typename _Tp::template rebind<_Up>; };\n+\tusing __rebind = __type_identity<typename _Tp::template rebind<_Up>>;\n \n     public:\n       /// The pointer type.\n@@ -176,11 +158,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using element_type = _Elt;\n \n       /// The type used to represent the difference between two pointers.\n-      using difference_type = typename __difference<_Ptr>::type;\n+      using difference_type = __detected_or_t<ptrdiff_t, __diff_t, _Ptr>;\n \n       /// A pointer to a different type.\n       template<typename _Up>\n-        using rebind = typename __rebind<_Ptr, _Up>::type;\n+\tusing rebind = typename __detected_or_t<__replace_first_arg<_Ptr, _Up>,\n+\t\t\t\t\t\t__rebind, _Ptr, _Up>::type;\n     };\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS"}, {"sha": "fa25a1c2be26e370e6e58ce49370fb69ddcb7474", "filename": "libstdc++-v3/include/experimental/type_traits", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b667beba693e876322af7c6682f9bc885c5ec28/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b667beba693e876322af7c6682f9bc885c5ec28/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftype_traits?ref=2b667beba693e876322af7c6682f9bc885c5ec28", "patch": "@@ -223,7 +223,9 @@ template <typename _Tp, unsigned _Idx = 0>\n \n // See C++14 20.10.6, type relations\n template <typename _Tp, typename _Up>\n-  constexpr bool is_same_v = is_same<_Tp, _Up>::value;\n+  constexpr bool is_same_v = false;\n+template <typename _Tp>\n+  constexpr bool is_same_v<_Tp, _Tp> = true;\n template <typename _Base, typename _Derived>\n   constexpr bool is_base_of_v = is_base_of<_Base, _Derived>::value;\n template <typename _From, typename _To>\n@@ -266,23 +268,21 @@ struct nonesuch : private __nonesuchbase\n };\n #pragma GCC diagnostic pop\n \n-template<template<typename...> class _Op, typename... _Args>\n-  using is_detected\n-    = typename std::__detector<nonesuch, void, _Op, _Args...>::value_t;\n-\n-template<template<typename...> class _Op, typename... _Args>\n-  constexpr bool is_detected_v = is_detected<_Op, _Args...>::value;\n-\n-template<template<typename...> class _Op, typename... _Args>\n-  using detected_t\n-    = typename std::__detector<nonesuch, void, _Op, _Args...>::type;\n-\n template<typename _Default, template<typename...> class _Op, typename... _Args>\n   using detected_or = std::__detected_or<_Default, _Op, _Args...>;\n \n template<typename _Default, template<typename...> class _Op, typename... _Args>\n   using detected_or_t = typename detected_or<_Default, _Op, _Args...>::type;\n \n+template<template<typename...> class _Op, typename... _Args>\n+  using detected_t = detected_or_t<nonesuch, _Op, _Args...>;\n+\n+template<template<typename...> class _Op, typename... _Args>\n+  using is_detected = typename detected_or<void, _Op, _Args...>::__is_detected;\n+\n+template<template<typename...> class _Op, typename... _Args>\n+  constexpr bool is_detected_v = is_detected<_Op, _Args...>::value;\n+\n template<typename _Expected, template<typename...> class _Op, typename... _Args>\n   using is_detected_exact = is_same<_Expected, detected_t<_Op, _Args...>>;\n "}, {"sha": "c5853fcad90688def223411acf23d84feb00a62c", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b667beba693e876322af7c6682f9bc885c5ec28/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b667beba693e876322af7c6682f9bc885c5ec28/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=2b667beba693e876322af7c6682f9bc885c5ec28", "patch": "@@ -2551,28 +2551,49 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @cond undocumented\n \n+  // Detection idiom.\n+  // Detect whether _Op<_Args...> is a valid type, use default _Def if not.\n+\n+#if __cpp_concepts\n+  // Implementation of the detection idiom (negative case).\n+  template<typename _Def, template<typename...> class _Op, typename... _Args>\n+    struct __detected_or\n+    {\n+      using type = _Def;\n+      using __is_detected = false_type;\n+    };\n+\n+  // Implementation of the detection idiom (positive case).\n+  template<typename _Def, template<typename...> class _Op, typename... _Args>\n+    requires requires { typename _Op<_Args...>; }\n+    struct __detected_or<_Def, _Op, _Args...>\n+    {\n+      using type = _Op<_Args...>;\n+      using __is_detected = true_type;\n+    };\n+#else\n   /// Implementation of the detection idiom (negative case).\n   template<typename _Default, typename _AlwaysVoid,\n \t   template<typename...> class _Op, typename... _Args>\n     struct __detector\n     {\n-      using value_t = false_type;\n       using type = _Default;\n+      using __is_detected = false_type;\n     };\n \n   /// Implementation of the detection idiom (positive case).\n   template<typename _Default, template<typename...> class _Op,\n \t    typename... _Args>\n     struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>\n     {\n-      using value_t = true_type;\n       using type = _Op<_Args...>;\n+      using __is_detected = true_type;\n     };\n \n-  // Detect whether _Op<_Args...> is a valid type, use _Default if not.\n   template<typename _Default, template<typename...> class _Op,\n \t   typename... _Args>\n     using __detected_or = __detector<_Default, void, _Op, _Args...>;\n+#endif // __cpp_concepts\n \n   // _Op<_Args...> if that is a valid type, otherwise _Default.\n   template<typename _Default, template<typename...> class _Op,"}, {"sha": "6490cd63307108f61b43610694cb2f9bd049e89e", "filename": "libstdc++-v3/testsuite/17_intro/names.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b667beba693e876322af7c6682f9bc885c5ec28/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fnames.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b667beba693e876322af7c6682f9bc885c5ec28/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fnames.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fnames.cc?ref=2b667beba693e876322af7c6682f9bc885c5ec28", "patch": "@@ -112,6 +112,7 @@\n #define tmp (\n #define sz (\n #define token (\n+#define value_t (\n \n #if __cplusplus < 201103L\n #define uses_allocator  ("}]}