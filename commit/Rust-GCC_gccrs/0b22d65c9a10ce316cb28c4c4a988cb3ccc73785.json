{"sha": "0b22d65c9a10ce316cb28c4c4a988cb3ccc73785", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIyMmQ2NWM5YTEwY2UzMTZjYjI4YzRjNGE5ODhjYjNjY2M3Mzc4NQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@rabi.columbia.edu", "date": "1999-03-15T18:42:46Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-03-15T18:42:46Z"}, "message": "cppinit.c: Instead of one pending list...\n\n1999-03-15 21:39 -0500  Zack Weinberg  <zack@rabi.columbia.edu>\n\t* cppinit.c: Instead of one pending list, keep separate lists\n\tfor each category of pending option: -D/-U, -A, -include,\n\t-imacros.  Move the four partial include-path lists into the\n\tpending block.  Use head and tail pointers so we don't ever\n\thave to reverse the lists.\n\t(cpp_start_read): Break out blocks of code to their own\n\tfunctions: install_predefs and initialize_dependency_output.\n\tUse path_include for C_INCLUDE_PATH and friends as well as\n\tCPATH.  Remove include_defaults gunk.  Warn about the\n\tcombination of -lang-chill and -trigraphs.  Optimize string\n\tbashing.  Walk each pending list once, deallocating as we go.\n\t(append_include_chain): Brought over from cppfiles.c.  Mark\n\tdirs as system include dirs if and only if appending to\n\tsystem include path. If opts->verbose, print a notice when a\n\tdir is dropped from the include path because it doesn't\n\texist.  Fix memory leak: this function is not supposed to copy\n\tits DIR argument.\n\t(nreverse_pending, push_pending): Removed.\n\t(APPEND): New macro for adding to pending lists.\n\t(path_include): Can now add to any partial include path.\n\t(base_name): Bring over from cccp.c.\n\t(cpp_options_init): Allocate the pending block.\n\t(cpp_handle_option): Add --version.  Exit after --help.  Fix\n\tformatting.  Order -ifoo options by frequency of usage.\n\t(install_predefs): New function, simplified version of code\n\tthat was in cpp_start_read.\n\t(initialize_dependency_output): Likewise.  Understand OBJECT_SUFFIX.\n\t* cppfiles.c (simplify_pathname): Export.\n\t(merge_include_chains):  Don't nreverse the lists.  If\n\topts->verbose, print a notice when a duplicate dir is detected\n\tand dropped from the include path.\n\t(finclude): Fix excessive cleverness in setting\n\tfp->system_header_p.\n\t(actual_directory): Set x->sysp from\n\tCPP_BUFFER (pfile)->system_header_p so that one system header\n\tmay include another with \"\".\n\t(deps_output): Fix double adjustment of deps_size which would\n\tcause all dependencies after the first two lines to be lost.\n\t* cpplib.c (cpp_unassert): New function.\n\t* cpplib.h: Lay out struct cpp_pending here.  Adjust\n\tprototypes.  Add include_prefix_len to struct cpp_options.\n\nFrom-SVN: r25793", "tree": {"sha": "f623648ee905a401d8832cf9a4d6cb970ff07507", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f623648ee905a401d8832cf9a4d6cb970ff07507"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b22d65c9a10ce316cb28c4c4a988cb3ccc73785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b22d65c9a10ce316cb28c4c4a988cb3ccc73785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b22d65c9a10ce316cb28c4c4a988cb3ccc73785", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b22d65c9a10ce316cb28c4c4a988cb3ccc73785/comments", "author": null, "committer": null, "parents": [{"sha": "56dc4d15c417a62c298d31654d1be448b49c364a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56dc4d15c417a62c298d31654d1be448b49c364a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56dc4d15c417a62c298d31654d1be448b49c364a"}], "stats": {"total": 2167, "additions": 1142, "deletions": 1025}, "files": [{"sha": "dd06ea2e22673ad91ee8a8aa92ae67ea202cd860", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b22d65c9a10ce316cb28c4c4a988cb3ccc73785/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b22d65c9a10ce316cb28c4c4a988cb3ccc73785/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b22d65c9a10ce316cb28c4c4a988cb3ccc73785", "patch": "@@ -1,3 +1,52 @@\n+1999-03-15 21:39 -0500  Zack Weinberg  <zack@rabi.columbia.edu>\n+\n+\t* cppinit.c: Instead of one pending list, keep separate lists\n+\tfor each category of pending option: -D/-U, -A, -include,\n+\t-imacros.  Move the four partial include-path lists into the\n+\tpending block.  Use head and tail pointers so we don't ever\n+\thave to reverse the lists.\n+\n+\t(cpp_start_read): Break out blocks of code to their own\n+\tfunctions: install_predefs and initialize_dependency_output.\n+\tUse path_include for C_INCLUDE_PATH and friends as well as\n+\tCPATH.  Remove include_defaults gunk.  Warn about the\n+\tcombination of -lang-chill and -trigraphs.  Optimize string\n+\tbashing.  Walk each pending list once, deallocating as we go.\n+\n+\t(append_include_chain): Brought over from cppfiles.c.  Mark\n+\tdirs as system include dirs if and only if appending to\n+\tsystem include path. If opts->verbose, print a notice when a\n+\tdir is dropped from the include path because it doesn't\n+\texist.  Fix memory leak: this function is not supposed to copy\n+\tits DIR argument.\n+\n+\t(nreverse_pending, push_pending): Removed.\n+\t(APPEND): New macro for adding to pending lists.\n+\t(path_include): Can now add to any partial include path.\n+\t(base_name): Bring over from cccp.c.\n+\t(cpp_options_init): Allocate the pending block.\n+\t(cpp_handle_option): Add --version.  Exit after --help.  Fix\n+\tformatting.  Order -ifoo options by frequency of usage.\n+\t(install_predefs): New function, simplified version of code\n+\tthat was in cpp_start_read.\n+\t(initialize_dependency_output): Likewise.  Understand OBJECT_SUFFIX.\n+\n+\t* cppfiles.c (simplify_pathname): Export.\n+\t(merge_include_chains):  Don't nreverse the lists.  If\n+\topts->verbose, print a notice when a duplicate dir is detected\n+\tand dropped from the include path.\n+\t(finclude): Fix excessive cleverness in setting\n+\tfp->system_header_p.\n+\t(actual_directory): Set x->sysp from\n+\tCPP_BUFFER (pfile)->system_header_p so that one system header\n+\tmay include another with \"\".\n+\t(deps_output): Fix double adjustment of deps_size which would\n+\tcause all dependencies after the first two lines to be lost.\n+\n+\t* cpplib.c (cpp_unassert): New function.\n+\t* cpplib.h: Lay out struct cpp_pending here.  Adjust\n+\tprototypes.  Add include_prefix_len to struct cpp_options.\n+\n Mon Mar 15 16:01:52 1999  Jim Wilson  <wilson@cygnus.com>\n \n \t* config/misp/mips.h (REGISTER_MOVE_COST): Make the cost of moving"}, {"sha": "ef78ee34320724cc9af0c53f72d7df5e17b1b8d4", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 33, "deletions": 100, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b22d65c9a10ce316cb28c4c4a988cb3ccc73785/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b22d65c9a10ce316cb28c4c4a988cb3ccc73785/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=0b22d65c9a10ce316cb28c4c4a988cb3ccc73785", "patch": "@@ -43,7 +43,6 @@ static char *remap_filename \t\tPROTO ((cpp_reader *, char *,\n \t\t\t\t\t\tstruct file_name_list *));\n static long read_and_prescan\t\tPROTO ((cpp_reader *, cpp_buffer *,\n \t\t\t\t\t\tint, size_t));\n-static void simplify_pathname\t\tPROTO ((char *));\n static struct file_name_list *actual_directory PROTO ((cpp_reader *, char *));\n \n #if 0\n@@ -61,54 +60,6 @@ static void hack_vms_include_specification PROTO ((char *));\n #define INO_T_EQ(a, b) ((a) == (b))\n #endif\n \n-/* Append an entry for dir DIR to list LIST, simplifying it if\n-   possible.  SYS says whether this is a system include directory.\n-   *** DIR is modified in place.  It must be writable and permanently\n-   allocated. LIST is a pointer to the head pointer, because we actually\n-   *prepend* the dir, and reverse the list later (in merge_include_chains). */\n-void\n-append_include_chain (pfile, list, dir, sysp)\n-     cpp_reader *pfile;\n-     struct file_name_list **list;\n-     const char *dir;\n-     int sysp;\n-{\n-  struct file_name_list *new;\n-  struct stat st;\n-  unsigned int len;\n-  char * newdir = xstrdup (dir);\n-\n-  simplify_pathname (newdir);\n-  if (stat (newdir, &st))\n-    {\n-      /* Dirs that don't exist are silently ignored. */\n-      if (errno != ENOENT)\n-\tcpp_perror_with_name (pfile, newdir);\n-      return;\n-    }\n-\n-  if (!S_ISDIR (st.st_mode))\n-    {\n-      cpp_message (pfile, 1, \"%s: %s: Not a directory\", progname, newdir);\n-      return;\n-    }\n-\n-  len = strlen(newdir);\n-  if (len > pfile->max_include_len)\n-    pfile->max_include_len = len;\n-  \n-  new = (struct file_name_list *)xmalloc (sizeof (struct file_name_list));\n-  new->name = newdir;\n-  new->nlen = len;\n-  new->next = *list;\n-  new->ino  = st.st_ino;\n-  new->dev  = st.st_dev;\n-  new->sysp = sysp;\n-  new->name_map = NULL;\n-\n-  *list = new;\n-}\n-\n /* Merge the four include chains together in the order quote, bracket,\n    system, after.  Remove duplicate dirs (as determined by\n    INO_T_EQ()).  The system_include and after_include chains are never\n@@ -122,51 +73,19 @@ void\n merge_include_chains (opts)\n      struct cpp_options *opts;\n {\n-  struct file_name_list *prev, *next, *cur, *other;\n+  struct file_name_list *prev, *cur, *other;\n   struct file_name_list *quote, *brack, *systm, *after;\n   struct file_name_list *qtail, *btail, *stail, *atail;\n \n-  qtail = opts->quote_include;\n-  btail = opts->bracket_include;\n-  stail = opts->system_include;\n-  atail = opts->after_include;\n-\n-  /* Nreverse the four lists. */\n-  prev = 0;\n-  for (cur = qtail; cur; cur = next)\n-    {\n-      next = cur->next;\n-      cur->next = prev;\n-      prev = cur;\n-    }\n-  quote = prev;\n-\n-  prev = 0;\n-  for (cur = btail; cur; cur = next)\n-    {\n-      next = cur->next;\n-      cur->next = prev;\n-      prev = cur;\n-    }\n-  brack = prev;\n+  qtail = opts->pending->quote_tail;\n+  btail = opts->pending->brack_tail;\n+  stail = opts->pending->systm_tail;\n+  atail = opts->pending->after_tail;\n \n-  prev = 0;\n-  for (cur = stail; cur; cur = next)\n-    {\n-      next = cur->next;\n-      cur->next = prev;\n-      prev = cur;\n-    }\n-  systm = prev;\n-\n-  prev = 0;\n-  for (cur = atail; cur; cur = next)\n-    {\n-      next = cur->next;\n-      cur->next = prev;\n-      prev = cur;\n-    }\n-  after = prev;\n+  quote = opts->pending->quote_head;\n+  brack = opts->pending->brack_head;\n+  systm = opts->pending->systm_head;\n+  after = opts->pending->after_head;\n \n   /* Paste together bracket, system, and after include chains. */\n   if (stail)\n@@ -188,14 +107,20 @@ merge_include_chains (opts)\n      then we may lose directories from the <> search path that should\n      be there; consider -Ifoo -Ibar -I- -Ifoo -Iquux. It is however\n      safe to treat -Ibar -Ifoo -I- -Ifoo -Iquux as if written\n-     -Ibar -I- -Ifoo -Iquux. */\n+     -Ibar -I- -Ifoo -Iquux.\n+\n+     Note that this algorithm is quadratic in the number of -I switches,\n+     which is acceptable since there aren't usually that many of them.  */\n \n   for (cur = quote; cur; cur = cur->next)\n     {\n       for (other = quote; other != cur; other = other->next)\n         if (INO_T_EQ (cur->ino, other->ino)\n \t    && cur->dev == other->dev)\n           {\n+\t    if (opts->verbose)\n+\t      cpp_notice (\"ignoring duplicate directory `%s'\\n\", cur->name);\n+\n \t    prev->next = cur->next;\n \t    free (cur->name);\n \t    free (cur);\n@@ -212,6 +137,9 @@ merge_include_chains (opts)\n         if (INO_T_EQ (cur->ino, other->ino)\n \t    && cur->dev == other->dev)\n           {\n+\t    if (opts->verbose)\n+\t      cpp_notice (\"ignoring duplicate directory `%s'\\n\", cur->name);\n+\n \t    prev->next = cur->next;\n \t    free (cur->name);\n \t    free (cur);\n@@ -227,6 +155,10 @@ merge_include_chains (opts)\n         {\n \t  if (quote == qtail)\n \t    {\n+\t      if (opts->verbose)\n+\t\tcpp_notice (\"ignoring duplicate directory `%s'\\n\",\n+\t\t\t    quote->name);\n+\n \t      free (quote->name);\n \t      free (quote);\n \t      quote = brack;\n@@ -237,6 +169,10 @@ merge_include_chains (opts)\n \t      while (cur->next != qtail)\n \t\t  cur = cur->next;\n \t      cur->next = brack;\n+\t      if (opts->verbose)\n+\t\tcpp_notice (\"ignoring duplicate directory `%s'\\n\",\n+\t\t\t    qtail->name);\n+\n \t      free (qtail->name);\n \t      free (qtail);\n \t    }\n@@ -249,8 +185,6 @@ merge_include_chains (opts)\n \n   opts->quote_include = quote;\n   opts->bracket_include = brack;\n-  opts->system_include = NULL;\n-  opts->after_include = NULL;\n }\n \n /* Look up or add an entry to the table of all includes.  This table\n@@ -742,8 +676,8 @@ finclude (pfile, fd, ihash)\n   close (fd);\n   fp->rlimit = fp->alimit = fp->buf + length;\n   fp->cur = fp->buf;\n-  fp->system_header_p = (ihash->foundhere != ABSOLUTE_PATH\n-\t\t\t && ihash->foundhere->sysp);\n+  if (ihash->foundhere != ABSOLUTE_PATH)\n+      fp->system_header_p = ihash->foundhere->sysp;\n   fp->lineno = 1;\n   fp->colno = 1;\n   fp->cleanup = file_cleanup;\n@@ -816,7 +750,7 @@ actual_directory (pfile, fname)\n   x->nlen = dlen;\n   x->next = CPP_OPTIONS (pfile)->quote_include;\n   x->alloc = pfile->actual_dirs;\n-  x->sysp = 0;\n+  x->sysp = CPP_BUFFER (pfile)->system_header_p;\n   x->name_map = NULL;\n \n   pfile->actual_dirs = x;\n@@ -1063,12 +997,11 @@ deps_output (pfile, string, spacer)\n   if (pfile->deps_column > 0\n       && (pfile->deps_column + size) > MAX_OUTPUT_COLUMNS)\n     {\n-      size += 5;\n-      cr = 1;\n+      cr = 5;\n       pfile->deps_column = 0;\n     }\n \n-  if (pfile->deps_size + size + 8 > pfile->deps_allocated_size)\n+  if (pfile->deps_size + size + cr + 8 > pfile->deps_allocated_size)\n     {\n       pfile->deps_allocated_size = (pfile->deps_size + size + 50) * 2;\n       pfile->deps_buffer = (char *) xrealloc (pfile->deps_buffer,\n@@ -1105,7 +1038,7 @@ deps_output (pfile, string, spacer)\n    Guarantees no trailing slashes. All transforms reduce the length\n    of the string.\n  */\n-static void\n+void\n simplify_pathname (path)\n     char *path;\n {"}, {"sha": "c3933080c1fa11f6b70425bb71e183de1c8a8516", "filename": "gcc/cppinit.c", "status": "modified", "additions": 1022, "deletions": 914, "changes": 1936, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b22d65c9a10ce316cb28c4c4a988cb3ccc73785/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b22d65c9a10ce316cb28c4c4a988cb3ccc73785/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=0b22d65c9a10ce316cb28c4c4a988cb3ccc73785", "patch": "@@ -46,14 +46,6 @@ extern char *version_string;\n #define STANDARD_INCLUDE_DIR \"/usr/include\"\n #endif\n \n-/* Symbols to predefine.  */\n-\n-#ifdef CPP_PREDEFINES\n-static char *predefs = CPP_PREDEFINES;\n-#else\n-static char *predefs = \"\";\n-#endif\n-\n /* We let tm.h override the types used here, to handle trivial differences\n    such as the choice of unsigned int or long unsigned int for size_t.\n    When machines start needing nontrivial differences in the size type,\n@@ -92,22 +84,48 @@ static char *predefs = \"\";\n #define REGISTER_PREFIX \"\"\n #endif\n \n-/* #include \"file\" looks in source file dir, then stack.  */\n-/* #include <file> just looks in the stack.  */\n-/* -I directories are added to the end, then the defaults are added.  */\n-/* The */\n-static struct default_include {\n+/* Suffix for object files, and known input-file extensions. */\n+static char *known_suffixes[] =\n+{\n+  \".c\",  \".C\",   \".s\",   \".S\",   \".m\",\n+  \".cc\", \".cxx\", \".cpp\", \".cp\",  \".c++\",\n+  NULL\n+};\n+\n+#ifndef OBJECT_SUFFIX\n+# ifdef VMS\n+#  define OBJECT_SUFFIX \".obj\"\n+# else\n+#  define OBJECT_SUFFIX \".o\"\n+# endif\n+#endif\n+\n+\n+/* This is the default list of directories to search for include files.\n+   It may be overridden by the various -I and -ixxx options.\n+\n+   #include \"file\" looks in the same directory as the current file,\n+   then this list. \n+   #include <file> just looks in this list.\n+\n+   All these directories are treated as `system' include directories\n+   (they are not subject to pedantic warnings in some cases).  */\n+\n+static struct default_include\n+{\n   char *fname;\t\t\t/* The name of the directory.  */\n-  char *component;\t\t/* The component containing the directory */\n+  char *component;\t\t/* The component containing the directory\n+\t\t\t\t   (see update_path in prefix.c) */\n   int cplusplus;\t\t/* Only look here if we're compiling C++.  */\n   int cxx_aware;\t\t/* Includes in this directory don't need to\n \t\t\t\t   be wrapped in extern \"C\" when compiling\n-\t\t\t\t   C++.  */\n-} include_defaults_array[]\n+\t\t\t\t   C++.  This is not used anymore.  */\n+}\n+include_defaults_array[]\n #ifdef INCLUDE_DEFAULTS\n-  = INCLUDE_DEFAULTS;\n+= INCLUDE_DEFAULTS;\n #else\n-  = {\n+= {\n     /* Pick up GNU C++ specific include files.  */\n     { GPLUSPLUS_INCLUDE_DIR, \"G++\", 1, 1 },\n #ifdef CROSS_COMPILE\n@@ -116,7 +134,7 @@ static struct default_include {\n     { GCC_INCLUDE_DIR, \"GCC\", 0, 0 },\n     /* For cross-compilation, this dir name is generated\n        automatically in Makefile.in.  */\n-    { CROSS_INCLUDE_DIR, \"GCC\",0, 0 },\n+    { CROSS_INCLUDE_DIR, \"GCC\", 0, 0 },\n #ifdef TOOL_INCLUDE_DIR\n     /* This is another place that the target system's headers might be.  */\n     { TOOL_INCLUDE_DIR, \"BINUTILS\", 0, 1 },\n@@ -145,24 +163,53 @@ static struct default_include {\n     { STANDARD_INCLUDE_DIR, STANDARD_INCLUDE_COMPONENT, 0, 0 },\n #endif /* not CROSS_COMPILE */\n     { 0, 0, 0, 0 }\n-    };\n+  };\n #endif /* no INCLUDE_DEFAULTS */\n \n /* Internal structures and prototypes. */\n \n-struct cpp_pending\n+/* A `struct pending_option' remembers one -D, -A, -U, -include, or -imacros\n+   switch.  There are four lists: one for -D and -U, one for -A, one\n+   for -include, one for -imacros.  `undef' is set for -U, clear for\n+   -D, ignored for the others.\n+   (Future: add an equivalent of -U for -A) */\n+struct pending_option\n {\n-  struct cpp_pending *next;\n-  char *cmd;\n+  struct pending_option *next;\n   char *arg;\n+  int undef;\n };\n-static struct cpp_pending *nreverse_pending PARAMS ((struct cpp_pending *));\n+\n+#ifdef __STDC__\n+#define APPEND(pend, list, elt) \\\n+  do {  if (!(pend)->list##_head) (pend)->list##_head = (elt); \\\n+\telse (pend)->list##_tail->next = (elt); \\\n+\t(pend)->list##_tail = (elt); \\\n+  } while (0)\n+#else\n+#define APPEND(pend, list, elt) \\\n+  do {  if (!(pend)->list/**/_head) (pend)->list/**/_head = (elt); \\\n+\telse (pend)->list/**/_tail->next = (elt); \\\n+\t(pend)->list/**/_tail = (elt); \\\n+  } while (0)\n+#endif\n \n static void initialize_char_syntax\tPARAMS ((int));\n static void print_help                  PARAMS ((void));\n-static void path_include\t\tPARAMS ((cpp_reader *, char *));\n+static void path_include\t\tPARAMS ((cpp_reader *,\n+\t\t\t\t\t\t struct cpp_pending *,\n+\t\t\t\t\t\t char *, int));\n static void initialize_builtins\t\tPARAMS ((cpp_reader *));\n+static void append_include_chain\tPARAMS ((cpp_reader *,\n+\t\t\t\t\t\t struct cpp_pending *,\n+\t\t\t\t\t\t char *, int));\n \n+#ifdef CPP_PREDEFINES\n+static void install_predefs\t\tPARAMS ((cpp_reader *));\n+#endif\n+\n+/* Last argument to append_include_chain: chain to use */\n+enum { QUOTE = 0, BRACKET, SYSTEM, AFTER };\n \n /* If gcc is in use (stage2/stage3) we can make these tables initialized\n    data. */\n@@ -338,45 +385,121 @@ initialize_char_syntax (dollar_in_ident)\n    add all the names to the search path for include files.  */\n \n static void\n-path_include (pfile, path)\n+path_include (pfile, pend, list, path)\n      cpp_reader *pfile;\n-     char *path;\n+     struct cpp_pending *pend;\n+     char *list;\n+     int path;\n {\n-  char *p;\n-\n-  p = path;\n+  char *p, *q, *name;\n \n-  if (*p)\n-    while (1) {\n-      char *q = p;\n-      char *name;\n+  p = list;\n \n+  do\n+    {\n       /* Find the end of this name.  */\n+      q = p;\n       while (*q != 0 && *q != PATH_SEPARATOR) q++;\n-      if (p == q) {\n-\t/* An empty name in the path stands for the current directory.  */\n-\tname = (char *) xmalloc (2);\n-\tname[0] = '.';\n-\tname[1] = 0;\n-      } else {\n-\t/* Otherwise use the directory that is named.  */\n-\tname = (char *) xmalloc (q - p + 1);\n-\tbcopy (p, name, q - p);\n-\tname[q - p] = 0;\n-      }\n+      if (q == p)\n+\t{\n+\t  /* An empty name in the path stands for the current directory.  */\n+\t  name = (char *) xmalloc (2);\n+\t  name[0] = '.';\n+\t  name[1] = 0;\n+\t}\n+      else\n+\t{\n+\t  /* Otherwise use the directory that is named.  */\n+\t  name = (char *) xmalloc (q - p + 1);\n+\t  memcpy (name, p, q - p);\n+\t  name[q - p] = 0;\n+\t}\n \n-      append_include_chain (pfile,\n-\t\t\t    &(CPP_OPTIONS (pfile)->bracket_include), name, 0);\n+      append_include_chain (pfile, pend, name, path);\n \n       /* Advance past this name.  */\n-      p = q;\n-      if (*p == 0)\n+      if (*q == 0)\n \tbreak;\n-      /* Skip the colon.  */\n-      p++;\n+      p = q + 1;\n+    }\n+  while (1);\n+}\n+\n+/* Find the base name of a (partial) pathname FNAME.\n+   Returns a pointer into the string passed in.\n+   Accepts Unix (/-separated) paths on all systems,\n+   DOS and VMS paths on those systems.  */\n+static char *\n+base_name (fname)\n+     const char *fname;\n+{\n+  char *s = (char *)fname;\n+  char *p;\n+#if defined (__MSDOS__) || defined (_WIN32)\n+  if (ISALPHA (s[0]) && s[1] == ':') s += 2;\n+  if ((p = rindex (s, '\\\\'))) s = p + 1;\n+#elif defined VMS\n+  if ((p = rindex (s, ':'))) s = p + 1; /* Skip device.  */\n+  if ((p = rindex (s, ']'))) s = p + 1; /* Skip directory.  */\n+  if ((p = rindex (s, '>'))) s = p + 1; /* Skip alternate (int'n'l) dir.  */\n+#endif\n+  if ((p = rindex (s, '/'))) s = p + 1;\n+  return s;\n+}\n+     \n+\n+/* Append DIR to include path PATH.  DIR must be permanently allocated\n+   and writable. */\n+static void\n+append_include_chain (pfile, pend, dir, path)\n+     cpp_reader *pfile;\n+     struct cpp_pending *pend;\n+     char *dir;\n+     int path;\n+{\n+  struct file_name_list *new;\n+  struct stat st;\n+  unsigned int len;\n+\n+  simplify_pathname (dir);\n+  if (stat (dir, &st))\n+    {\n+      /* Dirs that don't exist are silently ignored. */\n+      if (errno != ENOENT)\n+\tcpp_perror_with_name (pfile, dir);\n+      else if (CPP_OPTIONS (pfile)->verbose)\n+\tcpp_notice (\"ignoring nonexistent directory `%s'\\n\", dir);\n+      return;\n+    }\n+\n+  if (!S_ISDIR (st.st_mode))\n+    {\n+      cpp_message (pfile, 1, \"%s: %s: Not a directory\", progname, dir);\n+      return;\n+    }\n+\n+  len = strlen (dir);\n+  if (len > pfile->max_include_len)\n+    pfile->max_include_len = len;\n+  \n+  new = (struct file_name_list *)xmalloc (sizeof (struct file_name_list));\n+  new->name = dir;\n+  new->nlen = len;\n+  new->ino  = st.st_ino;\n+  new->dev  = st.st_dev;\n+  new->sysp = (path == SYSTEM);\n+  new->name_map = NULL;\n+\n+  switch (path)\n+    {\n+    case QUOTE:\t\tAPPEND (pend, quote, new); break;\n+    case BRACKET:\tAPPEND (pend, brack, new); break;\n+    case SYSTEM:\tAPPEND (pend, systm, new); break;\n+    case AFTER:\t\tAPPEND (pend, after, new); break;\n     }\n }\n \n+\n /* Write out a #define command for the special named MACRO_NAME\n    to PFILE's token_buffer.  */\n \n@@ -396,47 +519,19 @@ dump_special_to_buffer (pfile, macro_name)\n   CPP_PUTC (pfile, '\\n');\n }\n \n-/* Pending-list utility routines.  Will go away soon.  */\n-static struct cpp_pending *\n-nreverse_pending (list)\n-     struct cpp_pending *list;\n-     \n-{\n-  register struct cpp_pending *prev = 0, *next, *pend;\n-  for (pend = list;  pend;  pend = next)\n-    {\n-      next = pend->next;\n-      pend->next = prev;\n-      prev = pend;\n-    }\n-  return prev;\n-}\n-\n-static void\n-push_pending (pfile, cmd, arg)\n-     cpp_reader *pfile;\n-     char *cmd;\n-     char *arg;\n-{\n-  struct cpp_pending *pend\n-    = (struct cpp_pending *) xmalloc (sizeof (struct cpp_pending));\n-  pend->cmd = cmd;\n-  pend->arg = arg;\n-  pend->next = CPP_OPTIONS (pfile)->pending;\n-  CPP_OPTIONS (pfile)->pending = pend;\n-}\n-\n-\n /* Initialize a cpp_options structure. */\n void\n cpp_options_init (opts)\n      cpp_options *opts;\n {\n-  bzero ((char *) opts, sizeof *opts);\n+  bzero ((char *) opts, sizeof (struct cpp_options));\n \n   opts->dollars_in_ident = 1;\n   opts->cplusplus_comments = 1;\n   opts->warn_import = 1;\n+\n+  opts->pending = (struct cpp_pending *) xmalloc (sizeof (struct cpp_pending));\n+  bzero ((char *) opts->pending, sizeof (struct cpp_pending));\n }\n \n /* Initialize a cpp_reader structure. */\n@@ -563,6 +658,139 @@ initialize_builtins (pfile)\n     }\n }\n \n+/* Subroutine of cpp_start_read.  Installs the predefined macros\n+   and assertions found in CPP_PREDEFINES.\n+\n+   CPP_PREDEFINES is a string of -D and -A options separated by\n+   whitespace, like this:\n+   \"-D__unix__ -D__sparc__ -Asystem(unix) -Amachine(sparc)\" */\n+#ifdef CPP_PREDEFINES\n+static void\n+install_predefs (pfile)\n+     cpp_reader *pfile;\n+{\n+  char *p = (char *) alloca (strlen (CPP_PREDEFINES) + 1);\n+  char *q;\n+  strcpy (p, CPP_PREDEFINES);\n+\n+  while (*p)\n+    {\n+      while (*p == ' ' || *p == '\\t') p++;\n+      if (*p != '-')\n+\tabort();\n+      p = q = p + 2;\n+\n+      while (*p && *p != ' ' && *p != '\\t') p++;\n+      if (*p != 0)\n+\t*p++= 0;\n+      if (CPP_OPTIONS (pfile)->debug_output)\n+\toutput_line_command (pfile, 0, same_file);\n+\n+      if (q[-1] == 'D')\n+\tcpp_define (pfile, q);\n+      else if (q[-1] == 'A')\n+\tcpp_assert (pfile, q);\n+      else\n+\tabort ();\n+    }\n+}\n+#endif\n+\n+/* Another subroutine of cpp_start_read.  This one sets up to do\n+   dependency-file output. */\n+static void\n+initialize_dependency_output (pfile)\n+     cpp_reader *pfile;\n+{\n+  cpp_options *opts = CPP_OPTIONS (pfile);\n+  char *spec, *s, *output_file;\n+  \n+  /* Either of two environment variables can specify output of deps.\n+     Its value is either \"OUTPUT_FILE\" or \"OUTPUT_FILE DEPS_TARGET\",\n+     where OUTPUT_FILE is the file to write deps info to\n+     and DEPS_TARGET is the target to mention in the deps.  */\n+\n+  if (opts->print_deps == 0)\n+    {\n+      spec = getenv (\"DEPENDENCIES_OUTPUT\");\n+      if (spec)\n+\topts->print_deps = 1;\n+      else\n+\t{\n+\t  spec = getenv (\"SUNPRO_DEPENDENCIES\");\n+\t  if (spec)\n+\t    opts->print_deps = 2;\n+\t  else\n+\t    return;\n+\t}\n+\n+      /* Find the space before the DEPS_TARGET, if there is one.  */\n+      s = strchr (spec, ' ');\n+      if (s)\n+\t{\n+\t  opts->deps_target = s + 1;\n+\t  output_file = (char *) xmalloc (s - spec + 1);\n+\t  memcpy (output_file, spec, s - spec);\n+\t  output_file[s - spec] = 0;\n+\t}\n+      else\n+\t{\n+\t  opts->deps_target = 0;\n+\t  output_file = spec;\n+\t}\n+\n+      opts->deps_file = output_file;\n+      opts->print_deps_append = 1;\n+    }\n+\n+  /* Print the expected object file name as the target of this Make-rule.  */\n+  pfile->deps_allocated_size = 200;\n+  pfile->deps_buffer = (char *) xmalloc (pfile->deps_allocated_size);\n+  pfile->deps_buffer[0] = 0;\n+  pfile->deps_size = 0;\n+  pfile->deps_column = 0;\n+\n+  if (opts->deps_target)\n+    deps_output (pfile, opts->deps_target, ':');\n+  else if (*opts->in_fname == 0)\n+    deps_output (pfile, \"-\", ':');\n+  else\n+    {\n+      char *p, *q, *r;\n+      int len, x;\n+\n+      /* Discard all directory prefixes from filename.  */\n+      q = base_name (opts->in_fname);\n+\n+      /* Copy remainder to mungable area.  */\n+      len = strlen (q);\n+      p = (char *) alloca (len + 8);\n+      strcpy (p, q);\n+\n+      /* Output P, but remove known suffixes.  */\n+      q = p + len;\n+      /* Point to the filename suffix.  */\n+      r = rindex (p, '.');\n+      /* Compare against the known suffixes.  */\n+      for (x = 0; known_suffixes[x]; x++)\n+\t{\n+\t  if (strncmp (known_suffixes[x], r, q - r) == 0)\n+\t    {\n+\t      /* Make q point to the bit we're going to overwrite\n+\t\t with an object suffix.  */\n+\t      q = r;\n+\t      break;\n+\t    }\n+\t}\n+\n+      /* Supply our own suffix.  */\n+      strcpy (q, OBJECT_SUFFIX);\n+\n+      deps_output (pfile, p, ':');\n+      deps_output (pfile, opts->in_fname, ' ');\n+    }\n+}\n+\n /* This is called after options have been processed.\n  * Check options for consistency, and setup for processing input\n  * from the file named FNAME.  (Use standard input if FNAME==NULL.)\n@@ -575,30 +803,35 @@ cpp_start_read (pfile, fname)\n      char *fname;\n {\n   struct cpp_options *opts = CPP_OPTIONS (pfile);\n-  struct cpp_pending *pend;\n-  char *p;\n+  struct pending_option *p, *q;\n   int f;\n   cpp_buffer *fp;\n   struct include_hash *ih_fake;\n \n-  /* The code looks at the defaults through this pointer, rather than\n-     through the constant structure above.  This pointer gets changed\n-     if an environment variable specifies other defaults.  */\n-  struct default_include *include_defaults = include_defaults_array;\n+  /* -MG doesn't select the form of output and must be specified with one of\n+     -M or -MM.  -MG doesn't make sense with -MD or -MMD since they don't\n+     inhibit compilation.  */\n+  if (opts->print_deps_missing_files\n+      && (opts->print_deps == 0 || !opts->no_output))\n+    {\n+      cpp_fatal (pfile, \"-MG must be specified with one of -M or -MM\");\n+      return 0;\n+    }\n \n+  /* Chill should not be used with -trigraphs. */\n+  if (opts->chill && opts->trigraphs)\n+    {\n+      cpp_warning (pfile, \"-lang-chill and -trigraphs are mutually exclusive\");\n+      opts->trigraphs = 0;\n+    }\n+\n+  /* Set this if it hasn't been set already. */\n+  if (user_label_prefix == NULL)\n+    user_label_prefix = USER_LABEL_PREFIX;\n+  \n   /* Now that we know dollars_in_ident, we can initialize the syntax\n      tables. */\n   initialize_char_syntax (opts->dollars_in_ident);\n-  \n-  /* Add dirs from CPATH after dirs from -I.  */\n-  /* There seems to be confusion about what CPATH should do,\n-     so for the moment it is not documented.  */\n-  /* Some people say that CPATH should replace the standard include\n-     dirs, but that seems pointless: it comes before them, so it\n-     overrides them anyway.  */\n-  GET_ENV_PATH_LIST (p, \"CPATH\");\n-  if (p != 0 && ! opts->no_standard_includes)\n-    path_include (pfile, p);\n \n   /* Do partial setup of input buffer for the sake of generating\n      early #line directives (when -g is in effect).  */\n@@ -618,357 +851,170 @@ cpp_start_read (pfile, fname)\n      and option processing.  */\n   initialize_builtins (pfile);\n \n+#ifdef CPP_PREDEFINES\n   /* Do standard #defines and assertions\n      that identify system and machine type.  */\n-\n-  if (!opts->inhibit_predefs) {\n-    char *p = (char *) alloca (strlen (predefs) + 1);\n-    strcpy (p, predefs);\n-    while (*p) {\n-      char *q;\n-      while (*p == ' ' || *p == '\\t')\n-\tp++;\n-      /* Handle -D options.  */ \n-      if (p[0] == '-' && p[1] == 'D') {\n-\tq = &p[2];\n-\twhile (*p && *p != ' ' && *p != '\\t')\n-\t  p++;\n-\tif (*p != 0)\n-\t  *p++= 0;\n-\tif (opts->debug_output)\n-\t  output_line_command (pfile, 0, same_file);\n-\tcpp_define (pfile, q);\n-\twhile (*p == ' ' || *p == '\\t')\n-\t  p++;\n-      } else if (p[0] == '-' && p[1] == 'A') {\n-\t/* Handle -A options (assertions).  */ \n-\tchar *assertion;\n-\tchar *past_name;\n-\tchar *value;\n-\tchar *past_value;\n-\tchar *termination;\n-\tint save_char;\n-\n-\tassertion = &p[2];\n-\tpast_name = assertion;\n-\t/* Locate end of name.  */\n-\twhile (*past_name && *past_name != ' '\n-\t       && *past_name != '\\t' && *past_name != '(')\n-\t  past_name++;\n-\t/* Locate `(' at start of value.  */\n-\tvalue = past_name;\n-\twhile (*value && (*value == ' ' || *value == '\\t'))\n-\t  value++;\n-\tif (*value++ != '(')\n-\t  abort ();\n-\twhile (*value && (*value == ' ' || *value == '\\t'))\n-\t  value++;\n-\tpast_value = value;\n-\t/* Locate end of value.  */\n-\twhile (*past_value && *past_value != ' '\n-\t       && *past_value != '\\t' && *past_value != ')')\n-\t  past_value++;\n-\ttermination = past_value;\n-\twhile (*termination && (*termination == ' ' || *termination == '\\t'))\n-\t  termination++;\n-\tif (*termination++ != ')')\n-\t  abort ();\n-\tif (*termination && *termination != ' ' && *termination != '\\t')\n-\t  abort ();\n-\t/* Temporarily null-terminate the value.  */\n-\tsave_char = *termination;\n-\t*termination = '\\0';\n-\t/* Install the assertion.  */\n-\tcpp_assert (pfile, assertion);\n-\t*termination = (char) save_char;\n-\tp = termination;\n-\twhile (*p == ' ' || *p == '\\t')\n-\t  p++;\n-      } else {\n-\tabort ();\n-      }\n-    }\n-  }\n-\n-  /* Now handle the command line options.  */\n+  if (!opts->inhibit_predefs)\n+    install_predefs (pfile);\n+#endif\n \n   /* Do -U's, -D's and -A's in the order they were seen.  */\n-  /* First reverse the list.  */\n-  opts->pending = nreverse_pending (opts->pending);\n-\n-  for (pend = opts->pending;  pend;  pend = pend->next)\n+  p = opts->pending->define_head;\n+  while (p)\n     {\n-      if (pend->cmd != NULL && pend->cmd[0] == '-')\n-\t{\n-\t  switch (pend->cmd[1])\n-\t    {\n-\t    case 'U':\n-\t      if (opts->debug_output)\n-\t\toutput_line_command (pfile, 0, same_file);\n-\t      cpp_undef (pfile, pend->arg);\n-\t      break;\n-\t    case 'D':\n-\t      if (opts->debug_output)\n-\t\toutput_line_command (pfile, 0, same_file);\n-\t      cpp_define (pfile, pend->arg);\n-\t      break;\n-\t    case 'A':\n-\t      cpp_assert (pfile, pend->arg);\n-\t      break;\n-\t    }\n-\t}\n-    }\n-\n-  opts->done_initializing = 1;\n-\n-  { /* Read the appropriate environment variable and if it exists\n-       replace include_defaults with the listed path.  */\n-    char *epath = 0;\n-    switch ((opts->objc << 1) + opts->cplusplus)\n-      {\n-      case 0:\n-\tGET_ENV_PATH_LIST (epath, \"C_INCLUDE_PATH\");\n-\tbreak;\n-      case 1:\n-\tGET_ENV_PATH_LIST (epath, \"CPLUS_INCLUDE_PATH\");\n-\tbreak;\n-      case 2:\n-\tGET_ENV_PATH_LIST (epath, \"OBJC_INCLUDE_PATH\");\n-\tbreak;\n-      case 3:\n-\tGET_ENV_PATH_LIST (epath, \"OBJCPLUS_INCLUDE_PATH\");\n-\tbreak;\n-      }\n-    /* If the environment var for this language is set,\n-       add to the default list of include directories.  */\n-    if (epath) {\n-      char *nstore = (char *) alloca (strlen (epath) + 2);\n-      int num_dirs;\n-      char *startp, *endp;\n-\n-      for (num_dirs = 1, startp = epath; *startp; startp++)\n-\tif (*startp == PATH_SEPARATOR)\n-\t  num_dirs++;\n-      include_defaults\n-\t= (struct default_include *) xmalloc ((num_dirs\n-\t\t\t\t\t       * sizeof (struct default_include))\n-\t\t\t\t\t      + sizeof (include_defaults_array));\n-      startp = endp = epath;\n-      num_dirs = 0;\n-      while (1) {\n-        /* Handle cases like c:/usr/lib:d:/gcc/lib */\n-        if ((*endp == PATH_SEPARATOR)\n-            || *endp == 0) {\n-\t  strncpy (nstore, startp, endp-startp);\n-\t  if (endp == startp)\n-\t    strcpy (nstore, \".\");\n-\t  else\n-\t    nstore[endp-startp] = '\\0';\n-\n-\t  include_defaults[num_dirs].fname = xstrdup (nstore);\n-\t  include_defaults[num_dirs].component = 0;\n-\t  include_defaults[num_dirs].cplusplus = opts->cplusplus;\n-\t  include_defaults[num_dirs].cxx_aware = 1;\n-\t  num_dirs++;\n-\t  if (*endp == '\\0')\n-\t    break;\n-\t  endp = startp = endp + 1;\n-\t} else\n-\t  endp++;\n-      }\n-      /* Put the usual defaults back in at the end.  */\n-      bcopy ((char *) include_defaults_array,\n-\t     (char *) &include_defaults[num_dirs],\n-\t     sizeof (include_defaults_array));\n-    }\n-  }\n-\n-  /* Unless -fnostdinc,\n-     tack on the standard include file dirs to the specified list */\n-  if (!opts->no_standard_includes) {\n-    struct default_include *p = include_defaults;\n-    char *specd_prefix = opts->include_prefix;\n-    char *default_prefix = xstrdup (GCC_INCLUDE_DIR);\n-    int default_len = 0;\n-    /* Remove the `include' from /usr/local/lib/gcc.../include.  */\n-    if (!strcmp (default_prefix + strlen (default_prefix) - 8, \"/include\")) {\n-      default_len = strlen (default_prefix) - 7;\n-      default_prefix[default_len] = 0;\n-    }\n-    /* Search \"translated\" versions of GNU directories.\n-       These have /usr/local/lib/gcc... replaced by specd_prefix.  */\n-    if (specd_prefix != 0 && default_len != 0)\n-      for (p = include_defaults; p->fname; p++) {\n-\t/* Some standard dirs are only for C++.  */\n-\tif (!p->cplusplus\n-\t    || (opts->cplusplus && !opts->no_standard_cplusplus_includes)) {\n-\t  /* Does this dir start with the prefix?  */\n-\t  if (!strncmp (p->fname, default_prefix, default_len)) {\n-\t    /* Yes; change prefix and add to search list.  */\n-\t    int this_len = strlen (specd_prefix)\n-\t\t\t   + strlen (p->fname) - default_len;\n-\t    char *str = (char *) xmalloc (this_len + 1);\n-\t    strcpy (str, specd_prefix);\n-\t    strcat (str, p->fname + default_len);\n-\n-\t    append_include_chain (pfile, &opts->system_include,\n-\t\t\t\t  str, !p->cxx_aware);\n-\t  }\n-\t}\n-      }\n-    /* Search ordinary names for GNU include directories.  */\n-    for (p = include_defaults; p->fname; p++) {\n-      /* Some standard dirs are only for C++.  */\n-      if (!p->cplusplus\n-\t  || (opts->cplusplus && !opts->no_standard_cplusplus_includes)) {\n-\tconst char *str = update_path (p->fname, p->component);\n-\tappend_include_chain (pfile, &opts->system_include,\n-\t\t\t      str, !p->cxx_aware);\n-      }\n-    }\n-  }\n-\n-  merge_include_chains (opts);\n+      if (opts->debug_output)\n+\toutput_line_command (pfile, 0, same_file);\n+      if (p->undef)\n+\tcpp_undef (pfile, p->arg);\n+      else\n+\tcpp_define (pfile, p->arg);\n \n-  /* With -v, print the list of dirs to search.  */\n-  if (opts->verbose) {\n-    struct file_name_list *p;\n-    cpp_notice (\"#include \\\"...\\\" search starts here:\\n\");\n-    for (p = opts->quote_include; p; p = p->next) {\n-      if (p == opts->bracket_include)\n-\tcpp_notice (\"#include <...> search starts here:\\n\");\n-      fprintf (stderr, \" %s\\n\", p->name);\n+      q = p->next;\n+      free (p);\n+      p = q;\n     }\n-    cpp_notice (\"End of search list.\\n\");\n-  }\n-\n-  /* Copy the entire contents of the main input file into\n-     the stacked input buffer previously allocated for it.  */\n-  if (fname == NULL || *fname == 0) {\n-    fname = \"\";\n-    f = 0;\n-  } else if ((f = open (fname, O_RDONLY|O_NONBLOCK|O_NOCTTY, 0666)) < 0)\n-    cpp_pfatal_with_name (pfile, fname);\n \n-  /* -MG doesn't select the form of output and must be specified with one of\n-     -M or -MM.  -MG doesn't make sense with -MD or -MMD since they don't\n-     inhibit compilation.  */\n-  if (opts->print_deps_missing_files\n-      && (opts->print_deps == 0 || !opts->no_output))\n+  p = opts->pending->assert_head;\n+  while (p)\n     {\n-      cpp_fatal (pfile, \"-MG must be specified with one of -M or -MM\");\n-      return 0;\n-    }\n+      if (opts->debug_output)\n+\toutput_line_command (pfile, 0, same_file);\n+      if (p->undef)\n+\tcpp_unassert (pfile, p->arg);\n+      else\n+\tcpp_assert (pfile, p->arg);\n \n-  /* Either of two environment variables can specify output of deps.\n-     Its value is either \"OUTPUT_FILE\" or \"OUTPUT_FILE DEPS_TARGET\",\n-     where OUTPUT_FILE is the file to write deps info to\n-     and DEPS_TARGET is the target to mention in the deps.  */\n+      q = p->next;\n+      free (p);\n+      p = q;\n+    }\n+  \n+  opts->done_initializing = 1;\n \n-  if (opts->print_deps == 0\n-      && (getenv (\"SUNPRO_DEPENDENCIES\") != 0\n-\t  || getenv (\"DEPENDENCIES_OUTPUT\") != 0)) {\n-    char *spec = getenv (\"DEPENDENCIES_OUTPUT\");\n-    char *s;\n-    char *output_file;\n+  /* Several environment variables may add to the include search path.\n+     CPATH specifies an additional list of directories to be searched\n+     as if specified with -I, while C_INCLUDE_PATH, CPLUS_INCLUDE_PATH,\n+     etc. specify an additional list of directories to be searched as\n+     if specified with -isystem, for the language indicated.\n \n-    if (spec == 0)\n-      {\n-\tspec = getenv (\"SUNPRO_DEPENDENCIES\");\n-\topts->print_deps = 2;\n-      }\n-    else\n-      opts->print_deps = 1;\n-\n-    s = spec;\n-    /* Find the space before the DEPS_TARGET, if there is one.  */\n-    /* This should use index.  (mrs) */\n-    while (*s != 0 && *s != ' ') s++;\n-    if (*s != 0)\n-      {\n-\topts->deps_target = s + 1;\n-\toutput_file = (char *) xmalloc (s - spec + 1);\n-\tbcopy (spec, output_file, s - spec);\n-\toutput_file[s - spec] = 0;\n-      }\n-    else\n-      {\n-\topts->deps_target = 0;\n-\toutput_file = spec;\n-      }\n+     These variables are ignored if -nostdinc is on.  */\n+  if (! opts->no_standard_includes)\n+    {\n+      char *path;\n+      GET_ENV_PATH_LIST (path, \"CPATH\");\n+      if (path != 0 && *path != 0)\n+\tpath_include (pfile, opts->pending, path, BRACKET);\n \n-    opts->deps_file = output_file;\n-    opts->print_deps_append = 1;\n-  }\n+      switch ((opts->objc << 1) + opts->cplusplus)\n+\t{\n+\tcase 0:\n+\t  GET_ENV_PATH_LIST (path, \"C_INCLUDE_PATH\");\n+\t  break;\n+\tcase 1:\n+\t  GET_ENV_PATH_LIST (path, \"CPLUS_INCLUDE_PATH\");\n+\t  break;\n+\tcase 2:\n+\t  GET_ENV_PATH_LIST (path, \"OBJC_INCLUDE_PATH\");\n+\t  break;\n+\tcase 3:\n+\t  GET_ENV_PATH_LIST (path, \"OBJCPLUS_INCLUDE_PATH\");\n+\t  break;\n+\t}\n+      if (path != 0 && *path != 0)\n+\tpath_include (pfile, opts->pending, path, SYSTEM);\n+    }\n \n-  /* For -M, print the expected object file name\n-     as the target of this Make-rule.  */\n-  if (opts->print_deps)\n+  /* Unless -nostdinc, add the compiled-in include path to the list,\n+     translating prefixes. */\n+  if (!opts->no_standard_includes)\n     {\n-      pfile->deps_allocated_size = 200;\n-      pfile->deps_buffer = (char *) xmalloc (pfile->deps_allocated_size);\n-      pfile->deps_buffer[0] = 0;\n-      pfile->deps_size = 0;\n-      pfile->deps_column = 0;\n-\n-      if (opts->deps_target)\n-\tdeps_output (pfile, opts->deps_target, ':');\n-      else if (*opts->in_fname == 0)\n-\tdeps_output (pfile, \"-\", ':');\n-      else\n+      struct default_include *p = include_defaults_array;\n+      char *specd_prefix = opts->include_prefix;\n+      char *default_prefix = alloca (sizeof GCC_INCLUDE_DIR - 7);\n+      int default_len;\n+      int specd_len;\n+\n+      /* Search \"translated\" versions of GNU directories.\n+\t These have /usr/local/lib/gcc... replaced by specd_prefix.  */\n+      if (specd_prefix != 0)\n \t{\n-\t  char *p, *q, *r;\n-\t  int len, x;\n-\t  static char *known_suffixes[] = { \".c\", \".C\", \".s\", \".S\", \".m\",\n-\t\t\t\t     \".cc\", \".cxx\", \".cpp\", \".cp\",\n-\t\t\t\t     \".c++\", 0\n-\t\t\t\t   };\n-\n-\t  /* Discard all directory prefixes from filename.  */\n-\t  if ((q = rindex (opts->in_fname, '/')) != NULL\n-#ifdef DIR_SEPARATOR\n-\t      && (q = rindex (opts->in_fname, DIR_SEPARATOR)) != NULL\n-#endif\n-\t      )\n-\t    ++q;\n-\t  else\n-\t    q = opts->in_fname;\n-\n-\t  /* Copy remainder to mungable area.  */\n-\t  p = (char *) alloca (strlen(q) + 8);\n-\t  strcpy (p, q);\n-\n-\t  /* Output P, but remove known suffixes.  */\n-\t  len = strlen (p);\n-\t  q = p + len;\n-\t  /* Point to the filename suffix.  */\n-\t  r = rindex (p, '.');\n-\t  /* Compare against the known suffixes.  */\n-\t  x = 0;\n-\t  while (known_suffixes[x] != 0)\n+\t  /* Remove the `include' from /usr/local/lib/gcc.../include.\n+\t     GCC_INCLUDE_DIR will always end in /include. */\n+\t  default_len = sizeof GCC_INCLUDE_DIR - 8;\n+\t  memcpy (default_prefix, GCC_INCLUDE_DIR, default_len);\n+\t  default_prefix[default_len] = '\\0';\n+\n+\n+\t  specd_len = strlen (specd_prefix);\n+\t  for (p = include_defaults_array; p->fname; p++)\n \t    {\n-\t      if (strncmp (known_suffixes[x], r, q - r) == 0)\n+\t      /* Some standard dirs are only for C++.  */\n+\t      if (!p->cplusplus\n+\t\t  || (opts->cplusplus\n+\t\t      && !opts->no_standard_cplusplus_includes))\n \t\t{\n-\t\t  /* Make q point to the bit we're going to overwrite\n-\t\t     with an object suffix.  */\n-\t\t  q = r;\n-\t\t  break;\n+\t\t  /* Does this dir start with the prefix?  */\n+\t\t  if (!strncmp (p->fname, default_prefix, default_len))\n+\t\t    {\n+\t\t      /* Yes; change prefix and add to search list.  */\n+\t\t      int flen = strlen (p->fname);\n+\t\t      int this_len = specd_len - default_len + flen;\n+\t\t      char *str = (char *) xmalloc (this_len + 1);\n+\t\t      memcpy (str, specd_prefix, specd_len);\n+\t\t      memcpy (str+specd_len, p->fname, flen + 1);\n+\n+\t\t      append_include_chain (pfile, opts->pending,\n+\t\t\t\t\t    str, SYSTEM);\n+\t\t    }\n \t\t}\n-\t      x++;\n \t    }\n+\t}\n \n-\t  /* Supply our own suffix.  */\n-#ifndef VMS\n-\t  strcpy (q, \".o\");\n-#else\n-\t  strcpy (q, \".obj\");\n-#endif\n+      /* Search ordinary names for GNU include directories.  */\n+      for (p = include_defaults_array; p->fname; p++)\n+\t{\n+\t  /* Some standard dirs are only for C++.  */\n+\t  if (!p->cplusplus\n+\t      || (opts->cplusplus\n+\t\t  && !opts->no_standard_cplusplus_includes))\n+\t    {\n+\t      char *str = (char *) update_path (p->fname, p->component);\n+\t      str = xstrdup (str);  /* XXX Potential memory leak! */\n+\t      append_include_chain (pfile, opts->pending, str, SYSTEM);\n+\t    }\n+\t}\n+    }\n \n-\t  deps_output (pfile, p, ':');\n-\t  deps_output (pfile, opts->in_fname, ' ');\n+  merge_include_chains (opts);\n+\n+  /* With -v, print the list of dirs to search.  */\n+  if (opts->verbose)\n+    {\n+      struct file_name_list *p;\n+      cpp_message (pfile, -1, \"#include \\\"...\\\" search starts here:\\n\");\n+      for (p = opts->quote_include; p; p = p->next)\n+\t{\n+\t  if (p == opts->bracket_include)\n+\t    cpp_message (pfile, -1, \"#include <...> search starts here:\\n\");\n+\t  fprintf (stderr, \" %s\\n\", p->name);\n \t}\n+      cpp_message (pfile, -1, \"End of search list.\\n\");\n     }\n \n+  /* Open the main input file.\n+     We do this in nonblocking mode so we don't get stuck here if\n+     someone clever has asked cpp to process /dev/rmt0;\n+     finclude() will check that we have a real file to work with.  */\n+  if (fname == NULL || *fname == 0)\n+    {\n+      fname = \"\";\n+      f = 0;\n+    }\n+  else if ((f = open (fname, O_RDONLY|O_NONBLOCK|O_NOCTTY, 0666)) < 0)\n+    cpp_pfatal_with_name (pfile, fname);\n+\n+  initialize_dependency_output (pfile);\n+\n   /* Must call finclude() on the main input before processing\n      -include switches; otherwise the -included text winds up\n      after the main input. */\n@@ -987,83 +1033,73 @@ cpp_start_read (pfile, fname)\n \n   /* The -imacros files can be scanned now, but the -include files\n      have to be pushed onto the include stack and processed later,\n-     in the main loop calling cpp_get_token.  That means the -include\n-     files have to be processed in reverse order of the pending list,\n-     which means the pending list has to be reversed again, which\n-     means the -imacros files have to be done separately and first. */\n+     in the main loop calling cpp_get_token.  */\n   \n   pfile->no_record_file++;\n   opts->no_output++;\n-  for (pend = opts->pending; pend; pend = pend->next)\n+  p = opts->pending->imacros_head;\n+  while (p)\n     {\n-      if (pend->cmd != NULL)\n-        {\n-\t  if (strcmp (pend->cmd, \"-imacros\") == 0)\n-\t    {\n-\t      int fd = open (pend->arg, O_RDONLY|O_NONBLOCK|O_NOCTTY, 0666);\n-\t      if (fd < 0)\n-\t        {\n-\t          cpp_perror_with_name (pfile, pend->arg);\n-\t          return 0;\n-\t        }\n-\t      if (!cpp_push_buffer (pfile, NULL, 0))\n-\t        return 0;\n-\n-\t      ih_fake = (struct include_hash *)\n-\t\t  xmalloc (sizeof (struct include_hash));\n-\t      ih_fake->next = 0;\n-\t      ih_fake->next_this_file = 0;\n-\t      ih_fake->foundhere = ABSOLUTE_PATH;  /* well sort of ... */\n-\t      ih_fake->name = pend->arg;\n-\t      ih_fake->control_macro = 0;\n-\t      ih_fake->buf = (char *)-1;\n-\t      ih_fake->limit = 0;\n-\t      if (!finclude (pfile, fd, ih_fake))\n-\t\tcpp_scan_buffer (pfile);\n-\t      free (ih_fake);\n-\t    }\n+      int fd = open (p->arg, O_RDONLY|O_NONBLOCK|O_NOCTTY, 0666);\n+      if (fd < 0)\n+\t{\n+\t  cpp_perror_with_name (pfile, p->arg);\n+\t  return 0;\n \t}\n+      if (!cpp_push_buffer (pfile, NULL, 0))\n+\treturn 0;\n+\n+      ih_fake = (struct include_hash *)\n+\txmalloc (sizeof (struct include_hash));\n+      ih_fake->next = 0;\n+      ih_fake->next_this_file = 0;\n+      ih_fake->foundhere = ABSOLUTE_PATH;  /* well sort of ... */\n+      ih_fake->name = p->arg;\n+      ih_fake->control_macro = 0;\n+      ih_fake->buf = (char *)-1;\n+      ih_fake->limit = 0;\n+      if (!finclude (pfile, fd, ih_fake))\n+\tcpp_scan_buffer (pfile);\n+      free (ih_fake);\n+\n+      q = p->next;\n+      free (p);\n+      p = q;\n     }\n+\n   opts->no_output--;\n-  opts->pending = nreverse_pending (opts->pending);\n-  for (pend = opts->pending; pend; pend = pend->next)\n+\n+  p = opts->pending->include_head;\n+  while (p)\n     {\n-      if (pend->cmd != NULL)\n-        {\n-\t  if (strcmp (pend->cmd, \"-include\") == 0)\n-\t    {\n-\t      int fd = open (pend->arg, O_RDONLY|O_NONBLOCK|O_NOCTTY, 0666);\n-\t      if (fd < 0)\n-\t        {\n-\t          cpp_perror_with_name (pfile, pend->arg);\n-\t          return 0;\n-\t        }\n-\t      if (!cpp_push_buffer (pfile, NULL, 0))\n-\t        return 0;\n-\n-\t      ih_fake = (struct include_hash *)\n-\t\t  xmalloc (sizeof (struct include_hash));\n-\t      ih_fake->next = 0;\n-\t      ih_fake->next_this_file = 0;\n-\t      ih_fake->foundhere = ABSOLUTE_PATH;  /* well sort of ... */\n-\t      ih_fake->name = pend->arg;\n-\t      ih_fake->control_macro = 0;\n-\t      ih_fake->buf = (char *)-1;\n-\t      ih_fake->limit = 0;\n-\t      if (finclude (pfile, fd, ih_fake))\n-\t        output_line_command (pfile, 0, enter_file);\n-\t    }\n+      int fd = open (p->arg, O_RDONLY|O_NONBLOCK|O_NOCTTY, 0666);\n+      if (fd < 0)\n+\t{\n+\t  cpp_perror_with_name (pfile, p->arg);\n+\t  return 0;\n \t}\n+      if (!cpp_push_buffer (pfile, NULL, 0))\n+\treturn 0;\n+\n+      ih_fake = (struct include_hash *)\n+\txmalloc (sizeof (struct include_hash));\n+      ih_fake->next = 0;\n+      ih_fake->next_this_file = 0;\n+      ih_fake->foundhere = ABSOLUTE_PATH;  /* well sort of ... */\n+      ih_fake->name = p->arg;\n+      ih_fake->control_macro = 0;\n+      ih_fake->buf = (char *)-1;\n+      ih_fake->limit = 0;\n+      if (finclude (pfile, fd, ih_fake))\n+\toutput_line_command (pfile, 0, enter_file);\n+\n+      q = p->next;\n+      free (p);\n+      p = q;\n     }\n   pfile->no_record_file--;\n \n-  /* Free the pending list.  */\n-  for (pend = opts->pending;  pend; )\n-    {\n-      struct cpp_pending *next = pend->next;\n-      free (pend);\n-      pend = next;\n-    }\n+  free (opts->pending);\n   opts->pending = NULL;\n \n   return 1;\n@@ -1120,487 +1156,559 @@ cpp_handle_option (pfile, argc, argv)\n   struct cpp_options *opts = CPP_OPTIONS (pfile);\n   int i = 0;\n \n-  if (user_label_prefix == NULL)\n-    user_label_prefix = USER_LABEL_PREFIX;\n-\n-  if (argv[i][0] != '-') {\n-    if (opts->out_fname != NULL)\n-      {\n-\tprint_help ();\n-\tcpp_fatal (pfile, \"Too many arguments\");\n-      }\n-    else if (opts->in_fname != NULL)\n-      opts->out_fname = argv[i];\n-    else\n-      opts->in_fname = argv[i];\n-  } else {\n-    switch (argv[i][1]) {\n-      \n-    missing_filename:\n-      cpp_fatal (pfile, \"Filename missing after `%s' option\", argv[i]);\n-      return argc;\n-    missing_dirname:\n-      cpp_fatal (pfile, \"Directory name missing after `%s' option\", argv[i]);\n-      return argc;\n-      \n-    case 'f':\n-      if (!strcmp (argv[i], \"-fleading-underscore\"))\n- \tuser_label_prefix = \"_\";\n-      else if (!strcmp (argv[i], \"-fno-leading-underscore\"))\n- \tuser_label_prefix = \"\";\n-      break;\n-\n-    case 'I':\t\t\t/* Add directory to path for includes.  */\n-      if (!strcmp (argv[i] + 2, \"-\"))\n-        {\n-\t  if (! opts->ignore_srcdir)\n-\t    {\n-\t      opts->ignore_srcdir = 1;\n-\t      /* Don't use any preceding -I directories for #include <...>. */\n-\t      opts->quote_include = opts->bracket_include;\n-\t      opts->bracket_include = 0;\n-\t    }\n-\t}\n-      else\n+  if (argv[i][0] != '-')\n+    {\n+      if (opts->out_fname != NULL)\n \t{\n-\t  char *fname;\n-\t  if (argv[i][2] != 0)\n-\t    fname = argv[i] + 2;\n-\t  else if (i + 1 == argc)\n-\t    goto missing_dirname;\n-\t  else\n-\t    fname = argv[++i];\n-\t  append_include_chain (pfile, &opts->bracket_include, fname, 0);\n-\t}\n-      break;\n-\n-    case 'i':\n-      /* Add directory to beginning of system include path, as a system\n-\t include directory. */\n-      if (!strcmp (argv[i], \"-isystem\"))\n-        {\n-\t  if (i + 1 == argc)\n-\t    goto missing_filename;\n-\t  append_include_chain (pfile, &opts->system_include, argv[++i], 1);\n+\t  print_help ();\n+\t  cpp_fatal (pfile, \"Too many arguments\");\n \t}\n-      /* Add directory to end of path for includes,\n-\t with the default prefix at the front of its name.  */\n-      else if (!strcmp (argv[i], \"-iwithprefix\"))\n-        {\n-\t  char *fname;\n-\t  if (i + 1 == argc)\n-\t    goto missing_dirname;\n-\t  ++i;\n-\n-\t  if (opts->include_prefix != 0)\n-\t    {\n-\t      fname = xmalloc (strlen (opts->include_prefix)\n-\t\t\t       + strlen (argv[i]) + 1);\n-\t      strcpy (fname, opts->include_prefix);\n-\t      strcat (fname, argv[i]);\n-\t    }\n-\t  else\n-\t    {\n-\t      fname = xmalloc (strlen (GCC_INCLUDE_DIR)\n-\t\t\t       + strlen (argv[i]) + 1);\n-\t      strcpy (fname, GCC_INCLUDE_DIR);\n-\t      /* Remove the `include' from /usr/local/lib/gcc.../include.  */\n-\t      if (!strcmp (fname + strlen (fname) - 8, \"/include\"))\n-\t\tfname[strlen (fname) - 7] = 0;\n-\t      strcat (fname, argv[i]);\n-\t    }\n+      else if (opts->in_fname != NULL)\n+\topts->out_fname = argv[i];\n+      else\n+\topts->in_fname = argv[i];\n+    }\n+  else\n+    switch (argv[i][1])\n+      {\n+      case 'f':\n+\tif (!strcmp (argv[i], \"-fleading-underscore\"))\n+\t  user_label_prefix = \"_\";\n+\telse if (!strcmp (argv[i], \"-fno-leading-underscore\"))\n+\t  user_label_prefix = \"\";\n+\tbreak;\n+\n+      case 'I':\t\t\t/* Add directory to path for includes.  */\n+\tif (!strcmp (argv[i] + 2, \"-\"))\n+\t  {\n+\t    /* -I- means:\n+\t       Use the preceding -I directories for #include \"...\"\n+\t       but not #include <...>.\n+\t       Don't search the directory of the present file\n+\t       for #include \"...\".  (Note that -I. -I- is not the same as\n+\t       the default setup; -I. uses the compiler's working dir.)  */\n+\t    if (! opts->ignore_srcdir)\n+\t      {\n+\t\topts->ignore_srcdir = 1;\n+\t\topts->pending->quote_head = opts->pending->brack_head;\n+\t\topts->pending->quote_tail = opts->pending->brack_tail;\n+\t\topts->pending->brack_head = 0;\n+\t\topts->pending->brack_tail = 0;\n+\t      }\n+\t    else\n+\t      {\n+\t\tcpp_fatal (pfile, \"-I- specified twice\");\n+\t\treturn argc;\n+\t      }\n+\t  }\n+\telse\n+\t  {\n+\t    char *fname;\n+\t    if (argv[i][2] != 0)\n+\t      fname = argv[i] + 2;\n+\t    else if (i + 1 == argc)\n+\t      goto missing_dirname;\n+\t    else\n+\t      fname = argv[++i];\n+\t    append_include_chain (pfile, opts->pending,\n+\t\t\t\t  xstrdup (fname), BRACKET);\n+\t  }\n+\tbreak;\n+\n+      case 'i':\n+\t/* Add directory to beginning of system include path, as a system\n+\t   include directory. */\n+\tif (!strcmp (argv[i], \"-isystem\"))\n+\t  {\n+\t    if (i + 1 == argc)\n+\t      goto missing_filename;\n+\t    append_include_chain (pfile, opts->pending,\n+\t\t\t\t  xstrdup (argv[++i]), SYSTEM);\n+\t  }\n+\telse if (!strcmp (argv[i], \"-include\"))\n+\t  {\n+\t    if (i + 1 == argc)\n+\t      goto missing_filename;\n+\t    else\n+\t      {\n+\t\tstruct pending_option *o = (struct pending_option *)\n+\t\t  xmalloc (sizeof (struct pending_option));\n+\t\to->arg = argv[++i];\n+\n+\t\t/* This list has to be built in reverse order so that\n+\t\t   when cpp_start_read pushes all the -include files onto\n+\t\t   the buffer stack, they will be scanned in forward order.  */\n+\t\to->next = opts->pending->include_head;\n+\t\topts->pending->include_head = o;\n+\t      }\n+\t  }\n+\telse if (!strcmp (argv[i], \"-imacros\"))\n+\t  {\n+\t    if (i + 1 == argc)\n+\t      goto missing_filename;\n+\t    else\n+\t      {\n+\t\tstruct pending_option *o = (struct pending_option *)\n+\t\t  xmalloc (sizeof (struct pending_option));\n+\t\to->arg = argv[++i];\n+\t\to->next = NULL;\n+\n+\t\tAPPEND (opts->pending, imacros, o);\n+\t      }\n+\t  }\n+\t/* Add directory to end of path for includes,\n+\t   with the default prefix at the front of its name.  */\n+\telse if (!strcmp (argv[i], \"-iwithprefix\"))\n+\t  {\n+\t    char *fname;\n+\t    int len;\n+\t    if (i + 1 == argc)\n+\t      goto missing_dirname;\n+\t    ++i;\n+\t    len = strlen (argv[i]);\n+\n+\t    if (opts->include_prefix != 0)\n+\t      {\n+\t\tfname = xmalloc (opts->include_prefix_len + len + 1);\n+\t\tmemcpy (fname, opts->include_prefix, opts->include_prefix_len);\n+\t\tmemcpy (fname + opts->include_prefix_len, argv[i], len + 1);\n+\t      }\n+\t    else\n+\t      {\n+\t\tfname = xmalloc (sizeof GCC_INCLUDE_DIR - 8 + len);\n+\t\tmemcpy (fname, GCC_INCLUDE_DIR, sizeof GCC_INCLUDE_DIR - 9);\n+\t\tmemcpy (fname + sizeof GCC_INCLUDE_DIR - 9, argv[i], len + 1);\n+\t      }\n \t  \n-\t  append_include_chain (pfile, &opts->system_include, fname, 0);\n-      }\n-      /* Add directory to main path for includes,\n-\t with the default prefix at the front of its name.  */\n-      else if (!strcmp (argv[i], \"-iwithprefix\"))\n-        {\n-\t  char *fname;\n-\t  if (i + 1 == argc)\n-\t    goto missing_dirname;\n-\t  ++i;\n-\n-\t  if (opts->include_prefix != 0)\n-\t    {\n-\t      fname = xmalloc (strlen (opts->include_prefix)\n-\t\t\t       + strlen (argv[i]) + 1);\n-\t      strcpy (fname, opts->include_prefix);\n-\t      strcat (fname, argv[i]);\n-\t    }\n-\t  else\n-\t    {\n-\t      fname = xmalloc (strlen (GCC_INCLUDE_DIR)\n-\t\t\t       + strlen (argv[i]) + 1);\n-\t      strcpy (fname, GCC_INCLUDE_DIR);\n-\t      /* Remove the `include' from /usr/local/lib/gcc.../include.  */\n-\t      if (!strcmp (fname + strlen (fname) - 8, \"/include\"))\n-\t\tfname[strlen (fname) - 7] = 0;\n-\t      strcat (fname, argv[i]);\n-\t    }\n+\t    append_include_chain (pfile, opts->pending, fname, SYSTEM);\n+\t  }\n+\t/* Add directory to main path for includes,\n+\t   with the default prefix at the front of its name.  */\n+\telse if (!strcmp (argv[i], \"-iwithprefixbefore\"))\n+\t  {\n+\t    char *fname;\n+\t    int len;\n+\t    if (i + 1 == argc)\n+\t      goto missing_dirname;\n+\t    ++i;\n+\t    len = strlen (argv[i]);\n+\n+\t    if (opts->include_prefix != 0)\n+\t      {\n+\t\tfname = xmalloc (opts->include_prefix_len + len + 1);\n+\t\tmemcpy (fname, opts->include_prefix, opts->include_prefix_len);\n+\t\tmemcpy (fname + opts->include_prefix_len, argv[i], len + 1);\n+\t      }\n+\t    else\n+\t      {\n+\t\tfname = xmalloc (sizeof GCC_INCLUDE_DIR - 8 + len);\n+\t\tmemcpy (fname, GCC_INCLUDE_DIR, sizeof GCC_INCLUDE_DIR - 9);\n+\t\tmemcpy (fname + sizeof GCC_INCLUDE_DIR - 9, argv[i], len + 1);\n+\t      }\n \t  \n-\t  append_include_chain (pfile, &opts->bracket_include, fname, 0);\n-        }\n-      /* Add directory to end of path for includes.  */\n-      else if (!strcmp (argv[i], \"-idirafter\"))\n-        {\n-\t  if (i + 1 == argc)\n-\t    goto missing_dirname;\n-\t  append_include_chain (pfile, &opts->after_include, argv[++i], 0);\n-\t}\n-      else if (!strcmp (argv[i], \"-include\") || !strcmp (argv[i], \"-imacros\"))\n-        {\n-\t  if (i + 1 == argc)\n-\t    goto missing_filename;\n-\t  else\n-\t    push_pending (pfile, argv[i], argv[i+1]), i++;\n-        }\n-      else if (!strcmp (argv[i], \"-iprefix\"))\n-        {\n-\t  if (i + 1 == argc)\n-\t    goto missing_filename;\n-\t  else\n-\t      opts->include_prefix = argv[++i];\n-\t}\n-      else if (!strcmp (argv[i], \"-ifoutput\"))\n-\topts->output_conditionals = 1;\n+\t    append_include_chain (pfile, opts->pending, fname, BRACKET);\n+\t  }\n+\t/* Add directory to end of path for includes.  */\n+\telse if (!strcmp (argv[i], \"-idirafter\"))\n+\t  {\n+\t    if (i + 1 == argc)\n+\t      goto missing_dirname;\n+\t    append_include_chain (pfile, opts->pending,\n+\t\t\t\t  xstrdup (argv[++i]), AFTER);\n+\t  }\n+\telse if (!strcmp (argv[i], \"-iprefix\"))\n+\t  {\n+\t    if (i + 1 == argc)\n+\t      goto missing_filename;\n+\t    else\n+\t      {\n+\t\topts->include_prefix = argv[++i];\n+\t\topts->include_prefix_len = strlen (argv[i]);\n+\t      }\n+\t  }\n+\telse if (!strcmp (argv[i], \"-ifoutput\"))\n+\t  opts->output_conditionals = 1;\n \n-      break;\n+\tbreak;\n       \n-    case 'o':\n-      if (opts->out_fname != NULL)\n-\t{\n-\t  cpp_fatal (pfile, \"Output filename specified twice\");\n-\t  return argc;\n-\t}\n-      if (i + 1 == argc)\n-\tgoto missing_filename;\n-      opts->out_fname = argv[++i];\n-      if (!strcmp (opts->out_fname, \"-\"))\n-\topts->out_fname = \"\";\n-      break;\n+      case 'o':\n+\tif (opts->out_fname != NULL)\n+\t  {\n+\t    cpp_fatal (pfile, \"Output filename specified twice\");\n+\t    return argc;\n+\t  }\n+\tif (i + 1 == argc)\n+\t  goto missing_filename;\n+\topts->out_fname = argv[++i];\n+\tif (!strcmp (opts->out_fname, \"-\"))\n+\t  opts->out_fname = \"\";\n+\tbreak;\n       \n-    case 'p':\n-      if (!strcmp (argv[i], \"-pedantic\"))\n-\tCPP_PEDANTIC (pfile) = 1;\n-      else if (!strcmp (argv[i], \"-pedantic-errors\")) {\n-\tCPP_PEDANTIC (pfile) = 1;\n-\topts->pedantic_errors = 1;\n-      }\n+      case 'p':\n+\tif (!strcmp (argv[i], \"-pedantic\"))\n+\t  CPP_PEDANTIC (pfile) = 1;\n+\telse if (!strcmp (argv[i], \"-pedantic-errors\"))\n+\t  {\n+\t    CPP_PEDANTIC (pfile) = 1;\n+\t    opts->pedantic_errors = 1;\n+\t  }\n #if 0\n-      else if (!strcmp (argv[i], \"-pcp\")) {\n-\tchar *pcp_fname = argv[++i];\n-\tpcp_outfile = ((pcp_fname[0] != '-' || pcp_fname[1] != '\\0')\n-\t\t       ? fopen (pcp_fname, \"w\")\n-\t\t       : fdopen (dup (fileno (stdout)), \"w\"));\n-\tif (pcp_outfile == 0)\n-\t  cpp_pfatal_with_name (pfile, pcp_fname);\n-\tno_precomp = 1;\n-      }\n+\telse if (!strcmp (argv[i], \"-pcp\")) {\n+\t  char *pcp_fname = argv[++i];\n+\t  pcp_outfile = ((pcp_fname[0] != '-' || pcp_fname[1] != '\\0')\n+\t\t\t ? fopen (pcp_fname, \"w\")\n+\t\t\t : fdopen (dup (fileno (stdout)), \"w\"));\n+\t  if (pcp_outfile == 0)\n+\t    cpp_pfatal_with_name (pfile, pcp_fname);\n+\t  no_precomp = 1;\n+\t}\n #endif\n-      break;\n+\tbreak;\n       \n-    case 't':\n-      if (!strcmp (argv[i], \"-traditional\")) {\n-\topts->traditional = 1;\n-\topts->cplusplus_comments = 0;\n-      } else if (!strcmp (argv[i], \"-trigraphs\")) {\n-\tif (!opts->chill)\n+      case 't':\n+\tif (!strcmp (argv[i], \"-traditional\"))\n+\t  {\n+\t    opts->traditional = 1;\n+\t    opts->cplusplus_comments = 0;\n+\t  }\n+\telse if (!strcmp (argv[i], \"-trigraphs\"))\n \t  opts->trigraphs = 1;\n-      }\n-      break;\n+\tbreak;\n       \n-    case 'l':\n-      if (! strcmp (argv[i], \"-lang-c\"))\n-\topts->cplusplus = 0, opts->cplusplus_comments = 1, opts->c89 = 0,\n-\t  opts->c9x = 1, opts->objc = 0;\n-      if (! strcmp (argv[i], \"-lang-c89\"))\n-\topts->cplusplus = 0, opts->cplusplus_comments = 0, opts->c89 = 1,\n-\t  opts->c9x = 0, opts->objc = 0;\n-      if (! strcmp (argv[i], \"-lang-c++\"))\n-\topts->cplusplus = 1, opts->cplusplus_comments = 1, opts->c89 = 0,\n-\t  opts->c9x = 0, opts->objc = 0;\n-      if (! strcmp (argv[i], \"-lang-objc\"))\n-\topts->cplusplus = 0, opts->cplusplus_comments = 1, opts->c89 = 0,\n-\t  opts->c9x = 0, opts->objc = 1;\n-      if (! strcmp (argv[i], \"-lang-objc++\"))\n-\topts->cplusplus = 1, opts->cplusplus_comments = 1, opts->c89 = 0,\n-\t  opts->c9x = 0, opts->objc = 1;\n-      if (! strcmp (argv[i], \"-lang-asm\"))\n-\topts->lang_asm = 1;\n-      if (! strcmp (argv[i], \"-lint\"))\n-\topts->for_lint = 1;\n-      if (! strcmp (argv[i], \"-lang-chill\"))\n-\topts->objc = 0, opts->cplusplus = 0, opts->chill = 1,\n-\t  opts->traditional = 1, opts->trigraphs = 0;\n-      break;\n+      case 'l':\n+\tif (! strcmp (argv[i], \"-lang-c\"))\n+\t  opts->cplusplus = 0, opts->cplusplus_comments = 1, opts->c89 = 0,\n+\t    opts->c9x = 1, opts->objc = 0;\n+\tif (! strcmp (argv[i], \"-lang-c89\"))\n+\t  opts->cplusplus = 0, opts->cplusplus_comments = 0, opts->c89 = 1,\n+\t    opts->c9x = 0, opts->objc = 0;\n+\tif (! strcmp (argv[i], \"-lang-c++\"))\n+\t  opts->cplusplus = 1, opts->cplusplus_comments = 1, opts->c89 = 0,\n+\t    opts->c9x = 0, opts->objc = 0;\n+\tif (! strcmp (argv[i], \"-lang-objc\"))\n+\t  opts->cplusplus = 0, opts->cplusplus_comments = 1, opts->c89 = 0,\n+\t    opts->c9x = 0, opts->objc = 1;\n+\tif (! strcmp (argv[i], \"-lang-objc++\"))\n+\t  opts->cplusplus = 1, opts->cplusplus_comments = 1, opts->c89 = 0,\n+\t    opts->c9x = 0, opts->objc = 1;\n+\tif (! strcmp (argv[i], \"-lang-asm\"))\n+\t  opts->lang_asm = 1;\n+\tif (! strcmp (argv[i], \"-lint\"))\n+\t  opts->for_lint = 1;\n+\tif (! strcmp (argv[i], \"-lang-chill\"))\n+\t  opts->objc = 0, opts->cplusplus = 0, opts->chill = 1,\n+\t    opts->traditional = 1;\n+\tbreak;\n       \n-    case '+':\n-      opts->cplusplus = 1, opts->cplusplus_comments = 1;\n-      break;\n-\n-    case 's':\n-      if (!strcmp (argv[i], \"-std=iso9899:1990\")\n-\t  || !strcmp (argv[i], \"-std=iso9899:199409\")\n-\t  || !strcmp (argv[i], \"-std=c89\")\n-\t  || !strcmp (argv[i], \"-std=gnu89\"))\n+      case '+':\n+\topts->cplusplus = 1, opts->cplusplus_comments = 1;\n+\tbreak;\n+\n+      case 's':\n+\tif (!strcmp (argv[i], \"-std=iso9899:1990\")\n+\t    || !strcmp (argv[i], \"-std=iso9899:199409\")\n+\t    || !strcmp (argv[i], \"-std=c89\")\n+\t    || !strcmp (argv[i], \"-std=gnu89\"))\n \t  opts->cplusplus = 0, opts->cplusplus_comments = 0,\n \t    opts->c89 = 1, opts->c9x = 0, opts->objc = 0;\n-      else if (!strcmp (argv[i], \"-std=iso9899:199x\")\n-\t       || !strcmp (argv[i], \"-std=c9x\")\n-\t       || !strcmp (argv[i], \"-std=gnu9x\"))\n-\topts->cplusplus = 0, opts->cplusplus_comments = 1, opts->c89 = 0,\n-\t  opts->c9x = 1, opts->objc = 0;\n-      break;\n-\n-    case 'w':\n-      opts->inhibit_warnings = 1;\n-      break;\n+\telse if (!strcmp (argv[i], \"-std=iso9899:199x\")\n+\t\t || !strcmp (argv[i], \"-std=c9x\")\n+\t\t || !strcmp (argv[i], \"-std=gnu9x\"))\n+\t  opts->cplusplus = 0, opts->cplusplus_comments = 1, opts->c89 = 0,\n+\t    opts->c9x = 1, opts->objc = 0;\n+\tbreak;\n+\n+      case 'w':\n+\topts->inhibit_warnings = 1;\n+\tbreak;\n       \n-    case 'W':\n-      if (!strcmp (argv[i], \"-Wtrigraphs\"))\n-\topts->warn_trigraphs = 1;\n-      else if (!strcmp (argv[i], \"-Wno-trigraphs\"))\n-\topts->warn_trigraphs = 0;\n-      else if (!strcmp (argv[i], \"-Wcomment\"))\n-\topts->warn_comments = 1;\n-      else if (!strcmp (argv[i], \"-Wno-comment\"))\n-\topts->warn_comments = 0;\n-      else if (!strcmp (argv[i], \"-Wcomments\"))\n-\topts->warn_comments = 1;\n-      else if (!strcmp (argv[i], \"-Wno-comments\"))\n-\topts->warn_comments = 0;\n-      else if (!strcmp (argv[i], \"-Wtraditional\"))\n-\topts->warn_stringify = 1;\n-      else if (!strcmp (argv[i], \"-Wno-traditional\"))\n-\topts->warn_stringify = 0;\n-      else if (!strcmp (argv[i], \"-Wundef\"))\n-\topts->warn_undef = 1;\n-      else if (!strcmp (argv[i], \"-Wno-undef\"))\n-\topts->warn_undef = 0;\n-      else if (!strcmp (argv[i], \"-Wimport\"))\n-\topts->warn_import = 1;\n-      else if (!strcmp (argv[i], \"-Wno-import\"))\n-\topts->warn_import = 0;\n-      else if (!strcmp (argv[i], \"-Werror\"))\n-\topts->warnings_are_errors = 1;\n-      else if (!strcmp (argv[i], \"-Wno-error\"))\n-\topts->warnings_are_errors = 0;\n-      else if (!strcmp (argv[i], \"-Wall\"))\n-\t{\n+      case 'W':\n+\tif (!strcmp (argv[i], \"-Wtrigraphs\"))\n \t  opts->warn_trigraphs = 1;\n+\telse if (!strcmp (argv[i], \"-Wno-trigraphs\"))\n+\t  opts->warn_trigraphs = 0;\n+\telse if (!strcmp (argv[i], \"-Wcomment\"))\n \t  opts->warn_comments = 1;\n-\t}\n-      break;\n-      \n-    case 'M':\n-      /* The style of the choices here is a bit mixed.\n-\t The chosen scheme is a hybrid of keeping all options in one string\n-\t and specifying each option in a separate argument:\n-\t -M|-MM|-MD file|-MMD file [-MG].  An alternative is:\n-\t -M|-MM|-MD file|-MMD file|-MG|-MMG; or more concisely:\n-\t -M[M][G][D file].  This is awkward to handle in specs, and is not\n-\t as extensible.  */\n-      /* ??? -MG must be specified in addition to one of -M or -MM.\n-\t This can be relaxed in the future without breaking anything.\n-\t The converse isn't true.  */\n+\telse if (!strcmp (argv[i], \"-Wno-comment\"))\n+\t  opts->warn_comments = 0;\n+\telse if (!strcmp (argv[i], \"-Wcomments\"))\n+\t  opts->warn_comments = 1;\n+\telse if (!strcmp (argv[i], \"-Wno-comments\"))\n+\t  opts->warn_comments = 0;\n+\telse if (!strcmp (argv[i], \"-Wtraditional\"))\n+\t  opts->warn_stringify = 1;\n+\telse if (!strcmp (argv[i], \"-Wno-traditional\"))\n+\t  opts->warn_stringify = 0;\n+\telse if (!strcmp (argv[i], \"-Wundef\"))\n+\t  opts->warn_undef = 1;\n+\telse if (!strcmp (argv[i], \"-Wno-undef\"))\n+\t  opts->warn_undef = 0;\n+\telse if (!strcmp (argv[i], \"-Wimport\"))\n+\t  opts->warn_import = 1;\n+\telse if (!strcmp (argv[i], \"-Wno-import\"))\n+\t  opts->warn_import = 0;\n+\telse if (!strcmp (argv[i], \"-Werror\"))\n+\t  opts->warnings_are_errors = 1;\n+\telse if (!strcmp (argv[i], \"-Wno-error\"))\n+\t  opts->warnings_are_errors = 0;\n+\telse if (!strcmp (argv[i], \"-Wall\"))\n+\t  {\n+\t    opts->warn_trigraphs = 1;\n+\t    opts->warn_comments = 1;\n+\t  }\n+\tbreak;\n       \n-      /* -MG isn't valid with -MD or -MMD.  This is checked for later.  */\n-      if (!strcmp (argv[i], \"-MG\"))\n-\t{\n-\t  opts->print_deps_missing_files = 1;\n-\t  break;\n-\t}\n-      if (!strcmp (argv[i], \"-M\"))\n-\topts->print_deps = 2;\n-      else if (!strcmp (argv[i], \"-MM\"))\n-\topts->print_deps = 1;\n-      else if (!strcmp (argv[i], \"-MD\"))\n-\topts->print_deps = 2;\n-      else if (!strcmp (argv[i], \"-MMD\"))\n-\topts->print_deps = 1;\n-      /* For -MD and -MMD options, write deps on file named by next arg.  */\n-      if (!strcmp (argv[i], \"-MD\") || !strcmp (argv[i], \"-MMD\"))\n-\t{\n-\t  if (i+1 == argc)\n-\t    goto missing_filename;\n-\t  opts->deps_file = argv[++i];\n-\t}\n-      else\n-\t{\n-\t  /* For -M and -MM, write deps on standard output\n-\t     and suppress the usual output.  */\n-\t  opts->no_output = 1;\n-\t}\t  \n-      break;\n+      case 'M':\n+\t/* The style of the choices here is a bit mixed.\n+\t   The chosen scheme is a hybrid of keeping all options in one string\n+\t   and specifying each option in a separate argument:\n+\t   -M|-MM|-MD file|-MMD file [-MG].  An alternative is:\n+\t   -M|-MM|-MD file|-MMD file|-MG|-MMG; or more concisely:\n+\t   -M[M][G][D file].  This is awkward to handle in specs, and is not\n+\t   as extensible.  */\n+\t/* ??? -MG must be specified in addition to one of -M or -MM.\n+\t   This can be relaxed in the future without breaking anything.\n+\t   The converse isn't true.  */\n       \n-    case 'd':\n-      {\n-\tchar *p = argv[i] + 2;\n-\tchar c;\n-\twhile ((c = *p++) != 0) {\n-\t  /* Arg to -d specifies what parts of macros to dump */\n-\t  switch (c) {\n-\t  case 'M':\n-\t    opts->dump_macros = dump_only;\n-\t    opts->no_output = 1;\n-\t    break;\n-\t  case 'N':\n-\t    opts->dump_macros = dump_names;\n-\t    break;\n-\t  case 'D':\n-\t    opts->dump_macros = dump_definitions;\n-\t    break;\n-\t  case 'I':\n-\t    opts->dump_includes = 1;\n+\t/* -MG isn't valid with -MD or -MMD.  This is checked for later.  */\n+\tif (!strcmp (argv[i], \"-MG\"))\n+\t  {\n+\t    opts->print_deps_missing_files = 1;\n \t    break;\n \t  }\n+\tif (!strcmp (argv[i], \"-M\"))\n+\t  opts->print_deps = 2;\n+\telse if (!strcmp (argv[i], \"-MM\"))\n+\t  opts->print_deps = 1;\n+\telse if (!strcmp (argv[i], \"-MD\"))\n+\t  opts->print_deps = 2;\n+\telse if (!strcmp (argv[i], \"-MMD\"))\n+\t  opts->print_deps = 1;\n+\t/* For -MD and -MMD options, write deps on file named by next arg.  */\n+\tif (!strcmp (argv[i], \"-MD\") || !strcmp (argv[i], \"-MMD\"))\n+\t  {\n+\t    if (i+1 == argc)\n+\t      goto missing_filename;\n+\t    opts->deps_file = argv[++i];\n+\t  }\n+\telse\n+\t  {\n+\t    /* For -M and -MM, write deps on standard output\n+\t       and suppress the usual output.  */\n+\t    opts->no_output = 1;\n+\t  }\t  \n+\tbreak;\n+      \n+      case 'd':\n+\t{\n+\t  char *p = argv[i] + 2;\n+\t  char c;\n+\t  while ((c = *p++) != 0)\n+\t    {\n+\t      /* Arg to -d specifies what parts of macros to dump */\n+\t      switch (c)\n+\t\t{\n+\t\tcase 'M':\n+\t\t  opts->dump_macros = dump_only;\n+\t\t  opts->no_output = 1;\n+\t\t  break;\n+\t\tcase 'N':\n+\t\t  opts->dump_macros = dump_names;\n+\t\t  break;\n+\t\tcase 'D':\n+\t\t  opts->dump_macros = dump_definitions;\n+\t\t  break;\n+\t\tcase 'I':\n+\t\t  opts->dump_includes = 1;\n+\t\t  break;\n+\t\t}\n+\t    }\n \t}\n-      }\n-    break;\n+\tbreak;\n     \n-    case 'g':\n-      if (argv[i][2] == '3')\n-\topts->debug_output = 1;\n-      break;\n+      case 'g':\n+\tif (argv[i][2] == '3')\n+\t  opts->debug_output = 1;\n+\tbreak;\n       \n-    case '-':\n-      if (strcmp (argv[i], \"--help\") != 0)\n-\treturn i;\n-      print_help ();\n-      break;\n+      case '-':\n+\tif (!strcmp (argv[i], \"--help\"))\n+\t  print_help ();\n+\telse if (!strcmp (argv[i], \"--version\"))\n+\t  cpp_notice (\"GNU CPP version %s\\n\", version_string);\n+\texit (0);  /* XXX */\n+\tbreak;\n \t\n-    case 'v':\n-      cpp_notice (\"GNU CPP version %s\", version_string);\n+      case 'v':\n+\tcpp_notice (\"GNU CPP version %s\", version_string);\n #ifdef TARGET_VERSION\n-      TARGET_VERSION;\n+\tTARGET_VERSION;\n #endif\n-      fprintf (stderr, \"\\n\");\n-      opts->verbose = 1;\n-      break;\n+\tfputc ('\\n', stderr);\n+\topts->verbose = 1;\n+\tbreak;\n       \n-    case 'H':\n-      opts->print_include_names = 1;\n-      break;\n+      case 'H':\n+\topts->print_include_names = 1;\n+\tbreak;\n       \n-    case 'D':\n-      if (argv[i][2] != 0)\n-\tpush_pending (pfile, \"-D\", argv[i] + 2);\n-      else if (i + 1 == argc)\n+      case 'D':\n \t{\n-\t  cpp_fatal (pfile, \"Macro name missing after -D option\");\n-\t  return argc;\n+\t  struct pending_option *o = (struct pending_option *)\n+\t    xmalloc (sizeof (struct pending_option));\n+\t  if (argv[i][2] != 0)\n+\t    o->arg = argv[i] + 2;\n+\t  else if (i + 1 == argc)\n+\t    {\n+\t      cpp_fatal (pfile, \"Macro name missing after -D option\");\n+\t      return argc;\n+\t    }\n+\t  else\n+\t    o->arg = argv[++i];\n+\n+\t  o->next = NULL;\n+\t  o->undef = 0;\n+\t  APPEND (opts->pending, define, o);\n \t}\n-      else\n-\ti++, push_pending (pfile, \"-D\", argv[i]);\n-      break;\n+\tbreak;\n       \n-    case 'A':\n-      {\n-\tchar *p;\n+      case 'A':\n+\t{\n+\t  char *p;\n \t\n-\tif (argv[i][2] != 0)\n-\t  p = argv[i] + 2;\n-\telse if (i + 1 == argc)\n-\t  {\n-\t    cpp_fatal (pfile, \"Assertion missing after -A option\");\n-\t    return argc;\n-\t  }\n-\telse\n-\t  p = argv[++i];\n+\t  if (argv[i][2] != 0)\n+\t    p = argv[i] + 2;\n+\t  else if (i + 1 == argc)\n+\t    {\n+\t      cpp_fatal (pfile, \"Assertion missing after -A option\");\n+\t      return argc;\n+\t    }\n+\t  else\n+\t    p = argv[++i];\n \t\n-\tif (!strcmp (p, \"-\")) {\n-\t  struct cpp_pending **ptr;\n-\t  /* -A- eliminates all predefined macros and assertions.\n-\t     Let's include also any that were specified earlier\n-\t     on the command line.  That way we can get rid of any\n-\t     that were passed automatically in from GCC.  */\n-\t  opts->inhibit_predefs = 1;\n-\t  for (ptr = &opts->pending; *ptr != NULL; )\n+\t  if (strcmp (p, \"-\"))\n \t    {\n-\t      struct cpp_pending *pend = *ptr;\n-\t      if (pend->cmd && pend->cmd[0] == '-'\n-\t\t  && (pend->cmd[1] == 'D' || pend->cmd[1] == 'A'))\n+\t      struct pending_option *o = (struct pending_option *)\n+\t\txmalloc (sizeof (struct pending_option));\n+\n+\t      o->arg = p;\n+\t      o->next = NULL;\n+\t      o->undef = 0;\n+\t      APPEND (opts->pending, assert, o);\n+\t    }\n+\t  else\n+\t    {\n+\t      /* -A- eliminates all predefined macros and assertions.\n+\t\t Let's include also any that were specified earlier\n+\t\t on the command line.  That way we can get rid of any\n+\t\t that were passed automatically in from GCC.  */\n+\t      struct pending_option *o1, *o2;\n+\n+\t      o1 = opts->pending->define_head;\n+\t      while (o1)\n+\t\t{\n+\t\t  o2 = o1->next;\n+\t\t  free (o1);\n+\t\t  o1 = o2;\n+\t\t}\n+\t      o1 = opts->pending->assert_head;\n+\t      while (o1)\n \t\t{\n-\t\t  *ptr = pend->next;\n-\t\t  free (pend);\n+\t\t  o2 = o1->next;\n+\t\t  free (o1);\n+\t\t  o1 = o2;\n \t\t}\n-\t      else\n-\t\tptr = &pend->next;\n+\t      opts->pending->assert_head = NULL;\n+\t      opts->pending->assert_tail = NULL;\n+\t      opts->pending->define_head = NULL;\n+\t      opts->pending->define_tail = NULL;\n+\t      \n+\t      opts->inhibit_predefs = 1;\n \t    }\n-\t} else {\n-\t  push_pending (pfile, \"-A\", p);\n \t}\n-      }\n-    break;\n+\tbreak;\n     \n-    case 'U':\t\t/* JF #undef something */\n-      if (argv[i][2] != 0)\n-\tpush_pending (pfile, \"-U\", argv[i] + 2);\n-      else if (i + 1 == argc)\n+      case 'U':\n \t{\n-\t  cpp_fatal (pfile, \"Macro name missing after -U option\");\n-\t  return argc;\n+\t  struct pending_option *o = (struct pending_option *)\n+\t    xmalloc (sizeof (struct pending_option));\n+\t  \n+\t  if (argv[i][2] != 0)\n+\t    o->arg = argv[i] + 2;\n+\t  else if (i + 1 == argc)\n+\t    {\n+\t      cpp_fatal (pfile, \"Macro name missing after -U option\");\n+\t      return argc;\n+\t    }\n+\t  else\n+\t    o->arg = argv[++i];\n+\n+\t  o->next = NULL;\n+\t  o->undef = 1;\n+\t  APPEND (opts->pending, define, o);\n \t}\n-      else\n-\tpush_pending (pfile, \"-U\", argv[i+1]), i++;\n-      break;\n+\tbreak;\n       \n-    case 'C':\n-      opts->put_out_comments = 1;\n-      break;\n+      case 'C':\n+\topts->put_out_comments = 1;\n+\tbreak;\n       \n-    case 'E':\t\t\t/* -E comes from cc -E; ignore it.  */\n-      break;\n+      case 'E':\t\t\t/* -E comes from cc -E; ignore it.  */\n+\tbreak;\n       \n-    case 'P':\n-      opts->no_line_commands = 1;\n-      break;\n+      case 'P':\n+\topts->no_line_commands = 1;\n+\tbreak;\n       \n-    case '$':\t\t\t/* Don't include $ in identifiers.  */\n-      opts->dollars_in_ident = 0;\n-      break;\n+      case '$':\t\t\t/* Don't include $ in identifiers.  */\n+\topts->dollars_in_ident = 0;\n+\tbreak;\n       \n-    case 'n':\n-      if (!strcmp (argv[i], \"-nostdinc\"))\n-\t/* -nostdinc causes no default include directories.\n-\t   You must specify all include-file directories with -I.  */\n-\topts->no_standard_includes = 1;\n-      else if (!strcmp (argv[i], \"-nostdinc++\"))\n-\t/* -nostdinc++ causes no default C++-specific include directories. */\n-\topts->no_standard_cplusplus_includes = 1;\n+      case 'n':\n+\tif (!strcmp (argv[i], \"-nostdinc\"))\n+\t  /* -nostdinc causes no default include directories.\n+\t     You must specify all include-file directories with -I.  */\n+\t  opts->no_standard_includes = 1;\n+\telse if (!strcmp (argv[i], \"-nostdinc++\"))\n+\t  /* -nostdinc++ causes no default C++-specific include directories. */\n+\t  opts->no_standard_cplusplus_includes = 1;\n #if 0\n-      else if (!strcmp (argv[i], \"-noprecomp\"))\n-\tno_precomp = 1;\n+\telse if (!strcmp (argv[i], \"-noprecomp\"))\n+\t  no_precomp = 1;\n #endif\n-      break;\n-      \n-    case 'r':\n-      if (!strcmp (argv[i], \"-remap\"))\n-\topts->remap = 1;\n-      break;\n+\tbreak;\n       \n-    case 'u':\n-      /* Sun compiler passes undocumented switch \"-undef\".\n-\t Let's assume it means to inhibit the predefined symbols.  */\n-      opts->inhibit_predefs = 1;\n-      break;\n+      case 'r':\n+\tif (!strcmp (argv[i], \"-remap\"))\n+\t  opts->remap = 1;\n+\tbreak;\n       \n-    case '\\0': /* JF handle '-' as file name meaning stdin or stdout */\n-      if (opts->in_fname == NULL) {\n-\topts->in_fname = \"\";\n+      case 'u':\n+\tif (!strcmp (argv[i], \"-undef\"))\n+\t  opts->inhibit_predefs = 1;\n \tbreak;\n-      } else if (opts->out_fname == NULL) {\n-\topts->out_fname = \"\";\n+      \n+      case '\\0': /* JF handle '-' as file name meaning stdin or stdout */\n+\tif (opts->in_fname == NULL)\n+\t  opts->in_fname = \"\";\n+\telse if (opts->out_fname == NULL)\n+\t  opts->out_fname = \"\";\n+\telse\n+\t  return i;  /* error */\n \tbreak;\n-      }\t/* else fall through into error */\n \n-    default:\n-      return i;\n-    }\n-  }\n+      default:\n+\treturn i;\n+      }\n \n   return i + 1;\n+\n+ missing_filename:\n+  cpp_fatal (pfile, \"Filename missing after `%s' option\", argv[i]);\n+  return argc;\n+ missing_dirname:\n+  cpp_fatal (pfile, \"Directory name missing after `%s' option\", argv[i]);\n+  return argc;\n }\n \n /* Handle command-line options in (argc, argv)."}, {"sha": "c55eafac03f27444f9579c0ae6db1e0ed6b3663f", "filename": "gcc/cpplib.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b22d65c9a10ce316cb28c4c4a988cb3ccc73785/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b22d65c9a10ce316cb28c4c4a988cb3ccc73785/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=0b22d65c9a10ce316cb28c4c4a988cb3ccc73785", "patch": "@@ -2936,6 +2936,19 @@ do_unassert (pfile, keyword)\n   return 1;\n }\n \n+/* Process STR as if it appeared as the body of an #unassert. */\n+void\n+cpp_unassert (pfile, str)\n+     cpp_reader *pfile;\n+     unsigned char *str;\n+{\n+  if (cpp_push_buffer (pfile, str, strlen (str)) != NULL)\n+    {\n+      do_assert (pfile, NULL);\n+      cpp_pop_buffer (pfile);\n+    }\n+}  \n+\n int\n cpp_read_check_assertion (pfile)\n      cpp_reader *pfile;"}, {"sha": "e2bb414448757f5ac7646de3271455ece4b6df00", "filename": "gcc/cpplib.h", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b22d65c9a10ce316cb28c4c4a988cb3ccc73785/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b22d65c9a10ce316cb28c4c4a988cb3ccc73785/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=0b22d65c9a10ce316cb28c4c4a988cb3ccc73785", "patch": "@@ -145,7 +145,6 @@ struct cpp_buffer\n   char has_escapes;\n };\n \n-struct cpp_pending;  /* Forward declaration - for C++. */\n struct file_name_map_list;\n \n /* Maximum nesting of cpp_buffers.  We use a static limit, partly for\n@@ -297,6 +296,24 @@ struct cpp_reader\n /* The bottom of the buffer stack. */\n #define CPP_NULL_BUFFER(PFILE) NULL\n \n+/* The `pending' structure accumulates all the options that are not\n+   actually processed until we hit cpp_start_read.  It consists of\n+   several lists, one for each type of option.  We keep both head and\n+   tail pointers for quick insertion. */\n+struct cpp_pending\n+{\n+  struct pending_option *define_head, *define_tail;\n+  struct pending_option *assert_head, *assert_tail;\n+\n+  struct file_name_list *quote_head, *quote_tail;\n+  struct file_name_list *brack_head, *brack_tail;\n+  struct file_name_list *systm_head, *systm_tail;\n+  struct file_name_list *after_head, *after_tail;\n+\n+  struct pending_option *imacros_head, *imacros_tail;\n+  struct pending_option *include_head, *include_tail;\n+};\n+\n /* Pointed to by cpp_reader.opts. */\n struct cpp_options {\n   char *in_fname;\n@@ -435,16 +452,14 @@ struct cpp_options {\n \n   char done_initializing;\n \n-  /* Search paths for include files.  system_include, after_include are\n-     only used during option parsing. */\n+  /* Search paths for include files.  */\n   struct file_name_list *quote_include;\t /* First dir to search for \"file\" */\n   struct file_name_list *bracket_include;/* First dir to search for <file> */\n-  struct file_name_list *system_include; /* First dir with system headers  */\n-  struct file_name_list *after_include;  /* Headers to search after system */\n \n-  /* Directory prefix that should replace `/usr' in the standard\n-     include file directories.  */\n+  /* Directory prefix that should replace `/usr/lib/gcc-lib/TARGET/VERSION'\n+     in the standard include file directories.  */\n   char *include_prefix;\n+  int include_prefix_len;\n \n   char inhibit_predefs;\n   char no_standard_includes;\n@@ -472,7 +487,7 @@ struct cpp_options {\n      even if they are ifdefed out.  */\n   int dump_includes;\n \n-  /* Pending -D, -U and -A options, in reverse order. */\n+  /* Pending options - -D, -U, -A, -I, -ixxx. */\n   struct cpp_pending *pending;\n \n   /* File name which deps are being written to.\n@@ -671,6 +686,7 @@ extern cpp_buffer* cpp_file_buffer PARAMS((cpp_reader *));\n extern void cpp_define PARAMS ((cpp_reader *, unsigned char *));\n extern void cpp_assert PARAMS ((cpp_reader *, unsigned char *));\n extern void cpp_undef  PARAMS ((cpp_reader *, unsigned char *));\n+extern void cpp_unassert PARAMS ((cpp_reader *, unsigned char *));\n \n extern void cpp_error PVPROTO ((cpp_reader *, const char *, ...))\n   ATTRIBUTE_PRINTF_2;\n@@ -728,9 +744,7 @@ extern void cpp_print_containing_files PROTO ((cpp_reader *));\n extern void cpp_notice PVPROTO ((const char *msgid, ...)) ATTRIBUTE_PRINTF_1;\n \n /* In cppfiles.c */\n-extern void append_include_chain\tPROTO ((cpp_reader *,\n-\t\t\t\t\t\tstruct file_name_list **,\n-\t\t\t\t\t\tconst char *, int));\n+extern void simplify_pathname\t\tPROTO ((char *));\n extern void merge_include_chains\tPROTO ((struct cpp_options *));\n extern int find_include_file\t\tPROTO ((cpp_reader *, char *,\n \t\t\t\t\t\tstruct file_name_list *,"}]}