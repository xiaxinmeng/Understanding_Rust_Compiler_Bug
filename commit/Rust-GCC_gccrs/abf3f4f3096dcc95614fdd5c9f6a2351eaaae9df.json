{"sha": "abf3f4f3096dcc95614fdd5c9f6a2351eaaae9df", "node_id": "C_kwDOANBUbNoAKGFiZjNmNGYzMDk2ZGNjOTU2MTRmZGQ1YzlmNmEyMzUxZWFhYWU5ZGY", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2021-07-26T08:55:39Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-09-23T13:06:15Z"}, "message": "[Ada] Wrappers of access-to-subprograms with pre/post conditions\n\ngcc/ada/\n\n\t* sem_ch3.adb (Build_Access_Subprogram_Wrapper): Decorate the\n\twrapper with attribute Is_Wrapper, and move its declaration to\n\tthe freezing actions of its type declaration; done to facilitate\n\tidentifying it at later stages to avoid handling it as a\n\tprimitive operation of a tagged type; otherwise it may be\n\thandled as a dispatching operation and erroneously registered in\n\ta dispatch table.\n\t(Make_Index): Add missing decoration of field Parent.\n\t* sem_disp.adb (Check_Dispatching_Operation): Complete\n\tdecoration of late-overriding dispatching primitives.\n\t(Is_Access_To_Subprogram_Wrapper): New subprogram.\n\t(Inherited_Subprograms): Prevent cascaded errors; adding missing\n\tsupport for private types.\n\t* sem_type.adb (Add_One_Interp): Add missing support for the\n\tfirst interpretation of a primitive of an inmediate ancestor\n\tinterface.\n\t* sem_util.adb (Check_Result_And_Post_State_In_Pragma): Do not\n\treport missing reference in postcondition placed in internally\n\tbuilt wrappers.\n\t* exp_disp.adb (Expand_Dispatching_Call): Adding assertion.", "tree": {"sha": "e9331983a88ed9520b438cf1f5f8404655ed199f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9331983a88ed9520b438cf1f5f8404655ed199f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abf3f4f3096dcc95614fdd5c9f6a2351eaaae9df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abf3f4f3096dcc95614fdd5c9f6a2351eaaae9df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abf3f4f3096dcc95614fdd5c9f6a2351eaaae9df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abf3f4f3096dcc95614fdd5c9f6a2351eaaae9df/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe43084ca31636ee5c997cc9c37f88e71a59293c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe43084ca31636ee5c997cc9c37f88e71a59293c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe43084ca31636ee5c997cc9c37f88e71a59293c"}], "stats": {"total": 106, "additions": 105, "deletions": 1}, "files": [{"sha": "7cce41b234ea9e7ee535cb00ce722a3dcb82600e", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abf3f4f3096dcc95614fdd5c9f6a2351eaaae9df/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abf3f4f3096dcc95614fdd5c9f6a2351eaaae9df/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=abf3f4f3096dcc95614fdd5c9f6a2351eaaae9df", "patch": "@@ -1016,6 +1016,10 @@ package body Exp_Disp is\n \n       Typ := Find_Specific_Type (CW_Typ);\n \n+      --  The tagged type of a dispatching call must be frozen at this stage\n+\n+      pragma Assert (Is_Frozen (Typ));\n+\n       if not Is_Limited_Type (Typ) then\n          Eq_Prim_Op := Find_Prim_Op (Typ, Name_Op_Eq);\n       end if;"}, {"sha": "677a9f5951359778de478b34d444f737fe72fa0a", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abf3f4f3096dcc95614fdd5c9f6a2351eaaae9df/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abf3f4f3096dcc95614fdd5c9f6a2351eaaae9df/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=abf3f4f3096dcc95614fdd5c9f6a2351eaaae9df", "patch": "@@ -6767,6 +6767,7 @@ package body Sem_Ch3 is\n            Make_Procedure_Specification (Loc,\n              Defining_Unit_Name       => Subp,\n              Parameter_Specifications => Profile);\n+         Mutate_Ekind (Subp, E_Procedure);\n       else\n          Spec :=\n            Make_Function_Specification (Loc,\n@@ -6775,13 +6776,32 @@ package body Sem_Ch3 is\n              Result_Definition        =>\n                New_Copy_Tree\n                  (Result_Definition (Type_Definition (Decl))));\n+         Mutate_Ekind (Subp, E_Function);\n       end if;\n \n       New_Decl :=\n         Make_Subprogram_Declaration (Loc, Specification => Spec);\n       Set_Aspect_Specifications (New_Decl, Contracts);\n+      Set_Is_Wrapper (Subp);\n+\n+      --  The wrapper is declared in the freezing actions to facilitate its\n+      --  identification and thus avoid handling it as a primitive operation\n+      --  of a tagged type (see Is_Access_To_Subprogram_Wrapper); otherwise it\n+      --  may be handled as a dispatching operation and erroneously registered\n+      --  in a dispatch table.\n+\n+      if not GNATprove_Mode then\n+         Ensure_Freeze_Node (Id);\n+         Append_Freeze_Actions (Id, New_List (New_Decl));\n+\n+      --  Under GNATprove mode there is no such problem but we do not declare\n+      --  it in the freezing actions since they are not analyzed under this\n+      --  mode.\n+\n+      else\n+         Insert_After (Decl, New_Decl);\n+      end if;\n \n-      Insert_After (Decl, New_Decl);\n       Set_Access_Subprogram_Wrapper (Designated_Type (Id), Subp);\n       Build_Access_Subprogram_Wrapper_Body (Decl, New_Decl);\n    end Build_Access_Subprogram_Wrapper;\n@@ -19794,6 +19814,8 @@ package body Sem_Ch3 is\n                Set_Is_Non_Static_Subtype (Def_Id);\n             end if;\n          end if;\n+\n+         Set_Parent (Def_Id, N);\n       end if;\n \n       --  Final step is to label the index with this constructed type"}, {"sha": "cc612db9f1bb61bb4ebe3542552e5201d8cf55ea", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abf3f4f3096dcc95614fdd5c9f6a2351eaaae9df/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abf3f4f3096dcc95614fdd5c9f6a2351eaaae9df/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=abf3f4f3096dcc95614fdd5c9f6a2351eaaae9df", "patch": "@@ -1018,13 +1018,32 @@ package body Sem_Disp is\n    ---------------------------------\n \n    procedure Check_Dispatching_Operation (Subp, Old_Subp : Entity_Id) is\n+      function Is_Access_To_Subprogram_Wrapper (E : Entity_Id) return Boolean;\n+      --  Return True if E is an access to subprogram wrapper\n+\n       procedure Warn_On_Late_Primitive_After_Private_Extension\n         (Typ  : Entity_Id;\n          Prim : Entity_Id);\n       --  Prim is a dispatching primitive of the tagged type Typ. Warn on Prim\n       --  if it is a public primitive defined after some private extension of\n       --  the tagged type.\n \n+      -------------------------------------\n+      -- Is_Access_To_Subprogram_Wrapper --\n+      -------------------------------------\n+\n+      function Is_Access_To_Subprogram_Wrapper (E : Entity_Id) return Boolean\n+      is\n+         Decl_N : constant Node_Id := Unit_Declaration_Node (E);\n+         Par_N  : constant Node_Id := Parent (List_Containing (Decl_N));\n+\n+      begin\n+         --  Access to subprogram wrappers are declared in the freezing actions\n+\n+         return Nkind (Par_N) = N_Freeze_Entity\n+           and then Ekind (Entity (Par_N)) = E_Access_Subprogram_Type;\n+      end Is_Access_To_Subprogram_Wrapper;\n+\n       ----------------------------------------------------\n       -- Warn_On_Late_Primitive_After_Private_Extension --\n       ----------------------------------------------------\n@@ -1095,6 +1114,13 @@ package body Sem_Disp is\n         or else Is_Partial_Invariant_Procedure (Subp)\n       then\n          return;\n+\n+      --  Wrappers of access to subprograms are not primitive subprograms.\n+\n+      elsif Is_Wrapper (Subp)\n+        and then Is_Access_To_Subprogram_Wrapper (Subp)\n+      then\n+         return;\n       end if;\n \n       Set_Is_Dispatching_Operation (Subp, False);\n@@ -1407,6 +1433,35 @@ package body Sem_Disp is\n                            Generate_Reference (Tagged_Type, Subp, 'P', False);\n                            Override_Dispatching_Operation\n                              (Tagged_Type, Old_Subp, Subp);\n+                           Set_Is_Dispatching_Operation (Subp);\n+\n+                           --  Inherit decoration of controlling formals and\n+                           --  controlling result.\n+\n+                           if Ekind (Old_Subp) = E_Function\n+                             and then Has_Controlling_Result (Old_Subp)\n+                           then\n+                              Set_Has_Controlling_Result (Subp);\n+                           end if;\n+\n+                           if Present (First_Formal (Old_Subp)) then\n+                              declare\n+                                 Old_Formal : Entity_Id;\n+                                 Formal     : Entity_Id;\n+\n+                              begin\n+                                 Formal     := First_Formal (Subp);\n+                                 Old_Formal := First_Formal (Old_Subp);\n+\n+                                 while Present (Old_Formal) loop\n+                                    Set_Is_Controlling_Formal (Formal,\n+                                      Is_Controlling_Formal (Old_Formal));\n+\n+                                    Next_Formal (Formal);\n+                                    Next_Formal (Old_Formal);\n+                                 end loop;\n+                              end;\n+                           end if;\n                         end if;\n                      end if;\n                   end if;\n@@ -2420,12 +2475,27 @@ package body Sem_Disp is\n \n                   if No (Tag_Typ) then\n                      return Result (1 .. 0);\n+\n+                  --  Prevent cascaded errors\n+\n+                  elsif Is_Concurrent_Type (Tag_Typ)\n+                     and then No (Corresponding_Record_Type (Tag_Typ))\n+                     and then Serious_Errors_Detected > 0\n+                  then\n+                     return Result (1 .. 0);\n                   end if;\n \n                   if Is_Concurrent_Type (Tag_Typ) then\n                      Tag_Typ := Corresponding_Record_Type (Tag_Typ);\n                   end if;\n \n+                  if Present (Tag_Typ)\n+                    and then Is_Private_Type (Tag_Typ)\n+                    and then Present (Full_View (Tag_Typ))\n+                  then\n+                     Tag_Typ := Full_View (Tag_Typ);\n+                  end if;\n+\n                   --  Search primitive operations of dispatching type\n \n                   if Present (Tag_Typ)"}, {"sha": "3ca2e302a8e069a2b2cb497e06edb1373254c407", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abf3f4f3096dcc95614fdd5c9f6a2351eaaae9df/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abf3f4f3096dcc95614fdd5c9f6a2351eaaae9df/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=abf3f4f3096dcc95614fdd5c9f6a2351eaaae9df", "patch": "@@ -444,6 +444,12 @@ package body Sem_Type is\n                    Find_Dispatching_Type (E))\n          then\n             Add_One_Interp (N, Interface_Alias (E), T);\n+\n+         --  Otherwise this is the first interpretation, N has type Any_Type\n+         --  and we must place the new type on the node.\n+\n+         else\n+            Set_Etype (N, T);\n          end if;\n \n          return;"}, {"sha": "f5cf8342c1a10c5ffe1789f72e3aa03e4eb62087", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abf3f4f3096dcc95614fdd5c9f6a2351eaaae9df/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abf3f4f3096dcc95614fdd5c9f6a2351eaaae9df/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=abf3f4f3096dcc95614fdd5c9f6a2351eaaae9df", "patch": "@@ -5012,6 +5012,7 @@ package body Sem_Util is\n               and then not Mentions_Post_State (Expr)\n               and then not (Is_Ghost_Entity (Subp_Id)\n                              and then Has_No_Output (Subp_Id))\n+              and then not Is_Wrapper (Subp_Id)\n             then\n                if Pragma_Name (Prag) = Name_Contract_Cases then\n                   Error_Msg_NE (Adjust_Message\n@@ -32045,6 +32046,7 @@ package body Sem_Util is\n                   end if;\n                end;\n             end if;\n+\n             return False;\n          end Is_Access_Type_For_Indirect_Temp;\n "}]}