{"sha": "ed248cf7644668ecbad4a1a333fca6d0f7bba55a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQyNDhjZjc2NDQ2NjhlY2JhZDRhMWEzMzNmY2E2ZDBmN2JiYTU1YQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-03-20T22:36:42Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-03-20T22:36:42Z"}, "message": "c-common.c (check_case_value): Adjust comment about stripping NOPs.\n\n\t* c-common.c (check_case_value): Adjust comment about stripping\n\tNOPs.\n\t(handle_vector_size_attribute): Don't strip NON_LVALUE_EXPR.\n\t* c-typeck.c (default_conversion, convert_arguments,\n\tbuild_modify_expr, convert_for_assignment, store_init_value,\n\tdigest_init): Use STRIP_TYPE_NOPS instead of stripping nops\n\tmanually.  Remove inaccurate comments.\n\nFrom-SVN: r96770", "tree": {"sha": "6afbe1d7fd19b5b59a51a04e48abe01c100bcb59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6afbe1d7fd19b5b59a51a04e48abe01c100bcb59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed248cf7644668ecbad4a1a333fca6d0f7bba55a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed248cf7644668ecbad4a1a333fca6d0f7bba55a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed248cf7644668ecbad4a1a333fca6d0f7bba55a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed248cf7644668ecbad4a1a333fca6d0f7bba55a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "749053f5e22e146b0fa53134a1d3bff912ca5840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/749053f5e22e146b0fa53134a1d3bff912ca5840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/749053f5e22e146b0fa53134a1d3bff912ca5840"}], "stats": {"total": 55, "additions": 19, "deletions": 36}, "files": [{"sha": "9527b129594a59ded78f51ac96968999fccc22a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed248cf7644668ecbad4a1a333fca6d0f7bba55a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed248cf7644668ecbad4a1a333fca6d0f7bba55a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed248cf7644668ecbad4a1a333fca6d0f7bba55a", "patch": "@@ -1,3 +1,13 @@\n+2005-03-20  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (check_case_value): Adjust comment about stripping\n+\tNOPs.\n+\t(handle_vector_size_attribute): Don't strip NON_LVALUE_EXPR.\n+\t* c-typeck.c (default_conversion, convert_arguments,\n+\tbuild_modify_expr, convert_for_assignment, store_init_value,\n+\tdigest_init): Use STRIP_TYPE_NOPS instead of stripping nops\n+\tmanually.  Remove inaccurate comments.\n+\n 2005-03-20  Roger Sayle  <roger@eyesopen.com>\n \t    Joseph S. Myers  <joseph@codesourcery.com>\n "}, {"sha": "1851836e9df326778d5a624b2f59cb766951ea6d", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed248cf7644668ecbad4a1a333fca6d0f7bba55a/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed248cf7644668ecbad4a1a333fca6d0f7bba55a/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ed248cf7644668ecbad4a1a333fca6d0f7bba55a", "patch": "@@ -1411,7 +1411,8 @@ check_case_value (tree value)\n   if (value == NULL_TREE)\n     return value;\n \n-  /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue.  */\n+  /* ??? Can we ever get nops here for a valid case value?  We\n+     shouldn't for C.  */\n   STRIP_TYPE_NOPS (value);\n   /* In C++, the following is allowed:\n \n@@ -4934,11 +4935,7 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n \n   *no_add_attrs = true;\n \n-  /* Stripping NON_LVALUE_EXPR allows declarations such as\n-     typedef short v4si __attribute__((vector_size (4 * sizeof(short)))).  */\n   size = TREE_VALUE (args);\n-  if (TREE_CODE (size) == NON_LVALUE_EXPR)\n-    size = TREE_OPERAND (size, 0);\n \n   if (!host_integerp (size, 1))\n     {"}, {"sha": "0595b88b877f11396039617d217cb66ba63a7700", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 7, "deletions": 31, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed248cf7644668ecbad4a1a333fca6d0f7bba55a/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed248cf7644668ecbad4a1a333fca6d0f7bba55a/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ed248cf7644668ecbad4a1a333fca6d0f7bba55a", "patch": "@@ -1378,16 +1378,9 @@ default_conversion (tree exp)\n       type = TREE_TYPE (exp);\n     }\n \n-  /* Strip NON_LVALUE_EXPRs and no-op conversions, since we aren't using as\n-     an lvalue.\n-\n-     Do not use STRIP_NOPS here!  It will remove conversions from pointer\n-     to integer and cause infinite recursion.  */\n+  /* Strip no-op conversions.  */\n   orig_exp = exp;\n-  while (TREE_CODE (exp) == NON_LVALUE_EXPR\n-\t || (TREE_CODE (exp) == NOP_EXPR\n-\t     && TREE_TYPE (TREE_OPERAND (exp, 0)) == TREE_TYPE (exp)))\n-    exp = TREE_OPERAND (exp, 0);\n+  STRIP_TYPE_NOPS (exp);\n \n   if (TREE_NO_WARNING (orig_exp))\n     TREE_NO_WARNING (exp) = 1;\n@@ -2133,11 +2126,7 @@ convert_arguments (tree typelist, tree values, tree function, tree fundecl)\n \t  argnum -= 2;\n \t}\n \n-      /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue.  */\n-      /* Do not use STRIP_NOPS here!  We do not want an enumerator with value 0\n-\t to convert automatically to a pointer.  */\n-      if (TREE_CODE (val) == NON_LVALUE_EXPR)\n-\tval = TREE_OPERAND (val, 0);\n+      STRIP_TYPE_NOPS (val);\n \n       val = default_function_array_conversion (val);\n \n@@ -3349,11 +3338,7 @@ build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs)\n   if (TREE_CODE (lhs) == ERROR_MARK || TREE_CODE (rhs) == ERROR_MARK)\n     return error_mark_node;\n \n-  /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue.  */\n-  /* Do not use STRIP_NOPS here.  We do not want an enumerator\n-     whose value is 0 to count as a null pointer constant.  */\n-  if (TREE_CODE (rhs) == NON_LVALUE_EXPR)\n-    rhs = TREE_OPERAND (rhs, 0);\n+  STRIP_TYPE_NOPS (rhs);\n \n   newrhs = rhs;\n \n@@ -3487,11 +3472,7 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n       }\t\t\t\t\t\t\\\n   } while (0)\n \n-  /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue.  */\n-  /* Do not use STRIP_NOPS here.  We do not want an enumerator\n-     whose value is 0 to count as a null pointer constant.  */\n-  if (TREE_CODE (rhs) == NON_LVALUE_EXPR)\n-    rhs = TREE_OPERAND (rhs, 0);\n+  STRIP_TYPE_NOPS (rhs);\n \n   if (TREE_CODE (TREE_TYPE (rhs)) == ARRAY_TYPE\n       || TREE_CODE (TREE_TYPE (rhs)) == FUNCTION_TYPE)\n@@ -3933,8 +3914,7 @@ store_init_value (tree decl, tree init)\n     {\n       tree inside_init = init;\n \n-      if (TREE_CODE (init) == NON_LVALUE_EXPR)\n-\tinside_init = TREE_OPERAND (init, 0);\n+      STRIP_TYPE_NOPS (inside_init);\n       inside_init = fold (inside_init);\n \n       if (TREE_CODE (inside_init) == COMPOUND_LITERAL_EXPR)\n@@ -4154,11 +4134,7 @@ digest_init (tree type, tree init, bool strict_string, int require_constant)\n       || TREE_TYPE (init) == error_mark_node)\n     return error_mark_node;\n \n-  /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue.  */\n-  /* Do not use STRIP_NOPS here.  We do not want an enumerator\n-     whose value is 0 to count as a null pointer constant.  */\n-  if (TREE_CODE (init) == NON_LVALUE_EXPR)\n-    inside_init = TREE_OPERAND (init, 0);\n+  STRIP_TYPE_NOPS (inside_init);\n \n   inside_init = fold (inside_init);\n "}]}