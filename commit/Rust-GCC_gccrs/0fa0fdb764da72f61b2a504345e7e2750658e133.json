{"sha": "0fa0fdb764da72f61b2a504345e7e2750658e133", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZhMGZkYjc2NGRhNzJmNjFiMmE1MDQzNDVlN2UyNzUwNjU4ZTEzMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-09-14T11:57:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-09-14T11:57:08Z"}, "message": "tree-ssa-sccvn.c (visit_phi): Merge undefined values similar to VN_TOP.\n\n2017-09-14  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (visit_phi): Merge undefined values similar\n\tto VN_TOP.\n\n\t* gcc.dg/tree-ssa/ssa-fre-59.c: New testcase.\n\t* gcc.dg/uninit-suppress_2.c: Adjust.\n\t* gcc.dg/tree-ssa/ssa-sccvn-2.c: Likewise.\n\nFrom-SVN: r252756", "tree": {"sha": "cffeabcb1a9fe908e9a199f0c9f8a60c9f2532ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cffeabcb1a9fe908e9a199f0c9f8a60c9f2532ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fa0fdb764da72f61b2a504345e7e2750658e133", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa0fdb764da72f61b2a504345e7e2750658e133", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fa0fdb764da72f61b2a504345e7e2750658e133", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa0fdb764da72f61b2a504345e7e2750658e133/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "83ada6e8e669d0218771edcc99317b9951431df9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83ada6e8e669d0218771edcc99317b9951431df9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83ada6e8e669d0218771edcc99317b9951431df9"}], "stats": {"total": 90, "additions": 63, "deletions": 27}, "files": [{"sha": "3925e46594e3a3a264a8011b63d92ce4250badc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa0fdb764da72f61b2a504345e7e2750658e133/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa0fdb764da72f61b2a504345e7e2750658e133/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0fa0fdb764da72f61b2a504345e7e2750658e133", "patch": "@@ -1,3 +1,8 @@\n+2017-09-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (visit_phi): Merge undefined values similar\n+\tto VN_TOP.\n+\n 2017-09-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* dwarf2out.c (dwarf2out_source_line): Remove superfluous test."}, {"sha": "fe3cfa4622165e50110c72607840f530f2b20762", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa0fdb764da72f61b2a504345e7e2750658e133/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa0fdb764da72f61b2a504345e7e2750658e133/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0fa0fdb764da72f61b2a504345e7e2750658e133", "patch": "@@ -1,3 +1,9 @@\n+2017-09-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-fre-59.c: New testcase.\n+\t* gcc.dg/uninit-suppress_2.c: Adjust.\n+\t* gcc.dg/tree-ssa/ssa-sccvn-2.c: Likewise.\n+\n 2017-09-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR tree-optimization/80996"}, {"sha": "952934bccd5df92b4ca99c087df74a1cfe2c2748", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-59.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa0fdb764da72f61b2a504345e7e2750658e133/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-59.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa0fdb764da72f61b2a504345e7e2750658e133/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-59.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-59.c?ref=0fa0fdb764da72f61b2a504345e7e2750658e133", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre1\" } */\n+\n+int i;\n+int foo (int b)\n+{\n+  int j;\n+  i = 1;\n+  if (b)\n+    j = i;\n+  return i - j;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 0;\" \"fre1\" } } */"}, {"sha": "ab7582588bcaa29073dd718afb9e0301d86a43a5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sccvn-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa0fdb764da72f61b2a504345e7e2750658e133/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sccvn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa0fdb764da72f61b2a504345e7e2750658e133/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sccvn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sccvn-2.c?ref=0fa0fdb764da72f61b2a504345e7e2750658e133", "patch": "@@ -21,4 +21,4 @@ int vnum_test8(int *data)\n } \n /* We should eliminate m - n, and set n = n + k into n = m, and\n    set p to 0 */\n-/* { dg-final { scan-tree-dump-times \"Eliminated: 4\" 1 \"fre1\"} } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 5\" 1 \"fre1\"} } */"}, {"sha": "af0f192f0c08ed249488461acdccb7ec45a960dd", "filename": "gcc/testsuite/gcc.dg/uninit-suppress_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa0fdb764da72f61b2a504345e7e2750658e133/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-suppress_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa0fdb764da72f61b2a504345e7e2750658e133/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-suppress_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-suppress_2.c?ref=0fa0fdb764da72f61b2a504345e7e2750658e133", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fno-tree-ccp -fno-tree-vrp -O2 -Wuninitialized -Werror=uninitialized -Wno-error=maybe-uninitialized\" } */\n+/* { dg-options \"-fno-tree-ccp -fno-tree-vrp -fno-tree-fre -fno-tree-pre -fno-code-hoisting -O2 -Wuninitialized -Werror=uninitialized -Wno-error=maybe-uninitialized\" } */\n void blah();\n void bar (int);\n int gflag;"}, {"sha": "44618daedce3d5d77a2320661c57277cb1caca41", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 36, "deletions": 25, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa0fdb764da72f61b2a504345e7e2750658e133/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa0fdb764da72f61b2a504345e7e2750658e133/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=0fa0fdb764da72f61b2a504345e7e2750658e133", "patch": "@@ -3860,11 +3860,11 @@ visit_reference_op_store (tree lhs, tree op, gimple *stmt)\n static bool\n visit_phi (gimple *phi)\n {\n-  bool changed = false;\n-  tree result;\n-  tree sameval = VN_TOP;\n-  bool allsame = true;\n+  tree result, sameval = VN_TOP, seen_undef = NULL_TREE;\n   unsigned n_executable = 0;\n+  bool allsame = true;\n+  edge_iterator ei;\n+  edge e;\n \n   /* TODO: We could check for this in init_sccvn, and replace this\n      with a gcc_assert.  */\n@@ -3873,8 +3873,6 @@ visit_phi (gimple *phi)\n \n   /* See if all non-TOP arguments have the same value.  TOP is\n      equivalent to everything, so we can ignore it.  */\n-  edge_iterator ei;\n-  edge e;\n   FOR_EACH_EDGE (e, ei, gimple_bb (phi)->preds)\n     if (e->flags & EDGE_EXECUTABLE)\n       {\n@@ -3884,39 +3882,52 @@ visit_phi (gimple *phi)\n \tif (TREE_CODE (def) == SSA_NAME)\n \t  def = SSA_VAL (def);\n \tif (def == VN_TOP)\n-\t  continue;\n-\tif (sameval == VN_TOP)\n+\t  ;\n+\t/* Ignore undefined defs for sameval but record one.  */\n+\telse if (TREE_CODE (def) == SSA_NAME\n+\t\t && ssa_undefined_value_p (def, false))\n+\t  seen_undef = def;\n+\telse if (sameval == VN_TOP)\n \t  sameval = def;\n \telse if (!expressions_equal_p (def, sameval))\n \t  {\n \t    allsame = false;\n \t    break;\n \t  }\n       }\n-  \n-  /* If none of the edges was executable or all incoming values are\n-     undefined keep the value-number at VN_TOP.  If only a single edge\n-     is exectuable use its value.  */\n-  if (sameval == VN_TOP\n-      || n_executable == 1)\n-    return set_ssa_val_to (PHI_RESULT (phi), sameval);\n \n+\n+  /* If none of the edges was executable keep the value-number at VN_TOP,\n+     if only a single edge is exectuable use its value.  */\n+  if (n_executable <= 1)\n+    result = seen_undef ? seen_undef : sameval;\n+  /* If we saw only undefined values create a new undef SSA name to\n+     avoid false equivalences.  */\n+  else if (sameval == VN_TOP)\n+    {\n+      gcc_assert (seen_undef);\n+      result = seen_undef;\n+    }\n   /* First see if it is equivalent to a phi node in this block.  We prefer\n      this as it allows IV elimination - see PRs 66502 and 67167.  */\n-  result = vn_phi_lookup (phi);\n-  if (result)\n-    changed = set_ssa_val_to (PHI_RESULT (phi), result);\n-  /* Otherwise all value numbered to the same value, the phi node has that\n-     value.  */\n-  else if (allsame)\n-    changed = set_ssa_val_to (PHI_RESULT (phi), sameval);\n+  else if ((result = vn_phi_lookup (phi)))\n+    ;\n+  /* If all values are the same use that, unless we've seen undefined\n+     values as well and the value isn't constant.\n+     CCP/copyprop have the same restriction to not remove uninit warnings.  */\n+  else if (allsame\n+\t   && (! seen_undef || is_gimple_min_invariant (sameval)))\n+    result = sameval;\n   else\n     {\n-      vn_phi_insert (phi, PHI_RESULT (phi));\n-      changed = set_ssa_val_to (PHI_RESULT (phi), PHI_RESULT (phi));\n+      result = PHI_RESULT (phi);\n+      /* Only insert PHIs that are varying, for constant value numbers\n+         we mess up equivalences otherwise as we are only comparing\n+\t the immediate controlling predicates.  */\n+      vn_phi_insert (phi, result);\n     }\n \n-  return changed;\n+  return set_ssa_val_to (PHI_RESULT (phi), result);\n }\n \n /* Try to simplify RHS using equivalences and constant folding.  */"}]}