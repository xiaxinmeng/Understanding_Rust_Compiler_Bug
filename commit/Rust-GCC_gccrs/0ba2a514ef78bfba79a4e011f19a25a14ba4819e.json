{"sha": "0ba2a514ef78bfba79a4e011f19a25a14ba4819e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJhMmE1MTRlZjc4YmZiYTc5YTRlMDExZjE5YTI1YTE0YmE0ODE5ZQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-12-08T05:57:48Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-12-08T05:57:48Z"}, "message": "Makefile.am (EXTRA_LONG_DOUBLE_yes): Remove ccosl, cexpl, clog10l, csinhl, ctanhl, ctanl.\n\n\t* libmath/Makefile.am (EXTRA_LONG_DOUBLE_yes): Remove ccosl,\n\tcexpl, clog10l, csinhl, ctanhl, ctanl.\n\t(EXTRA_DIST): Remove ccos, ccosf, csin, csinf, ccosh, ccoshf,\n\tcsing, csinhf, clog10, clog10f, ctan, ctanf, ctanh, ctanhf.\n\t* libmath/Makefile.in: Regenarate.\n\t* libmath/ccos.c: Remove.\n\t* libmath/ccosf.c: Likewise.\n\t* libmath/ccosl.c: Likewise.\n\t* libmath/csin.c: Likewise.\n\t* libmath/csinf.c: Likewise.\n\t* libmath/csinl.c: Likewise.\n\t* libmath/ctan.c: Likewise.\n\t* libmath/ctanf.c: Likewise.\n\t* libmath/ctanl.c: Likewise.\n\t* libmath/ccosh.c: Likewise.\n\t* libmath/ccoshf.c: Likewise.\n\t* libmath/ccoshl.c: Likewise.\n\t* libmath/csinh.c: Likewise.\n\t* libmath/csinhf.c: Likewise.\n\t* libmath/csinhl.c: Likewise.\n\t* libmath/ctanh.c: Likewise.\n\t* libmath/ctanhf.c: Likewise.\n\t* libmath/ctanhl.c: Likewise.\n\t* libmath/cexp.c: Likewise.\n\t* libmath/cexpf.c: Likewise.\n\t* libmath/cexpl.c: Likewise.\n\t* libmath/clog10.c: Likewise.\n\t* libmath/clog10f.c: Likewise.\n\t* libmath/clog10l.c: Likewise.\n\t* libmath/complex-stub.h: Remove forward declaration of functions\n\tmentioned above.\n\n\t* include/bits/std_complex.h(tan, tanh): Define primary templates.\n\t(complex<>): Remove friend declarations for tan<> and tanh<>.\n\t* src/complex.cc(tan, tanh): Remove specializations.\n\n\t* acinclude.m4: Remove check for ccos, ccosf, ccosl, ccosh,\n\tccoshf, ccoshl,\tcsin, csinf, csinl, csinh, csinhf, csinhl, cexp,\n\tcexpf, cexpl, ctan, ctanf, ctanl, ctanh, ctanhf, ctanhl.\n\t* aclocal.m4: Regenarate.\n\t* configure: Regenarate.\n\nFrom-SVN: r38128", "tree": {"sha": "c2efe55185f17757b1916b16445e9da6a1a2c288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2efe55185f17757b1916b16445e9da6a1a2c288"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ba2a514ef78bfba79a4e011f19a25a14ba4819e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ba2a514ef78bfba79a4e011f19a25a14ba4819e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ba2a514ef78bfba79a4e011f19a25a14ba4819e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ba2a514ef78bfba79a4e011f19a25a14ba4819e/comments", "author": null, "committer": null, "parents": [{"sha": "ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4"}], "stats": {"total": 2467, "additions": 176, "deletions": 2291}, "files": [{"sha": "7e6da1276fd9b75776d32c680da9cefde9a14ebf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba2a514ef78bfba79a4e011f19a25a14ba4819e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba2a514ef78bfba79a4e011f19a25a14ba4819e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0ba2a514ef78bfba79a4e011f19a25a14ba4819e", "patch": "@@ -1,3 +1,47 @@\n+2000-12-08  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* libmath/Makefile.am (EXTRA_LONG_DOUBLE_yes): Remove ccosl,\n+\tcexpl, clog10l, csinhl, ctanhl, ctanl.\n+\t(EXTRA_DIST): Remove ccos, ccosf, csin, csinf, ccosh, ccoshf,\n+\tcsing, csinhf, clog10, clog10f, ctan, ctanf, ctanh, ctanhf.\n+\t* libmath/Makefile.in: Regenarate.\n+\t* libmath/ccos.c: Remove.\n+\t* libmath/ccosf.c: Likewise.\n+\t* libmath/ccosl.c: Likewise.\n+\t* libmath/csin.c: Likewise.\n+\t* libmath/csinf.c: Likewise.\n+\t* libmath/csinl.c: Likewise.\n+\t* libmath/ctan.c: Likewise.\n+\t* libmath/ctanf.c: Likewise.\n+\t* libmath/ctanl.c: Likewise.\n+\t* libmath/ccosh.c: Likewise.\n+\t* libmath/ccoshf.c: Likewise.\n+\t* libmath/ccoshl.c: Likewise.\n+\t* libmath/csinh.c: Likewise.\n+\t* libmath/csinhf.c: Likewise.\n+\t* libmath/csinhl.c: Likewise.\n+\t* libmath/ctanh.c: Likewise.\n+\t* libmath/ctanhf.c: Likewise.\n+\t* libmath/ctanhl.c: Likewise.\n+\t* libmath/cexp.c: Likewise.\n+\t* libmath/cexpf.c: Likewise.\n+\t* libmath/cexpl.c: Likewise.\n+\t* libmath/clog10.c: Likewise.\n+\t* libmath/clog10f.c: Likewise.\n+\t* libmath/clog10l.c: Likewise.\n+\t* libmath/complex-stub.h: Remove forward declaration of functions\n+\tmentioned above.\n+\n+\t* include/bits/std_complex.h(tan, tanh): Define primary templates. \n+\t(complex<>): Remove friend declarations for tan<> and tanh<>.\n+\t* src/complex.cc(tan, tanh): Remove specializations.\n+\n+\t* acinclude.m4: Remove check for ccos, ccosf, ccosl, ccosh,\n+\tccoshf, ccoshl,\tcsin, csinf, csinl, csinh, csinhf, csinhl, cexp,\n+\tcexpf, cexpl, ctan, ctanf, ctanl, ctanh, ctanhf, ctanhl.\n+\t* aclocal.m4: Regenarate.\n+\t* configure: Regenarate.\n+\n 2000-12-08  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* acinclude.m4: Don't forget to remove check for cpowl as it is no"}, {"sha": "002ea0828c3df0e62df76f3d81d049b83d844619", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba2a514ef78bfba79a4e011f19a25a14ba4819e/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba2a514ef78bfba79a4e011f19a25a14ba4819e/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=0ba2a514ef78bfba79a4e011f19a25a14ba4819e", "patch": "@@ -754,9 +754,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   dnl Check for complex versions of math functions of platform.\n   AC_CHECK_HEADERS([complex.h])\n   AC_CHECK_LIB(m, main)\n-  AC_REPLACE_MATHFUNCS(ccos ccosf ccosh ccoshf cexp cexpf \\\n-  csin csinf csinh csinhf csqrt \\\n-  csqrtf ctan ctanf ctanh ctanhf nan hypot hypotf atan2f expf \\\n+  AC_REPLACE_MATHFUNCS(csqrt csqrtf nan hypot hypotf atan2f expf \\\n   copysignf)\n \n   dnl Compile the long double complex functions only if the function \n@@ -767,8 +765,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   if test x$ac_cv_func_atan2l = x\"yes\" \\\n      && test x$ac_cv_func_copysignl = x\"yes\"; then\n     USE_COMPLEX_LONG_DOUBLE=yes\n-    AC_REPLACE_MATHFUNCS(ccoshl ccosl cexpl csinhl csinl \\\n-    csqrtl ctanhl ctanl hypotl signbitl clog10l)\n+    AC_REPLACE_MATHFUNCS(csqrtl hypotl signbitl)\n   fi\n \n   AC_SUBST(USE_COMPLEX_LONG_DOUBLE)"}, {"sha": "7a062478c2a0e077977507a1d67c779dd64a7100", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba2a514ef78bfba79a4e011f19a25a14ba4819e/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba2a514ef78bfba79a4e011f19a25a14ba4819e/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=0ba2a514ef78bfba79a4e011f19a25a14ba4819e", "patch": "@@ -766,9 +766,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   dnl Check for complex versions of math functions of platform.\n   AC_CHECK_HEADERS([complex.h])\n   AC_CHECK_LIB(m, main)\n-  AC_REPLACE_MATHFUNCS(ccos ccosf ccosh ccoshf cexp cexpf \\\n-  csin csinf csinh csinhf csqrt \\\n-  csqrtf ctan ctanf ctanh ctanhf nan hypot hypotf atan2f expf \\\n+  AC_REPLACE_MATHFUNCS(csqrt csqrtf nan hypot hypotf atan2f expf \\\n   copysignf)\n \n   dnl Compile the long double complex functions only if the function \n@@ -779,8 +777,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   if test x$ac_cv_func_atan2l = x\"yes\" \\\n      && test x$ac_cv_func_copysignl = x\"yes\"; then\n     USE_COMPLEX_LONG_DOUBLE=yes\n-    AC_REPLACE_MATHFUNCS(ccoshl ccosl cexpl csinhl csinl \\\n-    csqrtl ctanhl ctanl hypotl signbitl clog10l)\n+    AC_REPLACE_MATHFUNCS(csqrtl hypotl signbitl)\n   fi\n \n   AC_SUBST(USE_COMPLEX_LONG_DOUBLE)"}, {"sha": "c98030577b7c8c611b29fadf0e89634b5ede4f30", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 107, "deletions": 110, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba2a514ef78bfba79a4e011f19a25a14ba4819e/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba2a514ef78bfba79a4e011f19a25a14ba4819e/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=0ba2a514ef78bfba79a4e011f19a25a14ba4819e", "patch": "@@ -17410,18 +17410,16 @@ else\n   echo \"$ac_t\"\"no\" 1>&6\n fi\n \n-  for ac_func in ccos ccosf ccosh ccoshf cexp cexpf \\\n-  csin csinf csinh csinhf csqrt \\\n-  csqrtf ctan ctanf ctanh ctanhf nan hypot hypotf atan2f expf \\\n+  for ac_func in csqrt csqrtf nan hypot hypotf atan2f expf \\\n   copysignf\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:17420: checking for $ac_func\" >&5\n+echo \"configure:17418: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 17425 \"configure\"\n+#line 17423 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -17444,7 +17442,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:17448: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:17446: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -17475,16 +17473,15 @@ done\n   if test x$ac_cv_func_atan2l = x\"yes\" \\\n      && test x$ac_cv_func_copysignl = x\"yes\"; then\n     USE_COMPLEX_LONG_DOUBLE=yes\n-    for ac_func in ccoshl ccosl cexpl csinhl csinl \\\n-    csqrtl ctanhl ctanl hypotl signbitl clog10l\n+    for ac_func in csqrtl hypotl signbitl\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:17483: checking for $ac_func\" >&5\n+echo \"configure:17480: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 17488 \"configure\"\n+#line 17485 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -17507,7 +17504,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:17511: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:17508: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -17541,7 +17538,7 @@ done\n   \n \n   echo $ac_n \"checking for GNU C++ __complex__ support\"\"... $ac_c\" 1>&6\n-echo \"configure:17545: checking for GNU C++ __complex__ support\" >&5\n+echo \"configure:17542: checking for GNU C++ __complex__ support\" >&5\n   if eval \"test \\\"`echo '$''{'glibcpp_cv_complex'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -17555,7 +17552,7 @@ ac_link='${CXX-g++} -o conftest${ac_exeext} $CXXFLAGS $CPPFLAGS $LDFLAGS conftes\n cross_compiling=$ac_cv_prog_cxx_cross\n \n     cat > conftest.$ac_ext <<EOF\n-#line 17559 \"configure\"\n+#line 17556 \"configure\"\n #include \"confdefs.h\"\n struct dcomplex { __complex__ double x; }; \\\n                     dcomplex f(const dcomplex& x) { return dcomplex(x); }\n@@ -17564,7 +17561,7 @@ int main() {\n                      dcomplex x; f(x); \n ; return 0; }\n EOF\n-if { (eval echo configure:17568: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:17565: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   glibcpp_cv_complex=ok\n else\n@@ -17594,7 +17591,7 @@ EOF\n   fi\n \n   echo $ac_n \"checking for GNU C++ __complex__ float support\"\"... $ac_c\" 1>&6\n-echo \"configure:17598: checking for GNU C++ __complex__ float support\" >&5\n+echo \"configure:17595: checking for GNU C++ __complex__ float support\" >&5\n   if eval \"test \\\"`echo '$''{'glibcpp_cv_float_complex'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -17627,14 +17624,14 @@ cross_compiling=$ac_cv_prog_cxx_cross\n       };\n EOB\n     cat > conftest.$ac_ext <<EOF\n-#line 17631 \"configure\"\n+#line 17628 \"configure\"\n #include \"confdefs.h\"\n #include \"conftest.h\"\n int main() {\n \n ; return 0; }\n EOF\n-if { (eval echo configure:17638: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:17635: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   glibcpp_cv_float_complex=ok\n else\n@@ -17668,17 +17665,17 @@ EOF\n \n         ac_safe=`echo \"wchar.h\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for wchar.h\"\"... $ac_c\" 1>&6\n-echo \"configure:17672: checking for wchar.h\" >&5\n+echo \"configure:17669: checking for wchar.h\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 17677 \"configure\"\n+#line 17674 \"configure\"\n #include \"confdefs.h\"\n #include <wchar.h>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:17682: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:17679: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -17702,17 +17699,17 @@ fi\n \n     ac_safe=`echo \"wctype.h\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for wctype.h\"\"... $ac_c\" 1>&6\n-echo \"configure:17706: checking for wctype.h\" >&5\n+echo \"configure:17703: checking for wctype.h\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 17711 \"configure\"\n+#line 17708 \"configure\"\n #include \"confdefs.h\"\n #include <wctype.h>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:17716: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:17713: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -17738,16 +17735,16 @@ fi\n         if test x\"$ac_has_wchar_h\" = xyes && test x\"$ac_has_wctype_h\" = xyes; then\n   \n                   echo $ac_n \"checking for mbstate_t\"\"... $ac_c\" 1>&6\n-echo \"configure:17742: checking for mbstate_t\" >&5\n+echo \"configure:17739: checking for mbstate_t\" >&5\n       cat > conftest.$ac_ext <<EOF\n-#line 17744 \"configure\"\n+#line 17741 \"configure\"\n #include \"confdefs.h\"\n #include <wchar.h>\n int main() {\n mbstate_t teststate;\n ; return 0; }\n EOF\n-if { (eval echo configure:17751: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:17748: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   use_native_mbstatet=yes\n else\n@@ -17760,16 +17757,16 @@ rm -f conftest*\n       echo \"$ac_t\"\"$use_native_mbstatet\" 1>&6\n     \n                   echo $ac_n \"checking for WCHAR_MIN and WCHAR_MAX\"\"... $ac_c\" 1>&6\n-echo \"configure:17764: checking for WCHAR_MIN and WCHAR_MAX\" >&5\n+echo \"configure:17761: checking for WCHAR_MIN and WCHAR_MAX\" >&5\n       cat > conftest.$ac_ext <<EOF\n-#line 17766 \"configure\"\n+#line 17763 \"configure\"\n #include \"confdefs.h\"\n #include <wchar.h>\n int main() {\n int i = WCHAR_MIN; int j = WCHAR_MAX;\n ; return 0; }\n EOF\n-if { (eval echo configure:17773: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:17770: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   has_wchar_minmax=yes\n else\n@@ -17782,9 +17779,9 @@ rm -f conftest*\n       echo \"$ac_t\"\"$has_wchar_minmax\" 1>&6\n     \n                   echo $ac_n \"checking for WEOF\"\"... $ac_c\" 1>&6\n-echo \"configure:17786: checking for WEOF\" >&5\n+echo \"configure:17783: checking for WEOF\" >&5\n       cat > conftest.$ac_ext <<EOF\n-#line 17788 \"configure\"\n+#line 17785 \"configure\"\n #include \"confdefs.h\"\n \n         #include <wchar.h>\n@@ -17793,7 +17790,7 @@ int main() {\n wint_t i = WEOF;\n ; return 0; }\n EOF\n-if { (eval echo configure:17797: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:17794: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   has_weof=yes\n else\n@@ -17809,12 +17806,12 @@ rm -f conftest*\n       wcsrtombs mbsrtowcs\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:17813: checking for $ac_func\" >&5\n+echo \"configure:17810: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 17818 \"configure\"\n+#line 17815 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -17837,7 +17834,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:17841: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:17838: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -17864,7 +17861,7 @@ done\n \n   \n       echo $ac_n \"checking for ISO C99 wchar_t support\"\"... $ac_c\" 1>&6\n-echo \"configure:17868: checking for ISO C99 wchar_t support\" >&5\n+echo \"configure:17865: checking for ISO C99 wchar_t support\" >&5\n       if test x\"$has_weof\" = xyes && test x\"$has_wchar_minmax\" = xyes \\\n          && test x\"$ac_wfuncs\" = xyes; then\n         ac_isoC99_wchar_t=yes\n@@ -17875,17 +17872,17 @@ echo \"configure:17868: checking for ISO C99 wchar_t support\" >&5\n   \n                   ac_safe=`echo \"iconv.h\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for iconv.h\"\"... $ac_c\" 1>&6\n-echo \"configure:17879: checking for iconv.h\" >&5\n+echo \"configure:17876: checking for iconv.h\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 17884 \"configure\"\n+#line 17881 \"configure\"\n #include \"confdefs.h\"\n #include <iconv.h>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:17889: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:17886: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -17909,17 +17906,17 @@ fi\n \n       ac_safe=`echo \"langinfo.h\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for langinfo.h\"\"... $ac_c\" 1>&6\n-echo \"configure:17913: checking for langinfo.h\" >&5\n+echo \"configure:17910: checking for langinfo.h\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 17918 \"configure\"\n+#line 17915 \"configure\"\n #include \"confdefs.h\"\n #include <langinfo.h>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:17923: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:17920: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -17943,15 +17940,15 @@ fi\n \n \n             echo $ac_n \"checking for iconv in -liconv\"\"... $ac_c\" 1>&6\n-echo \"configure:17947: checking for iconv in -liconv\" >&5\n+echo \"configure:17944: checking for iconv in -liconv\" >&5\n ac_lib_var=`echo iconv'_'iconv | sed 'y%./+-%__p_%'`\n if eval \"test \\\"`echo '$''{'ac_cv_lib_$ac_lib_var'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   ac_save_LIBS=\"$LIBS\"\n LIBS=\"-liconv  $LIBS\"\n cat > conftest.$ac_ext <<EOF\n-#line 17955 \"configure\"\n+#line 17952 \"configure\"\n #include \"confdefs.h\"\n /* Override any gcc2 internal prototype to avoid an error.  */\n /* We use char because int might match the return type of a gcc2\n@@ -17962,7 +17959,7 @@ int main() {\n iconv()\n ; return 0; }\n EOF\n-if { (eval echo configure:17966: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:17963: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_lib_$ac_lib_var=yes\"\n else\n@@ -17988,12 +17985,12 @@ fi\n       for ac_func in iconv_open iconv_close iconv nl_langinfo\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:17992: checking for $ac_func\" >&5\n+echo \"configure:17989: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 17997 \"configure\"\n+#line 17994 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -18016,7 +18013,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:18020: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:18017: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -18046,7 +18043,7 @@ done\n       LIBS=\"$ac_save_LIBS\"\n \n       echo $ac_n \"checking for XPG2 wchar_t support\"\"... $ac_c\" 1>&6\n-echo \"configure:18050: checking for XPG2 wchar_t support\" >&5\n+echo \"configure:18047: checking for XPG2 wchar_t support\" >&5\n       if test x\"$ac_has_iconv_h\" = xyes && test x\"$ac_has_langinfo_h\" = xyes \\\n          && test x\"$ac_XPG2funcs\" = xyes; then\n         ac_XPG2_wchar_t=yes\n@@ -18056,7 +18053,7 @@ echo \"configure:18050: checking for XPG2 wchar_t support\" >&5\n       echo \"$ac_t\"\"$ac_XPG2_wchar_t\" 1>&6\n   \n                   echo $ac_n \"checking for enabled wchar_t specializations\"\"... $ac_c\" 1>&6\n-echo \"configure:18060: checking for enabled wchar_t specializations\" >&5\n+echo \"configure:18057: checking for enabled wchar_t specializations\" >&5\n       if test x\"$ac_isoC99_wchar_t\" = xyes \\\n          && test x\"$ac_XPG2_wchar_t\" = xyes; then\n         libinst_wstring_la=\"libinst-wstring.la\"\n@@ -18082,17 +18079,17 @@ EOF\n   \n   ac_safe=`echo \"ctype.h\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for ctype.h\"\"... $ac_c\" 1>&6\n-echo \"configure:18086: checking for ctype.h\" >&5\n+echo \"configure:18083: checking for ctype.h\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 18091 \"configure\"\n+#line 18088 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:18096: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:18093: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -18113,9 +18110,9 @@ if eval \"test \\\"`echo '$ac_cv_header_'$ac_safe`\\\" = yes\"; then\n         ctype_default=yes\n \n         echo $ac_n \"checking <ctype> for GNU/Linux\"\"... $ac_c\" 1>&6\n-echo \"configure:18117: checking <ctype> for GNU/Linux\" >&5\n+echo \"configure:18114: checking <ctype> for GNU/Linux\" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 18119 \"configure\"\n+#line 18116 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -18126,7 +18123,7 @@ int\n         + __ctype_tolower[a] + __ctype_toupper[a] + __ctype_b[a];}\n ; return 0; }\n EOF\n-if { (eval echo configure:18130: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:18127: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_linux=yes\n@@ -18145,9 +18142,9 @@ rm -f conftest*\n \n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for FreeBSD 4.0\"\"... $ac_c\" 1>&6\n-echo \"configure:18149: checking <ctype> for FreeBSD 4.0\" >&5\n+echo \"configure:18146: checking <ctype> for FreeBSD 4.0\" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 18151 \"configure\"\n+#line 18148 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -18157,7 +18154,7 @@ int\n         + _CTYPE_D + _CTYPE_P + _CTYPE_X + _CTYPE_G ;}\n ; return 0; }\n EOF\n-if { (eval echo configure:18161: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:18158: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_bsd=yes\n@@ -18177,9 +18174,9 @@ rm -f conftest*\n \n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for FreeBSD 3.4\"\"... $ac_c\" 1>&6\n-echo \"configure:18181: checking <ctype> for FreeBSD 3.4\" >&5\n+echo \"configure:18178: checking <ctype> for FreeBSD 3.4\" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 18183 \"configure\"\n+#line 18180 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -18189,7 +18186,7 @@ int\n       + _D + _P + _X + _G + __istype (a, 0);}\n ; return 0; }\n EOF\n-if { (eval echo configure:18193: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:18190: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_freebsd34=yes\n@@ -18209,9 +18206,9 @@ rm -f conftest*\n \n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for NetBSD\"\"... $ac_c\" 1>&6\n-echo \"configure:18213: checking <ctype> for NetBSD\" >&5\n+echo \"configure:18210: checking <ctype> for NetBSD\" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 18215 \"configure\"\n+#line 18212 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -18221,7 +18218,7 @@ int\n       + _N + _P + _X + _tolower_tab_[a] + _toupper_tab_[a];}\n ; return 0; }\n EOF\n-if { (eval echo configure:18225: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:18222: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_netbsd=yes\n@@ -18241,9 +18238,9 @@ rm -f conftest*\n \n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for Solaris 2.6,7,8\"\"... $ac_c\" 1>&6\n-echo \"configure:18245: checking <ctype> for Solaris 2.6,7,8\" >&5\n+echo \"configure:18242: checking <ctype> for Solaris 2.6,7,8\" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 18247 \"configure\"\n+#line 18244 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -18254,7 +18251,7 @@ int\n         + __trans_lower[a] + __trans_upper[a] + __ctype_mask[a];}\n ; return 0; }\n EOF\n-if { (eval echo configure:18258: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:18255: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_solaris=yes\n@@ -18269,7 +18266,7 @@ rm -f conftest*\n \n     if test $ctype_solaris = \"yes\"; then\n       echo $ac_n \"checking   for version\"\"... $ac_c\" 1>&6\n-echo \"configure:18273: checking   for version\" >&5\n+echo \"configure:18270: checking   for version\" >&5\n       ac_ext=C\n # CXXFLAGS is not in ac_cpp because -g, -O, etc. are not valid cpp options.\n ac_cpp='$CXXCPP $CPPFLAGS'\n@@ -18278,14 +18275,14 @@ ac_link='${CXX-g++} -o conftest${ac_exeext} $CXXFLAGS $CPPFLAGS $LDFLAGS conftes\n cross_compiling=$ac_cv_prog_cxx_cross\n  \n       cat > conftest.$ac_ext <<EOF\n-#line 18282 \"configure\"\n+#line 18279 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n typedef long* __to_type; __to_type const& _M_toupper = __trans_upper;\n ; return 0; }\n EOF\n-if { (eval echo configure:18289: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:18286: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n       ctype_solaris26=yes\n@@ -18317,9 +18314,9 @@ cross_compiling=$ac_cv_prog_cc_cross\n \n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for Solaris 2.5.1\"\"... $ac_c\" 1>&6\n-echo \"configure:18321: checking <ctype> for Solaris 2.5.1\" >&5\n+echo \"configure:18318: checking <ctype> for Solaris 2.5.1\" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 18323 \"configure\"\n+#line 18320 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -18329,7 +18326,7 @@ int\n         + __ctype[a];}\n ; return 0; }\n EOF\n-if { (eval echo configure:18333: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:18330: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_solaris25=yes\n@@ -18349,9 +18346,9 @@ rm -f conftest*\n \n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for AIX\"\"... $ac_c\" 1>&6\n-echo \"configure:18353: checking <ctype> for AIX\" >&5\n+echo \"configure:18350: checking <ctype> for AIX\" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 18355 \"configure\"\n+#line 18352 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -18362,7 +18359,7 @@ int\n         + _VALC('a') + _IS('c', 0);}\n ; return 0; }\n EOF\n-if { (eval echo configure:18366: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:18363: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_aix=yes\n@@ -18382,9 +18379,9 @@ rm -f conftest*\n \n         if test $ctype_default = \"yes\"; then \n     echo $ac_n \"checking <ctype> for IRIX\"\"... $ac_c\" 1>&6\n-echo \"configure:18386: checking <ctype> for IRIX\" >&5\n+echo \"configure:18383: checking <ctype> for IRIX\" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 18388 \"configure\"\n+#line 18385 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -18394,7 +18391,7 @@ int\n              _A + _PR + _G + _BL;}\n ; return 0; }\n EOF\n-if { (eval echo configure:18398: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:18395: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_irix=yes\n@@ -18414,9 +18411,9 @@ rm -f conftest*\n \n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for newlib\"\"... $ac_c\" 1>&6\n-echo \"configure:18418: checking <ctype> for newlib\" >&5\n+echo \"configure:18415: checking <ctype> for newlib\" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 18420 \"configure\"\n+#line 18417 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -18426,7 +18423,7 @@ int\n         + _ctype_[a];}\n ; return 0; }\n EOF\n-if { (eval echo configure:18430: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:18427: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_newlib=yes\n@@ -18466,12 +18463,12 @@ fi\n   for ac_func in strtof\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:18470: checking for $ac_func\" >&5\n+echo \"configure:18467: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 18475 \"configure\"\n+#line 18472 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -18494,7 +18491,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:18498: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:18495: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -18520,7 +18517,7 @@ done\n \n   \n   echo $ac_n \"checking for strtold declaration\"\"... $ac_c\" 1>&6\n-echo \"configure:18524: checking for strtold declaration\" >&5\n+echo \"configure:18521: checking for strtold declaration\" >&5\n   if test x${glibcpp_cv_func_strtold_use+set} != xset; then\n     if eval \"test \\\"`echo '$''{'glibcpp_cv_func_strtold_use'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n@@ -18535,14 +18532,14 @@ ac_link='${CXX-g++} -o conftest${ac_exeext} $CXXFLAGS $CPPFLAGS $LDFLAGS conftes\n cross_compiling=$ac_cv_prog_cxx_cross\n \n       cat > conftest.$ac_ext <<EOF\n-#line 18539 \"configure\"\n+#line 18536 \"configure\"\n #include \"confdefs.h\"\n #include <stdlib.h>\n int main() {\n  strtold(0, 0);\n ; return 0; }\n EOF\n-if { (eval echo configure:18546: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:18543: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   glibcpp_cv_func_strtold_use=yes\n else\n@@ -18568,12 +18565,12 @@ fi\n     for ac_func in strtold\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:18572: checking for $ac_func\" >&5\n+echo \"configure:18569: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 18577 \"configure\"\n+#line 18574 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -18596,7 +18593,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:18600: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:18597: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -18630,17 +18627,17 @@ done\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n-echo \"configure:18634: checking for $ac_hdr\" >&5\n+echo \"configure:18631: checking for $ac_hdr\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 18639 \"configure\"\n+#line 18636 \"configure\"\n #include \"confdefs.h\"\n #include <$ac_hdr>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:18644: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:18641: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -18669,12 +18666,12 @@ done\n for ac_func in getpagesize\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:18673: checking for $ac_func\" >&5\n+echo \"configure:18670: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 18678 \"configure\"\n+#line 18675 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -18697,7 +18694,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:18701: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:18698: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -18722,15 +18719,15 @@ fi\n done\n \n echo $ac_n \"checking for working mmap\"\"... $ac_c\" 1>&6\n-echo \"configure:18726: checking for working mmap\" >&5\n+echo \"configure:18723: checking for working mmap\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_mmap_fixed_mapped'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   if test \"$cross_compiling\" = yes; then\n   ac_cv_func_mmap_fixed_mapped=no\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 18734 \"configure\"\n+#line 18731 \"configure\"\n #include \"confdefs.h\"\n \n /* Thanks to Mike Haertel and Jim Avera for this test.\n@@ -18870,7 +18867,7 @@ main()\n }\n \n EOF\n-if { (eval echo configure:18874: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+if { (eval echo configure:18871: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n then\n   ac_cv_func_mmap_fixed_mapped=yes\n else\n@@ -18981,17 +18978,17 @@ rm -f confcache\n \n   ac_safe=`echo \"locale.h\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for locale.h\"\"... $ac_c\" 1>&6\n-echo \"configure:18985: checking for locale.h\" >&5\n+echo \"configure:18982: checking for locale.h\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 18990 \"configure\"\n+#line 18987 \"configure\"\n #include \"confdefs.h\"\n #include <locale.h>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:18995: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:18992: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -19009,19 +19006,19 @@ if eval \"test \\\"`echo '$ac_cv_header_'$ac_safe`\\\" = yes\"; then\n   echo \"$ac_t\"\"yes\" 1>&6\n   \n     echo $ac_n \"checking for LC_MESSAGES\"\"... $ac_c\" 1>&6\n-echo \"configure:19013: checking for LC_MESSAGES\" >&5\n+echo \"configure:19010: checking for LC_MESSAGES\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_val_LC_MESSAGES'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 19018 \"configure\"\n+#line 19015 \"configure\"\n #include \"confdefs.h\"\n #include <locale.h>\n int main() {\n return LC_MESSAGES\n ; return 0; }\n EOF\n-if { (eval echo configure:19025: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:19022: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   ac_cv_val_LC_MESSAGES=yes\n else\n@@ -19063,14 +19060,14 @@ INTERFACE=v3\n # Check for the interface version number for specifying where header\n # files are installed, if a version number is provided.\n echo $ac_n \"checking for interface version number\"\"... $ac_c\" 1>&6\n-echo \"configure:19067: checking for interface version number\" >&5\n+echo \"configure:19064: checking for interface version number\" >&5\n libstdcxx_interface=$INTERFACE\n echo \"$ac_t\"\"$libstdcxx_interface\" 1>&6\n \n \n # Process the option --with-gxx-include-dir=<path to include-files directory>\n echo $ac_n \"checking for --with-gxx-include-dir\"\"... $ac_c\" 1>&6\n-echo \"configure:19074: checking for --with-gxx-include-dir\" >&5\n+echo \"configure:19071: checking for --with-gxx-include-dir\" >&5\n # Check whether --with-gxx-include-dir or --without-gxx-include-dir was given.\n if test \"${with_gxx_include_dir+set}\" = set; then\n   withval=\"$with_gxx_include_dir\"\n@@ -19104,7 +19101,7 @@ fi\n \n # Process the option \"--enable-version-specific-runtime-libs\"\n echo $ac_n \"checking for --enable-version-specific-runtime-libs\"\"... $ac_c\" 1>&6\n-echo \"configure:19108: checking for --enable-version-specific-runtime-libs\" >&5\n+echo \"configure:19105: checking for --enable-version-specific-runtime-libs\" >&5\n # Check whether --enable-version-specific-runtime-libs or --disable-version-specific-runtime-libs was given.\n if test \"${enable_version_specific_runtime_libs+set}\" = set; then\n   enableval=\"$enable_version_specific_runtime_libs\""}, {"sha": "10f0661a3b4d660523c3db570f79910094181328", "filename": "libstdc++-v3/include/bits/std_complex.h", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba2a514ef78bfba79a4e011f19a25a14ba4819e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba2a514ef78bfba79a4e011f19a25a14ba4819e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h?ref=0ba2a514ef78bfba79a4e011f19a25a14ba4819e", "patch": "@@ -450,6 +450,20 @@ namespace std\n       return complex<_Tp>(sinh(__x) * cos(__y), cosh(__x) * sin(__y));\n     }\n \n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    tan(const complex<_Tp>& __z)\n+    {\n+      return sin(__z) / cos(__z);\n+    }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    tanh(const complex<_Tp>& __z)\n+    {\n+      return sinh(__z) / cosh(__z);\n+    }\n+\n   template<typename _Tp>\n     inline complex<_Tp>\n     pow(const complex<_Tp>& __z, int __n)\n@@ -525,8 +539,6 @@ namespace std\n     friend class complex<long double>;\n \n     friend complex<float> sqrt<>(const complex<float>&);\n-    friend complex<float> tan<>(const complex<float>&);\n-    friend complex<float> tanh<>(const complex<float>&);\n   };\n \n   inline float\n@@ -675,8 +687,6 @@ namespace std\n     friend class complex<long double>;\n \n     friend complex<double> sqrt<>(const complex<double>&);\n-    friend complex<double> tan<>(const complex<double>&);\n-    friend complex<double> tanh<>(const complex<double>&);\n   };\n \n   inline double\n@@ -825,8 +835,6 @@ namespace std\n     friend class complex<double>;\n \n     friend complex<long double> sqrt<>(const complex<long double>&);\n-    friend complex<long double> tan<>(const complex<long double>&);\n-    friend complex<long double> tanh<>(const complex<long double>&);\n   };\n \n   inline"}, {"sha": "5aaf29095bb31534497644e3c4e08defb0fb7df9", "filename": "libstdc++-v3/libmath/Makefile.am", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba2a514ef78bfba79a4e011f19a25a14ba4819e/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba2a514ef78bfba79a4e011f19a25a14ba4819e/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am?ref=0ba2a514ef78bfba79a4e011f19a25a14ba4819e", "patch": "@@ -26,17 +26,10 @@ AUTOMAKE_OPTIONS = 1.3 cygnus\n noinst_LTLIBRARIES = libmath.la\n \n EXTRA_LONG_DOUBLE_yes = \\\n-\tccosl.c cexpl.c clog10l.c csinhl.c \\\n-\tcsqrtl.c ctanhl.c ctanl.c hypotl.c \\\n-\tsignbitl.c\n+\tcsqrtl.c hypotl.c signbitl.c\n \n EXTRA_DIST = \\\n-\tccos.c ccosf.c ccosh.c ccoshf.c ccoshl.c \\\n-\tcexp.c cexpf.c clog10.c clog10f.c \\\n-\tcsin.c csinf.c csinh.c csinhf.c \\\n-\tcsinl.c csqrt.c csqrtf.c  ctan.c ctanf.c ctanh.c \\\n-\tctanhf.c hypot.c hypotf.c\\\n-\tatan2f.c expf.c \\\n+\tcsqrt.c csqrtf.c hypot.c hypotf.c atan2f.c expf.c \\\n \t$(EXTRA_LONG_DOUBLE_yes) \n \n libmath_la_LIBADD = \\"}, {"sha": "7d9de5913175b5b39f5fc7e4c296c4ebb576fdfc", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba2a514ef78bfba79a4e011f19a25a14ba4819e/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba2a514ef78bfba79a4e011f19a25a14ba4819e/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=0ba2a514ef78bfba79a4e011f19a25a14ba4819e", "patch": "@@ -113,31 +113,18 @@ AUTOMAKE_OPTIONS = 1.3 cygnus\n \n noinst_LTLIBRARIES = libmath.la\n \n-EXTRA_LONG_DOUBLE_yes = \\\n-\tccosl.c cexpl.c clog10l.c csinhl.c \\\n-\tcsqrtl.c ctanhl.c ctanl.c hypotl.c \\\n-\tsignbitl.c\n+EXTRA_LONG_DOUBLE_yes =  \tcsqrtl.c hypotl.c signbitl.c\n \n \n-EXTRA_DIST = \\\n-\tccos.c ccosf.c ccosh.c ccoshf.c ccoshl.c \\\n-\tcexp.c cexpf.c clog10.c clog10f.c \\\n-\tcsin.c csinf.c csinh.c csinhf.c \\\n-\tcsinl.c csqrt.c csqrtf.c  ctan.c ctanf.c ctanh.c \\\n-\tctanhf.c hypot.c hypotf.c\\\n-\tatan2f.c expf.c \\\n-\t$(EXTRA_LONG_DOUBLE_yes) \n+EXTRA_DIST =  \tcsqrt.c csqrtf.c hypot.c hypotf.c atan2f.c expf.c \t$(EXTRA_LONG_DOUBLE_yes) \n \n \n-libmath_la_LIBADD = \\\n-\t@LIBMATHOBJS@ \\\n-\t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n+libmath_la_LIBADD =  \t@LIBMATHOBJS@ \t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n \n \n libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n \n-libmath_la_SOURCES = \\\n-\tsignbit.c signbitf.c\n+libmath_la_SOURCES =  \tsignbit.c signbitf.c\n \n \n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n@@ -151,9 +138,7 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \\\n-\t$(TOPLEVEL_INCLUDES) \n+INCLUDES =  \t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \t$(TOPLEVEL_INCLUDES) \n \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h"}, {"sha": "208c6e6abc37cbef6dd22efaa0e273260caff217", "filename": "libstdc++-v3/libmath/ccos.c", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fccos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fccos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fccos.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,68 +0,0 @@\n-/* Return cosine of complex double value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-__complex__ double\n-ccos (__complex__ double x)\n-{\n-  __complex__ double res;\n-\n-  if (!FINITE_P (__real__ x) || __imag__ x != __imag__ x)\n-    {\n-      if (__real__ x == 0.0 || __imag__ x == 0.0)\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = 0.0;\n-\t}\n-      else if (INFINITE_P (__imag__ x))\n-\t{\n-\t  __real__ res = HUGE_VAL;\n-\t  __imag__ res = NAN;\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      __complex__ double y;\n-\n-      __real__ y = -__imag__ x;\n-      __imag__ y = __real__ x;\n-\n-      res = ccosh (y);\n-    }\n-\n-  return res;\n-}"}, {"sha": "0cbf4a040fea9b99a4ae8c7c681debe6be8f98ae", "filename": "libstdc++-v3/libmath/ccosf.c", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fccosf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fccosf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fccosf.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,68 +0,0 @@\n-/* Return cosine of complex float value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-__complex__ float\n-ccosf (__complex__ float x)\n-{\n-  __complex__ float res;\n-\n-  if (!FINITEF_P (__real__ x) || __imag__ x != __imag__ x)\n-    {\n-      if (__real__ x == 0.0 || __imag__ x == 0.0)\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = 0.0;\n-\t}\n-      else if (INFINITE_P (__imag__ x))\n-\t{\n-\t  __real__ res = HUGE_VALF;\n-\t  __imag__ res = NAN;\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      __complex__ float y;\n-\n-      __real__ y = -__imag__ x;\n-      __imag__ y = __real__ x;\n-\n-      res = ccoshf (y);\n-    }\n-\n-  return res;\n-}"}, {"sha": "79fe94e45cb02b7bc9b2b4cb1d711bd5fe9946d9", "filename": "libstdc++-v3/libmath/ccosh.c", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fccosh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fccosh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fccosh.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,93 +0,0 @@\n-/* Complex cosine hyperbole function for double. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ double\n-ccosh (__complex__ double x)\n-{\n-  __complex__ double retval;\n-\n-  if (FINITE_P (__real__ x))\n-    {\n-      /* Real part is finite.  */\n-      if (FINITE_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  double sinh_val = sinh (__real__ x);\n-\t  double cosh_val = cosh (__real__ x);\n-\t  double sinix = sin (__imag__ x);\n-\t  double cosix = cos (__imag__ x);\n-\n-\t  __real__ retval = cosh_val * cosix;\n-\t  __imag__ retval = sinh_val * sinix;\n-\t}\n-      else\n-\t{\n-\t  __imag__ retval = __real__ x == 0.0 ? 0.0 : NAN;\n-\t  __real__ retval = NAN + NAN;\n-\t}\n-    }\n-  else if (INFINITE_P (__real__ x))\n-    {\n-      /* Real part is infinite.  */\n-      if (__imag__ x == 0.0)\n-\t{\n-\t  /* Imaginary part is 0.0.  */\n-\t  __real__ retval = HUGE_VAL;\n-\t  __imag__ retval = __imag__ x * copysign (1.0, __real__ x);\n-\t}\n-      else if (FINITE_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  double sinix = sin (__imag__ x);\n-\t  double cosix = cos (__imag__ x);\n-\n-\t  __real__ retval = copysign (HUGE_VAL, cosix);\n-\t  __imag__ retval = (copysign (HUGE_VAL, sinix)\n-\t\t\t     * copysign (1.0, __real__ x));\n-\t}\n-      else\n-\t{\n-\t  /* The addition raises the invalid exception.  */\n-\t  __real__ retval = HUGE_VAL;\n-\t  __imag__ retval = NAN + NAN;\n-\t}\n-    }\n-  else\n-    {\n-      __real__ retval = NAN;\n-      __imag__ retval = __imag__ x == 0.0 ? __imag__ x : NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "51c5890e2a7ba15aee629124d72525b69b2768fb", "filename": "libstdc++-v3/libmath/ccoshf.c", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fccoshf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fccoshf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fccoshf.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,92 +0,0 @@\n-/* Complex cosine hyperbole function for float. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ float\n-ccoshf (__complex__ float x)\n-{\n-  __complex__ float retval;\n-\n-  if (FINITEF_P (__real__ x))\n-    {\n-      /* Real part is finite.  */\n-      if (FINITEF_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  float sinh_val = sinhf (__real__ x);\n-\t  float cosh_val = coshf (__real__ x);\n-\t  float sinix = sinf (__imag__ x);\n-\t  float cosix = cosf (__imag__ x);\n-\n-\t  __real__ retval = cosh_val * cosix;\n-\t  __imag__ retval = sinh_val * sinix;\n-\t}\n-      else\n-\t{\n-\t  __imag__ retval = __real__ x == 0.0 ? 0.0 : NAN;\n-\t  __real__ retval = NAN;\n-\t}\n-    }\n-  else if (INFINITEF_P (__real__ x))\n-    {\n-      /* Real part is infinite.  */\n-      if (__imag__ x == 0.0)\n-\t{\n-\t  /* Imaginary part is 0.0.  */\n-\t  __real__ retval = HUGE_VALF;\n-\t  __imag__ retval = __imag__ x * copysignf (1.0, __real__ x);\n-\t}\n-      else if (FINITEF_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  float sinix = sinf (__imag__ x);\n-\t  float cosix = cosf (__imag__ x);\n-\n-\t  __real__ retval = copysignf (HUGE_VALF, cosix);\n-\t  __imag__ retval = (copysignf (HUGE_VALF, sinix)\n-\t\t\t     * copysignf (1.0, __real__ x));\n-\t}\n-      else\n-\t{\n-\t  /* The addition raises the invalid exception.  */\n-\t  __real__ retval = HUGE_VALF;\n-\t  __imag__ retval = NAN + NAN;\n-\t}\n-    }\n-  else\n-    {\n-      __real__ retval = NAN;\n-      __imag__ retval = __imag__ x == 0.0 ? __imag__ x : NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "7bb2dacf3b881b645e87ee398ef78f1fbc90c861", "filename": "libstdc++-v3/libmath/ccoshl.c", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fccoshl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fccoshl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fccoshl.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,92 +0,0 @@\n-/* Complex cosine hyperbole function for long double. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ long double\n-ccoshl (__complex__ long double x)\n-{\n-  __complex__ long double retval;\n-\n-  if (FINITEL_P (__real__ x))\n-    {\n-      /* Real part is finite.  */\n-      if (FINITEL_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  long double sinh_val = sinhl (__real__ x);\n-\t  long double cosh_val = coshl (__real__ x);\n-\t  long double sinix = sinl (__imag__ x);\n-\t  long double cosix = cosl (__imag__ x);\n-\n-\t  __real__ retval = cosh_val * cosix;\n-\t  __imag__ retval = sinh_val * sinix;\n-\t}\n-      else\n-\t{\n-\t  __imag__ retval = __real__ x == 0.0 ? 0.0 : NAN;\n-\t  __real__ retval = NAN + NAN;\n-\t}\n-    }\n-  else if (INFINITEL_P (__real__ x))\n-    {\n-      /* Real part is infinite.  */\n-      if (__imag__ x == 0.0)\n-\t{\n-\t  /* Imaginary part is 0.0.  */\n-\t  __real__ retval = HUGE_VALL;\n-\t  __imag__ retval = __imag__ x * copysignl (1.0, __real__ x);\n-\t}\n-      else if (FINITEL_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  long double sinix = sinl (__imag__ x);\n-\t  long double cosix = cosl (__imag__ x);\n-\n-\t  __real__ retval = copysignl (HUGE_VALL, cosix);\n-\t  __imag__ retval = (copysignl (HUGE_VALL, sinix)\n-\t\t\t     * copysignl (1.0, __real__ x));\n-\t}\n-      else\n-\t{\n-\t  /* The addition raises the invalid exception.  */\n-\t  __real__ retval = HUGE_VALL;\n-\t  __imag__ retval = NAN + NAN;\n-\t}\n-    }\n-  else\n-    {\n-      __real__ retval = NAN;\n-      __imag__ retval = __imag__ x == 0.0 ? __imag__ x : NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "6531476488c4d9740545b907d9fae6ce1cd4bf12", "filename": "libstdc++-v3/libmath/ccosl.c", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fccosl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fccosl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fccosl.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,69 +0,0 @@\n-/* Return cosine of complex long double value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ long double\n-ccosl (__complex__ long double x)\n-{\n-  __complex__ long double res;\n-\n-  if (!FINITEL_P (__real__ x) || __imag__ x != __imag__ x)\n-    {\n-      if (__real__ x == 0.0 || __imag__ x == 0.0)\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = 0.0;\n-\t}\n-      else if (INFINITEL_P (__imag__ x))\n-\t{\n-\t  __real__ res = HUGE_VALL;\n-\t  __imag__ res = NAN;\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      __complex__ long double y;\n-\n-      __real__ y = -__imag__ x;\n-      __imag__ y = __real__ x;\n-\n-      res = ccoshl (y);\n-    }\n-\n-  return res;\n-}"}, {"sha": "210220bc58c709660a2436905df49d5afbe7b473", "filename": "libstdc++-v3/libmath/cexp.c", "status": "removed", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fcexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fcexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcexp.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,111 +0,0 @@\n-/* Return value of complex exponential function for double complex value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ double\n-cexp (__complex__ double x)\n-{\n-  __complex__ double retval;\n-\n-  if (FINITE_P (__real__ x))\n-    {\n-      /* Real part is finite.  */\n-      if (FINITE_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  double exp_val = exp (__real__ x);\n-\t  double sinix = sin (__imag__ x);\n-\t  double cosix = cos (__imag__ x);\n-\n-\t  if (FINITE_P (exp_val))\n-\t    {\n-\t      __real__ retval = exp_val * cosix;\n-\t      __imag__ retval = exp_val * sinix;\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ retval = copysign (exp_val, cosix);\n-\t      __imag__ retval = copysign (exp_val, sinix);\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  /* If the imaginary part is +-inf or NaN and the real part\n-\t     is not +-inf the result is NaN + iNaN.  */\n-\t  __real__ retval = NAN;\n-\t  __imag__ retval = NAN;\n-\t}\n-    }\n-  else if (INFINITE_P (__real__ x))\n-    {\n-      /* Real part is infinite.  */\n-      if (FINITE_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  double value = signbit (__real__ x) ? 0.0 : HUGE_VAL;\n-\n-\t  if (__imag__ x == 0.0)\n-\t    {\n-\t      /* Imaginary part is 0.0.  */\n-\t      __real__ retval = value;\n-\t      __imag__ retval = __imag__ x;\n-\t    }\n-\t  else\n-\t    {\n-\t      double sinix = sin (__imag__ x);\n-\t      double cosix = cos (__imag__ x);\n-\n-\t      __real__ retval = copysign (value, cosix);\n-\t      __imag__ retval = copysign (value, sinix);\n-\t    }\n-\t}\n-      else if (signbit (__real__ x) == 0)\n-\t{\n-\t  __real__ retval = HUGE_VAL;\n-\t  __imag__ retval = NAN;\n-\t}\n-      else\n-\t{\n-\t  __real__ retval = 0.0;\n-\t  __imag__ retval = copysign (0.0, __imag__ x);\n-\t}\n-    }\n-  else\n-    {\n-      /* If the real part is NaN the result is NaN + iNaN.  */\n-      __real__ retval = NAN;\n-      __imag__ retval = NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "0888cb70fa4f3e16273d6f53a495819e56101961", "filename": "libstdc++-v3/libmath/cexpf.c", "status": "removed", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fcexpf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fcexpf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcexpf.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,110 +0,0 @@\n-/* Return value of complex exponential function for float complex value. */\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ float\n-cexpf (__complex__ float x)\n-{\n-  __complex__ float retval;\n-\n-  if (FINITEF_P (__real__ x))\n-    {\n-      /* Real part is finite.  */\n-      if (FINITEF_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  float exp_val = expf (__real__ x);\n-\t  float sinix = sinf (__imag__ x);\n-\t  float cosix = cosf (__imag__ x);\n-\n-\t  if (FINITEF_P (exp_val))\n-\t    {\n-\t      __real__ retval = exp_val * cosix;\n-\t      __imag__ retval = exp_val * sinix;\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ retval = copysignf (exp_val, cosix);\n-\t      __imag__ retval = copysignf (exp_val, sinix);\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  /* If the imaginary part is +-inf or NaN and the real part\n-\t     is not +-inf the result is NaN + iNaN.  */\n-\t  __real__ retval = NAN;\n-\t  __imag__ retval = NAN;\n-\t}\n-    }\n-  else if (INFINITEF_P (__real__ x))\n-    {\n-      /* Real part is infinite.  */\n-      if (FINITEF_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  float value = signbit (__real__ x) ? 0.0 : HUGE_VALF;\n-\n-\t  if (__imag__ x == 0.0)\n-\t    {\n-\t      /* Imaginary part is 0.0.  */\n-\t      __real__ retval = value;\n-\t      __imag__ retval = __imag__ x;\n-\t    }\n-\t  else\n-\t    {\n-\t      float sinix = sinf (__imag__ x);\n-\t      float cosix = cosf (__imag__ x);\n-\n-\t      __real__ retval = copysignf (value, cosix);\n-\t      __imag__ retval = copysignf (value, sinix);\n-\t    }\n-\t}\n-      else if (signbit (__real__ x) == 0)\n-\t{\n-\t  __real__ retval = HUGE_VALF;\n-\t  __imag__ retval = NAN;\n-\t}\n-      else\n-\t{\n-\t  __real__ retval = 0.0;\n-\t  __imag__ retval = copysignf (0.0, __imag__ x);\n-\t}\n-    }\n-  else\n-    {\n-      /* If the real part is NaN the result is NaN + iNaN.  */\n-      __real__ retval = NAN;\n-      __imag__ retval = NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "83cb4db5e584acaaed1201251a9fb4898396be11", "filename": "libstdc++-v3/libmath/cexpl.c", "status": "removed", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fcexpl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fcexpl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcexpl.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,110 +0,0 @@\n-/* Return value of complex exp function for long double complex value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ long double\n-cexpl (__complex__ long double x)\n-{\n-  __complex__ long double retval;\n-\n-  if (FINITEL_P (__real__ x))\n-    {\n-      /* Real part is finite.  */\n-      if (FINITEL_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  long double exp_val = expl (__real__ x);\n-\t  long double sinix = sinl (__imag__ x);\n-\t  long double cosix = cosl (__imag__ x);\n-\n-\t  if (FINITEL_P (exp_val))\n-\t    {\n-\t      __real__ retval = exp_val * cosix;\n-\t      __imag__ retval = exp_val * sinix;\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ retval = copysignl (exp_val, cosix);\n-\t      __imag__ retval = copysignl (exp_val, sinix);\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  /* If the imaginary part is +-inf or NaN and the real part\n-\t     is not +-inf the result is NaN + iNaN.  */\n-\t  __real__ retval = NAN;\n-\t  __imag__ retval = NAN;\n-\t}\n-    }\n-  else if (INFINITEL_P (__real__ x))\n-    {\n-      /* Real part is infinite.  */\n-      if (FINITEL_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  long double value = signbit (__real__ x) ? 0.0 : HUGE_VALL;\n-\n-\t  if (__imag__ x == 0.0)\n-\t    {\n-\t      /* Imaginary part is 0.0.  */\n-\t      __real__ retval = value;\n-\t      __imag__ retval = __imag__ x;\n-\t    }\n-\t  else\n-\t    {\n-\t      long double sinix = sinl (__imag__ x);\n-\t      long double cosix = cosl (__imag__ x);\n-\n-\t      __real__ retval = copysignl (value, cosix);\n-\t      __imag__ retval = copysignl (value, sinix);\n-\t    }\n-\t}\n-      else if (signbit (__real__ x) == 0)\n-\t{\n-\t  __real__ retval = HUGE_VALL;\n-\t  __imag__ retval = NAN;\n-\t}\n-      else\n-\t{\n-\t  __real__ retval = 0.0;\n-\t  __imag__ retval = copysignl (0.0, __imag__ x);\n-\t}\n-    }\n-  else\n-    {\n-      /* If the real part is NaN the result is NaN + iNaN.  */\n-      __real__ retval = NAN;\n-      __imag__ retval = NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "e158a9900e38dc5cb9822423816c4bcbb39b227a", "filename": "libstdc++-v3/libmath/clog10.c", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fclog10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fclog10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fclog10.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,65 +0,0 @@\n-/* Compute complex base 10 logarithm. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ double\n-clog10 (__complex__ double x)\n-{\n-  __complex__ double result;\n-\n-  if (x == 0.0)\n-    {\n-      /* Real and imaginary part are 0.0.  */\n-      __imag__ result = signbit (__real__ x) ? M_PI : 0.0;\n-      __imag__ result = copysign (__imag__ result, __imag__ x);\n-      /* Yes, the following line raises an exception.  */\n-      __real__ result = -1.0 / fabs (__real__ x);\n-    }\n-  else if (__real__ x != __real__ x && __imag__ x != __imag__ x)\n-    {\n-      /* Neither real nor imaginary part is NaN.  */\n-      __real__ result = log10 (hypot (__real__ x, __imag__ x));\n-      __imag__ result = atan2 (__imag__ x, __real__ x);\n-    }\n-  else\n-    {\n-      __imag__ result = NAN;\n-      if (INFINITE_P (__real__ x) || INFINITE_P (__imag__ x))\n-\t/* Real or imaginary part is infinite.  */\n-\t__real__ result = HUGE_VAL;\n-      else\n-\t__real__ result = NAN;\n-    }\n-\n-  return result;\n-}"}, {"sha": "b241cec994a26b97b2023ad64a52b6a23010e9de", "filename": "libstdc++-v3/libmath/clog10f.c", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fclog10f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fclog10f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fclog10f.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,64 +0,0 @@\n-/* Compute complex base 10 logarithm. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ float\n-clog10f (__complex__ float x)\n-{\n-  __complex__ float result;\n-\n-  if (x == 0.0)\n-    {\n-      /* Real and imaginary part are 0.0.  */\n-      __imag__ result = signbit (__real__ x) ? M_PI : 0.0;\n-      __imag__ result = copysignf (__imag__ result, __imag__ x);\n-      /* Yes, the following line raises an exception.  */\n-      __real__ result = -1.0 / fabsf (__real__ x);\n-    }\n-  else if (__real__ x == __real__ x && __imag__ x == __imag__ x)\n-    {\n-      /* Neither real nor imaginary part is NaN.  */\n-      __real__ result = log10f (hypotf (__real__ x, __imag__ x));\n-      __imag__ result = atan2f (__imag__ x, __real__ x);\n-    }\n-  else\n-    {\n-      __imag__ result = NAN;\n-      if (INFINITEF_P (__real__ x) || INFINITEF_P (__imag__ x))\n-\t/* Real or imaginary part is infinite.  */\n-\t__real__ result = HUGE_VALF;\n-      else\n-\t__real__ result = NAN;\n-    }\n-\n-  return result;\n-}"}, {"sha": "9cec8f88ffe8997d806a426bd131fab8a4b15f9e", "filename": "libstdc++-v3/libmath/clog10l.c", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fclog10l.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fclog10l.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fclog10l.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,74 +0,0 @@\n-/* Compute complex natural logarithm. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#ifndef _GNU_SOURCE\n-#define _GNU_SOURCE\n-#endif\n-#include <math.h>\n-#include \"mathconf.h\"\n-#ifndef M_PIl\n-#define M_PIl M_PI\n-#endif\n-\n-/* Thanks to SGI we have to trick here.  At least Irix 6.2 provides hypotl,\n-   but it has a wrong prototype.  Grrr.  */\n-extern long double local_hypotl (long double, long double) asm (\"hypotl\");\n-\n-\n-__complex__ long double\n-clog10l (__complex__ long double x)\n-{\n-  __complex__ long double result;\n-\n-  if (x == 0.0)\n-    {\n-      /* Real and imaginary part are 0.0.  */\n-      __imag__ result = signbit (__real__ x) ? M_PIl : 0.0;\n-      __imag__ result = copysignl (__imag__ result, __imag__ x);\n-      /* Yes, the following line raises an exception.  */\n-      __real__ result = -1.0 / fabsl (__real__ x);\n-    }\n-  else if (__real__ x == __real__ x && __imag__ x == __imag__ x)\n-    {\n-      /* Neither real nor imaginary part is NaN.  */\n-      __real__ result = log10l (local_hypotl (__real__ x, __imag__ x));\n-      __imag__ result = atan2l (__imag__ x, __real__ x);\n-    }\n-  else\n-    {\n-      __imag__ result = NAN;\n-      if (INFINITEL_P (__real__ x) || INFINITEL_P (__imag__ x))\n-\t/* Real or imaginary part is infinite.  */\n-\t__real__ result = HUGE_VALL;\n-      else\n-\t__real__ result = NAN;\n-    }\n-\n-  return result;\n-}"}, {"sha": "791532419dbffbe01e979a1a2c5567762e5a50af", "filename": "libstdc++-v3/libmath/complex-stub.h", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba2a514ef78bfba79a4e011f19a25a14ba4819e/libstdc%2B%2B-v3%2Flibmath%2Fcomplex-stub.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba2a514ef78bfba79a4e011f19a25a14ba4819e/libstdc%2B%2B-v3%2Flibmath%2Fcomplex-stub.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcomplex-stub.h?ref=0ba2a514ef78bfba79a4e011f19a25a14ba4819e", "patch": "@@ -34,45 +34,9 @@\n #ifndef _COMPLEX_H\n #define _COMPLEX_H\t1\n \n-__complex__ double ccos (__complex__ double x);\n-__complex__ float ccosf (__complex__ float x);\n-__complex__ long double ccosl (__complex__ long double x);\n-\n-__complex__ double ccosh (__complex__ double x);\n-__complex__ float ccoshf (__complex__ float x);\n-__complex__ long double ccoshl (__complex__ long double x);\n-\n-__complex__ double cexp (__complex__ double x);\n-__complex__ float cexpf (__complex__ float x);\n-__complex__ long double cexpl (__complex__ long double x);\n-\n-__complex__ double clog10 (__complex__ double x);\n-__complex__ float clog10f (__complex__ float x);\n-__complex__ long double clog10l (__complex__ long double x);\n-\n-__complex__ double csin (__complex__ double x);\n-__complex__ float csinf (__complex__ float x);\n-__complex__ long double csinl (__complex__ long double x);\n-\n-__complex__ double csinh (__complex__ double x);\n-__complex__ float csinhf (__complex__ float x);\n-__complex__ long double csinhl (__complex__ long double x);\n-\n __complex__ double csqrt (__complex__ double x);\n __complex__ float csqrtf (__complex__ float x);\n __complex__ long double csqrtl (__complex__ long double x);\n \n-__complex__ double ctan (__complex__ double x);\n-__complex__ float ctanf (__complex__ float x);\n-__complex__ long double ctanl (__complex__ long double x);\n-\n-__complex__ double ctanh (__complex__ double x);\n-__complex__ float ctanhf (__complex__ float x);\n-__complex__ long double ctanhl (__complex__ long double x);\n-\n-double carg (__complex__ double x);\n-float cargf (__complex__ float x);\n-long double cargl (__complex__ long double x);\n-\n #endif\n "}, {"sha": "bde60196e1b182857882add9bb3a3d45d4b279c8", "filename": "libstdc++-v3/libmath/csin.c", "status": "removed", "additions": 0, "deletions": 115, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fcsin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fcsin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcsin.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,115 +0,0 @@\n-/* Complex sine function for double. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ double\n-csin (__complex__ double x)\n-{\n-  __complex__ double retval;\n-  int negate = signbit (__real__ x);\n-\n-  __real__ x = fabs (__real__ x);\n-\n-  if (FINITE_P (__imag__ x))\n-    {\n-      /* Imaginary part is finite.  */\n-      if (FINITE_P (__real__ x))\n-\t{\n-\t  /* Real part is finite.  */\n-\t  double sinh_val = sinh (__imag__ x);\n-\t  double cosh_val = cosh (__imag__ x);\n-\t  double sinix = sin (__real__ x);\n-\t  double cosix = cos (__real__ x);\n-\n-\t  __real__ retval = cosh_val * sinix;\n-\t  __imag__ retval = sinh_val * cosix;\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t}\n-      else\n-\t{\n-\t  if (__imag__ x == 0.0)\n-\t    {\n-\t      /* Imaginary part is 0.0.  */\n-\t      __real__ retval = NAN;\n-\t      __imag__ retval = __imag__ x;\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ retval = NAN;\n-\t      __imag__ retval = NAN;\n-\t    }\n-\t}\n-    }\n-  else if (INFINITE_P (__imag__ x))\n-    {\n-      /* Imaginary part is infinite.  */\n-      if (__real__ x == 0.0)\n-\t{\n-\t  /* Real part is 0.0.  */\n-\t  __real__ retval = copysign (0.0, negate ? -1.0 : 1.0);\n-\t  __imag__ retval = __imag__ x;\n-\t}\n-      else if (FINITE_P (__real__ x))\n-\t{\n-\t  /* Real part is finite.  */\n-\t  double sinix = sin (__real__ x);\n-\t  double cosix = cos (__real__ x);\n-\n-\t  __real__ retval = copysign (HUGE_VAL, sinix);\n-\t  __imag__ retval = copysign (HUGE_VAL, cosix);\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t  if (signbit (__imag__ x))\n-\t    __imag__ retval = -__imag__ retval;\n-\t}\n-      else\n-\t{\n-\t  /* The addition raises the invalid exception.  */\n-\t  __real__ retval = NAN;\n-\t  __imag__ retval = HUGE_VAL;\n-\t}\n-    }\n-  else\n-    {\n-      if (__real__ x == 0.0)\n-\t__real__ retval = copysign (0.0, negate ? -1.0 : 1.0);\n-      else\n-\t__real__ retval = NAN;\n-      __imag__ retval = NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "8c66865380a4a8ee026e42b6a2b1a15ab69fdb26", "filename": "libstdc++-v3/libmath/csinf.c", "status": "removed", "additions": 0, "deletions": 115, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fcsinf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fcsinf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcsinf.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,115 +0,0 @@\n-/* Complex sine function for float. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ float\n-csinf (__complex__ float x)\n-{\n-  __complex__ float retval;\n-  int negate = signbit (__real__ x);\n-\n-  __real__ x = fabsf (__real__ x);\n-\n-  if (FINITEF_P (__imag__ x))\n-    {\n-      /* Imaginary part is finite.  */\n-      if (FINITEF_P (__real__ x))\n-\t{\n-\t  /* Real part is finite.  */\n-\t  float sinh_val = sinhf (__imag__ x);\n-\t  float cosh_val = coshf (__imag__ x);\n-\t  float sinix = sinf (__real__ x);\n-\t  float cosix = cosf (__real__ x);\n-\n-\t  __real__ retval = cosh_val * sinix;\n-\t  __imag__ retval = sinh_val * cosix;\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t}\n-      else\n-\t{\n-\t  if (__imag__ x == 0.0)\n-\t    {\n-\t      /* Imaginary part is 0.0.  */\n-\t      __real__ retval = NAN;\n-\t      __imag__ retval = __imag__ x;\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ retval = NAN;\n-\t      __imag__ retval = NAN;\n-\t    }\n-\t}\n-    }\n-  else if (INFINITEF_P (__imag__ x))\n-    {\n-      /* Imaginary part is infinite.  */\n-      if (__real__ x == 0.0)\n-\t{\n-\t  /* Real part is 0.0.  */\n-\t  __real__ retval = copysignf (0.0, negate ? -1.0 : 1.0);\n-\t  __imag__ retval = __imag__ x;\n-\t}\n-      else if (FINITEF_P (__real__ x))\n-\t{\n-\t  /* Real part is finite.  */\n-\t  float sinix = sinf (__real__ x);\n-\t  float cosix = cosf (__real__ x);\n-\n-\t  __real__ retval = copysignf (HUGE_VALF, sinix);\n-\t  __imag__ retval = copysignf (HUGE_VALF, cosix);\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t  if (signbit (__imag__ x))\n-\t    __imag__ retval = -__imag__ retval;\n-\t}\n-      else\n-\t{\n-\t  /* The addition raises the invalid exception.  */\n-\t  __real__ retval = NAN;\n-\t  __imag__ retval = HUGE_VALF;\n-\t}\n-    }\n-  else\n-    {\n-      if (__real__ x == 0.0)\n-\t__real__ retval = copysignf (0.0, negate ? -1.0 : 1.0);\n-      else\n-\t__real__ retval = NAN;\n-      __imag__ retval = NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "9da924b1c66ba0a95e1c0400f2de92d64cc4daa7", "filename": "libstdc++-v3/libmath/csinh.c", "status": "removed", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fcsinh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fcsinh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcsinh.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,110 +0,0 @@\n-/* Complex sine hyperbole function for double. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ double\n-csinh (__complex__ double x)\n-{\n-  __complex__ double retval;\n-  int negate = signbit (__real__ x);\n-\n-  __real__ x = fabs (__real__ x);\n-\n-  if (FINITE_P (__real__ x))\n-    {\n-      /* Real part is finite.  */\n-      if (FINITE_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  double sinh_val = sinh (__real__ x);\n-\t  double cosh_val = cosh (__real__ x);\n-\t  double sinix = sin (__imag__ x);\n-\t  double cosix = cos (__imag__ x);\n-\n-\t  __real__ retval = sinh_val * cosix;\n-\t  __imag__ retval = cosh_val * sinix;\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t}\n-      else\n-\t{\n-\t  if (__real__ x == 0.0)\n-\t    {\n-\t      /* Real part is 0.0.  */\n-\t      __real__ retval = copysign (0.0, negate ? -1.0 : 1.0);\n-\t      __imag__ retval = NAN + NAN;\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ retval = NAN;\n-\t      __imag__ retval = NAN;\n-\t    }\n-\t}\n-    }\n-  else if (INFINITE_P (__real__ x))\n-    {\n-      /* Real part is infinite.  */\n-      if (__imag__ x == 0.0)\n-\t{\n-\t  /* Imaginary part is 0.0.  */\n-\t  __real__ retval = negate ? -HUGE_VAL : HUGE_VAL;\n-\t  __imag__ retval = __imag__ x;\n-\t}\n-      else if (FINITE_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  double sinix = sin (__imag__ x);\n-\t  double cosix = cos (__imag__ x);\n-\n-\t  __real__ retval = copysign (HUGE_VAL, cosix);\n-\t  __imag__ retval = copysign (HUGE_VAL, sinix);\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t}\n-      else\n-\t{\n-\t  /* The addition raises the invalid exception.  */\n-\t  __real__ retval = HUGE_VAL;\n-\t  __imag__ retval = NAN + NAN;\n-\t}\n-    }\n-  else\n-    {\n-      __real__ retval = NAN;\n-      __imag__ retval = __imag__ x == 0.0 ? __imag__ x : NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "3aaf49aa208393e0b03e3d7b250ce34b5ab8fa88", "filename": "libstdc++-v3/libmath/csinhf.c", "status": "removed", "additions": 0, "deletions": 89, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fcsinhf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fcsinhf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcsinhf.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,89 +0,0 @@\n-/* Complex sine hyperbole function for float.\n-   Copyright (C) 1997,1998 Free Software Foundation, Inc.\n-\n-   This file is part of the libstdc++ version 3 distribution.\n-\n-   This software is a copyrighted work licensed under the terms of the\n-   Cygnus libstdc++ license. Please consult the file LICENSE.STD for\n-   details.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ float\n-csinhf (__complex__ float x)\n-{\n-  __complex__ float retval;\n-  int negate = signbit (__real__ x);\n-\n-  __real__ x = fabsf (__real__ x);\n-\n-  if (FINITEF_P (__real__ x))\n-    {\n-      /* Real part is finite.  */\n-      if (FINITEF_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  float sinh_val = sinhf (__real__ x);\n-\t  float cosh_val = coshf (__real__ x);\n-\t  float sinix = sin (__imag__ x);\n-\t  float cosix = cos (__imag__ x);\n-\n-\t  __real__ retval = sinh_val * cosix;\n-\t  __imag__ retval = cosh_val * sinix;\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t}\n-      else\n-\t{\n-\t  if (__real__ x == 0.0)\n-\t    {\n-\t      /* Real part is 0.0.  */\n-\t      __real__ retval = copysignf (0.0, negate ? -1.0 : 1.0);\n-\t      __imag__ retval = NAN + NAN;\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ retval = NAN;\n-\t      __imag__ retval = NAN;\n-\t    }\n-\t}\n-    }\n-  else if (INFINITEF_P (__real__ x))\n-    {\n-      /* Real part is infinite.  */\n-      if (__imag__ x == 0.0)\n-\t{\n-\t  /* Imaginary part is 0.0.  */\n-\t  __real__ retval = negate ? -HUGE_VALF : HUGE_VALF;\n-\t  __imag__ retval = __imag__ x;\n-\t}\n-      else if (FINITEF_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  float sinix = sinf (__imag__ x);\n-\t  float cosix = cosf (__imag__ x);\n-\n-\t  __real__ retval = copysignf (HUGE_VALF, cosix);\n-\t  __imag__ retval = copysignf (HUGE_VALF, sinix);\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t}\n-      else\n-\t{\n-\t  /* The addition raises the invalid exception.  */\n-\t  __real__ retval = HUGE_VALF;\n-\t  __imag__ retval = NAN + NAN;\n-\t}\n-    }\n-  else\n-    {\n-      __real__ retval = NAN;\n-      __imag__ retval = __imag__ x == 0.0 ? __imag__ x : NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "efd45a24323dfe47d110c7a0abdc42a5ec1faacc", "filename": "libstdc++-v3/libmath/csinhl.c", "status": "removed", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fcsinhl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fcsinhl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcsinhl.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,110 +0,0 @@\n-/* Complex sine hyperbole function for long double. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ long double\n-csinhl (__complex__ long double x)\n-{\n-  __complex__ long double retval;\n-  int negate = signbit (__real__ x);\n-\n-  __real__ x = fabsl (__real__ x);\n-\n-  if (FINITEL_P (__real__ x))\n-    {\n-      /* Real part is finite.  */\n-      if (FINITEL_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  long double sinh_val = sinhl (__real__ x);\n-\t  long double cosh_val = coshl (__real__ x);\n-\t  long double sinix = sinl (__imag__ x);\n-\t  long double cosix = cosl (__imag__ x);\n-\n-\t  __real__ retval = sinh_val * cosix;\n-\t  __imag__ retval = cosh_val * sinix;\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t}\n-      else\n-\t{\n-\t  if (__real__ x == 0.0)\n-\t    {\n-\t      /* Real part is 0.0.  */\n-\t      __real__ retval = copysignl (0.0, negate ? -1.0 : 1.0);\n-\t      __imag__ retval = NAN + NAN;\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ retval = NAN;\n-\t      __imag__ retval = NAN;\n-\t    }\n-\t}\n-    }\n-  else if (INFINITEL_P (__real__ x))\n-    {\n-      /* Real part is infinite.  */\n-      if (__imag__ x == 0.0)\n-\t{\n-\t  /* Imaginary part is 0.0.  */\n-\t  __real__ retval = negate ? -HUGE_VALL : HUGE_VALL;\n-\t  __imag__ retval = __imag__ x;\n-\t}\n-      else if (FINITEL_P (__imag__ x))\n-\t{\n-\t  /* Imaginary part is finite.  */\n-\t  long double sinix = sinl (__imag__ x);\n-\t  long double cosix = cosl (__imag__ x);\n-\n-\t  __real__ retval = copysignl (HUGE_VALL, cosix);\n-\t  __imag__ retval = copysignl (HUGE_VALL, sinix);\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t}\n-      else\n-\t{\n-\t  /* The addition raises the invalid exception.  */\n-\t  __real__ retval = HUGE_VALL;\n-\t  __imag__ retval = NAN + NAN;\n-\t}\n-    }\n-  else\n-    {\n-      __real__ retval = NAN;\n-      __imag__ retval = __imag__ x == 0.0 ? __imag__ x : NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "423b459d667aae76f1e820a04a85b0e563848fe4", "filename": "libstdc++-v3/libmath/csinl.c", "status": "removed", "additions": 0, "deletions": 115, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fcsinl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fcsinl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcsinl.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,115 +0,0 @@\n-/* Complex sine function for long double. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ long double\n-csinl (__complex__ long double x)\n-{\n-  __complex__ long double retval;\n-  int negate = signbit (__real__ x);\n-\n-  __real__ x = fabsl (__real__ x);\n-\n-  if (FINITEL_P (__imag__ x))\n-    {\n-      /* Imaginary part is finite.  */\n-      if (FINITEL_P (__real__ x))\n-\t{\n-\t  /* Real part is finite.  */\n-\t  long double sinh_val = sinhl (__imag__ x);\n-\t  long double cosh_val = coshl (__imag__ x);\n-\t  long double sinix = sinl (__real__ x);\n-\t  long double cosix = cosl (__real__ x);\n-\n-\t  __real__ retval = cosh_val * sinix;\n-\t  __imag__ retval = sinh_val * cosix;\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t}\n-      else\n-\t{\n-\t  if (__imag__ x == 0.0)\n-\t    {\n-\t      /* Imaginary part is 0.0.  */\n-\t      __real__ retval = NAN;\n-\t      __imag__ retval = __imag__ x;\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ retval = NAN;\n-\t      __imag__ retval = NAN;\n-\t    }\n-\t}\n-    }\n-  else if (INFINITEL_P (__imag__ x))\n-    {\n-      /* Imaginary part is infinite.  */\n-      if (__real__ x == 0.0)\n-\t{\n-\t  /* Real part is 0.0.  */\n-\t  __real__ retval = copysignl (0.0, negate ? -1.0 : 1.0);\n-\t  __imag__ retval = __imag__ x;\n-\t}\n-      else if (FINITEL_P (__real__ x))\n-\t{\n-\t  /* Real part is finite.  */\n-\t  long double sinix = sinl (__real__ x);\n-\t  long double cosix = cosl (__real__ x);\n-\n-\t  __real__ retval = copysignl (HUGE_VALL, sinix);\n-\t  __imag__ retval = copysignl (HUGE_VALL, cosix);\n-\n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n-\t  if (signbit (__imag__ x))\n-\t    __imag__ retval = -__imag__ retval;\n-\t}\n-      else\n-\t{\n-\t  /* The addition raises the invalid exception.  */\n-\t  __real__ retval = NAN;\n-\t  __imag__ retval = HUGE_VALL;\n-\t}\n-    }\n-  else\n-    {\n-      if (__real__ x == 0.0)\n-\t__real__ retval = copysignl (0.0, negate ? -1.0 : 1.0);\n-      else\n-\t__real__ retval = NAN;\n-      __imag__ retval = NAN;\n-    }\n-\n-  return retval;\n-}"}, {"sha": "2a35c1822c3c4bea403fa45305cd10668955ed08", "filename": "libstdc++-v3/libmath/ctan.c", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fctan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fctan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fctan.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,70 +0,0 @@\n-/* Complex tangent function for double. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ double\n-ctan (__complex__ double x)\n-{\n-  __complex__ double res;\n-\n-  if (!FINITE_P (__real__ x) || !FINITE_P (__imag__ x))\n-    {\n-      if (INFINITE_P (__imag__ x))\n-\t{\n-\t  __real__ res = copysign (0.0, __real__ x);\n-\t  __imag__ res = copysign (1.0, __imag__ x);\n-\t}\n-      else if (__real__ x == 0.0)\n-\t{\n-\t  res = x;\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      double sin2rx = sin (2.0 * __real__ x);\n-      double cos2rx = cos (2.0 * __real__ x);\n-      double den;\n-\n-      den = cos2rx + cosh (2.0 * __imag__ x);\n-\n-      __real__ res = sin2rx / den;\n-      __imag__ res = sinh (2.0 * __imag__ x) / den;\n-    }\n-\n-  return res;\n-}"}, {"sha": "ebd8cfa3eb0b37e85abb5443ecc4e38db3477fb3", "filename": "libstdc++-v3/libmath/ctanf.c", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fctanf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fctanf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fctanf.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,70 +0,0 @@\n-/* Complex tangent function for float. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ float\n-ctanf (__complex__ float x)\n-{\n-  __complex__ float res;\n-\n-  if (!FINITEF_P (__real__ x) || !FINITEF_P (__imag__ x))\n-    {\n-      if (INFINITEF_P (__imag__ x))\n-\t{\n-\t  __real__ res = copysignf (0.0, __real__ x);\n-\t  __imag__ res = copysignf (1.0, __imag__ x);\n-\t}\n-      else if (__real__ x == 0.0)\n-\t{\n-\t  res = x;\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      float sin2rx = sinf (2.0f * __real__ x);\n-      float cos2rx = cosf (2.0f * __real__ x);\n-      float den;\n-\n-      den = cos2rx + coshf (2.0 * __imag__ x);\n-\n-      __real__ res = sin2rx / den;\n-      __imag__ res = sinhf (2.0 * __imag__ x) / den;\n-    }\n-\n-  return res;\n-}"}, {"sha": "5db5cd65a8a8e7e58b7f2fc3441a3bf6224002a8", "filename": "libstdc++-v3/libmath/ctanh.c", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fctanh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fctanh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fctanh.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,70 +0,0 @@\n-/* Complex hyperbole tangent for double. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ double\n-ctanh (__complex__ double x)\n-{\n-  __complex__ double res;\n-\n-  if (!FINITE_P (__real__ x) || !FINITE_P (__imag__ x))\n-    {\n-      if (INFINITE_P (__real__ x))\n-\t{\n-\t  __real__ res = copysign (1.0, __real__ x);\n-\t  __imag__ res = copysign (0.0, __imag__ x);\n-\t}\n-      else if (__imag__ x == 0.0)\n-\t{\n-\t  res = x;\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      double sin2ix = sin (2.0 * __imag__ x);\n-      double cos2ix = cos (2.0 * __imag__ x);\n-      double den;\n-\n-      den = (cosh (2.0 * __real__ x) + cos2ix);\n-\n-      __real__ res = sinh (2.0 * __real__ x) / den;\n-      __imag__ res = sin2ix / den;\n-    }\n-\n-  return res;\n-}"}, {"sha": "b5f1ccea94ab9a129706c0f2c43d41f9105eb616", "filename": "libstdc++-v3/libmath/ctanhf.c", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fctanhf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fctanhf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fctanhf.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,70 +0,0 @@\n-/* Complex hyperbole tangent for float. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ float\n-ctanhf (__complex__ float x)\n-{\n-  __complex__ float res;\n-\n-  if (!FINITEF_P (__real__ x) || !FINITEF_P (__imag__ x))\n-    {\n-      if (INFINITEF_P (__real__ x))\n-\t{\n-\t  __real__ res = copysignf (1.0, __real__ x);\n-\t  __imag__ res = copysignf (0.0, __imag__ x);\n-\t}\n-      else if (__imag__ x == 0.0)\n-\t{\n-\t  res = x;\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      float sin2ix = sinf (2.0f * __imag__ x);\n-      float cos2ix = cosf (2.0f * __imag__ x);\n-      float den;\n-\n-      den = (coshf (2.0 * __real__ x) + cos2ix);\n-\n-      __real__ res = sinhf (2.0 * __real__ x) / den;\n-      __imag__ res = sin2ix / den;\n-    }\n-\n-  return res;\n-}"}, {"sha": "3fdf1fcb6c818d15bbd5f3225ca961bd89213732", "filename": "libstdc++-v3/libmath/ctanhl.c", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fctanhl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fctanhl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fctanhl.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,70 +0,0 @@\n-/* Complex hyperbole tangent for long double. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ long double\n-ctanhl (__complex__ long double x)\n-{\n-  __complex__ long double res;\n-\n-  if (!FINITEL_P (__real__ x) || !FINITEL_P (__imag__ x))\n-    {\n-      if (INFINITEL_P (__real__ x))\n-\t{\n-\t  __real__ res = copysignl (1.0, __real__ x);\n-\t  __imag__ res = copysignl (0.0, __imag__ x);\n-\t}\n-      else if (__imag__ x == 0.0)\n-\t{\n-\t  res = x;\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      long double sin2ix = sinl (2.0 * __imag__ x);\n-      long double cos2ix = cosl (2.0 * __imag__ x);\n-      long double den;\n-\n-      den = (coshl (2.0 * __real__ x) + cos2ix);\n-\n-      __real__ res = sinhl (2.0 * __real__ x) / den;\n-      __imag__ res = sin2ix / den;\n-    }\n-\n-  return res;\n-}"}, {"sha": "0af4cecf6e238d646801203fa77162e6279c010f", "filename": "libstdc++-v3/libmath/ctanl.c", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fctanl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecddf6a806ae5db3bcb526617f6eae5c07a5bff4/libstdc%2B%2B-v3%2Flibmath%2Fctanl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fctanl.c?ref=ecddf6a806ae5db3bcb526617f6eae5c07a5bff4", "patch": "@@ -1,69 +0,0 @@\n-/* Complex tangent function for long double. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ long double\n-ctanl (__complex__ long double x)\n-{\n-  __complex__ long double res;\n-\n-  if (!FINITEL_P (__real__ x) || !FINITEL_P (__imag__ x))\n-    {\n-      if (INFINITEL_P (__imag__ x))\n-\t{\n-\t  __real__ res = copysignl (0.0, __real__ x);\n-\t  __imag__ res = copysignl (1.0, __imag__ x);\n-\t}\n-      else if (__real__ x == 0.0)\n-\t{\n-\t  res = x;\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      long double sin2rx = sinl (2.0 * __real__ x);\n-      long double cos2rx = cosl (2.0 * __real__ x);\n-      long double den;\n-\n-      den = cos2rx + coshl (2.0 * __imag__ x);\n-\n-      __real__ res = sin2rx / den;\n-      __imag__ res = sinhl (2.0 * __imag__ x) / den;\n-    }\n-\n-  return res;\n-}"}, {"sha": "705dc7fb5d20d67e4587991291ec24ac44fa9beb", "filename": "libstdc++-v3/src/complex.cc", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba2a514ef78bfba79a4e011f19a25a14ba4819e/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba2a514ef78bfba79a4e011f19a25a14ba4819e/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc?ref=0ba2a514ef78bfba79a4e011f19a25a14ba4819e", "patch": "@@ -48,15 +48,4 @@ namespace std\n   complex<FLT>\n   sqrt(const complex<FLT>& __x)\n   { return complex<FLT>(csqrt(__x._M_value)); }\n-  \n-  template<>\n-  complex<FLT>\n-  tan(const complex<FLT>& __x)\n-  { return complex<FLT>(ctan(__x._M_value)); }\n-  \n-  template<>\n-  complex<FLT>\n-  tanh(const complex<FLT>& __x)\n-  { return complex<FLT>(ctanh(__x._M_value)); }\n-  \n } // namespace std"}]}