{"sha": "d9403b0dda444f165343dcb37a2680b0440c8cba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk0MDNiMGRkYTQ0NGYxNjUzNDNkY2IzN2EyNjgwYjA0NDBjOGNiYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-17T18:24:37Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-17T18:24:37Z"}, "message": "i386-protos.h (output_fix_trunc): Change arg 3 to bool.\n\n\t* config/i386/i386-protos.h (output_fix_trunc): Change arg 3 to bool.\n\t(output_fp_compare): Change args 3 and 4 to bool.\n\t(ix86_expand_call): Change arg 6 to bool.\n\t(ix86_attr_length_immediate_default): Change arg 2 to bool.\n\t(ix86_attr_length_vex_default): Change arg 3 to bool.\n\t* config/i386/i386.md: Update all uses.\n\t* config/i386/i386.c: Ditto.\n\t(ix86_flags_dependent): Change return type to bool.\n\nFrom-SVN: r173833", "tree": {"sha": "436dde077eeb6a4687fd7eee6acf4654b59438f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/436dde077eeb6a4687fd7eee6acf4654b59438f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9403b0dda444f165343dcb37a2680b0440c8cba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9403b0dda444f165343dcb37a2680b0440c8cba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9403b0dda444f165343dcb37a2680b0440c8cba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9403b0dda444f165343dcb37a2680b0440c8cba/comments", "author": null, "committer": null, "parents": [{"sha": "5beaf6643b97573248b35b857a7b2b07d90ba390", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5beaf6643b97573248b35b857a7b2b07d90ba390", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5beaf6643b97573248b35b857a7b2b07d90ba390"}], "stats": {"total": 124, "additions": 66, "deletions": 58}, "files": [{"sha": "3daa4166703e4fcdb514948e7ada5df0c6e604cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9403b0dda444f165343dcb37a2680b0440c8cba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9403b0dda444f165343dcb37a2680b0440c8cba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9403b0dda444f165343dcb37a2680b0440c8cba", "patch": "@@ -1,3 +1,14 @@\n+2011-05-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386-protos.h (output_fix_trunc): Change arg 3 to bool.\n+\t(output_fp_compare): Change args 3 and 4 to bool.\n+\t(ix86_expand_call): Change arg 6 to bool.\n+\t(ix86_attr_length_immediate_default): Change arg 2 to bool.\n+\t(ix86_attr_length_vex_default): Change arg 3 to bool.\n+\t* config/i386/i386.md: Update all uses.\n+\t* config/i386/i386.c: Ditto.\n+\t(ix86_flags_dependent): Change return type to bool.\n+\n 2011-05-17  Richard Guenther  <rguenther@suse.de>\n \n \t* gimple.c (type_hash_pair_compare): Fix comparison.\n@@ -59,11 +70,9 @@\n \t* config/i386/i386-opts.h (enum fpmath_unit): Move from i386.h.\n \t* config/i386/i386.c: Include diagnostic.h.\n \t(ix86_fpmath, IX86_FUNCTION_SPECIFIC_FPMATH): Remove.\n-\t(ix86_target_string): Take enum fpmath_unit value instead of\n-\tstring.\n+\t(ix86_target_string): Take enum fpmath_unit value instead of string.\n \t(ix86_debug_options): Update call to ix86_target_string.\n-\t(ix86_option_override_internal): Don't process fpmath strings\n-\there.\n+\t(ix86_option_override_internal): Don't process fpmath strings here.\n \t(x86_function_specific_save, ix86_function_specific_restore):\n \tDon't handle fpmath state specially.\n \t(ix86_function_specific_print): Pass fpmath state to\n@@ -112,7 +121,7 @@\n \tmode iterator.  Use \"<c>zm\" constraint for operand 1.\n \t(*call_value_vzeroupper): Ditto.\n \t(*call_value_rex64_ms_sysv): Ditto.  Use \"rzm\" constraint\n-\tfor operand 0.\n+\tfor operand 1.\n \t(*call_value_rex64_ms_sysv_vzeroupper): Ditto.\n \t(*call_value_pop): Merge insn pattern from *call_value_pop_0 and\n \t*call_value_pop_1.  Use \"lzm\" constraint for operand 1."}, {"sha": "5643153ac39108885dc9d7d2ebcfb1d75b367619", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9403b0dda444f165343dcb37a2680b0440c8cba/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9403b0dda444f165343dcb37a2680b0440c8cba/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=d9403b0dda444f165343dcb37a2680b0440c8cba", "patch": "@@ -67,8 +67,8 @@ extern void split_double_mode (enum machine_mode, rtx[], int, rtx[], rtx[]);\n extern const char *output_set_got (rtx, rtx);\n extern const char *output_387_binary_op (rtx, rtx*);\n extern const char *output_387_reg_move (rtx, rtx*);\n-extern const char *output_fix_trunc (rtx, rtx*, int);\n-extern const char *output_fp_compare (rtx, rtx*, int, int);\n+extern const char *output_fix_trunc (rtx, rtx*, bool);\n+extern const char *output_fp_compare (rtx, rtx*, bool, bool);\n extern const char *output_adjust_stack_and_probe (rtx);\n extern const char *output_probe_stack_range (rtx, rtx);\n \n@@ -114,7 +114,7 @@ extern bool ix86_expand_fp_vcond (rtx[]);\n extern bool ix86_expand_int_vcond (rtx[]);\n extern void ix86_expand_sse_unpack (rtx[], bool, bool);\n extern bool ix86_expand_int_addcc (rtx[]);\n-extern rtx ix86_expand_call (rtx, rtx, rtx, rtx, rtx, int);\n+extern rtx ix86_expand_call (rtx, rtx, rtx, rtx, rtx, bool);\n extern void ix86_split_call_vzeroupper (rtx, rtx);\n extern void x86_initialize_trampoline (rtx, rtx, rtx);\n extern rtx ix86_zero_extend_to_Pmode (rtx);\n@@ -127,9 +127,9 @@ extern bool ix86_check_movabs (rtx, int);\n extern void ix86_split_idivmod (enum machine_mode, rtx[], bool);\n \n extern rtx assign_386_stack_local (enum machine_mode, enum ix86_stack_slot);\n-extern int ix86_attr_length_immediate_default (rtx, int);\n+extern int ix86_attr_length_immediate_default (rtx, bool);\n extern int ix86_attr_length_address_default (rtx);\n-extern int ix86_attr_length_vex_default (rtx, int, int);\n+extern int ix86_attr_length_vex_default (rtx, bool, bool);\n \n extern enum machine_mode ix86_fp_compare_mode (enum rtx_code);\n "}, {"sha": "ee8c37beda9de87b875723c3f974c14c1b509d88", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9403b0dda444f165343dcb37a2680b0440c8cba/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9403b0dda444f165343dcb37a2680b0440c8cba/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d9403b0dda444f165343dcb37a2680b0440c8cba", "patch": "@@ -11517,7 +11517,7 @@ ix86_expand_split_stack_prologue (void)\n     }\n   call_insn = ix86_expand_call (NULL_RTX, gen_rtx_MEM (QImode, fn),\n \t\t\t\tGEN_INT (UNITS_PER_WORD), constm1_rtx,\n-\t\t\t\tNULL_RTX, 0);\n+\t\t\t\tNULL_RTX, false);\n   add_function_usage_to (call_insn, call_fusage);\n \n   /* In order to make call/return prediction work right, we now need\n@@ -15196,7 +15196,7 @@ emit_i387_cw_initialization (int mode)\n    operand may be [SDX]Fmode.  */\n \n const char *\n-output_fix_trunc (rtx insn, rtx *operands, int fisttp)\n+output_fix_trunc (rtx insn, rtx *operands, bool fisttp)\n {\n   int stack_top_dies = find_regno_note (insn, REG_DEAD, FIRST_STACK_REG) != 0;\n   int dimode_p = GET_MODE (operands[0]) == DImode;\n@@ -15261,7 +15261,7 @@ output_387_ffreep (rtx *operands ATTRIBUTE_UNUSED, int opno)\n    should be used.  UNORDERED_P is true when fucom should be used.  */\n \n const char *\n-output_fp_compare (rtx insn, rtx *operands, int eflags_p, int unordered_p)\n+output_fp_compare (rtx insn, rtx *operands, bool eflags_p, bool unordered_p)\n {\n   int stack_top_dies;\n   rtx cmp_op0, cmp_op1;\n@@ -21961,7 +21961,7 @@ construct_plt_address (rtx symbol)\n rtx\n ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n \t\t  rtx callarg2,\n-\t\t  rtx pop, int sibcall)\n+\t\t  rtx pop, bool sibcall)\n {\n   rtx use = NULL, call;\n \n@@ -22326,7 +22326,7 @@ memory_address_length (rtx addr)\n /* Compute default value for \"length_immediate\" attribute.  When SHORTFORM\n    is set, expect that insn have 8bit immediate alternative.  */\n int\n-ix86_attr_length_immediate_default (rtx insn, int shortform)\n+ix86_attr_length_immediate_default (rtx insn, bool shortform)\n {\n   int len = 0;\n   int i;\n@@ -22436,8 +22436,7 @@ ix86_attr_length_address_default (rtx insn)\n    2 or 3 byte VEX prefix and 1 opcode byte.  */\n \n int\n-ix86_attr_length_vex_default (rtx insn, int has_0f_opcode,\n-\t\t\t      int has_vex_w)\n+ix86_attr_length_vex_default (rtx insn, bool has_0f_opcode, bool has_vex_w)\n {\n   int i;\n \n@@ -22504,10 +22503,10 @@ ix86_issue_rate (void)\n     }\n }\n \n-/* A subroutine of ix86_adjust_cost -- return true iff INSN reads flags set\n+/* A subroutine of ix86_adjust_cost -- return TRUE iff INSN reads flags set\n    by DEP_INSN and nothing set by DEP_INSN.  */\n \n-static int\n+static bool\n ix86_flags_dependent (rtx insn, rtx dep_insn, enum attr_type insn_type)\n {\n   rtx set, set2;\n@@ -22517,7 +22516,7 @@ ix86_flags_dependent (rtx insn, rtx dep_insn, enum attr_type insn_type)\n       && insn_type != TYPE_ICMOV\n       && insn_type != TYPE_FCMOV\n       && insn_type != TYPE_IBR)\n-    return 0;\n+    return false;\n \n   if ((set = single_set (dep_insn)) != 0)\n     {\n@@ -22533,20 +22532,20 @@ ix86_flags_dependent (rtx insn, rtx dep_insn, enum attr_type insn_type)\n       set2 = SET_DEST (XVECEXP (PATTERN (dep_insn), 0, 0));\n     }\n   else\n-    return 0;\n+    return false;\n \n   if (!REG_P (set) || REGNO (set) != FLAGS_REG)\n-    return 0;\n+    return false;\n \n   /* This test is true if the dependent insn reads the flags but\n      not any other potentially set register.  */\n   if (!reg_overlap_mentioned_p (set, PATTERN (insn)))\n-    return 0;\n+    return false;\n \n   if (set2 && reg_overlap_mentioned_p (set2, PATTERN (insn)))\n-    return 0;\n+    return false;\n \n-  return 1;\n+  return true;\n }\n \n /* Return true iff USE_INSN has a memory address with operands set by"}, {"sha": "d2bcd6b406b8fa049e78762f66185465ce87df46", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9403b0dda444f165343dcb37a2680b0440c8cba/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9403b0dda444f165343dcb37a2680b0440c8cba/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d9403b0dda444f165343dcb37a2680b0440c8cba", "patch": "@@ -414,9 +414,9 @@\n \t   (const_int 0)\n \t (eq_attr \"type\" \"alu,alu1,negnot,imovx,ishift,rotate,ishift1,rotate1,\n \t\t\t  imul,icmp,push,pop\")\n-\t   (symbol_ref \"ix86_attr_length_immediate_default(insn,1)\")\n+\t   (symbol_ref \"ix86_attr_length_immediate_default (insn, true)\")\n \t (eq_attr \"type\" \"imov,test\")\n-\t   (symbol_ref \"ix86_attr_length_immediate_default(insn,0)\")\n+\t   (symbol_ref \"ix86_attr_length_immediate_default (insn, false)\")\n \t (eq_attr \"type\" \"call\")\n \t   (if_then_else (match_operand 0 \"constant_call_address_operand\" \"\")\n \t     (const_int 4)\n@@ -524,11 +524,11 @@\n   (if_then_else (and (eq_attr \"prefix_0f\" \"1\")\n \t\t     (eq_attr \"prefix_extra\" \"0\"))\n     (if_then_else (eq_attr \"prefix_vex_w\" \"1\")\n-      (symbol_ref \"ix86_attr_length_vex_default (insn, 1, 1)\")\n-      (symbol_ref \"ix86_attr_length_vex_default (insn, 1, 0)\"))\n+      (symbol_ref \"ix86_attr_length_vex_default (insn, true, true)\")\n+      (symbol_ref \"ix86_attr_length_vex_default (insn, true, false)\"))\n     (if_then_else (eq_attr \"prefix_vex_w\" \"1\")\n-      (symbol_ref \"ix86_attr_length_vex_default (insn, 0, 1)\")\n-      (symbol_ref \"ix86_attr_length_vex_default (insn, 0, 0)\"))))\n+      (symbol_ref \"ix86_attr_length_vex_default (insn, false, true)\")\n+      (symbol_ref \"ix86_attr_length_vex_default (insn, false, false)\"))))\n \n ;; Set when modrm byte is used.\n (define_attr \"modrm\" \"\"\n@@ -1262,7 +1262,7 @@\n \tUNSPEC_FNSTSW))]\n   \"X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n    && GET_MODE (operands[1]) == GET_MODE (operands[2])\"\n-  \"* return output_fp_compare (insn, operands, 0, 0);\"\n+  \"* return output_fp_compare (insn, operands, false, false);\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"unit\" \"i387\")\n    (set (attr \"mode\")\n@@ -1309,7 +1309,7 @@\n \t     (match_operand:XF 2 \"register_operand\" \"f\"))]\n \t  UNSPEC_FNSTSW))]\n   \"TARGET_80387\"\n-  \"* return output_fp_compare (insn, operands, 0, 0);\"\n+  \"* return output_fp_compare (insn, operands, false, false);\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"unit\" \"i387\")\n    (set_attr \"mode\" \"XF\")])\n@@ -1343,7 +1343,7 @@\n \t     (match_operand:MODEF 2 \"nonimmediate_operand\" \"fm\"))]\n \t  UNSPEC_FNSTSW))]\n   \"TARGET_80387\"\n-  \"* return output_fp_compare (insn, operands, 0, 0);\"\n+  \"* return output_fp_compare (insn, operands, false, false);\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"unit\" \"i387\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -1378,7 +1378,7 @@\n \t  UNSPEC_FNSTSW))]\n   \"X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n    && GET_MODE (operands[1]) == GET_MODE (operands[2])\"\n-  \"* return output_fp_compare (insn, operands, 0, 1);\"\n+  \"* return output_fp_compare (insn, operands, false, true);\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"unit\" \"i387\")\n    (set (attr \"mode\")\n@@ -1428,7 +1428,7 @@\n   \"X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n    && (TARGET_USE_<MODE>MODE_FIOP || optimize_function_for_size_p (cfun))\n    && (GET_MODE (operands [3]) == GET_MODE (operands[1]))\"\n-  \"* return output_fp_compare (insn, operands, 0, 0);\"\n+  \"* return output_fp_compare (insn, operands, false, false);\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"unit\" \"i387\")\n    (set_attr \"fp_int_src\" \"true\")\n@@ -1504,7 +1504,7 @@\n   \"TARGET_MIX_SSE_I387\n    && SSE_FLOAT_MODE_P (GET_MODE (operands[0]))\n    && GET_MODE (operands[0]) == GET_MODE (operands[1])\"\n-  \"* return output_fp_compare (insn, operands, 1, 0);\"\n+  \"* return output_fp_compare (insn, operands, true, false);\"\n   [(set_attr \"type\" \"fcmp,ssecomi\")\n    (set_attr \"prefix\" \"orig,maybe_vex\")\n    (set (attr \"mode\")\n@@ -1533,7 +1533,7 @@\n   \"TARGET_SSE_MATH\n    && SSE_FLOAT_MODE_P (GET_MODE (operands[0]))\n    && GET_MODE (operands[0]) == GET_MODE (operands[1])\"\n-  \"* return output_fp_compare (insn, operands, 1, 0);\"\n+  \"* return output_fp_compare (insn, operands, true, false);\"\n   [(set_attr \"type\" \"ssecomi\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set (attr \"mode\")\n@@ -1557,7 +1557,7 @@\n    && TARGET_CMOVE\n    && !(SSE_FLOAT_MODE_P (GET_MODE (operands[0])) && TARGET_SSE_MATH)\n    && GET_MODE (operands[0]) == GET_MODE (operands[1])\"\n-  \"* return output_fp_compare (insn, operands, 1, 0);\"\n+  \"* return output_fp_compare (insn, operands, true, false);\"\n   [(set_attr \"type\" \"fcmp\")\n    (set (attr \"mode\")\n      (cond [(match_operand:SF 1 \"\" \"\")\n@@ -1577,7 +1577,7 @@\n   \"TARGET_MIX_SSE_I387\n    && SSE_FLOAT_MODE_P (GET_MODE (operands[0]))\n    && GET_MODE (operands[0]) == GET_MODE (operands[1])\"\n-  \"* return output_fp_compare (insn, operands, 1, 1);\"\n+  \"* return output_fp_compare (insn, operands, true, true);\"\n   [(set_attr \"type\" \"fcmp,ssecomi\")\n    (set_attr \"prefix\" \"orig,maybe_vex\")\n    (set (attr \"mode\")\n@@ -1606,7 +1606,7 @@\n   \"TARGET_SSE_MATH\n    && SSE_FLOAT_MODE_P (GET_MODE (operands[0]))\n    && GET_MODE (operands[0]) == GET_MODE (operands[1])\"\n-  \"* return output_fp_compare (insn, operands, 1, 1);\"\n+  \"* return output_fp_compare (insn, operands, true, true);\"\n   [(set_attr \"type\" \"ssecomi\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set (attr \"mode\")\n@@ -1630,7 +1630,7 @@\n    && TARGET_CMOVE\n    && !(SSE_FLOAT_MODE_P (GET_MODE (operands[0])) && TARGET_SSE_MATH)\n    && GET_MODE (operands[0]) == GET_MODE (operands[1])\"\n-  \"* return output_fp_compare (insn, operands, 1, 1);\"\n+  \"* return output_fp_compare (insn, operands, true, true);\"\n   [(set_attr \"type\" \"fcmp\")\n    (set (attr \"mode\")\n      (cond [(match_operand:SF 1 \"\" \"\")\n@@ -4478,7 +4478,7 @@\n    && !((SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\n \t && (TARGET_64BIT || <MODE>mode != DImode))\n \t&& TARGET_SSE_MATH)\"\n-  \"* return output_fix_trunc (insn, operands, 1);\"\n+  \"* return output_fix_trunc (insn, operands, true);\"\n   [(set_attr \"type\" \"fisttp\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -4562,7 +4562,7 @@\n   \"X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n    && !TARGET_FISTTP\n    && !(TARGET_64BIT && SSE_FLOAT_MODE_P (GET_MODE (operands[1])))\"\n-  \"* return output_fix_trunc (insn, operands, 0);\"\n+  \"* return output_fix_trunc (insn, operands, false);\"\n   [(set_attr \"type\" \"fistp\")\n    (set_attr \"i387_cw\" \"trunc\")\n    (set_attr \"mode\" \"DI\")])\n@@ -4617,7 +4617,7 @@\n   \"X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n    && !TARGET_FISTTP\n    && !SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\"\n-  \"* return output_fix_trunc (insn, operands, 0);\"\n+  \"* return output_fix_trunc (insn, operands, false);\"\n   [(set_attr \"type\" \"fistp\")\n    (set_attr \"i387_cw\" \"trunc\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -11077,7 +11077,7 @@\n   \"\"\n {\n   ix86_expand_call (NULL, operands[0], operands[1],\n-\t\t    operands[2], NULL, 0);\n+\t\t    operands[2], NULL, false);\n   DONE;\n })\n \n@@ -11088,7 +11088,7 @@\n   \"\"\n {\n   ix86_expand_call (NULL, operands[0], operands[1],\n-\t\t    operands[2], NULL, 1);\n+\t\t    operands[2], NULL, true);\n   DONE;\n })\n \n@@ -11185,7 +11185,7 @@\n   \"!TARGET_64BIT\"\n {\n   ix86_expand_call (NULL, operands[0], operands[1],\n-\t\t    operands[2], operands[3], 0);\n+\t\t    operands[2], operands[3], false);\n   DONE;\n })\n \n@@ -11251,7 +11251,7 @@\n   \"\"\n {\n   ix86_expand_call (operands[0], operands[1], operands[2],\n-\t\t    operands[3], NULL, 0);\n+\t\t    operands[3], NULL, false);\n   DONE;\n })\n \n@@ -11263,7 +11263,7 @@\n   \"\"\n {\n   ix86_expand_call (operands[0], operands[1], operands[2],\n-\t\t    operands[3], NULL, 1);\n+\t\t    operands[3], NULL, true);\n   DONE;\n })\n \n@@ -11367,7 +11367,7 @@\n   \"!TARGET_64BIT\"\n {\n   ix86_expand_call (operands[0], operands[1], operands[2],\n-\t\t    operands[3], operands[4], 0);\n+\t\t    operands[3], operands[4], false);\n   DONE;\n })\n \n@@ -11455,7 +11455,7 @@\n \t\t\t\t : X86_64_MS_SSE_REGPARM_MAX)\n \t\t\t      : X86_32_SSE_REGPARM_MAX)\n \t\t    \t     - 1),\n-\t\t    NULL, 0);\n+\t\t    NULL, false);\n \n   for (i = 0; i < XVECLEN (operands[2], 0); i++)\n     {\n@@ -14370,7 +14370,7 @@\n \t\t   UNSPEC_FIST))\n    (clobber (match_scratch:XF 2 \"=&1f\"))]\n   \"TARGET_USE_FANCY_MATH_387\"\n-  \"* return output_fix_trunc (insn, operands, 0);\"\n+  \"* return output_fix_trunc (insn, operands, false);\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"DI\")])\n \n@@ -14429,7 +14429,7 @@\n \t(unspec:X87MODEI12 [(match_operand:XF 1 \"register_operand\" \"f\")]\n \t\t\t   UNSPEC_FIST))]\n   \"TARGET_USE_FANCY_MATH_387\"\n-  \"* return output_fix_trunc (insn, operands, 0);\"\n+  \"* return output_fix_trunc (insn, operands, false);\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -14619,7 +14619,7 @@\n    (clobber (match_scratch:XF 4 \"=&1f\"))]\n   \"TARGET_USE_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\"\n-  \"* return output_fix_trunc (insn, operands, 0);\"\n+  \"* return output_fix_trunc (insn, operands, false);\"\n   [(set_attr \"type\" \"fistp\")\n    (set_attr \"i387_cw\" \"floor\")\n    (set_attr \"mode\" \"DI\")])\n@@ -14676,7 +14676,7 @@\n    (use (match_operand:HI 3 \"memory_operand\" \"m\"))]\n   \"TARGET_USE_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\"\n-  \"* return output_fix_trunc (insn, operands, 0);\"\n+  \"* return output_fix_trunc (insn, operands, false);\"\n   [(set_attr \"type\" \"fistp\")\n    (set_attr \"i387_cw\" \"floor\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -14876,7 +14876,7 @@\n    (clobber (match_scratch:XF 4 \"=&1f\"))]\n   \"TARGET_USE_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\"\n-  \"* return output_fix_trunc (insn, operands, 0);\"\n+  \"* return output_fix_trunc (insn, operands, false);\"\n   [(set_attr \"type\" \"fistp\")\n    (set_attr \"i387_cw\" \"ceil\")\n    (set_attr \"mode\" \"DI\")])\n@@ -14933,7 +14933,7 @@\n    (use (match_operand:HI 3 \"memory_operand\" \"m\"))]\n   \"TARGET_USE_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\"\n-  \"* return output_fix_trunc (insn, operands, 0);\"\n+  \"* return output_fix_trunc (insn, operands, false);\"\n   [(set_attr \"type\" \"fistp\")\n    (set_attr \"i387_cw\" \"ceil\")\n    (set_attr \"mode\" \"<MODE>\")])"}]}