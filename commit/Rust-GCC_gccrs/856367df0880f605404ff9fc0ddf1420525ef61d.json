{"sha": "856367df0880f605404ff9fc0ddf1420525ef61d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU2MzY3ZGYwODgwZjYwNTQwNGZmOWZjMGRkZjE0MjA1MjVlZjYxZA==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2006-07-15T09:44:36Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2006-07-15T09:44:36Z"}, "message": "re PR c++/28249 (\"long long long\" accepted by catch)\n\n\tPR c++/28249\n\t* parser.c (cp_parser_check_decl_spec): New function.\n\t(cp_parser_decl_specifier_seq): Factor out check for repeated\n\tdecl-specifiers into cp_parser_check_decl_spec. Use it.\n\t(cp_parser_type_specifier_seq) Use it.\n\n\t* g++.dg/parse/catch1.C: New test.\n\nFrom-SVN: r115469", "tree": {"sha": "82833ed6777c99fa879281c80b54c5a9054a3f51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82833ed6777c99fa879281c80b54c5a9054a3f51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/856367df0880f605404ff9fc0ddf1420525ef61d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/856367df0880f605404ff9fc0ddf1420525ef61d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/856367df0880f605404ff9fc0ddf1420525ef61d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/856367df0880f605404ff9fc0ddf1420525ef61d/comments", "author": null, "committer": null, "parents": [{"sha": "0a9367cbdbdc9e5302e7ac39b00c26e698c4100d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a9367cbdbdc9e5302e7ac39b00c26e698c4100d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a9367cbdbdc9e5302e7ac39b00c26e698c4100d"}], "stats": {"total": 99, "additions": 63, "deletions": 36}, "files": [{"sha": "aa508e3ffe2227c57bb59adf7b38dcec53038562", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856367df0880f605404ff9fc0ddf1420525ef61d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856367df0880f605404ff9fc0ddf1420525ef61d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=856367df0880f605404ff9fc0ddf1420525ef61d", "patch": "@@ -1,5 +1,11 @@\n 2006-07-15  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n+\tPR c++/28249\n+\t* parser.c (cp_parser_check_decl_spec): New function.\n+\t(cp_parser_decl_specifier_seq): Factor out check for repeated\n+\tdecl-specifiers into cp_parser_check_decl_spec. Use it.\n+\t(cp_parser_type_specifier_seq) Use it.\n+\n \tPR c++/28294\n \t* semantics.c (finish_offsetof): Use TREE_OPERAND for COMPONENT_REFs\n \tonly."}, {"sha": "81000bf47acb2a7d2e55475ac6b23d8ce1b0ece4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 46, "deletions": 36, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856367df0880f605404ff9fc0ddf1420525ef61d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856367df0880f605404ff9fc0ddf1420525ef61d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=856367df0880f605404ff9fc0ddf1420525ef61d", "patch": "@@ -1950,6 +1950,49 @@ cp_parser_simulate_error (cp_parser* parser)\n   return false;\n }\n \n+/* Check for repeated decl-specifiers.  */\n+\n+static void\n+cp_parser_check_decl_spec (cp_decl_specifier_seq *decl_specs)\n+{\n+  cp_decl_spec ds;\n+\n+  for (ds = ds_first; ds != ds_last; ++ds)\n+    {\n+      unsigned count = decl_specs->specs[(int)ds];\n+      if (count < 2)\n+\tcontinue;\n+      /* The \"long\" specifier is a special case because of \"long long\".  */\n+      if (ds == ds_long)\n+\t{\n+\t  if (count > 2)\n+\t    error (\"%<long long long%> is too long for GCC\");\n+\t  else if (pedantic && !in_system_header && warn_long_long)\n+\t    pedwarn (\"ISO C++ does not support %<long long%>\");\n+\t}\n+      else if (count > 1)\n+\t{\n+\t  static const char *const decl_spec_names[] = {\n+\t    \"signed\",\n+\t    \"unsigned\",\n+\t    \"short\",\n+\t    \"long\",\n+\t    \"const\",\n+\t    \"volatile\",\n+\t    \"restrict\",\n+\t    \"inline\",\n+\t    \"virtual\",\n+\t    \"explicit\",\n+\t    \"friend\",\n+\t    \"typedef\",\n+\t    \"__complex\",\n+\t    \"__thread\"\n+\t  };\n+\t  error (\"duplicate %qs\", decl_spec_names[(int)ds]);\n+\t}\n+    }\n+}\n+\n /* This function is called when a type is defined.  If type\n    definitions are forbidden at this point, an error message is\n    issued.  */\n@@ -7376,7 +7419,6 @@ cp_parser_decl_specifier_seq (cp_parser* parser,\n \t\t\t      int* declares_class_or_enum)\n {\n   bool constructor_possible_p = !parser->in_declarator_p;\n-  cp_decl_spec ds;\n \n   /* Clear DECL_SPECS.  */\n   clear_decl_specs (decl_specs);\n@@ -7559,41 +7601,7 @@ cp_parser_decl_specifier_seq (cp_parser* parser,\n       flags |= CP_PARSER_FLAGS_OPTIONAL;\n     }\n \n-  /* Check for repeated decl-specifiers.  */\n-  for (ds = ds_first; ds != ds_last; ++ds)\n-    {\n-      unsigned count = decl_specs->specs[(int)ds];\n-      if (count < 2)\n-\tcontinue;\n-      /* The \"long\" specifier is a special case because of \"long long\".  */\n-      if (ds == ds_long)\n-\t{\n-\t  if (count > 2)\n-\t    error (\"%<long long long%> is too long for GCC\");\n-\t  else if (pedantic && !in_system_header && warn_long_long)\n-\t    pedwarn (\"ISO C++ does not support %<long long%>\");\n-\t}\n-      else if (count > 1)\n-\t{\n-\t  static const char *const decl_spec_names[] = {\n-\t    \"signed\",\n-\t    \"unsigned\",\n-\t    \"short\",\n-\t    \"long\",\n-\t    \"const\",\n-\t    \"volatile\",\n-\t    \"restrict\",\n-\t    \"inline\",\n-\t    \"virtual\",\n-\t    \"explicit\",\n-\t    \"friend\",\n-\t    \"typedef\",\n-\t    \"__complex\",\n-\t    \"__thread\"\n-\t  };\n-\t  error (\"duplicate %qs\", decl_spec_names[(int)ds]);\n-\t}\n-    }\n+  cp_parser_check_decl_spec (decl_specs);\n \n   /* Don't allow a friend specifier with a class definition.  */\n   if (decl_specs->specs[(int) ds_friend] != 0\n@@ -12030,6 +12038,8 @@ cp_parser_type_specifier_seq (cp_parser* parser,\n       if (is_condition && !is_cv_qualifier)\n \tflags |= CP_PARSER_FLAGS_NO_USER_DEFINED_TYPES;\n     }\n+\n+  cp_parser_check_decl_spec (type_specifier_seq);\n }\n \n /* Parse a parameter-declaration-clause."}, {"sha": "c145b16318bdb0020b0bda3b876b073b329cd539", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856367df0880f605404ff9fc0ddf1420525ef61d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856367df0880f605404ff9fc0ddf1420525ef61d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=856367df0880f605404ff9fc0ddf1420525ef61d", "patch": "@@ -1,5 +1,8 @@\n 2006-07-15  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n+\tPR c++/28249\n+\t* g++.dg/parse/catch1.C: New test.\n+\n \tPR c++/28294\n \t* g++.dg/ext/offsetof1.C: Add test with function pointer arithmetic.\n "}, {"sha": "877402231ea9b6989255550edb6d04ce0b47ef16", "filename": "gcc/testsuite/g++.dg/parse/catch1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856367df0880f605404ff9fc0ddf1420525ef61d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcatch1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856367df0880f605404ff9fc0ddf1420525ef61d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcatch1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcatch1.C?ref=856367df0880f605404ff9fc0ddf1420525ef61d", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/28249\n+// { dg-do compile }\n+\n+void foo()\n+{\n+  try {}\n+  catch (long long long) {}  // { dg-error \"long long long\" }\n+}"}]}