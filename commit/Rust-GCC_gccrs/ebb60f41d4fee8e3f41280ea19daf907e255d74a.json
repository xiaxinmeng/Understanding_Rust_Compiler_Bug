{"sha": "ebb60f41d4fee8e3f41280ea19daf907e255d74a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJiNjBmNDFkNGZlZThlM2Y0MTI4MGVhMTlkYWY5MDdlMjU1ZDc0YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2006-12-06T07:14:23Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2006-12-06T07:14:23Z"}, "message": "ChangeLog: Use tabs instead of spaces.\n\n\t* ChangeLog: Use tabs instead of spaces.\n\nFrom-SVN: r119576", "tree": {"sha": "eba7ee60d2445ae7fcb5b0f5d3064ad446755e03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eba7ee60d2445ae7fcb5b0f5d3064ad446755e03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebb60f41d4fee8e3f41280ea19daf907e255d74a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebb60f41d4fee8e3f41280ea19daf907e255d74a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebb60f41d4fee8e3f41280ea19daf907e255d74a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebb60f41d4fee8e3f41280ea19daf907e255d74a/comments", "author": null, "committer": null, "parents": [{"sha": "7f1ba716a2b0eb2db5e641f739bf461912e7ef89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f1ba716a2b0eb2db5e641f739bf461912e7ef89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f1ba716a2b0eb2db5e641f739bf461912e7ef89"}], "stats": {"total": 432, "additions": 216, "deletions": 216}, "files": [{"sha": "3ada6a0965e7359916904bec192b4448b247b6d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 216, "deletions": 216, "changes": 432, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb60f41d4fee8e3f41280ea19daf907e255d74a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb60f41d4fee8e3f41280ea19daf907e255d74a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebb60f41d4fee8e3f41280ea19daf907e255d74a", "patch": "@@ -88,116 +88,116 @@\n \n \t2006-12-04  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/s390/s390.c (s390_va_start): Replace MODIFY_EXPR with\n-        GIMPLE_MODIFY_STMT.\n-        (s390_gimplify_va_arg): Same.\n-        * config/sparc/sparc.c (sparc_gimplify_va_arg): Same.\n-        * config/sh/sh.c (sh_va_start): Same.\n-        (sh_gimplify_va_arg_expr): Same.\n-        * config/xtensa/xtensa.c (xtensa_va_start): Same.\n-        (xtensa_gimplify_va_arg_expr): Same.\n-        * config/ia64/ia64.c (ia64_gimplify_va_arg): Same.\n-        * config/pa/pa.c (hppa_gimplify_va_arg_expr): Same.\n-        * config/mips/mips.c (mips_va_start): Same.\n-        (mips_gimplify_va_arg_expr): Same.\n+\t* config/s390/s390.c (s390_va_start): Replace MODIFY_EXPR with\n+\tGIMPLE_MODIFY_STMT.\n+\t(s390_gimplify_va_arg): Same.\n+\t* config/sparc/sparc.c (sparc_gimplify_va_arg): Same.\n+\t* config/sh/sh.c (sh_va_start): Same.\n+\t(sh_gimplify_va_arg_expr): Same.\n+\t* config/xtensa/xtensa.c (xtensa_va_start): Same.\n+\t(xtensa_gimplify_va_arg_expr): Same.\n+\t* config/ia64/ia64.c (ia64_gimplify_va_arg): Same.\n+\t* config/pa/pa.c (hppa_gimplify_va_arg_expr): Same.\n+\t* config/mips/mips.c (mips_va_start): Same.\n+\t(mips_gimplify_va_arg_expr): Same.\n \n \t2006-12-04  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * Merge from mainline at revision 119445.\n+\t* Merge from mainline at revision 119445.\n \n \t2006-12-04  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/spu/spu.c (spu_va_start): Change MODIFY_EXPR to\n-        GIMPLE_MODIFY_STMT.\n-        (spu_gimplify_va_arg_expr): Same.\n+\t* config/spu/spu.c (spu_va_start): Change MODIFY_EXPR to\n+\tGIMPLE_MODIFY_STMT.\n+\t(spu_gimplify_va_arg_expr): Same.\n \n \t2006-12-04  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/stormy16/stormy16.c (xstormy16_expand_builtin_va_start):\n-        Change uses of MODIFY_EXPR to GIMPLE_MODIFY_STMT.\n-        (xstormy16_expand_builtin_va_arg): Same.\n+\t* config/stormy16/stormy16.c (xstormy16_expand_builtin_va_start):\n+\tChange uses of MODIFY_EXPR to GIMPLE_MODIFY_STMT.\n+\t(xstormy16_expand_builtin_va_arg): Same.\n \n \t2006-12-04  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/frv/frv.c (frv_expand_builtin_va_start): Change MODIFY_EXPR\n-        to GIMPLE_MODIFY_STMT.\n+\t* config/frv/frv.c (frv_expand_builtin_va_start): Change MODIFY_EXPR\n+\tto GIMPLE_MODIFY_STMT.\n \n \t2006-12-04  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/alpha/alpha.c (va_list_skip_additions): Change all\n+\t* config/alpha/alpha.c (va_list_skip_additions): Change all\n \toccurrences of MODIFY_EXPR to GIMPLE_MODIFY_STMT.\n-        (alpha_va_start): Same.\n-        (alpha_gimplify_va_arg_1): Same.\n-        (alpha_gimplify_va_arg): Same.\n+\t(alpha_va_start): Same.\n+\t(alpha_gimplify_va_arg_1): Same.\n+\t(alpha_gimplify_va_arg): Same.\n \n \t2006-12-01  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* gimplify.c (gimplify_modify_expr): Remove FIXME comment.\n \n \t2006-12-01  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * tree-ssa-loop-im.c: Rename all PROTECTED_TREE_OPERAND to\n-        GENERIC_TREE_OPERAND, and all PROTECTED_TREE_TYPE to\n-        GENERIC_TREE_TYPE.\n-        * tree-complex.c: Same.\n-        * tree-pretty-print.c: Same.\n-        * tree.c: Same.\n-        * tree.h: Same.\n-        * builtins.c: Same.\n-        * fold-const.c: Same.\n-        * tree-ssa-dom.c: Same.\n-        * tree-ssa-propagate.c: Same.\n-        * tree-ssa-alias.c: Same.\n-        * gimple-low.c: Same.\n-        * dwarf2out.c: Same.\n-        * c-pretty-print.c: Same.\n-        * gimplify.c: Same.\n-        * tree-inline.c: Same.\n-        * tree-outof-ssa.c: Same.\n-        * tree-ssa-structalias.c: Same.\n-        * tree-ssa-reassoc.c: Same.\n-        * stmt.c: Same.\n+\t* tree-ssa-loop-im.c: Rename all PROTECTED_TREE_OPERAND to\n+\tGENERIC_TREE_OPERAND, and all PROTECTED_TREE_TYPE to\n+\tGENERIC_TREE_TYPE.\n+\t* tree-complex.c: Same.\n+\t* tree-pretty-print.c: Same.\n+\t* tree.c: Same.\n+\t* tree.h: Same.\n+\t* builtins.c: Same.\n+\t* fold-const.c: Same.\n+\t* tree-ssa-dom.c: Same.\n+\t* tree-ssa-propagate.c: Same.\n+\t* tree-ssa-alias.c: Same.\n+\t* gimple-low.c: Same.\n+\t* dwarf2out.c: Same.\n+\t* c-pretty-print.c: Same.\n+\t* gimplify.c: Same.\n+\t* tree-inline.c: Same.\n+\t* tree-outof-ssa.c: Same.\n+\t* tree-ssa-structalias.c: Same.\n+\t* tree-ssa-reassoc.c: Same.\n+\t* stmt.c: Same.\n \n \t2006-11-16  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * tree.c (build2_stat): Fix comment.\n+\t* tree.c (build2_stat): Fix comment.\n \n \t2006-11-13  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * tree-ssa-propagate.c (get_rhs): Use GIMPLE_MODIFY_STMT and\n-        TREE_OPERAND when appropriate.\n+\t* tree-ssa-propagate.c (get_rhs): Use GIMPLE_MODIFY_STMT and\n+\tTREE_OPERAND when appropriate.\n \n \t2006-11-04  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * java/java-tree.h (lang_tree_node): Handle gimple tuples.\n-        (EXPR_WFL_EMIT_LINE_NOTE): Look inside base.\n-        (EXPR_WFL_LINECOL): Use EXPR_LOCUS macro instead of exp.locus.\n-        * java/java-gimplify.c (java_gimplify_expr): Comment on why we do\n-        not handle GIMPLE_MODIFY_STMT in the switch statement.\n-        (java_gimplify_modify_expr): Call build2 with GIMPLE_MODIFY_STMT.\n-        (java_gimplify_new_array_init): Same.\n+\t* java/java-tree.h (lang_tree_node): Handle gimple tuples.\n+\t(EXPR_WFL_EMIT_LINE_NOTE): Look inside base.\n+\t(EXPR_WFL_LINECOL): Use EXPR_LOCUS macro instead of exp.locus.\n+\t* java/java-gimplify.c (java_gimplify_expr): Comment on why we do\n+\tnot handle GIMPLE_MODIFY_STMT in the switch statement.\n+\t(java_gimplify_modify_expr): Call build2 with GIMPLE_MODIFY_STMT.\n+\t(java_gimplify_new_array_init): Same.\n \n \t2006-11-03  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * gimplify.c (gimplify_omp_for): Allow gimple statements.\n-        * tree-outof-ssa.c (check_replaceable): Use PROTECTED_TREE_OPERAND.\n-        * fold-const.c (fold_binary): Allow gimple statements.\n-        (fold): Same.\n-        * fortran/trans-array.c (gfc_conv_descriptor_data_set_internal):\n-        Rename from gfc_conv_descriptor_data_set.\n-        Call gfc_add_modify instead of gfc_add_modify_expr.\n-        * fortran/trans-array.h (gfc_conv_descriptor_data_set_internal):\n-        Rename from gfc_conv_descriptor_data_set.\n-        (gfc_conv_descriptor_data_set): New macro.\n-        (gfc_conv_descriptor_data_set_tuples): New macros.\n-        * fortran/trans-openmp.c (gfc_omp_clause_default_ctor): Call\n-        gfc_conv_descriptor_data_set_tuples.\n-        * fortran/trans.c (gfc_add_modify): Rename from gfc_add_modify_expr.\n-        Generate GIMPLE_MODIFY_STMT when appropriate.\n-        * fortran/trans.h (gfc_add_modify): Rename from gfc_add_modify_expr.\n-        (gfc_add_modify_expr): New macro.\n-        (gfc_add_modify_stmt): New macro.\n-        * fortran/f95-lang.c (lang_tree_node): Handle gimple statements.\n+\t* gimplify.c (gimplify_omp_for): Allow gimple statements.\n+\t* tree-outof-ssa.c (check_replaceable): Use PROTECTED_TREE_OPERAND.\n+\t* fold-const.c (fold_binary): Allow gimple statements.\n+\t(fold): Same.\n+\t* fortran/trans-array.c (gfc_conv_descriptor_data_set_internal):\n+\tRename from gfc_conv_descriptor_data_set.\n+\tCall gfc_add_modify instead of gfc_add_modify_expr.\n+\t* fortran/trans-array.h (gfc_conv_descriptor_data_set_internal):\n+\tRename from gfc_conv_descriptor_data_set.\n+\t(gfc_conv_descriptor_data_set): New macro.\n+\t(gfc_conv_descriptor_data_set_tuples): New macros.\n+\t* fortran/trans-openmp.c (gfc_omp_clause_default_ctor): Call\n+\tgfc_conv_descriptor_data_set_tuples.\n+\t* fortran/trans.c (gfc_add_modify): Rename from gfc_add_modify_expr.\n+\tGenerate GIMPLE_MODIFY_STMT when appropriate.\n+\t* fortran/trans.h (gfc_add_modify): Rename from gfc_add_modify_expr.\n+\t(gfc_add_modify_expr): New macro.\n+\t(gfc_add_modify_stmt): New macro.\n+\t* fortran/f95-lang.c (lang_tree_node): Handle gimple statements.\n \n \t2006-11-02  Aldy Hernandez  <aldyh@redhat.com>\n \n@@ -216,11 +216,11 @@\n \n \t2006-10-09  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * tree.h (TREE_CHAIN, TREE_TYPE): Add versions for non GCC or not\n+\t* tree.h (TREE_CHAIN, TREE_TYPE): Add versions for non GCC or not\n \tenable checking.\n-        Also, add __extension__ to GCC versions.\n-        * tree-mudflap.c (mf_xform_derefs_1): Add parentheses around TREE_TYPE.\n-        * tree-inline.c (copy_tree_r): Initialize chain to assuage the warning\n+\tAlso, add __extension__ to GCC versions.\n+\t* tree-mudflap.c (mf_xform_derefs_1): Add parentheses around TREE_TYPE.\n+\t* tree-inline.c (copy_tree_r): Initialize chain to assuage the warning\n \tpatrol.\n \n \t2006-10-05  Aldy Hernandez  <aldyh@redhat.com>\n@@ -270,159 +270,159 @@\n \n \t2006-09-28  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * tree-ssa-math-opts.c (replace_reciprocal): Use GIMPLE_STMT_OPERAND.\n-        * tree-if-conv.c (if_convertible_gimple_modify_stmt_p): Same.\n-        (ifc_temp_var): Same.\n-        * tree-vect-analyze.c (vect_determine_vectorization_factor): Check\n+\t* tree-ssa-math-opts.c (replace_reciprocal): Use GIMPLE_STMT_OPERAND.\n+\t* tree-if-conv.c (if_convertible_gimple_modify_stmt_p): Same.\n+\t(ifc_temp_var): Same.\n+\t* tree-vect-analyze.c (vect_determine_vectorization_factor): Check\n \tfor gimple statements.\n-        (vect_analyze_operations): Same.\n-        (exist_non_indexing_operands_for_use_p): Use GIMPLE_STMT_OPERAND.\n-        * gimplify.c (gimplify_return_expr): Handle gimple statements.\n-        * lambda-code.c (can_put_in_inner_loop): Same.\n-        (can_put_after_inner_loop): Same.\n-        * tree-vect-transform.c (vect_create_addr_base_for_vector_ref): Same.\n-        (vect_create_data_ref_ptr): Same.\n-        (vect_init_vector): Same.\n-        (vect_get_vec_def_for_operand): Same.\n-        (vect_create_epilog_for_reduction): Same.\n-        (vectorizable_reduction): Same.\n-        (vectorizable_assignment): Same.\n-        (vectorizable_operation): Same.\n-        (vectorizable_load): Same.\n-        (vectorizable_condition): Same.\n-        * config/rs6000/rs6000.c (rs6000_va_start): Do not create MODIFY_EXPRs.\n-        (rs6000_gimplify_va_arg): Same.\n+\t(vect_analyze_operations): Same.\n+\t(exist_non_indexing_operands_for_use_p): Use GIMPLE_STMT_OPERAND.\n+\t* gimplify.c (gimplify_return_expr): Handle gimple statements.\n+\t* lambda-code.c (can_put_in_inner_loop): Same.\n+\t(can_put_after_inner_loop): Same.\n+\t* tree-vect-transform.c (vect_create_addr_base_for_vector_ref): Same.\n+\t(vect_create_data_ref_ptr): Same.\n+\t(vect_init_vector): Same.\n+\t(vect_get_vec_def_for_operand): Same.\n+\t(vect_create_epilog_for_reduction): Same.\n+\t(vectorizable_reduction): Same.\n+\t(vectorizable_assignment): Same.\n+\t(vectorizable_operation): Same.\n+\t(vectorizable_load): Same.\n+\t(vectorizable_condition): Same.\n+\t* config/rs6000/rs6000.c (rs6000_va_start): Do not create MODIFY_EXPRs.\n+\t(rs6000_gimplify_va_arg): Same.\n \n \t2006-09-25  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * tree-vrp.c (simplify_div_or_mod_using_ranges): Use\n-        GIMPLE_STMT_OPERAND.\n-        (simplify_abs_using_ranges): Same.\n-        * tree-complex.c (expand_complex_operations_1): Use\n-        PROTECTED_TREE_OPERAND.\n-        * tree-ssa-loop-niter.c (simplify_replace_tree): Check for gimple\n-        stmt.\n-        (get_val_for): Use GIMPLE_STMT_OPERAND.\n-        * tree-tailcall.c (adjust_accumulator_values): Same.\n-        (adjust_return_value): Same.\n-        * tree.c (walk_tree): Use IS_GIMPLE_STMT_CODE_CLASS on default\n-        case.  Remove special case for tcc_gimple_stmt.\n-        * tree.h (CAN_HAVE_LOCATION_P): New.\n-        * tree-ssa-loop-ivopts.c (expr_invariant_in_loop_p): Check for\n-        GIMPLE_STMT_P.\n-        * tree-stdarg.c (va_list_counter_bump): Use GIMPLE_STMT_OPERAND.\n-        * tree-ssa-dom.c (propagate_rhs_into_lhs): Same.\n-        * tree-nrv.c (execute_return_slot_opt): Same.\n-        * tree-ssa-alias.c (count_uses_and_derefs): Check for GIMPLE_STMT_P.\n-        * tree-vn.c (set_value_handle): Same.\n-        (get_value_handle): Same.\n-        * c-decl.c (add_stmt): Use CAN_HAVE_LOCATION_P.\n-        * tree-vectorizer.c (find_loop_location): Same.\n-        * c-typeck.c (c_process_expr_stmt): Same.\n-        (c_finish_stmt_expr): Same.\n-        * gimplify.c (should_carry_locus_p): Same.\n-        (tree_to_gimple_tuple): Delete definition and use of unecessary\n-        variable save_tree_block.\n-        * tree-ssa-pre.c (phi_translate): Check for GIMPLE_STMT_P.\n-        (create_expression_by_pieces): Use GIMPLE_STMT_OPERAND.\n-        (realify_fake_stores): Same.\n-        * tree-ssa-forwprop.c (forward_propagate_addr_into_variable_arr):\n-        Use TREE_OPERAND.\n-        * tree-inline.c (copy_body_r): Check for EXPR_P and GIMPLE_STMT_P.\n-        (copy_tree_r): Check for IS_GIMPLE_STMT_CODE_CLASS.\n-        * tree-cfg.c (move_stmt_r): Use EXPR_P.  Check for GIMPLE_STMT_P.\n-        * c-parser.c (c_parser_typeof_specifier): Use CAN_HAVE_LOCATION_P.\n-        (c_parser_statement_after_labels): Same.\n-        (c_parser_paren_condition): Same.\n-        (c_parser_for_statement): Same.\n-        (c_parser_omp_for_loop): Same.\n-        * tree-ssa-reassoc.c (linearize_expr): Use GIMPLE_STMT_OPERAND.\n-        (linearize_expr_tree): Same.\n-        * dwarf2out.c (reference_to_unused): Check for GIMPLE_STMT_P.\n-        * function.c (instantiate_expr): Same.\n+\t* tree-vrp.c (simplify_div_or_mod_using_ranges): Use\n+\tGIMPLE_STMT_OPERAND.\n+\t(simplify_abs_using_ranges): Same.\n+\t* tree-complex.c (expand_complex_operations_1): Use\n+\tPROTECTED_TREE_OPERAND.\n+\t* tree-ssa-loop-niter.c (simplify_replace_tree): Check for gimple\n+\tstmt.\n+\t(get_val_for): Use GIMPLE_STMT_OPERAND.\n+\t* tree-tailcall.c (adjust_accumulator_values): Same.\n+\t(adjust_return_value): Same.\n+\t* tree.c (walk_tree): Use IS_GIMPLE_STMT_CODE_CLASS on default\n+\tcase.  Remove special case for tcc_gimple_stmt.\n+\t* tree.h (CAN_HAVE_LOCATION_P): New.\n+\t* tree-ssa-loop-ivopts.c (expr_invariant_in_loop_p): Check for\n+\tGIMPLE_STMT_P.\n+\t* tree-stdarg.c (va_list_counter_bump): Use GIMPLE_STMT_OPERAND.\n+\t* tree-ssa-dom.c (propagate_rhs_into_lhs): Same.\n+\t* tree-nrv.c (execute_return_slot_opt): Same.\n+\t* tree-ssa-alias.c (count_uses_and_derefs): Check for GIMPLE_STMT_P.\n+\t* tree-vn.c (set_value_handle): Same.\n+\t(get_value_handle): Same.\n+\t* c-decl.c (add_stmt): Use CAN_HAVE_LOCATION_P.\n+\t* tree-vectorizer.c (find_loop_location): Same.\n+\t* c-typeck.c (c_process_expr_stmt): Same.\n+\t(c_finish_stmt_expr): Same.\n+\t* gimplify.c (should_carry_locus_p): Same.\n+\t(tree_to_gimple_tuple): Delete definition and use of unecessary\n+\tvariable save_tree_block.\n+\t* tree-ssa-pre.c (phi_translate): Check for GIMPLE_STMT_P.\n+\t(create_expression_by_pieces): Use GIMPLE_STMT_OPERAND.\n+\t(realify_fake_stores): Same.\n+\t* tree-ssa-forwprop.c (forward_propagate_addr_into_variable_arr):\n+\tUse TREE_OPERAND.\n+\t* tree-inline.c (copy_body_r): Check for EXPR_P and GIMPLE_STMT_P.\n+\t(copy_tree_r): Check for IS_GIMPLE_STMT_CODE_CLASS.\n+\t* tree-cfg.c (move_stmt_r): Use EXPR_P.  Check for GIMPLE_STMT_P.\n+\t* c-parser.c (c_parser_typeof_specifier): Use CAN_HAVE_LOCATION_P.\n+\t(c_parser_statement_after_labels): Same.\n+\t(c_parser_paren_condition): Same.\n+\t(c_parser_for_statement): Same.\n+\t(c_parser_omp_for_loop): Same.\n+\t* tree-ssa-reassoc.c (linearize_expr): Use GIMPLE_STMT_OPERAND.\n+\t(linearize_expr_tree): Same.\n+\t* dwarf2out.c (reference_to_unused): Check for GIMPLE_STMT_P.\n+\t* function.c (instantiate_expr): Same.\n \n \t2006-09-22  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * tree.c (expr_location): Use GIMPLE_STMT_LOCUS.\n-        (set_expr_location): Same.\n-        (expr_locus): Same.\n-        (set_expr_locus): Same.\n-        (expr_filename): Same.\n-        (expr_lineno): Same.\n-        (tree_block): Use GIMPLE_STMT_BLOCK.\n-        (protected_tree_operand): Use GIMPLE_STMT_OPERAND.\n-        * tree.h (struct gimple_stmt): Remove prev and next.\n-        (GIMPLE_STMT_OPERAND_CHECK): New.\n-        (TREE_TO_GIMPLE_STMT): Delete.\n-        (GIMPLE_STMT_TO_TREE): Delete.\n-        (GIMPLE_STMT_OPERAND): Use union, not cast.\n-        (GIMPLE_STMT_LOCUS): New.\n-        (GIMPLE_STMT_BLOCK): New.\n-        * gimplify.c (tree_to_gimple_tuple): Use union.  Do not cast\n-        to tree_base.\n-        * tree-cfg.c (verify_gimple_tuples_1): Call gcc_unreachable.\n+\t* tree.c (expr_location): Use GIMPLE_STMT_LOCUS.\n+\t(set_expr_location): Same.\n+\t(expr_locus): Same.\n+\t(set_expr_locus): Same.\n+\t(expr_filename): Same.\n+\t(expr_lineno): Same.\n+\t(tree_block): Use GIMPLE_STMT_BLOCK.\n+\t(protected_tree_operand): Use GIMPLE_STMT_OPERAND.\n+\t* tree.h (struct gimple_stmt): Remove prev and next.\n+\t(GIMPLE_STMT_OPERAND_CHECK): New.\n+\t(TREE_TO_GIMPLE_STMT): Delete.\n+\t(GIMPLE_STMT_TO_TREE): Delete.\n+\t(GIMPLE_STMT_OPERAND): Use union, not cast.\n+\t(GIMPLE_STMT_LOCUS): New.\n+\t(GIMPLE_STMT_BLOCK): New.\n+\t* gimplify.c (tree_to_gimple_tuple): Use union.  Do not cast\n+\tto tree_base.\n+\t* tree-cfg.c (verify_gimple_tuples_1): Call gcc_unreachable.\n \n \t2006-09-21  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * tree-into-ssa.c (REGISTER_DEFS_IN_STMT): Change common.base\n-        to base.\n-        * tree-tailcall.c (adjust_return_value): Same.\n-        * tree.c (tree_code_size): Remove GIMPLE_STATEMENT_LIST case.\n-        (copy_node_stat): Change common.base to base.\n-        (tree_node_structure): Return TS_GIMPLE_STATEMENT for tcc_gimple_stmt.\n-        Remove GIMPLE_STATEMENT_LIST case.\n-        * tree.h (struct gimple_stmt): Make operands of type tree.\n-        (TREE_CODE, TREE_SET_CODE, TREE_ADDRESSABLE, CALL_EXPR_TAILCALL,\n-        CASE_LOW_SEEN, TREE_STATIC, CLEANUP_EH_ONLY, CASE_HIGH_SEEN,\n-        TREE_NO_WARNING, TREE_CONSTANT_OVERFLOW, TREE_SYMBOL_REFERENCED,\n-        TYPE_REF_CAN_ALIAS_ALL, TREE_OVERFLOW, TREE_PUBLIC,\n-        TYPE_CACHED_VALUES_P, TREE_SIDE_EFFECTS, FORCED_LABEL,\n-        TREE_THIS_VOLATILE, TREE_THIS_NOTRAP, TREE_READONLY,\n-        TREE_CONSTANT, TYPE_SIZES_GIMPLIFIED, DECL_UNSIGNED,\n-        BIT_FIELD_REF_UNSIGNED, TYPE_UNSIGNED, TREE_ASM_WRITTEN, TREE_USED,\n-        TREE_NOTHROW, CALL_EXPR_RETURN_SLOT_OPT, DECL_BY_REFERENCE,\n-        CALL_FROM_THUNK_P, TYPE_ALIGN_OK, TREE_PRIVATE, TREE_PROTECTED,\n-        TREE_DEPRECATED, IDENTIFIER_TRANSPARENT_ALIAS, TREE_INVARIANT,\n-        TREE_LANG_FLAG_*, SSA_NAME_OCCURS_IN_ABNORMAL_PHI,\n-        SSA_NAME_IN_FREE_LIST, TYPE_VOLATILE, TYPE_READONLY, BINFO_VIRTUAL_P):\n-        Change common.base to base.\n-        (GIMPLE_STATEMENT_LIST*): Remove.\n-        (union tree_node): Add base.  Remove gimple_statement_list.\n-        Remove pointer from gstmt.\n-        * tree-ssa-propagate.c (set_rhs): Change common.base to base.\n-        * treestruct.def: Add TS_BASE.  Remove TS_GIMPLE_STATEMENT_LIST.\n-        * tree-vn.c (vn_compute): Change common.base to base.\n-        * tree-eh.c (verify_eh_throw_stmt_node): Same.\n-        * tree-flow-inline.h (var_ann): Same.\n-        (function_ann): Same.\n-        (stmt_ann): Same.\n-        (mark_non_addressable): Same.\n-        * gimplify.c (tree_to_gimple_tuple): Same.\n-        * tree.def (DEFTREECODE): Remove GIMPLE_STATEMENT_LIST.\n-        * tree-dfa.c (create_var_ann): Change common.base to base.\n-        (create_function_ann): Same.\n-        (create_stmt_ann): Same.\n-        (create_tree_ann): Same.\n-        (collect_dfa_stats_r): Same.\n-        * tree-ssa-pre.c (NECESSARY): Change common.base to base.\n-        * tree-ssa-dce.c (NECESSARY): Same.\n-        * tree-ssa.c (delete_tree_ssa): Same.\n-        * tree-optimize.c (execute_free_cfg_annotations): Same.\n-        * tree-flow.h: Same.\n+\t* tree-into-ssa.c (REGISTER_DEFS_IN_STMT): Change common.base\n+\tto base.\n+\t* tree-tailcall.c (adjust_return_value): Same.\n+\t* tree.c (tree_code_size): Remove GIMPLE_STATEMENT_LIST case.\n+\t(copy_node_stat): Change common.base to base.\n+\t(tree_node_structure): Return TS_GIMPLE_STATEMENT for tcc_gimple_stmt.\n+\tRemove GIMPLE_STATEMENT_LIST case.\n+\t* tree.h (struct gimple_stmt): Make operands of type tree.\n+\t(TREE_CODE, TREE_SET_CODE, TREE_ADDRESSABLE, CALL_EXPR_TAILCALL,\n+\tCASE_LOW_SEEN, TREE_STATIC, CLEANUP_EH_ONLY, CASE_HIGH_SEEN,\n+\tTREE_NO_WARNING, TREE_CONSTANT_OVERFLOW, TREE_SYMBOL_REFERENCED,\n+\tTYPE_REF_CAN_ALIAS_ALL, TREE_OVERFLOW, TREE_PUBLIC,\n+\tTYPE_CACHED_VALUES_P, TREE_SIDE_EFFECTS, FORCED_LABEL,\n+\tTREE_THIS_VOLATILE, TREE_THIS_NOTRAP, TREE_READONLY,\n+\tTREE_CONSTANT, TYPE_SIZES_GIMPLIFIED, DECL_UNSIGNED,\n+\tBIT_FIELD_REF_UNSIGNED, TYPE_UNSIGNED, TREE_ASM_WRITTEN, TREE_USED,\n+\tTREE_NOTHROW, CALL_EXPR_RETURN_SLOT_OPT, DECL_BY_REFERENCE,\n+\tCALL_FROM_THUNK_P, TYPE_ALIGN_OK, TREE_PRIVATE, TREE_PROTECTED,\n+\tTREE_DEPRECATED, IDENTIFIER_TRANSPARENT_ALIAS, TREE_INVARIANT,\n+\tTREE_LANG_FLAG_*, SSA_NAME_OCCURS_IN_ABNORMAL_PHI,\n+\tSSA_NAME_IN_FREE_LIST, TYPE_VOLATILE, TYPE_READONLY, BINFO_VIRTUAL_P):\n+\tChange common.base to base.\n+\t(GIMPLE_STATEMENT_LIST*): Remove.\n+\t(union tree_node): Add base.  Remove gimple_statement_list.\n+\tRemove pointer from gstmt.\n+\t* tree-ssa-propagate.c (set_rhs): Change common.base to base.\n+\t* treestruct.def: Add TS_BASE.  Remove TS_GIMPLE_STATEMENT_LIST.\n+\t* tree-vn.c (vn_compute): Change common.base to base.\n+\t* tree-eh.c (verify_eh_throw_stmt_node): Same.\n+\t* tree-flow-inline.h (var_ann): Same.\n+\t(function_ann): Same.\n+\t(stmt_ann): Same.\n+\t(mark_non_addressable): Same.\n+\t* gimplify.c (tree_to_gimple_tuple): Same.\n+\t* tree.def (DEFTREECODE): Remove GIMPLE_STATEMENT_LIST.\n+\t* tree-dfa.c (create_var_ann): Change common.base to base.\n+\t(create_function_ann): Same.\n+\t(create_stmt_ann): Same.\n+\t(create_tree_ann): Same.\n+\t(collect_dfa_stats_r): Same.\n+\t* tree-ssa-pre.c (NECESSARY): Change common.base to base.\n+\t* tree-ssa-dce.c (NECESSARY): Same.\n+\t* tree-ssa.c (delete_tree_ssa): Same.\n+\t* tree-optimize.c (execute_free_cfg_annotations): Same.\n+\t* tree-flow.h: Same.\n \n \t2006-09-19  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * tree.c (tree_code_size): Handle GIMPLE_STATEMENT_LIST.\n-        (tree_node_structure): Handle GIMPLE_STATEMENT_LIST and\n+\t* tree.c (tree_code_size): Handle GIMPLE_STATEMENT_LIST.\n+\t(tree_node_structure): Handle GIMPLE_STATEMENT_LIST and\n \tGIMPLE_MODIFY_STMT.\n-        * tree.h (struct gimple_stmt): Add prev and next fields.\n+\t* tree.h (struct gimple_stmt): Add prev and next fields.\n \t(GIMPLE_STMT_TO_TREE): Cast, do not call GIMPLE_STMT_CHECK.\n \t(GIMPLE_STATEMENT_LIST_HEAD): New.\n \t(GIMPLE_STATEMENT_LIST_TAIL): New.\n \t(struct gimple_statement_list): New.\n \t(union tree_node): Add gimple_stmt_list and gstmt.\n-        * treestruct.def: Add TS_GIMPLE_STATEMENT_LIST, TS_GIMPLE_STATEMENT.\n-        * tree.def: Add GIMPLE_STATEMENT_LIST.\n+\t* treestruct.def: Add TS_GIMPLE_STATEMENT_LIST, TS_GIMPLE_STATEMENT.\n+\t* tree.def: Add GIMPLE_STATEMENT_LIST.\n \n \t2006-09-06  Aldy Hernandez  <aldyh@redhat.com>\n \n@@ -1227,7 +1227,7 @@\n \t(spu_force_reg): Remove.\n \n 2006-12-01  Joseph Myers  <joseph@codesourcery.com>\n-            David Edelsohn  <edelsohn@gnu.org>\n+\t    David Edelsohn  <edelsohn@gnu.org>\n \n \tPR target/24036\n \t* doc/tm.texi (HARD_REGNO_NREGS_HAS_PADDING,\n@@ -1319,8 +1319,8 @@\n \n \t* tree-vectorizer.h (vectorizable_function): Export.\n \t* tree-vect-transform.c (vectorizable_function): Likewise.\n-        * tree-vect-patterns.c (vect_recog_pow_pattern): Set\n-        type_in to scalar type in recognition of squaring.\n+\t* tree-vect-patterns.c (vect_recog_pow_pattern): Set\n+\ttype_in to scalar type in recognition of squaring.\n \tMake sure the target can vectorize sqrt in recognition\n \tof sqrt, set type_in to vector type in this case.\n "}]}