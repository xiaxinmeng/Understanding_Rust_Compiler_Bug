{"sha": "2e761e491932350e080453897ae449040a102897", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU3NjFlNDkxOTMyMzUwZTA4MDQ1Mzg5N2FlNDQ5MDQwYTEwMjg5Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-06-03T00:33:00Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-06-03T00:33:00Z"}, "message": "alias.c (lang_get_alias_set): Remove.\n\ngcc/\n\t* alias.c (lang_get_alias_set): Remove.\n\t(get_alias_set): Call it directly, not indirectly.\n\t* c-common.c (lang_get_alias_set): Rename from c_get_alias_set.\n\t* c-common.h (c_get_alias_set): Don't declare.\n\t* c-decl.c (init_decl_processing): Don't set lang_get_alias_set.\n\t* expr.h (lang_get_alias_set): Declare as function, not pointer.\n\ngcc/ch/\n\t* lang.c (lang_get_alias_set): New.\n\ngcc/cp/\n\t* decl.c (init_decl_processing): Don't set lang_get_alias_set.\n\ngcc/f/\n\t* com.c (lang_get_alias_set): New.\n\ngcc/java/\n\t* lang.c (lang_get_alias_set): New.\n\nFrom-SVN: r34368", "tree": {"sha": "bd27084a3b6068f80bd96842322bfbe8eb1a62db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd27084a3b6068f80bd96842322bfbe8eb1a62db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e761e491932350e080453897ae449040a102897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e761e491932350e080453897ae449040a102897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e761e491932350e080453897ae449040a102897", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e761e491932350e080453897ae449040a102897/comments", "author": null, "committer": null, "parents": [{"sha": "572240906d32202cb0c98e22445f251431d97811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/572240906d32202cb0c98e22445f251431d97811", "html_url": "https://github.com/Rust-GCC/gccrs/commit/572240906d32202cb0c98e22445f251431d97811"}], "stats": {"total": 86, "additions": 69, "deletions": 17}, "files": [{"sha": "3b27cead806cd474717cdfbbe1a4c0ec12567d0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e761e491932350e080453897ae449040a102897/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e761e491932350e080453897ae449040a102897/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e761e491932350e080453897ae449040a102897", "patch": "@@ -1,3 +1,12 @@\n+2000-06-02  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alias.c (lang_get_alias_set): Remove.\n+\t(get_alias_set): Call it directly, not indirectly.\n+\t* c-common.c (lang_get_alias_set): Rename from c_get_alias_set.\n+\t* c-common.h (c_get_alias_set): Don't declare.\n+\t* c-decl.c (init_decl_processing): Don't set lang_get_alias_set.\n+\t* expr.h (lang_get_alias_set): Declare as function, not pointer.\n+\t\n 2000-06-02  Bruce Korb  <bkorb@gnu.org>\n \n \t* fixinc/server.c(sig_handler):  resume closing server on SIGPIPE"}, {"sha": "d1804181bed6a3ce99f83baad76c21050eed34e1", "filename": "gcc/alias.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e761e491932350e080453897ae449040a102897/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e761e491932350e080453897ae449040a102897/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=2e761e491932350e080453897ae449040a102897", "patch": "@@ -81,10 +81,6 @@ typedef struct alias_set_entry\n   splay_tree children;\n } *alias_set_entry;\n \n-/* The language-specific function for alias analysis.  If NULL, the\n-   language does not do any special alias analysis.  */\n-HOST_WIDE_INT (*lang_get_alias_set) PARAMS ((tree));\n-\n static int rtx_equal_for_memref_p\tPARAMS ((rtx, rtx));\n static rtx find_symbolic_term\t\tPARAMS ((rtx));\n static rtx get_addr\t\t\tPARAMS ((rtx));\n@@ -369,8 +365,7 @@ get_alias_set (t)\n       /* Now give the language a chance to do something but record what we\n \t gave it this time.  */\n       orig_t = t;\n-      if (lang_get_alias_set != 0\n-\t  && (set = (*lang_get_alias_set) (t)) != -1)\n+      if ((set = lang_get_alias_set (t)) != -1)\n \treturn set;\n \n       /* If this is a reference, go inside it and use the underlying\n@@ -395,8 +390,8 @@ get_alias_set (t)\n \t}\n \n       /* Give the language another chance to do something special.  */\n-      if (orig_t != t && lang_get_alias_set != 0\n-\t  && (set = (*lang_get_alias_set) (t)) != -1)\n+      if (orig_t != t\n+\t  && (set = lang_get_alias_set (t)) != -1)\n \treturn set;\n \n       /* Now all we care about is the type.  */\n@@ -410,8 +405,7 @@ get_alias_set (t)\n     return TYPE_ALIAS_SET (t);\n \n   /* See if the language has special handling for this type.  */\n-  if (lang_get_alias_set != 0\n-      && (set = (*lang_get_alias_set) (t)) != -1)\n+  if ((set = lang_get_alias_set (t)) != -1)\n     ;\n   /* There are no objects of FUNCTION_TYPE, so there's no point in\n      using up an alias set for them.  (There are, of course, pointers"}, {"sha": "d9c50bd9e4f2b7b0674bfc4a91d5454a2111e7c7", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e761e491932350e080453897ae449040a102897/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e761e491932350e080453897ae449040a102897/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=2e761e491932350e080453897ae449040a102897", "patch": "@@ -3265,7 +3265,7 @@ c_apply_type_quals_to_decl (type_quals, decl)\n    or a type.  Return -1 if we don't do anything special.  */\n \n HOST_WIDE_INT\n-c_get_alias_set (t)\n+lang_get_alias_set (t)\n      tree t;\n {\n   tree u;"}, {"sha": "d0427241062ca43a72dcef889ba21ee2899d2c53", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e761e491932350e080453897ae449040a102897/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e761e491932350e080453897ae449040a102897/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=2e761e491932350e080453897ae449040a102897", "patch": "@@ -97,7 +97,6 @@ extern void decl_attributes\t\t\tPARAMS ((tree, tree, tree));\n extern void init_function_format_info\t\tPARAMS ((void));\n extern void check_function_format\t\tPARAMS ((tree, tree, tree));\n extern void c_apply_type_quals_to_decl\t\tPARAMS ((int, tree));\n-extern HOST_WIDE_INT c_get_alias_set\t\tPARAMS ((tree));\n /* Print an error message for invalid operands to arith operation CODE.\n    NOP_EXPR is used as a special case (see truthvalue_conversion).  */\n extern void binary_op_error\t\t\tPARAMS ((enum tree_code));"}, {"sha": "31494e67317602c0c17c3fb09df6f7c2a2fba361", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e761e491932350e080453897ae449040a102897/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e761e491932350e080453897ae449040a102897/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=2e761e491932350e080453897ae449040a102897", "patch": "@@ -2896,8 +2896,6 @@ init_decl_processing ()\n   tree array_domain_type;\n   tree t;\n \n-  lang_get_alias_set = c_get_alias_set;\n-\n   current_function_decl = NULL;\n   named_labels = NULL;\n   current_binding_level = NULL_BINDING_LEVEL;"}, {"sha": "3b346e1fccccedeced059bc1c2524bc0a8817ddc", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e761e491932350e080453897ae449040a102897/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e761e491932350e080453897ae449040a102897/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=2e761e491932350e080453897ae449040a102897", "patch": "@@ -1,3 +1,7 @@\n+2000-06-02  Richard Henderson  <rth@cygnus.com>\n+\n+\t* lang.c (lang_get_alias_set): New.\n+\n Sat May 27 11:24:26 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* lang.c (deep_const_expr): Use first_rtl_op."}, {"sha": "7b62c16b4f2e265daa7ec0b6566f36e4488af9d5", "filename": "gcc/ch/lang.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e761e491932350e080453897ae449040a102897/gcc%2Fch%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e761e491932350e080453897ae449040a102897/gcc%2Fch%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flang.c?ref=2e761e491932350e080453897ae449040a102897", "patch": "@@ -283,6 +283,19 @@ incomplete_type_error (value, type)\n   error (\"internal error - use of undefined type\");\n }\n \n+/* Return the typed-based alias set for T, which may be an expression\n+   or a type.  Return -1 if we don't do anything special.  */\n+\n+HOST_WIDE_INT\n+lang_get_alias_set (t)\n+     tree t;\n+{\n+  /* ??? Need to figure out what the rules are.  Certainly we'd need\n+     to handle union-like things, and probably variant records. \n+     Until then, turn off type-based aliasing completely.  */\n+  return 0;\n+}\n+\n void\n lang_init ()\n {"}, {"sha": "9a5c6c7a8f1e685ba61ab652d4e506d5e6f94670", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e761e491932350e080453897ae449040a102897/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e761e491932350e080453897ae449040a102897/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2e761e491932350e080453897ae449040a102897", "patch": "@@ -1,3 +1,7 @@\n+2000-06-02  Richard Henderson  <rth@cygnus.com>\n+\n+\t* decl.c (init_decl_processing): Don't set lang_get_alias_set.\n+\n 2000-06-02  Jason Merrill  <jason@casey.soma.redhat.com>\n \n \t* decl.c (store_return_init): Call put_var_into_stack."}, {"sha": "d5097f2e1349383a71e82f0a8b0acfe62f3eeff4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e761e491932350e080453897ae449040a102897/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e761e491932350e080453897ae449040a102897/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2e761e491932350e080453897ae449040a102897", "patch": "@@ -6252,8 +6252,6 @@ init_decl_processing ()\n   int wchar_type_size;\n   tree array_domain_type;\n \n-  lang_get_alias_set = c_get_alias_set;\n-\n   /* Check to see that the user did not specify an invalid combination\n      of command-line options.  */\n   if (flag_new_abi && !flag_vtable_thunks)"}, {"sha": "852b6c0efe629301f6fb485a83fc3e7463c7c25e", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e761e491932350e080453897ae449040a102897/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e761e491932350e080453897ae449040a102897/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=2e761e491932350e080453897ae449040a102897", "patch": "@@ -922,7 +922,7 @@ extern void record_alias_subset         PARAMS ((HOST_WIDE_INT,\n \t\t\t\t\t\t HOST_WIDE_INT));\n #ifdef TREE_CODE\n extern HOST_WIDE_INT get_alias_set\t\tPARAMS ((tree));\n-extern HOST_WIDE_INT (*lang_get_alias_set)\tPARAMS ((tree));\n+extern HOST_WIDE_INT lang_get_alias_set\t\tPARAMS ((tree));\n #endif\n extern HOST_WIDE_INT new_alias_set\t\tPARAMS ((void));\n \f"}, {"sha": "a37deecc884d8ba33efc111420c3d72e87243cb3", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e761e491932350e080453897ae449040a102897/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e761e491932350e080453897ae449040a102897/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=2e761e491932350e080453897ae449040a102897", "patch": "@@ -1,3 +1,7 @@\n+2000-06-02  Richard Henderson  <rth@cygnus.com>\n+\n+\t* com.c (lang_get_alias_set): New.\n+\n 2000-05-28  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \t* bugs.texi: Note that debugging information for"}, {"sha": "5f08ef0bb6fb6daa6cd8f60946f2eb49a967eba1", "filename": "gcc/f/com.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e761e491932350e080453897ae449040a102897/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e761e491932350e080453897ae449040a102897/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=2e761e491932350e080453897ae449040a102897", "patch": "@@ -14870,6 +14870,21 @@ lang_identify ()\n   return \"f77\";\n }\n \n+/* Return the typed-based alias set for T, which may be an expression\n+   or a type.  Return -1 if we don't do anything special.  */\n+\n+HOST_WIDE_INT\n+lang_get_alias_set (t)\n+     tree t;\n+{\n+  /* We do not wish to use alias-set based aliasing at all.  Used in the\n+     extreme (every object with its own set, with equivalences recorded)\n+     it might be helpful, but there are problems when it comes to inlining.\n+     We get on ok with flag_argument_noalias, and alias-set aliasing does\n+     currently limit how stack slots can be reused, which is a lose.  */\n+  return 0;\n+}\n+\n void\n lang_init_options ()\n {"}, {"sha": "aefe16da3b2ec93b128ac77c0a5d669b596f5f70", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e761e491932350e080453897ae449040a102897/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e761e491932350e080453897ae449040a102897/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=2e761e491932350e080453897ae449040a102897", "patch": "@@ -1,3 +1,7 @@\n+2000-06-02  Richard Henderson  <rth@cygnus.com>\n+\n+\t* lang.c (lang_get_alias_set): New.\n+\n 2000-05-31  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* parse.y (resolve_field_access): Complete the DECL_INITIAL tree"}, {"sha": "765a3be7a5a068ece3e193c93da2df1810efa09f", "filename": "gcc/java/lang.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e761e491932350e080453897ae449040a102897/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e761e491932350e080453897ae449040a102897/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=2e761e491932350e080453897ae449040a102897", "patch": "@@ -646,3 +646,13 @@ lang_print_xnode (file, node, indent)\n      int indent __attribute ((__unused__));\n {\n }\n+\n+/* Return the typed-based alias set for T, which may be an expression\n+   or a type.  Return -1 if we don't do anything special.  */\n+\n+HOST_WIDE_INT\n+lang_get_alias_set (t)\n+     tree t;\n+{\n+  return -1;\n+}"}]}