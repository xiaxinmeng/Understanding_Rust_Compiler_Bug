{"sha": "8ff2a92a0450243e52d3299a13b30f208bafa7e0", "node_id": "C_kwDOANBUbNoAKDhmZjJhOTJhMDQ1MDI0M2U1MmQzMjk5YTEzYjMwZjIwOGJhZmE3ZTA", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-14T13:59:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-15T12:16:25Z"}, "message": "Move void_list_node init to common code\n\nAll frontends replicate this, so move it.\n\ngcc/\n\t* tree.cc (build_common_tree_nodes): Initialize void_list_node\n\there.\n\ngcc/ada/\n\t* gcc-interface/trans.cc (gigi): Do not initialize void_list_node.\n\ngcc/c-family/\n\t* c-common.h (build_void_list_node): Remove.\n\t* c-common.cc (c_common_nodes_and_builtins): Do not initialize\n\tvoid_list_node.\n\ngcc/c/\n\t* c-decl.cc (build_void_list_node): Remove.\n\ngcc/cp/\n\t* decl.cc (cxx_init_decl_processing): Inline last\n\tbuild_void_list_node call.\n\t(build_void_list_node): Remove.\n\ngcc/d/\n\t* d-builtins.cc (d_build_c_type_nodes): Do not initialize\n\tvoid_list_node.\n\ngcc/fortran/\n\t* f95-lang.cc (gfc_init_decl_processing): Do not initialize\n\tvoid_list_node.\n\ngcc/go/\n\t* go-lang.cc (go_langhook_init): Do not initialize\n\tvoid_list_node.\n\ngcc/jit/\n\t* dummy-frontend.cc (jit_langhook_init): Do not initialize\n\tvoid_list_node.\n\ngcc/lto/\n\t* lto-lang.cc (lto_build_c_type_nodes): Do not initialize\n\tvoid_list_node.", "tree": {"sha": "87720f77ed71647fb88fa102343e30c1eea649ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87720f77ed71647fb88fa102343e30c1eea649ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ff2a92a0450243e52d3299a13b30f208bafa7e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ff2a92a0450243e52d3299a13b30f208bafa7e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ff2a92a0450243e52d3299a13b30f208bafa7e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ff2a92a0450243e52d3299a13b30f208bafa7e0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3220adc444b00d6fd6e8775565222f65fd37138", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3220adc444b00d6fd6e8775565222f65fd37138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3220adc444b00d6fd6e8775565222f65fd37138"}], "stats": {"total": 34, "additions": 3, "deletions": 31}, "files": [{"sha": "2d93947cb2649ea9778a4cea9c16dbf6f187d48c", "filename": "gcc/ada/gcc-interface/trans.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff2a92a0450243e52d3299a13b30f208bafa7e0/gcc%2Fada%2Fgcc-interface%2Ftrans.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff2a92a0450243e52d3299a13b30f208bafa7e0/gcc%2Fada%2Fgcc-interface%2Ftrans.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.cc?ref=8ff2a92a0450243e52d3299a13b30f208bafa7e0", "patch": "@@ -413,7 +413,6 @@ gigi (Node_Id gnat_root,\n   save_gnu_tree (gnat_literal, t, false);\n \n   /* Declare the building blocks of function nodes.  */\n-  void_list_node = build_tree_list (NULL_TREE, void_type_node);\n   void_ftype = build_function_type_list (void_type_node, NULL_TREE);\n   ptr_void_ftype = build_pointer_type (void_ftype);\n "}, {"sha": "c0f15f4cab1918bc7894af4bd54b7d23910ef737", "filename": "gcc/c-family/c-common.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff2a92a0450243e52d3299a13b30f208bafa7e0/gcc%2Fc-family%2Fc-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff2a92a0450243e52d3299a13b30f208bafa7e0/gcc%2Fc-family%2Fc-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.cc?ref=8ff2a92a0450243e52d3299a13b30f208bafa7e0", "patch": "@@ -4505,8 +4505,6 @@ c_common_nodes_and_builtins (void)\n     TYPE_NAME (void_type_node) = void_name;\n   }\n \n-  void_list_node = build_void_list_node ();\n-\n   /* Make a type to be the domain of a few array types\n      whose domains don't really matter.\n      200 is small enough that it always fits in size_t"}, {"sha": "2f592f5cd58afb27a6f07bc466da282afef4b797", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff2a92a0450243e52d3299a13b30f208bafa7e0/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff2a92a0450243e52d3299a13b30f208bafa7e0/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=8ff2a92a0450243e52d3299a13b30f208bafa7e0", "patch": "@@ -853,7 +853,6 @@ extern tree identifier_global_tag (tree);\n extern bool names_builtin_p (const char *);\n extern tree c_linkage_bindings (tree);\n extern void record_builtin_type (enum rid, const char *, tree);\n-extern tree build_void_list_node (void);\n extern void start_fname_decls (void);\n extern void finish_fname_decls (void);\n extern const char *fname_as_string (int);"}, {"sha": "b09c6393b91049fd99b296123e969aa280326c7d", "filename": "gcc/c/c-decl.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff2a92a0450243e52d3299a13b30f208bafa7e0/gcc%2Fc%2Fc-decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff2a92a0450243e52d3299a13b30f208bafa7e0/gcc%2Fc%2Fc-decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.cc?ref=8ff2a92a0450243e52d3299a13b30f208bafa7e0", "patch": "@@ -10676,14 +10676,6 @@ record_builtin_type (enum rid rid_index, const char *name, tree type)\n     debug_hooks->type_decl (decl, false);\n }\n \n-/* Build the void_list_node (void_type_node having been created).  */\n-tree\n-build_void_list_node (void)\n-{\n-  tree t = build_tree_list (NULL_TREE, void_type_node);\n-  return t;\n-}\n-\n /* Return a c_parm structure with the given SPECS, ATTRS and DECLARATOR.  */\n \n struct c_parm *"}, {"sha": "070f673c3a285a04628108e4c9fda44ba00ca46c", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff2a92a0450243e52d3299a13b30f208bafa7e0/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff2a92a0450243e52d3299a13b30f208bafa7e0/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=8ff2a92a0450243e52d3299a13b30f208bafa7e0", "patch": "@@ -4623,7 +4623,7 @@ cxx_init_decl_processing (void)\n   record_unknown_type (init_list_type_node, \"init list\");\n \n   /* Used when parsing to distinguish parameter-lists () and (void).  */\n-  explicit_void_list_node = build_void_list_node ();\n+  explicit_void_list_node = build_tree_list (NULL_TREE, void_type_node);\n \n   {\n     /* Make sure we get a unique function type, so we can give\n@@ -18450,14 +18450,6 @@ cp_tree_node_structure (union lang_tree_node * t)\n     }\n }\n \n-/* Build the void_list_node (void_type_node having been created).  */\n-tree\n-build_void_list_node (void)\n-{\n-  tree t = build_tree_list (NULL_TREE, void_type_node);\n-  return t;\n-}\n-\n bool\n cp_missing_noreturn_ok_p (tree decl)\n {"}, {"sha": "5997e5dcaf4cfeef06530a13f8aa5242e4056695", "filename": "gcc/d/d-builtins.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff2a92a0450243e52d3299a13b30f208bafa7e0/gcc%2Fd%2Fd-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff2a92a0450243e52d3299a13b30f208bafa7e0/gcc%2Fd%2Fd-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-builtins.cc?ref=8ff2a92a0450243e52d3299a13b30f208bafa7e0", "patch": "@@ -889,7 +889,6 @@ static GTY(()) tree signed_size_type_node;\n static void\n d_build_c_type_nodes (void)\n {\n-  void_list_node = build_tree_list (NULL_TREE, void_type_node);\n   string_type_node = build_pointer_type (char_type_node);\n   const_string_type_node\n     = build_pointer_type (build_qualified_type (char_type_node,"}, {"sha": "a6750bea787c65fcf98216b5f36910bd7c9bc44a", "filename": "gcc/fortran/f95-lang.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff2a92a0450243e52d3299a13b30f208bafa7e0/gcc%2Ffortran%2Ff95-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff2a92a0450243e52d3299a13b30f208bafa7e0/gcc%2Ffortran%2Ff95-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.cc?ref=8ff2a92a0450243e52d3299a13b30f208bafa7e0", "patch": "@@ -530,8 +530,6 @@ gfc_init_decl_processing (void)\n      only use it for actual characters, not for INTEGER(1).  */\n   build_common_tree_nodes (false);\n \n-  void_list_node = build_tree_list (NULL_TREE, void_type_node);\n-\n   /* Set up F95 type nodes.  */\n   gfc_init_kinds ();\n   gfc_init_types ();"}, {"sha": "4743370ff66ad70b08f9386652c17faf994b9b9e", "filename": "gcc/go/go-lang.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff2a92a0450243e52d3299a13b30f208bafa7e0/gcc%2Fgo%2Fgo-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff2a92a0450243e52d3299a13b30f208bafa7e0/gcc%2Fgo%2Fgo-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-lang.cc?ref=8ff2a92a0450243e52d3299a13b30f208bafa7e0", "patch": "@@ -98,9 +98,6 @@ go_langhook_init (void)\n {\n   build_common_tree_nodes (false);\n \n-  /* I don't know why this has to be done explicitly.  */\n-  void_list_node = build_tree_list (NULL_TREE, void_type_node);\n-\n   /* We must create the gogo IR after calling build_common_tree_nodes\n      (because Gogo::define_builtin_function_trees refers indirectly\n      to, e.g., unsigned_char_type_node) but before calling"}, {"sha": "0687567bc883d14d7b13b3720798f350119030dd", "filename": "gcc/jit/dummy-frontend.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff2a92a0450243e52d3299a13b30f208bafa7e0/gcc%2Fjit%2Fdummy-frontend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff2a92a0450243e52d3299a13b30f208bafa7e0/gcc%2Fjit%2Fdummy-frontend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdummy-frontend.cc?ref=8ff2a92a0450243e52d3299a13b30f208bafa7e0", "patch": "@@ -594,9 +594,6 @@ jit_langhook_init (void)\n \n   build_common_tree_nodes (false);\n \n-  /* I don't know why this has to be done explicitly.  */\n-  void_list_node = build_tree_list (NULL_TREE, void_type_node);\n-\n   build_common_builtin_nodes ();\n \n   /* The default precision for floating point numbers.  This is used"}, {"sha": "d36453ba25dfc77080e0df1c521b80e9807eab9b", "filename": "gcc/lto/lto-lang.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff2a92a0450243e52d3299a13b30f208bafa7e0/gcc%2Flto%2Flto-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff2a92a0450243e52d3299a13b30f208bafa7e0/gcc%2Flto%2Flto-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.cc?ref=8ff2a92a0450243e52d3299a13b30f208bafa7e0", "patch": "@@ -1239,7 +1239,6 @@ lto_build_c_type_nodes (void)\n {\n   gcc_assert (void_type_node);\n \n-  void_list_node = build_tree_list (NULL_TREE, void_type_node);\n   string_type_node = build_pointer_type (char_type_node);\n   const_string_type_node\n     = build_pointer_type (build_qualified_type (char_type_node, TYPE_QUAL_CONST));"}, {"sha": "4165cbd7c3bbc2ffd4507d67a0d4a7ef3b9ae63b", "filename": "gcc/tree.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff2a92a0450243e52d3299a13b30f208bafa7e0/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff2a92a0450243e52d3299a13b30f208bafa7e0/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=8ff2a92a0450243e52d3299a13b30f208bafa7e0", "patch": "@@ -9414,6 +9414,8 @@ build_common_tree_nodes (bool signed_char)\n   void_node = make_node (VOID_CST);\n   TREE_TYPE (void_node) = void_type_node;\n \n+  void_list_node = build_tree_list (NULL_TREE, void_type_node);\n+\n   null_pointer_node = build_int_cst (build_pointer_type (void_type_node), 0);\n   layout_type (TREE_TYPE (null_pointer_node));\n "}]}