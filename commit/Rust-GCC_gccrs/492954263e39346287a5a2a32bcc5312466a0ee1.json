{"sha": "492954263e39346287a5a2a32bcc5312466a0ee1", "node_id": "C_kwDOANBUbNoAKDQ5Mjk1NDI2M2UzOTM0NjI4N2E1YTJhMzJiY2M1MzEyNDY2YTBlZTE", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2022-01-02T10:36:23Z"}, "committer": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gmail.com", "date": "2022-01-10T11:28:46Z"}, "message": "Fortran: Allow IEEE_CLASS to identify signaling NaNs\n\nWe use the issignaling macro, present in some libc's (notably glibc),\nwhen it is available. Compile all IEEE-related files in the library\n(both C and Fortran sources) with -fsignaling-nans to ensure maximum\ncompatibility.\n\nlibgfortran/ChangeLog:\n\n\tPR fortran/82207\n\t* Makefile.am: Pass -fsignaling-nans for IEEE files.\n\t* Makefile.in: Regenerate.\n\t* ieee/ieee_helper.c: Use issignaling macro to recognized\n\tsignaling NaNs.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/82207\n\t* gfortran.dg/ieee/signaling_1.f90: New test.\n\t* gfortran.dg/ieee/signaling_1_c.c: New file.", "tree": {"sha": "839dd37ee7e5d1ef72ae09a908ddb9bf55035282", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/839dd37ee7e5d1ef72ae09a908ddb9bf55035282"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/492954263e39346287a5a2a32bcc5312466a0ee1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/492954263e39346287a5a2a32bcc5312466a0ee1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/492954263e39346287a5a2a32bcc5312466a0ee1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/492954263e39346287a5a2a32bcc5312466a0ee1/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be59671c5624fe8bf21ddb0192e97ebdfa4db381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be59671c5624fe8bf21ddb0192e97ebdfa4db381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be59671c5624fe8bf21ddb0192e97ebdfa4db381"}], "stats": {"total": 132, "additions": 128, "deletions": 4}, "files": [{"sha": "a1403e6ce1649ca695bc641b55dc42df74d9b426", "filename": "gcc/testsuite/gfortran.dg/ieee/signaling_1.f90", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/492954263e39346287a5a2a32bcc5312466a0ee1/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fsignaling_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/492954263e39346287a5a2a32bcc5312466a0ee1/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fsignaling_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fsignaling_1.f90?ref=492954263e39346287a5a2a32bcc5312466a0ee1", "patch": "@@ -0,0 +1,89 @@\n+! { dg-do run }\n+! { dg-require-effective-target issignaling } */\n+! { dg-additional-sources signaling_1_c.c }\n+! { dg-options \"-fsignaling-nans\" }\n+!\n+program test\n+  use, intrinsic :: iso_c_binding\n+  use, intrinsic :: ieee_arithmetic\n+  implicit none\n+\n+  interface\n+    real(kind=c_float) function create_nansf () bind(c)\n+      import :: c_float\n+    end function\n+\n+    real(kind=c_double) function create_nans () bind(c)\n+      import :: c_double\n+    end function\n+\n+    real(kind=c_long_double) function create_nansl () bind(c)\n+      import :: c_long_double\n+    end function\n+  end interface\n+\n+  real(kind=c_float) :: x\n+  real(kind=c_double) :: y\n+  real(kind=c_long_double) :: z\n+\n+  if (ieee_support_nan(x)) then\n+    x = create_nansf()\n+    if (ieee_class(x) /= ieee_signaling_nan) stop 100\n+    if (.not. ieee_is_nan(x)) stop 101\n+    if (ieee_is_negative(x)) stop 102\n+    if (ieee_is_finite(x)) stop 103\n+    if (ieee_is_normal(x)) stop 104\n+    if (.not. ieee_unordered(x, x)) stop 105\n+    if (.not. ieee_unordered(x, 1._c_float)) stop 106\n+\n+    x = ieee_value(y, ieee_quiet_nan)\n+    if (ieee_class(x) /= ieee_quiet_nan) stop 107\n+    if (.not. ieee_is_nan(x)) stop 108\n+    if (ieee_is_negative(x)) stop 109\n+    if (ieee_is_finite(x)) stop 110\n+    if (ieee_is_normal(x)) stop 111\n+    if (.not. ieee_unordered(x, x)) stop 112\n+    if (.not. ieee_unordered(x, 1._c_double)) stop 113\n+  end if\n+\n+  if (ieee_support_nan(y)) then\n+    y = create_nans()\n+    if (ieee_class(y) /= ieee_signaling_nan) stop 200\n+    if (.not. ieee_is_nan(y)) stop 201\n+    if (ieee_is_negative(y)) stop 202\n+    if (ieee_is_finite(y)) stop 203\n+    if (ieee_is_normal(y)) stop 204\n+    if (.not. ieee_unordered(y, x)) stop 205\n+    if (.not. ieee_unordered(y, 1._c_double)) stop 206\n+\n+    y = ieee_value(y, ieee_quiet_nan)\n+    if (ieee_class(y) /= ieee_quiet_nan) stop 207\n+    if (.not. ieee_is_nan(y)) stop 208\n+    if (ieee_is_negative(y)) stop 209\n+    if (ieee_is_finite(y)) stop 210\n+    if (ieee_is_normal(y)) stop 211\n+    if (.not. ieee_unordered(y, y)) stop 212\n+    if (.not. ieee_unordered(y, 1._c_double)) stop 213\n+  end if\n+\n+  if (ieee_support_nan(z)) then\n+    z = create_nansl()\n+    if (ieee_class(z) /= ieee_signaling_nan) stop 300\n+    if (.not. ieee_is_nan(z)) stop 301\n+    if (ieee_is_negative(z)) stop 302\n+    if (ieee_is_finite(z)) stop 303\n+    if (ieee_is_normal(z)) stop 304\n+    if (.not. ieee_unordered(z, z)) stop 305\n+    if (.not. ieee_unordered(z, 1._c_long_double)) stop 306\n+\n+    z = ieee_value(y, ieee_quiet_nan)\n+    if (ieee_class(z) /= ieee_quiet_nan) stop 307\n+    if (.not. ieee_is_nan(z)) stop 308\n+    if (ieee_is_negative(z)) stop 309\n+    if (ieee_is_finite(z)) stop 310\n+    if (ieee_is_normal(z)) stop 311\n+    if (.not. ieee_unordered(z, z)) stop 312\n+    if (.not. ieee_unordered(z, 1._c_double)) stop 313\n+  end if\n+\n+end program test"}, {"sha": "ab19bb7eae7297aeb828731e766cb0ff2462890b", "filename": "gcc/testsuite/gfortran.dg/ieee/signaling_1_c.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/492954263e39346287a5a2a32bcc5312466a0ee1/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fsignaling_1_c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/492954263e39346287a5a2a32bcc5312466a0ee1/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fsignaling_1_c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fsignaling_1_c.c?ref=492954263e39346287a5a2a32bcc5312466a0ee1", "patch": "@@ -0,0 +1,14 @@\n+float create_nansf (void)\n+{\n+  return __builtin_nansf(\"\");\n+}\n+\n+double create_nans (void)\n+{\n+  return __builtin_nans(\"\");\n+}\n+\n+long double create_nansl (void)\n+{\n+  return __builtin_nansl(\"\");\n+}"}, {"sha": "b7ef912a440d23dcda59d71c74c6e8b5ce385649", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/492954263e39346287a5a2a32bcc5312466a0ee1/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/492954263e39346287a5a2a32bcc5312466a0ee1/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=492954263e39346287a5a2a32bcc5312466a0ee1", "patch": "@@ -185,6 +185,8 @@ endif\n \n if IEEE_SUPPORT\n \n+gfor_ieee_helper_src=ieee/ieee_helper.c\n+\n gfor_helper_src+=ieee/ieee_helper.c\n \n gfor_ieee_src= \\\n@@ -991,9 +993,13 @@ selected_real_kind.lo selected_int_kind.lo: AM_FCFLAGS += -fallow-leading-unders\n \n if IEEE_SUPPORT\n # Add flags for IEEE modules\n-$(patsubst %.F90,%.lo,$(notdir $(gfor_ieee_src))): AM_FCFLAGS += -Wno-unused-dummy-argument -Wno-c-binding-type -ffree-line-length-0 -fallow-leading-underscore\n+$(patsubst %.F90,%.lo,$(notdir $(gfor_ieee_src))): AM_FCFLAGS += -Wno-unused-dummy-argument -Wno-c-binding-type -ffree-line-length-0 -fallow-leading-underscore -fsignaling-nans\n+\n+# Add flags for IEEE helper code\n+$(patsubst %.c,%.lo,$(notdir $(gfor_ieee_helper_src))): AM_CFLAGS += -fsignaling-nans\n endif\n \n+\n # Dependencies between IEEE_ARITHMETIC and IEEE_EXCEPTIONS\n ieee_arithmetic.lo: ieee/ieee_arithmetic.F90 ieee_exceptions.lo\n \t$(LTPPFCCOMPILE) -c -o $@ $<"}, {"sha": "3684b2aaa75e0be4d3c61edf4fa7f9f3054fc79c", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/492954263e39346287a5a2a32bcc5312466a0ee1/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/492954263e39346287a5a2a32bcc5312466a0ee1/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=492954263e39346287a5a2a32bcc5312466a0ee1", "patch": "@@ -779,6 +779,7 @@ gfor_helper_src = intrinsics/associated.c intrinsics/abort.c \\\n \tintrinsics/selected_real_kind.f90 intrinsics/trigd.c \\\n \tintrinsics/unpack_generic.c runtime/in_pack_generic.c \\\n \truntime/in_unpack_generic.c $(am__append_3) $(am__append_4)\n+@IEEE_SUPPORT_TRUE@gfor_ieee_helper_src = ieee/ieee_helper.c\n @IEEE_SUPPORT_FALSE@gfor_ieee_src = \n @IEEE_SUPPORT_TRUE@gfor_ieee_src = \\\n @IEEE_SUPPORT_TRUE@ieee/ieee_arithmetic.F90 \\\n@@ -6999,7 +7000,10 @@ $(patsubst %.F90,%.lo,$(patsubst %.f90,%.lo,$(notdir $(gfor_specific_src)))): AM\n selected_real_kind.lo selected_int_kind.lo: AM_FCFLAGS += -fallow-leading-underscore\n \n # Add flags for IEEE modules\n-@IEEE_SUPPORT_TRUE@$(patsubst %.F90,%.lo,$(notdir $(gfor_ieee_src))): AM_FCFLAGS += -Wno-unused-dummy-argument -Wno-c-binding-type -ffree-line-length-0 -fallow-leading-underscore\n+@IEEE_SUPPORT_TRUE@$(patsubst %.F90,%.lo,$(notdir $(gfor_ieee_src))): AM_FCFLAGS += -Wno-unused-dummy-argument -Wno-c-binding-type -ffree-line-length-0 -fallow-leading-underscore -fsignaling-nans\n+\n+# Add flags for IEEE helper code\n+@IEEE_SUPPORT_TRUE@$(patsubst %.c,%.lo,$(notdir $(gfor_ieee_helper_src))): AM_CFLAGS += -fsignaling-nans\n \n # Dependencies between IEEE_ARITHMETIC and IEEE_EXCEPTIONS\n ieee_arithmetic.lo: ieee/ieee_arithmetic.F90 ieee_exceptions.lo"}, {"sha": "7a103df58f0448754443ad6b807b10a025826613", "filename": "libgfortran/ieee/ieee_helper.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/492954263e39346287a5a2a32bcc5312466a0ee1/libgfortran%2Fieee%2Fieee_helper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/492954263e39346287a5a2a32bcc5312466a0ee1/libgfortran%2Fieee%2Fieee_helper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fieee%2Fieee_helper.c?ref=492954263e39346287a5a2a32bcc5312466a0ee1", "patch": "@@ -25,6 +25,15 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include \"libgfortran.h\"\n \n+\n+/* Check support for issignaling macro.\n+   TODO: In the future, provide fallback implementations for IEEE types,\n+   because many libc's do not have issignaling yet.  */\n+#ifndef issignaling\n+# define issignaling(X) 0\n+#endif\n+\n+\n /* Prototypes.  */\n \n extern int ieee_class_helper_4 (GFC_REAL_4 *);\n@@ -86,8 +95,10 @@ enum {\n  \\\n     if (res == IEEE_QUIET_NAN) \\\n     { \\\n-      /* TODO: Handle signaling NaNs  */ \\\n-      return res; \\\n+      if (issignaling (*value)) \\\n+\treturn IEEE_SIGNALING_NAN; \\\n+      else \\\n+\treturn IEEE_QUIET_NAN; \\\n     } \\\n  \\\n     return res; \\"}]}