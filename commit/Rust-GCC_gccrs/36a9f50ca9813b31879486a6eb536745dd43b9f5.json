{"sha": "36a9f50ca9813b31879486a6eb536745dd43b9f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZhOWY1MGNhOTgxM2IzMTg3OTQ4NmE2ZWI1MzY3NDVkZDQzYjlmNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-03-05T13:18:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-03-05T13:18:12Z"}, "message": "re PR tree-optimization/84670 (ICE: in compute_antic_aux, at tree-ssa-pre.c:2148 with -O2 -fno-tree-dominator-opts)\n\n2018-03-05  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/84670\n\t* tree-ssa-pre.c (struct bb_bitmap_sets): Add visited_with_visited_succs\n\tmember.\n\t(BB_VISITED_WITH_VISITED_SUCCS): New define.\n\t(compute_antic): Initialize BB_VISITED_WITH_VISITED_SUCCS.\n\t(compute_antic_aux): Only assert the number of values in ANTIC_IN\n\tdoesn't grow if all successors (recursively) were visited at least\n\tonce.\n\n\t* gcc.dg/pr84670-1.c: New testcase.\n\t* gcc.dg/pr84670-2.c: Likewise.\n\t* gcc.dg/pr84670-3.c: Likewise.\n\t* gcc.dg/pr84670-4.c: Likewise.\n\nFrom-SVN: r258243", "tree": {"sha": "a4fc4acdc05dc147b9ade90007f6507b8f2cc0ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4fc4acdc05dc147b9ade90007f6507b8f2cc0ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36a9f50ca9813b31879486a6eb536745dd43b9f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36a9f50ca9813b31879486a6eb536745dd43b9f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36a9f50ca9813b31879486a6eb536745dd43b9f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36a9f50ca9813b31879486a6eb536745dd43b9f5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "144a822fec6d680b2847f2bd35a6d6ebefd2d885", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144a822fec6d680b2847f2bd35a6d6ebefd2d885", "html_url": "https://github.com/Rust-GCC/gccrs/commit/144a822fec6d680b2847f2bd35a6d6ebefd2d885"}], "stats": {"total": 140, "additions": 139, "deletions": 1}, "files": [{"sha": "6129f96009bfffbb1d2fec1767053cabf2b1e5f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a9f50ca9813b31879486a6eb536745dd43b9f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a9f50ca9813b31879486a6eb536745dd43b9f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36a9f50ca9813b31879486a6eb536745dd43b9f5", "patch": "@@ -1,3 +1,14 @@\n+2018-03-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/84670\n+\t* tree-ssa-pre.c (struct bb_bitmap_sets): Add visited_with_visited_succs\n+\tmember.\n+\t(BB_VISITED_WITH_VISITED_SUCCS): New define.\n+\t(compute_antic): Initialize BB_VISITED_WITH_VISITED_SUCCS.\n+\t(compute_antic_aux): Only assert the number of values in ANTIC_IN\n+\tdoesn't grow if all successors (recursively) were visited at least\n+\tonce.\n+\n 2018-03-05  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/84650"}, {"sha": "97ae0197d7001cd132b83e0c3d26d1530093a77d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a9f50ca9813b31879486a6eb536745dd43b9f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a9f50ca9813b31879486a6eb536745dd43b9f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36a9f50ca9813b31879486a6eb536745dd43b9f5", "patch": "@@ -1,3 +1,11 @@\n+2018-03-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/84670\n+\t* gcc.dg/pr84670-1.c: New testcase.\n+\t* gcc.dg/pr84670-2.c: Likewise.\n+\t* gcc.dg/pr84670-3.c: Likewise.\n+\t* gcc.dg/pr84670-4.c: Likewise.\n+\n 2018-03-05  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/84650"}, {"sha": "c1ad474aa47105d780fe192cae16c5f26c2832d3", "filename": "gcc/testsuite/gcc.dg/pr84670-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a9f50ca9813b31879486a6eb536745dd43b9f5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84670-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a9f50ca9813b31879486a6eb536745dd43b9f5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84670-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84670-1.c?ref=36a9f50ca9813b31879486a6eb536745dd43b9f5", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -fno-tree-dominator-opts\" } */\n+\n+int a, b, c, d;\n+\n+int\n+foo (void)\n+{\n+  __int128 i;\n+l:\n+  i -= c;\n+  if (b)\n+    goto l;\n+  __builtin_mul_overflow (0, a, &c);\n+  if (d)\n+    goto l;\n+  return i;\n+}"}, {"sha": "80fb3685491f07217f9d8af69ee1023518a07e4f", "filename": "gcc/testsuite/gcc.dg/pr84670-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a9f50ca9813b31879486a6eb536745dd43b9f5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84670-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a9f50ca9813b31879486a6eb536745dd43b9f5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84670-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84670-2.c?ref=36a9f50ca9813b31879486a6eb536745dd43b9f5", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast\" } */\n+\n+enum b\n+{\n+  c,\n+  d\n+};\n+struct e\n+{\n+  enum b code;\n+};\n+struct f\n+{\n+  unsigned g;\n+};\n+int h, i;\n+struct a\n+{\n+  struct e common;\n+  struct f j;\n+};\n+\n+struct a k (void)\n+{\n+  struct a *l;\n+  do\n+    if (l->common.code == d && l->j.g * 4)\n+      ;\n+    else\n+      i = l->j.g | (l->common.code && l);\n+  while (h && l->common.code == c);\n+}"}, {"sha": "b60a94a837e49492e105e4aee3af14d4c05d8ffe", "filename": "gcc/testsuite/gcc.dg/pr84670-3.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a9f50ca9813b31879486a6eb536745dd43b9f5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84670-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a9f50ca9813b31879486a6eb536745dd43b9f5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84670-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84670-3.c?ref=36a9f50ca9813b31879486a6eb536745dd43b9f5", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -fno-strict-overflow\" } */\n+\n+typedef unsigned char u8;\n+typedef unsigned short u16;\n+typedef unsigned int u32;\n+typedef u16 acpi_rs_length;\n+typedef u32 acpi_rsdesc_size;\n+struct acpi_resource_source\n+{\n+  u16 string_length;\n+  char *string_ptr;\n+};\n+static u16\n+acpi_rs_strcpy (char *destination, char *source)\n+{\n+  u16 i;\n+  for (i = 0; source[i]; i++)\n+    {\n+    }\n+  return ((u16) (i + 1));\n+}\n+union aml_resource;\n+acpi_rs_length\n+acpi_rs_get_resource_source (acpi_rs_length resource_length,\n+\t\t\t     acpi_rs_length minimum_length,\n+\t\t\t     struct acpi_resource_source * resource_source,\n+\t\t\t     union aml_resource * aml, char *string_ptr)\n+{\n+  acpi_rsdesc_size total_length;\n+  u8 *aml_resource_source;\n+  if (total_length > (acpi_rsdesc_size) (minimum_length + 1))\n+    {\n+      resource_source->string_length =\n+\tacpi_rs_strcpy (resource_source->string_ptr,\n+\t\t\t((char *) (void *) (&aml_resource_source[1])));\n+    }\n+}"}, {"sha": "00bd13add5d290fceb5a51f898f8f888adb0a2ab", "filename": "gcc/testsuite/gcc.dg/pr84670-4.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a9f50ca9813b31879486a6eb536745dd43b9f5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84670-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a9f50ca9813b31879486a6eb536745dd43b9f5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84670-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84670-4.c?ref=36a9f50ca9813b31879486a6eb536745dd43b9f5", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fwrapv\" } */\n+\n+char *a;\n+int b(void)\n+{\n+  long d;\n+  if (a) {\n+      char c;\n+      while ((c = *a) && !((unsigned)c - '0' <= 9) && c != ',' && c != '-'\n+\t     && c != '+')\n+\t++a;\n+      d = (long)a;\n+  }\n+  if (*a)\n+    return d;\n+}"}, {"sha": "fa3daf4137d1455018ada5d67f04ef3ffcdc5c08", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a9f50ca9813b31879486a6eb536745dd43b9f5/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a9f50ca9813b31879486a6eb536745dd43b9f5/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=36a9f50ca9813b31879486a6eb536745dd43b9f5", "patch": "@@ -484,6 +484,10 @@ typedef struct bb_bitmap_sets\n   /* True if we have visited this block during ANTIC calculation.  */\n   unsigned int visited : 1;\n \n+  /* True if we have visited this block after all successors have been\n+     visited this way.  */\n+  unsigned int visited_with_visited_succs : 1;\n+\n   /* True when the block contains a call that might not return.  */\n   unsigned int contains_may_not_return_call : 1;\n } *bb_value_sets_t;\n@@ -497,6 +501,8 @@ typedef struct bb_bitmap_sets\n #define NEW_SETS(BB)\t((bb_value_sets_t) ((BB)->aux))->new_sets\n #define EXPR_DIES(BB)\t((bb_value_sets_t) ((BB)->aux))->expr_dies\n #define BB_VISITED(BB)\t((bb_value_sets_t) ((BB)->aux))->visited\n+#define BB_VISITED_WITH_VISITED_SUCCS(BB) \\\n+    ((bb_value_sets_t) ((BB)->aux))->visited_with_visited_succs\n #define BB_MAY_NOTRETURN(BB) ((bb_value_sets_t) ((BB)->aux))->contains_may_not_return_call\n #define BB_LIVE_VOP_ON_EXIT(BB) ((bb_value_sets_t) ((BB)->aux))->vop_on_exit\n \n@@ -2032,6 +2038,8 @@ compute_antic_aux (basic_block block, bool block_has_abnormal_pred_edge)\n     {\n       e = single_succ_edge (block);\n       gcc_assert (BB_VISITED (e->dest));\n+      BB_VISITED_WITH_VISITED_SUCCS (block)\n+\t= BB_VISITED_WITH_VISITED_SUCCS (e->dest);\n       phi_translate_set (ANTIC_OUT, ANTIC_IN (e->dest), e);\n     }\n   /* If we have multiple successors, we take the intersection of all of\n@@ -2042,6 +2050,7 @@ compute_antic_aux (basic_block block, bool block_has_abnormal_pred_edge)\n       size_t i;\n       edge first = NULL;\n \n+      BB_VISITED_WITH_VISITED_SUCCS (block) = true;\n       auto_vec<edge> worklist (EDGE_COUNT (block->succs));\n       FOR_EACH_EDGE (e, ei, block->succs)\n \t{\n@@ -2060,6 +2069,8 @@ compute_antic_aux (basic_block block, bool block_has_abnormal_pred_edge)\n \t\tfprintf (dump_file, \"ANTIC_IN is MAX on %d->%d\\n\",\n \t\t\t e->src->index, e->dest->index);\n \t    }\n+\t  BB_VISITED_WITH_VISITED_SUCCS (block)\n+\t    &= BB_VISITED_WITH_VISITED_SUCCS (e->dest);\n \t}\n \n       /* Of multiple successors we have to have visited one already\n@@ -2139,7 +2150,7 @@ compute_antic_aux (basic_block block, bool block_has_abnormal_pred_edge)\n       changed = true;\n       /* After the initial value set computation the value set may\n          only shrink during the iteration.  */\n-      if (was_visited && flag_checking)\n+      if (was_visited && BB_VISITED_WITH_VISITED_SUCCS (block) && flag_checking)\n \t{\n \t  bitmap_iterator bi;\n \t  unsigned int i;\n@@ -2318,6 +2329,7 @@ compute_antic (void)\n   FOR_ALL_BB_FN (block, cfun)\n     {\n       BB_VISITED (block) = 0;\n+      BB_VISITED_WITH_VISITED_SUCCS (block) = 0;\n \n       FOR_EACH_EDGE (e, ei, block->preds)\n \tif (e->flags & EDGE_ABNORMAL)\n@@ -2334,6 +2346,7 @@ compute_antic (void)\n \n   /* At the exit block we anticipate nothing.  */\n   BB_VISITED (EXIT_BLOCK_PTR_FOR_FN (cfun)) = 1;\n+  BB_VISITED_WITH_VISITED_SUCCS (EXIT_BLOCK_PTR_FOR_FN (cfun)) = 1;\n \n   /* For ANTIC computation we need a postorder that also guarantees that\n      a block with a single successor is visited after its successor."}]}