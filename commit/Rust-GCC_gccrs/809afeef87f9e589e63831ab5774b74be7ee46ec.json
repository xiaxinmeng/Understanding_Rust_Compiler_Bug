{"sha": "809afeef87f9e589e63831ab5774b74be7ee46ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA5YWZlZWY4N2Y5ZTU4OWU2MzgzMWFiNTc3NGI3NGJlN2VlNDZlYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-02-10T15:17:20Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-02-10T15:17:20Z"}, "message": "alpha.md (cmov compound patterns): Delete.\n\n        * alpha.md (cmov compound patterns): Delete.  Jump can now\n        create the correct constructs in the first place.\n\nFrom-SVN: r25138", "tree": {"sha": "6642af7ec07afcea0d1092456fea04aec685f356", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6642af7ec07afcea0d1092456fea04aec685f356"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/809afeef87f9e589e63831ab5774b74be7ee46ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/809afeef87f9e589e63831ab5774b74be7ee46ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/809afeef87f9e589e63831ab5774b74be7ee46ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/809afeef87f9e589e63831ab5774b74be7ee46ec/comments", "author": null, "committer": null, "parents": [{"sha": "fa2bb9fd4e5c9261675d0d6198901b94bdb14101", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa2bb9fd4e5c9261675d0d6198901b94bdb14101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa2bb9fd4e5c9261675d0d6198901b94bdb14101"}], "stats": {"total": 68, "additions": 5, "deletions": 63}, "files": [{"sha": "6fd861ea6979eb8c61f73f7a5bc559ac94cc87a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809afeef87f9e589e63831ab5774b74be7ee46ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809afeef87f9e589e63831ab5774b74be7ee46ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=809afeef87f9e589e63831ab5774b74be7ee46ec", "patch": "@@ -1,3 +1,8 @@\n+Wed Feb 10 15:16:39 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.md (cmov compound patterns): Delete.  Jump can now\n+\tcreate the correct constructs in the first place.\n+\n Wed Feb 10 11:03:22 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* configure.in (alphaev6*): Fix typo in target_cpu_default2."}, {"sha": "6bab614a6155829cc44ebc88381319ce636db4b6", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809afeef87f9e589e63831ab5774b74be7ee46ec/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809afeef87f9e589e63831ab5774b74be7ee46ec/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=809afeef87f9e589e63831ab5774b74be7ee46ec", "patch": "@@ -2373,69 +2373,6 @@\n    cmovlbc %r2,%3,%0\"\n   [(set_attr \"type\" \"icmov\")])\n \n-;; This form is added since combine thinks that an IF_THEN_ELSE with both\n-;; arms constant is a single insn, so it won't try to form it if combine\n-;; knows they are really two insns.  This occurs in divides by powers\n-;; of two.\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(if_then_else:DI\n-\t (match_operator 2 \"signed_comparison_operator\"\n-\t\t\t [(match_operand:DI 3 \"reg_or_0_operand\" \"rJ\")\n-\t\t\t  (const_int 0)])\n-\t (plus:DI (match_dup 0)\n-\t\t  (match_operand:DI 1 \"reg_or_8bit_operand\" \"rI\"))\n-\t (match_dup 0)))\n-   (clobber (match_scratch:DI 4 \"=&r\"))]\n-  \"\"\n-  \"addq %0,%1,%4\\;cmov%C2 %r3,%4,%0\"\n-  [(set_attr \"type\" \"icmov\")\n-   (set_attr \"length\" \"8\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(if_then_else:DI\n-\t (match_operator 2 \"signed_comparison_operator\"\n-\t\t\t [(match_operand:DI 3 \"reg_or_0_operand\" \"\")\n-\t\t\t  (const_int 0)])\n-\t (plus:DI (match_dup 0)\n-\t\t  (match_operand:DI 1 \"reg_or_8bit_operand\" \"\"))\n-\t (match_dup 0)))\n-   (clobber (match_operand:DI 4 \"register_operand\" \"\"))]\n-  \"\"\n-  [(set (match_dup 4) (plus:DI (match_dup 0) (match_dup 1)))\n-   (set (match_dup 0) (if_then_else:DI (match_op_dup 2\n-\t\t\t\t\t\t     [(match_dup 3)\n-\t\t\t\t\t\t      (const_int 0)])\n-\t\t\t\t       (match_dup 4) (match_dup 0)))]\n-  \"\")\n-\n-(define_split\n-  [(parallel\n-    [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t  (if_then_else:DI\n-\t   (match_operator 1 \"comparison_operator\"\n-\t\t\t   [(zero_extract:DI (match_operand:DI 2 \"register_operand\" \"\")\n-\t\t\t\t\t     (const_int 1)\n-\t\t\t\t\t     (match_operand:DI 3 \"const_int_operand\" \"\"))\n-\t\t\t    (const_int 0)])\n-\t   (match_operand:DI 4 \"reg_or_8bit_operand\" \"\")\n-\t   (match_operand:DI 5 \"reg_or_8bit_operand\" \"\")))\n-     (clobber (match_operand:DI 6 \"register_operand\" \"\"))])]\n-  \"INTVAL (operands[3]) != 0\"\n-  [(set (match_dup 6)\n-\t(lshiftrt:DI (match_dup 2) (match_dup 3)))\n-   (set (match_dup 0)\n-\t(if_then_else:DI (match_op_dup 1\n-\t\t\t\t       [(zero_extract:DI (match_dup 6)\n-\t\t\t\t\t\t\t (const_int 1)\n-\t\t\t\t\t\t\t (const_int 0))\n-\t\t\t\t\t(const_int 0)])\n-\t\t\t (match_dup 4)\n-\t\t\t (match_dup 5)))]\n-  \"\")\n-\n ;; For ABS, we have two choices, depending on whether the input and output\n ;; registers are the same or not.\n (define_expand \"absdi2\""}]}