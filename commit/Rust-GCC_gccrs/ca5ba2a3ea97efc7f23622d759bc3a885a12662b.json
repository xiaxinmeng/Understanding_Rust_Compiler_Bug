{"sha": "ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E1YmEyYTNlYTk3ZWZjN2YyMzYyMmQ3NTliYzNhODg1YTEyNjYyYg==", "commit": {"author": {"name": "Rafael Avila de Espindola", "email": "espindola@google.com", "date": "2007-05-14T14:37:17Z"}, "committer": {"name": "Rafael Espindola", "email": "espindola@gcc.gnu.org", "date": "2007-05-14T14:37:17Z"}, "message": "c-common.c (warnings_for_convert_and_check): Use unsigned_type_for instead of c_common_unsigned_type.\n\ngcc/\n       * c-common.c (warnings_for_convert_and_check): Use unsigned_type_for\n       instead of c_common_unsigned_type.\n       (c_common_unsigned_type): Remove.\n       (shorten_compare): Use c_common_signed_or_unsigned_type instead of\n       c_common_unsigned_type.\n       (c_common_nodes_and_builtins): Use unsigned_type_for instead of\n       c_common_unsigned_type.\n       * c-common.h (c_common_unsigned_type): Remove.\n       * c-decl.c (grokdeclarator): Use unsigned_type_for instead of\n       c_common_unsigned_type.\n       * c-format.c (check_format_types): Use unsigned_type_for instead of\n       c_common_unsigned_type.\n       * c-objc-common.h (LANG_HOOKS_UNSIGNED_TYPE): Remove.\n       * c-typeck.c (convert_for_assignment): Use unsigned_type_for instead of\n       c_common_unsigned_type.\n       * convert.c (convert_to_integer): Use unsigned_type_for instead of\n       lang_hooks.types.unsigned_type.\n       * expmed.c (make_tree): Use unsigned_type_for instead of\n       lang_hooks.types.unsigned_type.\n       * fold-const.c (fold_negate_expr): Use unsigned_type_for instead of\n       lang_hooks.types.unsigned_type.\n       (build_range_check): Likewise.\n       (fold_unary): Likewise.\n       (fold_binary): Likewise.\n       (fold_ternary): Likewise.\n       * langhooks-def.h (LANG_HOOKS_UNSIGNED_TYPE): Remove.\n       * langhooks.h (lang_hooks_for_types): Remove unsigned_type.\n       * tree.c (get_unsigned_type): New.\n       (unsigned_type_for): Use get_unsigned_type instead of\n       lang_hooks.types.unsigned_type\n\ngcc/ada\n       * misc.c (LANG_HOOKS_UNSIGNED_TYPE): Remove.\n\ngcc/cp\n       * cp-objcp-common.h (LANG_HOOKS_UNSIGNED_TYPE): Remove.\n       * decl.c (grokdeclarator): Use unsigned_type_for instead of\n       c_common_unsigned_type.\n\ngcc/fortran\n       * f95-lang.c (LANG_HOOKS_UNSIGNED_TYPE): Remove.\n       * trans-intrinsic.c (gfc_conv_intrinsic_ishft): Use unsigned_type_for\n       instead of gfc_unsigned_type.\n       * trans-stmt.c (gfc_trans_do): Use unsigned_type_for instead of\n       gfc_unsigned_type.\n       * trans-types.c (gfc_unsigned_type): Remove.\n       * trans-types.h (gfc_unsigned_type): Remove.\n\ngcc/java\n       * expr.c (build_java_binop): Use unsigned_type_for instead of\n       java_unsigned_type.\n       * java-tree.h (java_unsigned_type): Remove.\n       * lang.c (LANG_HOOKS_UNSIGNED_TYPE): Remove.\n       * typeck.c (java_unsigned_type): Remove.\n\ngcc/treelang\n       * treetree.c (tree_lang_unsigned_type): Remove.\n       (LANG_HOOKS_UNSIGNED_TYPE): Remove.\n\nFrom-SVN: r124715", "tree": {"sha": "a28ec44b83ed223ca40fabdb746511c19bbbc130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a28ec44b83ed223ca40fabdb746511c19bbbc130"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/comments", "author": null, "committer": null, "parents": [{"sha": "a4242737202af64a394f5271c06b8be1979cbcfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4242737202af64a394f5271c06b8be1979cbcfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4242737202af64a394f5271c06b8be1979cbcfb"}], "stats": {"total": 203, "additions": 100, "deletions": 103}, "files": [{"sha": "37ba76e1de18f10a524debb13799cc3c3cd8786d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -1,3 +1,36 @@\n+2007-05-14  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* c-common.c (warnings_for_convert_and_check): Use unsigned_type_for\n+\tinstead of c_common_unsigned_type.\n+\t(c_common_unsigned_type): Remove.\n+\t(shorten_compare): Use c_common_signed_or_unsigned_type instead of\n+\tc_common_unsigned_type.\n+\t(c_common_nodes_and_builtins): Use unsigned_type_for instead of\n+\tc_common_unsigned_type.\n+\t* c-common.h (c_common_unsigned_type): Remove.\n+\t* c-decl.c (grokdeclarator): Use unsigned_type_for instead of\n+\tc_common_unsigned_type.\n+\t* c-format.c (check_format_types): Use unsigned_type_for instead of\n+\tc_common_unsigned_type.\n+\t* c-objc-common.h (LANG_HOOKS_UNSIGNED_TYPE): Remove.\n+\t* c-typeck.c (convert_for_assignment): Use unsigned_type_for instead of\n+\tc_common_unsigned_type.\n+\t* convert.c (convert_to_integer): Use unsigned_type_for instead of\n+\tlang_hooks.types.unsigned_type.\n+\t* expmed.c (make_tree): Use unsigned_type_for instead of\n+\tlang_hooks.types.unsigned_type.\n+\t* fold-const.c (fold_negate_expr): Use unsigned_type_for instead of\n+\tlang_hooks.types.unsigned_type.\n+\t(build_range_check): Likewise.\n+\t(fold_unary): Likewise.\n+\t(fold_binary): Likewise.\n+\t(fold_ternary): Likewise.\n+\t* langhooks-def.h (LANG_HOOKS_UNSIGNED_TYPE): Remove.\n+\t* langhooks.h (lang_hooks_for_types): Remove unsigned_type.\n+\t* tree.c (get_unsigned_type): New.\n+\t(unsigned_type_for): Use get_unsigned_type instead of\n+\tlang_hooks.types.unsigned_type.\n+\n 2007-05-14  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* config/m68k/m68k-protos.h: Rename m68k_interrupt_function_p"}, {"sha": "fc5337d6de978664510c30dac9635a175399cfae", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -1,3 +1,7 @@\n+2007-05-14  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* misc.c (LANG_HOOKS_UNSIGNED_TYPE): Remove.\n+\n 2007-05-02  Pascal Obry  <obry@adacore.com>\n \n \t* gnatchop.adb (Write_Source_Reference_Pragma): Change implementation"}, {"sha": "db39179ad325af0e51fa4cab0b40f95a11f61d72", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -159,8 +159,6 @@ static tree gnat_type_max_size\t\t(tree);\n #define LANG_HOOKS_TYPE_FOR_SIZE\tgnat_type_for_size\n #undef  LANG_HOOKS_SIGNED_TYPE\n #define LANG_HOOKS_SIGNED_TYPE\t\tgnat_signed_type\n-#undef  LANG_HOOKS_UNSIGNED_TYPE\n-#define LANG_HOOKS_UNSIGNED_TYPE\tgnat_unsigned_type\n #undef  LANG_HOOKS_ATTRIBUTE_TABLE\n #define LANG_HOOKS_ATTRIBUTE_TABLE\tgnat_internal_attribute_table\n #undef  LANG_HOOKS_BUILTIN_FUNCTION"}, {"sha": "d132be9f25f63c800eb12b3c35984585b63b8861", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 37, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -1330,7 +1330,7 @@ warnings_for_convert_and_check (tree type, tree expr, tree result)\n           else if (warn_conversion)\n             conversion_warning (type, expr);\n         }\n-      else if (!int_fits_type_p (expr, c_common_unsigned_type (type))) \n+      else if (!int_fits_type_p (expr, unsigned_type_for (type))) \n \twarning (OPT_Woverflow,\n \t\t \"overflow in implicit constant conversion\");\n       /* No warning for converting 0x80000000 to int.  */\n@@ -2025,39 +2025,6 @@ c_common_type_for_mode (enum machine_mode mode, int unsignedp)\n   return 0;\n }\n \n-/* Return an unsigned type the same as TYPE in other respects.  */\n-tree\n-c_common_unsigned_type (tree type)\n-{\n-  tree type1 = TYPE_MAIN_VARIANT (type);\n-  if (type1 == signed_char_type_node || type1 == char_type_node)\n-    return unsigned_char_type_node;\n-  if (type1 == integer_type_node)\n-    return unsigned_type_node;\n-  if (type1 == short_integer_type_node)\n-    return short_unsigned_type_node;\n-  if (type1 == long_integer_type_node)\n-    return long_unsigned_type_node;\n-  if (type1 == long_long_integer_type_node)\n-    return long_long_unsigned_type_node;\n-  if (type1 == widest_integer_literal_type_node)\n-    return widest_unsigned_literal_type_node;\n-#if HOST_BITS_PER_WIDE_INT >= 64\n-  if (type1 == intTI_type_node)\n-    return unsigned_intTI_type_node;\n-#endif\n-  if (type1 == intDI_type_node)\n-    return unsigned_intDI_type_node;\n-  if (type1 == intSI_type_node)\n-    return unsigned_intSI_type_node;\n-  if (type1 == intHI_type_node)\n-    return unsigned_intHI_type_node;\n-  if (type1 == intQI_type_node)\n-    return unsigned_intQI_type_node;\n-\n-  return c_common_signed_or_unsigned_type (1, type);\n-}\n-\n /* Return a signed type the same as TYPE in other respects.  */\n \n tree\n@@ -2500,7 +2467,8 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n \t      default:\n \t\tbreak;\n \t      }\n-\t  type = c_common_unsigned_type (type);\n+\t  /* unsigned_type_for doesn't support C bit fields */\n+\t  type = c_common_signed_or_unsigned_type (1, type);\n \t}\n \n       if (TREE_CODE (primop0) != INTEGER_CST)\n@@ -3667,7 +3635,7 @@ c_common_nodes_and_builtins (void)\n   else\n     {\n       signed_wchar_type_node = c_common_signed_type (wchar_type_node);\n-      unsigned_wchar_type_node = c_common_unsigned_type (wchar_type_node);\n+      unsigned_wchar_type_node = unsigned_type_for (wchar_type_node);\n     }\n \n   /* This is for wide string constants.  */\n@@ -3685,7 +3653,7 @@ c_common_nodes_and_builtins (void)\n   default_function_type = build_function_type (integer_type_node, NULL_TREE);\n   ptrdiff_type_node\n     = TREE_TYPE (identifier_global_value (get_identifier (PTRDIFF_TYPE)));\n-  unsigned_ptrdiff_type_node = c_common_unsigned_type (ptrdiff_type_node);\n+  unsigned_ptrdiff_type_node = unsigned_type_for (ptrdiff_type_node);\n \n   lang_hooks.decls.pushdecl\n     (build_decl (TYPE_DECL, get_identifier (\"__builtin_va_list\"),"}, {"sha": "71a958db93abd6c15eca3e276964f5035a174ba4", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -667,7 +667,6 @@ extern int c_common_handle_option (size_t code, const char *arg, int value);\n extern bool c_common_missing_argument (const char *opt, size_t code);\n extern tree c_common_type_for_mode (enum machine_mode, int);\n extern tree c_common_type_for_size (unsigned int, int);\n-extern tree c_common_unsigned_type (tree);\n extern tree c_common_signed_type (tree);\n extern tree c_common_signed_or_unsigned_type (int, tree);\n extern tree c_build_bitfield_integer_type (unsigned HOST_WIDE_INT, int);"}, {"sha": "db8412cc010feb97a205b94fc4b32959151ec631", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -4086,7 +4086,7 @@ grokdeclarator (const struct c_declarator *declarator,\n      \"signed\".  */\n   if (bitfield && !flag_signed_bitfields && !declspecs->explicit_signed_p\n       && TREE_CODE (type) == INTEGER_TYPE)\n-    type = c_common_unsigned_type (type);\n+    type = unsigned_type_for (type);\n \n   /* Figure out the type qualifiers for the declaration.  There are\n      two ways a declaration can become qualified.  One is something"}, {"sha": "92e4ee61b0c1feb26d4f808d83a968162ac4f51d", "filename": "gcc/c-format.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -2249,7 +2249,7 @@ check_format_types (format_wanted_type *types, const char *format_start,\n \t  && TREE_CODE (cur_type) == INTEGER_TYPE\n \t  && (!pedantic || i == 0 || (i == 1 && char_type_flag))\n \t  && (TYPE_UNSIGNED (wanted_type)\n-\t      ? wanted_type == c_common_unsigned_type (cur_type)\n+\t      ? wanted_type == unsigned_type_for (cur_type)\n \t      : wanted_type == c_common_signed_type (cur_type)))\n \tcontinue;\n       /* Likewise, \"signed char\", \"unsigned char\" and \"char\" are"}, {"sha": "9b923b54375df7a9740e2dfb1e0291f192313668", "filename": "gcc/c-objc-common.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.h?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -104,8 +104,6 @@ extern void c_initialize_diagnostics (diagnostic_context *);\n #define LANG_HOOKS_TYPE_FOR_SIZE c_common_type_for_size\n #undef LANG_HOOKS_SIGNED_TYPE\n #define LANG_HOOKS_SIGNED_TYPE c_common_signed_type\n-#undef LANG_HOOKS_UNSIGNED_TYPE\n-#define LANG_HOOKS_UNSIGNED_TYPE c_common_unsigned_type\n #undef LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE\n #define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE c_common_signed_or_unsigned_type\n #undef LANG_HOOKS_INCOMPLETE_TYPE_ERROR"}, {"sha": "fc42389782c4e3c41c65d96e5386557ccf19c413", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -4095,8 +4095,8 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n       if (VOID_TYPE_P (ttl) || VOID_TYPE_P (ttr)\n \t  || (target_cmp = comp_target_types (type, rhstype))\n \t  || is_opaque_pointer\n-\t  || (c_common_unsigned_type (mvl)\n-\t      == c_common_unsigned_type (mvr)))\n+\t  || (unsigned_type_for (mvl)\n+\t      == unsigned_type_for (mvr)))\n \t{\n \t  if (pedantic\n \t      && ((VOID_TYPE_P (ttl) && TREE_CODE (ttr) == FUNCTION_TYPE)"}, {"sha": "1cfb05cfd3e6747dda45b7e043a6e99664a512a8", "filename": "gcc/convert.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -656,7 +656,7 @@ convert_to_integer (tree type, tree expr)\n \t\t\t     || !TYPE_OVERFLOW_WRAPS (TREE_TYPE (arg1)))\n \t\t\t    && (ex_form == PLUS_EXPR\n \t\t\t\t|| ex_form == MINUS_EXPR)))\n-\t\t      typex = lang_hooks.types.unsigned_type (typex);\n+\t\t      typex = unsigned_type_for (typex);\n \t\t    else\n \t\t      typex = lang_hooks.types.signed_type (typex);\n \t\t    return convert (type,\n@@ -678,7 +678,7 @@ convert_to_integer (tree type, tree expr)\n \t    /* Don't do unsigned arithmetic where signed was wanted,\n \t       or vice versa.  */\n \t    if (TYPE_UNSIGNED (TREE_TYPE (expr)))\n-\t      typex = lang_hooks.types.unsigned_type (type);\n+\t      typex = unsigned_type_for (type);\n \t    else\n \t      typex = lang_hooks.types.signed_type (type);\n \t    return convert (type,"}, {"sha": "286a19bc9f51f146265b1f57502af36258ab0262", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -1,3 +1,9 @@\n+2007-05-14  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* cp-objcp-common.h (LANG_HOOKS_UNSIGNED_TYPE): Remove.\n+\t* decl.c (grokdeclarator): Use unsigned_type_for instead of\n+\tc_common_unsigned_type.\n+\n 2007-05-11  Silvius Rus  <rus@google.com>\n \n \t* cp/typeck.c (build_indirect_ref): Add call to"}, {"sha": "6f17276b547cfae038a2a164615293280488adf7", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -136,8 +136,6 @@ extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n #define LANG_HOOKS_TYPE_FOR_SIZE c_common_type_for_size\n #undef LANG_HOOKS_SIGNED_TYPE\n #define LANG_HOOKS_SIGNED_TYPE c_common_signed_type\n-#undef LANG_HOOKS_UNSIGNED_TYPE\n-#define LANG_HOOKS_UNSIGNED_TYPE c_common_unsigned_type\n #undef LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE\n #define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE c_common_signed_or_unsigned_type\n #undef LANG_HOOKS_INCOMPLETE_TYPE_ERROR"}, {"sha": "9b62658b2e06ee3f0a7494e154317e02b1259196", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -7376,7 +7376,7 @@ grokdeclarator (const cp_declarator *declarator,\n       else if (type == char_type_node)\n \ttype = unsigned_char_type_node;\n       else if (typedef_decl)\n-\ttype = c_common_unsigned_type (type);\n+\ttype = unsigned_type_for (type);\n       else\n \ttype = unsigned_type_node;\n     }"}, {"sha": "c1fdc31c97b90f0419186cb6cb613aef34d8d6e5", "filename": "gcc/expmed.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -5044,7 +5044,7 @@ make_tree (tree type, rtx x)\n \t\t\t  make_tree (type, XEXP (x, 1)));\n \n     case LSHIFTRT:\n-      t = lang_hooks.types.unsigned_type (type);\n+      t = unsigned_type_for (type);\n       return fold_convert (type, build2 (RSHIFT_EXPR, t,\n \t\t\t    \t\t make_tree (t, XEXP (x, 0)),\n \t\t\t\t    \t make_tree (type, XEXP (x, 1))));\n@@ -5065,7 +5065,7 @@ make_tree (tree type, rtx x)\n \t\t\t\t    \t make_tree (t, XEXP (x, 0)),\n \t\t\t\t    \t make_tree (t, XEXP (x, 1))));\n     case UDIV:\n-      t = lang_hooks.types.unsigned_type (type);\n+      t = unsigned_type_for (type);\n       return fold_convert (type, build2 (TRUNC_DIV_EXPR, t,\n \t\t\t\t    \t make_tree (t, XEXP (x, 0)),\n \t\t\t\t    \t make_tree (t, XEXP (x, 1))));"}, {"sha": "c4c6edce9f77e6348893562fdd3d3f6e701f1c9c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -1411,7 +1411,7 @@ fold_negate_expr (tree t)\n \t    {\n \t      tree ntype = TYPE_UNSIGNED (type)\n \t\t\t   ? lang_hooks.types.signed_type (type)\n-\t\t\t   : lang_hooks.types.unsigned_type (type);\n+\t\t\t   : unsigned_type_for (type);\n \t      tree temp = fold_convert (ntype, TREE_OPERAND (t, 0));\n \t      temp = fold_build2 (RSHIFT_EXPR, ntype, temp, op1);\n \t      return fold_convert (type, temp);\n@@ -4352,7 +4352,7 @@ build_range_check (tree type, tree exp, int in_p, tree low, tree high)\n     {\n       if (! TYPE_UNSIGNED (etype))\n \t{\n-\t  etype = lang_hooks.types.unsigned_type (etype);\n+\t  etype = unsigned_type_for (etype);\n \t  high = fold_convert (etype, high);\n \t  exp = fold_convert (etype, exp);\n \t}\n@@ -4420,7 +4420,7 @@ build_range_check (tree type, tree exp, int in_p, tree low, tree high)\n \n       /* Check if (unsigned) INT_MAX + 1 == (unsigned) INT_MIN\n \t for the type in question, as we rely on this here.  */\n-      utype = lang_hooks.types.unsigned_type (etype);\n+      utype = unsigned_type_for (etype);\n       maxv = fold_convert (utype, TYPE_MAX_VALUE (etype));\n       maxv = range_binop (PLUS_EXPR, NULL_TREE, maxv, 1,\n \t\t\t  integer_one_node, 1);\n@@ -7798,7 +7798,7 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t\t  && (LOAD_EXTEND_OP (TYPE_MODE (TREE_TYPE (and0)))\n \t\t      == ZERO_EXTEND))\n \t\t{\n-\t\t  tree uns = lang_hooks.types.unsigned_type (TREE_TYPE (and0));\n+\t\t  tree uns = unsigned_type_for (TREE_TYPE (and0));\n \t\t  and0 = fold_convert (uns, and0);\n \t\t  and1 = fold_convert (uns, and1);\n \t\t}\n@@ -11220,7 +11220,7 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t      || TREE_CODE (arg0) == ROUND_MOD_EXPR)\n \t  && integer_pow2p (TREE_OPERAND (arg0, 1)))\n \t{\n-\t  tree newtype = lang_hooks.types.unsigned_type (TREE_TYPE (arg0));\n+\t  tree newtype = unsigned_type_for (TREE_TYPE (arg0));\n \t  tree newmod = fold_build2 (TREE_CODE (arg0), newtype,\n \t\t\t\t     fold_convert (newtype,\n \t\t\t\t\t\t   TREE_OPERAND (arg0, 0)),\n@@ -12329,7 +12329,7 @@ fold_ternary (enum tree_code code, tree type, tree op0, tree op1, tree op2)\n \t      else if ((TREE_INT_CST_HIGH (arg1) & mask_hi) == 0\n \t\t       && (TREE_INT_CST_LOW (arg1) & mask_lo) == 0)\n \t\t{\n-\t\t  tem_type = lang_hooks.types.unsigned_type (TREE_TYPE (tem));\n+\t\t  tem_type = unsigned_type_for (TREE_TYPE (tem));\n \t\t  tem = fold_convert (tem_type, tem);\n \t\t}\n \t      else"}, {"sha": "f94b3c35ec0f8843e14ecab8d40b0df980b0c2f3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -1,3 +1,13 @@\n+2007-05-14  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* f95-lang.c (LANG_HOOKS_UNSIGNED_TYPE): Remove.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_ishft): Use unsigned_type_for\n+\tinstead of gfc_unsigned_type.\n+\t* trans-stmt.c (gfc_trans_do): Use unsigned_type_for instead of\n+\tgfc_unsigned_type.\n+\t* trans-types.c (gfc_unsigned_type): Remove.\n+\t* trans-types.h (gfc_unsigned_type): Remove.\n+\n 2007-05-12  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/30746"}, {"sha": "d4fc2cc83690ec485149110cb582a412eb0b3c2e", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -113,7 +113,6 @@ static HOST_WIDE_INT gfc_get_alias_set (tree);\n #undef LANG_HOOKS_MARK_ADDRESSABLE\n #undef LANG_HOOKS_TYPE_FOR_MODE\n #undef LANG_HOOKS_TYPE_FOR_SIZE\n-#undef LANG_HOOKS_UNSIGNED_TYPE\n #undef LANG_HOOKS_SIGNED_TYPE\n #undef LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION\n #undef LANG_HOOKS_CLEAR_BINDING_STACK\n@@ -138,7 +137,6 @@ static HOST_WIDE_INT gfc_get_alias_set (tree);\n #define LANG_HOOKS_MARK_ADDRESSABLE        gfc_mark_addressable\n #define LANG_HOOKS_TYPE_FOR_MODE           gfc_type_for_mode\n #define LANG_HOOKS_TYPE_FOR_SIZE           gfc_type_for_size\n-#define LANG_HOOKS_UNSIGNED_TYPE           gfc_unsigned_type\n #define LANG_HOOKS_SIGNED_TYPE             gfc_signed_type\n #define LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION gfc_expand_function\n #define LANG_HOOKS_CLEAR_BINDING_STACK     gfc_clear_binding_stack"}, {"sha": "33b2e22ceb182d66af211418f547dcd84cedbe54", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -2400,7 +2400,7 @@ gfc_conv_intrinsic_ishft (gfc_se * se, gfc_expr * expr)\n   arg2 = TREE_VALUE (TREE_CHAIN (arg));\n   arg = TREE_VALUE (arg);\n   type = TREE_TYPE (arg);\n-  utype = gfc_unsigned_type (type);\n+  utype = unsigned_type_for (type);\n \n   width = fold_build1 (ABS_EXPR, TREE_TYPE (arg2), arg2);\n "}, {"sha": "0fcc66f0d2b777d6ea46a936c588cd054af9644f", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -890,7 +890,7 @@ gfc_trans_do (gfc_code * code)\n     {\n       tree ustep;\n \n-      utype = gfc_unsigned_type (type);\n+      utype = unsigned_type_for (type);\n \n       /* tmp = abs(to - from) / abs(step) */\n       ustep = fold_convert (utype, fold_build1 (ABS_EXPR, type, step));\n@@ -905,7 +905,7 @@ gfc_trans_do (gfc_code * code)\n       /* TODO: We could use the same width as the real type.\n \t This would probably cause more problems that it solves\n \t when we implement \"long double\" types.  */\n-      utype = gfc_unsigned_type (gfc_array_index_type);\n+      utype = unsigned_type_for (gfc_array_index_type);\n       tmp = fold_build2 (MINUS_EXPR, type, to, from);\n       tmp = fold_build2 (RDIV_EXPR, type, tmp, step);\n       tmp = fold_build1 (FIX_TRUNC_EXPR, utype, tmp);"}, {"sha": "d83987ea9bc228311b19cf2c8283bf2ab143f760", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -1839,14 +1839,6 @@ gfc_type_for_mode (enum machine_mode mode, int unsignedp)\n   return NULL_TREE;\n }\n \n-/* Return an unsigned type the same as TYPE in other respects.  */\n-\n-tree\n-gfc_unsigned_type (tree type)\n-{\n-  return get_signed_or_unsigned_type (1, type);\n-}\n-\n /* Return a signed type the same as TYPE in other respects.  */\n \n tree"}, {"sha": "761b2184af5ab40f2b96ba56ed39d9ad338b8914", "filename": "gcc/fortran/trans-types.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Ffortran%2Ftrans-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Ffortran%2Ftrans-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.h?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -82,7 +82,6 @@ tree gfc_get_function_type (gfc_symbol *);\n \n tree gfc_type_for_size (unsigned, int);\n tree gfc_type_for_mode (enum machine_mode, int);\n-tree gfc_unsigned_type (tree);\n tree gfc_signed_type (tree);\n \n tree gfc_get_element_type (tree);"}, {"sha": "dceb9690a8f8eeaef090368b3da91ceba6382dcd", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -1,3 +1,11 @@\n+2007-05-14  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* expr.c (build_java_binop): Use unsigned_type_for instead of\n+\tjava_unsigned_type.\n+\t* java-tree.h (java_unsigned_type): Remove.\n+\t* lang.c (LANG_HOOKS_UNSIGNED_TYPE): Remove.\n+\t* typeck.c (java_unsigned_type): Remove.\n+\n 2007-04-21  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \t* java-tree.h (lang_tree_node): Use GENERIC_NEXT"}, {"sha": "c915a91589f1cd77a5abb9719208b22fea326d36", "filename": "gcc/java/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -1523,7 +1523,7 @@ build_java_binop (enum tree_code op, tree type, tree arg1, tree arg2)\n     {\n     case URSHIFT_EXPR:\n       {\n-\ttree u_type = java_unsigned_type (type);\n+\ttree u_type = unsigned_type_for (type);\n \targ1 = convert (u_type, arg1);\n \targ1 = build_java_binop (RSHIFT_EXPR, u_type, arg1, arg2);\n \treturn convert (type, arg1);"}, {"sha": "cf41ef2435cea374e0b4ed619c955262fdf10ed5", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -1099,7 +1099,6 @@ extern void java_parse_file (int);\n extern bool java_mark_addressable (tree);\n extern tree java_type_for_mode (enum machine_mode, int);\n extern tree java_type_for_size (unsigned int, int);\n-extern tree java_unsigned_type (tree);\n extern tree java_signed_type (tree);\n extern tree java_truthvalue_conversion (tree);\n extern void add_assume_compiled (const char *, int);"}, {"sha": "5b0cbe841409d4f6e08696af5235fda69a3e37c1", "filename": "gcc/java/lang.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -184,8 +184,6 @@ struct language_function GTY(())\n #define LANG_HOOKS_TYPE_FOR_SIZE java_type_for_size\n #undef LANG_HOOKS_SIGNED_TYPE\n #define LANG_HOOKS_SIGNED_TYPE java_signed_type\n-#undef LANG_HOOKS_UNSIGNED_TYPE\n-#define LANG_HOOKS_UNSIGNED_TYPE java_unsigned_type\n \n #undef LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN\n #define LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN java_dump_tree"}, {"sha": "0d70929d099a772dec4a0ada103888d565bc909f", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -203,14 +203,6 @@ java_signed_type (tree type)\n   return get_signed_or_unsigned_type (0, type);\n }\n \n-/* Return an unsigned type the same as TYPE in other respects.  */\n-\n-tree\n-java_unsigned_type (tree type)\n-{\n-  return get_signed_or_unsigned_type (1, type);\n-}\n-\n /* Mark EXP saying that we need to be able to take the\n    address of it; it should not be allocated in a register.\n    Value is true if successful.  */"}, {"sha": "def7a4a538176f0b940f570d7d6cbc61a61255cf", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -211,7 +211,6 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_MAKE_TYPE, \\\n   LANG_HOOKS_TYPE_FOR_MODE, \\\n   LANG_HOOKS_TYPE_FOR_SIZE, \\\n-  LANG_HOOKS_UNSIGNED_TYPE, \\\n   LANG_HOOKS_SIGNED_TYPE, \\\n   LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE, \\\n   LANG_HOOKS_GENERIC_TYPE_P, \\"}, {"sha": "b3719c7094d929179439b3b31bdf6aacf31be22e", "filename": "gcc/langhooks.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -103,10 +103,6 @@ struct lang_hooks_for_types\n      integer type with at least that precision.  */\n   tree (*type_for_size) (unsigned, int);\n \n-  /* Given an integer type T, return a type like T but unsigned.\n-     If T is unsigned, the value is T.  */\n-  tree (*unsigned_type) (tree);\n-\n   /* Given an integer type T, return a type like T but signed.\n      If T is signed, the value is T.  */\n   tree (*signed_type) (tree);"}, {"sha": "2d96bd7af8747c2a30f041fd4b77c160cfe63ec3", "filename": "gcc/tree.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -7731,14 +7731,22 @@ int_cst_value (tree x)\n }\n \n \n+/* Return an unsigned type the same as TYPE in other respects.  */\n+\n+static tree\n+get_unsigned_type (tree type)\n+{\n+  return get_signed_or_unsigned_type (1, type);\n+}\n+\n /* Returns unsigned variant of TYPE.  */\n \n tree\n unsigned_type_for (tree type)\n {\n   if (POINTER_TYPE_P (type))\n-    return lang_hooks.types.unsigned_type (size_type_node);\n-  return lang_hooks.types.unsigned_type (type);\n+    return get_unsigned_type (size_type_node);\n+  return get_unsigned_type (type);\n }\n \n /* Returns signed variant of TYPE.  */"}, {"sha": "b74851c948710ac3b6986d20eb9d32cef7c2af48", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -1,3 +1,8 @@\n+2007-05-14  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* treetree.c (tree_lang_unsigned_type): Remove.\n+\t(LANG_HOOKS_UNSIGNED_TYPE): Remove.\n+\n 2007-03-30  Rafael Avila de Espindola  <espindola@google.com>\n \n \t* treetree.c (tree_lang_signed_or_unsigned_type): Remove."}, {"sha": "d288c0eda978e2605d356f850ec6fc56f4960056", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5ba2a3ea97efc7f23622d759bc3a885a12662b/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=ca5ba2a3ea97efc7f23622d759bc3a885a12662b", "patch": "@@ -127,7 +127,6 @@ struct language_function GTY(())\n static bool tree_mark_addressable (tree exp);\n static tree tree_lang_type_for_size (unsigned precision, int unsignedp);\n static tree tree_lang_type_for_mode (enum machine_mode mode, int unsignedp);\n-static tree tree_lang_unsigned_type (tree type_node);\n static tree tree_lang_signed_type (tree type_node);\n \n /* Functions to keep track of the current scope.  */\n@@ -153,8 +152,6 @@ static void treelang_expand_function (tree fndecl);\n #define LANG_HOOKS_MARK_ADDRESSABLE tree_mark_addressable\n #undef LANG_HOOKS_SIGNED_TYPE\n #define LANG_HOOKS_SIGNED_TYPE tree_lang_signed_type\n-#undef LANG_HOOKS_UNSIGNED_TYPE\n-#define LANG_HOOKS_UNSIGNED_TYPE tree_lang_unsigned_type\n #undef LANG_HOOKS_TYPE_FOR_MODE\n #define LANG_HOOKS_TYPE_FOR_MODE tree_lang_type_for_mode\n #undef LANG_HOOKS_TYPE_FOR_SIZE\n@@ -865,14 +862,6 @@ tree_lang_type_for_mode (enum machine_mode mode, int unsignedp)\n     return NULL_TREE;\n }\n \n-/* Return the unsigned version of a TYPE_NODE, a scalar type.  */\n-\n-static tree\n-tree_lang_unsigned_type (tree type_node)\n-{\n-  return tree_lang_type_for_size (TYPE_PRECISION (type_node), 1);\n-}\n-\n /* Return the signed version of a TYPE_NODE, a scalar type.  */\n \n static tree"}]}