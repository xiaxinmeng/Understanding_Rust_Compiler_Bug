{"sha": "694a2f6ea681d5e14af695d1c1848a1bd223d69c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk0YTJmNmVhNjgxZDVlMTRhZjY5NWQxYzE4NDhhMWJkMjIzZDY5Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2005-10-26T07:25:57Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-10-26T07:25:57Z"}, "message": "ia64.c (ia64_output_function_profiler): Emit an indirect call to _mcount if the function needs a static chain.\n\n\t* config/ia64/ia64.c (ia64_output_function_profiler): Emit an\n\tindirect call to _mcount if the function needs a static chain.\n\nFrom-SVN: r105917", "tree": {"sha": "8444f3b0059333dd1aea5f73488ac8d168dc139f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8444f3b0059333dd1aea5f73488ac8d168dc139f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/694a2f6ea681d5e14af695d1c1848a1bd223d69c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/694a2f6ea681d5e14af695d1c1848a1bd223d69c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/694a2f6ea681d5e14af695d1c1848a1bd223d69c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/694a2f6ea681d5e14af695d1c1848a1bd223d69c/comments", "author": null, "committer": null, "parents": [{"sha": "43f237b43f37cf15bd834e631aa82910cd9a50d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f237b43f37cf15bd834e631aa82910cd9a50d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43f237b43f37cf15bd834e631aa82910cd9a50d8"}], "stats": {"total": 70, "additions": 66, "deletions": 4}, "files": [{"sha": "3fed47ddcb9bf0a881532d5174c8bbc07b48f048", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694a2f6ea681d5e14af695d1c1848a1bd223d69c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694a2f6ea681d5e14af695d1c1848a1bd223d69c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=694a2f6ea681d5e14af695d1c1848a1bd223d69c", "patch": "@@ -1,3 +1,8 @@\n+2005-10-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/ia64/ia64.c (ia64_output_function_profiler): Emit an\n+\tindirect call to _mcount if the function needs a static chain.\n+\n 2005-10-25  Eric Botcazou  <ebotcazou@libertysurf.fr>\n             Caroline Tice  <ctice@apple.com>\n "}, {"sha": "2e1cc1937d06555c80c86aa8a30562a061f57247", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694a2f6ea681d5e14af695d1c1848a1bd223d69c/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694a2f6ea681d5e14af695d1c1848a1bd223d69c/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=694a2f6ea681d5e14af695d1c1848a1bd223d69c", "patch": "@@ -8802,17 +8802,35 @@ ia64_vector_mode_supported_p (enum machine_mode mode)\n     }\n }\n \n+/* Implement the FUNCTION_PROFILER macro.  */\n+\n void\n ia64_output_function_profiler (FILE *file, int labelno)\n {\n+  bool indirect_call;\n+\n+  /* If the function needs a static chain and the static chain\n+     register is r15, we use an indirect call so as to bypass\n+     the PLT stub in case the executable is dynamically linked,\n+     because the stub clobbers r15 as per 5.3.6 of the psABI.\n+     We don't need to do that in non canonical PIC mode.  */\n+\n+  if (cfun->static_chain_decl && !TARGET_NO_PIC && !TARGET_AUTO_PIC)\n+    {\n+      gcc_assert (STATIC_CHAIN_REGNUM == 15);\n+      indirect_call = true;\n+    }\n+  else\n+    indirect_call = false;\n+\n   if (TARGET_GNU_AS)\n     fputs (\"\\t.prologue 4, r40\\n\", file);\n   else\n     fputs (\"\\t.prologue\\n\\t.save ar.pfs, r40\\n\", file);\n   fputs (\"\\talloc out0 = ar.pfs, 8, 0, 4, 0\\n\", file);\n \n   if (NO_PROFILE_COUNTERS)\n-    fputs (\"\\tmov out3 = r0\\n\\t;;\\n\", file);\n+    fputs (\"\\tmov out3 = r0\\n\", file);\n   else\n     {\n       char buf[20];\n@@ -8824,16 +8842,30 @@ ia64_output_function_profiler (FILE *file, int labelno)\n \tfputs (\"\\taddl out3 = @ltoff(\", file);\n       assemble_name (file, buf);\n       if (TARGET_AUTO_PIC)\n-\tfputs (\")\\n\\t;;\\n\", file);\n+\tfputs (\")\\n\", file);\n       else\n-\tfputs (\"), r1\\n\\t;;\\n\", file);\n+\tfputs (\"), r1\\n\", file);\n     }\n \n+  if (indirect_call)\n+    fputs (\"\\taddl r14 = @ltoff(@fptr(_mcount)), r1\\n\", file);\n+  fputs (\"\\t;;\\n\", file);\n+\n   fputs (\"\\t.save rp, r42\\n\", file);\n   fputs (\"\\tmov out2 = b0\\n\", file);\n+  if (indirect_call)\n+    fputs (\"\\tld8 r14 = [r14]\\n\\t;;\\n\", file);\n   fputs (\"\\t.body\\n\", file);\n   fputs (\"\\tmov out1 = r1\\n\", file);\n-  fputs (\"\\tbr.call.sptk.many b0 = _mcount\\n\\t;;\\n\", file);\n+  if (indirect_call)\n+    {\n+      fputs (\"\\tld8 r16 = [r14], 8\\n\\t;;\\n\", file);\n+      fputs (\"\\tmov b6 = r16\\n\", file);\n+      fputs (\"\\tld8 r1 = [r14]\\n\", file);\n+      fputs (\"\\tbr.call.sptk.many b0 = b6\\n\\t;;\\n\", file);\n+    }\n+  else\n+    fputs (\"\\tbr.call.sptk.many b0 = _mcount\\n\\t;;\\n\", file);\n }\n \n static GTY(()) rtx mcount_func_rtx;"}, {"sha": "a59b5495f4c0aba4387df2cc95100448888b7988", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694a2f6ea681d5e14af695d1c1848a1bd223d69c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694a2f6ea681d5e14af695d1c1848a1bd223d69c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=694a2f6ea681d5e14af695d1c1848a1bd223d69c", "patch": "@@ -1,3 +1,7 @@\n+2005-10-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/nested-func-4.c: New test.\n+\n 2005-10-26  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/24158"}, {"sha": "5a17f7895314bf541883d24f506a4da3491eb8fa", "filename": "gcc/testsuite/gcc.dg/nested-func-4.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694a2f6ea681d5e14af695d1c1848a1bd223d69c/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-func-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694a2f6ea681d5e14af695d1c1848a1bd223d69c/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-func-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-func-4.c?ref=694a2f6ea681d5e14af695d1c1848a1bd223d69c", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-options \"-pg\" } */\n+\n+extern void abort(void);\n+\n+void foo(int i)\n+{\n+  void bar(void)\n+  {\n+    if (i != 2)\n+      abort ();\n+  }\n+\n+  bar();\n+}\n+\n+int main(void)\n+{\n+  foo (2);\n+  return 0;\n+}"}]}