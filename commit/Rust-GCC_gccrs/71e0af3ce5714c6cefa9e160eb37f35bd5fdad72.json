{"sha": "71e0af3ce5714c6cefa9e160eb37f35bd5fdad72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFlMGFmM2NlNTcxNGM2Y2VmYTllMTYwZWIzN2YzNWJkNWZkYWQ3Mg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-22T15:13:53Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-22T15:13:53Z"}, "message": "mcore.c (TARGET_ASM_TRAMPOLINE_TEMPLATE): New.\n\n        * config/mcore/mcore.c (TARGET_ASM_TRAMPOLINE_TEMPLATE): New.\n        (TARGET_TRAMPOLINE_INIT): New.\n        (mcore_function_value): Fix typo.\n        (mcore_asm_trampoline_template, mcore_trampoline_init): New.\n        * config/mcore/mcore.h (TRAMPOLINE_TEMPLATE): Move code\n        to mcore_asm_trampoline_template.\n        (INITIALIZE_TRAMPOLINE): Move code to mcore_trampoline_init.\n\nFrom-SVN: r151999", "tree": {"sha": "1be097a45373d097fd23e8c96f9fcd03712e9cfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1be097a45373d097fd23e8c96f9fcd03712e9cfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71e0af3ce5714c6cefa9e160eb37f35bd5fdad72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71e0af3ce5714c6cefa9e160eb37f35bd5fdad72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71e0af3ce5714c6cefa9e160eb37f35bd5fdad72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71e0af3ce5714c6cefa9e160eb37f35bd5fdad72/comments", "author": null, "committer": null, "parents": [{"sha": "0d7e5af167ecba1bee5a74f163e42754de5af980", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d7e5af167ecba1bee5a74f163e42754de5af980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d7e5af167ecba1bee5a74f163e42754de5af980"}], "stats": {"total": 87, "additions": 55, "deletions": 32}, "files": [{"sha": "db118ae8748824533235fed12b7860cd98db42da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e0af3ce5714c6cefa9e160eb37f35bd5fdad72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e0af3ce5714c6cefa9e160eb37f35bd5fdad72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71e0af3ce5714c6cefa9e160eb37f35bd5fdad72", "patch": "@@ -141,6 +141,14 @@\n \t* config/m68hc11/m68hc11-protos.h: Update.\n \t* config/m68hc11/m68hc11.h (INITIALIZE_TRAMPOLINE): Remove.\n \n+\t* config/mcore/mcore.c (TARGET_ASM_TRAMPOLINE_TEMPLATE): New.\n+\t(TARGET_TRAMPOLINE_INIT): New.\n+\t(mcore_function_value): Fix typo.\n+\t(mcore_asm_trampoline_template, mcore_trampoline_init): New.\n+\t* config/mcore/mcore.h (TRAMPOLINE_TEMPLATE): Move code \n+\tto mcore_asm_trampoline_template.\n+\t(INITIALIZE_TRAMPOLINE): Move code to mcore_trampoline_init.\n+\n 2009-09-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/rs6000.c (bdesc_2arg): Fix CODE_FOR_vector_gt* codes"}, {"sha": "de897fd5a55cf77af7578d97d412b3ae6d7a7610", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e0af3ce5714c6cefa9e160eb37f35bd5fdad72/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e0af3ce5714c6cefa9e160eb37f35bd5fdad72/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=71e0af3ce5714c6cefa9e160eb37f35bd5fdad72", "patch": "@@ -144,7 +144,8 @@ static bool       mcore_return_in_memory\t(const_tree, const_tree);\n static int        mcore_arg_partial_bytes       (CUMULATIVE_ARGS *,\n \t\t\t\t\t\t enum machine_mode,\n \t\t\t\t\t\t tree, bool);\n-\n+static void       mcore_asm_trampoline_template (FILE *);\n+static void       mcore_trampoline_init\t\t(rtx, tree, rtx);\n \f\n /* MCore specific attributes.  */\n \n@@ -209,6 +210,11 @@ static const struct attribute_spec mcore_attribute_table[] =\n #undef  TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS\tmcore_setup_incoming_varargs\n \n+#undef  TARGET_ASM_TRAMPOLINE_TEMPLATE\n+#define TARGET_ASM_TRAMPOLINE_TEMPLATE\tmcore_asm_trampoline_template\n+#undef  TARGET_TRAMPOLINE_INIT\n+#define TARGET_TRAMPOLINE_INIT\t\tmcore_trampoline_init\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Adjust the stack and return the number of bytes taken to do it.  */\n@@ -2736,7 +2742,7 @@ mcore_function_value (const_tree valtype, const_tree func)\n   mode = TYPE_MODE (valtype);\n \n   /* Since we promote return types, we must promote the mode here too.  */\n-  mode = promote_function_mode (valtype, mode, &unsignedp, func, 1);\n+  mode = promote_function_mode (valtype, mode, &unsigned_p, func, 1);\n   \n   return handle_structs_in_regs (mode, valtype, FIRST_RET_REG);\n }\n@@ -3105,3 +3111,42 @@ mcore_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n   const HOST_WIDE_INT size = int_size_in_bytes (type);\n   return (size == -1 || size > 2 * UNITS_PER_WORD);\n }\n+\n+/* Worker function for TARGET_ASM_TRAMPOLINE_TEMPLATE.\n+   Output assembler code for a block containing the constant parts\n+   of a trampoline, leaving space for the variable parts.\n+\n+   On the MCore, the trampoline looks like:\n+   \tlrw\tr1,  function\n+     \tlrw\tr13, area\n+   \tjmp\tr13\n+   \tor\tr0, r0\n+    .literals                                                */\n+\n+static void\n+mcore_asm_trampoline_template (FILE *f)\n+{\n+  fprintf (f, \"\\t.short\t0x7102\\n\");\n+  fprintf (f, \"\\t.short\t0x7d02\\n\");\n+  fprintf (f, \"\\t.short\t0x00cd\\n\");\n+  fprintf (f, \"\\t.short\t0x1e00\\n\");\n+  fprintf (f, \"\\t.long\t0\\n\");\n+  fprintf (f, \"\\t.long\t0\\n\");\n+}\n+\n+/* Worker function for TARGET_TRAMPOLINE_INIT.  */\n+\n+static void\n+mcore_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n+{\n+  rtx fnaddr = XEXP (DECL_RTL (fndecl), 0);\n+  rtx mem;\n+\n+  emit_block_move (m_tramp, assemble_trampoline_template (),\n+\t\t   GEN_INT (2*UNITS_PER_WORD), BLOCK_OP_NORMAL);\n+\n+  mem = adjust_address (m_tramp, SImode, 8);\n+  emit_move_insn (mem, chain_value);\n+  mem = adjust_address (m_tramp, SImode, 12);\n+  emit_move_insn (mem, fnaddr);\n+}"}, {"sha": "630a11fda1e56b3603c1c34255e24f8d0227246c", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e0af3ce5714c6cefa9e160eb37f35bd5fdad72/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e0af3ce5714c6cefa9e160eb37f35bd5fdad72/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=71e0af3ce5714c6cefa9e160eb37f35bd5fdad72", "patch": "@@ -631,42 +631,12 @@ extern const enum reg_class reg_class_from_letter[];\n    No definition is equivalent to always zero.  */\n #define EXIT_IGNORE_STACK 0\n \n-/* Output assembler code for a block containing the constant parts\n-   of a trampoline, leaving space for the variable parts.\n-\n-   On the MCore, the trampoline looks like:\n-   \tlrw\tr1,  function\n-     \tlrw\tr13, area\n-   \tjmp\tr13\n-   \tor\tr0, r0\n-    .literals                                                */\n-#define TRAMPOLINE_TEMPLATE(FILE)  \t\t\\\n-{\t\t\t\t\t\t\\\n-  fprintf ((FILE), \"\t.short\t0x7102\\n\");\t\\\n-  fprintf ((FILE), \"\t.short\t0x7d02\\n\");\t\\\n-  fprintf ((FILE), \"\t.short\t0x00cd\\n\");     \\\n-  fprintf ((FILE), \"\t.short\t0x1e00\\n\");\t\\\n-  fprintf ((FILE), \"\t.long\t0\\n\");\t\t\\\n-  fprintf ((FILE), \"\t.long\t0\\n\");\t\t\\\n-}\n-\n /* Length in units of the trampoline for entering a nested function.  */\n #define TRAMPOLINE_SIZE  12\n \n /* Alignment required for a trampoline in bits.  */\n #define TRAMPOLINE_ALIGNMENT  32\n \n-/* Emit RTL insns to initialize the variable parts of a trampoline.\n-   FNADDR is an RTX for the address of the function's pure code.\n-   CXT is an RTX for the static chain value for the function.  */\n-#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)  \\\n-{\t\t\t\t\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant ((TRAMP), 8)),\t\\\n-\t\t  (CXT));\t\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant ((TRAMP), 12)),\t\\\n-\t\t  (FNADDR));\t\t\t\t\t\t\\\n-}\n-\n /* Macros to check register numbers against specific register classes.  */\n \n /* These assume that REGNO is a hard or pseudo reg number."}]}