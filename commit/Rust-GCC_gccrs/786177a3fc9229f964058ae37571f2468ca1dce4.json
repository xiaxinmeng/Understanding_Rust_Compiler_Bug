{"sha": "786177a3fc9229f964058ae37571f2468ca1dce4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg2MTc3YTNmYzkyMjlmOTY0MDU4YWUzNzU3MWYyNDY4Y2ExZGNlNA==", "commit": {"author": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2020-09-10T16:05:40Z"}, "committer": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2020-09-10T16:10:31Z"}, "message": "aarch64: Add support for Armv8-R\n\nThis adds support for Armv8-R AArch64 to GCC. It adds the -march value\narmv8-r and sets the ACLE feature macro __ARM_ARCH_PROFILE correctly\nwhen -march is set to armv8-r.\n\ngcc/ChangeLog:\n\n\t* common/config/aarch64/aarch64-common.c\n\t(aarch64_get_extension_string_for_isa_flags): Don't force +crc for\n\tArmv8-R.\n\t* config/aarch64/aarch64-arches.def: Add entry for Armv8-R.\n\t* config/aarch64/aarch64-c.c (aarch64_define_unconditional_macros): Set\n\t__ARM_ARCH_PROFILE correctly for Armv8-R.\n\t* config/aarch64/aarch64.h (AARCH64_FL_V8_R): New.\n\t(AARCH64_FL_FOR_ARCH8_R): New.\n\t(AARCH64_ISA_V8_R): New.\n\t* doc/invoke.texi: Add Armv8-R to architecture table.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/acle/armv8-r.c: New test.", "tree": {"sha": "29b6ac81451c0ec675ef66857b33ee37b3b9b084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29b6ac81451c0ec675ef66857b33ee37b3b9b084"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/786177a3fc9229f964058ae37571f2468ca1dce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786177a3fc9229f964058ae37571f2468ca1dce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/786177a3fc9229f964058ae37571f2468ca1dce4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786177a3fc9229f964058ae37571f2468ca1dce4/comments", "author": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36efcd7de0431b099087d8ae1ad358b0e088a250", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36efcd7de0431b099087d8ae1ad358b0e088a250", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36efcd7de0431b099087d8ae1ad358b0e088a250"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "909006e6194321b5d5ea8f0167a2fe367ea18ceb", "filename": "gcc/common/config/aarch64/aarch64-common.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786177a3fc9229f964058ae37571f2468ca1dce4/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786177a3fc9229f964058ae37571f2468ca1dce4/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c?ref=786177a3fc9229f964058ae37571f2468ca1dce4", "patch": "@@ -426,8 +426,11 @@ aarch64_get_extension_string_for_isa_flags (uint64_t isa_flags,\n       names.  However as a special case if CRC was enabled before, always print\n       it.  This is required because some CPUs have an incorrect specification\n       in older assemblers.  Even though CRC should be the default for these\n-      cases the -mcpu values won't turn it on.  */\n-  if (isa_flags & AARCH64_ISA_CRC)\n+      cases the -mcpu values won't turn it on.\n+\n+      Note that assemblers with Armv8-R AArch64 support should not have this\n+      issue, so we don't need this fix when targeting Armv8-R.  */\n+  if ((isa_flags & AARCH64_ISA_CRC) && !AARCH64_ISA_V8_R)\n     isa_flag_bits |= AARCH64_ISA_CRC;\n \n   /* Pass Two:"}, {"sha": "389084f56c223810391a3929e9e5e13ef3ec5249", "filename": "gcc/config/aarch64/aarch64-arches.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786177a3fc9229f964058ae37571f2468ca1dce4/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786177a3fc9229f964058ae37571f2468ca1dce4/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def?ref=786177a3fc9229f964058ae37571f2468ca1dce4", "patch": "@@ -37,5 +37,6 @@ AARCH64_ARCH(\"armv8.3-a\",     generic,\t     8_3A,\t8,  AARCH64_FL_FOR_ARCH8_3)\n AARCH64_ARCH(\"armv8.4-a\",     generic,\t     8_4A,\t8,  AARCH64_FL_FOR_ARCH8_4)\n AARCH64_ARCH(\"armv8.5-a\",     generic,\t     8_5A,\t8,  AARCH64_FL_FOR_ARCH8_5)\n AARCH64_ARCH(\"armv8.6-a\",     generic,\t     8_6A,\t8,  AARCH64_FL_FOR_ARCH8_6)\n+AARCH64_ARCH(\"armv8-r\",       generic,\t     8R  ,\t8,  AARCH64_FL_FOR_ARCH8_R)\n \n #undef AARCH64_ARCH"}, {"sha": "69691b3ad729a7a80b7dca7a175674d798c2abdf", "filename": "gcc/config/aarch64/aarch64-c.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786177a3fc9229f964058ae37571f2468ca1dce4/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786177a3fc9229f964058ae37571f2468ca1dce4/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.c?ref=786177a3fc9229f964058ae37571f2468ca1dce4", "patch": "@@ -63,7 +63,8 @@ aarch64_define_unconditional_macros (cpp_reader *pfile)\n      as interoperability with the same arm macro.  */\n   builtin_define (\"__ARM_ARCH_8A\");\n \n-  builtin_define_with_int_value (\"__ARM_ARCH_PROFILE\", 'A');\n+  builtin_define_with_int_value (\"__ARM_ARCH_PROFILE\",\n+      AARCH64_ISA_V8_R ? 'R' : 'A');\n   builtin_define (\"__ARM_FEATURE_CLZ\");\n   builtin_define (\"__ARM_FEATURE_IDIV\");\n   builtin_define (\"__ARM_FEATURE_UNALIGNED\");"}, {"sha": "00b5f8438863bb52c348cfafd5d4db478fe248a7", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786177a3fc9229f964058ae37571f2468ca1dce4/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786177a3fc9229f964058ae37571f2468ca1dce4/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=786177a3fc9229f964058ae37571f2468ca1dce4", "patch": "@@ -161,6 +161,8 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_FL_LSE\t      (1 << 4)  /* Has Large System Extensions.  */\n #define AARCH64_FL_RDMA       (1 << 5)  /* Has Round Double Multiply Add.  */\n #define AARCH64_FL_V8_1       (1 << 6)  /* Has ARMv8.1-A extensions.  */\n+/* Armv8-R.  */\n+#define AARCH64_FL_V8_R       (1 << 7)  /* Armv8-R AArch64.  */\n /* ARMv8.2-A architecture extensions.  */\n #define AARCH64_FL_V8_2       (1 << 8)  /* Has ARMv8.2-A features.  */\n #define AARCH64_FL_F16\t      (1 << 9)  /* Has ARMv8.2-A FP16 extensions.  */\n@@ -246,6 +248,8 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_FL_FOR_ARCH8_6\t\t\t\\\n   (AARCH64_FL_FOR_ARCH8_5 | AARCH64_FL_V8_6 | AARCH64_FL_FPSIMD \\\n    | AARCH64_FL_I8MM | AARCH64_FL_BF16)\n+#define AARCH64_FL_FOR_ARCH8_R     \\\n+  (AARCH64_FL_FOR_ARCH8_4 | AARCH64_FL_V8_R)\n \n /* Macros to test ISA flags.  */\n \n@@ -282,6 +286,7 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_ISA_F64MM\t   (aarch64_isa_flags & AARCH64_FL_F64MM)\n #define AARCH64_ISA_BF16\t   (aarch64_isa_flags & AARCH64_FL_BF16)\n #define AARCH64_ISA_SB\t\t   (aarch64_isa_flags & AARCH64_FL_SB)\n+#define AARCH64_ISA_V8_R\t   (aarch64_isa_flags & AARCH64_FL_V8_R)\n \n /* Crypto is an optional extension to AdvSIMD.  */\n #define TARGET_CRYPTO (TARGET_SIMD && AARCH64_ISA_CRYPTO)"}, {"sha": "ebd8d7314e2cbcdb8322c21a1ca686614176d416", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786177a3fc9229f964058ae37571f2468ca1dce4/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786177a3fc9229f964058ae37571f2468ca1dce4/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=786177a3fc9229f964058ae37571f2468ca1dce4", "patch": "@@ -17344,6 +17344,7 @@ and the features that they enable by default:\n @item @samp{armv8.4-a} @tab Armv8.4-A @tab @samp{armv8.3-a}, @samp{+fp16fml}, @samp{+dotprod}\n @item @samp{armv8.5-a} @tab Armv8.5-A @tab @samp{armv8.4-a}, @samp{+sb}, @samp{+ssbs}, @samp{+predres}\n @item @samp{armv8.6-a} @tab Armv8.6-A @tab @samp{armv8.5-a}, @samp{+bf16}, @samp{+i8mm}\n+@item @samp{armv8-r} @tab Armv8-R @tab @samp{armv8-r}\n @end multitable\n \n The value @samp{native} is available on native AArch64 GNU/Linux and"}, {"sha": "2866168cf960c1ebd25a5f29d67e425870a50c4c", "filename": "gcc/testsuite/gcc.target/aarch64/acle/armv8-r.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786177a3fc9229f964058ae37571f2468ca1dce4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Farmv8-r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786177a3fc9229f964058ae37571f2468ca1dce4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Farmv8-r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Farmv8-r.c?ref=786177a3fc9229f964058ae37571f2468ca1dce4", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8-r\" } */\n+\n+#if __ARM_ARCH_PROFILE != 'R'\n+#error ACLE architecture profile macro incorrect\n+#endif"}]}