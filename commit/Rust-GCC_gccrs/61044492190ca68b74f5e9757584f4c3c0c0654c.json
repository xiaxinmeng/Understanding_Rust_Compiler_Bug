{"sha": "61044492190ca68b74f5e9757584f4c3c0c0654c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEwNDQ0OTIxOTBjYTY4Yjc0ZjVlOTc1NzU4NGY0YzNjMGMwNjU0Yw==", "commit": {"author": {"name": "Jie Zhang", "email": "jie@codesourcery.com", "date": "2010-07-23T14:47:46Z"}, "committer": {"name": "Jie Zhang", "email": "jiez@gcc.gnu.org", "date": "2010-07-23T14:47:46Z"}, "message": "re PR target/44290 (__naked attribute is broken)\n\n\tPR target/44290\n\t* attribs.c (decl_attributes): Insert \"noinline\" and \"noclone\"\n\tif \"naked\".\n\t* tree-sra.c (ipa_sra_preliminary_function_checks): Return\n\tfalse if ! tree_versionable_function_p.\n\n\ttestsuite/\n\tPR target/44290\n\t* gcc.dg/pr44290-1.c: New test.\n\t* gcc.dg/pr44290-2.c: New test.\n\nFrom-SVN: r162466", "tree": {"sha": "b7192056c818495d64ebed95b109b7adcbf4d7e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7192056c818495d64ebed95b109b7adcbf4d7e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61044492190ca68b74f5e9757584f4c3c0c0654c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61044492190ca68b74f5e9757584f4c3c0c0654c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61044492190ca68b74f5e9757584f4c3c0c0654c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61044492190ca68b74f5e9757584f4c3c0c0654c/comments", "author": null, "committer": null, "parents": [{"sha": "9477ccb2b1e059f639abf2483893f2b950d34fed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9477ccb2b1e059f639abf2483893f2b950d34fed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9477ccb2b1e059f639abf2483893f2b950d34fed"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "adc38f49d2ebff0adbbf89916f40c5fcd429917a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61044492190ca68b74f5e9757584f4c3c0c0654c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61044492190ca68b74f5e9757584f4c3c0c0654c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61044492190ca68b74f5e9757584f4c3c0c0654c", "patch": "@@ -1,3 +1,11 @@\n+2010-07-23  Jie Zhang  <jie@codesourcery.com>\n+\n+\tPR target/44290\n+\t* attribs.c (decl_attributes): Insert \"noinline\" and \"noclone\"\n+\tif \"naked\".\n+\t* tree-sra.c (ipa_sra_preliminary_function_checks): Return\n+\tfalse if ! tree_versionable_function_p.\n+\n 2010-07-23  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* builtins.def (BUILT_IN_ARGS_INFO): Remove."}, {"sha": "d8daa6f5ed6de2d166851cde7081e2f75564fce9", "filename": "gcc/attribs.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61044492190ca68b74f5e9757584f4c3c0c0654c/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61044492190ca68b74f5e9757584f4c3c0c0654c/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=61044492190ca68b74f5e9757584f4c3c0c0654c", "patch": "@@ -276,6 +276,19 @@ decl_attributes (tree *node, tree attributes, int flags)\n \tTREE_VALUE (cur_attr) = chainon (opts, TREE_VALUE (cur_attr));\n     }\n \n+  /* A \"naked\" function attribute implies \"noinline\" and \"noclone\" for\n+     those targets that support it.  */\n+  if (TREE_CODE (*node) == FUNCTION_DECL\n+      && lookup_attribute_spec (get_identifier (\"naked\"))\n+      && lookup_attribute (\"naked\", attributes) != NULL)\n+    {\n+      if (lookup_attribute (\"noinline\", attributes) == NULL)\n+\tattributes = tree_cons (get_identifier (\"noinline\"), NULL, attributes);\n+\n+      if (lookup_attribute (\"noclone\", attributes) == NULL)\n+\tattributes = tree_cons (get_identifier (\"noclone\"),  NULL, attributes);\n+    }\n+\n   targetm.insert_attributes (*node, &attributes);\n \n   for (a = attributes; a; a = TREE_CHAIN (a))"}, {"sha": "35923e208768c50d643acb560563a773b16e22b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61044492190ca68b74f5e9757584f4c3c0c0654c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61044492190ca68b74f5e9757584f4c3c0c0654c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=61044492190ca68b74f5e9757584f4c3c0c0654c", "patch": "@@ -1,3 +1,9 @@\n+2010-07-23  Jie Zhang  <jie@codesourcery.com>\n+\n+\tPR target/44290\n+\t* gcc.dg/pr44290-1.c: New test.\n+\t* gcc.dg/pr44290-2.c: New test.\n+\n 2010-07-23  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/45008"}, {"sha": "071a271042528181c11a963a93bcdc06ff9b4a8a", "filename": "gcc/testsuite/gcc.dg/pr44290-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61044492190ca68b74f5e9757584f4c3c0c0654c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44290-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61044492190ca68b74f5e9757584f4c3c0c0654c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44290-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44290-1.c?ref=61044492190ca68b74f5e9757584f4c3c0c0654c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target arm*-*-* avr-*-* mcore-*-* rx-*-* spu-*-* } } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+static void __attribute__((naked))\n+foo(void *from, void *to)\n+{\n+  asm volatile(\"dummy\"::\"r\"(from), \"r\"(to));\n+}\n+\n+unsigned int fie[2];\n+\n+void fum(void *to)\n+{\n+  foo(fie, to);\n+}\n+\n+/* { dg-final { scan-tree-dump \"foo \\\\\\(void \\\\\\* from, void \\\\\\* to\\\\\\)\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "1951a519dfc04ecfaef5a6c0a1e79090afd3b66d", "filename": "gcc/testsuite/gcc.dg/pr44290-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61044492190ca68b74f5e9757584f4c3c0c0654c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44290-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61044492190ca68b74f5e9757584f4c3c0c0654c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44290-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44290-2.c?ref=61044492190ca68b74f5e9757584f4c3c0c0654c", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile { target arm*-*-* avr-*-* mcore-*-* rx-*-* spu-*-* } } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+static unsigned long __attribute__((naked))\n+foo (unsigned long base)\n+{\n+  asm volatile (\"dummy\");\n+}\n+unsigned long\n+bar (void)\n+{\n+  static int start, set;\n+\n+  if (!set)\n+    {\n+      set = 1;\n+      start = foo (0);\n+    }\n+\n+  return foo (start);\n+}\n+\n+/* { dg-final { scan-tree-dump \"foo \\\\\\(long unsigned int base\\\\\\)\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "2bd9f97e1de3aaf9be962d2172b59506c346ed33", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61044492190ca68b74f5e9757584f4c3c0c0654c/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61044492190ca68b74f5e9757584f4c3c0c0654c/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=61044492190ca68b74f5e9757584f4c3c0c0654c", "patch": "@@ -4301,6 +4301,13 @@ modify_function (struct cgraph_node *node, ipa_parm_adjustment_vec adjustments)\n static bool\n ipa_sra_preliminary_function_checks (struct cgraph_node *node)\n {\n+  if (!tree_versionable_function_p (current_function_decl))\n+    {\n+      if (dump_file)\n+\tfprintf (dump_file, \"Function isn't allowed to be versioned.\\n\");\n+      return false;\n+    }\n+\n   if (!cgraph_node_can_be_local_p (node))\n     {\n       if (dump_file)"}]}