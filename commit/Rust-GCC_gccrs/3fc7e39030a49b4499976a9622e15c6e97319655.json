{"sha": "3fc7e39030a49b4499976a9622e15c6e97319655", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZjN2UzOTAzMGE0OWI0NDk5OTc2YTk2MjJlMTVjNmU5NzMxOTY1NQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-03T06:41:07Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-03T06:41:07Z"}, "message": "(type_for_size): If no ANSI type matches, check for matches with built-in mode-related types.\n\n(type_for_size):  If no ANSI type matches, check for\nmatches with built-in mode-related types.\n(type_for_mode):  Likewise.\n\nFrom-SVN: r1397", "tree": {"sha": "ac992acf8c31cb17abc06f4a39d84be7041f22d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac992acf8c31cb17abc06f4a39d84be7041f22d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fc7e39030a49b4499976a9622e15c6e97319655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc7e39030a49b4499976a9622e15c6e97319655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fc7e39030a49b4499976a9622e15c6e97319655", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc7e39030a49b4499976a9622e15c6e97319655/comments", "author": null, "committer": null, "parents": [{"sha": "a5a9fc56a5c4f43a54cb15e2a16c6ea14f2dbcfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a9fc56a5c4f43a54cb15e2a16c6ea14f2dbcfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5a9fc56a5c4f43a54cb15e2a16c6ea14f2dbcfe"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "3cfb680346e2f17bcb28bf89d7c923b4533de646", "filename": "gcc/c-common.c", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc7e39030a49b4499976a9622e15c6e97319655/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc7e39030a49b4499976a9622e15c6e97319655/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=3fc7e39030a49b4499976a9622e15c6e97319655", "patch": "@@ -339,22 +339,34 @@ type_for_size (bits, unsignedp)\n      unsigned bits;\n      int unsignedp;\n {\n-  if (bits <= TYPE_PRECISION (signed_char_type_node))\n+  if (bits == TYPE_PRECISION (signed_char_type_node))\n     return unsignedp ? unsigned_char_type_node : signed_char_type_node;\n \n-  if (bits <= TYPE_PRECISION (short_integer_type_node))\n+  if (bits == TYPE_PRECISION (short_integer_type_node))\n     return unsignedp ? short_unsigned_type_node : short_integer_type_node;\n \n-  if (bits <= TYPE_PRECISION (integer_type_node))\n+  if (bits == TYPE_PRECISION (integer_type_node))\n     return unsignedp ? unsigned_type_node : integer_type_node;\n \n-  if (bits <= TYPE_PRECISION (long_integer_type_node))\n+  if (bits == TYPE_PRECISION (long_integer_type_node))\n     return unsignedp ? long_unsigned_type_node : long_integer_type_node;\n \n-  if (bits <= TYPE_PRECISION (long_long_integer_type_node))\n+  if (bits == TYPE_PRECISION (long_long_integer_type_node))\n     return (unsignedp ? long_long_unsigned_type_node\n \t    : long_long_integer_type_node);\n \n+  if (bits <= TYPE_PRECISION (intQI_type_node))\n+    return unsignedp ? unsigned_intQI_type_node : intQI_type_node;\n+\n+  if (bits <= TYPE_PRECISION (intHI_type_node))\n+    return unsignedp ? unsigned_intHI_type_node : intHI_type_node;\n+\n+  if (bits <= TYPE_PRECISION (intSI_type_node))\n+    return unsignedp ? unsigned_intSI_type_node : intSI_type_node;\n+\n+  if (bits <= TYPE_PRECISION (intDI_type_node))\n+    return unsignedp ? unsigned_intDI_type_node : intDI_type_node;\n+\n   return 0;\n }\n \n@@ -382,6 +394,18 @@ type_for_mode (mode, unsignedp)\n   if (mode == TYPE_MODE (long_long_integer_type_node))\n     return unsignedp ? long_long_unsigned_type_node : long_long_integer_type_node;\n \n+  if (mode == TYPE_MODE (intQI_type_node))\n+    return unsignedp ? unsigned_intQI_type_node : intQI_type_node;\n+\n+  if (mode == TYPE_MODE (intHI_type_node))\n+    return unsignedp ? unsigned_intHI_type_node : intHI_type_node;\n+\n+  if (mode == TYPE_MODE (intSI_type_node))\n+    return unsignedp ? unsigned_intSI_type_node : intSI_type_node;\n+\n+  if (mode == TYPE_MODE (intDI_type_node))\n+    return unsignedp ? unsigned_intDI_type_node : intDI_type_node;\n+\n   if (mode == TYPE_MODE (float_type_node))\n     return float_type_node;\n "}]}