{"sha": "f1d5187ef5fa21ca10b8bd2db61e4213fd8d0f55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFkNTE4N2VmNWZhMjFjYTEwYjhiZDJkYjYxZTQyMTNmZDhkMGY1NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2003-08-11T15:28:20Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-08-11T15:28:20Z"}, "message": "mips.c: Various formatting fixes.\n\n\t* config/mips/mips.c: Various formatting fixes.\n\t(override_options): Resync -mtune handling with gas.\n\t(mips_issue_rate): Rearrange like mips_use_dfa_pipeline_interface.\n\t* config/mips/mips.h: More formatting fixes.\n\t(mips_abi): Move declaration.\n\t* config/mips/mips.md (exception_receiver): Add mode to\n\tunspec_volatile.\n\nFrom-SVN: r70327", "tree": {"sha": "db89d7928ecf35d183792ddf65149dc042c4a432", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db89d7928ecf35d183792ddf65149dc042c4a432"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1d5187ef5fa21ca10b8bd2db61e4213fd8d0f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1d5187ef5fa21ca10b8bd2db61e4213fd8d0f55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1d5187ef5fa21ca10b8bd2db61e4213fd8d0f55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1d5187ef5fa21ca10b8bd2db61e4213fd8d0f55/comments", "author": null, "committer": null, "parents": [{"sha": "00332c9f9f49f45d947b9597759fdc704306f651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00332c9f9f49f45d947b9597759fdc704306f651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00332c9f9f49f45d947b9597759fdc704306f651"}], "stats": {"total": 115, "additions": 63, "deletions": 52}, "files": [{"sha": "93b2d2c582b1f2a5412e145292b01f2adde6b091", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1d5187ef5fa21ca10b8bd2db61e4213fd8d0f55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1d5187ef5fa21ca10b8bd2db61e4213fd8d0f55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1d5187ef5fa21ca10b8bd2db61e4213fd8d0f55", "patch": "@@ -1,3 +1,13 @@\n+2003-08-11  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.c: Various formatting fixes.\n+\t(override_options): Resync -mtune handling with gas.\n+\t(mips_issue_rate): Rearrange like mips_use_dfa_pipeline_interface.\n+\t* config/mips/mips.h: More formatting fixes.\n+\t(mips_abi): Move declaration.\n+\t* config/mips/mips.md (exception_receiver): Add mode to\n+\tunspec_volatile.\n+\n 2003-08-11  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/rs6000/rs6000.c (spe_init_builtins): Handle evsplati and"}, {"sha": "8fdbd5a3a3beeda6614291765e6e1c73113eee0c", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1d5187ef5fa21ca10b8bd2db61e4213fd8d0f55/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1d5187ef5fa21ca10b8bd2db61e4213fd8d0f55/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=f1d5187ef5fa21ca10b8bd2db61e4213fd8d0f55", "patch": "@@ -57,18 +57,18 @@ Boston, MA 02111-1307, USA.  */\n    of EQ, NE, etc.  */\n \n enum internal_test {\n-    ITEST_EQ,\n-    ITEST_NE,\n-    ITEST_GT,\n-    ITEST_GE,\n-    ITEST_LT,\n-    ITEST_LE,\n-    ITEST_GTU,\n-    ITEST_GEU,\n-    ITEST_LTU,\n-    ITEST_LEU,\n-    ITEST_MAX\n-  };\n+  ITEST_EQ,\n+  ITEST_NE,\n+  ITEST_GT,\n+  ITEST_GE,\n+  ITEST_LT,\n+  ITEST_LE,\n+  ITEST_GTU,\n+  ITEST_GEU,\n+  ITEST_LTU,\n+  ITEST_LEU,\n+  ITEST_MAX\n+};\n \n /* Return true if it is likely that the given mode will be accessed\n    using only a single instruction.  */\n@@ -4690,9 +4690,6 @@ override_options ()\n   if (mips_arch_string != 0)\n     mips_set_architecture (mips_parse_cpu (\"-march\", mips_arch_string));\n \n-  if (mips_tune_string != 0)\n-    mips_set_tune (mips_parse_cpu (\"-mtune\", mips_tune_string));\n-\n   if (mips_isa_string != 0)\n     {\n       /* Handle -mipsN.  */\n@@ -4729,6 +4726,9 @@ override_options ()\n \t   mips_arch_info->name);\n \n   /* Optimize for mips_arch, unless -mtune selects a different processor.  */\n+  if (mips_tune_string != 0)\n+    mips_set_tune (mips_parse_cpu (\"-mtune\", mips_tune_string));\n+\n   if (mips_tune_info == 0)\n     mips_set_tune (mips_arch_info);\n \n@@ -9940,11 +9940,11 @@ mips_issue_rate ()\n {\n   switch (mips_tune)\n     {\n-    case PROCESSOR_R3000: return 1;\n-    case PROCESSOR_R5400: return 2;\n-    case PROCESSOR_R5500: return 2;\n-    case PROCESSOR_R7000: return 2;\n-    case PROCESSOR_R9000: return 2;\n+    case PROCESSOR_R5400:\n+    case PROCESSOR_R5500:\n+    case PROCESSOR_R7000:\n+    case PROCESSOR_R9000:\n+      return 2;\n \n     default:\n       return 1;\n@@ -9979,30 +9979,30 @@ const char *\n mips_emit_prefetch (operands)\n      rtx operands[];\n {\n- /* For the mips32/64 architectures the hint fields are arranged\n-    by operation (load/store) and locality (normal/streamed/retained).\n-    Irritatingly, numbers 2 and 3 are reserved leaving no simple\n-    algorithm for figuring the hint.  */\n+  /* For the mips32/64 architectures the hint fields are arranged\n+     by operation (load/store) and locality (normal/streamed/retained).\n+     Irritatingly, numbers 2 and 3 are reserved leaving no simple\n+     algorithm for figuring the hint.  */\n \n-    int write = INTVAL (operands[1]);\n-    int locality = INTVAL (operands[2]);\n+  int write = INTVAL (operands[1]);\n+  int locality = INTVAL (operands[2]);\n \n-    static const char * const alt[2][4] = {\n-\t{\n-\t \"pref\\t4,%a0\",\n-\t \"pref\\t0,%a0\",\n-\t \"pref\\t0,%a0\",\n-\t \"pref\\t6,%a0\"\n-\t},\n-\t{\n-\t \"pref\\t5,%a0\",\n-\t \"pref\\t1,%a0\",\n-\t \"pref\\t1,%a0\",\n-\t \"pref\\t7,%a0\"\n-\t}\n-    };\n+  static const char * const alt[2][4] = {\n+    {\n+      \"pref\\t4,%a0\",\n+      \"pref\\t0,%a0\",\n+      \"pref\\t0,%a0\",\n+      \"pref\\t6,%a0\"\n+    },\n+    {\n+      \"pref\\t5,%a0\",\n+      \"pref\\t1,%a0\",\n+      \"pref\\t1,%a0\",\n+      \"pref\\t7,%a0\"\n+    }\n+  };\n \n-    return alt[write][locality];\n+  return alt[write][locality];\n }\n \n "}, {"sha": "4527cd7e231b2e52c29259095fc288b0a9a2311f", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1d5187ef5fa21ca10b8bd2db61e4213fd8d0f55/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1d5187ef5fa21ca10b8bd2db61e4213fd8d0f55/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=f1d5187ef5fa21ca10b8bd2db61e4213fd8d0f55", "patch": "@@ -114,6 +114,7 @@ extern enum cmp_type branch_type;\t/* what type of branch to use */\n extern enum processor_type mips_arch;   /* which cpu to codegen for */\n extern enum processor_type mips_tune;   /* which cpu to schedule for */\n extern int mips_isa;\t\t\t/* architectural level */\n+extern int mips_abi;\t\t\t/* which ABI to use */\n extern int mips16_hard_float;\t\t/* mips16 without -msoft-float */\n extern int mips_entry;\t\t\t/* generate entry/exit for mips16 */\n extern const char *mips_arch_string;    /* for -march=<xxx> */\n@@ -363,7 +364,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n       /* We do this here because __mips is defined below\t\\\n \t and so we can't use builtin_define_std.  */\t\t\\\n       if (!flag_iso)\t\t\t\t\t\t\\\n-\t  builtin_define (\"mips\");\t\t\t\t\\\n+\tbuiltin_define (\"mips\");\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n       /* Treat _R3000 and _R4000 like register-size defines,\t\\\n \t which is how they've historically been used.  */\t\\\n@@ -379,12 +380,12 @@ extern const struct mips_cpu_info *mips_tune_info;\n \t  builtin_define (\"_R3000\");\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\\\n       if (TARGET_FLOAT64)\t\t\t\t\t\\\n-\t  builtin_define (\"__mips_fpr=64\");\t\t\t\\\n+\tbuiltin_define (\"__mips_fpr=64\");\t\t\t\\\n       else\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__mips_fpr=32\");\t\t\t\\\n+\tbuiltin_define (\"__mips_fpr=32\");\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n       if (TARGET_MIPS16)\t\t\t\t\t\\\n-\t  builtin_define (\"__mips16\");\t\t\t\t\\\n+\tbuiltin_define (\"__mips16\");\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n       MIPS_CPP_SET_PROCESSOR (\"_MIPS_ARCH\", mips_arch_info);\t\\\n       MIPS_CPP_SET_PROCESSOR (\"_MIPS_TUNE\", mips_tune_info);\t\\\n@@ -429,12 +430,12 @@ extern const struct mips_cpu_info *mips_tune_info;\n \t}\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n       if (TARGET_HARD_FLOAT)\t\t\t\t\t\\\n-\t  builtin_define (\"__mips_hard_float\");\t\t\t\\\n+\tbuiltin_define (\"__mips_hard_float\");\t\t\t\\\n       else if (TARGET_SOFT_FLOAT)\t\t\t\t\\\n-\t  builtin_define (\"__mips_soft_float\");\t\t\t\\\n+\tbuiltin_define (\"__mips_soft_float\");\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n       if (TARGET_SINGLE_FLOAT)\t\t\t\t\t\\\n-\t  builtin_define (\"__mips_single_float\");\t\t\\\n+\tbuiltin_define (\"__mips_single_float\");\t\t\\\n \t\t\t\t\t\t\t\t\\\n       if (TARGET_BIG_ENDIAN)\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n@@ -976,8 +977,6 @@ extern const struct mips_cpu_info *mips_tune_info;\n \n #define SUBTARGET_TARGET_SWITCHES\n \n-extern int mips_abi;\n-\n #ifndef MIPS_ABI_DEFAULT\n #define MIPS_ABI_DEFAULT ABI_32\n #endif\n@@ -1223,7 +1222,9 @@ extern int mips_abi;\n #define INCOMING_RETURN_ADDR_RTX  gen_rtx_REG (VOIDmode, GP_REG_FIRST + 31)\n \n /* Describe how we implement __builtin_eh_return.  */\n-#define EH_RETURN_DATA_REGNO(N) ((N) < (TARGET_MIPS16 ? 2 : 4) ? (N) + GP_ARG_FIRST : INVALID_REGNUM)\n+#define EH_RETURN_DATA_REGNO(N) \\\n+  ((N) < (TARGET_MIPS16 ? 2 : 4) ? (N) + GP_ARG_FIRST : INVALID_REGNUM)\n+\n #define EH_RETURN_STACKADJ_RTX  gen_rtx_REG (Pmode, GP_REG_FIRST + 3)\n \n /* Offsets recorded in opcodes are a multiple of this alignment factor."}, {"sha": "2b614cf66504146723db1cd41b8e08456e4ff9fc", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1d5187ef5fa21ca10b8bd2db61e4213fd8d0f55/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1d5187ef5fa21ca10b8bd2db61e4213fd8d0f55/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=f1d5187ef5fa21ca10b8bd2db61e4213fd8d0f55", "patch": "@@ -8453,7 +8453,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\\\n\\\\t%*j\\\\t%2%/\"\n \n (define_insn \"exception_receiver\"\n   [(set (reg:SI 28)\n-\t(unspec_volatile [(const_int 0)] UNSPEC_EH_RECEIVER))]\n+\t(unspec_volatile:SI [(const_int 0)] UNSPEC_EH_RECEIVER))]\n   \"TARGET_ABICALLS && (mips_abi == ABI_32 || mips_abi == ABI_O64)\"\n   { return mips_restore_gp (operands); }\n   [(set_attr \"type\"   \"load\")"}]}