{"sha": "3eddaad02dcce21fb67c42cc6e1e8f951a630ac1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VkZGFhZDAyZGNjZTIxZmI2N2M0MmNjNmUxZThmOTUxYTYzMGFjMQ==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-03-03T16:59:28Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-05-19T13:43:55Z"}, "message": "aarch64: Relax aarch64_<sur><addsub>hn2<mode> RTL pattern\n\nImplement v[r]addhn2 and v[r]subhn2 Neon intrinsic RTL patterns using\na vec_concat of a register_operand and an ADDSUBHN unspec - instead\nof just an ADDSUBHN2 unspec. This more relaxed pattern allows for\nmore aggressive combinations and ultimately better code generation.\n\nThis patch also removes the now redundant [R]ADDHN2 and [R]SUBHN2\nunspecs and their iterator.\n\ngcc/ChangeLog:\n\n2021-03-03  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd.md (aarch64_<sur><addsub>hn2<mode>):\n\tImplement as an expand emitting a big/little endian\n\tinstruction pattern.\n\t(aarch64_<sur><addsub>hn2<mode>_insn_le): Define.\n\t(aarch64_<sur><addsub>hn2<mode>_insn_be): Define.\n\t* config/aarch64/iterators.md: Remove UNSPEC_[R]ADDHN2 and\n\tUNSPEC_[R]SUBHN2 unspecs and ADDSUBHN2 iterator.", "tree": {"sha": "ad40edd60ba9cf9e89f72dd2ac2a224adf1aff61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad40edd60ba9cf9e89f72dd2ac2a224adf1aff61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3eddaad02dcce21fb67c42cc6e1e8f951a630ac1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eddaad02dcce21fb67c42cc6e1e8f951a630ac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eddaad02dcce21fb67c42cc6e1e8f951a630ac1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eddaad02dcce21fb67c42cc6e1e8f951a630ac1/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d51039cb7c807ed84ff7df5416a1e3ba07a5e63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d51039cb7c807ed84ff7df5416a1e3ba07a5e63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d51039cb7c807ed84ff7df5416a1e3ba07a5e63"}], "stats": {"total": 58, "additions": 38, "deletions": 20}, "files": [{"sha": "1efc854a2ec1aee77f96087d28114ae3480ab290", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eddaad02dcce21fb67c42cc6e1e8f951a630ac1/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eddaad02dcce21fb67c42cc6e1e8f951a630ac1/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=3eddaad02dcce21fb67c42cc6e1e8f951a630ac1", "patch": "@@ -4594,17 +4594,48 @@\n   [(set_attr \"type\" \"neon_<addsub>_halve_narrow_q\")]\n )\n \n-(define_insn \"aarch64_<sur><addsub>hn2<mode>\"\n+(define_insn \"aarch64_<sur><addsub>hn2<mode>_insn_le\"\n   [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n-        (unspec:<VNARROWQ2> [(match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")\n-\t\t\t     (match_operand:VQN 2 \"register_operand\" \"w\")\n-\t\t\t     (match_operand:VQN 3 \"register_operand\" \"w\")]\n-                            ADDSUBHN2))]\n-  \"TARGET_SIMD\"\n+\t(vec_concat:<VNARROWQ2>\n+\t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")\n+\t  (unspec:<VNARROWQ> [(match_operand:VQN 2 \"register_operand\" \"w\")\n+\t\t\t      (match_operand:VQN 3 \"register_operand\" \"w\")]\n+\t\t\t     ADDSUBHN)))]\n+  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n+  \"<sur><addsub>hn2\\\\t%0.<V2ntype>, %2.<Vtype>, %3.<Vtype>\"\n+  [(set_attr \"type\" \"neon_<addsub>_halve_narrow_q\")]\n+)\n+\n+(define_insn \"aarch64_<sur><addsub>hn2<mode>_insn_be\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (unspec:<VNARROWQ> [(match_operand:VQN 2 \"register_operand\" \"w\")\n+\t\t\t      (match_operand:VQN 3 \"register_operand\" \"w\")]\n+\t\t\t     ADDSUBHN)\n+\t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n   \"<sur><addsub>hn2\\\\t%0.<V2ntype>, %2.<Vtype>, %3.<Vtype>\"\n   [(set_attr \"type\" \"neon_<addsub>_halve_narrow_q\")]\n )\n \n+(define_expand \"aarch64_<sur><addsub>hn2<mode>\"\n+  [(match_operand:<VNARROWQ2> 0 \"register_operand\")\n+   (match_operand:<VNARROWQ> 1 \"register_operand\")\n+   (unspec [(match_operand:VQN 2 \"register_operand\")\n+\t    (match_operand:VQN 3 \"register_operand\")]\n+\t   ADDSUBHN)]\n+  \"TARGET_SIMD\"\n+  {\n+    if (BYTES_BIG_ENDIAN)\n+      emit_insn (gen_aarch64_<sur><addsub>hn2<mode>_insn_be (operands[0],\n+\t\t\t\toperands[1], operands[2], operands[3]));\n+    else\n+      emit_insn (gen_aarch64_<sur><addsub>hn2<mode>_insn_le (operands[0],\n+\t\t\t\toperands[1], operands[2], operands[3]));\n+    DONE;\n+  }\n+)\n+\n ;; pmul.\n \n (define_insn \"aarch64_pmul<mode>\""}, {"sha": "29ce6690e9dc94e760bd73ec4f198c736b2a766d", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eddaad02dcce21fb67c42cc6e1e8f951a630ac1/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eddaad02dcce21fb67c42cc6e1e8f951a630ac1/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=3eddaad02dcce21fb67c42cc6e1e8f951a630ac1", "patch": "@@ -514,10 +514,6 @@\n     UNSPEC_RADDHN\t; Used in aarch64-simd.md.\n     UNSPEC_SUBHN\t; Used in aarch64-simd.md.\n     UNSPEC_RSUBHN\t; Used in aarch64-simd.md.\n-    UNSPEC_ADDHN2\t; Used in aarch64-simd.md.\n-    UNSPEC_RADDHN2\t; Used in aarch64-simd.md.\n-    UNSPEC_SUBHN2\t; Used in aarch64-simd.md.\n-    UNSPEC_RSUBHN2\t; Used in aarch64-simd.md.\n     UNSPEC_SQDMULH\t; Used in aarch64-simd.md.\n     UNSPEC_SQRDMULH\t; Used in aarch64-simd.md.\n     UNSPEC_PMUL\t\t; Used in aarch64-simd.md.\n@@ -2241,9 +2237,6 @@\n (define_int_iterator ADDSUBHN [UNSPEC_ADDHN UNSPEC_RADDHN\n \t\t\t       UNSPEC_SUBHN UNSPEC_RSUBHN])\n \n-(define_int_iterator ADDSUBHN2 [UNSPEC_ADDHN2 UNSPEC_RADDHN2\n-\t\t\t        UNSPEC_SUBHN2 UNSPEC_RSUBHN2])\n-\n (define_int_iterator FMAXMIN_UNS [UNSPEC_FMAX UNSPEC_FMIN\n \t\t\t\t  UNSPEC_FMAXNM UNSPEC_FMINNM])\n \n@@ -3000,8 +2993,6 @@\n \t\t      (UNSPEC_SABDL2 \"s\") (UNSPEC_UABDL2 \"u\")\n \t\t      (UNSPEC_SADALP \"s\") (UNSPEC_UADALP \"u\")\n \t\t      (UNSPEC_SUBHN \"\") (UNSPEC_RSUBHN \"r\")\n-\t\t      (UNSPEC_ADDHN2 \"\") (UNSPEC_RADDHN2 \"r\")\n-\t\t      (UNSPEC_SUBHN2 \"\") (UNSPEC_RSUBHN2 \"r\")\n \t\t      (UNSPEC_USQADD \"us\") (UNSPEC_SUQADD \"su\")\n \t\t      (UNSPEC_SSLI  \"s\") (UNSPEC_USLI  \"u\")\n \t\t      (UNSPEC_SSRI  \"s\") (UNSPEC_USRI  \"u\")\n@@ -3064,11 +3055,7 @@\n \t\t\t (UNSPEC_ADDHN \"add\")\n \t\t\t (UNSPEC_SUBHN \"sub\")\n \t\t\t (UNSPEC_RADDHN \"add\")\n-\t\t\t (UNSPEC_RSUBHN \"sub\")\n-\t\t\t (UNSPEC_ADDHN2 \"add\")\n-\t\t\t (UNSPEC_SUBHN2 \"sub\")\n-\t\t\t (UNSPEC_RADDHN2 \"add\")\n-\t\t\t (UNSPEC_RSUBHN2 \"sub\")])\n+\t\t\t (UNSPEC_RSUBHN \"sub\")])\n \n ;; BSL variants: first commutative operand.\n (define_int_attr bsl_1st [(1 \"w\") (2 \"0\")])"}]}