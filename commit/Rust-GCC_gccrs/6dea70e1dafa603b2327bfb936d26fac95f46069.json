{"sha": "6dea70e1dafa603b2327bfb936d26fac95f46069", "node_id": "C_kwDOANBUbNoAKDZkZWE3MGUxZGFmYTYwM2IyMzI3YmZiOTM2ZDI2ZmFjOTVmNDYwNjk", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-22T11:22:54Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-22T11:27:31Z"}, "message": "Cleanup canonical path usage on impl blocks", "tree": {"sha": "fe35b868836615bd65dbea1ff593c17d05b04391", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe35b868836615bd65dbea1ff593c17d05b04391"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dea70e1dafa603b2327bfb936d26fac95f46069", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dea70e1dafa603b2327bfb936d26fac95f46069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dea70e1dafa603b2327bfb936d26fac95f46069", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dea70e1dafa603b2327bfb936d26fac95f46069/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f4ec11e8c2399ca20f80b4006e294794f9b2e0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f4ec11e8c2399ca20f80b4006e294794f9b2e0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f4ec11e8c2399ca20f80b4006e294794f9b2e0f"}], "stats": {"total": 40, "additions": 18, "deletions": 22}, "files": [{"sha": "0c38f28d5306678a83c35f176015a28cc5ec9bbf", "filename": "gcc/rust/resolve/rust-ast-resolve-item.cc", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dea70e1dafa603b2327bfb936d26fac95f46069/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dea70e1dafa603b2327bfb936d26fac95f46069/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc?ref=6dea70e1dafa603b2327bfb936d26fac95f46069", "patch": "@@ -534,25 +534,17 @@ ResolveItem::visit (AST::InherentImpl &impl_block)\n \n   // FIXME this needs to be protected behind nominal type-checks see:\n   // rustc --explain E0118\n-\n-  NodeId resolved_node = ResolveType::go (impl_block.get_type ().get ());\n-  if (resolved_node == UNKNOWN_NODEID)\n-    {\n-      resolver->get_type_scope ().pop ();\n-      resolver->get_name_scope ().pop ();\n-      return;\n-    }\n+  ResolveType::go (impl_block.get_type ().get ());\n \n   // Setup paths\n   CanonicalPath self_cpath = CanonicalPath::create_empty ();\n   bool ok = ResolveTypeToCanonicalPath::go (impl_block.get_type ().get (),\n \t\t\t\t\t    self_cpath);\n   rust_assert (ok);\n+  rust_debug (\"AST::InherentImpl resolve Self: {%s}\",\n+\t      self_cpath.get ().c_str ());\n \n-  std::string raw_impl_type_path = impl_block.get_type ()->as_string ();\n-  CanonicalPath impl_type\n-    = CanonicalPath::new_seg (impl_block.get_type ()->get_node_id (),\n-\t\t\t      raw_impl_type_path);\n+  CanonicalPath impl_type = self_cpath;\n   CanonicalPath impl_prefix = prefix.append (impl_type);\n \n   // see https://godbolt.org/z/a3vMbsT6W\n@@ -580,6 +572,9 @@ ResolveItem::visit (AST::InherentImpl &impl_block)\n \n   for (auto &impl_item : impl_block.get_impl_items ())\n     {\n+      rust_debug (\n+\t\"AST::InherentImpl resolve_impl_item: impl_prefix={%s} cpath={%s}\",\n+\timpl_prefix.get ().c_str (), cpath.get ().c_str ());\n       resolve_impl_item (impl_item.get (), impl_prefix, cpath);\n     }\n \n@@ -703,22 +698,20 @@ ResolveItem::visit (AST::TraitImpl &impl_block)\n \t\t\t\t       canonical_trait_type);\n   rust_assert (ok);\n \n+  rust_debug (\"AST::TraitImpl resolve trait type: {%s}\",\n+\t      canonical_trait_type.get ().c_str ());\n+\n   CanonicalPath canonical_impl_type = CanonicalPath::create_empty ();\n   ok = ResolveTypeToCanonicalPath::go (impl_block.get_type ().get (),\n \t\t\t\t       canonical_impl_type);\n   rust_assert (ok);\n \n-  // raw paths\n-  std::string raw_impl_type_path = impl_block.get_type ()->as_string ();\n-  CanonicalPath impl_type_seg\n-    = CanonicalPath::new_seg (impl_block.get_type ()->get_node_id (),\n-\t\t\t      raw_impl_type_path);\n-\n-  std::string raw_trait_type_path = impl_block.get_trait_path ().as_string ();\n-  CanonicalPath trait_type_seg\n-    = CanonicalPath::new_seg (impl_block.get_trait_path ().get_node_id (),\n-\t\t\t      raw_trait_type_path);\n+  rust_debug (\"AST::TraitImpl resolve self: {%s}\",\n+\t      canonical_impl_type.get ().c_str ());\n \n+  // raw paths\n+  CanonicalPath impl_type_seg = canonical_impl_type;\n+  CanonicalPath trait_type_seg = canonical_trait_type;\n   CanonicalPath projection\n     = CanonicalPath::trait_impl_projection_seg (impl_block.get_node_id (),\n \t\t\t\t\t\ttrait_type_seg, impl_type_seg);\n@@ -756,6 +749,9 @@ ResolveItem::visit (AST::TraitImpl &impl_block)\n \n   for (auto &impl_item : impl_block.get_impl_items ())\n     {\n+      rust_debug (\n+\t\"AST::TraitImpl resolve_impl_item: impl_prefix={%s} cpath={%s}\",\n+\timpl_prefix.get ().c_str (), cpath.get ().c_str ());\n       resolve_impl_item (impl_item.get (), impl_prefix, cpath);\n     }\n "}]}