{"sha": "d3ee260a2840ee112c110b1b9bcd2c673a9a9ea1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNlZTI2MGEyODQwZWUxMTJjMTEwYjFiOWJjZDJjNjczYTlhOWVhMQ==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-06-17T09:26:05Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-06-17T09:26:05Z"}, "message": "re PR tree-optimization/71347 (Performance drop after r235513 on x86-64 in 32-bit mode.)\n\n\tPR tree-optimization/71347\n\t* tree-ssa-loop-ivopts.c (determine_group_iv_cost_address): Compute\n\tcost for all uses in group.\n\n\tPR tree-optimization/71347\n\t* gcc.dg/tree-ssa/pr71347.c: New test.\n\nFrom-SVN: r237552", "tree": {"sha": "563367258daeb7f327d8757c35e8e7b653b860ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/563367258daeb7f327d8757c35e8e7b653b860ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3ee260a2840ee112c110b1b9bcd2c673a9a9ea1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3ee260a2840ee112c110b1b9bcd2c673a9a9ea1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3ee260a2840ee112c110b1b9bcd2c673a9a9ea1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3ee260a2840ee112c110b1b9bcd2c673a9a9ea1/comments", "author": null, "committer": null, "parents": [{"sha": "bd8fb1146e42873785a3d3af65f120aa1888d8db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd8fb1146e42873785a3d3af65f120aa1888d8db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd8fb1146e42873785a3d3af65f120aa1888d8db"}], "stats": {"total": 59, "additions": 34, "deletions": 25}, "files": [{"sha": "d804252b76c42bd19e66b5d971036f3d895bddb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ee260a2840ee112c110b1b9bcd2c673a9a9ea1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ee260a2840ee112c110b1b9bcd2c673a9a9ea1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d3ee260a2840ee112c110b1b9bcd2c673a9a9ea1", "patch": "@@ -1,3 +1,9 @@\n+2016-06-17  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/71347\n+\t* tree-ssa-loop-ivopts.c (determine_group_iv_cost_address): Compute\n+\tcost for all uses in group.\n+\n 2016-06-17 Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-vect-loop.c (vect_create_epilog_for_reduction): Only"}, {"sha": "f2893c18e68cef0e54f8c1b1c47671208e81ba5e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ee260a2840ee112c110b1b9bcd2c673a9a9ea1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ee260a2840ee112c110b1b9bcd2c673a9a9ea1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d3ee260a2840ee112c110b1b9bcd2c673a9a9ea1", "patch": "@@ -1,3 +1,8 @@\n+2016-06-17  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/71347\n+\t* gcc.dg/tree-ssa/pr71347.c: New test.\n+\n 2016-06-17  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/71354"}, {"sha": "c8f87a9ba5d21ff44caa815e33f51d613565e24d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr71347.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ee260a2840ee112c110b1b9bcd2c673a9a9ea1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71347.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ee260a2840ee112c110b1b9bcd2c673a9a9ea1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71347.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71347.c?ref=d3ee260a2840ee112c110b1b9bcd2c673a9a9ea1", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+double in;\n+extern void Write (double);\n+void foo (void)\n+{\n+  static double X[9];\n+  int i;\n+        X[1] = in * in;\n+        for (i = 2; i <= 8; i++)\n+            X[i] = X[i - 1] * X[1];\n+        Write (X[5]);\n+}\n+\n+/* Load of X[i - i] can be omitted by reusing X[i] in previous iteration.  */\n+/* { dg-final { scan-tree-dump-not \".* = MEM.*;\" \"optimized\"} } */"}, {"sha": "25b978085124f1ccdd91f6a52112c9c69bd97d11", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 6, "deletions": 25, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ee260a2840ee112c110b1b9bcd2c673a9a9ea1/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ee260a2840ee112c110b1b9bcd2c673a9a9ea1/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=d3ee260a2840ee112c110b1b9bcd2c673a9a9ea1", "patch": "@@ -5115,7 +5115,7 @@ determine_group_iv_cost_address (struct ivopts_data *data,\n {\n   unsigned i;\n   bitmap depends_on;\n-  bool can_autoinc, first = true;\n+  bool can_autoinc;\n   iv_inv_expr_ent *inv_expr = NULL;\n   struct iv_use *use = group->vuses[0];\n   comp_cost sum_cost = no_cost, cost;\n@@ -5142,30 +5142,11 @@ determine_group_iv_cost_address (struct ivopts_data *data,\n     {\n       struct iv_use *next = group->vuses[i];\n \n-      /* Compute cost for the first use with different offset to the main\n-\t use and add it afterwards.  Costs for these uses could be quite\n-\t different.  Given below uses in a group:\n-\t   use 0  : {base + A + offset_0, step}\n-\t   use 0.1: {base + A + offset_0, step}\n-\t   use 0.2: {base + A + offset_1, step}\n-\t   use 0.3: {base + A + offset_2, step}\n-\t when we need to compute costs with candidate:\n-\t   cand 1 : {base + B + offset_0, step}\n-\n-\t The first use with different offset is use 0.2, its cost is larger\n-\t than cost of use 0/0.1 because we need to compute:\n-\t   A - B + offset_1 - offset_0\n-\t   rather than:\n-\t   A - B.  */\n-      if (first && next->addr_offset != use->addr_offset)\n-\t{\n-\t  first = false;\n-\t  cost = get_computation_cost (data, next, cand, true,\n-\t\t\t\t       NULL, &can_autoinc, NULL);\n-\t  /* Remove setup cost.  */\n-\t  if (!cost.infinite_cost_p ())\n-\t    cost -= cost.scratch;\n-\t}\n+      /* TODO: We could skip computing cost for sub iv_use when it has the\n+\t same cost as the first iv_use, but the cost really depends on the\n+\t offset and where the iv_use is.  */\n+\tcost = get_computation_cost (data, next, cand, true,\n+\t\t\t\t     NULL, &can_autoinc, NULL);\n       sum_cost += cost;\n     }\n   set_group_iv_cost (data, group, cand, sum_cost, depends_on,"}]}