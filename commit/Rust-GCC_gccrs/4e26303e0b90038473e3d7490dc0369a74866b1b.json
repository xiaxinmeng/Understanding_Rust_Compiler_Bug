{"sha": "4e26303e0b90038473e3d7490dc0369a74866b1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUyNjMwM2UwYjkwMDM4NDczZTNkNzQ5MGRjMDM2OWE3NDg2NmIxYg==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-03-04T12:36:09Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-05-19T13:44:10Z"}, "message": "aarch64: Relax aarch64_<sur>q<r>shr<u>n2_n<mode> RTL pattern\n\nImplement saturating right-shift and narrow high Neon intrinsic RTL\npatterns using a vec_concat of a register_operand and a VQSHRN_N\nunspec - instead of just a VQSHRN_N unspec. This more relaxed pattern\nallows for more aggressive combinations and ultimately better code\ngeneration.\n\ngcc/ChangeLog:\n\n2021-03-04  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd.md (aarch64_<sur>q<r>shr<u>n2_n<mode>):\n\tImplement as an expand emitting a big/little endian\n\tinstruction pattern.\n\t(aarch64_<sur>q<r>shr<u>n2_n<mode>_insn_le): Define.\n\t(aarch64_<sur>q<r>shr<u>n2_n<mode>_insn_be): Define.", "tree": {"sha": "e478d5f9b8d2f3e54b637500bb381e3d96b459a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e478d5f9b8d2f3e54b637500bb381e3d96b459a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e26303e0b90038473e3d7490dc0369a74866b1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e26303e0b90038473e3d7490dc0369a74866b1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e26303e0b90038473e3d7490dc0369a74866b1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e26303e0b90038473e3d7490dc0369a74866b1b/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eddaad02dcce21fb67c42cc6e1e8f951a630ac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eddaad02dcce21fb67c42cc6e1e8f951a630ac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eddaad02dcce21fb67c42cc6e1e8f951a630ac1"}], "stats": {"total": 49, "additions": 43, "deletions": 6}, "files": [{"sha": "5473d61aaa9cda8b6fe744e5e8674e3b3339ecc6", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e26303e0b90038473e3d7490dc0369a74866b1b/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e26303e0b90038473e3d7490dc0369a74866b1b/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=4e26303e0b90038473e3d7490dc0369a74866b1b", "patch": "@@ -6054,17 +6054,54 @@\n   [(set_attr \"type\" \"neon_sat_shift_imm_narrow_q\")]\n )\n \n-(define_insn \"aarch64_<sur>q<r>shr<u>n2_n<mode>\"\n+(define_insn \"aarch64_<sur>q<r>shr<u>n2_n<mode>_insn_le\"\n   [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n-        (unspec:<VNARROWQ2> [(match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")\n-\t\t\t     (match_operand:VQN 2 \"register_operand\" \"w\")\n-\t\t\t     (match_operand:SI 3 \"aarch64_simd_shift_imm_offset_<ve_mode>\" \"i\")]\n-                            VQSHRN_N))]\n-  \"TARGET_SIMD\"\n+\t(vec_concat:<VNARROWQ2>\n+\t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")\n+\t  (unspec:<VNARROWQ> [(match_operand:VQN 2 \"register_operand\" \"w\")\n+\t\t\t      (match_operand:VQN 3\n+\t\t\t\t\"aarch64_simd_shift_imm_vec_<vn_mode>\")]\n+\t\t\t     VQSHRN_N)))]\n+  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n   \"<sur>q<r>shr<u>n2\\\\t%<vn2>0.<V2ntype>, %<v>2.<Vtype>, %3\"\n   [(set_attr \"type\" \"neon_sat_shift_imm_narrow_q\")]\n )\n \n+(define_insn \"aarch64_<sur>q<r>shr<u>n2_n<mode>_insn_be\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+          (unspec:<VNARROWQ> [(match_operand:VQN 2 \"register_operand\" \"w\")\n+\t\t\t      (match_operand:VQN 3\n+\t\t\t\t\"aarch64_simd_shift_imm_vec_<vn_mode>\")]\n+\t\t\t     VQSHRN_N)\n+\t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+  \"<sur>q<r>shr<u>n2\\\\t%<vn2>0.<V2ntype>, %<v>2.<Vtype>, %3\"\n+  [(set_attr \"type\" \"neon_sat_shift_imm_narrow_q\")]\n+)\n+\n+(define_expand \"aarch64_<sur>q<r>shr<u>n2_n<mode>\"\n+  [(match_operand:<VNARROWQ2> 0 \"register_operand\")\n+   (match_operand:<VNARROWQ> 1 \"register_operand\")\n+   (unspec:<VNARROWQ>\n+\t[(match_operand:VQN 2 \"register_operand\")\n+\t (match_operand:SI 3 \"aarch64_simd_shift_imm_offset_<vn_mode>\")]\n+        VQSHRN_N)]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[3] = aarch64_simd_gen_const_vector_dup (<MODE>mode,\n+\t\t\t\t\t\t INTVAL (operands[3]));\n+\n+    if (BYTES_BIG_ENDIAN)\n+      emit_insn (gen_aarch64_<sur>q<r>shr<u>n2_n<mode>_insn_be (operands[0],\n+\t\t\t\toperands[1], operands[2], operands[3]));\n+    else\n+      emit_insn (gen_aarch64_<sur>q<r>shr<u>n2_n<mode>_insn_le (operands[0],\n+\t\t\t\toperands[1], operands[2], operands[3]));\n+    DONE;\n+  }\n+)\n+\n \n ;; cm(eq|ge|gt|lt|le)\n ;; Note, we have constraints for Dz and Z as different expanders"}]}